- en: 'Practical Python: spaCy for NLP'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/practical-python-spacy-for-nlp-b9d626cf53ed](https://towardsdatascience.com/practical-python-spacy-for-nlp-b9d626cf53ed)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Effective Python Programming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Beginner’s Guide to Natural Language Processing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://jvision.medium.com/?source=post_page-----b9d626cf53ed--------------------------------)[![Joseph
    Robinson, Ph.D.](../Images/3117b65a4e10752724585d3457343695.png)](https://jvision.medium.com/?source=post_page-----b9d626cf53ed--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b9d626cf53ed--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b9d626cf53ed--------------------------------)
    [Joseph Robinson, Ph.D.](https://jvision.medium.com/?source=post_page-----b9d626cf53ed--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b9d626cf53ed--------------------------------)
    ·12 min read·Jan 9, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: The spaCy Python library is a popular tool for natural language processing (NLP).
    It is designed to help developers build applications that process and "understand"
    large volumes of text. spaCy is equipped with advanced tokenization, parsing,
    and entity recognition features. It also has support for many popular languages.
    spaCy is fast and efficient at runtime, making it a good choice for building production-level
    NLP applications. One of the essential parts of spaCy is its ability to create
    and use custom models for specific NLP tasks, such as named entity recognition
    or part-of-speech tagging. Developers can fine-tune using data specific to their
    applications to meet the needs of their particular use case.
  prefs: []
  type: TYPE_NORMAL
- en: Table of Contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: · [Overview](#6142)
  prefs: []
  type: TYPE_NORMAL
- en: · [Introduction to NLP and spaCy](#3220)
  prefs: []
  type: TYPE_NORMAL
- en: · [Installing and Setting Up spaCy](#ff71)
  prefs: []
  type: TYPE_NORMAL
- en: '· [Basic NLP with spaCy: Tokenization and Part-of-Speech Tagging](#4964)'
  prefs: []
  type: TYPE_NORMAL
- en: '· [Advanced NLP with spaCy: NER and Dependency Parsing](#cdd0)'
  prefs: []
  type: TYPE_NORMAL
- en: · [Working with Large Corpora and Custom Models in spaCy](#ae63)
  prefs: []
  type: TYPE_NORMAL
- en: '· [Advanced spaCy Techniques: Text Classification and Word Vectors](#1c93)'
  prefs: []
  type: TYPE_NORMAL
- en: · [spaCy in Practice](#6500)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [spaCy and deep learning](#7495)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [spaCy's features exemplified](#09ed)
  prefs: []
  type: TYPE_NORMAL
- en: '· [Wrapping Up: Further Resources and Next Steps](#0df6)'
  prefs: []
  type: TYPE_NORMAL
- en: · [Contact](#7308)
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We cover the basics of NLP with spaCy, including tokenization and part-of-speech
    (POS) tagging, as well as more advanced topics like named entity recognition and
    dependency parsing. The guide also touches on working with large data sets, custom
    models, and advanced techniques like text classification and word vectors. Finally,
    it provides some suggestions for further resources and the next steps for those
    who want to continue learning about NLP with spaCy.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f45eed6bfba0665014a43e8347fe0166.png)'
  prefs: []
  type: TYPE_IMG
- en: Wordcloud for the blog. The author generates it via [https://www.wordclouds.com/](https://www.wordclouds.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to NLP and spaCy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Natural Language Processing (NLP) is a field of computer science and artificial
    intelligence concerned with enabling computers to understand and process human
    language (Fig 2). NLP has many applications, including machine translation, text
    classification, sentiment analysis, and chatbot development.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/98ee113748c83f693c63f2e8d9c96757.png)'
  prefs: []
  type: TYPE_IMG
- en: Fig 2\. NLP is a topic that intersects with AI, computer science, and linguistics.
    Visual created by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most popular Python libraries for NLP is spaCy: an open-source library
    designed to help developers build applications that process large volumes of text
    with speed and efficiency at runtime, making it a good choice for building production-level
    NLP applications.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and Setting Up spaCy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To install and set up spaCy, you must have Python and pip, the Python package
    manager, installed on your computer. If you still need to get Python and pip,
    you can download and install them from the official Python website.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.python.org/?source=post_page-----b9d626cf53ed--------------------------------)
    [## Welcome to Python.org'
  prefs: []
  type: TYPE_NORMAL
- en: The official home of the Python Programming Language
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.python.org](https://www.python.org/?source=post_page-----b9d626cf53ed--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have Python and pip installed, you can use pip to install spaCy. First,
    open a terminal or command prompt and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will install the latest version of spaCy and all of its dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation, you must download one of spaCy''s pre-trained language
    models. spaCy includes models for several languages, including English, German,
    French, and Spanish. To download the English model, for example, you would enter
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will download the small English model, which includes basic NLP functionality
    like tokenization, POS tagging, and dependency parsing. If you need more advanced
    functionality, you can also download larger models with additional features like
    named entity recognition and word vectors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basic NLP with spaCy: Tokenization and Part-of-Speech Tagging'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most basic tasks in NLP is tokenization, or breaking a string of
    text into individual tokens (words and punctuation). Tokenization is critical
    in many NLP pipelines, as it allows us to work with particular words and punctuation
    marks as discrete units.
  prefs: []
  type: TYPE_NORMAL
- en: 'spaCy makes it easy to perform tokenization with its `nlp` object and the `Doc`
    class. To tokenize a string of text with spaCy, you can pass the string to the
    `nlp` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Doc` object that is returned contains the object''s tokens, which you
    can access via `text`. For example, you can iterate over the tokens like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This will output the individual tokens in the input string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In addition to tokenization, another common NLP task is part-of-speech (POS)
    tagging or marking each token with its corresponding part of speech. POS tagging
    is often used to help disambiguate word meanings and identify the underlying grammatical
    structure of a sentence.
  prefs: []
  type: TYPE_NORMAL
- en: 'spaCy makes it easy to perform POS tagging with the `pos_` attribute of its
    `Token` objects. For example, you can iterate over the tokens in a `Doc` object
    and print out their POS tags like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This will output the tokens and their POS tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: spaCy includes a large number of POS tags, which are consistent across all supported
    languages. You can find the complete list of POS tags in the spaCy documentation.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at how to use spaCy to perform more advanced
    NLP tasks, like named entity recognition and dependency parsing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Advanced NLP with spaCy: NER and Dependency Parsing'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/6d9ea4d9087af8fa2103c5ddff2170cd.png)'
  prefs: []
  type: TYPE_IMG
- en: Image generated by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous section, we covered the basics of tokenization and POS tagging
    with spaCy. In this section, we will look at two more advanced NLP tasks that
    can be performed with spaCy: named entity recognition and dependency parsing.'
  prefs: []
  type: TYPE_NORMAL
- en: Named entity recognition (NER) identifies and classifies named entities in a
    text, such as people, organizations, and locations. NER is often used to extract
    structured information from unstructured text and can be a valuable tool for tasks
    like information extraction and entity linking.
  prefs: []
  type: TYPE_NORMAL
- en: 'spaCy includes a pre-trained NER model that identifies and classifies named
    entities in a text. To use the NER model, you can iterate over the entities in
    a `Doc` object and print out their text and label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d2fdcbc50eefc83ca5047c780522a500.png)'
  prefs: []
  type: TYPE_IMG
- en: spaCy includes several predefined entity types, such as `PERSON`, `ORG`, and
    `GPE` (geopolitical entity). You can find the complete list of entity types in
    the spaCy documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency parsing is analyzing the grammatical structure of a sentence and
    determining the dependencies between the words. Dependency parsing is often used
    for a sentence's primary subjects and objects and can be a helpful tool for tasks
    like summarization and question answering.
  prefs: []
  type: TYPE_NORMAL
- en: 'spaCy includes a dependency parser that can be used to analyze the grammatical
    structure of a sentence. To use the dependency parser, you can iterate over the
    tokens in a `Doc` object and print out the token text, dependency label, and head
    token:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This will output the tokens, their dependency labels, and the head tokens of
    the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: spaCy includes several dependency labels, which describe the grammatical relationship
    between a token and its head token. You can find the complete list of dependency
    labels in the spaCy documentation.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at how to use spaCy to work with large data
    sets and build custom models for specific NLP tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Large Corpora and Custom Models in spaCy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous sections, we covered the basics of tokenization, POS tagging,
    NER, and dependency parsing with spaCy. This section will look at two more advanced
    topics: working with large data sets and building custom models.'
  prefs: []
  type: TYPE_NORMAL
- en: When working with large data sets, loading the entire dataset into memory is
    often impractical. Fortunately, spaCy provides several tools and technispaCy'sr
    working with large data sets in a streaming fashion.
  prefs: []
  type: TYPE_NORMAL
- en: 'One approach is to use spaCy''s `nlp.pipe` method, which allows you to process
    a large dataset in small batches. The `nlp.pipe` method takes an iterable of text
    documents, and yields processed `Doc` objects. For example, you can use `nlp.pipe`
    to process a large dataset like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `nlp.pipe` method is designed to be efficient and memory-friendly, making
    it a good choice for working with large datasets.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to working with large datasets, spaCy allows you to build custom
    models for specific NLP tasks. For example, you can use spaCy's `train` method
    to fine-tune a pre-trained model on a labeled dataset. This can be useful if you
    build a model tailored to a specific domain or language.
  prefs: []
  type: TYPE_NORMAL
- en: To train a custom model with spaCy, you must prepare a training dataset and
    configuration file. The training dataset should be a list of `(text, annotations)`
    tuples where `text` is a string of text and `annotations` is a dictionary of named
    entity annotations. The configuration file should specify the model type, the
    training data and configuration, and the output directory for the trained model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have prepared the training data and configuration file, you can use
    the `spacy.train` method to train the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This gives you an idea of how to work with large datasets and build custom models
    with spaCy. The following section will look at some advanced spaCy techniques,
    like text classification and word vectors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Advanced spaCy Techniques: Text Classification and Word Vectors'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Advanced spaCy Techniques: Text Classification and Word Vectors'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous sections, we covered the basics of using spaCy for NLP tasks
    like tokenization, POS tagging, named entity recognition, and dependency parsing.
    In this section, we will look at two more advanced techniques that can be performed
    with spaCy: text classification and word vectors.'
  prefs: []
  type: TYPE_NORMAL
- en: Text classification is assigning labels to text based on its content. Text classification
    is a common task in NLP and can be used for various applications, such as sentiment
    analysis and spam detection.
  prefs: []
  type: TYPE_NORMAL
- en: spaCy includes several utility structures that can be used to perform text classification.
    One approach is to use spaCy's built-in support for linear model training with
    the `Thinc` library. To train a text classifier with spaCy, you must prepare a
    training dataset and a configuration file. The training dataset should be a list
    of `(text, label)` tuples where `text` is a string of text and `label` is the
    target label. The configuration file should specify the model type, the training
    data and configuration, and the output directory for the trained model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have prepared the training data configuration file, you can use the
    `spacy.train` method to train the classifier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Word vectors are numerical representations of words that capture the meanings
    and relationships between words in a dataset. Word vectors are often used in NLP
    to represent the similarity between words and can be a helpful tool for tasks
    like document classification and machine translation.
  prefs: []
  type: TYPE_NORMAL
- en: spaCy includes many word vector models that can be used to compute word vectors
    for a dataset. To use a word vector model with spaCy, you will need to download
    one of the pre-trained models from the spaCy website.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://spacy.io/models?source=post_page-----b9d626cf53ed--------------------------------)
    [## Trained Models & Pipelines · spaCy Models Documentation'
  prefs: []
  type: TYPE_NORMAL
- en: In general, spaCyspaCy'ss all pipeline packages follow the naming convention
    of [lang]_[name]. For spaCy's…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: spacy.io](https://spacy.io/models?source=post_page-----b9d626cf53ed--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to download the `en_vectors_web_lg` model, you can use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have downloaded a word vector model object, use it to compute the
    word vectors for a dataset. For example,`.vector` accesses the word vector for
    a token:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This will output the tokens and their word vectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Each vector is a fixed-size embedding.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: spaCy and deep learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the critical features of spaCy is its ability to perform deep learning
    tasks using convolutional neural networks (CNNs). This includes NER, POS tagging,
    and dependency parsing.
  prefs: []
  type: TYPE_NORMAL
- en: To use the deep learning features of spaCy, you will need to install the package
    with the `en_core_web_md` model, which includes the CNNs. Once installed, you
    can access the CNNs and other advanced features by calling methods on the spaCy
    objects, such as the `doc` and `span` objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, download the model via the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, use the deep learning features of spaCy to perform NER:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This would output the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the deep learning features of spaCy make it easy to perform
    advanced NLP tasks with just a few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: spaCy's features exemplified
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is an example of how you might use several different features of spaCy
    to perform advanced natural language processing tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This example demonstrates how to use several different features of spaCy, including
    named entity recognition, noun phrase extraction, part-of-speech tagging, dependency
    parsing, and lemmatization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wrapping Up: Further Resources and Next Steps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This tutorial covered the basics of using spaCy for natural language processing
    in Python. Then, we looked at everyday NLP tasks like tokenization, POS tagging,
    named entity recognition, dependency parsing, and more advanced techniques like
    text classification and word vectors.
  prefs: []
  type: TYPE_NORMAL
- en: Many resources are available if you want to continue learning about NLP with
    spaCy. The spaCy documentation is a great place to start, including detailed information
    about the library's API and features.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://spacy.io/api?source=post_page-----b9d626cf53ed--------------------------------)
    [## Library Architecture · spaCy API Documentation'
  prefs: []
  type: TYPE_NORMAL
- en: The central data structures in spaCy are the class and the object. The Language
    class is used to process a text…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: spacy.io](https://spacy.io/api?source=post_page-----b9d626cf53ed--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: You can also find many tutorials and examples on the spaCy website.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://spacy.io/usage?source=post_page-----b9d626cf53ed--------------------------------)
    [## Install spaCy · spaCy Usage Documentation'
  prefs: []
  type: TYPE_NORMAL
- en: spaCy is compatible with 64-bit CPython 3.6+ and runs on Unix/Linux, macOS/OS
    X, and Windows. The latest spaCy releases…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: spacy.io](https://spacy.io/usage?source=post_page-----b9d626cf53ed--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the spaCy documentation, many other resources are available
    for learning about NLP. Here are a few suggestions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Natural Language Processing course on Coursera:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](https://www.coursera.org/courses?query=natural+language+processing&source=post_page-----b9d626cf53ed--------------------------------)
    [## Best Natural Language Processing (NLP) Courses & Certifications [2023] | Coursera'
  prefs: []
  type: TYPE_NORMAL
- en: Natural language processing, or NLP, is the field o" artificial intelligence
    (AI) focus "ed on enabling computers to…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.coursera.org](https://www.coursera.org/courses?query=natural+language+processing&source=post_page-----b9d626cf53ed--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'The "Python Natural Language Processing" book by Steven Bird, Ewan Klein, and
    Edward Loper:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[## NLTK Book'
  prefs: []
  type: TYPE_NORMAL
- en: Steven Bird, Ewan Klein, and Edward Loper This ver "ion of the NLTK book is
    updated" for Python 3 and NLTK 3\. The first…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.nltk.org](https://www.nltk.org/book/?source=post_page-----b9d626cf53ed--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: The "Speech and LanguageWe'veessing" book by Dan Jurafsky and James H. Martin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](https://web.stanford.edu/~jurafsky/slp3/?source=post_page-----b9d626cf53ed--------------------------------)
    [## Speech and Language Processing'
  prefs: []
  type: TYPE_NORMAL
- en: We've put up a list of the amazing people who have sent many fantastic suggestions
    and bug fixes for improving…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: web.stanford.edu.](https://web.stanford.edu/~jurafsky/slp3/?source=post_page-----b9d626cf53ed--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial has been helpful and has given you a solid foundation in using
    spaCy for NLP in Python. Good luck with your NLP projects!
  prefs: []
  type: TYPE_NORMAL
- en: Future blogs will dive deep into the deep learning machinery implemented in
    spaCy and various techniques to visualize NLP results.
  prefs: []
  type: TYPE_NORMAL
- en: Let me know if you have any further questions or need more help.
  prefs: []
  type: TYPE_NORMAL
- en: Contact
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Want to Connect? Follow Dr. Robinson on [LinkedIn](https://www.linkedin.com/in/jrobby/),
    [Twitter](https://twitter.com/jrobvision), [Facebook](https://www.facebook.com/joe.robinson.39750),
    and [Instagram](https://www.instagram.com/doctor__jjj/). Visit my homepage for
    papers, blogs, email signups, and more!
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.jrobs-vision.com/?source=post_page-----b9d626cf53ed--------------------------------)
    [## AI Research Engineer and Entrepreneur | Joseph P. Robinson'
  prefs: []
  type: TYPE_NORMAL
- en: Researcher & Entrepreneur Greetings! As a researcher, Dr. Robinson proposed
    and employed advanced AI to understand…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.jrobs-vision.com.](https://www.jrobs-vision.com/?source=post_page-----b9d626cf53ed--------------------------------)
  prefs: []
  type: TYPE_NORMAL
