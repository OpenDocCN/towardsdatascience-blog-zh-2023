["```py\na = 1\nb = 1\n#Let's draw some random points\nX1 = np.random.normal(0, 1, 5000)\nX2 = np.random.normal(0, 1, 5000)\neps = np.random.normal(0,1, 5000)\n\n#Create our target value\ny = a*X1 + b*X2 + eps\n\n#Get the coefficients of the linear regression of y on X1\nlr = LinearRegression().fit(X1.reshape(-1,1),y)\ntheta_1,theta_0 = lr.coef_[0], lr.intercept_\n```", "```py\na = 1\nb = -1\nc = 2\nX1 = np.random.normal(0, 1, 5000)\n\n#Define X2 as correlated to X1\neps_2 = np.random.normal(0,1,5000)\nX2 = c * X1 + eps_2\n\n#Define the target as before\neps = np.random.normal(0,1, 5000)\ny = a*X1 + b*X2 + eps\n\nlr = LinearRegression().fit(X1.reshape(-1,1),y)\ntheta_1,theta_0 = lr.coef_[0], lr.intercept_\n```", "```py\n#Proba to use for non-smokers\nproba_not_smoke = {\n    \"18-25\":0.52,\n    \"26-35\":0.55,\n    \"36-44\":0.51,\n    \"45-55\":0.46,\n    \"56-67\":0.53,\n    \"68-75\":0.8,\n    \"76+\":0.85\n}\n\n#Proba to use for people dying naturally\nproba_die_naturally = {\n    \"18-25\":0.01,\n    \"26-35\":0.01,\n    \"36-44\":0.05,\n    \"45-55\":0.13,\n    \"56-67\":0.3,\n    \"68-75\":0.6,\n    \"76+\":0.95    \n}\n\n#Proba to use for people dying smoking\nproba_die_smoking = {\n    \"18-25\":0.001,\n    \"26-35\":0.004,\n    \"36-44\":0.008,\n    \"45-55\":0.01,\n    \"56-67\":0.01,\n    \"68-75\":0.01,\n    \"76+\":0.01    \n}\n\ndef get_group(age):\n    '''Simple function to transform age into a category'''\n    if age<=25:\n        return \"18-25\"\n    if age<=35:\n        return \"26-35\"\n    if age<=44:\n        return \"36-44\"\n    if age<=55:\n        return \"45-55\"\n    if age<=67:\n        return \"56-67\"\n    if age<=75:\n        return \"68-75\"\n    else:\n        return \"76+\"\n\nPOPULATION = 5000\n\n#Create a random population\npopulation_ages = np.random.randint(18,90, POPULATION)\ndataset = []\nfor age in population_ages:\n    group = get_group(age)\n\n    #draw the probas\n    p_not_smoke = proba_not_smoke[group]\n    p_die_naturally = proba_die_naturally[group]\n    p_die_smoking = proba_die_smoking[group]\n\n    #calculate the condition of the person based on the proba drawns\n    smoker = np.random.random()>p_not_smoke\n    died_naturally = np.random.random()<p_die_naturally\n    died_smoking = np.random.random()<p_die_naturally\n    died = died_naturally | ((died_smoking) & (smoker))\n    dataset.append({\"smoker\":smoker*1,\"age_group\":group,\"lived_after_20_years\":1-died})\n\ndf = pd.DataFrame(dataset)\n```", "```py\n#Probabilities of admission in the major\nadmissions_proba = {\n    \"Major_1\":0.74,\n    \"Major_2\":0.64,\n    \"Major_3\":0.35,\n    \"Major_4\":0.34,\n    \"Major_5\":0.24,\n    \"Major_6\":0.06\n}\n\n#Probabilities of selection a major as a man\ngender_proba = {\n    \"Major_1\":0.08,\n    \"Major_2\":0.04,\n    \"Major_3\":0.65,\n    \"Major_4\":0.47,\n    \"Major_5\":0.67,\n    \"Major_6\":0.47,    \n}\n\ndef get_major(p):\n    \"\"\"This function is used to select a major randomly based on some\n       probabilities\"\"\"\n    if p<0.25:\n        return \"Major_1\"\n    if p<0.37:\n        return \"Major_2\"\n    if p<0.54:\n        return \"Major_3\"\n    if p<0.70:\n        return \"Major_4\"\n    if p<0.82:\n        return \"Major_5\"\n    else:\n        return \"Major_6\"\n\nPOPULATION = 12000\ndataset = []\nfor i in range(POPULATION):\n    p_major = np.random.random()\n    major = get_major(p_major)\n    gender = ['M','F'][np.random.random()<gender_proba[major]]\n    admission = ['Accepted','Rejected'][np.random.random()>admissions_proba[major]]\n    dataset.append({\"Major\":major,\"Gender\":gender,\"Admission\":admission})\ndf = pd.DataFrame(dataset)\n```", "```py\nN = 3000\nn_clusters = 10\ninc = N//n_clusters\nn_samples = inc*n_clusters\n#Create our main features\nasset_surface = np.random.normal(90, 25, n_samples)\ngarden_surface = np.random.normal(500, 100, n_samples)\nhouse_condition = np.random.randint(0, 5, n_samples)/10+1\n\n#Build the two last features so they have a negative correlation\ngarage_surface = np.array([])\nfanciness_area = np.array([])\nfor i in range(n_clusters):\n    gs = np.random.normal(i, 1, inc)\n    fa = np.random.normal(-i, 1, inc)\n    garage_surface = np.hstack([garage_surface, gs])\n    fanciness_area = np.hstack([fanciness_area, fa])\n\n#Just make it a bit more non-linear...\nfanciness_area = np.exp((fanciness_area + 12)/10)\n\ndf = pd.DataFrame([asset_surface, garden_surface, house_condition, garage_surface, fanciness_area])\n\n#We build our target so that the formula is non-linear and stay in the range of a house price...\nsale_price = (asset_surface*(fanciness_area**0.5)*2 + garden_surface/5 + garage_surface/2)*house_condition*100+50000+np.random.normal(0, 20000, n_samples)\n```"]