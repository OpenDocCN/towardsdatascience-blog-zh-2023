- en: How To Improve The Performance of Python Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何提升 Python 函数的性能
- en: 原文：[https://towardsdatascience.com/improve-python-function-performance-587cfd4fd511](https://towardsdatascience.com/improve-python-function-performance-587cfd4fd511)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/improve-python-function-performance-587cfd4fd511](https://towardsdatascience.com/improve-python-function-performance-587cfd4fd511)
- en: Speeding up frequently called functions in Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加速 Python 中频繁调用的函数
- en: '[](https://gmyrianthous.medium.com/?source=post_page-----587cfd4fd511--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----587cfd4fd511--------------------------------)[](https://towardsdatascience.com/?source=post_page-----587cfd4fd511--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----587cfd4fd511--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----587cfd4fd511--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://gmyrianthous.medium.com/?source=post_page-----587cfd4fd511--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----587cfd4fd511--------------------------------)[](https://towardsdatascience.com/?source=post_page-----587cfd4fd511--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----587cfd4fd511--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----587cfd4fd511--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----587cfd4fd511--------------------------------)
    ·9 min read·Mar 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----587cfd4fd511--------------------------------)
    ·阅读时间 9 分钟·2023年3月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/d4ef78a78679f6b7ede3800157e16a73.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d4ef78a78679f6b7ede3800157e16a73.png)'
- en: Photo by [Esteban Lopez](https://unsplash.com/@exxteban?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/6yjAC0-OwkA?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Esteban Lopez](https://unsplash.com/@exxteban?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来源于 [Unsplash](https://unsplash.com/photos/6yjAC0-OwkA?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: In today’s world, where the amount of data being processed is growing at an
    unprecedented rate, having efficient and optimized code has become more important
    than ever. Python, being a popular programming language, offers several built-in
    tools to optimize the performance of your code. One of these tools is the `lru_cache`
    decorator, which can be used to cache the results of a function, thereby improving
    its performance.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今数据处理量以空前速度增长的世界中，拥有高效和优化的代码变得比以往任何时候都重要。作为一种流行的编程语言，Python 提供了多种内置工具来优化代码性能。其中一个工具是
    `lru_cache` 装饰器，它可以用来缓存函数的结果，从而提高性能。
- en: In this article, we will explore the benefits of using the `lru_cache` decorator
    in Python, and how it can help you write faster and more efficient code for frequently
    called functions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将探讨如何使用 `lru_cache` 装饰器，并且了解它如何帮助你编写更快、更高效的代码来处理频繁调用的函数。
- en: Caching in a nutshell
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存简述
- en: Caching is a widely adopted approach to enhance the performance of computer
    programs. It involves temporarily storing information that is costly to compute
    or frequently accessed within a specified time frame. Through caching, developers
    can efficiently store the results of previous computations and reduce the time
    and computational resources required to recompute them. This process can considerably
    improve the response time and overall performance of the system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存是一种广泛采用的方法，用于提升计算机程序的性能。它涉及在指定的时间范围内临时存储计算成本高或经常访问的信息。通过缓存，开发者可以高效地存储先前计算的结果，从而减少重新计算所需的时间和计算资源。这个过程可以显著改善系统的响应时间和整体性能。
- en: Caching can be implemented using various data structures such as arrays, hash
    tables, and linked lists, and can also be managed through different policies such
    as Least Recently Used (LRU) and First In First Out (FIFO).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存可以通过各种数据结构实现，例如数组、哈希表和链表，也可以通过不同的策略进行管理，例如最近最少使用（LRU）和先进先出（FIFO）。
- en: Managing the size of a cache can be a crucial aspect of its implementation.
    Failure to put in place a mechanism that regularly shrinks the cache could result
    in an ever-increasing memory usage, leading to an eventual application crash.
    To overcome this challenge, programmers must carefully consider the appropriate
    policy or strategy that best suits their specific requirements.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 管理缓存大小可以是其实现中的一个关键方面。没有定期缩小缓存的机制，可能会导致内存使用不断增加，最终导致应用程序崩溃。为了克服这个挑战，程序员必须仔细考虑最适合其特定需求的策略或方法。
- en: In some cases, adaptive policies, which adapt to changing workload patterns,
    may be more suitable. Moreover, cache size management can be done through different
    techniques, such as setting a maximum size, implementing time-based expiry, or
    using a hybrid approach that combines multiple policies.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，适应性策略可能更为合适，这些策略会根据变化的工作负载模式进行调整。此外，缓存大小管理可以通过不同的技术来实现，例如设置最大大小、实施基于时间的过期策略，或使用结合多种策略的混合方法。
- en: Ultimately, selecting an appropriate cache management policy requires careful
    consideration of factors such as performance, memory usage, and the specific needs
    of the application. Overall, caching is an effective technique that allows programmers
    to optimize their code and improve the user experience.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，选择合适的缓存管理策略需要仔细考虑诸如性能、内存使用和应用程序的具体需求等因素。总体而言，缓存是一种有效的技术，可以让程序员优化代码并改善用户体验。
- en: Creating Least Recently Used cache with lru_cache decorator
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `lru_cache` 装饰器创建最近最少使用缓存
- en: The `lru_cache` decorator is part of the language’s standard library and can
    be imported from `functools` module.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`lru_cache` 装饰器是语言标准库的一部分，可以从 `functools` 模块中导入。'
- en: The decorator uses a strategy called **Least Recently Used (LRU)** to prioritize
    objects that were used most recently. Whenever an object is accessed using a cache
    that uses the LRU strategy, the cache places it at the top while shifting all
    the other objects down one position. However, if the cache reaches its maximum
    size, the least recently used object is removed to create room for new objects.
    This ensures that frequently used objects stay in the cache while infrequently
    used ones are gradually pushed out.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器使用一种称为**最近最少使用（LRU）**的策略来优先处理最近使用过的对象。每当通过使用LRU策略的缓存访问一个对象时，缓存会将其放在最上面，同时将其他对象向下移动一个位置。然而，如果缓存达到其最大大小，则会移除最近最少使用的对象，以腾出空间供新对象使用。这确保了经常使用的对象保持在缓存中，而不常使用的对象则会逐渐被挤出。
- en: .. frequently used objects stay in the cache while infrequently used ones are
    gradually pushed out
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: .. 经常使用的对象保持在缓存中，而不常使用的对象则会逐渐被挤出
- en: Caches implementing LRU come in handy when dealing with computationally expensive
    or I/O bound functions that are repeatedly called with the same arguments.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 实现LRU的缓存对于处理计算密集型或I/O绑定的函数非常有用，这些函数经常以相同的参数被调用。
- en: The `lru_cache` decorator in Python operates by maintaining a **thread-safe
    cache in the form of a dictionary**. Upon invocation of the decorated function,
    a new entry is created in the cache, where the function call arguments correspond
    to the dictionary key and the returned value to the dictionary value. Subsequent
    calls to the function with the same arguments will not compute a new result; rather,
    the cached value will be retrieved. This feature avoids redundant computations,
    thereby improving the overall performance.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的 `lru_cache` 装饰器通过维护一个**线程安全的字典形式缓存**来运作。在调用被装饰的函数时，缓存中会创建一个新条目，其中函数调用参数对应字典的键，返回值对应字典的值。后续使用相同参数调用函数时不会计算新结果，而是直接检索缓存值。这一特性避免了冗余计算，从而提高了整体性能。
- en: Since a dictionary is used to cache results, the positional and keyword arguments
    to the function must be [hashable](https://docs.python.org/3/glossary.html#term-hashable)
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 由于使用字典来缓存结果，函数的定位和关键字参数必须是[可哈希的](https://docs.python.org/3/glossary.html#term-hashable)。
- en: ''
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- Python Documentation'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- Python 文档'
- en: '**The size of the** `**lru_cache**` **can be adjusted through the** `**maxsize**`
    **argument**, that defaults to `128`. This value specifies the maximum number
    of entries that the cache can hold at any given time. Once the cache reaches its
    maximum size and a new call is made, the decorator will discard the least recently
    used entry to make room for the most recent one. This ensures that the cache does
    not grow beyond the specified limit, thus preventing excessive memory consumption
    and improving performance. If the `maxsize` is set to `None` the `LRU` feature
    is then disabled which means that the cache can grow indefinitely.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**`lru_cache`的大小** **可以通过`maxsize`参数进行调整**，默认为`128`。该值指定缓存可以在任何时间保持的最大条目数。一旦缓存达到最大大小并且有新的调用，装饰器将丢弃最少使用的条目，以腾出空间给最新的条目。这确保缓存不会超过指定的限制，从而防止过度的内存消耗并提高性能。如果`maxsize`设置为`None`，则`LRU`功能将被禁用，这意味着缓存可以无限增长。'
- en: It is important to note that when two function calls have the same keyword arguments
    but in a different order, two separate cache entries will be created. For instance,
    calling `func(x=10, y=5)` and `func(y=5, x=10)` will result in two distinct entries
    in the cache, even if both calls return the same value.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，当两个函数调用具有相同的关键字参数但顺序不同时，将创建两个独立的缓存条目。例如，调用`func(x=10, y=5)`和`func(y=5,
    x=10)`将导致缓存中出现两个不同的条目，即使这两个调用返回相同的值。
- en: Furthermore, the `lru_cache` decorator accepts another argument called `**typed**`
    that defaults to `False`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`lru_cache`装饰器接受另一个名为`**typed**`的参数，默认为`False`。
- en: If `*typed*` is set to `true`, function arguments of different types will be
    cached separately. If `*typed*` is `false`, the implementation will usually regard
    them as equivalent calls and only cache a single result.
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果`*typed*`设置为`true`，不同类型的函数参数将被单独缓存。如果`*typed*`为`false`，实现通常会将它们视为等效调用，并只缓存一个结果。
- en: ''
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — [Python Documentation](https://docs.python.org/3/library/functools.html#functools.lru_cache)
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: — [Python 文档](https://docs.python.org/3/library/functools.html#functools.lru_cache)
- en: For instance, calling `func(a=4)` (`a` holds an integer value) and `func(a=4.)`
    (`a` now holds a float value) when `typed=True`, two distinct entries will be
    created in the cache. Note however that some types such as `str` and `int` might
    be cached in separate cache entries even when `typed` is set to `False`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当`typed=True`时，调用`func(a=4)`（`a`持有整数值）和`func(a=4.)`（`a`现在持有浮点值），将创建两个不同的缓存条目。不过请注意，一些类型如`str`和`int`即使在`typed`设置为`False`时，也可能会在不同的缓存条目中缓存。
- en: Now let’s assume we have a very simple Python function that accepts two arguments
    and returns their sum
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们有一个非常简单的Python函数，接受两个参数并返回它们的和。
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now let’s assume that the function is decorated with the `lru_cache` and gets
    called several times, as outlined below:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设函数被`lru_cache`装饰，并被多次调用，如下所述：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The image below illustrates how a LRU cache with `maxsize=3` is maintained over
    time and how it behaves upon cache hit or miss and how it handles cases when the
    current size reaches the specified maximum size.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了具有`maxsize=3`的LRU缓存如何随时间维持，以及在缓存命中或未命中时的行为，以及当当前大小达到指定最大值时如何处理的情况。
- en: '![](../Images/0fd75bd5c48f6a5a0689016d786bb922.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0fd75bd5c48f6a5a0689016d786bb922.png)'
- en: 'LRU cache will prioritize most recently used function calls — Source: Author'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: LRU缓存将优先处理最近使用的函数调用 — 来源：作者
- en: Initially, when the function is called with arguments `a=10` and `b=15`, the
    cache is empty and a cache miss occurs. The function is executed, and both the
    input arguments and the resulting value are stored in the cache.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最初，当函数被调用时，使用参数`a=10`和`b=15`，缓存为空，发生缓存未命中。函数执行后，输入参数和结果值都会存储在缓存中。
- en: On the next call, when the function is called with arguments `a=10` and `b=10`,
    a cache miss occurs again since this combination of arguments is not found in
    the cache. The function is executed, and a new entry is created in the cache and
    placed at the top.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下次调用时，当函数被调用时，使用参数`a=10`和`b=10`，再次发生缓存未命中，因为这个参数组合在缓存中未找到。函数执行后，创建一个新的缓存条目并放在顶部。
- en: Subsequently, when the function is called with arguments `a=3` and `b=15`, another
    cache miss occurs. The input arguments and the resulting value are stored in the
    cache after the function is executed.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随后，当函数被调用时，使用参数`a=3`和`b=15`，发生了另一个缓存未命中。函数执行后，输入参数和结果值被存储在缓存中。
- en: On the next call, when the function is called with arguments `a=20` and `b=1`,
    a cache miss occurs, and the cache has reached its maximum size. This means that
    the least recently used entry is removed, and the remaining entries are shifted
    down by one position. After executing the function, the latest entry is added
    to the cache and placed at the top.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个调用中，当函数使用`a=20`和`b=1`作为参数时，会发生缓存未命中，并且缓存已达到最大容量。这意味着最久未使用的条目被移除，其余条目向下移动一个位置。执行函数后，最新的条目被添加到缓存中，并放在顶部。
- en: Finally, when the function is called again with arguments `a=3` and `b=15`,
    a cache hit occurs since this entry is now stored in the cache. The returned value
    is fetched from the cache instead of executing the function. The cache entry is
    then moved to the top.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，当函数再次以`a=3`和`b=15`作为参数被调用时，会发生缓存命中，因为该条目现在已存储在缓存中。返回的值从缓存中获取，而不是执行函数。然后缓存条目被移到顶部。
- en: How and when to use lru_cache decorator
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何以及何时使用lru_cache装饰器
- en: Having gained a solid understanding of cache and the LRU caching strategy, it’s
    time to delve deeper into lru_cache and learn how to utilize it to its fullest
    potential, while also assessing its impact.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在充分理解了缓存和LRU缓存策略后，是时候深入探讨lru_cache，学习如何充分利用它，同时评估它的影响。
- en: For the purposes of this tutorial, we will examine a more complex function that
    will greatly benefit from caching, and `lru_cache` decorator in particular. Our
    `fibonacci` function can be used to compute **fibonacci numbers.**
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本教程的目的，我们将研究一个更复杂的函数，这将从缓存中受益匪浅，特别是`lru_cache`装饰器。我们的`fibonacci`函数可以用来计算**斐波那契数**。
- en: 'In mathematics, the **Fibonacci numbers**, commonly denoted *Fn* , form a sequence,
    the **Fibonacci sequence**, in which each number is the sum of the two preceding
    ones. The sequence commonly starts from 0 and 1, although some authors start the
    sequence from 1 and 1 or sometimes (as did Fibonacci) from 1 and 2\. Starting
    from 0 and 1, the first few values in the sequence are:'
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在数学中，**斐波那契数**，通常表示为*Fn*，形成了一个序列，即**斐波那契序列**，其中每个数字是前两个数字的和。该序列通常从0和1开始，尽管一些作者从1和1开始序列，或者有时（如斐波那契所做）从1和2开始。以0和1为起点，该序列的前几个值是：
- en: ''
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144.`'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144.`'
- en: ''
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- [Wikipedia](https://en.wikipedia.org/wiki/Fibonacci_number)'
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- [维基百科](https://en.wikipedia.org/wiki/Fibonacci_number)'
- en: It is worth noting that the function below computes the Fibonacci number recursively.
    Although we can introduce memoization to optimize the solution further, this is
    beyond the scope of this tutorial. In addition, for the sake of simplicity, I
    will keep things straightforward and allow even those with less experience to
    follow along.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，下面的函数递归地计算斐波那契数。尽管我们可以引入记忆化来进一步优化解决方案，但这超出了本教程的范围。此外，为了简便起见，我将保持简单，让经验较少的读者也能跟上。
- en: The fact that the implementation is not fully optimized serves our purpose well,
    as it demonstrates how `lru_cache` can enhance the performance of computationally
    expensive function calls.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 实现未完全优化的事实对我们的目的很有帮助，因为它展示了`lru_cache`如何提升计算密集型函数调用的性能。
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To evaluate the time it takes for our function to produce results for several
    distinct inputs, we can use the `timeit` module. We’ll utilize the timeit module
    to measure the performance of the `fibonacci` function, and take the minimum timing
    from 5 repeated function calls with the same argument.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了评估我们函数处理多个不同输入所需的时间，我们可以使用`timeit`模块。我们将利用timeit模块来测量`fibonacci`函数的性能，并从5次重复调用相同参数的函数中取最小时间。
- en: '[When measuring execution time] Use the `min()` rather than the average of
    the timings. That is a recommendation from me, from Tim Peters, and from Guido
    van Rossum. The fastest time represents the best an algorithm can perform when
    the caches are loaded and the system isn’t busy with other tasks. All the timings
    are noisy — the fastest time is the least noisy. It is easy to show that the fastest
    timings are the most reproducible and therefore the most useful when timing two
    different implementations.'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[在测量执行时间时] 使用`min()`而不是时间的平均值。这是我、Tim Peters和Guido van Rossum的建议。最快的时间代表了在缓存加载且系统不忙于其他任务时算法的最佳性能。所有时间都有噪音——最快的时间噪音最小。很容易证明，最快的时间是最可重复的，因此在计时两个不同实现时最有用。'
- en: ''
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — Raymond Hettinger [on StackOverflow](https://stackoverflow.com/questions/8220801/how-to-use-timeit-module#comment12782516_8220943)
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: — 雷蒙德·赫廷格 [在 StackOverflow](https://stackoverflow.com/questions/8220801/how-to-use-timeit-module#comment12782516_8220943)
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In essence, our script will measure the time elapsed to executed the 30th fibonacci
    number with `fibonacci`. Out of 5 different calls, the minimum time it took on
    my machine was 1.39 seconds.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，我们的脚本将测量执行第30个斐波那契数的时间。经过5次不同的调用，我的机器上最少的时间是1.39秒。
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `fibonacci` function is deterministic, meaning that it will always produce
    the same output given the same input. Therefore, we can take advantage of the
    concept of caching. By adding the `@lru_cache` decorator, the function’s output
    for a given input is now cached, and if the function is called again with the
    same input, it will return the cached result instead of recomputing it. This can
    significantly speed up the function’s execution time, particularly when called
    repeatedly with the same input values.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`fibonacci` 函数是确定性的，这意味着它在给定相同输入的情况下总是产生相同的输出。因此，我们可以利用缓存的概念。通过添加 `@lru_cache`
    装饰器，函数对于给定输入的输出现在被缓存，如果函数再次以相同的输入调用，它将返回缓存的结果而不是重新计算。这可以显著加快函数的执行时间，特别是当函数多次以相同输入值调用时。'
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now let’s time the new version of `fibonacci` function:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们对新版本的 `fibonacci` 函数进行计时：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: On my machine, the minimum timing was close to zero. `fibonacci(30)` was executed
    only during the first iteration. For the subsequent iterations, the cached result
    of this function call was retrieved, which is an inexpensive operation.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的机器上，最小的时间接近零。`fibonacci(30)` 仅在第一次迭代时执行。对于后续的迭代，检索了此函数调用的缓存结果，这是一项廉价的操作。
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Final Thoughts
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最终想法
- en: In conclusion, optimizing the performance of your code has become more important
    than ever in today’s data-driven world. One way to achieve this in Python is by
    using the `lru_cache` decorator, which can cache the results of frequently called
    functions and improve their performance.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，在今天的数据驱动世界中，优化代码性能比以往任何时候都更重要。在 Python 中实现这一点的一种方法是使用 `lru_cache` 装饰器，它可以缓存频繁调用函数的结果并提高其性能。
- en: Caching, in general, involves temporarily storing information that is costly
    to compute or frequently accessed, reducing the time and computational resources
    required to recompute them. The decorator uses a strategy called Least Recently
    Used (LRU) to prioritize objects that were used most recently and discard the
    least recently used objects once the cache reaches its maximum size.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，缓存涉及暂时存储计算成本高或频繁访问的信息，从而减少重新计算所需的时间和计算资源。该装饰器使用一种称为最近最少使用（LRU）的策略来优先考虑最近使用的对象，并在缓存达到最大大小时丢弃最少使用的对象。
- en: '`lru_cache` decorator is an efficient tool for optimizing Python code performance
    by caching the results of computationally expensive or I/O bound functions.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`lru_cache` 装饰器是优化 Python 代码性能的有效工具，通过缓存计算密集型或 I/O 密集型函数的结果。'
- en: '[**Become a member**](https://gmyrianthous.medium.com/membership) **and read
    every story on Medium. Your membership fee directly supports me and other writers
    you read. You’ll also get full access to every story on Medium.**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[**成为会员**](https://gmyrianthous.medium.com/membership) **并阅读 Medium 上的每一篇故事。你的会员费直接支持我和你阅读的其他作者。你还将获得对
    Medium 上每个故事的完全访问权限。**'
- en: '[](https://gmyrianthous.medium.com/membership?source=post_page-----587cfd4fd511--------------------------------)
    [## Join Medium with my referral link — Giorgos Myrianthous'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://gmyrianthous.medium.com/membership?source=post_page-----587cfd4fd511--------------------------------)
    [## 使用我的推荐链接加入 Medium — Giorgos Myrianthous'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为 Medium 会员，你的会员费的一部分将转给你阅读的作者，你将获得对每个故事的完全访问权限……
- en: gmyrianthous.medium.com](https://gmyrianthous.medium.com/membership?source=post_page-----587cfd4fd511--------------------------------)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[gmyrianthous.medium.com](https://gmyrianthous.medium.com/membership?source=post_page-----587cfd4fd511--------------------------------)'
- en: '**Related articles you may also like**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**你可能还会喜欢的相关文章**'
- en: '[](/python-iterables-vs-iterators-688907fd755f?source=post_page-----587cfd4fd511--------------------------------)
    [## Iterables vs Iterators in Python'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/python-iterables-vs-iterators-688907fd755f?source=post_page-----587cfd4fd511--------------------------------)
    [## Python 中的可迭代对象 vs 迭代器'
- en: Understanding the difference between Iterables and Iterators in Python
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解 Python 中可迭代对象和迭代器之间的区别
- en: towardsdatascience.com](/python-iterables-vs-iterators-688907fd755f?source=post_page-----587cfd4fd511--------------------------------)
    [](/requirements-vs-setuptools-python-ae3ee66e28af?source=post_page-----587cfd4fd511--------------------------------)
    [## requirements.txt vs setup.py in Python
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[Python 中的迭代器与可迭代对象](https://towardsdatascience.com/python-iterables-vs-iterators-688907fd755f?source=post_page-----587cfd4fd511--------------------------------)
    [## requirements.txt 与 setup.py 在 Python 中的区别'
- en: Understanding the purpose of requirements.txt, setup.py and setup.cfg in Python
    when developing and distributing…
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解在 Python 开发和分发过程中，`requirements.txt`、`setup.py` 和 `setup.cfg` 的用途
- en: towardsdatascience.com](/requirements-vs-setuptools-python-ae3ee66e28af?source=post_page-----587cfd4fd511--------------------------------)
    [](/make-class-iterable-python-4d9ec5db9b7a?source=post_page-----587cfd4fd511--------------------------------)
    [## How To Create User-Defined Iterables in Python
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[requirements.txt 与 setup.py 在 Python 中的区别](https://towardsdatascience.com/requirements-vs-setuptools-python-ae3ee66e28af?source=post_page-----587cfd4fd511--------------------------------)
    [## 如何在 Python 中创建用户自定义可迭代对象'
- en: Showcasing how to create user-defined iterators and make user-defined classes
    Iterables in Python
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 展示如何在 Python 中创建用户自定义迭代器，并使用户自定义类成为可迭代对象
- en: towardsdatascience.com](/make-class-iterable-python-4d9ec5db9b7a?source=post_page-----587cfd4fd511--------------------------------)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何在 Python 中创建用户自定义可迭代对象](https://towardsdatascience.com/make-class-iterable-python-4d9ec5db9b7a?source=post_page-----587cfd4fd511--------------------------------)'
