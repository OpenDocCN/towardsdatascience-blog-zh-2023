- en: Be Careful When Using “NOT IN” in SQL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/be-careful-when-using-not-in-in-sql-c692fad3427b](https://towardsdatascience.com/be-careful-when-using-not-in-in-sql-c692fad3427b)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: + 3 simple solutions to make sure you’re not caught out
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@mattchapmanmsc?source=post_page-----c692fad3427b--------------------------------)[![Matt
    Chapman](../Images/7511deb8d9ed408ece21031f6614c532.png)](https://medium.com/@mattchapmanmsc?source=post_page-----c692fad3427b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c692fad3427b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c692fad3427b--------------------------------)
    [Matt Chapman](https://medium.com/@mattchapmanmsc?source=post_page-----c692fad3427b--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c692fad3427b--------------------------------)
    ·5 min read·Dec 15, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'Recently, I came across [Benjamin Thürer’s](https://medium.com/@benjamin.thuerer)
    excellent article:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-avoid-five-common-mistakes-in-google-bigquery-sql-6fafab396d88?source=post_page-----c692fad3427b--------------------------------)
    [## How to Avoid Five Common Mistakes in Google BigQuery / SQL'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: While working with BigQuery for years, I observed 5 issues that are commonly
    made, even by experienced Data Scientists
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-avoid-five-common-mistakes-in-google-bigquery-sql-6fafab396d88?source=post_page-----c692fad3427b--------------------------------)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: …in which he cautions us about using the `NOT IN` SQL clause in BigQuery.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I’ll expand on what he said by providing more examples, remedies
    and practice questions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: If you want to understand why the `NOT IN` clause is risky — and what to do
    about it — read on!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'The problem: NOT IN doesn’t handle NULLs in the way you might expect'
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `IN` and `NOT IN` operators provide a logical way to compare arrays. For
    example, if you write:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'BigQuery will return `true`. If you write:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: BigQuery will return `false`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'Seems simple, right? But there’s a problem: `IN` and `NOT IN` do weird things
    when the lookup array contains `NULL` values. The following code, for example,
    will return `NULL`, not `false`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To see why this matters, take a look at these three tables, each of which contains
    a list of names:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you wanted to find all the names in `table_1` which are not present in `table_2`,
    we can use the `NOT IN` clause:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `NOT IN` operator allows us to find the two correct names: “Frankie” and
    “Ben”. In technical SQL jargon, this operation is known as an “anti semi-join”
    (it’s a ***semi*** join because we’re not making a full join between `table_1`
    and `table_2`; we’re only checking for the existence of certain rows in `table_2`,
    and it’s an ***anti*** semi-join because we’re checking whether `table_2` does
    NOT contain the rows ([1](https://www.youtube.com/watch?v=9i_Gqv5CfSw))).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`NOT IN` 操作符使我们能够找到两个正确的名字：“Frankie”和“Ben”。用技术 SQL 术语来说，这种操作称为“反半连接”（它是一个***半***连接，因为我们没有在`table_1`和`table_2`之间进行完全连接；我们只是检查`table_2`中是否存在某些行，并且它是一个***反***半连接，因为我们在检查`table_2`是否**不**包含这些行（[1](https://www.youtube.com/watch?v=9i_Gqv5CfSw)））。'
- en: 'However, if we tried to use the same logic to select all the names in `table_1`
    that are not present in `*table_3*` (the table containing a `NULL` value), we’d
    get this result:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们尝试使用相同的逻辑来选择`table_1`中不在*table_3*（包含`NULL`值的表）中的所有名字，我们将得到以下结果：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Weird, right?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 奇怪，对吧？
- en: Based on how smoothly our first query ran, we might expect the names “Frankie”
    and “Ben” to be returned. But in BigQuery, we’ll get nothing.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们第一次查询的顺利程度，我们可能会期望返回“Frankie”和“Ben”这两个名字。但是在 BigQuery 中，我们将什么也得不到。
- en: In SQL, NULLs are handled differently
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 SQL 中，`NULL`的处理方式不同
- en: In many SQL dialects including GoogleSQL (which is the default dialect used
    by BigQuery), the `NOT IN` operator will return `NULL` “if any value on the right
    hand side is `NULL`” ([2](https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#not_in_conditions_and_null),
    [3](https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#in_operators)).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多 SQL 方言中，包括 GoogleSQL（BigQuery 默认使用的方言），`NOT IN` 操作符将返回`NULL`，“如果右侧的任何值为`NULL`”（[2](https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#not_in_conditions_and_null),
    [3](https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#in_operators)）。
- en: This is the root cause of that behaviour we just observed — the array returned
    by `(SELECT name FROM table_3)` contains a `NULL` value, so our entire query ends
    up returning no data.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们刚刚观察到的行为的根本原因——`(SELECT name FROM table_3)`返回的数组包含了`NULL`值，因此我们的整个查询最终没有返回数据。
- en: Why does this happen?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么会发生这种情况？
- en: In SQL, a `NULL` value is treated differently than other (non-null) values like
    `1`, `5.12`, `true`, or `botswana`. The value of a `NULL` object is not “0” or
    “False”; it’s considered *unknown* or *undefined*. When we try to make a comparison
    with an unknown object, the result of that comparison will therefore also be unknown.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 中，`NULL`值的处理方式不同于其他（非空）值，如`1`、`5.12`、`true`或`botswana`。`NULL`对象的值不是“0”或“False”；它被视为*未知*或*未定义*。当我们尝试与一个未知对象进行比较时，这种比较的结果也会是未知的。
- en: A simple solution
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的解决方案
- en: '![](../Images/c182ff19238bfdba2243d9d6028c5699.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c182ff19238bfdba2243d9d6028c5699.png)'
- en: Image by [Marcel Eberle](https://unsplash.com/@marcel_eberle) on [Unsplash](https://unsplash.com/photos/black-and-yellow-lamp-post-pCHl_wqfr0M)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Marcel Eberle](https://unsplash.com/@marcel_eberle) 提供，来源于 [Unsplash](https://unsplash.com/photos/black-and-yellow-lamp-post-pCHl_wqfr0M)
- en: Luckily, there are a few easy fixes for this problem.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一些简单的解决方法来解决这个问题。
- en: 1\. Remove `NULL` values from the lookup array
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 从查找数组中删除`NULL`值
- en: 'This one is pretty straightforward: just filter out the `NULL` rows from `table_3`.
    It’s a little more computationally expensive than the other solutions (below),
    but it still does the job nicely on smaller tables.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这一个相当直接：只需从`table_3`中过滤掉`NULL`行即可。这比其他解决方案（见下文）稍微计算开销大一点，但在较小的表上仍能很好地完成任务。
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 2\. Use a `LEFT JOIN`
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 使用`LEFT JOIN`
- en: I love this solution — it might seem confusing at first, but you’ll find it
    very elegant once you get your head around it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢这个解决方案——它可能开始时有点困惑，但当你弄明白后会发现它非常优雅。
- en: First, we join `table_1` to `table_3` on the `name` column (i.e. the column
    which they both share). Then, we apply a `WHERE` filter to `table_3` so that only
    rows with `NULL` are returned.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将`table_1`与`table_3`在`name`列（即它们共同拥有的列）上进行连接。然后，我们对`table_3`应用`WHERE`过滤器，以便仅返回`NULL`的行。
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Confused? Here’s what would happen if we didn’t include the `name` column from
    `table_3` and didn’t apply that `WHERE` filter:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 迷惑？如果我们不从`table_3`中包含`name`列并且不应用那个`WHERE`过滤器，结果会怎样：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When we apply our `WHERE table_3.name IS NULL` filter, we’re just dropping the
    first two rows.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们应用`WHERE table_3.name IS NULL`过滤器时，我们只是删除了前两行。
- en: 3\. Use `WHERE NOT EXISTS`
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 使用`WHERE NOT EXISTS`
- en: The `EXISTS` operator is useful for checking whether a subquery contains any
    rows. It returns `true` “if the subquery produces one or more rows,” and returns
    `false` “if the subquery produces zero rows” ([4](https://cloud.google.com/bigquery/docs/reference/standard-sql/subqueries#exists_subquery_concepts)).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`EXISTS` 操作符对于检查子查询是否包含任何行非常有用。它返回`true`“如果子查询产生一行或多行”，返回`false`“如果子查询产生零行”（[4](https://cloud.google.com/bigquery/docs/reference/standard-sql/subqueries#exists_subquery_concepts)）。'
- en: Interestingly, because we’re just checking for the existence of rows in the
    subquery, it doesn’t matter which columns we `SELECT`; in the example below, for
    instance, I just select “1”, but I could equally have selected “`true`,” “`5.12`”
    or “`botswana`”. It doesn’t matter what you choose!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，因为我们只是检查子查询中是否存在行，所以我们`SELECT`哪一列并不重要；例如，在下面的示例中，我只选择了“1”，但我也可以选择“`true`”、“`5.12`”或“`botswana`”。你选择什么都无所谓！
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Check your understanding
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查你的理解
- en: Because this is a fiddly concept, I’ve written 4 practice questions which you
    can use to check your understanding of `IN` and `NOT IN` on my SQL practice site,
    [the-sql-gym.com](https://the-sql-gym.com/). If you want to reinforce your learning,
    check them out!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这是一个棘手的概念，我在我的 SQL 练习网站上写了 4 个练习题，你可以用来检查你对`IN`和`NOT IN`的理解，[the-sql-gym.com](https://the-sql-gym.com/)。如果你想巩固学习，请去看看吧！
- en: '![](../Images/b0ee4fb1fbd95c072e3a11ad9abccf00.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b0ee4fb1fbd95c072e3a11ad9abccf00.png)'
- en: Image by author from [the-sql-gym.com](https://the-sql-gym.com/)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供，来自 [the-sql-gym.com](https://the-sql-gym.com/)
- en: One more thing —
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有一件事 —
- en: I’ve started a free newsletter called [AI in Five](https://aiinfive.substack.com/)
    where I share 5 bullet points each week on the latest AI news, coding tips and
    career stories for Data Scientists/Analysts. [Subscribe here](https://aiinfive.substack.com/)
    if that sounds up your street!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我开始了一份免费的新闻通讯，[AI in Five](https://aiinfive.substack.com/)，每周分享 5 个要点，涉及最新的
    AI 新闻、编码技巧和数据科学家/分析师的职业故事。如果这对你来说很有吸引力，[订阅这里](https://aiinfive.substack.com/)！
- en: Thanks for reading, and feel free to connect with me on [Twitter](https://twitter.com/matt_chapma)
    or [LinkedIn](https://www.linkedin.com/in/matt-chapman-ba8488118/)! :-)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读，随时通过 [Twitter](https://twitter.com/matt_chapma) 或 [LinkedIn](https://www.linkedin.com/in/matt-chapman-ba8488118/)
    联系我！ :-)
