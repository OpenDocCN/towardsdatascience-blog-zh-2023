- en: 'Managing Multiple CUDA Versions on a Single Machine: A Comprehensive Guide'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/managing-multiple-cuda-versions-on-a-single-machine-a-comprehensive-guide-97db1b22acdc](https://towardsdatascience.com/managing-multiple-cuda-versions-on-a-single-machine-a-comprehensive-guide-97db1b22acdc)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to Handle Different CUDA Versions in Your Development Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@chimso1994?source=post_page-----97db1b22acdc--------------------------------)[![Chayma
    Zatout](../Images/341c45f53ddf73dc0851d547cc7cb55a.png)](https://medium.com/@chimso1994?source=post_page-----97db1b22acdc--------------------------------)[](https://towardsdatascience.com/?source=post_page-----97db1b22acdc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----97db1b22acdc--------------------------------)
    [Chayma Zatout](https://medium.com/@chimso1994?source=post_page-----97db1b22acdc--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----97db1b22acdc--------------------------------)
    ·6 min read·Oct 27, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7a74ac782e86782cc59be80291bc583f.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Nikola Majksner](https://unsplash.com/@majksner?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: In one of my previous roles as an AI consultant, I was tasked with utilizing
    virtual environments as a tool for managing and isolating Python environments.
    Given that the project relied on GPU acceleration, I encountered a situation where
    the installed CUDA version differed from the version required for the project.
    To address this, I had to install the necessary CUDA version and configure my
    environment to use it without impacting the system’s CUDA setup. To the best of
    my knowledge, there is a scarcity of comprehensive, end-to-end tutorials addressing
    this specific need. Therefore, this tutorial serves as a valuable resource for
    those seeking to understand how to safely manage multiple CUDA Toolkit versions
    within their projects.
  prefs: []
  type: TYPE_NORMAL
- en: '***Table of contents:***'
  prefs: []
  type: TYPE_NORMAL
- en: · [1\. Introduction](#7e48)
  prefs: []
  type: TYPE_NORMAL
- en: · [2\. CUDA available versions](#b45b)
  prefs: []
  type: TYPE_NORMAL
- en: · [3\. Download and Extract the binaries](#7d61)
  prefs: []
  type: TYPE_NORMAL
- en: · [4\. Install CUDA toolkit](#b5bd)
  prefs: []
  type: TYPE_NORMAL
- en: · [5\. Project setup](#e81b)
  prefs: []
  type: TYPE_NORMAL
- en: · [6\. Conclusion](#a709)
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installing multiple versions of the CUDA Toolkit on your system can cause several
    effects and consequences, some of which may impact your system:'
  prefs: []
  type: TYPE_NORMAL
- en: It may lead to conflicts in the system `PATH` and environment variables. If
    not managed correctly, these conflicts can affect which version of CUDA is used
    by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It may require specific GPU driver versions for optimal performance and compatibility.
    Installing a new version might necessitate updating your GPU driver.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some libraries and software may depend on a specific CUDA version. Installing
    a new version could disrupt compatibility with these dependencies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applications that rely on CUDA may need adjustments to work with the new version.
    Incompatibilities can cause errors or unexpected behavior.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorrectly managing multiple CUDA versions can lead to system instability or
    errors in GPU-accelerated applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Therefore, to safely manage multiple CUDA Toolkit versions for your project,
    follow these steps: :'
  prefs: []
  type: TYPE_NORMAL
- en: Check the system current CUDA version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and extract the binaries of the desired version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the installer to install only the toolkit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this tutorial, I will provide a detailed, step-by-step example of how to
    accomplish this. Additionally, I will guide you through setting up your virtual
    environment after the binaries are successfully installed.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. CUDA available versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s see what CUDA version is currently used by the system by running the
    command `nvidia-smi` :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d8f251b2d3a49a60a3939253af0e5bbe.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the CUDA version is 12.1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now lets display the available CUDA in my machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: I have three different versions available on my machine.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Download and Extract the binaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Suppose the project I’ll be working on requires CUDA Toolkit version 11.8\.
    To obtain it, we begin by visiting the NVIDIA CUDA Toolkit Archive website: [here](https://developer.nvidia.com/cuda-toolkit-archive)
    . We locate the specific version of the CUDA Toolkit that our project demands.
    It’s important to ensure that we select the version compatible with our operating
    system. In my case, I chose the target platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/276a2b26e1bf205f2201037b856f1caf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'My target platform: Linux — x86_64 — Ubuntu — 22.04'
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose the ‘runfile (local)’ version of the CUDA Toolkit that corresponds to
    your operating system. This particular file typically carries a `.run` extension.
    When selecting `runfile (local)` the website provide you the installation instructions.
    In my case, the provided instructions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'However, it’s essential to keep in mind that our objective is not to install
    this version, as a newer version is already in place. Therefore, we only need
    to follow the first instruction to download the file :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The download can be verified by comparing the MD5 checksum posted at [this link](https://developer.download.nvidia.com/compute/cuda/12.3.0/docs/sidebar/md5sum.txt)
    with that of the downloaded file.
  prefs: []
  type: TYPE_NORMAL
- en: “A local installer is self-contained. It is a large file that only needs to
    be downloaded from the internet once and can be installed on multiple systems.
    Local installers are the recommended type of installer with low-bandwidth internet
    connections, or where using a network installer is not possible (such as due to
    firewall restrictions).” [1]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'At this stage, open a terminal, go to the directory where you transferred the
    CUDA runfile, and make the CUDA runfile executable :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Install CUDA toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we run the CUDA runfile with the `--silent` and `--toolkit` flags to perform
    a silent installation of the CUDA Toolkit :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Where:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--silent` : performs an installation with no further user-input and minimal
    command-line output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--toolkit` : install only the CUDA Toolkit and keep your current drivers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you’re asked to accept the agreement, accept it to proceed with installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this end, the CUDA toolkit binaries are extracted. We can make sure by running
    again the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, `cuda-11.8` is now available in my machine and the system current
    version remain the same (you can confirm it by running `nvidia-smi` ).
  prefs: []
  type: TYPE_NORMAL
- en: These steps allow you to install the CUDA version binaries. In the next section,
    I’ll show you how to set up your project to use the required CUDA version.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Project setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When working with several project, it’s recommended to use virtual environments.
    We start by creating a virtual envoronement. In my case `python3.8` was required.
    To create a virtual environment we can use the following command. I created an
    environment named `my_venv` in `venv` , a folder where I put the virtual environments
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s see what CUDA version is currently using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the created environment isn’t using the required CUDA version
    so we need to set it manually by updating the activate file and adding the following
    lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can update the activate file using your favorite editor, or you can simply
    run the following command to append text to end of file. :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to reactivate the environment and run the `nvcc` command again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: That’s it! Now the project is configured to run the required CUDA version and
    without conflicts!
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By following the steps outlined in this tutorial, you can successfully maintain
    multiple versions of CUDA on your system without encountering conflicts between
    installations. This flexibility enables each project to utilize the exact CUDA
    version it demands, achieved through the configuration of environment variables
    tailored to your specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading. I hope you enjoyed this tutorial. If you appreciate my
    tutorials, please support me by following and subscribing. This way, you’ll receive
    notifications about my new articles. If you have any questions or suggestions,
    please feel free to leave a comment below.
  prefs: []
  type: TYPE_NORMAL
- en: '**References**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] [https://developer.nvidia.com/cuda-12-2-2-download-archive?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=22.04&target_type=runfile_local](https://developer.nvidia.com/cuda-12-2-2-download-archive?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=22.04&target_type=runfile_local)'
  prefs: []
  type: TYPE_NORMAL
- en: Image credits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All images and figures in this article whose source is not mentioned in the
    caption are by the author.
  prefs: []
  type: TYPE_NORMAL
