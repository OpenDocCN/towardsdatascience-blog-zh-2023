["```py\nfeatures = np.array([1.1, 3.2, 4.5])\nselection_weights = np.array([0, 0, 1])\nselected_feature_value = np.dot(selection_weights, features)\nprint(selected_feature_value)\n# Output: 4.5\n```", "```py\nimport numpy as np\nfrom jax.nn import softmax\nfrom entmax_jax import entmax15, sparsemax\n\nweights = np.array([2, 3, 5, 7, 11, 17])\nprint(np.linalg.norm(softmax(weights)))\n# Output: 0.99747807\nprint(softmax(weights))\n# Output: [3.0512990e-07 8.2942910e-07 6.1286983e-06 4.5285295e-05 2.4724933e-03 9.9747497e-01]\n```", "```py\nimport numpy as np\nfrom jax.nn import softmax\nfrom entmax_jax import entmax15, sparsemax\n\nweights = np.array([2, 3, 5, 7, 11, 17])\nprint(np.linalg.norm(entmax15(weights)))\n# Output: 1.0\nprint(entmax15(weights))\n# Output: [0\\. 0\\. 0\\. 0\\. 0\\. 1.]\n```", "```py\ndef pick_features(weights, features):\n    feature = jnp.dot(entmax15(weights), features)\n    return feature\n```", "```py\nimport numpy as np\nimport jax.numpy as jnp\nfrom jax.nn import softmax\nfrom entmax_jax import entmax15, sparsemax\n\ndef choose(feature, threshold, left, right):\n    choices = jnp.array([left, right])\n    steer = jnp.array([threshold - feature, 0])\n    pred = jnp.dot(entmax15(steer), choices)\n    return pred\nprint(choose(12, 10, -1, 1))\n# Output: 1\nprint(choose(8, 10, -1, 1))\n# Output: -1\n```"]