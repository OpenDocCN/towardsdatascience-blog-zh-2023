- en: Boost Your Python Code With Rust Extensions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Rust 扩展提升你的 Python 代码
- en: 原文：[https://towardsdatascience.com/boost-your-python-code-with-rust-extensions-108afdbd4e13](https://towardsdatascience.com/boost-your-python-code-with-rust-extensions-108afdbd4e13)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/boost-your-python-code-with-rust-extensions-108afdbd4e13](https://towardsdatascience.com/boost-your-python-code-with-rust-extensions-108afdbd4e13)
- en: Increase speed by orders of magnitude and enhance code safety
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提高速度几个数量级并增强代码安全性
- en: '[](https://medium.com/@nic-obert?source=post_page-----108afdbd4e13--------------------------------)[![Nicholas
    Obert](../Images/d70330063c9edc2f63e53f62a78f82ec.png)](https://medium.com/@nic-obert?source=post_page-----108afdbd4e13--------------------------------)[](https://towardsdatascience.com/?source=post_page-----108afdbd4e13--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----108afdbd4e13--------------------------------)
    [Nicholas Obert](https://medium.com/@nic-obert?source=post_page-----108afdbd4e13--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nic-obert?source=post_page-----108afdbd4e13--------------------------------)[![Nicholas
    Obert](../Images/d70330063c9edc2f63e53f62a78f82ec.png)](https://medium.com/@nic-obert?source=post_page-----108afdbd4e13--------------------------------)[](https://towardsdatascience.com/?source=post_page-----108afdbd4e13--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----108afdbd4e13--------------------------------)
    [Nicholas Obert](https://medium.com/@nic-obert?source=post_page-----108afdbd4e13--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----108afdbd4e13--------------------------------)
    ·6 min read·Jul 14, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----108afdbd4e13--------------------------------)
    ·6分钟阅读·2023年7月14日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/ec001b47bea181b0429a89366a8512e8.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ec001b47bea181b0429a89366a8512e8.png)'
- en: Image by the author, generated using DALLE
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供，使用 DALLE 生成
- en: As most of you already know, Python is a general-purpose programming language
    optimized for simplicity and ease of use. While it’s a great tool for light tasks,
    code execution speed can soon become a major bottleneck in your programs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你们大多数人已经知道的，Python 是一种通用编程语言，优化了简单性和易用性。虽然它是处理轻量级任务的优秀工具，但代码执行速度很快就会成为你程序的主要瓶颈。
- en: In this article, we’ll discuss why Python is so slow, when compared to other
    programming languages. Then, we’ll see how to write a basic Rust extension for
    Python and compare its performance to a native Python implementation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将讨论为什么 Python 相较于其他编程语言如此缓慢。然后，我们将看到如何为 Python 编写一个基本的 Rust 扩展，并将其性能与原生
    Python 实现进行比较。
- en: Why Python is slow
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么 Python 很慢
- en: 'Before we start, I would like to point out that programming languages aren’t
    inherently fast or slow: their implementations are. If you want to learn about
    the difference between a language and its implementation, check out this article:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我想指出编程语言本身并不 inherently 快或慢：它们的实现才是决定因素。如果你想了解语言和其实现之间的区别，请查看这篇文章：
- en: '[](https://betterprogramming.pub/the-fastest-programming-language-myth-65eaaf7e5d1a?source=post_page-----108afdbd4e13--------------------------------)
    [## The Fastest Programming Language Myth'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://betterprogramming.pub/the-fastest-programming-language-myth-65eaaf7e5d1a?source=post_page-----108afdbd4e13--------------------------------)
    [## 最快编程语言的神话'
- en: A common programming misconception that has to be eradicated
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个必须消除的常见编程误解
- en: betterprogramming.pub](https://betterprogramming.pub/the-fastest-programming-language-myth-65eaaf7e5d1a?source=post_page-----108afdbd4e13--------------------------------)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[betterprogramming.pub](https://betterprogramming.pub/the-fastest-programming-language-myth-65eaaf7e5d1a?source=post_page-----108afdbd4e13--------------------------------)'
- en: First of all, Python is dynamically typed, meaning that variable types are only
    known at runtime, and not at compile-time. While this design choice allows for
    more flexible code, the Python interpreter cannot make assumptions about what
    your variables are and their size. As a result, it cannot make optimizations like
    a static compiler would.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Python 是动态类型的，这意味着变量的类型仅在运行时知道，而不是在编译时知道。虽然这种设计选择允许代码更加灵活，但 Python 解释器无法对你的变量及其大小做出假设。因此，它不能像静态编译器那样进行优化。
- en: Another design choice that makes Python slower than other alternatives is the
    infamous GIL. The Global Interpreter Lock is a mutex lock that allows only one
    thread to execute at any point in time. The GIL was originally meant to guarantee
    thread safety but has encountered great backlash from developers of multi-threaded
    applications.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个使Python比其他替代方案更慢的设计选择是臭名昭著的GIL。全局解释器锁是一个互斥锁，只允许一个线程在任何时候执行。GIL最初是为了保证线程安全，但遭到了多线程应用程序开发者的强烈反对。
- en: On top of that, Python code is executed through a virtual machine instead of
    running directly on the CPU. This further layer of abstraction adds a significant
    execution overhead, compared to statically compiled languages.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Python代码是通过虚拟机执行的，而不是直接在CPU上运行。这层额外的抽象增加了显著的执行开销，与静态编译语言相比。
- en: 'Furthermore, Python objects are internally treated as dictionaries (or hashmaps)
    and their attributes (properties and methods, accessed via the dot operator) aren’t
    usually accessed through a memory offset, but rather through a dictionary lookup,
    which is substantially slower. If you’re interested in learning more, I wrote
    an article where I dive deeper into how attribute lookup works in Python:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Python对象在内部被视为字典（或哈希表），它们的属性（通过点操作符访问的属性和方法）通常不是通过内存偏移量访问的，而是通过字典查找，这显著较慢。如果你有兴趣了解更多，我写了一篇文章深入探讨了Python中属性查找的工作原理：
- en: '[](https://betterprogramming.pub/optimize-your-python-programs-for-free-with-slots-4ff4e1611d9d?source=post_page-----108afdbd4e13--------------------------------)
    [## Optimize Your Python Codebases by Almost 3x With __slots__'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 通过__slots__将您的Python代码库优化到接近3倍](https://betterprogramming.pub/optimize-your-python-programs-for-free-with-slots-4ff4e1611d9d?source=post_page-----108afdbd4e13--------------------------------)'
- en: Improve execution speed and memory usage by adding just one line
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过添加一行代码来提高执行速度和内存使用
- en: betterprogramming.pub](https://betterprogramming.pub/optimize-your-python-programs-for-free-with-slots-4ff4e1611d9d?source=post_page-----108afdbd4e13--------------------------------)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[betterprogramming.pub](https://betterprogramming.pub/optimize-your-python-programs-for-free-with-slots-4ff4e1611d9d?source=post_page-----108afdbd4e13--------------------------------)'
- en: Python extensions
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python扩展
- en: Now you might ask why Python is so widely used despite its clear performance
    flaws. Don’t data science and machine learning require high computational power?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问，为什么尽管Python有明显的性能缺陷，它仍然被广泛使用。数据科学和机器学习难道不需要高计算能力吗？
- en: To get around Python’s speed issue, developers include in their code calls to
    external optimized functions to do the heavy lifting. These external functions
    are usually written using statically typed languages such as C and pre-compiled
    into libraries that can then be imported into your programs. Many of Python’s
    most popular libraries are written in C, including numpy, TensorFlow, and pandas.
    They are the perfect tradeoff between the ease of use of a Python interface and
    the performance of C.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了绕过Python的速度问题，开发者在代码中调用外部优化函数来完成繁重的计算。这些外部函数通常是使用静态类型语言如C编写，并预先编译成库，然后可以导入到你的程序中。许多Python最受欢迎的库都是用C编写的，包括numpy、TensorFlow和pandas。它们在Python接口的易用性和C的性能之间达到了完美的平衡。
- en: However, C code is inherently vulnerable to memory-related bugs and isn’t as
    developer-friendly as more modern programming languages. This is why I suggest
    using Rust instead for writing your Python extensions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，C代码本身容易受到内存相关的错误影响，并不像现代编程语言那样对开发者友好。这就是为什么我建议使用Rust来编写你的Python扩展。
- en: Environment setup
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境设置
- en: To build our Rust extension, we’ll be using `[maturin](https://github.com/PyO3/maturin)`,
    a zero-configuration tool for building and publishing Rust-based Python packages.
    We will also use `[PyO3](https://github.com/PyO3/pyo3)` to create native Python
    modules to be imported in your source code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建我们的Rust扩展，我们将使用`[maturin](https://github.com/PyO3/maturin)`，这是一个零配置的Rust基础Python包构建和发布工具。我们还将使用`[PyO3](https://github.com/PyO3/pyo3)`来创建本地Python模块，以便在你的源代码中导入。
- en: 'In this tutorial, we’ll write a simple Rust library to calculate the prime
    factors of a given number. First of all, let’s create a new directory for our
    project:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将编写一个简单的Rust库来计算给定数字的质因数。首先，让我们为我们的项目创建一个新目录：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let’s create a new Python virtual environment to install `maturin` in:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个新的Python虚拟环境来安装`maturin`：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And initialize the `maturin` project:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 并初始化`maturin`项目：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This command will generate a Rust project structure. The files we’ll be interested
    in are `Cargo.toml` and `src/lib.rs`. The former contains information about the
    Rust library, while the latter contains the actual Rust source code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将生成一个 Rust 项目结构。我们感兴趣的文件是 `Cargo.toml` 和 `src/lib.rs`。前者包含有关 Rust 库的信息，而后者包含实际的
    Rust 源代码。
- en: Writing Rust extensions
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写 Rust 扩展
- en: 'Now that we’re set up, it’s time to write some Rust. I’ll assume you already
    have some basic knowledge of Rust, but you should have no problem following along
    even if you don’t. Open your `src/lib.rs` file and add the following function:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了，是时候编写一些 Rust 代码了。我假设你已经有一些基本的 Rust 知识，但即使没有，你也应该能轻松跟上。打开你的 `src/lib.rs`
    文件，并添加以下函数：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The function name must match the `lib.name` setting in the `Cargo.toml` file.
    In this case, `prime_fact` is the name of the Rust package, as specified in the
    `Cargo.toml`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 函数名称必须与 `Cargo.toml` 文件中的 `lib.name` 设置匹配。在这种情况下，`prime_fact` 是 Rust 包的名称，如
    `Cargo.toml` 中所指定。
- en: 'It’s now time to add some functionality to our Rust library. Let’s create a
    function that calculates the prime factors of a given number:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候为我们的 Rust 库添加一些功能了。让我们创建一个计算给定数字的质因数的函数：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To add the newly created function to the module, update the `prime_fact` module
    function as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要将新创建的函数添加到模块中，请按如下方式更新`prime_fact`模块函数：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And we’re done writing our Rust library. All is left to do is build it:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了 Rust 库的编写。剩下的就是构建它：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This command will build the Rust package and install it as a Python library
    in your current virtual environment.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将构建 Rust 包并在你当前的虚拟环境中将其安装为 Python 库。
- en: 'If you wish to install the library globally, run the following commands instead:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望全局安装该库，请改为运行以下命令：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Remember to exit any virtual environment you may be in if you want to install
    the package globally.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望全局安装该包，请记得退出你可能处于的任何虚拟环境。
- en: Importing from Python and benchmarks
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 Python 导入和基准测试
- en: 'To use the newly created library, you just need to import it as a normal Python
    module:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用新创建的库，你只需要像普通的 Python 模块一样导入它：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The expected output is:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 预期的输出是：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now let’s compare the performance of our Rust implementation with its native
    Python equivalent:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将 Rust 实现的性能与其原生 Python 等效实现进行比较：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And the truncated output is:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 截断的输出是：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Clearly, the Rust implementation outperforms its Python equivalent by orders
    of magnitude.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，Rust 实现比其 Python 等效实现要快几个数量级。
- en: For further documentation and examples, check out `[PyO3](https://github.com/PyO3/pyo3)`
    [on GitHub](https://github.com/PyO3/pyo3).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多文档和示例，请查看 GitHub 上的 `[PyO3](https://github.com/PyO3/pyo3)`。
- en: Conclusion
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: To wrap it up, Rust extensions are a great tool to boost your Python codebases
    both in terms of execution speed and type safety. Compared to C extensions, they
    are safer, easier to implement, and more developer-friendly.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，Rust 扩展是提升 Python 代码库执行速度和类型安全的绝佳工具。与 C 扩展相比，它们更安全、更易于实现，并且对开发者更友好。
- en: I hope you enjoyed this article. If you have anything to add, please share your
    thoughts in a comment. Thanks for reading!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢这篇文章。如果你有任何补充，请在评论中分享你的想法。感谢阅读！
- en: 'If you’re interested in learning more about how to speed up Python and how
    object attributes are accessed, I suggest you check out this story below:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对了解如何加速 Python 以及如何访问对象属性感兴趣，我建议你查看下面的故事：
- en: '[](https://betterprogramming.pub/optimize-your-python-programs-for-free-with-slots-4ff4e1611d9d?source=post_page-----108afdbd4e13--------------------------------)
    [## Optimize Your Python Codebases by Almost 3x With __slots__'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 通过 __slots__ 将您的 Python 代码库优化近 3 倍](https://betterprogramming.pub/optimize-your-python-programs-for-free-with-slots-4ff4e1611d9d?source=post_page-----108afdbd4e13--------------------------------)'
- en: Improve execution speed and memory usage by adding just one line
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过添加一行代码来提高执行速度和内存使用效率
- en: betterprogramming.pub](https://betterprogramming.pub/optimize-your-python-programs-for-free-with-slots-4ff4e1611d9d?source=post_page-----108afdbd4e13--------------------------------)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[优化您的 Python 程序，免费使用 __slots__](https://betterprogramming.pub/optimize-your-python-programs-for-free-with-slots-4ff4e1611d9d?source=post_page-----108afdbd4e13--------------------------------)'
