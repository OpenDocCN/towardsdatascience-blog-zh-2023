- en: Visualizing Geospatial Network Graphs using Basemap and mplleaflet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/visualizing-geospatial-network-graphs-using-basemap-and-mplleaflet-76a7f3d0c923](https://towardsdatascience.com/visualizing-geospatial-network-graphs-using-basemap-and-mplleaflet-76a7f3d0c923)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn how to plot network graphs on maps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/?source=post_page-----76a7f3d0c923--------------------------------)[![Wei-Meng
    Lee](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----76a7f3d0c923--------------------------------)[](https://towardsdatascience.com/?source=post_page-----76a7f3d0c923--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----76a7f3d0c923--------------------------------)
    [Wei-Meng Lee](https://weimenglee.medium.com/?source=post_page-----76a7f3d0c923--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----76a7f3d0c923--------------------------------)
    ·9 min read·Mar 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2faf32825e4db3335fc9b1f3723c3e48.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Z](https://unsplash.com/@dead____artist?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: In my previous articles on network graphs, I showed you the basics of plotting
    directed and undirected graphs using the NetworkX and pyvis packages. In this
    article, I will use the flights delay dataset to visualize the flight paths between
    the different airports, and specifically show you how to visualize them using
    a geospatial network graph.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/plotting-network-graphs-using-python-bc62f0d93b3f?source=post_page-----76a7f3d0c923--------------------------------)
    [## Plotting Network Graphs using Python'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to use the NetworkX package to visualize complex networks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/plotting-network-graphs-using-python-bc62f0d93b3f?source=post_page-----76a7f3d0c923--------------------------------)
    [](/building-interactive-network-graphs-using-pyvis-5b8e6e25cf64?source=post_page-----76a7f3d0c923--------------------------------)
    [## Building Interactive Network Graphs using pyvis
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to make your network graphs come to life
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/building-interactive-network-graphs-using-pyvis-5b8e6e25cf64?source=post_page-----76a7f3d0c923--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Using the Flights Delay Dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As usual, I am going to use the **2015 Flights Delay** dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '**2015 Flights Delay Dataset** (*airports.csv*). *Source*: [https://www.kaggle.com/datasets/usdot/flight-delays](https://www.kaggle.com/datasets/usdot/flight-delays).
    *Licensing* — [CC0: Public Domain](https://creativecommons.org/publicdomain/zero/1.0/)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'There are two files from this dataset that I will be using:'
  prefs: []
  type: TYPE_NORMAL
- en: '**flights.csv**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**airports.csv**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, let’s load the **flights.csv** file into a Pandas DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We don’t have to load all the columns in this file (it is a large file!) —
    three columns are sufficient for this article. You should see the dataframe as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0d492d9b649d1b369fe5f4b92144d786.png)'
  prefs: []
  type: TYPE_IMG
- en: All images by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the dataframe is loaded, I will go ahead and count the numbers of flights
    from one airport to another:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The resultant output is as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/82fa5f26956bd5de93a25db1b84c5cf7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As there are more than 4500 combinations of flights, let’s only select the
    top 800 combinations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/96b9460325109e7d654f7afb49f7d2e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the Graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The NetworkX package has a function called `from_pandas_edgelist()` that you
    can use to create an edge list from a Pandas DataFrame. It returns a graph object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the above statement, `G` is a directed graph (`networkx.classes.digraph.DiGraph`).
    If you want to create an undirected graph (`networkx.classes.graph.Graph`), simply
    leave out the `creating_using` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The graph now contains all the nodes and edges which it derives from the supplied
    dataframe. In our case, the nodes are all the airports from the **ORIGIN_AIRPORT**
    and **DESTINATION_AIRPORT** columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now examine the nodes in the graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Likewise, you can examine the edges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a partial list of edges returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Plotting the Graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can now plot the network graph showing the top 800 flights between airports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The network graph looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4f004e88cde7387275ea7012484302ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Argh! Obviously we had too many airports and this makes the network graph really
    messy. Let’s reduce the number of airports by changing the number of rows we fetch
    from the dataframe to 140:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The network graph now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/913523479496b1ff644ddd7a9de14105.png)'
  prefs: []
  type: TYPE_IMG
- en: This is now a much cleaner graph!
  prefs: []
  type: TYPE_NORMAL
- en: Geospatial Mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our dataset contains geospatial data and it would not do justice to our dataset
    if we do not map the data onto a map!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, I will show how you can plot the network graph onto a map.
    I will be using the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**basemap**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mplleaflet**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing basemap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first map that I will be using is **basemap**.
  prefs: []
  type: TYPE_NORMAL
- en: Basemap is a matplotlib extension that is very useful for creating maps in Python.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To install basemap, use the `pip` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using Windows, the installation should be uneventful. However, on
    the Mac, you may get some error messages regarding missing **geos** library. To
    fix this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Go to [https://brew.sh/](https://brew.sh/) if you do not have Homebrew installed.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Observe where **geos** is installed in. For my machine, **geos** is installed
    in **/opt/homebrew/Cellar/geos/3.11.1**. Next, type the following command in Terminal
    and set the directory to point to where **geos** is installed in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Finally, restart your Jupyter Notebook. Basemap should now be installed correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Loading the airport locations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to plot the locations of the airports on a map, you need the latitude
    and longitude of each airport. Fortunately, this is already available in the **airports.csv**
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This CSV file contains the IATA_CODE of all the airports and their corresponding
    latitudes and longitudes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2b5da65f6690445627e30801d021f8f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'However, there is one thing you need to be careful here. There are three airports
    that have no location information. You can verify this using the following statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now see that the following airports have no location details — **ECP**,
    **PBG**, and **UST**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/92e22ec74a19927976408cea11f45428.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are two ways to solve this:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete all the airports with no location information, or
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supply the location information for the three airports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We shall do the latter by filling in the missing location information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Plotting the base map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are now ready to plot the basemap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The above code snippet displays the basemap using the Mercator projection (`merc`).
  prefs: []
  type: TYPE_NORMAL
- en: 'For more details of configuring basemap, see: [https://basemaptutorial.readthedocs.io/en/latest/](https://basemaptutorial.readthedocs.io/en/latest/)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In order to display the airports location on basemap, you need to convert the
    latitute, longitude into x and y map-projection coordinates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to create a dictionary in the following format: `{IATA_CODE:
    (x,y)}`. You can do so using the following statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The `pos` variable now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Drawing the nodes, labels, and edges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the x and y map-projection coordinates obtained, you can now start to
    plot the network graph onto the basemap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The above code snippet draws the nodes, labels, and edges onto the basemap:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2abc5a20a8b8788448f4db0b1318e038.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you try to plot the map using the Orthographic (`ortho`) projection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The map will now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4db07d46e47c137c47cadc48575ff279.png)'
  prefs: []
  type: TYPE_IMG
- en: Cool, isn’t it!
  prefs: []
  type: TYPE_NORMAL
- en: Plotting using mplleaflet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While you can plot the network graph using basemap, the greatest drawback is
    that you can’t really interact with it. It would be useful to be able to pan the
    map to examine each airport in more details. This is where **mplleaftlet** comes
    in.
  prefs: []
  type: TYPE_NORMAL
- en: mplleaflet is a Python library that converts a matplotlib plot into a webpage
    containing a pannable, zoomable Leaflet map. You can embed the Leaflet map in
    your Jupyter Notebook.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s first prepare the locations for each airport by converting all the locations
    into a dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The `pos` variable is now a dictionary of the following format: `{ IATA_CODE:
    [LONGITUDE, LATITUDE]}`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now draw the nodes and edges on the `mplleaflet` map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The size of each node is proportional to the number of flights arriving at
    the airport. The map now shows the network graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c6c3da89c77984416a18f0f72563f33e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you get an error like “AttributeError: ‘XAxis’ object has no attribute ‘_gridOnMajor’”,
    you may need to downgrade the version of matplotlib by using the `pip` command:
    `pip install matplotlib==3.3.2`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You can zoom into the map as well as pan it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5ec1ef521dfec58613dbe29aa1c8e1e0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you remove the earlier part of the code where we selected only the top 140
    flights combination:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how the map will look like with all the airports displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b7b8c2fea00b82884e5c2df57d2ccb34.png)'
  prefs: []
  type: TYPE_IMG
- en: '**If you like reading my articles and that it helped your career/study, please
    consider signing up as a Medium member. It is $5 a month, and it gives you unlimited
    access to all the articles (including mine) on Medium. If you sign up using the
    following link, I will earn a small commission (at no additional cost to you).
    Your support means that I will be able to devote more time on writing articles
    like this.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/membership?source=post_page-----76a7f3d0c923--------------------------------)
    [## Join Medium with my referral link — Wei-Meng Lee'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Wei-Meng Lee (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----76a7f3d0c923--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you have enjoyed trying out the code in this article! For drawing the
    network graph on the **basemap**, the main thing you need to do is to convert
    the latitude and longitude into a dictionary of map-projection coordinates, while
    for the **mplleaflet** map, you need to put the latitudes and longitudes into
    a dictionary. The **basemap** allows you to experiment with the different types
    of projections (such as Mercator, Orthographic, and more), but the main drawback
    is that it is not interactive. On the other hand, **mplleaflet** allows you to
    interact with the map, but it does not support projections like **basemap** does.
  prefs: []
  type: TYPE_NORMAL
