- en: 'Visualized Linear Algebra to Get Started with Machine Learning: Part 1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/visualized-linear-algebra-to-get-started-with-machine-learning-part-1-245c2b6487f0](https://towardsdatascience.com/visualized-linear-algebra-to-get-started-with-machine-learning-part-1-245c2b6487f0)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/a3f469428d09c518cc165b4bb3c75a2c.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Michael Dziedzic](https://unsplash.com/@lazycreekimages?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Master elements of linear algebra, start with simple and visual explanations
    of basic concepts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@marcellopoliti?source=post_page-----245c2b6487f0--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----245c2b6487f0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----245c2b6487f0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----245c2b6487f0--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----245c2b6487f0--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----245c2b6487f0--------------------------------)
    ¬∑11 min read¬∑Feb 22, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Often the main difficulty one faces when one wants to begin one‚Äôs journey into
    the world of machine learning is having to understand math concepts. Sometimes
    this can be difficult if you do not have a solid background in subjects such as
    linear algebra, statistics, probability, optimization theory, or others. ü§îüí≠üî¢‚úñÔ∏èüßÆ
  prefs: []
  type: TYPE_NORMAL
- en: In this article then, I would like to start by giving **intuitive explanations
    of basic linear algebra concepts** that are essential before delving into the
    world of Machine Learning. Obviously, this article is not meant to be exhaustive
    there is a lot to know about this subject, but maybe it can be a first approach
    to tackling this subject!
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a vector?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple Vector Operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Projections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basis, Vector Space and Linear Indipendence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matrices and Solving Equations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Why Linear Algebra is important for Data Science?**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Linear algebra** allows us to **solve real-life problems**, especially problems
    that are very common in data science.'
  prefs: []
  type: TYPE_NORMAL
- en: Assume we go to the market to buy 3 avocados, and 4 broccoli and pay $8\. The
    next day we buy 11 avocados and 2 broccoli and pay $12.
  prefs: []
  type: TYPE_NORMAL
- en: Now we want to find out how much a single avocado and a single broccoli cost.
    We have to solve the following expressions simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2a86bef7875cd345fada79c33b995bbd.png)'
  prefs: []
  type: TYPE_IMG
- en: Linear Algebra Problem (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: Another typical problem is to **find the best parameters of a function** for
    it **to fit the data we have collected**. So suppose we already know what kind
    of function we need to use, but this **function can change its form since it depends
    on some parameters**. We want to **find the best form and therefore the best parameters**.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6adb71f4f66b53953c3fbda8417af0a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Fitting Data (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs for example call ***¬µ*** *= param1* and ***Œ∏*** *= param2*.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, in Machine Learning, we want to **iteratively update bot [¬µ, Œ∏]** to
    find at the end some good curve that fits our data.
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs say that **a curve far away from the optimal green curve has a high error**,
    while **a curve similar to the green one has a low error**. We usually say that
    we want to find those parameters [¬µ, Œ∏] in order to **minimize the error**, so
    find the curve which is as closest as possible to the green one.
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs see how linear algebra can help us with these problems!
  prefs: []
  type: TYPE_NORMAL
- en: What is a vector?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **vector** in physics is a **mathematical entity** that has a direction a
    sign and a magnitude. So it is commonly represented visually with an arrow.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6988ea8a0783dc38813d90f558f8dbb3.png)'
  prefs: []
  type: TYPE_IMG
- en: Vector (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: Often in **computer science, the concept of vector is generalized**. In fact,
    you will hear many times the term list instead of vector. In this conception,
    the vector is nothing more than a **list of properties** that we can use to represent
    anything.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to represent houses according to 3 of their properties:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The number of rooms
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The number of bathrooms
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Square meters
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/60130e28e3938d3c65520c33d18e04d7.png)'
  prefs: []
  type: TYPE_IMG
- en: Lists (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: For example, in the image above we have two vectors. The first represents a
    house with 4 bedrooms, 2 bathrooms and 85 square meters. The second, on the other
    hand, represents a house with 3 rooms, 1 bathroom and 60 square meters.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, if we are interested in other properties of the house we can create
    a much longer vector. In this case, we will say that the vector instead of having
    3 dimensions will have *n dimensions.* **In machine learning, we can often have
    hundreds or thousands of dimensions**!
  prefs: []
  type: TYPE_NORMAL
- en: Simple Vector Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are operations we can perform with vectors, the simplest of which are
    certainly addition between two vectors, and multiplication of a vector by a **scalar**
    (**i.e., a simple number**).
  prefs: []
  type: TYPE_NORMAL
- en: To **add 2 vectors you can use the parallelogram rule**. That is, you draw vectors
    parallel to those we want to add and then draw the diagonal. The diagonal will
    be the resulting vector of the addition. Believe me, it is much easier to understand
    this by looking directly at the following example.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/493712fe20bc2025b235a23697df0ee7.png)'
  prefs: []
  type: TYPE_IMG
- en: Vector Addition (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: While **multiplication by a scalar stretches the vector by n units**. See the
    following example.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/939f5b944fb9b887a3306d5c9adff6da.png)'
  prefs: []
  type: TYPE_IMG
- en: Vector -Scala Multiplication (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: Modulus and Inner Product
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**A vector is actually always expressed in terms of other vectors**. For example,
    let us take as **reference vectors, two vectors i and j both with length 1 and
    orthogonal to each other**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b8f2fe5ea03144a690906d94c22f5081.png)'
  prefs: []
  type: TYPE_IMG
- en: Unit Lenght Vectors (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: Now we define a new vector *r*, which **starts from the origin**, that is, from
    the point where *i* and *j* meet, and which is *a* times longer than *i,* and
    *b* times longer than j.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ad50bc69c0175a7f4b741f059c076594.png)'
  prefs: []
  type: TYPE_IMG
- en: A vector in Space (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: More commonly **we refer to a vector using its coordinates r = [a,b]**, in this
    way we can identify various vectors in a **vector space**.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are ready to define a new operation, the **modulus of a vector**, **that
    is, its length** can be derived from its coordinates and is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/11097c6d740a4642a6a80834f0b57332.png)'
  prefs: []
  type: TYPE_IMG
- en: Vector Modulus (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: The **Inner Product** on the other hand is another operation with which given
    two vectors, it multiplies all their components and returns the sum.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/744e78788236b79ae6ee926fa8a4741f.png)'
  prefs: []
  type: TYPE_IMG
- en: Inner (dot) Product (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'The inner product has some properties that may be useful in some cases :'
  prefs: []
  type: TYPE_NORMAL
- en: 'commutative : *r*s = s*r*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'distributive over addition : *r*(s*t) = r*s + r*t*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'associative over scalar multiplication: *r*(a*s) = a*(r*s) where a is a scalar*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notice that if you compute the inner product of a vector per itself, you will
    get its modulus squared!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ad70d78bf06369a54b420197c4889aca.png)'
  prefs: []
  type: TYPE_IMG
- en: Inner (dot) Product (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Cosine (dot) Product
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far we have only seen a mathematical definition of the inner product based
    on the coordinates of vectors. Now let us **see a geometric interpretation** of
    it. Let us create 3 vectors *r, s* and their difference *r-s*, so as to form a
    triangle with 3 sides *a,b,c*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a36238dc32bf62dec70603cde7ff6b79.png)'
  prefs: []
  type: TYPE_IMG
- en: Triangle (Image By Autor)
  prefs: []
  type: TYPE_NORMAL
- en: We know from our high school days that **we can derive c using a simple rule
    of trigonometry**.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/93b372e27feb1758c6bfbb2e26468604.png)'
  prefs: []
  type: TYPE_IMG
- en: Trigonometry (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'But then we can derive from the above that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7bf2014b917dfd2e3cf62eb9f6f66f51.png)'
  prefs: []
  type: TYPE_IMG
- en: (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: So the comprised angle has a strong effect on the result of this operation.
    In fact in some special cases where the angle is 0¬∞, 90¬∞, and 180¬∞ we will have
    that the cosine will be 0,1,-1 respectively. And so we will have special effects
    on this operation. So for example, **2 vectors that are 90 degrees to each other
    will always have a dot product = 0**.
  prefs: []
  type: TYPE_NORMAL
- en: Projection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let‚Äôs consider two vectors r and s. These two vectors are close to each other
    from one side and make an angle *Œ∏* in between them. **Let‚Äôs put a torch on top
    of *s*, and we‚Äôll see a shadow of *s* on *r***. **That‚Äôs the projection of *s*
    on *r*.**
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c75e4731c1ca267448b2fa583eedc8dc.png)'
  prefs: []
  type: TYPE_IMG
- en: Projection (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'There are 2 basics projection operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scalar Projection**: gives us the magnitude of the projection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vector Projections**: gives us the projection vector itself'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/c1318b08adcda309adbb5aca273ff626.png)'
  prefs: []
  type: TYPE_IMG
- en: Projections (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: Changing Basis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changing basis in linear algebra refers to the **process of expressing a vector
    in a different set of coordinates**, **called a basis**. A **basis is a set of
    linearly independent vectors that can be used to express any vector in a vector
    space.** **When a vector is expressed on a different basis, its coordinates change.**
  prefs: []
  type: TYPE_NORMAL
- en: We have seen, for example, that in two dimensions each vector can be represented
    as a sum of two basis vectors [0,1] and [1,0]. These two vectors are the basis
    of our space. But **can we use two other vectors as the basis and not just these
    two? Certainly but in this case the coordinates of each vector in our space will
    change**. Let‚Äôs see how.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3e5d05ff82c055913e0cede498ef03a0.png)'
  prefs: []
  type: TYPE_IMG
- en: New basis (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: In the image above, I have two bases. The base (e1, e2), and the base (b1,b2).
    In addition, I have a vector r (in red). This vector has coordinates [3,4] when
    expressed in terms of (e1,e2) which is the base we‚Äôve always used by default.
    But how do its coordinates become when expressed in terms of (b1,b2)?
  prefs: []
  type: TYPE_NORMAL
- en: To find these coordinates we need to go by steps. First, we need to find the
    projections of the vector r onto the vectors of the new base (b1,b2).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ebdf5577613ab6298969e5414c64d1d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Changing Basis (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: It‚Äôs easy to see that the sum of these projections we created is just r.
  prefs: []
  type: TYPE_NORMAL
- en: r = p1 + p2.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, in order to change the basis, **I have to check that the new basis
    is also orthogonal**, meaning that the vectors are at 90 degrees to each other,
    so they can define the whole space.
  prefs: []
  type: TYPE_NORMAL
- en: '**To check this just see if the cosine of the angle is 0 which means an angle
    of 90 degrees.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4648edf8ac8635e83b5c06b2601ea85d.png)'
  prefs: []
  type: TYPE_IMG
- en: Check orthonormal basis (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Now we go on to **calculate the vector projections of r on the vectors (b1,b2)**,
    with the formula we saw in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/96469e61bb9507f2488f8219a250e0cc.png)'
  prefs: []
  type: TYPE_IMG
- en: Vector Projection (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'The value circled in red in the vector projection will give us the coordinate
    of the new vector r expressed in base b : (b1,b2) instead of e : (e1,e2).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b09a7d0258daf6bb851246bb4cdd1507.png)'
  prefs: []
  type: TYPE_IMG
- en: Vector r in new basis b (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: To check that the calculations are right we need to check that the sum of the
    projections is just r in base e:(e1,e2).
  prefs: []
  type: TYPE_NORMAL
- en: '**[4,2] + [-1,2] = [3,4]**'
  prefs: []
  type: TYPE_NORMAL
- en: Basis, Vector Space and Linear Indipendence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already seen and talked about basis. But let‚Äôs define more precisely
    what a vector basis is in a vector space.
  prefs: []
  type: TYPE_NORMAL
- en: '**A basis is a set of n vectors** that:'
  prefs: []
  type: TYPE_NORMAL
- en: '**are not linear combinations of each other** (linearly independent)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**span the space**: the space is n-dimensional'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first point means that if, for example, I have 3 vectors *a,b,c* forming
    a basis, that means there is no way to add these vectors together and multiply
    them by scalars and get zero!
  prefs: []
  type: TYPE_NORMAL
- en: 'If I denote by *x y* and *z* any three scalars (two numbers), it means that
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '***xa + yb +zc != 0***'
  prefs: []
  type: TYPE_NORMAL
- en: (obviously excluding the trivial case where x = y = z = 0). In this case, we
    will say that the vectors are linearly independent.
  prefs: []
  type: TYPE_NORMAL
- en: This means, for example, that **there is no way to multiply by scalars and add
    *a* and *b* together to get *c***. It means that **if *a* and *b* lie in space
    in two dimensions c lies in a third dimension instead**.
  prefs: []
  type: TYPE_NORMAL
- en: While the second point means that I can multiply these vectors by scalars and
    sum them together to get any possible vectors in a 3-dimensional space. **So these
    3 basis vectors are enough for me to define the whole space of dimension n=3**.
  prefs: []
  type: TYPE_NORMAL
- en: Matrices and solving simultaneous equations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By now you should be pretty good at handling vectors and doing operations with
    them. But what are they used for in real life? We saw in the beginning that one
    of our goals was to solve multiple equations together simultaneously, for example,
    to figure out the prices of vegetables at the supermarket.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fb5b588dea90ece49d71d225aeb0e6ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Simultaneous Equations (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: But now that we know the vectors we can rewrite these equations in a simpler
    way. We put the vectors of coefficients [2,10] and [3,1] next to each other in
    forming a matrix (set of vectors). Then we will have the vector of unknowns [a,b]
    and finally the result [8,3].
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dc792c5947def1b0c7ceab08083662e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Vectorized Form (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: Now you may ask whether this new form of writing the problem is really better
    or not. **How do you do multiplication between a matrix and a vector?** It is
    very simple. Just multiply each row of the matrix by the vector. In case we had
    a multiplication between two matrices we would have to multiply each row of the
    first matrix by each column of the second matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '**So by applying this rule rows by columns we should regain the original shape.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e78f1ca86089e729d34ac21f8c88e091.png)'
  prefs: []
  type: TYPE_IMG
- en: Matrix Multiplication (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: '**This form, however, has other advantages as well. It gives us a geometric
    interpretation of what is happening. Every matrix defines a transformation in
    space. So if I have a point in a space and I apply a matrix, my point will move
    in some way.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/888ca374a6e5e11ec60952218597b5a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Matrix Transformation (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: But then we can also say that **a matrix is nothing more than a function that
    takes a point as input and generates a new one as output.**
  prefs: []
  type: TYPE_NORMAL
- en: So our initial problem can be interpreted as follows, ‚ÄúWhat is the original
    vector [a,b] on which the transformation results in [8,3]?‚Äù
  prefs: []
  type: TYPE_NORMAL
- en: In this way, **you can think about solving simultaneous equations as transformations
    over vectors in a vector space**. Plus operations with matrices have the following
    properties that can be very useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given A(r) = r2 where A is a matrix and r, r2 are both scalar:'
  prefs: []
  type: TYPE_NORMAL
- en: '*A(nr) = ns* where *n* is a scalar'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*A(r+s) = A(r) + A(s)* where *s* is a vector'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matrices and space transformations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand the effects of a matrix then we can see how they transform the
    vectors to which they are applied. In particular, we might see what is the impact
    of a matrix when applied on the eigenbasis.
  prefs: []
  type: TYPE_NORMAL
- en: If we have a 2x2 matrix and we are in a space in two dimensions, the first column
    of the matrix will tell us what the effect will be on the vector e1 = [1,0] and
    the second column instead will tell us what the effect will be on the vector e1
    = [0,2].
  prefs: []
  type: TYPE_NORMAL
- en: We then see the effect of some known matrices. These transformations are often
    useful in Machine Learning for data augmentation on images, you can stretch or
    shrink those images for example.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/95ab637b972515cec1bd6840e5958647.png)'
  prefs: []
  type: TYPE_IMG
- en: Matrix transformations (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: '**We can also apply multiple consecutive transformations to a vector**. So
    if we have two transformations represented by the matrices A1 and A2 we can apply
    them consecutively A2(A1(vector)).'
  prefs: []
  type: TYPE_NORMAL
- en: But this is different from applying them inversely i.e. A1(A2(vector)). That
    is why **the product between matrices does not enjoy the commutative property.**
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this first part of my articles on linear algebra, you should have understood
    why this subject is so important for Machine Learning and perhaps you have learned
    basic concepts quickly and intuitively.
  prefs: []
  type: TYPE_NORMAL
- en: You know what a vector and a matrix are, how to represent these entities in
    a vector space and how to do operations with these elements. Follow along so you
    don‚Äôt miss the continuation of this article! [üòä](https://emojipedia.org/smiling-face-with-smiling-eyes/)
  prefs: []
  type: TYPE_NORMAL
- en: The End
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Marcello Politi*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Linkedin](https://www.linkedin.com/in/marcello-politi/), [Twitter](https://twitter.com/_March08_),
    [CV](https://march-08.github.io/digital-cv/)'
  prefs: []
  type: TYPE_NORMAL
