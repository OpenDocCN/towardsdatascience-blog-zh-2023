- en: 'Python Watermarking: Old vs. New, Clunky vs. Clean — Which Will You Choose?'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/python-watermarking-old-vs-new-clunky-vs-clean-which-will-you-choose-5f4f1e75a9f3](https://towardsdatascience.com/python-watermarking-old-vs-new-clunky-vs-clean-which-will-you-choose-5f4f1e75a9f3)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/7b429df4182e762658cdb26e413f5f4d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Siegfried Frech](https://pixabay.com/users/stilles_wasser-19985110/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7863868)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7863868)
  prefs: []
  type: TYPE_NORMAL
- en: 'Python Watermarking Made Easy: A Comprehensive Comparison of OpenCV, PIL, and
    filestools'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://christophertao.medium.com/?source=post_page-----5f4f1e75a9f3--------------------------------)[![Christopher
    Tao](../Images/bea1e3c81cc62eb28bdba9275d6b326f.png)](https://christophertao.medium.com/?source=post_page-----5f4f1e75a9f3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5f4f1e75a9f3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5f4f1e75a9f3--------------------------------)
    [Christopher Tao](https://christophertao.medium.com/?source=post_page-----5f4f1e75a9f3--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5f4f1e75a9f3--------------------------------)
    ·8 min read·Mar 28, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: 'Watermarking images is an essential task for photographers, artists, and anyone
    who wants to protect their visual content from unauthorized use. In the Python
    world, there are many libraries that allow you to add watermarks to your images.
    In this article, we will compare three popular Python ways for watermarking images:
    **OpenCV**, **PIL** (Python Imaging Library), and **filestools**. For the last
    one you only need one line of code!'
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I will demo the image watermarking features using a photo that
    I took from Philip Island, Victoria, Australia. The original photo is here. Feel
    free to download it for your convenience.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eb3c9f8a925a5b880f69a9a38eb16b8b.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo captured by Author
  prefs: []
  type: TYPE_NORMAL
- en: 1\. OpenCV — Large tool for small task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/907a3fa4f5f07147a6edf904a232c5ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Lukas](https://pixabay.com/users/computerizer-4588466/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=2301646)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=2301646)
  prefs: []
  type: TYPE_NORMAL
- en: OpenCV is a comprehensive computer vision library that provides extensive image
    processing functions, including the ability to add text watermarks to images.
    While OpenCV is not specifically designed for adding watermarks, it still provides
    the flexibility and control to do so. However, using OpenCV to add watermarks
    can be challenging, especially for those who are not familiar with the library.
    Additionally, achieving image-based watermarks with OpenCV requires some manual
    processing.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, let’s have a look at how OpenCV can achieve this task for us.
  prefs: []
  type: TYPE_NORMAL
- en: Before everything, make sure that you need to install the library if you haven’t.
    Simply use `pip` as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To use OpenCV in Python code, we need to import the `cv2` module. In order to
    create this demo easier, I also want to import `matplotlib` so that I can display
    the image on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: OpenCV makes it very easy to read an image from a local path. All you need to
    do is use the `imread` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The following function is optional, I created this function to conveniently
    display the image in-line in a Jupyter Notebook environment. Feel free to use
    it if you want to check how the image object looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the above function, I added `is_cv` to specify if this image object is from
    OpenCV. We need this because we may want to reuse this function for the PIL library
    later on. The OpenCV image object use BGR by default instead of RGB. Therefore,
    we need to use the `cvtColor()` function to convert the encoding method.
  prefs: []
  type: TYPE_NORMAL
- en: After that, the `matplotlib` is used to display the image. In my case, I gave
    a specific size that fits my browser window. Also, we can turn the axis off since
    we are just displaying an image. The `imshow()` is the key function that displays
    the image object.
  prefs: []
  type: TYPE_NORMAL
- en: So, we can simply display the image by calling the function we just created.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/69bd3e991353b3400af2c9ce91e3b491.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let’s create a string which is the text that we want to add to the image
    as the watermark. Then, we need to configure the font. There are several OpenCV
    built-in font styles that can be chosen. The `font_scale` will decide the size
    of the watermark text later on. Lastly, we can create a tuple as the colour. The
    `(255, 255, 255)` will make the watermark text white colour.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The next thing is to decide the position of the watermark. The `getTextSize()`
    method will help us to get the size of the text. Meanwhile, we can get the dimension
    of the image from its `shape` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: However, it is necessary to emphasize that the image is “H x W” while the text
    size is “W x H”. Therefore, when we calculate the coordinate, we need to use the
    second item (width) from the image shape to subtract the first item (width) from
    the text size, and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f5d88d16ac7391063fb46e12877ae946.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, we can use the `putText()` method to add the watermark text to the
    image as follows, using all the parameters we defined above.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Let’s see the outcome. Succeed!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0c44dbe5e1c7d318a97064fba6d6134e.png)'
  prefs: []
  type: TYPE_IMG
- en: 2\. PIL — Streamlined Watermarking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/a0d396c6b5078160d9ddaaa050590029.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [an_photos](https://pixabay.com/users/an_photos-3160435/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=4503287)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=4503287)
  prefs: []
  type: TYPE_NORMAL
- en: PIL (Python Imaging Library) is a popular third-party library for image processing
    in Python that provides a simpler and more straightforward way to add watermarks
    to images than OpenCV. However, it still requires some steps to achieve watermarking.
    PIL is a good choice for those who need a reliable and relatively simple way to
    add watermarks to their images, without the need for extensive computer vision
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, before using the PIL library, we need to install it as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: For the PIL library, we need the following 3 modules.
  prefs: []
  type: TYPE_NORMAL
- en: '`Image` module: provides a class for representing and manipulating images in
    PIL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ImageDraw` module: provides a set of functions for drawing on images, including
    lines, rectangles, circles, and text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ImageFont` module: provides a class for loading and manipulating fonts in
    PIL, including setting the font size, style, and colour.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Then, we can use the `Image` module to open the image as follows. We can also
    reuse the `show_image()` method we defined previously to display the original
    image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/00ba9ffaf90bc88635687dc9dc80c157.png)'
  prefs: []
  type: TYPE_IMG
- en: To manipulate the image, we need to create an `ImageDraw` instance from the
    image object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The next step is a bit tricky. Unlike OpenCV has built-in font styles, PIL can
    only make use of a separate “.ttf” file. Although all the operating systems will
    have some font styles, we still need to know what are existing so that we can
    use them.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, I would suggest the easiest way that is to use the `matplotlib`
    to display the available fonts as follows, unless you have a specific font style
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Below are some available fonts in my case.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/58cd1e4b3cf11205f4fa63f8dd1bf6fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we can start to set the parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We can use the `ImageFont.truetype` to create a font with a certain size for
    the watermark. After that, we can get the text size from the `draw` object using
    the `textsize()` method. after that, the way of calculating the coordinate is
    the same as what we did in the OpenCV demo.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we can use the `text()` method of the `draw` object to add the watermark.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/288dcc6377fd3158577a17e65243552e.png)'
  prefs: []
  type: TYPE_IMG
- en: 3\. Filestools — A One-Line Wonder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/bbd8b08d6d12800a49d81978ec7a77b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Pexels](https://pixabay.com/users/pexels-2286921/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1868956)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1868956)
  prefs: []
  type: TYPE_NORMAL
- en: '`filestools` is a third-party Python library that provides a range of useful
    tools for file and image processing. It includes functions for displaying directory
    structures like the `tree` command in Linux, comparing file differences like the
    `diff` command, and adding watermarks to images using the `marker` command. Additionally,
    filestools can be used to convert curl requests to Python request code. Although
    the library was created by a Chinese developer, it is still widely accessible
    and usable by Python developers, despite some of the logs being in Chinese.'
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, to use the library, we can install it as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Then, let's add the watermark text to the image. we can import the `add_mark()`
    function from the `watermarker` module of the library as follows. Then, this function
    will do everything we need.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `out` argument is a name of a directory, so the watermarked image will be
    output into this directory. The `opacity` specifies the transparency of the watermark.
    We can certainly do this using OpenCV and PIL, but it requires more steps and
    complex logic. Apart from that, the watermark will also be rendered as a “pattern”
    on the image. So, we are allowed to give an `angle` of the text, as well as the
    `space` which defines the space between the text instances.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0755ad546074e415c748331411c76166.png)'
  prefs: []
  type: TYPE_IMG
- en: After running this function, it says “successfully saved”. Now, we can check
    our working directory. We should be able to find the new sub-directory with a
    watermarked image in it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/52a547e877c9d05b26169654efa1be0d.png)'
  prefs: []
  type: TYPE_IMG
- en: Here is the watermarked photo once we open it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b10d7dc986f9916b2c9f7cf7389390f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo captured by Author
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/441a2dfe734d4d873d628bf3d2168160.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Nikolett Emmert](https://pixabay.com/users/niki_emmert-13526667/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7666292)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7666292)
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, we compared three popular Python libraries for watermarking
    images: OpenCV, PIL (Python Imaging Library), and filestools. OpenCV is a comprehensive
    computer vision library that provides extensive image processing functions, while
    PIL provides a simpler and more straightforward way to add watermarks to images.
    However, both libraries require multiple steps and some manual processing to achieve
    watermarking. On the other hand, filestools provides a one-line solution for adding
    watermarks to images, making it the easiest and most streamlined library of the
    three. Overall, while OpenCV and PIL offer more advanced image processing capabilities,
    filestools is the clear winner in terms of ease of use for watermarking images.'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@qiuyujx/membership?source=post_page-----5f4f1e75a9f3--------------------------------)
    [## Join Medium with my referral link - Christopher Tao'
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading my articles! Buy me a coffee please if you don't mind
    :) Your membership fee supports thousands…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@qiuyujx/membership?source=post_page-----5f4f1e75a9f3--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '**If you feel my articles are helpful, please consider joining Medium Membership
    to support me and thousands of other writers! (Click the link above)**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Unless otherwise noted all images are by the author*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
