["```py\nstudents = [(\"Jack\", 168), (\"Zhou\", 172), (\"Emma\", 165), (\"Shan\", 170)]\n```", "```py\nimport dataclasses\n\n@dataclasses.dataclass\nclass Student:\n    name: str\n    height: int\n```", "```py\nstudents = [\n    Student(name=“Jack”, height=168), \n    Student(name=“Zhou”, height=172), \n    Student(name=“Emma”, height=165), \n    Student(name=“Shan”, height=170)\n]\n```", "```py\nstudents = [(\"Jack\", 168), (\"Zhou\", 172), (\"Emma\", 165), (\"Shan\", 170)]\nsorted_heights = sorted(students, key=lambda x: x[1])\n```", "```py\nsorted_heights = sorted(students, key=lambda x: x.height)\n```", "```py\ntallest_student = max(students, key=lambda x: x.height).name\n```", "```py\na = [3, 4, 5, 2, 1]\nmax_idx = max(enumerate(a), key=lambda x: x[1])[0]\n```", "```py\nstock_prices = [\n    (\"abc\", 95), (\"foo\", 20), (\"abc\", 100), \n    (\"abc\", 110), (\"foo\", 18), (\"foo\", 25)\n]\n```", "```py\nstock_price_dict = {}\nfor code, price in stock_prices:\n  if code not in stock_price_dict:\n    stock_price_dict[code] = [price]\n  else:\n    stock_price_dict[code].append(price)\n```", "```py\nfrom collections import defaultdict\n\nstock_price_dict = defaultdict(list)\nfor code, price in stock_prices:\n  stock_price_dict[code].append(price)\n```", "```py\nstudent_list = [[\"Jack\", \"Mary\"], [\"Zhou\", \"Shan\"], [\"Emma\", \"Deepti\"]]\nall_students = []\nfor students in student_list:\n  all_students.extend(students)\n```", "```py\nimport itertools\nall_students = list(itertools.chain.from_iterables(student_list))\n```", "```py\nstudents = [\n    Student(name=\"Jack\", height=168), \n    Student(name=\"Zhou\", height=172), \n    Student(name=\"Emma\", height=165), \n    Student(name=\"Shan\", height=170)\n]\n\nabove_170_students = list(itertools.dropwhile(lambda s: s.height<170, students))\n```", "```py\n# f1 unpacks arguments\ndef f1(a: str, b: str, c: str):\n    return \" \".join([a,b,c])\n\n# f1 packs all arguments to args\ndef f2(*args):\n    return \" \".join(args)\n```", "```py\nf1(\"I\", \"love\", \"Python\")\nf2(\"I\", \"love\", \"Python\")\nf2(\"I\", \"love\", \"Python\", \"and\", \"argument\", \"packing\")\n```", "```py\ndef f3(**kwargs):\n    return \" \".join([f\"{k}={v}\" for k,v in kwargs.items()])\n```", "```py\ndef f2(text_list: list[str]):\n    return \" \".join(text_list)\n\nf2((\"I\", \"love\", \"Python\", \"...\"))\n```", "```py\n[(\"a1\", \"b1\"), (\"a2\", \"b2\"), (\"a3\", \"b3\")] # Format 1\n<->\n[(\"a1\", \"a2\", \"a3\"), (\"b1\", \"b2\", \"b3\")] # Format 2\n```", "```py\nstudents = [(\"Jack\", 168), (\"Zhou\", 172), (\"Emma\": 165), (\"Shan\", 170)]\nsorted_students, _ = zip(*sorted(students, key=lambda x: x[1]))\n```"]