- en: 'Forecasting API: an Example with Django and Google Trends'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预测 API：一个使用 Django 和 Google Trends 的示例
- en: 原文：[https://towardsdatascience.com/forecasting-api-an-example-with-django-and-google-trends-9b55046bd578](https://towardsdatascience.com/forecasting-api-an-example-with-django-and-google-trends-9b55046bd578)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/forecasting-api-an-example-with-django-and-google-trends-9b55046bd578](https://towardsdatascience.com/forecasting-api-an-example-with-django-and-google-trends-9b55046bd578)
- en: Build a web application to predict the evolution of Google Trends.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建一个 web 应用程序以预测 Google Trends 的发展趋势。
- en: '[](https://medium.com/@davide.burba?source=post_page-----9b55046bd578--------------------------------)[![Davide
    Burba](../Images/a1ca3cf59c2b933021fa0d978e1af522.png)](https://medium.com/@davide.burba?source=post_page-----9b55046bd578--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9b55046bd578--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9b55046bd578--------------------------------)
    [Davide Burba](https://medium.com/@davide.burba?source=post_page-----9b55046bd578--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@davide.burba?source=post_page-----9b55046bd578--------------------------------)[![Davide
    Burba](../Images/a1ca3cf59c2b933021fa0d978e1af522.png)](https://medium.com/@davide.burba?source=post_page-----9b55046bd578--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9b55046bd578--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9b55046bd578--------------------------------)
    [Davide Burba](https://medium.com/@davide.burba?source=post_page-----9b55046bd578--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9b55046bd578--------------------------------)
    ·14 min read·Aug 1, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9b55046bd578--------------------------------)
    ·阅读时间 14 分钟·2023年8月1日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/8e462ec58405d206471214cd10c1d9ea.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8e462ec58405d206471214cd10c1d9ea.png)'
- en: “Google Trends”, by [Giulia Roggia](https://www.instagram.com/giulia_roggia__/).
    Used with permission.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: “Google Trends”，由 [Giulia Roggia](https://www.instagram.com/giulia_roggia__/)。经许可使用。
- en: '[Introduction](#7d44)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[简介](#7d44)'
- en: '[Django Models](#3fbd)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Django 模型](#3fbd)'
- en: '[Services](#68d5): [Data Sources](#7d4e), [Preprocessing](#cca9), [ML](#b276),
    [Tasks](#1912)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[服务](#68d5)：[数据源](#7d4e)，[预处理](#cca9)，[机器学习](#b276)，[任务](#1912)'
- en: '[Interaction Layer](#aeaa): [Serializers](#f468), [Views](#665f), [Endpoints](#e0f4)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[交互层](#aeaa)：[序列化器](#f468)，[视图](#665f)，[端点](#e0f4)'
- en: '[Conclusions](#476d)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[结论](#476d)'
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: What is Django?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 Django？
- en: '[Django](https://www.djangoproject.com) is a high-level Python web framework.
    It’s designed to be fast, secure, and scalable, making it a popular choice for
    developing robust web applications that are expected to grow in complexity. For
    an introduction to Django, you can check [this tutorial](https://docs.djangoproject.com/en/4.2/intro/tutorial01/).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[Django](https://www.djangoproject.com) 是一个高级 Python 网络框架。它设计得快速、安全、可扩展，因此是开发预期会增长复杂性的强大
    web 应用程序的热门选择。有关 Django 的介绍，请参阅 [这个教程](https://docs.djangoproject.com/en/4.2/intro/tutorial01/)。'
- en: In this example we are going to use [Django Rest Framework](https://www.django-rest-framework.org)
    (DRF), which is an extension of Django that facilitates the development of [REST
    APIs](https://www.redhat.com/en/topics/api/what-is-a-rest-api). For an introduction
    to DRF, you can check [this tutorial](https://www.django-rest-framework.org/tutorial/quickstart/).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用 [Django Rest Framework](https://www.django-rest-framework.org)（DRF），这是
    Django 的一个扩展，旨在简化 [REST API](https://www.redhat.com/en/topics/api/what-is-a-rest-api)
    的开发。有关 DRF 的介绍，请参阅 [这个教程](https://www.django-rest-framework.org/tutorial/quickstart/)。
- en: Requirements
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需求
- en: 'We’ll start to design our application by listing out some hypothetical requirements:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过列出一些假设的需求来开始设计我们的应用：
- en: '**Overall goal**: Implement a system to forecast future time-series values.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**总体目标**：实现一个系统来预测未来时间序列的值。'
- en: '**Data**: [Google Trends](https://trends.google.com/trends/) at weekly frequency
    for both features and targets, likely to be extended in the future. Data should
    be downloaded on demand.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据**： [Google Trends](https://trends.google.com/trends/) 的周频数据，包含特征和目标，未来可能会扩展。数据应根据需求下载。'
- en: '**Preprocessing**: Use only lagged values.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预处理**：仅使用滞后值。'
- en: '**ML Model**: A global LightGBM model (check [this article](https://medium.com/towards-data-science/local-vs-global-forecasting-what-you-need-to-know-1cc29e66cae0)
    if you want to know more about global vs local models).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机器学习模型**：一个全球 LightGBM 模型（如果你想了解更多关于全球与本地模型的区别，可以查看 [这篇文章](https://medium.com/towards-data-science/local-vs-global-forecasting-what-you-need-to-know-1cc29e66cae0)）。'
- en: '**Inference**: Generate online predictions (as opposed to batch ones), but
    without having to provide input features.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推断**：生成在线预测（与批量预测相对），但不需要提供输入特征。'
- en: '*The complete code used in this tutorial is available* [*here*](https://github.com/davide-burba/code-collection/)*.*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*本教程中使用的完整代码可在* [*这里*](https://github.com/davide-burba/code-collection/)*获取*。'
- en: Set up the Environment
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置环境
- en: Let’s start by listing the needed dependencies.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从列出所需的依赖项开始。
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We are gonna use [poetry](https://python-poetry.org) to manage the dependencies,
    and [Docker](https://www.docker.com) to containerize the project. You can check
    poetry and docker files used in this project [here](https://github.com/davide-burba/code-collection/tree/main/examples/api-example-django).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用[poetry](https://python-poetry.org)来管理依赖项，使用[Docker](https://www.docker.com)来容器化项目。你可以在[这里](https://github.com/davide-burba/code-collection/tree/main/examples/api-example-django)查看本项目中使用的poetry和docker文件。
- en: Quickstart
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速开始
- en: 'If you want to jump ahead and start playing with the app you can run the following
    commands:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想跳过前面的内容，直接开始使用应用程序，你可以运行以下命令：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: and connect to `localhost:8000/gtrends`!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 并连接到`localhost:8000/gtrends`！
- en: Django Models
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django模型
- en: In this section we list the Django models used in the example.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们列出了示例中使用的Django模型。
- en: Time-series
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间序列
- en: 'For a forecasting system, we have to handle time-series data. Normally we would
    need only two models: one to identify each time-series, and one to store its values.
    But, since **historical data for Google Trends might change** from one day to
    another due to normalization, we also need to version the data, which results
    in an additional model.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个预测系统，我们需要处理时间序列数据。通常我们只需要两个模型：一个用于识别每个时间序列，另一个用于存储其值。但由于**Google Trends的历史数据可能会因为归一化而每天发生变化**，我们还需要对数据进行版本控制，这会导致额外的一个模型。
- en: We also create a model that lists the different data sources (only Google Trends
    at the moment).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了一个模型，用于列出不同的数据源（目前只有Google Trends）。
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Configurations
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置
- en: To train a supervised model, we need a set of features and targets. We can store
    such information in a “data configuration”. This is done with the following models.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要训练一个监督模型，我们需要一组特征和目标。我们可以将这些信息存储在一个“数据配置”中。这个过程通过以下模型完成。
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Similarly, we need to store the configurations for preprocessing and for Machine
    Learning (ML) models. To keep it simple, we just store these in a `JSONField`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们需要存储预处理和机器学习（ML）模型的配置。为了简化，我们将这些存储在一个`JSONField`中：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: ML Models
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ML模型
- en: Here we make a distinction between an ML configuration and an ML model. While
    the ML configuration holds the data about the LightGBM parameters, the ML model
    holds all the information about data, preprocessing, and ML configuration.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们区分了ML配置和ML模型。ML配置包含关于LightGBM参数的数据，而ML模型包含所有关于数据、预处理和ML配置的信息。
- en: 'An ML model can be estimated on different datasets (due to new data coming
    in), therefore we need to version ML models as well. This results in the two following
    models:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一个ML模型可以在不同的数据集上进行估计（由于新数据的到来），因此我们还需要对ML模型进行版本控制。这会导致以下两个模型：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`MLModelVersion` holds the link to the LightGBM artifacts in `ml_file`, and
    the info about the data it was trained on in `metadata`. The artifacts are stored
    in the location specified in the django settings module: it could be e.g. a folder
    in the filesystem or an S3 bucket in the cloud.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`MLModelVersion`保存了指向LightGBM工件的链接在`ml_file`中，以及关于它所训练数据的信息在`metadata`中。工件存储在django设置模块中指定的位置：例如，可能是文件系统中的一个文件夹或云中的一个S3桶。'
- en: Services
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务
- en: In this section we describe the services which contain the application logic.
    According to the [Django-StyleGuide](https://github.com/HackSoftware/Django-Styleguide/tree/master#overview),
    it’s a best practice to keep it separate from the views.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们描述了包含应用逻辑的服务。根据[Django-StyleGuide](https://github.com/HackSoftware/Django-Styleguide/tree/master#overview)，将其与视图分开是最佳实践。
- en: Data Sources
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据源
- en: 'Since the data sources are expected to grow in the future, we are gonna use
    a flexible design:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据源预计将来会增长，我们将使用灵活的设计：
- en: An abstract `DataSource` class defining an interface.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个抽象的`DataSource`类，定义了一个接口。
- en: A `GTrendSource` class inheriting from `DataSource` and implementing the details
    to download Google Trends data.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`GTrendSource`类，继承自`DataSource`并实现下载Google Trends数据的细节。
- en: A `download_data` factory to build `DataSource` children.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`download_data`工厂用来构建`DataSource`子类。
- en: 'This results in the following module:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生以下模块：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Preprocessing
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预处理
- en: Once data is loaded, we want to preprocess it to later train a model or infer
    future values. Let’s start by defining an interface class.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据加载完成，我们希望预处理数据以便后续训练模型或推断未来值。让我们从定义一个接口类开始。
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: At the moment we only consider lagged values for feature engineering. Let’s
    create an helper function that implements the lags logic.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们只考虑用于特征工程的滞后值。让我们创建一个实现滞后逻辑的辅助函数。
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now we have to create a class that implements the abstract methods of the base
    class. Let’s start by defining its attributes.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建一个实现基类抽象方法的类。让我们首先定义它的属性。
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that the target itself can be used as a feature. For targets used as features,
    we assign a common prefix “target”. This might be beneficial when there are multiple
    targets, since they will be stacked together in the same columns and therefore
    reducing the amount of features.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，目标本身可以作为特征使用。对于作为特征使用的目标，我们分配一个通用前缀“target”。当有多个目标时，这可能是有益的，因为它们将堆叠在相同的列中，从而减少特征的数量。
- en: 'Here’s the implementation to build lagged targets and features:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是构建滞后目标和特征的实现：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can now wrap them in a `build_x` method:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将它们封装在一个`build_x`方法中：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To build the target, we just have to shift it by `horizon` time-steps:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建目标，我们只需将其移动`horizon`时间步：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can now provide an implementation for the required abstract methods:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以为所需的抽象方法提供实现：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: ML
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ML
- en: Let’s define a very simple module for ML, providing two functions to dump and
    load a LightGBM model (if you are wondering why we chose to use LightGBM, you
    can check [this article](https://medium.com/towards-data-science/gradient-boosting-a-silver-bullet-in-forecasting-5820ba7182fd)).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个非常简单的ML模块，提供两个函数用于转储和加载LightGBM模型（如果你想知道我们为何选择使用LightGBM，你可以查看[这篇文章](https://medium.com/towards-data-science/gradient-boosting-a-silver-bullet-in-forecasting-5820ba7182fd)）。
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Tasks
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务
- en: Before jumping into defining the api interface, let’s define some `tasks` that
    will be used in the endpoints.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义API接口之前，让我们定义一些将在端点中使用的`tasks`。
- en: '**Update time-series**'
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**更新时间序列**'
- en: 'The first thing that we need is to store some time-series data. We don’t want
    to clutter the database with a new version every time we download a new data-point,
    because it would grow very quickly while having lots of duplicate data. Instead,
    we want to compare the newly downloaded data with the latest version, and **create
    a new version only if the data history doesn’t match**. This is done in the following
    snippet:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要存储一些时间序列数据。我们不希望每次下载一个新的数据点时都增加一个新版本到数据库中，因为这样会快速增长并产生大量重复数据。相反，我们希望将新下载的数据与最新版本进行比较，**只有当数据历史不匹配时才创建新版本**。这是在以下代码片段中完成的：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can also add a wrapper to update all the time-series in the database for
    convenience:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以添加一个包装器，以方便地更新数据库中的所有时间序列：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Load data
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载数据
- en: Now that we have some time-series data stored, we want to be able to load it
    in order to preprocess it.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经存储了一些时间序列数据，我们希望能够加载它以便进行预处理。
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Preprocess
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预处理
- en: Let’s wrap up preprocessing in a couple of tasks. For simplicity, we directly
    use the `Preprocessor` class; if later on we want to add another preprocessing
    class, we can use the same factory pattern used for data sources.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将预处理封装成几个任务。为了简化，我们直接使用`Preprocessor`类；如果以后想添加另一个预处理类，我们可以使用与数据源相同的工厂模式。
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Train
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练
- en: Now that we have our preprocessed data, we can finally train our LightGBM model.
    Note that this is the simpler step!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了预处理的数据，我们终于可以训练我们的LightGBM模型了。请注意，这是更简单的步骤！
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Store ML model
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储ML模型
- en: We can now create a task to save the LightGBM engine to create a new `MLModelVersion`.
    Note that we dump the engine to a temporary file first. This is just a trick in
    order to not hardcode the storage type in the task, and instead handle it dynamically
    with Django settings. For more information on this subject you can check the [FileField
    documentation](https://docs.djangoproject.com/en/4.2/ref/models/fields/#filefield).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个任务，将LightGBM引擎保存以创建一个新的`MLModelVersion`。注意，我们首先将引擎转储到一个临时文件中。这只是一个技巧，以避免在任务中硬编码存储类型，而是通过Django设置动态处理。有关此主题的更多信息，请查看[FileField文档](https://docs.djangoproject.com/en/4.2/ref/models/fields/#filefield)。
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Pipelines
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道
- en: We can now wrap up the training and inference pipelines. Since these pipelines
    are quite fast, it’s acceptable to simply wrap them in a function. However, in
    case of long running pipelines or high traffic, it’s preferable to use a task
    manager such as [AirFlow](https://airflow.apache.org) or [Celery](https://docs.celeryq.dev/en/stable/index.html).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以完成训练和推断管道。由于这些管道速度较快，可以将它们简单地封装在一个函数中。然而，对于长时间运行的管道或高流量的情况，建议使用任务管理器，如
    [AirFlow](https://airflow.apache.org) 或 [Celery](https://docs.celeryq.dev/en/stable/index.html)。
- en: 'Here’s the training pipeline:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是训练管道：
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'And here’ the inference pipeline:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是推断管道：
- en: '[PRE22]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Interaction layer
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互层
- en: Serializers, Views, and Endpoints represent the “interaction” layer of the application,
    which is the most external one and establishes how a user will interact with the
    app.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 序列化器、视图和端点代表应用程序的“交互”层，这是最外部的层，并定义了用户如何与应用程序交互。
- en: Serializers
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序列化器
- en: 'Serializers are responsible to serialize and de-serialize data. Here’s an example
    of trivial one:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 序列化器负责序列化和反序列化数据。以下是一个简单的示例：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: To keep it brief, we’ll only discuss the non-trivial ones.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，我们只讨论那些非平凡的视图。
- en: Time-series
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间序列
- en: For time-series, we override the default create method to also download a first
    version when we create a `TimeSeries` object.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对于时间序列，我们重写默认的创建方法，以便在创建 `TimeSeries` 对象时下载第一个版本。
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Data Configuration
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据配置
- en: For the data configuration, we add the link to features and targets in order
    to later create a data configuration from a single endpoint.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据配置，我们添加了特征和目标的链接，以便以后从单个端点创建数据配置。
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Preprocessing
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预处理
- en: 'Let’s add a validation step on the preprocessing configuration to check that
    we have the expected parameters:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在预处理配置上添加一个验证步骤，以检查是否具有预期的参数：
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: ML Configuration
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ML 配置
- en: 'Similarly, let’s check that the parameters provided for the ML configuration
    are valid:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，让我们检查为 ML 配置提供的参数是否有效：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Views
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视图
- en: Let us now define how the user will interact with the api. We are gonna define
    some actions to trigger the data retrieval or the ML models training. Again, this
    is acceptable because these actions are very quick to run, and we want to keep
    things simple at the beginning of the project (check [YAGNI](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it)
    if you are interested in this philosophy). However, as the project grows it might
    become necessary to make these actions asynchronous and use a task manager.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们定义用户如何与 API 交互。我们将定义一些动作来触发数据检索或 ML 模型训练。同样，这种做法是可以接受的，因为这些动作执行速度很快，并且我们希望在项目开始时保持简单（如果你对这种哲学感兴趣，可以查看
    [YAGNI](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it)）。然而，随着项目的增长，可能需要将这些动作异步化并使用任务管理器。
- en: Note that, to preserve versioning, we don’t allow `put` and `patch` methods.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，为了保持版本控制，我们不允许使用 `put` 和 `patch` 方法。
- en: Timeseries
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间序列
- en: 'Let’s establish a view for time-series. We want to be able to:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为时间序列建立一个视图。我们希望能够：
- en: Create time-series and list them
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建时间序列并列出它们
- en: Get the values of the latest version
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取最新版本的值
- en: Update values
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新值
- en: '[PRE28]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We also want to list the different versions for one timeseries, and check their
    values.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望列出一个时间序列的不同版本，并检查其值。
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Configurations
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置
- en: We want to list, add, and delete configurations. Their views are straightforward.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望列出、添加和删除配置。它们的视图是直接的。
- en: '[PRE30]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: ML Model
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ML 模型
- en: For ML models, we want to be able to create and list them, and to perform training
    and inference.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 ML 模型，我们希望能够创建和列出它们，并执行训练和推断。
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We also want to list all the versions for a specific `MLModel`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望列出特定 `MLModel` 的所有版本。
- en: '[PRE32]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Endpoints
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端点
- en: 'Finally, we can link the views that we just created to a set of endpoints:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以将刚创建的视图链接到一组端点：
- en: '`timeseries` for timeseries'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timeseries` 用于时间序列'
- en: '`timeseries/<id>/versions` for timeseries versions'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timeseries/<id>/versions` 用于时间序列版本'
- en: '`model-config`, `data-config`, `preprocessing-config` for configuration objects'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model-config`、`data-config`、`preprocessing-config` 用于配置对象'
- en: '`model` for ML models'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model` 用于 ML 模型'
- en: '`model/<id>/versions` for ML model versions'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model/<id>/versions` 用于 ML 模型版本'
- en: 'This is done in the following module:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这在以下模块中完成：
- en: '[PRE33]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Note that we don’t have to define endpoints for data retrieval or training,
    since these are automatically added as “extra-actions”. For instance, the endpoint
    to train a model is `model/<id>/train`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们不需要为数据检索或训练定义端点，因为这些会自动添加为“额外操作”。例如，训练模型的端点是 `model/<id>/train`。
- en: Conclusions
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We saw an example implementation of a forecasting system in Django. You can
    now play around with it! To get started, follow the instructions at the beginning
    of the article, so you can connect to `localhost:8000/gtrends` and play with the
    app.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Django 中看到了一个预测系统的示例实现。你现在可以开始玩玩这个系统了！要开始，请按照文章开头的说明进行操作，以便你可以连接到 `localhost:8000/gtrends`
    并玩转这个应用。
- en: 'Once you finished the setup and trained a model, you should see something like
    this (here we are predicting the term *"forecasting"*):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 完成设置并训练好模型后，你应该会看到类似于这样的结果（这里我们预测的是术语 *"forecasting"*）：
- en: '![](../Images/d7b745b45f5231f07e285bda36f958c1.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d7b745b45f5231f07e285bda36f958c1.png)'
- en: 'And when you predict future values, you should see something like this:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当你预测未来值时，你应该会看到类似这样的结果：
- en: '![](../Images/682d156c586729c82d906a85f166bd52.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/682d156c586729c82d906a85f166bd52.png)'
- en: That’s it, you can now implement variations based on your needs!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些，你现在可以根据需要实现不同的变体！
- en: 'Here’s a non-exhaustive list of possible improvements:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是可能改进的非详尽列表：
- en: Implement task scheduling
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现任务调度
- en: Add more data sources
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加更多数据源
- en: Add a [backtesting](https://medium.com/towards-data-science/why-backtesting-matters-and-how-to-do-it-right-731fb9624a)
    endpoint
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个 [回测](https://medium.com/towards-data-science/why-backtesting-matters-and-how-to-do-it-right-731fb9624a)
    端点
- en: Add more preprocessing options
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加更多预处理选项
- en: Integrate [MLFlow](https://mlflow.org/) for tracking and versioning
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成 [MLFlow](https://mlflow.org/) 用于跟踪和版本控制
- en: Allow to train multiple horizons with one model
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许用一个模型训练多个预测视角
- en: Setup a proper web server (needed for production)
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置适当的网络服务器（生产环境所需）
- en: '*Enjoyed this article?* [*Checkout my other ones*](https://medium.com/@davide.burba)
    *and follow me for more!* [*Click here*](https://medium.com/@davide.burba/membership)
    *to read unlimited articles and support me at no additional cost for you*❤️'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '*喜欢这篇文章吗？* [*查看我的其他文章*](https://medium.com/@davide.burba) *并关注我以获取更多内容！* [*点击这里*](https://medium.com/@davide.burba/membership)
    *以无限阅读文章，并且对你没有额外费用的情况下支持我*❤️'
