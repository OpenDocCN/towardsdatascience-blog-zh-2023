- en: Python sorted() Function Explained
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/python-sorted-function-explained-8e46bc002147](https://towardsdatascience.com/python-sorted-function-explained-8e46bc002147)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this article we will explore how to use the Python **sorted()** function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://pyshark.medium.com/?source=post_page-----8e46bc002147--------------------------------)[![Misha
    Sv](../Images/d3f9605e2c7020246ff793869728e218.png)](https://pyshark.medium.com/?source=post_page-----8e46bc002147--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8e46bc002147--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8e46bc002147--------------------------------)
    [Misha Sv](https://pyshark.medium.com/?source=post_page-----8e46bc002147--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8e46bc002147--------------------------------)
    ·4 min read·Jan 16, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5fda325ced75dc2866b7414161b8a2b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Andre Taissin](https://unsplash.com/fr/@andretaissin?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/hOwcob_3dpc?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: '**Table of Contents**'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic sorting using sorted()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using key function with sorted()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sort custom objects using sorted()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python **sorted()** function is a built-in function for sorting iterables.
  prefs: []
  type: TYPE_NORMAL
- en: It uses timsort as its sorting algorithm, which is derived from merge sort and
    insertion sort.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax of the Python **sorted()** function is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'where:'
  prefs: []
  type: TYPE_NORMAL
- en: '*iterable* — can be any iterable Python object like string, tuple, list, set,
    [dictionary](https://pyshark.com/python-dictionary-data-structure/), and others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*key* — optional argument that allows to add a function (for example [lambda
    function](https://pyshark.com/python-lambda-functions/)) as a key for sorting.
    Defaults to *None*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*reverse* — optional argument that allows to reverse the iterable (to sort
    in descending order) if set to *True*. Defaults to *False*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **sorted()** function process is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Basic sorting using sorted()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many applications of the **sorted()** function, so let’s take at a
    few basic examples.
  prefs: []
  type: TYPE_NORMAL
- en: Sort a list of numbers in ascending order
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The simplest example is to sort a [list](https://pyshark.com/python-list-data-structure/)
    of numbers in ascending order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Sort a list of numbers in descending order
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to the previous example, we will be sorting a list of numbers, but
    now in descending order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Sort a list of strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python **sorted()** function can also sort lists with string elements in it.
  prefs: []
  type: TYPE_NORMAL
- en: The procedure with sorting numbers is very simple and intuitive, and it can
    be extended to sorting strings.
  prefs: []
  type: TYPE_NORMAL
- en: Python **sorted()** function sorts strings based on the first character of each
    string (for example, *‘apple’* comes before *‘orange’* since *‘a’* is before *‘o’*
    in the alphabet).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the list of strings has been sorted in alphabetical (ascending)
    order based on the first character of the string.
  prefs: []
  type: TYPE_NORMAL
- en: You can also sort a list of strings in descending order by setting the optional
    **reverse** argument to *True*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** you can extend the above functionality to other iterables, like [tuples](https://pyshark.com/python-tuple-data-structure/),
    [sets](https://pyshark.com/everything-about-python-set-data-structure/), and others.'
  prefs: []
  type: TYPE_NORMAL
- en: Using key function with sorted()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more complex sorting tasks we can add the usage of *key* function in **sorted()**
    which will act as a key for sorting.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways of using a key function:'
  prefs: []
  type: TYPE_NORMAL
- en: Using lambda function as *key* function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using custom function as *key* function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using lambda function with sorted()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s create some sample list with words:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now, in this example, we would like to sort the list based on the length of
    the elements, meaning that the words will be ordered from shortest to longest
    based on the number of characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can imagine, we will have to use the **len()** function to calculate
    the length of each element, and using a lambda function we can use it as a key
    function for sorting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Using custom function with sorted()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s reuse the same list of words from the previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now, we would like to perform the same sorting based on length of each element
    in the list, but using a custom function to calculate the length of each word.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can define a simple function to calculate the length of a word, and pass
    it into **sorted()** as a *key* function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: which is the same result as when we used the **len()** with lambda function
    as a *key* function for **sorted()**.
  prefs: []
  type: TYPE_NORMAL
- en: Sort custom objects using sorted()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The functionality of Python **sorted()** function can be extended to custom
    objects (as long as we are sorting iterables).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s create a custom class **Person** with two attributes **name**
    and **age**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This class will create a list of tuples with information of each person:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: As you can see this is now a list of tuples, which is a Python iterable, and
    can be sorted using **sorted()** function.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we would like to sort the list based on **age** attribute
    of each person:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article we explored how to use [Python sorted() function](https://docs.python.org/3/howto/sorting.html).
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know the basic functionality, you can practice using it with other
    iterable [data structures](https://pyshark.com/category/data-structures/) for
    more complex use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to leave comments below if you have any questions or have suggestions
    for some edits and check out more of my [Python Functions](https://pyshark.com/category/python-functions/)
    tutorials.
  prefs: []
  type: TYPE_NORMAL
- en: '*Originally published at* [*https://pyshark.com*](https://pyshark.com/python-sorted-function/)
    *on January 16, 2023.*'
  prefs: []
  type: TYPE_NORMAL
