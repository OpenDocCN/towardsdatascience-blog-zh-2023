- en: 'Data Version Control for the Modern Data Scientist: 7 DVC Concepts You Can’t
    Ignore'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代数据科学家的数据版本控制：你不能忽视的 7 个 DVC 概念
- en: 原文：[https://towardsdatascience.com/data-version-control-for-the-modern-data-scientist-7-dvc-concepts-you-cant-ignore-bb2433ccec88](https://towardsdatascience.com/data-version-control-for-the-modern-data-scientist-7-dvc-concepts-you-cant-ignore-bb2433ccec88)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/data-version-control-for-the-modern-data-scientist-7-dvc-concepts-you-cant-ignore-bb2433ccec88](https://towardsdatascience.com/data-version-control-for-the-modern-data-scientist-7-dvc-concepts-you-cant-ignore-bb2433ccec88)
- en: A deeply illustrated guide to an essential practice in data science
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据科学中一种必备实践的详细插图指南
- en: '[](https://ibexorigin.medium.com/?source=post_page-----bb2433ccec88--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----bb2433ccec88--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bb2433ccec88--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bb2433ccec88--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----bb2433ccec88--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ibexorigin.medium.com/?source=post_page-----bb2433ccec88--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----bb2433ccec88--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bb2433ccec88--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bb2433ccec88--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----bb2433ccec88--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bb2433ccec88--------------------------------)
    ·11 min read·May 25, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bb2433ccec88--------------------------------)
    ·11分钟阅读·2023年5月25日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/d9bfb2bb06fd41ecd7191c98085578d9.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d9bfb2bb06fd41ecd7191c98085578d9.png)'
- en: Image by me with Midjourney.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我使用 Midjourney 制作。
- en: May 31, 2020
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2020年5月31日
- en: What a beautiful day! There I was, listening to **Data Beats FM** in my car
    when this advertisement caught my attention.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 多么美好的一天啊！我正坐在车里听着**Data Beats FM**，这时一个广告引起了我的注意。
- en: Data scientists have envied software engineers for a loooong time. While pure
    software engineers, let’s playfully call them evil programming wizards, glide
    through code commits and branches with trusty Git, we often find ourselves grappling
    with monstrous datasets and ML models that leave Git gasping for air. But fear
    not, there comes DVC in shining armor…
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 数据科学家们对软件工程师羡慕已久。虽然纯粹的软件工程师——我们戏称他们为邪恶的编程巫师——在可信赖的 Git 下轻松处理代码提交和分支，我们却常常不得不与巨大的数据集和
    ML 模型搏斗，让 Git 无法招架。但不用担心，DVC 以闪亮的铠甲出现了…
- en: I cranked up the volume, with a curious expression on my face.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我把音量调高，脸上带着好奇的表情。
- en: DVC, with its exceptional capabilities, is here to liberate tens of thousands
    of data scientists from the clutches of Git’s struggle with managing those massive
    files that seem to defy every attempt at efficient versioning (Git-LFS just plain
    sucked).
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: DVC 以其卓越的能力，解放了成千上万的数据科学家摆脱 Git 在处理那些似乎无论如何都无法有效版本控制的大文件时的挣扎（Git-LFS 简直糟糕透了）。
- en: I was smiling at this point.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我此时面带微笑。
- en: It is time to bid adieu to the days of frantically deleting and re-uploading
    data to avoid Git’s size limitations. With DVC, we can finally reclaim our sanity
    and confidently march forward in our data-driven endeavors.
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在是告别疯狂删除和重新上传数据以规避 Git 大小限制的日子的时候了。有了 DVC，我们终于可以恢复理智，自信地推进我们的数据驱动工作。
- en: You could’ve counted all my teeth.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你本可以数清我的所有牙齿。
- en: Check it out for free at…
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 免费查看请访问…
- en: I got into a tunnel and lost the signal. Almost swearing with joy, I pulled
    over as soon as the tunnel ended and pulled out the traveling MacBook. I punched
    DVC into the search bar and…
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我进入了隧道，信号丢失。几乎喜极而泣，我在隧道出口处立即停车，拿出旅行中的 MacBook。我在搜索框中输入 DVC 并…
- en: This was taken from an imaginary data scientist’s imaginary diary. The entry
    goes on for a while, raving about the delights of data version control with DVC
    and how it skillfully fixes the Git-sucking-at-large-files problem.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这段文字摘自一位虚构数据科学家的虚构日记。日记中详细描述了使用 DVC 进行数据版本控制的乐趣，以及它如何巧妙地解决了 Git 在处理大文件时的难题。
- en: I decided to skip that part and show the rest, where our imaginary friend explains
    eight of the most important DVC concepts that no self-respecting data scientist
    can afford to ignore. I have to say, the explanations are wonderful :)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定跳过那部分，展示其余内容，其中我们的虚拟朋友解释了八个最重要的 DVC 概念，没有自尊的数据科学家是无法忽视的。我必须说，这些解释非常精彩 :)
- en: Let’s read on.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续阅读。
- en: 0\. DVC as a version control system
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0\. DVC 作为版本控制系统
- en: DVC is not a version control system when you get into it. Instead, it mimics
    Git’s functionality for large files while operating as a metadata management tool
    that runs alongside Git.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始使用 DVC 时，它并不是一个版本控制系统。相反，它模仿 Git 对大文件的功能，同时作为一个与 Git 并行运行的元数据管理工具。
- en: Rather than directly attacking massive datasets and ML models (large assets),
    DVC generates metadata file placeholders for them. These lightweight files allow
    for pseudo-tracking of the assets when you begin tracking them with Git.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: DVC 并不是直接处理大量数据集和 ML 模型（大型资产），而是为它们生成元数据文件占位符。这些轻量级文件允许你在开始用 Git 跟踪它们时进行伪跟踪。
- en: For instance, let’s say you’ve just written a script to apply image augmentation,
    thereby increasing the number of samples in your image dataset.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，假设你刚刚编写了一个脚本来应用图像增强，从而增加了图像数据集中的样本数量。
- en: As DVC has created a placeholder file for the folder containing your images,
    it promptly detects the operation and updates the metadata file accordingly. Subsequently,
    since Git was tracking that metadata file, it also recognizes the change.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 DVC 已经为包含你的图像的文件夹创建了一个占位符文件，它会及时检测到操作并相应地更新元数据文件。随后，由于 Git 正在跟踪那个元数据文件，它也会识别到这个变化。
- en: In this way, modifications to large files can become part of your Git commits
    and history without causing Git to crash and burn.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，大文件的修改可以成为你的 Git 提交和历史的一部分，而不会导致 Git 崩溃。
- en: More on this in a bit.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后会详细讲解。
- en: 1\. Tracked and untracked files
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 跟踪和未跟踪文件
- en: When [initializing DVC](https://dvc.org/doc/start) within a Git-tracked repository,
    the files can be categorized into three categories.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当在一个 Git 跟踪的仓库中[初始化 DVC](https://dvc.org/doc/start)时，文件可以被分类为三类。
- en: Category 0 comprises files that are solely tracked by Git using the `git add
    filename` command. DVC has nothing to do with them. Typically, they include source
    code files (`.py`, `.jl`, `.R`, etc.), configuration files (`.ini`, `.cfg`, `.yaml`,
    `.json`), documentation files (Markdown, READMEs, and other text formats), or
    test files.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 类别 0 包含仅由 Git 使用 `git add filename` 命令跟踪的文件。DVC 与这些文件无关。通常，它们包括源代码文件（`.py`、`.jl`、`.R`
    等）、配置文件（`.ini`、`.cfg`、`.yaml`、`.json`）、文档文件（Markdown、README 和其他文本格式）或测试文件。
- en: '![](../Images/404acaa2c4f8c3fe0ec3e765c22ee939.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/404acaa2c4f8c3fe0ec3e765c22ee939.png)'
- en: Image by me
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供
- en: Category 1 encompasses files listed in the `.gitignore` file. These are the
    ones that are never, ever tracked by Git.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 类别 1 包括 `.gitignore` 文件中列出的文件。这些是 Git 永远不会跟踪的文件。
- en: In category 2, we have DVC-tracked files, which are the results of using `dvc
    add asset` commands.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在类别 2 中，我们有 DVC 跟踪的文件，这些文件是使用 `dvc add asset` 命令的结果。
- en: As an example, let’s consider a model file named `tuned.joblib` and an image
    dataset stored within the `images` folder. Once you execute `dvc add images tuned.joblib`,
    both the file and the folder are placed under DVC-watch and added to the `.gitignore`
    file, preventing accidental Git tracking.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个例子，我们考虑一个名为 `tuned.joblib` 的模型文件和存储在 `images` 文件夹中的图像数据集。一旦你执行 `dvc add
    images tuned.joblib`，该文件和文件夹都会被 DVC 监控，并添加到 `.gitignore` 文件中，以防止意外的 Git 跟踪。
- en: 'Additionally, two new files with the `.dvc` extension will be generated: `images.dvc`
    and `tuned.joblib.dvc`.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还会生成两个 `.dvc` 扩展名的新文件：`images.dvc` 和 `tuned.joblib.dvc`。
- en: These lightweight metadata files fall under category 0, which means you should
    track them with Git using the command `git add images.dvc tuned.joblib.dvc`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些轻量级的元数据文件属于类别 0，这意味着你应该使用 `git add images.dvc tuned.joblib.dvc` 命令跟踪它们。
- en: Typical files found in category 2 include notebooks (which may contain visuals
    and tables, potentially resulting in large sizes), datasets (such as images, videos,
    audios, CSVs, parquets, databases, etc.), and ML models.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 类别 2 中典型的文件包括笔记本（可能包含视觉和表格，导致文件较大）、数据集（如图像、视频、音频、CSV、parquets、数据库等）和 ML 模型。
- en: Lastly, in category 3, we have the optional `.dvcignore` files. Similar to `.gitignore`
    files, you can use them to specify files that DVC should never track.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在类别 3 中，我们有可选的 `.dvcignore` 文件。类似于 `.gitignore` 文件，你可以使用它们来指定 DVC 永远不应该跟踪的文件。
- en: 2\. `.dvc` files
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. `.dvc` 文件
- en: '`.dvc` files use [the YAML 1.2](https://yaml.org/) file format, which is a
    human-friendly data serialization format for all programming languages.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`.dvc`文件使用[ YAML 1.2](https://yaml.org/)文件格式，这是一种对所有编程语言友好的数据序列化格式。'
- en: As I mention above, DVC creates one lightweight `.dvc` file for each file or
    folder tracked with DVC.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，DVC为每个用DVC跟踪的文件或文件夹创建一个轻量级的`.dvc`文件。
- en: 'When you take a peek inside the contents of `images.dvc`, you will see the
    following entries:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当你查看`images.dvc`的内容时，你将看到以下条目：
- en: '![](../Images/41acd5ee7cce06f660540504b6ff2569.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/41acd5ee7cce06f660540504b6ff2569.png)'
- en: Image by me
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供
- en: The most interesting part is `md5`. MD5 is a popular hashing function. It takes
    a file of arbitrary size and uses its contents to produce a string of characters
    of fixed length (32 characters in our case).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最有趣的部分是`md5`。MD5是一种流行的哈希函数。它接受任意大小的文件，并使用其内容生成一个固定长度的字符字符串（在我们的例子中是32个字符）。
- en: These characters can seem random, but they will always be the same if you rerun
    the hashing function on the file however many times. But, even if a single bit
    is changed in the file, the resulting hash will be completely different.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字符可能看起来随机，但如果你多次重新运行哈希函数在文件上，它们将始终保持相同。但是，即使文件中的一个比特发生变化，生成的哈希值也会完全不同。
- en: DVC uses these hashes (also called checksums) to differentiate whether two files
    are identical, completely different, or different versions of the same file.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: DVC使用这些哈希（也称为校验和）来区分两个文件是否相同、完全不同或是同一文件的不同版本。
- en: 'For example, if I add a new fake image to the `images` folder, the resulting
    MD5 hash inside `images.dvc` will be different:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我将一个新的假图片添加到`images`文件夹中，`images.dvc`中的MD5哈希值将会不同：
- en: '![](../Images/23f63ec01421bf9630a25cb9216aa746.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/23f63ec01421bf9630a25cb9216aa746.png)'
- en: Image by me
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供
- en: As mentioned earlier, you should track all `.dvc` files with Git so that modifications
    to large assets become a part of your Git commits and history.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，你应该用Git跟踪所有`.dvc`文件，这样对大型资产的修改将成为你Git提交和历史记录的一部分。
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Find out more about how `.dvc` files work from [this page](https://dvc.org/doc/user-guide/project-structure/dvc-files)
    of the DVC user guide.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 了解更多关于`.dvc`文件如何工作的内容，请参考[DVC用户指南](https://dvc.org/doc/user-guide/project-structure/dvc-files)的[此页面](https://dvc.org/doc/user-guide/project-structure/dvc-files)。
- en: 3\. DVC cache
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. DVC缓存
- en: When you call `dvc add` on a large asset, it gets copied into a special directory
    called DVC cache, located under `.dvc/cache`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在一个大型资产上调用`dvc add`时，它会被复制到一个特殊的目录中，称为DVC缓存，位于`.dvc/cache`下。
- en: The cache is the place where DVC keeps a pristine record of your data and models
    at different versions. The `.dvc` files in the current working directory may be
    showing the latest or some other version of the large assets, but the cache will
    include all the different states the assets have been in since you started tracking
    them with DVC.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存是DVC在不同版本下保持数据和模型原始记录的地方。当前工作目录中的`.dvc`文件可能显示最新的或其他版本的大型资产，但缓存将包含自你开始用DVC跟踪它们以来，所有资产的不同状态。
- en: For example, let’s say you added a 1 GB `data.csv` file to DVC. By default,
    the file will be both in your workspace and inside the `.dvc/cache` folder, taking
    up twice as much space (2 GB).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你将一个1 GB的`data.csv`文件添加到DVC中。默认情况下，该文件将同时出现在你的工作区和`.dvc/cache`文件夹中，占用两倍的空间（2
    GB）。
- en: '![](../Images/af6f81847ed67dca42eb897fbe116bff.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/af6f81847ed67dca42eb897fbe116bff.png)'
- en: Image by me
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供
- en: Any subsequent changes tracked with `dvc add data.csv` will create a new version
    of `data.csv` with a new hash inside `.dvc/cache`, taking up another gigabyte
    of memory.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 任何后续通过`dvc add data.csv`跟踪的更改都会在`.dvc/cache`中创建一个新版本的`data.csv`，并占用另外一个GB的内存。
- en: So, you might already be asking — isn’t this highly inefficient? And the answer
    would be yes! At least, for single files, but we will see methods to mitigate
    this problem in the next section.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你可能会问——这不是效率非常低吗？答案是肯定的！至少对于单个文件来说是如此，但我们将在下一部分看到缓解这一问题的方法。
- en: As for folders, it is a bit different.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于文件夹，情况有点不同。
- en: When you track different versions of folders with `dvc add dirname`, DVC is
    smart enough to detect only the files that changed within that directory. This
    means that unless you update every single file in the directory, DVC will cache
    only the versions of the changed files, which won't take up much space.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用`dvc add dirname`跟踪不同版本的文件夹时，DVC足够智能，只检测目录内发生变化的文件。这意味着，除非你更新目录中的每一个文件，否则DVC将只缓存变化文件的版本，这不会占用太多空间。
- en: In summary, think of DVC cache as a counterpart to [Git’s staging area](https://medium.com/towards-data-science/git-for-the-modern-data-scientist-9-git-concepts-you-cant-ignore-b4eaf7a154c2#:~:text=a%20commit.-,3.%20Staging%20area,-By%20talking%20about).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，可以将DVC缓存视为[Git的暂存区](https://medium.com/towards-data-science/git-for-the-modern-data-scientist-9-git-concepts-you-cant-ignore-b4eaf7a154c2#:~:text=a%20commit.-,3.%20Staging%20area,-By%20talking%20about)的对应物。
- en: Learn more about the cache and internal DVC files from [this user guide section](https://dvc.org/doc/user-guide/project-structure/internal-files).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 了解更多关于缓存和内部DVC文件的信息，请访问[本用户指南部分](https://dvc.org/doc/user-guide/project-structure/internal-files)。
- en: 4\. Caching strategies in DVC
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. DVC中的缓存策略
- en: There are three caching strategies in DVC.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: DVC中有三种缓存策略。
- en: We have already seen strategy 0, which simply copies tracked files into the
    cache. This is the safest and always available option, even though it is slow
    and memory-inefficient. But it allows you to edit the tracked files in-place as
    they are physically available in your workspace.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看过策略0，它简单地将跟踪的文件复制到缓存中。这是最安全且始终可用的选项，即使它很慢且内存效率低。但它允许你在原地编辑跟踪的文件，因为它们在你的工作区中物理存在。
- en: In strategy 1, DVC uses hard links to link large assets in the cache to your
    workspace without duplicating them. Think of hard links as identical twins of
    the tracked files.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在策略1中，DVC使用硬链接将缓存中的大型资产链接到你的工作区，而无需重复它们。可以将硬链接视为跟踪文件的双胞胎。
- en: It is like having multiple doors to the same room, but it is still the same
    space. Each door (or link) provides access to the room (or file) without duplicating
    its contents.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像是同一个房间有多个门，但它们仍然是同一个空间。每扇门（或链接）提供对房间（或文件）的访问，而无需重复其内容。
- en: The second strategy, creating soft links, is exactly like hard links. But, soft
    links work better if your repository and DVC cache are located on different file
    systems or drives, while hard links are the best when they are on the same partition
    or storage device.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种策略，创建软链接，实际上和硬链接类似。不过，如果你的仓库和DVC缓存位于不同的文件系统或驱动器上，软链接效果更好，而硬链接则在它们位于相同分区或存储设备上时表现最佳。
- en: The downside of both hard and soft links is that you can’t edit them in-place
    as it will lead to cache corruption. To protect you from editing, DVC limits the
    permissions of these files to read-only.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 硬链接和软链接的缺点是你不能在原地编辑它们，因为这会导致缓存损坏。为了保护你不进行编辑，DVC将这些文件的权限限制为只读。
- en: The final third strategy is reflinks. They are the best and most efficient but
    only available in the most recent file systems. For example, it isn’t even available
    on my [WSL2](https://medium.com/towards-data-science/how-to-create-perfect-machine-learning-development-environment-with-wsl2-on-windows-10-11-2c80f8ea1f31),
    so DVC never uses this strategy on its own.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一种第三策略是reflinks。它们是最好的、最有效的，但仅在最新的文件系统中可用。例如，它在我的[WSL2](https://medium.com/towards-data-science/how-to-create-perfect-machine-learning-development-environment-with-wsl2-on-windows-10-11-2c80f8ea1f31)中甚至不可用，因此DVC从不单独使用这种策略。
- en: But when it is available, reflinks bring all the benefits of the rest. The tracked
    files are physically in the cache, but they are linked to the workspace as though
    they are duplicates. If you want to edit these files in-place, the file system
    will just copy the original file from the cache into the workspace for the duration
    of your edit.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 但当它可用时，reflinks带来了其他所有策略的好处。被跟踪的文件实际上在缓存中，但它们像是副本一样链接到工作区。如果你想在原地编辑这些文件，文件系统会将原始文件从缓存中复制到工作区，直到你完成编辑。
- en: '![](../Images/4d284c15718598d91b03fd9e67ad907a.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d284c15718598d91b03fd9e67ad907a.png)'
- en: Image taken from DVC docs. Apache-2.0 license.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自DVC文档。Apache-2.0许可证。
- en: 'The default strategy is `copy` when you initialize DVC. To change it, you can
    run:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 默认策略是`copy`，当你初始化DVC时。要更改它，你可以运行：
- en: '[PRE1]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Learn more about the differences between caching strategies and how to disable
    the *uneditable* downside of hard/soft links from [here](https://dvc.org/doc/user-guide/data-management/large-dataset-optimization)
    and [here](https://dvc.org/doc/user-guide/how-to/update-tracked-data).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 了解更多关于缓存策略之间的差异以及如何禁用硬/软链接的*不可编辑*缺点，请访问[这里](https://dvc.org/doc/user-guide/data-management/large-dataset-optimization)和[这里](https://dvc.org/doc/user-guide/how-to/update-tracked-data)。
- en: 5\. DVC workflow
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. DVC工作流程
- en: The general idea of data version control is to include the changes made to large
    files in your Git commits and branches without hitting Git’s size limit. We have
    mentioned that DVC achieves this by creating small `.dvc` placeholders that change
    whenever you update DVC-tracked large files.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 数据版本控制的总体思想是将对大型文件所做的更改包含在你的 Git 提交和分支中，而不触及 Git 的大小限制。我们提到 DVC 通过创建小的 `.dvc`
    占位符来实现这一点，这些占位符在你更新 DVC 跟踪的大型文件时会发生变化。
- en: '![](../Images/f89f7879643b60cfdb86eef6289b69b1.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f89f7879643b60cfdb86eef6289b69b1.png)'
- en: Image by me
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由我制作
- en: 'So, the basic workflow is this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，基本工作流程如下：
- en: You start tracking large assets with `dvc add large_assets`.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过 `dvc add large_assets` 开始跟踪大型资产。
- en: DVC adds the asset to `.gitignore` so it isn't visible to Git while also creating
    `large_assets.dvc` file.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DVC 将资产添加到 `.gitignore` 中，因此 Git 不会看到它，同时创建 `large_assets.dvc` 文件。
- en: You add this `large_assets.dvc` files to Git with `git add large_assets.dvc`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用 `git add large_assets.dvc` 将 `large_assets.dvc` 文件添加到 Git 中。
- en: '![](../Images/49c3d7aff182f517fa3dae20a6aa125b.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/49c3d7aff182f517fa3dae20a6aa125b.png)'
- en: Image by me
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 由我制作
- en: 'If you changed other files, say `train.py`, you add that change as well: `git
    add train.py` or you simply use `git add --all` to capture all changes visible
    to Git.'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你更改了其他文件，比如 `train.py`，你也需要添加该更改：`git add train.py`，或者你可以简单地使用 `git add --all`
    来捕捉 Git 可见的所有更改。
- en: You make a commit with `git commit -m "Message"`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你使用 `git commit -m "Message"` 进行提交。
- en: 'This way, you document both your code changes and large asset changes in your
    Git history. If you switch branches or commits with `git checkout branch_name/commit_hash`,
    DVC must show you the versions of your large assets for those specific commits
    or branches. To do this, you must call `dvc checkout` after `git checkout`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你可以在 Git 历史中记录你的代码更改和大型资产更改。如果你使用 `git checkout branch_name/commit_hash`
    切换分支或提交，DVC 必须显示这些特定提交或分支的资产版本。为此，你必须在 `git checkout` 后调用 `dvc checkout`：
- en: '[PRE2]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The command will fetch the version of your DVC assets from the cache using the
    `.dvc` files and the MD5 hashes within.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将使用 `.dvc` 文件和其中的 MD5 哈希从缓存中获取 DVC 资产的版本。
- en: 6\. DVC remote
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. DVC 远程存储
- en: Git uses hosting platforms like GitHub to store your code repositories online
    so that others can collaborate on your project. But just like Git can’t handle
    your large assets, neither can GitHub. So, DVC solves this by having its own remote
    storage.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Git 使用像 GitHub 这样的托管平台在线存储你的代码仓库，以便其他人可以协作你的项目。但就像 Git 不能处理你的大型资产一样，GitHub 也不能。因此，DVC
    通过拥有自己的远程存储来解决这个问题。
- en: '![](../Images/91eaab05aab40c5141235faf3c0d796b.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/91eaab05aab40c5141235faf3c0d796b.png)'
- en: Image by me
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 由我制作
- en: This remote storage, separate from the cache, can be on the same machine as
    your repository or on any cloud provider. DVC supports all the major ones, including
    AWS, GCP, and Azure. Similar to how you frequently push your Git commits to GitHub,
    you should use `dvc push` to send the assets in your DVC cache to the remote to
    keep it up-to-date.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个远程存储与缓存分开，可以在与你的仓库同一台机器上，也可以在任何云服务提供商上。DVC 支持所有主要的云服务提供商，包括 AWS、GCP 和 Azure。类似于你经常将
    Git 提交推送到 GitHub，你应该使用 `dvc push` 将 DVC 缓存中的资产发送到远程，以保持其最新。
- en: Your chosen remote will be stated in your DVC configuration file, `.dvc/config`.
    When a person clones or forks your GitHub repository, they will get this config
    file along with `.dvc` placeholder files, but their DVC cache will be empty. So,
    they will use `dvc pull` to download all the large assets and their versions from
    the remote into their cache and the workspace.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你选择的远程存储将在你的 DVC 配置文件 `.dvc/config` 中声明。当某人克隆或分叉你的 GitHub 仓库时，他们将获得此配置文件以及 `.dvc`
    占位符文件，但他们的 DVC 缓存将为空。因此，他们将使用 `dvc pull` 从远程下载所有大型资产及其版本到他们的缓存和工作区。
- en: That is the workflow to collaborate on DVC-enabled repositories.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是协作 DVC 启用仓库的工作流程。
- en: The [DVC user guide on remotes](https://dvc.org/doc/start/data-management/data-versioning#storing-and-sharing)
    shows you the setup code.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[DVC 用户指南中的远程存储](https://dvc.org/doc/start/data-management/data-versioning#storing-and-sharing)展示了设置代码。'
- en: 7\. DVC pipelines
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7\. DVC 流水线
- en: One of the best features of DVC is smart pipelines. A typical machine learning
    project consists of many steps like gathering data, cleaning and transforming
    it, choosing a model, tuning the chosen model, and finally deploying it. Each
    of these steps can consume and produce different assets like datasets, models,
    metrics, plots, docker images, etc.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: DVC 最棒的功能之一是智能流水线。一个典型的机器学习项目包括许多步骤，如收集数据、清洗和转换数据、选择模型、调整选择的模型，最后部署它。每个步骤都可能消耗和生成不同的资产，如数据集、模型、指标、图表、docker
    镜像等。
- en: The aim of DVC pipelines is to run all these steps in succession using a single
    command, `dvc repro`, which is short for *DVC reproduce*, and let DVC handle all
    the combination of assets under the hood. Sounds pretty awesome, right?
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: DVC管道的目标是通过单一命令`dvc repro`（即*DVC重现*）来依次运行所有这些步骤，让DVC在后台处理所有资产的组合。这听起来很棒，对吧？
- en: 'I won’t go into much detail about how to set up these pipelines because in
    the past, a certain author already did that:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会详细讲解如何设置这些管道，因为过去某位作者已经做过这件事：
- en: '[](https://pub.towardsai.net/how-to-create-highly-organized-ml-projects-anyone-can-reproduce-with-dvc-pipelines-fc3ac7867d16?source=post_page-----bb2433ccec88--------------------------------)
    [## How To Create Highly-Organized ML Projects Anyone Can Reproduce With DVC Pipelines'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://pub.towardsai.net/how-to-create-highly-organized-ml-projects-anyone-can-reproduce-with-dvc-pipelines-fc3ac7867d16?source=post_page-----bb2433ccec88--------------------------------)
    [## 如何创建高度组织化的ML项目，任何人都可以使用DVC管道重现'
- en: Edit description
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑描述
- en: pub.towardsai.net](https://pub.towardsai.net/how-to-create-highly-organized-ml-projects-anyone-can-reproduce-with-dvc-pipelines-fc3ac7867d16?source=post_page-----bb2433ccec88--------------------------------)
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: pub.towardsai.net](https://pub.towardsai.net/how-to-create-highly-organized-ml-projects-anyone-can-reproduce-with-dvc-pipelines-fc3ac7867d16?source=post_page-----bb2433ccec88--------------------------------)
- en: But I think it will be enough to pique your interest that when you call `dvc
    repro`, DVC eliminates the need to call `dvc add` on half a dozen assets any time
    you run your pipeline. I highly recommend reading the article.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 但我认为只要你知道当你调用`dvc repro`时，DVC就会省去每次运行管道时调用`dvc add`的需要，这就足以引起你的兴趣。我强烈推荐阅读这篇文章。
- en: Or you can also read the [excellent user guide on pipelines](https://dvc.org/doc/user-guide/pipelines).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你也可以阅读[关于管道的优秀用户指南](https://dvc.org/doc/user-guide/pipelines)。
- en: Conclusion
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: I am going to wrap up this diary entry with a lot of hope for this library.
    It is only 2020 and the library version is 1.0.0, but I predict that sometime
    in 2023, just an arbitrary year came to mind, its [v3.0.0](https://github.com/iterative/dvc/releases/tag/3.0.0a0)
    will come with a lot of new features and enhancements.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我要用对这个库的巨大希望来结束这篇日记。现在是2020年，库的版本是1.0.0，但我预测在2023年某个随机的年份，它的[v3.0.0](https://github.com/iterative/dvc/releases/tag/3.0.0a0)将会带来许多新功能和改进。
- en: I guess they will also add a feature to track [machine learning experiments](https://medium.com/towards-artificial-intelligence/how-to-track-ml-experiments-with-dvc-inside-vscode-to-boost-your-productivity-a654ace60bab)
    in the near future (possibly this November), but that’s just wishful thinking.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我猜他们也会在不久的将来（可能是今年11月）添加一个功能来跟踪[机器学习实验](https://medium.com/towards-artificial-intelligence/how-to-track-ml-experiments-with-dvc-inside-vscode-to-boost-your-productivity-a654ace60bab)，但这只是痴心妄想。
- en: What a good day.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 何等美好的一天。
- en: Loved this article and, let’s face it, its bizarre writing style? Imagine having
    access to dozens more just like it, all written by a brilliant, charming, witty
    author (that’s me, by the way :).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢这篇文章吗？让我们面对现实，它的写作风格确实很奇特。想象一下，有几十篇类似的文章都由一个聪明、迷人、机智的作者（顺便说一下，就是我）所写。
- en: For only 4.99$ membership, you will get access to not just my stories, but a
    treasure trove of knowledge from the best and brightest minds on Medium. And if
    you use [my referral link](https://ibexorigin.medium.com/membership), you will
    earn my **supernova of gratitude** and a virtual high-five for supporting my work.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 仅需4.99美元的会员费，你将不仅能访问我的故事，还能获得来自Medium上最杰出思想者的知识宝库。如果你使用[我的推荐链接](https://ibexorigin.medium.com/membership)，你将获得我**超级新星的感谢**和一个虚拟的击掌，以支持我的工作。
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----bb2433ccec88--------------------------------)
    [## Join Medium with my referral link — Bex T.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ibexorigin.medium.com/membership?source=post_page-----bb2433ccec88--------------------------------)
    [## 使用我的推荐链接加入Medium — Bex T.'
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取对我所有⚡高级⚡内容的独家访问权限，在Medium上无限制地浏览。通过给我买一杯…
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----bb2433ccec88--------------------------------)
    ![](../Images/a01b5e4fb641db5f35b8172a4388e821.png)
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----bb2433ccec88--------------------------------)
    ![](../Images/a01b5e4fb641db5f35b8172a4388e821.png)
- en: Image by me. Via Midjourney.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供。通过Midjourney制作。
- en: 'References:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献：
- en: '[1] RealPython, [Data Version Control With Python and DVC](https://realpython.com/python-data-version-control/),
    2020, realpython.com'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] RealPython, [使用Python和DVC的数据版本控制](https://realpython.com/python-data-version-control/),
    2020, realpython.com'
