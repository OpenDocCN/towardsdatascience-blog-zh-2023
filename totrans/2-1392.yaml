- en: 'ü¶úüîóLangChain: Enhancing Performance with Memory Capacity'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/langchain-enhancing-performance-with-memory-capacity-c7168e097f81](https://towardsdatascience.com/langchain-enhancing-performance-with-memory-capacity-c7168e097f81)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/7ad10b2af7c0deba0e3b68918593a2f0.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Milad Fakurian](https://unsplash.com/ko/@fakurian?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: LangChain‚Äôs Boost through Memory Expansion Techniques
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@marcellopoliti?source=post_page-----c7168e097f81--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----c7168e097f81--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c7168e097f81--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c7168e097f81--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----c7168e097f81--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c7168e097f81--------------------------------)
    ¬∑4 min read¬∑Jun 21, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: I have already published [articles](https://medium.com/towards-data-science/develop-applications-powered-by-language-models-with-langchain-d2f7a1d1ad1a)
    about LangChain before, introducing the library and all its capabilities. Now
    I would like to focus on a key aspect, how to manage memory in intelligent chatbots.
  prefs: []
  type: TYPE_NORMAL
- en: Chatbots or agents also need an information storage mechanism, which can take
    different forms and perform different functions. **Implementing a memory system
    in chatbots not only helps make them more clever, but also more natural and useful
    for users**.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, LangChain provides APIs that make it easy for developers to implement
    memory in their applications. In this article, we will explore this aspect in
    more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Use Memory in LangChain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A best practice when developing chatbots is to **save all the interactions the
    chatbot has with the user.** This is because the **state of the LLM can change
    depending on the past conversation**, in fact, the LLM to the same question from
    2 users will also answer differently because they have a different past conversation
    with the chatbot and therefore it is in a different state.
  prefs: []
  type: TYPE_NORMAL
- en: So what the chatbot memory creates is nothing more than a list of old messages,
    which are fed back to it before a new question is asked. Of course, the **LLM
    have limited context, so you have to be a little creative and choose how to feed
    this history back to the LLM**. The most common methods are to return a summary
    of the old messages or return only the N latest messages that are probably the
    most informative.
  prefs: []
  type: TYPE_NORMAL
- en: Start with the basics with ChatMessageHistory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the main class that allows us to manage the messages that occur between
    the chatbot (AI) and the user (Human). This class provides two main methods which
    are The following.
  prefs: []
  type: TYPE_NORMAL
- en: '**add_user_message:** allows us to add a message into the chatbot‚Äôs memory
    and tag the message as ‚Äúuser‚Äù'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**add_ai_message:** allows us to add a message into the chatbot‚Äôs memory and
    tag the message as ‚ÄúAI‚Äù'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This class allows you to do various things, but in its simplest use, you can
    look at it as saving various messages to a list from time to time. Then you can
    also review all the messages you have added simply by iterating over the history
    in the following way.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Advanced Memory with ConversationBufferMemory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **ConversationBufferMemory** class behaves somewhat like the ChatMessageHistory
    class with respect to the message store, though it **provides clever methods to
    retrieve old messages**.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we can retrieve old messages, as a list of messages or as one big
    string depending on what we need. If we want to ask the LLM to make a summary
    of the past conversation it might be useful to have the past conversation as one
    big string. If we want to do a detailed analysis of the past instead, we can read
    one message at a time by extracting a list.
  prefs: []
  type: TYPE_NORMAL
- en: Also with the ConversationBufferMemory class, we can add messages to the history
    using the add_user_message and add_user_message methods.
  prefs: []
  type: TYPE_NORMAL
- en: The load_memory_variables method on the other hand is used to extract old messages
    in list or dictionary form depending on what is specified, let‚Äôs see an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Manage Memory in Multiple Conversations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen toy examples of how to manage memory by saving and retrieving messages.
    **But in a real-world application you will probably need to manage the memory
    of several conversations**. LangChain allows you to manage this case as well with
    the use of what are called **chains.**
  prefs: []
  type: TYPE_NORMAL
- en: '**A chain is nothing more than a workflow of various simple or complex steps
    that allow you to achieve a certain goal.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**For example, an LLM that looks up a piece of information on Wikipedia because
    it does not know how to answer a certain question is a chain.**'
  prefs: []
  type: TYPE_NORMAL
- en: To handle various conversations, it is enough to associate a ConversationBufferMemory
    with each chain that is created with an instantiation of the ConversationChain
    class.
  prefs: []
  type: TYPE_NORMAL
- en: This way when the predict method of the model is called, all the steps of the
    chain are run so the model will read the past messages of the conversation.
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs look at a simple example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Final Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In conclusion, **memory is a critical component of a chatbot,** and LangChain
    provides several frameworks and tools to manage memory effectively. Through the
    use of classes such as **ChatMessageHistory and ConversationBufferMemory, you
    can capture and store user interactions with the AI**, and use this information
    to guide future AI responses. I hope this information helps you build smarter
    and more capable chatbots!
  prefs: []
  type: TYPE_NORMAL
- en: In the next article, I will show you how to use LangChain tools.
  prefs: []
  type: TYPE_NORMAL
- en: If you found this article useful follow me here on Medium! [üòâ](https://emojipedia.org/it/apple/ios-15.4/faccina-che-fa-l-occhiolino/)
  prefs: []
  type: TYPE_NORMAL
- en: The End
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Marcello Politi*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Linkedin](https://www.linkedin.com/in/marcello-politi/), [Twitter](https://twitter.com/_March08_),
    [Website](https://marcello-politi.super.site/)'
  prefs: []
  type: TYPE_NORMAL
