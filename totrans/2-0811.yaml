- en: 'Enhancing Python Documentation: A Step-by-Step Guide to Linking Source Code'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/enhancing-python-documentation-a-step-by-step-guide-to-linking-source-code-9da102b2bb2a](https://towardsdatascience.com/enhancing-python-documentation-a-step-by-step-guide-to-linking-source-code-9da102b2bb2a)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://piskunow.medium.com/?source=post_page-----9da102b2bb2a--------------------------------)[![Pablo
    Piskunow](../Images/ee0402d41010f97f5e4a51494ae3b517.png)](https://piskunow.medium.com/?source=post_page-----9da102b2bb2a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9da102b2bb2a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9da102b2bb2a--------------------------------)
    [Pablo Piskunow](https://piskunow.medium.com/?source=post_page-----9da102b2bb2a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9da102b2bb2a--------------------------------)
    ·4 min read·Dec 7, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: You read the description of this class method, but still don’t understand what
    is happening. If only you could quickly read the source code…
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Bridging the Gap Between Documentation and Code: Simplifying Python Learning'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python’s power lies not just in its simplicity and efficiency but also in its
    vast community and rich documentation. But what if you could make that documentation
    even more interactive and informative? Today, I’ll walk you through enhancing
    your Sphinx-generated Python documentation by linking it directly to the corresponding
    source code on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f1ac9810e77866bfc357b8a03fa99355.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author using Dalle-3\. Prompt “Abstract image, black acquarel on a
    light cream canvas, showing handwritten snippets linked to the inner workings
    of a machine with thin arrows”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Documenting with Sphinx'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we write proper docstrings in our Python code, we lay the groundwork for
    generating comprehensive API documentation. Tools like Sphinx’s `autodoc` and
    `automodule` are great for extracting these docstrings from our modules, classes,
    and functions. But, they typically fall short in providing direct links to the
    source code.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to get started with Sphinx, check these tutorials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.sphinx-doc.org/en/master/tutorial/automatic-doc-generation.html?source=post_page-----9da102b2bb2a--------------------------------)
    [## Sphinx'
  prefs: []
  type: TYPE_NORMAL
- en: In the previous section of the tutorial you manually documented a Python function
    in Sphinx. However, the description…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.sphinx-doc.org](https://www.sphinx-doc.org/en/master/tutorial/automatic-doc-generation.html?source=post_page-----9da102b2bb2a--------------------------------)  [##
    Building a Documentation Project with Sphinx - Intro to Documentation with Sphinx
    and…
  prefs: []
  type: TYPE_NORMAL
- en: For the purpose of this tutorial, we will be writing documentation using reStructuredText.
    If you're looking to use…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: sphinx-intro-tutorial.readthedocs.io](https://sphinx-intro-tutorial.readthedocs.io/en/latest/sphinx_first_steps.html?source=post_page-----9da102b2bb2a--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Setting up Sphinx `linkcode`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add this functionality, first, we need to modify our Sphinx configuration.
    This involves adding `sphinx.ext.linkcode` to our list of extensions in the `conf.py`
    file of our documentation source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 3: Basic Linkcode Implementation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our next step is to define the `linkcode_resolve` function. This function is
    responsible for determining the URL that the documentation should point to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, we’re simply pointing to the file in the GitHub repository but not yet
    to the specific line of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Finding the Line Number'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting the Module Object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, you’re obtaining the module object where the target class, method, attribute,
    or function (henceforth simply referred to as ‘object’) is defined. In Python,
    every loaded module is stored in a dictionary called `sys.modules`. You’re accessing
    this dictionary to retrieve the module object based on its name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Iterating Over the Fully Qualified Name
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, you iterate over the fully qualified name of the object. A fully qualified
    name includes all the hierarchical levels through which the object can be accessed,
    like `module.class.method`. This iteration helps you to dig into the module structure
    and reach the exact object you need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Using the Inspect Module to Find the Line Number
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, you use the `inspect` module to find the line number in the source
    code where the definition of this object begins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Making one function to retrieve the line number**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make a function that works for all cases, we need to add some extra checks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In summary, this step involves locating the module where the target object is
    defined, traversing the module’s structure to find the exact object (be it a class,
    method, attribute, or function), and then using the `inspect` module to find the
    line number where this object is defined in the source code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 6: Finalizing Linkcode Resolution'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We integrate the line number retrieval into the `linkcode_resolve` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This approach allows your documentation to provide a direct link to the specific
    line in the source code, enhancing the clarity and usefulness of the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Extra: Branch Adaptation for ReadTheDocs'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For those using ReadTheDocs, you can adapt this function to reference different
    branches (like `main` or `develop`). So how to build two different documentations
    pointing to each of those branches?
  prefs: []
  type: TYPE_NORMAL
- en: When ReadTheDocs builds the documentation, it uses it’s own environment with
    a variable called `READTHEDOCS_VERSION`, which typically is ‘stable’ or ‘latest’.
    I have added another build called ‘develop’ that points to the branch of the same
    name on my git repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add the following to our `linkcode_resolve` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that if building locally, or more generally in an environment where `READTHEDOCS_VERSION`
    is not defined, the default branch linked will be `main`.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to check the [GitHub repository](https://github.com/piskunow/kpm-tools/blob/b2223ad4fb24c2f995f22f5afab0ebc1cc554abf/docs/conf.py#L68)
    where this is implemented, and the [documentation](https://kpm-tools.readthedocs.io/en/latest/api.html).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this setup, your Sphinx documentation will now have direct links to the
    source code, greatly enhancing its utility and user experience. This small addition
    can significantly improve the usability and effectiveness of your documentation,
    making it an invaluable tool for both new learners and experienced developers
    alike.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, the journey of coding is as much about sharing knowledge and solutions
    as it is about solving problems. So, if you found this tutorial helpful, I encourage
    you to spread the word and help others in their coding adventures.
  prefs: []
  type: TYPE_NORMAL
- en: Happy coding, and until next time!
  prefs: []
  type: TYPE_NORMAL
- en: '*Discover more of my work and exclusive content on my* [*Gumroad profile*](https://dataguy.gumroad.com/)
    *or* [*personal website*](https://piskunow.com/)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Disclaimer: I do not hold any affiliation with Sphinx, I only find it a great
    open source tool.*'
  prefs: []
  type: TYPE_NORMAL
