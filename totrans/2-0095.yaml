- en: 5 Awesome Python Hidden Features ‚Äî Part 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/5-awesome-python-hidden-features-a0172e0bd98e](https://towardsdatascience.com/5-awesome-python-hidden-features-a0172e0bd98e)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PYTHON | PROGRAMMING | FEATURES
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Take your coding skills to the next level with these cool hidden Python features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://david-farrugia.medium.com/?source=post_page-----a0172e0bd98e--------------------------------)[![David
    Farrugia](../Images/082ed61e24c7c26a4ae1c77343a87824.png)](https://david-farrugia.medium.com/?source=post_page-----a0172e0bd98e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a0172e0bd98e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a0172e0bd98e--------------------------------)
    [David Farrugia](https://david-farrugia.medium.com/?source=post_page-----a0172e0bd98e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a0172e0bd98e--------------------------------)
    ¬∑6 min read¬∑Mar 16, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6c1f21e18c4752f82bb8317b21a6b31d.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Emile Perron](https://unsplash.com/@emilep?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Python is a marvellous programming language.
  prefs: []
  type: TYPE_NORMAL
- en: Stack Overflow‚Äôs Developer Survey 2022 placed Python in the number 1 spot for
    the most popular programming language in 2022.
  prefs: []
  type: TYPE_NORMAL
- en: Python is incredibly beginner-friendly. Its syntax is simple and easy to understand
    ‚Äî significantly smoothing the learning curve.
  prefs: []
  type: TYPE_NORMAL
- en: Python is versatile. Thanks to the large and active Python community, Python
    benefits from robust packages and frameworks tackling virtually any development
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: W**ant to write up an API?** You can use Python.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: W**ant to build a game?** Python has you covered.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: W**ant to wrangle some data and train machine learning models?** You bet. Python
    has the right tools for you!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Python also has a bunch of tricks up its sleeve. I constantly find myself impressed
    by all the Python one-liners that solve a complex task beautifully!
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will go over 5 cool Python tricks that you can use to impress
    your co-workers üòú
  prefs: []
  type: TYPE_NORMAL
- en: 'Hidden Feature 1: Using ELSE with FOR and WHILE loops'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the first things we learn when getting started with programming is conditional
    statements (i.e., `if-else` blocks). These conditional statements allow us to
    divert the code flow based on some variable value. In the `if` block we check
    for some logic. If this logical condition is not met, we execute the code defined
    in the `else` block. This is all common knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: But, we can also use the `else` keyword with any `for` or `while` loop. The
    functionality of the `else` in this setting becomes simply to execute code **ONLY**
    if the loop finished successfully without hitting any `break` statements.
  prefs: []
  type: TYPE_NORMAL
- en: How is this useful, you might ask?
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we have a list of numbers. We want to write logic that determines whether
    or not any single number in the tuple is an even number.
  prefs: []
  type: TYPE_NORMAL
- en: 'Traditionally, we might write something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This logic is relatively straightforward. We use a flag (in this case, the `found_even`
    variable) to signify whether or not we found an even number. If during the iteration
    process we do find an even number, we use the `break` keyword to stop loop execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The above can also be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We now no longer require the flag variable `found_even`. We can use the `else`
    keyword to only print ‚Äú*No even numbers found*‚Äù if the `break` keyword is never
    reached during the loop iteration process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hidden Feature 2: The Walrus Operator'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The walrus operator (`:=`) was introduced in Python 3.8\. We use the walrus
    operator to assign variables with values as an expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example. We want to implement logic that generates a
    sequence of random numbers until a specific number is generated. Suppose we are
    after getting my favourite number: 10\. We typically write something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In our loop, we are generating a random number and storing it in a variable
    `rand`. The number of iterations are based on the value of the `rand` variable.
    The sooner that `rand` becomes equal to 10, the sooner we will break the loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, using the walrus operator, we can obtain the same functionality using
    the below code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, we tell Python that we want our `while` loop to run while the value of
    `rand` is not equal to 10\. We also tell it that the `rand` will get its value
    from `random.randint(1, 100)` with every new iteration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hidden Feature 3: Ellipsis'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ellipsis (i.e., `...`) is an interesting keyword and rather useful during
    the early development stages. When dealing with complex logic, the best strategy
    is to divide and conquer ‚Äî split the complex logic into its smaller and easier
    to implement constituents. Often times, this requires us to start implementing
    these smaller functions first and then tie everything together.
  prefs: []
  type: TYPE_NORMAL
- en: However, we sometimes (for various reasons) want to define the function but
    write its code later on. The ellipsis allows us to do just that!
  prefs: []
  type: TYPE_NORMAL
- en: Let us see how.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The above code won‚Äôt fail even though the function `some_function` defines no
    code. We can even call the function and it still would not fail (of course, it
    would not return anything either).
  prefs: []
  type: TYPE_NORMAL
- en: 'Hidden Feature 4: Function Attributes'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python, any function is stored as an object. Any object can have attributes.
    Therefore, in Python, functions can also have attributes.
  prefs: []
  type: TYPE_NORMAL
- en: We can use function attributes to define additional information about the function
    and other metadata. For example, suppose we want to keep track of how many times
    a specific function is called. We can set a counter attribute that we increment
    after every call.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Another interesting use-case of function attributes is to set an `is_verbose`
    attribute to switch between printing extra information or not. This is often done
    by passing an extra parameter to the function. With function attributes, we would
    no longer require the extra parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Another good example is to display the function‚Äôs docstring.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: By calling the attribute `__name__`, we are instructing Python to print the
    function‚Äôs name. The `__doc__`, in turn, prints the function‚Äôs docstring.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are numerous uses for function attributes. You can read more about them
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[## PEP 232 - Function Attributes'
  prefs: []
  type: TYPE_NORMAL
- en: This PEP describes an extension to Python, adding attribute dictionaries to
    functions and methods. This PEP tracks the‚Ä¶
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: peps.python.org](https://peps.python.org/pep-0232/?source=post_page-----a0172e0bd98e--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Hidden Feature 5: Ternary Operator'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ternary operator in Python is a way to define an `if-else` statement as
    a one-liner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the below example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can obtain the same functionality using the ternary operator syntax as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**You can find the second part of this series here:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/5-more-awesome-python-hidden-features-part-2-160a533c212b?source=post_page-----a0172e0bd98e--------------------------------)
    [## 5 More Awesome Python Hidden Features ‚Äî Part 2'
  prefs: []
  type: TYPE_NORMAL
- en: A look at some powerful features to unlock Python‚Äôs full potential
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/5-more-awesome-python-hidden-features-part-2-160a533c212b?source=post_page-----a0172e0bd98e--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Concluding Remarks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we discussed 5 Python features that are not considered to be
    common knowledge. The purpose of these hidden features isn‚Äôt just for us to flex
    our Python muscles. They can really save us precious development time, improve
    the readability of our code, and also help us write more efficient and beautiful
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '**Did you enjoy this post? For $5/month, you can become a member to unlock
    unlimited access to Medium. You will be directly supporting me and all your other
    favourite writers on Medium. So huge thanks for that!**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://david-farrugia.medium.com/membership?source=post_page-----a0172e0bd98e--------------------------------)
    [## Join Medium with my referral link - David Farrugia'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from David Farrugia (and thousands of other writers on Medium).
    Your membership fee directly supports‚Ä¶
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: david-farrugia.medium.com](https://david-farrugia.medium.com/membership?source=post_page-----a0172e0bd98e--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '**Perhaps you might also consider subscribing to my email list to get notified
    whenever I publish new content. It‚Äôs free :)**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://david-farrugia.medium.com/subscribe?source=post_page-----a0172e0bd98e--------------------------------)
    [## Get an email whenever David Farrugia publishes.'
  prefs: []
  type: TYPE_NORMAL
- en: Get an email whenever David Farrugia publishes. By signing up, you will create
    a Medium account if you don't already‚Ä¶
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: david-farrugia.medium.com](https://david-farrugia.medium.com/subscribe?source=post_page-----a0172e0bd98e--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Want to Get in Touch?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I would love to hear your thoughts on the topic, or anything AI and Data.
  prefs: []
  type: TYPE_NORMAL
- en: Drop me an email at ***davidfarrugia53@gmail.com*** should you wish to get in
    touch.
  prefs: []
  type: TYPE_NORMAL
- en: '[Linkedin](https://www.linkedin.com/in/david-farrugia/)'
  prefs: []
  type: TYPE_NORMAL
