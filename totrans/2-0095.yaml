- en: 5 Awesome Python Hidden Features — Part 1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5 个令人惊叹的 Python 隐藏功能 — 第 1 部分
- en: 原文：[https://towardsdatascience.com/5-awesome-python-hidden-features-a0172e0bd98e](https://towardsdatascience.com/5-awesome-python-hidden-features-a0172e0bd98e)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/5-awesome-python-hidden-features-a0172e0bd98e](https://towardsdatascience.com/5-awesome-python-hidden-features-a0172e0bd98e)
- en: PYTHON | PROGRAMMING | FEATURES
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON | 编程 | 特性
- en: Take your coding skills to the next level with these cool hidden Python features
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用这些酷炫的隐藏 Python 功能，将你的编程技能提升到一个新水平
- en: '[](https://david-farrugia.medium.com/?source=post_page-----a0172e0bd98e--------------------------------)[![David
    Farrugia](../Images/082ed61e24c7c26a4ae1c77343a87824.png)](https://david-farrugia.medium.com/?source=post_page-----a0172e0bd98e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a0172e0bd98e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a0172e0bd98e--------------------------------)
    [David Farrugia](https://david-farrugia.medium.com/?source=post_page-----a0172e0bd98e--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://david-farrugia.medium.com/?source=post_page-----a0172e0bd98e--------------------------------)[![David
    Farrugia](../Images/082ed61e24c7c26a4ae1c77343a87824.png)](https://david-farrugia.medium.com/?source=post_page-----a0172e0bd98e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a0172e0bd98e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a0172e0bd98e--------------------------------)
    [David Farrugia](https://david-farrugia.medium.com/?source=post_page-----a0172e0bd98e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a0172e0bd98e--------------------------------)
    ·6 min read·Mar 16, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a0172e0bd98e--------------------------------)
    ·6 分钟阅读·2023年3月16日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/6c1f21e18c4752f82bb8317b21a6b31d.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6c1f21e18c4752f82bb8317b21a6b31d.png)'
- en: Photo by [Emile Perron](https://unsplash.com/@emilep?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Emile Perron](https://unsplash.com/@emilep?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Python is a marvellous programming language.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种奇妙的编程语言。
- en: Stack Overflow’s Developer Survey 2022 placed Python in the number 1 spot for
    the most popular programming language in 2022.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Stack Overflow 的 2022 年开发者调查将 Python 排在 2022 年最受欢迎编程语言的第一位。
- en: Python is incredibly beginner-friendly. Its syntax is simple and easy to understand
    — significantly smoothing the learning curve.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Python 非常适合初学者。它的语法简单易懂，大大减少了学习曲线的难度。
- en: Python is versatile. Thanks to the large and active Python community, Python
    benefits from robust packages and frameworks tackling virtually any development
    needs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是多才多艺的。得益于庞大而活跃的 Python 社区，Python 拥有强大的包和框架，能够解决几乎所有的开发需求。
- en: W**ant to write up an API?** You can use Python.
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**想要编写 API 吗？** 你可以使用 Python。'
- en: ''
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: W**ant to build a game?** Python has you covered.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**想要制作游戏吗？** Python 能够满足你的需求。'
- en: ''
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: W**ant to wrangle some data and train machine learning models?** You bet. Python
    has the right tools for you!
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**想要处理数据并训练机器学习模型吗？** 当然可以。Python 拥有适合你的工具！'
- en: Python also has a bunch of tricks up its sleeve. I constantly find myself impressed
    by all the Python one-liners that solve a complex task beautifully!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Python 还隐藏着许多绝妙的技巧。我总是对所有能优雅解决复杂任务的 Python 一行代码感到惊讶！
- en: In this article, we will go over 5 cool Python tricks that you can use to impress
    your co-workers 😜
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将介绍 5 个酷炫的 Python 技巧，让你可以在同事面前炫耀 😜
- en: 'Hidden Feature 1: Using ELSE with FOR and WHILE loops'
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隐藏功能 1：在 FOR 和 WHILE 循环中使用 ELSE
- en: One of the first things we learn when getting started with programming is conditional
    statements (i.e., `if-else` blocks). These conditional statements allow us to
    divert the code flow based on some variable value. In the `if` block we check
    for some logic. If this logical condition is not met, we execute the code defined
    in the `else` block. This is all common knowledge.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在开始编程时学习的第一件事之一就是条件语句（即`if-else`块）。这些条件语句允许我们根据某些变量的值来改变代码的执行流程。在`if`块中，我们检查某些逻辑。如果这个逻辑条件没有满足，我们就执行`else`块中定义的代码。这些都是常识。
- en: But, we can also use the `else` keyword with any `for` or `while` loop. The
    functionality of the `else` in this setting becomes simply to execute code **ONLY**
    if the loop finished successfully without hitting any `break` statements.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我们也可以在任何`for`或`while`循环中使用`else`关键字。在这种情况下，`else`的功能是**仅在循环成功完成且没有遇到任何`break`语句**时执行代码。
- en: How is this useful, you might ask?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问，这有什么用处？
- en: Suppose we have a list of numbers. We want to write logic that determines whether
    or not any single number in the tuple is an even number.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'Traditionally, we might write something like:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This logic is relatively straightforward. We use a flag (in this case, the `found_even`
    variable) to signify whether or not we found an even number. If during the iteration
    process we do find an even number, we use the `break` keyword to stop loop execution.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'The above can also be written as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We now no longer require the flag variable `found_even`. We can use the `else`
    keyword to only print “*No even numbers found*” if the `break` keyword is never
    reached during the loop iteration process.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'Hidden Feature 2: The Walrus Operator'
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The walrus operator (`:=`) was introduced in Python 3.8\. We use the walrus
    operator to assign variables with values as an expression.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example. We want to implement logic that generates a
    sequence of random numbers until a specific number is generated. Suppose we are
    after getting my favourite number: 10\. We typically write something like:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In our loop, we are generating a random number and storing it in a variable
    `rand`. The number of iterations are based on the value of the `rand` variable.
    The sooner that `rand` becomes equal to 10, the sooner we will break the loop.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, using the walrus operator, we can obtain the same functionality using
    the below code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we tell Python that we want our `while` loop to run while the value of
    `rand` is not equal to 10\. We also tell it that the `rand` will get its value
    from `random.randint(1, 100)` with every new iteration.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'Hidden Feature 3: Ellipsis'
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ellipsis (i.e., `...`) is an interesting keyword and rather useful during
    the early development stages. When dealing with complex logic, the best strategy
    is to divide and conquer — split the complex logic into its smaller and easier
    to implement constituents. Often times, this requires us to start implementing
    these smaller functions first and then tie everything together.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: However, we sometimes (for various reasons) want to define the function but
    write its code later on. The ellipsis allows us to do just that!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Let us see how.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The above code won’t fail even though the function `some_function` defines no
    code. We can even call the function and it still would not fail (of course, it
    would not return anything either).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'Hidden Feature 4: Function Attributes'
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python, any function is stored as an object. Any object can have attributes.
    Therefore, in Python, functions can also have attributes.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: We can use function attributes to define additional information about the function
    and other metadata. For example, suppose we want to keep track of how many times
    a specific function is called. We can set a counter attribute that we increment
    after every call.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Another interesting use-case of function attributes is to set an `is_verbose`
    attribute to switch between printing extra information or not. This is often done
    by passing an extra parameter to the function. With function attributes, we would
    no longer require the extra parameter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 函数属性的另一个有趣用例是设置 `is_verbose` 属性，以便在打印额外信息时进行切换。这通常通过向函数传递一个额外的参数来实现。使用函数属性，我们将不再需要额外的参数。
- en: Another good example is to display the function’s docstring.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个好的例子是展示函数的文档字符串。
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: By calling the attribute `__name__`, we are instructing Python to print the
    function’s name. The `__doc__`, in turn, prints the function’s docstring.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用属性 `__name__`，我们指示 Python 打印函数的名称。`__doc__` 则打印函数的文档字符串。
- en: 'There are numerous uses for function attributes. You can read more about them
    here:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 函数属性有许多用途。你可以在这里阅读更多关于它们的内容：
- en: '[## PEP 232 - Function Attributes'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[## PEP 232 - 函数属性'
- en: This PEP describes an extension to Python, adding attribute dictionaries to
    functions and methods. This PEP tracks the…
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这个 PEP 描述了对 Python 的扩展，为函数和方法添加属性字典。这个 PEP 跟踪了……
- en: peps.python.org](https://peps.python.org/pep-0232/?source=post_page-----a0172e0bd98e--------------------------------)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[peps.python.org](https://peps.python.org/pep-0232/?source=post_page-----a0172e0bd98e--------------------------------)'
- en: 'Hidden Feature 5: Ternary Operator'
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隐藏特性 5：三元运算符
- en: The ternary operator in Python is a way to define an `if-else` statement as
    a one-liner.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的三元运算符是一种将 `if-else` 语句定义为单行代码的方法。
- en: 'Consider the below example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑下面的示例：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can obtain the same functionality using the ternary operator syntax as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用三元运算符语法来获得相同的功能，如下所示：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**You can find the second part of this series here:**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**你可以在这里找到本系列的第二部分：**'
- en: '[](/5-more-awesome-python-hidden-features-part-2-160a533c212b?source=post_page-----a0172e0bd98e--------------------------------)
    [## 5 More Awesome Python Hidden Features — Part 2'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 5 个更多令人惊叹的 Python 隐藏特性 — 第二部分](/5-more-awesome-python-hidden-features-part-2-160a533c212b?source=post_page-----a0172e0bd98e--------------------------------)'
- en: A look at some powerful features to unlock Python’s full potential
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索一些强大的功能以释放 Python 的全部潜力
- en: towardsdatascience.com](/5-more-awesome-python-hidden-features-part-2-160a533c212b?source=post_page-----a0172e0bd98e--------------------------------)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/5-more-awesome-python-hidden-features-part-2-160a533c212b?source=post_page-----a0172e0bd98e--------------------------------)
- en: Concluding Remarks
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we discussed 5 Python features that are not considered to be
    common knowledge. The purpose of these hidden features isn’t just for us to flex
    our Python muscles. They can really save us precious development time, improve
    the readability of our code, and also help us write more efficient and beautiful
    code.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们讨论了 5 个不被认为是常识的 Python 特性。这些隐藏特性的目的不仅仅是让我们炫耀 Python 技能。它们确实可以节省宝贵的开发时间，提高代码的可读性，并帮助我们编写更高效、更美观的代码。
- en: '**Did you enjoy this post? For $5/month, you can become a member to unlock
    unlimited access to Medium. You will be directly supporting me and all your other
    favourite writers on Medium. So huge thanks for that!**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**你喜欢这篇文章吗？每月 5 美元，你可以成为会员，解锁对 Medium 的无限访问权限。你将直接支持我和 Medium 上所有你喜欢的作家。非常感谢！**'
- en: '[](https://david-farrugia.medium.com/membership?source=post_page-----a0172e0bd98e--------------------------------)
    [## Join Medium with my referral link - David Farrugia'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 使用我的推荐链接加入 Medium - David Farrugia](https://david-farrugia.medium.com/membership?source=post_page-----a0172e0bd98e--------------------------------)'
- en: Read every story from David Farrugia (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 David Farrugia 的每一篇故事（以及 Medium 上成千上万的其他作家）。你的会员费用直接支持……
- en: david-farrugia.medium.com](https://david-farrugia.medium.com/membership?source=post_page-----a0172e0bd98e--------------------------------)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[david-farrugia.medium.com](https://david-farrugia.medium.com/membership?source=post_page-----a0172e0bd98e--------------------------------)'
- en: '**Perhaps you might also consider subscribing to my email list to get notified
    whenever I publish new content. It’s free :)**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**也许你还可以考虑订阅我的邮件列表，以便在我发布新内容时收到通知。这个服务是免费的 :)**'
- en: '[](https://david-farrugia.medium.com/subscribe?source=post_page-----a0172e0bd98e--------------------------------)
    [## Get an email whenever David Farrugia publishes.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 获取 David Farrugia 发布内容的邮件通知](https://david-farrugia.medium.com/subscribe?source=post_page-----a0172e0bd98e--------------------------------)'
- en: Get an email whenever David Farrugia publishes. By signing up, you will create
    a Medium account if you don't already…
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每当 David Farrugia 发布新内容时，你会收到一封邮件。通过注册，你将创建一个 Medium 帐户（如果你还没有的话）……
- en: david-farrugia.medium.com](https://david-farrugia.medium.com/subscribe?source=post_page-----a0172e0bd98e--------------------------------)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[david-farrugia.medium.com](https://david-farrugia.medium.com/subscribe?source=post_page-----a0172e0bd98e--------------------------------)'
- en: Want to Get in Touch?
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 想要联系我吗？
- en: I would love to hear your thoughts on the topic, or anything AI and Data.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我很想听听你对这个话题的看法，或者关于人工智能和数据的任何意见。
- en: Drop me an email at ***davidfarrugia53@gmail.com*** should you wish to get in
    touch.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望联系我，可以发邮件到***davidfarrugia53@gmail.com***。
- en: '[Linkedin](https://www.linkedin.com/in/david-farrugia/)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[Linkedin](https://www.linkedin.com/in/david-farrugia/)'
