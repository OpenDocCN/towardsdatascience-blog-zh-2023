- en: Introduction to Mathematical Optimisation in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中的数学优化介绍
- en: 原文：[https://towardsdatascience.com/introduction-to-mathematical-optimisation-in-python-b88e6556f9e](https://towardsdatascience.com/introduction-to-mathematical-optimisation-in-python-b88e6556f9e)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/introduction-to-mathematical-optimisation-in-python-b88e6556f9e](https://towardsdatascience.com/introduction-to-mathematical-optimisation-in-python-b88e6556f9e)
- en: Data Science Fundamentals
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据科学基础
- en: Beginner’s practical guide to discrete optimisation in Python
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 中离散优化的初学者实用指南
- en: '[](https://zluvsand.medium.com/?source=post_page-----b88e6556f9e--------------------------------)[![Zolzaya
    Luvsandorj](../Images/dd3bb91f8625a6fbe8fd26e56036ad29.png)](https://zluvsand.medium.com/?source=post_page-----b88e6556f9e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b88e6556f9e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b88e6556f9e--------------------------------)
    [Zolzaya Luvsandorj](https://zluvsand.medium.com/?source=post_page-----b88e6556f9e--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://zluvsand.medium.com/?source=post_page-----b88e6556f9e--------------------------------)[![Zolzaya
    Luvsandorj](../Images/dd3bb91f8625a6fbe8fd26e56036ad29.png)](https://zluvsand.medium.com/?source=post_page-----b88e6556f9e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b88e6556f9e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b88e6556f9e--------------------------------)
    [Zolzaya Luvsandorj](https://zluvsand.medium.com/?source=post_page-----b88e6556f9e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b88e6556f9e--------------------------------)
    ·10 min read·Dec 2, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b88e6556f9e--------------------------------)
    ·10 min 阅读·2023年12月2日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: 'Data Scientists tackle a wide range of real-life problems using data and various
    techniques. Mathematical optimisation, a powerful technique that can be applied
    to a wide range of problems in many domains, makes a great investment to Data
    Scientists’ toolkit. In this practical introductory post, we will familiarise
    with three popular optimisation libraries in Python: Google’s [OR-Tools](https://developers.google.com/optimization),
    IBM’s [DOcplex](https://www.ibm.com/docs/en/icos/12.9.0?topic=docplex-python-modeling-api)
    and COIN-OR Foundation’s [PuLP.](https://coin-or.github.io/pulp/)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家使用数据和各种技术解决广泛的实际问题。数学优化是一种强大的技术，可以应用于许多领域的广泛问题，是数据科学家工具箱中的一项重要投资。在这篇实用的入门文章中，我们将熟悉
    Python 中的三个流行优化库：Google 的 [OR-Tools](https://developers.google.com/optimization)、IBM
    的 [DOcplex](https://www.ibm.com/docs/en/icos/12.9.0?topic=docplex-python-modeling-api)
    和 COIN-OR 基金会的 [PuLP](https://coin-or.github.io/pulp/)
- en: '![](../Images/8110e850abb6f32c794b985530fffe78.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8110e850abb6f32c794b985530fffe78.png)'
- en: Photo by [Akhilesh Sharma](https://unsplash.com/@fotonium?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Akhilesh Sharma](https://unsplash.com/@fotonium?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 📍 Overview
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 📍 概述
- en: 'Mathematical optimisation is about finding *optimal choice* for a *quantitative
    problem* within *predefined bounds*. It has three components:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数学优化是关于在*预定义的范围*内为*定量问题*找到*最优选择*。它有三个组成部分：
- en: '**Objective function(s):** Tells us how good a solution is and allows us to
    compare solutions. An optimal solution is the one that maximises or minimises
    objective function depending on the use case.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标函数：** 告诉我们一个解决方案的好坏，并允许我们比较不同的解决方案。一个最优解决方案是根据使用情况最大化或最小化目标函数的解决方案。'
- en: ▶ ️In some cases, there can be multiple objective functions. This adds complexity
    in determining what an optimal solution is.
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ▶ ️在某些情况下，可能会有多个目标函数。这会增加确定最优解的复杂性。
- en: ▶ ️In some cases, there may be no objective function. Such optimisation problems
    are called feasibility problems.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ▶ ️在某些情况下，可能没有目标函数。这种优化问题称为可行性问题。
- en: '**Decision variable(s):** Represents a value or values we want to find out,
    the answer we are looking for in a quantitative problem. Optimisation can be split
    into two kinds depending on the type of decision variables:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**决策变量：** 代表我们想要找出的值或值的集合，即我们在定量问题中寻找的答案。根据决策变量的类型，优化可以分为两种：'
- en: '▶ ️ *Discrete optimisation*: Decision variables are discrete. Allocating timetable
    and finding shortest travel path between two locations are some examples of discrete
    optimisation. If you want to learn more about discrete optimisation, [this course](https://www.coursera.org/learn/discrete-optimization)
    and/or [this guide](https://www.math.uwaterloo.ca/~bico/papers/comp_chapter1.pdf#:~:text=Discrete%20optimization%20is%20the%20study%20of%20problems%20that,the%20best%20alternative%20from%20a%20%EF%AC%81eld%20of%20possibilities.)
    might be of interest to you.'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ▶️ *离散优化：* 决策变量是离散的。分配时间表和寻找两个地点之间的最短旅行路径是一些离散优化的例子。如果你想了解更多关于离散优化的信息，[这个课程](https://www.coursera.org/learn/discrete-optimization)和/或[这个指南](https://www.math.uwaterloo.ca/~bico/papers/comp_chapter1.pdf#:~:text=Discrete%20optimization%20is%20the%20study%20of%20problems%20that,the%20best%20alternative%20from%20a%20%EF%AC%81eld%20of%20possibilities.)
    可能会对你有兴趣。
- en: ▶ ️*Continuous optimisation:* Decision variables are continuous. You may have
    already heard of the term optimisation in the context of machine learning. Machine
    learning is one example area where continuous optimisation is used. If you want
    to learn more about continuous optimisation, you may find [this tutorial](https://www.youtube.com/watch?v=PoTpmjvHxlg)
    useful.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ▶️ *连续优化：* 决策变量是连续的。你可能已经听说过机器学习中的优化术语。机器学习是使用连续优化的一个例子。如果你想了解更多关于连续优化的信息，你可以参考[这个教程](https://www.youtube.com/watch?v=PoTpmjvHxlg)。
- en: '**Constraint(s):** Defines feasible range of solutions for the decision variables.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**约束条件：** 定义了决策变量的可行解范围。'
- en: ▶ ️In some continuous optimisation problems, there may be no constraints. This
    is called unconstrained optimisation.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ▶️ 在一些连续优化问题中，可能没有约束条件。这被称为无约束优化。
- en: In this tutorial, we will focus on a discrete optimisation with a single objective.
    In this type of optimisation problem, we want to find a combination of feasible
    value(s) for decision variable(s) such that it either minimises or maximises the
    objective function subject to the constraints.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将专注于具有单一目标的离散优化。在这种类型的优化问题中，我们希望找到决策变量的可行值组合，以使其在满足约束条件的情况下最小化或最大化目标函数。
- en: 📍 Toy example
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 📍 示例
- en: Having covered the very basics, let’s look at an example before we dive into
    Python. We will look at an example business case that is simple enough to manually
    find the optimal solution. This way, it will be easier to familiarise with the
    libraries without overwhelming ourselves.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了基本知识后，让我们看一个例子，然后再深入了解Python。我们将研究一个足够简单的业务案例，以便手动找到最佳解决方案。这样，我们可以在不感到过于困惑的情况下熟悉这些库。
- en: 📌 Background
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 📌 背景
- en: '▶ ️Let’s imagine we operate a fashion factory manufacturing three items: scarves,
    hats and gloves. Each item has one design and one size. Let’s assume we know what
    the monthly market demands are:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: ▶️ 假设我们运营一家时尚工厂，生产三种物品：围巾、帽子和手套。每种物品有一个设计和一个尺寸。假设我们知道每月的市场需求：
- en: '![](../Images/1a5002f89b2e51aa775314a6795630e8.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1a5002f89b2e51aa775314a6795630e8.png)'
- en: Image by author
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: ▶️ We have a limited number of employees and machines at our disposal. The following
    table shows how much labour (employees) and production (machines) time we need
    to produce a unit of an item. For instance, we need 0.4 labour time and 0.1 production
    time to produce a scarf. The table also shows the total labour and production
    time we have available for a month. Lastly, we can see the profit of each item
    in the last row.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: ▶️ 我们拥有有限数量的员工和机器。下表显示了生产一个单位物品所需的劳动（员工）和生产（机器）时间。例如，生产一条围巾需要0.4小时的劳动时间和0.1小时的生产时间。表中还显示了我们一个月内可用的总劳动和生产时间。最后，我们可以在最后一行看到每件物品的利润。
- en: '![](../Images/2b44d74a769a513a590abebee38f35fb.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2b44d74a769a513a590abebee38f35fb.png)'
- en: Image by author
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: ▶️ Our business objective is to find out how many scarves, hats and gloves to
    produce in order to maximise our profit.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: ▶️ 我们的业务目标是确定生产多少围巾、帽子和手套，以最大化我们的利润。
- en: Now let’s translate this business problem into the three components.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们把这个业务问题分解为三个组件。
- en: ▶️ **Decision variables:** All decision variables must be an integer.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: ▶️ **决策变量：** 所有决策变量必须是整数。
- en: '![](../Images/c21eec6f121e01a30cfcf24839d50d11.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c21eec6f121e01a30cfcf24839d50d11.png)'
- en: Image by author
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: ▶️ **An objective function:** We have a single objective function.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: ▶️ **目标函数：** 我们有一个目标函数。
- en: '![](../Images/5944cb92d128e3eb465d4ae1444fad84.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5944cb92d128e3eb465d4ae1444fad84.png)'
- en: Image by author
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: ▶️ **Constraints:** Although not explicitly said, we don’t want to produce any
    item more than its market demand. Otherwise, this will leave us with unsold items.
    We also need to ensure that resources required to produce are within labour and
    production limits, in other words, feasible.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: ▶️ **约束条件：** 虽然没有明确说明，我们不希望生产任何超过市场需求的物品。否则，这将导致我们有未售出的物品。我们还需要确保生产所需的资源在劳动和生产限制范围内，换句话说，即可行。
- en: '![](../Images/e34bfd3a2b6fa623df9351a324e9fea4.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e34bfd3a2b6fa623df9351a324e9fea4.png)'
- en: Image by author
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 📌 Manual solution
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 📌 手动解决方案
- en: One naive approach to solve this problem would be to pick random numbers within
    demand, check if they are feasible and compare their profits. For instance, 5000
    scarves, 4000 hats and 6000 gloves. However, comparing handful solutions in this
    way may leave us with less-than-optimal profit. To be thorough, we can use brute
    force approach to go through all combinations (7,001 x 9,001 x 8,001 ≈ 500 billion).
    However, this approach seems inefficient, tedious and computationally expensive.
    Surely, there has to be a smarter way.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一种解决这个问题的幼稚方法是从需求范围内选择随机数字，检查它们是否可行并比较它们的利润。例如，5,000条围巾、4,000顶帽子和6,000双手套。然而，以这种方式比较少量解决方案可能会导致利润不尽如人意。为了彻底，我们可以使用暴力方法遍历所有组合（7,001
    x 9,001 x 8,001 ≈ 5000亿）。然而，这种方法似乎效率低下、繁琐且计算成本高。肯定还有更聪明的方法。
- en: Instead, we can intuitively approach this problem by applying a simple logic/common
    sense. We will find the item yields the highest profit.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以通过应用简单的逻辑/常识直观地解决这个问题。我们将找到带来最高利润的物品。
- en: '![](../Images/6fca2be46c66ac914bff3f3946ae10a6.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6fca2be46c66ac914bff3f3946ae10a6.png)'
- en: Image by author
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'The table above shows that gloves are the most profitable item. With 1.2 labour
    time and 0.3 production time, we earn $48 from gloves and $45 from scarves and
    $0 from hats. Since we have sufficient resources, we will produce the maximum
    number of gloves (8,000). With the remaining resources, we will compare two options:
    prioritise *scarves* vs *hats*.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上表显示手套是最有利可图的物品。用1.2小时的劳动时间和0.3小时的生产时间，我们从手套中赚取$48，从围巾中赚取$45，从帽子中赚取$0。由于资源充足，我们将生产最大数量的手套（8,000）。在剩余资源下，我们将比较两种选择：优先生产*围巾*还是*帽子*。
- en: '![](../Images/91a77cb2ee1d9ee2b65dafd2de2ad21e.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/91a77cb2ee1d9ee2b65dafd2de2ad21e.png)'
- en: Image by author
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: We see that prioritising scarves is more profitable. Therefore, we will produce
    7,000 scarves, 5,000 hats and 8,000 gloves to maximise profit.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现优先生产围巾更有利可图。因此，我们将生产7,000条围巾、5,000顶帽子和8,000双手套以最大化利润。
- en: 📍 Optimisation in Python
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 📍 Python中的优化
- en: 'Now, we will use optimisation algorithms to efficiently find the optimal solution
    with minimal effort in Python using three different optimisation libraries. Before
    we dive into the libraries, let’s save the key pieces of information into dictionaries:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用优化算法在Python中利用三种不同的优化库高效地找到*最佳*解决方案。在深入研究这些库之前，让我们将关键信息保存到字典中：
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It’s time to familiarise with a term *solver* as we will be using this term
    quite frequently.Solver is a tool that solves optimisation problems by applying
    optimisation algorithms. Now, let’s dive in.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候了解一下*求解器*这个术语了，因为我们将经常使用这个术语。求解器是通过应用优化算法来解决优化问题的工具。现在，让我们深入了解一下。
- en: 📌 OR-Tools
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 📌 OR-Tools
- en: 'The first library we are going to familiarise is: Google’s OR-Tools. Here,
    OR stands for [Operations Research](https://research.google/teams/operations-research/).
    This optimisation tool is an open-source software. We will first use their CP-SAT
    solver to find our decision variables. This solver is a [constraint programming
    solver that uses SAT (satisfiability) methods](https://developers.google.com/optimization/cp/#:~:text=Tools%20Google%20provides%20few%20ways%20to%20solve%20CP,constraint%20programming%20solver%20that%20uses%20SAT%20%28satisfiability%29%20methods.).
    To learn more about the solver, check out [this Master Class](https://www.youtube.com/watch?v=lmy1ddn4cyw).'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要熟悉的第一个库是：谷歌的OR-Tools。这里，OR代表[运筹学](https://research.google/teams/operations-research/)。这个优化工具是开源软件。我们将首先使用他们的CP-SAT求解器来找出我们的决策变量。这个求解器是一个[使用SAT（可满足性）方法的约束编程求解器](https://developers.google.com/optimization/cp/#:~:text=Tools%20Google%20provides%20few%20ways%20to%20solve%20CP,constraint%20programming%20solver%20that%20uses%20SAT%20%28satisfiability%29%20methods.)。要了解更多关于求解器的信息，请查看[这个大师班](https://www.youtube.com/watch?v=lmy1ddn4cyw)。
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/19a728eb5f2e44e3bc080495ecbbdda5.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/19a728eb5f2e44e3bc080495ecbbdda5.png)'
- en: Image by author
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Here we made sure to use integers when setting decision variables and constraints.
    We also converted labour and production costs to integers by multiplying them
    by a constant and converting their type while keeping their ratios.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们确保在设置决策变量和约束时使用整数。我们还通过将劳动和生产成本乘以常数并转换其类型，同时保持其比例，来将其转换为整数。
- en: 'Now, let’s use a linear solver and see how the syntax compares:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用线性求解器看看语法的对比：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/f428266eca4687c6bfd47bf0e8b2a6c0.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f428266eca4687c6bfd47bf0e8b2a6c0.png)'
- en: Image by author
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: This syntax looks pretty similar to the previous syntax. When using linear solver,
    we were able to use labour and production cost as is, without needing to convert
    into integers.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这种语法看起来与之前的语法非常相似。在使用线性求解器时，我们能够直接使用劳动和生产成本，而无需将其转换为整数。
- en: Here’s an alternative syntax that achieves the same. The main difference is
    how we set the constraints and the objective function.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一种替代的语法可以实现相同的功能。主要的区别在于我们如何设置约束条件和目标函数。
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: That was it for OR-Tools! Hopefully, now you have a basic understanding of how
    the syntax works.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 OR-Tools 的全部内容！希望现在你对语法的基本工作原理有了基本的了解。
- en: 🔗 To learn more, check out the following additional resources:◼️ [OR-Tools Python
    examples in GitHub](https://github.com/google/or-tools/tree/stable/examples/python)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 🔗 要了解更多信息，请查看以下附加资源：◼️ [OR-Tools Python 示例 GitHub](https://github.com/google/or-tools/tree/stable/examples/python)
- en: ◼️ [OR-Tools Examples | Google Developers](https://developers.google.com/optimization/examples)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ◼️ [OR-Tools 示例 | Google 开发者](https://developers.google.com/optimization/examples)
- en: 📌 DOcplex
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 📌 DOcplex
- en: 'The next library we will familiarise is DOcplex, a library developed by IBM.
    This tool is a commercial product, so the free version has limited solving capacities.
    Here’s how we can solve our example problem using its constraint programming solver:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要熟悉的库是 DOcplex，这是 IBM 开发的一个库。这个工具是商业产品，因此免费版本的求解能力有限。下面是我们如何使用其约束编程求解器解决示例问题的方法：
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/82abc0b4d2bc465843064291ca64c954.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/82abc0b4d2bc465843064291ca64c954.png)'
- en: Image by author | Partial output only
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片 | 仅部分输出
- en: We can see lots of details about the solution from the output.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从输出中看到很多关于解决方案的细节。
- en: 'The syntax is quite similar to the OR-Tool’s syntax, isn’t it? We can solve
    this example using its mathematical programming solver by changing the first two
    lines:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这种语法与 OR-Tool 的语法非常相似，不是吗？我们可以通过修改前两行来使用其数学编程求解器解决这个例子：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Of note, the following code snippet regarding `name` and `value`
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，以下关于`name`和`value`的代码片段
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'can also be obtained in this way:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过这种方式获得：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That was the basics of DOcplex!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 DOcplex 的基础内容！
- en: 🔗 To learn more, check out the following additional resources:◼️ [DOcplex Constraint
    Programming Jupyter Notebook examples](https://github.com/IBMDecisionOptimization/docplex-examples/tree/master/examples/cp/jupyter)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 🔗 要了解更多信息，请查看以下附加资源：◼️ [DOcplex 约束编程 Jupyter Notebook 示例](https://github.com/IBMDecisionOptimization/docplex-examples/tree/master/examples/cp/jupyter)
- en: ◼️ [DOcplex Mathematical Programming Jupyter Notebook examples](https://github.com/IBMDecisionOptimization/docplex-examples/tree/master/examples/cp/jupyter)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: ◼️ [DOcplex 数学编程 Jupyter Notebook 示例](https://github.com/IBMDecisionOptimization/docplex-examples/tree/master/examples/cp/jupyter)
- en: ◼️ [Mathematical programming versus constraint programming](http://ibmdecisionoptimization.github.io/docplex-doc/mp_vs_cp.html)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: ◼️ [数学规划与约束编程](http://ibmdecisionoptimization.github.io/docplex-doc/mp_vs_cp.html)
- en: 📌 PuLP
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 📌 PuLP
- en: 'Last but not least, we are going to familiarise with PuLP, a library that provides
    linear programming solvers. PuLP is also an open-source software. Here’s one way
    we can use its linear solver to find optimal solution to our example:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们将熟悉 PuLP，这是一个提供线性编程求解器的库。PuLP 也是开源软件。下面是我们可以使用其线性求解器找到示例问题最优解的一种方法：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/f97a4fe1ef0fedc70dc825a537290f32.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f97a4fe1ef0fedc70dc825a537290f32.png)'
- en: Image by author | Partial output only
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片 | 仅部分输出
- en: It may be worth mentioning that you will see `from pulp import *` in PuLP’s
    official documentation. However, I haven’t imported the library this way as I
    want to explicitly show where functions such as `LpProblem` is coming from.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，你会在 PuLP 的官方文档中看到`from pulp import *`。然而，我没有以这种方式导入库，因为我想明确地显示像`LpProblem`这样的函数的来源。
- en: 🔗 To learn more, check out the following additional resources:◼️ [PuLP Case
    Studies](https://coin-or.github.io/pulp/CaseStudies/index.html)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 🔗 要了解更多信息，请查看以下附加资源：◼️ [PuLP 案例研究](https://coin-or.github.io/pulp/CaseStudies/index.html)
- en: '![](../Images/a26bc6fc729166e9294c494ad9863b5f.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a26bc6fc729166e9294c494ad9863b5f.png)'
- en: Photo by [Michael Dziedzic](https://unsplash.com/@lazycreekimages?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Michael Dziedzic](https://unsplash.com/@lazycreekimages?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 'Voila, that was it for this post! Optimisation is a vast field with many interesting
    widespread applications in diverse range of domains. I hope this post has given
    you a brief introduction to three popular optimisation libraries in Python and
    expanded your bag of tricks. Here’re some more additional resources that might
    help deepen your understanding of optimisation:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样，这篇文章到此为止！优化是一个广泛的领域，在各种领域中都有许多有趣的应用。我希望这篇文章能为你介绍 Python 中的三个流行优化库，并扩展你的技巧库。这里有一些额外的资源，可能有助于加深你对优化的理解：
- en: 🔗 [Introduction to Mathematical Optimization (stanford.edu)](https://web.stanford.edu/group/sisl/k12/optimization/MO-unit1-pdfs/1.1optimization.pdf)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 🔗 [数学优化导论 (stanford.edu)](https://web.stanford.edu/group/sisl/k12/optimization/MO-unit1-pdfs/1.1optimization.pdf)
- en: 🔗 [A practical guide to discrete optimisation](https://www.math.uwaterloo.ca/~bico/papers/comp_chapter1.pdf#:~:text=Discrete%20optimization%20is%20the%20study%20of%20problems%20that,the%20best%20alternative%20from%20a%20%EF%AC%81eld%20of%20possibilities.)
    (Chapter 1)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 🔗 [离散优化的实用指南](https://www.math.uwaterloo.ca/~bico/papers/comp_chapter1.pdf#:~:text=Discrete%20optimization%20is%20the%20study%20of%20problems%20that,the%20best%20alternative%20from%20a%20%EF%AC%81eld%20of%20possibilities.)
    (第 1 章)
- en: 🔗 [Basic optimisation concepts](https://sboyles.github.io/teaching/ce377k/introduction.pdf)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 🔗 [基本优化概念](https://sboyles.github.io/teaching/ce377k/introduction.pdf)
- en: 'Thank you for reading this article. If you are interested, here are links to
    some of my other posts:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你阅读这篇文章。如果你感兴趣，以下是我其他一些文章的链接：
- en: ◼️ ️️[Propensity Score Matching](/propensity-score-matching-a0d373863eec)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: ◼️ ️️[倾向评分匹配](/propensity-score-matching-a0d373863eec)
- en: ◼️ [Enrich your GitHub profile with these tips](/enrich-your-github-profile-with-these-tips-272fa1eafe05)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: ◼️ [通过这些技巧丰富你的 GitHub 个人资料](/enrich-your-github-profile-with-these-tips-272fa1eafe05)
- en: ◼️️ [From ML Model to ML Pipeline](/from-ml-model-to-ml-pipeline-9f95c32c6512)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: ◼️️ [从 ML 模型到 ML 管道](/from-ml-model-to-ml-pipeline-9f95c32c6512)
- en: ◼️️ [Simple Ways to Create Synthetic Dataset in Python](https://medium.com/towards-data-science/simple-ways-to-create-synthetic-dataset-in-python-76a8e9a2f35c)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ◼️️ [在 Python 中创建合成数据集的简单方法](https://medium.com/towards-data-science/simple-ways-to-create-synthetic-dataset-in-python-76a8e9a2f35c)
- en: ◼️️ [Explaining Scikit-learn models with SHAP](/explaining-scikit-learn-models-with-shap-61daff21b12a)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: ◼️️ [使用 SHAP 解释 Scikit-learn 模型](/explaining-scikit-learn-models-with-shap-61daff21b12a)
- en: ◼️️ [4 simple tips for plotting multiple graphs in Python](/4-simple-tips-for-plotting-multiple-graphs-in-python-38df2112965c)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: ◼️️ [在 Python 中绘制多个图表的 4 个简单技巧](/4-simple-tips-for-plotting-multiple-graphs-in-python-38df2112965c)
- en: ◼️ [Prettifying pandas DataFrames](/prettifying-pandas-dataframes-75c1a1a6877d)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: ◼️ [美化 pandas DataFrames](/prettifying-pandas-dataframes-75c1a1a6877d)
- en: ◼ [Simple data visualisations in Python that you will find useful](/simple-data-visualisations-in-python-that-you-will-find-useful-5e42c92df51e)️
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: ◼ [你会发现有用的 Python 简单数据可视化](/simple-data-visualisations-in-python-that-you-will-find-useful-5e42c92df51e)️
- en: ◼️ [6 simple tips for prettier and customised plots in Seaborn (Python)](/6-simple-tips-for-prettier-and-customised-plots-in-seaborn-python-22f02ecc2393)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: ◼️ [在 Seaborn (Python) 中创建更美观和定制的图表的 6 个简单技巧](/6-simple-tips-for-prettier-and-customised-plots-in-seaborn-python-22f02ecc2393)
- en: Bye for now 🏃 💨
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时告别 🏃 💨
