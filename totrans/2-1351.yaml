- en: Introduction to Mathematical Optimisation in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/introduction-to-mathematical-optimisation-in-python-b88e6556f9e](https://towardsdatascience.com/introduction-to-mathematical-optimisation-in-python-b88e6556f9e)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data Science Fundamentals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Beginner‚Äôs practical guide to discrete optimisation in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://zluvsand.medium.com/?source=post_page-----b88e6556f9e--------------------------------)[![Zolzaya
    Luvsandorj](../Images/dd3bb91f8625a6fbe8fd26e56036ad29.png)](https://zluvsand.medium.com/?source=post_page-----b88e6556f9e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b88e6556f9e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b88e6556f9e--------------------------------)
    [Zolzaya Luvsandorj](https://zluvsand.medium.com/?source=post_page-----b88e6556f9e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b88e6556f9e--------------------------------)
    ¬∑10 min read¬∑Dec 2, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: 'Data Scientists tackle a wide range of real-life problems using data and various
    techniques. Mathematical optimisation, a powerful technique that can be applied
    to a wide range of problems in many domains, makes a great investment to Data
    Scientists‚Äô toolkit. In this practical introductory post, we will familiarise
    with three popular optimisation libraries in Python: Google‚Äôs [OR-Tools](https://developers.google.com/optimization),
    IBM‚Äôs [DOcplex](https://www.ibm.com/docs/en/icos/12.9.0?topic=docplex-python-modeling-api)
    and COIN-OR Foundation‚Äôs [PuLP.](https://coin-or.github.io/pulp/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8110e850abb6f32c794b985530fffe78.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Akhilesh Sharma](https://unsplash.com/@fotonium?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: üìç Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Mathematical optimisation is about finding *optimal choice* for a *quantitative
    problem* within *predefined bounds*. It has three components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Objective function(s):** Tells us how good a solution is and allows us to
    compare solutions. An optimal solution is the one that maximises or minimises
    objective function depending on the use case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‚ñ∂ Ô∏èIn some cases, there can be multiple objective functions. This adds complexity
    in determining what an optimal solution is.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ‚ñ∂ Ô∏èIn some cases, there may be no objective function. Such optimisation problems
    are called feasibility problems.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Decision variable(s):** Represents a value or values we want to find out,
    the answer we are looking for in a quantitative problem. Optimisation can be split
    into two kinds depending on the type of decision variables:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‚ñ∂ Ô∏è *Discrete optimisation*: Decision variables are discrete. Allocating timetable
    and finding shortest travel path between two locations are some examples of discrete
    optimisation. If you want to learn more about discrete optimisation, [this course](https://www.coursera.org/learn/discrete-optimization)
    and/or [this guide](https://www.math.uwaterloo.ca/~bico/papers/comp_chapter1.pdf#:~:text=Discrete%20optimization%20is%20the%20study%20of%20problems%20that,the%20best%20alternative%20from%20a%20%EF%AC%81eld%20of%20possibilities.)
    might be of interest to you.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ‚ñ∂ Ô∏è*Continuous optimisation:* Decision variables are continuous. You may have
    already heard of the term optimisation in the context of machine learning. Machine
    learning is one example area where continuous optimisation is used. If you want
    to learn more about continuous optimisation, you may find [this tutorial](https://www.youtube.com/watch?v=PoTpmjvHxlg)
    useful.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Constraint(s):** Defines feasible range of solutions for the decision variables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‚ñ∂ Ô∏èIn some continuous optimisation problems, there may be no constraints. This
    is called unconstrained optimisation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this tutorial, we will focus on a discrete optimisation with a single objective.
    In this type of optimisation problem, we want to find a combination of feasible
    value(s) for decision variable(s) such that it either minimises or maximises the
    objective function subject to the constraints.
  prefs: []
  type: TYPE_NORMAL
- en: üìç Toy example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having covered the very basics, let‚Äôs look at an example before we dive into
    Python. We will look at an example business case that is simple enough to manually
    find the optimal solution. This way, it will be easier to familiarise with the
    libraries without overwhelming ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: üìå Background
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '‚ñ∂ Ô∏èLet‚Äôs imagine we operate a fashion factory manufacturing three items: scarves,
    hats and gloves. Each item has one design and one size. Let‚Äôs assume we know what
    the monthly market demands are:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1a5002f89b2e51aa775314a6795630e8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: ‚ñ∂Ô∏è We have a limited number of employees and machines at our disposal. The following
    table shows how much labour (employees) and production (machines) time we need
    to produce a unit of an item. For instance, we need 0.4 labour time and 0.1 production
    time to produce a scarf. The table also shows the total labour and production
    time we have available for a month. Lastly, we can see the profit of each item
    in the last row.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2b44d74a769a513a590abebee38f35fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: ‚ñ∂Ô∏è Our business objective is to find out how many scarves, hats and gloves to
    produce in order to maximise our profit.
  prefs: []
  type: TYPE_NORMAL
- en: Now let‚Äôs translate this business problem into the three components.
  prefs: []
  type: TYPE_NORMAL
- en: ‚ñ∂Ô∏è **Decision variables:** All decision variables must be an integer.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c21eec6f121e01a30cfcf24839d50d11.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: ‚ñ∂Ô∏è **An objective function:** We have a single objective function.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5944cb92d128e3eb465d4ae1444fad84.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: ‚ñ∂Ô∏è **Constraints:** Although not explicitly said, we don‚Äôt want to produce any
    item more than its market demand. Otherwise, this will leave us with unsold items.
    We also need to ensure that resources required to produce are within labour and
    production limits, in other words, feasible.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e34bfd3a2b6fa623df9351a324e9fea4.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: üìå Manual solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One naive approach to solve this problem would be to pick random numbers within
    demand, check if they are feasible and compare their profits. For instance, 5000
    scarves, 4000 hats and 6000 gloves. However, comparing handful solutions in this
    way may leave us with less-than-optimal profit. To be thorough, we can use brute
    force approach to go through all combinations (7,001 x 9,001 x 8,001 ‚âà 500 billion).
    However, this approach seems inefficient, tedious and computationally expensive.
    Surely, there has to be a smarter way.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, we can intuitively approach this problem by applying a simple logic/common
    sense. We will find the item yields the highest profit.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6fca2be46c66ac914bff3f3946ae10a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'The table above shows that gloves are the most profitable item. With 1.2 labour
    time and 0.3 production time, we earn $48 from gloves and $45 from scarves and
    $0 from hats. Since we have sufficient resources, we will produce the maximum
    number of gloves (8,000). With the remaining resources, we will compare two options:
    prioritise *scarves* vs *hats*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/91a77cb2ee1d9ee2b65dafd2de2ad21e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: We see that prioritising scarves is more profitable. Therefore, we will produce
    7,000 scarves, 5,000 hats and 8,000 gloves to maximise profit.
  prefs: []
  type: TYPE_NORMAL
- en: üìç Optimisation in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will use optimisation algorithms to efficiently find the optimal solution
    with minimal effort in Python using three different optimisation libraries. Before
    we dive into the libraries, let‚Äôs save the key pieces of information into dictionaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It‚Äôs time to familiarise with a term *solver* as we will be using this term
    quite frequently.Solver is a tool that solves optimisation problems by applying
    optimisation algorithms. Now, let‚Äôs dive in.
  prefs: []
  type: TYPE_NORMAL
- en: üìå OR-Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first library we are going to familiarise is: Google‚Äôs OR-Tools. Here,
    OR stands for [Operations Research](https://research.google/teams/operations-research/).
    This optimisation tool is an open-source software. We will first use their CP-SAT
    solver to find our decision variables. This solver is a [constraint programming
    solver that uses SAT (satisfiability) methods](https://developers.google.com/optimization/cp/#:~:text=Tools%20Google%20provides%20few%20ways%20to%20solve%20CP,constraint%20programming%20solver%20that%20uses%20SAT%20%28satisfiability%29%20methods.).
    To learn more about the solver, check out [this Master Class](https://www.youtube.com/watch?v=lmy1ddn4cyw).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/19a728eb5f2e44e3bc080495ecbbdda5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Here we made sure to use integers when setting decision variables and constraints.
    We also converted labour and production costs to integers by multiplying them
    by a constant and converting their type while keeping their ratios.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let‚Äôs use a linear solver and see how the syntax compares:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f428266eca4687c6bfd47bf0e8b2a6c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: This syntax looks pretty similar to the previous syntax. When using linear solver,
    we were able to use labour and production cost as is, without needing to convert
    into integers.
  prefs: []
  type: TYPE_NORMAL
- en: Here‚Äôs an alternative syntax that achieves the same. The main difference is
    how we set the constraints and the objective function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: That was it for OR-Tools! Hopefully, now you have a basic understanding of how
    the syntax works.
  prefs: []
  type: TYPE_NORMAL
- en: üîó To learn more, check out the following additional resources:‚óºÔ∏è [OR-Tools Python
    examples in GitHub](https://github.com/google/or-tools/tree/stable/examples/python)
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏è [OR-Tools Examples | Google Developers](https://developers.google.com/optimization/examples)
  prefs: []
  type: TYPE_NORMAL
- en: üìå DOcplex
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next library we will familiarise is DOcplex, a library developed by IBM.
    This tool is a commercial product, so the free version has limited solving capacities.
    Here‚Äôs how we can solve our example problem using its constraint programming solver:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/82abc0b4d2bc465843064291ca64c954.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author | Partial output only
  prefs: []
  type: TYPE_NORMAL
- en: We can see lots of details about the solution from the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax is quite similar to the OR-Tool‚Äôs syntax, isn‚Äôt it? We can solve
    this example using its mathematical programming solver by changing the first two
    lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Of note, the following code snippet regarding `name` and `value`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'can also be obtained in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: That was the basics of DOcplex!
  prefs: []
  type: TYPE_NORMAL
- en: üîó To learn more, check out the following additional resources:‚óºÔ∏è [DOcplex Constraint
    Programming Jupyter Notebook examples](https://github.com/IBMDecisionOptimization/docplex-examples/tree/master/examples/cp/jupyter)
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏è [DOcplex Mathematical Programming Jupyter Notebook examples](https://github.com/IBMDecisionOptimization/docplex-examples/tree/master/examples/cp/jupyter)
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏è [Mathematical programming versus constraint programming](http://ibmdecisionoptimization.github.io/docplex-doc/mp_vs_cp.html)
  prefs: []
  type: TYPE_NORMAL
- en: üìå PuLP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Last but not least, we are going to familiarise with PuLP, a library that provides
    linear programming solvers. PuLP is also an open-source software. Here‚Äôs one way
    we can use its linear solver to find optimal solution to our example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f97a4fe1ef0fedc70dc825a537290f32.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author | Partial output only
  prefs: []
  type: TYPE_NORMAL
- en: It may be worth mentioning that you will see `from pulp import *` in PuLP‚Äôs
    official documentation. However, I haven‚Äôt imported the library this way as I
    want to explicitly show where functions such as `LpProblem` is coming from.
  prefs: []
  type: TYPE_NORMAL
- en: üîó To learn more, check out the following additional resources:‚óºÔ∏è [PuLP Case
    Studies](https://coin-or.github.io/pulp/CaseStudies/index.html)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a26bc6fc729166e9294c494ad9863b5f.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Michael Dziedzic](https://unsplash.com/@lazycreekimages?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'Voila, that was it for this post! Optimisation is a vast field with many interesting
    widespread applications in diverse range of domains. I hope this post has given
    you a brief introduction to three popular optimisation libraries in Python and
    expanded your bag of tricks. Here‚Äôre some more additional resources that might
    help deepen your understanding of optimisation:'
  prefs: []
  type: TYPE_NORMAL
- en: üîó [Introduction to Mathematical Optimization (stanford.edu)](https://web.stanford.edu/group/sisl/k12/optimization/MO-unit1-pdfs/1.1optimization.pdf)
  prefs: []
  type: TYPE_NORMAL
- en: üîó [A practical guide to discrete optimisation](https://www.math.uwaterloo.ca/~bico/papers/comp_chapter1.pdf#:~:text=Discrete%20optimization%20is%20the%20study%20of%20problems%20that,the%20best%20alternative%20from%20a%20%EF%AC%81eld%20of%20possibilities.)
    (Chapter 1)
  prefs: []
  type: TYPE_NORMAL
- en: üîó [Basic optimisation concepts](https://sboyles.github.io/teaching/ce377k/introduction.pdf)
  prefs: []
  type: TYPE_NORMAL
- en: 'Thank you for reading this article. If you are interested, here are links to
    some of my other posts:'
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏è Ô∏èÔ∏è[Propensity Score Matching](/propensity-score-matching-a0d373863eec)
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏è [Enrich your GitHub profile with these tips](/enrich-your-github-profile-with-these-tips-272fa1eafe05)
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏èÔ∏è [From ML Model to ML Pipeline](/from-ml-model-to-ml-pipeline-9f95c32c6512)
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏èÔ∏è [Simple Ways to Create Synthetic Dataset in Python](https://medium.com/towards-data-science/simple-ways-to-create-synthetic-dataset-in-python-76a8e9a2f35c)
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏èÔ∏è [Explaining Scikit-learn models with SHAP](/explaining-scikit-learn-models-with-shap-61daff21b12a)
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏èÔ∏è [4 simple tips for plotting multiple graphs in Python](/4-simple-tips-for-plotting-multiple-graphs-in-python-38df2112965c)
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏è [Prettifying pandas DataFrames](/prettifying-pandas-dataframes-75c1a1a6877d)
  prefs: []
  type: TYPE_NORMAL
- en: ‚óº [Simple data visualisations in Python that you will find useful](/simple-data-visualisations-in-python-that-you-will-find-useful-5e42c92df51e)Ô∏è
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏è [6 simple tips for prettier and customised plots in Seaborn (Python)](/6-simple-tips-for-prettier-and-customised-plots-in-seaborn-python-22f02ecc2393)
  prefs: []
  type: TYPE_NORMAL
- en: Bye for now üèÉ üí®
  prefs: []
  type: TYPE_NORMAL
