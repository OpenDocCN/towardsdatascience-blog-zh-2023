["```py\nclass charge():\n\n    def init(self, position, charge):\n        self.position = np.array(position)\n        self.charge = charge\n```", "```py\ndef coulombs_law(k,q,r):\n    F = k*q*r/(np.linalg.norm(r))**3\n    return F\n```", "```py\n#Define coulomb's constant and charge of our particle\nk = 8.9e9                           \nq = 0.1e-6    \n\n#Make our charged particle\nparticle = charge()\nparticle.init([0,0],q)\n\n#Define our source and observation points\nsource = np.array(particle.position)\nobservations = []\nr = []\nfield = []\n#Need to scale our vectors to always have a visible magnitude\nvisual_scale = []\n\n#Loop over points in a circle around our charge\nfor i in np.linspace(0,2*np.pi,20):\n    observations.append(np.array([0.1*np.cos(i),0.1*np.sin(i)]))          \n    r.append(observations[-1] - source)                \n    field.append(coulombs_law(k,q,r[-1]))  \n    visual_scale.append(np.linalg.norm(r[-1])/np.linalg.norm(field[-1])/2)  \n\n#Plot our particle and the vector field around it\nfig = plt.figure(figsize=(5,5))\nplt.plot(particle.position[0],particle.position[1],'ro')\n\nfor j in range(0, len(observations)):\n    plt.arrow(observations[j][0],observations[j][1],visual_scale[j]*field[j][0],visual_scale[j]*field[j][1])  \n\nplt.title(\"Positively Charged Particle\"); \n```", "```py\n#Define coulomb's constant and charge of our particle\nk = 8.9e9                           \nq = 0.1e-6  \n\n#Make our charges\nq1 = charge()\nq2 = charge()\nq1.init([0.4,0],q)\nq2.init([-0.4,0],-q)\n\n#Make a meshgrid of observation points\nx = np.linspace(-.8,.8,20)\nX,Y = np.meshgrid(x,x)\ngrid =[]\nfor i in range(0, len(X)):\n    for j in range(0, len(Y)):\n        grid.append([X[i][j],Y[i][j]])\n\n#Define our needed quantities\nobservations = np.array(grid)  \nr1 = []\nr2 = []\nfield1 = []\nfield2 = []\nfield_total = []\n\n#Loop through observation points\nfor n in range(0,len(observations)):\n\n    r1.append(observations[n] - q1.position)               \n    r2.append(observations[n] - q2.position)\n\n    field1.append(coulombs_law(k,q1.charge,r1[-1]))  \n    field2.append(coulombs_law(k,q2.charge,r2[-1]))\n    field_total.append(field1[-1]+field2[-1])\n\n#Scale x and y\nfield_total = np.array(field_total)\nscale_x = .3/max(field_total[:,0])\nscale_y = .3/max(field_total[:,1])\n\n#Plot vector field\nfig = plt.figure(figsize=(5,5))\n\nplt.plot(q1.position[0],q1.position[1],'ro', label = \"Positive\")\nplt.plot(q2.position[0],q2.position[1],'bo', label = \"Negitive\")\n\nfor j in range(0, len(observations)):\n    plt.arrow(observations[j][0],observations[j][1],scale_x*field_total[j][0],scale_y*field_total[j][1], head_width = .025)  \n\nplt.title(\"Electric Field of Positive and Negative Charge\")\nplt.show()\n```", "```py\nclass magnet():\n\n    def init(self, position, dipole):\n        self.position = np.array(position)\n        self.dipole = dipole\n\ndef dipole_dipole(u_0,m,x,y):\n\n    r = np.sqrt(x**2 + y**2)\n    r_hat_x = x / r\n    r_hat_y = y / r\n\n    factor = (u_0 / (4 * np.pi)) * (3 * (m[0] * r_hat_x + m[1] * r_hat_y))\n\n    Bx = factor * r_hat_x - m[0]\n    By = factor * r_hat_y - m[1]\n\n    Bx /= r**3\n    By /= r**3\n\n    return Bx, By\n```", "```py\n#Define magnetic constant and dipole of our magnet\nu_0 = 4*np.pi*10**-7\n#dipole on an electron\nm = (-9.28*10**-24,0)   \n\n#Make our magnets\nm1 = magnet()\nm1.init([.1,0],m)\n\n#Make a meshgrid of observation points\nx = np.linspace(-.5,.5,20)\nX,Y = np.meshgrid(x,x)\ngrid =[]\nfor i in range(0, len(X)):\n    for j in range(0, len(Y)):\n        grid.append([X[i][j],Y[i][j]])\n\n#Define our needed quantities\nobservations = np.array(grid)  \nfield1 = []\n\n#Loop through observation points\nfor n in range(0,len(observations)):\n\n    x = observations[n][0] - m1.position[0]               \n    y = observations[n][0] - m1.position[1]\n\n    field1.append(dipole_dipole(u_0,m1.dipole,x,y))  \n\n#Scale x and y\nfield_total = np.array(field1)\nscale_x = .1/max(field_total[:,0])\nscale_y = .1/max(field_total[:,1])\n\n#Plot vector field\nfig = plt.figure(figsize=(5,5))\n\nplt.plot(m1.position[0],m1.position[1],'rs')\n\nfor j in range(0, len(observations)):\n    plt.arrow(observations[j][0],observations[j][1],scale_x*field1[j][0],scale_y*field1[j][1], head_width = .02)  \n\nplt.title(\"Magnetic Field of an Electron\")\n```", "```py\n#Define coulomb's constant and charge of our particle\nu_0 = 4*np.pi*10**-7                          \nm = (-9.28*10**-24,0)   \n\n#Make our charges\nm1 = magnet()\nm2 = magnet()\nm1.init([0,.2],m)\nm2.init([0,0],m)\n\n#Make a meshgrid of observation points\nx = np.linspace(-1,1,30)\nX,Y = np.meshgrid(x,x)\ngrid =[]\nfor i in range(0, len(X)):\n    for j in range(0, len(Y)):\n        grid.append([X[i][j],Y[i][j]])\n\n#Define our needed quantities\nobservations = np.array(grid)  \nfield1 = []\nfield2 = []\nfield_total = []\n\n#Loop through observation points\nfor n in range(0,len(observations)):\n\n    x1 = observations[n][0] - m1.position[0]               \n    y1 = observations[n][0] - m1.position[1]\n\n    x2 = observations[n][0] - m2.position[0]               \n    y2 = observations[n][0] - m2.position[1]\n\n    field1.append(dipole_dipole(u_0,m1.dipole,x1,y1))  \n    field2.append(dipole_dipole(u_0,m2.dipole,x2,y2))\n    field_total.append(field1[-1]+field2[-1])\n\n#Scale x and y\nfield_total = np.array(field_total)\nscale_x = .1/max(field_total[:,0])\nscale_y = .1/max(field_total[:,1])\n\n#Plot vector field\nfig = plt.figure(figsize=(5,5))\n\nplt.plot(m1.position[0],m1.position[1],'ro', label = \"Positive\")\nplt.plot(m2.position[0],m2.position[1],'bo', label = \"Negitive\")\n\nfor j in range(0, len(observations)):\n    plt.arrow(observations[j][0],observations[j][1],scale_x*field_total[j][0],scale_y*field_total[j][1], head_width = .025)  \n\nplt.title(\"Magnetic Field of 2 Electrons\")\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nclass charge():\n\n    def init(self, position, charge):\n        self.position = np.array(position)\n        self.charge = charge\n\ndef coulombs_law(k,q,r):\n    F = k*q*r/(np.linalg.norm(r))**3\n    return F\n\n#Define coulomb's constant and charge of our particle\nk = 8.9e9                           \nq = 0.1e-6  \n\n#Make our charged particle\nparticle = charge()\nparticle.init([0,0],q)\n\n#Define our source and observation points\nsource = np.array(particle.position)\nobservations = []\nr = []\nfield = []\n#Need to scale our vectors to always have a visible magnitude\nvisual_scale = []\n\n#Loop over points in a circle around our charge\nfor i in np.linspace(0,2*np.pi,20):\n    observations.append(np.array([0.1*np.cos(i),0.1*np.sin(i)]))          \n    r.append(observations[-1] - source)                \n    field.append(coulombs_law(k,q,r[-1]))  \n    visual_scale.append(np.linalg.norm(r[-1])/np.linalg.norm(field[-1])/2)  \n\n#Plot our particle and the vector field around it\nfig = plt.figure(figsize=(5,5))\nplt.plot(particle.position[0],particle.position[1],'ro')\n\nfor j in range(0, len(observations)):\n    plt.arrow(observations[j][0],observations[j][1],visual_scale[j]*field[j][0],visual_scale[j]*field[j][1])  \n\nplt.title(\"Positively Charged Particle\");\n```", "```py\n#Make our charges\nq1 = charge()\nq2 = charge()\nq1.init([0.4,0],q)\nq2.init([-0.4,0],-q)\n\n#Make a meshgrid of observation points\nx = np.linspace(-.8,.8,20)\nX,Y = np.meshgrid(x,x)\ngrid =[]\nfor i in range(0, len(X)):\n    for j in range(0, len(Y)):\n        grid.append([X[i][j],Y[i][j]])\n\n#Define our needed quantities\nobservations = np.array(grid)  \nr1 = []\nr2 = []\nfield1 = []\nfield2 = []\nfield_total = []\n\n#Loop through observation points\nfor n in range(0,len(observations)):\n\n    r1.append(observations[n] - q1.position)               \n    r2.append(observations[n] - q2.position)\n\n    field1.append(coulombs_law(k,q1.charge,r1[-1]))  \n    field2.append(coulombs_law(k,q2.charge,r2[-1]))\n    field_total.append(field1[-1]+field2[-1])\n\n#Scale x and y\nfield_total = np.array(field_total)\nscale_x = .3/max(field_total[:,0])\nscale_y = .3/max(field_total[:,1])\n\n#Plot vector field\nfig = plt.figure(figsize=(5,5))\n\nplt.plot(q1.position[0],q1.position[1],'ro', label = \"Positive\")\nplt.plot(q2.position[0],q2.position[1],'bo', label = \"Negitive\")\n\nfor j in range(0, len(observations)):\n    plt.arrow(observations[j][0],observations[j][1],scale_x*field_total[j][0],scale_y*field_total[j][1], head_width = .025)  \n\nplt.title(\"Electric Field of Positive and Negative Charge\") \n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n```", "```py\nclass magnet():\n\n    def init(self, position, dipole):\n        self.position = np.array(position)\n        self.dipole = dipole\n\ndef dipole_dipole(u_0,m,x,y):\n\n    r = np.sqrt(x**2 + y**2)\n    r_hat_x = x / r\n    r_hat_y = y / r\n\n    factor = (u_0 / (4 * np.pi)) * (3 * (m[0] * r_hat_x + m[1] * r_hat_y))\n\n    Bx = factor * r_hat_x - m[0]\n    By = factor * r_hat_y - m[1]\n\n    Bx /= r**3\n    By /= r**3\n\n    return Bx, By\n\n#Define magnetic constant and dipole of our magnet\nu_0 = 4*np.pi*10**-7\n#dipole on an electron\nm = (-9.28*10**-24,0)   \n\n#Make our magnets\nm1 = magnet()\nm1.init([.1,0],m)\n\n#Make a meshgrid of observation points\nx = np.linspace(-.5,.5,20)\nX,Y = np.meshgrid(x,x)\ngrid =[]\nfor i in range(0, len(X)):\n    for j in range(0, len(Y)):\n        grid.append([X[i][j],Y[i][j]])\n\n#Define our needed quantities\nobservations = np.array(grid)  \nfield1 = []\n\n#Loop through observation points\nfor n in range(0,len(observations)):\n\n    x = observations[n][0] - m1.position[0]               \n    y = observations[n][0] - m1.position[1]\n\n    field1.append(dipole_dipole(u_0,m1.dipole,x,y))  \n\n#Scale x and y\nfield_total = np.array(field1)\nscale_x = .1/max(field_total[:,0])\nscale_y = .1/max(field_total[:,1])\n\n#Plot vector field\nfig = plt.figure(figsize=(5,5))\n\nplt.plot(m1.position[0],m1.position[1],'rs')\n\nfor j in range(0, len(observations)):\n    plt.arrow(observations[j][0],observations[j][1],scale_x*field1[j][0],scale_y*field1[j][1], head_width = .02)  \n\nplt.title(\"Magnetic Field of an Electron\")\n```", "```py\n#Make our charges\nm1 = magnet()\nm2 = magnet()\nm1.init([0,.2],m)\nm2.init([0,0],m)\n\n#Make a meshgrid of observation points\nx = np.linspace(-1,1,30)\nX,Y = np.meshgrid(x,x)\ngrid =[]\nfor i in range(0, len(X)):\n    for j in range(0, len(Y)):\n        grid.append([X[i][j],Y[i][j]])\n\n#Define our needed quantities\nobservations = np.array(grid)  \nfield1 = []\nfield2 = []\nfield_total = []\n\n#Loop through observation points\nfor n in range(0,len(observations)):\n\n    x1 = observations[n][0] - m1.position[0]               \n    y1 = observations[n][0] - m1.position[1]\n\n    x2 = observations[n][0] - m2.position[0]               \n    y2 = observations[n][0] - m2.position[1]\n\n    field1.append(dipole_dipole(u_0,m1.dipole,x1,y1))  \n    field2.append(dipole_dipole(u_0,m2.dipole,x2,y2))\n    field_total.append(field1[-1]+field2[-1])\n\n#Scale x and y\nfield_total = np.array(field_total)\nscale_x = .1/max(field_total[:,0])\nscale_y = .1/max(field_total[:,1])\n\n#Plot vector field\nfig = plt.figure(figsize=(5,5))\n\nplt.plot(m1.position[0],m1.position[1],'ro', label = \"Positive\")\nplt.plot(m2.position[0],m2.position[1],'bo', label = \"Negitive\")\n\nfor j in range(0, len(observations)):\n    plt.arrow(observations[j][0],observations[j][1],scale_x*field_total[j][0],scale_y*field_total[j][1], head_width = .025)  \n\nplt.title(\"Magnetic Field of 2 Electrons\")\n```"]