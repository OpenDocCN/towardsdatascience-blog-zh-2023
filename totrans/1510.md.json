["```py\ninitialize \n    problem details\n        graph\n        eta = cost per edge\n    hyperparameters \n        n_iterations\n        n_ants\n        alpha = pheromone importance\n        beta = cost importance\n        rho = pheromone evaporation rate\n        tau = pheromone initialization\n\nfor it in n_iterations\n    x_best, y_best = [], inf\n    calculate edge attractiveness\n    update tau (pheromone levels)\n    for ant in n_ants\n        x_best, y_best = find ant trail\nreturn x_best\n```", "```py\nA[(i, j)] = tau[(i, j)]^alpha * eta[(i, j)]^beta\n```", "```py\ntau[(i, j)] = (1-rho)*tau[(i, j)]\n```", "```py\nimport random\n\n...\np = [A[(i, j)] for j in neighbors]\nsampled_neighbor = random.choices(neighbors, weights=p)[0]\n...\n```", "```py\n...\ny = score_solution(solution)\nfor (i, j) in solution:\n    tau[(i, j)] += Q/y  # Q is a constant, e.g. 1\n...\n```"]