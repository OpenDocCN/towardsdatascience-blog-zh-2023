["```py\nimport numpy as np\nimport pandas as pd\n\nclass BiasVarianceCovariance:\n\n    @classmethod\n    def get_bvc(cls, y_hat: pd.DataFrame, y: np.ndarray):\n        return cls.avg_sqr_bias(y_hat, y), cls.avg_var(y_hat), cls.avg_cov(y_hat)\n\n    @staticmethod\n    def avg_sqr_bias(y_hat: pd.DataFrame, y: np.ndarray):\n        \"\"\"\n        :param y_hat: predictions as pd.DataFrame with shape (n_observations, n_models).\n        The predictions of each model are in different columns\n        :param y: actual values as np.array\n        \"\"\"\n        return (y_hat.mean(axis=0) - y.mean()).mean() ** 2\n\n    @staticmethod\n    def avg_var(y_hat: pd.DataFrame):\n        M = y_hat.shape[1]\n\n        return y_hat.var().mean() / M\n\n    @staticmethod\n    def avg_cov(y_hat: pd.DataFrame):\n        M = y_hat.shape[1]\n        cov_df = pd.DataFrame(np.cov(y_hat))\n        np.fill_diagonal(cov_df.values, 0)\n        cov_term = cov_df.values.sum() * (1 / (M * (M - 1)))\n\n        return cov_term\n```", "```py\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\n\nfrom pmdarima.datasets import load_sunspots\n\n# src module here: https://github.com/vcerqueira/blog\nfrom src.tde import time_delay_embedding\nfrom src.ensembles.bvc import BiasVarianceCovariance\n\n# load time series \nseries = load_sunspots(as_series=True) # GPL-3\n\n# train test split\ntrain, test = train_test_split(series, test_size=0.3, shuffle=False, random_state=1)\n\n# time series for supervised learning\ntrain_df = time_delay_embedding(train, n_lags=12, horizon=1)\ntest_df = time_delay_embedding(test, n_lags=12, horizon=1)\n\n# creating the predictors and target variables\ntarget_var = 'Series(t+1)'\nX_train, y_train = train_df.drop(target_var, axis=1), train_df[target_var]\nX_test, y_test = test_df.drop(target_var, axis=1), test_df[target_var]\n\n# training a random forest ensemble with 100 decision trees \nrf = RandomForestRegressor(n_estimators=100, random_state=1)\nrf.fit(X_train, y_train)\n\n# getting predictions from each tree in RF\nrf_pred = [tree.predict(X_test) for tree in rf.estimators_]\nrf_pred = pd.DataFrame(rf_pred).T\n\n# bias-variance-covariance decomposition\nrf_a_bias, rf_a_var, rf_a_cov = BiasVarianceCovariance.get_bvc(rf_pred, y_test.values)\n```"]