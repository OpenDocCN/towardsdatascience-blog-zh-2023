["```py\nimport numpy as np\nimport numexpr as ne\n\na = np.random.rand(100_000_000)\nb = np.random.rand(100_000_000)\n```", "```py\nIn: %timeit a**5 + 2 * b\n\nOut:2.11 s ± 31.1 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```", "```py\nc = np.empty(100_000_000, dtype=np.uint32)\n\ndef calcu_elements(a, b, c):\n    for i in range(0, len(a), 1):\n        c[i] = a[i] ** 5 + 2 * b[i]\n\n%timeit calcu_elements(a, b, c)\n\nOut: 24.6 s ± 48.2 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```", "```py\nIn:  %timeit ne.evaluate('a**5 + 2 * b')\nOut: 258 ms ± 14.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```", "```py\nimport pandas as pd\n\nnrows, ncols = 1_000_000, 100\ndf1, df2, df3, df4 = (pd.DataFrame(rng.random((nrows, ncols))) for i in range(4))\n```", "```py\nIn:  %timeit df1+df2+df3+df4\nOut: 1.18 s ± 65.1 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```", "```py\nIn:  %timeit pd.eval('df1 + df2 + df3 + df4')\nOut: 452 ms ± 29.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```", "```py\nIn:  np.allclose(df1+df2+df3+df4, pd.eval('df1+df2+df3+df4'))\nOut: True\n```", "```py\ndf = pd.DataFrame(rng.random((1000, 3)), columns=['A', 'B', 'C'])\n\nresult1 = (df['A'] + df['B']) / (df['C'] - 1)\nresult2 = df.eval('(A + B) / (C - 1)')\n```", "```py\nIn:  np.allclose(result1, result2)\nOut: True\n```", "```py\ndf.eval('D = (A + B) / C', inplace=True)\ndf.head()\n```", "```py\nmask = df.eval('(A < 0.5) & (B < 0.5)')\nresult1 = df[mask]\nresult1\n```", "```py\nIn:   result2 = df.query('A < 0.5 and B < 0.5')\n      np.allclose(result1, result2)\nOut:  True\n```", "```py\nIn:  Cmean = df['C'].mean()\n     result1 = df[(df.A < Cmean) & (df.B < Cmean)]\n     result2 = df.query('A < @Cmean and B < @Cmean')\n     np.allclose(result1, result2)\nOut: True\n```", "```py\nconda install pyarrow\n```", "```py\nconda install fastparquet\n```", "```py\nimport os\nfrom pathlib import Path\n\nimport pandas as pd\n\nroot = Path(os.path.abspath(\"\")).parents[0]\ndata = root/\"data\"\n\ndf = pd.read_parquet(data/\"daily_weather.parquet\")\ndf.info()\n```", "```py\nsea_level_not_null = df.dropna(subset=['min_temp_c', 'max_temp_c', 'avg_wind_speed_kmh'] , how='any')\n\nsample = sea_level_not_null[['city_name', 'season',\n                             'min_temp_c', 'max_temp_c', 'avg_wind_speed_kmh']]\n```", "```py\nsample.eval('avg_temp_c = (max_temp_c + min_temp_c) / 2', inplace=True)\nsample.eval('diff_in_temp = max_temp_c - min_temp_c', inplace=True)\n```", "```py\nsample = sample.groupby(['city_name', 'season'])\\\n        [['min_temp_c', 'max_temp_c', 'avg_temp_c', 'diff_in_temp', 'avg_wind_speed_kmh']]\\\n            .mean().round(1).reset_index()\n\nsample\n```", "```py\nsample.query('season==\"Summer\" \\\n        & 18 < avg_temp_c < 22 \\\n        & 4 < diff_in_temp < 6 \\\n        & 6 < avg_wind_speed_kmh < 10')\n```"]