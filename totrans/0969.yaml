- en: Geospatial Data Analysis with OSMnx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/geospatial-data-analysis-with-osmnx-8a300d77b592](https://towardsdatascience.com/geospatial-data-analysis-with-osmnx-8a300d77b592)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn how to download, analyze and visualize OpenStreetMap data with Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://eugenia-anello.medium.com/?source=post_page-----8a300d77b592--------------------------------)[![Eugenia
    Anello](../Images/537f444252cdc60709e7a19e37734c7b.png)](https://eugenia-anello.medium.com/?source=post_page-----8a300d77b592--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8a300d77b592--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8a300d77b592--------------------------------)
    [Eugenia Anello](https://eugenia-anello.medium.com/?source=post_page-----8a300d77b592--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8a300d77b592--------------------------------)
    ·6 min read·Jun 16, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7dad29578270e9b12624d8eb686a6fd3.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Denys Nevozhai](https://unsplash.com/@dnevozhai) on [Unsplash](https://unsplash.com/photos/7nrsVjvALnA)
  prefs: []
  type: TYPE_NORMAL
- en: '*This is the fourth article of the series regarding Geospatial Data Analysis:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Geospatial Data Analysis using QGIS*](/a-practical-introduction-to-geospatial-data-analysis-using-qgis-a6f82105b30e?sk=e6251697a54bc62fa33bc6a9a81258a7)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Guide for getting started with OpenStreetMap*](/a-comprehensive-guide-for-getting-started-with-openstreetmap-e92dff95fc80?sk=e0981a4fed7f4cfefa9a58477a863ea6)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Geospatial Data Analysis with GeoPandas*](/geospatial-data-analysis-with-geopandas-876cb72721cb?sk=042a0f2fb834cb08ffd0f74eb856e7e1)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Geospatial Data Analysis with OSMnx (this post)*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Geocoding for Data Scientists*](https://www.datacamp.com/tutorial/geocoding-for-data-scientists)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Geospatial Data Analysis with Geemap*](https://www.kdnuggets.com/geospatial-data-analysis-with-geemap)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the previous tutorials, I covered various aspects of Geospatial Data Analysis.
    I have started by showing practical examples of geospatial data without using
    any code at all to make you understand deeply the concepts. Geospatial data analysis
    is a ubiquitous field addressed to work with a special type of data, geospatial
    data.
  prefs: []
  type: TYPE_NORMAL
- en: It consists of adding the location to non-geographic data. It’s full of examples.
    You can just think of cafes, hospitals, roads, rivers, satellite imaginaries and
    much more. Even when you search for a place with Google Maps, you are interacting
    with geospatial data.
  prefs: []
  type: TYPE_NORMAL
- en: This time I am going to focus on downloading, visualising and analysing data
    from OpenStreetMap, which is the biggest free and editable geographic database,
    where there are volunteers from all over the world that collaborate in this huge
    project. All this tutorial is possible thanks to a Python package, called OSMnx.
    Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: '**Table of contents:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Introduction to OSMNx**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Download and Visualize OSM data**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Convert graph to GeoDataframe**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extract Points of Interest**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find the shortest route**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Introduction to OSMNx**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OSMnx is a library for downloading, analyzing and visualizing network data from
    OpenStreetMap. It depends on two libraries, [NetworkX](https://networkx.org/)
    and [GeoPandas](https://geopandas.org/en/stable/). In particular, it exploits
    the `graph` module from the NetworkX library to retrieve network data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moreover, it allows us to interact with two OpenStreetMap APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Nomatism**](https://nominatim.org/) for geocoding, which consists in finding
    locations by name and address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Overpass API**](https://wiki.openstreetmap.org/wiki/Overpass_API) to extract
    points of interest, like highways, schools, and parks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Download and Visualize OSM data**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of manually downloading the data from the website or from Geofabrik,
    we can directly do it with OSMnx.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to import four libraries, that will be used later in the tutorial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In addition to OSMnx and matplotlib, we are going to exploit **folium**, which
    is well-known for its capacity on creating an interactive leaflet map, and **contextily**
    to add the background map. This aspect can be very important to obtain realistic
    maps.
  prefs: []
  type: TYPE_NORMAL
- en: Like the other time, we read and visualize the OSM street network data of Bologna,
    one of the biggest cities in Italy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d83d8634904aea63069af3ebd25cb134.png)'
  prefs: []
  type: TYPE_IMG
- en: Black-and-white visualization of Bologna
  prefs: []
  type: TYPE_NORMAL
- en: 'From the black-and-white visualization, we can observe the points, that represent
    the nodes, and the lines, that portray the lines. Compared to OpenStreetMap’s
    website, it can seem very static and basic. Folium comes to rescue us with its
    strong and interpretable maps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/690c6f56e31751195b6008415e8cee32.png)'
  prefs: []
  type: TYPE_IMG
- en: Map of Bologna obtained with Folium
  prefs: []
  type: TYPE_NORMAL
- en: This is much better, don’t you think? The bright colours and the possibility
    of interaction with the map are characteristics that are crucial when we use Google
    Maps to go to unknown places.
  prefs: []
  type: TYPE_NORMAL
- en: If you check better the OpenStreetMap website, you can notice there is the Standard
    layer as default. Besides the Standard layer, there are other layers, such as
    Cycle Map and Transport Map. It’s incredible how we can exploit different layers
    depending on our purposes.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b915493d7967d14bc9b3196cef8ee42e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we are passionate about bikes, we would be more interested in the Cycle
    Map. This is possible always with one line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We are taking into consideration the standard graph in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Convert graph to GeoDataframe
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Dealing with graphs isn’t intuitive as working with Dataframes and GeoDataframes.
    For this reason, we might want to convert the graph to a GeoDataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d4c86ffb0ab82edda44131be8c9bef3e.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/88526562cc4c56348be0124a12ff992f.png)'
  prefs: []
  type: TYPE_IMG
- en: You can notice that we have obtained two GeoDataframes, one for nodes and one
    for edges. It’s clear if you take a look at the geometry. The area geodataframe
    has only a pair of coordinates, latitude and longitude, while there are two pairs
    of coordinates in the geodataframe containing edges.
  prefs: []
  type: TYPE_NORMAL
- en: '**Extract Points of Interest**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When working on data science projects, we try to add information to our dataset
    by searching open data on the Internet. From OSM data, it’s possible to extract
    **Points of Interest** (POI), which are places we might find interesting depending
    on the purpose of our analysis. Examples are restaurants, churches, museums, and
    parks.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we would like to analyze the traffic in Bologna to optimize and
    cut the cost of transportation. In this context, it would be useful to know the
    highways, gas stations, parking garages, and other places that are linked to the
    possible bottleneck.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take all the gas stations in the city. This is possible by specifying
    [fuel](https://wiki.openstreetmap.org/wiki/Tag:amenity=fuel?uselang=en) as the
    value of the amenity key.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4bcdadda327c18186952bd4386838478.png)'
  prefs: []
  type: TYPE_IMG
- en: Since we have extracted all the gas stations, it would be more useful to understand
    where they are located by visualizing the map. Moreover, we can add the base map
    to contextualize better our results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bdcb8dac2b1ba5e053b4e59ab23021b1.png)'
  prefs: []
  type: TYPE_IMG
- en: That’s great! We can notice that most of the fuel stations are concentrated
    in the periphery. Furthermore, we can distinguish different groups of service
    stations, that should be taken into account when measuring the traffic outside
    the center.
  prefs: []
  type: TYPE_NORMAL
- en: '**Find the shortest route**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another helpful functionality of the OSMnx library is the possibility to calculate
    the shortest path between two points.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This is possible with the shortest_path() method that uses by default the **Dijkstra
    algorithm** to compute the path between the source node and the target node.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also try to visualize both the graph and the shortest path in a unique
    map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e789fc218f054bedee2eac0cb0676cc0.png)'
  prefs: []
  type: TYPE_IMG
- en: Et voilà! It’s like we have used Google Maps to find the way, but instead, we
    exploited the functionality of the OSMnx library to look for it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Final thoughts:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This was a guide to let you know how to work with OSM data using Python. I have
    found that OSMnx is the most complete Python library to deal with OpenStreetMap
    data. Of course, it’s more suitable for exploring smaller places, like cities.
    In the case there are bigger datasets, it’s better to use more specialized software,
    like QGIS, to visualize them. Did you try other libraries to work with OSM data?
    Please comment on the story if you know it. Check out the code [here](https://jovian.com/eugeniaring/geospatial-osm-osmnx).
    Thanks for reading! Have a nice day!
  prefs: []
  type: TYPE_NORMAL
- en: '**Useful Resources:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[OSMnx Documentation](https://osmnx.readthedocs.io/en/stable/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Points of Interest](https://wiki.openstreetmap.org/wiki/Points_of_interest)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[OSMnx: Python for Street Networks](https://geoffboeing.com/2016/11/osmnx-python-street-networks/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Automating GIS processes](https://autogis-site.readthedocs.io/en/latest/lessons/lesson-6/network-analysis.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Did you like my article? [*Become a member*](https://eugenia-anello.medium.com/membership)
    *and get unlimited access to new data science posts every day! It’s an indirect
    way of supporting me without any extra cost to you. If you are already a member,*
    [*subscribe*](https://eugenia-anello.medium.com/subscribe) *to get emails whenever
    I publish new data science and Python guides!*
  prefs: []
  type: TYPE_NORMAL
