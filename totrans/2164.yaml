- en: Type Hints in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/type-hints-in-python-1c096f44f375](https://towardsdatascience.com/type-hints-in-python-1c096f44f375)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Your code will no longer be a mystery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://polmarin.medium.com/?source=post_page-----1c096f44f375--------------------------------)[![Pol
    Marin](../Images/a4f69a96717d453db9791f27b8f85e86.png)](https://polmarin.medium.com/?source=post_page-----1c096f44f375--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1c096f44f375--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1c096f44f375--------------------------------)
    [Pol Marin](https://polmarin.medium.com/?source=post_page-----1c096f44f375--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1c096f44f375--------------------------------)
    ·7 min read·Jul 11, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/645e61c388600f7ac62f741fec4cf3ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Agence Olloweb](https://unsplash.com/@olloweb?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: The other day I was trying to decipher how a script I built in the past worked.
    I knew what it did, it was pretty well explained and documented, but understanding
    the how was more troublesome.
  prefs: []
  type: TYPE_NORMAL
- en: The code was tedious and complex, with some comments here and there but lacking
    proper styling. That’s when I decided to learn about PEP 8[1] and integrate it
    into my code.
  prefs: []
  type: TYPE_NORMAL
- en: In case you don’t know what PEP 8 is, it’s basically a document that provides
    guidelines, coding conventions, and best practices on how to write Python code.
  prefs: []
  type: TYPE_NORMAL
- en: The solution to our incomprehensible codes is right there. Yet most of us have
    never invested our time to read it and integrate those guidelines into our daily
    practices.
  prefs: []
  type: TYPE_NORMAL
- en: It takes time and a lot of mistakes, but trust me it’s worth it. I’ve learned
    so much and my codes are now starting to look better.
  prefs: []
  type: TYPE_NORMAL
- en: One of my favorite findings was the **type hints** (or **type annotations**)
    — which will be the topic of today’s post. In fact, type hints already appeared
    on PEP 3107[2], back in 2006, and were revisited and fully documented in the 484[3]
    version (in 2014). Since then, it’s been improved several times on new PEP versions
    and it’s almost become a classic.
  prefs: []
  type: TYPE_NORMAL
- en: So, an old topic yet very new for many.
  prefs: []
  type: TYPE_NORMAL
- en: What is Type Hinting?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Type hints indicate the datatypes of both the inputs and outputs in functions
    (it applies to class methods as well).
  prefs: []
  type: TYPE_NORMAL
- en: 'A problem many Python users complain about is the freedom we have to change
    a variable type. In other languages such as C and many others, you need to declare
    a variable specifying its type: char, integer…'
  prefs: []
  type: TYPE_NORMAL
- en: Each one will have their own opinion — some might love Python’s freedom (and
    its effects on memory management) and some others will prefer the restriction
    of old-school languages because it makes their code more readable.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway.
  prefs: []
  type: TYPE_NORMAL
- en: Type hints are here to make your Python code more readable, an approach that
    I’m sure most of us appreciate. However, these are meant to clarify, they don’t
    make the datatype a requirement for the variable.
  prefs: []
  type: TYPE_NORMAL
- en: '**If the variable’s type isn’t what we expect, no errors will be raised.**'
  prefs: []
  type: TYPE_NORMAL
- en: Why Should Data Scientists Consider Using Them?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To be honest, any Python programmer would benefit from type annotations. But
    it probably makes even more sense for data scientists and other data-related professionals.
  prefs: []
  type: TYPE_NORMAL
- en: That’s because we work with all kinds of data. Not just the simple strings,
    lists, or tuples. We use data that can end up being about super complex structures
    and type hints have the potential to save us a lot of time trying to know what
    type of data was expected on a given function.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let’s imagine we have a structure that is dictionary-based. Its
    keys are tuples and its values are nested dictionaries with string keys and set
    values.
  prefs: []
  type: TYPE_NORMAL
- en: Good luck trying to remember that when you revisit the code some months later!
  prefs: []
  type: TYPE_NORMAL
- en: The good part is that type hints are extremely easy to understand and easy to
    use. We have no excuse not to use them, and there are no perks in not doing so.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s go ahead and start seeing some code.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’ll be using Python 3.11, but most of the examples will work on previous versions
    of Python 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use a sample and dummy function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is stupid. But it has everything we need and we’ll be adding variations
    just now.
  prefs: []
  type: TYPE_NORMAL
- en: We don’t have any type annotations here. Just a function that takes two parameters
    and returns a string. I’m sure you know that the `name` parameter is supposed
    to be a string while the parameter `age` is expected to be an integer (or float
    even).
  prefs: []
  type: TYPE_NORMAL
- en: But you know it because it’s a really simple function. It’s hardly ever that
    simple. That’s why adding some hints might be wise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the update:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, I specified `age` should be an integer. Let’s try to run the
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To illustrate what I said at the end of the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It worked well even though 22.4 is a float (and not an integer which is expected).
    As said, these are just type hints, nothing more.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, basics covered. Let’s start making some variations.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Multiple Data Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Suppose we want to allow both integers and floats as data types for the age
    argument. We can do so using **Union**, from the typing module[4]:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It’s simple: `Union[int, float]` means that we expect either an integer or
    a float.'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if you find yourself using Python 3.10 or higher, there’s another
    approach you can use to do the same without even using Union:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It’s just a simple OR operator. Easier to understand in my opinion.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Advanced Data Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Suppose now we were to play with more complex parameters such as dictionaries
    or lists. Let’s now use the next function, which uses the `meet_someone` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is a really simple function still, but now the argument might not be as
    clear as we previously saw. If you actually inspect the code, you’ll see we expect
    a dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: But wouldn’t it be better if we didn’t have to guess? Again, that’s the power
    of type hints.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, if I asked you to add type hints yourself, you’d probably be
    doing something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This is good. But we’re not using its full potential. We’re specifying we want
    a `dict` here but not the types of its keys and values. Here’s an improved version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we’re saying that we expect `people` to be a dictionary with keys as
    strings and values as integers. Something like `{''Pol'': 23, ''Marc'': 21}`.'
  prefs: []
  type: TYPE_NORMAL
- en: But remember that we want to accept ages as either integers or floats…
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We can just use what we learned in section 2! Cool huh?
  prefs: []
  type: TYPE_NORMAL
- en: 'Oh, and it doesn’t just work on the built-in data types. You can use any data
    type you want. For example, imagine we want a list of Pandas data frames for a
    function that doesn’t return anything:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: What I did here was declare the data type, which is just a list of data frames,
    and use it as a type hint.
  prefs: []
  type: TYPE_NORMAL
- en: Also, something we haven’t seen before today, this function doesn't return anything.
    That’s why the output data type is None.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. The Optional Operator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It’s often that we create functions in which some arguments aren’t required
    — they’re optional.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given all we’ve seen until now, here’s how we could code a function with optional
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'I’ve updated the returned message but the important part is the type hint for
    the last parameter, `last_name`. See how here I’m saying: “`last_name` is either
    a string or a Null value. It’s optional and by default, it’s a None.”'
  prefs: []
  type: TYPE_NORMAL
- en: This is cool and pretty intuitive, but imagine a parameter with several possible
    data types… It can get very long.
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s why the Optional operator is useful here, it basically allows us to
    skip the `None` hint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion & Next Steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I hope I’ve transmitted how useful type hints are to improve the readability
    and comprehension of our codes. Not just for our fellow programmers, but for our
    future selves too!
  prefs: []
  type: TYPE_NORMAL
- en: I’ve covered the basics here, but I suggest you keep inspecting what the typing
    module offers. There are several classes there that can make your code look better
    than ever.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’d like to support me further, consider subscribing to Medium’s Membership
    through the link you find below: it won’t cost you any extra penny but will help
    me through this process.'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@polmarin/membership?source=post_page-----1c096f44f375--------------------------------)
    [## Join Medium with my referral link - Pol Marin'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Pol Marin (and thousands of other writers on Medium).
    Your membership fee directly supports Pol…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@polmarin/membership?source=post_page-----1c096f44f375--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] [PEP 8 — Style Guide for Python Code](https://peps.python.org/pep-0008/)
    | peps.python.org'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] [3107 — Function Annotations](https://peps.python.org/pep-3107/)| peps.python.org'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] [484 — Type Hints| peps.python.org](https://peps.python.org/pep-0484/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] [typing — Support for type hints](https://docs.python.org/3/library/typing.html)'
  prefs: []
  type: TYPE_NORMAL
