- en: Analyzing Geospatial Data with Python (Part 2 — Hypothesis Test)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/analyzing-geospatial-data-with-python-part-2-hypothesis-test-fe3f3f18fc82](https://towardsdatascience.com/analyzing-geospatial-data-with-python-part-2-hypothesis-test-fe3f3f18fc82)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learning about geospatial hypothesis test for Asheville’s AirBnb listings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://gustavorsantos.medium.com/?source=post_page-----fe3f3f18fc82--------------------------------)[![Gustavo
    Santos](../Images/a19a9f4525cdeb6e7a76cd05246aa622.png)](https://gustavorsantos.medium.com/?source=post_page-----fe3f3f18fc82--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fe3f3f18fc82--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fe3f3f18fc82--------------------------------)
    [Gustavo Santos](https://gustavorsantos.medium.com/?source=post_page-----fe3f3f18fc82--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fe3f3f18fc82--------------------------------)
    ·12 min read·Aug 31, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8bee11a1f9d0a8e4d3e2d581a3586452.png)'
  prefs: []
  type: TYPE_IMG
- en: Blue Ridge Mountains in Asheville, NC. Photo from the author’s personal collection.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first post, linked below, we worked with an introduction to Geospatial
    Data Analysis, where we downloaded the listings from *AirBnb* for the city of
    Asheville, in North Carolina (USA) and went through some steps to extract insights
    from geospatial data.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/analyzing-geospatial-data-with-python-7244c1b9e302?source=post_page-----fe3f3f18fc82--------------------------------)
    [## Analyzing Geospatial Data with Python'
  prefs: []
  type: TYPE_NORMAL
- en: A practical data analysis post with Python code.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/analyzing-geospatial-data-with-python-7244c1b9e302?source=post_page-----fe3f3f18fc82--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: In that post, we focused more on where the rental properties were concentrated
    and in their prices. Therefore, we concluded that Asheville’s listings are concentrated
    on the downtown area and the highest prices can be seen along the Blue Ridge Parkway
    road, given the beautiful view, and country environment probably.
  prefs: []
  type: TYPE_NORMAL
- en: Good. I recommend that you read the first post, so you can get the initial code
    and thoughts together and then move on with the knowledge made available in this
    second part.
  prefs: []
  type: TYPE_NORMAL
- en: Dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AirBnb, if you don’t know it, is a peer-to-peer platform for people to list
    their houses, rooms or bedrooms for renting. Their rental listings data are gathered
    by this community project in the website [http://insideairbnb.com/](http://insideairbnb.com/),
    where anyone can go and download the datasets for analysis. So we will keep using
    the same data for this part. The data is open under the [Creative Commons Attribution
    4.0 International License](http://creativecommons.org/licenses/by/4.0/).
  prefs: []
  type: TYPE_NORMAL
- en: In this post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this post, we will learn about the components to create a geospatial hypothesis
    test. Here they are:'
  prefs: []
  type: TYPE_NORMAL
- en: First and Second order effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Autocorrelation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spatial weights
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contiguity matrix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moran’s I
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global spatial autocorrelation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local spatial autocorrelation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Be aware that there is a lot of concepts being presented here, but we will
    also code everything together. To code along with this exercise, import the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Let’s get to work.
  prefs: []
  type: TYPE_NORMAL
- en: First and Second Order effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When working with geospatial data, we are looking for patterns. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: Are *there places where the rental properties are more expensive?*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Are those places close to each other or randomly distributed in the space?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Those kinds of questions are what we think when we look for spatial patterns.
    If we look at the data plotted on a map like we did in the first part of this
    post, we can quickly identify patterns and extract great insights from them. However,
    that could have happened simply by chance. Thus, there are statistical tests to
    make sure that things are not just a coincidence and give yourself more confidence
    to show the results of an analysis.
  prefs: []
  type: TYPE_NORMAL
- en: To create a hypothesis test, we should consider the **first-order effect,**
    that is how the observations vary from place to place based on changes in the
    area being analyzed. A **second-order effect** is how the observations vary from
    place to place based on interactions with other observations.
  prefs: []
  type: TYPE_NORMAL
- en: The first-order effect is how a price would change because a new mall was constructed
    in the area. The second-order order effect is how the price fluctuates based on
    the average for that area’s rental prices.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Hypothesis Test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Knowing that data can have patterns with statistical significance or just by
    chance, we will construct our hypothesis test as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ho**: The data is distributed randomly across space. *[p-Value >* ***α****]*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ha**: The data has a spatial structure. *[p-Value <* ***α****]*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The stats test is based on autocorrelation of the data points. In simple terms,
    that means that we will take the variable being studied and compare it with the
    observations in its neighborhood.
  prefs: []
  type: TYPE_NORMAL
- en: Spatial Autocorrelation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spatial autocorrelation, in this study is how the price of a rental property
    is correlated with the other listings in the same area.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The spatial autocorrelation can be:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Positive: when a high priced listing is next to other expensive rentals or
    a cheap listing is close to other cheap listings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Negative: when cheap listings are close to expensive ones.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'No correlation: the data is randomly distributed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/26f404039e1073d22b61ae91bbe58561.png)'
  prefs: []
  type: TYPE_IMG
- en: Types of autocorrelation. Image by the author. Adapted from JORDAN (Packt, 2023).
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to understand the weights matrix, as that is what makes possible
    to calculate autocorrelation.
  prefs: []
  type: TYPE_NORMAL
- en: Weights Matrix and Contiguity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The weights matrix is a way to represent the spatial structure of the data.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The spatial weights matrix is a way to numerically determine the relationship
    of the data point we are analyzing with its neighbors. So, to create that, we
    first need to understand another concept: *contiguity.*'
  prefs: []
  type: TYPE_NORMAL
- en: Contiguity is neighborhood. It is comprised of the points that share a common
    border with the observation being analyzed. So, if you have a central point, all
    the points around it would constitute the contiguous points, as we see the yellow
    squares are contiguous to the red central square in the figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/33d63c2b01159ab395c9e34daea3d659.png)'
  prefs: []
  type: TYPE_IMG
- en: Contiguity methods. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: The most commonly matrices used were inspired by the Chess game movements. They
    are the *Rook contiguity matrix* — **it considers all the neighbors that share
    borders moving on a straight line up or down and to the sides , just like the
    Rook moves on a Chess board** — and there’s the *Queen contiguity matrix* — **that
    considers the direct neighbors moving in all directions, to the sides and diagonals,
    just like the queen moves on a Chess board**.
  prefs: []
  type: TYPE_NORMAL
- en: Contiguity, in simple terms, is neighborhood.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'There are other contiguity matrices, but we will just cover these two conceptually,
    and will code only using the Queen weights matrix. To code it, the snippet is
    really simple. Just remembering that the `listings_gpd` file comes from the [first
    part of this post](/analyzing-geospatial-data-with-python-7244c1b9e302) and was
    created from the Asheville, NC AirBnb listings transformed to a Geopandas data
    frame. *(Note: you will find the link to the complete code for this exercise in
    the end of this article)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Simple like that is to create the matrix`W`. If you want to use the Rook contiguity,
    just replace `Queen` with `Rook`.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we will standardize the matrix `W` by dividing the weight of a point
    by the sum of all the neighbor’s weights. This is a standard procedure, so you
    remove potential bias. The code is also very simple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once calculated our weights, we can see the plot, if wanted, to know what relates
    to what during the calculations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: And here is the resulting graphic.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ad6e3a7e94042c76ce2ee26ea972d0b5.png)'
  prefs: []
  type: TYPE_IMG
- en: Queen W matrix for Asheville’s AirBnb listings. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Next, what we can do is to calculate the spatial lag, which is the average value
    of the neighbors for the variable you’re working with. In our case, the average
    of the prices in the neighborhood of each data point. This can be calculated with
    the method `lag_spatial` and will be used in the next section, calculating the
    Moran’s I statistic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Moran’s I and the Global Spatial Autocorrelation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Moran’s I** is a statistic that measures the Global correlation between all
    the points in the space, when compared to its neighbors. **The result is the trend,
    or the strength of the overall spatial distribution**. The statistic is a number
    between -1 and 1 and a p-Value to check statistical significance. You can check
    the formula [here, in Wikipedia](https://en.wikipedia.org/wiki/Moran%27s_I).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3c4dd52c44c4e78fda03d91ed33798b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Global Autocorrelation formula: Moran’s I. Image from [Wikipedia](https://en.wikipedia.org/wiki/Moran%27s_I).'
  prefs: []
  type: TYPE_NORMAL
- en: To calculate Moran’s I, the code is as follows. See how we input the desired
    variable `price` and the weights matrix `W` , which is the numerical representation
    of the relationships between the points in our space. With that, the method `esda.moran.Moran()`
    can calculate it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It returned a weak positive correlation of 0.21, but statistically significant,
    though, with *p* under a considered alpha of 0.05\. This means that looking at
    our points, the overall trend shows the prices not strongly correlated. In other
    words, there won’t be too many clusters where the prices are too high or too low.
  prefs: []
  type: TYPE_NORMAL
- en: To plot the result of the test, that is a one line of code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will display the next figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/882e7878ab95075d558a2da4cf8f3219.png)'
  prefs: []
  type: TYPE_IMG
- en: Moran test plotted. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Explaining the plot you’re seeing:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Left-hand side: we see the density distribution of the statistic for each point
    (autocorrelations). We can notice that most of the points are floating around
    zero, thus confirming the weak correlation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Right-hand side: that’s the plot of each price listed against the price lag
    (average of the prices in the neighborhood of each point). If you see a linear
    pattern, that means a stronger correlation, ergo the prices of listings would
    be highly related to each other and we would see a lot of clusters where the prices
    are high or low.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local Spatial Autocorrelation (LISA)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While the Global spatial autocorrelation returns a single value with Moran’s
    I statistic, showing the trend of the data spatial distribution, the Local Spatial
    Autocorrelation will return one value for each point, **measuring the relationship
    of each point with it’s surroundings.** It helps to identify local cluster patterns,
    where high prices are next to other high priced rentals and low-low connections.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s calculate the Local numbers for our dataset. We can also plot the density
    plot of the results to check how the distribution look like.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/997ec27a636b178edced659d0f1e1f6d.png)'
  prefs: []
  type: TYPE_IMG
- en: Local Spatial Autocorrelation density plot. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Interesting. Once again, we get a confirmation that most of the points are around
    the zero, presenting weaker correlations and aligned with the Global numbers (0.21).
  prefs: []
  type: TYPE_NORMAL
- en: Next, plotting the points.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here’s the result.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9cfe293990a4d6890a7deb1531d87349.png)'
  prefs: []
  type: TYPE_IMG
- en: Local Spatial Autocorrelation statistics scatterplot. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Ok. So if we consider our `alpha = 0.05`, then only the blue and light blue
    points would be statistically significant, given that the alternative hypothesis
    (p-value < ***α*** ) is not randomly located points. Therefore, let’s plot it
    again, looking at the significance.
  prefs: []
  type: TYPE_NORMAL
- en: First, we determine our alpha value and create a label to identify only the
    points lower than our threshold. Then we add that to the dataset `listings_gpd`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Next, we plot it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9f7c34d99e13741b1a0f7d312c7c2c8d.png)'
  prefs: []
  type: TYPE_IMG
- en: Statistically significant points for Local Spatial autocorrelation. Image by
    the author.
  prefs: []
  type: TYPE_NORMAL
- en: Another quicker option is to use the function `esdaplot.lisa_cluster` from the
    *splot* package to plot the local cluster spots (*HH=High values next to High
    values, HL=High values next to Low values, LH=Low next to High, LL=Low next to
    Low, ns=Not Statistically significant)*, passing the alpha value to the parameter
    p `p=alpha`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/84089dfe045909a746fc47e6598559c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Local clusters for the AirBnb listings for Asheville, NC. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: That’s beautiful, but we still need to plot that on a map. So, we must add another
    variable to our dataset, which is the quadrants (HH, LL, HL, LH). That information
    is in the `q` attribute of the `price_local_I.q` variable, with the LISA calculation.
    We will also encode them with colors, so our map is easier to read with the`Folium`
    package.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we can plot a Folium map with the statistically significant price clusters,
    using the code snippet below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The map displayed is this one.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b84e019f985597bc2d524882e4842bcb.png)'
  prefs: []
  type: TYPE_IMG
- en: Asheville, NC listings from AirBnb with Local price clusters. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Zooming in, we now see that the neighborhood on the top left is a blue choropleth,
    confirmed by many clusters of lower prices rentals. The downtown, on the other
    hand, is filled with clusters of High-High price values, so a more red-ish choropleth.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e51f07b194f14ee384b0ab063f09fbf2.png)'
  prefs: []
  type: TYPE_IMG
- en: And that’s all, folks. This is how to perform a geospatial hypothesis test.
  prefs: []
  type: TYPE_NORMAL
- en: Before You Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this post, we learned how to perform a Hypothesis test for Geospatial data.
    These kinds of statistical test are *essential to determine if your results are
    actually significant or if they could be happening only by chance*.
  prefs: []
  type: TYPE_NORMAL
- en: With such tool on hands, now you can apply it to your business model, comparing,
    for example, prices of groceries in the neighborhood, ticket for movies, restaurants…
    well, the options are limitless. I believe companies would be thrilled to know
    about clusters where they can take advantage of a better pricing policy, either
    increasing it to match the competition and don’t lose perception of quality or
    maybe lowering prices a little, aiming to create a value deal image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Summarizing, the steps to perform the test are:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the alpha value for statistical significance
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Determine which type of contiguity matrix will be used (Queen, Rook, KNN)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate the weights matrix
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Standardize the rows
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate Moran’s I stat for Global autocorrelation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate LISA stats for Local autocorrelation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify significant data points according to the Hypothesis test
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plot the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Complete code for this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/gurezende/Studying/blob/master/Python/Geospatial/Geospatial_geopandas_with_Hypothesis_Test.ipynb?source=post_page-----fe3f3f18fc82--------------------------------)
    [## Studying/Python/Geospatial/Geospatial_geopandas_with_Hypothesis_Test.ipynb
    at master ·…'
  prefs: []
  type: TYPE_NORMAL
- en: This is a repository with my tests and studies of new packages …
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/gurezende/Studying/blob/master/Python/Geospatial/Geospatial_geopandas_with_Hypothesis_Test.ipynb?source=post_page-----fe3f3f18fc82--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: If you liked this content, follow my blog for more or [find me on LinkedIn](https://www.linkedin.com/in/gurezende/).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://gustavorsantos.medium.com/?source=post_page-----fe3f3f18fc82--------------------------------)
    [## Gustavo Santos - Medium'
  prefs: []
  type: TYPE_NORMAL
- en: Read writing from Gustavo Santos on Medium. Data Scientist. I extract insights
    from data to help people and companies…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: gustavorsantos.medium.com](https://gustavorsantos.medium.com/?source=post_page-----fe3f3f18fc82--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you’re considering subscribing to Medium, here’s a referral link. Part
    of your membership comes to me and helps me keep publishing good content.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@gustavorsantos/membership?source=post_page-----fe3f3f18fc82--------------------------------)
    [## Join Medium with my referral link - Gustavo Santos'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@gustavorsantos/membership?source=post_page-----fe3f3f18fc82--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[JORDAN, David S. [2023]. *Applied Geospatial Data Science with Python*. 1
    ed. Pactk Publishing.](https://www.amazon.com/Applied-Geospatial-Data-Science-Python/dp/1803238127/ref=asc_df_1803238127/?tag=hyprod-20&linkCode=df0&hvadid=598352683676&hvpos=&hvnetw=g&hvrand=1787360199645971497&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=1020988&hvtargid=pla-1875036424962&psc=1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://en.wikipedia.org/wiki/Moran%27s_I?source=post_page-----fe3f3f18fc82--------------------------------)
    [## Moran''s I - Wikipedia'
  prefs: []
  type: TYPE_NORMAL
- en: From Wikipedia, the free encyclopedia In statistics, Moran's I is a measure
    of spatial autocorrelation developed by…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: en.wikipedia.org](https://en.wikipedia.org/wiki/Moran%27s_I?source=post_page-----fe3f3f18fc82--------------------------------)
    [](https://deepnote.com/@carlos-mendez/PYTHON-Spatial-weights-923ef4f8-8fbe-48de-8fc1-ecc9e3755a7d?source=post_page-----fe3f3f18fc82--------------------------------)
    [## [PYTHON] Spatial weights
  prefs: []
  type: TYPE_NORMAL
- en: W and econometrics How can we estimate the six parameters of A if we only have
    three observations (n=3)???? How do we…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: deepnote.com](https://deepnote.com/@carlos-mendez/PYTHON-Spatial-weights-923ef4f8-8fbe-48de-8fc1-ecc9e3755a7d?source=post_page-----fe3f3f18fc82--------------------------------)  [##
    libpysal.weights.Queen - libpysal v4.7.0 Manual
  prefs: []
  type: TYPE_NORMAL
- en: Construct a weights object from a collection of pysal polygons that share at
    least one vertex.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pysal.org](https://pysal.org/libpysal/generated/libpysal.weights.Queen.html?source=post_page-----fe3f3f18fc82--------------------------------#libpysal.weights.Queen)  [##
    esda.Moran_Local - esda v2.5.0 Manual
  prefs: []
  type: TYPE_NORMAL
- en: Seed to ensure reproducibility of conditional randomizations. Must be set here,
    and not outside of the function, since…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pysal.org](https://pysal.org/esda/generated/esda.Moran_Local.html?source=post_page-----fe3f3f18fc82--------------------------------)  [##
    Spatial Weights
  prefs: []
  type: TYPE_NORMAL
- en: '"Spatial weights" are one way to represent graphs in geographic data science
    and spatial statistics. They are widely…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: geographicdata.science](https://geographicdata.science/book/notebooks/04_spatial_weights.html?source=post_page-----fe3f3f18fc82--------------------------------)
    [](/analyzing-geospatial-data-with-python-7244c1b9e302?source=post_page-----fe3f3f18fc82--------------------------------)
    [## Analyzing Geospatial Data with Python
  prefs: []
  type: TYPE_NORMAL
- en: A practical data analysis post with Python code.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/analyzing-geospatial-data-with-python-7244c1b9e302?source=post_page-----fe3f3f18fc82--------------------------------)  [##
    Quickstart - Folium 0.14.0 documentation
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a base map, simply pass your starting coordinates to Folium: To display
    it in a Jupyter notebook, simply ask…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: python-visualization.github.io](https://python-visualization.github.io/folium/quickstart.html?source=post_page-----fe3f3f18fc82--------------------------------)
  prefs: []
  type: TYPE_NORMAL
