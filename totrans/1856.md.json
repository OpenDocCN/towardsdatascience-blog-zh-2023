["```py\nimport numpy as np\nimport pandas as pd\nfrom faker import Faker\nfrom scipy.stats import skewnorm\nfrom datetime import datetime\nfrom sklearn.datasets import (make_regression, make_classification, \n                              make_multilabel_classification, \n                              make_blobs)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import (RandomForestClassifier,\n                              RandomForestRegressor)\nfrom sklearn.multioutput import MultiOutputClassifier\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import mean_squared_error, roc_auc_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style='darkgrid', context='talk')\n```", "```py\nn = 1000\nn_features = 5\nseed = 123X, y = make_regression(n_samples=n, n_features=n_features, \n                       random_state=seed)\ncolumns = [f\"feature{i+1}\" for i in range(n_features)]\ndf = pd.concat([pd.DataFrame(X, columns=columns), \n                pd.Series(y, name='target')], axis=1)\nprint(df.shape)\ndf.head()\n```", "```py\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, random_state=seed\n)\nmodel = RandomForestRegressor(random_state=seed)\nmodel.fit(X_train, y_train)\nprint(f\"Train | MSE: {mean_squared_error(y_train, model.predict(X_train)):.4f}\")\nprint(f\"Test | MSE: {mean_squared_error(y_test, model.predict(X_test)):.4f}\")\n```", "```py\nn_classes = 2\nX, y = make_classification(n_samples=n, n_features=n_features, \n                           n_classes=n_classes, random_state=seed)\ncolumns = [f\"feature{i+1}\" for i in range(n_features)]\ndf = pd.concat([pd.DataFrame(X, columns=columns), \n                pd.Series(y, name='target')], axis=1)\nprint(df.shape)\ndf.head()\n```", "```py\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, random_state=seed\n)\nmodel = RandomForestClassifier(random_state=seed)\nmodel.fit(X_train, y_train)\nprint(f\"Train | ROC-AUC: {roc_auc_score(y_train, model.predict_proba(X_train)[:,1]):.4f}\")\nprint(f\"Test | ROC-AUC: {roc_auc_score(y_test, model.predict_proba(X_test)[:,1]):.4f}\")\n```", "```py\nX, Y = make_multilabel_classification(n_samples=n, \n                                      n_features=n_features, \n                                      n_classes=n_classes, \n                                      random_state=seed)\nx_columns = [f\"feature{i+1}\" for i in range(n_features)]\ny_columns = [f\"target{i+1}\" for i in range(n_classes)]\ndf = pd.concat([pd.DataFrame(X, columns=x_columns), \n                pd.DataFrame(Y, columns=y_columns)], axis=1)\nprint(df.shape)\ndf.head()\n```", "```py\nX_train, X_test, Y_train, Y_test = train_test_split(\n    X, Y, random_state=seed\n)\nmodel = MultiOutputClassifier(\n    RandomForestClassifier(random_state=seed)\n)\nmodel.fit(X_train, Y_train)\nprint(f\"Train | Accuracy by class: {np.round(np.mean(Y_train==model.predict(X_train), axis=0),4)}\")\nprint(f\"Test | Accuracy by class: {np.round(np.mean(Y_test==model.predict(X_test), axis=0),4)}\")\n```", "```py\nX, y = make_blobs(n_samples=n, n_features=n_features, \n                  centers=4, random_state=seed)\ncolumns = [f\"feature{i+1}\" for i in range(n_features)]\ndf = pd.concat([pd.DataFrame(X, columns=columns), \n                pd.Series(y, name='target')], axis=1)\nprint(df.shape)\ndf.head()\n```", "```py\nks = np.arange(2, 11)\nsum_squared_distances = []\nfor k in ks:\n    model = KMeans(k, random_state=seed)\n    model.fit(X)\n    sum_squared_distances.append(model.inertia_)plt.figure(figsize=(6,4))\nsns.lineplot(x=ks, y=sum_squared_distances)\nplt.xlabel('k')\nplt.ylabel('Sum of squared distances');\n```", "```py\nnp.random.seed(123)\ndf = pd.DataFrame()\ndf['id'] = np.random.choice(np.arange(10**5, 10**6), n, \n                            replace=False)\ndf['gender'] = np.random.choice(['female', 'male'], n, \n                                p=[0.6, 0.4])\ndf['age'] = np.random.randint(18, 80, size=n)\ndf['spend'] = skewnorm.rvs(100, loc=1000, scale=500, size=n)\ndf['points'] = np.random.normal(loc=50, scale=10, size=n)start_date = pd.Timestamp(\"2013-01-01\")\nend_date = pd.Timestamp(\"2023-02-01\")\ndelta = (end_date-start_date).days\ndf['date_joined'] = start_date + pd.to_timedelta(np.random.randint(delta, size=n), 'day')\nprint(df.shape)\ndf.head()\n```", "```py\npd.concat([df['gender'].value_counts(normalize=True),\n           df['gender'].value_counts()], axis=1)\n```", "```py\nfig, ax = plt.subplots(2, 1, figsize=(6, 7))\nsns.histplot(data=df, x='spend', ax=ax[0])\nsns.histplot(data=df, x='points', ax=ax[1])\nfig.tight_layout();\n```", "```py\nplt.figure(figsize=(6,4))\nsns.histplot(data=df, x='date_joined');\n```", "```py\ndf = pd.DataFrame()\nfake = Faker()\nfake.seed_instance(seed)\nnp.random.seed(seed)\nstart_date = datetime(1940, 1, 1)\nend_date = datetime(2005, 2, 1)\nfor i in range(n):\n    df.loc[i, 'birthday'] = fake.date_between(start_date, end_date).strftime('%Y-%m-%d')\n    df.loc[i, 'first_name'] = fake.first_name()\n    df.loc[i, 'last_name'] = fake.last_name()\n    df.loc[i, 'email'] = f\"{df.loc[i, 'first_name'].lower()}@{fake.domain_name()}\"\n    df.loc[i, 'phone_number'] = fake.phone_number()\nprint(df.shape)\ndf.head()\n```", "```py\ncorpus = [fake.sentence() for i in range(n)]\ncorpus[:5]\n```"]