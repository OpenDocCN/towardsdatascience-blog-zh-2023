["```py\nimport string\n\nimport pandas as pd\nimport plotly.express as px\nimport tabula \n\n# Permit display of entire DataFrame and set decimal precision:\npd.set_option('display.max_rows', None)\npd.set_option('display.float_format', '{:.2f}'.format)\n```", "```py\n# Convert web-based PDF into a CSV file:\nURL = 'https://www.bls.gov/cex/tables/calendar-year/\\\naggregate-group-share/reference-person-age-ranges-2021.pdf'\ntabula.convert_into(URL, \"output.csv\", output_format=\"csv\", pages='all')\n\n# Convert CSV file into a DataFrame and inspect:\ndf = pd.read_csv('output.csv', header=1)\ndf.head()\n```", "```py\nunits = df.iloc[4, 3:10].apply(lambda x: int(x.translate(\n                             str.maketrans('', '', string.punctuation))) * 1000)\n```", "```py\n# Define age brackets based on DataFrame column headers and create a dictionary:\nbrackets = ['25-34', '35-44', '45-54', '55-64', '65 years', '65-74', '75 years']\nnum_units_per_age = dict(zip(brackets, units))\n\nprint(num_units_per_age)\n```", "```py\n{'25-34': 21024000, '35-44': 22921000, '45-54': 22276000, '55-64': 24751000, '65 years': 36016000, '65-74': 21479000, '75 years': 14537000}\n```", "```py\n# Designate age bracket to examine (must match column header name): \nAGE = '25-34'\n\n#Prepare DataFrame:\ndf = df.iloc[4:, :]\ndf.columns = ['Expenditure Type', 'Aggregate'] + list(df.columns[2:])\ndf = df[['Expenditure Type', 'Aggregate', AGE]]\n\n# Strip punctuation and leading and trailing whitespace from columns:\ndf['Expenditure Type'] = df['Expenditure Type'].str.replace(\n                                           '[^\\w\\s]','', regex=True).str.strip()\ndf['Aggregate'] = df['Aggregate'].str.replace('[^\\w\\s]','', regex=True)\n\n# Make top-level 'Expenditure Type' the index and keep only selected rows:\ndf = df.set_index('Expenditure Type', drop=True)\ndf = df.loc[['Food', 'Housing', 'Transportation', 'Healthcare', 'Education',\n             'Reading', 'Alcoholic beverages', 'Apparel and services',\n             'Entertainment', 'Personal care products and services', \n             'Tobacco products and smoking supplies', 'Miscellaneous', \n             'Cash contributions', 'Personal insurance and pensions'], :]\n\n# Rename columns for smaller Treemap labels:\ndf.rename(index={'Alcoholic beverages': 'Alcohol', \n                 'Apparel and services': 'Apparel',\n                 'Personal care products and services': 'P-Care',\n                 'Tobacco products and smoking supplies': 'Smoking',\n                 'Miscellaneous': 'Misc.',\n                 'Cash contributions': 'Cash Contr.',\n                 'Personal insurance and pensions': 'Insurance'}, inplace=True)\n\n# Calculate percent share and average expenditure (in $) for each type:\ndf['Expenditure'] = df['Aggregate'].astype(float) * df[AGE].astype(float) / 100\ndf['Expenditure Percent'] = (df['Expenditure'] / df['Expenditure'].sum()) * 100\ndf['Ave Expenditure'] = (df['Expenditure'] * 1000000) / num_units_per_age[AGE]\ndf['Ave Expenditure'] = df['Ave Expenditure'].astype(int)\ndf.head(15)\n```", "```py\n# Create treemap:\nfig = px.treemap(df, path=[px.Constant('Expenditure Type'), df.index],\n                 values='Expenditure Percent',\n                 color='Ave Expenditure',\n                 color_continuous_scale='portland',\n                 width=900, height=500)\n\n# Update layout:\ntitle = f'Average Expenditure for {AGE} year-olds \\\n(Bureau of Labor Statistics 2021)'\nfig.update_layout(title=title, margin=dict(t=40, l=10, r=10, b=25))\n```", "```py\nfig = px.treemap(df, path=[px.Constant('Expenditure Type'), df.index],\n                 values='Ave Expenditure',\n                 color='Expenditure Percent',\n                 color_continuous_scale='portland',\n                 width=900, height=500)\n```"]