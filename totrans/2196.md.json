["```py\nfrom statsmodels.tsa.stattools import adfuller\n# Perform the Augmented Dickey-Fuller (ADF) test for stationarity\nadf_statistic, adf_p_value, adf_lags,\nadf_nobs, adf_critical_values, adf_reg_results = adfuller(stationary_series)\n\n# Check if the series is stationary based on the p-value\nis_stationary = adf_p_value < 0.05  # Using a significance level of 0.05\n```", "```py\n# What youy will probably will use most of the time\n_, adf_p_value, _, _, _, _= adfuller(stationary_series)\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nnp.random.seed(1992) # WOW this is our deterministic seed.\n\ndef generate_stationary_series_pseudorandom(size=100):\n    stationary_series = np.random.randn(size)\n    return stationary_series\n```", "```py\nimport requests\n\ndef generate_stationary_series_random(size=100):\n    # Fetch truly random values from random.org atmospheric noise API\n    response = requests.get(f'https://www.random.org/integers/?num={size}&min=-10000&max=10000&col=1&base=10&format=plain&rnd=new')\n    if response.status_code == 200:\n        stationary_series = [int(value) for value in response.text.strip().split('\\n')]\n        return stationary_series\n    else:\n        raise Exception(f\"Failed to fetch random values. Status code: {response.status_code}\")\n```", "```py\n# Generate series\nstationary_series_pseudorandom = generate_stationary_series_pseudorandom()\nstationary_series_random = generate_stationary_series_pseudorandom()\n```", "```py\ntitles = [\n    'stationary_series_pseudorandom',\n    'stationary_series_random'\n]\n\nplot_multiple_series(stationary_series_random, stationary_series_pseudorandom, \n                     titles=titles)\n```", "```py\n_, adf_p_value, _, _, _, _= adfuller(stationary_series_pseudorandom)\nprint(f'PseudoRandom adf p-value: {adf_p_value}')\n_, adf_p_value, _, _, _, _= adfuller(stationary_series_random)\nprint(f'TrueRandom adf p-value: {adf_p_value}')\n```", "```py\ndef generate_non_stationary_linear_trend(size=100):\n    time = np.arange(size)\n    linear_trend = 0.5 * time\n    non_stationary_series = np.random.randn(size) + linear_trend\n    return non_stationary_series \n```", "```py\ndef generate_non_stationary_sin_amplitude(size=100):\n    time = np.arange(size)\n    amplitude = 0.5 + 0.02 * time\n    sin_amplitude_component = amplitude * np.sin(2 * np.pi * time / 10)\n    non_stationary_series = np.random.randn(size) + sin_amplitude_component\n    return non_stationary_series\n```", "```py\ndef generate_non_stationary_exponential_growth(size=100, growth_rate=0.05):\n    time = np.arange(size)\n    exponential_growth_component = np.exp(growth_rate * time)\n    non_stationary_series = np.random.randn(size) + exponential_growth_component\n    return non_stationary_series\n```", "```py\n# Example usage\nstationary_series_pseudorandom = generate_stationary_series_pseudorandom()\nnon_stationary_linear_trend_series = generate_non_stationary_linear_trend()\nnon_stationary_sin_amplitude_series = generate_non_stationary_sin_amplitude()\nnon_stationary_exponential_growth_series = generate_non_stationary_exponential_growth()\n\n# Visualize the examples\nplot_multiple_series(stationary_series_pseudorandom, \n                     non_stationary_linear_trend_series, \n                     non_stationary_sin_amplitude_series, \n                     non_stationary_exponential_growth_series,\n                     titles=[\n                         'Stationary series',\n                         'Linear Trend (Non-Constant Mean)',\n                         'Sinusoidal Amplitude (Non-Constant Variance)',\n                         'Exponential Growth (Non-Constant Autocorrelation)'\n                     ])\n```", "```py\n_, adf_p_value_stationary, _, _, _, _ = adfuller(stationary_series_pseudorandom)\n_, adf_p_value_linear_trend, _, _, _, _ = adfuller(generate_non_stationary_linear_trend())\n_, adf_p_value_sin_amplitude, _, _, _, _ = adfuller(generate_non_stationary_sin_amplitude())\n_, adf_p_value_exponential_growth, _, _, _, _ = adfuller(generate_non_stationary_exponential_growth())\n\n# Print the results\nprint(f'PseudoRandom ADF P-value (Stationary Series): {adf_p_value_stationary}')\nprint(f'PseudoRandom ADF P-value (Linear Trend): {adf_p_value_linear_trend}')\nprint(f'PseudoRandom ADF P-value (Sinusoidal Amplitude): {adf_p_value_sin_amplitude}')\nprint(f'PseudoRandom ADF P-value (Exponential Growth): {adf_p_value_exponential_growth}')\n```", "```py\ndef make_linear_trend_stationary(series):\n    # Subtract the linear trend to make the mean constant.\n    time = np.arange(len(series))\n    linear_trend = 0.5 * time # Somehow we have found this trend :)\n    stationary_series = series - linear_trend\n    return stationary_series\n\ndef make_sin_amplitude_stationary(series):\n    # Apply differencing to stabilize and make the variance constant.\n    diff_series = np.diff(series)\n    return diff_series\n\ndef make_exponential_growth_stationary(series, epsilon=1e-8):\n    # Add a small constant to avoid zero or negative values\n    series = np.where(series <= 0, epsilon, series)\n\n    # Add a small constant to avoid non-finite values\n    series += epsilon\n\n    # Apply the log for stabilization\n    series = np.log(series)\n\n    # Take the first difference to remove the exponential growth\n    stationary_series = np.diff(series)\n\n    return stationary_series\n```", "```py\n# Apply transformations to make non-stationary examples stationary\nstationary_linear_trend = make_linear_trend_stationary(generate_non_stationary_linear_trend())\nstationary_sin_amplitude = make_sin_amplitude_stationary(generate_non_stationary_sin_amplitude())\nstationary_exponential_growth = make_exponential_growth_stationary(generate_non_stationary_exponential_growth())\n\n# Perform ADF test for the transformed series\nadf_p_value_stationary_linear_trend = adfuller(stationary_linear_trend)[1]\nadf_p_value_stationary_sin_amplitude = adfuller(stationary_sin_amplitude)[1]\nadf_p_value_stationary_exponential_growth = adfuller(stationary_exponential_growth)[1]\n\n# Print the results\nprint(f'ADF P-value (Stationary Linear Trend): {adf_p_value_stationary_linear_trend}')\nprint(f'ADF P-value (Stationary Sinusoidal Amplitude): {adf_p_value_stationary_sin_amplitude}')\nprint(f'ADF P-value (Stationary Exponential Growth): {adf_p_value_stationary_exponential_growth}')\n```"]