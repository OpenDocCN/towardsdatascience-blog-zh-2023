- en: Introduction to Optimization Constraints with SciPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/introduction-to-optimization-constraints-with-scipy-7abd44f6de25](https://towardsdatascience.com/introduction-to-optimization-constraints-with-scipy-7abd44f6de25)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explore bounds, linear and nonlinear constraints with practical Python examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://nicolo-albanese.medium.com/?source=post_page-----7abd44f6de25--------------------------------)[![Nicolo
    Cosimo Albanese](../Images/9a2c26207146741b58c3742927d09450.png)](https://nicolo-albanese.medium.com/?source=post_page-----7abd44f6de25--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7abd44f6de25--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7abd44f6de25--------------------------------)
    [Nicolo Cosimo Albanese](https://nicolo-albanese.medium.com/?source=post_page-----7abd44f6de25--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7abd44f6de25--------------------------------)
    ·8 min read·Jan 31, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d21debedc54b93104a0d8720c23d510f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: Table of contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Introduction](#d414)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Implementation](#5bb0)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2.1 [Unconstrained optimization](#b0a9)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2.2 [Bounds](#5ca2)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2.3 [Linear constraints](#a9d0)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2.4 [Nonlinear constraints](#e5dd)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2.5 [Applying different constraint types together](#694a)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Conclusions](#1887)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 1\. Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Optimization is the process of picking the best elements from a set of potential
    candidates to reach a specific goal.
  prefs: []
  type: TYPE_NORMAL
- en: 'We perform a lot of optimization tasks in our everyday life: finding the shortest
    or fastest route to reach a destination, preparing a to-do list with daily assignments
    ordered by priority, buying groceries.'
  prefs: []
  type: TYPE_NORMAL
- en: We can describe such problems starting with the definition of an **objective
    function** `**f(x)**`.
  prefs: []
  type: TYPE_NORMAL
- en: Let us imagine that we are organizing a journey to another city, and we are
    trying assess a suitable departure time. In this example, the objective function
    `f(x)` is the duration of the trip as function of the departure time `x`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can formulate an optimization problem as the **identification of the minimum
    or maximum value of the objective function**. In our example, we want to determine
    the departure time that will *minimize* the duration of the trip:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/53058bafd753fc24b8787f2bae65a947.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In other scenarios, we may want to maximize `f(x)`. For instance, when the
    objective represents a likelihood or a return of investment. Nevertheless, maximizing
    a function is equivalent to minimizing its negative. Therefore, one may focus
    on minimization problems alone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/14906b0b542215c7c747bb23b40cc4c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In real-world applications, we may need to apply **constraints** to our optimization
    problem. For example, we may want to find the fastest route, but we are unwilling
    to pay tolls, or travel at night. We define **constrained optimization** as the
    process of minimizing the objective function under some logical conditions that
    may reflect:'
  prefs: []
  type: TYPE_NORMAL
- en: real-world limitations;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the physical meaning of the input variables;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: contextual circumstances.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this post, we share an optimization example using `[SciPy](https://scipy.org/)`,
    a popular Python library for scientific computing. In particular, we **explore
    the most common constraint types**: bounds, linear and nonlinear constraints.'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 2.1 Unconstrained optimization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start from a simple unconstrained optimization problem, and add constraints
    to the input variables later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the needed libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Imagine the following multivariable objective function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2079c6191ec31308b1dfed1d5b7fd9f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Its gradient with respect to `x₀` and `x₁` is
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/662db459c6a779db707e7ef0aec798f2.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us generate data and observe the function values for `x₀, x₁ ∈ [-1, 1]`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0d7e0e1af54d0729a342fef793aa5d61.png)'
  prefs: []
  type: TYPE_IMG
- en: Objective function. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, the objective function is **non-convex** and possesses several
    minima.
  prefs: []
  type: TYPE_NORMAL
- en: This implies that, depending on the starting point, the problem may converge
    to a different minimizer.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can solve the optimization problem by leveraging the helpful `[scipy.optimize.minimize](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html)`
    function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notably, we are applying the `trust-constr` method. It allows to optimize a
    function subject to constraints. More information on the method is available in
    the [package documentation](https://docs.scipy.org/doc/scipy/reference/optimize.minimize-trustconstr.html)
    and in "*Trust-region methods*" ([Conn, Gould and Toint; 2000](https://doi.org/10.1137/1.9780898719857)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The above code snippet returns the found minimizer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us plot it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/66d4997ba1de5aa3755f82614ac329c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Objective function and its minimizer. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: We can now experiment the addition of constraints.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Bounds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us consider our previous example about finding the fastest trip between
    two cities, with the departure time as input variable. We may expect to find more
    or less traffic depending on the hour of the day. By aiming at minimizing the
    duration of the trip, a model may also suggest, for instance, to travel at night.
  prefs: []
  type: TYPE_NORMAL
- en: Although this might result in the shortest trip, we may prefer to travel during
    daytime. So, we could ask the model to find the shortest trip considering departure
    times ranging from 7.00 AM to 6.00 PM only.
  prefs: []
  type: TYPE_NORMAL
- en: This is where bounds come in. Bounds are simply **equality or inequality constraints
    on input variables**. They allow to evaluate the objective function solely **between
    the specified ranges**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, suppose to have the following acceptable values for `x₀` and `x₁`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/713880e133fbe83aaff59ff2641d1306.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can easily pass these values to the `[Bounds](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.Bounds.html)`
    object and perform a new optimization experiment as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The optimization task leads now to a different solution, as the previous point
    `array([0 , 0])` does not fall in the feasible region:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can finally plot the new minimum and the feasible region, and observe the
    area in which `f(x)` was evaluated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9b2da2d21a86ce185cf9379a050ea493.png)'
  prefs: []
  type: TYPE_IMG
- en: Objective function with “unconstrained” minimum (red dot) and minimum resulting
    from the application of bounds (blue dot). The applied variables ranges identify
    the grey colored area (feasible region).
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 Linear constraints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linear constraints define linear relations between the optimization variables.
    For example, let us imagine `x₀` and `x₁` to be subject to
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cd9d55e32117cab6c5e0dd5f0ce82be8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can easily rewrite these conditions as a linear system, and pass them to
    the `[LinearConstraint](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.LinearConstraint.html)`
    object before running the optimization task:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3f290c523447ca6bcc524b60810f9b84.png)'
  prefs: []
  type: TYPE_IMG
- en: Linear constraints. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The new solution is
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The feasible region of `f(x)` corresponds to a portion of the space delimited
    by an intersection of hyperplanes. Let us plot these boundaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/79c1e348e74229be8b2d909311b18d3e.png)'
  prefs: []
  type: TYPE_IMG
- en: Objective function. The blue dot is the minimum identified by applying linear
    constraints, whose boundaries are shown as hyperplanes. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: 2.4 Nonlinear constraints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can also explore the objective function within the region defined by nonlinear
    constraints using the `[NonlinearConstraint](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.NonlinearConstraint.html)`
    object. Assume that `x₀` and `x₁` are subject to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7dd014f36d8ee68145831b86c5dfd339.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We optimize `f(x)` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly to the previous examples, we could observe the objective and the
    found minimizer given the current constraint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d3e4bfc3e9028da8dc30cbc98543e77c.png)'
  prefs: []
  type: TYPE_IMG
- en: The feasible region is outside of the cylinder defined by the nonlinear constraint.
    Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: 2.5 Applying different constraint types together
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can combine bounds as well as linear and nonlinear constraints as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We remark that not all optimization methods support bounds and/or constraints.
    Additional information can be found in the [package documentation](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html).
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this post, we explored different types of optimization constraints. In particular,
    we shared practical Python examples using the `SciPy` library. The examples come
    with plots that allow to visually inspect the different constraints.
  prefs: []
  type: TYPE_NORMAL
- en: 'Related posts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/survival-analysis-optimize-the-partial-likelihood-of-the-cox-model-b56b8f112401?source=post_page-----7abd44f6de25--------------------------------)
    [## Survival Analysis: Optimize the Partial Likelihood of the Cox Model'
  prefs: []
  type: TYPE_NORMAL
- en: Finding the coefficients that maximize the log-partial likelihood in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/survival-analysis-optimize-the-partial-likelihood-of-the-cox-model-b56b8f112401?source=post_page-----7abd44f6de25--------------------------------)
  prefs: []
  type: TYPE_NORMAL
