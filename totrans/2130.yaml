- en: 'Towards Being Tool-Agnostic in Data Science: SQL Case When and Pandas Where'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/towards-being-tool-agnostic-in-data-science-sql-case-when-and-pandas-where-f6a3d3cbcafa](https://towardsdatascience.com/towards-being-tool-agnostic-in-data-science-sql-case-when-and-pandas-where-f6a3d3cbcafa)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explained with examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://sonery.medium.com/?source=post_page-----f6a3d3cbcafa--------------------------------)[![Soner
    Yıldırım](../Images/c589572e9d1ee176cd4f5a0008173f1b.png)](https://sonery.medium.com/?source=post_page-----f6a3d3cbcafa--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f6a3d3cbcafa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f6a3d3cbcafa--------------------------------)
    [Soner Yıldırım](https://sonery.medium.com/?source=post_page-----f6a3d3cbcafa--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f6a3d3cbcafa--------------------------------)
    ·6 min read·Jul 17, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/886913bc04bb14136595417bda17365c.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Monika Simeonova](https://unsplash.com/@monnysim?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/yUdawywuYm0?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Your customer data is in a SQL database. You’re assigned a task that involves
    retrieving data from some tables, doing some data cleaning and manipulation, and
    writing the results to a different table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, you don’t know how to do those operations with SQL. No worries!
    You’re great at using Pandas for data cleaning and manipulation. So, you come
    up with a solution, which is:'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieve all the data from SQL tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the data as CSV files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read the CSV files into Pandas DataFrames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform the required data cleaning and manipulation operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write the results to a different CSV file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload the data in the CSV file to a SQL table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nice plan right?
  prefs: []
  type: TYPE_NORMAL
- en: If you actually execute this plan, I’m sure your manager will have a talk with
    you, which can be pleasant or unpleasant depending on your manager’s personality.
    In any case, I don’t think you’ll execute this awesome plan anymore after the
    talk.
  prefs: []
  type: TYPE_NORMAL
- en: I know there are usually many different ways of doing a task in data science.
    You should always aim for the most efficient one because you’ll typically work
    with very large datasets. Making things more complicated than necessary costs
    you extra money and time.
  prefs: []
  type: TYPE_NORMAL
- en: “I’m great at Pandas so I’ll do everything with Pandas” is not a desired attitude.
    If your task involves reading data from SQL tables and writing results to SQL
    tables, the best way is usually doing the steps in between using SQL.
  prefs: []
  type: TYPE_NORMAL
- en: SQL is not just a query language. It can be used as a highly efficient data
    analysis and manipulation tool as well.
  prefs: []
  type: TYPE_NORMAL
- en: I remember writing SQL jobs to do very complex data preprocessing operations
    and they worked just fine.
  prefs: []
  type: TYPE_NORMAL
- en: Data science is still an evolving field. New tools and concepts are introduced
    in no time. You should not be dependent on a single tool and should always be
    open to learning new ones.
  prefs: []
  type: TYPE_NORMAL
- en: Pandas vs SQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pandas and SQL have a lot in common in terms of what they’re capable of. Both
    are extremely good at data analysis and manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we’ll go through examples to learn how SQL `CASE WHEN` statement
    and Pandas `where` function can be used for doing the same operation. As a bonus,
    we’ll also learn about NumPy `where` function, which is more flexible than Pandas
    `where` .
  prefs: []
  type: TYPE_NORMAL
- en: I have the following data stored in a SQL table and a Pandas DataFrame, both
    are named `product_inventory` .
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/757a12c4e1d2c24775a6c1f504781519.png)'
  prefs: []
  type: TYPE_IMG
- en: The first 5 rows of the data (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: You can download this dataset as a CSV file from my [datasets](https://github.com/SonerYldrm/datasets)
    repo. It’s called `product_inventory.csv` .
  prefs: []
  type: TYPE_NORMAL
- en: The first task
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll first create a new column called `has_enough_stock` , which takes the
    value 1 if the stock quantity is more than 500 and 0 otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'The SQL version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following part creates the `has_enough_stock` column according to the specified
    condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The Pandas version includes the `where` function, which takes a condition and
    replaces values where the condition is false.
  prefs: []
  type: TYPE_NORMAL
- en: In order to use it for our task, we first need to create the `has_enough_stock`
    column with all 0s. Then, we’ll change the 0s to 1s where the stock quantity is
    more than 500.
  prefs: []
  type: TYPE_NORMAL
- en: Since the `where` function allows for changing values where the condition is
    false, we’ll define the condition as `stock_qty <= 500` (i.e. stock quantity is
    less than or equal to 500). The rows for which this condition evaluates to false
    are the ones with a stock quantity of more than 500.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b1a04f964c78ca7506860275829640c1.png)'
  prefs: []
  type: TYPE_IMG
- en: The first 5 rows of the product_inventory DataFrame (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: NumPy where function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using the Pandas `where` function, we need to first create the `has_enough_stock`
    column with all 0s. This is because it only allows for updating values that do
    not fit the given condition.
  prefs: []
  type: TYPE_NORMAL
- en: NumPy `where` function lets you update the values that fit and don’t fit the
    condition so there is no need to initialize the column first.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dc6761d832f4f6f443e74e774ade5fab.png)'
  prefs: []
  type: TYPE_IMG
- en: NumPy where function (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how we can create the `has_enough_stock` column with NumPy `where`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter is the condition, the second one is the value to be used
    for rows that fit the condition, and the third one is the value for rows that
    don’t fit the condition.
  prefs: []
  type: TYPE_NORMAL
- en: What if we need more than 2 categories?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The example we did involves creating a column with only 2 values (i.e. categories).
    Let’s also do an example that requires creating more than 2 categories.
  prefs: []
  type: TYPE_NORMAL
- en: '*You can become a* [*Medium member*](https://sonery.medium.com/membership)
    *to unlock full access to my writing, plus the rest of Medium. If you already
    are, don’t forget to* [*subscribe*](https://sonery.medium.com/subscribe) *if you’d
    like to get an email whenever I publish a new article.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll create a new column named `stock_situation` based on the following criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: Stock quantity > 500, “enough”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stock quantity ≤ 500 and stock quantity > 200, “critical”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stock quantity ≤ 200, “order asap”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SQL version is quite similar. We’ll just need to add a new line with `WHEN
    condition THEN value` .
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When it comes to creating this column in a Pandas DataFrame, we need a different
    function, which is the `select` function of NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: It can take a set of conditions and allow for assigning a value for each condition
    separately.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ea9d3a4c9371da246c00d093b61ff675.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: The conditions and values are created using Python lists. Then, we just pass
    them to the `select` function as arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Final words
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The examples we did are not very complex but they support my point of not sticking
    to a particular tool especially when working with large datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Spending a few hours to learn a new tool can save you hours in the long run.
    It’ll also save you from doing unnecessary computations and thus spending extra
    money.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading. Please let me know if you have any feedback.
  prefs: []
  type: TYPE_NORMAL
