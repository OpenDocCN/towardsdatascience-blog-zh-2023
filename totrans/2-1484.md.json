["```py\nfrom airflow.sensors.external_task import ExternalTaskSensor\n\next_task_sensor = ExternalTaskSensor(\n    dag=gordon_tasks,\n    task_id='check_dough_freshness',\n    external_dag_id='jamie_tasks',\n    external_task_id='make_new_dough',\n    email=['gordon.damnsie@gmail.com', 'jamie@gmail.com'],\n    execution_delta=timedelta(minutes=30),\n    # execution_date_fn=my_function,\n    timeout=1800,\n    poke_interval=300,\n    mode='reschedule'\n)\n```", "```py\nfrom airflow.sensors.external_task import ExternalTaskSensor\n\next_task_sensor = ExternalTaskSensor(\n    dag=gordon_tasks,\n    task_id='check_dough_freshness',\n    external_dag_id='jamie_tasks',\n    external_task_id='make_new_dough',\n    email=['gordon.damnsie@gmail.com', 'jamie@gmail.com'],\n    execution_delta=timedelta(minutes=30),  # Pass the execution delta here\n    timeout=1800,\n    poke_interval=300,\n    mode='reschedule'\n)\n```", "```py\ndef my_exec_date_fn(gordon_exec_date):\n    # Add your logic here.\n    return jamie_exec_date\n\next_task_sensor = ExternalTaskSensor(\n    dag=gordon_tasks,\n    task_id='check_dough_freshness',\n    external_dag_id='jamie_tasks',\n    external_task_id='make_new_dough',\n    email=['gordon.damnsie@gmail.com', 'jamie@gmail.com'],\n    execution_date_fn=my_exec_date_fn,  # Pass the function here.\n    timeout=1800,\n    poke_interval=300,\n    mode='reschedule'\n)\n```", "```py\n# The naive way (This is a bad practice. Don't do this.)\ndef my_exec_date_fn(gordon_exec_date):\n    if gordon_exec_date == datetime(year=2023,month=3,day=14,hour=6,minute=30):\n        jamie_exec_date = datetime(year=2023,month=3,day=5,hour=6,minute=0)\n    elif gordon_exec_date == datetime(year=2023,month=3,day=15,hour=6,minute=30):\n        jamie_exec_date = datetime(year=2023,month=3,day=5,hour=6,minute=0)\n    elif gordon_exec_date == datetime(year=2023,month=3,day=16,hour=6,minute=30):\n        jamie_exec_date = datetime(year=2023,month=3,day=5,hour=6,minute=0)\n    elif gordon_exec_date == datetime(year=2023,month=3,day=17,hour=6,minute=30):\n        jamie_exec_date = datetime(year=2023,month=3,day=5,hour=6,minute=0)\n    ...\n\n    return jamie_exec_date\n```", "```py\ndef my_exec_date_fn(gordon_exec_date):\n    day_of_week = gordon_exec_date.isoweekday()\n\n    if day_of_week in (6, 7):\n        time_diff = timedelta(days=day_of_week, minute=30)\n        jamie_exec_date = gordon_exec_date - time_diff\n    elif day_of_week in (1, 2, 3, 4, 5):\n        time_diff = timedelta(days=day_of_week+7, minute=30)\n        jamie_exec_date = gordon_exec_date - time_diff\n\n    return jamie_exec_date\n\next_task_sensor = ExternalTaskSensor(\n    dag=gordon_tasks,\n    task_id='check_dough_freshness',\n    external_dag_id='jamie_tasks',\n    external_task_id='make_new_dough',\n    email=['gordon.damnsie@gmail.com', 'jamie@gmail.com'],\n    execution_date_fn=my_exec_date_fn,\n    timeout=1800,\n    poke_interval=300,\n    mode='reschedule'\n)\n```", "```py\nfrom airflow.operators.dummy_operator import DummyOperator\nfrom airflow.operators.python_operator import PythonOperator\nfrom airflow.sensors.external_task import ExternalTaskSensor\n\n# Define task 1\ndef make_dough():\n    # include your secret recipe here!\n    return cookies\n\n# Create DAG\njamie_tasks = DAG(\n    dag_id='jamie_tasks',\n    description='Jamie to do list. (a.k.a making dough only)',\n    schedule_interval='5 3 * * *',\n    ...\n)\n\n# Include task 0 in DAG (as a starting point)\nstart = DummyOperator(\n    dag=jamie_tasks,\n    task_id='start'\n)\n\n# Include task 1 in DAG\nmake_dough = PythonOperator(\n    dag=jamie_tasks,\n    task_id='make_dough',\n    python_callable=make_dough,\n    ...\n)\n\n# Create dependencies (deciding the sequence of task to run)\nstart >> make_dough\n```", "```py\nfrom airflow.operators.dummy_operator import DummyOperator\nfrom airflow.operators.python_operator import PythonOperator\nfrom airflow.sensors.external_task import ExternalTaskSensor\n\n# Define task 1\ndef bake_cookies():\n    # include your secret recipe here!\n    return cookies\n\n# Define task 2\ndef make_money():\n    # include your money making technique step-by-step here.\n    return money\n\n# Define execution_date_fn for sensor 1\ndef my_exec_date_fn(gordon_exec_date):\n    day_of_week = gordon_exec_date.isoweekday()\n\n    if day_of_week in (6, 7):\n        time_diff = timedelta(days=day_of_week, minute=30)\n        jamie_exec_date = gordon_exec_date - time_diff\n    elif day_of_week in (1, 2, 3, 4, 5):\n        time_diff = timedelta(days=day_of_week+7, minute=30)\n        jamie_exec_date = gordon_exec_date - time_diff\n\n    return jamie_exec_date\n\n# Create DAG\ngordon_tasks = DAG(\n    dag_id='gordon_tasks',\n    description='List of things that Gordon needs to do.',\n    schedule_interval='5 3 * * *',\n    ...\n)\n\n# Include task 0 in DAG (as a starting point)\nstart = DummyOperator(\n    dag=gordon_tasks,\n    task_id='start'\n)\n\n# Include task 1 in DAG\nbake_cookies = PythonOperator(\n    dag=gordon_tasks,\n    task_id='bake_cookies',\n    python_callable=bake_cookies,\n    ...\n)\n\n# Include task 2 in DAG\nmake_money = PythonOperator(\n    dag=gordon_tasks,\n    task_id='make_money',\n    python_callable=make_money,\n    ...\n)\n\n# Create sensor 1\ncheck_dough_freshness = ExternalTaskSensor(\n    dag=gordon_tasks,\n    task_id='check_dough_freshness',\n    external_dag_id='jamie_tasks',\n    external_task_id='make_new_dough',\n    email=['gordon.damnsie@gmail.com', 'jamie@gmail.com'],\n    execution_date_fn=my_exec_date_fn,\n    timeout=1800,\n    poke_interval=300,\n    mode='reschedule'\n)\n\n# Create dependencies (deciding the sequence of task to run)\n(start\n    >> check_dough_freshness\n    >> bake_cookies\n    >> make_money)\n```"]