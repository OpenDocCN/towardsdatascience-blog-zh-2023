- en: Make a Text Summarizer with GPT-3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GPT-3 创建文本总结器
- en: 原文：[https://towardsdatascience.com/make-a-text-summarizer-with-gpt-3-f0917a07189e](https://towardsdatascience.com/make-a-text-summarizer-with-gpt-3-f0917a07189e)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/make-a-text-summarizer-with-gpt-3-f0917a07189e](https://towardsdatascience.com/make-a-text-summarizer-with-gpt-3-f0917a07189e)
- en: Quick tutorial using Python, OpenAI’s GPT-3, and Streamlit
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Python、OpenAI 的 GPT-3 和 Streamlit 的快速教程
- en: '[](https://medium.com/@jaypeterman?source=post_page-----f0917a07189e--------------------------------)[![Jay
    Peterman](../Images/94587c88cb7981fa58fa8137d27b9588.png)](https://medium.com/@jaypeterman?source=post_page-----f0917a07189e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f0917a07189e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f0917a07189e--------------------------------)
    [Jay Peterman](https://medium.com/@jaypeterman?source=post_page-----f0917a07189e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@jaypeterman?source=post_page-----f0917a07189e--------------------------------)[![Jay
    Peterman](../Images/94587c88cb7981fa58fa8137d27b9588.png)](https://medium.com/@jaypeterman?source=post_page-----f0917a07189e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f0917a07189e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f0917a07189e--------------------------------)
    [Jay Peterman](https://medium.com/@jaypeterman?source=post_page-----f0917a07189e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f0917a07189e--------------------------------)
    ·11 min read·Jan 23, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f0917a07189e--------------------------------)
    ·阅读时间 11 分钟·2023年1月23日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/e852944464412bdf76d016dcde8c7f12.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e852944464412bdf76d016dcde8c7f12.png)'
- en: Photo by [Ed Robertson](https://unsplash.com/@eddrobertson?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Ed Robertson](https://unsplash.com/@eddrobertson?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: We are likely in the early days of language models, and there will be a lot
    of useful integrations developed in the coming years. I’ve been interested in
    text summarization recently, and I’ve found the solutions offered by OpenAI to
    excel at this task.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很可能还处于语言模型的早期阶段，未来几年将会有很多有用的集成方案开发出来。我最近对文本总结很感兴趣，并且发现 OpenAI 提供的解决方案在这方面表现出色。
- en: The goal of this tutorial is to introduce the reader to the OpenAI ecosystem,
    and give an example of how to actually build something from idea to deployment.
    We will do this by building a Streamlit app that uses OpenAI’s GPT-3 model to
    summarize text, and then deploy the app to Streamlit Cloud.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的目标是向读者介绍 OpenAI 生态系统，并给出一个从构思到部署的实际构建示例。我们将通过构建一个使用 OpenAI 的 GPT-3 模型来总结文本的
    Streamlit 应用，并将其部署到 Streamlit Cloud 来实现这一目标。
- en: If you’re interested in understanding how to work with language models in Python,
    this is a good first step. If you’re interested in building out your own integrations,
    you can use this as a template to build out your own ideas.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解如何在 Python 中使用语言模型，这是一个很好的第一步。如果你有兴趣构建自己的集成方案，可以将其作为模板来开发自己的想法。
- en: While some knowledge of Python, Git/Github, and command line will be useful,
    this tutorial can act as a guide to help newcomers learn a bit about each of these
    along the way.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管一些 Python、Git/Github 和命令行的知识将是有用的，但本教程可以作为一个指南，帮助新手在学习这些内容的过程中了解一些基本知识。
- en: 'Step 1: Set up git repo in Github, and clone it locally'
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 1：在 Github 上设置 git 代码库，并在本地克隆它
- en: If you don’t already have a Github account, you will need to sign up. Once you’re
    logged in, create a new repo called `text-summarizer` (you can call it whatever
    you want, but that’s what I’ll be calling it).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有 Github 账户，你需要注册一个。登录后，创建一个新的代码库，命名为 `text-summarizer`（你可以取任何你想要的名字，但我会用这个名字）。
- en: 'Once the repo is created, you can clone it locally and navigate to the project:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦代码库创建完成，你可以在本地克隆它并导航到项目：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can create a new branch to work out of:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个新的分支来进行工作：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Step 2: Set up .gitignore file'
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 2：设置 .gitignore 文件
- en: 'We’re going to need an API key to use the OpenAI API, and we need to make sure
    we will not accidentally commit it to our repo. You can make the file like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个 API 密钥来使用 OpenAI API，并且需要确保不会不小心将其提交到我们的代码库中。你可以像这样创建文件：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This ensures that nothing in the `.streamlit` directory will get added to your
    repo. We haven’t made this directory yet, but I like to set it up first.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这确保了 `.streamlit` 目录中的任何内容都不会被添加到你的代码库中。我们还没有创建这个目录，但我喜欢先设置好。
- en: 'Step 3: Set up virtual environment and install packages'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 3：设置虚拟环境并安装软件包
- en: 'Here is the command to make a virtual environment:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建虚拟环境的命令：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now you can activate the environment:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以激活环境了：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This app requires two packages: `openai` and `streamlit`. First, let’s upgrade
    pip:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用需要两个软件包：`openai` 和 `streamlit`。首先，让我们升级 pip：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we can install the packages:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以安装软件包了：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Step 4: Set up secrets.toml'
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 4：设置 secrets.toml
- en: 'For local development, we will be storing the API key in a file called `secrets.toml`,
    and we will put it in the `.streamlit` directory. Assuming you are in the root
    of your repo, you can enter the following commands:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本地开发，我们将 API 密钥存储在名为 `secrets.toml` 的文件中，并将其放在 `.streamlit` 目录中。假设你在项目根目录，可以输入以下命令：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once we generate the API key in the following step, you can store it in this
    file.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在下一步中生成了 API 密钥，你可以将其存储在这个文件中。
- en: 'Step 5: Get an OpenAI API key'
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 5：获取 OpenAI API 密钥
- en: If you don’t already have an account with OpenAI, you can create an account
    [here](https://openai.com/api/). Once you have an account and get logged in, you
    can click on the name icon in the upper right, and select `View API keys`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有 OpenAI 账户，可以[在这里](https://openai.com/api/)创建一个账户。创建账户并登录后，你可以点击右上角的名字图标，选择`查看
    API 密钥`。
- en: 'You can press the button that says `Create new secret key`. Copy the secret
    key from the pop-up, and paste it into `secrets.toml` like this (don’t forget
    to put quotes around the API key):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按下显示为 `Create new secret key` 的按钮。复制弹出窗口中的密钥，并将其粘贴到 `secrets.toml` 文件中，如下所示（不要忘记将
    API 密钥放在引号中）：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you’ve already blown through your free OpenAI credits and have moved to paid
    account, it’s a good idea to set a usage limit. Since we are deploying this app
    publicly, you want to make sure that you don’t accidentally spend more money than
    intended.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经用完了免费的 OpenAI 额度并转为付费账户，设置使用限制是个好主意。由于我们将这个应用公开发布，你需要确保不会意外花费超出预期的费用。
- en: 'Step 6: Build out the front end'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 6：构建前端
- en: This app will be very simple. It will have a text area where the user can input
    text, and a second text box underneath that will displayed the summarized text.
    We will also add a submit button.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用将非常简单。它将包含一个文本区域，用户可以在其中输入文本，下方的第二个文本框将显示总结后的文本。我们还将添加一个提交按钮。
- en: 'To get started, we will make a new file called `app.py` in the root of the
    repo:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们将在项目根目录下创建一个名为 `app.py` 的新文件：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Open `app.py` in a text editor, and enter this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开 `app.py`，并输入以下内容：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is a simple snippet that creates the skeleton of our app. Even if you don’t
    know anything about Python or Streamlit, this code should still be pretty readable.
    We are simply making a title, creating two text boxes, and a submit button.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的代码片段，用于创建我们应用的骨架。即使你对 Python 或 Streamlit 一无所知，这段代码也应该很容易理解。我们只是创建了一个标题，两个文本框和一个提交按钮。
- en: 'To run this app, enter the following command from the root of your repo:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行这个应用，从你的项目根目录输入以下命令：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After running this command, a browser window should open up running the app.
    If not, you can find the URL in terminal, and paste it into a browser. This is
    what you should see:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，浏览器窗口应打开并运行应用。如果没有，你可以在终端中找到 URL，并将其粘贴到浏览器中。这是你应该看到的内容：
- en: '![](../Images/1076d3a259eee973a258d1a250bab202.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1076d3a259eee973a258d1a250bab202.png)'
- en: 'Source: Image by author'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：作者提供的图片
- en: This showcases the power of Streamlit, because it just takes a few lines of
    code to make something pretty cool.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这展示了 Streamlit 的强大，因为只需几行代码就能做出一些很酷的东西。
- en: 'Step 7: Get started with OpenAI and GPT-3'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 7：开始使用 OpenAI 和 GPT-3
- en: Now that we have the skeleton of our app, we need to make it do something. Here
    is the basic syntax we can use to get GPT-3 to generate text from a prompt.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了应用的骨架，我们需要让它执行一些操作。以下是我们可以用来让 GPT-3 从提示生成文本的基本语法。
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The first line reads the API key from your environment variables. When running
    in the context of the Streamlit app, `os.getenv` will be able to access the secrets
    we stored in the top level of `.streamlit/secrets.toml`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行从你的环境变量中读取 API 密钥。当在 Streamlit 应用的上下文中运行时，`os.getenv` 将能够访问我们存储在 `.streamlit/secrets.toml`
    顶层的密钥。
- en: 'Then, we call `Completion` endpoint of the OpenAI API, and pass the arguments
    for the following parameters:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们调用 OpenAI API 的 `Completion` 端点，并传递以下参数的参数：
- en: '**model:** we will be using `text-davinci-003`, which is the most advanced
    model.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型：** 我们将使用`text-davinci-003`，这是最先进的模型。'
- en: '**prompt:** This can be any arbitrary text. For the purposes of text summarization,
    this will be the full text.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**temperature:** This is number between 0 and 1 that defines how much risk
    the model will take while generating the output. The higher the number, the more
    risk the model will take. It seems like the best results for text summarization
    will be a lower number. You can experiment with this.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_tokens:** This defines the max length of the output in terms of tokens.
    A token equals approximately 4 characters.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can see all the parameters in the [OpenAI docs](https://beta.openai.com/docs/api-reference/completions/create).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: If you want to play around with this snippet, you can save it in a `.py` file
    and run it. Please note, the OpenAI API key that we stored in `.streamlit/secrets.toml`
    will not be accessible outside the context of a Streamlit app, so you will have
    to add the key as an environment variable or just paste it over `os.getenv('API_KEY')`.
    Just be careful not to push your API key to Github.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: This snippet will ultimately get refactored into a function that will get triggered
    by the `submit` button in the UI.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 8: Prepare app.py to handle output from OpenAI'
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned above, the `submit` button will trigger the summarization function.
    We will need to store the model output in a variable that can populate the lower
    text box. We will solve this by using the `session_state` object in Streamlit.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to initialize a state variable, and that can be done like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `st.session_state` object is a Python `dict` that saves data when the app
    gets rerun. The snippet above is testing to see if there is already an entry for
    `summary`. If `summary` is not in `st.session_state`, it will get added with its
    value set to an empty `str`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to populate the the bottom text area with the current state of `summary`.
    Since `st.session_state` is just a Python `dict`, all we have to do is pass `st.session_state["summary"]`
    to the `value` parameter of the second instance of `st.text_area`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'Your `app.py` file should now look like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can make sure your code is working by checking the UI. It shouldn’t look
    different, but there shouldn’t be any errors.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 9: Build function to summarize text**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'First we are going to make a module to store the function to keep the Streamlit
    app clean, and you can follow these steps starting from the root of the repo:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now we can add this to `functions.py`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This isn’t a huge transformation from what we used in step 7\. We augment the
    `prompt` by prepending it with `"summarize this text: "` to tell the model that
    we want it to summarize the text. Then we run `openai.Completion.create` and save
    the output into the `summary` state variable. The part at the end just parses
    the response to only grab the text that we’re interested in. I have hardcoded
    the parameters, but feel free to experiment.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 10: Finish app.py'
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have the function created, we can finalize the app. First, we need
    to import the function at the top:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了函数，我们可以完成应用程序。首先，我们需要在顶部导入这个函数：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we need to configure the `submit` button to trigger `summarize` when pushed.
    Here’s how to do it:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要配置 `submit` 按钮，以便在点击时触发 `summarize`。下面是方法：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `on_click` parameter specifies the the callable function that will be used
    in the callback, and this case we will use `summarize`. If you’re not familiar
    with `kwargs`, it just means keyword arguments. We will pass a `dict` with a single
    entry (since the function only has one parameter), and we will pass the `str`
    that was entered by the user in the first text area.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`on_click` 参数指定了回调中将使用的可调用函数，在这种情况下我们将使用 `summarize`。如果你不熟悉 `kwargs`，它只是指关键字参数。我们将传递一个包含单个条目的
    `dict`（因为函数只有一个参数），并将用户在第一个文本区域中输入的 `str` 传递进去。'
- en: 'We also need to specify the API key:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要指定 API 密钥：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `app.py` file should now look like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.py` 文件现在应该如下所示：'
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You should now be able to run the app, and start summarizing text.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能够运行应用程序并开始总结文本。
- en: 'Step 11: Handle Errors'
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 11：处理错误
- en: In its current state, the app doesn’t handle errors very well. If an error occurs,
    a user will get an error message that exposes information that a user shouldn’t
    see.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前状态下，应用程序对错误的处理不是很好。如果发生错误，用户将会收到暴露了用户不应看到的信息的错误消息。
- en: If you want to simulate an error, navigate to `.streamlit/secrets.toml` and
    delete the final letter of your API key. Rerun your app, and try to summarize
    some text. You should see an error that gives a Traceback with some information
    about your API, as well as a revealing part of the key.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想模拟错误，可以导航到 `.streamlit/secrets.toml` 并删除你的 API 密钥的最后一个字母。重新运行你的应用程序，然后尝试总结一些文本。你应该会看到一个错误，显示有关你的
    API 的 Traceback 和密钥的一部分。
- en: 'To hide this from users, we can add a `try-except` pattern like this in two
    places:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将此隐藏于用户之外，我们可以在两个地方添加类似 `try-except` 的模式：
- en: '**app.py**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**app.py**'
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**text_summarizer/functions.py**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**text_summarizer/functions.py**'
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Step 12: Make requirements.txt'
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 12：制作 requirements.txt
- en: 'Since we will ultimately be deploying this on Streamlit Cloud, we need to document
    which Python packages that the app needs. An easy way to do this is create a `requirements.txt`
    file. Assuming you have your virtual environment activated and have installed
    all the necessary packages, you can run this command from the root of the repo:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们最终将把它部署到 Streamlit Cloud，因此我们需要记录应用程序所需的 Python 包。一个简单的方法是创建一个 `requirements.txt`
    文件。假设你已经激活了虚拟环境并安装了所有必要的包，你可以在仓库的根目录下运行这个命令：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Step 12: Commit, Push, Merge to main branch'
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 12：提交、推送、合并到主分支
- en: 'Now that the code works, we can add files to the repo and commit:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在代码已经可以工作了，我们可以将文件添加到仓库并提交：
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then commit the changes:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后提交更改：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then push your changes to the remote Github repo:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将你的更改推送到远程 Github 仓库：
- en: '[PRE26]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now you can go back to Github and go to the Pull request section. Click `New
    pull request` and set the compare branch to `initial_build`. Now you can simply
    create the Pull request, and merge it. You can find more detailed docs on PRs
    [here](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以回到 Github 并进入 Pull request 部分。点击 `New pull request` 并将比较分支设置为 `initial_build`。现在你可以简单地创建
    Pull request 并合并它。你可以在[这里](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request)找到有关
    PR 的更多详细文档。
- en: 'Step 12: Deploy to Streamlit Cloud'
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 12：部署到 Streamlit Cloud
- en: Streamlit Cloud is a super easy way to share your Streamlit apps, and it’s free.
    First you need to sign up [here](https://streamlit.io/cloud), and connect your
    Github account. Click on the `New app` button, and choose `From existing repo`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit Cloud 是一个分享你的 Streamlit 应用程序的超级简单方法，而且是免费的。首先你需要在[这里](https://streamlit.io/cloud)注册，并连接你的
    Github 账户。点击 `New app` 按钮，并选择 `From existing repo`。
- en: When you click on the text box for `Repository`, you should see a list of repos
    from your Github account. Select `text-summarizer`. Make sure the correct branch
    is selected, and that `Main file path` is `app.py`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击 `Repository` 文本框时，你应该会看到来自你 Github 账户的仓库列表。选择 `text-summarizer`。确保选择了正确的分支，并且
    `Main file path` 为 `app.py`。
- en: Lastly, since we were careful not to push our API key to Github, we need to
    store that secret in a secure way. Luckily, Streamlit Cloud has a built-in secrets
    manager. Click on `Advanced settings`, and you can paste the contents of `.streamlit/secrets.toml`
    here. You can now press `Deploy`, and your app will be live in a few minutes.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，由于我们小心翼翼地没有将 API 密钥推送到 Github，我们需要以安全的方式存储该密钥。幸运的是，Streamlit Cloud 具有内置的秘密管理器。点击
    `Advanced settings`，然后你可以在此处粘贴 `.streamlit/secrets.toml` 的内容。现在你可以按 `Deploy`，你的应用将在几分钟内上线。
- en: Streamlit Cloud will monitor your repo, and automatically deploy any new commits
    that get merged.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit Cloud 将监视你的仓库，并自动部署所有合并的新提交。
- en: You can find more detailed docs about Streamlit Cloud [here](https://docs.streamlit.io/streamlit-cloud).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [这里](https://docs.streamlit.io/streamlit-cloud) 找到有关 Streamlit Cloud 的更详细文档。
- en: 'The outcome:'
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结果：
- en: 'Here is a test of the application using the introduction of this tutorial as
    the input:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用本教程介绍的内容作为输入的应用测试：
- en: '![](../Images/8ed4010da944611c03d29d9592f5202c.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8ed4010da944611c03d29d9592f5202c.png)'
- en: 'Source: Image by author'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：作者提供的图片
- en: As you can see, the model does a pretty good job of summarizing the prompt.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，模型在总结提示方面做得相当不错。
- en: 'Bonus: How you can use Custom URLs'
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外内容：如何使用自定义 URL
- en: Streamlit and Streamlit Cloud have a lot of great features, but custom URLs
    are not currently supported. One work-around is to host a static website that
    has your app embedded as an `iframe`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit 和 Streamlit Cloud 具有许多出色的功能，但目前不支持自定义 URL。一种解决方法是托管一个静态网站，将你的应用嵌入为
    `iframe`。
- en: 'If you want to try this, make a new file called `index.html` in the root of
    the repo, and use this code:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想尝试，可以在仓库根目录下创建一个名为 `index.html` 的新文件，并使用此代码：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You just need to copy the URL from you Streamlit app and past it into the `src`
    parameter in the `iframe`. Make sure you add `?embed=true` at the end[1].
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要从你的 Streamlit 应用中复制 URL，并将其粘贴到 `iframe` 的 `src` 参数中。确保在末尾添加 `?embed=true`
    [1]。
- en: Now you can store this file in a cloud storage bucket, like AWS S3 or DigitialOcean
    Spaces, and point a custom URL to the exposed bucket.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以将此文件存储在云存储桶中，如 AWS S3 或 DigitialOcean Spaces，并将自定义 URL 指向暴露的存储桶。
- en: 'Limitations and possible improvements:'
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制和可能的改进：
- en: This app is meant to be an introductory project, and is feature-sparse by design.
    Therefore, there are some obvious limitations that can be improved upon.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用旨在作为一个入门项目，故意功能简 sparse。因此，有一些明显的限制可以改进。
- en: '**Give the user more control:** You can add Streamlit widgets to allow users
    to specify arguments for each parameter of the OpenAI function. For example, users
    may want to select how long the summary should be.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**赋予用户更多控制权：** 你可以添加 Streamlit 小部件，以允许用户为 OpenAI 函数的每个参数指定参数。例如，用户可能希望选择摘要的长度。'
- en: '**Make it possible to process longer texts:** There’s a limit to how much text
    can be processed in a single request. To allow users to summarize longer texts,
    you could split the input text into smaller prompts, process each prompt separately,
    and parse the individual responses into a longer summary. I haven’t tried this,
    and it might take some work to get satisfactory results.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使处理较长文本成为可能：** 单次请求能够处理的文本量有限。为了允许用户总结更长的文本，你可以将输入文本拆分成更小的提示，分别处理每个提示，并将各个响应解析成更长的摘要。我还没有尝试过这方法，这可能需要一些工作才能获得令人满意的结果。'
- en: '**Guide the user to unlocking unknown features:** GPT-3 is quite flexible,
    and the user can technically add a lot of features without the developer explicitly
    building them. For example, you can get a response in Spanish by slightly modifying
    the prompt:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引导用户解锁未知功能：** GPT-3 非常灵活，用户可以在不显式构建这些功能的情况下添加许多功能。例如，你可以通过稍微修改提示来获得西班牙语响应：'
- en: '![](../Images/68435b7b0cffcf48e5a9aa10bed003d8.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/68435b7b0cffcf48e5a9aa10bed003d8.png)'
- en: 'Source: image by author'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：作者提供的图片
- en: According to Google Translate (I don’t speak Spanish), the response is not really
    a summary in Spanish, but rather a translation in Spanish. While this is not the
    intended behavior, I believe you can get what you want by engineering the prompt
    a bit (or by passing the translation through the text summarizer after translation).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Google 翻译（我不会说西班牙语），响应实际上不是西班牙语的总结，而是西班牙语的翻译。虽然这不是预期的行为，但我相信通过稍微调整提示（或在翻译后通过文本总结器传递翻译），你可以获得你想要的结果。
- en: If you can figure out how to make this work, you can simply add a Streamlit
    widget that allows the user to select a language. Then you will have to modify
    the code to augment the prompt with the user input.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能找出如何使其运作，你可以简单地添加一个 Streamlit 小部件，允许用户选择语言。然后，你需要修改代码，以将用户输入增强到提示中。
- en: Conclusion
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: You just learned how to make a text summarization app with GPT-3 and Streamlit.
    The app is obviously pretty simple, but you can use this a template to build any
    new integrations you want to try. Thanks for reading.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚学会了如何使用 GPT-3 和 Streamlit 制作文本摘要应用程序。这个应用程序显然很简单，但你可以将其作为模板，构建你想尝试的任何新集成。感谢阅读。
- en: Sources
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源
- en: '[1] [https://discuss.streamlit.io/t/embeding-streamlit-cloud-url-with-iframe/27511](https://discuss.streamlit.io/t/embeding-streamlit-cloud-url-with-iframe/27511)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] [https://discuss.streamlit.io/t/embeding-streamlit-cloud-url-with-iframe/27511](https://discuss.streamlit.io/t/embeding-streamlit-cloud-url-with-iframe/27511)'
