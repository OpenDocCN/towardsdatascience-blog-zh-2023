- en: Use Pandas Data Frames More Effectively with the Top 7 Column Operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/dominate-pandas-data-frames-with-the-top-7-column-operations-2a11521e9e2d](https://towardsdatascience.com/dominate-pandas-data-frames-with-the-top-7-column-operations-2a11521e9e2d)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The complete guide to performing the top 7 Pandas column operations, in different
    ways
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://federicotrotta.medium.com/?source=post_page-----2a11521e9e2d--------------------------------)[![Federico
    Trotta](../Images/e997e3a96940c16ab5071629016d82fd.png)](https://federicotrotta.medium.com/?source=post_page-----2a11521e9e2d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2a11521e9e2d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2a11521e9e2d--------------------------------)
    [Federico Trotta](https://federicotrotta.medium.com/?source=post_page-----2a11521e9e2d--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2a11521e9e2d--------------------------------)
    ·15 min read·Jul 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4a4f32645b84448222d2511ae309f680.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Alan](https://pixabay.com/it/users/ad_images-6663717/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=2987596)
    on [Pixabay](https://pixabay.com/it//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=2987596)
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to data analysis, [Pandas](https://pandas.pydata.org/) is the
    most used [Python](/how-to-study-python-for-data-science-888a1ad649ae) library
    to manipulate and prepare the data for further analyses and Machine Learning.
  prefs: []
  type: TYPE_NORMAL
- en: The reality is that Pandas is a really flexible library and [can be used even
    to convert file formats](/how-to-convert-a-csv-file-into-an-xlsx-one-with-python-and-pandas-27aabc279d69).
  prefs: []
  type: TYPE_NORMAL
- en: However, even if we use some Pandas features barely every day, we spend a lot
    of time Googling how to do something in Pandas.
  prefs: []
  type: TYPE_NORMAL
- en: I know, I caught you!
  prefs: []
  type: TYPE_NORMAL
- en: 'But let’s be honest: some features are difficult to remember, maybe because
    we can reach the same goal with different methods. So, there’s nothing to be ashamed
    of if we Google the same things every day.'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, saving time is always a good idea. For this reason, in this article,
    we’ll go through the 7 top features to manipulate Pandas columns. This way you
    won''t need to Google them anymore: you just need to save this article (maybe,
    by bookmarking it) and return to it whenever you need it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what you’ll find here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to create a new Pandas column
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First of all, let’s remember that a Pandas column is also called a [Pandas series](https://pandas.pydata.org/docs/reference/api/pandas.Series.html).
    This means that a Pandas data frame is an ordered collection of Pandas series.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few methods to create a new Pandas column. Let’s see them all.
  prefs: []
  type: TYPE_NORMAL
- en: Create a Pandas column as a Pandas series
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The correct method to create a Pandas column that is thought to “live” on its
    own is through the Pandas series method like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: I said “the correct method” because, as we’ve said, a Pandas column is a Pandas
    series. So, if we just need a single column we should use this method if we’d
    like to be “**formally** correct”.
  prefs: []
  type: TYPE_NORMAL
- en: Create a Pandas column as a Pandas data frame
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: However, the reality is that we won’t need a column on its own much often.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, another way to create a Pandas column is by creating a new Pandas data
    frame with just one column: this way, we could enrich it in a second moment with
    other columns.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: So, here the difference with the previous example is that, in this case, the
    Pandas column has also the name. In this case, we’ve called it “A”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Create a Pandas column as a Pandas data frame, starting from a NumPy array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the superpowers of Pandas is that it can “accept” NumPy arrays as input
    values. In other words, we can create a data frame starting from a NumPy array.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of a single column, we can create a one-dimensional array and transform
    it into a data frame: this results in a data frame with a single column.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How to add a new column to a Pandas data frame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The possibility to add a new column to a Pandas data frame is somehow paired
    with the creation of a new column.
  prefs: []
  type: TYPE_NORMAL
- en: What I mean here is that we first need to create a Pandas data frame, then a
    single Pandas column, then we need to add the column to the data frame.
  prefs: []
  type: TYPE_NORMAL
- en: Also in this case we have multiple possibilities to do so. Let’s see them all.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding a new column to a Pandas data frame: the standard method'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The standard method to add a new column to a Pandas data frame is to create
    the data frame, then create a separate column, then add it to the data frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll use this method throughout all the following examples. So, here’s how
    we can do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'So, let’s analyze what we’ve done step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: We’ve created a Pandas data frame with the method `pd.DataFrame()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ve created a new column with `df['B']`, meaning we called this new column
    “B”.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ve assigned the values to the newly created column, with a list of numbers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, what’s another method to create a new column? Is by using **a list of numbers**,
    if we already have a data frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding a new column to a Pandas data frame: applying functions'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The power of the standard method to add a new column to an existing data frame
    gives us the possibility to create a new column and add it to an existing data
    frame, all in one line of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, say that we want to create two new columns as a combination of
    an existing column. We can do so by applying functions to existing columns like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'So, here’s what we’ve done:'
  prefs: []
  type: TYPE_NORMAL
- en: We've created a Pandas column (“A”) as a data frame.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ve created column “B” by doubling the values of column “A”.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ve created column “C” by applying a lambda function to column “A”. In particular,
    in this case, we’re squaring the values of column “A”.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of these columns are stored together in a unique data frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding a new column to a Pandas data frame: using Pandas series or single Pandas
    columns'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Of course, we can add columns to a Pandas data frame even when the columns are
    Pandas series or Pandas data frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how we can do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: So, in the above case, we’ve created a Pandas series and, then, we’ve added
    it to the existing data frame by giving it a name.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of a Pandas column created as a Pandas data frame, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: And here we are.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How to rename a column in Pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Renaming a Pandas column (or more than one) is another typical daily task we
    need to perform, but that we often can’t remember.
  prefs: []
  type: TYPE_NORMAL
- en: Also, in this case, we have different methods to do so. Let’s see them all.
  prefs: []
  type: TYPE_NORMAL
- en: 'How to rename a Pandas column: the rename() method'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can rename a Pandas column with the `rename()` method like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: So, it’s like we’re using a dictionary. Inside the `rename()` method, in fact,
    we need to pass the argument `columns` and specify the actual name and the new
    name inside curly braces, separating them with a column. Just like we do in dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, we can use this method to rename multiple columns like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: And, again, it’s as we’d work with dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: 'How to rename a Pandas column: the column attribute'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To rename one Pandas column (or more than one, as we’ll see) we can use the
    `columns` attribute like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: So, in this case, the `columns` attribute gives us the possibility to use a
    list of strings to rename the columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'How to rename a Pandas column: the set_axis() method'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To rename one (or more than one) Pandas column we can use the `set_axis()`
    method like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: So, even in this case, we use a list of strings to rename the columns, but here
    we also need to pass the parameters `axis=1` and `inplace=True` because the `set_axis()`
    method sets the axes from zero, so is recreating them. This lets this method rename
    the columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'How to rename a Pandas column: using lambda functions'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we have to deal with strings as in the case of Pandas columns names, we
    can use lambda functions to modify the characters of the text.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we may want (or need) to rename the columns by simply lowering
    the letters. We can do it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: And here we are.
  prefs: []
  type: TYPE_NORMAL
- en: How to drop a Pandas column
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dropping a Pandas column (or more than one) is another task we need to perform
    very often. Maybe because its values are not significant, maybe because its values
    are all `NULL` or for other reasons.
  prefs: []
  type: TYPE_NORMAL
- en: To perform this task we have two methods. Let’s see them both.
  prefs: []
  type: TYPE_NORMAL
- en: 'How to drop a Pandas column: using the drop() method'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The typical method to drop a Pandas column (or more than one) is by using the
    `drop()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Here the only thing to get in mind is to decide if we want to drop some columns
    and create a new data frame, or if we want to drop them and substitute the current
    data frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let me show the difference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: So, we’ve dropped the column “A” by using the `drop()` method specifying the
    name of the column we wanted to drop and the axis (`axis=1` in Pandas indicates
    the vertical direction and must be specified).
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we've decided to substitute the data frame `df`. So, at the end
    of the process, the data frame `df` hasn’t column “A”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, if we want to create another data frame, let’s say we call id `df_2`,
    we have to do it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: So, in this case, we’ve dropped two columns and created a new data frame with
    just columns “B” and “C”.
  prefs: []
  type: TYPE_NORMAL
- en: This may be useful if we think we may need the original data frame `df` in the
    future, for further analyses.
  prefs: []
  type: TYPE_NORMAL
- en: 'How to drop a Pandas column: using the column index'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Pandas, columns can be singled out via the indexes. This means that we can
    drop them using indexes like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: So, in this case, we’ve created a new data frame with just columns “C” and “D”
    and we've deleted columns “A” and “B” by using their indexes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remembering that in Python we start counting from 0 (so, the first column is
    at index 0 and is column “A”), we have to say that this method may not be optimal
    if we have tens of columns for a simple reason: we should find the one (or the
    ones) we want to drop by counting them, which is subject to errors.'
  prefs: []
  type: TYPE_NORMAL
- en: How to find unique values in a Pandas column
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finding unique values in a Pandas column is another task that we may need to
    perform daily, because duplicated values have to be treated in a particular way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also in this case we have a couple of methods to do so: one shows the duplicates
    in one column and the other removes them.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see them both.
  prefs: []
  type: TYPE_NORMAL
- en: 'How to find unique values in a Pandas column: using the value_counts() method
    to find duplicates'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we want to see if a Pandas column has duplicated values, and we also want
    to see how much are they, we can use the `value_counts()` like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'So, the result here tells that:'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the column is “A” and the types are all “int64”.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have two 1s.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have two 3s.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have one 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, it shows us the values and tells us how many of them are present in the
    column of our interest.
  prefs: []
  type: TYPE_NORMAL
- en: 'How to find unique values in a Pandas column: using the drop_duplicates() method
    to drop duplicates'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we want to drop the duplicates values in a Pandas column (because we know
    there are duplicates in it) we can use the `drop_duplicates()` method like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: So, we have removed the duplicates from column “A”, creating a new Pandas column
    called `unique_values`.
  prefs: []
  type: TYPE_NORMAL
- en: 'How to find unique values in a Pandas column: studying a data frame'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, you may be asking:” *Well, if I have a big data frame with tens
    of columns, how can I know that properly some columns have some duplicates*?”
  prefs: []
  type: TYPE_NORMAL
- en: Good question! The thing we can do is to first study the whole data frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we may want to see if any columns have duplicates. We can do it
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: So, this code returns “True” if there are columns with duplicates and “False”
    if there aren’t.
  prefs: []
  type: TYPE_NORMAL
- en: 'And how about if we want to know the name of the columns that actually have
    duplicates? We can do it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'And, so, the above code shows:'
  prefs: []
  type: TYPE_NORMAL
- en: The columns with the duplicates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The values of the duplicates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can now investigate any further with the `value_counts()` method or drop
    them with the `drop_duplicates()` method.
  prefs: []
  type: TYPE_NORMAL
- en: How to transform a Pandas column into a list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Transforming a Pandas column into a list is a useful feature that can give us
    the possibility to “isolate” all the values from a Pandas column to put them into
    a list. Then, we can do whatever we may need with a list, which is easily manageable
    (iterating, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: We have two possibilities to do this transformation.
  prefs: []
  type: TYPE_NORMAL
- en: 'How to transform a Pandas column into a list: using the list() method'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `list()` method is a built-in Python function that converts an iterable
    object into a list. We can use it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: So, we’ve easily extracted our values and put them into a list.
  prefs: []
  type: TYPE_NORMAL
- en: 'How to transform a Pandas column into a list: using the to_list() method'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To achieve the same result, we can use the `to_list()` method from Pandas.
    But take care: **it’s available from Pandas version 1.2.0 or later**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: And, of course, we’ve obtained the same result as before.
  prefs: []
  type: TYPE_NORMAL
- en: How to sort a Pandas data frame for a column
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a lot of situations in which we need to sort our columns. By sorting
    we mean ordering, so we can choose to order the data in ascending or descending
    way.
  prefs: []
  type: TYPE_NORMAL
- en: We can reach this goal with the following methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'How to sort a Pandas data frame for a column: using the sort_values() method'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To sort a Pandas data frame for a column, we can use the `sort_values()`like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'So, as we can see, the data frame has been sorted with column “A” in ascending
    order. In fact, if we check:'
  prefs: []
  type: TYPE_NORMAL
- en: In the initial data frame, in column “A” the number 1 is in the 4th position.
    In column “B”, the number 28 is in the fourth position.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the sorted data frame, in column “A”, the number 1 is in the first position.
    In column “B”, the number 28 is in the first position.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, we sort the data frame but we don’t lose the relations between the values
    of the columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'A very useful feature of this method is that it can sort a column by putting
    `NaNs` as first values. We can do it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: And here we are.
  prefs: []
  type: TYPE_NORMAL
- en: 'How to sort a Pandas data frame for a column: using the sort_index() method'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can also sort a data frame for index value like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: And, as we can see, the indexes are ordered (in ascending way).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we’ve seen the top 7 operations on Pandas columns that we perform
    barely every day.
  prefs: []
  type: TYPE_NORMAL
- en: This guide will help you save a lot of time if you save it, because we’ve performed
    the same task in different ways so that you won't need to Google them anymore,
    saving a lot of time.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5079e3af9eda458328cb258c452fb935.png)'
  prefs: []
  type: TYPE_IMG
- en: Federico Trotta
  prefs: []
  type: TYPE_NORMAL
- en: Hi, I’m Federico Trotta and I’m a freelance Technical Writer.
  prefs: []
  type: TYPE_NORMAL
- en: Want to collaborate with me? [Contact me](https://bio.link/federicotrotta).
  prefs: []
  type: TYPE_NORMAL
