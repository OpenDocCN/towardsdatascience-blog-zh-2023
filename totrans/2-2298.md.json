["```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.path as mpath\nimport pandas as pd\n```", "```py\ndf = pd.read_csv('https://bit.ly/44YgahT')\ndf.head(3)\n```", "```py\n# The following code was adapted from Stack Overflow:\n# https://stackoverflow.com/questions/44726675/custom-markers-using-python-matplotlib\n# Asked by: https://stackoverflow.com/users/5689281/kushal\n# Answered by: https://stackoverflow.com/users/4124317/importanceofbeingernest\n\ndef get_hurricane_symbol():\n    \"\"\"Return a hurricane warning symbol as a matplotlib path.\"\"\"\n    # Create a numpy array for the symbol's coordinates and codes:\n    coordinates = np.array([[2.444, 7.553],\n                            [0.513, 7.046],\n                            [-1.243, 5.433],\n                            [-2.353, 2.975],\n                            [-2.578, 0.092],\n                            [-2.075, -1.795],\n                            [-0.336, -2.870],\n                            [2.609, -2.016]])\n\n    # Shift the x-coordinates:\n    coordinates[:, 0] -= 0.098\n\n    # Define path codes:\n    codes = [1] + [2] * (len(coordinates) - 2) + [2]\n\n    # Duplicate and reverse the coordinates:\n    coordinates = np.append(coordinates, -coordinates[::-1], axis=0)\n\n    # Duplicate the codes:\n    codes += codes\n\n    # Create and return the matplotlib path:\n    return mpath.Path(3 * coordinates, codes, closed=False)\n```", "```py\n# Call the function to build the hurricane marker:\nsymbol = get_hurricane_symbol()\n\n# Initialize the figure:\nplt.figure(figsize=(10, 4))\n\n# Plot the actual number of hurricanes per year:\nplt.plot(df.Year, df['Actual H'], \n         label='Actual Value', \n         marker=symbol, \n         markersize=17, \n         c='darkblue', \n         linestyle='None', \n         lw=1)\n\n# Shade NOAA's predicted range of hurricanes for each year:\nplt.fill_between(x=df.Year, \n                 y1=df['Predicted H Low'], \n                 y2=df['Predicted H High'],\n                 alpha=0.3, \n                 label='Predicted Range')\n\nplt.xlabel('Year')\nplt.ylabel('Number of Hurricanes')\nplt.legend(loc='lower right')\nplt.grid(True, c='lightgrey', alpha=0.5)\nplt.title('Actual Number of Atlantic Hurricanes vs. \\\nNOAA May Prediction (2001-2022)');\n\n# Optional code to save the figure:\n# plt.savefig('range_plot.png', bbox_inches='tight', dpi=600)\n```", "```py\nplt.figure(figsize=(10, 4))\nplt.plot(df.Year, df['Actual H'], \n         label='Actual Value', \n         marker=symbol, \n         markersize=17, \n         c='darkblue', \n         linestyle='None', \n         lw=1)\nplt.fill_between(x=df.Year, \n                 y1=df['Predicted H Low'], \n                 y2=df['Predicted H High'],\n                 step='mid',\n                 alpha=0.3, \n                 label='Predicted Range')\nplt.xlabel('Year')\nplt.ylabel('Number of Hurricanes')\nplt.legend(loc='lower right')\nplt.grid(True, c='lightgrey', alpha=0.5)\nplt.title('Actual Number of Atlantic Hurricanes vs. \\\nNOAA May Prediction (2001-2022)');\n```", "```py\n# Plot the predicted ranges and color the actual values by event.\n# Define a dictionary to map text colors to matplotlib colors:\ncolor_mapping = {'Nina': 'blue', \n                 'Nino': 'red', \n                 'Weak Event': 'grey'}\n# Map the Event column to colors. Use black if x not found:\ndf['colors_mapped'] = df['Event'].apply(lambda x: color_mapping.get(x, 'k'))\n\nplt.figure(figsize=(10, 4))\nplt.scatter(df.Year, df['Actual H'], \n            label='Actual Value', \n            marker=symbol, \n            s=300, \n            c=df.colors_mapped, \n            linestyle='None', \n            lw=1)\nplt.fill_between(x=df.Year, \n                 y1=df['Predicted H Low'], \n                 y2=df['Predicted H High'], \n                 alpha=0.3, \n                 label='Predicted Range')\nplt.xlabel('Year')\nplt.ylabel('Number of Hurricanes')\nplt.legend(loc='lower right')\nplt.grid(True, c='lightgrey', alpha=0.5)\n\n# Add event legend as title:\nplt.suptitle('Actual Number of Atlantic Hurricanes vs. NOAA May Prediction (2001-2022)')\nplt.figtext(0.4, 0.9, '$\\u25CF$ La Nina', fontsize='medium', c='b', ha ='right')\nplt.figtext(0.5, 0.9, '$\\u25CF$ El Nino', fontsize='medium', c='r', ha ='center')\nplt.figtext(0.6, 0.9, '$\\u25CF$ Weak Event', fontsize='medium', c='grey', ha ='left');\n```", "```py\nplt.figure(figsize=(10, 4))\nplt.scatter(df.Year, df['Actual MH'], \n            label='Actual Value', \n            marker=symbol, s=300, \n            c=df.colors_mapped, \n            linestyle='None', \n            lw=1)\nplt.fill_between(x=df.Year, \n                 y1=df['Predicted MH Low'], \n                 y2=df['Predicted MH High'], \n                 alpha=0.3, \n                 label='Predicted Range')\nplt.xlabel('Year')\nplt.ylabel('Number of Major Hurricanes (Cat 3+)')\nplt.legend(loc='lower right')\nplt.grid(True, c='lightgrey', alpha=0.5)\n\n# Add event legend as title:\nplt.suptitle('Actual Number of Major Atlantic Hurricanes vs. NOAA May Prediction (2001-2022)')\nplt.figtext(0.4, 0.9, '$\\u25CF$ La Nina', fontsize='medium', c='b', ha ='right')\nplt.figtext(0.5, 0.9, '$\\u25CF$ El Nino', fontsize='medium', c='r', ha ='center')\nplt.figtext(0.6, 0.9, '$\\u25CF$ Weak Event', fontsize='medium', c='grey', ha ='left');\n```", "```py\n# Redraw plot with vertical lines for ranges:\nplt.figure(figsize=(10, 4))\n\n# Use a scatter plot for actual values:\nplt.scatter(df.index, df['Actual H'], \n            label='Actual Value', \n            marker=symbol, \n            c='darkblue', \n            s=350)\n\n# Draw vertical lines for the predicted ranges:\nfor i, row in df.iterrows():\n    plt.vlines(x=i, \n               ymin=row['Predicted H Low'], \n               ymax=row['Predicted H High'], \n               alpha=0.4, \n               lw=6, \n               zorder=0)\n\nx = range(len(df))\nplt.xticks(x, df.Year, rotation=90)\nplt.xlabel('Year')\nplt.ylabel('Number of Hurricanes')\nplt.legend(loc='lower right')\nplt.grid(True, color='lightgray', alpha=0.5)\nplt.title('Actual Number of Atlantic Hurricanes vs. NOAA May Prediction');\n```", "```py\n# Load the 1920-2022 hurricane dataset:\ndf = pd.read_csv('https://bit.ly/3sZnvQX')\n\n# Plot major hurricanes per year with regression line and AMO shading:\nplt.figure(figsize=(10, 4))\n\nplt.plot(df.Year, df.MH, \n         label='Actual Value', \n         marker=symbol, \n         markersize=17, \n         c='darkblue', \n         linestyle='None', \n         lw=1)\n\nplt.xlabel('Year')\nplt.xticks(range(1920, 2021, 10))\nplt.ylabel('Number of Major Hurricanes (Cat 3+)')\nplt.grid(True, c='lightgrey', alpha=0.5)\nplt.title('Number of Major Atlantic Hurricanes by Year 1920-2022', \n          fontsize=18)\n\n# Add a shaded span for AMO highs:\nplt.text(1940, 6.5, 'AMO High', c='firebrick')\nplt.axvspan(1926, 1964, \n           color='red', \n           alpha=0.2)\n\nplt.text(2005, 6.5, 'AMO High', c='firebrick')\nplt.axvspan(1995, 2022, \n           color='red', \n           alpha=0.2)\n\n# Calculate m (slope) and b (intercept) of linear regression line:\nm, b = np.polyfit(df.Year, df.MH, 1)\n\n# Add linear regression line to plot:\nplt.plot(df.Year, m*df.Year+b, c='darkblue', ls=':');\n```"]