- en: Say Goodbye to Flat Maps with Pydeck
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/say-goodbye-to-flat-maps-with-pydeck-5ce440177bcd](https://towardsdatascience.com/say-goodbye-to-flat-maps-with-pydeck-5ce440177bcd)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Elevate your mapping skills with 3D visualization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@lee_vaughan?source=post_page-----5ce440177bcd--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----5ce440177bcd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5ce440177bcd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5ce440177bcd--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----5ce440177bcd--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5ce440177bcd--------------------------------)
    ·9 min read·Jul 18, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6a954c5dab844b92ab97e64cc81a7215.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Google-Deepmind on Unsplash
  prefs: []
  type: TYPE_NORMAL
- en: 'A *3D extrusion map* is a type of data visualization where 3D bars or columns
    are positioned on a map based on their geographic coordinates. The height of each
    bar represents a *numerical value*, such as population or temperature, associated
    with that specific location. Here’s an example showing urban population density
    on the Hawaiian Islands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7acc43ad9c0b782ab41528f83d97a031.png)'
  prefs: []
  type: TYPE_IMG
- en: Population density (people/square kilometer) for Hawaii (all remaining images
    by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Maps of this type are presented with a “tilted” perspective so that the height
    of the bars is apparent. By combining the geographical information provided by
    the map with the vertical dimension represented by the bars, a 3D extrusion map
    can convey information and patterns in an interesting spatial context. *Relative
    relationships* are often more important than *absolute values*.
  prefs: []
  type: TYPE_NORMAL
- en: In this *Quick Success Data Science* project, we’ll use Python and the pydeck
    library to easily create 3D extrusion maps for population distribution in the
    United States and Australia. After finishing this short tutorial, you’ll have
    no problem creating stunning visualizations of your own geospatial datasets.
  prefs: []
  type: TYPE_NORMAL
- en: The Population Datasets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we’ll plot population data for the United States and Australia.
    For the US, we’ll use the free *Basic* *United States Cities Database* at [*simplemaps.com*](https://simplemaps.com/data/us-cities)
    [1].
  prefs: []
  type: TYPE_NORMAL
- en: This dataset contains information on 30,844 towns and cities that make up the
    bulk of the US population as of January 31, 2023\. It’s provided under a *Creative
    Commons Attribution 4.0* license and can be redistributed and used commercially.
    For convenience, I’ve already downloaded the data and stored it in a [Gist](https://gist.github.com/rlvaugh/a8c2fd019a33e347be2542320a942210).
  prefs: []
  type: TYPE_NORMAL
- en: For Australia, we’ll use a 2020 [Kaggle dataset](https://www.kaggle.com/datasets/maryamalizadeh/worldcities-australia)
    derived from the *simplemaps.com* [*World Cities Database*](https://simplemaps.com/data/world-cities)[2].
    It includes 1,035 prominent cities in Australia that contain most of its population.
    It’s released for free under an [MIT license](https://opensource.org/license/mit/)
    and *Creative Commons Attribution 4.0* license. For convenience, this dataset
    has also been stored in a [Gist](https://gist.github.com/rlvaugh/f5d08b0ef8fae288e4bbcfcf5af9bf89).
  prefs: []
  type: TYPE_NORMAL
- en: The pydeck Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The [*pydeck*](https://pypi.org/project/pydeck/)graphics library is a set of
    Python bindings, optimized for a Jupyter Notebook environment, for making spatial
    visualizations using [*deck.gl*](https://deck.gl/). The latter is a WebGL (GPU)-powered
    framework for visually exploring large datasets using a layered approach.
  prefs: []
  type: TYPE_NORMAL
- en: The pydeck library grants you access to the full deck.gl layer catalog in Python.
    You can create beautiful deck.gl maps without using a lot of JavaScript, and you
    can embed these maps in a Jupyter notebook or export them to a stand-alone HTML
    file. The library uses [Carto](https://carto.com/) by default but can also work
    well with other base map providers, like Mapbox.
  prefs: []
  type: TYPE_NORMAL
- en: A pydeck thematic map is meant to be used *interactively*. Like Plotly Express
    maps, you can pan and zoom the maps. Passing the cursor over a bar will also launch
    a hover data window revealing details such as the name of the data point, its
    value, location, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install pydeck with conda, enter the following in the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conda install -c conda-forge pydeck`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install with pip enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install pydeck`'
  prefs: []
  type: TYPE_NORMAL
- en: For more on installing pydeck, and to see the gallery of examples, visit [Gallery
    — pydeck 0.6.1 documentation](https://pydeck.gl/).
  prefs: []
  type: TYPE_NORMAL
- en: The Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following code was entered into JupyterLab *by cell*.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to pydeck, we’ll use the *pandas* data analysis library to load
    and manipulate the data. You can install it with either:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conda install pandas`'
  prefs: []
  type: TYPE_NORMAL
- en: or
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install pandas`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Preparing the US Population Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following code reads the US cities dataset into a pandas DataFrame and keeps
    only columns for the city name, its latitude, longitude, estimated population,
    and density (in population per square kilometer). Because there is such a huge
    range in population values, it also makes a new column by dividing the population
    value by 100\. This will make it easier to compare 3D bars between the US and
    Australia, which we’ll do later in the project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d400b11c6b630fec23d547b9debacc95.png)'
  prefs: []
  type: TYPE_IMG
- en: Display of the US cities DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: Plotting the US Population Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following code creates the thematic map in three steps. The first step instantiates
    a pydeck `Layer` object. The second step sets the `ViewState` parameters, such
    as the map's center point location, zoom level, pitch angle, and bearing. The
    final step instantiates a `Deck` object and renders the map in HTML.
  prefs: []
  type: TYPE_NORMAL
- en: The first argument used in the `Layer()` class is `type`. Here, we use the `ColumnLayer`
    type, which creates bars (technically, cylindrical columns). To see other options,
    such as heatmap layers and icon layers, visit the pydeck [gallery](https://deckgl.readthedocs.io/en/latest/).
  prefs: []
  type: TYPE_NORMAL
- en: Among the other important arguments for the `Layer()` class are `get_elevation`,
    which is the DataFrame column used for the bar height; `elevation_scale`, which
    scales the bar height; `pickable`, which turns on hover data when the cursor lands
    on a bar; and `coverage`, which sets the width of the bar. These arguments, along
    with the one for `get_fill_color`, will let you fine-tune the appearance of the
    map.
  prefs: []
  type: TYPE_NORMAL
- en: The `ViewState()` class arguments are straightforward. The `bearing` controls
    the view orientation, and `pitch` sets the view angle (`0` = straight down).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d9992d1e9d63c0856391b759a15990ba.png)'
  prefs: []
  type: TYPE_IMG
- en: Population map for 30,000+ US cities
  prefs: []
  type: TYPE_NORMAL
- en: Although we’re only plotting about a third of the cities in the US, the map
    is still impressive. One of the most obvious features is the [100th Meridian](https://medium.com/better-programming/tell-a-climate-story-with-plotly-express-bca33a723bc4),
    an imaginary vertical line that divides the more populated eastern half of the
    US from the more sparsely populated western interior.
  prefs: []
  type: TYPE_NORMAL
- en: A somewhat misleading aspect is the ultra-tall columns for places like New York
    City and Los Angeles. The free version of the database we’re using provides *urban*
    populations, rather than *municipal* populations, which means it reports the population
    of the municipality and its surrounding suburbs and industrial areas, known as
    the *greater metropolitan area*. This is a bit of double-dipping, but it can be
    useful in its own right, as you don’t have to identify and sum up the components
    of this larger area.
  prefs: []
  type: TYPE_NORMAL
- en: As far as functionality goes, you can intuitively manipulate this map using
    your mouse or keyboard. The scroll wheel lets you zoom. The first mouse button
    (MB1) will let you pan. SHIFT-MB1 lets you tilt the viewing angle or rotate the
    map. Finally, you can hover over a bar with your mouse to get detailed information
    on the data point (you’ll probably want to zoom in first).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0451366dead5218cdb26fb1cf60c1441.png)'
  prefs: []
  type: TYPE_IMG
- en: The “pickable” pop-up window for the city of Cut and Shoot, Texas
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: to make a color bar or legend in pydeck you have to use an external library
    like Matplotlib and then render it *beside* your pydeck visualization rather than
    *within* it. You can learn about standalone Matplotlib color bars [here](https://matplotlib.org/stable/tutorials/colors/colorbar_only.html).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Plotting the US Population Density Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following code plots the density data. I’ve tweaked some of the arguments
    to improve the display.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5ce0b9bb068f0aafee4e262e9a076c64.png)'
  prefs: []
  type: TYPE_IMG
- en: Population density map for 30,000+ US cities
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d636d74265abb98e3225e0bcc7eaa9a7.png)'
  prefs: []
  type: TYPE_IMG
- en: The map zoomed to show the population density in the northeastern US
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding figure, the tallest bar is for the island of Manhattan in New
    York City, which houses a whopping 28,654 people per square kilometer. But this
    is nothing compared to Manila, which has the world’s highest population density
    at 46,178 people per square kilometer.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the Australian Population Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following code reads the Australian cities dataset into a pandas DataFrame
    and keeps only columns for the city name, its latitude and longitude, and its
    estimated population. Because there is such a huge range in population values,
    it also makes a new column by dividing the population value by 100\. This will
    make it easier to compare 3D bars between the US and Australia later.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/44e95c5b587a39776387689753d05fbd.png)'
  prefs: []
  type: TYPE_IMG
- en: Display of the Australian cities DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: Plotting the Australian Population Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To plot the Australian data, we just repeat the plotting code with arguments
    tailored to the dataset. An important one is changing the view state’s longitude
    and latitude!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4db86ae0f2be4bb2d9a9524e11fac053.png)'
  prefs: []
  type: TYPE_IMG
- en: Population map for 1,000+ Australian cities
  prefs: []
  type: TYPE_NORMAL
- en: Australia has been described as a collection of coastal city-states and you
    can see why. About 86% of the population lives in urban areas, with 72% in major
    cities, such as Melbourne, Sydney, and Perth. There’s a reason for this, of course.
    The interior is barren, and they don’t call it “The Red Center” for nothing!
  prefs: []
  type: TYPE_NORMAL
- en: Changing the Map Style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, pydeck plots using a dark background (specifically, Carto’s “Dark
    Matter” map). This is set using the `map_style` parameter of the `Deck()` class.
    To change the background to white, pass it `pdk.map_styles.LIGHT`. Other options
    are for satellite, roads, or the dark and light versions with no labels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of the US dataset plotted with a light background, the elevation
    set to the `popl_div_100` column, and the bar fill color set to black (using the
    RGB color code `[0, 0, 0]`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/03bf9e007d51a1f97acc63945f4a7694.png)'
  prefs: []
  type: TYPE_IMG
- en: The US cities population map with a light background and black bars
  prefs: []
  type: TYPE_NORMAL
- en: Comparing the Populations of Australia and the United States
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you repeat the previous code using the `df_au` DataFrame with a `longitude`
    of 138 and `latitude` of -26, you''ll produce a map of Australia that can be compared
    to the previous map of the US:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2f3219bc39728b3100b7840655825d1c.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparison of the populations of US and Australian cities at the same scale
  prefs: []
  type: TYPE_NORMAL
- en: Despite being similar in size to the continental United States, Australia is
    much less populated. Its two largest cities hold 5–6 million each and are comparable
    in population to American cities like Houston, Miami, and Atlanta.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Thematic* maps, such as 3D extrusions, help you highlight a specific theme
    tied to a physical space. All the relevant geospatial data is extracted and projected
    on the map, enabling your audience to quickly grasp the connection between the
    theme and the locations.'
  prefs: []
  type: TYPE_NORMAL
- en: The pydeck library makes it easy to create interesting 3D thematic visualizations
    with Python. It’s optimized for working with Jupyter Notebook, popular libraries
    like pandas, and large datasets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python has a large ecosystem of geospatial libraries in addition to pydeck.
    To see a summary of the most important ones — including guidance on how to pick
    the best one for your needs — check out my latest book, [*Python Tools for Scientists:
    An Introduction to Using Anaconda, JupyterLab, and Python’s Scientific Libraries*](https://a.co/d/1aFyztS).'
  prefs: []
  type: TYPE_NORMAL
- en: Citations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: US Cities Database (2023), [*https://simplemaps.com/data/us-cities*](https://simplemaps.com/data/us-cities).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Australia Cities Database | Kaggle](https://www.kaggle.com/datasets/maryamalizadeh/worldcities-australia)
    (2020), from [*https://simplemaps.com/data/world-cities*](https://simplemaps.com/data/world-cities)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Thanks!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for reading and please follow me for more *Quick Success Data Science*
    projects in the future.
  prefs: []
  type: TYPE_NORMAL
