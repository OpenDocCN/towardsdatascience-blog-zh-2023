["```py\nfrom sklearn.datasets import fetch_openml\n\nX, y = fetch_openml('mnist_784', return_X_y=True, as_frame=False)\n```", "```py\nprint(X.shape)\n```", "```py\n(70000, 784)\n```", "```py\nfig, axes = plt.subplots(5, 10, figsize=(10, 5))\ni = 0\nfor ax in axes.flat:\n    ax.imshow(X[i].reshape(28, 28), cmap='binary')\n    ax.axis('off')    \n    i += 1\n```", "```py\nnp.unique(y, return_counts=True)\n```", "```py\n(array(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], dtype=object),\n array([6903, 7877, 6990, 7141, 6824, 6313, 6876, 7293, 6825, 6958],\n       dtype=int64))\n```", "```py\nX = X / 255\n```", "```py\ntrain_size = 60000\nX_train, y_train = X[:train_size], y[:train_size]\nX_test, y_test = X[train_size:], y[train_size:]\n```", "```py\nfrom sklearn.neural_network import MLPClassifier\n\nmlp = MLPClassifier(hidden_layer_sizes=(300,), early_stopping=True, \n                    verbose=True)\n```", "```py\nmlp.fit(X_train, y_train)\n```", "```py\nIteration 1, loss = 0.35415292\nValidation score: 0.950167\nIteration 2, loss = 0.15504686\nValidation score: 0.964833\nIteration 3, loss = 0.10840875\nValidation score: 0.969833\nIteration 4, loss = 0.08041958\nValidation score: 0.972333\nIteration 5, loss = 0.06253450\nValidation score: 0.973167\n...\nIteration 31, loss = 0.00285821\nValidation score: 0.980500\nValidation score did not improve more than tol=0.000100 for 10 consecutive epochs. Stopping.\n```", "```py\nprint('Accuracy on training set:', mlp.score(X_train, y_train))\nprint('Accuracy on test set:', mlp.score(X_test, y_test))\n```", "```py\nAccuracy on training set: 0.998\nAccuracy on test set: 0.9795\n```", "```py\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n\ny_pred = mlp.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=mlp.classes_)\ndisp.plot(cmap='Blues')\n```", "```py\nprint(mlp.coefs_[0].shape)\n```", "```py\n(784, 300)\n```", "```py\nfig, axes = plt.subplots(4, 5)\n\nfor coef, ax in zip(mlp.coefs_[0].T, axes.flat):\n    im = ax.imshow(coef.reshape(28, 28), cmap='gray')\n    ax.axis('off')\n\nfig.colorbar(im, ax=axes.flat)\n```"]