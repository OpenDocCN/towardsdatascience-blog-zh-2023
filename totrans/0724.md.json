["```py\nfrom abc import ABC, abstractmethod\nimport time\n\n# Class Creation\nclass Prototype(ABC):\n    # Constructor:\n    def __init__(self):\n        # Mocking an expensive call\n        time.sleep(2)\n        # Base attributes\n        self.color = None\n        self.wheels = None\n        self.velocity = None\n\n    # Clone Method:\n    @abstractmethod\n    def clone(self):\n        pass \n```", "```py\nimport copy\nimport time\n\nclass RaceCar(Prototype):\n    def __init__(self, color, wheels, velocity, attack):\n        super().__init__()\n        # Mock expensive call\n        time.sleep(2)\n        self.color = color\n        self.wheels = wheels\n        self.velocity = velocity\n        # Subclass-specific Attribute\n        self.acceleration = True\n\n    # Overwriting Cloning Method:\n    def clone(self):\n        return copy.deepcopy(self) \n```", "```py\nimport time\n\nstart = time.time()\nprint('Starting to create a race car.')\nrace_car = RaceCar(\"red\", 4, 40)\nprint('Finished creating a race car', )\nend = time.time()\n\n#will take 2 seconds\nprint('Time to complete: ' , end-start)\n```", "```py\ncars = []\n\nstart = time.time()\nprint('Start instantiating clones', )\nfor i in range(5):\n    race_car = RaceCar(\"red\", 4, 40)\n    cars.append(race_car)    \nend = time.time()\nprint('Time to complete: ', end-start)\n```", "```py\n# now we create clones by using propotypes\ncars = []\n\nstart = time.time()\nprint('Instantiating first car', )\nrace_car = RaceCar(\"red\", 4, 40)\n\nfor i in range(5):\n    race_car = race_car.clone()\n    cars.appen(race_car)\nend = time.time()\nprint('Time to complete: ', end-start)\n```", "```py\nimport copy\nimport torch\nimport torch.nn as nn\n\nclass NeuralNetwork(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(NeuralNetwork, self).__init__()\n        self.layer1 = nn.Linear(input_size, hidden_size)\n        self.activation = nn.ReLU()\n        self.layer2 = nn.Linear(hidden_size, output_size)\n\n    def forward(self, x):\n        x = self.layer1(x)\n        x = self.activation(x)\n        x = self.layer2(x)\n        return x\n\n    def clone(self):\n        return copy.deepcopy(self)\n```", "```py\n# Base neural network configuration\nbase_model = NeuralNetwork(input_size=10, hidden_size=64, output_size=1)\n```", "```py\n # Clone the base model to create variations\nmodel_variation_1 = base_model.clone()\nmodel_variation_1.activation = nn.Tanh()\n\nmodel_variation_2 = base_model.clone()\nmodel_variation_2.hidden_size = 128\n\n# Display summaries of the models\nprint(\"Base Model Summary:\")\nprint(base_model)\n\nprint(\"\\nModel Variation 1 Summary:\")\nprint(model_variation_1)\n\nprint(\"\\nModel Variation 2 Summary:\")\nprint(model_variation_2)\n```"]