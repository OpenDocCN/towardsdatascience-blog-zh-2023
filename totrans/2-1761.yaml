- en: 'R Toolkit for People Analytics: Telling Your Headcount Story'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/r-toolkit-for-people-analytics-telling-your-headcount-story-d872402d4e8b](https://towardsdatascience.com/r-toolkit-for-people-analytics-telling-your-headcount-story-d872402d4e8b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Common challenges in People Analytics solved using R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://jeagleson.medium.com/?source=post_page-----d872402d4e8b--------------------------------)[![Jenna
    Eagleson](../Images/1f13d1104d9cb3d2c1d4376a6e124c55.png)](https://jeagleson.medium.com/?source=post_page-----d872402d4e8b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d872402d4e8b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d872402d4e8b--------------------------------)
    [Jenna Eagleson](https://jeagleson.medium.com/?source=post_page-----d872402d4e8b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d872402d4e8b--------------------------------)
    ·11 min read·Jul 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Working in People Analytics, you are often asked to tell the story of your company’s
    headcount and how the company evolved to what it is today. I often see this presented
    as a [waterfall chart](https://www.storytellingwithdata.com/blog/2020/11/16/what-is-a-waterfall),
    which can be great, but it gets murky when trying to share year-over-year changes
    and to a less technical audience.
  prefs: []
  type: TYPE_NORMAL
- en: To address this need, I created iterative plots highlighting each year with
    some additional context. The plots can then be added to a PowerPoint to go through
    each year at a time, or can be animated together into a gif. Let’s make it together!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8c8b00469215e4d4fbe68e1a89a64111.png)'
  prefs: []
  type: TYPE_IMG
- en: Headcount overtime told with a gif of area charts. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Challenge: Tell the story of how our headcount has changed year-over-year to
    what it is today.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Load necessary packages and data
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Calculate monthly headcount
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Add relevant context for each year
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Create a plot
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Set up to automatically create plot for each year
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Adjust theme and plot formatting
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Load necessary packages and data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this challenge, we will need the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '- tidyverse'
  prefs: []
  type: TYPE_NORMAL
- en: '- hrbrthemes (for making our plots prettier)'
  prefs: []
  type: TYPE_NORMAL
- en: To create our visual, we will need a file that contains a unique identifier
    (i.e., employee ID), hire date, and termination date. I am going to use mock data
    for this example (at the bottom I have included the code used to make the mock
    data if you want to follow along step-by-step).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As a side note, I generally assign a variable to my original read in of the
    data and then create a new variable that I use for future manipulations. This
    isn’t always necessary but makes things go faster when working with a large dataset
    so you don’t have to reload the data each time you need to change your code.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ae773e0f4bb4af8e3d30720d0186c3c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Glimpse of the raw input data. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: For the calculations to work correctly, we need to make sure that R knows that
    hire date and termination date are in fact dates. In general, working with dates
    in R can be a real pain but for the purpose of this challenge, we need to format
    the date columns as dates and that there are no NAs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In my inputs file, employees that are still active have a blank for termination
    date, because of course, they have not yet terminated. R is going to get all kinds
    of fussy if we have blanks in a date column so we are going to add a line of code
    that assign a date far in the future.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This last line is saying anywhere that there is an NA/blank in the termination
    date column, assign a date far in the future. In this case, December 31, 2100\.
    Let us all hope I'm not still working then.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Calculate monthly headcount
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hopefully this step looks simple, but I had a doozy of a time figuring it out
    so please be patient with yourself.
  prefs: []
  type: TYPE_NORMAL
- en: First we are going to create a sequence that will have a date for each month,
    then we will set up a data frame to be a placeholder for our monthly headcounts,
    and finally we are going to use a sapply function to calculate headcount for each
    month. Here we go!
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a sequence for a date for each month (e.g., 1/1/2023, 1/2/2023, etc.):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This is saying start at the minimum hire date, go to the maximum hire date,
    and sequence by month. This leaves us with one value for each month in our data.
    Here is what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8d13d6ce08bc774b5546ddcd1d2b5c6a.png)'
  prefs: []
  type: TYPE_IMG
- en: Monthly sequence shown. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are going to use that sequence to create a starter date frame that we
    can then add headcount to.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Okay, now for the tricky part. We are going to calculate the count of active
    employees on each date in our headcount_data data frame. So how many employees
    are active on 1/1/2018, 2/2/2018, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say we are wanting to calculate for 1/1/2018\. We need to find the number
    of employees who have a hire date less than or equal to 1/1/2018 and a termination
    date greater than 1/1/2018\. In other words, the number of employees that have
    already been hired and have not yet terminated.
  prefs: []
  type: TYPE_NORMAL
- en: Then we just use sapply to do that for each date in headcount_data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Still with me? If you’ve gotten everything working to this point, give yourself
    a big pat on the back! If you’re running into an issue, also give yourself a big
    pat on the back for making it this far and go to the [full code here](https://github.com/jeagleso/headcount_story/blob/main/example.R)
    to see if you can spot any inconsistencies with your code.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Add relevant context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is where the storytelling part comes into things. Depending on your experience
    with your familiarity with the organization, you might need to interview some
    subject matter experts or highly tenured employees. Essentially you are wanting
    to add important context that helps explain any increases or decreases in your
    headcount.
  prefs: []
  type: TYPE_NORMAL
- en: I want to add context for each year (you could also do monthly) so I am going
    to add a year column to headcount_data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This adds a column with the year for each date:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d3b7d11afbbde81ab2768cce57627b79.png)'
  prefs: []
  type: TYPE_IMG
- en: Added a year column for each date. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are going to add context for each year. Let’s say for 2020 we want to
    add the context “COVID-19” and want that to be shown for each month in 2020.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we are going to use case_when to add a column “context” based on
    year.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the above, we are saying that for each row where the year is 2018, we want
    the context column to be “Context for 2018.” You can add context for each year
    of interest, and then in the TRUE clause, you can specify what you want the context
    to be for any of the years not specified above.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, your headcount_data should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/70ae27125715d6f3ec7cb496365903e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Data set with context column added. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Now for the fun part! We get to start plotting.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Create plot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For starters, we are going to create a basic area chart with all of our data
    using ggplot. We will have Date on our x-axis and Active.Employees on our y-axis
    so we can see our headcount overtime.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'That will give you this basic plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b049c37ea2eeacb1f6cdf344af5d2271.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic area chart of full data set. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we start the process of some basic zhushing before moving onto some more
    advanced zhushing:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Add annotations
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Add title and subtitle
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be adding annotations with the ending headcount and year (this will
    become more relevant when we make a plot for each year). Let’s start by assigning
    them to variables to make it easier to update for each year:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are going to add those to our basic plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give us our basic plot with some additional context:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ea0a3fef4ace5c2221981907cb15bc28.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic plot with titles and annotations. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have created our basic plot, we want to automatically create an
    additive plot for each year. So there will be a plot 2018 to the end of 2018,
    2018 to the end of 2019, 2018 to the end of 2020, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Automatically create a plot for each year
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to use a for loop to create a plot for each year in our data set.
  prefs: []
  type: TYPE_NORMAL
- en: Basically, we are going to get each unique year in our dataset in a vector called
    “years.” Then for each year in “years” we are going to create a subset of our
    data and then a plot of that subset. That probably sounds confusing but looking
    at the code will probably make more sense.
  prefs: []
  type: TYPE_NORMAL
- en: 'First some set-up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now for the loop! It might look overwhelming, but just take it one step at
    a time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now have an a plot saved for each year in your working directory
    called “example_plot_year.” I like having a separate plot for each year so I can
    put each one in a slide and pause as folks have questions. Alternatively, you
    can [animate](https://gganimate.com/) the plots together and create a gif or use
    a screen recorder like [ScreenToGif](https://www.screentogif.com/) and get something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/692f3b0bda2f5d8b5945f09d07de398f.png)'
  prefs: []
  type: TYPE_IMG
- en: Animated gif of plots together using ScreenToGif. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: We did it!!!! All that is left is to add some styling to make the plot more
    true to your brand and add a rectangle to highlight the most recent year.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Adjust theme and plot formatting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing that I want to do is add a rectangle that highlights the most
    recent year. This will help the viewer know where to focus and will update in
    each plot so we can look at one year at a time, within the larger context.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will do this by adding another annotate layer “rect” that will look something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This is another aspect that took me a while to get it to the way I wanted but
    the keys here are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**X-axis**: I want the rectangle to start at the first (aka floor) date within
    the given year (aka max year in our subset of data) and to end at the last (aka
    ceiling) date within the given year (aka max year in our subset of data). So for
    the plot for 2019, we want the rectangle to start at 1/1/2019 and end at 12/1/2019.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Y-axis**: I want the rectangle to start at the y-axis and to end above the
    final headcount for that year so it is easier to read without being crowded. Looking
    at 2019 again, I want the rectangle to start right at the y-axis and to end above
    (+300) from the final headcount of 240.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**Styling**: Final, I’ll make the box be gray and change the alpha to 0.1 so
    it is fairly transparent and you can see the area chart underneath:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**Limiting the axes**: To help make the transitions smoother, I’m going to
    put limits on the x and y-axes so each plot is scaled the same.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Wahoo! We are so close, now I’m going to make some changes to the theme and
    then pour myself a glass of wine. Now is the time to put your own spin on things,
    mine ended up looking something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8c8b00469215e4d4fbe68e1a89a64111.png)'
  prefs: []
  type: TYPE_IMG
- en: The final product! Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code for my final for loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: ALLLLLL DOOOOONNNNEEEE!
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have a dynamic view of how our headcount has changed overtime with additional
    context in our subtitle. Some ideas for future iterations: making the plots with
    gganimate, adding a % change to each year’s headcount, changing the color of the
    graph if headcount has increased or decreased, adding a projection of growth trend
    line, the possibilities are endless!'
  prefs: []
  type: TYPE_NORMAL
- en: Did you try making one? If so, I would love to see what you came up with!
  prefs: []
  type: TYPE_NORMAL
- en: '[Full code on Github, here.](https://github.com/jeagleso/headcount_story/blob/main/example.R)'
  prefs: []
  type: TYPE_NORMAL
- en: Want more general People Analytics resources?
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://jeagleson.medium.com/12-free-resources-to-get-started-in-people-analytics-53ff169dccb6?source=post_page-----d872402d4e8b--------------------------------)
    [## 12+ Free Resources to Get Started in People Analytics'
  prefs: []
  type: TYPE_NORMAL
- en: The free resources I recommend to those who are wanting to start a career in
    People Analytics.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: jeagleson.medium.com](https://jeagleson.medium.com/12-free-resources-to-get-started-in-people-analytics-53ff169dccb6?source=post_page-----d872402d4e8b--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: If you want more resources like this and access to all the great content across
    this site, you can use my link to sign up for $5 a month (I’ll get a small commission
    at no additional cost to you).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://jeagleson.medium.com/membership?source=post_page-----d872402d4e8b--------------------------------)
    [## Join Medium with my referral link - Jenna Eagleson'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Jenna Eagleson (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: jeagleson.medium.com](https://jeagleson.medium.com/membership?source=post_page-----d872402d4e8b--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '[**Jenna Eagleson**](https://medium.com/@jeagleson)'
  prefs: []
  type: TYPE_NORMAL
- en: My background is in Industrial-Organizational Psychology and I have found my
    home in People Analytics. Data viz is what makes my work come to life. I have
    fun learning and developing with Power BI, R, Tableau, and other tools I come
    across. I would love to hear more about your journey! Reach me on [Linkedin](https://www.linkedin.com/in/jenna-eagleson/)
    or [Twitter](https://twitter.com/JennaEagleson).
  prefs: []
  type: TYPE_NORMAL
