["```py\n.\n├── data/\n│   ├── raw\n│   ├── intermediate\n│   └── final\n├── notebooks/\n│   ├── pre_processing.ipynb\n│   └── post_processing.ipynb\n└── src/\n    ├── __init__.py\n    ├── process_data.py\n    └── train_model.py\n```", "```py\ndef add_log_transform_columns(data, columns):\n    num_columns = data.shape[1]\n    for column in columns:\n        transformed_column = pd.Series(np.log(1.01 + data[column])).values\n        data = data.assign(new_column=transformed_column)\n        data.columns.values[num_columns] = column + '_log'\n        num_columns += 1\n    return data\n```", "```py\nall_features.filter(regex=\"YrSold\").dtypes\n\"\"\"\nYrSold_2006    int64\nYrSold_2007    int64\nYrSold_2008    int64\nYrSold_2009    int64\nYrSold_2010    int64\n\"\"\"\n```", "```py\nimport pandas as pd\n\ndef percent_missing(df):\n    columns = list(df)\n    dict_x = {}\n    for i in range(0, len(columns)):\n        dict_x.update({columns[i]: round(df_copy[columns[i]].isnull().mean() * 100, 2)})\n    return missing_percentages\n```", "```py\ndef is_positive(column):\n  return 1 if column > 0 else 0\n\nall_features['haspool'] = all_features['PoolArea'].apply(is_positive)\nall_features['has2ndfloor'] = all_features['2ndFlrSF'].apply(is_positive)\nall_features['hasgarage'] = all_features['GarageArea'].apply(is_positive)\nall_features['hasbsmt'] = all_features['TotalBsmtSF'].apply(is_positive)\nall_features['hasfireplace'] = all_features['Fireplaces'].apply(is_positive)\n```", "```py\nmodel = LinearRegression()\n\nrmse_scores = cv_rsme(model)\n```", "```py\nTraceback (most recent call last):\n  File \"/Users/khuyentran/software-engineering-for-data-scientists/variables/global_variables/main.py\", line 20, in <module>\n    scores = cv_rsme(model)\n             ^^^^^^^^^^^^^^\n  File \"/Users/khuyentran/software-engineering-for-data-scientists/variables/global_variables/main.py\", line 13, in cv_rsme\n    return np.sqrt(-cross_val_score(model, X, train_labels, scoring='neg_mean_squared_error', cv=kf))\n                                           ^\nNameError: name 'X' is not defined\n```", "```py\ndef cv_rmse(model, X, train_labels, kf):\n    rmse = np.sqrt(-cross_val_score(model, X, train_labels, scoring=\"neg_mean_squared_error\", cv=kf))\n    return rmse\n\nmodel = LinearRegression()\nrmse_scores = cv_rmse(model, X=..., train_labels=..., kf=...)\nprint((rmse_scores.mean(), rmse_scores.std()))\n# (1.092857142857143, 0.5118992247762547)\n```", "```py\nimport pandas as pd\n\ndata = {\n    'WoodDeckSF': [150, 0, 80, 120, 200],\n    'OpenPorchSF': [30, 40, 0, 20, 60],\n    'EnclosedPorch': [0, 20, 10, 0, 30],\n    '3SsnPorch': [0, 0, 0, 15, 0],\n    'ScreenPorch': [0, 0, 25, 0, 40]\n}\n\nall_features = pd.DataFrame(data)\n\nall_features['HasWoodDeck'] = (all_features['WoodDeckSF'] == 0) * 1\nall_features['HasOpenPorch'] = (all_features['OpenPorchSF'] == 0) * 1\nall_features['HasEnclosedPorch'] = (all_features['EnclosedPorch'] == 0) * 1\nall_features['Has3SsnPorch'] = (all_features['3SsnPorch'] == 0) * 1\nall_features['HasScreenPorch'] = (all_features['ScreenPorch'] == 0) * 1\nall_features.iloc[:, -5:]\n\n# The results are wrong\n\"\"\"\n   HasWoodDeck  HasOpenPorch  HasEnclosedPorch  Has3SsnPorch  HasScreenPorch\n0            0             0                 1             1               1\n1            1             0                 0             1               1\n2            0             1                 0             1               0\n3            0             0                 1             0               1\n4            0             0                 0             1               0\n\"\"\"\n```", "```py\nimport pandas as pd\nfrom pandas.testing import assert_series_equal\n\ndef create_booleans(feature):\n    return (feature == 0) * 1\n\ndef test_create_booleans():\n    feature = pd.Series([4, 2, 0, 1])\n    expected = pd.Series([1, 1, 0, 1])\n    actual = create_booleans(feature)\n    assert_series_equal(expected, actual)\n```", "```py\n============================ FAILURES ============================\n______________________ test_create_booleans ______________________\n    def test_create_booleans():\n        feature = pd.Series([4, 2, 0, 1])\n        expected = pd.Series([1, 1, 0, 1])\n        actual = create_booleans(feature)\n>       assert_series_equal(expected, actual)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nE   AssertionError: Series are different\nE   \nE   Series values are different (100.0 %)\nE   [index]: [0, 1, 2, 3]\nE   [left]:  [1, 1, 0, 1]\nE   [right]: [0, 0, 1, 0]\nE   At positional index 0, first diff: 1 != 0\n```", "```py\nfeatures = pd.DataFrame(\n {\n  \"MSZoning\": [1, np.nan, 2, 3, 4, 5, 6, np.nan],\n    \"MSSubClass\": [\"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\"],\n  }\n)\n\nfeatures['MSZoning'] = features.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))\nlist(features[\"MSZoning\"])\n# [1.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 4.0]\n```", "```py\nfeatures = pd.DataFrame(\n    {\n        \"MSZoning\": [1, np.nan, 2, 3, 4, 5, 6, np.nan],\n        \"MSSubClass\": [\"a\", \"a\", np.nan, \"a\", np.nan, \"b\", \"b\", \"b\"],\n    }\n)\n\nfeatures['MSZoning'] = features.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))\nlist(features[\"MSZoning\"])\n# [1.0, 1.0, nan, 3.0, nan, 5.0, 6.0, 5.0]\n```", "```py\n def fill_missing_values_with_mode_in_a_group(\n    df: pd.DataFrame, group_column: str, target_column: str\n) -> pd.DataFrame:\n    df[target_column] = df.groupby(group_column)[target_column].transform(\n        lambda x: x.fillna(x.mode()[0])\n    )\n    return df\n\ndef test_fill_missing_values_with_mode_in_a_group():\n    data = pd.DataFrame(\n        {\n            \"col1\": [1, np.nan, 2, 3, 4, 5, 6, np.nan],\n            \"col2\": [\"a\", \"a\", np.nan, \"a\", np.nan, \"b\", \"b\", \"b\"],\n        }\n    )\n    imputed_data = fill_missing_values_with_mode_in_a_group(\n    df=data, \n    group_column=\"col2\", \n    target_column=\"col1\",\n    )\n    assert imputed_data['col1'].isnull().sum() == 0, \"There are missing values in the column.\"AssertionError: There are missing values in the column.\nassert 2 == 0\n```", "```py\nAssertionError: There are missing values in the column.\nassert 2 == 0\n```", "```py\n def fill_missing_values_with_mode_in_a_group(\n    df: pd.DataFrame, group_column: str, target_column: str\n) -> pd.DataFrame:\n  if df[group_column].isna().any():\n    raise ValueError(\n          f\"The {group_column} used for grouping cannot contain null values\"\n    )\n    df[target_column] = df.groupby(group_column)[target_column].transform(\n        lambda x: x.fillna(x.mode()[0])\n    )\n    return df\n\ndef test_fill_missing_values_with_mode_in_a_group():\n  with pytest.raises(ValueError):\n        data = pd.DataFrame(\n            {\n                \"col1\": [1, np.nan, 2, 3, 4, 5, 6, np.nan],\n                \"col2\": [\"a\", \"a\", np.nan, \"a\", np.nan, \"b\", \"b\", \"b\"],\n            }\n        )\n        imputed_data = fill_missing_values_with_mode_in_a_group(\n      df=data, \n      group_column=\"col2\", \n      target_column=\"col1\",\n      )\n```"]