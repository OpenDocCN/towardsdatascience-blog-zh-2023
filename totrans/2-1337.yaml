- en: Introducing Python’s Magic Methods
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Python 的魔法方法
- en: 原文：[https://towardsdatascience.com/introducing-pythons-magic-methods-f443ed913703](https://towardsdatascience.com/introducing-pythons-magic-methods-f443ed913703)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/introducing-pythons-magic-methods-f443ed913703](https://towardsdatascience.com/introducing-pythons-magic-methods-f443ed913703)
- en: PYTHON | PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON | PROGRAMMING
- en: A hands-on guide to exploiting the power of dunder functions for better programming
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一份关于利用 dunder 函数的力量来提升编程水平的实用指南
- en: '[](https://david-farrugia.medium.com/?source=post_page-----f443ed913703--------------------------------)[![David
    Farrugia](../Images/082ed61e24c7c26a4ae1c77343a87824.png)](https://david-farrugia.medium.com/?source=post_page-----f443ed913703--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f443ed913703--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f443ed913703--------------------------------)
    [David Farrugia](https://david-farrugia.medium.com/?source=post_page-----f443ed913703--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://david-farrugia.medium.com/?source=post_page-----f443ed913703--------------------------------)[![David
    Farrugia](../Images/082ed61e24c7c26a4ae1c77343a87824.png)](https://david-farrugia.medium.com/?source=post_page-----f443ed913703--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f443ed913703--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f443ed913703--------------------------------)
    [David Farrugia](https://david-farrugia.medium.com/?source=post_page-----f443ed913703--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f443ed913703--------------------------------)
    ·7 min read·May 24, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f443ed913703--------------------------------)
    ·阅读时长 7 分钟·2023 年 5 月 24 日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/e1d07678085006aa654f8b8a1494a25c.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e1d07678085006aa654f8b8a1494a25c.png)'
- en: Photo by [Matt Palmer](https://unsplash.com/@mattpalmer?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Matt Palmer](https://unsplash.com/@mattpalmer?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Python is an awesome programming language and as found by [GitHub](https://octoverse.github.com/2022/top-programming-languages),
    it’s also the second most popular language in 2022\. The most attractive benefits
    of Python is its strong community. It seems that Python has a package for any
    use-case that you might have.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种很棒的编程语言，[GitHub](https://octoverse.github.com/2022/top-programming-languages)发现，它在
    2022 年也是第二大热门语言。Python 最吸引人的优点是其强大的社区。似乎 Python 为你可能遇到的任何使用场景都有一个包。
- en: Python has a bunch of cool features that are not common knowledge. If you’re
    interested to know more, feel free to go through my previous article on the subject.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Python 还有很多酷炫的特性，这些特性并不是常见的知识。如果你有兴趣了解更多，请随时查看我之前的相关文章。
- en: '[](/5-awesome-python-hidden-features-a0172e0bd98e?source=post_page-----f443ed913703--------------------------------)
    [## 5 Awesome Python Hidden Features — Part 1'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/5-awesome-python-hidden-features-a0172e0bd98e?source=post_page-----f443ed913703--------------------------------)
    [## 5 个精彩的 Python 隐藏特性 — 第 1 部分'
- en: Take your coding skills to the next level with these cool hidden Python features
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过这些酷炫的隐藏 Python 特性，将你的编码技能提升到新水平
- en: towardsdatascience.com](/5-awesome-python-hidden-features-a0172e0bd98e?source=post_page-----f443ed913703--------------------------------)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/5-awesome-python-hidden-features-a0172e0bd98e?source=post_page-----f443ed913703--------------------------------)
- en: In the vast and dynamic world of Python programming, there exists a unique set
    of functions that often go unnoticed by beginners, yet they provide a significant
    importance in the language’s ecosystem. These are the magic methods (also known
    as dunder functions).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在广阔而动态的 Python 编程世界中，存在一组独特的函数，这些函数通常被初学者忽视，但它们在语言的生态系统中具有重要意义。这些就是魔法方法（也称为
    dunder 函数）。
- en: Magic methods are a set of predefined methods in Python that provide special
    syntactic features. They are easily recognisable by their double underscores at
    the beginning and end, such as `__init__`, `__call__`, `__len__`, etc.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 魔法方法是一组在 Python 中预定义的方法，提供了特殊的语法特性。它们通过其前后有双下划线来轻松识别，例如 `__init__`、`__call__`、`__len__`
    等等。
- en: Magic methods serve a crucial role in defining how objects of a class behave
    with respect to various Python operations. Essentially, they allow custom objects
    to behave similar to built-in Python types. The direct benefit here is enhancing
    Python’s consistency and intuitiveness.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 魔法方法在定义类的对象如何处理各种 Python 操作方面发挥了关键作用。实质上，它们允许自定义对象表现得类似于内置的 Python 类型。直接的好处是增强了
    Python 的一致性和直观性。
- en: In this article, we will focus on and discuss the magic behind the powerful
    dunder function. We’ll explore their purpose and discuss their usage.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将专注于并讨论强大的Dunder函数背后的魔法。我们将探讨它们的目的并讨论它们的使用。
- en: Whether you’re a Python novice or a seasoned programmer, this guide aims to
    provide a comprehensive understanding of Dunder functions, making your Python
    coding experience more efficient and enjoyable.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是Python新手还是经验丰富的程序员，本指南旨在提供对Dunder函数的全面理解，使你的Python编程体验更加高效和愉快。
- en: Remember, the magic of Python lies not just in its simplicity and versatility,
    but also in its powerful features like Dunder functions. So, let’s unravel the
    magic together!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，Python的魔力不仅在于它的简单性和多样性，还在于像Dunder函数这样的强大功能。所以，让我们一起揭开魔法的面纱吧！
- en: The __init__
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`__init__`'
- en: Perhaps the most basic dunder function of them all is the `__init__`. This is
    the magic method that Python automatically calls whenever we create (or as the
    name implies, initialise) a new object.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 也许所有Dunder函数中最基本的是`__init__`。这是Python在我们创建（或如名称所示，初始化）一个新对象时自动调用的魔法方法。
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We create a class called `Pizza`. We set our `__init__` function to take in
    the size and toppings parameters that we specify at initialisation and set them
    as properties to our custom object.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个名为`Pizza`的类。我们将`__init__`函数设置为接受初始化时指定的大小和配料参数，并将它们设置为自定义对象的属性。
- en: 'Here, `self` is used to represent the instance of the class. So when we say
    `self.size = size`, we''re saying: "Hey, this pizza object has an attribute size,
    and I want it to be whatever size I provided when I created the object."'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`self`用于表示类的实例。所以当我们说`self.size = size`时，我们是在说：“嘿，这个pizza对象有一个属性size，我想它是我在创建对象时提供的大小。”
- en: The __str__ and __repr__
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`__str__`和`__repr__`'
- en: __str__
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`__str__`'
- en: 'This is Python’s magic method that allows us to define a desription for our
    custom object. It’s essentially answering the question:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Python的魔法方法，允许我们为自定义对象定义描述。它本质上是在回答以下问题：
- en: '"How would you describe this object to a friend over coffee?"'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “你会如何向朋友描述这个对象？”
- en: When you print an object or convert it to a string using `str()`, Python checks
    to see if you've defined a `__str__` method for the class of that object.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用`str()`打印对象或将其转换为字符串时，Python会检查你是否为该对象的类定义了`__str__`方法。
- en: If you have, it uses that method to convert the object to a string.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有，它会使用那个方法将对象转换为字符串。
- en: 'We can extend our Pizza example to include a __str__ function as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以扩展我们的Pizza示例，加入一个`__str__`函数，如下所示：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`__repr__`'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`__repr__`'
- en: The `__str__` function is more of an informal way of describing the properties
    of an object. On the other hand, `__repr__` is used to provide a more formal,
    detailed, and unambiguous description of the custom object.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`__str__`函数更像是描述对象属性的非正式方式。另一方面，`__repr__`用于提供一个更正式、详细和明确的自定义对象描述。'
- en: If you call `repr()` on an object, or just type the object's name in the console,
    Python will look for a `__repr__` method.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在对象上调用`repr()`，或者在控制台中输入对象的名称，Python将查找`__repr__`方法。
- en: If `__str__` isn't defined, Python will use `__repr__` as a backup when trying
    to print the object or convert it to a string. So it's often a good idea to at
    least define `__repr__`, even if you don't define `__str__`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`__str__`没有定义，Python会使用`__repr__`作为备份来打印对象或将其转换为字符串。因此，至少定义`__repr__`通常是一个好主意，即使你不定义`__str__`。
- en: 'Here’s how we could define `__repr__` for our pizza example:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们可以为我们的pizza示例定义`__repr__`的方法：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You see, `__repr__` gives you a string that you could run as a Python command
    to recreate the pizza object, while `__str__` gives you a more human-friendly
    description. Hope that helps you chew on these dunder methods a bit better!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你看，`__repr__`会给你一个可以作为Python命令运行的字符串，以重建pizza对象，而`__str__`则提供了一个更易于理解的描述。希望这有助于你更好地理解这些魔法方法！
- en: The __add__
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`__add__`'
- en: In Python, we all know that you can add numbers together using the `+` operator,
    like `3 + 5`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，我们都知道你可以使用`+`运算符将数字相加，例如`3 + 5`。
- en: But if we want to add instances of some custom object? The `__add__` dunder
    function allows us to do just that. It gives us the ability to define the behaviour
    of the `+` operator on our custom objects.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果我们想添加一些自定义对象的实例呢？`__add__` Dunder函数允许我们做到这一点。它使我们能够定义`+`运算符在自定义对象上的行为。
- en: 'In the interest of consistency, suppost that we want to define `+` behaviour
    on our pizza example. Let’s say that whenever we add two or more pizzas together,
    it will automatically combine all of their toppings. Here’s how that might look:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持一致性，假设我们想要在我们的披萨示例中定义 `+` 行为。假设每当我们将两张或更多的披萨相加时，它将自动合并所有的配料。以下是它可能的实现方式：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Similarly to the `__add__` dunder, we also can define other arithmetic functions
    such as `__sub__` (for subtraction using the `—` operator) and `__mul__` (for
    multiplication using the `*` operator).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 `__add__` 双下划线方法，我们还可以定义其他算术函数，比如 `__sub__`（用于使用 `—` 操作符进行减法）和 `__mul__`（用于使用
    `*` 操作符进行乘法）。
- en: The __len__
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: __len__
- en: This dunder method allows us to define what the `len()` function should return
    for our custom objects.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个双下划线方法允许我们定义 `len()` 函数对于我们自定义对象应返回的内容。
- en: Python uses `len()` to get the length or size of a data structure like a list
    or a string.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Python 使用 `len()` 来获取数据结构的长度或大小，比如列表或字符串。
- en: 'In the context of our Pizza class, we could say the “length” of a pizza is
    the number of toppings it has. Here’s how we could implement that:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的披萨类的上下文中，我们可以说披萨的“长度”是它拥有的配料数量。以下是我们可以实现这一点的方法：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the `__len__` method, we just return the length of the `toppings` list. Now,
    `len(my_pizza)` will tell us how many toppings are on `my_pizza`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `__len__` 方法中，我们仅返回 `toppings` 列表的长度。现在，`len(my_pizza)` 将告诉我们 `my_pizza` 上有多少个配料。
- en: '**Note:**'
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: ''
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`__len__` should always return an integer, and it''s expected to be a non-negative
    value. Negative toppings would just be weird, wouldn''t they?'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`__len__` 应该始终返回一个整数，并且预期是一个非负值。负配料只是怪异，不是吗？'
- en: The __iter__
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: __iter__
- en: This dunder method allows your objects to be iterable — i.e., can be used in
    a for loop.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个双下划线方法允许你的对象是可迭代的——也就是说，可以在 `for` 循环中使用。
- en: To do this, we also need to define the `__next__` function, This is used to
    define the behaviour that should return the next value in the iteration. Additionally,
    it also should signal to the iterable on the event that there are no more items
    in the sequence. We typically achieve this by raising a `StopIteration` exception.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们还需要定义 `__next__` 函数。这个函数用于定义返回迭代中的下一个值的行为。此外，它还应该在序列中没有更多项目时向可迭代对象发出信号。我们通常通过引发
    `StopIteration` 异常来实现这一点。
- en: 'For our pizza example, let’s say we want to iterate over the toppings. We could
    make our Pizza class iterable by defining an `__iter__` method like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的披萨示例，假设我们想要迭代配料。我们可以通过定义 `__iter__` 方法使我们的披萨类可迭代，如下所示：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this case, the for loop calls `__iter__`, which initialises a counter (`self.n`)
    and returns the pizza object itself (`self`).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`for` 循环调用 `__iter__`，它初始化一个计数器（`self.n`）并返回披萨对象本身（`self`）。
- en: Then, the for loop calls `__next__` to get each topping in turn.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`for` 循环调用 `__next__` 来依次获取每个配料。
- en: When `__next__` has returned all the toppings, it raises a `StopIteration` exception,
    and the for loop now knows that there are no more toppings left and will therefore
    stop the iteration process.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `__next__` 返回了所有配料后，它会引发 `StopIteration` 异常，然后 `for` 循环现在知道没有更多的配料了，因此将停止迭代过程。
- en: Concluding Remarks
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In conclusion, it’s evident that magic methods are truly at the heart of the
    Python language.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，很明显，魔法方法确实是 Python 语言的核心。
- en: They form the foundation for many of Python’s built-in operations, giving us
    the developers the necessary freedom to personalise the behavior of our objects
    in a manner that aligns with the rest of the language’s usage.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 它们构成了许多 Python 内置操作的基础，为我们开发者提供了必要的自由度，以便以与语言其余部分的用法一致的方式个性化我们对象的行为。
- en: 'In this article, we disucssed how Dunder functions such as `__init__`, `__iter__`,
    and `__len__` can be exploited to meet our requirements. You can find a full list
    of all the dunder methods allowed by python here:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们讨论了如何利用双下划线函数，如 `__init__`、`__iter__` 和 `__len__`，来满足我们的需求。你可以在这里找到 Python
    允许的所有双下划线方法的完整列表：
- en: '[](https://mathspp.com/blog/pydonts/dunder-methods?source=post_page-----f443ed913703--------------------------------)
    [## mathspp - take your Python 🐍 to the next level 🚀'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mathspp.com/blog/pydonts/dunder-methods?source=post_page-----f443ed913703--------------------------------)
    [## mathspp - 将你的 Python 🐍 提升到下一个水平 🚀'
- en: This is an introduction to dunder methods in Python, to help you understand
    what they are and what they are for. (If…
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这是对 Python 中双下划线方法的介绍，帮助你理解它们是什么以及它们的作用。（如果…
- en: mathspp.com](https://mathspp.com/blog/pydonts/dunder-methods?source=post_page-----f443ed913703--------------------------------)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[mathspp.com](https://mathspp.com/blog/pydonts/dunder-methods?source=post_page-----f443ed913703--------------------------------)'
- en: '**Did you enjoy this post? For $5/month, you can become a member to unlock
    unlimited access to Medium. You will be directly supporting me and all your other
    favourite writers on Medium. So huge thanks for that!**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**你喜欢这篇文章吗？每月$5，你可以成为会员，解锁无限访问Medium的权限。你将直接支持我和你在Medium上喜爱的所有其他作家。非常感谢！**'
- en: '[](https://david-farrugia.medium.com/membership?source=post_page-----f443ed913703--------------------------------)
    [## Join Medium with my referral link - David Farrugia'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 通过我的推荐链接加入Medium - David Farrugia](https://david-farrugia.medium.com/membership?source=post_page-----f443ed913703--------------------------------)'
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取对我所有⚡高级⚡内容和Medium上无限制的访问权限。通过买一杯咖啡支持我的工作…
- en: david-farrugia.medium.com](https://david-farrugia.medium.com/membership?source=post_page-----f443ed913703--------------------------------)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[david-farrugia.medium.com](https://david-farrugia.medium.com/membership?source=post_page-----f443ed913703--------------------------------)'
- en: Want to Get in Touch?
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 想要联系我吗？
- en: I would love to hear your thoughts on the topic, or anything AI and Data.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常想听听你对这个话题或关于AI和数据的任何想法。
- en: Drop me an email at ***davidfarrugia53@gmail.com*** should you wish to get in
    touch.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望联系我，请发邮件至 ***davidfarrugia53@gmail.com***。
- en: '[Linkedin](https://www.linkedin.com/in/david-farrugia/)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[Linkedin](https://www.linkedin.com/in/david-farrugia/)'
