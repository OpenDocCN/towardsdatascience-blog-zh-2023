- en: Stop Hard Coding in a Data Science Project — Use Config Files Instead
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/stop-hard-coding-in-a-data-science-project-use-config-files-instead-479ac8ffc76f](https://towardsdatascience.com/stop-hard-coding-in-a-data-science-project-use-config-files-instead-479ac8ffc76f)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to efficiently interact with config files in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://khuyentran1476.medium.com/?source=post_page-----479ac8ffc76f--------------------------------)[![Khuyen
    Tran](../Images/98aa66025ad29b618e875c75f1c400a5.png)](https://khuyentran1476.medium.com/?source=post_page-----479ac8ffc76f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----479ac8ffc76f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----479ac8ffc76f--------------------------------)
    [Khuyen Tran](https://khuyentran1476.medium.com/?source=post_page-----479ac8ffc76f--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----479ac8ffc76f--------------------------------)
    ·6 min read·May 26, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d8f861a64c002d8fcc6f28868a2a7e65.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '*Originally published at* [*https://mathdatasimplified.com*](https://mathdatasimplified.com/2023/05/25/stop-hard-coding-in-a-data-science-project-use-configuration-files-instead/)
    *on May 26, 2023.*'
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In your data science project, certain values tend to change frequently, such
    as file names, selected features, train-test split ratio, and hyperparameters
    for your model.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8095b45a4fe0e495526e4a29a2bea6ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'It is okay to hard-code these values when writing ad-hoc code for hypothesis
    testing or demonstration purposes. However, as your code base and team expand,
    it becomes essential to avoid hard coding because it can give rise to various
    issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Maintainability**: If values are scattered throughout the codebase, updating
    them consistently becomes harder. This can lead to errors or inconsistencies when
    values must be updated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/427844077270ffd8dd2ac34f6550b160.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '**Reusability**: Hard coding values limits the reusability of code for different
    scenarios.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/209e15a5b347e25b91db629784d90867.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '**Security concerns**: Hardcoding sensitive information like passwords or API
    keys directly into the code can be a security risk. If the code is shared or exposed,
    it could lead to unauthorized access or data breaches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Testing and debugging**: Hardcoded values can make testing and debugging
    more challenging. If values are hard-wired into the code, it becomes difficult
    to simulate different scenarios or test edge cases effectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Solution — Configuration Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configuration files solve these problems by offering the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Separation of configuration from code**: A config file allows you to store
    parameters separately from the code, which improves code maintainability and readability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/c9991ee64b39f9a28901cb33abc563d7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '**Flexibility and modifiability**: With a config file, you can easily modify
    project configurations without modifying the code itself. This flexibility allows
    for quick experimentation, parameter tuning, and adapting the project to different
    scenarios or environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/b145f5c2dcad49879af0aa8b8da7f7f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '**Version control**: Storing the config file in version control allows you
    to track changes to the configuration over time. This helps maintain a historical
    record of the project’s configurations and facilitates collaboration among team
    members.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/8d676784b28c8530a239a2338e686682.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '**Deployment**: When deploying a data science project to a production environment,
    a config file enables easy customization of settings specific to the production
    environment without the need for code modifications. This separation of configuration
    from code simplifies the deployment process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Hydra
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are numerous Python libraries available for creating configuration files
    such as pyyaml, configparser, ConfigObj. However, [Hydra](https://hydra.cc/),
    an open-source Python library, stands out as my preferred configuration management
    tool because of its impressive set of features, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Convenient parameter access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Command-line configuration override
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Composition of configurations from multiple sources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execution of multiple jobs with different configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s dig deeper into each of these features.
  prefs: []
  type: TYPE_NORMAL
- en: 'Feel free to play and fork the source code of this article here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/khuyentran1401/hydra-demo?source=post_page-----479ac8ffc76f--------------------------------)
    [## GitHub - khuyentran1401/hydra-demo'
  prefs: []
  type: TYPE_NORMAL
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/khuyentran1401/hydra-demo?source=post_page-----479ac8ffc76f--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Convenient parameter access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose all configuration files are stored under the `conf` folder and all Python
    scripts are stored under the `src` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'And the `main.yaml` file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Accessing a configuration file within a Python script is as simple as applying
    a single decorator to your Python function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To access a specific parameter from the configuration file, we can use the dot
    notation (.e.g., `config.process.cols_to_drop`), which is a cleaner and more intuitive
    way compared to using brackets (e.g., `config['process']['cols_to_drop']`).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/43626352d44f39a0e66ca2293d25e36a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: This straightforward approach allows you to effortlessly retrieve the desired
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line configuration override
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s say you are experimenting with different `test_size`. It is time-consuming
    to repeatedly open your configuration file and modify the `test_size` value.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/038d2f6da0be792732625ec2d9a30b83.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, Hydra makes it easy to directly overwrite configuration from the command
    line. This flexibility allows for quick adjustments and fine-tuning without modifying
    the underlying configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Composition of configurations from multiple sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine you want to experiment with various combinations of data processing
    methods and model hyperparameters. While you could manually edit the configuration
    file each time you run a new experiment, this approach can be time-consuming.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8d675b426a99701bef7dec3699ad5c77.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Hydra enables the composition of configurations from multiple sources with
    config groups. To create a config group for data processing, create a directory
    called `process` to hold a file for each processing method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/74d2af88f2a45074bd2e760c7d20f395.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: If you want to use the `process1.yaml` file by default, add it to Hydra's default
    list.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4cd99301d6e3ead442bda1add9e6cda2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the same procedures to create a config group for training hyperparameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/14963f59d7ac3908e28e452c78d55a89.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Set `train1` as the default config file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2ee302e645430c5fb0ba6034b6a50b46.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Now running the application will use the parameters in `process1.yaml` file
    and `model1.yaml` file by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This capability is particularly useful when different configuration files need
    to be combined seamlessly.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-run
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose you want to conduct experiments with multiple processing methods, applying
    each configuration one by one can be a time-consuming task.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Luckily, Hydra allows you to run the same application with different configurations
    simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This approach streamlines the process of running an application with various
    parameters, ultimately saving valuable time and effort.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You have just learned about the importance of using configuration
    files and how to create ones using Hydra. I hope this article will give you the
    knowledge needed to create your own configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: 'I love writing about data science concepts and playing with different data
    science tools. You can stay up-to-date with my latest posts by:'
  prefs: []
  type: TYPE_NORMAL
- en: Subscribing to my newsletter on [Data Science Simplified](https://mathdatasimplified.com/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect with me on [LinkedIn](https://www.linkedin.com/in/khuyen-tran-1401/)
    and [Twitter](https://twitter.com/KhuyenTran16).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
