- en: Exploratory Data Analysis in Google Sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/exploratory-data-analysis-in-google-sheets-5df4d0e4d2dd](https://towardsdatascience.com/exploratory-data-analysis-in-google-sheets-5df4d0e4d2dd)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Comparing Google Sheets and Pandas Approach
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://dmitryelj.medium.com/?source=post_page-----5df4d0e4d2dd--------------------------------)[![Dmitrii
    Eliuseev](../Images/7c48f0c016930ead59ddb785eaf3e0e6.png)](https://dmitryelj.medium.com/?source=post_page-----5df4d0e4d2dd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5df4d0e4d2dd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5df4d0e4d2dd--------------------------------)
    [Dmitrii Eliuseev](https://dmitryelj.medium.com/?source=post_page-----5df4d0e4d2dd--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5df4d0e4d2dd--------------------------------)
    ·8 min read·Jul 14, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/efcc38e54fb04154d229d5a79500bfca.png)'
  prefs: []
  type: TYPE_IMG
- en: Image generated by author
  prefs: []
  type: TYPE_NORMAL
- en: 'It is always nice to process the data using modern tools like Pandas or Jupyter.
    But let’s imagine the case when a colleague or friend asks to make a data analysis,
    but he or she is not a technical person, does not use Python or Jupyter, and does
    not have any account in Tableau, Power BI, or any other fancy (but, alas, not
    free) service. In this case, processing the data in Google Sheets can be a nice
    workaround because of several reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Google is used worldwide; at the time of writing this article, more than 1.8
    billion users have a Google Account. Practically almost everyone has a Google
    account nowadays, and document sharing will be extremely easy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google’s ecosystem is safe and secure. It supports two-factor authentication
    and modern security standards, and even private datasets can be shared between
    limited groups of people.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Last but not least, the solution is free and does not require any extra costs.
    And as a bonus, Google Sheets works in the browser, does not require installing
    any software, and can work on any platform like Windows, Linux, OSX, or even on
    a smartphone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this article, I will make a basic exploratory data analysis in Pandas, then
    we will repeat this process in Google Sheets and see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Data Source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make things more fun, let’s use a real dataset. We will make a tool to calculate
    the energy generated by solar panels. To do this, I will use the PVGIS (European
    Commission Photo Voltaic Geographical Information System) data, which can be accessed
    for free via [this URL](https://re.jrc.ec.europa.eu/pvg_tools/en/#MR) (CC BY 4.0
    Licence):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/686b4b21b1433f713c5b07ccc3185126.png)'
  prefs: []
  type: TYPE_IMG
- en: PVGIS Interface, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Using this page, we can download solar irradiation data, allowing us to calculate
    energy generation. As can be seen in the screenshot, we can select hourly data
    for different years and different locations. After downloading the data, let’s
    use it in Pandas.
  prefs: []
  type: TYPE_NORMAL
- en: EDA in Pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start with exploratory data analysis (EDA) in Pandas. It’s always easier
    to use a tool, we’re familiar with; it will also allow us to verify the results.
    First, let’s load the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The code is self-explanatory. The beginning of the CSV file has comments and
    empty lines, so I used “skiprows=8” to skip the unwanted data; this was the only
    “tuning” required to read the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/edc41d5aea523ddbc35a692905107c4f.png)'
  prefs: []
  type: TYPE_IMG
- en: Solar irradiation dataset, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'We have 8784 rows, representing the hourly collected data. According to the
    [documentation](https://joint-research-centre.ec.europa.eu/photovoltaic-geographical-information-system-pvgis/pvgis-tools/hourly-radiation_en),
    “G(i)” is the solar irradiance in Watts/m²; other parameters, like wind speed
    or temperature, are not needed for our task. The timestamp is not standard, let’s
    convert string values to date and time objects. I also need to convert “G(i)”
    values from *string* to *float*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are ready to do the calculations we want. The dataset contains the solar
    radiation in watts per square meter. The data was collected in 1-hour intervals,
    and we only need to divide values by 1000 to convert Watts to Kilowatts per hour
    (kWh). To get the final output in kWh, we also need to know the number of solar
    panels and the size and efficiency of each panel (this data can be found in the
    solar panel datasheet):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can do some data exploration. Let’s find the **solar generation per
    day**, for example, in summer, on the 1st of June. I will be using the Bokeh Python
    library to draw the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7460ba1ead7d1188e9369ebda231f90a.png)'
  prefs: []
  type: TYPE_IMG
- en: Solar panel generation per day in June, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also easy to get the **total generated amount**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Our solar panel generated 1.56 kWh per day in June. As a comparison, the generation
    from the same panel in December was much lower:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0ca7e6b115e3d8e0c8fb33baa76eacbe.png)'
  prefs: []
  type: TYPE_IMG
- en: Solar panel generation per day in December, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see the **generation per year** and calculate the total output. To do
    this, I will group the dataframe by month:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a2fceea9b308dbbadf9d58fc4da7724a.png)'
  prefs: []
  type: TYPE_IMG
- en: Solar panel generation grouped by month, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'And as a final step, let’s see the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/12424aaae3f6707d30d72ec8e322a603.png)'
  prefs: []
  type: TYPE_IMG
- en: Solar panel generation per year, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, there is a drastic difference between the winter and summer months.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let’s get the **total electricity generation** during the year:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Our 2.5 m² solar panel in total generated 335 kWh of electricity.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, let’s finish the Python coding and see how we can do the same
    in Google Sheets.
  prefs: []
  type: TYPE_NORMAL
- en: Google Sheets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In general, our data processing flow will be the same as it was in Pandas. We
    need to load the dataset, convert column values, filter, and group values to see
    the result. Actually, when we know what we *want to do* with data, we can think
    in a “cross-platform way”, and this makes processing much easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s load the dataset. I created a document in Google Sheets with two
    tabs, “Source” and “Calculation”, and imported the CSV into the “Source” tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e3e3312af9d21fcfe726ee06417e8b98.png)'
  prefs: []
  type: TYPE_IMG
- en: The dataset in Google Sheets, image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to group values by month. Let’s **extract month values** from the
    timestamp column. In Pandas, we did it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In Google Sheets, I added this formula in the G10 cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, G10 is the first cell, where results will be located, and A10:A8793 is
    our timestamp data. A “MID” function is extracting a month from a string (a “20200101:0011”
    is a non-standard timestamp, and using a substring is easier), and an “ArrayFormula”
    method is automatically applying this function to the whole table. After entering
    the formula, Google Sheets will automatically create a new column for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same way, let’s create a “kWh” column from “G(i)”. In Pandas, we did
    it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In Google Sheets, it works almost the same way. I added this formula to the
    H10 cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And as a last preprocessing step, let’s enter *“Month”* and “*kWh”* names as
    headers. A result should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/58a157d3c417292b166df3c8a1d14dfa.png)'
  prefs: []
  type: TYPE_IMG
- en: Added columns in Google Sheets, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a “month” column; now we can **group data by month**. What in Pandas
    is named “groupby”, in Google Sheets can be done using a “Pivot table”. Let’s
    create a new pivot table and enter “Source!A9:H8793” as a data source. Here “Source”
    is the name of the first tab, and A9:H8793 is our data. The table editor will
    automatically detect the column names, and we can select “Month” as a “Row” and
    “kWh” as a “Value”:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c082a8ec97b50bca1f5918748ef1d01f.png)'
  prefs: []
  type: TYPE_IMG
- en: kWh values, grouped by month, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is displayed in the screenshot. Actually, it is pretty close to
    what we did in Pandas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Our dataset is ready; let’s do the required calculations. In the “Calculation”
    tab, I will use the first three cells as “variables” for the number of solar panels
    (cell B1), each panel size (cell B2), and panel efficiency (cell B3). Then I can
    calculate the total generation by adding a formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '“Source!” is a link to our first tab with the data source, and K11–K22 are
    cells where the data grouped by month is located. Our new result will be placed
    in cells B7–B18, and we can also calculate the **total generation**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'It is easy to add extra labels and a chart; it does not require any formulas,
    and I will skip this part here. Our final generation data, grouped by month, should
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/92d783ac892121eb9c3aed882d50db56.png)'
  prefs: []
  type: TYPE_IMG
- en: Solar panel generation per year, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, the results must be the same as what we get in Pandas; otherwise,
    something is wrong. The Google Sheets UI is interactive; we can change the number
    of solar panels or the panel efficiency, and Google Sheets will automatically
    recalculate all results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our last data exploration step is to get **electricity generation for a specific
    date**. To do this, I will put the required date in the “A24” cell and use two
    cells for results. The first one will contain time, and the second one will contain
    energy values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, *SEARCH(A24, Source!A10:A8793)* is the filter applied to the source table;
    the first formula is getting the time of day, and the second one is calculating
    the energy in kWh. Optionally, we can add labels and a summary. The final page
    may look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/09fcaa0ca93a1f7ad5db67292e80de16.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this article, we imported a solar generation dataset in Google Sheets and
    were able to calculate and visualise different parameters, like solar panel generation
    per month or per specific day. This sheet is interactive and can be used by anyone
    without technical or programming skills. Last but not least, the solution has
    zero cost, and the document can be safely shared with anyone who has a Google
    account.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, there are many jokes in the community about “Data Science in Excel”,
    and I’m not encouraging anyone to use Google Sheets as a main production tool.
    But it can be a nice addition for simple scenarios where we need to share results
    with others or make a simple data processing UI, and as we can see, basic operations
    like making charts, grouping data, or extracting substrings work well.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading. If you enjoyed this story, feel free [to subscribe](https://medium.com/@dmitryelj/membership)
    to Medium, and you will get notifications when my new articles will be published,
    as well as full access to thousands of stories from other authors.
  prefs: []
  type: TYPE_NORMAL
