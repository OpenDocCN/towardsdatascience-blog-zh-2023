- en: 'Introducing the Multi-Chord Diagram: Visualizing Complex Set Relationships'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/introducing-the-multi-chord-diagram-visualizing-complex-set-relationships-c6fe6cc1cb8b](https://towardsdatascience.com/introducing-the-multi-chord-diagram-visualizing-complex-set-relationships-c6fe6cc1cb8b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn about Multi-Chord Diagrams and create your own with Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@nickgerend?source=post_page-----c6fe6cc1cb8b--------------------------------)[![Nick
    Gerend](../Images/716eb183008674ac46c6aee96093c4b3.png)](https://medium.com/@nickgerend?source=post_page-----c6fe6cc1cb8b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c6fe6cc1cb8b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c6fe6cc1cb8b--------------------------------)
    [Nick Gerend](https://medium.com/@nickgerend?source=post_page-----c6fe6cc1cb8b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c6fe6cc1cb8b--------------------------------)
    ·13 min read·Nov 17, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fc09e19aab12e51923c72ad2ed8f4f82.png)'
  prefs: []
  type: TYPE_IMG
- en: Multi-Chord Diagram by Nick Gerend
  prefs: []
  type: TYPE_NORMAL
- en: '**Background**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Predecessors**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the landscape of data visualization, the evolution of representing complex
    set relationships has been marked by significant milestones, notably with creation
    of the simple but effective Venn Diagram, the modern Chord Diagram, and the UpSet
    Plot.
  prefs: []
  type: TYPE_NORMAL
- en: Venn Diagram
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Venn Diagrams, conceived by John Venn in the 1880s¹, are a fundamental tool
    in set theory and logic, renowned for their simplicity and effectiveness in visually
    representing relationships between different sets. Consisting of overlapping circles,
    each circle in a Venn Diagram typically represents a set, with the overlap between
    circles indicating common elements shared by those sets.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/334e7bc84b8feb72698b491807e5ebd4.png)'
  prefs: []
  type: TYPE_IMG
- en: Venn Diagram
  prefs: []
  type: TYPE_NORMAL
- en: They are particularly useful in educational settings, business analysis, and
    logical reasoning, as they provide a clear and intuitive way to display intersections,
    differences, and unions of sets. Their ability to simplify complex relationships
    into easily understandable visuals makes them an invaluable tool for problem-solving,
    data analysis, and decision-making processes.
  prefs: []
  type: TYPE_NORMAL
- en: Chord Diagram
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The modern Chord Diagram became particularly notable in recent history following
    an article published in the New York Times in 2007 citing work by Martin Krzywinski²
    (a prime contributor to the visualization tool “Circos”³) and, today, is characterized
    by its circular layout with curved polygon chords connecting sets on the perimeter
    of a circle, with each chord illustrating the relationship between two sets or
    a standalone population within one set.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c820c2bfd5375f91781bfc04c8e03746.png)'
  prefs: []
  type: TYPE_IMG
- en: Chord Diagram
  prefs: []
  type: TYPE_NORMAL
- en: These diagrams are particularly effective in revealing the hidden patterns and
    connections within a dataset. The strength of the relationships are often represented
    by the thickness of the chords, and other elements (like color and shapes) can
    be included to show directionality, making Chord Diagrams not only visually striking
    but also highly informative.
  prefs: []
  type: TYPE_NORMAL
- en: '**UpSet Plot**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The UpSet Plot, introduced in 2014 by Lex, Gehlenborg, et al.⁴, emerged as a
    solution to visualize complex set intersections, overcoming some inherent shortcomings
    of Chord and Venn Diagrams, with the ability to visualize set relationships with
    more than two intersecting sets.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cfd51f80d9c584c85877c464a0a34236.png)'
  prefs: []
  type: TYPE_IMG
- en: UpSet Plot
  prefs: []
  type: TYPE_NORMAL
- en: It combines the simplicity of a matrix with the quantitative representation
    of bar charts, offering a direct view of complex set information that may fall
    outside the scope of Chord Diagrams which are limited to pairwise set relationships.
  prefs: []
  type: TYPE_NORMAL
- en: '**Room for Improvement**'
  prefs: []
  type: TYPE_NORMAL
- en: 'While all 3 methods are excellent at providing information in their own way,
    there are some obvious disadvantages with each approach:'
  prefs: []
  type: TYPE_NORMAL
- en: Venn Diagrams lack the ingredients to effectively represent complex relationships
    due to multiple overlapping areas becoming cluttered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chord Diagrams are confined to pairwise set relationships which substantially
    limit their application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UpSet Plot’s matrix layout doesn’t scale well with increasing set combinations,
    so it may be difficult to get immediate insight into some aspects of set complexity
    or even “the big picture”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-Chord Diagram**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Inspiration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To address the challenges mentioned above with Venn and Chord Diagrams, I came
    up with an algorithm in June 2021 to generalize the Chord Diagram to accommodate
    3 or more set interactions and called it the “Multi-Chord Diagram” (or multichord
    for short). As a byproduct of development, I also came up with the UpSet Plot
    independently as a way of testing this new approach before I knew it was already
    an established plot!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3da6139c8fcd48e54bcc735b025b0ed5.png)'
  prefs: []
  type: TYPE_IMG
- en: Venn Diagram > Chord Diagram > UpSet Plot > Multi-Chord Diagram
  prefs: []
  type: TYPE_NORMAL
- en: 'This new visualization offers the following functionality relative to its 3
    predecessors:'
  prefs: []
  type: TYPE_NORMAL
- en: Provides an accurate and pleasing visual layout for complex set relationships
    relative to the Venn Diagram that lacks fidelity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eliminates the pairwise limitation of the Chord Diagram while maintaining potential
    for creativity with directionality, spacing, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compliments the discrete information of the UpSet Plot by offering immediate
    visual insight into network complexity while not getting lost in matrix and bar
    chart encoding (and as I noted previously, they also pair well together!)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Multi-Chord Diagram not only broadens the application spectrum for Chord
    Diagrams but also provides a more nuanced understanding of complex networks which
    is a critical need in today’s data-driven world.
  prefs: []
  type: TYPE_NORMAL
- en: '**Math, Algorithm & Layout**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Starting with the mathematical ingredients, here are the fundamental items
    at work in the Multi-Chord Diagram construction:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cartesian Polar Coordinate Conversion (CPC): for calculating positioning in
    Cartesian space first, for simplicity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Chord Function (CF): produces a set of points along a path between two points
    on a circle, some common implementations include:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '- straight line (the original!)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- arc from the circle whose midpoint is the chord of contact to it'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Bezier curve (with 3 or more points)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- custom function (I created one for my initial python implementation )'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Rescale Function (RF): for rescaling the diagram to a unit square for convenience'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the Multi-Chord Diagram Algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin with set combinations and their magnitudes (or calculate them from raw
    data), for example: ({a}, 25.5), ({a, b}, 15), ({a, c}, 14.4), etc.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a layout order and buffer offsets for spacing out sets and nested set-combinations,
    and provide an optional overall radial percentage fill
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Layout a number line corresponding to the range of the data with points representing
    each set combination in the order specified, separated by the given offsets
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Propagate the extent of the number line backwards and forwards
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Collect chord endpoints by grouping those closest together from the 3 available
    number lines
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a number of points to use for drawing and proceed with calculating the
    point locations in each section, utilizing (CPC) to map out straight line sections
    and chord endpoints onto a circular layout, and leverage (CF) for the chord points
    inside the circle
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add outer set combination and set polygons using (CPC), and rescale using (RF)
    to a unit circle
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here’s a Cartesian layout using another visualization I call the Multi-Arc
    Diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/064502d41c964b981e8e81960671038c.png)'
  prefs: []
  type: TYPE_IMG
- en: Multi-Arc Diagram Illustrating a Cartesian Layout of a Multi-Chord
  prefs: []
  type: TYPE_NORMAL
- en: 'And, finally, the most simplistic version of the Multi-Chord Diagram layout
    is constructed with the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: Chords representing a standalone set population or connecting 2 or more sets,
    for however many set to set relationship combinations exist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A middle ring, split up into sections by unique set combinations within sets,
    representing “exclusive-to” set combination magnitudes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An outer ring, split up into sections by set, containing “inclusive-of” set-combinations
    within each as set (illustrating set magnitudes, minus buffer spacing from the
    middle ring)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/9b5735257179e938297858847cf690a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Multi-Chord Diagram
  prefs: []
  type: TYPE_NORMAL
- en: Python Implementation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I’ve made an initial implementation of the algorithm available in python via
    my [dataoutsider](https://pypi.org/project/dataoutsider/) package, available on
    PyPI. Here’s an example of usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1d390b57939b2b48e29540126eeae18d.png)'
  prefs: []
  type: TYPE_IMG
- en: Multi-Chord Diagram from the dataoutsider package via Matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the underlying output (df_mc):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/133f4213ce9edf3e293732518e554c36.png)'
  prefs: []
  type: TYPE_IMG
- en: output from the multi_chord_on_groups_alias function
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, I’ll demonstrate how to take this output and create an
    interactive visualization in Tableau Public to accommodate professionals in the
    business intelligence space.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tableau Public Implementation (including the UpSet Plot)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, I’ll present a tutorial for implementing my Multi-Chord Diagram
    in Tableau Public (v 2023.3.0) and interacting with different components.
  prefs: []
  type: TYPE_NORMAL
- en: Start by exporting the Multi-Chord Diagram data (created in the previous section),
    including data to build the UpSet Plot. I called the method for the UpSet Plot
    data ***multi_chord_venn*** as a nod to the Venn Diagram, and because I wasn’t
    aware that the UpSet Plot already existed at the time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s start with the ***multichord_diagram.csv***. Import the file into Tableau
    using the ***Text file*** option, navigate to ***Sheet 1***, and create these
    calculated columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '***[mc_map]***: MAKEPOINT([Y], [X])'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[mid_path]***: int({fixed [Group]: avg(if [Type] = ‘element’ then [Path]
    else null end)} * 3/2)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[mc_label]***: if [Type] = ‘element’ and [Path] = [mid_path] then MAKEPOINT([Y],
    [X]) else null end'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Start by dragging ***[mc_map]*** to ***Detail*** under ***Marks*** to generate
    the first map layer and adjust these options by right clicking in the map area
    and selecting ***Background Layer***s:'
  prefs: []
  type: TYPE_NORMAL
- en: Unselect all ***Background Map Layers*** (Base, Land Cover, etc.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now right click in the map area and select ***Map Options***, and in the panel
    unselect all of the options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Close out of ***Background Layers*** and continue with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag ***[Group]***, ***[Type]***, and ***[Value]*** to ***Detail*** under ***Marks***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag ***[Count]*** to ***Detail*** under ***Marks***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right click on what’s now ***SUM(Value)*** and select ***Dimension***, right
    click again and select ***Discrete***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeat the process for ***SUM(Count)***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right click again on ***Value*** and select ***Sort***, then select ***Descending***
    and drag ***Value*** to the top of the pills in ***Marks***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Under the ***Marks*** dropdown menu select ***Polygon*** (don’t worry if it
    looks strange at this point)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag ***[Path]*** to ***Path*** under ***Marks*** and repeat the process for
    converting it to ***Dimension***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Under ***Color*** select a black border color, adjust the transparency to 80%,
    and select ***Edit Colors*** to edit the color options as you like
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now the structure of the Multi-Chord Diagram should be in view. Let’s add some
    labeling:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag ***[mc_label]*** into the map area and a pop-up will appear: ***Add a
    Marks Layer*** - drop the pill into this to create a new map layer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag [Group] to ***Label*** under ***Marks*** in this new map layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Under the ***Marks*** dropdown menu select ***Circle***, click on ***Label***,
    and select these options: {Alignment: Horizontal-Center, Vertical-Middle}'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the menu still open, click on ***Text*** - highlight the text in the text
    box, change the font to size 12, and hit ***OK***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on ***Color***, select white and change the transparency to 80%
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, click ***Size*** and adjust the size to the second hash
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You’ll see a null warning in the lower right corner that you can right click
    on and select ***Hide Indicator***. At this point you should have something that
    looks like this (with your selected colors):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2bc4d5c89fdb667888315d73587c5786.png)'
  prefs: []
  type: TYPE_IMG
- en: You’ll notice that the sets are ordered by their magnitudes in clockwise descending,
    while the chords are ordered by clockwise ascending (the algorithm’s default setting).
    The drawing order can be adjusted as needed like we did with ***Value*** above.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s create the UpSet Plot. Start by importing the ***upset_plot.csv***
    file, by selecting the ***Data*** tab and clicking ***New Data Source***. Select
    text file and import the data. Create a new worksheet with the first plus sign
    on the bottom panel and ensure the new data source is selected at the upper right
    under ***Data***.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add these calculated columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '***[count]***: {fixed [Group]: sum(if [Group2] = ‘count’ then [Value2] else
    null end)}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[chord_magnitude]***: if not isnull([count]) then [Value] else null end'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[set_magnitude]***: {fixed [Group2]: max(if [Group] = [Group2] then [Value]
    else null end)}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Next drag ***[Group2]*** to the ***Filter*** and select only the sets (a,b,c,d,e).
    Add ***[Value2]*** to the filter and filter in only the value of 1\. Finally,
    add ***[count]*** to the filter and uncheck ***Include Nulls Values*** in the
    bottom right.
  prefs: []
  type: TYPE_NORMAL
- en: 'Proceed with these steps for setting up the matrix view:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag ***[chord_magnitude]*** to ***Columns***, select ***Minimum*** for its
    ***Measure*** in its dropdown menu, and select ***Discrete***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Double click next to this pill to add a new pill and type: ‘|’'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hit Enter to commit the text as a new pill and drag ***[Group]*** beside it
    followed by ***[count]***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Drag ***[Group2]*** to ***Rows***, select ***Sort*** from its dropdown menu,
    and sort by: {Nested, Descending, set_magnitude, Maximum}'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add a sort to ***[chord_magnitude]***: {Nested, Descending, chord_magnitude,
    Minimum}'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag ***[Value2]*** to the last position in ***Rows*** and set the ***Measure***
    to ***Maximum***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Under the ***Marks*** dropdown, select ***Circle***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note that I’ve noticed some bugs in this version when in the dual axis mode,
    so sorting may need to be adjusted as needed. Now we’ll do some formatting:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right click on the bottom axis, select ***Edit Axis***, and change the settings
    to: {Custom, Fixed start: 1, Fixed end: 1}'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Close out, right click again and uncheck ***Show Header***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the top of the view, right click on all of the discrete ***Columns*** headers
    (anywhere in the view-header for each), except for ***[count]***, and select ***Rotate
    Label*** (you can also adjust the size of each header container to accommodate
    the labels better)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hide the outside headers by right clicking on them and selecting ***Hide Field
    Labels for Columns/Rows***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we’ll create a dual axis to draw some lines between the points:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag ***[Value2]*** (again) over to the last position in ***Columns*** and set
    it to ***Maximum*** as before
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From its dropdown menu, select ***Dual Axis*** and right click on the new axis,
    select ***Synchronize Axis***, and then hide both axis by unchecking ***Show Header***
    on each
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the new view select ***Line*** from the ***Marks*** dropdown, double click
    inside of ***Marks*** to create a new pill and type: 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hit Enter and drag this pill to ***Path***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here’s a completed view with the view dropdown option at the top set to ***Entire
    View***:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3837b792d06e44e7dccda86bba8feff4.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let’s create similar views for the chords (exclusive-to populations) and
    sets (inclusive-of populations).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the chord view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6817c37bf60b71d448b24f4d321900b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here’s the set view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8317fbe6f2d9c14785ab78603345513f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now add them to a dashboard and setup an action under ***Actions*** in the ***Dashboard***
    top-menu. Click the ***Add Action*** dropdown and select ***Highlight***. Under
    ***Targeted Highlighting*** select ***Selected Fields*** and select the ***[Group]***
    and ***[Group2]*** fields. Finally select the ***Hover*** option under the ***Run
    action on*** menu on the right and now the entire dashboard with highlight off
    of hovering over sets and chords!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f6557edbc6d2e242d40c3cf5fe66e26a.png)'
  prefs: []
  type: TYPE_IMG
- en: Multi-Chord Diagram and UpSet Plot Interaction in Tableau Public
  prefs: []
  type: TYPE_NORMAL
- en: '**Conclusion**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, I’ve covered a brief history of visualizations applied to relationships
    between sets and what I call the “Multi-Chord Diagram”, a visual tool I developed
    as an enhancement to some existing methods for gaining quick insights into data
    with complex set relationships. I’ve had many occasions over recent years to take
    advantage of this tool for pet projects and a variety of business applications,
    and I hope it offers some new capabilities for others to enjoy!
  prefs: []
  type: TYPE_NORMAL
- en: I believe data visualizations can help address challenges in exploratory data
    analysis, modeling, and story telling, and that it’s a true intersection of art
    and science that can be enjoyed by all.
  prefs: []
  type: TYPE_NORMAL
- en: Let me know if you come across any fun or professional use cases, and thanks
    for reading!
  prefs: []
  type: TYPE_NORMAL
- en: '**References**'
  prefs: []
  type: TYPE_NORMAL
- en: '[1] John Venn, “[On the Diagrammatic and Mechanical Representation of Propositions
    and Reasonings](https://www.cis.upenn.edu/~bhusnur4/cit592_fall2014/venn%20diagrams.pdf)”
    (1880), Philosophical Magazine and Journal of Science'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] David Constantine, “[Close-ups of the Genome, Spieces by Spieces by Spieces](https://archive.nytimes.com/www.nytimes.com/imagepages/2007/01/22/science/20070123_SCI_ILLO.html)”
    (2007), New York Times'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] Martin Krzywinski, et al., “[Circos: An information aesthetic for comparative
    genomics](https://genome.cshlp.org/content/early/2009/06/15/gr.092759.109.abstract)”
    (2009), Genome Research'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] Lex A, Gehlenborg N, Strobelt H, Vuillemot R, Pfister H. “[UpSet: Visualization
    of Intersecting Sets](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4720993/)”
    (2014), IEEE Transactions on Visualization and Computer Graphics'
  prefs: []
  type: TYPE_NORMAL
