["```py\nimport argparse\nimport cv2\n\nap = argparse.ArgumentParser()\nap.add_argument(\"-i\", \"--image\", required = True, help = \"Path to image\")\nargs = vars(ap.parse_args())\n\n# load the image\nimage = cv2.imread(args[\"image\"])\n\n# reference to the image\nimage_clone = image\n\n# loop until the 'q' key is pressed\nwhile True:\n    # display the image \n    cv2.imshow(\"image\", image)\n\n    # wait for a keypress\n    key = cv2.waitKey(1)\n    if key == ord(\"c\"):\n        break\n\n# close all open windows\ncv2.destroyAllWindows()\n```", "```py\n$ python bounding.py -i Cabs.jpg\n```", "```py\nimport argparse\nimport cv2\n\n# to store the points for region of interest\nroi_pt = []\n\n# to indicate if the left mouse button is depressed\nis_button_down = False\n```", "```py\ndef draw_rectangle(event, x, y, flags, param):\n    global roi_pt, is_button_down\n\n    if event == cv2.EVENT_MOUSEMOVE and is_button_down:\n        global image_clone, image\n\n        # get the original image to paint the new rectangle\n        image = image_clone.copy()\n\n        # draw new rectangle\n        cv2.rectangle(image, roi_pt[0], (x,y), (0, 255, 0), 2)\n\n    if event == cv2.EVENT_LBUTTONDOWN:\n        # record the first point\n        roi_pt = [(x, y)]  \n        is_button_down = True\n\n    # if the left mouse button was released\n    elif event == cv2.EVENT_LBUTTONUP:        \n        roi_pt.append((x, y))     # append the end point\n\n        # ======================\n        # print the bounding box\n        # ======================\n        # in (x1,y1,x2,y2) format\n        print(roi_pt)                  \n\n        # in (x,y,w,h) format\n        bbox = (roi_pt[0][0],\n                roi_pt[0][1],\n                roi_pt[1][0] - roi_pt[0][0],\n                roi_pt[1][1] - roi_pt[0][1])\n        print(bbox)\n\n        # button has now been released\n        is_button_down = False\n\n        # draw the bounding box\n        cv2.rectangle(image, roi_pt[0], roi_pt[1], (0, 255, 0), 2)\n        cv2.imshow(\"image\", image)\n```", "```py\n...\n\n# reference to the image\nimage_clone = image\n\n# ======ADD the following======\n# setup the mouse click handler\ncv2.namedWindow(\"image\")\ncv2.setMouseCallback(\"image\", draw_rectangle)\n# =============================\n\n# loop until the 'q' key is pressed\nwhile True:\n    ...\n```", "```py\n[(430, 409), (764, 656)]\n(430, 409, 334, 247)\n```", "```py\nimport argparse\nimport cv2\n\n# to store the points for region of interest\nroi_pt = []\n\n# to indicate if the left mouse button is depressed\nis_button_down = False\n\ndef draw_rectangle(event, x, y, flags, param):\n    global roi_pt, is_button_down\n\n    if event == cv2.EVENT_MOUSEMOVE and is_button_down:\n        global image_clone, image\n\n        # get the original image to paint the new rectangle\n        image = image_clone.copy()\n\n        # draw new rectangle\n        cv2.rectangle(image, roi_pt[0], (x,y), (0, 255, 0), 2)\n\n    if event == cv2.EVENT_LBUTTONDOWN:\n        # record the first point\n        roi_pt = [(x, y)]  \n        is_button_down = True\n\n    # if the left mouse button was released\n    elif event == cv2.EVENT_LBUTTONUP:        \n        roi_pt.append((x, y))     # append the end point\n\n        # ======================\n        # print the bounding box\n        # ======================\n        # in (x1,y1,x2,y2) format\n        print(roi_pt)                  \n\n        # in (x,y,w,h) format\n        bbox = (roi_pt[0][0],\n                roi_pt[0][1],\n                roi_pt[1][0] - roi_pt[0][0],\n                roi_pt[1][1] - roi_pt[0][1])\n        print(bbox)\n\n        # button has now been released\n        is_button_down = False\n\n        # draw the bounding box\n        cv2.rectangle(image, roi_pt[0], roi_pt[1], (0, 255, 0), 2)\n        cv2.imshow(\"image\", image)\n\nap = argparse.ArgumentParser()\nap.add_argument(\"-i\", \"--image\", required = True, help = \"Path to image\")\nargs = vars(ap.parse_args())\n\n# load the image\nimage = cv2.imread(args[\"image\"])\n\n# reference to the image\nimage_clone = image\n\n# setup the mouse click handler\ncv2.namedWindow(\"image\")\ncv2.setMouseCallback(\"image\", draw_rectangle)\n\n# loop until the 'q' key is pressed\nwhile True:\n    # display the image \n    cv2.imshow(\"image\", image)\n\n    # wait for a keypress\n    key = cv2.waitKey(1)\n    if key == ord(\"c\"):\n        break\n\n# close all open windows\ncv2.destroyAllWindows()\n```"]