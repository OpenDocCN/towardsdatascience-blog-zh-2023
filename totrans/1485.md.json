["```py\nclass MyIterator:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n        self.current = start\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.current > self.end:\n            raise StopIteration\n        else:\n            self.current += 1\n            return self.current - 1\n```", "```py\nfor i in MyIterator(1,5):\n    print(i)\n```", "```py\ndef my_gen(start, end):\n    current = start\n    while current < end:\n        yield current\n        current += 1\n```", "```py\nfor i in my_gen(1,5):\n    print(i)\n```", "```py\ndef fibonacci(n):\n    a, b = 0, 1\n    for i in range(n):\n        yield a\n        a, b = b, a + b\n```", "```py\nfor i in fibonacci(5):\n    print(i)\n```", "```py\nfrom itertools import chain\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nlist3 = [7, 8, 9]\nfor i in chain(list1, list2, list3):\n    print(i)\n```", "```py\nsquared_numbers = (x**2 for x in range(10))\neven_squared_numbers = (x for x in squared_numbers if x%2==0)\n```", "```py\nfor i in even_squared_numbers:\n    print(i)\n```", "```py\nimport os\nfrom PIL import Image\n\ndef image_generator(data_dir, batch_size):\n    images = os.listdir(data_dir)\n    for i in range(0, len(images), batch_size):\n        batch = images[i:i+batch_size]\n        X, y = [], []\n        for img in batch:\n            image = Image.open(os.path.join(data_dir, img))\n            X.append(np.array(image))\n            label = img.split(\".\")[0]\n            y.append(int(label))\n        yield np.array(X), np.array(y)\n\ndata_dir\n```", "```py\nimport os\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# create a generator function that loads and preprocesses images\ndef image_generator(directory, target_size, batch_size):\n    data_gen = ImageDataGenerator(rescale=1./255) #rescale images\n    generator = data_gen.flow_from_directory(directory,\n                                             target_size=target_size,\n                                             batch_size=batch_size,\n                                             class_mode='categorical')\n    for images, labels in generator:\n        yield images, labels\n\n# specify the directory containing the images\ndirectory = './data/train'\n\n# specify the target size and batch size\ntarget_size = (200, 200)\nbatch_size = 32\n\n#create an iterator\nimage_iter = image_generator(directory, target_size, batch_size)\n\n# use the iterator to train the model\nmodel.fit_generator(image_iter, steps_per_epoch=len(image_iter), epochs=10) \n```"]