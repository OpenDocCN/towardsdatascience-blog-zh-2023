- en: Constraint Programming Explained
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约束编程解释
- en: 原文：[https://towardsdatascience.com/constraint-programming-explained-2882dc3ad9df](https://towardsdatascience.com/constraint-programming-explained-2882dc3ad9df)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/constraint-programming-explained-2882dc3ad9df](https://towardsdatascience.com/constraint-programming-explained-2882dc3ad9df)
- en: '![](../Images/6cf518b9ff47ceb0982a963d081b8582.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6cf518b9ff47ceb0982a963d081b8582.png)'
- en: Graph coloring problem interpretation, painted by Dall-E 2.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图着色问题解释，由 Dall-E 2 画出。
- en: The core of a constraint programming solver and the relationship with mixed
    integer programming
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 约束编程求解器的核心及其与混合整数编程的关系
- en: '[](https://hennie-de-harder.medium.com/?source=post_page-----2882dc3ad9df--------------------------------)[![Hennie
    de Harder](../Images/3e4f2cccd6cb976ca3f8bf15597daea8.png)](https://hennie-de-harder.medium.com/?source=post_page-----2882dc3ad9df--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2882dc3ad9df--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2882dc3ad9df--------------------------------)
    [Hennie de Harder](https://hennie-de-harder.medium.com/?source=post_page-----2882dc3ad9df--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[![Hennie de Harder](../Images/3e4f2cccd6cb976ca3f8bf15597daea8.png)](https://hennie-de-harder.medium.com/?source=post_page-----2882dc3ad9df--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2882dc3ad9df--------------------------------)
    [Hennie de Harder](https://hennie-de-harder.medium.com/?source=post_page-----2882dc3ad9df--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2882dc3ad9df--------------------------------)
    ·9 min read·Jan 12, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2882dc3ad9df--------------------------------)
    ·9 分钟阅读·2023年1月12日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '**There are many different ways to define and solve optimization problems.
    You can e.g. use greedy algorithms, constraint programming, mixed integer programming,
    genetic algorithms or local search. In this post, we are diving in to constraint
    programming. As example, the graph coloring problem is used to illustrate how
    constraint programming works.**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义和解决优化问题的方法有很多种。你可以使用贪心算法、约束编程、混合整数编程、遗传算法或局部搜索等。在这篇文章中，我们将深入探讨约束编程。作为例子，图着色问题被用来说明约束编程的工作原理。**'
- en: If you need an introduction to optimization problems and search heuristics,
    you can read the post below.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要优化问题和搜索启发式的介绍，可以阅读下面的帖子。
- en: '[](/mathematical-optimization-heuristics-every-data-scientist-should-know-b26de0bd43e6?source=post_page-----2882dc3ad9df--------------------------------)
    [## Mathematical Optimization Heuristics Every Data Scientist Should Know'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 每个数据科学家都应该知道的数学优化启发式](https://towardsdatascience.com/?source=post_page-----2882dc3ad9df--------------------------------)'
- en: Local search, genetic algorithms and more.
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本地搜索、遗传算法等。
- en: towardsdatascience.com](/mathematical-optimization-heuristics-every-data-scientist-should-know-b26de0bd43e6?source=post_page-----2882dc3ad9df--------------------------------)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](https://towardsdatascience.com/?source=post_page-----2882dc3ad9df--------------------------------)'
- en: Graph Coloring
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图着色
- en: Let’s start with the graph coloring problem. This problem is used throughout
    the post to illustrate concepts of constraint programming.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从图着色问题开始。这个问题在帖子中用于说明约束编程的概念。
- en: For a given map, you want to color every country. You have an unlimited amount
    of colors. It is not allowed to give adjacent countries the same color. What’s
    the lowest amount of colors you need to fill the map?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于给定的地图，你想给每个国家上色。你有无限多的颜色。相邻的国家不允许使用相同的颜色。你需要多少种颜色才能填满地图？
- en: The *variables* are the colors you give to the countries. The *constraint* is
    that it’s not allowed to give adjacent countries the same color. The *objective*
    is to minimize the number of colors used.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*变量* 是你给国家的颜色。*约束* 是不允许给相邻的国家相同的颜色。*目标* 是最小化使用的颜色数量。'
- en: 'Sounds easy? In practice it can be hard! Here is a part of the solution for
    Africa:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来很简单？实际上可能很难！这是非洲部分解决方案：
- en: '![](../Images/976149c266d558818ff234d949fdc50b.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/976149c266d558818ff234d949fdc50b.png)'
- en: Image by author.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者。
- en: 'Another way to visualize this problem is by using vertices and edges. Adjacent
    countries are connected with an edge. The vertices correspond with the countries.
    This is the previous example illustrated in this way:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可视化这个问题的方法是使用顶点和边。相邻的国家通过边连接。顶点对应于国家。这是之前用这种方式说明的示例：
- en: '![](../Images/969454a088b6c1e54cd87910ea887356.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/969454a088b6c1e54cd87910ea887356.png)'
- en: From the map to vertices and edges. This makes it easier to detect mistakes
    and see adjacent countries. Image by author.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从地图到顶点和边。这使得检测错误和查看相邻国家变得更容易。图片由作者提供。
- en: What is Constraint Programming?
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是约束编程？
- en: The key idea of constraint programming (CP) is that it uses constraints to reduce
    the set of values that each variable can take. In CP, the program (or solver)
    keeps track of values that can appear. After every move, the search space is pruned.
    This means that the values that can’t happen anymore are removed. It can occur
    that there are no more possible moves while the solver hasn’t found a feasible
    solution yet. In that case, the solver starts from an earlier point where it made
    a decision and reconsiders it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 约束编程（CP）的关键思想是，它使用约束来减少每个变量可以取的值的集合。在CP中，程序（或求解器）跟踪可以出现的值。在每次移动后，搜索空间会被剪枝。这意味着不能再发生的值会被移除。可能会出现求解器尚未找到可行解决方案时没有更多可能的移动。在这种情况下，求解器会从做出决策的早期点开始，并重新考虑。
- en: Basics
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础知识
- en: 'The focus of CP is on feasibility, instead of optimality. After a decision,
    the solver checks for feasibility and prunes the search space. In the image below
    you can see a basic CP solver. Big parts are the search and the constraint store,
    which I will explain in detail later on. In short: search is where the decisions
    are made, and the constraint store contains all possible variable values in the
    domain store and holds the constraints. A move is made (e.g. you color a country
    red), and in the constraint store the domain store is pruned based on the move.
    There is also the feasibility check, this means that when the move is not possible
    because it violates one or more constraints, it needs to be rolled back (failure).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: CP的重点是可行性，而不是最优性。在做出决策后，求解器检查可行性并剪枝搜索空间。在下面的图片中，你可以看到一个基本的CP求解器。大部分是搜索和约束存储，稍后我会详细解释。简而言之：搜索是做出决策的地方，约束存储包含域存储中所有可能的变量值并保持约束。做出一个移动（例如，你把一个国家涂成红色），在约束存储中根据这个移动剪枝域存储。还有可行性检查，这意味着当移动不可行因为它违反了一个或多个约束时，需要回滚（失败）。
- en: '![](../Images/7b006cc84ac04ff74bcb5f08fa011a85.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7b006cc84ac04ff74bcb5f08fa011a85.png)'
- en: Constraint programming. Image by author.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 约束编程。图片由作者提供。
- en: In the example below, you can see that when you color a country red, for the
    connected countries red has to be removed from the domain store, because those
    moves are not possible anymore.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，你可以看到，当你把一个国家涂成红色时，所有与这个红色国家相连的国家的红色必须从域存储中移除，因为这些操作不再可能进行。
- en: '![](../Images/4ddb82cf694a19cff5080a10eb4e423f.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4ddb82cf694a19cff5080a10eb4e423f.png)'
- en: 'Pruning: the two adjacent countries can’t be colored red anymore. Image by
    author.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 剪枝：这两个相邻的国家不能再被涂成红色。图片由作者提供。
- en: 'You might wonder: How can constraint programming find an optimal solution?
    Especially in the graph coloring problem, it’s easy to find a feasible solution.
    The easiest one is to give a different color to every country. That is a feasible
    solution but it is far from optimal. There are different ways to solve this. One
    example is to continuously keep solving the problem, and add a constraint that
    the new solution must use less colors than the previous one.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想：约束编程如何找到一个最优解？尤其是在图着色问题中，找到一个可行解是很容易的。最简单的方式是给每个国家不同的颜色。这是一个可行解，但远非最优。有不同的方法来解决这个问题。例如，可以不断解决问题，并添加一个约束，要求新的解决方案使用的颜色比之前的少。
- en: Search
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索
- en: 'For searching, there are some nice rules you can follow that can drastically
    improve the search. The first one is the *first-fail principle*. This means that
    you try first where you are the most likely to fail. This makes things easier
    at the end and reduces the search tree the most. In graph coloring, it’s better
    to start with a country that’s connected to many other countries, than with a
    country that doesn’t have much connections:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在搜索中，有一些有效的规则可以遵循，这些规则可以显著改善搜索。第一个是*首次失败原则*。这意味着你首先尝试最可能失败的地方。这使得最后的事情更容易，并最大程度地减少搜索树。在图着色中，从一个与许多其他国家相连的国家开始，比从一个没有很多连接的国家开始要好：
- en: '![](../Images/581ef9a9fd9489d9337bfb07902a807a.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/581ef9a9fd9489d9337bfb07902a807a.png)'
- en: 'First-fail principle: start with the country with the highest number of connections.
    Image by author.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首次失败原则：从连接数最多的国家开始。图像作者提供。
- en: This helps, because it’s harder to give this country a color if you already
    colored the surrounding countries. Chances are high that when you don’t start
    with this country you have to give it a new color, which is something you want
    to avoid.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于，因为如果你已经为周围的国家上色，为这个国家上色会更困难。如果你不从这个国家开始，可能需要为它选择一个新的颜色，这是你想要避免的。
- en: 'There are different types of searching you can implement. Depending on the
    problem, you can choose the best one (or try them all):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以实现不同类型的搜索。根据问题的不同，你可以选择最佳的一种（或尝试所有）：
- en: '**Variable/value labeling** With this search method, you start with the variables.
    In graph coloring, the countries are the variables and the colors are the values.
    You choose the variable (country) to assign next in a smart way. You can for example
    pick the one that has the lowest possible values. Then, you choose the value (color)
    this variable will get. Often a value is chosen that leaves as many options as
    possible to the other variables. Below an easy example.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量/值标记** 使用这种搜索方法，你从变量开始。在图着色中，国家是变量，颜色是值。你以聪明的方式选择下一个要分配的变量（国家）。例如，你可以选择可能值最少的那个。然后，你选择这个变量将获得的值（颜色）。通常，选择的值是给其他变量留出尽可能多的选项。下面是一个简单的例子。'
- en: '![](../Images/83260385626fd0c4054ec92b2b670886.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/83260385626fd0c4054ec92b2b670886.png)'
- en: Example of variable/value labeling. Image by author.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 变量/值标记的示例。图像作者提供。
- en: '**Value/variable labeling**'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**值/变量标记**'
- en: Another way to handle search is to start with the values. You have a color and
    you select a country to give this color. This is exactly the opposite compared
    to variable/value labeling. In the graph coloring problem, you can make sets of
    countries that can all have the same color.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 处理搜索的另一种方法是从值开始。你有一个颜色，然后选择一个国家来赋予这个颜色。这与变量/值标记正好相反。在图着色问题中，你可以将所有可以拥有相同颜色的国家组成一个集合。
- en: '**Domain splitting**'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**域划分**'
- en: 'With domain splitting, you don’t assign a value to a variable directly. Instead,
    you split the domain (possible values) of a variable in two or more sets. This
    is a weaker commitment than saying: this country should have this value, because
    you still have options for the country, one of the values from the set.'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用域划分，你不会直接为变量分配一个值。相反，你将变量的域（可能值）划分为两个或更多集合。这比直接指定：这个国家应该具有这个值的承诺要弱，因为你仍然有对国家的选择，即集合中的一个值。
- en: '**Symmetry breaking during search** Symmetry breaking can improve search drastically.
    You need to prevent symmetrical solutions from being explored, because this is
    a waste of time. Theoretically, symmetrical solutions are exactly the same. A
    way to start breaking symmetry in graph coloring is to fix colors for certain
    countries. Better ways to break symmetry is by ordering the variables (countries)
    or by only taking the current values (colors) and one new value (color) into account.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索中的对称性破除** 对称性破除可以显著改善搜索效果。你需要防止对称解被探索，因为这是一种时间浪费。从理论上讲，对称解是完全相同的。开始破除图着色中的对称性的一种方法是为某些国家固定颜色。更好的破除对称性的方法是通过对变量（国家）进行排序，或者只考虑当前值（颜色）和一个新值（颜色）。'
- en: '![](../Images/27c1646477ab03ff41f73e5fa68d3e8b.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/27c1646477ab03ff41f73e5fa68d3e8b.png)'
- en: Symmetrical solutions. Different colors, but the solutions are exactly the same.
    Image by author.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对称解。不同的颜色，但解决方案完全相同。图像作者提供。
- en: '**Randomization and restarts** It’s also possible to try different solutions
    in a random order. You just randomly pick values for variables and you check if
    the solution is feasible. If no solution is found after some time or number of
    tries, you restart the search.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**随机化和重启** 也可以尝试以随机顺序寻找不同的解决方案。你可以随机选择变量的值，然后检查解决方案是否可行。如果经过一段时间或若干尝试后没有找到解决方案，你就重新开始搜索。'
- en: The methods above are different ways to handle the search part of constraint
    programming. It’s possible to combine some of them.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法是处理约束编程中的搜索部分的不同方式。可以将它们中的一些结合使用。
- en: Constraint store
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 约束存储
- en: There are different types of constraints possible to implement in the constraint
    store. Constraints are used for feasibility checking and pruning of the domain
    store. The ‘normal’ constraints are, in the case of graph coloring, that a country
    that is connected to another country can’t have the same color. But there are
    other interesting constraints you can create based on the problem. The goal of
    adding constraints is to tighten the problem. If you make a tighter definition,
    the optimal solution can be found faster.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are different types of constraints you can add to the constraint store:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '**Global constraints** The most important constraints you can add are global
    constraints. Global constraints help in pruning the search space and can detect
    infeasibility earlier. A global constraint helps in conveying the problem structure
    to the solver directly. An example of a global constraint is the *alldifferent*
    constraint. This constraint means that all variables should have different values.
    In graph coloring, when four countries are all connected, they should all have
    a different color. If we only have three colors left for these countries, the
    solution is infeasible: we can roll back and report failure.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/ff5908f31e376d809d4a4147b5ca3ba5.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: The countries are all connected, so they should all have a different color.
    Image by author.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '**Redundant constraints** A redundant constraint is a constraint that doesn’t
    add value in excluding a solution. But redundant constraints are computationally
    significant, because they reduce the search space. A redundant constraint captures
    something that is not possible but not captured in a constraint. An example in
    graph coloring: the number of colors can’t exceed the number of countries.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Surrogate constraints** By combining existing constraints, you get surrogate
    constraints. Surrogate constraints are helpful because they provide a more global
    view. An example is merging existing constraints or taking a linear combination
    of them.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implied constraints** Another type of constraints you can add are implied
    constraints. Deriving a property from multiple existing constraints gives implied
    constraints.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can be creative in creating constraints! For a certain problem, try to understand
    it completely to add useful constraints to the constraint store. This can improve
    the speed of the solver with a huge amount.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: What is the relation between CP and MIP?
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might have heard of mixed integer programming. This is another technique
    to model discrete optimization problems. MIP uses different ways to find the best
    solutions to a problem. Below, you can read what the similarities and differences
    are between CP and MIP.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: What is mixed integer programming?
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mixed integer programming (MIP) is a mathematical optimization technique that
    involves finding the optimal solution to a problem by solving a system of linear
    equations and inequalities that contain both integer and continuous variables.
    MIP focuses on optimality. To understand MIP and the math behind it properly,
    it’s important to know how linear programming and the simplex algorithm works.
    Read the article below if you want to have a refresher about those:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[](/a-beginners-guide-to-linear-programming-and-the-simplex-algorithm-87db017e92b4?source=post_page-----2882dc3ad9df--------------------------------)
    [## A Beginner’s Guide to Linear Programming and the Simplex Algorithm'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Tackling a wide range of optimization problems.
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/a-beginners-guide-to-linear-programming-and-the-simplex-algorithm-87db017e92b4?source=post_page-----2882dc3ad9df--------------------------------)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: A MIP solver relaxes constraints by allowing continuous values for the integer
    variables. This makes it possible to use the simplex algorithm. After that, other
    techniques are used to find a valid solution (integer values for integer variables).
    These techniques are out of scope for this post, but if you are interested, you
    can search for terms like branch and bound, branch and cut and cutting planes
    (e.g. Gomory cuts and polyhedral cuts).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: How CP and MIP are related
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mathematically, it’s possible to formulate any MIP problem as a CP problem (or
    a CP problem as a MIP problem). So in that sense, they are the same. But because
    their ways to come to the optimal solution are different, you might want to consider
    which one is the best approach for your specific problem. MIP uses linear relaxation
    while CP uses logical inference. CP works in most cases faster for problems with
    many ‘or’ constraints, while MIP can handle ‘and’ constraints faster. If you are
    using a commercial MIP solver, they probably implemented CP techniques inside
    it, like creating high level constraints and logical reasoning. MIP is usually
    more flexible and more reliable. If you have the time, it’s always good to test
    different techniques to see what works best on your problem.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hopefully you enjoyed this introduction about constraint programming. It is
    a technique that focuses on feasibility. The constraint store and way to search
    for solutions are the key components of CP. You can improve the model formulation
    drastically if you add different types of constraints to the constraint store.
    The core of the CP solver propagates through the constraints and checks if the
    solution is still feasible and if pruning is possible. Pruning means removing
    values from the variable domains. CP solvers can find optimal solutions, if you
    give them enough time.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Mixed integer programming is another way to formulate discrete optimization
    problems. It uses algebraic techniques to find an optimal solution. Depending
    on the problem, you can choose if CP or MIP is a better fit.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Below you can find more posts about mathematical optimization.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是更多关于数学优化的帖子。
- en: Related
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关
- en: '[](/how-to-handle-optimization-problems-daf97b3c248c?source=post_page-----2882dc3ad9df--------------------------------)
    [## How to Handle Optimization Problems?'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 如何处理优化问题？](https://towardsdatascience.com/how-to-handle-optimization-problems-daf97b3c248c?source=post_page-----2882dc3ad9df--------------------------------)'
- en: Easy examples with solutions and code.
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简单的示例和解决方案及代码。
- en: towardsdatascience.com](/how-to-handle-optimization-problems-daf97b3c248c?source=post_page-----2882dc3ad9df--------------------------------)
    [](/four-ways-to-combine-mathematical-optimization-and-machine-learning-8cb874276254?source=post_page-----2882dc3ad9df--------------------------------)
    [## Five ways to combine Mathematical Optimization and Machine Learning
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 五种将数学优化与机器学习相结合的方法](https://towardsdatascience.com/four-ways-to-combine-mathematical-optimization-and-machine-learning-8cb874276254?source=post_page-----2882dc3ad9df--------------------------------)'
- en: Practical examples of combining two forces.
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实际示例展示了如何结合两种力量。
- en: towardsdatascience.com](/four-ways-to-combine-mathematical-optimization-and-machine-learning-8cb874276254?source=post_page-----2882dc3ad9df--------------------------------)
    [](/why-every-data-scientist-should-learn-mathematical-optimization-3ac102663456?source=post_page-----2882dc3ad9df--------------------------------)
    [## Why Every Data Scientist Should Learn Mathematical Optimization
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 为什么每个数据科学家都应该学习数学优化](https://towardsdatascience.com/why-every-data-scientist-should-learn-mathematical-optimization-3ac102663456?source=post_page-----2882dc3ad9df--------------------------------)'
- en: Data science courses are focusing on data visualization, feature engineering,
    data processing, (un)supervised learning…
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据科学课程专注于数据可视化、特征工程、数据处理、（非）监督学习……
- en: towardsdatascience.com](/why-every-data-scientist-should-learn-mathematical-optimization-3ac102663456?source=post_page-----2882dc3ad9df--------------------------------)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何处理优化问题？](/how-to-handle-optimization-problems-daf97b3c248c?source=post_page-----2882dc3ad9df--------------------------------)'
