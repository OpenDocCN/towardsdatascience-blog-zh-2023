- en: The Ultimate Visualization Assistant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/the-ultimate-visualization-assistant-2dc89003d847](https://towardsdatascience.com/the-ultimate-visualization-assistant-2dc89003d847)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How an evening with AI transformed my approach to visualizing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@anthonybaum?source=post_page-----2dc89003d847--------------------------------)[![Anthony
    Baum](../Images/7c79710f88cac1b378807b2fef8e19ae.png)](https://medium.com/@anthonybaum?source=post_page-----2dc89003d847--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2dc89003d847--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2dc89003d847--------------------------------)
    [Anthony Baum](https://medium.com/@anthonybaum?source=post_page-----2dc89003d847--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2dc89003d847--------------------------------)
    ·9 min read·Jun 30, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5426c2750c58c49f0ed1e59c00bc2495.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Simon Abrams](https://unsplash.com/@flysi3000?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: As the sun began to dim and the city lights came to life, the inevitability
    of a late night in the office settled in. I found myself in a race against time.
    A crucial sales presentation was looming less than a day away, and success hinged
    on an unfulfilled request — an insightful data visualization that could succinctly
    convey the underlying methodology of our new TV attribution model.
  prefs: []
  type: TYPE_NORMAL
- en: 'I needed something complex enough to show off, but simple enough to convey
    most of the information without explanation. Not an easy task with a ticking clock.
    Thankfully, a beacon of artificial intelligence, my trusty new assistant — ChatGPT
    — sat ready to simplify the task at hand. Its main mission: To help me translate
    data that was no more than a concept in my head into an eloquent visual narrative,
    capable of captivating even the most data-averse minds in the room.'
  prefs: []
  type: TYPE_NORMAL
- en: This might be a little high drama, but I *was* in a bit of a crunch. For a sales
    deck, this needed an overly simple example which I couldn’t readily find in our
    database, so made-up example data it was.
  prefs: []
  type: TYPE_NORMAL
- en: I knew in my head exactly what I wanted to display — a web traffic baseline,
    a spike in web responses following a TV ad, and some way to convey in little to
    no words that in this example we would attribute the difference between the baseline
    and the spike.
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib charts are solid in an academic paper but can require an overly deft
    hand to produce something both complex and truly flashy. I often turn to Power
    BI for the out-of-the-box looks and quick charts, but it isn’t ideal to work with
    when you need to formulate something from scratch with no existing data.
  prefs: []
  type: TYPE_NORMAL
- en: I’d been working with Plotly for a while, which seemed like a happy medium.
    However, I wasn’t confident enough with the package to put my thoughts into code
    without spending precious minutes combing through documentation and Stack Overflow.
    So, with time short, I started my first prompt.
  prefs: []
  type: TYPE_NORMAL
- en: I’m creating a visualization to display web traffic response following a TV
    spot airing. Let’s start by representing web traffic as a per minute count of
    site visits over the course of 30 minutes. The first ten minutes need to be a
    random number between 0 and 4\. The second ten minute period needs to be random
    numbers between 4 and 20, with the numbers distributed in what looks like a right
    skewed histogram. The third ten minute period is the same as the first ten minute
    period. Please create that data and chart it for me using a line graph in Plotly.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The prompt returned the following, with my only edits in the update_layout
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f66922d7655d2028258781e423bda609.png)'
  prefs: []
  type: TYPE_IMG
- en: Chart as generated by the prior code block
  prefs: []
  type: TYPE_NORMAL
- en: I was already impressed here as I wasn’t expecting the right-skewed histogram
    lookalike request to be handled so well. Maybe I’d even be finished before the
    after-work session down the block was over.
  prefs: []
  type: TYPE_NORMAL
- en: Next, I needed something to represent the web traffic baseline. In reality,
    this could be as simple as a rolling median, but asking for that here won’t work
    with the limited length of data. Instead, I figured the median of the first and
    third sets of ten observations would probably convey the right idea.
  prefs: []
  type: TYPE_NORMAL
- en: Please calculate the combined median of the two arrays first_ten and last_ten.
    Plot the calculated median as a constant horizontal line.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: I then just changed the name of the median line trace from “Median” to “Baseline”.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/38d0401327d2d776c0e178b8cdf91078.png)'
  prefs: []
  type: TYPE_IMG
- en: Chart from the above code block, which added the baseline constant line
  prefs: []
  type: TYPE_NORMAL
- en: Now the idea of “lift” comes through if you’re familiar with marketing models,
    however, for the untrained eye this needs some more focused elements; the less
    that needs explaining, the more effective a visual is. The main things missing
    at this point were a chart element that implies causality of the spike in web
    traffic, and a way to convey the volume of traffic attributed to the ad.
  prefs: []
  type: TYPE_NORMAL
- en: I started with the causality element.
  prefs: []
  type: TYPE_NORMAL
- en: At minute 10 in the data, a TV spot airs and drives a spike in web traffic.
    What kind of chart element would you suggest to convey not just that the ad ran
    that minute, but that the ad is the causal factor behind the spike?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The response suggested a vertical line and annotation and provided the code
    update.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: I changed only the font size of the annotation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/811a1683631478190c8c8752c12276b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Chart from the above code block, which added the TV ad aired constant line and
    annotation
  prefs: []
  type: TYPE_NORMAL
- en: Now we had a clearly defined cause and point of occurrence for the spike. The
    chart still needed something to denote the volume of traffic attributed. I already
    knew what I wanted for this — to shade the area between the baseline and web traffic
    for the duration of the “lift window” (ten minutes). I went back to my AI colleague
    to implement this.
  prefs: []
  type: TYPE_NORMAL
- en: I want to display the volume of web traffic above baseline that is attributed
    to the ad. Please add green shading between the baseline line and web traffic
    per minute line. Only shade the area between the 10th and 20th minute of the data.
    Also add a legend item for the shaded area.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4e12a2d82b3b4ff7a3672e0874bb5668.png)'
  prefs: []
  type: TYPE_IMG
- en: Chart from the above code block, which added the shading to represent ad impact
  prefs: []
  type: TYPE_NORMAL
- en: I felt like this was getting to a good place, but I still wasn’t happy with
    the “clarity” of what I was trying to convey. I made some additions based on the
    code I’d already been given.
  prefs: []
  type: TYPE_NORMAL
- en: I added a constant vertical line and annotation to denote the lift window cutoff,
    and changed the colors of the ad aired and window cutoff lines to green and red,
    respectively. I also changed the baseline constant line to purple and styled it
    as dotted to better match the other constant lines.
  prefs: []
  type: TYPE_NORMAL
- en: I then wanted one final element — shading for the baseline region. Wanting to
    tap the immaculate performance so far, I gave this one to my assistant.
  prefs: []
  type: TYPE_NORMAL
- en: Please add purple shading to the entire baseline region. Add an annotation saying
    “Baseline” at minute 15, underneath the baseline constant horizontal line.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note here that I haven’t referenced any coordinates or specific numbers for
    the location of the shading.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1d45a511599786864721dbe061186fa8.png)'
  prefs: []
  type: TYPE_IMG
- en: Chart from the above code block, which added baseline shading, a cutoff line,
    and more annotations
  prefs: []
  type: TYPE_NORMAL
- en: The capture of the baseline shading request without being provided specific
    values is top-tier, and at this point, I was beyond impressed. Happy with the
    visualization, I dropped the chart into the presentation, fired off a Teams message,
    and with a fond look at the ChatGPT tab, closed my laptop. As I was packing up,
    a notification from the after-work group chat flashed across my phone screen.
  prefs: []
  type: TYPE_NORMAL
- en: Saw the presentation message, thought you said you’d be going late? We’ll have
    a pint waiting for you.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Cheers, ChatGPT.
  prefs: []
  type: TYPE_NORMAL
