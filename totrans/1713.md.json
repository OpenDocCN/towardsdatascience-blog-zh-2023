["```py\nassert x == 10\n```", "```py\nassert isinstance(x, int)\n```", "```py\n>>> x = 20\n>>> assert x == 10\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAssertionError\n```", "```py\n>>> x = 20\n>>> assert x == 10, \"x is not 10\"\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAssertionError: x is not 10\n```", "```py\n>>> x = 20\n>>> if x != 10:\n...     raise AssertionError(\"x is not 10\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAssertionError: x is not 10\n```", "```py\nassert x == 10, \"x is not 10\"\n```", "```py\nif __debug__:\n    if x != 10:\n        raise AssertionError(\"x is not 10\")\n```", "```py\nif __debug__:\n    if x < 7:\n        debug_logger.warning(f\"x is below seven: {x = };\"\n                              \" hence it's set to 7\")\n        x = 7\n    elif x > 13:\n        debug_logger.warning(f\"x is over thirteen: {x = };\"\n                              \" hence it's set to 13\")\n        x = 13\n    else:\n        debug_logger.info(f\"x is fine: {x = }\")\n```", "```py\nPytestConfigWarning: assertions not in test modules or plugins\nwill be ignored because assert statements are not executed by \nthe underlying Python interpreter (are you using python -O?)\n\n    self._warn_about_missing_assertion(mode)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n```", "```py\ndef preprocess_text(text: str) -> str:\n    assert isinstance(text, str)\n    return text.lower().strip()\n```", "```py\nimport easycheck\n\ndef preprocess_text(text: str) -> str:\n    easycheck.check_type(\n        text, \n        expected_type=str,\n        handle_with=TypeError,\n        message=\"Argument text must be string, \"\n                f\"not {type(text).__name__}\"\n    )\n    return text.lower().strip()\n```", "```py\n>>> preprocess_text(108)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: Argument text must be string, not int\n```"]