- en: 'Python to Rust: Breaking Down 3 Big Obstacles'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Python 到 Rust：破解 3 大障碍
- en: 原文：[https://towardsdatascience.com/python-to-rust-breaking-down-3-big-obstacles-094eb99e331d](https://towardsdatascience.com/python-to-rust-breaking-down-3-big-obstacles-094eb99e331d)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/python-to-rust-breaking-down-3-big-obstacles-094eb99e331d](https://towardsdatascience.com/python-to-rust-breaking-down-3-big-obstacles-094eb99e331d)
- en: Python pro to Rust rookie — a data scientist’s transition tale
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 高手到 Rust 新手——一名数据科学家的过渡故事
- en: '[](https://dennisbakhuis.medium.com/?source=post_page-----094eb99e331d--------------------------------)[![Dennis
    Bakhuis](../Images/4dc6dca031cdedbb044a1d0a6b142186.png)](https://dennisbakhuis.medium.com/?source=post_page-----094eb99e331d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----094eb99e331d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----094eb99e331d--------------------------------)
    [Dennis Bakhuis](https://dennisbakhuis.medium.com/?source=post_page-----094eb99e331d--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://dennisbakhuis.medium.com/?source=post_page-----094eb99e331d--------------------------------)[![Dennis
    Bakhuis](../Images/4dc6dca031cdedbb044a1d0a6b142186.png)](https://dennisbakhuis.medium.com/?source=post_page-----094eb99e331d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----094eb99e331d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----094eb99e331d--------------------------------)
    [Dennis Bakhuis](https://dennisbakhuis.medium.com/?source=post_page-----094eb99e331d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----094eb99e331d--------------------------------)
    ·8 min read·Dec 12, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----094eb99e331d--------------------------------)
    ·阅读时间 8 分钟·2023年12月12日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/2c60e597f6041cb1288d3e3032c05b6f.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2c60e597f6041cb1288d3e3032c05b6f.png)'
- en: 'Figure 1: The snake and the crab. (Crab: [Romina BM](https://unsplash.com/photos/a-group-of-red-mushrooms-ZWrsjySNfxY);
    Snake: [Mohan Moolepetlu](https://unsplash.com/photos/close-up-photo-of-brown-and-gray-snake-VUr5nmC1IM4);
    composition by author).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1：蛇和螃蟹。（螃蟹：[Romina BM](https://unsplash.com/photos/a-group-of-red-mushrooms-ZWrsjySNfxY)；蛇：[Mohan
    Moolepetlu](https://unsplash.com/photos/close-up-photo-of-brown-and-gray-snake-VUr5nmC1IM4)；由作者编排）。
- en: Everybody around me knows that I am a big fan of 🐍 Python. I started using Python
    about 15 years ago when I was fed up with [Mathworks Matlab](https://www.mathworks.com/products/matlab.html).
    While the idea of Matlab seemed nice, after [mastering Python](https://medium.com/towards-data-science/master-python-in-10-minutes-a-day-ac32996b5ded)
    I never looked back. I even became a sort of evangelist of Python at my University
    and “spread the word”.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我周围的每个人都知道我是一个忠实的🐍 Python 粉丝。我大约 15 年前开始使用 Python，当时我对[Mathworks Matlab](https://www.mathworks.com/products/matlab.html)感到厌倦。尽管
    Matlab 的想法看起来不错，但在[掌握 Python](https://medium.com/towards-data-science/master-python-in-10-minutes-a-day-ac32996b5ded)后，我再也没有回头。我甚至在我的大学成为了
    Python 的一种布道者，并“传播这个消息”。
- en: The ability to code does not make you a software developer.
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 编写代码的能力并不代表你是一个软件开发人员。
- en: 'At my current employer [TenneT](https://www.tennet.eu/), a large [transmission
    system operator](https://en.wikipedia.org/wiki/Transmission_system_operator) in
    the Netherlands and Germany, we are building a *document parsing and validation
    solution* with a team of about 10 people. Building such a solution, especially
    in a team, is much harder than I thought. This also made me more interested in
    proper paradigms of software engineering. I always thought that my code is not
    too bad, but after looking at work from my software engineer friends: man there
    is so much to learn!'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我目前的雇主[TenneT](https://www.tennet.eu/)——荷兰和德国的大型[传输系统运营商](https://en.wikipedia.org/wiki/Transmission_system_operator)——我们正在与约
    10 人的团队一起构建一个*文档解析和验证解决方案*。构建这样的解决方案，尤其是在团队中，比我想象的要困难得多。这也让我对软件工程的正确范式更感兴趣。我一直认为我的代码还不错，但在看到我软件工程师朋友的工作后：天哪，还有很多需要学习的地方！
- en: As I learned about topics like [strong typing](https://en.wikipedia.org/wiki/Strong_and_weak_typing),
    [SOLID principles](https://en.wikipedia.org/wiki/SOLID), and general programming
    architectures, I also glanced at other languages and how *they* solved the problem.
    Especially [Rust](https://www.rust-lang.org) caught my eye as I often saw Python
    packages that were based on Rust (e.g. [Polars](https://pola.rs/)).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当我学习[强类型](https://en.wikipedia.org/wiki/Strong_and_weak_typing)、[SOLID 原则](https://en.wikipedia.org/wiki/SOLID)和一般编程架构等主题时，我也略微了解了其他语言以及*它们*如何解决问题。特别是[Rust](https://www.rust-lang.org)吸引了我的注意，因为我经常看到基于
    Rust 的 Python 包（例如：[Polars](https://pola.rs/)）。
- en: To get a proper introduction to Rust I followed the [***official Rustlings course***](https://github.com/rust-lang/rustlings/)
    which is a local Git repository with 96 small coding *problems*. While it was
    quite doable, Rust is very different than Python. The Rust compiler is a very
    strict fellow that does not take *maybe* for an answer. Below are my three major
    differences between Rust and Python.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地了解 Rust，我跟随了[***官方 Rustlings 课程***](https://github.com/rust-lang/rustlings/)，这是一个包含
    96 个小编程*问题*的本地 Git 仓库。虽然它是完全可以做到的，但 Rust 与 Python 非常不同。Rust 编译器非常严格，无法接受*也许*的答案。以下是我认为
    Rust 和 Python 之间的三个主要区别。
- en: '*Disclaimer: while I am quite proficient with Python, my other languages are
    a bit Rusty (pun intended). I am still learning Rust and I may have understood
    parts incorrectly.*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*免责声明：虽然我对 Python 非常熟练，但我的其他语言有点生疏（双关语）。我仍在学习 Rust，并且可能有些部分理解不完全。*'
- en: '![](../Images/18b6b0dc602c2a6cb72766e755250dd8.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/18b6b0dc602c2a6cb72766e755250dd8.png)'
- en: 'Figure 2: We made it to the finish line (screenshot by author).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2：我们成功抵达终点（截图由作者提供）。
- en: 1\. Ownership, Borrowing, and lifetimes
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 所有权、借用和生命周期
- en: Ownership and borrowing are probably the most fundamental aspect of the Rust
    programming language. It is designed to ensure memory safety without the need
    of a so called garbage collector. This is a unique concept to Rust and I have
    not yet seen it in other languages.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所有权和借用可能是 Rust 编程语言中最基本的方面。它旨在确保内存安全，无需所谓的垃圾回收器。这是 Rust 的独特概念，我还没有在其他语言中看到过。
- en: Lets start with an example where we declare a value `42` to the variable `answer_of_life`.
    Rust will now allocate some space in the memory (this is a bit more complex but
    lets keep it simple for now) and attach *“ownership”* to this variable. It is
    important to know that there can only be one owner at a time. Some operations
    “transfer ownership”, making the previous variable references invalid. This ensures
    memory safety by preventing issues such as double-freeing memory, data races,
    and dangling references.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个例子开始，我们将值`42`赋给变量`answer_of_life`。Rust 现在将在内存中分配一些空间（这稍微复杂一些，但我们现在保持简单），并将*“所有权”*附加到该变量。重要的是要知道一次只能有一个所有者。一些操作“转移所有权”，使得之前的变量引用无效。这通过防止双重释放内存、数据竞争和悬挂引用等问题来确保内存安全。
- en: 'Source 1: Ownership, ownership transfer, and scope.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 来源 1：所有权、所有权转移和作用域。
- en: A term that is also used in other languages is *scope*. This is can be seen
    as a sort of area in which a part of code *“lives”*. Every time when the code
    leaves a scope all variables that have ownership are deallocated. This is something
    that is fundamentally different in Python. Python uses a garbage collector that
    deallocates variables when there are no references to it. In the example in *source
    1* the transfer ownership from variable `s1` to `s2` and thereafter, variable
    `s1` is not usable anymore.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他语言中也使用的一个术语是*作用域*。这可以被视为代码*“存在”*的某种区域。每次代码离开一个作用域时，所有拥有所有权的变量都会被解除分配。这是 Python
    中根本不同的东西。Python 使用垃圾回收器，在没有对变量的引用时解除分配变量。在*来源 1*的例子中，从变量`s1`到`s2`的所有权转移之后，变量`s1`就不再可用了。
- en: As a Python user ownership can be confusing as is a real struggle in the beginning.
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 作为 Python 用户，所有权可能会让人感到困惑，特别是在开始时确实是一个挑战。
- en: 'In the example in *source 1* is a bit simplistic. Rust enforces you to think
    where a variable is made and how it should be transferred. For example, when you
    use a parameter to a function ownership can be transferred as seen in *Source
    2*:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在*来源 1*的例子中有些过于简单。Rust 强制要求你思考变量是如何创建的以及它应该如何被转移。例如，当你将参数传递给函数时，所有权可以被转移，如*来源
    2*中所示：
- en: 'Source 2: a function takes ownership, invalidating the original variable.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 来源 2：一个函数获取所有权，从而使原始变量无效。
- en: Only transferring ownership can be cumbersome and maybe for some use-cases even
    unworkable so Rust came up with a so called *borrowing* system. Instead of transferring
    ownership, a variable agrees to borrow the variable while the original variable
    stays owner. By default a borrow variable is immutable, i.e. read only, but by
    adding the `mut` keyword, a borrow can even be mutable. While there can be *unlimited
    immutable borrows*, only a single mutable borrow is allowed. In *Source 3* I show
    an example of two immutable borrows and one mutable borrow. All variables will
    be removed when the function goes out of scope.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅转移所有权可能会很麻烦，甚至对于一些使用场景来说可能无法实现，因此 Rust 提出了一个所谓的*借用*系统。变量通过借用同一个变量来避免转移所有权，而原变量仍然是所有者。默认情况下，借用的变量是不可变的，即只读，但通过添加
    `mut` 关键字，借用可以变成可变的。虽然可以有*无限多个不可变借用*，但只允许有一个可变借用。在*源 3*中，我展示了两个不可变借用和一个可变借用的例子。当函数超出作用域时，所有变量将被移除。
- en: 'Source 3: two immutable and one mutable borrows.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 源 3：两个不可变和一个可变借用。
- en: 'Lifetimes is a concept in Rust that is related to borrowing and ownership and
    helps the compiler to enforce rules on how long references can be valid. You can
    get into a situation that you create a structure or a function that is build using
    two borrows. This means that now the result of the function or the structure might
    depend on the previous inputs. To make this more explicit, we can express relationships
    by annotating lifetimes. See an example in *source 4*:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 生命周期是 Rust 中与借用和所有权相关的概念，帮助编译器强制执行引用有效的时长。你可能会遇到创建一个使用两个借用的结构或函数的情况。这意味着现在函数或结构的结果可能依赖于之前的输入。为了使这一点更明确，我们可以通过注释生命周期来表达关系。在*源
    4*中查看示例：
- en: 'Source 4: Lifetimes syntax can be confusing at first but eventually it helps.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 源 4：生命周期语法初看可能令人困惑，但最终会有所帮助。
- en: 'Ownership, borrowing, and lifetimes are not easy to cope with but definitely
    forces you to create better code. At least, when you can get past the compiler
    (-:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '所有权、借用和生命周期虽然不易处理，但确实迫使你编写更好的代码。至少，当你能够通过编译器的检查时（-:'
- en: 2\. Rust does not take None for an answer
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2. Rust 不接受 `None` 作为答案
- en: 'Something that is very common in Python is not possible in Rust: having a value
    that is set to `None`. It is a deliberate design choice that aligns with Rust’s
    goals of safety, predictability, and zero-cost abstractions.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中非常常见的事情在 Rust 中是不可能的：设置一个值为 `None`。这是一个与 Rust 的安全性、可预测性和零成本抽象目标一致的设计选择。
- en: 'The safety aspect is similar to the ownership, borrowing, and lifetimes aspect
    of rust: prevent the possibility of references pointing to unallocated memory.
    By not giving the possibility to return `None` will result in more predictability
    as it forces the developer to explicitly handle cases where a number might be
    absent. Due to memory safety and predictable behavior Rust can achieve all its
    high-level language features without sacrificing performance.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性方面类似于 Rust 的所有权、借用和生命周期方面：防止引用指向未分配的内存。通过不允许返回 `None`，将导致更高的可预测性，因为它迫使开发者显式处理可能缺少数字的情况。由于内存安全和可预测行为，Rust
    可以实现所有高级语言功能而不会牺牲性能。
- en: None shall not pass — Gandalf the Grey
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “None shall not pass” — 甘道夫灰袍
- en: 'Just denying `None` would make Rust a terrible language, therefore, the creators
    come with a nice alternative: the Enums `Option` and `Result`. With these Enums
    we can explicitly represent the presence of absence of a value. It also makes
    the error handling very elegant. Lets consider *Source 5* for an example of `Option`.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅拒绝 `None` 会使 Rust 成为一个糟糕的语言，因此创作者提出了一个不错的替代方案：枚举 `Option` 和 `Result`。通过这些枚举，我们可以显式地表示值的存在或缺失。这也使得错误处理非常优雅。让我们考虑*源
    5*中的 `Option` 示例。
- en: 'Source 5: Using Option to return an optional answer and handle special cases.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 源 5：使用 Option 返回可选答案并处理特殊情况。
- en: '***Wait a minute!*** Didn’t you say that there was no `None`? This was also
    something that tricked me the first time, but None here is a special Enum struct
    that does not take a parameter. Also `Some` is a special struct, but that can
    take a parameter. Our function *divide()* returns one of these possible Enum values
    and we can later check what it is and act accordingly.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '***等一下！*** 你不是说没有 `None` 吗？这也是第一次让我感到困惑的地方，不过这里的 `None` 是一个特殊的枚举结构体，不接受参数。`Some`
    也是一个特殊的结构体，但可以接受参数。我们的函数*divide()*返回这些可能的枚举值之一，随后我们可以检查它是什么，并据此采取行动。'
- en: Without None and forcing a return value makes Rust very predictable.
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 没有 `None` 并且强制返回值使得 Rust 非常可预测。
- en: The main function uses a *match* construct to do the result handling which is
    very convenient. It is somewhat similar to a *switch*/*case* construct in other
    languages except Python (see Figure 2 for Guido’s response). The *match* checks
    if it is Enum `Some` or Enum `None` and performs the associated action.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 主函数使用 *match* 结构来处理结果，这非常方便。它有点类似于其他语言中的 *switch*/*case* 结构（参见图 2 中 Guido 的回应）。*match*
    检查是否是 Enum `Some` 或 Enum `None` 并执行相关操作。
- en: 'Figure 3: [Tweet/reaction](https://twitter.com/gvanrossum/status/1276336548296810496)
    of Guido van Rossum on switch/case.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3：[Guido van Rossum 对 switch/case 的推文/反应](https://twitter.com/gvanrossum/status/1276336548296810496)。
- en: The `Option` Enum is a special structure for functions that can return a value
    or not. For functions that can return a value or an error, Rust has an even more
    explicit Enum called `Result`. The idea is exactly the same, with the main difference
    that `Option` has a default “error” value `None` set, while `Result` needs an
    explicit “error” type. This type can be a simple string or a more explicit Struct
    to identify the error. In *Source 6* the divide function is rewritten using `Result`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`Option` 枚举是一种特殊的结构，用于处理可能返回值或不返回值的函数。对于可以返回值或错误的函数，Rust 有一个更为明确的枚举，称为 `Result`。它们的思想完全相同，主要区别在于
    `Option` 有一个默认的“错误”值 `None`，而 `Result` 需要一个明确的“错误”类型。这个类型可以是简单的字符串，也可以是更明确的结构体来标识错误。在
    *来源 6* 中，divide 函数使用 `Result` 重新编写。'
- en: 'Source 6: The Result Enum is a great way to return a value or an error.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 来源 6：`Result` 枚举是一种很好的返回值或错误的方式。
- en: The Rust developers saw that the *match* construct can sometimes be a bit tedious
    and therefore, added `if let` and `while let` operators. These operators are similar
    to *match* but give some nice syntactic sugar with juicy icing. There is even
    a very cool `?` operator (not shown here) which even adds a cherry on top of the
    juicy icing!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 开发者发现 *match* 结构有时可能有些繁琐，因此添加了 `if let` 和 `while let` 操作符。这些操作符类似于 *match*，但提供了一些漂亮的语法糖和丰富的装饰。甚至还有一个非常酷的
    `?` 操作符（这里未展示），它为丰富的装饰添加了一个樱桃在上面！
- en: 'Source 7: if let and while let are creating beautiful syntactic sugar!'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 来源 7：`if let` 和 `while let` 正在创造美丽的语法糖！
- en: Using Python I learned to use the Optional keyword to type a result for being
    a value or None. But I have to agree that Rust has solved this part very neatly.
    I can imagine that the Python community will also move more towards this style,
    similar to what is going on with strong(er) typing.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 时，我学会了使用 Optional 关键字来为结果类型定义值或 None。但我不得不承认 Rust 在这方面处理得非常精妙。我可以想象，Python
    社区也会朝着这种风格发展，类似于强类型化的趋势。
- en: 3\. Where are the classes?
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 类在哪里？
- en: 'Both Python and Rust can be used in the two programming paradigms: functional
    programming (FP) and object oriented programming (OOP). However Rust takes a different
    flavor on how it implements these so called objects. In Python we have a typical
    `class` object for which we can associate variables and methods. As with many
    other languages such as Java, we can now use this method as a base and expand
    functionality by creating new objects that inherit methods and variables from
    their parent.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Python 和 Rust 都可以用于两种编程范式：函数式编程（FP）和面向对象编程（OOP）。然而，Rust 实现这些所谓的对象的方式有所不同。在 Python
    中，我们有一个典型的 `class` 对象，可以关联变量和方法。像许多其他语言（如 Java）一样，我们现在可以将这个方法作为基础，通过创建继承父类方法和变量的新对象来扩展功能。
- en: 'In Rust, there is no `class` keyword and objects are fundamentally different
    from Python. Rust uses a trait system for code reuse and polymorphism which can
    give the same benefits as multiple inheritance, but without the problems associated
    with multiple inheritance. Multiple inheritance is often used to combine or share
    various functionality with multiple classes but it can make the code complex and
    ambiguous. A famous problem is the so called *diamond* problem shown in *Source
    8*:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Rust 中，没有 `class` 关键字，对象与 Python 的根本不同。Rust 使用特质系统来实现代码重用和多态，这可以带来与多重继承相同的好处，但没有多重继承所带来的问题。多重继承通常用于结合或共享多个类的各种功能，但它可能使代码变得复杂和模糊。一个著名的问题是
    *钻石* 问题，如 *来源 8* 所示：
- en: 'Source 8: The diamond problem: it is not clear which method is used.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 来源 8：钻石问题：不清楚使用了哪个方法。
- en: While I think we can easily work around this problem, if I would create a new
    language, I would also try to do this differently. For multiple inheritance, the
    goal was mostly to share similar functionality with other objects. This is done
    much more elegantly in Rust using the Trait system. This method is not unique
    to Rust as similar systems are used in Scala, Kotlin, and Haskell.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我认为我们可以很容易地解决这个问题，但如果我创建一种新的语言，我也会尝试以不同的方式来做。对于多重继承，目标主要是与其他对象共享相似的功能。在Rust中，通过使用Trait系统，这种方法做得更优雅。这种方法并不是Rust独有的，类似的系统也在Scala、Kotlin和Haskell中使用。
- en: 'Classes in Rust are created from Enums and Structs. On its own, these are only
    data structures but we can add functionality to these classes. We could do this
    directly, however, by using traits this functionality can be shared with multiple
    “classes”. A big benefit for using traits is that we can check beforehand if a
    certain trait is implemented. See the following example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Rust中的类是由枚举（Enums）和结构体（Structs）创建的。单独来看，这些只是数据结构，但我们可以向这些类添加功能。我们可以直接这样做，然而，通过使用特征，这些功能可以与多个“类”共享。使用特征的一个大好处是我们可以提前检查某个特征是否被实现。请参见以下示例：
- en: 'Source 9: Adding a shared trait to two structs.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 'Source 9: 为两个结构体添加一个共享特征。'
- en: 'In this example, we have a `Speaker` trait representing characters that can
    speak. We implement this trait for two types: `Jedi` and `Droid`. Each type provides
    its own implementation of the `speak` method.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们有一个`Speaker`特征，表示能够说话的角色。我们为两种类型`Jedi`和`Droid`实现了这个特征。每种类型都提供了自己对`speak`方法的实现。
- en: The `introduce` function takes any type that implements the `Speaker` trait
    and calls the `speak` method. In the `main` function, we create instances of `Jedi`
    (Obi-Wan Kenobi) and `Droid` (R2-D2) and pass them to the `introduce` function,
    showcasing polymorphism.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`introduce`函数接受任何实现了`Speaker`特征的类型，并调用`speak`方法。在`main`函数中，我们创建了`Jedi`（Obi-Wan
    Kenobi）和`Droid`（R2-D2）的实例，并将它们传递给`introduce`函数，展示了多态性。'
- en: For me, as a Pythonista [🐍](https://emojipedia.org/snake), the Rust trait system
    was very confusing. It took me a while to appreciate the elegance of the syntax.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，作为一个Pythonista [🐍](https://emojipedia.org/snake)，Rust的特征系统非常令人困惑。我花了一段时间才欣赏到其语法的优雅。
- en: Wrap up
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Rust is a very cool language but is definitely not an easy one to learn. The
    Rustlings course showed me a bit the basics, but I am by far not yet proficient
    enough to pick up big projects. But I really like how Rust is forcing you to write
    better and safer code.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Rust是一门非常酷的语言，但绝对不是一门容易学习的语言。Rustlings课程让我了解了一些基础知识，但我远远没有足够熟练来承担大型项目。但我真的很喜欢Rust如何迫使你编写更好、更安全的代码。
- en: Python will still be my daily driver. At work, our document pipe-line is built
    fully in Python and also in the machine learning world I do not see everything
    change to another language. Python is just too easy to learn and even if you are
    a terrible developer (not me of course (-;) you can get the job done.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Python仍然是我的日常使用语言。在工作中，我们的文档管道完全用Python构建，而且在机器学习领域，我看不到所有的东西都换成另一种语言。Python实在是太容易学习了，即使你是一个糟糕的开发者（当然不是我
    (-;)），你也可以完成工作。
- en: There is however a small momentum towards Rust. Of course, some packages like
    Polars and Pydantic are built using Rust, but also HuggingFace has released their
    own first version of a Machine Learning framework built in Rust called Candle.
    So I think it is not a bad idea to learn a bit of Rust!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Rust的势头正在小幅上升。当然，一些包如Polars和Pydantic是使用Rust构建的，但HuggingFace也发布了他们自己的第一个用Rust构建的机器学习框架版本，名为Candle。所以我认为学习一点Rust并不是一个坏主意！
- en: My next (or actually current) journey for Rust is participating in the [Advent
    of Code 2023](https://adventofcode.com/) using Rust. I am also looking into Leptos
    and plan to create a profile website. Still a lot to learn!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我下一步（或实际上是当前）Rust的旅程是使用Rust参与[Advent of Code 2023](https://adventofcode.com/)。我还在研究Leptos，并计划创建一个个人网站。还有很多东西需要学习！
- en: Please let me know if you have any comments! Feel free to connect on [LinkedIn](https://linkedin.com/in/dennisbakhuis).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有任何意见，请告诉我！欢迎在[LinkedIn](https://linkedin.com/in/dennisbakhuis)上联系。
