- en: How to Deploy Machine Learning models? End-to-End Dog Breed Identification Project!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何部署机器学习模型？端到端的狗品种识别项目！
- en: 原文：[https://towardsdatascience.com/how-to-deploy-machine-learning-models-end-to-end-dog-breed-identification-project-5689457d8973](https://towardsdatascience.com/how-to-deploy-machine-learning-models-end-to-end-dog-breed-identification-project-5689457d8973)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-deploy-machine-learning-models-end-to-end-dog-breed-identification-project-5689457d8973](https://towardsdatascience.com/how-to-deploy-machine-learning-models-end-to-end-dog-breed-identification-project-5689457d8973)
- en: Simplest way to deploy your ML model on the web.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在网上部署你的 ML 模型的最简单方法。
- en: '[](https://medium.com/@gkeretchashvili?source=post_page-----5689457d8973--------------------------------)[![Gurami
    Keretchashvili](../Images/4da78f113a0046c2deb8224e09dd9e3d.png)](https://medium.com/@gkeretchashvili?source=post_page-----5689457d8973--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5689457d8973--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5689457d8973--------------------------------)
    [Gurami Keretchashvili](https://medium.com/@gkeretchashvili?source=post_page-----5689457d8973--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@gkeretchashvili?source=post_page-----5689457d8973--------------------------------)[![Gurami
    Keretchashvili](../Images/4da78f113a0046c2deb8224e09dd9e3d.png)](https://medium.com/@gkeretchashvili?source=post_page-----5689457d8973--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5689457d8973--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5689457d8973--------------------------------)
    [Gurami Keretchashvili](https://medium.com/@gkeretchashvili?source=post_page-----5689457d8973--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5689457d8973--------------------------------)
    ·9 min read·Apr 3, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----5689457d8973--------------------------------)
    ·9分钟阅读·2023年4月3日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '**I. Introduction**'
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**I. 介绍**'
- en: In this article I will discuss step-by-step tutorial about the easiest and fastest
    way to deploy your ML project on the web using Streamlit. The project is about
    dog breed identification, which classifies a dog out of 120 types of breeds. I
    will focus more on the deployment part of the project, rather than building a
    complex machine learning model.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将逐步讲解使用 Streamlit 部署你的 ML 项目到网上的最简单和最快的方法。这个项目是关于狗品种识别的，它可以将狗分类到 120
    种品种中。我将更多关注于项目的部署部分，而不是构建复杂的机器学习模型。
- en: 'Before discussing any further, let’s see the demo of the project below:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步讨论之前，让我们看看下面的项目演示：
- en: '![](../Images/89db508f88f224db73a88ad654bbe646.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/89db508f88f224db73a88ad654bbe646.png)'
- en: Deployment Demo (gif by the author)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 部署演示（作者制作的 gif）
- en: You can play with the demo — [**HERE**](https://gurokeretcha-dog-breed-identifier-streamlit-7itzp9.streamlit.app/?fbclid=IwAR0qdSoSi9_vXFYbggB44sZI4lbUjHcnUxOpBVTCBBJ8-Nrg6tr5tWmh_iI),
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在演示中尝试— [**这里**](https://gurokeretcha-dog-breed-identifier-streamlit-7itzp9.streamlit.app/?fbclid=IwAR0qdSoSi9_vXFYbggB44sZI4lbUjHcnUxOpBVTCBBJ8-Nrg6tr5tWmh_iI),
- en: The GitHub link of the project is available-[**HERE**](https://github.com/gurokeretcha/Dog-Breed-Identifier)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的 GitHub 链接在-[**这里**](https://github.com/gurokeretcha/Dog-Breed-Identifier)
- en: '**Outline of the article:**'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**文章大纲：**'
- en: '**Background**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**背景**'
- en: '**Project tutorial** A. Build and Train model (Build_AND_Save_DL_model.ipynb)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目教程** A. 构建和训练模型 (Build_AND_Save_DL_model.ipynb)'
- en: B. Streamlit application (streamlit.py)
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: B. Streamlit 应用程序 (streamlit.py)
- en: C. Deployment
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C. 部署
- en: '**Common errors and troubleshooting**'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常见错误和故障排除**'
- en: '**Conclusion and future work**'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结论和未来工作**'
- en: '**II. Background**'
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**II. 背景**'
- en: Building machine learning model in the Jupyter notebook is one thing and deploying
    the model is — another, that requires creating a service that another user can
    access over the internet. There are plenty of methods and tools to deploy an ML
    model, such as building REST API with lightweight web framework like Flask or
    Django. The API can be called from a web or mobile application to get prediction
    from the model. In addition, you can deploy ML models as serverless functions
    using platforms such as Google Cloud Functions or AWS Lambda. Also, you can package
    machine learning model and dependencies into a docker container and deploy it
    to a certain management platform such as Docker Swarm or Kubernetes. Deployment
    options are depend on project needs, such as budget, scalability and performance.
    Based on these needs, the developer should choose the methods. In our case, we
    build a machine learning model using Streamlit, which is a python framework for
    building data science web applications. We will also use the same free Streamlit
    platform to host it.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter 笔记本中构建机器学习模型是一回事，而部署模型则是另一回事，这需要创建一个服务，供其他用户通过互联网访问。部署 ML 模型的方法和工具有很多，例如使用像
    Flask 或 Django 这样的轻量级网络框架构建 REST API。该 API 可以从网页或移动应用程序中调用以获取模型的预测。此外，你还可以使用如
    Google Cloud Functions 或 AWS Lambda 这样的平台将 ML 模型部署为无服务器函数。同时，你还可以将机器学习模型及其依赖项打包到
    Docker 容器中，并将其部署到 Docker Swarm 或 Kubernetes 等管理平台。部署选项取决于项目需求，如预算、可扩展性和性能。根据这些需求，开发者应选择适当的方法。在我们的案例中，我们使用
    Streamlit 构建机器学习模型，Streamlit 是一个用于构建数据科学网页应用程序的 Python 框架。我们还将使用相同的免费 Streamlit
    平台来托管它。
- en: '**III. Project tutorial**'
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**III. 项目教程**'
- en: The project repository contains following files/folders.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 项目库包含以下文件/文件夹。
- en: '![](../Images/1e85e3b72856b7d93d6d987af2845c46.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1e85e3b72856b7d93d6d987af2845c46.png)'
- en: Project directory (Image by the author)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 项目目录（图片由作者提供）
- en: '**Two important files:**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**两个重要的文件：**'
- en: A. Build_AND_Save_DL_model.ipynb -> train and save ML model.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: A. Build_AND_Save_DL_model.ipynb -> 训练和保存机器学习模型。
- en: B. Streamlit.py -> Build interactive web app using Streamlit and make custom
    prediction.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: B. Streamlit.py -> 使用 Streamlit 构建交互式网页应用程序并进行自定义预测。
- en: '**Other files/folders:**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**其他文件/文件夹：**'
- en: data -> The folder stores custom datasets and dog breed names (Training dataset
    is large you can [download](https://www.kaggle.com/datasets/jessicali9530/stanford-dogs-dataset)
    it from Kaggle directly)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: data -> 该文件夹存储自定义数据集和狗品种名称（训练数据集较大，你可以从 Kaggle 直接[下载](https://www.kaggle.com/datasets/jessicali9530/stanford-dogs-dataset)）
- en: pretrained_models -> Stores pretrained fine tuned efficientnet3 model.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pretrained_models -> 存储预训练的精细调整过的 efficientnet3 模型。
- en: README.md -> Text about project information
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: README.md -> 项目相关信息的文本
- en: custom_prediction.ipynb -> (Optional) Experimental Jupiter notebook which does
    custom inference on the pretrained model.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: custom_prediction.ipynb -> （可选）实验性 Jupyter 笔记本，用于对预训练模型进行自定义推理。
- en: requirements.txt -> Package requirements to make inference on the Streamlit
    website.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: requirements.txt -> 用于在 Streamlit 网站上进行推理的包需求。
- en: A. [**Build_AND_Save_DL_model.ipynb**](https://github.com/gurokeretcha/Dog-Breed-Identifier/blob/main/Build_AND_Save_DL_model.ipynb)
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A. [**Build_AND_Save_DL_model.ipynb**](https://github.com/gurokeretcha/Dog-Breed-Identifier/blob/main/Build_AND_Save_DL_model.ipynb)
- en: '**Import libraries and helper functions.**'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导入库和辅助函数。**'
- en: I used google Colab which has python libraries already installed.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了已经安装了 Python 库的 Google Colab。
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you try to train the model locally, make sure you create a new python virtual
    environment using batch script:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试在本地训练模型，确保使用批处理脚本创建一个新的 python 虚拟环境：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: and then install libraries in order not to happen package dependencies issues.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后安装库，以避免包依赖问题。
- en: '**2\. Understand the data**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 理解数据**'
- en: Building ML models is important, but beforehand it is crucial to visualize the
    data and its statistics. Let’s see what is the total number of training and test
    samples and total number of dog breed. Also, we visualize each dog breed frequency.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 构建机器学习模型很重要，但在此之前，关键是要可视化数据及其统计信息。让我们看看训练样本和测试样本的总数，以及狗的品种总数。同时，我们还可视化每个狗品种的频率。
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/4a40f3dbb08fc26e145f986e203f71a0.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4a40f3dbb08fc26e145f986e203f71a0.png)'
- en: Output result (Image by the author)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果（图片由作者提供）
- en: '![](../Images/f389f47e6c02931669a117cbafc9af15.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f389f47e6c02931669a117cbafc9af15.png)'
- en: Each dog breed count (Image by the author)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 每个狗品种的计数（图片由作者提供）
- en: '**3\. Create Structured of the data**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**3\. 创建数据结构**'
- en: The raw data only contained images of all the breeds in one folder, therefore,
    I created each folder for each breed to create a specific format to store the
    data and load it later.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 原始数据只包含一个文件夹中的所有品种的图像，因此，我为每个品种创建了一个文件夹，以创建特定格式来存储数据，并在后续加载。
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**4\. Visualize Random Images**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**4\. 可视化随机图像**'
- en: Here I just visualize the training random training images.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我只是可视化随机训练图像。
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/faf7af56e247d3624651614988a59193.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/faf7af56e247d3624651614988a59193.png)'
- en: Dog images (image by the author)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 狗的图像（图像由作者提供）
- en: '**5\. Get The Data**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**5\. 获取数据**'
- en: As we created specific data storing format, we can easily generate tensorflow
    dataset from the image folder.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们创建了特定的数据存储格式，因此我们可以轻松地从图像文件夹生成tensorflow数据集。
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**6\. Train the model**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**6\. 训练模型**'
- en: I use several data augmentation techniques, such as RandomFlip, RandomCrop,
    Randomrotation, etc. Also, I use two callbacks, such as reduce the learning rate
    callback, that reduces learning rate when validation accuracy stops improving
    and early stopping, which stops training after validation accuracy does not improve
    anymore. Reduce learning rate helps the model to converge more slowly and therefore
    potentially find a better and more generalizable solution. Whereas, early stopping
    helps the model to avoid overfitting and stop training earlier. As for the ML
    model architecture, I used pretrained EfficientNetB3 model and then I fine tuned
    with our new data. EfficientNetB3 is a convolutional neural network architecture
    that was proposed in 2019 by Tan et al. that achieved state-of-the-art accuracy
    while using fewer parameters and less computational resources than other ML models.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了几种数据增强技术，如 RandomFlip、RandomCrop、Randomrotation 等。同时，我使用了两个回调函数，如减少学习率回调，它会在验证准确率停止提高时减少学习率，以及早停法，它会在验证准确率不再提高时停止训练。减少学习率有助于模型更慢地收敛，从而潜在地找到更好且更具泛化能力的解决方案。而早停法则有助于模型避免过拟合，提前停止训练。至于
    ML 模型架构，我使用了预训练的 EfficientNetB3 模型，然后用我们的新数据进行微调。EfficientNetB3 是一种卷积神经网络架构，由
    Tan 等人在 2019 年提出，使用较少的参数和计算资源而达到最先进的准确率。
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/d0f8bdaabb873021674d81858eea51da.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d0f8bdaabb873021674d81858eea51da.png)'
- en: Training result (Image by the author)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 训练结果（图像由作者提供）
- en: '**7\. Save the model and class names**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**7\. 保存模型和类名**'
- en: This is the last step. After fine tuning the model, I saved the trained model
    and breed names to use them later.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最后一步。微调模型后，我保存了训练好的模型和品种名称，以便后续使用。
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: B. [**Streamlit.py**](https://github.com/gurokeretcha/Dog-Breed-Identifier/blob/main/streamlit.py)
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: B. [**Streamlit.py**](https://github.com/gurokeretcha/Dog-Breed-Identifier/blob/main/streamlit.py)
- en: '**Import libraries, pretrained model and breed class names**'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导入库、预训练模型和品种类名**'
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**2\. Create web app**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 创建网页应用**'
- en: I create an interactive web interface with the Streamlit scripts. I create the
    title of the web and file uploader object.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用Streamlit脚本创建了一个互动式网页界面。我创建了网页的标题和文件上传对象。
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**3\. Make prediction**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**3\. 进行预测**'
- en: When the file is uploaded, the image is first resized and then fed into the
    loaded pretrained model. If the prediction confidence score is more than 50%,
    one prediction result will be shown at the top of the image, but if the maximum
    confidence is less than 50%, two results based on the top two highest confidence
    scores. At the end of the website, there is a list of all 120 available dog breeds
    that our model knows.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当文件上传后，图像首先被调整大小，然后输入到加载的预训练模型中。如果预测的置信度分数超过 50%，则会在图像顶部显示一个预测结果；如果最大置信度低于 50%，则会基于前两个最高置信度分数显示两个结果。在网站的末尾，有一个包含我们模型知道的所有
    120 个狗品种的列表。
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can visualize result in a local host by running the bash command
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行bash命令在本地主机上可视化结果
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: C. **Deployment**
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C. **部署**
- en: As all the project is created locally, now it is time to deploy it on the web.
    This step is so easy.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有项目都是在本地创建的，现在是时候将其部署到网上了。这一步非常简单。
- en: '**Upload to GitHub**'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**上传到 GitHub**'
- en: 'First, we upload the following files/folders:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们上传以下文件/文件夹：
- en: Streamlit.py,
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Streamlit.py，
- en: pretrained_models/EfficientNetB3_Model.h5
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pretrained_models/EfficientNetB3_Model.h5
- en: data/class_names
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: data/class_names
- en: requirements.txt
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: requirements.txt
- en: in a GitHub repository.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 存储库中。
- en: '**2\. Connect GitHub repository to** [**Streamlit**](https://streamlit.io/)**.**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 将 GitHub 存储库连接到** [**Streamlit**](https://streamlit.io/)**.**'
- en: After that, log in [Streamlit](https://streamlit.io/) website, create account
    and press ‘New app’
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，登录[Streamlit](https://streamlit.io/)网站，创建账户并点击“新建应用”
- en: '![](../Images/c5dbbe7a3803aed6d5dfc17aa6b76bdd.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c5dbbe7a3803aed6d5dfc17aa6b76bdd.png)'
- en: Streamlit platform (image by the author)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit平台（图片来自作者）
- en: and we just follow instructions
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需按照指示操作。
- en: '![](../Images/332ce9334a2068e96b10bf81fb6bc090.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/332ce9334a2068e96b10bf81fb6bc090.png)'
- en: New app instructions on Streamlit (image by the author)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit的新应用程序说明（图片来自作者）
- en: IV. Common errors and troubleshooting
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IV. 常见错误与故障排除
- en: Here are some most probable error and proposed solution during building a project.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是构建项目过程中一些最可能的错误和建议的解决方案。
- en: 'Packaging dependency issue: It might happen if you training the model locally,
    make sure to create python virtual environment and then install the libraries.'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包依赖问题：如果你在本地训练模型，可能会遇到此问题，请确保创建python虚拟环境，然后安装库。
- en: 'Packaging bugs: When using Google Colab, some Tensorflow versions had issue
    during saving a model, therefore use version 2.9.1 of Tesnorflow in Google Colab.'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包错误：使用Google Colab时，某些Tensorflow版本在保存模型时会出现问题，因此在Google Colab中使用Tensorflow版本2.9.1。
- en: 'Streamlit application does not work after connecting the GitHub account: It
    is mainly because of lack of packages. Make sure you have requirements.txt file
    uploaded in the GitHub with specific packages. Streamlit will automatically look
    for the file and install all the required packages to run the application.'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接GitHub账户后Streamlit应用程序无法正常工作：这主要是因为缺少包。请确保在GitHub中上传了包含特定包的requirements.txt文件。Streamlit将自动查找该文件并安装所有运行应用程序所需的包。
- en: V. Conclusion and future work
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: V. 结论与未来工作
- en: In summary, I have developed a simple deep learning model that identifies dog
    out of 120 breeds. Also, I hosted the model on the web using Streamlit. The model
    achieves about 94% accuracy on validation data, which is a pretty decent result.
    Even though the model works well, it has some drawbacks. For example, the model
    confidence score is not calibrated, that means that the confidence score does
    not represent real prediction probability. Also, the model only knows 120 dog
    breeds, so it can not identify all the dog breeds. In addition, the model does
    not know when it does not know. For example, if you upload the image of an airplane,
    the model can not tell you that it is not a dog. I will try to overcome these
    issues in a later version of the application.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我开发了一个简单的深度学习模型，可以从120种狗品种中识别出狗。此外，我使用Streamlit将模型托管在网上。该模型在验证数据上的准确率约为94%，这是一个相当不错的结果。尽管模型运行良好，但也存在一些缺点。例如，模型的置信度评分没有校准，即置信度评分不能代表真实的预测概率。此外，模型只知道120种狗的品种，因此无法识别所有狗品种。此外，模型不知道自己不知道的情况。例如，如果你上传一张飞机的图片，模型无法告诉你那不是一只狗。我将尝试在应用程序的后续版本中克服这些问题。
- en: I hope you enjoyed it and now can start creating beautiful apps yourself. If
    you have any questions or would like to share your thoughts about this article,
    feel free to comment, I will be happy to answer.
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 希望你喜欢这篇文章，现在可以开始自己创建漂亮的应用程序了。如果你有任何问题或想分享对这篇文章的看法，随时评论，我会很乐意回答。
- en: ''
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you want to support my work directly and also get unlimited access on Medium
    articles, become a Medium member using my [referral link](https://medium.com/@gkeretchashvili/membership)
    here. Thank you a million times and have a nice day!
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你想直接支持我的工作并且获得Medium文章的无限制访问权限，请通过我的[推荐链接](https://medium.com/@gkeretchashvili/membership)成为Medium会员。非常感谢，祝你有美好的一天！
- en: '[](https://medium.com/@gkeretchashvili/membership?source=post_page-----5689457d8973--------------------------------)
    [## Join Medium with my referral link - Gurami Keretchashvili'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@gkeretchashvili/membership?source=post_page-----5689457d8973--------------------------------)
    [## 使用我的推荐链接加入Medium - Gurami Keretchashvili'
- en: Read every story from Gurami Keretchashvili (and thousands of other writers
    on Medium). Your membership fee directly…
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读Gurami Keretchashvili的每个故事（以及Medium上的其他数千位作者的故事）。你的会员费直接…
- en: medium.com](https://medium.com/@gkeretchashvili/membership?source=post_page-----5689457d8973--------------------------------)
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@gkeretchashvili/membership?source=post_page-----5689457d8973--------------------------------)
