- en: How to Deploy Machine Learning models? End-to-End Dog Breed Identification Project!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-deploy-machine-learning-models-end-to-end-dog-breed-identification-project-5689457d8973](https://towardsdatascience.com/how-to-deploy-machine-learning-models-end-to-end-dog-breed-identification-project-5689457d8973)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Simplest way to deploy your ML model on the web.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@gkeretchashvili?source=post_page-----5689457d8973--------------------------------)[![Gurami
    Keretchashvili](../Images/4da78f113a0046c2deb8224e09dd9e3d.png)](https://medium.com/@gkeretchashvili?source=post_page-----5689457d8973--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5689457d8973--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5689457d8973--------------------------------)
    [Gurami Keretchashvili](https://medium.com/@gkeretchashvili?source=post_page-----5689457d8973--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5689457d8973--------------------------------)
    ·9 min read·Apr 3, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '**I. Introduction**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article I will discuss step-by-step tutorial about the easiest and fastest
    way to deploy your ML project on the web using Streamlit. The project is about
    dog breed identification, which classifies a dog out of 120 types of breeds. I
    will focus more on the deployment part of the project, rather than building a
    complex machine learning model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before discussing any further, let’s see the demo of the project below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/89db508f88f224db73a88ad654bbe646.png)'
  prefs: []
  type: TYPE_IMG
- en: Deployment Demo (gif by the author)
  prefs: []
  type: TYPE_NORMAL
- en: You can play with the demo — [**HERE**](https://gurokeretcha-dog-breed-identifier-streamlit-7itzp9.streamlit.app/?fbclid=IwAR0qdSoSi9_vXFYbggB44sZI4lbUjHcnUxOpBVTCBBJ8-Nrg6tr5tWmh_iI),
  prefs: []
  type: TYPE_NORMAL
- en: The GitHub link of the project is available-[**HERE**](https://github.com/gurokeretcha/Dog-Breed-Identifier)
  prefs: []
  type: TYPE_NORMAL
- en: '**Outline of the article:**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Background**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project tutorial** A. Build and Train model (Build_AND_Save_DL_model.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: B. Streamlit application (streamlit.py)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: C. Deployment
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Common errors and troubleshooting**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Conclusion and future work**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**II. Background**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building machine learning model in the Jupyter notebook is one thing and deploying
    the model is — another, that requires creating a service that another user can
    access over the internet. There are plenty of methods and tools to deploy an ML
    model, such as building REST API with lightweight web framework like Flask or
    Django. The API can be called from a web or mobile application to get prediction
    from the model. In addition, you can deploy ML models as serverless functions
    using platforms such as Google Cloud Functions or AWS Lambda. Also, you can package
    machine learning model and dependencies into a docker container and deploy it
    to a certain management platform such as Docker Swarm or Kubernetes. Deployment
    options are depend on project needs, such as budget, scalability and performance.
    Based on these needs, the developer should choose the methods. In our case, we
    build a machine learning model using Streamlit, which is a python framework for
    building data science web applications. We will also use the same free Streamlit
    platform to host it.
  prefs: []
  type: TYPE_NORMAL
- en: '**III. Project tutorial**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The project repository contains following files/folders.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1e85e3b72856b7d93d6d987af2845c46.png)'
  prefs: []
  type: TYPE_IMG
- en: Project directory (Image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: '**Two important files:**'
  prefs: []
  type: TYPE_NORMAL
- en: A. Build_AND_Save_DL_model.ipynb -> train and save ML model.
  prefs: []
  type: TYPE_NORMAL
- en: B. Streamlit.py -> Build interactive web app using Streamlit and make custom
    prediction.
  prefs: []
  type: TYPE_NORMAL
- en: '**Other files/folders:**'
  prefs: []
  type: TYPE_NORMAL
- en: data -> The folder stores custom datasets and dog breed names (Training dataset
    is large you can [download](https://www.kaggle.com/datasets/jessicali9530/stanford-dogs-dataset)
    it from Kaggle directly)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pretrained_models -> Stores pretrained fine tuned efficientnet3 model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: README.md -> Text about project information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: custom_prediction.ipynb -> (Optional) Experimental Jupiter notebook which does
    custom inference on the pretrained model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: requirements.txt -> Package requirements to make inference on the Streamlit
    website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A. [**Build_AND_Save_DL_model.ipynb**](https://github.com/gurokeretcha/Dog-Breed-Identifier/blob/main/Build_AND_Save_DL_model.ipynb)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Import libraries and helper functions.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I used google Colab which has python libraries already installed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you try to train the model locally, make sure you create a new python virtual
    environment using batch script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: and then install libraries in order not to happen package dependencies issues.
  prefs: []
  type: TYPE_NORMAL
- en: '**2\. Understand the data**'
  prefs: []
  type: TYPE_NORMAL
- en: Building ML models is important, but beforehand it is crucial to visualize the
    data and its statistics. Let’s see what is the total number of training and test
    samples and total number of dog breed. Also, we visualize each dog breed frequency.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4a40f3dbb08fc26e145f986e203f71a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Output result (Image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f389f47e6c02931669a117cbafc9af15.png)'
  prefs: []
  type: TYPE_IMG
- en: Each dog breed count (Image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. Create Structured of the data**'
  prefs: []
  type: TYPE_NORMAL
- en: The raw data only contained images of all the breeds in one folder, therefore,
    I created each folder for each breed to create a specific format to store the
    data and load it later.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**4\. Visualize Random Images**'
  prefs: []
  type: TYPE_NORMAL
- en: Here I just visualize the training random training images.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/faf7af56e247d3624651614988a59193.png)'
  prefs: []
  type: TYPE_IMG
- en: Dog images (image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: '**5\. Get The Data**'
  prefs: []
  type: TYPE_NORMAL
- en: As we created specific data storing format, we can easily generate tensorflow
    dataset from the image folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**6\. Train the model**'
  prefs: []
  type: TYPE_NORMAL
- en: I use several data augmentation techniques, such as RandomFlip, RandomCrop,
    Randomrotation, etc. Also, I use two callbacks, such as reduce the learning rate
    callback, that reduces learning rate when validation accuracy stops improving
    and early stopping, which stops training after validation accuracy does not improve
    anymore. Reduce learning rate helps the model to converge more slowly and therefore
    potentially find a better and more generalizable solution. Whereas, early stopping
    helps the model to avoid overfitting and stop training earlier. As for the ML
    model architecture, I used pretrained EfficientNetB3 model and then I fine tuned
    with our new data. EfficientNetB3 is a convolutional neural network architecture
    that was proposed in 2019 by Tan et al. that achieved state-of-the-art accuracy
    while using fewer parameters and less computational resources than other ML models.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d0f8bdaabb873021674d81858eea51da.png)'
  prefs: []
  type: TYPE_IMG
- en: Training result (Image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: '**7\. Save the model and class names**'
  prefs: []
  type: TYPE_NORMAL
- en: This is the last step. After fine tuning the model, I saved the trained model
    and breed names to use them later.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: B. [**Streamlit.py**](https://github.com/gurokeretcha/Dog-Breed-Identifier/blob/main/streamlit.py)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Import libraries, pretrained model and breed class names**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**2\. Create web app**'
  prefs: []
  type: TYPE_NORMAL
- en: I create an interactive web interface with the Streamlit scripts. I create the
    title of the web and file uploader object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**3\. Make prediction**'
  prefs: []
  type: TYPE_NORMAL
- en: When the file is uploaded, the image is first resized and then fed into the
    loaded pretrained model. If the prediction confidence score is more than 50%,
    one prediction result will be shown at the top of the image, but if the maximum
    confidence is less than 50%, two results based on the top two highest confidence
    scores. At the end of the website, there is a list of all 120 available dog breeds
    that our model knows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You can visualize result in a local host by running the bash command
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: C. **Deployment**
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As all the project is created locally, now it is time to deploy it on the web.
    This step is so easy.
  prefs: []
  type: TYPE_NORMAL
- en: '**Upload to GitHub**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we upload the following files/folders:'
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit.py,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pretrained_models/EfficientNetB3_Model.h5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data/class_names
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: requirements.txt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in a GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: '**2\. Connect GitHub repository to** [**Streamlit**](https://streamlit.io/)**.**'
  prefs: []
  type: TYPE_NORMAL
- en: After that, log in [Streamlit](https://streamlit.io/) website, create account
    and press ‘New app’
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c5dbbe7a3803aed6d5dfc17aa6b76bdd.png)'
  prefs: []
  type: TYPE_IMG
- en: Streamlit platform (image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: and we just follow instructions
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/332ce9334a2068e96b10bf81fb6bc090.png)'
  prefs: []
  type: TYPE_IMG
- en: New app instructions on Streamlit (image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: IV. Common errors and troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some most probable error and proposed solution during building a project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Packaging dependency issue: It might happen if you training the model locally,
    make sure to create python virtual environment and then install the libraries.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Packaging bugs: When using Google Colab, some Tensorflow versions had issue
    during saving a model, therefore use version 2.9.1 of Tesnorflow in Google Colab.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Streamlit application does not work after connecting the GitHub account: It
    is mainly because of lack of packages. Make sure you have requirements.txt file
    uploaded in the GitHub with specific packages. Streamlit will automatically look
    for the file and install all the required packages to run the application.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: V. Conclusion and future work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In summary, I have developed a simple deep learning model that identifies dog
    out of 120 breeds. Also, I hosted the model on the web using Streamlit. The model
    achieves about 94% accuracy on validation data, which is a pretty decent result.
    Even though the model works well, it has some drawbacks. For example, the model
    confidence score is not calibrated, that means that the confidence score does
    not represent real prediction probability. Also, the model only knows 120 dog
    breeds, so it can not identify all the dog breeds. In addition, the model does
    not know when it does not know. For example, if you upload the image of an airplane,
    the model can not tell you that it is not a dog. I will try to overcome these
    issues in a later version of the application.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you enjoyed it and now can start creating beautiful apps yourself. If
    you have any questions or would like to share your thoughts about this article,
    feel free to comment, I will be happy to answer.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you want to support my work directly and also get unlimited access on Medium
    articles, become a Medium member using my [referral link](https://medium.com/@gkeretchashvili/membership)
    here. Thank you a million times and have a nice day!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://medium.com/@gkeretchashvili/membership?source=post_page-----5689457d8973--------------------------------)
    [## Join Medium with my referral link - Gurami Keretchashvili'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Gurami Keretchashvili (and thousands of other writers
    on Medium). Your membership fee directly…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@gkeretchashvili/membership?source=post_page-----5689457d8973--------------------------------)
  prefs: []
  type: TYPE_NORMAL
