["```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Generate synthetic data with outliers\nnp.random.seed(42)\nnormal_data = np.random.normal(loc=50, scale=10, size=100)\noutliers = np.random.normal(loc=15, scale=5, size=10)\n\n# Combine normal data with outliers\ndata = np.concatenate((normal_data, outliers))\n\n# Visualize data using a scatter plot\nfig, ax = plt.subplots(figsize=(8, 6))\nax.scatter(range_1, normal_data, color=sns.color_palette(\"hls\",24)[7], alpha=.9, label='Normal Data')\nax.scatter(range_2, outliers, color=sns.color_palette(\"hls\",24)[0], alpha=.9, label='Outliers')\nax.set_xlabel('Index')\nax.set_ylabel('Value')\nax.set_title('Scatter Plot')\nax.spines['top'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.xaxis.set_ticks_position('none') \nax.yaxis.set_ticks_position('none')\nplt.legend()\nplt.show()\n```", "```py\n# Visualize data using a box plot\nfig, ax = plt.subplots(figsize=(8, 6))\nb_plot = ax.boxplot(data, vert=True, patch_artist=True, notch=True)\nax.set_ylabel('Value')\nax.set_title('Box Plot')\nax.spines['top'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.xaxis.set_ticks_position('none') \nax.yaxis.set_ticks_position('none')\nax.xaxis.set_ticks([])\n# Color the box\nfor box in b_plot['boxes']:\n    box.set_facecolor(sns.color_palette(\"hls\",24)[12])\n```", "```py\n# Visualize data using a violin plot\nfig, ax = plt.subplots(figsize=(8, 6))\nv_plot = ax.violinplot(data, vert=True, showmedians=True, showextrema=False)\nax.set_ylabel('Value')\nax.set_title('Violin Plot')\nax.spines['top'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.xaxis.set_ticks_position('none') \nax.yaxis.set_ticks_position('none')\nax.xaxis.set_ticks([])\n# Color the violin\nfor pc in v_plot['bodies']:\n    pc.set_facecolor(sns.color_palette(\"hls\",24)[7])\n    pc.set_edgecolor('black')\n    pc.set_alpha(.8)\n```", "```py\nimport numpy as np\n\n# Generate a random dataset with outliers (100 normal points and 10 outliers)\nnp.random.seed(42)\ndata = np.concatenate((np.random.normal(loc=50, scale=10, size=100), \n                        np.random.normal(loc=110, scale=20, size=10)))\n\n# Calculate mean and standard deviation\nmean_data = np.mean(data)\nstd_dev = np.std(data)\n\n# Set Z-score threshold (typically 2 or 3)\nz_score_threshold = 2\n\n# Identify outliers using Z-score\noutliers = [value for value in data if (value - mean_data) / std_dev > z_score_threshold]\n```", "```py\nimport numpy as np\n\n# Generate a random dataset with outliers (100 normal points and 10 outliers)\nnp.random.seed(42)\ndata = np.concatenate((np.random.normal(loc=50, scale=10, size=100), \n                        np.random.normal(loc=110, scale=20, size=10)))\n\n# Calculate Q1 and Q3\nQ1 = np.percentile(data, 25)\nQ3 = np.percentile(data, 75)\n\n# Calculate IQR\nIQR = Q3 - Q1\n\n# Set lower and upper bounds for outliers\nlower_bound = Q1 - 1.5 * IQR\nupper_bound = Q3 + 1.5 * IQR\n\n# Identify outliers using IQR method\noutliers = [value for value in data if value < lower_bound or value > upper_bound]\n```", "```py\nfrom sklearn.ensemble import IsolationForest\nimport numpy as np\n\n# Generate synthetic data with outliers\nnp.random.seed(42)\nnormal_data = np.random.normal(loc=50, scale=10, size=10000)\noutliers = np.random.normal(loc=20, scale=5, size=1000)\ndata = np.concatenate((normal_data, outliers)).reshape(-1, 1)\n\nnp.random.shuffle(data)\n\n# Apply Isolation Forest for outlier detection\nclf = IsolationForest(contamination=0.1, random_state=42)\nclf.fit(data)\n\n# Predict outliers\noutlier_preds = clf.predict(data)\noutliers_indices = np.where(outlier_preds == -1) \n```", "```py\nfrom sklearn.neighbors import LocalOutlierFactor\nimport numpy as np\n\n# Generate synthetic data with outliers\nnp.random.seed(42)\nnormal_data = np.random.normal(loc=50, scale=10, size=10000)\noutliers = np.random.normal(loc=20, scale=5, size=1000)\ndata = np.concatenate((normal_data, outliers)).reshape(-1, 1)\n\nnp.random.shuffle(data)\n\n# Apply Local Outlier Factor (LOF) for outlier detection\nclf = LocalOutlierFactor(n_neighbors=20, contamination=0.1)\noutlier_preds = clf.fit_predict(data)\n\n# Identify outlier indices\noutliers_indices = np.where(outlier_preds == -1)\n```"]