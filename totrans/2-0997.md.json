["```py\ngcloud auth application-default login --scopes=https://www.googleapis.com/auth/spreadsheets,https://www.googleapis.com/auth/drive,https://www.googleapis.com/auth/iam.test\n```", "```py\n$ python3 -m pip install google-api-python-client\n```", "```py\nhttps://docs.google.com/spreadsheets/d/abc-defg-1234/edit#gid=0 \n```", "```py\nhttps://docs.google.com/spreadsheets/d/spreadsheetId/edit#gid=0\n```", "```py\ngoogle_sheet_ids = [\n  'abc-1234',\n  'def-5678',\n  'ghi-9123',\n]\n```", "```py\nimport google.auth\nfrom googleapiclient.discovery import build \n\ndef create_service() -> Resource:\n    \"\"\"\n    Creates a Google Drive (v3) service to interact with the API\n    \"\"\"\n    scopes = [\n        'https://www.googleapis.com/auth/spreadsheets',\n        'https://www.googleapis.com/auth/drive',\n    ]\n\n    creds, project_id = google.auth.default(scopes=scopes)\n    service = build('drive', 'v3', credentials=creds, cache_discovery=False)\n\n    return service\n```", "```py\nfrom dataclasses import dataclass\n\n@dataclass\nclass Permission:\n    \"\"\"\n    Class that corresponds to the `permission` REST resource\n    https://developers.google.com/drive/api/reference/rest/v3/permissions#Permission\n    \"\"\"\n    type: str\n    role: str\n    emailAddress: str\n\n    def __post__init__(self):\n        \"\"\"Validate input\"\"\"\n        allowed_types = ['user', 'group', 'domain', 'anyone']\n        if self.type not in allowed_types:\n            raise ValueError(f'`{self.type}` is not a valid type. {allowed_types=}')\n\n        allowed_roles = ['commenter', 'reader', 'writer', 'fileOrganizer', 'organizer', 'owner']\n        if self.role not in allowed_roles:\n            raise ValueError(f'`{self.role}` is not a valid role. {allowed_roles=}')\n```", "```py\nfrom typing import Optional\n\nfrom googleapiclient.discovery import Resource\nfrom googleapiclient.errors import HttpError\n\ndef create_permission(\n    service: Resource,\n    permission: Permission,\n    file_id: str,\n    skip_on_failure: Optional[bool] = True,\n):\n    \"\"\"\n    Creates a new `permission` for the specified `file_id`\n    \"\"\"\n    logging.info(f'Creating new permission {permission} for {file_id=}')\n    try:\n        request = service.permissions().create(\n            fileId=file_id,\n            body=asdict(permission),\n            sendNotificationEmail=False,\n        )\n        response = request.execute()\n        logging.info(f'New permission for {file_id=}: {response=}')\n    except HttpError as error:\n        logging.error(f'An error has occurred while trying to grant {permission=} to {file_id=}')\n        logging.error(f'Error was: {error}')\n\n        if not skip_on_failure:\n            raise error\n```", "```py\ndef main():\n    google_sheet_ids = [\n        'abc-1234',\n        'def-5678',\n        'ghi-9123',\n    ]\n\n    service = create_service()\n    permission = Permission(type='user', role='writer', emailAddress='example@example.com')\n\n    for file_id in google_sheet_ids:\n        create_permission(service=service, permission=permission, file_id=file_id)\n```", "```py\nimport logging\nfrom dataclasses import asdict, dataclass\nfrom typing import Optional\n\nfrom googleapiclient.discovery import build, Resource\nfrom googleapiclient.errors import HttpError\nimport google.auth\n\nlogging.basicConfig(\n    format='[%(asctime)s] {%(pathname)s:%(lineno)d} %(levelname)s - %(message)s',\n    level=logging.INFO,\n)\n\ndef create_service() -> Resource:\n    \"\"\"\n    Creates a Google Drive (v3) service to interact with the API\n    \"\"\"\n    scopes = [\n        'https://www.googleapis.com/auth/spreadsheets',\n        'https://www.googleapis.com/auth/drive',\n    ]\n\n    creds, project_id = google.auth.default(scopes=scopes)\n    service = build('drive', 'v3', credentials=creds, cache_discovery=False)\n\n    return service\n\ndef create_permission(\n    service: Resource,\n    permission: Permission,\n    file_id: str,\n    skip_on_failure: Optional[bool] = True,\n):\n    \"\"\"\n    Creates a new `permission` for the specified `file_id`\n    \"\"\"\n    logging.info(f'Creating new permission {permission} for {file_id=}')\n    try:\n        request = service.permissions().create(\n            fileId=file_id,\n            body=asdict(permission),\n            sendNotificationEmail=False,\n        )\n        response = request.execute()\n        logging.info(f'New permission for {file_id=}: {response=}')\n    except HttpError as error:\n        logging.error(f'An error has occurred while trying to grant {permission=} to {file_id=}')\n        logging.error(f'Error was: {error}')\n\n        if not skip_on_failure:\n            raise error\n\ndef main():\n    google_sheet_ids = [\n        'abc-1234',\n        'def-5678',\n        'ghi-9123',\n    ]\n\n    service = create_service()\n    permission = Permission(type='user', role='writer', emailAddress='example@example.com')\n\n    for file_id in google_sheet_ids:\n        create_permission(service=service, permission=permission, file_id=file_id)\n\nif __name__ == '__main__':\n    main()\n```"]