["```py\ndef multiply(num_1, num_2):\n    return num_1 * num_2\n\nprint(multiply(3, 10))\nprint(multiply(\"a\", \"b\"))\n```", "```py\ndef multiply(num_1: int, num_2: int) -> int:\n    return num_1 * num_2\n\nprint(multiply(3, 10))\nprint(multiply(\"a\", \"b\"))\n```", "```py\ndef multiply(num_1, num_2):\n    return num_1 * num_2\n\nprint(multiply(3, 10))\nprint(multiply(\"a\", \"b\"))\n```", "```py\n[mypy]\nstrict = true\n```", "```py\ndef negate(value: bool) -> bool:\n    return not value\n\ndef multiply(multiplicand: int, multiplier: int) -> int:\n    return multiplicand * multiplier\n\ndef divide(dividend: float, divisor: float) -> float:\n    return dividend / divisor\n\ndef concat(str_a: str, str_b: str) -> str:\n    return str_a + \" \" + str_b\n\nprint(negate(True))\nprint(multiply(3, 10))\nprint(divide(10, 3))\nprint(concat(\"Hello\", \"world\"))\n```", "```py\ndef add_numbers(numbers: list[int]) -> int:\n    return sum(numbers)\n\ndef cardinality(numbers: set[int]) -> int:\n    return len(numbers)\n\ndef concat_values(value_dict: dict[str, float]) -> list[float]:\n    return [val for _, val in value_dict.items()]\n\nprint(add_numbers([1, 2, 3, 4]))\nprint(cardinality({1, 2, 3}))\nprint(concat_values({\"a\": 1.5, \"b\": 10}))\n```", "```py\nfrom typing import Dict, List, Set\n\ndef add_numbers(numbers: List[int]) -> int:\n    return sum(numbers)\n\ndef cardinality(numbers: Set[int]) -> int:\n    return len(numbers)\n\ndef concat_values(value_dict: Dict[str, float]) -> list[float]:\n    return [val for _, val in value_dict.items()]\n\nprint(add_numbers([1, 2, 3, 4]))\nprint(cardinality({1, 2, 3}))\nprint(concat_values({\"a\": 1.5, \"b\": 10}))\n```", "```py\nfrom typing import Union\n\ndef scan_list(elements: list[Union[str | int]]) -> None:\n    for el in elements:\n        if isinstance(el, str):\n            print(f\"I got a string! ({el})\")\n        elif isinstance(el, int):\n            print(f\"I got an int! ({el})\")\n        else:\n            # NOTE: we don't reach here because of mypy!\n            raise ValueError(f\"Unexpected element type {el}\")\n\nscan_list([1, \"hello\", \"world\", 100])\n```", "```py\ndef scan_list(elements: list[str | int]) -> None:\n    for el in elements:\n        if isinstance(el, str):\n            print(f\"I got a string! ({el})\")\n        elif isinstance(el, int):\n            print(f\"I got an int! ({el})\")\n        else:\n            # NOTE: we don't reach here because of mypy!\n            raise ValueError(f\"Unexpected element type {el}\")\n\nscan_list([1, \"hello\", \"world\", 100])\n```", "```py\ndef print_foo() -> None:\n    print(\"Foo\")\n\nprint_foo()\n```", "```py\nfrom typing import Optional\n\ndef square_number(x: Optional[int]) -> Optional[int]:\n    return x**2 if x is not None else None\n\nprint(square_number(14))\n```", "```py\ndef square_number(x: int | None) -> int | None:\n    return x**2 if x is not None else None\n\nprint(square_number(14))\n```", "```py\nfrom typing import Any\n\ndef print_everything(val: Any) -> None:\n    print(val)\n\nprint_everything(0)\nprint_everything(True)\nprint_everything(\"hello\")\n```", "```py\nint_var: int = 0\nfloat_var: float = 1.5\nstr_var: str = \"hello\"\n```", "```py\nclass SampleClass:\n    def __init__(self, x: int) -> None:\n        self.x = x\n\n    def get_x(self) -> int:\n        return self.x\n\nsample_class = SampleClass(5)\nprint(sample_class.get_x())\n```", "```py\nsample_class: SampleClass = SampleClass(5)\n```", "```py\nimport pathlib\n\ndef read_file(path: pathlib.Path) -> str:\n    with open(path, \"r\") as file:\n        return file.read()\n\nprint(read_file(pathlib.Path(\"mypy.ini\")))\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport numpy.typing as npt\n\ndef calc_np_sin(x: npt.NDArray[np.float32]) -> npt.NDArray[np.float32]:\n    return np.sin(x)\n\nx = np.linspace(0, 10, 100)\ny = calc_np_sin(x)\n\nplt.plot(x, y)\nplt.savefig(\"plot.png\")\n```", "```py\ndef calc_np_sin(x: npt.NDArray[np.float32]) -> npt.NDArray[np.float32]:\n    y: npt.NDArray[np.float32] = np.sin(x)\n    return y\n```", "```py\n[mypy-matplotlib.*]\nignore_missing_imports = True\nignore_errors = True\n```", "```py\ndef calc_np_sin(x: npt.NDArray[np.float32]) -> npt.NDArray[np.float32]:\n    return np.sin(x)  # type: ignore\n```"]