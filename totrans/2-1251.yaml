- en: How to Test Your Python Code with Pytest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-test-your-python-code-with-pytest-c8f055979dd7](https://towardsdatascience.com/how-to-test-your-python-code-with-pytest-c8f055979dd7)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Programming, Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Simplify your testing process and enhance code quality with Pytest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://alod83.medium.com/?source=post_page-----c8f055979dd7--------------------------------)[![Angelica
    Lo Duca](../Images/45aa2e2e504bb3af6d3b8009dc6f030e.png)](https://alod83.medium.com/?source=post_page-----c8f055979dd7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c8f055979dd7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c8f055979dd7--------------------------------)
    [Angelica Lo Duca](https://alod83.medium.com/?source=post_page-----c8f055979dd7--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c8f055979dd7--------------------------------)
    ·5 min read·Jun 1, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8fa752ecf9ee0df5ef35b90402cbbda7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Are you tired of spending hours debugging your code and fixing errors that
    could have easily been prevented? We know how frustrating it can be to have code
    that doesn’t work correctly, especially when you’re under pressure to deliver
    results. But fear not! There’s a solution: Pytest.'
  prefs: []
  type: TYPE_NORMAL
- en: Pytest is a robust testing framework that helps ensure your code works as expected,
    even under different scenarios and conditions. Integrating Pytest into your code
    allows you to identify and fix bugs before they become problems, saving you time
    and effort in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we’ll show you how to start with Pytest. From setting up your
    environment to writing tests that cover all your code, we’ve got you covered.
    So why wait? Let’s start testing and ensure your code works flawlessly every time.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover:'
  prefs: []
  type: TYPE_NORMAL
- en: An Overview of Pytest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Practical Example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start by describing an overview of Pytest.
  prefs: []
  type: TYPE_NORMAL
- en: An Overview of Pytest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pytest is a testing framework for Python that focuses on simplicity and ease
    of use. To install Pytest, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Pytest follows a modular and extensible architecture, allowing developers to
    organize tests into individual test functions or classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you build your test using Pytest, you must follow the steps described
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create a new script** `test_<mytest>.py` for your tests. Import Pytest into
    the script.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Define Your Test Functions:** A test function is a Python function that verifies
    a specific aspect of your code’s behavior. Each test function should be self-contained,
    focusing on a single test case. Pytest automatically discovers and executes these
    test functions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Test Naming Convention**: Each test function must start with `test_` to make
    Pytest recognize it correctly.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Test Assertions**: Use test assertions to define the function''s behavior.
    Pytest provides a wide range of powerful assertion functions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Test Fixtures**: Fixtures are functions that provide reusable and preconfigured
    resources or test data to your test functions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A List of Some Assets Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are some of the main assertions provided by Pytest:'
  prefs: []
  type: TYPE_NORMAL
- en: '`assert`: Make simple assertions by checking if a given condition is true'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`assertEqual`: Compare two values for equality. It checks if the expected value
    is equal to the actual value'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`assertTrue` and `assertFalse`: Verify if a given condition is true or false.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`assertRaises`: Check if a specific exception is raised when executing a code.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`assertIn` and `assertNotIn`: Verify if a value is present or absent in a given
    collection or sequence'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`assertAlmostEqual`: Compare floating-point values to a specified degree of
    precision.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`assertDictEqual`: Check if two dictionaries have the same set of key-value
    pairs.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`assertRaisesRegex`: Verify if a specific exception is raised and the exception
    message matches a regular expression pattern.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you have seen the basic concepts behind Pytest let’s move on to a practical
    example.
  prefs: []
  type: TYPE_NORMAL
- en: A Practical Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s imagine we want to build a calculator and test if we have implemented
    it correctly. First, we define the core functions, and then we write tests.
  prefs: []
  type: TYPE_NORMAL
- en: Core Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The core functions implement the calculator''s operations. For example, we
    can write the following simple code to implement the primary operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `calculator.py`.
  prefs: []
  type: TYPE_NORMAL
- en: Test Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the same directory where we save the core functions, add another script
    for the tests named `test_calculator.py`. First, import the core functions and
    the Pytest library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add a test for each function in the `calculator.py` file. For each function,
    add a separate test. For example, to test the `add()` function, write the following
    test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, you can write tests for the other functions. You can find the complete
    example in [this GitHub repository](https://github.com/alod83/data-science/tree/master/Tests/Calculator).
  prefs: []
  type: TYPE_NORMAL
- en: 'To run tests, open a terminal and run the following command from the folder
    where there are the two scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should obtain the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using Test Fixtures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s modify the previous example to support test fixtures. First, create a
    new directory and a new file named `calculator.py`. Wrap the calculation functions
    in a class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create another script called `test_calculator.py` in the same directory.
    Import Pytest and the `Calculator` class at the beginning of the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Use the `@pytest.fixture` decorator to define a fixture named `calculator`.
    Fixtures are functions that provide reusable resources or setup actions for tests.
    In this case, the `calculator` fixture creates an instance of the `Calculator`
    class and returns it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can use the test fixture `calculator` in our tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, run the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You should obtain the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can find the complete example in [this GitHub repository](https://github.com/alod83/data-science/tree/master/Tests/CalculatorFixture).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You have just learned how to add tests to your Python code
    using Pytest! Embracing Pytest as your testing framework ensures the reliability
    and longevity of your Python code!
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Pytest is simple: you need to write intuitive test functions!'
  prefs: []
  type: TYPE_NORMAL
- en: You may also be interested in…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[](https://medium.com/syntaxerrorpub/4-docker-options-you-may-not-know-fef301a5ce03?source=post_page-----c8f055979dd7--------------------------------)
    [## 4 Docker Options You May Not Know'
  prefs: []
  type: TYPE_NORMAL
- en: How to remove an image in Docker, rebuild an image from the base image, pass
    some configuration files to a Docker…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/syntaxerrorpub/4-docker-options-you-may-not-know-fef301a5ce03?source=post_page-----c8f055979dd7--------------------------------)
    [](/how-to-install-spark-nlp-5fcd36fab378?source=post_page-----c8f055979dd7--------------------------------)
    [## How to Install Spark NLP
  prefs: []
  type: TYPE_NORMAL
- en: A step-by-step tutorial on how to make Spark NLP work on your local computer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-install-spark-nlp-5fcd36fab378?source=post_page-----c8f055979dd7--------------------------------)
    [](/getting-started-with-data-cleaning-in-python-pandas-76d977f95b57?source=post_page-----c8f055979dd7--------------------------------)
    [## Getting Started with Data Cleaning in Python Pandas
  prefs: []
  type: TYPE_NORMAL
- en: A practical example of performing data cleaning using the popular Python library.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/getting-started-with-data-cleaning-in-python-pandas-76d977f95b57?source=post_page-----c8f055979dd7--------------------------------)
  prefs: []
  type: TYPE_NORMAL
