["```py\nimport pandas as pd\nimport random\nimport numpy as np\nfrom datetime import datetime \n```", "```py\ndef create_demo_data():\n\n    random.seed(365)\n    np.random.seed(365)\n    number_of_data_rows = 2160\n\n    # generate list of date\n    dates = pd.bdate_range(datetime(2020, 7, 1), freq='4H', periods=number_of_data_rows).tolist()\n\n    # create a dictionary with the date generated and blood sugar level\n    data = {'date': dates,\n            'blood_sugar_level': np.random.normal(5.5, 1, size=(1, number_of_data_rows))[0]}\n    # create dataframe\n    df = pd.DataFrame(data)\n    df = df.sort_values(by=[\"date\"])\n    df = df.set_index(keys=\"date\")\n    return df\n\ndf = create_demo_data()\nprint(df.shape)\ndf.head(10)\n```", "```py\nimport pandas as pd\n# generate dates at 2-hour frequency\nts = pd.date_range(pd.Timestamp(\"2023-04-06 12:00\"), periods=5, freq='2H')\nprint(\"Before normalize\\n\", ts)\nfreq = \"6H\"\nts_norm = ts.normalize()\nts_round = ts.round(freq=freq)\nts_floor = ts.floor(freq=freq)\nts_ceil = ts.ceil(freq=freq)\nprint(\"After normalize\\n\", ts_norm)\nprint(\"After round off\\n\",ts_round)\nprint(\"After round off to floor\\n\",ts_floor)\nprint(\"After round off to ceiling\\n\",ts_ceil)\n```", "```py\nimport pandas as pd\n# generate dates at 3-hour frequency\nts = pd.date_range(pd.Timestamp(\"2023-04-06 12:00\"), periods=5, freq='3H')\nprint(\"Before normalize\\n\", ts)\nfreq = \"6H\"\nts_norm = ts.normalize()\nts_round = ts.round(freq=freq)\nts_floor = ts.floor(freq=freq)\nts_ceil = ts.ceil(freq=freq)\nprint(\"After normalize\\n\", ts_norm)\nprint(\"After round off\\n\",ts_round)\nprint(\"After round off to floor\\n\",ts_floor)\nprint(\"After round off to ceiling\\n\",ts_ceil)\n```", "```py\ndf['dates'] = df.index\ndf.head()\n```", "```py\nfreq = \"6H\"\ndf[\"ts_norm\"] = df.dates.dt.normalize()\ndf[\"ts_round\"] = df.dates.dt.round(freq=freq)\ndf[\"ts_floor\"] = df.dates.dt.floor(freq=freq)\ndf[\"ts_ceil\"] = df.dates.dt.ceil(freq=freq)\ndf.head()\n```", "```py\nfreq = \"D\"\ndf[\"ts_norm\"] = df.dates.dt.normalize()\ndf[\"ts_round\"] = df.dates.dt.round(freq=freq)\ndf[\"ts_floor\"] = df.dates.dt.floor(freq=freq)\ndf[\"ts_ceil\"] = df.dates.dt.ceil(freq=freq)\ndf.head()\n```", "```py\ndf[\"formatted_date\"] = df[\"dates\"].dt.strftime('%B %d, %Y')\ndf.head()\n```", "```py\nts = pd.date_range(pd.Timestamp(\"2023-04-06 13:00\"), periods=5, freq='w')\nprint(\"Before \\n\", ts)\nfreq = \"w\"\nts_period = ts.to_period(freq=freq)\nprint(\"After \\n\", ts_period)\n```", "```py\nts = pd.date_range(pd.Timestamp(\"2023-04-06 13:00\"), periods=5, freq='w')\nprint(\"Before\\n\", ts)\nfreq = \"M\"\nts_period = ts.to_period(freq=freq)\nprint(\"After\\n\", ts_period)\n```", "```py\ndf[\"period\"] = df[\"dates\"].dt.to_period(freq=\"M\")\ndf.head()\n```", "```py\ndf_pivot = pd.pivot_table(data=df, index=\"period\", values=\"blood_sugar_level\", aggfunc=np.mean)\ndf_pivot\n```", "```py\ndf[\"week_period\"] = df[\"dates\"].dt.to_period(freq=\"W\")\ndf.head()\n```", "```py\ndf_pivot_week = pd.pivot_table(data=df, index=\"week_period\", values=\"blood_sugar_level\", aggfunc=np.mean)\ndf_pivot_week.head()\n```", "```py\ndf_pivot_week = df_pivot_week.reset_index()\ndf_pivot_week.head()\n```", "```py\n# to check the blood sugar level at every morning 8am\ndf.at_time('8:00')\n```", "```py\ndf.between_time(start_time=\"19:00\", end_time=\"21:00\").head()\n```", "```py\ndf_pivot\n```", "```py\ndf_pivot.shift(periods=1)\n```", "```py\ndf_pivot.shift(periods=-1)\n```", "```py\ndf_shift = df_pivot.shift(periods=1).rename(columns={\"blood_sugar_level\":\"previous month value\"})\ndf_shift\n```", "```py\ndf_combine = df_pivot.join(df_shift, how=\"left\")\ndf_combine\n```", "```py\ndf_combine[\"pct change\"] = (df_combine[\"previous month value\"] - df_combine[\"blood_sugar_level\"])/df_combine[\"previous month value\"]\ndf_combine\n```", "```py\ndf_pivot[\"pct_change\"] = df_pivot.pct_change()\ndf_pivot\n```", "```py\ndf_pivot[\"value_change\"] = df_pivot[\"blood_sugar_level\"].diff()\ndf_pivot\n```", "```py\ndf_pivot.resample(\"Q\").mean()\n```", "```py\ndf_pivot.resample(\"Y\").mean()\n```", "```py\ndf_pivot.resample(\"Y\").max()\n```", "```py\ndf_wrong_example = df_pivot.reset_index()\ndf_wrong_example.head()\n```", "```py\ndf_wrong_example.resample(\"Y\").sum()\n```", "```py\ndf_pivot[\"blood_sugar_level\"].plot.line()\ndf_pivot[\"blood_sugar_level\"].plot()\n```", "```py\ndef create_demo_data():\n\n    random.seed(365)\n    np.random.seed(365)\n    number_of_data_rows = 55\n\n    # create a month data\n    dates = pd.bdate_range(datetime(2020, 1, 1), freq='2W', periods=number_of_data_rows).tolist()\n\n    data = {'date': dates,\n            'blood_sugar_level': np.random.normal(5.5, 1, size=(1, number_of_data_rows))[0]}\n\n    df = pd.DataFrame(data)\n    df = df.sort_values(by=[\"date\"])\n    df = df.set_index(keys=\"date\")\n    return df\n\ndf = create_demo_data()\nprint(df.shape)\ndf.head(10)\n```", "```py\ndf.plot()\n```", "```py\ndf_pivot[\"blood_sugar_level\"].plot(title=\"Blood Sugar Level Record from Jul'20 - Jun'21\", xlabel=\"Date\", ylabel=\"Blood Sugar Level\")\n```"]