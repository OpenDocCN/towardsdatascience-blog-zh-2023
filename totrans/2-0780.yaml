- en: Easy Method of Edge Detection in OpenCV Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在OpenCV Python中进行简单的边缘检测方法
- en: 原文：[https://towardsdatascience.com/easy-method-of-edge-detection-in-opencv-python-db26972deb2d](https://towardsdatascience.com/easy-method-of-edge-detection-in-opencv-python-db26972deb2d)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/easy-method-of-edge-detection-in-opencv-python-db26972deb2d](https://towardsdatascience.com/easy-method-of-edge-detection-in-opencv-python-db26972deb2d)
- en: '![](../Images/abf1e43bd4a34fd3dc4c288984cd3c27.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/abf1e43bd4a34fd3dc4c288984cd3c27.png)'
- en: Photo by [Elijah Hiett](https://unsplash.com/@elijahdhiett?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Elijah Hiett](https://unsplash.com/@elijahdhiett?utm_source=medium&utm_medium=referral)提供，发布在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)上
- en: Using Canny Edge Detection Efficiently
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高效地使用Canny边缘检测
- en: '[](https://rashida00.medium.com/?source=post_page-----db26972deb2d--------------------------------)[![Rashida
    Nasrin Sucky](../Images/42bd057e8eca255907c43c29a498f2ca.png)](https://rashida00.medium.com/?source=post_page-----db26972deb2d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----db26972deb2d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----db26972deb2d--------------------------------)
    [Rashida Nasrin Sucky](https://rashida00.medium.com/?source=post_page-----db26972deb2d--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://rashida00.medium.com/?source=post_page-----db26972deb2d--------------------------------)[![Rashida
    Nasrin Sucky](../Images/42bd057e8eca255907c43c29a498f2ca.png)](https://rashida00.medium.com/?source=post_page-----db26972deb2d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----db26972deb2d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----db26972deb2d--------------------------------)
    [Rashida Nasrin Sucky](https://rashida00.medium.com/?source=post_page-----db26972deb2d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----db26972deb2d--------------------------------)
    ·4 min read·Jan 24, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----db26972deb2d--------------------------------)
    ·阅读时间4分钟·2023年1月24日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Edge detection is very common and widely used image processing necessary for
    many different computer vision applications like data extraction, image segmentation,
    and in more granular level feature extraction, and pattern recognition. It reduces
    the level of noise and the number of details in an image but preserves the structure
    of the image.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘检测在图像处理中非常常见且广泛应用，对于许多不同的计算机视觉应用如数据提取、图像分割、更细粒度的特征提取和模式识别等都是必要的。它减少了图像中的噪声和细节，但保留了图像的结构。
- en: 'Canny edge detection in Python is one of the most popular edge detection methods
    in computer vision. These are the steps for Canny edge detection:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的Canny边缘检测是计算机视觉中最流行的边缘检测方法之一。Canny边缘检测的步骤如下：
- en: Reducing noise using the Gaussian smoothing
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用高斯平滑减少噪声
- en: Computing the gradients
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算梯度
- en: Applying non-maxima suppression to reduce the noise and have only the local
    maxima in the direction of the gradient
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用非极大值抑制以减少噪声，并仅保留梯度方向上的局部极大值
- en: Finding the upper and lower threshold
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 寻找上限和下限阈值
- en: Applying the threshold.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用阈值。
- en: Luckily OpenCV library has cv2.canny() function that performs Canny edge detection
    for us. In this article, we will go directly into performing edge detection using
    OpenCV.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，OpenCV库有`cv2.canny()`函数可以为我们执行Canny边缘检测。在本文中，我们将直接进行使用OpenCV进行边缘检测。
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will use the following picture for today’s tutorial:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下图片作为今天教程的素材：
- en: '![](../Images/a6e68579f9b3c323d67b747604d91bf9.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a6e68579f9b3c323d67b747604d91bf9.png)'
- en: Photo by [Lucas Hoang](https://unsplash.com/@zuizuii?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Lucas Hoang](https://unsplash.com/@zuizuii?utm_source=medium&utm_medium=referral)提供，发布在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)上
- en: 'The first step of the Canny Edge detection was to apply Gaussian Blur. Before
    blurring, it is also important to convert the image to grayscale as well:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Canny边缘检测的第一步是应用高斯模糊。在模糊之前，将图像转换为灰度图像也是重要的。
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we can directly apply our cv2.Canny() method to this blurred picture.
    It’s simple. It takes three parameters: the image itself, the lower threshold,
    and the upper threshold. Choosing these thresholds is tricky. For each image,
    these thresholds will be different.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以直接将`cv2.Canny()`方法应用到这张模糊的图片上。这很简单。它需要三个参数：图片本身、下限阈值和上限阈值。选择这些阈值是棘手的。对于每张图片，这些阈值会有所不同。
- en: 'For this image, we will try three different ranges and observe what happens:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这张图像，我们将尝试三种不同的范围并观察会发生什么：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here I used three different types of ranges. In the wide, the threshold values
    have a wide range. In the mid, the threshold values have somewhere mid-range and
    in the tight, the threshold values have a tight range, only 210 to 250, pretty
    close.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我使用了三种不同类型的范围。在宽范围中，阈值有一个较大的范围。在中等范围中，阈值有一个中等的范围，而在紧范围中，阈值的范围非常小，仅为 210
    到 250，相当接近。
- en: To check the images I just saved these three images (wide, mid, and tight).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查这些图片，我只保存了这三张图片（宽，中和紧）。
- en: 'These are the results:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是结果：
- en: '![](../Images/ec7428967c291adc88640b116a086903.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ec7428967c291adc88640b116a086903.png)'
- en: Image By Author
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'This is the result of the mid-range:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是中等范围的结果：
- en: '![](../Images/246a06fbf33e0400a7dddd79c8d09fe8.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/246a06fbf33e0400a7dddd79c8d09fe8.png)'
- en: Image By Author
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'The image from the tight range:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 来自紧范围的图像：
- en: '![](../Images/530c07f3b23b73ffecdcc26453e27099.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/530c07f3b23b73ffecdcc26453e27099.png)'
- en: Image By Author
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: If we notice these three images, I believe the mid-range gave a more solid edge.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们观察这三张图片，我相信中等范围提供了更为明显的边缘。
- en: Remember, you cannot generalize this ranges. For a different image a different
    range may work. That’s why it is so tricky
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请记住，你不能对这些范围进行概括。不同的图片可能需要不同的范围。这就是为什么它如此棘手的原因。
- en: The good news is, There are a few statistical tricks available that can be used
    to find the lower and upper threshold without the trial and error method we saw
    earlier.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，有一些统计技巧可以用来找到下阈值和上阈值，而不是我们之前看到的试错方法。
- en: 'This is the function for automatic edge detection:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是自动边缘检测的函数：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the function above, the median pixel value from the image array is found
    first. Then using this median and a constant sigma value you can find the lower
    and upper thresholds. Here a sigma value of 0.33 was used. In most applications
    0.33 works as a sigma value. But in some cases, if it doesn’t give you a good
    result, try some other sigma value as well.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述函数中，首先从图像数组中找到中位像素值。然后，使用这个中位值和一个常数 sigma 值，你可以找到下阈值和上阈值。在这里使用了 0.33 的 sigma
    值。在大多数应用中，0.33 作为 sigma 值效果很好。但在某些情况下，如果它没有给你一个好的结果，可以尝试其他 sigma 值。
- en: 'Here is the use of the auto_canny_edge_detection method on the blurred image
    we created before:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用 auto_canny_edge_detection 方法处理我们之前创建的模糊图像的结果：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is what auto.jpg looks like:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 auto.jpg 的样子：
- en: '![](../Images/651688df8dfe198147dde57f75d4667e.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/651688df8dfe198147dde57f75d4667e.png)'
- en: Image By Author
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: As you can see the edge came here pretty clearly without having to try too many
    thresholds.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，边缘在这里显得非常清晰，而不需要尝试太多阈值。
- en: Conclusion
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In my opinion, the automatic edge detection function provided us with the best
    result. Please feel free to try with your own application. It can be very useful.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，自动边缘检测函数为我们提供了最佳结果。请随意在自己的应用中尝试。这可能非常有用。
- en: Feel free to follow me on [Twitter](https://twitter.com/rashida048) and like
    my [Facebook](https://www.facebook.com/rashida.smith.161) page.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎关注我的 [Twitter](https://twitter.com/rashida048) 并点赞我的 [Facebook](https://www.facebook.com/rashida.smith.161)
    页面。
- en: More Reading
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多阅读
- en: '[](/how-to-perform-image-segmentation-with-thresholding-using-opencv-b2a78abb07ac?source=post_page-----db26972deb2d--------------------------------)
    [## How to Perform Image Segmentation with Thresholding Using OpenCV'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/how-to-perform-image-segmentation-with-thresholding-using-opencv-b2a78abb07ac?source=post_page-----db26972deb2d--------------------------------)
    [## 如何使用 OpenCV 进行阈值分割'
- en: Simple, Otsu, and Adaptive Thresholding Implementation with Examples
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简单的、大津法和自适应阈值实现示例
- en: towardsdatascience.com](/how-to-perform-image-segmentation-with-thresholding-using-opencv-b2a78abb07ac?source=post_page-----db26972deb2d--------------------------------)
    [](/morphological-operations-for-image-preprocessing-in-opencv-in-detail-15fccd1e5745?source=post_page-----db26972deb2d--------------------------------)
    [## Morphological Operations for Image Preprocessing in OpenCV, in Detail
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/how-to-perform-image-segmentation-with-thresholding-using-opencv-b2a78abb07ac?source=post_page-----db26972deb2d--------------------------------)
    [](/morphological-operations-for-image-preprocessing-in-opencv-in-detail-15fccd1e5745?source=post_page-----db26972deb2d--------------------------------)
    [## OpenCV 中的形态学操作，详细说明
- en: Erosion, dilation, opening, closing, morphological gradient, tophat / whitehat,
    and blackhat explained with examples
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 腐蚀、膨胀、开运算、闭运算、形态梯度、顶帽/白帽和黑帽通过示例进行了说明
- en: towardsdatascience.com](/morphological-operations-for-image-preprocessing-in-opencv-in-detail-15fccd1e5745?source=post_page-----db26972deb2d--------------------------------)
    [](/some-basic-image-preprocessing-operations-for-beginners-in-python-7d297316853b?source=post_page-----db26972deb2d--------------------------------)
    [## Some Basic Image Preprocessing Operations for Beginners in Python
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Python 初学者的一些基本图像预处理操作](https://towardsdatascience.com/some-basic-image-preprocessing-operations-for-beginners-in-python-7d297316853b?source=post_page-----db26972deb2d--------------------------------)'
- en: 'OpenCV for beginners: move or translate, resize, and cropping'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OpenCV 初学者指南：移动或平移、调整大小和裁剪
- en: towardsdatascience.com](/some-basic-image-preprocessing-operations-for-beginners-in-python-7d297316853b?source=post_page-----db26972deb2d--------------------------------)
    [](/a-step-by-step-tutorial-to-develop-a-multi-output-model-in-tensorflow-ec9f13e5979c?source=post_page-----db26972deb2d--------------------------------)
    [## A Step-by-Step Tutorial to Develop a Multi-Output Model in TensorFlow
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 开发多输出模型的逐步教程](https://towardsdatascience.com/a-step-by-step-tutorial-to-develop-a-multi-output-model-in-tensorflow-ec9f13e5979c?source=post_page-----db26972deb2d--------------------------------)'
- en: With complete code
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包含完整代码
- en: towardsdatascience.com](/a-step-by-step-tutorial-to-develop-a-multi-output-model-in-tensorflow-ec9f13e5979c?source=post_page-----db26972deb2d--------------------------------)
    [](https://pub.towardsai.net/some-simple-but-advanced-styling-in-pythons-matplotlib-visualization-107f3be56a24?source=post_page-----db26972deb2d--------------------------------)
    [## Some Simple But Advanced Styling in Python’s Matplotlib Visualization
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Python Matplotlib 可视化中的一些简单但高级的样式](https://pub.towardsai.net/some-simple-but-advanced-styling-in-pythons-matplotlib-visualization-107f3be56a24?source=post_page-----db26972deb2d--------------------------------)'
- en: Adding Some Extra Flavor to Your Python Plots
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为你的 Python 绘图添加一些额外的风味
- en: pub.towardsai.net](https://pub.towardsai.net/some-simple-but-advanced-styling-in-pythons-matplotlib-visualization-107f3be56a24?source=post_page-----db26972deb2d--------------------------------)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 详细了解 OpenCV 中的形态学操作](https://towardsdatascience.com/morphological-operations-for-image-preprocessing-in-opencv-in-detail-15fccd1e5745?source=post_page-----db26972deb2d--------------------------------)'
