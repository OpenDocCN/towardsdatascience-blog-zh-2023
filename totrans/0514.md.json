["```py\nbreakable_list = list(range(25))\n\nprint(*breakable_list)\n```", "```py\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n```", "```py\nprint(breakable_list)\n```", "```py\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n```", "```py\nstring = \"Readability counts\"\n\nprint(*string)\n```", "```py\nR e a d a b i l i t y   c o u n t s\n```", "```py\nfor s in string:\n    print(s, end=\" \")\n```", "```py\nR e a d a b i l i t y   c o u n t s\n```", "```py\nauthor = {\"name\": \"Bex\", \"n_followers\": 17000, \"happy\": True}\n\ndef pretty_print(name, n_followers, happy):\n    print(\n        f\"{name} has {n_followers} followers and \"\n        f\"he is {'happy' if True else 'unhappy'}!\"\n    )\n```", "```py\npretty_print(\n    name=author[\"name\"],\n    n_followers=author[\"n_followers\"],\n    happy=author[\"happy\"],\n)\n```", "```py\nBex has 17000 followers and he is happy!\n```", "```py\npretty_print(**author)\n```", "```py\nBex has 17000 followers and he is happy!\n```", "```py\ndef total_price(\n    price: float,\n    quantity: int,\n    discount=0,\n    tax_rate=0,\n):\n    # The rest of the code\n    ...\n```", "```py\ndef geometric_average(a, b, c):\n    product = a * b * c\n    geometric_avg = product ** (1 / 3)\n\n    return geometric_avg\n\ngeometric_average(5, 9, 8)\n```", "```py\n7.113786608980125\n```", "```py\ndef geometric_average(*args):\n    print(\"That works.\")\n```", "```py\ngeometric_average(1, 2, 3, 4, 5, 6)\n```", "```py\nThat works.\n```", "```py\ndef geometric_average(*args):\n    # Print the type of args\n    print(type(args))\n\ngeometric_average(2, 1)\n```", "```py\n<class 'tuple'>\n```", "```py\ndef geometric_average(*args):\n    product = 1\n    # Iterate over args\n    for num in args:\n        product *= num\n    geometric_avg = product ** (1 / len(args))\n\n    return geometric_avg\n\ngeometric_average(2, 3, 5, 6, 1)\n```", "```py\n2.825234500494767\n```", "```py\ndef geometric_average(*numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    geometric_avg = product ** (1 / len(numbers))\n\n    return geometric_avg\n```", "```py\ndef pickle_model(model_object, path, **kwargs):\n    \"A function to pickle an ML model\"\n    ...\n```", "```py\npickle_model(\n    xgb_regressor,\n    \"models/xgb_regressor.pkl\",\n    hyperparameters={\"max_depth\": 3, \"eta\": 1},\n    author=\"bexgboost\",\n    version=\"v1.0.1\",\n)\n```", "```py\ndef pickle_model(model_object, path, **metadata):\n    \"A function to pickle an ML model\"\n    print(type(metadata))\n\npickle_model(xgb_regressor, \"models/xgb_reg.pkl\", author=\"bexgboost\")\n```", "```py\n<class 'dict'>\n```", "```py\ndef pickle_model(model_object, path, **metadata):\n    \"A function to pickle an ML model.\"\n    # Raises an error if author is not given, so use `get()`\n    author = metadata[\"author\"]\n\n    # Iterate\n    for key, value in metadata.items():\n        ...\n```", "```py\ndef func(arg1, arg2, *args, **kwargs):\n    pass\n```", "```py\nfunc(1, 2)\n```", "```py\n# Only args itself\ndef func(*args):\n    ...\n```", "```py\n#  Can't do this\ndef func(arg1, arg2, hello=\"it's me\", arg3):\n    pass\n```", "```py\n def func(arg1, arg2, hello=\"it's me\", arg3):\n                                              ^\nSyntaxError: non-default argument follows default argument\n```", "```py\ndef weird(arg, arg_again, *, default=1):\n    pass\n```", "```py\ndef weird(arg, arg_again, default=1):\n    pass\n\nweird(1, 2, 3)\n```", "```py\ndef weird(arg, arg_again, *, default=1):\n    pass\n\nweird(1, 2, 3)\n```", "```py\nTypeError: weird() takes 2 positional arguments but 3 were given\n```", "```py\nweird(1, 2, default=3)\n```", "```py\nrf = RandomForestRegressor(1000, 'squared_error', 3, 3, 2)\n```", "```py\nrf = RandomForestRegressor(\n    1000,  # Before the asteisk\n    criterion=\"poisson\",  # After the asterisk\n    max_depth=3,\n    min_samples_split=3,\n    min_samples_leaf=2,\n)\n```", "```py\na = [1, 2, 3]\nb = [4, 5, 6]\n\nx_dict = {\"a\": 1, \"b\": 0}\ny_dict = {\"c\": 10, \"d\": 10}\n```", "```py\n# Merge lists\n[*a, *b]\n```", "```py\n[1, 2, 3, 4, 5, 6]\n```", "```py\n# Merge dictionaries\n{**x_dict, **y_dict}\n```", "```py\n{'a': 1, 'b': 0, 'c': 10, 'd': 10}\n```", "```py\na = [1, 2, 3]\nb = [*a, \"c\", \"d\", \"n\"]\n\nb\n```", "```py\n[1, 2, 3, 'c', 'd', 'n']\n```", "```py\nemployee_info = {\"name\": \"John Doe\", \"age\": 35, \"position\": \"Manager\"}\n\nmessage = (\n    \"Employee Name: {name}\\nAge: \"\n    \"{age}\\nPosition: {position}\".format(**employee_info)\n)\n\nprint(message)\n```", "```py\nEmployee Name: John Doe\nAge: 35\nPosition: Manager\n```", "```py\n# Unpack all elements of a set one-by-one\na, b, c = {1, 2, 3}\n\n# Unpack into varied length arguments\nfirst, *remaining, last = [1, 2, 3, 4, 5]\n\nprint(first, remaining, last)\n```", "```py\n1 [2, 3, 4] 5\n```", "```py\nfirst, second, *_ = [1, 2, 3, 4, 5]\n\nprint(first, second)\n```", "```py\n1 2\n```", "```py\nnested_list = [1, [2, 3], 4]\n\na, (b, c), d = nested_list\n\nprint(b, c)\n```", "```py\n2 3\n```", "```py\ndef transpose(list_of_lists):\n    return [list(row) for row in zip(*list_of_lists)]\n\nmy_list = [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\nprint(my_list)\n```", "```py\n[[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n```", "```py\ntranspose(my_list)\n```", "```py\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n```"]