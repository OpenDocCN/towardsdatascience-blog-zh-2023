- en: Why Backtesting Matters and How to Do It Right
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/why-backtesting-matters-and-how-to-do-it-right-731fb9624a](https://towardsdatascience.com/why-backtesting-matters-and-how-to-do-it-right-731fb9624a)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How do we know if our forecasting model is accurate and reliable and evaluate
    its performance on unseen data? This is where backtesting comes in.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@davide.burba?source=post_page-----731fb9624a--------------------------------)[![Davide
    Burba](../Images/a1ca3cf59c2b933021fa0d978e1af522.png)](https://medium.com/@davide.burba?source=post_page-----731fb9624a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----731fb9624a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----731fb9624a--------------------------------)
    [Davide Burba](https://medium.com/@davide.burba?source=post_page-----731fb9624a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----731fb9624a--------------------------------)
    ·7 min read·Jul 18, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a56e7682ea4c901ab7c808da2f123238.png)'
  prefs: []
  type: TYPE_IMG
- en: “Backtesting”, by [Giulia Roggia](https://www.instagram.com/giulia_roggia__/).
    Used with permission.
  prefs: []
  type: TYPE_NORMAL
- en: '[What is Backtesting?](#0326)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Example: Airline Passengers](#9788)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](#0172)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Backtesting?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To evaluate the performance of a forecasting model, we use a procedure called
    backtesting (also known as **time-series cross-validation**). Backtesting is essentially
    a way of testing how a model would have performed if it had been used in the past.
  prefs: []
  type: TYPE_NORMAL
- en: '***How does it work?***'
  prefs: []
  type: TYPE_NORMAL
- en: 'To backtest a time-series forecasting model, we start by splitting the data
    into two parts: a training set and a validation set (sometimes also called a test
    set, but we’ll clarify the difference in the next sections). The training set
    is used to train the model, while the test set is used to evaluate how well the
    model performs on unseen data. Once the model has been trained, you can then use
    it to make predictions on the test set. You can compare these predictions to the
    actual values to see how well the model performs.'
  prefs: []
  type: TYPE_NORMAL
- en: '***How do we measure the performance of a model?***'
  prefs: []
  type: TYPE_NORMAL
- en: There are several metrics that can be used to evaluate the performance of a
    time-series forecasting model, such as Mean Absolute Error (MAE) or Root Mean
    Squared Error (RMSE). These metrics measure how close the predicted values are
    to the actual values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The procedure is typically repeated multiple times, allowing us to:'
  prefs: []
  type: TYPE_NORMAL
- en: Have a good estimate of the model performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualize the evolution of the performance in time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here below we show a graphical representation of the backtesting process, using
    3 splits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4c60dad79747173d9c38a9d86170807e.png)'
  prefs: []
  type: TYPE_IMG
- en: Backtesting with extending window. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: In the figure above we show only 3 non-overlapping validation periods. However,
    nothing prevents us to use more partially overlapping windows, potentially one
    per time-step.
  prefs: []
  type: TYPE_NORMAL
- en: Why is backtesting important?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the model performs well on the test set, you can then have more confidence
    in its ability to make accurate predictions in the future. By backtesting a time-series
    forecasting model, you can gain insights into how well it performs on historical
    data and make more informed decisions about how to use it in the future.
  prefs: []
  type: TYPE_NORMAL
- en: '***How about using backtesting to improve our model?***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Backtesting can also be used to improve our model, for example with hyper-parameters
    tuning or feature selection. In this case, since we usually end up by selecting
    the best performing combinations, our metric estimates are likely to be over-optimistic.
    If we want to have an unbiased performance estimate, we should perform two backtesting
    in two separate consecutive periods:'
  prefs: []
  type: TYPE_NORMAL
- en: The firstbacktesting is used to tune hyper-parameters, select the best features,
    and in general make all the choices necessary to build our “final” model. The
    splits used for evaluating predictions in this period are known as **validation
    sets**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The secondbacktesting is used to have a performance estimate of the final selected
    model. It should be performed on the period after the one used for validation.
    The splits used for evaluating predictions in this period are known as **test
    sets**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Backtesting variants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***Extending or fixed training window?***'
  prefs: []
  type: TYPE_NORMAL
- en: In the previous figure, we can see that the size of the training window is extending.
    An alternative would be to use a fixed size time-window for the training set,
    as shown in the next figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d26ba6fa2bcbf5db5bfd2daefdd82850.png)'
  prefs: []
  type: TYPE_IMG
- en: Backtesting with fixed window. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: Using a fixed window has the drawback that the model uses less data to train,
    however it might be convenient if the data is very dynamic and therefore the most
    recent data is much more informative than older data. In general, the window size
    can be seen as an hyper-parameter that can be tweaked via backtesting.
  prefs: []
  type: TYPE_NORMAL
- en: '***Training cutoff vs feature cutoff***'
  prefs: []
  type: TYPE_NORMAL
- en: An important thing to keep in mind is that data used to train the model and
    data used to build the input features are two separate concepts.
  prefs: []
  type: TYPE_NORMAL
- en: In principle, we could have as many splits as the number of time-steps in the
    data. However, re-training the model for each time-step might be time-consuming
    and computationally intensive. An alternative that is often used in practice is
    to train a model less-frequently, let’s say every *N* time steps, and do predictions
    with the most recent model at every time-step. The number *N* can also be tuned
    via backtesting.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, note that in this article we are considering a single time-series for
    simplicity. However, the same concepts can be applied to models that make predictions
    for multiple time-series (if you are interested in this topic, you can check [this
    article](https://medium.com/towards-data-science/local-vs-global-forecasting-what-you-need-to-know-1cc29e66cae0)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Airline Passengers'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/6b9ea7db80791b4c4b4c273fcae09feb.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image by* [*Lars Nissen*](https://pixabay.com/users/ln_photoart-2780243/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=3702676)
    *from* [*Pixabay*](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=3702676)'
  prefs: []
  type: TYPE_NORMAL
- en: In this section we show a simple Python implementation of backtesting, using
    the [Air Passengers dataset](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/AirPassengers.html),
    which is available on [Darts](https://github.com/unit8co/darts/tree/master) under
    the Apache 2.0 License.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by importing the necessary libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Data preparation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The dataset consists in monthly totals of international airline passengers from
    1949 to 1960\. Let’s load and prepare the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s have a quick look at the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8c62a466acde6c662b5081326238389f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the data exhibits a strong increasing trend and yearly seasonality.
  prefs: []
  type: TYPE_NORMAL
- en: Data engineering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s predict the value of the next month based on:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A few lagged values: the previous 3 months, plus 6/12/24 months ago'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current month (as a categorical feature, to help with seasonality)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Backtesting implementation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s implement a simple yet generic backtesting function. The function receives
    as input the model and the data, plus two parameters for the start training window
    and the frequency for re-training. We use an extending training window, and we
    make predictions at every time-step after the start window.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The code above could be extended in several ways. For example you could allow
    to use a fixed training window, or make it more efficient by using vectorization
    and/or parallelization. However we suggest to start simple and add complexity
    only if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: We can now apply the backtesting function to our data, and check the backtesting
    performances.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: which gives a MAE of 25.6 and the figure below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6efe270a8260ed8594f7e752d0d4aa46.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: '*The full code used is this example is available* [*here*](https://github.com/davide-burba/code-collection/)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Backtesting is a crucial step in time-series forecasting that allows you to
    evaluate your model’s accuracy and reliability on unseen data. By following some
    best practices and using appropriate methods for backtesting, you can improve
    your model’s performance and avoid common pitfalls.
  prefs: []
  type: TYPE_NORMAL
- en: '*Enjoyed this article?* [*Checkout my other ones*](https://medium.com/@davide.burba)
    *and follow me for more!* [*Click here*](https://medium.com/@davide.burba/membership)
    *to read unlimited articles and support me at no additional cost for you*❤️'
  prefs: []
  type: TYPE_NORMAL
