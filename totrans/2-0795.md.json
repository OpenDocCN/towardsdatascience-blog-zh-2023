["```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom statsmodels.tsa.x13 import x13_arima_analysis\n\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta\nimport os\n\n# Set the X13PATH environmental variable to the folder where you unzipped the X-13 executables\nos.environ['X13PATH'] = r\"C:\\...\\x13as_ascii-v1-1-b59\\x13as\"\n```", "```py\n#load data\ndf = pd.read_excel(\"TSLA_Revenue.xlsx\")\n\n#set date as index\ndf.set_index('date', inplace=True)\n\n#set frequency as quarter\ndf= df.resample('Q').asfreq()\n\n#View index\ndf.index\n```", "```py\n# display data\ndf.head()\n```", "```py\n# Run X-13ARIMA-SEATS decomposition\nresults = x13_arima_analysis(df['revenue'])\n```", "```py\n# Get the seasonally adjusted series\nseasonally_adjusted = results.seasadj\n\n# Visualize revenue and seasonally adjusted revenue\nplt.figure(figsize=(10, 6))\nplt.subplot(311)\nplt.plot(df.index, df['revenue'], label='Original Data')\nplt.legend()\n\nplt.subplot(312)\nplt.plot(df.index, seasonally_adjusted, label='Seasonally Adjusted')\nplt.legend()\n\nplt.tight_layout()\nplt.show()\n```", "```py\nprint(results.results)\n```", "```py\n# Calculate the % chg to the previous quarter\ndf['QoQ %chg'] = df['revenue'].pct_change() * 100\n\ndf['QoQ% chg adjusted'] = df['seasadj'].pct_change() * 100\n\n# Getting the index positions for x-axis locations\nx = range(len(df.index))\n\n# Plotting the bar chart\nplt.figure(figsize=(10, 6))\n\nbar_width = 0.40\n\nplt.bar(x, df['QoQ %chg'], width=bar_width, align='center', label='% chg', color='blue', alpha=0.7)\nplt.bar([i + bar_width for i in x], df[f'QoQ% chg adjusted'], width=bar_width, align='center', label='% chg adjusted', color='teal', alpha=0.7)\n\n# Enhance the visualization\nplt.axhline(y=0, color='gray', linestyle='--', linewidth=1)\nplt.xlabel('Date')\nplt.ylabel('% Change')\nplt.title(f'Comparison of {metric_name} % chg and % chg adjusted')\nplt.legend()\nplt.xticks([i + bar_width/2 for i in x], df.index.strftime('%Y-%m-%d'), rotation=45)\nplt.tight_layout()\n\nplt.show()\n```", "```py\ndef results_analysis(result = results, analysis_date= '2023-09-30', freq ='Quarter'):\n    \"\"\"\n    This function takes the results from X13 arima analysis and returns a dataframe with:\n\n        - Revenue\n        - Seasonally adjusted Revenue\n        - Revenue vs previous period\n        - Seasonally adjusted Revenue vs previous period\n        - SAAR : Seasonally adjusted annual rate\n        - SAAR %chg vs last year\n\n    The funtion also print key financial output\n        - Revenue\n        - Revenue vs last year\n        - Revenue vs previous period\n        - Seasonally adjusted Revenue vs previous period\n        - SAAR\n        - SAAR %chg vs last year\n\n    Parameters\n    ----------\n        result : statsmodels.tsa.x13.X13ArimaAnalysisResult object\n            the result from instantiating x13_arima_analysis\n        analysis_date : str\n            the date for analysis\n        freq : str, optional\n            the frequency of our data, either \"Quarter\" or \"Month\" (default is Quarter)    \n    \"\"\"\n\n    #get the observed & Seasonally adjusted data into Dataframe\n    observed = pd.DataFrame(result.observed)\n\n    seasonal_adj = pd.DataFrame(result.seasadj)\n    df = pd.concat([observed,seasonal_adj],axis=1)\n\n    # get  data from previous Year until analysis_date\n    analysis_date = datetime.strptime(analysis_date, '%Y-%m-%d') # convert variable to datetime\n\n    last_year = analysis_date.year -1\n    df = df[df.index.year >= last_year].copy()\n\n    #Calculate QoQ or MoM revenue change and Sesonally adjusted revenue change\n    metric_name = 'QoQ' if freq == 'Quarter' else 'MoM'\n\n    df[f'{metric_name} %chg'] = df['revenue'].pct_change() * 100\n\n    df[f'{metric_name}% chg adjusted'] = df['seasadj'].pct_change() * 100\n\n    #calculate LY revenue\n\n    ly_revenue = df[df.index.year == last_year]['revenue'].sum()\n\n    #Calculate Seasonally Adjusted Annual Rate and chg\n\n    annual_factor = 4 if freq == 'Quarter' else 12 # assing annual factor for SAAR calculation\n\n    df['SAAR'] = df.apply(lambda row: row['seasadj'] * annual_factor if row.name.year == analysis_date.year else None, axis=1)\n\n    df['SAAR % Chg'] = df.apply(lambda row: (row['SAAR'] / ly_revenue - 1)*100 if row.name.year == analysis_date.year else None, axis=1)\n\n    data = df[df.index==analysis_date]# get the data for the analysis date\n    ly_data = df[df.index==(analysis_date - relativedelta(years=1))]# get the data for the previous year analysis date\n\n    #Print results\n    print(f'{freq} Revenue: {data[\"revenue\"][0]}')\n    print(f'{freq} Revenue YoY %chg: {(data[\"revenue\"][0]/ly_data[\"revenue\"][0]-1)*100 :.1f}')\n    print(f'{freq} Revenue {metric_name} %chg: {data[f\"{metric_name} %chg\"][0] :.1f}')\n    print(f'{freq} Seasonally adjusted Revenue {metric_name} %chg: {data[f\"{metric_name}% chg adjusted\"][0] :.1f}')\n    print(f'Seasonally adjusted annual rate: {data[\"SAAR\"][0]}')\n    print(f'Seasonally adjusted annual rate %chg: {data[\"SAAR % Chg\"][0] :.1f}')\n\n    return df\n\ndf_results = results_analysis(results)\n```"]