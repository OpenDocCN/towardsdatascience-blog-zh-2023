- en: '🦜🔗LangChain: Allow LLMs to interact with your code'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 🦜🔗LangChain：允许LLMs与你的代码互动
- en: 原文：[https://towardsdatascience.com/langchain-allow-llms-to-interact-with-your-code-55d5751aa8a2](https://towardsdatascience.com/langchain-allow-llms-to-interact-with-your-code-55d5751aa8a2)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/langchain-allow-llms-to-interact-with-your-code-55d5751aa8a2](https://towardsdatascience.com/langchain-allow-llms-to-interact-with-your-code-55d5751aa8a2)
- en: '![](../Images/ff27b1999a99a1cc7a7add035a1901f0.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ff27b1999a99a1cc7a7add035a1901f0.png)'
- en: Photo by [David Clode](https://unsplash.com/@davidclode?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[David Clode](https://unsplash.com/@davidclode?utm_source=medium&utm_medium=referral)拍摄，发布在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)上
- en: Learn how to implement custom functions for your LLM, using tools
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习如何使用工具为你的LLM实现自定义功能
- en: '[](https://medium.com/@marcellopoliti?source=post_page-----55d5751aa8a2--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----55d5751aa8a2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----55d5751aa8a2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----55d5751aa8a2--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----55d5751aa8a2--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@marcellopoliti?source=post_page-----55d5751aa8a2--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----55d5751aa8a2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----55d5751aa8a2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----55d5751aa8a2--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----55d5751aa8a2--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----55d5751aa8a2--------------------------------)
    ·5 min read·Jul 5, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----55d5751aa8a2--------------------------------)
    ·5分钟阅读·2023年7月5日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: Generative models are under everyone’s attention. Many AI applications now no
    longer require Machine Learning experts in the field but simply know how to Implement
    API calls.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 生成模型受到了大家的关注。许多AI应用现在不再需要领域内的机器学习专家，而只需知道如何实现API调用。
- en: Recently, for example, I participated in a hackathon, and I had to implement
    a custom-named entity recognition, but I directly used an LLM and exploited its
    few-shot learner capability to get the result I wanted, which to win the hackathon
    was quite enough! (You can check the project [here](https://www.brianknows.org/)
    if you want).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，例如，我参加了一次黑客马拉松，我需要实现一个自定义命名实体识别，但我直接使用了LLM，并利用了其少样本学习能力来获得我想要的结果，这对于赢得黑客马拉松来说已经足够了！（如果你想，你可以在[这里](https://www.brianknows.org/)查看项目）。
- en: So for many real-world applications, the focus is shifting more toward how to
    interact and use these LLMs rather than creating models. **LangChain** is a library
    that allows you to do just that, and I’ve written several articles about it lately.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于许多现实世界的应用，重点更多地转向如何与这些LLM进行互动和使用，而不是创建模型。**LangChain** 是一个允许你做到这一点的库，我最近写了几篇关于它的文章。
- en: LangChain Tools
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LangChain 工具
- en: '**Tools are utilities that an LLM can use to augment its capabilities**. Tools
    can be instantiated within chains or agents.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**工具是LLM可以用来增强其能力的工具**。工具可以在链或代理中实例化。'
- en: For example, an LLM might conduct a Wikipedia search before responding to ensure
    an up-to-date response.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，LLM可能会在回应之前进行维基百科搜索，以确保响应是最新的。
- en: Of course, an agent can use multiple tools, and so often what is done is to
    define a list of tools.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，一个代理可以使用多个工具，因此，通常会定义一个工具列表。
- en: 'Let us now look at the anatomy of a tool. **A tool is nothing more than a class
    consisting of several fields**:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看工具的结构。**工具不过是由几个字段组成的类**：
- en: '**name** (str): defines a unique name of the tool'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**name** (str)：定义工具的唯一名称'
- en: '**description** (str): a description of the tool’s utility in natural language.
    The LLM will be able to read this description and figure out whether or not it
    will need the tool to answer the query.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**description** (str)：工具在自然语言中的用途描述。LLM能够读取此描述，并判断是否需要该工具来回答查询。'
- en: '**return_direct** (bool): A tool might return the output of a custom function
    for example. Do we want that output to be presented directly to the user (True)
    or to be preprocessed by the LLM (False)?'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**return_direct**（bool）：例如，工具可能会返回自定义函数的输出。我们是否希望将该输出直接呈现给用户（True），还是由LLM预处理（False）？'
- en: '**args_schema** (Pydantic BaseModel): For example, the tool might use a custom
    function whose input parameters must be retrieved from the user’s query. We can
    provide more information about each parameter so that the LLM can do this step
    more easily.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**args_schema**（Pydantic BaseModel）：例如，工具可能会使用一个自定义函数，其输入参数必须从用户的查询中提取。我们可以提供更多关于每个参数的信息，以便LLM可以更容易地完成这一步骤。'
- en: How to define a tool
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何定义工具
- en: There are **multiple approaches to defining a tool** that we will look at in
    this article. First, we import the necessary libraries and instantiate an OpenAI
    model.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有**多种方法定义工具**，我们将在这篇文章中探讨。首先，我们导入必要的库并实例化一个OpenAI模型。
- en: To do this you will need a token, you can see in my previous article how to
    get it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，你需要一个令牌，你可以在我之前的文章中看到如何获得它。
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**The first way to instantiate a tool is to use the Tool class.**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**实例化工具的第一种方法是使用Tool类。**'
- en: '**Suppose we want to give the tool the ability to search the web for information,
    to do this we will use some Google API called SerpAPI**, you can register and
    get the API here: [https://serpapi.com/](https://serpapi.com/)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**假设我们想给工具增加搜索网络信息的能力，为此我们将使用一个叫SerpAPI的Google API**，你可以在这里注册并获得API：[https://serpapi.com/](https://serpapi.com/)'
- en: Let’s instantiate a SerpAPIWrapper class, and define the tool with the from_function
    method.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实例化一个SerpAPIWrapper类，并用from_function方法定义工具。
- en: In the func field, we need to put a pointer to the method we want to launch
    using this tool, which is the run method of SerpAPI. And as we have seen we give
    a name and description to the tool. It is easier to do than explain it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在func字段中，我们需要放置一个指向我们希望使用该工具启动的方法的指针，即SerpAPI的run方法。正如我们所见，我们给工具起了一个名字和描述。这样做比解释要简单。
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we can provide our agent with the list of tools created, in this case only
    one.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以提供给我们的代理创建的工具列表，这里只有一个。
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Custom Tools
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义工具
- en: The clearest method in my opinion for creating a custom tool is to inherit the
    BaseTool class.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，创建自定义工具最清晰的方法是继承BaseTool类。
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You see this is the implementation of a custom tool, which will be used whenever
    the user asks a question regarding Medium. However, the returned string will not
    be exactly what I set up because it will be processed further by the Large Language
    Model.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到这是一个自定义工具的实现，每当用户询问关于Medium的问题时，它就会被使用。然而，返回的字符串不会完全是我设置的内容，因为它会被大型语言模型进一步处理。
- en: If we want to return something directly just add a “return_direct” field in
    the following way.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想直接返回某些内容，只需添加一个“return_direct”字段，如下所示。
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Even if we don’t use the _arun method (which is useful for asynchronous calling)
    we still have to implement it because BaseTool is an abstract class, and if we
    don’t implement all the abstract methods we’ll get an error.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们不使用_arun方法（它对异步调用很有用），我们仍然需要实现它，因为BaseTool是一个抽象类，如果我们不实现所有的抽象方法，将会出现错误。
- en: Real Life Example
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实际案例
- en: One day a friend of mine said, “Hey Marcello, since you do AI and that kind
    of stuff, why don’t you make me a **chatbot, which when required returns the doctors’
    working hours, and books appointments?**”
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有一天，一个朋友对我说：“嘿Marcello，既然你做AI这类的东西，为什么不帮我做一个**聊天机器人，当需要时返回医生的工作时间，并预约**？”
- en: The first thing I thought of to solve this problem is to use LangChain and let
    the LLM interact with the user, and then as soon as the model understands that
    the user has requested to see the working hours it will just return a CSV file
    (or dataframe if you like).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我解决这个问题的第一个想法是使用LangChain，并让LLM与用户互动，然后只要模型明白用户要求查看工作时间，它就会返回一个CSV文件（或者如果你愿意的话是数据框）。
- en: So the same thing can be used for this use case as well. Suppose we have a CSV
    file called, work_time.csv
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所以同样的东西也可以用于这个用例。假设我们有一个叫做work_time.csv的CSV文件。
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And just like that, a prototype of the app my friend wanted is ready in just
    a few lines of code! Obviously, work with a good front-end developer to make it
    look better!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，我朋友想要的应用程序原型只用了几行代码就准备好了！显然，和一个好的前端开发人员合作，让它看起来更好！
- en: Final Thought
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终思考
- en: LangChain is a recent library that allows us to use the power of LLMs in different
    contexts.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: LangChain是一个最近的库，它允许我们在不同的环境中使用LLM的强大功能。
- en: I find it very useful to be able to use an LLM to understand the context, to
    **understand what the user is requesting, and then to run my own custom function
    to actually solve the task**.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现能够使用LLM来理解上下文，**理解用户的请求，然后运行我自己的自定义函数以实际解决任务**是非常有用的。
- en: This will allow you to write code that is versatile. To add a feature to your
    app all you need to do is **write a function and tell the model to use this function
    when it thinks it is needed**, and you are done!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使你能够编写灵活的代码。要为你的应用程序添加功能，你只需**编写一个函数并告诉模型在认为需要时使用这个函数**，这样就完成了！
- en: If you were interested in this article follow me on Medium!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这篇文章感兴趣，请在Medium上关注我！
- en: 💼 [Linkedin](https://www.linkedin.com/in/marcello-politi/) ️| 🐦 [Twitter](https://twitter.com/_March08_)
    | [💻](https://emojiterra.com/laptop-computer/) [Website](https://marcello-politi.super.site/)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 💼 [Linkedin](https://www.linkedin.com/in/marcello-politi/) ️| 🐦 [Twitter](https://twitter.com/_March08_)
    | [💻](https://emojiterra.com/laptop-computer/) [网站](https://marcello-politi.super.site/)
