["```py\nSELECT\n  product_id,\n  date,\n  SUM(revenue) OVER (PARTITION BY product_id ORDER BY date) AS running_total\nFROM\n  sales\nWHERE\n  product_id = 123;\n```", "```py\nSELECT\n  product_id,\n  date,\n  SUM(revenue) AS total_revenue\nFROM\n  sales\nGROUP BY\n  product_id,\n  date\nWHERE\n  product_id = 123;\n```", "```py\nWITH regional_sales AS (\n    SELECT region, SUM(amount) AS total_sales\n    FROM orders\n    GROUP BY region\n), top_regions AS (\n    SELECT region\n    FROM regional_sales\n    WHERE total_sales > (SELECT SUM(total_sales)/10 FROM regional_sales)\n)\nSELECT region,\n       product,\n       SUM(quantity) AS product_units,\n       SUM(amount) AS product_sales\nFROM orders\nWHERE region IN (SELECT region FROM top_regions)\nGROUP BY region, product;\n```", "```py\nSELECT region,\n       product,\n       SUM(quantity) AS product_units,\n       SUM(amount) AS product_sales\nFROM orders\nWHERE region IN (\n    SELECT region\n    FROM (\n        SELECT region, SUM(amount) AS total_sales\n        FROM orders\n        GROUP BY region\n    ) regional_sales\n    WHERE total_sales > (\n        SELECT SUM(total_sales)/10\n        FROM (\n            SELECT region, SUM(amount) AS total_sales\n            FROM orders\n            GROUP BY region\n        ) regional_sales_sum\n    )\n)\nGROUP BY region, product;\n```", "```py\nWITH RECURSIVE category_tree(id, name, parent_id, depth, path) AS (\n  SELECT id, name, parent_id, 1, ARRAY[id]\n  FROM categories\n  WHERE parent_id IS NULL\n  UNION ALL\n  SELECT categories.id, categories.name, categories.parent_id, category_tree.depth + 1, path || categories.id\n  FROM categories\n  JOIN category_tree ON categories.parent_id = category_tree.id\n)\nSELECT id, name, parent_id, depth, path\nFROM category_tree;\n```", "```py\nSELECT * FROM orders WHERE order_date = '2022-03-01';\n```", "```py\nEXEC SQL BEGIN DECLARE SECTION;\nconst char *stmt = \"SELECT * FROM orders WHERE order_date BETWEEN ? AND ?\";\nDATE start_date, end_date;\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL PREPARE mystmt FROM :stmt;\n\nEXEC SQL EXECUTE mystmt USING :start_date, :end_date;\n```", "```py\nDECLARE\n    cur_orders CURSOR FOR \n        SELECT order_id, product_id, quantity\n        FROM order_details\n        WHERE product_id = 456;\n\n    product_inventory INTEGER;\nBEGIN\n    OPEN cur_orders;\n    LOOP\n        FETCH cur_orders INTO order_id, product_id, quantity;\n        EXIT WHEN NOT FOUND;\n        SELECT inventory INTO product_inventory FROM products WHERE product_id = 456;\n        product_inventory := product_inventory - quantity;\n        UPDATE products SET inventory = product_inventory WHERE product_id = 456;\n    END LOOP;\n    CLOSE cur_orders;\n\n    -- do something after updating the inventory, such as logging the changes\nEND;\n```"]