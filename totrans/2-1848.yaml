- en: Should You Use Slots? How Slots Affect Your Class, and When and How to Use Them
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/should-you-use-slots-how-slots-affect-your-class-when-and-how-to-use-ab3f118abc71](https://towardsdatascience.com/should-you-use-slots-how-slots-affect-your-class-when-and-how-to-use-ab3f118abc71)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: One line of code for a 20% performance increase?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://mikehuls.medium.com/?source=post_page-----ab3f118abc71--------------------------------)[![Mike
    Huls](../Images/8f9f55a0d25db00799c5d37383b7f5b6.png)](https://mikehuls.medium.com/?source=post_page-----ab3f118abc71--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ab3f118abc71--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ab3f118abc71--------------------------------)
    [Mike Huls](https://mikehuls.medium.com/?source=post_page-----ab3f118abc71--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ab3f118abc71--------------------------------)
    ·6 min read·Aug 12, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a7016fdf3f746ca53c9033b17ddc4026.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by [Sébastien Goldberg](https://unsplash.com/@sebastiengoldberg) on [Unsplash](https://unsplash.com/photos/J8N79W2EdB8))
  prefs: []
  type: TYPE_NORMAL
- en: Slots are a mechanism that allow you to declare class attributes and restrict
    the creation of other attributes. You establish which attributes your class has,
    preventing developers from adding new attributes dynamically. This generally leads
    to a **20% speed increase.**
  prefs: []
  type: TYPE_NORMAL
- en: Slots are especially beneficial in programs where you have a large number of
    class instances with a known set of attributes. Think of a video games or physics
    simulations; in these situations you track a large number of entities over time.
  prefs: []
  type: TYPE_NORMAL
- en: You can add slots to your class **adding a single line of code** but is this
    always a good idea? In this article we’ll look a **why** and **how** using **slots**
    make your classes that much faster and when to use them. The overall goal is to
    better understand how Python’s class internals work. Let’s code!
  prefs: []
  type: TYPE_NORMAL
- en: Slots make Python classes faster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can improve a class’ memory usage and performance by making it use `slots`.
    A class with slots takes up less memory and executes faster.
  prefs: []
  type: TYPE_NORMAL
- en: How to make my class use slots?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Telling Python to make a class use slots is very simple. You just add a special
    attribute called `__slots__` that specifies the names of all other attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the class above we see that `Person` has three attributes: `first_name`,
    `last_name`, and `age`. We can tell Python that we want the `Person` class to
    use slots by adding the `__slots__` attribute. This attribute has to specify the
    names of all other attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/args-vs-kwargs-which-is-the-fastest-way-to-call-a-function-in-python-afb2e817120?source=post_page-----ab3f118abc71--------------------------------)
    [## Args vs kwargs: which is the fastest way to call a function in Python?'
  prefs: []
  type: TYPE_NORMAL
- en: A clear demonstration of the timeit module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/args-vs-kwargs-which-is-the-fastest-way-to-call-a-function-in-python-afb2e817120?source=post_page-----ab3f118abc71--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: How much faster are slotted classes?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Person` class we’ve used above is almost **60% smaller** using slots (488
    bytes to 206 bytes).
  prefs: []
  type: TYPE_NORMAL
- en: With regards to speed, I’ve benchmarked instantiation, accessing and assignment.
    I’ve found **speed increases up to 20%**! You have to take these results with
    a grain of salt; though these percentages seem pretty impressive these 20% represent
    only **0.44 seconds for instantiation the class 10 million times**. This comes
    down to a **negligible 44 nanoseconds** per instance (roughly 30.3 million times
    smaller than a second).
  prefs: []
  type: TYPE_NORMAL
- en: See code for benchmarking [**memory**](https://gist.github.com/mike-huls/75ad4a7840e36a33606192aeabe4a1c7)and
    [**speed**](https://gist.github.com/mike-huls/45593ba9c642d6a85b6a7ef79530a6dc);
  prefs: []
  type: TYPE_NORMAL
- en: '[](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e?source=post_page-----ab3f118abc71--------------------------------)
    [## Why Python is so slow and how to speed it up'
  prefs: []
  type: TYPE_NORMAL
- en: Take a look under the hood to see where Python’s bottlenecks lie
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e?source=post_page-----ab3f118abc71--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Why are slotted classes smaller and faster?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This has to do with Python classes’ **dynamic dictionary**. This dictionary
    lets you assign attributes to Python classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the example above we define a class without any attributes, create an instance
    of that and then dynamically create the `age` attribute and assign it a value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the hood Python stores all attribute information in a dictionary. This
    dictionary is available by calling the `__dict__` magic method on the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The dynamic dict makes Python classes pretty flexible but it has a downside:
    using the attributes makes Python search in this dict, which is relatively slow.'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/thread-your-python-program-with-two-lines-of-code-3b474407dbb8?source=post_page-----ab3f118abc71--------------------------------)
    [## Thread Your Python Program with Two Lines of Code'
  prefs: []
  type: TYPE_NORMAL
- en: Speed up your program by doing multiple things simultaneously
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/thread-your-python-program-with-two-lines-of-code-3b474407dbb8?source=post_page-----ab3f118abc71--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: How do slots affect the dynamic dict?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you tell Python to slot your class, the **dynamic dict is not created**.
    Instead Python creates a **fixed-size array** that contains the references to
    your variables. This is why you have to pass the names of your attributes to the
    `__slots__` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Not only is accessing this array much faster, it also takes up less memory space.
    A smaller memory footprint also has beneficial effects on memory allocation and
    garbage collection.
  prefs: []
  type: TYPE_NORMAL
- en: What are the side effects of slots?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Slots change your class**; it becomes a bit more **inflexible** since your
    class become a bit more **static**. This means that you cannot add attributes
    at runtime; you have to specify your attributes beforehand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a (albeit bit messy) way around this: by adding the value `"__dict__"`
    to your `__slots__` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The last thing to keep an eye on is the fact that some packages may expect “normal”
    Python classes in stead of slotted ones.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/cython-for-data-science-6-steps-to-make-this-pandas-dataframe-operation-over-100x-faster-1dadd905a00b?source=post_page-----ab3f118abc71--------------------------------)
    [## 6 Steps to Make this Pandas Dataframe Operation 100 Times Faster'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cython for Data Science: Combine Pandas with Cython for an incredible speed
    improvement'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/cython-for-data-science-6-steps-to-make-this-pandas-dataframe-operation-over-100x-faster-1dadd905a00b?source=post_page-----ab3f118abc71--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Does this also work with dataclasses?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Yes! Starting from Python 3.10 you can also add **slot** dataclasses. It’s
    even easier with dataclasses, just add a single argument to the @dataclass decorator.
    Just define your dataclass like below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: What are the advantages of using slots?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Obviously the **speed** and **memory** efficiency but maybe also **safety**:
    if I want to overwrite the `age` attribute on my class but make a typo and type
    `mike.aage = 34` then unslotted classes will just create a new attribute, keeping
    the `age` attribute unchanged. When you use slots Python will throw an error because
    it doesn’t know an `aage` attribute on that class.'
  prefs: []
  type: TYPE_NORMAL
- en: When to use slots?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**SPEED**: Although slots speed up you class percentage-wise, the absolute
    time increase is pretty negligible per operation. Therefore slots become more
    attractive to use if you have to create **a lot** of instances, or have to overwrite
    or access attributes many, many times.'
  prefs: []
  type: TYPE_NORMAL
- en: '**MEMORY**: If you’re low on memory and can save every byte it may be beneficial
    to use slots since they cut the amount of memory used significantly. Our simple
    class was reduces by 60%.'
  prefs: []
  type: TYPE_NORMAL
- en: '**SAFETY:** Slots prevent you from using wrong attributes and creating new
    attributes dynamically. Slotted classes throw an error if you try to modify an
    unknown attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/cython-for-absolute-beginners-30x-faster-code-in-two-simple-steps-bbb6c10d06ad?source=post_page-----ab3f118abc71--------------------------------)
    [## Cython for absolute beginners: 30x faster code in two simple steps'
  prefs: []
  type: TYPE_NORMAL
- en: Easy Python code compilation for blazingly fast applications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/cython-for-absolute-beginners-30x-faster-code-in-two-simple-steps-bbb6c10d06ad?source=post_page-----ab3f118abc71--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we’ve seen in this article slots affect your classes in three ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SIZE**: slots eliminate the need for Python to create the dynamic dictionary
    but instead relies on a **smaller**, fixed-size array, which indirectly speeds
    up your app by decreasing demand on garbage collection for example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SPEED**: slots allow for accessing the memory directly, bypassing the need
    to search the dictionary, which is much slower. Speed improvements are pretty
    marginal in an absolute sense; saving a few nanoseconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FLEXIBILITY**: slots prevent adding attributes at runtime so your classes
    become a bit less flexible. This can also be a good thing since your code may
    get messy when you use dynamic attribute creation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In my opinion, reduced flexibility is a downside I don’t experience often:
    I never create attributes dynamically and I like that slots keep the attributes
    static. Therefore I use slots wherever possible. In the worst case a dependency
    trips up but in that case it’s very easy to remove the slots again.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I hope this article was as clear as I hope it to be but if this is not the
    case please let me know what I can do to clarify further. In the meantime, check
    out my [other articles](https://mikehuls.com/articles) on all kinds of programming-related
    topics like these:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Git for absolute beginners: understanding Git with the help of a video game](https://mikehuls.medium.com/git-for-absolute-beginners-understanding-git-with-the-help-of-a-video-game-88826054459a)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Create and publish your own Python package](https://mikehuls.medium.com/create-and-publish-your-own-python-package-ea45bee41cdc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Create a fast auto-documented, maintainable, and easy-to-use Python API in
    5 lines of code with FastAPI](https://mikehuls.medium.com/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A complete guide to using environment variables and files with docker and
    compose](https://mikehuls.medium.com/a-complete-guide-to-using-environment-variables-and-files-with-docker-and-compose-4549c21dc6af)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Happy coding!
  prefs: []
  type: TYPE_NORMAL
- en: — Mike
  prefs: []
  type: TYPE_NORMAL
- en: '*P.S: like what I’m doing?* [*Follow me!*](https://mikehuls.medium.com/membership)'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://mikehuls.medium.com/membership?source=post_page-----ab3f118abc71--------------------------------)
    [## Join Medium with my referral link — Mike Huls'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Mike Huls (and thousands of other writers on Medium).
    Your membership fee directly supports Mike…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: mikehuls.medium.com](https://mikehuls.medium.com/membership?source=post_page-----ab3f118abc71--------------------------------)
  prefs: []
  type: TYPE_NORMAL
