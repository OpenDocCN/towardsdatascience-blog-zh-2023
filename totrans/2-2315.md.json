["```py\nvar recognition = new SpeechRecognition();\n```", "```py\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n\nwindow.onload = function () {\n  if (typeof SpeechRecognition === “undefined”) {  //Check browser can do speech recognition\n    console.log(“Speech api failed”);\n  } else {\n    console.log(“Speech api ok”);\n    const recognition = new SpeechRecognition();  //Create speech recogn object\n    recognition.continuous = true;                //Define behaviour and properties, for ex. ask for continuous ASR,\n    recognition.interimResults = true;            //Show partial results of ASR (i.e. when results are not yet final because speech recognition keeps going as audio progresses)\n    recognition.lang = \"en-US\";                   //Language must be defined upfront\n    recognition.onresult = (event) => {           //Triggered when a word or sentence has been recognized\n      const res = event.results[last];            //If there's a list of several recognized words/sentences, retrieve the last one\n      var text = res[0].transcript.trim();        //Extract and clean up text\n      … //Process text\n    }\n    recognition.start();            //With all setup ready, start recognition\n  }\n}\n```", "```py\nvar synthesis = window.speechSynthesis;\n```", "```py\nvar utterance = new SpeechSynthesisUtterance(‘Hello world, I'm talking thanks to the Web Speech API!’);\nutterance.onstart = function(event) {\n  console.log(‘Speech started’);\n};\nutterance.onend = function(event) {\n  console.log(‘Speech ended’);\n};\nsynthesis.speak(utterance);\n```", "```py\nfunction speakup(TextToSpeak) {\n  if (“speechSynthesis” in window) {                            //Check TTS is supported\n    const toSpeak = new SpeechSynthesisUtterance(TextToSpeak);  //Create utterance\n    toSpeak.lang = “en-US”;                                     //Set language\n    window.speechSynthesis.speak(toSpeak);                      //Speak!\n  } else {\n    console.log(“Speech synthesis not supported by browser.”);\n  }\n}\n```", "```py\nlet theprompt = [];         //Initializing an array that will contain the prompt\n\ntheprompt.push({\n  role: \"system\",           //Tell the mode what it will be doing\n  content: \"You receive texts from speech recognition and act accordingly by triggering commands, effectively correcting speech recognition as in the examples provided below. If you don't understand the request or the request is not in the list, you run the command didntUnderstand()\",\n  });\n\ntheprompt.push(                                      //Provide examples from hereon\n { role: “user”, content: “Make molecules bigger” },\n { role: “assistant”, content: “scale(+)” }\n);\ntheprompt.push(\n { role: \"user\", content: \"Zoom in\" },\n { role: \"assistant\", content: \"scale(+)\" }\n);\ntheprompt.push(\n { role: \"user\", content: \"Enlarge\" },\n { role: \"assistant\", content: \"scale(+)\" }\n);\ntheprompt.push(\n { role: \"user\", content: \"Zoom out\" },\n { role: \"assistant\", content: \"scale(-)\" }\n);\ntheprompt.push(\n { role: \"user\", content: \"Make smaller\" },\n { role: \"assistant\", content: \"scale(-)\" }\n);\n```", "```py\ntheprompt.push(\n { role: \"user\", content: \"Minimize with ANI\" },\n { role: \"assistant\", content: \"minimize(ANI)\" }\n);\ntheprompt.push(\n { role: \"user\", content: \"Minimize with Annie\" },\n { role: \"assistant\", content: \"minimize(ANI)\" }\n);\ntheprompt.push(\n { role: \"user\", content: \"Mini mice with Annie\" },\n { role: \"assistant\", content: \"minimize(ANI)\" }\n);\n...etc.\n```", "```py\nfetch(`https://api.openai.com/v1/chat/completions`, {    //Main call to speech API\n  body: JSON.stringify({\n  model: “gpt-3.5-turbo”,                     //Or GPT-4, as of December 2023\n  messages: theprompt,                    //The prompt just created\n  temperature: 0,                         //Keep this low to avoid hallucination\n  max_tokens: 20,                         //The outputs should be small commands, so this should be low\n}),\n  method: “POST”,\n  headers: {\n    “content-type”: “application/json”,\n    Authorization: “Bearer “ + stringWithYourAPIKey,    //API key from openAI for GPT models!\n  },\n}).then((response) => {\n  if (response.ok) {\n    response.json().then((json) => {\n    var command = json.choices[0].message.content.trim();    //Extract text, which will contain commands\n    console.log(command);\n    if (command == ....                 //List and execute tasks \n```"]