- en: 'Pandas: Work on Your dtypes!'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Pandas: 处理你的数据类型！'
- en: 原文：[https://towardsdatascience.com/pandas-work-on-your-dtypes-20d9d32d2e42](https://towardsdatascience.com/pandas-work-on-your-dtypes-20d9d32d2e42)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/pandas-work-on-your-dtypes-20d9d32d2e42](https://towardsdatascience.com/pandas-work-on-your-dtypes-20d9d32d2e42)
- en: Having the right dtypes in pandas is a must for clean data-analysis. Here’s
    how and why.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 pandas 中拥有正确的数据类型是进行干净数据分析的必需条件。下面是原因和方法。
- en: '[](https://mocquin.medium.com/?source=post_page-----20d9d32d2e42--------------------------------)[![Yoann
    Mocquin](../Images/b30a0f70c56972aabd2bc0a74baa90bb.png)](https://mocquin.medium.com/?source=post_page-----20d9d32d2e42--------------------------------)[](https://towardsdatascience.com/?source=post_page-----20d9d32d2e42--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----20d9d32d2e42--------------------------------)
    [Yoann Mocquin](https://mocquin.medium.com/?source=post_page-----20d9d32d2e42--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mocquin.medium.com/?source=post_page-----20d9d32d2e42--------------------------------)[![Yoann
    Mocquin](../Images/b30a0f70c56972aabd2bc0a74baa90bb.png)](https://mocquin.medium.com/?source=post_page-----20d9d32d2e42--------------------------------)[](https://towardsdatascience.com/?source=post_page-----20d9d32d2e42--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----20d9d32d2e42--------------------------------)
    [Yoann Mocquin](https://mocquin.medium.com/?source=post_page-----20d9d32d2e42--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----20d9d32d2e42--------------------------------)
    ·8 min read·Sep 26, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----20d9d32d2e42--------------------------------)
    ·阅读时间 8 分钟·2023 年 9 月 26 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '**Having appropriate dtypes for your Series and DataFrame is very important
    for many reasons:**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**为你的 Series 和 DataFrame 选择合适的数据类型非常重要，原因有很多：**'
- en: '**Memory management**: using the right dtype for a particular *series* can
    dramatically reduce its memory usage, and by extension this also applies to *dataframes*'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存管理**：为特定的*系列*选择正确的数据类型可以显著减少内存使用，进一步地，这也适用于*数据框*'
- en: '**Interpretation**: anyone else (human or computer) will make assumptions on
    your data based on its dtype: if a column full of integers is stored as a string,
    they will treat it as strings, not integers'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解释**：其他任何人（无论是人还是计算机）都会根据数据类型对你的数据做出假设：如果一列全是整数却被存储为字符串，它们会将其视为字符串，而不是整数'
- en: '**It enforces you to have clean data**, like dealing with missing values or
    mis-recorded values. This will ease the data-crunching down the road a lot'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它强制要求你拥有干净的数据**，例如处理缺失值或记录错误的值。这将大大简化后续的数据处理'
- en: And there are probably many more reasons, can you name a few? If so please write
    it in a comment.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 可能还有很多其他原因，你能列举一些吗？如果可以，请在评论中写出来。
- en: '**In this first post of my pandas series, I want to review the basics of pandas
    datatypes — or dtypes.**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**在我系列 pandas 的第一篇文章中，我想回顾 pandas 数据类型的基础知识。**'
- en: '![](../Images/30c0a25974ae9b6e906206459f18ef8f.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/30c0a25974ae9b6e906206459f18ef8f.png)'
- en: Photo by [Chris Curry](https://unsplash.com/@chriscurry92?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Chris Curry](https://unsplash.com/@chriscurry92?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: We will first review the available dtypes *pandas* offers, then I’ll focus on
    4 useful dtypes that will fulfill 95% of your needs, namely **numerical dtypes,
    boolean dtype, string dtype, and categorical dtypes**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先会回顾 pandas 提供的可用数据类型，然后我将重点介绍 4 种有用的数据类型，它们能满足你 95% 的需求，即**数值数据类型、布尔数据类型、字符串数据类型和分类数据类型**。
- en: '**The end goal of this first post is to make you more comfortable with the
    various data types availables in pandas and what are their differences.**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**这篇文章的最终目标是让你对 pandas 中各种数据类型及其差异更加熟悉。**'
- en: '**If you’re interested in pandas and time-series, make sure to check out my
    Fourier-transform for time-serie posts:**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你对 pandas 和时间序列感兴趣，确保查看我关于时间序列傅里叶变换的文章：**'
- en: '**Review how the convolution relate to the Fourier transform and how fast it
    is**:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回顾卷积如何与傅里叶变换相关以及它的速度**：'
- en: '[](/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----20d9d32d2e42--------------------------------)
    [## Fourier transform for time-series: fast convolution explained with numpy'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----20d9d32d2e42--------------------------------)
    [## 时间序列的傅里叶变换：使用 numpy 解释快速卷积'
- en: 10000-times faster convolution using Fourier transform
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用傅里叶变换实现 10000 倍更快的卷积
- en: towardsdatascience.com](/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----20d9d32d2e42--------------------------------)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----20d9d32d2e42--------------------------------)'
- en: '**Deepen your understanding of convolution using image examples:**'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过图像示例深化你对卷积的理解：**'
- en: '[](/fourier-transform-for-time-series-about-image-convolution-and-scipy-5e8fa1279603?source=post_page-----20d9d32d2e42--------------------------------)
    [## Fourier-Transform for Time Series: About Image Convolution and SciPy'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/fourier-transform-for-time-series-about-image-convolution-and-scipy-5e8fa1279603?source=post_page-----20d9d32d2e42--------------------------------)
    [## 傅里叶变换用于时间序列：关于图像卷积和 SciPy]'
- en: Fourier-transform convolution also applies to images
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 傅里叶变换卷积同样适用于图像
- en: towardsdatascience.com](/fourier-transform-for-time-series-about-image-convolution-and-scipy-5e8fa1279603?source=post_page-----20d9d32d2e42--------------------------------)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/fourier-transform-for-time-series-about-image-convolution-and-scipy-5e8fa1279603?source=post_page-----20d9d32d2e42--------------------------------)'
- en: '**Understand how the Fourier-transform can be visualy understood using a vector-visual
    approach:**'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**了解傅里叶变换如何通过向量可视化方法进行直观理解：**'
- en: '[](/fourier-transform-for-time-series-plotting-complex-numbers-9743ffe8a8bb?source=post_page-----20d9d32d2e42--------------------------------)
    [## Fourier-transform for time-series : plotting complex numbers'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/fourier-transform-for-time-series-plotting-complex-numbers-9743ffe8a8bb?source=post_page-----20d9d32d2e42--------------------------------)
    [## 傅里叶变换用于时间序列：绘制复数]'
- en: Plot the Fourier-transform algorithm to understand it.
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘制傅里叶变换算法以理解它。
- en: towardsdatascience.com](/fourier-transform-for-time-series-plotting-complex-numbers-9743ffe8a8bb?source=post_page-----20d9d32d2e42--------------------------------)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/fourier-transform-for-time-series-plotting-complex-numbers-9743ffe8a8bb?source=post_page-----20d9d32d2e42--------------------------------)'
- en: '**See how detrending techniques can improve greatly the output of the Fourier-transform:**'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查看去趋势技术如何显著改善傅里叶变换的输出：**'
- en: '[](/fourier-transform-for-time-series-detrending-f0f470f4bf14?source=post_page-----20d9d32d2e42--------------------------------)
    [## Fourier-transform for time-series : detrending'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/fourier-transform-for-time-series-detrending-f0f470f4bf14?source=post_page-----20d9d32d2e42--------------------------------)
    [## 傅里叶变换用于时间序列：去趋势]'
- en: Detrending your time-series might be a game-changer.
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 去趋势你的时间序列可能是一个改变游戏规则的因素。
- en: towardsdatascience.com](/fourier-transform-for-time-series-detrending-f0f470f4bf14?source=post_page-----20d9d32d2e42--------------------------------)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/fourier-transform-for-time-series-detrending-f0f470f4bf14?source=post_page-----20d9d32d2e42--------------------------------)'
- en: '**Review of the available dtypes**'
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**回顾可用的数据类型**'
- en: 'Let’s take a minute to review the dtypes pandas offers. Since *pandas* is based
    on *numpy*, they can be splitted in 2 categories:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花一分钟回顾一下 pandas 提供的数据类型。由于 *pandas* 基于 *numpy*，因此它们可以分为两类：
- en: '**numpy-based dtypes**'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于 numpy 的数据类型**'
- en: '**pandas-specific dtypes**'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pandas 特定的数据类型**'
- en: Under the hood, *pandas* stores your data in *numpy* arrays, hence uses numpy’s
    dtypes. We can consider those the ultimate low-level dtypes. But for convenience,
    *pandas* also exposes higher-level dtypes that were specifically created by the
    *pandas* team.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在底层，*pandas* 将你的数据存储在 *numpy* 数组中，因此使用 numpy 的数据类型。我们可以将这些视为终极低级数据类型。但为了方便起见，*pandas*
    还暴露了由 *pandas* 团队特别创建的高级数据类型。
- en: The idea is that from your point of view, the end-user, all dtypes (numpy-based
    or pandas-specific) are equally considered as valid dtypes for your *series* and
    *dataframe*s.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 想法是，从你的角度来看，所有数据类型（无论是基于 numpy 还是 pandas 特定的）都被视为对你的 *series* 和 *dataframe*
    有效的数据类型。
- en: '**The *numpy*-based dtypes are the following:**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**基于 *numpy* 的数据类型如下：**'
- en: '`**float**`: to store floating-point numbers (0.0245)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**float**`：用于存储浮点数（0.0245）'
- en: '`**int**`: to store integer numbers (1, -6)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**int**`：用于存储整数（1，-6）'
- en: '`**bool**`: to store booleans (True/False)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**bool**`：用于存储布尔值（True/False）'
- en: '`**datetime64[ns]**`: to store an instant of our timeline (date and time of
    day)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**datetime64[ns]**`：用于存储时间线上的一个时刻（日期和时间）'
- en: '`**timedelta64[ns]**`: to store a relative duration (this complements the datettime
    dtype)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**timedelta64[ns]**`：用于存储相对持续时间（这补充了 datettime 数据类型）'
- en: '`**object**`: can store literally any python object'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**object**`：可以存储任何 Python 对象'
- en: '[The actual complete list of numpy dtypes](https://numpy.org/doc/stable/user/basics.types.html)
    is bigger than that, but we’ll stick to those above.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[实际的 numpy 数据类型完整列表](https://numpy.org/doc/stable/user/basics.types.html) 比这更大，但我们将坚持上述内容。'
- en: '**Then *pandas* comes into play and exposes many new dtypes, including :**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**然后 *pandas* 进入并暴露了许多新数据类型，包括：**'
- en: '`**string**`: another way to store strings'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**string**`：另一种存储字符串的方式'
- en: '`**Nullable-int**` and `**Nullable-float**` that are better at handling missing
    values than *numpy*’s `**int**` and `**float**`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**Nullable-int**` 和 `**Nullable-float**` 比 *numpy* 的 `**int**` 和 `**float**`
    更适合处理缺失值'
- en: '`**boolean**`: boolean that is better at handling missing values than *numpy*’s
    `**bool**`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**boolean**`：比 *numpy* 的 `**bool**` 更适合处理缺失值的布尔类型'
- en: '`**categorical**`: a dtype that is appropriate for data than can only have
    specific values and can handle missing entries'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**categorical**`：适用于只能有特定值并能处理缺失条目的数据类型'
- en: Again, [other dtypes are defined in pandas,](https://pandas.pydata.org/docs/user_guide/basics.html#dtypes)
    but I want to focus on these 4 because I found that there are the most useful.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，[pandas 中定义了其他数据类型，](https://pandas.pydata.org/docs/user_guide/basics.html#dtypes)
    但我想专注于这四种，因为我发现它们最有用。
- en: '**How dtypes are set**'
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**数据类型的设置方式**'
- en: 'In practice, the dtype of your data can have 2 origins:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你的数据类型可以有两种来源：
- en: '**Either you didn’t specify the dtype**, and *pandas* made an assumption when
    the series/dataframe were created (whether it’s from loading a csv or creating
    object like *`s = pd.Series([1, 2, 3])`*). This will work well about 50% to 80%
    of the time, depending on how well the input data is formatted.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**要么你没有指定数据类型**，而 *pandas* 在创建系列/数据框时做了假设（无论是从加载 csv 还是创建类似 *`s = pd.Series([1,
    2, 3])`* 的对象）。这种情况通常会有 50% 到 80% 的成功率，具体取决于输入数据的格式。'
- en: '**Either you specify the dtype**, by explicitly telling pandas what dtype to
    use for each column/series'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**要么你指定数据类型**，通过明确告知 pandas 每个列/系列使用什么数据类型'
- en: 'For the first case:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一种情况：
- en: '- **PROS**: simpler and faster'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '- **优点**：更简单更快速'
- en: '- **CONS**: you don’t know what happened unless you review each dtype afterward,
    you might not have the most-appropriate dtype (like `object` because pandas did
    not figure what the column was about), and even worse you might very ill-appropriate
    dtype for some columns'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '- **缺点**：除非你在之后审查每个数据类型，否则你不知道发生了什么，可能没有最合适的数据类型（例如 `object` 因为 pandas 没有确定列的内容），甚至可能为某些列选择了非常不合适的数据类型'
- en: 'For the second case:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第二种情况：
- en: '- **PROS**: you know exactly what happened to your data, you know exactly what
    dtypes the columns have, you know exactly how you treated missing and ill-conditionned
    values. In other words, your data is ready for actual processing'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '- **优点**：你准确知道数据发生了什么，确切知道列的数据类型，知道你是如何处理缺失和不良条件值的。换句话说，你的数据已经准备好进行实际处理'
- en: '- **CONS**: it takes more time, more code'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '- **缺点**：需要更多时间和更多代码'
- en: '**In the end, I’d recommend the following: first, let pandas infer dtypes and
    do its best. Then review each columns and manually set the dtypes you think should
    be changed.**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**最后，我建议以下做法：首先，让 pandas 推断数据类型并尽力而为。然后审查每一列，并手动设置你认为应该更改的数据类型。**'
- en: '**We’ll see in the next post how to do all this, but for now I want to review
    the available dtypes and why they exist.**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们将在下一篇文章中讨论如何做所有这些，但现在我想回顾一下可用的数据类型及其存在的原因。**'
- en: '**Since most of the time I end up using only a subset of all the dtypes available,
    I’ll focus on those:**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**由于大多数情况下我最终只使用所有可用数据类型的一个子集，所以我会专注于这些：**'
- en: '**numerical dtypes, mostly float and int**'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数值数据类型，主要是 float 和 int**'
- en: '**boolean dtypes**'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布尔数据类型**'
- en: '**string-like (including string and object) dtypes**'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类似字符串的（包括字符串和对象）数据类型**'
- en: '**categorical dtype**'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类别数据类型**'
- en: '**Numerical-like dtypes**'
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**类似数值的数据类型**'
- en: 'Regarding numerical dtypes, *numpy* provides a solid base: integers and floating-point
    numbers dtypes, that also handle `*np.nan*`. Note also that by default, numerical
    dtypes used will be `int64` and `float64`. This might not be ideal for your data
    regarding memory usage and explicit allowed values for a given Series:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 关于数值数据类型，*numpy* 提供了一个坚实的基础：整数和浮点数数据类型，也能处理 `*np.nan*`。还要注意，默认使用的数值数据类型是 `int64`
    和 `float64`。这可能不适合你的数据，考虑到内存使用和给定系列的显式允许值：
- en: '[PRE0]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that as soon as `***np.nan***` is used, the dtypes is converted to float.
    For this reason, and some more, *pandas* also exposes dtypes that can handle missing
    values using the pandas-specific `***pd.NA***` and still keep the explicit underlying
    numerical dtype, like `***Int64Dtype***` ([rationale here](https://pandas.pydata.org/docs/user_guide/integer_na.html#nullable-integer-data-type)).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，一旦使用 `***np.nan***`，数据类型会被转换为 float。因此，*pandas* 还提供了能够处理缺失值并保持显式底层数值数据类型的数据类型，如
    `***Int64Dtype***`（[具体理由见这里](https://pandas.pydata.org/docs/user_guide/integer_na.html#nullable-integer-data-type)）。
- en: '[PRE1]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This way, we can have the best of both worlds: an explicit underlying numerical
    dtype (int64, float32, etc), and handle missing values with `***pd.NA***`.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们可以兼得两全：一个明确的底层数值数据类型（int64，float32 等），并使用 `***pd.NA***` 处理缺失值。
- en: '**Boolean-like dtypes**'
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**布尔类数据类型**'
- en: There are basically 2 dtypes that act like booleans, namely ‘***bool***’ and
    ‘***boolean***’.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，有 2 种数据类型类似于布尔值，即‘***bool***’ 和 ‘***boolean***’。
- en: ‘*bool*’ corresponds to standard *numpy*-based boolean, and hence cannot contain
    ‘***NA***’ since only ***True*** and ***False*** can be stored in a boolean-numpy
    array.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ‘*bool*’ 对应于标准的 *numpy* 布尔类型，因此不能包含‘***NA***’，因为布尔 numpy 数组只能存储 ***True*** 和
    ***False***。
- en: 'To handle ‘not-available’ entries — or ‘NA’- pandas exposes the dtype ‘***boolean***’,
    that can contain ‘NA’. See the example below:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理“不可用”条目——或“NA”——pandas 提供了数据类型‘***boolean***’，它可以包含‘NA’。见下面的示例：
- en: '[PRE2]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**String-like dtypes**'
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**字符串类数据类型**'
- en: Natively, strings can be stored in *numpy* arrays since we can use the ***`object***`
    dtype, which exists to handle “any python object”.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，字符串可以存储在 *numpy* 数组中，因为我们可以使用 ***`object`*** 数据类型，该数据类型用于处理“任何 Python 对象”。
- en: Strings differ from most other dtypes in that one cannot know the length of
    a string in advance, hence the necessary memory to allocate. That’s also the case
    for any custom python object, that be very simple or really complicated, and need
    various amounts of memory.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串与大多数其他数据类型不同，因为不能提前知道字符串的长度，因此也就无法预估所需的内存。这同样适用于任何自定义的 Python 对象，不论其简单还是复杂，都需要不同数量的内存。
- en: 'So we can use the ‘***object***’ dtype in pandas since it is available in *numpy*:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以在 pandas 中使用‘***object***’ 数据类型，因为它在 *numpy* 中是可用的：
- en: '[PRE3]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Additionally, *pandas* created a dtype that make the fact that the data is
    a string explicit: the `***StringDtype***` that can be specified as `***string***`,
    which is better since “explicit is better than implicit”, and interface better
    with the rest of pandas’ ecosystem ([rationale here](https://pandas.pydata.org/docs/user_guide/text.html#text-data-types)):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，*pandas* 创建了一种数据类型，使得数据是字符串这一点变得明确：`***StringDtype***`，可以指定为 `***string***`，这更好，因为“显式优于隐式”，并且与
    pandas 的其他生态系统接口更好（[理由在这里](https://pandas.pydata.org/docs/user_guide/text.html#text-data-types)）：
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Note that most of the time, you’ll need to challenge yourself in asking: do
    I really need that series to be stored as a string ? Are those strings just representation
    of other data, like numerical data or categorical data ? If so, you’ll want to
    convert those series dtypes. Subscribe to see my next post on how to do that!'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，大多数情况下，你需要挑战自己，问自己：我真的需要将这个系列存储为字符串吗？这些字符串是否只是其他数据的表示，比如数值数据或分类数据？如果是这样，你可能需要转换这些系列的数据类型。关注我的下一篇文章，了解如何做到这一点！
- en: '**The joker dtype: Categorical**'
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**万能数据类型：分类数据类型**'
- en: 'I’d suggest trying this: open up one of your datasets in pandas, review the
    columns one by one, and ask yourself: *could this feature be stored as a Categorical
    dtype* ?'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你试试这个方法：在 pandas 中打开你的一个数据集，一一检查列，并问自己：*这个特征是否可以存储为分类数据类型*？
- en: I’m willing to bet that you’ll say yes to that question more than you expected.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我敢打赌，你会比预期的更容易接受这个问题的答案。
- en: This dtypes is especially useful and suitable for things you usually stored
    as integer-like numbers (0, 1, 2, etc) and/or strings (*‘Male’/’Female’, ‘Dog’/’Cat’/’Other’*).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这种数据类型特别适用于通常存储为类似整数的数字（0，1，2 等）和/或字符串（*‘Male’/’Female’，‘Dog’/’Cat’/’Other’*）的内容。
- en: This dtypes can greatly improve speed and memory usage in some case. It also,
    again, makes it explicit to others (humans and computers) that this particular
    data represents a category and should be treated as such.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据类型在某些情况下可以显著提高速度和内存使用效率。它还再次明确告知他人（包括人类和计算机）这一特定数据表示一个类别，并应被如此处理。
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Wrap up**'
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Other dtypes are implemented in *pandas*, but I found that they are not used
    as much the ones above.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 其他数据类型在 *pandas* 中也有实现，但我发现它们的使用频率不如上述数据类型。
- en: '**So remember:**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**所以请记住：**'
- en: '**Good dtypes are critical to your processing, reviewing and setting the right
    ones as soon as possible will make your work down the road a lot easier for everyone.
    Also, it might save a lot of memory and processing complexity**'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**好的数据类型对于你的处理至关重要，尽早审查并设置合适的数据类型会使你未来的工作变得更加轻松。同时，它也可能节省大量内存和处理复杂性**'
- en: '**Before using `object` or `string` dtype, consider using `categorical` dtype**'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在使用 `object` 或 `string` 数据类型之前，考虑使用 `categorical` 数据类型**'
- en: '**If dealing with missing values or NaN, consider using pandas dtypes like
    `boolean` as opposed to numpy’s `bool`**'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如果处理缺失值或 NaN，请考虑使用 pandas 数据类型如 `boolean`，而不是 numpy 的 `bool`**'
- en: '**Only use `object` dtype if your data is complex and/or does not fit in any
    other dtype**'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅在数据复杂和/或不适合任何其他数据类型时使用 `object` 数据类型**'
- en: In the next post, we’ll see how to inspect the dtypes of existing Series/DataFrame,
    and how to change them to convert to other dtypes.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一篇文章中，我们将查看如何检查现有 Series/DataFrame 的数据类型，以及如何将它们转换为其他数据类型。
- en: If **you’re considering joining Medium and get unlimited acces to all of my
    and others posts, use this link to quickly subscribe and become one of my refered
    member:**
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果**你正在考虑加入 Medium 并获得无限访问我和其他人的文章，请使用此链接快速订阅并成为我推荐的会员：**
- en: '[](https://medium.com/@mocquin/membership?source=post_page-----20d9d32d2e42--------------------------------)
    [## Join Medium with my referral link - Yoann Mocquin'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@mocquin/membership?source=post_page-----20d9d32d2e42--------------------------------)
    [## 使用我的推荐链接加入 Medium - Yoann Mocquin'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为 Medium 会员，你的会员费用的一部分将用于你阅读的作者，而你将获得对每篇故事的完全访问…
- en: medium.com](https://medium.com/@mocquin/membership?source=post_page-----20d9d32d2e42--------------------------------)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/@mocquin/membership?source=post_page-----20d9d32d2e42--------------------------------)'
- en: '**and then subscribe to get notified for futur posts:**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**然后订阅以获取未来的文章通知：**'
- en: '[](https://mocquin.medium.com/subscribe?source=post_page-----20d9d32d2e42--------------------------------)
    [## Get an email whenever I publish !'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mocquin.medium.com/subscribe?source=post_page-----20d9d32d2e42--------------------------------)
    [## 订阅以获取我的新文章！'
- en: Get an email whenever I publish ! New publication will include data transformation,
    advanced plotting and simulation…
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 订阅以获取我发布的电子邮件！新发布将包括数据转换、先进的绘图和模拟…
- en: mocquin.medium.com](https://mocquin.medium.com/subscribe?source=post_page-----20d9d32d2e42--------------------------------)
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[mocquin.medium.com](https://mocquin.medium.com/subscribe?source=post_page-----20d9d32d2e42--------------------------------)'
- en: '**Finaly, check out some of my other posts:**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**最后，查看我其他的一些文章：**'
- en: '[](/300-times-faster-resolution-of-finite-difference-method-using-numpy-de28cdade4e1?source=post_page-----20d9d32d2e42--------------------------------)
    [## 300-times faster resolution of Finite-Difference Method using numpy'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/300-times-faster-resolution-of-finite-difference-method-using-numpy-de28cdade4e1?source=post_page-----20d9d32d2e42--------------------------------)
    [## 使用 numpy 提高 300 倍的有限差分法分辨率'
- en: Finite-difference method is a powerfull technique to solve complex problems,
    and numpy makes it fast !
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有限差分法是一种强大的技术来解决复杂问题，而 numpy 使其变得快速！
- en: 'towardsdatascience.com](/300-times-faster-resolution-of-finite-difference-method-using-numpy-de28cdade4e1?source=post_page-----20d9d32d2e42--------------------------------)
    [](/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff?source=post_page-----20d9d32d2e42--------------------------------)
    [## PCA/LDA/ICA : a components analysis algorithms comparison'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/300-times-faster-resolution-of-finite-difference-method-using-numpy-de28cdade4e1?source=post_page-----20d9d32d2e42--------------------------------)
    [## PCA/LDA/ICA：组件分析算法比较'
- en: Review the concepts and differences between these famous algorithms.
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 回顾这些著名算法的概念和差异。
- en: towardsdatascience.com](/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff?source=post_page-----20d9d32d2e42--------------------------------)
    [](https://mocquin.medium.com/one-sample-t-test-visually-explained-415c31744e14?source=post_page-----20d9d32d2e42--------------------------------)
    [## One-sample t-test, visually explained
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff?source=post_page-----20d9d32d2e42--------------------------------)
    [## 一样本 t 检验，直观解释'
- en: Introduction to one of the most famous statistical tests
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 介绍其中一种最著名的统计检验
- en: mocquin.medium.com](https://mocquin.medium.com/one-sample-t-test-visually-explained-415c31744e14?source=post_page-----20d9d32d2e42--------------------------------)
    [](/wrapping-numpys-arrays-971e015e14bb?source=post_page-----20d9d32d2e42--------------------------------)
    [## Wrapping numpy’s arrays
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[mocquin.medium.com](https://mocquin.medium.com/one-sample-t-test-visually-explained-415c31744e14?source=post_page-----20d9d32d2e42--------------------------------)
    [## 包装 numpy 数组'
- en: The container approach.
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器方法。
- en: towardsdatascience.com](/wrapping-numpys-arrays-971e015e14bb?source=post_page-----20d9d32d2e42--------------------------------)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/wrapping-numpys-arrays-971e015e14bb?source=post_page-----20d9d32d2e42--------------------------------)'
