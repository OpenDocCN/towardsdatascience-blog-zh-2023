["```py\n[30*1 + 30*1 + 30*1] +\n[30*1 + 70*1 + 30*1] +\n[30*1 + 30*1 + 30*1] \n\n= 30 + 30 + 30 + 30 + 70 + 30 + 30 + 30 + 30 = 310\n\npixel value = 310 / 9 ~ 34\n```", "```py\nImage:\n\n  0   0   0   0   0\n  0   0   0   0   0\n200 200 200 200 200\n200 200 200 200 200\n200 200 200 200 200\n```", "```py\nG_x:\n\n-1  0  +1\n-2  0  +2\n-1  0  +1\n\nG_y:\n\n-1  -2  -1\n 0   0   0\n+1  +2  +1\n```", "```py\nCentral Grid:\n\n  0   0   0\n255 255 255\n255 255 255\n\nApply G_x:\n\n(0*-1 + 0*0 + 0*1) +\n(255*-2 + 255*0 + 255*2) +\n(255*-1 + 255*0 + 255*1) =\n\n0 + 0 + 0 +\n-510 + 0 + 510 +\n-255 + 0 + 255 = 0\n\nApply G_y:\n\n(0*-1 + 0*-2 + 0*-1) +\n(255*0 + 255*0 + 255*0) +\n(255*1 + 255*2 + 255*1) =\n\n0 + 0 + 0 +\n0 + 0 + 0 +\n255 + 510 + 255 = 1020\n```", "```py\nG = (G_x^2 + G_y^2)^0.5 = (0^2 + 1020^2)^0.5 = 1020\n```", "```py\ntheta = arctan(G_y/G_x) = arctan(1020/0) = undefined\n```", "```py\n# Import packages\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import ndimage\n\n# Input image\nimage = np.array([\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [200, 200, 200, 200, 200],\n    [200, 200, 200, 200, 200],\n    [200, 200, 200, 200, 200]\n])\n\n# Sobel Operators\nG_x = np.array([\n    [-1, 0, +1],\n    [-2, 0, +2],\n    [-1, 0, +1]\n])\n\nG_y = np.array([\n    [-1, -2, -1],\n    [0, 0, 0],\n    [+1, +2, +1]\n])\n\n# Apply the Sobel kernels to the image\noutput_x = ndimage.convolve(image.astype(float), G_x)\noutput_y = ndimage.convolve(image.astype(float), G_y)\n\n# Define the light grey color for the background\nlight_grey = [0.8, 0.8, 0.8]  # RGB values for light grey\n\n# Normalize the Sobel outputs\nnorm_output_x = (output_x - output_x.min()) / (output_x.max() - output_x.min())\nnorm_output_y = (output_y - output_y.min()) / (output_y.max() - output_y.min())\n\n# Set the background color of the plots\nplt.rcParams['figure.facecolor'] = light_grey\nplt.rcParams['axes.facecolor'] = light_grey\n\n# Plot the images with the light grey background\nfig, axes = plt.subplots(1, 3, figsize=(15, 5))\n\naxes[0].imshow(image, cmap='gray')\naxes[0].set_title('Original Image')\naxes[0].axis('off')\n\naxes[1].imshow(norm_output_x, cmap='gray')\naxes[1].set_title('Sobel - Horizontal Direction')\naxes[1].axis('off')\n\naxes[2].imshow(norm_output_y, cmap='gray')\naxes[2].set_title('Sobel - Vertical Direction')\naxes[2].axis('off')\n\nplt.tight_layout()\nplt.show()\n```"]