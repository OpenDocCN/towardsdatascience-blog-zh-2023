["```py\njulia -t 4\n```", "```py\njulia> using Base.Threads\n\njulia> Threads.nthreads()\n4\n```", "```py\njulia> function collatz(n, i=0)\n           if n == 1\n               i\n           elseif iseven(n)\n               collatz(n / 2, i + 1)\n           else\n               collatz(3n + 1, i + 1)\n           end\n       end\ncollatz (generic function with 2 methods)\n\njulia> collatz(989345275647)\n1348\n\njulia> averageSteps(n) = sum(i -> collatz(i) / n, 1:n)\naverageSteps (generic function with 1 method\n```", "```py\njulia> res = @spawn averageSteps(1e7)\nTask (runnable) @0x000000015d061f90\n\njulia> 2^5 + 12\n44\n\njulia> fetch(res)\n155.2724831\n```", "```py\njulia> @time averageSteps(1e7)\n 16.040698 seconds\n155.2724831\n\njulia> @time res = @spawn averageSteps(1e7)\n  0.009290 seconds (31.72 k allocations: 1.988 MiB)\nTask (runnable) @0x000000015d179f90\n\njulia> @time fetch(@spawn averageSteps(1e7))\n 16.358641 seconds (24.31 k allocations: 1.553 MiB, 0.06% compilation time)\n155.2724831\n```"]