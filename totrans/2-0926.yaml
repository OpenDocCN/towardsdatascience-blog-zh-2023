- en: 'Fourier-transform for Time Series : Plotting Complex Numbers'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列的傅里叶变换：绘制复数
- en: 原文：[https://towardsdatascience.com/fourier-transform-for-time-series-plotting-complex-numbers-9743ffe8a8bb](https://towardsdatascience.com/fourier-transform-for-time-series-plotting-complex-numbers-9743ffe8a8bb)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/fourier-transform-for-time-series-plotting-complex-numbers-9743ffe8a8bb](https://towardsdatascience.com/fourier-transform-for-time-series-plotting-complex-numbers-9743ffe8a8bb)
- en: Plot the Fourier-transform algorithm to understand it
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制傅里叶变换算法以理解它
- en: '[](https://mocquin.medium.com/?source=post_page-----9743ffe8a8bb--------------------------------)[![Yoann
    Mocquin](../Images/b30a0f70c56972aabd2bc0a74baa90bb.png)](https://mocquin.medium.com/?source=post_page-----9743ffe8a8bb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9743ffe8a8bb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9743ffe8a8bb--------------------------------)
    [Yoann Mocquin](https://mocquin.medium.com/?source=post_page-----9743ffe8a8bb--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mocquin.medium.com/?source=post_page-----9743ffe8a8bb--------------------------------)[![Yoann
    Mocquin](../Images/b30a0f70c56972aabd2bc0a74baa90bb.png)](https://mocquin.medium.com/?source=post_page-----9743ffe8a8bb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9743ffe8a8bb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9743ffe8a8bb--------------------------------)
    [Yoann Mocquin](https://mocquin.medium.com/?source=post_page-----9743ffe8a8bb--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9743ffe8a8bb--------------------------------)
    ·12 min read·Jul 28, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9743ffe8a8bb--------------------------------)
    ·12分钟阅读·2023年7月28日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/181123c59bab3c833c451456239aa279.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/181123c59bab3c833c451456239aa279.png)'
- en: Most of the time, people have trouble handling the Fourier transform of a signal
    because of its complex form. Except for very specific cases, the Fourier transform
    of a time series is most of the time a complex-numbered sequence — and complex
    numbers are not always simple to grasp, especially when you are not used to handling
    those kinds of numbers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，人们在处理信号的傅里叶变换时会遇到困难，因为其形式复杂。除非在非常特定的情况下，时间序列的傅里叶变换通常是复数序列——而复数并不总是容易掌握，尤其是当你不习惯处理这些数字时。
- en: '**In this post, I want to show a few ways to visualize the Fourier transform
    of a 1D sequence of real numbers**, which is what you handle 99% of the time,
    especially in data analysis and time series.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**在本文中，我想展示几种可视化1D实数序列的傅里叶变换的方法**，这正是你99%的时间处理的内容，特别是在数据分析和时间序列中。'
- en: '*All images by author.*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*所有图像均由作者提供。*'
- en: 'This post is the third of my Fourier-transform for time-series. Check out the
    previous posts here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本文是我的《时间序列的傅里叶变换》系列的第三篇。查看之前的文章请访问这里：
- en: 'Review how the convolution relate to the Fourier transform and how fast it
    is:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾卷积如何与傅里叶变换相关以及其速度：
- en: '[](/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----9743ffe8a8bb--------------------------------)
    [## Fourier transform for time-series: fast convolution explained with numpy'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----9743ffe8a8bb--------------------------------)
    [## 时间序列的傅里叶变换：使用numpy解释快速卷积'
- en: 10000-times faster convolution using Fourier transform
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用傅里叶变换进行10000倍更快的卷积
- en: towardsdatascience.com](/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----9743ffe8a8bb--------------------------------)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/fourier-transform-for-time-series-fast-convolution-explained-with-numpy-5a16834a2b99?source=post_page-----9743ffe8a8bb--------------------------------)
- en: 'Deepen your understanding of convolution using image examples:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过图像示例加深对卷积的理解：
- en: '[](/fourier-transform-for-time-series-about-image-convolution-and-scipy-5e8fa1279603?source=post_page-----9743ffe8a8bb--------------------------------)
    [## Fourier-Transform for Time Series: About Image Convolution and SciPy'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/fourier-transform-for-time-series-about-image-convolution-and-scipy-5e8fa1279603?source=post_page-----9743ffe8a8bb--------------------------------)
    [## 时间序列的傅里叶变换：关于图像卷积和SciPy'
- en: Fourier-transform convolution also applies to images
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 傅里叶变换卷积也适用于图像
- en: towardsdatascience.com](/fourier-transform-for-time-series-about-image-convolution-and-scipy-5e8fa1279603?source=post_page-----9743ffe8a8bb--------------------------------)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/fourier-transform-for-time-series-about-image-convolution-and-scipy-5e8fa1279603?source=post_page-----9743ffe8a8bb--------------------------------)
- en: 'Before diving into the actual computing and plotting of 1D Fourier transforms,
    we’ll review a few basic concepts of complex numbers that are crucial to what’s
    next. As you’ll see, complex numbers are actually pretty simple: just consider
    them as a vector of 2 numbers.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入实际计算和绘制一维傅里叶变换之前，我们将回顾一些对接下来的内容至关重要的复杂数基本概念。正如你将看到的，复杂数实际上非常简单：可以将它们视为两个数字的向量。
- en: '**The end goal of this post is to make you more comfortable with the actual
    numbers behind your Fourier transforms.**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**本文的最终目标是让你对傅里叶变换背后的实际数字更加熟悉。**'
- en: '**Quick review of complex numbers**'
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**复杂数的快速回顾**'
- en: 'Any complex number can be represented with its canonical form, using 2 real
    values, a and b, respectively called their “**real**” and “**imaginary**” parts:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 任何复杂数都可以用其标准形式表示，使用两个实值 a 和 b，分别称为其“**实部**”和“**虚部**”：
- en: '![](../Images/9289bc5bd13b7390319bceb90686d260.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9289bc5bd13b7390319bceb90686d260.png)'
- en: 'where ***i*** is the unit complex number with the well-known property that
    if you square it, you get -1:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 ***i*** 是单位复数，具有著名的属性，即其平方等于 -1：
- en: '![](../Images/42ffe759428c2848d4164270de86d843.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/42ffe759428c2848d4164270de86d843.png)'
- en: 'We can also rewrite the above equation for Z as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将上述方程重新写作如下：
- en: '![](../Images/eebfdab3054bba1565cc3f91d24de57c.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eebfdab3054bba1565cc3f91d24de57c.png)'
- en: 'or again using dot product of vectors:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 或者再次使用向量的点积：
- en: '![](../Images/de16d6fb4573ad3d2290258568b6dbe0.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/de16d6fb4573ad3d2290258568b6dbe0.png)'
- en: If we were to represent Z on an (x, y) plane with the x-axis for the real part
    (1) and the y-axis for the imaginary part (i), we’d plot Z as a vector from (0,
    0) to (a, b).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 (x, y) 平面上表示 Z，x 轴为实部 (1)，y 轴为虚部 (i)，我们将 Z 绘制为从 (0, 0) 到 (a, b) 的向量。
- en: Let’s use NumPy and Matplotlib to plot an example.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 NumPy 和 Matplotlib 来绘制一个示例。
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/b822fb5f161d67848d67b5d8ed770e7c.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b822fb5f161d67848d67b5d8ed770e7c.png)'
- en: Plot of 2 complex numbers as vectors (red and blue), and their sum (green).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制两个复杂数作为向量（红色和蓝色），以及它们的和（绿色）。
- en: 'As you can see, it is easy to represent the complex numbers Z1​ and Z2​ as
    vectors on a 2D plane. Consequently, we can easily compute and plot the sum of
    2 complex numbers: we just sum the vectors. And that’s really all there is to
    remember; everything that follows is just fancy notations and plotting, along
    with some useful mathematical properties.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，表示复杂数 Z1​ 和 Z2​ 在二维平面上作为向量是很简单的。因此，我们可以轻松地计算和绘制两个复杂数的和：我们只需将向量相加。这就是所有需要记住的内容；接下来的一切只是花哨的符号和绘图，以及一些有用的数学性质。
- en: 'Another way to represent the same vector is using the polar notation:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种表示相同向量的方法是使用极坐标表示法：
- en: '![](../Images/0b20714bef1a8d3828bda3b269513959.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0b20714bef1a8d3828bda3b269513959.png)'
- en: where ∣Z∣ is called the “module” of Z, and θ is called the “argument” (I’ll
    usually call this variable the “phase angle”). Geometrically, the module represents
    the length of the vector, and its phase angle represents the angle of the vector
    with respect to the Ox axis, also called the direction.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 ∣Z∣ 被称为 Z 的“模”，θ 被称为“幅角”（我通常称这个变量为“相位角”）。在几何上，模表示向量的长度，而其相位角表示向量相对于 Ox 轴的角度，也称为方向。
- en: 'There is a direct correspondence between the canonical notation (a, b) and
    the polar notation (module, phase); it’s just another way to write the same vector.
    Indeed, remember that the complex exponential is just the sum of a cosine and
    an imaginary sine:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 标准表示法 (a, b) 与极坐标表示法（模，幅角）之间存在直接对应关系；这只是另一种书写相同向量的方式。确实，请记住，复杂指数就是一个余弦加上一个虚数正弦的和：
- en: '![](../Images/07a16dedb0de41fb96a58dd68dd640e5.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/07a16dedb0de41fb96a58dd68dd640e5.png)'
- en: so if we plot this complex number, the real part is cos⁡(θ) and the imaginary
    part is sin⁡(θ); its coordinates in the complex plane are (cos⁡(θ),sin⁡(θ)). Extending
    this idea to any complex number, we get a real part ∣Z∣cos⁡(θ) and an imaginary
    part ∣Z∣sin⁡(θ).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们绘制这个复杂数，实部是 cos⁡(θ)，虚部是 sin⁡(θ)；在复杂平面上的坐标是 (cos⁡(θ),sin⁡(θ))。将这个概念扩展到任何复杂数，我们得到实部
    ∣Z∣cos⁡(θ) 和虚部 ∣Z∣sin⁡(θ)。
- en: 'With NumPy, we can easily compute the real, imaginary, module, and phase components
    of a complex number. We can even check that both notations lead to the exact same
    complex number. Indeed:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 NumPy，我们可以轻松计算复杂数的实部、虚部、模和相位分量。我们甚至可以检查两种表示法是否得到完全相同的复杂数。确实：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now that we know that complex numbers behave just like vectors, we can use
    what we know about vectors and apply it to complex numbers. For example, when
    we add 2 complex numbers, their sum is just the complex number corresponding to
    the sum of the underlying vectors. Let’s use Python again to see an example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道复数的行为就像向量一样，我们可以利用关于向量的知识来应用于复数。例如，当我们加两个复数时，它们的和只是对应于底层向量和的复数。让我们再次使用
    Python 来查看一个示例：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/69b4fed6d137feee95c6c401123f9c35.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/69b4fed6d137feee95c6c401123f9c35.png)'
- en: Plot of sum of 2 complex numbers (left) and mean (right).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 2个复数的和（左）与均值（右）的图示。
- en: 'Similarly, the mean of complex numbers is just the sum of the vectors, scaled
    along its direction by the number of vectors. Scaling a vector corresponds to
    decreasing or increasing its length, but not changing its direction. For a scale
    factor K:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，复数的均值就是向量的和，沿其方向缩放向量的数量。缩放向量对应于增减其长度，但不改变其方向。对于缩放因子 K：
- en: '![](../Images/daecd83859ec308d987bb141d3ad48ab.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/daecd83859ec308d987bb141d3ad48ab.png)'
- en: which is a new complex number with a new length ∣Z′∣=K∣Z∣ (i.e., we scaled the
    module), but with the same phase angle (i.e., the vector has the same direction).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个新的复数，具有新的长度 ∣Z′∣=K∣Z∣（即我们缩放了模），但相位角相同（即向量具有相同的方向）。
- en: '**So remember:**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**所以请记住：**'
- en: '**The same complex number Z can be represented as Z=a+ib or Z=∣Z∣e^(−iθ), where
    ∣Z∣ represents the length of the vector, and θ its direction.**'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**相同的复数 Z 可以表示为 Z=a+ib 或 Z=∣Z∣e^(−iθ)，其中 ∣Z∣ 代表向量的长度，θ 代表其方向。**'
- en: '**Summing/averaging complex numbers behaves exactly like summing/averaging
    vectors.**'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对复数进行求和/平均的行为与对向量进行求和/平均的行为完全一样。**'
- en: '**Vector approach to Fourier-transform**'
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**傅里叶变换的向量方法**'
- en: 'Let’s review the formula for the Fourier transform in the context of a discrete
    sample sequence, called the Discrete Fourier Transform (DFT):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在离散样本序列的背景下回顾傅里叶变换的公式，这称为离散傅里叶变换（DFT）：
- en: '![](../Images/4d7b02beaad1bd8b28558be4d2a15bcf.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d7b02beaad1bd8b28558be4d2a15bcf.png)'
- en: with
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 其中
- en: '![](../Images/5fbec66517ed0c83c835fd5b4457bac8.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5fbec66517ed0c83c835fd5b4457bac8.png)'
- en: Note that several definitions exist using either none, 1/N​, or 1/N**0.5 as
    the scaling coefficient. I usually prefer using no scaling factor, but in this
    post, I’ll use the 1/N​ scaling factor as in the equation above.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，存在使用无缩放系数、1/N​ 或 1/N**0.5 的几种定义。我通常更喜欢使用无缩放因子，但在此帖中，我将使用上述方程中的 1/N​ 缩放因子。
- en: 'Let’s describe what this equation tells us :'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们描述一下这个方程告诉我们的内容：
- en: The k-th element of the Fourier transform (X[k]) is a complex number, given
    by the mean of a set of complex numbers (the Zkn​s).
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 傅里叶变换的第 k 个元素（X[k]）是一个复数，由一组复数（Zkn​s）的均值给出。
- en: Using what we now know about complex numbers and vectors, we can obtain the
    k-th coefficient of the Fourier transform just by plotting all the little complex
    numbers Zkn​, summing them (like regular vector sum), and scaling down the result
    by 1/N​.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 利用我们现在对复数和向量的理解，我们可以通过绘制所有的小复数 Zkn​，将它们相加（像常规的向量和一样），并将结果缩小 1/N​ 来获得傅里叶变换的第
    k 个系数。
- en: 'Let’s use Python to plot an example:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 Python 绘制一个示例：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/cec2693f95f5003721a00f05aafe2316.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cec2693f95f5003721a00f05aafe2316.png)'
- en: Input sequence we want to compute the Fourier transform (left) and visual computing
    of the Fourier coefficient X[k=1] (right).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要计算傅里叶变换的输入序列（左）和傅里叶系数 X[k=1] 的视觉计算（右）。
- en: '**On the left** is the input sequence for which we want to compute the Fourier
    transform coefficients, X[k] for k=0 to N−1\. To better understand what’s happening,
    a color is used for each sample.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**左侧**是我们想要计算傅里叶变换系数的输入序列，X[k] 对于 k=0 到 N−1。为了更好地理解发生了什么，每个样本都使用了颜色。'
- en: '**On the right**, all the vectors Zkn​ for k=1 are represented, each with a
    corresponding color. Notice that the length of vector Zkn​ is given by x[n]. These
    vectors are plotted twice: once starting from (0,0), and once where they are added
    cumulatively. The total sum corresponds to the end of the yellow arrow, which
    is equal to the red vector. This red vector represents the Fourier transform coefficient
    X[k=1].'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**右侧**显示了所有的向量 Zkn​，每个向量都有一个对应的颜色。注意向量 Zkn​ 的长度由 x[n] 给出。这些向量被绘制了两次：一次从 (0,0)
    开始，另一次则是累积地加和。总和对应于黄色箭头的末端，这个末端等于红色向量。这个红色向量表示傅里叶变换系数 X[k=1]。'
- en: 'This way, we get the vector representing the k-th coefficient of the Fourier
    transform: in other words, we just computed the value of X[k]. We can use the
    same steps to compute each coefficient, looping over k.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们得到了表示傅里叶变换第 k 个系数的向量：换句话说，我们刚刚计算了 X[k] 的值。我们可以使用相同的步骤计算每个系数，循环遍历 k。
- en: '**In the example below**, we compute the little vector families for all k=0
    to N−1\. For each value of k, we plot all the small vectors Zks​, the cumulative
    vector sum, as well as the final total sum in red. This way, the final red arrow
    represents the value of the Fourier transform for that value of k: again, it is
    just a complex number with a certain module and a certain phase angle. **In other
    words, the red arrow for any k is just the vector representation of X[k].**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**在下面的示例中**，我们计算了所有 k=0 到 N−1 的小向量系列。对于每个 k 值，我们绘制了所有小向量 Zks​，累积向量和，以及最终的总和（用红色表示）。这样，最终的红色箭头表示该
    k 值的傅里叶变换值：它只是一个具有特定模和相位角的复数。**换句话说，任何 k 的红色箭头只是 X[k] 的向量表示。**'
- en: Finally, we check that our ‘hand’ computation of the Fourier coefficients leads
    to the same values as numpy’s.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们检查了傅里叶系数的“手动”计算是否与 numpy 的结果一致。
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/4553f990dfc9b80cd8a83df3a8cd5ba8.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4553f990dfc9b80cd8a83df3a8cd5ba8.png)'
- en: Visual computing representation of all Fourier coefficients, for k=0 to N-1\.
    The final value of X[k] is given as the sum of all the colored vectors for that
    value of k.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 所有傅里叶系数的视觉计算表示，对于 k=0 到 N-1。最终 X[k] 的值表示为该 k 值所有彩色向量的总和。
- en: 'And that’s it : **the Fourier coefficient X[k] is given by the red arrow, for
    each value of k.**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样：**傅里叶系数 X[k] 由红色箭头表示，对于每个 k 值。**
- en: 'Few things to notice :'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 几点需要注意：
- en: '**For k=0**, all vectors are aligned with each other on the x-axis, hence they
    add up exactly, as the sum of real values.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于 k=0**，所有向量都在 x 轴上对齐，因此它们正好加在一起，作为实值的和。'
- en: '**For k=1 and k=9**, the colored vectors neatly add up giving a complex sum
    vector.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于 k=1 和 k=9**，彩色向量整齐地加在一起，得到一个复数和向量。'
- en: '**For other values of k**, the little vectors basically cancel each others.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于其他 k 值**，小向量基本上会相互抵消。'
- en: Now that we know how to visually compute each element of the Fourier transform,
    the end result is the whole discrete Fourier transform sequence, which is another
    sequence of complex numbers. In the next part, we are going to plot this whole
    complex sequence.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何直观地计算傅里叶变换的每个元素，最终结果是整个离散傅里叶变换序列，这是另一系列复数。在下一部分，我们将绘制整个复数序列。
- en: '**Plotting the Fourier Transform Sequence**'
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**绘制傅里叶变换序列**'
- en: 'Now that we know how the Fourier-transform coefficients X[k] are computed,
    both mathematically and visually, the result is a sequence of complex numbers
    X[k], which we can plot in various ways:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道傅里叶变换系数 X[k] 如何通过数学和视觉方法计算，结果是复数序列 X[k]，我们可以用多种方式绘制：
- en: Plot the real and imaginary parts.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制实部和虚部。
- en: Plot the module and phase angle.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制模和相位角。
- en: Plot the 2D vectors, along a third axis representing the index kk.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制 2D 向量，沿第三轴表示索引 kk。
- en: Using the numpy functions seen above, we can easily extract all these features
    and plot them.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上面看到的 numpy 函数，我们可以轻松提取所有这些特征并绘制它们。
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/319b737786e1a6ed988b7fa1791e176e.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/319b737786e1a6ed988b7fa1791e176e.png)'
- en: Input sequence (top-right), and 3 ways to represent its Fourier transform.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 输入序列（右上角），以及表示其傅里叶变换的三种方式。
- en: '**First up is the 3D plot**: the z-axis represents each index of the Fourier-transform
    sequence k in X[k]. On each of those z=kz=k XY-planes, the vector X[k] is plotted,
    with the real part on the x-axis and the imaginary part on the y-axis. That being
    said, notice how the X[k] coefficients are almost purely real, with vectors almost
    aligned with the y-axis, indicating a very small imaginary part. This is because
    our input sequence is almost perfectly symmetric, hence its Fourier-transform
    is almost purely real (that’s a property we’ll explore in-depth another time).'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**首先是 3D 图**：z 轴表示傅里叶变换序列中 X[k] 的每个索引 k。在每个 z=k 的 XY 平面上，绘制了 X[k] 向量，实部在 x
    轴上，虚部在 y 轴上。也就是说，请注意 X[k] 系数几乎完全是实数，向量几乎与 y 轴对齐，表示虚部非常小。这是因为我们的输入序列几乎完全对称，因此其傅里叶变换几乎完全是实数（这是我们将来会深入探讨的一个属性）。'
- en: '**Second is the Real and Imaginary part plot**: Another way to visualize a
    Fourier-transform sequence is to plot its real and imaginary parts. This is pretty
    much the same as the values you’ll see if you align the 3D plot view either to
    the x-axis or the y-axis. Although it’s easier to understand intuitively and compare
    with the 3D plot, it isn’t used that much.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**其次是实部和虚部图**：另一种可视化傅里叶变换序列的方式是绘制其实部和虚部。这与对齐 3D 图视图到 x 轴或 y 轴时看到的值基本相同。虽然这种方式在直观理解和与
    3D 图比较时更容易，但使用的频率不高。'
- en: '**Finally, the Module and Phase angle plot**: Remember that the module is literally
    the length of each vector, and the phase angles represent their directions. The
    module values are easier to understand from the 3D plot, as it simply gives the
    length of the vectors, but not so much from the real/imaginary plot. Regarding
    the phase angles,'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最后是模长和相位角图**：记住，模长实际上是每个向量的长度，而相位角表示它们的方向。从 3D 图中更容易理解模长，因为它简单地给出向量的长度，而在实部/虚部图中不那么明显。关于相位角，'
- en: '**Wrapup**'
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**总结**'
- en: 'Here are the key points you should absolutely remember:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是你绝对应该记住的关键点：
- en: Complex numbers are just vectors, with a real part on the x-axis and an imaginary
    part on the y-axis.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复数只是向量，实部在 x 轴上，虚部在 y 轴上。
- en: 'They behave like vectors: you know what adding and scaling vectors mean, so
    you know how it acts on complex numbers as well.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们像向量一样表现：你知道向量的加法和缩放意味着什么，因此你也知道它们在复数上的作用。
- en: 'You can use various representations/decompositions of a complex number: as
    a 2D vector, or extract its real/imaginary part, its length with its module, and
    its direction with its phase angle.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用复数的各种表示/分解方式：作为 2D 向量，或提取其实部/虚部，其长度及其模，以及其方向和相位角。
- en: 'The Fourier-transform is a sequence of complex numbers: each of these complex
    numbers is itself a sum (or average) of a sequence of other complex numbers with
    modules (i.e., length) x[n]x[n] and phase angles (i.e., direction) −2πkn/N:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 傅里叶变换是一个复数序列：每个复数本身是其他复数序列的和（或平均值），这些复数具有模长（即长度）x[n]x[n] 和相位角（即方向）−2πkn/N。
- en: '![](../Images/da6266c541a50ec8129c6881a338295b.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/da6266c541a50ec8129c6881a338295b.png)'
- en: with
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: with
- en: '![](../Images/5fbec66517ed0c83c835fd5b4457bac8.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5fbec66517ed0c83c835fd5b4457bac8.png)'
- en: 'If you liked this post, check out my other posts: I usually try to explain
    concepts using simple numpy and maplotlib code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这篇文章，查看我的其他文章：我通常尝试使用简单的 numpy 和 matplotlib 代码来解释概念：
- en: '[](https://mocquin.medium.com/one-sample-t-test-visually-explained-415c31744e14?source=post_page-----9743ffe8a8bb--------------------------------)
    [## One-sample t-test, visually explained'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mocquin.medium.com/one-sample-t-test-visually-explained-415c31744e14?source=post_page-----9743ffe8a8bb--------------------------------)
    [## 单样本 t 检验，直观解释'
- en: Introduction to one of the most famous statistical tests
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 介绍其中一个最著名的统计检验
- en: 'mocquin.medium.com](https://mocquin.medium.com/one-sample-t-test-visually-explained-415c31744e14?source=post_page-----9743ffe8a8bb--------------------------------)
    [](/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff?source=post_page-----9743ffe8a8bb--------------------------------)
    [## PCA/LDA/ICA : a components analysis algorithms comparison'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: mocquin.medium.com](https://mocquin.medium.com/one-sample-t-test-visually-explained-415c31744e14?source=post_page-----9743ffe8a8bb--------------------------------)
    [](/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff?source=post_page-----9743ffe8a8bb--------------------------------)
    [## PCA/LDA/ICA：组件分析算法比较
- en: Review the concepts and differences between these famous algorithms.
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复习这些著名算法的概念和差异。
- en: 'towardsdatascience.com](/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff?source=post_page-----9743ffe8a8bb--------------------------------)
    [](/pca-whitening-vs-zca-whitening-a-numpy-2d-visual-518b32033edf?source=post_page-----9743ffe8a8bb--------------------------------)
    [## PCA-whitening vs ZCA-whitening : a numpy 2d visual'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/pca-lda-ica-a-components-analysis-algorithms-comparison-c5762c4148ff?source=post_page-----9743ffe8a8bb--------------------------------)
    [](/pca-whitening-vs-zca-whitening-a-numpy-2d-visual-518b32033edf?source=post_page-----9743ffe8a8bb--------------------------------)
    [## PCA 白化与 ZCA 白化：一个 numpy 2D 可视化
- en: The process of whitening data consists in a transformation such that the transformed
    data has identity matrix as…
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据白化过程包括一个变换，使得变换后的数据具有单位矩阵作为…
- en: towardsdatascience.com](/pca-whitening-vs-zca-whitening-a-numpy-2d-visual-518b32033edf?source=post_page-----9743ffe8a8bb--------------------------------)
    [](/300-times-faster-resolution-of-finite-difference-method-using-numpy-de28cdade4e1?source=post_page-----9743ffe8a8bb--------------------------------)
    [## 300-times faster resolution of Finite-Difference Method using numpy
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Finite-difference method is a powerfull technique to solve complex problems,
    and numpy makes it fast !
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/300-times-faster-resolution-of-finite-difference-method-using-numpy-de28cdade4e1?source=post_page-----9743ffe8a8bb--------------------------------)
    [](https://medium.com/analytics-vidhya/deep-dive-into-seaborn-palettes-7b5fae5a258e?source=post_page-----9743ffe8a8bb--------------------------------)
    [## Deep dive into seaborn palettes
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Drowning in seaborn palettes ?
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/analytics-vidhya/deep-dive-into-seaborn-palettes-7b5fae5a258e?source=post_page-----9743ffe8a8bb--------------------------------)
    [](/interactive-plotting-the-well-know-rc-circuit-in-jupyter-d153c0e9d3a?source=post_page-----9743ffe8a8bb--------------------------------)
    [## Interactive plotting the well-know RC-circuit in Jupyter
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Another step into ipywidgets and matplotlib
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/interactive-plotting-the-well-know-rc-circuit-in-jupyter-d153c0e9d3a?source=post_page-----9743ffe8a8bb--------------------------------)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
