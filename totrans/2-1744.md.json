["```py\nfrom collections.abc import Sequence\n\nConnectionOptions = dict[str, str]\nAddress = tuple[str, int]\nServer = tuple[Address, ConnectionOptions]\n\ndef broadcast_message(message: str,\n                      servers: Sequence[Server]\n                      ) -> None:\n    ... \n```", "```py\ndef broadcast_message(\n        message: str,\n        servers: Sequence[tuple[tuple[str, int], dict[str, str]]]\n    ) -> None:\n    ...\n```", "```py\nservers: Sequence[tuple[tuple[str, int], dict[str, str]]] \n```", "```py\nServers = Sequence[Server]\n\nservers: Servers\n```", "```py\nConnectionOptions = dict[str, str]\nAddress = tuple[str, int]\nServer = tuple[Address, ConnectionOptions]\nservers: Sequence[Server]\n```", "```py\nservers: Sequence[tuple[tuple[str, int], dict[str, str]]]\n```", "```py\nlength = 73.5\n```", "```py\nlength_of_parcel = 73.5\n```", "```py\nlength_of_parcel = 73.5 # in cm\n```", "```py\nCm = float\nlength_of_parcel: Cm = 73.5\n```", "```py\ndef get_rectangle_circumference(x, y):\n    return 2*x + 2*y\n```", "```py\n>>> get_rectangle_circumference(\"a\", \"X\")\n'aaXX'\n```", "```py\n>>> x = 10                  # in cm\n>>> y = 200                 # in cm\n>>> get_rectangle_circumference(x, y) # in cm\n420\n```", "```py\n>>> x = 10                  # in cm\n>>> y = 2                   # in m\n>>> get_rectangle_circumference(x, y) # incorrect!\n24\n```", "```py\ndef get_rectangle_circumference(\n    x: float,\n    y: float) -> float:\n    return 2*x + 2*y\n```", "```py\nCm = float\n\ndef get_rectangle_circumference(x: Cm, y: Cm) -> Cm:\n    return 2*x + 2*y\n```", "```py\nCm = float\nM = float\n\ndef get_rectangle_circumference(x: Cm, y: Cm) -> Cm:\n    return 2*x + 2*y\n\nx: Cm = 10\ny: M = 10\n\nget_rectangle_circumference(x, y)\n```", "```py\nDistanceUnit = float\n\ndef get_rectangle_circumference(\n    x: DistanceUnit,\n    y: DistanceUnit\n    ) -> DistanceUnit:\n    return 2*x + 2*y\n```", "```py\nfrom typing import NewType\n\nMm = NewType(\"Mm\", float)\nCm = NewType(\"Cm\", float)\nM = NewType(\"M\", float)\nKm = NewType(\"Km\", float) \n```", "```py\ndef km_to_mm(x: Km) -> Mm:\n    return x * 1_000_000\n```", "```py\ndef km_to_mm(x: Km) -> Mm:\n    return Mm(x * 1_000_000)\n```", "```py\nfrom typing import NewType, TypeVar\n\nMm = NewType(\"Mm\", float)\nCm = NewType(\"Cm\", float)\nM = NewType(\"M\", float)\nKm = NewType(\"Km\", float)\n\nDistanceUnit = TypeVar(\"DistanceUnit\", Mm, Cm, M, Km)\n\ndef get_rectangle_circumference(\n    x: DistanceUnit,\n    y: DistanceUnit) -> DistanceUnit:\n    t = type(x)\n    return t(2*x + 2*y)\n```", "```py\nimport perftester\n\nfrom typing import NewType\n\ndef typing_type_create():\n    TypingFloat = NewType(\"TypingFloat\", float)\n\ndef class_type_create():\n    class ClassFloat(float): ...\n\nTypingFloat = NewType(\"TypingFloat\", float)\nclass ClassFloat(float): ...\n\ndef typing_type_use(x):\n    return TypingFloat(x)\n\ndef class_type_use(x):\n    return ClassFloat(x)\n\nif __name__ == \"__main__\":\n    perftester.config.set_defaults(\"time\", Number=1_000_000)\n\n    t_typing_create = perftester.time_benchmark(typing_type_create)\n    t_class_create = perftester.time_benchmark(class_type_create)\n\n    t_typing_use = perftester.time_benchmark(\n        typing_type_use, x = 10.0034\n    )\n    t_class_use = perftester.time_benchmark(\n        class_type_use, x = 10.0034\n    )\n\n    perftester.pp(dict(\n        create=dict(typing=t_typing_create[\"min\"],\n                    class_=t_class_create[\"min\"]),\n        use=dict(typing=t_typing_use[\"min\"],\n                 class_=t_class_use[\"min\"]),\n    ))\n```"]