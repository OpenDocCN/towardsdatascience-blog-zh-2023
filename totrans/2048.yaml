- en: 'The Perfect Text Editor for Jupyter: A Complete Python IDE'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/the-perfect-text-editor-for-jupyter-a-complete-python-ide-608dd466560b](https://towardsdatascience.com/the-perfect-text-editor-for-jupyter-a-complete-python-ide-608dd466560b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: From syntax highlighting to code completion, a complete Python IDE inside Jupyter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://dpoulopoulos.medium.com/?source=post_page-----608dd466560b--------------------------------)[![Dimitris
    Poulopoulos](../Images/ce535a1679779f5a2ec8b024e6691e50.png)](https://dpoulopoulos.medium.com/?source=post_page-----608dd466560b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----608dd466560b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----608dd466560b--------------------------------)
    [Dimitris Poulopoulos](https://dpoulopoulos.medium.com/?source=post_page-----608dd466560b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----608dd466560b--------------------------------)
    ·5 min read·Mar 9, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/074816bb2f0c1badf878e10ebac705da.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Max Duzij](https://unsplash.com/@max_duz?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'This article is the fourth part of a series. Check out the full series: [Part
    I](/unlocking-the-potential-of-jupyterlab-discover-the-powerful-text-editor-you-never-knew-you-had-af18bf5bce3f),
    [Part II](/jupyter-already-has-a-perfect-text-editor-this-is-how-you-can-configure-it-4d3eb37878f1),
    [Part III](/jupyter-already-has-a-perfect-text-editor-building-a-python-ide-20063044749b).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Over the past few days, we’ve been building a complete Python IDE inside Jupyter.
    In this article, we will add the final touches and package everything in a Docker
    image to create a portable working environment for data scientists and Machine
    Learning engineers.
  prefs: []
  type: TYPE_NORMAL
- en: Jupyter is not exactly an IDE. It’s not even an IPython UI, as many may think.
    I would argue that Jupyter is a development platform, and you can create your
    own workspace the way you like it. Since it includes a terminal emulator, you
    can do anything you may think. Thus, we will use it to create a complete, feature-packed
    Python IDE.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, in previous articles, we installed Neovim and configured it to act and
    look similar to the most popular text editor these days: Visual Studio Code. In
    this article, we will install one tool to conquer all: code completion, code formatting,
    git integration, spell checking, and lining. Let’s begin!'
  prefs: []
  type: TYPE_NORMAL
- en: '[Learning Rate](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=neovim-coc)
    is a newsletter for those who are curious about the world of ML and MLOps. If
    you want to learn more about topics like this subscribe [here](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=neovim-coc).
    You’ll hear from me on the last Sunday of every month with updates and thoughts
    on the latest MLOps news and articles!'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Conquer of Completion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many tools promise to make a developer’s life easier when it comes to Vim/Neovim,
    but my preference is [Conquer of Completion](https://github.com/neoclide/coc.nvim).
  prefs: []
  type: TYPE_NORMAL
- en: 'Conquer of Completion (CoC) is a popular plugin for Vim and Neovim that provides
    a powerful autocompletion engine. Here are a few key things to know about CoC:'
  prefs: []
  type: TYPE_NORMAL
- en: 'CoC supports multiple languages: it can provide autocompletion suggestions
    for various programming languages, including Python, JavaScript, C, Go, and many
    others. It uses language servers to provide intelligent recommendations based
    on your code context.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CoC is highly configurable: it allows users to customize the autocompletion
    engine to fit their preferences in a VS Code-like way. Users can set up custom
    mappings for triggering completion, adjust the priority of completion sources,
    and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CoC has a large user community: it is a popular plugin with a large user community,
    which means many resources are available for troubleshooting and customization.
    The plugin is also actively maintained and updated. Moreover, the community provides
    several great extensions we will use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall, Conquer of Completion is a powerful plugin that can significantly enhance
    your autocompletion experience in Vim or Neovim, mainly if you work with multiple
    programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CoC requires some setup. You’ll need to install and configure some additional
    components, including NodeJS and the `npm` package manager. Depending on your
    case, you may also need to install a language server for your preferred programming
    language.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, let’s first install NodeJS.
  prefs: []
  type: TYPE_NORMAL
- en: NodeJS Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NodeJS and `npm` are hard requirements to install the CoC plugin for Neovim
    and enable auto-completion for many programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the two packages execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the PPA to get access to its packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '2\. Install Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '3\. Verify:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you get something like `v18.15.0` (the latest version at the time of writing
    this article) you’re good to go. But even if you have another version installed,
    you should be able to continue.
  prefs: []
  type: TYPE_NORMAL
- en: Install CoC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Installing the CoC plugin is as simple as any other plugin. Just place the
    following line in your `init.vim` configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Restart the editor and run the `:PlugInstall` Vim command. `vim-plug`, the plugin
    manager we are using will install CoC for you. To complete the installation process,
    restart the editor again.
  prefs: []
  type: TYPE_NORMAL
- en: To see the installation process of a plugin in Neovim in detail, refer back
    to the second blog of this series.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'We are ready to install the extensions we need to turn our editor into a full-fledged
    IDE. Run the `:CocInstall coc-pyright` Vim command to install support for Python.
    After finishing the installation, quit every window of your editor and open a
    Python file like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Autocomplete should be enabled; however, it’s not very practical. So, let’s
    configure CoC. Add the following lines in your `init.vim` configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: I left a comment for each line so you can understand what it does. Now CoC is
    configured, and you can use these key bindings to get the most out of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, things do not end here. As we said, CoC has several extensions (like
    `coc-pyright`) that you can install. Some of them are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`coc-git`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coc-docker`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coc-yaml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coc-json`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coc-prettier`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coc-pairs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coc-spell-checker`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To install any of them, just run the `:CocInstall` command and provide the
    name of the extension. For a complete list of extensions, visit the `coc-extensions`
    page: [https://github.com/topics/coc-extensions](https://github.com/topics/coc-extensions)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you can configure CoC much like you do with VS Code. Run the `:CocConfig`
    command and the `coc-settings.json` file will pop up. I have the following settings
    set there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Each row is self-explanatory, but if you want to find out what exactly you can
    configure, refer to the documentation of each CoC extension.
  prefs: []
  type: TYPE_NORMAL
- en: As usual, save your work using the `docker commit` command (refer to previous
    articles in this series if you don’t know what this means). You can find my image
    in [DockerHub](https://hub.docker.com/layers/dpoulopoulos/jupyter/v0.0.3/images/sha256-3538e1a72d605071a6517bf157dabfe8a3953f7236d10abfa18dbc5a38f7951b?context=repo).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this series of articles, we built a complete Python IDE inside a JupyterLab
    environment. We started with a simple Neovim installation, which we configured
    to act and look like the most popular text editor today, VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: This article concludes this story, but if you want to see more things, like
    how to use a debugger or configure a specific plugin further, please leave a comment,
    and I’ll do my best! Till then, happy coding.
  prefs: []
  type: TYPE_NORMAL
- en: About the Author
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: My name is [Dimitris Poulopoulos](https://www.dimpo.me/?utm_source=medium&utm_medium=article&utm_campaign=neovim-coc),
    and I’m a machine learning engineer working for [Arrikto](https://www.arrikto.com/).
    I have designed and implemented AI and software solutions for major clients such
    as the European Commission, Eurostat, IMF, the European Central Bank, OECD, and
    IKEA.
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in reading more posts about Machine Learning, Deep Learning,
    Data Science, and DataOps, follow me on [Medium](https://towardsdatascience.com/medium.com/@dpoulopoulos/follow),
    [LinkedIn](https://www.linkedin.com/in/dpoulopoulos/), or [@james2pl](https://twitter.com/james2pl)
    on Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: Opinions expressed are solely my own and do not express the views or opinions
    of my employer.
  prefs: []
  type: TYPE_NORMAL
