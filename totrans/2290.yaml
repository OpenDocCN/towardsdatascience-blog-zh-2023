- en: 'Version Controlling in Practice: Data, ML Model, and Code'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/version-controlling-in-practice-data-ml-model-and-code-e13c518067dc](https://towardsdatascience.com/version-controlling-in-practice-data-ml-model-and-code-e13c518067dc)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A Step-by-Step Guide to Versioning in MLOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@chimso1994?source=post_page-----e13c518067dc--------------------------------)[![Chayma
    Zatout](../Images/341c45f53ddf73dc0851d547cc7cb55a.png)](https://medium.com/@chimso1994?source=post_page-----e13c518067dc--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e13c518067dc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e13c518067dc--------------------------------)
    [Chayma Zatout](https://medium.com/@chimso1994?source=post_page-----e13c518067dc--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e13c518067dc--------------------------------)
    ·13 min read·Dec 2, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/37c9fd4dbfd42fec21a997f19490f28a.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Christopher Gower](https://unsplash.com/@cgower?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Version control is a crucial practice! Without it, your project may become disorganized,
    making it challenging to roll back to any desired point. You risk losing critical
    model configurations, weights, experiment results from extensive training periods,
    and even the entire project itself. You might also find yourself in disagreements
    and conflicts with your teammates when the code breaks, hindering effective collaboration.
    In this article, we navigate the importance of version control through a practical
    example that employs some of the most common tools in the field. The entire codebase
    for this article is accessible in [the associated repository](https://github.com/Chim-SO/hand-written-digits-classification).
  prefs: []
  type: TYPE_NORMAL
- en: '**Table of contents:**'
  prefs: []
  type: TYPE_NORMAL
- en: · [1\. Introduction](#7df7)
  prefs: []
  type: TYPE_NORMAL
- en: · [2\. Tools](#51d8)
  prefs: []
  type: TYPE_NORMAL
- en: · [3\. Setting up your project](#4d35)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [3.1\. Project folder](#65ee)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [3.2\. Project environment](#fed7)
  prefs: []
  type: TYPE_NORMAL
- en: · [4\. Code versioning](#dfb9)
  prefs: []
  type: TYPE_NORMAL
- en: · [5\. Data versioning](#c5f4)
  prefs: []
  type: TYPE_NORMAL
- en: · [6\. Model versioning](#caf0)
  prefs: []
  type: TYPE_NORMAL
- en: · [Conclusion](#a958)
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/c9cc5136b57967221c0ea501afea4868.png)'
  prefs: []
  type: TYPE_IMG
- en: Version controlling is the practice of recording changes to a file or setting
    of files over time, using version control systems, so that we can recall specific
    versions later. In MLOps, version controlling is one of the main principles that
    I consider it as the first one to consider when starting your machine learning
    projects. To ensure that we harness all the benefits, version control should be
    applied across different machine learning workflow steps, including ***data***,
    the ***Machine Learning model*** (ML model), and ***code***.
  prefs: []
  type: TYPE_NORMAL
- en: '**Why versioning?** Using version control for code, data, and models enables
    ***reproducibility*** (which is an another important MLOps principle) by allowing
    to recreate specific states of the project at any given point in time; ***tracking***
    and ***monitoring*** changes by establishing a systematic approach to capturing,
    documenting, and managing changes throughout the development lifecycle; ***collaboration***
    by tracking changes made by different contributors, and merging those changes
    efficiently and many other important benefits such as ***error recovery*** and
    ***traceability***.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Versioning use case?** Let’s consider a specific scenario in the handwritten
    digits classification project that we will use as an example throughout this article.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code.** Suppose we introduced optimizations to improve speed.However, after
    deployment, users reported unexpected inaccuracies in predictions. Thanks to the
    project’s robust code versioning practices, we can promptly identify the commit
    associated with the bug and temporarily roll back the deployment before optimization
    integration while we address the bug, fix it and reintegrate it into the main
    project version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data.** Suppose we decide to augment the dataset to enhance the model’s generalization
    capabilities. However, after the augmented dataset is used in training, unexpected
    variations in model performance are observed. Therefore, we review the versioning
    history, identifies the specific augmentation technique that may be causing issues,
    and swiftly roll back to the previous version of the dataset. Then, we collaboratively
    work on refining the data augmentation approach, ensuring that only validated
    changes are reintegrated into the main project version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ML model.** Suppose now, we embark on refining the model architecture to
    boost accuracy. We implement a Convolutional Neural Network (CNN) for improved
    feature extraction and integrate it to the main project. However, during deployment,
    subtle discrepancies arise, impacting real-time predictions. Therefore, we roll
    back to the previous, more stable model version. Then, we collaboratively address
    the issues, conduct thorough testing, and integrate the refined model back into
    the main project version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although this is an article dedicated to how to use version control in your
    project, it’s also part of my MLOps articles series. Furthermore, by following
    my previous and next tutorials you’ll be able to create your own end-to-end MLOps
    project starting from the workflow to model deployment and tracking.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested in MLOps, check out my articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Tutorial 1: A Key Start to MLOps: Exploring Its Essential Components*](/a-key-start-to-mlops-exploring-its-essential-components-27646238372d)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Tutorial 2: A Beginner-Friendly Introduction to MLOps Workflow*](/a-beginner-friendly-introduction-to-mlops-95282f25325c)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Tutorial 3: Introduction to MLOps Principles*](https://medium.com/towards-data-science/introduction-to-mlops-principles-c5d73a00aa76)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Tutorial 4: Structuring Your Machine Learning Project with MLOps in Mind*](https://medium.com/towards-data-science/structuring-your-machine-learning-project-with-mlops-in-mind-41a8d65987c9)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Tutorial 5: Version Controlling in Practice: Data, ML Model, and Code*](https://medium.com/towards-data-science/version-controlling-in-practice-data-ml-model-and-code-e13c518067dc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Tutorial 6: Testing in Practice: Code, Data and ML Model*](/testing-in-practice-code-data-and-ml-model-cfb1ada81f6c)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tutorial 7: Tracking in Practice: Code, Data and ML Model](/tracking-in-practice-code-data-and-ml-model-6787a881609c)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2\. Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/a4d7e9b47996b56af5bb596a46a77f55.png)'
  prefs: []
  type: TYPE_IMG
- en: When working on machine learning projects or any computer science projects,
    before starting programming, the adequate tools to use need to be selected. The
    tools selection depends on different factors such as project requirement, team
    expertise, data volume and cost.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, the following tools are selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Python** as the programming language which is combination of a rich ecosystem,
    community support, ease of learning, versatility, integration capabilities, extensive
    libraries, data science tools, scalability, and industry adoption collectively
    contribute to its prominence in the realm of machine learning projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Git** for code versioning. Git, that stands for Global Information Tracker,
    is an open-source distributed version control system (DVCS) widely used in software
    development for tracking changes in source code during the development of a project.
    It is an essential tool that enables teams to manage code changes effectively,
    collaborate seamlessly, and maintain a reliable version history . It has become
    a standard in the industry and is used by developers worldwide for projects of
    all sizes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DVC** for data versioning. DVC, that stands for Data Version Control, is
    an open-source version control system widely used for data management. It’s designed
    to manage large datasets, make projects reproducible, and collaborate better.
    It works on top of Git repositories with similar feel and flows. One of the key
    features of DVC is data versioning: it allows to version control datasets separately
    from code. Therefore, data can be tracked, shared, and easily switched between
    different versions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MLflow** for model versioning. It is an open-source platform designed to
    manage the end-to-end machine learning lifecycle and foster collaboration among
    ML practitioners. Its compatibility with popular libraries, and strong community
    support make it an attractive choice for managing the complete machine learning
    lifecycle in a unified and scalable manner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3\. Setting up your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before getting started, ensure you have Git and DVC installed on your system.
    If it’s not already installed, you can download and install it from the [official
    Git website](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) and
    the [official DVC website](https://dvc.org/doc/install) respectively. Or if you
    are on Ubuntu you can simply execute the following command lines :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'However, it’s strongly recommended to create a virtual environment before installing
    DVD; thus, we will install it in the next few minutes after creating our virtual
    environment. In addition, note that:'
  prefs: []
  type: TYPE_NORMAL
- en: DVC does not replace or include Git. You must have `git` in your system to enable
    important features such as data versioning and quick experimentation (recommended).
    [1]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 3.1\. Project folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start off by setting up the project folder! To do so, there are several
    approaches including:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating your folder from scratch:** it is the most straightforward method,
    but it requires manually adding standard files and structuring the project afterwards.
    I do not recommend this approach when working on medium to large projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Importing an existing template:** it is typically the optimal choice for
    simple maintenance, easy collaboration and good transparency, reproducibility
    and reusability. In this article, we will use the following project structure
    for machine learning projects created using [this Github template](https://github.com/Chim-SO/mlops-template)
    or this [Cookiecutter MLOps repository](https://github.com/Chim-SO/cookiecutter-mlops),
    but feel free to explore alternative templates. If you’re eager to delve deeper
    into structuring ML projects, I invite you to read my dedicated article on the
    topic: [*Structuring Your Machine Learning Project with MLOps in Mind*](https://medium.com/towards-data-science/structuring-your-machine-learning-project-with-mlops-in-mind-41a8d65987c9).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/ec4e813b5e591a3c59e3fe5cf8b93168.png)'
  prefs: []
  type: TYPE_IMG
- en: Project structure using [this Github template](https://github.com/Chim-SO/mlops-template)
    or this [Cookiecutter MLOps repository](https://github.com/Chim-SO/cookiecutter-mlops)
  prefs: []
  type: TYPE_NORMAL
- en: '**Clone/fork an existing project:** it is typically the optimal choice when
    working on existing projects. It supports collaboration and code reuse. For this
    article, feel free to clone or fork my repository to easily reuse the provided
    code. To clone the project use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Using a Github template or cloning a Github repository requires some familiarity
    of Github. However, rest assured! You can still follow this tutorial as I provide
    you with the necessary commands and explanations.
  prefs: []
  type: TYPE_NORMAL
- en: 3.2\. Project environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another essential step to execute is setting up the virtual environment which
    is a best practice in software development that enhances project isolation, dependency
    management, reproducibility, collaboration, and overall project cleanliness.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by creating a virtual environment named `handwritten-digits-classification-env`
    and activating it:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After that and in most cases when working with GPU, we need to update the environment
    with the appropriate Cuda version (see [this article](/managing-multiple-cuda-versions-on-a-single-machine-a-comprehensive-guide-97db1b22acdc)
    for more details). Nevertheless, to make this tutorial simple and accessible,
    a GPU is not required, especially since the project requirements are simple since
    the data and model are not large.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, we install requirements and DVC by executing the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Code versioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After setting up the repository, we are now ready to start versioning! In this
    tutorial, we adopt a straightforward feature branch workflow. This workflow involves
    creating a dedicated branch for each new feature rather than making direct changes
    to the main branch. Then, we use the rebase/merge approach to seamlessly integrate
    the feature branch into the main branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by listing all the branches in the repository and check the current
    branch we are on that is typically marked with an asterisk (`*`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here I have only one branch that is the master branch and it is the current
    branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are not already in the main branch switch to it using:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We first create a branch called `feature/data` where we add all the code related
    to data processing:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After adding all the necessary code, we import the code to the main branch
    by using the `merge` command that incorporates the changes present in the named
    branch into the current working branch:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we create another branch called `feature/model` where we add all
    the code involving model creation, training and validating and merge it into the
    main branch :'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, we can say that we created a simple first version of our code!
    And it’s time to mark this specific point adding a add a tag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The entire workflow is described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bdb87db52b64e4b9024da8bfc70cc750.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Where each circle represents a commit that can be displayed using the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3815b1d16089a6df09a517b60ff1226f.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Back to our code problem example:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say that after the deployment, a problem arises so we decide to temporarily
    roll back the deployment to the previous version the code in the deployment:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The revert operation undoes the modifications introduced by the specified commit
    by creating a new commit, still, we might need to resolve any conflicts that arise
    during the process, similar to what happens during a regular merge.
  prefs: []
  type: TYPE_NORMAL
- en: 'By using the commit history, we identify that a specific optimization in the
    model branch might be causing the issue. Thus, A hotfix branch named `hotfix/inference-bug`
    is created to address the bug:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We then make the necessary corrections to the code and commit the changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The bug fix is tested thoroughly, and a new pull request is opened for code
    review if we are really working in team and finally the hotfix is merged into
    the main branch:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The corrected code, free of the bug, is re-deployed to the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Data versioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the code it’s ready, we can download data set it to it’s first version
    then transform it into the `csv` format.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to make sure that the folder where we will store data isn’t ignored
    by git. This is done by checking `.gitignore` file and removing/commenting the
    line that exclude the data folder from source control. If you’re using the template
    I provided comment line 79.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, we start by creating a branch `feature/data-csv` , initializing the DVC
    project inside the project folder and finally adding to Git the created files:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we download our dataset and add it to DVC and add the new DVC files to
    git:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Adding files to dvc will generate metadata that are stored in new files in a
    special `.dvc` file extension. Also, note that even though the data folder is
    tracked by git, it will be ignored once we add it to DVC since this later will
    create `.gitignore` and add data path to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also transform it into `csv` format and add the resulted files `data/preprocessed/train.csv`
    and `data/preprocessed/test.csv` to DVC the same way as previously:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '. At this point, the data is downloaded and created. The next step is the merge
    to the main branch and add a git tag :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**Back to our data problem example:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say that we applied offline augmentation of the processed data and we
    added it to DVC:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'However, after training, the model behaved poorly so we decide to re-use the
    previous version as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 6\. Model versioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned previously, we use MLflow to track and manage our model. Since
    for the moment we will work locally, we start a local MLflow Tracking Server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a branch where we train and save our model:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we initiate an MLflow run context to start a run, train the model and
    then save it using MLflow:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Merge to the main branch and add a git tag :'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Train a model using the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Where `configs/cnn.yaml` file contains some configuration parameters like batch
    size and number of epochs.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can view the run in the MLflow UI to see the results by simply navigate
    to the previous URL in our browser. Click on the experiment name `cnn` to list
    its associated runs and then click on the random name that has been generated
    for the run :'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/f751ad7e1fa8e5a6a806343a5dd31ea2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By clicking on the run name, the RUN page is displayed where the details of
    the execution are shown:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/3436dfc437fa16b0206f5785f6d80ad4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you save a model using MLflow, it creates a directory structure containing
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`data` folder that includes the serialized files containing the model parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MLmodel` file that includes metadata about the model, such as the framework,
    the model’s signature, and other properties.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`conda.yaml` , `python_env.yaml` and `requirements.txt` files that elps recreate
    the same environment when loading the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It also provides insights into the model schema and demonstrates how to execute
    predictions, offering flexibility with both *Spark DataFrame* and *Pandas DataFrame*.
    Another remarkable aspect of MLflow is its ability to preserve the commit ID from
    which the model was generated. Furthermore, it introduces a straightforward model
    registration option which a topic that will be explored in upcoming articles.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here we come to the end of this article. In this article, we learned through
    a practical example the implementation of version control for the three elements
    within a machine learning project: the code, the data, and the machine learning
    model. Version controlling is a fundamental principle in MLOps that enables meticulous
    tracking, seamless collaboration, and robust reproducibility in machine learning
    workflows. The entire codebase for this article is accessible in [the associated
    repository](https://github.com/Chim-SO/hand-written-digits-classification).'
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading this article. You can find all the examples of the different
    tutorials I provide in my [GitHub profile](https://github.com/Chim-SO?tab=repositories).
    If you appreciate my tutorials, please support me by following me and subscribing.
    This way, you’ll receive notifications about my new articles. If you have any
    questions or suggestions, feel free to leave a comment.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/a-key-start-to-mlops-exploring-its-essential-components-27646238372d?source=post_page-----e13c518067dc--------------------------------)
    [## A Key Start to MLOps: Exploring Its Essential Components'
  prefs: []
  type: TYPE_NORMAL
- en: A Beginner-Friendly Introduction to MLOps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/a-key-start-to-mlops-exploring-its-essential-components-27646238372d?source=post_page-----e13c518067dc--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] [https://dvc.org/doc/install](https://dvc.org/doc/install)'
  prefs: []
  type: TYPE_NORMAL
- en: Image credits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All images and figures in this article whose source is not mentioned in the
    caption are by the author.
  prefs: []
  type: TYPE_NORMAL
