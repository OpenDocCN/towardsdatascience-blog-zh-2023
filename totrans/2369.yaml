- en: Why Do You Need to Use SQL Grouping Sets for Aggregating Data?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/why-do-you-need-to-use-sql-grouping-sets-for-aggregating-data-3d172ff5c088](https://towardsdatascience.com/why-do-you-need-to-use-sql-grouping-sets-for-aggregating-data-3d172ff5c088)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Efficiency, readability, and scalability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://sonery.medium.com/?source=post_page-----3d172ff5c088--------------------------------)[![Soner
    Yıldırım](../Images/c589572e9d1ee176cd4f5a0008173f1b.png)](https://sonery.medium.com/?source=post_page-----3d172ff5c088--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3d172ff5c088--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3d172ff5c088--------------------------------)
    [Soner Yıldırım](https://sonery.medium.com/?source=post_page-----3d172ff5c088--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3d172ff5c088--------------------------------)
    ·4 min read·Apr 20, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9bb8e6603b0824e76b144001d3a3c4bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Helena Lopes](https://unsplash.com/@wildlittlethingsphoto?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/PGnqT0rXWLs?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Although it’s called a query language, SQL is capable of not only querying databases
    but also performing efficient data analysis and manipulation. It is not a surprise
    that SQL is embraced by the data science community.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will learn about a very handy SQL feature, which allows
    for writing cleaner and more efficient queries. This I-wish-I-knew-this-earlier
    feature is the `GROUPING SETS`, which can be considered as an extension of the
    `GROUP BY` function.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn the difference between them as well as the advantage of using
    `GROUPING SETS` over the `GROUP BY` function but first, we need a dataset to work
    on.
  prefs: []
  type: TYPE_NORMAL
- en: 'I created a SQL table from the [Melbourne housing dataset](https://www.kaggle.com/datasets/mithesh/melbournehousingdataset)
    available on Kaggle with a public domain license. The first 5 rows of the table
    looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aa449a21e0a47d929a6abc9e7005758a.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: The GROUP BY function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use the function to calculate aggregate values per group or distinct
    values in a column or multiple columns. For instance, the following query returns
    the average price for each listing type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this query is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e09cb3cd313b708c2ed8a9e5b7a76975.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Multiple groupings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s say you want to see the average price for each region in the northern
    area, which can be achieved by using the `GROUP BY` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7d29056dd9077b9a7aea50d8de1c6f24.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Consider a case where you want to see the average price of different house types
    in these two regions in the same table. You can achieve this by writing two groupings
    and combining the results with `UNION ALL.`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: What the query does is to calculate the average price for each region first.
    Then, in a separate query, it groups the rows by both region name and type and
    calculates the average price for each group. The union combines the output of
    these two queries.
  prefs: []
  type: TYPE_NORMAL
- en: Since the first query does not have the type column, we create it manually with
    a value of “all”. Finally, the combined results are ordered by the region name
    and the type.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of this query:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b78433e64a069085730259c8b6e7db2d.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: The first row for each region shows the region average and the following rows
    show the average price for different house types.
  prefs: []
  type: TYPE_NORMAL
- en: We had to write two separate queries because we cannot have different queries
    in a `GROUP BY` statement unless we use `GROUPING SETS.`
  prefs: []
  type: TYPE_NORMAL
- en: GROUPING SETS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s rewrite the previous query using `GROUPING SETS.`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/66ad61208f63c231c26e5f814ef95708.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: The output is the same except for the null values in the type column which can
    easily be replaced with “all”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `GROUPING SETS` has two main advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: It is shorter and more intuitive which makes the code easier to debug and manage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is more efficient and performant than writing separate queries and combining
    the results because SQL scans the tables for each query.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Final thoughts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We often disregard query readability and efficiency. We are happy if the query
    returns the desired data.
  prefs: []
  type: TYPE_NORMAL
- en: Efficiency is something we always need to keep in mind. The impact of writing
    bad queries may be tolerated when querying a small database. However, when the
    data size becomes large, bad queries may lead to serious performance issues. In
    order to make ETL processes scalable and easy-to-manage, we need to adapt best
    practices. The `GROUPING SETS` is one of these best practices.
  prefs: []
  type: TYPE_NORMAL
- en: '*You can become a* [*Medium member*](https://sonery.medium.com/membership)
    *to unlock full access to my writing, plus the rest of Medium. If you already
    are, don’t forget to* [*subscribe*](https://sonery.medium.com/subscribe) *if you’d
    like to get an email whenever I publish a new article.*'
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading. Please let me know if you have any feedback.
  prefs: []
  type: TYPE_NORMAL
