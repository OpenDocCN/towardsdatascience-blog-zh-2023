["```py\n# A docstring example\ndef square(n):\n    \"\"\"Takes in a number n and returns the square of n\"\"\"\n    return n**2\n```", "```py\n# Python 3.7\n\ndef mean_of_arr(arr):\n    return sum(arr)/len(arr)\n\n# An elaborate, high quality docstring for the above function:\n\"\"\"\n```", "```py\n This function takes an array of numbers and returns the mean of the array.\n    The mean is the sum of the numbers divided by the length of the array.\n```", "```py\nimport openai # Install via \"pip install openai\"\nimport inspect\n\nopenai.api_key = \"YOUR_OPENAI_API_KEY_GOES_HERE\"\n\ndef generate_docstring(my_func, python_version=3.7):\n    # Grab the source code from the function as a string\n    source_code = inspect.getsource(my_func)\n\n    # Remove any existing docstring\n    if my_func.__doc__ is not None:\n        source_code = source_code.replace(my_func.__doc__,\"\")\\\n                                 .replace(\"\\\"\\\"\\\"\",\"\")\n\n    # Wrap the source code with hints for GPT-3\n    prompt = f\"# Python {python_version}\\n\\n\" \\\n           + source_code \\\n           + \"\\n# An elaborate, high quality docstring for the above function:\\n\\\"\\\"\\\"\"\n\n    # Send prompt to GPT-3\n    response = openai.Completion.create(\n                   model=\"code-davinci-002\",\n                   prompt=prompt,\n                   temperature=0,\n                   max_tokens=150,\n                   top_p=1.0,\n                   frequency_penalty=0.0,\n                   presence_penalty=0.0,\n                   stop=[\"#\", \"\\\"\\\"\\\"\"]\n               )\n\n    # Return the generated docstring\n    docstring = response[\"choices\"][0][\"text\"]\n    return docstring\n```", "```py\ndef sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n```", "```py\n This function sorts an array of integers in ascending order.\n    It uses the selection sort algorithm.\n\n    Parameters\n    ----------\n    arr : list\n        The array to be sorted.\n\n    Returns\n    -------\n    list\n        The sorted array.\n```", "```py\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\ndef randomly_split_dataset(folder, filename, split_ratio=[0.8, 0.2]):\n    df = pd.read_json(folder + filename, lines=True)\n    train_name, test_name = \"train.jsonl\", \"test.jsonl\"\n    df_train, df_test = train_test_split(df, test_size=split_ratio[1], \n                                         random_state=42)\n    df_train.to_json(folder + train_name, orient='records', lines=True)\n    df_test.to_json(folder + test_name, orient='records', lines=True)\n    return\n```", "```py\nmy_docstring = generate_docstring(randomly_split_dataset)\n\nprint(my_docstring)\n```", "```py\n This function takes in a folder and filename, and splits the dataset into\n    two files, train.jsonl and test.jsonl, with the split ratio specified by\n    the user.\n\n    Parameters\n    ----------\n    folder : str\n        The folder where the dataset is located.\n    filename : str\n        The name of the dataset file.\n    split_ratio : list\n        The ratio of the split, with the first element being the training set\n        and the second element being the test set.\n\n    Returns\n    -------\n    None\n\n    Examples\n    --------\n    >>> randomly_split_dataset(\"data/\", \"train\n```", "```py\nmy_docstring = generate_docstring(generate_docstring)\n\nprint(my_docstring)\n```", "```py\n This function takes a function as input and returns a docstring for that function.\n    It uses the OpenAI API to generate the docstring.\n\n    Parameters\n    ----------\n    my_func : function\n        The function for which you want a docstring.\n    python_version : float\n        The version of Python you are using.\n\n    Returns\n    -------\n    docstring : str\n        The generated docstring.\n```"]