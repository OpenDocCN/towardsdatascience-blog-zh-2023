- en: 'Euro Trip Optimization: Genetic Algorithms and Google Maps API Solve the Traveling
    Salesman Problem'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/euro-trip-optimization-genetic-algorithms-and-google-maps-python-api-solve-the-traveling-salesman-4ad8e1548207](https://towardsdatascience.com/euro-trip-optimization-genetic-algorithms-and-google-maps-python-api-solve-the-traveling-salesman-4ad8e1548207)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Navigate the charm of Europe’s 50 most visited cities using genetic algorithms
    and Google Maps API, unlocking efficient travel routes
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@riccardo.andreoni?source=post_page-----4ad8e1548207--------------------------------)[![Riccardo
    Andreoni](../Images/5e22581e419639b373019a809d6e65c1.png)](https://medium.com/@riccardo.andreoni?source=post_page-----4ad8e1548207--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4ad8e1548207--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4ad8e1548207--------------------------------)
    [Riccardo Andreoni](https://medium.com/@riccardo.andreoni?source=post_page-----4ad8e1548207--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4ad8e1548207--------------------------------)
    ·8 min read·Sep 2, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/524c212758ae8a7ad835ce4182185b99.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: 'Source: [unsplash.com](https://unsplash.com/photos/A5rCN8626Ck)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that feeling after watching movies like [EuroTrip](https://www.imdb.com/title/tt0356150/),
    where the characters whisk through picturesque European cities on an adventure
    of a lifetime? It’s captivating. Yet, reality promptly reminds us: that orchestrating
    a journey across numerous destinations is no simple task. But here’s the exciting
    twist — armed with programming expertise and a grasp of genetic algorithms, I
    embarked on developing a solution. Imagine being able to optimize complex routes
    spanning dozens of locations with precision. This is where the world of data science
    intersects with the art of adventure planning. In this article, I unveil an algorithmic
    script that elegantly tackles the intricate [Traveling Salesman Problem](https://en.wikipedia.org/wiki/Travelling_salesman_problem)
    (TSP), promising to aid travel planning and enhance our understanding of optimization
    in data science.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Reading this article will provide you with a clear understanding of how the
    synergy between Python, Google Maps API, and genetic algorithms unlock data-driven
    solutions for non-trivial tasks.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Traveling Salesman Problem
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Setting out on a journey often ignites a sense of adventure, but as we contemplate
    the intricacies of travel, the excitement can be accompanied by logistical challenges.
    One such challenge that has captured the attention of mathematicians, computer
    scientists, and logistics experts for decades is the Traveling Salesman Problem
    (TSP). At its core, the TSP poses a seemingly straightforward question: Given
    a list of cities and the distances between them, what is the shortest possible
    route that allows a salesman to visit each city exactly once and return to the
    starting point? While the problem’s statement is concise, its implications extend
    far beyond its surface simplicity.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: In the world of optimization and logistics, the TSP is more than a theoretical
    curiosity; it holds immense practical significance. Consider delivery services,
    where minimizing travel distances translates directly to reduced fuel costs and
    faster service.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Underneath this seemingly straightforward problem statement resides a profound
    level of complexity. The TSP’s combinatorial nature arises from the exponential
    growth in potential solutions as the number of cities increases. The quantity
    of possible routes swiftly skyrockets beyond any computing feasibility, rendering
    traditional brute-force methods impractical for larger instances. The number of
    possible routes is equal to
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a91cf48d46712ea2e7571b5e54ac6878.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: where n represents the number of cities — a [factorial explosion](https://web.mit.edu/urban_or_book/www/book/chapter6/6.4.5.html#:~:text=different%20orderings%20of%20the%20points,about%201.2%20x%201018.)
    that quickly becomes overwhelming. With just 50 cities, the number of possible
    routes equals 3*10⁶², which is just about the [number of atoms in the Milky Way](https://educationblog.oup.com/secondary/maths/numbers-of-atoms-in-the-universe#:~:text=Our%20galaxy%2C%20the%20Milky%20Way,2.4%20%C3%97%201067%20atoms.).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: The TSP stands as a quintessential example of the intriguing intersection between
    mathematics, computer science, and real-world logistical challenges. As the city
    count escalates, unveiling the shortest path demands innovative strategies that
    transcend conventional computational approaches.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: The quest for efficient solutions to the TSP has driven researchers to explore
    a variety of methodologies. Among them are genetic algorithms, a class of optimization
    techniques inspired by the process of natural selection. Genetic algorithms excel
    at navigating complex solution spaces, making them a natural fit for tackling
    problems like the TSP, where brute-force methods quickly become infeasible as
    the number of cities grows.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'The purpose of this article is to navigate the union of these two domains —
    the Traveling Salesman Problem and genetic algorithms. Specifically, we dive into
    a practical application: a Python script designed to exploit the power of genetic
    algorithms for solving the TSP. Our exploration will highlight how this algorithmic
    fusion has the potential to improve travel planning, logistics, and optimization
    challenges across industries. As we understand the inner workings of our genetic
    algorithm-based solution, the world of data science and algorithmic innovation
    will converge, promising new insights and efficient pathways through even the
    most labyrinthine of routes.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Genetic Algorithms
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At its core, a genetic algorithm (GA) is a heuristic search technique inspired
    by the elegant process of natural selection and evolution.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: The inspiration behind genetic algorithms harks back to Charles Darwin’s theory
    of evolution. GAs mimic the process of natural selection by iteratively evolving
    a population of potential solutions. In this digital melting pot, solutions that
    exhibit favorable traits survive and procreate, passing on their “genes” to the
    next generation. This generational evolution continues until an optimal or near-optimal
    solution is achieved.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'Genetic algorithms are characterized by four fundamental components:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '**Selection**: Just as in nature, selection mechanisms identify and favor solutions
    with higher fitness, mirroring the concept of “survival of the fittest.”'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Crossover**: Solutions, or “chromosomes,” exchange genetic material to create
    offspring with a blend of their parent’s traits.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Mutation**: To introduce diversity and prevent premature convergence to suboptimal
    solutions, genetic algorithms incorporate a mutation operator. This operation
    randomly alters certain elements of a solution, similar to genetic mutations in
    nature.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Fitness Evaluation**: It is the determination of each solution’s fitness,
    which quantifies how well it performs the task at hand. The fitness function guides
    the selection process by assigning a higher probability of reproduction to superior
    solutions.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Genetic algorithms exhibit remarkable versatility when it comes to tackling
    optimization problems. Their ability to explore solution spaces in a non-linear,
    multidimensional manner makes them well-suited for complex, real-world challenges.
    Whether it’s optimizing complex engineering designs, fine-tuning neural network
    parameters, or, as we’ll soon see, solving the TSP, genetic algorithms excel in
    scenarios where traditional algorithms fail.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Applying Genetic Algorithms to the Traveling Salesman Problem
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let’s delve into the application of Genetic Algorithms (GAs) to solve the
    Traveling Salesman Problem (TSP).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: At its core, GAs approach the TSP by considering each potential route as an
    individual within a population. This population of routes evolves over generations,
    with each route representing a unique itinerary for the traveling salesman.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'To facilitate this genetic evolution, we represent each route as a chromosome
    — a sequence of cities defining the order of visitation. For example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了促进这种遗传进化，我们将每条路线表示为一个染色体——定义访问顺序的城市序列。例如：
- en: '![](../Images/d9ddfd4f1bafe1299b98f4d2f9ba3418.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d9ddfd4f1bafe1299b98f4d2f9ba3418.png)'
- en: Image by author.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片。
- en: The fundamental task is to discover the optimal chromosome, the sequence that
    minimizes the total travel distance. The fitness of each chromosome is quantified
    by evaluating the total distance it covers when visiting cities in the order specified.
    Lower distance equates to higher fitness, mirroring the goal of finding the shortest
    path.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 基本任务是发现最优染色体，即最小化总旅行距离的序列。每个染色体的适应度通过评估它在指定顺序下访问城市时的总距离来量化。距离越短，适应度越高，这与寻找最短路径的目标相一致。
- en: Implementation in Python
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 Python 实现
- en: Now, let’s follow the step-by-step high-level implementation of the Python script
    designed to tackle the TSP. The complete code is available in my [GitHub repository](https://github.com/andreoniriccardo/TSP-genetic-algorithm).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们按照高层次的步骤实现设计用于解决TSP的Python脚本。完整的代码可以在我的[GitHub 仓库](https://github.com/andreoniriccardo/TSP-genetic-algorithm)中找到。
- en: Getting the data
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取数据
- en: The first step consists of choosing the destinations. For this example, I chose
    to pick the 50 most visited cities in Europe. Once defined the destinations, I
    needed the travel distance and times between each couple of cities. For this kind
    of query, Google Maps API represents the state-of-the-art solution. After setting
    up an account [here](https://developers.google.com/maps/get-started/#create-project),
    you can request your personal API key, needed to authenticate you.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是选择目的地。以这个例子为例，我选择了欧洲50个最受欢迎的城市。一旦确定了目的地，我需要获取每对城市之间的旅行距离和时间。对于这种查询，Google
    Maps API 代表了最先进的解决方案。在[这里](https://developers.google.com/maps/get-started/#create-project)设置一个帐户后，你可以请求你的个人API密钥，用于身份验证。
- en: 'The requests to the Google Maps API are sent in this way:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 向 Google Maps API 发送请求的方式如下：
- en: Initialization
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化
- en: The process begins by generating an initial population of routes. These routes
    are typically created randomly or through a heuristic method.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程开始时生成一组初始路线。这些路线通常是随机创建的，或者通过启发式方法生成的。
- en: '**Fitness Evaluation and Selection**'
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**适应度评估与选择**'
- en: In each step, after generating offspring and mutating some routes, the total
    distance is calculated for each route to evaluate their fitness. This step ensures
    that the algorithm maintains its focus on selecting the shortest paths.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在每一步中，在生成后代和突变一些路线之后，计算每条路线的总距离以评估其适应度。这个步骤确保算法保持对选择最短路径的关注。
- en: In the spirit of natural selection, routes are chosen for reproduction based
    on their fitness. Routes with shorter total distances — those closer to the optimal
    solution — are more likely to be selected, allowing individuals with advantageous
    traits to be more likely to reproduce.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在自然选择的精神下，路线根据其适应度被选择进行繁殖。总距离较短的路线——即接近最优解的路线——更有可能被选择，使得具有有利特征的个体更有可能繁殖。
- en: Crossover and Mutation
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交叉与突变
- en: 'For the particular features of this problem, the classical crossover operation
    is not performed. I opted for two kinds of mutation:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 针对这个问题的特定特点，没有进行经典的交叉操作。我选择了两种突变方式：
- en: '**Single-point mutations**: To maintain diversity and introduce novel solutions,
    the algorithm introduces small, random changes to selected routes. This emulates
    genetic mutations, introducing slight variations.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**单点突变**：为了保持多样性并引入新颖的解决方案，算法对选定的路线进行小的、随机的变化。这模拟了遗传突变，引入了轻微的变异。'
- en: '**“Crossover-mutations”**: Mutates a solution by slicing a random subset of
    its genome and appending it to another position. To recall biological terms, it
    is a sort of asexual reproduction.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**“交叉突变”**：通过切割其基因组的随机子集并将其附加到另一个位置来突变一个解决方案。用生物学术语来说，这是一种无性繁殖的形式。'
- en: Iteration
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迭代
- en: The steps above are repeated for a set number of generations, allowing the population
    to evolve over time. Each iteration brings the algorithm closer to an optimal
    or near-optimal solution.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 上述步骤重复进行若干代，使得种群随着时间的推移不断进化。每次迭代都使算法更接近最优解或接近最优解。
- en: The algorithm continues iterating until a termination criterion is met. In this
    case, the termination criterion consists of the reaching of a predetermined number
    of generations.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 算法将持续迭代直到满足终止标准。在这种情况下，终止标准是达到预定的代数。
- en: Results and Conclusion
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结果与结论
- en: In this exploration, I employed a GA with a population size of 200 individuals
    and ran it for 1000 generations to tackle the TSP with 50 cities. The journey
    from the initial generation to the final outcome reveals the remarkable efficiency
    of the GA-based approach.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次探索中，我使用了一个种群规模为200个个体的遗传算法，并运行了1000代来解决包含50个城市的旅行商问题（TSP）。从初始代到最终结果的旅程展示了基于遗传算法的方法的显著效率。
- en: 'At the outset, in generation zero, the first solution emerged with a fitness
    of 70,755 kilometers:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始阶段，即第零代，第一个解的适应度为70,755公里：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This initial solution, as expected, represented a random arrangement of cities,
    signifying the algorithm’s starting point. However, as the GA traversed through
    successive generations, we observed a remarkable transformation in the quality
    of solutions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个初始解，如预期的那样，代表了城市的随机排列，标志着算法的起点。然而，随着遗传算法在连续的代数中进行，我们观察到了解的质量的显著变化。
- en: After 1000 generations, the GA found its routes. The endpoint was a solution
    with a fitness of 21,345 kilometers — a significant reduction in travel distance
    compared to the initial random solution. This remarkable improvement of nearly
    49,410 kilometers underscores the GA’s effectiveness in optimizing complex routes
    like the TSP.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在1000代之后，遗传算法找到了其路线。最终解的适应度为21,345公里——相比初始的随机解，旅行距离有了显著减少。这一近49,410公里的显著改进突显了遗传算法在优化像TSP这样复杂路线中的有效性。
- en: I performed 4 trials changing the population size. The overall better results
    are obtained with the larger population, but the computation time was obviously
    longer. We can see how, for each trial, the fitness value rapidly decreases over
    the first iterations, and settles to a plateau value later. This is typical behavior
    of a converging algorithm.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我进行了4次试验，改变了种群规模。总体而言，更大的种群获得了更好的结果，但计算时间显然更长。我们可以看到，在每次试验中，适应度值在前几次迭代中迅速下降，并在后期稳定在一个平台值。这是收敛算法的典型行为。
- en: '![](../Images/332ef3b0683153d05a13f33969da509c.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/332ef3b0683153d05a13f33969da509c.png)'
- en: Image by author.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者。
- en: While the TSP remains an NP-hard problem, meaning that finding the absolute
    optimal solution can be computationally challenging for larger instances, the
    GA’s ability to approach near-optimal solutions proves invaluable in practical
    applications. This accomplishment opens doors to more efficient travel planning,
    streamlined logistics, and enhanced optimization across diverse industries. This
    experiment highlights the symbiotic relationship between data science and innovative
    algorithms. It underscores how evolutionary computation, inspired by nature’s
    selection mechanisms, can elegantly address intricate problems in the real world.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管TSP仍然是一个NP困难问题，这意味着对于较大的实例来说，找到绝对最优解可能在计算上具有挑战性，但遗传算法在接近最优解方面的能力在实际应用中证明了其不可或缺的价值。这一成就为更高效的旅行规划、优化物流以及跨行业的增强优化开辟了新的道路。这次实验突显了数据科学与创新算法之间的共生关系，强调了如何通过受自然选择机制启发的进化计算优雅地解决现实世界中的复杂问题。
- en: If you liked this story, consider following me to be notified of my upcoming
    projects and articles!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这个故事，考虑关注我，以便了解我即将发布的项目和文章！
- en: 'Here are some of my past projects:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我过去的一些项目：
- en: '[](/building-a-deep-neural-network-from-scratch-using-numpy-4f28a1df157a?source=post_page-----4ad8e1548207--------------------------------)
    [## Building a Deep Neural Network from Scratch using Numpy'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/building-a-deep-neural-network-from-scratch-using-numpy-4f28a1df157a?source=post_page-----4ad8e1548207--------------------------------)
    [## 使用Numpy从头构建深度神经网络'
- en: Modern Deep Learning libraries are powerful tools but they may lead practitioners
    to take for granted neural networks’…
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现代深度学习库是强大的工具，但它们可能使从业者对神经网络的…
- en: towardsdatascience.com](/building-a-deep-neural-network-from-scratch-using-numpy-4f28a1df157a?source=post_page-----4ad8e1548207--------------------------------)
    [](/building-a-convolutional-neural-network-from-scratch-using-numpy-a22808a00a40?source=post_page-----4ad8e1548207--------------------------------)
    [## Building a Convolutional Neural Network from Scratch using Numpy
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: As Computer Vision applications are becoming omnipresent in our lives, understanding
    the functioning principles of…
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/building-a-convolutional-neural-network-from-scratch-using-numpy-a22808a00a40?source=post_page-----4ad8e1548207--------------------------------)
    [](/choose-the-right-optimization-algorithm-for-your-neural-network-cb86c15d7328?source=post_page-----4ad8e1548207--------------------------------)
    [## Choose the Right Optimization Algorithm for your Neural Network
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: As the nature of neural networks’ developing process is iterative, we need to
    take advantage of each possible expedient…
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/choose-the-right-optimization-algorithm-for-your-neural-network-cb86c15d7328?source=post_page-----4ad8e1548207--------------------------------)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: References
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1]: [Tri-Objective Optimal PMU Placement Including Accurate State Estimation:
    The Case of Distribution Systems](https://ieeexplore.ieee.org/document/9410219)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[2]: [Analyzing the Performance of Mutation Operators to Solve the Travelling
    Salesman Problem](https://arxiv.org/abs/1203.3099)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[3]: [Probabilistic model with evolutionary optimization for cognitive diagnosis](https://dl.acm.org/doi/10.1145/3583131.3590522)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[4]: [Simulated Binary Crossover for Continuous Search Space](https://content.wolfram.com/uploads/sites/13/2018/02/09-2-2.pdf)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[5]: [A new mutation operator for real coded genetic algorithms](https://www.researchgate.net/publication/223248251_A_new_mutation_operator_for_real_coded_genetic_algrithms)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[6]: [Computing the optimal road trip across the U.S.](https://randalolson.com/2015/03/08/computing-the-optimal-road-trip-across-the-u-s/)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
