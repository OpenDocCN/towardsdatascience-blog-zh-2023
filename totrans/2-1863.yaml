- en: Simulating Exoplanet Discoveries with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/simulating-exoplanet-discoveries-with-python-a2d460a4889b](https://towardsdatascience.com/simulating-exoplanet-discoveries-with-python-a2d460a4889b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Quick Success Data Science
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The awesome power of modeling!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@lee_vaughan?source=post_page-----a2d460a4889b--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----a2d460a4889b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a2d460a4889b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a2d460a4889b--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----a2d460a4889b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a2d460a4889b--------------------------------)
    ·15 min read·Dec 18, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/275b292e72001e54059c74256ae87af6.png)'
  prefs: []
  type: TYPE_IMG
- en: Venus transiting the sun in June 2012 (Evan Clark via [Real-world Python](https://a.co/d/4GHvthg))
  prefs: []
  type: TYPE_NORMAL
- en: Before I flew to Idaho to photograph the *Great American Eclipse of 2017*, I
    did my homework. The *totality event*, when the moon completely covered the sun,
    lasted only 2 minutes and 10 seconds. That left no time for experimenting, testing,
    or figuring things out on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: To successfully capture images of the penumbra, umbra, solar flares, and diamond
    ring effect, I had to know exactly what equipment to take, what camera settings
    to use, and when these events would occur. With the help of the internet, I was
    able to work this out and prepare a precise timetable for my location.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b847bfd07be4e46b44a24e03344d164d.png)'
  prefs: []
  type: TYPE_IMG
- en: The diamond ring effect during the 2017 total solar eclipse (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, *computer simulations* prepare scientists for making observations
    of the natural world. They help them understand what to expect and when to expect
    it, and how to calibrate their instruments and design their experiments.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this article is to showcase the *practical applications* of simulations
    using *exoplanet transit events*. Exoplanets are celestial bodies that orbit stars
    beyond our solar system.
  prefs: []
  type: TYPE_NORMAL
- en: Astronomers have discovered thousands of exoplanets using a technique called
    *transit photometry*, which records the slight dimming of a star’s light as an
    exoplanet passes between the star and Earth. We can use a transit simulator to
    understand the impact of factors like a planet’s size and the presence of sunspots,
    asteroid fields, moons, and even alien megastructures.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the simulator, we’ll use [OpenCV](https://opencv.org/), Python’s premier
    open-source library for working with images and videos, and [Tkinter](https://en.wikipedia.org/wiki/Tkinter),
    Python’s built-in tool for building [graphical user interfaces](https://realpython.com/python-gui-tkinter/)
    (GUIs). We’ll use the latter to make a dashboard. Here’s a preview:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/adb88b67096ca628926b412ab8740b14.png)'
  prefs: []
  type: TYPE_IMG
- en: The Exoplanet Transit Dashboard in action (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Transit Photometry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In astronomy, a *transit* occurs when a relatively small celestial body passes
    directly between the disc of a larger body and an observer. When the small body
    moves across the face of the larger body, the larger body dims slightly. The best-known
    transits are those of Mercury and Venus against our sun.
  prefs: []
  type: TYPE_NORMAL
- en: With today’s technology, astronomers can detect the subtle dimming of a faraway
    star’s light during a transit event. The technique, called transit photometry,
    outputs a plot of a star’s brightness over time.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/05748fd5113fde7753d7ccff2c55d598.png)'
  prefs: []
  type: TYPE_IMG
- en: The transit photometry technique for detecting exoplanets (from [Real-world
    Python](https://a.co/d/4GHvthg))
  prefs: []
  type: TYPE_NORMAL
- en: In the previous figure, the blue dots on the light curve graph represent measurements
    of the light given off by a star. When a planet is not positioned over the star
    (position 1 in the figure), the measured brightness is at a maximum. (We’ll ignore
    light reflected off the exoplanet as it goes through its phases, which would very
    slightly increase the apparent brightness of the star).
  prefs: []
  type: TYPE_NORMAL
- en: As the leading edge of a planet moves onto the disc (position 2), the emitted
    light progressively dims, forming a ramp in the light curve. When the entire planet
    is visible against the disc (position 3), the light curve flattens, and it remains
    flat until the planet begins exiting the far side of the disc. This creates another
    ramp (position 4), which rises until the planet passes completely off the disc
    (position 5). At that point, the light curve flattens at its maximum value, as
    the star is no longer obscured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because the amount of light blocked during transit is proportional to the size
    of the planet’s disc, you can calculate the radius of the planet using the following
    formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4722e100269606e1a0ddfca10c7aad62.png)'
  prefs: []
  type: TYPE_IMG
- en: where *Rp* is the planet’s radius and *Rs* is the star’s radius. Astronomers
    determine the star’s radius using its distance, brightness, and color, which relates
    to its temperature. *Depth* refers to the total change in brightness during the
    transit, as illustrated in the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3b2afe5eac7ddd47a54d0dc3b678be25.png)'
  prefs: []
  type: TYPE_IMG
- en: “Depth” is the total change in brightness observed in a light curve (from [Real-world
    Python](https://a.co/d/4GHvthg))
  prefs: []
  type: TYPE_NORMAL
- en: The larger the exoplanet, the greater the depth of the light curve.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, these calculations assume that the *whole* exoplanet, not just *part*
    of it, moved over the face of the star. If the exoplanet skims the top or bottom
    of the star (from our point of view), the result is an “incomplete” and “V-shaped”
    light curve of limited use.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/edfde29011d62a20c892887acc66748c.png)'
  prefs: []
  type: TYPE_IMG
- en: A partial transit (red arrow) produces a “V-shaped” light curve (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Observing exoplanets by measuring light curves isn’t just for professional astronomers.
    According to [*Sky & Telescope*](https://skyandtelescope.org/astronomy-news/how-amateurs-could-help-future-exoplanet-observations/)
    magazine, even small 6" scopes can record useful light curves. NASA has even started
    a [citizen scientist program](https://science.nasa.gov/science-research/astrophysics/confirm-the-existence-of-newly-discovered-worlds-right-from-your-backyard-with-unite/)
    where backyard astronomers help professionals find Jupiter-sized exoplanets.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following Python program uses OpenCV to generate a visual simulation of
    an exoplanet transiting a star, plots the resulting light curve with Matplotlib,
    and displays the two together in a dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: To generate a light curve, we’ll need to be able to measure changes in brightness.
    We can do this with OpenCV by performing mathematical operations on pixels.
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenCV is best installed using pip, so if you’re an Anaconda user, you’ll want
    it to be the *last* thing you add to your conda environment. Here’s the installation
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install opencv-python`'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also need an image of our sun, which you can download from this [GitHub
    repository](https://github.com/rlvaugh/Real_World_Python/blob/master/Chapter_8/limb_darkening.png).
    Just click the link and then press the download icon to the upper right of the
    image. Store it in the same folder as your Python script.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5518cc0ab2bdd61c782681e53ead8622.png)'
  prefs: []
  type: TYPE_IMG
- en: Click the icon circled in red to download the image from [GitHub](https://github.com/rlvaugh/Real_World_Python/blob/master/Chapter_8/limb_darkening.png)
    ([NSO/AURA/NSF](https://nso.edu/about/image-use-policy/))
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries and Assigning Constants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following code imports tkinter, for creating a dashboard; matplotlib, for
    plotting the light curve, matplotlib’s `backend_tkagg` module and `FigureCanvasTkAgg`
    class, for integrating between tkinter and matplotlib; and OpenCV (`cv2`), for
    displaying the star image and calculating relative brightness for the light curve.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `BLACK_IMG` variable holds an image of our sun, which will serve as a proxy
    for an alien star. Note that we load it as a *grayscale* image so that we can
    measure intensity (brightness) directly from the pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Using an image allows us to capture real-life variations in the brightness of
    the *photosphere*. The photosphere is the luminous outer layer of a star that
    radiates light and heat. Because the temperature of the photosphere falls as the
    distance from the star’s center increases, the edges of a star’s disk are cooler
    and therefore appear dimmer than the center of the star. This effect is known
    as [*limb darkening*](https://en.wikipedia.org/wiki/Limb_darkening)and it has
    a noticeable effect on light curves.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The constants with names beginning with `EXO_` represent parameters related
    to the exoplanet. These include its radius, speed (`DX`), and starting coordinates,
    measured in pixels. The `NUM_FRAMES` constant determines how long the simulation
    will run.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a Function to Create the Dashboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our dashboard will include both an image and a graph. OpenCV will handle the
    image, matplotlib the graph, and Tkinter will combine them into a single display.
    Tkinter does this using a widget called a *canvas*, which provides a drawing area
    for purposes such as displaying images, drawing shapes, and creating interactive
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The code begins by using matplotlib to make two vertically stacked subplots.
    We then create the canvas using the `FigureCanvasTkAgg` class, which embeds the
    canvas in a Tkinter window. We’ll display our figure (`fig`) on this canvas. As
    part of the `backend_tkagg` module, `FigureCanvasTkAgg` facilitates the proper
    rendering of Matplotlib figures within a Tkinter application.
  prefs: []
  type: TYPE_NORMAL
- en: The `master` parameter for this class specifies the *master widget* (or window)
    that will contain the canvas. In this case, it's the Tkinter *root window* (`root`)
    that we’ll create at the end of the program (using `root = tk.Tk()`).
  prefs: []
  type: TYPE_NORMAL
- en: We next create an empty list to hold the intensity (relative brightness) measurements,
    and then reassign the x-axis starting point constant to a new variable, `exo_start_x`.
    We’ll increment this variable by the `EXO_DX` constant as the program runs to
    move the exoplanet forward. The larger the value of `EXO_DX`, the faster it will
    move.
  prefs: []
  type: TYPE_NORMAL
- en: The simulation is a `for` loop controlled by the `NUM_FRAMES` constant. To avoid
    degrading the input image, we copy it to a temporary image (`temp_img`) at the
    start of each loop. Next, we draw a black circle, representing the exoplanet,
    using the `[cv.circle()](https://docs.opencv.org/4.x/d6/d6e/group__imgproc__draw.html#gaf10604b069374903dbd0f0488cb43670)`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: To measure the intensity, we take the mean of the image and append it to the
    `intensity_samples` list.
  prefs: []
  type: TYPE_NORMAL
- en: The next few lines draw the dashboard and update its components by calling functions
    that we will define next. The `root.after(3)` line introduces a short delay of
    3 milliseconds after each iteration. The function ends by incrementing the exoplanet’s
    x coordinate.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a Function to Calculate Relative Brightness
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we define a helper function to calculate the relative brightness from
    the list of intensity samples. The first step is to find the maximum value in
    the list. The next step returns a new list in which each intensity item is divided
    by the maximum value, normalizing the results from 0 to 1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Defining Functions to Update the Dashboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we define functions for updating the two components of the dashboard with
    each loop iteration. The first one updates the grayscale image. The second redraws
    the light curve with the updated `intensity_samples` list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Running the Simulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last bit of code calls the Tkinter root window, the function to create the
    dashboard, and Tkinter’s `mainloop()` function. The latter is the Tkinter *event
    loop* that runs the simulation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s an example of a completed simulation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bb7e411a230ed71d3c15fe83d5e95de6.png)'
  prefs: []
  type: TYPE_IMG
- en: The dashboard at the end of a simulation (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: While the effect of the exoplanet’s transit on its star’s light curve looks
    dramatic, you’re only seeing the topmost fraction of the total brightness. If
    you replot the curve with the *full range* of y-values, the planet’s impact is
    barely perceptible.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0fa727b06e3de75bf307d8b7850afeb7.png)'
  prefs: []
  type: TYPE_IMG
- en: The light curve plotted with a full y-axis (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Going forward, we’ll work with *single transits*, but in real life, astronomers
    capture *many transits*, if possible. There’s a lot of information entangled in
    a light curve, and by recording multiple transit events, astronomers can determine
    an exoplanet’s orbital parameters, such as the distance between the planet and
    the star. They can use subtle inflections in the light curve to tease out the
    amount of time the planet is fully over the surface of the star. They can estimate
    the theoretical amount of limb darkening, and they can use modeling — as you’re
    doing here — to bring it all together and test their assumptions against actual
    observations.
  prefs: []
  type: TYPE_NORMAL
- en: Experimenting with Transit Photometry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a working simulator, we can use it to model possible behaviors
    of transits, permitting better analysis of real-life observations in the future.
    One approach would be to run a lot of possible cases and produce an “atlas” of
    expected exoplanet responses. Researchers could use this atlas to help them interpret
    actual light curves.
  prefs: []
  type: TYPE_NORMAL
- en: Starspots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sunspots — called starspots on alien suns — are regions of reduced surface temperature
    caused by variations in the star’s magnetic field. Starspots can darken the face
    of stars and do interesting things to light curves.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see an example, edit the previous script so that an exoplanet roughly the
    same size as a starspot passes over several during its transit. Change the following
    constants as indicated:'
  prefs: []
  type: TYPE_NORMAL
- en: '`EXO_RADIUS = 4`'
  prefs: []
  type: TYPE_NORMAL
- en: '`EXO_START_Y = 205`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5af9e0b6fe2e75a7252ea62925cbafd2.png)'
  prefs: []
  type: TYPE_IMG
- en: Starspots in the transit path result in a “bumpy” light curve (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: When the exoplanet occludes (covers) a starspot, the overall effect is to brighten
    the image, as two dark spots become one. This, in turn, causes short-lived “bumps”
    in the light curve.
  prefs: []
  type: TYPE_NORMAL
- en: Asteroid Belts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Asymmetrical light curves may also be produced by *asteroid fields*. These belts
    of debris often originate from planetary collisions or the creation of a solar
    system, like the [Trojan asteroids](https://www.nasa.gov/missions/nasas-lucy-in-the-sky-with-asteroids/)
    in Jupiter’s orbit.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b5db9306d33ee977b02c79c96fe538b1.png)'
  prefs: []
  type: TYPE_IMG
- en: Trojan asteroids and Jupiter (courtesy of [NASA](https://www.nasa.gov/image-article/lucy-mission-study-trojan-asteroids/))
  prefs: []
  type: TYPE_NORMAL
- en: The following code creates random asteroids using object-oriented programming
    (OOP). If you want *reproducible* asteroid objects, make sure that the line `random.seed(15)`
    is uncommented. Changing the seed number `(15)` will change both the asteroid
    sizes and their distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/68e4fba8f233e02ffef181baec8e4c92.png)'
  prefs: []
  type: TYPE_IMG
- en: A simulated transit by an asteroid belt (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Transiting asteroids produce irregular and asymmetrical light curves. Interior
    “ledges” represent individual asteroids moving onto and off the face of the star.
  prefs: []
  type: TYPE_NORMAL
- en: Simulating for Fun
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let’s run some unusual experiments on both edge cases and “edgy” cases.
    We’ll run these experiments without the sun image, so we can focus entirely on
    the feature being simulated. For brevity, I’ll provide links to the code for each
    simulation rather than explicitly include it.
  prefs: []
  type: TYPE_NORMAL
- en: Modeling an Exoplanet with an Exomoon
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What happens if an exoplanet has an orbiting moon? Let’s take a look (you can
    find the code for this simulation in this [GitHub repository](https://github.com/rlvaugh/Real_World_Python/blob/master/Chapter_8/practice_planet_moon.py)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3ae96bba374e0eba3a672bdc8c5c8e79.png)'
  prefs: []
  type: TYPE_IMG
- en: An exoplanet with an orbiting moon (by the author & Dr. Eric Mortenson)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eae77b4bc4ac8ff216acd16a2561abff.png)'
  prefs: []
  type: TYPE_IMG
- en: Light curve for exoplanet with orbiting moon (by the author & Dr. Eric Mortenson)
  prefs: []
  type: TYPE_NORMAL
- en: A moon orbiting in the same plane as an exoplanet’s orbit and parallel to Earth’s
    orbit will produce a little bump in the light curve every time it is eclipsed
    by the exoplanet. NASA may have already observed this happening. You can see a
    video of the event [here](https://exoplanets.nasa.gov/news/1525/new-moon-astronomers-find-first-evidence-of-a-possible-moon-outside-our-solar-system/).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/54d8c76027773f2fdd82129c7e8f847e.png)'
  prefs: []
  type: TYPE_IMG
- en: The light curve for Kepler-1625 suggests the presence of an exoplanet with moon
    ([NASA](https://exoplanets.nasa.gov/news/1525/new-moon-astronomers-find-first-evidence-of-a-possible-moon-outside-our-solar-system/))
  prefs: []
  type: TYPE_NORMAL
- en: Notice the similarities between the light curve for Kepler-1625 in the previous
    figure and our moon simulation. Thanks to modeling, the Kepler-1625 result should
    come as no surprise.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting Alien Megastructures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In 2015, citizen scientists working on data from the Kepler space telescope
    noticed something odd about Tabby’s Star, located in the constellation Cygnus.
    The star’s light curve, recorded in 2013, exhibited irregular changes in brightness
    that were far too large to be caused by a planet.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ee26a4dfe62ef2b67030f3761e2aa5d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Tabby’s Star light curve measured by the Kepler Space Observatory (by the author
    from [Wikipedia](https://en.wikipedia.org/wiki/Tabby%27s_Star))
  prefs: []
  type: TYPE_NORMAL
- en: Besides the dramatic drop in brightness, the light curve was asymmetrical and
    included weird bumps that aren’t seen in typical planetary transits. Proposed
    explanations posited that the light curve was caused by the consumption of a planet
    by the star, the transit of a cloud of disintegrating comets, a large ringed planet
    trailed by swarms of asteroids, or an alien megastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Scientists speculated that an artificial structure of this size would most likely
    represent an attempt by an alien civilization to collect energy from its sun.
    Both science literature and science fiction describe these staggeringly large
    solar panel projects. Examples include Dyson swarms, Dyson spheres, ringworlds,
    and Pokrovsky shells.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49ebd856ba1efac15a73d343ed724049.png)'
  prefs: []
  type: TYPE_IMG
- en: Pokrovsky shell system of rings designed to intercept a star’s radiation ([Wikimedia
    Commons](https://commons.wikimedia.org/wiki/File:Pokrovsky_shell.png))
  prefs: []
  type: TYPE_NORMAL
- en: To simulate a megastructure, we’ll replace the circular exoplanet used in the
    program with other simple geometric shapes. We don’t need to match the curve *exactly*;
    we just need to capture *key features* such as the asymmetry, the “bump” seen
    around February 28, and the (very) large drop in brightness.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s my attempt using two huge but asymmetrical solar panels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6a67572d30683f48221beff1401133a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Simulated megastructure for Tabby’s Star (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5f49ee5cbd1206ae6e1d91a7acdd30da.png)'
  prefs: []
  type: TYPE_IMG
- en: Simulated megastructure light curve for Tabby’s Star (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: This curve is very similar to the one for Tabby’s Star. Believe it or not, I
    produced it with my very first attempt! You can find the code [here](https://github.com/rlvaugh/Real_World_Python/blob/master/Chapter_8/practice_tabbys_star.py).
  prefs: []
  type: TYPE_NORMAL
- en: This was fun, but we now know that whatever is orbiting Tabby’s Star allows
    *some* wavelengths of light to pass, so it can’t be a solid object. Based on this
    behavior and the wavelengths it absorbs, scientists believe dust is responsible
    for the weird shape of the star’s light curve. Other stars, however, like HD 139139
    in the constellation Libra, have bizarre light curves that remain unexplained.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting an Alien Armada
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we’re already having fun, let’s not hold back.
  prefs: []
  type: TYPE_NORMAL
- en: The hyper-evolved beavers of exoplanet BR549 have been as busy as, well, beavers.
    They’ve amassed an armada of colossal colony ships that are now loaded and ready
    to leave orbit. Thanks to some exoplanet detection of their own, they’ve decided
    to abandon their chewed-out home world for the lush green forests of Earth!
  prefs: []
  type: TYPE_NORMAL
- en: Would we be able to detect this armada using a light curve? Let’s find out.
    You can find the code for this simulation [here](https://github.com/rlvaugh/Real_World_Python/blob/master/Chapter_8/practice_alien_armada.py).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a6b8beaff0f42f556de309deb2a4e992.png)'
  prefs: []
  type: TYPE_IMG
- en: An alien armada transiting an alien star (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3e29679e4a2bdf1278b766298a0b0441.png)'
  prefs: []
  type: TYPE_IMG
- en: Light curve for the alien armada simulation (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: The orbiting spaceships produced an asymmetrical and irregular light curve.
    Based on the example of Tabby’s Star, this would surely garner interest, but I’ll
    bet no astronomer (except maybe [Avi Loeb](https://medium.com/@avi-loeb/about))
    would have the courage to suggest its true origin! At any rate, you wouldn’t want
    to reach this conclusion until after you’ve run exhaustive simulations with asteroids,
    multiple exoplanets, comet swarms, dust clouds, and other natural phenomena.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I hope you enjoyed this small project and gained an appreciation for computer
    simulations. As versatile and powerful tools for scientific research, they can
    help scientists and engineers understand complex phenomena and design efficient
    experiments. Their advantages include:'
  prefs: []
  type: TYPE_NORMAL
- en: The ability to model intricate systems that may be challenging or impossible
    to study directly. This includes avoiding safety hazards associated with field
    studies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The design of efficient and cost-effective experiments that are not possible
    in the real world. Just as we didn’t need an observatory to simulate exoplanet
    transits, simulations can eliminate the need for expensive equipment and resources
    and shorten the time it takes to complete a study.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of sensitivity analyses to predict and address the impacts of changing
    parameters. This helps identify critical factors and eliminate the need for expensive
    trials-by-error.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The discovery of *emergent phenomena* that may not be immediately apparent in
    real-world observations. This may lead to other discoveries not even dreamed of
    before running the simulation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The optimization of designs and processes for the most efficient or effective
    solutions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The generation of compelling and engaging educational tools for students in
    a classroom or managers in a boardroom. If a picture is worth a thousand words,
    a good simulation is worth a million.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contributions to *predictive modeling*, enabling researchers to forecast future
    trends, behaviors, or events. This is especially crucial in fields like economics,
    climatology, and epidemiology.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While simulations can’t completely replace real-world experiments, they provide
    numerous advantages in cost, time, safety, and the ability to explore and understand
    complex systems.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for reading and please follow me for more *Quick Success Data Science*
    projects in the future. And for more on discovering exoplanets, check out Chapter
    8 of my book, [*Real-world Python*](https://a.co/d/4GHvthg).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://a.co/d/4GHvthg?source=post_page-----a2d460a4889b--------------------------------)
    [## Real-World Python: A Hacker''s Guide to Solving Problems with Code'
  prefs: []
  type: TYPE_NORMAL
- en: 'Real-World Python: A Hacker''s Guide to Solving Problems with Code [Vaughan,
    Lee] on Amazon.com. *FREE* shipping on…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: a.co](https://a.co/d/4GHvthg?source=post_page-----a2d460a4889b--------------------------------)
  prefs: []
  type: TYPE_NORMAL
