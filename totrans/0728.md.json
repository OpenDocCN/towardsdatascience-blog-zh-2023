["```py\ndf = pd.read_csv('creditcard.csv')\ndf.head()\n```", "```py\ndf.isnull().sum().max() # Output: 0\n```", "```py\nprint('No Frauds', round(df['Class'].value_counts()[0]/len(df) * 100,2), '% of the dataset')\nprint('Frauds', round(df['Class'].value_counts()[1]/len(df) * 100,2), '% of the dataset')\n\n# Output: \n# No Frauds 99.83 % of the dataset\n# Frauds 0.17 % of the dataset\n```", "```py\nclass AnomalyDetector(Model):\n    def __init__(self, n_features):\n        super(AnomalyDetector, self).__init__()\n        self.encoder = tf.keras.Sequential([\n            layers.Dense(16, activation=\"elu\"),\n            layers.Dense(8, activation=\"elu\"),\n            layers.Dense(4, activation=\"elu\"),\n            layers.Dense(2, activation=\"elu\"),\n            layers.ActivityRegularization(l1=1e-3)])\n\n        self.decoder = tf.keras.Sequential([\n            layers.Dense(2, activation=\"elu\"),\n            layers.Dense(4, activation=\"elu\"),\n            layers.Dense(8, activation=\"elu\"),\n            layers.Dense(16, activation=\"elu\"),\n            layers.Dense(n_features, activation=\"elu\")])\n\n    def call(self, x):\n        encoded = self.encoder(x)\n        decoded = self.decoder(encoded)\n        return decoded\n```", "```py\nautoencoder = AnomalyDetector(n_features)\nopt = tf.keras.optimizers.Adam(learning_rate=0.001)\nautoencoder.compile(optimizer=opt, loss=\"mean_squared_error\")\nearlystopper = EarlyStopping(monitor='val_loss', patience=5, verbose=1, restore_best_weights=True)\n\nhistory = autoencoder.fit(\n        normal_train_data_transformed, \n        normal_train_data_transformed, \n        epochs=100, \n        batch_size=128,\n        validation_data=(normal_val_data_transformed, normal_val_data_transformed),\n        callbacks=[earlystopper],\n        shuffle=True)\n```", "```py\ntest_data_predictions = autoencoder.predict(X_test_transformed)   # predict reconstruction\nmse = np.mean(np.power(X_test_transformed - test_data_predictions, 2), axis=1)   # calculates MSE between test data and reconstruction\n```", "```py\nclass AnomalyDetector(Model):\n    def __init__(self, n_features):\n        super(AnomalyDetector, self).__init__()\n        self.encoder = tf.keras.Sequential([\n            layers.Dense(32, activation=\"elu\"),\n            layers.Dense(16, activation=\"elu\"),\n            layers.Dense(8, activation=\"elu\"),\n            layers.Dense(4, activation=\"elu\"),\n            layers.ActivityRegularization(l1=1e-3)])\n\n        self.decoder = tf.keras.Sequential([\n            layers.Dense(4, activation=\"elu\"),\n            layers.Dense(8, activation=\"elu\"),\n            layers.Dense(16, activation=\"elu\"),\n            layers.Dense(32, activation=\"elu\"),\n            layers.Dense(n_features, activation=\"relu\")])\n\n    def call(self, x):\n        encoded = self.encoder(x)\n        decoded = self.decoder(encoded)\n        return decoded\n```"]