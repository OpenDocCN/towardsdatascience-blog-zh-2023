["```py\nfrom sklearn.preprocessing import LabelEncoder\n\n# Sample list of categorical labels\nlabels = [\"netflix\", \"prime video\", \"hbo max\", \"hulu\"]\n\n# Initialize the LabelEncoder\nlabel_encoder = LabelEncoder()\n\n# Fit and transform the labels to integer values\ninteger_encoded = label_encoder.fit_transform(labels)\n\n# Print the encoded labels\nprint(integer_encoded)\n```", "```py\nfrom sklearn.preprocessing import OneHotEncoder\nimport numpy as np\n\n# Sample categorical data (list of categories)\ncategories = [\"netflix\", \"prime video\", \"hbo max\", \"hulu\"]\n\n# Initialize the OneHotEncoder\nonehot_encoder = OneHotEncoder(sparse=False)\n\n# Reshape the data into a 2D array (required for scikit-learn)\ncategories = np.array(categories).reshape(-1, 1)\n\n# Fit and transform the categories into one-hot encoded vectors\nonehot_encoded = onehot_encoder.fit_transform(categories)\n\n# Print the one-hot encoded vectors\nprint(onehot_encoded)\n```", "```py\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\n# Sample data: List of sets representing categories for each data point\ndata = [{'drama', 'fantasy', 'horror'}, {'comedy', 'animation', 'family'},\\\n        {'sport'}, {'documentary'}, {'comedy', 'drama', 'biography'}]\n\nunique_categories = ['action','comedy','short','western','drama','horror',\\\n                     'music','thriller','animation','adventure','family',\\\n                     'fantasy','sport','romance','crime','sci-fi','biography',\\\n                     'musical','mystery','history','documentary','film-noir',\\\n                     'news','game-show','reality-tv','war','talk-show','adult']\n\n# Initialize the MultiLabelBinarizer\nmlb = MultiLabelBinarizer(classes=sorted(unique_categories))\n\n# Fit and transform the data into multi-hot encoded vectors\nmulti_hot_encoded = mlb.fit_transform(data)\n\n# Print the multi-hot encoded vectors\nprint(multi_hot_encoded)\n```", "```py\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD\nimport numpy as np\n\n# Sample documents (corpus)\ndocuments = [\n    \"This is the first document.\",\n    \"This document is the second document.\",\n    \"And this is the third one.\",\n    \"Is this the first document?\",\n]\n\n# Step 1: Apply TF-IDF\ntfidf_vectorizer = TfidfVectorizer()\ntfidf_matrix = tfidf_vectorizer.fit_transform(documents)\n\n# Step 2: Perform SVD on TF-IDF matrix\nn_components = 2  # Number of components (adjust as needed)\nsvd = TruncatedSVD(n_components=n_components)\nsvd_matrix = svd.fit_transform(tfidf_matrix)\n\n# Print the TF-IDF matrix and SVD results\nprint(\"TF-IDF Matrix:\")\nprint(tfidf_matrix.toarray())\nprint(\"\\n\")\nprint(\"SVD Matrix:\")\nprint(svd_matrix)\n```"]