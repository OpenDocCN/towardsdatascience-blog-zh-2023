- en: Make a Punchcard Plot with Seaborn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/make-a-punchcard-plot-with-seaborn-ee8097bee4e1](https://towardsdatascience.com/make-a-punchcard-plot-with-seaborn-ee8097bee4e1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Quickly identify cyclical trends
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@lee_vaughan?source=post_page-----ee8097bee4e1--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----ee8097bee4e1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ee8097bee4e1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ee8097bee4e1--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----ee8097bee4e1--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ee8097bee4e1--------------------------------)
    ·6 min read·Sep 17, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9d2e6660c00c362b880ffac58e014488.png)'
  prefs: []
  type: TYPE_IMG
- en: A punch clock with timecards (image by Hennie Stander on UnSplash)
  prefs: []
  type: TYPE_NORMAL
- en: A *punchcard plot*, also called a *table bubble chart,* is a type of visualization
    for highlighting cyclical trends in data. It displays data in a rigid *matrix*
    or *grid* format, usually composed of days of the week versus hours of the day.
    Circles represent data points at the intersections of the rows and columns and
    their size conveys the data value. Color can be used to include additional information.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2c386b48028bb15000f4a0f66bb298f2.png)'
  prefs: []
  type: TYPE_IMG
- en: A table bubble plot (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: The name “punchcard” is an allusion to old-timey “timecards” that workers would
    stamp or “punch” in a machine to record their comings and goings.
  prefs: []
  type: TYPE_NORMAL
- en: To build a punchcard plot, you need *timestamped* data. In this *Quick Success
    Data Science* project, we’ll use a Kaggle dataset to track the times when bicycles
    are rented in Washington, D.C.
  prefs: []
  type: TYPE_NORMAL
- en: The Dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kaggle [*Bike Sharing in Washington D.C. Dataset*](https://www.kaggle.com/datasets/marklvl/bike-sharing-dataset)
    contains the hourly and daily count of bikes rented in 2011 and 2012 in the [*Capital
    bikeshare system*](https://capitalbikeshare.com/system-data) in Washington, D.C.
    [1]. This data is released under a [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
    For details about the dataset contents visit the [*readme* file](https://www.kaggle.com/datasets/marklvl/bike-sharing-dataset?select=Readme.txt).
  prefs: []
  type: TYPE_NORMAL
- en: For convenience, I’ve already downloaded this data to a public [Gist](https://gist.github.com/rlvaugh/26ac62747291143ee06421c0d24131d6).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides Python, you’ll need the pandas data analysis library and the seaborn
    plotting library. You can install them with:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conda install pandas seaborn`'
  prefs: []
  type: TYPE_NORMAL
- en: or
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install pandas seaborn`'
  prefs: []
  type: TYPE_NORMAL
- en: The Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following commented code was written in JupyterLab and is described by cell.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries and Loading the Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After importing matplotlib and seaborn for plotting and pandas for data analysis,
    we’ll read the CSV file of rental data into a pandas DataFrame, keeping only the
    columns for the season of the year, the weekday, the hour, and the count (number
    of rentals).
  prefs: []
  type: TYPE_NORMAL
- en: The weekdays are stored numerically (starting with 0 for Sunday). For readability,
    we’ll map these to the name of the day and make a new column, called “Day” to
    hold the names. Also, for readability, we’ll rename the “hrs” and “cnt” columns,
    capitalizing “Hours” as it will be used for a figure label.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/17d46a1a00adba4611be70e002cc4b48.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a DataFrame for the Summer Months
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this analysis, we’ll focus on the summer season, which will provide good
    examples of both the recreational and business use of bicycles. The seasons are
    labeled numerically in the dataset, with summer labeled 2.
  prefs: []
  type: TYPE_NORMAL
- en: First, we’ll make a new DataFrame with just the summer data, then use pandas’
    `groupby()` and `sum()` methods to aggregate the rentals by day and by hour. Since
    there are 7 days and 24 hours in a day, this new DataFrame will have 168 rows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Making the Punchcard Plot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make the punchcard plot we’ll use seaborn’s `scatterplot()` method. The size
    of the circular markers is controlled by the “count” column. You can play with
    the `sizes` and the `figsize` arguments to find combinations that are aesthetically
    pleasing.
  prefs: []
  type: TYPE_NORMAL
- en: While we have the *option* of converting the hours to datetime, so that “10”
    becomes “10:00,” I feel this clutters the x-axis without adding much value.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, the days of the week are plotted in alphabetical order. I prefer
    this as it keeps the weekend days grouped together, rather than split out at the
    top and bottom of the plot. It also plots Friday adjacent to Monday, which is
    useful for easily comparing behaviors at the start and end of the work week.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/768c50d1b51f1c12bbd08630d6737492.png)'
  prefs: []
  type: TYPE_IMG
- en: The initial punchcard plot (by author)
  prefs: []
  type: TYPE_NORMAL
- en: This is a cool-looking plot with several easy-to-distinguish patterns. First,
    renting behaviors on the weekend are notably different than during the work week.
    Second, the weekdays show little variation. Friday and Monday, which are conveniently
    adjacent, show very similar trends. Third, morning and evening rush hours are
    obvious during the work week.
  prefs: []
  type: TYPE_NORMAL
- en: We can make this plot even easier to read by highlighting events such as rush
    hours and the weekend.
  prefs: []
  type: TYPE_NORMAL
- en: Highlighting Rush Hour
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: According to the internet, rush hour in Washington, D.C. is between 6:00 and
    9:00 a.m. in the mornings and 4:00 and 7:00 p.m. in the evening. To highlight
    these periods, in the previous code, boost the `scatterplot()` method's `alpha`
    argument to `1` and then add the following code to the bottom and rerun.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/395e57300395e971e58f83e1baa376ef.png)'
  prefs: []
  type: TYPE_IMG
- en: The punchcard plot with rush hour highlighted in red (by author)
  prefs: []
  type: TYPE_NORMAL
- en: Highlighting the Weekends
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To highlight the weekend days, add the code below and replot the figure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d9d84f3683999f2b766f7086c6068298.png)'
  prefs: []
  type: TYPE_IMG
- en: The punchcard plot with both rush hours and weekends highlighted (by author)
  prefs: []
  type: TYPE_NORMAL
- en: While this plot is useful, it’s difficult to tell which days had the highest
    and lowest rental rates. To check this, we can make a new DataFrame for the summer,
    aggregating only on days.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bc925778a6904914c928fd5779704494.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we can quantitatively judge the differences between the days.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a9169d2d28b48a0250a4e2d16ccfc826.png)'
  prefs: []
  type: TYPE_IMG
- en: Summer bike rental totals vs. day of the week (by author)
  prefs: []
  type: TYPE_NORMAL
- en: Interpreting and Using the Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An interesting thing to note in the punchcard plot is that more bikes are rented
    during the *afternoon* rush hour than during the *morning* rush hour. These additional
    riders must represent people running errands or riding for recreation.
  prefs: []
  type: TYPE_NORMAL
- en: During the work week, the best time to perform maintenance on bikes would be
    between 9:00 a.m. and 4:00 p.m., when commuters are at work. And to increase revenue,
    you’d want to do an analysis on lowering rental costs during off-peak hours to
    incentivize bike utilization.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the “summer days” DataFrame, we can see that bikes are rented the
    most on Saturdays, with a drop-off on Sundays. This presents an opportunity to
    increase bike use on Sundays through promotions or price cuts. Likewise, bike
    rentals steadily increase during the work week, again suggesting the need to incentivize
    the early part of the week.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Punchcard plots represent an interesting way to visualize timestamped data.
    Just as traditional timecards let you monitor employee work habits, punchcard
    plots help you detect cyclical trends with just a glance.
  prefs: []
  type: TYPE_NORMAL
- en: In this project, we used seaborn’s `scatterplot()` method to make a punchcard
    plot. A nice thing about seaborn is that it’s built on matplotlib and can take
    advantage of matplotlib’s advanced customization options. In this case, we assisted
    the data analysis process by using shading and text annotation to highlight important
    time periods such as weekends and rush hours.
  prefs: []
  type: TYPE_NORMAL
- en: Citations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Fanaee-T, Hadi, and Gama, Joao, “Event labeling combining ensemble detectors
    and background knowledge”, Progress in Artificial Intelligence (2013): pp. 1–15,
    Springer Berlin Heidelberg, doi:10.1007/s13748–013–0040–3.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Thanks!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for reading and please follow me for more *Quick Success Data Science*
    projects in the future.
  prefs: []
  type: TYPE_NORMAL
