["```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```", "```py\nfrom sklearn.datasets import make_blobs\nX, y = make_blobs(cluster_std=5, n_samples=1200,\n                  n_features=2, random_state=42)\ndf_X = pd.DataFrame(X)\ndf_X.dropna(inplace=True)\n\nsns.set_style('darkgrid')\nsns.scatterplot(data = df_X, x = 0, y = 1, linewidth=0.5)\nplt.show()\n```", "```py\niter_num = [i+1 for i in range(10)]\niter_num\n\n#[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```", "```py\ndef apply_model(model_in, df):\n    clus = model_in.fit_predict(df)\n    cent = model_in.cluster_centers_\n    #decision boundary\n    z = model_in.predict(np.c_[xx.ravel(), yy.ravel()])\n    z = z.reshape(xx.shape)\n    return clus, cent, z\n\nh = 0.02 \nx_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\ny_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max,h))\n```", "```py\nfrom sklearn.cluster import KMeans\ndf_ = df_X.copy()\ncentroids = None\nkeep_cent, keep_clus, keep_Z = [], [], []\n\nfor n in iter_num:\n    model= KMeans(n_clusters=5, random_state=42, max_iter=n, n_init=1,\n                  init=(centroids if centroids is not None else 'k-means++'))\n    cluster, centroids, Z = apply_model(model, df_)\n    keep_clus.append(cluster)\n    keep_cent.append(centroids)\n    keep_Z.append(Z)\n```", "```py\ncol_name = ['Iter '+str(i) for i in iter_num]\n\ndf_iter = pd.DataFrame([list(i) for i in zip(*keep_clus)],columns=col_name)\ndf_plot = df_.join(df_iter)\ndf_plot.head()\n```", "```py\ndef plot_clus(names, Z_val, ctds):\n    sns.set_style('darkgrid', {'axes.grid' : False})\n    for i,z,c in zip(names, Z_val, ctds):\n        plt.figure(1)\n        plt.clf()\n        plt.imshow(z, interpolation='nearest',\n               extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n               cmap='coolwarm_r',\n               aspect='auto',\n               origin='lower', alpha=0.6)\n        sns.scatterplot(data = df_plot, x = 0, y = 1, hue = i,\n                        palette='viridis', linewidth=0.1, alpha=0.8)\n        plt.scatter(c[:, 0], c[:, 1], s=92, marker = '^', c='red', lw=0.5)\n        plt.xlabel('')\n        plt.ylabel('')\n        plt.legend(title=i, loc='upper right')\n        plt.savefig(i+'.png', bbox_inches = 'tight', dpi=240)\n    return plt.show()\n```", "```py\nplot_clus(col_name, keep_Z, keep_cent)\n```", "```py\nfrom PIL import Image\nimport imageio\ndef animation(names, save_name, time_speed):\n    img = []\n    for i in names:           # read PNG files\n        myImage = Image.open(i+'.png')\n        img.append(myImage)\n    #export the GIF file, output location can be changed\n    imageio.mimsave(save_name, img, duration=time_speed)\n```", "```py\nanimation(col_name, 'animation_KMeans.gif', 0.4)\n```", "```py\nfrom sklearn.cluster import MiniBatchKMeans\nctrd = None\nkeep_cent, keep_clus, keep_Z = [], [], []\n\nfor n in iter_num:\n    model = MiniBatchKMeans(n_clusters=5, random_state=42,\n                            max_iter=n, n_init=1,\n                            init=(ctrd if ctrd is not None else 'k-means++'))\n    cluster, centroids, Z = apply_model(model, df_)\n    keep_clus.append(cluster)\n    keep_cent.append(centroids)\n    keep_Z.append(Z)\n\ndf_iter = pd.DataFrame([list(i) for i in zip(*keep_clus)], columns=col_name)\ndf_plot = df_.join(df_iter)\nplot_clus(col_name, keep_Z, keep_cent)\n```", "```py\nanimation(col_name, 'animation_miniBKMeans.gif', 0.2)\n```", "```py\nn_num = [i+1 for i in range(5)]\ncol_name = ['Iter '+str(i) for i in n_num]\nn_num\n\n#[1, 2, 3, 4, 5]\n```", "```py\nfrom sklearn.cluster import BisectingKMeans\nkeep_cent, keep_clus, keep_Z = [], [], []\n\nfor n in n_num:\n    model = BisectingKMeans(n_clusters=n, random_state=42,\n                            max_iter=1, n_init=1)\n    cluster, centroids, Z = apply_model(model, df_)\n    keep_clus.append(cluster)\n    keep_cent.append(centroids)\n    keep_Z.append(Z)\n\ndf_iter = pd.DataFrame([list(i) for i in zip(*keep_clus)],columns=col_name)\ndf_plot = df_X.join(df_iter)\nplot_clus(col_name, keep_Z, keep_cent)\n```", "```py\nanimation(col_name, 'animation_BisectingKMeans.gif', 0.9)\n```", "```py\nfrom sklearn.cluster import MeanShift, estimate_bandwidth\nkeep_cent, keep_clus, keep_Z = [], [], []\nbandwidth = estimate_bandwidth(X, quantile=0.2, n_samples=250)\n\nseeds = None \nfor n in n_num:\n    model = MeanShift(bandwidth = bandwidth,\n                      seeds = (seeds if seeds is not None else None),\n                      max_iter=1)\n    cluster, seeds, Z = apply_model(model, df_)\n    keep_clus.append(cluster)\n    keep_cent.append(seeds)\n    keep_Z.append(Z)\n\ndf_iter = pd.DataFrame([list(i) for i in zip(*keep_clus)],columns=col_name)\ndf_plot = df_.join(df_iter)\nplot_clus(col_name, keep_Z, keep_cent)\n```", "```py\nanimation(col_name, 'animation_MeanShift.gif', 1.1)\n```"]