["```py\ncircle_dataset = datasets.make_circles(noise=0.05, factor=0.99, \n                                       random_state=1, n_samples=1600)\nX_circle, Y_circle = circle_dataset\n#standardize\nX_circle_normed = StandardScaler().fit_transform(X_circle)\nY_circle = Y_circle.astype('bool')\nX_train_c, Y_train_c = X_circle[…, 0], X_circle[…, 1]\n\n#figure section\nfig = plt.figure(figsize=(6, 4))\nfig.add_subplot(111)\nplt.scatter(X_train_c[Y_circle], Y_train_c[Y_circle], \n            s=10, color='blue', alpha=0.4)\n\nplt.scatter(X_train_c[Y_circle == False], Y_train_c[Y_circle == False], \n            s=10, color='red', alpha=0.5)\nplt.legend(['label: 1', 'label: 0'])\nplt.show()\n```", "```py\nnum_bijectors = 4\nbijectors=[]\n\nfor i in range(num_bijectors):\n    masked_auto_i = make_maf(hidden_units=[128, 128], activation='relu')\n    bijectors.append(masked_auto_i)\n    bijectors.append(tfb.Permute(permutation=[1, 0])) \n    # data is only 2 dimension, so we interchange 0, 1 \n\nflow_bijector = tfb.Chain(list(reversed(bijectors[:-1])))\n```"]