["```py\nnpm init\n```", "```py\nnpm install express multer openai cors --save\n```", "```py\nnpm install --save-dev nodemon\n```", "```py\n{\n  \"name\": \"speechtext\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"cors\": \"^2.8.5\",\n    \"express\": \"^4.18.2\",\n    \"multer\": \"^1.4.5-lts.1\",\n    \"openai\": \"^3.2.1\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^2.0.22\"\n  }\n}\n```", "```py\nconst express = require('express');\nconst cors = require('cors');\n```", "```py\nconst app = express();\napp.use(express.static('public'));\napp.use(express.json());\napp.use(cors());\n```", "```py\napp.use('/', require('./routes/api'));\n```", "```py\napp.use(function(err,req,res,next){\n    res.status(422).send({error: err.message});\n});\n```", "```py\napp.listen(process.env.PORT || 4000, function(){\n    console.log('Ready to Go!');\n});\n```", "```py\nconst express = require('express');\nconst cors = require('cors');\n\nconst app = express();\napp.use(express.static('public'));\napp.use(express.json());\napp.use(cors());\n\napp.use('/', require('./routes/api'));\n\napp.use(function(err,req,res,next){\n    res.status(422).send({error: err.message});\n});\n\napp.listen(process.env.PORT || 4000, function(){\n    console.log('Ready to Go!');\n});\n```", "```py\nconst express = require(\"express\");\nconst multer = require(\"multer\");\nconst { Configuration, OpenAIApi } = require(\"openai\");\n```", "```py\nconst router = express.Router();\nconst upload = multer();\n```", "```py\nconst configuration = new Configuration({\n    apiKey: process.env.OPENAI_KEY,\n});\n```", "```py\nasync function transcribe(buffer) {\n    const openai = new OpenAIApi(configuration);\n    const response = await openai.createTranscription(\n        buffer, // The audio file to transcribe.\n        \"whisper-1\", // The model to use for transcription.\n        undefined, // The prompt to use for transcription.\n        'json', // The format of the transcription.\n        1, // Temperature\n        'en' // Language\n    )\n    return response;\n}\n```", "```py\nrouter.get(\"/\", (req, res) => {\n    res.sendFile(path.join(__dirname, \"../public\", \"index.html\"));\n});\n```", "```py\nrouter.post(\"/\", upload.any('file'), (req, res) => {\n    audio_file = req.files[0];\n    buffer = audio_file.buffer;\n    buffer.name = audio_file.originalname;\n    const response = transcribe(buffer);\n    response.then((data) => {\n        res.send({ \n            type: \"POST\", \n            transcription: data.data.text,\n            audioFileName: buffer.name\n        });\n    }).catch((err) => {\n        res.send({ type: \"POST\", message: err });\n    });\n});\n```", "```py\nmodule.exports = router;\n```", "```py\nconst express = require(\"express\");\nconst multer = require(\"multer\");\nconst { Configuration, OpenAIApi } = require(\"openai\");\n\nconst router = express.Router();\nconst upload = multer();\n\nconst configuration = new Configuration({\n    apiKey: process.env.OPENAI_KEY,\n});\n\nasync function transcribe(buffer) {\n    const openai = new OpenAIApi(configuration);\n    const response = await openai.createTranscription(\n        buffer, // The audio file to transcribe.\n        \"whisper-1\", // The model to use for transcription.\n        undefined, // The prompt to use for transcription.\n        'json', // The format of the transcription.\n        1, // Temperature\n        'en' // Language\n    )\n    return response;\n}\n\nrouter.get(\"/\", (req, res) => {\n    res.sendFile(path.join(__dirname, \"../public\", \"index.html\"));\n});\n\nrouter.post(\"/\", upload.any('file'), (req, res) => {\n    audio_file = req.files[0];\n    buffer = audio_file.buffer;\n    buffer.name = audio_file.originalname;\n    const response = transcribe(buffer);\n    response.then((data) => {\n        res.send({ \n            type: \"POST\", \n            transcription: data.data.text,\n            audioFileName: buffer.name\n        });\n    }).catch((err) => {\n        res.send({ type: \"POST\", message: err });\n    });\n});\n\nmodule.exports = router;\n```", "```py\n<!DOCTYPE html>\n<html>\n<head>\n <title>Speech to Text</title>\n <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD\" crossorigin=\"anonymous\">\n</head>\n\n<body style=\"background-color: #f2f2f2;\">\n <div class=\"container mt-5\">\n  <div class=\"row justify-content-center\">\n   <div class=\"col-md-6\">\n    <div class=\"card\">\n     <div class=\"card-header\">\n      Upload Audio File\n     </div>\n     <div class=\"card-body\">\n      <form id=\"transcription-form\" enctype=\"multipart/form-data\">\n          <div class=\"form-group\">\n           <label for=\"file-upload\"><b>Select file:</b></label>\n           <input id=\"file-upload\" type=\"file\" name=\"file\" class=\"form-control-file\" accept=\".mp3\" style=\"margin-bottom: 20px\">\n          </div>\n          <input type=\"submit\" value=\"Transcribe\" class=\"btn btn-primary\"></input>\n      </form>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n\n <script>\n        document.getElementById(\"transcription-form\").addEventListener(\"submit\", async function (event) {\n            event.preventDefault();\n\n            const formData = new FormData(event.target);\n            const response = await fetch(\"/\", {\n                method: \"POST\",\n                body: formData,\n            });\n            const data = await response.json();\n\n            if (data.transcription) {\n                localStorage.setItem(\"transcription\", data.transcription);\n                localStorage.setItem(\"audioFileName\", data.audioFileName);\n                window.location.href = \"/transcribe.html\";\n            } \n   else {\n                console.error(\"Error:\", data.message);\n            }\n        });\n    </script>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN\" crossorigin=\"anonymous\"></script>\n</body>\n</html>\n```", "```py\n<!DOCTYPE html>\n<html>\n<head>\n <title>Transcription</title>\n <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD\" crossorigin=\"anonymous\">\n\n <style>\n  h1 {\n   margin-top: 20px;\n   margin-bottom: 10px;\n   font-size: 2.5rem;\n   font-weight: bold;\n   color: #333;\n  }\n\n  p {\n   font-size: 1.2rem;\n   color: #333;\n   margin-bottom: 30px;\n  }\n\n  .container {\n   margin-top: 50px;\n   margin-bottom: 50px;\n   max-width: 600px;\n   padding: 30px;\n   background-color: #fff;\n   box-shadow: 0 0 10px rgba(0,0,0,0.2);\n   border-radius: 5px;\n  }\n </style>\n</head>\n\n<body style=\"background-color: #f2f2f2;\">\n <div class=\"container\">\n  <h1>Audio File:</h1>\n  <p id=\"audioFileName\"></p>\n\n  <h1>Transcription:</h1>\n  <p id=\"transcription\"></p>\n </div>\n\n <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN\" crossorigin=\"anonymous\"></script>\n\n <script>\n     const audioFileName = localStorage.getItem(\"audioFileName\");\n     const transcription = localStorage.getItem(\"transcription\");\n     document.getElementById(\"audioFileName\").innerHTML = audioFileName;\n     document.getElementById(\"transcription\").innerHTML = transcription;\n </script>\n</body>\n</html>\n```"]