- en: Conda Too Slow? Try Mamba!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/conda-too-slow-try-mamba-c29faf1e64cc](https://towardsdatascience.com/conda-too-slow-try-mamba-c29faf1e64cc)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Popular package managers compared
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@caroline.arnold_63207?source=post_page-----c29faf1e64cc--------------------------------)[![Caroline
    Arnold](../Images/2560e106ba9deda7889c7d253792d814.png)](https://medium.com/@caroline.arnold_63207?source=post_page-----c29faf1e64cc--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c29faf1e64cc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c29faf1e64cc--------------------------------)
    [Caroline Arnold](https://medium.com/@caroline.arnold_63207?source=post_page-----c29faf1e64cc--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c29faf1e64cc--------------------------------)
    ·5 min read·Nov 22, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/740951dc23be607fefeb3ee291fcc7a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Retro package delivery. Photo by [Charlie M](https://unsplash.com/@chollz?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Sooner or later, every data scientist and machine learning engineer will encounter
    package managers and environments. Environments contain the libraries needed to
    run project code. Developers can create multiple environments on the same machine,
    making it possible to maintain different environments for different projects.
    Software is not installed system-wide, but is contained within an environment.
  prefs: []
  type: TYPE_NORMAL
- en: Package managers are used to distribute software libraries. Popular package
    managers include conda, pip, and mamba.
  prefs: []
  type: TYPE_NORMAL
- en: It is definitely worth checking out mamba, as I was able to install a large
    environment 10 times faster through mamba, compared to conda!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this article, I will show you how to obtain this speed up. I will discuss:'
  prefs: []
  type: TYPE_NORMAL
- en: How to set up an environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The conda and mamba package and environment managers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How they compare in terms of speed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'libmamba: mamba speedup within conda?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maintaining a software environment file ensures that code remains reproducible
    and can be executed on different platforms. A machine learning project should
    always include a list of required packages, along with their version numbers.
    If you give your model to another developer or ship it to a customer, they can
    replicate the environment locally.
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample environment file looks like this, taken from one of my git repositories
    at [https://github.com/crlna16/ai4foodsecurity](https://github.com/crlna16/ai4foodsecurity/blob/main/docker/kernel-env-cuda11.yaml):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Package management systems can be used to create environments from files like
    this.
  prefs: []
  type: TYPE_NORMAL
- en: Package Management Systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of different ways to create environments and install packages
    in them. We will focus exclusively on
  prefs: []
  type: TYPE_NORMAL
- en: Conda,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mamba.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While [pip](https://pip.pypa.io/) is also a popular choice for maintaining Python
    environments, using conda or mamba has the advantage that they check for dependencies.
    For example, Tensorflow 2.13.0 requires Python 3.8–3.11 as a dependency. If the
    user tries to install a non-compliant Python version, conda will warn the user
    about the inconsistency and refuse to install the package. Pip on the other hand
    will not complain, but the code may not run.
  prefs: []
  type: TYPE_NORMAL
- en: Some packages are available through pip in a more recent version than through
    conda. In this case, it is possible to explicitly include pip packages in the
    environment definition.
  prefs: []
  type: TYPE_NORMAL
- en: It can be very time consuming to debug mistakes and inconsistencies in an environment.
    Errors are often not obvious, and it is difficult to determine the correct version
    of the required packages after the fact. Therefore, it is highly recommended that
    you maintain the environment description file with packages and version numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Conda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Conda [[https://docs.conda.io/en/latest/](https://docs.conda.io/en/latest/)]
    is a multi-platform package manager that runs on Windows, MacOS, and Linux. It
    is both a package manager, hosting software packages on central servers ready
    for download, and an environment manager. While most commonly used in the context
    of Python development, conda also works with other programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: The main distribution channel for conda packages is [https://repo.anaconda.com/](https://repo.anaconda.com/),
    which contains more than 7,500 verified packages. Beyond that, the community oriented
    conda-forge [[https://anaconda.org/conda-forge](https://anaconda.org/conda-forge)]
    contains more than 22,500 additional packages.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, to create a conda environment and install numpy, run
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: While conda is generally great, it tends to get slow over time. Especially if
    you have a large environment, it can take a long time to resolve the environment
    when installing additional packages. This is frustrating for developers, because
    instead of getting on with software development and machine learning experiments,
    have to wait half an hour for the environment to resolve itself.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/af85733d481db74d6c0b66f28e850669.png)'
  prefs: []
  type: TYPE_IMG
- en: Bored developer waiting for the conda environment to resolve. Photo by [Juan
    Gomez](https://unsplash.com/@nosoylasonia?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Mamba
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mamba [[https://mamba.readthedocs.io/en/latest/index.html](https://mamba.readthedocs.io/en/latest/index.html)]
    is a conda-compatible package manager that supports most of conda’s packages.
    The mamba command can be used as a drop-in replacement for conda in all commands.
    Packages from conda-forge are also available through mamba.
  prefs: []
  type: TYPE_NORMAL
- en: To create an environment and install a package, use
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Mamba itself can installed using conda
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/908e7a8108875dd14b17323918fb2e30.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Cara Fuller](https://unsplash.com/@caraventurera?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Install speed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Comparing the following commands on the same Linux system, I found different
    execution times for the conda and mamba package managers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The commands are shorthands that create the environment and install the numpy
    package in a single line of shell instructions. The *-y* flag is used so that
    packages are installed automatically without user confirmation.
  prefs: []
  type: TYPE_NORMAL
- en: Installing numpy via mamba was 25% faster than installing it via conda!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Let’s try to create a large environment by saving the environment definition
    file from above to *env.yml* and installing directly from there.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Mamba is astonishingly **10 times faster** at resolving this environment!
  prefs: []
  type: TYPE_NORMAL
- en: Why is mamba faster than conda?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each time we install a new package in an environment, the environment manager
    must perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Collect the package metadata
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resolve the environment (i.e. check which packages are already installed and
    check for consistency)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the downloaded packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The step where conda typically spends a lot of time is in resolving the environment.
    The difference between the package managers here is that mamba leverages efficient
    C++ code and parallel processing to be faster than conda. The *libsolv* module
    used in mamba to resolve the dependencies and environment is also used in other
    places, e.g. in Unix distributions. In addition, mamba can perform parallel downloads
    instead of the conda sequential downloads.
  prefs: []
  type: TYPE_NORMAL
- en: 'Libmamba: Mamba speedup within conda'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The [libmamba](https://www.anaconda.com/blog/a-faster-conda-for-a-growing-community)
    solver combines the speed of mamba with the established brand of conda. It is
    activate by the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We measure again the time it takes to install the complex environment from
    before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this case, libmamba used within conda was 50% faster than plain conda, but
    still the speed up is not comparable to the one achieved through mamba.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Environment managers are critical for maintaining reproducible software environments
    during development and deployment. Conda is a popular package manager, but it
    can become very slow with large environments. Mamba serves as a drop-in replacement
    for conda. By using efficient code and parallel processing, the installation of
    new packages is much faster than using conda. The libmamba solver claims to reach
    mamba-like speed within conda.
  prefs: []
  type: TYPE_NORMAL
- en: Our test showed that mamba was **10 times faster** in creating a large environment
    from scratch compared to conda. libmamba was **2 times faster** than plain conda.
    So, next time you find yourself waiting for a long time for the conda environment
    to resolve, consider using mamba instead of spending a boring afternoon.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://mamba.readthedocs.io/en/latest/index.html](https://mamba.readthedocs.io/en/latest/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.conda.io/](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-from-an-environment-yml-file)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.anaconda.com/blog/a-faster-conda-for-a-growing-community](https://www.anaconda.com/blog/a-faster-conda-for-a-growing-community)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
