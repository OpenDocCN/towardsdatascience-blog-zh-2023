- en: 'Unlock the Power of Causal Inference and Front-door Adjustment: An In-Depth
    Guide for Data Scientists'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/unlock-the-power-of-causal-inference-front-door-adjustment-an-in-depth-guide-for-data-scientists-8e7b8ba33421](https://towardsdatascience.com/unlock-the-power-of-causal-inference-front-door-adjustment-an-in-depth-guide-for-data-scientists-8e7b8ba33421)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A full explanation of causal inference front-door adjustment with examples including
    all the Python source code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://grahamharrison-86487.medium.com/?source=post_page-----8e7b8ba33421--------------------------------)[![Graham
    Harrison](../Images/c6bfe00c6e0cfcdf3bd042c7fdc03554.png)](https://grahamharrison-86487.medium.com/?source=post_page-----8e7b8ba33421--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8e7b8ba33421--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8e7b8ba33421--------------------------------)
    [Graham Harrison](https://grahamharrison-86487.medium.com/?source=post_page-----8e7b8ba33421--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8e7b8ba33421--------------------------------)
    ·11 min read·Feb 14, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5e39a34966dc35b7649fbd31372905e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Evelyn Paris](https://unsplash.com/@evelynparis?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/s/photos/front-door?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Objective
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By the end of this article you will understand the magic of causal inference
    front-door adjustment that can calculate the effect of an event on an outcome
    even where there are other factors affecting both that are unmeasured or even
    unknown and you will have full access to all the Python code.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I have scoured the Internet and many books trying to find a fully working example
    of the front-door formula in Python and I have drawn a blank, so unless there
    are sources out there that I have missed, what you are about to read is genuinely
    unique …
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a recent article I explored the power of the backdoor adjustment formula
    to calculate the true effect of an event on an outcome even if there are observable
    factors that are “confounding” both …
  prefs: []
  type: TYPE_NORMAL
- en: '[](/unlock-the-power-of-causal-inference-a-data-scientists-guide-to-understanding-backdoor-686d2826efa4?source=post_page-----8e7b8ba33421--------------------------------)
    [## Unlock the Power of Causal Inference : A Data Scientist’s Guide to Understanding
    Backdoor…'
  prefs: []
  type: TYPE_NORMAL
- en: A fully working example of the backdoor adjustment formula using Python & the
    pgmpy library including a full…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/unlock-the-power-of-causal-inference-a-data-scientists-guide-to-understanding-backdoor-686d2826efa4?source=post_page-----8e7b8ba33421--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: The aim was to establish the true effect of taking a drug on patient recovery
    rates and the magic of the backdoor adjustment formula recovered this effect even
    though “male” was obscuring that result because -
  prefs: []
  type: TYPE_NORMAL
- en: A higher proportion of males took the drug compared to females
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Males had a higher recovery rate than females
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/156b7bf498014086f377c16a34404c0d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: In this example “male” is a “confounder” but the values for “male” were included
    in the observation data and then the back door formula was applied to prove that
    the drug trial was having a positive impact.
  prefs: []
  type: TYPE_NORMAL
- en: But what if the “confounder” could not be measured and was not included in the
    data?
  prefs: []
  type: TYPE_NORMAL
- en: A Real World Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the 1950’s there was a statistical war raging between scientists who
    strongly believed that smoking caused respiratory illness and the tobacco companies
    who managed to produce “evidence” to the contrary.
  prefs: []
  type: TYPE_NORMAL
- en: The essence of this evidence was the proposal by the tobacco companies that
    a genetic factor was responsible for both smokers taking up smoking and there
    likelihood of developing respiratory illness. This was a convenient hypothesis
    for the tobacco companies because it was nearly impossible to test.
  prefs: []
  type: TYPE_NORMAL
- en: Here is a proposal for the causal links between the factors involved …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/47a0f60df958ede48be00fd25c93254a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: A Causal Inference Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If this is the only data you have i.e. a simple backdoor path from an unobserved
    confounder to both an event and an outcome then there is nothing that can be done;
    the true effect cannot be recovered.
  prefs: []
  type: TYPE_NORMAL
- en: However there are other “patterns” where the effect can be recovered including
    the front-door criteria and instrumental variables. This article will fully explain
    the first of those patterns.
  prefs: []
  type: TYPE_NORMAL
- en: To satisfy the front-door criteria there needs to be an intermediary between
    the event and the outcome, and in the smoking example it could look like this
    -
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0cff8c5e5b449c817835245a9e94dba7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: i.e. smoking causes tar and tar causes respiratory illness rather than a direct
    causal link.
  prefs: []
  type: TYPE_NORMAL
- en: When this pattern exists, the effect of the event (smoking) on the outcome (respiratory
    illness) can be isolated and recovered irrespective of the influence of an unobserved
    confounder using the “Front-Door Adjustment Formula” as proposed by Judea Pearl
    in “The Book of Why” and “Causal Inference in Statistics”.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://amzn.to/3iCVF8r?source=post_page-----8e7b8ba33421--------------------------------)
    [## The Book of Why: The New Science of Cause and Effect (Penguin Science)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Buy The Book of Why: The New Science of Cause and Effect (Penguin Science)
    01 by Pearl, Judea, Mackenzie, Dana (ISBN…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'amzn.to](https://amzn.to/3iCVF8r?source=post_page-----8e7b8ba33421--------------------------------)
    [](https://amzn.to/3WblFp1?source=post_page-----8e7b8ba33421--------------------------------)
    [## Causal Inference in Statistics: A Primer'
  prefs: []
  type: TYPE_NORMAL
- en: 'Buy Causal Inference in Statistics: A Primer 1 by Pearl, Judea, Glymour, Madelyn,
    Jewell, Nicholas P. (ISBN…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: amzn.to](https://amzn.to/3WblFp1?source=post_page-----8e7b8ba33421--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Excluding the influence of an unobserved confounder seems like magic and the
    implications genuinely are amazing but if you follow the steps in the rest of
    this article you will be able to add this amazing technique to your data science
    tool bag with just a few lines of Python code!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we need are some test data. I have created a synthetic dataset
    using my `BinaryDataGenerator` class. If you would like the full source code,
    head over to this article -
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-generate-synthetic-data-for-any-causal-inference-project-in-less-than-10-lines-of-code-158688a89349?source=post_page-----8e7b8ba33421--------------------------------)
    [## How to Generate Synthetic Data for any Causal Inference Project in less than
    10 Lines of Code'
  prefs: []
  type: TYPE_NORMAL
- en: If 99% are Vaccinated, 1% Get a Reaction and 2% Get the Disease How Can You
    Generate Representative Synthetic Data?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-generate-synthetic-data-for-any-causal-inference-project-in-less-than-10-lines-of-code-158688a89349?source=post_page-----8e7b8ba33421--------------------------------)
    ![](../Images/8c47851d495c09a77b07f5013c9ef399.png)
  prefs: []
  type: TYPE_NORMAL
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: A summary analysis of the data is as follows -
  prefs: []
  type: TYPE_NORMAL
- en: There were 800 people in the sample.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 50% of the sample population were smokers (400/800)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 95% of smokers had tar deposits (380/400)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5% of non-smokers had tar deposits (20/400)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 15% of smokers with tar had respiratory illness (47/380)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10% of smokers with no tar had respiratory illness (2/20)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 95% of smokers with tar had respiratory illness (19/20)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 90% of non-smokers with no tar had respiratory illness (342/380)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First Attempt : Using the Pgmpy Library'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In my article on backdoor criteria I started by showing a simple solution using
    `pgmpy`.
  prefs: []
  type: TYPE_NORMAL
- en: Given how easy it was to apply the backdoor criteria in that example, it should
    be very straightforward to apply the front-door criteria in the same way. Here
    is the code that should do it …
  prefs: []
  type: TYPE_NORMAL
- en: 'The expected result is 4.5% (much more on this later!) but `pgmpy` crashes
    with `ValueError: Maximum Likelihood Estimator works only for models with all
    observed variables. Found latent variables: set()`.'
  prefs: []
  type: TYPE_NORMAL
- en: After a lot of research and also raising an issue with the developers my conclusion
    is that `pgmpy` does not work when applying the "do" operator (i.e. making an
    intervention) where there is an unobserved confounder and that `pgmpy` cannot
    apply the front-door adjustment formula.
  prefs: []
  type: TYPE_NORMAL
- en: It is worse than that though as the `DoWhy` library does not work in this instance
    either.
  prefs: []
  type: TYPE_NORMAL
- en: '`DoWhy` can deal with unobserved confounders when calculating the "Average
    Treatment Effect" (ATE) but when the "do" operator is being applied to simulate
    an intervention it fails in the same way as `pgmpy`.'
  prefs: []
  type: TYPE_NORMAL
- en: ATE is applied to continuous variables so we can ask `DoWhy` a question like
    "If carbon-dioxide emissions increase by 100 million tonnes what is the causal
    effect on the increase global temperatures?" and `DoWhy` will produce a result.
  prefs: []
  type: TYPE_NORMAL
- en: However, when applying a “do” intervention to discrete, binary data for example
    “What is the probability of respiratory illness given that everyone in the sample
    smokes?” neither `pgmpy` or `DoWhy` can perform the calculation where an unobserved
    confounder is present and to date I have not found any other libraries that can.
  prefs: []
  type: TYPE_NORMAL
- en: My backdoor article moved on from the `pgmpy` implementation to provide an example
    of the maths to show what `pgmpy` was doing behind the scenes. In this article
    an understanding of the maths is required up front so that we can build our own
    implementation of the front-door adjustment formula in Python ...
  prefs: []
  type: TYPE_NORMAL
- en: 'Second Attempt: Working it Out by Hand'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The objective is to calculate the Average Causal Effect (ACE) by simulating
    the following -
  prefs: []
  type: TYPE_NORMAL
- en: Travel back in time and perform and intervention which forces everyone to smoke.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform the same time-travelling trick again and this time force everyone to
    quit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Subtract the second result from the first.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expressed mathematically using the “do” operator this amazing feat looks like
    this -
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/07db103e91c421dd0df39d002ec43bef.png)'
  prefs: []
  type: TYPE_IMG
- en: And as we know that there is an unobserved confounder and a front-door path
    in the data so we need to substitute each side of the ACE formula with the front-door
    adjustment formula as proposed by Judea Pearl …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/056ab66fad0fc04d78cbe9dd35c88585.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s start with the left hand side of the ACE formula, substitute it for the
    front-door adjustment formula and use the variables that are present in our data
    instead of x, y and z. To keep things neat and tidy the following abbreviations
    will be used: S = smoking, R = respiratory, T = Tar …'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9099e7b429da60951069958d59f3d642.png)'
  prefs: []
  type: TYPE_IMG
- en: t can take values {0, 1} and s can take values {0, 1} so we now need to expand
    as follows …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5a383b86ee966f41413bfc40e555f30c.png)'
  prefs: []
  type: TYPE_IMG
- en: … and the inner ∑𝑠 terms can be further expanded as follows …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/56cc56844797e3f5cb68ceffce4789c9.png)'
  prefs: []
  type: TYPE_IMG
- en: Now it should be a simple matter of substituting the conditional probabilities
    from the data. A Python function will be provided to calculate any conditional
    probability from data in the next section, but for now here are the values that
    are needed …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fd7c5f8773c3cad33c89585decc82951.png)'
  prefs: []
  type: TYPE_IMG
- en: Substituting these conditional probabilities gives …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c81434d95e4c4bc5262f3ba6a98055d0.png)'
  prefs: []
  type: TYPE_IMG
- en: So …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8f66da751c44afdc64454dfa6f166486.png)'
  prefs: []
  type: TYPE_IMG
- en: … and if you re-calculate all of the steps above again for 𝑃(𝑅=1∣𝑑𝑜(𝑆=0)) the
    answer is …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c064cdf3f3c9bff54819633857d79713.png)'
  prefs: []
  type: TYPE_IMG
- en: And so the overall Average Causal Effect (ACE) is …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/036800924741e13adb0f4c01b3afd1a4.png)'
  prefs: []
  type: TYPE_IMG
- en: That was a lot of effort to work out the Average Causal Effect by hand! Fortunately,
    now that the workings of the front-door adjustment formula are fully understood
    it is relatively easy to convert all of this to Python so that the whole thing
    can be fully automated for any dataset where the features are discrete values
    …
  prefs: []
  type: TYPE_NORMAL
- en: 'Third Attempt: A Reusable Python Function'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The third attempt involves building a re-usable Pythn function that implements
    the Maths in the previous section for any simple DAG and any `DataFrame` so that
    the Maths can be put to one side once it has been understood.
  prefs: []
  type: TYPE_NORMAL
- en: The implementation of this function will need to use of conditional probabilities
    and it will require a simple Python function to calculate those probabilities
    from any `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: I have left the details of the `calc_cond_prob` function out of this article
    to keep the focus on front-door adjustment but you can read a full explanation
    and download the source code from this article …
  prefs: []
  type: TYPE_NORMAL
- en: '[](/unlock-the-secret-to-effortlessly-calculating-conditional-probabilities-from-any-dataframe-a232ca71e33c?source=post_page-----8e7b8ba33421--------------------------------)
    [## How to Calculate Conditional Probabilities from Any DataFrame in 3 Lines of
    Code'
  prefs: []
  type: TYPE_NORMAL
- en: Learn to write a simple Python function that will calculate conditional probabilities
    using notation like p(exam=1 |…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/unlock-the-secret-to-effortlessly-calculating-conditional-probabilities-from-any-dataframe-a232ca71e33c?source=post_page-----8e7b8ba33421--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Once you have donwloaded `calc_cond_prob` it can be used to easily calculate
    conditional probabilities from any `DataFrame` as follows ...
  prefs: []
  type: TYPE_NORMAL
- en: 𝑝(𝑟𝑒𝑠𝑝𝑖𝑟𝑎𝑡𝑜𝑟𝑦=0∣𝑠𝑚𝑜𝑘𝑖𝑛𝑔=0,𝑡𝑎𝑟=0)=0.1
  prefs: []
  type: TYPE_NORMAL
- en: … or alternatively the `outcome / result` and `events` can be specified explicitly
    as follows ...
  prefs: []
  type: TYPE_NORMAL
- en: 𝑝(𝑟𝑒𝑠𝑝𝑖𝑟𝑎𝑡𝑜𝑟𝑦=0∣𝑠𝑚𝑜𝑘𝑖𝑛𝑔=0,𝑡𝑎𝑟=0)=0.1
  prefs: []
  type: TYPE_NORMAL
- en: The previous section explained the Mathematics behind the Pearlean front-door-adjustment
    formula and provided a fully worked example.
  prefs: []
  type: TYPE_NORMAL
- en: Given those building blocks (and the `calc_cod_prob` function) a Python function
    can be developed that will calculate the front_door_adjustment formula for anny
    `DataFrame` that contains the following features -
  prefs: []
  type: TYPE_NORMAL
- en: X — treatment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Y — outcome
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Z — mediator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here is the full source code for front-door adjustment …
  prefs: []
  type: TYPE_NORMAL
- en: … and the function can be called as like this …
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start with the elephant in the room, if the effect of smoking was an increase
    in the average probability of respiratory illness of just 4.5% this would not
    persuade many smokers to quit.
  prefs: []
  type: TYPE_NORMAL
- en: However we saw that the individual probability of respiratory illness given
    smoking 𝑃(𝑟𝑒𝑠𝑝𝑖𝑟𝑎𝑡𝑜𝑟𝑦=1∣𝑑𝑜(𝑠𝑚𝑜𝑘𝑖𝑛𝑔=1))=54.75%.
  prefs: []
  type: TYPE_NORMAL
- en: The reason the average causal effect is so low is that our fictitious tobacco
    companies pulled the dastardly trick of stacking the deck by ensuring that lots
    of non-smokers with respiratory illness made it into the sample in an attempt
    to obfuscate the truth i.e. that smoking does causes respiratory illness.
  prefs: []
  type: TYPE_NORMAL
- en: But even with this noise in the data, and even if we accept the unlikely hypothesis
    that an unmeasurable genetic factor exists that confounds both the event and the
    outcome, the magic of the front-door adjustment formula has still uncovered a
    positive causal link between smoking and respiratory illness!
  prefs: []
  type: TYPE_NORMAL
- en: This amazing outcome is unlike anything I have discovered in other data science
    techniques and it plays into the most common questions that customers of my machine
    learning predictions always ask, i.e. -
  prefs: []
  type: TYPE_NORMAL
- en: Why does that happen?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What should I do to change the outcome and improve things?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These types of “why?” questions make the knowledge, ability and understanding
    required to apply front-door adjustment in order to calculate the effect of “interventions”
    an invaluable addition to the data science toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately the currently available libraries including `pgmpy` and `DoWhy`
    do not work when applying the "do" operator to discrete data sets that include
    an unobserved confounder and a front-door path.
  prefs: []
  type: TYPE_NORMAL
- en: That is a massive gap in the functionality of those libaries and having searched
    at length to find a Python solution with a worked example both online and in books
    I could not find anything.
  prefs: []
  type: TYPE_NORMAL
- en: Unless I have over-looked some examples that makes this article unique and I
    wish I had been able to read it when front-door adjustment began to fascinate
    me rather than having to do all that research myself.
  prefs: []
  type: TYPE_NORMAL
- en: It was a lot of fun though and I really hope you like the result!
  prefs: []
  type: TYPE_NORMAL
- en: Bonus Section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So having said that `pgmpy` does not work in this scenario and having come so
    far in my learning journey I decided to write a version of the front-door adjustment
    formula in Python to correct that omission.
  prefs: []
  type: TYPE_NORMAL
- en: Just to note I decided to re-factor the formula to make the Python implementation
    a bit more concise changing this …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/262b4abdfcd1a3168c3429f2e6a8ea6d.png)'
  prefs: []
  type: TYPE_IMG
- en: into this ..
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1be1f021a1e014d468e1b86a6883083b.png)'
  prefs: []
  type: TYPE_IMG
- en: … which is mathematically equivalent and is just like saying —
  prefs: []
  type: TYPE_NORMAL
- en: 4 x 3 x 1 x 2 x 2 = 4 x 1x 2 x 2 x 3
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: see “Causal Inference in Statistics” by Pearl, Glymour and Jewell, p68
    (3.15) and p69 (3.16) for a full explanation of this equivalence.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Back to the solution, the first step is to create the causal model using `pgmpy`
    classes. To note: the unobserved confounder must be removed from the `edges` list
    as this is what causes the `BayesianNetwork.fit()` method to crash with a `ValueError`
    ...'
  prefs: []
  type: TYPE_NORMAL
- en: Once the set-up is complete, the front-door formula can be implemented in Python
    as follows …
  prefs: []
  type: TYPE_NORMAL
- en: And just to prove that it works, the calculation produces exactly the same results
    as both the manual calculation and the earlier Python function that works directly
    on the `DataFrame` ...
  prefs: []
  type: TYPE_NORMAL
- en: Connect and Get in Touch …
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you enjoyed this article you can get unlimited access to thousands more by
    becoming a Medium member for just $5 a month by [clicking on my referral link](https://grahamharrison-86487.medium.com/membership)
    (I will receive a proportion of the fees if you sign up using this link at no
    extra cost to you).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://grahamharrison-86487.medium.com/membership?source=post_page-----8e7b8ba33421--------------------------------)
    [## Join Medium with my referral link — Graham Harrison'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Graham Harrison (and thousands of other writers on Medium).
    Enhance your knowledge of Data…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: grahamharrison-86487.medium.com](https://grahamharrison-86487.medium.com/membership?source=post_page-----8e7b8ba33421--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: … or connect by …
  prefs: []
  type: TYPE_NORMAL
- en: '[Subscribing to a free e-mail whenever I publish a new story](https://grahamharrison-86487.medium.com/subscribe).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Taking a quick look at my previous articles](https://grahamharrison-86487.medium.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Downloading my free strategic data-driven decision making framework](https://relentless-originator-3199.ck.page/5f4857fd12).'
  prefs: []
  type: TYPE_NORMAL
- en: Visiting my data science website — [The Data Blog](https://www.the-data-blog.co.uk/).
  prefs: []
  type: TYPE_NORMAL
