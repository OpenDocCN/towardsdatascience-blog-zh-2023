["```py\nimport argparse\n\nparser = argparse.ArgumentParser(\n    prog = 'Sample Program',\n    description='Description of the sample program'\n)\n```", "```py\n# adding positional argument\nparser.add_argument('filename')\n\n# adding optional argument\nparser.add_argument('-p', '--parameter')\n```", "```py\nargs = parser.parse_args()\n\n# print the parsed arguments\nprint(\"filename: \" + args.filename + \"\\n\" + \"parameter: \" + args.parameter)\n```", "```py\n>>> python program.py 'sample_data.csv' -p 10\nfilename: sample_data.csv\nparameter: 10\n```", "```py\nimport searborn as sns\niris = sns.load_dataset(\"iris\")\niris.to_csv('iris.csv', index=False)\n```", "```py\nimport argparse\nimport pandas as pd\nimport pickle\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Define and parse command-line arguments\nparser = argparse.ArgumentParser(\n    prog = 'Model training',\n    description = 'Train a random forest classifier on the iris dataset'\n)\nparser.add_argument(\n    'train_data', help='training data (.csv format)'\n)\nparser.add_argument(\n    '--n_estimators', type=int, default=100,\n    help='number of trees in the forest (default: 100)'\n)\nparser.add_argument(\n    '--max_depth', type=int, default=None,\n    help='maximum depth of the tree (default: None)'\n)\nparser.add_argument(\n    '--model_path', type=str, default='./model.pkl',\n    help='path to save the trained model (default: ./model.pkl)'\n)\nargs = parser.parse_args()\n\n# Read the dataset\niris = pd.read_csv(args.train_data)\nX = iris.loc[:, iris.columns != 'species']\ny = iris['species']\n\n# Train a random forest classifier with the specified hyperparameters\nclf = RandomForestClassifier(\n    n_estimators=args.n_estimators,\n    max_depth=args.max_depth,\n    random_state=42)\n\nclf.fit(X, y)\n\n# Save the trained model to a pickle file\nwith open(args.model_path, 'wb') as f:\n    pickle.dump(clf, f)\n```", "```py\n>>> python .\\train_rf.py 'iris.csv' --n_estimators 100 --max_depth 10 \n```"]