- en: Building Pipelines In Apache Airflow - For Beginners
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Apache Airflow 中构建管道 - 初学者指南
- en: 原文：[https://towardsdatascience.com/building-pipelines-in-apache-airflow-for-beginners-58f87a1512d5](https://towardsdatascience.com/building-pipelines-in-apache-airflow-for-beginners-58f87a1512d5)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/building-pipelines-in-apache-airflow-for-beginners-58f87a1512d5](https://towardsdatascience.com/building-pipelines-in-apache-airflow-for-beginners-58f87a1512d5)
- en: A quick and simple demo for running DAGs on Airflow
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个快速简单的演示，展示如何在 Airflow 上运行 DAG
- en: '[](https://medium.com/@aashishnair?source=post_page-----58f87a1512d5--------------------------------)[![Aashish
    Nair](../Images/23f4b3839e464419332b690a4098d824.png)](https://medium.com/@aashishnair?source=post_page-----58f87a1512d5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----58f87a1512d5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----58f87a1512d5--------------------------------)
    [Aashish Nair](https://medium.com/@aashishnair?source=post_page-----58f87a1512d5--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@aashishnair?source=post_page-----58f87a1512d5--------------------------------)[![Aashish
    Nair](../Images/23f4b3839e464419332b690a4098d824.png)](https://medium.com/@aashishnair?source=post_page-----58f87a1512d5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----58f87a1512d5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----58f87a1512d5--------------------------------)
    [Aashish Nair](https://medium.com/@aashishnair?source=post_page-----58f87a1512d5--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----58f87a1512d5--------------------------------)
    ·9 min read·Mar 15, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----58f87a1512d5--------------------------------)
    ·阅读时间 9 分钟 ·2023 年 3 月 15 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/4fbe919cb98598fa62ac516da138073a.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4fbe919cb98598fa62ac516da138073a.png)'
- en: Photo by [Kelly Sikkema](https://unsplash.com/@kellysikkema?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Kelly Sikkema](https://unsplash.com/@kellysikkema?utm_source=medium&utm_medium=referral)
    提供，[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Apache Airflow is quite popular in the data science and data engineering space.
    It boasts many features that enable users to programmatically create, manage,
    and monitor complex workflows.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Airflow 在数据科学和数据工程领域非常受欢迎。它拥有许多功能，使用户能够以编程方式创建、管理和监控复杂的工作流。
- en: However, the platform’s range of features may inadvertently become a detriment
    to beginners. New users that explore Apache Airflow’s documentation and tutorials
    can easily become inundated by new terminology, tools, and concepts.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，该平台的功能范围可能会无意中成为初学者的负担。新用户在浏览 Apache Airflow 的文档和教程时，可能会被新术语、工具和概念淹没。
- en: With the aim of creating a more digestible introduction to this platform, we
    offer a bare-bones version of an Apache Airflow demo that entails coding and running
    an Airflow pipeline.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供一个更易于理解的入门介绍，我们提供了一个 Apache Airflow 演示的简化版本，该演示涉及编码和运行 Airflow 管道。
- en: Terminology
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 术语
- en: It will be easier to follow the demo after becoming familiar with the following
    Airflow terminology.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉以下 Airflow 术语后，将更容易跟随演示。
- en: '**DAG:** A DAG, short for directed acyclic graph, is what Airflow uses to represent
    a workflow. DAGs are composed of nodes that denote tasks and arrows that denote
    the relationships between the tasks.'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**DAG：** DAG，意为有向无环图，是 Airflow 用来表示工作流的工具。DAG 由表示任务的节点和表示任务之间关系的箭头组成。'
- en: '![](../Images/4ced24b547d325303b4af3419555b16a.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4ced24b547d325303b4af3419555b16a.png)'
- en: Example DAG (Created By Author)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 DAG（作者创建）
- en: '**2\. Task:** A task is a single unit of work within a DAG. Tasks in a DAG
    can be linked together by dependencies, ensuring that they are executed in a specific
    order.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 任务：** 任务是 DAG 中的一个工作单元。DAG 中的任务可以通过依赖关系连接在一起，确保按照特定顺序执行。'
- en: '**3\. Operator:** Operators are tools used to instantiate the tasks in a DAG.
    Airflow offers a plethora of operators that can perform basic jobs, such as executing
    Python code, bash commands, and SQL queries.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**3\. 操作符：** 操作符是用于实例化 DAG 中任务的工具。Airflow 提供了大量操作符，能够执行基本的工作，如执行 Python 代码、bash
    命令和 SQL 查询。'
- en: '**4\. Metadata Database:** The metadata database stores metadata about the
    Airflow pipelines that the users create and run.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**4\. 元数据数据库：** 元数据数据库存储用户创建和运行的 Airflow 管道的元数据。'
- en: '**5\. Webserver:** The webserver is a convenient UI that enables users to run,
    monitor, and debug pipelines.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**5\. Webserver：** Webserver 是一个方便的用户界面，使用户能够运行、监视和调试管道。'
- en: '**6\. Scheduler:** The scheduler is responsible for monitoring DAGs and running
    tasks when their dependencies are met.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**6\. 调度器：** 调度器负责监控 DAG 并在其依赖关系满足时运行任务。'
- en: Demo
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 演示
- en: The goal of the demo is to create a DAG with Python and get it running on Airflow.
    Since we are prioritizing simplicity, we will create a DAG that only consists
    of two tasks.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 演示的目标是使用 Python 创建一个 DAG 并在 Airflow 上运行。由于我们优先考虑简洁性，我们将创建一个仅包含两个任务的 DAG。
- en: The first task runs a Python function named `pull_jokes`, which procures random
    jokes from the [official joke API](https://github.com/15Dkatz/official_joke_api)
    and stores them in a text file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个任务运行一个名为 `pull_jokes` 的 Python 函数，它从 [官方笑话 API](https://github.com/15Dkatz/official_joke_api)
    获取随机笑话并将其存储在文本文件中。
- en: 'The second task runs a bash command that prints a single sentence:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个任务运行一个 bash 命令，打印一句话：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Finally, we want the second task (i.e., bash command) to be executed right
    after the first task (i.e., Python function). If we were to visualize this DAG,
    it would look something like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们希望第二个任务（即 bash 命令）在第一个任务（即 Python 函数）之后立即执行。如果我们可视化这个 DAG，它会像这样：
- en: '![](../Images/c00bb65a67db2ad82e0197a5c0112356.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c00bb65a67db2ad82e0197a5c0112356.png)'
- en: Demo DAG (Created By Author)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 演示 DAG（由作者创建）
- en: Pretty simple, right? Let’s get started.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 很简单，对吧？我们开始吧。
- en: Part 1 — Setting Up Airflow
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 1 部分 — 设置 Airflow
- en: Before we can begin creating any DAGs, we will need to set up Airflow on our
    machine, which will require the use of the command line interface.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始创建任何 DAG 之前，我们需要在机器上设置 Airflow，这将需要使用命令行界面。
- en: There are several ways to install Apache Airflow, as explained in the [documentation](https://airflow.apache.org/docs/apache-airflow/stable/installation/index.html).
    Here, we will perform the installation with the PyPI route.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以安装 Apache Airflow，如 [文档](https://airflow.apache.org/docs/apache-airflow/stable/installation/index.html)
    中所述。在这里，我们将使用 PyPI 方式进行安装。
- en: '**Activate Windows Subsystem for Linux (For Windows Users)**'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**激活 Windows 子系统 Linux（适用于 Windows 用户）**'
- en: If you’re working with Windows, you will need to activate Windows Subsystem
    for Linux (WSL), which will require installing Ubuntu first.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Windows，你需要激活 Windows 子系统 Linux（WSL），这将需要先安装 Ubuntu。
- en: To activate WSL, enter the `wsl` command in PowerShell.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活 WSL，请在 PowerShell 中输入 `wsl` 命令。
- en: '**2\. Create a virtual environment**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 创建虚拟环境**'
- en: Next, create the virtual environment in which we will be working. Enter the
    following command to install python-venv.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建我们将工作的虚拟环境。输入以下命令以安装 python-venv。
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For the demo, we will create a virtual environment named “airflow_venv” and
    activate it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于演示，我们将创建一个名为“airflow_venv”的虚拟环境并激活它。
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/f42ccc28d2d7c1fa8fdb4ee9e3202e67.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f42ccc28d2d7c1fa8fdb4ee9e3202e67.png)'
- en: Activate Virtual Environment (Created By Author)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 激活虚拟环境（由作者创建）
- en: '**3\. Select the home directory for Airflow (optional)**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**3\. 选择 Airflow 的主目录（可选）**'
- en: It’s important to know where the Airflow project will be stored, as this is
    where the created workflows should be stored and configured.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要知道 Airflow 项目将存储在哪里，因为创建的工作流应存储和配置在这里。
- en: 'By default, the home directory for Airflow will be the `~/airflow` directory.
    However, users can change the home directory for Airflow using the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Airflow 的主目录将是 `~/airflow` 目录。然而，用户可以使用以下命令更改 Airflow 的主目录：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For the case study, the project will be stored in the `~/airflowhome` directory.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于案例研究，项目将存储在 `~/airflowhome` 目录中。
- en: '**4\. Install Apache Airflow**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**4\. 安装 Apache Airflow**'
- en: 'After confirming the home directory, install Apache Airflow using pip with
    the following command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 确认主目录后，使用以下命令通过 pip 安装 Apache Airflow：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This installation will create a project in the home directory with the following
    structure:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此安装将在主目录中创建一个具有以下结构的项目：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/c5d572ad0a24fb128dd0b479d742bbab.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c5d572ad0a24fb128dd0b479d742bbab.png)'
- en: Airflow Home Directory (Created By Author)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Airflow 主目录（由作者创建）
- en: The file named `airflow.cfg` contains all of Airflow’s configurations. It includes
    a parameter named `dags_folder`, which shows the path of the folder where all
    created DAGs *must* be located.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 名为 `airflow.cfg` 的文件包含了所有 Airflow 的配置。它包含一个名为 `dags_folder` 的参数，显示所有创建的 DAG
    *必须* 存放的文件夹路径。
- en: 'You can see the currently assigned directory by entering the command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通过输入以下命令，你可以查看当前分配的目录：
- en: '`vim airflow.cfg`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`vim airflow.cfg`'
- en: '![](../Images/2c6a2fa637293999b8efb865aed86198.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2c6a2fa637293999b8efb865aed86198.png)'
- en: Code Output (Created By Author)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 代码输出（由作者创建）
- en: As shown by the output, all airflow DAGs for this demo have to be in the `dags`
    subdirectory in the `airflowhome` directory.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如输出所示，所有用于此演示的airflow DAG必须位于`airflowhome`目录中的`dags`子目录中。
- en: So, we will create a folder named `dags` in the same directory, which will contain
    the subsequently created pipelines.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将在同一目录中创建一个名为`dags`的文件夹，其中将包含随后创建的管道。
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note: You can also change the path assigned to the `*dags_folder*` parameter
    in the airflow.cfg file to the path of your liking.'
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：您也可以更改airflow.cfg文件中分配给`*dags_folder*`参数的路径，选择您喜欢的路径。
- en: 'The project structure should be updated to the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 项目结构应更新为如下：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**5\. Initialize the metadata database**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**5\. 初始化元数据数据库**'
- en: 'Next, initialize the database with the command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用以下命令初始化数据库：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After initializing the database, the airflow home directory should now have
    a file named `airflow.db`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化数据库后，airflow主目录中现在应该有一个名为`airflow.db`的文件。
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/37d6655933bb2e834954d517db334e0f.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/37d6655933bb2e834954d517db334e0f.png)'
- en: Airflow Home Directory (Created By Author)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Airflow主目录（作者创建）
- en: '**6\. Create a user.**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**6\. 创建用户。**'
- en: A user account is needed to access the webserver, so we can create one using
    the following command.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一个用户账户来访问网络服务器，因此我们可以使用以下命令创建一个。
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: For the case study, we will be creating an admin account.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于案例研究，我们将创建一个管理员账户。
- en: '![](../Images/14fed9c9a3ec0504fcf456f03f252550.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/14fed9c9a3ec0504fcf456f03f252550.png)'
- en: Creating a User (Created By Author)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 创建用户（作者创建）
- en: 'Once a user account is created, it can be verified using the command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了用户账户，可以使用以下命令进行验证：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/8d107cb3b974b69f8abfd574d1e33060.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8d107cb3b974b69f8abfd574d1e33060.png)'
- en: Code Output (Created By Author)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 代码输出（作者创建）
- en: '**7\. Start the web server and scheduler**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**7\. 启动Web服务器和调度器**'
- en: The Airflow webserver can be opened with a one-liner.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过一行命令打开Airflow web服务器。
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Note: the default port is 8080, but you can choose a different port.'
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：默认端口为8080，但您可以选择不同的端口。
- en: 'In a new terminal, start the scheduler with the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的终端中，使用以下命令启动调度器：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**9\. Login to the web server**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**9\. 登录到Web服务器**'
- en: After starting the webserver, visit “[http://localhost:8080/](http://localhost:8080/)”
    (or whichever port you choose) in a web browser, and you will be directed to the
    login page, which is where you will enter the login credentials from your newly
    created user account.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 启动web服务器后，在网页浏览器中访问“[http://localhost:8080/](http://localhost:8080/)”（或您选择的任何端口），您将被定向到登录页面，在那里输入您新创建的用户账户的登录凭据。
- en: '![](../Images/83e11f0dffb65f825020998d0a465d79.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/83e11f0dffb65f825020998d0a465d79.png)'
- en: Login Page (Created By Author)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 登录页面（作者创建）
- en: After entering your details, you will be directed to the home page.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 输入详细信息后，您将被定向到主页。
- en: '![](../Images/7adf1824ac6b0001301fe5dc1b46e039.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7adf1824ac6b0001301fe5dc1b46e039.png)'
- en: Webserver (Created By Author)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Web服务器（作者创建）
- en: At the moment, there will only be samples DAGs provided by Airflow, but the
    webserver will also contain your DAGs once they are created.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，只会有Airflow提供的示例DAG，但一旦创建了您的DAG，它们也会显示在web服务器上。
- en: Part 2 — Creating the DAG
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二部分 — 创建DAG
- en: Now that we have Airflow set up, we can build the DAG using Python. The DAG
    created in this demo will be called “pulling_jokes_dag”.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经设置好了Airflow，我们可以使用Python构建DAG。此演示中创建的DAG将被称为“pulling_jokes_dag”。
- en: 'The following Python script named `pull_jokes.py` creates a DAG instance as
    well as the tasks:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下名为`pull_jokes.py`的Python脚本创建了一个DAG实例及其任务：
- en: It’s a small snippet of code, but there is a lot going on. Let’s break everything
    down step by step.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个小代码片段，但有很多内容。让我们一步步详细解读。
- en: '**Create a DAG instance**'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建DAG实例**'
- en: First, we create a DAG instance, in which we determine the configuration of
    the DAG.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个DAG实例，在其中确定DAG的配置。
- en: 'A DAG instance must have assigned values for two parameters: `dag_id` and `start_date`.
    The `dag_id` parameter is the unique identifier of the DAG, while the `start_date`
    parameter is the date the DAG is set to be scheduled.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一个DAG实例必须为两个参数分配值：`dag_id`和`start_date`。`dag_id`参数是DAG的唯一标识符，而`start_date`参数是DAG计划开始的日期。
- en: To keep things simple, we will only specify a few parameters. The `schedule`
    parameter defines the rules for when the DAG should be run. The `end_date` parameter
    indicates when the DAG runs should stop running. The `catchup` parameter indicates
    whether the scheduler should start a DAG run for any data interval that has not
    been run since the last data interval. The `tag` parameter assigns tags to the
    DAG, which will make it easier to find in the UI.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化操作，我们只会指定几个参数。`schedule` 参数定义 DAG 应运行的规则。`end_date` 参数表示 DAG 运行应停止的时间。`catchup`
    参数表示调度程序是否应为自上次数据间隔以来未运行的任何数据间隔启动 DAG 运行。`tag` 参数为 DAG 分配标签，这将使其在 UI 中更易于找到。
- en: For those interested in all available parameters for DAG instances, feel free
    to visit the Airflow [documentation](https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/models/dag/index.html).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些对 DAG 实例所有可用参数感兴趣的人，可以访问 Airflow 的 [文档](https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/models/dag/index.html)。
- en: '**2\. Create the first task**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**2. 创建第一个任务**'
- en: After creating the DAG instance, we can create the first task, which runs the
    `pull_jokes` function, by using a [Python Operator](https://airflow.apache.org/docs/apache-airflow/stable/howto/operator/python.html).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 DAG 实例后，我们可以创建第一个任务，该任务运行 `pull_jokes` 函数，使用 [Python Operator](https://airflow.apache.org/docs/apache-airflow/stable/howto/operator/python.html)。
- en: The `task_id` parameter is the unique identifier for the task, whereas the `python_callable`
    parameter contains the function that should be executed.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`task_id` 参数是任务的唯一标识符，而 `python_callable` 参数包含应执行的函数。'
- en: '**3\. Create the second task**'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**3. 创建第二个任务**'
- en: Next, we create the second task, which executes the bash command, using the
    [Bash Operator](https://airflow.apache.org/docs/apache-airflow/stable/howto/operator/bash.html).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建第二个任务，该任务执行 bash 命令，使用[Bash Operator](https://airflow.apache.org/docs/apache-airflow/stable/howto/operator/bash.html)。
- en: Once again, the `task_id` parameter is the unique identifier for the task, whereas
    the `bash_command` parameter contains the bash script that should be executed.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 再次地，`task_id` 参数是任务的唯一标识符，而 `bash_command` 参数包含应执行的 bash 脚本。
- en: '**4\. Establish dependencies**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**4. 建立依赖关系**'
- en: After creating the tasks, the dependencies need to be set up to determine the
    order in which the tasks are executed.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 创建任务后，需要设置依赖关系以确定任务的执行顺序。
- en: We can set task 2 to be executed *after* task 1 by using the `>>` operator.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `>>` 操作符将任务 2 设置为在任务 1 *之后* 执行。
- en: Part 3 — Running the DAG on Airflow
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 3 部分 — 在 Airflow 上运行 DAG
- en: Once the Python script for the DAG is created, the next step is to run the DAG
    on Airflow.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了 DAG 的 Python 脚本，下一步是让 DAG 在 Airflow 上运行。
- en: As a reminder, the DAG script *must* be placed in the location specified in
    the `airflow.cfg` file. The `pull_jokes.py` file used for this case study should
    be in this location.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒一下，DAG 脚本 *必须* 放置在 `airflow.cfg` 文件中指定的位置。用于此案例研究的 `pull_jokes.py` 文件应位于此位置。
- en: '![](../Images/2c6a2fa637293999b8efb865aed86198.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2c6a2fa637293999b8efb865aed86198.png)'
- en: DAGs directory (Created By Author)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: DAGs 目录（作者创建）
- en: 'After moving the `pull_jokes.py` file to the correct location, the project
    directory tree should look like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `pull_jokes.py` 文件移动到正确的位置后，项目目录结构应如下所示：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, Airflow should have access to the DAG. To confirm this, simply enter the
    command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Airflow 应该可以访问 DAG。要确认这一点，只需输入以下命令：
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We should now be able to view the newly added DAG in the webserver. Start the
    webserver with the command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该能够在 Web 服务器中查看新添加的 DAG。使用以下命令启动 Web 服务器：
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In a separate terminal, start the scheduler
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个单独的终端中，启动调度程序
- en: '[PRE17]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You should be able to see the DAG named “pulling_jokes_dag” in the UI.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够在 UI 中看到名为“pulling_jokes_dag”的 DAG。
- en: '![](../Images/855937da6b3b9b509c67088cdc7c6094.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/855937da6b3b9b509c67088cdc7c6094.png)'
- en: DAG in Webserver (Created By Author)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Web 服务器中的 DAG（作者创建）
- en: 'Pro tip: Although it’s optional, it’s best to assign tags to your DAGs. This
    will make them easier to find in the webserver.'
  id: totrans-131
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 专业提示：虽然这是可选的，但最好为你的 DAG 分配标签。这将使其在 Web 服务器中更易于查找。
- en: Technically speaking, DAGs can be managed using the command line interface alone,
    but the features in the web server make it much easier to access and monitor the
    created pipelines.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，DAG 可以仅通过命令行界面进行管理，但 Web 服务器中的功能使得访问和监控创建的管道变得更加容易。
- en: 'Some of the features include, but are not limited to:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一些功能包括但不限于：
- en: '**A breakdown of the DAG in the form of a grid:**'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DAG 以网格形式的详细说明：**'
- en: '![](../Images/6f643dcbedc72faa7406db3767612042.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6f643dcbedc72faa7406db3767612042.png)'
- en: Grid View (Created By Author)
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 网格视图（作者创建）
- en: '**A breakdown of the DAG in the form of a graph**'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DAG 的图形形式分析**'
- en: '![](../Images/a6b891390bf49296a1037bc21d992d9d.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a6b891390bf49296a1037bc21d992d9d.png)'
- en: Graph View (Created By Author)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图形视图（作者创建）
- en: '**The underlying Python code for the DAG**'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DAG 的底层 Python 代码**'
- en: '![](../Images/5927e333bfe4235973ac523bf7fde95d.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5927e333bfe4235973ac523bf7fde95d.png)'
- en: Code (Created By Author)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 代码（作者创建）
- en: '**The audit log**'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**审计日志**'
- en: '![](../Images/9506444453c5e3fad536d8b1b1172471.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9506444453c5e3fad536d8b1b1172471.png)'
- en: Audit Log (Created By Author)
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 审计日志（作者创建）
- en: Once Airflow has access to the DAG, it will perform DAG runs based on the provided
    schedule.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Airflow 访问到 DAG，它将根据提供的时间表执行 DAG 运行。
- en: A DAG can also be run manually by clicking the “play button” in the top right
    of the web server.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过点击网页服务器右上角的“播放按钮”手动运行 DAG。
- en: '![](../Images/f7419f3018372c13c9cabc5116b61cdf.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f7419f3018372c13c9cabc5116b61cdf.png)'
- en: Run DAG (Created By Author)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 DAG（作者创建）
- en: 'Alternatively, a DAG can be manually triggered using the CLI:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以使用 CLI 手动触发 DAG：
- en: '[PRE18]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Voila! Just like that, we have our DAG up and running on Airflow!
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，我们的 DAG 在 Airflow 上运行起来了！
- en: Conclusion
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: '![](../Images/84653505509c3468ec21803d5b42b311.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/84653505509c3468ec21803d5b42b311.png)'
- en: Photo by [Prateek Katyal](https://unsplash.com/es/@prateekkatyal?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Prateek Katyal](https://unsplash.com/es/@prateekkatyal?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)。
- en: Hopefully, this has been a useful primer for those looking to get hands-on experience
    with Apache Airflow.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这对那些希望亲身体验 Apache Airflow 的人来说是一个有用的入门指南。
- en: This demo is by no means a comprehensive demonstration of Airflow’s features
    and capabilities (we have barely scratched the surface), but it should be able
    to help people get started, which oftentimes is the hardest part.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这个演示绝不是 Airflow 功能和能力的全面展示（我们只是初步了解），但它应该能帮助人们入门，这通常是最困难的部分。
- en: After building and running your first DAG, you will have established a solid
    foundation, which will make it easier to design and run more complex workflows
    with a more frictionless experience.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建并运行第一个 DAG 后，你将建立一个坚实的基础，这将使你更容易设计和运行更复杂的工作流，体验更加顺畅。
- en: I wish you the best of luck in your data science endeavors!
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 祝你在数据科学的努力中好运！
