["```py\n# Create a quantum circuit with 1 qubit.\nqc = QuantumCircuit(1)\n\n# Initialize the simulator.\nsimulator = Aer.get_backend('aer_simulator')\n\n# Place the qubit into superposition.\nqc.h(0)\n\n# Apply partial inversion to the qubit.\n# If our range is 0.0 to 1.0, we can set: theta = rate * 3 - 1.5\nqc.u(theta, 0, 0, 0)\n\n# Measure the result.\nqc.measure_all()\n```", "```py\ndef invert(rate):\n    # Convert the rate of inversion from [0.0 to 1.0]\n    # to a theta range of [-1.5 to 1.5] using the formula:\n    # ((old_value - old_min) / (old_max - old_min)) * (new_max - new_min) + new_min\n    theta = rate * 3 - 1.5\n\n    # Create a circuit.\n    qc = QuantumCircuit(1)\n\n    # Initialize the simulator.\n    simulator = Aer.get_backend('aer_simulator')\n\n    # Place the qubit into superposition.\n    qc.h(0)\n\n    # Apply partial inversion to the qubit.\n    qc.u(theta, 0, 0, 0)\n\n    # Measure the result.\n    qc.measure_all()\n\n    # Execute the circuit.\n    job = execute(qc, simulator)\n    result = job.result()\n\n    # Return the counts of 0 and 1.\n    return result.get_counts()\n```", "```py\ndef init():\n    canvas = Canvas()\n    display(canvas)\n\n    canvas.fill_style = 'white'\n    canvas.fill_rect(0, 0, 300, 300)\n\n    canvas.fill_style = 'black'\n    canvas.fill_rect(5, 295, 290, 28)\n\n    return canvas\n\n# Load sprites.\nunicorn = Image.from_file(\"unicorn.jpg\")\ngremlin = Image.from_file(\"gremlin.jpg\")\n```", "```py\ndef draw(sprite1, sprite2, alpha):\n    canvas.global_alpha = alpha\n    canvas.draw_image(sprite1, 5, 5, 290, 290)\n\n    canvas.global_alpha = 1 - alpha\n    canvas.draw_image(sprite2, 5, 5, 290, 290)\n\n    canvas.global_alpha = 1\n    canvas.font = \"20px arial\"\n    canvas.fill_style = '#00ff00'\n    canvas.fill_text('Qubit inverted  ' + str(round(alpha, 1) * 100) + '%', 10, 316)\n\n    return canvas\n\ndef update(sprite1, sprite2, rate):\n    # Run the quantum program and obtain the qubit measurements.\n    counts = invert(rate)\n\n    # Get the counts for \"unicorn\" from the qubit measuring 0, and the gremlin for the qubit measuring 1.\n    alpha = counts['0'] / 1024 if '0' in counts else 0\n\n    draw(sprite1, sprite2, alpha)\n```", "```py\ndef animate(rate = 0):\n    with hold_canvas():\n        for i in range(10):\n            show_unicorn = True\n\n            for j in range(20*2):\n                canvas.fill_style = 'black'\n                canvas.fill_rect(5, 295, 290, 28)\n\n                update(unicorn, gremlin, rate)\n                rate += 0.05 if show_unicorn else -0.05\n                if rate > 1:\n                    show_unicorn = False\n                elif rate < 0:\n                    show_unicorn = True\n\n                canvas.sleep(125)\n\ncanvas = init()\nanimate()\n```"]