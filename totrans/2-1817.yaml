- en: 'Seaborn 0.12: An Insightful Guide to the Objects Interface and Declarative
    Graphics'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/seaborn-0-12-an-insightful-guide-to-the-objects-interface-and-declarative-graphics-65fa7a4e6577](https://towardsdatascience.com/seaborn-0-12-an-insightful-guide-to-the-objects-interface-and-declarative-graphics-65fa7a4e6577)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PYTHON TOOLBOX](https://medium.com/@qtalen/list/python-toolbox-4289824c6407)'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Streamlining your data visualization journey with Python’s popular library
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://qtalen.medium.com/?source=post_page-----65fa7a4e6577--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----65fa7a4e6577--------------------------------)[](https://towardsdatascience.com/?source=post_page-----65fa7a4e6577--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----65fa7a4e6577--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----65fa7a4e6577--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----65fa7a4e6577--------------------------------)
    ·14 min read·Aug 24, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d930c9fdcb0a9730a8836e89e069c8c6.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
- en: 'Photo Credit: Created by Author, [Canva](https://www.canva.com/)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: This article aims to introduce the objects interface feature in Seaborn 0.12,
    including the concept of declarative graphic syntax, and a practical visualization
    project to showcase the usage of the objects interface.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this article, you’ll have a clear understanding of the advantages
    and limitations of Seaborn’s object interface API. And you will be able to use
    Seaborn for data analysis projects more easily.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine you’re creating a data visualization chart using Python.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'You have to instruct the computer every step of the way: select a dataset,
    create a figure, set the color, add labels, adjust the size, etc…'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Then you realize your code is getting longer and more complex, and all you wanted
    was to quickly visualize your data.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: It’s like going to the grocery store and having to specify every item’s location,
    color, size, and shape, instead of just telling the shop assistant what you need.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Not only is this time-consuming, but it can also feel tiring.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: However, Seaborn 0.12’s new feature — the objects interface — and its use of
    declarative graphic syntax is like having a shop assistant who understands you.
    You just need to tell it what you need to do, and it will find everything for
    you.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: You no longer need to instruct it every step of the way. You just need to tell
    it what kind of result you want.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I’ll guide you through using the objects interface, this new
    feature that makes your data visualization process more effortless, flexible,
    and enjoyable. Let’s get started!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Seaborn API: Then and Now'
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before diving into the objects interface API, let’s systematically look at the
    differences between the Seaborn API of earlier versions and the 0.12 version.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: The original API
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many readers might have been intimidated by Matplotlib’s complex API documentation
    when learning Python data visualization.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Seaborn simplifies this by wrapping and streamlining Matplotlib’s API, making
    the learning curve gentler.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Seaborn doesn’t just offer high-level encapsulation of Matplotlib; it also categorizes
    all charts into relational, distributional, and categorical scenarios.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b0613dd60f527fe38d6b1ecb4e48af2f.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: Overview of Seaborn’s original API design. Image by Author
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: You should comprehensively understand Seaborn’s API through this diagram and
    know when to use which chart.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: For example, a `histplot` representing data distribution would fall under the
    distribution chart category.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, a `violinplot` representing data features by category would be
    classified as a categorical chart.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'Aside from vertical categorization, Seaborn also performs horizontal categorization:
    `Figure-level` and `axes-level`.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: According to the [official website](https://seaborn.pydata.org/tutorial/function_overview.html?ref=dataleadsfuture.com#figure-level-vs-axes-level-functions),
    `axes-level` charts are drawn on `matplotlib.pyplot.axes` and can only draw one
    figure.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, `Figure-level` charts use Matplotlib's `FacetGrid` to draw multiple
    charts in one figure, facilitating easy comparison of similar data dimensions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: However, even though Seaborn’s API significantly simplifies chart drawing through
    encapsulating Matplotlib, creating an individual-specific chart still requires
    complex configurations.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if I use Seaborn’s built-in `penguins` dataset to draw a `histplot`,
    the code is as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/99fa47414e9ad030e4014d41520544de.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: The original way of drawing a histplot. Image by Author
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'And when I use the same dataset to draw a `kdeplot`, the code is as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/ce9c2bfcf427ed4228dcd1a4e867be4b.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: The original way of drawing a kdeplot. Image by Author
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Except for the chart API, the rest of the configurations are identical.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: This is like telling the chef I want to use lamb chops and onions to make a
    lamb soup and specifying the cooking steps. When I want to use these ingredients
    to make a roasted lamb chop, I have to tell the chef about the ingredients and
    the cooking steps all over again.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Not only is it inefficient, but it also needs more flexibility.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: That’s why Seaborn introduced the objects interface API in its 0.12 version.
    This declarative graphic syntax dramatically improves the process of creating
    a chart.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: The objects Interface API
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we start with the objects interface API, let’s take a high-level look
    at it to better understand the drawing process.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the original Seaborn API, which organizes the drawing API by classification,
    the objects interface API collects the API by a drawing pipeline.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: The objects interface API divides the drawing into multiple stages, such as
    data binding, layout, presentation, customization, etc.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e9a6a8234d10e055f5e1ba1d39eea83a.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: Overview of Seaborn’s objects interface API design. Image by Author
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: The data binding and presentation stages are necessary, while other stages are
    optional.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, since the stages are independent, each stage can be reused. Following
    the previous example of the hist and kde plots:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the objects interface to draw, we first need to bind the data:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: From this line of code, we can see that the objects interface uses the `so.Plot`
    class for data binding.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Also, compared to the original API that uses the incomprehensible `hue` parameter,
    it uses the `color` parameter to bind the `species` dimension directly to the
    chart color, making the configuration more intuitive.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Finally, this line of code returns a `p` instance that can be reused to draw
    a chart.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s draw a `histplot`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/4f9f6ead980a48f039a81dec19b1a9fc.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: Use objects interface API to draw a histplot. Image by Author
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'This line of code shows that the drawing stage does not need to rebind the
    data. We just need to tell the `add` method what to draw: `so.Bars()`, and how
    to calculate it: `so.Hist()`.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: The `add` method also returns a copy of the `Plot` instance, so any adjustments
    in the `add` method will not affect the original data binding. The `p` instance
    can still be reused.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, we continue to call the `p.add()` method to draw a `kdeplot`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/14137c191e25355e9ee14696fbf11866.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: Use objects interface API to draw a kdeplot. Image by Author
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Since `KDE` is a way of statistic, `so.KDE()` is called on the `stat` parameter
    here. And since the `kdeplot` itself is an area plot, `so.Area()` is used for
    drawing.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: We reused the `p` instance bound to the data, so there is no need to tell the
    chef how to cook each dish, but to directly say what we want. Isn't it much more
    concise and flexible?
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Unpacking the Objects Interface with Examples
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, see how some common charts are written using the original Seaborn API
    and the objects interface API.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start, we need to import the necessary libraries:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Bar chart
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the original API, to draw a bar chart, the code is as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/d16e4abd660cfb2cccefee6a81f28990.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: The original way of drawing a bar chart. Image by Author
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'In the objects interface, to draw a bar chart, the code is as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/3ce53f3575c57d6aa684c9f9b1bce1b5.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: Use objects interface to draw a bar chart. Image by Author
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Scatter plot
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the original API, to draw a scatter plot, the code is as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/9e7217563e8f3b81a81ee5e5a3a5067c.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: In the original way, we use relplot to draw a scatter plot. Image by Author
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'In the objects interface, to draw a scatter plot, the code is as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/5c6083c06f7af66107f1c15b0141c04b.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: When using objects interface, we use so.Dots to draw a scatter plot. Image by
    Author
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: You may think that after comparing the drawing of the two APIs, it doesn’t seem
    like the objects interface is too special either.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry. Let’s take a look at the advanced usage of the objects interface.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Advanced usage
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose we use Seaborn’s `tips` dataset.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: I want to use a bar chart to see the average tip for different dates and mark
    the values on the chart.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'The chart I want is shown below:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fc50e7959f39167f59840dbcc27ef8cc.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: A bar chart with text to show the values. Image by Author
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Before we start drawing, we need to process the `tips` dataset to calculate
    the average value for each day.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, we can use the objects interface to draw:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We use two tricks here:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: First, we call the `pipe` method on the `dataframe` to enable chain code calls.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Second, we can reuse the instance of `so.Plot`, and only bind the data once
    to draw multiple graphs.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, let’s see how the code would be written using the original API:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As you can see, the original code is much more complex:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: First, draw a horizontal bar chart.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Then use iteration to draw the corresponding values on each bar.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: In comparison, doesn’t the objects interface seem simpler and more flexible?
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Applying the Objects Interface to Real-World Data
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, to help everyone deepen their memory and master the usage of the objects
    interface systematically, I plan to lead everyone to practice in an actual data
    visualization project.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: In this project, I plan to visually explore the data of New York City’s shared
    bicycle system to understand the usage of the city’s shared bicycles and help
    enterprises operate better.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Data source
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the Citi Bike Sharing dataset from Citibikenyc in this project.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the dataset here: [https://citibikenyc.com/system-data](https://citibikenyc.com/system-data)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: The license of this dataset is [here](https://ride.citibikenyc.com/data-sharing-policy).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: To facilitate the following coding process, I cleaned and merged the data in
    this dataset and finally synthesized one data set.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Data preprocessing
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we begin, we should understand the fields included in this dataset,
    which can be achieved by executing the following code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This dataset contains 15 fields, and since our goal is to understand the usage
    of shared bicycles in the city, all 15 fields will be helpful for us.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, to facilitate the analysis of the use of shared bicycles in different
    months of each year, as well as on weekdays and non-working days of each week,
    I need to generate two fields for the dataset: `Start Month` and `Day Of Week`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To facilitate display, I will convert the `Gender` field into text gender,
    convert the `Birth Year` into `Decade`, and change `Trip Duration` from seconds
    to minutes:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, since the original dataset is large, we only need to find out the
    distribution of the data, so I will sample the dataset for easier and faster drawing:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Visual analysis
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Remember, the purpose of data visualization is not just to display data,
    but to excavate the story behind the data.**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: In this project, I expect to understand under what circumstances users will
    use shared bicycles, to facilitate the distribution of bicycles or carry out corresponding
    promotions.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: First, I want to see in which season people are more inclined to use shared
    bicycles.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Since I want to see the total amount of data by month, I directly use the original
    dataset for drawing.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: But to speed up the drawing, I aggregate the data in the `dataframe` and then
    call the pipeline using the `pipe` method.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![](../Images/f233f521a535ff1456aaf691993dfb66.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
- en: View shared bike usage by month. Image by Author
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: The chart shows that bicycles have more uses in March and October of each year.
    This indicates that people are more willing to ride bikes in a mild climate.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Next, I want to see which days of the week people use shared bicycles more.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Since we only need to see a proportion here, I use the sampled dataset and set
    a `proportion` in `so.Hist()`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![](../Images/1d10a475bc814621af62ba0ad91bc3bc.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
- en: Which days of the week do people use shared bicycles more? Image by Author
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Both males and females use shared bicycles more on weekdays, probably for commuting
    to work.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: But we also found that users with ‘Unknown’ gender use shared bicycles more
    on weekends.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Why is this the case? We can continue to explore.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Next, I want to see the proportion of cycling duration in different gender situations.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Here I will draw a histogram for each gender separately and use `facet` for
    layout.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: To eliminate the interference generated by anomalous data, I only took data
    within one standard deviation of the average riding time for reference.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](../Images/3e30b6da446ee41ca4a1230e1d5eca22.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
- en: A histogram for each gender separately to show the proportion of cycling duration.
    Image by Author
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: The chart shows that the cycling duration of males and females conforms to our
    cognition.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Still, the cycling duration of users with the ‘Unknown’ gender seems more evenly
    distributed, indicating that cycling is more casual and lacks purpose.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: 'Fourth, I want to understand the proportion of cycling duration by membership
    category:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![](../Images/e83102fd04064ce8d6d8c968746ba08a.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
- en: The proportion of cycling duration by membership category. Image by Author
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: From the chart, we can see that for member users, regardless of gender, the
    distribution of cycling duration is more purposeful, tending to short-term cycling
    to quickly reach their destination.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: For ordinary users, users with ‘Unknown’ gender have a more casual cycling duration
    and longer cycling times.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: It seems that these users are there to temporarily get on their bikes and see
    the scenery?
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, in the fifth step, I want to see the distribution of bicycle usage
    times between stations to verify my guess.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Since displaying so many stations on the chart can’t be done, I first aggregate
    the sampled data by `Start Station ID` and `End Station ID` count.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Also, to avoid too many data points interfering with our analysis, I only took
    the data with the top 20% count for drawing.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Then use a scatter plot to plot the data and use the size of the point to represent
    the count size.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](../Images/04ee29ec4ff0ed06003f30b9decb71b4.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
- en: Distribution of rides between stations. Image by Author
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: The chart shows that the number of rides is mainly distributed between stations
    with ID values of 3180 and 3220.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Compared with the table data, this area is concentrated for office workers.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: There is also a lot of data distribution in the Station ID between 3260 and
    3280.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: By comparing the table data, we can see many parks and tourist attractions in
    this area.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'This confirms our guess: in addition to office workers who tend to ride shared
    bicycles on weekdays, many tourists are willing to use shared bikes to go out
    and see the scenery on weekends.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, for this city’s shared bicycle operation department, the operation
    strategy can not only discount on weekdays to attract members to ride more.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: They can also use new user registration gifts or promote more attractions in
    the app on weekends to encourage tourists or temporary users to become member
    users.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 'Room for Growth: Current Limitations of Objects Interface'
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After demonstrating how the Seaborn objects interface helps us quickly perform
    data analysis in actual projects, I would like to discuss some improvements the
    objects interface needs to make based on my experience.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: First, there needs to be more performance in the drawing.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the above project, when I use the original dataset to draw, the
    speed is languid, and Seaborn doesn’t use the calculation ability of `Numpy` or
    `Python Arrow`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Second, there needs to be more documentation.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: So many APIs I can not find the specific use of the introduction, and I can
    only slowly fumble.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: And the API design doesn’t feel very mature to me yet.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: For example, I believe `so.Stat` and `so.Move` should be placed in the Data
    Mapping phase, but currently, they are placed in the Presentation phase through
    the add method, which needs to be revised.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the selection of charts needs to be more rich.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: I initially planned to use pie charts and map charts in the city bike-sharing
    project, but I couldn’t find them.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Although I could write an extension myself, that’s a different story.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Also, when I want to layout the charts more complexly, I need to use Matplotlib’s
    `subplots` API and integrate it with the `on` method, which still needs to be
    fully encapsulated.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Despite these shortcomings, I am confident about the future of Seaborn.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: I think the team’s choice of declarative graphical syntax has made Seaborn easier
    and more flexible to use.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: I hope the Seaborn community will become more active in the near future.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, I introduced the objects interface feature in Seaborn 0.12.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: By introducing the benefits of declarative graphic syntax, I let you understand
    why the Seaborn team chose to evolve in this way.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Also, to cater to readers who need to become more familiar with Seaborn, I introduced
    the differences and similarities in API design philosophy between the original
    Seaborn and the objects interface version.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了迎合那些需要进一步熟悉Seaborn的读者，我介绍了原始Seaborn与对象接口版本在API设计哲学上的异同。
- en: By taking you through an actual project analysis of city bike-sharing usage,
    you’ve seen first-hand how the objects interface API is used and my expectations
    for it.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实际项目分析城市共享单车的使用情况，你亲眼见证了对象接口API的使用方式及我的期望。
- en: Always remember, the goal of data visualization is not just to display data,
    but to uncover the stories behind the data.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 永远记住，数据可视化的目标不仅仅是展示数据，而是揭示数据背后的故事。
- en: I hope you found this article helpful. Feel free to comment and participate
    in the discussion if you have any questions or new ideas. I’m more than happy
    to answer your questions.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你觉得这篇文章对你有帮助。如果你有任何问题或新想法，欢迎评论和参与讨论。我很乐意回答你的问题。
- en: 'Dataset Usage Permission:'
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据集使用权限：
- en: The “penguins” and “tips” datasets used in the article are example datasets
    included in the seaborn source code. Seaborn is an open-source software that adheres
    to the [BSD 3-Clause “New” or “Revised” License](https://github.com/mwaskom/seaborn/blob/master/LICENSE.md),
    which allows for commercial purposes.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文章中使用的“企鹅”和“提示”数据集是包含在seaborn源代码中的示例数据集。Seaborn是一个遵循[BSD 3-Clause “New”或“Revised”许可证](https://github.com/mwaskom/seaborn/blob/master/LICENSE.md)的开源软件，允许用于商业目的。
- en: 'You can download the Citi Bike trip history data from here: [https://citibikenyc.com/system-data](https://citibikenyc.com/system-data)
    and the license [https://ride.citibikenyc.com/data-sharing-policy](https://ride.citibikenyc.com/data-sharing-policy)
    allow me to use it in my article too.'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以从这里下载Citi Bike旅行历史数据：[https://citibikenyc.com/system-data](https://citibikenyc.com/system-data)，并且许可证[https://ride.citibikenyc.com/data-sharing-policy](https://ride.citibikenyc.com/data-sharing-policy)允许我在文章中使用这些数据。
- en: 'Besides improving code execution speed and performance, using various tools
    to improve work efficiency is also a performance enhancement:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提高代码执行速度和性能外，使用各种工具提高工作效率也是一种性能提升：
- en: '![Peng Qian](../Images/fa6bd24b4781f623be8ea40c4e6bdb78.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![Peng Qian](../Images/fa6bd24b4781f623be8ea40c4e6bdb78.png)'
- en: '[Peng Qian](https://qtalen.medium.com/?source=post_page-----65fa7a4e6577--------------------------------)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '[Peng Qian](https://qtalen.medium.com/?source=post_page-----65fa7a4e6577--------------------------------)'
- en: Python Toolbox
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 工具箱
- en: '[View list](https://qtalen.medium.com/list/python-toolbox-4289824c6407?source=post_page-----65fa7a4e6577--------------------------------)6
    stories![Seaborn 0.12: An Insightful Guide to the Objects Interface and Declarative
    Graphics](../Images/6c1f4ca8d7b82c288cb229b73f560c04.png)![Supercharge Your Python
    Asyncio With Aiomultiprocess: A Comprehensive Guide](../Images/9c366de04067cd0ec1b30d9ce223011b.png)![Conquer
    Retries in Python Using Tenacity: An In-depth Tutorial](../Images/e636d5546f5826d60865c6a95f976fa8.png)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '[查看列表](https://qtalen.medium.com/list/python-toolbox-4289824c6407?source=post_page-----65fa7a4e6577--------------------------------)6
    个故事！[Seaborn 0.12: 透视对象接口和声明性图形的指南](../Images/6c1f4ca8d7b82c288cb229b73f560c04.png)![用
    Aiomultiprocess 提升你的 Python Asyncio 性能：全面指南](../Images/9c366de04067cd0ec1b30d9ce223011b.png)![用
    Tenacity 征服 Python 中的重试：深入教程](../Images/e636d5546f5826d60865c6a95f976fa8.png)'
- en: Thank you for reading my stories.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读我的故事。
- en: You can [**subscribe**](https://www.dataleadsfuture.com/#/portal) to get the
    latest data science stories from me.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以[**订阅**](https://www.dataleadsfuture.com/#/portal)以获取我最新的数据科学故事。
- en: Find me on [LinkedIn](https://www.linkedin.com/in/qtalen/) or [Twitter(X)](https://twitter.com/qtalen)
    if you have any questions.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有任何问题，可以在[LinkedIn](https://www.linkedin.com/in/qtalen/)或[Twitter(X)](https://twitter.com/qtalen)上找到我。
- en: This article was originally published on [Data Leads Future](https://www.dataleadsfuture.com/seaborn-0-12-an-insightful-guide-to-the-objects-interface-and-declarative-graphics/#/portal).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 本文最初发布在[数据引领未来](https://www.dataleadsfuture.com/seaborn-0-12-an-insightful-guide-to-the-objects-interface-and-declarative-graphics/#/portal)。
