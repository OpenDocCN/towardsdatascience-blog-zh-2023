["```py\nfrom functools import lru_cache\n\n@lru_cache\ndef foo():\n    print(\"I am running the foo() function\")\n    return 10\n```", "```py\n>>> x = foo()\nI am running the foo() function\n>>> x\n10\n>>> y = foo()\n>>> y\n10\n>>> z = foo()\n>>> z\n10\n```", "```py\nfrom collections.abc import Sequence\n\n@lru_cache\ndef sum_of_powers(x: Sequence[float], pow: float) -> float:\n    output = sum(xi**pow for xi in x)\n    print(f\"Call: sum_of_powers({x=}, {pow=})\")\n    return output\n```", "```py\n>>> sum_of_powers\n<functools._lru_cache_wrapper object at 0x7f...>\n```", "```py\n>>> x = (1, 1, 2)\n>>> sum_of_powers(x, 2)\nCall: sum_of_powers(x=(1, 1, 2), pow=2)\n6\n>>> sum_of_powers(x, 3)\nCall: sum_of_powers(x=(1, 1, 2), pow=3)\n10\n>>> sum_of_powers(x, 2)\n6\n>>> sum_of_powers(x, 3)\n10\n```", "```py\n>>> sum_of_powers.cache_info\n<built-in method cache_info of functools._lru_cache_wrapper object at 0x7f...>\n```", "```py\n>>> sum_of_powers.cache_info()\nCacheInfo(hits=2, misses=2, maxsize=128, currsize=2)\n```", "```py\n>>> class JustOneLetterCachedInside:\n...     def __init__(self, letter):\n...         self.letter = letter\n...         self.cache = {}\n...     def make_dict(self, n):\n...         if n not in self.cache:\n...             print(f\"The output for n of {n} is being cached.\")\n...             self.cache[n] = [self.letter] * n\n...         return self.cache[n]\n>>> instance = JustOneLetterCachedInside(\"a\")\n>>> _ = instance.make_dict(10)\nThe output for n of 10 is being cached.\n>>> _ = instance.make_dict(10)\n>>> _ = instance.make_dict(10)\n>>> _ = instance.make_dict(20)\nThe output for n of 20 is being cached.\n>>> _ = instance.make_dict(20)\n>>> instance.cache.keys()\ndict_keys([10, 20])\n```", "```py\n>>> class JustOneLetter:\n...     def __init__(self, letter):\n...         self.letter = letter\n...     @lru_cache\n...     def make_dict(self, n):\n...         return [self.letter] * n\n>>> instance = JustOneLetter(\"a\")\n>>> _ = instance.make_dict(10)\n>>> _ = instance.make_dict(10)\n>>> _ = instance.make_dict(10)\n>>> _ = instance.make_dict(20)\n>>> _ = instance.make_dict(20)\n>>> instance.make_dict.cache_info()\nCacheInfo(hits=3, misses=2, maxsize=128, currsize=2)\n```", "```py\n>>> sum_of_powers((1, 2, 3), 2)\nCall: sum_of_powers(x=(1, 2, 3), pow=2)\n14\n>>> sum_of_powers([1, 1, 2], 2)\nTraceback (most recent call last):\n    ...\nTypeError: unhashable type: 'list'\n\n>>> from typing import Dict\n>>> class Dicti(Dict[str, int]): ...\n>>> @ lru_cache\n... def foo(x: Dicti) -> int: return len(x)\n>>> foo(Dict({\"a\": 1}))\nTraceback (most recent call last):\n    ...\nTypeError: Type Dict cannot be instantiated; use dict() instead\n```", "```py\nimport perftester\nfrom functools import lru_cache\nfrom rounder import signif\n\ndef make_dict(n):\n    return {str(i): i**2 for i in range(n)}\n\n@lru_cache\ndef make_dict_cached(n):\n    return {str(i): i**2 for i in range(n)}\n\nn = 100\n\nperftester.config.set_defaults(\n    which=\"time\",\n    Repeat=1,\n    Number=int(1_000_000 / n)\n)\nt1 = perftester.time_benchmark(make_dict, n=n)\nt2 = perftester.time_benchmark(make_dict_cached, n=n)\n\nprint(\n    \"Benchmark for {n}\",\n    f\"Regular: {signif(t1['min'], 4)}\",\n    f\"Cached: {signif(t2['min'], 4)}\",\n    f\"Ratio: {signif(t1['min'] / t2['min'], 4)}\"\n)\n```", "```py\n 1:   4.6\n    10:  26.6\n   100: 222.7\n  1000: 551.7\n 10000: 100.0\n100000:   9.2\n```", "```py\nimport perftester\nfrom rounder import signif\n\nMEMORY: dict = {}\n\ndef make_dict(n):\n    return {str(i): i**2 for i in range(n)}\n\ndef make_dict_cached(n):\n    if n not in MEMORY:\n        MEMORY[n] = {str(i): i**2 for i in range(n)}\n    return MEMORY[n]\n\nn = 1000000\n\nperftester.config.set_defaults(\n    which=\"time\",\n    Repeat=1,\n    Number=int(1_000_000 / n)\n)\nt1 = perftester.time_benchmark(make_dict, n=n)\nt2 = perftester.time_benchmark(make_dict_cached, n=n)\n\nprint(\n    f\"Benchmark for {n}\",\n    f\"Regular: {signif(t1['min'], 4)}\",\n    f\"Cached: {signif(t2['min'], 4)}\",\n    f\"Ratio: {signif(t1['min'] / t2['min'], 4)}\"\n)\n```", "```py\n 1:   3.4\n    10:  18.3\n   100: 184.2\n  1000: 726.0\n 10000:  82.4\n100000:   6.7\n```"]