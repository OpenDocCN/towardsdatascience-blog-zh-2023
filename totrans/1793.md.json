["```py\ncurl -X GET \\\n'https://api.opsgenie.com/v2/schedules/{schedule_name}/on-calls?scheduleIdentifierType=name&flat=true' \\\n--header 'Authorization: GenieKey {token}'\n```", "```py\ncurl -X POST \\\n-F usergroup={usergroup} \\\n-F users={user} \\\n'https://slack.com/api/usergroups.users.update' \\\n-H 'Authorization: Bearer {token}'\n```", "```py\n# Import\nfrom airflow import DAG, XComArg\nfrom typing import Dict, List\nfrom airflow.operators.bash import BashOperator\nfrom airflow.operators.python import PythonOperator\nfrom airflow.models import Variable\nimport json\n\n# Fetch secret tokens\nslack_token = Variable.get(\"slack_token\")\nopsgenie_token = Variable.get(\"opsgenie_token\")\n\n# Setup DAG\ndag = DAG(\n    dag_id,\n    schedule_interval=schedule_interval,\n    default_args=default_args,\n    catchup=catchup,\n    max_active_runs=max_active_runs,\n)\nwith dag:\n\n    # Run BashOperator fetching from Opsgenie who is on call\n    def fetch_who_is_on_call(**kwargs):\n        fetch_who_is_on_call_bash = BashOperator(\n            task_id=\"fetch_who_is_on_call_bash\",\n            bash_command=\"\"\"\n            curl -X GET \\\n            'https://api.opsgenie.com/v2/schedules/{schedule_name}/on-calls?scheduleIdentifierType=name&flat=true' \\\n             --header 'Authorization: GenieKey {token}'\n            \"\"\".format(\n                schedule_name=\"schedule_name\", \n                token=opsgenie_token\n             ),\n            dag=dag,\n        )\n        return_value = fetch_who_is_on_call_bash.execute(context=kwargs)\n        fetch_who_is_on_call_bash\n        return return_value\n\n    # run BashOperator in PythonOperator and provide context\n    opsgenie_pull = PythonOperator(\n        task_id=\"opsgenie_pull\",\n        python_callable=fetch_who_is_on_call,\n        provide_context=True,\n        dag=dag,\n    )\n\n    # Overwrite slack group with the person on call\n    def overwrite_slack_group(**kwargs):\n\n        # First: get who is on call from PythonOperator\n        ti = kwargs.get(\"ti\")\n        xcom_return = json.loads(ti.xcom_pull(task_ids=\"opsgenie_pull\"))\n        user_email = xcom_return[\"data\"][\"onCallRecipients\"][0]\n\n        user_dict = {\n            \"data_scientist_a\": \"A03BU00KGK4\",\n            \"data_scientist_b\": \"B03BU00KGK4\",\n        }\n        user_id = [\n            user_dict[k] for k in user_dict.keys() if k == user_email.split(\".\")[0]\n        ]\n\n        # Second: Run BashOperator to overwrite slack group\n        overwrite_slack_group_bash = BashOperator(\n            task_id=\"overwrite_slack_group_bash\",\n            bash_command=\"\"\"\n            curl -X POST \\\n            -F usergroup={usergroup} \\\n            -F users={user} \\\n            https://slack.com/api/usergroups.users.update \\\n            -H 'Authorization: Bearer {token}'\n            \"\"\".format(\n                usergroup=\"usergroup_id\",\n                user=user_id,\n                token=slack_token,\n            ),\n            dag=dag,\n        )\n        overwrite_slack_group_bash.execute(context=kwargs)\n        overwrite_slack_group_bash\n\n    # Run BashOperator for slack overwrite in PythonOperator\n    overwrite_slack = PythonOperator(\n        task_id=\"overwrite_slack\",\n        python_callable=overwrite_slack_group,\n        provide_context=True,\n        dag=dag,\n    )\n\n    opsgenie_pull >> overwrite_slack\n    return dag\n```"]