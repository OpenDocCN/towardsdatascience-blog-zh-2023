["```py\nlabels = [\"Start balance\", \"Consulting\", \"Net revenue\", \n          \"Purchases\", \"Other expenses\", \"Profit before tax\"]\ndata = [20, 80, 10, -40, -20, 0 ]\n```", "```py\nfig = ph.waterfall(labels,data, title)\n```", "```py\nimport streamlit as st\nimport plotlyhelper as ph\n\nst.set_page_config(layout='wide')\n\nst.title(\"Waterfall graphs with Plotly\")\n\ncol1, col2 = st.columns(2)\n\nlabels = [\"Beginning HC\", \"Hires\", \"Transfers in\", \"Transfers out\", \n          \"Exits\", \"Ending HC\"]\ndata = [100, 30, 8, -12, -10, 0 ]\ntitle = \"Headcount\"\n\nfig = ph.waterfall(labels,data, title)\n\ncol1.plotly_chart(fig)\n\nfig = ph.waterfall(labels,data, title, color = 'blue')\n\ncol2.plotly_chart(fig)\n```", "```py\nfig = ph.waterfall(labels,data, title, icolor = 'orange', \n                                       dcolor = 'pink', \n                                       tcolor = 'yellow', \n                                       ccolor='red')\nst.plotly_chart(fig)\n```", "```py\nannotation = [\"Start\", \"\", \"\", \"\", \"\", \"End\"]\n\nlabels = [\"Start balance\", \"Consulting\", \"Net revenue\", \"Purchases\", \"Other expenses\", \"Profit before tax\"]\ndata = [20, 80, 10, -40, -20, 0 ] \ntitle = \"Sales revenue\"\n\nfig = ph.waterfall(labels,data, title, annotation=annotation)\n```", "```py\nlabels = [\"Year beginning\", \"Profit1\", \"Loss1\", \"Q1\", \"Profit2\", \"Loss2\", \"Q2\"]\ndata = [100, 50, -20, 0, 40, -10, 0 ]\nannotation = []\nmeasure = ['relative','relative', 'relative','total', \n           'relative','relative','total']\ntitle = \"Profit/Loss\"\n\nfig = ph.waterfall(labels,data, title, \n                   annotation = annotation, \n                   measure=measure)\n\nst.plotly_chart(fig)\n```", "```py\nimport plotly.graph_objects as go\n\ndef waterfall(labels, data, title=\"\", annotation=None, \n              icolor=\"Green\", dcolor=\"Red\", \n              tcolor=\"Blue\", ccolor='Dark Grey', \n              color=None, measure=None):\n    \"\"\"\n    Create a waterfall chart using Plotly.\n\n    Parameters:\n        labels (list): A list of labels for the data points.\n        data (list): A list of numerical values representing the data points.\n        title (str, optional): The title of the chart. Defaults to an empty string.\n        annotation (list, optional): A list of annotations for each data point. Defaults to None.\n        icolor (str, optional): Color for increasing values. Defaults to \"Green\".\n        dcolor (str, optional): Color for decreasing values. Defaults to \"Red\".\n        tcolor (str, optional): Color for the total value. Defaults to \"Blue\".\n        ccolor (str, optional): Connector line color. Defaults to 'Dark Grey'.\n        color (str, optional): Common color for all elements. Defaults to None.\n        measure (list, optional): A list specifying whether each data point is 'relative' or 'total'. Defaults to None.\n\n    Returns:\n        plotly.graph_objs._figure.Figure: A Plotly Figure containing the waterfall chart.\n    \"\"\"\n    # Set default measure values if not provided\n    if measure is None:\n        measure = ['relative'] * (len(labels) - 1)\n        measure.append('total')\n\n    # Set default annotation values if not provided\n    if annotation is None:\n        annotation = data[:-1]\n        annotation.append(sum(data))\n\n    # Create the waterfall chart figure\n    fig = go.Figure(go.Waterfall(\n        orientation=\"v\",\n        measure=measure,\n        textposition=\"outside\",\n        text=annotation,\n        y=data,\n        x=labels,\n        connector={\"line\": {\"color\": ccolor}},\n        decreasing={\"marker\": {\"color\": dcolor}},\n        increasing={\"marker\": {\"color\": icolor}},\n        totals={\"marker\": {\"color\": tcolor}}\n    )).update_layout(\n        title=title\n    )\n\n    return fig\n```"]