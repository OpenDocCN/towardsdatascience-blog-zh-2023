- en: What is the difference between UNION and JOIN in SQL?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/what-is-the-difference-between-union-and-join-in-sql-c7cff3975ff4](https://towardsdatascience.com/what-is-the-difference-between-union-and-join-in-sql-c7cff3975ff4)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 5 minute guide to UNION, EXCEPT and INTERSECT in SQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://mikehuls.medium.com/?source=post_page-----c7cff3975ff4--------------------------------)[![Mike
    Huls](../Images/8f9f55a0d25db00799c5d37383b7f5b6.png)](https://mikehuls.medium.com/?source=post_page-----c7cff3975ff4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c7cff3975ff4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c7cff3975ff4--------------------------------)
    [Mike Huls](https://mikehuls.medium.com/?source=post_page-----c7cff3975ff4--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c7cff3975ff4--------------------------------)
    ·7 min read·May 1, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/21ede7b38e5fd0033160d7bb0cdfbaea.png)'
  prefs: []
  type: TYPE_IMG
- en: We’ve got mountains of data to process (image by [Simon Berger](https://unsplash.com/@8moments)
    on [Unsplash](https://unsplash.com/photos/twukN12EN7c))
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article we dive deep in three often overlooked SQL operators: `EXCEPT`,
    `INTERSECT` and `UNION`. We will:'
  prefs: []
  type: TYPE_NORMAL
- en: '[use clear examples and visuals to thoroughly understand the concepts](#59cd)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[understand the ‘rules’ of the operator to really grasp how to use them](#ea42)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[explore a more complex example](#28fb)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[understand the difference with](#9223) `[JOIN](#9223)` [and discuss when to
    use which](#9223)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the end of this article you’ll have some powerful new tools under your SQL
    belt so let’s code!
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin..
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In some databases like SQL Server, PostgreSQL and SQLite we use the `EXCEPT`
    operator. In other databases (MySQL and Oracle e.g.) this operator goes under
    a different name: `MINUS`. Both `MINUS` and `EXCEPT` work in the exact same way.'
  prefs: []
  type: TYPE_NORMAL
- en: 'TL;DR: `*EXCEPT == MINUS*`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For the rest of this article we’ll use SQL Server examples with `EXCEPT`; if
    you use another database, just swap this out for `MINUS` where needed.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/sql-insert-delete-and-update-in-one-statement-sync-your-tables-with-merge-14814215d32c?source=post_page-----c7cff3975ff4--------------------------------)
    [## SQL — insert, delete and update in ONE statement: sync your tables with MERGE'
  prefs: []
  type: TYPE_NORMAL
- en: towardsdatascience.com](/sql-insert-delete-and-update-in-one-statement-sync-your-tables-with-merge-14814215d32c?source=post_page-----c7cff3975ff4--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Understanding EXCEPT, INTERSECT and UNION
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s start with a very simple example. We’ll first create a table that contains
    countries: we have an id, a name and a population. Then we’ll insert 10 countries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we’ll create two queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '***small countries***: select countries with a population of less than 1 million'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***c-countries***: selects countries whose name contains the letter ‘c’'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Next we’ll demonstrate how to compare and combine the results of these queries
    into one result set.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/sql-understand-how-indices-work-under-the-hood-to-speed-up-your-queries-a7f07eef4080?source=post_page-----c7cff3975ff4--------------------------------)
    [## SQL — Understand how indices work under the hood to speed up your queries.'
  prefs: []
  type: TYPE_NORMAL
- en: No more waiting for slow queries to finish
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/sql-understand-how-indices-work-under-the-hood-to-speed-up-your-queries-a7f07eef4080?source=post_page-----c7cff3975ff4--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 Except
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we can use `EXCEPT` to select all **small countries** `EXCEPT` those that
    **have a ‘c’ in their name:**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1ebb3f3da93e267d3173693092a8e555.png)'
  prefs: []
  type: TYPE_IMG
- en: The result of query1 EXCEPT the result of query2 (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Intersect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use `INTERSECT` to find out the overlap: **small c-countries:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b159abed8b15f7ba65e44a0c03b2a49e.png)'
  prefs: []
  type: TYPE_IMG
- en: The intersection between our two queries (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 UNION (and UNION ALL)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Union takes the result of both queries and merges them together in one result
    set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the example code above `UNION ALL` produces another Liechtenstein! This is
    because the regular `UNION` removes duplicates; `UNION ALL` returns all rows from
    both queries.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1b0e72d200c375cbd1b9c9b68acca6d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Returns the outputs of both result sets (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: '[](/python-to-sql-upsert-safely-easily-and-fast-17a854d4ec5a?source=post_page-----c7cff3975ff4--------------------------------)
    [## Python to SQL — UPSERT Safely, Easily and Fast'
  prefs: []
  type: TYPE_NORMAL
- en: Lightning-fast insert and/or update with Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/python-to-sql-upsert-safely-easily-and-fast-17a854d4ec5a?source=post_page-----c7cff3975ff4--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 2\. What determines what overlaps? The rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SQL analyzes the results of the queries and determines whether there is or
    isn’t an intersection based on the **columns that get returned** from either query.
    Broadly speaking, there are two rules concerning the queries we’re comparing:'
  prefs: []
  type: TYPE_NORMAL
- en: The columns must be **comparable** (same data type)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **number of columns** must be **equal**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**RULE 1: comparable columns**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code below will fail because we cannot compare `id` (integer) and `name`
    (string-type).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**RULE 2: equal number of columns**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The code below will fail because we select two columns from query1 and only
    one from query2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[](/sql-delete-into-another-table-b5b946a42299?source=post_page-----c7cff3975ff4--------------------------------)
    [## SQL — DELETE INTO another table'
  prefs: []
  type: TYPE_NORMAL
- en: towardsdatascience.com](/sql-delete-into-another-table-b5b946a42299?source=post_page-----c7cff3975ff4--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Following the rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we adhere to these rules we can also perform queries like the one below:
    matching all small-country `id`''s with the `population` of ‘c’-countries. Although
    this is perfectly valid syntax; it will yield no records.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the same way we can `UNION` the results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Will result into:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0a153b73e4f3d010095c9ece6698f4ce.png)'
  prefs: []
  type: TYPE_IMG
- en: Also notice that the names of the columns don’t have to match. If the names
    conflict, the column-name of the first query will be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/dramatically-improve-your-database-inserts-with-a-simple-upgrade-6dfa672f1424?source=post_page-----c7cff3975ff4--------------------------------)
    [## Dramatically improve your database insert speed with a simple upgrade'
  prefs: []
  type: TYPE_NORMAL
- en: 4 levels of creating blazingly fast database connections in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/dramatically-improve-your-database-inserts-with-a-simple-upgrade-6dfa672f1424?source=post_page-----c7cff3975ff4--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 3\. EXCEPT, INTERSECT & UNION with different tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, we don’t have to compare data from the same table, we can use different
    tables as well, as long as the data structures resulting from the `SELECT` statements
    match. I’ve prepared the following examples with [this statement](https://gist.github.com/mike-huls/12de512e770e4bc00897015c083226ec).
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. EXCEPT example:**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example we compare records from the `products` table with records from
    the `sales` table: we want to know if there are any products with a price < 100
    cents that have been sold anywhere but the Netherlands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**2\. INTERSECT example**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next up, we’ll select any product with `SALES` in the USA that also have returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**3\. UNION example**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Lastly, we’ll UNION the results of three queries: cheap products, products
    with any sales in the Netherlands or any product that is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[](/the-easiest-way-to-upsert-with-sqlalchemy-9dae87a75c35?source=post_page-----c7cff3975ff4--------------------------------)
    [## The easiest way to UPSERT with SQLAlchemy'
  prefs: []
  type: TYPE_NORMAL
- en: One command to both INSERT new data and UPDATE existing records in your database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/the-easiest-way-to-upsert-with-sqlalchemy-9dae87a75c35?source=post_page-----c7cff3975ff4--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 4\. What is the difference with joins?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I think of `JOIN`'s as combining ***columns*** from two or more tables data
    sets using a ***related column*** between them. The `UNION`, `INTERSECT` and `EXCEPT`
    operator, on the other hand, combine or compares data from two or more tables
    and then ***appends*** this data.
  prefs: []
  type: TYPE_NORMAL
- en: 'I like to think of a join operating “**horizontally**”, “**zipping”** query
    results together. The `UNION`, `INTERSECT` and `EXCEPT` operator to work “**vertically**”,
    “**stacking up”** result sets. Let’s demonstrate with some images:'
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing a join
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Below a visual representation from joining two tables: we take two columns
    from table1 and combine them with one column from table2 using values in related
    columns (table1.Id <-> table2.SomeFk):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bbb67d4be1649baed5f9ca6916131eb6.png)'
  prefs: []
  type: TYPE_IMG
- en: A colorful join (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Think of it this way: using a `JOIN` we “**zip up**” to tables. We make the
    table wider than it was before: we add to it **horizontally**.'
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing a UNION
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let’s check out a `UNION` statement. Notice that the results are pretty
    independent of each other. They have no related columns; we just “**stack” the
    result sets on top of each other**, expanding the table **vertically**. We can
    do this because both queries output the same number of columns and all column
    data types match.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/37783dad67501b68d08ac5ef52fb5f35.png)'
  prefs: []
  type: TYPE_IMG
- en: Union-ing result sets into a single stack of data (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: In this case we use a UNION operator to stack the records on top of each other
    but `INTERSECT` works the same way; only keeping the overlap. In the same way
    `EXCEPT` “subtracts” some records from the “stack”.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/no-need-to-ever-write-sql-again-sqlalchemys-orm-for-absolute-beginners-107be0b3148f?source=post_page-----c7cff3975ff4--------------------------------)
    [## No Need to Ever Write SQL Again: SQLAlchemy’s ORM for Absolute Beginners'
  prefs: []
  type: TYPE_NORMAL
- en: With this ORM you can create a table, insert, read, delete and update data without
    writing a single line of SQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/no-need-to-ever-write-sql-again-sqlalchemys-orm-for-absolute-beginners-107be0b3148f?source=post_page-----c7cff3975ff4--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope to have clarified the workings of these three wonderful operators and
    that you had fun reading this article.
  prefs: []
  type: TYPE_NORMAL
- en: 'I hope this article was as clear as I hope it to be but if this is not the
    case please let me know what I can do to clarify further. In the meantime, check
    out my [other articles](https://mikehuls.com/articles) on all kinds of programming-related
    topics like these:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Git for absolute beginners: understanding Git with the help of a video game](https://mikehuls.medium.com/git-for-absolute-beginners-understanding-git-with-the-help-of-a-video-game-88826054459a)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Create and publish your own Python package](https://mikehuls.medium.com/create-and-publish-your-own-python-package-ea45bee41cdc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Create a fast auto-documented, maintainable, and easy-to-use Python API in
    5 lines of code with FastAPI](https://mikehuls.medium.com/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Happy coding!
  prefs: []
  type: TYPE_NORMAL
- en: — Mike
  prefs: []
  type: TYPE_NORMAL
- en: '*P.S: like what I’m doing?* [*Follow me!*](https://mikehuls.medium.com/membership)'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://mikehuls.medium.com/membership?source=post_page-----c7cff3975ff4--------------------------------)
    [## Join Medium with my referral link - Mike Huls'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Mike Huls (and thousands of other writers on Medium).
    Your membership fee directly supports Mike…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: mikehuls.medium.com](https://mikehuls.medium.com/membership?source=post_page-----c7cff3975ff4--------------------------------)
  prefs: []
  type: TYPE_NORMAL
