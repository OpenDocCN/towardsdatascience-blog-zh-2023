["```py\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport mplcyberpunk\nimport numpy as np\n```", "```py\n# Create a list of categories\ncategories = ['A', 'B', 'C', 'D']\n\n# Create a DataFrame with 4 columns and 4 rows\ndata = {\n    'Category': categories,\n    'Value1': np.random.randint(0, 20, 4),\n    'Value2': np.random.randint(0, 20, 4),\n    'Value3': np.random.randint(0, 20, 4),\n}\n\ndf = pd.DataFrame(data)\n```", "```py\ndf.plot(x='Category', kind='bar', stacked=False, alpha=0.8, figsize=(10,10))\n```", "```py\nwith plt.style.context('cyberpunk'):\n    df.plot(x='Category', kind='bar', stacked=False, alpha=0.8, \n            figsize=(10,10))\n```", "```py\ndf.plot(x='Category', kind='line',\n        lw=3, marker='.', ms=20,\n        figsize=(10,10))\n```", "```py\nwith plt.style.context('cyberpunk'):\n    df.plot(x='Category', kind='line',\n            lw=3, marker='.', ms=20,\n            figsize=(10,10))\n```", "```py\nwith plt.style.context('cyberpunk'):\n    df.plot(x='Category', kind='line',\n            lw=3, marker='.', ms=20,\n            figsize=(10,10))\n    mplcyberpunk.make_lines_glow()\n```", "```py\nwith plt.style.context('cyberpunk'):\n    df.plot(x='Category', kind='line',\n            lw=3, marker='.', ms=20,\n            figsize=(10,10))\n    mplcyberpunk.add_gradient_fill(alpha_gradientglow=0.4)\n```", "```py\nfrom matplotlib.patches import Patch\n\n# Set up the data so that we can close the 'loop' of the area\ncategories = [*categories, categories[0]]\nvalues_1 = [*data['Value1'], data['Value1'][0]]\nvalues_2 = [*data['Value2'], data['Value2'][0]]\nvalues_3 = [*data['Value3'], data['Value3'][0]]\n\n# Set up the label potisions around the circle circumference\nlabel_loc = np.linspace(start=0, stop=2 * np.pi, num=len(categories))\n\n# Set up the figure\nfig, ax = plt.subplots(figsize=(10,10), subplot_kw=dict(polar=True))\n\n# Add our data as separate axes\nax.plot(label_loc, values_1, lw=2)\nax.plot(label_loc, values_2, lw=2)\nax.plot(label_loc, values_3, lw=2)\n\n# Apply a fill to our lines\nax.fill(label_loc, values_1, alpha=0.3)\nax.fill(label_loc, values_2, alpha=0.3)\nax.fill(label_loc, values_3, alpha=0.3)\n\n# Convert the lines and labels to a polar grid\nlines, labels = plt.thetagrids(np.degrees(label_loc), labels=categories)\n\n# Setup the radial lines\nax.set_ylim(0, 20)\nax.set_yticks(np.arange(0, 20, 2))\n\n# Create custom legend handles\nvalues_1_legend = Patch(facecolor='C0', alpha=0.5, label='Values1')\nvalues_2_legend = Patch(facecolor='C1', alpha=0.5, label='Values2')\nvalues_3_legend = Patch(facecolor='C2', alpha=0.5, label='Values3')\n\n# Add a legend with custom position and handles\nax.legend(handles=[values_1_legend, values_2_legend, values_3_legend],\n          bbox_to_anchor=(1.3, 0.2), fontsize=20, \n          frameon=True)\n\nplt.show()\n```", "```py\nwith plt.style.context('cyberpunk'):\n    fig, ax = plt.subplots(figsize=(10,10), subplot_kw=dict(polar=True))\n\n    # Add our data as separate axes\n    ax.plot(label_loc, values_1, lw=2)\n    ax.plot(label_loc, values_2, lw=2)\n    ax.plot(label_loc, values_3, lw=2)\n\n    # Apply a fill to our lines\n    ax.fill(label_loc, values_1, alpha=0.3)\n    ax.fill(label_loc, values_2, alpha=0.3)\n    ax.fill(label_loc, values_3, alpha=0.3)\n\n    # Convert the lines and labels to a polar grid\n    lines, labels = plt.thetagrids(np.degrees(label_loc), labels=categories)\n\n    # Set up the grid and line properties\n    ax.tick_params(axis='both', which='major', pad=30, labelsize=15)\n\n    ax.spines['polar'].set_linewidth(3)\n\n    edge_color = (1, 1, 1, 0.2) \n    ax.spines['polar'].set_color(edge_color) \n\n    ax.grid(color='white', alpha=0.3)\n\n    # Setup the radial lines\n    ax.set_ylim(0, 20)\n    ax.set_yticks(np.arange(0, 20, 2))\n\n    # Create custom legend handles\n    values_1_legend = Patch(facecolor='C0', alpha=0.5, label='Values1')\n    values_2_legend = Patch(facecolor='C1', alpha=0.5, label='Values2')\n    values_3_legend = Patch(facecolor='C2', alpha=0.5, label='Values3')\n\n    # Add a legend with custom position and handles\n    ax.legend(handles=[values_1_legend, values_2_legend, values_3_legend],\n              bbox_to_anchor=(1.3, 0.2), fontsize=20, \n              frameon=True)\n\n    mplcyberpunk.add_glow_effects()\n\n    plt.show()\n```", "```py\nwith plt.style.context('cyberpunk'):\n    fig = plt.figure(figsize=(15, 10))\n\n    ax1 = plt.subplot2grid((2,3), (0,0))\n    ax2 = plt.subplot2grid((2,3), (0,1))\n    ax3 = plt.subplot2grid((2,3), (0,2))\n    ax4 = plt.subplot2grid((2,3), (1,0), colspan=3)\n\n    # Line Plot 1\n    x_data = np.linspace(0, 20, 50)\n    y_data_clean = np.sin(x_data)\n    noise = np.random.normal(0, 2, y_data_clean.shape)\n    y_data_noise = y_data_clean + noise\n\n    ax1.plot(x_data, y_data_noise)\n    ax1.plot(x_data, y_data_clean, lw=2)\n    ax1.set_title('Plot 1', fontsize=14)\n\n    # Scatter Plots\n    ax2.scatter(x=(np.random.randint(0, 20, 100)), y=np.random.randint(0,20, 100))\n    ax2.scatter(x=(np.random.randint(0, 20, 100)), y=np.random.randint(0,20, 100))\n    ax2.set_title('Plot 2', fontsize=14)\n\n    # Bar Chart\n    bar_values = np.array([\"A\", \"B\", \"C\", \"D\"])\n    bar_heights = ([20, 10, 5, 7])\n    bar_heights_2 = ([10, 15, 2, 18])\n    bar_width = 0.35\n\n    bar_pos_1 = np.arange(len(bar_values))\n    bar_pos_2 = [x + bar_width for x in bar_pos_1]\n\n    # Make sure the bars are offset from each other\n    ax3.bar(x=bar_pos_1, height=bar_heights, width=bar_width, label='Group 1')\n    ax3.bar(x=bar_pos_2, height=bar_heights_2, width=bar_width, label='Group 2')\n    ax3.set_xticks([r + bar_width / 2 for r in range(len(bar_heights))])\n    ax3.set_xticklabels(bar_values)\n    ax3.set_title('Plot 3', fontsize=14)\n\n    # Bottom Axis\n    values = np.arange(0, 10, 0.1)\n    sine_wave1 = np.sin(values)\n    sine_wave2 = sine_wave1 * 2\n    sine_wave3 = sine_wave1 + 0.5\n\n    ax4.plot(sine_wave1)\n    ax4.plot(sine_wave2)\n    ax4.plot(sine_wave3)\n    ax4.set_title('Plot 4', fontsize=14)\n\n    mplcyberpunk.make_lines_glow(ax=ax1)\n    mplcyberpunk.make_lines_glow(ax=ax4)\n\n    plt.suptitle('Interesting Inforgraphic Using CyberPunk', fontsize=25)\n    plt.show()\n```"]