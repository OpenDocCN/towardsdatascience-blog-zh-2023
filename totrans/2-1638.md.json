["```py\nimport torch\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom neuralforecast.core import NeuralForecast\nfrom neuralforecast.models import NHITS, NBEATS, PatchTST\n\nfrom neuralforecast.losses.pytorch import MAE\nfrom neuralforecast.losses.numpy import mae, mse\n\nfrom datasetsforecast.long_horizon import LongHorizon\n```", "```py\nY_df, X_df, S_df = LongHorizon.load(directory=\"./data\", group=\"Exchange\")\n```", "```py\nY_df['ds'] = pd.to_datetime(Y_df['ds'])\n\nY_df.head()\n```", "```py\nY_df['unique_id'].value_counts()\n```", "```py\nval_size = 760\ntest_size = 1517\n\nprint(n_time, val_size, test_size)\n```", "```py\nu_id = '0'\n\nx_plot = pd.to_datetime(Y_df[Y_df.unique_id==u_id].ds)\ny_plot = Y_df[Y_df.unique_id==u_id].y.values\n\nx_plot\n\nx_val = x_plot[n_time - val_size - test_size]\nx_test = x_plot[n_time - test_size]\n\nfig, ax = plt.subplots(figsize=(12,8))\nax.plot(x_plot, y_plot)\nax.set_xlabel('Date')\nax.set_ylabel('Exhange rate')\nax.axvline(x_val, color='black', linestyle='--')\nax.axvline(x_test, color='black', linestyle='--')\n\nplt.text(x_val, -2, 'Validation', fontsize=12)\nplt.text(x_test,-2, 'Test', fontsize=12)\n\nplt.tight_layout()\n```", "```py\nhorizon = 96\n\nmodels = [NHITS(h=horizon,\n               input_size=2*horizon,\n               max_steps=50),\n         NBEATS(h=horizon,\n               input_size=2*horizon,\n               max_steps=50),\n         PatchTST(h=horizon,\n                 input_size=2*horizon,\n                 max_steps=50)]\n```", "```py\nnf = NeuralForecast(models=models, freq='D')\n```", "```py\npreds_df = nf.cross_validation(df=Y_df, val_size=val_size, test_size=test_size, n_windows=None)\n```", "```py\ny_true = preds_df['y'].values\ny_pred_nhits = preds_df['NHITS'].values\ny_pred_nbeats = preds_df['NBEATS'].values\ny_pred_patchtst = preds_df['PatchTST'].values\n\nn_series = len(Y_df['unique_id'].unique())\n\ny_true = y_true.reshape(n_series, -1, horizon)\ny_pred_nhits = y_pred_nhits.reshape(n_series, -1, horizon)\ny_pred_nbeats = y_pred_nbeats.reshape(n_series, -1, horizon)\ny_pred_patchtst = y_pred_patchtst.reshape(n_series, -1, horizon)\n```", "```py\nfig, ax = plt.subplots(figsize=(12,8))\n\nax.plot(y_true[0, 0, :], label='True')\nax.plot(y_pred_nhits[0, 0, :], label='N-HiTS', ls='--')\nax.plot(y_pred_nbeats[0, 0, :], label='N-BEATS', ls=':')\nax.plot(y_pred_patchtst[0, 0, :], label='PatchTST', ls='-.')\nax.set_ylabel('Exchange rate')\nax.set_xlabel('Forecast horizon')\nax.legend(loc='best')\n\nplt.tight_layout()\n```", "```py\ndata = {'N-HiTS': [mae(y_pred_nhits, y_true), mse(y_pred_nhits, y_true)],\n       'N-BEATS': [mae(y_pred_nbeats, y_true), mse(y_pred_nbeats, y_true)],\n       'PatchTST': [mae(y_pred_patchtst, y_true), mse(y_pred_patchtst, y_true)]}\n\nmetrics_df = pd.DataFrame(data=data)\nmetrics_df.index = ['mae', 'mse']\n\nmetrics_df.style.highlight_min(color='lightgreen', axis=1)\n```"]