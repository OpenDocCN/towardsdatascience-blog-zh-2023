- en: How To Correctly Perform Cross-Validation For Time Series
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-correctly-perform-cross-validation-for-time-series-b083b869e42c](https://towardsdatascience.com/how-to-correctly-perform-cross-validation-for-time-series-b083b869e42c)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Avoid the common pitfalls in applying cross-validation to time series and forecasting
    models.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@egorhowell?source=post_page-----b083b869e42c--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----b083b869e42c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b083b869e42c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b083b869e42c--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----b083b869e42c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b083b869e42c--------------------------------)
    ·5 min read·Jan 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7f3a6d6bf2bca0dd5fc4e9b0dbb20ffc.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [aceofnet](https://unsplash.com/@aceofnet?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Cross-validation](https://www.youtube.com/watch?v=1rZpbvSI26c&t=29s) is a
    staple process when building any statistical or machine learning model and is
    ubiquitous in data science. However, for the more niche area of [time series analysis](https://en.wikipedia.org/wiki/Time_series)
    and forecasting, it is very easy to *incorrectly* carry out cross-validation.'
  prefs: []
  type: TYPE_NORMAL
- en: In this post, I want to showcase the problem with applying regular cross-validation
    to time series models and common methods to alleviate the issues. We will also
    go through an example of using cross-validation for [*hyperparameter tuning*](/optimise-your-hyperparameter-tuning-with-hyperopt-861573239eb5)for
    a time series model in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Supplemental Video.
  prefs: []
  type: TYPE_NORMAL
- en: What Is Cross-Validation?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cross-validation is a method to determine the best performing model and parameters
    through training and testing the model on different portions of the data. The
    most common and basic approach is the classic *train-test split*. This is where
    we split our data into a *training set* that is used to fit our model and then
    evaluated it on the *test set.*
  prefs: []
  type: TYPE_NORMAL
- en: This idea can be taken one step further by carrying out the *train-test split*
    numerous times by varying the data we train and test on. This process is **cross-validation**
    as we are using every row of data for both training and evaluation to ensure we
    choose the most robust model over all the possible available data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below is a visualisation of cross-validation using the `kfold` sklearn function,
    where we set `n_splits=5`, on the US airline passenger volumes dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: Data [from Kaggle](https://www.kaggle.com/datasets/ashfakyeafi/air-passenger-data-for-time-series-analysis)
    with a CC0 licence.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c2524728672d67047f5fc34d8ccdc664.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the data has been split ***5*** times where each split contains
    a new *training* and *testing* dataset to build and evaluate our model upon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: A different approach would be to split into training and test sets, then
    further split the training set into more training and validation sets. You can
    then carry out cross validation with the various training and validation sets
    and get the final model performance on the test set. This is what would happen
    in practise for most machine learning models.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Time Series Cross Validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The above cross-validation is not an effective or valid strategy on forecasting
    models due to their temporal dependency. For time series, we always predict into
    the future. However, in the above approach we will be **training on data that
    is further in time than the evaluation test data**. This is *data leakage* and
    should be avoided at all costs.
  prefs: []
  type: TYPE_NORMAL
- en: To overcome this quandary, we need to ensure the **test set always has a higher
    index (the index is usually time for time series data) than the training set.**
    This means our test is always in the future compared to the data our model is
    fitted on.
  prefs: []
  type: TYPE_NORMAL
- en: 'A depiction of this new cross-validation approach for time series is shown
    below using the `TimeSeriesSplit` sklearn function and our `plot_cross_val` function
    that we wrote above:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/57fbecd56d18813b7e617f1dc08d34da.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: The test sets are now always more forward in time than the training sets, therefore
    avoiding any data leakage when building our model.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperparameter Tuning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cross-validation is frequently used in collaboration with hyperparameter tuning
    to determine the optimal hyperparameter values for a model. Let’s quickly go over
    an example of this process, for a forecasting model, in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'First plot the data:'
  prefs: []
  type: TYPE_NORMAL
- en: Data [from Kaggle](https://www.kaggle.com/datasets/ashfakyeafi/air-passenger-data-for-time-series-analysis)
    with a CC0 licence.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3af53709f3c5cce46b20cce879d99ab0.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data has a [**clear trend**](https://medium.com/towards-data-science/time-series-stationarity-simply-explained-125269968154)
    and [**high seasonality**](https://medium.com/towards-data-science/seasonality-of-time-series-5b45b4809acd).
    A suitable model for this time series would be the [*Holt Winters exponential
    smoothing*](https://en.wikipedia.org/wiki/Exponential_smoothing#Triple_exponential_smoothing_(Holt_Winters))
    model that incorporates both trend and seasonality components. If you want to
    learn more about the Holt Winters model, check out my previous post on it here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/time-series-forecasting-with-holt-winters-b78ffc322f24?source=post_page-----b083b869e42c--------------------------------)
    [## Time Series Forecasting with Holt Winters’'
  prefs: []
  type: TYPE_NORMAL
- en: A discussion and implementation of the most powerful and useful exponential
    smoothing model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/time-series-forecasting-with-holt-winters-b78ffc322f24?source=post_page-----b083b869e42c--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code snippet, we tune the seasonal smoothing factor, `smoothing_seasonal`,
    using [*grid search*](https://www.yourdatateacher.com/2021/05/19/hyperparameter-tuning-grid-search-and-random-search/)
    and cross-validation and plot the results:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b6d848328293bb7085646c64d6e5b089.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, it appears the optimal value of the `smoothing_seasonal` hyperparameter
    is **0.8.**
  prefs: []
  type: TYPE_NORMAL
- en: In this case we manually carried out grid search cross validation, but many
    packages can do this for you.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you want to learn more about the hyperparameter tuning domain, checkout
    my previous article on using [*Bayesian Optimization*](https://en.wikipedia.org/wiki/Bayesian_optimization)
    through the *Hyperopt* package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/optimise-your-hyperparameter-tuning-with-hyperopt-861573239eb5?source=post_page-----b083b869e42c--------------------------------)
    [## Hyperopt Tutorial: Optimise Your Hyperparameter Tuning'
  prefs: []
  type: TYPE_NORMAL
- en: A simple explanation and implementation of Bayesian Hyperparameter tuning using
    Hyperopt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/optimise-your-hyperparameter-tuning-with-hyperopt-861573239eb5?source=post_page-----b083b869e42c--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Summary and Further Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this post we have shown how you can’t just use regular cross-validation on
    you time series model due to the temporal dependency that causes data leakage.
    Therefore, when carrying out cross-validation for forecasting models, you must
    ensure that your test set is **always** further in time than the training set.
    This is easily done and many packages also provide functions that help with this
    approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code in the gists can often be hard to follow due to the flow of the article,
    therefore I recommend checking out the full code at my GitHub here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/egorhowell/Medium-Articles/blob/main/Time%20Series/Time%20Series%20Tools/cross_validation.py?source=post_page-----b083b869e42c--------------------------------)
    [## Medium-Articles/cross_validation.py at main · egorhowell/Medium-Articles'
  prefs: []
  type: TYPE_NORMAL
- en: Code I use in my medium blog/articles. Contribute to egorhowell/Medium-Articles
    development by creating an account on…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/egorhowell/Medium-Articles/blob/main/Time%20Series/Time%20Series%20Tools/cross_validation.py?source=post_page-----b083b869e42c--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Another Thing!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----b083b869e42c--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  prefs: []
  type: TYPE_NORMAL
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----b083b869e42c--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Connect With Me!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**YouTube**](https://www.youtube.com/@egorhowell?sub_confirmation=1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**GitHub**](https://github.com/egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References and Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Forecasting: Principles and Practice:* [https://otexts.com/fpp2/](https://otexts.com/fpp3/holt-winters.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Cross-validation_(statistics)](https://en.wikipedia.org/wiki/Cross-validation_(statistics))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Hyperparameter_optimization](https://en.wikipedia.org/wiki/Hyperparameter_optimization)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/hyperopt/hyperopt](https://github.com/hyperopt/hyperopt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
