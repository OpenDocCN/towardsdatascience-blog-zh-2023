["```py\nprotoc --decode=transit_realtime.FeedMessage *.proto < vehiclePositions.pb\n```", "```py\nheader {\n  gtfs_realtime_version: \"1.0\"\n  incrementality: FULL_DATASET\n  timestamp: 1672668285\n  1000 {\n    1: 1193795\n    2: 60\n  }\n}\nentity {\n  id: \"2023-01-02:QBUZZ:g309:8149\"\n  vehicle {\n    trip {\n      trip_id: \"161300003\"\n      start_time: \"14:38:00\"\n      start_date: \"20230102\"\n      schedule_relationship: SCHEDULED\n      route_id: \"2626\"\n      direction_id: 0\n      [transit_realtime.ovapi_tripdescriptor] {\n        realtime_trip_id: \"QBUZZ:g309:8149\"\n      }\n    }\n    position {\n      latitude: 53.1998672\n      longitude: 6.56498432\n    }\n    current_stop_sequence: 7\n    current_status: IN_TRANSIT_TO\n    timestamp: 1672668264\n    stop_id: \"2464829\"\n    vehicle {\n      label: \"7602\"\n    }\n    [transit_realtime.ovapi_vehicle_position] {\n      delay: 38\n    }\n  }\n}\n...\n```", "```py\npython                        3.8.5\nprotobuf                      3.20.1\nprotobuf3-to-dict             0.1.5\ngtfs-realtime-bindings        0.0.7\n```", "```py\npip install protobuf==3.20.1 \\\n            gtfs-realtime-bindings=0.0.7 \\\n            protobuf3-to-dict==0.1.5 \\\n            requests simplejson pandas geopandas folium urllib3 libprotobuf\n```", "```py\nprotoc --python_out=. *.proto\n```", "```py\nconda install protobuf\nipython kernel install --user\n```", "```py\nsudo apt install python3-protobuf\n```", "```py\nimport requests\nimport gtfs_realtime_OVapi_pb2  # Required for finding additional fields\nimport gtfs_realtime_pb2\nfrom protobuf_to_dict import protobuf_to_dict\n\nfeed = gtfs_realtime_pb2.FeedMessage()\n\nresponse = requests.get('https://gtfs.ovapi.nl/nl/vehiclePositions.pb', \n                        allow_redirects=True)\nfeed.ParseFromString(response.content)\nvehiclePositions = protobuf_to_dict(feed)\nprint(\"Vehicle positions : {}\".format(len(vehiclePositions['entity'])))\n\nresponse = requests.get('https://gtfs.ovapi.nl/nl/trainUpdates.pb', \n                        allow_redirects=True)\nfeed.ParseFromString(response.content)\ntrainUpdates = protobuf_to_dict(feed)\nprint(\"Train updates     : {}\".format(len(trainUpdates['entity'])))\n\nresponse = requests.get('https://gtfs.ovapi.nl/nl/tripUpdates.pb', \n                        allow_redirects=True)\nfeed.ParseFromString(response.content)\ntripUpdates = protobuf_to_dict(feed)\nprint(\"Trip updates      : {}\".format(len(tripUpdates['entity'])))\n\nresponse = requests.get('https://gtfs.ovapi.nl/nl/alerts.pb', \n                        allow_redirects=True)\nfeed.ParseFromString(response.content)\nalerts = protobuf_to_dict(feed)\nprint(\"Alerts            : {}\".format(len(alerts['entity'])))\n```", "```py\n{\n    \"header\": {\n        \"...\": \"...\",\n    },\n    \"entity\": [\n        {\n            \"A\": \"A1\",\n            \"B\": \"B1\",\n            \"C\": [\n                {\"C_A\": \"CA1\"},\n                {\"C_A\": \"CA2 \"}\n            ]\n         },\n         {\n            \"A\": \"A2\",\n            \"B\": \"B2\",\n            \"C\": [\n                {\"C_A\": \"CA3\"},\n                {\"C_A\": \"CA4 \"}\n            ]\n         },\n    ]\n}\n```", "```py\n A |    B | C_A |\n -------------------\n   A1 |  B1  | CA1 |\n   A1 |  B1  | CA2 |\n   A2 |  B2  | CA3 |\n   A2 |  B2  | CA4 | \n```", "```py\n{\n    \"header\": {\n        \"gtfs_realtime_version\": \"1.0\",\n        \"incrementality\": 0,\n        \"timestamp\": 1672851585,\n    },\n    \"enity\": [\n        {\n            \"id\": \"KV15:RET:2015-05-12:53\",\n            \"alert\": {\n                \"active_period\": [{\"start\": 1431470580, \"end\": 1704048875}],\n                \"informed_entity\": [{\"stop_id\": \"1541226\"}],\n                \"cause\": 1,\n                \"effect\": 7,\n                \"header_text\": {\n                    \"translation\": [\n                        {\n                            \"text\": \"Rotterdam Airport: bus 33 richting Meijersplein - bus 33 direction Meijersplein.\",\n                            \"language\": \"nl\",\n                        }\n                    ]\n                },\n                \"description_text\": {\n                    \"translation\": [\n                        {\n                            \"text\": \"Oorzaak : onbekend \\nRotterdam Airport: bus 33 richting Meijersplein - bus 33 direction Meijersplein.\\n\",\n                            \"language\": \"nl\",\n                        }\n                    ]\n                },\n            },\n        }\n    ],\n}\n```", "```py\ndef convert_times(df, columns):\n    for c in columns:\n        df[c] = pd.to_datetime(df[c], unit='s', utc=True). \\\n                        map(lambda x: x.tz_convert('Europe/Amsterdam'))\n        df[c] = df[c].apply(lambda x: x.replace(tzinfo=None))\n    return df\n```", "```py\nupdates=[]\ntimestamp = alerts['header']['timestamp']\ncauses = {0: 'UNKNOWN_CAUSE', ...}\neffects = ...}\nfor al in alerts['entity'] :\n    aid = al['id']\n    alert = al['alert']\n    cause = int(alert['cause']) if 'cause' in alert else 0\n    effect = int(alert['effect']) if 'effect' in alert else -1\n    header_text = alert['header_text']['translation'][0]['text']\n    description_text = alert['description_text']['translation'][0]['text']\n    for ap in alert['active_period']:\n        start = ap['start']\n        end = ap['end']\n        updates.append({'id': aid, 'timestamp': timestamp, \n                       'cause': causes[cause], 'effect': effects[effect], \n                       'start': start, 'end': end, \n                       'header': header_text, 'description': description_text})\ndf_alerts = pd.DataFrame(updates)\ndf_alerts = convert_times(df_alerts, ['timestamp', 'period_start', \n                                     'period_end'])\n```", "```py\nroutemapping = []\nstopmapping = []\n...\n    for ap in alert['active_period']:\n        start = ap['start']\n        end = ap['end']\n        if 'informed_entity' in alert:\n            for inf in alert['informed_entity']:\n                informed_stop = inf['stop_id']\n                stopmapping.append({'alert_id': aid, 'stop_id': informed_stop,\n                                    'start': start, 'end': end})\n                if 'route_id' in inf:\n                    informed_route = inf['route_id']\n                    routemapping.append({'alert_id': aid, \n                                         'route_id': informed_route, \n                                         'start': start, 'end': end})\n        update.append(.....\n\ndf_alerts_to_stops = pd.DataFrame(stopmapping)\ndf_alerts_to_stops = convert_times(df_alerts_to_stops, ['start', 'end'])\ndf_alerts_to_routes = pd.DataFrame(routemapping)\ndf_alerts_to_routes = convert_times(df_alerts_to_routes, ['start', 'end'])\n```", "```py\ndef businessday_to_datetime(date: str, time: str):\n    try:\n        res = datetime.strptime(date, '%Y%m%d')\n        hr = int(time[:2])\n        if hr >= 24:\n            res = res + timedelta(days = 1)\n            hr -= 24\n        res = res + timedelta(hours=hr, minutes=int(time[3:5]), \n                              seconds=int(time[6:8]))\n        return res\n    except:\n        return None\n```", "```py\n[transit_realtime.ovapi_tripdescriptor] {\n        realtime_trip_id: \"ARR:26004:1125\"\n      }\n```", "```py\n'___X': {'1003': {'realtime_trip_id': 'KEOLIS:4062:40462'}}},\n```", "```py\nrtid_keys  = ['___X','1003']\nupdates=[]\ntimestamp = tripUpdates['header']['timestamp']\nfor tu in tripUpdates['entity']:\n#     print(tu)\n    uid = tu['id']\n    trip_update = tu['trip_update']\n    vehicle = trip_update['vehicle']['label'] if 'vehicle' in trip_update \\\n                                              else None\n    trip = trip_update['trip']\n    trip_id = trip['trip_id']\n    start_time = trip['start_time'] if 'start_time' in trip else None\n    start_date = trip['start_date']\n    start_time = businessday_to_datetime(start_date, start_time)\n    route_id = trip['route_id']\n    direction_id = int(trip['direction_id']) if 'direction_id' in trip \\\n                                             else None\n    rt_id = trip[rtid_keys[0]][rtid_keys[1]]['realtime_trip_id'] \\\n                   if rtid_keys[0] in trip else None\n    for stu in trip_update['stop_time_update'] \\\n               if 'stop_time_update' in trip_update else []:\n        stop_sequence = stu['stop_sequence']\n        if 'arrival' in stu:\n            arr = stu['arrival']\n            arrival_time = arr['time'] if 'time' in arr else None\n            arrival_delay = arr['delay'] if 'delay' in arr else None\n        else:\n            arrival_time = None\n            arrival_delay = None\n        if 'departure' in stu:\n            dep = stu['departure']\n            departure_time = dep['time'] if 'time' in dep else None\n            departure_delay = dep['delay'] if 'delay' in dep else None\n        else:\n            departure_time = None\n            departure_delay = None\n        updates.append({'id': uid, 'RT_id': rt_id, 'trip_id': trip_id, \n                        'start_time': start_time, 'route_id': route_id, \n                        'direction_id': direction_id, 'vehicle': vehicle,\n                        'stop_sequence': stop_sequence,\n                        'arrival_time': arrival_time, \n                        'arrival_delay': arrival_delay,\n                        'departure_time': arrival_time, \n                        'departure_delay': departure_delay,\n                        'timestamp': timestamp})     \ndf_trip_updates = pd.DataFrame(updates)\ndf_trip_updates = convert_times(df_trip_updates, ['departure_time', \n                                                  'arrival_time', 'timestamp'])\ndf_trip_updates.head(2)\n```", "```py\npd.DataFrame([{'a': 1, 'b': 2, 'c': 'c1'}, \n              {'a': 11, 'b': 12, 'c': 'c2'}\n             ])\n```", "```py\npd.DataFrame({'a': [1, 11], \n              'b': [2, 22],\n              'c': ['c1', 'c2']}\n            )\n```", "```py\nfrom GTFS import GTFS\n\ngtfs = GTFS()\ngtfs.update_static()\ngtfs.update_realtime(5)\n```", "```py\nclass GTFS:\n    stops = ...\n    routes = ...\n    trips = ...\n    calendar = ...\n    stoptimes = ...\n    trip_updates =...\n    train_updates = ...\n    vehicle_positions = ...\n    alerts = ...\n    alerts_to_routes = ...\n    alerts_to_stops = ...\n```", "```py\nfrom folium import plugins\n\nheat_data = [[point.xy[1][0], point.xy[0][0]] for point in gtfs.stops.geometry]\n\nmap = folium.Map(location=[52.0, 5.1], zoom_start=8, \n                 width=1000, height=1500, tiles=\"Cartodb dark_matter\")\nplugins.HeatMap(heat_data, radius=3, blur=1).add_to(map)\nmap\n```", "```py\nbbox=((4.99, 52.05), (5.26, 52.15)) # Utrecht\n\ngdf_veh = gtfs.vehicle_positions.cx[bbox[0][0]:bbox[1][0], bbox[0][1]:bbox[1][1]] \ngdf_halte = gtfs.stops.cx[bbox[0][0]:bbox[1][0], bbox[0][1]:bbox[1][1]] \n\nmap = folium.Map(location=[(bbox[0][1] + bbox[1][1])/2, \n                           (bbox[0][0] + bbox[1][0])/2], \n                 zoom_start=12)\n\nfor _, h in gdf_halte.iterrows():\n    marker = folium.CircleMarker(location=[h[\"stop_lat\"], h[\"stop_lon\"]], \n                                 popup=veh[\"stop_name\"],\n                                 radius=1, color='blue')\n    map.add_child(marker)\nfor _, v in gdf_veh.iterrows():\n    marker = folium.CircleMarker(location=[v[\"latitude\"], v[\"longitude\"]], \n                                 popup=veh['route_short_name'] + \" to \" + \\\n                                       veh['trip_headsign'],\n                                 radius=5, color='red')\n    map.add_child(marker)\n\nmap_osm\n```"]