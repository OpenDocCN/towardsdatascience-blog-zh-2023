["```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.ensemble import HistGradientBoostingRegressor\n\ndf = pd.read_csv('data/medium_views_published_holidays.csv')\ndf = df.drop(['unique_id'], axis=1)\n\ndf.head()\n```", "```py\ndf['ds'] = pd.to_datetime(df['ds'])\n\n# Extract year, month and day\ndf['year'] = df['ds'].dt.year\ndf['month'] = df['ds'].dt.month\ndf['day'] = df['ds'].dt.day\n\n# Add a flag for weekend days\ndf['is_weekend'] = (df['ds'].dt.dayofweek >= 5).astype(int)\n\n# Add lagged values for the past 7 days\nfor day in range(1, 8):\n    df[f'lag_{day}'] = df['y'].shift(day)\n\n# Assign the date to the index\ndf.index = df['ds']\ndf = df.drop(['ds'], axis=1)\n\ndf.head()\n```", "```py\ntest_size = 4 * 28\n\nX_cols = df.columns.drop(['y'])\n\nsplit_date = df.index[-test_size]\n\nX_train = df[df.index < split_date][X_cols]\ny_train = df[df.index < split_date]['y']\n\nX_test = df[df.index >= split_date][X_cols]\ny_test = df[df.index >= split_date]['y']\n\nprint(X_train.shape, y_train.shape, X_test.shape, y_test.shape)\n```", "```py\nfig, ax = plt.subplots(figsize=(14, 8))\n\nax.plot(y_train)\nax.plot(y_test)\nax.set_xlabel('Date')\nax.set_ylabel('Views')\n\nplt.tight_layout()\n```", "```py\nfrom sklearn.model_selection import RandomizedSearchCV, TimeSeriesSplit\n\nhgbr = HistGradientBoostingRegressor(random_state=42)\n\nparams = {\n    \"learning_rate\":  [\"squared_error\", \"absolute_error\", \"gamma\"],\n    \"learning_rate\": [0.1, 0.05, 0.001],\n    \"max_iter\": [100, 150, 200],\n    \"min_samples_leaf\": [1, 2, 3],\n}\n\nrand_search_cv = RandomizedSearchCV(\n    hgbr,\n    param_distributions=params,\n    cv=TimeSeriesSplit(n_splits=5),\n    scoring=\"neg_root_mean_squared_error\",\n    random_state=42,\n    n_jobs=-1\n)\n\nrand_search_cv.fit(X_train, y_train)\n\nmodel = rand_search_cv.best_estimator_\n```", "```py\nfrom mapie.metrics import regression_coverage_score, regression_mean_width_score\nfrom mapie.subsample import BlockBootstrap\nfrom mapie.regression import MapieTimeSeriesRegressor\n```", "```py\n# For a 95% confidence interval, use alpha=0.05\nalpha = 0.05\n\n# Set the horizon to 1\nh = 1\n\ncv_mapie_ts = BlockBootstrap(\n    n_resamplings=9,\n    n_blocks=9,\n    overlapping=False,\n    random_state=42\n)\n\nmapie_enbpi = MapieTimeSeriesRegressor(\n    model,\n    method='enbpi',\n    cv=cv_mapie_ts,\n    agg_function='mean',\n    n_jobs=-1\n)\n```", "```py\nmapie_enbpi = mapie_enbpi.fit(X_train, y_train)\n\ny_pred, y_pred_int = mapie_enbpi.predict(\n    X_test,\n    alpha=alpha,\n    ensemble=True,\n    optimize_beta=True\n)\n```", "```py\nfig, ax = plt.subplots(figsize=(14, 8))\n\nax.plot(y_test, label='Actual')\nax.plot(y_test.index, y_pred, label='Predicted', ls='--')\nax.fill_between(\n    y_test.index,\n    y_pred_int[:, 0, 0],\n    y_pred_int[:, 1, 0],\n    color='green',\n    alpha=0.2\n)\nax.set_xlabel('Date')\nax.set_ylabel('Views')\nax.legend(loc='best')\n\nplt.tight_layout()\n```", "```py\ncoverage = regression_coverage_score(\n    y_test, y_pred_int[:, 0, 0], y_pred_int[:, 1, 0]\n)\nwidth_interval = regression_mean_width_score(\n    y_pred_int[:, 0, 0], y_pred_int[:, 1, 0]\n)\n```", "```py\ny_pred_pfit = np.zeros(y_pred.shape)\ny_pred_int_pfit = np.zeros(y_pred_int.shape)\n\ny_pred_pfit[:h], y_pred_int_pfit[:h, :, :] = mapie_enbpi.predict(X_test.iloc[:h, :],\n                                                                 alpha=alpha,\n                                                                 ensemble=True,\n                                                                 optimize_beta=True)\n\nfor step in range(h, len(X_test), h):\n    mapie_enbpi.partial_fit(X_test.iloc[(step-h): step, :],\n                             y_test.iloc[(step-h):step])\n\n    y_pred_pfit[step:step + h], y_pred_int_pfit[step:step + h, :, :] = mapie_enbpi.predict(X_test.iloc[step:(step+h), :],\n                                                                                           alpha=alpha,\n                                                                                           ensemble=True,\n                                                                                           optimize_beta=True)\n```", "```py\nfig, ax = plt.subplots(figsize=(14, 8))\n\nax.plot(y_test, label='Actual')\nax.plot(y_test.index, y_pred_pfit, label='Predicted', ls='--')\nax.fill_between(\n    y_test.index,\n    y_pred_int_pfit[:, 0, 0],\n    y_pred_int_pfit[:, 1, 0],\n    color='green',\n    alpha=0.2\n)\nax.set_xlabel('Date')\nax.set_ylabel('Views')\nax.legend(loc='best')\n\nplt.tight_layout()\n```", "```py\ncoverage_pfit = regression_coverage_score(\n    y_test, y_pred_int_pfit[:, 0, 0], y_pred_int_pfit[:, 1, 0]\n)\nwidth_interval_pfit = regression_mean_width_score(\n    y_pred_int_pfit[:, 0, 0], y_pred_int_pfit[:, 1, 0]\n)\n```"]