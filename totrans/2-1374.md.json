["```py\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\n\ndf = pd.read_csv('data.csv')\nX_train, X_test, y_train, y_test = train_test_split(df.drop('target'),\n                                                    df['target'],\n                                                    random_state=42)\n\nmodel = DecisionTreeRegressor()\ngridsearch = GridSearchCV(model, \n                          param_grid={'max_depth': [None, 2, 50]},\n                          scoring='mean_absolute_error')\n\ngridsearch.fit(X_train, y_train)\ngridsearch.train(X_train, y_train)\n\n# get the results. This code outputs the tables we'll see in the article\nresults = pd.DataFrame(gridsearch.cv_results_)\n\n# what many data scientists do, while they shouldn't without analyzing first\nY_pred = gridsearch.best_estimator_.predict(X_test) \n```", "```py\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier()\nparam_grid = {...}\n\ngridsearch = GridSearchCV(model, \n                          param_grid, \n                          scoring=\"mean_absolute_error\", \n                          return_train_score=True)\n```"]