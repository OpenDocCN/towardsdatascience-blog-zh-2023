- en: You’ve Hit a Wall in Your Data Project, Now What?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/youve-hit-a-wall-in-your-data-project-now-what-6d206082e182](https://towardsdatascience.com/youve-hit-a-wall-in-your-data-project-now-what-6d206082e182)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Consider these approaches to common development obstacles in data analytics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@mattgazzano?source=post_page-----6d206082e182--------------------------------)[![Matthew
    Gazzano](../Images/23f154b154d05847c2c13ea17ceb7a57.png)](https://medium.com/@mattgazzano?source=post_page-----6d206082e182--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6d206082e182--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6d206082e182--------------------------------)
    [Matthew Gazzano](https://medium.com/@mattgazzano?source=post_page-----6d206082e182--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6d206082e182--------------------------------)
    ·6 min read·Oct 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f5086177c5e7b48325083f0f1cfffe36.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Photo](https://unsplash.com/photos/4-EeTnaC1S4) by [Wes Hicks](https://unsplash.com/@sickhews)
    on [Unsplash](https://unsplash.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve all encountered this familiar scenario: you’re in the midst of developing
    an SQL query, constructing a data pipeline, or building a predictive model. You’re
    coming to what you believe is the final outputted dataset, and once you execute
    the code, it''s not what you intended. Maybe you''re returning an abnormal number
    of records, a field isn''t populating correctly, or your model is producing unexpected
    results.'
  prefs: []
  type: TYPE_NORMAL
- en: You know that something is wrong, but there is no error message or clear indication
    in your code as to what is causing the problem. *How do you approach solving this?*
  prefs: []
  type: TYPE_NORMAL
- en: From my experience working in various analytics roles for the last 6+ years,
    I can attest that you will continually hit walls with new development problems.
    However, there are effective strategies I’ve adopted to navigate these obstacles
    and emerge as a more resilient professional. In the following sections, I will
    share some of the techniques that have proven most successful for me.
  prefs: []
  type: TYPE_NORMAL
- en: '***“Have You Tried Turning it off and on again?“***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I'm not referring to turning off your computer — but rather, resetting *your
    brain*. In other words, try stepping away from your desk for a few minutes.
  prefs: []
  type: TYPE_NORMAL
- en: As silly as this sounds, you wouldn't believe how often it has helped me. Sometimes,
    solutions or new approaches to problems will naturally come to me by simply taking
    a walk. When we are looking at the same problem for too long, it is easy to get
    tunnel vision on the particular part of the project that is giving us an issue
    and forget to focus on the bigger picture.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you may be having an issue to get a python function to output a
    data point correctly. But more importantly, maybe you’ve lost focus on why you
    needed the function in the first place, its dependencies, and the other data its
    intended to interact with. Sometimes this is the best way to get back on track
    to solving the problem.
  prefs: []
  type: TYPE_NORMAL
- en: Reframe Your Assumptions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In my personal experience, most of the road-blocks I have hit in my career have
    been sourced from making incorrect assumptions about the data or code I'm working
    with.
  prefs: []
  type: TYPE_NORMAL
- en: In one role, I was tasked with replicating a dashboard metric from another data
    analyst who resigned. I had access to the old SQL as well as the Power BI workbook
    that was used to create these metrics. I replicated the business logic in what
    appeared to be an identical way, but when I output my results, they were off by
    about 5%. I spent considerable time to thoroughly review my code for syntax accuracy,
    field calls, and unintended data filtering in my joins. But none of these approaches
    seemed to be working. After a more thorough review, it turns out that we were
    both filtering on a field named ***customer_active*** but from different source
    tables, and on the backend both of these fields were calculated differently.
  prefs: []
  type: TYPE_NORMAL
- en: The root cause of my roadblock above was that I made an assumption about the
    field I was calling. While I had queried the data correctly with what I thought
    the field meant, my incorrect assumption about the data was ultimately the cause
    of this 5% delta between our two metrics. In retrospect, it would have been a
    better approach to work backwards towards the source tables to understand where
    the differences were happening.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally speaking, try and think through the following when you are in this
    stage:'
  prefs: []
  type: TYPE_NORMAL
- en: '***What is the grain of the data I am working with?*** meaning, what is each
    row supposed to represent? For example, maybe you’re working with a customer table
    that is snapshotted every day — the grain of the table is by customer and date.
    Ensure that the intended grain of the table is actually what is being output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Is the code I''m reviewing representing the full picture?*** As in, do you
    need to understand if data is incorrect somewhere upstream? Could there be a pipeline
    / ingestion issue?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Do I truly understand the context of x table as it relates to the business?***
    Ensure that you understand how the relevant data is sourced from both a systems
    and process perspective. Work with an SME if this is unclear.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Isolate individual segments of your code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When working with SQL, my favorite way to do this is to place segments of code
    into common table expressions and query each one separately. This is a format
    that I first discovered from using DBT, and you can read more about it on [their
    documentation](https://docs.getdbt.com/guides/best-practices/how-we-style/2-how-we-style-our-sql#:~:text=%F0%9F%94%9A%20The%20last%20line%20of%20a%20model%20should%20be%20a%20select%20*%20from%20your%20final%20output%20CTE.%20This%20makes%20it%20easy%20to%20materialize%20and%20audit%20the%20output%20from%20different%20steps%20in%20the%20model%20as%20you''re%20developing%20it.%20You%20just%20change%20the%20CTE%20referenced%20in%20the%20select%20statement%20to%20see%20the%20output%20from%20that%20step.).
    See an example like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You might think that the SELECT * FROM main at the end might seem unnecessary,
    but I can assure you that this structure will allow you to troubleshoot segments
    of code easier. In this last line, we can query individual CTEs for their output
    to see what is going wrong on each one. This technique has proven very effective
    for me especially when a query output returns 0 records unintentionally. Here,
    I can determine which CTE is the root cause of filtering out all of my records
    by changing the last word “main” to a different CTE name.
  prefs: []
  type: TYPE_NORMAL
- en: It's a common misconception that CTEs take a toll on query optimization — that
    really isn't true (at least enough to make a noticeable difference) especially
    if you're working with a modern cloud data warehouse provider.
  prefs: []
  type: TYPE_NORMAL
- en: Isolate one example record
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With this technique, we want to look at one example record in its source system,
    the source database table, and in the output of your code. From this, we can determine
    A.) if there are any data pipeline issues from the source system to your database
    and B.) how the logic that you have applied is affecting this one record. By isolating
    one, we can more clearly understand how individual inputs flow through the code
    we have developed. In this stage, we can evaluate the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Is this record flowing through my code as intended?***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***If it is not, what about this record is different than other records that
    may be behaving correctly?***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By combining this with the technique I mentioned above, you can also isolate
    an individual record in individual parts of your code. For example, with the use
    of CTEs as defined above, see how a particular record is being output through
    each segment of the code. Here, you should be able to pinpoint what section of
    the code is incorrectly manipulating the record.
  prefs: []
  type: TYPE_NORMAL
- en: Stop Guessing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to have a holistic view of the problem statement you are working on.
    When I have been in scenarios where my dashboard is failing to populate correctly,
    it can be easy to get into a habit of making a minor tweak (changing a filter
    clause or similar), refreshing the dashboard and hoping for the best. This is
    no better than a roll of the dice, and is not how you will effectively solve multi
    layered problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deconstruct and reframe the problem statement. Ask yourself the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '***What are the business questions you''re trying to answer?***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***What data is available to answer this? What does each relevant table of
    data represent?*** Have a clear guideline on what data is required and available
    to deliver the Minimum Viable Product.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***What transformations need to take place in order to build a BI Layer on
    top of the source data?***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***What are the nuances to the data sources / data pipelines that I am working
    with?***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Data quality — Where do nulls exist? Are there any concerns on latency of
    data?***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you can't answer these questions, its okay to reach out to team members or
    SMEs on the data for help. Your familiarity with the data is crucial towards providing
    a valuable solution, so it's important to take the necessary time to understand
    more business context if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regardless of seniority level, you will continue to hit roadblocks in your development.
    Sometimes, you need to forget everything you already know about the problem and
    approach it with a blank slate. When you find yourself facing unexpected results
    or roadblocks, it’s essential to adopt a systematic approach to overcome these
    challenges and keep a calm mind.
  prefs: []
  type: TYPE_NORMAL
- en: In any data project, hitting a roadblock is not a sign of failure but an opportunity
    for growth. By applying these strategies and maintaining a holistic view of your
    project, you can enhance your problem-solving skills and ultimately achieve more
    reliable and efficient results. So, the next time you're struggling with a data
    project, remember to embrace these techniques, reset your perspective, and know
    that each challenge is a step closer toward becoming a stronger data professional.
  prefs: []
  type: TYPE_NORMAL
