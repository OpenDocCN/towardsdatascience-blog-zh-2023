- en: 'The Magic of Quantum Computing: A Beginner’s Guide to Writing a Magic Number
    Guessing Game'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/the-magic-of-quantum-computing-a-beginners-guide-to-writing-a-magic-number-guessing-game-c1cdb384f457](https://towardsdatascience.com/the-magic-of-quantum-computing-a-beginners-guide-to-writing-a-magic-number-guessing-game-c1cdb384f457)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Tutorial
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Programming a quantum computer is fun!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@KoryBecker?source=post_page-----c1cdb384f457--------------------------------)[![Kory
    Becker](../Images/53a2493fe53f215d3e715d456b36c553.png)](https://medium.com/@KoryBecker?source=post_page-----c1cdb384f457--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c1cdb384f457--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c1cdb384f457--------------------------------)
    [Kory Becker](https://medium.com/@KoryBecker?source=post_page-----c1cdb384f457--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c1cdb384f457--------------------------------)
    ·9 min read·Feb 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6931c4891a0299efe800b4c0f900ef11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [Stable Diffusion](https://stablediffusionweb.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: From Classical to Quantum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I’m not sure exactly what it is about quantum computing that brings such a sense
    of amazement and intrigue, but it definitely feels refreshingly different than
    programming a classical computer. The field of quantum computing is still young
    and filled with potential, opening the door to many possibilities for individuals,
    *just like you*, to make an impact.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve often found that one of the best ways to learn about a technology is through
    games. What better way to learn about quantum computing than to write your own
    game?
  prefs: []
  type: TYPE_NORMAL
- en: The Design of a Simple Game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re going to use Python and the open-source quantum computing library called
    Qiskit, to write a Magic Number Guessing game.
  prefs: []
  type: TYPE_NORMAL
- en: Our game is very simple, but will be powered by the properties of quantum computing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our game will have the following design:'
  prefs: []
  type: TYPE_NORMAL
- en: The quantum computer will generate a random number from 0 to 15.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The player will have to guess the number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At each round, we’ll tell the player if they are too low or too high.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What a fantastic way to get started with quantum computing programming!
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: The Fun of Quantum Computing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, when we think about quantum computing, one of the first topics that come
    to mind is the idea of bits being represented simultaneously as zero and one.
    This is a behavior of microscopic particles that we call [superposition](https://en.wikipedia.org/wiki/Quantum_superposition).
  prefs: []
  type: TYPE_NORMAL
- en: Just imagine it. At the microscopic level, the entire world behaves in a completely
    different manner that we’re used to. Particles spin and exist in multiple states.
    Sometimes, they may even pop in and out of existence. They can even travel through
    physical walls; a behavior called [quantum tunneling](https://rpubs.com/primaryobjects/quantum-tunneling)!
  prefs: []
  type: TYPE_NORMAL
- en: And yet, we can harness these amazing effects by programming a quantum computer.
  prefs: []
  type: TYPE_NORMAL
- en: Since one of the most powerful properties of quantum computing is the idea of
    representing a bit of information simultaneously as both a zero and a one, it’s
    one of the first logical gates that beginners learn about when building their
    first quantum circuit.
  prefs: []
  type: TYPE_NORMAL
- en: When a Bit is a Qubit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A bit on a classical computer can hold a value of zero or one, but certainly
    not both at the same time. However, a qubit on a quantum computer can hold a value
    of both zero and one at the same time, enabling superposition, until measured.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the powerful effect of superposition as the core piece to our game.
  prefs: []
  type: TYPE_NORMAL
- en: On a quantum computer, the [Hadamard](https://qiskit.org/textbook/ch-states/single-qubit-gates.html#hgate)
    gate is used to place a qubit into superposition. When this is done, we can measure
    the qubit and receive back a random value of zero or one. That is, half of the
    time when we measure the qubit we will receive a result of zero, while the other
    half of the time we will receive a value of one.
  prefs: []
  type: TYPE_NORMAL
- en: Since a qubit has a *50/50* chance of measuring either a zero or a one, we can
    use this effect to randomly generate a bit.
  prefs: []
  type: TYPE_NORMAL
- en: Generating Random Numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know that we can use the Hadamard gate to create a random number
    of zero or one on a quantum computer, let’s extend this idea to four qubits. This
    gives us the ability to generate four random bits, which when converted to an
    integer, results in a value from 0 to 15.
  prefs: []
  type: TYPE_NORMAL
- en: This capability for generating random numbers within a specific range will be
    used as a key part for our game.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a Random Number on a Classical Computer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before diving into the quantum computing part, let’s first see how to generate
    some random numbers on a classical computer. This will allow us to compare the
    results of the random numbers generated on a classical computer to those on a
    quantum computer.
  prefs: []
  type: TYPE_NORMAL
- en: Using Python, we can generate pseudo-random numbers quite easily using the following
    example code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The above code generates a random number from 0 to 15, resulting in the following
    array of values: [14, 7, 14, 10, 11, 6, 11, 10, 1, 9].'
  prefs: []
  type: TYPE_NORMAL
- en: If we draw a histogram of 300 random numbers generated from this method, we
    can see the graph displayed below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2b3830a29cf21ed3841802e715e04e1b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The distribution of 300 random numbers generated with the Python random() module.
    Source: Author.'
  prefs: []
  type: TYPE_NORMAL
- en: Notice, how each number occurs relatively equal in comparison to the others.
  prefs: []
  type: TYPE_NORMAL
- en: '*This seems to be pretty random!*'
  prefs: []
  type: TYPE_NORMAL
- en: Generating a Random Number from Superposition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s take this into the quantum world.
  prefs: []
  type: TYPE_NORMAL
- en: Just as we’ve done with the classical computer method, now we’re going to use
    superposition with four qubits in order to generate four random bits that we can
    use to represent a number from 0 to 15.
  prefs: []
  type: TYPE_NORMAL
- en: We can use the following code below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The above example creates a quantum circuit using the Hadamard gate on each
    qubit to place them into superposition. We then measure the qubits to read the
    random values of zero or one for each.
  prefs: []
  type: TYPE_NORMAL
- en: Here is what the quantum circuit looks like when we draw it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fa48da375bd32aa6db50de128c72be2c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A quantum computing circuit for generating a 4-bit random number using superposition
    and the Hadamard gate. Source: Author, generated by Qiskit.'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we’re simply using an H-gate on each qubit and measuring the
    resulting value.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’re probably wondering how the results compare to the classical method before?
    As it turns out, this method does indeed generate random numbers, as shown in
    the following array: [8, 11, 4, 2, 13, 9, 7, 12, 15, 13].'
  prefs: []
  type: TYPE_NORMAL
- en: We can draw a histogram of the random numbers to confirm the distribution of
    random values.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/078094b4342498d53a79f69270cfc403.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The distribution of 300 random numbers generated with superposition. Source:
    Author.'
  prefs: []
  type: TYPE_NORMAL
- en: Just like the classical computing method, this too, seems to be quite random!
  prefs: []
  type: TYPE_NORMAL
- en: Generating a Random Number from Quantum Noise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using superposition to generate random numbers is easy enough. It’s simple and
    straight-forward.
  prefs: []
  type: TYPE_NORMAL
- en: However, we can also generate random numbers on a quantum computer by using
    the property of quantum noise.
  prefs: []
  type: TYPE_NORMAL
- en: When a quantum gate is executed, there is a tiny bit of [noise](https://arxiv.org/pdf/0802.1639.pdf)
    (or error) that can effect the gate. It’s this tiny amount of noise that we can
    harness to generate random numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, the Qiskit library makes it easy to take advantage of quantum noise.
    There have even been other [projects](https://github.com/rochisha0/quantum-ugly-duckling)
    that use this very feature for [random number generation](https://github.com/rochisha0/quantum-ugly-duckling/blob/main/quantum-ugly-duckling-main/nqrng.py).
  prefs: []
  type: TYPE_NORMAL
- en: Below is an example of setting up a quantum circuit to take advantage of noise.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The above code initializes quantum noise for the various gates that we will
    be using in our program.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have the noise ready, we can create a quantum circuit to generate random
    numbers from noise by using the following code below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The above code creates a quantum circuit as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9f8289bc579f624949ccb60798f56afc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A quantum computing circuit for generating a 4-bit random number using quantum
    noise. Source: Author, generated by Qiskit.'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we’re using the U-Gate combined with a controlled-not (CX) gate
    in order to generate the required noise.
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed the for-loop in the quantum circuit. We need to run the
    circuit a number of times in order to magnify the noise that is generated. Otherwise,
    our random numbers will be heavily skewed towards a zero or one, rather than randomly
    distributed. It’s important to balance the iterations of the loop versus the randomness
    of the numbers, as the longer the circuit, the longer it will take to run.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we measure the resulting four qubits to obtain random values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once again, the resulting output, indeed, appears quite random, as shown in
    the following array: [4, 0, 6, 9, 2, 9, 15, 5, 2, 12].'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/83bc89638c8142485a7de942a0e06127.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The distribution of 300 random numbers generated using quantum noise. Source:
    Author.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Magic Number Game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’re ready to implement the game, we need to choose a method for generating
    the random numbers that will be used.
  prefs: []
  type: TYPE_NORMAL
- en: Both quantum computing approaches (superposition and noise) would equally suffice.
  prefs: []
  type: TYPE_NORMAL
- en: The superposition method is more commonly used for generating randomness, as
    it uses a simpler circuit, while the noise method takes advantage of distinct
    qualities of quantum computing gates. In fact, each technique can be equally interchangeable.
  prefs: []
  type: TYPE_NORMAL
- en: However, let’s move forward with the method of using quantum noise, a more unique
    approach, and implement this in our game.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping quantum into a classical function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To keep things tidy, we’ll wrap our noisy quantum circuit into a Python method
    called *random_number*. We can call this method to choose our magic number for
    the player to guess.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Once we have a magic number generated, we start a game loop. At each round,
    we’ll ask the user to input a guess from 0 to 15 and tell the player if their
    guess is too low or too high.
  prefs: []
  type: TYPE_NORMAL
- en: The code for the game is shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: That’s really all there is to it!
  prefs: []
  type: TYPE_NORMAL
- en: Lights, Camera, Action!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see, our game is very simple in nature. However, the game demonstrates
    the capability of a quantum computer to generate a random number, which is, of
    course, a key part to this game.
  prefs: []
  type: TYPE_NORMAL
- en: There is amazing potential to expand on this idea much further. Imagine the
    possibilities for adding graphics, game mechanics, event 3D or virtual reality
    effects into a game — all powered with quantum computing.
  prefs: []
  type: TYPE_NORMAL
- en: The simple act of generating a quantum random number can power the key pieces
    behind your game design.
  prefs: []
  type: TYPE_NORMAL
- en: Give Me Speed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it is important to note, there is a consideration with regard to speed
    of execution on a quantum computer. After all, processing a quantum circuit on
    a simulator or physical quantum computer (such as IBM Quantum) may require significant
    processing time and delays.
  prefs: []
  type: TYPE_NORMAL
- en: For now, however, games can still serve as an excellent proof of concept and
    learning opportunity. In addition, quantum simulators and hardware are improving
    every year.
  prefs: []
  type: TYPE_NORMAL
- en: So stick with it and learn all that you can!
  prefs: []
  type: TYPE_NORMAL
- en: Excited Yet?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope that you’re as excited as I am about quantum computing and its potential
    application to a vast array of computer problems.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve learned how to use the Python Qiskit quantum computing library,
    along with superposition or quantum noise, you can easily generate random numbers
    for a multitude of purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the fun of quantum computing goes well beyond random numbers. There
    are an ever-growing volume of quantum algorithms that take full advantage of the
    quantum process.
  prefs: []
  type: TYPE_NORMAL
- en: This is only the tip of the iceberg!
  prefs: []
  type: TYPE_NORMAL
- en: The Future is Wide Open
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you know how to create random numbers with quantum computing, it’s
    time to make your own applications and games!
  prefs: []
  type: TYPE_NORMAL
- en: You can download the complete code example for the Magic Number Guessing game
    [here](https://gist.github.com/primaryobjects/e1a5ba52da6d482e0f00d3e2e8a590fe).
  prefs: []
  type: TYPE_NORMAL
- en: About the Author
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you’ve enjoyed this article, please consider following me on [Medium](https://medium.com/@KoryBecker),
    [Twitter](https://twitter.com/PrimaryObjects), and my [web site](https://primaryobjects.com)
    to be notified of my future posts and research work.
  prefs: []
  type: TYPE_NORMAL
