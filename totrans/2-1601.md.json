["```py\nimport numpy as np\nimport pandas as pd\nimport geopandas\nfrom math import sin, cos, asin, acos, radians\n\nfrom pulp import LpProblem, LpMinimize, LpVariable, LpBinary, lpSum, LpStatus, value\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n```", "```py\n# Load dataframe\ndf = pd.read_csv(\n    './it.csv', \n    usecols = ['city', 'lat', 'lng', 'population', 'capital', 'admin_name'])\n```", "```py\nRANDOM_STATE = 2          # For reproducibility\nFRACTION_CUSTOMERS = 0.3  # Fraction of cities we want to keep as customers\nFRACTION_WAREHOUSES = 0.8 # Fraction of cities we want to keep as warehouse locations\nFRACTION_DEMAND = 0.02    # Fraction of citizens of a city that may order a product  \n\n# List of the 20 regions of Italy\nREGION_LIST = [\n    'Lombardy', 'Veneto', 'Emilia-Romagna', 'Sicilia', 'Campania', 'Piedmont', 'Puglia', \n    'Lazio', 'Calabria', 'Tuscany', 'Sardegna', 'Marche', 'Friuli-Venezia Giulia', 'Abruzzo',\n    'Umbria', 'Trentino-Alto Adige', 'Liguria', 'Basilicata', 'Molise', 'Valle dâ€™Aosta']\n\n# Demand is composed of: \n#   1\\. A fraction of the population\n#   2\\. An error term of uniform distribution\n# Note: demand is approximated to the closest int \n# as its physical meaning denies decimals\ndf['demand'] = np.floor(\n    FRACTION_DEMAND * df.population + np.random.uniform(-10, 10, size=(df.shape[0],)))\n\n# Create the warehouses dataframe:\n#   1\\. Filter the 20 regions of Italy\n#   2\\. Filter capitals as candidate warehouse locations\n#   3\\. Sample a fraction of the original cities\nfacility_df = df.\\\n                loc[df.admin_name.isin(REGION_LIST)].\\\n                loc[df.capital.isin(['admin', 'minor'])].\\\n                sample(frac=FRACTION_WAREHOUSES, random_state=RANDOM_STATE, ignore_index=True)\n\n# Create the customers dataframe:\n#   1\\. Filter the 20 regions of Italy\n#   2\\. Sample a fraction of the original cities\ncustomer_df = df.\\\n                loc[df.admin_name.isin(REGION_LIST)].\\\n                sample(frac=FRACTION_CUSTOMERS, random_state=RANDOM_STATE, ignore_index=True)\n\n# Customers IDs list\ncustomer_df['customer_id'] = range(1, 1 + customer_df.shape[0])\n```", "```py\ndef add_geocoordinates(df, lat='lat', lng='lng'):\n    '''\n    Add column \"geometry\" with <shapely.geometry.point.Point> objects \n        built from latitude and longitude values in the input dataframe\n\n    Args:\n        - df: input dataframe\n        - lat: name of the column containing the latitude (default: lat)\n        - lng: name of the column containing the longitude (default: lng)\n    Out:\n        - df: same dataframe enriched with a geo-coordinate column\n    '''\n    assert pd.Series([lat, lng]).isin(df.columns).all(),\\\n        f'Cannot find columns \"{lat}\" and/or \"{lng}\" in the input dataframe.'\n    return geopandas.GeoDataFrame(\n        df, geometry=geopandas.points_from_xy(df.lng, df.lat))\n\ncustomer_df = add_geocoordinates(customer_df)\nfacility_df = add_geocoordinates(facility_df)\n```", "```py\n# Prepare country plot\nworld = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))\n\n# Extract and plot the shape of Italy\nitaly = world[world.name == 'Italy']\nax = italy.plot(color='white', edgecolor='black', figsize=(10, 10))\n\n# Plot customers as points\ncustomer_df.\\\n    plot(ax=ax, marker='X', color='red', markersize=30, alpha=0.5, label='Customer')\n\n# Plot potential facility locations as points\nfacility_df.\\\n    plot(ax=ax, marker='D', color='blue', markersize=30, alpha=0.5, label='Potential warehouse')\n\n# Add legend\nplt.legend(facecolor='white', title='Location')\n\n# Add title\nplt.title('Customer and potential warehouses')\n\n# Remove ticks from axis\nplt.xticks([])\nplt.yticks([])\n\n# Show plot\nplt.show()\n```", "```py\n# Prepare region dataframe:\n#   1\\. Filter the 20 regions of Italy\n#   2\\. Group by region\n#   3\\. Calculate:\n#      - Mean regional latitude\n#      - Mean regional longitude\n#      - Sum of regional demand\nregion_df = df.\\\n             loc[df.admin_name.isin(REGION_LIST)].\\\n             groupby(['admin_name']).\\\n             agg({'lat': 'mean', 'lng': 'mean', 'demand': 'sum'}).\\\n             reset_index()\n\n# Add geo-coordinates\nregion_df = add_geocoordinates(region_df)\n\n# Plot the shape of Italy\nax = italy.plot(color='white', edgecolor='black', figsize=(10, 10))\n\n# Plot region area colored based on demand\nregion_df.\\\n    plot(ax=ax, column='demand', marker='o', c='demand', cmap='plasma', markersize=2500, alpha=0.6)\n\n# Add region 'center' as red dots\nregion_df.\\\n    plot(ax=ax, marker='o', c='red', markersize=25, alpha=0.8, label='Customer location')\n\n# Add region name above the center\nfor i, row in region_df.iterrows():\n    plt.annotate(\n        row.admin_name, xy=(row.lng, row.lat+0.2), horizontalalignment='center')\n\n# Add color bar with demand scale\nplt.colorbar(ax.get_children()[1], ax=ax, label='Annual Demand', fraction=0.04, pad=0.04) \n\n# Add title\nplt.title('Annual demand by region')\n\n# Remove ticks from axis\nplt.xticks([])\nplt.yticks([])\n\n# Show plot\nplt.show()\n```", "```py\n# Dictionary of cutomer id (id) and demand (value)\ndemand_dict = { customer : customer_df['demand'][i] for i, customer in enumerate(customer_df['customer_id']) }\n```", "```py\n# Assumptions: \n#    1\\. Each warehouse has an annual cost of 100.000,00 euros: rent, electricity, ...\n#    2\\. Each warehouse can meet 3 times the regional average annual demand\nCOST_PER_WAREHOUSE = 100_000\nSUPPLY_FACTOR_PER_WAREHOUSE = 3\nSUPPLY_PER_WAREHOUSE = region_df.demand.mean() * SUPPLY_FACTOR_PER_WAREHOUSE\n\n# Warehouses list\nfacility_df['warehouse_id'] = ['Warehouse ' + str(i) for i in range(1, 1 + facility_df.shape[0])]\n\n# Dictionary of warehouse id (id) and max supply (value)\nannual_supply_dict = { warehouse : SUPPLY_PER_WAREHOUSE for warehouse in facility_df['warehouse_id'] }\n\n# Dictionary of warehouse id (id) and fixed costs (value)\nannual_cost_dict = { warehouse : COST_PER_WAREHOUSE for warehouse in facility_df['warehouse_id'] }\n```", "```py\ndef haversine_distance(lat1, lon1, lat2, lon2):\n    '''\n    Calculate distance between two locations given latitude and longitude.\n\n    Args:\n       - lat1: latitude of the first location\n       - lon1: longitude of the first location\n       - lat2: latitude of the second location\n       - lon2: longitude of the second location\n    Out:\n       - Distance in Km\n\n    Ref: \n       - https://en.wikipedia.org/wiki/Haversine_formula\n    '''\n    return 6371.01 *\\\n            acos(sin(radians(lat1))*sin(radians(lat2)) +\\\n            cos(radians(lat1))*cos(radians(lat2))*cos(radians(lon1)-radians(lon2)))\n```", "```py\nhaversine_distance(45.4654219, 9.1859243, 45.695000, 9.670000)\n```", "```py\n45.508144765533906\n```", "```py\ndef traveling_cost(distance_in_km):\n    '''\n    Return traveling cost in euros given a distance in Km.\n\n    Args:\n      - distance_in_km: travel distance in Km\n    Out:\n      - cost of the trip in euros\n    '''\n    return 0.71 * distance_in_km\n```", "```py\n# Dict to store the distances between all warehouses and customers\ntransport_costs_dict = {}\n\n# For each warehouse location\nfor i in range(0, facility_df.shape[0]):\n\n    # Dict to store the distances between the i-th warehouse and all customers\n    warehouse_transport_costs_dict = {}\n\n    # For each customer location\n    for j in range(0, customer_df.shape[0]):\n\n        # Distance in Km between warehouse i and customer j\n        d = 0 if facility_df.city[i]==customer_df.city[j] else haversine_distance(\n            facility_df.lat[i], facility_df.lng[i], customer_df.lat[j], customer_df.lng[j])\n\n        # Update costs for warehouse i\n        warehouse_transport_costs_dict.update({customer_df.customer_id[j]: traveling_cost(d)})\n\n    # Final dictionary with all costs for all warehouses\n    transport_costs_dict.update({facility_df.warehouse_id[i]: warehouse_transport_costs_dict})\n```", "```py\n# Define linear problem\nlp_problem = LpProblem('CFLP', LpMinimize)\n\n# Variable: y_j (constraint: it is binary)\ncreated_facility = LpVariable.dicts(\n    'Create_facility', facility_df['warehouse_id'], 0, 1, LpBinary)\n\n# Variable: x_ij\nserved_customer = LpVariable.dicts(\n    'Link', [(i,j) for i in customer_df['customer_id'] for j in facility_df['warehouse_id']], 0)\n\n# Objective function \nobjective = lpSum(annual_cost_dict[j]*created_facility[j] for j in facility_df['warehouse_id']) +\\\n            lpSum(transport_costs_dict[j][i]*served_customer[(i,j)] \\\n                  for j in facility_df['warehouse_id'] for i in customer_df['customer_id'])\n\nlp_problem += objective\n\n# Costraint: the demand must be met\nfor i in customer_df['customer_id']:\n    lp_problem += lpSum(served_customer[(i,j)] for j in facility_df['warehouse_id']) == demand_dict[i]\n\n# Constraint: a warehouse cannot deliver more than its capacity limit\nfor j in facility_df['warehouse_id']:\n    lp_problem += lpSum(served_customer[(i,j)] for i in customer_df['customer_id']) <= annual_supply_dict[j] * created_facility[j]\n\n# Constraint: a warehouse cannot give a customer more than its demand\nfor i in customer_df['customer_id']:\n    for j in facility_df['warehouse_id']:\n        lp_problem += served_customer[(i,j)] <= demand_dict[i] * created_facility[j]\n```", "```py\nlp_problem.solve()\n```", "```py\nprint('Solution: ', LpStatus[lp_problem.status])\n```", "```py\nSolution: Optimal\n```", "```py\nvalue(lp_problem.objective)\n```", "```py\n8964323.323646087\n```", "```py\ncreated_facility['Warehouse 1'].varValue\n```", "```py\n1.0\n```", "```py\n# List of the values assumed by the binary variable created_facility\nfacility_values = [i.varValue for i in created_facility.values()]\n\n# Count of each distinct value of the list\n[[i, facility_values.count(i)] for i in set(facility_values)]\n```", "```py\n[[0.0, 59], [1.0, 32]]\n```", "```py\n# Create dataframe column to store whether to build the warehouse or not \nfacility_df['build_warehouse'] = ''\n\n# Assign Yes/No to the dataframe column based on the optimization binary variable\nfor i in facility_df['warehouse_id']:\n    if created_facility[i].varValue == 1:\n        print('Build site at: ', i)\n        facility_df.loc[facility_df['warehouse_id'] == i, 'build_warehouse'] = 'Yes'\n    else:\n        facility_df.loc[facility_df['warehouse_id'] == i, 'build_warehouse'] = 'No'\n```", "```py\nBuild site at:  Warehouse 1\nBuild site at:  Warehouse 2\nBuild site at:  Warehouse 3\nBuild site at:  Warehouse 4\nBuild site at:  Warehouse 7\nBuild site at:  Warehouse 8\nBuild site at:  Warehouse 16\nBuild site at:  Warehouse 18\nBuild site at:  Warehouse 20\nBuild site at:  Warehouse 21\nBuild site at:  Warehouse 22\nBuild site at:  Warehouse 23\nBuild site at:  Warehouse 25\nBuild site at:  Warehouse 26\nBuild site at:  Warehouse 27\nBuild site at:  Warehouse 29\nBuild site at:  Warehouse 33\nBuild site at:  Warehouse 35\nBuild site at:  Warehouse 38\nBuild site at:  Warehouse 48\nBuild site at:  Warehouse 49\nBuild site at:  Warehouse 55\nBuild site at:  Warehouse 56\nBuild site at:  Warehouse 57\nBuild site at:  Warehouse 58\nBuild site at:  Warehouse 63\nBuild site at:  Warehouse 66\nBuild site at:  Warehouse 70\nBuild site at:  Warehouse 74\nBuild site at:  Warehouse 82\nBuild site at:  Warehouse 83\nBuild site at:  Warehouse 84\n```", "```py\ncolors = ['#990000', '#0059b3']\n\nfacility_df.build_warehouse.value_counts().plot.barh(\n  title='Warehouse sites to be established', xlabel='Number of sites', color=colors, ylabel='Establish', figsize=(7,6)) \n\nfor i, v in enumerate(facility_df.build_warehouse.value_counts()):\n    plt.text(v, i, ' '+str(round(v,3)), color=colors[i], va='center', fontweight='bold')\n```", "```py\n# Plot the shape of Italy\nax = italy.plot(color='white', edgecolor='black', figsize=(10, 10))\n\n# Plot sites to establish\nfacility_df.\\\n    loc[facility_df.build_warehouse =='Yes'].\\\n    plot(ax=ax, marker='o', c='#0059b3', markersize=50, label='Build')\n\n# Plot sites to discard\nfacility_df.\\\n    loc[facility_df.build_warehouse =='No'].\\\n    plot(ax=ax, marker='X', c='#990000', markersize=40, label='Discard')\n\n# Add title\nplt.title('Optimized Warehouse Sites')\n\n# Add legend\nplt.legend(title='Warehouse Site', facecolor='white')\n\n# Remove ticks from axis\nplt.xticks([])\nplt.yticks([])\n\n# Show plot\nplt.show()\n```", "```py\ndef get_linked_customers(input_warehouse):\n    '''\n    Find customer ids that are served by the input warehouse.\n\n    Args:\n        - input_warehouse: string (example: <Warehouse 21>)\n    Out:\n        - List of customers ids connected to the warehouse\n    '''\n    # Initialize empty list\n    linked_customers = []\n\n    # Iterate through the xij decision variable\n    for (k, v) in served_customer.items():\n\n            # Filter the input warehouse and positive variable values\n            if k[1]==input_warehouse and v.varValue>0:\n\n                # Customer is served by the input warehouse\n                linked_customers.append(k[0])\n\n    return linked_customers\n\n# Warehouses to establish\nestablish = facility_df.loc[facility_df.build_warehouse =='Yes']\n\n# Plot the shape of Italy\nax = italy.plot(color='white', edgecolor='black', figsize=(30, 30))\n\n# Plot sites to establish\nestablish.\\\n    plot(ax=ax, marker='o', c='#0059b3', markersize=100, label='Warehouse')\n\n# Plot customers\ncustomer_df.\\\n    plot(ax=ax, marker='X', color='#990000', markersize=80, alpha=0.8, label='Customer')\n\n# For each warehouse to build\nfor w in establish.warehouse_id:\n\n    # Extract list of customers served by the warehouse\n    linked_customers = get_linked_customers(w)\n\n    # For each served customer\n    for c in linked_customers:\n\n        # Plot connection between warehouse and the served customer\n        ax.plot(\n         [establish.loc[establish.warehouse_id==w].lng, customer_df.loc[customer_df.customer_id==c].lng],\n         [establish.loc[establish.warehouse_id==w].lat, customer_df.loc[customer_df.customer_id==c].lat],\n         linewidth=0.8, linestyle='--', color='#0059b3')\n\n# Add title\nplt.title('Optimized Customers Supply', fontsize = 35)\n\n# Add legend\nplt.legend(facecolor='white', fontsize=30)\n\n# Remove ticks from axis\nplt.xticks([])\nplt.yticks([])\n\n# Show plot\nplt.show()\n```"]