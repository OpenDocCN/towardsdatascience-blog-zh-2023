- en: How to use React to build Web Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/a-step-by-step-guide-to-develop-a-map-based-application-part-ii-6d3fa7dbd8b9](https://towardsdatascience.com/a-step-by-step-guide-to-develop-a-map-based-application-part-ii-6d3fa7dbd8b9)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A Step-By-Step Guide to Develop a Map-Base Application (Part II)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@jacky.kaub?source=post_page-----6d3fa7dbd8b9--------------------------------)[![Jacky
    Kaub](../Images/e66c699ee5a9d5bbd58a1a72d688234a.png)](https://medium.com/@jacky.kaub?source=post_page-----6d3fa7dbd8b9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6d3fa7dbd8b9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6d3fa7dbd8b9--------------------------------)
    [Jacky Kaub](https://medium.com/@jacky.kaub?source=post_page-----6d3fa7dbd8b9--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6d3fa7dbd8b9--------------------------------)
    ·20 min read·Feb 9, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6a0d5cd09cb96bc373b944c80753e707.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Lautaro Andreani](https://unsplash.com/@lautaroandreani?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Maps are a powerful tool for visualizing and understanding geographic data but
    they need specific skills to be designed efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: In this step-by-step guide, we are going to take a deep dive into building a
    map-based application to show the customer's prices of gas stations around them.
    We will cover the different key steps of a product, from original proof of concept
    (POC) to the minimum viable product (MVP)
  prefs: []
  type: TYPE_NORMAL
- en: 'Articles in the series:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Part I: The proof-of-concept — Build a minimalist demo](https://medium.com/p/757766b04f77)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Part II: How to use React to build web apps (Static Layout)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Part III: Add Interactivity to your web apps with React](/a-step-by-step-guide-to-develop-a-map-based-application-part-iii-ad501c4aa35b)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Part IV: Build a back-end with PostgreSQL, FastAPI, and Docker](https://medium.com/towards-data-science/build-a-back-end-with-postgresql-fastapi-and-docker-7ebfe59e4f06)'
  prefs: []
  type: TYPE_NORMAL
- en: A bit of context around this article
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this article, we will continue our work on the Gas Station Finder Application
    that was initiated previously. This time, we will focus on preparing the first
    version of the web application that can run locally using static datasets. The
    web application will be built using **the React framework** and this article will
    provide as much detail as possible for someone who is new to the framework.
  prefs: []
  type: TYPE_NORMAL
- en: I decided to go with React for this application as it is a compelling framework
    that only a few data scientists/data analysts are currently using. If you have
    been ever frustrated by the rigidity of other frameworks, I hope you will find
    in this article an alternative way to design your web application. You will see
    that the learning curve might look a bit steep at the beginning, (especially if
    you are not familiar with HTML/CSS/javascript), but once mastered, having this
    framework in your toolbox will open up a lot of opportunities for building dynamic,
    user-friendly and scalable web applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: The article will not include all the code, only snippets to illustrate
    key principles, but the full code can be found on [my GitHub page](https://github.com/jkaub/fuel-station-viewer-react).'
  prefs: []
  type: TYPE_NORMAL
- en: By the end of the article, we will have a layout of our React Application, and
    in the next part, we will focus on adding interactivity to it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d199843b195d293642b7e1c26eb7b3e6.png)'
  prefs: []
  type: TYPE_IMG
- en: The application “static” render by the end of the article, Author Illustration
  prefs: []
  type: TYPE_NORMAL
- en: Why use React?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many tools and frameworks available to build nice and powerful web
    applications. Some of the most adopted frameworks in the data science ecosystem
    include [**Dash**](https://dash.plotly.com/) or [**Streamlit**](https://streamlit.io/).
    One of the big advantages of those tools is their simplicity and ease of use,
    which can be very efficient and sufficient for some of your use cases, especially
    if you are using mainly python.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, it comes with a trade-off on flexibility and customization, and
    if your application starts to be more complex, the amount of time to develop your
    features within those frameworks will grow exponentially.
  prefs: []
  type: TYPE_NORMAL
- en: React, on the other hand, is a framework that is more performant and allows
    for more flexibility. It also encourages the use of a modular and component-based
    architecture, which is appreciable when having to add new features and do the
    maintenance of the project. Finally, it is part of the JavaScript ecosystem, which
    is one of the largest and most popular ecosystems in the world.
  prefs: []
  type: TYPE_NORMAL
- en: Despite its advantages, you might be reluctant in learning the framework, especially
    if you come from the python world. Not only would you have to learn the framework
    itself, but also probably some javascript, HTML, and CSS, which can be very time-consuming.
  prefs: []
  type: TYPE_NORMAL
- en: Regarding HTML and CSS, a basic knowledge of those languages is in any case
    needed even if you try to go deeper into your application (even in dash or streamlit).
    Javascript might be a bit more challenging, especially if you are not so much
    familiar with object-oriented and asynchronous programming, but once learned,
    it will potentially give you access to a more easy and efficient way of developing
    web apps (as well as sharpening your programming skills)
  prefs: []
  type: TYPE_NORMAL
- en: Setup the Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start a project powered by react, you first need to install Node.js on your
    computer, which is the runtime environment used to run javascript.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js can be downloaded [here](https://nodejs.org/en/).
  prefs: []
  type: TYPE_NORMAL
- en: '*Side note: Things are changing fast. I wrote this article in March 2023 and
    I am using* ***React 18.2.0\.*** *If you read this article years after its publication,
    it might be a bit outdated. So be careful with what you will read below.*'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once installed, we will use **npx/npm** (roughly the equivalent of pip in python)
    to set up a react project via the command “create-react-app”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Running this command in a CLI will automatically download all the required
    packages and set up your project in the following folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This might look complicated, let us go into details file by file:'
  prefs: []
  type: TYPE_NORMAL
- en: '**node_modules/**: This folder contains all the packages and dependencies that
    you will add to your project using npm. In general, you should leave this folder
    untouched.'
  prefs: []
  type: TYPE_NORMAL
- en: '**public/**: This folder contains static files used for your project. It is
    populated by default with basic files to run the default page that is generated
    when you initiate a new project.'
  prefs: []
  type: TYPE_NORMAL
- en: '**src/**: This folder is the core of your application and contains its source
    code. This is where we will write the code of our application. It is populated
    initially with files to run the default page that is generated when you initiate
    a new project.'
  prefs: []
  type: TYPE_NORMAL
- en: '**package-lock.js**on: This file is the equivalent of requirement.txt. It contains
    all the dependencies and exact versions of the packages that are installed using
    npm.'
  prefs: []
  type: TYPE_NORMAL
- en: '**package.json**: This file is the equivalent of setup.py and it specifies
    project metadata.'
  prefs: []
  type: TYPE_NORMAL
- en: Running the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this part of the life cycle of the project (basically building and testing
    locally), we will use a development server which is a built-in feature of the
    **create-react-app** tool. This is good for making quick developments but is not
    robust enough for production purposes, and we will talk about this in another
    article.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run your test server, simply go to your project folder and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/49b43591d6b4245ca1ab3df1a93c5fa9.png)'
  prefs: []
  type: TYPE_IMG
- en: This will automatically open a new webpage in your default browser with the
    default page imitated in any new react project.
  prefs: []
  type: TYPE_NORMAL
- en: the “localhost” means we are running the server on our own computer, while “:3000"
    indicates the port number of the application.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ee1397845e75512bbb1551671423dc81.png)'
  prefs: []
  type: TYPE_IMG
- en: The react default app, , Author Illustration
  prefs: []
  type: TYPE_NORMAL
- en: Installing required package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: React has a large ecosystem and many packages are open sources and will simplify
    your life.
  prefs: []
  type: TYPE_NORMAL
- en: In particular, for this project, we are going to use **react-plotly.js**, a
    wrapper of plotly made for react applications.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Part of very interesting packages, I can also mention **react-router-dom,**
    a powerful URL mapper to manage multi-page applications, and **uuid**, a package
    designed to generate automatic ids based on the latest standards. I will not use
    them today, but this is part of the must-known packages.
  prefs: []
  type: TYPE_NORMAL
- en: Improve the coding experience
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I will code the project using **VSCode**. Many extensions are available in order
    to simplify your life while developing a React web app.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s talk briefly about some of them.
  prefs: []
  type: TYPE_NORMAL
- en: '**ES7 React/Redux/GraphQL/React-Native snippets:** This extension provides
    a lot of shortcuts to quickly set some template code.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dd233320407e87ff500386bb37ffaa73.png)'
  prefs: []
  type: TYPE_IMG
- en: ES7 in action, Author Illustration
  prefs: []
  type: TYPE_NORMAL
- en: '**Emmet:** This plugin allows for fast coding by providing also a lot of shortcuts
    and abbreviations to automatically generate code.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/256029e5e1306d8888f71b1a44dc51cc.png)'
  prefs: []
  type: TYPE_IMG
- en: Emmet in action, Author Illustration
  prefs: []
  type: TYPE_NORMAL
- en: '**Prettier:** This extension automatically formats your code when you save
    your files.'
  prefs: []
  type: TYPE_NORMAL
- en: Build the layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our environment is properly set up, we can start to build our application.
    As mentioned in the previous part, this will be done mainly after modifying the
    files in the src/ folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look a bit at what is inside there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The only file of interest for us will be **App.js** and we will go into more
    detail about it later. Regarding the other files, quickly:'
  prefs: []
  type: TYPE_NORMAL
- en: '**index.js** is responsible for the rendering of the application. We will not
    touch this file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**reportWebVitals.js** is used to report the performance metrics of the web
    page to an analytic service, and in our level of use of React, will not be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**setupTests.js** is a file used to set up a testing environment. Also out
    of the scope of this article and we will leave it untouched'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**logo.svg** is simply an image used in the default page when you create the
    project and can be deleted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App.css** and **index.css** contain some basic .css for your web app, that
    could eventually be modified to give another style if you need to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application Architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In react, we build an application by assembling custom components. As a best
    practice, each component will be made of two files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a .js file used to code the logic of the component: what it does, how it manages
    its internal state, and how it propagates its state to its parents and children
    components'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a .css file used for the esthetic and formatting of the component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s take the example of our application and see how our logic will apply.
    We want our App to have basically 3 main components:'
  prefs: []
  type: TYPE_NORMAL
- en: A search area form will be used to look for a place and a type of fuel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A map that will display the stations, the same way we built it in the previous
    article
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A table to summarize quickly the main information about the stations around.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This might look like a lot of files and folders, but it will help keep your
    project clean and tidy, which will make your life much easier in the future if
    you need to go back to it to modify or improve your app.
  prefs: []
  type: TYPE_NORMAL
- en: Application basic layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, you might want to build a rough layout of what your app could
    look like. If you don’t have a web designer to help, the best is to look at examples
    of modern apps and get inspiration from them. The Internet is full of templates
    to build nice components, and with basic .css knowledge and the help of those
    templates, you will already be able to do nice and modern elements.
  prefs: []
  type: TYPE_NORMAL
- en: As we start the project, we want to build a primary basic view just to have
    a rough idea about how to organize our components. Half of the job will be basically
    done with such a basic layout as a web application is basically made of boxes
    in boxes in boxes…
  prefs: []
  type: TYPE_NORMAL
- en: 'For our web app, let’s keep things simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a2e720a415e5c6d34f78982ac7911dbc.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic Application layout, Author Illustration
  prefs: []
  type: TYPE_NORMAL
- en: Before going further, we also need to talk about design paradigms. In HTML/CSS,
    you have many ways of organizing your components. My favorite paradigm is [the
    Flexbox paradigm](https://css-tricks.com/snippets/css/a-guide-to-flexbox/), which
    provides an easy way to organize boxes within a container box.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using this paradigm, you set the organization style of your “container box”:'
  prefs: []
  type: TYPE_NORMAL
- en: How are aligned the children's boxes, in rows, or in columns?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within this structure, how are organized the children's boxes on the main axis?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within this structure, how are organized the children's boxes in the orthogonal
    axis?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The layout used above follows the Flexbox paradigm.
  prefs: []
  type: TYPE_NORMAL
- en: 'The gray area is the main container. We want it to contain two “div” (which
    are the box in HTML language) organized in columns: One containing the header
    (a title with sometimes some menu options) and one containing the main components.'
  prefs: []
  type: TYPE_NORMAL
- en: 'That div will be organized in a row in such a way that it divides the space
    in two: in the left part, we will have a div (in orange) for the filtering component
    and the table with the prices, and in the right, the map component which will
    take the remaining space.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <StationsMap />, <StationsTable />, and <StationsFilter /> will be the custom
    components that we are going to build in the coming section.
  prefs: []
  type: TYPE_NORMAL
- en: App.css will contain the .css of our container boxes, let’s have a look!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**display: flex** indicates that the containers are “flex-boxes” and that the
    children''s boxes will be organized following this paradigm'
  prefs: []
  type: TYPE_NORMAL
- en: '**flex-direction** indicates if the boxes are organized in a row or in a column'
  prefs: []
  type: TYPE_NORMAL
- en: '**align-items** organize the alignment in the secondary direction'
  prefs: []
  type: TYPE_NORMAL
- en: '**justify-content** (not used here) organize the alignment in the main direction'
  prefs: []
  type: TYPE_NORMAL
- en: Initiate the components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that all of the above is set up, let’s initialize our components with a
    basic version for all of them, which we will improve over time.
  prefs: []
  type: TYPE_NORMAL
- en: In StationsFilter.js, we are going to use the shortcut “rfc” (as shown in the
    .gif in the previous section) that will directly generate the template for our
    component, and also add an import statement for the corresponding .css file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This little piece of code indicates with “export default” that the function
    StationsFilter can be later directly imported in another file like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'and used in its own HTML tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Let’s make the same template for StationsMap.js and StationsTable.js, I will
    pass on the code snapshot here, which is exactly identical to what we did before.
  prefs: []
  type: TYPE_NORMAL
- en: Working on the Filter Layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We want the filter to be made of two components:'
  prefs: []
  type: TYPE_NORMAL
- en: One to look for a place by postal code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One to select the fuel type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s have a look in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We first define a box of type “form” in which we will put our form fields and
    the button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We create an input of type “text” used to receive text. We place a placeholder
    name “Postal Code” which will appear to give an indication to the customers and
    a className for the .css
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We create a Dropdown with the tag <select>.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside this Dropdown component, we need to add the options as “children” tags.
    This is done by iterating via an array (the equivalent of a python list) to automatically
    generate all the possibilities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the “map” version because it is more compact, and potentially easier
    to maintain: if a new fuel type appears, we can simply modify our fuelTypes array
    and it will generate automatically the corresponding options.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we create a button that will be later the entry point for sending a
    request to the server and retrieve some data to display
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Note: currently nothing is interactive, this will be detailed in the next
    article.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Note 2: I will not detail the .css here, for most of it I took it by looking
    for inspiration on the internet and it is not necessarily very interesting to
    detail here.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how looks the component on its own:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4d9abf9234db338a54e4df24f7a7540f.png)'
  prefs: []
  type: TYPE_IMG
- en: The Filter Component, Author Illustration
  prefs: []
  type: TYPE_NORMAL
- en: Building the Map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to build the map, we are going to use the **react-plotly** plugin.
  prefs: []
  type: TYPE_NORMAL
- en: In react, plotly figures are basically made the same way as in python, with
    traces and a layout. The main difference is that instead of using a wrapper to
    build our charts (like go.Scatter) we need to provide the data in the JSON format
    (a dictionary with keys/values).
  prefs: []
  type: TYPE_NORMAL
- en: If you are used to building your charts in python, don’t panic, it is actually
    very simple to convert your python figure to a react figure.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a starting point for now and for the illustration, I am going to show you
    how to copy our python figure to a react one. Later, when we will add interactions,
    we will rebuild this map adding good data feeds. This is the map we want to copy
    from our python code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/678a3b01b24d71fb1c575fcaf8eac914.png)'
  prefs: []
  type: TYPE_IMG
- en: The map widget from the python POC, Author Illustration
  prefs: []
  type: TYPE_NORMAL
- en: 'First step: let’s create a .json copy of our chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to have a look at how looks your figure as a python dictionary,
    you can also do fig.to_dict(). In the case of the figure above, this will give
    something looking like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'with, for example, taking the layout and one of the traces of our figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Most of the fields are generally familiar if you are used to plotly. Note the
    field “type” which specifies the type of trace you are building. In our case “type”:”scattermapbox”,
    equivalent to what we did in python with (go.Scattermapbox() )
  prefs: []
  type: TYPE_NORMAL
- en: This can be used directly in react and it is reproducible for any type of figure
    making it very easy to go from a proof of concept in python to its counterpart
    in react.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s copy the full JSON we generated before in our project and include it in
    the folder of the component StationsMap.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We can now simply import the file in our StationsMap.js script and use it in
    a react-plotly Figure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s have a look in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we import simply our JSON object and store it in the variable figJson.
    Done this way, the figJson is a javascript Object, which is the equivalent of
    Python dictionaries which will make the job for our current static view.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Then, as we could do in python, we update our layout Object with extra information
    and remove some keys/values. In my case, I set the plotly layout to “autosize”
    which means it will take all the space available, remove all the margin around
    the figure and delete the key/values for “template”, “width”, and “height ” that
    where generated by default from the python figure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Finally, I declare that the component returned by my StationsMap() function
    is a plotly component including all the traces from my son and the modified layout.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that you can pass parameters to a component directly inside the tag using
    the format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In the case of a plotly component, we pass a parameter data which is a list
    of objects representing the different traces of the chart, a parameter layout
    which is an object containing the layout information of the chart, and extra parameters
    like “style” or “useResizeHandler” which are parameters to indicate that the div
    generated by plotly should take all the remaining space.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7838b650aafd89f40f8cd6c97b306065.png)'
  prefs: []
  type: TYPE_IMG
- en: How plotly is rendered as a component of the app, same as the python version,
    Author Illustration
  prefs: []
  type: TYPE_NORMAL
- en: Building the Table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are missing one last component to complete our App Layout: a table summarizing
    the information of the surrounding stations.'
  prefs: []
  type: TYPE_NORMAL
- en: Tables are components that can be difficult to design because we need to find
    the right level of information to show. They are usually more difficult to interpret
    than charts, but they are still very useful when you want an overall view of the
    details of your data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of our component, we want to provide some of the raw data available
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: the address of the station
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the price of the fuel of interest which is expressed in €/L.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On top of that, we can as well transform the data to be more concrete for a
    user, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: the total price of an average full tank (say 60L)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: he potential saving or loss in comparison to the average places of the surrounding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and why not add a Google Map link so that they can be redirected to Google services
    to get more information about the provided address?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This looks like nothing, but putting yourself in the shoes of your customers
    is very important. The more clarity you bring to them in one look at the data,
    the more they will like your application and come back.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given that we are still in a “static view mode”, I will generate a sample of
    data in python based on the default map and use that at first for my layout. There
    are multiple ways of representing a table in a json, I chose to use a list of
    Objects that I find personally more convenient:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'I’ll add some tips:'
  prefs: []
  type: TYPE_NORMAL
- en: If you are more comfortable in Python than in Javascript, it is fine. In that
    case, make all your data transformations in Python. We will see in one of the
    coming articles how to connect our React application to a Python API where most
    of the data transformation logic will be handled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using pandas, you can very easily convert a DataFrame to a list of objects
    and dump it as a json using:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ec2461d4f416fb3fb803d2570ea4eb38.png)'
  prefs: []
  type: TYPE_IMG
- en: An example of DataFrame in python, before dumping in json
  prefs: []
  type: TYPE_NORMAL
- en: As with the plotly figure, let’s copy the file to the relevant folder
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have a base of work, let’s code the table. This is the general
    layout in HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The <table> tag is used to initialize the table. We then define the table line
    by line. We start with the header which is a special part, indicated by the tag
    <thead>, and later by the body (the different rows of the table) in the <tbody>
    tag.
  prefs: []
  type: TYPE_NORMAL
- en: Then each line is defined in the same way. <tr> is used to define a full row,
    and <th> a cell in that line. This means that if you have 4 cells in your header,
    you should define your cells in your rows with also 4 cells.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s use our static data. As in the last part of the graph, we start by
    importing the pre-generated .json with the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Remember that this tableJson is an Array of Objects. We can use again the Array.map()
    method to iterate through the Objects of the array and generate dynamically our
    table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'A few comments here:'
  prefs: []
  type: TYPE_NORMAL
- en: As we generate dynamically the rows of the table, React will generate a warning
    if we are not identifying each row with a unique key. I decided to pass the address
    which is in my case unique, but another way would have been to generate them automatically
    using an external lib like **uuid**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that in JSX logic, the variables inside the tag have to be expressed using
    {} to indicate that they are variables (and their value should be accessed in
    the tag or in the parameters of the tag)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We access the element of an Object in javascript the same way we do in python,
    so you should be familiar with the notation if you come from the python field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’ll never repeat it enough but keep a clean format. In this case, I don’t display
    only the raw numbers, but I add a suffix (€ or €/L) which makes the data more
    comprehensive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have now a very simple version of the table which looks like this, after
    a bit of formatting with some .css:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2d5e33d5bf9434232a7b833f4bf1f0f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Our data table, after some formatting, Author Illustration
  prefs: []
  type: TYPE_NORMAL
- en: 'This version is not a bad start, but we can certainly improve it. First, we
    can add the links to Google Maps as mentioned above. You can pre-compute them
    from the address of the station using the below formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can generate a hyperlink from the cell of the address in our table
    passing that google link in a <a href> tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We want to make a last improvement to this table. You might have noticed I
    added in my python table a column named “better than average”? This is a value
    that will help us create a color mapping to quickly see the cheap stations to
    the expensive ones. Let’s create a variable color in our mapping function that
    is by default black, but that can become red or green depending on the “better
    than average” field, and let''s pass that color to the style of the last cell
    of each row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'And let’s have a look at our final result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ca6ca6a392967acc82cfc83d01bd110b.png)'
  prefs: []
  type: TYPE_IMG
- en: Our final Table component, Author Illustration
  prefs: []
  type: TYPE_NORMAL
- en: Our table is ready, we can now see very easily which stations are the more competitive
    in terms of price, and by a simple click, check their location in Google Maps!
  prefs: []
  type: TYPE_NORMAL
- en: Final App Layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At that point, our layout is finalized. We already implemented the main App
    layout in the first chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'So we can simply look at [http://localhost:3000/](http://localhost:3000/) and
    check what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ae7743a4967e9d6f11b15e61b53171de.png)'
  prefs: []
  type: TYPE_IMG
- en: The final app layout, Author Illustration
  prefs: []
  type: TYPE_NORMAL
- en: Note that if you are not satisfied with this layout, given the modularity of
    our code, it is very simple to change it to a different configuration. (In our
    next article, we will also talk about application responsiveness)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we continued the work initiated last time about our Station
    Finder Application. In particular, we started to look in detail at the framework
    React to build robust and highly customizable Web Applications.
  prefs: []
  type: TYPE_NORMAL
- en: We reach a point where we can run a static version of the application on a test
    server locally, but we are still far from having an application fully operational.
  prefs: []
  type: TYPE_NORMAL
- en: Our React prototype is not done yet, and in the next article, we will continue
    to explore React, focusing this time on interactive features.
  prefs: []
  type: TYPE_NORMAL
