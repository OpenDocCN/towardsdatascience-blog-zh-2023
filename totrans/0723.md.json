["```py\n# Define the Robot class\nclass Robot:\n    def __init__(self):\n        self.head = None\n        self.arms = None\n        self.legs = None\n        self.torso = None\n        self.battery = None\n```", "```py\nfrom abc import ABC, abstractmethod\n\nclass RobotBuilder(ABC):\n    @abstractmethod\n    def reset(self):\n        pass\n\n    @abstractmethod\n    def build_head(self):\n        pass\n\n    @abstractmethod\n    def build_arms(self):\n        pass\n\n    @abstractmethod\n    def build_legs(self):\n        pass\n\n    @abstractmethod\n    def build_torso(self):\n        pass\n\n    @abstractmethod\n    def build_battery(self):\n        pass\n\n    @abstractmethod\n    def get_robot(self):\n        pass \n```", "```py\n# Define a Concrete Builder for a Robot\nclass HumanoidRobotBuilder(RobotBuilder):\n    def __init__(self):\n        self.robot = Robot()\n        self.reset()\n\n    def reset(self):\n        self.robot = Robot()\n\n    def build_head(self):\n        self.robot.head = \"Humanoid Head\"\n\n    def build_arms(self):\n        self.robot.arms = \"Humanoid Arms\"\n\n    def build_legs(self):\n        self.robot.legs = \"Humanoid Legs\"\n\n    def build_torso(self):\n        self.robot.torso = \"Humanoid Torso\"\n\n    def build_battery(self):\n        self.robot.battery = \"Humanoid Battery\"\n\n    def get_robot(self):\n        return self.robot\n```", "```py\n# Define a Concrete Builder for a Robot\nclass DroneRobotBuilder(RobotBuilder):\n    def __init__(self):\n        self.robot = Robot()\n        self.reset()\n\n    def reset(self):\n        self.robot = Robot()\n\n    def build_head(self):\n        self.robot.head = \"Drone Head\"\n\n    def build_arms(self):\n        self.robot.arms = \"No Arms\"\n\n    def build_legs(self):\n        self.robot.legs = \"No Legs\"\n\n    def build_torso(self):\n        self.robot.torso = \"Drone Torso\"\n\n    def build_battery(self):\n        self.robot.battery = \"Drone Battery\"\n\n    def get_robot(self):\n        return self.robot\n```", "```py\n# Define the RobotDirector class with methods to create different robots\nclass RobotDirector:\n    def __init__(self):\n        self.builder = None\n\n    def set_builder(self, builder):\n        self.builder = builder\n\n    def build_humanoid_robot(self):\n        self.builder.reset()\n        self.builder.build_head()\n        self.builder.build_arms()\n        self.builder.build_legs()\n        self.builder.build_torso()\n        self.builder.build_battery()\n        return self.builder.get_robot()\n\n    def build_drone_robot(self):\n        self.builder.reset()\n        self.builder.build_head()\n        self.builder.build_torso()\n        self.builder.build_battery()\n        return self.builder.get_robot() \n```", "```py\n# Client code\nif __name__ == \"__main__\":\n    director = RobotDirector()\n\n    humanoid_builder = HumanoidRobotBuilder()\n    director.set_builder(humanoid_builder)\n    humanoid_robot = director.build_humanoid_robot()\n\n    drone_builder = DroneRobotBuilder()\n    director.set_builder(drone_builder)\n    drone_robot = director.build_drone_robot()\n\n    print(\"Humanoid Robot Components:\")\n    print(f\"Head: {humanoid_robot.head}\")\n    print(f\"Arms: {humanoid_robot.arms}\")\n    print(f\"Legs: {humanoid_robot.legs}\")\n    print(f\"Torso: {humanoid_robot.torso}\")\n    print(f\"Battery: {humanoid_robot.battery}\")\n\n    print(\"\\nDrone Robot Components:\")\n    print(f\"Head: {drone_robot.head}\")\n    print(f\"Arms: {drone_robot.arms}\")\n    print(f\"Legs: {drone_robot.legs}\")\n    print(f\"Torso: {drone_robot.torso}\")\n    print(f\"Battery: {drone_robot.battery}\")\n```"]