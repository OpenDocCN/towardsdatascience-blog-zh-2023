- en: How to Integrate the Microsoft Translator API in Your Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-integrate-the-microsoft-translator-api-in-your-code-89bad979028e](https://towardsdatascience.com/how-to-integrate-the-microsoft-translator-api-in-your-code-89bad979028e)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A comprehensive beginner friendly guide
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://namiyousef96.medium.com/?source=post_page-----89bad979028e--------------------------------)[![Yousef
    Nami](../Images/09a0baa3fe20c858ace5b7923b7c753a.png)](https://namiyousef96.medium.com/?source=post_page-----89bad979028e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----89bad979028e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----89bad979028e--------------------------------)
    [Yousef Nami](https://namiyousef96.medium.com/?source=post_page-----89bad979028e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----89bad979028e--------------------------------)
    ·13 min read·Jan 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/af8adbcc9c869a0985b8e5a4eed8d533.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo from [Unsplash](https://unsplash.com/photos/5Z8mR4vqJD4) courtesy of [Edurne](https://unsplash.com/@edurnetx).
  prefs: []
  type: TYPE_NORMAL
- en: There are many good translator services out there, however one of the most versatile
    and easiest to setup is the Microsoft Translator [[1](https://www.google.com/search?q=microsoft+translator&oq=microsoft+translator&aqs=chrome.0.35i39j69i59l2j0i512l2j69i60l3.2307j0j7&sourceid=chrome&ie=UTF-8)],
    giving you access to translators for a multitude of low and high resource languages
    for free (subject to some monthly translation limits).
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, I’ll go over how to setup a translator instance on Azure and
    how to write an interface to connect with it in you code with best practices.
    If you are familiar with Azure and already have a Translator instance setup, then
    visit the project [repository](https://github.com/namiyousef/ml-utils) directly
    for access to the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'This tutorial will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Azure Translator Instance
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sending Your First Translation Request
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cleaning Up Your Code and Structuring Your Project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Considerations for Using Jupyter Notebooks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up a Translator Instance on Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating an Azure Account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to create a Microsoft Azure [account](https://azure.microsoft.com/en-us/free/).
    This will require you to have:'
  prefs: []
  type: TYPE_NORMAL
- en: A valid address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A valid email account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A valid phone number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A valid credit or debit card*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you’ve made an account, you will be asked if you want to use the free service
    or the pay-as-you-go subscription. **Go for the free service,** you can always
    move back to the pay-as-you-go subscription if you think that is more suitable
    for you**. Azure will aggressively try to switch you to the pay-as-you-go service,
    but you can always stick to the free service.
  prefs: []
  type: TYPE_NORMAL
- en: '***Note:** the credit/debit card is used to verify who you are. No funds are
    taken if you are using the free tier account'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '****Note:** For more information on the pricing of the translator service,
    visit the [Translator Pricing documentation](https://azure.microsoft.com/en-us/pricing/details/cognitive-services/translator/).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Setting Up the Translator API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you’ve logged into Azure, click “Create a resource” then search “translator”.
    Finally, click on the translator service and click create.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/35bcb719ff446fc4d866696606afc9f6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you’ve done that, you’ll find a page that requires a number of parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Resource Group:** a name to collect multiple resources that belong to the
    same project. This controls how you are billed if you go for a non-free subscription.
    Name this something that is relevant to your project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Region*:** the region where your instance is running. This is related to
    how Microsoft manages resources and disaster [recovery](https://learn.microsoft.com/en-us/azure/reliability/availability-zones-overview).
    The recommended region is Global.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name:** the name of your translator service. For translation purposes, this
    has no effect, but if you need document translation then it will affect the name
    of your resource’s endpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pricing Tier*:** Go for the free version as a start'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once filled, click create. Azure will run a simple validation and take you to
    another page where you can confirm the creation of your resource.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/32f3c0de3c658d51d30c143d00bf02ce.png)'
  prefs: []
  type: TYPE_IMG
- en: '***Note:** you cannot have multiple instances of the translator with the same
    Region and Pricing Tier. For example, if you have an free tier instance with Region
    as East US, to add another free instance you need to change the Region.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Finding Information About Your Resource
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, Azure will take you to the resource that you created. However the
    next time you log in you’ll have to find it yourself. You can do this from the
    home page by clicking on the Translator icon. This will take you to the translator
    page where you can find all your instances.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fdc59f99c3b38ab73b0e13d8238303a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on your instance will take you to the instance page, where you can
    find all its relevant configurations and details. These will become relevant in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, you can use your translation instance in the browser to get an idea
    of how the input text is represented, and what the output text looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/594c029e96b5be7789fc4696716a5c12.png)'
  prefs: []
  type: TYPE_IMG
- en: Send Your First Translation Request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, Azure gives you default code that you can copy to make your first
    translation request. However, if you are unfamiliar with how requests work then
    you may struggle to understand what it’s doing, and thus you won’t be able to
    use it effectively in your code. Here I’ll go step by step into the concepts involved
    in making your first translation request.
  prefs: []
  type: TYPE_NORMAL
- en: Brief Intro to HTTPs Requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before writing the code, it’s worth covering a couple of concepts related to
    the translation API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The API has a URL which allows you to access it. For the Microsoft Translator,
    this is a public URL:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](https://api.cognitive.microsofttranslator.com/?source=post_page-----89bad979028e--------------------------------)
    [## Azure Cognitive Services Translator documentation - quickstarts, tutorials,
    API reference - Azure…'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Cognitive Services Translator is a cloud-based machine translation service
    you can use to translate text through…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: api.cognitive.microsofttranslator.com](https://api.cognitive.microsofttranslator.com/?source=post_page-----89bad979028e--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: The API has **endpoints** (these are like paths on a url) that you send HTTPs
    requests to. For example, the most basic endpoint is the **languages** endpoint.
    This endpoint simply returns all the languages that you can choose from. It is
    a **get** endpoint because it “gets” resources or data from an API or a resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each endpoint has parameters that specify what you are asking from the endpoint.
    For instance, the languages endpoint has a parameter **api-version**, which indicates
    which version of the translator you’re using.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, the complete URI for the languages endpoint using version 3.0
    of the Microsoft API is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/abcbe6622a55c588a257a2f71a77236d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can call the languages endpoint in Python using the `requests` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This sends a HTTPs request to the API to retrieve the languages available for
    version 3.0 of the translator. In fact, because this endpoint is public, you can
    copy and paste that URL into your browser* to get the same output that you would
    in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://api.cognitive.microsofttranslator.com/languages?api-version=3.0](https://api.cognitive.microsofttranslator.com/languages?api-version=3.0)'
  prefs: []
  type: TYPE_NORMAL
- en: '***Note:** in the background, your browser is sending a **get** request to
    the URL and returning you the output'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You can find more info on the endpoints available on the official API [documentation](https://learn.microsoft.com/en-us/azure/cognitive-services/translator/reference/v3-0-reference).
  prefs: []
  type: TYPE_NORMAL
- en: The translate Endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the endpoint that allows us to translate text. Unlike the **languages**
    endpoint, this is a **post** request and not a **get** request. This means that
    you are sending some data over to generate an output. You are not merely “getting”
    a resource. You send the data as part of a **request body**. These are bytes of
    data that are transmitted as part of your request, but they are different to parameters
    in that they don’t get appended to the URI path.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **translate** endpoint has the following requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Parameters**'
  prefs: []
  type: TYPE_NORMAL
- en: '**api-version (required):** version of the translator you want to use'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**to (required):** [ISO 639–1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
    language code(s) of the language(s) you want to translate your text(s) into'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Request Body**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Array of texts that you want to translate in the following format: `{"text":
    "This is a sentence I want to translate"}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Python, you can **post** requests as follows. I’ve deliberately added two
    translation languages to show you how multiple parameters of the same name are
    added to a request url.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Managing Access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, if you ran the above code then you should have gotten an error. This is
    because we cannot simply run the post service on it’s own. We need authentication.
  prefs: []
  type: TYPE_NORMAL
- en: This is why we needed to create the account and translator instance the first
    place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attached to your instance is a unique key that allows Microsoft to:'
  prefs: []
  type: TYPE_NORMAL
- en: a) verify that the request you are sending is coming from a source that has
    an Azure account
  prefs: []
  type: TYPE_NORMAL
- en: b) calculate your usage of the service, for billing or restriction purposes*
  prefs: []
  type: TYPE_NORMAL
- en: '***Note:** remember that on the free version, while you are not billed, you
    are subject to a certain number of translations that you can make per month.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This unique key can be communicated with Microsoft by using request headers.
    These are key concepts in HTTPs. They can tell the server the following information
    about your request:'
  prefs: []
  type: TYPE_NORMAL
- en: IP address and port
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type of data to expect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The translator API requires the following items in the header:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Subscription Key:** this is the authentication key that tells Microsoft that
    you are authorised to use the service. It is tied to the translator resource that
    you created in the beginning of the tutorial.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subscription Region:** this is the region where your project exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content Type:** the type of data that is being sent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client Trace ID:** a unique ID that identifies your computer. You can read
    more about this [here](https://www.geeksforgeeks.org/generating-random-ids-using-uuid-python/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find your subscription key on the Azure project page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/158d7dbebfb17c753a84ca7d37cc6e95.png)'
  prefs: []
  type: TYPE_IMG
- en: In the “Keys and Endpoint” page, you can find two API keys (any of which can
    be used to authenticate you).
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you can define the headers and add them to the post request you created
    above, to get a successful translation output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Your API keys are what allow you to use the service. These must never get leaked,
    and it is a good idea to regenerate them every couple of months. In the next section,
    we will cover best practices for decreasing the chances of leaks.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Cleaning Up the Code and Structuring Your Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section will get into good software development practices for integrating
    the Microsoft Translate API functionality within your code and projects. We will
    cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Directory structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to hide credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to package the requests into functions and add basic logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to add informative documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Directory Structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When developing an application, you may be interacting with multiple external
    APIs. As such, it is a good practice to store functionality for external APIs
    in separate files and then call them in your main application code. I recommend
    having all the external APIs in a subfolder called ‘external_apis’ under your
    package, and separate Python files that include functions for calling each API.
    I also recommend adding a `config.py` file within the external_apis subfolder
    to add configurations for your external APIs.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0fc0c43358870353da55a8dcfb86b3e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Hiding Credentials Using Environment Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Remember:** you should never leak your API keys. If they do, regenerate them
    straightaway.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Yet, you need them in order to make translation requests. In general, you should
    avoid (in order of severity):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hard coding the key in your code:** Even if you host your code privately,
    the key will always be available in commit histories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Printing your key (anywhere):** less risky, but having print statements increases
    the likelihood that your key is pushed to GitHub as part of Jupyter Notebook outputs
    or stored in server logs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Save your key in configuration files:** far less risky, as pushing configuration
    files by accident is unlikely, and `.gitignore` can make it near impossible. However,
    there is still a better method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The best method for using credentials in your code is to use environment variables.
    These are session based variables, meaning that they are only saved for the duration
    of the terminal session that you are running your code against, thus greatly minimising
    human errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we can make use of the `config.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'With this, by default our key takes the value “default_key”. We’d need to explicitly
    set it prior to running any code using the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to be extra cautious, you can add extra levels of abstraction to
    the API key to make it difficult to accidentally extract its value. For example,
    you can create a class `Password` , storing the password as a hidden variable,
    and then adding an explicit “get_password” method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This way, you call the `get_password` method when defining the `headers` for
    the request.
  prefs: []
  type: TYPE_NORMAL
- en: Packaging Your Code Into Functions and Adding Logging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we are aware of the basics, we make some improvements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Add all identifiers for the Microsoft Translator API in the** `**config.py**`**file**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here we have also added the location of your instance as an environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: '**Add separate functions for each endpoint**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Add logging and documentation using** `**typing**` **and** `**sphinx**` **style
    docstrings**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Considerations for Using Jupyter Notebooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When using Jupyter Notebook, simply setting environment variables on the Terminal
    is not enough, because by default Jupyter will not be able to see them. Instead
    here is what I recommend:'
  prefs: []
  type: TYPE_NORMAL
- en: Append “_jupyter” when setting your environment variables in the Terminal, then
    run `jupyter notebook`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Use the `dot_env` package (you may have to install this using `pip` ) to set
    the correct environment variable by reading the “_jupyter” environment variable.
    Add the `%%capture` magic command to ensure that the environment variable is not
    printed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You should now be able to authenticate your requests with Microsoft within Jupyter
    Notebooks.
  prefs: []
  type: TYPE_NORMAL
- en: Concluding Remarks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we went through setting up a Microsoft Translate instance on
    Azure and integrating it into projects using best practices.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s worth mentioning that while the free version is very good, it is subject
    to resource limits (2 million characters per month). While that seems like a lot,
    it runs out pretty quickly. I experienced this recently in a project where I was
    using the Translate API for data augmentation. Further, there is a limit of 50000
    characters per translation request, which means you have to be very careful when
    translating larger texts. The request is calculated as follows: **total_chars_in_your_texts
    * n_languages**. So in cases where you have larger texts, it makes sense to translate
    it separately per language or a batch of languages.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I will be releasing an advanced guide for using the Microsoft API where I’ll
    introduce functions for automatically batching texts such that you are making
    the best use of the max char limit. Till then, you can find the code for this
    article here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/namiyousef/ml-utils/blob/develop/mlutils/external_apis/microsoft.py?source=post_page-----89bad979028e--------------------------------#L213)
    [## ml-utils/microsoft.py at develop · namiyousef/ml-utils'
  prefs: []
  type: TYPE_NORMAL
- en: Useful ML util functions. Contribute to namiyousef/ml-utils development by creating
    an account on GitHub.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/namiyousef/ml-utils/blob/develop/mlutils/external_apis/microsoft.py?source=post_page-----89bad979028e--------------------------------#L213)
  prefs: []
  type: TYPE_NORMAL
- en: Author’s Note
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you liked this article or learned something new, please consider getting
    a membership using my referral link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://namiyousef96.medium.com/membership?source=post_page-----89bad979028e--------------------------------)
    [## Join Medium with my referral link — Yousef Nami'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Yousef Nami (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: namiyousef96.medium.com](https://namiyousef96.medium.com/membership?source=post_page-----89bad979028e--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: This gives you unrestricted access to all of Medium, while helping me produce
    more content at no extra cost to you.
  prefs: []
  type: TYPE_NORMAL
- en: Reference List
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] Microsoft Translator. Available from: [https://www.google.com/search?q=microsoft+translator&oq=microsoft+translator&aqs=chrome.0.35i39j69i59l2j0i512l2j69i60l3.2307j0j7&sourceid=chrome&ie=UTF-8](https://www.google.com/search?q=microsoft+translator&oq=microsoft+translator&aqs=chrome.0.35i39j69i59l2j0i512l2j69i60l3.2307j0j7&sourceid=chrome&ie=UTF-8)'
  prefs: []
  type: TYPE_NORMAL
- en: '*All images by author unless otherwise specified*'
  prefs: []
  type: TYPE_NORMAL
