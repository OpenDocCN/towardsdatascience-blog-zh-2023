- en: 'GitHub for The Modern Data Scientist: 7 Concepts You Can’t .gitignore'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/github-for-the-modern-data-scientist-7-concepts-you-cant-gitignore-c082b1e882e9](https://towardsdatascience.com/github-for-the-modern-data-scientist-7-concepts-you-cant-gitignore-c082b1e882e9)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explained with a bit of fun, wit and visuals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/?source=post_page-----c082b1e882e9--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----c082b1e882e9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c082b1e882e9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c082b1e882e9--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----c082b1e882e9--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c082b1e882e9--------------------------------)
    ·11 min read·May 17, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d9add96480d3a682d10b6fcc7ad06fe8.png)'
  prefs: []
  type: TYPE_IMG
- en: My pineapple buddies. With Midjourney.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you think data scientists and ML engineers are uncomfortable *only* with
    Git, you should look at their GitHub profiles. They are more deserted than a far-away,
    unnamed island in the Pacific ocean.
  prefs: []
  type: TYPE_NORMAL
- en: My profile was a typical case of this when I started out. I think that was largely
    due to the fact that all the courses I took (and there were many) wanted to teach
    me the shiny stuff first like machine learning to keep me interested and leave
    out the boring parts to myself, like learning GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, I had learn these seven GitHub concepts that I am about to explain in a
    very hard way. (Overdramatization: I just read the docs and had a chat :) )'
  prefs: []
  type: TYPE_NORMAL
- en: Now, you get to learn them in a much more fun way than I did. (I hope.)
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the way, I am assuming you know Git already to understand the article. If
    not, here is my previous post on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/git-for-the-modern-data-scientist-9-git-concepts-you-cant-ignore-b4eaf7a154c2?source=post_page-----c082b1e882e9--------------------------------)
    [## Git For the Modern Data Scientist: 9 Git Concepts You Can’t Ignore'
  prefs: []
  type: TYPE_NORMAL
- en: Edit description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/git-for-the-modern-data-scientist-9-git-concepts-you-cant-ignore-b4eaf7a154c2?source=post_page-----c082b1e882e9--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 0\. Remote repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Git repositories come in two flavors: local and remote.'
  prefs: []
  type: TYPE_NORMAL
- en: A local Git repository is stored only on your computer. Its remote counterpart,
    on the other hand, is stored on a server (usually GitHub) rather than on some
    rusty laptop so that others can collaborate with you on the project without having
    to be physically in the room.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0651ae5161ebba7b345d3a87ee6d9675.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me
  prefs: []
  type: TYPE_NORMAL
- en: However, a remote repository isn’t only for collaboration. Since it is on a
    server, you can access it from any machine with an internet connection. This beats
    carrying around your heavy laptop from office to home to local cafe to office
    to home.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. REAMDE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: READMEs are an essential part of any project, yet they are often overlooked.
    We all know what a README is. We are not children. So why don’t we take the time
    to add it to our repositories?
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b0fb842319c497ac210246d630774740.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps because, since we know full well what our code is about and how it works,
    we feel we don’t need to explain it to others. But that isn’t always the case.
  prefs: []
  type: TYPE_NORMAL
- en: For example, imagine taking a break for a couple of months from a project and
    then getting back to it. Would you remember what each and every one of the files
    does?
  prefs: []
  type: TYPE_NORMAL
- en: Personally, when I come back to a long-paused project, it always feels like
    I am reading someone else’s code and ideas. In situations like this, a README
    can save the project by telling you where you left off and what you were doing.
    You won’t have to give up the entire thing because you feel like you have to start
    from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of READMEs: personal READMEs and public-facing READMEs.
    For personal READMEs, the purpose is to help you, the developer, like the above
    case.'
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, public-facing READMEs are for others who might be interested
    in your project. 99% of the time, when a person comes across a GitHub repository,
    they judge it not by how well the code is written (they almost never look at the
    code) but how well it is represented to others.
  prefs: []
  type: TYPE_NORMAL
- en: Think of it as the user manual for your project. It is the first thing people
    will see when they visit the repo, and it should give them a clear idea of what
    your project is and how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, a public-facing README is your only chance to explain your thought
    process behind model selection, methodology for validation, and results of model
    testing in a clear and concise manner.
  prefs: []
  type: TYPE_NORMAL
- en: If you still hate writing READMEs after all this, you should check out the Awesome
    README Templates repository, put together for lazies like us.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/matiassingers/awesome-readme?source=post_page-----c082b1e882e9--------------------------------)
    [## GitHub - matiassingers/awesome-readme: A curated list of awesome READMEs'
  prefs: []
  type: TYPE_NORMAL
- en: 'A curated list of awesome READMEs Elements in beautiful READMEs include, but
    are not limited to: images, screenshots…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/matiassingers/awesome-readme?source=post_page-----c082b1e882e9--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Clone it or fork it?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When someone looks at a remote repository, there are four things that may happen.
    The likeliest course of action (case 0) is they ignore it or give it a star if
    they are feeling generous.
  prefs: []
  type: TYPE_NORMAL
- en: In the first case, if the README was convincing enough, they might clone it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d1c32c4dec021e8b6ed2f82b3d5caa89.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me
  prefs: []
  type: TYPE_NORMAL
- en: Cloning a remote repository with commands like `git clone https://github.com/username/awesome_repo`
    creates an exact copy of `awesome_repo` on your local machine, giving you access
    to the project's entire Git history as well as write access to all the files.
    However, if you make changes to this local copy of `awesome_repo`, its remote
    copy won't feel a thing.
  prefs: []
  type: TYPE_NORMAL
- en: In the second case, if the README was even more convincing, a person might fork
    it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f303bcbe2ed13775df0d00b9b34ef289.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me
  prefs: []
  type: TYPE_NORMAL
- en: When you fork `awesome_person`'s `awesome_repo` on GitHub, you will have the
    exact copy of `awesome_repo` under your account.
  prefs: []
  type: TYPE_NORMAL
- en: Your GitHub page will have a new `your_username/awesome_repo` repository with
    the same content and history as `awesome_person/awesome_repo`. If you want to
    make changes to this copy, you can clone `your_username/awesome_repo` so that
    it is also on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of reasons why someone might fork another’s repo. The number
    one reason is to contribute to `someone/awesome_repo` by submitting pull requests
    (see below). Another reason is to create a new project based on the original code,
    without affecting it.
  prefs: []
  type: TYPE_NORMAL
- en: A notable example of this is [the Manim GitHub community](https://github.com/ManimCommunity/manimhttps://github.com/ManimCommunity/manim),
    which is a more maintained and documented fork of [the legendary Manim repository](https://github.com/3b1b/manim)
    by Grant Sanderson (creator of 3Blue1Brown and all its videos).
  prefs: []
  type: TYPE_NORMAL
- en: To differentiate between originals and forks, GitHub adds a “forked from `original_repo`”
    label on repository pages.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The third case is when you access one of your own remote repositories from a
    different machine. For instance, you left your laptop in a dry cleaner’s, and
    you want to continue working on the project in the office.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, all you have to do is clone the repo to download its contents
    to the office Mac. But, the Git installation on the Mac must be under your GitHub
    username if you want to sync your changes.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Push and pull
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using Git, the currency of the terms “push” and “pull” are changes. Let’s
    go through the most common cases of using these commands.
  prefs: []
  type: TYPE_NORMAL
- en: In Case 0, you have a local repository with many commits and branches, and you
    want to send them all to a new empty remote repository on GitHub. First, you need
    to specify the web address of the remote repository in Git using the command `git
    remote add remote_name https://github.com/username/repo_name.git`. Usually, the
    replacement for `remote_name` is `origin`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9d525e566b95d1a699584b3f066f2593.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me
  prefs: []
  type: TYPE_NORMAL
- en: Then, you perform your first “push” by calling `git push`, which sends all your
    commits in the current branch to GitHub. Congrats!
  prefs: []
  type: TYPE_NORMAL
- en: In Case 1, you make *new* local commits to the repository and want to send them
    to the remote, so you call git `push again`. This command is always used to keep
    the remote repository up-to-date with the local repository.
  prefs: []
  type: TYPE_NORMAL
- en: In Case 2, you may be working on a big project with many contributors, and you
    already have a copy of the project on your machine that is two days old. To download
    the new changes made by others during this time, you need to perform a `git pull`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f82eaec3dcd7f0e4c73a4550d9ccd627.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me
  prefs: []
  type: TYPE_NORMAL
- en: A pull ensures that your local repository is up-to-date with the remote in case
    multiple people are making changes to it.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Pull requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pull requests are like knocking on your neighbor’s door and saying, “Hey, I
    made some changes to your lawn. Take a look and see if you like it!” But instead
    of lawns, we’re talking about repositories.
  prefs: []
  type: TYPE_NORMAL
- en: PRs are a key part of the collaborative nature of open-source projects. They
    allow contributors (regular programmers) to suggest changes and improvements to
    an existing project and for the project maintainers to review and approve those
    changes before they are merged into the main codebase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say you want to make a pull request to the Scikit-learn repo (my sweet
    dream :). Here is the workflow you have to follow (for making pull request to
    any repo):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 0: Fork Scikit-learn so that you have a copy under your account.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Clone your Scikit-learn copy so that you have a copy on your machine.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Create a new branch so you can tinker around your copy without affecting
    the main branch.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Make your changes — write new code, fix bugs, or typos in the docs,
    or make other improvements.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Test your changes — make sure your changes are error-free and work
    as intended.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 5: Push the branch with your changes (`git push` will send them to your
    remote copy of Scikit-learn).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 6: Create the request — from your forked repository, click on the “New
    pull request” button. This will put your changes under the eyes of Scikit-learn
    maintainers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 7: Wait till probably your hair turns gray for maintainers to review your
    request.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 8: Be disappointed or happy as they either reject or accept your request.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Conditional step 9: The maintainers merge your request so that it will be included
    in the next release.'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. GitHub issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Think of GitHub issues as a more civilized and democratic version of StackOverflow
    threads. They enable people to track and report problems, bugs, or feature requests
    for a specific repository.
  prefs: []
  type: TYPE_NORMAL
- en: The maintainers of the repo can assign issues to individuals or teams and label
    them based on their severity and impact.
  prefs: []
  type: TYPE_NORMAL
- en: In simpler terms, GitHub issues are management tools for software projects that
    help streamline communication and collaboration. For example, the most popular
    repositories have issue templates that ensure the questions asked are useful,
    reviewable, and answerable.
  prefs: []
  type: TYPE_NORMAL
- en: These templates are designed to help you ask targeted questions, rather than
    rambling or unfocused ones, which can help speed up the process of issue resolution.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. GitHub Actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The rabbit hole of GitHub actions is very deep. But we will only dip a few meters
    into the surface and learn the generics.
  prefs: []
  type: TYPE_NORMAL
- en: As a data scientist, you have a million things to do like analyzing data, building
    models, writing code, getting coffee… All of this can be quite repetitive and
    overwhelming
  prefs: []
  type: TYPE_NORMAL
- en: But if you know GitHub Actions, it will be like having a personal assistance
    for all repository-related tasks. With them, you can set up automated workflows
    that run whenever certain events occur.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can create an action that automatically validates the model
    performance on the test data when you train a new model. Or you could set up an
    action that deploys the model once you push a new release of your repo.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can imagine, there are many other workflows that can be automated this
    way. Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Run tests — automatically run unit or integration tests whenever you push new
    code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Train models — retrain existing ML models on a regular basis (e.g. daily, weekly,
    etc.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform pre-processing — run common processing tasks such as data cleaning,
    normalization, missing value imputation, feature extraction, etc.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'GitHub Actions are easy to set up. They are defined inside YAML files. Here
    is a sample YAML for an action that runs a unit test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To understand what is happening above, give a read to the official GitHub docs
    [here](https://docs.github.com/en/actions).
  prefs: []
  type: TYPE_NORMAL
- en: 7\. CI/CD pipelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CI/CD (continuous integration and development) is a concept stolen from DevOps
    in software engineering.
  prefs: []
  type: TYPE_NORMAL
- en: CI/CD pipelines are series of automated steps that your code goes through to
    ensure it’s in the most tip-top shape possible before releasing it into the wild.
    We can apply the same process so that our ML models and the code to train/deploy
    them are of the highest quality as well.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3ec8dca1272999e69495ac00f1223203.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Made With ML](https://github.com/GokuMohandas/Made-With-ML/blob/main/images/mlops/cicd/workflows.png).
    MIT license.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, CI/CD pipelines are like well-oiled machines that shift into
    gear whenever you make a new commit. Before the commit is merged, it goes through
    a series of steps in the pipeline that test the code and the models from various
    aspects.
  prefs: []
  type: TYPE_NORMAL
- en: 'And you guessed it, each step in the pipeline is defined as a GitHub action.
    Let’s take a helicopter’s-camera view at a sample machine learning lifecycle CI/CD
    pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: Data collection and preprocessing — Combine data from various sources and transform
    it before training.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Model training — machine learning models are trained on the preprocessed data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Model evaluation — the trained models are evaluated on a separate set of data
    to assess their performance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Model deployment — the best performing model is deployed to production.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous monitoring — where the deployed model is continuously monitored to
    ensure it’s performing as expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each of these steps deserve articles of their own or even entire courses. But
    in short, CI/CD pipelines are silent heroes in most (active) machine learning
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In my Git article, I mentioned how Git was one of the most critical tools in
    developing machine learning systems as it is a go-to software for collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: The same argument stands for GitHub because without it, the collaborative nature
    of Git can’t really shine. GitHub provides a place to store Git-tracked repos
    so that others can access it.
  prefs: []
  type: TYPE_NORMAL
- en: While both Git and GitHub were not really designed for heavy data science and
    ML work, there are now helper tools like [DVC](https://medium.com/towards-data-science/how-to-version-gigabyte-sized-datasets-just-like-code-with-dvc-in-python-5197662e85bd)
    and [DagsHub](https://medium.com/towards-data-science/the-easiest-way-to-deploy-your-ml-dl-models-in-2022-streamlit-bentoml-dagshub-ccf29c901dac)
    that make them highly relevant in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading!
  prefs: []
  type: TYPE_NORMAL
- en: Loved this article and, let’s face it, its bizarre writing style? Imagine having
    access to dozens more just like it, all written by a brilliant, charming, witty
    author (that’s me, by the way :).
  prefs: []
  type: TYPE_NORMAL
- en: For only 4.99$ membership, you will get access to not just my stories, but a
    treasure trove of knowledge from the best and brightest minds on Medium. And if
    you use [my referral link](https://ibexorigin.medium.com/membership), you will
    earn my **supernova of gratitude** and a virtual high-five for supporting my work.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----c082b1e882e9--------------------------------)
    [## Join Medium with my referral link — Bex T.'
  prefs: []
  type: TYPE_NORMAL
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----c082b1e882e9--------------------------------)
    ![](../Images/a01b5e4fb641db5f35b8172a4388e821.png)
  prefs: []
  type: TYPE_NORMAL
- en: Image by me. Via Midjourney.
  prefs: []
  type: TYPE_NORMAL
