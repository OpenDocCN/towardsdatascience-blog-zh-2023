- en: Advanced GUI interface with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/advanced-gui-interface-with-python-cb04ef2e29b9](https://towardsdatascience.com/advanced-gui-interface-with-python-cb04ef2e29b9)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Getting started with more modern development interfaces with Python for your
    projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://bharath-k1297.medium.com/?source=post_page-----cb04ef2e29b9--------------------------------)[![Bharath
    K](../Images/b6f215f28132a953bcae80842301e303.png)](https://bharath-k1297.medium.com/?source=post_page-----cb04ef2e29b9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cb04ef2e29b9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cb04ef2e29b9--------------------------------)
    [Bharath K](https://bharath-k1297.medium.com/?source=post_page-----cb04ef2e29b9--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cb04ef2e29b9--------------------------------)
    ·8 min read·Mar 9, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c4bee57c2e59995debe5d5b15775f6fc.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Slava Keyzman](https://unsplash.com/@slavasfotos?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Almost every software that we use on the computer screen is a GUI interface
    of some sort. Most GUI applications provide a platform for friendly interaction
    with the software product. Notepad and the common calculator found in most windows
    systems are some simple examples of a GUI interface made accessible to all users.
  prefs: []
  type: TYPE_NORMAL
- en: Most programming languages allow us to develop a user interface through which
    a human-computer interaction can take place, including Python. With the help of
    Python and its different types of libraries available for GUI development, such
    as Tkinter, Kivy, PyQt5, and other similar tools, programmers can easily develop
    GUI interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: All these development tools provide a straightforward starting point for constructing
    almost any type of interface for performing numerous tasks. For interested viewers,
    I recommend checking out one of my previous articles on the seven best tools for
    developing UI graphics with starter codes to get started for each of the mentioned
    libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/7-best-ui-graphics-tools-for-python-developers-with-starter-codes-2e46c248b47c?source=post_page-----cb04ef2e29b9--------------------------------)
    [## 7 Best UI Graphics Tools For Python Developers With Starter Codes'
  prefs: []
  type: TYPE_NORMAL
- en: The seven best UI graphics tools available in Python for developing cool user
    interface technologies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/7-best-ui-graphics-tools-for-python-developers-with-starter-codes-2e46c248b47c?source=post_page-----cb04ef2e29b9--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: However, most of these interfaces look a little bland in terms of their design
    structure. For more aesthetically impressive and modern-looking design layouts,
    it is better to use a more oriented and advanced GUI interface to make the overall
    look of the software developed more engaging and appealing.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will focus on developing a slightly more modern development
    environment that has a better user interface with an overall design improvement
    for accessing and utilizing its features. For viewers interested in similar projects,
    I recommend checking out one of my previous articles on developing a calendar
    to track significant dates with Python programming.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/develop-your-own-calendar-to-track-important-dates-with-python-c1af9e98ffc3?source=post_page-----cb04ef2e29b9--------------------------------)
    [## Develop Your Own Calendar To Track Important Dates with Python'
  prefs: []
  type: TYPE_NORMAL
- en: Developing a calendar GUI interface to regulate your plans for 2022 and beyond
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/develop-your-own-calendar-to-track-important-dates-with-python-c1af9e98ffc3?source=post_page-----cb04ef2e29b9--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Modern GUI interface to load images:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/3cbfe29387d1d52a8fcb4bcd70dedf6f.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Brendan Beale](https://unsplash.com/@theophilus318?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: In this project, we will construct a modern-looking GUI development interface
    with a button for loading images randomly from the working directory. We will
    utilize the custom tkinter library as our primary UI development user interface
    to create the workflow, including the button, labels, images, and other objects
    necessary for the project.
  prefs: []
  type: TYPE_NORMAL
- en: The following package can be installed with a simple pip command as shown below.
    The custom tkinter library is available on the Python Package Index website, which
    you can check out from the link [here](https://pypi.org/project/customtkinter/).
  prefs: []
  type: TYPE_NORMAL
- en: pip install customtkinter
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Once you have installed the above library, we can proceed to the next step of
    importing the required libraries for developing the interface. It is important
    to note that it is also a good idea to also install the tkinter library if you
    haven’t already installed it, as these two libraries are interchangeably usable
    for specific tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Importing the necessary libraries:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first step, we will import all the essential libraries that we will utilize
    for constructing our advanced GUI interface. We will make use of the custom tkinter
    library that we recently installed via the pip command. We can also utilize the
    tkinter library simultaneously with the custom tkinter module, as some of the
    functions are derivative of each other.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will import the Pillow library, which is one of the best libraries
    in Python for handling different types of tasks related to images. We will import
    the ImageTk and Image classes for the Pillow library, which will enable us to
    handle tasks inside the GUI interface. Below is the code block for all the required
    library module imports.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting the themes and creating the background interface:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once we finish importing all the necessary libraries, the next essential step
    is to set the appearance and the theme modes for the development interface. For
    appearance, the custom tkinter library offers options, such as dark and light
    modes, whereas it allows blue, dark blue, and green as the options for the default
    color theme.
  prefs: []
  type: TYPE_NORMAL
- en: Once we set the appearance and default color themes, we can define the custom
    tkinter function as the root object to complete our functions. We will also set
    the geometry of the interface where we will perform our desired operations. Note
    that the dimensions can vary for specific purposes, and the size of the images
    used might have to be adjusted to perform the required task.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating the button function:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the next step, we will code a function that will enable us to display our
    image within the graphic window (either the entire screen or the respective frame).
    The photo image function in the ImageTk class allows us to display the desired
    image. We also use a custom Tkinter library where the images are displayed within.
    The code snippet for programming the same is provided below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating the frame and interfacing the button:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the final step of this section, we will create a frame in which the image
    will be displayed. We will pack the frame within the working graphic window. Once
    we have created the frame for displaying the image with the click of a button,
    we will create the actual button that will operate on the previously defined functionality.
    We will provide a central alignment to the button and pack the function. Finally,
    we will loop the working root function for the process. The code for the snippet
    is provided below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once you have completed coding the project, you can run the Python application.
    We notice a graphic window with a frame and a “Display Image” button within the
    frame. Once you click the following button, the image will be displayed within
    the frame. The working screenshot of the following project is provided below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/36c814bc9e536b604e8502fc62f5d3b3.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by Author
  prefs: []
  type: TYPE_NORMAL
- en: The complexity of this project is barely noticeable. It can be developed in
    a few lines of code with the correct libraries. However, the next section will
    cover a slightly more advanced version of this project, where we will implement
    an additional layer of functionality to make the project more creative.
  prefs: []
  type: TYPE_NORMAL
- en: 'Advanced improvement to load multiple images:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/3453fb37ce0eaaa178a4eaa9f6a1da98.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [NASA](https://unsplash.com/fr/@nasa?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will cover a slightly more advanced variation of the above
    project where we will display a randomized image each time we display the image
    and clear it. We will utilize the random library, which will enable us to interpret
    a random selection of an image each time the image is cleared with the “Delete
    Image” button and when the “Display Image” button is clicked right after. I have
    used the three images in this article for the generation of images. I have saved
    these three images as “Trees.jfif”, “Maps.jfif”, and “Books.jfif” in the working
    project directory.
  prefs: []
  type: TYPE_NORMAL
- en: The other additional function we are defining is the clear frame function, which
    will delete all the previous widgets assembled in the frame. For this reason,
    we will place the “Delete Image” and “Display Image” buttons outside the frame
    in the graphic window. The remaining process is the same for displaying the buttons
    in the graphical window and running the software. The code block for the entire
    project is provided below for ease of access to the developers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: For interested readers and developer enthusiasts, there are further additional
    improvements can be made to the above project as well. We can combine the display
    image and delete image button into a single entity as to avoid the pressing of
    two buttons each time an image needs to be displayed. A lot more unique features
    can also be made to the project by improvising the code and adding more necessary
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Conclusion:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/a5fbbaa4f0cc0a444287aaea97531117.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [freestocks](https://unsplash.com/ko/@freestocks?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: “The next big thing is the one that makes the last big thing usable.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — ***Blake Ross***
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Graphics and Graphic User Interfaces play a critical role in most software development
    projects. It is essential to have a more modern approach to emerging trends allowing
    us to create and develop innovative and creative working interfaces. Better human-computer
    interaction is guaranteed through a high-quality graphics interface.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we learned how to use custom tkinter to develop a more modern
    and advanced GUI interface with Python programming. We constructed our project
    to firstly display an image within the frame of the graphic window once the button
    is clicked. In the upcoming section, we covered a slight more sophisticated approach
    to the project for generating random images upon the click of the button.
  prefs: []
  type: TYPE_NORMAL
- en: I highly recommend trying out more advanced modifications and building multiple
    projects to get more familiar with the different functions and classes available
    in the custom tkinter library. If you want to get notified about my articles as
    soon as they go up, check out the following [link](https://bharath-k1297.medium.com/subscribe)
    to subscribe for email recommendations. If you wish to support other authors and
    me, then subscribe to the below link.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://bharath-k1297.medium.com/membership?source=post_page-----cb04ef2e29b9--------------------------------)
    [## Join Medium with my referral link - Bharath K'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Bharath K (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: bharath-k1297.medium.com](https://bharath-k1297.medium.com/membership?source=post_page-----cb04ef2e29b9--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: If you have any queries related to the various points stated in this article,
    then feel free to let me know in the comments below. I will try to get back to
    you with a response as soon as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Check out some of my other articles in relation to the topic covered in this
    piece that you might also enjoy reading!
  prefs: []
  type: TYPE_NORMAL
- en: '[](/image-filters-with-python-3dc223a12624?source=post_page-----cb04ef2e29b9--------------------------------)
    [## Image Filters with Python'
  prefs: []
  type: TYPE_NORMAL
- en: A concise computer vision project for building image filters using Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/image-filters-with-python-3dc223a12624?source=post_page-----cb04ef2e29b9--------------------------------)
    [](/develop-your-own-spelling-check-toolkit-with-python-740bf84a865d?source=post_page-----cb04ef2e29b9--------------------------------)
    [## Develop Your Own Spelling Check Toolkit with Python
  prefs: []
  type: TYPE_NORMAL
- en: Creating an application to verify your spellings effectively with Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/develop-your-own-spelling-check-toolkit-with-python-740bf84a865d?source=post_page-----cb04ef2e29b9--------------------------------)
    [](/beginners-guide-to-streamlit-for-deploying-your-data-science-projects-9c9fce488831?source=post_page-----cb04ef2e29b9--------------------------------)
    [## Beginners Guide to Streamlit for Deploying your Data Science Projects
  prefs: []
  type: TYPE_NORMAL
- en: Deploy your machine learning and data science projects as web apps with ease
    using streamlit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/beginners-guide-to-streamlit-for-deploying-your-data-science-projects-9c9fce488831?source=post_page-----cb04ef2e29b9--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Thank you all for sticking on till the end. I hope all of you enjoyed reading
    the article. Wish you all a wonderful day!
  prefs: []
  type: TYPE_NORMAL
