- en: NBA Analytics Using PySpark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/nba-analytics-using-pyspark-a1699ae1117a](https://towardsdatascience.com/nba-analytics-using-pyspark-a1699ae1117a)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Win ratio for back-to-back games, mean and standard deviation of game scores,
    and more with Python code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://jin-cui.medium.com/?source=post_page-----a1699ae1117a--------------------------------)[![Jin
    Cui](../Images/e5ddcbaa6d7da38f960d2c5fea71b538.png)](https://jin-cui.medium.com/?source=post_page-----a1699ae1117a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a1699ae1117a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a1699ae1117a--------------------------------)
    [Jin Cui](https://jin-cui.medium.com/?source=post_page-----a1699ae1117a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a1699ae1117a--------------------------------)
    ·7 min read·Apr 14, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0fb8acf97beb22f7a127864f2d599ba7.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Emanuel Ekström](https://unsplash.com/@emanuelekstrom?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just over a week ago I was watching an NBA game between the Milwaukee Bucks
    and the Boston Celtics. This was a match-up between the top 2 teams in the league,
    which many considered to be a prequel to the Eastern Conference finals. Being
    a big basketball and NBA fan myself, the game turned out rather disappointing
    as the Milwaukee Bucks lost to the Boston Celtics 140–99, a rare blow-out defeat
    for Milwaukee which holds the best (regular season) record in the 2022–2023 season.
  prefs: []
  type: TYPE_NORMAL
- en: Although this was out of character for Milwaukee especially given it’s a blow-out
    loss at home, the commentator of the game alerted me to the fact that they were
    actually playing a back-to-back game, which is a game played right after playing
    on the previous day (in this instance, a game away at Indiana on the previous
    day). In other words, fatigue may have played a role in their loss as playing
    back-to-back games is physically demanding for athletes, which may have been exacerbated
    by the travelling between games (from Indiana back to Milwaukee).
  prefs: []
  type: TYPE_NORMAL
- en: Looking at team schedules, out of 80 odd games in a season, NBA teams do play
    a number of back-to-back games. Do you ever wonder how teams fare in these games,
    and does this change when teams are playing at away or home courts? This article
    demonstrates one way of getting these stats, which are typically not available
    in the public domain, using [PySpark](https://spark.apache.org/docs/latest/api/python/)
    — a ready-to-use interface for Apache Spark in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To determine the win ratio for back-to-back games, we’ll need a history of back-to-back
    games played by each NBA team as well as their results. Although these stats are
    available on the official NBA website and other community sites, they are not
    licensed for commercial use and as such, I have simulated a synthetic dataset
    which contains the following fields.
  prefs: []
  type: TYPE_NORMAL
- en: Date when the game was played
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Team name for the home team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Team name for the away team, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Score of the game, and corresponding outcome by home and away team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The table below shows a snippet of the synthetic dataset. You should be able
    to verify against the official NBA game schedule that that these were not actual
    games.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9d730eae1ea6cc53a4c8fb4bb1f1afa7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Table 1: Synthetic game data. Table by author.'
  prefs: []
  type: TYPE_NORMAL
- en: Data Transformation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section provides a step-by-step guide in Python on how to transform the
    above dataset into one which identifies whether a game played by a team is a back-to-back
    game and subsequently calculates the win ratio for these games for each team.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1: Load packages and data**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 2: Format and create Date columns**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The ‘GAME_DATE_minus_ONE’ column created above represents the previous calendar
    date for each game in the dataset. This is discussed in more detail later (in
    **Step 4**) and is used for identifying whether a game is a back-to-back game.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 3: Split dataset by team**'
  prefs: []
  type: TYPE_NORMAL
- en: As each row of the dataset is at a game level (i.e. it shows the result of a
    game between two teams), splitting is required to represent the result at a team
    level (i.e. splitting each row into two which represent the outcome of a game
    for each team). This can be achieved using the Python code below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 4: Return for each game the date when the team played its previous game**'
  prefs: []
  type: TYPE_NORMAL
- en: This is when PySpark comes in handy. In particular, we’ll be leveraging the
    *lag* function under the Window Functions in PySpark. In practice, as demonstrated
    in **Table 2** below, the *lag* function provides access to an offset value of
    a column of choice. In this instance, it returns the date when Atlanta Hawks played
    its previous game relative to a current game, over a **Window** which shows a
    view of all the games played by the Atlanta Hawks.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in the row of index 1, the Atlanta Hawks played the Cleveland Cavaliers
    on 23/10/2021 (“current game”) as shown in the ‘GAME_DATE’ column, and its last
    game was against the Dallas Mavericks on 21/10/2021 as shown in the ‘GAME_DATE’
    column which is returned via the *lag* function in the same row as the current
    game, in the “GAME_DATE_PREV_GAME” column.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/50d52d848388173fac5ddd648b701c9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Table 2: Lag function demonstration. Table by author'
  prefs: []
  type: TYPE_NORMAL
- en: The ‘GAME_DATE_PREV_GAME’ column returned above, when equal to the ‘GAME_DATE_minus_ONE’
    column created under **Step 2** above, inform that a game is back-to-back (i.e.
    the date of last game played is equal to the previous calendar day of the current
    game). This would be the case for row of index 8 (and 14) in Table 1 above as
    Atlanta Hawks played the Utah Jazz on 4/11/2021 — one day after they played the
    Brookyln Nets on 3/11/2021.
  prefs: []
  type: TYPE_NORMAL
- en: The Python code for returning the ‘GAME_DATE_PREV_GAME ’ column as well as flagging
    a back-to-back game for all teams is provided below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 5: Calculate win ratio for back-to-back games**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**What’s the win ratio for back-to-back games, by team?**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d6ae74b69a5b541f3518f457209e67b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Table 3: Win ratio of back-to-back games by team. Table by author'
  prefs: []
  type: TYPE_NORMAL
- en: Based on the synthetic dataset, it seems the win ratio for back-to-back games
    varied by teams. The Houston Rockets had the lowest win ratio in back-to-back
    games (12.5%), followed by the Orlando Magic (14.8%).
  prefs: []
  type: TYPE_NORMAL
- en: '**Does it matter if the back-to-back game was played on away or home court?**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/247c8713dd9415b67cd5d73d4ec6d087.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Table 4: Win ratio of back-to-back games by team and home/away. Table by author'
  prefs: []
  type: TYPE_NORMAL
- en: Based on the synthetic dataset, it seems for most teams in **Table 4** above,
    teams were more likely to win back-to-back game playing at home rather than away
    courts (which was a sensible observation). The Brooklyn Nets, Chicago Bulls and
    Detroit Pistons were few exceptions to this observation.
  prefs: []
  type: TYPE_NORMAL
- en: Other splits can also be calculated, such as win ratio of non back-to-back games
    vs. back-to-back games, using the Python code below. A snippet of the output suggests
    teams were more likely to win non back-to-back games (which again was a sensible
    observation, with a few exceptions).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/145d4da05bdca80d4b8e02b43b9c0a85.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Table 5: Win ratio, back-to-back games vs. otherwise. Table by author'
  prefs: []
  type: TYPE_NORMAL
- en: Other Stats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The PySpark session and associated Window Functions in **Step 4** abovecan be
    further customized to return other game stats.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we would like to query the win ratio (of back-to-back games
    or not) by season, simply introduce a Window by team and season ID and partition
    over it like the below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In addition, we all know the score line for an NBA game is volatile, but exactly
    how volatile? This can be measured by the standard deviation of scores which again
    may not be available in the public domain. We can easily calibrate this by bringing
    in the score (which is available in the dataset) and applying the *avg* and *stddev*
    Window Function, which returns the standard deviation over a pre-defined window.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, if the standard deviation of an NBA game is circa. 20 points.
    then there’s 70% chance that the score line will be within +/- 20 points of the
    average score line of an NBA game (assuming a Normal distribution).
  prefs: []
  type: TYPE_NORMAL
- en: Example Python code for returning this stat is provided below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*As I ride the AI/ML wave, I enjoy writing and sharing step-by-step guides
    and how-to tutorials in a comprehensive language with ready-to-run codes. If you
    would like to access all my articles (and articles from other practitioners/writers
    on Medium), you can sign up using* [*the link*](https://medium.com/@jin-cui/membership)
    *here!*'
  prefs: []
  type: TYPE_NORMAL
