- en: 'Design Patterns with Python for Machine Learning Engineers: Builder'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计模式与Python：构建器
- en: 原文：[https://towardsdatascience.com/design-patterns-with-python-for-machine-learning-engineers-builder-45b8e749f134](https://towardsdatascience.com/design-patterns-with-python-for-machine-learning-engineers-builder-45b8e749f134)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/design-patterns-with-python-for-machine-learning-engineers-builder-45b8e749f134](https://towardsdatascience.com/design-patterns-with-python-for-machine-learning-engineers-builder-45b8e749f134)
- en: '![](../Images/99232beba3fbbac79e36336d6ca78b6d.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/99232beba3fbbac79e36336d6ca78b6d.png)'
- en: Photo by [Anton Maksimov 5642.su](https://unsplash.com/@juvnsky?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Anton Maksimov 5642.su](https://unsplash.com/@juvnsky?utm_source=medium&utm_medium=referral)
    提供，来自 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Learn how to use the Builder design pattern to enhance your code
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习如何使用构建器设计模式来提升你的代码
- en: '[](https://medium.com/@marcellopoliti?source=post_page-----45b8e749f134--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----45b8e749f134--------------------------------)[](https://towardsdatascience.com/?source=post_page-----45b8e749f134--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----45b8e749f134--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----45b8e749f134--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@marcellopoliti?source=post_page-----45b8e749f134--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----45b8e749f134--------------------------------)[](https://towardsdatascience.com/?source=post_page-----45b8e749f134--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----45b8e749f134--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----45b8e749f134--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----45b8e749f134--------------------------------)
    ·6 min read·Oct 12, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----45b8e749f134--------------------------------)
    ·阅读时间6分钟·2023年10月12日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: An essential skill for those involved in AI development is to write clean, reusable
    code. Therefore, today I will introduce another design pattern in Python using
    [Deepnote](https://deepnote.com/).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于从事AI开发的人来说，一个重要的技能是编写干净、可重用的代码。因此，今天我将使用[Deepnote](https://deepnote.com/)介绍另一种设计模式。
- en: It doesn’t matter how good you are at Deep Learning topics, statistics or anything
    else, **if your code is not clean and easily reusable you will never be able to
    develop something that will have a major impact**. That’s why I think it’s very
    important for data scientists to have software engineering skills. [Design patterns](https://en.wikipedia.org/wiki/Software_design_pattern)
    are something that all people who write code should know. Today we are going to
    talk about the pattern called Builder.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你在深度学习、统计学或其他领域的水平如何，**如果你的代码不干净且不易于重用，你将永远无法开发出具有重大影响的东西**。这就是为什么我认为数据科学家拥有软件工程技能非常重要的原因。
    [设计模式](https://en.wikipedia.org/wiki/Software_design_pattern)是所有编写代码的人都应该了解的东西。今天我们要讨论的是一个叫做构建器的模式。
- en: What is a Design Pattern?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是设计模式？
- en: '**A design pattern is simply a general design solution to a recurring problem**.
    Instead of dealing with solving the same problem over and over again, one thinks
    of a solution that can be used every time the same problem is encountered, and
    these solutions have already been found! Someone has fortunately already thought
    of making our lives easier! :)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**设计模式只是一种对重复问题的通用设计解决方案**。与其一遍又一遍地解决同样的问题，不如想出一种每次遇到相同问题时都能使用的解决方案，而这些解决方案已经被找到！幸运的是，有人已经想到了让我们的生活更轻松的方法！:)'
- en: 'Desgin patterns differ in several kinds. But mainly we have 3 of them:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式有多种类型。但主要有3种：
- en: '**Creational**: it’s about the process of creating objects.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建型**：涉及创建对象的过程。'
- en: '**Structural**: it’s about the composition of classes and objects.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构型**：涉及类和对象的组成。'
- en: '**Behavioural**: defines how classes and objects interact and'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行为型**：定义了类和对象如何交互。'
- en: distribute responsibilities among themselves.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将责任分配给他们自己。
- en: '![](../Images/180b625cacb241d44c7f853dc462d4d9.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/180b625cacb241d44c7f853dc462d4d9.png)'
- en: Design Patterns (Image by Author)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式（作者提供的图片）
- en: The Builder Design Pattern
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建器设计模式
- en: The **builder** is part of that design pattern class called creational, because
    it precisely **simplifies the creation of objects** within the code. Imagine that
    you have a class, which requires an immense number of parameters to be instantiated,
    or for Pythonians, a class whose __init__() method expects lots of input parameters.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**构建器**是名为创建设计模式的一个部分，因为它精确地**简化了对象的创建**过程。想象一下你有一个类，它需要大量的参数才能实例化，或者对于 Python
    用户来说，一个类的`__init__()`方法期望接收大量的输入参数。'
- en: '**Imagine you have a class to design a park, perhaps because you are creating
    the environment for a video game**. **You can customize the park in various ways**,
    adding and removing various things. You can add games, children, or create a park
    full of animals and more.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**假设你有一个类来设计公园，也许是因为你正在为视频游戏创建环境**。**你可以以各种方式自定义公园**，添加和移除各种元素。你可以添加游戏、孩子们，或者创建一个满是动物的公园等等。'
- en: '![](../Images/48e767e268517a7010a34394289328aa.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/48e767e268517a7010a34394289328aa.png)'
- en: Image By Author
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图像作者提供
- en: But at the implementation level, how do we deal with implementing all these
    kinds of parks? **The most intuitive solution is probably to create a base Park
    class, which other classes will then extend** to include the various features.
    But in this case we will end up with four subclasses, and in real projects we
    will have **an immense number of subclasses**, which would make our code impractical.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在实现层面，我们如何处理所有这些类型的公园呢？**最直观的解决方案可能是创建一个基础的公园类，其他类然后扩展这个基础类**以包含各种特性。但在这种情况下，我们会得到四个子类，在实际项目中，我们会有**大量的子类**，这会使我们的代码变得不切实际。
- en: '**Or** we could create just one class, the class Park, and **use a huge constructor
    to which a lot of parameters can be given as input. But the problem is that in
    most cases the input parameters would be null,** because we don’t always want
    to create a park that has everything, and again the code would look a little ugly.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**或者**我们可以创建一个类，公园类，并**使用一个巨大的构造函数，可以接收大量的输入参数。但问题是，在大多数情况下，输入参数将为空**，因为我们并不总是想要创建一个什么都有的公园，而且代码看起来也会有点丑。'
- en: '**The solution adopted by the Builder, is to create all the various features
    we want to include in different methods of the Park class, called builders**,
    instead of having everything inside the constructor. This way we can build the
    pieces of our Park step-by-step, depending on what we need.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**构建器采用的解决方案是将我们想要包含的各种特性创建在公园类中的不同方法中，称为构建器**，而不是将所有内容都放在构造函数中。这样我们可以根据需要一步一步地构建公园的各个部分。'
- en: '![](../Images/03062d08a2704c07879705a39dc4c3ca.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/03062d08a2704c07879705a39dc4c3ca.png)'
- en: ParkBuilder (Image by Author)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: ParkBuilder（图像作者提供）
- en: Let’s code!
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们开始编写代码吧！
- en: Let’s see how to implement this design pattern in Python now. In this example
    what we want to do is to build different types of robots that have different configurations.
    The following code will consist of 5 basic parts.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何在 Python 中实现这个设计模式。在这个例子中，我们想要构建不同类型的机器人，这些机器人有不同的配置。以下代码将由5个基本部分组成。
- en: '**Robot Class:**'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**机器人类：**'
- en: First, we create the `Robot`class that represents the objects we want to build
    with all their attributes such as`head`, `arms`, `legs`, `torso`, and `battery`.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们创建一个`Robot`类，表示我们想要构建的对象，包括其所有属性，如`head`、`arms`、`legs`、`torso`和`battery`。
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**2\. Builder Interface:**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 构建器接口：**'
- en: The `RobotBuilder` interface is an abstract class that defines a set of methods
    for building the different parts of a `Robot`object. These methods include `reset`,
    `build_head`, `build_arms`, `build_legs`, `build_torso`, `build_battery`, and
    `get_robo`.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RobotBuilder`接口是一个抽象类，它定义了一组用于构建`Robot`对象不同部分的方法。这些方法包括`reset`、`build_head`、`build_arms`、`build_legs`、`build_torso`、`build_battery`和`get_robo`。'
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**3\. Concrete Builders**:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**3\. 具体构建器**：'
- en: Now we have the builder classes that implements the abstract class `RobotBuilder`which
    are `HumanoidRobotBuilder` and `DroneRobotBuilder`. These builders give to robots
    different settings that differentiate them from each other.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在我们有实现了抽象类`RobotBuilder`的构建器类，它们分别是`HumanoidRobotBuilder`和`DroneRobotBuilder`。这些构建器为机器人提供了不同的设置，使它们彼此区分开来。
- en: Remember that each builder maintains an instance of the `Robot` it's constructing.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记住，每个构建器保持一个正在构建的`Robot`实例。
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**4\. RobotDirector:**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**4\. 机器人导演：**'
- en: The class called `RobotDirector` has the task of directing the construction
    of robots using specific builders it has available.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名为`RobotDirector`的类负责使用其可用的特定构建器指导机器人的构建过程。
- en: Inside this class, you will find the `set_builder`method to activate the builder
    you need and dui `build_humanoid_robot`and `build_drone_robot` methods to create
    different types of robots
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The director’s methods return the final constructed robot objects.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**5\. Client Code:**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create a `RobotDirector` instance.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then create a `HumanoidRobotBuilder` and set it as the active builder for humanoid
    robots.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also use the director’s `build_humanoid_robot` method to create a humanoid
    robot.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we can create a `DroneRobotBuilder` and set it as the active builder for
    drone robots.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we have to use the director’s `build_drone_robot` method to create a drone
    robot.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we print out the components of both types of robots.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That’s it! 😊
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**The Builder pattern decouples the construction of a complex object from its
    representation.** As we have seen in this example, the **RobotDirector is in charge
    of orchestrating the construction process but is not aware of the specific steps
    to create different types of robots.** The concrete builders, which we called
    HumanoidRobotBuilder and DroneRobotBuilder in this case, provide step-by-step
    implementations for building specific robot configurations.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '**The pattern allows flexibility and extensibility**, enabling the creation
    of complex objects with variable attributes while keeping client code clean and
    easy to use. All this allows us to build complex objects in a clear and consistent
    way.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: If you were interested in this article follow me on Medium! 😁
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 💼 [Linkedin](https://www.linkedin.com/in/marcello-politi/) ️| 🐦 [Twitter](https://twitter.com/_March08_)
    | [💻](https://emojiterra.com/laptop-computer/) [Website](https://marcello-politi.super.site/)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'You might be interested in some of my past articles as well:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[Design Patterns with Python for Machine Learning Engineers: Observer](/design-patterns-with-python-for-machine-learning-engineers-observer-23cde7ecb2ed)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Design Patterns with Python for Machine Learning Engineers: Abstract Factory](/design-patterns-with-python-for-machine-learning-engineers-abstract-factory-f761f89a3c12)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
