- en: 'How-To: Cross Validation with Time Series Data'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何：时间序列数据的交叉验证
- en: 原文：[https://towardsdatascience.com/how-to-cross-validation-with-time-series-data-9802a06272c6](https://towardsdatascience.com/how-to-cross-validation-with-time-series-data-9802a06272c6)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-cross-validation-with-time-series-data-9802a06272c6](https://towardsdatascience.com/how-to-cross-validation-with-time-series-data-9802a06272c6)
- en: When it comes to time series data, you have to do cross validation differently
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 说到时间序列数据，你必须以不同的方式进行交叉验证。
- en: '[](https://medium.com/@pelletierhaden?source=post_page-----9802a06272c6--------------------------------)[![Haden
    Pelletier](../Images/8f73fc8222e783883c4ebcaee14513e0.png)](https://medium.com/@pelletierhaden?source=post_page-----9802a06272c6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9802a06272c6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9802a06272c6--------------------------------)
    [Haden Pelletier](https://medium.com/@pelletierhaden?source=post_page-----9802a06272c6--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@pelletierhaden?source=post_page-----9802a06272c6--------------------------------)[![Haden
    Pelletier](../Images/8f73fc8222e783883c4ebcaee14513e0.png)](https://medium.com/@pelletierhaden?source=post_page-----9802a06272c6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9802a06272c6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9802a06272c6--------------------------------)
    [Haden Pelletier](https://medium.com/@pelletierhaden?source=post_page-----9802a06272c6--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9802a06272c6--------------------------------)
    ·5 min read·Dec 29, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9802a06272c6--------------------------------)
    ·5分钟阅读·2023年12月29日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/e6086d85a950ceb80f3d99b0979ecd94.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e6086d85a950ceb80f3d99b0979ecd94.png)'
- en: Standard k-fold cross validation. Image by author
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的k折交叉验证。图像由作者提供
- en: '**Cross-validation** is an important part of training and evaluating an ML
    model. It allows you to get an estimate of how a trained model will perform on
    new data.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**交叉验证**是训练和评估机器学习模型的重要部分。它允许你估计训练好的模型在新数据上的表现。'
- en: Most people who learn how to do cross validation first learn about the **K-fold
    approach.** I know I did. In K-fold cross validation, the dataset is randomly
    split into n folds (usually 5). Over the course of 5 iterations, the model is
    trained on 4 out of the 5 folds while the remaining 1 acts as a test set for evaluating
    performance. This is repeated until all 5 folds have been used as a test set at
    one point in time. By the end of it, you’ll have 5 error scores, which, averaged
    together, will give you your cross validation score.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数学习如何进行交叉验证的人首先了解的是**K折方法**。我知道我就是这样。在K折交叉验证中，数据集被随机分成n折（通常是5折）。在5次迭代中，模型在5折中的4折上进行训练，而剩下的1折作为测试集用于评估性能。这个过程会重复，直到所有5折都被用作测试集为止。到最后，你将得到5个错误分数，将它们平均在一起，就会得到你的交叉验证分数。
- en: Here’s the catch though — this method really only works for non-time series
    / non sequential data. If the order of the data matters in any way, or if any
    data points are dependent on preceding values, **you cannot use K-fold cross validation.**
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但有个问题——这种方法实际上只适用于非时间序列/非顺序数据。如果数据的顺序有任何意义，或者任何数据点依赖于前面的值，**你不能使用K折交叉验证。**
- en: The reason why is fairly straightforward. If you split up the data into 4 training
    folds and 1 testing fold using KFold you will randomize the order of the data.
    Therefore, data points that once preceded other data points can end up in the
    test set, so when it comes down to it, ***you’ll be using future data to predict
    the past.***
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 原因很简单。如果你使用KFold将数据拆分为4个训练折和1个测试折，你将随机化数据的顺序。因此，曾经在其他数据点之前的数据点可能会出现在测试集中，最终，你***将使用未来的数据来预测过去。***
- en: This is a big no-no.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝对是不允许的。
- en: The way test your model in development should mimic the way it will run in the
    production environment.
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在开发中测试模型的方式应该模拟它在生产环境中的运行方式。
- en: If you’ll be using past data to predict future data when the model goes to production
    (as you would be doing with time series), you should be testing your model in
    development the same way.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将在模型投入生产时使用过去的数据来预测未来的数据（就像时间序列中的做法），你应该在开发阶段以相同的方式测试你的模型。
- en: This is where TimeSeriesSplit comes in. TimeSeriesSplit, a scikit-learn class,
    is a self-described “variation of KFold.”
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是TimeSeriesSplit的作用。TimeSeriesSplit是一个scikit-learn类，称自己为“KFold的变体”。
- en: In the kth split, it returns first k folds as train set and the (k+1)th fold
    as test set.
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在第 k 次拆分中，它返回前 k 个折叠作为训练集，第 (k+1) 个折叠作为测试集。
- en: '![](../Images/d032f75daaf1de474b296e726e277ef9.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d032f75daaf1de474b296e726e277ef9.png)'
- en: TimeSeriesSplit as defined by scikit-learn documentation
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: TimeSeriesSplit 如 scikit-learn 文档中定义的
- en: 'The main differences between TimeSeriesSplit and KFold are:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: TimeSeriesSplit 和 KFold 之间的主要区别是：
- en: In TimeSeriesSplit, the training dataset gradually increases in size, whereas
    in KFold, it remains static.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 TimeSeriesSplit 中，训练数据集的大小逐渐增加，而在 KFold 中，它保持静态。
- en: In TimeSeriesSplit, the training set gets larger each time, so the training
    data will always contain values from the previous iteration’s training data. In
    KFold, the current iteration’s train data could have been part of the test data
    in the previous iteration and vice versa.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 TimeSeriesSplit 中，训练集每次都会变大，因此训练数据总是包含之前迭代的训练数据中的值。在 KFold 中，当前迭代的训练数据可能在之前的迭代中作为测试数据的一部分，反之亦然。
- en: In KFold, every data point in the dataset will at some point be part of a test
    set. This is not the case for TimeSeriesSplit, where the first chunk of train
    data will never be included in the test set.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 KFold 中，数据集中的每个数据点在某一时刻都会成为测试集的一部分。而在 TimeSeriesSplit 中，第一块训练数据永远不会被包含在测试集中。
- en: 'Here’s how it works: On the first iteration, the data is divided into train
    and test sets. The test size (unless specified as an argument test_size) defaults
    to n_samples // (n_splits + 1)) and the train size defaults to i * n_samples //
    (n_splits + 1) + n_samples % (n_splits + 1) where i=current split. As the current
    split increases, i increases, and the train size increases.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它是这样工作的：在第一次迭代时，数据被划分为训练集和测试集。测试集的大小（除非作为参数 test_size 指定）默认为 n_samples // (n_splits
    + 1)）而训练集的大小默认为 i * n_samples // (n_splits + 1) + n_samples % (n_splits + 1) 其中
    i = 当前拆分次数。随着当前拆分次数的增加，i 增加，训练集的大小也增加。
- en: '![](../Images/01912b1b7b5e8049c0995feaaf33fe2f.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/01912b1b7b5e8049c0995feaaf33fe2f.png)'
- en: A visual diagram of time series cross validation. Image by author
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个时间序列交叉验证的视觉示意图。图片来自作者
- en: 'To better illustrate how TimeSeriesSplit works, I’ll walk you through an example
    in Python. First, I created a very simple sample dataset: 1 feature, 12 values.
    Then I instantiated a TimeSeriesSplit object tss and specified that I wanted 5
    splits. To actually perform the split, I called .split on tss and passed in my
    dataset X. This produces a set of indices that will be used to determine where
    to split the dataset during the cross validation process. To view how the data
    was split, I iterated through the folds and corresponding indices and printed
    out the values at those indices.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地说明 TimeSeriesSplit 的工作原理，我将通过一个 Python 示例来演示。首先，我创建了一个非常简单的样本数据集：1 个特征，12
    个值。然后我实例化了一个 TimeSeriesSplit 对象 tss，并指定了要 5 次拆分。为了实际进行拆分，我调用了 tss 的 .split 方法，并传入了我的数据集
    X。这将产生一组索引，用于在交叉验证过程中确定拆分数据集的位置。为了查看数据是如何拆分的，我遍历了这些折叠及其相应的索引，并打印出了这些索引处的值。
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The first result looked like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个结果看起来像这样：
- en: 'Fold 1:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 'Fold 1:'
- en: train:[[1] [2]]
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: train:[[1] [2]]
- en: test:[[3] [4]]
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: test:[[3] [4]]
- en: 'and the last one like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个是这样的：
- en: 'Fold 5:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 'Fold 5:'
- en: train:[[ 1] [ 2] [ 3] [ 4] [ 5] [ 6] [ 7] [ 8] [ 9] [10]]
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: train:[[ 1] [ 2] [ 3] [ 4] [ 5] [ 6] [ 7] [ 8] [ 9] [10]]
- en: test:[[11] [12]]
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: test:[[11] [12]]
- en: Now that the object and splitting indices have been defined, it’s time to perform
    the actual CV. I chose a random forest regressor, but this can be done with any
    model.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在对象和拆分索引已被定义，是时候进行实际的交叉验证（CV）了。我选择了一个随机森林回归器，但这可以用任何模型来完成。
- en: Luckily, scikit-learn provides an easy way to do cross validation with its function
    **cross_validate**, which takes in a model object, X and y arrays, a cv strategy,
    and a scoring metric(s).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，scikit-learn 提供了一种简单的方法来进行交叉验证，通过其函数 **cross_validate**，它接受一个模型对象、X 和 y
    数组、一个 cv 策略和一个评分指标（s）。
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you want to cross validate on multiple metrics, you can pass in a list. You
    just have to make sure each is one of scikit-learn’s [acceptable metric values](https://scikit-learn.org/stable/modules/model_evaluation.html#scoring-parameter).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在多个指标上进行交叉验证，你可以传入一个列表。你只需要确保每个指标都是 scikit-learn 的[可接受指标值](https://scikit-learn.org/stable/modules/model_evaluation.html#scoring-parameter)。
- en: Cross_validate returns a Python dictionary containing fit_time, score_time,
    and test_score. To find the mean CV score, simply call .mean() on the test_score.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: cross_validate 返回一个包含 fit_time、score_time 和 test_score 的 Python 字典。要找到平均 CV
    分数，只需在 test_score 上调用 .mean()。
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: With this, you’ll have an accurate estimate of a time series model’s performance.
    Time series problems carry a variety of different considerations and approaches
    beyond the standard ML template. It’s important to research each step in a time
    series problem, from EDA to CV to predictions, and learn how to properly apply
    time series specific techniques to time series data.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，你将能够准确估计时间序列模型的表现。时间序列问题涉及的考虑因素和方法多种多样，超出了标准机器学习模板。研究时间序列问题的每一个步骤，从探索性数据分析（EDA）到交叉验证（CV）再到预测，并学习如何将时间序列特定技术正确应用于时间序列数据，是非常重要的。
- en: '**Sources**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源**'
- en: “TimeSeriesSplit.” scikit-learn, scikit-learn developers, 2023, https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.TimeSeriesSplit.html.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: “TimeSeriesSplit。” scikit-learn，scikit-learn 开发者，2023年，https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.TimeSeriesSplit.html。
