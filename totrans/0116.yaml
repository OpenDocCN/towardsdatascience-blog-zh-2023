- en: 5 Python Tricks That Distinguish Senior Developers From Juniors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/5-python-tricks-that-distinguish-senior-developers-from-juniors-826d57ab3940](https://towardsdatascience.com/5-python-tricks-that-distinguish-senior-developers-from-juniors-826d57ab3940)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Illustrated through differences in approaches to Advent of Code puzzles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@tomergabay?source=post_page-----826d57ab3940--------------------------------)[![Tomer
    Gabay](../Images/1fb1d408bc89415918c1aa6733df44e1.png)](https://medium.com/@tomergabay?source=post_page-----826d57ab3940--------------------------------)[](https://towardsdatascience.com/?source=post_page-----826d57ab3940--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----826d57ab3940--------------------------------)
    [Tomer Gabay](https://medium.com/@tomergabay?source=post_page-----826d57ab3940--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----826d57ab3940--------------------------------)
    ·6 min read·Jan 16, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0d25891630ba9198b83532dc75587a05.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Afif Ramdhasuma](https://unsplash.com/@javaistan?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Every year since 2015 on the first of December [Advent of Code](https://adventofcode.com/)
    starts. As described on their website, Advent of Code (henceforth AoC) is
  prefs: []
  type: TYPE_NORMAL
- en: an [Advent calendar](https://en.wikipedia.org/wiki/Advent_calendar) of small
    programming puzzles for a variety of skill sets and skill levels that can be solved
    in [any](https://github.com/search?q=advent+of+code) programming language you
    like. People use them as [interview](https://y3l2n.com/2018/05/09/interview-prep-advent-of-code/)
    [prep](https://twitter.com/dznqbit/status/1037607793144938497), [company training](https://twitter.com/pgoultiaev/status/950805811583963137),
    [university](https://gitlab.com/imhoffman/fa19b4-mat3006/wikis/home) [coursework](https://gribblelab.org/teaching/scicomp2021/index.html),
    [practice](https://twitter.com/mrdanielklein/status/936267621468483584) [problems](https://comp215.blogs.rice.edu/),
    a [speed contest](https://adventofcode.com/leaderboard), or to [challenge each
    other](https://www.reddit.com/r/adventofcode/search?q=flair%3Aupping&restrict_sr=on).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this article, we’ll take a look at five approaches to tackle common coding
    problems in a senior way instead of a junior one. Each coding problem is derived
    from an AoC puzzle, with many problems recurring multiple times throughout AoC
    and other coding challenges and assessments you might encounter e.g. in job interviews.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate the concepts I won’t go into the solution of the full AoC puzzles,
    but rather only focus on a small part of a specific puzzle in which senior developers
    are easily distinguishable from juniors.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Read in a file effectively with comprehensions and splits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On [Day1](https://adventofcode.com/2022/day/1) of AoC it is required to read
    in several blocks of numbers. Each block is separated by an empty line (thus actually
    `'\n’`).
  prefs: []
  type: TYPE_NORMAL
- en: '**Input and desired output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Junior developer approach:** aloop with if-else statements'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Senior developer approach:** make use of list comprehensions and `.split()`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Using list comprehensions we can fit the 10 previous lines into two, without
    losing significant (if any) understandability or readability, and while gaining
    in performance ([list comprehensions are faster than regular loops](https://wiki.python.org/moin/PythonSpeed/PerformanceTips#Loops)).
    For those that haven’t seen `map` before, `map` maps a function (the first argument)
    to an iterable in the second argument. In this specific situation, it applies
    `int()` to every value in the list, making every item an integer. For more info
    about `map` click [here](https://www.geeksforgeeks.org/python-map-function/).
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Use Enum instead of if-elif-else
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On [Day2](https://adventofcode.com/2022/day/1) the challenge revolves around
    a game of *rock-paper-scissors.* A different chosen shape (rock, paper, or scissors)
    results in a different amount of points: 1 (*X)*, 2 (*Y)*, and 3 (*Z)* respectively.
    Here below are two approaches to tackle this problem.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Input and desired output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Junior developer approach:** if-elif-else'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Senior developer approach:** `Enum`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Of course, in this example, the naive approach isn’t *that* terrible but using
    `[Enum](https://docs.python.org/3/library/enum.html)` results in shorter and more
    readable code. Especially when more options are possible the naive *if-elif-else*
    approach will get worse and worse, while with `Enum` it stays relatively easy
    to keep an overview. For more on `Enum` click [here](https://docs.python.org/3/library/enum.html).
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Use lookup tables instead of dictionaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Day3](https://adventofcode.com/2022/day/3) letters have different values.
    Lowercase a-z has values 1 through 26, and uppercase a-z has values 27 through
    52\. Because of the many different possible values, using `Enum` like here above
    would result in many lines of code. A more practical approach here is to use a
    *lookup table:*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Junior developer approach:** creating a global dictionary'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Senior developer approach:** using a string as a lookup table'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Using the `.index()` method of a string we get the index, hence `letters.index('c')+1`
    will result in the expected value of 3\. There is no need to store the values
    in a dictionary because the index *is* the value. To prevent the `+1` you could
    simply add a whitespace character at the beginning of the string so that the index
    of `a` starts on 1\. However, this depends on whether you’d like to return a value
    of 0 for a whitespace or an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you might have thought by now, yes, we could also solve the *rock, paper
    scissors* task using a lookup table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Advanced slicing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On [Day5](https://adventofcode.com/2022/day/5) it is required to read letters
    from lines (see input below). Each letter is on a fourth index, starting from
    index 1\. Now, virtually every Python programmer will be familiar with string
    and list slicing using e.g. `list_[10:20]` . But what many people don’t know is
    that you can define step size using e.g. `list_[10:20:2]` to define a step size
    of 2\. On Day5 (and in many other coding situations) this could save you a lot
    of unnecessarily complicated code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Junior developer approach:** double for loop with `range` and indices'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Senior developer approach:** using advanced slicing methods'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 5\. Use a class attribute to store class instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On [Day11](https://adventofcode.com/2022/day/11) a situation is described in
    which monkies pass objects to each other. In order to simplify we’ll pretend that
    they’re simply passing bananas to each other. Each monkey can be represented as
    an instance of a Python `class` with their `id` and their amount of bananas as
    instance attributes. However, there are many monkeys and they need to be able
    to interact with each other. A trick to store all the monkeys and for them to
    be able to interact with each other is to define a dictionary with all `Monkey`
    instances as a class attribute of the `Monkey` class. Using `Monkey.monkeys[id]`
    you can access all existing monkies without the need of a `Monkies` class or an
    external dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 6\. Self-documenting expressions (BONUS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This trick is applicable virtually every time you write a Python program. Instead
    of defining in an f-string what you are printing (e.g.
  prefs: []
  type: TYPE_NORMAL
- en: '`print(f"x = {x}")` you can use `print(f"{x = }”)` to print the value with
    a specification of what you are printing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Junior developer approach:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**Senior developer approach:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: To conclude
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve looked at 5 Python tricks that distinguish senior developers from junior
    developers. Of course, only applying these tricks won’t promote someone suddenly
    to senior developer. However, through analyzing the difference in style and pattern
    between the two you can learn the difference in how a senior developer approaches
    coding problems versus a junior, and you can start to internalize these approaches
    so that you’ll eventually become a senior developer yourself!
  prefs: []
  type: TYPE_NORMAL
- en: If you liked this article and want to learn more about senior Python approaches,
    make sure to read my other article about where to find content to become more
    senior yourself!
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-level-up-your-python-skills-by-learning-from-these-professionals-3e906b83f355?source=post_page-----826d57ab3940--------------------------------)
    [## How to Level Up Your Python Skills by Learning From These Professionals'
  prefs: []
  type: TYPE_NORMAL
- en: Prevent staying stuck at the junior level of Python programming
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-level-up-your-python-skills-by-learning-from-these-professionals-3e906b83f355?source=post_page-----826d57ab3940--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[List comprehensions](https://wiki.python.org/moin/PythonSpeed/PerformanceTips#Loops)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Map explanation](https://www.geeksforgeeks.org/python-map-function/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Enumerate documentation](https://docs.python.org/3/library/enum.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[AoC Reddit](https://www.reddit.com/r/adventofcode/) (hints, solutions, and
    discussions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
