- en: 'Genetic Algorithm: Finding Optimal Email Delivery Schedule to Maximize Engagement'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/genetic-algorithm-finding-optimal-email-delivery-schedule-to-maximize-engagement-82dfab3e3b54](https://towardsdatascience.com/genetic-algorithm-finding-optimal-email-delivery-schedule-to-maximize-engagement-82dfab3e3b54)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Using an evolutionary algorithm to optimize a consumer bank’s D2C Campaign
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://abhijeetstalaulikar.medium.com/?source=post_page-----82dfab3e3b54--------------------------------)[![Abhijeet
    Talaulikar](../Images/073f89914ec4b541d76a14b23d48279b.png)](https://abhijeetstalaulikar.medium.com/?source=post_page-----82dfab3e3b54--------------------------------)[](https://towardsdatascience.com/?source=post_page-----82dfab3e3b54--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----82dfab3e3b54--------------------------------)
    [Abhijeet Talaulikar](https://abhijeetstalaulikar.medium.com/?source=post_page-----82dfab3e3b54--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----82dfab3e3b54--------------------------------)
    ·9 min read·Nov 1, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0d31fcceb333d2b64b85bacbbed6f77f.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: Image generated by author using Bing Image Creator
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Do certain email delivery times lead to higher engagement?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: One of the most common questions that email marketers face is when to send their
    emails to maximize their open rates, click-through rates, and conversions. There
    is no definitive answer to this question, as different audiences may have different
    preferences and behaviors. What time zone are they in? What devices do they use
    to check their emails? What are their daily routines and schedules? How often
    do they check their emails? These factors can influence when they are most likely
    to open and interact with your emails.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: You can use tools like A/B testing or split testing to compare the performance
    of different email campaigns sent at different times. You can also use analytics
    tools like Google Analytics or Mailchimp to track the metrics of your email campaigns,
    such as open rates, click-through rates, bounce rates, and conversions. By analyzing
    the data, you can identify the optimal delivery times for your audience and your
    goals.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: When you have a good understanding of the click-through rates and open rates
    of your customers at different times, the next step is to create an optimal delivery
    schedule that maximizes these metrics on a segment without negatively influencing
    them to unsubscribe — a phenomenon that we call “Fatigue” in email marketing.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I will attempt to solve this optimization problem using Genetic
    Algorithms — a methodology that isn’t commonly used in the marketing space.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: I understand that Genetic Algorithms can be daunting. We will see how simple
    Pandas manipulations can be used to implement the core concepts in this algorithm.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Defining the problem statement
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I introduced ULFC bank, a fictitious but popular consumer bank, in the article
    on [Next Best Action](https://medium.com/@abhijeetstalaulikar/next-best-action-learning-optimal-policy-for-maximizing-mortgage-collection-7160bb3d8e95).
    In that effort, we created a reinforcement model that would suggest the next best
    offer to roll out to its mortgage customers based on their past responses. With
    that in place, now ULFC wants the data science team to recommend an optimal schedule
    — day, time, count — for sending out emails as a part of a quarterly email campaign.
    **The objective is to maximize customer engagement on the emails without losing
    them.**
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: I am going to use [this synthetic data](https://github.com/abhijeet-talaulikar/Medium_Resources/blob/main/email_engagement_stats_data.zip)
    which I have created. It contains historical click, open and fatigue rates for
    a sample of 1000 customers that would be targeted in this campaign.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at the data first.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Open rates are typically high and can be up to 30%.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click rates are more intentional and vary between 0–3%
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fatigue rates (chance of customer unsubscribing to email marketing) are more
    contextual and can vary by segment/campaign. We will assume 0–5%.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/310bc9a17fad2ffa1ed16a56c341f73c.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: Image by author — Daily open rates for the 1000 customers
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/278d8174e0a256a7855575d440b57521.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: Image by author — Daily click rates for the 1000 customers
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ae446823ef69fa451e9082517709a0f0.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: Image by author — Daily fatigue rates for the 1000 customers
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: A brief introduction to Genetic Algorithms
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A genetic algorithm (GA) is a method of finding solutions to problems by mimicking
    the process of natural evolution. GAs work by creating a population of possible
    solutions, called individuals, and applying biological operators such as selection,
    crossover and mutation to them. The individuals are evaluated by a fitness function
    that measures how well they solve the problem. The fittest individuals are more
    likely to survive and reproduce, while the less fit ones are discarded. This way,
    GAs can explore the search space and converge to optimal or near-optimal solutions
    over time. Here are the core steps involved in any use case you could possibly
    build with genetic algorithms.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e1a508ce393268c8f308bebb75f50b68.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: Image by author — Core steps in any Genetic Algorithm
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Setting parameters
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The number of customers *K* is 1000\. In this email marketing campaign, we want
    to equally maximize open rate and click rate. Their weightage is set by *w*₀and
    *wc* respectively.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we do not want to send more than 2 (set by *E*) emails to the same customer
    within the timeframe. On the other hand, we want to limit the expected fatigue
    rate to under 10% (set by *T*) for each customer within the timeframe.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating the initial population
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here we basically create initial candidates which serve as the starting population
    for our algorithm to improve through selection, crossover and mutation. Each candidate
    is a set of 0s and 1s which are binary decision variables indicating whether to
    send an email in that timeslot.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/41bb458a6eb260d659db380463ca4726.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: Image by author — Example candidate
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Defining the fitness function
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The objective is to choose the best days to send emails to each recipient, based
    on their preferences and behaviors. We want to increase the chances that they
    will open and click on the emails. We assume that each recipient has different
    open and click rates for each day and timeslot. We add weights to open and click
    rate and this can be adjusted based on whether it is a conversion or an awareness
    campaign [1]. So, we need to find the days and timeslots with the highest scores
    for each recipient.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two limitations that we need to consider:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '**Fatigue limitation:** Each recipient gets tired of receiving emails at a
    certain rate, which is different for each one. If we send too many emails, they
    might unsubscribe. We need to keep the total fatigue rate within a certain limit
    for each recipient.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Total delivery limitation:** This controls the maximum number of emails that
    we can send to one recipient.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/6f91839b52b9b421719875f58ee0b499.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: Image by author — Objective function
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: In the code below I have translated this objective into a fitness function that
    returns the score of the objective and also Boolean values based on whether constraint
    1 and 2 are met.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now let’s create a simple function to measure some key metrics for candidates
    that would help us get a sense of the quality of the delivery schedule.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: First we will check the metrics of some initial randomly chosen candidates as
    a benchmark.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/7ae2e93e1838bd32447b034161192ea3.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: Image by author — Metrics for initial randomly generated candidate schedules
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: I see that the initial candidates are generating an average of 35–40 opens in
    the timeframe. We also see around 4 expected clicks.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Let’s follow along, build the algorithm and see if it improves these metrics.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Processes in natural selection
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The primary process that drives generations is that of **Selection**. In the
    practice of genetic algorithms, there are many definitions of this. The simplest
    one is to rank all candidates based on their fitness scores and choose the top
    N to pass their attributes to next generation. This method is called Elitism or
    the process of selecting elite candidates.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: The other two process are **Crossover** and **Mutation**. These are two operations
    in genetic algorithms that help to create new solutions from existing ones. Crossover
    combines the features of two or more parent candidates to produce child candidates,
    while mutation introduces random changes in a candidate to create diversity and
    avoid local optima. The probabilities of crossover and mutation control the rate
    of change of the candidates in a population. A high crossover probability means
    that more children will be generated by combining parents, while a low mutation
    probability means that fewer children will be altered randomly. These probabilities
    can be fixed or adaptive, depending on the problem and the fitness function.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: I’m going to implement a simple crossover operation where I will randomly select
    a row number (aka crossover point) and take all rows prior to this number from
    first child and all rows after this number from the second child.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Mutation is rather funny. My implementation is a single-point mutation. I randomly
    select a day in the timeframe (aka mutation point) and change all decisions (0s
    and 1s) on that day.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Generally, mutation is useful for exploring new regions of the search space,
    while crossover is useful for exploiting local optima. For a better understanding
    of exploration and exploitation, check out [my article](https://medium.com/@abhijeetstalaulikar/next-best-action-learning-optimal-policy-for-maximizing-mortgage-collection-7160bb3d8e95)
    on Next Best Action model. With this arsenal of functions, let’s build the algorithm
    for ULFC that will stitch all parts together.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: The final algorithm
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we have a few more parameters that govern the number of generations (think
    of this as iterations), population size allowed at the end of each generation,
    the probabilities of crossover and mutation, and the elitism size (for the selection
    process).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As depicted in the flowchart previously, we have 5 steps in this algorithm.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Create randomized initial population.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Evaluate candidates using fitness function.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select elites.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply crossover to create new child candidates.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply mutation to newly created candidates.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Re-evaluate and repeat for many generations.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Finally, let’s run the algorithm we just built.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/c8fb1ceb5cb1d5c2554c1507fdc1ea1b.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: Image by author — Metrics for optimal schedule
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: The optimal schedule has a higher expected number of opens and clicks than the
    initial candidates. You can run this over more generations to optimize further.
    You can even run a timeslot analysis to track the recommended schedules over time.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e65159811adea677772bc993ff8972ac.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
- en: Image by author
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: To sum up
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Owned media like email and SMS can be very cost-effective and persuasive channels
    to reach an audience. But going a step further and optimizing schedules in email
    marketing can ensure that businesses are getting the most engagement from their
    emails. These projects also unlock many downstream analyses. For example, the
    team at HubSpot, a popular CRM software, publishes a report every year on “Best
    times to send an email” [2]. In their findings from 2023, emails receive the most
    engagement from 9pm-12pm. However, this data comes from surveying their clients.
    If you run an in-house schedule optimization in your company, you can produce
    such insights with much greater accuracy and granularity in a way that fits your
    business case.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 媒介如电子邮件和短信可以是非常具有成本效益和说服力的渠道来接触受众。但进一步优化电子邮件营销的时间安排可以确保企业从其电子邮件中获得最大互动。这些项目还解锁了许多后续分析。例如，流行的
    CRM 软件 HubSpot 的团队每年发布关于“发送电子邮件的最佳时间”的报告 [2]。根据他们2023年的发现，电子邮件从晚上9点到12点获得的互动最多。然而，这些数据来自对他们客户的调查。如果你在公司内部进行时间安排优化，你可以以更高的准确性和细致度产生这样的见解，从而适应你的业务案例。
- en: Finally, as a caution, I would say use genetic algorithms carefully. And only
    if you know how to interpret and explain it in the context of your problem. It
    is just another optimization algorithm, and there are so many more which might
    be more explainable and faster. Genetic algorithms, on the other hand, are robust
    and can reach global optimum pretty well.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，作为一种警告，我建议谨慎使用遗传算法。只有当你知道如何在你的问题背景下解释和说明它时。它只是另一种优化算法，还有许多可能更容易解释和更快的算法。另一方面，遗传算法是稳健的，并且可以很好地达到全局最优。
- en: Thanks for reading 😁
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读 😁
- en: '**References:**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考文献：**'
- en: Zhang, L., He, J., Yan, Z., Dai, W., Pani, A. (2020). Application of Genetic
    Algorithm on Multi-objective Email Marketing Delivery Problem
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Zhang, L., He, J., Yan, Z., Dai, W., Pani, A. (2020). 遗传算法在多目标电子邮件营销投递问题中的应用
- en: The Best Time to Send an Email [2023 Research] by [Flori Needle](https://blog.hubspot.com/marketing/author/flori-needle?hubs_content=blog.hubspot.com%2Fmarketing%2Fbest-time-to-send-email&hubs_content-cta=-medium)
    — [https://blog.hubspot.com/marketing/best-time-to-send-email](https://blog.hubspot.com/marketing/best-time-to-send-email)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发送电子邮件的最佳时间 [2023 研究] 由 [Flori Needle](https://blog.hubspot.com/marketing/author/flori-needle?hubs_content=blog.hubspot.com%2Fmarketing%2Fbest-time-to-send-email&hubs_content-cta=-medium)
    撰写 — [https://blog.hubspot.com/marketing/best-time-to-send-email](https://blog.hubspot.com/marketing/best-time-to-send-email)
