["```py\nimport os\nimport time\nfrom urllib.parse import urlparse\nfrom urllib.request import urlretrieve\nfrom typing import List\nfrom numpy import round\n\nIMGS_URL_LIST = \\\n    ['https://dl.dropboxusercontent.com/s/2fu69d8lfesbhru/pexels-photo-48603.jpeg',\n     'https://dl.dropboxusercontent.com/s/zch88m6sb8a7bm1/pexels-photo-134392.jpeg',\n     'https://dl.dropboxusercontent.com/s/lsr6dxw5m2ep5qt/pexels-photo-135130.jpeg',\n     'https://dl.dropboxusercontent.com/s/6xinfm0lcnbirb9/pexels-photo-167300.jpeg',\n     'https://dl.dropboxusercontent.com/s/2dp2hli32h9p0y6/pexels-photo-167921.jpeg',\n     'https://dl.dropboxusercontent.com/s/fjb1m3grcrceqo2/pexels-photo-173125.jpeg',\n     'https://dl.dropboxusercontent.com/s/56u8p4oplagc4bp/pexels-photo-185934.jpeg',\n     'https://dl.dropboxusercontent.com/s/2s1x7wz4sdvxssr/pexels-photo-192454.jpeg',\n     'https://dl.dropboxusercontent.com/s/1gjphqnllzm10hh/pexels-photo-193038.jpeg',\n     'https://dl.dropboxusercontent.com/s/pcjz40c8pxpy057/pexels-photo-193043.jpeg',\n     'https://dl.dropboxusercontent.com/s/hokdfk7y8zmwe96/pexels-photo-207962.jpeg',\n     'https://dl.dropboxusercontent.com/s/k2tk2co7r18juy7/pexels-photo-247917.jpeg',\n     'https://dl.dropboxusercontent.com/s/m4xjekvqk4rksbx/pexels-photo-247932.jpeg',\n     'https://dl.dropboxusercontent.com/s/znmswtwhcdbpc10/pexels-photo-265186.jpeg',\n     'https://dl.dropboxusercontent.com/s/jgb6n4esquhh4gu/pexels-photo-302899.jpeg',\n     'https://dl.dropboxusercontent.com/s/rjuggi2ubc1b3bk/pexels-photo-317156.jpeg',\n     'https://dl.dropboxusercontent.com/s/cpaog2nwplilrz9/pexels-photo-317383.jpeg',\n     'https://dl.dropboxusercontent.com/s/16x2b6ruk18gji5/pexels-photo-320007.jpeg',\n     'https://dl.dropboxusercontent.com/s/xqzqzjkcwl52en0/pexels-photo-322207.jpeg',\n     'https://dl.dropboxusercontent.com/s/frclthpd7t8exma/pexels-photo-323503.jpeg',\n     'https://dl.dropboxusercontent.com/s/7ixez07vnc3jeyg/pexels-photo-324030.jpeg',\n     'https://dl.dropboxusercontent.com/s/1xlgrfy861nyhox/pexels-photo-324655.jpeg',\n     'https://dl.dropboxusercontent.com/s/v1b03d940lop05d/pexels-photo-324658.jpeg',\n     'https://dl.dropboxusercontent.com/s/ehrm5clkucbhvi4/pexels-photo-325520.jpeg',\n     'https://dl.dropboxusercontent.com/s/l7ga4ea98hfl49b/pexels-photo-333529.jpeg',\n     'https://dl.dropboxusercontent.com/s/rleff9tx000k19j/pexels-photo-341520.jpeg'\n    ]\n\ndef download_images(img_url_list: List[str]) -> None:\n    # validate inputs\n    if not img_url_list:\n        return\n    os.makedirs('images', exist_ok=True)\n\n    # get time in seconds\n    start = time.perf_counter()\n\n    # for every url in our list, we parse the url and download its contents\n    for img_num, url in enumerate(img_url_list):\n        urlretrieve(url, f'images{os.path.sep}{img_num+1}')\n\n    print(f\"Retrieved {len(img_url_list)} images took {round(time.perf_counter() - start, 2)} seconds\")\n\ndownload_images(IMGS_URL_LIST)\n```", "```py\nfrom threading import Thread\n\nt = Thread(target=<TARGET_FUNCTION>, args=(<SOME_ARGS>))\nt.start()\n```", "```py\nfrom threading import Thread\n\n# store our threads\nthreads = []\n\nt = Thread(target=<TARGET_FUNCTION>, args=(<SOME_ARGS>))\nt.start()\nthreads.append(t)\n\n# join all child threads to the main thread\nfor thread in threads:\n  thread.join()\n```", "```py\nimport threading\nimport os\nimport time\nfrom urllib.parse import urlparse\nfrom urllib.request import urlretrieve\nfrom typing import List\nfrom numpy import round\n\nIMGS_URL_LIST = \\\n    ['https://dl.dropboxusercontent.com/s/2fu69d8lfesbhru/pexels-photo-48603.jpeg',\n     'https://dl.dropboxusercontent.com/s/zch88m6sb8a7bm1/pexels-photo-134392.jpeg',\n     'https://dl.dropboxusercontent.com/s/lsr6dxw5m2ep5qt/pexels-photo-135130.jpeg',\n     'https://dl.dropboxusercontent.com/s/6xinfm0lcnbirb9/pexels-photo-167300.jpeg',\n     'https://dl.dropboxusercontent.com/s/2dp2hli32h9p0y6/pexels-photo-167921.jpeg',\n     'https://dl.dropboxusercontent.com/s/fjb1m3grcrceqo2/pexels-photo-173125.jpeg',\n     'https://dl.dropboxusercontent.com/s/56u8p4oplagc4bp/pexels-photo-185934.jpeg',\n     'https://dl.dropboxusercontent.com/s/2s1x7wz4sdvxssr/pexels-photo-192454.jpeg',\n     'https://dl.dropboxusercontent.com/s/1gjphqnllzm10hh/pexels-photo-193038.jpeg',\n     'https://dl.dropboxusercontent.com/s/pcjz40c8pxpy057/pexels-photo-193043.jpeg',\n     'https://dl.dropboxusercontent.com/s/hokdfk7y8zmwe96/pexels-photo-207962.jpeg',\n     'https://dl.dropboxusercontent.com/s/k2tk2co7r18juy7/pexels-photo-247917.jpeg',\n     'https://dl.dropboxusercontent.com/s/m4xjekvqk4rksbx/pexels-photo-247932.jpeg',\n     'https://dl.dropboxusercontent.com/s/znmswtwhcdbpc10/pexels-photo-265186.jpeg',\n     'https://dl.dropboxusercontent.com/s/jgb6n4esquhh4gu/pexels-photo-302899.jpeg',\n     'https://dl.dropboxusercontent.com/s/rjuggi2ubc1b3bk/pexels-photo-317156.jpeg',\n     'https://dl.dropboxusercontent.com/s/cpaog2nwplilrz9/pexels-photo-317383.jpeg',\n     'https://dl.dropboxusercontent.com/s/16x2b6ruk18gji5/pexels-photo-320007.jpeg',\n     'https://dl.dropboxusercontent.com/s/xqzqzjkcwl52en0/pexels-photo-322207.jpeg',\n     'https://dl.dropboxusercontent.com/s/frclthpd7t8exma/pexels-photo-323503.jpeg',\n     'https://dl.dropboxusercontent.com/s/7ixez07vnc3jeyg/pexels-photo-324030.jpeg',\n     'https://dl.dropboxusercontent.com/s/1xlgrfy861nyhox/pexels-photo-324655.jpeg',\n     'https://dl.dropboxusercontent.com/s/v1b03d940lop05d/pexels-photo-324658.jpeg',\n     'https://dl.dropboxusercontent.com/s/ehrm5clkucbhvi4/pexels-photo-325520.jpeg',\n     'https://dl.dropboxusercontent.com/s/l7ga4ea98hfl49b/pexels-photo-333529.jpeg',\n     'https://dl.dropboxusercontent.com/s/rleff9tx000k19j/pexels-photo-341520.jpeg'\n    ]\n\n# this is our target function\ndef download_image(url: str, img_num: int) -> None:\n    urlretrieve(url, f'images{os.path.sep}{img_num+1}')\n\ndef download_images(img_url_list: List[str]) -> None:\n    # validate inputs\n    if not img_url_list:\n        return\n    os.makedirs('images', exist_ok=True)\n\n    # get time in seconds\n    start = time.perf_counter()\n\n    # create a list to store all of our threads\n    threads = []\n\n    # for every url in our list, we parse the url and download its contents\n    for img_num, url in enumerate(img_url_list):\n        # create a new thread\n        t = threading.Thread(target=download_image, args=(url, img_num))\n\n        # start the new thread\n        t.start()\n\n        # add the new thread to our list of threads\n        threads.append(t)\n\n    # here we instruct the main thread to wait for all child threads to complete before proceeding\n    for thread in threads:\n        thread.join()\n\nprint(f\"Retrieved {len(img_url_list)} images took {round(time.perf_counter() - start, 2)} seconds\")\n\ndownload_images(IMGS_URL_LIST)\n```", "```py\n import multiprocessing\n\n# create an initialiser function which prints the name of the process created\ndef start_process() -> None:\n    print(f'Process {multiprocessing.current_process().name} started!')\n\n# create a sample target function which squares a passed integer\ndef target_function(num: int) -> int:\n    return num**2\n\n# get the number of CPUs available    \npool_size = multiprocessing.cpu_count()\n\n# initialise our process pool\npool = multiprocessing.Pool(processes=pool_size, initializer=start_process)\n\n# map target function to our iterable\nresult = pool.map(target_function, range(200))\n\n# when finished, close the pool\npool.close()\n\n# wait for child processes to complete\npool.join()\n\n# access our results\nprint(result)\n```"]