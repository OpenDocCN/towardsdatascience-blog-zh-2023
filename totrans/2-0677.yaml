- en: 'Pytest Tutorial: An Introduction To Unit Testing'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/debugging-made-easy-use-pytest-to-track-down-and-fix-python-code-ecbad62057b8](https://towardsdatascience.com/debugging-made-easy-use-pytest-to-track-down-and-fix-python-code-ecbad62057b8)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to use Pytest fixtures and mock for unit testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@egorhowell?source=post_page-----ecbad62057b8--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----ecbad62057b8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ecbad62057b8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ecbad62057b8--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----ecbad62057b8--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ecbad62057b8--------------------------------)
    ·7 min read·Apr 18, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/12f3276752687f82177f69cdb4779e62.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Yancy Min](https://unsplash.com/@yancymin?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Imagine you are a data scientist who has just developed some awesome new model
    that is going to bring the company a lot of money. The next step is to send it
    to production. You spend some days making the code [***PEP***](https://peps.python.org/pep-0008/)
    compliant, applying [***linting***](https://en.wikipedia.org/wiki/Lint_%28software%29),
    etc. Finally, you create a [***pull request***](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)
    on GitHub excited about your new release. Then, a Software Engineer asks: ‘*I
    don’t see any tests here?’*'
  prefs: []
  type: TYPE_NORMAL
- en: This scenario has happened to me and is quite frequent with junior Data Scientists.
    [***Testing***](https://realpython.com/python-testing/) is an essential part of
    any software project and Data Science is no different. Therefore, it is an important
    concept and tool to nail down as it will be invaluable in your career. In this
    post, I dive into the need for testing and how we can easily carry them out by
    using [***Pytest***](https://docs.pytest.org/en/7.3.x/).
  prefs: []
  type: TYPE_NORMAL
- en: What are Tests?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing is something we do naturally by simply inferring if the output is what
    we have expected which is called [***exploratory testing***](https://www.guru99.com/exploratory-testing.html).
    However, this is not ideal especially when you have a large codebase with numerous
    steps, as it would be hard to detect where the problem is occurring.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, it is common to practice having written tests for your code. You
    would have some input and expected output. This [***automates***](https://en.wikipedia.org/wiki/Test_automation)
    the testing process and speeds up the debugging process.
  prefs: []
  type: TYPE_NORMAL
- en: The most common and frequent written tests are [***unit tests***](https://en.wikipedia.org/wiki/Unit_testing).
    These are tests that test small blocks of code, typically functions and classes,
    to verify the block is doing what it should.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general advantages of unit tests are:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Speeds up debugging and finding the issues*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Identifying bugs earlier*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*More robust and maintainable code*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Leads to better code design with less complexity*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit tests are the foundational tests in the testing period with [***integration***](https://en.wikipedia.org/wiki/Integration_testing)
    and [***system***](https://en.wikipedia.org/wiki/System_testing) testing following.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/38a0ee599a849209446e9dd49dc66442.png)'
  prefs: []
  type: TYPE_IMG
- en: Software testing pyramind. Diagram by author.
  prefs: []
  type: TYPE_NORMAL
- en: What is Pytest?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pytest is an easy-to-use python package to carry out unit testing. It is the
    most popular testing package alongside Python’s native [***unit test***](https://docs.python.org/3/library/unittest.html)
    framework. Pytest has several advantages over other testing frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Open source*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Skip and label tests*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Parallelized test execution*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Very easy and intuitive to use*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now let’s begin some testing!
  prefs: []
  type: TYPE_NORMAL
- en: Installation and Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can install `pytest` through [pip](https://pypi.org/project/pytest/) by
    simply writing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In your terminal or command line. If you want a certain version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can verify it is installed on your machine through:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The best practice is to have the tests in a separate directory, such as `tests/`,
    to the main code. Another requirement is that all test files are prefixed with
    `test_*.py` or suffixed `*_test.py` using [***snake case***](https://en.wikipedia.org/wiki/Snake_case).
    Similarly, all test functions and classes should start with `test_` or `Test`
    ([***camel case***](https://en.wikipedia.org/wiki/Camel_case)) respectively. This
    ensures that `pytest` knows which functions, classes, and files are tests.
  prefs: []
  type: TYPE_NORMAL
- en: Basic Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s go through a very simple example.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will create a new directory `pytest-example/` containing two files:
    `calculations.py` and `test_calculations.py`. In the `calculations.py` file, we
    will code the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And in the `test_calculations.py` file, we write its corresponding unit test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This test can be run by executing either of these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f85b8d2ba3956d1b76b041e136ddd988.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from author.
  prefs: []
  type: TYPE_NORMAL
- en: '*Good news, our test passed!*'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if our `assert` is incorrect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7f048012cc2feccd580db1b7d2c6df88.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from author.
  prefs: []
  type: TYPE_NORMAL
- en: Several Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is possible to have several tests for different functions. For example,
    let’s add another function to `calculations.py` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And then add the test for the `multiply` function in `test_calculations.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Executing `pytest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d545a21ad0f07a1db41ff9ee71ccd1db.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from author.
  prefs: []
  type: TYPE_NORMAL
- en: '*The two tests have passed!*'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, what if you wanted, say, to just run the `test_multiply` function?
    Well, all you need to do is pass that function name as an argument when executing
    `pytest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fd54ab0cc0bb163f9c786d869fe69fe1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from author.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, `pytest` only ran `test_multiply` as we wanted!
  prefs: []
  type: TYPE_NORMAL
- en: 'If we wanted to now add a `divide` function, it would be best practise to now
    turn them into classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Pytest Fixtures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the above `TestCalculations` class, notice that we initialise the `Calculations`
    class several times. This is not optimal and luckily `pytest` has [***fixtures***](https://docs.pytest.org/en/6.2.x/fixture.html)
    to address this exact scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Instead of initialising `Calculations` multiple times, we can attach the fixture
    as a [***decorator***](https://realpython.com/primer-on-python-decorators/) to
    contain the information on the input data.
  prefs: []
  type: TYPE_NORMAL
- en: Pytest Parametrize
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Up to this point, we have only passed one test case for each test function.
    However, there may be multiple edge cases you want to test and verify. Pytest
    makes this process very easy through the [***parametriz***](https://docs.pytest.org/en/6.2.x/parametrize.html)***e***
    decorator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Where we have used the `pytest.mark.parametrize` decorator to test several
    inputs for the `sum` function. The output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8838d5d7ea298b7ca2d2e99e81d4dabe.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from author.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we have 5 test passing instead of 3, this is because we are passing
    two extra tests to the `sum` function.
  prefs: []
  type: TYPE_NORMAL
- en: Summary & Further Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing, particularly unit testing, is an essential skill to learn and understand
    as Data Scientist as it helps prevents bugs and speeds up development time. The
    most common testing package, in Python, is Pytest. This is an easy-to-use framework
    with an intuitive testing procedure. In this article, we have shown how you can
    use Pytest making use of its *fixtures* and *parametrize* features.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full code used in this article is available here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Software%20Engineering%20/pytest-example?source=post_page-----ecbad62057b8--------------------------------)
    [## Medium-Articles/Software Engineering /pytest-example at main · egorhowell/Medium-Articles'
  prefs: []
  type: TYPE_NORMAL
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Software%20Engineering%20/pytest-example?source=post_page-----ecbad62057b8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Another Thing!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----ecbad62057b8--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  prefs: []
  type: TYPE_NORMAL
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----ecbad62057b8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Connect With Me!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**YouTube**](https://www.youtube.com/@egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**GitHub**](https://github.com/egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References & Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://www.tutorialspoint.com/pytest/index.htm](https://www.tutorialspoint.com/pytest/index.htm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.pytest.org/en/7.3.x/](https://docs.pytest.org/en/7.3.x/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://machinelearningmastery.com/a-gentle-introduction-to-unit-testing-in-python/](https://machinelearningmastery.com/a-gentle-introduction-to-unit-testing-in-python/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.datacamp.com/tutorial/pytest-tutorial-a-hands-on-guide-to-unit-testing](https://www.datacamp.com/tutorial/pytest-tutorial-a-hands-on-guide-to-unit-testing)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
