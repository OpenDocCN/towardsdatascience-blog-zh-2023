- en: 7 Visualizations with Python to Handle Multivariate Categorical Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/7-visualizations-with-python-to-handle-multivariate-categorical-data-63158db0911d](https://towardsdatascience.com/7-visualizations-with-python-to-handle-multivariate-categorical-data-63158db0911d)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Ideas for displaying complex categorical data in simple ways.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@borih.k?source=post_page-----63158db0911d--------------------------------)[![Boriharn
    K](../Images/1b23a79640f5272c1382918bfdba03b0.png)](https://medium.com/@borih.k?source=post_page-----63158db0911d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----63158db0911d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----63158db0911d--------------------------------)
    [Boriharn K](https://medium.com/@borih.k?source=post_page-----63158db0911d--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----63158db0911d--------------------------------)
    ·8 min read·Sep 20, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4247ee18957f3a558350b336da617fb1.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Kaizen Nguyễn](https://unsplash.com/@kaizennguyen) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Common data, such as the well-known iris or penguin [dataset](https://github.com/mwaskom/seaborn-data),
    used for analysis are pretty simple since they have only a few categorical variables.
    By the way, real-world data can be more complex and contain more than two levels
    of categories.
  prefs: []
  type: TYPE_NORMAL
- en: Multivariate categorical data is a type of data that has numerous categories.
    For example, let’s think about grouping people. We may end up having many possibilities
    since a person can have different characteristics depending on categories, such
    as gender, nationality, salary range, or educational level. Vehicles also have
    diverse categorical variables such as brand, country of origin, fuel type, segments,
    etc.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/826de8dbbb848b7f4f7f07b806d6b23a.png)![](../Images/3ff6562ae6203d535d5eea5e2e297918.png)'
  prefs: []
  type: TYPE_IMG
- en: Examples of visualization to display multivariate categorical data in this article.
    Images by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Conducting the exploratory data analysis (EDA) using data visualization is recommended
    to help understand the data. Charts such as bar or pie charts are basic choices
    for plotting simple categorical data. By the way, displaying multivariate categorical
    data can be more complicated since there are many levels of categorical variables.
    Thus, this article will guide with charts that can express data with multiple
    levels of categories.
  prefs: []
  type: TYPE_NORMAL
- en: Getting data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Start with import libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This article will work with a mock-up dataset containing 5 categories. The
    generated dataset contains grocery customer information: location, product, payment,
    gender, and age range. Each categorical variable can be generated using the random
    library, as shown in the code below.'
  prefs: []
  type: TYPE_NORMAL
- en: The next step can be passed if you want to try the visualization code with other
    multivariate categorical datasets.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c372811ffadf62d33a088ad36f12af8d.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s groupby the DataFrame to obtain the frequency of every category’s combination.
    After that, add the obtained result to the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/09f56937ac5be530853ae415ec5e1f3a.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that the DataFrame is ready, let’s continue to the visualization part.
  prefs: []
  type: TYPE_NORMAL
- en: Data Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This article will cover 7 visualizations to display the multivariate categorical
    data. Each one will be explained with the concept, the Python code, and the obtained
    result.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started…
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Build a multilevel pie chart with a Sunburst chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Basically, a sunburst chart is a multilevel pie chart. Due to being able to
    express multiple levels of data in one chart, this is a good option for displaying
    multivariate categorical data or hierarchical data. At the same level, the area
    of each item expresses its percentage compared with other items’ percentages.
  prefs: []
  type: TYPE_NORMAL
- en: One thing that is a limit using the sunburst chart is the density of annotation
    if there are too many categories in each level. By the way, this can be solved
    using a color scale to distinguish the values or creating an interactive sunburst
    chart that can be filtered.
  prefs: []
  type: TYPE_NORMAL
- en: We will use Plotly, which is a powerful Python library for creating data visualization.
    An advantage of using Plotly is that it helps create an interactive chart easily.
  prefs: []
  type: TYPE_NORMAL
- en: Ta-da!!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fdf34867a075b02000f8ef53e0b0cc85.png)'
  prefs: []
  type: TYPE_IMG
- en: Using a sunburst chart to display multivariate categorical data. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The following picture shows how the interactive function works.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c1934274865abbd9dffc9aae90b42c57.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Using multiple rectangle areas in a Treemap chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By changing the plotting area from a circle to a rectangle, a treemap chart
    shares pretty much the same concept as the sunburst chart. This chart is a good
    option to maximize the plotting area since it can occupy more plotting space compared
    with the previous chart.
  prefs: []
  type: TYPE_NORMAL
- en: Plotly also provides a function that facilitates creating a treemap with interactive
    functions quickly.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/90447feaec4c79993848736fe36736be.png)'
  prefs: []
  type: TYPE_IMG
- en: Using a treemap chart to display multivariate categorical data. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the sunburst chart, it can be noticed the color scale helps us distinguish
    the frequency value.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Applying cartesian product and subplots with a Heatmap chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Theoretically, a heatmap is a two-dimensional chart that uses color to represent
    data values. To apply the chart to show multilevel categories, which are five
    levels in this article, we need to use multiple subplots and the cartesian product
    of the categories. Please take into account that we need to leave two categories
    for comparing the values to plot the heatmap.
  prefs: []
  type: TYPE_NORMAL
- en: The [itertools](https://docs.python.org/3/library/itertools.html) library can
    be used to generate a cartesian product list. The following code shows how to
    get the product from ‘location,’ ‘product,’ and ‘gender.’ Each heatmap will display
    the frequency of ‘age’ and ‘payment.’ The categories in cartesian product can
    be changed; please feel free to modify the code below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/21ddfd121e3e1033c762a8360d8f3bd1.png)'
  prefs: []
  type: TYPE_IMG
- en: Apply the obtained cartesian product with subplots to show multiple heatmaps.
    We will use the [heatmap](https://seaborn.pydata.org/generated/seaborn.heatmap.html)
    function from Seaborn to plot the result.
  prefs: []
  type: TYPE_NORMAL
- en: Voila…!!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/43b935a84473b025263a30a0be06999d.png)'
  prefs: []
  type: TYPE_IMG
- en: Using a heatmap to display multivariate categorical data. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to be considered is that using the heatmap charts to display multivariate
    categorical data has a limit of comparing only two dimensions of data while other
    categories are used to make the cartesian product.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Back to basic with a Clustered bar chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sharing the same concept as applying the heatmap chart, a clustered bar chart
    uses cartesian products and subplots to display multiple bar charts for comparing
    between categories. The bar chart is simpler and easier to understand since it
    is a basic chart many people are familiar with.
  prefs: []
  type: TYPE_NORMAL
- en: The code below is almost identical to the previous one, except we use Seaborn’s
    [bar chart](https://seaborn.pydata.org/generated/seaborn.barplot.html) function
    instead of the heatmap function.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/270fd37f0bcaec25a4bde3eb4724fa86.png)'
  prefs: []
  type: TYPE_IMG
- en: Using a clustered bar chart to display multivariate categorical data. Image
    by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Stack the bars into a Clustered stacked bar chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The bar charts can simply turn into stacked bar charts. The stacked bars are
    suitable for displaying the total of each category and the ratio of each stacked
    bar’s component.
  prefs: []
  type: TYPE_NORMAL
- en: By the way, please consider that the stacked bar chart can be misleading since
    the base of each component, except the lowest one, does not start from the same
    point. Thus, it can be challenging for people to interpret or compare between
    the stacked bar’s components.
  prefs: []
  type: TYPE_NORMAL
- en: The following code also applies cartesian products and subplots with Panda DataFrame’s
    [plot function](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.html)
    to build a clustered stacked bar chart.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/12a0cdcbf73b8b81b45cd9a85e028e4e.png)'
  prefs: []
  type: TYPE_IMG
- en: Using a clustered stacked bar chart to display multivariate categorical data.
    Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Handel multiple dimensions with a Parallel coordinates diagram
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A parallel coordinates diagram can show n-dimensional space by using multiple
    vertical axes. All these axes have equal lengths and are parallel with equal distances.
    An advantage of using this chart is that we can see the flow of data according
    to the order of categories.
  prefs: []
  type: TYPE_NORMAL
- en: The chart can be too dense to interpret if we directly plot every frequency
    value. Thus, before plotting, let’s use Panda’s [cut](https://pandas.pydata.org/docs/reference/api/pandas.cut.html)
    function to group the frequencies in ranges.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/694345e3f461e2ee922a96e7eb169be7.png)'
  prefs: []
  type: TYPE_IMG
- en: The code below shows how to map the location with values for assigning color
    in the plot. Next, let’s build a parallel coordinates diagram with [Plotly](https://plotly.com/python/parallel-categories-diagram/).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f3cb052a0c4b2ff22a9e91183ba7f96a.png)'
  prefs: []
  type: TYPE_IMG
- en: Using parallel coordinates diagram to display multivariate categorical data.
    Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Showing parts-to-whole relationship with a Mosaic plot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chart is also known as [Marimekko chart](https://en.wikipedia.org/wiki/Mosaic_plot)
    or percent stacked bar plot. The idea behind the mosaic plot is to show a parts-to-whole
    relationship, the same as the treemap chart. In the result below, this chart looks
    like stacked bar charts with varying widths.
  prefs: []
  type: TYPE_NORMAL
- en: To quickly create a mosaic plot, we can use the [mosaic](https://www.statsmodels.org/stable/generated/statsmodels.graphics.mosaicplot.mosaic.html)
    function from the Statsmodels library. The function will calculate the frequency
    from the input categories. Thus, we can use the DataFrame with no frequency variables.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the maximum number of categories that can be plotted with this
    function is four, which can be considered a limitation using the mosaic plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f990e966bde236d1777ab0360521331a.png)'
  prefs: []
  type: TYPE_IMG
- en: Using a mosaic plot to display multivariate categorical data. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let’s wrap up the 7 data visualizations that this article has covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Sunburst chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Treemap chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heatmap chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clustered bar chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clustered stacked bar chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parallel coordinates diagram
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mosaic plot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we take a closer look at every chart, it can be noticed that they all have
    something in common. Not only can they express the data levels, but they can also
    show the ratio or proportion of data in each category. This can be considered
    as why they are suitable for displaying the numerous categories in multivariate
    categorical data.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, I’m quite sure there are more graphs to be used than mentioned here.
    Charts in this article are just examples using Python. If you have any suggestions,
    please feel free to leave a comment.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of my data visualization articles that you may find interesting:'
  prefs: []
  type: TYPE_NORMAL
- en: 8 Visualizations with Python to Handle Multiple Time-Series Data ([link](/8-visualizations-with-python-to-handle-multiple-time-series-data-19b5b2e66dd0))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7 Visualizations with Python to Express changes in Rank over time ([link](/7-visualizations-with-python-to-express-changes-in-rank-over-time-71c1f11d7e4b))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9 Visualizations with Python to show Proportions or Percentages instead of a
    Pie chart ([link](/9-visualizations-to-show-proportions-or-percentages-instead-of-a-pie-chart-4e8d81617451))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9 Visualizations with Python that Catch More Attention than a Bar Chart ([link](/9-visualizations-that-catch-more-attention-than-a-bar-chart-72d3aeb2e091))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Animation to Show 4 Centroid-Based Clustering Algorithms using Python
    and Sklearn ([link](https://medium.com/towards-data-science/creating-animation-to-show-4-centroid-based-clustering-algorithms-using-python-and-sklearn-d397ade89cb3))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wikimedia Foundation. (2023, September 6). *Categorical variable*. Wikipedia.
    [https://en.wikipedia.org/wiki/Categorical_variable](https://en.wikipedia.org/wiki/Categorical_variable)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wikimedia Foundation. (2023a, August 31). *Multivariate statistics*. Wikipedia.
    [https://en.wikipedia.org/wiki/Multivariate_statistics](https://en.wikipedia.org/wiki/Multivariate_statistics)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kassambara. (2017, November 17). *Visualizing Multivariate Categorical Data*.
    STHDA. [http://www.sthda.com/english/articles/32-r-graphics-essentials/129-visualizing-multivariate-categorical-data](http://www.sthda.com/english/articles/32-r-graphics-essentials/129-visualizing-multivariate-categorical-data)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Horbach, A. (2022, May 3). *Visualizing Multidimensional Categorical Data using
    plotly*. Medium. [https://towardsdatascience.com/visualizing-multidimensional-categorical-data-using-plotly-bfb521bc806f](/visualizing-multidimensional-categorical-data-using-plotly-bfb521bc806f)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Insightsoftware. (2023, July 24). *Comparing data visualizations: Bar vs. stacked,
    icons vs. shapes, and line vs. area*. insightsoftware. [https://insightsoftware.com/blog/comparing-data-visualizations-bar-vs-stacked-icons-vs-shapes-and-line-vs-area](https://insightsoftware.com/blog/comparing-data-visualizations-bar-vs-stacked-icons-vs-shapes-and-line-vs-area/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
