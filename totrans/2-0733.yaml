- en: Develop Your Own Spelling Check Toolkit with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/develop-your-own-spelling-check-toolkit-with-python-740bf84a865d](https://towardsdatascience.com/develop-your-own-spelling-check-toolkit-with-python-740bf84a865d)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Creating an application to verify your spellings effectively with Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://bharath-k1297.medium.com/?source=post_page-----740bf84a865d--------------------------------)[![Bharath
    K](../Images/b6f215f28132a953bcae80842301e303.png)](https://bharath-k1297.medium.com/?source=post_page-----740bf84a865d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----740bf84a865d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----740bf84a865d--------------------------------)
    [Bharath K](https://bharath-k1297.medium.com/?source=post_page-----740bf84a865d--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----740bf84a865d--------------------------------)
    ·7 min read·Jan 11, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7afeb5ad5b1c2c058199cdc11b12f4fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Olesia 🇺🇦 Buyar](https://unsplash.com/@olesichka?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Whenever I start writing articles or any other work-related items, my primary
    focus is to put out my ideas and compile them into a document or piece of paper.
    During this process, I often find myself running into spelling errors or grammatical
    mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, it is a fantastic idea to build your own spell-check software, especially
    if you run into similar problems and want to optimize your work while your priority
    of concentration revolves around generating and developing your ideas.
  prefs: []
  type: TYPE_NORMAL
- en: While several tools already serve this purpose, the advantage of building your
    own software is that you can customize the project for additional improvements.
    Several additions, such as an interactive environment (built with Tkinter or other
    similar libraries), natural language processing techniques (like autocorrect),
    and many other extra functionalities, can be considered to enhance the project
    further.
  prefs: []
  type: TYPE_NORMAL
- en: It is also critical to note that while there are several enhancements that you
    can make to the project, it is difficult for the artificial intelligence built
    to understand the true semantic meaning behind sentences. Hence, statements of
    humor, sarcasm, or generic phrases might be misunderstood by the software built.
    We will look at tackling these challenges in future articles.
  prefs: []
  type: TYPE_NORMAL
- en: A project that I would encourage the readers to check out before proceeding
    with this article is a guide on how to build your language filter with Python
    from the link provided below. We can compile the work in this article and the
    previous one to further upgrade the project, where certain inappropriate slang
    words might be censored while pointing out spelling errors.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/build-your-language-filter-with-python-d6502f9c224b?source=post_page-----740bf84a865d--------------------------------)
    [## Build Your Language Filter With Python'
  prefs: []
  type: TYPE_NORMAL
- en: A guide on how to build a language filter in python useful for censoring foul
    language and other inappropriate stuff
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/build-your-language-filter-with-python-d6502f9c224b?source=post_page-----740bf84a865d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Developing the Spelling Check Application:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/095bd1b0d63cea9f3f77bec91c4f3eb0.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Dariusz Sankowski](https://unsplash.com/es/@dariuszsankowski?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: In this section of the article, we will work on constructing the application
    to highlight the spellings accordingly with their appropriate colors to signify
    if they are right or wrong (Green highlighting a correct word while red signifying
    a possible error). Each sub-section of this article will cover all the major components
    of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Our primary objective is to develop appropriate spell-check software for the
    user. Hence, we will not convert the wrong words directly into the closest suggested
    word, as in the case of an autocorrect project. We will look at such a task in
    a future article! For now, let us get started with the spelling check application
    with Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Importing the essential libraries:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The essential libraries that we will utilize for this task are the *natural
    language processing toolkit (NLTK)* and its corresponding word corpus containing
    a list of the widespread English words. Note that if the developers wish to, they
    can choose to create their own dictionary containing all the words they want to
    add to their vocabulary. However, this process may be quite tedious but worth
    the pain for the specific task.
  prefs: []
  type: TYPE_NORMAL
- en: The other libraries that we will utilize for this project are the term color
    and *regular expressions* modules. All the libraries mentioned in this article
    can be installed with a straightforward `pip install` command. The regular expressions
    library helps us to pre-process the unnecessary contents from the particular sentence
    to only focus on the entered words. On the other hand, the term color library
    helps to segregate the right and wrong words by assigning the appropriate color.
  prefs: []
  type: TYPE_NORMAL
- en: Below is the list of all the required libraries that must be imported to get
    started with the project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Pre-processing the input sentence:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section of the project, we will focus on accepting an input sentence
    from the user to spell test the sentence appropriately. Using the regular expressions
    substitute command, we will replace punctuations and other special characters
    with a blank space. We do the following step to prevent the inclusion of these
    characters along with the words. We can also convert the characters into lower
    case and prepare to evaluate the sentence. The code block for performing the following
    actions is provided below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating the sequential pattern for spell checking the data:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will split the sentence and verify the spelling of each
    word individually. We can use the split command to split each word based on spaces.
    Note that since we have already pre-processed the sentence in the previous steps,
    all punctuations and special characters are removed accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to check if each word in the sentence exists in the list of
    the *nltk* words package. A word with no inclusion of the respective word in the
    package will be printed in red using the term color library functionality that
    we previously imported. All the correct words will be interpreted in green, and
    the sentence will be provided to the user. Below is the code block for computing
    the following process.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once we finish coding the program, we can proceed to test the output via the
    command prompt or a local terminal in the interactive development environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Testing the output:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/82ddfb3bd7a0ee3772405daf59f66441.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by Author
  prefs: []
  type: TYPE_NORMAL
- en: Once we have finished coding our project, we can test the output by entering
    a random sentence and experimenting with how the program works. In about 30 lines
    of code, we can notice that we have been successfully able to detect a pattern
    of words that may be spelled incorrectly by marking them in red while all the
    correctly spelled words are marked in green.
  prefs: []
  type: TYPE_NORMAL
- en: The program helps to deduce an error in the spelling of a particular sentence
    or paragraph, but there are several improvements that we can make to further make
    this project much better. We will cover a few more of the additional improvements
    that curious developers can explore in the upcoming section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additional improvements:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will look at a few of the many improvements that we can
    add to improve this project further. A few noteworthy additions would be as follows
    for developers to start working on next —
  prefs: []
  type: TYPE_NORMAL
- en: Adding a language filter, as discussed in the previous section, to censor foul
    language or any other inappropriate slang words makes it a project that can be
    deployed on an effective framework.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using deep learning and natural language processing for the inclusion of autocorrect
    techniques and next-word predictions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Developing a user interface for the following project instead of working on
    a command terminal or the compiler of the IDE. I have provided a list of the seven
    best UI graphics tools available in Python for the efficient development of your
    Projects with some starter codes that you can check out from the link below.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[](/7-best-ui-graphics-tools-for-python-developers-with-starter-codes-2e46c248b47c?source=post_page-----740bf84a865d--------------------------------)
    [## 7 Best UI Graphics Tools For Python Developers With Starter Codes'
  prefs: []
  type: TYPE_NORMAL
- en: The seven best UI graphics tools available in Python for developing cool user
    interface technologies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/7-best-ui-graphics-tools-for-python-developers-with-starter-codes-2e46c248b47c?source=post_page-----740bf84a865d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Conclusion:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/aaa13de052f3192ce6621be440506e3f.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Aaron Burden](https://unsplash.com/@aaronburden?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: “It is a damn poor mind that can think of only one way to spell a word.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ― **Andrew Jackson**
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Typing or writing are essential elements in most people’s lifestyles. While
    typing numerous words, sentences, and paragraphs, it is not uncommon to run into
    different types of spelling mistakes ranging from slightly longer ones to mediocre
    ones to the simplest spelling mistakes. While there are several tools that pinpoint
    these errors, it is extremely satisfying to build your own custom spell-check
    application that can be further upgraded to be the most suitable device for your
    liking.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we learned how to build a simple spell-checking software application
    with Python in about 30 lines of code. We made use of the natural language processing
    toolkit library to simplify the process of accumulating most of the reasonable
    English words available in a typical dictionary. We utilized regular expressions
    for streamlining the data and used the term color library to highlight the right
    and wrong words accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to get notified about my articles as soon as they go up, check out
    the following [link](https://bharath-k1297.medium.com/subscribe) to subscribe
    for email recommendations. If you wish to support other authors and me, then subscribe
    to the below link.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://bharath-k1297.medium.com/membership?source=post_page-----740bf84a865d--------------------------------)
    [## Join Medium with my referral link - Bharath K'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Bharath K (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: bharath-k1297.medium.com](https://bharath-k1297.medium.com/membership?source=post_page-----740bf84a865d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: If you have any queries related to the various points stated in this article,
    then feel free to let me know in the comments below. I will try to get back to
    you with a response as soon as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Check out some of my other articles in relation to the topic covered in this
    piece that you might also enjoy reading!
  prefs: []
  type: TYPE_NORMAL
- en: '[](/the-ultimate-replacements-to-jupyter-notebooks-51da534b559f?source=post_page-----740bf84a865d--------------------------------)
    [## The Ultimate Replacements to Jupyter Notebooks'
  prefs: []
  type: TYPE_NORMAL
- en: Discussing an excellent replacement option to Jupyter Notebooks for interpreting
    Data Science projects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/the-ultimate-replacements-to-jupyter-notebooks-51da534b559f?source=post_page-----740bf84a865d--------------------------------)
    [](/7-best-research-papers-to-read-to-get-started-with-deep-learning-projects-59e11f7b9c32?source=post_page-----740bf84a865d--------------------------------)
    [## 7 Best Research Papers To Read To Get Started With Deep Learning Projects
  prefs: []
  type: TYPE_NORMAL
- en: The seven best research papers that have stood the test of time and will help
    you to create amazing projects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/7-best-research-papers-to-read-to-get-started-with-deep-learning-projects-59e11f7b9c32?source=post_page-----740bf84a865d--------------------------------)
    [](/visualizing-cpu-memory-and-gpu-utilities-with-python-8028d859c2b0?source=post_page-----740bf84a865d--------------------------------)
    [## Visualizing CPU, Memory, And GPU Utilities with Python
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing CPU, memory usage, and GPU components for monitoring your PC and deep
    learning projects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/visualizing-cpu-memory-and-gpu-utilities-with-python-8028d859c2b0?source=post_page-----740bf84a865d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Thank you all for sticking on till the end. I hope all of you enjoyed reading
    the article. Wish you all a wonderful day!
  prefs: []
  type: TYPE_NORMAL
