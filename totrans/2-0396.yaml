- en: The Easiest Guideline on Image Blending (CV-03)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/blend-images-and-create-watermark-with-opencv-d24381b81bd0](https://towardsdatascience.com/blend-images-and-create-watermark-with-opencv-d24381b81bd0)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Easiest Guideline on Blending and Pasting Image for Computer Vision
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://zubairhossain.medium.com/?source=post_page-----d24381b81bd0--------------------------------)[![Md.
    Zubair](../Images/1b983a23226ce7561796fa5b28c00d65.png)](https://zubairhossain.medium.com/?source=post_page-----d24381b81bd0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d24381b81bd0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d24381b81bd0--------------------------------)
    [Md. Zubair](https://zubairhossain.medium.com/?source=post_page-----d24381b81bd0--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d24381b81bd0--------------------------------)
    ·6 min read·Apr 13, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7f1dc89435fe6445f3f3eeb371da65f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Kaptai Lake in Bangladesh (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the modern world, there are thousands of tools by which we can easily perform
    edit, resize, alter, add different effects, etc. operations on an image. But we
    hardly care about how it works in the backend. This article will discuss one of
    the important image processing techniques called ***blending and pasting*** images.
    This knowledge is essential both for image processing and computer vision. Though
    the techniques are simple, it is one of the core basics of computer vision.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a beginner in image processing and computer vision, this article
    might be helpful for you.
  prefs: []
  type: TYPE_NORMAL
- en: '`[N.B. This article is part of my computer vision series. You may also read
    my previous articles on [*NumPy and OpenCV basic*](https://medium.com/towards-data-science/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68)
    and [*Color representation*](https://medium.com/towards-data-science/how-color-is-represented-and-viewed-in-computer-vision-b1cc97681b68)
    as well.]`'
  prefs: []
  type: TYPE_NORMAL
- en: Table of Content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`[**What is image blending?**](#303b)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[**When blending is important?**](#55fd)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[**Step by step implementation with OpenCv**](#72c8)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is image blending and pasting?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: According to the oxford dictionary, ***‘blend’***means ***“a mixture of different
    substances or other things.”*** The word is also used for similar meanings in
    image processing and computer vision.It’s a technique of combining two or more
    images to create a new one. The output image holds the elements of the input images.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/61076af5452109b60573d14adaa4bacb.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Blending (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: '***Blending is possible when the image size is the same or different.*** Both
    of the methods will be discussed in the implementation section.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Pasting*** an image means copying the pixels of an image to another image.'
  prefs: []
  type: TYPE_NORMAL
- en: When blending is important?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We often need the process of combining two or more images. Generally, we can
    do it with image editing software. In computer vision, we need to develop an automated
    image-blending process. In that case, manual editing is not possible. So, hands-on
    knowledge is required in this case.
  prefs: []
  type: TYPE_NORMAL
- en: Step by Step Implementation with OpenCV
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can blend image when —
  prefs: []
  type: TYPE_NORMAL
- en: '`***Blended image size is same***`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`***Image size is different***`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Let’s import the necessary libraries.*'
  prefs: []
  type: TYPE_NORMAL
- en: It’s time to read the images with **OpenCV**. `cv2.imread()` function helps
    us to read the images.
  prefs: []
  type: TYPE_NORMAL
- en: Visualize the first image.
  prefs: []
  type: TYPE_NORMAL
- en: Before visualization, I converted the color channel from `BGR to RGB` because
    `OpenCV` read the image in `BGR` format. On the other hand, matplotlib works in
    `RGB` format. So, I have converted the color channel with `c2.COLOR_BGR2RGB`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, visualize the second image.
  prefs: []
  type: TYPE_NORMAL
- en: We will combine these two images to create a watermark on the first image.
  prefs: []
  type: TYPE_NORMAL
- en: '**For Same Image Size**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the case of blending the images with the same size, the shape of the images
    must be equal. Let’s find the shape of our images.
  prefs: []
  type: TYPE_NORMAL
- en: The shape of the two images is different. Now, we need to reshape the images
    to reform these images.
  prefs: []
  type: TYPE_NORMAL
- en: We have transformed the two images into equal sizes successfully.
  prefs: []
  type: TYPE_NORMAL
- en: '***We are at the final step to blend the images.***'
  prefs: []
  type: TYPE_NORMAL
- en: 'In image blending, we use a mathematical formula to combine the pixel values
    of two or more images to create a new image. The formula used for blending is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/12518f890f11ff066477ec0eb9405187.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, `image_1` and `image_2` are the two images that we want to blend. **Alpha**
    and **beta** are blending weights that determine the contribution of each image
    to the final output. **Gamma** is a scalar value added to create noise in the
    output image.
  prefs: []
  type: TYPE_NORMAL
- en: The **alpha, beta, and gamma** values can be adjusted to control the appearance
    of the output image. For example, increasing the **alpha** valuewill increase
    the contribution of `image_1` to the output, resulting in a final image that looks
    more likely to `image_1`. Similarly, increasing the **beta** valuewill increase
    the contribution of `image_2` to the output, resulting in a final image that looks
    more likely to `image_2`.
  prefs: []
  type: TYPE_NORMAL
- en: '*The following piece of code can do the job.*'
  prefs: []
  type: TYPE_NORMAL
- en: We have used the `cv2.addWeighted()` function to blend the images using the
    blending formula. We set the values of **alpha 0.4 and beta 0.6**, which means
    that the second image contributes more than the first image to the final output.
    We set the value of gamma to 0, which means that no scalar value is added to the
    result.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we display the output image using the `plt.imshow()` function. We have
    found that image two is more visible than image one. As we have used, **the beta**
    value is more than the **alpha** value.
  prefs: []
  type: TYPE_NORMAL
- en: We have successfully blended the images with equal sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Most often, we need to blend different size images. There is no straightforward
    way to do this. We need to follow some tricks and processes to do so. In the next
    section, I will show the implementation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Image blending with different sizes**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After importing the libraries and images, we will resize the two images for
    the simplicity of the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Create a Region of Interest (ROI)**'
  prefs: []
  type: TYPE_NORMAL
- en: A region of interest (ROI) is part of an image you want to select and process
    separately from the rest of the image. ROIs can be defined using coordinates or
    shapes like rectangles or polygons. For instance, in face detection in an image,
    an ROI can be selected around the expected location of faces, leading to improved
    accuracy and efficiency of the algorithm. The following graphical representation
    shows how it works.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fcbf2a87636949be13f3d9c9cc4c4764.png)'
  prefs: []
  type: TYPE_IMG
- en: Region of Interest (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: In the above figure, we want to cut a small white portion of width and height
    (100,300) from the large image (400, 700). We have done the same thing for our
    task.
  prefs: []
  type: TYPE_NORMAL
- en: We have first selected the portion of the large image, which is equal to the
    shape of the small images, to the bottom right corner.
  prefs: []
  type: TYPE_NORMAL
- en: These lines of code define **x_off and y_off** as the horizontal and vertical
    offsets for creating **ROI** from the image. The first image has a width of *2400*
    pixels and a height of *2000* pixels; the second image has a width and height
    of *1400* pixels. We want to create ROI in the bottom right corner of the first
    image as we want to paste the second image onto the bottom-right corner of the
    first image.
  prefs: []
  type: TYPE_NORMAL
- en: The above image is the extracted region where we will paste the second image.
    It’s time to paste the second image (copyright) on top of the extracted region.
  prefs: []
  type: TYPE_NORMAL
- en: '**Create a Mask Image to Put Watermark**'
  prefs: []
  type: TYPE_NORMAL
- en: Image masking is the technique of selecting the important part of an image hiding
    rest. For our case, we just want to extract the letters of the following copyright
    image.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/80ddf04ebf6bbe17ac12af4989522b2b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: It’s an image with three color channels. Let’s convert it to a grayscale image;
    otherwise, it will be difficult for us to operate further operations.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we see the text ***‘Capture By Zubair,’*** which is black. We need to
    keep this portion unchanged and change the other portion.
  prefs: []
  type: TYPE_NORMAL
- en: We need to create a **mask** to separate the foreground and background of an
    image. In blending images, we need to create a mask that represents the shape
    of the foreground object so that we can isolate it and blend it with the background
    image.
  prefs: []
  type: TYPE_NORMAL
- en: '*Let’s inverse the image pixels to transform white into black and black into
    white.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will perform a bitwise **OR** operation on the inversed masked image
    to extract the main color of the masked region.
  prefs: []
  type: TYPE_NORMAL
- en: '`[N.B. If you want to know more about bitwise OR operation of OpenCV, read
    the [article](https://dontrepeatyourself.org/post/bitwise-operations-and-image-masking-opencv/).
    ]`'
  prefs: []
  type: TYPE_NORMAL
- en: We have successfully extracted the color of the copyright image into the masked
    region. Again, we will run a bitwise OR operation on the extracted [***ROI image***](#458f).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s join the full background image to the above image.
  prefs: []
  type: TYPE_NORMAL
- en: We have just replaced the background image pixels with the masked ROI image.
    Finally, we formulated our final image with a watermark.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I have tried my best to represent the process of blending in the easiest possible
    way. This knowledge is one of the fundamentals of computer vision.
  prefs: []
  type: TYPE_NORMAL
- en: '*I have selected some of the articles for you.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68?source=post_page-----d24381b81bd0--------------------------------)
    [## Getting Started with NumPy and OpenCV for Computer Vision'
  prefs: []
  type: TYPE_NORMAL
- en: Start Your Coding for Computer vision with Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68?source=post_page-----d24381b81bd0--------------------------------)
    [](/how-color-is-represented-and-viewed-in-computer-vision-b1cc97681b68?source=post_page-----d24381b81bd0--------------------------------)
    [## A Comprehensive Guide on Color Representation in Computer Vision
  prefs: []
  type: TYPE_NORMAL
- en: A Detail Explanation of Color Space and Color Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-color-is-represented-and-viewed-in-computer-vision-b1cc97681b68?source=post_page-----d24381b81bd0--------------------------------)
  prefs: []
  type: TYPE_NORMAL
