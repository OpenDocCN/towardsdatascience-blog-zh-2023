- en: How to Calculate Conditional Probabilities from Any DataFrame in 3 Lines of
    Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/unlock-the-secret-to-effortlessly-calculating-conditional-probabilities-from-any-dataframe-a232ca71e33c](https://towardsdatascience.com/unlock-the-secret-to-effortlessly-calculating-conditional-probabilities-from-any-dataframe-a232ca71e33c)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn to write a simple Python function that will calculate conditional probabilities
    using notation like p(exam=1 | study=1)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://grahamharrison-86487.medium.com/?source=post_page-----a232ca71e33c--------------------------------)[![Graham
    Harrison](../Images/c6bfe00c6e0cfcdf3bd042c7fdc03554.png)](https://grahamharrison-86487.medium.com/?source=post_page-----a232ca71e33c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a232ca71e33c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a232ca71e33c--------------------------------)
    [Graham Harrison](https://grahamharrison-86487.medium.com/?source=post_page-----a232ca71e33c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a232ca71e33c--------------------------------)
    ¬∑6 min read¬∑Feb 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49261007e57b90575e7a9af51a7f4d6a.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Dan Cristian PƒÉdure»õ](https://unsplash.com/@dancristianpaduret?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/xJLN32FO7AY?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I have continued to delve into causal inference I reached a stage where I
    needed to be able to construct formulas that use complex combinations of conditional
    probabilities and the code was starting to be difficult to read and maintain.
    This led to me developing a simple way to calculate conditional probabilities.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this article you will be equipped with a short Python function
    that can apply a conditional probability directly to a any pandas `DataFrame`
    and return the result.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A Recap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Conditional probability is the probability of an event occurring given that
    another event has already occurred. The notation ùëÉ(ùê¥‚à£ùêµ) can be understood as the
    probability (P) of event A given (|) that event B has already occurred.
  prefs: []
  type: TYPE_NORMAL
- en: To extend this one step forward the notation ùëÉ(ùê¥‚à£ùêµ,ùê∂) means the probability
    of event A given that both event B and event C have already occurerd.
  prefs: []
  type: TYPE_NORMAL
- en: An Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We all know that if a fair coin is tossed twice the probability of getting two
    heads is 0.25 because the probability of the first event (tossing the first coin
    and getting ahead) is 0.5 multiplied by the probability of the second event (tossing
    the second coin and getting a head), also 0.5 i.e. 0.5 x 0.5 = 0.25.
  prefs: []
  type: TYPE_NORMAL
- en: The simple multiplication works when the two events are completely independent
    of each other i.e. there is no way that the result of the first coin toss can
    impact the second so before we perform the two events the probability of two heads
    is 0.25.
  prefs: []
  type: TYPE_NORMAL
- en: However, not all events are independent and this is best explained using an
    example ‚Ä¶
  prefs: []
  type: TYPE_NORMAL
- en: Here is a table of synthetic data representing a fictitious sample of 800 people
    where whether they study or not and whether they pass an exam or not has been
    observed and recorded ‚Ä¶
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f99d21937e76b06ae1fe83eca560375f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: The probability of passing the exam (exam=1) is as follows -
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fd08348091681e56648acb4503615384.png)'
  prefs: []
  type: TYPE_IMG
- en: 'How about if we ask the following question:'
  prefs: []
  type: TYPE_NORMAL
- en: One of the test subjects is selected at random and it is found that they studied
    (study=1). What is the probability that they passed the exam (exam=1)?
  prefs: []
  type: TYPE_NORMAL
- en: These probabilities are not independent like the coin tossing because we already
    know that the chosen subject studied. The answer to this question can be expressed
    as follows -
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dbe09afec0e55d58b1bbf90d962c4b3f.png)'
  prefs: []
  type: TYPE_IMG
- en: i.e. the what is probability that exam = 1 given that study = 1?
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways to calculate this result, the intuitive way and the probabilistic
    way.
  prefs: []
  type: TYPE_NORMAL
- en: The Intuitive Way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is easy to see that there are 400 studiers (341 + 59) by looking for rows
    in the summary table where study = 1 -
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9f7e7bef0af5d0095bcc1d4224d85c99.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: If we have already selected a studier, they must have come from this part of
    the sample. Of these 400 it is easy to see that 59 pass the exam, so ‚Ä¶
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49e10e2c7ab5f4c8939c05f904cfdd4d.png)'
  prefs: []
  type: TYPE_IMG
- en: The Mathematical Way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The formula for calculating a conditional probability is as follows -
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b5720e37f0fa5d816047aa1e7f3ab5c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Note ‚Äî the notation P(A|B) can be read as ‚Äî the conditional probability or event
    A ‚Äúgiven‚Äù event B.
  prefs: []
  type: TYPE_NORMAL
- en: Personally I find this to be less intuitive that the first solution as I can
    easily visualise what is going on inside the `DataFrame` of values but this way
    does have a big advantage. If you only have access to the probabilities and not
    to all of the underlying data then the "Intuitive Way" is not an option.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the following which is the same summary but with the probabilities
    instead of the counts ‚Ä¶
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ea2875a39eca05555434869b895ff2c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Now p(exam=1 | study=1) can be calculated as follows -
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e513ed35b96b56f23797ef5c06d99dd6.png)'
  prefs: []
  type: TYPE_IMG
- en: The Python Function Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Given the explanation of conditional probabilities, the objective now is to
    develop a Python function that can take all of the pain away and just work them
    out for any pandas `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need are some test data. I have created a synthetic dataset
    using my `BinaryDataGenerator` class. If you would like the full source code,
    head over to this article ‚Ä¶
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-generate-synthetic-data-for-any-causal-inference-project-in-less-than-10-lines-of-code-158688a89349?source=post_page-----a232ca71e33c--------------------------------)
    [## How to Generate Synthetic Data for any Causal Inference Project in less than
    10 Lines of Code'
  prefs: []
  type: TYPE_NORMAL
- en: If 99% are Vaccinated, 1% Get a Reaction and 2% Get the Disease How Can You
    Generate Representative Synthetic Data?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-generate-synthetic-data-for-any-causal-inference-project-in-less-than-10-lines-of-code-158688a89349?source=post_page-----a232ca71e33c--------------------------------)
    ![](../Images/9120da1c67451600530123b4034c7a2f.png)
  prefs: []
  type: TYPE_NORMAL
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Version 1: Basic Function'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most basic version of the function, implemented using the promised ‚Äú3 lines
    of code‚Äù is as follows -
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Version 2: Basic Function Plus LaTeX Output'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: However, I soon got bored with all the `print` statements to show the results
    which led to the second version which can optionally output a LaTeX representation
    of the calculation ...
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/956ab66ac7a4f906d3c4151b0b6ace43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Version 3: Advanced Function'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having got this far I really wanted a final version where I could just say P(exam=1
    | study=1) directly and get the result, but I also wanted to retain `outcome`
    and `events` as optional parameters so I could choose with method to use ...
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/956ab66ac7a4f906d3c4151b0b6ace43.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Conditional probabilities are very useful in a range of statistical and machine
    learning solutions but there is no easy, readable and repeatable way to calculate
    them from a pandas `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: This article has explained what conditional probabilities are, given an example
    and then provided all the source code for a Python function that can take any
    `DataFrame` and then calculate and display the result.
  prefs: []
  type: TYPE_NORMAL
- en: If you enjoyed this article you can get unlimited access to thousands more by
    becoming a Medium member for just $5 a month by [clicking on my referral link](https://grahamharrison-86487.medium.com/membership)
    (I will receive a proportion of the fees if you sign up using this link at no
    extra cost to you).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://grahamharrison-86487.medium.com/membership?source=post_page-----a232ca71e33c--------------------------------)
    [## Join Medium with my referral link - Graham Harrison'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Graham Harrison (and thousands of other writers on Medium).
    Enhance your knowledge of Data‚Ä¶
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: grahamharrison-86487.medium.com](https://grahamharrison-86487.medium.com/membership?source=post_page-----a232ca71e33c--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '[Subscribing to a free e-mail whenever I publish a new story](https://grahamharrison-86487.medium.com/subscribe).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Taking a quick look at my previous articles](https://grahamharrison-86487.medium.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Downloading my free strategic data-driven decision making framework](https://relentless-originator-3199.ck.page/5f4857fd12).'
  prefs: []
  type: TYPE_NORMAL
- en: Visiting my data science website ‚Äî [The Data Blog](https://www.the-data-blog.co.uk/).
  prefs: []
  type: TYPE_NORMAL
