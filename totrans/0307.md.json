["```py\nimport pandas as pd\nimport numpy as np\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n!pip install pysal\n!pip install geoplot\nimport pysal\nimport seaborn as sns\nimport folium\n\n# For points map\nimport geoplot.crs as gcrs\nimport geoplot as gplt\n\n# packages for Hypothesis test\nfrom pysal.explore import esda\nfrom pysal.lib import weights\nfrom esda.moran import Moran\nfrom splot.esda import plot_moran\nfrom splot import esda as esdaplot\n```", "```py\n# Convert Pandas df to Geopandas df\nlistings_gpd = gpd.GeoDataFrame(listings,\n                                geometry=gpd.points_from_xy(listings.longitude, listings.latitude, crs=4326))\n\n# Generate weights Matrix W from the Geo Data\nw = weights.Queen.from_dataframe(listings_gpd)\n```", "```py\n# Row Standardization\nw.transform = 'R'\n```", "```py\nfrom splot.libpysal import plot_spatial_weights\nplot_spatial_weights(w, listings_gpd)\n```", "```py\n# calculate the spatial lag\nlistings_gpd['price_lag'] = weights.spatial_lag.lag_spatial(w, listings_gpd['price'])\n```", "```py\n# Calculating Moran's I for price (Global spatial correlation)\nmoran_stat = esda.moran.Moran(listings_gpd['price'], w)\nprint(f\"Moran's I: {moran_stat.I}\")\nprint(f\"Moran's I p-Value: {moran_stat.p_sim}\")\n\n[OUT]\nMoran's I: 0.2118266504045153\nMoran's I p-Value: 0.001\n```", "```py\nplot_moran(moran_stat);\n```", "```py\n# Local Spatial Correlation\nprice_local_I = esda.moran.Moran_Local(listings_gpd['price'], w)\n\n#Plotting the output density plot\nsns.kdeplot(price_local_I.Is);\n```", "```py\n# Figure\nf, ax = plt.subplots(1, figsize=(12,8))\n\n# plot choropleth of local statistics\n(listings_gpd\n .assign(ML_I = price_local_I.Is)\n .plot(column = 'ML_I', cmap='vlag',\n       scheme='quantiles',\n       k=4,\n       edgecolor='white',\n       linewidth= 0.1,\n       alpha=0.75,\n       legend=True,\n       ax=ax)\n);\n```", "```py\n# Determine what's statistically significant correlation\nalpha = 0.05\nlabels = 1* (price_local_I.p_sim < alpha)\n\n# Add to data frame\nlistings_gpd = listings_gpd.assign( stat_cd = labels)\nlistings_gpd['stat_label'] = listings_gpd.stat_cd.map({0:'Not stat significant', 1:'stat significant'})\n```", "```py\n# Plot statistically significant correlation\nlistings_gpd.plot(\n    column = 'stat_label',\n    categorical=True,\n    k=2,\n    cmap='vlag',\n    edgecolor = 'white',\n    linewidth= 0.1,\n    legend=True);\n```", "```py\n# Figure\nf, ax = plt.subplots(1, figsize=(5,5))\n\n# Plot quadrants statistically significant\nesdaplot.lisa_cluster(price_local_I, \n                      listings_gpd, \n                      p=alpha, ax=ax);\n```", "```py\n# Get quadrants and p-values\nquadrants = pd.DataFrame({'quadrant': price_local_I.q, 'p':price_local_I.p_sim})\nquadrants['significant'] = labels\nquadrants.quadrant.where(quadrants.p > alpha, other= 5, inplace=True )\n\n# Add quadrants colors to variable in listings\nlistings['quadrants'] = quadrants.quadrant.map({1:'HH', 2:'LH', 3:'LL', 4:'HL', 5:'NS'})\nlistings['quadrants_colors'] = quadrants.quadrant.map({1:'red', 2:'lightblue', 3:'blue', 4:'orange', 5:'gray'})\n```", "```py\n# Preparing data for plot\ndata = listings[['latitude','longitude', 'price']].values\ndata =data.tolist()\n\n# Create a Base map with Folium\nm = folium.Map(location= [35.5951, -82.5515], zoom_start=12)\n\nfor lat, lon, q, ptcolor in zip(listings.latitude, listings.longitude, listings.quadrants, listings.quadrants_colors):\n  folium.CircleMarker(\n     location=[lat, lon],\n     radius=2,\n     opacity=0.5,\n     color=ptcolor,\n     fill=True,\n     fill_color=ptcolor,\n     popup=q,\n  ).add_to(m)\n\n# Add a choropleth layer\nfolium.Choropleth(\n    geo_data=asheville,\n    name=\"choropleth\",\n    data=listings,\n    columns=[\"neighbourhood\", \"price\"],\n    key_on=\"feature.properties.neighbourhood\",\n    fill_color=\"RdBu_r\",\n    fill_opacity=0.1,\n    line_opacity=0.8,\n    legend_name=\"Prices\",\n    show=True\n).add_to(m)\n\n# Layer Control (add/ Remove layers)\nfolium.LayerControl().add_to(m)\n\n#Display\nm\n```"]