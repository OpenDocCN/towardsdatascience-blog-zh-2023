- en: Building Interactive Network Graphs using pyvis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 pyvis 构建互动网络图
- en: 原文：[https://towardsdatascience.com/building-interactive-network-graphs-using-pyvis-5b8e6e25cf64](https://towardsdatascience.com/building-interactive-network-graphs-using-pyvis-5b8e6e25cf64)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/building-interactive-network-graphs-using-pyvis-5b8e6e25cf64](https://towardsdatascience.com/building-interactive-network-graphs-using-pyvis-5b8e6e25cf64)
- en: Learn how to make your network graphs come to life
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习如何让你的网络图栩栩如生
- en: '[](https://weimenglee.medium.com/?source=post_page-----5b8e6e25cf64--------------------------------)[![Wei-Meng
    Lee](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----5b8e6e25cf64--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5b8e6e25cf64--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5b8e6e25cf64--------------------------------)
    [Wei-Meng Lee](https://weimenglee.medium.com/?source=post_page-----5b8e6e25cf64--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://weimenglee.medium.com/?source=post_page-----5b8e6e25cf64--------------------------------)[![魏梦李](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----5b8e6e25cf64--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5b8e6e25cf64--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5b8e6e25cf64--------------------------------)
    [魏梦李](https://weimenglee.medium.com/?source=post_page-----5b8e6e25cf64--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5b8e6e25cf64--------------------------------)
    ·7 min read·Mar 6, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5b8e6e25cf64--------------------------------)
    ·阅读时间 7 分钟·2023年3月6日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/43f40d53b2431b9caed15c4d55a2ad24.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/43f40d53b2431b9caed15c4d55a2ad24.png)'
- en: Photo by [DeepMind](https://unsplash.com/@deepmind?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [DeepMind](https://unsplash.com/@deepmind?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: In my previous article on creating network graphs, I showed how you can build
    one using the NetworkX package. The key problem with NetworkX is that the graph
    generated is static. Once the graph is plotted, there is no way the user is able
    to interact with it (such as rearrange the nodes, etc). The network graph would
    be more intuitive (and fun!) if the user can interact with it. And so this is
    the main focus of this article.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我之前关于创建网络图的文章中，我展示了如何使用 NetworkX 包构建一个图。NetworkX 的主要问题是生成的图是静态的。一旦图被绘制出来，用户就无法与之互动（例如重新排列节点等）。如果用户可以与图进行互动，网络图会更直观（也更有趣！）。这也是本文的主要关注点。
- en: '[](/plotting-network-graphs-using-python-bc62f0d93b3f?source=post_page-----5b8e6e25cf64--------------------------------)
    [## Plotting Network Graphs using Python'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/plotting-network-graphs-using-python-bc62f0d93b3f?source=post_page-----5b8e6e25cf64--------------------------------)
    [## 使用 Python 绘制网络图'
- en: Learn how to use the NetworkX package to visualize complex networks
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学习如何使用 NetworkX 包可视化复杂网络
- en: towardsdatascience.com](/plotting-network-graphs-using-python-bc62f0d93b3f?source=post_page-----5b8e6e25cf64--------------------------------)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/plotting-network-graphs-using-python-bc62f0d93b3f?source=post_page-----5b8e6e25cf64--------------------------------)
- en: In this article, I will show you how you can create an interative network graph
    using the `pyvis` package.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将展示如何使用 `pyvis` 包创建一个互动网络图。
- en: The `pyvis` package is a wrapper for the popular **visJS** JavaScript library,
    and it allows you to easily generate visual network graphs in Python.
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`pyvis` 包是流行的 **visJS** JavaScript 库的一个封装，它使你可以轻松地在 Python 中生成可视化网络图。'
- en: Installing pyvis
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 pyvis
- en: 'To install the `pyvis` package, use the `pip` command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 `pyvis` 包，请使用 `pip` 命令：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating a network
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建网络
- en: 'First, create a new graph using the `Network` class in `pyvis`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用 `pyvis` 中的 `Network` 类创建一个新图：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To display the graph on Jupyter Notebook, set the `notebook` parameter to `True`.
    The above code snippet creates an *undirected* graph.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Jupyter Notebook 中显示图形，将 `notebook` 参数设置为 `True`。上述代码片段创建了一个*无向*图。
- en: Adding nodes
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加节点
- en: 'You can now add nodes to the graph:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以向图中添加节点了：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `add_node()` function adds a single node while the `add_nodes()` function
    adds multiple nodes to the graph. You can also set the optional `color` parameter
    for both functions to set the color of the node(s).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_node()` 函数添加一个节点，而 `add_nodes()` 函数则可以向图中添加多个节点。你还可以为这两个函数设置可选的 `color`
    参数，以设置节点的颜色。'
- en: 'To display the graph, call the `show()` function with a name for the output:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示图形，请调用`show()`函数并为输出指定名称：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The nodes should now be displayed:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 节点现在应该显示出来：
- en: '![](../Images/054504a7fea06b0bbeaace242c8724ec.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/054504a7fea06b0bbeaace242c8724ec.png)'
- en: All images by author
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所有图片由作者提供
- en: Adding Edges
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加边
- en: 'With the nodes added to the graph, you can now add the edges to connect the
    nodes:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在图中添加了节点后，现在可以添加边来连接这些节点：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `add_edge()` function adds a single edge connecting two nodes, while the
    `add_edges()` function takes in a list of tuples connecting the various nodes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_edge()`函数添加一个连接两个节点的边，而`add_edges()`函数接受一个包含多个节点的元组列表。'
- en: 'The graph should now display the edges connecting the various nodes. Try dragging
    each node and see how they are pulled back after you released it:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图现在应该显示连接各个节点的边。试着拖动每个节点，看看它们在释放后是如何被拉回的：
- en: All videos by author
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所有视频由作者提供
- en: Directed Graph
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有向图
- en: 'If you want a directed graph, you should set the `directed` parameter in the
    `Network` class:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要一个有向图，你应该在`Network`类中设置`directed`参数：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you modify the code earlier and rerun all the code snippets, you should
    now see a directed graph:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你修改了之前的代码并重新运行所有代码片段，你现在应该能看到一个有向图：
- en: '![](../Images/cf5d33bdd7b98f191c2c309688e95cb0.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cf5d33bdd7b98f191c2c309688e95cb0.png)'
- en: Modifying the physics of the graph
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改图的物理效果
- en: 'If you click and drag the nodes in the graph, you will noticed that the nodes
    will bounce around. When you release your mouse, the nodes will snap back into
    its original position. All these behaves very much like real balls (the nodes)
    bounded by springs (the edges). You can customize the physics behind the graph
    (how they snap back, the damping of the spring, etc) using the `repulsion()` function.
    The following statement shows the default values of all the parameters in the
    `repulsion()` function:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击并拖动图中的节点，你会注意到节点会四处弹跳。当你放开鼠标时，节点会弹回到原来的位置。所有这些行为非常像由弹簧（边）束缚的真实球体（节点）。你可以使用`repulsion()`函数自定义图形背后的物理效果（它们如何弹回、弹簧的阻尼等）。以下语句显示了`repulsion()`函数中所有参数的默认值：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here are the uses of the various parameters:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是各种参数的用途：
- en: '`node_distance` — This is the range of influence for the repulsion.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node_distance` — 这是排斥力的影响范围。'
- en: '`central_gravity` — The gravity attractor to pull the entire network to the
    center.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`central_gravity` — 使整个网络被吸引到中心的引力。'
- en: '`spring_length` — The rest length of the edges.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring_length` — 边的静态长度。'
- en: '`spring_strength` — The strenght of the edges springs.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring_strength` — 边的弹簧强度。'
- en: '`damping` — A value ranging from 0 to 1 of how much of the velocity from the
    previous physics simulation iteration carries over to the next iteration.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`damping` — 一个从0到1的值，表示前一次物理模拟迭代中的速度有多少会延续到下一次迭代。'
- en: 'Source: [https://pyvis.readthedocs.io/en/latest/documentation.html?highlight=repulsion#pyvis.network.Network.repulsion](https://pyvis.readthedocs.io/en/latest/documentation.html?highlight=repulsion#pyvis.network.Network.repulsion)'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '来源: [https://pyvis.readthedocs.io/en/latest/documentation.html?highlight=repulsion#pyvis.network.Network.repulsion](https://pyvis.readthedocs.io/en/latest/documentation.html?highlight=repulsion#pyvis.network.Network.repulsion)'
- en: 'The best way to understand the use of the various parameters is to try it out.
    The following example sets the `spring_length` and `damping` parameters:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 理解各种参数的最佳方法是尝试一下。以下示例设置了`spring_length`和`damping`参数：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here’s how the graph looks like:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是图的样子：
- en: '![](../Images/98ad5ba6dd1c474699c94c05a853f28a.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/98ad5ba6dd1c474699c94c05a853f28a.png)'
- en: 'The following video shows how the graph behaves when the nodes are dragged
    and released:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下视频展示了拖动和释放节点时图的行为：
- en: 'You can also show the UI for you to dynamically alter the physics of the graph
    by using the `show_buttons()` function:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`show_buttons()`函数显示UI以动态改变图的物理效果：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/97aa01db27dea1b0778b64a5093b3932.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/97aa01db27dea1b0778b64a5093b3932.png)'
- en: 'The `filter_` parameter takes one of the following options:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter_`参数可以选择以下选项之一：'
- en: '`show_buttons(filter_=[''nodes'', ''edges'', ''physics''])`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`show_buttons(filter_=[''nodes'', ''edges'', ''physics''])`'
- en: 'If you want to show all filters, set it to `True`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想显示所有过滤器，将其设置为`True`：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: I will leave it to you to try how the filters look like and how they work.Visualizing
    the Flights Delay Dataset
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我将留给你尝试这些过滤器的效果以及它们的工作方式。可视化航班延误数据集
- en: Now that you are familiar with the basics of using the `pyvis` package, we will
    use it to visualize the flights between the various airports in the **2015 Flights
    Delay** dataset.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经熟悉了使用`pyvis`包的基础知识，我们将使用它来可视化**2015年航班延误**数据集中的各种机场之间的航班。
- en: '**2015 Flights Delay Dataset** (*airports.csv*). *Source*: [https://www.kaggle.com/datasets/usdot/flight-delays](https://www.kaggle.com/datasets/usdot/flight-delays).
    *Licensing* — [CC0: Public Domain](https://creativecommons.org/publicdomain/zero/1.0/)'
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**2015年航班延误数据集** (*airports.csv*)。*来源*: [https://www.kaggle.com/datasets/usdot/flight-delays](https://www.kaggle.com/datasets/usdot/flight-delays)。*许可*
    — [CC0: 公共领域](https://creativecommons.org/publicdomain/zero/1.0/)'
- en: 'First, load the **flights.csv** file into a Pandas DataFrame. Because this
    CSV file is large, I will only load the three columns that I need to do my work:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将**flights.csv**文件加载到 Pandas DataFrame 中。由于这个 CSV 文件很大，我将只加载执行工作所需的三列：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once the dataframe is loaded, I will go ahead and count the numbers of flights
    from one airport to another:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据框加载完成，我将继续统计从一个机场到另一个机场的航班数量：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The resultant output is as shown:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 结果输出如图所示：
- en: '![](../Images/5dc31a4c158e8e1397830805dd6d20ef.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5dc31a4c158e8e1397830805dd6d20ef.png)'
- en: 'As there are more than 4500 combinations of flights, let’s only select the
    top 130 combinations:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于航班组合超过4500种，我们只选择前130种组合：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Notice that I am dividing the values in the **COUNT** column by 5000 because
    later on I will be using the values in the **COUNT** column as the linewidth of
    the edges linking two airports. And so the values need to be reduced to a smaller
    range. The top 130 combinations are now as shown:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我将**COUNT**列中的值除以5000，因为稍后我将使用**COUNT**列中的值作为连接两个机场的边的线宽。因此，值需要缩小到一个较小的范围。前130种组合现在如图所示：
- en: '![](../Images/21f3816a60e8338561c22dafb6af59c9.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/21f3816a60e8338561c22dafb6af59c9.png)'
- en: 'Next, I will sum up all the flights originating from each airport (remember
    the count has been normalized in the previous section):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我将汇总每个机场的起始航班（记住之前的计数已经标准化）：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The number of flights originating from each airport will be used as the size
    of the node:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 每个机场起始航班的数量将作为节点的大小：
- en: The larger the number of flights from an airport, the bigger the node.
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从一个机场起飞的航班越多，节点越大。
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Plotting the graph
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制图表
- en: 'You can now plot the graph:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以绘制图表：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The graph looks like the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图表如下所示：
- en: '![](../Images/f4be8cae91d8f5d04a89dffa1c8b7d9c.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f4be8cae91d8f5d04a89dffa1c8b7d9c.png)'
- en: 'Let’s zoom in a little:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微放大一下：
- en: '![](../Images/421fab7738489e738fd5cd003b5a260a.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/421fab7738489e738fd5cd003b5a260a.png)'
- en: 'You can see that **ATL** and **LAX** have the most originating flights (they
    are the two largest nodes). You can highlight these two nodes by changing their
    color to red. To do so, you can iterate through all the nodes using the `nodes`
    attribute and examining the value of the `value` key. If the value is more than
    20, set the node color to red using the `color` key:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到**ATL**和**LAX**的起始航班最多（它们是两个最大节点）。你可以通过将这两个节点的颜色更改为红色来突出显示它们。为此，你可以使用`nodes`属性遍历所有节点，并检查`value`键的值。如果值大于20，则使用`color`键将节点颜色设置为红色：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The **ATL** and **LAX** nodes are now in red:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**ATL**和**LAX**节点现在显示为红色：'
- en: '![](../Images/d4618d9fa7e20fe2e8d5d7aeea687c44.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d4618d9fa7e20fe2e8d5d7aeea687c44.png)'
- en: '**If you like reading my articles and that it helped your career/study, please
    consider signing up as a Medium member. It is $5 a month, and it gives you unlimited
    access to all the articles (including mine) on Medium. If you sign up using the
    following link, I will earn a small commission (at no additional cost to you).
    Your support means that I will be able to devote more time on writing articles
    like this.**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你喜欢阅读我的文章，并且它对你的职业/学习有所帮助，请考虑注册成为 Medium 会员。每月5美元，能够无限访问 Medium 上的所有文章（包括我的）。如果你使用以下链接注册，我将赚取一小部分佣金（对你没有额外费用）。你的支持意味着我可以投入更多时间撰写类似的文章。**'
- en: '[](https://weimenglee.medium.com/membership?source=post_page-----5b8e6e25cf64--------------------------------)
    [## Join Medium with my referral link — Wei-Meng Lee'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://weimenglee.medium.com/membership?source=post_page-----5b8e6e25cf64--------------------------------)
    [## 使用我的推荐链接加入 Medium — Wei-Meng Lee'
- en: Read every story from Wei-Meng Lee (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Wei-Meng Lee 的每个故事（以及 Medium 上其他成千上万的作者）。你的会员费直接支持…
- en: weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----5b8e6e25cf64--------------------------------)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----5b8e6e25cf64--------------------------------)'
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this article, you learned how to create interative network graph using the
    `pyvis` package. The most interesting aspects of the `pyvis` package is that it
    makes your network graph come to life. Interactive network graphs are ideal for
    social networks, corporate structures or other networks where you want to visualize
    the relationships between entities. Have fun with `pyvis` and let me know the
    type of data you use with it!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，你学习了如何使用`pyvis`包创建交互式网络图。`pyvis`包最有趣的地方在于它能够让你的网络图生动起来。交互式网络图非常适合用于社交网络、公司结构或其他你希望可视化实体之间关系的网络。享受使用`pyvis`的乐趣，并告诉我你使用它处理的数据类型！
