- en: 4 Essential Techniques You Must Learn as a Python Beginner
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作为 Python 初学者，你必须掌握的4个关键技巧
- en: 原文：[https://towardsdatascience.com/4-essential-techniques-you-must-learn-as-a-python-beginner-84a64ece3461](https://towardsdatascience.com/4-essential-techniques-you-must-learn-as-a-python-beginner-84a64ece3461)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/4-essential-techniques-you-must-learn-as-a-python-beginner-84a64ece3461](https://towardsdatascience.com/4-essential-techniques-you-must-learn-as-a-python-beginner-84a64ece3461)
- en: And how to use them so you can ace that next job interview with ease
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以及如何使用它们，以便你能轻松应对下一个面试
- en: '[](https://murtaza5152-ali.medium.com/?source=post_page-----84a64ece3461--------------------------------)[![Murtaza
    Ali](../Images/2aecff50999761022af29f9b30e2f925.png)](https://murtaza5152-ali.medium.com/?source=post_page-----84a64ece3461--------------------------------)[](https://towardsdatascience.com/?source=post_page-----84a64ece3461--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----84a64ece3461--------------------------------)
    [Murtaza Ali](https://murtaza5152-ali.medium.com/?source=post_page-----84a64ece3461--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://murtaza5152-ali.medium.com/?source=post_page-----84a64ece3461--------------------------------)[![Murtaza
    Ali](../Images/2aecff50999761022af29f9b30e2f925.png)](https://murtaza5152-ali.medium.com/?source=post_page-----84a64ece3461--------------------------------)[](https://towardsdatascience.com/?source=post_page-----84a64ece3461--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----84a64ece3461--------------------------------)
    [Murtaza Ali](https://murtaza5152-ali.medium.com/?source=post_page-----84a64ece3461--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----84a64ece3461--------------------------------)
    ·8 min read·Feb 9, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----84a64ece3461--------------------------------)
    ·阅读时间8分钟·2023年2月9日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/384232c5c565694cf27955acb6a266aa.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/384232c5c565694cf27955acb6a266aa.png)'
- en: Photo by [Carl Heyerdahl](https://unsplash.com/@carlheyerdahl?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Carl Heyerdahl](https://unsplash.com/@carlheyerdahl?utm_source=medium&utm_medium=referral)提供，来自[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)。
- en: The Lambda Function
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Lambda 函数
- en: Let’s say you are working with some data in a Jupyter notebook, just doing some
    quick exploration and analysis. You’re still in the early stages of data cleaning
    and processing, far from any production-ready models or visualizations or applications.
    But you do have a deadline to meet, so you’re exploring quickly and efficiently,
    making use of your stellar Python skills.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在 Jupyter notebook 中处理一些数据，只是进行一些快速探索和分析。你仍处于数据清理和处理的早期阶段，离任何生产就绪的模型、可视化或应用程序还有很远。但你有一个截止日期要赶，所以你快速高效地进行探索，充分发挥你出色的
    Python 技能。
- en: In the midst of your adventures, you come across a column in your data that
    requires transformation. You just need to square the numbers in the column. It’s
    nothing crazy, but it’s unfortunately also one of those weird necessities that
    is simple enough to be quick, but complex enough to not have its own built-in
    function.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在你冒险的过程中，你遇到了需要转换的数据列。你只需要对该列中的数字进行平方。这并不复杂，但不幸的是，它也是一种奇怪的需求，简单到可以快速完成，但复杂到没有内置函数。
- en: 'So, you decide to use [Pandas’s](https://pandas.pydata.org/docs/reference/api/pandas.Series.apply.html)
    `[apply](https://pandas.pydata.org/docs/reference/api/pandas.Series.apply.html)`
    [function to transform the data](https://pandas.pydata.org/docs/reference/api/pandas.Series.apply.html)
    column using your own, custom function [1]. To do this, you need to write a function
    that squares numbers, and you do so in the only way you know how:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你决定使用[Pandas’s](https://pandas.pydata.org/docs/reference/api/pandas.Series.apply.html)
    `[apply](https://pandas.pydata.org/docs/reference/api/pandas.Series.apply.html)`
    [函数来转换数据](https://pandas.pydata.org/docs/reference/api/pandas.Series.apply.html)
    列，使用你自己的自定义函数[1]。为此，你需要编写一个平方数字的函数，你以唯一的方式知道如何做到这一点：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This gets the job done, but it’s a little annoying and messy, especially for
    a Jupyter notebook. It doesn’t meld well with the one-line structure of most Pandas
    operations, and accordingly won’t look very nice when your colleagues review your
    notebook.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以完成任务，但有点烦人且杂乱，尤其是在 Jupyter notebook 中。它与大多数 Pandas 操作的单行结构不太匹配，因此在同事审阅你的
    notebook 时，可能看起来不是很好。
- en: 'But do not despair, my friend, for the lambda function is here to save you.
    **Lambda functions —** or, more generally, anonymous functions — provide an alternative
    way to define functions in Python. And the best part is, you can write them in
    a single line! This is most easily seen via example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但不要灰心，我的朋友，因为 lambda 函数来拯救你了。**Lambda 函数**——或更一般地说，匿名函数——提供了一种在 Python 中定义函数的替代方法。而最棒的是，你可以用一行代码来编写它们！这一点通过示例最为明显：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The above code is identical to our earlier definition of this function. Here
    are a few things you should know:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码与我们之前定义的这个函数是相同的。这里有几点你应该知道的：
- en: The `lambda` keyword is analogous to the `def` keyword, letting Python know
    we want to define a function.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lambda` 关键字类似于 `def` 关键字，让 Python 知道我们想要定义一个函数。'
- en: The parameters for lambda functions are to the left of the colon, and the return
    statement is to the right of the colon (and doesn’t actually use the `return`
    keyword).
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: lambda 函数的参数在冒号的左边，返回值在冒号的右边（实际上不使用 `return` 关键字）。
- en: We don’t have to give the function a name, but if we wish to do so, we can do
    it using variable assignment.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不需要给函数起名字，但如果我们愿意，可以通过变量赋值来做到这一点。
- en: That last point is key. Using lambda functions lets us define a function and
    call it or pass it in as an argument to another function without ever having to
    give it a name. Let’s illustrate this by returning to our previous example and
    making it concrete.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点是关键。使用 lambda 函数让我们可以定义一个函数，并调用它或将其作为参数传递给另一个函数，而无需给它一个名称。让我们通过回到之前的例子并使其具体化来说明这一点。
- en: 'Let’s imagine we have the DataFrame `my_df` below, containing three people’s
    salaries:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象一下，我们有如下的 DataFrame `my_df`，其中包含三个人的薪资：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this ridiculously idealistic world, employers have just announced that everyone’s
    salaries will be *squared*. We can update our DataFrame in a single line by using
    a lambda function:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个极度理想化的世界里，雇主刚刚宣布大家的薪水将被*平方*。我们可以通过使用 lambda 函数在一行中更新我们的 DataFrame：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: And voila — endless riches! Perhaps a bit dramatic, but hopefully you will now
    remember what lambda functions are and how to use them. If you would like a more
    detailed discussion on their nuances and subtleties, I recommend checking out
    my [two-part article series that discusses lambda functions in great detail](/whats-in-a-lambda-c8cdc67ff107).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 于是，财富无尽！也许有点戏剧化，但希望你现在能记住什么是 lambda 函数以及如何使用它们。如果你想更详细地讨论它们的细微差别，我建议查看我[详细讨论
    lambda 函数的两部分文章系列](/whats-in-a-lambda-c8cdc67ff107)。
- en: In this article, it’s time to move to the next topic.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们要进入下一个话题。
- en: The List Comprehension
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表推导式
- en: 'If you’re in the early stages of learning Python, it’s unlikely you’ve heard
    of the list comprehension, but I dare say you’ve probably heard of the for loop.
    You know, that thing that lets you loop over sequences and do with them as you
    please:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在学习 Python 的早期阶段，可能还没听说过列表推导式，但我敢说你可能听说过 for 循环。你知道的，那种让你遍历序列并按自己的意愿操作的东西：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the above example, we take a list of numbers and keep just the even ones.
    The code is simple enough — but because this is Python, and we love simplicity
    — we can make it even more elegant.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们取了一组数字，只保留了偶数。代码足够简单——但因为这是 Python，我们喜欢简单——我们可以让它变得更加优雅。
- en: 'How? Enter the list comprehension. A **list comprehension** is a piece of Python
    syntax that effectively lets you run a for loop in a single line and put all the
    resulting elements into a newly constructed list. It’s a bit confusing in abstract
    terms, but becomes easier to see with an example. Here’s how you would accomplish
    the same thing as above using a list comprehension:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如何做？进入列表推导式。**列表推导式**是一种 Python 语法，它有效地让你在一行中运行一个 for 循环，并将所有生成的元素放入一个新构建的列表中。这在抽象的术语中有点混乱，但通过示例会更容易理解。以下是使用列表推导式实现与上面相同的效果的方法：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code basically just puts a for loop into one line. You still have the `for`
    keyword telling Python to loop through the original list, and the `item` at the
    beginning just tells Python what we want to include in the final list. In this
    case, we just want to include the original item, but *only if* it passes the evenness
    filter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码基本上只是将一个 for 循环压缩到了一行。你仍然有 `for` 关键字告诉 Python 遍历原始列表，开头的 `item` 只是告诉 Python
    我们想要包含在最终列表中的内容。在这种情况下，我们只想包含原始项，但*只有在*它通过偶数筛选器时。
- en: 'What’s more, you can also apply an additional transformation after filtering.
    The code below will also square the result before putting it into our final list:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，你还可以在过滤后应用额外的转换。下面的代码还会在将结果放入最终列表之前对其进行平方操作：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can see how list comprehensions can come in handy. If you do choose to
    use them, here are a few important points to keep in mind:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到列表推导式如何派上用场。如果你选择使用它们，这里有一些重要的点需要记住：
- en: The filter will always be applied before the mapping transformation. In the
    above code, the filter checks for even numbers, and the mapping transformation
    squares the original items.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤器总是会在映射转换之前应用。在上面的代码中，过滤器检查偶数，而映射转换会对原始项进行平方操作。
- en: Like any for loop, a list comprehension can be used to iterate over any iterable
    sequence, not just lists. Why is it called a list comprehension then? Because
    it always *produces* a list as its end result.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像任何for循环一样，列表推导式可以用于迭代任何可迭代序列，而不仅仅是列表。那它为什么叫做列表推导式呢？因为它总是*生成*一个列表作为最终结果。
- en: Finally, remember that while list comprehensions can generally be used to make
    your code more concise, they aren’t always necessary. A good rule of thumb is
    to only use them if they actually make your code more readable. Remember that
    readability isn’t necessarily a function of length — it’s possible for code that
    is simple to understand in a traditional for loop to become messy and confusing
    in a list comprehension.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，请记住，虽然列表推导式通常可以使你的代码更简洁，但并不是总是必要的。一个好的经验法则是，只有在它们确实使你的代码更具可读性时才使用它们。记住，可读性不一定是长度的函数——在传统的for循环中容易理解的代码在列表推导式中可能会变得杂乱和混乱。
- en: '[For more on list comprehensions, you can check out my two-part series on them
    as well.](/whats-in-a-list-comprehension-c5d36b62f5)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[要了解更多关于列表推导式的信息，你可以查看我关于它们的两部分系列文章。](/whats-in-a-list-comprehension-c5d36b62f5)'
- en: Continuing and breaking
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 继续和中断
- en: Two useful but occasionally overlooked features of the Python programming language
    (and other programming languages, as it happens) are the `continue` and `break`
    keywords.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Python编程语言（以及其他编程语言）中有两个有用但偶尔被忽视的特性就是`continue`和`break`关键字。
- en: Let’s start be defining what each of these do — then we’ll look at a couple
    concrete examples and talk about why you might want to use them.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先定义每个关键字的作用，然后看几个具体的例子，并讨论你可能想使用它们的原因。
- en: Continuing and breaking are both operations that can be performed from inside
    of a loop. They are similar in flavor, but fundamentally different in their effects.
    **Continue** can be used to immediately stop the *current* run of a loop and skip
    to the *next* run, whereas **break** is used to *leave the loop completely*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`continue`和`break`都是可以在循环内部执行的操作。它们的效果类似，但本质上不同。**Continue** 可以立即停止*当前*的循环运行并跳到*下一*次运行，而**break**
    用于*完全退出循环*。'
- en: As with most programming-related concepts, this is best seen with an example.
    Study the code snippet below carefully.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 和大多数编程相关概念一样，这个概念最好通过例子来理解。仔细研究下面的代码片段。
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Do you see the difference? When we use `continue`, we simply skip over the `5`
    because Python immediately moves to the next iteration of the loop and thus never
    sees the `print` statement for `5`. Alternatively, when we use `break`, Python
    exits the loop completely, so nothing is printed out at all after we hit `4`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你看出区别了吗？当我们使用`continue`时，我们只是跳过了`5`，因为Python立即进入循环的下一次迭代，因此永远不会看到`5`的`print`语句。而当我们使用`break`时，Python完全退出循环，所以在我们遇到`4`之后不会再打印任何东西。
- en: Also, it’s worth noting that while we used a for loop in the example above,
    both `continue` and `break` work just as well with while loops.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，值得注意的是，虽然我们在上面的例子中使用了for循环，但`continue`和`break`在while循环中同样有效。
- en: 'Here are a couple situations where you might need to use these charming little
    keywords:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是几个你可能需要使用这些迷人小关键字的情况：
- en: If you need to loop indefinitely until some condition is reached, it’s common
    practice to use `break` in combination with `while True:`. Normally, `while True:`
    would result in an infinite loop, but pairing it with `break` allows you to get
    around that.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你需要无限循环直到满足某些条件，通常做法是将`break`与`while True:`结合使用。通常，`while True:`会导致无限循环，但将其与`break`配合使用可以绕过这一点。
- en: Say you’re looping through a set of data that’s coming to you in real time (a
    **stream** of sorts, if you want to get technical). If you want to ignore some
    of the data for whatever reason but keep looping over the rest, then `continue`
    will be a very helpful keyword indeed.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设你正在循环处理实时传输的数据（如果要技术一点，可以称之为**流**）。如果你想忽略一些数据但继续循环处理其余的数据，那么`continue`将是一个非常有用的关键字。
- en: Now then, let’s `continue`, shall we?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们`继续`吧。
- en: Getting User Input
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取用户输入
- en: One could argue that this is not an essential technique in Python, but in programming
    in general. But since Python is a subset of programming in general, and it’s the
    subset I assume you’re learning on account of having made it this far into my
    article, I think this topic is fair game.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有人可能会争辩说这不是 Python 中的一个必备技术，但在编程中确实是。但由于 Python 是编程的一部分，而它也是我假设你学习的语言，因为你已经读到了我的文章的这一部分，我认为这个话题是合理的。
- en: 'In case you’re unfamiliar with this in general, gathering **user input** is
    just a fancy programming term for letting whoever is using your program or application
    interact with it by (usually) typing in their own characters. In Python, this
    feature is accessed through the `input` function. You can try it out yourself
    in a live interpreter sessions:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这一点不熟悉，收集**用户输入**只是一个花哨的编程术语，用于让使用你的程序或应用程序的人通过（通常是）输入他们自己的字符来与之互动。在 Python
    中，这一功能通过`input`函数访问。你可以在实时解释器会话中尝试一下：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There are three things happening here:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了三件事：
- en: First, I simply called the `input` function
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我只是调用了`input`函数
- en: This led to the cursor moving to the next line. At this point, I was able to
    type in `Hi I am a person`. We know that Python was expecting user input on this
    line because it didn’t error despite this not being valid Python code. We can
    also see that the interpreter prompt ( `>>>` ) is not present on this line.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这导致光标移动到下一行。此时，我能够输入`Hi I am a person`。我们知道 Python 期待在这一行有用户输入，因为即使这不是有效的 Python
    代码，也没有出错。我们还可以看到解释器提示符（`>>>`）在这一行没有出现。
- en: The last line simply prints the whatever the user input was back to the terminal.
    Generally, this won’t happen, as you’ll probably want to save your user input
    into a variable so you can use it later.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一行只是将用户输入的内容打印回终端。通常，这不会发生，因为你可能会希望将用户输入保存到一个变量中，以便以后使用。
- en: I know the above example is a bit vague, so here’s an example of how you might
    write some code in an actual program that makes use of this feature. We can usually
    pass a string into the `input` function as well, which will be used to prompt
    the user to type something in.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道上面的例子有点模糊，所以这里有一个实际程序中如何使用这个功能的代码示例。我们通常也可以将字符串传递给`input`函数，这将用于提示用户输入一些内容。
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And there you have it! Now you know how to interact directly with whoever uses
    your incredible programs. There’s just one more thing I should mention: *Everything*
    read in via user input is read in as a string. As a result, remember to convert
    numbers explicitly using `int` or `float`, lest you end up with some very annoying
    bugs!'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在你知道如何直接与使用你精彩程序的人进行互动了。还有一件事我应该提到：*所有*通过用户输入读取的内容都被视为字符串。因此，请记得显式地使用`int`或`float`转换数字，以免遇到一些非常恼人的错误！
- en: Final Thoughts and Recap
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后的想法和总结
- en: 'Here’s your Python beginner cheat sheet ([Part 2](https://medium.com/towards-data-science/4-common-python-mistakes-you-should-avoid-as-a-beginner-bd28feb6162b)):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你的 Python 初学者备忘单（[第二部分](https://medium.com/towards-data-science/4-common-python-mistakes-you-should-avoid-as-a-beginner-bd28feb6162b)）：
- en: Write better Pandas code (or code in general, but especially Pandas code) by
    making use of one-line **lambda functions**.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用一行的**lambda 函数**来编写更好的 Pandas 代码（或者说代码的一般，但尤其是 Pandas 代码）。
- en: Get to know the for loop’s cousin, the **list comprehension**. It’s a useful,
    oft-overlooked feature that can optimize your code quality.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 认识一下 for 循环的“表亲”——**列表推导式**。这是一个有用的、常被忽视的特性，可以优化你的代码质量。
- en: Maximize your loop usage with the help of `**break**` and `**continue**`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 利用`**break**`和`**continue**`最大化你的循环使用。
- en: A plethora of programs will require you to use **user input**, so it’s in your
    best interest to get comfortable with it.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 大量程序将要求你使用**用户输入**，所以你最好对它感到熟悉。
- en: Python is a language rich and full with features and treasures all collectively
    aimed at making *you* a better programmer.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种丰富且充满特性的语言，所有这些特性和宝藏共同旨在使*你*成为更好的程序员。
- en: So learn it, and learn it well.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所以学好它，掌握它。
- en: '**Want to excel at Python?** [**Get exclusive, free access to my simple and
    easy-to-read guides here**](https://witty-speaker-6901.ck.page/0977670a91)**.
    Want to read unlimited stories on Medium? Sign up with my referral link below!**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**想在 Python 中出类拔萃？** [**在这里获取我简单易读的指南的独家免费访问权限**](https://witty-speaker-6901.ck.page/0977670a91)**。想在
    Medium 上阅读无限制的故事？使用下面我的推荐链接注册吧！**'
- en: '[](https://murtaza5152-ali.medium.com/?source=post_page-----84a64ece3461--------------------------------)
    [## Murtaza Ali - Medium'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://murtaza5152-ali.medium.com/?source=post_page-----84a64ece3461--------------------------------)
    [## Murtaza Ali - Medium'
- en: Read writing from Murtaza Ali on Medium. PhD student at the University of Washington.
    Interested in human-computer…
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读来自 Murtaza Ali 在 Medium 上的文章。他是华盛顿大学的博士生，关注人机交互…
- en: murtaza5152-ali.medium.com](https://murtaza5152-ali.medium.com/?source=post_page-----84a64ece3461--------------------------------)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[murtaza5152-ali.medium.com](https://murtaza5152-ali.medium.com/?source=post_page-----84a64ece3461--------------------------------)'
- en: References
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[1] [https://pandas.pydata.org/docs/reference/api/pandas.Series.apply.html](https://pandas.pydata.org/docs/reference/api/pandas.Series.apply.html)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] [https://pandas.pydata.org/docs/reference/api/pandas.Series.apply.html](https://pandas.pydata.org/docs/reference/api/pandas.Series.apply.html)'
