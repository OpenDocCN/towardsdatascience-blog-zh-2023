["```py\nfrom datetime import datetime\n\nfrom airflow import DAG\nfrom airflow.operators.python import PythonOperator\n\nwith DAG(\n    dag_id='test_dag',\n    start_date=datetime(2021, 1, 1),\n    catchup=False,\n    tags=['example'],\n) as dag:\n\n  first_task = PythonOperator(task_id='task_a', python_callable=lambda: print('Hi from task_a'))\n  second_task = PythonOperator(task_id='task_b', python_callable=lambda: print('Hi form task_b'))\n  third_task = PythonOperator(task_id='task_c', python_callable=lambda: print('Hi form task_c'))\n\n  first_task >> second_task >> third_task\n```", "```py\nfrom datetime import datetime\n\nfrom airflow import DAG\nfrom airflow.exceptions import AirflowSkipException\nfrom airflow.operators.python import PythonOperator\n\ndef my_func(**context):\n    # If the DagRun start date is not a Monday, then skip this task\n    dag_run_start_date = context['dag_run'].start_date\n    if dag_run_start_date.weekday() != 0:\n        raise AirflowSkipException\n\n    # Anything beyond this line will be executed only if the\n    # task is not skipped, based on the condition specified above\n    print('Hi from task_b')\n\nwith DAG(\n    dag_id='test_dag',\n    start_date=datetime(2021, 1, 1),\n    catchup=False,\n    tags=['example'],\n) as dag:\n    first_task = PythonOperator(task_id='task_a', python_callable=lambda: print('Hi from task_a'))\n    second_task = PythonOperator(task_id='task_b', python_callable=my_func)\n    third_task = PythonOperator(\n        task_id='task_c',\n        python_callable=lambda: print('Hi form task_c'),\n        trigger_rule='none_failed'\n    )\n\n    first_task >> second_task >> third_task\n```", "```py\nfrom datetime import datetime\n\nfrom airflow import DAG\nfrom airflow.operators.python import PythonOperator\nfrom airflow.operators.trigger_dagrun import TriggerDagRunOperator\n\nwith DAG(\n  dag_id='test_dag',\n  start_date=datetime(2021, 1, 1),\n  catchup=False,\n  tags=['example'],\n) as dag:\n  first_task = PythonOperator(\n      task_id='task_a', \n      python_callable=lambda: print('Hi from task_a'),\n    )\n    trigger_task = TriggerDagRunOperator(\n      task_id='trigger_other_dag', \n      trigger_dag_id='example_branch_operator',\n    )\n    last_task = PythonOperator(\n        task_id='task_c',\n        python_callable=lambda: print('Hi from task_c'),\n        trigger_rule='none_failed',\n    )\n\n  first_task >> second_task >> third_task\n```", "```py\ndef choose_branch(**context):\n    dag_run_start_date = context['dag_run'].start_date\n    if dag_run_start_date.weekday() != 0:  # check if Monday\n        return 'task_a'\n    return 'trigger_other_dag'\n```", "```py\nfrom datetime import datetime\n\nfrom airflow import DAG\nfrom airflow.operators.dummy import DummyOperator\nfrom airflow.operators.python import BranchPythonOperator, PythonOperator\nfrom airflow.operators.trigger_dagrun import TriggerDagRunOperator\n\nwith DAG(\n  dag_id='test_dag',\n  start_date=datetime(2021, 1, 1),\n  catchup=False,\n  tags=['example'],\n) as dag:\n  branch_task = BranchPythonOperator(\n    task_id='branching', \n    python_callable=choose_branch,\n  )\n\n  first_task = PythonOperator(\n    task_id='task_a', \n    python_callable=lambda: print('Hi from task_a'),\n  )\n  trigger_task = TriggerDagRunOperator(\n    task_id='trigger_other_dag', \n    trigger_dag_id='example_branch_operator',\n  )\n  last_task = PythonOperator(\n      task_id='task_c',\n      python_callable=lambda: print('Hi from task_c'),\n      trigger_rule='none_failed',\n  )\n  dummy_task = DummyOperator(task_id='skip', )\n\n  first_task >>branch_task >> [trigger_task, dummy_task] >> last_task\n```", "```py\nfrom datetime import datetime\n\nfrom airflow import DAG\nfrom airflow.operators.python import PythonOperator, ShortCircuitOperator\nfrom airflow.operators.trigger_dagrun import TriggerDagRunOperator\n\ndef is_monday(**context):\n  return context['dag_run'].start_date.weekday() == 0\n\nwith DAG(\n  dag_id='test_dag',\n  start_date=datetime(2021, 1, 1),\n  catchup=False,\n  tags=['example'],\n) as dag:\n  is_monday_task = ShortCircuitOperator(\n    task_id='is_not_monday',\n    python_callable=is_monday,\n    ignore_downstream_trigger_rules=False,\n  )\n\n  first_task = PythonOperator(\n    task_id='task_a',\n    python_callable=lambda: print('Hi from task_a'),\n  )\n\n  trigger_task = TriggerDagRunOperator(\n    task_id='trigger_other_dag',\n    trigger_dag_id='example_branch_operator',\n  )\n\n  last_task = PythonOperator(\n    task_id='task_c',\n    python_callable=lambda: print('Hi from task_c'),\n    trigger_rule='none_failed',\n  )\n\n  first_task >> is_monday_task >> trigger_task >> last_task\n```", "```py\nfrom airflow.utils.decorators import apply_defaults\nfrom airflow.exceptions import AirflowSkipException\nfrom airflow.operators.trigger_dagrun import TriggerDagRunOperator\n\nfrom typing import Any, Dict, Callable, TypeVar\n\nContext = TypeVar('Context', bound=Dict[Any, Any])\n\nclass ConditionalTriggerDagRunOperator(TriggerDagRunOperator):\n    \"\"\"\n    This is a custom operator that will execute TriggerDagRunOperator only if\n    `conditional_checker_callable` callable result  evaluates to `True`. Otherwise, the task will\n    be skipped by raising a `AirflowSkipException`\n    \"\"\"\n\n    @apply_defaults\n    def __init__(\n        self,\n        conditional_checker_callable: Callable[[Context], bool],\n        **kwargs: Any,\n    ) -> None:\n        super().__init__(**kwargs)\n        self.conditional_checker_callable = conditional_checker_callable\n\n    def execute(self, context: Context) -> None:\n        if not self.conditional_checker_callable(context):\n            raise AirflowSkipException\n\n        super().execute(context)\n```", "```py\nfrom datetime import datetime\n\nfrom airflow import DAG\nfrom airflow.exceptions import AirflowSkipException\nfrom airflow.operators.python import PythonOperator\nfrom airflow.operators.trigger_dagrun import TriggerDagRunOperator\n\nfrom typing import Any, Dict, Callable, TypeVar\n\nContext = TypeVar('Context', bound=Dict[Any, Any])\n\nclass ConditionalTriggerDagRunOperator(TriggerDagRunOperator):\n    \"\"\"\n    This is a custom operator that will execute TriggerDagRunOperator only if\n    `conditional_checker_callable` callable result  evaluates to `True`. Otherwise, the task will\n    be skipped by raising a `AirflowSkipException`\n    \"\"\"\n\n    def __init__(\n        self,\n        conditional_checker_callable: Callable[[Context], bool],\n        **kwargs: Any,\n    ) -> None:\n        super().__init__(**kwargs)\n        self.conditional_checker_callable = conditional_checker_callable\n\n    def execute(self, context: Context) -> None:\n        if not self.conditional_checker_callable(context):\n            raise AirflowSkipException\n\n        super().execute(context)\n\ndef is_monday(**context):\n    return context['dag_run'].start_date.weekday() == 0\n\nwith DAG(\n    dag_id='test_dag',\n    start_date=datetime(2021, 1, 1),\n    catchup=False,\n    tags=['example'],\n) as dag:\n    first_task = PythonOperator(\n        task_id='task_a',\n        python_callable=lambda: print('Hi from task_a'),\n    )\n\n    trigger_task = ConditionalTriggerDagRunOperator(\n        task_id='trigger_other_dag',\n        conditional_checker_callable=is_monday,\n        trigger_dag_id='example_branch_operator',\n    )\n\n    last_task = PythonOperator(\n        task_id='task_c',\n        python_callable=lambda: print('Hi from task_c'),\n        trigger_rule='none_failed',\n    )\n\n    first_task >> trigger_task >> last_task\n```"]