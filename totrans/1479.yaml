- en: Processing Data At Scale With MapReduce
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://towardsdatascience.com/mapreduce-f0d8776d0fcf](https://towardsdatascience.com/mapreduce-f0d8776d0fcf)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A deep dive into MapReduce and parallelization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://gmyrianthous.medium.com/?source=post_page-----f0d8776d0fcf--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----f0d8776d0fcf--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f0d8776d0fcf--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f0d8776d0fcf--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----f0d8776d0fcf--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Â·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f0d8776d0fcf--------------------------------)
    Â·4 min readÂ·Jul 19, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/485ac39f931bd934b5c4a820f518771a.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Luca Nicoletti](https://unsplash.com/@luca_nicoletti?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/fkA-hGDs-Y8?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: In the current market landscape, organizations must engage in data-driven decision-making
    to maintain competitiveness and foster innovation. As a result, an immense amount
    of data is collected on a daily basis.
  prefs: []
  type: TYPE_NORMAL
- en: Although the challenge of data persistence has largely been resolved, thanks
    to the widespread availability and affordability of cloud storage, modern organizations
    continue to grapple with the efficient and effective processing of massive amounts
    of data.
  prefs: []
  type: TYPE_NORMAL
- en: Over the past few decades, numerous programming models have emerged to address
    the challenge of processing big data at scale. Undoubtedly, MapReduce stands out
    as one of the most popular and effective approaches.
  prefs: []
  type: TYPE_NORMAL
- en: What is MapReduce
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MapReduce is a distributed programming framework originally developed at Google
    by [Jeffrey Dean and Sanjay Ghemawat, back in 2004](https://research.google/pubs/pub62/)
    and was inspired by fundamental concepts of functional programming. Their proposal
    invloved a parallel data processing model consisting of two steps; *map* and *reduce*.
  prefs: []
  type: TYPE_NORMAL
- en: In simple terms, *map* step invovles the division of the original data into
    small chunks such that transformation logic can be applied to individual data
    blocks. Data processing can therefore be applied in parallel across the created
    chunks and finally, the *reduce* step will then aggregate/consolidate the processed
    blocks and return the end result back to the caller.
  prefs: []
  type: TYPE_NORMAL
- en: How does MapReduce algorithm work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even though MapReduce algorithm has been widely known as a two-step process,
    it actually invovles three distinct stages.
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. Map:** In this very first step, the data is split into smaller chunks
    and distributed across multiple nodes that are usually part of a cluster of processing
    units. Each chunk created is then assigned to a *mapper.* The input to the mapper
    is a set of `<key, value>` pair. Once the processing is executed on the data (which
    is once again in the form of `<key, value>`) the mapper will then write the resulting
    output to a temporary storage.'
  prefs: []
  type: TYPE_NORMAL
- en: As an example, letâ€™s consider the following example where the input text is
    first split across three mappers and the input is provided in the form of key-value
    pairs.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6751c679a3ac5e5d9ed7f88fa047acd0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Mapping step of MapReduce algorithm â€” Source: Author'
  prefs: []
  type: TYPE_NORMAL
- en: '**2\. Shuffling:** Now in this step, the algorithm will shuffle the data such
    that reocrds with the same key are allocated to the same worker node. This is
    usually the most expensive operation that is performed throughout the lifecycle
    of a MapReduce process.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f210f55e219ce84830516a60db5e0940.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Shuffling step in MapReduce â€” Source: Author'
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. Reduce:** In this final step, each reducer will accept as an input the
    output of the corresponding mapper, which is in the form of a `<key, value>` pair.
    All mapper outputs with the same key will be assigned to the same reducer, which
    in turn will aggregate the values and return the consolidated result in as a `<key,
    value>` pair.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2dc8e8b0fdd2194182f04ba6fe65f17f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Reduce step in MapReduce â€” Source: Author'
  prefs: []
  type: TYPE_NORMAL
- en: MapReduce and Hadoop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'MapReduce is part of the Apache Hadoop framework that is used to access data
    stored in Hadoop Distributed File System (HDFS). Hadoop consists of four basic
    modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Hadoop Distributed File System (HDFS)*: This ia a distributed file system
    that can store large datasets in a fault-tolerant fashion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Yet Another Resource Negotiation (YARN)*: This is the node manager that monitors
    cluster and resources. It also acts as the scheduler of jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*MapReduce*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hadoop Common*: This is a module that provides commonly used Java libraries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Previously, we mentioned how mappers and reducers run on individual nodes within
    a cluster of computers. In fact, these worker nodes are part of the Hadoop framework
    that decides the amount of mappers required to be used in each case, depending
    on the volume of the input size.
  prefs: []
  type: TYPE_NORMAL
- en: Be design, Hadoop offers fault-tolerance. In the event of a node failure, Hadoop
    will rerun the task on another mapper node and generate the output required.
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MapReduce has been a groundbreaking concept in distributed computing, empowering
    numerous organizations to process vast volumes of data and extract valuable insights.
  prefs: []
  type: TYPE_NORMAL
- en: Familiarizing oneself with this concept is crucial, particularly when utilizing
    technologies like Spark that leverage the MapReduce framework.
  prefs: []
  type: TYPE_NORMAL
- en: ðŸ‘‰ [**Become a member**](https://gmyrianthous.medium.com/membership) **and read
    every story on Medium. Your membership fee directly supports me and other writers
    you read. Youâ€™ll also get full access to every story on Medium.**
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://gmyrianthous.medium.com/membership?source=post_page-----f0d8776d0fcf--------------------------------)
    [## Join Medium with my referral link â€” Giorgos Myrianthous'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every storyâ€¦
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: gmyrianthous.medium.com](https://gmyrianthous.medium.com/membership?source=post_page-----f0d8776d0fcf--------------------------------)
  prefs: []
  type: TYPE_NORMAL
