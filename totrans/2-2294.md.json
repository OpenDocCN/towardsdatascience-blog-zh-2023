["```py\n# Imports\nfrom osgeo import gdal\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport glob\n```", "```py\n#Load paths\npaths = glob.glob(\"../data/SWED/test/images/*\")\n```", "```py\n#Load first image\nimg = gdal.Open(paths[0]).ReadAsArray()\nimg.shape #(12,256,256)\n```", "```py\n#Get RGB image\nrgb = img[[3,2,1]].transpose(1,2,0)\n```", "```py\n# Pixel range \nprint(rgb.min(),rgb.max()) #150 8,600\n```", "```py\n#Scale image\nrgb = np.clip(rgb/10000,0,1)\n```", "```py\n#Display RGB image\nplt.imshow(rgb)\n```", "```py\n#Display histograms of pixel intesity for each band\nfig, axs = plt.subplots(1,3,figsize=(18,5))\nfig.patch.set_facecolor('xkcd:white')\n\nlabels = ['Red','Green','Blue']\nfor i,ax in enumerate(axs):\n    ax.hist(rgb[:,:,i].flatten(),bins=100)\n    ax.set_title(labels[i],size=20,fontweight=\"bold\")\n    ax.set_xlabel(\"Pixel Value\",size=15)\n    ax.set_ylabel(\"Frequency\",size =15) \n```", "```py\n# Clip RGB image to 0.3\nrgb = np.clip(rgb,0,0.3)/0.3\n\nplt.imshow(rgb)\n```", "```py\ndef visualise_rgb(img,clip=[0.3,0.3,0.3],display=True):\n        \"\"\"Visulaise RGB image with given clip values and return image\"\"\"\n\n        # Scale image\n        img = np.clip(img/10000,0,1)\n\n        # Get RGB channels\n        rgb = img[[3,2,1]]\n\n        #clip rgb values\n        rgb[0] = np.clip(rgb[0],0,clip[0])/clip[0]\n        rgb[1] = np.clip(rgb[1],0,clip[1])/clip[1]\n        rgb[2] = np.clip(rgb[2],0,clip[2])/clip[2]\n\n        rgb = rgb.transpose(1,2,0)\n\n        if display:\n\n                #Display histograms of pixel intesity with given clip values\n                fig, axs = plt.subplots(1,4,figsize=(22,5))\n                fig.patch.set_facecolor('xkcd:white')\n\n                labels = ['Red','Green','Blue']\n                for i,ax in enumerate(axs[0:3]):\n                        ax.hist(img[3-i].flatten(),bins=100)\n                        ax.set_title(labels[i],size=20,fontweight=\"bold\")\n                        ax.axvline(clip[i],color=\"red\",linestyle=\"--\")\n                        ax.set_yticks([])\n\n                #Display RGB image\n                axs[3].imshow(rgb)\n                axs[3].set_title(\"RGB\",size=20,fontweight=\"bold\")\n                axs[3].set_xticks([])\n                axs[3].set_yticks([])\n\n        return rgb\n```", "```py\nimg = gdal.Open(paths[0]).ReadAsArray()\nrgb = visualise_rgb(img,[0.3,0.3,0.3])\n```", "```py\nrgb_1 = visualise_rgb(img,[0.15,0.15,0.15],display=False)\nrgb_2 = visualise_rgb(img,[0.3,0.3,0.3],display=False)\nrgb_3 = visualise_rgb(img,[0.45,0.45,0.45],display=False)\n```", "```py\nrgb_1 = visualise_rgb(img,[0.2,0.3,0.3],display=False)\nrgb_2 = visualise_rgb(img,[0.3,0.3,0.2],display=False)\nrgb_3 = visualise_rgb(img,[0.3,0.2,0.3],display=False)\n```"]