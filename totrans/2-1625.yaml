- en: Pandas & Python Tricks for Data Science & Data Analysis — Part 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/pandas-python-tricks-for-data-science-data-analysis-part-2-dc36460de90d](https://towardsdatascience.com/pandas-python-tricks-for-data-science-data-analysis-part-2-dc36460de90d)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is the second part of my Pandas & Python Tricks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://zoumanakeita.medium.com/?source=post_page-----dc36460de90d--------------------------------)[![Zoumana
    Keita](../Images/34a15c1d03687816dbdbc065f5719f80.png)](https://zoumanakeita.medium.com/?source=post_page-----dc36460de90d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dc36460de90d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dc36460de90d--------------------------------)
    [Zoumana Keita](https://zoumanakeita.medium.com/?source=post_page-----dc36460de90d--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dc36460de90d--------------------------------)
    ·5 min read·Jan 17, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/11eeeaf9d71dbc5826179cfa3cd1c5e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Andrew Neel](https://unsplash.com/@andrewtneel) on [Unsplash](https://unsplash.com/photos/cckf4TsHAuw)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A couple of days ago, I shared [some Python and Pandas tricks](https://medium.com/towards-data-science/pandas-and-python-tips-and-tricks-for-data-science-and-data-analysis-1b1e05b7d93a)
    to help Data Analysts and Data Scientists quickly learn new valuable concepts
    that they might not be aware of. This is also part of the collection of tricks
    I share daily on [LinkedIn](https://www.linkedin.com/in/zoumana-keita/).
  prefs: []
  type: TYPE_NORMAL
- en: A video series of these tips are available on my YouTube channel below.
  prefs: []
  type: TYPE_NORMAL
- en: 3 tricks from my series
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: remove duplicates from a list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When trying to remove duplicates from a list, you might attempt to use the 𝗳𝗼𝗿
    loop approach.
  prefs: []
  type: TYPE_NORMAL
- en: This works but is inefficient ❌ when dealing with very large data.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, use 𝘀𝗲𝘁() ✅ which natively does not accept duplicates.
  prefs: []
  type: TYPE_NORMAL
- en: Below is an illustration 💡
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7a25a88658e8953ba771ad1e6cdf055c.png)'
  prefs: []
  type: TYPE_IMG
- en: Remove duplicates (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Orders in the original list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using 𝘀𝗲𝘁() to remove duplicates from lists is a great approach.
  prefs: []
  type: TYPE_NORMAL
- en: 🚨 But be careful with using it as it will NOT ❌ preserve the original order.
    Only use it when you don’t care about the order of the elements in your list.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, use 𝗱𝗶𝗰𝘁.𝗳𝗿𝗼𝗺𝗸𝗲𝘆𝘀() ✅ to preserve the original order.
  prefs: []
  type: TYPE_NORMAL
- en: Below is an illustration 💡
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ab0d765c3db368512e0d1132c6cb8749.png)'
  prefs: []
  type: TYPE_IMG
- en: Original order kept by dict.fromkeys (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Check if an element exists in a list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[#Python](https://www.linkedin.com/feed/hashtag/?keywords=python&highlightedUpdateUrns=urn%3Ali%3Aactivity%3A7011293609643716608)
    Tricks ✨🐍✨'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to 𝗰𝗵𝗲𝗰𝗸 𝗶𝗳 𝗮𝗻 𝗶𝘁𝗲𝗺 𝗲𝘅𝗶𝘀𝘁𝘀 𝗶𝗻 𝗮 𝗹𝗶𝘀𝘁, you might attempt to use the
    𝗳𝗼𝗿 loop and 𝗶𝗳 condition approach.
  prefs: []
  type: TYPE_NORMAL
- en: This works but is inefficient ❌ when dealing with very large data.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, use the 𝗶𝗻 ✅ approach which natively returns a boolean.
  prefs: []
  type: TYPE_NORMAL
- en: Below is an illustration 💡
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/baf9630156bad0ab19a7121f5eb0547f.png)'
  prefs: []
  type: TYPE_IMG
- en: Check if an element exists in a list (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Get the N largest and smallest values in a Python list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The maximum and minimum values of a list in Python can be found using the 𝗺𝗮𝘅()
    and 𝗺𝗶𝗻() functions respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, when it comes to getting the 𝗡 𝗹𝗮𝗿𝗴𝗲𝘀𝘁 or 𝘀𝗺𝗮𝗹𝗹𝗲𝘀𝘁 values of you might
    think of a two-way approach:'
  prefs: []
  type: TYPE_NORMAL
- en: 1️⃣ Sort the list in decreasing or increasing order.
  prefs: []
  type: TYPE_NORMAL
- en: 2️⃣ Retrieve the N largest or smallest values.
  prefs: []
  type: TYPE_NORMAL
- en: Good strategy, BUT not efficient ❌ when dealing with large data.
  prefs: []
  type: TYPE_NORMAL
- en: ✅ Instead, you can use the 𝗻𝗹𝗮𝗿𝗴𝗲𝘀𝘁 and 𝗻𝘀𝗺𝗮𝗹𝗹𝗲𝘀𝘁 functions from the built-in
    Python module 𝗵𝗲𝗮𝗽𝗾 which is fast 🚀 and memory efficient 👍
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d40da68eac922c15166e5b5c5c09e982.png)'
  prefs: []
  type: TYPE_IMG
- en: 𝗻𝗹𝗮𝗿𝗴𝗲𝘀𝘁 and 𝗻𝘀𝗺𝗮𝗹𝗹𝗲𝘀𝘁 functions illustration (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Display multiple dataframes using the same cell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the time, we tend to use different notebook cells to display different
    dataframes such as the head() and tail() of the same data.
  prefs: []
  type: TYPE_NORMAL
- en: This is because when using them in the same cell, only the last one will be
    displayed, and all the instructions before are ignored ❌
  prefs: []
  type: TYPE_NORMAL
- en: ✅ To solve this issue, you can use the 𝗱𝗶𝘀𝗽𝗹𝗮𝘆() function.
  prefs: []
  type: TYPE_NORMAL
- en: Below is an illustration 💡
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ab3cf7e045cbd33f29fac472321bda81.png)'
  prefs: []
  type: TYPE_IMG
- en: Multiple dataframes from the same notebook cell (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Describe both numerical & categorical columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Applying the 𝗱𝗲𝘀𝗰𝗿𝗶𝗯𝗲() function without a parameter naturally returns statistics
    related to numerical columns only.
  prefs: []
  type: TYPE_NORMAL
- en: This restricts 🚫 our understanding of the data set since most of the time we
    deal with categorical columns as well.
  prefs: []
  type: TYPE_NORMAL
- en: '✅ To solve this issue, you can proceed with a two-way approach:'
  prefs: []
  type: TYPE_NORMAL
- en: 1️⃣ Use 𝗱𝗲𝘀𝗰𝗿𝗶𝗯𝗲() for numerical columns.
  prefs: []
  type: TYPE_NORMAL
- en: 2️⃣ Set the parameter 𝗶𝗻𝗰𝗹𝘂𝗱𝗲=[𝗼𝗯𝗷𝗲𝗰𝘁] to provide information about categorical
    ones.
  prefs: []
  type: TYPE_NORMAL
- en: Below is an illustration 💡
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ce8e88c565b6152290078ab245d5bbfe.png)'
  prefs: []
  type: TYPE_IMG
- en: '**describe** including categorical columns as well (Image by Author)'
  prefs: []
  type: TYPE_NORMAL
- en: Avoid for loops when creating new columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When working with Pandas dataframes, creating new columns from existing ones
    is mainly part of the process.
  prefs: []
  type: TYPE_NORMAL
- en: The way these columns are created can affect the efficiency of the overall computation
    time ⏰.
  prefs: []
  type: TYPE_NORMAL
- en: Some may use loops to generate those derived columns.
  prefs: []
  type: TYPE_NORMAL
- en: However, this might not be the right approach ❌ because of the time complexity
    📈, especially when working with large data.
  prefs: []
  type: TYPE_NORMAL
- en: ✅ Adopting the vectorization approach is much better.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e6a26db9a840701eb41dc49afb6a4987.png)'
  prefs: []
  type: TYPE_IMG
- en: illustration of vectorization vs. for loop
  prefs: []
  type: TYPE_NORMAL
- en: Save a subset of Pandas columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes we are interested in saving only a subset of columns from the original
    data frame rather than the whole data.
  prefs: []
  type: TYPE_NORMAL
- en: One way of doing that is to create a new data frame with the columns of interest.
  prefs: []
  type: TYPE_NORMAL
- en: But, this approach adds another layer of complexity ❌.
  prefs: []
  type: TYPE_NORMAL
- en: ✅ This issue can be solved by specifying the columns argument.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a773627576845f9001df9b33599a58ba.png)'
  prefs: []
  type: TYPE_IMG
- en: Get a subset of Pandas columns (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Convert Tabular data from the webpage into Pandas Dataframe
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to extract tables from a webpage 🌐 as Pandas Dataframes, you can
    use the 𝗿𝗲𝗮𝗱_𝗵𝘁𝗺𝗹() function of Pandas.
  prefs: []
  type: TYPE_NORMAL
- en: ✅ It returns a list of all the tables from the webpage.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c3f1ad9d423fdc4e0e75d92a644f6f39.png)'
  prefs: []
  type: TYPE_IMG
- en: Convert the webpage table into Pandas Dataframe (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thank you for reading! 🎉 🍾
  prefs: []
  type: TYPE_NORMAL
- en: I hope you found this list of Python and Pandas tricks helpful! Keep an eye
    on here, because the content will be maintained with more tricks on a daily basis.
  prefs: []
  type: TYPE_NORMAL
- en: Also, If you like reading my stories and wish to support my writing, consider
    [becoming a Medium member](https://zoumanakeita.medium.com/membership). With a
    $ 5-a-month commitment, you unlock unlimited access to stories on Medium.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to follow me on [Medium](https://zoumanakeita.medium.com/), [Twitter](https://twitter.com/zoumana_keita_),
    and [YouTube](https://www.youtube.com/channel/UC9xKdy8cz6ZuJU5FTNtM_pQ), or say
    Hi on [LinkedIn](https://www.linkedin.com/in/zoumana-keita/). It is always a pleasure
    to discuss AI, ML, Data Science, NLP, and MLOps stuff!
  prefs: []
  type: TYPE_NORMAL
