- en: Add One Line of SQL to Optimise Your BigQuery Tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/add-one-line-of-sql-to-optimise-your-bigquery-tables-304761b048f0](https://towardsdatascience.com/add-one-line-of-sql-to-optimise-your-bigquery-tables-304761b048f0)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Clustering: A simple way to group similar rows and prevent unnecessary data
    processing'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@mattchapmanmsc?source=post_page-----304761b048f0--------------------------------)[![Matt
    Chapman](../Images/7511deb8d9ed408ece21031f6614c532.png)](https://medium.com/@mattchapmanmsc?source=post_page-----304761b048f0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----304761b048f0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----304761b048f0--------------------------------)
    [Matt Chapman](https://medium.com/@mattchapmanmsc?source=post_page-----304761b048f0--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----304761b048f0--------------------------------)
    ·5 min read·Dec 8, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: 'In my previous article, I explained how to optimise SQL queries using partitioning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/use-the-partitions-luke-a-simple-and-proven-way-to-optimise-your-sql-queries-43e24ea4c5d0?source=post_page-----304761b048f0--------------------------------)
    [## Use the Partitions, Luke! A Simple and Proven Way to Optimise Your SQL Queries'
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve ever written an SQL query that takes ages to run, this is the article
    for you
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/use-the-partitions-luke-a-simple-and-proven-way-to-optimise-your-sql-queries-43e24ea4c5d0?source=post_page-----304761b048f0--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Now, I’m writing the **sequel**! (Dad joke, anyone?)
  prefs: []
  type: TYPE_NORMAL
- en: 'This article will look at **clustering**: another powerful optimisation technique
    you can use in BigQuery. Like partitioning, clustering can help you write more
    performant queries that are quicker and cheaper to run. If you want to develop
    your SQL toolkit and build those higher-level Data Science skills, this is a great
    place to start.'
  prefs: []
  type: TYPE_NORMAL
- en: What’s a clustered table?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In BigQuery, a clustered table is a table that keeps similar rows grouped together
    in physical “blocks”.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, picture a table called `user_signups` that keeps track of all
    the people registering an account on a fictitious website. It''s got four columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`registration_date`: the date on which the user created an account'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`country`: the country where the user is based'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tier`: the user''s plan ("Free" or "Paid")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`username`: the user''s username'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we wanted, we could cluster the table by `country` so that users from the
    same country are stored nearby each other in the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e5cb967bc391fbb357a09655caed09c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, each “block” within the table contains users from a particular
    country. The clustered table still contains the same data; it’s just ordered in
    a more efficient way.
  prefs: []
  type: TYPE_NORMAL
- en: Clustering speeds up our queries because it means BigQuery has to process less
    data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you query a clustered table, BigQuery will first identify the relevant
    blocks needed to execute the query. This preliminary step — known as **block pruning**
    — makes your queries quicker and cheaper to run because BigQuery doesn’t perform
    unnecessary operations on the irrelevant blocks. It only uses the blocks/data
    it actually needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the benefits of this, let’s imagine that our `user_signups` table contains
    1,000,000 rows, and let’s say we wanted to fetch the users that are from Lebanon
    and signed up on 2023-12-01\. We''d write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When we run that code, BigQuery will (in theory) start by finding the relevant
    block (in this case, that’s the block containing users from Lebanon), and then
    filter that block to find the rows where `registration_date` equals “2023-12-01”.
    It won’t need to read ALL the rows in the table; just the ones in the relevant
    cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'IMPORTANT: Clustering won’t always do what you expect (especially for small
    tables)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/71d367afd9b83008bb674aaf6f1a0637.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Madison Oren](https://unsplash.com/@artbyhybrid) on [Unsplash](https://unsplash.com/photos/low-angle-photo-of-pink-and-orange-balloons-uGP_6CAD-14)
  prefs: []
  type: TYPE_NORMAL
- en: BigQuery is smart.
  prefs: []
  type: TYPE_NORMAL
- en: It knows that creating (and pruning) clusters/blocks uses computing power, and
    that sometimes the effort required to manage these clusters is too high to bring
    any performance gains.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, BigQuery won’t *necessarily* create a new block for each distinct
    value in the clustering column ([1](https://usercentrics.com/knowledge-hub/optimizing-your-bigquery-tables-using-clustering/)).
    As Data Engineer [Alessandro](https://stackoverflow.com/questions/66951917/how-to-know-the-minimum-cluster-size-in-a-bigquery-table)
    writes,
  prefs: []
  type: TYPE_NORMAL
- en: “Clusters are not like partitions. In fact there is no guarantee that there
    will be one cluster per column value… This is also why BigQuery cannot give you
    a good estimation of how much data the query will use before running it (like
    it does for partitions).”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Think about it this way: if your entire table only consists of 10 rows, it’s
    probably quicker to scan the entire table than to go through the process of block
    pruning and managing clusters. BigQuery knows this, so it doesn’t waste resources
    on clustering.'
  prefs: []
  type: TYPE_NORMAL
- en: How big does your table need to be in order to get the benefits of clustering?
    Well, according to [one](https://stackoverflow.com/a/52674573) ex-Google engineer,
  prefs: []
  type: TYPE_NORMAL
- en: “If you have less than 100MB of data per [group you want to cluster by], clustering
    won’t do much for you”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: At risk of stating the obvious, it’s also worth noting that clustering won’t
    help your queries if you query on a non-clustering column (e.g., if I didn’t include
    the `WHERE country = ...` filter in my query above, we wouldn’t be able to apply
    block pruning on the `country` column).
  prefs: []
  type: TYPE_NORMAL
- en: Creating clustered tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It’s very easy to create a clustered table. Simply add a `CLUSTER BY` clause
    at the end of your `CREATE TABLE` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can cluster by up to four columns, and (unlike with partitions) you’re not
    limited to `INT64` or `DATE` columns; you can also cluster by columns with data
    types like `STRING` and `GEOGRAPHY`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what it would look like to cluster our `user_signups` table by two columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bbdf57aa6b9807a7941e1bf1529a1039.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Combine clustering with partitioning for optimal performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In my [previous article](/use-the-partitions-luke-a-simple-and-proven-way-to-optimise-your-sql-queries-43e24ea4c5d0),
    I wrote about partitioning: a way to split your table into physical partitions
    based on dates or integers.'
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, it’s very easy to combine clustering with partitioning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example showing our `user_signups` table, now partitioned by `registration_date`
    and clustered by `country`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e87d5ffac70137bc047be14ff8535041.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: When you query the table, BigQuery will first try to apply **partition pruning**
    (to identify the relevant partitions) and then apply **block pruning** within
    the relevant partitions in order to find the relevant rows.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is one of the reasons I love working with BigQuery so much: it gives you
    the best of both worlds!'
  prefs: []
  type: TYPE_NORMAL
- en: Want a place to practice SQL?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you enjoyed this article, you might like my site [the-sql-gym.com](https://the-sql-gym.com/),
    which contains over 100 practice SQL questions. If you want to boost your SQL
    skills, check it out!
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading, and feel free to connect with me on [Twitter](https://twitter.com/matt_chapma)
    or [LinkedIn](https://www.linkedin.com/in/matt-chapman-ba8488118/)! :-)
  prefs: []
  type: TYPE_NORMAL
