- en: Creating and Publishing Your Own Python Package for Absolute Beginners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/creating-and-publishing-your-own-python-package-for-absolute-beginners-7656c893f387](https://towardsdatascience.com/creating-and-publishing-your-own-python-package-for-absolute-beginners-7656c893f387)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Create, build an publish a Python Package in 5 minutes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://mikehuls.medium.com/?source=post_page-----7656c893f387--------------------------------)[![Mike
    Huls](../Images/8f9f55a0d25db00799c5d37383b7f5b6.png)](https://mikehuls.medium.com/?source=post_page-----7656c893f387--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7656c893f387--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7656c893f387--------------------------------)
    [Mike Huls](https://mikehuls.medium.com/?source=post_page-----7656c893f387--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7656c893f387--------------------------------)
    ·6 min read·Sep 23, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/376b56645a3b29e6dba99d79a2a5fd01.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by [Erda Estremera](https://unsplash.com/@erdaest) on [Unsplash](https://unsplash.com/photos/sxNt9g77PE0))
  prefs: []
  type: TYPE_NORMAL
- en: Python packages are collections of reusable code that can be easily shared and
    implemented across projects. We can write our code once and use it many times
    in many places. Packages allow us to share our code with colleagues or even the
    global developer community. As a data scientist, instead of sharing Jupyter notebooks,
    you can share packages to ensure easy updates, reusability and version control.
  prefs: []
  type: TYPE_NORMAL
- en: In this article we’ll detail the modern approach for creating, building, and
    publishing your own package to the Python Package Index (PyPI; where you `pip
    install` from). We’ll create a [real package called “**mikes-toolbox2**”](https://pypi.org/project/mikes-toolbox2/)
    and deploy it to PyPI so that we can pip install `mikes-toolbox2` it. Let’s code!
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This article details how to publish packages to a *public* Python Package Index.
    This means that, once published, your package is available to anyone. I’m in the
    process of writing an article on how to set up your own, private PyPI so make
    sure to [**follow me**](http://mikehuls.medium.com/membership)if you’re interested.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you get lost in the code examples in this article: [**check out the source
    code here**](https://github.com/mike-huls/mikes-toolbox2).'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Set up a Python Package project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section we’ll prepare our project by making a folder and installing
    our virtual environment and packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll start by **creating a folder** at `c:/my_packages/new_package` and opening
    this folder in a code editor. Next we’ll need to **set up our virtual environment**.
    See the article below for a deep dive on how to do this. In short: you can let
    PyCharm handle it or use `python -m venv venv`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/virtual-environments-for-absolute-beginners-what-is-it-and-how-to-create-one-examples-a48da8982d4b?source=post_page-----7656c893f387--------------------------------)
    [## Virtual environments for absolute beginners — what is it and how to create
    one (+ examples)'
  prefs: []
  type: TYPE_NORMAL
- en: A deep dive into Python virtual environments, pip and avoiding entangled dependencies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/virtual-environments-for-absolute-beginners-what-is-it-and-how-to-create-one-examples-a48da8982d4b?source=post_page-----7656c893f387--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Lastly we’ll need to **install Poetry**. This package makes dependency management
    and packaging very easy. Install with `pip install poetry`.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Package requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Python package needs certain **files and folders** to be present in order
    to be a valid package so let’s create these. Make sure your folder looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Technically we don’t need the* `*src*` *folder between* `*new_package*` *and*
    `*mikes_toolbox2*` *but I like to do so anyway because it isolates the package-code
    a bit more from the source directory. I think this structure is more explicit,
    cleaner and easier to manage but it’s optional; you can leave out the* `*src*`
    *folder.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/no-need-to-ever-write-sql-again-sqlalchemys-orm-for-absolute-beginners-107be0b3148f?source=post_page-----7656c893f387--------------------------------)
    [## No Need to Ever Write SQL Again: SQLAlchemy’s ORM for Absolute Beginners'
  prefs: []
  type: TYPE_NORMAL
- en: With this ORM you can create a table, insert, read, delete and update data without
    writing a single line of SQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/no-need-to-ever-write-sql-again-sqlalchemys-orm-for-absolute-beginners-107be0b3148f?source=post_page-----7656c893f387--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: After creating our files and folders we need a `**pyproject.toml**`. This is
    universal configuration file for Python projects that is designed to be used by
    all kinds of tools like build systems, package managers and linters. Poetry uses
    `pyproject.toml` to keep track of dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a `pyproject.toml` is easy since Poetry helpys us generate one with
    `poetry init` . Just answer the prompts and the pyproject is generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b642fd9ee4e82dfbabf8279bc3f2e4eb.png)'
  prefs: []
  type: TYPE_IMG
- en: '[poetry init] promps us for details about our Package (image by author)'
  prefs: []
  type: TYPE_NORMAL
- en: The `pyproject.toml` should be located in the root of your project directory.
    So in my case it’s [located](https://github.com/mike-huls/mikes-toolbox2) at `c:/my_packages/new_pacakge/pyproject.toml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Maybe our project or package **needs dependencies**; how do we go about installing
    these? Poetry uses `pyproject.toml` to keep track of dependencies (among other
    things). I’ll demonstrate by installing two packages: `requests` and `black`.
    We use these packages a bit differently:'
  prefs: []
  type: TYPE_NORMAL
- en: '`request` is used by our package itself'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`black` is used by us, the developer, to lint the package'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference is that `black` is a ***dev dependency***, we only need it while
    developing the dependency itself. So when someone pip installs our package, `requests`
    needs to be installed as well, but `black` doesn’t.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how to install the packages in the different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way I will install `pytest` as a dev dependency. At the end our
    `pyproject.toml` will contain the following groups of dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ff4ecec6cc709a2ded84abdb825fb248.png)'
  prefs: []
  type: TYPE_IMG
- en: package dependencies and dev dependencies in pyproject.toml (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: '[](/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e?source=post_page-----7656c893f387--------------------------------)
    [## Create a fast auto-documented, maintainable and easy-to-use Python API in
    5 lines of code with…'
  prefs: []
  type: TYPE_NORMAL
- en: Perfect for (unexperienced) developers who just need a complete, working, fast
    and secure API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e?source=post_page-----7656c893f387--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 3 Package content and testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s **package our functions**! I’ve added the `mess_up_casing` function below
    in `c:/my_pacakges/new_pacakge/src/mikes_toolbox2/my_toolbox.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Next we can **test** this piece of code. In order to do so I’ve written a [small
    unit test](https://github.com/mike-huls/mikes-toolbox2/blob/main/tests/test_toolbox_functions.py)
    in the `tests` folder. Just call `pytest` and check if all tests succeed. Lastly
    we can even **format** all of our code with `black src`.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e?source=post_page-----7656c893f387--------------------------------)
    [## Why Python is so slow and how to speed it up'
  prefs: []
  type: TYPE_NORMAL
- en: Take a look under the hood to see where Python’s bottlenecks lie
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e?source=post_page-----7656c893f387--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Building and publishing our package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Building our package has become pretty easy now that poetry is set up correctly:
    `poetry build`.'
  prefs: []
  type: TYPE_NORMAL
- en: After your build succeeds you’ll see a new `dist` folder with a `.tar.gz` and
    a `.whl` file. These are the files we want to upload to pypi.
  prefs: []
  type: TYPE_NORMAL
- en: To do so, first you’ll need to **register** at [pypi.org](https://pypi.org/account/register/).
    After logging in you can go to your account settings and **create an API token**.
    You’ll need this token to authenticate when publishing a package. Make sure to
    save the token somewhere since you cannot see it again after you’ve closed the
    window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we’ll need to **configure Poetry** since we’re going to use it for publishing
    our package; Poetry must know how to authenticate to your pypi.org account. We
    use the previously created **API token** for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`poetry config pypi-token.pypi THETOKEN`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Publishing our package** is easy now that we have a correct project structure
    and we’ve configured Poetry. We can just call: `poetry publish` and we’re done!
    After this step you can `pip install mikes-toolbox2`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/thread-your-python-program-with-two-lines-of-code-3b474407dbb8?source=post_page-----7656c893f387--------------------------------)
    [## Thread Your Python Program with Two Lines of Code'
  prefs: []
  type: TYPE_NORMAL
- en: Speed up your program by doing multiple things simultaneously
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/thread-your-python-program-with-two-lines-of-code-3b474407dbb8?source=post_page-----7656c893f387--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article we’ve seen that Poetry makes it very easy to package and publish
    code to PyPI.org. Are you interested in packaging your code but don’t want to
    publish it to a public PyPI? It’s also possible to host your own Python Package
    Index, [follow me](http://mikehuls.medium.com/membership) to stay tuned for a
    future article on this.
  prefs: []
  type: TYPE_NORMAL
- en: 'I hope this article was as clear as I hope it to be but if this is not the
    case please let me know what I can do to clarify further. In the meantime, check
    out my [other articles](https://mikehuls.com/articles) on all kinds of programming-related
    topics like these:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Git for absolute beginners: understanding Git with the help of a video game](https://mikehuls.medium.com/git-for-absolute-beginners-understanding-git-with-the-help-of-a-video-game-88826054459a)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Create and publish your own Python package](https://mikehuls.medium.com/create-and-publish-your-own-python-package-ea45bee41cdc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Create a fast auto-documented, maintainable, and easy-to-use Python API in
    5 lines of code with FastAPI](https://mikehuls.medium.com/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A complete guide to using environment variables and files with docker and
    compose](https://mikehuls.medium.com/a-complete-guide-to-using-environment-variables-and-files-with-docker-and-compose-4549c21dc6af)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Happy coding!
  prefs: []
  type: TYPE_NORMAL
- en: — Mike
  prefs: []
  type: TYPE_NORMAL
- en: '*P.S: like what I’m doing?* [*Follow me!*](https://mikehuls.medium.com/membership)'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://mikehuls.medium.com/membership?source=post_page-----7656c893f387--------------------------------)
    [## Join Medium with my referral link — Mike Huls'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Mike Huls (and thousands of other writers on Medium).
    Your membership fee directly supports Mike…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: mikehuls.medium.com](https://mikehuls.medium.com/membership?source=post_page-----7656c893f387--------------------------------)
  prefs: []
  type: TYPE_NORMAL
