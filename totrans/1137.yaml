- en: How to Create a Polar Histogram With Python and Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-create-a-polar-histogram-with-python-and-matplotlib-9e266c22c0fa](https://towardsdatascience.com/how-to-create-a-polar-histogram-with-python-and-matplotlib-9e266c22c0fa)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Matplotlib Tutorial
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating a graph that captures the eye and tells the beholder an insightful
    story.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@oscarleo?source=post_page-----9e266c22c0fa--------------------------------)[![Oscar
    Leo](../Images/7733c9147bad2875a35155fca3903aa8.png)](https://medium.com/@oscarleo?source=post_page-----9e266c22c0fa--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9e266c22c0fa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9e266c22c0fa--------------------------------)
    [Oscar Leo](https://medium.com/@oscarleo?source=post_page-----9e266c22c0fa--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9e266c22c0fa--------------------------------)
    ·10 min read·Aug 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/12f9a4c8cb19c3c9003ae99166e7a591.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph created by the author
  prefs: []
  type: TYPE_NORMAL
- en: Hi, and welcome to this Python + Matplotlib tutorial, where I will show you
    how to create the beautiful polar histogram you see above.
  prefs: []
  type: TYPE_NORMAL
- en: Polar histograms are great when you have too many values for a standard bar
    chart. The circular shape where each bar gets thinner towards the middle allows
    us to cram more information into the same area.
  prefs: []
  type: TYPE_NORMAL
- en: A nice feature is the resulting visual comparison between the lowest and highest
    values as they meet each other after one lap around the center.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, I’m using data from the [World Happiness Report](https://worldhappiness.report/)
    and information about income levels from the [World Bank](https://data.worldbank.org/).
    Both data sources are publicly available under Creative Commons licenses.
  prefs: []
  type: TYPE_NORMAL
- en: My data frame contains 146 countries and three columns.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s what it looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/985a55459edef00b3cb56aa378a92853.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by the author
  prefs: []
  type: TYPE_NORMAL
- en: I’ll show and explain every line of code required to create the visualization.
    If you want to follow along, you can find the code and data I’m using in this
    [GitHub repository](https://github.com/oscarleoo/polar-histogram-tutorial).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Preparations'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Importing libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We only need standard Python libraries familiar to everyone. PIL is not mandatory,
    but it’s my preferred choice for handling images which we do when adding flags.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The only thing that stands out is a few specific Matplotlib imports at the end.
    I’ll cover those components later in the tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: As usual, I use pandas to load the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let’s continue.
  prefs: []
  type: TYPE_NORMAL
- en: Seaborn style settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, I use Seaborn to create a base style by defining the background, text
    color, and font.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There are several more parameters for set_style, but these four are the only
    ones I need in this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: I use websites such as [https://colorhunt.co/](https://colorhunt.co/) and [https://coolors.co/](https://coolors.co/)
    to create beautiful color palettes.
  prefs: []
  type: TYPE_NORMAL
- en: Global settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’m also adding a few global settings to control the general look. The first
    four define the range, size, and width of the wedges in the histogram.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Inner padding creates distance between the origo and the start of each wedge.
    It opens a space in the middle of the graph where I can add a title.
  prefs: []
  type: TYPE_NORMAL
- en: Boilerplate code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a software engineer, I strive to write reusable code, and it’s the same when
    I’m working on data visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: That’s why I always start by creating a few lines of boilerplate code that I
    can extend with reusable functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: For the rest of the tutorial, I will create and add functions and variables
    under one of the three comments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Drawing wedges'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get more power over the visuals in Matplotlib, it helps to use the underlying
    components rather than the built-in graph functions.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing a wedge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For example, instead of using `plt.pie()` to create a pie chart, you can use
    `plt.patches.Wedge()` to draw the individual pieces.
  prefs: []
  type: TYPE_NORMAL
- en: That’s why I created the following function, which draws a wedge based on angles,
    length, bar length, and color.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the boilerplate code, I add `draw_wedge()` under the “Add functions here”
    comment as below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: I use `row.score` to define `bar_length` so that the visible part of the bars
    has an accurate size relation to each other. For now, I’ve removed the `INNER_PADDING`
    to show you what it does.
  prefs: []
  type: TYPE_NORMAL
- en: When I run the code, I get the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7ef80bca22ee28c2ed9e2cf049f1381f.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure created by the author
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have a long way to go until we get something similar to the
    polar histogram that you saw at the beginning, but at least we’ve managed to draw
    the wedges.
  prefs: []
  type: TYPE_NORMAL
- en: We get a lot of visual artifacts close to the middle, so let’s uncomment `INNER_PADDING`.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s what we get.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/706a1a0705c0167de7291bbeb859ab33.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure created by the author
  prefs: []
  type: TYPE_NORMAL
- en: Much better.
  prefs: []
  type: TYPE_NORMAL
- en: Adding color
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, I have a simple color function that decides the color for each wedge based
    on the income level of that country.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: I use that function as input to the draw_wedge function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here’s the result.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ecc61eb09a2691dc3abbb952a19b4d43.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure created by the author
  prefs: []
  type: TYPE_NORMAL
- en: With `INNER_PADDING` and `color()` there are no strange artifacts left. It’s
    time to add information that explains what we’re looking at.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Adding labels'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s add labels for each bar in the polar histogram. I want each bar to display
    the country’s flag, name, and happiness score.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the positions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you add flags and text to a chart in Matplotlib, you need to calculate
    the correct positions.
  prefs: []
  type: TYPE_NORMAL
- en: That’s often tricky, especially when you have an unusual shape like we have
    in the polar histogram.
  prefs: []
  type: TYPE_NORMAL
- en: The function below takes the length of a wedge and its angle to calculate a
    position. Padding pushes the position away from the bar to add some visual space.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We can use this function for both flags and text.
  prefs: []
  type: TYPE_NORMAL
- en: Adding flags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For flags, I’m using these rounded ones from FlatIcon: [https://www.flaticon.com/packs/countrys-flags](https://www.flaticon.com/packs/countrys-flags).
    They require a license, so, unfortunately, I can’t share them, but you can find
    similar flags in other places.'
  prefs: []
  type: TYPE_NORMAL
- en: Here’s my function to add a flag to the graph. It takes the position, the country’s
    name (which corresponds to the name of the correct file), zoom, and rotation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: I change how the flag rotates if the angle exceeds 270 degrees. That happens
    when we start adding bars on the right part of the chart. At that point, the flag
    is to the left of the text, and changing the rotation makes reading more natural.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can calculate the angle, use `get_xy_with_padding()` and put flags on
    the chart.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `flag_zoom` parameters decide the size of the flag and depend on the score.
    If a country has a low score, there’s less room for a flag, and we need to make
    it a bit smaller.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8e2aba212e8307166c005e6842d9cd96.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph created by the author
  prefs: []
  type: TYPE_NORMAL
- en: Fantastic.
  prefs: []
  type: TYPE_NORMAL
- en: Adding country names and scores
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To add the name and score of the country, I’ve written the following function.
  prefs: []
  type: TYPE_NORMAL
- en: As with the flags, I change the rotation if the angle exceeds 270 degrees. Otherwise,
    the text would be upside down.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We calculate the position of the text in the same way as we did with the flags.
    The only difference is that we add more padding since we want it further from
    the wedges.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now we have the following graph, and it’s starting to look much better.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/04dad3143aa13232b6bae65ae25f0440.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph created by the author
  prefs: []
  type: TYPE_NORMAL
- en: Now it’s time to tell the users what they are looking at.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Adding information'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have added all the data. It’s time to make the chart readable by adding helpful
    information and guidance.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing reference lines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An excellent type of visual helper is reference lines; they work just as well
    here as with standard bar charts.
  prefs: []
  type: TYPE_NORMAL
- en: The idea is to draw a line at a specific score, which indirectly helps us compare
    different countries.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s my function to draw reference lines. I’m reusing the `draw_wedge()` function
    to draw a wedge from 0 to 360 degrees.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: I run the function once for each score to draw multiple reference lines.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here’s the result.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4412f6d96dd93d5fe291bf348df4e613.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph created by the author
  prefs: []
  type: TYPE_NORMAL
- en: It makes a significant difference.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a title
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The purpose of the gap in the center of the graph is to create a natural place
    for a title. Having the title in the center is unusual and can immediately capture
    a viewer’s interest.
  prefs: []
  type: TYPE_NORMAL
- en: The code for adding the title is standard Matplotlib functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Here’s what it looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/77e9f2b858348864eb208abc41deaed0.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph created by the author
  prefs: []
  type: TYPE_NORMAL
- en: It’s getting close, but we still have one more thing to do.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a legend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There’s no way for the viewer to understand what the colors mean, but we can
    fix that by adding a legend.
  prefs: []
  type: TYPE_NORMAL
- en: To add a legend, I’ve created the following function that takes the labels to
    add, their colors, and a title.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: I add the function under “Add general functions here” and run it together with
    everything else.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The final result looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/12f9a4c8cb19c3c9003ae99166e7a591.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph created by the author
  prefs: []
  type: TYPE_NORMAL
- en: That’s it. We have recreated the beautiful polar histogram you saw at the top.
  prefs: []
  type: TYPE_NORMAL
- en: Your entire main block of code should now look like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: That’s it for this tutorial; congratulations on reaching the end.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today, we learned to create a beautiful polar histogram using Matplotlib and
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: Polar histograms are surprisingly easy to create, allowing us to cram more information
    into a single chart.
  prefs: []
  type: TYPE_NORMAL
- en: I used the World Happiness Report in this tutorial, but you can change it to
    another inspiring dataset.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you learned a few techniques to help you bring your chart ideas to life.
  prefs: []
  type: TYPE_NORMAL
- en: If you did, make sure to check out my other Matplotlib tutorials as well.
  prefs: []
  type: TYPE_NORMAL
- en: '![Oscar Leo](../Images/a3badd168c6bfbbdc3d060f9191ca1d2.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Oscar Leo](https://medium.com/@oscarleo?source=post_page-----9e266c22c0fa--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib Tutorials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[View list](https://medium.com/@oscarleo/list/matplotlib-tutorials-262e5d7f0847?source=post_page-----9e266c22c0fa--------------------------------)8
    stories![](../Images/51b77b8f6d7ea69abdcd113427d4a52a.png)![](../Images/56c078b5447338a07b7bce2b23cf7133.png)![](../Images/c3088ee7cd4994f027ddddbc6ae423cd.png)'
  prefs: []
  type: TYPE_NORMAL
- en: See you next time.
  prefs: []
  type: TYPE_NORMAL
