- en: Why You Should Consider Using Fortran As A Data Scientist
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么作为数据科学家你应该考虑使用Fortran
- en: 原文：[https://towardsdatascience.com/why-you-should-consider-using-fortran-as-a-data-scientist-5511e05ef89](https://towardsdatascience.com/why-you-should-consider-using-fortran-as-a-data-scientist-5511e05ef89)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/why-you-should-consider-using-fortran-as-a-data-scientist-5511e05ef89](https://towardsdatascience.com/why-you-should-consider-using-fortran-as-a-data-scientist-5511e05ef89)
- en: An exploration of the benefits that Fortran can bring to Data Science and Machine
    Learning
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探讨Fortran可以为数据科学和机器学习带来的好处
- en: '[](https://medium.com/@egorhowell?source=post_page-----5511e05ef89--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----5511e05ef89--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5511e05ef89--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5511e05ef89--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----5511e05ef89--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@egorhowell?source=post_page-----5511e05ef89--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----5511e05ef89--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5511e05ef89--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5511e05ef89--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----5511e05ef89--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5511e05ef89--------------------------------)
    ·8 min read·May 16, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----5511e05ef89--------------------------------)
    ·阅读时间8分钟·2023年5月16日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/772008d4d916c3876973f8c2bc8645f4.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/772008d4d916c3876973f8c2bc8645f4.png)'
- en: Photo by [Federica Galli](https://unsplash.com/@fedechanw?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Federica Galli](https://unsplash.com/@fedechanw?utm_source=medium&utm_medium=referral)拍摄，来自[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)。
- en: Background
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景
- en: Python is widely considered the gold standard language for Data Science, and
    the entire range of packages, literature, and resources related to Data Science
    is always available in Python. This is not necessarily a bad thing, as it means
    that there are numerous documented solutions for any data-related problem that
    you may encounter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python被广泛认为是数据科学的金标准语言，与数据科学相关的所有包、文献和资源总是可以在Python中找到。这并不一定是坏事，因为这意味着对于你可能遇到的任何数据相关问题，已经有大量记录的解决方案。
- en: However, with the advent of larger datasets and the rise of more complex models,
    it may be time to explore other languages. This is where the old-timer, [**Fortran**](https://en.wikipedia.org/wiki/Fortran),
    may become popular again. Therefore, it is worthwhile for today’s Data Scientists
    to become aware of it and maybe even try to implement some solutions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着数据集的增大和模型复杂度的提升，也许是时候探索其他语言了。这时，老牌语言[**Fortran**](https://en.wikipedia.org/wiki/Fortran)可能会再次流行。因此，今天的数据科学家们了解它并尝试实现一些解决方案是非常值得的。
- en: What is Fortran?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Fortran？
- en: Fortran, short for Formula Translator, was the first widely used programming
    language that originated in the 1950s. Despite its age, it remains a high-performance
    computing language and [can be faster than both C and C++](https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/ifc-gpp.html).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Fortran，意为“公式翻译器”，是1950年代首个被广泛使用的编程语言。尽管其年代久远，它仍然是高性能计算语言，并且[比C和C++都要快](https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/ifc-gpp.html)。
- en: Initially designed for scientists and engineers to run large-scale models and
    simulations in areas such as fluid dynamics and organic chemistry, Fortran is
    still frequently used today by physicists. I even learned it during my physics
    undergrad!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最初为科学家和工程师设计，以运行如流体力学和有机化学等领域的大规模模型和仿真，Fortran至今仍被物理学家频繁使用。我在物理学本科期间也学过它！
- en: Its specialty lies in modelling and simulations, which are essential for numerous
    fields, including Machine Learning. Therefore, Fortran is perfectly poised to
    tackle Data Science problems, as that’s exactly what it was invented to do decades
    ago.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 它的专长在于建模和仿真，这对包括机器学习在内的众多领域至关重要。因此，Fortran非常适合解决数据科学问题，因为这正是几十年前它被发明出来的目的。
- en: Advantages & Disadvantages
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优势与劣势
- en: 'Fortran has several key advantages over other programming languages such as
    C++ and Python. Here are some of the main points:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Fortran相对于其他编程语言如C++和Python有几个关键优势。以下是一些主要点：
- en: '**Easy to Read**: Fortran is a compact language with only five native data
    types: INTEGER, REAL, COMPLEX, LOGICAL, and CHARACTER. This simplicity makes it
    easy to read and understand, especially for scientific applications.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于阅读**：Fortran是一种紧凑的语言，只有五种原生数据类型：INTEGER、REAL、COMPLEX、LOGICAL和CHARACTER。这种简洁性使其易于阅读和理解，特别是在科学应用中。'
- en: '[**High Performance**](https://en.wikipedia.org/wiki/High-performance_computing):
    Fortran is often used to benchmark the speed of high-performance computers.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**高性能**](https://en.wikipedia.org/wiki/High-performance_computing)：Fortran通常用于基准测试高性能计算机的速度。'
- en: '**Large Libraries**: Fortran has a wide range of [libraries](https://fortranwiki.org/fortran/show/Libraries)
    available, mainly for scientific purposes. These libraries provide developers
    with a vast array of functions and tools for performing complex calculations and
    simulations.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大型库**：Fortran有广泛的[库](https://fortranwiki.org/fortran/show/Libraries)，主要用于科学目的。这些库为开发人员提供了大量的函数和工具，用于执行复杂的计算和模拟。'
- en: '**Historical Array Support**: Fortran has had multi-dimensional array support
    from the beginning, which is essential for Machine Learning and Data Science such
    as [Neural Networks](https://dl.acm.org/doi/pdf/10.1145/3460944.3464312).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**历史数组支持**：Fortran从一开始就支持多维数组，这对于机器学习和数据科学如[神经网络](https://dl.acm.org/doi/pdf/10.1145/3460944.3464312)至关重要。'
- en: '**Designed for Engineers and Scientists**: Fortran was built specifically for
    pure number crunching, which is different from the more general-purpose use of
    C/C++ and Python.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为工程师和科学家设计**：Fortran专门为纯数值计算而构建，这与C/C++和Python的通用用途不同。'
- en: 'However, it is not all sunshine and rainbows. Here are some of Fortran’s drawbacks:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并非全是美好如画。以下是Fortran的一些缺点：
- en: '**Text operations:** Not ideal for characters and text manipulation, so not
    optimal for [natural language processing](https://en.wikipedia.org/wiki/Natural_language_processing).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本操作**：不适合字符和文本处理，因此在[自然语言处理](https://en.wikipedia.org/wiki/Natural_language_processing)方面并不理想。'
- en: '**Python has more packages**: Even though Fortran has many libraries, it is
    far from the total number in Python.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python有更多的包**：尽管Fortran有很多库，但远不及Python中的总数。'
- en: '**Small community:** The Fortran language has not got as large a following
    as other languages. This means it hasn’t got a lot of IDE and plugin support or
    stack overflow answers!'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小社区**：Fortran语言的关注度不如其他语言。这意味着它没有大量的IDE和插件支持，也没有很多的Stack Overflow回答！'
- en: '**Not suitable for many applications**: It is explicitly a scientific language,
    so don’t try to build a website with it!'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不适合许多应用程序**：它显然是一种科学语言，所以不要试图用它来建立网站！'
- en: Setting Up Fortran
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Fortran
- en: Homebrew
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**Homebrew**'
- en: Let’s quickly go over how to install Fortran on your computer. First, you should
    install **Homebrew** ([link here](https://brew.sh/)), which is a package manager
    for MacOS.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速了解一下如何在你的计算机上安装Fortran。首先，你应该安装**Homebrew** ([链接在这里](https://brew.sh/))，它是MacOS的一个包管理器。
- en: 'To install Homebrew, simply run the command from their website:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Homebrew，只需运行其网站上的命令：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can verify Homebrew is installed by running the command `brew help`. If
    there are no errors, then Homebrew has been successfully installed on your system.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行命令`brew help`来验证Homebrew是否已安装。如果没有错误，那么Homebrew已经成功安装在你的系统上。
- en: GCC Compiler
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**GCC编译器**'
- en: As Fortran is a [**compiled language**](https://en.wikipedia.org/wiki/Compiled_language),
    we need a compiler that can compile Fortran source code. Unfortunately, MacOS
    doesn’t ship with a Fortran compiler pre-installed, so we need to install one
    ourselves.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Fortran是一个[**编译语言**](https://en.wikipedia.org/wiki/Compiled_language)，我们需要一个能够编译Fortran源代码的编译器。不幸的是，MacOS并不自带Fortran编译器，因此我们需要自行安装一个。
- en: 'A popular option is the [**GCC**](https://gcc.gnu.org/) (GNU Compiler Collection)
    compiler, which you can install through Homebrew: `brew install gcc`. The GCC
    compiler is a set of compilers for languages like C, Go, and of course Fortran.
    The Fortran compiler in the GCC group is called [**gfortran**](https://gcc.gnu.org/wiki/GFortran),
    that can compile all major versions of Fortran such as 77, 90, 95, 2003, and 2008\.
    It is recommended to use the `.f90` extension for Fortran code files, although
    there is [some discussion on this topic](https://fortran-lang.discourse.group/t/is-there-a-standard-file-suffix-for-modern-fortran-code/3550).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个受欢迎的选项是 [**GCC**](https://gcc.gnu.org/)（GNU 编译器集合）编译器，你可以通过 Homebrew 安装：`brew
    install gcc`。GCC 编译器是一个支持 C、Go 以及当然还有 Fortran 的编译器集合。GCC 组中的 Fortran 编译器叫做 [**gfortran**](https://gcc.gnu.org/wiki/GFortran)，它可以编译所有主要版本的
    Fortran，如 77、90、95、2003 和 2008。建议使用 `.f90` 扩展名来命名 Fortran 代码文件，尽管 [关于这个话题有些讨论](https://fortran-lang.discourse.group/t/is-there-a-standard-file-suffix-for-modern-fortran-code/3550)。
- en: 'To verify that gfortran and GCC have been successfully installed, run the command
    `which fortran`. The output should look something like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证 gfortran 和 GCC 是否成功安装，运行命令 `which fortran`。输出应该如下所示：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The gfortran compiler is by far the most popular, however there are several
    other compilers out there. A list of can be found [here](https://fortran-lang.org/en/compilers/).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: gfortran 编译器迄今为止是最受欢迎的，然而还有其他几个编译器。可以在 [这里](https://fortran-lang.org/en/compilers/)
    找到一个列表。
- en: IDE’s & Text Editors
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成开发环境（IDE）与文本编辑器
- en: Once we have our Fortran compiler, the next step is to choose an Integrated
    Development Environment (IDE) or text editor to write our Fortran source code
    in. This is a matter of personal preference since there are many options available.
    Personally, I use PyCharm and install the [Fortran plugin](https://plugins.jetbrains.com/plugin/9699-fortran)
    because I prefer not to have multiple IDEs. Other popular text editors suggested
    by the [Fortran website](https://fortran-lang.org/en/learn/os_setup/text_editors/)
    include [Sublime Text](https://www.sublimetext.com/), [Notepad++](https://notepad-plus-plus.org/downloads/),
    and [Emacs](https://www.gnu.org/software/emacs/).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了 Fortran 编译器，下一步是选择一个集成开发环境（IDE）或文本编辑器来编写 Fortran 源代码。这是个人偏好的问题，因为有许多选项可供选择。个人而言，我使用
    PyCharm 并安装 [Fortran 插件](https://plugins.jetbrains.com/plugin/9699-fortran)，因为我不喜欢使用多个
    IDE。其他由 [Fortran 网站](https://fortran-lang.org/en/learn/os_setup/text_editors/)
    推荐的流行文本编辑器包括 [Sublime Text](https://www.sublimetext.com/)、[Notepad++](https://notepad-plus-plus.org/downloads/)
    和 [Emacs](https://www.gnu.org/software/emacs/)。
- en: Running a Program
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行程序
- en: Before we go onto our first program, it is important to note that I won’t be
    doing a syntax or command tutorial in this article. [Linked here](https://fortran-lang.org/en/learn/quickstart/)
    is a short guide that will cover all the basic syntax.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入第一个程序之前，重要的是要注意本文不会进行语法或命令的教程。[这里的链接](https://fortran-lang.org/en/learn/quickstart/)
    是一个简短的指南，将涵盖所有基本语法。
- en: 'Below is a simple program called `example.f90`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个名为 `example.f90` 的简单程序：
- en: GitHub Gist by author.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Gist 由作者提供。
- en: 'Here’s how we compile it:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的编译过程如下：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This command compiles the code and creates an executable file named `example`.
    You can replace `example` with any other name you prefer. If you don’t specify
    a name using the `-o` flag, the compiler will use a default name which is typically
    `a.out` for most [**Unix**](https://en.wikipedia.org/wiki/Unix) based operating
    systems.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令编译代码并创建一个名为 `example` 的可执行文件。你可以用任何你喜欢的名字替换 `example`。如果你没有使用 `-o` 标志指定名称，编译器将使用一个默认名称，通常对于大多数
    [**Unix**](https://en.wikipedia.org/wiki/Unix) 系统来说是 `a.out`。
- en: 'Here’s how to run the `example` executable:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `example` 可执行文件的方法如下：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `./` prefix is included to indicate that the executable is in the current
    directory. The output from this command will look like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`./` 前缀用于指示可执行文件位于当前目录中。此命令的输出将如下所示：'
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, lets tackle a more ‘real’ problem!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们解决一个更“实际”的问题！
- en: 'Performance Example: Knapsack Problem'
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能示例：背包问题
- en: Overview
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: 'The [**knapsack problem**](https://en.wikipedia.org/wiki/Knapsack_problem)
    is a well-known [**combinatorial optimization**](https://en.wikipedia.org/wiki/Combinatorial_optimization)
    problem that poses:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[**背包问题**](https://en.wikipedia.org/wiki/Knapsack_problem) 是一个著名的 [**组合优化**](https://en.wikipedia.org/wiki/Combinatorial_optimization)
    问题，其核心是：'
- en: A set of items, each with a value and weight, must be packed into a knapsack
    that maximizes the total value whilst respecting the weight constraint of the
    knapsack
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一组项目，每个项目都有一个值和重量，必须被打包进一个背包中，以最大化总值，同时遵守背包的重量限制。
- en: Although the problem sounds simple, the number of solutions increases exponentially
    with the number of items. Thus, making it [**intractable**](https://www.umsl.edu/~siegelj/information_theory/classassignments/Lombardo/04_intractableproblems.html)
    to solve by [**brute force**](https://en.wikipedia.org/wiki/Brute-force_search)
    beyond a certain number of items.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管问题听起来很简单，但解决方案的数量随着物品数量的增加而呈指数增长。因此，使得在超出一定数量的物品时，通过[**暴力破解**](https://en.wikipedia.org/wiki/Brute-force_search)方式解决[**不可解的**](https://www.umsl.edu/~siegelj/information_theory/classassignments/Lombardo/04_intractableproblems.html)。
- en: '[**Heuristic**](https://en.wikipedia.org/wiki/Heuristic) methods such as [**genetic
    algorithms**](https://medium.com/towards-data-science/from-biology-to-computing-an-introduction-to-genetic-algorithms-b39476743483)
    can be used to find a ‘good enough’ or ‘approximate’ solution in a reasonable
    amount of time. If you’re interested in learning how to solve the knapsack problem
    using the genetic algorithm, check out my previous post:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[**启发式**](https://en.wikipedia.org/wiki/Heuristic) 方法如[**遗传算法**](https://medium.com/towards-data-science/from-biology-to-computing-an-introduction-to-genetic-algorithms-b39476743483)可以用来在合理的时间内找到一个“足够好”或“近似”的解决方案。如果你有兴趣了解如何使用遗传算法解决胶囊问题，可以查看我之前的帖子：'
- en: '[](https://pub.towardsai.net/genetic-algorithms-and-the-knapsack-problem-a-beginners-guide-a11236ca30e4?source=post_page-----5511e05ef89--------------------------------)
    [## Genetic Algorithms and the Knapsack Problem: A Beginners’ Guide'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 遗传算法与胶囊问题：初学者指南](https://pub.towardsai.net/genetic-algorithms-and-the-knapsack-problem-a-beginners-guide-a11236ca30e4?source=post_page-----5511e05ef89--------------------------------)'
- en: Get hands-on experience with genetic algorithms and learn how to solve the knapsack
    problem step by step
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过实践遗传算法，逐步学习如何解决胶囊问题
- en: pub.towardsai.net](https://pub.towardsai.net/genetic-algorithms-and-the-knapsack-problem-a-beginners-guide-a11236ca30e4?source=post_page-----5511e05ef89--------------------------------)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[pub.towardsai.net](https://pub.towardsai.net/genetic-algorithms-and-the-knapsack-problem-a-beginners-guide-a11236ca30e4?source=post_page-----5511e05ef89--------------------------------)'
- en: The knapsack problem has sundry applications in Data Science and [**Operations
    Research**](https://en.wikipedia.org/wiki/Operations_research), including stock
    management and supply chain efficiency, rendering it important to solve efficiently
    for business decisions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 胶囊问题在数据科学和[**运筹学**](https://en.wikipedia.org/wiki/Operations_research)中有广泛的应用，包括库存管理和供应链效率，因此高效解决这个问题对业务决策非常重要。
- en: In this section, we will see how quickly Fortran can solve the knapsack problem
    by pure brute-force compared to Python.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看到 Fortran 如何通过纯暴力破解方式快速解决胶囊问题，并与 Python 进行比较。
- en: 'Note: We will be focusing on the basic version, which is the [**0–1 knapsack
    problem**](https://www.javatpoint.com/0-1-knapsack-problem#:~:text=The%200%2F1%20knapsack%20problem%20means%20that%20the%20items%20are,pick%20the%202kg%20item%20completely.)
    where each item is either fully in the knapsack or not in at all.'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：我们将专注于基本版本，即[**0–1 胶囊问题**](https://www.javatpoint.com/0-1-knapsack-problem#:~:text=The%200%2F1%20knapsack%20problem%20means%20that%20the%20items%20are,pick%20the%202kg%20item%20completely.)，其中每个物品要么完全放入背包，要么完全不放入背包。
- en: Python
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python
- en: Let’s start with Python.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 Python 开始。
- en: The following code solves the knapsack problem for 22 items using a brute-force
    search. Each item is encoded as a 0 (not in) or 1 (in) in a 22-element length
    array (each element refers to an item). As each item has only 2 possible values,
    the number of total combinations is `2^(num_items)`. We utilise the `itertools.product`
    method that computes the [**cartesian product**](https://en.wikipedia.org/wiki/Cartesian_product)
    of all the possible solutions and then we iterate through them.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码使用暴力破解方法解决22个物品的胶囊问题。每个物品在一个22元素的数组中编码为0（不在）或1（在）（每个元素代表一个物品）。由于每个物品只有2种可能的值，总的组合数量是`2^(num_items)`。我们利用`itertools.product`方法计算所有可能解决方案的[**笛卡尔积**](https://en.wikipedia.org/wiki/Cartesian_product)，然后进行迭代。
- en: GitHub Gist by author.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的 GitHub Gist。
- en: 'The output of this code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的输出：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Fortran
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fortran
- en: Now, let’s solve the same problem, with the same exact variables, but in Fortran.
    Unlike Python, Fortran does not contain a package for performing permutations
    and combinations operations.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们用相同的变量来解决相同的问题，但用 Fortran 来实现。与 Python 不同，Fortran 没有执行排列和组合操作的包。
- en: Our approach is to use the [**modulo**](https://en.wikipedia.org/wiki/Modulo)
    operator to convert the iteration number into a binary representation. For example,
    if the iteration number is 6, the modulo of 6 by 2 is 0, which means the first
    item is not selected. We then divide the iteration number by 2 to shift the bits
    to the right and take the modulo again to get the binary representation for the
    next item. This is repeated for every item (so 22 times) and eventually leads
    us to getting every possible combination.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的方法是使用[**模运算**](https://en.wikipedia.org/wiki/Modulo)运算符将迭代次数转换为二进制表示。例如，如果迭代次数是
    6，那么 6 除以 2 的模是 0，这意味着第一个项目未被选择。然后我们将迭代次数除以 2 以将位向右移动，再次取模以获取下一个项目的二进制表示。这个过程对每个项目（即
    22 次）重复，最终得到每一个可能的组合。
- en: GitHub Gist by author.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的 GitHub Gist。
- en: Compile and execute using the [linux](https://linuxize.com/post/linux-time-command/)
    `[time](https://linuxize.com/post/linux-time-command/)` [command:](https://linuxize.com/post/linux-time-command/)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [linux](https://linuxize.com/post/linux-time-command/) `[time](https://linuxize.com/post/linux-time-command/)`
    [命令：](https://linuxize.com/post/linux-time-command/)
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Output:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The Fortran code is ~21 times quicker!
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Fortran 代码速度约为 Python 的 21 倍！
- en: Comparison
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较
- en: 'To get a more visual comparison, we can plot the execution time as a function
    of the number of items:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得更直观的比较，我们可以将执行时间绘制为项目数量的函数：
- en: '![](../Images/1f211c47872084d56db36a4e2468180f.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1f211c47872084d56db36a4e2468180f.png)'
- en: Plot generated by author in Python.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由作者在 Python 中生成的图表。
- en: Fortran blows Python out of the water!
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Fortran 的性能超越了 Python！
- en: Even though thte compute time for Fortran does increase, its growth is not nearly
    as large as it is for Python. This truly displays the computational power of Fortran
    when it comes to solving optimisation problems, which are of critical importance
    in many areas of Data Science.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Fortran 的计算时间会增加，但增长幅度远远小于 Python。这确实展示了 Fortran 在解决优化问题时的计算能力，而优化问题在许多数据科学领域至关重要。
- en: Summary & Further Thoughts
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结与进一步思考
- en: Although Python has been the go-to for Data Science, languages like Fortran
    can still provide significant value especially when dealing with optimisation
    problems due to its inherent number-crunching abilities. It outperforms Python
    in solving the knapsack problem by brute-force, and the performance gap widens
    further as more items are added to the problem. Therefore, as a Data Scientist,
    you might want to consider investing your time in Fortran if you need an edge
    in computational power to solve your business and industry problems.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Python 一直是数据科学的首选，但像 Fortran 这样的语言仍然能提供显著的价值，特别是在处理优化问题时，因其固有的数值计算能力。它在解决背包问题的暴力破解中优于
    Python，随着问题中项目的增加，性能差距进一步扩大。因此，作为数据科学家，如果你需要在计算能力上获得优势以解决业务和行业问题，你可能需要考虑将时间投入到
    Fortran 中。
- en: 'The full code used in this article can be found at my GitHub here:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中使用的完整代码可以在我的 GitHub 上找到：
- en: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/knapsack?source=post_page-----5511e05ef89--------------------------------)
    [## Medium-Articles/Optimisation/knapsack at main · egorhowell/Medium-Articles'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/knapsack?source=post_page-----5511e05ef89--------------------------------)
    [## Medium-Articles/Optimisation/knapsack 在主分支 · egorhowell/Medium-Articles'
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你此时无法执行该操作。你在另一个标签页或窗口中登录。你在另一个标签页或窗口中注销…
- en: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/knapsack?source=post_page-----5511e05ef89--------------------------------)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/knapsack?source=post_page-----5511e05ef89--------------------------------)
- en: Another Thing!
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另一个事项！
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个免费的通讯，[**Dishing the Data**](https://dishingthedata.substack.com/)，我在其中分享每周成为更好数据科学家的技巧。
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----5511e05ef89--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://newsletter.egorhowell.com/?source=post_page-----5511e05ef89--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何成为更好的数据科学家。点击阅读《Dishing The Data》，作者**Egor Howell**，Substack 发表的…
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----5511e05ef89--------------------------------)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----5511e05ef89--------------------------------)'
- en: Connect With Me!
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与我联系！
- en: '[**YouTube**](https://www.youtube.com/@egorhowell?sub_confirmation=1)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**YouTube**](https://www.youtube.com/@egorhowell?sub_confirmation=1)'
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**Twitter**](https://twitter.com/EgorHowell)'
- en: '[**GitHub**](https://github.com/egorhowell)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**GitHub**](https://github.com/egorhowell)'
- en: References & Further Reading
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料及进一步阅读
- en: '[*Algorithms for Optimization*](https://mitpress.mit.edu/9780262039420/algorithms-for-optimization/)*.*
    [Mykel J. Kochenderfer](https://mitpress.mit.edu/author/mykel-j-kochenderfer-18773)
    and [Tim A. Wheeler](https://mitpress.mit.edu/author/tim-a-wheeler-28144). ***2019***.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*优化算法*](https://mitpress.mit.edu/9780262039420/algorithms-for-optimization/)*.*
    [Mykel J. Kochenderfer](https://mitpress.mit.edu/author/mykel-j-kochenderfer-18773)
    和 [Tim A. Wheeler](https://mitpress.mit.edu/author/tim-a-wheeler-28144)。***2019***。'
- en: '*Fortran website*: [https://fortran-lang.org/en/](https://fortran-lang.org/en/)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Fortran网站*: [https://fortran-lang.org/en/](https://fortran-lang.org/en/)'
