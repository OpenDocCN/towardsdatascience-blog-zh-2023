- en: Making Your Data Analytics Come to Life using ipywidgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/making-your-data-analytics-come-to-life-using-ipywidgets-cfa9538279f7](https://towardsdatascience.com/making-your-data-analytics-come-to-life-using-ipywidgets-cfa9538279f7)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn how to use widgets to dynamically update your data analytics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/?source=post_page-----cfa9538279f7--------------------------------)[![Wei-Meng
    Lee](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----cfa9538279f7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cfa9538279f7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cfa9538279f7--------------------------------)
    [Wei-Meng Lee](https://weimenglee.medium.com/?source=post_page-----cfa9538279f7--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cfa9538279f7--------------------------------)
    ·8 min read·Feb 21, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1b6b04b8bf8137635d612dde9f00c378.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [John Schnobrich](https://unsplash.com/@johnschno?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: For my daily data analytics tasks, my favorite development environment is definitely
    Jupyter Notebook. Jupyter Notebook allows me to quickly modify my code and re-run
    the cell(s) to see the updates. However, this feature is not friendly to users
    who are using my Jupyter Notebook to view the results of my data analytics. It
    would be really useful if there is a way for users to interact with my program
    without the need to modify the code. This is where the **ipywidgets** package
    comes in.
  prefs: []
  type: TYPE_NORMAL
- en: '**ipywidgets** is a package that contains interactive HTML widgets for Jupyter
    Notebook. Using the widgets in ipywidgets, your Jupyter notebooks will come alive
    and users can directly control their data and visualize the changes in their data.
    In this article, I will walk you through the process of using ipywidgets together
    with your dataset.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing ipywidgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In your Jupyter notebook, install the **ipywidgets** and **widgetsnbextension**
    packages as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, enable the **widgetsnbextension** as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Using the `interact` function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our examples, I am going to use the **insurance** dataset located at [https://www.kaggle.com/datasets/teertha/ushealthinsurancedataset?resource=download.](https://www.kaggle.com/datasets/teertha/ushealthinsurancedataset?resource=download.)
  prefs: []
  type: TYPE_NORMAL
- en: '***License****:* [*CC0: Public Domain*](https://creativecommons.org/publicdomain/zero/1.0/)*.*
    ***Description*** *— This dataset contains 1338 rows of insured data, where the
    Insurance charges are given against the following attributes of the insured: Age,
    Sex, BMI, Number of Children, Smoker and Region. The attributes are a mix of numeric
    and categorical variables.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s first load the CSV file into a Pandas DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6ed62f90c5b944154f7e5b7179f52b43.png)'
  prefs: []
  type: TYPE_IMG
- en: All images by author
  prefs: []
  type: TYPE_NORMAL
- en: Slider widgets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s say I want to retrieve all the rows containing 3 children. I could do
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fd4e271cee5bf51d061586cb3201e324.png)'
  prefs: []
  type: TYPE_IMG
- en: If I want to retrieve rows with 4 children then I have to modify my statement
    and rerun the cell. Obviously, this is not very productive.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where the `interact` function from the `ipywidgets` package comes in
    really handy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the above code snippet, I defined a function named `f` that takes in one
    argument — `children`. The function will query the dataframe and display the result.
    The next statement is where the magic happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `interact()` function (`ipywidgets.interact`) automatically creates user
    interface (UI) controls (known as *widgets*) and binds them to your specified
    function. The above statement will generate the following output containing an
    **IntSlider** widget as well as the dataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/281d1190a2bfb14f792b6524542d7f46.png)'
  prefs: []
  type: TYPE_IMG
- en: The value that you pass into the `children` parameter will determine what kind
    of UI control is generated. Here, you are passing in an integer and so a slider
    control is generated. If you pass in `n`, it generates an integer-valued slider
    control with a range of [-n,+3*n].
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Go ahead and drag the slider. As you drag, the dataframe will dynamically update.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do the same for the **age** field, but this time we want to set the
    range of age selectable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/41594c7c4adc50b61d3afca42b909748.png)'
  prefs: []
  type: TYPE_IMG
- en: The minimum age is 18 and maximum is 64\. The current slider value will be displayed
    in the middle position — 41 (which is (18+64)/2).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you pass in a floating-point number, such as BMI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then a **FloatSlider** widget will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0f647129bb5b0b7ab91319de009d56cf.png)'
  prefs: []
  type: TYPE_IMG
- en: DropDown widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What about selecting the region? We can pass in the region as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now select one of the four regions using the DropDown control:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/84dc15eab50d170a197826580727d9d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'What if I want to select *all* regions? For this, you need to get creative.
    First, I will create a list of tuples containing the four regions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The above code snippet generates the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The first element in each tuple is what is shown to the user. The second element
    is the value of the selected item.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Then, append a tuple — `(‘All Regions’,’@*’)`, to the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `regions` variable now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now pass the `regions` variable to the `interact()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that I have to change my query statement to use the `contains()` function.
    You can now select the **All Regions** item to select rows from all regions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7060047fa8421333a175ac8c5b904d56.png)'
  prefs: []
  type: TYPE_IMG
- en: CheckBox widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you pass in a boolean value to the `interact()` function, it will display
    a `CheckBox` widget. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The above code snippet displays a checkbox. Uncheck it and all non-smokers
    will be shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e1f33d0627f4c3d1081150b0e698e5bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Text widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Suppose you want the user to type in the region instead of selecting from a
    DropDown control. Easy, simply pass a string to the `interact()` function, like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You will now see a text box where you can type in the region:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/87a884928fdd84cef7c8c52e2ce1407e.png)'
  prefs: []
  type: TYPE_IMG
- en: There is one issue. Observe that as you type, the dataframe is automatically
    updated. This feature is known as **continuous update**. For large dataframe this
    will pose a problem as everytime you change the content of the text box it will
    re-query the dataframe, which can be time consuming.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can disable continuous update by explicitly specifying the `Text` widget
    (control) and then setting the `continuous_update` parameter to `False`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The dataframe will now update after you have typed in your query and press
    the Return/Enter key:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9d43568b5eb9c381dc91b1518e9a14b4.png)'
  prefs: []
  type: TYPE_IMG
- en: RadioButtons widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Radio buttons are another way for users to select from a predetermined list
    of possible values. For our dataset, you can use it to let users select between
    smokers and non-smokers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: For radio buttons, you need to manually specify the `widgets.RadioButtons()`
    class.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The above code snippet shows the set of radio buttons to select smokers and
    non-smokers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cbfb73b49e128505a5d79b19a10b46cd.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the Interactive Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up till this point, so far so good. You had the ability to create and use individual
    widgets to filter different fields in the dataframe. But what if you want to combine
    them all into one big filter? This is where the `interactive()` function comes
    in.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `interactive()` function is similar to the `interact()` function, but it
    allows you to pass in multiple values to create multiple widgets. The following
    `f()` function takes in six arguments, which are passed in through the `interactive()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Where the code snippet is run, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/087d85440f2f23eb7ca57ad49a3b966f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you interact with the widgets, the dataframe is automatically updated. If
    you have a large dataframe, you may find that updating the dataframe every time
    a value in the control is changed is messy (your screen will refresh for all these
    little changes), and so it might be better to avoid refreshing the dataframe until
    the user wants to see the updated dataframe. To do so, insert a second argument
    (`{‘manual’: True}`) to the `interactive()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: There will now be a button labelled **Run Interact**. You can change the values
    in the widgets and when you are ready to see the changes, click the **Run Interact**
    button and the dataframe will be updated.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2c39c5b816e1f6320c78320d7ebad66f.png)'
  prefs: []
  type: TYPE_IMG
- en: '**If you like reading my articles and that it helped your career/study, please
    consider signing up as a Medium member. It is $5 a month, and it gives you unlimited
    access to all the articles (including mine) on Medium. If you sign up using the
    following link, I will earn a small commission (at no additional cost to you).
    Your support means that I will be able to devote more time on writing articles
    like this.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/membership?source=post_page-----cfa9538279f7--------------------------------)
    [## Join Medium with my referral link - Wei-Meng Lee'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Wei-Meng Lee (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----cfa9538279f7--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This article briefly touched on using the `interact()` and `interactive()`
    functions to generate widgets to bind to functions. Here is a quick summary of
    the type of widgets created based on the datatype you supplied:'
  prefs: []
  type: TYPE_NORMAL
- en: '**IntSlider** or **FloatSlider** — when you pass in an numeric value, or a
    tuple of two numeric values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DropDown** — when you pass in a list of values (or a list of tuples)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text** — when you pass in a string value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CheckBox** — when you pass in a boolean value (`True` or `False`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are other types of widgets that require you to manually specify in the
    `interact()` and `interactive()` functions, such as **RadioButtons** and many
    others. In my next article, I will talk more about the other widgets that I did
    not have the chance to discuss in this article. Till then, have fun!
  prefs: []
  type: TYPE_NORMAL
