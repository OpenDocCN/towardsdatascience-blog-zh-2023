- en: 'Clearing the Confusion Once And For All: args, kwargs, And Asterisks in Python'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/clearing-the-confusion-once-and-for-all-args-kwargs-and-asterisks-in-python-a905c36467a2](https://towardsdatascience.com/clearing-the-confusion-once-and-for-all-args-kwargs-and-asterisks-in-python-a905c36467a2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: and living happily ever after
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/?source=post_page-----a905c36467a2--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----a905c36467a2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a905c36467a2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a905c36467a2--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----a905c36467a2--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a905c36467a2--------------------------------)
    ·9 min read·May 30, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49a1db551c8f925a358bd20c9e9f7d04.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me with Midjourney
  prefs: []
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’ve always felt annoyed when I saw someone using `*args`, `**kwargs` in functions
    or the asterisk operator for any other purpose than multiplication. I mean, couldn't
    they stop being arrogant for just a second and use something readable to everyone
    else?
  prefs: []
  type: TYPE_NORMAL
- en: But after learning what they were, I realized that the use of `*args`, `**kwargs`
    and the prefix asterisk comes from a desire for flexibility and elegance. Even
    though it may feel like a slap in [the Zen of Python](https://peps.python.org/pep-0020/)'s
    face, which says "Readability counts", they are powerful tools for beautiful code.
  prefs: []
  type: TYPE_NORMAL
- en: So, in this article, I intend to clear any and all confusion surrounding these
    cryptic keywords and starry expressions and show you almost all the scenarios
    you can use them.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Unpacking iterables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the asterisk is used between two variables or Python objects, it is usually
    for multiplication or exponentiation. But, when used *before* variables or iterable
    objects, it turns into a totally different beast.
  prefs: []
  type: TYPE_NORMAL
- en: An iterable is a Python object that you can iterate over, such as a string,
    tuple, list, dictionary, set, etc.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: By putting an asterisk in front of any iterable or a variable holding an iterable,
    you can break apart (unpack) all its elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exhibit A:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice how printing an unpacked iterable isn’t the same as printing it on its
    own:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The difference is that in the first `print` call, we passed all the elements
    of a list to `print` as *individual arguments* (25 in fact). In the second one,
    we are passing the list as a whole - as a single argument to `print`.
  prefs: []
  type: TYPE_NORMAL
- en: So, scenario zero — use iterable unpacking to pass all elements of an iterable
    as *individual arguments* to some function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exhibit B with strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'With loops, it would have went like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We will see more variants of this scenario later.
  prefs: []
  type: TYPE_NORMAL
- en: Dictionary unpacking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Scenario one — use the double asterisk `**` operator to unpack dictionaries
    (only dictionaries).
  prefs: []
  type: TYPE_NORMAL
- en: This scenario has many variants, too. One of them is passing dictionary items
    as keyword arguments into functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the following `author` dictionary which contains the
    exact same keys as the arguments of the `pretty_print` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To pass the contents of `author` into `pretty_print`, we would have to write
    this ugly piece of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'But we don’t have to; we can just use double asterisks to unpack the items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: These two scenarios are enough to understand `args` and `kwargs`.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s move on.
  prefs: []
  type: TYPE_NORMAL
- en: Positional vs. keyword arguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One last thing before that — let’s quickly recap the differences between positional
    and keyword arguments in Python functions so there won’t be any confusion or name-calling
    later.
  prefs: []
  type: TYPE_NORMAL
- en: 'One sentence summary of the differences: positional arguments love **order**
    while keyword arguments love **explicitness**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at a function with four arguments for further differences:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Positional arguments**:'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t have a default value like `price` and `quantity`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can’t be skipped. You should always provide values to them when calling functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Require order. You can’t switch two positionals if you want to make sense or
    avoid nasty errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don’t care about names. They care about the position.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep function definitions short and sweet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can be hard to understand, especially when dealing with functions with many
    arguments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the other hand, **keyword arguments**:'
  prefs: []
  type: TYPE_NORMAL
- en: Always have a default value, which means you can skip them when calling functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don’t care about the order. You can pick and choose any of them at any time,
    irrespective of the order they were defined in the function signature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Offer precision and clarity. They let you explicitly specify which argument
    corresponds to which parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enhance function documentation. They serve as mini-labels of what they do.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See [this discussion](https://stackoverflow.com/questions/9450656/positional-argument-vs-keyword-argument)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Unknown number of positional arguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is a common case of Python functions that don’t know how many positional
    arguments they require. For example, consider this one that calculates the geometric
    average of three numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: What happens if you want to generalize to four numbers? Or five? Or six? You
    know where I am going with this…
  prefs: []
  type: TYPE_NORMAL
- en: We want the function to calculate the geometric average of as many numbers as
    we want.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, here is the second scenario of the asterisk operator: defining functions
    that accept an **undefined number** of positional arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You enter the second scenario by putting `*args` into a function definition,
    allowing you to pass however many values without raising any errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: But what does `*args` actually mean?
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the hood, when we passed the six numbers separated by commas to `geometric_average`,
    `*args` collected them into a tuple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: So, in this scenario, we are performing packing, rather than *unpacking*.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'OK, since `args` is now a regular tuple, we can iterate over its elements and
    finish the rest of the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the keyword `args` is only a convention. In fact, you can change it to
    a more readable word like `numbers`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Unknown number of keyword arguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next (third) scenario is when a function can accept an arbitrary number
    of keyword arguments. And you guessed it, this is where `**kwargs` come in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '`pickle_model` saves machine learning models to disk in pickle format. It has
    two required positional arguments for the model object itself and the path to
    save it.'
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, the user can pass whatever additional information about the model
    like hyperparameter values, the version number, model author, etc. as keyword
    arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: and there wouldn’t be any errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like `args`, `kwargs` is a name you can change to just about anything else:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'But unlike `args`, `kwargs` is a dictionary. This means you can access its
    contents either through a look-up (this can lead to errors) or iterating with
    `.items()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The order of everything
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a few rules you must follow when mixing arguments in both function
    signatures and calls:'
  prefs: []
  type: TYPE_NORMAL
- en: Positional arguments always come first.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Positional arguments can’t be skipped (already said that).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`*args` and `**kwargs` can be skipped entirely when calling functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In that case, `args` will be an empty list and `kwargs` will be an empty dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. All types of arguments can be stand-alone, meaning you don’t have to have
    a mix of arguments for a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '4\. You can’t pass positional arguments after keyword arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 5\. `*args` must always come *after* positional arguments and *before* keyword
    arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. `**kwargs` should always be the last.
  prefs: []
  type: TYPE_NORMAL
- en: The grand scenario
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Even though not very grand, it is a handy trick introduced in latest versions
    of Python. Consider this function signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Right in the middle of everything, we see an asterisk standing on its own, not
    attached to anything. What does it mean?
  prefs: []
  type: TYPE_NORMAL
- en: 'This **asterisk-on-its-own** syntax forces you to use keyword arguments *explicitly*
    all the time. For example, let’s define `weird` without the asterisk and call
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: No errors. For `default`, we passed 3 but didn't write `default=3` to make the
    call shorter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s try the same with asterisk present:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We get a `TypeError`! It is telling us that we passed one too many positional
    arguments. In other words, we must use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Now, it is error-free again. This syntax was introduced to make function calls
    more readable, especially for functions and classes that accept many arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sklearn widely adopted this feature in its recent versions. For example, here
    is the docs for `RandomForestRegressor`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/44ed9a8881e2a8a4aaed7ac02c5319a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me
  prefs: []
  type: TYPE_NORMAL
- en: 'In the past, certain pros who swallowed the docs would just write code like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'And a beginner would be left baffled upon reading it. But with the addition
    of the asterisk, all keyword arguments after `n_estimators` must be explicitly
    specifed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Various tricks with unpacking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Asterisk unpacking can be used in many ways other than functions signatures
    and calls. In this section, I will list a few of them without going too much into
    the details.
  prefs: []
  type: TYPE_NORMAL
- en: '0\. Merging two iterables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Extending iterables
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Formatting strings with dictionary items
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Unpacking into variables
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Discarding values
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 5\. Unpacking nested lists
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 6\. Transposing a list of lists (a matrix)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: I’d like you to pause and ponder why each of these examples work without errors,
    especially the ones that don’t even involve the asterisk operator like the fifth
    one.
  prefs: []
  type: TYPE_NORMAL
- en: Do you know any other trick yourself? Don’t be shy — share it in the comments.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The quirkiness of Python knows no bounds and the use of asterisks along with
    `args` and `kwargs` is certainly an example of this.
  prefs: []
  type: TYPE_NORMAL
- en: The key is to embrace this quirkiness and move past the initial discomfort for
    they can be great tools in making your code more elegant, readable and of course,
    a bit weird.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading!
  prefs: []
  type: TYPE_NORMAL
- en: Loved this article and, let’s face it, its bizarre writing style? Imagine having
    access to dozens more just like it, all written by a brilliant, charming, witty
    author (that’s me, by the way :).
  prefs: []
  type: TYPE_NORMAL
- en: For only 4.99$ membership, you will get access to not just my stories, but a
    treasure trove of knowledge from the best and brightest minds on Medium. And if
    you use [my referral link](https://ibexorigin.medium.com/membership), you will
    earn my supernova of gratitude and a virtual high-five for supporting my work.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----a905c36467a2--------------------------------)
    [## Join Medium with my referral link - Bex T.'
  prefs: []
  type: TYPE_NORMAL
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----a905c36467a2--------------------------------)
    ![](../Images/a01b5e4fb641db5f35b8172a4388e821.png)
  prefs: []
  type: TYPE_NORMAL
- en: Image by me with Midjourney
  prefs: []
  type: TYPE_NORMAL
- en: 'References:'
  prefs: []
  type: TYPE_NORMAL
- en: '[1] RealPython, [Python args and kwargs: Demystified](https://realpython.com/python-kwargs-and-args/),
    2019, realpython.com'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] Trey Hunner, [Asterisks in Python: what they are and how to use them](https://treyhunner.com/2018/10/asterisks-in-python-what-they-are-and-how-to-use-them/),
    2018, treyhunner.com'
  prefs: []
  type: TYPE_NORMAL
