- en: Using ChatGPT to Translate R Code to Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/using-chatgpt-to-translate-r-code-to-python-effed461037e](https://towardsdatascience.com/using-chatgpt-to-translate-r-code-to-python-effed461037e)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first step into translating your code base.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://sonery.medium.com/?source=post_page-----effed461037e--------------------------------)[![Soner
    Yıldırım](../Images/c589572e9d1ee176cd4f5a0008173f1b.png)](https://sonery.medium.com/?source=post_page-----effed461037e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----effed461037e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----effed461037e--------------------------------)
    [Soner Yıldırım](https://sonery.medium.com/?source=post_page-----effed461037e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----effed461037e--------------------------------)
    ·5 min read·May 28, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f10a1093a3499cfca40962d2a5e8ca10.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Katka Pavlickova](https://unsplash.com/@katerinapavlickova?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/s/photos/two?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Python and R are the two key players in the data science ecosystem. I have worked
    on projects written in both Python and R. They do a fine job at efficiently handling
    data cleaning, manipulation, and analysis tasks.
  prefs: []
  type: TYPE_NORMAL
- en: However, we sometimes want to translate a code base from R to Python, or vice
    versa. The motivation could be the skillset within the company. If you have many
    Python developers and few R developers, you may want to maintain the projects
    in Python.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, specific project requirements may encourage you to translate
    a code base. For instance, while Python is renowned for its versatility, encompassing
    areas like web development, software development, and machine learning, R excels
    in statistical analysis and visualizations. Therefore, if the project involves
    heavy statistical analysis or the creation of intricate graphical representations,
    it may be beneficial to translate the Python code to R.
  prefs: []
  type: TYPE_NORMAL
- en: The translation process usually requires people with skills in both programming
    languages, which can be difficult to find. The good news is we can use ChatGPT,
    which possesses a decent level of skills in almost all programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will be prompting ChatGPT for translating code written in
    R using the “data.table” package to Python using the “pandas” library.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will just give the code without telling what it does or is supposed to do.
    Let’s start with the initial prompt to define the role of ChatGPT and tell our
    expectations:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Initial prompt: You are a software engineer with several years of experience
    in Python and R. Your task is to convert R code to Python. The R code does data
    cleaning and manipulation using the data.table package. You will convert it to
    Python code using the Pandas library.*'
  prefs: []
  type: TYPE_NORMAL
- en: The first example is a line of code that creates a new column in a data table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: melb[, Price_per_area := Price / Landsize]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the answer of ChatGPT:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2f2f194cd10175f52d8d817cd85c6728.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: It not only gives the code but also explains what the code does. This is quite
    useful for someone who does not have an expertise in the source or target language.
  prefs: []
  type: TYPE_NORMAL
- en: The second example creates a subset of the data table by filtering on the price
    and type columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: subset <- melb[Price > 1000000 & Type == "h"]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'ChatGPT:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e7b6a9da4286c05ec418ec5118741bad.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Let’s do a slightly more complicated example. The line of code in the following
    prompt calculates the average house price in different regions for houses with
    type “u”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: melb[Type == "u", .(avg_price = mean(Price)), by="Regionname"]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'ChatGPT:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b090bee13064d6733510729d114d66fd.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'The code in the screenshot above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'It successfully completes the task but I would prefer using named aggregations,
    which I think is more readable and shorter. Let’s ask ChatGPT to use it as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: melb[Type == "u", .(avg_price = mean(Price)), by="Regionname"]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'ChatGPT:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2c4791bc854f2117169838d40c03c327.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'The code in the screenshot above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This is better as it does not require renaming the columns afterwards. We could
    also use the `as_index` parameter of the `groupby` function and set its value
    to False so that we don’t have to reset the index after the calculation.
  prefs: []
  type: TYPE_NORMAL
- en: The R code in the next prompt calculates the average house price and the total
    number of houses in each region and sorts the results in descending order.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: melb[
  prefs: []
  type: TYPE_NORMAL
- en: Type == "u",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .(avg_price = mean(Price), number_of_houses=.N),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: by="Regionname"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '][order(-avg_price)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'ChatGPT:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/478b67c428e96221822961988a16c8ba.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: As with the previous examples, the step-by-step explanation is quite useful
    for understanding and debugging the code.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s do a final example on changing column names. The R code in the following
    prompt renames the type and distance columns as “HouseType” and “DistanceCBD”,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: setnames(melb,
  prefs: []
  type: TYPE_NORMAL
- en: c("Type", "Distance"),
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: c("HouseType", "DistanceCBD"))
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'ChatCPT:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ada16c2db121bd4e9a75d97dd8cc94b0.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'The code in the screenshot above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: I liked the note about the `inplace` parameter, which can easily be oversighted.
  prefs: []
  type: TYPE_NORMAL
- en: Final words
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The examples in this article demonstrate how successful ChatGPT is at translating
    code from one programming language to another. We did a line-by-line translation,
    which cannot be considered as proof that ChatGPT is able to translate an entire
    code base.
  prefs: []
  type: TYPE_NORMAL
- en: However, it is clear that using ChatGPT for this task when working with a large
    code base can save you hours. You can always take a second look and test the output
    to make sure it works as expected.
  prefs: []
  type: TYPE_NORMAL
- en: '*You can become a* [*Medium member*](https://sonery.medium.com/membership)
    *to unlock full access to my writing, plus the rest of Medium. If you already
    are, don’t forget to* [*subscribe*](https://sonery.medium.com/subscribe) *if you’d
    like to get an email whenever I publish a new article.*'
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading. Please let me know if you have any feedback.
  prefs: []
  type: TYPE_NORMAL
