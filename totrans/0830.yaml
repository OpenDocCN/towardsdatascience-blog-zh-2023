- en: 'Euro Trip Optimization: Genetic Algorithms and Google Maps API Solve the Traveling
    Salesman Problem'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/euro-trip-optimization-genetic-algorithms-and-google-maps-python-api-solve-the-traveling-salesman-4ad8e1548207](https://towardsdatascience.com/euro-trip-optimization-genetic-algorithms-and-google-maps-python-api-solve-the-traveling-salesman-4ad8e1548207)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Navigate the charm of Europe’s 50 most visited cities using genetic algorithms
    and Google Maps API, unlocking efficient travel routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@riccardo.andreoni?source=post_page-----4ad8e1548207--------------------------------)[![Riccardo
    Andreoni](../Images/5e22581e419639b373019a809d6e65c1.png)](https://medium.com/@riccardo.andreoni?source=post_page-----4ad8e1548207--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4ad8e1548207--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4ad8e1548207--------------------------------)
    [Riccardo Andreoni](https://medium.com/@riccardo.andreoni?source=post_page-----4ad8e1548207--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4ad8e1548207--------------------------------)
    ·8 min read·Sep 2, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/524c212758ae8a7ad835ce4182185b99.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [unsplash.com](https://unsplash.com/photos/A5rCN8626Ck)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that feeling after watching movies like [EuroTrip](https://www.imdb.com/title/tt0356150/),
    where the characters whisk through picturesque European cities on an adventure
    of a lifetime? It’s captivating. Yet, reality promptly reminds us: that orchestrating
    a journey across numerous destinations is no simple task. But here’s the exciting
    twist — armed with programming expertise and a grasp of genetic algorithms, I
    embarked on developing a solution. Imagine being able to optimize complex routes
    spanning dozens of locations with precision. This is where the world of data science
    intersects with the art of adventure planning. In this article, I unveil an algorithmic
    script that elegantly tackles the intricate [Traveling Salesman Problem](https://en.wikipedia.org/wiki/Travelling_salesman_problem)
    (TSP), promising to aid travel planning and enhance our understanding of optimization
    in data science.'
  prefs: []
  type: TYPE_NORMAL
- en: Reading this article will provide you with a clear understanding of how the
    synergy between Python, Google Maps API, and genetic algorithms unlock data-driven
    solutions for non-trivial tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Traveling Salesman Problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Setting out on a journey often ignites a sense of adventure, but as we contemplate
    the intricacies of travel, the excitement can be accompanied by logistical challenges.
    One such challenge that has captured the attention of mathematicians, computer
    scientists, and logistics experts for decades is the Traveling Salesman Problem
    (TSP). At its core, the TSP poses a seemingly straightforward question: Given
    a list of cities and the distances between them, what is the shortest possible
    route that allows a salesman to visit each city exactly once and return to the
    starting point? While the problem’s statement is concise, its implications extend
    far beyond its surface simplicity.'
  prefs: []
  type: TYPE_NORMAL
- en: In the world of optimization and logistics, the TSP is more than a theoretical
    curiosity; it holds immense practical significance. Consider delivery services,
    where minimizing travel distances translates directly to reduced fuel costs and
    faster service.
  prefs: []
  type: TYPE_NORMAL
- en: Underneath this seemingly straightforward problem statement resides a profound
    level of complexity. The TSP’s combinatorial nature arises from the exponential
    growth in potential solutions as the number of cities increases. The quantity
    of possible routes swiftly skyrockets beyond any computing feasibility, rendering
    traditional brute-force methods impractical for larger instances. The number of
    possible routes is equal to
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a91cf48d46712ea2e7571b5e54ac6878.png)'
  prefs: []
  type: TYPE_IMG
- en: where n represents the number of cities — a [factorial explosion](https://web.mit.edu/urban_or_book/www/book/chapter6/6.4.5.html#:~:text=different%20orderings%20of%20the%20points,about%201.2%20x%201018.)
    that quickly becomes overwhelming. With just 50 cities, the number of possible
    routes equals 3*10⁶², which is just about the [number of atoms in the Milky Way](https://educationblog.oup.com/secondary/maths/numbers-of-atoms-in-the-universe#:~:text=Our%20galaxy%2C%20the%20Milky%20Way,2.4%20%C3%97%201067%20atoms.).
  prefs: []
  type: TYPE_NORMAL
- en: The TSP stands as a quintessential example of the intriguing intersection between
    mathematics, computer science, and real-world logistical challenges. As the city
    count escalates, unveiling the shortest path demands innovative strategies that
    transcend conventional computational approaches.
  prefs: []
  type: TYPE_NORMAL
- en: The quest for efficient solutions to the TSP has driven researchers to explore
    a variety of methodologies. Among them are genetic algorithms, a class of optimization
    techniques inspired by the process of natural selection. Genetic algorithms excel
    at navigating complex solution spaces, making them a natural fit for tackling
    problems like the TSP, where brute-force methods quickly become infeasible as
    the number of cities grows.
  prefs: []
  type: TYPE_NORMAL
- en: 'The purpose of this article is to navigate the union of these two domains —
    the Traveling Salesman Problem and genetic algorithms. Specifically, we dive into
    a practical application: a Python script designed to exploit the power of genetic
    algorithms for solving the TSP. Our exploration will highlight how this algorithmic
    fusion has the potential to improve travel planning, logistics, and optimization
    challenges across industries. As we understand the inner workings of our genetic
    algorithm-based solution, the world of data science and algorithmic innovation
    will converge, promising new insights and efficient pathways through even the
    most labyrinthine of routes.'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Genetic Algorithms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At its core, a genetic algorithm (GA) is a heuristic search technique inspired
    by the elegant process of natural selection and evolution.
  prefs: []
  type: TYPE_NORMAL
- en: The inspiration behind genetic algorithms harks back to Charles Darwin’s theory
    of evolution. GAs mimic the process of natural selection by iteratively evolving
    a population of potential solutions. In this digital melting pot, solutions that
    exhibit favorable traits survive and procreate, passing on their “genes” to the
    next generation. This generational evolution continues until an optimal or near-optimal
    solution is achieved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Genetic algorithms are characterized by four fundamental components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Selection**: Just as in nature, selection mechanisms identify and favor solutions
    with higher fitness, mirroring the concept of “survival of the fittest.”'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Crossover**: Solutions, or “chromosomes,” exchange genetic material to create
    offspring with a blend of their parent’s traits.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Mutation**: To introduce diversity and prevent premature convergence to suboptimal
    solutions, genetic algorithms incorporate a mutation operator. This operation
    randomly alters certain elements of a solution, similar to genetic mutations in
    nature.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Fitness Evaluation**: It is the determination of each solution’s fitness,
    which quantifies how well it performs the task at hand. The fitness function guides
    the selection process by assigning a higher probability of reproduction to superior
    solutions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Genetic algorithms exhibit remarkable versatility when it comes to tackling
    optimization problems. Their ability to explore solution spaces in a non-linear,
    multidimensional manner makes them well-suited for complex, real-world challenges.
    Whether it’s optimizing complex engineering designs, fine-tuning neural network
    parameters, or, as we’ll soon see, solving the TSP, genetic algorithms excel in
    scenarios where traditional algorithms fail.
  prefs: []
  type: TYPE_NORMAL
- en: Applying Genetic Algorithms to the Traveling Salesman Problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let’s delve into the application of Genetic Algorithms (GAs) to solve the
    Traveling Salesman Problem (TSP).
  prefs: []
  type: TYPE_NORMAL
- en: At its core, GAs approach the TSP by considering each potential route as an
    individual within a population. This population of routes evolves over generations,
    with each route representing a unique itinerary for the traveling salesman.
  prefs: []
  type: TYPE_NORMAL
- en: 'To facilitate this genetic evolution, we represent each route as a chromosome
    — a sequence of cities defining the order of visitation. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d9ddfd4f1bafe1299b98f4d2f9ba3418.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: The fundamental task is to discover the optimal chromosome, the sequence that
    minimizes the total travel distance. The fitness of each chromosome is quantified
    by evaluating the total distance it covers when visiting cities in the order specified.
    Lower distance equates to higher fitness, mirroring the goal of finding the shortest
    path.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let’s follow the step-by-step high-level implementation of the Python script
    designed to tackle the TSP. The complete code is available in my [GitHub repository](https://github.com/andreoniriccardo/TSP-genetic-algorithm).
  prefs: []
  type: TYPE_NORMAL
- en: Getting the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step consists of choosing the destinations. For this example, I chose
    to pick the 50 most visited cities in Europe. Once defined the destinations, I
    needed the travel distance and times between each couple of cities. For this kind
    of query, Google Maps API represents the state-of-the-art solution. After setting
    up an account [here](https://developers.google.com/maps/get-started/#create-project),
    you can request your personal API key, needed to authenticate you.
  prefs: []
  type: TYPE_NORMAL
- en: 'The requests to the Google Maps API are sent in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: Initialization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The process begins by generating an initial population of routes. These routes
    are typically created randomly or through a heuristic method.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fitness Evaluation and Selection**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In each step, after generating offspring and mutating some routes, the total
    distance is calculated for each route to evaluate their fitness. This step ensures
    that the algorithm maintains its focus on selecting the shortest paths.
  prefs: []
  type: TYPE_NORMAL
- en: In the spirit of natural selection, routes are chosen for reproduction based
    on their fitness. Routes with shorter total distances — those closer to the optimal
    solution — are more likely to be selected, allowing individuals with advantageous
    traits to be more likely to reproduce.
  prefs: []
  type: TYPE_NORMAL
- en: Crossover and Mutation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the particular features of this problem, the classical crossover operation
    is not performed. I opted for two kinds of mutation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Single-point mutations**: To maintain diversity and introduce novel solutions,
    the algorithm introduces small, random changes to selected routes. This emulates
    genetic mutations, introducing slight variations.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**“Crossover-mutations”**: Mutates a solution by slicing a random subset of
    its genome and appending it to another position. To recall biological terms, it
    is a sort of asexual reproduction.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Iteration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The steps above are repeated for a set number of generations, allowing the population
    to evolve over time. Each iteration brings the algorithm closer to an optimal
    or near-optimal solution.
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm continues iterating until a termination criterion is met. In this
    case, the termination criterion consists of the reaching of a predetermined number
    of generations.
  prefs: []
  type: TYPE_NORMAL
- en: Results and Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this exploration, I employed a GA with a population size of 200 individuals
    and ran it for 1000 generations to tackle the TSP with 50 cities. The journey
    from the initial generation to the final outcome reveals the remarkable efficiency
    of the GA-based approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the outset, in generation zero, the first solution emerged with a fitness
    of 70,755 kilometers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This initial solution, as expected, represented a random arrangement of cities,
    signifying the algorithm’s starting point. However, as the GA traversed through
    successive generations, we observed a remarkable transformation in the quality
    of solutions.
  prefs: []
  type: TYPE_NORMAL
- en: After 1000 generations, the GA found its routes. The endpoint was a solution
    with a fitness of 21,345 kilometers — a significant reduction in travel distance
    compared to the initial random solution. This remarkable improvement of nearly
    49,410 kilometers underscores the GA’s effectiveness in optimizing complex routes
    like the TSP.
  prefs: []
  type: TYPE_NORMAL
- en: I performed 4 trials changing the population size. The overall better results
    are obtained with the larger population, but the computation time was obviously
    longer. We can see how, for each trial, the fitness value rapidly decreases over
    the first iterations, and settles to a plateau value later. This is typical behavior
    of a converging algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/332ef3b0683153d05a13f33969da509c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: While the TSP remains an NP-hard problem, meaning that finding the absolute
    optimal solution can be computationally challenging for larger instances, the
    GA’s ability to approach near-optimal solutions proves invaluable in practical
    applications. This accomplishment opens doors to more efficient travel planning,
    streamlined logistics, and enhanced optimization across diverse industries. This
    experiment highlights the symbiotic relationship between data science and innovative
    algorithms. It underscores how evolutionary computation, inspired by nature’s
    selection mechanisms, can elegantly address intricate problems in the real world.
  prefs: []
  type: TYPE_NORMAL
- en: If you liked this story, consider following me to be notified of my upcoming
    projects and articles!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of my past projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/building-a-deep-neural-network-from-scratch-using-numpy-4f28a1df157a?source=post_page-----4ad8e1548207--------------------------------)
    [## Building a Deep Neural Network from Scratch using Numpy'
  prefs: []
  type: TYPE_NORMAL
- en: Modern Deep Learning libraries are powerful tools but they may lead practitioners
    to take for granted neural networks’…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/building-a-deep-neural-network-from-scratch-using-numpy-4f28a1df157a?source=post_page-----4ad8e1548207--------------------------------)
    [](/building-a-convolutional-neural-network-from-scratch-using-numpy-a22808a00a40?source=post_page-----4ad8e1548207--------------------------------)
    [## Building a Convolutional Neural Network from Scratch using Numpy
  prefs: []
  type: TYPE_NORMAL
- en: As Computer Vision applications are becoming omnipresent in our lives, understanding
    the functioning principles of…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/building-a-convolutional-neural-network-from-scratch-using-numpy-a22808a00a40?source=post_page-----4ad8e1548207--------------------------------)
    [](/choose-the-right-optimization-algorithm-for-your-neural-network-cb86c15d7328?source=post_page-----4ad8e1548207--------------------------------)
    [## Choose the Right Optimization Algorithm for your Neural Network
  prefs: []
  type: TYPE_NORMAL
- en: As the nature of neural networks’ developing process is iterative, we need to
    take advantage of each possible expedient…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/choose-the-right-optimization-algorithm-for-your-neural-network-cb86c15d7328?source=post_page-----4ad8e1548207--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1]: [Tri-Objective Optimal PMU Placement Including Accurate State Estimation:
    The Case of Distribution Systems](https://ieeexplore.ieee.org/document/9410219)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2]: [Analyzing the Performance of Mutation Operators to Solve the Travelling
    Salesman Problem](https://arxiv.org/abs/1203.3099)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3]: [Probabilistic model with evolutionary optimization for cognitive diagnosis](https://dl.acm.org/doi/10.1145/3583131.3590522)'
  prefs: []
  type: TYPE_NORMAL
- en: '[4]: [Simulated Binary Crossover for Continuous Search Space](https://content.wolfram.com/uploads/sites/13/2018/02/09-2-2.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[5]: [A new mutation operator for real coded genetic algorithms](https://www.researchgate.net/publication/223248251_A_new_mutation_operator_for_real_coded_genetic_algrithms)'
  prefs: []
  type: TYPE_NORMAL
- en: '[6]: [Computing the optimal road trip across the U.S.](https://randalolson.com/2015/03/08/computing-the-optimal-road-trip-across-the-u-s/)'
  prefs: []
  type: TYPE_NORMAL
