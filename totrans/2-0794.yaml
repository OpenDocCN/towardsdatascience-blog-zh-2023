- en: 'Electric Cars In the Netherlands: Exploratory Data Analysis with Python'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-d01477949984](https://towardsdatascience.com/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-d01477949984)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data analysis and visualization with Python, Pandas, and Bokeh
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://dmitryelj.medium.com/?source=post_page-----d01477949984--------------------------------)[![Dmitrii
    Eliuseev](../Images/7c48f0c016930ead59ddb785eaf3e0e6.png)](https://dmitryelj.medium.com/?source=post_page-----d01477949984--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d01477949984--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d01477949984--------------------------------)
    [Dmitrii Eliuseev](https://dmitryelj.medium.com/?source=post_page-----d01477949984--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d01477949984--------------------------------)
    ·16 min read·Feb 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d82a9da311e424b14898ce93dffcbc64.png)'
  prefs: []
  type: TYPE_IMG
- en: Smart EQ Car, Image Source [https://en.wikipedia.org/wiki/Smart_electric_drive](https://en.wikipedia.org/wiki/Smart_electric_drive)
  prefs: []
  type: TYPE_NORMAL
- en: 'When was the first electric car registered? (Spoiler: it was much earlier than
    most people may think.) Which cars are more expensive, the electric Porcshe or
    Jaguar? Exploratory data analysis (EDA) is not only an important part of building
    every data pipeline, but it is also a pretty interesting process. In this article,
    I will use the Dutch RDW (Netherlands Vehicle Authority) public dataset to find
    information about electric cars. We will see which data can be extracted and displayed
    with Python, Pandas, and Bokeh.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Loading the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **RDW** (“Rijks Dienst Wegverkeer”, [https://www.rdw.nl](https://www.rdw.nl/))
    is a Dutch organization that handles approvals and registration of motorized vehicles
    and driving licenses in the Netherlands. As a public governmental institution,
    it has its data available to everyone. Most interesting for us is the “Gekentekende
    voertuigen” (“Vehicles with license plates”) dataset. It is available for free
    under a Public Domain license and can be downloaded from [opendata.rdw.nl](https://opendata.rdw.nl/Voertuigen/Open-Data-RDW-Gekentekende_voertuigen/m9d7-ebf2).
    The file size is about 10 GB; it contains information about all vehicles, registered
    in the Netherlands since 1952\. Processing a file of such a size can also be a
    challenge — which makes the task more interesting.
  prefs: []
  type: TYPE_NORMAL
- en: 'I will use Jupyter Lab, in this case, it is more convenient than using a standard
    IDE because reloading the 10 GB file every time a project is starting not looks
    like a good idea. Also, I will use Pandas for processing and Bokeh for visualization.
    First, let’s import the needed libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are ready to load the dataset. Let’s try a “naive” approach first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: After running this code, the PC is freezing for about 30 seconds… and the Python
    kernel is crushing. Oops. It’s not only loading slowly, but we also don’t have
    enough memory. At least on my computer, 32 GB of RAM was not enough for that task.
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, if we cannot load the file in memory, we can read it line by line; this
    approach is well known since the time of IBM mainframes and tape drives. Let’s
    read the first lines of the file and see what is inside:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The result looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, there are plenty of different data fields, and we actually don’t
    need all of them. About every car, I want to know only its type, license plate,
    model name, price, and registration date. This database is old enough, and there
    is no field indicating if the car is electric or not. But at least, there is a
    field, containing the “Number of cylinders”, which can help us to exclude the
    cars which are *not* electric.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we have only 7 fields to load, and in Pandas, we can specify the columns
    list, which drastically reduces the data size. The second trick is to specify
    the *pd.UInt32Dtype* to columns ‘Number of cylinders’ and ‘Price’. I also want
    to see only “personal” cars (“Personenauto” in Dutch), and not trucks or buses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the file was loaded correctly, and as the “info” method shows, the memory
    usage is 2.5 GB:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/67d628476b608891455bba6d326c4963.png)'
  prefs: []
  type: TYPE_IMG
- en: Dataset information, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'But because of the large file size, data loading still takes a long time. The
    easiest way is to save the filtered dataset as a new file, and to use this file
    for further experiments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This file has only a 580 KB size, which is much smaller than the original 10
    GB, and its loading does not cause any problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also don’t need a “Voertuigsoort” field anymore, and dropping this column
    will release some RAM and screen space. And as a last step, let’s translate data
    fields to English from Dutch — it is not mandatory for analysis but will be more
    convenient to readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: And now we are ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: Basic analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the beginning, let''s see **the main properties** of the dataset, like data
    samples and dimensionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The *display(df)* method shows us the first and last rows of the dataset, so
    we can see what the data looks like. The second line shows us the total amount
    of records, which can be useful for calculations, and the last request will return
    the number of Null values per column.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ed213107a3939043eeef62955455d024.png)'
  prefs: []
  type: TYPE_IMG
- en: Dataframe properties, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: We have 9,487,265 records, where each car has a license plate, model, and registration
    date (these fields are probably mandatory for the registration), but the other
    fields, like “Trade name” or “Catalog price” are missing for some cars. Technically,
    we don’t need any cleaning right now, but for some requests (like price distribution)
    we should remove Null values before making the request.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example of this approach, let’s **sort the data**, to see the most expensive
    and the cheapest cars in the Netherlands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b413f0fb6bead23efc77722a3d516de5.png)'
  prefs: []
  type: TYPE_IMG
- en: Dataframe sorted by price, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The result is interesting. In first place is “PEUGEOT 5008” with a €9,700,305
    price, which is weird because its price in Google is about €41,000 — maybe it
    is an error in the database, or the owner spent a lot of money for upgrades ;)
    Or maybe it is a brand-new electric “PEUGEOT E-5008”, but it was going to be released
    only in 2024\. Anyway, already at this point we can see that the public data is
    not always consistent. For the “PORSCHE CAYENNE” in 2nd place, the price is probably
    real. For others, it is hard to tell, I’m not an expert in luxury cars, if someone
    knows more, please write in the comments below. As for the cheapest cars, they
    have a €1 price. Probably they were imported in NL as “parts” from a second-hand
    market, so the owner declared the lowest possible value.
  prefs: []
  type: TYPE_NORMAL
- en: Data transform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s check how good our data is for further analysis. The first car model
    in the list is “PEUGEOT”, let’s display all cars with the same name. The “unique”
    method will return only **unique values** in the column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ef4975cd27d2afd47e031ad164033fc5.png)'
  prefs: []
  type: TYPE_IMG
- en: “Peugeot” models request, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that the model names in the database are not consistent. Some cars
    have the name “PEUGEOT”, other cars were saved as “PEUGEOT BOXER” or “PEUGEOT/MOBILCAR”.
    To group the cars by model name, the first word “PEUGEOT” is enough, and the right
    part of the name can be removed. It’s also better to convert all characters to
    the upper case because the car model in theory can be written as “PEUGEOT” or
    “Peugeot”. And just to be sure that there are no extra characters, I’ll call the
    “strip” method, which removes extra spaces from the string. I created a method
    “name_normalize”, which is doing that type of conversion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'A more flexible conversion can be made using regular expressions, but this
    code looks enough for our task. When we have this method, we can convert all rows
    in the Pandas dataframe by using the “map” function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now process the “Trade name” field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/85f03d9ec6cf9736145f103db59e69fb.png)'
  prefs: []
  type: TYPE_IMG
- en: “Trade name” samples, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, most of the cars have the manufacturer name in the first field
    and the trade name in the second field, like “VOLVO” + “C30” in the screenshot.
    But some other cars have the manufacturer name duplicated in both columns, like
    “NISSAN” + “NISSAN MURANO”. Let’s make it more consistent by removing the duplicates,
    and as a bonus, it will also make the dataset a bit smaller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The *isinstance* check here is important because the “Trade name” field is optional,
    and some records have None instead of the string, getting a *len(None)* will obviously
    make the method crash.
  prefs: []
  type: TYPE_NORMAL
- en: 'To update the dataframe, we can use an “apply” method in Pandas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s check the result. Having this data, we can extract some useful information,
    for example, let’s see **Top-50 of the most popular cars** in the Netherlands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The *np.unique* method can calculate amounts per model, and we don’t need to
    do it manually. The second tricky part here is to sort two arrays (car amounts
    and car models) simultaneously, we get the sort indexes sequence using the *counts.argsort*
    method, then we apply the same indexes to the “models” array.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [Bokeh](https://bokeh.org) library is good for drawing charts like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1456f23cf75ba10e66368f10204ad2f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Top car models bar chart, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The next part of the data transformation is more tricky — we need to determine
    if the car is electric or not. It is tricky because every manufacturer has its
    own naming system, and there is no universal rule for that. For some brands, like
    “TESLA”, it’s easy — all Tesla cars are electric. For other models like “HYUNDAI
    IONIQ” or “NISSAN LEAF” the specific keyword is present in the name, and for some
    other cars, there is no clear rule at all (“HONDA E” is electric, but “HONDA EE8”
    is not).
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Google search and car manufacturer''s websites, I’ve created this dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now I can easily check if the specific keyword is present for the car model,
    or if there is a direct match for the model name. And as a last check, I can use
    the number of cylinders that I have in the database. If this value is greater
    than zero, then we know that the car is *not* fully electric. The final method
    (well, maybe not final, but it works more or less well for our task) looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As a sort of unit test, we can use this method with different parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Using this function we can easily add a new field to the dataframe and keep
    only electric cars:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything was done correctly, we should get something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5b4ec7a9c90ed7ac14aafc8e58780a60.png)'
  prefs: []
  type: TYPE_IMG
- en: Electric cars dataframe, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we are finally ready to start our analysis of electric cars in the Netherlands.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a warm-up, it is easy to calculate the **mean, standard deviation, and percentiles**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7e9c58c96906657695c2a77a91ef711e.png)'
  prefs: []
  type: TYPE_IMG
- en: Mean, standard deviation, and percentiles results, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Here we can see that there are 9,487,265 cars in the Netherlands, and only 278,141
    of them (2.93%) are electric. Well, in 2023 we are only at the beginning of that
    era. According to the [rvo.nl](https://www.rvo.nl/sites/default/files/2021/12/electric-vehicles-statistics-in-the-netherlands.pdf)
    report, there were 1.22% of electric cars in 2019, 1.98% in 2020, and 2.55% in
    2021, so the numbers are growing and it would be interesting to compare the results
    10–20 years later. As for the prices of non-electric cars, the 95th percentile
    is €71,381\. It means that 95% of cars in the Netherlands have a price lower than
    this value. Electric cars are in a much more “premium” segment — the mean price
    is €49,975 and the 95th percentile is €106,989.
  prefs: []
  type: TYPE_NORMAL
- en: 'When did the first electric cars appear in the Netherlands, and how has this
    amount changed over the years? It is easy to answer this question. Let’s build
    a bar graph of **car registrations per quarter**. To do this, I need to create
    a new *Quarter* field in the Pandas dataframe and group data by this field. We
    can extract the quarter number from a “datetime” object in Python, but Pandas
    already have all the needed converters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is interesting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/920a37675132ae37c8c18893aae8ad22.png)'
  prefs: []
  type: TYPE_IMG
- en: Electric car registrations, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The first (and the single one in the whole country for the next 15 years!) electric
    car was registered in the Netherlands in 1992, more than 30 years ago. We can
    easily find in the dataset that it was a [Fiat Panda Elettra](https://www.fcaheritage.com/en-uk/heritage/stories/fiat-panda-elettra),
    a small two-seat car with a 70 km/h maximum speed, 100 km range, and 12 6V lead-acid
    batteries as a power source. The 3 next [Tesla Roadster](https://en.wikipedia.org/wiki/Tesla_Roadster_(first_generation))
    cars were registered only in 2009\. The second interesting thing here is a seasonality
    pattern — it is easy to see that the biggest number of registrations occurs at
    the end of each year (the more detailed graph will be at the end of this article).
  prefs: []
  type: TYPE_NORMAL
- en: 'Having the electric cars dataframe, it is also easy to see a **price distribution**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/626ddc7c0292a12fc694f31407289c01.png)'
  prefs: []
  type: TYPE_IMG
- en: Electric car price distribution, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the distribution is mostly right-skewed. Before calculating the
    histogram I removed the outliers from the right, otherwise, the picture looks
    mostly empty because of 2–3 cars with >1 M€ price.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the histogram we can see that most electric cars in the Netherlands have
    a price in the €40–70K range, but we don’t know what models they are. We can explore
    prices in more detail — let’s **group prices** **by model name**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Here I grouped all cars by model and aggregated that data into a table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e11b14d0b91987e69ef4963721903c18.png)'
  prefs: []
  type: TYPE_IMG
- en: Electric cars grouped by model name, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s draw this data in the form of a **box plot**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Here I sorted all models by price. In a combination with a box plot, we can
    see a clear picture of prices distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b76464ac2d30fa7a09cbe01796bea5f1.png)'
  prefs: []
  type: TYPE_IMG
- en: Electric car manufacturers and prices box plot, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Not surprisingly, at the top of the distribution are the famous luxury cars
    such as Porsche, Jaguar, or Lucid (which I’ve never heard about before, by the
    way). But what is more surprising, the cheapest cars from this distribution are
    not the most popular. For example, there are only 1,269 “Smart” and 15,414 “Renault”
    cars in the Netherlands, which is fewer than 25% compared to the 65,885 “Tesla”
    models. I was even thinking that there is an error in the graph, but the cars
    sales [UK distribution for 2021](https://cleantechnica.com/2021/10/28/tesla-model-3-20-of-uk-electric-car-sales/)
    look in general, the same.
  prefs: []
  type: TYPE_NORMAL
- en: The **maximum range** **in km** can be an important factor in choosing an electric
    car, and it would be interesting to build a graph displaying a correlation between
    range and price. But alas, there is no “Range” field in the RDW dataset. Some
    values for different electric cars can be obtained from the [Kaggle dataset](https://www.kaggle.com/datasets/geoffnel/evs-one-electric-vehicle-dataset).
    But practically, there is no direct match between both tables. For example, there
    is an “E-TRON SPORTBACK 50 QUATTRO” model in the dataset. In the RDW data, there
    are two cars with similar names, “E-TRON SPORTBACK 50" and “Q4 SPORTBACK 50 E-TRON”,
    but I have no idea if these models are actually the same. Every letter in the
    model naming can have its own meaning, and without being a car expert, it is impossible
    to match all the names for all car manufacturers. Though readers who wish can
    try it on their own.
  prefs: []
  type: TYPE_NORMAL
- en: At least, having a cars price and registration date from RDW data, we can build
    the **scatter plot:**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Here I group all cars by the model name, then I take a 1:15 random sample from
    each subset (we obviously cannot draw all 216316 cars on one plot). A really nice
    feature in Bokeh, is the ability to “mute” labels by clicking them, it allows,
    for example, to highlight only Tesla cars with a mouse click:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/14a2b15ed61bda74da3d16ea721001ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Prices and registration dates scatter plot, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: It is pretty interesting to see a seasonality pattern — it looks like car registrations
    occur in “waves” 4 times per year, and a large number of new cars are registered
    at the end of each year. Maybe some customers are especially waiting for end-of-the-year
    sales, or just want to start a new year having a new car? The second interesting
    thing is plenty of electric cars in the medium price range, appeared in 2019\.
    Before this year, the possible choice was only between cheap and premium models
    (relatively cheap, of course, as most electric cars are in the premium segment,
    compared to the gasoline ones).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we can see, using the dataset from the “real world” gives some challenges.
    It’s not only the data size, but incomplete or inconsistent data, even syntax
    errors in the data fields (I saw a “Tesla Raodster” instead of “Tesla Roadster”,
    for example), and so on. At the same time, it is much more fun to explore this
    data and find interesting patterns in it, and I suggest readers do similar experiments
    on their own. This analysis was made for fun and self-education purposes, and
    there is obviously, enough room for improvement, like finding a better detection
    method if the car is electric or not, finding a driving range for different models,
    and so on. And it is nice that the Dutch government keeps this data public and
    available to everyone. If anyone knows about datasets from other countries, please
    add the links in the comments below, and I will try to do a similar analysis and
    compare the results in the next post.
  prefs: []
  type: TYPE_NORMAL
- en: If you enjoyed this story, feel free [to subscribe](https://medium.com/@dmitryelj/membership)
    to Medium, and you will get notifications when my new articles will be published,
    as well as full access to thousands of stories from other authors.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading.
  prefs: []
  type: TYPE_NORMAL
