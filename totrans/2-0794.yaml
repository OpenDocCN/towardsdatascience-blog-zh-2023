- en: 'Electric Cars In the Netherlands: Exploratory Data Analysis with Python'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 荷兰的电动汽车：使用 Python 进行探索性数据分析
- en: 原文：[https://towardsdatascience.com/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-d01477949984](https://towardsdatascience.com/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-d01477949984)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-d01477949984](https://towardsdatascience.com/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-d01477949984)
- en: Data analysis and visualization with Python, Pandas, and Bokeh
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Python、Pandas 和 Bokeh 进行数据分析和可视化
- en: '[](https://dmitryelj.medium.com/?source=post_page-----d01477949984--------------------------------)[![Dmitrii
    Eliuseev](../Images/7c48f0c016930ead59ddb785eaf3e0e6.png)](https://dmitryelj.medium.com/?source=post_page-----d01477949984--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d01477949984--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d01477949984--------------------------------)
    [Dmitrii Eliuseev](https://dmitryelj.medium.com/?source=post_page-----d01477949984--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://dmitryelj.medium.com/?source=post_page-----d01477949984--------------------------------)[![Dmitrii
    Eliuseev](../Images/7c48f0c016930ead59ddb785eaf3e0e6.png)](https://dmitryelj.medium.com/?source=post_page-----d01477949984--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d01477949984--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d01477949984--------------------------------)
    [Dmitrii Eliuseev](https://dmitryelj.medium.com/?source=post_page-----d01477949984--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d01477949984--------------------------------)
    ·16 min read·Feb 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d01477949984--------------------------------)
    ·16 min 阅读·2023年2月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/d82a9da311e424b14898ce93dffcbc64.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d82a9da311e424b14898ce93dffcbc64.png)'
- en: Smart EQ Car, Image Source [https://en.wikipedia.org/wiki/Smart_electric_drive](https://en.wikipedia.org/wiki/Smart_electric_drive)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Smart EQ Car，图片来源 [https://en.wikipedia.org/wiki/Smart_electric_drive](https://en.wikipedia.org/wiki/Smart_electric_drive)
- en: 'When was the first electric car registered? (Spoiler: it was much earlier than
    most people may think.) Which cars are more expensive, the electric Porcshe or
    Jaguar? Exploratory data analysis (EDA) is not only an important part of building
    every data pipeline, but it is also a pretty interesting process. In this article,
    I will use the Dutch RDW (Netherlands Vehicle Authority) public dataset to find
    information about electric cars. We will see which data can be extracted and displayed
    with Python, Pandas, and Bokeh.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个电动汽车是什么时候注册的？（剧透：比大多数人想象的要早得多。）电动 Porsche 还是 Jaguar 更贵？探索性数据分析（EDA）不仅是建立每个数据管道的重要部分，而且还是一个相当有趣的过程。在本文中，我将使用荷兰
    RDW（荷兰车辆管理局）公共数据集来查找有关电动汽车的信息。我们将看看哪些数据可以使用 Python、Pandas 和 Bokeh 提取和展示。
- en: Let’s get started.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Loading the data
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载数据
- en: The **RDW** (“Rijks Dienst Wegverkeer”, [https://www.rdw.nl](https://www.rdw.nl/))
    is a Dutch organization that handles approvals and registration of motorized vehicles
    and driving licenses in the Netherlands. As a public governmental institution,
    it has its data available to everyone. Most interesting for us is the “Gekentekende
    voertuigen” (“Vehicles with license plates”) dataset. It is available for free
    under a Public Domain license and can be downloaded from [opendata.rdw.nl](https://opendata.rdw.nl/Voertuigen/Open-Data-RDW-Gekentekende_voertuigen/m9d7-ebf2).
    The file size is about 10 GB; it contains information about all vehicles, registered
    in the Netherlands since 1952\. Processing a file of such a size can also be a
    challenge — which makes the task more interesting.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**RDW**（“Rijks Dienst Wegverkeer”，[https://www.rdw.nl](https://www.rdw.nl/)）是一个荷兰机构，负责处理荷兰的机动车和驾驶执照的审批与登记。作为一个公共政府机构，它的数据对所有人开放。对我们最感兴趣的是“Gekentekende
    voertuigen”（“带有车牌的车辆”）数据集。它可以在 [opendata.rdw.nl](https://opendata.rdw.nl/Voertuigen/Open-Data-RDW-Gekentekende_voertuigen/m9d7-ebf2)
    上免费下载，使用公共领域许可证。文件大小约为 10 GB，包含自 1952 年以来在荷兰注册的所有车辆的信息。处理这样大小的文件也可能是一个挑战——这使得任务更加有趣。'
- en: 'I will use Jupyter Lab, in this case, it is more convenient than using a standard
    IDE because reloading the 10 GB file every time a project is starting not looks
    like a good idea. Also, I will use Pandas for processing and Bokeh for visualization.
    First, let’s import the needed libraries:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now we are ready to load the dataset. Let’s try a “naive” approach first:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After running this code, the PC is freezing for about 30 seconds… and the Python
    kernel is crushing. Oops. It’s not only loading slowly, but we also don’t have
    enough memory. At least on my computer, 32 GB of RAM was not enough for that task.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, if we cannot load the file in memory, we can read it line by line; this
    approach is well known since the time of IBM mainframes and tape drives. Let’s
    read the first lines of the file and see what is inside:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The result looks like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As we can see, there are plenty of different data fields, and we actually don’t
    need all of them. About every car, I want to know only its type, license plate,
    model name, price, and registration date. This database is old enough, and there
    is no field indicating if the car is electric or not. But at least, there is a
    field, containing the “Number of cylinders”, which can help us to exclude the
    cars which are *not* electric.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we have only 7 fields to load, and in Pandas, we can specify the columns
    list, which drastically reduces the data size. The second trick is to specify
    the *pd.UInt32Dtype* to columns ‘Number of cylinders’ and ‘Price’. I also want
    to see only “personal” cars (“Personenauto” in Dutch), and not trucks or buses:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now the file was loaded correctly, and as the “info” method shows, the memory
    usage is 2.5 GB:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/67d628476b608891455bba6d326c4963.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: Dataset information, Image by author
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'But because of the large file size, data loading still takes a long time. The
    easiest way is to save the filtered dataset as a new file, and to use this file
    for further experiments:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This file has only a 580 KB size, which is much smaller than the original 10
    GB, and its loading does not cause any problems.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'We also don’t need a “Voertuigsoort” field anymore, and dropping this column
    will release some RAM and screen space. And as a last step, let’s translate data
    fields to English from Dutch — it is not mandatory for analysis but will be more
    convenient to readers:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: And now we are ready to go.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Basic analysis
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the beginning, let''s see **the main properties** of the dataset, like data
    samples and dimensionality:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The *display(df)* method shows us the first and last rows of the dataset, so
    we can see what the data looks like. The second line shows us the total amount
    of records, which can be useful for calculations, and the last request will return
    the number of Null values per column.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'The output looks like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ed213107a3939043eeef62955455d024.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: Dataframe properties, Image by author
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: We have 9,487,265 records, where each car has a license plate, model, and registration
    date (these fields are probably mandatory for the registration), but the other
    fields, like “Trade name” or “Catalog price” are missing for some cars. Technically,
    we don’t need any cleaning right now, but for some requests (like price distribution)
    we should remove Null values before making the request.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有9,487,265条记录，每辆车都有车牌、型号和登记日期（这些字段可能是注册的必填项），但其他字段，如“贸易名称”或“目录价格”，在一些汽车中缺失。从技术上讲，我们现在不需要任何清理，但对于某些请求（如价格分布），在进行请求之前我们应该去除
    Null 值。
- en: 'As an example of this approach, let’s **sort the data**, to see the most expensive
    and the cheapest cars in the Netherlands:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 作为这种方法的示例，让我们**排序数据**，以查看荷兰最贵和最便宜的汽车：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/b413f0fb6bead23efc77722a3d516de5.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b413f0fb6bead23efc77722a3d516de5.png)'
- en: Dataframe sorted by price, Image by author
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 按价格排序的数据框，作者图片
- en: The result is interesting. In first place is “PEUGEOT 5008” with a €9,700,305
    price, which is weird because its price in Google is about €41,000 — maybe it
    is an error in the database, or the owner spent a lot of money for upgrades ;)
    Or maybe it is a brand-new electric “PEUGEOT E-5008”, but it was going to be released
    only in 2024\. Anyway, already at this point we can see that the public data is
    not always consistent. For the “PORSCHE CAYENNE” in 2nd place, the price is probably
    real. For others, it is hard to tell, I’m not an expert in luxury cars, if someone
    knows more, please write in the comments below. As for the cheapest cars, they
    have a €1 price. Probably they were imported in NL as “parts” from a second-hand
    market, so the owner declared the lowest possible value.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 结果很有趣。第一名是“PEUGEOT 5008”，价格为9,700,305欧元，这很奇怪，因为在Google上它的价格大约是41,000欧元——可能是数据库中的错误，或者车主为升级花了很多钱
    ;) 或者这可能是全新的电动“PEUGEOT E-5008”，但它计划在2024年才发布。不管怎样，已经可以看出公共数据并不总是一致的。第二名的“PORSCHE
    CAYENNE”的价格可能是实际的。对于其他车型，很难判断，我不是豪华车专家，如果有人知道更多，请在下面的评论中写出来。至于最便宜的汽车，它们的价格为1欧元。可能它们作为“零件”从二手市场进口到荷兰，因此车主申报了最低可能的价值。
- en: Data transform
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据转换
- en: 'Let’s check how good our data is for further analysis. The first car model
    in the list is “PEUGEOT”, let’s display all cars with the same name. The “unique”
    method will return only **unique values** in the column:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下数据是否适合进一步分析。列表中的第一个汽车型号是“PEUGEOT”，让我们显示所有具有相同名称的汽车。“unique”方法将仅返回列中的**唯一值**：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output looks like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](../Images/ef4975cd27d2afd47e031ad164033fc5.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ef4975cd27d2afd47e031ad164033fc5.png)'
- en: “Peugeot” models request, Image by author
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: “Peugeot”型号请求，作者图片
- en: 'We can see that the model names in the database are not consistent. Some cars
    have the name “PEUGEOT”, other cars were saved as “PEUGEOT BOXER” or “PEUGEOT/MOBILCAR”.
    To group the cars by model name, the first word “PEUGEOT” is enough, and the right
    part of the name can be removed. It’s also better to convert all characters to
    the upper case because the car model in theory can be written as “PEUGEOT” or
    “Peugeot”. And just to be sure that there are no extra characters, I’ll call the
    “strip” method, which removes extra spaces from the string. I created a method
    “name_normalize”, which is doing that type of conversion:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到数据库中的模型名称不一致。一些汽车的名称为“PEUGEOT”，其他汽车则被保存为“PEUGEOT BOXER”或“PEUGEOT/MOBILCAR”。为了按模型名称分组汽车，首个单词“PEUGEOT”就足够了，名称的右侧部分可以去掉。将所有字符转换为大写字母也更好，因为理论上汽车型号可以写作“PEUGEOT”或“Peugeot”。为了确保没有多余的字符，我会调用“strip”方法，该方法可以去除字符串中的多余空格。我创建了一个名为“name_normalize”的方法，它执行这种类型的转换：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'A more flexible conversion can be made using regular expressions, but this
    code looks enough for our task. When we have this method, we can convert all rows
    in the Pandas dataframe by using the “map” function:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用正则表达式进行更灵活的转换，但这段代码对于我们的任务来说已经足够了。当我们有了这个方法后，我们可以使用“map”函数转换 Pandas 数据框中的所有行：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let’s now process the “Trade name” field:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们处理“贸易名称”字段：
- en: '![](../Images/85f03d9ec6cf9736145f103db59e69fb.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/85f03d9ec6cf9736145f103db59e69fb.png)'
- en: “Trade name” samples, Image by author
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: “贸易名称”样本，作者图片
- en: 'As we can see, most of the cars have the manufacturer name in the first field
    and the trade name in the second field, like “VOLVO” + “C30” in the screenshot.
    But some other cars have the manufacturer name duplicated in both columns, like
    “NISSAN” + “NISSAN MURANO”. Let’s make it more consistent by removing the duplicates,
    and as a bonus, it will also make the dataset a bit smaller:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，大多数汽车在第一个字段中有制造商名称，在第二个字段中有商品名称，如截图中的“VOLVO” + “C30”。但一些其他汽车在两个字段中都有重复的制造商名称，如“NISSAN”
    + “NISSAN MURANO”。通过删除重复项使其更一致，并且作为奖励，这也会使数据集稍微变小：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The *isinstance* check here is important because the “Trade name” field is optional,
    and some records have None instead of the string, getting a *len(None)* will obviously
    make the method crash.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的*isinstance*检查很重要，因为“商品名称”字段是可选的，一些记录中有None而不是字符串，获取*len(None)*显然会导致方法崩溃。
- en: 'To update the dataframe, we can use an “apply” method in Pandas:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新数据框，我们可以使用Pandas中的“apply”方法：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let’s check the result. Having this data, we can extract some useful information,
    for example, let’s see **Top-50 of the most popular cars** in the Netherlands:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下结果。拥有这些数据后，我们可以提取一些有用的信息，例如，看看**荷兰最受欢迎的前50款汽车**：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The *np.unique* method can calculate amounts per model, and we don’t need to
    do it manually. The second tricky part here is to sort two arrays (car amounts
    and car models) simultaneously, we get the sort indexes sequence using the *counts.argsort*
    method, then we apply the same indexes to the “models” array.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*np.unique*方法可以计算每个模型的数量，我们不需要手动进行。这里第二个棘手的部分是同时对两个数组（汽车数量和汽车模型）进行排序，我们使用*counts.argsort*方法获得排序索引序列，然后将相同的索引应用于“models”数组。'
- en: 'The [Bokeh](https://bokeh.org) library is good for drawing charts like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[Bokeh](https://bokeh.org)库非常适合绘制这样的图表：'
- en: '![](../Images/1456f23cf75ba10e66368f10204ad2f3.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1456f23cf75ba10e66368f10204ad2f3.png)'
- en: Top car models bar chart, Image by author
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 顶级汽车模型条形图，作者提供的图像
- en: The next part of the data transformation is more tricky — we need to determine
    if the car is electric or not. It is tricky because every manufacturer has its
    own naming system, and there is no universal rule for that. For some brands, like
    “TESLA”, it’s easy — all Tesla cars are electric. For other models like “HYUNDAI
    IONIQ” or “NISSAN LEAF” the specific keyword is present in the name, and for some
    other cars, there is no clear rule at all (“HONDA E” is electric, but “HONDA EE8”
    is not).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 数据转换的下一部分更棘手——我们需要确定汽车是否电动。这很棘手，因为每个制造商都有自己命名系统，并且没有通用规则。对于一些品牌，如“TESLA”，这很简单——所有特斯拉汽车都是电动的。对于其他型号，如“HYUNDAI
    IONIQ”或“NISSAN LEAF”，名称中存在特定关键字，而对于其他一些汽车，根本没有明确的规则（“HONDA E”是电动的，但“HONDA EE8”则不是）。
- en: 'Using Google search and car manufacturer''s websites, I’ve created this dictionary:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Google搜索和汽车制造商的网站，我创建了这个字典：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now I can easily check if the specific keyword is present for the car model,
    or if there is a direct match for the model name. And as a last check, I can use
    the number of cylinders that I have in the database. If this value is greater
    than zero, then we know that the car is *not* fully electric. The final method
    (well, maybe not final, but it works more or less well for our task) looks like
    this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我可以轻松检查特定关键字是否出现在汽车模型中，或者是否有模型名称的直接匹配。最后检查，我可以使用数据库中拥有的气缸数。如果这个值大于零，那么我们知道这辆车*不是*完全电动的。最终的方法（好吧，也许不是最终的，但对于我们的任务来说或多或少有效）如下所示：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As a sort of unit test, we can use this method with different parameters:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种单元测试，我们可以使用不同的参数来使用此方法：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Using this function we can easily add a new field to the dataframe and keep
    only electric cars:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个函数，我们可以轻松地将新字段添加到数据框中，并仅保留电动汽车：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If everything was done correctly, we should get something like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切都做得正确，我们应该得到这样的结果：
- en: '![](../Images/5b4ec7a9c90ed7ac14aafc8e58780a60.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5b4ec7a9c90ed7ac14aafc8e58780a60.png)'
- en: Electric cars dataframe, Image by author
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 电动汽车数据框，作者提供的图像
- en: Analysis
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析
- en: Now we are finally ready to start our analysis of electric cars in the Netherlands.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们终于准备好开始分析荷兰的电动汽车了。
- en: 'As a warm-up, it is easy to calculate the **mean, standard deviation, and percentiles**:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 作为热身，计算**均值、标准差和百分位数**是很简单的：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output looks like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![](../Images/7e9c58c96906657695c2a77a91ef711e.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7e9c58c96906657695c2a77a91ef711e.png)'
- en: Mean, standard deviation, and percentiles results, Image by author
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 均值、标准差和百分位数结果，作者提供的图像
- en: Here we can see that there are 9,487,265 cars in the Netherlands, and only 278,141
    of them (2.93%) are electric. Well, in 2023 we are only at the beginning of that
    era. According to the [rvo.nl](https://www.rvo.nl/sites/default/files/2021/12/electric-vehicles-statistics-in-the-netherlands.pdf)
    report, there were 1.22% of electric cars in 2019, 1.98% in 2020, and 2.55% in
    2021, so the numbers are growing and it would be interesting to compare the results
    10–20 years later. As for the prices of non-electric cars, the 95th percentile
    is €71,381\. It means that 95% of cars in the Netherlands have a price lower than
    this value. Electric cars are in a much more “premium” segment — the mean price
    is €49,975 and the 95th percentile is €106,989.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到荷兰共有9,487,265辆汽车，其中仅有278,141辆（2.93%）是电动汽车。好吧，到2023年，我们只是这个时代的开始。根据[rvo.nl](https://www.rvo.nl/sites/default/files/2021/12/electric-vehicles-statistics-in-the-netherlands.pdf)的报告，2019年电动汽车占比为1.22%，2020年为1.98%，2021年为2.55%，因此这些数字在增长，未来10-20年比较结果会很有趣。至于非电动汽车的价格，第95百分位数为€71,381。这意味着荷兰95%的汽车价格低于此值。电动汽车则处于更“高端”的区间——平均价格为€49,975，第95百分位数为€106,989。
- en: 'When did the first electric cars appear in the Netherlands, and how has this
    amount changed over the years? It is easy to answer this question. Let’s build
    a bar graph of **car registrations per quarter**. To do this, I need to create
    a new *Quarter* field in the Pandas dataframe and group data by this field. We
    can extract the quarter number from a “datetime” object in Python, but Pandas
    already have all the needed converters:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 荷兰第一辆电动汽车是什么时候出现的，这个数量随着时间的推移有何变化？这个问题很容易回答。让我们构建一个**每季度汽车注册数量**的柱状图。为此，我需要在Pandas数据框中创建一个新的*Quarter*字段，并按此字段分组数据。我们可以从Python的“datetime”对象中提取季度号，但Pandas已经有所有需要的转换器：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The result is interesting:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 结果很有趣：
- en: '![](../Images/920a37675132ae37c8c18893aae8ad22.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/920a37675132ae37c8c18893aae8ad22.png)'
- en: Electric car registrations, Image by author
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 电动汽车注册情况，作者提供的图片
- en: The first (and the single one in the whole country for the next 15 years!) electric
    car was registered in the Netherlands in 1992, more than 30 years ago. We can
    easily find in the dataset that it was a [Fiat Panda Elettra](https://www.fcaheritage.com/en-uk/heritage/stories/fiat-panda-elettra),
    a small two-seat car with a 70 km/h maximum speed, 100 km range, and 12 6V lead-acid
    batteries as a power source. The 3 next [Tesla Roadster](https://en.wikipedia.org/wiki/Tesla_Roadster_(first_generation))
    cars were registered only in 2009\. The second interesting thing here is a seasonality
    pattern — it is easy to see that the biggest number of registrations occurs at
    the end of each year (the more detailed graph will be at the end of this article).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 第一辆（在接下来的15年里全国唯一的一辆！）电动汽车于1992年在荷兰注册，距今已有30多年。我们可以轻松地在数据集中找到，它是一辆[Fiat Panda
    Elettra](https://www.fcaheritage.com/en-uk/heritage/stories/fiat-panda-elettra)，这是一款最高时速70公里、续航100公里的两座小车，电源由12个6V铅酸电池提供。接下来的3辆[Tesla
    Roadster](https://en.wikipedia.org/wiki/Tesla_Roadster_(first_generation))仅在2009年注册。第二件有趣的事情是季节性模式——很容易看到每年年底的注册数量最大（更详细的图表将在本文末尾展示）。
- en: 'Having the electric cars dataframe, it is also easy to see a **price distribution**:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有电动汽车数据框后，我们也很容易看到**价格分布**：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output looks like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](../Images/626ddc7c0292a12fc694f31407289c01.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/626ddc7c0292a12fc694f31407289c01.png)'
- en: Electric car price distribution, Image by author
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 电动汽车价格分布，作者提供的图片
- en: As we can see, the distribution is mostly right-skewed. Before calculating the
    histogram I removed the outliers from the right, otherwise, the picture looks
    mostly empty because of 2–3 cars with >1 M€ price.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，分布大多向右偏斜。在计算直方图之前，我去除了右侧的异常值，否则由于2–3辆价格超过1百万欧元的汽车，图像几乎是空的。
- en: 'Using the histogram we can see that most electric cars in the Netherlands have
    a price in the €40–70K range, but we don’t know what models they are. We can explore
    prices in more detail — let’s **group prices** **by model name**:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用直方图我们可以看到，大多数荷兰的电动汽车价格在€40–70K范围内，但我们不知道具体是哪些车型。我们可以更详细地探索价格——让我们**按车型名称分组价格**：
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here I grouped all cars by model and aggregated that data into a table:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我将所有汽车按型号分组，并将数据汇总到一个表中：
- en: '![](../Images/e11b14d0b91987e69ef4963721903c18.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e11b14d0b91987e69ef4963721903c18.png)'
- en: Electric cars grouped by model name, Image by author
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 按车型名称分组的电动汽车，作者提供的图片
- en: 'Let’s draw this data in the form of a **box plot**:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以**箱形图**的形式绘制这些数据：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here I sorted all models by price. In a combination with a box plot, we can
    see a clear picture of prices distribution:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b76464ac2d30fa7a09cbe01796bea5f1.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: Electric car manufacturers and prices box plot, Image by author
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Not surprisingly, at the top of the distribution are the famous luxury cars
    such as Porsche, Jaguar, or Lucid (which I’ve never heard about before, by the
    way). But what is more surprising, the cheapest cars from this distribution are
    not the most popular. For example, there are only 1,269 “Smart” and 15,414 “Renault”
    cars in the Netherlands, which is fewer than 25% compared to the 65,885 “Tesla”
    models. I was even thinking that there is an error in the graph, but the cars
    sales [UK distribution for 2021](https://cleantechnica.com/2021/10/28/tesla-model-3-20-of-uk-electric-car-sales/)
    look in general, the same.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: The **maximum range** **in km** can be an important factor in choosing an electric
    car, and it would be interesting to build a graph displaying a correlation between
    range and price. But alas, there is no “Range” field in the RDW dataset. Some
    values for different electric cars can be obtained from the [Kaggle dataset](https://www.kaggle.com/datasets/geoffnel/evs-one-electric-vehicle-dataset).
    But practically, there is no direct match between both tables. For example, there
    is an “E-TRON SPORTBACK 50 QUATTRO” model in the dataset. In the RDW data, there
    are two cars with similar names, “E-TRON SPORTBACK 50" and “Q4 SPORTBACK 50 E-TRON”,
    but I have no idea if these models are actually the same. Every letter in the
    model naming can have its own meaning, and without being a car expert, it is impossible
    to match all the names for all car manufacturers. Though readers who wish can
    try it on their own.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: At least, having a cars price and registration date from RDW data, we can build
    the **scatter plot:**
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here I group all cars by the model name, then I take a 1:15 random sample from
    each subset (we obviously cannot draw all 216316 cars on one plot). A really nice
    feature in Bokeh, is the ability to “mute” labels by clicking them, it allows,
    for example, to highlight only Tesla cars with a mouse click:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/14a2b15ed61bda74da3d16ea721001ab.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
- en: Prices and registration dates scatter plot, Image by author
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: It is pretty interesting to see a seasonality pattern — it looks like car registrations
    occur in “waves” 4 times per year, and a large number of new cars are registered
    at the end of each year. Maybe some customers are especially waiting for end-of-the-year
    sales, or just want to start a new year having a new car? The second interesting
    thing is plenty of electric cars in the medium price range, appeared in 2019\.
    Before this year, the possible choice was only between cheap and premium models
    (relatively cheap, of course, as most electric cars are in the premium segment,
    compared to the gasoline ones).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we can see, using the dataset from the “real world” gives some challenges.
    It’s not only the data size, but incomplete or inconsistent data, even syntax
    errors in the data fields (I saw a “Tesla Raodster” instead of “Tesla Roadster”,
    for example), and so on. At the same time, it is much more fun to explore this
    data and find interesting patterns in it, and I suggest readers do similar experiments
    on their own. This analysis was made for fun and self-education purposes, and
    there is obviously, enough room for improvement, like finding a better detection
    method if the car is electric or not, finding a driving range for different models,
    and so on. And it is nice that the Dutch government keeps this data public and
    available to everyone. If anyone knows about datasets from other countries, please
    add the links in the comments below, and I will try to do a similar analysis and
    compare the results in the next post.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，使用来自“现实世界”的数据集带来了一些挑战。这不仅仅是数据规模，还有数据不完整或不一致，甚至数据字段中的语法错误（例如，我看到一个“Tesla
    Raodster”而不是“Tesla Roadster”），等等。与此同时，探索这些数据并发现其中有趣的模式要有趣得多，我建议读者自己做类似的实验。这项分析是为了娱乐和自我教育目的，显然还有很大的改进空间，例如寻找更好的检测方法以判断汽车是否是电动的，找出不同型号的续航里程，等等。而荷兰政府保持这些数据公开并对所有人开放，这很好。如果有人知道其他国家的数据集，请在下方评论中添加链接，我将尝试做类似的分析并在下一个帖子中比较结果。
- en: If you enjoyed this story, feel free [to subscribe](https://medium.com/@dmitryelj/membership)
    to Medium, and you will get notifications when my new articles will be published,
    as well as full access to thousands of stories from other authors.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这个故事，可以随时[订阅](https://medium.com/@dmitryelj/membership) Medium，你将获得新文章发布的通知，并可以全面访问其他作者的数千个故事。
- en: Thanks for reading.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。
