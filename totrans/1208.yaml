- en: How to Level Up Your Python Skills by Learning From These Professionals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-level-up-your-python-skills-by-learning-from-these-professionals-3e906b83f355](https://towardsdatascience.com/how-to-level-up-your-python-skills-by-learning-from-these-professionals-3e906b83f355)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Prevent staying stuck at the junior level of Python programming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@tomergabay?source=post_page-----3e906b83f355--------------------------------)[![Tomer
    Gabay](../Images/1fb1d408bc89415918c1aa6733df44e1.png)](https://medium.com/@tomergabay?source=post_page-----3e906b83f355--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3e906b83f355--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3e906b83f355--------------------------------)
    [Tomer Gabay](https://medium.com/@tomergabay?source=post_page-----3e906b83f355--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3e906b83f355--------------------------------)
    ·7 min read·Mar 9, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f1d550cca20573f51a87aa8ddca78e2f.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Austin Distel](https://unsplash.com/@austindistel?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '**Disclaimer: I’m not affiliated with any of the courses or people mentioned
    in this article, and I’m not financially supported by any organization or individuals
    mentioned in this article.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The internet is full of courses and other material to start learning Python.
    The most famous ones are e.g. [*100 Days of Code: The Complete Python Pro Bootcamp
    for 2023*](https://www.udemy.com/course/100-days-of-code/)*,* [*codeacademy*](https://www.codecademy.com/learn/learn-python-3)and[*freeCodeCamp*](https://www.freecodecamp.org/news/learn-python-free-python-courses-for-beginners/)*.*
    However, after completing one (or several) of these courses a lot of people get
    stuck at the same level: the level of a junior Python developer.'
  prefs: []
  type: TYPE_NORMAL
- en: In Europe, on March 4, 2023, there are almost twice as many job vacancies on
    LinkedIn for medior/senior Python developer roles than there are for entry-level
    Python developer roles (respectively [23,739](https://www.linkedin.com/jobs/search/?currentJobId=3498200456&f_E=4&geoId=100506914&keywords=python+developer&location=Europe&refresh=true)
    versus [12,720](https://www.linkedin.com/jobs/search/?currentJobId=3510360682&f_E=2&geoId=100506914&keywords=python+developer&location=Europe&refresh=true)).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The reason why a lot of people who (want to) learn Python don’t make it past
    the junior level, even after years of programming, is that you need to keep learning
    new aspects and theory after reaching the level where you can start programming
    yourself. Simply put there are three principles related to keeping improving your
    programming level, and you need to apply at least two of them to see significant
    growth in your code quality.
  prefs: []
  type: TYPE_NORMAL
- en: Practice programming yourself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Learn from working on projects with more experienced developers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep learning yourself by actively searching for more advanced programming concepts
    and applying them in work-related or personal projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first principle is unavoidable, of course. Just like you can’t learn tennis
    through reading theory about where you should hit the ball optimally, you can’t
    learn programming by just reading and watching content about it. If you have a
    job which involves programming, this is pretty easy, as your boss expects you
    to program. If you program on a personal basis only, you might have to actively
    search for projects to work on. Luckily, there are many websites which offer programming
    projects to take on, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '— [Advent of Code](https://adventofcode.com/): here you can find almost 200
    programming challenges, ranging from beginner to expert.'
  prefs: []
  type: TYPE_NORMAL
- en: '— [Kaggle](https://www.kaggle.com/): an online community for data scientists
    with many data sets to practice on and competitions to participate in.'
  prefs: []
  type: TYPE_NORMAL
- en: Or take a look on [here on Insane](https://www.theinsaneapp.com/2021/06/list-of-python-projects-with-source-code-and-tutorials.html),
    where 70+ Python projects are suggested, accompanied by code solutions and explanations,
    and some even include tutorials!
  prefs: []
  type: TYPE_NORMAL
- en: Besides actively programming yourself, at least one of the second and third
    principles is necessary as well to eventually surpass the junior level. However,
    the second principle (working together with more experienced developers) is more
    tricky to achieve, as you have less influence on it. I’ve been the most experienced
    in Python in a data science team while I was still a junior myself, which I noticed
    made growth in my coding skills difficult. Eventually, I left that team to join
    a team where I could learn from colleagues who were more senior than me. I learned
    more about Python in the first few months while being surrounded by seniors than
    I learned in one year being the most senior myself.
  prefs: []
  type: TYPE_NORMAL
- en: On March 5, 2023, salaries for Python developer positions on [glassdoor](https://glassdoor.com)
    range from [$50k to $127k](https://www.glassdoor.com/Job/python-developer-jobs-SRCH_KO0,16.htm?seniorityType=entrylevel)
    a year for entry-level positions, while ranging from [$77k to $250k](https://www.glassdoor.com/Job/python-developer-jobs-SRCH_KO0,16.htm?seniorityType=midseniorlevel)
    a year for mid-senior level positions.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: While I was the most senior in Python in the data science team but still a junior
    myself, I started to search the internet for advanced Python content to learn
    advanced concepts, as there were no colleagues to teach me but I still wanted
    to improve my programming skills.
  prefs: []
  type: TYPE_NORMAL
- en: I noticed that the amount of online material that teaches more advanced Python
    concepts is significantly less, and of lesser quality, than most of the introductory
    courses. However, there is still some excellent online material to help you pass
    the ‘glass ceiling’ level of a junior Python developer. I like to highlight the
    following two Python experts whose content is perfect for junior programmers who
    are already comfortable with the basic concepts taught in introductory courses.
  prefs: []
  type: TYPE_NORMAL
- en: Arjan Egges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of my favourite resources for learning how to increase the professionality
    of Python programs is the content of *ArjanCodes* by [Arjan Egges](https://www.linkedin.com/in/arjanegges/).
    Arjan Egges is a Dutch Python developer who teaches more advanced Python concepts
    from a software design and software development perspective in a very clear and
    pleasant manner. From him, I learned many concepts which weren’t taught in my
    Python-focused Master's at the University of Groningen.
  prefs: []
  type: TYPE_NORMAL
- en: 'I especially like his free-to-watch [Youtube videos](https://www.youtube.com/@ArjanCodes)
    on e.g. D[ata Classes](https://www.youtube.com/watch?v=CvQ7e6yUtnw), [A/B Testing](https://www.youtube.com/watch?v=115SeMub-P0)
    and [Abstract Base Classes](https://www.youtube.com/watch?v=xvb5hGLoK0A), but
    he also has his own websites with much more content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[## ArjanCodes'
  prefs: []
  type: TYPE_NORMAL
- en: Hi, I'm Arjan. I'm a software design enthusiast and YouTuber. I create videos
    about software design, development, and…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'www.arjancodes.com](https://www.arjancodes.com/?source=post_page-----3e906b83f355--------------------------------)
    [](https://www.skillshare.com/en/tedx?teacherRef=711918657&via=teacher-referral&utm_campaign=teacher-referral&utm_source=ShortUrl&utm_medium=teacher-referral&t=Next-Level-Python-Become-a-Python-Expert&sku=1997963259&source=post_page-----3e906b83f355--------------------------------)
    [## Next-Level Python: Become a Python Expert | ArjanCodes | Skillshare'
  prefs: []
  type: TYPE_NORMAL
- en: Unlock unlimited access to this Skillshare class along with thousands of classes
    taught by creators from around the…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.skillshare.com](https://www.skillshare.com/en/tedx?teacherRef=711918657&via=teacher-referral&utm_campaign=teacher-referral&utm_source=ShortUrl&utm_medium=teacher-referral&t=Next-Level-Python-Become-a-Python-Expert&sku=1997963259&source=post_page-----3e906b83f355--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: In [this video](https://www.youtube.com/watch?v=54XyRw9y8oE), Arjan suggests
    14 projects, in which you can apply the concepts that you learn from his tutorial
    videos to apply them yourself. I’d highly recommend doing this, because compared
    to other projects, in which you are very much steered towards a specific solution,
    Arjan gives you a lot of space to think for yourself, which actually forces you
    to think a project through, from design all the way to implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'I believe that that’s one of the biggest flaws of most Python courses found
    online: they’re often too focused on syntax only, while actually having to come
    up with the right solution and design for a problem is most often the trickiest
    part of being a developer. Arjan, instead, focuses much more on software design
    than syntax, which in my opinion is a very welcome different approach to teaching
    Python.'
  prefs: []
  type: TYPE_NORMAL
- en: By interchangeably watching his tutorial videos and working on these projects,
    if you finish them all, you’ll definitely be significantly better at Python programming
    than your fellow Pythoneers who only did the standard entry-level Python courses
    like [this one](https://www.datacamp.com/learn/python) on *datacamp,* which is
    more syntax-focused.
  prefs: []
  type: TYPE_NORMAL
- en: On March 5, 2023, there are over [6500 English Python beginner courses on Udemy](https://www.udemy.com/courses/search/?instructional_level=expert&lang=en&q=python&sort=relevance&src=ukw),
    while there are only [315 English expert-level Python courses](https://www.udemy.com/courses/search/?instructional_level=expert&lang=en&q=python&sort=relevance&src=ukw).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Fred Baptiste
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another Python developer who teaches high-quality advanced Python development
    content is [Fred Baptiste](https://www.linkedin.com/in/fbaptiste/). I strongly
    recommend his courses to you if you’d like to *really* understand what is going
    on when you run certain Python code. Rather than just teaching you “you can use
    this function or method for this problem”, he dives deep into what actually is
    being executed when that function or method is called, and how this code works
    in the background, on a lower level, as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore you can, for example, take computational costs and memory efficiency
    properly into account when writing your code, which can be very useful or even
    a necessity; applying the knowledge we learned from Fred, a colleague and I managed
    to successfully optimize a previously unusable Time Series Cross-validator because
    it often resulted in out-of-memory errors or a seemingly endless runtime:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/a-highly-anticipated-time-series-cross-validator-is-finally-here-7dc99f672736?source=post_page-----3e906b83f355--------------------------------)
    [## A highly anticipated Time Series Cross-validator is finally here'
  prefs: []
  type: TYPE_NORMAL
- en: Unevenly spread Time Series data is no longer a problem for cross-validation.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/a-highly-anticipated-time-series-cross-validator-is-finally-here-7dc99f672736?source=post_page-----3e906b83f355--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Fred Baptiste has published four advanced Python courses on Udemy which you
    can often buy at a discount for around $15 each (with a *30-Day Money-Back Guarantee*
    policy):'
  prefs: []
  type: TYPE_NORMAL
- en: '[Python 3: Deep Dive (Part One — Functional)](https://www.udemy.com/course/python-3-deep-dive-part-1/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python 3: Deep Dive (Part Two — Iteration, Generators)](https://www.udemy.com/course/python-3-deep-dive-part-2/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python 3: Deep Dive (Part Three — Hash Maps, JSON Serialization)](https://www.udemy.com/course/python-3-deep-dive-part-3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python 3: Deep Dive (Part Four — Object-Oriented Programming)](https://www.udemy.com/course/python-3-deep-dive-part-4/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure to read the course prerequisites of each course, as these are definetly
    not beginner courses!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To get the most out of these courses, as Fred suggests himself, make sure to
    code along and try to come up with the solutions yourself before watching his
    own solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Besides offering these courses on Udemy, Fred also runs a Youtube channel called
    the [MathByte Academy](https://www.youtube.com/@mathbyteacademy/featured) with
    free-to-watch videos about Python, including on advanced concepts such as [Pydantic
    Data Models](https://www.youtube.com/watch?v=gb3arRysqMo&list=PL9_iFHfnv8hBzIvrgk5qsE4VD7oUiAQ4E&index=6),
    and [Async Producer-Consumer Models](https://www.youtube.com/watch?v=vVdeKdyoL14&list=PL9_iFHfnv8hBzIvrgk5qsE4VD7oUiAQ4E&index=9).
  prefs: []
  type: TYPE_NORMAL
- en: Learn, practice, apply, repeat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Of course, only watching Arjan’s and Fred’s videos and doing their exercises
    won’t immediately change your junior level. However, if you actively apply the
    concepts they teach e.g. at your work, or on your personal projects, you’ll definitely
    significantly distinguish yourself from other Python developers who’ve only done
    the standard introductory courses I mentioned at the beginning of this article.
    Through Arjan, you’ll learn to properly think about the design of a Python program,
    while Fred helps you to have a much deeper understanding of Python code than ever
    before.
  prefs: []
  type: TYPE_NORMAL
- en: I firmly believe that by completing all their videos and exercises, you have
    a high chance of being a better Python developer than the average graduate who
    just finished their studies containing several Python courses, as a lot of concepts
    taught by Arjan and Fred are more advanced than what I’ve encountered at my Master’s.
  prefs: []
  type: TYPE_NORMAL
- en: That’s it! Good luck in finding your way out of the junior level of Python programming
    with the help of Arjan and Fred! Feel free to contact me if you have any questions
    or want more tips on e.g. which projects to take on first.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to see actual coding examples of how senior developers distinguish
    themselves from junior developers, e.g. in coding challenges, see this other article
    of mine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/5-python-tricks-that-distinguish-senior-developers-from-juniors-826d57ab3940?source=post_page-----3e906b83f355--------------------------------)
    [## 5 Python Tricks That Distinguish Senior Developers From Juniors'
  prefs: []
  type: TYPE_NORMAL
- en: Illustrated through differences in approaches to Advent of Code puzzles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/5-python-tricks-that-distinguish-senior-developers-from-juniors-826d57ab3940?source=post_page-----3e906b83f355--------------------------------)
  prefs: []
  type: TYPE_NORMAL
