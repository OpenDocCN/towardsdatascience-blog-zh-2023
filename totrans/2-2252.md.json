["```py\nimport os\nimport openai\n\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())\nopenai.api_key = os.environ['OPENAI_API_KEY']\n```", "```py\nfrom langchain.chat_models import ChatOpenAI\n\nchat = ChatOpenAI(temperature=0.0)\n```", "```py\nreview_template = \"\"\"\\\nFor the following review, extract the following information:\n\nrecommended: Does the buyer recommend the product? \\\nAnswer True if yes, False if not or unknown.\n\ndelivery_days: How many days did it take for the product \\\nto arrive? If this information is not found, output -1.\n\nsetup: Extract any sentences about the setup of the product.\n\nFormat the output as JSON with the following keys:\nrecommended\ndelivery_days\nsetup\n\nreview: {review}\n\"\"\"\n\nfrom langchain.prompts import ChatPromptTemplate\n\nprompt_template = ChatPromptTemplate.from_template(review_template)\n```", "```py\nprompt_template.input_variables\n\n# output\n['review']\n```", "```py\nproduct_review = \"\"\"\nI got this product to plug my internet based phone for work from home (Avaya desktop phone). \nIt works! It arrived in 5 days, which was earlier than the estimated delivery date.\nThe setup was EXTREMELY easy. At completion, I plugged the phone into the \nextender's ethernet port and made a few phone calls which all worked perfectly with \ncomplete clarity. VERY happy with this purchase since a cordless headset is \naround $250 (which I would have needed since the phone had to be at the ethernet \nport on the wall). I recommend this product!\n\"\"\"\n\nmessages = prompt_template.format_messages(review=product_review)\n```", "```py\n# chat is the model and messages is the prompt\nresponse = chat(messages)\nprint(response.content)\n\n# output\n{\n    \"recommended\": true,\n    \"delivery_days\": 5,\n    \"setup\": \"The setup was EXTREMELY easy.\"\n}\n```", "```py\ntype(response.content)\n# output\nstr\n```", "```py\nfrom langchain.output_parsers import ResponseSchema\nfrom langchain.output_parsers import StructuredOutputParser\n\nrecommendation_schema = ResponseSchema(\n    name=\"recommended\",\n    description=\"Does the buyer recommend the product? \\\n    Answer True if yes, False if not or unknown.\"\n)\n\ndelivery_days_schema = ResponseSchema(\n    name=\"delivery_days\",\n    description=\"How many days did it take for the product to arrive? \\\n    If this information is not found,output -1.\"\n)\n\nsetup_schema = ResponseSchema(\n    name=\"setup\",\n    description=\"Extract any sentences about the setup of the product.\"\n)\n\nresponse_schemas = [\n    recommendation_schema, \n    delivery_days_schema,\n    setup_schema\n]\n```", "```py\noutput_parser = StructuredOutputParser.from_response_schemas(response_schemas)\nformat_instructions = output_parser.get_format_instructions()\n```", "```py\nprompt_template = ChatPromptTemplate.from_template(template=review_template)\n\nmessages = prompt_template.format_messages(\n    review=product_review, \n    format_instructions=format_instructions\n)\n```", "```py\nresponse = chat(messages)\noutput_dict = output_parser.parse(response.content)\n\nprint(output_dict)\n\n# output\n{'recommended': 'True', 'delivery_days': '5', 'setup': 'The setup was EXTREMELY easy.'}\n```", "```py\noutput_dict.get(\"delivery_days\")\n\n# output\n5\n```"]