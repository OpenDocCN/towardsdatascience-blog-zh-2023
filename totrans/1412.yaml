- en: Leverage the Power of Aggregate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/leverage-the-power-of-aggregate-ad5d69810c62](https://towardsdatascience.com/leverage-the-power-of-aggregate-ad5d69810c62)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use pandas aggregate to speed up your data analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://bradley-stephen-shaw.medium.com/?source=post_page-----ad5d69810c62--------------------------------)[![Bradley
    Stephen Shaw](../Images/b3ef5e6e292083ff0f8523ec5ffe89f0.png)](https://bradley-stephen-shaw.medium.com/?source=post_page-----ad5d69810c62--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ad5d69810c62--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ad5d69810c62--------------------------------)
    [Bradley Stephen Shaw](https://bradley-stephen-shaw.medium.com/?source=post_page-----ad5d69810c62--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ad5d69810c62--------------------------------)
    ·8 min read·Mar 9, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c0d790410680428d95a480276d1a6d9f.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Dan Hadar](https://unsplash.com/@danhadar?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Have you ever got a cramp typing same-same-but-different code to calculate various
    statistics on the same (segmented) feature?
  prefs: []
  type: TYPE_NORMAL
- en: What about getting lost in a sea of similar-looking code snippets all trying
    to calculate various statistics on various different (segmented) features — sound
    familiar?
  prefs: []
  type: TYPE_NORMAL
- en: 'I feel your pain. Well, I used to — not anymore! So in this follow-up post,
    we’ll cover simple (but powerful) ways you can use `agg` to:'
  prefs: []
  type: TYPE_NORMAL
- en: Apply different functions to the same feature
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply sets of functions to sets of features
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use tuples for even more flexibility
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use functions from other packages,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'I’ve made reference to features being grouped or segmented. While you don’t
    have to use `agg` with a `groupby` statement, I think that doing so provides more
    interesting examples and follows on nicely from my previous instalment. Speaking
    of which, I’d recommend having a read of it if you’d like a refresher on `groupby`
    , `apply` and `transform` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/turbocharge-your-data-manipulation-skills-3a26897ad6a?source=post_page-----ad5d69810c62--------------------------------)
    [## Turbocharge your data manipulation skills'
  prefs: []
  type: TYPE_NORMAL
- en: Unlock the power of pandas groupby, apply and transform
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/turbocharge-your-data-manipulation-skills-3a26897ad6a?source=post_page-----ad5d69810c62--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Enough shameless self-promotion — let’s get going! First up, a look at the data
    we’re going to be using.
  prefs: []
  type: TYPE_NORMAL
- en: The data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll be sticking with information collected from a portfolio of consumer credit
    cards¹.
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ve made some changes to column names and format changes, but the data is
    otherwise as-is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/88d872538185623c90cffa07f08c62f4.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The data contains various categorical features (e.g. education level) and numeric
    features (e.g. customer age).
  prefs: []
  type: TYPE_NORMAL
- en: There are more features in the data than what the snapshot above implies; don’t
    be surprised if we use a few “new” ones below!
  prefs: []
  type: TYPE_NORMAL
- en: Aggregate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: … or `agg` .
  prefs: []
  type: TYPE_NORMAL
- en: 'I think the documentation rather undersells the power of `agg` :'
  prefs: []
  type: TYPE_NORMAL
- en: Aggregate using one or more operations over the specified axis.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What this really doesn’t say is that `agg` is one of the most flexible functions
    out there, providing the user with various ways of applying multiple functions
    to the same feature, or multiple functions to multiple features. It can be used
    with or without a `groupby` statement and can be applied across either rows or
    column axes. It’s also not fussy about where the function comes from, or how it’s
    defined.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get to it!
  prefs: []
  type: TYPE_NORMAL
- en: '*Aside: we could also use* `agg` *to apply the same function to multiple features
    but that can be more easily achieved using the function directly, or through an*
    `apply` *statement.*'
  prefs: []
  type: TYPE_NORMAL
- en: Multiple functions on the same feature
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s see how we can calculate the minimum, maximum, and skewness of customer
    age for each customer and gender segment.
  prefs: []
  type: TYPE_NORMAL
- en: In the examples that follow, the functions that are used are for demonstration
    purposes. Some — like skewness— might be new to some readers, whilst others —
    like `scaled_mdeian` — are completely contrived.
  prefs: []
  type: TYPE_NORMAL
- en: '*Aside: “skewness” is a statistical concept which captures the degree of asymmetry
    inherent in a distribution.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '… which gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c71fd7e7f152a1f32bdc8f7253b6bf20.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Pretty straightforward right? Just a few things to note:'
  prefs: []
  type: TYPE_NORMAL
- en: I’ve taken pains to clarify exactly which segments, feature, and functions are
    being used by defining each before applying. This is mainly for the purpose of
    providing a clear example, so feel free to condense your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’re using built-in `pandas` functions, and so can refer to them using their
    names (hence the specification in string form). Later we’ll see how we can use
    functions from other packages as well as custom functions, including lambda functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We provide the functions we’re applying to `agg` in a list. If necessary we
    can add more functions to the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s get a bit more advanced, and start applying various functions to a number
    of different features.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple functions on multiple features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The true strength of `agg` — the production of a wide variety of summary statistics
    in one fell swoop.
  prefs: []
  type: TYPE_NORMAL
- en: As with most things Python, there are various ways to do this. We’ll cover two
    different approaches here. First up, using lists.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '… which gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2bf9d6a25d22b707d700f900291216b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: This should be fairly familiar from the above — instead of applying various
    functions to a single feature, we’re applying the same functions to various features.
    The only real difference here is that we’re specifying the features in a list.
  prefs: []
  type: TYPE_NORMAL
- en: What about applying a number of different functions to various features? For
    that, we’ll need a dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '… which gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b690dda0353567b8c573e48144b3717f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Notice how using a dictionary with a list of functions to apply gives us much
    more flexibility in terms of what we apply? Neat!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we’ve only seen two functions being applied to two features.
    We can of course change this to apply as many functions to as many features as
    we like. We just need to remember the format of the dictionary argument: feature
    names should be specified as dictionary keys, and (lists of) functions should
    be provided as the dictionary values.'
  prefs: []
  type: TYPE_NORMAL
- en: More tuples, more flexibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ve seen above how using lists and tuples in the `agg` call returns a `DataFrame`
    with a hierarchical index³ (or a `MultiIndex` in the lingo).
  prefs: []
  type: TYPE_NORMAL
- en: This is of course perfectly fine if that’s what you’re after. But I am a simple
    man, and I like simple things. I also like being in control of what my column
    names are.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we’ll switch to using tuples which will:'
  prefs: []
  type: TYPE_NORMAL
- en: Return a `DataFrame` with flat indices. (Forget about those `reset_index()`
    calls).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Allow us to specify the names of each column returned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Arguably, the latter point is probably a stronger and more useful motivation
    for using tuples.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, enough yakking. Let’s rewrite the example above using tuples.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e1c35c5f95d7e31ab45cc1891eb5081b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Using tuples allows us to specify the names of the summarised features. This
    is useful if you want to be very specific about the names of the `DataFrame` .
  prefs: []
  type: TYPE_NORMAL
- en: The syntax of this call to `agg` is a bit unusual. Here, we specify the name
    of the resulting column outside of the tuple, and then within the tuple provide
    the name of the feature being summarised (in string format) followed by the function.
    In pseudo-code, this is something like `name of result = (name of feature, function)`
    .
  prefs: []
  type: TYPE_NORMAL
- en: We’re still using built-in `pandas` features, so can refer to them by name (in
    string format). Let’s see how we can use other functions.
  prefs: []
  type: TYPE_NORMAL
- en: Exotic functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Oftentimes, we need to use more exotic or bespoke summary functions.
  prefs: []
  type: TYPE_NORMAL
- en: I’m being a bit liberal with the word “exotic" — I really mean a function from
    another package. However, sometimes we do need to use truly bespoke functionality
    that we write ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s get going! We’ll combine a number of ideas to apply various functions
    to each `attrition_flag` x `gender` segment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'which gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/72e4b60e42ef3af26e8c916ed7071bce.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Working our way through it:'
  prefs: []
  type: TYPE_NORMAL
- en: We grab some functions from `numpy` . Nothing too “exotic” here — they’re just
    the `numpy` implementation of minimum, maximum, and standard deviation. Don’t
    forget to import the package containing the “exotic” functions!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We create a bespoke function called `scaled_median` . Also nothing too special
    here as it’s a contrived function for the purpose of demonstration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The call to `agg` uses the tuple approach. Not too much new here, other than
    the way that we refer to the functions. Since we’re no longer using built-in methods
    we can’t call them by their names: instead we supply their names and where they
    come from (e.g. `np.min` ).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The more formal definition of a function can be replaced with a lambda function
    if you’re feeling extra Pythonic; I’ve not done that here for formatting purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s call it there and review what we’ve done.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This time round, we’ve seen how to apply different functions to the same (grouped)
    feature using `agg` .
  prefs: []
  type: TYPE_NORMAL
- en: We extended that to apply sets of functions to sets of (grouped) features; we
    saw how we can do this using lists, dictionaries and tuples. Examples demonstrated
    the benefits of each approach.
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, we saw how we can take advantage of functions from other
    packages and custom functions that we’ve written.
  prefs: []
  type: TYPE_NORMAL
- en: As we’ve seen, the real strength of `agg` is applying multiple functions to
    multiple features. This is great for exploratory data analysis, feature engineering
    and producing summary statistics.
  prefs: []
  type: TYPE_NORMAL
- en: When doing feature engineering, we often need to map the results of a transformation
    of data segments back to the original data. There’s often a bit of confusion about
    whether `agg` can be used to do this — it can’t. If we need the result to be broadcast
    back to the original data we need to use `transform` , although that comes with
    its own limitations. If you need to do loads of transformations, you might want
    to think about using `agg` and then manually joining the results back to the original
    data.
  prefs: []
  type: TYPE_NORMAL
- en: As always, thank you for reading. Hopefully there are some useful tips in here,
    and please let me know about any handy tricks you use!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re interested in other `pandas` and `matplotlib` tricks, you might also
    be interested in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/make-your-tables-look-glorious-2a5ddbfcc0e5?source=post_page-----ad5d69810c62--------------------------------)
    [## Make Your Tables Look Glorious'
  prefs: []
  type: TYPE_NORMAL
- en: Simple formatting tricks to make your pandas DataFrames presentation-ready
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/make-your-tables-look-glorious-2a5ddbfcc0e5?source=post_page-----ad5d69810c62--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: … and
  prefs: []
  type: TYPE_NORMAL
- en: '[](/make-your-charts-look-glorious-9ce3fa310b70?source=post_page-----ad5d69810c62--------------------------------)
    [## Make your charts look glorious'
  prefs: []
  type: TYPE_NORMAL
- en: Simple tricks to make matplotplib charts presentation-ready
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/make-your-charts-look-glorious-9ce3fa310b70?source=post_page-----ad5d69810c62--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References and resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[zhyli. (2020). Prediction of Churning Credit Card Customers [Data set]. Zenodo.](https://doi.org/10.5281/zenodo.4322341),
    provided under the [Creative Comons — Attribution 4.0 International](https://creativecommons.org/licenses/by/4.0/legalcode)
    licence.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[pandas.DataFrame.agg — pandas 1.5.3 documentation (pydata.org)](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.agg.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[MultiIndex / advanced indexing — pandas 1.5.3 documentation (pydata.org)](https://pandas.pydata.org/docs/user_guide/advanced.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
