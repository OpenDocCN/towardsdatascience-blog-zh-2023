["```py\nimport pandas as pd\nimport geopandas as gpd\nimport folium\nfrom shapely.geometry import Polygon\nfrom scipy.spatial import Voronoi\n\n# Load the school locations CSV file into a DataFrame:\ndf = pd.read_csv('https://bit.ly/3MYYegT')\n\n# Create a GeoDataFrame with Point geometries:\ngdf = gpd.GeoDataFrame(df, \n                       geometry=gpd.points_from_xy(df['Longitude'], \n                                                   df['Latitude']), \n                       crs='EPSG:4326')\n```", "```py\n# Create a Voronoi diagram using the GeoDataFrame.\n# Use -1 to check for and exclude regions that extend to infinity:\nvor = Voronoi(gdf[['Longitude', 'Latitude']])\nvoronoi_polygons = [Polygon(vor.vertices[region]) \n                    for region in vor.regions \n                    if region and -1 not in region]\n\n# Create a GeoDataFrame with the Voronoi polygons:\ngdf_voronoi = gpd.GeoDataFrame(geometry=voronoi_polygons, \n                               crs='EPSG:4326')\n```", "```py\n# Define the bounding box lat-lon limits:\nmax_lat, min_lat, max_lon, min_lon = (-37.75, -37.9, \n                                      145.18, 144.84)\n\n# Create the bounding box as a Shapely Polygon\nbounding_box = Polygon.from_bounds(min_lon, min_lat, \n                                   max_lon, max_lat)\n\n# Truncate each Voronoi polygon with the bounding box:\ntruncated_polygons = [polygon.intersection(bounding_box) for \n                      polygon in gdf_voronoi.geometry]\n\n# Create a GeoDataFrame with the truncated polygons:\ngdf_truncated = gpd.GeoDataFrame(geometry=truncated_polygons, \n                                 crs='EPSG:4326')\n```", "```py\n# Create a Folium map centered on the average coordinates of the schools:\nmap_center = [gdf['Latitude'].mean(), gdf['Longitude'].mean()]\nschool_map = folium.Map(location=map_center, \n                        zoom_start=12, \n                        tiles='OpenStreetMap')\n\n# Plot the truncated Voronoi polygons on the map:\nfolium.GeoJson(gdf_truncated).add_to(school_map)\n\n# Add markers for each school:\nfor index, school in gdf.iterrows():\n    folium.Marker(\n        location=[school['Latitude'], school['Longitude']],\n        popup=f\"{school['School']}\\n\\\n        {school['Street Address']}\\n{school['Town']}\",\n        icon=folium.Icon(color='blue', icon='home')\n    ).add_to(school_map)\n\n# Save the map as an HTML file (optional):\n# school_map.save('school_voronoi_map_truncated.html')\n\n# Display the map in the notebook:\nschool_map\n```", "```py\nfolium.GeoJson(gdf_truncated, \n               style_function=lambda x: {'fillColor': 'none'}).add_to(school_map)\n```", "```py\n# Read in shapefile of Melbourne City Limits as GeoDataFrame:\ncity_limits = gpd.read_file('municipal-boundary.zip')\n\n# Truncate Voronoi polygons by the city_limits polygon:\ntruncated_polygons = [polygon.intersection(city_limits.geometry.iloc[0]) \n                      for polygon in gdf_voronoi.geometry]\n\n# Create a GeoDataFrame with the truncated polygons:\ngdf_truncated = gpd.GeoDataFrame(geometry=truncated_polygons, \n                                 crs='EPSG:4326')\n\n# Create a Folium map centered on the average coordinates of the schools:\nmap_center = [gdf['Latitude'].mean(), gdf['Longitude'].mean()]\nschool_map = folium.Map(location=map_center, \n                        zoom_start=12, \n                        tiles='OpenStreetMap')\n\n# Plot truncated Voronoi polygons on the map:\nfolium.GeoJson(gdf_truncated).add_to(school_map)\n\n# Add markers for each school:\nfor index, school in gdf.iterrows():\n    folium.Marker(\n        location=[school['Latitude'], school['Longitude']],\n        popup=f\"{school['School']}\\n\\\n        {school['Street Address']}\\n{school['Town']}\",\n        icon=folium.Icon(color='blue', icon='home')\n    ).add_to(school_map)\n\n# Display map in notebook:\nschool_map\n```"]