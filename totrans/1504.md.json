["```py\nactuals = ['p_a', 'p_b']\npredicted = ['p_d', 'p_a', 'p_c', 'p_b', 'p_e', 'p_f']\n```", "```py\ndef apk(y_true, y_pred, k_max=0):\n\n  # Check if all elements in lists are unique\n  if len(set(y_true)) != len(y_true):\n    raise ValueError(\"Values in y_true are not unique\")\n\n  if len(set(y_pred)) != len(y_pred):\n    raise ValueError(\"Values in y_pred are not unique\")\n\n  if k_max != 0:\n    y_pred = y_pred[:k_max]\n\n  correct_predictions = 0\n  running_sum = 0\n\n  for i, yp_item in enumerate(y_pred):\n\n    k = i+1 # our rank starts at 1\n\n    if yp_item in y_true:\n      correct_predictions += 1\n      running_sum += correct_predictions/k\n\n  return running_sum/len(y_true)\n```", "```py\napk(actuals, predicted)\n```", "```py\nactual = ['p_a', 'p_b']\n\npredic = [\n    ['p_a', 'p_b', 'p_c', 'p_d', 'p_e', 'p_f'],\n    ['p_c', 'p_d', 'p_e', 'p_f', 'p_a', 'p_b'],\n    ['p_d', 'p_a', 'p_c', 'p_b', 'p_e', 'p_f'],\n]\n```", "```py\nimport numpy as np\nfrom itertools import product\n\ndef mapk(actuals, predicted, k=0):\n  return np.mean([apk(a,p,k) for a,p in product([actual], predicted)])\n```", "```py\nmapk(actuals, predicted)\n```"]