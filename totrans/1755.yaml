- en: 'Qubit Magic: Creating Mythical Creatures with Quantum Computing'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/qubit-magic-creating-mythical-creatures-with-quantum-computing-49bea0fabf4](https://towardsdatascience.com/qubit-magic-creating-mythical-creatures-with-quantum-computing-49bea0fabf4)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: TUTORIAL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Generating beautiful images with qubits and large language models.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@KoryBecker?source=post_page-----49bea0fabf4--------------------------------)[![Kory
    Becker](../Images/53a2493fe53f215d3e715d456b36c553.png)](https://medium.com/@KoryBecker?source=post_page-----49bea0fabf4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----49bea0fabf4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----49bea0fabf4--------------------------------)
    [Kory Becker](https://medium.com/@KoryBecker?source=post_page-----49bea0fabf4--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----49bea0fabf4--------------------------------)
    ·6 min read·Sep 18, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e61008994db178c8e3ce224c48abc17f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A mythical creature with the quantum state vector [1/√2 e^(π/2)i 1/√2]. Source:
    [Stable Diffusion](https://stablediffusionweb.com).'
  prefs: []
  type: TYPE_NORMAL
- en: What can you do with a qubit?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Think about the nature of a single qubit. It may not appear all that magnificent
    at first glance.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, it may seem that there aren’t many interesting things that just one
    qubit can be used for.
  prefs: []
  type: TYPE_NORMAL
- en: However, with a little [creativity](https://medium.com/towards-data-science/programming-in-3d-my-first-steps-into-quantum-computing-566b9b93929d),
    we can do a lot of impressive feats. One of these includes the fascinating ability
    to generate images, music, and in this article— mythical creatures!
  prefs: []
  type: TYPE_NORMAL
- en: Generating amazing images at the quantum level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visualizing a qubit may seem like a fairly abstract idea. After all, qubits
    are on the microscopic level, making them difficult to grasp.
  prefs: []
  type: TYPE_NORMAL
- en: However, we can leverage the [amazing](/the-magic-of-quantum-computing-a-beginners-guide-to-writing-a-magic-number-guessing-game-c1cdb384f457)
    properties of qubits to visualize them as data in [imaginative](/ghostly-images-and-qubits-a-new-way-to-visualize-quantum-superposition-94b582889549)
    and beautiful ways.
  prefs: []
  type: TYPE_NORMAL
- en: One such method is by leveraging the unique properties of a qubit in order to
    generate descriptive attributes that can be used for the creation of images, sound,
    and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Properties of superposition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quantum computing provides the ability for a qubit to represent two values simultaneously.
    This is a property called [superposition](https://medium.com/towards-data-science/programming-in-3d-my-first-steps-into-quantum-computing-566b9b93929d).
  prefs: []
  type: TYPE_NORMAL
- en: When a qubit is in superposition, it can represent both the values zero and
    one — at the same time. This allows for quadratic and even exponential increases
    in calculations.
  prefs: []
  type: TYPE_NORMAL
- en: When a qubit is in superposition, it holds distinct properties for its magnitude
    and phase. These refer to the spin on the qubit, which also corresponds to its
    likelihood of measuring as a 0 or 1.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bed1bdfb7ee4c70b827ddf4430ee58fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Visualizing a q-sphere with a high probability (83%) of measuring as 1\. Source:
    [Grokking the Bloch Sphere](https://javafxpert.github.io/grok-bloch/).'
  prefs: []
  type: TYPE_NORMAL
- en: We can extract these properties from the qubit and decode them into descriptive
    textual attributes, which can then be used to generate images through large language
    models, such as StableDiffusion, Huggingface, or DALL-E.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the quantum circuit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s begin by creating a quantum circuit using a single qubit. This is shown
    in the example below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, we’ll allow the user to select from a series of [quantum gates](https://arcb.csc.ncsu.edu/~mueller/qc/qc18-2/qc18/readings/quantum_circuits_part1.pdf)
    (X, Y, Z, H, S, T) to apply to the qubit in order to transform its properties.
    Each gate performs a different operation on the qubit, modifying its magnitude
    and phase.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the X-gate [flips](https://quantum.microsoft.com/en-us/explore/concepts/single-qubit-gates)
    the state of a qubit from 0 to 1\. By contrast, the Z, S, and T gates modify the
    phase of a qubit. This has the effect of rotating it around the Z-axis.
  prefs: []
  type: TYPE_NORMAL
- en: Each operation slightly changes the measurement properties of the qubit and
    it’s this precise change that we can leverage for generating unique images!
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining a state vector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the user has performed a series of quantum operations on the qubit, we
    can measure the result and obtain a state vector.
  prefs: []
  type: TYPE_NORMAL
- en: A qubit’s state vector is similar to its fingerprint. It provides a unique view
    for the properties of magnitude and phase that the qubit currently holds.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: An example of a state vector for a qubit is [shown](https://qiskit.org/documentation/stubs/qiskit.visualization.plot_state_city.html)
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '[-0.70710678–4.44089210e-16j -0.70710678–3.33066907e-16j]'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/c831e98e0b6aae976a56135fccb02170.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Visualizing a qubit state vector using a state-city diagram. Source: Author.'
  prefs: []
  type: TYPE_NORMAL
- en: Extracting color, power, and magic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A state vector consists of two components, which we can refer to as alpha and
    beta.
  prefs: []
  type: TYPE_NORMAL
- en: Each component within the state vector can be broken down further into magnitude
    (r) and phase (theta). This results in obtaining four distinct values from a qubit
    (r1, theta1, r2, theta2). We can map these values directly to descriptive text
    attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Since we want to generate images of amazing mythical creatures, the attributes
    that we use can include size, color, power, and magic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the above code example, we’ve defined a list of text attributes for our mythical
    creatures. Each attribute is mapped to the qubit’s state vector.
  prefs: []
  type: TYPE_NORMAL
- en: The result is a sentence that can be used as a prompt for large language model
    image generation.
  prefs: []
  type: TYPE_NORMAL
- en: Generating an LLM prompt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve obtained the attributes for our mythical creature, we need to
    generate the LLM prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Putting the code from above together into a single method, results in the following
    helper method to generate the required text.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The resulting state vector will now be converted into an LLM prompt.
  prefs: []
  type: TYPE_NORMAL
- en: A mythical monster that is large, blue, powerful, magical with the quantum state
    vector [α β].
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Bringing qubits to life as amazing creatures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final step is to breath some life into our qubit’s state vectors by programmatically
    calling an LLM image generation service.
  prefs: []
  type: TYPE_NORMAL
- en: Amazingly, some large language models (Bing’s [DALL-E](https://www.bing.com/images/create))
    understand how to directly interpret quantum computing state vectors as images.
    They can use the vectors directly in order to visualize them in creative ways.
  prefs: []
  type: TYPE_NORMAL
- en: For example, below is a response from Bing’s DALL-E, after being asked to create
    an image based upon a quantum state vector.
  prefs: []
  type: TYPE_NORMAL
- en: The insect has two wings that are shaped like the quantum state vector [-0.70710678–4.44089210e-16j
    -0.70710678–3.33066907e-16j], with the real and imaginary parts represented by
    the length and angle of the wings respectively.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This powerful capability of LLMs is further demonstrated below through visualization
    of a qubit’s state vector, in combination with the descriptive attributes from
    our program.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ced9e7b5795833057527cb03df709402.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A mythical creature that is large, orange, powerful, magical with the quantum
    state vector [-1/√2 -i/√2]. Source: [Stable Diffusion](https://stablediffusionweb.com).'
  prefs: []
  type: TYPE_NORMAL
- en: The full source code can be found [here](https://gist.github.com/primaryobjects/7af184fc839094f7a9bcd09cbbc9d761).
  prefs: []
  type: TYPE_NORMAL
- en: Potential of real-world applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generating content from qubits through large language models has the potential
    to go far beyond images. In fact, with a little [creativity](https://www.primaryobjects.com/2022/01/22/quantum-computing-hello-world/)
    and [practice](https://www.primaryobjects.com/2021/09/15/the-ultimate-guide-to-a-quantum-computing-certification-with-qiskit/),
    this technology holds real-world applications as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the idea of generating more abstract products from quantum computing
    states. Examples may include:'
  prefs: []
  type: TYPE_NORMAL
- en: Poetry or written stories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Music or speech
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business ideas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diagrams and charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LLMs excel at producing a variety of content and can do so in combination with
    the power of quantum computing.
  prefs: []
  type: TYPE_NORMAL
- en: The sky is the limit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope this article piques your excitement into quantum computing and opens
    the door to even more possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: By combining two incredible emerging technologies of quantum computing and LLMs,
    and sprinkling in a bit of imagination, we can bring forward incredible possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it’s your turn!
  prefs: []
  type: TYPE_NORMAL
- en: About the Author
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you’ve enjoyed this article, please consider following me on [Medium](https://medium.com/@KoryBecker),
    [Twitter](https://twitter.com/PrimaryObjects), and my [website](https://primaryobjects.com/)
    to be notified of my future posts and research work.
  prefs: []
  type: TYPE_NORMAL
