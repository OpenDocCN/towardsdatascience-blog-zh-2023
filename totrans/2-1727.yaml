- en: 'Python Lists: The Definitive Guide for Working With Ordered Collections of
    Data'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 列表：处理有序数据集合的终极指南
- en: 原文：[https://towardsdatascience.com/python-lists-the-definitive-guide-for-working-with-ordered-collections-of-data-53b06a194826](https://towardsdatascience.com/python-lists-the-definitive-guide-for-working-with-ordered-collections-of-data-53b06a194826)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/python-lists-the-definitive-guide-for-working-with-ordered-collections-of-data-53b06a194826](https://towardsdatascience.com/python-lists-the-definitive-guide-for-working-with-ordered-collections-of-data-53b06a194826)
- en: A comprehensive guide on lists in Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 列表的全面指南
- en: '[](https://federicotrotta.medium.com/?source=post_page-----53b06a194826--------------------------------)[![Federico
    Trotta](../Images/e997e3a96940c16ab5071629016d82fd.png)](https://federicotrotta.medium.com/?source=post_page-----53b06a194826--------------------------------)[](https://towardsdatascience.com/?source=post_page-----53b06a194826--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----53b06a194826--------------------------------)
    [Federico Trotta](https://federicotrotta.medium.com/?source=post_page-----53b06a194826--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://federicotrotta.medium.com/?source=post_page-----53b06a194826--------------------------------)[![Federico
    Trotta](../Images/e997e3a96940c16ab5071629016d82fd.png)](https://federicotrotta.medium.com/?source=post_page-----53b06a194826--------------------------------)[](https://towardsdatascience.com/?source=post_page-----53b06a194826--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----53b06a194826--------------------------------)
    [Federico Trotta](https://federicotrotta.medium.com/?source=post_page-----53b06a194826--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----53b06a194826--------------------------------)
    ·10 min read·Jul 19, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----53b06a194826--------------------------------)
    ·10 分钟阅读·2023 年 7 月 19 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/f7fec4e1603355e89c91a3e935b6ae4c.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f7fec4e1603355e89c91a3e935b6ae4c.png)'
- en: Image by [Jill Wellington](https://pixabay.com/it/users/jillwellington-334088/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1902136)
    on [Pixabay](https://pixabay.com/it//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1902136)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Jill Wellington](https://pixabay.com/it/users/jillwellington-334088/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1902136)
    提供，来源于 [Pixabay](https://pixabay.com/it//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1902136)
- en: When programming, we always have to deal with data structures. What I mean is
    that we need to store information somewhere so that we can reuse it later.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程时，我们总是需要处理数据结构。我的意思是，我们需要将信息存储在某个地方，以便以后可以重新使用。
- en: Python is a very flexible programming language and gives us the possibility
    to use different types of data structures.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种非常灵活的编程语言，给我们提供了使用不同类型数据结构的可能性。
- en: In this article, we’ll analyze Python lists. So, if you’re a beginner in Python
    and are searching for a comprehensive guide on lists, then this article is definitely
    for you.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将分析 Python 列表。因此，如果你是 Python 初学者，并且正在寻找关于列表的全面指南，那么这篇文章绝对适合你。
- en: 'Here’s what you’ll learn here:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里你将学到：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What is a list in Python?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Python 列表？
- en: In Python, a list is a built-in data structure that allows us to store and manipulate
    data in the form of text or numbers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，列表是一种内置的数据结构，允许我们以文本或数字的形式存储和操作数据。
- en: Lists store data in an ordered way, meaning that the elements of a list can
    be accessed by their position.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 列表以有序的方式存储数据，这意味着可以通过位置访问列表中的元素。
- en: Lists are also a modifiable kind of data structure, as opposed to [tuples](/lists-tuples-dictionaries-and-data-frames-in-python-the-complete-guide-7ab54d4819ee).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 列表也是一种可修改的数据结构，与 [元组](/lists-tuples-dictionaries-and-data-frames-in-python-the-complete-guide-7ab54d4819ee)
    相对。
- en: Finally, lists can also store duplicated values without raising errors.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，列表还可以存储重复的值而不会引发错误。
- en: The top 9 features in Python lists, with examples
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 列表的 9 大特性及示例
- en: The best way to learn Python is by putting our fingers on the keyboard and,
    possibly, solving an actual problem.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 学习 Python 的最佳方式是亲自上手敲代码，并且尽可能地解决实际问题。
- en: 'So, now we’ll show the 9 top features of Python lists with code examples because,
    as we’ll see, theory doesn’t have much sense in programming: we just need to code
    and solve problems.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在我们将通过代码示例展示 Python 列表的 9 个主要特性，因为正如我们将看到的，理论在编程中意义不大：我们只需要编写代码并解决问题。
- en: How to create a list in Python
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在 Python 中创建列表
- en: 'To create a list, we need to use square brackets:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建列表，我们需要使用方括号：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Another way to create a list is by using the built-in method `list`. For example,
    suppose we want to create a list of numbers ranging from 0 to 9\. We can use the
    built-in method `range` to create the range, then we can pass it as an argument
    to the method `list` to create the list like so:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 创建列表的另一种方法是使用内置方法 `list`。例如，假设我们想创建一个包含从 0 到 9 的数字的列表。我们可以使用内置方法 `range` 来创建这个范围，然后将其作为参数传递给
    `list` 方法来创建列表，如下所示：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Also, we can create the so-called list of lists that are nothing more than
    nested lists. For example, suppose we want to store the data related to measured
    times, in seconds, of people running. If we need these data as a list we can create
    a list of lists like so:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以创建所谓的列表中的列表，即嵌套列表。例如，假设我们想存储与跑步的人测量时间（以秒为单位）相关的数据。如果我们需要这些数据作为列表，我们可以像这样创建一个列表的列表：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Accessing list elements
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问列表元素
- en: 'The elements of a list can be accessed by their positions. What we need to
    remember is that in Python we start counting from 0\. This means that the first
    element is accessed with a 0:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的元素可以通过其位置访问。我们需要记住的是，在 Python 中，我们从 0 开始计数。这意味着第一个元素通过 0 访问：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: So, we just need to take care to make the right counting.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们只需要注意正确计数。
- en: Accessing a list of lists is a little bit more complicated, but is not hard.
    We first need to access the position related to the external list, then we count
    in the internal one.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 访问列表中的列表稍微复杂一些，但并不难。我们首先需要访问与外部列表相关的位置，然后在内部列表中计数。
- en: 'As we’ve said, practice is better than theory in Python. So, let''s show this
    concept with an example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所说的，实践胜于理论。在 Python 中，我们用一个例子来展示这个概念：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Jhon is the first registered runner, so we access it with `times[0]`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Jhon 是第一个登记的跑步者，因此我们用 `times[0]` 访问它。
- en: 'Then, we want to calculate his first registered time. To do so, we have to
    type `times[1][0]` because: `[1]` refers to the second position, with respect
    to the external list. Meaning that we’ve accessed the internal list `[23, 15,
    18]`. Finally, the `[0]` accesses the first number of the internal list which,
    indeed, is 23.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们想计算他第一次登记的时间。为此，我们需要输入 `times[1][0]`，因为：[1] 表示第二个位置，相对于外部列表。意思是我们访问了内部列表
    `[23, 15, 18]`。最后，`[0]` 访问了内部列表中的第一个数字，确实是 23。
- en: Modifying the elements of a list
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改列表中的元素
- en: As we’ve said, lists are modifiable and to modify an element of a list we need
    to access it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所说，列表是可修改的，要修改列表中的元素，我们需要访问它。
- en: 'So, let’s make an example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们做一个例子：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: So, in this case, we’ve modified the third element changing it from 3 to 10.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在这种情况下，我们修改了第三个元素，将其从 3 改为 10。
- en: 'But we can also modify text. In particular, sentences. Let’s see an example:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以修改文本，特别是句子。让我们看一个例子：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: So, here we’ve substituted all the letters in our list “sentence” from the seventh
    (make the count start from 0, as we’ve said before) element to the last one with
    `sentence[7:]`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在这里，我们用 `sentence[7:]` 替换了列表 "sentence" 中从第七个（从 0 开始计数，如前所述）元素到最后一个元素的所有字母。
- en: 'We’ve, then, used the method `''''.join(sentence)` to print the sentence as
    a whole one. In fact, if we’d just used `print()` it would print the letters as
    single elements like so:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用了 `''.join(sentence)` 方法来将句子作为一个整体打印。事实上，如果我们只是使用 `print()`，它会将字母逐个打印，如下所示：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Adding elements to a list
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向列表中添加元素
- en: Since lists are mutable, we can add new elements to them, if we need it and
    we have a couple of methods to do so.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于列表是可变的，我们可以向其中添加新元素，如果需要，并且我们有几种方法可以做到这一点。
- en: 'The first one is to use the `append()` method which is particularly suitable
    if we need to add just one element to a list. For example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是使用 `append()` 方法，这在我们只需要向列表中添加一个元素时特别适用。例如：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Another way to add elements to an existing list is by using the `extend()`
    method which is particularly suitable if we need to append more than one element
    at a time. For example, like so:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 向现有列表中添加元素的另一种方法是使用 `extend()` 方法，这在需要一次添加多个元素时特别适用。例如，如下所示：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Removing elements from a list
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从列表中移除元素
- en: Thanks to mutability, we can add elements to a list but we can even remove elements.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于可变性，我们可以向列表中添加元素，也可以删除元素。
- en: 'Also here, we have two ways to do so: we can use the slicing possibility or
    we can directly specify an element to delete.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有两种方法：我们可以使用切片功能，或者可以直接指定要删除的元素。
- en: 'Let’s see these with Python examples:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过 Python 示例来看看这些：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: So, the `remove()` method gives us the possibility to directly delete a specific
    element from a list by typing its value.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，`remove()` 方法允许我们通过输入其值直接从列表中删除特定元素。
- en: 'The other method we can use is to access the position of the element we want
    to remove like so:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用的另一种方法是通过以下方式访问我们想要删除的元素的位置：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: So, the `pop()` method removes an element from a list by accessing its index.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`pop()` 方法通过访问索引从列表中删除一个元素。
- en: Which one to use? It depends on the situation. If we have a very long list,
    it’s generally a good idea to use the `remove()` method so that we directly write
    the element we actually want to remove, and we don’t make mistakes in counting
    the indexes.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 选择使用哪一个？这取决于情况。如果我们有一个非常长的列表，通常使用 `remove()` 方法是个好主意，这样我们可以直接写出我们实际上想要删除的元素，而不会在计算索引时出错。
- en: Concatenating lists
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合并列表
- en: The mutability of lists gives us the possibility to perform numerous tasks,
    like concatenating multiple lists together in one single list.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 列表的可变性使我们能够执行许多任务，例如将多个列表合并成一个列表。
- en: 'This operation is simple and is performed with a `+` like so:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作很简单，使用 `+` 来进行，如下所示：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This feature can, of course, be performed even with strings:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个功能也可以在字符串上执行：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Another way to concatenate lists is to flatten a list of lists. In other words,
    we can create a single “straight” list from a nested list like so:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种合并列表的方法是将嵌套列表展平。换句话说，我们可以从嵌套列表中创建一个单一的“直线”列表，如下所示：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: So, basically, we’ve used the `sum()` method to get all the elements of the
    list `lists` and appended them to an empty list with `[]`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们使用 `sum()` 方法来获取列表 `lists` 中的所有元素，并将它们附加到一个空列表 `[]` 中。
- en: Calculating the length of a list
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算列表的长度
- en: In the previous examples, we’ve created lists ourselves to make Python examples
    about how to manipulate lists.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们自己创建了列表，以演示如何操作列表的 Python 示例。
- en: However, when working with Python, it often happens that we retrieve data from
    different sources, meaning someone created a list we actually don’t know anything
    about.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当使用 Python 时，常常会从不同的来源检索数据，这意味着有人创建了一个我们实际上不知情的列表。
- en: 'The first thing we’d better do when we are in front of an unknown list is to
    calculate its length. We can do it like so:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们面对一个未知列表时，我们最好先计算它的长度。我们可以这样做：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'So, the method `len()` calculates how many elements are in a list, without
    worrying about their type. This means that the elements can be all numbers, all
    strings, or both of them: the `len()` methods will count them all.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，`len()` 方法计算列表中有多少个元素，而不必担心它们的类型。这意味着元素可以是所有数字、所有字符串，或两者兼有：`len()` 方法会统计它们全部。
- en: Sorting the elements of a list
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对列表元素进行排序
- en: Another action we may perform when we don’t know a list is to sort its elements.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们不知道列表的内容时，另一个可能执行的操作是对其元素进行排序。
- en: We have different methods to do so.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有不同的方法来实现这一点。
- en: 'Let''s start with the `sort()` method:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 `sort()` 方法开始：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: So, we can just pass the list as the argument to the `sort()` method and it
    will sort the elements.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以直接将列表作为参数传递给 `sort()` 方法，它将对元素进行排序。
- en: 'But what if we want to sort a list containing strings? For example, suppose
    we want to sort the elements of a list in alphabetical order. We can do it like
    so:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们想要排序一个包含字符串的列表呢？例如，假设我们想要按字母顺序对列表中的元素进行排序。我们可以这样做：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'So, in this case, we use the `sorted()` method where we have to specify:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这种情况下，我们使用 `sorted()` 方法，需要指定：
- en: The parameters regarding the list we want to sort. In this case, `words`.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于我们想要排序的列表的参数。在这种情况下，是 `words`。
- en: 'The `key`. Which means we need to specify a methodology. In this case, we’ve
    used a lambda function that gets the first letter of each element with `x[0]`
    by iterating through all the elements: this is the way we can select the first
    letter for each word.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key`。这意味着我们需要指定一种方法。在这种情况下，我们使用了一个 lambda 函数，通过 `x[0]` 获取每个元素的第一个字母，遍历所有元素：这是我们选择每个单词第一个字母的方式。'
- en: 'Another way to sort strings is to sort them by the number of characters for
    each element. In other words, suppose we want to have the shorter words at the
    beginning and the longest at the end of our list. We can do it like so:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对字符串进行排序的另一种方式是按每个元素的字符数进行排序。换句话说，假设我们想要将较短的单词放在列表的开头，而将最长的单词放在末尾。我们可以这样做：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: So, even with the `sort()` method we can pass a parameter `key`. In this case,
    we’ve chosen `len` which counts the length of each word. So, the list is now ordered
    starting with the shortest words and ending with the longest ones.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，即使使用`sort()`方法，我们也可以传递一个参数`key`。在这种情况下，我们选择了`len`，它计算每个单词的长度。因此，列表现在是按照从最短的单词到最长的单词的顺序排列的。
- en: List comprehension
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表推导式
- en: List comprehension is a fast and concise way to create a new list using the
    power of loops and statements with one line of code.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 列表推导式是一种快速且简洁的方式，通过一行代码使用循环和语句的力量创建一个新列表。
- en: 'Let’s see an example. Suppose we want to take the numbers ranging from 1 to
    6 and create a list with their squared values. We can do it like so:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。假设我们想取1到6的数字，并创建一个包含它们平方值的列表。我们可以这样做：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, we can reach the same result without using list comprehension but at the
    cost of a lot of code like so:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以不使用列表推导式而达到相同的结果，但需要大量代码，如下所示：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: So, we get the same result but list comprehension makes us reach it with just
    one line of code.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们得到相同的结果，但列表推导式使我们只需一行代码即可实现。
- en: We can also use `if` statements in a list comprehension, making it way quicker
    and elegant than the “standard method”, for which we’d need to iterate with a
    `for` loop, and then select the values we need with an `if` statement.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在列表推导式中使用`if`语句，这使得它比“标准方法”更加快捷和优雅，对于标准方法，我们需要使用`for`循环进行迭代，然后用`if`语句选择所需的值。
- en: 'For example, suppose we want to create a new list of squared numbers, but we
    want only the ones that are even numbers. We can do it like so:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们想创建一个新的平方数列表，但只想要偶数。我们可以这样做：
- en: '[PRE22]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'So, here we need to remember that to take even numbers we can use the fact
    that they are divisible by two. So, `x % 2 == 0` gets the numbers that, when divided
    by two, give a reminder of 0\. Meaning: they’re even numbers.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要记住，为了取得偶数，我们可以利用它们能被2整除的事实。所以，`x % 2 == 0` 获取那些被2除时余数为0的数字。也就是说：它们是偶数。
- en: Conclusions
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we’ve shown a comprehensive guide on Python lists.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们展示了关于Python列表的全面指南。
- en: Lists are a very important and useful data structure. They’re not hard to learn,
    but are a fundamental asset for every Python programmer.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 列表是一种非常重要且有用的数据结构。它们不难学习，但对于每个Python程序员来说都是一个基本资产。
- en: '![](../Images/5079e3af9eda458328cb258c452fb935.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5079e3af9eda458328cb258c452fb935.png)'
- en: Federico Trotta
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Federico Trotta
- en: I’m Federico Trotta and I’m a freelance Technical Writer.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我是Federico Trotta，我是一名自由技术写作员。
- en: Want to collaborate with me? [Contact me](https://bio.link/federicotrotta).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 想与我合作吗？[联系我](https://bio.link/federicotrotta)。
