- en: 'Python Lists: The Definitive Guide for Working With Ordered Collections of
    Data'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/python-lists-the-definitive-guide-for-working-with-ordered-collections-of-data-53b06a194826](https://towardsdatascience.com/python-lists-the-definitive-guide-for-working-with-ordered-collections-of-data-53b06a194826)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A comprehensive guide on lists in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://federicotrotta.medium.com/?source=post_page-----53b06a194826--------------------------------)[![Federico
    Trotta](../Images/e997e3a96940c16ab5071629016d82fd.png)](https://federicotrotta.medium.com/?source=post_page-----53b06a194826--------------------------------)[](https://towardsdatascience.com/?source=post_page-----53b06a194826--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----53b06a194826--------------------------------)
    [Federico Trotta](https://federicotrotta.medium.com/?source=post_page-----53b06a194826--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----53b06a194826--------------------------------)
    ·10 min read·Jul 19, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f7fec4e1603355e89c91a3e935b6ae4c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Jill Wellington](https://pixabay.com/it/users/jillwellington-334088/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1902136)
    on [Pixabay](https://pixabay.com/it//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1902136)
  prefs: []
  type: TYPE_NORMAL
- en: When programming, we always have to deal with data structures. What I mean is
    that we need to store information somewhere so that we can reuse it later.
  prefs: []
  type: TYPE_NORMAL
- en: Python is a very flexible programming language and gives us the possibility
    to use different types of data structures.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we’ll analyze Python lists. So, if you’re a beginner in Python
    and are searching for a comprehensive guide on lists, then this article is definitely
    for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what you’ll learn here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: What is a list in Python?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python, a list is a built-in data structure that allows us to store and manipulate
    data in the form of text or numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Lists store data in an ordered way, meaning that the elements of a list can
    be accessed by their position.
  prefs: []
  type: TYPE_NORMAL
- en: Lists are also a modifiable kind of data structure, as opposed to [tuples](/lists-tuples-dictionaries-and-data-frames-in-python-the-complete-guide-7ab54d4819ee).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, lists can also store duplicated values without raising errors.
  prefs: []
  type: TYPE_NORMAL
- en: The top 9 features in Python lists, with examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to learn Python is by putting our fingers on the keyboard and,
    possibly, solving an actual problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, now we’ll show the 9 top features of Python lists with code examples because,
    as we’ll see, theory doesn’t have much sense in programming: we just need to code
    and solve problems.'
  prefs: []
  type: TYPE_NORMAL
- en: How to create a list in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a list, we need to use square brackets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to create a list is by using the built-in method `list`. For example,
    suppose we want to create a list of numbers ranging from 0 to 9\. We can use the
    built-in method `range` to create the range, then we can pass it as an argument
    to the method `list` to create the list like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we can create the so-called list of lists that are nothing more than
    nested lists. For example, suppose we want to store the data related to measured
    times, in seconds, of people running. If we need these data as a list we can create
    a list of lists like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Accessing list elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The elements of a list can be accessed by their positions. What we need to
    remember is that in Python we start counting from 0\. This means that the first
    element is accessed with a 0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: So, we just need to take care to make the right counting.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing a list of lists is a little bit more complicated, but is not hard.
    We first need to access the position related to the external list, then we count
    in the internal one.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we’ve said, practice is better than theory in Python. So, let''s show this
    concept with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Jhon is the first registered runner, so we access it with `times[0]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we want to calculate his first registered time. To do so, we have to
    type `times[1][0]` because: `[1]` refers to the second position, with respect
    to the external list. Meaning that we’ve accessed the internal list `[23, 15,
    18]`. Finally, the `[0]` accesses the first number of the internal list which,
    indeed, is 23.'
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the elements of a list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we’ve said, lists are modifiable and to modify an element of a list we need
    to access it.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s make an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: So, in this case, we’ve modified the third element changing it from 3 to 10.
  prefs: []
  type: TYPE_NORMAL
- en: 'But we can also modify text. In particular, sentences. Let’s see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: So, here we’ve substituted all the letters in our list “sentence” from the seventh
    (make the count start from 0, as we’ve said before) element to the last one with
    `sentence[7:]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve, then, used the method `''''.join(sentence)` to print the sentence as
    a whole one. In fact, if we’d just used `print()` it would print the letters as
    single elements like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Adding elements to a list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since lists are mutable, we can add new elements to them, if we need it and
    we have a couple of methods to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first one is to use the `append()` method which is particularly suitable
    if we need to add just one element to a list. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to add elements to an existing list is by using the `extend()`
    method which is particularly suitable if we need to append more than one element
    at a time. For example, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Removing elements from a list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Thanks to mutability, we can add elements to a list but we can even remove elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also here, we have two ways to do so: we can use the slicing possibility or
    we can directly specify an element to delete.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see these with Python examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: So, the `remove()` method gives us the possibility to directly delete a specific
    element from a list by typing its value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other method we can use is to access the position of the element we want
    to remove like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: So, the `pop()` method removes an element from a list by accessing its index.
  prefs: []
  type: TYPE_NORMAL
- en: Which one to use? It depends on the situation. If we have a very long list,
    it’s generally a good idea to use the `remove()` method so that we directly write
    the element we actually want to remove, and we don’t make mistakes in counting
    the indexes.
  prefs: []
  type: TYPE_NORMAL
- en: Concatenating lists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The mutability of lists gives us the possibility to perform numerous tasks,
    like concatenating multiple lists together in one single list.
  prefs: []
  type: TYPE_NORMAL
- en: 'This operation is simple and is performed with a `+` like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This feature can, of course, be performed even with strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to concatenate lists is to flatten a list of lists. In other words,
    we can create a single “straight” list from a nested list like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: So, basically, we’ve used the `sum()` method to get all the elements of the
    list `lists` and appended them to an empty list with `[]`.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the length of a list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous examples, we’ve created lists ourselves to make Python examples
    about how to manipulate lists.
  prefs: []
  type: TYPE_NORMAL
- en: However, when working with Python, it often happens that we retrieve data from
    different sources, meaning someone created a list we actually don’t know anything
    about.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we’d better do when we are in front of an unknown list is to
    calculate its length. We can do it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'So, the method `len()` calculates how many elements are in a list, without
    worrying about their type. This means that the elements can be all numbers, all
    strings, or both of them: the `len()` methods will count them all.'
  prefs: []
  type: TYPE_NORMAL
- en: Sorting the elements of a list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another action we may perform when we don’t know a list is to sort its elements.
  prefs: []
  type: TYPE_NORMAL
- en: We have different methods to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with the `sort()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: So, we can just pass the list as the argument to the `sort()` method and it
    will sort the elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'But what if we want to sort a list containing strings? For example, suppose
    we want to sort the elements of a list in alphabetical order. We can do it like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'So, in this case, we use the `sorted()` method where we have to specify:'
  prefs: []
  type: TYPE_NORMAL
- en: The parameters regarding the list we want to sort. In this case, `words`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `key`. Which means we need to specify a methodology. In this case, we’ve
    used a lambda function that gets the first letter of each element with `x[0]`
    by iterating through all the elements: this is the way we can select the first
    letter for each word.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Another way to sort strings is to sort them by the number of characters for
    each element. In other words, suppose we want to have the shorter words at the
    beginning and the longest at the end of our list. We can do it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: So, even with the `sort()` method we can pass a parameter `key`. In this case,
    we’ve chosen `len` which counts the length of each word. So, the list is now ordered
    starting with the shortest words and ending with the longest ones.
  prefs: []
  type: TYPE_NORMAL
- en: List comprehension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: List comprehension is a fast and concise way to create a new list using the
    power of loops and statements with one line of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see an example. Suppose we want to take the numbers ranging from 1 to
    6 and create a list with their squared values. We can do it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can reach the same result without using list comprehension but at the
    cost of a lot of code like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: So, we get the same result but list comprehension makes us reach it with just
    one line of code.
  prefs: []
  type: TYPE_NORMAL
- en: We can also use `if` statements in a list comprehension, making it way quicker
    and elegant than the “standard method”, for which we’d need to iterate with a
    `for` loop, and then select the values we need with an `if` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, suppose we want to create a new list of squared numbers, but we
    want only the ones that are even numbers. We can do it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'So, here we need to remember that to take even numbers we can use the fact
    that they are divisible by two. So, `x % 2 == 0` gets the numbers that, when divided
    by two, give a reminder of 0\. Meaning: they’re even numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we’ve shown a comprehensive guide on Python lists.
  prefs: []
  type: TYPE_NORMAL
- en: Lists are a very important and useful data structure. They’re not hard to learn,
    but are a fundamental asset for every Python programmer.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5079e3af9eda458328cb258c452fb935.png)'
  prefs: []
  type: TYPE_IMG
- en: Federico Trotta
  prefs: []
  type: TYPE_NORMAL
- en: I’m Federico Trotta and I’m a freelance Technical Writer.
  prefs: []
  type: TYPE_NORMAL
- en: Want to collaborate with me? [Contact me](https://bio.link/federicotrotta).
  prefs: []
  type: TYPE_NORMAL
