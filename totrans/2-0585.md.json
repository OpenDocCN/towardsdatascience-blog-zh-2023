["```py\ndef primecounter_py(range_from:int, range_til:int) -> (int, int):\n  \"\"\" Returns the number of found prime numbers using range\"\"\"\n  check_count = 0\n  prime_count = 0\n  range_from = range_from if range_from >= 2 else 2\n  for num in range(range_from, range_til + 1):\n    for divnum in range(2, num):\n      check_count += 1\n      if ((num % divnum) == 0):\n        break\n    else:\n      prime_count += 1\n  return prime_count, check_count\n```", "```py\nrange      milliseconds\n1-1K                  4\n1-10K               310\n1-25K              1754\n1-50K              6456\n1-75K             14019\n1-100K            24194\n```", "```py\npython -m venv venv\nsource venv/bin/activate\npip install maturin\n```", "```py\nmkdir my_rust_module\ncd my_rust_module\n```", "```py\nmy_folder\n |- venv\n |- my_rust_module\n   |- .github\n   |- src\n    |- lib.rs\n   |- .gitignore\n   |- Cargo.toml\n   |- pyproject.toml\n```", "```py\n[package]\nname = \"my_rust_module\"\nversion = \"0.1.0\"\nedition = \"2021\"\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n[lib]\nname = \"my_rust_module\"\ncrate-type = [\"cdylib\"]\n[dependencies]\npyo3 = { version = \"0.17.3\", features = [\"extension-module\"] }\n```", "```py\nuse pyo3::prelude::*;\n\n#[pyfunction]\nfn primecounter(range_from:u64, range_til:u64) -> (u32, u32) {\n /* Returns the number of found prime numbers between [range_from] and [range_til] \"\"\" */\n let mut prime_count:u32 = 0;\n let mut check_count:u32 = 0;\n let _from:u64 = if range_from < 2 { 2 } else { range_from };\n let mut prime_found:bool;\n\n  for num in _from..=range_til {\n    prime_found = false;\n    for divnum in 2..num {\n      check_count += 1;\n      if num % divnum == 0 {\n        prime_found = true;\n        break;\n      }\n    }\n    if !prime_found {\n      prime_count += 1;\n    }\n  }\n  return (prime_count, check_count)\n}\n\n/// Put the function in a Python module\n#[pymodule]\nfn my_rust_module(_py: Python, m: &PyModule) -> PyResult<()> {\n    m.add_function(wrap_pyfunction!(primecounter, m)?)?;\n    Ok(())\n}\n```", "```py\npip install target/wheels/my_rust_module-0.1.0-cp39-cp39-manylinux_2_28_x86_64.whl\n```", "```py\nimport my_rust_module\n\nprimecount, eval_count = my_rust_module.primecounter(range_from=0, range_til=500)\n# returns 95 22279\n```", "```py\nrange   Py ms   py e/sec    rs ms   rs e/sec\n1-1K        4      17.6M     0.19       417M\n1-10K     310      18.6M       12       481M\n1-25K    1754      18.5M       66       489M\n1-50K    6456      18.8M      248       488M\n1-75K   14019      18.7M      519       505M\n1-100K  24194      18.8M      937       485M\n```", "```py\n# batch size is determined by the range divided over the amount of available CPU's \nbatch_size = math.ceil((range_til - range_from) / mp.cpu_count())\n\n# The lines below divide the ranges over all available CPU's. \n# A range of 0 - 10 will be divided over 4 cpu's like:\n# [(0, 2), (3, 5), (6, 8), (9, 9)]\nnumber_list = list(range(range_from, range_til))\nnumber_list = [number_list[i * batch_size:(i + 1) * batch_size] for i in range((len(number_list) + batch_size - 1) // batch_size)]\nnumber_list_from_til = [(min(chunk), max(chunk)) for chunk in number_list]\n\nprimecount = 0\neval_count = 0\nwith mp.Pool() as \n    results = mp_pool.starmap(my_rust_module.primecounter, number_list_from_til)\n    for _count, _evals in results:\n        primecount += _count\n        eval_count += _evals\n```", "```py\n calculations     duration    calculations/sec\nrust:            455.19M    882.03 ms          516.1M/sec\nrust MP:         455.19M    160.62 ms            2.8B/sec\n```"]