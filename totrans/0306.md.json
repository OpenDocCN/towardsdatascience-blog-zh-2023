["```py\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport pysal\nimport splot\nimport re\nimport seaborn as sns\nimport folium\n\n# For points map\nimport geoplot.crs as gcrs\nimport geoplot as gplt\n```", "```py\n# Open listings file\nlistings = pd.read_csv('/content/listings.csv',\n                       usecols=['id', 'property_type', 'neighbourhood_cleansed',\n                                'bedrooms', 'beds', 'bathrooms_text', 'price',\n                                'latitude','longitude'])\n#listings.columns\nlistings.sample(4)\n```", "```py\n# Correct Price to Float (Replace $ and , with nothing)\nlistings['price'] = (listings['price']\n                     .replace(\"[$,]\", \"\", regex=True)\n                     .astype(float)\n                     )\n```", "```py\n#price stats\nlistings.price.describe()\n\ncount    3239.000000\nmean      179.771843\nstd       156.068212\nmin        14.000000\n25%        95.000000\n50%       135.000000\n75%       212.500000\nmax      2059.000000\nName: price, dtype: float64\n```", "```py\n# Check price range\nsns.displot(listings['price'], kde=True);\n```", "```py\n# Convert Pandas df to Geopandas df\nlistings_gpd = gpd.GeoDataFrame(listings,\n                                     geometry=gpd.points_from_xy(listings.longitude, listings.latitude, crs=4326))\n\n# Look at the geometry variable created\nlistings_gpd.head(2)\n```", "```py\n# Points map using geoplot\nax = gplt.webmap(listings_gpd.query('price < 538'), projection=gcrs.WebMercator())\ngplt.pointplot(listings_gpd.query('price < 538'), ax=ax, hue= 'price', legend=True);\n```", "```py\n# Reading the Asheville polygon shapefile (geojson)\ngeofile = '/content/neighbourhoods.geojson'\nasheville = gpd.read_file(geofile)\nasheville = asheville.to_crs(4326)\n```", "```py\n# Heatmap\nax = gplt.kdeplot(listings_gpd,\n          fill=True, cmap='Reds',\n          clip=asheville.geometry,\n          projection=gcrs.WebMercator())\n\n# Plotting the heatmap on top of the geometry\ngplt.polyplot(asheville, ax=ax, zorder=1);\n```", "```py\nfrom numpy import Inf\n# Create clip levels for prices\nlistings['price_bins']= pd.cut(listings.price,\n       bins= [-Inf, 100, 200, 300, 400, 500, Inf],\n       labels= ['0-100', '100-200', '200-300', '300-400', '400-500', '500+'])\n\n# Create bin colors\nlistings['colors'] = listings.price_bins.map({'0-100': 'lightblue', '100-200':'blue', '200-300':'gold', '300-400':'orange', '400-500':'red', '500+':'black'})\n```", "```py\n# Creating a base map\nm = folium.Map(location= [35.5951, -82.5515], zoom_start=10)\n```", "```py\n# Adding the points\nfor lat, lon, ptcolor in zip(listings.latitude, listings.longitude, listings.colors):\n  folium.CircleMarker(\n     location=[lat, lon],\n     radius=2,\n     opacity=0.5,\n     color=ptcolor,\n     fill=True,\n     fill_color=ptcolor,\n  ).add_to(m)\n```", "```py\nfrom folium import plugins\n\n# Preparing data for plot\ndata = listings[['latitude','longitude', 'price']].values\ndata =data.tolist()\n\n# Create Heat Map with Folium\nhm = plugins.HeatMap(data,gradient={0.1: 'blue', 0.2: 'lime', 0.4: 'yellow', 0.6: 'orange', 0.9: 'red'}, \n                min_opacity=0.1, \n                max_opacity=0.9, \n                radius=20,\n                use_local_extrema=False)\n\n# Add to base map\nhm.add_to(m);\n\n# Display\nm\n```", "```py\n# Add a choropleth layer\nfolium.Choropleth(\n    geo_data=asheville,\n    name=\"choropleth\",\n    data=listings,\n    columns=[\"neighbourhood\", \"price\"],\n    key_on=\"feature.properties.neighbourhood\",\n    fill_color=\"RdBu_r\",\n    fill_opacity=0.5,\n    line_opacity=0.5,\n    legend_name=\"Prices\",\n).add_to(m)\nm\n```", "```py\n# Base map with Terrain mode\nm = folium.Map(location= [35.5951, -82.5515], zoom_start=10, tiles=\"Stamen Terrain\")\n\n# Add a choropleth layer to a terrain map\nfolium.Choropleth(\n    geo_data=asheville,\n    name=\"choropleth\",\n    data=listings,\n    columns=[\"neighbourhood\", \"price\"],\n    key_on=\"feature.properties.neighbourhood\",\n    fill_color=\"RdBu_r\",\n    fill_opacity=0.5,\n    line_opacity=0.5,\n    legend_name=\"Prices\",\n).add_to(m)\nm\n```"]