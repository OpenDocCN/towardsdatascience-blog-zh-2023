- en: Why You Should Consider Using Fortran As A Data Scientist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/why-you-should-consider-using-fortran-as-a-data-scientist-5511e05ef89](https://towardsdatascience.com/why-you-should-consider-using-fortran-as-a-data-scientist-5511e05ef89)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An exploration of the benefits that Fortran can bring to Data Science and Machine
    Learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@egorhowell?source=post_page-----5511e05ef89--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----5511e05ef89--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5511e05ef89--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5511e05ef89--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----5511e05ef89--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5511e05ef89--------------------------------)
    ·8 min read·May 16, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/772008d4d916c3876973f8c2bc8645f4.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Federica Galli](https://unsplash.com/@fedechanw?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is widely considered the gold standard language for Data Science, and
    the entire range of packages, literature, and resources related to Data Science
    is always available in Python. This is not necessarily a bad thing, as it means
    that there are numerous documented solutions for any data-related problem that
    you may encounter.
  prefs: []
  type: TYPE_NORMAL
- en: However, with the advent of larger datasets and the rise of more complex models,
    it may be time to explore other languages. This is where the old-timer, [**Fortran**](https://en.wikipedia.org/wiki/Fortran),
    may become popular again. Therefore, it is worthwhile for today’s Data Scientists
    to become aware of it and maybe even try to implement some solutions.
  prefs: []
  type: TYPE_NORMAL
- en: What is Fortran?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fortran, short for Formula Translator, was the first widely used programming
    language that originated in the 1950s. Despite its age, it remains a high-performance
    computing language and [can be faster than both C and C++](https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/ifc-gpp.html).
  prefs: []
  type: TYPE_NORMAL
- en: Initially designed for scientists and engineers to run large-scale models and
    simulations in areas such as fluid dynamics and organic chemistry, Fortran is
    still frequently used today by physicists. I even learned it during my physics
    undergrad!
  prefs: []
  type: TYPE_NORMAL
- en: Its specialty lies in modelling and simulations, which are essential for numerous
    fields, including Machine Learning. Therefore, Fortran is perfectly poised to
    tackle Data Science problems, as that’s exactly what it was invented to do decades
    ago.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages & Disadvantages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Fortran has several key advantages over other programming languages such as
    C++ and Python. Here are some of the main points:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Easy to Read**: Fortran is a compact language with only five native data
    types: INTEGER, REAL, COMPLEX, LOGICAL, and CHARACTER. This simplicity makes it
    easy to read and understand, especially for scientific applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**High Performance**](https://en.wikipedia.org/wiki/High-performance_computing):
    Fortran is often used to benchmark the speed of high-performance computers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Large Libraries**: Fortran has a wide range of [libraries](https://fortranwiki.org/fortran/show/Libraries)
    available, mainly for scientific purposes. These libraries provide developers
    with a vast array of functions and tools for performing complex calculations and
    simulations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Historical Array Support**: Fortran has had multi-dimensional array support
    from the beginning, which is essential for Machine Learning and Data Science such
    as [Neural Networks](https://dl.acm.org/doi/pdf/10.1145/3460944.3464312).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Designed for Engineers and Scientists**: Fortran was built specifically for
    pure number crunching, which is different from the more general-purpose use of
    C/C++ and Python.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, it is not all sunshine and rainbows. Here are some of Fortran’s drawbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Text operations:** Not ideal for characters and text manipulation, so not
    optimal for [natural language processing](https://en.wikipedia.org/wiki/Natural_language_processing).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Python has more packages**: Even though Fortran has many libraries, it is
    far from the total number in Python.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Small community:** The Fortran language has not got as large a following
    as other languages. This means it hasn’t got a lot of IDE and plugin support or
    stack overflow answers!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Not suitable for many applications**: It is explicitly a scientific language,
    so don’t try to build a website with it!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting Up Fortran
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Homebrew
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s quickly go over how to install Fortran on your computer. First, you should
    install **Homebrew** ([link here](https://brew.sh/)), which is a package manager
    for MacOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Homebrew, simply run the command from their website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can verify Homebrew is installed by running the command `brew help`. If
    there are no errors, then Homebrew has been successfully installed on your system.
  prefs: []
  type: TYPE_NORMAL
- en: GCC Compiler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As Fortran is a [**compiled language**](https://en.wikipedia.org/wiki/Compiled_language),
    we need a compiler that can compile Fortran source code. Unfortunately, MacOS
    doesn’t ship with a Fortran compiler pre-installed, so we need to install one
    ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'A popular option is the [**GCC**](https://gcc.gnu.org/) (GNU Compiler Collection)
    compiler, which you can install through Homebrew: `brew install gcc`. The GCC
    compiler is a set of compilers for languages like C, Go, and of course Fortran.
    The Fortran compiler in the GCC group is called [**gfortran**](https://gcc.gnu.org/wiki/GFortran),
    that can compile all major versions of Fortran such as 77, 90, 95, 2003, and 2008\.
    It is recommended to use the `.f90` extension for Fortran code files, although
    there is [some discussion on this topic](https://fortran-lang.discourse.group/t/is-there-a-standard-file-suffix-for-modern-fortran-code/3550).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that gfortran and GCC have been successfully installed, run the command
    `which fortran`. The output should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The gfortran compiler is by far the most popular, however there are several
    other compilers out there. A list of can be found [here](https://fortran-lang.org/en/compilers/).
  prefs: []
  type: TYPE_NORMAL
- en: IDE’s & Text Editors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once we have our Fortran compiler, the next step is to choose an Integrated
    Development Environment (IDE) or text editor to write our Fortran source code
    in. This is a matter of personal preference since there are many options available.
    Personally, I use PyCharm and install the [Fortran plugin](https://plugins.jetbrains.com/plugin/9699-fortran)
    because I prefer not to have multiple IDEs. Other popular text editors suggested
    by the [Fortran website](https://fortran-lang.org/en/learn/os_setup/text_editors/)
    include [Sublime Text](https://www.sublimetext.com/), [Notepad++](https://notepad-plus-plus.org/downloads/),
    and [Emacs](https://www.gnu.org/software/emacs/).
  prefs: []
  type: TYPE_NORMAL
- en: Running a Program
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we go onto our first program, it is important to note that I won’t be
    doing a syntax or command tutorial in this article. [Linked here](https://fortran-lang.org/en/learn/quickstart/)
    is a short guide that will cover all the basic syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below is a simple program called `example.f90`:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how we compile it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This command compiles the code and creates an executable file named `example`.
    You can replace `example` with any other name you prefer. If you don’t specify
    a name using the `-o` flag, the compiler will use a default name which is typically
    `a.out` for most [**Unix**](https://en.wikipedia.org/wiki/Unix) based operating
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how to run the `example` executable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `./` prefix is included to indicate that the executable is in the current
    directory. The output from this command will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, lets tackle a more ‘real’ problem!
  prefs: []
  type: TYPE_NORMAL
- en: 'Performance Example: Knapsack Problem'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The [**knapsack problem**](https://en.wikipedia.org/wiki/Knapsack_problem)
    is a well-known [**combinatorial optimization**](https://en.wikipedia.org/wiki/Combinatorial_optimization)
    problem that poses:'
  prefs: []
  type: TYPE_NORMAL
- en: A set of items, each with a value and weight, must be packed into a knapsack
    that maximizes the total value whilst respecting the weight constraint of the
    knapsack
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Although the problem sounds simple, the number of solutions increases exponentially
    with the number of items. Thus, making it [**intractable**](https://www.umsl.edu/~siegelj/information_theory/classassignments/Lombardo/04_intractableproblems.html)
    to solve by [**brute force**](https://en.wikipedia.org/wiki/Brute-force_search)
    beyond a certain number of items.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Heuristic**](https://en.wikipedia.org/wiki/Heuristic) methods such as [**genetic
    algorithms**](https://medium.com/towards-data-science/from-biology-to-computing-an-introduction-to-genetic-algorithms-b39476743483)
    can be used to find a ‘good enough’ or ‘approximate’ solution in a reasonable
    amount of time. If you’re interested in learning how to solve the knapsack problem
    using the genetic algorithm, check out my previous post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://pub.towardsai.net/genetic-algorithms-and-the-knapsack-problem-a-beginners-guide-a11236ca30e4?source=post_page-----5511e05ef89--------------------------------)
    [## Genetic Algorithms and the Knapsack Problem: A Beginners’ Guide'
  prefs: []
  type: TYPE_NORMAL
- en: Get hands-on experience with genetic algorithms and learn how to solve the knapsack
    problem step by step
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pub.towardsai.net](https://pub.towardsai.net/genetic-algorithms-and-the-knapsack-problem-a-beginners-guide-a11236ca30e4?source=post_page-----5511e05ef89--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: The knapsack problem has sundry applications in Data Science and [**Operations
    Research**](https://en.wikipedia.org/wiki/Operations_research), including stock
    management and supply chain efficiency, rendering it important to solve efficiently
    for business decisions.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will see how quickly Fortran can solve the knapsack problem
    by pure brute-force compared to Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: We will be focusing on the basic version, which is the [**0–1 knapsack
    problem**](https://www.javatpoint.com/0-1-knapsack-problem#:~:text=The%200%2F1%20knapsack%20problem%20means%20that%20the%20items%20are,pick%20the%202kg%20item%20completely.)
    where each item is either fully in the knapsack or not in at all.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start with Python.
  prefs: []
  type: TYPE_NORMAL
- en: The following code solves the knapsack problem for 22 items using a brute-force
    search. Each item is encoded as a 0 (not in) or 1 (in) in a 22-element length
    array (each element refers to an item). As each item has only 2 possible values,
    the number of total combinations is `2^(num_items)`. We utilise the `itertools.product`
    method that computes the [**cartesian product**](https://en.wikipedia.org/wiki/Cartesian_product)
    of all the possible solutions and then we iterate through them.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Fortran
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let’s solve the same problem, with the same exact variables, but in Fortran.
    Unlike Python, Fortran does not contain a package for performing permutations
    and combinations operations.
  prefs: []
  type: TYPE_NORMAL
- en: Our approach is to use the [**modulo**](https://en.wikipedia.org/wiki/Modulo)
    operator to convert the iteration number into a binary representation. For example,
    if the iteration number is 6, the modulo of 6 by 2 is 0, which means the first
    item is not selected. We then divide the iteration number by 2 to shift the bits
    to the right and take the modulo again to get the binary representation for the
    next item. This is repeated for every item (so 22 times) and eventually leads
    us to getting every possible combination.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: Compile and execute using the [linux](https://linuxize.com/post/linux-time-command/)
    `[time](https://linuxize.com/post/linux-time-command/)` [command:](https://linuxize.com/post/linux-time-command/)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The Fortran code is ~21 times quicker!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Comparison
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get a more visual comparison, we can plot the execution time as a function
    of the number of items:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1f211c47872084d56db36a4e2468180f.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Fortran blows Python out of the water!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Even though thte compute time for Fortran does increase, its growth is not nearly
    as large as it is for Python. This truly displays the computational power of Fortran
    when it comes to solving optimisation problems, which are of critical importance
    in many areas of Data Science.
  prefs: []
  type: TYPE_NORMAL
- en: Summary & Further Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although Python has been the go-to for Data Science, languages like Fortran
    can still provide significant value especially when dealing with optimisation
    problems due to its inherent number-crunching abilities. It outperforms Python
    in solving the knapsack problem by brute-force, and the performance gap widens
    further as more items are added to the problem. Therefore, as a Data Scientist,
    you might want to consider investing your time in Fortran if you need an edge
    in computational power to solve your business and industry problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full code used in this article can be found at my GitHub here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/knapsack?source=post_page-----5511e05ef89--------------------------------)
    [## Medium-Articles/Optimisation/knapsack at main · egorhowell/Medium-Articles'
  prefs: []
  type: TYPE_NORMAL
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/knapsack?source=post_page-----5511e05ef89--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Another Thing!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----5511e05ef89--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  prefs: []
  type: TYPE_NORMAL
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----5511e05ef89--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Connect With Me!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**YouTube**](https://www.youtube.com/@egorhowell?sub_confirmation=1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**GitHub**](https://github.com/egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References & Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Algorithms for Optimization*](https://mitpress.mit.edu/9780262039420/algorithms-for-optimization/)*.*
    [Mykel J. Kochenderfer](https://mitpress.mit.edu/author/mykel-j-kochenderfer-18773)
    and [Tim A. Wheeler](https://mitpress.mit.edu/author/tim-a-wheeler-28144). ***2019***.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Fortran website*: [https://fortran-lang.org/en/](https://fortran-lang.org/en/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
