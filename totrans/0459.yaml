- en: But What is LDA? Explained using mathematical animation like 3Blue1Brown.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/but-what-is-lda-explained-using-mathematical-animation-like-3blue1brown-4e8825334d84](https://towardsdatascience.com/but-what-is-lda-explained-using-mathematical-animation-like-3blue1brown-4e8825334d84)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://huonglanchu.medium.com/?source=post_page-----4e8825334d84--------------------------------)[![Lan
    Chu](../Images/813b24f60d6cfe2c9273e064d850c7fe.png)](https://huonglanchu.medium.com/?source=post_page-----4e8825334d84--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4e8825334d84--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4e8825334d84--------------------------------)
    [Lan Chu](https://huonglanchu.medium.com/?source=post_page-----4e8825334d84--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4e8825334d84--------------------------------)
    ¬∑13 min read¬∑Jun 5, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: And impress your colleagues ;)
  prefs: []
  type: TYPE_NORMAL
- en: Have you ever struggled with explaining mathematical concepts? [3Blue1Brown](https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw)
    is my favourite Youtube channel when it comes to finding cool videos and animations
    explaining Math and Stats topics. I was the one who never really understood Binomial
    distribution, until I watched the visual explanation on this channel ü§∑‚Äç‚ôÄÔ∏è
  prefs: []
  type: TYPE_NORMAL
- en: Wouldn‚Äôt it be awesome if you can learn how these animations are created so
    you can create similar animations to explain data science concepts and impress
    your teammates and managers? ü§©üòç
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7ab098d34071bfd7946379f5053adbe6.png)'
  prefs: []
  type: TYPE_IMG
- en: LDA generative process. Gif by author.
  prefs: []
  type: TYPE_NORMAL
- en: Well, you are in luck because you can use [**Manim**](https://docs.manim.community/en/stable/)
    for that! üòç It is a free and open-source project that allows us to create mathematical
    animation using Python, originally written by [**Grant** **Sanderson**](https://twitter.com/3blue1brown)andnow
    maintained by the Manim Community.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will learn how to create some basic elements in Manim and
    apply what we will learn to animate how a document is generated using Latent Dirichlet
    Allocation (LDA). If you wish to understand how LDA works, I have [an article](https://medium.com/towards-data-science/what-do-countries-talk-about-at-the-un-general-debate-topic-modelings-using-lda-19873cf00fe0)
    that will be helpful. In this post, we will take it for granted that you understand
    how LDA works. Alright, let‚Äôs get started.
  prefs: []
  type: TYPE_NORMAL
- en: What is Manim
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/75a5d38b37166bc1d3fabc48abec793d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Manim is a python library that allows users to create precise mathematical
    animations like the videos of [3Blue1Brown](https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw).
    Manim is built with the following main components and it requires a recent version
    of Python (3.7‚Äì3.10) to work:'
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[pycairo](https://cairographics.org/pycairo/) for making the figures'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[FFmpeg](https://ffmpeg.org/download.html#build-windows) for converting frames
    to video'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[LaTeX](https://miktex.org/download) for writing text and formula'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Manim Building blocks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/d2dff97ef88e7a5f171a4c3c06f5d207.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Manim example](https://docs.manim.community/en/stable/examples.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Essentially, manim puts together three concepts to produce mathematical animations:
    the [**Mobject**](https://docs.manim.community/en/stable/reference/manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject),
    the [**Animation**](https://docs.manim.community/en/stable/reference/manim.animation.animation.Animation.html#manim.animation.animation.Animation),
    and the [**Scene**](https://docs.manim.community/en/stable/reference/manim.scene.scene.Scene.html#manim.scene.scene.Scene).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mobject** is short for Mathematical Object. They are the basic building blocks
    for all manim animations. Each class that derives from Mobjects represents an
    object such as shapes, equations, or diagrams, that can be animated and displayed
    on the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: At the heart of manim is **Animation**, which is procedures that interpolate
    between two Mobjects. It defines the transformations and movements that can be
    applied to Mobjects such as [rotate](https://docs.manim.community/en/stable/reference/manim.animation.rotation.Rotate.html#manim.animation.rotation.Rotate),
    or [fadeout](https://docs.manim.community/en/stable/reference/manim.animation.fading.FadeOut.html#manim.animation.fading.FadeOut).
  prefs: []
  type: TYPE_NORMAL
- en: The **Scene** class is the canvas for your animations. Every Mobject has to
    be `[added](https://docs.manim.community/en/stable/reference/manim.scene.scene.Scene.html#manim.scene.scene.Scene.add)`
    to a scene to be displayed and every animation has to be `[played](https://docs.manim.community/en/stable/reference/manim.scene.scene.Scene.html#manim.scene.scene.Scene.play)`
    by a scene.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can create a new environment and install Manim using conda by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It is a good practice to install manim with conda since all dependencies like
    ffmpeg, pycairo etc‚Ä¶ are handled by conda, you don‚Äôt need to worry about having
    to install additional dependencies. LaTeX is an optional dependency and will not
    be installed with conda. In order to make use of Manim‚Äôs interface to LaTeX, for
    example, to render equations, you can install Latex for macOS by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: while on Ubuntu, you can run
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: At this point, you should have a working installation of Manim. Perfect, let
    us get started.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating Basic elements using Manim**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to create basic Mobjects such as an arrow,
    a curve and a bar chart using Manim. This will prepare us for creating the animation
    of LDA generative process in the next session.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Basic Elements - an Arrow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let us import all of the contents of the manim library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In Manim, the code for scripting an animation is typically written inside the
    `construct()` method of the `Scene` class. Within this method, you can create
    objects, display them on the screen, and animate them. For example, you can create
    two arrows using the `Arrow` class and position them next to each other using
    the `shift()` method, which is used for adjusting the position of a `Mobject`
    . Finally, we will use `Create` class to initialize the animation of the objects
    and add an animation to the scene by calling the `play()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Save the script above in a `Arrows.py` file. Now, in the project folder where
    you store this file, run the following command to generate a video for the script
    (the ‚Äú-p‚Äù allow you to display the video after the animation renders)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0fae877239b6ed8b55bf733b7aae9ee3.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating Basic Elements - Bar chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can also create a bar chart using the `BarChart` class from Manim. In the
    example below, I create a bar chart using the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/386d08cc50025a753c3ca1fe31db5b3a.png)'
  prefs: []
  type: TYPE_IMG
- en: But just creating a bar chart is not much fun. Let‚Äôs see if we can turn the
    initial bar chart to an ending bart chart. To do that, we will use the powerful
    `[animate(](https://docs.manim.community/en/stable/reference/manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject.animate))`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '**.animate**'
  prefs: []
  type: TYPE_NORMAL
- en: '`animate()` is a property of all Mobjects that allows you to depict how objects
    change over time such as changing position, color, size or shape of an object
    during the course of the animation. In the following example, we will create animations
    for the first bar chart that already exist in the scene and turn it into the second
    bar chart using `animate.become()` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7cce2fed395a29c68ee0b762713b5022.png)'
  prefs: []
  type: TYPE_IMG
- en: Create Basic Element - a Curve
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Manim, `Axes` is a class that is used to create a visual representation
    of the coordinate system where mathematical objects like graphs, points, lines
    can be added. In this example, we will use `Axes` class to plot the Sin function.
    First, the `Axes` object is created with some specific configurations. Next, we
    will get a name for the sin curve using `axes.get_axis_labels()`method. The labels
    are added to the `axes` using the `add()` method and finally, `VGroup` class is
    used to group `axes` and `sin_curve` and move them together. The resulting animation
    will display the sin function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/47700f185d2514eed72d938bb464af83.png)'
  prefs: []
  type: TYPE_IMG
- en: ‚Äã
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create LDA Animation with Manim
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cool, by now you have learnt how to create some elements such as Arrow, Curve
    and Bar chart in Manim. How about applying what we have learnt so far to animate
    how LDA model generates a document?
  prefs: []
  type: TYPE_NORMAL
- en: 'Basically, LDA generative process contains two components : topic distribution
    and word distribution. Hence, we will animate how a document is created with LDA
    by animating how word and topic are selected.'
  prefs: []
  type: TYPE_NORMAL
- en: 'LDA makes use of *Dirichlet and multinomial distributions*. However, to be
    able to visualize the data in 2 dimensions, we will consider a simpler example
    in which our document only contains two topics: **food üçï and animal üêñ**. This
    allows us to vizualize topic distribution using the Beta distribution instead
    of Dirichlet distribution.'
  prefs: []
  type: TYPE_NORMAL
- en: Create the topic distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Probability Density Curve (PDF) of beta distribution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by creating the probability density curve of beta distribution.
    How to draw that curve? Yes, you are right! We will begin by setting up an `Axes`
    object on which we can draw the PDF. I will use some pre-defined configuration
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After setting up the Axes object, it would be nice to add labels for the x-axis
    and y-axis by calling the `get_x_axis_label()` and `ax.get_y_axis_label()` methods.
    To write the labels, we will use the Latex syntax provided by the `Tex` class.
    With some more cosmetic improvements, the labels are ready:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/58039398ea22ee81a6b6518114a054f6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Great, we will now create the PDF curve by creating a beta distribution object
    using parameter ùõº and ùõΩ from the class and add that curve to the Axes object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/55c2fbb2d85b56f31dc1d8a2f9de001b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Beautiful! Every good plot has a title, let‚Äôs add a title for the PDF curve
    using `Tex` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To show that the PDF curve uses alpha and beta parameters, I want to include
    them in the animation by creating two `Tex` objects and show it next to the ax
    using `.next_to()` method . The following block of code will just do the job:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will use the `Write` and `Create` classes to write the alpha, beta
    values and draw the axes and PDF curve on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ffb7ea4f40a094df822942faadeaabb6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Good. The next thing to do is to animate how a topic distribution is created
    during the LDA process. Our document contains 2 topics: **food üçï and animal üêñ**.
    We will create a function to return a `BarChart` object that shows the probability
    of each topic appearing in the document. The beta distribution takes alpha and
    beta as parameters, additional styling and customization options can be passed
    through `kwargs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will create a manim bar chart object `bar` by initializing the BarChart
    and add the bar chart to the bottom right of the screen. Next, we want to label
    each bar with ‚Äúfood‚Äù and ‚Äúanimal‚Äù by creating Tex objects that display labels
    and position the labels below the corresponding bars using `.next_to()`method.
    Finally, we draw and display the creation of the bar chart using `Create` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b1257dd0a3ce919db43eaa1a49e0a6da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To simulate the resampling from the beta distribution many times, we will create
    loops in which for each iteration, a new sample is generated, corresponding probabilities
    are calculated, and the bar chart‚Äôs values are updated accordingly using the `change_bar_values`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Combine everything together, and we have the following animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/24dfd86a06b18508ace184157e44c550.png)'
  prefs: []
  type: TYPE_IMG
- en: If you see an animation of a PDF curve and a bar chart being drawn, Congratulations!
    You just wrote your very first Manim scene from scratch to display LDA topic distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Create the word distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Great, we have the topic distribution. However, a topic should contain words
    belong to it as well. Let‚Äôs assume that our vocabulary consists of the following
    ten words:'
  prefs: []
  type: TYPE_NORMAL
- en: '{üçå,ü•ù,üçã,üçì,üçÖ,üê•,üêñ,üêë,üêä,ü¶ì}'
  prefs: []
  type: TYPE_NORMAL
- en: 'and that each document will consist of only 5 words. To visualize the generative
    process of LDA, we will show both the topic distribution and the word distribution
    per topic, in two separate bar charts. The topic distribution will be the same
    as what we did before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfortunately, for the word distribution, we cannot pass a list of emojis to
    `bar_names` and this has to be added manually one by one in the correct spot.
    We will create a helper function for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Here, we load an SVG symbol from disk using `symbol = SVGMobject(f‚Äùicons/{word}.svg‚Äù)`
    and move it right below the corresponding bar using `.next_to()` method. The `BarChart`
    consists of 10 bars (due to 10 words in our vocabulary), and the ‚Äúith‚Äù bar, can
    be referenced with `bar_chart.bars[i].`
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3f5a839d808bffb35677acdc711f8208.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To illustrate the random picking of topics and words, we add two arrows to
    the scene:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: which draws a small vertical line and `.add_tip()` adds an arrowhead to it.
    These arrows will appear, disappear and move around to illustrate which topic
    and which word was picked during the random picking process.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start the animation by sampling from a Dirichlet distribution to obtain
    the word distribution per topic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '‚Äãand initialize the animation by letting each bar transform from zero to its
    initial value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1b139adacc126e61f442043dad0cbefb.png)'
  prefs: []
  type: TYPE_IMG
- en: ‚Äã
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we randomly sample a topic from the topic distribution (this is done
    by multinominal distribution) and visualize the choice using an arrow. This can
    be achieved by either fading them into the scene if it‚Äôs the first topic/word
    that is chosen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7e3bfb9ebe6ae1b394fb49b70095b6dd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'or by playing a movement animation when a new topic/word is chosen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/840b6bf0829e2321e47b933a0f6b438e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that a topic and word are chosen, we can finally start writing our document.
    We make a copy of the chosen word and animate a movement of that word into the
    document that we are generating:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9b26f04bbcdeebccd5c397cfd1c7a1bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We repeat the process of choosing a topic and word for as many times as we
    want the document size to be, which is 5 words in our example. To transition to
    the next document, we fade out the arrows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'and create a new row to write a new document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bad91f9cf6781a523519093147697866.png)'
  prefs: []
  type: TYPE_IMG
- en: 'and resample the word/topic distributions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d7f37d8530155f6cfa99b18ce24a01f9.png)'
  prefs: []
  type: TYPE_IMG
- en: and repeat the whole process for as many documents as we want. In the following
    example we create 3 documents, where each document contains 5 words.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7ab098d34071bfd7946379f5053adbe6.png)'
  prefs: []
  type: TYPE_IMG
- en: Recap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Congratulations! You have just created a LDA generative process in Manim. In
    this article, we have learnt:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Three main building blocks of Manim:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Mobjects: Mathematical objects that can be displayed on the screen, such as
    `Circle`, `Square`, `Axes, etc.`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animations that defines the transformations and movements that can be applied
    to Mobjects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scenes: A Scene is the canvas of your animation thtat display the Mobjects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2\. Create basic Manim objects such as Arrow, Bar chart and Curve
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Animate the process of generating a document using LDA.
  prefs: []
  type: TYPE_NORMAL
- en: Manim offer many more capabilities that go far beyond what I‚Äôve covered in this
    post. The best way to learn is through doing, so I encourage you to explore further
    and experiment with your own examples. And I would love to see your animations!
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Manim documentation: [Manim Community v0.17.3](https://docs.manim.community/en/stable/index.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[How to Create Mathematical Animations like 3Blue1Brown Using Python | by Khuyen
    Tran | Towards Data Science](/how-to-create-mathematical-animations-like-3blue1brown-using-python-f571fb9da3d1)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Full code that produces all animations can be found [here](https://github.com/lanchuhuong/manim_lda/tree/main).
  prefs: []
  type: TYPE_NORMAL
