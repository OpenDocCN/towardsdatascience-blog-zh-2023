["```py\npip install distfit\n```", "```py\n# Import libraries\nimport numpy as np\nfrom distfit import distfit\n\n# Create random normal data with mean=2 and std=4\nX = np.random.normal(2, 4, 10000)\n\n# Initialize using the parametric approach.\ndfit = distfit(method=’parametric’, todf=True)\n\n# Alternatively limit the search for only a few theoretical distributions.\ndfit = distfit(method='parametric', todf=True, distr=['norm', 'expon'])\n\n# Fit model on input data X.\ndfit.fit_transform(X)\n\n# Print the bet model results.\ndfit.model\n# 'stats': 'RSS',\n# 'name': 'loggamma',\n# 'params': (761.2276, -725.194369, 109.61),\n# 'score': 0.0004758991728293508,\n# 'loc': -725.1943699246272,\n# 'scale': 109.61710960155318,\n# 'arg': (761.227612981012,),\n# 'CII_min_alpha': -4.542099829801259,\n# 'CII_max_alpha': 8.531658573964933\n# 'distr': <scipy.stats._continuous_distns.loggamma_gen>,\n# 'model': <scipy.stats._distn_infrastructure.rv_continuous_frozen>,\n```", "```py\n# Print the scores of the distributions:\ndfit.summary[['name', 'score', 'loc', 'scale']]\n#         name     score                loc         scale\n#0     loggamma  0.000476         -725.19437     109.61711\n#1            t   0.00048           2.036554      3.970414\n#2         norm   0.00048           2.036483      3.970444\n#3         beta  0.000481         -72.505842    133.797587\n#4        gamma  0.000498        -304.071325      0.051542\n#5      lognorm  0.000507        -325.188197    327.201051\n#6   genextreme  0.001368           0.508856      3.947172\n#7     dweibull  0.005371           2.102396      3.386271\n#8      uniform  0.079545         -12.783659     30.766669\n#9        expon  0.108689         -12.783659     14.820142\n#10      pareto  0.108689 -1073741836.783659  1073741824.0\n\n# Plot the RSS of the fitted distributions.\ndfit.plot_summary()\n```", "```py\n# Set bootstrapping during initialization.\n# dfit = distfit(method='parametric', n_boots=100)\n\n# Bootstrapping\ndfit.bootstrap(X, n_boots=100)\n\n# Print\nprint(dfit.summary[['name', 'score', 'bootstrap_score', 'bootstrap_pass']])\n\n#           name     score  bootstrap_score bootstrap_pass\n# 0     loggamma  0.000218             0.42           True\n# 1         beta  0.000217             0.36           True\n# 2            t  0.000248             0.08           True\n# 3         norm  0.000247             0.07           True\n# 4      lognorm  0.000311             0.04          False\n# 5        gamma   0.00029             0.01          False\n# 6   genextreme  0.000874             0.00          False\n# 7     dweibull  0.001651             0.00          False\n# 8      uniform  0.073118             0.00          False\n# 9        expon  0.104076             0.00          False\n# 10      pareto  0.104076             0.00          False\n\n# Plot the RSS and bootstrap scores of the fitted distributions.\ndfit.plot_summary()\n```", "```py\nimport matplotlib.pyplot as plt\n# Create subplot\nfig, ax = plt.subplots(1,2, figsize=(25, 10))\n# Plot PDF with histogram\ndfit.plot(chart='PDF', ax=ax[0])\n# Plot the CDF\ndfit.plot(chart='CDF', ax=ax[1])\n\n# Change or remove properties of the chart.\ndfit.plot(chart='PDF', \n          emp_properties=None,\n          bar_properties=None,\n          pdf_properties={'color': 'r'},\n          cii_properties={'color': 'g'})\n```", "```py\n# Create subplot\nfig, ax = plt.subplots(1,2, figsize=(25, 10))\n# Plot PDF with histogram\ndfit.plot(chart='PDF', n_top=11, ax=ax[0])\n# Plot the CDF\ndfit.plot(chart='CDF', n_top=11, ax=ax[1])\n```", "```py\n# Create subplot\nfig, ax = plt.subplots(1,2, figsize=(25, 10))\n# Plot left panel with best fitting distribution.\ndfit.qqplot(X, ax=ax[0])\n# plot right panel with all fitted theoretical distributions\ndfit.qqplot(X, n_top=11, ax=ax[1])\n```", "```py\n# Load library\nfrom distfit import distfit\n\n# Create random normal data with mean=2 and std=4\nX = np.random.normal(2, 4, 10000)\n\n# Initialize using the quantile or percentile approach.\ndfit = distfit(method='quantile')\ndfit= distfit(method='percentile')\n\n# Fit model on input data X and detect the best theoretical distribution.\ndfit.fit_transform(X)\n# Plot the results\nfig, ax = dfit.plot()\n```", "```py\n# Load library\nfrom scipy.stats import binom\nfrom distfit import distfit\n\n# Parameters for the test-case:\nn = 8\np = 0.5\n# Generate 10000 randon discrete data points of the distribution of (n, p)\nX = binom(n, p).rvs(10000)\n# Initialize using the discrete approach.\ndfit = distfit(method='discrete')\n# Find the best fit.\ndfit.fit_transform(X)\n\n# print results\nprint(dfit.model)\n# 'name': 'binom',\n# 'score': 0.00010939074999009602,\n# 'chi2r': 1.5627249998585145e-05,\n# 'n': 8,\n# 'p': 0.501366,\n# 'CII_min_alpha': 2.0,\n# 'CII_max_alpha': 6.0}\n# 'distr': <scipy.stats._discrete_distns.binom_gen at 0x14350be2230>,\n# 'model': <scipy.stats._distn_infrastructure.rv_discrete_frozen at 0x14397a2b640>,\n\n# Make predictions\nresults = dfit.predict([0, 2, 8])\n```", "```py\n# Plot the results\ndfit.plot()\n\n# Change colors or remove parts of the figure.\n# Remove emperical distribution\ndfit.plot(emp_properties=None)\n# Remove PDF\ndfit.plot(pdf_properties=None)\n# Remove histograms\ndfit.plot(bar_properties=None)\n#Remove confidence intervals\ndfit.plot(cii_properties=None)\n```", "```py\n# Import libraries\nimport numpy as np\nfrom distfit import distfit\n\n# Create random normal data with mean=2 and std=4\nX = np.random.normal(2, 4, 10000)\n\n# Initialize using the parametric approach (default).\ndfit = distfit(multtest='fdr_bh', alpha=0.05)\n\n# Fit model on input data X.\ndfit.fit_transform(X)\n# With the fitted model we can make predictions on new unseen data.\ny = [-8, -2, 1, 3, 5, 15]\ndfit.predict(y, todf=True)\n\n# Print results\nprint(dfit.results['df'])\n#      y   y_proba y_pred         P\n# 0  -8.0  0.017455   down  0.005818\n# 1  -2.0  0.312256   none  0.156128\n# 2   1.0  0.402486   none  0.399081\n# 3   3.0  0.402486   none  0.402486\n# 4   5.0  0.340335   none  0.226890\n# 5  15.0  0.003417     up  0.000569\n\n# Plot the results\ndfit.plot()\n```", "```py\n# Import libraries\nimport numpy as np\nfrom distfit import distfit\n\n# Create random normal data with mean=2 and std=4\nX = np.random.normal(2, 4, 10000)\n\n# Initialize using the parametric approach (default).\ndfit = distfit()\n\n# Fit model on input data X.\ndfit.fit_transform(X)\n\n# The fitted distribution can now be used to generate new samples.\nX_synthetic = dfit.generate(n=1000)\n```"]