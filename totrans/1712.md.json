["```py\ndef the_func(greeting, thing):\n  print(greeting + ' ' + thing)\n\nthe_func('hello', thing='world')\n```", "```py\nthe_func('hello', 'world')                  # -> 'hello world'\nthe_func('world', 'hello')                  # -> 'world hello'\nthe_func(greeting='hello', thing='world')   # -> 'hello world'\nthe_func(thing='world', greeting='hello')   # -> 'hello world'\nthe_func('hello', thing='world')            # -> 'hello world'\n```", "```py\ndef multiply(a, b, *args):\n  result = a * b\n  for arg in args:\n    result = result * arg\n  return result\n```", "```py\nmultiply(1, 2)          # returns 2\nmultiply(1, 2, 3, 4)    # returns 24\n```", "```py\ndef introduce(firstname, lastname, **kwargs):\n  introduction = f\"I am {firstname} {lastname}\"\n  for key, value in kwargs.items():\n    introduction += f\" my {key} is {value} \"\n  return introduction\n```", "```py\nprint(introduce(firstname='mike', lastname='huls'))\n# returns \"I am mike huls\"\n\nprint(introduce(firstname='mike', lastname='huls', age=33, website='mikehuls.com'))\n# I am mike huls my age is 33  my website is mikehuls.com\n```", "```py\ndef transfer_money(*, from_account:str, to_account:str, amount:int):\n  print(f'Transfering ${amount} FORM {from_account} to {to_account}')\n\ntransfer_money(from_account='1234', to_account='6578', amount=9999)\n# won't work: TypeError: transfer_money() takes 0 positional arguments but 1 positional argument (and 2 keyword-only arguments) were given\ntransfer_money('1234', to_account='6578', amount=9999)\n# won't work: TypeError: transfer_money() takes 0 positional arguments but 3 were given\ntransfer_money('1234', '6578', 9999)\n```", "```py\ndef the_func(arg1:str, arg2:str, /):\n  print(f'provided {arg1=}, {arg2=}')\n\n# These work:\nthe_func('num1', 'num2')\nthe_func('num2', 'num1')\n\n# won't work: TypeError: the_func() got some positional-only arguments passed as keyword arguments: 'arg1, arg2'\nthe_func(arg1='num1', arg2='num2')\n# won't work: TypeError: the_func() got some positional-only arguments passed as keyword arguments: 'arg2'\nthe_func('num1', arg2='num2') \n```", "```py\ndef exceeds_100_bytes(x, /) -> bool:\n  return x.__sizeof__() > 100\n\nexceeds_100_bytes('a')      \nexceeds_100_bytes({'a'})\n```", "```py\ndef exceeds_100_bytes(*args) -> bool:\n  for a in args:\n    if (a.__sizeof__() > 100):\n      return True\n  return False\n```", "```py\ndef len_new(x, /, *, no_duplicates=False):\n  if (no_duplicates):\n    return len(list(set([a for a in x])))\n  return len(x)\n```", "```py\nprint(len_new('aabbcc'))                                  # returns 6\nprint(len_new('aabbcc', no_duplicates=True))              # returns 3\nprint(len_new([1, 1, 2, 2, 3, 3], no_duplicates=False))   # returns 6\nprint(len_new([1, 1, 2, 2, 3, 3], no_duplicates=True))    # returns 3\n\n# Won't work: TypeError: len_() got some positional-only arguments passed as keyword arguments: 'x'\nprint(len_new(x=[1, 1, 2, 2, 3, 3]))\n# Won't work: TypeError: len_new() takes 1 positional argument but 2 were given\nprint(len_new([1, 1, 2, 2, 3, 3], True))\n```", "```py\ndef the_func(pos_only1, pos_only2, /, pos_or_kw1, pos_or_kw2, *, kw1, kw2, **extra_kw):\n  # cannot be passed kwarg   <--   | --> can be passed 2 ways | --> can only be passed by kwarg\n  print(f\"{pos_only1=}, {pos_only2=}, {pos_or_kw1=}, {pos_or_kw2=}, {kw1=}, {kw2=}, {extra_kw=}\")\n```", "```py\n# works (pos_or_kw1 & pow_or_k2 can be passed positionally and by kwarg)\npos_only1='pos1', pos_only2='pos2', pos_or_kw1='pk1', pos_or_kw2='pk2', kw1='kw1', kw2='kw2', extra_kw={}\npos_only1='pos1', pos_only2='pos2', pos_or_kw1='pk1', pos_or_kw2='pk2', kw1='kw1', kw2='kw2', extra_kw={}\npos_only1='pos1', pos_only2='pos2', pos_or_kw1='pk1', pos_or_kw2='pk2', kw1='kw1', kw2='kw2', extra_kw={'kw_extra1': 'extra_kw1'}\n\n# doesnt work, (pos1 and pos2 cannot be passed with kwarg)\n# the_func(pos_only1='pos1', pos_only2='pos2', pos_or_kw1='pk1', pos_or_kw2='pk2', kw1='kw1', kw2='kw2')\n\n# doesnt work, (kw1 and kw2 cannot be passed positionally)\n# the_func('pos1', 'pos2', 'pk1', 'pk2', 'kw1', 'kw2')\n```"]