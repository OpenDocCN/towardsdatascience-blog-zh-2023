["```py\nSELECT\n product_id,\n product_description,\n price,\n stock_qty,\n next_shipment,\n CASE\n  WHEN stock_qty > 500 THEN 1\n  ELSE 0\n END AS has_enough_stock\nFROM product_inventory\n```", "```py\nCASE\n  WHEN stock_qty > 500 THEN 1\n  ELSE 0\nEND AS has_enough_stock\n```", "```py\n# create the has_enough_stock column with all 0s\nproduct_inventory.loc[:, \"has_enough_stock\"] = 0\n\n# change values to 1 where stock quantity is more than 500\nproduct_inventory.loc[:, \"has_enough_stock\"] = product_inventory.where(product_inventory[\"stock_qty\"] <= 500, 1)\n\n# display the first 5 rows\nproduct_inventory.head()\n```", "```py\nimport numpy as np\n\n# create the column\nproduct_inventory.loc[:, \"has_enough_stock\"] = np.where(product_inventory[\"stock_qty\"] > 500, 1, 0)\n```", "```py\nSELECT\n product_id,\n product_description,\n price,\n stock_qty,\n next_shipment,\n CASE\n  WHEN stock_qty > 500 THEN 'enough'\n  WHEN stock_qty <= 500 AND stock_qty > 200 THEN 'critical'\n  ELSE 'order asap'\n END AS stock_situation\nFROM product_inventory\n```", "```py\n# define conditions\nconditions = [\n    product_inventory[\"stock_qty\"] > 500,\n    (product_inventory[\"stock_qty\"] <= 500) & (product_inventory[\"stock_qty\"] > 200),\n    product_inventory[\"stock_qty\"] <= 200\n]\n\n# define values associated with the conditions\nvalues = [\"enough\", \"critical\", \"order asap\"]\n\n# create the column\nproduct_inventory.loc[:, \"stock_situation\"] = np.select(conditions, values)\n\n# display the first 5 rows\nproduct_inventory.head()\n```"]