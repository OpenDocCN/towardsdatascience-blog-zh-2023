["```py\n# Trigger the authentication flow.\nee.Authenticate()\n\n# Initialize the library.\nee.Initialize()\n\nngrok_key = input(\"Your ngrok Authtoken\")\n\n!ngrok authtoken {ngrok_key}\n```", "```py\ndef generate_collection(geometry, dataset, startDate, endDate):\n    collection = ee.ImageCollection(dataset).filterDate(startDate, endDate).filterBounds(geometry);\n    return collection\n\ndef get_mean(image_collection, point, property, scale_factor):\n    image = image_collection.select([property]).reduce(ee.Reducer.mean()).multiply(scale_factor)\n\n    fcPoint = ee.FeatureCollection([ee.Feature(point)])\n\n    geojson = image.sampleRegions(collection = fcPoint,  scale = 1000, geometries = True)\n\n    return geojson.getInfo()[\"features\"][0][\"properties\"]\n\ndef generate_image(dataset):\n    return ee.Image(dataset)\n\ndef get_image_value(image, point, property, scale_factor):\n    return image.reduceRegion(ee.Reducer.mean(), point, 100).get(property).getInfo() * scale_factor\n```", "```py\napp = FastAPI()\n\n@app.get('/')\nasync def root():\n    return {'hello': 'world'}\n\n@app.get(\"/land-surface-temperature\")\nasync def get_land_surface_temperature(lat: float, lon: float, start_date: datetime.date, end_date: datetime.date):\n    dataset = \"MODIS/061/MOD11A1\"\n\n    point = ee.Geometry.Point([lon, lat])\n\n    image_collection = generate_collection(point, dataset, start_date.strftime(\"%Y-%m-%d\"), end_date.strftime(\"%Y-%m-%d\"))\n\n    result = get_mean(image_collection, point, \"LST_Day_1km\", 0.02)\n\n    return {'result': result}\n\n@app.get(\"/soil-ph\")\nasync def get_soil_ph(lat: float, lon: float):\n    dataset = \"OpenLandMap/SOL/SOL_PH-H2O_USDA-4C1A2A_M/v02\"\n\n    point = ee.Geometry.Point([lon, lat])\n\n    image = generate_image(dataset)\n\n    scale_factor = 0.1\n\n    ph = get_image_value(image, point, \"b0\", scale_factor)\n\n    return {\"result\": {\"pH\": ph}}\n```", "```py\nngrok_tunnel = ngrok.connect(8000)\nprint('Public URL:', ngrok_tunnel.public_url)\nnest_asyncio.apply()\nuvicorn.run(app, port=8000)\n```", "```py\n/land-surface-temperature?lat=52.72389418745157&lon=-92.03593750000002&start_date=2020-01-01&end_date=2020-05-01\n```", "```py\n/soil-ph?lat=52.72389418745157&lon=-92.03593750000002\n```", "```py\nsheet_id = \"YOUR GOOGLE SHEETS ID\"\nsheet_name = \"YOUR GOOGLE SHEETS NAME\"\n\nurl = f\"https://docs.google.com/spreadsheets/d/{sheet_id}/gviz/tq?tqx=out:csv&sheet={sheet_name}\"\ndf = pd.read_csv(url)\n\napi_url = \"YOUR ngrok ENDPOINT\"\n\nland_temperature_route = \"/land-surface-temperature/?\"\nland_ph_route = \"/soil-ph/?\"\n\nfor index, row in df.iterrows():\n    date = datetime.strptime(row[\"date\"], \"%Y-%m-%d\")\n\n    start_date = datetime.strptime(f\"{date.year}-{date.month}\", '%Y-%m').date()\n    end_date =  datetime.strptime(f\"{date.year}-{date.month + 1}\", '%Y-%m').date()\n\n    lat = row[\"lat\"]\n\n    lon = row[\"lon\"]\n\n    temp_url = f\"{api_url}{land_temperature_route}lat={lat}&lon={lon}&start_date={start_date}&end_date={end_date}\"\n    ph_url = f\"{api_url}{land_ph_route}lat={lat}&lon={lon}\"\n\n    temp = requests.get(temp_url).json()[\"result\"][\"LST_Day_1km_mean\"] -273.15\n    ph = requests.get(ph_url).json()[\"result\"][\"pH\"]\n\n    print (f'{row[\"sample\"]}\\t{temp}\\t{ph}')\n```"]