- en: Profiling Python Code with cProfile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/profiling-python-code-with-cprofile-328ae152fdfc](https://towardsdatascience.com/profiling-python-code-with-cprofile-328ae152fdfc)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this article we will explore how to profile Python code with **cProfile**
    module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://pyshark.medium.com/?source=post_page-----328ae152fdfc--------------------------------)[![Misha
    Sv](../Images/d3f9605e2c7020246ff793869728e218.png)](https://pyshark.medium.com/?source=post_page-----328ae152fdfc--------------------------------)[](https://towardsdatascience.com/?source=post_page-----328ae152fdfc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----328ae152fdfc--------------------------------)
    [Misha Sv](https://pyshark.medium.com/?source=post_page-----328ae152fdfc--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----328ae152fdfc--------------------------------)
    ·6 min read·Feb 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/89cacd18fab67e3c61470469f4cd9bca.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Arnold Francisca](https://unsplash.com/@clark_fransa?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/f77Bh3inUpE?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: '**Table of Contents**'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is code profiling?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cProfile basic usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profile Python code with cProfile from terminal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profile Python code with cProfile in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profile Python function with cProfile in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Export cProfile data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today programmers write thousands of lines of code in a matter of days. The
    complexity of new programs and applications evolves constantly and the code bases
    include multiple functions, some of which can slow down the performance of the
    entire program.
  prefs: []
  type: TYPE_NORMAL
- en: Focusing on code profiling, and specifically profiling your Python code to identify
    bottlenecks in the performance can significantly increase the performance of the
    software as well as create a better user experience.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial we will work with the Python built-in [cProfile](https://docs.python.org/3/library/profile.html)
    module which provides deterministic profiling of Python programs.
  prefs: []
  type: TYPE_NORMAL
- en: What is code profiling?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code profiling is the process of analyzing the performance of programs, specifically
    analyzing performance of the code to identify potential bottlenecks.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying which parts of code run slow and then optimizing this code can significantly
    improve performance of the software, decrease memory usage and resource consumption.
  prefs: []
  type: TYPE_NORMAL
- en: In Python, **cProfile** profiling tool allows to track the execution time and
    memory usage of your Python scripts, helping identify slow-performing and high
    resource consuming parts of the code.
  prefs: []
  type: TYPE_NORMAL
- en: cProfile basic usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is a quick example of profiling with **cProfile** and interpretation of
    the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s interpret the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '*ncalls* — the number of calls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*tottime* — the total time spent in a given function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*percall* — the ratio of *tottime* and *ncalls*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*cumtime* — the cumulative time spent in current function and subfunctions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*percall* — the ratio of *cumtime* and primitive calls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*filename* — the data of each function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profile Python code with cProfile from terminal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we get started with Python code profiling, we will need some sample Python
    code to work with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a simple script that will print “Python Programming” 5 times and
    call it **main.py**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'and once you run it, you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: One of the easiest ways to profile your Python code with cProfile is to run
    cProfile from terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal and navigate to the folder where your Python script ( **main.py**)
    is located, and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Profile Python code with cProfile in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another way of profiling your Python code with cProfile is by using cProfile
    module directly in your Python script.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to import the cProfile module into your Python environment and
    explicitly call the profiling function while passing the Python code as a string
    into the function as an argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we simplified the code to just one line of printing “Python
    Programming”, because as you can see, passing code into **cProfile.run()** as
    a string is not the most convenient option.
  prefs: []
  type: TYPE_NORMAL
- en: There should be a better way right? Of course! In the next section we will explore
    how to profile Python code using functions and **cProfile**.
  prefs: []
  type: TYPE_NORMAL
- en: Profile Python functions with cProfile in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s reuse the Python code from one of the previous sections and now place
    it in a function **my_func()**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can easily run a profiler on this function by passing it into **cProfile.run()**
    as an argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Export cProfile data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous sections we ran the profiler on the Python code and the results
    were printed out in terminal.
  prefs: []
  type: TYPE_NORMAL
- en: But can we extract and save the profiling data?
  prefs: []
  type: TYPE_NORMAL
- en: Yes! Using the built-in **pstats** module together with **cProfile** we can
    extract and save the profiler results in a simple .txt file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the **profile.run()** functionality is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: where when *filename* is set to **None**, it automatically prints out the profiling
    report.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now set *filename* equal to some sample file name like ‘results’ and
    run the code from the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You will notice the output in terminal is simply what the function is supposed
    to generate, but no profiling report:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'However, you will now have a new file ‘results’ created in the directory of
    the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f3e0452cb4ac9b383083201cae14a716.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: We have the file with the profiling report, but we can’t open it just yet. Now
    we will need to convert it into .txt file using the **pstats** module, and then
    the report can be accessed.
  prefs: []
  type: TYPE_NORMAL
- en: 'This additional code will convert the ‘results’ file into ‘results.txt’:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should see a new file in the directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a227b4c0de84c899318c356e98872f76.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we have successfully created a .txt file with the profiling report. It
    should contain the following data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/91a6ba3791355fd7e9174beedf3e975e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Complete Code for Extracting cProfile data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article we explored how to profile Python code with [**cProfile**](https://docs.python.org/3/library/profile.html#module-cProfile)
    module.
  prefs: []
  type: TYPE_NORMAL
- en: Code profiling helps identify bottlenecks in the code and helps understand which
    parts of the code should be optimized for better overall performance.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to leave comments below if you have any questions or have suggestions
    for some edits and check out more of my [Python Programming](https://pyshark.com/category/python-functions/)
    tutorials.
  prefs: []
  type: TYPE_NORMAL
- en: '*Originally published at* [*https://pyshark.com*](https://pyshark.com/profiling-python-code-with-cprofile/)
    *on February 10, 2023.*'
  prefs: []
  type: TYPE_NORMAL
