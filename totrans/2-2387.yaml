- en: Why Your RAG Is Not Reliable in a Production Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/why-your-rag-is-not-reliable-in-a-production-environment-9e6a73b3eddb](https://towardsdatascience.com/why-your-rag-is-not-reliable-in-a-production-environment-9e6a73b3eddb)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And how you should tune it properly
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://ahmedbesbes.medium.com/?source=post_page-----9e6a73b3eddb--------------------------------)[![Ahmed
    Besbes](../Images/93804d9291439715e578f204b79c9bdd.png)](https://ahmedbesbes.medium.com/?source=post_page-----9e6a73b3eddb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9e6a73b3eddb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9e6a73b3eddb--------------------------------)
    [Ahmed Besbes](https://ahmedbesbes.medium.com/?source=post_page-----9e6a73b3eddb--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9e6a73b3eddb--------------------------------)
    ¬∑7 min read¬∑Oct 12, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/96beae64de9f7f71263e41a7767a45fe.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: Photo by [Ivan Jermakov](https://unsplash.com/@ivanjermakov?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: With the rise of LLMs, the Retrieval Augmented Generation (RAG) [framework](https://arxiv.org/abs/2005.11401)
    also gained popularity by making it possible to build question-answering systems
    over data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: We‚Äôve all seen those demos of chatbots conversing with PDFs or emails.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: While these systems are certainly impressive, they might not be reliable in
    production without tweaking and experimentation.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '***In this post, I explore the problems behind the RAG framework and go over
    some tips to improve its performance. This goes from leveraging document metadata
    to fine-tuning hyperparameters.***'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: These findings are based on my experience as an ML engineer who‚Äôs still learning
    about this tech and building RAGs in the pharmaceutical industry.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Without much further ado, let‚Äôs have a look üîç
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: If you‚Äôre interested in practical tips to increase your productivity in building
    ML systems, you feel free to subscribe to my [newsletter](https://thetechbuffet.substack.com/).
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I send weekly insights in programming and system design to help you ship AI
    products faster.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: RAG in a nutshell ‚öôÔ∏è
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let‚Äôs get the basics right first.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Here‚Äôs how RAG works.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: It first takes an input question and retrieves relevant documents to it from
    an external database. Then, it passes those chunks as a context in a prompt to
    help an LLM generate an *augmented* answer.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'That‚Äôs basically saying:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '*‚ÄúHey LLM, here‚Äôs my question, and here are some pieces of text to help you
    understand the problem. Give me an answer.‚Äù*'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/fa22dfd8e1aebc6a46efc827dcf82c0a.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: You should not be fooled by the simplicity of this diagram.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, RAG hides a certain complexity and involves the following components
    behind the scenes:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'Loaders to parse external data in different formats: PDFs, websites, Doc files,
    etc.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Splitters to chunk the raw data into smaller pieces of text
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An embedding model to convert the chunks into vectors
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A vector database to store the vectors and query them
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A prompt to combine the question and the retrieved documents
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An LLM to generate the answer
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you like diagrams, here‚Äôs another for you.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: A tad more complex but it illustrates the indexing and retrieval processes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/883ab9133ece2fa4c0037256a7a67418.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: Image modified by the author
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Phew!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Don‚Äôt worry though, you can still prototype your RAG very quickly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Frameworks like [LangChain](https://www.langchain.com/) abstracted most of the
    steps involved in building a RAG and it became easy to prototype those systems.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: How easy is that? 5-line-of-code easy.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e6e3739a9cd5b8aa3d08e942a5b00d40.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: 'Of course, there‚Äôs always a problem with the apparent simplicity of such code
    snippets: depending on your use case, they don‚Äôt always work as-is and need very
    careful tuning.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: They‚Äôre great as quick-starts but they‚Äôre certainly not a reliable solution
    for an industrialized application.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: The problems with RAG
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you start building RAG systems with little to no tuning, you may be surprised.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Here‚Äôs what I noticed during the first weeks of using LangChain and building
    RAGs.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '**1 ‚Äî The retrieved documents are not always relevant to the question.**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: If you closely look at the chunks that the database retrieves, you will sometimes
    notice that they‚Äôre not exactly relevant to the problem. They‚Äôre certainly similar
    to the question to some extent but in many cases, they‚Äôre not fully aligned with
    what the user asks for. Moreover, these chunks can often be redundant and overlapping
    which makes the generated answer ‚Ä¶ repetitive.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Here‚Äôs a small experiment that shows that the most similar documents to the
    query (in the embedding space) are neither the most relevant ones nor the most
    semantically similar (how surprising is that!).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the model disregarded the sentiment of the sentence and wasn‚Äôt
    even robust to plural (adding an ‚Äús‚Äù decreases the similarity by 8%)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0712ca4a3ee2e3aef95fbb18d94d77d8.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: '**2 ‚Äî RAG systems lack basic world knowledge** If you instruct a RAG to only
    rely on an external database to provide answers, it may surprise you by inventing
    facts or refusing to answer simple questions.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: I built a RAG once on tennis-related Reddit posts. While it successfully answered
    questions about the Wimbledon Open of that time, it was unable to answer general
    questions on tennis rules.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: I know you‚Äôre not supposed to ask questions beyond the scope of the data you
    feed the system, but if you deploy a RAG-based service, you should expect anything
    from the users.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '**3 ‚Äî Speed**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the type of database you use and the size of the LLM, your RAG
    can be painfully slow. This can degrade the user experience. You should make your
    benchmarks first before building your solution.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '**4 ‚Äî A lossy process**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Given how RAG splits the raw data into chunks, embeds those chunks, and retrieves
    the top K similar ones, the intrinsic information is gradually lost and distilled.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, it becomes impossible to retain all the information from the external
    documents and provide a perfect answer to the question.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'This is important to keep in mind: we‚Äôre dealing with a lot of approximations
    here.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Tips to improve the performance of your RAG
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RAGs can show strange behaviors if you blindly plug them into your data.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: You can however solve these issues by applying some tips and best practices.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: üëâ **Inspect and clean your data**
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: The good old ‚Äúgarbage in, garbage out‚Äù principle still applies to RAG.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: If you feed documents that are noisy (Hello HTML tags!), not consistent with
    each other, confusing, or even redundant, the generated answer will suffer and
    reflect these defects.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Be cautious when selecting the data your RAG will tap into.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: For example, instead of combining FAQs that are inherently short with long PDFs,
    you could create two vector stores instead.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'Here‚Äôs a quick sanity check to assess the data quality: do the exercise for
    a question or two. If you find it hard to get an answer with the support of the
    data you have at your disposal, don‚Äôt expect the RAG to perform better.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: üëâ **Finetune the chunk size, the top_k, and the chunk overlap**
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: These parameters are **very** important since chunking is the core part of a
    RAG system. (Remember, the documents we retrieve from the store are **chunks**!)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: These parameters impact the quality of the retrieved results and consequently,
    the generated answer.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: For example, a small chunk size might not catch enough context, while a big
    chunk size might introduce a lot of irrelevant noise.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: There is no miraculous magic number I can give you here. The best solution is
    to run experiments and validate these hyperparameters on a test set. (Yes, building
    a test set is important!)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: There‚Äôs also this [guide](https://www.pinecone.io/learn/chunking-strategies/)
    on chunking strategies from Pinecone that‚Äôs worth reading.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: üëâ **Leverage your document metadata**
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: It‚Äôs sometimes useful to filter over the available metadata (for example the
    date) after the documents are retrieved from the database. This provides another
    filtering dimension and doesn‚Äôt cost anything.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'üëâ **Tweak your system prompt** to give your RAG a default behavior or specific
    instructions. Here‚Äôs a system prompt I used in one of my projects:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: üëâ **Transform the input query**
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: If you don‚Äôt express yourself clearly enough, the RAG might not find the relevant
    documents it needs to build a useful context. One way to solve that could be to
    **rephrase** the query by the LLM and try again.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Another solution could be to try the [HyDE](https://boston.lti.cs.cmu.edu/luyug/HyDE/HyDE.pdf)
    method that takes the query, generates a hypothetical response, and uses both
    for retrieval in the embedding space.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Âè¶‰∏ÄÁßçËß£ÂÜ≥ÊñπÊ°àÂèØËÉΩÊòØÂ∞ùËØï[HyDE](https://boston.lti.cs.cmu.edu/luyug/HyDE/HyDE.pdf)ÊñπÊ≥ïÔºåÂÆÉÊé•ÂèóÊü•ËØ¢ÔºåÁîüÊàê‰∏Ä‰∏™ÂÅáËÆæÊÄßÂõûÂ∫îÔºåÂπ∂Âú®ÂµåÂÖ•Á©∫Èó¥‰∏≠‰ΩøÁî®Ëøô‰∏§ËÄÖËøõË°åÊ£ÄÁ¥¢„ÄÇ
- en: Query transformation is an exciting area that could improve RAG systems since
    LLMs tend to work better over smaller queries.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Êü•ËØ¢ËΩ¨Êç¢ÊòØ‰∏Ä‰∏™‰ª§‰∫∫ÂÖ¥Â•ãÁöÑÈ¢ÜÂüüÔºåÂÆÉÂèØËÉΩ‰ºöÊîπÂñÑRAGÁ≥ªÁªüÔºåÂõ†‰∏∫LLMsÂæÄÂæÄÂú®ËæÉÂ∞èÁöÑÊü•ËØ¢‰∏äË°®Áé∞Êõ¥Â•Ω„ÄÇ
- en: Conclusion
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ÁªìËÆ∫
- en: That‚Äôs it for today!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: ‰ªäÂ§©Â∞±Âà∞ËøôÈáåÔºÅ
- en: I hope you‚Äôve enjoyed this post and learned something useful about RAGs.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Â∏åÊúõ‰Ω†ÂñúÊ¨¢ËøôÁØáÊñáÁ´†ÔºåÂπ∂‰ªé‰∏≠Â≠¶Âà∞‰∫ÜÊúâÂÖ≥RAGÁöÑ‰∏Ä‰∫õÊúâÁî®‰ø°ÊÅØ„ÄÇ
- en: As this technology is relatively new, many optimization techniques will emerge
    making this framework more reliable and ready for industrialized applications.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Áî±‰∫éËøôÈ°πÊäÄÊúØÁõ∏ÂØπËæÉÊñ∞ÔºåËÆ∏Â§ö‰ºòÂåñÊäÄÊúØÂ∞Ü‰ºöÂá∫Áé∞Ôºå‰ΩøËøô‰∏™Ê°ÜÊû∂Êõ¥Âä†ÂèØÈù†ÔºåÂπ∂ÂáÜÂ§áÂ•ΩÁî®‰∫éÂ∑•‰∏öÂåñÂ∫îÁî®„ÄÇ
- en: If you too are building RAGs, I‚Äôm curious to know which optimization techniques
    you use. Please let me know in the comments.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Â¶ÇÊûú‰Ω†‰πüÂú®ÊûÑÂª∫RAGÔºåÊàëÂæàÂ•ΩÂ•á‰Ω†‰ΩøÁî®‰∫ÜÂì™‰∫õ‰ºòÂåñÊäÄÊúØ„ÄÇËØ∑Âú®ËØÑËÆ∫‰∏≠ÂëäËØâÊàë„ÄÇ
- en: Until next time üëã!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: ‰∏ãÊ¨°ËßÅüëãÔºÅ
