["```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n```", "```py\nrankings = np.random.randint(1, 10, 10)\n\nrock_names = [\n    'Granite',\n    'Basalt',\n    'Gneiss',\n    'Schist',\n    'Sandstone',\n    'Limestone',\n    'Shale',\n    'Conglomerate',\n    'Dolomite',\n    'Marble'\n]\n```", "```py\nplt.bar(x=rock_names, height=rankings)\nplt.show()\n```", "```py\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(10,10))\n\nindexes = list(range(0, len(rock_names)))\nwidth = 2*np.pi / len(rock_names)\nangles = [element * width for element in indexes]\n\nlabel_loc = np.linspace(start=0, stop=2 * np.pi, num=len(rock_names))\n\nbars = ax.bar(x = angles, height=rankings, width=width, \n       edgecolor='black', zorder=2, alpha=0.8)\n\nplt.show()\n```", "```py\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(10,10))\n\nindexes = list(range(0, len(rock_names)))\nwidth = 2*np.pi / len(rock_names)\nangles = [element * width for element in indexes]\n\nlabel_loc = np.linspace(start=0, stop=2 * np.pi, num=len(rock_names))\n\nbars = ax.bar(x = angles, height=rankings, width=width, \n       edgecolor='black', zorder=2, alpha=0.8)\n\nfor angle, height, rock_name in zip(angles, rankings, rock_names):\n    rotation_angle = np.degrees(angle)\n    if angle < np.pi:\n        rotation_angle -= 90\n    elif angle == np.pi:\n        rotation_angle -= 90\n    else:\n        rotation_angle += 90\n    ax.text(angle, 11, rock_name, \n            ha='center', va='center', \n            rotation=rotation_angle, rotation_mode='anchor', fontsize=16)\n\nplt.show()\n```", "```py\nbars_bg = ax.bar(x = angles, height=10, width=width, color='lightgrey',\n       edgecolor='white', zorder=1, alpha=0.8)\n```", "```py\nax.set_xticks([])\n\nax.grid(alpha=0.8, color='white', lw=3)\n```", "```py\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(10,10))\n\nindexes = list(range(0, len(rock_names)))\nwidth = 2*np.pi / len(rock_names)\nangles = [element * width for element in indexes]\n\nlabel_loc = np.linspace(start=0, stop=2 * np.pi, num=len(rock_names))\n\nbars_bg = ax.bar(x = angles, height=10, width=width, color='lightgrey',\n       edgecolor='white', zorder=1, alpha=0.8)\n\nbars = ax.bar(x = angles, height=rankings, width=width, \n       edgecolor='white', zorder=1, alpha=0.8)\n\nfor angle, height, rock_name in zip(angles, rankings, rock_names):\n    rotation_angle = np.degrees(angle)\n    if angle < np.pi:\n        rotation_angle -= 90\n    elif angle == np.pi:\n        rotation_angle -= 90\n    else:\n        rotation_angle += 90\n    ax.text(angle, 11, rock_name, \n            ha='center', va='center', \n            rotation=rotation_angle, rotation_mode='anchor', fontsize=16)\n\nax.set_xticks([])\n\nax.grid(alpha=0.8, color='white', lw=3)\n\nplt.ylim(0, 10)\nplt.show()\n```", "```py\nimport mplcyberpunk\n\nwith plt.style.context('cyberpunk'):\n    fig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(10,10))\n\n    angles = np.linspace(0, 2*np.pi, len(rock_names), endpoint=False)\n\n    indexes = list(range(0, len(rock_names)))\n    width = 2*np.pi / len(rock_names)\n    angles = [element * width for element in indexes]\n\n    label_loc = np.linspace(start=0, stop=2 * np.pi, num=len(rock_names))\n    bars_bg = ax.bar(x = angles, height=10, width=width, color='lightgrey',\n           edgecolor='white', zorder=1, alpha=0.05)\n\n    bars = ax.bar(x = angles, height=rankings, width=width, \n           edgecolor='white', zorder=2, alpha=0.6)\n\n    for angle, height, rock_name in zip(angles, rankings, rock_names):\n        rotation_angle = np.degrees(angle)\n        if angle < np.pi:\n            rotation_angle -= 90\n        elif angle == np.pi:\n            rotation_angle -= 90\n        else:\n            rotation_angle += 90\n        ax.text(angle, 11, rock_name, \n                ha='center', va='center', \n                rotation=rotation_angle, rotation_mode='anchor', fontsize=16)\n\n    ax.set_xticks([])\n\n    ax.grid(alpha=0.1, color='white', lw=3)\n\n    plt.ylim(0, 10)\n\n    plt.show()\n```"]