["```py\n$ python -m pdb myapp.py\n```", "```py\ndef foo(s):\n    if not isinstance(s, str):\n        raise TypeError\n    return s.upper()\n\nif __name__ == \"__main__\":\n    for s in (\"string1\", \"string2\"):\n        _ = foo(s)\n```", "```py\ndef foo(s):\n    if not isinstance(s, str):\n        raise TypeError\n    return s.upper()\n\nif __name__ == \"__main__\":\n    for s in (\"string1\", 10):\n        _ = foo(s)\n```", "```py\n$ python -m pdb myapp.py\n> /{path}/myapp.py(1)<module>()\n-> def foo(s: str):\n(Pdb) c\nThe program finished and will be restarted\n> /{path}/myapp.py(1)<module>()\n-> def foo(s: str):\n(Pdb)\n```", "```py\n$ python -m pdb myapp_error.py\n> /{path}/myapp_error.py(1)<module>()\n-> def foo(s: str):\n(Pdb) c\nTraceback (most recent call last):\n  File \"/usr/lib/python3.9/pdb.py\", line 1726, in main\n    pdb._runscript(mainpyfile)\n  File \"/usr/lib/python3.9/pdb.py\", line 1586, in _runscript\n    self.run(statement)\n  File \"/usr/lib/python3.9/bdb.py\", line 580, in run\n    exec(cmd, globals, locals)\n  File \"<string>\", line 1, in <module>\n  File \"/{path}/myapp_error.py\", line 1, in <module>\n    def foo(s: str):\n  File \"/{path}/myapp_error.py\", line 3, in foo\n    raise TypeError\nTypeError\nUncaught exception. Entering post mortem debugging\nRunning 'cont' or 'step' will restart the program\n> /{path}/myapp_error.py(3)foo()\n-> raise TypeError\n(Pdb) \n```", "```py\n$ python -m pdb myapp.py\n> /{path}/myapp.py(1)<module>()\n-> def foo(s: str):\n(Pdb) n\n> /{path}/myapp.py(1)<module>()\n-> if __name__ == \"__main__\":\n(Pdb) \n> /{path}/myapp.py(1)<module>()\n-> for s in (\"string1\", 10, \"string2\"):\n(Pdb) \n> /{path}/myapp.py(1)<module>()\n-> _ = foo(s)\n(Pdb) \n> /{path}/myapp.py(1)<module>()\n-> for s in (\"string1\", 10, \"string2\"):\n(Pdb) \n> /{path}/myapp.py(1)<module>()\n-> _ = foo(s)\n(Pdb) \nTypeError\n> /{path}/myapp.py(1)<module>()\n-> _ = foo(s)\n(Pdb) \n```", "```py\n(Pdb) al\n```", "```py\n(Pdb) p al\n```", "```py\n(Pdb) p alpha\n```", "```py\n(Pdb) {f\"{x_i = }, {alpha = }, and {beta = }\": (x_i + alpha)/(1 + beta) for x_i in x}\n{'x_i = 1, alpha = 4, and beta = 0': 5.0, 'x_i = 2, alpha = 4, and beta = 0': 6.0, 'x_i = 3, alpha = 4, and beta = 0': 7.0}\n(Pdb) pp {f\"{x_i = }, {alpha = }, and {beta = }\": (x_i + alpha)/(1 + beta) for x_i in x}\n{'x_i = 1, alpha = 4, and beta = 0': 5.0,\n 'x_i = 2, alpha = 4, and beta = 0': 6.0,\n 'x_i = 3, alpha = 4, and beta = 0': 7.0}\n```", "```py\n(Pdb) interact\n>>> {f\"{x_i = }, {alpha = }, and {beta = }\":\n...      (x_i + alpha)/(1 + beta) for x_i in x}\n{'x_i = 1, alpha = 4, and beta = 0': 5.0, 'x_i = 2, alpha = 4, and beta = 0': 6.0, 'x_i = 3, alpha = 4, and beta = 0': 7.0}\n```", "```py\ndef y(x, alpha, beta):\n    breakpoint()\n    return [(xi + alpha)/(1 + beta) for xi in x]\n\nx = [1, 2, 3]\ny(x)\n```", "```py\n-> return [(xi + alpha)/(1 + beta) for xi in x]\n(Pdb) l\n  1     def y(x, alpha, beta):\n  2         breakpoint()\n  3  ->     return [(xi + alpha)/(1 + beta) for xi in x]\n  4  \n  5  \n  6     x = [1, 2, 3]\n  7     y(x, 4, 0)\n[EOF]\n(Pdb) \n```", "```py\ndef y(x, alpha, beta):\n    return [(xi + alpha)/(1 + beta) for xi in x]\n```", "```py\n>>> def y(x, alpha, beta):\n...     return [(xi + alpha)/(1 + beta) for xi in x]\n... \n>>> x = [1, 2, 3]\n>>> y(x, .25, 0)\n[1.25, 2.25, 3.25]\n```", "```py\n>>> def y(x, alpha, beta):\n...     breakpoint()\n...     return [(xi + alpha)/(1 + beta) for xi in x]\n... \n>>> y(x, .25, 0)\n> <stdin>(3)y()\n(Pdb) alpha, beta\n(0.25, 0)\n(Pdb) [(xi + alpha)/(1 + beta) for xi in x]\n*** NameError: name 'alpha' is not defined\n```", "```py\n(Pdb) alpha, beta\n(0.25, 0)\n```", "```py\n(Pdb) alpha = .25; beta = 0\n(Pdb) alpha\n0.25\n(Pdb) [(xi + alpha)/(1 + beta) for xi in x]\n*** NameError: name 'alpha' is not defined\n```", "```py\n(Pdb) interact\n*interactive*\n>>> [(xi + alpha)/(1 + beta) for xi in x]\n[1.25, 2.25, 3.25]\n```", "```py\n(Pdb) globals()['alpha'] = alpha\n(Pdb) [(xi + alpha)/(1 + beta) for xi in x]\n*** NameError: name 'beta' is not defined\n```", "```py\n(Pdb) globals().update(locals())\n(Pdb) [(xi + alpha)/(1 + beta) for xi in x]\n[1.25, 2.25, 3.25]\n```"]