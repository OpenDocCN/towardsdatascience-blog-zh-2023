["```py\ncost = 1\n```", "```py\nfrom src.utils import *\nfrom src.dgp import dgp_gift\n\ndgp = dgp_gift(n=100_000)\ndf = dgp.generate_data()\ndf.head()\n```", "```py\nY = ['churn', 'revenue']\nW = 'gift'\nX = ['months', 'rev_old', 'rev_change']\n```", "```py\ndf.churn.mean()\n```", "```py\n0.19767\n```", "```py\nsmf.ols(\"churn ~ \" + W + \" + \" + \" + \".join(X), data=df).fit().summary().tables[1]\n```", "```py\nsmf.ols(\"revenue ~ \" + W + \" + \" + \" + \".join(X), data=df).fit().summary().tables[1]\n```", "```py\nfrom lightgbm import LGBMClassifier, LGBMRegressor\n```", "```py\ndef evaluate_policy(policy):\n    data = dgp.generate_data(seed_data=4, seed_assignment=5, keep_po=True)\n    data['profits'] = (1 - data.churn) * data.revenue\n    baseline = (1-data.churn_c) * data.revenue_c\n    effect = policy(data) * (1-data.churn_t) * (data.revenue_t-cost) + (1-policy(data)) * (1-data.churn_c) * data.revenue_c\n    return np.sum(effect - baseline)\n```", "```py\nmodel_churn = LGBMClassifier().fit(X=df[X], y=df['churn'])\n\npolicy_churn = lambda df : (model_churn.predict_proba(df[X])[:,1] > df.churn.mean())\nevaluate_policy(policy_churn)\n```", "```py\n-5497.46\n```", "```py\nx = np.linspace(0, 1, 100)\ny = [evaluate_policy(lambda df : (model_churn.predict_proba(df[X])[:,1] > p)) for pin x]\n\nfig, ax = plt.subplots(figsize=(10, 3))\nsns.lineplot(x=x, y=y).set(xlabel='Churn Policy Threshold', title='Aggregate Effect');\nax.axhline(y=0, c='k', lw=3, ls='--');\n```", "```py\nmodel_revenue = LGBMRegressor().fit(X=df[X], y=df['revenue'])\n\npolicy_revenue = lambda df : (model_revenue.predict(df[X]) > np.quantile(df.revenue, 0.9))\nevaluate_policy(policy_revenue)\n```", "```py\n-4730.82\n```", "```py\nx = np.linspace(0, 100, 100)\ny = [evaluate_policy(lambda df : (model_revenue.predict(df[X]) > c)) for c in x]\n\nfig, ax = plt.subplots(figsize=(10, 3))\nsns.lineplot(x=x, y=y).set(xlabel='Revenue Policy Threshold', title='Aggregate Effect');\nax.axhline(y=0, c='k', lw=3, ls='--');\n```", "```py\nfrom econml.dr import DRLearner\n\nDR_learner_churn = DRLearner(model_regression=LGBMRegressor(), model_propensity=LGBMClassifier(), model_final=LGBMRegressor())\nDR_learner_churn.fit(df['churn'], df[W], X=df[X]);\n```", "```py\npolicy_churn_lift = lambda df : DR_learner_churn.effect(df[X]) < - np.mean(df.churn)\nevaluate_policy(policy_churn_lift)\n```", "```py\n-3925.24\n```", "```py\nmodel_revenue_1 = LGBMRegressor().fit(X=df.loc[df[W] == 1, X], y=df.loc[df[W] == 1, 'revenue'])\n\npolicy_churn_lift = lambda df : - DR_learner_churn.effect(df[X]) * model_revenue_1.predict(df[X]) > cost\nevaluate_policy(policy_churn_lift)\n```", "```py\n318.03\n```", "```py\nDR_learner_netrevenue = DRLearner(model_regression=LGBMRegressor(), model_propensity=LGBMClassifier(), model_final=LGBMRegressor())\nDR_learner_netrevenue.fit(df.loc[df.churn==0, 'revenue'], df.loc[df.churn==0, W], X=df.loc[df.churn==0, X]);\nmodel_churn_1 = LGBMClassifier().fit(X=df.loc[df[W] == 1, X], y=df.loc[df[W] == 1, 'churn'])\n\npolicy_netrevenue_lift = lambda df : DR_learner_netrevenue.effect(df[X]) * (1-model_churn_1.predict(df[X])) > cost\nevaluate_policy(policy_netrevenue_lift)\n```", "```py\n50.80\n```", "```py\nDR_learner_revenue = DRLearner(model_regression=LGBMRegressor(), model_propensity=LGBMClassifier(), model_final=LGBMRegressor())\nDR_learner_revenue.fit(df['revenue'], df[W], X=df[X]);\n\npolicy_revenue_lift = lambda df : (DR_learner_revenue.effect(df[X]) > cost)\nevaluate_policy(policy_revenue_lift)\n```", "```py\n2028.21\n```", "```py\npolicies = [policy_churn, policy_revenue, policy_churn_lift, policy_netrevenue_lift, policy_revenue_lift] \ndf_results = pd.DataFrame()\ndf_results['policy'] = ['churn', 'revenue', 'churn_L', 'netrevenue_L', 'revenue_L']\ndf_results['value'] = [evaluate_policy(policy) for policy in policies]\n\nfig, ax = plt.subplots()\nsns.barplot(df_results, x='policy', y='value').set(title='Overall Incremental Effect')\nplt.axhline(0, c='k');\n```", "```py\nDR_learner_revenue_w = DRLearner(model_regression=LGBMRegressor(), model_propensity=LGBMClassifier(), model_final=LGBMRegressor())\nw = np.exp(1 + np.abs(DR_learner_revenue.effect(df[X]) - cost))\nDR_learner_revenue_w.fit(df['revenue'], df[W], X=df[X], sample_weight=w);\n\npolicy_revenue_lift_w = lambda df : (DR_learner_revenue_w.effect(df[X]) > cost)\nevaluate_policy(policy_revenue_lift_w)\n```", "```py\n1398.19\n```"]