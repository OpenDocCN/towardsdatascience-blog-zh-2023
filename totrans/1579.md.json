["```py\nfrom sklearn.datasets import load_wine\nfrom sklearn.model_selection import train_test_split\n########################\nX, y = load_wine(as_frame=True, return_X_y=True) \n# available from version >=0.23; as_frame\n########################\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, \n                                                    random_state=0)\nX_train.head(3)\n```", "```py\n ############\n# v1.2.0\n############\n\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler().set_output(transform=\"pandas\") \n## change here\n\nscaler.fit(X_train)\nX_test_scaled = scaler.transform(X_test)\nX_test_scaled.head(3)\n```", "```py\n###########\n# v 0.24\n########### \n\nscaler.fit(X_train)\nX_test_scaled = scaler.transform(X_test)\nprint (type(X_test_scaled))\n\n>>> <class 'numpy.ndarray'>\n```", "```py\n fig = plt.figure(figsize=(8, 5))\nfig.add_subplot(121)\nplt.scatter(X_test['proline'], X_test['hue'], \n            c=X_test['alcohol'], alpha=0.8, cmap='bwr')\nclb = plt.colorbar()\nplt.xlabel('Proline', fontsize=11)\nplt.ylabel('Hue', fontsize=11)\nfig.add_subplot(122)\nplt.scatter(X_test_scaled['proline'], X_test_scaled['hue'], \n            c=X_test_scaled['alcohol'], alpha=0.8, cmap='bwr')\n# pretty easy now in the newer version to see the effect\n\nplt.xlabel('Proline (Standardized)', fontsize=11)\nplt.ylabel('Hue (Standardized)', fontsize=11)\nclb = plt.colorbar()\nclb.ax.set_title('Alcohol', fontsize=8)\nplt.tight_layout()\nplt.show()\n```", "```py\n from sklearn.pipeline import make_pipeline\nfrom sklearn.svm import SVC\n\nclf = make_pipeline(StandardScaler(), SVC())\nclf.set_output(transform=\"pandas\") # change here \nsvm_fit = clf.fit(X_train, y_train)\n\nprint (clf[:-1]) # StandardScaler \nprint ('check that set_output format indeed remains even after we build a pipleline: ', '\\n')\nX_test_transformed = clf[:-1].transform(X_test)\n\nX_test_transformed.head(3)\n```", "```py\n from sklearn.datasets import fetch_openml\n\nstart_t = time.time()\nX, y = fetch_openml(\"titanic\", version=1, as_frame=True, \n                    return_X_y=True, parser=\"pandas\")\n# # parser pandas is the addition in the version 1.2.0\n\nX = X.select_dtypes([\"number\", \"category\"]).drop(columns=[\"body\"])\nprint ('check types: ', type(X), '\\n',  X.head(3))\nprint ('check shapes: ', X.shape)\nend_t = time.time()\nprint ('time taken: ', end_t-start_t)\n```", "```py\nprint(psutil.cpu_percent())\n```", "```py\n>>> ValueError: could not convert string to float: ‘female’\n```"]