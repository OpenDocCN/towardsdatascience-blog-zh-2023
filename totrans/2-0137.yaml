- en: 7 Easy Steps To Switch From Pandas to Lightning Fast Polars And Never Return
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Pandas切换到雷电般快速的Polars并永不回头的7个简单步骤
- en: 原文：[https://towardsdatascience.com/7-easy-steps-to-switch-from-pandas-to-lightning-fast-polars-and-never-return-b14c66fc85b9](https://towardsdatascience.com/7-easy-steps-to-switch-from-pandas-to-lightning-fast-polars-and-never-return-b14c66fc85b9)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/7-easy-steps-to-switch-from-pandas-to-lightning-fast-polars-and-never-return-b14c66fc85b9](https://towardsdatascience.com/7-easy-steps-to-switch-from-pandas-to-lightning-fast-polars-and-never-return-b14c66fc85b9)
- en: A cheat sheet of the most common Pandas operations translated into Polars
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最常见的Pandas操作的速查表翻译为Polars
- en: '[](https://ibexorigin.medium.com/?source=post_page-----b14c66fc85b9--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----b14c66fc85b9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b14c66fc85b9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b14c66fc85b9--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----b14c66fc85b9--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ibexorigin.medium.com/?source=post_page-----b14c66fc85b9--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----b14c66fc85b9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b14c66fc85b9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b14c66fc85b9--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----b14c66fc85b9--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b14c66fc85b9--------------------------------)
    ·9 min read·Apr 3, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[数据科学前沿](https://towardsdatascience.com/?source=post_page-----b14c66fc85b9--------------------------------)
    ·阅读时间9分钟·2023年4月3日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/c3c3d6087a84b3a47f4c643d748b0d43.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c3c3d6087a84b3a47f4c643d748b0d43.png)'
- en: Image by author via Midjourney
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者通过Midjourney提供
- en: Time for goodbyes!
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 是时候说再见了！
- en: Pandas can do anything. Virtually anything. But (and this is an I-wish-a-million-times-it-was-any-other-way
    *but*) it lacks speed. Pandas just can't keep up with the pace at which the size
    and complexity of today's datasets are growing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas可以做任何事。几乎任何事。但（这真的是我无数次希望它可以有所不同的*但*）它缺乏速度。Pandas根本无法跟上今天数据集规模和复杂度增长的速度。
- en: 'Pandas author, Wes McKinney, states that when he wrote Pandas, he had this
    rule of thumb in mind for his library:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas的作者Wes McKinney表示，当他编写Pandas时，他有一个针对其库的经验法则：
- en: Have 5 to 10 times as much RAM as the size of your dataset.
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 拥有比数据集大小多5到10倍的RAM。
- en: Maybe you could've snoozed past this rule when the Iris dataset was first introduced,
    but it is different today. You simply can't load a 100GB dataset (already common
    in modern times) when your RAM is *resolutely* stuck at 64 GBs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你曾经对引入Iris数据集时的这一规则视而不见，但今天情况有所不同。你根本无法在RAM*坚决*停留在64GB的情况下加载100GB的数据集（这在现代社会中已经很常见）。
- en: Sure, there are great alternatives like Dask. But Dask doesn’t implement new
    functionality. It stretches existing Pandas syntax over multiple processes (threads)
    and ignores the underlying performance and memory issues.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，也有像Dask这样的优秀替代方案。但Dask并没有实现新的功能。它只是将现有的Pandas语法扩展到多个进程（线程）上，忽略了底层的性能和内存问题。
- en: It treats Pandas as a **black box**. Forgive me for saying this, but it is almost
    like putting lipstick on a pig.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 它将Pandas视为**黑箱**。请原谅我这样说，但这几乎就像是在猪身上涂口红一样。
- en: Polars, the focus of our article, was written in Rust from the ground up to
    fix all the shortcomings of Pandas. In my last article, we've seen how it is already
    faster than the upcoming Pandas 2.0 with PyArrow backend.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Polars，本文的重点，是从头开始用Rust编写的，旨在修复Pandas的所有不足。在我上一篇文章中，我们已经看到它比即将推出的Pandas 2.0（配备PyArrow后端）更快。
- en: While that article focused on speed advantages, this one focuses more on the
    syntax and functionality and shows you how to switch from Pandas to Polars in
    seven easy steps and, maybe, never switch back.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然那篇文章重点关注速度优势，这篇文章则更多地关注语法和功能，并展示了如何在七个简单步骤中从Pandas切换到Polars，也许永远不会再切换回来。
- en: 0\. Reading/writing data
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0. 读写数据
- en: Even though it is painfully slow, CSV is still one of the most popular file
    formats to store data. So, let's start with the `read_csv` function of Polars.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管速度极其缓慢，CSV仍然是存储数据的最流行文件格式之一。所以，让我们从Polars的`read_csv`函数开始吧。
- en: Apart from the apparent speed benefits, it only differs from its Pandas namesake
    in terms of the number of parameters (Pandas `read_csv` has 49\. Yep, I counted)
    and syntax.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了明显的速度优势外，它只在参数数量（Pandas 的 `read_csv` 有 49 个。是的，我数过）和语法上与 Pandas 有所不同。
- en: '![](../Images/44c230f7575349cfdbb31f100a9d7f71.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/44c230f7575349cfdbb31f100a9d7f71.png)'
- en: Image by author
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: The confusing parameter names shouldn't be a problem as most modern IDEs have
    tab-completion or pop-up documentation features (**Shift + Tab** on JupyterLab,
    thank you 🙏).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 混淆的参数名称不应该是问题，因为大多数现代 IDE 都具有自动补全或弹出文档功能（JupyterLab 上的**Shift + Tab**，谢谢 🙏）。
- en: If you were unaware, the `dtype` parameter prevents Pandas from setting automatic
    datatypes and allows the user to set custom ones like `string` type for `cut`
    or `datetime` for date-type columns.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不知道的话，`dtype` 参数防止 Pandas 设置自动数据类型，并允许用户设置自定义数据类型，如 `cut` 的 `string` 类型或日期类型列的
    `datetime`。
- en: You can use the same behavior in Polars with `dtypes` (mind the ‘s’) though
    it doesn’t allow the types to be set via strings. You have to provide either Python
    built-in types or through Polars’, like `pl.Boolean`, `pl.Categorical`, `pl.DateTime`,
    `pl.Int64 or pl.Null` for missing values. You can see the complete list by calling
    `dir(pl)`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Polars 中使用相同的行为，使用 `dtypes`（注意是‘s’），虽然它不允许通过字符串设置类型。你必须提供 Python 内建类型或
    Polars 的类型，例如 `pl.Boolean`、`pl.Categorical`、`pl.DateTime`、`pl.Int64` 或 `pl.Null`（表示缺失值）。你可以通过调用
    `dir(pl)` 查看完整列表。
- en: Reading and writing Parquet files, which are much faster and more memory-efficient
    than CSVs, are also supported in Polars through `read_parquet` and `write_parquet`
    functions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 读取和写入 Parquet 文件，这比 CSV 文件更快、更节省内存，Polars 通过 `read_parquet` 和 `write_parquet`
    函数也支持这些操作。
- en: '![](../Images/0b4af4f7dd3227f8a748cb952903ee03.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0b4af4f7dd3227f8a748cb952903ee03.png)'
- en: Image by author
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 1\. Creating Series and DataFrames
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 创建 Series 和 DataFrames
- en: 'You don''t always read data from files. Like in Pandas, you can create DataFrames
    and Series from scratch, and the syntaxes are almost identical:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你并不总是从文件中读取数据。像在 Pandas 中一样，你可以从头创建 DataFrames 和 Series，语法几乎相同：
- en: '![](../Images/de99210af7adb4c1045ec58c3f988b82.png)![](../Images/ba3f26652bda07fab8aa5303850303a5.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/de99210af7adb4c1045ec58c3f988b82.png)![](../Images/ba3f26652bda07fab8aa5303850303a5.png)'
- en: Images by author
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'There are also many name and behavior-(almost)-identical methods of Polars
    DataFrames to Pandas. Say hello to:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Polars DataFrames 也有许多与 Pandas 几乎相同名称和行为的方法。打个招呼吧：
- en: '`[apply](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.apply.html#polars.DataFrame.apply)`
    - Apply custom user-defined functions on each row of the DataFrame'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[apply](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.apply.html#polars.DataFrame.apply)`
    - 对 DataFrame 的每一行应用自定义用户定义的函数'
- en: '`[corr](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.corr.html#polars.DataFrame.corr)`
    - correlation matrix'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[corr](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.corr.html#polars.DataFrame.corr)`
    - 相关性矩阵'
- en: '`[describe](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.describe.html#polars.DataFrame.describe)`
    - Summary statistics, 5-number summary'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[describe](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.describe.html#polars.DataFrame.describe)`
    - 汇总统计，五数概括'
- en: '`[drop](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.drop.html#polars.DataFrame.drop)`
    - Remove columns from a DataFrame'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[drop](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.drop.html#polars.DataFrame.drop)`
    - 从 DataFrame 中删除列'
- en: '`[explode](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.explode.html#polars.DataFrame.explode)`
    - Unpacking the given column to long format (when cells contain multiple values
    like `[1, 2, 3]`)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[explode](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.explode.html#polars.DataFrame.explode)`
    - 将给定列解包为长格式（当单元格包含多个值如 `[1, 2, 3]` 时）'
- en: '`[head](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.head.html#polars.DataFrame.head)`,
    `[tail](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.tail.html#polars.DataFrame.tail)`
    and `[sample(n)](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.sample.html#polars.DataFrame.sample)`
    - get different views of the DataFrame (top, bottom, random)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[head](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.head.html#polars.DataFrame.head)`、`[tail](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.tail.html#polars.DataFrame.tail)`
    和 `[sample(n)](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.sample.html#polars.DataFrame.sample)`
    - 获取 DataFrame 的不同视图（顶部、底部、随机）'
- en: '`[iter_rows](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.iter_rows.html#polars.DataFrame.iter_rows)`
    - returns an iterator of DataFrame rows of Python-native values'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[iter_rows](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.iter_rows.html#polars.DataFrame.iter_rows)`
    - 返回一个 DataFrame 行的迭代器，包含 Python 原生值'
- en: '`max`, `mean`, `median`, `sum`, `std` and the usual gang of common math and
    statistical functions.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max`、`mean`、`median`、`sum`、`std` 和常见的数学和统计函数。'
- en: and so on. Check out [this page](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/index.html)
    of the docs for the full list of DataFrame methods in Polars.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 等等。查看 [这个页面](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/index.html)
    以获取 Polars 中 DataFrame 方法的完整列表。
- en: 2\. Understanding expressions in Polars
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 理解 Polars 中的表达式
- en: '![](../Images/bf7e75e893d0599c0f5ea425a523bec5.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bf7e75e893d0599c0f5ea425a523bec5.png)'
- en: This is a query engine, human. — Midjourney
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个查询引擎，人类。 — Midjourney
- en: At the core of Polars is its **query engine**, which runs user-defined **expressions**.
    The query engine and expressions are two critical components for Polars' blazing
    fast and, as the Polars user guide puts it, "embarrassingly parallel" performance.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Polars 的核心是其 **查询引擎**，它运行用户定义的 **表达式**。查询引擎和表达式是 Polars 极快性能的两个关键组件，正如 Polars
    用户指南所说的，“令人尴尬的并行”。
- en: You may be shocked at how closely Polars expressions resemble SQL while keeping
    firm ties to the familiar Pandas syntax.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会惊讶于 Polars 表达式与 SQL 的相似程度，同时保持与熟悉的 Pandas 语法的紧密联系。
- en: 'Like SQL queries, you can write expressions for:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 像 SQL 查询一样，你可以为以下内容编写表达式：
- en: Creating new columns from existing ones
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从现有列创建新列
- en: Getting views of the data after some transformation
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在某些转换后获取数据视图
- en: Summary statistics
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 汇总统计
- en: Processing and cleaning data
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理和清理数据
- en: Groupby statements
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Groupby 语句
- en: and so on.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 等等。
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the query above, the expression is `pl.col('column)' == 'some_value'`, which,
    as you guess, *filters* the DataFrame for rows where `column` is equal to `some_value`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的查询中，表达式是 `pl.col('column)' == 'some_value'`，这正如你所猜测的，*过滤* DataFrame 以获得
    `column` 等于 `some_value` 的行。
- en: 'When you run the expression on its own, you won''t get a boolean Series as
    you would in Pandas:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当你单独运行这个表达式时，你不会得到像在 Pandas 中那样的布尔 Series：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'That''s because expressions are only evaluated under *contexts*. There are
    three broad contexts in Polars:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为表达式只在 *上下文* 中进行评估。Polars 中有三种广泛的上下文：
- en: Selecting data — in the `select` context, expressions are applied over columns
    and must produce columns of the same length in the result. This behavior must
    be familiar from your SQL days. The `filter` function is also tied into this context.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择数据 — 在 `select` 上下文中，表达式应用于列，并且必须在结果中产生相同长度的列。这种行为应当对你来说很熟悉。`filter` 函数也与这个上下文相关联。
- en: Grouping data — in the `groupby` context, expressions work on groups, and the
    results may have any length as a group can have many members.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分组数据 — 在 `groupby` 上下文中，表达式在组上工作，结果可能具有任何长度，因为一个组可以有多个成员。
- en: Adding new columns — in this context, expressions are used to create new columns
    from scratch or existing ones.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加新列 — 在这种情况下，表达式用于从头开始或从现有列创建新列。
- en: Let's see each context in detail.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看每个上下文。
- en: 3\. Selecting data
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 选择数据
- en: The Pandas' brackets notation gives way to expressions in Polars for selecting
    columns.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 的括号表示法让位于 Polars 中用于选择列的表达式。
- en: To select a single column, you can use their literal names inside `select` or
    use the recommended `pl.col` function to reference columns.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择单个列，你可以在 `select` 中使用它们的字面名称，或使用推荐的 `pl.col` 函数来引用列。
- en: To select multiple, you can list the column names with commas inside `pl.col`
    or as a list of `pl.col` references inside `select`. We will see the differences
    between these syntaxes in a bit.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择多个列，你可以在 `pl.col` 中列出列名，用逗号分隔，或在 `select` 中列出 `pl.col` 引用的列表。我们稍后会看到这些语法之间的区别。
- en: '![](../Images/7cefcd08edf6e03e42c1404b1462778b.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7cefcd08edf6e03e42c1404b1462778b.png)'
- en: Image by author
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'Polars includes certain functionality not fully available in Pandas for selecting
    data. For example, you can exclude columns in your selection with `exclude`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Polars 包含一些 Pandas 中未完全提供的选择数据功能。例如，你可以使用 `exclude` 排除选择中的列：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/a346371b15220539a09ec951f8343e33.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a346371b15220539a09ec951f8343e33.png)'
- en: Image by author
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'Or use regular expressions between `^` and `$` characters. Below, we are choosing
    all columns that start with the letter *c*:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 `^` 和 `$` 字符之间的正则表达式。下面，我们选择所有以字母 *c* 开头的列：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/b0d429fbda06c39284086ac7415a465b.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b0d429fbda06c39284086ac7415a465b.png)'
- en: Image by author
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'You can also subset the DataFrame based on data type, which might remind you
    of `select_dtypes` of Pandas (on the left):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以根据数据类型对子集 DataFrame，这可能让你想起 Pandas 中的 `select_dtypes`（左侧）：
- en: '![](../Images/645c4fc4bd91ba1c12d477ccc2d67c7a.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/645c4fc4bd91ba1c12d477ccc2d67c7a.png)'
- en: Image by author
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: To select all numeric columns, we are using both `Int64` and `Float64` types
    inside `pl.col`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择所有数值列，我们在 `pl.col` 中使用了 `Int64` 和 `Float64` 类型。
- en: 4\. Filtering data
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 数据过滤
- en: You can use the `filter` function to subset DataFrames with boolean indexing.
    For example, using `is_between` function on a column creates an expression to
    filter numeric columns within a range.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `filter` 函数通过布尔索引对 DataFrames 进行子集化。例如，在列上使用 `is_between` 函数可以创建一个表达式来筛选范围内的数值列。
- en: '![](../Images/d240bddd0cd570e39959051d86bb9221.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d240bddd0cd570e39959051d86bb9221.png)'
- en: Image by author
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'You can combine multiple *conditional expressions* with the familiar boolean
    operators `&` (AND), `|` (OR). In the example below, we are choosing rows where
    the `color` column is either ''E'' or ''J'' AND the `price` of diamonds are below
    500:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用熟悉的布尔运算符 `&` (AND) 和 `|` (OR) 结合多个 *条件表达式*。在下面的示例中，我们选择 `color` 列为 'E'
    或 'J' 并且钻石的 `price` 低于 500 的行：
- en: '![](../Images/934b5e017bea5f566317496ae9aab707.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/934b5e017bea5f566317496ae9aab707.png)'
- en: Image by author
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Also, notice how we are using `is_in` in Polars on the right.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，注意我们在右侧如何使用 Polars 中的 `is_in`。
- en: 5\. Creating new columns
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 创建新列
- en: You can create new columns under the `with_columns` context. In the example
    below, `new_col` is defined using `pl.col('price') ** 2` and aliased to give the
    new column a name, just like `as` keyword in SQL.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 `with_columns` 上下文中创建新列。在下面的示例中，`new_col` 使用 `pl.col('price') ** 2` 定义，并通过别名给新列命名，就像
    SQL 中的 `as` 关键字一样。
- en: '![](../Images/65624baaae02358a66024e15b3d2c7e2.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/65624baaae02358a66024e15b3d2c7e2.png)'
- en: Image by author
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: In the second example, we combine two columns (even though it doesn't make sense),
    demonstrating how integer and string columns can be combined with Polars. You
    can use any native Python or third-party function and operator on columns referenced
    with `pl.col`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个示例中，我们结合了两个列（尽管这没有意义），演示了如何将整数和字符串列与 Polars 结合使用。你可以在使用 `pl.col` 引用的列上使用任何本地
    Python 或第三方函数和运算符。
- en: If you want the new column to be inserted into the DataFrame, you have to override
    the original `df` variable.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将新列插入到 DataFrame 中，你必须覆盖原始的 `df` 变量。
- en: While we are at it, string columns in Polars have the familiar `.str` interface
    for special text manipulation functions like `contains` or `lengths`. See the
    full list [here](https://pola-rs.github.io/polars/py-polars/html/reference/series/string.html).
    There are also `[.cat](https://pola-rs.github.io/polars/py-polars/html/reference/series/categories.html)`,
    `[.dt](https://pola-rs.github.io/polars/py-polars/html/reference/series/temporal.html)`
    and `[.arr](https://pola-rs.github.io/polars/py-polars/html/reference/series/list.html)`
    interfaces for specialized categorical, temporal and array functions.
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 顺便提一下，Polars 中的字符串列具有熟悉的 `.str` 接口，用于特殊的文本操作函数，如 `contains` 或 `lengths`。完整列表请参见
    [这里](https://pola-rs.github.io/polars/py-polars/html/reference/series/string.html)。还有用于专业分类、时间和数组函数的
    `[.cat](https://pola-rs.github.io/polars/py-polars/html/reference/series/categories.html)`、`[.dt](https://pola-rs.github.io/polars/py-polars/html/reference/series/temporal.html)`
    和 `[.arr](https://pola-rs.github.io/polars/py-polars/html/reference/series/list.html)`
    接口。
- en: 6\. Groupby
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. 分组操作
- en: 'I don''t think we can leave without mentioning `Groupby` operations:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我不认为我们可以不提及 `Groupby` 操作：
- en: '![](../Images/80a82e43f3e9b70d746b962f35409a1c.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/80a82e43f3e9b70d746b962f35409a1c.png)'
- en: Image by author
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'When using the `groupby` function in Polars, be sure to include `maintain_order=True`
    so that groups are not displayed randomly. Also, unlike Pandas, `groupby(col_name)`
    expression only works on the given column. To group all columns based on `col_name`,
    you have to use an aggregation context. Here is its syntax:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Polars 的 `groupby` 函数时，务必包含 `maintain_order=True` 以确保组不会随机显示。此外，与 Pandas
    不同，`groupby(col_name)` 表达式仅作用于给定列。要根据 `col_name` 对所有列进行分组，你必须使用聚合上下文。其语法如下：
- en: '[PRE5]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After the `groupby` context, you chain the aggregation context and specify which
    columns the context affects. And chain any function on the result like `count`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `groupby` 上下文之后，你将链式聚合上下文，并指定上下文影响哪些列。然后在结果上链式调用任何函数，例如 `count`。
- en: 'Here is another example that groups by the diamond cut quality and returns
    the average numeric value for each group:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个示例，按钻石切割质量分组，并返回每组的平均数值：
- en: '![](../Images/8beaae709bd9675c7defc2f7a358d5ce.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8beaae709bd9675c7defc2f7a358d5ce.png)'
- en: To learn more advanced groupby expressions in Polars, read [here](https://pola-rs.github.io/polars-book/user-guide/dsl/groupby.html).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Polars 中高级 `groupby` 表达式的信息，请阅读[这里](https://pola-rs.github.io/polars-book/user-guide/dsl/groupby.html)。
- en: 7\. The lazy API in Polars
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7\. Polars中的懒惰 API
- en: One of the best features of Polars is its lazy API. In it, queries aren't run
    line-by-line but processed end-to-end by the query engine.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Polars 最棒的功能之一是其懒惰 API。在该 API 中，查询不是逐行执行的，而是由查询引擎端到端处理的。
- en: 'This is where query optimization and the *embarrassingly parallel* magic happen.
    You can turn any expression written in **eager mode** into the lazy mode with
    only two keywords:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是查询优化和*令人尴尬的并行*魔法发生的地方。你可以仅用两个关键字将任何在**急切模式**下编写的表达式转换为懒惰模式：
- en: '[PRE6]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When you add the `lazy()` function before an expression is chained, the DataFrame
    becomes a `LazyFrame`. At this point, the query isn''t executed, and you can chain
    more expressions. Once ready, you call `collect()` to get the result:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在链式表达式之前添加 `lazy()` 函数时，DataFrame 会变成 `LazyFrame`。此时，查询尚未执行，你可以链式添加更多表达式。一旦准备好，你可以调用
    `collect()` 来获取结果：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/d9993faba6603676332e7d66b21a03ea.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d9993faba6603676332e7d66b21a03ea.png)'
- en: Image by author
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: While it is already fast in eager mode, the lazy mode adds exxxtra (yes, triple
    x) fuel to the query engine.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它在急切模式下已经很快，但懒惰模式为查询引擎提供了额外的（是的，三倍的 x）动力。
- en: 'If you want to make the lazy API your default, you can use `scan_*` functions
    when reading data instead of `read_*`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望将懒惰 API 设为默认，可以在读取数据时使用 `scan_*` 函数，而不是 `read_*`：
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This way, you avoid writing the `lazy()` function every time.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你就能避免每次都编写 `lazy()` 函数。
- en: If you are dealing with datasets that are intimidating to your RAM, you can
    use streaming so that Polars processes your data in batches. This feature is enabled
    in the lazy API by setting `streaming=True` inside `collect`. Find out more about
    this excellent feature from [this page](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你处理的数据集对你的内存构成威胁，你可以使用流式处理，使 Polars 分批处理数据。这个功能可以通过在`collect`中设置`streaming=True`来启用。更多关于这一优秀功能的信息，请参见[此页面](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)。
- en: Conclusion
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: 'Polars might be new (I mean, it is fresh out of its crib), but it is already
    very popular. In the open-source standards, it is a rock star. Just look at its
    competitors:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Polars 可能很新（我是说，它刚刚出生不久），但已经非常受欢迎。在开源标准中，它是明星。只需看看它的竞争对手：
- en: Pandas, released in 2011, has 37.5k GitHub stars.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Pandas，发布于2011年，拥有37.5k个GitHub星标。
- en: Apache Spark, released in 2014, has 26.8k stars.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Apache Spark，发布于2014年，拥有26.8k个星标。
- en: Vaex, released in 2017, has 7.9k GitHub stars.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Vaex，发布于2017年，拥有7.9k个GitHub星标。
- en: Dask, released in 2015, has 10.9k stars.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Dask，发布于2015年，拥有10.9k个星标。
- en: Apache Arrow, released in 2016, has 11.4k stars.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Apache Arrow，发布于2016年，拥有11.4k个星标。
- en: In comparison, Polars was released in 2020 and already amassed 15.9k stars,
    halfway to its long-standing top competitors.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，Polars 于2020年发布，已经积累了15.9k个星标，接近其长期顶级竞争对手的一半。
- en: This should give you a rough picture of where the wind is blowing. Things might
    change when Pandas 2.0 is released, but I think Polars is already giving Pandas
    a run for its money.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该能给你一个大概的了解风向如何变化。虽然 Pandas 2.0 发布后情况可能会有所变化，但我认为 Polars 已经在给 Pandas 带来不小的竞争。
- en: Loved this article and, let’s face it, its bizarre writing style? Imagine having
    access to dozens more just like it, all written by a brilliant, charming, witty
    author (that’s me, by the way :).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢这篇文章吗？说实话，它那奇特的写作风格呢？想象一下，如果你能访问到更多类似的文章，全部由一位才华横溢、迷人而风趣的作者（顺便说一下，就是我 :）。
- en: For only 4.99$ membership, you will get access to not just my stories, but a
    treasure trove of knowledge from the best and brightest minds on Medium. And if
    you use [my referral link](https://ibexorigin.medium.com/membership), you will
    earn my supernova of gratitude and a virtual high-five for supporting my work.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 只需4.99$的会员费用，你将不仅能访问我的故事，还能获取Medium上最优秀的思想者们的宝贵知识。如果你使用[我的推荐链接](https://ibexorigin.medium.com/membership)，你将获得我超级nova的感激之情和一记虚拟的击掌，以支持我的工作。
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----b14c66fc85b9--------------------------------)
    [## Join Medium with my referral link — Bex T.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ibexorigin.medium.com/membership?source=post_page-----b14c66fc85b9--------------------------------)
    [## 通过我的推荐链接加入Medium — Bex T.'
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获得对我所有⚡优质⚡内容的独家访问权限，无限制地浏览Medium。通过购买我提供的服务来支持我的工作……
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----b14c66fc85b9--------------------------------)
    ![](../Images/a01b5e4fb641db5f35b8172a4388e821.png)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----b14c66fc85b9--------------------------------)
    ![](../Images/a01b5e4fb641db5f35b8172a4388e821.png)
