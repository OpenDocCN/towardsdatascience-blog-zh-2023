- en: 7 Easy Steps To Switch From Pandas to Lightning Fast Polars And Never Return
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/7-easy-steps-to-switch-from-pandas-to-lightning-fast-polars-and-never-return-b14c66fc85b9](https://towardsdatascience.com/7-easy-steps-to-switch-from-pandas-to-lightning-fast-polars-and-never-return-b14c66fc85b9)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A cheat sheet of the most common Pandas operations translated into Polars
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/?source=post_page-----b14c66fc85b9--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----b14c66fc85b9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b14c66fc85b9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b14c66fc85b9--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----b14c66fc85b9--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b14c66fc85b9--------------------------------)
    ¬∑9 min read¬∑Apr 3, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c3c3d6087a84b3a47f4c643d748b0d43.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author via Midjourney
  prefs: []
  type: TYPE_NORMAL
- en: Time for goodbyes!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pandas can do anything. Virtually anything. But (and this is an I-wish-a-million-times-it-was-any-other-way
    *but*) it lacks speed. Pandas just can't keep up with the pace at which the size
    and complexity of today's datasets are growing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pandas author, Wes McKinney, states that when he wrote Pandas, he had this
    rule of thumb in mind for his library:'
  prefs: []
  type: TYPE_NORMAL
- en: Have 5 to 10 times as much RAM as the size of your dataset.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Maybe you could've snoozed past this rule when the Iris dataset was first introduced,
    but it is different today. You simply can't load a 100GB dataset (already common
    in modern times) when your RAM is *resolutely* stuck at 64 GBs.
  prefs: []
  type: TYPE_NORMAL
- en: Sure, there are great alternatives like Dask. But Dask doesn‚Äôt implement new
    functionality. It stretches existing Pandas syntax over multiple processes (threads)
    and ignores the underlying performance and memory issues.
  prefs: []
  type: TYPE_NORMAL
- en: It treats Pandas as a **black box**. Forgive me for saying this, but it is almost
    like putting lipstick on a pig.
  prefs: []
  type: TYPE_NORMAL
- en: Polars, the focus of our article, was written in Rust from the ground up to
    fix all the shortcomings of Pandas. In my last article, we've seen how it is already
    faster than the upcoming Pandas 2.0 with PyArrow backend.
  prefs: []
  type: TYPE_NORMAL
- en: While that article focused on speed advantages, this one focuses more on the
    syntax and functionality and shows you how to switch from Pandas to Polars in
    seven easy steps and, maybe, never switch back.
  prefs: []
  type: TYPE_NORMAL
- en: 0\. Reading/writing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even though it is painfully slow, CSV is still one of the most popular file
    formats to store data. So, let's start with the `read_csv` function of Polars.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from the apparent speed benefits, it only differs from its Pandas namesake
    in terms of the number of parameters (Pandas `read_csv` has 49\. Yep, I counted)
    and syntax.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/44c230f7575349cfdbb31f100a9d7f71.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The confusing parameter names shouldn't be a problem as most modern IDEs have
    tab-completion or pop-up documentation features (**Shift + Tab** on JupyterLab,
    thank you üôè).
  prefs: []
  type: TYPE_NORMAL
- en: If you were unaware, the `dtype` parameter prevents Pandas from setting automatic
    datatypes and allows the user to set custom ones like `string` type for `cut`
    or `datetime` for date-type columns.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the same behavior in Polars with `dtypes` (mind the ‚Äòs‚Äô) though
    it doesn‚Äôt allow the types to be set via strings. You have to provide either Python
    built-in types or through Polars‚Äô, like `pl.Boolean`, `pl.Categorical`, `pl.DateTime`,
    `pl.Int64 or pl.Null` for missing values. You can see the complete list by calling
    `dir(pl)`.
  prefs: []
  type: TYPE_NORMAL
- en: Reading and writing Parquet files, which are much faster and more memory-efficient
    than CSVs, are also supported in Polars through `read_parquet` and `write_parquet`
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0b4af4f7dd3227f8a748cb952903ee03.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Creating Series and DataFrames
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You don''t always read data from files. Like in Pandas, you can create DataFrames
    and Series from scratch, and the syntaxes are almost identical:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/de99210af7adb4c1045ec58c3f988b82.png)![](../Images/ba3f26652bda07fab8aa5303850303a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Images by author
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also many name and behavior-(almost)-identical methods of Polars
    DataFrames to Pandas. Say hello to:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[apply](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.apply.html#polars.DataFrame.apply)`
    - Apply custom user-defined functions on each row of the DataFrame'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[corr](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.corr.html#polars.DataFrame.corr)`
    - correlation matrix'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[describe](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.describe.html#polars.DataFrame.describe)`
    - Summary statistics, 5-number summary'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[drop](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.drop.html#polars.DataFrame.drop)`
    - Remove columns from a DataFrame'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[explode](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.explode.html#polars.DataFrame.explode)`
    - Unpacking the given column to long format (when cells contain multiple values
    like `[1, 2, 3]`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[head](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.head.html#polars.DataFrame.head)`,
    `[tail](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.tail.html#polars.DataFrame.tail)`
    and `[sample(n)](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.sample.html#polars.DataFrame.sample)`
    - get different views of the DataFrame (top, bottom, random)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[iter_rows](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.iter_rows.html#polars.DataFrame.iter_rows)`
    - returns an iterator of DataFrame rows of Python-native values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max`, `mean`, `median`, `sum`, `std` and the usual gang of common math and
    statistical functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and so on. Check out [this page](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/index.html)
    of the docs for the full list of DataFrame methods in Polars.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Understanding expressions in Polars
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/bf7e75e893d0599c0f5ea425a523bec5.png)'
  prefs: []
  type: TYPE_IMG
- en: This is a query engine, human. ‚Äî Midjourney
  prefs: []
  type: TYPE_NORMAL
- en: At the core of Polars is its **query engine**, which runs user-defined **expressions**.
    The query engine and expressions are two critical components for Polars' blazing
    fast and, as the Polars user guide puts it, "embarrassingly parallel" performance.
  prefs: []
  type: TYPE_NORMAL
- en: You may be shocked at how closely Polars expressions resemble SQL while keeping
    firm ties to the familiar Pandas syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like SQL queries, you can write expressions for:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating new columns from existing ones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting views of the data after some transformation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary statistics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processing and cleaning data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Groupby statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the query above, the expression is `pl.col('column)' == 'some_value'`, which,
    as you guess, *filters* the DataFrame for rows where `column` is equal to `some_value`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run the expression on its own, you won''t get a boolean Series as
    you would in Pandas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s because expressions are only evaluated under *contexts*. There are
    three broad contexts in Polars:'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting data ‚Äî in the `select` context, expressions are applied over columns
    and must produce columns of the same length in the result. This behavior must
    be familiar from your SQL days. The `filter` function is also tied into this context.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Grouping data ‚Äî in the `groupby` context, expressions work on groups, and the
    results may have any length as a group can have many members.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding new columns ‚Äî in this context, expressions are used to create new columns
    from scratch or existing ones.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's see each context in detail.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Selecting data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Pandas' brackets notation gives way to expressions in Polars for selecting
    columns.
  prefs: []
  type: TYPE_NORMAL
- en: To select a single column, you can use their literal names inside `select` or
    use the recommended `pl.col` function to reference columns.
  prefs: []
  type: TYPE_NORMAL
- en: To select multiple, you can list the column names with commas inside `pl.col`
    or as a list of `pl.col` references inside `select`. We will see the differences
    between these syntaxes in a bit.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7cefcd08edf6e03e42c1404b1462778b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Polars includes certain functionality not fully available in Pandas for selecting
    data. For example, you can exclude columns in your selection with `exclude`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a346371b15220539a09ec951f8343e33.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Or use regular expressions between `^` and `$` characters. Below, we are choosing
    all columns that start with the letter *c*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b0d429fbda06c39284086ac7415a465b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also subset the DataFrame based on data type, which might remind you
    of `select_dtypes` of Pandas (on the left):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/645c4fc4bd91ba1c12d477ccc2d67c7a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: To select all numeric columns, we are using both `Int64` and `Float64` types
    inside `pl.col`.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Filtering data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use the `filter` function to subset DataFrames with boolean indexing.
    For example, using `is_between` function on a column creates an expression to
    filter numeric columns within a range.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d240bddd0cd570e39959051d86bb9221.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'You can combine multiple *conditional expressions* with the familiar boolean
    operators `&` (AND), `|` (OR). In the example below, we are choosing rows where
    the `color` column is either ''E'' or ''J'' AND the `price` of diamonds are below
    500:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/934b5e017bea5f566317496ae9aab707.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Also, notice how we are using `is_in` in Polars on the right.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Creating new columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can create new columns under the `with_columns` context. In the example
    below, `new_col` is defined using `pl.col('price') ** 2` and aliased to give the
    new column a name, just like `as` keyword in SQL.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/65624baaae02358a66024e15b3d2c7e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: In the second example, we combine two columns (even though it doesn't make sense),
    demonstrating how integer and string columns can be combined with Polars. You
    can use any native Python or third-party function and operator on columns referenced
    with `pl.col`.
  prefs: []
  type: TYPE_NORMAL
- en: If you want the new column to be inserted into the DataFrame, you have to override
    the original `df` variable.
  prefs: []
  type: TYPE_NORMAL
- en: While we are at it, string columns in Polars have the familiar `.str` interface
    for special text manipulation functions like `contains` or `lengths`. See the
    full list [here](https://pola-rs.github.io/polars/py-polars/html/reference/series/string.html).
    There are also `[.cat](https://pola-rs.github.io/polars/py-polars/html/reference/series/categories.html)`,
    `[.dt](https://pola-rs.github.io/polars/py-polars/html/reference/series/temporal.html)`
    and `[.arr](https://pola-rs.github.io/polars/py-polars/html/reference/series/list.html)`
    interfaces for specialized categorical, temporal and array functions.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 6\. Groupby
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I don''t think we can leave without mentioning `Groupby` operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/80a82e43f3e9b70d746b962f35409a1c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'When using the `groupby` function in Polars, be sure to include `maintain_order=True`
    so that groups are not displayed randomly. Also, unlike Pandas, `groupby(col_name)`
    expression only works on the given column. To group all columns based on `col_name`,
    you have to use an aggregation context. Here is its syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: After the `groupby` context, you chain the aggregation context and specify which
    columns the context affects. And chain any function on the result like `count`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is another example that groups by the diamond cut quality and returns
    the average numeric value for each group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8beaae709bd9675c7defc2f7a358d5ce.png)'
  prefs: []
  type: TYPE_IMG
- en: To learn more advanced groupby expressions in Polars, read [here](https://pola-rs.github.io/polars-book/user-guide/dsl/groupby.html).
  prefs: []
  type: TYPE_NORMAL
- en: 7\. The lazy API in Polars
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the best features of Polars is its lazy API. In it, queries aren't run
    line-by-line but processed end-to-end by the query engine.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where query optimization and the *embarrassingly parallel* magic happen.
    You can turn any expression written in **eager mode** into the lazy mode with
    only two keywords:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When you add the `lazy()` function before an expression is chained, the DataFrame
    becomes a `LazyFrame`. At this point, the query isn''t executed, and you can chain
    more expressions. Once ready, you call `collect()` to get the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d9993faba6603676332e7d66b21a03ea.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: While it is already fast in eager mode, the lazy mode adds exxxtra (yes, triple
    x) fuel to the query engine.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to make the lazy API your default, you can use `scan_*` functions
    when reading data instead of `read_*`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This way, you avoid writing the `lazy()` function every time.
  prefs: []
  type: TYPE_NORMAL
- en: If you are dealing with datasets that are intimidating to your RAM, you can
    use streaming so that Polars processes your data in batches. This feature is enabled
    in the lazy API by setting `streaming=True` inside `collect`. Find out more about
    this excellent feature from [this page](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Polars might be new (I mean, it is fresh out of its crib), but it is already
    very popular. In the open-source standards, it is a rock star. Just look at its
    competitors:'
  prefs: []
  type: TYPE_NORMAL
- en: Pandas, released in 2011, has 37.5k GitHub stars.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apache Spark, released in 2014, has 26.8k stars.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Vaex, released in 2017, has 7.9k GitHub stars.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dask, released in 2015, has 10.9k stars.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apache Arrow, released in 2016, has 11.4k stars.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In comparison, Polars was released in 2020 and already amassed 15.9k stars,
    halfway to its long-standing top competitors.
  prefs: []
  type: TYPE_NORMAL
- en: This should give you a rough picture of where the wind is blowing. Things might
    change when Pandas 2.0 is released, but I think Polars is already giving Pandas
    a run for its money.
  prefs: []
  type: TYPE_NORMAL
- en: Loved this article and, let‚Äôs face it, its bizarre writing style? Imagine having
    access to dozens more just like it, all written by a brilliant, charming, witty
    author (that‚Äôs me, by the way :).
  prefs: []
  type: TYPE_NORMAL
- en: For only 4.99$ membership, you will get access to not just my stories, but a
    treasure trove of knowledge from the best and brightest minds on Medium. And if
    you use [my referral link](https://ibexorigin.medium.com/membership), you will
    earn my supernova of gratitude and a virtual high-five for supporting my work.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----b14c66fc85b9--------------------------------)
    [## Join Medium with my referral link ‚Äî Bex T.'
  prefs: []
  type: TYPE_NORMAL
- en: Get exclusive access to all my ‚ö°premium‚ö° content and all over Medium without
    limits. Support my work by buying me a‚Ä¶
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----b14c66fc85b9--------------------------------)
    ![](../Images/a01b5e4fb641db5f35b8172a4388e821.png)
  prefs: []
  type: TYPE_NORMAL
