- en: Finding Optimal Solutions with Branch and Bound
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用分支定界找到最佳解决方案
- en: 原文：[https://towardsdatascience.com/finding-optimal-solutions-with-branch-and-bound-70a64692a0dd](https://towardsdatascience.com/finding-optimal-solutions-with-branch-and-bound-70a64692a0dd)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/finding-optimal-solutions-with-branch-and-bound-70a64692a0dd](https://towardsdatascience.com/finding-optimal-solutions-with-branch-and-bound-70a64692a0dd)
- en: '![](../Images/fb71f12a4ae02bdeddd651a2c8aa6cd8.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fb71f12a4ae02bdeddd651a2c8aa6cd8.png)'
- en: Robocat and cat playing together. Image created with Dall·E by the author.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Robocat 和猫咪一起玩耍。图像由作者使用 Dall·E 创建。
- en: A powerful algorithm for solving discrete optimization problems
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决离散优化问题的强大算法
- en: '[](https://hennie-de-harder.medium.com/?source=post_page-----70a64692a0dd--------------------------------)[![Hennie
    de Harder](../Images/3e4f2cccd6cb976ca3f8bf15597daea8.png)](https://hennie-de-harder.medium.com/?source=post_page-----70a64692a0dd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----70a64692a0dd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----70a64692a0dd--------------------------------)
    [Hennie de Harder](https://hennie-de-harder.medium.com/?source=post_page-----70a64692a0dd--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://hennie-de-harder.medium.com/?source=post_page-----70a64692a0dd--------------------------------)[![Hennie
    de Harder](../Images/3e4f2cccd6cb976ca3f8bf15597daea8.png)](https://hennie-de-harder.medium.com/?source=post_page-----70a64692a0dd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----70a64692a0dd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----70a64692a0dd--------------------------------)
    [Hennie de Harder](https://hennie-de-harder.medium.com/?source=post_page-----70a64692a0dd--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----70a64692a0dd--------------------------------)
    ·8 min read·Dec 5, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----70a64692a0dd--------------------------------)
    ·阅读时间 8 分钟·2023年12月5日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '**Branch and bound is the core algorithm behind many mixed integer programming
    (MIP) solvers. It is a great addition to your mathematical optimization toolkit,
    particularly useful for smaller problems or when the problem has numerous constraints.
    Additionally, its straightforward nature makes it accessible, no hard math formulas
    needed.**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**分支定界是许多混合整数规划 (MIP) 求解器的核心算法。它是你数学优化工具包中的一项极佳补充，特别适用于较小的问题或有许多约束的问题。此外，它的直接性使得它易于访问，无需复杂的数学公式。**'
- en: In this hands-on article, we will delve into a mathematical optimization problem.
    We will tackle it with the branch and bound algorithm, a great technique for solving
    such problems. Our focus will be on a cat-themed problem — because let’s face
    it, who doesn’t love cats? However, if you’re more of a dog person, feel free
    to mentally substitute ‘dog’ every time you come across ‘cat’ in our discussion.
    The principles and methods apply just the same!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇实用文章中，我们将深入探讨一个数学优化问题。我们将使用分支定界算法来解决这个问题，这是一种解决此类问题的优秀技术。我们将重点讨论一个以猫为主题的问题——因为说实话，谁不喜欢猫呢？不过，如果你更喜欢狗，可以在讨论中每次遇到‘猫’时，脑补成‘狗’。原理和方法完全相同！
- en: Problem Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题介绍
- en: Imagine you are the owner of a cat shelter. Every day, pet owners can bring
    their cats and you take care of them. Many people adopted a cat during COVID,
    but now everyone needs to be back at the office. Because of this your company
    is doing great.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你是一个猫庇护所的主人。每天，宠物主人可以带他们的猫来你这里，你负责照顾它们。许多人在 COVID 期间领养了猫，但现在大家都需要回到办公室。这就是你公司的业绩蒸蒸日上的原因。
- en: Actually, a bit too great. You are having difficulties with placing all the
    cats in the rooms of your building. Sometimes you need to decline people because
    there are too many requests. That is why you decided to create an optimization
    algorithm to help you find the lowest number of rooms possible for all the cat
    registrations.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，有些过于出色。你在将所有猫安置到你建筑中的房间时遇到了困难。有时你不得不拒绝人们的请求，因为要求太多了。这就是为什么你决定创建一个优化算法，以帮助你找到所有猫登记的最低房间数。
- en: 'Let’s take a look at an example. Imagine that 3 cats requested to stay at your
    shelter. Their names are Lily, Charlie, and Meowster. How can we divide these
    three cats in different rooms? We need at most three rooms, and here are all the
    possible solutions of grouping the cats:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个例子。假设有3只猫请求入住你的庇护所。它们的名字是 Lily、Charlie 和 Meowster。我们该如何将这三只猫分配到不同的房间中？我们最多需要三个房间，以下是分组猫咪的所有可能方案：
- en: '![](../Images/95ca1284edc5dddf5dd800545a610ffa.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/95ca1284edc5dddf5dd800545a610ffa.png)'
- en: Partitions of cats. Image by author.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Partitions and the Bell number
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see, there are 5 possible ways to group the 3 cats. In math, the
    name for one way of grouping elements of a set is a *partition*. The *Bell number*
    corresponds to the total number of possible partitions for a given set (in our
    case, with the three cats we can create 5 partitions). It’s from the field of
    combinatorics.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'The recursive formula for calculating the next Bell number looks like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5ed22f8af5f2572795ad31d7697cea54.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: Recursive formula for calculating the Bell number. Image by author.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'This number increases rapidly:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e7870c242809ffb7f7b3fe0ae2571380.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: Bell number and calculation for different set sizes. Image by author.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'A question arises: How can we find the smallest number of rooms we need for
    the cats in a smart way? It makes no sense to loop over all possible solutions
    when the number of cats grows. This will take a lot of time.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: From Problem to Tree
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let’s reformulate the problem. Then, we will solve it with the branch
    and bound algorithm.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of creating all possible solutions and calculating their scores (how
    many rooms we use), we can start without cats, and then add all the cats one by
    one. This looks like a tree with nodes and edges:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6d96631a7cb9a0a2e625166142c38591.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: Solution tree. On every row a cat is added. This gives us all the possible partitions.
    Image by author.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'Do you see how it’s possible to create all possible solutions (partitions)
    if one new cat (element) arrives? Let’s add another cat: Pawsanova. This is easy,
    because we can add him to all the existing groups, and as a separate group in
    every partition. This corresponds to the red dots in the picture:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7a5bc1e311affd039762c3c97bcdf390.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: Adding another cat, Pawsanova. It’s possible to ‘insert’ him at 15 places. Image
    by author.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: There are exactly 15 possible ways to create partitions with the fourth cat.
    This corresponds to the Bell number for a set with 4 elements.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: We will use this tree with possible solutions while solving the problem with
    the branch and bound algorithm.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Branch and Bound
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we created a tree from the original problem, we can use this to run
    the branch and bound algorithm. How does branch and bound work? The intuition
    is easy:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Branch and bound divides the problem into smaller, more manageable subproblems
    (branching) and then determines bounds for these subproblems to efficiently find
    the optimal solution.
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Branching
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dividing the problem into smaller subproblems is exactly what we did by creating
    a tree with cats. We start without cats, the root node, and then we add cats one
    by one. Every subproblem is represented by one node of the tree.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Bounds
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An important part of branch and bound is determining *bounds* for the problem.
    It works like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: The *upper bound* corresponds with the best score found so far.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *lower bound* is the best score we can find continuing with this branch
    of the tree. It’s an optimistic score and shouldn’t take too long to calculate.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*下界* 是我们在继续当前树分支时可以找到的最佳分数。这是一个乐观的分数，计算时间不应过长。'
- en: Pruning
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 剪枝
- en: By comparing the *lower bound* of our current node with the *upper bound*, we
    can decide if we want to continue searching the current part of the tree. If the
    lower bound is worse than the upper bound, we candiscard this part of the tree.
    By discarding subproblems that cannot yield better solutions, the algorithm reduces
    the number of solutions it needs to examine. This process is known as *pruning*
    and is crucial for the efficiency of the algorithm.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将当前节点的*下界*与*上界*进行比较，我们可以决定是否继续搜索树的当前部分。如果下界比上界差，我们可以丢弃这部分树。通过丢弃那些不能产生更好解决方案的子问题，算法减少了需要检查的解决方案数量。这个过程被称为*剪枝*，对算法的效率至关重要。
- en: Another way to prune the tree is by checking if the current subproblem is feasible.
    E.g. if we already know that two cats can’t be together in one room, because they
    both have short-tempered characters, and the current node combines these two cats,
    we can prune this part of the tree as well.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种剪枝树的方法是检查当前子问题是否可行。例如，如果我们已经知道两只猫不能待在一个房间里，因为它们都是急躁的，而当前节点将这两只猫组合在一起，那么我们也可以剪枝这部分树。
- en: Exploration Methods
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索方法
- en: 'There are different ways possible to explore the tree to find the best solution.
    You might be familiar with Depth First Search (DFS) and Breadth First Search (BFS).
    The depth-first search explores a branch as far down as possible. Breadth-first
    explores all the nodes at the current depth (adding cats one by one, like we did
    when creating the tree). Another strategy is Best First Search, this method prioritizes
    nodes based on a certain criterion, such as the lowest bound in optimization problems.
    Below you can see the difference between BFS and DFS (check the node numbers for
    the sequence):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 探索树以找到最佳解决方案有多种方法。你可能对深度优先搜索（DFS）和广度优先搜索（BFS）有所了解。深度优先搜索会尽可能深入地探索一条分支。广度优先搜索则会探索当前深度的所有节点（逐个添加猫，就像我们创建树时做的那样）。另一种策略是最佳优先搜索，这种方法根据某些标准（如优化问题中的下界）对节点进行优先级排序。下面你可以看到BFS和DFS的区别（查看节点序号以了解顺序）：
- en: '![](../Images/de0906ce3a0666d1e70b75db77edb1c7.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/de0906ce3a0666d1e70b75db77edb1c7.png)'
- en: Breadth first search and depth first search. Image by author.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 广度优先搜索和深度优先搜索。图片由作者提供。
- en: Solving the Cat Problem
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决猫问题
- en: With this knowledge, let’s get back to our initial problem. Let’s code branch
    and bound in Python. We will use breadth first search, but feel free to reuse
    this code to try other exploration strategies.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 了解这些知识后，让我们回到最初的问题。让我们在Python中实现分支限界法。我们将使用广度优先搜索，但可以随意重用这段代码以尝试其他探索策略。
- en: 'Some rules we will implement:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现的一些规则：
- en: The score of a solution will be equal to the number of rooms we use. Obviously
    we want to minimize this.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案的分数将等于我们使用的房间数量。显然，我们希望将其最小化。
- en: 'Feasibility: A room can never have more than 5 cats, and the total weight of
    the cats in a room should not exceed 25 kilograms. Also, a room can have at most
    one cat with an ‘angry’ character, otherwise we will have cat fights…'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可行性：一个房间不能有超过5只猫，房间内猫的总重量不应超过25公斤。此外，一个房间最多只能有一只‘生气’的猫，否则我们会有猫打架...
- en: The lower bound of a node is calculated by the current score of the node plus
    the minimum number of extra rooms we need based on the number of angry cats.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点的下界通过当前节点的分数加上基于愤怒猫数量所需的最小额外房间数来计算。
- en: 'Note: The only package you need to install is `numpy`.'
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注：你只需安装`numpy`包。
- en: Let’s start with a `Cat` class.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个`Cat`类开始。
- en: With the `generate_n_cats` function, we can generate as many cats as we like.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`generate_n_cats`函数，我们可以生成任意数量的猫。
- en: 'In the next code snippet, we will code the branch and bound algorithm:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的代码片段中，我们将实现分支限界算法：
- en: 'The `branch_and_bound.py` file consists of two classes: the `Node` class and
    the `BranchAndBound` class.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`branch_and_bound.py`文件包含两个类：`Node`类和`BranchAndBound`类。'
- en: The `Node` class contains all the information necessary for one node of the
    tree. It has a `partition` attribute, here you can find the groups with cats for
    this node. The methods from the class are used to calculate the weight, the number
    of angry cats, the lower bound of this node and the feasibility check.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`Node` 类包含树中一个节点所需的所有信息。它有一个 `partition` 属性，你可以在这里找到该节点的猫分组。类中的方法用于计算权重、愤怒猫的数量、该节点的下界和可行性检查。'
- en: '`BranchAndBound` contains the algorithm. It starts with a valid solution (all
    cats in separated rooms) and calculates the score for that solution to use as
    upper bound. Then, it starts without cats, and it adds cats one by one. It adds
    new nodes, and checks if a branch can be pruned by checking for feasibility and
    comparing the lower bound with the upper bound.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`BranchAndBound` 包含该算法。它从一个有效的解决方案（所有猫在分开的房间）开始，并计算该解决方案的得分作为上界。然后，它从没有猫开始，一只一只地添加猫。它添加新的节点，并通过检查可行性和比较下界与上界来判断是否可以剪枝。'
- en: 'Here is an example of a result with 15 cats:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这是处理15只猫的结果示例：
- en: '[PRE0]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The algorithm created 5 groups, every group has at most 5 cats, at most 1 angry
    cat and at most 25 kilograms of weight. Also, the algorithm is quite fast, it
    took less than 0.032 seconds to find (one of) the optimal solution(s). The 15th
    Bell number is almost 1.4 billion, imagine how long that would take if we would
    loop over all the 1.4 billion possible partitions!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法创建了5个组，每组最多有5只猫，最多1只愤怒的猫，且总重最多为25公斤。此外，该算法非常快速，找到（其中之一）最优解的时间不到0.032秒。第15个贝尔数接近14亿，想象一下，如果我们循环遍历所有14亿个可能的分区需要多长时间！
- en: Pros and Cons
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优缺点
- en: Branch and bound is an easy-to-understand algorithm. The pruning of the tree
    makes it a lot more efficient than algorithms like dynamic programming or brute
    force, just because it skips evaluating solutions that are not interesting. Branch
    and bound is guaranteed to find the optimal solution, which is a huge benefit.
    But of course, there are cons too. If we change the algorithm to optimize for
    50 cats instead of 15, it will take long to run. In case of 50 cats the tree has
    many nodes and is really deep. To make it more efficient, we should maybe look
    at other algorithms, like metaheuristics. An important thing to note here is that
    the strength of the lower bound calculation has a huge impact on performance.
    The stricter the better, but make sure it *is* a lower bound (not higher than
    the actual best solution from that branch). And probably for your specific problem
    it might be worth to try different exploration methods. In the cat example, we
    started with a bad first solution (all cats in different rooms), while it is better
    to start with a good solution (e.g. greedily adding cats to existing rooms if
    the cat fits). This can speed up the algorithm run.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 分支限界法是一个容易理解的算法。树的剪枝使得它比动态规划或暴力破解等算法更高效，因为它跳过了那些不感兴趣的解决方案。分支限界法保证找到最优解，这是一个巨大的优点。但当然，也有缺点。如果我们将算法优化为处理50只猫而不是15只，它将需要很长时间来运行。在50只猫的情况下，树有许多节点且非常深。为了提高效率，我们可能需要考虑其他算法，例如元启发式算法。这里要注意的是，下界计算的强度对性能有很大影响。越严格越好，但确保它*确实*是下界（不高于该分支的实际最佳解决方案）。而且，针对你的具体问题，尝试不同的探索方法可能会有价值。在猫的例子中，我们从一个不好的初始解决方案（所有猫在不同的房间）开始，而从一个好的解决方案（例如，如果猫能适应，则贪婪地将猫添加到现有房间）开始更好。这可以加快算法的运行速度。
- en: Conclusion
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: I hope you enjoyed this cat shelter story! Now you know how branch and bound
    works, and you learned something about combinatorics, like partitions and the
    Bell number. Branch and bound is a fundamental technique used in discrete optimization
    problems. Many MIP solvers use branch and bound as their core algorithm. By pruning
    the tree you don’t have to go through all the possible solutions. This saves a
    lot of time, but beware, for problems with a big solution tree it can still take
    (too) long.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢这个猫收容所的故事！现在你知道了分支限界法是如何工作的，也学到了一些组合数学的知识，比如分区和贝尔数。分支限界法是离散优化问题中使用的一种基本技术。许多
    MIP 求解器将分支限界法作为其核心算法。通过剪枝，你不必遍历所有可能的解决方案。这节省了很多时间，但要小心，对于具有大型解决方案树的问题，它仍然可能需要（过于）长的时间。
- en: Thanks for reading, until next time!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读，下次见！
- en: Related
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: '[](/why-every-data-scientist-should-learn-mathematical-optimization-3ac102663456?source=post_page-----70a64692a0dd--------------------------------)
    [## Why Every Data Scientist Should Learn Mathematical Optimization'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Data science courses are focusing on data visualization, feature engineering,
    data processing, (un)supervised learning…
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/why-every-data-scientist-should-learn-mathematical-optimization-3ac102663456?source=post_page-----70a64692a0dd--------------------------------)
    [](/mathematical-optimization-heuristics-every-data-scientist-should-know-b26de0bd43e6?source=post_page-----70a64692a0dd--------------------------------)
    [## Mathematical Optimization Heuristics Every Data Scientist Should Know
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Local search, genetic algorithms and more.
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/mathematical-optimization-heuristics-every-data-scientist-should-know-b26de0bd43e6?source=post_page-----70a64692a0dd--------------------------------)
    [](/how-to-handle-optimization-problems-daf97b3c248c?source=post_page-----70a64692a0dd--------------------------------)
    [## How to Handle Optimization Problems?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Easy examples with solutions and code.
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-handle-optimization-problems-daf97b3c248c?source=post_page-----70a64692a0dd--------------------------------)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
