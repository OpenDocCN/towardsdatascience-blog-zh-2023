- en: Effective Unit Testing in Python — with Examples
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中的有效单元测试 — 带示例
- en: 原文：[https://towardsdatascience.com/effective-unit-testing-in-python-with-examples-3860d7fac7cd](https://towardsdatascience.com/effective-unit-testing-in-python-with-examples-3860d7fac7cd)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/effective-unit-testing-in-python-with-examples-3860d7fac7cd](https://towardsdatascience.com/effective-unit-testing-in-python-with-examples-3860d7fac7cd)
- en: '[](https://medium.com/@christopher_karg?source=post_page-----3860d7fac7cd--------------------------------)[![Christopher
    Karg](../Images/9d163d59e0c3167732f55d497caf9db2.png)](https://medium.com/@christopher_karg?source=post_page-----3860d7fac7cd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3860d7fac7cd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3860d7fac7cd--------------------------------)
    [Christopher Karg](https://medium.com/@christopher_karg?source=post_page-----3860d7fac7cd--------------------------------)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@christopher_karg?source=post_page-----3860d7fac7cd--------------------------------)[![Christopher
    Karg](../Images/9d163d59e0c3167732f55d497caf9db2.png)](https://medium.com/@christopher_karg?source=post_page-----3860d7fac7cd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3860d7fac7cd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3860d7fac7cd--------------------------------)
    [Christopher Karg](https://medium.com/@christopher_karg?source=post_page-----3860d7fac7cd--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3860d7fac7cd--------------------------------)
    ·16 min read·Oct 1, 2023
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3860d7fac7cd--------------------------------)
    ·16 分钟阅读·2023年10月1日
- en: --
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/4d3e4fc2d2cb528b00e0e5676f4becb5.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d3e4fc2d2cb528b00e0e5676f4becb5.png)'
- en: 'Source: [https://www.pexels.com/photo/red-vintage-car-stopped-on-the-crossroads-15706251/](https://www.pexels.com/photo/red-vintage-car-stopped-on-the-crossroads-15706251/)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '来源: [https://www.pexels.com/photo/red-vintage-car-stopped-on-the-crossroads-15706251/](https://www.pexels.com/photo/red-vintage-car-stopped-on-the-crossroads-15706251/)'
- en: My next article is on the subject of unit-testing in Python. It is a topic that
    I found is often overlooked in lessons, books and online tutorials. It is however
    a crucial skill when creating production-level, bullet-proof code. The scenarios
    in this article are somewhat skewed toward the world of data/data science. As
    such, my opinion of an ‘effective’ unit-test may differ to someone coming from
    a different background.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我的下一篇文章是关于 Python 中的单元测试。这个话题我发现经常被忽视在课程、书籍和在线教程中。然而，它是创建生产级、无漏洞代码时至关重要的技能。本文中的场景有些偏向于数据/数据科学领域。因此，我对“有效”的单元测试的看法可能与来自不同背景的人有所不同。
- en: The ultimate aim of writing unit-tests is to prevent bugs being pushed into
    production.
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 编写单元测试的**终极**目标是防止错误被推送到生产环境中。
- en: The result of which leads to many headaches and time to resolve. Different companies
    have different testing methodologies. Some projects I have worked on (specifically
    web-scraping projects) have not required unit-testing per se but can benefit from
    implementing python’s [inbuilt logging functionality](https://docs.python.org/3/library/logging.html)
    and try/except handling. This article only covers the practical implementations
    of [unit-testing](https://docs.python.org/3/library/unittest.html?highlight=unittest#module-unittest)
    along with examples and links to code that are available in [my GitHub repo](https://github.com/CMaxK/unittesting_examples).
    Feel free to clone it and have a play with some of the testing functions — instructions
    on how to do so can be found in the README of the repo. The repo is split into
    Easy, Medium and Hard categories, each building upon the concepts covered in the
    previous category.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了许多头痛的问题和解决这些问题的时间。不同的公司有不同的测试方法。我参与的一些项目（特别是网页抓取项目）虽然不一定需要单元测试，但可以通过实现 Python
    的[inbuilt logging functionality](https://docs.python.org/3/library/logging.html)和
    try/except 处理来受益。本文仅涵盖[单元测试](https://docs.python.org/3/library/unittest.html?highlight=unittest#module-unittest)的实际应用，包括示例和代码链接，这些代码可以在[我的
    GitHub 仓库](https://github.com/CMaxK/unittesting_examples)中找到。欢迎克隆并尝试一些测试函数——有关如何操作的说明可以在仓库的
    README 中找到。仓库分为简单、中等和困难三个类别，每个类别都建立在前一个类别的概念之上。
- en: The easy and medium examples in this article go over testing syntax and how
    to use certain features of the unit-testing library. The harder example builds
    on the easy and medium examples but also introduces the idea of ‘***effective***’
    unit-testing and what exactly you should be testing. It is all well and good if
    you are writing unit-tests but if you are testing for irrelevant things, the unit-tests
    themselves become somewhat irrelevant!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中的易用和中级示例介绍了测试语法和如何使用单元测试库的某些功能。更复杂的示例在易用和中级示例的基础上进行，但还引入了‘***有效***’单元测试的概念以及你应该测试的内容。如果你编写了单元测试，但测试的内容无关紧要，那么这些单元测试本身也会变得不太相关！
- en: 'In a production environment, these tests would be incorporated into a CI/CD
    pipeline so they run automatically when code is updated. This is somewhat outside
    the scope of the article but in summary the general process would be as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，这些测试将被纳入 CI/CD 管道中，以便在代码更新时自动运行。这些内容有些超出了本文的范围，但总的来说，一般流程如下：
- en: · Create test scripts
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: · 创建测试脚本
- en: · Create a configuration file for your chosen CI/CD service (GitHub Actions,
    Travis CI, Jenkins etc.) The config file allows you to specify a task name, what
    commands are to be run within the task and the location of the scripts you want
    to run
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: · 为你选择的 CI/CD 服务（GitHub Actions、Travis CI、Jenkins 等）创建一个配置文件。配置文件允许你指定任务名称、任务中要运行的命令以及你希望运行的脚本的位置
- en: · Push config file and test scripts to code repo (GitHub/GitLab)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: · 将配置文件和测试脚本推送到代码库（GitHub/GitLab）
- en: · If the CI/CD service is correctly set-up the tests will be incorporated into
    the pipeline.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: · 如果 CI/CD 服务设置正确，测试将被纳入管道中。
- en: · Notifications of failed tests can be sent out via Slack or Email to ensure
    any issues can be resolved quickly.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: · 可以通过 Slack 或 Email 发送测试失败的通知，以确保任何问题能够快速解决。
- en: I will embed the relevant code for each category at the start of each section.
    A link to the respective GitHub repo will also be included.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在每个部分的开头嵌入每个类别的相关代码。还会包括一个指向相应 GitHub 代码库的链接。
- en: We’ll start with the Easy category.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 Easy 类别开始。
- en: Easy
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Easy
- en: General unit-testing.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一般单元测试。
- en: How to set-up and run testing functions.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置和运行测试函数。
- en: 'In the [repo](https://github.com/CMaxK/unittesting_examples/tree/master/Easy)
    I have created two functions. One that simply adds two numbers. The 2nd function
    computes the factorial of a given number:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在[代码库](https://github.com/CMaxK/unittesting_examples/tree/master/Easy)中，我创建了两个函数。一个是简单地将两个数字相加。第二个函数计算给定数字的阶乘：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let’s swap our attention to the testing script (tests.py):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将注意力转移到测试脚本（tests.py）：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice I have imported the functions I want to test at the top of the tests.py
    script along with python’s unittest library. Within the this script you can see
    1 class has been instantiated, along with 5 different functions. Each function
    serves as a single test. Therefore in this example I am writing 5 unit-tests for
    a script containing 2 functions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我在 tests.py 脚本的顶部导入了我想测试的函数和 Python 的 unittest 库。在此脚本中，你可以看到实例化了一个类，以及 5
    个不同的函数。每个函数作为一个独立的测试。因此，在这个例子中，我为包含 2 个函数的脚本编写了 5 个单元测试。
- en: Again depending on your desired testing methodology, you may choose to write
    one meaningful test per function, multiple tests per function (encouraged if the
    function is complex), or to combine it with log messages and try/except blocks
    (as you will see in the latter examples) to catch all cases where your code may
    break. In the interests of risk aversion, I would advise writing as many meaningful/effective
    tests as possible. The idea of what constitutes an effective test is discussed
    later in the article.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你期望的测试方法，你可以选择为每个函数编写一个有意义的测试、为每个函数编写多个测试（如果函数复杂，建议这样做），或者将其与日志消息和 try/except
    块结合使用（正如你在后面的示例中将看到的）以捕捉代码可能出现的所有情况。为了降低风险，我建议尽可能多地编写有意义/有效的测试。什么构成有效测试的理念将在文章后面讨论。
- en: As I am testing fairly straightforward functions, their logic is not that complex.
    We simply perform specific computations on the function inputs. The most effective
    way to test these functions is by checking the output is what we expect. Take
    the first example — we expect the output of 2+3 to be 5\. To write check using
    the unittesting library, we use the *self.assertEqual* method. Another term for
    this type of test is an ‘assertion test’.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我正在测试的是相当简单的函数，它们的逻辑并不复杂。我们仅仅是在函数输入上执行特定的计算。测试这些函数最有效的方法是检查输出是否符合预期。以第一个示例为例——我们期望2+3的结果是5。要使用unittesting库编写检查，我们使用*自我.assertEqual*方法。此类测试的另一种术语是‘断言测试’。
- en: We have our first unit-test written. Let’s check it works.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经编写了第一个单元测试。让我们检查一下它是否有效。
- en: 'From within the Easy directory run:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在Easy目录中运行：
- en: '***python -m unittest tests.py***'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '***python -m unittest tests.py***'
- en: The above command is us telling the python interpreter to run the tests.py script
    using the unittest module. The ***-m*** stands for module.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的命令是我们告诉python解释器使用unittest模块运行tests.py脚本。***-m***代表模块。
- en: 'The output of our command looks as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们命令的输出如下：
- en: '![](../Images/39d1d83a8170beafbd229a13fc2aceb4.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/39d1d83a8170beafbd229a13fc2aceb4.png)'
- en: 'For the sake of testing let’s see the output if the unit-test were to fail.
    I will change the assertion so that 2+3=6 (incorrect…):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试的目的，让我们看看如果单元测试失败时的输出。我将更改断言，使得2+3=6（错误的……）：
- en: '![](../Images/47559fba29f5e837aff9201aa533674c.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/47559fba29f5e837aff9201aa533674c.png)'
- en: You can see the above test failed. The output of the function was 5\. We told
    the system we were expecting 6\. As you can see the output is very verbose by
    default and allows you to fairly quickly get to the bottom of the issue.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到上面的测试失败了。函数的输出是5。我们告诉系统我们期望的是6。正如你所见，默认情况下输出非常详细，并允许你很快找到问题所在。
- en: 'Let’s run all of our 5 tests for the 2 functions and check the output. This
    time we will add the ***-v*** marker to increase verbosity:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行所有5个测试来检查这两个函数的输出。这一次我们将添加***-v***标记以增加详细程度：
- en: '![](../Images/b84c9c3604fa7f6a039d50e3556385ba.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b84c9c3604fa7f6a039d50e3556385ba.png)'
- en: You can see that adding the ***-v*** marker makes it easy to see exactly which
    testing functions are being called. It’s always a good feeling when all tests
    pass 
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到添加***-v***标记可以轻松看到到底调用了哪些测试函数。当所有测试通过时总是感觉很好
- en: 'One testing function I’d like to point out is the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我想指出的一个测试函数是：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you check back to our original factorial function:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回过头来查看我们最初的阶乘函数：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can see that a factorial computation is not possible for any number less
    than 0\. As per the above code we wanted to raise a ValueError with a comment
    if this error is triggered. If we are taking the effort to catch errors in our
    code, we must also make the effort to trigger these errors in our tests. We ultimately
    need to ensure our function also fails as intended. The test of this function
    is also to be considered an assertion test, however rather than asserting output
    == expected value, we are testing to ensure the ValueError is raised as intended.
    There are other types of assertion test all listed within python’s extensive unit-testing
    [documentation](https://docs.python.org/3/library/unittest.html?highlight=unittest#module-unittest).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，对于任何小于0的数字，阶乘计算都是不可能的。根据上述代码，我们希望在触发此错误时引发ValueError并附带注释。如果我们付出努力来捕获代码中的错误，我们还必须在测试中触发这些错误。我们最终需要确保我们的函数也按预期失败。这个函数的测试也应该被视为断言测试，但与其断言输出==预期值不同，我们测试的是确保ValueError按预期被引发。其他类型的断言测试都列在python的广泛单元测试[文档](https://docs.python.org/3/library/unittest.html?highlight=unittest#module-unittest)中。
- en: Let’s move to the more challenging tests.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转向更具挑战性的测试。
- en: Medium
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Medium
- en: Patching function outputs
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修补函数输出
- en: 'Move into the [Medium directory](https://github.com/CMaxK/unittesting_examples/tree/master/Medium)
    for these tests. Here we build upon the previous examples of assertion tests and
    begin to patch the function outputs we have created within our ***get_weather_data.py***
    script. This script looks to replicate a typical request to an imaginary weather
    API and returns a response JSON that we will look to analyse within our script.
    The ***get_weather_data.py*** is as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 进入[Medium目录](https://github.com/CMaxK/unittesting_examples/tree/master/Medium)进行这些测试。在这里，我们基于之前的断言测试示例，并开始修补我们在***get_weather_data.py***脚本中创建的函数输出。这个脚本旨在模拟对一个虚构天气API的典型请求，并返回一个响应JSON，我们将在脚本中分析。***get_weather_data.py***如下：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The use case for this may not be immediately obvious but it is very useful for
    testing your code logic if you do not actually have access to the API in question.
    Since we are making a request to an imaginary API, the function will not return
    any data. How are we supposed to test the remaining code if it breaks after the
    first line? This is where patching comes in handy.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这种使用案例可能并不立即显而易见，但如果你实际上无法访问相关的API，它对测试代码逻辑非常有用。由于我们请求的是一个虚拟的API，函数不会返回任何数据。如果代码在第一行之后出现错误，我们如何测试剩余的代码？这时，补丁（patching）就派上用场了。
- en: 'Let’s move our attention to the testing script to see how it works:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将注意力转向测试脚本，看看它是如何工作的：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Check the imports. They’re similar to the easy example, only now we have also
    included the patch decorator that is imported from the ***unittest.mock*** library.
    Let’s take the first test as an example and go through the syntax:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 检查导入内容。它们与简单示例类似，只是现在我们还包含了从***unittest.mock***库导入的patch装饰器。我们以第一个测试为例，了解其语法：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As per the previous example, we create out test class. Then we implement a function
    [decorator](https://docs.python.org/3/glossary.html#term-decorator). Decorators
    modify/extend the behaviour of a function — I’d suggest researching a little if
    you are new to the concept. In this example, we use the decorator to ‘mock’ the
    behaviour of the requests.get function call in our ***get_weather_data.py*** script.
    This allows us to control the behaviour of the function call and change the return
    value. This way we can insert an expected return value/s without actually making
    a call to the imaginary API (which would not work anyway). This allows us to test
    our function logic without needing access to the API. The calls to the function
    are replaced with a mock object — ***mock_get***.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 根据之前的示例，我们创建了测试类。然后我们实现了一个函数[装饰器](https://docs.python.org/3/glossary.html#term-decorator)。装饰器用于修改/扩展函数的行为——如果你对这个概念不熟悉，我建议你稍作研究。在这个示例中，我们使用装饰器来“模拟”在我们的***get_weather_data.py***脚本中requests.get函数调用的行为。这允许我们控制函数调用的行为并改变返回值。这样，我们可以插入预期的返回值，而无需实际调用虚拟的API（反正也无法工作）。这允许我们在不需要访问API的情况下测试我们的函数逻辑。对函数的调用被替换为模拟对象——***mock_get***。
- en: The next line looks like a regular function definition, the only thing here
    is that we are passing the ***mock_get*** parameter (the object that is being
    used to replace the ***requests.get*** function call). This allows us to inject
    the mock object into the function for later use.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行看起来像是一个普通的函数定义，这里唯一不同的是我们传递了***mock_get***参数（用于替换***requests.get***函数调用的对象）。这允许我们将模拟对象注入函数中以供后续使用。
- en: Next we create a ***mock_response*** object as the return value of the mock_get
    object. Any call to ***mock_get*** will return this ***mock_response*** object.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个***mock_response***对象作为mock_get对象的返回值。任何对***mock_get***的调用都将返回这个***mock_response***对象。
- en: Now we will set certain variables within our defined function to an expected
    output. This will allow us to test the logic of the function without actually
    making a call to the API. We assign mock_response.status_code = 200\. This simulates
    a successful HTTP response as defined in our ***get_weather_data()*** function
    within our ***get_weather_data.py*** script. We also assign a JSON response to
    mock_response.json.return_value. This again simulates the behaviour of the function
    we want to test.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在定义的函数中设置某些变量以获得预期的输出。这将允许我们在不实际调用API的情况下测试函数的逻辑。我们将mock_response.status_code
    = 200。这模拟了在我们的***get_weather_data()***函数中定义的成功HTTP响应。我们还将JSON响应分配给mock_response.json.return_value。这再次模拟了我们想要测试的函数的行为。
- en: Next we make an actual call to the main function within the script. Notice this
    function calls the function for which we previously mocked the return values.
    We are now able to run this function with the expected (fake) return values to
    test the overall logic. The output is saved to the ‘result’ variable.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们实际调用脚本中的主函数。注意这个函数调用了我们之前模拟返回值的函数。我们现在可以用预期（假）返回值运行这个函数，以测试整体逻辑。输出结果被保存到‘result’变量中。
- en: 'So take a moment to double check what variables we mocked above and how this
    should affect the output of the function. The ***status_code = 200***, the JSON
    returns a value of ***{‘temperature’: 30, ‘humidity’: 60}***. When checking the
    logic of the actual function we are testing (***analyze_weather()***), we want
    the return value to be “Hot and dry”, thus we create an assertion test, passing
    in the result variable and checking it equals the expected function output.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '因此，请花点时间仔细检查我们上面模拟了哪些变量，以及这如何影响函数的输出。***status_code = 200***，JSON返回的值为***{‘temperature’:
    30, ‘humidity’: 60}***。在检查我们正在测试的实际函数的逻辑时（***analyze_weather()***），我们希望返回值为“热和干燥”，因此我们创建一个断言测试，将结果变量传入并检查它是否等于预期的函数输出。'
- en: 'When running this test with the verbosity marker we get the following output:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用详细标记运行此测试时，我们得到以下输出：
- en: '![](../Images/fabb0342ed07589fab102d36947d8222.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fabb0342ed07589fab102d36947d8222.png)'
- en: Excellent.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。
- en: The 3 further testing functions use a similar methodology to the easy problem,
    we are checking how various inputs trigger the expected logic within the functions
    through assertion checks. In the final test we are triggering an error by passing
    in a 404 status code to mimic a failed API call. We want this to trigger our Exception
    clause within the ***get_weather_data()*** function.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另外3个测试函数使用类似于简单问题的方法，我们通过断言检查来检查各种输入如何触发函数内的预期逻辑。在最终测试中，我们通过传入404状态码来模拟API调用失败，从而触发错误。我们希望这会触发***get_weather_data()***函数中的异常子句。
- en: '![](../Images/ab5b6b03b81426583fece1e10d54e9fa.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ab5b6b03b81426583fece1e10d54e9fa.png)'
- en: Which we succeed in doing.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地做到了这一点。
- en: Let’s move to the hard example.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转到硬例子。
- en: Hard
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬
- en: ‘Effective’ unit-testing
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘有效的’单元测试
- en: Side-effect
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 副作用
- en: Using a sample JSON file/data as the return value of an API call.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用示例JSON文件/数据作为API调用的返回值。
- en: The repo for the Hard example can be found [here](https://github.com/CMaxK/unittesting_examples/tree/master/Hard).
    We will cover the examples after a few words on ***effective*** unit-testing.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 硬例子的代码库可以在[这里](https://github.com/CMaxK/unittesting_examples/tree/master/Hard)找到。我们将在对***有效***的单元测试进行几句说明后覆盖这些示例。
- en: 'What makes an ***effective*** unit-test? As with many things in data science
    the answer depends on your scenario. In my opinion unit-tests come into their
    own in the initial stages of a project i.e. when you are gathering data or writing
    ETL scripts to handle data transfer from a 3rd party or an internal database.
    This allows you to track the quality of your data and ensure it is formatted the
    way you are expecting. Of course further downstream transformations probably need
    to occur and more unit-tests need to be implemented elsewhere in your pipeline
    but it helps to know you are working with the correct data in the first place.
    I believe effective unit-tests in this initial stage should cover the following
    areas:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 什么才算是***有效***的单元测试？与数据科学中的许多问题一样，答案取决于你的场景。在我看来，单元测试在项目的初期阶段发挥作用，即当你收集数据或编写ETL脚本以处理来自第三方或内部数据库的数据传输时。这使你能够跟踪数据的质量，并确保其格式符合预期。当然，进一步下游的转换可能需要发生，并且在管道的其他地方需要实现更多的单元测试，但知道你最初处理的是正确的数据是有帮助的。我认为在这一初始阶段，***有效***的单元测试应涵盖以下领域：
- en: · **Is the schema correct?**
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: · **模式是否正确？**
- en: Are the correct number of columns present?
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 是否存在正确数量的列？
- en: Are all required columns present?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 是否存在所有必要的列？
- en: Does the data actually contains records?
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 数据是否确实包含记录？
- en: Changes to the schema can lead to data integration issues/bugs
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对模式的更改可能导致数据集成问题/错误
- en: · **The values within the data**
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: · **数据中的值**
- en: Check for a certain number of null values
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 检查一定数量的空值
- en: A lot of discrepancies/anomalies can indicate data quality issues and can be
    raised to the owner of the data source.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 许多差异/异常可能表明数据质量问题，并且可以向数据源的所有者提出。
- en: · **Semantics**
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: · **语义**
- en: Do columns have the expected dtypes or units? Is your ***distance*** column
    in miles as expected or has it been changed to km? Is the ***employee_count***
    column an integer as expected or is it a float? Your calculations would be thrown
    off if something like this were to be misinterpreted.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 列是否具有预期的数据类型或单位？你的***distance***列是按预期的英里还是已更改为公里？你的***employee_count***列是整数还是浮点数？如果出现这样的误解，你的计算将会出现问题。
- en: The idea of testing for these specific criteria can be linked to the idea of
    data contracts, which include the above pointers as well as monitoring SLA’s (focussing
    on data accessibility/availability). If you are interested in the topic I’d advise
    looking through some of [Chad Sanderson’s content on LinkedIn](https://www.linkedin.com/in/chad-sanderson/).
    All of the above fits into the bigger picture of quality assurance and regulatory
    requirements (GDPR etc.)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 测试这些特定标准的想法可以与数据合同的概念相关联，其中包括上述指针以及监控SLA（关注数据的可访问性/可用性）。如果你对这个话题感兴趣，我建议你查看一些[Chad
    Sanderson在LinkedIn上的内容](https://www.linkedin.com/in/chad-sanderson/)。以上内容适用于质量保证和监管要求（GDPR等）的更大背景。
- en: Another tip is to ensure that your code fails gracefully and actually produces
    the descriptive error messages you or another developer require to fix the error.
    By writing tests to ensure graceful failure you will save yourself and others
    a lot of time.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个提示是确保你的代码优雅地失败，并实际生成你或其他开发者需要修复错误的描述性错误信息。通过编写测试以确保优雅失败，你将为自己和他人节省大量时间。
- en: Coming back to the code…
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 回到代码…
- en: 'Check the code within the ***get_company_data.py*** script:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 检查***get_company_data.py***脚本中的代码：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can see it is very similar to our previous example only here we use slightly
    different logic where we are also checking for schema related issues. I have left
    space in the script for you to edit and possibly implement some of the checks
    I listed in the bullet points above.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，它与我们之前的示例非常相似，只是这里我们使用了略微不同的逻辑，同时检查与模式相关的问题。我在脚本中留下了空间供你编辑和可能实现我在上面列出的检查。
- en: 'A big difference here is that we import a JSON file containing what could be
    a sample output from an API. Check the JSON file within this directory to see
    how it is formatted:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的一个大区别是我们导入了一个包含可能来自API的示例输出的JSON文件。检查此目录中的JSON文件以查看其格式：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This method is how one would potentially test their code using a sample output
    from an API endpoint provided by a 3rd party provider. Simply import the JSON
    and mock the output of the ***requests.get*** function which you can see we have
    done in lines 10+11 of the test script.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法是测试代码的一种潜在方式，使用由第三方提供的API端点的示例输出。只需导入JSON并模拟***requests.get***函数的输出，如我们在测试脚本的第10行和第11行所做的。
- en: 'If you look through the top of the test script it contains very similar syntax
    to what we covered in our previous examples:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看测试脚本的顶部，它包含了与我们之前示例中所涵盖的语法非常相似的内容：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For the sake of experimentation, I have adapted the syntax somewhat from line
    14 onwards. Rather than creating a ***mock_response object*** by setting it equal
    the ***return_value*** of the mock object (***mock_get***), I have simply create
    a response object by calling the imported ***Mock*** class directly. I would consider
    creating the mock_response object using mock_get.return_value to be the better
    practice and more pythonic — after all [explicit is better than implicit](https://peps.python.org/pep-0020/).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实验的目的，我对从第14行开始的语法进行了些许调整。我没有通过将其设置为***mock_response对象***等于***mock对象（***mock_get***）的***return_value***来创建***mock_response对象***，而是通过直接调用导入的***Mock***类来创建响应对象。我认为使用mock_get.return_value创建mock_response对象是更好的实践和更符合Python风格——毕竟，[明确优于隐式](https://peps.python.org/pep-0020/)。
- en: Once the mock object is created, we assign the return values and assign the
    data for company_2 to be the initial return value as we want to double check the
    schema provided is correct. Again we also modify the behaviour of the ***requests.get***
    function call to return the mock response.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了mock对象，我们分配返回值，并将公司_2的数据分配为初始返回值，因为我们想要再次检查提供的模式是否正确。同样，我们还修改了***requests.get***函数调用的行为，以返回mock响应。
- en: 'Once we call the function in line 20 we start our assertion checks. Here we
    are ultimately checking the data contains the columns we might require as input
    to downstream algorithms. It is at this stage that if the data does not contain
    a desired datapoint, the tests would fail as we see below (for the sake of testing
    I have included a check for a column named ‘***dogs***’):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们调用第20行中的函数，我们开始进行断言检查。在这里，我们最终检查数据是否包含我们可能需要作为下游算法输入的列。在这个阶段，如果数据不包含所需的数据点，测试将失败，如下所示（为了测试，我包含了对名为‘***dogs***’的列的检查）：
- en: '![](../Images/2b6335bee29d14410acf03bfc0ea5cc7.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2b6335bee29d14410acf03bfc0ea5cc7.png)'
- en: As we can see the assertion test failed as ‘***dogs***’ was not found in the
    schema.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，断言测试失败，因为未在模式中找到‘***dogs***’。
- en: 'On line 40 we see a new mock_response is created as we want to test the result
    of a 404 error. It is in this code that I introduce the concept of side_effect
    (line 42). In Python, the side_effect attribute of a mock object is used to define
    custom behaviour of a specific method or function. It allows you to define what
    should happen if the method is invoked such as raising exceptions or returning
    specific values etc. A common use is to test different behaviours for multiple
    calls to the same method. I’ll include a brief example for ease of understanding
    below:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在第40行，我们看到创建了一个新的mock_response，因为我们想测试404错误的结果。在这段代码中，我引入了side_effect的概念（第42行）。在Python中，mock对象的side_effect属性用于定义特定方法或函数的自定义行为。它允许你定义方法被调用时应发生的事情，比如引发异常或返回特定值等。一个常见的用途是测试对同一方法的多次调用的不同行为。我将在下面包括一个简短的示例以便于理解：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let’s return to our original company example in ***test_company_data.py***.
    In line 42 we set the ***side_effect*** object to an exception with a custom message.
    That means when we later call ***mock_repsonse.json()***, it will raise this custom
    exception. Finally we set the ***mock_get.return_value*** equal to the previously
    coded return values of the mock_response object.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到原始的公司示例文件***test_company_data.py***。在第42行，我们将***side_effect***对象设置为一个带有自定义消息的异常。这意味着当我们后来调用***mock_repsonse.json()***时，它将引发这个自定义异常。最后，我们将***mock_get.return_value***设置为之前编码的mock_response对象的返回值。
- en: Finally, from line 52 onwards, we set-up a [context manager](https://docs.python.org/3/glossary.html#term-context-manager)
    using a self.assertRaises method. It specifies that an exception of type ‘Exception’
    is expected to be raised within this code block. This makes sense as company_1
    (the company we are testing within this new mock_object) has a confidence_score
    of 0.8\. Our code should only accept companies with a confidence score of 0.9
    or higher, otherwise an Exception is thrown. This is the desired behaviour and
    we are checking to confirm this is indeed the case. We check to see if the string
    output from our Exception contains the specified message.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，从第52行开始，我们使用self.assertRaises方法设置了一个[上下文管理器](https://docs.python.org/3/glossary.html#term-context-manager)。它指定了在这个代码块中预计会引发‘Exception’类型的异常。这是合理的，因为公司_1（我们在这个新mock_object中测试的公司）的confidence_score是0.8。我们的代码应该只接受信心得分为0.9或更高的公司，否则将抛出Exception。这是期望的行为，我们正在检查是否确实如此。我们检查Exception的字符串输出是否包含指定的消息。
- en: '![](../Images/3e88654333d734e14739329b247afa3c.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3e88654333d734e14739329b247afa3c.png)'
- en: Great!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！
- en: Thanks for sticking around. When writing your unit-tests, remember to consider
    not only the logic of your code but also the bigger picture — how do the scripts
    you are testing fit into your current project. This will help you to formulate
    more ***effective*** unit-tests.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你耐心阅读。在编写单元测试时，记住要考虑代码的逻辑以及更宏观的视角——你测试的脚本如何融入到当前项目中。这将帮助你制定更***有效***的单元测试。
- en: Let me know if you have any questions or wish to discuss any of the above.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有任何问题或想讨论上述内容，请告诉我。
- en: '*All images by author unless otherwise noted.*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*所有图片均为作者提供，除非另有说明。*'
