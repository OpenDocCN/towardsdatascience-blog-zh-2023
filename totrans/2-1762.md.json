["```py\n# area of the outer container:\n#  > r1: inner radius\n#  > r2: outer radius\n#  > start_angle: degrees between 0-360\n#  > end_angle: degress > start_angle\n\narea = (pi*r2**2-pi*r1**2)*((end_angle-start_angle)/360)\n```", "```py\n# given 3 of the 4 child container paramters (r1, r2, a1, a2),\n# gathered from the parent container, and the area of the child container:\n#  > r1: inner radius\n#  > r2: outer radius\n#  > a1: starting angle\n#  > a2: ending angle\n#  > area: area of the child container\n\n# split the current container between two angles at a constant radius\n# find the radius:\nr2 = sqrt(((area/(a2-a1))+pi*r1**2)/pi)\n\n# split the current container at a specific angle between two radii\n# find the angle:\na2 = a1 + (area)/(pi*r2**2-pi*r1**2)\n```", "```py\n# \"smart\" container orientation method:\n# calculate the max lengths between both\n# orientation options using the following:\narc_length = (2*pi*r2)*((a2-a1)/360)\nradius_length = r2-r1\nmax_lnegth = max(arc_length, radius_length)\n\n# select the orientation with the smallest max_length\n# to avoid skinny polygons\n```", "```py\n# assuming a starting position of 12 o'clock:\n#  > ad: angle in degrees\n#  > ar: angles in radians\n#  > r: radius\nar = (ad-90)*pi/180\nx, y = r*cos(ar), r*sin(ar)\n```", "```py\n from vizmath import rad_treemap as rt # pip install vizmath==0.0.9\nimport pandas as pd\n\n# using the example data from above:\ndata = [\n    ['a1', 'b1', 'c1', 12.3],\n    ['a1', 'b2', 'c1', 4.5],\n    ['a2', 'b1', 'c2', 32.3],\n    ['a1', 'b2', 'c2', 2.1],\n    ['a2', 'b1', 'c1', 5.9],\n    ['a3', 'b1', 'c1', 3.5],\n    ['a4', 'b2', 'c1', 3.1]]\ndf = pd.DataFrame(data, columns = ['a', 'b', 'c', 'value'])\n\n# create a rad_treemap object\n#   > df: DataFrame with 1 or more categorical columns of data\n#     and an optional 'value' column for the areas\n#     (otherwise groups counts are used for areas)\n#   > groupers: group-by columns\n#   > value: optional value column\n#   > r1, r2: inner and outer radius positions\n#   > a1, a2: start and end angle positions\n#   > rotate_deg: overall rotation around the center\n#   > mode: container orientation method\n#   > other options: 'points', 'default_sort', 'default_sort_override',\n#     'default_sort_override_reversed', 'mode', 'no_groups', 'full'\nrt_1 = rt(df=df, groupers=['a','b','c'], value='value', r1=0.5, r2=1,\n  a1=0, a2=180, rotate_deg=-90, mode='alternate')\n\n# plot the Radial Treemap\nrt_1.plot_levels(level=3, fill='w')\n```", "```py\n# sample the Radial Treemap DataFrame\nrt_1.to_df()[['level','group','count','value',\n    'level_rank','overall_rank','x','y','path']].head()\n```", "```py\n# set 'value' to None or just leave it out since None is the default\n# doing this sets the areas equal to the group counts\n# in this case, each count will be one since there are no duplicates\n\nrt_2 = rt(df=df, groupers=['a','b','c'], value=None, r1=0.5, r2=1,\n  a1=0, a2=180, rotate_deg=-90, mode='alternate')\n\n# plot the Radial Treemap\nrt_2.plot_levels(level=3, fill='w')\n```", "```py\nimport pandas as pd\n\ndata = [\n    ['a1', 'b1', 'c1', 9.3],\n    ['a1', 'b1', 'c2', 6.7],\n    ['a1', 'b1', 'c3', 2.4],\n    ['a1', 'b2', 'c1', 4.5],\n    ['a1', 'b2', 'c2', 3.1],\n\n    ['a2', 'b1', 'c1', 5.9],\n    ['a2', 'b1', 'c2', 32.3],\n    ['a2', 'b1', 'c3', 12.3],\n    ['a2', 'b1', 'c4', 2.3],\n    ['a2', 'b2', 'c1', 9.1],\n    ['a2', 'b2', 'c2', 17.3],\n    ['a2', 'b2', 'c3', 6.7],\n    ['a2', 'b2', 'c4', 4.4],\n    ['a2', 'b2', 'c5', 11.3],\n\n    ['a3', 'b1', 'c1', 7.5],\n    ['a3', 'b1', 'c2', 9.5],\n    ['a3', 'b2', 'c3', 17.1],\n\n    ['a4', 'b2', 'c1', 5.1],\n    ['a4', 'b2', 'c2', 2.1],\n    ['a4', 'b2', 'c3', 11.1],\n    ['a4', 'b2', 'c4', 1.5]]\n\ndf = pd.DataFrame(data, columns = ['a', 'b', 'c', 'value'])\n```", "```py\nfrom vizmath import rad_treemap as rt\nimport os\n\n# Radial Treemap chart object\nrt_obj = rt(df=df, groupers=['a','b','c'], value='value', \n    r1=0.5, r2=1, a1=0, a2=180, rotate_deg=-90 ,mode='legend')\nrt_df = rt_obj.to_df()\nrt_df['type'] = 'chart'\n\n# Radial Treemap legend object\nrt_legend_obj = rt(df=df, groupers=['a','b','c'], value='value', \n    r1=1.04, r2=1.09, a1=0, a2=180, rotate_deg=-90 ,mode='legend',\n    no_groups=True)\nrt_legend_df = rt_legend_obj.to_df()\nrt_legend_df['type'] = 'legend'\n\n# export the drawing data\ndf_out = pd.concat([rt_df, rt_legend_df], axis=0)\ndf_out.to_csv(os.path.dirname(__file__) + '/radial_treemap.csv', \n  encoding='utf-8', index=False)\n```"]