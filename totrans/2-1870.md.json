["```py\nimport numpy as np\n\nA = np.array([[1, 0], [0, 1], [2, 2]])\nnp.linalg.svd(A)\n```", "```py\n(array([[-2.35702260e-01,  7.07106781e-01, -6.66666667e-01],\n        [-2.35702260e-01, -7.07106781e-01, -6.66666667e-01],\n        [-9.42809042e-01, -1.11022302e-16,  3.33333333e-01]]),\n array([3., 1.]),\n array([[-0.70710678, -0.70710678],\n        [ 0.70710678, -0.70710678]]))\n```", "```py\nU, S, Vt = np.linalg.svd(A)\n\nk = 1  # target rank\nU_k = U[:, :k]\nS_k = np.diag(S[:k])\nVt_k = Vt[:k, :]\n\nA_k = U_k @ S_k @ Vt_k\nA_k\n```", "```py\narray([[0.5, 0.5],\n       [0.5, 0.5],\n       [2\\. , 2\\. ]])\n```", "```py\nfrom sklearn.decomposition import TruncatedSVD\n\nsvd = TruncatedSVD(n_components=1, random_state=0)\nA_reduced = svd.fit_transform(A)\nA_reduced\n```", "```py\narray([[0.70710678],\n       [0.70710678],\n       [2.82842712]])\n```", "```py\nimport matplotlib.pyplot as plt\n\nimage = plt.imread('image.jpg')\n```", "```py\nimage.shape\n```", "```py\n(1600, 1200, 3)\n```", "```py\nheight, width, channels = image.shape\nflat_image = image.reshape(-1, width * channels)\n```", "```py\nflat_image.shape\n```", "```py\n(1600, 3600)\n```", "```py\nnp.linalg.matrix_rank(flat_image)\n```", "```py\n1600\n```", "```py\nU, S, Vt = np.linalg.svd(flat_image)\n\nk = 100\nplt.plot(np.arange(k), S[:k])\nplt.xlabel('Rank of singular value')\nplt.ylabel('Magnitude of singular value')\n```", "```py\nsvd = TruncatedSVD(n_components=100)\ntruncated_image = svd.fit_transform(flat_image)\n```", "```py\ntruncated_image.shape\n```", "```py\n(1600, 100)\n```", "```py\nreconstructed_image = svd.inverse_transform(truncated_image)\n```", "```py\nreconstruction_error = np.mean(np.square(reconstructed_image - flat_image))\nreconstruction_error\n```", "```py\n29.323291415822336\n```", "```py\nreconstructed_image = reconstructed_image.reshape(height, width, channels)\nreconstructed_image = np.clip(reconstructed_image, 0, 255).astype('uint8')\n```", "```py\nplt.imshow(reconstructed_image)\nplt.axis('off')\n```", "```py\ndef compress_image(image, n_components=100):   \n    # Reshape the 3D image into a 2D array by stacking the color channels horizontally\n    height, width, channels = image.shape\n    flat_image = image.reshape(-1, width * channels)\n\n    # Truncate the image using SVD\n    svd = TruncatedSVD(n_components=n_components)  \n    truncated_image = svd.fit_transform(flat_image)\n\n    # Recover the image from the reduced representation\n    reconstructed_image = svd.inverse_transform(truncated_image)\n\n    # Reshape the image to the original 3D shape\n    reconstructed_image = reconstructed_image.reshape(height, width, channels)\n\n    # Clip the output to integers in the range [0, 255]\n    reconstructed_image = np.clip(reconstructed_image, 0, 255).astype('uint8')\n    return reconstructed_image\n```", "```py\nfig, axes = plt.subplots(1, 5, figsize=(10, 50))\nplt.setp(axes, xticks=[], yticks=[])  # Remove axes from the subplots\n\nfor i, k in enumerate([5, 10, 20, 50, 100]):\n    output_image = compress_image(image, k)    \n    axes[i].imshow(output_image)\n    axes[i].set_title(f'$k$ = {k}')\n```"]