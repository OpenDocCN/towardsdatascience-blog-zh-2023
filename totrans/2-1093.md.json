["```py\npip install statsbombpy\n```", "```py\nimport pandas as pd\nfrom statsbombpy import sb\nimport seaborn as sns\n```", "```py\ncompetition_row = sb.competitions()[\n    (sb.competitions()['competition_name'] == 'La Liga') \n    & (sb.competitions()['season_name'] == '2015/2016')\n]\ncompetition_id = pd.unique(\n    competition_row['competition_id']\n)[0]\nseason_id = pd.unique(\n    competition_row['season_id']\n)[0]\n\nmatches = sb.matches(competition_id=competition_id, season_id=season_id)\n```", "```py\nmatches['goals'] = matches['home_score'] + matches['away_score']\n```", "```py\nimport seaborn as sns\nsns.histplot(\n    x='goals', \n    data=matches, \n    bins=matches['goals'].nunique(), \n    binwidth=0.9\n)\n```", "```py\n# Creating a simulation\nimport random\n\nmean_goals = matches['goals'].mean()\n\ndef simulate_match():\n    goals = 0\n\n    for i in range(90):\n        goals += np.random.choice(\n            np.arange(0, 2), \n            p=[1-(mean_goals/90), mean_goals/90]\n        )\n    return goals\n\ndef simulate_season(n_games):\n    goals_per_game = []\n\n    for i in range(n_games):\n        goals_per_game.append(simulate_match())\n\n    return goals_per_game\n```", "```py\ngoals_per_game = simulate_season(len(matches))\n\nmu = np.var(goals_per_game)\npmf = poisson.pmf(goals_per_game, mu)\npmf *= (most_repeated_count/pmf.max())\n\nsns.lineplot(\n    x=goals_per_game, \n    y=pmf, \n    color='red', \n    label=\"Simulated\"\n).set(ylabel='count')\nsns.histplot(\n    x='goals', \n    data=matches, \n    bins=matches['goals'].nunique(), \n    binwidth=0.9\n).set(title='Goal vs Simulated Poisson distribution')\n```", "```py\n**Thanks for reading the post!** \n\nI really hope you enjoyed it and found it insightful.\n\nFollow me and subscribe to my mailing list for more \ncontent like this one, it helps a lot!\n\n**@polmarin**\n```"]