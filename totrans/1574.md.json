["```py\nimport pprint\npp = pprint.PrettyPrinter(depth=4)\n```", "```py\nemployees = {\n    \"bdoe@email.com\": {\n        \"first_name\": \"Bob\", \n        \"last_name\": \"Doe\",\n        \"address\": {\n            \"city\": \"New York\",\n            \"street\": \"1st Street\",\n            \"house_number\": 1\n        }\n    },\n    \"mmarkson@email.com\": {\n        \"first_name\": \"Mark\", \n        \"last_name\": \"Markson\",\n        \"address\": {\n            \"city\": \"San Diego\",\n            \"street\": \"2nd Street\",\n            \"house_number\": 2\n        }\n    }\n}\n\npp.pprint(employees)\n```", "```py\nemployee_emails = [\"bdoe@email.com\", \"mmarkson@email.com\"]\n\nemployee_details = [\n    {\n        \"first_name\": \"Bob\", \n        \"last_name\": \"Doe\", \n        \"address\": {\n            \"city\": \"New York\", \n            \"street\": \"1st Street\", \n            \"house_number\": 1\n        }\n    },\n    {\n        \"first_name\": \"Mark\", \n        \"last_name\": \"Markson\", \n        \"address\": {\n            \"city\": \"San Diego\", \n            \"street\": \"2nd Street\", \n            \"house_number\": 2\n        }\n    }\n]\n\nemployees = dict(zip(employee_emails, employee_details))\npp.pprint(employees)\n```", "```py\n# Access element that contains a string\nprint(employees[\"bdoe@email.com\"][\"first_name\"])\n\n# Access element that contains a string\nprint(employees[\"bdoe@email.com\"][\"last_name\"])\n\n# Access element that contains a dictionary\nprint(employees[\"bdoe@email.com\"][\"address\"])\n\n# Combine multiple elements\nprint(f\"{employees['bdoe@email.com']['first_name']} {employees['bdoe@email.com']['last_name']} from {employees['bdoe@email.com']['address']['city']}\")\n```", "```py\n# Change values one by one\nemployees[\"bdoe@email.com\"][\"address\"][\"city\"] = \"San Francisco\"\nemployees[\"bdoe@email.com\"][\"address\"][\"street\"] = \"5th Street\"\nemployees[\"bdoe@email.com\"][\"address\"][\"house_number\"] = 5\n\npp.pprint(employees[\"bdoe@email.com\"])\n```", "```py\n# Change multiple values at once\nemployees[\"mmarkson@email.com\"][\"address\"] = {\"city\": \"Los Angeles\", \"street\": \"15th Street\", \"house_number\": 15}\n\npp.pprint(employees[\"mmarkson@email.com\"])\n```", "```py\nnew_employee_email = \"jswift@email.com\"\nnew_employee_details = {\n    \"first_name\": \"Jane\", \n    \"last_name\": \"Swift\", \n    \"address\": {\n        \"city\": \"Boston\", \n        \"street\": \"10th Street\", \n        \"house_number\": 10\n    }\n}\n\n# dictionary[key] = value\nemployees[new_employee_email] = new_employee_details\n\npp.pprint(employees)\n```", "```py\ndel employees[\"jswift@email.com\"]\n\npp.pprint(employees)\n```", "```py\nnew_employees = {\n    \"jswift@email.com\": {\n        \"first_name\": \"Jane\", \n        \"last_name\": \"Swift\",\n        \"address\": {\n            \"city\": \"Boston\",\n            \"street\": \"25th Street\",\n            \"house_number\": 25\n        }\n    },\n    \"pjohnson@email.com\": {\n        \"first_name\": \"Patrick\", \n        \"last_name\": \"Johnson\",\n        \"address\": {\n            \"city\": \"Miami\",\n            \"street\": \"50th Street\",\n            \"house_number\": 50\n        }\n    }\n}\n\npp.pprint(new_employees)\n```", "```py\nemployees.update(new_employees)\n\npp.pprint(employees)\n```", "```py\nemps_merged = {**employees, **new_employees}\n\npp.pprint(emps_merged)\n```", "```py\n# Keys and values\nfor emp_email, emp_info in employees.items():\n    print(f\"EMAIL: {emp_email}\")\n\n    # For each key that belongs to a dictionary at the given email\n    for key in emp_info:\n        # Print the corresponding key and value\n        print(f\"{key} = {emp_info[key]}\")\n\n    print()\n```", "```py\n# Keys and values\nfor emp_email, emp_info in employees.items():\n    print(f\"EMAIL: {emp_email}\")\n\n    # For every key in the inner dictionary\n    for key in emp_info:\n\n        # Check if a type is a dictionary\n        if type(emp_info[key]) is dict:\n            print(f\"{key}:\")\n\n            # Print nested items\n            for item in emp_info[key]:\n                print(f\"\\t{item} = {emp_info[key][item]}\")\n        # Not a dictionary, print the value\n        else:\n            print(f\"{key} = {emp_info[key]}\")\n\n    print()\n```", "```py\nemployees = [\n    {\n        \"first_name\": \"Bob\", \n        \"last_name\": \"Doe\",\n        \"email\": \"bdoe@email.com\",\n        \"address\": {\n            \"city\": \"New York\",\n            \"street\": \"1st Street\",\n            \"house_number\": 1\n        }\n    },\n    {\n        \"first_name\": \"Mark\", \n        \"last_name\": \"Markson\",\n        \"email\": \"mmarkson@email.com\",\n        \"address\": {\n            \"city\": \"San Diego\",\n            \"street\": \"2nd Street\",\n            \"house_number\": 2\n        }\n    }\n]\n```", "```py\ndef flatten_dict(d: dict) -> dict:\n    out = {}\n\n    def flatten(x, name: str = ''):\n        if type(x) is dict:\n            for a in x:\n                flatten(x[a], name + a + '_')\n        elif type(x) is list:\n            i = 0\n            for a in x:\n                flatten(a, name + str(i) + '_')\n                i += 1\n        else:\n            out[name[:-1]] = x\n    flatten(d)\n\n    return out\n\n# Apply the function to each row\nemployees_flat = [flatten_dict(emp) for emp in employees]\npp.pprint(employees_flat)\n```", "```py\nimport pandas as pd\n\nemployees = {\n    \"bdoe@email.com\": {\n        \"first_name\": \"Bob\", \n        \"last_name\": \"Doe\",\n        \"address\": {\n            \"city\": \"New York\",\n            \"street\": \"1st Street\",\n            \"house_number\": 1\n        }\n    },\n    \"mmarkson@email.com\": {\n        \"first_name\": \"Mark\", \n        \"last_name\": \"Markson\",\n        \"address\": {\n            \"city\": \"San Diego\",\n            \"street\": \"2nd Street\",\n            \"house_number\": 2\n        }\n    }\n}\n\npd.DataFrame(employees)\n```", "```py\nemployees = [\n    {\n        \"first_name\": \"Bob\", \n        \"last_name\": \"Doe\",\n        \"email\": \"bdoe@email.com\",\n        \"address\": {\n            \"city\": \"New York\",\n            \"street\": \"1st Street\",\n            \"house_number\": 1\n        }\n    },\n    {\n        \"first_name\": \"Mark\", \n        \"last_name\": \"Markson\",\n        \"email\": \"mmarkson@email.com\",\n        \"address\": {\n            \"city\": \"San Diego\",\n            \"street\": \"2nd Street\",\n            \"house_number\": 2\n        }\n    }\n]\n\n# Flatten the records first\nemployees_flat = [flatten_dict(emp) for emp in employees]\npd.DataFrame(employees_flat)\n```", "```py\nimport json\n\nemployees = {\n    \"bdoe@email.com\": {\n        \"first_name\": \"Bob\", \n        \"last_name\": \"Doe\",\n        \"address\": {\n            \"city\": \"New York\",\n            \"street\": \"1st Street\",\n            \"house_number\": 1\n        }\n    },\n    \"mmarkson@email.com\": {\n        \"first_name\": \"Mark\", \n        \"last_name\": \"Markson\",\n        \"address\": {\n            \"city\": \"San Diego\",\n            \"street\": \"2nd Street\",\n            \"house_number\": 2\n        }\n    }\n}\n\njson_object = json.dumps(employees, indent=4) \nprint(json_object)\n```", "```py\nwith open(\"employees.json\", \"w\") as f:\n    json.dump(employees, f)\n```"]