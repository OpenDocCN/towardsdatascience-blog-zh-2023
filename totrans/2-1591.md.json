["```py\n# Example: Using functions for data preprocessing\n\ndef load_data(file_path):\n    # Load and preprocess data\n    ...\n\ndef preprocess_data(data):\n    # Clean, transform, and encode data\n    ...\n\ndef train_model(preprocessed_data):\n    # Train a machine learning model\n    ...\n\ndef evaluate_model(trained_model, test_data):\n    # Evaluate model performance\n    ...\n```", "```py\ndef load_data(self, file_path):\n        # Load data\n        ...\n\nclass DataPreprocessor:\n    def __init__(self, data):\n        self.raw_data = data\n        self.cleaned_data = self.clean_data(data)\n\n    def clean_data(self):\n        # imputation, outlier treatment\n        ...\n\n    def transform_data(self):\n        # transformations and encode data\n        ...\n\nclass ModelTrainer:\n    def __init__(self, preprocessed_data):\n        self.model = self.train_model(preprocessed_data)\n\n    def fit(self, preprocessed_data):\n        # Train a machine learning model\n        ...\n\n    def predict(self, preprocessed_data):\n        # Predict using the machine learning model\n        ...\n\nclass ModelEvaluator:\n    def __init__(self, predictions, actuals):\n        self.performance_metrics = self.evaluate_model(predictions, actuals)\n\n    def evaluate_model(self, predictions, actuals):\n        # Evaluate model performance\n        ...\n\n    def calculate_rmse(self, predictions, actuals):\n        # Evaluate root mean squared error\n\n    def calculate_r_squared(self, predictions, actuals):\n        # Evaluate r_squared of the model\n```", "```py\ndata_preprocessor = DataPreprocessor('data.csv')\nmodel_trainer = ModelTrainer(data_preprocessor.preprocessed_data)\nmodel_evaluator = ModelEvaluator(model_trainer.model, test_data)\n```", "```py\nclass SalesForecasting:\n    \"\"\"\n    SalesForecasting class to train and predict sales using a variety of models. \n    \"\"\"\n\n    def __init__(self, model_list):\n        \"\"\"\n        Initialize the SalesForecasting class with a list of models to train and predict.\n\n        Args:\n            model_list (list): list of models to train and predict. Options include:\n                - LinearRegression\n                - RandomForest\n                - XGBoost\n                - LSTM\n                - ARIMA\n\n        Returns:\n            None\n        \"\"\"\n\n        ...\n\n    def fit(self, X_train, y_train):\n        \"\"\"\n        Fit the models in model_dict to the training data.\n\n        Args:\n            X_train (pd.DataFrame): training data exogonous features for the model\n            y_train (pd.Series): training data target for the model\n\n        Returns:\n            None\n        \"\"\"\n\n        ...\n\n    def __fit_regression_model(self, model):\n        \"\"\"\n        Fit a regression model to the training data.\n\n        Args:\n            model (sklearn model): sklearn model to fit to the training data\n\n        Returns:\n            model (sklearn model): fitted sklearn model\n        \"\"\"\n        ...\n\n    def __fit_lstm_model(self, model):\n        \"\"\"\n        Fit an LSTM model to the training data.\n\n        Args:\n            model (keras model): keras model to fit to the training data\n\n        Returns:\n            model (keras model): fitted keras model\n        \"\"\"\n\n        ...\n\n    def __fit_arima_model(self, model_name):\n        \"\"\"\n        Fit an ARIMA model to the training data.\n\n        Args:\n            model_name (str): name of the model to fit to the training data\n\n        Returns:\n            model (pmdarima model): fitted pmdarima model\n        \"\"\"\n        ...\n\n    def predict(self, x_values, y_values=None, scaler=None, print_scores=False):\n        \"\"\"\n        Predict values using the models in model_dict.\n\n        Args:\n            x_values (pd.DataFrame): exogenous features to predict on\n            y_values (pd.Series): target values to compare predictions against\n            scaler (sklearn scaler): scaler used to scale the data\n            print_scores (bool): whether to print the scores for each model\n\n        Returns:\n            self (SalesForecasting): self with updated predictions\n        \"\"\"\n\n        ...\n\n    def __predict_regression_model(self, model):\n        \"\"\"\n        Predict values using a regression model.\n\n        Args:\n            model (sklearn model): sklearn model to predict with\n\n        Returns:\n            predictions (np.array): array of predictions\n        \"\"\"\n        ...\n\n    def __predict_lstm_model(self, model):\n        \"\"\"\n        Predict values using an LSTM model.\n\n        Args:\n            model (keras model): keras model to predict with\n\n        Returns:\n            predictions (np.array): array of predictions\n        \"\"\"\n        ...\n\n    def __predict_arima_model(self, model):\n        \"\"\"\n        Predict values using an ARIMA model.\n\n        Args:\n            model (pmdarima model): pmdarima model to predict with\n        Returns: \n            predictions (np.array): array of predictions\n        \"\"\"\n        ...\n\n    def __undo_scaling(self, values, scaler):\n        \"\"\"\n        Undo scaling on a set of values.\n\n        Args:\n            values (np.array): array of values to unscale\n            scaler (sklearn scaler): scaler to use to unscale the values\n\n        Returns:\n            unscaled_values (np.array): array of unscaled values\n        \"\"\"\n        ...\n\n    def get_scores(self, y_pred, y_true, model_name=None, print_scores=False):\n        \"\"\"\n        Get the scores for a model. Scores include RMSE, MAE, and R2.\n\n        Args:\n            y_pred (np.array): array of predicted values\n            y_true (np.array): array of true values\n            model_name (str): name of the model to get scores for\n            print_scores (bool): whether to print the scores for the model\n\n        Returns:\n            rmse (float): root mean squared error\n            mae (float): mean absolute error\n            r2 (float): r squared\n        \"\"\"\n        ...\n\n    def plot_results(self, model_list=None, figsize=p.FIG_SIZE, xlabel=\"Date\", ylabel=\"Sales\", title=\"Sales Forecasting Predictions\"):\n        \"\"\"\n        Plot the results of the predictions against the actual values.\n        Generates a timeseries for predictions from each model in model_dict.\n\n        Args:\n            model_list (list): list of models to plot. If None, plots all models in model_dict\n            figsize (tuple): tuple of figure size\n            xlabel (str): label for x axis\n            ylabel (str): label for y axis\n            title (str): title for the plot\n\n        Returns:\n            fig (matplotlib figure): figure with the plot\n        \"\"\"\n\n        ...\n\n    def plot_errs(self, figsize=(13,3)):\n        \"\"\"\n        Plot the errors for each model in model_dict. Errors include RMSE, MAE, and R2.\n\n        Args:\n            figsize (tuple): tuple of figure size\n\n        Returns:\n            fig (matplotlib figure): figure with the plot\n        \"\"\"\n        ...\n```"]