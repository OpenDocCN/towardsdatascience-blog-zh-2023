- en: Importance Sampling with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/importance-sampling-with-python-93b03eb9ca22](https://towardsdatascience.com/importance-sampling-with-python-93b03eb9ca22)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/f7f54b21a31c0992de0b707432134091.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Edge2Edge Media](https://unsplash.com/@edge2edgemedia?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to sample from a distribution when you only have access to another
    distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@marcellopoliti?source=post_page-----93b03eb9ca22--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----93b03eb9ca22--------------------------------)[](https://towardsdatascience.com/?source=post_page-----93b03eb9ca22--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----93b03eb9ca22--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----93b03eb9ca22--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----93b03eb9ca22--------------------------------)
    ¬∑5 min read¬∑May 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Among the various sampling methods that a data scientist must know one of the
    most important is the one called Importance Sampling.
  prefs: []
  type: TYPE_NORMAL
- en: This method allows us to **sample from one distribution even though we are actually
    only able to sample from a different distribution!** Let‚Äôs see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Importance Sampling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose, for example, that taking samples x from the distribution g(x) is infeasible
    because, for example, it is too expensive. But at the same time, we have a distribution
    f(x) that we call importance distribution from which we are able to sample.
  prefs: []
  type: TYPE_NORMAL
- en: We can use sampling of the distribution f(x) to compute statistics about the
    distribution in which we are really interested g(x). Let‚Äôs see how.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that we have a distribution f(x) representing the probability of each
    face of the die. Each face has a probability of 1/6 if the die is ‚Äúfair,‚Äù so we
    can represent the distribution as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a3ed8d55d5ee16647742bd12209afb03.png)'
  prefs: []
  type: TYPE_IMG
- en: Fair Distribution (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: We also have another distribution g(x), the one we would like to sample from
    but for some reason are prevented from doing so. In this case, the die is not
    fair and so the distribution is biased. So some faces will have a higher probability
    than others.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/35d84494aa391b60e19e22476a288436.png)'
  prefs: []
  type: TYPE_IMG
- en: Biased Distribution (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Using our math notions, we are able for each distribution to calculate the
    expected value. So for example E[x] for the first distribution f(x) will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b94758ec8321bd4c3367ae18f1cf26ba.png)'
  prefs: []
  type: TYPE_IMG
- en: Expected Value f(x) (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: The same thing naturally applies to g(x).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/442a89d0704b4fecb20512b2a76d1c4e.png)'
  prefs: []
  type: TYPE_IMG
- en: Expected Value g(x) (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: Now imagine that we want to calculate statistics from our population by sampling.
    For example, we want to calculate the average value of the result of n rolls of
    a die.
  prefs: []
  type: TYPE_NORMAL
- en: We roll a fair die n times, and we know from the central limit theorem, that
    as n increases this average value will tend to the expected value.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/93cf9c3feccfee9d19bfd2e8319baaa9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: Now we would like to calculate the same statistic by also rolling n times the
    other die, the unfair one that has a different probability distribution. The problem
    is that this die does not exist and therefore we cannot experiment!
  prefs: []
  type: TYPE_NORMAL
- en: But then how do we do that? What we can do is calculate this statistic by always
    using the fair die but using a ‚Äú*trick*.‚Äù
  prefs: []
  type: TYPE_NORMAL
- en: We know how to calculate the expected value of this die with the distribution
    g(x). What we go on to do next is to multiply and divide by the same quantity
    f(x).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6dc6af3b7fd31e770164f1dd167954a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: Now if we call x all the first part within the summation, this value is practically
    the expected value of f(x) in which x is weighted.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4d5ec83a525f073282736e154548ee72.png)'
  prefs: []
  type: TYPE_IMG
- en: Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: So we can use the same idea as before, and do a sampling in which **we weigh
    each draw by g(x)/f(x)**, and the result should come close to the expected value
    of g.
  prefs: []
  type: TYPE_NORMAL
- en: All very nice but does it really work? Let‚Äôs do some experiments!
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs Code!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we import some libraries that we will need.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We now represent with two numpy arrays the distribution of two dice. The first
    is a fair die in which each face has the same probability. While in the second
    each face has a different probability.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you want you can plot the distributions using Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d19fddf8f9ae16a557f601bf3e5c7c09.png)'
  prefs: []
  type: TYPE_IMG
- en: Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/045e74847b6b1e333bde6b6bb209bbd5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: Now let‚Äôs define a function that calculates the empirical mean of the experiments.
    That is, we roll a die n times, and then divide the sum of the results obtained
    by n. The greater the number n chosen, the closer the empirical mean will be to
    the expected value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you now calculate this empirical mean on the two distributions f and g you
    should find a mean value similar to the expected one.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The problem is that we have to assume a case in which you cannot directly calculate
    the empirical mean of g, because, for example, you do not have such a die and
    therefore cannot experiment. The only die you have is the fair die, and you know
    the distribution of both dice, though.
  prefs: []
  type: TYPE_NORMAL
- en: Then as we saw earlier we can create a function that samples from the distribution
    f and then by weighing the extracted number in the way we showed earlier, we can
    calculate the mean as if it were extracted from the distribution g. Now all we
    have to do is write the function that does this and see that it actually works.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We, therefore, launch this importance sampling on a number of launches n = 10,000
    and on the f and g distributions stated earlier.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The result of this function is 2.24920 which is very close to the expected value!
    So we showed concretely by writing a Python code that this method works!
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we looked at one of the most important sampling techniques
    for a data scientist. Importance sampling allows us to sample from one distribution
    even if we only have access to another distribution. This can happen if for example
    if doing sampling from the target distribution is too expensive, or impossible
    for any reason. I hope you have in this article learned something useful, and
    if you are interested in more articles of this type follow me here on Medium![üòâ](https://emojipedia.org/it/apple/ios-15.4/faccina-che-fa-l-occhiolino/)
  prefs: []
  type: TYPE_NORMAL
- en: The End
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Marcello Politi*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Linkedin](https://www.linkedin.com/in/marcello-politi/), [Twitter](https://twitter.com/_March08_),
    [Website](https://marcello-politi.super.site/)'
  prefs: []
  type: TYPE_NORMAL
