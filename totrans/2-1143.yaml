- en: How to Create Beautiful Age Distribution Graphs With Seaborn and Matplotlib
    (Including Animation)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-create-beautiful-age-distribution-graphs-with-seaborn-and-matplotlib-including-animation-68ebabff41bd](https://towardsdatascience.com/how-to-create-beautiful-age-distribution-graphs-with-seaborn-and-matplotlib-including-animation-68ebabff41bd)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Graph Tutorial
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visualizing demographics for countries and regions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@oscarleo?source=post_page-----68ebabff41bd--------------------------------)[![Oscar
    Leo](../Images/7733c9147bad2875a35155fca3903aa8.png)](https://medium.com/@oscarleo?source=post_page-----68ebabff41bd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----68ebabff41bd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----68ebabff41bd--------------------------------)
    [Oscar Leo](https://medium.com/@oscarleo?source=post_page-----68ebabff41bd--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----68ebabff41bd--------------------------------)
    ·9 min read·Jun 22, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cfe243e016a2441148f9c3f665be353e.png)'
  prefs: []
  type: TYPE_IMG
- en: Graphs created by the author
  prefs: []
  type: TYPE_NORMAL
- en: Today, I want to show you how to create beautiful age-distribution graphs like
    the ones above using `matplotlib` and `seaborn`.
  prefs: []
  type: TYPE_NORMAL
- en: Age distribution graphs are excellent for visualizing the demographic of a country
    or region. They are fascinating, but the default Seaborn + Matplotlib graphs do
    not look good enough for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what you’ll learn in this tutorial:'
  prefs: []
  type: TYPE_NORMAL
- en: How to create a Seaborn style
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving the axes to make them readable and informative
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a title and a beautiful legend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turning Matplotlib figures into PIL images and adding outside padding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating grids of multiple images (like the example above)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating time-lapse animation to show how a population change over time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the data and my code in this [GitHub repository](https://github.com/oscarleoo/age-distribution-tutorial/tree/main)
    if you want to follow along.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: A quick walkthrough of the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The original data comes from the [Population Estimates and Projections](https://datacatalog.worldbank.org/search/dataset/0037655/Population-Estimates-and-Projections)
    dataset, which is a dataset from the World Bank licensed under Creative Commons
    Attribution 4.0\. It contains actual values between 1960–2021 and official predictions
    up until 2050.
  prefs: []
  type: TYPE_NORMAL
- en: In the GitHub repository, I’ve processed the data and created four separate
    CSV files so that you can focus on making graphs.
  prefs: []
  type: TYPE_NORMAL
- en: Two files, one for females and one for males, have the population in absolute
    numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/47a65976a7db990afd1c45924bef28e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by the author
  prefs: []
  type: TYPE_NORMAL
- en: The other two have values that describe the ratio of the total population. In
    the screenshot below, for example, you can see that only 0.336% of the people
    in Bahrain were between 70–74 years old in 1960.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1a9b78caed3a1085aee2269bde7453bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by the author
  prefs: []
  type: TYPE_NORMAL
- en: The dataset has 17 age groups, `00-04`, `05-09`, `10-14`, `15-19`, `20-24`,
    `25-29`, `30-34`, `35-39`, `40-44`, `45-49`, `50-54`, `55-59`, `60-64`, `65-69`,
    `70-74`, `75-79`, and `80+`.
  prefs: []
  type: TYPE_NORMAL
- en: And over 250 countries and regions, so feel free to create age distribution
    graphs that interest you.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a first age distribution chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we understand the data, we can create a simple graph with default settings
    for Seaborn. I’m using a red color for females and blue for males.
  prefs: []
  type: TYPE_NORMAL
- en: It’s perhaps a bit stereotypical, but making your graphs easy to understand
    is vital, and the colors are essential for that first interpretation.
  prefs: []
  type: TYPE_NORMAL
- en: The only “trick” is that I multiply the values for males by minus one so that
    the blue bars go in the opposite direction.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s the function to create the graph.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: And here’s how I use it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is the resulting age distribution graph for the World in 2021\. It shows
    all the data, but it doesn’t look great and is difficult to understand.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/098ed96c7f43363c74dc3da54159ce09.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph created by the author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s make it better.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Seaborn style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best part about `seaborn` is that it’s easy to create your unique styles
    using `sns.set_style()`. It takes a dictionary that can have several different
    values.
  prefs: []
  type: TYPE_NORMAL
- en: For this tutorial, I’ve created the following function to try different styles
    quickly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You might want to have something that gives you even more control. I’ve left
    out a few options I don’t care about here, and I reuse the same colors in multiple
    places.
  prefs: []
  type: TYPE_NORMAL
- en: We must select the background, grid, and text colors to run the function. I
    prefer charts with a background color because they stand out more from the page.
    A white background can look good, but it’s not my style.
  prefs: []
  type: TYPE_NORMAL
- en: When creating a new color scheme, I often start by finding one color I like.
    A good place to start looking is [Canva Color Palettes](https://www.canva.com/colors/color-palettes/)
    or [ColorHunt](https://colorhunt.co/).
  prefs: []
  type: TYPE_NORMAL
- en: After I’ve found a few colors I like, I generate additional colors with [Coolors](https://coolors.co/).
  prefs: []
  type: TYPE_NORMAL
- en: Here’s the main color palette I’m using in this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7aeefa7380fca4671c5897b795d44137.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by the author
  prefs: []
  type: TYPE_NORMAL
- en: Now I can run `set_seaborn_style()` with our new colors, and I’ve selected `PT
    Mono` as the font.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here’s what the chart looks like now.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cbe7e0f257a0a9715c1985740b0ec732.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph created by the author
  prefs: []
  type: TYPE_NORMAL
- en: It’s a clear improvement from what we had before, but it lacks information and
    is still difficult to understand.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s continue by fixing the axes.
  prefs: []
  type: TYPE_NORMAL
- en: Improving the axes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that the colors look good, it’s time to make the chart more informative.
  prefs: []
  type: TYPE_NORMAL
- en: Here are three things I want to do.
  prefs: []
  type: TYPE_NORMAL
- en: Remove the axis labels because they don’t add information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Format the values on the x-axis to make them more informative
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make the text bigger so the graph looks good on smaller screens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The solution consists of two functions.
  prefs: []
  type: TYPE_NORMAL
- en: First, the `create_x_labels()` function deals with the second bullet point and
    allows me to adapt the x-axis based on a country’s population quickly or if I
    want to use ratios instead of absolute numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: And second, the `format_ticks()` function, which takes care of the first and
    third bullet points and calls `create_x_labels()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `xlim` parameter is essential if we want to compare two different age distributions.
    If we leave it empty, the axis adapts to the values in the data, and the bars
    will stretch over the entire axes.
  prefs: []
  type: TYPE_NORMAL
- en: I add the functions when I create the chart. It’s exactly like before, but with
    `format_tricks()` at the end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here’s what the new graph looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b81948f25feb244718f9fa468d8b70c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph created by the author
  prefs: []
  type: TYPE_NORMAL
- en: We can also test the percentage format by setting `xformat="percentage"` and
    using `population_ratio_male` and `population_ratio_female`. I also set `xlim=(-10,
    10)`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1e93603e077dae5531ef57dae7e7f844.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph created by the author
  prefs: []
  type: TYPE_NORMAL
- en: It looks good, but we can do even more.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a title and a legend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Two obvious improvements that I want to fix now are:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a title that describes the graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a legend that explains what the bars represent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create the legend, I wrote the following function that takes x and y parameters
    to define the location.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Then, I add this function just like I did with `format_tricks()` in the previous
    step.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: I’ve also added `plt.title()` to add a title.
  prefs: []
  type: TYPE_NORMAL
- en: When I run everything, the age distribution graph looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/deba227d634ef641766dc8d0d978e069.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph created by the author
  prefs: []
  type: TYPE_NORMAL
- en: It looks fantastic. Let’s move on.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a PIL image and adding padding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At some point, I want to turn my figures into images I can save to disc and
    customize in other ways.
  prefs: []
  type: TYPE_NORMAL
- en: One such customization is to add some padding around the graph to make it look
    less cramped.
  prefs: []
  type: TYPE_NORMAL
- en: First, I’ve created the `create_image_from_figure()` function that turns a Matplotlib
    figure into a PIL image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: And here’s a function to add padding.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Again, I add these functions to the original code that creates the graph. It
    now looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: And here’s the resulting graph.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c78feac4cf3501dd48b072c0e5061f11.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph created by the author
  prefs: []
  type: TYPE_NORMAL
- en: In my eye, this looks close to perfect. I have two more things that I want to
    show, how to create grids and time-lapse visualization.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with the first.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a grid with multiple countries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use `plt.subplots()` to create grids, but in this tutorial, I want to
    create a grid of images because I think it looks better.
  prefs: []
  type: TYPE_NORMAL
- en: The following function takes a list of images and creates a grid with `ncols`.
    It works by creating an empty image with a single background color that’s large
    enough to fit all figures.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the following code, I iterate over a list of countries, add the resulting
    graph to `figures`, and create a grid by running `create_grid()` at the end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note that I use ratios instead of absolute numbers and set `xlim=(-10, 10)`.
    Otherwise, I won’t be able to compare the countries to each other visually.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cfe243e016a2441148f9c3f665be353e.png)'
  prefs: []
  type: TYPE_IMG
- en: Graphs created by the author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s move on to the last part of this tutorial — How to create time-lapse visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a time-lapse visualization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The static age distribution charts look great, but it’s fascinating to see how
    they change over time.
  prefs: []
  type: TYPE_NORMAL
- en: Since we have actual values from 1960 to 2021 and predictions to 2050, we can
    create a time-lapse animation for a relatively long period.
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin, I need to tell you that the font I use, `PT Mono`, doesn’t
    have the same height for all characters. To make the visualization look good,
    I needed to use `plt.text()` for the year instead of `plt.title()`. If you use
    another font, it’s not necessary to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: I use `imageio` to create a GIF from the list of images.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Let’s take a look at the result.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9614204ea543bcc2b1d9ae3708d6df26.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualization created by the author
  prefs: []
  type: TYPE_NORMAL
- en: Awesome! That’s all for this tutorial; let me know if you liked it and learned
    something useful.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This was a fun tutorial to write, and I hope you enjoyed it.
  prefs: []
  type: TYPE_NORMAL
- en: Age distributions are a great visualization of a country’s demographic, and
    now you’ve seen a few ways to make them stand out.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve learned to create styles, grids, and animations. Writing functions like
    I’ve done here is also great if you want to test different ideas and styles quickly.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you learned something that you will use in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for taking the time to read my tutorial. Let me know if you enjoy
    this type of content.
  prefs: []
  type: TYPE_NORMAL
- en: I can create more tutorials if people want them! :)
  prefs: []
  type: TYPE_NORMAL
- en: See you next time.
  prefs: []
  type: TYPE_NORMAL
