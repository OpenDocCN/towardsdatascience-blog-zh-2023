["```py\n<head>\n    <script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>\n    <script type=\"text/javascript\">\n      google.charts.load('current', {'packages': ['sankey']});\n      google.charts.setOnLoadCallback(drawChart);\n\n      function drawChart() {\n        var data = new google.visualization.DataTable();\n        data.addColumn('string', 'From');\n        data.addColumn('string', 'To');\n        data.addColumn('number', 'Weight');\n        data.addRows([\n          ['Cohort A','Cohort ABC',5],\n          ['Cohort B','Cohort ABC',2],\n          ['Cohort C','Cohort ABC',7],\n          ['Cohort D','Cohort DEF',1],\n          ['Cohort E','Cohort DEF',3],\n          ['Cohort F','Cohort DEF',8],\n          ['Cohort G','Cohort GHI',3],\n          ['Cohort H','Cohort GHI',5],\n          ['Cohort I','Cohort GHI',8],\n          ['Cohort ABC','Cohort ABCDE',9],\n          ['Cohort ABC','Cohort FGHI',5],\n          ['Cohort DEF','Cohort ABCDE',10],\n          ['Cohort DEF','Cohort FGHI',2],\n          ['Cohort GHI','Cohort FGHI',16],\n        ]);\n    var colors = ['#a6cee3', '#b2df8a', '#fb9a99', '#fdbf6f',\n                  '#cab2d6', '#ffff99', '#1f78b4', '#33a02c'];\n        // Sets chart options.\n        var options = {\n          width: 600, height: 290,\n      sankey: {\n        node: {\n          colors: colors\n        },\n        link: {\n          colorMode: 'gradient',\n          colors: colors\n        }\n      }\n        };\n\n        // Instantiates and draws our chart, passing in some options.\n        var chart = new google.visualization.Sankey(document.getElementById('sankey_basic'));\n        chart.draw(data, options);\n      }\n</script>\n</head>\n  <body>\n    <div id=\"sankey_basic\" style=\"width: 600px; height: 300px;\"></div>\n  </body>\n</html>\n```", "```py\nimport plotly.graph_objects as go\n\n# Input data - sample values for different steps\nsteps = ['Initial Value', 'Step 1', 'Step 2', 'Step 3', 'Step 4', 'Step 5', 'Final Value']\nvalues = [100, 150, -30, 60, -20, 90, 250]  # Sample changes in values at each step\n\n# Calculate the final value based on the input data\nfinal_value = sum(values)\n\n# Create the waterfall chart\nfig = go.Figure(go.Waterfall(\n    name=\"\",\n    orientation=\"v\",\n    measure=[\"absolute\", \"relative\", \"relative\", \"relative\", \"relative\", \"relative\", \"total\"],\n    x=steps,\n    textposition=\"outside\",\n    texttemplate=\"%{y}\",\n    y=values,\n    connector={\"mode\": \"spanning\", \"line\": {\"width\": 0}},\n))\n\n# Add initial and final values to the chart\nfig.add_trace(go.Scatter(x=['Initial Value', 'Final Value'], y=[100, final_value], mode='markers+text',\n                         text=[str(100), str(final_value)], textposition='bottom center'))\n\n# Configure the chart\nfig.update_layout(\n    title=\"Waterfall Chart\",\n    xaxis_title=\"Steps\",\n    yaxis_title=\"Value\",\n)\n\n# Save the chart to an HTML file\nfig.write_html(\"waterfall_chart.html\")\n\n# Display the chart\nfig.show()\n```", "```py\nimport pandas as pd\ndata = pd.DataFrame({\n    'Category': ['A', 'B', 'C', 'D', 'E'],\n    'Value1': [10,30,45,50,66],\n    'Value2': [13,42,50,60,70]\n})\ndata\n```", "```py\n<html>\n  <head>\n    <title>Radar Chart Example</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js\"></script>\n  </head>\n  <body>\n    <canvas id=\"radarChart\"></canvas>\n    <script>\n      var canvas = document.getElementById(\"radarChart\");\n      var chart = new Chart(canvas, {\n        type: \"radar\",\n        data: {\n          labels: [\n            'A',\n            'B',\n            'C',\n            'D',\n            'E',\n            'F',\n            'G'\n          ],\n          datasets: [{\n            label: '2022',\n            data: [65, 59, 90, 81, 56, 55, 40],\n            fill: true,\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            borderColor: 'rgb(255, 99, 132)',\n            pointBackgroundColor: 'rgb(255, 99, 132)',\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: 'rgb(255, 99, 132)'\n          }, {\n            label: '2023',\n            data: [48, 48, 80, 90, 66, 47, 30],\n            fill: true,\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\n            borderColor: 'rgb(54, 162, 235)',\n            pointBackgroundColor: 'rgb(54, 162, 235)',\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: 'rgb(54, 162, 235)'\n          }]\n        }\n      });\n    </script>\n  </body>\n</html>\n```", "```py\nimport numpy as np\n\nnp.random.seed(0)\nsales_a = [200 + np.random.randint(0, 21) for _ in range(12)]\nsales_b = [300 - np.random.randint(0, 21) for _ in range(12)]\nsales_c = [250 + np.random.randint(-20, 21) for _ in range(12)]\n\nfig, axs = plt.subplots(4, 1, figsize=(4, 4))\n\naxs[0].plot(df['Sales'], color='b', linewidth=2)\naxs[0].axis('off')\n\naxs[1].plot(sales_a, color='g', linewidth=2)\naxs[1].axis('off')\n\naxs[2].plot(sales_b, color='r', linewidth=2)\naxs[2].axis('off')\n\naxs[3].plot(sales_c, color='m', linewidth=2)\naxs[3].axis('off')\n\nplt.show()\n```"]