["```py\nlibrary(tidyverse)\n\nsales <- read_csv(\"sales_data_with_stores.csv\")\n\n# display the first 6 rows\nhead(sales)\n\n# A tibble: 6 x 8\n  store  product_group product_code stock_qty   cost   price last_week_sales last_month_sales\n  <chr>  <chr>                <dbl>     <dbl>  <dbl>   <dbl>           <dbl>            <dbl>\n1 Violet PG2                   4187       498 421\\.    570\\.                13               58\n2 Rose   PG2                   4195       473 546\\.    712\\.                16               58\n3 Violet PG2                   4204       968 640\\.    855\\.                22               88\n4 Daisy  PG2                   4219       241 870\\.   1035\\.                14               45\n5 Daisy  PG2                   4718      1401  12.5    26.6               50              285\n6 Violet PG4                   5630       287   5.85    7.59              24              116\n```", "```py\n# select product_code and price columns\nselect(sales, product_code, price)\n\n# A tibble: 1,000 x 2\n   product_code   price\n          <dbl>   <dbl>\n 1         4187  570\\.  \n 2         4195  712\\.  \n 3         4204  855\\.  \n 4         4219 1035\\.  \n 5         4718   26.6 \n\n# the following does the same\nselect(sales, c(product_code, price))\n```", "```py\n# select all but product_group column\nselect(sales, !product_group)\n\n# A tibble: 1,000 x 7\n   store  product_code stock_qty   cost   price last_week_sales last_month_sales\n   <chr>         <dbl>     <dbl>  <dbl>   <dbl>           <dbl>            <dbl>\n 1 Violet         4187       498 421\\.    570\\.                13               58\n 2 Rose           4195       473 546\\.    712\\.                16               58\n 3 Violet         4204       968 640\\.    855\\.                22               88\n 4 Daisy          4219       241 870\\.   1035\\.                14               45\n 5 Daisy          4718      1401  12.5    26.6               50              285\n```", "```py\n# select all columns from store to cost\nselect(sales, store:cost)\n\n# A tibble: 1,000 x 5\n   store  product_group product_code stock_qty   cost\n   <chr>  <chr>                <dbl>     <dbl>  <dbl>\n 1 Violet PG2                   4187       498 421\\.  \n 2 Rose   PG2                   4195       473 546\\.  \n 3 Violet PG2                   4204       968 640\\.  \n 4 Daisy  PG2                   4219       241 870\\.  \n 5 Daisy  PG2                   4718      1401  12.5 \n```", "```py\n# select all columns from store to cost\nselect(sales, 1:5)\n```", "```py\n# select all numeric columns\nselect(sales, where(is.numeric))\n\n# A tibble: 1,000 x 6\n   product_code stock_qty   cost   price last_week_sales last_month_sales\n          <dbl>     <dbl>  <dbl>   <dbl>           <dbl>            <dbl>\n 1         4187       498 421\\.    570\\.                13               58\n 2         4195       473 546\\.    712\\.                16               58\n 3         4204       968 640\\.    855\\.                22               88\n 4         4219       241 870\\.   1035\\.                14               45\n 5         4718      1401  12.5    26.6               50              285\n```", "```py\n# select all non-numeric columns\nselect(sales, !where(is.numeric))\n\n# A tibble: 1,000 x 2\n   store  product_group\n   <chr>  <chr>        \n 1 Violet PG2          \n 2 Rose   PG2          \n 3 Violet PG2          \n 4 Daisy  PG2          \n 5 Daisy  PG2 \n```", "```py\n# increase price by 10 percent\nmutate(sales, price = price * 1.1)\n\n# A tibble: 1,000 x 8\n   store  product_group product_code stock_qty   cost   price last_week_sales last_month_sales\n   <chr>  <chr>                <dbl>     <dbl>  <dbl>   <dbl>           <dbl>            <dbl>\n 1 Violet PG2                   4187       498 421\\.    627\\.                13               58\n 2 Rose   PG2                   4195       473 546\\.    784\\.                16               58\n 3 Violet PG2                   4204       968 640\\.    940\\.                22               88\n 4 Daisy  PG2                   4219       241 870\\.   1138\\.                14               45\n 5 Daisy  PG2                   4718      1401  12.5    29.2               50              285\n```", "```py\n# create price_updated column by increasing price by 10 percent\nmutate(sales, price_updated = price * 1.1)\n\n# A tibble: 1,000 x 9\n   store  product_group product_code stock_qty   cost   price last_week_sales last_month_sales price_updated\n   <chr>  <chr>                <dbl>     <dbl>  <dbl>   <dbl>           <dbl>            <dbl>         <dbl>\n 1 Violet PG2                   4187       498 421\\.    570\\.                13               58        627\\.  \n 2 Rose   PG2                   4195       473 546\\.    712\\.                16               58        784\\.  \n 3 Violet PG2                   4204       968 640\\.    855\\.                22               88        940\\.  \n 4 Daisy  PG2                   4219       241 870\\.   1035\\.                14               45       1138\\.  \n 5 Daisy  PG2                   4718      1401  12.5    26.6               50              285         29.2\n```", "```py\n> sales %>%\n+     select(cost, price) %>%\n+     mutate(\n+         price_updated = price * 1.1,\n+         profit_updated = price_updated - cost)\n\n# A tibble: 1,000 x 4\n     cost   price price_updated profit_updated\n    <dbl>   <dbl>         <dbl>          <dbl>\n 1 421\\.    570\\.          627\\.           206\\.  \n 2 546\\.    712\\.          784\\.           238\\.  \n 3 640\\.    855\\.          940\\.           300\\.  \n 4 870\\.   1035\\.         1138\\.           268\\.  \n 5  12.5    26.6          29.2           16.7 \n```", "```py\nfilter(sales, price > 1000)\n\n# A tibble: 5 x 8\n  store  product_group product_code stock_qty  cost price last_week_sales last_month_sales\n  <chr>  <chr>                <dbl>     <dbl> <dbl> <dbl>           <dbl>            <dbl>\n1 Daisy  PG2                   4219       241  870\\. 1035\\.              14               45\n2 Violet PG1                   9692        68 1243  1500\\.              26               94\n3 Violet PG1                   7773       602  976\\. 1325\\.              19               60\n4 Daisy  PG1                   1941       213  847  1177\\.              18               72\n5 Daisy  PG1                   4140        92  803  1202\\.              12               24\n```", "```py\n# rows with a price of more than 1000 and store is Daisy\nfilter(sales, price > 1000 & store == \"Daisy\")\n\n# A tibble: 3 x 8\n  store product_group product_code stock_qty  cost price last_week_sales last_month_sales\n  <chr> <chr>                <dbl>     <dbl> <dbl> <dbl>           <dbl>            <dbl>\n1 Daisy PG2                   4219       241  870\\. 1035\\.              14               45\n2 Daisy PG1                   1941       213  847  1177\\.              18               72\n3 Daisy PG1                   4140        92  803  1202\\.              12               24\n```", "```py\n# rows with product group of PG3, PG4, or PG5 and store is Daisy\nfilter(sales, product_group %in% c(\"PG3\", \"PG4\", \"PG5\") & store == \"Daisy\")\n\n# A tibble: 302 x 8\n   store product_group product_code stock_qty  cost price last_week_sales last_month_sales\n   <chr> <chr>                <dbl>     <dbl> <dbl> <dbl>           <dbl>            <dbl>\n 1 Daisy PG4                   5634       205 14.2   18.0              14               53\n 2 Daisy PG4                   2650       239 59.4  111\\.               15               38\n 3 Daisy PG4                   5647       352  5.85  13.3              37              108\n 4 Daisy PG4                   5693       260  7.62  13.3              19               74\n 5 Daisy PG4                   5696       260  7.62  13.3              29               98\n```", "```py\n# order rows by price\narrange(sales, price)\n\n# A tibble: 1,000 x 8\n   store  product_group product_code stock_qty  cost price last_week_sales last_month_sales\n   <chr>  <chr>                <dbl>     <dbl> <dbl> <dbl>           <dbl>            <dbl>\n 1 Violet PG4                   5454       -22 0.570  0.66              31               28\n 2 Violet PG5                   5621      -123 1.32   0.76              49              100\n 3 Daisy  PG4                   2279       525 1.34   1.23              14               18\n 4 Rose   PG2                   9372       350 1.41   1.42              16               40\n 5 Rose   PG4                   2138       482 1.63   1.61              13               23\n```", "```py\n# order rows by price descending\narrange(sales, -price)\n\n# A tibble: 1,000 x 8\n   store  product_group product_code stock_qty  cost price last_week_sales last_month_sales\n   <chr>  <chr>                <dbl>     <dbl> <dbl> <dbl>           <dbl>            <dbl>\n 1 Violet PG1                   9692        68 1243  1500\\.              26               94\n 2 Violet PG1                   7773       602  976\\. 1325\\.              19               60\n 3 Daisy  PG1                   4140        92  803  1202\\.              12               24\n 4 Daisy  PG1                   1941       213  847  1177\\.              18               72\n 5 Daisy  PG2                   4219       241  870\\. 1035\\.              14               45\n```", "```py\narrange(sales, store, -last_week_sales)\n\n# A tibble: 1,000 x 8\n   store product_group product_code stock_qty  cost price last_week_sales last_month_sales\n   <chr> <chr>                <dbl>     <dbl> <dbl> <dbl>           <dbl>            <dbl>\n 1 Daisy PG6                    856     52748 31.4  38.0             1883             6880\n 2 Daisy PG3                   2481     10543  8.25 14.2              947             4100\n 3 Daisy PG6                   3957     10090 26.9  31.3              867             2355\n 4 Daisy PG6                    889     21569 13.0  16.1              808             2990\n 5 Daisy PG6                   9635     26576  8.53 11.4              673             2484\n```", "```py\n# group by rows in sales by store\nby_store <- group_by(sales, store)\n\n# calculate the avg price for each store\nsummarise(by_store, avg_price = mean(price))\n\n# A tibble: 3 x 2\n  store  avg_price\n* <chr>      <dbl>\n1 Daisy       69.3\n2 Rose        60.5\n3 Violet      67.8\n```"]