["```py\nimport logging\nimport functools\nimport time\nfrom datetime import datetime\n\nlogging.basicConfig(level=logging.INFO)\n```", "```py\nFILE_PATH = \"Updated_sales.csv\"\nCHUNK_SIZE = 1000\n\ndef read_raw_data(file_path: str, chunk_size: int=1000) -> DataFrame:\n    csv_reader = pd.read_csv(file_path, chunksize=chunk_size)\n    processed_chunks = []\n\n    for chunk in csv_reader:\n        chunk = chunk.loc[chunk[\"Order ID\"] != \"Order ID\"].dropna()\n        processed_chunks.append(chunk)\n\n    return pd.concat(processed_chunks, axis=0)\n\ndef split_purchase_address(df_to_process: DataFrame) -> DataFrame:\n    df_address_split = df_to_process[\"Purchase Address\"].str.split(\",\", n=3, expand=True)\n    df_address_split.columns = [\"Street Name\", \"City\", \"State and Postal Code\"]\n\n    df_state_postal_split = (\n        df_address_split[\"State and Postal Code\"]\n        .str.strip()\n        .str.split(\" \", n=2, expand=True)\n    )\n    df_state_postal_split.columns = [\"State Code\", \"Postal Code\"]\n\n    return pd.concat([df_to_process, df_address_split, df_state_postal_split], axis=1)\n\ndef extract_product_pack_information(df_to_process: DataFrame) -> DataFrame:\n    df_to_process[\"Pack Information\"] = df_to_process[\"Product\"].str.extract(r'.*\\((.*)\\).*').fillna(\"Not Pack\")\n\n    return df_to_process\n\ndef one_hot_encode_product_column(df_to_process: DataFrame) -> DataFrame:    \n    return pd.get_dummies(df_to_process, columns=[\"Product\"])\n\ndef process_raw_data():\n    df = read_raw_data(file_path=FILE_PATH, chunk_size=CHUNK_SIZE)\n\n    return (\n        df\n        .pipe(split_purchase_address)\n        .pipe(extract_product_pack_information)\n        .pipe(one_hot_encode_product_column)\n    )\n\nfinal_df = process_raw_data()\n```", "```py\ndef log_execution_and_time(function):\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        logging.info(f\"{datetime.fromtimestamp(start_time)} - Start execution of: {function.__name__}\")\n        result = function(*args, **kwargs)\n        end_time = time.time()\n        logging.info(f\"{datetime.fromtimestamp(end_time)} - Ended execution of: {function.__name__}\")\n        logging.info(f\"Duration of {function.__name__}: {round(end_time - start_time, 2)} seconds\")\n        return result\n    return wrapper\n```", "```py\ndef log_dataframe_metadata(function):\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        result = function(*args, **kwargs)\n        logging.info(f\"{function.__name__} - result DataFrame number of rows: {len(result)}\")\n        logging.info(f\"{function.__name__} - result DataFrame number of columns: {len(result.columns)}\")\n        for column, memory in result.memory_usage(deep=True).iteritems():\n            logging.info(f\"{function.__name__} - {column} memory usage: {memory}\")\n        return result\n    return wrapper\n```", "```py\n@log_execution_and_time\n@log_dataframe_metadata\ndef read_raw_data(file_path: str, chunk_size: int=1000) -> DataFrame:\n    csv_reader = pd.read_csv(file_path, chunksize=chunk_size)\n    processed_chunks = []\n\n    for chunk in csv_reader:\n        chunk = chunk.loc[chunk[\"Order ID\"] != \"Order ID\"].dropna()\n        processed_chunks.append(chunk)\n\n    return pd.concat(processed_chunks, axis=0)\n\n@log_execution_and_time\n@log_dataframe_metadata\ndef split_purchase_address(df_to_process: DataFrame) -> DataFrame:\n    df_address_split = df_to_process[\"Purchase Address\"].str.split(\",\", n=3, expand=True)\n    df_address_split.columns = [\"Street Name\", \"City\", \"State and Postal Code\"]\n\n    df_state_postal_split = (\n        df_address_split[\"State and Postal Code\"]\n        .str.strip()\n        .str.split(\" \", n=2, expand=True)\n    )\n    df_state_postal_split.columns = [\"State Code\", \"Postal Code\"]\n\n    return pd.concat([df_to_process, df_address_split, df_state_postal_split], axis=1)\n\n@log_execution_and_time\n@log_dataframe_metadata\ndef extract_product_pack_information(df_to_process: DataFrame) -> DataFrame:\n    df_to_process[\"Pack Information\"] = df_to_process[\"Product\"].str.extract(r'.*\\((.*)\\).*').fillna(\"Not Pack\")\n\n    return df_to_process\n\n@log_execution_and_time\n@log_dataframe_metadata\ndef one_hot_encode_product_column(df_to_process: DataFrame) -> DataFrame:    \n    return pd.get_dummies(df_to_process, columns=[\"Product\"])\n\n@log_execution_and_time\n@log_dataframe_metadata\ndef process_raw_data():\n    df = read_raw_data(file_path=FILE_PATH, chunk_size=CHUNK_SIZE)\n\n    return (\n        df\n        .pipe(split_purchase_address)\n        .pipe(extract_product_pack_information)\n        .pipe(one_hot_encode_product_column)\n    )\n\nfinal_df = process_raw_data()\n```"]