- en: Simulating the Card Game ‘War’
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/simulating-the-card-game-war-ebafb4462a6a](https://towardsdatascience.com/simulating-the-card-game-war-ebafb4462a6a)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A coding story about a simple game with an infinite twist
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@Jake_Mitchell?source=post_page-----ebafb4462a6a--------------------------------)[![Jake
    Mitchell](../Images/08d2f4af3a58a419b0f9547ca64bbb07.png)](https://medium.com/@Jake_Mitchell?source=post_page-----ebafb4462a6a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ebafb4462a6a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ebafb4462a6a--------------------------------)
    [Jake Mitchell](https://medium.com/@Jake_Mitchell?source=post_page-----ebafb4462a6a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ebafb4462a6a--------------------------------)
    ·6 min read·Jan 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: I’ve simulated a lot of games — games that require skill, deception, or strategy.
  prefs: []
  type: TYPE_NORMAL
- en: '**This is not one of those games.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d27d824ad8b753bec0bbb0a08df402b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Ivan Slade](https://unsplash.com/@flowinteractive?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'Introduction:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ‘War’ is very simple. 2 players are each dealt out half of a standard 52-card
    deck. The two then face off, flipping over their top card. Whoever has the highest
    card takes both cards. On the occasion that the cards have the same value, players
    risk the next 3 cards of their deck, and battle with the 4th card. Whoever plays
    the highest 4th card wins all of the cards in the pile (their own 3 cards plus
    the opponent’s 3 cards). The game ends when a player does not have any cards left.
  prefs: []
  type: TYPE_NORMAL
- en: There is no secret to winning. You just hope your card is valued higher than
    your opponent’s card. **You are at the mercy of dumb luck.**
  prefs: []
  type: TYPE_NORMAL
- en: When I set out to code this game, I was interested if the starting value of
    cards could predict a winner before the game even started. What I was not expecting
    to find was that this game, under the right circumstances, can actually go on
    *forever*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Coding the Game:**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I first ‘shuffle’ a deck of cards:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This block of code creates a 52-space array of the numbers 1–52 randomly placed.
    Then, the loops go through and assign groups of 4 to the values of 1–13, with
    1 being an ace and 13 being a king. What is left is the equivalent to a shuffled
    deck of cards.
  prefs: []
  type: TYPE_NORMAL
- en: 'I then decide if the next cards for each opponent are not equal to each other.
    If so, the code is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This determines which card is higher, given that the cards are not equal, and
    gives both cards to the winner, while taking away that card from the loser.
  prefs: []
  type: TYPE_NORMAL
- en: If the played cards are the same, then the players must go to war. This code
    is identical to the previous shown, with the exception being that an additional
    3 cards are added to the shared pile from each player.
  prefs: []
  type: TYPE_NORMAL
- en: These steps are repeated until a winner is decided… *or so I thought*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Results:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Results are hard to come by when a simulation won’t end. Then I took a look
    at the decks of each player.
  prefs: []
  type: TYPE_NORMAL
- en: '**The players had worked their way into a perfectly balanced game of ‘War’.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'I then plotted the amount of cards in each hand at each turn in the game to
    visualize what had a happened:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cf1caa20b39253446b4a37c542dd1423.png)'
  prefs: []
  type: TYPE_IMG
- en: Image provided by the author.
  prefs: []
  type: TYPE_NORMAL
- en: This is a plot that shows the state of the game at each turn. It is perfectly
    mirrored at the 26-card line, due to the zero-sum nature of the game. What it
    shows in this infinite game (I stopped it at 2000 turns to produce this image)
    is that **the players had accidentally found a pattern of cards that resulted
    in a perfect equilibrium of card flow.**
  prefs: []
  type: TYPE_NORMAL
- en: 'Every card that the red player took, blue would take back the turn after. Over
    and over again — forever. I zoomed in on the previous plot to illustrate this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3edf020bf4e2dbdbea3ca75daba8ccee.png)'
  prefs: []
  type: TYPE_IMG
- en: Image provided by the author.
  prefs: []
  type: TYPE_NORMAL
- en: This wasn’t happening every game though. Plenty of games were playing out completely
    normal. I accumulated more of these plots to show the different card flows that
    ‘War’ can produce.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1ddf15adb551a1c1990f65e5c4709097.png)![](../Images/28d3d1a545124474bcaf44680ba79377.png)![](../Images/9a4b03df1ddd20601d13878a2a49cb5b.png)'
  prefs: []
  type: TYPE_IMG
- en: Images provided by the author.
  prefs: []
  type: TYPE_NORMAL
- en: It is fascinating to visualize what some of these games were like. On one end
    (left), you have a game that featured many different pivot points. Players went
    back and forth, exchanging the lead until one couldn’t compete any more. Then
    on the other end of the spectrum (right), you have a game that heavily favored
    a player right from the start. Blue was likely hanging on by a few high-value
    cards, but eventually ran out of luck.
  prefs: []
  type: TYPE_NORMAL
- en: I was still interested in finding what ratio of games take the leap to infinity.
    I simulated ‘War’ hundreds of times and tracked the amount of games that reached
    2000 turns (this was my definition of infinity since I would not be able to finish
    the simulation if I actually left it running forever). **I found that 16.67% of
    games resulted in an infinite game.**
  prefs: []
  type: TYPE_NORMAL
- en: I also found that **the average non-infinite game lasts 513 turns.** According
    to the histogram below, most games last under 500 moves. While this might seem
    like a lot, the average move lasts maybe 2–3 seconds, meaning that the average
    game is 15–20 minutes long.
  prefs: []
  type: TYPE_NORMAL
- en: When we consider that 16.67% of games go to an infinite amount of turns, **we
    could theoretically say that the average turns per game… is infinity —** but that
    idea hurts my brain a little bit.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3452e40fd51e4ce13fd311f8504b5655.png)'
  prefs: []
  type: TYPE_IMG
- en: Image provided by the author.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, I was finding that maybe my understanding of the rules was causing
    this infinite game. I was coding the game so that when a player won, they returned
    those cards to the bottom of their hand — unshuffled.
  prefs: []
  type: TYPE_NORMAL
- en: I simulated the same code, with a shuffling block this time, and the results
    that were produced aligned more with my experience in playing the game.
  prefs: []
  type: TYPE_NORMAL
- en: I found that **none of the simulated games went to infinity.** I also found
    that **the average turns per game shrunk to around 250 turns** — half the amount
    of the non-shuffled version.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e66450a6474fe4f3d1ee82ce5ca8a1e4.png)'
  prefs: []
  type: TYPE_IMG
- en: Image provided by the author.
  prefs: []
  type: TYPE_NORMAL
- en: The histogram speaks for itself. Far fewer games got anywhere close to being
    infinite, and many only lasted 5–10 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: It makes total sense how simply shuffling the cards can produce enough variation
    to prevent the game from lasting forever. For the average player not interested
    in experimenting with the sturdiness of total card equilibrium, the tedious task
    of shuffling your winnings is all it will take to keep your game time to a reasonable
    length.
  prefs: []
  type: TYPE_NORMAL
- en: 'Conclusions:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The game of ‘War’, when played as the unshuffled version, has a decent chance
    at lasting forever. 1 of every 6 games was likely to be infinite. If your goal
    is to find perfect equilibrium amongst the cards, then I suggest playing this
    version.
  prefs: []
  type: TYPE_NORMAL
- en: It’s not often that I finish a project with results I was not somewhat expecting.
    In [Catan](https://medium.com/codex/the-best-and-worst-catan-board-setups-989df4ba550a),
    I generally knew what a good setup was, and I was just optimizing it. With [Monopoly](https://medium.com/towards-data-science/a-data-driven-tactics-simulation-for-monopoly-864e7cffe508),
    I went in expecting to find that properties with the best return-on-investment
    would be ideal. With this project, I went in blindly — and found that my simplest
    project yielded the most interesting results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thanks for taking the time to read my article! If you made it this far, why
    not read more about data science in board games? Take a look at some of my other
    projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Simulating the Card Game ‘BS’](https://medium.com/codex/simulating-the-card-game-bs-to-find-the-optimal-setup-82541bacf628)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Simulating Mancala](https://medium.com/towards-data-science/simulating-mancala-what-happens-when-i-push-this-game-to-its-limits-28d9c0a58616)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Applying Machine Learning to Tic-Tac-Toe](https://medium.com/towards-data-science/applying-machine-learning-to-tic-tac-toe-47d954671c73)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chutes and Ladders](https://medium.com/towards-data-science/the-surprisingly-interesting-mathematics-within-chutes-and-ladders-40f931c18489)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Teaching a Machine the Play Connect-4](https://medium.com/towards-data-science/i-taught-a-machine-how-to-play-connect-4-df261da4e23f)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
