["```py\nimport pandas as pd\nimport sklearn\nfrom sklearn import datasets\n\n# Import the dataset\ndf_ = datasets.load_iris()\ndf = pd.DataFrame()\ndf['petal_length'] = df_['data'][:,2]\ndf['petal_width'] = df_['data'][:,3]\ndf['target'] = df_['target'] == 1\n\n# Define train and test sets\nX_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(df[['petal_length', 'petal_width']], \n                                        df['target'], \n                                        test_size=0.2, \n                                        random_state=42)\n# Normalize data\nscaler = sklearn.preprocessing.StandardScaler()\nX_train = scaler.fit_transform(X_train)\n\n# Instantiate the classifier model\nsvm_classifier = sklearn.svm.LinearSVC()\n# Fit the model with the training data\nsvm_classifier.fit(X_train, y_train)\n# Predict new intances classes\ny_predicted = svm_classifier.predict(scaler.transform(Xtest))\n# Evaluate model's accuracy\naccuracy = sklearn.metrics.accuracy_score(y_test, y_predicted)\nprint(accuracy)\n```", "```py\n# Method 1\nsvm_classifier_soft = sklearn.svm.LinearSVC(C=10)\nsvm_classifier_soft.fit(X_train, y_train)\n\n# Method 2\nsvm_classifier_soft = sklearn.svm.SVC(kernel='linear', C=10)\nsvm_classifier_soft.fit(X_train, y_train)\n```", "```py\n# Instantiate the classifier object\nSVM_classifier = sklearn.svm.SVC(kernel='poly', degree=5, C=10, coef0=1)\n# Instantiate the scaler object\nscaler = sklearn.preprocessing.StandardScaler()\n\n# Normalize data\nX_train = scaler.fit_transform(X_train)\n\n# Train the classifier\nSVM_classifier.fit(X_train, Y_train)\n```", "```py\nimport pandas as pd\nimport sklearn\nfrom sklearn import datasets\n\n# Import the dataset\ndf_ = datasets.load_iris()\ndf = pd.DataFrame()\ndf['petal_length'] = df_['data'][:,2]\ndf['petal_width'] = df_['data'][:,3]\ndf['target'] = df_['target'] == 1\n\n# Define train and test sets\nX_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(df[['petal_length', 'petal_width']], \n                                        df['target'], \n                                        test_size=0.2, \n                                        random_state=42)\n# Normalize data\nscaler = sklearn.preprocessing.StandardScaler()\nX_train = scaler.fit_transform(X_train)\n\n# Instantiate the classifier model\nsvm_gaussian_classifier = sklearn.svm.SVC(kernel='rbf', gamma=6, C=0.001)\n# Fit the model with the training data\nsvm_gaussian_classifier.fit(X_train, y_train)\n# Predict new intances classes\ny_predicted = svm_gaussian_classifier.predict(scaler.transform(X_test))\n# Evaluate model's accuracy\naccuracy = sklearn.metrics.accuracy_score(y_test, y_predicted)\n```"]