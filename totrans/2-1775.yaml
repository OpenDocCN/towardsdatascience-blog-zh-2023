- en: How to Use Regex Patterns in Pandas to Work With Complex Strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/regex-patterns-in-pandas-api-afe70178f9e9](https://towardsdatascience.com/regex-patterns-in-pandas-api-afe70178f9e9)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Regex simplifies pattern-matching tasks on large amounts of text — Pandas makes
    it elegant
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://thuwarakesh.medium.com/?source=post_page-----afe70178f9e9--------------------------------)[![Thuwarakesh
    Murallie](../Images/44f1a14a899426592bbd8c7f73ce169d.png)](https://thuwarakesh.medium.com/?source=post_page-----afe70178f9e9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----afe70178f9e9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----afe70178f9e9--------------------------------)
    [Thuwarakesh Murallie](https://thuwarakesh.medium.com/?source=post_page-----afe70178f9e9--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----afe70178f9e9--------------------------------)
    ·7 min read·Feb 27, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/624b2b35b8a6ef2a7e48b83e5d3c1041.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Chris Moore](https://unsplash.com/@chrismoore_?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Regex is the most potent technique to clean and extract data. If you’ve ever
    worked with a large text dataset, you’d know how time-consuming and energy-draining
    it would be.
  prefs: []
  type: TYPE_NORMAL
- en: I often use regex to clean phone numbers and emails and standardize addresses.
    But there are complex use cases as well.
  prefs: []
  type: TYPE_NORMAL
- en: We noticed inconsistent office columns in our recent data pipeline from a specific
    data source. We only needed the office code from this column. It’s two or three
    letters followed by a colon and a two-digit number. Earlier, we used a simple
    replace operation to map the column to our desired values. But as new data proved
    inconsistent with our assumption, we had to change the strategy. Since we can
    ensure the pattern is consistent, we used regex to clean them. This way, we never
    have to worry about changing column values.
  prefs: []
  type: TYPE_NORMAL
- en: But if your dataset is significantly large, and you need the extracted values
    stored in new columns next to each row, you’d be tempted to use the map or apply
    methods in Pandas. But Pandas natively provides excellent APIs for string operations.
    Almost all of them support regex.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Before we discuss the benefits of these native APIs over the map/apply method,
    here’s what I mean.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing Pandas string extract with the usual regex
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following code generates a synthetic dataset using the Faker. It generates
    100K fake addresses and stores them in a Pandas Series. You can adjust the size
    by changing n to a more considerable value your computer can support.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Our goal is to extract the state and zip codes to separate columns. This task
    is easy enough to do in spreadsheet software. But let’s keep it for our discussion.
    And let’s assume we’re using regex.
  prefs: []
  type: TYPE_NORMAL
- en: Here is my usual way of mapping or applying a regex to the series.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The code above is easy to understand. We match all the two letters followed
    by a whitespace and five digits. Then we do a string split and expand it to separate
    columns. Finally, we name the columns ‘state’ and ‘zip_code.’
  prefs: []
  type: TYPE_NORMAL
- en: But here’s the Pandas’s way of doing it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is unarguably more elegant than the previous code. We use named groups
    in our regex pattern, which becomes the column name.
  prefs: []
  type: TYPE_NORMAL
- en: On a separate note, you can make part of a regex pattern a group by wrapping
    them in parentheses. You can name each group by adding `?P<group_name>` before
    you start describing your pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, the native method is excellent in readability. But what about performance?
  prefs: []
  type: TYPE_NORMAL
- en: I’ve used the `timit` utility in Jupyter notebook to record the execution times.
    I don’t see the native way having the upper hand on performance. Mapping is faster.
  prefs: []
  type: TYPE_NORMAL
- en: But our desired output is not yet finished with a single map function. We need
    to do additional steps to get in there. The whole set of operations costs slightly
    more time than the extract method.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/50cc7d2a64757523350385abfa884291.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparing the map/apply method performance against the extract method — Screenshot
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Besides readability, both methods aren’t too different. But the difference becomes
    significant if you’re working with a vast dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/black-with-git-hub-actions-4ffc5c61b5fe?source=post_page-----afe70178f9e9--------------------------------)
    [## Maintain Clean Python Code With Black and GitHub Actions.'
  prefs: []
  type: TYPE_NORMAL
- en: Nobody wants a messy codebase; few have the patience to clean it.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/black-with-git-hub-actions-4ffc5c61b5fe?source=post_page-----afe70178f9e9--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Also, if your code runs in a resource-constrained environment, you must decide
    carefully. That’s often my case, as I build data pipelines mostly. I need to ensure
    that I’m using the optimal code for faster and cheaper processing of live data.
  prefs: []
  type: TYPE_NORMAL
- en: We know there is more than one way to do wrangling in Pandas. If you anticipate
    re-running the scripts in the future, you may have to spend some time experimenting
    with different alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/a-little-pandas-hack-to-handle-large-datasets-with-limited-memory-6745140f473b?source=post_page-----afe70178f9e9--------------------------------)
    [## A Little Pandas Hack to Handle Large Datasets with Limited Memory'
  prefs: []
  type: TYPE_NORMAL
- en: The Pandas defaults aren’t optimal. A tiny configuration can compress your dataframe
    to fit in your memory.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/a-little-pandas-hack-to-handle-large-datasets-with-limited-memory-6745140f473b?source=post_page-----afe70178f9e9--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Useful Pandas string methods with regex
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we know how easy to use regex operations directly without mapping or
    applying a function, here are some methods I frequently use.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve already seen one example of using the `extract` API in the previous section.
    It is handy with regex patterns; perhaps that’s the one I use most.
  prefs: []
  type: TYPE_NORMAL
- en: Here are three other techniques I often use.
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. Split text to separate columns with a complex pattern.**'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s suppose a column contains state and zip codes. We need them separated
    into individual columns. Since this is sourced from a free-form input form, the
    separator is not always a whitespace or a comma.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**2\. Filter records that contain a text pattern somewhere in the middle.**'
  prefs: []
  type: TYPE_NORMAL
- en: I had a dataset where there was an office serial number. The number had a pattern.
    The first two letters denote the country’s shortcode. A location code follows
    the country code. It’s a three-digit number. Then a hyphen and a department id,
    which is another three-digit number.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we need to filter all the records related to the finance department
    of countries, UK, India, and Australia. We can do something like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This could be a tough task if it's not for regex. And it is not a readable one,
    either.
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. Replacing patterns with a new string**'
  prefs: []
  type: TYPE_NORMAL
- en: Replace is a frequent string operation. Even in Excel, we do it a lot. But some
    replacement operations are more complex than a straightforward find and replace.
  prefs: []
  type: TYPE_NORMAL
- en: We need to find patterns and replace them with new strings.
  prefs: []
  type: TYPE_NORMAL
- en: Take a phone number column, for example. You need to remove the country codes
    from the column. Some records have a country code, and some don't. Even the one
    with a country code has different formats.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s a simple regex example of doing this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You’d be fine with your spreadsheet software for basic string manipulations.
    But for more advanced use cases, a programming language could save hours of your
    time.
  prefs: []
  type: TYPE_NORMAL
- en: Some operations are complex even to handle even with the basic APIs of a programming
    language. Especially the one where patterns are involved. This is where we get
    a regex for rescue.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re a Pandas user, you can directly use regex in its native APIs. This
    has the advantage of a clean codebase with fewer lines. That’s the focus of this
    post.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve discussed some of my favorite regex tricks in Pandas. Although there aren’t
    any significant performance improvements, I still prefer these methods because
    they are straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading, friend! Say Hi to me on [**LinkedIn**](https://www.linkedin.com/in/thuwarakesh/),
    [**Twitter**](https://twitter.com/Thuwarakesh), and [**Medium**](https://thuwarakesh.medium.com/).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Not a Medium member yet? Please use this link to [**become a member**](https://thuwarakesh.medium.com/membership)
    because, at no extra cost for you, I earn a small commission for referring you.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
