["```py\n!pip install neo4j-driver\n!pip install graphdatascience\n```", "```py\nDB_ULR = 'bolt://xxxxx:xxxx'\nDB_USER = 'neo4j'\nDB_PASS = 'xxxxx'\ngds = GraphDataScience(DB_ULR, auth=(DB_USER, DB_PASS))\n```", "```py\ngds.run_cypher('create constraint if not exists for (n:User) require (n.id) is node key')\ncreate_customer_res = gds.run_cypher('''\n    unwind $data as row\n    merge (n:User{id: row.UserID})\n    set n.Gender = row.Gender\n    set n.Age =  row.Age \n    return count(*) as custmers_created\n''', params = {'data': users.to_dict('records')}) \n```", "```py\nfor chunk in np.array_split(ratings,200):\n  if i%10 == 0:\n    print(i)\n  create_rated = gds.run_cypher('''\n    unwind $data as row\n    match (u:User{id: row.UserID}), (m:Movie{id: row.MovieID})\n    merge (u)-[r:RATED]->(m)\n    set r.Rating = row.Rating\n    return count(*) as create_rated\n    ''', params = {'data': chunk.to_dict('records')})\n  i = i+1\n```", "```py\n# Check similar movies\nsimilar_movies = gds.run_cypher('''\n    MATCH(m1:Movie)-[r1]-(u:User)-[r2]-(m2:Movie)\n    WHERE m1.Title CONTAINS 'Toy Story (1995)'\n      AND m2.Title<>'Toy Story (1995)'\n      AND r1.Rating=5 AND r2.Rating=5\n    RETURN m2.Title,m2.Genres,count(DISTINCT(u)) as number_of_paths\n    ORDER BY common_users DESC\n''')\nsimilar_movies.head()\n```", "```py\n# Create projection\ncreate_projection = gds.run_cypher('''\n   CALL gds.graph.project(\n    'myGraph',\n    ['User', 'Movie'],\n    {\n        RATED: {properties:  'Rating'}\n            } \n);\n''')\n```", "```py\n# Get user similarity\nusers_similarity = gds.run_cypher('''\nCALL gds.nodeSimilarity.stream('myGraph')\nYIELD node1, node2, similarity\nRETURN gds.util.asNode(node1).id AS UserID1, gds.util.asNode(node2).id AS UserID2, similarity\nORDER BY similarity DESCENDING, UserID1, UserID2\n''')\n```", "```py\n# Create Similar relationship\ni=1\nfor chunk in np.array_split(users_similarity.query('UserID1>UserID2'),10):\n  print(i)\n  create_similar = gds.run_cypher('''\n    unwind $data as row\n    match (u1:User{id: row.UserID1}), (u2:User{id: row.UserID2})\n    merge (u1)-[r:SIMILAR]->(u2)\n    set r.Similarity=row.similarity\n    return count(*) as create_rated\n    ''', params = {'data': chunk.to_dict('records')})\n  i = i+1\n```", "```py\n# Check similar movies\nsimilar_movies_for_user = gds.run_cypher('''\n    MATCH (u1:User)-[r1:SIMILAR]-(u2)-[r2:RATED]-(m:Movie)\n    WHERE id(u1)=$id\n    AND NOT ( (u1)-[]-(m))\n    RETURN m.Title,m.Genres,Sum(r1.Similarity*r2.Rating)/sum(r1.Similarity)+log(count(r2)) as score\n    ORDER BY score DESC\n''',params = {'id':2})\n```"]