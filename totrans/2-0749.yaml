- en: Do All the Roads Lead to Rome?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/do-all-the-roads-lead-to-rome-5b6756ce7d52](https://towardsdatascience.com/do-all-the-roads-lead-to-rome-5b6756ce7d52)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/ddb463a3b8ecd8ace22b540dd4a9f1a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Quantifying the Ancient Question with Python, Network Science, and Geospatial
    Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@janosovm?source=post_page-----5b6756ce7d52--------------------------------)[![Milan
    Janosov](../Images/77b62460041f66ec4585a81baef81a03.png)](https://medium.com/@janosovm?source=post_page-----5b6756ce7d52--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5b6756ce7d52--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5b6756ce7d52--------------------------------)
    [Milan Janosov](https://medium.com/@janosovm?source=post_page-----5b6756ce7d52--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5b6756ce7d52--------------------------------)
    ·7 min read·Oct 8, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: 'I recently came across with an exciting dataset titled [*Roman Road Network
    (version 2008)*](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi%3A10.7910%2FDVN%2FTI0KAU)on
    Harvard’s Dataverse: the historical road networks of the Roman Empire in a perfect
    GIS format! Additionally, I have been working on a project about public transport
    networks and how to identify the hotspots and bottlenecks of such a network network
    science. Then I quickly realized that by putting these all together, I could quickly
    answer this age-old question and see how central the area of Rome indeed was back
    in the day.'
  prefs: []
  type: TYPE_NORMAL
- en: '*In this article, all images were created by the author.*'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Read and visualize the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, let’s use GeoPandas and Matplotlib to load and explore the Roman road
    network data quickly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/236c8aec20f72cad735368de3904be4b.png)'
  prefs: []
  type: TYPE_IMG
- en: Preview of the [*Roman Road Network (version 2008)*](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi%3A10.7910%2FDVN%2FTI0KAU)
    *dataset.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Now visualize it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/afae17af9df7767171eae21ae9b0eb98.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualization of the [*Roman Road Network (version 2008)*](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi%3A10.7910%2FDVN%2FTI0KAU)
    *dataset.*
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Transform the road network into a Graph object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous figure shows the road network as a bunch of line polygons. However,
    to be able to quantify the importance of, for instance, Rome, I am planning to
    do some graph computations. This means that I need to transform these line strings
    into a graph.
  prefs: []
  type: TYPE_NORMAL
- en: The [OSMNx](https://osmnx.readthedocs.io/en/stable/user-reference.html) package
    is just right for it — at the intersection of geospatial data tools and the famous
    graph analytics library, NetworkX. In particular, I followed [this thread](https://stackoverflow.com/questions/65496981/osmnx-graph-from-gdfs-keyerror-x-when-converting-a-geopackage-to-a-graph)
    to derive a node and an edge table from the original dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Result of this cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/421a9fd392412bc14151312b42e3dd97.png)'
  prefs: []
  type: TYPE_IMG
- en: Preview of the edge table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Result of this cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e4a19e068051b341b2e140c79a0049b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Preview of the node table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: So here, I managed to transform the GIS data file into a network object with
    5122 nodes and 7154 edges. Now, I would like to take a look. One can visualize
    networks with NetworkX as well. However, I prefer to go for the open-source software
    [Gephi](https://gephi.org). It offers more flexibility and better visual-fine-tuning
    options. Let’s transform G into a Gephi-compatible file and export it — in this
    version, I will work with an unweighted, undirected graph.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Additionally, I create a data datable called coordiantes.csv in which I save
    the coordinates of each node (crossing) of the road network.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Visualizing the network in Gephi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The exact how-to for visualizing networks in Gephi is worth an entire session
    in itself, so here, I would instead show the result.
  prefs: []
  type: TYPE_NORMAL
- en: In this visualization, each node corresponds to an intersection, color encodes
    the so-called network communities (densely interlinked subgraphs), while nodes
    are sized according to their betweenness centrality. Betweenness is a network
    centrality measure that quantifies the bridge role of a node. Therefore, the larger
    a node, the more central it is.
  prefs: []
  type: TYPE_NORMAL
- en: On the visual, its also interesting to see how geography drives the clusters
    and how surprisingly Italy stands as its own as well, probably because of the
    much denser internal road network.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ec0863f4c4ecc54761e71e3d75f8a184.png)'
  prefs: []
  type: TYPE_IMG
- en: The road network of the Roman Empire. Each node corresponds to one marked intersection,
    node colors encode network communities, and node sizes are proportional to their
    betweenness centralities.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Network centralities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After enjoying the visuals, let’s get back to the graph itself and quantify
    it. Here, I will compute the total degree of each node, measuring the number of
    connections it has, and the unnormalized betweenness centrality of each node,
    counting the total number of shortest paths crossing each node.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, I have the importance scores of each crossing. Additionally, in the *nodes*
    table, we also have their location — now it’s time to go for the main question.
    For this, I quantify the importance of each node falling into the admin boundaries
    of Rome. For this, I will need the admin boundaries of Rome, which is relatively
    easy to get from OSMnx (note: Rome today is probably different from Rome back
    in the day, but approximatively, it should be fine).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/840a0c4be205eb0304eed02f03817e39.png)'
  prefs: []
  type: TYPE_IMG
- en: The admin boundaries of Rome.
  prefs: []
  type: TYPE_NORMAL
- en: Also, on the visuals, it’s pretty clear that Rome is not there as a single node
    in the road network; instead, many are nearby. So we ned some sort of binning,
    spatial indexing, which helps us group all road network nodes and intersections
    belonging to Rome. Additionally, this aggregation would be desired to be comparable
    across the Empire. This is why, instead of just mapping nodes into the admin area
    of Rome, I will go for Uber’s [H3](https://www.uber.com/en-HU/blog/h3/) hexagon
    binning and create hexagon grids. Then, map each node into the enclosing hexagon
    and compute the aggregated importance of that hexagon based on the centrality
    scores of the enclosed network nodes. Finally, I will discuss how the most central
    hexagons overlay with Rome.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s get the admin area of the Roman Empire in an approximative way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/90850b325495b1544320452cd02ed8cb.png)'
  prefs: []
  type: TYPE_IMG
- en: A subset of network nodes and the enclosing concave hull.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s split the Empire’s polygon into a hexagon grid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5a82f64bb78bd82dbfb69501b4e38c5a.png)'
  prefs: []
  type: TYPE_IMG
- en: The hexagon grid of the Roman Empire.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, map the road network nodes into hexagons and attach the centrality scores
    to each hexagon. Then. I aggregate the importance of each node within each hexagon
    by summing up their number of connections and the number of shortest paths crossing
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bdff5f3c67ff5eae83c3c8c561654656.png)'
  prefs: []
  type: TYPE_IMG
- en: Preview of the aggregated hexagon grid table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, combine the aggregated centrality scores with the hexagon map of the
    Empire:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And visualize it. In this visual, I also add the empty grid as a base map and
    then color each grid cell based on the total importance of the road network nodes
    within. This way, the coloring will highlight the most critical cells in green.
    Additionally, I added the polygon of Rome in white. First, colored by degree:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7ef4612630cbd4fefa1253404df2f259.png)'
  prefs: []
  type: TYPE_IMG
- en: The hexagon map of the Roman Empire, each hexagon colored based on the total
    degree of the enclosed road network nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, colored by betweenness:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/91816155619376b4cf17186dd1e87c51.png)'
  prefs: []
  type: TYPE_IMG
- en: The hexagon map of the Roman Empire, each hexagon colored based on the total
    shortest paths (betweenness) of the enclosed road network nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we arrive at a reassuring conclusion. If color the hexagon cells based
    on their cumulated degree, the area of Rome wins by far. If we color the hexagons
    based on betweenness, the image is similar — Rome dominates again. One add-on
    here is that the highway connecting Rome with the Middle East also emerges as
    a critical, high-betweenness segment.
  prefs: []
  type: TYPE_NORMAL
- en: '**tl;dr network science also says that all the roads led to Rome!**'
  prefs: []
  type: TYPE_NORMAL
