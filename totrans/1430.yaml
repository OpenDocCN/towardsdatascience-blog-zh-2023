- en: 'Lists, Tuples, Dictionaries, And Data Frames in Python: The Complete Guide'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/lists-tuples-dictionaries-and-data-frames-in-python-the-complete-guide-7ab54d4819ee](https://towardsdatascience.com/lists-tuples-dictionaries-and-data-frames-in-python-the-complete-guide-7ab54d4819ee)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: All you need to know to master the most used data structures in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://federicotrotta.medium.com/?source=post_page-----7ab54d4819ee--------------------------------)[![Federico
    Trotta](../Images/e997e3a96940c16ab5071629016d82fd.png)](https://federicotrotta.medium.com/?source=post_page-----7ab54d4819ee--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7ab54d4819ee--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7ab54d4819ee--------------------------------)
    [Federico Trotta](https://federicotrotta.medium.com/?source=post_page-----7ab54d4819ee--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7ab54d4819ee--------------------------------)
    ·16 min read·May 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/30c2615c37ccc11a8c930496d8e8e34a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Pexels](https://pixabay.com/it/users/pexels-2286921/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1284475)
    on [Pixabay](https://pixabay.com/it//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1284475)
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve started learning Python, whether you want to be a Software Engineer
    or a Data Scientist, you absolutely need to master data structures.
  prefs: []
  type: TYPE_NORMAL
- en: Python has a lot of data structures that allow us to store data. In this article,
    we’ll dive into the most used ones. So, if you’re starting your career and need
    to learn data structures, then this article is definitely for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what you’ll find here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Definition and creation examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Python, a list is a collection of ordered elements that can be of any type:
    strings, integers, floats, etc…'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a list, the items must be inserted between square brackets and separated
    by a comma. For example, here’s how we can create a list of integers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'But lists can also have “mixed” types stored inside them. For example, let’s
    create a list with both integers and strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a list, we can also use the Python built-in function `list()`. This
    is how we can use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This built-in function is very useful in some particular cases. For example,
    let’s say we want to create a list of numbers in the range (1–10). Here’s how
    we can do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, let’s see how we can manipulate lists.
  prefs: []
  type: TYPE_NORMAL
- en: Lists manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Thanks to the fact that lists are mutable, we have lots of possibilities to
    manipulate them. For example, let’s say we have a list of names, but we made a
    mistake and we want to change one. Here’s how we can do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: So, in the above example, we’ve changed the first name of the list from James
    to Alexander.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, suppose we’ve forgotten a name. We can add it to our list like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If we need to concatenate two lists, we have two possibilities: the `concatenate`
    method or the `extend()`one. Let’s see them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'So, this method creates a list that is the sum of other lists. Let’s see the
    `extend()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the results are the same, but the syntax is different. This method
    extends `list1` with `list2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to remove elements, we have two possibilities: we can use the `remove()`
    method or `del`. Let’s see them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s see the other method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: So, we get the same results with both methods, but `remove()` gives us the possibility
    to explicitly write the element to remove, while `del` needs to access the position
    of the element of the list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: List comprehension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a lot of cases where we need to create lists starting from existing
    lists, generally applying some filters to the existing data. To do so, we have
    two possibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: We use loops and statements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We use list comprehension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Practically, they are both the same way to write the same thing, but list comprehension
    is more concise and elegant.
  prefs: []
  type: TYPE_NORMAL
- en: 'But before we discuss these methods, you may need a deep overview of loops
    and statements. Here are a couple of articles I wrote in the past that may help
    you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/loops-and-statements-in-python-a-deep-understanding-with-examples-2099fc6e37d7?source=post_page-----7ab54d4819ee--------------------------------)
    [## Loops and statements in Python: A deep understanding (with examples)'
  prefs: []
  type: TYPE_NORMAL
- en: When they appear to be understood, there is something more
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'towardsdatascience.com](/loops-and-statements-in-python-a-deep-understanding-with-examples-2099fc6e37d7?source=post_page-----7ab54d4819ee--------------------------------)
    [](/python-loops-a-complete-guide-on-how-to-iterate-in-python-b29e0d12211d?source=post_page-----7ab54d4819ee--------------------------------)
    [## Python Loops: A Complete Guide On How To Iterate in Python'
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging the power of loops in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/python-loops-a-complete-guide-on-how-to-iterate-in-python-b29e0d12211d?source=post_page-----7ab54d4819ee--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s see a couple of examples using loops and statements directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we have a shopping list. We want our program to print that we love
    one fruit and that we don’t like the others on the list. Here’s how we can do
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Another example could be the following. Suppose we have a list of numbers and
    we want to print just the even ones. Here’s how we can do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: So, in the above example, we’ve created a list of numbers. Then, we’ve created
    an empty list that is used after the loop to append all the even numbers. This
    way, we’ve created a list of even numbers from a list with “general” numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now… this way of creating new lists with loops and statements is a little “heavy”.
    I mean: it requires a lot of code. We can gain the same results in a more concise
    way using list comprehension.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to create a list with even numbers we can use list comprehension
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'So, list comprehension creates directly a new list and we define the condition
    inside it. As we can see, we gain the same result as before, but in just one line
    of code: not bad!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s create a list with comments on the fruit I love (and the fruit I
    don’t) with list comprehension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: So, we gained the same result as before, but with just a line of code. The only
    difference is that here we’ve printed a list (because list comprehension creates
    one!), while before we just printed the results.
  prefs: []
  type: TYPE_NORMAL
- en: List of lists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is also the possibility to create lists of lists, that are lists nested
    into one list. This possibility is useful when we want to represent listed data
    as a unique list.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider we want to create a list of students and their grades.
    We could create something like that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a useful notation if, for example, we want to calculate the mean grade
    for each student. We can do it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Tuples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tuples are another data structure type in Python. They are defined with round
    brackets and, as lists, can contain any data type separated by a comma. So, for
    example, we can define a tuple like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The difference between a tuple and a list is that a tuple is **immutable**.
    This means that the elements of a tuple can not be changed. So, for example, if
    we try to append a value to a tuple we get an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: So, since we can’t modify tuples, they are useful when we want our data to be
    immutable; for example, in situations where we don’t want to make mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: 'A practical example may be the cart of an e-commerce. We may want this kind
    of data to be immutable so that we don’t make any mistakes when manipulating it.
    Imagine someone bought a shirt, a pair of shoes, and a watch from our e-commerce.
    We may report this data with quantity and price into one tuple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Of course, to be precise, this is a tuple of tuples.
  prefs: []
  type: TYPE_NORMAL
- en: Since tuples are immutable, they are more efficient in terms of performance,
    meaning they save our computer’s resources. But when it comes to manipulation,
    we can use the exact same code as we’ve seen for lists, so we won’t write it again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, similarly to lists, we can create a tuple with the built-in function
    `tuple()` like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Dictionaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A dictionary is a way to store data that are coupled as keys and values. This
    is how we can create one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: So, we create a dictionary with curly brackets and we store in it a couple of
    keys and values separated by a colon. The couples keys-values are then separated
    by a comma.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s see how we can manipulate dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: Dictionaries manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Both keys and values of a dictionary can be of any type: strings, integers,
    or floats. So, for example, we can create a dictionary like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'But we can create one also like that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Choosing the type for values and keys depends on the problem we need to solve.
    Anyway, considering the dictionary we’ve seen before, we can access both values
    and keys like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: So, if our dictionary is called `numbers` we access its key with `numbers.keys()`.
    And with `numbers.values()` we access its values. Also, note that we have created
    a list with the keys and a tuple with the values using the notation we’ve seen
    before.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, we can also iterate over dictionaries. For example, suppose we want
    to print the values that are greater than a certain threshold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Like lists, dictionaries are mutable. So, if we want to add a value to a dictionary
    we have to define the key and the value to add to it. We can do it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To modify a value of a dictionary, we need to access its key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'To delete a pair key-value from a dictionary, we need to access its key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Nested dictionaries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have seen before that we can create lists of lists and tuples of tuples.
    Similarly, we can create nested dictionaries. Suppose, for example, we want to
    create a dictionary to store the data related to a class of students. We can do
    it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: So, the data of each student are represented as a dictionary and all the dictionaries
    are stored in a unique dictionary, representing the classroom. As we can see,
    the values of a dictionary can even be lists (or tuples, if we’d like). In this
    case, we’ve used lists to store the grades of each student.
  prefs: []
  type: TYPE_NORMAL
- en: 'To print the values of one student, we just need to remember that, from the
    perspective of the classroom dictionary, we need to access the key and, in this
    case, the keys are the students themselves. This means we can do it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Dictionaries comprehension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dictionary comprehension allows us to create dictionaries concisely and efficiently.
    It’s similar to list comprehension but, instead of creating a list, it creates
    a dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we have a dictionary where we have stored some objects and their prices.
    We want to know the objects that cost less than a certain threshold. We can do
    it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'So, the syntax to use dictionary comprehension is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Where iterable is any iterable Python object. It can be a list, a tuple, another
    dictionary, etc…
  prefs: []
  type: TYPE_NORMAL
- en: Creating dictionaries with the “standard” method would require a lot of code,
    with conditions, loops, and statements. Instead, as we can see, dictionary comprehension
    allows us to create a dictionary, based on conditions, with just one line of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dictionary comprehension is especially useful when we need to create a dictionary
    retrieving data from other sources or data structures. For example, say we need
    to create a dictionary retrieving values from two lists. We can do it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Data frames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/04d94eadfc725ebd55688664c54ce861.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A data frame is the representation of tabular data. Image from the Panda’s
    website here: [https://pandas.pydata.org/docs/getting_started/index.html](https://pandas.pydata.org/docs/getting_started/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A data frame is a two-dimensional data structure consisting of columns and
    rows. So, it is somehow similar to a spreadsheet or a table in an SQL database.
    They have the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: Each row represents an individual observation or record.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each column represents a variable or a specific attribute of the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They have labeled rows (called indexes) and columns, making it easy to manipulate
    the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The columns can contain different types of data, like integers, strings, or
    floats. Even a single column can contain different data types.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While data frames are the typical data structure used in the context of Data
    Analysis and Data Science, it is not uncommon that a Python Software Engineer
    may need to manipulate a data frame, and this is why we’re having an overview
    of data frames.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how a data frame appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9a79c8ab7583d84cf5c90c917a03e7aa.png)'
  prefs: []
  type: TYPE_IMG
- en: A data frame. Image by Federico Trotta.
  prefs: []
  type: TYPE_NORMAL
- en: So, on the left (in the blue rectangle) we can see the indexes, meaning the
    row counts. We can then see that a data frame can contain different types of data.
    In particular, the column “Age” contains different data types (one string and
    two integers).
  prefs: []
  type: TYPE_NORMAL
- en: Basic data frames manipulation with Pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While recently a new library to manipulate data frames called “Polars” started
    circulating, here we’ll see some data manipulation with Pandas which is still
    the most used as of today.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, generally, we can create data frames by importing data from `.xlsx`
    or `.cvs` files. In Pandas we can do it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to create a data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This is the data frame we’ve shown above. So, as we can see, we first create
    a dictionary, and then we convert it to a data frame with the method `pd.DataFrame()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have three possibilities to visualize a data frame. Suppose we have a data
    frame called `df`:'
  prefs: []
  type: TYPE_NORMAL
- en: The first one is `print(df)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second one is `df.head()` that will show the first 5 rows of our data frame.
    In case we have a data frame with a lot of rows, we can show more than the first
    five. For example, `df.head(20)` shows the first 20.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The third one is `df.tail()` that works exactly like `head()`, but this shows
    the last rows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the side of visualization, using the above `df`, this is what `df.head()`
    shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c29ad0eb546983665b1aae6dc4c6c565.png)'
  prefs: []
  type: TYPE_IMG
- en: What df.head() shows. Image by Federico Trotta.
  prefs: []
  type: TYPE_NORMAL
- en: 'And this is what `print(df)` shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b2673cd6325428d6a8b64a2c8c52618e.png)'
  prefs: []
  type: TYPE_IMG
- en: What print(df) shows. Image by Federico Trotta.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of small data sets like this one, the difference is only a matter
    of taste (I prefer `head()` because it “shows the tabularity” of data). But in
    the case of large data sets, `head()` is way much better. Try it, and let me know!
  prefs: []
  type: TYPE_NORMAL
- en: Consider that Pandas is a very wide library, meaning it allows us to manipulate
    tabular data in a variety of ways, so it’d need to be treated alone. Here we want
    to show just the very basics, so we’ll see how we can add and delete a column
    (the columns of a data frame are also called “Pandas series”).
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to add a column to the data frame `df` we’ve seen above that
    is telling us if people are married or not. We can do it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'And showing the head we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cc1912fe5f8149e37fcfe4b078ec6221.png)'
  prefs: []
  type: TYPE_IMG
- en: The data frame df with the marital status. Image by Federico Trotta.
  prefs: []
  type: TYPE_NORMAL
- en: 'To delete one column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'And we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2da1e2c02460c0505484f6ac000518ee.png)'
  prefs: []
  type: TYPE_IMG
- en: The data frame without the column related to employment data. Image by Federico
    Trotta.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we need to use `axis=1` because here we are telling Pandas to remove
    columns and since a data frame is a two-dimensional data structure, `axis=1` represents
    the vertical direction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, if we want to drop a row, we need to use `axis=0`. For example, suppose
    we want to delete the row associated with the index 1 ( that is the second row
    because, again, we start counting from 0):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'And we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/17e4b949cc3b9e2e85656ae2e5e4e0d6.png)'
  prefs: []
  type: TYPE_IMG
- en: The data frame without the second row. Image by Federico Trotta.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we’ve seen the most used data structures in Python. These are not the
    only ones, but surely the most used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, there is no right or wrong in using one rather than another: we just
    need to understand what data we need to store and use the best data structure
    for this type of task.'
  prefs: []
  type: TYPE_NORMAL
- en: I hope this article helped you understand the usage of these data structures
    and when to use them.
  prefs: []
  type: TYPE_NORMAL
- en: '**FREE PYTHON EBOOK:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Started learning Python Data Science but struggling with it? [***Subscribe
    to my newsletter and get my free ebook: this will give you the right learning
    path to follow to learn Python for Data Science with hands-on experience.***](https://federico-trotta.ck.page/a3970f33f4)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enjoyed the story? Become a Medium member for 5$/month [through my referral
    link](https://medium.com/@federicotrotta/membership): I’ll earn a small commission
    to no additional fee to you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@federicotrotta/membership?source=post_page-----7ab54d4819ee--------------------------------)
    [## Join Medium with my referral link - Federico Trotta'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Federico Trotta (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@federicotrotta/membership?source=post_page-----7ab54d4819ee--------------------------------)
  prefs: []
  type: TYPE_NORMAL
