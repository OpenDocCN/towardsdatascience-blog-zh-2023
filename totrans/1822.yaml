- en: Securing your Containerised Models and Workloads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/securing-your-containerised-models-and-workloads-3bff4d90a07b](https://towardsdatascience.com/securing-your-containerised-models-and-workloads-3bff4d90a07b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Switch to a non-root user!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@teosiyang?source=post_page-----3bff4d90a07b--------------------------------)[![Jake
    Teo](../Images/9687f43822fab69befb750a8ec58516d.png)](https://medium.com/@teosiyang?source=post_page-----3bff4d90a07b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3bff4d90a07b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3bff4d90a07b--------------------------------)
    [Jake Teo](https://medium.com/@teosiyang?source=post_page-----3bff4d90a07b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3bff4d90a07b--------------------------------)
    ·8 min read·Oct 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Containerisation is now the *de facto* means of deploying many applications,
    with Docker being the forefront software driving its adoption. With its popularity
    also comes the increased risk of attacks [1]. Hence it will serve us well to secure
    our docker applications. The most fundamental means of doing this is to ensure
    that we set the user within our containers as a non-root user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Why use Non-Root?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Or rather, why not use the root user? Let’s take an example of a dummy architecture
    like the one below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f13742acc9199c79964e30e62bc8eac1.png)'
  prefs: []
  type: TYPE_IMG
- en: A hacker entering a container with root access. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Security is often viewed in a multi-layered approach. If an attacker manages
    to enter a container, the permissions it has as a user will be the first layer
    of defence. If the container user is assigned to have root access, the attacker
    can have free control of everything within the container. With such broad access,
    it can also exploit any potential vulnerabilities present and using that, potentially
    escape out to the host, and gain full access access to all connecting systems.
    The consequences are severe, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: retrieve the secrets stored
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: intercept and disrupt your traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: run malicious services like crypto-mining
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gain access to any connecting sensitive services like databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/1698de8e7b318fe8852897900e5f7418.png)'
  prefs: []
  type: TYPE_IMG
- en: The attacker can potentially transverse through your infrastructure services
    with root access. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Damn, that sounds really scary! Well, the solution is simple, change your containers
    to a non-root user!
  prefs: []
  type: TYPE_NORMAL
- en: '*Before we even go to the rest of the article, if you do not have a good grasp
    of Linux permissions and access rights, do take a look at my previous* [*article*](https://medium.com/@teosiyang/securing-linux-servers-with-two-commands-de5b565dc104)
    *[2].*'
  prefs: []
  type: TYPE_NORMAL
- en: What You Can & Cannot Do as a Default Non-Root User
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s attempt to create a simple Docker application with a default non-root
    user. Use the `Dockerfile` below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Build the image and create a container with it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now that you are inside the container, let’s try a few commands. So what are
    the things that you cannot do? You can see that all kinds of writing and installation
    permissions are not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/495c8c4df0bda8034359b37a6672190e.png)'
  prefs: []
  type: TYPE_IMG
- en: Things you cannot do as a default non-root user. Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: On the opposite spectrum, we can run all kinds of read permissions.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/376c2dc54b91b1e90b06e88235e902d2.png)'
  prefs: []
  type: TYPE_IMG
- en: Read commands are ok. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Because we have python installed, it is a little unique. If we `ls -l $(which
    python)` we can see that the python interpreter has full permissions. Thus, it
    can execute existing python files like the `example.py` file we created initially
    in the `Dockerfile`. We can even enter into the python console and run simple
    commands. However, as other system write permissions have been removed when we
    switch to the non-root user, you can see that we cannot create and modify the
    scripts, or use python to run write commands.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a73482545f95e2efa3fc2e68d391bf71.png)'
  prefs: []
  type: TYPE_IMG
- en: Existing python scripts can be executed, but nothing else. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: While system-wide restrictions are good for security, there will be many instances
    whereby write permissions for specific files and directories are required, and
    we need to cater for such allowances.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, I will give examples of four scenarios in a machine
    learning operations lifecycle. With these examples, one should be able to gain
    an understanding of how to implement for most other instances.
  prefs: []
  type: TYPE_NORMAL
- en: The Four Scenarios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 1) Serve a Model from Host — Read Only
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When serving a model, it involves an inference and serving script to load the
    model and expose it via an API (e.g., Flask, FastAPI) to accept inputs. The model
    is sometimes loaded from the host machine, and separated from the image so that
    the image size is optimally small, and any reload of the image will be optimally
    quick without repeated model downloads. The model is then passed into the container
    via a [bind-mount](https://docs.docker.com/storage/bind-mounts/)volume, to be
    loaded and served.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d2429a66f49352779768b059e20b622d.png)'
  prefs: []
  type: TYPE_IMG
- en: Serving a model only requires read permissions. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: This is probably the least cumbersome way to implement a non-root user because
    only read permission is required, which by default is granted to all users. Below
    is a sample `Dockerfile` of how that is done.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It has two simple commands to first create a new system user called `nonroot`.
    Second, it is then switched from the root to the `nonroot`user just before the
    last `CMD` line. This is important as a default non-root user does not have any
    write and execute permissions, so it cannot install, copy or manipulate files
    that are required as seen in the earlier steps.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to assign a non-root user in Docker, let’s go to the next
    step.
  prefs: []
  type: TYPE_NORMAL
- en: '**2) Run Data Processing Pipelines — Write within Container**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, we just want to store temporary files to execute some jobs, let’s
    say, some data preprocessing work. This consists of adding and deleting files.
    We can do such tasks within the container since the files are not persistent.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9c3a138c2b9fa01285a44f72be81bbae.png)'
  prefs: []
  type: TYPE_IMG
- en: Writing files. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: However, we will need write permissions if we are using a non-root user. To
    do that, we will need to use the command `chown` (change owner) and assign ownership
    to the `nonroot` user for the specific folder where write access is required.
    With that done, we can then switch the user to `nonroot` .
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 3) Libraries Automatically Writing Files — Write within Container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous example shows how to write files which we created ourselves. However,
    it is also common for the libraries you use to create files and directories automatically.
    You will only know they are created when you try running the container and it
    is denied permission to write.
  prefs: []
  type: TYPE_NORMAL
- en: I will show you two such examples, one from `supervisor`, which is used to manage
    multiple processes, and another from `huggingface-hub`, for downloading models
    from huggingface. Permission errors like these will be seen if we switch to a
    non-root user.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/17a5f1d2032ec06efbec72679a83a162.png)'
  prefs: []
  type: TYPE_IMG
- en: Supervisor prevented from creating a log file. Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d3417206526641e6649a202d416e4b65.png)'
  prefs: []
  type: TYPE_IMG
- en: Supervisor prevented from storing pid in the file. Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c337cb2e7554b0f0f10d4b048a734c1b.png)'
  prefs: []
  type: TYPE_IMG
- en: Huggingface Hub prevented from downloading the model file. Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: For the two `supervisor` files, we can create them as empty files first, and
    assign ownership rights to them. For the `huggingface-hub` download issue, it
    has already been hinted in the error log that we can change the download directory
    via the `TRANSFORMERS_CACHE` variable, hence we can first assign the directory
    variable, create the directory, and then assign ownership.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Of course, there will be other examples that may slightly differ from what I
    show here, but the concept of allowing the least permissions to write will be
    the same.
  prefs: []
  type: TYPE_NORMAL
- en: 4) Save Trained Models — Write to Host
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s say we are using a container to train a model, and we want that model
    to be written to the host, e.g., to be picked up by another task for benchmarking
    or deployment. For this instance, we will need to write the model file out by
    linking a container directory to the host directory, also known as a bind mount.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3df3be7a331f921dfa24f3ec31b6f674.png)'
  prefs: []
  type: TYPE_IMG
- en: Writing a model file out to the host. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to create a group and user for `nonroot`, specifying a unique
    ID for each, where for this case, we use `1001` (any number from 1000 is fine).
    Then, a model directory to store the model is created.
  prefs: []
  type: TYPE_NORMAL
- en: A difference here compared to Scenario 2 is that `chown` is not required for
    the model directory to write. Why?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is because **the permission of the bind-mounted directory is determined
    by the host directory**. Hence, we need to again create the same user in the host,
    ensuring that the user id is the same. The model directory is then created in
    the host and the `nonroot` user is granted the owner permissions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Bind mount is usually specified in the `docker-compose.yml` file or `docker
    run` command to enable more flexibility. Below is an example of the former.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'And for the latter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Run either of them, and you will see that your non-root user can execute the
    script without any issues.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how we can assign non-root user and still make the containers work
    with their desired tasks. This is mainly relevant when specific write permissions
    are required. We just need to know two fundamental concepts.
  prefs: []
  type: TYPE_NORMAL
- en: For writing permissions in the container, `chown` in the `Dockerfile`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For writing permissions for a bind-mount, create the same non-root user in the
    host and `chown` in the host directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need to enter into the docker container and run some tests as a root
    user, we can use the following command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] Wong et al. (2023) [On the Security of Containers: Threat Modeling, Attack
    Analysis, and Mitigation Strategies](https://www.sciencedirect.com/science/article/abs/pii/S0167404823000500).
    *Computers & Security*, Vol. 128.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2] My previous post on Linux permissions and access rights: [https://medium.com/@teosiyang/securing-linux-servers-with-two-commands-de5b565dc104](https://medium.com/@teosiyang/securing-linux-servers-with-two-commands-de5b565dc104)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
