- en: A Quick Start to Connecting to PostgreSQL and Pulling Data into Pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/a-quick-start-to-connecting-to-postgresql-and-pulling-data-into-pandas-26fbe7c0fcd5](https://towardsdatascience.com/a-quick-start-to-connecting-to-postgresql-and-pulling-data-into-pandas-26fbe7c0fcd5)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Get you on your way to data analysis and model building quickly by pulling PostgreSQL
    data into Pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@broepke?source=post_page-----26fbe7c0fcd5--------------------------------)[![Brian
    Roepke](../Images/0b7ef72cbfc9acda69fde14127d65dcf.png)](https://medium.com/@broepke?source=post_page-----26fbe7c0fcd5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----26fbe7c0fcd5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----26fbe7c0fcd5--------------------------------)
    [Brian Roepke](https://medium.com/@broepke?source=post_page-----26fbe7c0fcd5--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----26fbe7c0fcd5--------------------------------)
    ·4 min read·Feb 5, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b4223994373e20c953c2c141aa932517.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Sergi Ferrete](https://unsplash.com/@sergiferrete?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: What is PostgreSQL?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PostgreSQL](https://www.postgresql.org) is a powerful **relational database
    management system** (RDBMS) that many organizations use. Connecting to it is easy,
    and thanks to the great Python ecosystem, getting your data into a Data Frame
    in Pandas is just as easy. Let’s look at a simple example that will help you get
    started.'
  prefs: []
  type: TYPE_NORMAL
- en: Running PostgreSQL Locally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One simple way to run PostgreSQL locally is to use [Docker](https://www.docker.com).
    If you don’t have Docker installed, you can download it [here](https://www.docker.com/products/docker-desktop).
    Once you have Docker installed, you can run the following command to start a PostgreSQL
    container.
  prefs: []
  type: TYPE_NORMAL
- en: Head to the [Docker Hub](https://hub.docker.com/) and search for `postgres`.
    You'll see several different images. We want the `postgres` image; yo can pull
    it down with the following command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After that, you can run the following command (per the documentation on Docker
    Hub) to start a container.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can connect to the DB using any supported SQL tool, such as [SQL Workbench](https://www.sql-workbench.eu/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f6cd7e9570e991d39538bb28e4598e7e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Running the above commands will create a database called `MAIN` and a table
    called `CONTACTS`. It will also insert a single row into the table and then select
    all the rows from the table; that should get you started with a simple PG setup
    locally.
  prefs: []
  type: TYPE_NORMAL
- en: Imports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we’ll do is import the libraries we will need. We will need
    the `psycopg2` library to connect to PostgreSQL and the `pandas` library to work
    with our data. in addition; we're going to use `pandas`, `os`, `urllib`, and `sqlalchemy`
    to help us connect to our database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Next, we want to ensure we’re not hard-coding our sensitive information but
    rather pulling it from environment variables. If you’d like to learn more about
    this process, check out this [article](https://www.dataknowsall.com/envvar.html).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to ensure any information in our connection string is **properly
    URL encoded**, like the username and password, which can be easily achieved with
    the `quote_plus` function from `urllib`. Let's take a quick look at a sample password
    and how it is encoded.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Next, we can create our **connection string** that contains all the information
    needed to connect to our database. We will use string format ( `f` in front of
    the string) to insert variables. We will also use the `quote_plus` function to
    encode our username and password.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In addition to the connection string, we will also create an **SQLAlchemy engine**.
  prefs: []
  type: TYPE_NORMAL
- en: That’s it! Assuming you didn’t receive an error, you are now connected to your
    PostgreSQL database. Let’s look at how we can pull data into a Pandas Data Frame.
  prefs: []
  type: TYPE_NORMAL
- en: First, we’ll define a query in the form of a string. A best practice here is
    to use triple quotes (`"""`), allowing us to write our query over multiple lines
    as well as avoid conflicts when our query itself contains quotes, such as `WHERE
    FIRST_NAME = 'Brian'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will create the connection from the `alchemyEngine` we created earlier.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We will then use the `read_sql` function from `pandas` to pull our data into
    a Data Frame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have a data frame and can display the first few rows and see our
    data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: A best practice is to close your connection when you’re done.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PostgreSQL is a powerful relational database management system (RDBMS) used
    by many companies. We covered connecting to it and getting your data into a Pandas
    data frame. We also discussed some best practices like storing credentials in
    Environment Variables and how to easily URL encode your username and password,
    which often will have characters that are not supported.
  prefs: []
  type: TYPE_NORMAL
- en: '*If you enjoy reading stories like these and want to support me as a writer,
    consider signing up to become a Medium member. It’s $5 a month, with unlimited
    access to thousands of articles. If you sign up using* [*my link*](https://medium.com/@broepke/membership)*,
    I’ll earn a small commission at no extra cost.*'
  prefs: []
  type: TYPE_NORMAL
