- en: How to Style Plots with Matplotlib
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 Matplotlib 样式化图表
- en: 原文：[https://towardsdatascience.com/how-to-style-plots-with-matplotlib-45591394ff98](https://towardsdatascience.com/how-to-style-plots-with-matplotlib-45591394ff98)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-style-plots-with-matplotlib-45591394ff98](https://towardsdatascience.com/how-to-style-plots-with-matplotlib-45591394ff98)
- en: Quick Success Data Science
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速成功的数据科学
- en: Don’t settle for the defaults!
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要满足于默认设置！
- en: '[](https://medium.com/@lee_vaughan?source=post_page-----45591394ff98--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----45591394ff98--------------------------------)[](https://towardsdatascience.com/?source=post_page-----45591394ff98--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----45591394ff98--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----45591394ff98--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@lee_vaughan?source=post_page-----45591394ff98--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----45591394ff98--------------------------------)[](https://towardsdatascience.com/?source=post_page-----45591394ff98--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----45591394ff98--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----45591394ff98--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----45591394ff98--------------------------------)
    ·8 min read·Nov 8, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----45591394ff98--------------------------------)
    ·8分钟阅读·2023年11月8日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/b56ed3118211d9fd51f6edb70d57dec3.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b56ed3118211d9fd51f6edb70d57dec3.png)'
- en: 'Setting the Style (Source: Cole Keister on Unsplash)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 设置样式（来源：Cole Keister 在 Unsplash）
- en: Decades ago, my mother gave me a maroon velour tracksuit as a Christmas present.
    It was a God-awful thing, and I replied that it wasn’t really in style. She snorted
    derisively and said, “*You* set the style! Be a trendsetter!”
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 几十年前，我妈妈给我送了一件栗色天鹅绒运动套装作为圣诞礼物。那真是件糟糕的东西，我回答说这不太流行。她嗤之以鼻地说，“*你*设置了样式！做个潮流引领者！”
- en: Needless to say, I did NOT set the style, but my wife still teases me with the
    “You set the style!” quote. I *do* set the style, however, when using Matplotlib,
    and unlike a velour tracksuit, that’s a good thing.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 不用说，我确实没有设置样式，但我的妻子还是拿“你设置了样式！”这句话来逗我。不过，当使用 Matplotlib 时，我*确实*会设置样式，并且这与穿着天鹅绒运动套装不同，这是一件好事。
- en: For convenience, Python’s Matplotlib library lets you override its default plotting
    options. You can use this powerful feature to not only customize plots but to
    apply consistent, automatic, and reusable styles for reports, publications, and
    presentations.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便，Python 的 Matplotlib 库允许你覆盖其默认绘图选项。你可以利用这个强大的功能，不仅可以自定义图表，还可以为报告、出版物和演示文稿应用一致、自动且可重用的样式。
- en: In this *Quick Success Data Science* project, we’ll take a quick look at how
    to style plots with Matplotlib.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个*快速成功的数据科学*项目中，我们将快速了解如何使用 Matplotlib 样式化图表。
- en: Styling Options in Matplotlib
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Matplotlib 中的样式选项
- en: If you’ve used Matplotlib much, you’ve probably changed the default settings
    for a plot, such as for the color of a line, by passing *new* values to methods
    that made the plot. But what if you want to set these values for *multiple* plots
    *at the same time*, so that all the curves are the same color, or to *cycle through*
    a pre-defined order of colors?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用过 Matplotlib，你可能已经通过向绘图方法传递*新的*值来更改图表的默认设置，例如线条的颜色。但如果你想要为*多个*图表*同时*设置这些值，以便所有曲线颜色相同，或者*循环使用*预定义的颜色顺序，该怎么办？
- en: 'Well, you can do this by using either:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，你可以通过以下两种方式实现：
- en: Runtime Configuration Parameters
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行时配置参数
- en: Style Files
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 样式文件
- en: Style Sheets
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 样式表
- en: Let’s look at each of these in turn.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们依次查看这些内容。
- en: Changing Runtime Configuration Parameters
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改运行时配置参数
- en: One way to style plots is to set the parameters at *runtime*, using an instance
    of the `RcParams` class. The name of this class stands for *runtime configuration
    parameters*, and you run it from a notebook, script, or console using either the
    `pyplot` approach or the object-oriented style. (If you’re not familiar with these
    two methods, see my article, [*Demystifying Matplotlib*](https://medium.com/towards-data-science/demystifying-matplotlib-3895ab229a63)).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一种样式化图形的方法是*运行时*设置参数，使用`RcParams`类的实例。这个类的名称代表*运行时配置参数*，你可以通过`pyplot`方法或面向对象的风格在笔记本、脚本或控制台中运行它。（如果你不熟悉这两种方法，请参阅我的文章，[*解密
    Matplotlib*](https://medium.com/towards-data-science/demystifying-matplotlib-3895ab229a63)）。
- en: The plotting parameters are stored in the `matplotlib.rcParams` variable, which
    is a dictionary-like object. There’s a very long list of configurable parameters,
    which you can view in the Matplotlib [docs](https://matplotlib.org/stable/api/matplotlib_configuration_api.html#matplotlib.rcParams).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 绘图参数存储在`matplotlib.rcParams`变量中，这是一个类似字典的对象。可配置参数的列表非常长，你可以在 Matplotlib [文档](https://matplotlib.org/stable/api/matplotlib_configuration_api.html#matplotlib.rcParams)中查看。
- en: Now, let’s look at a `pyplot` example in which we standardize the size of figures,
    use *red* for all plotted lines, and cycle through two different line styles.
    This means that the first line plotted will always have a certain consistent style
    and that the second line plotted will have another consistent style.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一个`pyplot`的例子，其中我们标准化图形的大小，使用*红色*绘制所有线条，并循环使用两种不同的线条样式。这意味着第一条绘制的线条将始终具有一定的一致样式，而第二条绘制的线条将具有另一种一致样式。
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice here that we also import Matplotlib as `mpl`. Importing Matplotlib in
    this manner gives us access to more features than in the `pyplot` module alone.
    We also import `cycler`. The `Cycler` class will let us specify which colors and
    other style properties we want to cycle through when making multi-data plots.
    You can read more about it [here](https://matplotlib.org/stable/users/explain/artists/color_cycle.html).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们还将 Matplotlib 导入为`mpl`。以这种方式导入 Matplotlib 使我们可以访问比`pyplot`模块更多的功能。我们还导入了`cycler`。`Cycler`类允许我们指定在制作多数据图时要循环的颜色和其他样式属性。你可以在[这里](https://matplotlib.org/stable/users/explain/artists/color_cycle.html)了解更多信息。
- en: To access a property in `rcParams`, you treat it like a dictionary key. You
    can find the valid parameter names by entering `mpl.rcParams.keys()`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问`rcParams`中的属性，你可以将其视为字典键。你可以通过输入`mpl.rcParams.keys()`找到有效的参数名称。
- en: 'In the next three lines, we set the figure size, line color, and line styles:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的三行中，我们设置了图形大小、线条颜色和线条样式：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'NOTE: You can also set parameters through `pyplot`, using syntax like `plt.rcParams[‘lines.color’]
    = ‘black’`.'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：你也可以通过`pyplot`设置参数，使用类似`plt.rcParams[‘lines.color’] = ‘black’`的语法。
- en: To cycle through the line styles, we used the `axes.prop_cycle` key and then
    passed the cycler factory function the parameter (`‘linestyle’`) and a list of
    the styles (solid and dotted). These defaults have now been reset for all plots
    that you will make in the current session.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要循环样式，我们使用了`axes.prop_cycle`键，然后将 cycler 工厂函数传递参数（`‘linestyle’`）和样式列表（实线和虚线）。这些默认设置现在已经被重置为当前会话中你将要制作的所有图形。
- en: 'To test it, let’s generate some data and plot it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试，让我们生成一些数据并绘制它：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/c47e2ef72dd4f2bebea31ae41b9f0bb0.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c47e2ef72dd4f2bebea31ae41b9f0bb0.png)'
- en: The styled plot (by the author)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 样式化的图形（作者）
- en: Normally, this code would produce a plot with two solid lines, one blue and
    one orange. We overrode the defaults, however, so that we got two red lines distinguished
    by different line styles.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这段代码会生成一个有两条实线的图，一个蓝色，一个橙色。然而，我们覆盖了默认设置，因此我们得到了两条红色的线，通过不同的线条样式加以区分。
- en: Note that if you were to plot *three* lines in the previous plot, the *third*
    line would cycle back to using the *solid* line style, and you’d have one dotted
    and two solid lines. If you want three different styles, you’ll need to add the
    extra style to the cycler.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你在前一个图中绘制*三条*线条，*第三*条线将循环回使用*实线*样式，你将有一条虚线和两条实线。如果你想要三种不同的样式，你需要将额外的样式添加到
    cycler 中。
- en: 'For convenience, Matplotlib comes with functions for simultaneously modifying
    multiple settings in a single group using *keyword arguments*. Here’s an example
    where we first restore the default settings and then change the line width:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便，Matplotlib 提供了通过*关键字参数*同时修改一组多个设置的函数。这里是一个例子，我们首先恢复默认设置，然后更改线宽：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/12bbadf7e7230f444f544feb20c758c9.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/12bbadf7e7230f444f544feb20c758c9.png)'
- en: The restyled plot (by the author)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 重新样式化的图形（由作者提供）
- en: In this plot, the default blue-orange color scheme is restored but the line
    width is customized to `5`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个图中，恢复了默认的蓝橙色调，但线条宽度被自定义为`5`。
- en: 'Note that you can also reset the defaults using:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你也可以使用以下命令重置默认值：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating and Using a Style File
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和使用样式文件
- en: You can save changes you make to the Matplotlib defaults in a *file*. This lets
    you standardize plots for a report or presentation and share the customization
    within a project team. It also reduces code redundancy and complexity by letting
    you preset certain plot parameters and encapsulate them in an external file.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将对 Matplotlib 默认设置的更改保存到*文件*中。这可以让你为报告或演示文稿标准化图形，并在项目团队内共享自定义设置。它还通过让你预设某些图形参数并将其封装在外部文件中，从而减少了代码的冗余和复杂性。
- en: 'Let’s create a simple style file that sets some standards for plots, such as
    the figure size and resolution, the use of a background grid, and the typeface
    and size for titles, labels, and ticks. In a text editor, enter the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的样式文件，为图形设置一些标准，如图形大小和分辨率、背景网格的使用，以及标题、标签和刻度的字体和大小。在文本编辑器中，输入以下内容：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For Matplotlib to easily find this file, you need to save it in a specific
    location. First, find the location of the *matplotlibrc* file (where Matplotlib
    stores its defaults) by entering the following in the console:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 Matplotlib 能够轻松找到该文件，你需要将其保存在特定位置。首先，在控制台中输入以下内容以找到*matplotlibrc*文件的位置（Matplotlib
    存储其默认设置的位置）：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here’s the output for my computer (yours will be different):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我电脑上的输出（你的会有所不同）：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This shows you the path to the *mpl-data* folder, which contains the *matplotlibrc*
    file and a folder named *stylelib*, among others. Save your style file into the
    *stylelib* folder as *scientific_styles.mplstyle* (replacing the *.txt* extension).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了到*mpl-data*文件夹的路径，该文件夹包含*matplotlibrc*文件以及一个名为*stylelib*的文件夹等。将样式文件保存到*stylelib*文件夹中，命名为*scientific_styles.mplstyle*（替换*.txt*扩展名）。
- en: 'NOTE: If Matplotlib has trouble finding this file later, you might need to
    restart the kernel.'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：如果 Matplotlib 在后续查找该文件时出现问题，可能需要重新启动内核。
- en: 'Now, let’s use this file to create a standardized plot. After importing `pyplot`,
    use its `style.use()` method to load the style file without its file extension:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用这个文件来创建标准化的图形。导入`pyplot`后，使用其`style.use()`方法加载样式文件而不带文件扩展名：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, generate an empty figure using the object-oriented style:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用面向对象的风格生成一个空图：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/1d89d4842049de6ad6497cee15cda120.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1d89d4842049de6ad6497cee15cda120.png)'
- en: The standardized style (by the author)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 标准化风格（由作者提供）
- en: When you saved your style file, you might have noticed that the *stylelib* folder
    was full of preexisting *mplstyle* files. These files create many different plot
    formats, and you can look through them for clues on how to write your own style
    files. In the next section, we’ll use one of these files to override some of Matplotlib’s
    default values.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当你保存样式文件时，你可能会注意到*stylelib*文件夹中充满了现有的*mplstyle*文件。这些文件创建了许多不同的图形格式，你可以查看它们以获取编写自己样式文件的线索。在下一部分，我们将使用这些文件中的一个来覆盖
    Matplotlib 的一些默认值。
- en: Applying Style Sheets
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用样式表
- en: Besides letting you customize your own plots, Matplotlib provides *pre-defined*
    style sheets that you can import by using `style.use()`. These are the same format
    as the style file you created in the previous section.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 除了让你自定义自己的图形外，Matplotlib 还提供了*预定义*的样式表，你可以通过使用`style.use()`来导入这些样式表。它们的格式与之前创建的样式文件相同。
- en: Style sheets look the same as the *matplotlibrc* file, but within one, you can
    set only `rcParams` that are related to the *actual style of the plot*. This makes
    style sheets portable between different machines because there’s no need to worry
    about uninstalled dependencies. But don’t worry, only a few `rcParams` can’t be
    reset, and you can view a list of these [here](https://matplotlib.org/stable/api/style_api.html#matplotlib.style.use/).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 样式表的外观与*matplotlibrc*文件相同，但在其中，你只能设置与*实际图形样式*相关的`rcParams`。这使得样式表在不同机器之间是可移植的，因为不必担心未安装的依赖项。但不用担心，只有少数`rcParams`不能重置，你可以在[这里](https://matplotlib.org/stable/api/style_api.html#matplotlib.style.use/)查看这些列表。
- en: To see examples of the available style sheets, visit Matplotlib’s [Style Sheet
    Reference page](https://matplotlib.org/stable/gallery/style_sheets/style_sheets_reference.html).
    These examples take the form of a strip of thumbnails, as shown below. Some of
    the style sheets emulate popular plotting libraries like Seaborn and ggplot.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看可用样式表的示例，请访问 Matplotlib 的 [样式表参考页面](https://matplotlib.org/stable/gallery/style_sheets/style_sheets_reference.html)。这些示例以缩略图条带的形式展示，如下所示。一些样式表模仿了流行的绘图库，如
    Seaborn 和 ggplot。
- en: '![](../Images/cce2091300acca7d0b843d50b6450cb3.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cce2091300acca7d0b843d50b6450cb3.png)'
- en: Example of the grayscale style sheet (from matplotlib.org)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 灰度样式表示例（来自 matplotlib.org）
- en: An important style sheet to be aware of is the *seaborn-colorblind* sheet. This
    style sheet uses “colorblind-safe” colors designed for the 5 to 10 percent of
    the population that suffers from color blindness.
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个重要的样式表是 *seaborn-colorblind* 表。这个样式表使用了针对5%到10%有色盲的群体设计的“色盲安全”颜色。
- en: Let’s try out a scatterplot using the *grayscale* style sheet that ships with
    Matplotlib. First, import NumPy and Matplotlib and select the `grayscale` style
    sheet.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用 Matplotlib 附带的 *grayscale* 样式表来绘制散点图。首先，导入 NumPy 和 Matplotlib，并选择 `grayscale`
    样式表。
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, generate some dummy data for making two different point clouds:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为生成两个不同的点云生成一些虚拟数据：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finish by setting up and executing the plot using the `pyplot` approach. Use
    log scales for both axes:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置并执行 `pyplot` 方法来完成图表的绘制。对两个轴使用对数刻度：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/b3e63df8dc9a5322207486ed2ca007da.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b3e63df8dc9a5322207486ed2ca007da.png)'
- en: A plot made with the grayscale style sheet (by the author)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用灰度样式表制作的图（作者提供）
- en: The point locations you see might differ from this figure due to the use of
    randomly generated data.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到的点的位置可能与该图不同，因为使用了随机生成的数据。
- en: If you open the *grayscale.mplstyle* file*,* you’ll see that it looks a lot
    like the *scientific_styles.mplstyle* file that we made in the “Creating and Using
    a Style File” section. So, if an existing style sheet is not quite right for your
    purposes, you can always copy the file, edit it, and save it as a new style sheet!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开 *grayscale.mplstyle* 文件，你会发现它看起来非常像我们在“创建和使用样式文件”部分中制作的 *scientific_styles.mplstyle*
    文件。因此，如果现有的样式表不完全适合你的目的，你总是可以复制该文件，编辑它，并将其保存为新的样式表！
- en: Limiting Styling to Code Blocks
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将样式限制在代码块中
- en: If you want to use a style for only a *specific block* of code, rather than
    your entire script or notebook, the style package provides a context manager for
    limiting your changes to a specific scope. For more on this, see “Temporary styling”
    in the [docs](https://matplotlib.org/stable/users/explain/customizing.html).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想为 *特定代码块* 使用某种样式，而不是整个脚本或笔记本，样式包提供了一个上下文管理器来将更改限制在特定范围内。有关更多信息，请参阅 [文档](https://matplotlib.org/stable/users/explain/customizing.html)中的“临时样式”。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Matplotlib provides three main methods for styling plots. You can change the
    *runtime configuration parameters* within your script*,* make your own *style
    file* and save it in the *stylelib* folder, or use a pre-defined *style sheet*
    from the *stylelib* folder. You can apply these style changes to your entire code
    or to specified code blocks.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 提供了三种主要的方法来为图表设置样式。你可以在脚本中更改 *运行时配置参数*，制作自己的 *样式文件* 并将其保存在 *stylelib*
    文件夹中，或者使用 *stylelib* 文件夹中的预定义 *样式表*。你可以将这些样式更改应用于整个代码或指定的代码块。
- en: Storing your style parameters in a file gives you the ability to share them
    with team members so that everyone’s plots have a consistent, unified look. Besides
    aiding the customization of plots, these techniques let you write cleaner code
    through the process of abstraction.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 将样式参数存储在文件中，可以让你与团队成员共享这些参数，以便每个人的图表都有一致的、统一的外观。除了帮助自定义图表，这些技术还让你通过抽象过程编写更简洁的代码。
- en: Thanks!
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谢谢！
- en: Thanks for reading and please follow me for more *Quick Success Data Science*
    projects in the future. For more Matplotlib tips and tricks, check out Chapter
    19 of my book, [*Python Tools for Scientists*](https://a.co/d/ggipGxL).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读，请关注我以获取未来更多 *快速成功的数据科学* 项目。有关更多 Matplotlib 的技巧和窍门，请查看我的书的第 19 章， [*Python
    工具*](https://a.co/d/ggipGxL)。
- en: '[](https://a.co/d/ggipGxL?source=post_page-----45591394ff98--------------------------------)
    [## Python Tools for Scientists: An Introduction to Using Anaconda, JupyterLab,
    and Python''s Scientific…'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://a.co/d/ggipGxL?source=post_page-----45591394ff98--------------------------------)
    [## Python 工具：使用 Anaconda、JupyterLab 和 Python 科学工具的介绍…'
- en: 'Python Tools for Scientists: An Introduction to Using Anaconda, JupyterLab,
    and Python''s Scientific Libraries…'
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 科学家的Python工具：使用Anaconda、JupyterLab和Python科学库的入门介绍…
- en: a.co](https://a.co/d/ggipGxL?source=post_page-----45591394ff98--------------------------------)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[a.co](https://a.co/d/ggipGxL?source=post_page-----45591394ff98--------------------------------)'
