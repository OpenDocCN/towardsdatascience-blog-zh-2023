- en: Use to_string() to Stop Python from Hiding the Body of the Printed DataFrames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/use-to-string-to-stop-python-from-hiding-the-body-of-the-printed-dataframes-47ce474ea914](https://towardsdatascience.com/use-to-string-to-stop-python-from-hiding-the-body-of-the-printed-dataframes-47ce474ea914)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 3-Minutes Pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What should we do to see the entire printed dataframe after the execution of
    a Python script?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://jianan-lin.medium.com/?source=post_page-----47ce474ea914--------------------------------)[![Yufeng](../Images/8b1a4c165aaac045ea819f850017b7cd.png)](https://jianan-lin.medium.com/?source=post_page-----47ce474ea914--------------------------------)[](https://towardsdatascience.com/?source=post_page-----47ce474ea914--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----47ce474ea914--------------------------------)
    [Yufeng](https://jianan-lin.medium.com/?source=post_page-----47ce474ea914--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----47ce474ea914--------------------------------)
    ·4 min read·Apr 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/82ece6c195a037aa5d625ace0831eddf.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Pascal Müller](https://unsplash.com/@millerthachiller?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes running through a Python script without reporting any errors is not
    the only task of the debugging process. We need to make sure the functions are
    executed as expected. It’s a typical step in the exploratory data analysis to
    check how the data looks like before and after some specific data processing.
  prefs: []
  type: TYPE_NORMAL
- en: So, we need to print out some data frames or essential variables during the
    execution of the script, in order to check whether they are “correct”. However,
    simple print command can only show the top and bottom rows of the data frame sometimes
    (as shown in the example below), which makes the checking procedure unnecessarily
    hard.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, the data frames are in the format of `pandas.DataFrame`, and if you
    use the print command directly, you might get something like this,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/45c899e7e97eae3889f90f12f2b773b3.png)'
  prefs: []
  type: TYPE_IMG
- en: print the top 100 rows (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: You may have already noticed that the middle part of the data frame is hidden
    by three dots. What if we really need to check what the top 100 rows are? For
    example, we want to check the result of a specific step in the middle of a large
    Python script, in order to make sure the functions are executed as expected.
  prefs: []
  type: TYPE_NORMAL
- en: set_option()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most straightforward solutions is to edit the default number of rows
    that Pandas show,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/67428d29db198d387f537af5edec7a1a.png)'
  prefs: []
  type: TYPE_IMG
- en: print the top 100 rows after setting the default number of rows that Pandas
    displays (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: where `set_option` is a method that allows you to control the behavior of Pandas
    functions, which includes setting the maximum number of rows or columns to display,
    as we did above. The first argument `display.max_rows` is to adjust the maximum
    number of rows to display and 500 is the value we set as the maximum row number.
  prefs: []
  type: TYPE_NORMAL
- en: Even though this method is widely used, it’s not ideal to put it inside an executable
    Python file, especially if you have multiple data frames to print and they are
    desired to display different numbers of rows.
  prefs: []
  type: TYPE_NORMAL
- en: For example, I have a script structured as shown,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: we have different numbers of top rows to show through the entire script, and
    sometimes we want to see the entire printed data frame, but sometimes we only
    care about the dimension and structure of the data frame without the need to see
    the entire data.
  prefs: []
  type: TYPE_NORMAL
- en: In such a case, we probably need to use the function `pd.set_option()` to set
    the desired `display` or `pd.reset_option()` to use the default options every
    time before we print a data frame, which makes it very messy and troublesome.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There’s actually a more flexible and effective way of showing the entire data
    frame without specifying the display options for Pandas.
  prefs: []
  type: TYPE_NORMAL
- en: to_string()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`to_string()` directly transfer the `pd.DataFrame` object to a string object
    and when we print it out, it doesn’t care about the display limit from `pandas`
    .'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/398b0574757fa765397fb59aea6ea6a3.png)'
  prefs: []
  type: TYPE_IMG
- en: print the top 100 rows using to_string() (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: We can see above that even though I set the maximum number of rows to display
    as 10, `to_string()` helps us print the entire data frame of 100 rows.
  prefs: []
  type: TYPE_NORMAL
- en: The function, `to_string()` , converts an entire data frame to the `string`
    format, so it can keep all the values and indexes in the data frame in the printing
    step. Since `set_option()` is only effective on pandas objects, our printing `string`
    is not limited by the maximum number of rows to display set earlier.
  prefs: []
  type: TYPE_NORMAL
- en: So, the strategy is that you don’t need to set anything via `set_option()` and
    you only need to use `to_string()` to see the entire data frame. It will save
    you from thinking about which option to set in which part across the script.
  prefs: []
  type: TYPE_NORMAL
- en: Takeaways
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use `set_option('display.max_rows')` when you have a consistent number of rows
    to display across the entire script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `to_string()` if you want to print out the entire Pandas data frame no matter
    what Pandas options have been set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Thanks for reading! Hope you enjoy using the Pandas trick in your work!
  prefs: []
  type: TYPE_NORMAL
- en: Please [subscribe to my Medium](https://jianan-lin.medium.com/subscribe) if
    you want to read more stories from me. And you can also join the Medium membership
    by my [referral link](https://jianan-lin.medium.com/membership)!
  prefs: []
  type: TYPE_NORMAL
