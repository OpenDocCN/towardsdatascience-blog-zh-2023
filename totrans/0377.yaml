- en: 'Beyond Bar Charts: Data with Sankey, Circular Packing, and Network Graphs'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/beyond-bar-charts-data-with-sankey-circular-packing-and-network-graphs-fd1d50478b68](https://towardsdatascience.com/beyond-bar-charts-data-with-sankey-circular-packing-and-network-graphs-fd1d50478b68)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Unconventional visualizations: when and when not to wield their power'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@MahamsMultiverse?source=post_page-----fd1d50478b68--------------------------------)[![Maham
    Haroon](../Images/5a9ac82369ecbf7719b765ec160a70ef.png)](https://medium.com/@MahamsMultiverse?source=post_page-----fd1d50478b68--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fd1d50478b68--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fd1d50478b68--------------------------------)
    [Maham Haroon](https://medium.com/@MahamsMultiverse?source=post_page-----fd1d50478b68--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fd1d50478b68--------------------------------)
    ·12 min read·Aug 26, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2e8aaf8196668f54a02ff892d70ad943.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Firmbee.com](https://unsplash.com/@firmbee?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/jrh5lAq-mIs?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Hello there!
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve delved into the world of data analysis, you’re likely familiar with
    the power of charts like bar graphs, line plots, scatter plots, and pie charts.
    These visuals not only make data more accessible but also enhance understanding
    for various audiences — whether they’re stakeholders, customers, or even yourself,
    seeking insights from the data. However, there are instances where the data complexities
    demand more intricate and captivating displays.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine this scenario: You’re stepping into the shoes of a fledgling data scientist
    at our fictional company MM Awesome Data Inc. The management is grappling with
    the integration of new data sources within the existing data framework and they
    really need to understand the big picture. While a pie chart might serve a portion
    of the purpose, imagine the impact and flair of presenting a flowchart, such as
    a captivating sankey diagram or a dynamic stream graph.'
  prefs: []
  type: TYPE_NORMAL
- en: This post revolves around such scenarios. In the vast landscape of available
    data visualizations, there are some hidden gems that often remain underutilized.
    Recognizing the fact that we can’t talk about all these awesome visualization
    in one post, we’ll focus on three of them here. So, let’s dive in.
  prefs: []
  type: TYPE_NORMAL
- en: Sankey Diagrams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s kick things off by exploring the fascinating world of Sankey Diagrams.
  prefs: []
  type: TYPE_NORMAL
- en: Sankey Diagrams are an incredibly cool way to visualize the flow of data. They
    offer a unique way to see how things are moving from one stage to another. Imagine
    understanding the journey of a product from its inception to the final outcome,
    or how different categories come together or split apart. That’s where Sankey
    Diagrams shine the brightest.
  prefs: []
  type: TYPE_NORMAL
- en: However, it’s worth mentioning that these diagrams are best suited for scenarios
    that involve tracking flows, like the examples we mentioned. In other cases, they
    might not be the best fit. So, let’s dive in and uncover their magic!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f9fcc3d3a5e245ec8f61d559c9408060.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Before we jump into the code and explore the practical implementation of the
    diagram we’ve just seen lets discuss the use cases.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenarios best suited for Sankey Diagrams**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sankey diagrams are a fantastic choice if your situation falls into any of
    these categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Flow Analysis:** This involves illustrating the distribution, transformation,
    and transitions of various resources, quantities, or general data. They help highlight
    the major contributors, pathways, and losses within a system.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Spotting Resource Bottlenecks:** Sankey diagrams are invaluable tools for
    evaluating the efficiency of resource utilization. They excel at identifying bottlenecks
    and suggesting areas that could be optimized.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Scenarios not well suited for Sankey Diagrams**'
  prefs: []
  type: TYPE_NORMAL
- en: 'While Sankey diagrams are powerful tools, there are cases where they might
    not be the best fit:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Numerical Precision:** Sankey diagrams prioritize a qualitative and relative
    representation of flows. If you need precise numerical values, other visualization
    methods might be more suitable.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Handling Extensive Data:** If your dataset involves numerous nodes and connections,
    a Sankey diagram can quickly become cluttered and challenging to interpret. To
    overcome this, consider simplifying the data or exploring alternative visualizations
    like network graphs or hierarchical diagrams.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Alternative Visualizations for Similar Use Cases**'
  prefs: []
  type: TYPE_NORMAL
- en: From my experience, I’ve found that stream graphs, parallel coordinates plots,
    and flow charts share a similar purpose with Sankey diagrams. Additionally, some
    individuals might see networks as closely resembling the functionality of Sankey
    diagrams.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a clearer grasp of when to embrace Sankey diagrams and when
    to consider other options, let’s delve into the code behind this impressive visualization!
  prefs: []
  type: TYPE_NORMAL
- en: '**Diving into the Python Implementation of Sankey**'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now shift our focus to the Python code that brings the Sankey diagram
    to life.
  prefs: []
  type: TYPE_NORMAL
- en: My goal was to create a comprehensive Sankey diagram with a multitude of features,
    making it easily adaptable for various levels of complexity.
  prefs: []
  type: TYPE_NORMAL
- en: The following example delves into the analysis of an organization’s data pipeline.
    It traces the journey of data from its source to its eventual transformation into
    products or reports. It’s important to note that the data used here is entirely
    synthetic. Thus, while this visualization serves as an excellent guide for crafting
    an impressive Sankey diagram, it’s advisable not to infer more than its instructional
    value in creating captivating visuals.
  prefs: []
  type: TYPE_NORMAL
- en: I use holoview for this demonstration and what’s particularly intriguing about
    holoview is its capability to generate HTML-based [interactive diagrams](https://holoviews.org/gallery/demos/bokeh/dropdown_economic.html).
    That’s definitely a feature worth exploring.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Circular Packing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Circular Packing offers a stylish twist on the conventional tree maps, and truth
    be told, it’s incredibly easy on the eyes. This technique involves nestling circles
    within circles to portray hierarchical data, and although, you can go as deep
    as you need, I must admit, things might get quite intricate after two to three
    layers — unless, of course, you’re considering a visualization that spans an entire
    wall!
  prefs: []
  type: TYPE_NORMAL
- en: Circular packing is an ideal choice when you’re aiming to showcase both the
    hierarchy and proportions within a dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6e7d38e4dd08432a0afad7ba1b801c38.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s explore some scenarios where the circular packing really makes a
    point:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenarios best suited for Circular Packing**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In considering the appropriate scenarios for circular packing, it’s worth noting
    that it can essentially fulfill the role of a simple bar chart. However, it really
    is better to use the bar chart in those scenarios. Let’s uncover the contexts
    where circular packing truly serves it’s purpose at it’s best:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hierarchical Data:** Circular packing is a great choice for illustrating
    hierarchical structures up to 2 to 3 levels. It can quite beautifully demonstrates
    the nesting of categories or groups within one another.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Proportional Representation:** When the goal is to showcase proportions within
    each hierarchy level, circular packing excels. The area of each circle directly
    corresponds to the value it represents, offering a straightforward means to compare
    relative sizes.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Scenarios not well suited for Circular Packing**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Space Constraints:** If your visualization space is limited, circular packing
    could become cluttered and challenging to decipher — particularly when dealing
    with numerous hierarchy levels or small data point values, as evident in the illustration
    to an extent as well. In such cases, alternatives like tree maps or bar charts
    could offer clearer insights.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Exact Values:** Again just like sankey diagrams, this representation is not
    that effective for precise quantitative values. Estimating exact values from circles
    even with annotation can be unintuitive and intricate.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Comparing Multiple Sets:** This continues from the previous point, when the
    objective involves comparing multiple hierarchical structures side by side, circular
    packing could lead to confusion. While it can provide an overview, drawing meaningful
    conclusions might prove difficult. For these scenarios, bar charts, line charts,
    or grouped bar charts could be more fitting.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Alternative Visualizations for Similar Use Cases**'
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the use case grouped bar charts, tree maps, tree diagrams and even
    pie charts can serve as an alternate to circular packing diagrams.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we’ve talked about the use cases, let’s dive into the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Diving into the Python Implementation of Circular Packing**'
  prefs: []
  type: TYPE_NORMAL
- en: For the practical implementation of Circular Packing, I chose to use the circlify
    package developed by [Jerome Lecomte](https://github.com/elmotec), which is readily
    available on [GitHub](https://github.com/elmotec/circlify). Let’s explore how
    I demonstrated Circular Packing using this package.
  prefs: []
  type: TYPE_NORMAL
- en: In this illustration, I took a specific scenario as an example. The example
    and synthetic data revolves around the number of students enrolled in data science
    courses across various domains like Machine Learning, Big Data, and Data Visualizations
    in a given semester. There are only 3 layers to this scenario but you can observe,
    even by the third hierarchical layer, circular packing becomes a little difficult
    to interpret and thus I had do several manual adjustments in the code to maintain
    visual clarity.
  prefs: []
  type: TYPE_NORMAL
- en: Despite the challenges, this representation stands as an incredibly cool visualization
    and I personally find it intuitively quite easy to grasp.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Network Graphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network graphs present a powerful means to visually depict relationships between
    entities — referred to as nodes, along with the connections or relationships that
    link them — known as edges.
  prefs: []
  type: TYPE_NORMAL
- en: The scope of applications for network graphs is quite vast to the extent that
    a single post won’t be able to fully capture their potential. Moreover, things
    tend to get rather complex when dealing with network graphs.
  prefs: []
  type: TYPE_NORMAL
- en: In essence, network graphs are useful in scenarios where data relationships
    aren’t straightforward paths from point A to point B. Whenever there’s a web of
    complex connections, network graphs are lent as a useful tool of visualization
    that can reveal intricate relationships in a visually obvious and intuitive manner.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c2b993b26566f40b4fc950c3e64f16f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: So first let’s move towards the use cases of network graphs
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenarios best suited for Network Graphs**'
  prefs: []
  type: TYPE_NORMAL
- en: Although network graphs can render themselves quite useful in many scenarios,
    a few are the following.
  prefs: []
  type: TYPE_NORMAL
- en: '**Social Network Analysis:** They can be used to visualize relationships between
    various entities, such as social connections, communication networks, or collaboration
    networks.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Influence and Centrality:** When you want to analyze the influence or centrality
    of nodes within a network, node attributes can help highlight key entities based
    on specific characteristics.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Community Clusters:** Network graphs can help identify clusters or communities
    within a dataset. Node attributes can be used to label and distinguish different
    clusters.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Identifying Dependencies:** In scenarios where entities represent tasks or
    processes, and edges represent dependencies, node attributes can provide information
    about the duration, resources, status or dependants of each task.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Scenarios not well suited for Network Graphs**'
  prefs: []
  type: TYPE_NORMAL
- en: 'While network graphs are powerful, they might not be the best choice for every
    situation. Some cases where network graphs don’t quite shine:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple Hierarchies:** If data involves a clear hierarchy and simple parent-child
    relationships, other visualization methods like hierarichal tree diagrams might
    offer a more straightforward representation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Numerical Precision:** As with our previous two visuals, again this is not
    a representation to convey precision in data, while you can add data to your graph,
    it’d demand a high level of scrutiny compared some of the more suited visualizations.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Many Nodes and Edges:** Large and complex networks can become cluttered and
    difficult to interpret. If the dataset has too many nodes and edges, representing
    a subset of data will a better choice.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Alternative Visualizations for Similar Use Cases**'
  prefs: []
  type: TYPE_NORMAL
- en: Several related yet not entirely synonymous visualizations include hierarchical
    tree diagrams, which offer greater clarity for more sequential hierarchies. Hive
    plots present another viable alternative, particularly suited for specific types
    of relationships in data. Furthermore, chord diagrams can elegantly emulate the
    circular layout found in networkx circular_layout visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: '**Diving into the Python Implementation of Networks Graph**'
  prefs: []
  type: TYPE_NORMAL
- en: For the network graph visualization, I aimed for a social network analysis scenario
    with synthetically generated data. The setup involves 20 influencers, each specializing
    in distinct niches spanning fashion, fitness, and technology. These influencers
    possess varying numbers of followers and engagement levels.
  prefs: []
  type: TYPE_NORMAL
- en: In the graphical representation, edges depict connections between influencers.
    Connections within the same niche are shaded in dark gray, while connections bridging
    different niches are shaded in dark orange. The objective is to assess the behavior
    of the most followed influencers and potentially gain insights from their interactions
    with their peers.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that the code itself won’t yield any insights, as the
    connections are assigned randomly, with a precise choice over the density of the
    network.
  prefs: []
  type: TYPE_NORMAL
- en: I use the networkx package here, and I dedicated some effort in refining the
    layout and annotations to ensure wider adaptability for a subset of simpler scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we come to the close of this story, I sincerely hope that you gained valuable
    insights in these visualizations, and now have a clearer picture for their best
    case use scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to share your thoughts and propose other visualization types that
    you’ve come across or would want to learn more about.
  prefs: []
  type: TYPE_NORMAL
