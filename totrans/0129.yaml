- en: 6 Common Mistakes to Avoid in Data Science Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/6-common-mistakes-to-avoid-in-data-science-code-d0fc38f96594](https://towardsdatascience.com/6-common-mistakes-to-avoid-in-data-science-code-d0fc38f96594)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And How to Overcome Them
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://khuyentran1476.medium.com/?source=post_page-----d0fc38f96594--------------------------------)[![Khuyen
    Tran](../Images/98aa66025ad29b618e875c75f1c400a5.png)](https://khuyentran1476.medium.com/?source=post_page-----d0fc38f96594--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d0fc38f96594--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d0fc38f96594--------------------------------)
    [Khuyen Tran](https://khuyentran1476.medium.com/?source=post_page-----d0fc38f96594--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d0fc38f96594--------------------------------)
    ·10 min read·Dec 21, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data scientists often work in iterative and exploratory environments. Thus,
    there is often a focus on rapid results rather than creating maintainable or scalable
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, data scientists must avoid writing poor code for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reduced code readability:** Badly written code can be difficult to read and
    understand, making it harder for both the original author and other team members
    to maintain or modify the code in the future.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Increased chances of introducing bugs:** Poorly structured or inefficient
    code is more prone to errors, potentially affecting the accuracy of analyses or
    models.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Integration challenges:** Badly written code can hinder integration with
    production systems and handovers to other team members, including data engineers
    and machine learning engineers.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To write better code in data science projects, it’s crucial to recognize and
    address common bad practices, which may include:'
  prefs: []
  type: TYPE_NORMAL
- en: Excessive use of Jupyter Notebooks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Vague variable names
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Redundant code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicated code segments
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Frequent use of global variables
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lack of proper code testing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/f6f1f09b4af31a6c662ad12786fa6adb.png)'
  prefs: []
  type: TYPE_IMG
- en: Unless otherwise noted, all images are by the author
  prefs: []
  type: TYPE_NORMAL
- en: These bad practices make the code less readable, reusable, and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate these issues, we will examine the [*How I made top 0.3% on a Kaggle
    competition*](https://www.kaggle.com/code/lavanyashukla01/how-i-made-top-0-3-on-a-kaggle-competition#Feature-Engineering)
    notebook that participates in the [*House Prices — Advanced Regression Techniques*](https://www.kaggle.com/competitions/house-prices-advanced-regression-techniques)
    competition on Kaggle.
  prefs: []
  type: TYPE_NORMAL
- en: I selected this notebook because it showcases coding practices that mirror common
    mistakes observed in the code of data scientists I’ve collaborated with. By examining
    this notebook, we can gain valuable insights into the pitfalls to avoid as data
    scientists.
  prefs: []
  type: TYPE_NORMAL
- en: The Excessive Use of Jupyter Notebooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jupyter Notebooks offer an interactive environment for code execution, visualization,
    and immediate feedback, making them valuable for exploratory analysis and proof
    of concept.
  prefs: []
  type: TYPE_NORMAL
- en: However, it is not ideal for data scientists to use Jupyter Notebooks for production-related
    tasks like feature engineering and model training for several reasons.
  prefs: []
  type: TYPE_NORMAL
- en: '**Dependency Issues in Cell Execution**'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, some cells may depend on the output of previous cells, and executing
    them in a different order can cause errors or inconsistencies in the dependent
    cells.
  prefs: []
  type: TYPE_NORMAL
- en: In the provided example, executing cell 16 before cell 18 results in the removal
    of two outliers.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/52fab97b9d8af3b6159aa82ebf18d191.png)![](../Images/7e5d4c3239bcc885687adb42c7278660.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Number of rows dropped: 2'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: However, executing cell 18 before cell 16 results in the removal of three outliers.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7e5d4c3239bcc885687adb42c7278660.png)![](../Images/52fab97b9d8af3b6159aa82ebf18d191.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Number of rows dropped: 3'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Performance Concerns**'
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, notebooks frequently contain a combination of visualization and analysis
    code, as well as production code. This blend of code in a single notebook can
    lead to resource-intensive tasks that may negatively impact the performance of
    the production system.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e9fcda5e99cb08be45b65e2036766d63.png)'
  prefs: []
  type: TYPE_IMG
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use notebooks for EDA and analysis, while using Python scripts for feature engineering
    and machine learning model training.
  prefs: []
  type: TYPE_NORMAL
- en: To further organize your project, create a notebook for data analysis before
    feature engineering, and another notebook to analyze intermediate data after feature
    engineering.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This approach enables the use of Python scripts in various projects while maintaining
    a clean and organized notebook.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5cba44343ca7c45b94aa0fdcd98eec76.png)![](../Images/e98e00b27569b120f0618cdeb2807fbd.png)'
  prefs: []
  type: TYPE_IMG
- en: Vague Variable Names
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following code snippet, the meanings of the variables `res` ,`ls` , `l`
    , and `m` are unclear, making it difficult for reviewers to understand the code’s
    logic and potentially leading to misuse of the variables.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/321779f233bd16ca8defe775a599b33e.png)'
  prefs: []
  type: TYPE_IMG
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use descriptive and meaningful variable names that convey the purpose and contents
    of the variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Redundant Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Reduce Code Readability**'
  prefs: []
  type: TYPE_NORMAL
- en: Redundant code can make the code less readable.
  prefs: []
  type: TYPE_NORMAL
- en: In the notebook, the `YrSold` column undergoes unnecessary conversions between
    integer and string types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Initially, the `YrSold` column is represented as an integer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c9b739596d1462a8f95a8f9560ca605a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Subsequently, the code converts the `YrSold` column to a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aeb2e8e749f0241a87bc87fce97e0008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, the `YrSold` column is temporarily transformed back to an integer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0d913493d7f9cb8c387f1f87d0c005ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, the `YrSold` column is converted back to an integer along with other
    categorical columns using one-hot encoding:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/40a782e7e39f392ac34f4729cafd14bf.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: These unnecessary conversions can make it difficult for authors and maintainers
    to keep track of the data type of a column, which can result in the incorrect
    usage of the column.
  prefs: []
  type: TYPE_NORMAL
- en: '**Negative Performance Impact**'
  prefs: []
  type: TYPE_NORMAL
- en: Redundant code can also impact performance by introducing unnecessary computational
    overhead.
  prefs: []
  type: TYPE_NORMAL
- en: In the provided code, the author unnecessarily uses `pd.DataFrame(df)` twice
    to create two copies of a DataFrame. However, creating copies of the DataFrame
    is unnecessary as the objective is solely to retrieve the column names.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/94902db083b14cc97c2387b892f13c58.png)'
  prefs: []
  type: TYPE_IMG
- en: If the original DataFrame is large, creating new DataFrames can be computationally
    expensive.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Keep your code short and to the point. Remove unnecessary lines of code that
    don’t add value to your program.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we can rewrite the code above to directly obtain the columns from
    the original DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Duplicated Code Segments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Code duplication increases the maintenance burden.
  prefs: []
  type: TYPE_NORMAL
- en: The code `1 if x > 0 else 0` is reused multiple times. Any modifications or
    updates, such as changing it to `1 if x < 0 else 0`, would require making the
    same change in every instance of the duplicated code. This process can be both
    time-consuming and error-prone.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/96282f5ea687cb2341e2a2b0035fd8c9.png)'
  prefs: []
  type: TYPE_IMG
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Encapsulate duplicated code in functions or classes to improve code reuse and
    maintainability.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we can create a function called `is_positive` that encapsulates
    the code snippet `1 if x > 0 else 0`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[](/python-clean-code-6-best-practices-to-make-your-python-functions-more-readable-7ea4c6171d60?source=post_page-----d0fc38f96594--------------------------------)
    [## Python Clean Code: 6 Best Practices to Make your Python Functions more Readable'
  prefs: []
  type: TYPE_NORMAL
- en: Stop Writing Python Functions that Take more than 3 Minutes to Understand
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/python-clean-code-6-best-practices-to-make-your-python-functions-more-readable-7ea4c6171d60?source=post_page-----d0fc38f96594--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Frequent Use of Global Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The usage of global variables can lead to confusion and difficulties in understanding
    how and where the values are modified.
  prefs: []
  type: TYPE_NORMAL
- en: In the following code, `X`, `train_labels`, and `kf` are global variables that
    are defined in different parts of the codebase.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d4f48bd096d0a36280307f80cfaf1644.png)![](../Images/af19a15ec752a8c1c60d50c3d6a92a49.png)![](../Images/75849a43683209672da0ce1ac10ffa16.png)![](../Images/6edd55425d0b8fa8c820b8ff73eff313.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When looking at the function call, maintainers may incorrectly assume that
    the `cv_rmse` function can be invoked with only the `model` variable defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: ', … but in reality, the function requires `X`, `train_labels`, and `kf` to
    be defined as well.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of using global variables, pass the necessary variables as arguments
    to the function. This will make the function more modular and easier to test.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Lack of Proper Code Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Hidden Code Issues**'
  prefs: []
  type: TYPE_NORMAL
- en: Untested code can yield unexpected results, even if the output seems correct.
  prefs: []
  type: TYPE_NORMAL
- en: In the code example, using the `create_booleans` function on integers should
    turn them into 0s and 1s. The output appears correct, with 0s and 1s, but it’s
    actually wrong. Non-zero values should be 1, and zeros should be 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Relying on inaccurate outcomes can result in faulty analyses and misleading
    conclusions.
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: With unit tests, we can specify the expected output, reducing the likelihood
    of overlooking bugs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Overlooked Edge Cases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Problem**'
  prefs: []
  type: TYPE_NORMAL
- en: Code may perform well in specific conditions but exhibit unexpected behaviors
    in others.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the code fills missing values in the `MSZoning` column based
    on the mode of values for each group in the `MSSubClass` column. It works as expected
    when `MSSubClass` has no NaN values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: However, when `MSSubClass` contains missing values, the code doesn't behave
    as expected, leaving some missing values in `MSZoning`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Neglecting to address edge cases can lead to problems in real-world applications.
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use unit tests to test for edge cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '… and adjust the code to account for edge cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This article discusses common challenges encountered in data science projects
    and provides some practical solutions to address them. Please note that this article
    does not exhaust all possible solutions, but rather offers a selection of strategies
    that may help overcome these issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a comprehensive guide on best practices to integrate into a data science
    project, please refer to the following articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-structure-a-data-science-project-for-readability-and-transparency-360c6716800?source=post_page-----d0fc38f96594--------------------------------)
    [## How to Structure a Data Science Project for Readability and Transparency'
  prefs: []
  type: TYPE_NORMAL
- en: And How to Create One in One Line of Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-structure-a-data-science-project-for-readability-and-transparency-360c6716800?source=post_page-----d0fc38f96594--------------------------------)
    [](/stop-hard-coding-in-a-data-science-project-use-config-files-instead-479ac8ffc76f?source=post_page-----d0fc38f96594--------------------------------)
    [## Stop Hard Coding in a Data Science Project — Use Config Files Instead
  prefs: []
  type: TYPE_NORMAL
- en: And How to Efficiently Interact with Config Files in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/stop-hard-coding-in-a-data-science-project-use-config-files-instead-479ac8ffc76f?source=post_page-----d0fc38f96594--------------------------------)
    [](/git-deep-dive-for-data-scientists-1c9cc45c7612?source=post_page-----d0fc38f96594--------------------------------)
    [## Git Deep Dive for Data Scientists
  prefs: []
  type: TYPE_NORMAL
- en: Learn Git through Real-Life Scenarios
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/git-deep-dive-for-data-scientists-1c9cc45c7612?source=post_page-----d0fc38f96594--------------------------------)
    [](/pytest-for-data-scientists-2990319e55e6?source=post_page-----d0fc38f96594--------------------------------)
    [## Pytest for Data Scientists
  prefs: []
  type: TYPE_NORMAL
- en: A Comprehensive Guide to Pytest for your Data Science Projects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/pytest-for-data-scientists-2990319e55e6?source=post_page-----d0fc38f96594--------------------------------)
  prefs: []
  type: TYPE_NORMAL
