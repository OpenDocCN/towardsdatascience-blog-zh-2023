- en: 'Object Oriented Data Science: Refactoring Code'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向对象的数据科学：重构代码
- en: 原文：[https://towardsdatascience.com/object-oriented-data-science-refactoring-code-5bcb4ae7ce72](https://towardsdatascience.com/object-oriented-data-science-refactoring-code-5bcb4ae7ce72)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/object-oriented-data-science-refactoring-code-5bcb4ae7ce72](https://towardsdatascience.com/object-oriented-data-science-refactoring-code-5bcb4ae7ce72)
- en: Elevating machine learning models and data science products with efficient code
    and python classes.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提升机器学习模型和数据科学产品的效率代码和 Python 类。
- en: '[](https://medium.com/@molly.ruby?source=post_page-----5bcb4ae7ce72--------------------------------)[![Molly
    Ruby](../Images/2a493bd01057722138857a90035347cd.png)](https://medium.com/@molly.ruby?source=post_page-----5bcb4ae7ce72--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5bcb4ae7ce72--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5bcb4ae7ce72--------------------------------)
    [Molly Ruby](https://medium.com/@molly.ruby?source=post_page-----5bcb4ae7ce72--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@molly.ruby?source=post_page-----5bcb4ae7ce72--------------------------------)[![Molly
    Ruby](../Images/2a493bd01057722138857a90035347cd.png)](https://medium.com/@molly.ruby?source=post_page-----5bcb4ae7ce72--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5bcb4ae7ce72--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5bcb4ae7ce72--------------------------------)
    [Molly Ruby](https://medium.com/@molly.ruby?source=post_page-----5bcb4ae7ce72--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5bcb4ae7ce72--------------------------------)
    ·7 min read·Aug 24, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5bcb4ae7ce72--------------------------------)
    ·阅读时间7分钟·2023年8月24日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/5a7acfc2f7f532c4ce9e966a929810ad.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5a7acfc2f7f532c4ce9e966a929810ad.png)'
- en: Image created by the author.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者创建。
- en: For data scientists, code is the backbone of analysis and decision-making. As
    data science applications grow more intricate, from machine learning models embedded
    in software to complex data pipelines orchestrating vast amounts of information,
    developing clean, organized, and maintainable code becomes crucial. Object-oriented
    programming (OOP) unlocks flexibility and efficiencies that enable data scientists
    to respond to changing requirements with agility. OOP introduces the concept of
    classes, which serve as blueprints for creating objects that encapsulate both
    data and the operations that manipulate it. This paradigm shift allows data scientists
    to go beyond traditional functional approaches, promoting modular design and code
    reusability.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据科学家来说，代码是分析和决策的核心。随着数据科学应用的复杂性增加，从嵌入在软件中的机器学习模型到协调大量信息的复杂数据管道，开发干净、组织良好且易于维护的代码变得至关重要。面向对象编程（OOP）解锁了灵活性和效率，使数据科学家能够敏捷地应对不断变化的需求。OOP
    引入了类的概念，这些类作为创建对象的蓝图，这些对象封装了数据及其操作。这种范式转变使数据科学家能够超越传统的函数方法，促进模块化设计和代码重用。
- en: In this article, we’ll explore the benefits of refactoring data science code
    by creating classes and deploying object-oriented techniques, and how this approach
    can enhance modularity and reusability.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将探讨通过创建类和部署面向对象技术来重构数据科学代码的好处，以及这种方法如何增强模块化和可重用性。
- en: The Power of Classes in Data Science
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学中的类的力量
- en: In traditional data science workflows, functions have been the approach for
    encapsulating logic. This is often sufficient as functions allow developers to
    minimize repeated code. However, as projects evolve, maintaining an extensive
    collection of functions might lead to code that’s challenging to navigate, debug,
    and scale.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的数据科学工作流中，函数是封装逻辑的方法。这通常足够，因为函数允许开发人员减少重复代码。然而，随着项目的发展，维护大量函数可能会导致代码难以导航、调试和扩展。
- en: 'This is where classes come into play. A class is a blueprint for creating objects,
    which bundle both data and functions (called methods) that operate on that data.
    By organizing code into classes, developers can achieve several advantages:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这时类发挥了作用。类是创建对象的蓝图，这些对象将数据和操作数据的函数（称为方法）捆绑在一起。通过将代码组织成类，开发人员可以实现以下几个优势：
- en: 'Modularity and Encapsulation: Classes promote modularity by grouping related
    functionality together. Each class encapsulates its own attributes (data) and
    methods (functions), reducing the risk of global variable pollution and the potential
    for naming conflicts. This helps maintain a clear separation of concerns, making
    code easier to understand and modify.'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模块化和封装：类通过将相关功能组合在一起来促进模块化。每个类封装了自己的属性（数据）和方法（函数），减少了全局变量污染的风险和命名冲突的可能性。这有助于保持关注点的清晰分离，使代码更容易理解和修改。
- en: 'Reusability: Classes encourage reusability by providing a consistent interface
    for similar tasks across different parts of the project. Once a class is defined,
    it can be instantiated whenever needed and its methods can be used to achieve
    consistent results.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可重用性：类通过为项目的不同部分提供一致的接口来鼓励重用。一旦定义了一个类，它可以在需要时实例化，并且其方法可以用来实现一致的结果。
- en: '4\. Inheritance and Polymorphism: Inheritance allows developers to create subclasses
    that inherit attributes and methods from a parent class. This promotes code reuse
    while enabling customization for specific tasks. Polymorphism, another OOP concept,
    lets developers use the same method name across different classes, adapting behavior
    based on the specific implementation.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4\. 继承和多态：继承允许开发人员创建子类，从父类继承属性和方法。这促进了代码重用，同时使得特定任务的定制成为可能。多态性，另一个面向对象编程的概念，让开发人员可以在不同类中使用相同的方法名称，根据具体实现调整行为。
- en: '5\. Testing and Debugging: Classes facilitate unit testing, as test cases can
    target individual methods within a class, making it easier to identify and fix
    issues, improving the overall robustness of your codebase.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 5\. 测试和调试：类促进了单元测试，因为测试用例可以针对类中的单独方法，这使得识别和修复问题变得更加容易，从而提高了代码库的整体健壮性。
- en: 'Refactoring to Classes: A Theoretical Example'
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将代码重构为类：一个理论例子
- en: 'Let’s consider a scenario where you’re working on a machine learning project
    that involves data preprocessing, model training, and evaluation. Initially, you
    might have a collection of functions for each step:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在进行一个涉及数据预处理、模型训练和评估的机器学习项目。最初，你可能会有一组用于每个步骤的函数：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: While functional decomposition works, over time, there may be many steps that
    occur within the preprocessing, training, and evaluation. This can become challenging
    to manage these functions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管功能分解有效，但随着时间的推移，预处理、训练和评估中可能会有许多步骤。这可能会使管理这些函数变得具有挑战性。
- en: 'Refactoring the code into classes:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码重构为类：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'By breaking down the workflow into classes, there is more organization, and
    the structure is easier to read and maintain. Each class handles a specific aspect
    of the process. They can be instantiated as:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将工作流程拆分为类，组织性得到了提升，结构也更易于阅读和维护。每个类处理过程的特定方面。它们可以被实例化为：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this case, the classes have incorporating classes provides an extra layer
    of structure and flexibility that improve the workflow and usability of the code.
    By embracing the power of classes, this example creates a more robust and scalable
    code base.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，类的引入提供了额外的结构和灵活性，改善了代码的工作流程和可用性。通过利用类的强大功能，这个示例创建了一个更为健壮和可扩展的代码库。
- en: 'Refactoring to Classes: A Practical Example'
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将代码重构为类：一个实际的例子
- en: As a practical example, I recently refactored code that was developed in [this
    repository](https://github.com/mollyryanruby/sales_forecasting) 3 years ago into
    [a new repository](https://github.com/mollyryanruby/auto_forecast) to show the
    difference in the code before and after refactoring.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个实际的例子，我最近将[这个代码库](https://github.com/mollyryanruby/sales_forecasting)三年前开发的代码重构到[一个新代码库](https://github.com/mollyryanruby/auto_forecast)中，以展示重构前后的代码差异。
- en: 'In the initial repository, many functions encompassed modeling tasks as several
    different models were trained and tested. In the refactored version, there is
    a model class SalesForecasting that encompasses all the modeling tasks. This is
    easier to read and allows the package to be deployed more efficiently as SalesForecasting
    and be instantiated multiple times with different inputs. As a preview the class
    looks like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始代码库中，许多函数涵盖了建模任务，因为训练和测试了多个不同的模型。在重构版本中，有一个名为 SalesForecasting 的模型类涵盖了所有建模任务。这更易于阅读，并且使得作为
    SalesForecasting 部署包更为高效，并可以用不同的输入多次实例化。作为预览，这个类的样子如下：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The class “SalesForecasting” serves as a comprehensive blueprint for data-driven
    businesses to anticipate future sales trends through the application of various
    predictive models. Within this class, data scientists can harness the power of
    different modeling techniques, including Linear Regression, Random Forest, XGBoost,
    LSTM (Long Short-Term Memory), and ARIMA (AutoRegressive Integrated Moving Average).
    By encapsulating the forecasting workflow within this class, the process of model
    fitting, prediction, and evaluation becomes streamlined and consistent across
    different model types. Through the “SalesForecasting” class, data scientists can
    efficiently experiment with different algorithms and easily maintain the code
    base.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: “SalesForecasting”类作为一个全面的蓝图，帮助数据驱动的企业通过应用各种预测模型来预测未来的销售趋势。在这个类中，数据科学家可以利用不同的建模技术，包括线性回归、随机森林、XGBoost、LSTM（长短期记忆）和ARIMA（自回归积分滑动平均）。通过将预测工作流封装在这个类中，模型拟合、预测和评估的过程变得更加简化和一致。通过“SalesForecasting”类，数据科学家可以高效地实验不同的算法，并轻松维护代码库。
- en: Object-oriented programming is a tool for data scientists to architect code
    that mirrors the intricacies of the real-world systems they analyze, enabling
    them to extract valuable insights while maximizing agility. Although python intends
    for classes to be used for instantiation and inheritance, the example above shows
    a first step in which classes are leveraged for modularizing code. As data science
    capabilities expand and teams grow, maintaining efficient code is essential.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程是数据科学家用来构建反映其分析的真实世界系统复杂性的代码的工具，使他们能够在最大化灵活性的同时提取有价值的洞察。虽然python旨在将类用于实例化和继承，上面的例子展示了一个初步步骤，其中类被用于模块化代码。随着数据科学能力的扩展和团队的增长，维护高效的代码是至关重要的。
- en: '[See the full refactored code base here.](https://github.com/mollyryanruby/auto_forecast/tree/main/auto_forecast)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[在这里查看完整的重构代码库。](https://github.com/mollyryanruby/auto_forecast/tree/main/auto_forecast)'
