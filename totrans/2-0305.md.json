["```py\npip install statsbombpy\n```", "```py\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom mplsoccer import VerticalPitch\nimport numpy as np\nimport pandas as pd\nfrom statsbombpy import sb\n```", "```py\ncompetition_row = sb.competitions()[\n    (sb.competitions()['competition_name'] == 'La Liga') \n    & (sb.competitions()['season_name'] == '2015/2016')\n]\ncompetition_id = pd.unique(\n    competition_row['competition_id']\n)[0]\nseason_id = pd.unique(\n    competition_row['season_id']\n)[0]\n\nmatches = sb.matches(competition_id=competition_id, season_id=season_id)\n```", "```py\nmatch_events = sb.events(match_id=match_id)\n```", "```py\nshots_against_team.head()\n```", "```py\n# Set up pitch (layout)\npitch = VerticalPitch(line_zorder=2, line_color='black', half = True)\nfig, axs = pitch.grid(nrows=1, ncols=1, axis=False, endnote_height=0.05)\n\n# Plot each shot\nfor row in shots_against_team.itertuples():\n    if row.shot_outcome == 'Goal':\n        # If it was a goal, we want to see it clearly\n        alpha = 1\n    else:\n        # Increase transparency if it wasn't a goal\n        alpha = 0.2\n    pitch.scatter(\n        row.x, \n        row.y, \n        alpha = alpha, \n        s = 100, \n        color = \"red\", \n        ax=axs['pitch'],\n        edgecolors=\"black\"\n    )\n```", "```py\npitch = VerticalPitch(line_zorder=2, line_color='black', half = True)\nfig, axs = pitch.grid(nrows=1, ncols=2, axis=False, endnote_height=0.05)\n\nshot_bin_statistic = pitch.bin_statistic(\n    shots_against_team.x, \n    shots_against_team.y, \n    statistic='count', \n    bins=(6, 5), \n    normalize=False\n)\n#normalize by number of games\nshot_bin_statistic[\"statistic\"] = shot_bin_statistic[\"statistic\"]/len(team_matches)\n#make a heatmap\npcm  = pitch.heatmap(shot_bin_statistic, cmap='Reds', edgecolor='grey', ax=axs['pitch'][0])\n#legend to our plot\nax_cbar = fig.add_axes((-0.05, 0.093, 0.03, 0.786))\ncbar = plt.colorbar(pcm, cax=ax_cbar)\naxs['pitch'][0].set_title('Shots conceded heatmap')\n\nfig.suptitle(f\"Shots and Goals Against {team} in 2015/16 La Liga season\", fontsize = 30)\n```", "```py\n# Count goals per heatmap bin\ngoal_bin_statistic = pitch.bin_statistic(\n    shots_against_team.loc[shots_against_team['shot_outcome'] == 'Goal'].x, \n    shots_against_team.loc[shots_against_team['shot_outcome'] == 'Goal'].y, \n    statistic='count', \n    bins=(6, 5), \n    normalize=False\n# Count shots per heatmap bin\nshot_bin_statistic = pitch.bin_statistic(\n    shots_against_team.x, \n    shots_against_team.y, \n    statistic='count', \n    bins=(6, 5), \n    normalize=False\n)\n\n# Create goal_shot_ratio KPI by dividing goals/shots\ngoal_shot_ratio = goal_bin_statistic.copy()\ngoal_shot_ratio['statistic'] = np.divide(goal_bin_statistic['statistic'], shot_bin_statistic['statistic'])\ngoal_shot_ratio['statistic'] = np.nan_to_num(goal_shot_ratio['statistic'])\n```", "```py\nall_lineups = None\nfor match_id in pd.unique(all_events['match_id']):\n    match_lineups = sb.lineups(match_id=match_id)['Barcelona']\n\n    match_lineups['match_id'] = match_id\n    match_lineups['match_duration'] = all_events[all_events['match_id'] == match_id]['minutes'].unique()[0]\n    match_lineups['from'] = match_lineups['positions'].apply(lambda x: x[0]['from'] if x else np.nan)\n    match_lineups['to'] = match_lineups.apply(lambda x: x['positions'][-1]['to'] if x['positions'] and x['positions'][-1]['to'] is not None else ('90:00' if x['positions'] else np.nan), axis=1)\n    match_lineups['minutes_played'] = match_lineups.apply(lambda x: parse_positions(x['positions'], x['match_duration']), axis=1)\n\n    if all_lineups is None:\n        all_lineups = match_lineups.copy()\n    else:\n        all_lineups = pd.concat([all_lineups, match_lineups], join=\"inner\")\n\nall_lineups = all_lineups.reset_index(drop=True)\n```", "```py\n for match_id in pd.unique(all_lineups['match_id']):\n    match_shots = shots_against_team[\n      shots_against_team['match_id'] == match_id\n    ]\n    for player_tup in all_lineups[all_lineups['match_id'] == match_id].itertuples():\n\n        # For whatever reason, the 'from' column is being mapped to '_10'\n        shots_conceded = match_shots[\n          (match_shots['time'] >= player_tup._10) \n          & (match_shots['time'] <= player_tup.to)\n        ]\n        goals_conceded = len(\n          shots_conceded[shots_conceded['shot_outcome'] == 'Goal']\n        )\n        shots_conceded = len(shots_conceded)\n\n        all_lineups.at[player_tup.Index,'shots_conceded'] = shots_conceded\n        all_lineups.at[player_tup.Index,'goals_conceded'] = goals_conceded\n```", "```py\ngrouped = all_lineups.groupby('player_id')[\n    ['minutes_played', 'shots_conceded', 'goals_conceded']\n].sum()\n\ngrouped['shots_per_minute'] = \\\n    grouped['shots_conceded'] / grouped['minutes_played']\n\ngrouped['goals_per_minute'] = \\\n    grouped['goals_conceded'] / grouped['minutes_played']\n```", "```py\nBarcelona conceded 356 shots. An average of 9.37 shots per match.\nBarcelona conceded 26 goals. An average of 0.68 goals per match.\n```", "```py\n**Thanks for reading the post!** \n\nI really hope you enjoyed it and found it insightful.\n\nFollow me and subscribe to my mail list for more \ncontent like this one, it helps a lot!\n\n**@polmarin**\n```"]