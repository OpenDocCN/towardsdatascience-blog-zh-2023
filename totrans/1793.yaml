- en: 'Rotating On-Call for Operational and Support: A Must for Data Teams'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/rotating-on-call-for-operational-and-support-a-must-for-data-teams-74b9af592253](https://towardsdatascience.com/rotating-on-call-for-operational-and-support-a-must-for-data-teams-74b9af592253)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A rotating on-call schedule for operational, support, and tech-dept frees the
    rest of the team to do great development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@benjamin.thuerer?source=post_page-----74b9af592253--------------------------------)[![Benjamin
    Thürer](../Images/b4c49698c7270c592bf992fc47f75765.png)](https://medium.com/@benjamin.thuerer?source=post_page-----74b9af592253--------------------------------)[](https://towardsdatascience.com/?source=post_page-----74b9af592253--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----74b9af592253--------------------------------)
    [Benjamin Thürer](https://medium.com/@benjamin.thuerer?source=post_page-----74b9af592253--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----74b9af592253--------------------------------)
    ·7 min read·Jun 20, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9b0ff202be86d20de564d6c40e84ee53.png)'
  prefs: []
  type: TYPE_IMG
- en: A common challenge for every data science or product team is to align the new
    (product development) with the old (operational, support) tasks. When the full
    team is supposed to handle both, it means that on one side the team is required
    to keep a product deadline and launch a new product feature while, at the same
    time, the team is expected to work operationally and fix existing products and
    support commercial questions and calls. This situation causes unexpected context
    switches and, eventually, leads to less efficiency, failing deadlines, and stress.
  prefs: []
  type: TYPE_NORMAL
- en: In practice, this often leads to a situation where certain team members take
    on those additional tasks or are specialized to do so. But that is dangerous because
    as soon as one of these specialized team members goes on vacation, the whole company
    might feel that and has a problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hence, an efficient and scalable data team needs to support both operational
    and new development work and create a system that includes:'
  prefs: []
  type: TYPE_NORMAL
- en: Good knowledge sharing among team members on how to do operational work and
    support products/customers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uninterrupted development work without much context switching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Well-defined and estimated maintenance work to keep avoid unexpected deadlines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Rotating On-Call System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One system that turned out to work very well for us in the past is a *rotating
    on-call system* that does handle more than “just” alerts in production. Simply
    put, this is a rotating system where one (or more) team members are the designated
    survivors for a specific amount of time and are purely responsible for operational
    work.
  prefs: []
  type: TYPE_NORMAL
- en: The person on call is not just doing a job, the person is protecting the entire
    team from all the chaos happening outside of the development work
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To finish that point, this system allows for that **only** the on-call person
    (the designated survivor) is handling all the work that does not fall under “new
    development”. During that time, the person on-call is not just doing a job, the
    person is protecting the entire team from all the chaos happening outside of the
    development work, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Fix production pipeline issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Answer commercial / customer questions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support customer calls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce tech dept (backlog)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/b7bd6f9913e39bb6ab3cb338aaf0d0b0.png)'
  prefs: []
  type: TYPE_IMG
- en: Overview of specific tasks being part of the on-call routine.
  prefs: []
  type: TYPE_NORMAL
- en: As can be seen in the figure above, handling the “classic” on-call system and
    making sure the production environment works is still the most important. However,
    if there are no issues in production, this frees up for other tasks like supporting
    commercial requests, customer calls, or reducing the backlog.
  prefs: []
  type: TYPE_NORMAL
- en: '**What are the benefits?**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Switching to the system at first might not be easy. Not every team member can
    just take responsibility for the production pipeline, commercial support, and
    the tech dept. But that should not be a blocker. It is important to communicate
    properly that the person on-call owns those items and is the first line of defense
    **but** can ask for help at any time.
  prefs: []
  type: TYPE_NORMAL
- en: In the long run, this will bring a lot of benefits to the team and the entire
    organization. The most intuitive benefits are that it is way easier to estimate
    development work and that the team will become more efficient (less context switch).
    This also goes for the operational side where the number of people being part
    of the on-call system defines how much operational work is possible. This makes
    communication with the company and stakeholders way easier because a team of 5
    people with 1 person in the rotation means 1 out of 5 FTEs is maintaining all
    systems and work related to existing products (20% operational, 80% development).
    That is easy to account for and to estimate.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d7634b6592ded397741829bd2b2a7c23.png)'
  prefs: []
  type: TYPE_IMG
- en: Schematic of a 20%-80% operational-development distribution in a team using
    on-call rotation.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are more benefits coming in over time, almost as side effects.
    All team members will become full-stack data scientists. The reason is that every
    team member needs to understand a certain minimum of the products, customers,
    systems, models/logic, and code infrastructure involved. They do not need to be
    experts but they will eventually become good enough to handle those alone for
    at least 1 week. This will also ensure that it is not at all an issue when a valuable
    team member goes on vacation since the person on-call will always have the team’s
    back.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, even though this on-call time might sometimes be a bit more stressful,
    it gives the data scientist the opportunity to see what is outside of the team
    and to collaborate with the commercial side and customers. This can be a very
    valuable and rewarding experience.
  prefs: []
  type: TYPE_NORMAL
- en: How to set up such a system?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is where it gets a little bit technical (for the people who like code,
    just scroll down to the very end). Setting up such a system is fairly straightforward
    but might involve some coding. The most important part is communication with the
    team and stakeholders and informing them how this is going to work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the whole point of the system is to **support the team,** and not to
    create more overhead, I highly recommend fully automatizing it. To do so, you
    would need to have at least 3 systems in place:'
  prefs: []
  type: TYPE_NORMAL
- en: A pager system connected to production that alerts when production fails (e.g.,
    [Opsgenie](https://www.atlassian.com/software/opsgenie) or [Pagerduty](https://www.pagerduty.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A scheduling system that detects who is on call and can communicate that to
    another system (e.g., [Apache Airflow](https://airflow.apache.org/) or [Keboola](https://www.keboola.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A communication platform that is used to reach out to your team and to make
    tickets (e.g., [Slack](https://slack.com/) or [Teams](https://www.microsoft.com/en-us/microsoft-teams/group-chat-software))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have those systems in place and you have API access to the pager system
    and to the communication platform, then you are almost done. The only thing left
    to do is to set up a job in the scheduling system that runs an API call first
    to get who is on call from the pager system and an API push afterward to communicate
    or overwrite channels/groups/tags in the communication platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below is an example of how such a simple API call can look like that will provide
    you with the person on call from Opsgenie:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, you want to run a command that does something in your communication
    system. For instance, in Slack, overwrite a user group so that it contains only
    the user who is on call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: At the end of this story, you will find a complete code version of how this
    code can be automatically scheduled. This will ensure that every time when someone
    tags your group on Slack (like `@ team`), only the person on-call will be tagged
    and can decide if more team members need to be notified. It also allows you to
    quickly add new tasks to the dag. For instance, when you want to notify the company
    or the team who is going on call now or if you want to adjust your ticketing system
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having a rotating schedule for the team's operational, commercial, and tech
    dept work is making your data team more efficient. It will reduce context switch
    and allows for better time estimations. In addition, it will educate full-stack
    data scientists that are confident in handling a wide range of issues to protect
    the rest of the team.
  prefs: []
  type: TYPE_NORMAL
- en: '*All images, unless otherwise noted, are by the author.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Code Appendix:*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Example of an Airflow dag that fetches the person who is on call from Opsgenie
    and overwrites a user group in Slack to only contain that person. The coding is
    certainly not perfect (Data Scientist at work) but I am sure you get it:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
