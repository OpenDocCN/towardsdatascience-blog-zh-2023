- en: Creating an Infographic With Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/creating-an-infographic-with-matplotlib-3c5ece11bedc](https://towardsdatascience.com/creating-an-infographic-with-matplotlib-3c5ece11bedc)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Geological Lithology Variations Within The Zechstein Group of the Norwegian
    Continental Shelf
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----3c5ece11bedc--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----3c5ece11bedc--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3c5ece11bedc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3c5ece11bedc--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----3c5ece11bedc--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3c5ece11bedc--------------------------------)
    ·14 min read·Jul 3, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/05d1ac94916e325b290124a12e01d9cd.png)'
  prefs: []
  type: TYPE_IMG
- en: Radial bar plots of lithology variation across the Norwegian Continental Shelf.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Creating exciting and compelling data visualisations is essential to working
    with data and being a data scientist. It allows us to provide information to readers
    in a concise form that helps the reader(s) understand data without them having
    to view the raw data values. Additionally, we can use charts and graphs to tell
    a compelling and interesting story that answers one or more questions about the
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Within the Python world, there are numerous libraries that allow data scientists
    to create visualisations and one of the first that many come across when starting
    their data science journey is [matplotlib](https://matplotlib.org/). However,
    after working with [matplotlib](https://matplotlib.org/) for a little while, many
    people turn to other more modern libraries as they view the basic matplotlib plots
    as boring and basic.
  prefs: []
  type: TYPE_NORMAL
- en: With a bit of time, effort, code, and an understanding of [matplotlib’s](https://matplotlib.org/)
    capabilities, we can transform the basic and boring plots into something much
    more compelling and visually appealing.
  prefs: []
  type: TYPE_NORMAL
- en: 'In my past several articles, I have focused on how we can transform individual
    plots with various styling methods. If you want to explore improving matplotlib
    data visualisations further, you can check out some of my previous articles below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Upgrade Your Data Visualisations: 4 Python Libraries to Enhance Your Matplotlib
    Charts](https://medium.com/p/74361bc3b92e)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Cyberpunking Your Matplotlib Figures](https://medium.com/p/96f4d473185d)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Enhance Your Polar Bar Charts with Matplotlib](https://medium.com/p/c08e332ec01c)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Create Stunning Radar Plots With Matplotlib](https://medium.com/p/6a8e05054ff9)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These articles have mainly focused on single plots and styling them. Within
    this article, we are going to look at building infographics with matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: Infographics are used to transform complex datasets into compelling visual narratives
    that are informative and engaging for the reader. They visually represent data
    and consist of charts, tables and minimal text. Combining these allows us to provide
    an easy-to-understand overview of a topic or question.
  prefs: []
  type: TYPE_NORMAL
- en: After sharing my previous article on [Polar Bar charts](https://medium.com/p/c08e332ec01c),
    I was tagged in a tweet from Russell Forbes, showing that it is possible to make
    infographics within matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: So, based on that, I thought to myself, why not try building an infographic
    with matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: And I did.
  prefs: []
  type: TYPE_NORMAL
- en: The following infographic was the result of that, and it is what we will be
    recreating in this article.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2cfc32d21fbf1acc86ca5a2ded4f8677.png)'
  prefs: []
  type: TYPE_IMG
- en: Example infographic that can be created using matplotlib. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Bear in mind that the infographic we will be building in this article may be
    suitable for web use or included within a presentation. However, if we were looking
    to include these within reports or display them in more formal settings, we may
    want to consider alternative colour palettes and a more professional feel.
  prefs: []
  type: TYPE_NORMAL
- en: The Goal of the Infographic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we touch any data visualisation, we need to understand the purpose behind
    creating our infographic. Without this, it will be challenging to narrow down
    the plots we want to use and the story we want to tell.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we are going to use a set of well log derived lithology measurements
    that have been obtained from the Norwegian Continental Shelf. From this dataset,
    we are going to specifically look at the question:'
  prefs: []
  type: TYPE_NORMAL
- en: '***What is the lithological variation of the Zechstein Group within this dataset?***'
  prefs: []
  type: TYPE_NORMAL
- en: This provides us with our starting point.
  prefs: []
  type: TYPE_NORMAL
- en: We know that we are looking for lithology data and data within the Zechstein
    Group.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries and Loading Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To begin, we first need to import a number of key libraries.
  prefs: []
  type: TYPE_NORMAL
- en: These are [pandas](https://pandas.pydata.org/), for loading and storing our
    data, [numpy](https://numpy.org/) for performing mathematical calculations to
    allow us to plot labels and data in a polar projections, [matplotlib](https://matplotlib.org/)
    for creating our plot, and [adjustText](https://adjusttext.readthedocs.io/en/latest/)
    to ensure labels do not overlap on our scatter plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After the libraries have been imported, we next need to load our datasets. Details
    of the source for this dataset is included at the bottom of this article.
  prefs: []
  type: TYPE_NORMAL
- en: The first dataset we will load is the lithology composition of the Zechstein
    Group created in my [previous article](https://medium.com/p/94192f5631c0).
  prefs: []
  type: TYPE_NORMAL
- en: We can load this data in using pandas `read_csv()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When we view our dataframe we have the following information about the lithologies
    present within the Zechstein Group as interpreted within each well.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/222c7d2b2ba85f73852aaacc22668f13.png)'
  prefs: []
  type: TYPE_IMG
- en: Pandas dataframe containing lithology composition for eight wells that have
    penetrated the Zechstein Group. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: To help our readers understand the data better, it would be good to have information
    about where the drilled wells intersected with the Zechstein Group.
  prefs: []
  type: TYPE_NORMAL
- en: We can load this data in the same way by using `pd.read_csv()`. However, this
    time, we do not need to set an index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When we view this dataframe we are presented with the following table containing
    the well name, the X & Y grid locations of where the well penetrated the Zechstein
    Group.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1948913096d79d18ab5b0088a048a1af.png)'
  prefs: []
  type: TYPE_IMG
- en: Pandas dataframe of the X & Y grid locations of where wells have penetrated
    the Zechstein Group.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing and Creating the Infographic with Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we begin creating any figures, we need to create a few variables containing
    key information about our data. This will make things easier when it comes to
    making the plots.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will get a list of all of the possible lithologies. This is done by
    converting the column names within our summary dataframe to a list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When we view this list, we get back the following lithologies.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/250eae5cf3195fbb7665fe374f21ce55.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we need to decide how we want the individual plots within the infographic
    to be set up.
  prefs: []
  type: TYPE_NORMAL
- en: For this dataset, we have 8 wells, which will be used to generate 8 radial bar
    charts.
  prefs: []
  type: TYPE_NORMAL
- en: We also want to show well locations on the same figure as well. So this gives
    us 9 subplots.
  prefs: []
  type: TYPE_NORMAL
- en: One way we can subdivide our figure is to have 3 columns and 3 rows. This allows
    us to create our first variable, `num_cols` representing the number of columns.
  prefs: []
  type: TYPE_NORMAL
- en: We can then generalise the number of rows ( `num_rows` ) variable so that we
    can reuse it with other datasets. In this example, it will take the number of
    wells we have (the number of rows in the dataframe) and divide it by the number
    of columns we want. Using `np.ceil` will allow us to round this number up so that
    we have all of the plots on the figure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The next set of variables we need to declare are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`indexes` : creates a list of numbers ranging from 0 to the total number of
    items in our list. In our case, this will generate a list from 0 to 7, which covers
    the 8 lithologies in our dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`width` : creates a list based on calculating the width of each bar in the
    chart by dividing the circumference of a circle by the number of rock types we
    have in `rock_names`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`angles` : creates a list containing the angles for each of the rock types'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`colours` : a list of hexadecimal colours we want to use to represent each
    well'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label_loc` : creates a list of evenly spaced values between 0 and 2 * pi for
    displaying the rock-type labels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Creating the Infographic with Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding Radial Bar Charts as Subplots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin creating our infographic, we first need to create a figure object.
    This is done by calling upon `plt.figure()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To setup our figure, we need to pass in a few parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`figsize` : controls the size of the infographic. As we may have varying numbers
    of rows, we can set the rows parameter to be a multiple of the number of rows.
    This will prevent the plots and figures from becoming distorted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`linewidth` : controls the border thickness for the figure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`edgecolor` : sets the border colour'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`facecolor` : sets the figure background colour'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Next, we need to define our grid layout. There are a few ways we can do this,
    but for this example, we are going to use `[GridSpec](https://matplotlib.org/stable/api/_as_gen/matplotlib.gridspec.GridSpec.html)`.
    This will allow us to specify the location of the subplots, and also the spacing
    between them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We are now ready to begin adding our radial bar plots.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we need to loop over each row within the lithology composition summary
    dataframe and add an axis to the grid using `add_subplot()` As we are plotting
    radial bar charts, we want to set the `projection` parameter to `polar`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can begin adding our data to the plot by calling upon `ax.bar`. Within
    this call, we pass in:'
  prefs: []
  type: TYPE_NORMAL
- en: '`angles` : provides the location of the bar in the polar projection and is
    also used to position the lithology labels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`height` : uses the percentage values for the current row to set the height
    of each bar'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`width` : used to set the width of the bar'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`edgecolor` : sets the edge colour of the radial bars'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zorder` : used to set the plotting order of the bars on the figure. In this
    case it is set to 2, so that it sits in the top layer of the figure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alpha` : used to set the transparency of the bars'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color` : sets the colour of the bar based on the colours list defined earlier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then repeat the process of adding bars in order to add a background fill
    to the radial bar plot. Instead of setting the height to a value from the table,
    we can set it to 100 so that it fills the entire area.
  prefs: []
  type: TYPE_NORMAL
- en: The next part of the set involves setting up the labels, subplot titles, and
    grid colours.
  prefs: []
  type: TYPE_NORMAL
- en: For the lithology labels, we need to create a for loop that will allow us to
    position the labels at the correct angle around the edge of the polar plot.
  prefs: []
  type: TYPE_NORMAL
- en: Within this loop, we need to check what the current angle is within the loop.
    If the angle of the bar is less than pi, then 90 degrees is subtracted from the
    rotation angle. Otherwise, if the bar is in the bottom half of the circle, 90
    degrees is added to the rotation angle. This will allow the labels on the left
    and right-hand sides of the plot to be easily read.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: When we run the code at this point, we get back the following image containing
    all 8 wells.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4335b89ed6a668a3d096c6734a77074d.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib figure with radial bar charts displaying lithology percentages for
    8 wells from the Norwegian Continental Shelf. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Scatter Plot as a Subplot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see above, we have a gap within the figure in the bottom right. This
    is where we will place our scatter plot showing the locations of the wells.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we can add a new subplot outside of the for loop. As we want this
    to be the last plot on our figure, we need to subtract 1 from `num_rows` and `num_cols`.
  prefs: []
  type: TYPE_NORMAL
- en: We then add the scatter plot to the axis by calling upon `ax.scatter()` and
    passing in the X and Y locations from the `zechstein_well_intersections` dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: The remainder of the code involves adding labels to the x and y axis, setting
    the tick formatting, and setting the edges (spines) of the scatterplot to white.
  prefs: []
  type: TYPE_NORMAL
- en: As we have 1 well that does not have location information, we can add a small
    footnote to the scatterplot informing the reader of this fact.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we need to add the well names as labels so that our readers can understand
    what each marker is. We can do this as part of a for loop and add the labels to
    a list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: When we run our plotting code, we will have the following figure. We can now
    see all eight wells represented as a radial bar chart and their locations represented
    by a scatter plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5a8ca2f3a7d2bd3b2d592ba259415153.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib radial bar charts and a scatter plot all within a single figure.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We do have one issue we need to resolve, and that is the positions of the labels.
    Currently, they are overlapping the data points, the spines and other labels.
  prefs: []
  type: TYPE_NORMAL
- en: We can resolve this by using the adjustText library we imported earlier. This
    library will work out the best label position to avoid any of these issues.
  prefs: []
  type: TYPE_NORMAL
- en: To use this, all we need to do is call upon `adjust_text` and pass in the labels
    list we created in the previous for loop. To reduce the amount of overlap, we
    can use the `expand_points` and `expand_objects` parameters. For this example,
    a value of 1.2 works well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/157f6cf0176e2e76ccb8b533a630e99c.png)'
  prefs: []
  type: TYPE_IMG
- en: Scatter plot showing well locations and associated labels after using the adjustText
    library. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Footnotes and Figure Titles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To finish our infographic, we need to give the reader some extra information.
  prefs: []
  type: TYPE_NORMAL
- en: We will add a footnote to the figure to show where the data was sourced from
    and who created it.
  prefs: []
  type: TYPE_NORMAL
- en: To help the reader understand what the infographic is about, we can add a title
    using `plt.suptitle` and a subtitle using `fig.text`. This will instantly tell
    the reader what they can expect when looking at the charts.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: After finishing the plotting code, we will end up with a matplotlib figure like
    the one below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2cfc32d21fbf1acc86ca5a2ded4f8677.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib infographic showing lithology variation for the Zechstein Group on
    the Norwegian Continental Shelf. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We have all the radial bar charts on display and where each of the wells is
    located. This allows the reader to understand any spatial variation between the
    wells, which in turn may help explain variances within the data.
  prefs: []
  type: TYPE_NORMAL
- en: For example, Well 15/9–13 is located on the area's western side and is composed
    of a mixture of dolomite, anhydrite and shale. Whereas well 17/11–1 is located
    on the easter side of the area and is predominantly composed of halite. This could
    be attributable to different depositional environments across the region.
  prefs: []
  type: TYPE_NORMAL
- en: Full Code for Infographic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The full code for the infographic is displayed below, with each of the main
    sections commented.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Infographics are a great way to summarise data and present it to readers in
    a compelling and interesting way without them having to worry about the raw numbers.
    It is also a great way to tell stories about your data.
  prefs: []
  type: TYPE_NORMAL
- en: At first, you may not think matplotlib is geared up for creating infographics,
    but with some practice, time and effort, it is definitely possible.
  prefs: []
  type: TYPE_NORMAL
- en: Dataset Used in this Tutorial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Training dataset used as part of a Machine Learning competition run by Xeek
    and FORCE 2020 *(Bormann et al., 2020)*. This dataset is licensed under Creative
    Commons Attribution 4.0 International.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full dataset can be accessed at the following link: [https://doi.org/10.5281/zenodo.4351155](https://doi.org/10.5281/zenodo.4351155).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Secondly, you can get the full Medium experience and support thousands of
    other writers and me by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the fantastic Medium articles, as well as the
    chance to make money with your writing.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support.*'
  prefs: []
  type: TYPE_NORMAL
