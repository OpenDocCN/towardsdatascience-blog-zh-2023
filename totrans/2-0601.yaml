- en: Creating an Infographic With Matplotlib
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/creating-an-infographic-with-matplotlib-3c5ece11bedc](https://towardsdatascience.com/creating-an-infographic-with-matplotlib-3c5ece11bedc)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Geological Lithology Variations Within The Zechstein Group of the Norwegian
    Continental Shelf
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----3c5ece11bedc--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----3c5ece11bedc--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3c5ece11bedc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3c5ece11bedc--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----3c5ece11bedc--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3c5ece11bedc--------------------------------)
    ·14 min read·Jul 3, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/05d1ac94916e325b290124a12e01d9cd.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: Radial bar plots of lithology variation across the Norwegian Continental Shelf.
    Image by the author.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Creating exciting and compelling data visualisations is essential to working
    with data and being a data scientist. It allows us to provide information to readers
    in a concise form that helps the reader(s) understand data without them having
    to view the raw data values. Additionally, we can use charts and graphs to tell
    a compelling and interesting story that answers one or more questions about the
    data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Within the Python world, there are numerous libraries that allow data scientists
    to create visualisations and one of the first that many come across when starting
    their data science journey is [matplotlib](https://matplotlib.org/). However,
    after working with [matplotlib](https://matplotlib.org/) for a little while, many
    people turn to other more modern libraries as they view the basic matplotlib plots
    as boring and basic.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: With a bit of time, effort, code, and an understanding of [matplotlib’s](https://matplotlib.org/)
    capabilities, we can transform the basic and boring plots into something much
    more compelling and visually appealing.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'In my past several articles, I have focused on how we can transform individual
    plots with various styling methods. If you want to explore improving matplotlib
    data visualisations further, you can check out some of my previous articles below:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[Upgrade Your Data Visualisations: 4 Python Libraries to Enhance Your Matplotlib
    Charts](https://medium.com/p/74361bc3b92e)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Cyberpunking Your Matplotlib Figures](https://medium.com/p/96f4d473185d)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Enhance Your Polar Bar Charts with Matplotlib](https://medium.com/p/c08e332ec01c)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Create Stunning Radar Plots With Matplotlib](https://medium.com/p/6a8e05054ff9)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These articles have mainly focused on single plots and styling them. Within
    this article, we are going to look at building infographics with matplotlib.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Infographics are used to transform complex datasets into compelling visual narratives
    that are informative and engaging for the reader. They visually represent data
    and consist of charts, tables and minimal text. Combining these allows us to provide
    an easy-to-understand overview of a topic or question.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: After sharing my previous article on [Polar Bar charts](https://medium.com/p/c08e332ec01c),
    I was tagged in a tweet from Russell Forbes, showing that it is possible to make
    infographics within matplotlib.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: So, based on that, I thought to myself, why not try building an infographic
    with matplotlib.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: And I did.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: The following infographic was the result of that, and it is what we will be
    recreating in this article.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2cfc32d21fbf1acc86ca5a2ded4f8677.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: Example infographic that can be created using matplotlib. Image by the author.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Bear in mind that the infographic we will be building in this article may be
    suitable for web use or included within a presentation. However, if we were looking
    to include these within reports or display them in more formal settings, we may
    want to consider alternative colour palettes and a more professional feel.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: The Goal of the Infographic
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we touch any data visualisation, we need to understand the purpose behind
    creating our infographic. Without this, it will be challenging to narrow down
    the plots we want to use and the story we want to tell.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we are going to use a set of well log derived lithology measurements
    that have been obtained from the Norwegian Continental Shelf. From this dataset,
    we are going to specifically look at the question:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '***What is the lithological variation of the Zechstein Group within this dataset?***'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: This provides us with our starting point.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: We know that we are looking for lithology data and data within the Zechstein
    Group.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries and Loading Data
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To begin, we first need to import a number of key libraries.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: These are [pandas](https://pandas.pydata.org/), for loading and storing our
    data, [numpy](https://numpy.org/) for performing mathematical calculations to
    allow us to plot labels and data in a polar projections, [matplotlib](https://matplotlib.org/)
    for creating our plot, and [adjustText](https://adjusttext.readthedocs.io/en/latest/)
    to ensure labels do not overlap on our scatter plot.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After the libraries have been imported, we next need to load our datasets. Details
    of the source for this dataset is included at the bottom of this article.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: The first dataset we will load is the lithology composition of the Zechstein
    Group created in my [previous article](https://medium.com/p/94192f5631c0).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: We can load this data in using pandas `read_csv()` function.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When we view our dataframe we have the following information about the lithologies
    present within the Zechstein Group as interpreted within each well.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/222c7d2b2ba85f73852aaacc22668f13.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/222c7d2b2ba85f73852aaacc22668f13.png)'
- en: Pandas dataframe containing lithology composition for eight wells that have
    penetrated the Zechstein Group. Image by the author.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 数据框，包含穿越 Zechstein Group 的八口井的岩性组成。图片由作者提供。
- en: To help our readers understand the data better, it would be good to have information
    about where the drilled wells intersected with the Zechstein Group.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助读者更好地理解数据，我们最好提供有关钻探井与 Zechstein Group 交汇处的信息。
- en: We can load this data in the same way by using `pd.read_csv()`. However, this
    time, we do not need to set an index.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用 `pd.read_csv()` 以相同的方式加载这些数据。然而，这次我们不需要设置索引。
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When we view this dataframe we are presented with the following table containing
    the well name, the X & Y grid locations of where the well penetrated the Zechstein
    Group.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看这个数据框时，会呈现出以下表格，包含井名、井穿越 Zechstein Group 的 X 和 Y 网格位置。
- en: '![](../Images/1948913096d79d18ab5b0088a048a1af.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1948913096d79d18ab5b0088a048a1af.png)'
- en: Pandas dataframe of the X & Y grid locations of where wells have penetrated
    the Zechstein Group.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 数据框，包含钻探穿越 Zechstein Group 的井的 X 和 Y 网格位置。
- en: Preparing and Creating the Infographic with Matplotlib
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Matplotlib 准备和创建信息图
- en: Before we begin creating any figures, we need to create a few variables containing
    key information about our data. This will make things easier when it comes to
    making the plots.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始创建任何图形之前，我们需要创建几个包含关于数据的关键信息的变量。这将使绘制图表的过程更容易。
- en: First, we will get a list of all of the possible lithologies. This is done by
    converting the column names within our summary dataframe to a list.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将获得所有可能的岩性列表。这是通过将汇总数据框中的列名转换为列表来完成的。
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When we view this list, we get back the following lithologies.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看这个列表时，我们会得到以下岩性。
- en: '![](../Images/250eae5cf3195fbb7665fe374f21ce55.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/250eae5cf3195fbb7665fe374f21ce55.png)'
- en: Next, we need to decide how we want the individual plots within the infographic
    to be set up.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要决定如何设置信息图中的单独图表。
- en: For this dataset, we have 8 wells, which will be used to generate 8 radial bar
    charts.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个数据集，我们有 8 口井，这将用于生成 8 个径向条形图。
- en: We also want to show well locations on the same figure as well. So this gives
    us 9 subplots.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望在同一图形上显示井的位置。所以这给我们 9 个子图。
- en: One way we can subdivide our figure is to have 3 columns and 3 rows. This allows
    us to create our first variable, `num_cols` representing the number of columns.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过设置 3 列和 3 行来对图形进行细分。这允许我们创建第一个变量 `num_cols`，表示列数。
- en: We can then generalise the number of rows ( `num_rows` ) variable so that we
    can reuse it with other datasets. In this example, it will take the number of
    wells we have (the number of rows in the dataframe) and divide it by the number
    of columns we want. Using `np.ceil` will allow us to round this number up so that
    we have all of the plots on the figure.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以将行数（`num_rows`）变量进行泛化，以便可以在其他数据集上重复使用。在这个示例中，它将获取我们拥有的井数（数据框中的行数），并将其除以我们想要的列数。使用
    `np.ceil` 将允许我们将这个数字向上取整，以便在图形上显示所有图表。
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The next set of variables we need to declare are as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要声明的下一组变量如下：
- en: '`indexes` : creates a list of numbers ranging from 0 to the total number of
    items in our list. In our case, this will generate a list from 0 to 7, which covers
    the 8 lithologies in our dataset.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`indexes` : 创建一个从 0 到列表中总项数的数字列表。在我们的例子中，这将生成一个从 0 到 7 的列表，涵盖数据集中的 8 种岩性。'
- en: '`width` : creates a list based on calculating the width of each bar in the
    chart by dividing the circumference of a circle by the number of rock types we
    have in `rock_names`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`width` : 创建一个基于计算图表中每个条形的宽度的列表，通过将圆的周长除以 `rock_names` 中的岩石类型数量来完成'
- en: '`angles` : creates a list containing the angles for each of the rock types'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`angles` : 创建一个包含每种岩石类型角度的列表'
- en: '`colours` : a list of hexadecimal colours we want to use to represent each
    well'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colours` : 我们希望用来表示每口井的十六进制颜色列表'
- en: '`label_loc` : creates a list of evenly spaced values between 0 and 2 * pi for
    displaying the rock-type labels'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label_loc` : 创建一个在 0 和 2 * pi 之间均匀间隔的值列表，用于显示岩石类型标签'
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating the Infographic with Matplotlib
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Matplotlib 创建信息图
- en: Adding Radial Bar Charts as Subplots
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加径向条形图作为子图
- en: To begin creating our infographic, we first need to create a figure object.
    This is done by calling upon `plt.figure()`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始创建信息图之前，我们首先需要创建一个图形对象。这是通过调用 `plt.figure()` 来完成的。
- en: 'To setup our figure, we need to pass in a few parameters:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '`figsize` : controls the size of the infographic. As we may have varying numbers
    of rows, we can set the rows parameter to be a multiple of the number of rows.
    This will prevent the plots and figures from becoming distorted.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`linewidth` : controls the border thickness for the figure'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`edgecolor` : sets the border colour'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`facecolor` : sets the figure background colour'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next, we need to define our grid layout. There are a few ways we can do this,
    but for this example, we are going to use `[GridSpec](https://matplotlib.org/stable/api/_as_gen/matplotlib.gridspec.GridSpec.html)`.
    This will allow us to specify the location of the subplots, and also the spacing
    between them.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We are now ready to begin adding our radial bar plots.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we need to loop over each row within the lithology composition summary
    dataframe and add an axis to the grid using `add_subplot()` As we are plotting
    radial bar charts, we want to set the `projection` parameter to `polar`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can begin adding our data to the plot by calling upon `ax.bar`. Within
    this call, we pass in:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '`angles` : provides the location of the bar in the polar projection and is
    also used to position the lithology labels'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`height` : uses the percentage values for the current row to set the height
    of each bar'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`width` : used to set the width of the bar'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`edgecolor` : sets the edge colour of the radial bars'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zorder` : used to set the plotting order of the bars on the figure. In this
    case it is set to 2, so that it sits in the top layer of the figure'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alpha` : used to set the transparency of the bars'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color` : sets the colour of the bar based on the colours list defined earlier'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then repeat the process of adding bars in order to add a background fill
    to the radial bar plot. Instead of setting the height to a value from the table,
    we can set it to 100 so that it fills the entire area.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: The next part of the set involves setting up the labels, subplot titles, and
    grid colours.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: For the lithology labels, we need to create a for loop that will allow us to
    position the labels at the correct angle around the edge of the polar plot.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Within this loop, we need to check what the current angle is within the loop.
    If the angle of the bar is less than pi, then 90 degrees is subtracted from the
    rotation angle. Otherwise, if the bar is in the bottom half of the circle, 90
    degrees is added to the rotation angle. This will allow the labels on the left
    and right-hand sides of the plot to be easily read.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When we run the code at this point, we get back the following image containing
    all 8 wells.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4335b89ed6a668a3d096c6734a77074d.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: Matplotlib figure with radial bar charts displaying lithology percentages for
    8 wells from the Norwegian Continental Shelf. Image by the author.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Scatter Plot as a Subplot
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see above, we have a gap within the figure in the bottom right. This
    is where we will place our scatter plot showing the locations of the wells.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we can add a new subplot outside of the for loop. As we want this
    to be the last plot on our figure, we need to subtract 1 from `num_rows` and `num_cols`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: We then add the scatter plot to the axis by calling upon `ax.scatter()` and
    passing in the X and Y locations from the `zechstein_well_intersections` dataframe.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: The remainder of the code involves adding labels to the x and y axis, setting
    the tick formatting, and setting the edges (spines) of the scatterplot to white.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: As we have 1 well that does not have location information, we can add a small
    footnote to the scatterplot informing the reader of this fact.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we need to add the well names as labels so that our readers can understand
    what each marker is. We can do this as part of a for loop and add the labels to
    a list.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When we run our plotting code, we will have the following figure. We can now
    see all eight wells represented as a radial bar chart and their locations represented
    by a scatter plot.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5a8ca2f3a7d2bd3b2d592ba259415153.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: Matplotlib radial bar charts and a scatter plot all within a single figure.
    Image by the author.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: We do have one issue we need to resolve, and that is the positions of the labels.
    Currently, they are overlapping the data points, the spines and other labels.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: We can resolve this by using the adjustText library we imported earlier. This
    library will work out the best label position to avoid any of these issues.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: To use this, all we need to do is call upon `adjust_text` and pass in the labels
    list we created in the previous for loop. To reduce the amount of overlap, we
    can use the `expand_points` and `expand_objects` parameters. For this example,
    a value of 1.2 works well.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/157f6cf0176e2e76ccb8b533a630e99c.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
- en: Scatter plot showing well locations and associated labels after using the adjustText
    library. Image by the author.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Adding Footnotes and Figure Titles
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To finish our infographic, we need to give the reader some extra information.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: We will add a footnote to the figure to show where the data was sourced from
    and who created it.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: To help the reader understand what the infographic is about, we can add a title
    using `plt.suptitle` and a subtitle using `fig.text`. This will instantly tell
    the reader what they can expect when looking at the charts.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: After finishing the plotting code, we will end up with a matplotlib figure like
    the one below.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2cfc32d21fbf1acc86ca5a2ded4f8677.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: Matplotlib infographic showing lithology variation for the Zechstein Group on
    the Norwegian Continental Shelf. Image by the author.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: We have all the radial bar charts on display and where each of the wells is
    located. This allows the reader to understand any spatial variation between the
    wells, which in turn may help explain variances within the data.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: For example, Well 15/9–13 is located on the area's western side and is composed
    of a mixture of dolomite, anhydrite and shale. Whereas well 17/11–1 is located
    on the easter side of the area and is predominantly composed of halite. This could
    be attributable to different depositional environments across the region.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，15/9–13 井位于该地区的西侧，由白云岩、无水石膏和页岩混合组成。而 17/11–1 井位于该地区的东侧，主要由盐岩组成。这可能与该区域不同的沉积环境有关。
- en: Full Code for Infographic
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信息图的完整代码
- en: The full code for the infographic is displayed below, with each of the main
    sections commented.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 信息图的完整代码如下展示，每个主要部分都附有注释。
- en: '[PRE12]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Infographics are a great way to summarise data and present it to readers in
    a compelling and interesting way without them having to worry about the raw numbers.
    It is also a great way to tell stories about your data.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 信息图是总结数据并以引人入胜的方式呈现给读者的绝佳方法，而不必担心原始数字。这也是讲述数据故事的好方法。
- en: At first, you may not think matplotlib is geared up for creating infographics,
    but with some practice, time and effort, it is definitely possible.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，你可能觉得 matplotlib 不适合制作信息图，但经过一些练习、时间和努力，这完全是可能的。
- en: Dataset Used in this Tutorial
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本教程中使用的数据集
- en: Training dataset used as part of a Machine Learning competition run by Xeek
    and FORCE 2020 *(Bormann et al., 2020)*. This dataset is licensed under Creative
    Commons Attribution 4.0 International.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 训练数据集作为 Xeek 和 FORCE 2020 举办的机器学习竞赛的一部分使用 *(Bormann et al., 2020)*。该数据集在 Creative
    Commons Attribution 4.0 International 许可下提供。
- en: 'The full dataset can be accessed at the following link: [https://doi.org/10.5281/zenodo.4351155](https://doi.org/10.5281/zenodo.4351155).'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的数据集可以通过以下链接访问：[https://doi.org/10.5281/zenodo.4351155](https://doi.org/10.5281/zenodo.4351155)。
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢阅读。在离开之前，你一定要订阅我的内容，并将我的文章送到你的收件箱里。* [***你可以在这里订阅！***](https://andymcdonaldgeo.medium.com/subscribe)'
- en: '*Secondly, you can get the full Medium experience and support thousands of
    other writers and me by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the fantastic Medium articles, as well as the
    chance to make money with your writing.*'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*其次，你可以通过注册会员获得完整的 Medium 体验，并支持数千名其他作家和我。它每月仅需 $5，你可以完全访问所有精彩的 Medium 文章，还有机会通过你的写作赚取收入。*'
- en: '*If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support.*'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你通过* [***我的链接***](https://andymcdonaldgeo.medium.com/membership)***注册，***
    *你将直接通过你的费用的一部分支持我，并且不会花费你更多。如果你这样做，非常感谢你的支持。*'
