- en: Geospatial Data Analysis in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/geospatial-data-analysis-in-python-d8fa8dd23a6c](https://towardsdatascience.com/geospatial-data-analysis-in-python-d8fa8dd23a6c)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Getting started with performing geographical data analysis in Python using OSMnx
    and Kepler.gl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://pierpaoloippolito28.medium.com/?source=post_page-----d8fa8dd23a6c--------------------------------)[![Pier
    Paolo Ippolito](../Images/981abb84149adab275473b76bdbde66f.png)](https://pierpaoloippolito28.medium.com/?source=post_page-----d8fa8dd23a6c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d8fa8dd23a6c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d8fa8dd23a6c--------------------------------)
    [Pier Paolo Ippolito](https://pierpaoloippolito28.medium.com/?source=post_page-----d8fa8dd23a6c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d8fa8dd23a6c--------------------------------)
    ·6 min read·May 3, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/be6e1af4ad9aced3d0d8e7b54d7033c3.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Aaron Burden](https://unsplash.com/@aaronburden?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Geospatial data is ubiquitous and used for many different applications across
    all businesses (e.g. calculating the risk of properties depending on their location,
    designing new architecture development, planning shipment of goods, and finding
    possible routes between different locations).
  prefs: []
  type: TYPE_NORMAL
- en: 'Geospatial data is typically stored in two possible formats: **Raster** and
    **Vector**:'
  prefs: []
  type: TYPE_NORMAL
- en: Rasters represent data as a matrix of pixels (therefore having a fixed resolution).
    In this representation, each pixel can be assigned a different value and multiple
    grids stacked together can be used in order to augment even more the same image.
    For example, the same image could be stored using 3 channels/bands (e.g. RGB —
    Red, Green, Blue) or with a single channel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vectors can be used to abstract geometries of the real-world using elements
    such as points, lines, polygons, etc… and they can usually be stored in conjunction
    with some useful metadata about the objects they are representing (e.g. name,
    address, owner, etc…). Since they are stored as mathematical objects, it is possible
    to zoom in on vectors without compromising resolution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vector data is typically stored in file formats such as SVG and Shapefiles,
    while raster data in TIFF, JPG, PNG, etc…
  prefs: []
  type: TYPE_NORMAL
- en: 'When working with geospatial data, many different forms of operations/transformations
    are usually required, some examples are:'
  prefs: []
  type: TYPE_NORMAL
- en: Conversion from non-tabular/raw binary formats to vector/raster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bucketing continuous data into discrete categories.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extracting polygons/features from data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling no data and outliers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reprojecting in different coordinate systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating lower resolution overviews of data to handle different zoom levels
    and not overloading rendering of images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are interested in learning specifically how image data can be used in
    Machine Learning systems, you can find additional information in [my previous
    article](https://pierpaolo28.github.io/blog/blog39/).
  prefs: []
  type: TYPE_NORMAL
- en: Demonstration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As part of this article, we are now going to walk through a practical demonstration
    of how to analyze geospatial vector data to identify a specific location and calculate
    the shortest path to reach it. All the code used throughout this article (and
    more!) is available on [my GitHub](https://github.com/pierpaolo28) and [Kaggle
    accounts](https://www.kaggle.com/pierpaolo28).
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we need to make sure we have all the dependencies necessary installed
    in our environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we are going to explore the Altstadt district in Zurich (Switzerland).
    Making use of ***OSMnx*** it can be as easy as using two lines of code to retrieve
    and visualize the data we need (Figure 1). [OSMnx](https://osmnx.readthedocs.io/en/stable/)
    has in fact been designed to fetch and use [OpenStreetMap](https://www.openstreetmap.org/#map=6/42.088/12.564)
    data in the simplest way possible. OpenStreetMap is a free worldwide geographic
    database maintained by a community of volunteers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/34f5554f3604074c0383ecda62ec460b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Graph of the area under examination (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to dig into the different ways we can retrieve our data. First
    of all, we can get the polygon of the area we are representing as a base for our
    exploration. Once retrieved the data, it is then represented in a [***Geo Pandas***](https://geopandas.org/en/stable/)
    data frame containing all the information of interest about the area (Figure 2).
    Geo Pandas is an open-source library specifically designed to extend Pandas capabilities
    to handle geospatial data.
  prefs: []
  type: TYPE_NORMAL
- en: In order to create any visual representation, the ***geometry*** column is used
    as a point of reference, in each row of this column are in fact represented all
    the coordinates necessary to create an object on a map (e.g. Polygon, Line, Point,
    MultiPolygon). In this example, [***Well-known text***](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry)
    ***(WKT)*** is used as the text markup language for representing our vector geometry
    objects but other formats can generally be used such as ***GeoJSON***. Additionally,
    each of these values in the GeoSeries is stored in a [***Shapely Object***](https://shapely.readthedocs.io/en/stable/manual.html)
    so that to make it as easy as possible to perform operations and transformations
    on it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a1aaf62b167607f8df8d8fc8d1749361.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: GeoPandas dataset example (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we can just repeat the same procedure to retrieve different points
    of interest we want to plot on our map. In this case, let’s imagine we are in
    Altstadt, Zurich for a holiday and we want to examine all the options we have
    to go to a restaurant. In order to make our research easier we can then get all
    the nodes and edges that represent the streets in the districts and all the buildings
    and restaurants available so that we can orient ourselves on the map.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once we’ve loaded all the data, we can then plot each of the characteristics
    independently (Figure 3).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/59c1d595bf74705f2afca872944e1895.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Area, Buildings, Restaurants, Nodes, and Edges representation (Image
    by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: Using the code below, this can finally be nicely summarized in the single graph
    shown below (Figure 4).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a24f7bf194ca598f4f9adc6430bcde32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: Analysis Summary (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: In order to make our analysis more interactive, we could then also make use
    of additional libraries such as ***KeplerGL***. [KeplerGL](https://kepler.gl/)
    is an open-source Geospatial toolbox developed by Uber to create high-performance
    web-based geo applications.
  prefs: []
  type: TYPE_NORMAL
- en: Using KeplerGL it can then be really easy for us to overlap our map on a real
    worldwide map and apply various transformations and filtering on it on the fly
    (Figure 5).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/29c2c7d66694442d57677ef0e690d4ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: Interactive Analysis Summary with KaplerGL (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have constructed our map and we have an interactive tool to examine
    that data we can finally try to narrow down our research to a single restaurant.
    In this case, we first restrict our focus to just Italian restaurants and then
    select Antica Roma as our place of choice.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we just need to specify our initial position coordinates and place of destination
    to start looking for the best path to walk through (Figure 6).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3e85ce14add8b05d0d4c8eebedb432fc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: Starting Position representation (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: In order to perform this task, we can make use of [***Networkx***](https://networkx.org/)
    ***shortest_path function*** to automatically run the [***Dijkstra algorithm***](https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm)
    and try to optimize our path to minimize its overall length (Figure 7).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/71664899de676542a6c669f275b5949f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7: Shortest Path to destination (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, to validate our research we can try to perform the same query on Google
    Maps and as shown below the results are pretty close to each other! (Figure 8).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1909937f2009a0d8eb4dc676bb8fc5d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8: Google Maps Shortest Path to destination (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To summarize, in this article, we first introduced how Geospatial data is used
    across businesses, how it is typically stored/processed, and went through a practical
    example in order to identify the shortest paths between two different points.
    Of course, we can perform a similar kind of analysis using UI based tools such
    as the [OpenStreetMap App](https://www.openstreetmap.org/#map=14/47.3408/8.5400)
    or [Google Maps](https://www.google.ch/maps/), although learning these foundations
    can still be extremely valuable as they can be applied in many other forms of
    network-based problems (e.g. [Travel Salesman Problem](https://en.wikipedia.org/wiki/Travelling_salesman_problem)).
  prefs: []
  type: TYPE_NORMAL
- en: Contacts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to keep updated with my latest articles and projects [follow me
    on Medium](https://pierpaoloippolito28.medium.com/subscribe) and subscribe to
    my [mailing list](http://eepurl.com/gwO-Dr). These are some of my contacts details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Linkedin](https://uk.linkedin.com/in/pier-paolo-ippolito-202917146)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Personal Website](https://pierpaolo28.github.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Medium Profile](https://towardsdatascience.com/@pierpaoloippolito28)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GitHub](https://github.com/pierpaolo28)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Kaggle](https://www.kaggle.com/pierpaolo28)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
