- en: 'Introducing the Crystal Bar Chart: Visualizing Sequential Differential Clustering'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/introducing-the-crystal-bar-chart-visualizing-sequential-differential-clustering-21faa4a3fed1](https://towardsdatascience.com/introducing-the-crystal-bar-chart-visualizing-sequential-differential-clustering-21faa4a3fed1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn about Crystal Bar Charts and create your own with Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@nickgerend?source=post_page-----21faa4a3fed1--------------------------------)[![Nick
    Gerend](../Images/716eb183008674ac46c6aee96093c4b3.png)](https://medium.com/@nickgerend?source=post_page-----21faa4a3fed1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----21faa4a3fed1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----21faa4a3fed1--------------------------------)
    [Nick Gerend](https://medium.com/@nickgerend?source=post_page-----21faa4a3fed1--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----21faa4a3fed1--------------------------------)
    ·12 min read·Dec 29, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5de7f839aa55031ad3e4a9eec799d12c.png)'
  prefs: []
  type: TYPE_IMG
- en: Crystal Bar Chart by Nick Gerend
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many ways to better understand a series of data. Whether it be a set
    of temperatures, test scores, grocery prices, step counts or UFO sightings, there’s
    always something to learn about the nature of something through the lens of data
    analysis and visualization.
  prefs: []
  type: TYPE_NORMAL
- en: In the following, I’ll describe a new technique for visualizing a series of
    data that uses simple threshold-based clustering. I hope you’ll find it to be
    a fresh approach to pair with conventional methods of visualization like histograms
    and box plots for gathering a new perspective on a feature of interest.
  prefs: []
  type: TYPE_NORMAL
- en: Sequential Differential Clustering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Numerically
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'How does one set itself apart? In terms of a single numerical attribute, let’s
    assume a simple threshold is the standard by which ordered values are compared
    to one another and separated into groups. Take for example the following sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[ 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 , 89 , 144 ]'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is of course the first 13 digits of the Fibonacci sequence. If we take
    the difference of each value and the prior value in the sequence, starting with
    3rd position, we get the same sequence shifted forward by 2 steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[ _ , _ , 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 ]'
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s set a threshold of 5 and assume anything greater than 5 delineates
    a new cluster as we traverse the sequence from left to right. This would result
    in the first 8 items being grouped together (values of 0–13) with each subsequent
    item being the only item in its group since all remaining differences exceed 5.
  prefs: []
  type: TYPE_NORMAL
- en: For the Fibonacci sequence this method yields a predictable result, but in exploratory
    data analysis all types of patterns may emerge. I’ll describe how to explore these
    patterns with a new type of data visualization, starting with a couple of familiar
    chart types below for comparison.
  prefs: []
  type: TYPE_NORMAL
- en: With a Histogram
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s try to apply the clustering strategy to a histogram by determining the
    number of bins based on the same threshold and reviewing the separation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/06a81e6b5ef2c72ae4d181eb05a1700e.png)'
  prefs: []
  type: TYPE_IMG
- en: Histogram of the Fibonacci sequence (0 to 144) with 29 bins, rendered in Matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: With a Beeswarm Chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let’s visualize each individual value with a beeswarm plot with each circle
    having a diameter equal to the threshold value to look for gaps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/03f47b57c7d0edffe1d21f4f268d1d60.png)'
  prefs: []
  type: TYPE_IMG
- en: Beeswarm Chart of the Fibonacci sequence (0 to 144) with diameters of 5, rendered
    in Matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: Crystal Bar Chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To introduce the Crystal Bar Chart, let’s start by continuing with our previous
    example using alternating shades of gray to illustrate the different clusters
    (we’ll go into detail later):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/35ebc1436cf6da4b641635a9a53ecb32.png)'
  prefs: []
  type: TYPE_IMG
- en: Crystal Bar Chart of the Fibonacci sequence (0 to 144), rendered in Matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: 'For fun, let’s add a arbitrary size property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/44f0f040635ea574c3cedb87f79adc76.png)'
  prefs: []
  type: TYPE_IMG
- en: Crystal Bar Chart of the Fibonacci sequence (0 to 144) with arbitrary attribute
    ‘size’, rendered in Matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s shift the values to see how the chart adapts to the new origin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f86cfcf1eb94e51277662ffd06b12717.png)'
  prefs: []
  type: TYPE_IMG
- en: Crystal Bar Chart of the Fibonacci sequence (0 to 144), adjusted offset = 21,
    rendered in Matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: Inspiration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In October 2020, my wife and I were checking out a data visualization challenge,
    and the data offered was a single feature that contained some duplicates.
  prefs: []
  type: TYPE_NORMAL
- en: My initial thought was to make something that appeared 3-dimentional that resembled
    crystals, and what I ended up with was a simple version of the Crystal Bar Chart.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6f78957a070ff157368aca0337ba7055.png)'
  prefs: []
  type: TYPE_IMG
- en: early Crystal Bar Chart by Nick Gerend, Oct 2020, rendered in Tableau
  prefs: []
  type: TYPE_NORMAL
- en: In 2022, I picked up the idea again and generalized it with threshold-based
    clustering (a sequential differential clustering strategy) to stratify a set of
    values, given a threshold, and alternate a cluster’s crystal formation (representing
    the values in a cluster) around a central axis with each subsequent crystal stacked
    next to its offset (once removed) neighbor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Skyscrapers¹ seemed to be a good dataset to start with and became my first
    test of the new algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1965e53a04f6303556e701294973203c.png)'
  prefs: []
  type: TYPE_IMG
- en: “Skyline” by Nick Gerend (4/10/2022)
  prefs: []
  type: TYPE_NORMAL
- en: Next, I’ll describe the key features of the Crystal Bar Chart.
  prefs: []
  type: TYPE_NORMAL
- en: Crystal Bar Chart Algorithm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Drawing the Crystal Bar Chart is a matter of coordinating the points of contact
    of a crystal''s top face to an origin such that the side faces are drawn correctly
    to outline a full crystal for each value in the given set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/743f5440d37f421b00f598844dbeb95b.png)'
  prefs: []
  type: TYPE_IMG
- en: Crystal Bar Chart construct by Nick Gerend
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin with a ***set of values*** and sort them according to preference (ascending
    or descending), for example: 0.2, 1.5, 7.4, 9.4'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adjust the values with a desired ***offset*** (-1.7 for example) to adjust the
    origin’s position
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set a ***threshold value*** (3.5 for example), and group the data according
    to ***sequential differential clustering*** as described previously
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Iterate through each group (outer loop) and each value within a group (inner
    loop), orienting the initial value’s crystal along a ***central axis*** and update
    the staring position for the next crystal based on the item’s range, perpendicular
    to the central axis
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each subsequent value, alternate between right and left placement of crystals
    in a similar way by accounting for the range taken up by the crystal’s top face
    to adjust for the placement of the next alternating crystal (different methods
    for ***sorting and placement on the perpendicular axis*** are under review for
    future updates)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Calculate the points for each face of the crystal (left, right, top):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***top face dimensions***: outlined by the sequential differential clustering
    threshold (height parallel to the central axis) and range according to a size
    attribute (width perpendicular to the central axis)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '***left and right face dimensions***: drawn according to the side-face polygons
    in view, determined by the slopes encountered between points of contact from the
    crystal’s top face and the origin (defaulted to 0,0)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When a new cluster is encountered, reset the starting position and repeat face
    position calculations for each crystal in the cluster
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reverse the offset to remap the values to the original range if desired
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Python Implementation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I’ve made an implementation of my Crystal Bar Chart algorithm available in
    python via my [vizmath](https://pypi.org/project/vizmath/) package on PyPI. Let’s
    break down a couple more options using the initial example above and explain the
    inputs and outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/46102c97134969bba408389b2c9742fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Crystal Bar Chart in reverse ordering with an offset and reset origin, rendered
    with Matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the output from the Crystal Bar Chart algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: id - item identifier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'group - cluster containing items resulting from sequential differential clustering:
    1 to N'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'side - identifier for crystal faces: {0,1,2}'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: value - the item’s value (position of the centroid of the crystal’s top along
    the central axis)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: height - sequential differential clustering threshold (height of the crystal’s
    top face, parallel to the central axis)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: width - secondary value ≥ 0 (width of the crystal’s top face, perpendicular
    to the central axis)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: x, y - Cartesian 2D coordinates for a point in the layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'path - an ordered set of integers that describe the path which encloses a polygon,
    in conjunction with each (x, y) point in the Crystal Bar Chart, for each crystal
    id and face: 1 to N'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d8f0de714b8953789535c5dcf81c41cc.png)'
  prefs: []
  type: TYPE_IMG
- en: Crystal Bar Chart DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: In a future version, I’ll look to incorporate different options for placing
    crystals along the axis perpendicular to the central axis according to different
    sortings, starting positions, etc. to aid in cluster and value comparisons.
  prefs: []
  type: TYPE_NORMAL
- en: Tableau Public Implementation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, I’ll present a tutorial for implementing my Crystal Bar Chart
    visualization in Tableau Public (v 2023.3.0) along with some fun interaction capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: In keeping with the crystal theme, let’s start with a dataset from Wikipedia
    on diamonds². The data contains information on the diamond’s name, uncut and cut
    weight, origin and more. For example purposes, I’ll limit this data to diamonds
    greater than 200 carets with both uncut and cut values that have only one cut
    record.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we’ll use vizmath to create a Crystal Bar Chart and output the drawing
    information and original data to csv files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Import the ***crystal_bar_char.csv*** file into Tableau using the ***Text file***
    option. Then use the ***Add*** link next to ***Connections*** to add the ***data.csv***
    to the ***Files*** list. In the stage to the right, double click on the ***crystal_bar_char.csv***
    pill and drag the ***data.csv*** file from ***Files*** to the stage. With ***Inner
    Join*** selected, select the ***[Id]*** field under the ***Add new join clause***
    dropdown under ***Data Source*** and the ***[Name]*** field under ***data.csv***.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the dataset is prepared, navigate to ***Sheet 1***, and create these
    calculated columns that we’ll use to draw the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '***[chart]****:* MAKEPOINT([Y],[X])'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[chart_top]****:* if [Side] = 0 then MAKEPOINT([Y],[X]) else null end'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Start by dragging ***[chart]*** to ***Detail*** under ***Marks*** to generate
    the first map layer and adjust these options by right clicking in the map area
    and selecting ***Background Layer***s:'
  prefs: []
  type: TYPE_NORMAL
- en: Unselect all ***Background Map Layers*** (Base, Land Cover, etc.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now right click in the map area and select ***Map Options*** and unselect all
    of the options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Close out of ***Background Layers*** and continue with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag ***[Group]***, ***[Id]***, and ***[Side]*** to ***Detail*** under ***Marks***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert what is now ***SUM(Group)*** and ***SUM(Side)*** to ***Dimension***
    and ***Discrete*** by right clicking on each and making the selections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right click on ***[Group]***, select ***Sort***, and select ***Descending***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Under the ***Marks*** dropdown menu select ***Polygon*** (don’t worry if it
    looks strange at this point)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag ***[Path]*** to ***Path*** under ***Marks*** and right click on what’s
    now ***SUM(Path)*** and select ***Dimension***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag ***[Group]*** to ***Color*** and repeat the process for converting it to
    ***Dimension*** and ***Discrete***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Under ***Color*** select “Edit Colors…” and configure with an alternating grayscale
    scheme with a light shade on groups 0 and 2 and darker shade on groups 1 and 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hit OK and adjust the Opacity to 95% with a black border under ***Color***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Drag ***[chart_top]*** into the map area and a pop-up will appear: ***Add a
    Marks Layer -*** drop the pill into this to create a new map layer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeat the steps from above except now use ***[Origin]*** for the ***Color***,
    and adjust the colors as needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Under ***Color***, select a black border and set the opacity to 70%, and right-click
    on the nulls pill at the bottom right of the chart and select ***Hide Indicator***
    to hide the nulls label
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now the chart section is in place and should look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/24e0228439c531acbe49d4c5fb28bf03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s add another chart to use for comparison and interaction:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new worksheet using the first plus sign on the bottom panel to create
    ***Sheet 2***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag ***[Group]*** to ***Columns*** and convert to ***Dimension*** and ***Discrete***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag ***[Name]*** to ***Columns*** and ***[Uncut]*** to ***Rows***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right click on ***[Uncut]*** and select ***Maximum*** under ***Measure***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag ***[Origin]*** to ***Color*** and ***[Cut]*** to ***Size***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right click on ***[Cut]*** and select ***Maximum*** under ***Measure***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Under the ***Format*** menu at the top, select ***Shading…***, and select a
    dark gray color under ***Column Banding*** > ***Header*** with the ***Level***
    tick set to the first notch and theother options set to ***None***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right click on **Group / Name** at the top and select **Hide Field Labels for
    Columns***,*and adjust the legend name and colors as needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Sheet 2*** is ready and should look similar to the following after selecting
    ***Entire View*** from the top menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/37fa232ae8d0c4a18615e1cfac0190e7.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, let’s pull the two Sheets together in a dashboard. After creating the
    dashboard and adding the sheets, set up an action under ***Actions*** in the ***Dashboard***
    top-menu. Click the ***Add Action*** dropdown and select ***Highlight***. Under
    ***Source Sheets*** select ***Sheet 2*** and select ***Sheet 1*** under ***Target
    Sheets***. Under ***Targeted Highlighting*** select ***Selected Fields*** and
    select the ***[Group]*** and ***[Name]*** fields. Finally select the ***Hover***
    option under the ***Run action on*** menu on the right and now the entire dashboard
    will highlight off of hovering over each bar and group on ***Sheet 2***!
  prefs: []
  type: TYPE_NORMAL
- en: 'After adjusting colors and orienting everything in an organized way, here’s
    our new dashboard in Tableau Public:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f9b51913372a1a0b89d3290fc1589b1a.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this article, I’ve given an overview of a new type of data visualization
    that I call the Crystal Bar Chart. This tool is useful for compressing information
    into a small space with overlapping shapes along a central axis that represent
    one dimensional data, grouped by sequential differential clustering, with an option
    to represent a second numerical attribute along a perpendicular axis.
  prefs: []
  type: TYPE_NORMAL
- en: The space saving feature of the Crystal Bar Chart serves as an effective alternative
    to bar charts and similar visualizations that may require a large footprint, and
    it pairs well with various other tools for examining data series in academic and
    professional work.
  prefs: []
  type: TYPE_NORMAL
- en: With various options to adjust characteristics of the crystal-like representation
    of data, I hope you’ll find this visualization technique adaptable to different
    data exploration exercises and a fun new way to discover insights!
  prefs: []
  type: TYPE_NORMAL
- en: '**References**'
  prefs: []
  type: TYPE_NORMAL
- en: '[1] Wikipedia (CC BY-SA), “[List of tallest buildings](https://en.wikipedia.org/wiki/List_of_tallest_buildings)”
    (as of 4/10/2022)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] Wikipedia (CC BY-SA), “[List of diamonds](https://en.wikipedia.org/wiki/List_of_diamonds)”
    (as of 12/25/2023)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related Articles**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Introducing the Multi-Chord Diagram: Visualizing Complex Set Relationships](https://medium.com/towards-data-science/introducing-the-multi-chord-diagram-visualizing-complex-set-relationships-c6fe6cc1cb8b)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Radial Treemaps: Extending Treemaps to Circular Mappings](https://medium.com/towards-data-science/radial-treemaps-extending-treemaps-to-circular-mappings-7b47785191da)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
