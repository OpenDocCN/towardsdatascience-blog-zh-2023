- en: 4 Pandas Functions for Element-Wise Comparison of DataFrames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/4-pandas-functions-for-element-wise-comparison-of-dataframes-c7e06e51d399](https://towardsdatascience.com/4-pandas-functions-for-element-wise-comparison-of-dataframes-c7e06e51d399)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explained with examples.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://sonery.medium.com/?source=post_page-----c7e06e51d399--------------------------------)[![Soner
    Yıldırım](../Images/c589572e9d1ee176cd4f5a0008173f1b.png)](https://sonery.medium.com/?source=post_page-----c7e06e51d399--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c7e06e51d399--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c7e06e51d399--------------------------------)
    [Soner Yıldırım](https://sonery.medium.com/?source=post_page-----c7e06e51d399--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c7e06e51d399--------------------------------)
    ·4 min read·Jun 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/79a6153d096edfc0b646b5adb84002bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [NordWood Themes](https://unsplash.com/@nordwood?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/E9tFH39iRPE?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Pandas DataFrames are two dimensional data structures with labeled rows and
    columns.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e7756b0352e79032b25187b5be0e23cb.png)'
  prefs: []
  type: TYPE_IMG
- en: DataFrame with 3 rows and 3 columns (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'We sometimes need to do an element-wise comparison of two DataFrames. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: Update values in a DataFrame using the values in another one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compare values and pick the bigger or smaller value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this article, we’ll learn four different Pandas functions that can be used
    for such tasks. We’ll also do examples to better understand the difference as
    well as similarities among them.
  prefs: []
  type: TYPE_NORMAL
- en: '*If you’d like to learn more about Pandas, visit my course* [*500 Exercises
    to Master Python Pandas*](https://www.udemy.com/course/500-exercises-to-master-python-pandas/learn/lecture/37842166#overview)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s first create two DataFrames to be used in the examples.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f142324f2e4a8073908c2acaeedf547a.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 1\. combine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `combine` function does an element-wise comparison based on the given function.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, we can select the maximum value out of two values for each position.
    It’ll be more clear when we do the example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9953c9a1ccdef4469b6be83a2176a0ee.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the value in the first row and first column. The combined DataFrame
    has the bigger one of 5 and 2.
  prefs: []
  type: TYPE_NORMAL
- en: If one of the values is `NaN` (i.e. missing value), the combined DataFrame at
    this position has `NaN` as well because Pandas can’t compare a value with a missing
    value.
  prefs: []
  type: TYPE_NORMAL
- en: We can choose a constant value to be used in the case of missing values by using
    the `fill_value` parameter. Missing values are filled with this value before comparing
    them to the values in the other DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/97958df9142d176939f62c5f79fa45d5.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: There are two `NaN` values in df1, which are filled with 0 and then compared
    to the values in the same position of `df2`.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. combine_first
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `combine_first` function updates `NaN` values with the values in the same
    position of the other DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6fbad36a2da560af5f4b39a6f6bcd0a1.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: As we see in the screenshot above, `combined_df` has the same values as `df1`
    except for the `NaN` values, which are filled with values from `df2` .
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that the `combine_first` function does not update the
    values in `df1` and `df2` . It only returns an updated version of the first DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. update
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `update` function updates the missing value in a DataFrame using the values
    in the same location of another DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: It sounds the same thing as what the `combine_first` function does. However,
    there is an important difference.
  prefs: []
  type: TYPE_NORMAL
- en: The `update` function does not return anything but updates in place. Thus, the
    original DataFrame is modified (or updated). It’ll be more clear with an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have two DataFrames as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/434db78de9c9dcb341c387a4ba4278ee.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use the `update` function on `df1` .
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This line of code does not return anything but it updates `df1` . The updated
    version is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d24111d3fd18b88082a513c9b57cb487.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: '`df1` does not include missing values anymore, which have been updated using
    the values from `df2` .'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. compare
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `compare` function compares the values at the same location and returns
    a DataFrame showing them side-by-side.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/10f254be2e1191ee5f5b29b8dbca30f7.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: If the values at a particular location are the same, the comparison shows them
    as `NaN` (e.g. second row, first column). We can change this behavior by using
    the `keep_equal` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/eb488dc39349a4b4f56becd55164f69c.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We learned four different Pandas functions that perform element-wise comparison
    of values in two DataFrames. They all have different purposes. Some are used for
    updating values whereas some just do a comparison.
  prefs: []
  type: TYPE_NORMAL
- en: There will be cases where a particular one of these functions is appropriate
    to use. Hence, it’s best to get to know all of them.
  prefs: []
  type: TYPE_NORMAL
- en: '*You can become a* [*Medium member*](https://sonery.medium.com/membership)
    *to unlock full access to my writing, plus the rest of Medium. If you already
    are, don’t forget to* [*subscribe*](https://sonery.medium.com/subscribe) *if you’d
    like to get an email whenever I publish a new article.*'
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading. Please let me know if you have any feedback.
  prefs: []
  type: TYPE_NORMAL
