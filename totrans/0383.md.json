["```py\n$ pip install dask[complete]\n\nor\n\n$ conda install dask\n```", "```py\nimport dask.dataframe as dd\n\n# Load a large CSV file using Dask\ndf_dask = dd.read_csv('my_very_large_dataset.csv')\n\n# Perform operations on the Dask DataFrame\nmean_value_dask = df_dask['column_name'].mean().compute()\n```", "```py\nimport dask_ml.datasets as dask_datasets\nfrom dask_ml.linear_model import LogisticRegression\nfrom dask_ml.model_selection import train_test_split\n\n# Load a classification dataset using Dask\nX, y = dask_datasets.make_classification(n_samples=100000, chunks=1000)\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y)\n\n# Train a logistic regression model in parallel\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Predict on the test set\ny_pred = model.predict(X_test).compute()\n```", "```py\n**NOTE:** \nin this case, you may need to intsall the module dask_ml.\nYou can do it like so:\n\n$ pip install dask_ml\n```", "```py\nimport dask.array as da\nimport dask_image.imread\nfrom PIL import Image\n\n# Load a collection of images using Dask\nimages = dask_image.imread.imread('image*.jpg')\n\n# Resize the images in parallel\nresized_images = da.stack([da.resize(image, (300, 300)) for image in images])\n\n# Compute the result\nresult = resized_images.compute()\n\n# Save the resized images\nfor i, image in enumerate(result):\n    resized_image = Image.fromarray(image)\n    resized_image.save(f'resized_image_{i}.jpg')\n```", "```py\n$ pip install sympy\n```", "```py\n**PAY ATTENTION:**\n\nif you write *$ pip install* *simpy* you'll install another (completely\ndifferent!) library.\n\nSo, the second letter is a \"y\", not an \"i\".\n```", "```py\nfrom sympy import symbols, Eq, solve\n\n# Define the symbols\nx, y = symbols('x y')\n\n# Define the equation\nequation = Eq(x**2 + y**2, 25)\n\n# Solve the equation\nsolutions = solve(equation, (x, y))\n\n# Print solution\nprint(solutions)\n\n>>>\n\n[(-sqrt(25 - y**2), y), (sqrt(25 - y**2), y)]\n```", "```py\nfrom sympy import symbols, diff\n\n# Define the symbol\nx = symbols('x')\n\n# Define the function\nf = x**3 + 2*x**2 + 3*x + 4\n\n# Calculate the derivative\nderivative = diff(f, x)\n\n# Print derivative\nprint(derivative)\n\n>>>\n\n3*x**2 + 4*x + 3\n```", "```py\nfrom sympy import symbols, integrate, sin\n\n# Define the symbol\nx = symbols('x')\n\n# Perform symbolic integration\nintegral = integrate(sin(x), x)\n\n# Print integral\nprint(integral)\n\n>>>\n\n-cos(x)\n```", "```py\n$ pip install xarray\n```", "```py\nimport xarray as xr\nimport numpy as np\n\n# Create temperature data\ntemperature = np.random.rand(100, 100) * 20 + 10\n\n# Create coordinate arrays for latitude and longitude\nlatitudes = np.linspace(-90, 90, 100)\nlongitudes = np.linspace(-180, 180, 100)\n\n# Create an Xarray data array with labeled coordinates\nda = xr.DataArray(\n    temperature,\n    dims=['latitude', 'longitude'],\n    coords={'latitude': latitudes, 'longitude': longitudes}\n)\n\n# Access data using labeled coordinates\nsubset = da.sel(latitude=slice(-45, 45), longitude=slice(-90, 0))\n```", "```py\n# Print data\nprint(subset)\n\n>>>\n<xarray.DataArray (latitude: 50, longitude: 25)>\narray([[13.45064786, 29.15218061, 14.77363206, ..., 12.00262833,\n        16.42712411, 15.61353963],\n       [23.47498117, 20.25554247, 14.44056286, ..., 19.04096482,\n        15.60398491, 24.69535367],\n       [25.48971105, 20.64944534, 21.2263141 , ..., 25.80933737,\n        16.72629302, 29.48307134],\n       ...,\n       [10.19615833, 17.106716  , 10.79594252, ..., 29.6897709 ,\n        20.68549602, 29.4015482 ],\n       [26.54253304, 14.21939699, 11.085207  , ..., 15.56702191,\n        19.64285595, 18.03809074],\n       [26.50676351, 15.21217526, 23.63645069, ..., 17.22512125,\n        13.96942377, 13.93766583]])\nCoordinates:\n  * latitude   (latitude) float64 -44.55 -42.73 -40.91 ... 40.91 42.73 44.55\n  * longitude  (longitude) float64 -89.09 -85.45 -81.82 ... -9.091 -5.455 -1.818 \n```", "```py\nimport xarray as xr\nimport numpy as np\nimport pandas as pd\n\n# Create temperature data with missing values\ntemperature = np.random.rand(365, 50, 50) * 20 + 10\ntemperature[0:10, :, :] = np.nan  # Set the first 10 days as missing values\n\n# Create time, latitude, and longitude coordinate arrays\ntimes = pd.date_range('2023-01-01', periods=365, freq='D')\nlatitudes = np.linspace(-90, 90, 50)\nlongitudes = np.linspace(-180, 180, 50)\n\n# Create an Xarray data array with missing values\nda = xr.DataArray(\n    temperature,\n    dims=['time', 'latitude', 'longitude'],\n    coords={'time': times, 'latitude': latitudes, 'longitude': longitudes}\n)\n\n# Count the number of missing values along the time dimension\nmissing_count = da.isnull().sum(dim='time')\n\n# Print missing values\nprint(missing_count)\n\n>>>\n\n<xarray.DataArray (latitude: 50, longitude: 50)>\narray([[10, 10, 10, ..., 10, 10, 10],\n       [10, 10, 10, ..., 10, 10, 10],\n       [10, 10, 10, ..., 10, 10, 10],\n       ...,\n       [10, 10, 10, ..., 10, 10, 10],\n       [10, 10, 10, ..., 10, 10, 10],\n       [10, 10, 10, ..., 10, 10, 10]])\nCoordinates:\n  * latitude   (latitude) float64 -90.0 -86.33 -82.65 ... 82.65 86.33 90.0\n  * longitude  (longitude) float64 -180.0 -172.7 -165.3 ... 165.3 172.7 180.0\n```", "```py\nimport xarray as xr\nimport numpy as np\nimport pandas as pd\n\n# Create synthetic temperature data\ntemperature = np.random.rand(365, 50, 50) * 20 + 10\n\n# Create time, latitude, and longitude coordinate arrays\ntimes = pd.date_range('2023-01-01', periods=365, freq='D')\nlatitudes = np.linspace(-90, 90, 50)\nlongitudes = np.linspace(-180, 180, 50)\n\n# Create an Xarray dataset\nds = xr.Dataset(\n    {\n        'temperature': (['time', 'latitude', 'longitude'], temperature),\n    },\n    coords={\n        'time': times,\n        'latitude': latitudes,\n        'longitude': longitudes,\n    }\n)\n\n# Perform statistical analysis on the temperature data\nmean_temperature = ds['temperature'].mean(dim='time')\nmax_temperature = ds['temperature'].max(dim='time')\nmin_temperature = ds['temperature'].min(dim='time')\n\n# Print values \nprint(f\"mean temperature:\\n {mean_temperature}\\n\")\nprint(f\"max temperature:\\n {max_temperature}\\n\")\nprint(f\"min temperature:\\n {min_temperature}\\n\")\n\n>>>\n\nmean temperature:\n <xarray.DataArray 'temperature' (latitude: 50, longitude: 50)>\narray([[19.99931701, 20.36395016, 20.04110699, ..., 19.98811842,\n        20.08895803, 19.86064693],\n       [19.84016491, 19.87077812, 20.27445405, ..., 19.8071972 ,\n        19.62665953, 19.58231185],\n       [19.63911165, 19.62051976, 19.61247548, ..., 19.85043831,\n        20.13086891, 19.80267099],\n       ...,\n       [20.18590514, 20.05931149, 20.17133483, ..., 20.52858247,\n        19.83882433, 20.66808513],\n       [19.56455575, 19.90091128, 20.32566232, ..., 19.88689221,\n        19.78811145, 19.91205212],\n       [19.82268297, 20.14242279, 19.60842148, ..., 19.68290006,\n        20.00327294, 19.68955107]])\nCoordinates:\n  * latitude   (latitude) float64 -90.0 -86.33 -82.65 ... 82.65 86.33 90.0\n  * longitude  (longitude) float64 -180.0 -172.7 -165.3 ... 165.3 172.7 180.0\n\nmax temperature:\n <xarray.DataArray 'temperature' (latitude: 50, longitude: 50)>\narray([[29.98465531, 29.97609171, 29.96821276, ..., 29.86639343,\n        29.95069558, 29.98807808],\n       [29.91802049, 29.92870312, 29.87625447, ..., 29.92519055,\n        29.9964299 , 29.99792388],\n       [29.96647016, 29.7934891 , 29.89731136, ..., 29.99174546,\n        29.97267052, 29.96058079],\n       ...,\n       [29.91699117, 29.98920555, 29.83798369, ..., 29.90271746,\n        29.93747041, 29.97244906],\n       [29.99171911, 29.99051943, 29.92706773, ..., 29.90578739,\n        29.99433847, 29.94506567],\n       [29.99438621, 29.98798699, 29.97664488, ..., 29.98669576,\n        29.91296382, 29.93100249]])\nCoordinates:\n  * latitude   (latitude) float64 -90.0 -86.33 -82.65 ... 82.65 86.33 90.0\n  * longitude  (longitude) float64 -180.0 -172.7 -165.3 ... 165.3 172.7 180.0\n\nmin temperature:\n <xarray.DataArray 'temperature' (latitude: 50, longitude: 50)>\narray([[10.0326431 , 10.07666029, 10.02795524, ..., 10.17215336,\n        10.00264909, 10.05387097],\n       [10.00355858, 10.00610942, 10.02567816, ..., 10.29100316,\n        10.00861792, 10.16955806],\n       [10.01636216, 10.02856619, 10.00389027, ..., 10.0929342 ,\n        10.01504103, 10.06219179],\n       ...,\n       [10.00477003, 10.0303088 , 10.04494723, ..., 10.05720692,\n        10.122994  , 10.04947012],\n       [10.00422182, 10.0211205 , 10.00183528, ..., 10.03818058,\n        10.02632697, 10.06722953],\n       [10.10994581, 10.12445222, 10.03002468, ..., 10.06937041,\n        10.04924046, 10.00645499]])\nCoordinates:\n  * latitude   (latitude) float64 -90.0 -86.33 -82.65 ... 82.65 86.33 90.0\n  * longitude  (longitude) float64 -180.0 -172.7 -165.3 ... 165.3 172.7 180.0\n```"]