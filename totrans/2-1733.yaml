- en: Python OPP, and Why repr() and str() Matter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python OPP 以及为何 repr() 和 str() 重要
- en: 原文：[https://towardsdatascience.com/python-opp-and-why-repr-and-str-matter-1cff584328f4](https://towardsdatascience.com/python-opp-and-why-repr-and-str-matter-1cff584328f4)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/python-opp-and-why-repr-and-str-matter-1cff584328f4](https://towardsdatascience.com/python-opp-and-why-repr-and-str-matter-1cff584328f4)
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON 编程
- en: The article discovers various faces behind using repr() and str() for Python
    classes
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这篇文章探讨了使用 repr() 和 str() 为 Python 类提供的各种面貌
- en: '[](https://medium.com/@nyggus?source=post_page-----1cff584328f4--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----1cff584328f4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1cff584328f4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1cff584328f4--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----1cff584328f4--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus?source=post_page-----1cff584328f4--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----1cff584328f4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1cff584328f4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1cff584328f4--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----1cff584328f4--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1cff584328f4--------------------------------)
    ·14 min read·Nov 3, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1cff584328f4--------------------------------)
    ·14 分钟阅读·2023年11月3日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/f8fb381ea5c85aff97d6f167a83d2e54.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f8fb381ea5c85aff97d6f167a83d2e54.png)'
- en: Python classes need string representation to provide the user and the developer
    with more information than just a mess of letters. Photo by [Surendran MP](https://unsplash.com/@sure_mp?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python 类需要字符串表示，以便向用户和开发者提供比一堆字母更多的信息。图片由 [Surendran MP](https://unsplash.com/@sure_mp?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 提供
- en: 'Python classes have many faces. For instance, you can create an empty class:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python 类有许多面貌。例如，你可以创建一个空类：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'and it still can be of use, for instance, as [a sentinel value](https://en.wikipedia.org/wiki/Sentinel_value).
    You can add an `__init__()` method:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 它仍然可以有所用处，例如作为 [哨兵值](https://en.wikipedia.org/wiki/Sentinel_value)。你可以添加一个 `__init__()`
    方法：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It still will be a very simple class, but this time, it’ll keep a particular
    value.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这仍然会是一个非常简单的类，但这次它将保持一个特定的值。
- en: 'A superb power of Python classes is that they can be used as types, as shown
    below:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Python 类的一个极佳功能是它们可以被用作类型，如下所示：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Remember that not implementing the `__init__()` method does not mean it doesn’t
    exist. In fact, we overloaded the `__init__()` method above, not just implemented
    it. This is another significant aspect of Python classes that you should know:
    you can overload many other methods, such as `__new__()`, `__eq__()`, and `__setattr__()`.
    If you do not overload these methods, some will have their default implementation
    (like `__init__()`, `__new__()`, `__setattr__()`, and `__eq__()`), while others
    will not (like `__lt__()` and all the other comparison methods other than `__eq__()`,
    `__getitem__()`, `__setitem__()` and `__len__()`).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，不实现 `__init__()` 方法并不意味着它不存在。实际上，我们上面重载了 `__init__()` 方法，而不仅仅是实现了它。这是 Python
    类的另一个重要方面，你应该知道：你可以重载许多其他方法，如 `__new__()`、`__eq__()` 和 `__setattr__()`。如果你不重载这些方法，有些方法会有默认实现（如
    `__init__()`、`__new__()`、`__setattr__()` 和 `__eq__()`），而其他方法则没有（如 `__lt__()` 和所有其他比较方法，除了
    `__eq__()`、`__getitem__()`、`__setitem__()` 和 `__len__()`）。
- en: 'A class can inherit from another class, like here:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类可以继承另一个类，如下所示：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: and, also as above, it can use static methods, but also class methods. You can
    create mixin classes and abstract base classes, singletons, and make tons of other
    things, sometimes very useful.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 同样如上所述，它可以使用静态方法，也可以使用类方法。你可以创建混合类和抽象基类、单例模式，还可以做许多其他事情，有时非常有用。
- en: 'Python classes have so many faces that it would take years to discuss each
    of them in detail, and we’ll be doing so in the future articles. In this one,
    we will focus on one particular aspect: the difference between and the power of
    the `__repr__()` and `__str__()` methods.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Python 类有很多面向不同的特性，详细讨论每一种特性需要几年时间，我们将在未来的文章中进行探讨。在这篇文章中，我们将重点关注一个特定方面：`__repr__()`
    和 `__str__()` 方法的区别和作用。
- en: At first glance, you may think this is a minor topic, but it’s actually quite
    important. It’s easy to implement a Python class, but it takes more effort to
    implement a *good* Python class. And it is these minor details that differentiate
    a skillful Python developer from a regular one.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 初看起来，你可能认为这是一个小话题，但实际上它非常重要。实现一个 Python 类很容易，但实现一个 *好的* Python 类则需要更多的努力。正是这些小细节使得一个熟练的
    Python 开发者与普通开发者有所区别。
- en: '*Note*: To run doctests, I used Python 3.11\. Don’t be amazed to see that older
    versions of Python could provide slightly different results. If you’d like to
    read more about Python `doctest`ing, grab the following article:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意*：为了运行 doctests，我使用了 Python 3.11。不要惊讶于较旧版本的 Python 可能会提供稍微不同的结果。如果你想了解更多关于
    Python `doctest` 的内容，请阅读以下文章：'
- en: '[](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----1cff584328f4--------------------------------)
    [## Python Documentation Testing with doctest: The Easy Way'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Python 文档测试与 doctest：简单方法](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----1cff584328f4--------------------------------)'
- en: doctest allows for documentation, unit and integration testing, and test-driven
    development.
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: doctest 允许进行文档测试、单元测试、集成测试以及测试驱动开发。
- en: towardsdatascience.com](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----1cff584328f4--------------------------------)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----1cff584328f4--------------------------------)'
- en: '`repr` vs `str`'
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`repr` 与 `str`'
- en: In theory, `repr()` should return an unambiguous string representation of an
    object, from which you should be able to recreate the object. `str()`, on the
    other hand, should return a human-readable string representation of an object.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，`repr()` 应该返回一个明确的对象字符串表示，从中你应该能够重建对象。另一方面，`str()` 应该返回一个人类可读的对象字符串表示。
- en: So, still in theory, `repr()` should provide detailed information about the
    objects it’s used for, while `str()` should provide a readable string explaining
    what the object is and what it may contain. For example, we use `str()` to see
    an object in an interactive session or for logging purposes. But when we're debugging
    and need more details, `repr()` is the way to go. As we’ll see in the next section,
    we usually call these functions indirectly, without even knowing this — or at
    least without thinking about it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，理论上，`repr()` 应该提供有关其所用对象的详细信息，而 `str()` 应该提供一个可读的字符串来解释对象是什么以及可能包含什么。例如，我们使用
    `str()` 来查看交互式会话中的对象或用于日志记录。但当我们调试并需要更多细节时，`repr()` 是更好的选择。正如我们将在下一部分看到的，我们通常会间接调用这些函数，甚至可能不知道这一点——或者至少没有想到这一点。
- en: We compared the `repr()` and `str()` functions above. To implement or overload
    them in a class, we need to use the corresponding methods, `__repr__()` and `__str__()`,
    respectively. If a class defines a `__repr__()` method, it’s used to generate
    the string representation of objects of that class when you call `repr()`. The
    same goes for `str()` and `__str__()`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上面比较了 `repr()` 和 `str()` 函数。要在类中实现或重载它们，我们需要使用相应的方法，分别是 `__repr__()` 和 `__str__()`。如果一个类定义了
    `__repr__()` 方法，当你调用 `repr()` 时，它会用于生成该类对象的字符串表示。`str()` 和 `__str__()` 也是如此。
- en: We’ll see this in action soon — first let’s see what I meant when I mentioned
    indirect calling `repr()` and `str()`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很快就会看到这一点——首先让我们了解一下我提到的间接调用 `repr()` 和 `str()` 的含义。
- en: '`Calling repr()` and `str() indirectly`'
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`间接调用 repr()` 和 `str()`'
- en: 'There’s a secret related to these two functions, and it’s good to know it.
    Consider the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个与这两个函数相关的秘密，了解它是很有帮助的。请考虑以下代码：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Focus on the last two calls. As you can see, it can make a difference whether
    or not you use `print()` to print an object in a Python session or just an object’s
    name.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意最后两个调用。正如你所看到的，在 Python 会话中使用 `print()` 打印对象与仅使用对象名称之间可能会有所不同。
- en: '![](../Images/cf7bd2d3796e42a6a20a265f7242982f.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cf7bd2d3796e42a6a20a265f7242982f.png)'
- en: Difference between calling print(obj) and obj in a Python session. Image by
    author
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 会话中调用 `print(obj)` 和仅调用对象名之间的区别。图片由作者提供
- en: 'The image below summarizes this: `print(obj)` calls `str(obj)` while `obj`
    calls `repr(obj)`.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 下图总结了这一点：`print(obj)`调用`str(obj)`，而`obj`调用`repr(obj)`。
- en: __repr__ vs __str__
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**repr**与**str**'
- en: Above, I explained the concept behind `repr()` and `__repr__()` and `str()`
    and `__str__()`. The former pair should provide more information than the latter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我解释了`repr()`和`__repr__()`以及`str()`和`__str__()`的概念。前一对应该提供比后一对更多的信息。
- en: 'Oftentimes, however, practice shows a different face:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，实践中往往显示出不同的情况：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, the default implementations of both of these methods are the
    same:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这两个方法的默认实现是相同的：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: So, even the default implementations of `__str__()` and `__repr__()`, used when
    you don’t overload these two methods in a Python class, go against the rule mentioned
    above. In addition, developers can overload either or both of these methods, and
    in real life, this can also mean going against this very rule.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，即使是默认实现的`__str__()`和`__repr__()`，当你在Python类中没有重载这两个方法时，也违反了上述规则。此外，开发者可以重载这两个方法中的一个或两个，而在实际应用中，这也可能意味着违反这一规则。
- en: 'What happens when only one of the two methods is implemented? To show this,
    I’ll implement the following four classes:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当仅实现其中一个方法时会发生什么？为了展示这一点，我将实现以下四个类：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'So, we defined four classes: one with neither `__str__()` nor `__repr__()`,
    two with one of them, and one with both. Let’s see what happens if we call `str()`
    and `repr()` on their instances:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们定义了四个类：一个既没有`__str__()`也没有`__repr__()`，两个有其中一个，和一个两个都有。让我们看看如果我们对它们的实例调用`str()`和`repr()`会发生什么：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here are the conclusions from the above `doctest`s:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上述`doctest`的结论：
- en: 'Implement neither `__str__()` nor `__repr__()`: For both, the default implementations
    will be used; they are the same, both providing the class’s name and the instance’s
    address.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现既没有`__str__()`也没有`__repr__()`：对于两者，都会使用默认实现；它们是一样的，都提供类的名称和实例的地址。
- en: 'Implement both `__str__()` and `__repr__()`: Usually, this is the recommended
    approach. It makes your code more readable and maintainable — although, at the
    same time, longer.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现`__str__()`和`__repr__()`：通常，这是一种推荐的方法。它使你的代码更具可读性和可维护性——尽管同时也更长。
- en: 'Implement only `__str__()`: Python will use it for `str()` but for `repr()`
    the default implementation will be used.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅实现`__str__()`：Python会在`str()`中使用它，但对于`repr()`将使用默认实现。
- en: 'Implement only `__repr__()`: Python will use it for both `str()` and `repr()`.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅实现`__repr__()`：Python会将其用于`str()`和`repr()`。
- en: So, what should I implement?
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么，我应该实现什么呢？
- en: It depends. The most obvious conclusion is that if you implement a complex class,
    you should define *both* these methods. This will give you more opportunities
    to debug the code and use better logging.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这要看情况。最明显的结论是，如果你实现了一个复杂的类，你应该定义*两个*这些方法。这将给你更多的调试代码和更好的日志记录的机会。
- en: Nevertheless, when you don’t have much time for coding as deadlines are approaching,
    you should implement at the very least one of the methods. Implementing none means
    the string representation of the class will contain little useful information,
    as it will contain the class’s name and the instance’s address. Therefore, do
    so only when you’re certain the class’s name is all you need. In prototyping,
    for example, this is often all you need.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当你没有太多时间编程而截止日期临近时，你至少应该实现其中一个方法。不实现任何方法意味着类的字符串表示将包含很少的有用信息，因为它将包含类的名称和实例的地址。因此，只有在你确定类的名称是你需要的全部信息时才这样做。例如，在原型设计中，这通常是你需要的全部信息。
- en: For small classes, implementing only one of the two methods can be enough, but
    always make sure it’s indeed enough. Besides, how often do you have so little
    time to be unable to implement such a simple method as `__str__()` or `__repr__()`?
    I know this can happen — but I don’t think something like this happens more often
    that once in a while. To be honest, in my over five years of Python development,
    this has not happened even once.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于小类，实现其中一个方法可能就足够了，但一定要确保这确实足够。此外，你有多久会没有时间来实现像`__str__()`或`__repr__()`这样简单的方法？我知道这种情况可能会发生——但我认为这种情况不会比偶尔发生的多。说实话，在我超过五年的Python开发中，这种情况甚至没有发生过一次。
- en: So, I think time is seldom a concern. Space, on the other hand, can be. When
    your module contains a number of small classes that take several lines, implementing
    both `__repr__()` and `__str__()` for all of them can double the length of the
    module. This can make a big difference, so it’s worth considering whether both
    methods are needed, and if not, which one should be implemented.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我认为时间很少是一个问题。而空间，另一方面，可能是。当你的模块包含多个小类，每个类占用几行时，为所有这些类实现`__repr__()`和`__str__()`可能会使模块的长度增加一倍。这可能会带来很大差异，因此值得考虑是否需要这两个方法，如果不需要，应该实现哪个方法。
- en: Many built-in classes use the same implementation for `__repr__()` and `__str__()`,
    including `dict` and `list`. The same goes for many classes from well-known add-on
    packages, a perfect example from data science realm being `pandas.DataFrame`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 许多内置类使用相同的实现来处理`__repr__()`和`__str__()`，包括`dict`和`list`。许多来自知名附加包的类也是如此，一个来自数据科学领域的完美例子是`pandas.DataFrame`。
- en: 'Let’s summarize our discussion in a set of rules. To be honest, even though
    I’ve been using them for years, this is the first time I’ve thought to write them
    down. I hope you’ll find them useful in your coding practice to decide whether
    to implement both `__repr__()` and `__str__()`, only one of them, or none:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下我们的讨论，形成一套规则。说实话，尽管我已经使用它们很多年了，这还是我第一次想到将它们写下来。我希望你能在编码实践中找到它们的用处，以决定是否实现`__repr__()`和`__str__()`这两个方法中的一个或两个，或者都不实现。
- en: When you’re writing a prototype class and don’t plan to use its string representation
    at all, you can ignore both `__repr__()` and `__str__()`. For production code,
    however, think twice before doing so. During development, I often skip these methods
    unless I need to debug the code using the class’s instances.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你编写一个原型类且不打算使用它的字符串表示时，可以忽略`__repr__()`和`__str__()`。然而，对于生产代码，最好再三考虑。在开发过程中，除非需要通过类的实例调试代码，否则我通常会跳过这些方法。
- en: 'When your class produces complex instances with many attributes, I typically
    consider implementing both `__repr__()` and `__str__()`. Then: (i) The `__str__()`
    method should provide a simple human-readable string representation, which can
    be obtained by printing the instance using both the `print()` and `str()` functions.
    (ii) The `__repr__()` method should provide as much information as possible, including
    all the information required to recreate the class’s instances; this can be obtained
    using the `repr()` function or by typing the instance’s name in the interactive
    session.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你的类生成具有多个属性的复杂实例时，我通常会考虑同时实现`__repr__()`和`__str__()`。然后：（i）`__str__()`方法应提供一个简单的人类可读的字符串表示，这可以通过使用`print()`和`str()`函数打印实例来获得。（ii）`__repr__()`方法应提供尽可能多的信息，包括重建类实例所需的所有信息；这可以通过`repr()`函数或在交互式会话中输入实例名称来获得。
- en: If your class needs to be used in debugging, make its `__repr__()` method as
    detailed as possible, regardless of whether or not you implement `__str__()`.
    This does not mean that the output of `__repr__()` must be insanely long; instead,
    in such situations, include whatever information is necessary for debugging purposes.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的类需要用于调试，无论是否实现`__str__()`，都要使其`__repr__()`方法尽可能详细。这并不意味着`__repr__()`的输出必须异常长；而是，在这种情况下，包含调试所需的任何信息。
- en: When a class needs a human-readable string representation and at the same time
    you need to implement a detailed `__repr__()` method, implement `__str__()`.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个类需要一个人类可读的字符串表示，并且同时你需要实现详细的`__repr__()`方法时，实现`__str__()`。
- en: If a class needs a human-readable string representation but you don’t need the
    detailed `__repr__()`, implement only `__repr__()`. This will give users a nice
    human-readable string representation from both methods, and they will avoid seeing
    the default `__repr__()` representation, which is usually of little value. When
    implementing only `__repr__()`, it is important to be consistent with the format
    of the string that is returned. This will make it easier for users to read and
    understand the output of both `str()` and `repr()`.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个类需要一个人类可读的字符串表示，但你不需要详细的`__repr__()`，则仅实现`__repr__()`。这将使用户从两个方法中获得一个不错的人类可读字符串表示，并避免看到默认的`__repr__()`表示，通常这没有太大价值。在仅实现`__repr__()`时，保持返回字符串格式的一致性很重要，这将使用户更容易阅读和理解`str()`和`repr()`的输出。
- en: Implementing `__repr__()` and `__str__()`
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现`__repr__()`和`__str__()`
- en: Now that we know when to implement the two methods, it’s worth to consider how
    to do it. There are only two rules that you *must* follow, and fortunately, both
    are simple.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了何时实现这两种方法，值得考虑如何实现它们。只有两个规则是你*必须*遵守的，而且幸运的是，这两个规则都很简单。
- en: 'The first one deals with the methods’ arguments, and the other one with the
    types of their return values. We can thus present them using the two methods’
    expected signatures, that is:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个处理方法的参数，另一个处理其返回值的类型。因此，我们可以使用这两种方法的预期签名来展示它们，即：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Is this all?
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这就全部了吗？
- en: Basically, yes — but... I wrote these are the *expected* signatures, but the
    truth is, you should treat them as *required* signatures. You’ll see why below.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，是的——但是……我写这些是*预期*的签名，但实际上，你应该将它们视为*必需*的签名。下面你会明白为什么。
- en: To learn why, you should know an interesting thing, one that I guess quite a
    few Python users don’t know. I, for one, wasn’t aware of it for quite some times.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解原因，你应该知道一个有趣的事情，我猜很多 Python 用户可能不知道。就我而言，我在很长一段时间内也不知情。
- en: 'This rule applies when you want the class’s `__str__()` to work with `str()`
    and `print()`, and `__repr__()` to work with `repr()` and by using the instance’s
    name in the session. To show this, let’s implement a class with `__str__()` having
    a non-optional argument:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个规则适用于当你希望类的`__str__()`与`str()`和`print()`配合使用，而`__repr__()`与`repr()`以及在会话中使用实例名称时。为此，让我们实现一个具有非可选参数的`__str__()`的类：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Will the method work?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法会工作吗？
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Hey, it does! So how come I just wrote `__str__()` should *not* take arguments?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 嘿，它确实适用！那我怎么刚才写了`__str__()`应该*不*接受参数呢？
- en: 'It should not — although theoretically, it can. It can under an unrealistic
    condition that the only way the method is called is `inst.__str__(10)` (the value
    itself doesn’t matter). Above, we saw such a call, and it worked indeed. But what
    we’ll see now is three bitter failures:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上不会——尽管它是可能的。这在一个不切实际的条件下才会发生，即唯一调用该方法的方式是`inst.__str__(10)`（值本身并不重要）。如上所述，我们看到过这样的调用，它确实有效。但接下来我们将看到三个痛苦的失败：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'So, using an argument for `__str__()` is not a syntax error, but it’s definitely
    a static error:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用参数的`__str__()`不是语法错误，但它绝对是一个静态错误。
- en: '![](../Images/bdf41adc130aabeda0cd40eb93dc2310.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bdf41adc130aabeda0cd40eb93dc2310.png)'
- en: A screenshot from Visual Studio Code. [Sonarlint](https://www.sonarsource.com/knowledge/languages/python/)
    shows that __str__() should not take arguments. Image by author
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 Visual Studio Code 的截图。[Sonarlint](https://www.sonarsource.com/knowledge/languages/python/)
    显示`__str__()`不应该接受参数。图片由作者提供
- en: It definitely is a static error, but as shown above, a bigger problem is that
    using arguments for `__str__()` will most likely lead to a `TypeError` exception
    raised at runtime, as shown above.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝对是一个静态错误，但如上所示，一个更大的问题是，使用参数的`__str__()`很可能会在运行时引发`TypeError`异常，如上所示。
- en: 'Typing `inst` directly in a session calls `repr()`, and since we did not implement
    it, the default implementation is used:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在会话中直接键入`inst`会调用`repr()`，由于我们没有实现它，使用了默认实现：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: But as shown before, calling `print(inst)` failed, for the simple reason that
    there was no direct way to providing a value for the non-optional argument `value`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 但如前所示，调用`print(inst)`失败了，原因很简单，因为没有直接提供非可选参数`value`的方式。
- en: 'Now, let’s move on to the other issue, that is, returning an object of a non-string
    type. It seems like something to be considered a static error. Let’s consider
    two versions: untyped and typed class definition:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转到另一个问题，即返回一个非字符串类型的对象。这似乎是一个静态错误。我们考虑两种版本：未类型化和类型化的类定义：
- en: '![](../Images/956f79dea798cb630678de79bfee5f79.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/956f79dea798cb630678de79bfee5f79.png)'
- en: A screenshot from Visual Studio Code. Based on an untyped class definition,
    [Sonarlint](https://www.sonarsource.com/knowledge/languages/python/) shows that
    __str__() should return a string. Image by author
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 Visual Studio Code 的截图。基于未类型化的类定义，[Sonarlint](https://www.sonarsource.com/knowledge/languages/python/)
    显示`__str__()`应该返回一个字符串。图片由作者提供
- en: '![](../Images/2a26e22b01ee2a0ac13b099aa14ef51e.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2a26e22b01ee2a0ac13b099aa14ef51e.png)'
- en: A screenshot from Visual Studio Code. Based on a typed class definition, [Mypy](https://mypy.readthedocs.io/en/stable/)
    shows that __str__() should return a string. Image by author
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 Visual Studio Code 的截图。基于类型化的类定义，[Mypy](https://mypy.readthedocs.io/en/stable/)
    显示`__str__()`应该返回一个字符串。图片由作者提供
- en: So, returning a non-string object from a `__str__()` method is definitely a
    static error — but would it also cause raising a runtime `TypeError` exception?
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从`__str__()`方法返回非字符串对象绝对是一个静态错误——但这是否也会导致在运行时引发`TypeError`异常呢？
- en: 'Yes, it would:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，会的：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The rules for `__repr__()` are the same:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`__repr__()` 的规则是一样的：'
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: So, remember *not* to use parameters for `__repr__()` and `__str__()`, and remember
    that both should return strings. But it’s also worth to remember what will happen
    when you break any of these two rules.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，请记住*不要*为 `__repr__()` 和 `__str__()` 使用参数，并记住它们都应返回字符串。但也值得记住，当你违反这两个规则中的任何一个时会发生什么。
- en: Example of a custom class
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义类示例
- en: As mentioned above, when you’re implementing a complex custom class, you should
    usually implement both `__str__()` and `__repr__()`, and they should be different.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，当你实现一个复杂的自定义类时，通常应实现 `__str__()` 和 `__repr__()`，并且它们应有所不同。
- en: What does “complex” mean in this context? It can mean different things, but
    in the example below, it means that the class contains some attributes that don’t
    need to be included in the regular string representation, but which we may want
    to include for debugging or logging purposes.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个上下文中，“复杂”是什么意思？它可能意味着不同的东西，但在下面的例子中，它意味着类包含一些不需要在常规字符串表示中包含的属性，但我们可能希望在调试或日志记录时包含它们。
- en: 'We will implement a popular `Point` class, but we will make it a little more
    complex:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现一个流行的 `Point` 类，但我们会使它更复杂一些：
- en: Its main attributes are `x` and `y`, defining the point’s coordinates.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的主要属性是 `x` 和 `y`，定义点的坐标。
- en: It also have an optional `group` attribute which defines an instance’s group
    membership; it can be a group like the species in the famous Iris dataset.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它还有一个可选的 `group` 属性，用于定义实例的组成员身份；它可以是像著名的 Iris 数据集中的物种这样的组。
- en: You can also add a comment to the class’s instances. It can be any comment,
    such as “Correct the group”, “Double-check the coordinates” or “Possible mistake”.
    Comments are not used in comparisons — just as a source of information about a
    particular point; we will see this in the code below.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以给类的实例添加评论。它可以是任何评论，例如“纠正组”，“双重检查坐标”或“可能的错误”。评论不会用于比较—只是作为关于特定点的信息来源；我们将在下面的代码中看到这一点。
- en: 'This is the implementation of the `Point` class:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `Point` 类的实现：
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let’s analyze differences between the `__repr__()` and `__str__()`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下 `__repr__()` 和 `__str__()` 之间的区别：
- en: '*The level of detail*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*细节的层次*'
- en: As mentioned above, such comments are not usually necessary in the regular string
    representation of a class instance. Therefore, we don’t need to include them in
    `__str__()`. However, when we’re debugging, comments can be extremely helpful,
    especially when they provide critical information about a particular class instance.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，这种评论通常在类实例的常规字符串表示中不是必需的。因此，我们不需要在 `__str__()` 中包含它们。然而，当我们进行调试时，评论可以非常有用，尤其是当它们提供有关特定类实例的重要信息时。
- en: 'This is why we should include comments in `__repr__()` but not in `__str__()`.
    Consider this example:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么我们应该在 `__repr__()` 中包含评论，但在 `__str__()` 中不包含评论的原因。请考虑这个例子：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '*A more detailed picture*'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*更详细的图片*'
- en: In our implementation, the two methods provide different pictures of a class
    instance. Compare
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的实现中，这两个方法提供了类实例的不同视图。比较
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: with
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 通过
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In addition to providing a comment, `__repr__()` offers a more detailed picture
    by providing attribute names than does `__str__()`. This may not that big a difference
    in this particular class, but when a class has more attributes you want to include
    in string representation and their names are longer than here, the difference
    could be much more visible. Even here, however, `__str__()` does offer much more
    concise information about an instance than `__repr__()` does.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供评论外，`__repr__()` 通过提供属性名称，提供比 `__str__()` 更详细的图片。在这个特定的类中，这可能差别不大，但当一个类有更多的属性需要包括在字符串表示中，并且它们的名称比这里更长时，差异可能会更加明显。即使在这里，`__str__()`
    提供的信息也比 `__repr__()` 更简洁。
- en: '*Recreating an instance from* `__repr__()`'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* `__repr__()` *重建实例*'
- en: 'We mentioned this one, too. If possible, it’s a good practice to provide in
    `__repr__()` all the information required to recreate the instance. Here, `__str__()`
    is not enough for us to do so:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也提到过这一点。如果可能的话，提供在 `__repr__()` 中所需的所有信息以重建实例是一个好的实践。在这里，`__str__()` 对我们来说还不够：
- en: '[PRE20]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'It doesn’t matter here that comments are not used to compare instances and
    that, for that reason, `p1 == p1_recreated_from_str` returns `True`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，评论没有用于比较实例，因此 `p1 == p1_recreated_from_str` 返回 `True` 这并不重要：
- en: '[PRE21]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This only says that from the user’s point of view these two instances are equal.
    From a developers point of view, however, they are not: `p1` is *not* the same
    as `p1_recreated_from_str`. If we want to *fully* recreate `p1`, we need to use
    its ``__repr__()` representation:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是说明从用户的角度来看这两个实例是相等的。然而，从开发者的角度来看，它们并不相同：`p1` *不* 等于 `p1_recreated_from_str`。如果我们想要*完全*重建`p1`，我们需要使用其`__repr__()`表示形式：
- en: '[PRE22]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Conclusion
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: I hope that reading this article has helped you see the subtle differences between
    `repr()` and `str()`, and between `__repr__()` and `__str__()`. Such subtleties
    may not be required for intermediate Python users, but if you want to be an advanced
    Python user or developer, it is precisely such subtleties that you need to know
    and use in your daily coding.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望阅读这篇文章能帮助你理解`repr()`和`str()`之间，以及`__repr__()`和`__str__()`之间的微妙差异。这样的细微差别可能对中级Python用户不是必需的，但如果你想成为高级Python用户或开发者，这正是你需要在日常编码中了解并使用的。
- en: This is just the tip of the iceberg, but I won’t leave you with just this. We
    have discussed such subtleties of Python before, and we will discuss them even
    more in future articles.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是冰山一角，但我不会仅仅停留在这里。我们之前讨论过Python的这些细微之处，未来的文章中我们会进一步探讨。
- en: 'Thanks for reading. If you enjoyed this article, you may also enjoy other articles
    I wrote; you will see them [here](https://medium.com/@nyggus). And if you want
    to join Medium, please use my referral link below:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你喜欢这篇文章，你可能也会喜欢我写的其他文章；你可以在[这里](https://medium.com/@nyggus)看到它们。如果你想加入Medium，请使用下面的推荐链接：
- en: '[](https://medium.com/@nyggus/membership?source=post_page-----1cff584328f4--------------------------------)
    [## Join Medium with my referral link - Marcin Kozak'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 使用我的推荐链接加入Medium - Marcin Kozak](https://medium.com/@nyggus/membership?source=post_page-----1cff584328f4--------------------------------)'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为一个Medium会员，你的一部分会费会分配给你阅读的作者，并且你可以完全访问每一个故事……
- en: medium.com](https://medium.com/@nyggus/membership?source=post_page-----1cff584328f4--------------------------------)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/@nyggus/membership?source=post_page-----1cff584328f4--------------------------------)'
