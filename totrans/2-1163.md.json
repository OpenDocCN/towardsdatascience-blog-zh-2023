["```py\ncont_table = pd.DataFrame([\n  [35_252, 30_299],\n  [3_516, 3_187]\n])\n```", "```py\nmargsums = [cont_table.values.sum(axis=x) for x in [1, 0]]\n```", "```py\nfrom functools import reduce\n\nmargsums[0] = margsums[0].reshape(2, -1)\nexpected = reduce(np.multiply, margsums) / cont_table.values.sum()\n```", "```py\ndiff = expected - cont_table.values\ndirection = np.sign(diff)\nmagnitude = np.minimum(0.5, np.abs(diff))\nobserved = cont_table.values + magnitude * direction\n```", "```py\nchisq = np.sum(((observed - expected) ** 2) / expected)\n```", "```py\n1 - chi2.cdf(chisq, df=1)\n```", "```py\nfrom scipy.stats import chi2_contingency\n\nchisq, pvalue, df, expected = chi2_contingency(cont_table)\nprint(chisq, pvalue)\n```", "```py\ntraining_freqs = np.array([10_322, 24_930, 30_299])\nserving_freqs = np.array([1_015, 2_501, 3_187])\n\np_values, chi_sqs = [], []\nmultipliers = [0.01, 0.03, 0.05, 0.07, 0.1, 0.3, 0.5, 0.7, 1, 3, 5, 7, 10]\nfor serving_size_multiplier in multipliers:\n  augmented_serving_freqs = serving_freqs * serving_size_multiplier\n  cont_table = pd.DataFrame([\n  training_freqs,\n  augmented_serving_freqs,\n  ])\n  chi_sq, pvalue, _, _ = chi2_contingency(cont_table)\n  p_values.append(pvalue)\n  chi_sqs.append(chi_sq)\n```", "```py\nnum_obs = 65_551\nnum_mobile_obs = 30_299\n```", "```py\nmobile_freq = np.arange(0, 1.0001, 0.0001)\n```", "```py\ndevices = pd.DataFrame([(x, y) for x in [num_mobile_obs] for y in mobile_freq])\ndevices.columns = [\"num_mobile\", \"mobile_freq\"]\n```", "```py\ndevices[\"prior\"] = 1.\n```", "```py\ndevices[\"likelihood\"] = binom.pmf(\n  devices[\"num_mobile\"], \n  num_obs, \n  devices[\"mobile_freq\"]\n)\n```", "```py\ndevices[\"posterior\"] = devices[\"prior\"] * devices[\"likelihood\"]\ndevices[\"posterior\"] /= devices[\"posterior\"].sum()\n```", "```py\nmobile_obs = devices[devices[\"num_mobile\"] == num_mobile_obs]\nmobile_obs[\"posterior\"] /= mobile_obs[\"posterior\"].sum()\n```", "```py\nresults = {}\nfor dataset, num_obs, num_mobile_obs, color in zip(\n  [\"training\", \"serving\"], [65_551, 6703], [30_299, 3187], [\"blue\", \"green\"]\n):\n  # Set up grid\n  num_mobile = np.arange(0, num_obs + 1, 1)\n  mobile_freq = np.arange(0, 1.0001, 0.0001)\n  devices = pd.DataFrame([(x, y) for x in num_mobile for y in mobile_freq])\n  devices.columns = [\"num_mobile\", \"mobile_freq\"]\n\n  # Follow Bayes rule to compute posterior\n  devices[\"prior\"] = 1.\n  devices[\"likelihood\"] = binom.pmf(\n    devices[\"num_mobile\"], \n    num_obs,\n    devices[\"mobile_freq\"],\n  )\n  devices[\"posterior\"] = devices[\"prior\"] * devices[\"likelihood\"]\n  devices[\"posterior\"] /= devices[\"posterior\"].sum()\n\n  # Ger posterior for observed number of mobile users\n  mobile_obs = devices[devices[\"num_mobile\"] == num_mobile_obs]\n  mobile_obs[\"posterior\"] /= mobile_obs[\"posterior\"].sum()\n\n  # Sample from posterior and store the draws\n  samples[dataset] = random.choices(\n    mobile_obs[\"mobile_freq\"].tolist(),\n    weights=mobile_obs[\"posterior\"].tolist(),\n    k=10_000,\n  )\n\n  # Plot the posterior\n  sns.lineplot(\n    mobile_obs[\"mobile_freq\"],\n    mobile_obs[\"posterior\"], \n    color=f\"dark{color}\",\n    label=dataset,\n  )\n  plt.fill_between(\n    mobile_obs[\"mobile_freq\"],\n    0,\n    mobile_obs[\"posterior\"],\n    color=f\"light{color}\",\n  )\n  plt.xlim(0.45, 0.50)\n  plt.xlabel(\"Proportion of users using a mobile device\")\n  plt.ylabel(\"Probability density\")\n```", "```py\nnp.mean([\n  serving > training\n  for serving, training in\n  zip(samples[\"serving\"], samples[\"training\"])\n])\n```", "```py\nnp.mean([\n  serving - training\n  for serving, training in\n  zip(samples[\"serving\"], samples[\"training\"])\n])\n```"]