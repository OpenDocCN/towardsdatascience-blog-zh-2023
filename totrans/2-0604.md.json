["```py\napp = Dash(__name__)\n\ndf = pd.read_csv('names_by_state_cleaned.csv')\nf = open(\"us-states.json\")\nus_states = json.load(f)\n```", "```py\napp.layout = html.Div(className = 'dashboard', children = [\n    html.H1(children='Popular Names Per US State', style={'textAlign':'center'}),\n    html.Div(className='filters', children=[\n        html.Div(children=[\n            html.H2(['Gender'], style={'font-weight': 'bold', \"text-align\": \"center\",\"offset\":1}),\n            dcc.RadioItems(\n                id='sex-radio-selection', \n                options=[{'label': k, 'value': k} for k in [\"Male\", \"Female\"]],\n                value=initial_sex,\n                inline=True,\n                style={\"text-align\": \"center\"}\n            )], style=dict(width='33.33%')),\n        html.Div(children=[\n            html.H2(['Top N Names'], style={'font-weight': 'bold', \"text-align\": \"center\",\"offset\":1}),\n            dcc.RadioItems(\n                id='rank-dropdown-selection', \n                options=[5, 10, 15],\n                value=initial_rank,\n                inline=True,\n                style={\"text-align\": \"center\"}\n            )], style=dict(width='33.33%')),\n        html.Div(children=[\n            html.H3(['Choose Name To See Popularity Per State On Map'], style={'font-weight': 'bold', \"text-align\": \"center\",\"offset\":6}),\n            dcc.Dropdown(\n                options=[{'label': k, 'value': k} for k in names_in_initial_rank],\n                id='top-rank-name-dropdown-selection',\n                value=names_in_initial_rank[0],\n                style={\"text-align\": \"center\"}\n            ),\n            html.Label(['**if map is fully gray, make sure a name is selected in dropdown above'], style={\"text-align\": \"center\",\"offset\":6}),\n            ], style=dict(width='15%')),\n            html.Div(children=[\n                html.Label(['Click on state in map below to view Top <N> Popular <Gender> Names in bar graph below the map.'], style={\"text-align\": \"right\"}),\n            ],  style=dict(width='33.33%')),\n        ], style=dict(display='flex')),\n     dcc.Loading(\n        id=\"loading-2\",\n        children=[\n            dcc.Graph(\n                id='map'\n            ),\n            dcc.Graph(id='bar_top_n')\n        ],\n        type=\"circle\"\n     )\n]) \n```", "```py\nyear_values = df[\"year\"].unique()\nrank_values = df[\"rank\"].unique()\n\ninitial_rank = 5\ninitial_sex = \"Male\"\ninitial_year = 1910\ninitial_state = \"AK\"\n\nranks = []\nfor i in range(0, initial_rank):\n    ranks.append(i+1)\n\nnames_in_initial_rank = df[(df[\"rank\"].isin(ranks)) & (df[\"sex\"] == initial_sex[0]) & (df[\"year\"] == initial_year) & (df[\"state\"] == initial_state)][\"name\"].unique()\n```", "```py\n@callback {\n   Output[],\n   Inputs[]\n}\ndef callback_function(Inputs[]) {\n  return Outputs[]\n} \n```", "```py\n@callback(\n    [\n        Output('map', 'figure'),\n        Output('bar_top_n', 'figure'),\n        Output(\"top-rank-name-dropdown-selection\", \"options\")\n    ],\n    [\n        Input('sex-radio-selection', 'value'),\n        Input('rank-dropdown-selection', 'value'),\n        Input('top-rank-name-dropdown-selection', 'value'),\n        Input('map', 'clickData')\n    ]\n)\ndef update_graphs(sex_value, rank_value, name_for_map_value, click_data):\n\n    df_filter = df[df[\"sex\"] == sex_value[0]]\n    ranks = []\n    for i in range(0, rank_value):\n        ranks.append(i+1)\n\n    state = initial_state\n    year = initial_year\n    if click_data:\n        state = click_data['points'][0]['location']\n        year = click_data['points'][0]['customdata'][0]\n\n    top_rank_name_dropdown_options = df[(df[\"rank\"].isin(ranks)) & (df[\"sex\"] == sex_value[0]) & (df[\"state\"] == state)][\"name\"].unique()\n\n    if not name_for_map_value:\n        name_for_map_value = top_rank_name_dropdown_options[0]\n\n    RENAMED_COUNT_COLUMN = \"Population with Name\"\n    df_filter = df_filter.rename(columns={\"count\": RENAMED_COUNT_COLUMN})\n\n    df_filter = df_filter.sort_values(by=[\"year\"])\n\n    df_map_filter = df_filter[(df_filter[\"rank\"].isin(ranks)) & (df_filter[\"name\"] == name_for_map_value)]\n\n    df_bar_filter = df_filter[(df_filter[\"state\"] == state) & (df_filter[\"rank\"].isin(ranks)) & (df_filter[\"year\"] == year)]\n    df_bar_filter = df_bar_filter.sort_values(by=[\"rank\"])\n\n    fig_map = px.choropleth(df_map_filter, geojson=us_states, \n                            locations='state', \n                            color=RENAMED_COUNT_COLUMN,\n                            animation_frame='year',\n                            animation_group='state',\n                            hover_name=\"state\",\n                            custom_data='year',\n                            color_continuous_scale=\"Reds\",\n                            range_color=(0, 1100),\n                            scope=\"usa\"\n                          )\n\n    fig_map.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\n    bar_chart_title = \"Top %i Popular %s Names In State %s Of %i\"%(rank_value, sex_value, state, year)\n\n    fig_bar = px.bar(df_bar_filter, \n                     x=\"name\", \n                     y=RENAMED_COUNT_COLUMN, \n                     title=bar_chart_title)\n    fig_bar.update_traces(marker_color='#D62728')\n    fig_bar.update_layout(margin={\"r\":50,\"t\":50,\"l\":0,\"b\":0})\n\n    return [fig_map, fig_bar, top_rank_name_dropdown_options]\n```"]