- en: 'Clean Code in PyTorch: Best Practices for Readable ML'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://towardsdatascience.com/clean-code-in-pytorch-best-practices-for-readable-ml-adfd798bf6df](https://towardsdatascience.com/clean-code-in-pytorch-best-practices-for-readable-ml-adfd798bf6df)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/bd25c3ef78df4d6a87b77701273f3c31.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Greyson Joralemon](https://unsplash.com/@greysonjoralemon?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Five Tips for Writing Clean, Efficient and readable Code in PyTorch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@marcellopoliti?source=post_page-----adfd798bf6df--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----adfd798bf6df--------------------------------)[](https://towardsdatascience.com/?source=post_page-----adfd798bf6df--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----adfd798bf6df--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----adfd798bf6df--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Â·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----adfd798bf6df--------------------------------)
    Â·5 min readÂ·Mar 17, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the field of data science and programming in general, it is very important
    to be able to write code that is easy to read and maintain. Surely you too have
    had the experience of writing code that seemed to work fine and that was pretty
    clear, but then you reread it a day or a week later and it looked incomprehensible.
    Even more obvious is this difficulty when you have to review code written by other
    people.
  prefs: []
  type: TYPE_NORMAL
- en: In AI, it is critically important to write clear and understandable code, because
    we often have to set up several experiments, and then try multiple models, multiple
    data, and a ton of hyperparameters.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I share with you some tips that I use when programming with
    PyTorch that you can apply immediately and I hope they will help you become a
    little more efficient in your work as a data scientist.
  prefs: []
  type: TYPE_NORMAL
- en: Create a DataModule class to manage your data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, I will be working with the well-known MNIST dataset. Although
    the practices I use may seem unnecessary in this case, since the various libraries
    already facilitate the use of such simple datasets, they can always come in handy
    when working with more complex datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Many times when working with nonstandard datasets we have to go through different
    steps, such as downloading the data, structuring folders and subfolders to split
    the data, creating a custom Dataset class, and much more. So it would be useful
    to create a DataModule class that takes care of everything there is to do within
    it and provides two functions that directly return the data loaders that we will
    use for training.
  prefs: []
  type: TYPE_NORMAL
- en: Having such a class will allow us to have a cleaner and more scalable workflow
    on a large scale. Letâ€™s look at a simple example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the DataModule class takes care of creating datasets and instantiating
    dataloaders using two functions. In this way, in the main function, I can simply
    call the train_dataloader() and val_dataloader() functions to access my data.
    In general, if you have some data retrieval tasks that you need to perform to
    collect your dataset, itâ€™s a good practice to add them to the DataModule class,
    which can then be used to instantiate dataloaders. In this way, you can access
    the data in a straightforward manner.
  prefs: []
  type: TYPE_NORMAL
- en: Letâ€™s reproduce TensorFlow fit method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I am not a big fan of TensorFlow, in fact, unless required I almost always work
    with PyTorch. Though, I find that the fit() method of TensorFlow is quite handy.
    In fact, after you have created a model you only need to call model.fit(data)
    to train it, somewhat like you do with models in scikit-learn.
  prefs: []
  type: TYPE_NORMAL
- en: So why not recreate something similar in PyTorch as well?
  prefs: []
  type: TYPE_NORMAL
- en: What we will do in the next example is to define a fit function that trains
    the network on the MNIST data by taking as input the DataModule created earlier.
    After that, we will make this function a method of our class that defines the
    model.
  prefs: []
  type: TYPE_NORMAL
- en: This way whenever we want to create a different model, we could always associate
    it with the fit() function, which remains unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now we can use model.fit(datamodule = datamodule, epochs = 3) to run our training.
  prefs: []
  type: TYPE_NORMAL
- en: Progress Bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: During the model training, it is really annoying not to have hints about how
    long it will take to finish. But fortunately, it is possible to implement a progress
    bar in PyTorch in a really easy way.
  prefs: []
  type: TYPE_NORMAL
- en: Just use the tqdm function and wrap the dataloader and explicitly state the
    total length of the dataloader with *len(dataloader)*.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, a progress bar will appear as if by magic, making the output much
    more visually appealing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/78957b23a434b03e16b2423b8ac1d2c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [https://github.com/tqdm/tqdm](https://github.com/tqdm/tqdm)'
  prefs: []
  type: TYPE_NORMAL
- en: Evaluation Metrics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I donâ€™t know why but when I read codes written in PyTorch I very frequently
    see people implementing common metrics by hand, such as precision, recall, accuracyâ€¦
  prefs: []
  type: TYPE_NORMAL
- en: However, this is not the case when they work with other libraries such as scikit-learn.
    Implementing these metrics within the training function can make the function
    difficult to read, and perhaps bugs are inserted even more easily.
  prefs: []
  type: TYPE_NORMAL
- en: My suggestion then is to use the metrics already found in libraries such as
    scikit-learn when working. This allows us to use code that is probably more robust
    but more importantly saves us time!
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the discussion is different if there is a need to implement custom
    metrics, so if you are doing research on, for example, new methods for model evaluation.
  prefs: []
  type: TYPE_NORMAL
- en: Particularly when starting to develop a project and we want to use standard
    metrics to see if we are going in the right direction, I find it useful to use
    the classification_report function of scikit-learn. Letâ€™s look at an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b300471471a870461c6dc132c296be30.png)'
  prefs: []
  type: TYPE_IMG
- en: (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a developer, I always try to make my code clear and clean (and bug-free![ðŸ˜‰](https://emojipedia.org/it/apple/ios-15.4/faccina-che-fa-l-occhiolino/)).
    I always try to keep in mind the fact that my code must be as understandable as
    possible even without the use of comments. Therefore, I love to learn easy-to-use
    tricks that I can implement immediately in my code.
  prefs: []
  type: TYPE_NORMAL
- en: If this article was helpful to you follow me to read my next articles of this
    type! ðŸ˜Š
  prefs: []
  type: TYPE_NORMAL
- en: The End
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Marcello Politi*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Linkedin](https://www.linkedin.com/in/marcello-politi/), [Twitter](https://twitter.com/_March08_),
    [CV](https://march-08.github.io/digital-cv/)'
  prefs: []
  type: TYPE_NORMAL
