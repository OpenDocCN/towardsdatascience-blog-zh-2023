["```py\n# import\nimport pandas as pd\n\n# read the file\ndf_adult = pd.read_csv('adult.data', header=None, names=[\n        'age', 'workclass', 'fnlwgt', 'education', 'education-num', 'marital-status',\n        'occupation', 'relationship', 'race', 'sex', 'capital-gain', 'capital-loss',\n        'hours-per-week', 'native-country', 'income'])\n\n# return top 5 rows of the dataframe\ndf_adult.head()\n```", "```py\ndf_adult.info()\n```", "```py\n# import libraries\nimport pandas as pd\nimport time # this is used to calculate the training time of each model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, average_precision_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import GradientBoostingClassifier, AdaBoostClassifier\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\n```", "```py\ndef load_and_preprocess_data(filepath):\n    # read the data set into as a dataframe\n    data = pd.read_csv(filepath, header=None, names=[\n        'age', 'workclass', 'fnlwgt', 'education', 'education-num', 'marital-status',\n        'occupation', 'relationship', 'race', 'sex', 'capital-gain', 'capital-loss',\n        'hours-per-week', 'native-country', 'income'])\n\n    # initialize a label encoder\n    label_encoder = LabelEncoder()\n\n    # encode columns\n    for col in data.select_dtypes(include=['object']).columns:\n        data[col] = label_encoder.fit_transform(data[col])\n\n    # Separate features as X and target as y\n    X = data.drop('income', axis=1)\n    y = data['income']\n\n    return X, y\n```", "```py\ndef train_and_evaluate_classifier(clf, X_train, y_train, X_test, y_test):\n    # starting to track the time so that we can report the total training time\n    start_time = time.time()\n\n    # train the classifier\n    clf.fit(X_train, y_train)\n\n    # stop tracking time, now that training is completed\n    end_time = time.time()\n\n    # calculated how long training took\n    elapsed_time = end_time - start_time\n\n    # make predictions using the trained model. this will be used for evaluation of the trained model\n    y_pred = clf.predict(X_test)\n    y_proba = clf.predict_proba(X_test)[:, 1] if hasattr(clf, 'predict_proba') else None\n\n    # here are the metrics we use for evaluations\n    metrics = {\n        'Accuracy': accuracy_score(y_test, y_pred),\n        'Precision': precision_score(y_test, y_pred),\n        'Recall': recall_score(y_test, y_pred),\n        'F1-Score': f1_score(y_test, y_pred),\n        'AUC-ROC': roc_auc_score(y_test, y_proba) if y_proba is not None else None,\n        'AUC-PR': average_precision_score(y_test, y_proba) if y_proba is not None else None,\n        'Training Time (s)': elapsed_time\n    }\n\n    return metrics\n```", "```py\ndef main():\n    # initialize a dataframe to store the results in\n    results_df = pd.DataFrame(columns=['Accuracy', 'Precision', 'Recall', 'F1-Score', 'AUC-ROC', 'AUC-PR', 'Training Time (s)'])\n\n    # load and preprocess the data, using our previously-defined function\n    X, y = load_and_preprocess_data('adult.data')\n\n    # split the data into train and test sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1234)\n\n    # initialize the classifiers\n    classifiers = {\n        'XGBoost': xgb.XGBClassifier(),\n        'Random Forest': RandomForestClassifier(),\n        'SVM': SVC(probability=True),\n        'k-NN': KNeighborsClassifier(),\n        'LightGBM': lgb.LGBMClassifier(),\n        'CatBoost': CatBoostClassifier(verbose=0),\n        'GradientBoosting': GradientBoostingClassifier(),\n        'AdaBoost': AdaBoostClassifier()\n    }\n\n    # train and evaluate the trained classifiers\n    for name, clf in classifiers.items():\n        metrics = train_and_evaluate_classifier(clf, X_train, y_train, X_test, y_test)\n        results_df.loc[name] = metrics\n\n    # sort classifiers alphabetically\n    results_df.sort_index(inplace=True)\n\n    # add row numbers\n    results_df.reset_index(drop=False, inplace=True)\n    results_df.index.name = '#'\n\n    return results_df\n\nif __name__ == \"__main__\":\n    df = main()\n```", "```py\n# round results to 3 decimal places\ndf.round(3)\n```", "```py\n# sort results\ndf.sort_values(by=['F1-Score', 'AUC-ROC', 'Training Time (s)'], ascending=[False, False, True]).reset_index(drop=True).round(3)\n```"]