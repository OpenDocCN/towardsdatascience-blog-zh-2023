- en: Python String Data Type Explained
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/python-string-data-type-explained-ff81a363fe08](https://towardsdatascience.com/python-string-data-type-explained-ff81a363fe08)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this article we will explore Python string data type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://pyshark.medium.com/?source=post_page-----ff81a363fe08--------------------------------)[![Misha
    Sv](../Images/d3f9605e2c7020246ff793869728e218.png)](https://pyshark.medium.com/?source=post_page-----ff81a363fe08--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ff81a363fe08--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ff81a363fe08--------------------------------)
    [Misha Sv](https://pyshark.medium.com/?source=post_page-----ff81a363fe08--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ff81a363fe08--------------------------------)
    ·6 min read·Jan 30, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/251d45286cc239a7aea658321c440a0f.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Gaelle Marcel](https://unsplash.com/@gaellemarcel?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/S6hz7Y1FCTs?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: In this article we will explore Python string data type.
  prefs: []
  type: TYPE_NORMAL
- en: '**Table of Contents**'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a string in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access characters from a string in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find character in a string in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slice a string in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iterate over a string in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concatenate strings in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Split strings in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python, strings are immutable sequences of characters, and are used to handle
    textual data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Key things you should know about strings, they are:'
  prefs: []
  type: TYPE_NORMAL
- en: ordered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: immutable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iterable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning data types in each programming language is essential to understand
    the code and programs.
  prefs: []
  type: TYPE_NORMAL
- en: String data type is widely used in many programming and machine learning solutions
    built in Python specifically to store some text formatted data.
  prefs: []
  type: TYPE_NORMAL
- en: Create a string in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Python, you can create a string in 4 different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: By enclosing characters in single quotes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By enclosing characters in double quotes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By enclosing characters in triple quotes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By using **str()** constructor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a string using single quotes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is one of the most common ways of creating strings in Python and is very
    simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Create a string using double quotes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This way of creating strings in Python is identical to the previous one, except
    now we will be using double quotes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Create a string using triple quotes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This way of creating strings in Python is perhaps the most rare as there are
    only a few cases when we want to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enclosing characters in triple quotes will yield the same output as the previous
    two approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: However, one main difference of using triple quotes is when you want to create
    a multiline string, where different parts of the string are on different lines
    in the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Create a string using str() constructor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python, you can also create strings by using the **str()** constructor.
  prefs: []
  type: TYPE_NORMAL
- en: The **str(***object***)** constructor takes any object and returns its string
    representation.
  prefs: []
  type: TYPE_NORMAL
- en: 'It returns:'
  prefs: []
  type: TYPE_NORMAL
- en: String representation if *object* is one of the built-in Python objects ([int()](https://pyshark.com/python-numeric-data-types/#int),
    [float()](https://pyshark.com/python-numeric-data-types/#float), [complex()](https://pyshark.com/python-numeric-data-types/#complex),
    [bool()](https://pyshark.com/python-boolean-data-type-explained/), and others)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Empty string if *object* is empty
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s look at a few examples of **str()** with different data types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Access characters in a string in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An important and very useful property of a Python list is that it’s an indexed
    sequence, meaning for a list with **n** elements, the first element will have
    an index = 0, second element index = 1, and all the way to *n*-1.
  prefs: []
  type: TYPE_NORMAL
- en: A character in a string can be accessed by its index and index can also be reversed
    meaning that the fist element will have an index = — *n*, second element index
    = — *n*+1, and all the way to -1.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make it easier to showcase, take a look at the visualization below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f9219ee48fe2dfd698192b9da38a2f94.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that ‘P’ character in the string has two indexes: 0 and -6.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create this string in Python and print out its first character by using
    the indexes above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Find character in a string in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using indexes we can also find the position of a character in a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s reuse the string from the previous example: *‘Python’*, and try to find
    the position of *‘y’* character in a string.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using **.index()** method of Python string, we can find the position of a character
    by passing the character as a parameter into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Slice a string in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section we explored how to access an character from a Python
    string using its exact index.
  prefs: []
  type: TYPE_NORMAL
- en: In this section we will explore how to access a range of characters, for example,
    first two or last two.
  prefs: []
  type: TYPE_NORMAL
- en: Recall that for retrieving characters from a string using an index, we placed
    it in square brackets **[]**.
  prefs: []
  type: TYPE_NORMAL
- en: Slicing is using the same approach, but instead of passing a single index value,
    we will pass a range.
  prefs: []
  type: TYPE_NORMAL
- en: A range in Python is passed using the following syntax **[***from* **:** *to***]**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using ranges we can slice the string to access multiple characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Notice that characters specified at *to* index are not included, since in Python
    slicing the algorithm goes through characters until specified *to* index and includes
    all characters up to that index but not including the character under the *to*
    index.
  prefs: []
  type: TYPE_NORMAL
- en: Iterate over a string in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python string is an iterable object, meaning that we can iterate over characters
    in the string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simple iteration can be performed using a **for()** loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Concatenate strings in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python, we can also concatenate (combine) multiple strings together to create
    a single string.
  prefs: []
  type: TYPE_NORMAL
- en: 'The 2 most popular ways to concatenate strings in Python are:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the ‘+’ operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using .join() method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the ‘+’ operator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the ‘+’ operator is one of the most commons ways to concatenate multiple
    strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Using .join() method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python string .join() method allows to concatenate a list of strings to create
    a new string.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax of the Python string **.join()** method is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s take a look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Split strings in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python, just as we can concatenate multiple strings, we can also split a
    single string into multiple strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are multiple ways of doing it, however the most popular way is using
    the string .split() method, which splits a string into a list of strings based
    on the separator (default separator is: **‘ ’**).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax of the Python string **.split()** method is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s take a look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: You can also specify a custom separator based on what you would like to split
    the string.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'and you should get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article we explored Python boolean data type including its use in boolean
    expressions and control structures.
  prefs: []
  type: TYPE_NORMAL
- en: 'As your next step in learning Python consider reading about Python data types
    and data structures in the following articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Python numeric data types](https://pyshark.com/python-numeric-data-types/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python boolean data type](https://pyshark.com/python-boolean-data-type-explained/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python list data structure](https://pyshark.com/python-list-data-structure/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python dictionary data structure](https://pyshark.com/python-dictionary-data-structure/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python set data structure](https://pyshark.com/everything-about-python-set-data-structure/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Originally published at* [*https://pyshark.com*](https://pyshark.com/python-string-data-type-explained/)
    *on January 30, 2023.*'
  prefs: []
  type: TYPE_NORMAL
