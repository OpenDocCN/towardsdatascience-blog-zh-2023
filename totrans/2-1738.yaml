- en: Python String Data Type Explained
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 字符串数据类型解释
- en: 原文：[https://towardsdatascience.com/python-string-data-type-explained-ff81a363fe08](https://towardsdatascience.com/python-string-data-type-explained-ff81a363fe08)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/python-string-data-type-explained-ff81a363fe08](https://towardsdatascience.com/python-string-data-type-explained-ff81a363fe08)
- en: In this article we will explore Python string data type
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在本文中，我们将探索 Python 字符串数据类型
- en: '[](https://pyshark.medium.com/?source=post_page-----ff81a363fe08--------------------------------)[![Misha
    Sv](../Images/d3f9605e2c7020246ff793869728e218.png)](https://pyshark.medium.com/?source=post_page-----ff81a363fe08--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ff81a363fe08--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ff81a363fe08--------------------------------)
    [Misha Sv](https://pyshark.medium.com/?source=post_page-----ff81a363fe08--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://pyshark.medium.com/?source=post_page-----ff81a363fe08--------------------------------)[![Misha
    Sv](../Images/d3f9605e2c7020246ff793869728e218.png)](https://pyshark.medium.com/?source=post_page-----ff81a363fe08--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ff81a363fe08--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ff81a363fe08--------------------------------)
    [Misha Sv](https://pyshark.medium.com/?source=post_page-----ff81a363fe08--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ff81a363fe08--------------------------------)
    ·6 min read·Jan 30, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ff81a363fe08--------------------------------)
    ·阅读时间6分钟·2023年1月30日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/251d45286cc239a7aea658321c440a0f.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/251d45286cc239a7aea658321c440a0f.png)'
- en: Photo by [Gaelle Marcel](https://unsplash.com/@gaellemarcel?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/S6hz7Y1FCTs?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Gaelle Marcel](https://unsplash.com/@gaellemarcel?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    拍摄，来自 [Unsplash](https://unsplash.com/photos/S6hz7Y1FCTs?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: In this article we will explore Python string data type.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将探索 Python 字符串数据类型。
- en: '**Table of Contents**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**目录**'
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍
- en: Create a string in Python
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 中创建字符串
- en: Access characters from a string in Python
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 中访问字符串中的字符
- en: Find character in a string in Python
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 中查找字符串中的字符
- en: Slice a string in Python
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 中切片字符串
- en: Iterate over a string in Python
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 中迭代字符串
- en: Concatenate strings in Python
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 中连接字符串
- en: Split strings in Python
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 中拆分字符串
- en: Conclusion
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结论
- en: Introduction
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In Python, strings are immutable sequences of characters, and are used to handle
    textual data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，字符串是不可变的字符序列，用于处理文本数据。
- en: 'Key things you should know about strings, they are:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该了解关于字符串的关键点如下：
- en: ordered
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有序的
- en: immutable
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可变的
- en: iterable
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可迭代的
- en: Learning data types in each programming language is essential to understand
    the code and programs.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 学习每种编程语言中的数据类型对于理解代码和程序至关重要。
- en: String data type is widely used in many programming and machine learning solutions
    built in Python specifically to store some text formatted data.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串数据类型在许多编程和机器学习解决方案中广泛使用，特别是在 Python 中用于存储一些格式化的文本数据。
- en: Create a string in Python
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中创建字符串
- en: 'In Python, you can create a string in 4 different ways:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，你可以通过4种不同的方式创建字符串：
- en: By enclosing characters in single quotes
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过用单引号括起字符
- en: By enclosing characters in double quotes
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过用双引号括起字符
- en: By enclosing characters in triple quotes
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过用三重引号括起字符
- en: By using **str()** constructor
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用 **str()** 构造函数
- en: Create a string using single quotes
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用单引号创建字符串
- en: 'This is one of the most common ways of creating strings in Python and is very
    simple:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在 Python 中创建字符串的最常见方式之一，非常简单：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'and you should get:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Create a string using double quotes
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用双引号创建字符串
- en: 'This way of creating strings in Python is identical to the previous one, except
    now we will be using double quotes:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这种创建字符串的方式与之前的方法相同，只是现在我们将使用双引号：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'and you should get:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Create a string using triple quotes
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用三重引号创建字符串
- en: This way of creating strings in Python is perhaps the most rare as there are
    only a few cases when we want to use it.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种创建字符串的方式可能是最少见的，因为只有少数几种情况需要使用它。
- en: 'Enclosing characters in triple quotes will yield the same output as the previous
    two approaches:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 用三重引号括起字符将产生与前两种方法相同的输出：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'and you should get:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: However, one main difference of using triple quotes is when you want to create
    a multiline string, where different parts of the string are on different lines
    in the output.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用三重引号的一个主要区别是，当你想创建一个多行字符串时，字符串的不同部分会在输出中显示在不同的行上。
- en: 'For example:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'and you should get:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Create a string using str() constructor
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 str() 构造函数创建一个字符串
- en: In Python, you can also create strings by using the **str()** constructor.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，你也可以通过使用**str()**构造函数来创建字符串。
- en: The **str(***object***)** constructor takes any object and returns its string
    representation.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**str(***object***)** 构造函数接受任何对象并返回其字符串表示形式。'
- en: 'It returns:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回：
- en: String representation if *object* is one of the built-in Python objects ([int()](https://pyshark.com/python-numeric-data-types/#int),
    [float()](https://pyshark.com/python-numeric-data-types/#float), [complex()](https://pyshark.com/python-numeric-data-types/#complex),
    [bool()](https://pyshark.com/python-boolean-data-type-explained/), and others)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果*object*是内置的 Python 对象之一（[int()](https://pyshark.com/python-numeric-data-types/#int),
    [float()](https://pyshark.com/python-numeric-data-types/#float), [complex()](https://pyshark.com/python-numeric-data-types/#complex),
    [bool()](https://pyshark.com/python-boolean-data-type-explained/)，以及其他），其字符串表示形式如下。
- en: Empty string if *object* is empty
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果*object*为空，则为空字符串
- en: 'Let’s look at a few examples of **str()** with different data types:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看几个使用**str()**的不同数据类型的示例：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'and you should get:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Access characters in a string in Python
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中访问字符串中的字符
- en: An important and very useful property of a Python list is that it’s an indexed
    sequence, meaning for a list with **n** elements, the first element will have
    an index = 0, second element index = 1, and all the way to *n*-1.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Python 列表的一个重要且非常有用的属性是它是一个带索引的序列，这意味着对于一个包含**n**个元素的列表，第一个元素的索引 = 0，第二个元素的索引
    = 1，一直到*n*-1。
- en: A character in a string can be accessed by its index and index can also be reversed
    meaning that the fist element will have an index = — *n*, second element index
    = — *n*+1, and all the way to -1.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串中的字符可以通过其索引访问，索引也可以反转，这意味着第一个元素的索引 = — *n*，第二个元素的索引 = — *n*+1，一直到 -1。
- en: 'To make it easier to showcase, take a look at the visualization below:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更容易展示，请看下面的可视化图：
- en: '![](../Images/f9219ee48fe2dfd698192b9da38a2f94.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f9219ee48fe2dfd698192b9da38a2f94.png)'
- en: Image by Author
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'We can see that ‘P’ character in the string has two indexes: 0 and -6.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到字符串中的‘P’字符有两个索引：0 和 -6。
- en: 'Let’s create this string in Python and print out its first character by using
    the indexes above:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 Python 中创建这个字符串，并使用上述索引打印出它的第一个字符：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'and you should get:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Find character in a string in Python
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中查找字符串中的字符
- en: Using indexes we can also find the position of a character in a string.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用索引，我们还可以找到字符串中字符的位置。
- en: 'Let’s reuse the string from the previous example: *‘Python’*, and try to find
    the position of *‘y’* character in a string.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重用之前示例中的字符串：*‘Python’*，并尝试找到*‘y’*字符在字符串中的位置。
- en: 'Using **.index()** method of Python string, we can find the position of a character
    by passing the character as a parameter into it:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 字符串的**.index()** 方法，我们可以通过将字符作为参数传递给它来找到字符的位置：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'and you should get:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Slice a string in Python
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中切片字符串
- en: In the previous section we explored how to access an character from a Python
    string using its exact index.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们探讨了如何通过其精确索引从 Python 字符串中访问一个字符。
- en: In this section we will explore how to access a range of characters, for example,
    first two or last two.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何访问一系列字符，例如前两个或最后两个。
- en: Recall that for retrieving characters from a string using an index, we placed
    it in square brackets **[]**.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，若要使用索引从字符串中检索字符，我们将索引放在方括号**[]**中。
- en: Slicing is using the same approach, but instead of passing a single index value,
    we will pass a range.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 切片使用相同的方法，但我们传递的是一个范围，而不是单一的索引值。
- en: A range in Python is passed using the following syntax **[***from* **:** *to***]**.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的范围是使用以下语法传递的**[***from* **:** *to***]**。
- en: 'Using ranges we can slice the string to access multiple characters:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用范围我们可以切片字符串以访问多个字符：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'and you should get:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Notice that characters specified at *to* index are not included, since in Python
    slicing the algorithm goes through characters until specified *to* index and includes
    all characters up to that index but not including the character under the *to*
    index.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，指定的字符在*to*索引处不包括在内，因为在 Python 切片算法中，它会遍历字符直到指定的*to*索引，并包括所有到达该索引但不包括*to*索引下的字符。
- en: Iterate over a string in Python
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中迭代字符串
- en: Python string is an iterable object, meaning that we can iterate over characters
    in the string.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Python 字符串是一个可迭代对象，这意味着我们可以遍历字符串中的字符。
- en: 'Simple iteration can be performed using a **for()** loop:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 **for()** 循环执行简单的迭代：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'and you should get:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Concatenate strings in Python
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中连接字符串
- en: In Python, we can also concatenate (combine) multiple strings together to create
    a single string.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，我们也可以将多个字符串连接（组合）在一起以创建一个单一字符串。
- en: 'The 2 most popular ways to concatenate strings in Python are:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中连接字符串的两种最流行的方法是：
- en: Using the ‘+’ operator
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ‘+’ 操作符
- en: Using .join() method
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 .join() 方法
- en: Using the ‘+’ operator
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ‘+’ 操作符
- en: Using the ‘+’ operator is one of the most commons ways to concatenate multiple
    strings.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ‘+’ 操作符是连接多个字符串的最常见方法之一。
- en: 'Let’s take a look at an example:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'and you should get:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Using .join() method
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 .join() 方法
- en: Python string .join() method allows to concatenate a list of strings to create
    a new string.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Python 字符串 .join() 方法允许将一个字符串列表连接起来以创建一个新字符串。
- en: 'The syntax of the Python string **.join()** method is:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Python 字符串 **.join()** 方法的语法是：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let’s take a look at an example:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'and you should get:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Split strings in Python
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中拆分字符串
- en: In Python, just as we can concatenate multiple strings, we can also split a
    single string into multiple strings.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，正如我们可以连接多个字符串一样，我们也可以将一个字符串拆分成多个字符串。
- en: 'There are multiple ways of doing it, however the most popular way is using
    the string .split() method, which splits a string into a list of strings based
    on the separator (default separator is: **‘ ’**).'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以做到这一点，但最常用的方法是使用字符串的 .split() 方法，它根据分隔符（默认分隔符是：**‘ ’**）将字符串拆分成一个字符串列表。
- en: 'The syntax of the Python string **.split()** method is:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Python 字符串 **.split()** 方法的语法是：
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let’s take a look at an example:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子：
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'and you should get:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到：
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You can also specify a custom separator based on what you would like to split
    the string.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以根据你想要拆分字符串的内容指定自定义分隔符。
- en: 'For example:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'and you should get:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到：
- en: '[PRE27]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Conclusion
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article we explored Python boolean data type including its use in boolean
    expressions and control structures.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们探讨了 Python 布尔数据类型，包括它在布尔表达式和控制结构中的使用。
- en: 'As your next step in learning Python consider reading about Python data types
    and data structures in the following articles:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 作为学习 Python 的下一步，考虑阅读以下文章，了解 Python 数据类型和数据结构：
- en: '[Python numeric data types](https://pyshark.com/python-numeric-data-types/)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 数值数据类型](https://pyshark.com/python-numeric-data-types/)'
- en: '[Python boolean data type](https://pyshark.com/python-boolean-data-type-explained/)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 布尔数据类型](https://pyshark.com/python-boolean-data-type-explained/)'
- en: '[Python list data structure](https://pyshark.com/python-list-data-structure/)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 列表数据结构](https://pyshark.com/python-list-data-structure/)'
- en: '[Python dictionary data structure](https://pyshark.com/python-dictionary-data-structure/)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 字典数据结构](https://pyshark.com/python-dictionary-data-structure/)'
- en: '[Python set data structure](https://pyshark.com/everything-about-python-set-data-structure/)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 集合数据结构](https://pyshark.com/everything-about-python-set-data-structure/)'
- en: '*Originally published at* [*https://pyshark.com*](https://pyshark.com/python-string-data-type-explained/)
    *on January 30, 2023.*'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '*最初发表于* [*https://pyshark.com*](https://pyshark.com/python-string-data-type-explained/)
    *2023年1月30日。*'
