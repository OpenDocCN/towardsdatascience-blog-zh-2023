["```py\n%%bash\npip install scikit-learn\npip install pandas\npip install matplotlib seaborn\npip install scipy\n```", "```py\nimport pandas as pd\n\nURL = \"https://raw.githubusercontent.com/keitazoumana/Medium-Articles-Notebooks/main/data/bank.csv\"\nbank_data = pd.read_csv(URL, sep=\";\")\nbank_data.head()\n```", "```py\nbank_data.info()\n```", "```py\npercent_missing =round(100*(loan_data.isnull().sum())/len(loan_data),2)\npercent_missing\n```", "```py\nimport numpy as np \n\ncleaned_data = bank_data.select_dtypes(include=[np.int64])\ncleaned_data.info()\n```", "```py\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```", "```py\ndef show_boxplot(df):\n  plt.rcParams['figure.figsize'] = [14,6]\n  sns.boxplot(data = df, orient=\"v\")\n  plt.title(\"Outliers Distribution\", fontsize = 16)\n  plt.ylabel(\"Range\", fontweight = 'bold')\n  plt.xlabel(\"Attributes\", fontweight = 'bold')\n\nshow_boxplot(cleaned_data)\n```", "```py\ndef remove_outliers(data):\n\n  df = data.copy()\n\n  for col in list(df.columns):\n\n        Q1 = df[str(col)].quantile(0.05)\n        Q3 = df[str(col)].quantile(0.95)\n        IQR = Q3 - Q1\n        lower_bound = Q1 - 1.5*IQR\n        upper_bound = Q3 + 1.5*IQR\n\n        df = df[(df[str(col)] >= lower_bound) & (df[str(col)] <= upper_bound)]\n\n  return df\n```", "```py\nwithout_outliers = remove_outliers(cleaned_data)\n\n# Display the new boxplot\nshow_boxplot(without_outliers)\n```", "```py\nwithout_outliers.shape\n\n# (4393, 7)\n```", "```py\nfrom sklearn.preprocessing import StandardScaler\n\ndata_scaler = StandardScaler()\n\nscaled_data = data_scaler.fit_transform(without_outliers)\nscaled_data.shape\n\n# (4393, 7)\n```", "```py\nfrom scipy.cluster.hierarchy import linkage, dendrogram\n\ncomplete_clustering = linkage(scaled_data, method=\"complete\", metric=\"euclidean\")\naverage_clustering = linkage(scaled_data, method=\"average\", metric=\"euclidean\")\nsingle_clustering = linkage(scaled_data, method=\"single\", metric=\"euclidean\")\n```", "```py\ndendrogram(complete_clustering)\nplt.show()\n```", "```py\ndendrogram(average_clustering)\nplt.show()\n```", "```py\nimport sys\nsys.setrecursionlimit(1000000)\n```", "```py\ndendrogram(single_clustering)\nplt.show()\n```", "```py\ncluster_labels = cut_tree(average_clustering, n_clusters=2).reshape(-1, )\nwithout_outliers[\"Cluster\"] = cluster_labels\n\nsns.boxplot(x='Cluster', y='balance', data=without_outliers)\n```"]