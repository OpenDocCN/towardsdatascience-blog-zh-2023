- en: 'Radial Treemaps: Extending Treemaps to Circular Mappings'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/radial-treemaps-extending-treemaps-to-circular-mappings-7b47785191da](https://towardsdatascience.com/radial-treemaps-extending-treemaps-to-circular-mappings-7b47785191da)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn about Radial Treemaps and create your own with Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@nickgerend?source=post_page-----7b47785191da--------------------------------)[![Nick
    Gerend](../Images/716eb183008674ac46c6aee96093c4b3.png)](https://medium.com/@nickgerend?source=post_page-----7b47785191da--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7b47785191da--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7b47785191da--------------------------------)
    [Nick Gerend](https://medium.com/@nickgerend?source=post_page-----7b47785191da--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7b47785191da--------------------------------)
    ·16 min read·Dec 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6f01781b35b77fcfaf65ec239959c2a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Radial-Treemap by Nick Gerend
  prefs: []
  type: TYPE_NORMAL
- en: '**Background**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**The Treemap Concept**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The “Treemap” was introduced by Ben Shneiderman at the University of Maryland
    in the early 1990s¹. Simply put, it’s an efficient way of displaying hierarchical
    data as a set of nested rectangles. Although the concept is simple, the arrangement
    of the rectangles is subject to an aesthetic preference, and various arrangement
    algorithms have been developed to enhance the appearance of the final layout.
  prefs: []
  type: TYPE_NORMAL
- en: '**Treemap Mechanics**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Given a hierarchy, a Treemap represents each branch in the hierarchy as a rectangle,
    which is then tiled with smaller rectangles representing sub-branches. The space
    in a Treemap is divided according to a specific attribute of the data (often size
    or value), and each rectangle’s area corresponds to the attribute’s magnitude,
    making it easy to compare different parts of the hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b0de705dee566f5e999e0a30c843ec77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Treemap of groups a, b and c, in that order -> largest items at each level:
    (a1), (a1,b1), (a1,b1,c1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To account for the arrangement of the rectangles, here are some of the common
    algorithms that govern a Treemap’s construction and ultimate appearance:'
  prefs: []
  type: TYPE_NORMAL
- en: Squarified Treemaps² - creates rectangles as close to squares as possible by
    adjusting the aspect ratio of the rectangles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strip Treemaps³ - lays out the rectangles in strips, either horizontally or
    vertically, based on the data’s hierarchy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slice-and-Dice⁴ - alternates between horizontal and vertical divisions which
    is straightforward but can create elongated rectangles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Treemap Features**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Proportions - the size of each rectangle is proportional to the data point it
    represents, allowing quick identification of larger and smaller items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lines and Colors - clever usage of borders, border size and color, and buffers
    can delineate hierarchy levels while container colors are often used to represent
    different dimensions of the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spatial Efficiency - Treemaps are particularly useful for visualizing large
    data sets as they make efficient use of space, allowing for the display of thousands
    of items simultaneously with the tiling algorithm determining the ultimate layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order - when gathering data independent of a known hierarchy, the order of dimensions
    in the grouping is important as it determines the parent-child relationships at
    each level of the hierarchy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall, the Treemap’s strength lies in its ability to display complex hierarchical
    data in a space-efficient and visually appealing manner, making it a popular visualization
    tool in any field of study.
  prefs: []
  type: TYPE_NORMAL
- en: Polymorphism
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hierarchical data and it’s representation as nested polygons and shapes already
    has various useful and visually appealing implementations. One of my favorites
    is Voronoi Treemaps⁵, and I particularly like the idea of 3D mappings with Voronoi
    shapes (like a 3D Voronoi Treemap Sphere).
  prefs: []
  type: TYPE_NORMAL
- en: There are likely many more Treemap representations waiting to be developed,
    and below I’ll cover my own implementation that I call the Radial Treemap. While
    writing this article, I also came across a tool called Krona⁶ (which seems to
    have a similar output style) that I found by reverse image searching my own Radial
    Treemap plots.
  prefs: []
  type: TYPE_NORMAL
- en: '**Radial Treemap**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Inspiration**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When I created my first Radial Treemap, I wasn’t thinking about implementing
    a type of Treemap, but rather a dataset about flying machines⁷. My goal was to
    take this dataset and make it look like a jet engine, as somewhat of an artistic
    visualization piece.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f73341b257eeeec27ec79a7862a4da69.png)'
  prefs: []
  type: TYPE_IMG
- en: “Takeoff” by Nick Gerend (3/11/2021)
  prefs: []
  type: TYPE_NORMAL
- en: What I ended up with, I initially called a “Pie-Tree” chart, but I realized
    later that it’s really just a form of Treemapping so now I call it a Radial Treemap!
  prefs: []
  type: TYPE_NORMAL
- en: What makes this type of Treemap special is the “radial” layout which opens up
    all kinds of useful and fun components that function well in a circular space.
    I find it particularly fun to integrate it with other types of radial charts for
    decomposing different aspects of hierarchical data.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, I’ll discuss the components that are involved with constructing
    a Radial Treemap.
  prefs: []
  type: TYPE_NORMAL
- en: Math, Algorithm & Layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Ingredients**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The math behind the Radial Treemap leverages a few basic ingredients that determine
    the polygon container dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: inner radius - outlines the shorter curved edge of the container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: outer radius - outlines the longer curved edge of the container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: starting angle - outlines the straight edge of the container at the minimum
    angle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ending angle - outlines the straight edge of the container at the maximum angle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These containers are essentially pie or donut wedges segmented between two radii,
    which seem irregular compared to the rectangular containers of the conventional
    Treemap, but maintain the same level of intuition with relative size comparisons.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/909a22de59aeab569edbbbe701f7e831.png)'
  prefs: []
  type: TYPE_IMG
- en: shapes from a Treemap and Radial-Treemap with similar areas
  prefs: []
  type: TYPE_NORMAL
- en: '**Functions**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we’ve established the ingredients of the containers, let’s move onto
    the math, beginning with the area of the outer parent container at the first level
    of the hierarchy. Assuming we want to have some flexibility with shape of the
    outer container, let’s implement an area function (func_area) for a donut slice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This allows for void space in the middle of the donut (between the origin and
    inner radius) and a void section between the starting and ending angles. Having
    this flexibility encourages unique and creative ways to configure the layout to
    get the most out of the use case at hand. The possibilities!
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we need to determine the corners of the containers depending on their
    prospective orientation (func_container):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For implementing a good default orientation method, let’s calculate the arc
    and radius lengths for both orientation options to select the container orientation
    with the smallest maximum length (what I’ve called the “smart” method):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'All that’s left is converting Polar coordinates to Cartesian coordinates for
    plotting (func_convertion):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Radial-Treemap Algorithm**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the established functions, here’s the general algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin with a set of mutually exclusive groups, with 1 to many dimensions, and
    their associated counts or values that will govern the polygon areas, for example:
    ({a1,b1,c1}, 12.3), ({a1,b2,c1}, 4.5), ({a2,b1,c2}, 32.3), ({a1,b2,c2}, 2.1),
    ({a2,b1,c1}, 5.9), ({a3,b1,c1}, 3.5], ({a4,b2,c1}, 3.1)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set up configuration inputs: (positional: {starting angle, ending angle, inner
    radius, outer radius, rotation}), (sorting: {descending, ascending, manual}),
    (container orientation method: {alternating, outward, around, smart, legend}),
    (grouping: {on, off})'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate the outer container’s area (func_area)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Recursively calculate child container positions, leveraging their relative area
    percentage to the outer container’s area as an input into the container function
    (func_container), paired with the selected container orientation method
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Infill the polygon boundaries in the arc sections with points (more points for
    higher curve resolution) and convert the Polar coordinates into Cartesian coordinates
    for plotting
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Container Orientation Methods**'
  prefs: []
  type: TYPE_NORMAL
- en: The original construction method I developed happened to alternate between radii
    partitions and concentric circle partitions (as seen above in my “ Takeoff” info-graphic),
    similar to the early Treemaps which were drawn with the “slice and dice” algorithm
    that alternated between horizontal and vertical partitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the container orientation methods I’ve created to date for my Radial
    Treemap:'
  prefs: []
  type: TYPE_NORMAL
- en: Alternate - the original! (alternates like the slice and dice approach)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outward - all partitions are drawn as radii
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Around - all partitions are drawn as concentric circles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart - the arc and radius lengths are calculated for each option and the smallest
    is chosen as a mechanism to prevent skinny polygons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Legend - the first level of the hierarchy is always drawn as radii to align
    with a corresponding legend donut
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A choice can also be made whether or not group the items in the first place.
    Flattening the data (removing the hierarchical grouping) to sort by the natural
    order of the lowest level of elements can be toggled for another layer of insight
    (especially useful for legends).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/826d95e40d1046173b7798dda9e4b00b.png)'
  prefs: []
  type: TYPE_IMG
- en: Radial-Treemap configurations using the example data above
  prefs: []
  type: TYPE_NORMAL
- en: '**Layouts**'
  prefs: []
  type: TYPE_NORMAL
- en: With the flexibility to include central and wedge void spaces, stack, and rotate
    Radial-Treemaps, the layout options are endless!
  prefs: []
  type: TYPE_NORMAL
- en: 'Outer perimeter layout parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: Total Area (as a relative measure between 2 or more Radial Treemaps)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layout Constraints (donut slice determined by two angles and two radii)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotation (rotation around the center)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relative positioning with other Radial Treemaps (stacking, etc.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/e8dd5dd19d325ee068559bfed498993c.png)'
  prefs: []
  type: TYPE_IMG
- en: Radial Treemap perimeter examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Legends:'
  prefs: []
  type: TYPE_NORMAL
- en: Complimentary Radial Treemap(s) around the inside, outside, or both sides (helpful
    for illustrating a different sorting of elements by level)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/7ee747077dd5fcae787794d543689c0c.png)'
  prefs: []
  type: TYPE_IMG
- en: Radial Treemap Legends
  prefs: []
  type: TYPE_NORMAL
- en: 'Visualization Extensions (inner / outer / linear connections):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ebcfabd4feb53feb1e0f877927c09c8b.png)'
  prefs: []
  type: TYPE_IMG
- en: Examples of applicable visualization extensions (Sankey, Chord)
  prefs: []
  type: TYPE_NORMAL
- en: '**3D Radial Treemap**'
  prefs: []
  type: TYPE_NORMAL
- en: The Radial Treemap construct can easily be extended to 3D mathematically, and
    it comes with an extra plane for slicing and dicing!
  prefs: []
  type: TYPE_NORMAL
- en: 'The available geometry for containerization is evident from the spherical coordinate
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: 'radial distance: r ≥ 0,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'polar angle: 0° ≤ θ ≤ 180° (0 rad ≤ θ ≤ π rad)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'azimuth : 0° ≤ φ < 360° (0 rad ≤ φ < 2π rad)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In terms of 3D Radial Treemap inputs, here’s a projection of each surface’s
    useable space:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8756bad982f74f55842a1f46b6848ee4.png)'
  prefs: []
  type: TYPE_IMG
- en: 3D Radial Treemap Container Boundaries
  prefs: []
  type: TYPE_NORMAL
- en: 'Conveniently, the general algorithm for 3D is the same as 2D, adjusting for
    the effect of area transition to volume and solving for the 3 possible orientations
    in terms of radius, polar angle, and azimuth. Here’s a simple 3D Radial Treemap:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ef480f9e787970fb125f27aa93c25d6b.png)'
  prefs: []
  type: TYPE_IMG
- en: 3D Treemap by Nick Gerend, rendered with Autodesk Fusion 360
  prefs: []
  type: TYPE_NORMAL
- en: Next I’ll show a python implementation for generating 2D Radial Treemap visualizations.
    A 3D version is on the roadmap!
  prefs: []
  type: TYPE_NORMAL
- en: Python Implementation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I’ve made an initial implementation of my Radial Treemap algorithm available
    in python via my [vizmath](https://pypi.org/project/vizmath/) package on PyPI.
    Here’s an example of usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fa0d604e0ee02d68e30021568bda5a28.png)'
  prefs: []
  type: TYPE_IMG
- en: Radial Treemap using group values as areas via vizmath, rendered with Matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at the output from the Radial Treemap algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: 'level - the level in the hierarchy: from 1 to N levels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'group - represents each node on the tree: for example, the group {a1,b1,c1}
    falls under the group {a1,b1}, which falls under {a1}'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'count - the group’s count: below you can see below that at level 1, the highest
    level, group {a2} contains 2 items'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'value - the group’s value (if specified): instead of using a count of items
    in a group, a supplied number can be used to represent the magnitude'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'level rank - the item’s rank within its group, in terms of its value (or count
    if value is not available) from highest to lowest: 1 to N'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'overall rank - the item’s overall rank among all groups in terms of its value
    (or count if value is not available) from highest to lowest: 1 to N'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: x, y - Cartesian 2D coordinates for a point in the layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'path - an ordered set of integers that describe the path which encloses a polygon,
    in conjunction with each (x, y) point in the Radial Treemap, for each group: 1
    to N (specified by the ‘points’ parameter)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/dc68232480ec0c5195115ffa7de8db9d.png)'
  prefs: []
  type: TYPE_IMG
- en: Radial Treemap DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: Finally, let’s see what a count based version looks like that ignores the group
    values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/820948895c92dda17bec3fc16f4dc318.png)'
  prefs: []
  type: TYPE_IMG
- en: Radial Treemap using group counts as areas via vizmath, rendered with Matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: Tableau Public Implementation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, I’ll present a tutorial for implementing my Radial Treemap
    visualization in Tableau Public (v 2023.3.0) along with some fun interaction capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, let’s add a couple more groups and values to our prior example
    with python and output the data to a csv file to use with Tableau Public. First,
    create a DataFrame with 3 categorical columns and one numerical column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we’ll use vizmath to create a Radial Treemap chart and legend, combine
    both into one file, and output the drawing information to a csv:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the file into Tableau using the ***Text file*** option, navigate to
    ***Sheet 1***, and create these parameters and calculated columns that we’ll use
    to draw the chart and legend:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create parameters (select “Create Parameter…” from the hamburger dropdown menu
    under the Data tab on the left):'
  prefs: []
  type: TYPE_NORMAL
- en: '***[Chart Level]***: {Integer, Range, Minimum: 1, Maximum: 3, Step size: 3}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[Legend Level]***: {Integer, Range, Minimum: 1, Maximum: 3, Step size: 3}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Create calculated columns (from the same menu under “Create Calculated Field…”):'
  prefs: []
  type: TYPE_NORMAL
- en: '***[rad_treemap]***: if [type] = ‘chart’ and [Level] = [Chart Level] then MAKEPOINT([Y],[X])
    else null end'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[rad_treemap_legend]***: if ([type] = ‘legend’ and [Level] = [Legend Level])
    then MAKEPOINT([Y],[X]) else null end'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[rad_treemap_lines]***: if [type] = ‘chart’ and [Level] <= [Chart Level]
    then MAKEPOINT([Y],[X]) else null end'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Start by dragging ***[radial_treemap]*** to ***Detail*** under ***Marks***
    to generate the first map layer and adjust these options by right clicking in
    the map area and selecting ***Background Layer***s:'
  prefs: []
  type: TYPE_NORMAL
- en: Unselect all ***Background Map Layers*** (Base, Land Cover, etc.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now right click in the map area and select ***Map Options*** and unselect all
    of the options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Close out of ***Background Layers*** and continue with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag ***[Group]*** to ***Detail*** under ***Marks***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Under the ***Marks*** dropdown menu select ***Polygon*** (don’t worry if it
    looks strange at this point)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag ***[Path]*** to ***Path*** under ***Marks*** and right click on what’s
    now ***SUM(Path)*** and select ***Dimension***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag ***[Value]*** to ***Color*** and repeat the process for converting it to
    ***Dimension***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Under ***Color*** select “Edit Colors…” and configure with the following options:
    {Reversed, Advanced: (Start: 0, End: 10)}'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hit OK and adjust the opacity to 50% under ***Color***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now the structure of the Radial Treemap chart section should be in view. Let’s
    add another layer to enhance the color using items from the first level of the
    hierarchy. Start by adding some new calculated columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '***[Label]***: replace(replace(replace([Group],”’”,’’),’(‘,’’),’)’,’’)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[Level 1]***: split([Label],’,’,1)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[Level 2]***: split([Label],’,’,2)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[Level 3]***: split([Label],’,’,3)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now let’s use ***[Level 1]*** for coloring:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag ***[radial_treemap]*** into the map area and a pop-up will appear: ***Add
    a Marks Layer*** - drop the pill into this to create a new map layer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeat the steps from above except now use ***[Level 1]*** for the ***Color***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Under ***Color***, select a black border and set the opacity to 50%
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s wrap up the chart section by adding some lines with different thicknesses
    to indicate where the hierarchical boundaries are:'
  prefs: []
  type: TYPE_NORMAL
- en: Repeat the prior steps with ***[rad_treemap_lines]*** as the map layer, ***Line***
    as the chart type under the ***Marks*** dropdown menu, and ***Color*** set to
    medium black
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag ***[Level]*** to ***Size***under ***Marks*** and convert to ***Dimension***
    and ***Discrete***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the right-hand side of the chart under the size section labeled ***Level***,
    select the dropdown from the upper right corner which shows up upon hovering over
    the container and select “***Edit Sizes…***”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the ***Reversed*** option, hit OK, and right-click on the nulls pill
    at the bottom right of the chart and select ***Hide Indicator*** to hide the nulls
    label
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now the chart section is in place and should look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4657675f701ddc381b8c5041ba8b8775.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s add a legend next to compliment the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: Repeat all of the same steps as before to add two chart layers using ***[rad_treemap_legend]***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To finalize the visualization, let’s add some label layers. Start by adding
    these parameters and calculated columns to position the labels:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***[Show Labels Chart]***: {Boolean, Aliases: (True: Yes, False: No)}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[Show Labels Legend]***: {Boolean, Aliases: (True: Yes, False: No)}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Create calculated columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '***[point_angle]***: atan2([X], [Y])*180/pi() — 90'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[group_angle]***: {fixed [Type], [Group]: avg([point_angle])}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[point_radius]***: [X]/cos([point_angle]*pi()/180)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[group_radius_min]***: {fixed [Type], [Group]: min([point_radius])}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[group_radius_max]***: {fixed [Type], [Group]: max([point_radius])}'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[group_radius]***: ([group_radius_max]-[group_radius_min])/2+[group_radius_min]'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[chart_group_legend]***: if [Type] = ‘chart’ and [Level] = [Chart Level]
    and [Show Labels Chart] then'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: MAKEPOINT(
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: -[group_radius]*sin(([group_angle])*pi()/180),
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[group_radius]*cos(([group_angle])*pi()/180)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ) else null end
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[legend_group_legend]***: if [Type] = ‘legend’ and [Level] = [Legend Level]
    and [Show Labels Legend] then'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: MAKEPOINT(
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: -[group_radius]*sin(([group_angle])*pi()/180),
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[group_radius]*cos(([group_angle])*pi()/180)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ) else null end
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now we’ll add a final two layers to complete the Radial Treemap:'
  prefs: []
  type: TYPE_NORMAL
- en: Add ***[chart_group_legend]*** as a map layer and add ***[Group]*** to ***Detail***
    under ***Marks***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the chart type to ***Circle*** and drag ***[Label]*** to ***Label***
    under ***Marks***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjust the ***Color*** to white with a opacity of 50% and no border or halo,
    and drag slider under ***Size*** to right of center
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Under ***Label***, click on the ***[…]*** menu next to ***Text***, and in the
    dialog box select the text and change the size to {8 with a Bold font} and hit
    OK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Back on the main ***Label*** menu, select ***Allow labels to overlap other marks***
    and adjust the ***Alignment*** to {center, center}
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toggle the parameter ***[Show Labels Chart]*** to False for now and repeat the
    above steps to add a label to the legend using ***[legend_group_legend]***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To complete ***Sheet 1***, add ***[ATTR(Label)]*** to the Tooltips by dragging
    ***[Label]*** to the ***Tooltip*** under ***Marks*** for the applicable layers
    and selecting ***Attribute*** by right-clicking on the pill. Add ***[ATTR(Items)]***
    and ***[ATTR(Value)]*** as well, in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: 'To assist with interactively exploring the data in the Radial Treemap, let’s
    create a simple table bar graph:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new worksheet using the first plus sign on the bottom panel to create
    ***Sheet 2***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the new sheet, drag ***[Level 1]***, ***[Level 2]***, ***[Level 3]***, and
    ***[Label]*** to ***Rows***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now drag ***[Count]*** to Rows and change to ***Dimension*** and ***Discrete***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do the same with ***[Value]***, change the chart type to ***Bar***, and also
    drag ***[Value]*** to ***Color*** and ***Size*** under ***Marks***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the same color scheme for ***[Value]*** as we did with the prior Sheet and
    add a black border with 80% opacity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rename ***[Count]*** to ***[Items]*** by right-clicking on the column and selecting
    ***Rename***
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, let’s pull the two Sheets together in a dashboard. After creating the
    dashboard and adding the sheets, setup an action under ***Actions*** in the ***Dashboard***
    top-menu. Click the ***Add Action*** dropdown and select ***Highlight***. Under
    ***Targeted Highlighting*** select ***Selected Fields*** and select the ***[Label]***
    and ***[ATTR(Label)]*** fields. Finally select the ***Hover*** option under the
    ***Run action on*** menu on the right and now the entire dashboard will highlight
    off of hovering over each level of the hierarchy in the table or chart!
  prefs: []
  type: TYPE_NORMAL
- en: 'After adding the parameters to the dashboard and orienting everything in an
    organized way, here’s our new dashboard in Tableau Public:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/431f3349c24781572635094ea7f9af58.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this article, I’ve covered a brief history of the Treemap and what I call
    the “Radial Treemap”, a visual tool I developed for examining hierarchical relationships
    in a circular layout that offers flexibility in terms of donut slicing, stacking,
    legends, and synergy with other radial chart types. It can be used in a variety
    of ways to derive new insights from your data, and I hope you’ve found this visualization
    technique inspiring and full of potential!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re looking for inspiration with other radial chart types, check out
    my Multi-Chord Diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/introducing-the-multi-chord-diagram-visualizing-complex-set-relationships-c6fe6cc1cb8b?source=post_page-----7b47785191da--------------------------------)
    [## Introducing the Multi-Chord Diagram: Visualizing Complex Set Relationships'
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/introducing-the-multi-chord-diagram-visualizing-complex-set-relationships-c6fe6cc1cb8b?source=post_page-----7b47785191da--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Let me know if you come across any fun or professional use cases, and thanks
    for reading!
  prefs: []
  type: TYPE_NORMAL
- en: '**References**'
  prefs: []
  type: TYPE_NORMAL
- en: All images in this article were created by the author unless otherwise stated.
  prefs: []
  type: TYPE_NORMAL
- en: '[1] Ben Shneiderman, “[Tree visualization with tree-maps: 2-d space-filling
    approach](https://dl.acm.org/doi/10.1145/102377.115768)” (1992), ACM Transactions
    on Graphics'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] Mark Bruls, Kees Huizing, Jarke J. van Wijk, “[Squarified Treemaps](http://www.win.tue.nl/~vanwijk/stm.pdf)”
    (2000), Data Visualization 2000: Proceedings of the Joint EUROGRAPHICS and IEEE
    TCVG Symposium on Visualization in Amsterdam, The Netherlands, May 29–30, 2000'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] Benjamin Bederson, Ben Shneiderman, Martin Wattenberg, “[Ordered and Quantum
    Treemaps: Making Effective Use of 2D Space to Display Hierarchies](http://www.cs.umd.edu/hcil/trs/2001-18/2001-18.pdf)”
    (2002), ACM Transactions on Graphics'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] Ben Shneiderman, Martin Wattenberg, “[Ordered Treemap Layouts](http://cvs.cs.umd.edu/~ben/papers/Shneiderman2001Ordered.pdf)”
    (2001), INFOVIS pages 73–78'
  prefs: []
  type: TYPE_NORMAL
- en: '[5] Michael Balzer, Oliver Deussen, “[Voronoi Treemaps](https://graphics.uni-konstanz.de/publikationen/Balzer2005VoronoiTreemaps/Balzer2005VoronoiTreemaps.pdf)”
    (2005), IEEE Symposium on Information Visualization'
  prefs: []
  type: TYPE_NORMAL
- en: '[6] Brian Ondov, Nicholas Bergman, Adam Phillippy, “[Interactive metagenomic
    visualization in a Web browser](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3190407/)”
    (2011), BMC Bioinformatics'
  prefs: []
  type: TYPE_NORMAL
- en: '[7] Federal Aviation Administration, “[Aircraft Registration Database](https://www.faa.gov/licenses_certificates/aircraft_certification/aircraft_registry/releasable_aircraft_download)”
    (2020), United States Department of Transportation'
  prefs: []
  type: TYPE_NORMAL
