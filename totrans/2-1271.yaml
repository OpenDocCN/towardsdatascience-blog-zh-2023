- en: How To Use the loc Pandas Method to Efficiently To Work With Your DataFrame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-use-the-loc-pandas-method-to-efficiently-to-work-with-your-dataframe-880a068869df](https://towardsdatascience.com/how-to-use-the-loc-pandas-method-to-efficiently-to-work-with-your-dataframe-880a068869df)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PYTHON
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tips to explore and clean a new data set using Pandas with code examples and
    explanations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://byrondolon.medium.com/?source=post_page-----880a068869df--------------------------------)[![Byron
    Dolon](../Images/9ff32138c7b1913be24cc7ab971752b0.png)](https://byrondolon.medium.com/?source=post_page-----880a068869df--------------------------------)[](https://towardsdatascience.com/?source=post_page-----880a068869df--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----880a068869df--------------------------------)
    [Byron Dolon](https://byrondolon.medium.com/?source=post_page-----880a068869df--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----880a068869df--------------------------------)
    ·9 min read·Jun 27, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/169efc98bb27204c164a53266439f37e.png)'
  prefs: []
  type: TYPE_IMG
- en: A look at Pandas exploring data but it’s outdoors — Photo by [Jim Bread](https://unsplash.com/@jim_bread?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: A key part of working with a new data set is understanding it.
  prefs: []
  type: TYPE_NORMAL
- en: Figuring out basic things like what columns are in the data, what the raw data
    types are, and descriptive statistics for the data are all important for properly
    working with the data going forward.
  prefs: []
  type: TYPE_NORMAL
- en: Pandas has quite a few built-in methods you can use to explore your data in
    a notebook right away. As you go through the initial steps of data exploration,
    you can simultaneously start to make your data usable for further analysis or
    to get it ready for training a machine learning model.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this piece, let’s work with a data set of university data to answer the
    following questions to show what it looks like when you explore and clean data
    at the same time:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Which universities only offer in-person attendance?**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What is the year range between the oldest and newest founded universities?**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’re primarily going to be using the `loc` method in combination with a few
    other built-in Pandas methods to answer these questions. First, we’ll take a quick
    look at what the `loc` method does, then go through each of these examples step-by-step.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to follow along in a notebook! You can download the [dataset](https://www.kaggle.com/datasets/drahulsingh/top-largest-universities/versions/1?resource=download)
    from Kaggle available free for use under the Open Data Commons Public Domain Dedication
    and License (PDDL) v1.0\. Then import and run the following and we can get started!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A quick introduction to the loc method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Basically, the `loc` method in Pandas allows you to select a subset of rows
    or columns of the target DataFrame based on a given condition.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few different inputs you can pass to `loc`. For example, when you
    want to select a slice of the DataFrame based on its index you can use the same
    syntax in Python when you’re working with a list like: `[start:stop]`. However,
    in this piece, we’ll primarily focus on using `loc` with a conditional statement.
    If you’ve used SQL before, this is similar to writing the `WHERE` part of a query
    to filter your data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, using `loc` in this fashion will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will return a subset of your data in which the column is equal to the condition.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s move on to some practical examples of using the `loc` method during
    exploratory data analysis to see what else you can do with it.
  prefs: []
  type: TYPE_NORMAL
- en: Answering questions for university attendance using the Pandas loc method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Which universities only offer in-person attendance?**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let’s see how we can use `loc` to select part of your data to use in
    further analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the data was already clean, you would think that to answer the question,
    you can just use a groupby on the column to count the number of institutions that
    offer in-person attendance. Doing this in Pandas would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9123c76b3316afac2ffaa32e46d6b9d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Unfortunately, the values for the “Distance / In-Person” column aren’t very
    clean. There are some issues with the whitespace and some institutions offer both
    distance and in-person attendance, although the way that’s recorded isn’t standardized.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we can do to clean this up also is to rename the column so it
    doesn’t have any spaces or special characters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Next, we can verify that the change took place by selecting all the columns
    in the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/31a16edaa94913fe54573450051a92ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, all columns at least don’t have any spaces or special characters. You could
    further standardize this if you wanted to by changing all the other columns to
    lowercase, but we’ll skip that for now.
  prefs: []
  type: TYPE_NORMAL
- en: Earlier, we did a group by operation on the target column and counted the values
    for each institution. Another way to arrive at the same result is to use the `value_counts`
    method in Pandas. This returns a Series with the count of unique values of the
    target column you call it on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/13e50c23fd1607977b19c3bb44cac3ba.png)'
  prefs: []
  type: TYPE_IMG
- en: You’ll notice in this case we didn’t have to call the “Institutions” column
    this time, but that’s because, in our original DataFrame, each row represents
    one institution.
  prefs: []
  type: TYPE_NORMAL
- en: Now, to clean up this column so that the values for institutions that offer
    both in-person and distance attendance are grouped into one value, we can make
    use of the `loc` column to filter the DataFrame on those values and assign the
    value of the `distance_or_in_person` column to a new value “Both”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we filter the current `distance_or_in_person` column that is not equal
    to “In-Person” or “Distance” using the `~` operator and then select the `distance_or_in_person`
    column. We then set it equal to “Both”, which updates the original DataFrame.
    We can verify the changes by checking the DataFrame again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/98cade577bf7b19004961c3859826436.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you’ll see the updated column will only contain three possible values,
    and we can again call `value_counts` to get the answer to our original question:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/079975ae69a6f47ecce99590eaa75084.png)'
  prefs: []
  type: TYPE_IMG
- en: We now know that based on the cleaned data, 59 universities offer only in-person
    attendance.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this new condition, if you wanted to know which specific institutions
    offered in-person attendance, we can again filter the DataFrame using the `loc`
    method and then use the `tolist` method to get all the values to a Python list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/baf9be2c5adba7dbfad35db37dce4a58.png)'
  prefs: []
  type: TYPE_IMG
- en: We have a list of institutions now, but there are some special characters that
    we can remove. The “\xa0” in Python represents a non-breaking space, which means
    we can get rid of it using the `strip` method in Pandas which gets rid of whitespace
    on either end of the string value.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can edit our initial `tolist` code to clean up the final output like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/73e3713a37a163a6088d1d7f43a0d868.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we have a final list of universities that only offer in-person attendance!
  prefs: []
  type: TYPE_NORMAL
- en: '**What is the year range between the oldest and newest founded universities?**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, let’s use the `loc` and a few other native Pandas methods to filter our
    DataFrame to answer a specific data analysis question.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can first just take a look at that Founded column to see what we’re working
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5da16d05b2e208dd3f50b28608d9023a.png)'
  prefs: []
  type: TYPE_IMG
- en: It looks like we have a column that’s just full of year values. Since we want
    to compare dates to each other, we could turn the column into a `datetime` type
    to make the analysis easier.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b0c4d2a725148b89da5a992b5967d789.png)'
  prefs: []
  type: TYPE_IMG
- en: However, using the `to_datetime` method on the column gives us a `ParserError`.
  prefs: []
  type: TYPE_NORMAL
- en: 'It looks like there’s a string that doesn’t match what we initially saw from
    the Founded column. We can check the row by using the `loc` method to filter the
    DataFrame on the value for founded that specifically equals to what we saw in
    the `ParserError`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1c9f46e51f2e38952f043690cd12188c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There’s one university apparently that has two different founded years. Also,
    now that we know the index of row (9), there''s also an example of using the `loc`
    method to filter the DataFrame on the index value specifically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3126e2da18047168189e6afc9e390d9e.png)'
  prefs: []
  type: TYPE_IMG
- en: It looks like this is the only row in the DataFrame where the value for the
    “Founded” column has more than one year.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on what you want to do with the data, you could try to clean the data
    by maybe picking one year (the first founded date) or maybe by creating two rows
    for this one institution so both founded dates or on separate rows.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, since we only are working with this data to answer a simple question
    (what’s the range of the Founded date for the institutions in this data set),
    we can just remove this one row like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5768d3904078965558026ef79502335e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Checking the resulting DataFrame you can see the row with the index “9” that
    had multiple values for the Founded column is no longer in the table. You can
    get the drop to stick by reassigning the DataFrame after dropping the row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Next, we can do the `to_datetime` method again on the Founded column and see
    what happens.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f819b77a55ee9cd5a655cc0b3d50f72a.png)'
  prefs: []
  type: TYPE_IMG
- en: There’s actually another error that pops up here which is why I included `errors="coerce"`
    to ensure that if there were any other issues converting the string to a datetime
    type the value would just become null.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we can assign the datetime type version of the Founded column to a
    new column. Then, to check the earliest founded date of an institution, we can
    use the `min` method in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/aa596e911d6870e72a422545ea9fcd58.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see the earliest and latest timestamps of the `founded_date` column
    by using the min and max methods to get the year range between the oldest and
    newest universities.
  prefs: []
  type: TYPE_NORMAL
- en: It was here that I realized we can do this all much quicker if all we need to
    do is answer that one quick question. Instead of converting to a datetime type,
    we could just turn the column into an integer type and then subtract the max and
    min values from each other to get the range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This outputs 719.
  prefs: []
  type: TYPE_NORMAL
- en: You shouldn’t always take the easy way and just convert the year column to an
    integer. In the case when you want to do some more complicated analysis or when
    you’re specifically working with time series date, there’s a lot of value-added
    if you clean your data properly and get the date column to a datetime type. However,
    if you do just need to do analysis quickly, it can save you the time and headache
    of looking up errors to simply find the quickest way of solving a problem instead
    of the “best” way to solve it.
  prefs: []
  type: TYPE_NORMAL
- en: There are many different ways you can combine Pandas methods to clean and analyze
    your date. The `loc` method is versatile and allows you to use different methods
    together to filter, slice, and update your DataFrame so it works for the specific
    questions and problems you want to solve.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning data is an iterative process that goes hand in hand with exploring
    data. I hope you found these examples with `loc` helpful for your own analysis
    going forward.
  prefs: []
  type: TYPE_NORMAL
- en: If you enjoy my content consider following me and **signing up to be a Medium
    member** using my referral link below. It costs only $5 a month and you’ll get
    unlimited access to everything on Medium. Signing up using my link lets me earn
    a small commission. And if you’re already signed up to follow me, thanks a bunch
    for your support!
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://byrondolon.medium.com/membership?source=post_page-----880a068869df--------------------------------)
    [## Join Medium with my referral link — Byron Dolon'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: byrondolon.medium.com](https://byrondolon.medium.com/membership?source=post_page-----880a068869df--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: M**ore by me:** *-* [*3 Efficient Ways to Filter a Pandas DataFrame Column by
    Substring*](https://medium.com/towards-artificial-intelligence/3-efficient-ways-to-filter-a-pandas-dataframe-column-by-substring-fc2993692141)
    *-* [*5 Practical Tips for Aspiring Data Analysts*](https://byrondolon.medium.com/5-practical-tips-for-aspiring-data-analysts-9917006d4dae?sk=019edbddaca4d313665caafe4b747d26)
    *-* [*Improving Your Data Visualizations with Stacked Bar Charts in Python*](/improving-your-data-visualizations-with-stacked-bar-charts-in-python-f18e2b2b9b70)
    *- C*[*onditional Selection and Assignment With .loc in Pandas*](/conditional-selection-and-assignment-with-loc-in-pandas-2a5d17c7765b?sk=e5672d859a3964c1453a1c09edca22cf)
    *-* [*5 (and a half) Lines of Code for Understanding Your Data with Pandas*](/5-and-a-half-lines-of-code-for-understanding-your-data-with-pandas-aedd3bec4c89?sk=7007a1ae248cf7ea4ef5fcd4af7ae72b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
