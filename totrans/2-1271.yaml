- en: How To Use the loc Pandas Method to Efficiently To Work With Your DataFrame
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 loc Pandas 方法高效地处理您的 DataFrame
- en: 原文：[https://towardsdatascience.com/how-to-use-the-loc-pandas-method-to-efficiently-to-work-with-your-dataframe-880a068869df](https://towardsdatascience.com/how-to-use-the-loc-pandas-method-to-efficiently-to-work-with-your-dataframe-880a068869df)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-use-the-loc-pandas-method-to-efficiently-to-work-with-your-dataframe-880a068869df](https://towardsdatascience.com/how-to-use-the-loc-pandas-method-to-efficiently-to-work-with-your-dataframe-880a068869df)
- en: PYTHON
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON
- en: Tips to explore and clean a new data set using Pandas with code examples and
    explanations
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提示如何使用 Pandas 探索和清理新数据集，附有代码示例和解释
- en: '[](https://byrondolon.medium.com/?source=post_page-----880a068869df--------------------------------)[![Byron
    Dolon](../Images/9ff32138c7b1913be24cc7ab971752b0.png)](https://byrondolon.medium.com/?source=post_page-----880a068869df--------------------------------)[](https://towardsdatascience.com/?source=post_page-----880a068869df--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----880a068869df--------------------------------)
    [Byron Dolon](https://byrondolon.medium.com/?source=post_page-----880a068869df--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://byrondolon.medium.com/?source=post_page-----880a068869df--------------------------------)[![Byron
    Dolon](../Images/9ff32138c7b1913be24cc7ab971752b0.png)](https://byrondolon.medium.com/?source=post_page-----880a068869df--------------------------------)[](https://towardsdatascience.com/?source=post_page-----880a068869df--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----880a068869df--------------------------------)
    [Byron Dolon](https://byrondolon.medium.com/?source=post_page-----880a068869df--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----880a068869df--------------------------------)
    ·9 min read·Jun 27, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----880a068869df--------------------------------)
    ·9 分钟阅读·2023 年 6 月 27 日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/169efc98bb27204c164a53266439f37e.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/169efc98bb27204c164a53266439f37e.png)'
- en: A look at Pandas exploring data but it’s outdoors — Photo by [Jim Bread](https://unsplash.com/@jim_bread?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 探索数据的一瞥，但是在户外 —— [Jim Bread](https://unsplash.com/@jim_bread?utm_source=medium&utm_medium=referral)
    拍摄的照片，来自 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: A key part of working with a new data set is understanding it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 处理新数据集的关键部分是了解它。
- en: Figuring out basic things like what columns are in the data, what the raw data
    types are, and descriptive statistics for the data are all important for properly
    working with the data going forward.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 弄清楚基本事项，比如数据中有哪些列，原始数据类型是什么，以及数据的描述统计，这些都对正确处理数据至关重要。
- en: Pandas has quite a few built-in methods you can use to explore your data in
    a notebook right away. As you go through the initial steps of data exploration,
    you can simultaneously start to make your data usable for further analysis or
    to get it ready for training a machine learning model.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 中有许多内置方法，可以立即在笔记本中使用来探索数据。在进行数据探索的初始步骤时，您可以同时开始使数据可用于进一步分析，或者准备好用于训练机器学习模型。
- en: 'In this piece, let’s work with a data set of university data to answer the
    following questions to show what it looks like when you explore and clean data
    at the same time:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，让我们使用一组大学数据来回答以下问题，以展示在同时探索和清理数据时的情况：
- en: '**Which universities only offer in-person attendance?**'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**哪些大学只提供面对面上课？**'
- en: '**What is the year range between the oldest and newest founded universities?**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最古老和最新成立的大学之间的年份范围是多少？**'
- en: We’re primarily going to be using the `loc` method in combination with a few
    other built-in Pandas methods to answer these questions. First, we’ll take a quick
    look at what the `loc` method does, then go through each of these examples step-by-step.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们主要将使用 `loc` 方法与其他几种内置的 Pandas 方法来回答这些问题。首先，我们将快速了解 `loc` 方法的作用，然后逐步进行每个示例。
- en: Feel free to follow along in a notebook! You can download the [dataset](https://www.kaggle.com/datasets/drahulsingh/top-largest-universities/versions/1?resource=download)
    from Kaggle available free for use under the Open Data Commons Public Domain Dedication
    and License (PDDL) v1.0\. Then import and run the following and we can get started!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎在笔记本中跟随！你可以从 Kaggle 免费下载[数据集](https://www.kaggle.com/datasets/drahulsingh/top-largest-universities/versions/1?resource=download)，该数据集可在开放数据共享公共领域奉献和许可（PDDL）v1.0
    下免费使用。然后导入并运行以下内容，我们就可以开始了！
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A quick introduction to the loc method
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个快速介绍 loc 方法
- en: Basically, the `loc` method in Pandas allows you to select a subset of rows
    or columns of the target DataFrame based on a given condition.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，Pandas中的`loc`方法允许您根据给定条件选择目标DataFrame的一部分行或列。
- en: 'There are a few different inputs you can pass to `loc`. For example, when you
    want to select a slice of the DataFrame based on its index you can use the same
    syntax in Python when you’re working with a list like: `[start:stop]`. However,
    in this piece, we’ll primarily focus on using `loc` with a conditional statement.
    If you’ve used SQL before, this is similar to writing the `WHERE` part of a query
    to filter your data.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以向`loc`传递几种不同的输入。例如，当您想基于其索引选择DataFrame的一个切片时，您可以使用与在Python中使用列表时相同的语法：`[start:stop]`。但是，在这篇文章中，我们将主要关注使用带有条件语句的`loc`。如果您以前使用过SQL，这类似于编写查询的`WHERE`部分以过滤数据。
- en: 'In general, using `loc` in this fashion will look like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，以这种方式在`loc`中使用将如下所示：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will return a subset of your data in which the column is equal to the condition.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回数据的一个子集，其中列等于条件。
- en: Next, let’s move on to some practical examples of using the `loc` method during
    exploratory data analysis to see what else you can do with it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们继续看一些在探索性数据分析中使用`loc`方法的实际示例，看看您还可以做些什么。
- en: Answering questions for university attendance using the Pandas loc method
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Pandas的`loc`方法回答大学入学问题
- en: '**Which universities only offer in-person attendance?**'
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**哪些大学只提供面对面上课？**'
- en: First, let’s see how we can use `loc` to select part of your data to use in
    further analysis.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看如何使用`loc`选择数据的一部分以供进一步分析。
- en: 'If the data was already clean, you would think that to answer the question,
    you can just use a groupby on the column to count the number of institutions that
    offer in-person attendance. Doing this in Pandas would look like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据已经干净，您可能会认为要回答这个问题，您只需在该列上进行分组，计算提供面对面上课的机构数量。在Pandas中，这样做将如下所示：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/9123c76b3316afac2ffaa32e46d6b9d1.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9123c76b3316afac2ffaa32e46d6b9d1.png)'
- en: Unfortunately, the values for the “Distance / In-Person” column aren’t very
    clean. There are some issues with the whitespace and some institutions offer both
    distance and in-person attendance, although the way that’s recorded isn’t standardized.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，“远程/面对面”列的值并不是很干净。空格和一些机构提供远程和面对面上课，尽管记录的方式并不是标准化的。
- en: The first thing we can do to clean this up also is to rename the column so it
    doesn’t have any spaces or special characters.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以做的第一件事也是清理这个的是将列重命名，这样它就不会有任何空格或特殊字符。
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, we can verify that the change took place by selecting all the columns
    in the DataFrame.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以通过选择DataFrame中的所有列来验证更改是否发生。
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/31a16edaa94913fe54573450051a92ff.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/31a16edaa94913fe54573450051a92ff.png)'
- en: Now, all columns at least don’t have any spaces or special characters. You could
    further standardize this if you wanted to by changing all the other columns to
    lowercase, but we’ll skip that for now.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，至少所有列都没有空格或特殊字符。如果您愿意，您还可以进一步标准化这一点，将所有其他列更改为小写，但我们现在将跳过这一点。
- en: Earlier, we did a group by operation on the target column and counted the values
    for each institution. Another way to arrive at the same result is to use the `value_counts`
    method in Pandas. This returns a Series with the count of unique values of the
    target column you call it on.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候，我们对目标列进行了分组操作，并计算了每个机构的值。到达相同结果的另一种方法是使用Pandas中的`value_counts`方法。这将返回一个Series，其中包含您调用它的目标列的唯一值的计数。
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/13e50c23fd1607977b19c3bb44cac3ba.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/13e50c23fd1607977b19c3bb44cac3ba.png)'
- en: You’ll notice in this case we didn’t have to call the “Institutions” column
    this time, but that’s because, in our original DataFrame, each row represents
    one institution.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，您会注意到这次我们这次没有调用“机构”列，但这是因为在我们的原始DataFrame中，每一行代表一个机构。
- en: Now, to clean up this column so that the values for institutions that offer
    both in-person and distance attendance are grouped into one value, we can make
    use of the `loc` column to filter the DataFrame on those values and assign the
    value of the `distance_or_in_person` column to a new value “Both”.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了清理这一列，使得既提供面对面又提供远程上课的机构的值被分组为一个值，我们可以利用`loc`列在DataFrame上过滤这些值，并将`distance_or_in_person`列的值分配给一个新值“Both”。
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, we filter the current `distance_or_in_person` column that is not equal
    to “In-Person” or “Distance” using the `~` operator and then select the `distance_or_in_person`
    column. We then set it equal to “Both”, which updates the original DataFrame.
    We can verify the changes by checking the DataFrame again:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`~`运算符过滤当前的`distance_or_in_person`列，该列不等于“In-Person”或“Distance”，然后选择`distance_or_in_person`列。然后将其设置为“Both”，这将更新原始DataFrame。我们可以通过再次检查DataFrame来验证更改：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/98cade577bf7b19004961c3859826436.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/98cade577bf7b19004961c3859826436.png)'
- en: 'Now, you’ll see the updated column will only contain three possible values,
    and we can again call `value_counts` to get the answer to our original question:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你会看到更新后的列只包含三个可能的值，我们可以再次调用`value_counts`来得到我们最初问题的答案：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/079975ae69a6f47ecce99590eaa75084.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/079975ae69a6f47ecce99590eaa75084.png)'
- en: We now know that based on the cleaned data, 59 universities offer only in-person
    attendance.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道，根据清理后的数据，有59所大学只提供面对面出席。
- en: 'With this new condition, if you wanted to know which specific institutions
    offered in-person attendance, we can again filter the DataFrame using the `loc`
    method and then use the `tolist` method to get all the values to a Python list:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个新条件，如果你想知道哪些具体的机构提供面对面的出席，我们可以再次使用`loc`方法过滤DataFrame，然后使用`tolist`方法将所有值获取为Python列表：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/baf9be2c5adba7dbfad35db37dce4a58.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/baf9be2c5adba7dbfad35db37dce4a58.png)'
- en: We have a list of institutions now, but there are some special characters that
    we can remove. The “\xa0” in Python represents a non-breaking space, which means
    we can get rid of it using the `strip` method in Pandas which gets rid of whitespace
    on either end of the string value.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个机构列表，但是有一些特殊字符可以去掉。在Python中，“\xa0”代表不间断空格，这意味着我们可以使用Pandas中的`strip`方法来去掉它，该方法可以去掉字符串值两端的空格。
- en: 'We can edit our initial `tolist` code to clean up the final output like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以编辑我们最初的`tolist`代码，以清理最终的输出，就像这样：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/73e3713a37a163a6088d1d7f43a0d868.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/73e3713a37a163a6088d1d7f43a0d868.png)'
- en: Now, we have a final list of universities that only offer in-person attendance!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了一个只提供面对面出席的大学最终列表！
- en: '**What is the year range between the oldest and newest founded universities?**'
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**最古老和最新成立的大学之间的年份范围是多少？**'
- en: Next, let’s use the `loc` and a few other native Pandas methods to filter our
    DataFrame to answer a specific data analysis question.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们使用`loc`和其他几个原生Pandas方法来过滤DataFrame，以回答特定的数据分析问题。
- en: 'We can first just take a look at that Founded column to see what we’re working
    with:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先看一下成立列，看看我们要处理的是什么：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/5da16d05b2e208dd3f50b28608d9023a.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5da16d05b2e208dd3f50b28608d9023a.png)'
- en: It looks like we have a column that’s just full of year values. Since we want
    to compare dates to each other, we could turn the column into a `datetime` type
    to make the analysis easier.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们有一列只包含年份值。由于我们想要将日期进行比较，我们可以将该列转换为`datetime`类型，以便进行更轻松的分析。
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/b0c4d2a725148b89da5a992b5967d789.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b0c4d2a725148b89da5a992b5967d789.png)'
- en: However, using the `to_datetime` method on the column gives us a `ParserError`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在该列上使用`to_datetime`方法会导致`ParserError`。
- en: 'It looks like there’s a string that doesn’t match what we initially saw from
    the Founded column. We can check the row by using the `loc` method to filter the
    DataFrame on the value for founded that specifically equals to what we saw in
    the `ParserError`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来有一个字符串与我们最初从成立列中看到的不匹配。我们可以使用`loc`方法检查行，以便在值为`ParserError`的成立列上过滤DataFrame：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/1c9f46e51f2e38952f043690cd12188c.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1c9f46e51f2e38952f043690cd12188c.png)'
- en: 'There’s one university apparently that has two different founded years. Also,
    now that we know the index of row (9), there''s also an example of using the `loc`
    method to filter the DataFrame on the index value specifically:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 显然有一所大学有两个不同的成立年份。现在我们知道了行（9）的索引，还有一个使用`loc`方法在特定索引值上过滤DataFrame的示例：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/3126e2da18047168189e6afc9e390d9e.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3126e2da18047168189e6afc9e390d9e.png)'
- en: It looks like this is the only row in the DataFrame where the value for the
    “Founded” column has more than one year.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来这是DataFrame中唯一一行，其中“成立”列的值不止一个年份。
- en: Depending on what you want to do with the data, you could try to clean the data
    by maybe picking one year (the first founded date) or maybe by creating two rows
    for this one institution so both founded dates or on separate rows.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你想要对数据做什么，你可以尝试通过选择一个年份（第一个成立日期）或者通过为这个机构创建两行数据，使得两个成立日期分别在不同的行上来清理数据。
- en: 'In this case, since we only are working with this data to answer a simple question
    (what’s the range of the Founded date for the institutions in this data set),
    we can just remove this one row like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，由于我们只是为了回答一个简单的问题（这个数据集中机构的成立日期范围是多少），我们可以像这样删除这一行：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](../Images/5768d3904078965558026ef79502335e.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5768d3904078965558026ef79502335e.png)'
- en: 'Checking the resulting DataFrame you can see the row with the index “9” that
    had multiple values for the Founded column is no longer in the table. You can
    get the drop to stick by reassigning the DataFrame after dropping the row:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 检查结果DataFrame，你会发现索引为“9”的行，其成立日期列有多个值，已经不再存在于表中。你可以通过在删除行后重新分配DataFrame来使删除生效：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Next, we can do the `to_datetime` method again on the Founded column and see
    what happens.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以再次对成立日期列使用`to_datetime`方法，看看会发生什么。
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](../Images/f819b77a55ee9cd5a655cc0b3d50f72a.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f819b77a55ee9cd5a655cc0b3d50f72a.png)'
- en: There’s actually another error that pops up here which is why I included `errors="coerce"`
    to ensure that if there were any other issues converting the string to a datetime
    type the value would just become null.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在这里还会出现另一个错误，这就是为什么我包含了`errors="coerce"`，以确保如果将字符串转换为日期时间类型时出现任何其他问题，该值将变为null。
- en: 'Finally, we can assign the datetime type version of the Founded column to a
    new column. Then, to check the earliest founded date of an institution, we can
    use the `min` method in Python:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以将成立日期列的日期时间类型版本分配给一个新列。然后，要检查机构的最早成立日期，我们可以使用Python中的`min`方法：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](../Images/aa596e911d6870e72a422545ea9fcd58.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aa596e911d6870e72a422545ea9fcd58.png)'
- en: You can see the earliest and latest timestamps of the `founded_date` column
    by using the min and max methods to get the year range between the oldest and
    newest universities.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用min和max方法来查看`founded_date`列的最早和最晚时间戳，以获取最古老和最新的大学之间的年份范围。
- en: It was here that I realized we can do this all much quicker if all we need to
    do is answer that one quick question. Instead of converting to a datetime type,
    we could just turn the column into an integer type and then subtract the max and
    min values from each other to get the range.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 就在这里，我意识到如果我们只需要回答一个快速的问题，我们可以更快地完成所有这些工作。我们可以将列转换为整数类型，然后将最大值和最小值相减，得到范围。
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This outputs 719.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出719。
- en: You shouldn’t always take the easy way and just convert the year column to an
    integer. In the case when you want to do some more complicated analysis or when
    you’re specifically working with time series date, there’s a lot of value-added
    if you clean your data properly and get the date column to a datetime type. However,
    if you do just need to do analysis quickly, it can save you the time and headache
    of looking up errors to simply find the quickest way of solving a problem instead
    of the “best” way to solve it.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你不应该总是采取简单的方法，只是将年份列转换为整数。当你想要进行一些更复杂的分析或者当你专门处理时间序列日期时，如果你正确清理数据并将日期列转换为日期时间类型，那么会增加很多附加值。然而，如果你只需要快速进行分析，那么简单地找到解决问题的最快方法而不是“最佳”方法，可以节省你的时间和麻烦。
- en: There are many different ways you can combine Pandas methods to clean and analyze
    your date. The `loc` method is versatile and allows you to use different methods
    together to filter, slice, and update your DataFrame so it works for the specific
    questions and problems you want to solve.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的方法可以结合使用Pandas方法来清理和分析日期数据。`loc`方法是多功能的，允许您将不同的方法组合在一起，以过滤、切片和更新DataFrame，使其适用于您想要解决的特定问题和问题。
- en: Cleaning data is an iterative process that goes hand in hand with exploring
    data. I hope you found these examples with `loc` helpful for your own analysis
    going forward.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 清理数据是一个与探索数据相辅相成的迭代过程。希望这些使用`loc`的示例对你今后的分析有所帮助。
- en: If you enjoy my content consider following me and **signing up to be a Medium
    member** using my referral link below. It costs only $5 a month and you’ll get
    unlimited access to everything on Medium. Signing up using my link lets me earn
    a small commission. And if you’re already signed up to follow me, thanks a bunch
    for your support!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢我的内容，请考虑关注我，并使用下面的推荐链接**注册成为 Medium 会员**。每月只需 5 美元，你就可以无限制地访问 Medium 上的所有内容。使用我的链接注册让我能够获得一小笔佣金。如果你已经注册并关注了我，非常感谢你的支持！
- en: '[](https://byrondolon.medium.com/membership?source=post_page-----880a068869df--------------------------------)
    [## Join Medium with my referral link — Byron Dolon'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://byrondolon.medium.com/membership?source=post_page-----880a068869df--------------------------------)
    [## 使用我的推荐链接加入 Medium —— Byron Dolon'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为 Medium 会员，你会员费的一部分将会给你阅读的作家，而你将获得对每个故事的完整访问权限…
- en: byrondolon.medium.com](https://byrondolon.medium.com/membership?source=post_page-----880a068869df--------------------------------)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[byrondolon.medium.com](https://byrondolon.medium.com/membership?source=post_page-----880a068869df--------------------------------)'
- en: M**ore by me:** *-* [*3 Efficient Ways to Filter a Pandas DataFrame Column by
    Substring*](https://medium.com/towards-artificial-intelligence/3-efficient-ways-to-filter-a-pandas-dataframe-column-by-substring-fc2993692141)
    *-* [*5 Practical Tips for Aspiring Data Analysts*](https://byrondolon.medium.com/5-practical-tips-for-aspiring-data-analysts-9917006d4dae?sk=019edbddaca4d313665caafe4b747d26)
    *-* [*Improving Your Data Visualizations with Stacked Bar Charts in Python*](/improving-your-data-visualizations-with-stacked-bar-charts-in-python-f18e2b2b9b70)
    *- C*[*onditional Selection and Assignment With .loc in Pandas*](/conditional-selection-and-assignment-with-loc-in-pandas-2a5d17c7765b?sk=e5672d859a3964c1453a1c09edca22cf)
    *-* [*5 (and a half) Lines of Code for Understanding Your Data with Pandas*](/5-and-a-half-lines-of-code-for-understanding-your-data-with-pandas-aedd3bec4c89?sk=7007a1ae248cf7ea4ef5fcd4af7ae72b)
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**更多我的文章：** *-* [*3 Efficient Ways to Filter a Pandas DataFrame Column by Substring*](https://medium.com/towards-artificial-intelligence/3-efficient-ways-to-filter-a-pandas-dataframe-column-by-substring-fc2993692141)
    *-* [*5 Practical Tips for Aspiring Data Analysts*](https://byrondolon.medium.com/5-practical-tips-for-aspiring-data-analysts-9917006d4dae?sk=019edbddaca4d313665caafe4b747d26)
    *-* [*Improving Your Data Visualizations with Stacked Bar Charts in Python*](/improving-your-data-visualizations-with-stacked-bar-charts-in-python-f18e2b2b9b70)
    *- C*[*onditional Selection and Assignment With .loc in Pandas*](/conditional-selection-and-assignment-with-loc-in-pandas-2a5d17c7765b?sk=e5672d859a3964c1453a1c09edca22cf)
    *-* [*5 (and a half) Lines of Code for Understanding Your Data with Pandas*](/5-and-a-half-lines-of-code-for-understanding-your-data-with-pandas-aedd3bec4c89?sk=7007a1ae248cf7ea4ef5fcd4af7ae72b)'
