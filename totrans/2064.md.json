["```py\nselect\n  id,\n  case when order_count < 50\n  then 1\n  else 0\n  end as is_small_customer\nfrom customer\n```", "```py\nEXEC tSQLt.NewTestClass 'testFinancialApp';\nGO\n\nCREATE PROCEDURE testFinancialApp.[test that ConvertCurrency converts using given conversion rate]\nAS\nBEGIN\n    DECLARE @actual MONEY;\n    DECLARE @rate DECIMAL(10,4); SET @rate = 1.2;\n    DECLARE @amount MONEY; SET @amount = 2.00;\n\n    SELECT @actual = FinancialApp.ConvertCurrency(@rate, @amount);\n\n    DECLARE @expected MONEY; SET @expected = 2.4;   --(rate * amount)\n    EXEC tSQLt.AssertEquals @expected, @actual;\n\nEND;\nGO\n```", "```py\n{{ config(tags=['unit-test']) }}\n\n{% call dbt_unit_testing.test('customers', 'should sum order values to calculate customer_lifetime_value') %}\n\n  {% call dbt_unit_testing.mock_ref ('stg_customers') %}\n    select 1 as customer_id, '' as first_name, '' as last_name\n  {% endcall %}\n\n  {% call dbt_unit_testing.mock_ref ('stg_orders') %}\n    select 1001 as order_id, 1 as customer_id, null as order_date\n    UNION ALL\n    select 1002 as order_id, 1 as customer_id, null as order_date\n  {% endcall %}\n\n  {% call dbt_unit_testing.mock_ref ('stg_payments') %}\n    select 1001 as order_id, 10 as amount\n    UNION ALL\n    select 1002 as order_id, 10 as amount\n  {% endcall %}\n\n  {% call dbt_unit_testing.expect() %}\n    select 1 as customer_id, 20 as customer_lifetime_value\n  {% endcall %}\n{% endcall %}\n```", "```py\nMODEL: customers\nTEST:  should sum order values to calculate customer_lifetime_value\nRows mismatch:\n| diff | count | customer_id | customer_lifetime_value |\n| ---- | ----- | ----------- | ----------------------- |\n| +    |     1 |           1 |                      20 |\n| -    |     1 |           1 |                      30 |\n```", "```py\nmodels:\n  - name: stg_customers\n    tests:\n      - dbt_datamocktool.unit_test:\n          input_mapping:\n            source('jaffle_shop', 'raw_customers'): ref('dmt__raw_customers_1')\n          expected_output: ref('dmt__expected_stg_customers_1')\n          depends_on:\n            - ref('raw_customers')\n    columns: ...\n\n  - name: stg_orders\n    tests:\n      - dbt_datamocktool.unit_test:\n          input_mapping:\n            ref('raw_orders'): ref('dmt__raw_orders_1')\n          expected_output: ref('dmt__expected_stg_orders_1')\n    columns: ...\n```", "```py\ntest_example_full_model:\n  model: sqlmesh_example.example_full_model\n  inputs:\n    sqlmesh_example.example_incremental_model:\n        rows:\n        - id: 1\n          item_id: 1\n          ds: '2020-01-01'\n        - id: 2\n          item_id: 1\n          ds: '2020-01-02'\n        - id: 3\n          item_id: 2\n          ds: '2020-01-03'\n  outputs:\n    ctes:\n      filtered_orders_cte:\n        rows:\n          - id: 1\n            item_id: 1\n          - id: 2\n            item_id: 1\n    query:\n      rows:\n      - item_id: 1\n        num_orders: 2\n```", "```py\n$ sqlmesh test\nF\n======================================================================\nFAIL: test_example_full_model (/Users/izeigerman/github/tmp/tests/test_suite.yaml:1)\n----------------------------------------------------------------------\nAssertionError: Data differs\n- {'item_id': 1, 'num_orders': 3}\n?                              ^\n\n+ {'item_id': 1, 'num_orders': 2}\n?                              ^\n\n----------------------------------------------------------------------\nRan 1 test in 0.008s\n\nFAILED (failures=1)\n```"]