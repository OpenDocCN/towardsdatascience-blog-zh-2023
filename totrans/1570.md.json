["```py\nfrom sklearn.cluster import KMeans\nimport numpy as np\n\n# Let's assume we have some data\nX = np.array([[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]])\n\n# We initialize KMeans with the number of clusters we want\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\n\n# We can get the labels of the data points\nprint(kmeans.labels_)\n\n# And we can predict the clusters for new data points\nprint(kmeans.predict([[0, 0], [4, 4]]))\n\n# The cluster centers (the mean of all the points in that cluster) can be accessed with\nprint(kmeans.cluster_centers_)\n```", "```py\nfrom sklearn.cluster import AgglomerativeClustering\nimport numpy as np\n\n# Let's assume we have some data\nX = np.array([[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]])\n\n# We initialize AgglomerativeClustering with the number of clusters we want\nclustering = AgglomerativeClustering(n_clusters=2).fit(X)\n\n# We can get the labels of the data points\nprint(clustering.labels_)\n```", "```py\nfrom sklearn.cluster import DBSCAN\nimport numpy as np\n\n# Let's assume we have some data\nX = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\n\n# We initialize DBSCAN with the epsilon and minPts we want\nclustering = DBSCAN(eps=3, min_samples=2).fit(X)\n\n# We can get the labels of the data points\nprint(clustering.labels_)\n```", "```py\nfrom sklearn.cluster import MeanShift\nimport numpy as np\n\n# Let's assume we have some data\nX = np.array([[1, 1], [2, 1], [1, 0], [4, 7], [3, 5], [3, 6]])\n\n# We initialize MeanShift with the bandwidth we want\nclustering = MeanShift(bandwidth=2).fit(X)\n\n# We can get the labels of the data points\nprint(clustering.labels_)\n\n# The cluster centers can be accessed with\nprint(clustering.cluster_centers_)\n```", "```py\nfrom sklearn.cluster import SpectralClustering\nimport numpy as np\n\n# Let's assume we have some data\nX = np.array([[1, 1], [2, 1], [1, 0], [4, 7], [3, 5], [3, 6]])\n\n# We initialize SpectralClustering with the number of clusters we want\nclustering = SpectralClustering(n_clusters=2, assign_labels=\"discretize\", random_state=0).fit(X)\n\n# We can get the labels of the data points\nprint(clustering.labels_)\n```"]