- en: Simplifying subplots creation in Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/simplifying-subplots-creation-in-matplotlib-3f6efce356b9](https://towardsdatascience.com/simplifying-subplots-creation-in-matplotlib-3f6efce356b9)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Infusing Mosaic Magic into Your Plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://pandeyparul.medium.com/?source=post_page-----3f6efce356b9--------------------------------)[![Parul
    Pandey](../Images/760b72a4feacfad6fc4224835c2e1f19.png)](https://pandeyparul.medium.com/?source=post_page-----3f6efce356b9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3f6efce356b9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3f6efce356b9--------------------------------)
    [Parul Pandey](https://pandeyparul.medium.com/?source=post_page-----3f6efce356b9--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3f6efce356b9--------------------------------)
    ·5 min read·May 23, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c62c7aa026a2002e8b02ca77fdeb78e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [charlesdeluvio](https://unsplash.com/@charlesdeluvio?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Recently, I was working on a project that required creating subplots using the
    [Matplotlib](https://matplotlib.org/) library in Python. If you’ve ever used the
    Matplotlib library, there’s a high chance you’ve also utilized its subplot functionality.
    Subplots are an effective tool for generating multiple plots simultaneously, which
    can be advantageous when comparing results or when multiple plots share identical
    axes. However, at times the subplot syntax in Matplotlib can be anything but straightforward
    for many of us, myself included. Achieving the desired layout for the subplots
    can seem like a game of trial and error, shifting the focus from our actual project.
  prefs: []
  type: TYPE_NORMAL
- en: Hiding in plain sight, really !!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/2bba185b381ff006779b7142cb08f408.png)'
  prefs: []
  type: TYPE_IMG
- en: Hiding in plain sight | [Image by Pixabay](https://pixabay.com//?utm_source=link-attribution&amp%3Butm_medium=referral&amp%3Butm_campaign=image&amp%3Butm_content=317041)
  prefs: []
  type: TYPE_NORMAL
- en: I am aware that the [patchwork library](https://cran.r-project.org/web/packages/patchwork/vignettes/patchwork.html)
    in R is adept at handling the creation of subplots. However, I was surprised to
    discover that [**Matplotlib had this functionality all along**](https://twitter.com/matplotlib/status/1382034095534931969),
    serving as a potent reminder to read the documentation thoroughly. Intrigued,
    I decided to delve deeper to broaden my understanding of this feature and relay
    my experiences and insights to others via a blog post.
  prefs: []
  type: TYPE_NORMAL
- en: Subplots in Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Matplotlib, a widely-used plotting library, provides two approaches for creating
    subplots: `**Figure.subplots()**` and `**Figure.subplot_mosaic()**`. While both
    these methods serve the same purpose, using the latter method has some inherent
    advantages. Let’s explore their differences, highlighting the simplicity and flexibility
    offered by `Figure.subplot_mosaic()` over `Figure.subplots()`.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Figure.subplots method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The subplots method in Matplotlib allows us to create subplots in a grid-like
    structure. It takes parameters specifying the number of rows and columns in the
    subplot grid and returns a `Figure` object and an array of `Axes` objects representing
    the individual subplots.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s consider a toy example where we want to create a figure with four subplots
    in a 2X2 manner. Let’s use the `[**Figure.subplots()**](http://Figure.subplots)`method
    to achieve this task.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1fc15e975fe5480a63da4e4d8ce56605.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure (1): Creating subplots in Matplotlib using the `[**Figure.subplots**](https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure.subplots)`
    method | Image by the Author'
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in *Figure (1)*, although the `**Figure.subplots**` method provides
    a straightforward way to create subplots by specifying the number of rows and
    columns; it falls short under the following scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Manual Indexing Errors**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user must manually specify the indexing for each subplot. This process can
    be error-prone, especially when dealing with complex subplot arrangements or when
    an indexing mistake leads to misplaced or omitted subplots.
  prefs: []
  type: TYPE_NORMAL
- en: '**Limited Layout Flexibility**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The method relies on a fixed grid structure, making creating irregular or custom
    layouts challenging. If the desired arrangement does not fit the specified grid,
    it can result in visual inconsistencies or distorted plots.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adjustment Challenges**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making changes to the subplot arrangement or adding/removing subplots can be
    cumbersome. Adjusting the indexing or resizing the grid requires careful manual
    adjustments, increasing the risk of introducing errors.
  prefs: []
  type: TYPE_NORMAL
- en: A better alternative — **Figure.subplot_mosaic method**
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `[**Figure.subplot_mosaic**](https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure.subplot_mosaic)`method
    is a powerful alternative introduced in Matplotlib version 3.4.0, designed to
    simplify the creation and arrangement of subplots. It provides a more intuitive
    approach, defining subplots using a **dictionary-like structure**, where keys
    represent subplot labels and values define their positions within a grid. With
    this method, you can easily create complex subplot layouts by specifying the relative
    position of each subplot.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s compare the previous approach to the `Figure.subplot_mosaic()` approach
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6fb11fd71420b07d7c8cfd78e41e74ba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure (2): Creating subplots in Matplotlib using the `[**Figure.subplot_mosaic**](https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure.subplot_mosaic)`
    method | Image by the Author'
  prefs: []
  type: TYPE_NORMAL
- en: 'As is evident from *Figure(2)*, while we obtain the same results, the process
    is a lot more simple and intuitive. Additionally, we also have the following advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. **Intuitive syntax**
  prefs: []
  type: TYPE_NORMAL
- en: 'The dictionary-like structure used by `Figure.subplot_mosaic()` provides a
    clear and concise way to specify the arrangement of subplots. This approach eliminates
    the need for manual calculation and indexing required in `fig.subplots()`. We
    have already seen in the code above how to specify the order of the subplots.
    However, we can further simplify the process by [*limiting the axes labels*](https://matplotlib.org/stable/gallery/subplots_axes_and_figures/mosaic.html#string-short-hand)
    to individual characters as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**2\. Flexibility in arranging subplots:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`Figure.subplot_mosaic()` enables us to easily define complex subplot layouts,
    including irregular grids that span multiple rows or columns. This flexibility
    is particularly useful when dealing with datasets that require different visualizations
    side by side. Let’s consider two examples that showcase the desired arrangements
    for our subplots:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we desire an axes that spans across multiple rows or columns. To be
    more precise, we are seeking something similar to the following example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/da785166157787ac82cfe70579543d77.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: While arranging subplots using the `[Figure.subplots](https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure.subplots)`
    methods can be daunting, the `Figure.subplot_mosaic()` method simplifies the process
    to just re-arranging the axes labels.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f20bffca6193427eed0eedad984a8874.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Figure.subplot_mosaic() for Axes spanning multiple rows/columns | Image
    by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Another scenario to consider is not populating all sections of the figure with
    axes but rather leaving certain grid spaces empty, as shown below:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/a529e75a000512e88a1225bfaf05cb2e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8c2c588e1ae0557c7a2070829f0591a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Figure.subplot_mosaic() specifying some spaces in the grid to be blank
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to the aforementioned benefits, we have the ability to [control
    mosaic creation](https://matplotlib.org/stable/gallery/subplots_axes_and_figures/mosaic.html#controlling-mosaic-creation),
    [manage subplot creation](https://matplotlib.org/stable/gallery/subplots_axes_and_figures/mosaic.html#controlling-subplot-creation),
    and individually adjust [parameters for each subplot](https://matplotlib.org/stable/gallery/subplots_axes_and_figures/mosaic.html#per-axes-subplot-keyword-arguments),
    among other features. The documentation provides detailed examples that serve
    as an excellent resource for experimentation and exploration of this functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://matplotlib.org/stable/gallery/subplots_axes_and_figures/mosaic.html?source=post_page-----3f6efce356b9--------------------------------#string-short-hand)
    [## Complex and semantic figure composition (subplot_mosaic) - Matplotlib 3.7.1
    documentation'
  prefs: []
  type: TYPE_NORMAL
- en: Laying out Axes in a Figure in a non-uniform grid can be both tedious and verbose.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: matplotlib.org](https://matplotlib.org/stable/gallery/subplots_axes_and_figures/mosaic.html?source=post_page-----3f6efce356b9--------------------------------#string-short-hand)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this blog post, we explored the advantages of using `Figure.subplot_mosaic()`
    over `fig.subplots()` in Matplotlib. The former offers superior flexibility when
    it comes to organizing subplots, and its syntax for positioning them is notably
    intuitive, thereby empowering data scientists and visualization enthusiasts to
    create sophisticated and customized layouts effortlessly. [This functionality
    reminds me of my initial exposure to Python’s](/five-wonderful-uses-of-f-strings-in-python-7980cfd31c0d)
    `[f-strings](/five-wonderful-uses-of-f-strings-in-python-7980cfd31c0d)`. Before
    the introduction of f-strings, my go-to method for string formatting was predominantly
    the `%-formatting` and the `str.format` methods. Although these methods were functional,
    they weren’t exceptionally intuitive. However, since the introduction of `f-strings`,
    my coding experience has significantly improved — much like my experience with
    `Figure.subplot_mosaic()`👩‍💻😃
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/59ac58e60c0448ba38844d639d90c465.png)](https://pandeyparul.medium.com/subscribe)'
  prefs: []
  type: TYPE_NORMAL
