["```py\n# Import libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Read the data\ndf = pd.read_csv('auto-cleaned.csv')\n\n# Create the scatterplot\nsns.regplot(data = df, x = 'price', y = 'engine-size', fit_reg = False, color = 'purple')\n\n# Add labels for X and Y axes\nplt.xlabel('Price')\nplt.ylabel('Engine Size')\nplt.show()\n```", "```py\n# Calculate Pearson's r\nstats.pearsonr(df['price'], df['engine-size'])\n```", "```py\n# Calculate Spearman's rho\nstats.spearmanr(df['price'], df['engine-size'])\n```", "```py\n# Calculate Kendall's Tau\ntau_b = stats.kendalltau(df['price'], df['engine-size'], variant = 'b')\ntau_c = stats.kendalltau(df['price'], df['engine-size'], variant = 'c')\n\nprint(f\"Kendall's Tau (b) is: {tau_b}\")\nprint(f\"Kendall's Tau (c) is: {tau_c}\")\n```", "```py\n# Create the new column for the binary values\ndf['fuel-type-binary'] = df['fuel-type'].replace({'gas' : 0, 'diesel' : 1})\n\n# Calculate Point-Biserial correlation coefficient\nstats.pointbiserialr(df['price'], df['fuel-type-binary'])\n```", "```py\n# Import necessary packages\nimport pandas as pd\nimport math\n\n# Create a dataframe from two assumed binary variables of X and Y\ndf = pd.DataFrame({'X': [1, 1, 0, 0, 1, 0], 'Y': [1, 0, 1, 1, 0, 1]})\n\n# Create a contingency table\ntable = pd.crosstab(df['X'], df['Y'])\n\n# Extract the values from the table\nn11 = table.iloc[0,0]\nn10 = table.iloc[0,1]\nn01 = table.iloc[1,0]\nn00 = table.iloc[1,1]\n\n# Calculate the phi coefficient\ncoef = (n11*n00 - n10*n01) / (math.sqrt((n11+n10)*(n11+n01)*(n00+n10)*(n00+n01)))\n\nprint(f\"Phi Coefficient: {coef}\")\n```", "```py\n# Import necessary packages\nfrom sklearn.metrics import matthews_corrcoef\n\n# Create two assumed binary variables\nX = [1, 1, 0, 0, 1, 0]\nY = [1, 0, 1, 1, 0, 1]\n\n# Calculate MCC\nmcc = matthews_corrcoef(X, Y)\nprint(f\"Matthews Correlation Coefficient: {mcc}\")\n```", "```py\n# Import necessary libraries\nimport pandas as pd\nimport math\n\n# Create a dataframe\ndf = pd.DataFrame({'X': ['A', 'A', 'B', 'B', 'A', 'B'], 'Y': ['W', 'X', 'W', 'W', 'X', 'W']})\n\n# Create a contingency table\ntable = pd.crosstab(df['X'], df['Y'])\n\n#Calculate the chi-squared statistic and the p-value\nchi2, p, dof, expected = stats.chi2_contingency(table)\n\n#Calculate Cramer's V\nV = math.sqrt(chi2 / (table.values.sum()*min(table.shape[0]-1, table.shape[1]-1)))\n\nprint(f\"Cramer's V: {V}\")\n```", "```py\n# Import necessary packages\nimport pandas as pd\n\n# Create a dataframe of X, Y and Z variables\ndata = {\n    'X': [1, 1, 9, 0, 1, 8, 10, 7, 10, 0, 1, 9, 0, 6, 2, 6, 9, 0, 9, 7], \n    'Y': [8, 2, 4, 3, 0, 1, 6, 0, 5, 6, 10, 3, 2, 7, 4, 5, 6, 0, 5, 10],\n    'Z': [0, 2, 1, 1, 2, 2, 7, 7, 2, 6, 4, 4, 7, 7, 6, 6, 1, 6, 4, 7]\n}\n\ndf = pd.DataFrame(data)\n\n# Create a correlation matrix\ncorr_matrix = df.corr()\n\nx_y_correlation = corr_matrix.loc['X', 'Y']\nx_z_correlation = corr_matrix.loc['X', 'Z']\ny_z_correlation = corr_matrix.loc['Y', 'Z']\n\n# Calculate the Partial Correlation between X and Y, while controlling for Z\npartial_correlation_xy_z = (x_y_correlation - (x_z_correlation * y_z_correlation)) / ((1 - (x_z_correlation ** 2)) * (1 - (y_z_correlation ** 2))) ** 0.5\n\nprint(f\"Partial Correlation (between X and Y, while controlling for Z): {partial_correlation_xy_z}\")\n```", "```py\n# Import necessary packages\nimport pandas as pd\nimport pingouin as pg\n\n# Create a dataframe of X, Y and Z variables\ndata = {\n    'X': [1, 1, 9, 0, 1, 8, 10, 7, 10, 0, 1, 9, 0, 6, 2, 6, 9, 0, 9, 7], \n    'Y': [8, 2, 4, 3, 0, 1, 6, 0, 5, 6, 10, 3, 2, 7, 4, 5, 6, 0, 5, 10],\n    'Z': [0, 2, 1, 1, 2, 2, 7, 7, 2, 6, 4, 4, 7, 7, 6, 6, 1, 6, 4, 7]\n}\ndf = pd.DataFrame(data)\n\n# Calculate the Partial Correlation between X and Y, while controlling for Z\npartial_correlation_xy_z = pg.partial_corr(data = df, x='X', y='Y', covar='Z', method = 'pearson')\n\nprint(partial_correlation_xy_z)\n```"]