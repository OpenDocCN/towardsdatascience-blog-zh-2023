["```py\nimport osmnx as ox\nimport geopandas as gpd\nfrom shapely.geometry import Point\nimport pandas as pd\nimport matplotlib.pyplot as plt\n```", "```py\n# --- origin and destination geom\n\norigin_geom = Point(-5.6613932957355715, 32.93210288339607)\ndestination_geom = Point(-3.3500597061072726, 34.23038027794419)\n\n# --- create origin dataframe\n\norigin =  gpd.GeoDataFrame(columns = ['name', 'geometry'], crs = 4326, geometry = 'geometry')\norigin.at[0, 'name'] = 'origin'\norigin.at[0, 'geometry'] =origin_geom\n\n# --- create destination dataframe\n\ndestination =  gpd.GeoDataFrame(columns = ['name', 'geometry'], crs = 4326, geometry = 'geometry')\ndestination.at[0, 'name'] = 'destination'\ndestination.at[0, 'geometry'] = destination_geom\n```", "```py\ndef get_graph_from_locations(origin, destination, network='drive'):\n    '''\n    network_type as drive, walk, bike\n    origin gdf 4326\n    destination gdf 4326\n    '''\n    # combine and area buffer\n    combined = pd.concat([origin, destination])\n\n    convex = combined.unary_union.envelope # using envelope instead of convex, otherwise it breaks the unary_union\n\n    graph_extent = convex.buffer(0.02)\n\n    graph = ox.graph_from_polygon(graph_extent, network_type= network)\n\n    return graph\n```", "```py\n# --- Get Graph\ngraph = get_graph_from_locations(origin, destination)\n```", "```py\nfig, ax = ox.plot_graph(graph, node_size=0, edge_linewidth=0.4, bgcolor='black', edge_alpha=0.2,  edge_color='yellow')\n```", "```py\n# --- add edge speed\ngraph = ox.add_edge_speeds(graph)\n\n# --- add travel time\ngraph = ox.add_edge_travel_times(graph)\n```", "```py\n# --- add speeds define by local authorities (example)\nhwy_speeds = {\"residential\": 35, \"secondary\": 60, \"tertiary\": 75}\n\ngraph = ox.add_edge_speeds(graph, hwy_speeds)\ngraph = ox.add_edge_travel_times(graph)\n```", "```py\n# --- get the edges as GDF\nedges = ox.graph_to_gdfs(graph, nodes=False)[['highway', 'speed_kph', 'length', 'travel_time', 'geometry']].reset_index(drop=True)\n\n# --- see mean speed/time values by road type\nedges[\"highway\"] = edges[\"highway\"].astype(str)\nedges.groupby(\"highway\")[[\"speed_kph\", \"travel_time\"]].mean().round(0)\n```", "```py\n# ------------- get closest nodes\n\n# origin\nclosest_origin_node = ox.nearest_nodes(G=graph, \n                                       X=origin_geom.x, \n                                       Y=origin_geom.y)\n\n# destination\nclosest_destination_node = ox.nearest_nodes(G=graph, \n                                           X=destination_geom.x, \n                                           Y=destination_geom.y)\n```", "```py\n# --- calculate shortest path with length and travel time\n\n# time\nfastest_route = ox.shortest_path(graph, \n                                orig = closest_origin_node, \n                                dest = closest_destination_node, \n                                weight=\"travel_time\")\n\n# distance\nshortest_route = ox.shortest_path(graph, \n                                orig = closest_origin_node, \n                                dest = closest_destination_node,  \n                                weight=\"length\")\n```", "```py\n# --- get gdf of routes\n\n# fastest\nfastest_route_gdf = ox.utils_graph.route_to_gdf(graph, fastest_route, weight='travel_time')[['highway', 'speed_kph', 'travel_time', 'geometry']]\n\n# shortest\nshortest_route_gdf = ox.utils_graph.route_to_gdf(graph, shortest_route, weight='length')[['highway', 'speed_kph', 'travel_time', 'geometry']]\n```", "```py\n# --- comparison\n\nd1 = fastest_route_gdf['length'].sum()\nd2 = shortest_route_gdf['length'].sum()\n\nt1 = fastest_route_gdf['travel_time'].sum()\nt2 = shortest_route_gdf['travel_time'].sum()\n```", "```py\nprint(f'Fastest Route: Time {round(t1/3600, 2)} hours, Distance {round(d1/1000, 2)} km')\nprint(f'Shortest Route: Time {round(t2/3600, 2)} hours, Distance {round(d2/1000, 2)} km')\n```", "```py\n# --- save\n\nedges.to_file('osm_drive_network.gpkg')\n\nfastest_route_gdf.to_file('fastest_route.gpkg')\n\nshortest_route_gdf.to_file('shortest_route.gpkg')\n```", "```py\n# --- plot network\nax = edges.plot(figsize=(12, 10), linewidth = 0.1, color='grey', zorder=0);\n\n# --- origin and destination\norigin.plot(ax=ax, markersize=100, alpha=0.8, color='blue', zorder=1)\ndestination.plot(ax=ax, markersize=100, alpha=0.8, color='green', zorder=2)\n\n# --- route\nfastest_route_gdf.plot(ax=ax, linewidth = 4, color='red', alpha=0.4, zorder=3)\nshortest_route_gdf.plot(ax=ax, linewidth = 4, color='yellow', alpha=0.4, zorder=4)\n\nplt.axis(False);\n```"]