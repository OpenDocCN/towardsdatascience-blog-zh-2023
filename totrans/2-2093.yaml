- en: Thread Your Python Program with Two Lines of Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/thread-your-python-program-with-two-lines-of-code-3b474407dbb8](https://towardsdatascience.com/thread-your-python-program-with-two-lines-of-code-3b474407dbb8)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Speed up your program by doing multiple things simultaneously
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://mikehuls.medium.com/?source=post_page-----3b474407dbb8--------------------------------)[![Mike
    Huls](../Images/8f9f55a0d25db00799c5d37383b7f5b6.png)](https://mikehuls.medium.com/?source=post_page-----3b474407dbb8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3b474407dbb8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3b474407dbb8--------------------------------)
    [Mike Huls](https://mikehuls.medium.com/?source=post_page-----3b474407dbb8--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3b474407dbb8--------------------------------)
    ·8 min read·Jan 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a45a0f3dc3164d2dedb79a814dca0124.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: Better get our threads organized (image by [Karen Penroz](https://unsplash.com/@penrosekaren)
    on [Unsplash](https://unsplash.com/photos/06ZTGDcAQFs))
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: When your program has a lot of tasks that involve waiting you can speed up your
    program by executing those tasks simultaneously instead of one by one. When making
    breakfast you don’t wait for the coffee machine to finish before cooking an egg.
    Instead you flick on the coffee maker and pour yourself a cup of orange juice
    while heating up the pan for the scrambled eggs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: This article shows you how to do precisely that. At the end you’ll be able to
    **safely apply threading in 2 lines** of code and achieve a **huge speedup** in
    your program. Let’s code!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: But first..
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This article will detail how to apply threads by applying the same function
    to a whole list of arguments. Then we’ll check out how to apply different functions
    in a threaded way.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[](/cython-for-absolute-beginners-30x-faster-code-in-two-simple-steps-bbb6c10d06ad?source=post_page-----3b474407dbb8--------------------------------)
    [## Cython for absolute beginners: 30x faster code in two simple steps'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Easy Python code compilation for blazingly fast applications
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/cython-for-absolute-beginners-30x-faster-code-in-two-simple-steps-bbb6c10d06ad?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Are threads going to solve my problem? Understanding concurrency
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is true that in many cases your program can be sped up by doing “multiple
    things at the same time” but blindly applying threads everywhere isn’t a smart
    solution. There are two ways to multi-task in Python: multiprocessing and threading:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '**threading** runs code **concurrently**: we have **one active CPU** that quickly
    switches between multiple threads'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**multiprocessing** runs code in **parallel**: we have **multiple active CPU’s**
    that each run their own code (check out the article below)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](/applying-python-multiprocessing-in-2-lines-of-code-3ced521bac8f?source=post_page-----3b474407dbb8--------------------------------)
    [## Applying Python multiprocessing in 2 lines of code'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: When and how to use multiple cores to execute many times faster
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/applying-python-multiprocessing-in-2-lines-of-code-3ced521bac8f?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'When threading you have one actor that executes all tasks simultaneously by
    switching between them. In the context of the breakfast-example from the intro:
    there is one actor (you) that switches between the coffee maker, the pan and the
    glass of orange juice.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: When multiprocessing you active multiple that you each give a task. In the breakfast
    analogy it’s like cloning yourself twice and giving each clone a separate task.
    Although it will also be much faster than running the tasks one-by-one, multiprocessing
    has a bit more overhead; cloning yourself is a lot of effort just to have the
    clones waiting for a pan to heat up!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'In short: **multiprocessing** is the best solution in situations when we have
    to **calculate** a lot, **threading** is more suitable for when we have to **wait**
    a lot.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article we’ll focus on threading; check out the article below if you’re
    interested in multiprocessing:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[](/multi-tasking-in-python-speed-up-your-program-10x-by-executing-things-simultaneously-4b4fc7ee71e?source=post_page-----3b474407dbb8--------------------------------)
    [## Multi-tasking in Python: Speed up your program 10x by executing things simultaneously'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Step-by-step guide to apply threads and processes to speed up your code
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/multi-tasking-in-python-speed-up-your-program-10x-by-executing-things-simultaneously-4b4fc7ee71e?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this article we’ll imagine that a tour program receives a big list of email-addresses
    that we have to validate. Imagine we’ve set up an API that we can send an email
    address and returns a true/false depending on whether the email address is valid.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important thing is that we have to send requests and wait for the
    API to respond. This is a typical task that we can multi-thread: we don’t need
    extra cores to calculate faster; we just need some extra threads to send multiple
    email addresses at a time.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'For this article we’ll use this list of email addresses:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And this will be our function that simulates sending the email address to the
    validation API:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[](/docker-for-absolute-beginners-the-difference-between-an-image-and-a-container-7e07d4c0c01d?source=post_page-----3b474407dbb8--------------------------------)
    [## Docker for absolute beginners: the difference between an image and a container'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Learn the difference between Docker images and containerscontainers and images
    are different + practical code examples
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/docker-for-absolute-beginners-the-difference-between-an-image-and-a-container-7e07d4c0c01d?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: A. Non-threaded
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s first see how we use this function without using threads.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Loop through email addresses
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll just loop through the list of our 7 email addresses and send each value
    to the API; dead simple:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is pretty easy to understand but is it fast? (spoiler: no). Since we validate
    each of our 7 email addresses consecutively, and each one takes between 1 and
    2 seconds, it takes anywhere between 7 and 14 seconds. I’ve timed it at **11.772
    seconds**.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[](/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----3b474407dbb8--------------------------------)
    [## Destroying Duck Hunt with OpenCV — image analysis for beginners'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Write code that will beat every Duck Hunt high score
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Use the map function
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to better understand the next part we’ll rewrite the code above using
    Python’s `map` function:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The code above does exactly the same; it maps the function to the list of addresses
    which means that it executes the function for each value in the `email_addresses`
    list.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add the time to our benchmark:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e?source=post_page-----3b474407dbb8--------------------------------)
    [## Why Python is so slow and how to speed it up'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Take a look under the hood to see where Python’s bottlenecks lie
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/why-is-python-so-slow-and-how-to-speed-it-up-485b5a84154e?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: B. Using threads
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this part we check out 3 different ways of applying threads to our function.
    All make use of a thread pool which can be imported with:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Think of the thread pool as a number of threads that are waiting for a task.
    A thread pool has a `map` function that we can use just like in the unthreaded
    example above. As soon as a thread is finished with the task it returns to the
    pool, waiting for another task.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: The thread pool allows us to apply threads easily and safely by providing a
    limit on how many thread can exit in the pool
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[](/python-to-sql-upsert-safely-easily-and-fast-17a854d4ec5a?source=post_page-----3b474407dbb8--------------------------------)
    [## Python to SQL — UPSERT Safely, Easily and Fast'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Lightning-fast insert and/or update with Python
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/python-to-sql-upsert-safely-easily-and-fast-17a854d4ec5a?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Threadpool map
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll first switch to the `map` function supplied by the thread pool.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you we define a thread pool with a maximum of 10 processes. Because of this
    the `map` function starts all calls to the function simultaneously. As soon as
    all workers are done we can assess the results, which is after **1.901 seconds**
    in this case.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[](/create-and-publish-your-own-python-package-ea45bee41cdc?source=post_page-----3b474407dbb8--------------------------------)
    [## Create and publish your own Python package'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: A short and simple guide on how to pip install your custom made package
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/create-and-publish-your-own-python-package-ea45bee41cdc?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Threadpool imap
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous example we had to wait for all function calls to finish. This
    is not the case if we `imap` in stead of `map`. The `imap` function returns an
    iterator that we can access a soon as the results are available:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The code above is almost exactly the same. The only differences are that some
    timing code has been added. Also we obviously use the `imap` function on the `t_pool`
    on line 3.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'If we check out our print results we see this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `imap` function returns an iterator that we can access as soon as our results
    are done. These results are returned ***in order*** though. That means that e.g.
    the second email address has to wait for the first; if the second email address
    is done in 1.3 seconds and the first one in 1.4; both are returned after 1.4 (as
    you’ll see in the print outputs above).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Although the validation of the full list of email_addresses is completed in
    roughly the same time as the previous example; we can access the results much
    faster! The first result is accessible after **1.4 seconds!**
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[](https://mikehuls.medium.com/virtual-environments-for-absolute-beginners-what-is-it-and-how-to-create-one-examples-a48da8982d4b?source=post_page-----3b474407dbb8--------------------------------)
    [## Virtual environments for absolute beginners — what is it and how to create
    one (+ examples)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: A deep dive into Python virtual environments, pip and avoiding entangled dependencies
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: mikehuls.medium.com](https://mikehuls.medium.com/virtual-environments-for-absolute-beginners-what-is-it-and-how-to-create-one-examples-a48da8982d4b?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Threadpool imap_unordered
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One more improvement: instead of returning the iterator in order we’ll return
    it unordered:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'With the code above we can access the results as soon as they are available.
    you can also see this in the print output:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It’s pretty possible that the last email address completes in **1.09 seconds**
    and is returned first. This is very convenient.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[](/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e?source=post_page-----3b474407dbb8--------------------------------)
    [## Create a fast auto-documented, maintainable and easy-to-use Python API in
    5 lines of code with…'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Perfect for (unexperienced) developers who just need a complete, working, fast
    and secure API
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Different functions
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous examples we’ve gone through how to apply the same function
    in a threaded way but what if we have multiple ones? In the example below we simulate
    loading a web-page. We have different functions for loading banners, ads, posts
    and, of course, clickbait:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we run these consecutively our program will take around **7.5 seconds**.
    We can use the thread pool with its `map`, `imap` and `imap_unordered` functions
    with a small adjustment. See the `imap_unordered` example below:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you see we map a list of the functions to a lambda function. The list of
    functions are executed by the lambda function (the `x` is a placeholder for each
    function and the `x()` will execute it). Executing this way rendering out webpage
    only takes **3.013 seconds**.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[](/git-for-absolute-beginners-understanding-git-with-the-help-of-a-video-game-88826054459a?source=post_page-----3b474407dbb8--------------------------------)
    [## Git for absolute beginners: understanding Git with the help of a video game'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Get an intuition about how to use git with a classic RPG as an analogy
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/git-for-absolute-beginners-understanding-git-with-the-help-of-a-video-game-88826054459a?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Multithreading with a thread pool is save and easy to apply. In summary: the
    Pool object of the multiprocessing library offers three functions. `map` is a
    concurrent version of Python’s built-in `map`. The `imap` function returns an
    ordered iterator, accessing the results is blocking. The `imap_unordered` function
    returns an unordered iterator; making it possible to access each result as soon
    as it’s done, without waiting for another function fist.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'I hope this article was as clear as I hope it to be but if this is not the
    case please let me know what I can do to clarify further. In the meantime, check
    out my [other articles](https://mikehuls.com/articles?tags=python) on all kinds
    of programming-related topics like these:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[Git for absolute beginners: understanding Git with the help of a video game](https://mikehuls.medium.com/git-for-absolute-beginners-understanding-git-with-the-help-of-a-video-game-88826054459a)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Create and publish your own Python package](https://mikehuls.medium.com/create-and-publish-your-own-python-package-ea45bee41cdc)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Create a fast auto-documented, maintainable, and easy-to-use Python API in
    5 lines of code with FastAPI](https://mikehuls.medium.com/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Happy coding!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: — Mike
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '*P.S: like what I’m doing?* [*Follow me!*](https://mikehuls.medium.com/membership)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://mikehuls.medium.com/membership?source=post_page-----3b474407dbb8--------------------------------)
    [## Join Medium with my referral link — Mike Huls'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mikehuls.medium.com/membership?source=post_page-----3b474407dbb8--------------------------------)
    [## 使用我的推荐链接加入 Medium — Mike Huls'
- en: Read every story from Mike Huls (and thousands of other writers on Medium).
    Your membership fee directly supports Mike…
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Mike Huls 的每一个故事（以及 Medium 上其他成千上万位作家的故事）。你的会员费用直接支持 Mike…
- en: mikehuls.medium.com](https://mikehuls.medium.com/membership?source=post_page-----3b474407dbb8--------------------------------)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[mikehuls.medium.com](https://mikehuls.medium.com/membership?source=post_page-----3b474407dbb8--------------------------------)'
