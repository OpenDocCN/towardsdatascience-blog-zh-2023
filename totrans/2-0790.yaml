- en: Efficient k-Nearest Neighbors (k-NN) Solutions with NumPy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NumPy实现高效的k-近邻（k-NN）解决方案
- en: 原文：[https://towardsdatascience.com/efficient-k-nearest-neighbors-k-nn-solutions-with-numpy-58cbac2a0971](https://towardsdatascience.com/efficient-k-nearest-neighbors-k-nn-solutions-with-numpy-58cbac2a0971)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/efficient-k-nearest-neighbors-k-nn-solutions-with-numpy-58cbac2a0971](https://towardsdatascience.com/efficient-k-nearest-neighbors-k-nn-solutions-with-numpy-58cbac2a0971)
- en: '[FAST COMPUTING](https://medium.com/@qtalen/list/fast-computing-2a37a7e82be5)'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[快速计算](https://medium.com/@qtalen/list/fast-computing-2a37a7e82be5)'
- en: Leveraging NumPy’s broadcasting, fancy Indexing, and sorting for performance
    computing
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用NumPy的广播、花式索引和排序进行性能计算
- en: '[](https://qtalen.medium.com/?source=post_page-----58cbac2a0971--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----58cbac2a0971--------------------------------)[](https://towardsdatascience.com/?source=post_page-----58cbac2a0971--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----58cbac2a0971--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----58cbac2a0971--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://qtalen.medium.com/?source=post_page-----58cbac2a0971--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----58cbac2a0971--------------------------------)[](https://towardsdatascience.com/?source=post_page-----58cbac2a0971--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----58cbac2a0971--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----58cbac2a0971--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----58cbac2a0971--------------------------------)
    ·9 min read·Jul 20, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在[数据科学前沿](https://towardsdatascience.com/?source=post_page-----58cbac2a0971--------------------------------)
    ·阅读时间9分钟·2023年7月20日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/bf4eee960dbacc8212da2d156f4d85d0.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bf4eee960dbacc8212da2d156f4d85d0.png)'
- en: 'Photo Credit: Created by Author, [Canva](https://www.canva.com/)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者创建，[Canva](https://www.canva.com/)
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: I have a friend who is a city planner. One day, he was tasked with reassessing
    the location suitability of thousands of gas stations in the city, needing to
    find the positions of the k-nearest gas stations to each one.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个朋友是一名城市规划师。一天，他被要求重新评估城市中成千上万的加油站的位置适宜性，需要找出每个加油站的k个最近加油站的位置。
- en: How can we find the nearest k stations with little time? This is a practical
    application scenario of the k-nearest neighbors problem.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何在很短的时间内找到最近的k个加油站？这是k-近邻问题的一个实际应用场景。
- en: As such, he came to me for help, hoping I could provide a high-performance solution.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，他来找我寻求帮助，希望我能提供一个高性能的解决方案。
- en: So I write down this article and which will guide you on efficiently solving
    the k-nearest neighbors problem using NumPy. By comparing it with a Python iterative
    solution, we will demonstrate the powerful performance of NumPy.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我写下了这篇文章，它将指导你如何使用NumPy高效解决k-近邻问题。通过与Python迭代解决方案进行比较，我们将展示NumPy的强大性能。
- en: In this article, we will delve into utilizing advanced NumPy features, such
    as broadcasting, fancy indexing, and sorting, to implement a high-performance
    k-nearest neighbors algorithm.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将**深入探讨**利用高级NumPy特性，如广播、花式索引和排序，来实现高性能的k-近邻算法。
- en: 'After reading this article, you will able to:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读本文后，你将能够：
- en: Understand the k-nearest neighbors problem and its practical application scenarios
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解k-近邻问题及其实际应用场景
- en: Learn how to use the NumPy library to solve the k-nearest neighbors problem
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用NumPy库解决k-近邻问题
- en: Understand in-depth how features such as NumPy broadcasting, fancy indexing,
    and sorting play a role in the algorithm
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入理解NumPy广播、花式索引和排序等特性在算法中的作用
- en: Compare the performance of NumPy with a Python iterative solution, exploring
    why NumPy is superior
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较NumPy与Python迭代解决方案的性能，探索为什么NumPy更优
- en: Let’s delve into the high-performance world of NumPy together, exploring how
    we can solve the k-nearest neighbors problem more quickly and effectively using
    only NumPy.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一起**深入探讨**NumPy的高性能世界，探索如何仅使用NumPy更快、更有效地解决k-近邻问题。
- en: Geometric Principles of Solving the k-NN Problem
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: k-NN问题的几何原理
- en: Let’s review the gas station problem my friend faced from a geometric perspective.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从几何角度回顾我朋友面临的加油站问题。
- en: 'Assuming we place all the gas stations on a two-dimensional plane, the distance
    between two gas stations is actually the Euclidean distance between two points
    on the plane. The solution formula is as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们将所有的加油站放置在二维平面上，加油站之间的距离实际上是平面上两个点之间的欧几里得距离。解决公式如下：
- en: Created by Author, [Embed Fun](https://math.embed.fun/rRSmbcSLxxXy6eWM6c4jA5)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由作者创建，[Embed Fun](https://math.embed.fun/rRSmbcSLxxXy6eWM6c4jA5)
- en: But how should the distance between any two points be calculated?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，任意两个点之间的距离应该如何计算呢？
- en: 'We can imagine the two-dimensional plane as a chessboard, simplify the gas
    stations to six, and sequentially arrange these six points along the horizontal
    and vertical edges of the chessboard, as shown in the figure:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将二维平面想象成一个棋盘，将加油站简化为六个，并将这六个点依次排列在棋盘的水平和垂直边缘，如图所示：
- en: '![](../Images/e0c545c87996c5f964fcf419b66d0504.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e0c545c87996c5f964fcf419b66d0504.png)'
- en: Arrange these six points on the chessboard. Image by Author
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在棋盘上排列这六个点。图像由作者提供
- en: Then the grid where the extensions of any two points intersect can represent
    the distance between these two points. When i=j, the two points are the same,
    and the distance should be 0.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，任意两个点的延伸线相交的网格可以表示这两个点之间的距离。当`i=j`时，这两个点是相同的，距离应该是0。
- en: Assuming that k=2 here, we only need to sort the distances from each point to
    other points in ascending order and take the points corresponding to the first
    three distances (including itself), which are the two closest other points to
    this point.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 假设这里的`k=2`，我们只需将每个点到其他点的距离按升序排序，然后取出前三个距离（包括自身），这些点就是离这个点最近的两个点。
- en: '![](../Images/b02e6d957d86857a3839e922545dc380.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b02e6d957d86857a3839e922545dc380.png)'
- en: After sorting, we can get the 3 points that are closest to each other. Image
    by Author
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 排序后，我们可以得到彼此最接近的3个点。图像由作者提供
- en: Traditional Python Iterative Solution
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传统的 Python 迭代解决方案
- en: As a performance benchmark, let’s first look at how the traditional Python iterative
    solution works.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 作为性能基准，我们先来看传统的 Python 迭代解决方案。
- en: 'The idea of this solution is relatively simple:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案的思路相对简单：
- en: To calculate the Euclidean distance between the coordinate point itself and
    other coordinate points in the list.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算坐标点自身与列表中其他坐标点之间的欧几里得距离。
- en: Then compare the distances from the current point to other points.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后比较当前点与其他点之间的距离。
- en: Take the top k points that meet the requirements.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择满足要求的前 `k` 个点。
- en: Next is the code part.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是代码部分。
- en: First, we randomly generate six coordinate points. Since we will use the same
    coordinates as a comparison later, we need to add a `seed` to the `random` package.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们随机生成六个坐标点。由于稍后将使用相同的坐标进行比较，因此我们需要为`random`包添加一个`seed`。
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, start calculating the distance of each point to all points (including
    itself) in the list, which requires two iterations.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，开始计算每个点到列表中所有点（包括自身）的距离，这需要两个迭代。
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Then, sort the distances between each point and other points and find the index
    of the point corresponding to the distance in the original list.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，对每个点与其他点之间的距离进行排序，并在原始列表中找到与距离对应的点的索引。
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The final return should be a two-dimensional array, where the first item in
    each row of the array is the current point, and the other items are the indexes
    of each point in the list after sorting the distance.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最终返回应该是一个二维数组，其中数组的每一行的第一个项目是当前点，其他项目是排序后每个点在列表中的索引。
- en: Finally, we find each point that meets the conditions in the original coordinate
    list based on the index.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们根据索引在原始坐标列表中找到每个符合条件的点。
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The result is a two-dimensional array, and each row of the array is the current
    point and the other two closest points.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个二维数组，数组的每一行是当前点及其他两个最近的点。
- en: To facilitate our evaluation of the results, we use `Matplotlib` to draw all
    coordinate points and the lines from each coordinate to the two nearest coordinates.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便评估结果，我们使用`Matplotlib`绘制所有坐标点以及从每个坐标到两个最近坐标的线条。
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result is as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![](../Images/10016b77e5fb93c2d5eedd1a6932e790.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/10016b77e5fb93c2d5eedd1a6932e790.png)'
- en: Traditional Python Iterative Solution. Image by Author
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的 Python 迭代解决方案。图像由作者提供
- en: As you can see, six coordinates and corresponding lines have appeared on the
    chart.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，图表上出现了六个坐标和相应的线条。
- en: This chart will serve as a benchmark and will be compared with the results of
    using NumPy later to confirm the correctness of the algorithm.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表将作为基准，并将与稍后使用 NumPy 的结果进行比较，以确认算法的正确性。
- en: Basic Knowledge of Using NumPy Solution
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 NumPy 解法的基础知识
- en: Next, let’s see how to solve this problem using NumPy.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何使用 NumPy 来解决这个问题。
- en: Before writing the code, we need to do some preheating on some basic concepts
    of NumPy.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写代码之前，我们需要对 NumPy 的一些基本概念进行预热。
- en: Broadcasting
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 广播
- en: Since it involves placing a set of coordinate points on the chessboard horizontally
    (`shape=(1, 6)`) and vertically (`shape=(6, 1)`), and forming a `(6, 6)` matrix.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于涉及将一组坐标点水平放置（`shape=(1, 6)`）和垂直放置（`shape=(6, 1)`），并形成一个 (6, 6) 的矩阵。
- en: After calculating the distance, it involves operations between two arrays of
    different sizes, so we need to use the broadcasting mechanism of NumPy.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算距离之后，涉及两个不同大小数组之间的操作，因此我们需要使用 NumPy 的广播机制。
- en: 'Here is an example:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个例子：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, when a (1, 6) array and a (6, 1) array are added, the resulting
    shape is (6, 6).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，当 (1, 6) 的数组和 (6, 1) 的数组相加时，结果的形状是 (6, 6)。
- en: 'For the specific principles, please refer to the [official documentation](https://numpy.org/doc/stable/user/basics.broadcasting.html).
    The schematic diagram is as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 关于具体的原理，请参阅 [官方文档](https://numpy.org/doc/stable/user/basics.broadcasting.html)。示意图如下：
- en: '![](../Images/dbdcb2a55b2993720e8b6e83782ead8c.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dbdcb2a55b2993720e8b6e83782ead8c.png)'
- en: How broadcasting works. Image by Author
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 广播如何工作。图像由作者提供
- en: Sorting
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排序
- en: After solving the distance between any two points, we also need to sort the
    distances.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决了任意两个点之间的距离之后，我们还需要对这些距离进行排序。
- en: 'Like the `sort()` function in the Python standard library, NumPy also has a
    function for sorting: `np.sort()`. Alternatively, the `ndarray.sort()` function
    can also be used for sorting.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 Python 标准库中的 `sort()` 函数一样，NumPy 也有一个排序函数：`np.sort()`。另外，`ndarray.sort()`
    函数也可以用于排序。
- en: 'Since we are sorting the distances, we also need to find the index of each
    item in the original array after sorting. In NumPy, we can use `np.argsort()`
    to get it:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在对距离进行排序，因此还需要在排序后找到每个项目在原始数组中的索引。在 NumPy 中，我们可以使用 `np.argsort()` 来获取：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Of course, we only need to focus on the k-nearest points, and we don’t need
    to know the order of distances.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们只需要关注 k 最近的点，不需要知道距离的顺序。
- en: So we can use NumPy’s `[argpartition()](https://numpy.org/doc/stable/reference/generated/numpy.argpartition.html)`
    API, which can return the index of the smallest few points without sorting, which
    will perform better.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以使用 NumPy 的 `[argpartition()](https://numpy.org/doc/stable/reference/generated/numpy.argpartition.html)`
    API，它可以在不排序的情况下返回最小几个点的索引，这样性能会更好。
- en: Fancy Indexing
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 花式索引
- en: In the traditional Python list, if we want to find a set of data by index, we
    need to iterate separately through the data list and index list, which has very
    poor performance.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的 Python 列表中，如果我们想通过索引查找一组数据，我们需要分别遍历数据列表和索引列表，这样性能非常差。
- en: 'But NumPy provides fancy indexing to quickly find data corresponding to the
    index. Here is an example:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 但 NumPy 提供了花式索引，以快速查找与索引对应的数据。这里是一个例子：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/f2c1f6b887edad23302debc54220fd71.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f2c1f6b887edad23302debc54220fd71.png)'
- en: Fancy indexing can quickly find data corresponding to the index array. Image
    by Author
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 花式索引可以快速查找与索引数组对应的数据。图像由作者提供
- en: 'Because fancy indexing is a set of integer arrays, there is a rule to follow:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 由于花式索引是一组整数数组，因此有一个规则需要遵循：
- en: The data indexed reflects the shape of the broadcasted index array, which is
    unrelated to the shape of the data array.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 索引的数据反映了广播索引数组的形状，与数据数组的形状无关。
- en: NumPy Solution
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 解法
- en: After understanding some basics of NumPy, let’s see how to solve the k-NN problem
    using NumPy.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了 NumPy 的一些基础知识之后，让我们看看如何使用 NumPy 解决 k-NN 问题。
- en: 'Since here we are using a set of coordinate points to form an array, we need
    to use NumPy’s [structured_array](https://numpy.org/doc/stable/user/basics.rec.html):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在这里使用一组坐标点来形成一个数组，我们需要使用 NumPy 的 [structured_array](https://numpy.org/doc/stable/user/basics.rec.html)：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, add an extra dimension to the original one-dimensional array in the horizontal
    and vertical directions, turning it into two sides of a two-dimensional chessboard:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在水平和垂直方向上向原始的一维数组添加一个额外的维度，将其转变为二维棋盘的两个边：
- en: Then use the broadcasting mechanism to calculate the distance between each point.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用广播机制来计算每个点之间的距离。
- en: 'Finally, get a (6, 6) two-dimensional array:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，得到一个 (6, 6) 的二维数组：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, use the `argpartition` method to find out the indexes of the two points
    with the smallest distance in each row:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用`argpartition`方法找出每一行中距离最小的两个点的索引：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We still need two `Matplotlib` drawing methods to evaluate the correctness
    of the results:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍需要两个`Matplotlib`绘图方法来评估结果的正确性：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, write a main method to integrate all the code together:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，编写一个主方法将所有代码整合在一起：
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Just looking at the code, it’s already much simpler than the Python iterative
    version. Next, we compare the results with the chart:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 仅从代码来看，它已经比Python迭代版本简洁得多。接下来，我们用图表比较结果：
- en: '![](../Images/3716625ab3efab808886cdf3961a6e7e.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3716625ab3efab808886cdf3961a6e7e.png)'
- en: The k-NN result of the NumPy solution. Image by Author
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy解决方案的k-NN结果。图片由作者提供
- en: See, the results are exactly the same!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 看，结果完全相同！
- en: Performance Comparison of the Two Solutions
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 两种解决方案的性能比较
- en: Finally, let’s compare the execution performance of the two solutions. Here
    we still use `%timeit` for evaluation.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们来比较这两种解决方案的执行性能。这里我们仍然使用`%timeit`进行评估。
- en: 'First is the Python iterative way. Let’s see how long it takes to expand to
    1,000 coordinates:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是Python迭代方法。让我们看看扩展到1,000个坐标需要多长时间：
- en: '![](../Images/0ac92f11637d29373c84df999832de2d.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0ac92f11637d29373c84df999832de2d.png)'
- en: The execution time of Python Iterative solution. Image by Author
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Python迭代解决方案的执行时间。图片由作者提供
- en: 'Then it’s the NumPy implementation. See how long it takes for 1,000 coordinates:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是NumPy实现。看看1,000个坐标需要多长时间：
- en: '![](../Images/58640d6d712878b195c483f2423e0978.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/58640d6d712878b195c483f2423e0978.png)'
- en: The execution time of NumPy solution. Image by Author
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy解决方案的执行时间。图片由作者提供
- en: Surprised, right? The performance has improved hundreds of times, so my friend
    doesn’t have to worry about being unable to calculate it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 惊讶吧？性能提高了数百倍，所以我的朋友不必担心计算不了。
- en: Conclusion
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This article taught us how to use NumPy’s broadcasting, fancy indexing, and
    sorting to efficiently solve the k-nearest neighbors problem.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 本文教会了我们如何使用NumPy的广播、花式索引和排序来高效解决k最近邻问题。
- en: We also compared the performance of NumPy with the Python iterative solution
    and deeply understood why NumPy can perform better in solving such problems.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还比较了NumPy与Python迭代解决方案的性能，并深入理解了为什么NumPy在解决这类问题时表现更好。
- en: 'To recap, we learned the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，我们学到了以下内容：
- en: The definition and practical application scenarios of the k-nearest neighbors
    problem
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: k最近邻问题的定义及实际应用场景
- en: How to use the NumPy library to solve the k-nearest neighbors problem
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用NumPy库解决k最近邻问题
- en: The application of NumPy’s broadcasting, fancy indexing, sorting, and other
    features in algorithm implementation
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy的广播、花式索引、排序及其他特性在算法实现中的应用
- en: The performance comparison analysis between NumPy and the Python brute force
    solution
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy与Python暴力解决方案的性能比较分析
- en: Although this article provides an efficient k-nearest neighbors solution, this
    is just a starting point.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本文提供了一种高效的k最近邻解决方案，但这只是一个起点。
- en: In future articles, I will reinterpret the solution to this problem using advanced
    algorithms and data structures, showing you more efficient and usable algorithm
    skills.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的文章中，我将使用高级算法和数据结构重新解释这个问题的解决方案，展示更多高效且可用的算法技巧。
- en: Stay tuned for future articles. If you are interested in this article, feel
    free to comment, and I will answer them individually.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 敬请关注未来的文章。如果你对本文感兴趣，欢迎评论，我会逐一回复。
- en: Let me start with the basics and walk you through the best scientific computing
    practices at work.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我从基础开始，带你了解工作中的最佳科学计算实践。
- en: '![Peng Qian](../Images/fa6bd24b4781f623be8ea40c4e6bdb78.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![Peng Qian](../Images/fa6bd24b4781f623be8ea40c4e6bdb78.png)'
- en: '[Peng Qian](https://qtalen.medium.com/?source=post_page-----58cbac2a0971--------------------------------)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[Peng Qian](https://qtalen.medium.com/?source=post_page-----58cbac2a0971--------------------------------)'
- en: Fast Computing
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速计算
- en: '[View list](https://qtalen.medium.com/list/fast-computing-2a37a7e82be5?source=post_page-----58cbac2a0971--------------------------------)4
    stories![How to Optimize Multidimensional Numpy Array Operations with Numexpr.](../Images/dd4c34ca6ee3502debdeac4c5e73eb46.png)![Use
    Numexpr to help me find the most livable city.](../Images/edbec8eba0dc95e2b00d5f1092f80529.png)![Efficient
    k-Nearest Neighbors (k-NN) Solutions with NumPy](../Images/1e1af2eb2245576645f411b9b5a36a20.png)[](https://medium.com/@qtalen/membership?source=post_page-----58cbac2a0971--------------------------------)
    [## Join Medium with my referral link - Peng Qian'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[查看列表](https://qtalen.medium.com/list/fast-computing-2a37a7e82be5?source=post_page-----58cbac2a0971--------------------------------)4
    篇故事！[如何用 Numexpr 优化多维 Numpy 数组操作。](../Images/dd4c34ca6ee3502debdeac4c5e73eb46.png)![用
    Numexpr 帮助我找到最宜居的城市。](../Images/edbec8eba0dc95e2b00d5f1092f80529.png)![高效的 k-最近邻
    (k-NN) 解决方案与 NumPy](../Images/1e1af2eb2245576645f411b9b5a36a20.png)[](https://medium.com/@qtalen/membership?source=post_page-----58cbac2a0971--------------------------------)
    [## 通过我的推荐链接加入 Medium - 彭倩'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为 Medium 会员，你的会员费的一部分将直接支持你阅读的作者，并且你可以完全访问每一篇故事……
- en: medium.com](https://medium.com/@qtalen/membership?source=post_page-----58cbac2a0971--------------------------------)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@qtalen/membership?source=post_page-----58cbac2a0971--------------------------------)
- en: 'This article was originally published at: [https://www.dataleadsfuture.com/efficient-k-nearest-neighbors-k-nn-solutions-with-numpy/](https://www.dataleadsfuture.com/efficient-k-nearest-neighbors-k-nn-solutions-with-numpy/)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章最初发布在：[https://www.dataleadsfuture.com/efficient-k-nearest-neighbors-k-nn-solutions-with-numpy/](https://www.dataleadsfuture.com/efficient-k-nearest-neighbors-k-nn-solutions-with-numpy/)
