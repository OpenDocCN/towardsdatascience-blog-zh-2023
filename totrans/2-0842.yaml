- en: Expanding Time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/expanding-time-8a1c41e101c2](https://towardsdatascience.com/expanding-time-8a1c41e101c2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to Increase the Value of Low-Dimensional Data by Extracting Time Features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@kurt.klingensmith?source=post_page-----8a1c41e101c2--------------------------------)[![Kurt
    Klingensmith](../Images/2249e99f12d10f81598c754b1aaf76cc.png)](https://medium.com/@kurt.klingensmith?source=post_page-----8a1c41e101c2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8a1c41e101c2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8a1c41e101c2--------------------------------)
    [Kurt Klingensmith](https://medium.com/@kurt.klingensmith?source=post_page-----8a1c41e101c2--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8a1c41e101c2--------------------------------)
    ·8 min read·Jun 2, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8fc618f72a8909656efa287fc09d4fff.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Guillaume de Germain](https://unsplash.com/@guillaumedegermain?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/AtzIa-yrAN4?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText).
  prefs: []
  type: TYPE_NORMAL
- en: While low-dimensional datasets may seem of limited use, there are often ways
    to extract more features from them — especially if the dataset includes time data.
    Extracting additional features by “unpacking” a value for date and time can provide
    additional insights not readily available in the base dataset. This article will
    walk through the process of using Python to take low-dimensional weather data
    further than may be readily evident based on the data’s original features.
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The data for this is public domain weather data used with permission of the
    Montana Climate Office at [climate.umt.edu](http://climate.umt.edu/) [1]. Montana’s
    weather data is accessible at: [https://shiny.cfc.umt.edu/mesonet-download/](https://shiny.cfc.umt.edu/mesonet-download/)
    [2]. For this article, the data uses daily air temperature recordings for two
    weather stations: Whitefish North, MT and Harding Cutoff, SD. Note that the station
    names and air temperature column have been slightly reformatted to improve understandability
    for this article.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Code and Data CSV:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The full notebook and data CSV with additional visualizations is available at
    the **linked GitHub page:** [**download or clone it from git to follow along**](https://github.com/kurtklingensmith/ExpandingTime)**.**
  prefs: []
  type: TYPE_NORMAL
- en: 'This code requires the following libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 1\. Initial Data Exploration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s what the base dataframe looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/795f263430d8b22f5ad587796d9e9733.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can run a quick plotly visualization with the following code, which shows
    us temperature recording over time for both weather stations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d40133b2c31b2cc92ef7ee07acc1f9d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a good start that shows the impact of seasonality on observed temperatures;
    the dips are winter months and the peaks are summer. Other possibilities include
    a histogram of observed temperatures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5120610abcbd3f52abfb941ee8e0b6b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: More charts are possible, as is a basic statistical analysis on observed temperatures
    overall and by station. However, **taking this data exploration to the next level
    requires additional feature extraction.**
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Expanding the Time Column
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s revisit the “datetime” column. Looking at a random date example, this
    column contains date information in the following format: 2019–04–22, or year,
    month, day. There’s quite a bit of data packed within this one column. Here’s
    a visual on how it breaks out:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8f39b9731443bfa54005b666c596065f.png)'
  prefs: []
  type: TYPE_IMG
- en: Diagram created by author.
  prefs: []
  type: TYPE_NORMAL
- en: Splitting apart the “datetime” column can create 7 new columns in the dataframe,
    but there are more possibilities tailorable to the specific dataset and domain.
    For example, the day could break down into data on a weekend versus weekday or
    a holiday. Such information could be useful for a retail-focused dataset where
    an analyst is interested in customer behavior over time. Since the data used in
    this example is weather, season is of importance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Accessing all of this is rather simple via Pandas’ datetime capabilities. The
    first step is ensuring the “datetime” column is formatted as such with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few ways to extract additional features from the “datetime” column:'
  prefs: []
  type: TYPE_NORMAL
- en: Directly via use of Pandas dt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By using Pandas dt to break the additional features into new columns.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2.1\. Directly Accessing Elements from the Date and Time Column
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s an example of directly accessing and converting the time data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/68016119b4c37f4b671244bc9cb77f29.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example for months:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output here is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4a4d632686f1c2757f5c00b255b2b0e1.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2\. Creating New Columns for Elements Extracted from Date and Time Column
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another way to handle the time data is to extract specific datetime features
    into new columns. This expands the dimensionality of the dataframe. The following
    python code shows how to create new columns for the day name, the numerical day,
    the month name, the numerical month, and the year. The last line creates a column
    for the Julian Date, which is a sequential count of days in a year — the first
    day of the year being 001, the last 365 (or, in a leap year, 366). An example
    Julian calendar is [**available at this link**](https://www.glerl.noaa.gov/res/projects/ifyle/julian_date_calendar.html)
    [3].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'There’s one thing left to do, and that’s create a season column. **This is
    a good example of where knowing the data, the customer, and domain knowledge relevant
    to the data are important.** In the case of seasons, there are two calendar definitions:
    Meteorological and Astronomical [4]. Meteorologists define each season as a three
    month span beginning on the 1st of a month, whereas the Astronomical Seasons begin
    on calendar dates that do not coincide with the start of the month.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, analyzing weather data mandates use of the Meteorological
    calendar. However, suppose the dataset in question deals with consumer purchases
    over time. In that case, Astronomical Seasons might make more sense. Here’s an
    example of an if-else list comprehension for creating a season column based on
    the Meteorological calendar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following dataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b40b77ead84a5c939a1f5e17da93de29.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: While 10 columns may still qualify as low-dimensionality for a dataframe, it
    is quite a change from the starting point of 3\. But what do these new time features
    enable? The next section shows some possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Making Use of the New Time Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s revisit the original plot of temperature over time from section 1\. Here’s
    an example code block visualizing one station (Whitefish North) over time with
    seasons represented by different colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting chart is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eab233204e08368e8a9ebed0210e59c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new time features quickly show how seasons map to shifts in observed temperature.
    The addition of the seasons column is already proving useful, but revisiting the
    histogram from section 1 is even more interesting. The updated code below assigns
    the season as the value for facet_row in the plotly express histogram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/10aab62ee3f6a73191b8c57944c3e9d2.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing new time features to the dataframe enhances the ability to compare
    the temperature distributions of the two weather stations over time. In this case,
    a noticeable divergence between the two stations occurs in Summer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s another example — suppose a meteorologist was interested in comparing
    the two weather stations in Summer 2020 by Julian date. Here’s how to visualize
    the temperature recordings using the new features:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The graph looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cfd7430dd56946c6be59f5fc110c0a56.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: The additional time features allow analysts to quickly answer narrowly scoped
    questions; note how the Harding Cutoff station’s Summer 2020 temperatures were
    typically higher higher than Whitefish N until an anomalous crossover occurred
    in the latter half of the season.
  prefs: []
  type: TYPE_NORMAL
- en: 3.1\. Directly Using the Original Date and Time Column
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Recall in section 2 we discussed directly accessing additional date and time
    features versus extracting them into new columns. The above graph, “Summer Temperature
    Recordings, 2020,” is reproducible by using Pandas dt functions on the original
    “datetime” column inside the plotly chart code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the same exact graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bd45d46792d9eb9b55dbf24712972440.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of this technique is it does not require increasing the dataframe’s
    dimensionality which, for very large datasets, can help reduce computational load
    and prevent the dataframe frame from becoming too large to deal with. This technique
    also works well for a narrow analysis question requiring limited use of additional
    time features.
  prefs: []
  type: TYPE_NORMAL
- en: The disadvantage is the large amount of code required to format and extract
    specific features within a visualization function. This can hinder the interpretability
    and repeatability of the code. There may also be functions or code that are incompatible
    with in-line Pandas dt operations.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Time columns in dataframes often contain numerous latent features that can improve
    the analytical and visual output possibilities for a low-dimensional data. Extracting
    these time features can increase a dataframe’s dimensionality in a way that unlocks
    new, useful possibilities for analysis.
  prefs: []
  type: TYPE_NORMAL
- en: For more example visualizations and the complete code, [the Jupyter notebook
    and csv file is available at this linked Github page](https://github.com/kurtklingensmith/ExpandingTime).
  prefs: []
  type: TYPE_NORMAL
- en: 'References:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] University of Montana, [Montana Climate Office](https://www.umt.edu/climate/)
    (2023).'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] Montana Mesonet Data, [Montana Mesonet Data Downloader](https://shiny.cfc.umt.edu/mesonet-download/)
    (2023).'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] NOAA Great Lakes Environmental Research Laboratory — Ann Arbor, MI, USA,
    [Julian Date Calendar](https://www.glerl.noaa.gov/res/projects/ifyle/julian_date_calendar.html)
    (2023).'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] NOAA, [Meteorological Versus Astronomical Seasons](https://www.ncei.noaa.gov/news/meteorological-versus-astronomical-seasons)
    (2016).'
  prefs: []
  type: TYPE_NORMAL
