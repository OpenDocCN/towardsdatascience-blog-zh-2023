["```py\nimport nannyml as nml\nimport pandas as pd\n\ndf = pd.read_csv(\"weather/shifts_canonical_train.csv\")\ndf[\"timestamp\"] = pd.to_datetime(df.fact_time * 1_000_000_000)\n\ndf_september = df.loc[\n    df[\"timestamp\"].apply(lambda x: x.month) == 9\n].sort_values(\"timestamp\")\n\ndf_october = df.loc[\n    df[\"timestamp\"].apply(lambda x: x.month) == 10\n].sort_values(\"timestamp\")\n```", "```py\ncalc = nml.DataReconstructionDriftCalculator(\n    column_names=df_september.columns.drop(\"timestamp\"),\n    timestamp_column_name=\"timestamp\",\n    chunk_size=10_000\n)\n\ncalc.fit(df_september)\nresults = calc.calculate(df_october)\n```", "```py\nfigure = results.plot(plot_reference=True)\nfigure.write_image(\"reconstruction_error_weather.jpg\")\n```", "```py\nresults.to_df()\n\n              chunk              ... reconstruction_error       \n                key chunk_index  ...      lower_threshold  alert\n0          [0:9999]           0  ...              6.15187  False\n1     [10000:19999]           1  ...              6.15187  False\n2     [20000:29999]           2  ...              6.15187  False\n3     [30000:39999]           3  ...              6.15187  False\n4     [40000:49999]           4  ...              6.15187  False\n..              ...         ...  ...                  ...    ...\n82  [390000:399999]          39  ...              6.15187   True\n83  [400000:409999]          40  ...              6.15187   True\n84  [410000:419999]          41  ...              6.15187   True\n85  [420000:429999]          42  ...              6.15187   True\n86  [440000:439999]          43  ...              6.15187   True\n[87 rows x 14 columns]\n```", "```py\ncalc = nml.DataReconstructionDriftCalculator(\n    column_names=df_ref.columns.drop(\"date\"),\n    timestamp_column_name=\"date\",\n    chunk_size=1000,\n    imputer_categorical=SimpleImputer(strategy=\"constant\", fill_value=\"NA\"),\n    imputer_continuous=SimpleImputer(strategy=\"median\"),\n)\n```"]