- en: 7 Scikit-Learn Best Practices For Data Scientists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/7-scikit-learn-best-practices-for-data-scientists-f232a6ed2756](https://towardsdatascience.com/7-scikit-learn-best-practices-for-data-scientists-f232a6ed2756)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Tips for taking full advantage of this machine learning package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@aashishnair?source=post_page-----f232a6ed2756--------------------------------)[![Aashish
    Nair](../Images/23f4b3839e464419332b690a4098d824.png)](https://medium.com/@aashishnair?source=post_page-----f232a6ed2756--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f232a6ed2756--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f232a6ed2756--------------------------------)
    [Aashish Nair](https://medium.com/@aashishnair?source=post_page-----f232a6ed2756--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f232a6ed2756--------------------------------)
    ·5 min read·Jan 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0ac004ef554c3720bab10cad7e2a3756.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [John Schnobrich](https://unsplash.com/@johnschno?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Scikit Learn is one of the go-to libraries for machine learning and it is easy
    to see why. The package is composed of simple yet effective tools that are explained
    with very thorough documentation.
  prefs: []
  type: TYPE_NORMAL
- en: However, despite its ease of use, it is easy to make mistakes if you don’t follow
    certain practices, especially if you are a beginner. I for one fight the urge
    to facepalm when I see some of the glaring mistakes made using the module in my
    previous works.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, even if you follow the documentation closely, it is still easy to
    mistakenly omit certain key features or make suboptimal decisions.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, I draw upon my past experiences and delve into 7 Scikit Learn best practices
    for effectively carrying out predictive data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Use Scikit Learn (and not Pandas) for feature engineering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Scikit Learn is designed for machine learning tasks, which of course includes
    feature engineering. However, it is common for some to use Pandas for certain
    operations (e.g., one hot encoding) since that is the package most come to learn
    first.
  prefs: []
  type: TYPE_NORMAL
- en: While the Pandas library is excellent for conducting exploratory data analysis,
    it can not compare to Scikit Learn in the machine learning space.
  prefs: []
  type: TYPE_NORMAL
- en: The transformers in Scikit Learn are designed for machine learning applications.
    They can prepare training and testing sets efficiently while avoiding data leakage
    (if done properly).
  prefs: []
  type: TYPE_NORMAL
- en: Shoehorning Pandas functions into a data pipeline with other Scikit Learn tools
    will inevitably lead to inefficient procedures that are prone to error.
  prefs: []
  type: TYPE_NORMAL
- en: It is better to instead mainly rely on Scikit Learn for operations pertaining
    to feature engineering.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Use stratified splits in classification tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Classification tasks can be challenging when the data of interest exhibits data
    imbalance, where one or more classes are underrepresented.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, with stratification, users can maintain the presence of all classes
    in every subset of the original data.
  prefs: []
  type: TYPE_NORMAL
- en: When splitting the dataset into train and test sets, users can use the `stratify`
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: When splitting the training data into multiple folds for cross-validation, users
    can use the [StratifiedKFold](http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.StratifiedKFold.html)
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Speed up hyperparameter tuning with the n_jobs parameter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hyperparameter tuning can be one of the more time-consuming parts of the data
    modeling phase. Evaluating multiple combinations of hyperparameters one at a time
    will naturally be a slow process.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, users can speed up hyperparameter tuning methods like grid search
    and random search by leveraging the `n_jobs` parameter, which determines the number
    of jobs to run in parallel. By default, the `n_jobs` value is set to 1, but users
    can attain results much faster by assigning `n_jobs` to -1, which runs jobs parallelly
    with the use of all available processors.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Assign a random_state value to attain reproducible results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A number of feature engineering procedures and machine learning algorithms incorporate
    randomness. However, a program that utilizes pure randomness will be unable to
    reproduce its results, which makes it difficult to conduct experiments.
  prefs: []
  type: TYPE_NORMAL
- en: Users can attain reproducible results by setting a seed to the random number
    generator. For Scikit Learn tools, this is done by assigning a value to the `random_state`
    parameter to an object when applicable. This ensures that the program will yield
    reproducible results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Users can set a `random_state` value when performing operations such as:'
  prefs: []
  type: TYPE_NORMAL
- en: splitting a dataset into training and testing sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring a machine learning classifier object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hyperparameter tuning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: The number assigned to the `random_state` parameter doesn’t really matter
    as long as it isn’t changed during the experimentation.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 5\. Specify the scoring parameter in hyperparameter tuning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hyperparameter tuning methods evaluate models with different combinations of
    hyperparameters. The purpose of this technique is to identify the hyperparameters
    that yield peak performance.
  prefs: []
  type: TYPE_NORMAL
- en: However, how can models perform well when they are evaluated with the wrong
    metric? This is a very possible outcome when you use the default value for the
    `scoring` parameter in the Scikit Learn module’s GridSearchCV and RandomizedSearchCV
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the grid search and random search evaluates hyperparameters of classification
    models by accuracy. Unfortunately, this is rarely the suitable metric for a machine
    learning application.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this, identify the most fitting evaluation metric for the model of
    interest and assign it to the scoring parameter. One can find the list of available
    metrics in the package’s [documentation](https://scikit-learn.org/stable/modules/model_evaluation.html).
  prefs: []
  type: TYPE_NORMAL
- en: If none of the provided metrics are suitable, one can also create their own
    custom metric with the [make_scorer](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.make_scorer.html)
    function. This is a useful feature when users favor one type of error over another.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Transform data with pipelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Beginners starting out with Scikit Learn might be used to carrying one transformation
    at a time. This approach entails using the `fit` and `transform` methods multiple
    times on the training and testing set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Transforming data in this manner requires many lines of code and can easily
    lead to mistakes (e.g., using `fit` on the testing set). So, you will be glad
    to know that Scikit Learn offers a tool that facilitates these operations with
    much greater ease: the pipeline.'
  prefs: []
  type: TYPE_NORMAL
- en: The Scikit Learn pipeline is a tool that chains together a series of transformations
    and estimators, enabling users to execute operations with code that is easier
    to write, read, and debug.
  prefs: []
  type: TYPE_NORMAL
- en: I advocate the use of pipelines constantly and will do so again here; they are
    just that good.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, we can use a pipeline object to carry out the previous operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Compared to the previous snippet, the code here is much more readable and makes
    it easy to understand all of the steps in the workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, all the transformations and modeling in the pipeline object can
    be executed on a training set with just a single `fit` method. Moreover, the same
    transformations can be applied prior to generating predictions from the testing
    set using a single `predict` method.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Get familiar with other packages compatible with Scikit Learn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the end, the Scikit Learn package’s wide range of tools can not account for
    every case imaginable.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, it is worth it to familiarize oneself with other packages that are compatible
    with Scikit Learn. These packages contain tools that can be used together with
    Scikit Learn for feature engineering and data modeling.
  prefs: []
  type: TYPE_NORMAL
- en: Two noteworthy examples are the [feature_engine](https://feature-engine.readthedocs.io/en/latest/)
    and [XGBoost](https://xgboost.readthedocs.io/en/stable/python/index.html) packages,
    which boast their own unique transformers and machine learning algorithms that
    can be used with other Scikit Learn tools.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/5072bf85b045aebe810284adb869eee1.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Prateek Katyal](https://unsplash.com/@prateekkatyal?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: The Scikit Learn package has tremendous utility and can be used to tackle all
    kinds of machine learning problems.
  prefs: []
  type: TYPE_NORMAL
- en: However, users must learn to follow certain best practices to reap the most
    benefits from the package.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’ve found this short overview helpful, you may also want to consider
    reading these as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/k-fold-cross-validation-are-you-doing-it-right-e98cdf3e6690?source=post_page-----f232a6ed2756--------------------------------)
    [## K-Fold Cross Validation: Are You Doing It Right?'
  prefs: []
  type: TYPE_NORMAL
- en: Discussing proper (and improper) ways to perform k-fold cross-validation on
    datasets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/k-fold-cross-validation-are-you-doing-it-right-e98cdf3e6690?source=post_page-----f232a6ed2756--------------------------------)
    [](/why-you-should-use-scikit-learn-pipelines-8754b4d1e375?source=post_page-----f232a6ed2756--------------------------------)
    [## Why You Should Use Scikit-Learn Pipelines
  prefs: []
  type: TYPE_NORMAL
- en: This tool takes your code to the next level
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/why-you-should-use-scikit-learn-pipelines-8754b4d1e375?source=post_page-----f232a6ed2756--------------------------------)
    [](/harnessing-randomness-in-machine-learning-59e26e82fdfc?source=post_page-----f232a6ed2756--------------------------------)
    [## Harnessing Randomness in Machine Learning
  prefs: []
  type: TYPE_NORMAL
- en: How “random” should random be?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/harnessing-randomness-in-machine-learning-59e26e82fdfc?source=post_page-----f232a6ed2756--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: I wish you the best of luck in your data science endeavors!
  prefs: []
  type: TYPE_NORMAL
