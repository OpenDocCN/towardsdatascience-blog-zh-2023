- en: 'Shortest Path (Dijkstra’s) Algorithm: A Step-by-Step Python Guide'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最短路径（Dijkstra）算法：一步步的Python指南
- en: 原文：[https://towardsdatascience.com/shortest-path-dijkstras-algorithm-step-by-step-python-guide-896769522752](https://towardsdatascience.com/shortest-path-dijkstras-algorithm-step-by-step-python-guide-896769522752)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/shortest-path-dijkstras-algorithm-step-by-step-python-guide-896769522752](https://towardsdatascience.com/shortest-path-dijkstras-algorithm-step-by-step-python-guide-896769522752)
- en: An update using OSMNX 1.6 and a long-distance path
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用OSMNX 1.6和长距离路径的更新
- en: '[](https://bryanvallejo16.medium.com/?source=post_page-----896769522752--------------------------------)[![Bryan
    R. Vallejo](../Images/fd92974f57c72875cc133a2c959d64ca.png)](https://bryanvallejo16.medium.com/?source=post_page-----896769522752--------------------------------)[](https://towardsdatascience.com/?source=post_page-----896769522752--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----896769522752--------------------------------)
    [Bryan R. Vallejo](https://bryanvallejo16.medium.com/?source=post_page-----896769522752--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://bryanvallejo16.medium.com/?source=post_page-----896769522752--------------------------------)[![Bryan
    R. Vallejo](../Images/fd92974f57c72875cc133a2c959d64ca.png)](https://bryanvallejo16.medium.com/?source=post_page-----896769522752--------------------------------)[](https://towardsdatascience.com/?source=post_page-----896769522752--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----896769522752--------------------------------)
    [Bryan R. Vallejo](https://bryanvallejo16.medium.com/?source=post_page-----896769522752--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----896769522752--------------------------------)
    ·6 min read·Oct 4, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----896769522752--------------------------------)
    ·6分钟阅读·2023年10月4日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/95cc11698ca37362e8ea9166f4856e39.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/95cc11698ca37362e8ea9166f4856e39.png)'
- en: Image by the Author. The resultant shortest path (~350km) in Morocco
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。摩洛哥的最短路径（约350公里）
- en: This well-known algorithm is implemented in the Python library OSMNX and can
    be used to find the shortest path weighted by distance or time between two locations.
    The algorithm uses the OpenStreetMap (OSM) network to either drive, walk, or bike,
    to find the route using the Python library NETWORKX in the background.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个著名的算法在Python库OSMNX中实现，可以用来寻找两个位置之间按距离或时间加权的最短路径。该算法使用OpenStreetMap（OSM）网络，通过Python库NETWORKX在后台寻找驾驶、步行或骑车的路线。
- en: I am writing this update because the parameters of the functions have changed
    a little bit and I have been asked why my code is not working in old blog posts,
    and it is simply because the code was written with older versions of osmnx.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我写这个更新是因为函数的参数稍有变化，且有人询问为什么我的代码在旧博客文章中无法工作，这只是因为代码是用旧版本的osmnx编写的。
- en: The old tutorial contains quite valuable processes, but I also decided to do
    a step-by-step guide so the process of getting the shortest path is more precise
    and the analyst that uses this guide can really get the idea of the process.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 旧教程包含了相当有价值的过程，但我决定做一个一步步的指南，这样获取最短路径的过程会更准确，使用这个指南的分析师可以真正理解整个过程。
- en: Here are the old tutorials if you want to give it a look.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是旧教程，如果你想查看一下。
- en: In Helsinki (Finland), using a different networks
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在芬兰赫尔辛基，使用不同的网络
- en: '[](/shortest-path-algorithm-used-in-osm-street-network-33e0f864f34b?source=post_page-----896769522752--------------------------------)
    [## The shortest path algorithm used in the OSM street network'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/shortest-path-algorithm-used-in-osm-street-network-33e0f864f34b?source=post_page-----896769522752--------------------------------)
    [## OSM街道网络中使用的最短路径算法'
- en: GIS automation tips for shortest path analysis with cars, bikes, and pedestrians
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 车辆、自行车和行人最短路径分析的GIS自动化技巧
- en: towardsdatascience.com](/shortest-path-algorithm-used-in-osm-street-network-33e0f864f34b?source=post_page-----896769522752--------------------------------)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/shortest-path-algorithm-used-in-osm-street-network-33e0f864f34b?source=post_page-----896769522752--------------------------------)
- en: In Tartu (Estonia), using a walking network
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在爱沙尼亚塔尔图，使用步行网络
- en: '[](/shortest-path-algorithm-with-osm-walking-network-6d2863ae96be?source=post_page-----896769522752--------------------------------)
    [## Shortest path algorithm with OSM walking network'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/shortest-path-algorithm-with-osm-walking-network-6d2863ae96be?source=post_page-----896769522752--------------------------------)
    [## 使用OSM步行网络的最短路径算法'
- en: Finding the shortest walking paths with OSM data in Tartu, Estonia
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用OSM数据在爱沙尼亚塔尔图寻找最短步行路径
- en: towardsdatascience.com](/shortest-path-algorithm-with-osm-walking-network-6d2863ae96be?source=post_page-----896769522752--------------------------------)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/shortest-path-algorithm-with-osm-walking-network-6d2863ae96be?source=post_page-----896769522752--------------------------------)
- en: OSM data license
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OSM 数据许可
- en: '**Open Street Map data.** Licensed under [Open Data Commons Open Database License
    (ODbl)](https://opendatacommons.org/licenses/odbl/) or attribution license. Users
    are free to copy, distribute, transmit, and adapt the data as long as it is attributed
    to the author like © [OpenStreetMap](https://www.openstreetmap.org/copyright)
    contributors.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开放街图数据。** 依据 [Open Data Commons Open Database License (ODbl)](https://opendatacommons.org/licenses/odbl/)
    或归属许可授权。用户可以自由复制、分发、传输和修改数据，只要标注作者如 © [OpenStreetMap](https://www.openstreetmap.org/copyright)
    贡献者。'
- en: Introduction
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this practice, I am going to use two locations from Morocco. The practice
    was suggested by one of my readers [Hanae](https://medium.com/u/3b913af53dd0?source=post_page-----896769522752--------------------------------)
    who provided the origin and destination.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实践中，我将使用摩洛哥的两个位置。这个实践由我的一位读者 [Hanae](https://medium.com/u/3b913af53dd0?source=post_page-----896769522752--------------------------------)
    提出，她提供了原点和目的地。
- en: '![](../Images/56e615485d8ee7f84c77f804740603a3.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/56e615485d8ee7f84c77f804740603a3.png)'
- en: Image by the Author. Origin and destination locations.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像。原点和目的地位置。
- en: Coding practice
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编码实践
- en: As I mentioned, I am going to do a step-by-step guide so let's start. Beforehand
    let's import the needed libraries
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我提到的，我将做一个逐步指南，所以让我们开始。在此之前，让我们导入所需的库。
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 1\. Define origin and destination
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 定义原点和目的地
- en: 'Simply, we are going to create geometry objects as Points:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地，我们将创建几何对象作为点：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 2\. Fetch the OSM Graph object
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 提取 OSM 图对象
- en: Then, we will extract the graph that we are going to use for generating the
    Shortest Path. Let's see step by step.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将提取图形，用于生成最短路径。我们逐步来看。
- en: '*Create GeoDataFrames from the origin and destination*'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从原点和目的地创建 GeoDataFrames*'
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Get the Graph that contains the origin and destination*'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*获取包含原点和目的地的图*'
- en: We will use the function *envelope* from Geopandas to use the polygon as a mask
    to fetch the Graph.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Geopandas 的 *envelope* 函数来将多边形用作掩膜以提取图形。
- en: A simple function first.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先一个简单的函数。
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Then, use it and plot the result.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用它并绘制结果。
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/860117b931b26ea0afc47c6788b0f6df.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/860117b931b26ea0afc47c6788b0f6df.png)'
- en: Image by the Author. Graph the contains origin and destination
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像。图包含原点和目的地
- en: 3\. Find the closest nodes of origin and destination
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 找到原点和目的地的最近节点
- en: Get the closest nodes that are part of the network using the origin and destination
    locations. The node’s code can be obtained using the osmnx functions.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 获取使用原点和目的地位置的网络中最接近的节点。节点代码可以使用 osmnx 函数获得。
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can check and notice that we only have codes at the moment.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以检查并注意到我们目前只有代码。
- en: 4\. Find the Shortest Path
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 找到最短路径
- en: Then, use the shortest path functions to obtain the route.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用最短路径函数来获取路线。
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will give back a bunch of node’s code that are part of the route.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一堆路径中节点的代码。
- en: '![](../Images/2b944f8bc3a13ceb44b6c28703f7d798.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2b944f8bc3a13ceb44b6c28703f7d798.png)'
- en: Image by the AuthorNode’s codes
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像节点代码
- en: 5\. Create a Line Geometry from nodes
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 从节点创建 Line Geometry
- en: We will extract the node's geometries from the Graph and create a LineString
    geometry that represents the shortest path
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从图中提取节点的几何形状，并创建一个表示最短路径的 LineString 几何体。
- en: First a function for this.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先为此创建一个函数。
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Get the nodes, and use them in the function.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 获取节点，并在函数中使用它们。
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 6\. Compute distance
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. 计算距离
- en: We are going to measure the route in meters with a Mercator projection. You
    can use the location projection if you want to have something more accurate.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用墨卡托投影来测量路线的米数。如果你想要更准确的结果，可以使用位置投影。
- en: First, a function for this.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为此创建一个函数。
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, use it:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用它：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It will measure the route with ~351.243 meters.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 它将测量约 351.243 米的路线。
- en: 7\. Save network and path
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7\. 保存网络和路径
- en: Save in your local disk the network and path for maps.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 将网络和路径保存到本地磁盘上用于地图。
- en: 'Fetch the network and define GeoDataFrame:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 提取网络并定义 GeoDataFrame：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then store:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后存储：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can use this data to create your own map. For example, this one in QGIS:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这些数据来创建自己的地图。例如，这个在 QGIS 中：
- en: '![](../Images/9de9556b10bae0f2feba3d689ca4c468.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9de9556b10bae0f2feba3d689ca4c468.png)'
- en: Image by the Author. Shortest path and network in QGIS
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像。QGIS 中的最短路径和网络
- en: 8\. Plot results
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8\. 绘制结果
- en: We will check if we are doing our work right by plotting all elements.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过绘制所有元素来检查我们的工作是否正确。
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The result will be as simple as this.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将会是这样的。
- en: '![](../Images/b958f4a828287d34b3780efc21888c7a.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b958f4a828287d34b3780efc21888c7a.png)'
- en: Image by the Author. Shortest path, network, origin, and destination in Matplotlib
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。最短路径、网络、起点和终点在Matplotlib中
- en: Known limitation
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 已知限制
- en: The shortest path is generated by the union of the nodes’ network and the line
    does not really match the road. That is totally OK because what we want is to
    have an approximation. If you are willing to do navigation you should use Google
    API for routing, or any other provider.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最短路径是通过节点网络的联合生成的，线条并不完全匹配道路。这完全没问题，因为我们要的只是一个近似值。如果你需要导航，应该使用Google API进行路由，或其他提供商。
- en: '![](../Images/ce94c815f7c505063eb71b185a23df6b.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ce94c815f7c505063eb71b185a23df6b.png)'
- en: Image by the Author. The line is created by nodes.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。线条是通过节点创建的。
- en: Conclusion
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: The shortest path algorithm using OSMNX gives an approximation of the route
    and can be used broadly for accessibility studies at urban or regional scales.
    The Python library is constantly updated and it is possible that the functions
    or parameters change so it is recommended to continuously update the library versions
    in our workflows.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OSMNX的最短路径算法提供了路线的近似值，并且可以广泛用于城市或区域规模的可达性研究。这个Python库不断更新，函数或参数可能会有所变化，因此建议在我们的工作流程中持续更新库版本。
- en: 'If you want to reach me for questions or customized analysis:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有问题或需要定制分析，欢迎联系我：
- en: '[Bryan R. LinkedIn](https://www.linkedin.com/in/bryanrvallejo/)'
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[Bryan R. LinkedIn](https://www.linkedin.com/in/bryanrvallejo/)'
