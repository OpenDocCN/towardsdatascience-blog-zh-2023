["```py\nsqlite> .mode csv\nsqlite> .import Open_Data_RDW__Gekentekende_voertuigen.csv rdw_data\nsqlite> .quit\n```", "```py\nfrom sqlalchemy import create_engine, MetaData, table, column, select, func\nfrom sqlalchemy import inspectp\nimport pandas as pd\n\nrdw_db = create_engine('sqlite:///rdw_data.db')\n\ntable_name = 'rdw_data'\n\nwith Session(rdw_db) as session:    \n    insp = inspect(rdw_db)\n    columns = insp.get_columns(\"rdw_data\")\n    display(pd.DataFrame(columns))\n```", "```py\nwith Session(rdw_db) as session:  \n    session.execute(text('DROP TABLE IF EXISTS rdw_cars'))\n    session.execute(text('CREATE TABLE rdw_cars(\"index\" INTEGER PRIMARY KEY AUTOINCREMENT, '\n                                                         '\"Model\" TEXT, '\n                                                         '\"Trade name\" TEXT, '\n                                                         '\"License Plate\" TEXT, '\n                                                         '\"Number of Cylinders\" INTEGER, '\n                                                         '\"Catalog price\" INTEGER, '\n                                                         '\"First registration NL\" TEXT, '\n                                                         '\"Is electric\" INTEGER DEFAULT 0)'))\n\n    session.execute(text('BEGIN TRANSACTION'))    \n    session.execute(text('INSERT INTO rdw_cars(\"Model\", \"Trade name\", \"License Plate\", \"Number of Cylinders\", \"Catalog price\", \"First registration NL\") '\n                                           'SELECT '\n                                              '\"Merk\", '\n                                              '\"Handelsbenaming\", '\n                                              '\"Kenteken\", '\n                                              '(CASE WHEN LENGTH(\"Aantal cilinders\") > 0 THEN CAST(\"Aantal cilinders\" as INTEGER) ELSE NULL END), '\n                                              '(CASE WHEN LENGTH(\"Catalogusprijs\") > 0 THEN CAST(\"Catalogusprijs\" as INTEGER) ELSE NULL END), '\n                                              'DATE(SUBSTR(\"Datum eerste tenaamstelling in Nederland\", 1, 4) || \"-\" || SUBSTR(\"Datum eerste tenaamstelling in Nederland\", 5, 2) || \"-\" || SUBSTR(\"Datum eerste tenaamstelling in Nederland\", 7, 2)) '\n                                           ' FROM rdw_data WHERE \"Voertuigsoort\" = \"Personenauto\"'))  \n\n    session.execute(text('COMMIT'))\nâ€‹\n```", "```py\nwith Session(rdw_db) as session:    \n    q = session.execute(text('SELECT COUNT(*) FROM rdw_cars')).scalar()\n    print(\"Cars total:\", q) \n```", "```py\nwith Session(rdw_db) as session:\n    df = pd.read_sql_query(text(\"SELECT * FROM rdw_cars LIMIT 5\"), con=session.connection(), dtype={'Catalog price': pd.UInt32Dtype(), 'Number of Cylinders': pd.UInt32Dtype()})\n    display(df.style.hide(axis=\"index\"))\n```", "```py\nwith Session(rdw_db) as session:\n    request = ('SELECT '\n               ' SUM(CASE WHEN \"Model\" IS NULL OR \"Model\" = \"\" THEN 1 ELSE 0 END) AS model_no_data, '\n               ' SUM(CASE WHEN \"Trade name\" = \"\" THEN 1 ELSE 0 END) AS trade_name_empty, '\n               ' SUM(CASE WHEN \"Trade name\" IS NULL THEN 1 ELSE 0 END) AS trade_name_nulls, '\n               ' SUM(CASE WHEN \"License Plate\" IS NULL OR \"License Plate\" = \"\" THEN 1 ELSE 0 END) AS lp_no_data, '\n               ' SUM(CASE WHEN \"Number of Cylinders\" = 0 THEN 1 ELSE 0 END) AS num_cylinders_zeros, '\n               ' SUM(CASE WHEN \"Number of Cylinders\" IS NULL THEN 1 ELSE 0 END) AS num_cylinders_nulls, '\n               ' SUM(CASE WHEN \"Catalog price\" = 0 THEN 1 ELSE 0 END) AS price_zeros, '\n               ' SUM(CASE WHEN \"Catalog price\" IS NULL THEN 1 ELSE 0 END) AS price_nulls, '\n               ' SUM(CASE WHEN \"First registration NL\" IS NULL THEN 1 ELSE 0 END) AS registration_nulls, '\n               ' COUNT(*) AS total '\n               'FROM rdw_cars')\n\n    df = pd.read_sql(text(request), con=session.connection())\n    display(df.style.hide(axis=\"index\"))\n```", "```py\nwith Session(rdw_db) as session:\n    df = pd.read_sql(text('SELECT \"Model\", \"Trade name\", \"Catalog price\", \"First registration NL\" FROM rdw_cars ORDER BY \"Catalog price\" DESC LIMIT 10'), con = session.connection())\n    display(df)\n```", "```py\nwith Session(rdw_db) as session:\n    df = pd.read_sql_query(text('SELECT \"Model\", COUNT(*) AS Count FROM rdw_cars WHERE \"Model\" LIKE \"%PEUGEOT%\" GROUP BY \"Model\" '), con = session.connection())\n    display(df.style.hide(axis=\"index\"))\n```", "```py\ndef model_normalize(s_val):\n    \"\"\" \"PEUGEOT BOXER/GLOBE-TRAVE \" => \"PEUGEOT\" \"\"\"\n    if s_val and isinstance(s_val, str) and len(s_val) > 0:\n        return s_val.replace(\"-\", \" \").replace(\"/\", \" \").split()[0].upper().strip()\n    return None\n```", "```py\ndef name_normalize(model: str, trade_name: str):\n    \"\"\" Remove duplicates and convert the name to upper case \"\"\"\n    if isinstance(trade_name, str) and len(trade_name) > 0:\n        name = trade_name.upper().strip()\n        # Remove duplicates from model and trade name: \n        # (\"TESLA\", \"TESLA MODEL 3\") => (\"TESLA\", \"MODEL 3\")\n        if name.split()[0] == model:\n            # \"TESLA MODEL 3\" => [TESLA, MODEL, 3] => \"MODEL 3\"\n            return ' '.join(name.split()[1:])  \n        return name\n    return None\n```", "```py\nelectric_cars = {\n    \"AIWAYS\": ['U5', 'U6'],\n    \"AUDI\": ['E-TRON'],\n    \"BMW\": ['I3', 'I4', 'I7', 'IX'],\n    \"CITROEN\": ['E-C4'],\n    \"FIAT\": ['500E', 'ELETTRA'],\n    \"FORD\": ['MACH-E'],\n    \"HONDA\": ['\"E\"', '\"E ADVANCE\"'],  \n    \"HYUNDAI\": ['IONIQ', 'KONA'],\n    \"JAGUAR\": ['I-PACE'],\n    \"KIA\": ['NIRO', 'E-SOUL'],\n    \"LEXUS\": ['RZ'],\n    \"LUCID\": ['AIR'],\n    \"MAZDA\": ['MX-30'],\n    \"MERCEDES\": ['EQA', 'EQB', 'EQC', 'EQS', 'EQV'],\n    \"MG\": ['ZS EV'],\n    \"MINI\": ['COOPER SE'],\n    \"NISSAN\": ['ALTRA', 'ARIYA', 'EVALIA', 'LEAF', 'NUVU'],\n    \"OPEL\": ['AMPERA-E', 'COMBO-E', 'CORSA-E', 'MOKKA-E', 'VIVARO-E', 'ZAFIRA-E'],\n    \"PEUGEOT\": ['E-208', 'E-2008', 'E-RIFTER', 'E-TRAVELLER'],\n    \"POLESTAR\": ['2', '3'],\n    \"PORSCHE\": ['TAYCAN'],\n    \"RENAULT\": ['MASTER', 'TWINGO', 'KANGOO ELEC', 'ZOE'],\n    \"SKODA\": ['ENYAQ'],\n    \"SMART\": ['EQ'],\n    \"TESLA\": [''],\n    \"TOYOTA\": ['BZ'],\n    \"VOLKSWAGEN\": ['ID.3', 'ID.4', 'ID.5', 'E-GOLF'],\n    \"VOLVO\": ['C40', 'XC40']\n}\n\ndef check_is_electric(model: str, trade_name: str, cylinders: int):\n    \"\"\" Determine if the car is electric \"\"\"\n    if isinstance(cylinders, int) and cylinders > 0:\n        return False\n    for e_model, e_names in electric_cars.items():\n        if model == e_model:\n            for e_name in e_names:\n                if trade_name and (e_name in trade_name or e_name.replace('\"', '') == trade_name):\n                    return True\n                if trade_name is None and len(e_name) == 0:\n                    return True\n    return False\n```", "```py\ndf[\"Model\"] = df['Model'].map(lambda s: model_normalize(s))\n```", "```py\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy import String, Integer, Date, Column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Car(Base):\n    __tablename__ = \"rdw_cars\"\n    index = Column(\"index\", Integer, primary_key=True) \n    license_plate = Column(\"License Plate\", String)\n    model = Column(\"Model\", String) \n    trade_name = Column(\"Trade name\", String) \n    num_cylinders = Column(\"Number of Cylinders\", Integer) \n    first_registration = Column(\"First registration NL\", Date) \n    price = Column(\"Catalog price\", Integer) \n    is_electric = Column(\"Is electric\", Integer)    \n\n    def model_normalize(self):\n        \"\"\" \"PEUGEOT BOXER/GLOBE-TRAVE \" => \"PEUGEOT\" \"\"\"\n        if self.model and isinstance(self.model, str) and len(self.model) > 0:\n            self.model = self.model.replace(\"-\", \" \").replace(\"/\", \" \").split()[0].upper().strip()\n\n    def name_normalize(self):\n        \"\"\" Remove duplicates from model and trade name: (\"TESLA\", \"TESLA MODEL 3\") => (\"TESLA\", \"MODEL 3\") \"\"\"\n        if isinstance(self.trade_name, str) and len(self.trade_name) > 0:\n            name = self.trade_name.upper().strip()\n            if name.split()[0] == self.model:\n                # \"TESLA MODEL 3\" => [TESLA, MODEL, 3] => \"MODEL 3\"\n                self.trade_name = ' '.join(name.split()[1:])  \n            else:\n                self.trade_name = name\n\n    def check_electric(self):\n        self.is_electric = check_is_electric(self.model, self.trade_name, self.num_cylinders)\n```", "```py\nwith Session(rdw_db) as session:\n    model = \"BMW\"\n    limit = 5\n    df = pd.read_sql_query(text(f'SELECT \"Model\", \"Trade name\", \"Catalog price\", \"First registration NL\" FROM rdw_cars WHERE Model = \"{model}\" ORDER BY \"Catalog price\" DESC LIMIT {limit}'), \n                           con=session.connection())\n    display(df.style.hide(axis=\"index\"))\n```", "```py\nwith Session(rdw_db) as session:\n    model = \"BMW\"\n    limit = 5\n    df = pd.read_sql_query(select(Car.model, Car.trade_name, Car.price, Car.first_registration).filter(Car.model == model).order_by(Car.price.desc()).limit(limit), \n                           con=session.connection())\n    display(df.style.hide(axis=\"index\"))\n```", "```py\nwith Session(rdw_db) as session:\n    cars_total = session.query(Car).count()\n\n    index = 0\n    batch_size = 25000\n    while True:\n        pos1, pos2 = index*batch_size, (index + 1)*batch_size\n        if index % 20 == 0:\n            print(f\"Processing {pos1} to {pos2}, {100*index*batch_size//cars_total}%...\")\n\n        cars = session.query(Car).filter(Car.index.between(pos1, pos2)).all()\n        if len(cars) == 0:\n            break\n        for car in cars:\n            car.model_normalize()\n            car.name_normalize()\n            car.check_electric()\n\n        session.flush()\n        index += 1\n\n    session.commit()\n```", "```py\nwith Session(rdw_db) as session:\n    c_total = session.query(Car).count()\n    print(f\"Cars total: {c_total}\")\n    c_el = session.query(Car).filter(Car.is_electric == 1).count()\n    print(f\"Cars electric: {c_el} ({100*c_el/c_total:.2f}%)\")\n\n    pm = session.query(func.avg(Car.price)).scalar()\n    print(\"Price mean:\", pm)\n\n    pm_el = session.query(func.avg(Car.price)).filter(Car.is_electric == 1).scalar()\n    print(\"Electric cars price mean:\", pm_el)\n```", "```py\n prices = session.query(Car.price).filter(Car.price != None).all()\n    print(\"All cars percentiles [5, 50, 95]:\", np.percentile(prices, [5, 50, 95]))\n\n    prices_el = session.query(Car.price).filter((Car.price != None) & (Car.is_electric == 1)).all()\n    print(\"Electric cars percentiles [5, 50, 95]:\", np.percentile(prices_el, [5, 50, 95]))\n```", "```py\n num_total = session.query(Car).filter(Car.price != None).count()\n    p5 = session.query(Car.price).filter(Car.price != None).order_by(Car.price).offset(num_total*5/100 - 1).limit(1).scalar() \n    p50 = session.query(Car.price).filter(Car.price != None).order_by(Car.price).offset(num_total*50/100 - 1).limit(1).scalar() \n    p95 = session.query(Car.price).filter(Car.price != None).order_by(Car.price).offset(num_total*95/100 - 1).limit(1).scalar() \n    print(\"All cars percentiles [5, 50, 95]:\", p5, p50, p95)\n\n    num_el = session.query(Car).filter((Car.price != None) & (Car.is_electric == 1)).count()\n    p5 = session.query(Car.price).filter((Car.price != None) & (Car.is_electric == 1)).order_by(Car.price).offset(num_el*5/100 - 1).limit(1).scalar() \n    p50 = session.query(Car.price).filter((Car.price != None) & (Car.is_electric == 1)).order_by(Car.price).offset(num_el*50/100 - 1).limit(1).scalar() \n    p95 = session.query(Car.price).filter((Car.price != None) & (Car.is_electric == 1)).order_by(Car.price).offset(num_el*95/100 - 1).limit(1).scalar() \n    print(\"Electric cars percentiles [5, 50, 95]:\", p5, p50, p95)\n```", "```py\nwith Session(rdw_db) as session:        \n    n_top = 20\n\n    # Group by car model\n    models_amout = session.query(Car.model, func.count(Car.model)).filter(Car.is_electric == 1).group_by(Car.model).order_by(desc(func.count(Car.model))).limit(n_top).all()[::-1]\n\n    # Unzip array [('TESLA', 65896), ('VOLKSWAGEN', 28559)] to 2 parts\n    models, amount = zip(*models_amout)\n\n    # Show\n    p = figure(y_range=models, width=1200, height=500, title=\"Top-%d electric car manufacturers in the Netherlands (data 2023)\" % n_top)\n    p.hbar(right=amount, y=models, height=0.8, color=Viridis256[:n_top])\n    p.xgrid.grid_line_color = None\n    p.x_range.start = 0\n    p.below[0].formatter.use_scientific = False\n    p.xaxis.axis_label = \"Cars total\"\n    show(p)\n```", "```py\n models_amout = session.query(Car.trade_name, func.count(Car.trade_name)).filter(Car.model == \"TESLA\").group_by(Car.trade_name).order_by(desc(func.count(Car.trade_name))).order_by(Car.trade_name).all()[::-1]\n    ...\n```", "```py\nwith Session(rdw_db) as session:\n    regs_amount = session.query(Car.first_registration, func.count(Car.first_registration)).filter(Car.is_electric == 1).group_by(Car.first_registration).order_by(Car.first_registration).all()\n\n    df = pd.DataFrame(regs_amount, columns =['First registration NL', 'Amount'])\n    df[\"First registration NL\"] = df['First registration NL'].map(lambda d: datetime.datetime(d.year, d.month, d.day))\n    df[\"Quarter\"] = df['First registration NL'].dt.to_period('Q')\n\n    data_per_quarter = df.groupby(['Quarter'], as_index=False)[\"Amount\"].sum()\n    dates = data_per_quarter['Quarter']\n    amount = data_per_quarter['Amount']\n\n    p = figure(x_axis_type='datetime', width=1600, height=500, \n               title=f\"Electric car registrations in the Netherlands, 1992-2022\")\n    p.vbar(x=dates, top=amount, width=datetime.timedelta(days=3*22), line_color='black')\n    p.xaxis[0].ticker.desired_num_ticks = 20\n    p.yaxis.axis_label = \"Cars total\"\n    show(p)\n```", "```py\nwith Session(rdw_db) as session:\n    request_models = session.query(Car.model).filter(Car.is_electric == 1).group_by(Car.model).all()\n\n    def q0(x):\n        return x.quantile(0.01)\n\n    def q1(x):\n        return x.quantile(0.25)\n\n    def q3(x):\n        return x.quantile(0.75)\n\n    def q4(x):\n        return x.quantile(0.99)\n\n    models_data = {}\n    for m in request_models:\n        model_name = m[0]  # (AIWAYS,) => AIWAYS\n        print(\"Processing\", model_name)\n        request_model = session.query(Car.price).filter((Car.is_electric == 1) & (Car.price > 0) & (Car.model == model_name)).all()\n        df = pd.DataFrame(request_model)\n        agg_data = {'price': ['size', 'min', q0, q1, 'median', q3, q4, 'max']}        \n        models_data[model_name] = df.agg(agg_data)[\"price\"]\n\n    df = pd.concat(models_data, axis=1).transpose()\n    display(df)\n```", "```py\n # Sort models by price\n    df = df.sort_values(by='median', ascending=True)\n\n    models = df.index.values    \n    v_min = df[\"q0\"].values\n    q1 = df[\"q1\"].values\n    q3 = df[\"q3\"].values\n    v_max = df[\"q4\"].values\n\n    # Draw\n    palette = (Inferno10 + Magma10 + Plasma10 + Viridis10)[:models.shape[0]]\n    source = ColumnDataSource(data=dict(models=models, \n                                        bottom=q1, \n                                        top=q3, \n                                        color=palette, \n                                        lower=v_min, \n                                        upper=v_max))\n\n    p = figure(x_range=models, width=1900, height=500, title=\"Electric car prices distribution in the Netherlands\")\n    whisker = Whisker(base=\"models\", upper=\"upper\", lower=\"lower\", source=source)\n    p.add_layout(whisker)\n    p.vbar(x='models', top='top', bottom='bottom', width=0.9, color='color', line_color=\"black\", source=source)\n    p.left[0].formatter.use_scientific = False\n    p.y_range.start = 0\n    show(p)\n```"]