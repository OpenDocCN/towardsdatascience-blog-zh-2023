["```py\n ##Import packages\nimport openai\nimport pandas as pd\nimport re\nimport contextlib\nimport io\nimport tiktoken\nfrom openai.embeddings_utils import get_embedding\nfrom sklearn.cluster import KMeans\nfrom sklearn.manifold import TSNE\n\n##Read data\nfile_name = 'path_to_file'\ndf = pd.read_csv(file_name)\n\n##Set parameters\nembedding_model = \"text-embedding-ada-002\"\nembedding_encoding = \"cl100k_base\"  # this the encoding for text-embedding-ada-002\nmax_tokens = 8000  # the maximum for text-embedding-ada-002 is 8191\ntop_n = 1000\nencoding = tiktoken.get_encoding(embedding_encoding)\ncol_embedding = 'embedding'\nn_tsne=2\nn_iter = 1000\n\n##Gets the embedding from OpenAI\ndef get_embedding(text, model):\n  openai.api_key = \"YOUR_OPENAPI_KEY\"\n  text = text.replace(\"\\n\", \" \")\n  return openai.Embedding.create(input = [text], model=model)['data'][0]['embedding']\n\ncol_txt = 'Review'\ndf[\"n_tokens\"] = df[col_txt].apply(lambda x: len(encoding.encode(x)))\ndf = df[df.n_tokens <= max_tokens].tail(top_n)\ndf = df[df.n_tokens > 0].reset_index(drop=True) ##Remove if there no tokens, for example blank lines\ndf[col_embedding] = df[col_txt].apply(lambda x: get_embedding(x, model='text-embedding-ada-002'))\nmatrix = np.array(df[col_embedding].to_list())\n\n##Make clustering\nkmeans_model = KMeans(n_clusters=n_clusters,random_state=0)\nkmeans = kmeans_model.fit(matrix)\nkmeans_clusters = kmeans.predict(matrix)\n\n#TSNE\ntsne_model = TSNE(n_components=n_tsne, verbose=0, random_state=42, n_iter=n_iter,init='random')\ntsne_out = tsne_model.fit_transform(matrix)\n```"]