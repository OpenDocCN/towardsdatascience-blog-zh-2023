- en: Complete Implementation of a Mini VGG Network for Image Recognition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/complete-implementation-of-a-mini-vgg-network-for-image-recognition-849299480356](https://towardsdatascience.com/complete-implementation-of-a-mini-vgg-network-for-image-recognition-849299480356)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/4e4dcec20a06722d2ced502b9d033988.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Guillaume de Germain](https://unsplash.com/@guillaumedegermain?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: A deep Convolutional Neural Network for more efficient Image Recognition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://rashida00.medium.com/?source=post_page-----849299480356--------------------------------)[![Rashida
    Nasrin Sucky](../Images/42bd057e8eca255907c43c29a498f2ca.png)](https://rashida00.medium.com/?source=post_page-----849299480356--------------------------------)[](https://towardsdatascience.com/?source=post_page-----849299480356--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----849299480356--------------------------------)
    [Rashida Nasrin Sucky](https://rashida00.medium.com/?source=post_page-----849299480356--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----849299480356--------------------------------)
    ·7 min read·Feb 27, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: 'VGG Network is the basis for one of the most popular image recognition techniques.
    It is worth learning because it opens a lot of avenues. You need to understand
    how a Convolutional Neural Network (CNN) to understand VGGNet. If you are not
    familiar with CNN architecture please feel free to go through this tutorial first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/convolutional-neural-network-good-understanding-of-the-layers-and-an-image-classification-example-a280bc02c13e?source=post_page-----849299480356--------------------------------)
    [## Convolutional Neural Network: Good Understanding of the Layers and an Image
    Classification Example'
  prefs: []
  type: TYPE_NORMAL
- en: Packed with a lot of Information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/convolutional-neural-network-good-understanding-of-the-layers-and-an-image-classification-example-a280bc02c13e?source=post_page-----849299480356--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will only focus on the implementation part of the VGGNet.
    So we will move pretty fast here.
  prefs: []
  type: TYPE_NORMAL
- en: About VGG Network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: VGGNet is a kind of Convolutional Neural Network (CNN) that can extract features
    more successfully. In VGGNet, we stack multiple Convolution layers. VGGNets can
    be shallow or deep. In shallow VGGNet, usually, only two sets of four convolution
    layers are added as we will see soon. And in deep VGGNet, more than four Convolution
    layers can be added. Two commonly used deep VGGNet is VGG16 which uses 16 layers
    a total and VGG19 which uses a total of 19 layers. We can add a batch normalization
    layer or avoid it. But I will use it in this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about the architecture more in this link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://viso.ai/deep-learning/vgg-very-deep-convolutional-networks/?source=post_page-----849299480356--------------------------------)
    [## VGG Very Deep Convolutional Networks (VGGNet) - What you need to know - viso.ai'
  prefs: []
  type: TYPE_NORMAL
- en: We use cookies to enhance your browsing experience, serve personalized ads or
    content, and analyze our traffic. By…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: viso.ai](https://viso.ai/deep-learning/vgg-very-deep-convolutional-networks/?source=post_page-----849299480356--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '**We are going to work on a mini VGGNet today. So it will be much simpler and
    easier to run but still powerful for a lot of use cases.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: One important characteristic of miniVGGNet is, **it uses all 3x3 filters**.
    That’s the reason it can generalize so well. Let’s just get started and build
    a mini VGGNet in Keras and TensorFlow.
  prefs: []
  type: TYPE_NORMAL
- en: I used Google Colaboratory notebook and enabled GPU for this. Otherwise, the
    training is very slow.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Mini VGG Network Development, Training, and Evaluation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Time to start working. We will experiment with it a little to demonstrate how
    we can play with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the necessary imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: That’s a lot of imports!
  prefs: []
  type: TYPE_NORMAL
- en: We will use the **cifar-10 dataset** from TensorFlow which is a public dataset
    available in the TensorFlow library.
  prefs: []
  type: TYPE_NORMAL
- en: I used two different networks just as an experiment. The first one is the popular
    one. I am saying popular because I found this [architecture in Kaggle](https://www.kaggle.com/code/akshat4112/minivggnet-from-scratch-on-cifar-10-with-bn)
    and some other tutorials.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let’s load and prepare our cifar-10 dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The cifar-10 dataset has 10 labels. These are the labels in the cifar-10 dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the LabelBinarizer to binarize the labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Compiling the model here. The evaluation metric is “accuracy” and we will run
    for 10 epochs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: After 10 epochs accuracy becomes 79.46% on training data and 78.98% on validation
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping this in mind, I wanted to change a few things in this network and see
    the results. Let’s redefine the network above. I used 64 filters all throughout,
    256 neurons in the dense layer, and 40% dropout in the last dropout layer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the new mini VGG network again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We will use the same parameters for optimization and running the model. But
    I used 20 epochs here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If you notice, after 10 epochs, the accuracy was slightly higher than the previous
    network and after 20 epochs the accuracy is really good. 88.45% on training data
    and 81.99% on validation data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Presenting the training and validation accuracies and training and validation
    losses in the same plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1df32aefed9f91e696dd6346ac85b28f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: Training loss went down very smoothly, and validation loss went down as well
    with some bumps.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please feel free to experiment with it. Try different parameters as per the
    project and see how it works for you. We will work on a deep network later.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to follow me on [Twitter](https://twitter.com/rashida048) and like
    my [Facebook](https://www.facebook.com/rashida.smith.161) page.
  prefs: []
  type: TYPE_NORMAL
- en: More Reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](/easy-method-of-edge-detection-in-opencv-python-db26972deb2d?source=post_page-----849299480356--------------------------------)
    [## Easy Method of Edge Detection in OpenCV Python'
  prefs: []
  type: TYPE_NORMAL
- en: Using Canny Edge Detection Efficiently
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/easy-method-of-edge-detection-in-opencv-python-db26972deb2d?source=post_page-----849299480356--------------------------------)
    [](/how-to-perform-image-segmentation-with-thresholding-using-opencv-b2a78abb07ac?source=post_page-----849299480356--------------------------------)
    [## How to Perform Image Segmentation with Thresholding Using OpenCV
  prefs: []
  type: TYPE_NORMAL
- en: Simple, Otsu, and Adaptive Thresholding Implementation with Examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-perform-image-segmentation-with-thresholding-using-opencv-b2a78abb07ac?source=post_page-----849299480356--------------------------------)
    [](/how-to-define-custom-layer-activation-function-and-loss-function-in-tensorflow-bdd7e78eb67?source=post_page-----849299480356--------------------------------)
    [## How to Define Custom Layer, Activation Function, and Loss Function in TensorFlow
  prefs: []
  type: TYPE_NORMAL
- en: Step-by-step explanation and examples with complete code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-define-custom-layer-activation-function-and-loss-function-in-tensorflow-bdd7e78eb67?source=post_page-----849299480356--------------------------------)
    [](/a-step-by-step-tutorial-to-develop-a-multi-output-model-in-tensorflow-ec9f13e5979c?source=post_page-----849299480356--------------------------------)
    [## A Step-by-Step Tutorial to Develop a Multi-Output Model in TensorFlow
  prefs: []
  type: TYPE_NORMAL
- en: With complete code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/a-step-by-step-tutorial-to-develop-a-multi-output-model-in-tensorflow-ec9f13e5979c?source=post_page-----849299480356--------------------------------)
    [](/regression-in-tensorflow-using-both-sequential-and-function-apis-314e74b537ca?source=post_page-----849299480356--------------------------------)
    [## Regression in TensorFlow Using Both Sequential and Function APIs
  prefs: []
  type: TYPE_NORMAL
- en: Demonstration of a Few Different Types of Model Structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/regression-in-tensorflow-using-both-sequential-and-function-apis-314e74b537ca?source=post_page-----849299480356--------------------------------)
  prefs: []
  type: TYPE_NORMAL
