- en: Complete Implementation of a Mini VGG Network for Image Recognition
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完整实现一个用于图像识别的迷你 VGG 网络
- en: 原文：[https://towardsdatascience.com/complete-implementation-of-a-mini-vgg-network-for-image-recognition-849299480356](https://towardsdatascience.com/complete-implementation-of-a-mini-vgg-network-for-image-recognition-849299480356)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/complete-implementation-of-a-mini-vgg-network-for-image-recognition-849299480356](https://towardsdatascience.com/complete-implementation-of-a-mini-vgg-network-for-image-recognition-849299480356)
- en: '![](../Images/4e4dcec20a06722d2ced502b9d033988.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4e4dcec20a06722d2ced502b9d033988.png)'
- en: Photo by [Guillaume de Germain](https://unsplash.com/@guillaumedegermain?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Guillaume de Germain](https://unsplash.com/@guillaumedegermain?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: A deep Convolutional Neural Network for more efficient Image Recognition
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于更高效图像识别的深度卷积神经网络
- en: '[](https://rashida00.medium.com/?source=post_page-----849299480356--------------------------------)[![Rashida
    Nasrin Sucky](../Images/42bd057e8eca255907c43c29a498f2ca.png)](https://rashida00.medium.com/?source=post_page-----849299480356--------------------------------)[](https://towardsdatascience.com/?source=post_page-----849299480356--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----849299480356--------------------------------)
    [Rashida Nasrin Sucky](https://rashida00.medium.com/?source=post_page-----849299480356--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://rashida00.medium.com/?source=post_page-----849299480356--------------------------------)[![Rashida
    Nasrin Sucky](../Images/42bd057e8eca255907c43c29a498f2ca.png)](https://rashida00.medium.com/?source=post_page-----849299480356--------------------------------)[](https://towardsdatascience.com/?source=post_page-----849299480356--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----849299480356--------------------------------)
    [Rashida Nasrin Sucky](https://rashida00.medium.com/?source=post_page-----849299480356--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----849299480356--------------------------------)
    ·7 min read·Feb 27, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----849299480356--------------------------------)
    ·7 分钟阅读·2023 年 2 月 27 日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: 'VGG Network is the basis for one of the most popular image recognition techniques.
    It is worth learning because it opens a lot of avenues. You need to understand
    how a Convolutional Neural Network (CNN) to understand VGGNet. If you are not
    familiar with CNN architecture please feel free to go through this tutorial first:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: VGG 网络是最流行的图像识别技术之一的基础。它值得学习，因为它打开了许多新的领域。要理解 VGGNet，你需要了解卷积神经网络（CNN）。如果你不熟悉
    CNN 架构，请先阅读本教程：
- en: '[](/convolutional-neural-network-good-understanding-of-the-layers-and-an-image-classification-example-a280bc02c13e?source=post_page-----849299480356--------------------------------)
    [## Convolutional Neural Network: Good Understanding of the Layers and an Image
    Classification Example'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/convolutional-neural-network-good-understanding-of-the-layers-and-an-image-classification-example-a280bc02c13e?source=post_page-----849299480356--------------------------------)
    [## 卷积神经网络：对层的良好理解及图像分类示例'
- en: Packed with a lot of Information
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内容丰富
- en: towardsdatascience.com](/convolutional-neural-network-good-understanding-of-the-layers-and-an-image-classification-example-a280bc02c13e?source=post_page-----849299480356--------------------------------)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/convolutional-neural-network-good-understanding-of-the-layers-and-an-image-classification-example-a280bc02c13e?source=post_page-----849299480356--------------------------------)
- en: In this article, we will only focus on the implementation part of the VGGNet.
    So we will move pretty fast here.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将只关注 VGGNet 的实现部分。因此，我们将在这里快速进行。
- en: About VGG Network
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于 VGG 网络
- en: VGGNet is a kind of Convolutional Neural Network (CNN) that can extract features
    more successfully. In VGGNet, we stack multiple Convolution layers. VGGNets can
    be shallow or deep. In shallow VGGNet, usually, only two sets of four convolution
    layers are added as we will see soon. And in deep VGGNet, more than four Convolution
    layers can be added. Two commonly used deep VGGNet is VGG16 which uses 16 layers
    a total and VGG19 which uses a total of 19 layers. We can add a batch normalization
    layer or avoid it. But I will use it in this tutorial.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: VGGNet 是一种可以更成功地提取特征的卷积神经网络（CNN）。在 VGGNet 中，我们堆叠了多个卷积层。VGGNet 可以是浅层的，也可以是深层的。在浅层
    VGGNet 中，通常仅添加两组四个卷积层，如我们将很快看到的那样。而在深层 VGGNet 中，可以添加超过四个卷积层。两个常用的深层 VGGNet 是 VGG16，它总共使用
    16 层，以及 VGG19，它总共使用 19 层。我们可以添加一个批量归一化层，也可以不添加。但在本教程中我将使用它。
- en: 'You can read more about the architecture more in this link:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过这个链接阅读更多关于架构的信息：
- en: '[](https://viso.ai/deep-learning/vgg-very-deep-convolutional-networks/?source=post_page-----849299480356--------------------------------)
    [## VGG Very Deep Convolutional Networks (VGGNet) - What you need to know - viso.ai'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://viso.ai/deep-learning/vgg-very-deep-convolutional-networks/?source=post_page-----849299480356--------------------------------)
    [## VGG非常深的卷积网络 (VGGNet) - 你需要知道的 - viso.ai'
- en: We use cookies to enhance your browsing experience, serve personalized ads or
    content, and analyze our traffic. By…
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们使用cookie来提升您的浏览体验、提供个性化广告或内容，并分析我们的流量。通过…
- en: viso.ai](https://viso.ai/deep-learning/vgg-very-deep-convolutional-networks/?source=post_page-----849299480356--------------------------------)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: viso.ai](https://viso.ai/deep-learning/vgg-very-deep-convolutional-networks/?source=post_page-----849299480356--------------------------------)
- en: '**We are going to work on a mini VGGNet today. So it will be much simpler and
    easier to run but still powerful for a lot of use cases.**'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**今天我们将研究mini VGGNet。因此，它会更简单、更容易运行，但对于许多用例仍然很强大。**'
- en: One important characteristic of miniVGGNet is, **it uses all 3x3 filters**.
    That’s the reason it can generalize so well. Let’s just get started and build
    a mini VGGNet in Keras and TensorFlow.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: miniVGGNet的一个重要特点是**它使用所有的3x3滤波器**。这就是它能够如此出色地泛化的原因。让我们开始在Keras和TensorFlow中构建一个mini
    VGGNet。
- en: I used Google Colaboratory notebook and enabled GPU for this. Otherwise, the
    training is very slow.
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我使用了Google Colaboratory笔记本，并启用了GPU。否则，训练速度非常慢。
- en: Mini VGG Network Development, Training, and Evaluation
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mini VGG网络开发、训练和评估
- en: Time to start working. We will experiment with it a little to demonstrate how
    we can play with it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在开始工作吧。我们将对其进行一些实验，以展示如何使用它。
- en: 'These are the necessary imports:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是必要的导入：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That’s a lot of imports!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些导入文件真不少！
- en: We will use the **cifar-10 dataset** from TensorFlow which is a public dataset
    available in the TensorFlow library.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用**cifar-10数据集**，这是一个在TensorFlow库中提供的公共数据集。
- en: I used two different networks just as an experiment. The first one is the popular
    one. I am saying popular because I found this [architecture in Kaggle](https://www.kaggle.com/code/akshat4112/minivggnet-from-scratch-on-cifar-10-with-bn)
    and some other tutorials.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了两个不同的网络作为实验。第一个是流行的。我之所以说流行，是因为我在[Kaggle](https://www.kaggle.com/code/akshat4112/minivggnet-from-scratch-on-cifar-10-with-bn)和其他一些教程中找到了这个[架构]。
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let’s load and prepare our cifar-10 dataset.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们加载并准备我们的cifar-10数据集。
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The cifar-10 dataset has 10 labels. These are the labels in the cifar-10 dataset:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: cifar-10数据集有10个标签。这些是cifar-10数据集中的标签：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Using the LabelBinarizer to binarize the labels:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用LabelBinarizer将标签二值化：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Compiling the model here. The evaluation metric is “accuracy” and we will run
    for 10 epochs.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里编译模型。评估指标是“准确率”，我们将运行10个周期。
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is the result:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After 10 epochs accuracy becomes 79.46% on training data and 78.98% on validation
    data.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 经过10个周期后，训练数据的准确率为79.46%，验证数据的准确率为78.98%。
- en: Keeping this in mind, I wanted to change a few things in this network and see
    the results. Let’s redefine the network above. I used 64 filters all throughout,
    256 neurons in the dense layer, and 40% dropout in the last dropout layer.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，我想对这个网络做一些更改，看看结果如何。让我们重新定义上面的网络。我在整个网络中使用了64个滤波器，密集层中有256个神经元，最后一个dropout层中有40%的dropout。
- en: 'Here is the new mini VGG network again:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是新的mini VGG网络：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We will use the same parameters for optimization and running the model. But
    I used 20 epochs here.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用相同的优化参数和运行模型。但这里我使用了20个周期。
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here are the results:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you notice, after 10 epochs, the accuracy was slightly higher than the previous
    network and after 20 epochs the accuracy is really good. 88.45% on training data
    and 81.99% on validation data.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意到，经过10个周期后，准确率略高于之前的网络，经过20个周期后准确率非常好。训练数据的准确率为88.45%，验证数据的准确率为81.99%。
- en: 'Presenting the training and validation accuracies and training and validation
    losses in the same plot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一图表中展示训练和验证准确率以及训练和验证损失：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/1df32aefed9f91e696dd6346ac85b28f.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1df32aefed9f91e696dd6346ac85b28f.png)'
- en: Image By Author
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Training loss went down very smoothly, and validation loss went down as well
    with some bumps.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 训练损失平稳下降，验证损失也有一些波动地下降。
- en: Conclusion
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Please feel free to experiment with it. Try different parameters as per the
    project and see how it works for you. We will work on a deep network later.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请随意进行实验。根据项目尝试不同的参数，看看效果如何。我们稍后将研究一个深度网络。
- en: Feel free to follow me on [Twitter](https://twitter.com/rashida048) and like
    my [Facebook](https://www.facebook.com/rashida.smith.161) page.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: More Reading
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](/easy-method-of-edge-detection-in-opencv-python-db26972deb2d?source=post_page-----849299480356--------------------------------)
    [## Easy Method of Edge Detection in OpenCV Python'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Using Canny Edge Detection Efficiently
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/easy-method-of-edge-detection-in-opencv-python-db26972deb2d?source=post_page-----849299480356--------------------------------)
    [](/how-to-perform-image-segmentation-with-thresholding-using-opencv-b2a78abb07ac?source=post_page-----849299480356--------------------------------)
    [## How to Perform Image Segmentation with Thresholding Using OpenCV
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Simple, Otsu, and Adaptive Thresholding Implementation with Examples
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-perform-image-segmentation-with-thresholding-using-opencv-b2a78abb07ac?source=post_page-----849299480356--------------------------------)
    [](/how-to-define-custom-layer-activation-function-and-loss-function-in-tensorflow-bdd7e78eb67?source=post_page-----849299480356--------------------------------)
    [## How to Define Custom Layer, Activation Function, and Loss Function in TensorFlow
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Step-by-step explanation and examples with complete code
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-define-custom-layer-activation-function-and-loss-function-in-tensorflow-bdd7e78eb67?source=post_page-----849299480356--------------------------------)
    [](/a-step-by-step-tutorial-to-develop-a-multi-output-model-in-tensorflow-ec9f13e5979c?source=post_page-----849299480356--------------------------------)
    [## A Step-by-Step Tutorial to Develop a Multi-Output Model in TensorFlow
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: With complete code
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/a-step-by-step-tutorial-to-develop-a-multi-output-model-in-tensorflow-ec9f13e5979c?source=post_page-----849299480356--------------------------------)
    [](/regression-in-tensorflow-using-both-sequential-and-function-apis-314e74b537ca?source=post_page-----849299480356--------------------------------)
    [## Regression in TensorFlow Using Both Sequential and Function APIs
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Demonstration of a Few Different Types of Model Structure
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/regression-in-tensorflow-using-both-sequential-and-function-apis-314e74b537ca?source=post_page-----849299480356--------------------------------)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
