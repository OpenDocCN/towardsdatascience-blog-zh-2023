- en: 'Design Patterns with Python for Machine Learning Engineers: Builder'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/design-patterns-with-python-for-machine-learning-engineers-builder-45b8e749f134](https://towardsdatascience.com/design-patterns-with-python-for-machine-learning-engineers-builder-45b8e749f134)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/99232beba3fbbac79e36336d6ca78b6d.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Anton Maksimov 5642.su](https://unsplash.com/@juvnsky?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to use the Builder design pattern to enhance your code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@marcellopoliti?source=post_page-----45b8e749f134--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----45b8e749f134--------------------------------)[](https://towardsdatascience.com/?source=post_page-----45b8e749f134--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----45b8e749f134--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----45b8e749f134--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----45b8e749f134--------------------------------)
    ·6 min read·Oct 12, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An essential skill for those involved in AI development is to write clean, reusable
    code. Therefore, today I will introduce another design pattern in Python using
    [Deepnote](https://deepnote.com/).
  prefs: []
  type: TYPE_NORMAL
- en: It doesn’t matter how good you are at Deep Learning topics, statistics or anything
    else, **if your code is not clean and easily reusable you will never be able to
    develop something that will have a major impact**. That’s why I think it’s very
    important for data scientists to have software engineering skills. [Design patterns](https://en.wikipedia.org/wiki/Software_design_pattern)
    are something that all people who write code should know. Today we are going to
    talk about the pattern called Builder.
  prefs: []
  type: TYPE_NORMAL
- en: What is a Design Pattern?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**A design pattern is simply a general design solution to a recurring problem**.
    Instead of dealing with solving the same problem over and over again, one thinks
    of a solution that can be used every time the same problem is encountered, and
    these solutions have already been found! Someone has fortunately already thought
    of making our lives easier! :)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Desgin patterns differ in several kinds. But mainly we have 3 of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creational**: it’s about the process of creating objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Structural**: it’s about the composition of classes and objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Behavioural**: defines how classes and objects interact and'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: distribute responsibilities among themselves.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/180b625cacb241d44c7f853dc462d4d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Design Patterns (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: The Builder Design Pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **builder** is part of that design pattern class called creational, because
    it precisely **simplifies the creation of objects** within the code. Imagine that
    you have a class, which requires an immense number of parameters to be instantiated,
    or for Pythonians, a class whose __init__() method expects lots of input parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '**Imagine you have a class to design a park, perhaps because you are creating
    the environment for a video game**. **You can customize the park in various ways**,
    adding and removing various things. You can add games, children, or create a park
    full of animals and more.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/48e767e268517a7010a34394289328aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: But at the implementation level, how do we deal with implementing all these
    kinds of parks? **The most intuitive solution is probably to create a base Park
    class, which other classes will then extend** to include the various features.
    But in this case we will end up with four subclasses, and in real projects we
    will have **an immense number of subclasses**, which would make our code impractical.
  prefs: []
  type: TYPE_NORMAL
- en: '**Or** we could create just one class, the class Park, and **use a huge constructor
    to which a lot of parameters can be given as input. But the problem is that in
    most cases the input parameters would be null,** because we don’t always want
    to create a park that has everything, and again the code would look a little ugly.'
  prefs: []
  type: TYPE_NORMAL
- en: '**The solution adopted by the Builder, is to create all the various features
    we want to include in different methods of the Park class, called builders**,
    instead of having everything inside the constructor. This way we can build the
    pieces of our Park step-by-step, depending on what we need.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/03062d08a2704c07879705a39dc4c3ca.png)'
  prefs: []
  type: TYPE_IMG
- en: ParkBuilder (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Let’s code!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s see how to implement this design pattern in Python now. In this example
    what we want to do is to build different types of robots that have different configurations.
    The following code will consist of 5 basic parts.
  prefs: []
  type: TYPE_NORMAL
- en: '**Robot Class:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, we create the `Robot`class that represents the objects we want to build
    with all their attributes such as`head`, `arms`, `legs`, `torso`, and `battery`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**2\. Builder Interface:**'
  prefs: []
  type: TYPE_NORMAL
- en: The `RobotBuilder` interface is an abstract class that defines a set of methods
    for building the different parts of a `Robot`object. These methods include `reset`,
    `build_head`, `build_arms`, `build_legs`, `build_torso`, `build_battery`, and
    `get_robo`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**3\. Concrete Builders**:'
  prefs: []
  type: TYPE_NORMAL
- en: Now we have the builder classes that implements the abstract class `RobotBuilder`which
    are `HumanoidRobotBuilder` and `DroneRobotBuilder`. These builders give to robots
    different settings that differentiate them from each other.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that each builder maintains an instance of the `Robot` it's constructing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**4\. RobotDirector:**'
  prefs: []
  type: TYPE_NORMAL
- en: The class called `RobotDirector` has the task of directing the construction
    of robots using specific builders it has available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside this class, you will find the `set_builder`method to activate the builder
    you need and dui `build_humanoid_robot`and `build_drone_robot` methods to create
    different types of robots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The director’s methods return the final constructed robot objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**5\. Client Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create a `RobotDirector` instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then create a `HumanoidRobotBuilder` and set it as the active builder for humanoid
    robots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also use the director’s `build_humanoid_robot` method to create a humanoid
    robot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we can create a `DroneRobotBuilder` and set it as the active builder for
    drone robots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we have to use the director’s `build_drone_robot` method to create a drone
    robot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we print out the components of both types of robots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: That’s it! 😊
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**The Builder pattern decouples the construction of a complex object from its
    representation.** As we have seen in this example, the **RobotDirector is in charge
    of orchestrating the construction process but is not aware of the specific steps
    to create different types of robots.** The concrete builders, which we called
    HumanoidRobotBuilder and DroneRobotBuilder in this case, provide step-by-step
    implementations for building specific robot configurations.'
  prefs: []
  type: TYPE_NORMAL
- en: '**The pattern allows flexibility and extensibility**, enabling the creation
    of complex objects with variable attributes while keeping client code clean and
    easy to use. All this allows us to build complex objects in a clear and consistent
    way.'
  prefs: []
  type: TYPE_NORMAL
- en: If you were interested in this article follow me on Medium! 😁
  prefs: []
  type: TYPE_NORMAL
- en: 💼 [Linkedin](https://www.linkedin.com/in/marcello-politi/) ️| 🐦 [Twitter](https://twitter.com/_March08_)
    | [💻](https://emojiterra.com/laptop-computer/) [Website](https://marcello-politi.super.site/)
  prefs: []
  type: TYPE_NORMAL
- en: 'You might be interested in some of my past articles as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Design Patterns with Python for Machine Learning Engineers: Observer](/design-patterns-with-python-for-machine-learning-engineers-observer-23cde7ecb2ed)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Design Patterns with Python for Machine Learning Engineers: Abstract Factory](/design-patterns-with-python-for-machine-learning-engineers-abstract-factory-f761f89a3c12)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
