["```py\npip install chess.com\n```", "```py\n# Import necessary libraries\nfrom chessdotcom import get_player_game_archives, get_player_games_by_month, Client\nimport pandas as pd\nimport numpy as np\nfrom pprint import pprint\n\n# Configure the user agent for the API requests to Chess.com\n# this part is mandatory as per new version of API\nClient.request_config[\"headers\"][\"User-Agent\"] = (\n   \"My Python Application. \"\n   \"Contact me at xxxx@gmail.com\"\n)\n\n# get games for the month of November 2023\nresponse_sample = get_player_games_by_month(\"mikayil94\", year=2023, month=11)\n\n# print the JSON\npprint(response_sample.json)\n```", "```py\n# Retrieve a list of months during which the player 'mikayil94' has played games\nresponse1 = get_player_game_archives(\"mikayil94\")\nlist_of_played_months = []\nfor i in response1.json['archives']:\n    list_of_played_months.append(i[-7:])\n```", "```py\n# Create a DataFrame to store game information\nmy_games_df = pd.DataFrame(columns = ['time_class', 'date', 'white', 'black', 'game_link', 'opening_code', 'opening_name', 'opening_link', 'result'])\n\n# Loop through each month and retrieve games played in that month\nfor months in list_of_played_months:\n    response2 = get_player_games_by_month(\"mikayil94\", year=months.split(\"/\")[0], month=months.split(\"/\")[1])  \n\n    # Extract relevant information from each game and add it to the DataFrame\n    for i in response2.json['games']:\n        time_class = i['time_class']\n        pgn = i['pgn']\n        if \"ECOUrl\" not in pgn : continue  # Skip the game if it doesn't have an ECO URL\n\n        # Extract various details from the PGN (Portable Game Notation) of the chess game\n        date = pgn[pgn.find(\"Date\"):].split(\" \")[1].split(\"]\")[0].strip('\\\"')\n        white = pgn[pgn.find(\"White\"):].split(\" \")[1].split(\"]\")[0].strip('\\\"')\n        black = pgn[pgn.find(\"Black\"):].split(\" \")[1].split(\"]\")[0].strip('\\\"')\n        game_link = pgn[pgn.find(\"Link\"):].split(\" \")[1].split(\"]\")[0].strip('\\\"')\n        opening_code = pgn[pgn.find(\"ECO\"):].split(\" \")[1].split(\"]\")[0].strip('\\\"')\n        opening_name = pgn[pgn.find(\"ECOUrl\"):].split(\" \")[1].split(\"]\")[0].split(\"/\")[-1].strip('\\\"')    \n        opening_link = pgn[pgn.find(\"ECOUrl\"):].split(\" \")[1].split(\"]\")[0].strip('\\\"')    \n        result = np.where(pgn[pgn.find(\"Termination\"):].split(\" \")[1].split(\"]\")[0].strip('\\\"') == 'mikayil94', 'Win', 'Loss') # if my username is in this field, it means I was the Winner.\n\n        # Create a new DataFrame for the current game and append it to the main DataFrame\n        my_games_df_new = pd.DataFrame({'time_class' : [time_class], 'date' : [date], 'white' : [white], 'black' : [black], \\\n                        'game_link' : game_link, 'opening_code' : opening_code, 'opening_name' : [opening_name], 'opening_link' : [opening_link], 'result' : [result]})\n        my_games_df = pd.concat([my_games_df, my_games_df_new], ignore_index=True) \n```", "```py\n# Add a new column 'opening_side' to the DataFrame. If the player 'mikayil94' is white, set the value to 'white', otherwise 'black'\nmy_games_df['opening_side'] = np.where(my_games_df.white == 'mikayil94', 'white', 'black')\n\n# Add a new column 'result_binary'. If the result of the game is 'Win', set the value to 1, otherwise 0\nmy_games_df['result_binary'] = np.where(my_games_df.result == 'Win', 1, 0)\n\n# Group the DataFrame by opening name, link, code, and the side 'mikayil94' played.\n# Aggregate the data to count the total number of wins and total games played for each group\nmy_openings = my_games_df.groupby([\"opening_name\", \"opening_link\", \"opening_code\", \"opening_side\"], as_index=False).agg(\n    games_win = ('result_binary', 'sum'),  # Sum of 'result_binary' to get total wins\n    games_count = ('result_binary', 'count')  # Count of 'result_binary' to get total games played\n)\n\n# Calculate the win percentage for each opening and add it as a new column 'win_percentage'\n# The win percentage is rounded to two decimal places\nmy_openings['win_percentage'] = round(my_openings.games_win / my_openings.games_count, 2)\n```", "```py\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Prepare the data for visualization\n# Add new column, to concatenate opening name and opening side, which will be used in visualization\nmy_openings['opening_and_side'] = my_openings.opening_name + '[as ' + my_openings.opening_side + ']'\n# filter data to show only games with at least 10 count\nviz_data = my_openings[my_openings.games_count > 10].sort_values(\"win_percentage\", ascending=False)[['opening_and_side', 'win_percentage']]\n\n# Create a bar plot\nplt.figure(figsize=(15, 10))\nsns.barplot(x='win_percentage', y='opening_and_side', data=viz_data, palette=\"viridis\", ci=None)\nplt.title('Win Percentage by Chess Opening')\nplt.xlabel('Win Percentage')\nplt.ylabel('Opening Name')\nplt.xticks(rotation=45)\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n```"]