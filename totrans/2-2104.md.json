["```py\nimport pandas as pd\nimport tsfel\n\n# get configuration\ncfg = tsfel.get_features_by_domain()\n\n# extract features for each food subcategory\nfeatures = {col: tsfel.time_series_features_extractor(cfg, data[col])\n            for col in data}\n\nfeatures_df = pd.concat(features, axis=0)\n```", "```py\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.feature_selection import VarianceThreshold\nfrom src.correlation_filter import correlation_filter\n\n# normalizing the features\nfeatures_norm_df = pd.DataFrame(MinMaxScaler().fit_transform(features_df),\n                                columns=features_df.columns)\n\n# removing features with 0 variance\nmin_var = VarianceThreshold(threshold=0)\nmin_var.fit(features_norm_df)\nfeatures_norm_df = pd.DataFrame(min_var.transform(features_norm_df),\n                                columns=min_var.get_feature_names_out())\n\n# removing correlated features\nfeatures_norm_df = correlation_filter(features_norm_df, 0.9)\nfeatures_norm_df.index = data.columns\n```", "```py\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\n\nkmeans_parameters = {\n    'init': 'k-means++',\n    'n_init': 100,\n    'max_iter': 50,\n}\n\nn_clusters = range(2, 25)\nsilhouette_coef = []\nfor k in n_clusters:\n    kmeans = KMeans(n_clusters=k, **kmeans_parameters)\n    kmeans.fit(features_norm_df)\n\n    score = silhouette_score(features_norm_df, kmeans.labels_)\n\n    silhouette_coef.append(score)\n```", "```py\nimport scipy.cluster.hierarchy as shc\n\n# hierarchical clustering using the ward method\nclustering = shc.linkage(features_norm_df, method='ward')\n\n# plotting the dendrogram\ndend = shc.dendrogram(clustering,\n                      labels=categories.values,\n                      orientation='right',\n                      leaf_font_size=7)\n```"]