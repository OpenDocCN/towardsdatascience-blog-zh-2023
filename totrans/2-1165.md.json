["```py\nfrom googleapiclient.discovery import build\nyoutube = build('youtube', 'v3', developerKey=<your_api_key>)\n```", "```py\nvideo_request = youtube.videos().list(\n                part='snippet,statistics,contentDetails',\n                chart='mostPopular',\n                regionCode='US',\n                videoCategoryId=1,\n                maxResults=20\n\t\t      )\nresponse = video_request.execute()\n```", "```py\nvideo_df = json_normalize(response['items'])\n```", "```py\ndef extractYouTubeData(youtube, categoryId):\n    video_request = youtube.videos().list(\n    part='snippet,statistics,contentDetails',\n    chart='mostPopular',\n    regionCode='US',\n    videoCategoryId=categoryId,\n    maxResults=20\n    )\n    response = video_request.execute()\n    video_df = json_normalize(response['items'])\n    return video_df\n```", "```py\nimport isodate\nimport plotly.express as px\n\ndef plotVideoDurationStats(video_df):\n    video_df['contentDetails.duration'] = video_df['contentDetails.duration'].astype(str)\n    video_df['duration'] = video_df['contentDetails.duration'].apply(lambda x: isodate.parse_duration(x).total_seconds())\n    fig = px.scatter(video_df, x=\"duration\", y='statistics.likeCount', color_discrete_sequence=px.colors.qualitative.Safe)\n    return fig\n```", "```py\ndef plotTopNTags(video_df, topN):\n    tags = []\n    for i in video_df['snippet.tags']:\n        if type(i) != float:\n            tags.extend(i)\n    tags_df = pd.DataFrame(tags)\n    tags_freq_df = tags_df.value_counts().iloc[:topN].rename_axis('tag').reset_index(name='frequency')\n    fig = px.bar(tags_freq_df, x='tag', y='frequency')\n    return fig\n```", "```py\nimport streamlit as st\nst.title('Trending YouTube Videos')\n```", "```py\nvideoCategory = st.selectbox(\n    'Select YouTube Video Category',\n    ('Film & Animation', 'Music', 'Sports', 'Pets & Animals')\n)\n```", "```py\ntopN = st.slider('Select the number of tags to display',0, 20)\n```", "```py\nvideoCategoryDict = {'Film & Animation': 1, 'Music': 10, 'Sports': 17, 'Pets & Animals': 15}\ncategoryId = videoCategoryDict[videoCategory]\nvideo_df = extractYouTubeData(youtube, categoryId)\nduration_fig = plotVideoDurationStats(video_df)\nfig_title1 = 'Durations(seconds) vs Likes in Top ' + videoCategory + ' Videos'\nst.subheader(fig_title1)\nst.plotly_chart(duration_fig)\n```", "```py\ntag_fig = plotTopNTags(video_df, topN)\nfig_title2 = 'Top '+ str(topN) + ' Tags in ' + videoCategory + ' Videos'\nst.subheader(fig_title2)\nst.plotly_chart(tag_fig)\n```"]