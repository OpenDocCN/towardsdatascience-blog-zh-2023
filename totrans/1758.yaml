- en: Quick Text Sentiment Analysis with R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/quick-text-sentiment-analysis-with-r-2cc4f04c35c1](https://towardsdatascience.com/quick-text-sentiment-analysis-with-r-2cc4f04c35c1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use TidyText to create a nice and quick text analysis with R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://gustavorsantos.medium.com/?source=post_page-----2cc4f04c35c1--------------------------------)[![Gustavo
    Santos](../Images/a19a9f4525cdeb6e7a76cd05246aa622.png)](https://gustavorsantos.medium.com/?source=post_page-----2cc4f04c35c1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2cc4f04c35c1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2cc4f04c35c1--------------------------------)
    [Gustavo Santos](https://gustavorsantos.medium.com/?source=post_page-----2cc4f04c35c1--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2cc4f04c35c1--------------------------------)
    ·9 min read·Mar 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5960e531934e6170b542d5661e786195.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Kenny Eliason](https://unsplash.com/@neonbrand?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/jxmVsYjglnQ?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Text everywhere! Since the Internet was spread around the world, the amount
    of textual data we generate everyday is ginormous. Only textual messages sent
    everyday, it is estimated that there are around 18 Billion of them circulating
    on a [daily basis](https://seedscientific.com/how-much-data-is-created-every-day/)*.
  prefs: []
  type: TYPE_NORMAL
- en: Now imagine the amount of news generated as well. It’s a so overwhelming amount
    that there are whole businesses built around news clipping, separating the best
    information about a given topic to help companies in their marketing strategies.
  prefs: []
  type: TYPE_NORMAL
- en: How is AI helping that? Certainly, NLP plays a huge part on that providing good
    tools and algorithms to analyze textual information. As Data Scientists, we can
    profit of `tidytext`, an excellent library from `R` to help us building quick
    analytical tools to check the content of a text.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see that in practice, next.
  prefs: []
  type: TYPE_NORMAL
- en: Text Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prepare your environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To be prepared to code along with this article, load the libraries listed as
    follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The library `tidytext` works on the same fashion as `tidyverse`, making use
    of intuitive function names and chaining them with the pipe symbol `%>%`.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use [this text from Wikipedia about the *R Language*](https://en.wikipedia.org/wiki/R_(programming_language))
    to create our first simple **Text Analyzer**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The next step is to transform this text into a `tibble` object, which can be
    understood as a `data.frame`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: It won’t change much your object, but it is just something required for us to
    be able to work with the `tidytext` functions, as those require that the data
    comes from a tibble or data.frame object. In case you’re curious, here is what
    it looks like after the transformation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7d1c694128d9a6998ab7b9c60da8f7b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Text transformed to a tibble object. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Frequency count
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Moving on, now we will tokenize the text. A token is the smallest meaningful
    unit of a text. Most of the projects use 1 word = 1 token, but it can be another
    size, if your project requires it. Therefore, **tokenization** is this process
    of breaking a text into this minimal pieces that carry a meaning to make the message.
    To tokenize our text with `tidytext`, use this function.
  prefs: []
  type: TYPE_NORMAL
- en: A token is the smallest meaningful unit of a text. [1]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: And the result is this, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/34d2e38a8448d11f3b2ab5df40ec097f.png)'
  prefs: []
  type: TYPE_IMG
- en: Tokenized text. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: However, we can see that tokens such as `is` , `a` , `for` won’t add anything
    to the message. Agree? Those are called **stop words**. We should have a way to
    remove those tokens and leave only the clean data, those tokens with a real meaning
    from the text’s message.
  prefs: []
  type: TYPE_NORMAL
- en: '`tidytext` already comes with a dataset with the stop words integrated. If
    we write `stop_words` and run the code, we will be able to see it.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the column with the words is named `word`. That is why we also named
    our tokenized column with that variable name, so it is easier to join both datasets.
    So, our job now is to join them, removing those stop words. We can use the `anti_join()`
    function for that, which will keep only the words that are in the dataset A, but
    not in B. On the sequence, we just count and sort by most frequent appearances.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Amazing, huh? That easily we have a sense of what’s this text about. *A software
    or programming language for statistical data analysis.*
  prefs: []
  type: TYPE_NORMAL
- en: We could create a function with the preceding code to quickly give us frequency
    counts of any text.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Let’s put it to test. I will go back to the first section of this article, copy
    it and let our function count the frequencies.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Works like a charm.
  prefs: []
  type: TYPE_NORMAL
- en: Going the extra mile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We could stop here, but this topic is so interesting that I sense we should
    still go on with a little more content. Let’s add a sentiment analysis to our
    text analyzer now.
  prefs: []
  type: TYPE_NORMAL
- en: '`tidytext` also comes prepared for sentiment analysis, since it has a couple
    of sentiments datasets provided with it. The options are “Bing”, “Afinn” and “nrc”.
    Let’s see the difference between them.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Bing* sentiments dataset comes with words classified as positive or negative.
    So, one option here is to check how many positive vs. negative words does your
    text carry, and then have an idea of the sentiment.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '*Afinn* sentiments, probably from affinity classifies the words with numbers.
    The more positive the number, the more positive the word and the inverse is also
    true. It requires the `library(textdata)` to be loaded.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Finally, the *NRC* will classify the words as sentiment names, like trust, surprise
    etc.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: So, what we will do next is to use *afinn* to create a score and then plot the
    result of positive vs. negative words of our text.
  prefs: []
  type: TYPE_NORMAL
- en: I will use a text captured in the internet about the layoffs in tech. The function
    now counts with a graphic that shows the scores of the words according to the
    *afinn* values and frequencies.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The resulting table was displayed above. This is the outcome graphic.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fd5affd63340536336e464f171638c63.png)'
  prefs: []
  type: TYPE_IMG
- en: Sentiment Analysis for a news text about the layoffs in the Tech industry. Image
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: In my GitHub, there’s another function where you can also choose the sentiments
    pack to be used. The results are displayed below, followed by the code link.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5ac821fd87c1d36dd0f3dd578ba8bc99.png)'
  prefs: []
  type: TYPE_IMG
- en: Sentiments captured by word frequency with the “nrc” pack. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c7f55b4b01ec5ed8d47f17f42a007b18.png)'
  prefs: []
  type: TYPE_IMG
- en: Sentiments captured by word frequency using the “Bing” pack. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the entire code here: [Link to the code in Git Hub](https://github.com/gurezende/Sentiment_Analysis_TidyText).'
  prefs: []
  type: TYPE_NORMAL
- en: You can play with a Shiny App created out of this code too.
  prefs: []
  type: TYPE_NORMAL
- en: '[## [ TEXT SENTIMENT ANALYZER ]'
  prefs: []
  type: TYPE_NORMAL
- en: This project - created by Gustavo R Santos - to quickly create a text analysis
    to count word frequencies and plot the…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: gurezende.shinyapps.io](https://gurezende.shinyapps.io/Sentiment_Analysis/?source=post_page-----2cc4f04c35c1--------------------------------)
    ![](../Images/fcda764b6d41bfc5b1870f5c59081645.png)
  prefs: []
  type: TYPE_NORMAL
- en: '[Shiny App: Text Sentiment Analyzer](https://gurezende.shinyapps.io/Sentiment_Analysis/).
    Image by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: Before You Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I enjoy studying NLP and text mining data science tools. There is so much we
    can extract from a text. It’s super interesting.
  prefs: []
  type: TYPE_NORMAL
- en: I recommend that you check the links below in the References section and find
    resources to deepen your knowledge. My book also brings some interesting exercises
    about wrangling textual data, including text mining.
  prefs: []
  type: TYPE_NORMAL
- en: If you liked this content, don’t forget to follow my blog. [Find me on LinkedIn](https://www.linkedin.com/in/gurezende/).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://gustavorsantos.medium.com/?source=post_page-----2cc4f04c35c1--------------------------------)
    [## Gustavo Santos - Medium'
  prefs: []
  type: TYPE_NORMAL
- en: Read writing from Gustavo Santos on Medium. Data Scientist. I extract insights
    from data to help people and companies…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: gustavorsantos.medium.com](https://gustavorsantos.medium.com/?source=post_page-----2cc4f04c35c1--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] *Santos, G. 2023\. Data Wrangling with R. 1ed. Packt Publishing.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.tidytextmining.com/tidytext.html?source=post_page-----2cc4f04c35c1--------------------------------)
    [## 1 The tidy text format | Text Mining with R'
  prefs: []
  type: TYPE_NORMAL
- en: Using tidy data principles is a powerful way to make handling data easier and
    more effective, and this is no less true…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.tidytextmining.com](https://www.tidytextmining.com/tidytext.html?source=post_page-----2cc4f04c35c1--------------------------------)
    [](https://en.wikipedia.org/wiki/R_%28programming_language%29?source=post_page-----2cc4f04c35c1--------------------------------)
    [## R (programming language) - Wikipedia
  prefs: []
  type: TYPE_NORMAL
- en: R is a programming language for statistical computing and graphics supported
    by the R Core Team and the R Foundation…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'en.wikipedia.org](https://en.wikipedia.org/wiki/R_%28programming_language%29?source=post_page-----2cc4f04c35c1--------------------------------)
    [](https://www.amazon.com/Data-Wrangling-Transform-Visualize-tidyverse/dp/1803235403/ref=sr_1_4?crid=2GAN2WONI7ZS5&keywords=Data+Wrangling+with+R&qid=1672819697&sprefix=data+wrangling+with+%2Caps%2C324&sr=8-4&source=post_page-----2cc4f04c35c1--------------------------------)
    [## Data Wrangling with R: Load, explore, transform and visualize data for modeling
    with tidyverse…'
  prefs: []
  type: TYPE_NORMAL
- en: 'Data Wrangling with R: Load, explore, transform and visualize data for modeling
    with tidyverse libraries [Santos…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.amazon.com](https://www.amazon.com/Data-Wrangling-Transform-Visualize-tidyverse/dp/1803235403/ref=sr_1_4?crid=2GAN2WONI7ZS5&keywords=Data+Wrangling+with+R&qid=1672819697&sprefix=data+wrangling+with+%2Caps%2C324&sr=8-4&source=post_page-----2cc4f04c35c1--------------------------------)
  prefs: []
  type: TYPE_NORMAL
