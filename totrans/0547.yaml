- en: Configuring a Minimal Docker Image for Spatial Analysis with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/configuring-a-minimal-docker-image-for-spatial-analysis-with-python-dc9970ca8a8a](https://towardsdatascience.com/configuring-a-minimal-docker-image-for-spatial-analysis-with-python-dc9970ca8a8a)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn how to install the basic geospatial dependencies, such as GDAL and XArray,
    and deploy them as a container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://cordmaur.medium.com/?source=post_page-----dc9970ca8a8a--------------------------------)[![Maurício
    Cordeiro](../Images/1ec750bf68bbaa0331fabdebebf28eb5.png)](https://cordmaur.medium.com/?source=post_page-----dc9970ca8a8a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dc9970ca8a8a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dc9970ca8a8a--------------------------------)
    [Maurício Cordeiro](https://cordmaur.medium.com/?source=post_page-----dc9970ca8a8a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dc9970ca8a8a--------------------------------)
    ·6 min read·Feb 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bad35a93cebcc774e60713494d3ae498.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image created with Dall-E 2\. Caption: ''Oil painting of the Earth with a satellite
    around it''.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Due to changes in Medium.com policy concerning non-members reads, implemented
    in Sep 2023, this post is now freely available on **geocorner.net**: [https://www.geocorner.net/post/configuring-a-minimal-docker-image-for-spatial-analysis-with-python](https://www.geocorner.net/post/configuring-a-minimal-docker-image-for-spatial-analysis-with-python)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Newcomers to the Python programming language quickly understand the significance
    of utilizing virtual environments and package management tools. The vast number
    of packages available presents a challenge in maintaining compatibility among
    dependencies, making virtual environments and package management critical components
    of a well-organized Python environment.
  prefs: []
  type: TYPE_NORMAL
- en: This complexity of managing dependencies is exacerbated when working with geospatial
    analysis. In addition to the numerous packages utilized in data science, it is
    necessary to incorporate specialized libraries such as GDAL, Rasterio, and STAC
    to support this type of analysis. Besides, it is widely known that GDAL can be
    particularly difficult to install, regardless of the operating system architecture,
    be it Windows, Linux, or Mac.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to deploy your geospatial environment to a cloud server, relying
    on basic conda skills just won’t cut it. Containerizing your environment is the
    way to go, to ensure compatibility and stability in the target deployment environment.
  prefs: []
  type: TYPE_NORMAL
- en: So, this article is here to save the day! It’s a quick and straightforward guide
    to setting up a minimalist Docker image, loaded with all the essential tools for
    geospatial analysis using Python. No more headaches, no more fuss!
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we will need Docker installed. On **Mac** or **Windows** this can be
    done through the installation of **Docker Desktop** directly from `docker.com`
    (Figure 1).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0defba6d719975d17ae2c7c25c56f627.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Docker Desktop installation. Image by author.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are on **linux**, the installation can be done using `apt` package manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Base Image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step is to find a base image on Docker Hub to build on top of. There
    are images available that have all the geospatial dependencies pre-installed,
    such as those provided by the Pangeo community. However, the downside is that
    these images have a large compressed size of 1.42 GB.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, the official Python images would be a good starting point for running
    Python, but installing GDAL on these images can be cumbersome. After exploring
    various options, I discovered that the easiest way is to start with an image that
    has GDAL pre-installed. This image is provided by the OSGeo community at `hub.docker.com/u/osgeo`
    (Figure 2).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1e191ddd818392e65dc0147731b02717.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: OSGeo images provided in Docker HUB. Image by author.'
  prefs: []
  type: TYPE_NORMAL
- en: Once in the `osgeo/gdal` repository, we can go to the tab `Tags`. Besides the
    **latest** image version, we can note several other versions are available for
    different purposes and with different sizes. The latest has more than 1Gb of compressed
    size. After trying different versions, I found out that their ‘ubuntu-small’ version
    strikes a good balance between size (142 MB compressed) and compatibility with
    the required packages. So let's grab this one.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** The following steps are here just for educational purpose and check
    if the necessary packages can be installed successfully. We could jump directly
    to creating a Dockerfile from this image.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'On the terminal or command line, we can run the following commands to pull
    the image and to create a container and enter it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that the prompt will change to `root@<container_id>:/#`.
  prefs: []
  type: TYPE_NORMAL
- en: Once "inside" the container, we can check for the installed versions of basic
    packages. So, let's type the command `python` to enter the Python interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Installing Additional Packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ok, now that we have Python 3.10.6 and the most difficult package to install
    on Earth (yep, GDAL), we can just install the additional packages using PIP or
    CONDA, right? Easy Peasy!
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, not really. If you go back to the container and try to run these commands
    are not installed by default. So let''s install PIP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, with pip installed, we can install all the additional packages directly
    with `pip install package1 package2 …`. As the container is already isolated,
    we will skip using virtual environment inside the container and install the packages
    as root.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Dockerfile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, to make it reproducible in other architectures ( `aarch64` , `X86_64`,
    etc.) let's create a Dockerfile to wrap up everything. Let's start by creating
    an empty text file called `Dockerfile` without any extension (that will make it
    easier to build the image without specifying the filename).
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing in a Dockerfile is to specify the base image with its corresponding
    tag. So we write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Then we need to install the PIP. For that, we will write a RUN command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have two options.
  prefs: []
  type: TYPE_NORMAL
- en: '1- concatenate several lines of a pip install command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '2- Or, to make it a little more "elegant" we can write our dependencies inside
    a requirements.txt file to make things more organized, we can create a `requirements.txt`
    file with all the packages we want installed, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And then, on the Dockerfile, we will copy our `requirements.txt` to the image,
    install the packages with `pip install --no-cache-dir` to purge the leftovers
    and we are set. The complete Dockerfile will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Building the Image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our the `requirements.txt` and the `Dockerfile` files saved
    on the filesystem, we can build the final image with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To push it to the DockerHub, it is necessary to point it to a repository, like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: And voilà!!!! This image is available publicly at the address [https://hub.docker.com/repository/docker/cordmaur/geospatial_minimal/](https://hub.docker.com/repository/docker/cordmaur/geospatial_minimal/),
    and most important, with less than 300Mb (Figure 3). Enjoy it!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/249fa29075fd80ba481b286976b4f5fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Image in the DockerHub repository. Image by author.'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By following the steps outlined in this article, we have successfully created
    a minimal (< 300Mb) and efficient Docker image equipped with all the essential
    dependencies for geospatial analysis in Python 3.10\. This image can now be used
    on cloud servers to serve geospatial applications, ensuring compatibility and
    stability in deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Stay Connected
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*If you liked this article and want to support me as a writer, consider becoming
    a* [*Medium member*](https://cordmaur.medium.com/membership)*. It costs only $5/month
    and I’ll receive a small commission of your membership fee, with no extra cost
    to you. Or you can just* [*buy me a coffee*](https://www.buymeacoffee.com/cordmaurl)
    *anytime.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[](http://cordmaur.medium.com/membership?source=post_page-----dc9970ca8a8a--------------------------------)
    [## Join Medium with my referral link - Maurício Cordeiro'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Maurício Cordeiro (and thousands of other writers on Medium).
    Your membership fee directly…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: cordmaur.medium.com](http://cordmaur.medium.com/membership?source=post_page-----dc9970ca8a8a--------------------------------)
  prefs: []
  type: TYPE_NORMAL
