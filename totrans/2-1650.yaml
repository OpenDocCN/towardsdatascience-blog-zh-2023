- en: Pip Install Specific Version — How to Install a Specific Python Package Version
    with Pip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/pip-install-specific-version-how-to-install-a-specific-python-package-version-with-pip-1f97e1002f31](https://towardsdatascience.com/pip-install-specific-version-how-to-install-a-specific-python-package-version-with-pip-1f97e1002f31)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Want to install a specific Python package version with Pip? This article will
    show you how with hands-on examples and guides.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@radecicdario?source=post_page-----1f97e1002f31--------------------------------)[![Dario
    Radečić](../Images/41882a3b30bab9da43d66a59f1df366b.png)](https://medium.com/@radecicdario?source=post_page-----1f97e1002f31--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1f97e1002f31--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1f97e1002f31--------------------------------)
    [Dario Radečić](https://medium.com/@radecicdario?source=post_page-----1f97e1002f31--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1f97e1002f31--------------------------------)
    ·6 min read·Apr 5, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0184279087e9fb03099c4581fbd2fa99.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Mario Gogh](https://unsplash.com/@mariogogh?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '**TL;DR:** You can install a specific version of a Python package using Pip
    by running the `pip install <package_name>==<version>` command. For example, to
    install version 1.3.4 of [Pandas](https://practicalpandas.com/how-to-install-pandas-specific-version/),
    execute the `pip install pandas==1.3.4` command from the Terminal.'
  prefs: []
  type: TYPE_NORMAL
- en: That’s a short version and probably all you’ll ever need, but sometimes you’ll
    want to take more control over package installation. That’s where the rest of
    the article comes in.
  prefs: []
  type: TYPE_NORMAL
- en: Why Would You Want to Install a Specific (Older) Version of a Python Package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, why even bother with older versions of Python packages? Well, maybe you
    have a huge codebase that’s not compatible with the most recent package update.
    Maybe you’ve written the code years ago and it still works in production, but
    updating the package might break it. Or maybe even the most recent package version
    isn’t compatible with your Python version.
  prefs: []
  type: TYPE_NORMAL
- en: '**In other words** — whatever the case may be, there are valid reasons for
    installing older versions of a Python package.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now go over some practical examples of how to install a specific package
    version with Pip.
  prefs: []
  type: TYPE_NORMAL
- en: How to Check Which Version of a Python Package is Installed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two useful commands you must know before proceeding to install a
    specific Python package version. These are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip show <packagename>` - Show the currently installed version of the package,
    its summary, author, license, dependencies, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pip index versions <packagename>` - Lists all the available package versions
    you can install.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s check them out for the `pandas` Python package. The following shell command
    prints the currently installed version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1a7c32d5b55eda55ee8bab8796f5fecd.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 1 — Current version of the Pandas package (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: It seems like Pandas version 1.5.3 is installed, and it requires `numpy`, `python-dateutil`,
    and `pytz` packages to run.
  prefs: []
  type: TYPE_NORMAL
- en: '**But is version 1.5.3 the latest, and which other versions can we install?**
    That’s what the next shell command answers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7ef6ea6c4c946f6d65332ad27dd59357.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 2 — Available Pandas package versions (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: Version 2.0.0 is the most recent, but you can go far, far back, depending on
    the Python version you have installed on your system or inside a virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to check for the currently installed package version and also
    how to list all the available versions, so next, let’s see how to pip install
    a specific version of a package.
  prefs: []
  type: TYPE_NORMAL
- en: How to Install Pip Specific Version of a Python Package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are 2 must-know ways to install a specific version of a Python package.
    The first one requires two commands — the first one for uninstalling the current
    version, and the second for installing the version you want. The second approach
    packs all that functionality in one shell command, so that’s the one you should
    use in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Method 1 — Uninstall and Install
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You now know which version of Pandas you have installed, and which versions
    you can potentially install, depending on your Python version.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we have version 1.5.3, but we want to go back to version 1.3.4\.
    To do so, we first have to uninstall the current version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/34caf32ec92fc269f99d08ffc59700d1.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 3 — Uninstalling a Python package with pip (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'And now, pip install specific version of Pandas by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3a3b67850b7a2fa1764263102d384964.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 4 — Installing a specific version of a Python package with Pip (image
    by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'It seems like everything went fine, but how can you make sure version 1.3.4
    was installed? **Spoiler alert: You already know the command**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3a4a0375bd700d927b5480cc24a52a17.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 5 — Currently installed Pandas version (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: Pandas 1.3.4 is successfully installed on our system, so we can mark our job
    here as done.
  prefs: []
  type: TYPE_NORMAL
- en: Method 2 — Overwrite the Installed Package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The superior approach to the one from the previous section is to install a specific
    version of a Python package with a single shell command. You can do so by appending
    the `--ignore-installed` flag when installing a specific version of the package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example — it installs Pandas version 2.0.0 and overwrites version
    1.3.4 which was installed moments ago:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/471a795ad92096735df8afa4511f09b5.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 6 — Overwriting the current package version (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'And just to verify, you can use the `pip show` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/08ac37df2a38fdfb7ef70fa14e84c0d1.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 7 — Currently installed Pandas version (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: And that’s two ways to pip install specific version of a Pandas package. **Will
    it always be that easy?** Probably not, so continue reading for a more production-ready
    use case.
  prefs: []
  type: TYPE_NORMAL
- en: How to Install Multiple Python Packages with Specific Versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing Python packages one by one is fine in your local environment, but
    it doesn’t scale in production. That’s where you’ll typically have a `requirements.txt`
    file which contains all Python dependencies for the project alongside their specific
    version.
  prefs: []
  type: TYPE_NORMAL
- en: '*Wait, what is a requirements.txt file?* [*Read this article if you want to
    manage Python dependencies like a sane person*](https://betterdatascience.com/python-pipreqs/)*.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The `requirements.txt` is typically structured like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In short, there’s a list of Python dependencies with their respective versions.
    The question now is, **Can you install all of them with a single command?** And
    the answer is — yes, you can.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the file looks like on our end:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b9704d91d9be3ea4251c545511400435.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 8 — Contents of the requirements.txt file (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'And this is the command you should run if the `requirements.txt` file is in
    the same directory as your shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/be7aa07cf3223e0bb7d1304806b5a3c6.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 9 — Installing multiple Python dependencies with a single command (image
    by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: In case your `requirements.txt` file is located elsewhere, simply provide an
    absolute or relative path after `-r`. That's it!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s verify the correct package versions were installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bff29664d2807c2806bf777dbb35239c.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 10 — Checking Python package versions (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: And that’s how you can install multiple Python packages at once. Let’s make
    a short recap next.
  prefs: []
  type: TYPE_NORMAL
- en: Summing up Pip Install Specific Version
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Project dependency management doesn’t have to be difficult. You can use Python’s
    [pipreqs](https://betterdatascience.com/python-pipreqs/) module to keep track
    of the packages used within a project and to create a `requirements.txt` file,
    and then apply everything learned in this article to transfer the same set of
    dependencies to another machine, or a production environment.
  prefs: []
  type: TYPE_NORMAL
- en: You can also pip install specific version of a Python package one by one, which
    is fine for a local development environment, and this article showed you a couple
    of ways to do so. By far better approach is to have a dedicated file for the dependencies,
    and install them all at once.
  prefs: []
  type: TYPE_NORMAL
- en: '*How do you keep track of project dependencies? Do you install a specific version
    of a Python package, or do you stick with the latest releases?* Make sure to let
    me know in the comment section below.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Loved the article? Become a* [*Medium member*](/@radecicdario/membership)
    *to continue learning without limits. I’ll receive a portion of your membership
    fee if you use the following link, with no extra cost to you.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@radecicdario/membership?source=post_page-----1f97e1002f31--------------------------------)
    [## Join Medium with my referral link - Dario Radečić'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Dario Radečić (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@radecicdario/membership?source=post_page-----1f97e1002f31--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '*Originally published at* [*https://betterdatascience.com*](https://betterdatascience.com/pip-install-specific-version/)
    *on April 5, 2023.*'
  prefs: []
  type: TYPE_NORMAL
