- en: Seasoning your AB testing experiments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/seasoning-your-ab-testing-experiments-e585ab2ef2d2](https://towardsdatascience.com/seasoning-your-ab-testing-experiments-e585ab2ef2d2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How can salt help you with experiments?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://markeltsefon.medium.com/?source=post_page-----e585ab2ef2d2--------------------------------)[![Mark
    Eltsefon](../Images/5ab4cccd496f73cd155bbb253f85ec4d.png)](https://markeltsefon.medium.com/?source=post_page-----e585ab2ef2d2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e585ab2ef2d2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e585ab2ef2d2--------------------------------)
    [Mark Eltsefon](https://markeltsefon.medium.com/?source=post_page-----e585ab2ef2d2--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e585ab2ef2d2--------------------------------)
    ·5 min read·Mar 13, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c5d127a9d96144e0d73a0d474cca9844.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Manuel Asturias](https://unsplash.com/es/@manuel_asturias?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: AB testing is one of the most well-known methods to measure the effect of new
    features’ implementation. The main idea is to split your traffic ( or just the
    part of it) into two or more groups randomly. However, it’s important to ensure
    that the split is truly random and unbiased in order to be confident about the
    results. This is where salts come into play. The purpose of salts is to eliminate
    sources of bias or predictability that could affect the results of an AB test.
    Without salts, there is a risk that some users may be more likely to be assigned
    to a particular variation of a webpage or application based on their characteristics,
    behavior, or other factors, leading to biased results.
  prefs: []
  type: TYPE_NORMAL
- en: Hash and splitting.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s explore the main question of how to divide our users into different experiments
    and groups. To make it clearer, it’s better to use an example. We can divide our
    entire traffic into 10 buckets.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3aa4ba617f7da2f862bf9066dea11c32.png)'
  prefs: []
  type: TYPE_IMG
- en: 10 original buckets. Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Before actually assigning users to the buckets , let’s refresh our memory with
    what the hash function is.
  prefs: []
  type: TYPE_NORMAL
- en: Hash functions are used to convert input data into a fixed-size, unique value
    that can represent the original data. How can this be beneficial? It can transform
    a unique aspect of our user, typically the user ID, into a number that we can
    utilize to assign them to one of the buckets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A user ends up in bucket 1 if the remainder of the hash value divided by 10
    equals to 1 and so forth.
  prefs: []
  type: TYPE_NORMAL
- en: Why do we need salts?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin, let’s discuss the concept of domain. A domain refers to a specific
    aspect of your product that you define yourself, such as the basket, login page,
    or checkout page. The most important feature of domains is that you can confidently
    overlap your experiments between them. This means that any experiment (or the
    vast majority of it) conducted in one domain should not cause any changes in another
    domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'The use of domain salt helps us overcome two challenges:'
  prefs: []
  type: TYPE_NORMAL
- en: Without domain salt, a user ends up in the same bucket for all experiments,
    leading to biased experiment results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are limited by our traffic, but by adding domain salt, we can expand the
    number of experiments we can conduct by the number of domains. For each domain,
    we create our own buckets using unique salts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In python the code will be something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Users’ allocation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To allocate users to experiments, specific buckets are assigned to each experiment.
    In the example given, experiment #1 has been allocated buckets 1 and 2, with A
    representing the control group and B representing the treatment group. And we
    assume that we run experiments within one domain.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e72bb8e0cb5e69f9c8a130b06774db16.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: During frequent experimentation, a majority of the buckets are usually allocated
    to ongoing experiments.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e89b245809dda95af32760c22a6efcc5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Red — #1 exp , Green — #2 exp , Yellow — #3 exp. Image by Author'
  prefs: []
  type: TYPE_NORMAL
- en: However, what happens when our experiment (#1 red) end, freeing up some buckets
    that can be allocated to a new experiment?
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose 20% of the buckets are now free (because the first experiment has concluded)
    and we want to launch experiment #4.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/14daa4cdfd2e67fc22354583f61b8b76.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Can we simply use hashing and the same domain salt as before?
  prefs: []
  type: TYPE_NORMAL
- en: The answer is no, and the reason is carryover effects.
  prefs: []
  type: TYPE_NORMAL
- en: Carryover effects occur when exposing a user to a treatment can impact their
    behavior at a later time. Essentially, people tend to remember their past experiences,
    which can lead to biased results for future experiments. To address this issue,
    we introduce a new salt called the shuffle salt, which is unique for each experiment.
  prefs: []
  type: TYPE_NORMAL
- en: Now, our code for bucket allocation becomes the following.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How the shuffle salt works?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We break down our first two buckets into 10 of its own buckets and assign users
    to these sub-buckets to provide even more granularity for our experiments.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f67b7b97ba134e8e1c4e5141107d2684.png)'
  prefs: []
  type: TYPE_IMG
- en: Breaking down the first two buckets. Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: The image on the picture distinguishes the control and treatment groups for
    an experiment using violet and blue colors respectively.
  prefs: []
  type: TYPE_NORMAL
- en: And now how it fits into the bigger picture.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a6590cc62a402414e43760be2b62452b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The launch of experiment #4\. Image by Author'
  prefs: []
  type: TYPE_NORMAL
- en: In situations where we require less than 20% of our traffic, we will lose a
    certain percentage of users. For instance, if we need 15% of the entire traffic,
    we have to acquire 2 buckets since we cannot get 1.5 buckets. Consequently, we
    end up losing 5% of our traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, there is no way to completely eliminate this loss.
  prefs: []
  type: TYPE_NORMAL
- en: In practice, most companies use these two types of salts. However, some companies
    may also use additional salts, such as exclusive salts (to test major changes)
    or more granular-domain salts (to test changes in specific countries).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building an AB testing system from scratch is not the simplest task, given the
    numerous nuances that people tend to overlook. Nevertheless, you should not be
    afraid to attempt it and don’t forget to use salts.
  prefs: []
  type: TYPE_NORMAL
- en: May the Bias be without you!
  prefs: []
  type: TYPE_NORMAL
