- en: How to Use OpenAI's Function Calling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-use-openais-function-calling-e35bdac88ae7](https://towardsdatascience.com/how-to-use-openais-function-calling-e35bdac88ae7)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An Overview of Function Calling and Its Implications for Building LLM Apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://johnadeojo.medium.com/?source=post_page-----e35bdac88ae7--------------------------------)[![John
    Adeojo](../Images/f6460fae462b055d36dce16fefcd142c.png)](https://johnadeojo.medium.com/?source=post_page-----e35bdac88ae7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e35bdac88ae7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e35bdac88ae7--------------------------------)
    [John Adeojo](https://johnadeojo.medium.com/?source=post_page-----e35bdac88ae7--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e35bdac88ae7--------------------------------)
    ·6 min read·Jul 25, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a09010bff67cd967314369c4fcabb3a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Generated with Midjourney'
  prefs: []
  type: TYPE_NORMAL
- en: Structuring the Unstructured
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Function calling is an innovation from [OpenAI](https://openai.com/) that has
    expanded the possibilities when it comes to app development around large language
    models.
  prefs: []
  type: TYPE_NORMAL
- en: However, I have found that it remains misunderstood by some. In this article,
    I aim to clarify function calling in the time it takes you to make a cup of coffee.
  prefs: []
  type: TYPE_NORMAL
- en: If you have aspirations to build LLM apps, integrate LLMs into your business,
    or simply expand your knowledge in this area, then this article is for you.
  prefs: []
  type: TYPE_NORMAL
- en: What’s So Great About Function Calling?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Function calling allows us to develop natural language interfaces atop our existing
    APIs. If this sounds confusing to you, don’t worry — the details will become clearer
    as you read on.
  prefs: []
  type: TYPE_NORMAL
- en: So, what does a natural language API look like? I believe it’s best to demonstrate
    this diagrammatically. Here’s an example app that uses function calling to enable
    users to find flights.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/42b57c9e4e98903e44fbf7ea6dcfef4d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Diagrammatic representation of function calling'
  prefs: []
  type: TYPE_NORMAL
- en: To implement this type of app without function calling, you would need to prompt
    the user to input the flight information using menus, selection boxes, and the
    like.
  prefs: []
  type: TYPE_NORMAL
- en: Function calling also facilitates the possibility of users making requests by
    voice. All you would need is an additional transcription service, and voilà, you
    have an AI personal assistant.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, you should now be forming a clearer picture of function calling and
    its purpose. Let’s cement this newfound knowledge with some technical walkthroughs.
  prefs: []
  type: TYPE_NORMAL
- en: Function Calling with One Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s examine a simple use case atop a weather API.
  prefs: []
  type: TYPE_NORMAL
- en: The most basic use case involves function calling with one function. To illustrate
    this, I have modelled an API that provides a temperature forecast — [see here](https://gist.github.com/john-adeojo/13ae233ecfb25aa6908ae834ef16ef53).
  prefs: []
  type: TYPE_NORMAL
- en: 'Please take a moment to study this temperature API; note that it has two arguments:
    location and date.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, suppose we wanted to build an app based on this API. The first step we
    might take is to write a script that utilises a function call for our user queries.
    It would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Script by Author: Function call example with one function'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s discuss the function calling. We define our functions as a list of dictionaries.
    The function allows us to extract arguments from a user query, which we can then
    use to feed our API. In our case, the arguments we wish to extract are “location”
    and “date”.
  prefs: []
  type: TYPE_NORMAL
- en: We state the name of our function, in this case, “get_temperature”, and provide
    a description of what it does.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to describe the arguments of the function, which is crucial. What
    we receive back from the function call is influenced by how we do this. Take a
    look at how I have outlined the descriptions and types for the two arguments “location”
    and “date”.
  prefs: []
  type: TYPE_NORMAL
- en: The descriptions are significant because function calling is powered by OpenAI’s
    large language models, which interpret the descriptions and respond accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we set up our OpenAI model. The setup resembles a standard text generation
    use case with two key differences — the “functions” parameter and the “function_call”
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: We pass the functions we defined in the dictionary to the “functions” parameter.
    For the “function_call” parameter, we set it to “auto”, allowing the large language
    model to decide when to use a function or not use one at all.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s see what happens when we run a query through this function call.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s our query:'
  prefs: []
  type: TYPE_NORMAL
- en: query = "What's the temperature forecast in Berlin on the 1st of September 2023?"
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'And here’s the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first thing to note is that the function call has returned a structured
    response, a json object.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, the function call has determined from our query that we wish to use
    the “get_temperature” function, and it has parsed the arguments for that function
    (location and date) accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: This is excellent as we can now send these arguments to the weather API we constructed
    and obtain a response about the temperature.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s the response we get back from our weather API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '***Note****: It’s important to understand that function calling does not execute
    the function. It merely parses out the arguments for your function from a natural
    language input.*'
  prefs: []
  type: TYPE_NORMAL
- en: Function Calling with Multiple Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can even specify multiple functions to “call” from. This is particularly
    useful when we have a natural language interface sitting atop multiple APIs. Let’s
    illustrate this with an example.
  prefs: []
  type: TYPE_NORMAL
- en: To complement our weather API, I have modelled a news [headline API](https://gist.github.com/john-adeojo/d90431d2d6847c01af3fbe497b1267ad),
    which generates a mock news headline based on a topic.
  prefs: []
  type: TYPE_NORMAL
- en: The topic itself will be requested from a natural language query, which we can
    parse using function calling.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add this to our existing function call. Here’s how it appears:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Script by Author: Function call example with two functions'
  prefs: []
  type: TYPE_NORMAL
- en: Because we have set the “function_call” parameter to “auto”, the large language
    model can deduce the most suitable function to call based solely on the query.
    Let’s see how this works for two different queries.
  prefs: []
  type: TYPE_NORMAL
- en: query_1 = "What's the temperature forecast in NYC at the end of September 2023?"
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Response from query 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s run the multi-function function call on a different query.
  prefs: []
  type: TYPE_NORMAL
- en: query_2 = "Give me the latest headline news on Berlin"
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Response from query 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In both cases, the function call has correctly selected which function to get
    the arguments for based on the queries.
  prefs: []
  type: TYPE_NORMAL
- en: What If We Don’t Use It?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, you might be asking yourself: “This is great, but can’t I achieve
    the same result with the chat completion API and a prompt? Why do we need function
    calling at all?”'
  prefs: []
  type: TYPE_NORMAL
- en: Well, the short answer is structure. While the chat completion API is trained
    to respond to a user query, you can prompt it to perform a “function call”, but
    the output you get may not be structured, making it difficult to parse the arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider this for example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Script by Author: Chat completion API for parsing arguments'
  prefs: []
  type: TYPE_NORMAL
- en: Here we have skipped function calling altogether and simply asked the chat completion
    API to respond with our arguments with some prompting.
  prefs: []
  type: TYPE_NORMAL
- en: 'And the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Although the answer is correct, it’s more difficult to parse as an argument
    because it is unstructured.
  prefs: []
  type: TYPE_NORMAL
- en: There is also the issue of consistency. You can attempt to enforce some structure
    through prompting, but the responses may not always be structured as you desire.
  prefs: []
  type: TYPE_NORMAL
- en: Function calling guarantees a structured response every time, making it a more
    reliable method of parsing arguments to feed a downstream function.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Function calling opens the door to the development of a host of new LLM-based
    applications. We can now consistently generate structured outputs from unstructured
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to explore how you can build your first LLM app, read this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-build-an-llm-application-360848c957db?source=post_page-----e35bdac88ae7--------------------------------)
    [## How to Build an LLM Application'
  prefs: []
  type: TYPE_NORMAL
- en: Using Langchain and OpenAI to Build LLM Centred Apps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-build-an-llm-application-360848c957db?source=post_page-----e35bdac88ae7--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading.
  prefs: []
  type: TYPE_NORMAL
- en: The full notebook, is available via my [GitHub](https://github.com/john-adeojo/function_calling_tutorial)
    repo. There is also a live video tutorial on [YouTube](https://youtu.be/VswwV9RJN7s).
  prefs: []
  type: TYPE_NORMAL
- en: If you’re keen to enhance your skills in artificial intelligence, join the waiting
    list for [my course](https://www.data-centric-solutions.com/course), where I will
    guide you through the process of developing large language model powered applications.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re seeking AI-transformation for your business, book a discovery call
    today.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.brainqub3.com/?source=post_page-----e35bdac88ae7--------------------------------)
    [## Brainqub3 | AI software development'
  prefs: []
  type: TYPE_NORMAL
- en: At Brainqub3 we develop bespoke AI software. We create qub3s, advanced artificial
    brains, using the latest AI to…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.brainqub3.com](https://www.brainqub3.com/?source=post_page-----e35bdac88ae7--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: For more insights on artificial intelligence, data science, and large language
    models you can subscribe to the [YouTube](https://www.youtube.com/channel/UCkXe-exqi25V4GnZendgEaA)
    channel.
  prefs: []
  type: TYPE_NORMAL
