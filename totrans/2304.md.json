["```py\nimport numpy as np\nimport pandas as pd\nfrom sklearn.datasets import load_wine\n\ndata = load_wine()\nX = pd.DataFrame(data=data.data, columns=data.feature_names)\ny = pd.DataFrame(data=data.target, columns=['class'])\ndf = pd.concat([X, y], axis=1)\ndf.head()\n```", "```py\nfrom sklearn.model_selection import KFold\nfrom sklearn import svm\n\nkf = KFold(n_splits=10)\n# a list for keeping training index, testing index and obtained score\nkeep = []      \nfor train, test in kf.split(df):\n    X_train = df.iloc[list(train),:-1]\n    y_train = df.iloc[list(train),-1]\n    X_test = df.iloc[list(test),:-1]\n    y_test = df.iloc[list(test),-1]\n    clf = svm.SVC(kernel='linear').fit(X_train, y_train)\n    score = clf.score(X_test, y_test)\n\n    keep.append([train, test, score])\n    print(score)\n```", "```py\ndef create_df(input_):\n    df_train = pd.DataFrame(zip(input_[0], len(input_[0])*['train']),\n                            columns = ['index','group'])\n    df_test = pd.DataFrame(zip(input_[1], len(input_[1])*['test']),\n                           columns = ['index','group'])\n    df_comb = pd.concat([df_train, df_test])\n    df_comb['score'] = len(df_comb)*[input_[2]]\n    return df_comb\n\n#create a DataFrame from the list\nkeep_df = [create_df(i) for i in keep]\ndf_in = pd.concat(keep_df)\ndf_in.reset_index(inplace=True, drop=True)\ndf_in.head()\n```", "```py\n#create a list of numbers for assigning the n th iteration\nlist_num = [i[0] + 1 for i in list(enumerate(keep))]\nlist_num.reverse()\n\nlist_it = [len(df)*[i] for i in list_num]\ndf_kf = pd.DataFrame(sum(list_it,[]), columns=['CV iteration'])\ndf_kf.reset_index(inplace=True, drop=True)\n\ndf_cv = pd.concat([df_in, df_kf], axis=1)\ndf_cv.head()\n```", "```py\nimport plotly.express as px\nfig1 = px.scatter(df_cv, x='index', y='CV iteration', color='group',\n                  color_discrete_map={'test':'red','train':'blue'})\n\nfig1.show()\n```", "```py\ndf_score = df_cv[df_cv['group'].isin(['test'])]\ndf_score.head()\n```", "```py\nimport plotly.express as px\nfig2 = px.scatter(df_score, x='index', y='CV iteration', color='score',\n                  color_continuous_scale=px.colors.sequential.YlOrRd_r,\n                  range_color=(0.6,1))\nfig2.update_layout(coloraxis_colorbar_x=-0.15)\nfig2.show()\n```", "```py\nimport plotly.express as px\nfig1 = px.scatter(df_cv, x='index', y='CV iteration', color='group',\n                 color_discrete_map={'test':'red','train':'blue'})\n\nfig2 = px.scatter(df_score, x='index', y='CV iteration', color='score',\n                  color_continuous_scale=px.colors.sequential.YlOrRd_r,\n                  range_color=(0.65,1))\nfig2.update_layout(coloraxis_colorbar_x=-0.15)\n\nfig2.add_traces(list(fig1.select_traces()))\nfig2.show()\n```", "```py\nfrom sklearn.model_selection import ShuffleSplit\n\nkf = ShuffleSplit(n_splits=10, test_size=0.25, random_state=15)\nkeep = []\nfor train, test in kf.split(df):\n    X_train = df.iloc[list(train),:-1]\n    y_train = df.iloc[list(train),-1]\n    X_test = df.iloc[list(test),:-1]\n    y_test = df.iloc[list(test),-1]\n    clf = svm.SVC(kernel='linear', C=1).fit(X_train, y_train)\n    score = clf.score(X_test, y_test)\n    keep.append([train, test, score])\n    print(score)\n```", "```py\n#create a DataFrame from the list\nkeep_df = [create_df(i) for i in keep]\ndf_in = pd.concat(keep_df)\ndf_in.reset_index(inplace=True, drop=True)\n\n#create a list of numbers for assigning the nth iteration \nlist_num = [i[0] + 1 for i in list(enumerate(keep))]\nlist_num.reverse()\n\nlist_it = [len(df)*[i] for i in list_num]\ndf_kf = pd.DataFrame(sum(list_it,[]), columns=['CV iteration'])\ndf_kf.reset_index(inplace=True, drop=True)\n\ndf_cv = pd.concat([df_in, df_kf], axis=1)\ndf_cv.head()\n```", "```py\nimport plotly.express as px\nfig1 = px.scatter(df_cv, x='index', y='CV iteration', color='group',\n                  color_discrete_map={'test':'red','train':'blue'})\n\nfig1.show()\n```", "```py\ndf_score = df_cv[df_cv['group'].isin(['test'])]\ndf_score.head()\n```", "```py\nimport plotly.express as px\nfig2 = px.scatter(df_score, x='index', y='CV iteration', color='score',\n                  color_continuous_scale=px.colors.sequential.YlOrRd_r,\n                  range_color=(0.6,1))\n\nfig2.update_layout(coloraxis_colorbar_x=-0.15)\nfig2.show()\n```", "```py\nimport plotly.express as px\nfig2 = px.scatter(df_score, x='index', y='CV iteration',\n                  size=[i**20 for i in df_score['score']], color='score',\n                  color_continuous_scale=px.colors.sequential.YlOrRd_r,\n                  range_color=(0.8,1))\nfig2.update_layout(coloraxis_colorbar_x=-0.15)\nfig2.update_traces(marker_line_width = 0.2)\nfig2.show()\n```", "```py\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom meteostat import Point, Daily\n\n# set date and GPS location\nstart = datetime(2010, 1, 1)\nend = datetime(2022, 12, 31)\nlocation = Point(40.75, -73.98)\n\ndata = Daily(location, start, end)\ndata = data.fetch()\ndata.head()\n```", "```py\nplt.figure(figsize=(10,5))\nsns.set_style('darkgrid')\nsns.lineplot(data=data, x=\"time\", y=\"tavg\")\nplt.show()\n```", "```py\n# add a 'month-year' column \ndata.reset_index(inplace=True)\ndata['my'] = [str(i)[0:7] for i in data['time']]\n\n# group by to get average monthly data\ndata_g = data.groupby(['my']).mean()\ndata_g.reset_index(inplace=True)\ndata_g['my'] = data_g['my'].astype('datetime64[ns]')\ndata_g.set_index('my', inplace=True)\ndata_g.head()\n```", "```py\nfrom sklearn.model_selection import TimeSeriesSplit\ntscv = TimeSeriesSplit(n_splits=5)\n\nkeep = []\nfor train_p, test_p in tscv.split(data_g.tavg):\n    keep.append([train_p, test_p])\n\n# create DataFrame from each TimeSeriesSplit and keep them in a list\nkeep_df = []\nfor i in keep:\n    df_train = pd.DataFrame(zip(i[0], ['train']*len(i[0])),\n                            columns=['index','group'])\n    df_test = pd.DataFrame(zip(i[1], ['test']*len(i[1])),\n                           columns=['index','group'])\n    df = pd.concat([df_train, df_test], axis=0)\n    keep_df.append(df)\n```", "```py\nlist_num = [i[0] for i in list(enumerate(keep))]\nlist_num.reverse()\nlist_r = []\nfor i,j in zip(keep_df, list_num):\n    i['k_fold']=[j]*len(i)\n    list_r.append(i)\n\ndf_p = pd.concat(list_r, axis=0)\ndf_p.head()\n```", "```py\nimport plotly.express as px\nfig = px.scatter(df_p, x='index', y='k_fold', color='group',\n                 color_discrete_map={'test':'red','train':'blue'})\n\nfig.update_layout(yaxis_showticklabels=False)\nfig.show()\n```", "```py\nimport pmdarima as pm\n\nfor train_p, test_p in tscv.split(data_g.tavg):\n    train = np.array(list(data_g.iloc[train_p,:]['tavg']))\n    test = np.array(list(data_g.iloc[test_p,:]['tavg']))\n    # fiting the model\n    model = pm.auto_arima(train, seasonal=True, m=3)\n    # forecasting\n    forecasts = model.predict(len(test))\n\n    df_tr = pd.DataFrame(data_g.iloc[train_p,:]['tavg'])\n    df_tr.reset_index(inplace=True)\n    df_ts = pd.DataFrame(data_g.iloc[test_p,:]['tavg'])\n    df_ts.reset_index(inplace=True)\n    df_ts['forecast'] = forecasts\n    df_c = pd.concat([df_tr, df_ts], axis=0)\n    df_index = pd.DataFrame(data_g.index)\n    df_p = pd.merge(df_index, df_c, on='my', how='left')\n\n    # Visualize the forecasts\n    fig, ax = plt.subplots(figsize=(10.6,2))\n    ax.set(xlim=(data_g.index[0], data_g.index[-1]))\n    sns.lineplot(x=df_p.my, y=df_p.tavg, lw=2)\n    sns.lineplot(x=df_p.my, y=df_p.forecast, lw=2, linestyle='dashed')\n    plt.show()\n```"]