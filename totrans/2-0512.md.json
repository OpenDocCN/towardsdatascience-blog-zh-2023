["```py\nimport torch\nfrom torch.utils.data import Dataset\nfrom torchvision import datasets\nfrom torchvision.transforms import ToTensor\n\nclass DataModule:\n    def __init__(self, bs = 64) -> None:\n        self.bs = bs\n        self.training_data = datasets.FashionMNIST(\n            root=\"data\",\n            train=True,\n            download=True,\n            transform=ToTensor()\n        )\n        self.valid_data = datasets.FashionMNIST(\n            root=\"data\",\n            train=False,\n            download=True,\n            transform=ToTensor()\n        )\n\n    def train_dataloader(self):\n        return torch.utils.data.DataLoader(self.training_data, batch_size=self.bs, shuffle=True)\n\n    def val_dataloader(self):\n        return torch.utils.data.DataLoader(self.valid_data, batch_size=4 * self.bs, shuffle=False)\n```", "```py\nclass MNISTNet(nn.Module):\n    def __init__(self) -> None:\n        super(MNISTLogistic, self).__init__()\n        self.flatten = nn.Flatten()\n        self.lin = nn.Linear(784,10)\n\n    def forward(self, xb):\n        return self.lin(torch.flatten(xb,1))\n\ndef fit(self: nn.Module, datamodule, epochs:int, loss_fn = nn.CrossEntropyLoss()):\n    train_dataloader = datamodule.train_dataloader()\n    val_dataloader = datamodule.val_dataloader()\n\n    opt = configure_optimizer(self)\n    train_dataloader = datamodule.train_dataloader()\n\n    for epoch in range(epochs):\n        self.train()\n        for xb, yb in train_dataloader:\n            pred = self(xb)\n            loss = loss_fn(pred, yb)\n            loss.backward()\n            opt.step()\n            opt.zero_grad()\n        self.eval()\n        with torch.no_grad():\n            valid_loss = sum(loss_fn(self(xb), yb) for xb, yb in val_dataloader)\n\nMNISTLogistic.fit = fit\n```", "```py\n!pip install tqdm\nfrom tqdm import tqdm\n\nfor index, (xb,yb) in tqdm(enumerate(train_loader), total = len(train_loader))\n  pred = self(xb)\n  loss = loss_fn(pred, yb)\n  loss.backward()\n  opt.step()\n  opt.zero_grad()\n```", "```py\nfrom sklearn.metrics import classification_report\npreds = [0, 1, 1, 0, 1, 0, 1, 1, 0, 1]\nlabels = [1, 0, 0, 1, 1, 1, 0, 0, 1, 1,]\nprint(classification_report(labels, preds))\n```"]