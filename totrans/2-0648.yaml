- en: 'Data Modeling for Mere Mortals, Part 1: What is Data Modeling?'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/data-modeling-for-mere-mortals-part-1-what-is-data-modeling-103eb184930e](https://towardsdatascience.com/data-modeling-for-mere-mortals-part-1-what-is-data-modeling-103eb184930e)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data modeling can sometimes seem intimidating (all those complicated diagrams!),
    but it doesn’t have to be
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://datamozart.medium.com/?source=post_page-----103eb184930e--------------------------------)[![Nikola
    Ilic](../Images/9fab894b9696c0dfd80c5173188b720b.png)](https://datamozart.medium.com/?source=post_page-----103eb184930e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----103eb184930e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----103eb184930e--------------------------------)
    [Nikola Ilic](https://datamozart.medium.com/?source=post_page-----103eb184930e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----103eb184930e--------------------------------)
    ·12 min read·Aug 2, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f68e515f2767c1fe53db6c0958c7de5f.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: '[Photo by Alina Grubnyak on Unsplash](https://unsplash.com/de/fotos/ZiQkhI7417A)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: In recent years, I’ve done dozens of trainings on various data platform topics,
    for all kinds of audiences. When teaching various data platform concepts and techniques,
    I find one of the concepts particularly intimidating for many business analysts,
    especially those who are just starting their journey. And that is ***the concept
    of data modeling***.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Why is data modeling sometimes intimidating?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maybe because you feel lost when you see all these diagrams that look so complex
    and complicated…
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: But, data modeling is not about diagrams. It’s about creating trust, a shared
    understanding between the business and data professionals, with the final goal
    of providing increased business value with data.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: If we agree that data modeling is about creating trust, I believe we can also
    agree that trust can’t be easily built — a certain amount of time and effort should
    be taken into consideration. And, time and effort are not something that you take
    for granted — it’s something that you need to INVEST in!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: So, we can rightly assume that ***data modeling is a kind of investment***.
    An investment that should bring more stability and adaptability to your business.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Think of it like investing in building a house.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/50257504d6d6f6b9267a864dad553f5b.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: '[Photo by Pixabay on Pexels](https://www.pexels.com/de-de/foto/gelbe-und-schwarze-schwere-ausrustung-nahe-unvollendetem-gebaude-534220/)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, you can choose to go the quick and easy way by simply putting building
    blocks directly on the ground, and it can possibly work just fine for some time,
    until some new circumstances occur — think about an earthquake or thunderstorm,
    for example. And, your house will probably be damaged. But, it’s not only the
    house that’s going to be damaged — *your trust will also be damaged:* people who
    live with you, your neighbors, friends will realize that you didn’t invest the
    proper amount of time and effort in advance to prevent such a bad scenario.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，你可以选择快速简便的方法，将建筑块直接放在地面上，这在某段时间内可能会有效，直到出现新的情况——例如地震或雷暴。你的房子可能会受到损坏。但不仅仅是房子会受损——*你的信任也会受到损害：*与你同住的人、你的邻居、朋友会意识到你没有投入足够的时间和精力来预防这种不良情况。
- en: Now, let’s assume that you decided to take another path — more demanding at
    the very beginning, which will require more time and effort from your side. You
    established a proper foundation for the house, secured things under the ground,
    and then built a house on top of it. Now, your house will be more stable and can
    adapt to future challenges.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设你决定采取另一条路径——在一开始更具挑战性，这将需要你投入更多的时间和精力。你为房子奠定了一个良好的基础，固定了地下的东西，然后在上面建造了房子。现在，你的房子会更稳固，可以适应未来的挑战。
- en: '![](../Images/bbbe26abe9531be080e4ceb0120bb866.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bbbe26abe9531be080e4ceb0120bb866.png)'
- en: '[Photo by Valeria Miller on Pexels](https://www.pexels.com/de-de/foto/foto-von-palmen-und-blumen-in-der-nahe-eines-gebaudes-2587054/)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[照片由Valeria Miller拍摄，来源于Pexels](https://www.pexels.com/de-de/foto/foto-von-palmen-und-blumen-in-der-nahe-eines-gebaudes-2587054/)'
- en: Since we explained why it is of paramount importance to invest time and effort
    in building a data model, let’s now examine various types of data models and how
    they fit into the big data-modeling picture.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经解释了为什么投入时间和精力构建数据模型至关重要，现在让我们审视各种类型的数据模型以及它们如何融入大数据建模的全貌。
- en: Conceptual Data Model
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概念数据模型
- en: Usually, the starting point is creating a conceptual data model. This is a high-level,
    let’s say 10,000-feet high perspective on the business needs for data. As we are
    talking about the high-level perspective, the main goal of the conceptual data
    model is to simplify business processes and entities important in day-to-day business
    workflow.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，起点是创建一个概念数据模型。这是一个高层次的视角，可以说是从10,000英尺的高度来看待数据的业务需求。由于我们讨论的是高层次的视角，概念数据模型的主要目标是简化日常业务流程和关键实体。
- en: 'In this stage, we are compiling a big picture: what are the key entities in
    our business workflow? How do they correlate with each other? The key characteristic
    of the conceptual data model is that it should communicate in easy-to-understand
    terms. Simply said, leverage a common language that business users and non-technical
    individuals can easily understand.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们在编制一个大图景：在我们的业务流程中，关键实体是什么？它们之间是如何关联的？概念数据模型的关键特征是它应以易于理解的术语进行沟通。简而言之，利用商业用户和非技术人员容易理解的通用语言。
- en: I know I told you that data modeling is not about diagrams, but still, we need
    to visualize the process of creating a data model. I’ll first give you a basic
    example of the conceptual data model.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道我告诉过你数据建模不是关于图表的，但我们仍然需要可视化创建数据模型的过程。我会首先给你一个概念数据模型的基本示例。
- en: '![](../Images/5336218ffe32f2b518f8f3f6e4b6d0be.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5336218ffe32f2b518f8f3f6e4b6d0be.png)'
- en: Image by author
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: In this illustration, you can identify various entities. Stadium, Event, Customer,
    Attendee, and Ticket. You may also notice how these entities are interconnected.
    This high-level overview provides a simplified picture of the business workflow
    within the organization.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个插图中，你可以识别出各种实体。体育场、事件、客户、观众和票务。你还可以注意到这些实体之间是如何互相连接的。这种高层次的概述提供了组织内业务流程的简化图景。
- en: Now, let’s move on and explain in common language what we see in this illustration.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续用通俗的语言解释一下这张插图中所展示的内容。
- en: Our first entity is ***Stadium***. Stadium has a name and is located in a specific
    country and city, which uniquely identifies that stadium. Stadium may host many
    events, and there can be many attendees coming to these events.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个实体是***体育场***。体育场有一个名称，并且位于一个特定的国家和城市，这些信息唯一地标识了该体育场。体育场可能会举办许多活动，可能会有很多观众来参加这些活动。
- en: Next, we have an ***Event***. A specific event cannot exist outside of the Stadium
    where it is scheduled to be held. An event can be attended by an attendee, and
    there can be many attendees for one event.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有一个***事件***。一个特定的事件不能存在于其计划举办的体育场之外。一个事件可以由一个参与者出席，并且一个事件可以有许多参与者。
- en: '***Attendee*** is the entity that attends the event. They can also be a customer
    of the Stadium entity, in case they’ve visited a stadium shop, or similar. The
    key difference between the Customer and Attendee is that the Customer doesn’t
    necessarily need to attend a specific event at the stadium.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '***参与者***是参加活动的实体。他们也可以是**体育场**实体的顾客，比如他们曾经访问过体育场商店或类似场所。**顾客**和***参与者***的主要区别在于，顾客不一定需要参加体育场的特定活动。'
- en: '***Customer*** may have a relation to Stadium, like I said, for example by
    visiting a stadium museum or buying at a stadium fan shop, but that doesn’t make
    them attendees of the event.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '***顾客***可能与体育场有关，例如，通过参观体育场博物馆或在体育场球迷商店购物，但这并不意味着他们是活动的参与者。'
- en: Finally, a ***Ticket*** is an entity that represents confirmation that the attendee
    will attend a specific event. Each ticket has a unique identifier, as it would
    be really awkward if two or more attendees get the ticket with the same number.
    Although the ticket is uniquely identified, one attendee can purchase multiple
    tickets.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，***票务***是一个实体，代表确认参与者将参加特定的活动。每张票都有一个唯一的标识符，因为如果两个或更多参与者得到相同编号的票就会很尴尬。尽管票务有唯一的标识，单个参与者可以购买多张票。
- en: Why do we need a conceptual data model?
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们为什么需要概念数据模型？
- en: 'Now that we’ve explained the core components of conceptual data modeling, you
    might be wondering: Why is this important? Why should someone spend time and effort
    describing all the entities and relations between them?'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经解释了概念数据建模的核心组件，你可能会想：这为什么重要？为什么有人要花时间和精力描述所有实体及其之间的关系？
- en: Remember when we were talking about building trust between business and data
    personas? That’s what the conceptual data model is all about. Ensuring that business
    stakeholders will get what they need, explained in a common language so that they
    can easily understand the entire workflow. Setting up a conceptual data model
    also provides business stakeholders with the possibility to identify a whole range
    of business questions that need to be answered before building a physical data
    model.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们讨论过如何在业务和数据角色之间建立信任吗？这正是概念数据模型的全部内容。确保业务相关者能够获得他们所需的信息，以通用语言解释，以便他们能够轻松理解整个工作流程。建立概念数据模型还为业务相关者提供了识别一系列需要在构建物理数据模型之前回答的业务问题的可能性。
- en: 'Some of the questions business may ask are: are the customer and attendee the
    same entity (and if not, why)? Can one attendee buy multiple tickets? What uniquely
    identifies a specific event? And many more, of course…'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 业务可能会问的一些问题包括：顾客和参与者是同一个实体吗（如果不是，为什么）？一个参与者可以购买多张票吗？什么唯一标识一个特定事件？当然还有更多问题……
- en: Additionally, the conceptual data model depicts sometimes very complex business
    processes in an easier-to-consume way. Instead of going through pages and pages
    of written documentation, one can take a look at the illustration of entities
    and relationships, all explained in a user-friendly way, and quickly understand
    the core elements of the business process.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，概念数据模型有时以更易于理解的方式展示非常复杂的业务流程。与其翻阅一页又一页的书面文档，不如查看实体和关系的图示，所有内容都以用户友好的方式解释，从而快速理解业务流程的核心要素。
- en: Logical Data Model
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逻辑数据模型
- en: Once business and data teams align on the conceptual data model, the next step
    in the data modeling process is designing a logical data model. In this stage,
    we are building upon the previous step, by identifying the exact structure of
    the entities and providing more details about the relationships between these
    entities. In this stage, you should identify all the attributes of interest for
    the specific entity, as well as relationship cardinality.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦业务和数据团队就概念数据模型达成一致，数据建模过程的下一步是设计逻辑数据模型。在这一阶段，我们在前一步的基础上进行，确定实体的具体结构，并提供有关这些实体之间关系的更多细节。在这一阶段，你应该识别特定实体的所有相关属性，以及关系的基数。
- en: Please pay attention that, same as during the conceptual data modeling phase,
    we still don’t talk about the specific platform or solution. Like in the previous
    stage, our focus is on understanding business requirements and how these requirements
    can be efficiently translated into data model.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与概念数据建模阶段一样，我们仍然不讨论具体的平台或解决方案。与之前的阶段一样，我们的重点是理解业务需求以及如何将这些需求有效地转化为数据模型。
- en: There are several steps to be performed to ensure that the conceptual data model
    successfully evolved into a logical data model.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为确保概念数据模型成功演变为逻辑数据模型，需要执行几个步骤。
- en: '***Identify entity attributes***'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***识别实体属性***'
- en: '***Identify candidate keys*** — find out which attribute, or set of attributes,
    uniquely identify a specific entity'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***识别候选键*** — 找出哪个属性或属性集可以唯一标识特定实体'
- en: '***Choose primary keys*** — based on the findings from the previous step, set
    the primary key of the entity'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***选择主键*** — 根据上一阶段的发现，设置实体的主键'
- en: '***Apply normalization/denormalization to the data model*** — we’ll discuss
    normalization and denormalization in more detail in one of the next articles.
    At this moment, keep in mind that normalization should eliminate data redundancy
    and is typical for OLTP systems. On the other hand, [denormalization](https://data-mozart.com/mastering-dp-500-exam-optimize-data-model-by-using-denormalization/)
    is predominantly used in analytical systems, or OLAP, to minimize the impact of
    JOIN operations and speed up data reading'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***对数据模型应用规范化/反规范化*** — 我们将在接下来的文章中更详细地讨论规范化和反规范化。此时，请记住，规范化应消除数据冗余，通常用于OLTP系统。另一方面，[反规范化](https://data-mozart.com/mastering-dp-500-exam-optimize-data-model-by-using-denormalization/)主要用于分析系统或OLAP，以减少JOIN操作的影响并加快数据读取速度'
- en: '***Set relationships between entities*** — validate how various entities interconnect
    and, if needed, reduce the complexity of having multiple relationship dependencies,
    by breaking down one entity into multiple entities'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***设置实体间关系*** — 验证各种实体如何互联，如果需要，通过将一个实体拆分为多个实体来减少多个关系依赖的复杂性'
- en: '***Identify the relationship cardinality*** — another extremely important step.
    Relationship cardinality defines how many instances of one entity are related
    to instances of another entity. There are three main cardinality types: one-to-one
    (1:1) one-to-many (1:M) and many-to-many (M:M)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***识别关系基数*** — 另一个极其重要的步骤。关系基数定义了一个实体的多少实例与另一个实体的实例相关联。有三种主要的基数类型：一对一（1:1）、一对多（1:M）和多对多（M:M）'
- en: '***Iterate and fine-tune*** — in real life, it’s almost impossible to find
    the data model that suits everyone’s needs and fulfills all the requirements immediately.
    Therefore, it’s of key importance to always ask for feedback from business stakeholders
    and, based on the feedback received, fine-tune the logical data model, before
    materializing it in physical form'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***迭代和优化*** — 在现实中，几乎不可能立刻找到适合所有人需求并满足所有要求的数据模型。因此，始终从业务相关者那里征求反馈至关重要，并根据收到的反馈优化逻辑数据模型，然后再将其转化为物理形式'
- en: '![](../Images/1d9a4273a56be4a1437b8a5811cbad4c.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1d9a4273a56be4a1437b8a5811cbad4c.png)'
- en: Image by author
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Why do we need a logical data model?
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我们需要逻辑数据模型？
- en: Unlike the conceptual data model, where the benefits of investing time and effort
    in building it were not so obvious, I believe that for the logical data model,
    potential gains are more evident. First of all, the logical data model serves
    as the best quality assurance test, because it can enclose gaps and issues in
    understanding the business workflow, thus saving you a lot of time and effort
    down the road. It’s much easier and less costly, to fix these issues at this stage,
    before locking into a specific platform and building an inefficient physical data
    model on it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与概念数据模型不同，虽然在构建概念数据模型时投资时间和精力的好处并不明显，但我认为对于逻辑数据模型，其潜在收益更加明显。首先，逻辑数据模型作为最优质的质量保证测试，因为它可以发现业务流程中的差距和问题，从而节省大量时间和精力。在确定特定平台并在其上构建低效的物理数据模型之前，在此阶段修复这些问题要容易得多且成本更低。
- en: As we’ve already mentioned, one of the key characteristics of a good logical
    data model is that iteration and fine-tuning are continuous processes. Therefore,
    building a logical data model can be considered part of the agile data modeling
    cycle, which ensures more robust, scalable, and future-proof models.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，一个好的逻辑数据模型的关键特征之一是迭代和微调是一个持续的过程。因此，构建逻辑数据模型可以被视为敏捷数据建模周期的一部分，这确保了更强健、可扩展和面向未来的模型。
- en: The ultimate benefit of the logical data model is that it serves as a blueprint
    for the final implementation of the business logic through the physical data model.
    Relying on a well-designed logical data model enables database engineers and data
    architects to create more efficient physical database systems.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑数据模型的终极好处在于，它作为业务逻辑最终实现的蓝图，通过物理数据模型得以实现。依赖于精心设计的逻辑数据模型，数据库工程师和数据架构师能够创建更高效的物理数据库系统。
- en: Physical Data Model
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物理数据模型
- en: A physical data model represents that final touch — how the data model will
    be implemented in the specific database. Unlike the conceptual data model and
    the logical data model, which are platform and solution-agnostic, physical implementation
    requires defining low-level detail that may be specific for the certain database
    provider.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 物理数据模型代表了最终的细节 — 数据模型将在特定的数据库中如何实现。与概念数据模型和逻辑数据模型不同，后者是平台和解决方案无关的，物理实现需要定义可能特定于某些数据库提供商的低级细节。
- en: Transitioning from a logical data model to a physical data model requires more
    iterations and fine-tuning of the entities and relationships defined in the logical
    data model.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从逻辑数据模型过渡到物理数据模型需要对逻辑数据模型中定义的实体和关系进行更多的迭代和微调。
- en: '![](../Images/91d7df893b720e248bcba07cc51cb286.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/91d7df893b720e248bcba07cc51cb286.png)'
- en: Image by author
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'The same as for logical data model, there is a whole list of necessary steps
    to make your data model implementation success, so let’s focus on the most important
    ones:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 与逻辑数据模型一样，成功实现数据模型的过程需要完成一整套必要的步骤，因此，让我们关注其中最重要的一些：
- en: '***Choose the platform*** — this is a step that you can’t skip, because this
    decision will shape your future design principles'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***选择平台*** — 这是一个无法跳过的步骤，因为这个决策将塑造你未来的设计原则。'
- en: '***Translate logical entities into physical tables*** — the logical entity
    is just that — a logical entity, and it exists on a more abstract level. Since
    a real database doesn’t support that level of abstraction, we need to translate
    that entity into a physical unit. This means we need to provide information to
    the underlying platform on how the data should be stored — in simple words, define
    the data type of each entity attribute — be it a whole number, decimal number,
    or plain text. Additionally, each physical table should rely on keys to ensure
    data integrity — and it’s your task during the physical data modeling process
    to set primary, foreign, and unique keys.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***将逻辑实体转换为物理表*** — 逻辑实体只是逻辑上的存在，存在于更抽象的层次上。由于实际数据库不支持这种抽象层次，我们需要将该实体转换为物理单元。这意味着我们需要向底层平台提供如何存储数据的信息
    — 简单来说，就是定义每个实体属性的数据类型 — 无论是整数、十进制数还是普通文本。此外，每个物理表应依赖于键来确保数据完整性 — 在物理数据建模过程中，你的任务是设置主键、外键和唯一键。'
- en: '***Establish relationships*** — based on the key columns, the next step in
    the physical data modeling workflow is to create relationships between the tables.'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***建立关系*** — 基于关键列，物理数据建模工作流中的下一步是创建表之间的关系。'
- en: '***Apply normalization/denormalization*** — similar to what we’ve already examined
    in the logical data modeling phase, check and confirm that tables are, depending
    if you’re designing a transactional or analytical system, normalized or denormalized
    to a degree that ensures the most efficient workload for the specific system —
    don’t forget, in OLTP systems, tables should be normalized (in most scenarios)
    to a 3rd normal form to reduce data redundancy, and efficiently support **WRITE**
    operations (insert, update), while in OLAP systems data may be denormalized to
    eliminate the number of joins, to make **READ** operations more performant'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***应用规范化/非规范化*** — 类似于我们在逻辑数据建模阶段已经检查过的，检查并确认表格是否根据你设计的是事务系统还是分析系统，规范化或非规范化到确保特定系统工作负载最有效的程度
    — 不要忘记，在OLTP系统中，表格应规范化（在大多数情况下）到第三范式，以减少数据冗余，并高效支持**写入**操作（插入、更新），而在OLAP系统中，数据可能被非规范化以消除连接的数量，使**读取**操作更具性能。'
- en: '***Define table constraints*** — there are dozen of constraints that you may
    apply to ensure data integrity. It’s not only about the keys, which we’ve already
    mentioned previously, but also other logical checks. I’ll give you a simple example:
    let’s imagine that your table contains a column that stores the data about students’
    grades in college. Can a student be graded with a grade 100? Or 1000? Or 1? Of
    course not! There is a finite list of possible grades, in the range of 5 to 10
    (or A to F in some other systems). So, why not define this constraint on the column,
    thus preventing the insertion of values that don’t make sense — be it due to an
    error, or by leaving the end user possibility to enter whatever they want?'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***定义表约束*** — 你可以应用许多约束以确保数据完整性。这不仅仅是关于我们之前提到的键，还有其他逻辑检查。我给你一个简单的例子：假设你的表中有一个列存储关于学生大学成绩的数据。学生可以获得100分吗？或者1000分？或者1分？当然不行！有一个有限的可能成绩列表，在5到10之间（或者在其他系统中是A到F）。那么，为什么不在列上定义这个约束，从而防止插入不合逻辑的值
    — 无论是由于错误，还是让最终用户有可能输入他们想要的内容？'
- en: '***Create indexes and/or partitions*** — indexes and partitions are special
    physical data structures that “reside” within a table, and their main goal is
    to increase the efficiency of the data model. [Explaining indexes](https://data-mozart.com/rows-or-columns-where-should-i-put-my-index-on/)
    and [table partitioning](https://data-mozart.com/partitioning-why-you-need-to-consider-it/)
    is out of the scope of this article, but keep in mind that both these features
    may significantly affect the performance of your data model — both for good and
    bad! It’s fair to say, especially for indexes, that implementing an efficient
    indexing strategy is mastery on its own. Table partitioning represents a technique
    of splitting one big table into multiple smaller “sub-tables”, thus helping the
    database engine to reduce the scanning time during the query execution. A good
    example would be partitioning per calendar periods, let’s say years. Instead of
    keeping all the records in one huge, multi-million, or multi-billion row table,
    you can split this table and create multiple smaller “sub-tables” containing records
    for the specific year. Don’t be confused when I say “sub-tables” — these are not
    “real” new tables in your data model — everything is happening behind the scenes
    and it’s just the way the data is physically structured under the surface'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***创建索引和/或分区*** — 索引和分区是特殊的物理数据结构，它们“存在”于表中，其主要目标是提高数据模型的效率。[解释索引](https://data-mozart.com/rows-or-columns-where-should-i-put-my-index-on/)和[表分区](https://data-mozart.com/partitioning-why-you-need-to-consider-it/)超出了本文的范围，但请记住，这两种功能可能会显著影响数据模型的性能
    — 既有利也有弊！可以公平地说，尤其是对于索引，实现高效的索引策略本身就是一种精通。表分区是一种将一个大表拆分为多个较小的“子表”的技术，从而帮助数据库引擎在查询执行期间减少扫描时间。一个好的例子是按日历周期进行分区，比如按年份进行分区。与其将所有记录保存在一个庞大的、数百万行或数十亿行的表中，不如拆分这个表并创建多个包含特定年份记录的较小“子表”。当我说“子表”时不要感到困惑
    — 这些并不是你数据模型中的“真实”新表 — 一切都发生在幕后，这只是数据在底层物理结构的方式。'
- en: '***Extend with programmatic objects*** — almost every database management system
    will let you create various programmatic objects, such as stored procedures, functions,
    or triggers. Explaining each of these objects is out of the scope of this article,
    and they all serve different purposes and help you efficiently complete various
    tasks. However, their implementation is “de-facto” standard in almost every data
    platform solution, and it’s hard to find any OLTP or OLAP system which doesn’t
    rely on these objects'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***扩展程序化对象*** — 几乎每个数据库管理系统都允许你创建各种程序化对象，如存储过程、函数或触发器。解释这些对象中的每一个超出了本文的范围，它们各自有不同的用途，并帮助你高效地完成各种任务。然而，它们的实现几乎是每个数据平台解决方案中的“事实”标准，很难找到不依赖于这些对象的OLTP或OLAP系统。'
- en: Why do we need a physical data model?
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我们需要物理数据模型？
- en: With all points mentioned previously, the main benefit of having a physical
    data model in place is to ensure efficiency, optimal performance, and scalability.
    When we talk about efficiency, we are obviously having in mind the two most precious
    business assets — time and money. Unless you think that time = money, then we
    have only one asset to consider…
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 结合之前提到的所有要点，拥有一个物理数据模型的主要好处是确保效率、最佳性能和可扩展性。当我们谈论效率时，我们显然是在考虑两个最珍贵的业务资产 — 时间和金钱。除非你认为时间=金钱，否则我们只有一个资产需要考虑…
- en: '![](../Images/46e474581e7595487daf1dec1bba1b0f.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/46e474581e7595487daf1dec1bba1b0f.png)'
- en: '[Photo by Karolina Grabowska on Pexels](https://www.pexels.com/de-de/foto/geld-kasse-prufung-zahlen-4475523/)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[由 Karolina Grabowska 提供的照片，来自 Pexels](https://www.pexels.com/de-de/foto/geld-kasse-prufung-zahlen-4475523/)'
- en: To simplify — the more efficient your data model is, the more users it can serve,
    the more faster can serve them, which in the end in most cases brings more money
    to the business.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，你的数据模型越高效，它可以服务的用户就越多，服务他们的速度也会更快，这通常最终会带来更多的商业利润。
- en: Side-by-side comparison
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并排比较
- en: 'Here is a brief overview of the key characteristics of each of the data model
    types:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是每种数据模型类型的关键特征的简要概述：
- en: '![](../Images/2e53a29ebead985cdbbdb497ab789509.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2e53a29ebead985cdbbdb497ab789509.png)'
- en: Image by author
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Conclusion
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'I want you to remember three key things about data modeling:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你记住有关数据建模的三件关键事项：
- en: Never, ever underestimate the importance of the data modeling process and designing
    a proper data model! Can you “sneak” by without it? Of course, you can…But, same
    as with our example with the house, without a solid foundation, it’s a matter
    of time before you’ll start scratching your head.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 千万不要低估数据建模过程和设计合适数据模型的重要性！你可以“偷偷”绕过它吗？当然可以……但是，就像我们举的房子例子一样，没有坚实的基础，迟早你会开始挠头了。
- en: Saving time and effort to avoid building an efficient data model will create
    a technical debt that will cause investing much more time and resources to deal
    with it at a later stage.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节省时间和精力以避免构建高效数据模型将会产生技术债务，这会导致在后期需要投入更多的时间和资源来处理它。
- en: Always model the data with business in mind! Designing a data model for the
    sake of having one in place, or using a pre-defined “universal data modeling”
    template, doesn’t make any sense if that model is not capable of answering key
    business questions
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终以业务为导向来建模数据！为了建一个数据模型而设计数据模型，或使用预定义的“通用数据建模”模板，如果那个模型不能回答关键的业务问题，那是没有意义的。
- en: In the next part of the series, we’ll examine the wonderful world of dimensional
    data modeling…
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本系列的下一部分，我们将探讨维度数据建模的奇妙世界……
- en: Thanks for reading!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！
- en: '[Become a member and support thousands of authors on Medium!](https://datamozart.medium.com/membership)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[成为会员，支持 Medium 上的数千名作者！](https://datamozart.medium.com/membership)'
