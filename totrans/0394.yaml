- en: Bike-Sharing System Movements to the Metallica Concert in Tartu, Estonia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/bike-sharing-system-movements-to-the-metallica-concert-in-tartu-estonia-1af8361bc6f](https://towardsdatascience.com/bike-sharing-system-movements-to-the-metallica-concert-in-tartu-estonia-1af8361bc6f)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: GPS tracking visualization with Movingpandas and KeplerGl — Tutorial
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://bryanvallejo16.medium.com/?source=post_page-----1af8361bc6f--------------------------------)[![Bryan
    R. Vallejo](../Images/fd92974f57c72875cc133a2c959d64ca.png)](https://bryanvallejo16.medium.com/?source=post_page-----1af8361bc6f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1af8361bc6f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1af8361bc6f--------------------------------)
    [Bryan R. Vallejo](https://bryanvallejo16.medium.com/?source=post_page-----1af8361bc6f--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1af8361bc6f--------------------------------)
    ·9 min read·Jan 4, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6fea2e94047d72eff0d6ae35bdf5d6d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. The bike-sharing system moves to the Metallica concert’s
    bike station. July 18th of 2019, Tartu-Estonia
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The [Metallica concert in Tartu](https://www.metallica.com/tour/2019-07-18-tartu-estonia.html)
    (Estonia) was held on July 18th of 2019 at the Raadi Airfield at the backside
    of the Estonian National Museum (ERM). The event was sold-out to 60.000 people
    ([ERR, 2019](https://news.err.ee/963069/gallery-metallica-gives-sold-out-show-in-tartu)).
    The municipality suggested to visitors use public transportation including the
    bike-sharing system and to improve mobility in the city during the event the bike-sharing
    system included a virtual dock station called “Metallica parkla” where visitors
    can leave their bikes near the venue.
  prefs: []
  type: TYPE_NORMAL
- en: '[Web map of bike-sharing movements HERE](https://bryanvallejo16.github.io/bike-moves-metallica/root/metallica_moves.html)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Repository](https://github.com/bryanvallejo16/bike-moves-metallica)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The bike-sharing system in Tartu is a success in smart mobility. Bikes are efficient
    and make mobility easy around the city. The subscription is affordable and 500/750
    bikes are electric. Stations are spread out around the city so you can move wherever
    you need. The system was launched on June 2019 and after one month of usage, it
    was used to improve mobility in a 60k people event. The system gives real-time
    data of users locking and unlocking bikes. No doubt, Tartu’s bike-sharing system
    is a success. If you are willing to know more about the system you can check the
    [Tartu Smart Bike](https://ratas.tartu.ee/) website.
  prefs: []
  type: TYPE_NORMAL
- en: I was curious about what the bike-sharing system data looks like so I started
    looking for it. When I found it and after a quick exploration it was a surprise
    for me to notice that July 18th of 2019 was available. I had no doubt to check
    how the bike-sharing system worked during the Metallica concert and this is the
    reason why this story was written.
  prefs: []
  type: TYPE_NORMAL
- en: Objective
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To visualize the bike-sharing system dynamics on July 18th of 2019 in Tartu
    highlighting Metallica concert moves
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '***Bike-sharing system tracking data***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The data on bike-sharing system use on July 18th of 2019 can be found in the
    [Estonian Open Data](https://avaandmed.eesti.ee/datasets/tartu-linnavalitsuse-andmekogud-rattaringlus)
    portal and it is available for public use. It actually provides more days in July
    and the data is given in two different files: **locations** for GPS tracking data,
    and **routes** for Origin-Destination between bike stations. Files are given in
    .csv format.'
  prefs: []
  type: TYPE_NORMAL
- en: '- **LICENSE -**'
  prefs: []
  type: TYPE_NORMAL
- en: The data is under the license [Creative Commons Attribution-ShareAlike 3.0
  prefs: []
  type: TYPE_NORMAL
- en: Unported (CC-BY-SA 3.0)](https://creativecommons.org/licenses/by-sa/3.0/) and
    we are free to share, copy, redistribute, adapt, remix, or built upon even for
    commercial purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Outcomes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A web map with KeplerGl showing the bike movements to the Metallica concert’s
    bike station
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/6fea2e94047d72eff0d6ae35bdf5d6d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. The bike-sharing system moves to the Metallica concert’s
    bike station. July 18th of 2019, Tartu-Estonia
  prefs: []
  type: TYPE_NORMAL
- en: A static map with QGIS showing the bike movements to the Metallica concert’s
    bike station
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/89820ef7e122a61861adf2f878a2acf3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. The bike moves to the Metallica concert. “Metallica parkla”
    as the ending station
  prefs: []
  type: TYPE_NORMAL
- en: Join my stories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to see more of my tutorials join me on Medium:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Join and get access to my tutorials as a member HERE](https://bryanvallejo16.medium.com/membership)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start this Python workflow start cloning this repository with the necessary
    data. It contains an empty notebook as a template that you can use to follow this
    practice.
  prefs: []
  type: TYPE_NORMAL
- en: '***Clone this Repository***:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[github.com/bryanvallejo16/bike-moves-metallica](https://github.com/bryanvallejo16/bike-moves-metallica)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this practice, I am using [Anaconda](https://www.anaconda.com/products/distribution)
    free version. Be sure that your environment has installed the needed libraries.
    I used in this analysis: geopandas 0.9.0, movingpandas 0.8rc1, keplergl 0.3.2
    , and NumPy 1.21.5.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s import the libraries
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's create a folder for our final map and outputs
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Visualizing the GPS tracking data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start reading the file with the GPS tracking of the bike users.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When you check `locations['coord_date'].unique()` you will notice that the data
    from July 18th contains more days. So, we need to remove those extra days because
    we are interested only in the 18th.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If you check again `locations['coord_date'].unique()` you will see that now
    we have only July 18th.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we need to set up a timestamp column named `t`that the library movingpandas
    is going to use to create the trajectories.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To be sure that the route id is not confused with numbers and then suddenly
    decimals start appearing we will change the route codes to strings.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Then, we will get a clean table selecting only the columns that we need.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Quickly, we will check if there are nan values that we need to remove. Fortunately,
    there are no nan values here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Then, a quick view with `locations.head()`
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6b8639a876765d4997a5c4aa97c40002.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Locations table ready.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s print some information about the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Create trajectories with Movingpandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start, we will create a new GeoDataFrame adding a geometry object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Then, we will create a TrajectoryCollection object with our GPS tracking GeoDataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Adding station info
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our next step is to add the station name to every location in the GPS tracks.
    To reach our objective we need to highlight the trajectory that ended in “Metallica
    parkla” which corresponds to the new venue’s station where Metallica held the
    concert.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s first read our route info.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Let’s be sure that we have the data only for one day with `print(route_info['unlockedat'].unique())`
  prefs: []
  type: TYPE_NORMAL
- en: Then, we will subset only the columns we need and we will change the route code
    as we did with the GPS tracking. Switching from number to string.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Add to trajectory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we are going to create a new GeoDataFrame named `bike_moves` where we add
    GPS tracks with station information. The linkage is done between the route code
    we transformed from number to string.
  prefs: []
  type: TYPE_NORMAL
- en: The logic is to get every trajectory from the TrajectoryCollection in a loop,
    then send them to our `bike_moves` GeoDataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You will see the process of 5253 trajectories.
  prefs: []
  type: TYPE_NORMAL
- en: We will also create LineStrings out of the GPS tracking for visualization in
    QGIS. The function we will use from Movingpandas is `to_traj_gdf()`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This file is ready for visualization in QGIS. We will save it to make a map
    later.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Prepare datasets for visualization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create two functions that add an attribute for highlighting the Metallica
    moves and another one that gives a weight for size.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Then, we will use the functions only for the ending station. Our interest is
    to see how were the moves to the concert. If we add also “Metallica parkla” as
    a start we might have an overloaded visualization.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Once we have added the visualization attribute we can check it out with `print(bike_moves['viz_code'].unique())`
  prefs: []
  type: TYPE_NORMAL
- en: Adding the venue’s location
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create a new GeoDataFrame with the location of the Metallica concert
    venue.
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s import Point geometry objects from shapely
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Then, the GDF.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Visualization with KeplerGl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to use KeplerGl for Jupiter notebooks to visualize our spatial
    and temporal data.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start creating an instance
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Let’s add our data. I recommend adding data in two different cells.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We will import a map configuration from the `configuration.py` file included
    in the repository. A configuration is a bunch of details that style the map visualization
    in KeplerGl. I added my own creation in the .py file for this story.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Then, we will simply save the file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Once we open we will have our final map
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6fea2e94047d72eff0d6ae35bdf5d6d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Bike movements to the Metallica concert. “Metallica parkla”
    as the ending station
  prefs: []
  type: TYPE_NORMAL
- en: How to add your own configuration to KeplerGL?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After you have added the data to the map instance open it in Jupyter notebook.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: You will see a default visualization of your data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/93842ebf5e1c66b9ff420f36d747f76d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Raw visualization of Bike-sharing system moves. KeplerGl
  prefs: []
  type: TYPE_NORMAL
- en: Configure it in KeplerGl as you want. Then, check the configuration in a new
    cell.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c9ebdb91fba337141bddaae8c19552de.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Configuration of the current map in Jupyter notebook.
  prefs: []
  type: TYPE_NORMAL
- en: Then, please copy and paste the configuration and use it in the `m.save_to_html()`
    function as we did before.
  prefs: []
  type: TYPE_NORMAL
- en: Visualization in QGIS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We saved already a file in the `output` folder with the trajectories as lines.
    Simply, open QGIS, drag the file, and make your own map.
  prefs: []
  type: TYPE_NORMAL
- en: If you highlight the ending station “Metallica parkla” it should look like this
    one
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/89820ef7e122a61861adf2f878a2acf3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. The bike moves to the Metallica concert. “Metallica parkla”
    as the ending station
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Something to point out is that our visualization shows the movements that started
    in other stations and ended in the venue station “Metallica parkla”. But, it does
    not necessarily mean that they were the only people that went to the concert.
    There is still the “ERM” station that was in the same place at the venue so most
    probably many people also left their bikes there. Also, the visualization shows
    that even movements that ended in other stations were closer to the venue.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e3eb2869c0166c1af82e401977109cf0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Movements closer to the venue that ended in different stations
    than Metallica parkla
  prefs: []
  type: TYPE_NORMAL
- en: The visualization just gives an idea of how the virtual dock station worked
    during the Metallica concert in the city.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The dissemination of the virtual station “Metallica parkla” gives a quick understanding
    of how the bike-sharing system station worked in Tartu during the Metallica concert.
    We can see clearly that during the event hours in the evening there is a peak
    in the usage of the “Metallica parkla” station. The bike-sharing virtual station
    was properly functional for those people that wanted to have access to the concert.
  prefs: []
  type: TYPE_NORMAL
- en: The visualization is not showing necessarily only the people that went to the
    concert because it is also possible that some of them left the bike in the other
    venue station “ERM”. There are still many possibilities that could happen not
    even only “ERM” and “Metallica parkla” but they are not reviewed in this story.
  prefs: []
  type: TYPE_NORMAL
- en: If you have questions do not hesitate to leave a comment here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect in LinkedIn here: [Bryan R. Vallejo](https://www.linkedin.com/in/bryanrvallejo/)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Get access to my tutorials here: [Join my stories](https://bryanvallejo16.medium.com/membership)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
