["```py\n# Code block-1: the skeleton of a linear map\nimport numpy as np\n\ndef linear_map(v, n):\n  \"\"\"\n  A linear map that takes a vector, v as input and returns a vector, u\n  n is the size of the output vector, u. For now, lets just return some\n  random vector.\n  \"\"\"\n  # get a vector u somehow. For now, let's just generate it.\n  u = np.random.uniform(size=n)\n  return u\n```", "```py\n# Code block-2: example of a linear map.\nimport numpy as np\n\ndef linear_map(v, n=3):\n  \"\"\"\n  A linear map that takes a 2-d vector, v as input and returns \n  a 3-d vector, u\n  \"\"\"\n  m = len(v)\n  u = np.zeros(size=n)\n  for i in range(m):\n    # Fixing the seed ensures that the same m vectors are generated\n    # every time the function is called. Ensuring it's the same linear\n    # map.\n    np.random.seed(i)\n    # The linear map requires some fixed vectors, wi.\n    wi = np.random.uniform(size=n)\n    u = u + v[i]*wi\n  return u\n```", "```py\n# Code block-3: naive matrix multiplication.\nimport numpy as np\n\ndef square_matrix_mult(a, b):\n    \"\"\"Multiply two matrices\"\"\"\n    # The number of rows of a\n    n = len(a)\n    c = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                c[i, j] = c[i, j] + a[i][k]*b[k][j]\n    return c\n\na = [[1, 2, 3],\n     [3, 4, 5],\n     [2, 3, 4]]\n\nsquare_matrix_mult(a, a)\n```"]