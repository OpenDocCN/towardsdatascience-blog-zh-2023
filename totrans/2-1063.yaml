- en: How Data Science Helped Sherlock Holmes Find a Murderer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学如何帮助福尔摩斯找到凶手
- en: 原文：[https://towardsdatascience.com/how-data-science-helped-sherlock-holmes-find-a-murderer-5cff72a5c98a](https://towardsdatascience.com/how-data-science-helped-sherlock-holmes-find-a-murderer-5cff72a5c98a)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-data-science-helped-sherlock-holmes-find-a-murderer-5cff72a5c98a](https://towardsdatascience.com/how-data-science-helped-sherlock-holmes-find-a-murderer-5cff72a5c98a)
- en: Solve the “Who Killed the Duke of Densmore” mystery using graph theory, constraint
    programming, and mixed-integer linear programming
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用图论、约束编程和混合整数线性规划解决“谁杀了丹斯莫尔公爵”的谜团
- en: '[](https://medium.com/@bernardovf?source=post_page-----5cff72a5c98a--------------------------------)[![Bernardo
    Furtado](../Images/fa4e7e408135319d0531ef364acca8f6.png)](https://medium.com/@bernardovf?source=post_page-----5cff72a5c98a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5cff72a5c98a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5cff72a5c98a--------------------------------)
    [Bernardo Furtado](https://medium.com/@bernardovf?source=post_page-----5cff72a5c98a--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@bernardovf?source=post_page-----5cff72a5c98a--------------------------------)[![伯纳多·弗图多](../Images/fa4e7e408135319d0531ef364acca8f6.png)](https://medium.com/@bernardovf?source=post_page-----5cff72a5c98a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5cff72a5c98a--------------------------------)[![数据科学的前沿](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5cff72a5c98a--------------------------------)
    [伯纳多·弗图多](https://medium.com/@bernardovf?source=post_page-----5cff72a5c98a--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5cff72a5c98a--------------------------------)
    ·14 min read·Apr 28, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [数据科学的前沿](https://towardsdatascience.com/?source=post_page-----5cff72a5c98a--------------------------------)
    ·14 分钟阅读·2023年4月28日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/dec485cff44fa5de03d7ae2f2233fda4.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dec485cff44fa5de03d7ae2f2233fda4.png)'
- en: Photo by [Volodymyr Hryshchenko](https://unsplash.com/@lunarts?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/ZT9gjcJog6U?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [弗拉基米尔·赫里申科](https://unsplash.com/@lunarts?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来源于 [Unsplash](https://unsplash.com/photos/ZT9gjcJog6U?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: Inventory management, portfolio optimization, machine scheduling, vehicle routing,
    and many other real-life problems are excellent examples of how data science and
    analytical techniques can be employed. It’s no surprise that these are some of
    the first problems we learn in university. However, I’m fascinated by the numerous
    other problems that can be represented as an abstract entity called *model*, which
    can be a graph, a schedule, or a set of mathematical equations and solved utilizing
    appropriate techniques. Once you acquire modeling skills, it is straightforward
    to apply these techniques to both a supply-chain problem and a simple puzzle.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 库存管理、投资组合优化、机器调度、车辆路线以及许多其他现实生活中的问题都是数据科学和分析技术应用的绝佳例子。这些问题在大学里通常是我们最早学习的内容。然而，我对可以被表示为抽象实体的众多其他问题感到着迷，这些实体可以是图、计划或一组数学方程，并利用适当的技术加以解决。一旦你掌握了建模技能，将这些技术应用于供应链问题或简单的谜题都是很直接的。
- en: In this article, I will demonstrate how the mystery of the Duke of Densmore’s
    murder can be solved using ***Graph Theory***, ***Constraint Programming***, and
    ***Mixed-Integer Linear Programming***.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将展示如何使用 ***图论***、***约束编程*** 和 ***混合整数线性规划*** 解决丹斯莫尔公爵谋杀案的谜团。
- en: The book “*Who Killed the Duke of Densmore*” by Claude Berge is a mystery story
    that focuses on identifying the person who planted a bomb in Densmore Castle on
    the Isle of White, leading to the Duke’s death. Despite the passage of ten years,
    the case remained unsolved until Sherlock Holmes and Watson decided to delve into
    the matter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 克劳德·贝尔热的《*谁杀了丹斯莫尔公爵*》是一部悬疑小说，专注于找出在怀特岛的丹斯莫尔城堡安放炸弹导致公爵死亡的人。尽管过去了十年，这个案件仍然未能破解，直到福尔摩斯和华生决定深入探讨此事。
- en: When the Duke of Densmore met his demise due to a bomb explosion at his castle
    on the Isle of White, his six ex-wives — *Ann*, *Betty*, *Charlotte*, *Edith*,
    *Felicia*, *Georgia*, and *Helen* — became the primary suspects. Complicating
    matters was the destruction of the Duke’s will in the blast, rumored to be harsh
    against one of the former spouses. However, it was revealed that all six women
    had received invitations to the castle before the tragedy occurred.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当邓斯摩尔公爵因爆炸事件在怀特岛的城堡中遇难时，他的六位前妻——*安*、*贝蒂*、*夏洛特*、*伊迪丝*、*费利西亚*、*乔治亚*和*海伦*——成为了主要嫌疑人。问题进一步复杂化的是公爵的遗嘱在爆炸中被毁，据说其中对某位前妻的态度非常严厉。然而，揭示了所有六位女性在悲剧发生前都曾收到过城堡的邀请。
- en: All of his ex-wives swore they had been to the castle only once. They also did
    not remember how long they stayed there but knew who they met during the visit.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 他所有的前妻都发誓她们只去过一次城堡。她们也不记得自己在那里待了多久，但知道在访问期间遇见了谁。
- en: '*Ann* met *Betty*, *Charlotte*, *Felicia* and *Georgia*.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*安*遇见了*贝蒂*、*夏洛特*、*费利西亚*和*乔治亚*。'
- en: '*Betty* met *Ann*, *Charlotte*, *Edith*, *Felicia* and *Helen*.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*贝蒂*遇见了*安*、*夏洛特*、*伊迪丝*、*费利西亚*和*海伦*。'
- en: '*Charlotte* met *Ann*, *Betty* and *Edith*.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*夏洛特*遇见了*安*、*贝蒂*和*伊迪丝*。'
- en: '*Edith* met *Betty*, *Charlotte* and *Felicia*.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*伊迪丝*遇见了*贝蒂*、*夏洛特*和*费利西亚*。'
- en: '*Felicia* met *Ann*, *Betty*, *Edith* and *Helen*.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*费利西亚*遇见了*安*、*贝蒂*、*伊迪丝*和*海伦*。'
- en: '*Georgia* met *Ann* and *Helen*.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*乔治亚*遇见了*安*和*海伦*。'
- en: '*Helen* met *Betty*, *Felicia* and *Georgia*.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*海伦*遇见了*贝蒂*、*费利西亚*和*乔治亚*。'
- en: Based on the information provided, Holmes and Watson believe that the killer
    had visited the castle on multiple occasions, which contradicts the ex-wives’
    claims of only having visited once. The detectives suspects that one of the former
    spouses is be lying about the number of visits she made to the castle. Identifying
    which of the ex-wives lied about the frequency of their visits is the key to solving
    the mystery.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 根据提供的信息，福尔摩斯和华生认为凶手多次访问了城堡，这与前妻们只访问过一次的说法相矛盾。侦探怀疑其中一位前妻在谎报她访问城堡的次数。确定哪位前妻对她们访问的频率撒了谎，是解开谜团的关键。
- en: 'I’ll show three ways to solve this puzzle: using Graph Theory, Constraint Programming
    and Mixed-Integer Linear Programming.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我将展示三种解决这个难题的方法：使用图论、约束编程和混合整数线性编程。
- en: Graph Theory
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图论
- en: This is how Berge ultimately solved the mystery, and it appears to be the most
    straightforward approach. Each of the ex-wives had a specific duration of stay
    at the castle, with a defined arrival and departure time. Although the exact duration
    of their visits and the order in which they arrived and departed remain unknown,
    we know from the interrogation that some of their visits overlapped.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是贝尔热最终解决谜团的方法，这似乎是最直接的办法。每个前妻在城堡的停留时间都是特定的，有明确的到达和离开时间。虽然我们不知道她们的确切停留时间以及到达和离开的顺序，但从审问中我们知道她们的某些访问时间是重叠的。
- en: 'For the sake of simplicity, let’s focus on *Helen* and her interactions with
    *Betty*, *Felicia*, and *Georgia* during their respective visits to the castle.
    To illustrate their visits, we can use horizontal lines, with the endpoints representing
    their arrival and departure times, as shown below:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化问题，我们集中关注*海伦*及其在城堡访问期间与*贝蒂*、*费利西亚*和*乔治亚*的互动。为了说明她们的访问，我们可以使用水平线，端点表示她们的到达和离开时间，如下所示：
- en: '![](../Images/6c6732ac05bd52ce0db5a35c7da9762d.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6c6732ac05bd52ce0db5a35c7da9762d.png)'
- en: Example of intervals and overlaps
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 时间段和重叠示例
- en: 'If two intervals overlap, it means that the corresponding individuals were
    at the castle simultaneously and thus must have met. We can represent the intervals
    as a graph, where each node corresponds to a person. If two intervals intersect,
    we draw an edge between the corresponding nodes. In the case of *Helen*, *Betty*,
    *Felicia*, and *Georgia*, the resulting graph looks like the one below:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个时间段有重叠，这意味着对应的人在城堡里同时出现过，因此一定见过面。我们可以将时间段表示为图，其中每个节点对应一个人。如果两个时间段相交，我们就在相应的节点之间画一条边。对于*海伦*、*贝蒂*、*费利西亚*和*乔治亚*，最终得到的图如下所示：
- en: '![](../Images/a1ac57886d42b44e08d7396642043aec.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a1ac57886d42b44e08d7396642043aec.png)'
- en: Interval graph example
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 时间段图示例
- en: 'This type of graph is called an *Interval Graph*, which can be used to model
    any set of intervals. However, not all graphs can be represented as intervals.
    For instance, consider the graph below:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这种图称为*时间段图*，可以用来建模任何时间段集合。然而，并非所有图都可以表示为时间段。例如，考虑下图：
- en: '![](../Images/f470b3082f555fe561899a7572afed8d.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f470b3082f555fe561899a7572afed8d.png)'
- en: Cycle graph C4
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 周期图 C4
- en: It cannot be decomposed into intervals, as it is impossible to find four intervals,
    such that *A-B*, *B-C*, *C-D*, and *D-A* intersect. This graph is called *C4*.
    If a graph has *C4* as a subgraph, certainly it is not an interval graph.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 它不能被分解为区间，因为无法找到四个区间，使得 *A-B*, *B-C*, *C-D* 和 *D-A* 相交。这个图称为 *C4*。如果一个图有 *C4*
    作为子图，肯定不是一个区间图。
- en: Therefore, if the graph is not an interval graph, we know that at least one
    person has lied about their visit to the castle. We can use this fact to identify
    the true culprit by constructing the graph from the interrogation and checking
    whether it is an interval graph or not.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果图不是一个区间图，我们知道至少有一个人撒谎关于他们是否访问过城堡。我们可以利用这一点通过从审问中构建图并检查它是否为区间图来识别真正的罪犯。
- en: '![](../Images/2e0a64d264e7c9ed6ffd54d9434dc762.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2e0a64d264e7c9ed6ffd54d9434dc762.png)'
- en: Graph based on the interrogation. If two people met, there is an edge between
    them
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 基于审问的图。如果两个人见过面，它们之间就有一条边。
- en: 'Let’s use library [*networkx*](https://networkx.org/)in python, and create
    the graph:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 Python 中使用库[*networkx*](https://networkx.org/)并创建图：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that graph is defined, two following steps are required:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 既然图已经定义好了，接下来需要进行以下两个步骤：
- en: Generate all the simple cycles of the graph, using *simple_cycles* function
    of *networkx* (see doc [here](https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.cycles.simple_cycles.html)).
    All elementary cycles of all lengths will be generated.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 *networkx* 的 *simple_cycles* 函数生成图的所有简单周期（见文档[此处](https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.cycles.simple_cycles.html)）。将生成所有长度的基本周期。
- en: For all cycles with length equal to 4, generate the subgraph using *subgraph*
    [function](https://networkx.org/documentation/stable/reference/generated/networkx.classes.function.subgraph.html#subgraph).
    And check if it is not [*chordal*](https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.chordal.is_chordal.html#is-chordal).
    In other words, check if the cycle is a *C4* — a cycle of length 4 where all nodes
    have degree equal to 2 (see [here](https://en.wikipedia.org/wiki/Cycle_graph)).
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有长度为 4 的周期，使用 *subgraph* [函数](https://networkx.org/documentation/stable/reference/generated/networkx.classes.function.subgraph.html#subgraph)生成子图。并检查它是否不是[*chordal*](https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.chordal.is_chordal.html#is-chordal)。换句话说，检查该周期是否为
    *C4* —— 一个长度为 4 的周期，其中所有节点的度数均为 2（见[此处](https://en.wikipedia.org/wiki/Cycle_graph)）。
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The *C4* subgraphs are:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*C4* 子图是：'
- en: '*Ann*, *Charlotte*, *Edith*, *Felicia*'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*安*, *夏洛特*, *伊迪斯*, *费莉西亚*'
- en: '*Ann*, *Felicia*, *Edith*, *Charlotte*'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*安*, *费莉西亚*, *伊迪斯*, *夏洛特*'
- en: '*Georgia*, *Ann*, *Betty*, *Helen*'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*乔治亚*, *海伦*, *贝蒂*, *安*'
- en: '*Georgia*, *Ann*, *Felicia*, *Helen*'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*乔治亚*, *安*, *费莉西亚*, *海伦*'
- en: '*Georgia*, *Helen*, *Betty*, *Ann*'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*乔治亚*, *海伦*, *贝蒂*, *安*'
- en: '*Georgia*, *Helen*, *Felicia*, *Ann*'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*乔治亚*, *海伦*, *费莉西亚*, *安*'
- en: '***Ann*** is present in all cycles, if she is eliminated from the set, an interval
    graph can be generated perfectly, indicating that she may be lying and could be
    deemed as the killer.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '***安*** 出现在所有周期中，如果将她从集合中去除，可以完美地生成一个区间图，这表明她可能在撒谎，并可能被认为是凶手。'
- en: Constraint Programming
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 约束编程
- en: Constraint Programming (CP) is a problem-solving approach that addresses combinatorial
    and logical problems by focusing on finding feasible solutions that satisfy given
    constraints. CP algorithms achieve convergence by progressively reducing the set
    of feasible solutions through the addition of new constraints. Given its ability
    to handle complex logical statements and constraints, CP is particularly effective
    in tackling problems like the one at hand.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 约束编程（CP）是一种解决问题的方法，旨在通过关注寻找满足给定约束的可行解来解决组合和逻辑问题。CP 算法通过逐步减少可行解集来实现收敛。由于其处理复杂逻辑语句和约束的能力，CP
    在解决当前问题时特别有效。
- en: To solve our problem, we can use a CP model, which involves defining *N* as
    the set of people, *s_i* as the arrival time of person *i* at the castle, *d_i*
    as the duration of their visit, and *e_i* as the end of their visit. We can also
    introduce a logic variable *v_i*, which is *TRUE* if person *i* cannot be included
    in the visit schedule, and *FALSE* otherwise. Additionally, *met_i* is the set
    of people that person *i* met during their visit. The integer variables *s*, *d*,
    and *e* have a high upper bound (1000) and must be non-negative.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决我们的问题，我们可以使用一个 CP 模型，其中 *N* 是人们的集合，*s_i* 是个体 *i* 到达城堡的时间，*d_i* 是他们访问的持续时间，*e_i*
    是他们访问的结束时间。我们还可以引入一个逻辑变量 *v_i*，如果个体 *i* 不能被包含在访问计划中，则 *v_i* 为 *TRUE*，否则为 *FALSE*。此外，*met_i*
    是个体 *i* 在访问期间遇到的人的集合。整数变量 *s*、*d* 和 *e* 的上限很高（1000），并且必须是非负的。
- en: 'We’ll use the [*ortools*](https://developers.google.com/optimization/cp/cp_solver)library
    to solve this problem:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 [*ortools*](https://developers.google.com/optimization/cp/cp_solver)库来解决这个问题：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The initial step is to determine if two individuals overlap or not, which means
    verifying if the intervals *(s_i, e_i)* and *(s_j, e_j)* intersect at any moment.
    This can be achieved by satisfying either one of the two following conditions:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 初始步骤是确定两个个体是否重叠，这意味着验证区间 *(s_i, e_i)* 和 *(s_j, e_j)* 是否在任何时刻相交。这可以通过满足以下两个条件之一来实现：
- en: '*s_j < e_i* AND *s_i < e_j*'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*s_j < e_i* AND *s_i < e_j*'
- en: '*s_i < e_j* AND *s_i > s_j*'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*s_i < e_j* AND *s_i > s_j*'
- en: 'It is also necessary to define when two intervals DO NOT overlap. It should
    respect one of the two conditions:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要定义当两个区间不重叠时的情况。它应满足以下两个条件之一：
- en: '*e_i ≤ s_j*'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*e_i ≤ s_j*'
- en: '*s_i ≥ e_j*'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*s_i ≥ e_j*'
- en: Essentially, for two people to have met, their intervals must overlap, or else
    they must not overlap. However, what if a person cannot be included in the schedule?
    This is where the variable *v_i* comes into play.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，为了让两个人见面，它们的区间必须重叠，否则它们必须不重叠。然而，如果一个人不能被包含在计划中呢？这就是变量 *v_i* 发挥作用的地方。
- en: 'Finally, for every pair of people *i* and *j*:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于每一对人 *i* 和 *j*：
- en: '![](../Images/9519ea042495bb5cefa968635b851b6d.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9519ea042495bb5cefa968635b851b6d.png)'
- en: 'When two individuals *i* and *j* meet, they must respect to either of the two
    overlapping conditions: (*s_j < e_i* AND *s_i < e_j*) OR (*s_i < e_j* AND *s_i
    > s_j*). If they fail to comply, one or both of them will not be included in the
    schedule (*v_i = True* OR *v_j = True*).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当两个个体 *i* 和 *j* 见面时，它们必须遵守以下两个重叠条件之一：(*s_j < e_i* AND *s_i < e_j*) 或者 (*s_i
    < e_j* AND *s_i > s_j*)。如果它们未能遵守其中一个条件，那么一个或两个个体将不会被包含在计划中 (*v_i = True* 或者 *v_j
    = True*)。
- en: On the other hand, if two individuals *i* and *j* do not meet, they should follow
    the non-overlapping condition (*e_i ≤ s_j* OR *s_i ≥ e_j*). If they do not follow
    this condition, one or both of them will not be included in the schedule (*v_i
    = True* OR *v_j = True*).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果两个个体 *i* 和 *j* 不见面，它们应遵循非重叠条件 (*e_i ≤ s_j* 或者 *s_i ≥ e_j*)。如果它们不遵守这个条件，一个或两个个体将不会被包含在计划中
    (*v_i = True* 或者 *v_j = True*)。
- en: To represent each of these conditions, we will use the Boolean variables *b1*,
    *b2*, *b3*, and *b4*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了表示这些条件，我们将使用布尔变量 *b1*、*b2*、*b3* 和 *b4*。
- en: '*b1 =* *s_j < e_i* AND *s_i < e_j*'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*b1 =* *s_j < e_i* AND *s_i < e_j*'
- en: '*b2 =* *s_i < e_j* AND *s_i > s_j*'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*b2 =* *s_i < e_j* AND *s_i > s_j*'
- en: '*b3 =* *e_i ≤ s_j*'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*b3 =* *e_i ≤ s_j*'
- en: '*b4 =* *s_i ≥ e_j*'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*b4 =* *s_i ≥ e_j*'
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Duration of person’s visit (*d_i*) is *0* is value *v_i* is True. Which means
    it is not included. If *v_i* is False, *d_i* must be strictly positive.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个人的访问持续时间 (*d_i*) 为 *0*，则 *v_i* 的值为 True。这意味着该人不被包含。如果 *v_i* 为 False，则 *d_i*
    必须是严格正的。
- en: '![](../Images/86dd247aa1ace7721166888002808855.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/86dd247aa1ace7721166888002808855.png)'
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Finally, the last constraint ensures that arrival time plus duration is equal
    to the end time, for each person
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，最后一个约束确保每个人的到达时间加上持续时间等于结束时间
- en: '![](../Images/3a32ebeed9f8ad7d339cf934484e4b01.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3a32ebeed9f8ad7d339cf934484e4b01.png)'
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Our objective function is maximizing the number of people included, which is
    the same as minimizing the sum of variable *v_i*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标函数是最大化包含的人员数量，这等同于最小化变量 *v_i* 的总和。
- en: '![](../Images/7aece2dd6b2948820732e23a23c23d0f.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7aece2dd6b2948820732e23a23c23d0f.png)'
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Solving the model and plotting the gantt chart we have the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通过解决模型并绘制甘特图，我们得到如下结果：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/ba27d1d442240f376c648cb9ff69e4de.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ba27d1d442240f376c648cb9ff69e4de.png)'
- en: Gantt Chart generated by running CP Model
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 CP 模型生成的甘特图
- en: Who’s again the person who could not be included and has duration equal to 0?
    **Ann**!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 谁是那个不能被包含且持续时间等于0的人？**安**！
- en: Mixed-Integer Linear Programming
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合整数线性规划
- en: 'While it may not be the simplest approach, my favorite way to solve this puzzle
    is by using *MILP*. To learn more about how to model and solve *MILP*, you can
    refer to my article below:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这可能不是最简单的方法，但我最喜欢的解决这个难题的方法是使用 *MILP*。要了解更多关于如何建模和解决 *MILP* 的信息，可以参考我下面的文章：
- en: '[https://medium.com/towards-data-science/heuristics-as-warm-start-for-mixed-integer-programming-mip-models-9046781dd21f](https://medium.com/towards-data-science/heuristics-as-warm-start-for-mixed-integer-programming-mip-models-9046781dd21f)'
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://medium.com/towards-data-science/heuristics-as-warm-start-for-mixed-integer-programming-mip-models-9046781dd21f](https://medium.com/towards-data-science/heuristics-as-warm-start-for-mixed-integer-programming-mip-models-9046781dd21f)'
- en: 'We still have the set *N*, which represents the people involved, and *met_i*,
    which is the set of people who *i* has met. In this scenario, we will adopt a
    time-indexed method where we define a set of periods *T* beforehand (let’s assume
    *T = 6*). The variables are as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然有集合 *N*，表示参与的人，以及 *met_i*，表示人员 *i* 遇到的人。在这种情况下，我们将采用时间索引方法，事先定义一组时间段 *T*（假设
    *T = 6*）。变量如下：
- en: '*y_i*: binary. 1 if person *i* is included. 0 otherwise'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*y_i*：二进制。若人员 *i* 被包含，则为1。否则为0'
- en: '*x_(i, t)*: binary. 1 if person *i* is in the castle at *t*. 0 otherwise'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*x_(i, t)*：二进制。若人员 *i* 在 *t* 在城堡中，则为1。否则为0'
- en: '*z_(i, j, t)*: binary. 1 if person *i* and *j* are in the castle simultaneously
    at *t*. 0 otherwise'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*z_(i, j, t)*：二进制。若人员 *i* 和 *j* 在 *t* 同时在城堡中，则为1。否则为0'
- en: '*w_(i, t)*: binary. 1 if person *i* arrives in the castle at *t*. 0 otherwise'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*w_(i, t)*：二进制。若人员 *i* 在 *t* 到达城堡，则为1。否则为0'
- en: 'Let’s also use [*ortools*](https://developers.google.com/optimization/mip)to
    solve it:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们还使用 [*ortools*](https://developers.google.com/optimization/mip) 来解决它：
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Constraints are shown below:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 约束条件如下所示：
- en: '![](../Images/8e400b4a70435d240dbf7ad91ae5e996.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8e400b4a70435d240dbf7ad91ae5e996.png)'
- en: '*(1)* guarantees that any individual included in the schedule must have been
    in the castle at least once. *(2)* ensures that if a person is included, they
    must have been present in the castle at the same time as other individuals they
    met. *(3)* and *(4)* ensure that two individuals were simultaneously present in
    the castle at a given time if and only if they were both included and present
    at the time. *(5)* ensures that two individuals who did not meet cannot be present
    in the castle at the same time. *(6)* defines the arrival time for each person.
    *(7)* disallows any person from being present in the castle during periods 0 and
    T (for simplicity). Finally, *(8)* guarantees that any person included in the
    schedule has only one recorded arrival time.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '*(1)* 保证任何包含在计划中的个人必须至少在城堡中出现过一次。*(2)* 确保如果一个人被包含，他们必须与其他他们遇到的个体在同一时间在城堡中。*(3)*
    和 *(4)* 确保两个个体仅当且仅当他们都被包含且在某时刻都在城堡中时才同时存在。*(5)* 确保未见过的两个人不能同时在城堡中。*(6)* 定义每个人的到达时间。*(7)*
    不允许任何人在时间段0和T（为了简单起见）期间在城堡中。最后，*(8)* 保证任何包含在计划中的人只有一个记录的到达时间。'
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Objective function is maximizing the number of people included
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 目标函数是最大化包含的人数
- en: '![](../Images/3b32dcc928520003da0bf3f373147262.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3b32dcc928520003da0bf3f373147262.png)'
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Solving the model and plotting the gantt chart we have the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 解决模型并绘制甘特图，我们得到如下结果：
- en: '[PRE11]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/4d23949d49ee818e426b056d0a6a6db2.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d23949d49ee818e426b056d0a6a6db2.png)'
- en: Gantt Chart generated by running MIP Model
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行 MIP 模型生成的甘特图
- en: Who’s again not included? **Ann**!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 再次没有包括在内的是谁？**安**！
- en: This example demonstrates how a problem can be approached and solved in various
    ways using different techniques, yet all methods produce the same outcome. It’s
    possible that if you attempted to solve the problem yourself, you might develop
    an alternative approach or model.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子演示了如何使用不同技术以各种方式处理和解决问题，但所有方法都产生相同的结果。你自己尝试解决问题时，可能会开发出替代的方法或模型。
- en: 'Although, while considering this specific problem, ***Graph theory*** appears
    to be the most straightforward method, it cannot be universally applied to all
    problems since it’s an adhoc approach. The differences between ***Mathematical
    programming*** (MILP) and ***Constraint programming*** could be the subject of
    an entire article or even a book. Nevertheless, the main disparities are:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在考虑这个特定问题时，***图论*** 似乎是最简单的方法，但由于它是一种特定的方法，因此不能普遍适用于所有问题。***数学规划***（MILP）与
    ***约束编程*** 的差异可能是整篇文章或甚至一本书的主题。不过，主要的差异是：
- en: '***Mathematical programming*** models support both discrete and continuous
    decision variables, whereas ***constraint programming*** only supports discrete
    decision variables (integer or Boolean).'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***数学编程*** 模型支持离散和连续决策变量，而 ***约束编程*** 仅支持离散决策变量（整数或布尔值）。'
- en: '***Constraint programming*** supports logical constraints as well as arithmetic
    expressions, including modulo, integer division, minimum, maximum, and an expression
    that indexes an array of values by a decision variable. It can also utilize specialized
    constraints, such as the *all different* and *no overlap* constraint, that can
    simplify modeling, whereas ***mathematical programming*** only supports *≥*, *≤*
    and *=* constraints.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***约束编程*** 支持逻辑约束以及算术表达式，包括模运算、整数除法、最小值、最大值和一个通过决策变量索引值数组的表达式。它还可以利用专门的约束，例如
    *全不同* 和 *无重叠* 约束，这可以简化建模，而 ***数学编程*** 仅支持 *≥*、*≤* 和 *=* 约束。'
- en: References
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] B. Claude and W. Ian, Who killed the Duke of Densmore (1994), Biblioteque
    Oulipienne #67'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] B. Claude 和 W. Ian, 《谁杀了丹斯莫尔公爵》（1994），Biblioteque Oulipienne #67'
- en: All images unless otherwise noted are by the author
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，所有图片均为作者提供
