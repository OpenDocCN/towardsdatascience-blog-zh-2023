- en: 'Exception Handling in Python: From Basic to Advanced, Then Tricks'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/exception-handling-in-python-from-basic-to-advanced-then-tricks-9b495619730a](https://towardsdatascience.com/exception-handling-in-python-from-basic-to-advanced-then-tricks-9b495619730a)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/24d435292333eebb87f13abd8334dfc5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Thomas Malyska](https://pixabay.com/users/fotomek-7986133/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=6124033)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=6124033)
  prefs: []
  type: TYPE_NORMAL
- en: Discover the Hidden Secrets of Python Exception Handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://christophertao.medium.com/?source=post_page-----9b495619730a--------------------------------)[![Christopher
    Tao](../Images/bea1e3c81cc62eb28bdba9275d6b326f.png)](https://christophertao.medium.com/?source=post_page-----9b495619730a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9b495619730a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9b495619730a--------------------------------)
    [Christopher Tao](https://christophertao.medium.com/?source=post_page-----9b495619730a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9b495619730a--------------------------------)
    ·10 min read·Apr 3, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: One important aspect of Python programming is exception handling, which refers
    to the way that errors and unexpected events are handled during the execution
    of a program. Exception handling is essential for writing robust and reliable
    code, as it enables programmers to handle errors and exceptions in a structured
    and controlled manner.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I will provide a comprehensive guide to Python exception handling,
    covering everything from basic try-except blocks to more advanced techniques.
    Whether you are **new to Python** programming or an **experienced developer**
    (You can start from section 3), this article will provide you with a complete
    overview of exception handling in Python, along with some useful tricks and tips
    that you may not have encountered before. So, whether you are just starting out
    with Python or looking to improve your exception handling skills, this article
    is the perfect resource to help you get started.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/a62c6ba5bd93e722422f6cc6f70b2280.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Saul](https://pixabay.com/users/saulhm-31267/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=106359)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=106359)
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 The Simplest Exception Handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start with the simplest exception handling in Python. Basically, we have
    a piece of code that may have any exceptions during the run time, we can put them
    in the “try” block. Then, in the “except” block, we can do something with it,
    such as displaying some message to indicate that there was an error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/56ef2e13430a531a8cf59e4896b78444.png)'
  prefs: []
  type: TYPE_IMG
- en: Also, please be noticed that the program did run successfully. Although there
    is an error, but we “caught” the error so that it is not considered “crush”.
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Catch Specific Types of Exceptions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, the piece of code may potentially result in different types of exceptions.
    Also, we may want to handle different types of exceptions in different ways. In
    this case, we can specify the type of error after the `except` keyword. Also,
    we can chain multiple `except` blocks to handle more than one type of error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/66ab8d13047c42d835f47383ba00b3cd.png)'
  prefs: []
  type: TYPE_IMG
- en: It is common to have the last except block without an explicit error type. So,
    if there is no except-block above caught the exception, it will fall in the last
    one.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0b40d15bfb73ea1f3fbea344f7f8acf4.png)'
  prefs: []
  type: TYPE_IMG
- en: In this example, the error should actually be a `TypeError` because the string
    `"foo"` cannot be converted into a number. Therefore, the `ZeroDivisionError`
    did not catch the exception. So, it falls in the default `except` block eventually.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 Access Details of the Exception
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Regarding the above “Unknown” error, is there any way to obtain more information
    from the exception? In other words, although something unexpected happened, do
    we have such a method to have some clue what is the exception about?
  prefs: []
  type: TYPE_NORMAL
- en: The answer is yes. We can put an argument after the `except` keyword and access
    the details of the exception from this argument variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2d20336b461000c39d7d2740fa49e763.png)'
  prefs: []
  type: TYPE_IMG
- en: In this example, we use `Exception` which is the parent class of all types of
    exceptions after the `except` keyword, and catch this exception as the variable
    `e`.
  prefs: []
  type: TYPE_NORMAL
- en: That is equivalent to saying, “please catch any type of exception in the variable
    `e`”. Then, we can print the variable to get the message. So, we know that the
    exception is actually we are trying to convert a literal string to an integer.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Still the Basics, but Practical Usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/b8a2768ae685f0e97592c9d48bb5bbf7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [LaterJay Photography](https://pixabay.com/users/laterjay-1627906/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1037935)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1037935)
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s have a look at some practical usage patterns of exception handling
    in Python. In this section, the demo will be conducted in Python functions.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Without Exception Handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What if we don’t handle the exception? Of course, the program will crash. Let’s
    have a look at how the “Traceback” tell us about the error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/333360bc2647e4f97a2beb0c9cdf7d79.png)'
  prefs: []
  type: TYPE_IMG
- en: The program starts at the `calculate(0, 0)`, then the `calculate()` function
    calls the `divide()` function. In the above example, the `x / y` in the `divide()`
    caused the `ZeroDivisionError`.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the traceback, the last block tells us where the exception comes
    from. Since there is no exception handling, it throws the exception back to its
    parent function `calculate()` body. Inside this function, the exception still
    has not been handled. Therefore, it throws again to its parent, where we called
    this `calculate()` function. The program crashed because the exception is not
    handled and reached the root level.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 A Program with Exception Handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hold on, that means we don’t have to handle exceptions whenever it may occur.
    Instead, we can handle them at a certain and appropriate level.
  prefs: []
  type: TYPE_NORMAL
- en: For example, there is one line of code called one function, inside this function
    it calls many other functions that may cause different types of exceptions. In
    this case, we may only need to put this one line of code in the try-except block
    so that it will be handled.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d6d7fb05458ee6554e3f6d231ed4efb5.png)'
  prefs: []
  type: TYPE_IMG
- en: In the above example, we have an exception handling in the `calculate()` function.
    Although the exception happened in the `divide()` function, it will throw it to
    the parent level and be caught in the `calculate()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 The Finally Block
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Well, I want to make this article a completed guide to Python Exception Handling.
    So, I guess let’s simply explore the `finally` block.
  prefs: []
  type: TYPE_NORMAL
- en: Long story short, the code in the `finally` block will be executed regardless
    if there are exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0cf34c13f0e66f82272b837fc1740362.png)'
  prefs: []
  type: TYPE_IMG
- en: One of the most common use cases of the `finally` block is to close resources
    such as database connections and opened files. This is a very good manner to avoid
    unexcepted behaviours or memory leaks.
  prefs: []
  type: TYPE_NORMAL
- en: 2.4 Raise an Exception Deliberatively
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rather than catching an exception, we can also deliberately raise an exception.
    This could be very useful for debugging and control flow purposes that allow us
    to jump to a different part of the code or exit the program.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/de3655cba7edeecf0f4c43c268122325.png)'
  prefs: []
  type: TYPE_IMG
- en: 3\. Extra Tricks That You May Not Know
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/dce81be30002d2b2626c14f11bac027b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Pexels](https://pixabay.com/users/pexels-2286921/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1850809)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1850809)
  prefs: []
  type: TYPE_NORMAL
- en: If you’re not new to Python, you may have skipped ahead to this section looking
    for some advanced techniques or knowledge gaps to fill. I hope this section can
    provide you with new insights and help you further refine your understanding of
    exception handling in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 Else Block
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Do you know that the `try ... except ... finally` are not everything in Python
    exception handling? I guess you may not know that we can also use `else` in exception
    handling. The `else` block will only be executed if there is no exception.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/eb2b150bb24ae380669a23e62994f73c.png)'
  prefs: []
  type: TYPE_IMG
- en: In fact, the `else` block is not a must-known thing. Theoretically, we can put
    the code after the line that may cause the exception. It will run anyway if there
    is no exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there are several weak reasons that we may want to use the `else`
    block. Firstly, it may improve readability because it is pretty natural to understand
    it as such: “if there is an exception, handle it like this, else please execute
    this code”. Secondly, the `else` block physically separated the code which may
    cause exceptions and the code won’t.'
  prefs: []
  type: TYPE_NORMAL
- en: 3.2 Warning Module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This might not be closely related to exception handling. However, some readers
    may be interested in this. If you have ever used Pandas library, sometimes it
    will give us warnings if we used some deprecated API or doing things with risks.
  prefs: []
  type: TYPE_NORMAL
- en: How this is done? The answer is to use the `warning` module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/710c658603f545f675dc65d09baf7ac6.png)'
  prefs: []
  type: TYPE_IMG
- en: 3.3 Assertion — Another Way of Raising an Exception
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another related technique in Python is the assertions. It is used to check whether
    a certain condition is true or false during the execution of a program. If the
    condition is true, the program continues executing normally. If the condition
    is false, an `AssertionError` is raised, interrupting the normal flow of the program.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a0c354e13540749116c04a8d5441378d.png)'
  prefs: []
  type: TYPE_IMG
- en: The assertion is commonly used for debugging and unit testing in Python. If
    the condition is satisfied, nothing will happen.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3c0eb336f93c54c6cf5afa77bb55a31a.png)'
  prefs: []
  type: TYPE_IMG
- en: 3.4 Custom Exception Type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, we may want to define and use custom exception types when we want
    to provide more specific and informative error messages to the user, or when we
    want to differentiate between different types of errors that can occur in our
    code.
  prefs: []
  type: TYPE_NORMAL
- en: We can define a custom exception as simply as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a1be1b6e7364f3dbaa1a973b4db05130.png)'
  prefs: []
  type: TYPE_IMG
- en: Of course, we can do whatever we like because this is a customised class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f0ee796d03f602492b2c1891b1e807b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Using custom exceptions in Python allows us to exercise our imagination and
    provides the maximum level of flexibility in handling errors and exceptions in
    our code.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. The Suppress Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/18f163dc713a49be7e30fb2de18e0029.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Gerd Altmann](https://pixabay.com/users/geralt-9301/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=582635)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=582635)
  prefs: []
  type: TYPE_NORMAL
- en: In the last section, I want to introduce the `suppress` module in the `contextlib`.
    It is built-in into Python, but fewer people know about it and it is rarely used.
    However, it can be very useful in some cases.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we have some lines of code that may cause exceptions. However, we may
    don’t care about these exceptions. Therefore, rather than raising these exceptions
    and handling them, the easiest way is to ignore them, or “suppress” them.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the code below will output nothing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The above code uses a with-statement together with the `suppress` function.
    It will ignore all the `ZeroDivisionError` happens in the code inside.
  prefs: []
  type: TYPE_NORMAL
- en: Why it is useful? Think about we have a series of user inputs. Some of the input
    values may not be valid. Suppose we don’t care about the invalid inputs at all.
    Instead, we just want to ignore them and process those that are valid.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s simulate the scenario by having a list of items.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/dc5a3e93c9f39fe59ff0e6ddbd6201a1.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown above, those zeros and strings are simply ignored. The code looks pretty
    neat and clean.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to explore more for the `suppress` module more, I have a particular
    article that will do a deep dive.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/quick-python-tip-suppress-known-exception-without-try-except-a93ec34d3704?source=post_page-----9b495619730a--------------------------------)
    [## Quick Python Tip: Suppress Known Exception Without Try Except'
  prefs: []
  type: TYPE_NORMAL
- en: Handle known exceptions in a more elegant way in Python.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/quick-python-tip-suppress-known-exception-without-try-except-a93ec34d3704?source=post_page-----9b495619730a--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/86aecaa008178f97654c091a49d33516.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Mirka](https://pixabay.com/users/370eis-21311355/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7739243)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7739243)
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we have explored the different aspects of Python exception
    handling. There were some useful tricks and tips for handling exceptions, such
    as using the `warning` module and suppressing specific exceptions with the `suppress`
    module.
  prefs: []
  type: TYPE_NORMAL
- en: By mastering exception handling in Python, you can write more robust and reliable
    code that can handle unexpected events and errors in a structured and controlled
    way. Whether you are a beginner or an experienced Python developer, understanding
    exception handling is essential for writing effective and efficient code. I hope
    that this article has provided you with a comprehensive guide to Python exception
    handling and some useful tips and tricks to help you improve your exception handling
    skills.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@qiuyujx/membership?source=post_page-----9b495619730a--------------------------------)
    [## Join Medium with my referral link - Christopher Tao'
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading my articles! Buy me a coffee please if you don't mind
    :) Your membership fee supports thousands…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@qiuyujx/membership?source=post_page-----9b495619730a--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '**If you feel my articles are helpful, please consider joining Medium Membership
    to support me and thousands of other writers! (Click the link above)**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Unless otherwise noted all images are by the author*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
