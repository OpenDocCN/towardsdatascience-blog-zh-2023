- en: 'Exception Handling in Python: From Basic to Advanced, Then Tricks'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 异常处理：从基础到高级，再到技巧
- en: 原文：[https://towardsdatascience.com/exception-handling-in-python-from-basic-to-advanced-then-tricks-9b495619730a](https://towardsdatascience.com/exception-handling-in-python-from-basic-to-advanced-then-tricks-9b495619730a)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/exception-handling-in-python-from-basic-to-advanced-then-tricks-9b495619730a](https://towardsdatascience.com/exception-handling-in-python-from-basic-to-advanced-then-tricks-9b495619730a)
- en: '![](../Images/24d435292333eebb87f13abd8334dfc5.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/24d435292333eebb87f13abd8334dfc5.png)'
- en: Image by [Thomas Malyska](https://pixabay.com/users/fotomek-7986133/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=6124033)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=6124033)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于 [Thomas Malyska](https://pixabay.com/users/fotomek-7986133/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=6124033)
    来自 [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=6124033)
- en: Discover the Hidden Secrets of Python Exception Handling
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索 Python 异常处理的隐藏秘密
- en: '[](https://christophertao.medium.com/?source=post_page-----9b495619730a--------------------------------)[![Christopher
    Tao](../Images/bea1e3c81cc62eb28bdba9275d6b326f.png)](https://christophertao.medium.com/?source=post_page-----9b495619730a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9b495619730a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9b495619730a--------------------------------)
    [Christopher Tao](https://christophertao.medium.com/?source=post_page-----9b495619730a--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://christophertao.medium.com/?source=post_page-----9b495619730a--------------------------------)[![Christopher
    Tao](../Images/bea1e3c81cc62eb28bdba9275d6b326f.png)](https://christophertao.medium.com/?source=post_page-----9b495619730a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9b495619730a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9b495619730a--------------------------------)
    [Christopher Tao](https://christophertao.medium.com/?source=post_page-----9b495619730a--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9b495619730a--------------------------------)
    ·10 min read·Apr 3, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9b495619730a--------------------------------)
    ·10 分钟阅读·2023 年 4 月 3 日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: One important aspect of Python programming is exception handling, which refers
    to the way that errors and unexpected events are handled during the execution
    of a program. Exception handling is essential for writing robust and reliable
    code, as it enables programmers to handle errors and exceptions in a structured
    and controlled manner.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python 编程的一个重要方面是异常处理，这指的是在程序执行过程中处理错误和意外事件的方式。异常处理对编写健壮且可靠的代码至关重要，因为它使程序员能够以结构化和受控的方式处理错误和异常。
- en: In this article, I will provide a comprehensive guide to Python exception handling,
    covering everything from basic try-except blocks to more advanced techniques.
    Whether you are **new to Python** programming or an **experienced developer**
    (You can start from section 3), this article will provide you with a complete
    overview of exception handling in Python, along with some useful tricks and tips
    that you may not have encountered before. So, whether you are just starting out
    with Python or looking to improve your exception handling skills, this article
    is the perfect resource to help you get started.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将提供一个全面的 Python 异常处理指南，涵盖从基本的 try-except 块到更高级的技术。不论你是 **新手** 还是 **经验丰富的开发者**（你可以从第
    3 节开始），这篇文章将为你提供 Python 异常处理的完整概述，并附带一些你可能未曾遇到过的实用技巧和建议。所以，无论你是刚开始学习 Python 还是希望提升你的异常处理技能，这篇文章都是帮助你入门的最佳资源。
- en: 1\. The Basics
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 基础知识
- en: '![](../Images/a62c6ba5bd93e722422f6cc6f70b2280.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a62c6ba5bd93e722422f6cc6f70b2280.png)'
- en: Image by [Saul](https://pixabay.com/users/saulhm-31267/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=106359)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=106359)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于 [Saul](https://pixabay.com/users/saulhm-31267/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=106359)
    来自 [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=106359)
- en: 1.1 The Simplest Exception Handling
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1 最简单的异常处理
- en: Let’s start with the simplest exception handling in Python. Basically, we have
    a piece of code that may have any exceptions during the run time, we can put them
    in the “try” block. Then, in the “except” block, we can do something with it,
    such as displaying some message to indicate that there was an error.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从Python中最简单的异常处理开始。基本上，我们有一段可能在运行时出现任何异常的代码，我们可以将它们放在“try”块中。然后，在“except”块中，我们可以对其进行处理，例如显示一些消息以指示发生了错误。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/56ef2e13430a531a8cf59e4896b78444.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/56ef2e13430a531a8cf59e4896b78444.png)'
- en: Also, please be noticed that the program did run successfully. Although there
    is an error, but we “caught” the error so that it is not considered “crush”.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，请注意程序确实成功运行了。尽管有错误，但我们“捕获”了错误，因此它不会被视为“崩溃”。
- en: 1.2 Catch Specific Types of Exceptions
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2 捕获特定类型的异常
- en: Sometimes, the piece of code may potentially result in different types of exceptions.
    Also, we may want to handle different types of exceptions in different ways. In
    this case, we can specify the type of error after the `except` keyword. Also,
    we can chain multiple `except` blocks to handle more than one type of error.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，代码片段可能会导致不同类型的异常。此外，我们可能希望以不同的方式处理不同类型的异常。在这种情况下，我们可以在`except`关键字后指定错误类型。同时，我们可以链式使用多个`except`块来处理多种错误类型。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/66ab8d13047c42d835f47383ba00b3cd.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/66ab8d13047c42d835f47383ba00b3cd.png)'
- en: It is common to have the last except block without an explicit error type. So,
    if there is no except-block above caught the exception, it will fall in the last
    one.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的是最后一个`except`块没有明确的错误类型。因此，如果上面没有`except`块捕获到异常，它将落入最后一个`except`块中。
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/0b40d15bfb73ea1f3fbea344f7f8acf4.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0b40d15bfb73ea1f3fbea344f7f8acf4.png)'
- en: In this example, the error should actually be a `TypeError` because the string
    `"foo"` cannot be converted into a number. Therefore, the `ZeroDivisionError`
    did not catch the exception. So, it falls in the default `except` block eventually.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，错误实际上应该是`TypeError`，因为字符串`"foo"`不能转换为数字。因此，`ZeroDivisionError`没有捕获到异常。所以，它最终落入默认的`except`块中。
- en: 1.3 Access Details of the Exception
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3 访问异常的详细信息
- en: Regarding the above “Unknown” error, is there any way to obtain more information
    from the exception? In other words, although something unexpected happened, do
    we have such a method to have some clue what is the exception about?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 关于上述“未知”错误，有没有办法从异常中获取更多信息？换句话说，尽管发生了意外，我们是否有方法来获取有关异常的一些线索？
- en: The answer is yes. We can put an argument after the `except` keyword and access
    the details of the exception from this argument variable.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是肯定的。我们可以在`except`关键字后放置一个参数，并从这个参数变量中访问异常的详细信息。
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/2d20336b461000c39d7d2740fa49e763.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2d20336b461000c39d7d2740fa49e763.png)'
- en: In this example, we use `Exception` which is the parent class of all types of
    exceptions after the `except` keyword, and catch this exception as the variable
    `e`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们在`except`关键字后使用`Exception`，这是所有类型异常的父类，并将此异常捕获为变量`e`。
- en: That is equivalent to saying, “please catch any type of exception in the variable
    `e`”. Then, we can print the variable to get the message. So, we know that the
    exception is actually we are trying to convert a literal string to an integer.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于说，“请捕获变量`e`中的任何类型的异常”。然后，我们可以打印该变量以获取消息。因此，我们知道异常实际上是我们尝试将字面量字符串转换为整数。
- en: 2\. Still the Basics, but Practical Usage
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 仍然是基础知识，但实际应用
- en: '![](../Images/b8a2768ae685f0e97592c9d48bb5bbf7.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b8a2768ae685f0e97592c9d48bb5bbf7.png)'
- en: Image by [LaterJay Photography](https://pixabay.com/users/laterjay-1627906/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1037935)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1037935)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自 [LaterJay Photography](https://pixabay.com/users/laterjay-1627906/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1037935)
    在 [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1037935)
- en: Now, let’s have a look at some practical usage patterns of exception handling
    in Python. In this section, the demo will be conducted in Python functions.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一些Python中异常处理的实际应用模式。在本节中，演示将在Python函数中进行。
- en: 2.1 Without Exception Handling
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1 没有异常处理
- en: What if we don’t handle the exception? Of course, the program will crash. Let’s
    have a look at how the “Traceback” tell us about the error.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不处理异常会怎样？当然，程序会崩溃。让我们来看一下“Traceback”是如何告诉我们错误的。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/333360bc2647e4f97a2beb0c9cdf7d79.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/333360bc2647e4f97a2beb0c9cdf7d79.png)'
- en: The program starts at the `calculate(0, 0)`, then the `calculate()` function
    calls the `divide()` function. In the above example, the `x / y` in the `divide()`
    caused the `ZeroDivisionError`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 程序从`calculate(0, 0)`开始，然后`calculate()`函数调用`divide()`函数。在上述示例中，`divide()`中的`x
    / y`引发了`ZeroDivisionError`。
- en: Looking at the traceback, the last block tells us where the exception comes
    from. Since there is no exception handling, it throws the exception back to its
    parent function `calculate()` body. Inside this function, the exception still
    has not been handled. Therefore, it throws again to its parent, where we called
    this `calculate()` function. The program crashed because the exception is not
    handled and reached the root level.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从追踪信息来看，最后一块告诉我们异常来自哪里。由于没有异常处理，它会将异常抛回到其父函数`calculate()`体内。在这个函数内部，异常仍未被处理。因此，它会再次抛回到其父级，即我们调用`calculate()`函数的地方。程序崩溃是因为异常没有被处理并且达到了根级别。
- en: 2.2 A Program with Exception Handling
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.2 带有异常处理的程序
- en: Hold on, that means we don’t have to handle exceptions whenever it may occur.
    Instead, we can handle them at a certain and appropriate level.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 等一下，这意味着我们不必在异常可能发生的任何地方进行处理。相反，我们可以在特定的适当级别处理它们。
- en: For example, there is one line of code called one function, inside this function
    it calls many other functions that may cause different types of exceptions. In
    this case, we may only need to put this one line of code in the try-except block
    so that it will be handled.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，有一行代码调用了一个函数，在这个函数内部，它调用了许多其他可能引发不同类型异常的函数。在这种情况下，我们可能只需将这一行代码放入try-except块中，以便它能被处理。
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/d6d7fb05458ee6554e3f6d231ed4efb5.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d6d7fb05458ee6554e3f6d231ed4efb5.png)'
- en: In the above example, we have an exception handling in the `calculate()` function.
    Although the exception happened in the `divide()` function, it will throw it to
    the parent level and be caught in the `calculate()` function.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们在`calculate()`函数中处理了异常。虽然异常发生在`divide()`函数中，但它会抛到父级，并在`calculate()`函数中被捕获。
- en: 2.3 The Finally Block
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.3 `finally`块
- en: Well, I want to make this article a completed guide to Python Exception Handling.
    So, I guess let’s simply explore the `finally` block.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我想把这篇文章做成一个关于Python异常处理的完整指南。所以，我想我们可以深入探讨`finally`块。
- en: Long story short, the code in the `finally` block will be executed regardless
    if there are exceptions.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 长话短说，`finally`块中的代码无论是否有异常都会被执行。
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/0cf34c13f0e66f82272b837fc1740362.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0cf34c13f0e66f82272b837fc1740362.png)'
- en: One of the most common use cases of the `finally` block is to close resources
    such as database connections and opened files. This is a very good manner to avoid
    unexcepted behaviours or memory leaks.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`finally`块最常见的用例之一是关闭诸如数据库连接和打开的文件等资源。这是一种很好的方式来避免意外行为或内存泄漏。'
- en: 2.4 Raise an Exception Deliberatively
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.4 故意引发异常
- en: Rather than catching an exception, we can also deliberately raise an exception.
    This could be very useful for debugging and control flow purposes that allow us
    to jump to a different part of the code or exit the program.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 除了捕获异常，我们还可以故意引发异常。这对于调试和控制流目的非常有用，允许我们跳转到代码的不同部分或退出程序。
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/de3655cba7edeecf0f4c43c268122325.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/de3655cba7edeecf0f4c43c268122325.png)'
- en: 3\. Extra Tricks That You May Not Know
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 你可能不知道的额外技巧
- en: '![](../Images/dce81be30002d2b2626c14f11bac027b.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dce81be30002d2b2626c14f11bac027b.png)'
- en: Image by [Pexels](https://pixabay.com/users/pexels-2286921/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1850809)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1850809)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自 [Pexels](https://pixabay.com/users/pexels-2286921/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1850809)
    的 [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1850809)
- en: If you’re not new to Python, you may have skipped ahead to this section looking
    for some advanced techniques or knowledge gaps to fill. I hope this section can
    provide you with new insights and help you further refine your understanding of
    exception handling in Python.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对Python不陌生，你可能会跳过这一部分，寻找一些高级技巧或填补知识空白。我希望这一部分能为你提供新的见解，并帮助你进一步完善对Python异常处理的理解。
- en: 3.1 Else Block
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1 `else`块
- en: Do you know that the `try ... except ... finally` are not everything in Python
    exception handling? I guess you may not know that we can also use `else` in exception
    handling. The `else` block will only be executed if there is no exception.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道吗，`try ... except ... finally` 不是 Python 异常处理的全部？我猜你可能不知道我们还可以在异常处理中使用 `else`。只有在没有异常的情况下，`else`
    块才会被执行。
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/eb2b150bb24ae380669a23e62994f73c.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eb2b150bb24ae380669a23e62994f73c.png)'
- en: In fact, the `else` block is not a must-known thing. Theoretically, we can put
    the code after the line that may cause the exception. It will run anyway if there
    is no exception.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，`else` 块并不是必须了解的东西。从理论上讲，我们可以将代码放在可能引发异常的行之后。如果没有异常，它会运行。
- en: 'However, there are several weak reasons that we may want to use the `else`
    block. Firstly, it may improve readability because it is pretty natural to understand
    it as such: “if there is an exception, handle it like this, else please execute
    this code”. Secondly, the `else` block physically separated the code which may
    cause exceptions and the code won’t.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可能会有几个较弱的理由来使用 `else` 块。首先，它可能提高代码的可读性，因为理解起来很自然： “如果有异常，按这种方式处理，否则请执行这段代码”。其次，`else`
    块将可能引发异常的代码与不会引发异常的代码物理上分开。
- en: 3.2 Warning Module
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2 警告模块
- en: This might not be closely related to exception handling. However, some readers
    may be interested in this. If you have ever used Pandas library, sometimes it
    will give us warnings if we used some deprecated API or doing things with risks.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能与异常处理没有直接关系。然而，有些读者可能对此感兴趣。如果你曾经使用过 Pandas 库，有时它会在我们使用一些过时的 API 或做一些有风险的操作时给出警告。
- en: How this is done? The answer is to use the `warning` module.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这怎么做？答案是使用 `warning` 模块。
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/710c658603f545f675dc65d09baf7ac6.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/710c658603f545f675dc65d09baf7ac6.png)'
- en: 3.3 Assertion — Another Way of Raising an Exception
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.3 断言 — 引发异常的另一种方式
- en: Another related technique in Python is the assertions. It is used to check whether
    a certain condition is true or false during the execution of a program. If the
    condition is true, the program continues executing normally. If the condition
    is false, an `AssertionError` is raised, interrupting the normal flow of the program.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的另一个相关技术是断言。它用于检查程序执行期间某个条件是否为真或假。如果条件为真，程序会正常执行。如果条件为假，则会引发 `AssertionError`，中断程序的正常流程。
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/a0c354e13540749116c04a8d5441378d.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a0c354e13540749116c04a8d5441378d.png)'
- en: The assertion is commonly used for debugging and unit testing in Python. If
    the condition is satisfied, nothing will happen.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 断言通常用于 Python 的调试和单元测试。如果条件满足，则不会发生任何事情。
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/3c0eb336f93c54c6cf5afa77bb55a31a.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3c0eb336f93c54c6cf5afa77bb55a31a.png)'
- en: 3.4 Custom Exception Type
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.4 自定义异常类型
- en: Sometimes, we may want to define and use custom exception types when we want
    to provide more specific and informative error messages to the user, or when we
    want to differentiate between different types of errors that can occur in our
    code.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能希望定义和使用自定义异常类型，以便向用户提供更具体和详细的错误信息，或在代码中区分不同类型的错误。
- en: We can define a custom exception as simply as follows.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地定义一个自定义异常，如下所示。
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/a1be1b6e7364f3dbaa1a973b4db05130.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a1be1b6e7364f3dbaa1a973b4db05130.png)'
- en: Of course, we can do whatever we like because this is a customised class.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以做任何喜欢的事情，因为这是一个定制化的课程。
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/f0ee796d03f602492b2c1891b1e807b7.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f0ee796d03f602492b2c1891b1e807b7.png)'
- en: Using custom exceptions in Python allows us to exercise our imagination and
    provides the maximum level of flexibility in handling errors and exceptions in
    our code.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中使用自定义异常可以发挥我们的想象力，并提供处理错误和异常的最大灵活性。
- en: 4\. The Suppress Module
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4. 抑制模块
- en: '![](../Images/18f163dc713a49be7e30fb2de18e0029.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/18f163dc713a49be7e30fb2de18e0029.png)'
- en: Image by [Gerd Altmann](https://pixabay.com/users/geralt-9301/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=582635)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=582635)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Gerd Altmann](https://pixabay.com/users/geralt-9301/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=582635)
    提供，来源于 [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=582635)
- en: In the last section, I want to introduce the `suppress` module in the `contextlib`.
    It is built-in into Python, but fewer people know about it and it is rarely used.
    However, it can be very useful in some cases.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我想介绍`contextlib`中的`suppress`模块。它是Python内置的，但很少有人知道且使用得很少。然而，它在某些情况下非常有用。
- en: Suppose we have some lines of code that may cause exceptions. However, we may
    don’t care about these exceptions. Therefore, rather than raising these exceptions
    and handling them, the easiest way is to ignore them, or “suppress” them.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一些可能引发异常的代码行。然而，我们可能不关心这些异常。因此，与其引发这些异常并处理它们，最简单的方法是忽略它们，或“抑制”它们。
- en: For example, the code below will output nothing.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面的代码将不输出任何内容。
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The above code uses a with-statement together with the `suppress` function.
    It will ignore all the `ZeroDivisionError` happens in the code inside.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码使用了with语句与`suppress`函数。它将忽略代码中发生的所有`ZeroDivisionError`。
- en: Why it is useful? Think about we have a series of user inputs. Some of the input
    values may not be valid. Suppose we don’t care about the invalid inputs at all.
    Instead, we just want to ignore them and process those that are valid.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这很有用？想象一下我们有一系列用户输入，其中一些输入值可能无效。假设我们完全不关心这些无效输入，而是只想忽略它们，处理那些有效的输入。
- en: Let’s simulate the scenario by having a list of items.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个包含项目的列表来模拟这种场景。
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](../Images/dc5a3e93c9f39fe59ff0e6ddbd6201a1.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dc5a3e93c9f39fe59ff0e6ddbd6201a1.png)'
- en: As shown above, those zeros and strings are simply ignored. The code looks pretty
    neat and clean.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，那些零和字符串被简单地忽略了。代码看起来非常整洁。
- en: If you want to explore more for the `suppress` module more, I have a particular
    article that will do a deep dive.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想深入探索`suppress`模块，我有一篇特别的文章会做深入讲解。
- en: '[](/quick-python-tip-suppress-known-exception-without-try-except-a93ec34d3704?source=post_page-----9b495619730a--------------------------------)
    [## Quick Python Tip: Suppress Known Exception Without Try Except'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/quick-python-tip-suppress-known-exception-without-try-except-a93ec34d3704?source=post_page-----9b495619730a--------------------------------)
    [## 快速Python提示：在不使用try except的情况下抑制已知异常'
- en: Handle known exceptions in a more elegant way in Python.
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以更优雅的方式处理Python中的已知异常。
- en: towardsdatascience.com](/quick-python-tip-suppress-known-exception-without-try-except-a93ec34d3704?source=post_page-----9b495619730a--------------------------------)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/quick-python-tip-suppress-known-exception-without-try-except-a93ec34d3704?source=post_page-----9b495619730a--------------------------------)
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: '![](../Images/86aecaa008178f97654c091a49d33516.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/86aecaa008178f97654c091a49d33516.png)'
- en: Image by [Mirka](https://pixabay.com/users/370eis-21311355/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7739243)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7739243)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Mirka](https://pixabay.com/users/370eis-21311355/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7739243)提供，来源于[Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7739243)
- en: In this article, we have explored the different aspects of Python exception
    handling. There were some useful tricks and tips for handling exceptions, such
    as using the `warning` module and suppressing specific exceptions with the `suppress`
    module.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们探讨了Python异常处理的不同方面。介绍了一些处理异常的有用技巧，比如使用`warning`模块和用`suppress`模块来抑制特定的异常。
- en: By mastering exception handling in Python, you can write more robust and reliable
    code that can handle unexpected events and errors in a structured and controlled
    way. Whether you are a beginner or an experienced Python developer, understanding
    exception handling is essential for writing effective and efficient code. I hope
    that this article has provided you with a comprehensive guide to Python exception
    handling and some useful tips and tricks to help you improve your exception handling
    skills.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通过掌握Python中的异常处理，你可以编写更健壮和可靠的代码，能够以结构化和控制的方式处理意外事件和错误。无论你是初学者还是经验丰富的Python开发者，理解异常处理对于编写有效和高效的代码至关重要。我希望这篇文章能为你提供关于Python异常处理的全面指南，以及一些有用的技巧和建议，帮助你提高异常处理技能。
- en: '[](https://medium.com/@qiuyujx/membership?source=post_page-----9b495619730a--------------------------------)
    [## Join Medium with my referral link - Christopher Tao'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@qiuyujx/membership?source=post_page-----9b495619730a--------------------------------)
    [## 通过我的推荐链接加入Medium - Christopher Tao'
- en: Thank you for reading my articles! Buy me a coffee please if you don't mind
    :) Your membership fee supports thousands…
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 感谢阅读我的文章！如果你不介意的话，请请我喝杯咖啡 :) 你的会员费支持成千上万的人…
- en: medium.com](https://medium.com/@qiuyujx/membership?source=post_page-----9b495619730a--------------------------------)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/@qiuyujx/membership?source=post_page-----9b495619730a--------------------------------)'
- en: '**If you feel my articles are helpful, please consider joining Medium Membership
    to support me and thousands of other writers! (Click the link above)**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你觉得我的文章对你有帮助，请考虑加入 Medium 会员支持我和其他成千上万的作者！（点击上面的链接）**'
- en: '*Unless otherwise noted all images are by the author*'
  id: totrans-116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*除非另有说明，所有图片均由作者提供*'
