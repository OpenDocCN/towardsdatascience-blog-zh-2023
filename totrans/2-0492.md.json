["```py\nimport pandas as pd\n\n# Load the data from the provided CSV file\nwell_data = pd.read_csv(\"/mnt/data/L0509WellData.csv\")\n\n# Display the first few rows of the data\nwell_data.head()\n```", "```py\n# Replace -999 values with NaN\nwell_data.replace(-999, float(\"nan\"), inplace=True)\n\n# Display the first few rows of the updated data\nwell_data.head()\n```", "```py\nRESULT\n       DEPTH         GR         DT      RHOB      DRHO      NPHI\n0  4609.8008  89.059479       <NA>  2.483700  0.018494  0.129119\n1  4609.9008  90.721848       <NA>  2.489308  0.013656  0.108034\n2  4610.0008  90.709061       <NA>  2.501088  0.011289  0.085650\n3  4610.1008  89.568954  66.223099  2.515450  0.008615  0.070332\n4  4610.2008  88.169571  66.705551  2.530982  0.005628  0.065343\n```", "```py\n# Setting up the figure and axes again\nfig, ax = plt.subplots(nrows=1, ncols=6, figsize=(15, 10), sharey=True)\n\n# Plotting DEPTH on the first track\nax[0].plot(well_data['DEPTH'], well_data['DEPTH'], color='black')\nax[0].set_title('DEPTH')\nax[0].set_ylabel('Depth (m)')\nax[0].invert_yaxis()  # Invert the y-axis to have depth increasing downwards\nax[0].grid()\n\n# Plotting GR on the second track\nax[1].plot(well_data['GR'], well_data['DEPTH'], color='green')\nax[1].set_title('GR (Gamma Ray)')\nax[1].set_xlim(0, 150)  # Typical scale for GR\nax[1].grid()\n\n# Plotting DT on the third track (excluding NaN values)\nax[2].plot(well_data['DT'].dropna(), well_data['DEPTH'].loc[well_data['DT'].dropna().index], color='blue')\nax[2].set_title('DT (Delta Time)')\nax[2].grid()\n\n# Plotting RHOB on the fourth track\nax[3].plot(well_data['RHOB'], well_data['DEPTH'], color='red')\nax[3].set_title('RHOB (Bulk Density)')\nax[3].set_xlim(1.5, 3.0)  # Typical scale for RHOB\nax[3].grid()\n\n# Plotting DRHO on the fifth track\nax[4].plot(well_data['DRHO'], well_data['DEPTH'], color='cyan')\nax[4].set_title('DRHO')\nax[4].grid()\n\n# Plotting NPHI on the sixth track\nax[5].plot(well_data['NPHI'], well_data['DEPTH'], color='magenta')\nax[5].set_title('NPHI (Neutron Porosity)')\nax[5].set_xlim(-0.15, 0.45)  # Typical scale for NPHI\nax[5].grid()\n\nplt.tight_layout()\nplt.show()\n```", "```py\n# Setting up the figure and axes with one less subplot for depth\nfig, ax = plt.subplots(nrows=1, ncols=5, figsize=(15, 10), sharey=True)\n\n# Define a dictionary for colors and scales for each log\ncolors = {\n    \"GR\": \"green\",\n    \"DT\": \"magenta\",\n    \"RHOB\": \"red\",\n    \"DRHO\": \"grey\",\n    \"NPHI\": \"blue\"\n}\nscales = {\n    \"GR\": (0, 150),\n    \"DT\": (140, 40),\n    \"RHOB\": (1.95, 2.95),\n    \"DRHO\": (-0.2, 0.2),\n    \"NPHI\": (0.45, -0.15)\n}\n\n# Plotting each log with the specified colors and scales\nlogs = ['GR', 'DT', 'RHOB', 'DRHO', 'NPHI']\nfor i, log in enumerate(logs):\n    ax[i].plot(well_data[log], well_data['DEPTH'], color=colors[log])\n    ax[i].set_xlim(scales[log])\n    ax[i].set_title(log)\n    ax[i].grid(color=\"lightgrey\")\n    # Adding top and right spines\n    ax[i].spines['top'].set_visible(True)\n    ax[i].spines['right'].set_visible(True)\n\nax[0].set_ylabel('Depth (m)')\nax[0].invert_yaxis()  # Invert the y-axis to have depth increasing downwards\n\nplt.tight_layout()\nplt.show()\n```", "```py\n# Setting up the figure and axes again\nfig, ax = plt.subplots(nrows=1, ncols=5, figsize=(15, 10), sharey=True)\n\n# Plotting each log with the specified colors and scales, excluding NaN values for DT\nfor i, log in enumerate(logs):\n    valid_indices = well_data[log].dropna().index\n    ax[i].plot(well_data[log].loc[valid_indices], well_data['DEPTH'].loc[valid_indices], color=colors[log])\n    ax[i].set_xlim(scales[log])\n    ax[i].set_title(log)\n    ax[i].grid(color=\"lightgrey\")\n    # Adding top and right spines\n    ax[i].spines['top'].set_visible(True)\n    ax[i].spines['right'].set_visible(True)\n\n    # Adding the fill for the GR subplot\n    if log == 'GR':\n        # Add color based on the value of the GR line\n        for depth, value in zip(well_data['DEPTH'].loc[valid_indices], well_data[log].loc[valid_indices]):\n            ax[i].fill_betweenx([depth-0.05, depth+0.05], \n                                0, value, \n                                facecolor=plt.cm.YlOrBr(value/150), \n                                edgecolor='none', \n                                zorder=0)  # Place the fill behind the line\n\nax[0].set_ylabel('Depth (m)')\nax[0].invert_yaxis()  # Invert the y-axis to have depth increasing downwards\n\nplt.tight_layout()\nplt.show()\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np \n\nleft_col_value = 0\nright_col_value = 150\n\n#assign the column to a variable for easier reading\ncurve = well_data['GR']\n\n#calculate the span of values\nspan = abs(left_col_value - right_col_value)\n\n#assign a color map\ncmap = plt.get_cmap('YlOrBr')\n\n#create array of values to divide up the area under curve\ncolor_index = np.arange(left_col_value, right_col_value, span / 100)\n\n#setup the plot\nwell_data.plot(x='GR', y='DEPTH', c='black', lw=0.5, legend=False, figsize=(6,15))\nplt.ylim(4800, 4600)\nplt.xlim(left_col_value, right_col_value)\nplt.title('Plot With a Variable Fill to Y-Axis')\n\n#loop through each value in the color_index\nfor index in sorted(color_index):\n    index_value = (index - left_col_value)/span\n    color = cmap(index_value) #obtain colour for color index value\n    plt.fill_betweenx(well_data['DEPTH'], 0 , curve, where = curve >= index,  color = color)\n\nplt.show()\n```", "```py\n# Setting up the figure and axes again\nfig, ax = plt.subplots(nrows=1, ncols=4, figsize=(15, 10), sharey=True)\n\n# Plotting each log with the specified colors and scales, excluding NaN values\nfor i, log in enumerate(logs):\n    valid_indices = well_data[log].dropna().index\n    ax[i].plot(well_data[log].loc[valid_indices], well_data['DEPTH'].loc[valid_indices], color=colors[log])\n    ax[i].set_xlim(scales[log])\n    # Remove subplot title\n    ax[i].set_title(\"\")\n    # Add axis label representing the name of the log measurement\n    ax[i].set_xlabel(log, color=colors[log])\n    # Color tick marks and tick labels in the same color as the line\n    ax[i].tick_params(axis='x', colors=colors[log])\n    # Adding top and right spines\n    ax[i].spines['top'].set_visible(True)\n    ax[i].spines['right'].set_visible(True)\n\n    # Adding the fill for the GR subplot\n    if log == 'GR':\n        # Add color based on the value of the GR line\n        for depth, value in zip(well_data['DEPTH'].loc[valid_indices], well_data[log].loc[valid_indices]):\n            ax[i].fill_betweenx([depth-0.05, depth+0.05], \n                                0, value, \n                                facecolor=plt.cm.YlOrBr(value/150), \n                                edgecolor='none', \n                                zorder=0)  # Place the fill behind the line\n        ax[i].grid(color=\"lightgrey\")\n\n    # Adding NPHI to the RHOB subplot with a secondary x-axis\n    if log == 'RHOB':\n        ax2 = ax[i].twiny()  # Create a secondary x-axis for NPHI\n        valid_indices_nphi = well_data['NPHI'].dropna().index\n        ax2.plot(well_data['NPHI'].loc[valid_indices_nphi], well_data['DEPTH'].loc[valid_indices_nphi], color=colors['NPHI'])\n        ax2.set_xlim(scales['NPHI'])\n        ax2.set_xlabel('NPHI', color=colors['NPHI'])\n        ax2.tick_params(axis='x', colors=colors['NPHI'])\n        # Remove gridlines for NPHI and display the ones for RHOB\n        ax2.grid(False)\n        ax[i].grid(color=\"lightgrey\")\n\nax[0].set_ylabel('Depth (m)')\nax[0].invert_yaxis()  # Invert the y-axis to have depth increasing downwards\n\nplt.tight_layout()\nplt.show()\n```"]