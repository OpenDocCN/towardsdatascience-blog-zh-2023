["```py\n**Table of contents:** \nHow to create a new Pandas column\nHow to add a new column to a Pandas data frame\nHow to rename a column in Pandas\nHow to drop a Pandas column\nHow to find unique values in a Pandas column\nHow to transform a Pandas column into a list\nHow to sort a Pandas data frame for a column\n```", "```py\n# Create a Panad series\nseries = pd.Series([6, 12, 18, 24])\n\n# Print Pandas series\nprint(series)\n\n>>>\n\n  0     6\n  1    12\n  2    18\n  3    24\n  dtype: int64\n```", "```py\nimport pandas as pd\n\n# Create a Pandas column as a Pandas data frame\ndf = pd.DataFrame({'A': [1, 2, 3, 4]})\n\n# Print Pandas data frame\nprint(df)\n\n>>>\n\n     A\n  0  1\n  1  2\n  2  3\n  3  4\n```", "```py\n**NOTE:**\n\nIf we take a look more closely to what we've done here, we can see that\nwe can create a Pandas data frame as a dictionary.\n\nIn fact, \"A\" is the key and it's separated by a list of values\nby a colon. Then, both the keys and the values are inside curly braces.\n```", "```py\nimport numpy as np\nimport pandas as pd\n\n# Create a NumPy array\nvalues = np.array([5, 10, 15, 20])\n\n# Transform array into Pandas data frame\ndf = pd.DataFrame(values)\n\n# Print data frame\nprint(df)\n\n>>>\n\n    0\n0   5\n1  10\n2  15\n3  20\n```", "```py\nimport pandas as pd\n\n# Create a DataFrame\ndf = pd.DataFrame({'A': [1, 2, 3, 4]})\n\n# Add a new column by using a list of values\ndf['B'] = [20, 30, 40, 50]\n\n# Print data frame\nprint(df)\n\n>>>\n\n   A   B\n0  1  20\n1  2  30\n2  3  40\n3  4  50\n```", "```py\nimport pandas as pd\n\n# Create a DataFrame\ndf = pd.DataFrame({'A': [1, 2, 3, 4]})\n\n# Create a column doubling the values of column A\ndf['B'] = df['A'] * 2\n\n# Apply lambda function to column A to create column C\ndf['C'] = df['A'].apply(lambda x: x ** 2)\n\n# Print data frame\nprint(df)\n\n>>>\n\n   A  B   C\n0  1  2   1\n1  2  4   4\n2  3  6   9\n3  4  8  16\n```", "```py\nimport pandas as pd\n\n# Create a DataFrame\ndf = pd.DataFrame({'A': [1, 2, 3, 4]})\n\n# Create a new column using pd.Series()\nvalues = pd.Series([5, 10, 15, 20]) # Create series\ndf['B'] = values # Add series to data frame as a column\n\n# Print data frame\nprint(df)\n\n>>>\n\n   A   B\n0  1   5\n1  2  10\n2  3  15\n3  4  20\n```", "```py\nimport pandas as pd\n\n# Create a DataFrame\ndf = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [5, 6, 7, 8]})\n\n# Create a Pandas column as a data frame\ndf['C'] = pd.DataFrame({'C': [9, 10, 11, 12]})\n\n# Print data frame\nprint(df)\n\n>>>\n\n   A  B   C\n0  1  5   9\n1  2  6  10\n2  3  7  11\n3  4  8  12\n```", "```py\n**NOTE**:\n\nof course, the same methodology can be applied if we create a column\nas a NumPy array. We won't show the method here as \"the game\" should\nnow be clear.\n```", "```py\nimport pandas as pd\n\n# Creating a DataFrame\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\n\n# Renaming a single column\ndf = df.rename(columns={'A': 'NewA'})\n\n# Print data frame\nprint(df)\n\n>>>\n     NewA  B\n0     1    4\n1     2    5\n2     3    6 \n```", "```py\nimport pandas as pd\n\n# Creating a DataFrame\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\n\n# Rename multiple columns\ndf = df.rename(columns={'A': 'NewA', 'B': 'NewB'})\n\n# Print data frame\nprint(df)\n\n>>>\n\n    NewA  NewB\n0     1     4\n1     2     5\n2     3     6\n```", "```py\nimport pandas as pd\n\n# Creating a DataFrame\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\n\n# Renaming all columns\ndf.columns = ['NewA', 'NewB']\n\n# Print data frame\nprint(df)\n\n>>>\n\n    NewA  NewB\n0     1     4\n1     2     5\n2     3     6\n```", "```py\nimport pandas as pd\n\n# Creating a DataFrame\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\n\n# Renaming all columns\ndf.set_axis(['NewA', 'NewB'], axis=1, inplace=True)\n\n# Print data frame\nprint(df)\n\n>>>\n\n     NewA  NewB\n0     1     4\n1     2     5\n2     3     6\n```", "```py\nimport pandas as pd\n\n# Creating a DataFrame\ndf = pd.DataFrame({'COLUMN_1': [1, 2, 3], 'COLUMN_2': [4, 5, 6]})\n\n# Renaming columns using a lambda function\ndf = df.rename(columns=lambda x: x.lower())  # Lowercase column names\n\n# Print data frame\nprint(df)\n\n>>>\n\n      column_1  column_2\n0         1         4\n1         2         5\n2         3         6\n```", "```py\nimport pandas as pd\n\n# Creating a DataFrame\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\n\n# Drop one column and substitute the current data frame\ndf = df.drop('A', axis=1)\n\n# Print updated data frame\nprint(df)\n\n>>>\n\n   B  C\n0  4  7\n1  5  8\n2  6  9\n```", "```py\nimport pandas as pd\n\n# Creating a DataFrame\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9],\n      'D': [10, 11, 12]})\n\n# Drop one column and substitute the current data frame\ndf_2 = df.drop(['A', 'D'], axis=1)\n\n# Print new data frame\nprint(df_2)\n\n>>>\n\n   B  C\n0  4  7\n1  5  8\n2  6  9\n```", "```py\nimport pandas as pd\n\n# Creating a DataFrame\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9],\n      'D': [10, 11, 12]})\n\n# Drop one column and append to a new data frame\ndf_2 = df.drop(df.columns[[0, 1]], axis=1)\n\n# Print new data frame\nprint(df_2)\n\n>>>\n\n   C    D\n0  7   10\n1  8   11\n2  9   12\n```", "```py\nimport pandas as pd\n\n# Creating a DataFrame\ndf = pd.DataFrame({'A': [1, 2, 3, 1, 3], 'B': [4, 5, 6, 7, 8,],\n    'C': [7, 8, 9, 10, 11]})\n\n# Find unique values in a Pandas column\nunique_values = df['A'].value_counts()\n\n# Print unique values\nprint(unique_values)\n\n>>>\n\n1    2\n3    2\n2    1\nName: A, dtype: int64\n```", "```py\nimport pandas as pd\n\n# Creating a DataFrame\ndf = pd.DataFrame({'A': [1, 2, 3, 1, 3], 'B': [4, 5, 6, 7, 8,],\n       'C': [7, 8, 9, 10, 11]})\n\n# Drop the duplicate values in a Pandas column\nunique_values = df['A'].drop_duplicates()\n\n# Print unique values\nprint(unique_values)\n\n>>>\n\n0    1\n1    2\n2    3\n```", "```py\nimport pandas as pd\n\n# Creating a DataFrame with duplicates\ndf = pd.DataFrame({'A': [1, 2, 2, 3, 4, 4], 'B': [5, 6, 6, 7, 8, 8]})\n\n# Check if there are duplicates in the DataFrame\nhas_duplicates = df.duplicated().any()\n\n# Print the result\nprint(has_duplicates)\n\n>>>\n\nTrue\n```", "```py\nimport pandas as pd\n\n# Creating a DataFrame with duplicates\ndf = pd.DataFrame({'A': [1, 2, 2, 3, 4, 4], 'B': [5, 6, 6, 7, 8, 8]})\n\n# Find duplicate rows\nduplicate_rows = df.duplicated()\n\n# Print the duplicate rows\nprint(df[duplicate_rows])\n\n>>>\n\n   A  B\n2  2  6\n5  4  8\n```", "```py\nimport pandas as pd\n\n# Creating a DataFrame\ndf = pd.DataFrame({'A': [1, 2, 3, 1, 3], 'B': [4, 5, 6, 7, 8,],\n    'C': [7, 8, 9, 10, 11]})\n\n# Transform Pandas column into a list\ncolumn_list = list(df['B'])\n\n# Print list\nprint(column_list)\n\n>>>\n\n[4, 5, 6, 7, 8]\n```", "```py\nimport pandas as pd\n\n# Creating a DataFrame\ndf = pd.DataFrame({'A': [1, 2, 3, 1, 3], 'B': [4, 5, 6, 7, 8,],\n      'C': [7, 8, 9, 10, 11]})\n\n# Transform Pandas column into a list\ncolumn_list = df['B'].to_list()\n\n# Print list\nprint(column_list)\n\n>>>\n\n[4, 5, 6, 7, 8]\n```", "```py\nimport pandas as pd\n\n# Creating a DataFrame\ndf = pd.DataFrame({'A': [10, 2, 7, 1, 15], 'B': [4, 2, 6, 28, 8,],\n    'C': [7, 1, 9, 10, 19]})\n\n# Sort df for A in ascending order\ndf.sort_values('A', ascending=True, inplace=True)\n\n# Print sorted data frame\nprint(df)\n\n>>>\n\n    A   B   C\n3   1  28  10\n1   2   2   1\n2   7   6   9\n0  10   4   7\n4  15   8  19\n```", "```py\nimport pandas as pd\n\n# Creating a DataFrame\ndf = pd.DataFrame({'A': [10, 0, 0, 1, 15], 'B': [4, 2, 6, 28, 8,],\n    'C': [7, 1, 15, 10, 19]})\n\n# Sort NaNs in the beginning\ndf.sort_values('A', ascending=True, inplace=True)\n\n# Print sorted data frame\nprint(df)\n\n>>>\n\n    A   B   C\n1   0   2   1\n2   0   6  15\n3   1  28  10\n0  10   4   7\n4  15   8  19\n```", "```py\nimport pandas as pd\n\n# Creating a DataFrame\ndf = pd.DataFrame({'A': [10, 2, 7, 1, 15], 'B': [4, 2, 6, 28, 8,],\n    'C': [7, 1, 9, 10, 19]})\n\n# Sort data frame for index\ndf.sort_index(inplace=True)\n\n# Print sorted data frame\nprint(df)\n\n>>>\n\n    A   B   C\n0  10   4   7\n1   2   2   1\n2   7   6   9\n3   1  28  10\n4  15   8  19\n```"]