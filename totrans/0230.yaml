- en: A Simple Guide to Understand the apply() Functions in R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/a-simple-guide-to-understand-the-apply-functions-in-r-69277fc7e522](https://towardsdatascience.com/a-simple-guide-to-understand-the-apply-functions-in-r-69277fc7e522)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn how to use these helpful functions once and for all
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://gustavorsantos.medium.com/?source=post_page-----69277fc7e522--------------------------------)[![Gustavo
    Santos](../Images/a19a9f4525cdeb6e7a76cd05246aa622.png)](https://gustavorsantos.medium.com/?source=post_page-----69277fc7e522--------------------------------)[](https://towardsdatascience.com/?source=post_page-----69277fc7e522--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----69277fc7e522--------------------------------)
    [Gustavo Santos](https://gustavorsantos.medium.com/?source=post_page-----69277fc7e522--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----69277fc7e522--------------------------------)
    ·8 min read·Oct 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d38e794bd5b719ca31a8e398cfe549a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Kelly Sikkema](https://unsplash.com/@kellysikkema?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/0iKjge_aOVo?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I will start this post by saying that I work daily with **R** and **Python**
    languages. Honestly, I find it easier and more intuitive the way the `apply` functions
    are used in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Thinking about the reason behind that, I believe it is because there aren’t
    many options in Python. The R Language presents many different options, the *family
    of apply functions* as I like to refer to them.
  prefs: []
  type: TYPE_NORMAL
- en: I remember that once I read somewhere somebody saying they always go directly
    to loops to solve a problem because they can never remember what each of the apply
    functions do and which one would be the most suited version to use for that case.
  prefs: []
  type: TYPE_NORMAL
- en: Well, I hope that those kind of problems will end after this post. It is my
    intention that those who read this article end it with a good understanding of
    the family of functions, and of how and when to use them.
  prefs: []
  type: TYPE_NORMAL
- en: To perform the exercises, let’s quickly create a sample data frame, without
    too much criteria. An ID, the product name, qty sold and dollar amount for two
    different periods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: No more small talk, let’s dive in.
  prefs: []
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The *apply family* in R has 4 main functions: `apply()`, `lapply()`, `sapply()`,
    and `tapply()`.'
  prefs: []
  type: TYPE_NORMAL
- en: apply( )
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `apply()` function names the *family*. It is probably the most straightforward
    one to be used. This function *applies* the same function to all the elements
    of a row or a column. Here is the syntax.
  prefs: []
  type: TYPE_NORMAL
- en: '`apply(X, MARGIN, FUN)`'
  prefs: []
  type: TYPE_NORMAL
- en: Apply to the matrix X, on the rows (1) or columns (2), the function specified.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The easiest example is the application of the **mean** value. We have a dataset
    with a bunch of products sales. But what’s the mean quantity sold and the mean
    dollar amount sold?
  prefs: []
  type: TYPE_NORMAL
- en: To quickly see that, we can use `apply` and choose the function `mean` to be
    applied to every numeric column in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: So, our `X` a matrix with the numeric columns 3 (`qty`) and 4 (`amt`) of our
    dataset — since we can’t take the mean of *product A* and *product B.* The `MARGIN`
    can be `1` for apply to rows or `2` when applying the function to columns. `FUN`
    is the function to be applied to every element. The code will be as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Common Errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We must use the slice notation for `X` when using `apply()` because R would
    throw an error if we try to use the whole dataset `dtf`, given that there are
    string columns. We can’t have the mean point of strings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Even if we try to use a whole column, such as `dtf$qty` to get the mean of the
    quantities (which is numeric) it is not going to work as well, because there is
    just one variable, so it is easier to simply use `mean(dtf$qty)`, right?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When running `apply()`, R will first read the dimensions of the object `X` prior
    to running the function. If you try `dim(dtf$qty)`, you will see that the output
    is `NULL`. That is why you get that error below. The dimension needs to be over
    1.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Great. Nice and easy.
  prefs: []
  type: TYPE_NORMAL
- en: Apply function by row
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let’s take another look at the data again. If we want to calculate the mean
    by row, to know the average between amount1 and amount2 we can use the same code,
    but just changing to `MARGIN=1` now, and the function will calculate the simple
    average of the row:`[amt + amt2] / 2`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: And yet, we can add that to the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If we want to add a column that will calculate the `amt/qty` , we can calculate
    that by row (`MARGIN=1`) using a custom function within apply. The custom functions
    takes a matrix **mtrx** and divides the value in the second column of **mtrx**
    by the value from the first column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: lapply( )
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In R language, a **list** is a concept different than it is for Python. In R,
    it is a collection of objects, not necessarily of the same type. And there will
    be occasions when we need to apply a function to each element in a list. That’s
    what `lapply()` is used for.
  prefs: []
  type: TYPE_NORMAL
- en: Important to note that `lapply` **returns a list object** with the same length
    as X.
  prefs: []
  type: TYPE_NORMAL
- en: '`lapply(X, FUN)`'
  prefs: []
  type: TYPE_NORMAL
- en: The simplest example I can think of is if you have a list and you want to check
    the type of each object in that list. Let’s see the code for this simple example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As expected, the same length (4 objects) and the function `class` was applied
    to every element in the list. Basically, you should use that method if you’re
    dealing with a list object or if you need to have a list returned.
  prefs: []
  type: TYPE_NORMAL
- en: You should use that method if you’re dealing with a list object or if you need
    to have a list returned.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: sapply( )
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As per the documentation, `sapply()` is an user-friendly version of `lapply()`,
    **returning a vector or matrix of same length** instead of returning a list. If
    the argument `simplify=TRUE`, which is on by default, it will return an array
    (simplified object).
  prefs: []
  type: TYPE_NORMAL
- en: sapply( ) is an user-friendly version of lapply( ), that will return a simpler
    object, like an array.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`sapply(X, FUN, simplify = TRUE)`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Going back to our created dataset `dtf`, the column `product` brings the names
    preceded by the word ‘*product*’. If we want to remove that, `sapply` can be a
    good helper. Instead of going with a loop or even before loading Tidyverse to
    do that, remember that the apply functions from Base R can help.
  prefs: []
  type: TYPE_NORMAL
- en: Observe that we’re using a custom function here to split the string in two pieces,
    once it finds the space character, and taking the second element of that list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: tapply( )
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, `tapply()` is a function to be used when you’re dealing with factors
    (or groups).
  prefs: []
  type: TYPE_NORMAL
- en: '`tapply(X, INDEX, FUN, simplify = TRUE)`'
  prefs: []
  type: TYPE_NORMAL
- en: Use tapply to apply a function to every group of values.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The obvious example for this function is if we want to check the mean of `amt`
    by product without a *group by* function, `tapply` can be handy.
  prefs: []
  type: TYPE_NORMAL
- en: '`X` is the matrix or vector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INDEX` is the column with the groups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FUN` is the function to be applied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: That’s about it for the most used functions from the apply family in R.
  prefs: []
  type: TYPE_NORMAL
- en: Before You Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, the apply functions are great mapping functions. In your daily job as
    a data scientist, there will be several occasions where a mapping function is
    much better than a loop, being that for performance purposes or just for a better
    code readability.
  prefs: []
  type: TYPE_NORMAL
- en: With this quick intro, I am sure you can now *apply* the family of apply functions
    to your data.
  prefs: []
  type: TYPE_NORMAL
- en: '`apply`: Use to apply the same function to every element of a row or column
    in a dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lapply`: Use to apply a function to each element of a list. Returns a list
    of same length as result.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sapply`: friendly version of lapply that returns an array as result.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tapply`: use to apply a function to each group of values. Almost like a group
    by.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Code in GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/gurezende/Studying/tree/master/R/apply?source=post_page-----69277fc7e522--------------------------------)
    [## Studying/R/apply at master · gurezende/Studying'
  prefs: []
  type: TYPE_NORMAL
- en: This is a repository with my tests and studies of new packages - Studying/R/apply
    at master · gurezende/Studying
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/gurezende/Studying/tree/master/R/apply?source=post_page-----69277fc7e522--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[](https://www.guru99.com/r-apply-sapply-tapply.html?source=post_page-----69277fc7e522--------------------------------#5)
    [## apply(), lapply(), sapply(), tapply() Function in R with Examples'
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial aims at introducing the apply() function collection. The apply()
    function is the most basic of all…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.guru99.com](https://www.guru99.com/r-apply-sapply-tapply.html?source=post_page-----69277fc7e522--------------------------------#5)
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.datacamp.com/tutorial/r-tutorial-apply-family](https://www.datacamp.com/tutorial/r-tutorial-apply-family)'
  prefs: []
  type: TYPE_NORMAL
- en: '[SANTOS, Gustavo R. 2023\. *Data Wrangling with R.* 1 ed. Packt Publishing.](https://a.co/d/1gij8AW)'
  prefs: []
  type: TYPE_NORMAL
