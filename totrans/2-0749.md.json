["```py\nimport geopandas as gpd # version: 0.9.0\nimport matplotlib.pyplot as plt # version: 3.7.1\n\ngdf = gpd.read_file('dataverse_files-2')\ngdf = gdf.to_crs(4326)\nprint(len(gdf))\ngdf.head(3)\n```", "```py\nf, ax = plt.subplots(1,1,figsize=(15,10))\ngdf.plot(column = 'CERTAINTY', ax=ax)\n```", "```py\n# create an edge table\nedges = gdf.copy()\nedges['u'] = [str(g.coords[0][0]) + '_' + str(g.coords[0][1]) for g in edges.geometry.to_list()]\nedges['v'] = [str(g.coords[-1][0]) + '_' + str(g.coords[-1][1]) for g in edges.geometry.to_list()]\nedges_copy = edges.copy()\nedges['key'] = range(len(edges))\nedges = edges.set_index(['u', 'v', 'key'])\nedges.head(3)\n```", "```py\nimport pandas as pd # version: 1.4.2\nfrom shapely.geometry import Point # version: 1.7.1\n\n# create a node table\nnodes = pd.DataFrame(edges_copy['u'].append(edges_copy['v']), columns = ['osmid'])\nnodes['geometry'] = [Point(float(n.split('_')[0]), float(n.split('_')[1])) for n in nodes.osmid.to_list()]\nnodes['x'] = [float(n.split('_')[0]) for n in nodes.osmid.to_list()]\nnodes['y'] = [float(n.split('_')[1]) for n in nodes.osmid.to_list()]\nnodes = gpd.GeoDataFrame(nodes)\nnodes = nodes.set_index('osmid')\nnodes.head(3)\n```", "```py\nimport osmnx as ox # version: 1.0.1\n\n# Now build the graph\ngraph_attrs = {'crs': 'epsg:4326', 'simplified': True}\nG = ox.graph_from_gdfs(nodes, edges[[ 'geometry']], graph_attrs)\nprint(type(G))\nprint(G.number_of_nodes()), print(G.number_of_edges())\n```", "```py\n# Transform and export the graph\nimport networkx as nx # version: 2.5\nG_clean = nx.Graph()\nfor u, v, data in G.edges(data=True):\n    G_clean.add_edge(u, v)\n\nG_clean2 = nx.Graph()\nG_clean2.add_edges_from(G_clean.edges(data=True))\n\nnx.write_gexf(G_clean2, 'roman_empire_network.gexf')\n```", "```py\nnodes2 = nodes[nodes.index.isin(set(G.nodes))].drop(columns = ['geometry'])\nnodes2.index.name = 'Id'\nnodes2.to_csv('coordinates.csv')\n```", "```py\nnode_degrees = dict(G_clean2.degree)\nnode_betweenness = dict(nx.betweenness_centrality(G_clean2, normalized = False))\n```", "```py\nadmin = ox.geocode_to_gdf('Rome, Italy')\nadmin.plot()\n```", "```py\nimport alphashape # version:  1.1.0\nfrom descartes import PolygonPatch\n\n# take a random sample of the node points\nsample = nodes.sample(1000)\nsample.plot()\n\n# create its concave hull\npoints = [(point.x, point.y) for point in sample.geometry]\nalpha = 0.95 * alphashape.optimizealpha(points)\nhull = alphashape.alphashape(points, alpha)\nhull_pts = hull.exterior.coords.xy\n\nfig, ax = plt.subplots()\nax.scatter(hull_pts[0], hull_pts[1], color='red')\nax.add_patch(PolygonPatch(hull, fill=False, color='green'))\n```", "```py\nimport h3 # version: 3.7.3\nfrom shapely.geometry import Polygon # version: 1.7.1\nimport numpy as np # version: 1.22.4\n\ndef split_admin_boundary_to_hexagons(polygon, resolution):\n    coords = list(polygon.exterior.coords)\n    admin_geojson = {\"type\": \"Polygon\",  \"coordinates\": [coords]}\n    hexagons = h3.polyfill(admin_geojson, resolution, geo_json_conformant=True)\n    hexagon_geometries = {hex_id : Polygon(h3.h3_to_geo_boundary(hex_id, geo_json=True)) for hex_id in hexagons}\n    return gpd.GeoDataFrame(hexagon_geometries.items(), columns = ['hex_id', 'geometry'])\n\nroman_empire = split_admin_boundary_to_hexagons(hull, 3)\nroman_empire.plot()\n```", "```py\ngdf_merged = gpd.sjoin(roman_empire, nodes[['geometry']])\ngdf_merged['degree'] = gdf_merged.index_right.map(node_degrees)\ngdf_merged['betweenness'] = gdf_merged.index_right.map(node_betweenness)\ngdf_merged = gdf_merged.groupby(by = 'hex_id')[['degree', 'betweenness']].sum()\ngdf_merged.head(3)\n```", "```py\nroman_empire = roman_empire.merge(gdf_merged, left_on = 'hex_id', right_index = True, how = 'outer')\nroman_empire = roman_empire.fillna(0)\n```", "```py\nf, ax = plt.subplots(1,1,figsize=(15,15))\n\ngpd.GeoDataFrame([hull], columns = ['geometry']).plot(ax=ax, color = 'grey', edgecolor = 'k', linewidth = 3, alpha = 0.1)\nroman_empire.plot(column = 'degree', cmap = 'RdYlGn', ax = ax)\ngdf.plot(ax=ax, color = 'k', linewidth = 0.5, alpha = 0.5)\nadmin.plot(ax=ax, color = 'w', linewidth = 3, edgecolor = 'w')\nax.axis('off')\nplt.savefig('degree.png', dpi = 200)\n```", "```py\nf, ax = plt.subplots(1,1,figsize=(15,15))\n\ngpd.GeoDataFrame([hull], columns = ['geometry']).plot(ax=ax, color = 'grey', edgecolor = 'k', linewidth = 3, alpha = 0.1)\nroman_empire.plot(column = 'betweenness', cmap = 'RdYlGn', ax = ax)\ngdf.plot(ax=ax, color = 'k', linewidth = 0.5, alpha = 0.5)\nadmin.plot(ax=ax, color = 'w', linewidth = 3, edgecolor = 'w')\nax.axis('off')\nplt.savefig('betweenness.png', dpi = 200, bbox_inches = 'tight')\n```"]