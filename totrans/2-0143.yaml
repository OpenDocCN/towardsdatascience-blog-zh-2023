- en: 7 Steps to Help You Make Your Matplotlib Bar Charts Beautiful
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/7-steps-to-help-you-make-your-matplotlib-bar-charts-beautiful-f87419cb14cb](https://towardsdatascience.com/7-steps-to-help-you-make-your-matplotlib-bar-charts-beautiful-f87419cb14cb)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Easily Improve the Quality of Your Matplotlib Data Visualisations With a Few
    Simple Tweaks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----f87419cb14cb--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----f87419cb14cb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f87419cb14cb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f87419cb14cb--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----f87419cb14cb--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f87419cb14cb--------------------------------)
    ·13 min read·Mar 27, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0b82852b468b478357866615394725b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib horizontal bar chart after changing several features to make it more
    visually appealing. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Bar charts are a commonly used data visualisation tool where categorical features
    are represented by bars of varying lengths/heights. The height or length of the
    bar corresponds to the value being represented for that category.
  prefs: []
  type: TYPE_NORMAL
- en: Bar charts can easily be created in [**matplotlib**](https://matplotlib.org/).
    However, the [**matplotlib**](https://matplotlib.org/) library is often regarded
    as a library that produces unexciting charts and can be challenging to work with.
    However, with perseverance, exploration, and a few extra lines of [**Python**](https://www.python.org/)
    code, we can generate distinctive, aesthetically pleasing and informative figures.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to see what matplotlib is capable of with a little bit of extra
    work, then you may be interested in checking out my previous article:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/3-unique-charts-created-with-matplotlib-you-probably-havent-seen-before-421ab8cdd36f?source=post_page-----f87419cb14cb--------------------------------)
    [## 3 Unique Charts You Wouldn’t Think Were Created with Matplotlib'
  prefs: []
  type: TYPE_NORMAL
- en: Utilising Python’s Matplotlib to Create Advanced Data Visualisations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/3-unique-charts-created-with-matplotlib-you-probably-havent-seen-before-421ab8cdd36f?source=post_page-----f87419cb14cb--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Within this article, we will see how we can go from a boring figure like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/36097f227bcb22ac4b335a3387706191.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib horizontal bar plot displaying porosity values for different reservoir
    intervals. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'To one that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/153a3ceb6c83b4bc65bcb56af69e1557.png)'
  prefs: []
  type: TYPE_IMG
- en: Before and after transforming our bar chart from a bland figure to one much
    more visually appealing. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We will see how we can improve the story we are trying to tell with a few simple
    extra lines of python code.
  prefs: []
  type: TYPE_NORMAL
- en: Video Version of the Tutorial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you would like to see how this code is built from scratch in video form,
    then you may be interested in watching the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries and Setting up Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step is to import the libraries we are going to work with. In this
    case, we will be using [**pandas**](https://pandas.pydata.org/) to store our data
    and [**matplotlib**](https://matplotlib.org/) to create the figures.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will create some data, which has been derived from the [**Xeex Force
    2020 Lithology Machine Learning competition**](https://zenodo.org/record/4351156#.ZCFr8OzMIeY).
    These data represent individual wells, with average porosity values for sandstone
    lithology within the Hugin Fm. These wells originate on the Norwegian Continental
    shelf.
  prefs: []
  type: TYPE_NORMAL
- en: See the bottom of the article for further details on this dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Rather than loading data from a CSV file, we can create one with a simple dictionary,
    and pass that to the `pd.DataFrame()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Basic Bar Plot with Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our pandas dataframe setup, we can move on to creating our
    very first bar plot. There are a few ways to create a bar plot, one of which involves
    using the dataframe directly ( `df.plot(kind='bar'....)` ), however, for this
    article, we will focus on using matplotlib-focused code to build our plot.
  prefs: []
  type: TYPE_NORMAL
- en: To create a basic bar chart with matplotlib, we first need to setup our fig
    and ax variables, which will be set to `plt.subplots()` Within this function,
    we can pass in the figure size.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will create a new variable called bars, and assign it to `plt.bar()`
    Within this function, we can simply pass in our categorical variable, in this
    case a list of well names, and the average porosity value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When it is run, we are presented with the following bar plot. As you can see
    it is very basic and not very appealing.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/81ac0185d8a66fc10cdb70f21775e31c.png)'
  prefs: []
  type: TYPE_IMG
- en: A basic barplot generated with matplotlib. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take a closer look at the plot, we will start to see more issues:'
  prefs: []
  type: TYPE_NORMAL
- en: It is difficult to read the labels on the x-axis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have to work our brains more to understand the values of each of the bars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is difficult to compare bars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s see how we can create a much more effective and aesthetically pleasing
    visualisation.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Rotate Your Chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in improving our bar chart is to rotate it 90 degrees.
  prefs: []
  type: TYPE_NORMAL
- en: This makes it easier to read longer labels like the ones we have. Another option
    we could consider is rotating the labels on the x-axis, however, that requires
    the reader to also tilt their heads to try and read them.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, horizontal bar charts are a great way to save on space in a report
    or presentation whilst maintaining readability. This is especially useful if you
    have a large number of categories.
  prefs: []
  type: TYPE_NORMAL
- en: To rotate our bar chart, we have to change the plot type we are calling in matplotlib
    from `.bar()` to `.barh()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: What we get back is the following chart with the category labels (well names)
    in a much nicer and easier-to-read format.
  prefs: []
  type: TYPE_NORMAL
- en: We can now tell which bar belongs to what well.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/36097f227bcb22ac4b335a3387706191.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib horizontal bar plot displaying porosity values for different reservoir
    intervals. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Arrange Bars in Order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step for improving our plot is to sort the bars in ascending order.
    This can help improve the readability of our chart considerably.
  prefs: []
  type: TYPE_NORMAL
- en: Before applying any sorting to the data, you first need to consider if it is
    a sensible option.
  prefs: []
  type: TYPE_NORMAL
- en: If your bars are related to categories that should be in a certain order, then
    sorting the data from longest to shortest may not be the best option. For example,
    days of the week, months of the year or age groups.
  prefs: []
  type: TYPE_NORMAL
- en: Ordering bars from longest to shortest can make bar charts easier to read by
    allowing the reader to easily compare the different bars. This is especially true
    when the bars are of similar lengths.
  prefs: []
  type: TYPE_NORMAL
- en: It also creates a more aesthetically pleasing chart to look at by giving the
    data a sense of order.
  prefs: []
  type: TYPE_NORMAL
- en: To sort the data, we need to go back to the dataframe, and sort the values by
    `porosity`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we get the following plot returned.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/161cf07c6b6b474c153ae0b9b2af07fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib horizontal bar plot displaying porosity values for different reservoir
    intervals in descending order. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Remove Spines and Axes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we have unnecessary chart elements such as gridlines and borders (commonly
    known as “chart junk”) it can distract the reader and can take longer for the
    chart to be understood.
  prefs: []
  type: TYPE_NORMAL
- en: We can remove this extra chart junk, to improve, not only the readability of
    the chart but also the aesthetics and the message we are trying to get across
    to the reader.
  prefs: []
  type: TYPE_NORMAL
- en: For our chart, we will remove the top, bottom and right edges of the chart by
    calling upon `ax.spines[[‘right’, ‘top’, ‘bottom’]].set_visible(False)`.
  prefs: []
  type: TYPE_NORMAL
- en: We will also hide the x-axis. You may be thinking why would we want to remove
    the numbers on the axis — wouldn’t that harm readability?
  prefs: []
  type: TYPE_NORMAL
- en: This is true, however, we will see in the next step, how we can make it better
    and easier for the reader to understand the values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we get back the following plot.
  prefs: []
  type: TYPE_NORMAL
- en: This now looks much cleaner than the previous step.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5bf7729d96d76385ea70029c36c125a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib horizontal bar plot after removing extra chart junk. Image by the
    author.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Add Data Labels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the above image, we removed the x-axis ticks and numbers. This does reduce
    readability, however, if the x-axis were to remain, we are expecting our reader
    to do extra work when trying to understand the absolute values and compare the
    different bars.
  prefs: []
  type: TYPE_NORMAL
- en: To make the chart more effective, we can add data labels to each of the bars
    with the absolute values. This improves clarity, saves space, and improves precision.
  prefs: []
  type: TYPE_NORMAL
- en: To make adding labels easier on bar charts, the developers of matplotlib introduced
    the `[bar_label()](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.bar_label.html)`
    function. This allows us to pass in our bar charts, and it will automatically
    add the labels.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When the above code is run, we get the following chart. We can see the absolute
    values directly at the end of the bars, which improves readability significantly.
    For example, if we went on bar length alone for the top two bars, we would say
    they were the same, however, if we look at the absolute value, we will see that
    they are very slightly different.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/29b05ad53fdc5d3fd6e5282af6536d46.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib horizontal bar chart with data labels displayed to improve readability.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the Label Format of matplotlib’s bar_label Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `bar_label()` function allows us to provide a number of keyword arguments.
  prefs: []
  type: TYPE_NORMAL
- en: In the example below, I have changed the font size, colour and font weight.
  prefs: []
  type: TYPE_NORMAL
- en: Also, in order to place the labels on the inside edge of the bar, we can call
    upon the padding parameter (`pad`). If we use a negative number, we will be able
    to place the labels inside the bars.
  prefs: []
  type: TYPE_NORMAL
- en: The `fmt` parameter, allows us to control how the labels are displayed. Using
    `%.1f%%` means we are using 1 decimal place and including a % sign at the end
    of the label.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When the above code is run, we get the following plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/98c5156144e13b8935fa9080f01e08c9.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib horizontal bar chart with data labels displayed on the inside edge
    of the bar to improve readability using bar_label. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Increase Spacing Between Bars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another step in improving readability is to increase the space between the bars.
    It allows us to create a less cluttered and more aesthetically pleasing chart.
  prefs: []
  type: TYPE_NORMAL
- en: To increase the spacing, we first need to increase the height of our figure
    in the `plt.subplots()` function call, and then add the `height` parameter to
    the `plt.barh()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: When the plot is generated, we now have a chart that has a little more room
    to breathe and is easier on the eye.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/273418c00b0e300af944e9fcfd57573e.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib horizontal bar chart after increasing the spacing between the bars.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Choosing Colours for Bar Plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Choosing colours for charts can be quite subjective and time-consuming. We ideally
    want to try and avoid overwhelming the reader with a rainbow palette of colours.
    Not only will the plot look poor, but it can hinder the readability and impact
    the message you are trying to get across.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few ways we can use colour in our bar chart:'
  prefs: []
  type: TYPE_NORMAL
- en: We can keep colours consistent, such as the blue in the previous charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use colour to draw attention to the top bar or bottom bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use colour to draw attention to a specific bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use colour to highlight bars that meet certain criteria
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a colour that is associated with category branding, for example using blue
    for Facebook, and red for YouTube
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use colour to show groupings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve accessibility for readers with colour vision deficiencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And there are many more ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out this article if you are looking for a tool to help with colour selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/4-essential-tools-to-help-you-select-a-colour-palette-for-your-data-visualisation-ddb2ec92a08?source=post_page-----f87419cb14cb--------------------------------)
    [## 4 Essential Tools to Help You Select a Colour Palette for Your Data Visualisation'
  prefs: []
  type: TYPE_NORMAL
- en: Tools for Making it Easy to Select Colour Palettes for Data Visualisations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/4-essential-tools-to-help-you-select-a-colour-palette-for-your-data-visualisation-ddb2ec92a08?source=post_page-----f87419cb14cb--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Let’s have a closer look at a few of these different options of using colour
    in a matplotlib bar plot.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing Attention to a Single Bar using Colour
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we want to draw the reader’s attention to a specific bar, we can use the
    following code.
  prefs: []
  type: TYPE_NORMAL
- en: Rather than creating a list for our colours, we will add the colours directly
    to the dataframe using the `apply` function and a lambda function. Here we are
    highlighting a specific well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: When the above code is run, we get the following plot. We can see that well
    16/2–16 is highlighted in orange and immediately grabs your attention.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/242071908fbd85391c9b8a297ce865ca.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib horizontal bar plot after applying colour to a single bar in order
    to draw the reader’s focus. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Apply Colour to Above a Cutoff Value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another way to apply colour is by highlighting specific categories/bars that
    meet or exceed a cutoff.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we want to highlight the bars where porosity is greater than
    20%. We could just let the readers use the labels to identify the bars, however,
    to make it easier and quicker for the reader, we can highlight those bars.
  prefs: []
  type: TYPE_NORMAL
- en: This is done using the `apply` function within pandas and using a lambda function
    which checks if the values are greater than our cutoff value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When the plot is generated, we get the following plot, and our eyes are immediately
    drawn to the top 5 bars.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1f6acf1e89dd9a4eaadc7a0f2f4debdd.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib bar chart showing bars that are greater than a 20% porosity cutoff.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: However, the reader might not know why these five bars are highlighted, so we
    can add a text annotation to help them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Using matplotlib’s `ax.text` and `ax.axvline`functions, we can add a label and
    a vertical cutoff line to explain why the top 5 bars are highlighted.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/107cac7fdd7f449d482e334ac979d0b0.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib bar chart showing bars that are greater than a 20% porosity cutoff
    and after adding a text annotation. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Applying a Traffic-Light-Type Scale to a Bar Chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we have multiple cutoffs or target values, we can use a traffic-light-type
    scale to indicate where each bar falls. Caution should be exercised when using
    conventional red, green and yellow colours, as they are not suitable for everyone,
    especially if they have colour perception issues.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we are going to have three colours, which have been picked
    from [**ColorBrewer 2.0**](https://colorbrewer2.org/)**,** to indicate where we
    have wells with good, average and poor porosity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of using a lambda function like in the previous example, we can create
    a new function called `bar_highlight` and pass in three parameters: our actual
    value (`value`), the average value cutoff (`average_value`) and the good value
    cutoff (`good_value`).'
  prefs: []
  type: TYPE_NORMAL
- en: We will then check the actual value against these cutoffs and assign a colour
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: To help the reader, we can add a new label and vertical line to indicate where
    these cutoff values are. In order to save typing the value multiple times, we
    can use f-strings in the calls to `ax.text`.
  prefs: []
  type: TYPE_NORMAL
- en: When we run the code, we get the following plot.
  prefs: []
  type: TYPE_NORMAL
- en: We can immediately see that the data has been split into three groups of colour,
    which helps tell our story to the reader.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8e094db1d168d43696ba3097874f3406.png)'
  prefs: []
  type: TYPE_IMG
- en: Using colouring to indicate the performance of different bars to cutoff/benchmark
    values. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Add a Title
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we carry forward our chart where we are using a single 20% porosity cutoff,
    we can polish off our chart by adding an informative title. This tells the reader
    directly what the chart is about.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/153a3ceb6c83b4bc65bcb56af69e1557.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib horizontal bar plot after a title has been added. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We can do this simply by adding a call to `ax.title` in our code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though matplotlib appears daunting at first, it can be a very powerful
    library for creating effective visualisations.
  prefs: []
  type: TYPE_NORMAL
- en: With a few extra lines of code and the matplotlib library, we have seen how
    we can go from an ugly and boring bar plot to one that is more aesthetically pleasing
    to look at and helps tell a story to our readers.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/36097f227bcb22ac4b335a3387706191.png)![](../Images/75a522bdf640b3d9e8b73904a11750d0.png)'
  prefs: []
  type: TYPE_IMG
- en: Before and after transforming our bar chart from a bland figure to one much
    more visually appealing. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Why not give these examples a try on your next bar chart?
  prefs: []
  type: TYPE_NORMAL
- en: I would love to hear in the comments about any tips that you have for working
    with matplotlib and making beautiful data visualisations.
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)*Alternatively,
    you can* [***sign up for my newsletter***](https://fabulous-founder-2965.ck.page/2ca286e572)
    *to get additional content straight into your inbox for free.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Secondly, you can get the full Medium experience and support me and thousands
    of other writers by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the fantastic Medium articles and the chance
    to make money with your writing. If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support!*'
  prefs: []
  type: TYPE_NORMAL
- en: Dataset Used in this Tutorial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The dataset used for this tutorial is a subset of a training dataset used as
    part of a Machine Learning competition run by Xeek and FORCE 2020.
  prefs: []
  type: TYPE_NORMAL
- en: Bormann, Peter, Aursand, Peder, Dilib, Fahad, Manral, Surrender, & Dischington,
    Peter. (2020). FORCE 2020 Well well log and lithofacies dataset for machine learning
    competition [Data set]. Zenodo. [https://doi.org/10.5281/zenodo.4351156](https://doi.org/10.5281/zenodo.4351156)
  prefs: []
  type: TYPE_NORMAL
- en: This dataset is licensed under a a Creative Commons Attribution 4.0 International
    license.
  prefs: []
  type: TYPE_NORMAL
