- en: 'Goodbye os.path: 15 Pathlib Tricks to Quickly Master The File System in Python'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/goodbye-os-path-15-pathlib-tricks-to-quickly-master-the-file-system-in-python-881213ca7c21](https://towardsdatascience.com/goodbye-os-path-15-pathlib-tricks-to-quickly-master-the-file-system-in-python-881213ca7c21)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: No headaches and unreadable code from `os.path`
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/?source=post_page-----881213ca7c21--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----881213ca7c21--------------------------------)[](https://towardsdatascience.com/?source=post_page-----881213ca7c21--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----881213ca7c21--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----881213ca7c21--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----881213ca7c21--------------------------------)
    ·7 min read·Apr 7, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d29d81ae086f20c107547e340856efe7.png)'
  prefs: []
  type: TYPE_IMG
- en: A robot pal. — Via Midjourney
  prefs: []
  type: TYPE_NORMAL
- en: 'Pathlib may be my favorite library (after Sklearn, obviously). And given there
    are over 130 thousand libraries, that’s saying something. Pathlib helps me turn
    code like this written in `os.path`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'into this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Pathlib came out in Python 3.4 as a replacement for the nightmare that was
    `os.path`. It also marked an important milestone for Python language on the whole:
    they finally turned every single thing into an object (even [nothing](https://docs.python.org/3/c-api/none.html)).'
  prefs: []
  type: TYPE_NORMAL
- en: The biggest drawback of `os.path` was treating system paths as strings, which
    led to unreadable, messy code and a steep learning curve.
  prefs: []
  type: TYPE_NORMAL
- en: By representing paths as fully-fledged **objects**, Pathlib solves all these
    issues and introduces elegance, consistency, and a breath of fresh air into path
    handling.
  prefs: []
  type: TYPE_NORMAL
- en: And this long-overdue article of mine will outline some of the best functions/features
    and tricks of `pathlib` to perform tasks that would have been truly horrible experiences
    in `os.path`.
  prefs: []
  type: TYPE_NORMAL
- en: Learning these features of Pathlib will make everything related to paths and
    files easier for you as a data professional, especially during data processing
    workflows where you have to move around thousands of images, CSVs, or audio files.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: Working with paths
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**1\. Creating paths**'
  prefs: []
  type: TYPE_NORMAL
- en: Almost all features of `pathlib` is accessible through its `Path` class, which
    you can use to create paths to files and directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few ways you can create paths with `Path`. First, there are class
    methods like `cwd` and `home` for the current working and the home user directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also create paths from string paths:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Joining paths is a breeze in Pathlib with the forward slash operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Please, don't let anyone ever catch you using `os.path.join` after this.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check whether a path, you can use the boolean function `exists`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes, the entire Path object won’t be visible, and you have to check whether
    it is a directory or a file. So, you can use `is_dir` or `is_file` functions to
    do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Most paths you work with will be relative to your current directory. But, there
    are cases where you have to provide the exact location of a file or a directory
    to make it accessible from any Python script. This is when you use `absolute`
    paths:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, if you have the misfortune of working with libraries that still require
    string paths, you can call `str(path)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Most libraries in the data stack have long supported `Path` objects, including
    `sklearn`, `pandas`, `matplotlib`, `seaborn`, etc.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**2\. Path attributes**'
  prefs: []
  type: TYPE_NORMAL
- en: '`Path` objects have many useful attributes. Let’s see some examples using this
    path object that points to an image file.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Let's start with the `parent`. It returns a path object that is one level up
    the current working directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes, you may want only the file `name` instead of the whole path. There
    is an attribute for that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: which returns only the file name with the extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also `stem` for the file name without the suffix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Or the `suffix` itself with the dot for the file extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to divide a path into its components, you can use `parts` instead
    of `str.split(''/'')`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want those components to be `Path` objects in themselves, you can use
    `parents` attribute, which creates a generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Working with files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/87265966c391ee7d32b99ff9f942387d.png)'
  prefs: []
  type: TYPE_IMG
- en: Classified files. — Midjourney
  prefs: []
  type: TYPE_NORMAL
- en: 'To create files and write to them, you don''t have to use `open` function anymore.
    Just create a `Path` object and `write_text` or `write_btyes` to them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, if you already have a file, you can `read_text` or `read_bytes`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: However, note that `write_text` or `write_bytes` overrides existing contents
    of a file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'To append new information to existing files, you should use `open` method of
    `Path` objects in `a` (append) mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: It is also common to rename files. `rename` method accepts the destination path
    for the renamed file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the destination path in the current directory, i. e. rename the file,
    you can use `with_stem` on the existing path, which replaces the `stem` of the
    original file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Above, `file.md` is turned into `new_markdown.md`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see the file size through `stat().st_size`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'or the last time the file was modified, which was a few seconds ago:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '`st_mtime` returns a timestamp, which is the count of seconds since January
    1, 1970\. To make it readable, you can use use the `fromtimestamp` function of
    `datatime`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To remove unwanted files, you can `unlink` them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Setting `missing_ok` to `True` won't raise any alarms if the file doesn't exist.
  prefs: []
  type: TYPE_NORMAL
- en: Working with directories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/97200e350b1dc2ecdae2da62bdf37d35.png)'
  prefs: []
  type: TYPE_IMG
- en: Folders in an office. — Midjourney
  prefs: []
  type: TYPE_NORMAL
- en: There are a few neat tricks to work with directories in Pathlib. First, let's
    see how to create directories recursively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The `new_dir` doesn''t exist, so let''s create it with all its children:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: By default, `mkdir` creates the last child of the given path. If the intermediate
    parents don't exist, you have to set `parents` to `True`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To remove empty directories, you can use `rmdir`. If the given path object
    is nested, only the last child directory is deleted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'To list the contents of a directory like `ls` on the terminal, you can use
    `iterdir`. Again, the result will be a generator object, yielding directory contents
    as separate path objects one at a time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: To capture all files with a specific extension or a name pattern, you can use
    the `glob` function with a regular expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, below, we will find all text files inside my home directory with
    `glob("*.txt")`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'To search for text files recursively, meaning inside all child directories
    as well, you can use *recursive glob* with `rglob`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Learn about regular expressions [here](https://realpython.com/regex-python/).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You can also use `rglob('*')` to list directory contents recursively. It is
    like the supercharged version of `iterdir()`.
  prefs: []
  type: TYPE_NORMAL
- en: One of the use cases of this is counting the number of file formats that appear
    within a directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we import the `Counter` class from `collections` and provide all
    file suffixes to it within the articles folder of `home`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Operating system differences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sorry, but we have to talk about this nightmare of an issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Up until now, we have been dealing with `PosixPath` objects, which are the
    default for UNIX-like systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'If you were on Windows, you would get a `WindowsPath` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Instantiating another system's path raises an error like the above.
  prefs: []
  type: TYPE_NORMAL
- en: But what if you were forced to work with paths from another system, like code
    written by coworkers who use Windows?
  prefs: []
  type: TYPE_NORMAL
- en: 'As a solution, `pathlib` offers pure path objects like `PureWindowsPath` or
    `PurePosixPath`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'These are primitive path objects. You''ve access to some path methods and attributes,
    but essentially, the path object remains a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have noticed, I lied in the title of the article. Instead of 15, I believe
    the count of new tricks and functions was 30ish.
  prefs: []
  type: TYPE_NORMAL
- en: I didn't want to scare you off.
  prefs: []
  type: TYPE_NORMAL
- en: But I hope I've convinced you enough to ditch `os.path` and start using `pathlib`
    for much easier and more readable path operations.
  prefs: []
  type: TYPE_NORMAL
- en: Forge a new *path*, if you will :)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0c5f3ba9e8226957b62ee0afc66e34ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Path. — Midjourney
  prefs: []
  type: TYPE_NORMAL
- en: If you enjoyed this article and, let's face it, its bizarre writing style, consider
    supporting me by signing up to become a Medium member. Membership costs 4.99$
    a month and gives you unlimited access to all my stories and hundreds of thousands
    of articles written by more experienced folk. If you sign up through [this link](https://ibexorigin.medium.com/membership),
    I will earn a small commission with no extra cost to your pocket.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----881213ca7c21--------------------------------)
    [## Join Medium with my referral link — Bex T.'
  prefs: []
  type: TYPE_NORMAL
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----881213ca7c21--------------------------------)
  prefs: []
  type: TYPE_NORMAL
