["```py\n!pip install PyPDF2\nimport PyPDF2\nimport re\nclass pdfReader:\n\n    def __init__(self, file_path: str) -> None:\n        self.file_path = file_path\n\n    def pdf_reader(self) -> None:\n            \"\"\"A function that can read .pdf formatted files \n                and returns a python readable pdf.\n\n                Returns:\n                read_pdf: A python readable .pdf file.\n            \"\"\"\n            opener = open(self.file_path,'rb')\n            read_pdf = PyPDF2.PdfReader(opener)\n            return read_pdf\n\n    def PDF_one_pager(self) -> str:\n        \"\"\"A function that returns a one line string of the \n            pdf.\n\n            Returns:\n            one_page_pdf (str): A one line string of the pdf.\n\n        \"\"\"\n        p = pdfReader(self.file_path)\n        pdf = p.pdf_reader()\n        content= ''\n        num_pages = len(pdf.pages)\n\n        for i in range(0, num_pages):\n            content += pdf.pages[i].extract_text() + \"\\n\"\n        content = \" \".join(content.replace(u\"\\xa0\", \" \").strip().split())\n        page_number_removal = r\"\\d{1,3} of \\d{1,3}\"\n        page_number_removal_pattern = re.compile(page_number_removal, re.IGNORECASE)\n        content = re.sub(page_number_removal_pattern, '',content)\n        return content\n```", "```py\nclass pptReader:\n\n    def __init__(self, file_path: str) -> None:\n        self.file_path = file_path\n\n    def ppt_text(self) -> str:\n    \"\"\"A function that returns a string of text from all \n       of the slides in a pptReader object.\n\n      Returns:\n      text (str): A single string containing the text \n      within each slide of the pptReader object.\n   \"\"\"\n      prs = Presentation(self.file_path)\n      text = str()\n\n      for slide in prs.slides:\n        for shape in slide.shapes:\n          if not shape.has_text_frame:\n              continue\n          for paragraph in shape.text_frame.paragraphs:\n            for run in paragraph.runs:\n              text += ' ' + run.text\n      return text\n```", "```py\n class xlsxReader:\n\n    def __init__(self, file_path: str) -> None:\n        self.file_path = file_path\n\n    def xlsx_text(self) -> str:\n      \"\"\"A function that will return a string of text from \n         the information contained within an xlsxReader object.\n\n         Returns:\n         text (str): A string of text containing the information\n         within the xlsxReader object.\n     \"\"\"\n      inputExcelFile = self.file_path\n      text = str()\n      wb = openpyxl.load_workbook(inputExcelFile)\n      for ws in wb.worksheets:\n        for val in ws.values:\n          print(val)\n\n      for sn in wb.sheetnames:\n        print(sn)\n        excelFile = pd.read_excel(inputExcelFile, engine = 'openpyxl', sheet_name = sn)\n        excelFile.to_csv(\"ResultCsvFile.csv\", index = None, header=True)\n\n        with open(\"ResultCsvFile.csv\", \"r\") as csvFile: \n          lines = csvFile.read().split(\",\") # \"\\r\\n\" if needed\n          for val in lines:\n            if val != '':\n              text += val + ' '\n          text = text.replace('\\ufeff', '')\n          text = text.replace('\\n', ' ')\n      return text\n```", "```py\nclass csvReader:\n\n    def __init__(self, file_path: str) -> str:\n        self.file_path = file_path\n\n    def csv_text(self):\n    \"\"\"A function that returns a string of text containing\n       the information within a csvReader object.\n\n      Returns:\n      text (str): A string of text containing information\n      within a csvReader object.\n     \"\"\" \n      text = str()\n      with open(self.file_path, \"r\") as csvFile: \n        lines = csvFile.read().split(\",\") # \"\\r\\n\" if needed\n\n        for val in lines:\n          text += val + ' '\n        text = text.replace('\\ufeff', '')\n        text = text.replace('\\n', ' ')\n      return text\n```", "```py\nclass dataprocessor:\n\n  def __init__(self):\n    return\n\n  @staticmethod\n  def get_wordnet_pos(text: str) -> str:\n    \"\"\"Map POS tag to first character lemmatize() accepts.\n\n       Parameters:\n       text (str): A string of text\n\n       Returns:\n       tag: The tag of the word\n    \"\"\"\n    tag = nltk.pos_tag([text])[0][1][0].upper()\n    tag_dict = {\"J\": wordnet.ADJ,\n                \"N\": wordnet.NOUN,\n                \"V\": wordnet.VERB,\n                \"R\": wordnet.ADV}\n    return tag_dict.get(tag, wordnet.NOUN)\n\n  @staticmethod\n  def preprocess(input_text: str):\n    \"\"\"A function that accepts a string of text and conducts various\n       NLP preprocessing steps on said text including puncation removal, \n      stopword removal and lemmanization.\n\n       Parameters:\n       input_text (str): A string of text\n\n       Returns:\n       output_text (str): A processed string of text.\n    \"\"\"\n    #lowercase\n    input_text = input_text.lower()\n\n    #punctuation removal\n    input_text = \"\".join([i for i in input_text if i not in string.punctuation])\n\n    #Stopword removal\n    stopwords = nltk.corpus.stopwords.words('english')\n    custom_stopwords = ['\\n','\\n\\n', '&', ' ', '.', '-', '$', '@']\n    stopwords.extend(custom_stopwords)\n    input_text = [i for i in input_text if i not in stopwords]\n    input_text = ' '.join(word for word in input_text)\n\n    #lemmanization\n    lm = WordNetLemmatizer()\n    input_text = [lm.lemmatize(word, dataprocessor.get_wordnet_pos(word)) for word in input_text.split(' ')]\n    text = ' '.join(word for word in input_text)\n\n    output_text = re.sub(' +', ' ',input_text)\n\n    return output_text\n```"]