["```py\nCURRENT_DIR=/path/to/current/dir\nAUDIO_SAMPLES_DIR=/path/to/audio_samples\nFAIRSEQ_DIR=/path/to/fairseq\nVIDEO_FILE=/path/to/video/file\nAUDIO_FILE=/path/to/audio/file\nRESAMPLED_AUDIO_FILE=/path/to/resampled/audio/file\nTMPDIR=/path/to/tmp\nPYTHONPATH=.\nPREFIX=INFER\nHYDRA_FULL_ERROR=1\nUSER=micro\nMODEL=/path/to/fairseq/models_new/mms1b_all.pt\nLANG=eng\n```", "```py\ncheckpoint: /path/to/checkpoint/${env:USER}/${env:PREFIX}/${common_eval.results_path}\n```", "```py\ncommon:\n  cpu: true\n```", "```py\nconfig = dotenv_values(\".env\")\n\ncurrent_dir = config['CURRENT_DIR']\ntmp_dir = config['TMPDIR']\nfairseq_dir = config['FAIRSEQ_DIR']\nvideo_file = config['VIDEO_FILE']\naudio_file = config['AUDIO_FILE']\naudio_file_resampled = config['RESAMPLED_AUDIO_FILE']\nmodel_path = config['MODEL']\nmodel_new_dir = config['MODELS_NEW']\nlang = config['LANG']\n```", "```py\ndef git_clone(url, path):\n    \"\"\"\n    Clones a git repository\n\n    Parameters:\n    url (str): The URL of the git repository\n    path (str): The local path where the git repository will be cloned\n    \"\"\"\n    if not os.path.exists(path):\n        Repo.clone_from(url, path)\n\ndef install_requirements(requirements):\n    \"\"\"\n    Installs pip packages\n\n    Parameters:\n    requirements (list): List of packages to install\n    \"\"\"\n    subprocess.check_call([\"pip\", \"install\"] + requirements)\n\ngit_clone('https://github.com/facebookresearch/fairseq', 'fairseq')\ninstall_requirements(['--editable', './'])\n```", "```py\ndef download_file(url, path):\n    \"\"\"\n    Downloads a file\n\n    Parameters:\n    url (str): URL of the file to be downloaded\n    path (str): The path where the file will be saved\n    \"\"\"\n    subprocess.check_call([\"wget\", \"-P\", path, url])\n\ndownload_file('https://dl.fbaipublicfiles.com/mms/asr/mms1b_fl102.pt', model_new_dir)\n```", "```py\ndef convert_video_to_audio(video_path, audio_path):\n    \"\"\"\n    Converts a video file to an audio file\n\n    Parameters:\n    video_path (str): Path to the video file\n    audio_path (str): Path to the output audio file\n    \"\"\"\n    subprocess.check_call([\"ffmpeg\", \"-i\", video_path, \"-ar\", \"16000\", audio_path])\n\ndef resample_audio(audio_path, new_audio_path, new_sample_rate):\n    \"\"\"\n    Resamples an audio file\n\n    Parameters:\n    audio_path (str): Path to the current audio file\n    new_audio_path (str): Path to the output audio file\n    new_sample_rate (int): New sample rate in Hz\n    \"\"\"\n    audio = AudioSegment.from_file(audio_path)\n    audio = audio.set_frame_rate(new_sample_rate)\n    audio.export(new_audio_path, format='wav')\n```", "```py\ndef run_inference(model, lang, audio):\n    \"\"\"\n    Runs the MMS ASR inference\n\n    Parameters:\n    model (str): Path to the model file\n    lang (str): Language of the audio file\n    audio (str): Path to the audio file\n    \"\"\"\n    subprocess.check_call(\n        [\n            \"python\",\n            \"examples/mms/asr/infer/mms_infer.py\",\n            \"--model\",\n            model,\n            \"--lang\",\n            lang,\n            \"--audio\",\n            audio,\n        ]\n    )\n\nrun_inference(model_path, lang, audio_file_resampled)\n```"]