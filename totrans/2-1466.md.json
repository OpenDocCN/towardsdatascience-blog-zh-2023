["```py\nimport pandas as pd\nimport plotly.graph_objects as go\nimport plotly.io as plt_io\nimport plotly.express as px\n```", "```py\n# Read sea ice extent file:\nURL = 'https://bit.ly/3OtPnnh'\ndf = pd.read_csv(URL, skiprows=[1])\ndf.columns = df.columns.str.strip()  # Strip any leading white spaces.\ndf.drop(columns=['Missing', 'Source Data'], inplace=True)\n\n# Combine date columns into a single datetime column:\ndf['Date'] = pd.to_datetime(df[['Year', 'Month', 'Day']])\n\n# Extract the day of the year from the 'Date' column:\ndf['Day of Year'] = df['Date'].dt.dayofyear\n\n# Move Date column to the far left:\ncolumn_to_move = df.pop(\"Date\")\ndf.insert(0, \"Date\", column_to_move)\n\ndf.head(3)\n```", "```py\n# Plot each year's extent data in a stacked line chart:\nfig = px.line(df, \n              x='Day of Year', \n              y='Extent', \n              line_group='Year', \n              color='Year',\n              labels={'x': 'Month', 'y': 'Extent'},\n              title='Antarctic Sea Ice Extent January to December (1978-2023)',\n              template='plotly_white')\n\n# Customize layout; tickvals represent starting 'day of year' of each month:\nfig.update_layout(width=800,\n                  height=650,\n                  legend={'orientation': 'h'},\n                  xaxis_title='',\n                  yaxis_title='Sea Ice Extent (million sq km)',\n                  xaxis={'tickmode':'array',\n                         'tickvals': [1, 32, 60, 91, 121, 152, \n                                      182, 213, 244, 274, 305, 336], \n                         'ticktext': ['Jan', 'Feb', 'Mar', 'Apr', \n                                      'May', 'Jun', 'Jul', 'Aug', \n                                      'Sep', 'Oct', 'Nov', 'Dec']})\n\n# Draw border around the plot:\nfig.update_xaxes(showline=True, linewidth=1, linecolor='black', mirror=True)\nfig.update_yaxes(showline=True, linewidth=1, linecolor='black', mirror=True)\n\n# Update trace styles to make all lines light gray:\nfig.update_traces(line={'color': \"lightgray\", 'width': 0.75})\n\n# Highlight selected years:\nfig.update_traces(patch={'line': {'color': 'black', 'width': 2}},\n                  selector={'legendgroup': '2022'})\nfig.update_traces(patch={'line': {'color': 'red', 'width': 2}},\n                  selector={'legendgroup': '2023'})\n\n# Add annotation:\nfig.add_annotation(dict(font=dict(color='darkgray',size=15),\n                        x=85,\n                        y=16,\n                        showarrow=False,\n                        text='All years 1978-2023----',\n                        textangle=0,\n                        xanchor='left'))\n\nfig.show()\n```", "```py\n# Calculate minimum and maximum bounds of \"Extent\" for each day of the year:\nbounds = df.groupby('Day of Year')['Extent'].agg(['min', 'max']).reset_index()\nbounds.rename(columns={'min': 'Min Extent', 'max': 'Max Extent'}, inplace=True)\nbounds.head(3)\n```", "```py\n# Smooth the \"Min Extent\" using a 2-day simple moving average (SMA):\nbounds['Min SMA2'] = bounds['Min Extent'].rolling(2).mean()\nbounds = bounds.iloc[1:]  # Remove first row with NaN for SMA2.\nbounds.head(3)\n```", "```py\n# Filter data for plotting specific years:\ndf_2022 = df[(df['Year'] >= 2022) & (df['Year'] < 2023)].copy().reset_index()\ndf_2023 = df[df['Year'] >= 2023].copy().reset_index()\n```", "```py\n# Load the dark template:\nplt_io.templates[\"custom_dark\"] = plt_io.templates[\"plotly_dark\"]\n\n# Customize the template using all black background colors:\nplt_io.templates[\"custom_dark\"]['layout']['paper_bgcolor'] = '#000000'\nplt_io.templates[\"custom_dark\"]['layout']['plot_bgcolor'] = '#000000'\n# Customize gridline colors:\nplt_io.templates['custom_dark']['layout']['yaxis']['gridcolor'] = '#000000'\nplt_io.templates['custom_dark']['layout']['xaxis']['gridcolor'] = '#000000'\n\n# Create a figure:\nfig = go.Figure()\n\n# Add filled area traces for max and min extents:\nfig.add_trace(go.Scatter(x=bounds['Day of Year'], y=bounds['Max Extent'], \n                         fill='tonexty', fillcolor='darkgray', \n                         line=dict(color='lightgrey', width=0.75)))\n\nfig.add_trace(go.Scatter(x=bounds['Day of Year'], y=bounds['Min SMA2'], \n                         fill='tozeroy', fillcolor='black', \n                         line=dict(color='lightgrey', width=0.75)))\n\n# Add traces for 2022 and 2023\nfig.add_trace(go.Scatter(x=df_2022['Day of Year'], y=df_2022['Extent'], \n                         mode='lines', \n                         marker=dict(color='white', size=4), \n                         name='2022'))\n\nfig.add_trace(go.Scatter(x=df_2023['Day of Year'], y=df_2023['Extent'], \n                         mode='lines', \n                         marker=dict(color='red', size=4), \n                         name='2023'))\n\n# Update layout\nfig.update_layout(\n    width=800,\n    height=650,\n    template='custom_dark',\n    title=dict(text='Antarctic Sea Ice Extent (1978-2023)', \n               font=dict(size=30)),\n    showlegend=False,\n    xaxis_title='Month',\n    yaxis_title='Sea Ice Extent (million sq km)',\n    xaxis=dict(tickmode='array',\n               tickvals=[1, 32, 60, 91, 121, 152, 182, 213, 244, 274, 305, 336],\n               ticktext=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', \n                         'Sep', 'Oct', 'Nov', 'Dec']))\n\n# Update x and y axes properties:\nfig.update_xaxes(showgrid=False, \n                 ticks=\"outside\", \n                 tickson=\"boundaries\", \n                 ticklen=5)\nfig.update_yaxes(showgrid=False, \n                 ticks=\"outside\", \n                 tickson=\"boundaries\", \n                 ticklen=20)\n\n# Add annotations for 2022 and 2023:\nfig.add_annotation(dict(font=dict(color='white', size=15),\n                        x=368, y=5.0,\n                        showarrow=False,\n                        text=\"2022\",\n                        textangle=0,\n                        xanchor='left'))\nfig.add_annotation(dict(font=dict(color='red', size=15),\n                        x=220, y=15,\n                        showarrow=False,\n                        text=\"2023\",\n                        textangle=0,\n                        xanchor='left'))\n\nfig.show()\n```"]