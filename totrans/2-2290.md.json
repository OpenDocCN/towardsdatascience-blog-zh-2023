["```py\nsudo apt install git-all # to install git\npip install dvc # to install DVD (do not install it for now!)\n```", "```py\n# Clone repository:\ngit clone git@github.com:Chim-SO/hand-written-digits-classification.git\n```", "```py\npython -m venv venv/handwritten-digits-classification-env\nsource venv/handwritten-digits-classification-env/bin/activate\n```", "```py\npip install -r requirements.txt \npip install dvc\n```", "```py\ngit branch # List local branches\n* master\n\ngit branch -r # List remote branches\nremotes/origin/HEAD -> origin/master\norigin/master\n\ngit branch -a # List all local and remote branches\n* master\nremotes/origin/HEAD -> origin/master\nremotes/origin/master\n```", "```py\ngit checkout master # switch to the main directory\ngit pull origin master # mendatory when working in collaboration but you can skip it now\n```", "```py\ngit branch feature/data # to create a branch\ngit checkout feature/data # to switch to the created branch\n# or use the combined creation and switch command\ngit checkout -b feature/data\n```", "```py\ngit checkout master # switch to the main directory\ngit merge feature/data # apply changes to master\n```", "```py\n# Model branch creation:\ngit checkout master # switch to the main directory\ngit checkout -b feature/model\n\n# Development ...\n\n# Merge branch\ngit checkout master # switch to the main directory\ngit merge feature/model # apply changes to master\n```", "```py\ngit tag -a v1.0 -m \"Version 1.0\"\n```", "```py\ngit log --pretty=format:\"%h - %an, %ar : %s\"\n```", "```py\ngit revert <commit-hash>  # Revert the merge commit\n```", "```py\ngit checkout -b hotfix/inference-bug\n```", "```py\ngit commit -m \"Fix bug in digit classification during inference\"\n```", "```py\ngit checkout main\ngit merge hotfix/inference-bug\n```", "```py\n# Branch creation:\ngit checkout master # switch to the main directory\ngit pull origin master # mendatory when working in collaboration but you can skip it now\ngit checkout -b feature/data-dvc\n\n# DVC initialisation: \ndvc init\n\n# Add to Git the created files:\ngit commit -m \"chore: Initialize DVC.\"\n```", "```py\n# Download data\npython src/data/ingestion.py -r data/raw\n\n# Add data to dvc\ndvc add data/raw/test_images.gz data/raw/test_labels.gz data/raw/train_images.gz data/raw/train_labels.gz\n\n#Add dvc files to git and commit\ngit add data/raw/.gitignore data/raw/test_images.gz.dvc data/raw/test_labels.gz.dvc data/raw/train_images.gz.dvc data/raw/train_labels.gz.dvc\ngit commit -m \"Add raw data\"\n```", "```py\n# transform data:\npython src/data/build_features.py -r data/raw/ -p data/processed/\n\n# Add to dvc: \ndvc add data/processed/train.csv data/processed/test.csv\n\n#Add dvc files to git and commit\ngit add data/processed/.gitignore data/processed/test.csv.dvc data/processed/train.csv.dvc\ngit commit -m \"Add processed data\"\n```", "```py\n# Apply changes:\ngit checkout master # switch to the main directory\ngit pull origin master # mendatory when working in collaboration, you can skip it now\ngit merge feature/data-dvc # apply changes to master\n\n# Tag this point:\ngit tag -a v1.1 -m \"Data collected and processed\"\n```", "```py\n# Add to dvc after update: \ndvc add data/processed/train.csv data/processed/test.csv\ngit add data/processed/test.csv.dvc data/processed/train.csv.dvc\ngit commit -m \"Data augmentation offline\"\n```", "```py\ngit checkout data/processed/test.csv.dvc data/processed/train.csv.dvc\ndvc checkout data/processed/test.csv.dvc data/processed/train.csv.dvc\n```", "```py\nmlflow server --host 127.0.0.1 --port 8080\n```", "```py\n# Branch creation:\ngit checkout master # switch to the main directory\ngit checkout -b feature/model-dvc\n```", "```py\n# Create model:\nmodel = create_model(x_train[0].shape)\n\n# Log parameters:\nloss = 'categorical_crossentropy'\nmetric = 'accuracy'\n\n# Train:\nmodel.compile(loss=loss, optimizer='adam', metrics=[metric])\nhistory = model.fit(x_train, y_train, epochs=epochs, batch_size=batch_size, verbose=1,\n                    validation_data=(x_val, y_val))\n\n# ....\n\n# Set tracking server uri for logging\nmlflow.set_tracking_uri(config['mlflow']['tracking_uri'])\n\n# Create an MLflow Experiment\nmlflow.set_experiment(config['mlflow']['experiment_name'])\n\n# Start an MLflow run\nwith mlflow.start_run():\n   # Save model:\n   signature = infer_signature(x_train, y_train)\n   mlflow.tensorflow.log_model(model, output_path, signature=signature)\n   #Log other metrics and parametrics:\n   # Next tutorial.\n```", "```py\n# Apply changes:\ngit checkout master # switch to the main directory\ngit merge feature/model-mlflow # apply changes to master\n\n# Tag this point:\ngit tag -a v1.2 -m \"Model versioning mlflow\"\n```", "```py\npython -m src.models.cnn.train -c configs/cnn.yaml\n```"]