- en: Data Platform Architecture Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/data-platform-architecture-types-f255ac6e0b7](https://towardsdatascience.com/data-platform-architecture-types-f255ac6e0b7)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How well does it answer your business needs? Dilemma of a choice.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://mshakhomirov.medium.com/?source=post_page-----f255ac6e0b7--------------------------------)[![üí°Mike
    Shakhomirov](../Images/bc6895c7face3244d488feb97ba0f68e.png)](https://mshakhomirov.medium.com/?source=post_page-----f255ac6e0b7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f255ac6e0b7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f255ac6e0b7--------------------------------)
    [üí°Mike Shakhomirov](https://mshakhomirov.medium.com/?source=post_page-----f255ac6e0b7--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f255ac6e0b7--------------------------------)
    ¬∑9 min read¬∑Feb 20, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/381d2217a4acdb8982f5e74438c93ab7.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Brooke Lark](https://unsplash.com/@brookelark?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: It is easy to get lost with the abundance of data tools available in the market
    right now. The Internet is filled with opinionated stories (often speculative)
    about which data tools to use and how to make our **Data Stack** *modern in this
    particular year*. *Which data tools are the best? Who is the leader? How to choose
    the right ones?* This story is for those who are in the ‚Äúspace‚Äù and are building
    the best data platform in the world.
  prefs: []
  type: TYPE_NORMAL
- en: '*So what is a ‚ÄúModern Data Stack‚Äù and how modern is it?*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To put it simply, it is a **collection of tools** used to work with data. Depending
    on what we are going to do with the data, these tools might include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '- a managed ETL/ELT data pipeline services'
  prefs: []
  type: TYPE_NORMAL
- en: '- a cloud-based managed data warehouse/ data lake as a destination for data'
  prefs: []
  type: TYPE_NORMAL
- en: '- a data transformation tool'
  prefs: []
  type: TYPE_NORMAL
- en: '- a business intelligence or data visualization platform'
  prefs: []
  type: TYPE_NORMAL
- en: '- machine learning and data science capabilities'
  prefs: []
  type: TYPE_NORMAL
- en: '*Sometimes it doesn‚Äôt matter how modern it is.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Indeed, if our BI tool is super modern with bespoke OLAP cubes for data modelling
    and git integration but it can‚Äôt render a report into an email it doesn‚Äôt matter.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Often these little things are crucial. Business needs and data pipeline requirements
    are the most important.
  prefs: []
  type: TYPE_NORMAL
- en: In the diagram below we can see the data journey and a selection of relevant
    tools to use during each step of the data pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/be3ba69dec4dfd770a4403ceea496e74.png)'
  prefs: []
  type: TYPE_IMG
- en: Data flow and tools. image by author
  prefs: []
  type: TYPE_NORMAL
- en: '*Redshift, Postgres, Google BigQuery, Snowflake, Databricks, Hadoop, Dataproc,
    Spark, or Elastic Map Reduce?*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Which product to choose for your data platform?
  prefs: []
  type: TYPE_NORMAL
- en: '*It depends on the daily* ***tasks*** *you are planning to run with your data,*
    ***Data Processing and Data Storage Architecture****, which suits these tasks
    the most.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data platform architecture types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I remember a couple of years ago the internet was boiling with ‚ÄúHasdoop is dead‚Äù
    type stories. There was a noticeable shift towards data warehouse architecture.
    In 2023 everyone seems to be obsessed with real-time data streaming and scalability
    suggesting Spark and Kafka soon to become the public benchmark leaders.
  prefs: []
  type: TYPE_NORMAL
- en: '*So which one is the best? Who is the leader and which data tools to choose?
    How to choose it?*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What I understood is that those benchmark judgements were very subjective and
    should have been considered with a pinch of salt. What really matters is how well
    those tools are aligned with our business requirements should we wish to build
    a data platform.
  prefs: []
  type: TYPE_NORMAL
- en: Data warehouse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A serverless, distributed SQL engine (**BigQuery, Snowflake, Redshift, Microsoft
    Azure Synapse, Teradata**.). It is a **SQL-first** **data architecture** where
    your data is stored in a **data warehouse** and you are free to use all the advantages
    of using **denormalized star schema** datasets. Of course, we can do it because
    most of the modern data warehouses are distributed and *scale well*, which means
    you don‚Äôt need to worry about table **keys and indices**. It suits well for ad-hoc
    analytics working with **Big Data**.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the modern data warehouse solutions can process *structured* and *unstructured*
    data and are indeed very convenient if the majority of your users are **data analysts**
    with good SQL skills. Modern data warehouses integrate easily with Business intelligence
    solutions like **Looker, Tableau, Sisense, or Mode**, which also rely on **ANSI-SQL**
    a lot. It is *not designed* to store images, videos, or documents. However, with
    SQL you can do almost everything and even train Machine learning models in some
    vendor solutions.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/advanced-sql-techniques-for-beginners-211851a28488?source=post_page-----f255ac6e0b7--------------------------------)
    [## Advanced SQL techniques for beginners'
  prefs: []
  type: TYPE_NORMAL
- en: On a scale from 1 to 10 how good are your data warehousing skills?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/advanced-sql-techniques-for-beginners-211851a28488?source=post_page-----f255ac6e0b7--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Data lake (Databricks, Dataproc, EMR)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A type of architecture where your data is being stored in the cloud storage,
    i.e., AWS S3, Google Cloud Storage, ABS. It is, of course, natural to use it for
    images, videos, or documents as well as any other file types (JSON, CSV, PARQUET,
    AVRO, etc.), but to analyze it your users will have to write some *code*.
  prefs: []
  type: TYPE_NORMAL
- en: The most common **programming language** for this task would be **Python** with
    a good number of libraries available. **JAVA, Scala, or PySpark** would be another
    popular choice for this task.
  prefs: []
  type: TYPE_NORMAL
- en: '*Amazing benefits come with code.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It is the highest level of flexibility in data processing. Our users just need
    to know how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Lakehouse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A combination of data warehouse and data lake architecture. It has the best
    of two worlds and serves both programmers and regular business users such as data
    analysts. It enables your business with the ability to run interactive SQL queries
    while remaining very flexible in terms of customization. Most of the modern data
    warehouse solutions can run interactive queries on data that is stored in the
    data lake, i.e. **external tables**. One data pipeline can look like this, for
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cbf292503e49b4a8112e1030ece8d136.png)'
  prefs: []
  type: TYPE_IMG
- en: Lake house pipeline example. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://pub.towardsai.net/supercharge-your-data-engineering-skills-with-this-machine-learning-pipeline-b69d159780b7?source=post_page-----f255ac6e0b7--------------------------------)
    [## Supercharge Your Data Engineering Skills with This Machine Learning Pipeline'
  prefs: []
  type: TYPE_NORMAL
- en: Data modeling, Python, DAGs, Big Data file formats, costs‚Ä¶ It covers everything
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pub.towardsai.net](https://pub.towardsai.net/supercharge-your-data-engineering-skills-with-this-machine-learning-pipeline-b69d159780b7?source=post_page-----f255ac6e0b7--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Data mesh
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A data mesh architecture is a decentralized approach that enables your company
    to manage data and run cross-team / cross-domain data analysis on its own and
    share the data.
  prefs: []
  type: TYPE_NORMAL
- en: Each business unit might have a mix of different programming skills, i.e. **SQL
    or Python** as well as a variety of data workload requirements (flexible data
    processing vs. interaction SQL queries). Having said that, each business unit
    is free to choose its own data warehouse/data lake solution but still will be
    able to share the data with other units with no data movement.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/data-pipeline-design-patterns-100afa4b93e3?source=post_page-----f255ac6e0b7--------------------------------)
    [## Data pipeline design patterns'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right architecture with examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/data-pipeline-design-patterns-100afa4b93e3?source=post_page-----f255ac6e0b7--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Relational and Non-relational Database Management systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Relational Database Management system (RDS) stores data in a row-based table
    with columns that connect related data elements. It is designed to record and
    optimize to fetch current data quickly. Popular relational databases are **PostgreSQL,
    MySQL, Microsoft SQL Server, and Oracle.** **NoSQL** databases don‚Äôt support only
    simple transactions, whereas Relational Database also supports complex transactions
    with joins. NoSQL Database is used to handle data coming at high velocity. Popular
    NoSQL databases are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Document databases: MongoDB and CouchDB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Key-value databases: Redis and DynamoDB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A data warehouse** has a similar columnar structure, same as RDS it is relational.
    Data is organized into tables, rows, and columns too. However, it is different
    in the way that database data is organized and stored by row, while data warehouse
    data is stored by columns, to facilitate online analytical processing (OLAP) whereas
    database uses Online Transactional Processing (OLTP). For example, **AWS Redshift**
    supports both data warehouse and data lake approaches, enabling it to access and
    analyze large amounts of data.'
  prefs: []
  type: TYPE_NORMAL
- en: A Data warehouse is designed for data analysis, including large amounts of historical
    data. Using a data warehouse require users to create a pre-defined, fixed schema
    upfront, which helps with data analytics a lot. Tables must be simple (denormalized)
    to compute large amounts of data.
  prefs: []
  type: TYPE_NORMAL
- en: '**RDS database tables** and joins are complicated because they are **normalised**.
    So the primary difference between a **traditional database** and a data warehouse
    is that while the traditional database is designed and optimized to *record* data,
    the data warehouse is designed and optimized to respond to *analytics*. You would
    want to use a database when you run an App and you need to fetch some current
    data fast. RDS stores the current data required to power an application.'
  prefs: []
  type: TYPE_NORMAL
- en: '*You will have to decide which one is right for you.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Business intelligence stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern Data Stack should include BI tools that help with data modelling and
    visualization. Some high-level overviews can be found below. **Not an extensive
    list, of course, but these are the most popular BI tools available in the market
    as of 2023:**
  prefs: []
  type: TYPE_NORMAL
- en: '**Looker Data Studio (Google Looker Studio)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Key features:**'
  prefs: []
  type: TYPE_NORMAL
- en: Free version formerly called Google Data Studio. This is a great free tool for
    BI with community-based support.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Great collection of widgets and charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Great collection of community-based data connectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Free email scheduling and delivery. Perfectly renders reports into an email.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Free data governance features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As it‚Äôs a free community tool it has a bit of undeveloped API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Looker** (paid version)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Key features:**'
  prefs: []
  type: TYPE_NORMAL
- en: Robust data modelling features and self-serving capabilities. Great for medium
    and large size companies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tableau**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Key features:**'
  prefs: []
  type: TYPE_NORMAL
- en: Outstanding visuals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reasonable pricing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patented VizQL engine driving its intuitive analytics experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connections with many data sources, such as HADOOP, SAP, and DB Technologies,
    improving data analytics quality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrations with Slack, Salesforce, and many others.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS Quicksight**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Key features:**'
  prefs: []
  type: TYPE_NORMAL
- en: Custom-branded email reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serverless and easy to manage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robust API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serverless auto-scaling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pay-per-use pricing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Power BI**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Key features:**'
  prefs: []
  type: TYPE_NORMAL
- en: Excel integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Powerful data ingestion and connection capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shared dashboards from Excel data made with ease
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A range of visuals and graphics is readily available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sisense** (former Periscope)'
  prefs: []
  type: TYPE_NORMAL
- en: Sisense is an end-to-end data analytics platform that makes data discovery and
    analytics accessible to customers and employees alike via an embeddable, scalable
    architecture.
  prefs: []
  type: TYPE_NORMAL
- en: '**Key features:**'
  prefs: []
  type: TYPE_NORMAL
- en: Offers data connectors for almost every major service and data source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delivers a code-free experience for non-technical users, though the platform
    also supports Python, R, and SQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git integration and custom datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Might be a bit expensive as it‚Äôs based on pay per license per user model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some features are still under construction, i.e. report email delivery and report
    rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ThoughtSpot**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Key features:**'
  prefs: []
  type: TYPE_NORMAL
- en: Natural language for queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mode**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Key features:**'
  prefs: []
  type: TYPE_NORMAL
- en: CSS design for dashboards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaboration features to allow rapid prototyping before committing to a premium
    plan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notebook support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metabase**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Key features:**'
  prefs: []
  type: TYPE_NORMAL
- en: Great for beginners and very flexible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has a docker image so we can run it straight away
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Self-service Analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Redash**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Key features:**'
  prefs: []
  type: TYPE_NORMAL
- en: API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write queries in their natural syntax and explore schemas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use query results as data sources to join different databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of these tools have free versions. For example, Looker Data Studio is free
    with basic dashboarding features like email, i.e. drag-and-drop widget builder,
    and a good selection of charts. Others have paid features, i.e., data modelling,
    alerts, notebooks, and git integration.
  prefs: []
  type: TYPE_NORMAL
- en: They are all great tools with their pros and cons. Some of them are more user-friendly
    some can offer more robust APIs, CI/CD features, and git integration. For some
    of the tools, these features are available only in the paid version.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern data-driven apps will require a database to store the current application
    data. So if you have an application to run, consider OLTP and RDS architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Data lakes, warehouses, lake houses, and databases each have their benefits
    and serve each purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Companies that want to perform big data analytics running complex SQL queries
    on historical data may choose to complement their databases with a data warehouse
    (or a lake house). It makes the data stack flexible and modern.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, the answer would always be the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Go for the cheapest one or the one that works best with your dev stack*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Try it and you will see that a relational database can be easily integrated
    into the data platform. It doesn‚Äôt matter if it‚Äôs a data lake or a data warehouse.
    A variety of data connectors will enable easy and seamless data extraction.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are a few things to consider.
  prefs: []
  type: TYPE_NORMAL
- en: The key thing here is to try data tools to see how well they can be aligned
    with our business requirements.
  prefs: []
  type: TYPE_NORMAL
- en: '*For example, some BI tools can offer only pay-per-user pricing which won‚Äôt
    be a good fit in case we need to share the dashboard with external users.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If there are any cost-saving benefits it might be better to keep data tools
    with the same cloud vendor where your development stack is.
  prefs: []
  type: TYPE_NORMAL
- en: We might want to check if there is an overlap in functionality between tools,
    i.e. do we really need a BI solution that would perform data modelling in its
    own OLAP cube when we already do it in the data warehouse?
  prefs: []
  type: TYPE_NORMAL
- en: '*Data modelling is important*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Indeed, it defines how often we process the data which will inevitably reflect
    in processing costs.
  prefs: []
  type: TYPE_NORMAL
- en: The shift to a lake or data warehouse would depend primarily on the skillset
    of your users. The Data warehouse solution will enable more interactivity and
    narrows down our choice to a SQL-first product (Snowflake, BigQuery, etc.).
  prefs: []
  type: TYPE_NORMAL
- en: Data lakes are for users with programming skills and we would want to go for
    Python-first products like Databricks, Galaxy, Dataproc, EMR.
  prefs: []
  type: TYPE_NORMAL
- en: Recommended read
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://www.mckinsey.com/capabilities/mckinsey-digital/our-insights/how-to-build-a-data-architecture-to-drive-innovation-today-and-tomorrow](https://www.mckinsey.com/capabilities/mckinsey-digital/our-insights/how-to-build-a-data-architecture-to-drive-innovation-today-and-tomorrow)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://aws.amazon.com/emr/](https://aws.amazon.com/emr/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://cloud.google.com/learn/what-is-a-data-lake](https://cloud.google.com/learn/what-is-a-data-lake)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://medium.com/towards-data-science/data-pipeline-design-patterns-100afa4b93e3](https://medium.com/towards-data-science/data-pipeline-design-patterns-100afa4b93e3)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://www.snowflake.com/trending/data-architecture-principles](https://www.snowflake.com/trending/data-architecture-principles)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
