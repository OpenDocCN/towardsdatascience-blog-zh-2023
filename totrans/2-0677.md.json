["```py\npip install pytest\n```", "```py\npip install pytest==<version>\n```", "```py\npytest --version\n```", "```py\ndef sum(a: float, b: float) -> float:\n    \"\"\"\n    Calculate the sum of the two numbers.\n\n    :param a: The first number to be added.\n    :param b: The second number to be added.\n    :return: The sum of the two numbers.\n    \"\"\"\n    return a + b\n```", "```py\nfrom calculations import sum\n\ndef test_sum():\n    assert sum(5, 10) == 15\n```", "```py\npytest\npytest test_calculations.py\n```", "```py\ndef test_sum():\n    assert sum(5, 10) == 10\n```", "```py\ndef sum(a: float, b: float) -> float:\n    \"\"\"\n    Calculate the sum of the two numbers.\n\n    :param a: The first number to be added.\n    :param b: The second number to be added.\n    :return: The sum of the two numbers.\n    \"\"\"\n    return a + b\n\ndef multiply(a: float, b: float) -> float:\n    \"\"\"\n    Calculate the product of the two numbers.\n\n    :param a: The first number to be added.\n    :param b: The second number to be added.\n    :return: The product of the two numbers.\n    \"\"\"\n    return a * b\n```", "```py\nfrom calculations import sum, multiply\n\ndef test_sum():\n    assert sum(5, 10) == 15\n\ndef test_multiply():\n    assert multiply(5, 10) == 50\n```", "```py\npytest test_calculations.py::test_multiply \n```", "```py\nclass Calculations:\n    def __init__(self, a: float, b: float) -> None:\n        \"\"\"\n        Initialize the Calculation object with two numbers.\n\n        :param a: The first number.\n        :param b: The second number.\n        \"\"\"\n        self.a = a\n        self.b = b\n\n    def sum(self) -> float:\n        \"\"\"\n        Calculate the sum of the two numbers.\n\n        :return: The sum of the two numbers.\n        \"\"\"\n        return self.a + self.b\n\n    def multiply(self) -> float:\n        \"\"\"\n        Calculate the product of the two numbers.\n\n        :return: The product of the two numbers.\n        \"\"\"\n        return self.a * self.b\n\n    def divide(self) -> float:\n        \"\"\"\n        Calculate the quotient of the two numbers.\n\n        :return: The quotient of the two numbers.\n        \"\"\"\n        return self.a / self.b\n```", "```py\nfrom calculations import Calculations\nimport pytest\n\nclass TestCalculations:\n    def test_sum(self):\n        calculations = Calculations(5, 10)\n        assert calculations.sum() == 15\n\n    def test_multiply(self):\n        calculations = Calculations(5, 10)\n        assert calculations.multiply() == 50\n\n    def test_divide(self):\n        calculations = Calculations(5, 10)\n        assert calculations.divide() == 0.5\n```", "```py\nfrom calculations import Calculations\nimport pytest\n\n@pytest.fixture\ndef calculations():\n    return Calculations(5, 10)\n\nclass TestCalculations:\n    def test_sum(self, calculations):\n        assert calculations.sum() == 15\n\n    def test_multiply(self, calculations):\n        assert calculations.multiply() == 50\n\n    def test_divide(self, calculations):\n        assert calculations.divide() == 0.5\n```", "```py\nfrom calculations import Calculations\nimport pytest\n\n@pytest.fixture\ndef calculations():\n    return Calculations(5, 10)\n\nclass TestCalculations:\n\n    @pytest.mark.parametrize(\"a, b, expected_output\",\n                             [(1, 3, 4), (10, 50, 60), (100, 0, 100)])\n    def test_sum(self, a, b, expected_output):\n        assert Calculations(a, b).sum() == expected_output\n\n    def test_multiply(self, calculations):\n        assert calculations.multiply() == 50\n\n    def test_divide(self, calculations):\n        assert calculations.divide() == 0.5\n```"]