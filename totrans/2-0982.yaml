- en: Git 101 — From Terminologies to Architecture and Workflows
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git 101 — 从术语到架构及工作流
- en: 原文：[https://towardsdatascience.com/git-101-from-terminologies-to-architecture-and-workflows-78cb6d735798](https://towardsdatascience.com/git-101-from-terminologies-to-architecture-and-workflows-78cb6d735798)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/git-101-from-terminologies-to-architecture-and-workflows-78cb6d735798](https://towardsdatascience.com/git-101-from-terminologies-to-architecture-and-workflows-78cb6d735798)
- en: Git behind-the-scenes and how to use Git efficiently
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git 背后的原理及如何高效使用 Git
- en: '[](https://kayjanwong.medium.com/?source=post_page-----78cb6d735798--------------------------------)[![Kay
    Jan Wong](../Images/28e803eca6327d97b6aa97ee4095d7bd.png)](https://kayjanwong.medium.com/?source=post_page-----78cb6d735798--------------------------------)[](https://towardsdatascience.com/?source=post_page-----78cb6d735798--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----78cb6d735798--------------------------------)
    [Kay Jan Wong](https://kayjanwong.medium.com/?source=post_page-----78cb6d735798--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://kayjanwong.medium.com/?source=post_page-----78cb6d735798--------------------------------)[![Kay
    Jan Wong](../Images/28e803eca6327d97b6aa97ee4095d7bd.png)](https://kayjanwong.medium.com/?source=post_page-----78cb6d735798--------------------------------)[](https://towardsdatascience.com/?source=post_page-----78cb6d735798--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----78cb6d735798--------------------------------)
    [Kay Jan Wong](https://kayjanwong.medium.com/?source=post_page-----78cb6d735798--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----78cb6d735798--------------------------------)
    ·7 min read·May 21, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----78cb6d735798--------------------------------)
    ·阅读时间 7 分钟·2023 年 5 月 21 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/abc3db02185eba249984afdc9e69a784.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/abc3db02185eba249984afdc9e69a784.png)'
- en: Photo by [Roman Synkevych](https://unsplash.com/@synkevych?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Roman Synkevych](https://unsplash.com/@synkevych?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: So you have learned and know about `git add`, `git commit`, and `git push`,
    but what does each step achieve — and what is happening in your *local* and *remote*
    repository? What are different merging strategies and branching strategies you
    can use to harness the power of Git to do much more?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你已经学习并了解了 `git add`、`git commit` 和 `git push`，但每一步实现了什么——在你的 *本地* 和 *远程* 仓库中发生了什么？你可以使用哪些不同的合并策略和分支策略来利用
    Git 的强大功能做更多事情？
- en: After pouring through numerous articles simply showing Git commands, I feel
    that it is important to know the architecture of Git to truly appreciate and understand
    what is happening. This article will touch on the basic terminologies of Git,
    building up to Git architecture, and finally, different common Git workflows that
    you can consider adopting for your next coding project!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读了许多仅展示 Git 命令的文章之后，我认为了解 Git 的架构对于真正理解和欣赏 Git 的运作是重要的。本文将涉及 Git 的基本术语，逐步建立到
    Git 架构，最后介绍一些常见的 Git 工作流，供你在下一个编码项目中考虑采纳！
- en: Table of Contents
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录
- en: '[What is Git](https://medium.com/p/78cb6d735798/#34c1)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[什么是 Git](https://medium.com/p/78cb6d735798/#34c1)'
- en: '[Git Terminologies](https://medium.com/p/78cb6d735798/#d4b5)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Git 术语](https://medium.com/p/78cb6d735798/#d4b5)'
- en: '[Git Architecture](https://medium.com/p/78cb6d735798/#3d8c)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Git 架构](https://medium.com/p/78cb6d735798/#3d8c)'
- en: '[Branching, Merging, and Merge Conflicts](https://medium.com/p/78cb6d735798/#c5e6)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[分支、合并及合并冲突](https://medium.com/p/78cb6d735798/#c5e6)'
- en: '[Git Workflows](https://medium.com/p/78cb6d735798/#414a)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Git 工作流](https://medium.com/p/78cb6d735798/#414a)'
- en: What is Git
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Git
- en: In short, Git is a tool that helps with version control which enables teams
    to manage their code in an agile manner — from tracking the history of code changes
    to handling conflicts in code changes and much more.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Git 是一种帮助进行版本控制的工具，使团队能够以敏捷的方式管理他们的代码——从跟踪代码更改历史到处理代码更改冲突等等。
- en: Taking it one step further, Git can also be used with Continuous Integration
    Continuous Deployment (CICD) tools since the codebase is well-maintained and versioned
    (if used properly). Deployment can be automatically triggered upon code change
    using tools such as GitHub Actions — but this is not in the scope of this article.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 更进一步，Git 还可以与持续集成持续部署（CICD）工具一起使用，因为代码库维护良好且有版本控制（如果正确使用）。使用如 GitHub Actions
    等工具可以在代码更改时自动触发部署——但这不在本文讨论范围之内。
- en: '**Note**: GitHub, GitLab, and Bitbucket are hosting services for Git repositories,
    not to be confused with Git itself!'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意**：GitHub、GitLab 和 Bitbucket 是 Git 仓库的托管服务，不应与 Git 本身混淆！'
- en: Git Terminologies
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git 术语
- en: Before diving into Git architecture, a few terminologies are frequently mentioned
    and it would be good to have them defined.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解 Git 架构之前，一些术语经常被提到，了解它们会有帮助。
- en: '**Repository**: A data structure that stores documents and codes, made up of
    a series of commits over time'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仓库**：存储文档和代码的数据结构，由一系列提交组成'
- en: '**Branch**: An independent line of project development'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分支**：独立的项目开发线'
- en: '**Commit**: One version of the project; a snapshot of the project'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交**：项目的一个版本；项目的快照'
- en: '**Pull Request**: Request to merge a branch into another branch'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拉取请求**：请求将一个分支合并到另一个分支'
- en: '**Merge**: Combined work of separate branches'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合并**：将独立分支的工作结合在一起'
- en: To put it together, while working on a project, you will usually *branch* out
    to make changes and *commit* your changes after it is completed. After which,
    you will raise a *pull request* for your branch to be *merged* with the main *repository*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 总结起来，在项目工作中，你通常会*分支*出去进行更改，并在完成后*提交*更改。之后，你将发起一个*拉取请求*，以便将你的分支与主要的*仓库*进行*合并*。
- en: The existence of independent branches and pull requests to approve code changes
    allow teams to scale their work while maintaining a stable repository
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 独立分支和拉取请求的存在允许团队在保持稳定仓库的同时扩展他们的工作
- en: There are also terminologies on Git actions that you can perform. Note that
    there is a concept of *local* and *remote*, which will be explained in the later
    section.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Git 操作中也有一些术语。注意有一个概念是*本地*和*远程*，将在后面的部分进行解释。
- en: '**Clone**: Local copy of a remote repository'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**克隆**：远程仓库的本地副本'
- en: '**Fork**: Copy remote repository to own account, both repositories are remote'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分叉**：将远程仓库复制到自己的账户，两者都是远程仓库'
- en: '**Fetch**: Retrieves new objects and references from the remote repository'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取**：从远程仓库检索新对象和引用'
- en: '**Pull**: Fetches and merges commit locally'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拉取**：从远程仓库获取并合并提交到本地'
- en: '**Push**: Adds new objects and references to the remote repository'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推送**：向远程仓库添加新对象和引用'
- en: '**Stash**: Save files in the working tree for later access'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**储藏**：保存工作区中的文件以备后用'
- en: Git Architecture
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git 架构
- en: As mentioned in the previous section, there is a concept of *local* and *remote*.
    **Remote repositories** refer to the location of all commits of the project, usually
    hosted in a data center or cloud (i.e., GitHub). **Local repositories**, on the
    other hand, refer to the location of commits of the project on your local machine
    (i.e., laptop) and are made up of 3 separate ‘areas’,
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面部分所述，存在*本地*和*远程*的概念。**远程仓库**指的是项目所有提交的位置，通常托管在数据中心或云端（例如 GitHub）。**本地仓库**，则指的是项目在本地机器（例如笔记本电脑）上的提交位置，由三个独立的“区域”组成，
- en: '**Working tree**: Location of directories and files of a single commit'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作区**：单个提交的目录和文件的位置'
- en: '**Staging area**: Location of files planned for next commit'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**暂存区**：计划下次提交的文件的位置'
- en: '**Local repository**: Location of all commits of the project'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地仓库**：项目所有提交的位置'
- en: To put it into action, when you perform `git checkout`, it places directories
    and files into the *working tree*. After making changes, performing `git add`
    transfers the modified files to the *staging area*. After which you can perform
    `git commit` to add a message to the changes made and changes are committed to
    the *local repository*. Finally, performing `git push` pushes the changes in the
    *local repository* to the *remote repository*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 具体操作时，当你执行`git checkout`时，它会将目录和文件放入*工作区*。在进行更改后，执行`git add`会将修改的文件转移到*暂存区*。然后你可以执行`git
    commit`为更改添加消息，并将更改提交到*本地仓库*。最后，执行`git push`将*本地仓库*中的更改推送到*远程仓库*。
- en: Branching, Merging, and Merge Conflicts
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分支、合并和合并冲突
- en: Branching Strategies
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分支策略
- en: A branch is a set of commits that trace back to the project’s first commit and
    is typically used to isolate work amongst team members as they can work on separate
    independent branches.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一个分支是一组回溯到项目首个提交的提交，通常用于在团队成员之间隔离工作，因为他们可以在独立的分支上工作。
- en: There are two types of branches. **Short-lived branches** contain small changes
    to the project, such as implementing a feature, bug fix, hotfix, etc. Whereas
    **long-lived branches** can last for the life of the project, such as the master,
    develop, or release branch.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的分支。**短期分支**包含对项目的小更改，例如实现新功能、修复错误、热修复等。而**长期分支**可以持续到项目的整个生命周期，例如主分支、开发分支或发布分支。
- en: Ideally, branches should be deleted after merging to prevent a continuous increase
    in the number of branches. In case of accidental deletion, branches can be restored
    — only if the branch exists in someone’s local repository.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，分支在合并后应被删除，以防止分支数量持续增加。在意外删除的情况下，分支可以恢复 — 仅当分支存在于某人的本地仓库中时。
- en: Merging Strategies
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合并策略
- en: Merging combines the work of multiple independent branches. It is good practice
    to use small and frequent merges to avoid merge conflict. There are 4 types of
    merge — and the merging policy to follow usually depends on the team commit history
    policies.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 合并将多个独立分支的工作结合起来。使用小而频繁的合并是一个好的实践，以避免合并冲突。有 4 种合并类型 — 并且合并策略通常取决于团队的提交历史策略。
- en: '**Fast-forward (FF) Merge**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**快进（FF）合并**'
- en: '![](../Images/f4c615f9fad1fafe72eefe5c46ea4fc8.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f4c615f9fad1fafe72eefe5c46ea4fc8.png)'
- en: 'Fig 1: Fast-Forward Merge Example — Image by author'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '图 1: 快进合并示例 — 作者提供的图片'
- en: Moves the base branch label to the tip of the merged branch
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将基础分支标签移动到合并分支的尖端。
- en: Only possible if no other commits have been made to the base branch — otherwise
    perform a `git pull` before performing any `git push`
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有在没有对基础分支进行其他提交的情况下才可能 — 否则在执行任何 `git push` 之前先执行 `git pull`。
- en: It is considered the strictest merge policy as it ensures code modifications
    are always compatible as the latest changes are always fetched first
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这被认为是最严格的合并策略，因为它确保代码修改始终兼容，因为最新的更改总是首先被获取。
- en: '**Merge Commit**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**合并提交**'
- en: '![](../Images/ece98a1ca9c690db6a06f040300a3728.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ece98a1ca9c690db6a06f040300a3728.png)'
- en: 'Fig 2: Merge Commit Example — Image by author'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '图 2: 合并提交示例 — 作者提供的图片'
- en: Combines commits at the tips of merged branches, resulting in non-linear commit
    graphs as merge commit has multiple parents
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将合并分支的提交结合起来，导致非线性的提交图，因为合并提交有多个父级。
- en: This may result in merge conflict when multiple commits are combined and both
    branches change the same thing in different ways
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当多个提交被合并且两个分支以不同方式更改相同内容时，这可能会导致合并冲突。
- en: This is the automatic behaviour of Git
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是 Git 的自动行为。
- en: '**Squash Merge**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**压缩合并**'
- en: '![](../Images/67bdef675af8ea9e50d53d5c66a9370a.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/67bdef675af8ea9e50d53d5c66a9370a.png)'
- en: 'Fig 3: Squash Merge Example — Image by author'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3: 压缩合并示例 — 作者提供的图片'
- en: Merges the tip of the merged branch onto the tip of the base branch (can be
    using fast-forward merge or merge commit), and reduces multiple commits into a
    single commit
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将合并分支的尖端合并到基础分支的尖端（可以使用快进合并或合并提交），并将多个提交合并成一个提交。
- en: This may result in deleted commits as commits B and C will eventually be garbage
    collected when the branch is deleted
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这可能导致删除的提交，因为提交 B 和 C 最终会在删除分支时被垃圾回收。
- en: '**To be done with caution!** This rewrites commit history and we should not
    rewrite history that has been shared'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**需要谨慎操作！** 这会重写提交历史，我们不应重写已共享的历史。'
- en: '**Rebase**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**变基**'
- en: '![](../Images/2c62a0a1eb6a626217c1b7208434aac9.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2c62a0a1eb6a626217c1b7208434aac9.png)'
- en: 'Fig 4: Rebase Example — Image by author'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '图 4: 变基示例 — 作者提供的图片'
- en: Moves commits in merged branch to a new parent and commits will have different
    IDs due to different ancestor chain
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将合并分支中的提交移动到新的父级，并且提交将由于不同的祖先链而具有不同的 ID。
- en: The ‘new’ commits in the merged branch can be fast-forwarded and do not require
    a merge commit
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并分支中的“新”提交可以快速前进，不需要合并提交。
- en: When performing rebasing, this may result in merge conflict when both branches
    change the same thing in different ways
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在进行变基时，当两个分支以不同方式更改相同内容时，这可能会导致合并冲突。
- en: '**To be done with caution!** This rewrites commit history and we should not
    rewrite history that has been shared'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**需要谨慎操作！** 这会重写提交历史，我们不应重写已共享的历史。'
- en: Merge Conflicts
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合并冲突
- en: From the earlier section, we noticed that merge commit and rebasing may result
    in a merge conflict, a situation when two branches change the same thing in different
    ways.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的部分，我们注意到合并提交和变基可能导致合并冲突，即两个分支以不同方式更改相同内容的情况。
- en: Resolving a merge conflict involves 3 commits — the tip of the base branch,
    the tip of the merge branch, and a common ancestor between the base and merge
    branch. The conflicting parts are surrounded by conflict markers as such,
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 解决合并冲突涉及 3 次提交——基础分支的顶端、合并分支的顶端，以及基础和合并分支之间的共同祖先。冲突部分由冲突标记围绕，如下所示，
- en: '[PRE0]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When attempting a merge, the files with conflicts are modified by Git and placed
    in the working tree. The merge conflict must be resolved manually before staging,
    committing, and merging again.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试合并时，具有冲突的文件会被 Git 修改并放置在工作树中。合并冲突必须在暂存、提交和再次合并之前手动解决。
- en: Git Workflows
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git 工作流
- en: Besides deciding on the type of merging strategy to implement for your projects,
    there are also 4 types of Git workflow based on the team preference, size of the
    team, size of the project, etc.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 除了决定为你的项目实施的合并策略类型外，还有基于团队偏好、团队规模、项目规模等的4种 Git 工作流类型。
- en: Basic Workflow / Centralized Workflow
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本工作流 / 集中式工作流
- en: '**Type**: Single central repository (no branches)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**: 单一中央代码库（无分支）'
- en: '**How**: Each member clones the repository, works on code locally, commits,
    and pushes their changes to the central repository'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如何**: 每个成员克隆代码库，在本地处理代码，提交并将更改推送到中央代码库。'
- en: Suitable for small projects and small teams since there is no code review or
    pull request involved
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适合小型项目和小型团队，因为没有代码审查或拉取请求的参与。
- en: Feature Branch Workflow
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特性分支工作流
- en: '**Type**: Single central repository (with feature branches)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**: 单一中央代码库（带有功能分支）'
- en: '**How**: Each member creates a branch for every new functionality, and merges
    the completed changes with the main branch'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如何**: 每个成员为每个新功能创建一个分支，并将完成的更改合并到主分支。'
- en: The recommended workflow as there are code review, pull request, and discussion
    involved
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推荐的工作流，因为涉及代码审查、拉取请求和讨论。
- en: Forking Workflow
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分叉工作流
- en: '**Type**: Multiple remote repositories (by forking)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**: 多个远程代码库（通过分叉）'
- en: '**How**: Team members fork the repository, making a duplicate copy of the repository.
    Members do not need write access to the original repository and are free to modify
    the forked repository in any manner to add features or tailor the repository to
    another use case or project'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如何**: 团队成员分叉（fork）代码库，创建代码库的一个副本。成员不需要对原始代码库具有写权限，并且可以随意修改分叉的代码库，以添加功能或将代码库调整到其他用例或项目中。'
- en: This workflow allows the maintainer of the repository to accept commits from
    any developer without giving them access to the official codebase, useful for
    open-source projects
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种工作流允许代码库的维护者接受来自任何开发者的提交，而无需授予他们访问官方代码库的权限，这对开源项目非常有用。
- en: Gitflow Workflow
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gitflow 工作流
- en: '**Type**: Single central repository (with short-lived and long-running branches)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**: 单一中央代码库（带有短期和长期分支）'
- en: '**How**: There is a use of short-lived branches for features or hotfixes, and
    long-running branches for development and releases. Feature branches are created
    from the develop branch, and merged back to develop branch when it is completed.
    For release, features in develop branch are merged back to the main branch and
    only the main branch is used for releases'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如何**: 对于功能或热修复，使用短期分支，对于开发和发布，使用长期分支。功能分支从开发分支创建，完成后合并回开发分支。对于发布，将开发分支中的功能合并回主分支，只有主分支用于发布。'
- en: This workflow allows for the safe and continuous release of the project through
    releases and hotfixes
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该工作流允许通过发布和热修复安全地持续发布项目。
- en: Git is imperative as long as you are working on any codebase. Even with or without
    a project team, version control is still important to manage your code! Hope this
    article shed light on how Git works under the hood with Git architecture, the
    different branching and merging strategies, and finally the different workflows
    you can use for your projects.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Git 是必不可少的，只要你在处理任何代码库时。即使有或没有项目团队，版本控制仍然很重要来管理你的代码！希望这篇文章能揭示 Git 的内部工作原理，包括
    Git 架构、不同的分支和合并策略，以及你可以在项目中使用的不同工作流。
- en: Related Links
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关链接
- en: 'Git Documentation: [https://git-scm.com/doc](https://git-scm.com/doc)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Git 文档: [https://git-scm.com/doc](https://git-scm.com/doc)'
- en: 'Version Control with Git (Coursera): [https://www.coursera.org/learn/version-control-with-git](https://www.coursera.org/learn/version-control-with-git)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '使用 Git 进行版本控制（Coursera）: [https://www.coursera.org/learn/version-control-with-git](https://www.coursera.org/learn/version-control-with-git)'
