- en: 5 More Awesome Python Hidden Features ‚Äî Part 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/5-more-awesome-python-hidden-features-part-2-160a533c212b](https://towardsdatascience.com/5-more-awesome-python-hidden-features-part-2-160a533c212b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PYTHON | PROGRAMMING | FEATURES
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A look at some powerful features to unlock Python‚Äôs full potential
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://david-farrugia.medium.com/?source=post_page-----160a533c212b--------------------------------)[![David
    Farrugia](../Images/082ed61e24c7c26a4ae1c77343a87824.png)](https://david-farrugia.medium.com/?source=post_page-----160a533c212b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----160a533c212b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----160a533c212b--------------------------------)
    [David Farrugia](https://david-farrugia.medium.com/?source=post_page-----160a533c212b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----160a533c212b--------------------------------)
    ¬∑5 min read¬∑Mar 22, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/25e6d165f55c74ea200f659a5606e136.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Joshua Reddekopp](https://unsplash.com/@joshuaryanphoto?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Python is a strong and robust language ‚Äî and one of the ways that renders Python
    to be on a class of its own is its versatility and dynamics. Python is famous
    for its cool ‚Äòone-liners‚Äô. Undoubtedly, we all feel a rush of excitement or intrigue
    whenever we see a beautifully executed Pythonic line of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our previous post, we discussed 5 awesome hidden features in the Python
    programming language. You can find that article here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/5-awesome-python-hidden-features-a0172e0bd98e?source=post_page-----160a533c212b--------------------------------)
    [## 5 Awesome Python Hidden Features ‚Äî Part 1'
  prefs: []
  type: TYPE_NORMAL
- en: Take your coding skills to the next level with these cool hidden Python features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/5-awesome-python-hidden-features-a0172e0bd98e?source=post_page-----160a533c212b--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: I received a lot of positive feedback on this article, and some of you even
    reached out to request some more of these powerful Python tricks.
  prefs: []
  type: TYPE_NORMAL
- en: So here you go, another 5 cool hidden features that you can use to become even
    more dangerous when programming in Python!
  prefs: []
  type: TYPE_NORMAL
- en: 'Hidden Feature 1: List Stepping'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'List stepping is used to select different parts of a list, or even select items
    at different intervals. The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'start: the index of the first element to **include**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'end: the index of the first element to **exclude**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'step: the number of elements that we skip between each iteration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Suppose we have a list with the numbers 0‚Äì9 and we want to return only the
    even numbers. We can do something as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, we do not specify the start and end index; therefore, Python takes the
    start to be the first element and the end to be the last element (i.e., the entire
    list). We then specify that we want a step of 2\. So, python will start with the
    first element and return it (i.e., 0). Python will then move 2 steps (moves to
    1, and then moves to 2) and return the result (i.e., 2). This process is repeated
    until we go over the entire list.
  prefs: []
  type: TYPE_NORMAL
- en: Another powerful trick with list stepping is the ability to reverse a list using
    negative indexing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Hidden Feature 2: Chaining Comparison Operators'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is often the case in programming that we need to evaluate multiple comparisons
    as part of our logic flow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we have a variable `x` and we want to ensure that `x` is greater than
    1 but smaller than 10\. We typically do something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In Python we can chain these comparisons as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also do something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Hidden Feature 3: Complex/Imaginary Numbers'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you studied mathematics, then you are familiar with the concept of complex
    numbers. For those of you who didn‚Äôt and are interested, you can read the following
    article as a good introduction to this topic.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.mathsisfun.com/numbers/complex-numbers.html?source=post_page-----160a533c212b--------------------------------)
    [## Complex Numbers'
  prefs: []
  type: TYPE_NORMAL
- en: A Complex Number A Complex Number is a combination of a Real Number and an Imaginary
    Number Real Numbers are numbers‚Ä¶
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.mathsisfun.com](https://www.mathsisfun.com/numbers/complex-numbers.html?source=post_page-----160a533c212b--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: An interesting feature in Python that most people don‚Äôt know about is that it
    has full support for complex numbers. In mathematics we typically use the symbol
    `i` to represent a complex number. In Python, we use either `j`or call the `complex()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Hidden feature 4: Accessing the last result using _'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might have seen that most programmers reserve the `_` as a placeholder for
    some variable which is unused or not needed during execution.
  prefs: []
  type: TYPE_NORMAL
- en: However, what most people don‚Äôt know is that by default, Python assigns the
    result of your last execution to the variable `_`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Hidden Feature 5: Argument Unpacking'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Suppose we have some arbitrary function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a list of 3 numbers that we want to pass to our function. We typically
    write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In Python we can do the following instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `*` will unpack the entire list and passes every item as a parameter to
    the function. Subsequently, we can also unpack a dictionary using the `**`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Bonus Feature: import antigravity'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python has several easter eggs scattered throughout. Try `import antigravity`
    üòÅ
  prefs: []
  type: TYPE_NORMAL
- en: '**Did you enjoy this post? For $5/month, you can become a member to unlock
    unlimited access to Medium. You will be directly supporting me and all your other
    favourite writers on Medium. So huge thanks for that!**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://david-farrugia.medium.com/membership?source=post_page-----160a533c212b--------------------------------)
    [## Join Medium with my referral link - David Farrugia'
  prefs: []
  type: TYPE_NORMAL
- en: Get exclusive access to all my ‚ö°premium‚ö° content and all over Medium without
    limits. Support my work by buying me a‚Ä¶
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: david-farrugia.medium.com](https://david-farrugia.medium.com/membership?source=post_page-----160a533c212b--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '**Perhaps you might also consider subscribing to my email list to get notified
    whenever I publish new content. It‚Äôs free :)**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://david-farrugia.medium.com/subscribe?source=post_page-----160a533c212b--------------------------------)
    [## Get an email whenever David Farrugia publishes.'
  prefs: []
  type: TYPE_NORMAL
- en: Get an email whenever David Farrugia publishes. By signing up, you will create
    a Medium account if you don't already‚Ä¶
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: david-farrugia.medium.com](https://david-farrugia.medium.com/subscribe?source=post_page-----160a533c212b--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Want to Get in Touch?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I would love to hear your thoughts on the topic, or anything AI and Data.
  prefs: []
  type: TYPE_NORMAL
- en: Drop me an email at ***davidfarrugia53@gmail.com*** should you wish to get in
    touch.
  prefs: []
  type: TYPE_NORMAL
- en: '[Linkedin](https://www.linkedin.com/in/david-farrugia/)'
  prefs: []
  type: TYPE_NORMAL
