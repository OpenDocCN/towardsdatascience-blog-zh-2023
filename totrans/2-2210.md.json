["```py\n# Everything <: Any!\nNumber <: Any\ntrue\n\nInt64 <: Number\ntrue\n\nInt64 <: AbstractString\nfalse\n```", "```py\n# we do not have to <: as Any, I just put this here to\n#  demonstrate how this is done.\n\nabstract type AbstractExample <: Any end\n\nstruct Example <: AbstractExample\n\nend\n```", "```py\nremainder(x::Integer) = 0\n\nremainder(x::AbstractFloat) = x - floor(x)\n```", "```py\nfuncexamp(x::Vector{Number}) = begin\n\nend\n```", "```py\njulia> myvec = [5, 10]\n2-element Vector{Int64}:\n  5\n 10\n\njulia> funcexamp(myvec)\nERROR: MethodError: no method matching funcexamp(::Vector{Int64})\n\nClosest candidates are:\n  funcexamp(::Vector{Number})\n   @ Main REPL[1]:1\n\nStacktrace:\n [1] top-level scope\n   @ REPL[3]:1\n\njulia> myvec = Vector{Number}([5, 10])\n2-element Vector{Number}:\n  5\n 10\n\njulia> funcexamp(myvec)\n```", "```py\nfuncexamp(x::Vector{<:Number}) = begin\n\nend\n```", "```py\nmutable struct Calculator\n   x::Real\n   y::AbstractString\nend\n```", "```py\nmutable struct Calculator{T}\n    x::T\n    y::AbstractString\nend\n```", "```py\nmutable struct Calculator{T <: Real}\n    x::T\n    y::AbstractString\nend\n```", "```py\nmutable struct Calculator{T <: Real}\n    x::T\n    y::String\nend\n```", "```py\nmutable struct Calculator{T <: Real}\n    x::T\n    y::String\n    function Calculator(x::Real, y::AbstractString)\n        new{typeof(x)}(x, string(y))\n    end\nend\n```", "```py\nInt64 <: Integer\ntrue\n```", "```py\nfunction subtypetree(t, level=1, indent=4)\n    level == 1 && println(t)\n    for s in subtypes(t)\n        println(join(fill(\" \", level * indent)) * string(s))\n        subtypetree(s, level+1, indent)\n    end\nend\nsubtypetree (generic function with 3 methods)\n```", "```py\njulia> subtypetree(Number)\nNumber\n    Complex\n    Real\n        AbstractFloat\n            BigFloat\n            Float16\n            Float32\n            Float64\n        AbstractIrrational\n            Irrational\n        Integer\n            Bool\n            Signed\n                BigInt\n......\n```"]