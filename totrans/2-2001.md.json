["```py\nclass MultiplicationError(Exception): ...\n\ndef multiply_str(x: str, n: int) -> str:\n    try:\n        xn = x * n\n    except TypeError as e:\n        raise MultiplicationError(\n            \"Can't multiply objects of \"\n            f\"{type(x).__name__} \"\n            f\"and {type(n).__name__} types\"\n            ) from e\n    if not isinstance(xn, str):\n        raise MultiplicationError(\n            f\"{type(x).__name__} multiplied by\"\n            f\" {type(n).__name__} \"\n            \"does not give str object by \"\n            f\"{type(xn).__name__}\"\n            ) from TypeError\n    return xn\n```", "```py\ntry:\n    return multiply_str(\"test\", \"it\")\nexcept TypeError as e:\n    print(e)\n    return multiply_str(\"test\", 1)\n```", "```py\ntry:\n    return multiply_str(\"test\", \"it\")\nexcept MultiplicationError as e:\n    print(e)\n    return multiply_str(\"test\", 1)\n```", "```py\nimport warnings\n\nclass MultiplicationError(Exception): ...\n\nclass MultiplicationWarning(Warning): ...\n\ndef multiply_str(x: str, n: int) -> str:\n    try:\n        xn = x * n\n    except TypeError as e:\n        raise MultiplicationError(\n            \"Can't multiply objects of \"\n            f\"{type(x).__name__} \"\n            f\"and {type(n).__name__} types\"\n            ) from e\n    if not isinstance(xn, str):\n        warnings.warn(\n            f\"{type(x).__name__} multiplied by\"\n            f\" {type(n).__name__} \"\n            \"does not give str object by \"\n            f\"{type(xn).__name__}\",\n            MultiplicationWarning\n            )\n    return xn\n```", "```py\nmy_string = 10\nfactor = 2\n\ntry:\n    mult_string = multiply_str(my_string, factor)\nexcept MultiplicationError as e:\n    mult_string = my_string\n    print(\n        \"Error during multiplication of \"\n        f\"{my_string} by {factor}: {e}\"\n    )\n```", "```py\nwith warnings.catch_warnings(record=True) as w:\n    mult_string = multiply_str(my_string, factor)\n```", "```py\nfrom typing import Callable\n\ndef catch(func: Callable) -> list[str]:\n    \"\"\"Catch issues and warnings using one function.\"\"\"\n    to_return = None\n    issues = []\n    with warnings.catch_warnings(record=True) as warning:\n        try:\n            to_return = func()\n        except Exception as e:\n            issues.append(f\"Exception: {e}\")\n        finally:\n            for w in warning:\n                issues.append(f\"Warning: {w.category.__name__}:\"\n                              f\" {w.message}\")\n    return to_return, issues\n```", "```py\n>>> class DivisionWarning(Warning): ...\n>>> def divdiv(x, y):\n...     warnings.warn(\"Watch out!\", DivisionWarning)\n...     return x / y / x\n>>> results = catch(lambda: divdiv(1, 0))[1]\n>>> results\n(None, ['Exception: division by zero', 'Warning: DivisionWarning: Watch out!'])\n```", "```py\nfrom collections import namedtuple\n\ndef catch(func: Callable) -> list[str]:\n    \"\"\"Catch issues and warnings using one function.\"\"\"\n    to_return = None\n    issues = []\n    with warnings.catch_warnings(record=True) as warning:\n        try:\n            to_return = func()\n        except Exception as e:\n            issues.append(f\"Exception: {e}\")\n        finally:\n            for w in warning:\n                issues.append(f\"Warning: {w.category.__name__}:\"\n                              f\" {w.message}\")\n    CatchReturn = namedtuple(\"CatchReturn\", \"to_return issues\")\n    return CatchReturn(to_return, issues)\n```", "```py\nreturn namedtuple(\"CatchReturn\", \"to_return issues\")(to_return, issues)\n```", "```py\n>>> class DivisionWarning(Warning): ...\n>>> def divdiv(x, y):\n...     warnings.warn(\"Watch out!\", DivisionWarning)\n...     return x / y / x\n>>> results = catch(lambda: divdiv(1, 0))\n>>> results\nCatchReturn(to_return=None, issues=['Exception: division by zero', 'Warning: DivisionWarning: Watch out!'])\n>>> results.to_return # None\n```", "```py\n>>> to_return, issues = catch(lambda: divdiv(1, 0))\n>>> to_return # None\n>>> issues\n['Exception: division by zero', 'Warning: DivisionWarning: Watch out!']\n```", "```py\ndef catch_all() -> list[str]:\n    \"\"\"Catch multiple issues and warnings using one function.\"\"\"\n    issues = []\n    def catch_one(func: Optional[Callable] = None) -> Callable:\n        to_return = None\n        if not func:\n            return issues\n        with warnings.catch_warnings(record=True) as warning:\n            try:\n                to_return = func()\n            except Exception as e:\n                issues.append(f\"{type(e).__name__}: {e}\")\n            finally:\n                for w in warning:\n                    issues.append(f\"{w.category.__name__}:\"\n                                  f\" {w.message}\")\n        return to_return\n    return catch_one\n```", "```py\n>>> all_catcher = catch_all()\n```", "```py\n>>> x1 = all_catcher(lambda: divdiv(1, 0))\n>>> x1 # this is None\n```", "```py\n>>> all_catcher()\n['ZeroDivisionError: division by zero', 'DivisionWarning: Watch out!']\n```", "```py\n>>> x2 = all_catcher(lambda: divdiv(1, 1))\n>>> x1\n1.0\n>>> all_catcher()\n['ZeroDivisionError: division by zero', 'DivisionWarning: Watch out!']\n```", "```py\n>>> all_catcher(lambda: divdiv(1, 0)) # None again\n>>> all_catcher(lambda: 1 + 1)\n2\n```", "```py\n>>> all_catcher() # doctest: NORMALIZE_WHITESPACE\n['ZeroDivisionError: division by zero',\n 'DivisionWarning: Watch out!',\n 'ZeroDivisionError: division by zero',\n 'ZeroDivisionError: division by zero',\n 'DivisionWarning: Watch out!']\n```", "```py\n>>> catcher1 = catch_all()\n>>> catcher2 = catch_all()\n>>> catcher1(lambda: 1 / 0)\n>>> catcher2(lambda: 1 * 2)\n2\n```", "```py\n>>> catcher1()\n['ZeroDivisionError: division by zero']\n>>> catcher2()\n[]\n```", "```py\nclass Catcher:\n    def __init__(self):\n        self.issues = []\n\n    def __or__(self, other):\n        to_return = None        \n        with warnings.catch_warnings(record=True) as w:\n            try:\n                to_return = other()\n            except Exception as e:\n                self.issues.append(f\"Exception: {e}\")\n            finally:\n                for ww in w:\n                    self.issues.append(f\"Warning: {ww.category.__name__}:\"\n                                       f\" {ww.message}\")\n        return to_return\n\n    def __call__(self):\n        return self.issues\n\n    def __repr__(self):\n        n = len(self.issues)\n        msg = \"A Catcher instance. Until now, it caught\"\n        if not n:\n            msg = f\"{msg} no exceptions and warnings.\"\n            return msg\n        msg = f\"{msg} {n} element{'s' if n > 1 else ''}.\"\n        return msg\n\ncatcher = Catcher()\n```", "```py\n>>> catcher\nA Catcher instance. Until now, it caught no exceptions and warnings.\n>>> catcher | (lambda: divdiv(1, 1))\n1.0\n>>> catcher\nA Catcher instance. Until now, it caught 1 element.\n>>> catcher()\n['Warning: DivisionWarning: Watch out!']\n>>> to_return = catcher | (lambda: divdiv(1, 1))\n>>> to_return\n1.0\n>>> catcher\nA Catcher instance. Until now, it caught 2 elements.\n```", "```py\nimport functools\n\nclass Printer:\n    def __ror__(self, other, **kwargs):\n        print(other, **kwargs)\n\nclass Ignorer:\n    def __ror__(self, other):\n        pass\n\nRun = functools.partial\nPrint = Printer()\nIgnore = Ignorer()\n```", "```py\n>>> to_return = catcher | Run(divdiv, 1, 1)\n>>> to_return\n1.0\n>>> to_return = catcher | (lambda: divdiv(1, 0))\n>>> to_return # None\n>>> catcher() # doctest: NORMALIZE_WHITESPACE\n['Warning: DivisionWarning: Watch out!',\n 'Warning: DivisionWarning: Watch out!',\n 'Warning: DivisionWarning: Watch out!']\n```", "```py\n>>> catcher | Run(divdiv, 0, 0) | Print\nNone\n>>> catcher\nA Catcher instance. Until now, it caught 7 elements.\n>>> catcher() # doctest: NORMALIZE_WHITESPACE\n['Warning: DivisionWarning: Watch out!',\n 'Warning: DivisionWarning: Watch out!',\n 'Warning: DivisionWarning: Watch out!',\n 'Exception: division by zero',\n 'Warning: DivisionWarning: Watch out!',\n 'Exception: division by zero',\n 'Warning: DivisionWarning: Watch out!']\n```", "```py\n>>> catcher | Run(divdiv, 0, 0) | Ignore\n>>> catcher\nA Catcher instance. Until now, it caught 9 elements.\n```"]