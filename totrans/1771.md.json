["```py\npip install tensorflow tensorflow-recommenders tensorflow-datasets\n```", "```py\nimport tensorflow_datasets as tfds\nimport tensorflow_recommenders as tfrs\nimport tensorflow as tf\n\nratings = (\n    tfds.load(\"movielens/100k-ratings\", split=\"train\")\n    .map(lambda x: {\n        \"movie_title\": x[\"movie_title\"],\n        \"user_id\": x[\"user_id\"],\n    })\n    .shuffle(10000)\n)\n\nratings_df = tfds.as_dataframe(ratings)\n```", "```py\nembedding_dimension = 32\n\nuser_model = tf.keras.Sequential([\n  tf.keras.layers.StringLookup(vocabulary=ratings_df[\"user_id\"].unique()),\n  tf.keras.layers.Embedding(ratings_df[\"user_id\"].nunique() + 1, embedding_dimension)\n])\n\nmovie_model = tf.keras.Sequential([\n  tf.keras.layers.StringLookup(vocabulary=ratings_df[\"movie_title\"].unique()),\n  tf.keras.layers.Embedding(ratings_df[\"movie_title\"].nunique() + 1, embedding_dimension)\n])\n```", "```py\nclass MovielensModel(tfrs.Model):\n    def __init__(self, user_model, movie_model, task):\n        super().__init__()\n        self.movie_model = movie_model\n        self.user_model = user_model\n        self.task = task\n\n    def compute_loss(self, features, training=False):\n        user_embeddings = self.user_model(features[\"user_id\"])\n        positive_movie_embeddings = self.movie_model(features[\"movie_title\"])\n\n        return self.task(user_embeddings, positive_movie_embeddings)\n```", "```py\nfeatures = {\n    \"user_id\": [\"A\", \"B\", \"C\"],\n    \"movie_title\": [\"G\", \"E\", \"M\"],\n}\n```", "```py\n# a TensorFlow dataset\nunique_movies = tf.data.Dataset.from_tensor_slices(ratings_df[\"movie_title\"].unique())\n```", "```py\ntask = tfrs.tasks.Retrieval()\n```", "```py\nmodel = MovielensModel(user_model, movie_model, task)\nmodel.compile(optimizer=tf.keras.optimizers.Adagrad(learning_rate=0.1))\n\nmodel.fit(ratings.batch(10000).cache(), epochs=5)\n```", "```py\nindex = tfrs.layers.factorized_top_k.BruteForce(model.user_model)\n\nindex.index_from_dataset(\n  tf.data.Dataset.zip((unique_movies.batch(100), unique_movies.batch(100).map(model.movie_model)))\n)\n```", "```py\n_, titles = index(tf.constant([\"99\"]))\nprint(f\"Recommendations for user 99: {titles[0, :3]}\")\n\n# Output:\n# Recommendations for user 99: [b'Sunset Park (1996)' b'Happy Gilmore (1996)' b'High School High (1996)']\n```", "```py\nx = np.array([1, 2, 10])\nnp.exp(x) / np.exp(x).sum() # softmax\n\n# Output:\n# array([1.23353201e-04, 3.35308764e-04, 9.99541338e-01])\n```"]