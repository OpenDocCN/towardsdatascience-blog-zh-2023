- en: openCypher* against any Relational Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/opencypher-against-any-relational-database-a3b2388579df](https://towardsdatascience.com/opencypher-against-any-relational-database-a3b2388579df)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Relational Databases as Graph Databases = Mindful (openCypher-2-SQL)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://victormorgante.medium.com/?source=post_page-----a3b2388579df--------------------------------)[![Victor
    Morgante](../Images/46b797426e0d0840c0d0f6dd76f46ae5.png)](https://victormorgante.medium.com/?source=post_page-----a3b2388579df--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a3b2388579df--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a3b2388579df--------------------------------)
    [Victor Morgante](https://victormorgante.medium.com/?source=post_page-----a3b2388579df--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a3b2388579df--------------------------------)
    ·8 min read·Jul 25, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f3e3a60ae9575d4bbb263f5fbe810297.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author. Yin Yang Moon. Modification of Royalty Free Photo by [Syed
    Ahmad](https://unsplash.com/@syedabsarahmad?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/eWD4O1Me4rM?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: A limited subset of openCypher graph queries over any relational database is
    the Mindful initiative. The queries are read-only and without metagraph queries
    at this stage. Mindful is a closed-source modification of [Microsoft’s openCypher
    to SQL transpiler](https://github.com/microsoft/openCypherTranspiler) under [the
    MIT license](https://github.com/microsoft/openCypherTranspiler/blob/master/LICENSE),
    and where Mindful generates SQL to operate over any relational/SQL database.
  prefs: []
  type: TYPE_NORMAL
- en: With that in mind…let us begin by understanding the scope…
  prefs: []
  type: TYPE_NORMAL
- en: “Any relational database” in the context of Mindful means that openCypher queries
    are converted to SQL that targets **any actual relational database**, rather than
    relational databases that have to have specially modified tables for graph-type-queries
    or that inject data as JSON into fields and performing graph-like queries over
    that JSON data.
  prefs: []
  type: TYPE_NORMAL
- en: openCypher queries are converted to SQL to run against any stock-standard relational
    database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Explanatory video:'
  prefs: []
  type: TYPE_NORMAL
- en: Applicability to your business — The Data Science
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may have an existing data warehouse, semantic layer or database that is
    a relational in nature and that uses SQL as the primary query language…and you
    want to query your data assets using graph queries.
  prefs: []
  type: TYPE_NORMAL
- en: Conversely you may have an urgent need to migrate from your existing graph database
    to a relational/SQL based database and need tools for the data migration testing
    and implementation. Mindful, an openCypher-to-SQL transpiler is designed to be
    the tool that you use to achieve your aims.
  prefs: []
  type: TYPE_NORMAL
- en: Extant implementations of graph queries over relational databases require special
    tables for effective node types and edge types (say tables with single column
    primary keys). The Mindful implementation allows you to run filter openCypher
    queries over your relational database where your tables have multi-column primary
    keys.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we expose how this can be done with no risk to your existing
    relational data stack, by adopting a data science strategy where meta-information
    about the homomorphic graph structure of your relational data is stored within
    JSON in the comments section of your DDL. For instance, ORACLE, SQL Server, PostgreSQL
    and most mainstream relational databases support comments against the meta-data/DDL.
  prefs: []
  type: TYPE_NORMAL
- en: In effect, you turn your relational data stack into a graph-compatible data
    stack by documenting your database using the tools provided, as standard, in your
    existing database/warehouse or semantic layer.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s dive into the data science and database theory that makes this work…
  prefs: []
  type: TYPE_NORMAL
- en: Being Mindful
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It seems clear that the modern database management systems are characterised
    by the following notions that we will explore:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Any relational database can be viewed as a graph database or a relational
    database depending on one’s point of view (as below); and
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Database schema are omnipresent once a database is in use. E.g. Even previously
    schemaless-promoting graph-database-businesses such as [Neo4j are starting to
    talk ‘schema’](https://neo4j.com/developer-blog/describing-property-graph-data-model/).
  prefs: []
  type: TYPE_NORMAL
- en: Being mindful of that positioning, we can picture all databases of merit in
    the future providing graph query languages ***and*** run-of-the-mill structured
    query language (SQL) queries.
  prefs: []
  type: TYPE_NORMAL
- en: Any Relational Database viewed as a Graph Database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The graph-relational paradigm, [relational knowledge graphs](/what-is-a-relational-knowledge-graph-bb747b27ff3f)
    and multi-model databases are nothing new, however to set the stage, take note
    of the homomorphic mapping of an Entity-Relationship Diagram and its corresponding
    Property-Graph Schema and vice versa:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6a872ad64fd4c16ec21eb6ddac3d92fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Homomorphic Mapping — Property Graph Schema to Entity-Relationship Diagram.
    Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: Our schema is for booking seats at a cinema to watch a film. A person can make
    a booking for one or more seats for a session to watch a film in a cinema; and
    where a seat is in a section and a row in that cinema.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4f625ec6112a7fc989a5b5c7f1ef7b2b.png)'
  prefs: []
  type: TYPE_IMG
- en: Sutterstock Image, 2187621947\. Licenced to Victor Morgante / FactEngine. [Royalty
    Free Standard Licence 2187621947](https://www.shutterstock.com/image-photo/diverse-group-people-enjoying-watching-movie-2187621947)
    on Shutterstock.
  prefs: []
  type: TYPE_NORMAL
- en: The database theory…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two aspects that make Mindful successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Foreign Key Relationships** and **Many-to-Many Tables** in otherwise relational
    databases are synonymous with **Edge Types** of graph databases;'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Graph query languages such as openCypher support queries which can be written
    in such a way that the queries are analogous with SQL queries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let us have a look at these things in isolation…
  prefs: []
  type: TYPE_NORMAL
- en: Foreign Keys and Many-to-Many Tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Foreign Key <-> Edge Type**'
  prefs: []
  type: TYPE_NORMAL
- en: Foreign keys relationships in relational databases have a 1:1 mapping with their
    corresponding Edge Type within a property graph schema.
  prefs: []
  type: TYPE_NORMAL
- en: In our schema each Row record within a table named, Row, has a foreign key reference
    to the Cinema record in the ‘Cinema’ table, representing the cinema that the row
    ‘IS IN’.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/283b3889c8fe08c922063d3f42c2dd13.png)'
  prefs: []
  type: TYPE_IMG
- en: Foreign Key Reference in an Entity-Relationship Diagram. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: …there is a corresponding Edge Type in our property graph schema.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ffc13811f679e7b8034259d55d73681c.png)'
  prefs: []
  type: TYPE_IMG
- en: Edge Type in a Property Graph Schema. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: …In our DDL (Database Definition Language), this can easily be represented by
    a piece of JSON (JavaScript Object Notation) representing the “IS_IN” label of
    the property graph schema, embedded as a comment/documentation against the corresponding
    Foreign Key reference definition in the CREATE TABLE DDL statement for the ‘Row’
    table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '…we can view the homomorphism between the relational and graph views as a morphing
    animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7277ccb0652ecad3458aa7b126fc073b.png)'
  prefs: []
  type: TYPE_IMG
- en: Morphism between Foreign Key Relationship and Edge Type. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: '**Many-to-Many Table <-> Edge Type**'
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, many-to-many join tables in relational databases have a morphism
    to their corresponding edge type within a property graph schema of a traditional
    graph database.
  prefs: []
  type: TYPE_NORMAL
- en: In our schema a booking may have many seats, and a seat (over its lifetime)
    may have many bookings.
  prefs: []
  type: TYPE_NORMAL
- en: Note that in our schema, the primary keys of the ‘Booking’ and ‘Seat’ tables
    are multi-column, and our Primary Key on the ‘BookingHasSeat’ many-to-many join
    table has seven columns.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c6127e58561036a7741bf9f14fa888a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Many-to-Many Join Table in an ER Diagram. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: …there is a corresponding edge type, labelled ‘HAS’, between the Booking and
    Seat node types in the property graph schema view.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6486f14c401d5d931ab4ff57d670db84.png)'
  prefs: []
  type: TYPE_IMG
- en: Edge Type in a Property Graph Schema. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: …we can easily capture the ‘HAS’ label as JSON within a comment against the
    Primary Key of the ‘BookingHasSeat’ table within the DDL of the CREATE TABLE statement
    of the table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '…we can view this homomorphism between the relational and graph views as a
    morphing animation too:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/abe388d3b2d5ea6edfe25f192801da0a.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Architecture**'
  prefs: []
  type: TYPE_NORMAL
- en: The plumbing of Mindful then becomes fairly straightforward to understand. With
    a suitable morphism mapped from a relational schema to a graph schema, and where
    we can store the meta-information about the morphism within the DDL of the relational
    database itself, we have a very simple mechanism by which to be able to write
    openCypher queries over a relational database…because in effect the metamodel
    of a relational database has a homomorphism to the metamodel of a graph database
    approaching an isomorphism. I.e. They are practically conceptually the same when
    viewed through a suitable lense.
  prefs: []
  type: TYPE_NORMAL
- en: Morphism — openCypher to SQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: …a tale of two types of query
  prefs: []
  type: TYPE_NORMAL
- en: 'Graph query languages have two types of query:'
  prefs: []
  type: TYPE_NORMAL
- en: Filtering Queries; and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Meta-Graph/Graph Traversal Queries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A meta-graph query is a type of query that finds paths, relationships or structures
    within the ‘graph’ (or the model) of a property graph schema.
  prefs: []
  type: TYPE_NORMAL
- en: 'Filtering queries, on the other hand, filter out data from the superset of
    all data in a database. E.g. In natural language: “What cinemas did Peter make
    a booking for?”'
  prefs: []
  type: TYPE_NORMAL
- en: We are most interested in filtering queries at this stage, because that is where
    the Mindful code is at, but a meta-graph query might ask the question, otherwise
    presented in natural language, “What is the shortest path between a person, Peter,
    and the cinema he made a booking for?”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pictorially, we can see that for our schema, the shortest path is from Person,
    to Booking, to Session, to Cinema, as below (rather than Person-Booking-Seat-Row-Cinema):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7e93b4419851aa009306fc07eca31620.png)'
  prefs: []
  type: TYPE_IMG
- en: Shortest Path — Person to Cinema — Meta-Graph/Graph Traversal. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: For our purposes here though…we want filtering queries and because openCypher
    filtering queries have a morphism to SQL queries, and where **standard SQL does
    not support meta-graph queries**.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s Query using openCypher
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Supposing that we want to know which film the person with login-name, “Peter”,
    saw on which date and time at which cinema on which seat letter and row number…we
    can write the following openCypher query for our schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MATCH (p:Person)<-[:IS_FOR]-(b:Booking)-[:HAS]->(seat:Seat)-[:IS_IN]->(:Row)-[:IS_IN]->(c:Cinema),
    (b)-[:IS_FOR]->(s:Session)-[:IS_FOR]->(f:Film)'
  prefs: []
  type: TYPE_NORMAL
- en: WHERE p.LoginName = ‘Peter’
  prefs: []
  type: TYPE_NORMAL
- en: RETURN p.LoginName, f.Name, s.DateTime, seat.Letter, seat.RowNr, c.CinemaName**
  prefs: []
  type: TYPE_NORMAL
- en: It is a filter type query because we are filtering the results down to those
    where the person’s login-name is “Peter”.
  prefs: []
  type: TYPE_NORMAL
- en: '…now let us run the query over a relational database using software hooked
    up to Mindful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f70c7dd3285950b2f9736e61ffbe4ea1.png)'
  prefs: []
  type: TYPE_IMG
- en: openCypher Query over a Relational Database — Results. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The microsoft openCypher to SQL transpiler (and Mindful) at this stage produces
    quite laborious SQL which I will not produce here, but enough to say that the
    equivalent SQL query is quite long by comparison to the openCypher query. Here’s
    an equivalent SQL query for our schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping it up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, it is as simple as that. We have shown a homomorphism between relational
    and graph schema such that software can be written such that openCypher queries
    (filter-type) can be executed over any relational database suitably configured,
    and where the openCypher is converted to SQL.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading. As time permits I will write more on graph databases, relational
    databases, graph queries and homomorphism.
  prefs: []
  type: TYPE_NORMAL
- en: — — — — — — —
  prefs: []
  type: TYPE_NORMAL
- en: '*Mindful openCypher queries are read-only and without meta-graph queries at
    this stage.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Attribution: The schema in this article is derived from that originally shared
    open-source under the [ActiveFacts examples github page of Data Constellation](https://github.com/cjheath/activefacts-examples/tree/master/orm)
    under a [MIT licence](https://github.com/cjheath/activefacts-examples/blob/master/LICENSE.txt).'
  prefs: []
  type: TYPE_NORMAL
- en: — — — — — — — — — — — — — end — — — — — — — — — — -
  prefs: []
  type: TYPE_NORMAL
