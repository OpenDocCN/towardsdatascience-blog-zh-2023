- en: Generating Synthetic Data with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/generating-synthetic-data-with-python-ea15fd0555ee](https://towardsdatascience.com/generating-synthetic-data-with-python-ea15fd0555ee)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A Comprehensive Guide to Creating Synthetic Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://iffatm.medium.com/?source=post_page-----ea15fd0555ee--------------------------------)[![Iffat
    Malik](../Images/7be3b651053507de2077b3c3c9d3a408.png)](https://iffatm.medium.com/?source=post_page-----ea15fd0555ee--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ea15fd0555ee--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ea15fd0555ee--------------------------------)
    [Iffat Malik](https://iffatm.medium.com/?source=post_page-----ea15fd0555ee--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ea15fd0555ee--------------------------------)
    ·14 min read·Jul 31, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a17fd93d1fcd31d058aef3ac14afca95.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: We keep hearing time and again about the pivotal role that data plays in driving
    growth, innovation, and competitiveness. It has become the bedrock for success
    across all industries. In essence, data has become the foundation of our every
    endeavour, from crafting technical blogs, educational content, and testing products
    or debugging software to explore the complexities of AI/ML training models and
    algorithms, data lies at the heart of all these tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining precise data that perfectly fit various needs and interests can be
    a Herculean task. Searching the internet for the exact data you need can be both
    frustrating and time-consuming. Even if you manage to find suitable data, the
    process of cleaning and processing it may demand valuable time, resources, and
    expenses. Moreover, privacy concerns, data sensitivity, copyrights, and regulatory
    restrictions often stand as significant barriers. For example, datasets containing
    sensitive information like medical data, financial records data, or obtaining
    a demo dataset from a copyrighted website, etc.
  prefs: []
  type: TYPE_NORMAL
- en: In situations like these, synthetic data comes to save the day! In this article,
    we’ll explore what synthetic data is all about and how you can generate it in
    Python using 2 different libraries.
  prefs: []
  type: TYPE_NORMAL
- en: What is synthetic data?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Synthetic data, according to [Wikipedia](https://en.wikipedia.org/wiki/Synthetic_data),
    is data that is artificially generated instead of being derived from real-world
    events. In the simplest language,
  prefs: []
  type: TYPE_NORMAL
- en: Synthetic Data = Fake Data
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It is a replication of real data that may maintain its resemblance without disclosing
    any specific information about real individuals, situations, or entities. You
    might have already heard different terms, including computer-generated data, artificial
    data, AI-generated data, or simulated data, but essentially, they all are more
    or less the same - Fake Data.
  prefs: []
  type: TYPE_NORMAL
- en: Why is synthetic data required?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may wonder why we need synthetic data when we already have plenty of real-world
    data. It is valuable for various reasons, it allows us to create additional data
    that looks like real data but doesn’t contain any real information about people
    or situations. Synthetic data helps us protect privacy (where real data cannot
    be revealed to others), tackles data scarcity(where suitable data is limited or
    unavailable for analysis, or research), and enables testing of AI/ML models without
    relying on sensitive/restricted real data or to test a very specific behaviour
    under control conditions.
  prefs: []
  type: TYPE_NORMAL
- en: There are many other instances, where synthetic data may be needed. For example,
    real data may be hard or expensive to acquire, or it may have too few data points
    (the dataset is not large enough or it does not contain a sufficient number of
    data samples to effectively train a model, obtain significant conclusions, or
    achieve accurate results)
  prefs: []
  type: TYPE_NORMAL
- en: Consider a bank that wants to predict credit risk for its customers in the lending
    division. They need historical data, including credit behaviour, repayment history,
    income, name, contact, and other relevant details. However, due to data privacy
    concerns and adherence to data protection regulations like [GDPR](https://gdpr.eu/what-is-gdpr/),
    along with limited past data availability and high data acquisition costs, they
    may lack enough data for training a model or drawing conclusions through data
    analysis.
  prefs: []
  type: TYPE_NORMAL
- en: With only a small amount of real data, capturing the complexities and creditworthiness
    patterns becomes difficult, leading to potential inaccuracies in predictions.
    To address this, the bank can generate synthetic datasets resembling real customers’
    characteristics and credit behaviours. This improves model performance, reduces
    overfitting risk, and provides more accurate predictions, enabling the bank to
    make informed and reliable credit decisions.
  prefs: []
  type: TYPE_NORMAL
- en: How to generate synthetic data?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we are more familiar with what synthetic data is and why it is needed,
    let’s move on to the next step: How to generate it? Synthetic data can primarily
    be generated in two ways,'
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. By duplicating portions of actual data and using it as a reference,**'
  prefs: []
  type: TYPE_NORMAL
- en: Creating variations of existing real data by applying transformations or modifications
    to the original dataset. This process is often referred to as [data augmentation](https://www.mygreatlearning.com/blog/understanding-data-augmentation/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, in text data, you can introduce minor alterations such as randomly
    inserting or deleting text, rephrasing sentences while keeping the core meaning
    intact, etc. to expand the dataset size.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2\. By creating an entirely new dataset from scratch**,'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can generate entirely new data points from scratch based
    on certain criteria.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This method is commonly used when dealing with sensitive or private data, as
    it ensures that no real data is exposed in the synthetic dataset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both approaches have their merits and can be chosen based on the specific requirements
    and goals of the data generation task such as the availability of real data, data
    privacy concerns, the complexity of the data, and the intended use of the synthetic
    dataset. For this article, we will be using the second approach.
  prefs: []
  type: TYPE_NORMAL
- en: Scenario
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine that we need to create a customer table with all the necessary information
    for conducting a credit risk analysis. Below is a list of fields I intend to create,
  prefs: []
  type: TYPE_NORMAL
- en: '***Customer ID***: A unique identifier for each customer in the table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Customer Name***: Name of the customer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Age***: Age of the customer, as it can be a relevant factor in credit risk
    assessment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Income***: Customer’s income level, which is crucial for evaluating their
    ability to repay the loan amount.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Credit Score***: Customer’s creditworthiness based on their credit history.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Debt-to-Income Ratio***: The ratio of the customer’s total debt to their
    income, which shows their financial stability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Employment Status***: Customer’s employment status - employed, unemployed,
    self-employed, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Loan Amount***: The loan amount customer is applying for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Loan Term***: The duration of time a cuatomer has to repay a loan. For example,
    if a loan has a term of 36 months, the customer will have to repay the loan within
    a period of 36 months. The loan term influences the repayment schedule, as longer
    terms may result in lower monthly payments but higher overall interest, while
    shorter terms may have higher monthly payments but lower overall interest.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Payment History***: The customer’s past payment behaviour on loans and credit
    accounts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Number of Dependents***: The number of people financially dependent on the
    customer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Python, you can find various libraries for creating synthetic data. They
    all offer different levels of complexity and functionality for generating synthetic
    data. Depending on your requirements, you can choose the one that best suits your
    needs. Always make sure to check,
  prefs: []
  type: TYPE_NORMAL
- en: Official documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Community support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for the most up-to-date information on these libraries. In this article, we’ll
    be using the following Python libraries,
  prefs: []
  type: TYPE_NORMAL
- en: Faker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Random
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking the Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we begin coding, let’s first understand the libraries we are going to
    use,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '***Faker*** - It’s a Python library that generates synthetic data, it offers
    a variety of functions to create real-looking personal information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***random*** - It’s a standard Python library that provides functions to generate
    random data. It is most commonly used to generate random integers, floating-point
    numbers, and make random choices from a list of elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Pandas*** - It’s a popular Python library for data manipulation, including
    tasks like data cleaning, filtering, grouping, merging, etc. It’s designed to
    handle structured data, such as tables and time series data, offering powerful
    functions for efficient data analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***typing*** - It’s a Python library that provides tools for adding type hints
    to your code. Type hints help improve code clarity and readability by specifying
    the expected types of variables and function parameters. It was introduced in
    Python 3.5'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let’s start coding! The first step is to create a *Faker* instance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Why do we need it? Well, a *Faker* instance serves as a *generator* that can
    create various types of data. A *generator* is an object in Python that produces
    a sequence of values, one at a time, as requested. You can read more about it
    here,
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/swlh/writing-memory-efficient-programs-using-generators-in-python-49854bb57da6?source=post_page-----ea15fd0555ee--------------------------------)
    [## Writing Memory Efficient Programs Using Generators in Python.'
  prefs: []
  type: TYPE_NORMAL
- en: The basic introduction to Python’s Generator Function and Generator Expression.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/swlh/writing-memory-efficient-programs-using-generators-in-python-49854bb57da6?source=post_page-----ea15fd0555ee--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: By using functions provided by *Faker*, you can easily generate data that looks
    just like the real thing! You can also specify the locale when setting up the
    *Faker* instance. Locale means a specific place or country that has its own unique
    culture, language, and way of presenting any information. When we set the locale
    to a particular region, *Faker* generates data that matches the characteristics
    of that place, like names and addresses that are common in that country.
  prefs: []
  type: TYPE_NORMAL
- en: In the code above, using *“en_GB”* allows us to access functions tailored for
    the UK (United Kingdom), providing location-specific data.
  prefs: []
  type: TYPE_NORMAL
- en: Now, for the next step in coding, let’s create a function that generates all
    the required fields as per the given specifications.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the above code block,
  prefs: []
  type: TYPE_NORMAL
- en: We have created a function *‘generate_customer_data’* that takes one argument,
    *‘num_records’*, which represents the number of synthetic customer records we
    want to generate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The *‘(num_records: int)’* specifiesa tying hint that the function expects
    an integer as this argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the *‘generate_customer_data’* function, we are creating a dictionary
    *‘customer_data’,* which will hold the synthetic data for each customer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The *‘customer_data: Dict[str, list]’* indicates that the dictionary’s *keys*
    will be strings, and the corresponding *values* will be *lists*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use typing hints to specify the expected data types for better understanding
    and readability.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: let’s understand the first line of code from the code block above,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, *‘customer_id’* is key and the corresponding value is a *list*. This line
    of code generates a *list* of customer IDs using the ‘*fake.aba()’* method from
    the *Faker* library. This method randomly generates a 9-digit number, which we
    will be using as a unique customer ID.
  prefs: []
  type: TYPE_NORMAL
- en: If you notice, it’s a single line of code, often referred to as *‘one-liners’*
    in Python*.* Well, here it’s called *List Comprehension*, a short and concise
    way to write *lists* in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ea52047e2257d4d6b39328123437f780.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by author: common syntax of a list comprehension'
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about various types of *Comprehensions* supported in Python
    here,
  prefs: []
  type: TYPE_NORMAL
- en: '[](/comprehensions-and-generator-expression-in-python-2ae01c48fc50?source=post_page-----ea15fd0555ee--------------------------------)
    [## Comprehensions and Generator Expression in Python'
  prefs: []
  type: TYPE_NORMAL
- en: To understand Python's Comprehension capabilities, it's important to understand
    the concept of comprehension at first…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/comprehensions-and-generator-expression-in-python-2ae01c48fc50?source=post_page-----ea15fd0555ee--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 📌 **Side Note**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the second line of the code *for* loop, I’ve used the *‘_’* *(underscore)*
    instead of *‘i’*. Both approaches are correct, but using the *‘_’* is a more common
    and preferred practice when we don't intend to use the loop variable (in this
    case, *‘i’* is a loop variable).
  prefs: []
  type: TYPE_NORMAL
- en: It's a clearer way to indicate that the loop variable is not relevant or not
    used within the comprehension. This makes the code more readable and standard,
    helping others easily understand your code. If you use *‘i’* as the loop variable,
    it might suggest that it has a purpose, leading to confusion and unnecessary variable
    assignments. So,
  prefs: []
  type: TYPE_NORMAL
- en: When you don't need the loop variable, it's considered a good practice to use
    the underscore as a placeholder, making your code cleaner and more concise.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Having mentioned that, since I’m writing a beginner-friendly article, I’ve opted
    to use the loop variable. Nevertheless, it’s essential to pass on the best approach
    as well!
  prefs: []
  type: TYPE_NORMAL
- en: Moving on to our code, in a similar approach, I have generated synthetic information
    for all the fields required for the Customer table,
  prefs: []
  type: TYPE_NORMAL
- en: '***‘customer_name’: [fake.name() for name in range(num_records)]***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This generates a list of names for each customer using the *‘fake.name()’* method
    from the *Faker* library. This method is used to generate a random and synthetic
    name that looks like a real person’s name. It can create diverse names with first
    names and last names from various cultures and regions. Since at the beginning
    of the code we have set the locale to *‘en-GB’*, it ensures that the synthetic
    data closely resembles the United Kingdom.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '***‘age’: [random.randint(18, 70) for age in range(num_records)]***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This line generates a list of customers’ ages using the *‘random.randint()’*
    function. This function is used to generate a random integer between a specified
    range. You provide two numbers as arguments - the first is the minimum value of
    the and the second is the maximum value of the range. It then returns a random
    integer from that range, inclusive of the minimum and maximum values. In our case,
    this function generates a random age for each customer, ranging between *18* and
    *70,* including both *18* and *70* in the range.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/1e185831d581813f4ad5b3546fa15812.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by author: syntax of random.randint()'
  prefs: []
  type: TYPE_NORMAL
- en: '***‘income’: [random.randint(20000, 100000) for income in range(num_records)]***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This generates a list of random income levels using the *‘random.randint()’*
    function. As explained earlier each income is a random integer, ranging between
    *20,000* and *100,000,* including both *20,000* and *100,000* in the range.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '***‘credit_score’: [random.randint(300, 850) for score in range(num_records)]***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This generates a list of credit scores using the *‘random.randint()’* function.
    By now, you understand the process: it generates a random credit score for each
    customer, ranging between *300* and *850,* including both *300* and *850* in the
    range.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '***‘debt_to_income_ratio’: [round(random.uniform(0.1, 1.0), 2) for ratio in
    range(num_records)],***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This generates a list of debt-to-income ratios using the *‘random.uniform()’*
    function. This function helps in generating random decimal numbers between a given
    range. You provide two numbers as arguments: the lower limit and the upper limit,
    and the function then produces a random decimal number between those two values,
    inclusive of both the lower and upper limits. *‘round(random.uniform(0.1, 1.0),
    2)’* means each ratio is a random floating-point number between *0.1* and *1.0*,
    rounded to two decimal places.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/dff8442383220e254a762b1f37f56adb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by author: syntax of random.uniform()'
  prefs: []
  type: TYPE_NORMAL
- en: '‘***employment_status’: [random.choice([‘Employed’, ‘Unemployed’, ‘Self-employed’])
    for status in range(num_records)],***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This generates a list of employment status for each customer using the *‘random.choice()’*
    function. This function allows you to pick a random item from a list or any sequence
    of elements. You provide the list or sequence as an argument, and the function
    randomly selects and returns one element from that sequence. In our context, the
    status of each customer is randomly chosen from the given list of options: ‘*Employed’*,
    ‘*Unemployed’*, or *‘Self-employed’*.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/9f2466ed57f0b8fbf2e682802f3d8665.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by author: syntax of random.choice()'
  prefs: []
  type: TYPE_NORMAL
- en: '***‘loan_amount’: [random.randint(1000, 50000) for amount in range(num_records)],***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This generates a list of loan amounts for each customer using *‘random.randint()’*
    function. The loan amount for each customer is a random integer between *1,000*
    and *50,000*, including both *1,000* and *50,000* in the range.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '***‘loan_term’: [random.choice([12, 24, 36, 48, 60]) for term in range(num_records)],***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This line generates a list of loan terms using the *‘random.choice()’* function.
    As we have already discussed for *‘employment_status’,* theloan term for each
    customer is randomly chosen from the given list of options: *12*, *24*, *36*,
    *48*, or *60* months.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '***‘payment_history’: [random.choice([‘Good’, ‘Fair’, ‘Poor’]) for history
    in range(num_records)],***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This line generates a list of payment histories using the *‘random.choice()’*
    function. Each payment history is randomly chosen from the list of options: *‘Good’*,
    *‘Fair’*, or *‘Poor’*.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '***‘number_of_dependents’: [random.randint(0, 5) for dep in range(num_records)],***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This generates a list of numbers of dependents using the *‘random.randint()’*
    function. Each number of dependents is a random integer between *0* and *5*, including
    both *0* and *5* in the range.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This explanation was quite extensive, wasn’t it? Now, as we approach the end
    of the loop, once it has processed all the customers, we return the *‘customer_data’*
    dictionary containing the synthetic data.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have defined the necessary details for each field in the function,
    let’s move on to calling the function. But before that, we will set the total
    number of records we want to generate and store it in the variable *‘number_of_rows’*.
    With that done, we’ll proceed to call the *‘generate_customer_data’* function
    using this value. Here, we are generating *10000* synthetic records.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '*‘customer_data: Dict[str, list]’* indicates that the function returns the
    synthetic data in the form of a dictionary, where its *keys* will be *strings*,
    and the corresponding *values* will be *lists*.'
  prefs: []
  type: TYPE_NORMAL
- en: Moving on to the final part of the code, after extracting all the essential
    information, we have choices for what to do next. We can either export it to a
    *CSV, Excel* or *JSON* file or print it. However, it’s a good idea to keep the
    data in a pandas data frame. This lets you use it right away as well as in the
    future for data analysis. With a data frame, you can do different operations,
    clean and prepare the data, analyse it, and smoothly work with other libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the code block above, we are using the dictionary *‘customer_data’* which
    was returned by the function *‘generate_customer_data’* tocreate a pandas DataFrame
    *‘df_customer’. ‘df_customer: pd.DataFrame’* indicates that *‘df_customer’* is
    a variable of type *‘pd.DataFrame’,* which means it is a Pandas DataFrame.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, let’s save this data to a *CSV* file. Please note that by default,
    the file will be created in the same directory as your program,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have created *‘synthetic_customer_data.csv’* as an output file, and
    stored this to a variable *‘output_file’*. ‘*to_csv()’* will save Pandas DataFrame
    as a *CSV* file,
  prefs: []
  type: TYPE_NORMAL
- en: '*index=False* indicates that the index column of the DataFrame will not be
    included in the resulting *CSV* file. By default, it is set to *true*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*encoding=’utf-8''* specifies the character encoding to be used when writing
    the DataFrame to a *CSV* file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*header=”true”* includes the column names as the header row in the *CSV* file.
    By default, it is set to *true*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The purpose of this article was to introduce the basics of generating synthetic
    data using Python. With various libraries available, like scikit-learn, SDV, Gretel,
    CTGAN, faker, random, and more, you can generate data for diverse use cases efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: While synthetic data offers numerous benefits, it also has its drawbacks. Some
    common cons include possible inaccuracies in replicating real-world complexities,
    challenges in accurately representing rare events, and the potential introduction
    of biases if not created and validated carefully. The effectiveness of synthetic
    data generation relies on your specific requirements and the libraries available
    to you. Therefore, it is crucial to thoroughly evaluate your requirements and
    the capabilities of the available tools, as they directly influence the accuracy
    and usefulness of the generated synthetic data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some resources to get you started with synthetic data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Synthetic Data vs Real Data](https://research.aimultiple.com/synthetic-data-vs-real-data/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Synthetic Data - The Royal Society](https://royalsociety.org/-/media/policy/projects/privacy-enhancing-technologies/Synthetic_Data_Survey-24.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Faker Library](https://faker.readthedocs.io/en/master/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Random Library](https://python.readthedocs.io/en/stable/library/random.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Typing Hint](https://docs.python.org/3.5/library/typing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Cassie Kozyrkov](https://medium.com/u/2fccb851bb5e?source=post_page-----ea15fd0555ee--------------------------------),
    the Chief Decision Scientist at Google, has written an extensive introductory
    guide on synthetic data that is a must-read,'
  prefs: []
  type: TYPE_NORMAL
- en: '[What is synthetic data?](/what-is-synthetic-data-e4820ccebfcf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The synthetic data field guide](/the-synthetic-data-field-guide-f1fc59e2d178)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Why would you want synthetic data?](https://kozyrkov.medium.com/why-would-you-want-synthetic-data-5e919e2cbf0c)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[AI-generated synthetic data](/ai-generated-synthetic-data-913b73494062)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The pros and cons of synthetic data](https://kozyrkov.medium.com/the-pros-and-cons-of-synthetic-data-f44ebb4d9e98)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code used for this article is available on my [GitHub-Repository](https://github.com/PhoenixIM/Pure_Python/blob/master/Synthetic_Data_Generator.ipynb)
    and the resulting output file ‘*synthetic_customer_data.csv’* can be accessed
    [GitHub-Gist](https://gist.github.com/PhoenixIM/7ffda2f1c4d521f13a56ed9c3804fa31).
  prefs: []
  type: TYPE_NORMAL
- en: '[*Become a member and read every story on Medium*](https://medium.com/@iffatm/membership)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: Happy Learning!
  prefs: []
  type: TYPE_NORMAL
