- en: CRUD with Pinecone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/crud-with-pinecone-ee6b6f8b54e8](https://towardsdatascience.com/crud-with-pinecone-ee6b6f8b54e8)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Vector Database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A simple guide for getting started with vector database from the traditional
    database perspective
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://manfyegoh.medium.com/?source=post_page-----ee6b6f8b54e8--------------------------------)[![Manfye
    Goh](../Images/9ce9f554c8b025b26b204c29b59c80b7.png)](https://manfyegoh.medium.com/?source=post_page-----ee6b6f8b54e8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ee6b6f8b54e8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ee6b6f8b54e8--------------------------------)
    [Manfye Goh](https://manfyegoh.medium.com/?source=post_page-----ee6b6f8b54e8--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ee6b6f8b54e8--------------------------------)
    ·7 min read·May 8, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d72e74c9bf31f2efc4bedf9eb6ee2b42.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by Brett Sayles from Pexels
  prefs: []
  type: TYPE_NORMAL
- en: The rapid growth of machine learning applications and advancements in artificial
    intelligence have spurred the demand for specialized data storage solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Vector databases have emerged as a popular choice for handling large-scale,
    high-dimensional data due to their ability to perform efficient similarity searches
    and support complex data structures. [Pinecone](https://www.pinecone.io/) has
    become increasingly popular among developers and data scientists as a scalable
    and efficient vector database solution recently.
  prefs: []
  type: TYPE_NORMAL
- en: I found that there are lots of people teaching how to use Pinecone but there
    isn’t anyone describing it from a traditional database perspective, such as how
    it compares to a traditional SQL database.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will provide a clear understanding of CRUD (Create, Read,
    Update, and Delete) operations in Pinecone from a traditional database perspective.
    We will delve into the differences between vector and traditional databases, exploring
    how vector databases can be harnessed to optimize data management in modern applications.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this article is [available here](https://github.com/manfye/medium-publication/blob/main/Pinecone%20Medium%20Article.ipynb)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What is a Vector Database?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A vector database is a specialized database designed to store, manage, and query
    high-dimensional data represented as vectors. These databases are handy in applications
    that require efficient similarity searches, such as recommendation systems, image
    and text search engines, and natural language processing tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In a vector database, data points are represented as vectors in a high-dimensional
    space, and the relationships between them are measured using distance metrics,
    such as Euclidean distance, cosine similarity, or Manhattan distance. By indexing
    these vectors and optimizing search algorithms, vector databases can perform similarity
    searches rapidly, even with enormous datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike traditional databases that focus on relational or document-based storage,
    vector databases emphasize the importance of spatial relationships between data
    points. This unique focus enables vector databases to deliver high-performance,
    accurate search results in applications that demand quick identification of similar
    items within a dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, here is an illustration of how we interact with a vector database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f497acabb58e5d547cf70377f55d8ad2.png)'
  prefs: []
  type: TYPE_IMG
- en: Mode of operation between traditional and vector databases. Images by Author
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started with Pinecone
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After you had gained access to Pinecone, create new indexes with the following
    setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c8a6e0eb5e26d06db2a75924ccf91d80.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating new indexes. Images by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'State your index''s name and the dimensions needed. In my case, I will use
    the “manfye-test” and a dimension of 300 in my indexes. Click “Create Index” and
    the index will be created as below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ae9e98f153da7468af4c1eec7fffe218.png)'
  prefs: []
  type: TYPE_IMG
- en: Created Index. Images by Author
  prefs: []
  type: TYPE_NORMAL
- en: An indexes is like a table in SQL, where you can make your CRUD operation in
    the indexes just like SQL.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Before we begin with our CRUD operation, let’s gather all the required ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing the required packages which are pinecone-client which allows you
    to interact with pinecone and sentence_transformers which help you vectorise your
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can get your Pinecone **API key** and **Environment name** via the “API
    KEY” tab in the Pinecone dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f35543992bbaff821dd7689b56753492.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting API key and Environment name. Images by Author
  prefs: []
  type: TYPE_NORMAL
- en: Working with Pinecone Indexes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several functions on handling that you need to know before proceeding,
    just like setting up a SQL connection:'
  prefs: []
  type: TYPE_NORMAL
- en: a) Connecting to Pinecone Server and Indexes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: b) Exploring your indexes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The *describe_index_stats* is extremely useful especially when you want to know
    how much data is inside your indexes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Dataset Preparation**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Firstly, we will generate a dataset of complaints as below, this will be our
    main data to play with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: C — Create Data in Indexes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to create data in the vector database, we will first need to convert
    our data into a vector via a technique called vector embedding. There are multiple
    ways to do vector embedding, one of the famous ways is using OpenAI embedding
    API.
  prefs: []
  type: TYPE_NORMAL
- en: However, to not complicate this article, we will use SentenceTransformer packages
    to do the embedding. The package will automatically download the required models
    “*average_word_embeddings_glove.6B.300d*”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The code will create a column “question_vector” with the embedded vectors. Not
    that all the words in complains are converted into numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ef6c52672b60303b7779555c2f236caa.png)'
  prefs: []
  type: TYPE_IMG
- en: Resulted vectors. Images by Authors
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, upload the data (**upsert**) into the indexes via chunks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now check your indexes with the *index.describe_index_stats()*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note that the vector count already increased to 10, congratulation on uploading
    your dataset into the vector database.
  prefs: []
  type: TYPE_NORMAL
- en: R — Retrieving Vectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Read in vector context refer to two functions, the first one is the read function,
    where you pass the ID of your data and Pinecone will return you the stored vector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The data retrieval is easy, just use the *index.fetch([<IDs List>])*, just put
    in the list of IDs that you want to retrieve and Pinecone will return you the
    vectors.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second one consists of returning similar data that match your queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the code above, I asked Pinecone to find similar results on the “navigation
    button” and return me the top 5 most similar results (top_k = 5) as below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eb8290ee3ae0b05b14c4c45fd5a00497.png)'
  prefs: []
  type: TYPE_IMG
- en: Queries result by Pinecone. Images by Author
  prefs: []
  type: TYPE_NORMAL
- en: Note that by default Pinecone will not return you the values unless it is stated
    in the *index.query()* parameter *include_values=True*. From the result above,
    it is shown the similarity score and the id of the top 5 similar results.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next thing is to convert the result into a table and merged it back into
    our main database. The code is as below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting matched table is as below, clearly, complaint 1001 is about the
    navigation button with a similarity score of 0.81 and the rest have lower similarity
    scores, this might be due to the size of our dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7d173f3c1f7dfeb33c9c8f352214e91e.png)'
  prefs: []
  type: TYPE_IMG
- en: Retrived similar queries data frame. Images by Author
  prefs: []
  type: TYPE_NORMAL
- en: U — Updating Vectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For updating the existing vector, just repeat the create step with the intended
    updates vectors. Overwrite the data with the same ID with the upsert function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: D — Deleting Vectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To delete by IDs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To delete everything and have fun again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Limitation and Alternative to Pinecone
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While Pinecone offers an easy-to-use vector database that is suitable for beginners,
    it is important to be aware of its limitations. The free tier, which uses a p1
    Pod, allows for only about 1,000,000 rows of data in a 768-dimension vector. For
    larger-scale applications or more demanding use cases, this might not be sufficient.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, Pinecone’s paid tiers can be quite expensive, which may not be feasible
    for all users. As a result, you might want to explore other alternatives such
    as locally host [chroma](https://docs.trychroma.com/getting-started), or [Weaviate](https://weaviate.io/)
    before committing to a paid plan or expanding your application.
  prefs: []
  type: TYPE_NORMAL
- en: Words from Author
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In conclusion, this article has provided a comprehensive guide to understanding
    and performing CRUD operations with Pinecone from a traditional database perspective.
  prefs: []
  type: TYPE_NORMAL
- en: As the author, my aim was to demystify the process of working with vector databases
    and highlight how vector databases' unique features make them a powerful and efficient
    solution for managing high-dimensional data in machine learning and AI applications.
  prefs: []
  type: TYPE_NORMAL
- en: By walking you through the process of creating, reading, updating, and deleting
    data in a Pinecone index, I hope to have offered valuable insights on how to effectively
    manage and query data in a vector database. With this knowledge in hand, I hope
    you are now equipped to harness the power of vector databases in your own projects
    and applications.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, thank you for reading my articles. If you like to subscribe to Medium
    membership, please consider using my link below. It will provide me with great
    support in writing more articles.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://manfyegoh.medium.com/membership?source=post_page-----ee6b6f8b54e8--------------------------------)
    [## Join Medium with my referral link - Manfye Goh'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Manfye Goh (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: manfyegoh.medium.com](https://manfyegoh.medium.com/membership?source=post_page-----ee6b6f8b54e8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'If you like my article, here are more articles from me:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/geekculture/create-beautiful-diagrams-with-chatgpt-a91f479cdb27?source=post_page-----ee6b6f8b54e8--------------------------------)
    [## Create Beautiful Diagrams with ChatGPT'
  prefs: []
  type: TYPE_NORMAL
- en: Create and design a beautiful diagram using ChatGPT and Mermaid.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/geekculture/create-beautiful-diagrams-with-chatgpt-a91f479cdb27?source=post_page-----ee6b6f8b54e8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Pinecone Documentation](https://docs.pinecone.io/docs/query-data)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
