- en: Forget about SQLite, Use DuckDB Instead — And Thank Me Later
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/forget-about-sqlite-use-duckdb-instead-and-thank-me-later-df76ee9bb777](https://towardsdatascience.com/forget-about-sqlite-use-duckdb-instead-and-thank-me-later-df76ee9bb777)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introduction to DuckDB and its Python integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://polmarin.medium.com/?source=post_page-----df76ee9bb777--------------------------------)[![Pol
    Marin](../Images/a4f69a96717d453db9791f27b8f85e86.png)](https://polmarin.medium.com/?source=post_page-----df76ee9bb777--------------------------------)[](https://towardsdatascience.com/?source=post_page-----df76ee9bb777--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----df76ee9bb777--------------------------------)
    [Pol Marin](https://polmarin.medium.com/?source=post_page-----df76ee9bb777--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----df76ee9bb777--------------------------------)
    ·8 min read·Mar 16, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c7283a6d2ba1b4298e72e882280c3f4b.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Krzysztof Niewolny](https://unsplash.com/@epan5?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'We, programmers, tend to default to SQLite when we want to work on local environments
    with an embedded database. While that works fine most of the time, it’s like using
    a bicycle to travel 100 km away: probably not the best option.'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing DuckDB.
  prefs: []
  type: TYPE_NORMAL
- en: I first learned about DuckDB in September 2022, while in PyCon Spain at Granada.
    Now, after 6 months of using it, I can’t live without it. And I want to contribute
    to the community by providing my fellow programmers and data-related professionals
    an intro to this fantastic analytical database system.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this post, I’ll go over the next main points:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Intro to DuckDB: what it is, why should you use it and when.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DuckDB integration into Python.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get ready!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you can’t see the whole story, consider using my referral link to have unlimited
    access to all Medium’s stories: [https://medium.com/@polmarin/membership](https://medium.com/@polmarin/membership)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What is DuckDB?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you check DuckDB’s website[1], this is the first thing you see on their
    home page: *DuckDB is an in-process SQL OLAP database management system.*'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try to decipher this sentence because it contains relevant info there.
  prefs: []
  type: TYPE_NORMAL
- en: '*In-process SQL* means that DuckDB’s features run in your application, not
    an external process to which your application connects. In other words: there
    is no client sending instructions nor a server to read and process them. SQLite
    works the same way, while PostgreSQL, MySQL…, do not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*OLAP* stands for OnLine Analytical Processing, and Microsoft defines it as
    a technology that organizes large business databases and supports complex analysis.
    It can be used to perform complex analytical queries without negatively affecting
    transactional systems[2]. Another example of an OLAP database management system
    is Teradata.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So basically, DuckDB is a great option if you’re looking for a serverless data
    analytics database management system. I highly suggest you check the fantastic
    peer-reviewed paper from Dr. Mark Raasveldt and Dr. Hannes Mühleisen [3]— the
    two most important DuckDB developers—to see the gap DuckDB is trying to fill.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, it’s a relational database management system (DBMS) that supports
    SQL. That’s why we’re comparing it with other DBMSs that share the same characteristics
    like SQLite or PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: Why DuckDB?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now know DuckDB’s role in the database industry. But why should we choose
    it above many other options we might have for a given project?
  prefs: []
  type: TYPE_NORMAL
- en: A one-size-fits-all doesn’t exist when it comes to database management systems
    and DuckDB is no exception. We’ll go over some of its features to help you decide
    when it’s a good idea for you to use it or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Long story short, it’s a high-performance tool. As shown on their GitHub page[4]:
    “*It is designed to be fast, reliable, and easy to use.*” Getting into more detail…'
  prefs: []
  type: TYPE_NORMAL
- en: '**It’s created to support analytical query workloads** (OLAP). The way they
    do it is by vectorizing query executions (columnar-oriented), while other DBMSs
    mentioned previously (SQLite, PostgreSQL…) process each row sequentially. This
    is why its performance increases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DuckDB adopts SQLite’s best feature: simplicity**. Simplicity in installation,
    and embedded in-process operation is what DuckDB developers chose for this DBMS
    after seeing SQLite’s success because of those features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Furthermore, DuckDB has no external dependencies, or server software to install,
    update, or maintain. As said, it’s completely embedded and this has the additional
    advantage of high-speed data transfer to and from the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Skilled creators**. They are a research group that created it to create a
    stable and mature database system. This is done through intensive and thorough
    testing, with a test suit that currently contains millions of queries, adapted
    from test suites of SQLite, PostgreSQL, and MonetDB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**It’s complete**. It supports complex queries in SQL, it provides transactional
    guarantees (the ACID properties you’ve surely heard of), it supports secondary
    indexes to speed up queries… And, what’s more important, it is deeply integrated
    into Python and R for efficient interactive data analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It also provides APIs for C, C++, Java…
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Free and Open Source**. It can’t get better than that.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are the official advantages.
  prefs: []
  type: TYPE_NORMAL
- en: 'But there are more, and I want to highlight one more: **DuckDB doesn’t have
    to be a Pandas substitute**. They can work hand in hand and, if you are a Pandas
    fan like me, you can make efficient SQL on Pandas with DuckDB.'
  prefs: []
  type: TYPE_NORMAL
- en: This is amazing.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more complete explanations on DuckDB’s website[1].
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When to use DuckDB?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It really will depend on your preferences but let’s go back to the paper its
    co-founders released [3] (I highly recommend you read it, it’s only 4 pages long
    and it’s pure gold).
  prefs: []
  type: TYPE_NORMAL
- en: 'They explain that there is a clear need for embeddable analytical data management.
    SQLite is embedded but it’s too slow if we want to use it for exhaustive data
    analysis. They keep on with “this needs stems from two main sources: Interactive
    data analysis and “edge” computing.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'So these are the top-2 use cases for DuckDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Interactive data analysis**. Most data professionals now use R or Python
    libraries like *dplyr* or *Pandas* in their local environments to work with the
    data they retrieve from a database. DuckDB offers the possibility of using SQL
    efficiency for our local development without risking performance. And you can
    reap these benefits without having to give up your favorite coding language (more
    on that later).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Edge computing**. Using Wikipedia''s definition “Edge computing is a distributed
    computing paradigm that brings computation and data storage closer to the sources
    of data.” [5] Using an embedded DBMS, it can’t get much closer than that!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DuckDB can be installed and used in different environments: Python, R, Java,
    node.js, Julia, C++… Here, we’ll focus on Python and you’ll shortly see how easy
    it is to use.'
  prefs: []
  type: TYPE_NORMAL
- en: Using DuckDB with Python (an intro)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and navigate to the desired directory, because we’re about
    to start. Create a new virtual environment — or not — and install DuckDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Remove or update the version if you want another one.*'
  prefs: []
  type: TYPE_NORMAL
- en: Onto the cool stuff now. To make things more interesting, I’ll be using real
    data I found on Kaggle about Spotify’s most streamed songs of all time[6]. And
    I’ll work on a typical Jupyter Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Licensing: [CC0: Public Domain](https://creativecommons.org/publicdomain/zero/1.0/)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'As the data we’ve obtained comes as two CSV files — Features.csv and Streams.csv
    — , we need to create a new database and load them in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Just like that, we’ve created a brand new database, added two new tables, and
    filled them with all the data. All with 4 simple lines of code (5 if we take the
    import into account). Cool huh?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s show the content from the streams table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1b14f38369e905b3b71441e75cd25fdc.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualization of the top-100 streamed songs of all time— Screenshot by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start doing some analytics tasks. For example, I want to know how many
    songs are there in the top 100 that are pre-2000\. Here’s one way to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/af4c8403ac158fe51d4fe5355108773a.png)'
  prefs: []
  type: TYPE_IMG
- en: Songs in the top-100 streamed of all time, from before the year 2000 — Screenshot
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'I mentioned before how easy it is to work with DuckDB and Pandas at the same
    time. Here’s a way to do the same but using Pandas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: All I’m doing is converting into a DataFrame the initial query and then applying
    the filter the Pandas way. The result is the same, but what about their performance?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Can you see that? The operation was rather easy: we were applying a simple
    filter to a 100-row table. But the execution time using Pandas is almost 4 times
    as much if we compare it with the DuckDB implementation.'
  prefs: []
  type: TYPE_NORMAL
- en: Imagine if we had tried a more exhaustive analytical operation… The improvement
    could be huge.
  prefs: []
  type: TYPE_NORMAL
- en: I think it doesn’t make much more sense to put more examples because this introduction
    to DuckDB would then be transformed into an SQL intro. And this is not what I
    want.
  prefs: []
  type: TYPE_NORMAL
- en: But feel free to play with any dataset you might have and start using SQL on
    your DuckDB database. You’ll quickly see its benefits.
  prefs: []
  type: TYPE_NORMAL
- en: 'To finish with this brief intro, let’s export the last result (pre-2000 songs)
    as a parquet file — because they are always a better alternative to traditional
    CSVs. Again, this will be extremely simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: All I’ve done is put the previous query within the brackets and DuckDB just
    copies the query’s result to the `old_songs.parquet` file.
  prefs: []
  type: TYPE_NORMAL
- en: '*Et voilà.*'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DuckDB has been a life changer for me and I think it could also be for many
    people out there.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this post was entertaining and informative. It wasn’t meant to be a tutorial
    or guide so that’s why I haven’t gotten a lot into code examples, but I believe
    there’s enough to understand the main points.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’d like to support me further, consider subscribing to Medium’s Membership
    through the link you find below: it won’t cost you any extra penny but it’ll help
    me through this process. Thanks a lot!'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@polmarin/membership?source=post_page-----df76ee9bb777--------------------------------)
    [## Join Medium with my referral link — Pol Marin'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Pol Marin (and thousands of other writers on Medium).
    Your membership fee directly supports Pol…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@polmarin/membership?source=post_page-----df76ee9bb777--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] [DuckDB](https://duckdb.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] [Online analytical processing (OLAP) — Azure Architecture Center](https://learn.microsoft.com/en-us/azure/architecture/data-guide/relational-data/online-analytical-processing)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] Mark Raasveldt and Hannes Mühleisen. 2019\. DuckDB: an Embeddable Analytical
    Database. In 2019 International Conference on Management of Data (SIGMOD ’19),
    June 30-July 5, 2019, Amsterdam, Netherlands. ACM, New York, NY, USA, 4 pages.
    [https://doi.org/10.1145/3299869.3320212](https://doi.org/10.1145/3299869.3320212)'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] [DuckDB — GitHub](https://github.com/duckdb/duckdb)'
  prefs: []
  type: TYPE_NORMAL
- en: '[5] [Edge computing — Wikipedia](https://en.wikipedia.org/wiki/Edge_computing)'
  prefs: []
  type: TYPE_NORMAL
- en: '[6] [Most Streamed Songs (of all time) — Kaggle](https://www.kaggle.com/datasets/amaanansari09/most-streamed-songs-all-time)'
  prefs: []
  type: TYPE_NORMAL
