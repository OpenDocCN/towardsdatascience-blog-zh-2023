- en: Docker for Data Science
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/from-chaos-to-consistency-docker-for-data-scientists-240372adff18](https://towardsdatascience.com/from-chaos-to-consistency-docker-for-data-scientists-240372adff18)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An introduction and application of Docker for Data Scientists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@egorhowell?source=post_page-----240372adff18--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----240372adff18--------------------------------)[](https://towardsdatascience.com/?source=post_page-----240372adff18--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----240372adff18--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----240372adff18--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----240372adff18--------------------------------)
    ·7 min read·May 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b9ddc7ca1478ae7fd299d341e9610337.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Ian Taylor](https://unsplash.com/@carrier_lost?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: But it works on my machine?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is a classic meme in the tech community, especially for Data Scientists
    who want to ship their amazing machine-learning model, only to learn that the
    production machine has a different operating system. Far from ideal.
  prefs: []
  type: TYPE_NORMAL
- en: However…
  prefs: []
  type: TYPE_NORMAL
- en: There is a solution thanks to these wonderful things called [**containers**](https://www.docker.com/resources/what-container/)
    and tools to control them such as [**Docker**](https://en.wikipedia.org/wiki/Docker_%28software%29)**.**
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we will dive into what containers are and how you can build and
    run them using Docker. The use of containers and Docker has become an industry
    standard and common practice for data products. As a Data Scientist, learning
    these tools is then an invaluable tool in your arsenal.
  prefs: []
  type: TYPE_NORMAL
- en: What is Docker?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker is a service that help build, run and execute code and applications in
    containers.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now you may be wondering, what is a container?
  prefs: []
  type: TYPE_NORMAL
- en: Ostensibly, a container is very similar to a [**virtual machine (VM)**](https://en.wikipedia.org/wiki/Virtual_machine).
    It is a small isolated environment where everything is self ‘contained’ and can
    be run on any machine. The primary selling point of containers and VMs is their
    portability, allowing your application or model to run seamlessly on any on-premise
    server, local machine, or on cloud platforms such as [**AWS**](https://aws.amazon.com/).
  prefs: []
  type: TYPE_NORMAL
- en: The main difference between containers and VMs is how they use their hosts computer
    resources. Containers are a lot more lightweight as they do not actively partition
    the hardware resources of the host machine. I will not delve into the full technical
    details here, however if you want to understand a bit more, I have linked a great
    article explaining their differences [here](https://www.freecodecamp.org/news/a-beginner-friendly-introduction-to-containers-vms-and-docker-79a9e3e119b/).
  prefs: []
  type: TYPE_NORMAL
- en: Docker is then simply a tool we use to create, manage and run these containers
    with ease. It is one of the main reasons why containers have become very popular,
    as it enables developers to easily deploy applications and models that run anywhere.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/248db54f5672b41ad6c9f1deb2b8ee83.png)'
  prefs: []
  type: TYPE_IMG
- en: Diagram by author.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Technical Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three main elements we need to run a container using Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dockerfile:** *A text file that contains the instructions of how to build
    a docker. image*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Image**: *A blueprint or template to create a Docker container.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Container:** *An isolated environment that provides everything an
    application or machine learning model needs to run. Includes things such as dependencies
    and OS versions.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/e10fb19dc6b93ce00b58c6d168f669ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Diagram by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also a few other key points to note:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Docker Daemon:** *A background process (*[*daemon*](https://en.wikipedia.org/wiki/Daemon_(computing))*)
    that deals with the incoming requests to docker.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Client:** *A shell interface that enables the user to speak to Docker
    through its daemon.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**DockerHub**](https://hub.docker.com/)**:** *Similar to GitHun, a place where
    developers can share their Docker images.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hombrew
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing you should install is **Homebrew** ([link here](https://brew.sh/)).
    This is dubbed as the ‘missing package manager for MacOS’ and is very useful for
    anyone coding on their Mac.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Homebrew, simply run the command given on their website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Verify Homebrew is installed by running `brew help`.
  prefs: []
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now with Homebrew installed, you can install docker by running `brew install
    docker`. Verify docker is installed by running `which docker` , the output should
    not rise any errors and look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Colima
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The final part, is it install [**Colima**](https://github.com/abiosoft/colima)**.**
    Simply, run`install colima` and verify it is installed with `which colima`. Again,
    the output should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now you might be wondering, what on earth is Colima?
  prefs: []
  type: TYPE_NORMAL
- en: Colima is a software package that enables [**container runtimes**](https://kubernetes.io/docs/setup/production-environment/container-runtimes/)
    on MacOS. In more laymen terms, Colima creates the environment for containers
    to work on our system. To achieve this, it runs a Linux virtual machine with a
    [**daemon**](https://en.wikipedia.org/wiki/Daemon_(computing)) that Docker can
    communicate with using the [**client-server model**](https://en.wikipedia.org/wiki/Client%E2%80%93server_model).
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternativetly, you can also install [**Docker desktop**](https://www.docker.com/products/docker-desktop/)
    instead of Colima. However, I prefer Colima for a few reasons: its free, more
    lightweight and I like working in the terminal!'
  prefs: []
  type: TYPE_NORMAL
- en: See this [blog post here](https://alexpearce.me/2022/07/colima-docker-desktop-replacement/)
    for more arguments for Colima
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Deploying With Docker Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Below is an example of how Data Scientists and Machine Learning Engineers can
    deploy their model using Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e3c5bb63da7980c4b0e39bfd3298c5ce.png)'
  prefs: []
  type: TYPE_IMG
- en: Diagram by author.
  prefs: []
  type: TYPE_NORMAL
- en: The first step is obviously to build their amazing model. Then, you need to
    wrap up all the stuff you are using to run the model, stuff like the python version
    and package dependencies. The final step is to use that requirements file inside
    the Dockerfile.
  prefs: []
  type: TYPE_NORMAL
- en: If this seems completely arbitrary to you at the moment don't worry, we will
    go over this process step by step!
  prefs: []
  type: TYPE_NORMAL
- en: Basic Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start by building a basic model. The provided code snippet displays a
    simple implementation of the [**Random Forest**](https://en.wikipedia.org/wiki/Random_forest)
    classification model on the famous [Iris dataset](https://www.kaggle.com/datasets/uciml/iris):'
  prefs: []
  type: TYPE_NORMAL
- en: '[Dataset from Kaggle with a CC0 licence.](https://www.kaggle.com/datasets/uciml/iris)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: This file is called `basic_rf_model.py` for reference.
  prefs: []
  type: TYPE_NORMAL
- en: Create Requirements File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have our model ready, we need to create a `requirement.txt` file
    to house all the dependencies that underpin the running of our model. In this
    simple example, we luckily only rely on the `scikit-learn` package. Therefore,
    our `requirement.txt` will simply look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can check the version you are running on your computer by the `scikit-learn
    --version` command.
  prefs: []
  type: TYPE_NORMAL
- en: Create Dockerfile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we can finally create our Dockerfile!
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in the same directiory as the `requirement.txt` and `basic_rf_model.py`,
    create a file named `Dockerfile`. Inside `Dockerfile` we will have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go over line by line to see what it all means:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FROM python:3.9`: *This is the base image for our image*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MAINTAINER egor@some.email.com`: *This indicates who maintains this image*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WORKDIR /src`: *Sets the working directory of the image to be src*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`COPY . .`: *Copy the current directory files to the Docker directory*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RUN pip install -r requirements.txt`: *Install the requirements from* `requirement.txt`
    *file into the Docker environment*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CMD ["python", "basic_rf_model.py"]`: *Tells the container to execute the
    command* `python basic_rf_model.py` *and run the model*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initiate Colima & Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next step is setup the Docker environment: First we need to boot up Colima:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After Colima has started up, check that the Docker commands are working by
    running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'It should return something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is good and means both Colima and Docker are working as expected!
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: the `docker ps` command lists all the current running containers.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Build Image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now it is time to build our first Docker Image from the `Dockerfile` that we
    created above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `-t` flag indicates the name of the image and the `*.*`tells us to build
    from this current directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we now run `docker images`, we should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e614fabc2418cc1e05331aee2b3dce81.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from author.
  prefs: []
  type: TYPE_NORMAL
- en: Congrats, the image has been built!
  prefs: []
  type: TYPE_NORMAL
- en: Run Container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After the image has been created, we can run it as a container using the `IMAGE
    ID` listed above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Because all it has done is run the `basic_rf_model.py` script!
  prefs: []
  type: TYPE_NORMAL
- en: Extra Information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This tutorial is just scratching the surface of what Docker can do and be used
    for. There are many more features and commands to learn to understand Docker.
    I great detailed tutorial is given on the Docker website that you can find [here](https://docker-curriculum.com/#docker-run).
  prefs: []
  type: TYPE_NORMAL
- en: 'One cool feature is that you can run the container in interactive mode and
    go into its shell. For example, if we run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You will enter the Docker container and it should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/18257aca7eddeef508e5f81ae6050810.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: We also used the `ls` command to show all the files in the Docker working directory.
  prefs: []
  type: TYPE_NORMAL
- en: Summary & Further Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker and containers are fantastic tools to ensure Data Scientists’ models
    can run anywhere and anytime with no issues. They do this by creating small isolated
    compute environments that contain everything for the model to run effectively.
    This is called a container. It is easy to use and lightweight, rendering it a
    common industrial practice nowadays. In this article, we went over a basic example
    of how you can package your model into a container using Docker. The process was
    simple and seamless, so is something Data Scientists can learn and pick up quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Full code used in this article can be found at my GitHub here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Software%20Engineering%20/docker-example?source=post_page-----240372adff18--------------------------------)
    [## Medium-Articles/Software Engineering /docker-example at main · egorhowell/Medium-Articles'
  prefs: []
  type: TYPE_NORMAL
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Software%20Engineering%20/docker-example?source=post_page-----240372adff18--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Another Thing!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----240372adff18--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  prefs: []
  type: TYPE_NORMAL
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----240372adff18--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Connect With Me!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**YouTube**](https://www.youtube.com/@egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**GitHub**](https://github.com/egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References & Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Docker website*: [https://www.docker.com/](https://www.docker.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Docker tutorial*: [https://docker-curriculum.com/](https://docker-curriculum.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*General tips for Docker*: [https://github.com/veggiemonk/awesome-docker](https://github.com/veggiemonk/awesome-docker)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
