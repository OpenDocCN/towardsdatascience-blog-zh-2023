- en: Running Jaffle Shop dbt Project in Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/jaffle-shop-dbt-docker-93a9b14532a4](https://towardsdatascience.com/jaffle-shop-dbt-docker-93a9b14532a4)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A containerised version of the popular Jaffle Shop dbt project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://gmyrianthous.medium.com/?source=post_page-----93a9b14532a4--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----93a9b14532a4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----93a9b14532a4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----93a9b14532a4--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----93a9b14532a4--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----93a9b14532a4--------------------------------)
    ·8 min read·Apr 28, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/90bb3052f4f1d0f374def43154a20afe.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Ryan Howerter](https://unsplash.com/@rhowerter?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/JXIFjYVbAS8?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: If you are new to data build tool (dbt) you have probably come across the so
    called Jaffle Shop, a project used for testing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: '`jaffle_shop` is a fictional ecommerce store. This dbt project transforms raw
    data from an app database into a customers and orders model ready for analytics.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- [Jaffle Shop GitHub project](https://github.com/dbt-labs/jaffle_shop)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: One fundamental issue I observed with the Jaffle Shop project is that it expects
    users, who may be newcomers to dbt, to configure and host a local database for
    the dbt models to materialize.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, I’ll demonstrate how to create a containerized version of
    the project using Docker. This will allow us to deploy a Postgres instance and
    configure the dbt project to read from and write to that database. I’ll also provide
    a link to a GitHub project I’ve created that will help you get all the services
    up and running in no time.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Subscribe to Data Pipeline**](https://thedatapipeline.substack.com/welcome)**,
    a newsletter dedicated to Data Engineering**'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Dockerfile and docker-compose.yml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s begin by defining the services we want to run through Docker. First, we’ll
    create a `[docker-compose.yml](https://github.com/gmyrianthous/jaffle_shop/blob/main/docker-compose.yml)`
    file where we'll define two services. The first service will be the Postgres database,
    and the second will be a custom service that we'll create in the next step using
    a Dockerfile.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The file specifies the version of Docker Compose being used (version 3.9). It
    defines two services, `postgres` and `dbt`, each with their own settings.
  prefs: []
  type: TYPE_NORMAL
- en: The `postgres` service is based on the official `postgres` Docker image version
    15.2-alpine. It sets the container name to `postgres`, maps port 5432 (the default
    port for Postgres) to the host machine, and sets environment variables for the
    Postgres user and password. The `healthcheck` section specifies a command to test
    if the container is healthy, and sets a timeout and retries for the check.
  prefs: []
  type: TYPE_NORMAL
- en: The `dbt` service specifies a `dbt` container of the Docker image of current
    directory (using a Dockerfile). It mounts the current directory as a volume within
    the container, and specifies that it depends on the `postgres` service, and will
    only start once the `postgres` service is healthy.
  prefs: []
  type: TYPE_NORMAL
- en: In order to containerize the Jaffle Shop project, we need to create a `[Dockerfile](https://github.com/gmyrianthous/jaffle_shop/blob/main/Dockerfile)`
    that installs the necessary dependencies for both Python and dbt, and ensures
    that the container remains active once the environment has been set up.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Configuring Postgres with dbt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To interact with dbt, we’ll use the dbt Command Line Interface (CLI). A directory
    containing a `[dbt_project.yml](https://github.com/gmyrianthous/jaffle_shop/blob/main/dbt_project.yml)`
    file is considered a dbt project by the dbt CLI.
  prefs: []
  type: TYPE_NORMAL
- en: We'll create one and specify some basic configurations, such as the dbt project
    name and the `profile` to use (which we'll create in the next step). Additionally,
    we'll specify the paths containing the various dbt entities and provide configuration
    about their materialization.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now the [](https://github.com/gmyrianthous/jaffle_shop/blob/main/profiles/profiles.yml)
    `[profiles.yml](https://github.com/gmyrianthous/jaffle_shop/blob/main/profiles/profiles.yml)`
    file is used to store dbt profiles. A profile consists of targets, each of which
    specifying the connection details and credentials for the database or the data
    warehouse.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This file defines a profile named `jaffle_shop` that specifies the connection
    details for a Postgres database running on a Docker container named `postgres`.
  prefs: []
  type: TYPE_NORMAL
- en: '`jaffle_shop`: This is the name of the profile. It''s an arbitrary name chosen
    by the user to identify the profile.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target: dev`: This specifies the default target for the profile, which in
    this case is named `dev`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`outputs`: This section lists the output configurations for the profile, with
    the default output configuration named `dev`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dev`: This specifies the connection details for the `dev` target, which uses
    a Postgres database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type: postgres`: This specifies the type of the output, which in this case
    is a Postgres database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host: postgres`: This specifies the hostname or IP address of the Postgres
    database server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user: postgres`: This specifies the username used to connect to the Postgres
    database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password: postgres`: This specifies the password used to authenticate with
    the Postgres database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`port: 5432`: This specifies the port number on which the Postgres database
    is listening.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dbname: postgres`: This specifies the name of the Postgres database to connect
    to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`schema: public`: This specifies the schema name to use when executing queries
    against the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`threads: 1`: This specifies the number of threads to use when running dbt
    tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jaffle Shop dbt models and seeds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The source data for Jaffle Shop project consists of csv files for customers,
    payments and orders. In dbt, we can load this data into our database through [seeds](https://github.com/gmyrianthous/jaffle_shop/tree/main/seeds).
    We then use this source data to build [dbt models](https://github.com/gmyrianthous/jaffle_shop/tree/main/models)
    on top of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example model that generates some [metrics for our customers](https://github.com/gmyrianthous/jaffle_shop/blob/main/models/customers.sql):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Running the services via Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let’s build and spin up our Docker services. To do so, we’ll simply need
    to run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The commands above will run a Postgres instance and then build the dbt resources
    of Jaffle Shop as specified in the repository. These containers will remain up
    and running so that you can:'
  prefs: []
  type: TYPE_NORMAL
- en: Query the Postgres database and the tables created out of dbt models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run further dbt commands via dbt CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running dbt commands via CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The dbt container, has built the specified models already. However, we can still
    access the container and run dbt commands via dbt CLI, either for new or modified
    models. To do so, we will first need to access the container.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command will list all active containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the id of `dbt` container, and then enter it when running the next command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The command above will essentially give you access to the container’s bash which
    means you are now able to run dbt commands.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note that since we have mounted the local directory to the running container,
    any changes in the local directory will be reflected to the container immediately.
    This means you are also able to create new models or modify existing ones and
    then go into the runnning container and build models, run tests, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Querying the dbt models on Postgres database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You are also able to query the postgres database and the dbt models or snapshots
    created on it. In the same way, we will have to enter the running postgres container
    in order to be able to query the database directly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then use `psql`, a terminal-based interface for PostgreSQL that allows
    us to query the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The two commands shared below can be used to list tables and views respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And you can now query dbt models via a `SELECT` query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Getting the full code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’ve created a GitHub repository you can clone on your local machine and run
    the containerised version Jaffle Shop dbt project quickly. You can find the project
    as well as the code shared in this tutorial in the following link.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/gmyrianthous/jaffle_shop?source=post_page-----93a9b14532a4--------------------------------)
    [## GitHub - gmyrianthous/jaffle_shop: This is a containerised version of Jaffle
    Shop dbt project'
  prefs: []
  type: TYPE_NORMAL
- en: This is a containerised version of the popular Jaffle Shop dbt project published
    by dbt Labs. You can use this project…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/gmyrianthous/jaffle_shop?source=post_page-----93a9b14532a4--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data build tool (dbt) is one of the rapidly growing technologies in modern data
    stacks. If you’re just starting to learn how to use dbt, I highly recommend experimenting
    with the Jaffle Shop project. It’s a self-contained project created by dbt Labs
    for testing and experimentation purposes.
  prefs: []
  type: TYPE_NORMAL
- en: dbt is a tool commonly used by data analysts and analytics engineers (in addition
    to data engineers), and it requires a connection to a database or data warehouse.
    However, many analysts might not be comfortable configuring and initializing a
    local database.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we demonstrate how to get started with dbt and run all the
    services required to materialize dbt models on a local Postgres database. I hope
    this tutorial will help you get your dbt project and database up and running as
    quickly as possible. If you experience any issues running the project, please
    let me know in the comments, and I’ll do my best to help you debug your code and
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 👉 [**Subscribe to Data Pipeline**](https://thedatapipeline.substack.com/welcome)**,
    a newsletter dedicated to Data Engineering**
  prefs: []
  type: TYPE_NORMAL
- en: 👇**Related articles you may also like** 👇
  prefs: []
  type: TYPE_NORMAL
- en: '[](/dbt-cli-model-selection-52ddd038d8b2?source=post_page-----93a9b14532a4--------------------------------)
    [## Model Selection For dbt CLI'
  prefs: []
  type: TYPE_NORMAL
- en: A complete cheatsheet for selecting specific models when running dbt commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'towardsdatascience.com](/dbt-cli-model-selection-52ddd038d8b2?source=post_page-----93a9b14532a4--------------------------------)
    [](/etl-vs-elt-68e221d78719?source=post_page-----93a9b14532a4--------------------------------)
    [## ETL vs ELT: What’s the Difference?'
  prefs: []
  type: TYPE_NORMAL
- en: A comparison between ETL and ELT in the context of Data Engineering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/etl-vs-elt-68e221d78719?source=post_page-----93a9b14532a4--------------------------------)
  prefs: []
  type: TYPE_NORMAL
