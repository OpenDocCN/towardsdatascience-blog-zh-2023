["```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import binom, multinomial\n%matplotlib inline\n```", "```py\n# Listing 1\n\nn = 5\np=[0.5, 0.3, 0.2]\nmult = multinomial(n=n, p=p)\nmult.pmf([3, 1, 1])\n\n# Output\n0.15\n```", "```py\nmultinomial.pmf([3, 1, 1], n=n, p=p)\n\n# Output\n0.15\n```", "```py\nnp.random.seed(2)\nmultinomial.rvs(n=n, p=p, size = 4)\n\n# Output\narray([[2, 3, 0],\n       [3, 1, 1],\n       [2, 2, 1],\n       [2, 2, 1]])\n```", "```py\n# Listing 2\n\nn = 5\nx1_array = np.arange(0, n+1)\nX1_mat, X2_mat = np.meshgrid(x1_array, x1_array)\nx3_array = n - X1_mat.flatten() - X2_mat.flatten()\n\nX_mat = np.array([X1_mat.flatten(), X2_mat.flatten(), x3_array]).T\nX_mat\n\n# Output\narray([[ 0,  0,  5],\n       [ 1,  0,  4],\n       [ 2,  0,  3],\n       [ 3,  0,  2],\n       [ 4,  0,  1],\n       [ 5,  0,  0],\n       [ 0,  1,  4],\n       [ 1,  1,  3],\n       ...\n```", "```py\nmultinomial(n, p).pmf(X_mat[X_mat[:, 0]==3]).sum()\n\n# Output\n0.3125\n```", "```py\nbinom.pmf(k=3,n=n, p=p[0])\n\n# Output\n0.31249999999999983\n```", "```py\n# Listing 3\n\nnp.random.seed(2)\nn = 5\np=[0.5, 0.3, 0.2]\nx = np.arange(n+1)\nsample = multinomial.rvs(n=n, p=p, size=100000)\npmf_binomial = binom.pmf(k = x,n = n, p = p[0])\nsample_marginal = sample[:, 0] \nvalues, counts = np.unique(sample_marginal, return_counts=True)\nprobs = counts / counts.sum()\n\nfig = plt.figure(figsize=(8, 6))\nplt.bar(values, probs, label='Marginal sample')\nplt.plot(x, pmf_binomial, marker='o', color='red',\n         label='Binomial distribution, n={}, p={}'.format(n, p[0]))\nplt.xlabel('$x_1$', fontsize = 18)\nplt.ylabel('Probability', fontsize=18)\nplt.ylim([0, 0.45])\nplt.legend(loc='best', fontsize = 15)\nplt.show()\n```", "```py\n# Listing 4\n\nn = 5\np=[0.5, 0.3, 0.2]\nx = np.arange(n+1)\n\nx1_array = np.arange(0, n+1)\nX1_mat, X2_mat = np.meshgrid(x1_array, x1_array)\nx3_array = n - X1_mat.flatten() - X2_mat.flatten()\nX_mat = np.array([X1_mat.flatten(), X2_mat.flatten(), x3_array]).T\n\npmf_mult = multinomial(n, p).pmf(X_mat)\npmf_binomial = binom.pmf(k = x, n = n, p = p[0])\npmf_grid = pmf_mult.reshape(6, 6)\n\nf, (ax1, ax2) = plt.subplots(2, 1, figsize=(9, 11))\nplt.subplots_adjust(hspace=0.4)\n\nheatmap = ax1.pcolor(pmf_grid, cmap='coolwarm')\nax1.set_xlabel('$x_1$', fontsize = 18)\nax1.set_ylabel('$x_2$', fontsize = 18)\n\nfor x1_pos in range(pmf_grid.shape[0]):\n    for x2_pos in range(pmf_grid.shape[1]):\n        ax1.text(x1_pos + 0.5, x2_pos + 0.5,\n                '%.5f' % pmf_grid[x2_pos, x1_pos],\n                 horizontalalignment='center',\n                 verticalalignment='center',\n                 )\n\nax1.set_yticks(np.arange(pmf_grid.shape[0])+0.5)\nax1.set_yticklabels(np.arange(pmf_grid.shape[0]))\n\nax1.set_xticks(np.arange(pmf_grid.shape[1])+0.5)\nax1.set_xticklabels(np.arange(pmf_grid.shape[1]))\nplt.colorbar(heatmap, ax=ax1)\n\nax2.bar(x, pmf_binomial,\n        label='Binomial\\ndisitrbution\\nn={}, p={}'.format(n, p[0]))\nax2.bar_label(ax2.containers[0], fontsize = 13)\nax2.set_xlabel('$x_1$', fontsize = 18)\nax2.set_ylim([0, 0.4])\nax2.set_ylabel('Probability', fontsize=18)\nax2.legend(loc='best', fontsize = 14)\n\nplt.show()\n```", "```py\n# Listing 5\n\nn = 5\np=[0.5, 0.3, 0.2]\n\nx1_array = np.arange(0, n+1)\nX1_mat, X2_mat = np.meshgrid(x1_array, x1_array)\nx3_array = n - X1_mat.flatten() - X2_mat.flatten()\nX_mat = np.array([X1_mat.flatten(), X2_mat.flatten(), x3_array]).T\n\npmf_mult = multinomial(n, p).pmf(X_mat)\npmf_x1 = binom.pmf(k=x1_array,n=n, p=p[0])\npmf_x2 = binom.pmf(k=x1_array,n=n, p=p[1])\n\nfig = plt.figure(figsize=(10, 10))\nax1 = fig.add_subplot(111, projection='3d')\n\nx1 = X_mat[:, 0]\nx2 = X_mat[:, 1]\nz = np.zeros(len(x1))\n\nwidth = 0.8\ndx1 = np.repeat(width, len(x1))\ndx2 = np.repeat(width, len(x1))\n\nax1.bar3d(x1-width/2, x2-width/2,\n          z, dx1, dx2, pmf_mult, color='aqua')\nax1.bar3d(x1_array-width/2, np.repeat(6, n+1)-width/2,\n          np.zeros(n+1), np.repeat(0.8, n+1),\n          np.zeros(n+1), pmf_x1, color='blue', shade=False)\nax1.bar3d(np.repeat(0, n+1)-width/2, x1_array-width/2,\n          np.zeros(n+1), np.zeros(n+1),\n          np.repeat(0.8, n+1), pmf_x2,\n          color='blue', shade=False)\n\nax1.set_xlabel('$x_1$', fontsize=20)\nax1.set_ylabel('$x_2$', fontsize=20)\nax1.set_zlabel(\"$p_\\mathregular{X}(\\mathregular{x})$\", weight=\"bold\",\n               style=\"italic\", fontsize=18, labelpad = 8)\n\nax1.text(4.2, 5, 0.25,\"$p_{X_1}(x_1)$\", fontsize= 18, color='b')\nax1.text(0.7, 1.7, 0.3, \"$p_{X_2}(x_2)$\", fontsize= 18, color='b')\nax1.text(1.3, 7, 0.25,\"$X_1 \\sim Bin(5, 0.5)$\", fontsize= 18)\nax1.text(-3, 1.7, 0.3, \"$X_2 \\sim Bin(5, 0.3)$\", fontsize= 18)\n\nax1.view_init(35, -45)\nplt.show()\n```", "```py\n# Listing 6\n\nnp.random.seed(2)\nn = 5\np=[0.5, 0.3, 0.2]\nx = np.arange(n+1)\nsample = multinomial.rvs(n=n, p=p, size=100000)\npmf_binomial = binom.pmf(k = x,n = n, p = p[0]+p[1])\nsample_marginal = sample[:, 0] + sample[:, 1] \nvalues, counts = np.unique(sample_marginal, return_counts=True)\nprobs = counts / counts.sum()\n\nfig = plt.figure(figsize=(8, 6))\nplt.bar(values, probs, label='Marginal sample')\nplt.plot(x, pmf_binomial, marker='o', color='red',\n         label='Binomial distribution, n={}, p={}'.format(n, p[0]+p[1]))\nplt.xlabel('$x_1+x_2$', fontsize = 18)\nplt.ylabel('Probability', fontsize=18)\nplt.ylim([0, 0.45])\nplt.legend(loc='best', fontsize = 13)\n\nplt.show()\n```", "```py\n# Listing 7\n\nnp.random.seed(1)\npopulation = [1]*5 + [2]*3 + [3]*2\nn = 5\nxedges = np.arange(n+2)\nyedges =  np.arange(n+2)\nnum_samples_list = [30, 50000]\n\nx1_array = np.arange(0, n+1)\nX1_mat, X2_mat = np.meshgrid(x1_array, x1_array)\nx3_array = n - X1_mat.flatten() - X2_mat.flatten()\nX_mat = np.array([X1_mat.flatten(), X2_mat.flatten(), x3_array]).T\npmf_mult = multinomial(n, p).pmf(X_mat)\n\nx1 = X_mat[:, 0]\nx2 = X_mat[:, 1]\nz = np.zeros(len(x1))\nwidth = 0.15\ndx1 = np.repeat(width, len(x1))\ndx2 = np.repeat(width, len(x1))\n\nfig = plt.figure(figsize=(18, 10))\nplt.subplots_adjust(wspace=0.1)\nax1 = fig.add_subplot(121, projection='3d')\nax2 = fig.add_subplot(122, projection='3d')\naxs = [ax1, ax2]\n\nfor i, num_samples in enumerate(num_samples_list):\n    samples = np.random.choice(population,\n                 size=n*num_samples).reshape(num_samples, n)\n    samples_count = np.stack(((samples==1).sum(axis=1),\n                              (samples==2).sum(axis=1)), axis=-1)\n    H, _, _ = np.histogram2d(samples_count[:, 0],\n                             samples_count[:, 1],\n                             bins=(xedges, yedges))\n    H = H.T / H.sum()\n\n    axs[i].bar3d(x1-2*width, x2-width, z, dx1, dx2, H.flatten(),\n              color='aqua')\n    axs[i].bar3d(x1+width/2, x2-width, z, dx1, dx2, pmf_mult,\n              color='red')\n    axs[i].set_xlabel('$x_1$', fontsize=20)\n    axs[i].set_ylabel('$x_2$', fontsize=20)\n    axs[i].set_zlabel(\"$p_\\mathregular{X}(\\mathregular{x})$\",\n                      weight=\"bold\", style=\"italic\",\n                      fontsize=18, labelpad = 8)\n    axs[i].set_title('Sample size={}'.format(num_samples), fontsize=20)\n    axs[i].set_zlim([0, 0.2])\n    axs[i].view_init(35, -135)\n\nplt.show()\n```", "```py\n# Listing 8\n\nnp.random.seed(50)\nnum_samples = 5000000\nn = 5\np=[0.5, 0.3, 0.2]\nsample1 = multinomial.rvs(n=n, p=p, size=num_samples)\nsample2 = multinomial.rvs(n=1, p=p,\n    size=n*num_samples).reshape(num_samples, n, len(p)).sum(axis = 1)\n```", "```py\n(sample1 == [3, 2, 0]).all(axis=1).mean()\n\n# output\n0.1124632\n```", "```py\n(sample2 == [3, 2, 0]).all(axis=1).mean()\n\n# Output\n0.1125352\n```", "```py\nn = 5\np=[0.5, 0.3, 0.2]\nmultinomial(n, p).mean()\n\n# Output\narray([2.5, 1.5, 1\\. ])\n```", "```py\nmultinomial(n, p).cov()\n\n# Output\narray([[ 1.25, -0.75, -0.5 ],\n       [-0.75,  1.05, -0.3 ],\n       [-0.5 , -0.3 ,  0.8 ]])\n```"]