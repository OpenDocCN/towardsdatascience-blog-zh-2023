- en: 'Git For the Modern Data Scientist: 9 Git Concepts You Can’t Ignore'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代数据科学家的Git：你不能忽视的9个Git概念
- en: 原文：[https://towardsdatascience.com/git-for-the-modern-data-scientist-9-git-concepts-you-cant-ignore-b4eaf7a154c2](https://towardsdatascience.com/git-for-the-modern-data-scientist-9-git-concepts-you-cant-ignore-b4eaf7a154c2)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/git-for-the-modern-data-scientist-9-git-concepts-you-cant-ignore-b4eaf7a154c2](https://towardsdatascience.com/git-for-the-modern-data-scientist-9-git-concepts-you-cant-ignore-b4eaf7a154c2)
- en: Explained with striking visuals
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过引人注目的视觉效果进行讲解
- en: '[](https://ibexorigin.medium.com/?source=post_page-----b4eaf7a154c2--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----b4eaf7a154c2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b4eaf7a154c2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b4eaf7a154c2--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----b4eaf7a154c2--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ibexorigin.medium.com/?source=post_page-----b4eaf7a154c2--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----b4eaf7a154c2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b4eaf7a154c2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b4eaf7a154c2--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----b4eaf7a154c2--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b4eaf7a154c2--------------------------------)
    ·12 min read·May 6, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----b4eaf7a154c2--------------------------------)
    ·12分钟阅读·2023年5月6日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/2df9ea9d0ee942c7ecabd1db26dc4e5b.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2df9ea9d0ee942c7ecabd1db26dc4e5b.png)'
- en: Image by me with Midjourney
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我与Midjourney提供
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: Most data scientists feel like a fish out of water when it comes to Git. There
    are software engineers who talk about nothing but Git-things, and there are data
    scientists who say “Huh?” (I wish I could add a sound to this) every time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数数据科学家在使用Git时感觉像是水中鱼。有些软件工程师只谈论Git的事情，而数据科学家则每次都说“啊？”（我希望能加上声音效果）。
- en: That stops today! Since Git is an essential tool for collaboration, I will break
    down *nine* of the most critical Git concepts that data scientists must know like
    the back of their hand.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 今天就到此为止！因为Git是协作的基本工具，我将详细讲解数据科学家必须如数家珍的*九个*最关键的Git概念。
- en: I can promise that you won’t be nodding your head in fake understanding the
    next time someone talks about Git or version control.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以保证，下次有人谈论Git或版本控制时，你不会再假装理解。
- en: Let’s get started!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: For the 1000th time…
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1000次……
- en: 'You may have heard it a few hundred times already, but I will err on the side
    of caution and say it for the few hundred and first time:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经听过几百次了，但我还是谨慎起见再说一次：
- en: '*Git is one of the most critical tools in developing ML and AI systems.*'
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Git是开发ML和AI系统中最关键的工具之一。*'
- en: '![](../Images/a10be2945aa15fe0a62bf6092f20d94c.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a10be2945aa15fe0a62bf6092f20d94c.png)'
- en: Image by me
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供
- en: If your idea of a machine learning or data science project involves models cooked
    up in notebooks with creatively named files such as “notebook1”, “notebook2”,
    “notebook_final”, and “notebook_final_final”, then don’t bother with Git.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对机器学习或数据科学项目的理解是通过创意命名的文件如“notebook1”、“notebook2”、“notebook_final”和“notebook_final_final”来完成模型，那么就不要考虑Git了。
- en: However, if you aim to deploy models that others can use without migraines,
    Git is a relatively small price to pay.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你打算部署他人可以使用的模型，Git是一个相对较小的代价。
- en: Git allows you to keep track of changes to your code and data, collaborate with
    others, and maintain a history of your project. With Git, you can easily revert
    to a previous version of your work, compare different versions, and merge changes
    made by multiple contributors.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Git允许你跟踪代码和数据的更改，与他人协作，并维护项目历史。使用Git，你可以轻松恢复到工作中的先前版本，比较不同版本，并合并多个贡献者的更改。
- en: Moreover, Git easily integrates with other popular MLOps tools like DVC for
    data version control, making it an essential tool for data scientists.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Git轻松与其他流行的MLOps工具如DVC集成，使其成为数据科学家的必备工具。
- en: 0\. Repository
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0\. 仓库
- en: 'Basically, a repository is this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，仓库就是这个：
- en: '![](../Images/40e71e09eeda643d5aa7d044e1a35baa.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/40e71e09eeda643d5aa7d044e1a35baa.png)'
- en: Image by me
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供
- en: It is a folder on your machine. It can have no files, three files, or a hundred.
    The only thing needed to convert that folder into a Git repository is to call
    `git init` inside it.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你计算机上的一个文件夹。它可以没有文件、三个文件或一百个。将该文件夹转换为Git仓库所需的唯一操作是在其中调用`git init`。
- en: '![](../Images/c71a68c959f3b9ad8091f8da8fe17e6d.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c71a68c959f3b9ad8091f8da8fe17e6d.png)'
- en: Image by me. Initializing a Git repo.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供。初始化Git仓库。
- en: A machine learning repository usually has folders to store data, models, and
    code for loading, cleaning, and transforming data, as well as selecting, training,
    and saving models for deployment.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习仓库通常有用于存储数据、模型的文件夹，以及用于加载、清理和转换数据的代码文件夹，以及用于选择、训练和保存模型以进行部署的文件夹。
- en: There will be other miscellaneous files, such as the `.git` folder for Git internals
    and metadata files.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 还会有其他杂项文件，如用于Git内部和元数据的`.git`文件夹。
- en: All of these make up a single repository, and Git is usually enough to track
    them (except for data and models. For that, see [this article](/how-to-version-gigabyte-sized-datasets-just-like-code-with-dvc-in-python-5197662e85bd)
    afterward).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些构成了一个单一的仓库，Git通常足以跟踪它们（数据和模型除外。有关内容，请参阅[这篇文章](/how-to-version-gigabyte-sized-datasets-just-like-code-with-dvc-in-python-5197662e85bd)）。
- en: 1\. Tracked, untracked
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 跟踪，未跟踪
- en: When you initialize Git inside a directory, by default, any existing or new
    files/directories you create will be untracked by Git.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在目录中初始化Git时，默认情况下，你创建的任何现有或新文件/目录将不会被Git跟踪。
- en: '![](../Images/dec5dd4ba088601d4058ff11eb6438b8.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dec5dd4ba088601d4058ff11eb6438b8.png)'
- en: Image by me. Showcase of the `git status` command
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供。展示`git status`命令
- en: This means that any future changes you make to them will also be untracked.
    Therefore, you need to put those files under Git supervision by running `git add
    path/to/file.py`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你对这些文件所做的任何未来更改也将不会被跟踪。因此，你需要通过运行`git add path/to/file.py`将这些文件纳入Git的监督。
- en: '![](../Images/a9dce75b32a5b81b858d9aa4d0d9f3ab.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a9dce75b32a5b81b858d9aa4d0d9f3ab.png)'
- en: Image by me. Tracking files and directories in Git.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供。跟踪Git中的文件和目录。
- en: After calling `git add` on files, they will be under Git-watch.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在对文件调用`git add`后，它们将被Git监视。
- en: If you wish to add all files in the repository (although this is highly unlikely),
    you can call `git add .`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望添加仓库中的所有文件（尽管这非常不可能），你可以调用`git add .`。
- en: There are also cases where you never want files to be tracked by Git. This is
    when you create a `.gitignore` file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些情况下你绝不希望文件被Git跟踪。这时你需要创建一个`.gitignore`文件。
- en: As the name suggests, files added to `.gitignore` won't be tracked or indexed
    by Git for as long as they are there. Typical items you should add to `.gitignore`
    for data projects are large data files like CSVs, parquets, images, videos, or
    audio. Git has historically been terrible at handling those.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如名字所示，添加到`.gitignore`中的文件将不会被Git跟踪或索引，只要它们在那儿。对于数据项目，你应该将大型数据文件如CSV、parquet、图片、视频或音频添加到`.gitignore`中。Git在处理这些内容时历史上表现不佳。
- en: It handles the rest like a champ.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 它像高手一样处理其余部分。
- en: P.S. You can create a `.gitignore` file in the terminal with `touch .gitignore`
    and add files/folders to it with `echo "filename" >> .gitignore` on new lines.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 附注：你可以在终端中用`touch .gitignore`创建`.gitignore`文件，并用`echo "filename" >> .gitignore`在新行中添加文件/文件夹。
- en: 2\. Commit
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 提交
- en: A Git commit is a precious thing. The entire idea of version control is based
    on it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Git提交是一件珍贵的事情。版本控制的整个理念都基于此。
- en: When you call `git commit` inside a Git repository, you take a snapshot of every
    Git-tracked file for that specific point in time. Think of it like a time capsule
    with contents (versions) of your project from different periods.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在Git仓库中调用`git commit`时，你会在特定时间点对每个Git跟踪的文件进行快照。可以把它当作一个包含你项目不同时间段内容（版本）的时间胶囊。
- en: '![](../Images/192dacfa032109e1ee8a56728f2a1b63.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/192dacfa032109e1ee8a56728f2a1b63.png)'
- en: Image by me. Making your first commit.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供。进行第一次提交。
- en: All the commits you make will form your Git history or Git tree, as shown below.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你所做的所有提交将形成你的Git历史或Git树，如下所示。
- en: '![](../Images/96448ca3496eaaacf2cef6adaf434a4b.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/96448ca3496eaaacf2cef6adaf434a4b.png)'
- en: Image by me. A small Git tree.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供。一个小型Git树。
- en: A good Git tree organizes the linear progression of your repository. By breaking
    down your code changes into discrete, well-defined commits, you can map out the
    progress of your repository almost like a book.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的Git树组织了你仓库的线性进展。通过将你的代码更改分解为离散的、明确定义的提交，你几乎可以像书一样绘制出仓库的进展。
- en: Then, you can browse through the pages of this Git book through commits.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以通过提交浏览这本Git书的各个页面。
- en: Just like a writer puts a lot of effort into writing each page of their book,
    you should treat your commits with care.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 就像一个作家在书中的每一页上都投入大量精力一样，你也应该细心对待你的提交。
- en: You shouldn’t be making commits for the sake of committing. Consider them as
    little pieces of history, and know that future versions of yourself and other
    developers should look at them with delight, rather than disgust.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你不应该为了提交而提交。把它们视为历史的小片段，并知道未来的你和其他开发人员应该欣赏它们，而不是厌恶。
- en: 'Traditional advice: A good commit has an informative message describing the
    changes made.'
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 传统建议：一个好的提交有一个描述所做更改的信息性消息。
- en: 'Some common scenarios to commit in a typical machine learning project:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型的机器学习项目中，常见的提交场景包括：
- en: 'Implementing a new feature: writing code that adds a new functionality like
    a new function, class, class method, training a new model, new data cleaning operation,
    etc.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现新功能：编写代码以添加新的功能，比如新的函数、类、类方法、训练新模型、新的数据清理操作等。
- en: 'Fixing a bug: documenting bug fixes to existing functions, methods, and classes'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复 bug：记录对现有函数、方法和类的 bug 修复
- en: 'Improving performance: writing code that enhances an existing feature like
    optimizing blocks of code'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提升性能：编写代码来优化现有功能，比如优化代码块
- en: Updating docs and dependencies
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新文档和依赖项
- en: 'Machine learning experiments: in a project, you will run dozens of experiments
    to choose and tune the best model. [Each model run should be tracked as a commit](https://pub.towardsai.net/how-to-track-ml-experiments-with-dvc-inside-vscode-to-boost-your-productivity-a654ace60bab).'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习实验：在一个项目中，你将运行数十个实验以选择和调整最佳模型。[每个模型运行都应该作为提交进行跟踪](https://pub.towardsai.net/how-to-track-ml-experiments-with-dvc-inside-vscode-to-boost-your-productivity-a654ace60bab)。
- en: 3\. Staging area
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 暂存区
- en: By talking about commits, we have got ahead of ourselves. Before closing the
    cap of the commit capsule, you have to make sure the contents within are right.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 说到提交，我们已经超前了。在关闭提交封装之前，你必须确保其中的内容是正确的。
- en: This involves telling Git exactly which changes from which files you want to
    commit. Sometimes, new changes might come from several files and you may only
    want to commit some of them and leave the rest for future commits.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这涉及到告诉 Git 你具体想提交哪些文件的哪些更改。有时候，新的更改可能来自多个文件，而你可能只想提交其中的一部分，留下其余部分以便未来提交。
- en: 'This is where we lift the curtains and reveal the staging area (pun intended):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们揭开幕布，展示暂存区的地方（带点俏皮话）：
- en: '![](../Images/994e52a84ed86c4d6053af88d4ce004c.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/994e52a84ed86c4d6053af88d4ce004c.png)'
- en: Image by me. The staging area is changed after the changes in train.py are added.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 由我提供的图像。在将更改添加到 train.py 后，暂存区发生了变化。
- en: The idea is that you must have some way of double-checking, editing, or undoing
    the changes you want to add to your Git history before you press that commit button.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法是，你必须有某种方式在按下提交按钮之前，双重检查、编辑或撤销你想添加到 Git 历史记录中的更改。
- en: Adding the new changes to the staging area (or **Git index** as some kids say
    it) allows you to do that. The area holds the changes you want to include in the
    next commit.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将新更改添加到暂存区（或者**Git 索引**，如某些人所说）可以实现这一点。该区域保存了你希望包含在下一个提交中的更改。
- en: Let’s say you changed both `clean.py` and `train.py`. If you add the changes
    in `train.py` with `git add train.py` to the staging area, the next commit will
    only include that change.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你修改了`clean.py`和`train.py`。如果你使用`git add train.py`将`train.py`中的更改添加到暂存区，下一个提交将仅包含该更改。
- en: The modified `clean.py` will stay as is (uncommitted).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 修改过的`clean.py`将保持原样（未提交）。
- en: '![](../Images/994e52a84ed86c4d6053af88d4ce004c.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/994e52a84ed86c4d6053af88d4ce004c.png)'
- en: Image by me. The image above reshown for clarity.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 由我提供的图像。上面的图像为了清晰展示而重新显示。
- en: 'So, here is an easy workflow for you:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这里有一个简单的工作流程：
- en: Track new files with Git (only done once)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Git 跟踪新文件（仅需做一次）
- en: Add changes in tracked files to the staging area with `git add changed_file.extension`
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`git add changed_file.extension`将跟踪的文件中的更改添加到暂存区
- en: Commit the changes in the staging area to history with `git commit -m "Commit
    message"`.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`git commit -m "Commit message"`将暂存区的更改提交到历史记录中。
- en: 4\. Hashes and tags
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 哈希和标签
- en: Apart from messages, all Git commits have hashes so you can point to them more
    easily.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 除了消息，所有 Git 提交都有哈希，这样你可以更容易地指向它们。
- en: '![](../Images/20e9a5aab08ad9c4b35f1922b755c02d.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/20e9a5aab08ad9c4b35f1922b755c02d.png)'
- en: Image by me. Three sample commits with 7-character hashes.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由我提供的图像。三个示例提交，具有 7 位字符的哈希值。
- en: A hash is a string with 40 hexadecimal characters that give each commit unique
    IDs, like `1a3b5c7d9e2f4g6h8i0j1k2l3m4n5o6p7q8r9s0t`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希是一个具有 40 个十六进制字符的字符串，给每个提交分配唯一的 ID，例如 `1a3b5c7d9e2f4g6h8i0j1k2l3m4n5o6p7q8r9s0t`。
- en: They make switching between commits (different versions of your code base) much
    easier with `git checkout HASH`. You don't have to write the full hash when switching.
    Only the first few characters of the hash that make it unique are enough.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 它们使在提交（你代码库的不同版本）之间切换变得更加容易，使用 `git checkout HASH`。切换时不必写完整的哈希值。只需要哈希值的前几个字符，这些字符足以使其唯一。
- en: You can list all the commits you’ve made with their hashes using `git log` (this
    shows the author and message of the commit).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `git log` 列出你所做的所有提交及其哈希值（这会显示提交的作者和消息）。
- en: To list only the hash and the message without cluttering up your screen, you
    can use `git log --oneline`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了只列出哈希和消息而不使屏幕混乱，你可以使用 `git log --oneline`。
- en: '![](../Images/e4923bc74c22e8a38a50967861bfa77d.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e4923bc74c22e8a38a50967861bfa77d.png)'
- en: Image by me. The command to list your Git log line-by-line.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供。用于逐行列出你的 Git 日志的命令。
- en: If hashes intimidate you, there are also **Git tags**. A Git tag is a friendly
    nickname you can give to some important commits (or any) to remember and refer
    to them even more easily.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果哈希值让你感到困惑，还有 **Git 标签**。Git 标签是你可以为一些重要的提交（或任何提交）起的友好昵称，以便更容易记住和引用它们。
- en: '![](../Images/b8c14686cdf46b56ba779e1042d92725.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b8c14686cdf46b56ba779e1042d92725.png)'
- en: Image by me. Four commits with two of them tagged.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供。四个提交，其中两个被标记。
- en: You can use the command “git tag” to assign tags to specific commits that are
    important, such as those containing a crucial feature or a significant code base
    release (e.g., `v1.0.0`). Additionally, you can tag a commit that represents your
    best model, such as “`random_forest_best`”.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用命令“git tag”将标签分配给特定的提交，这些提交很重要，例如包含关键功能或重要代码库发布的提交（例如，`v1.0.0`）。此外，你还可以给代表你最佳模型的提交打标签，例如“`random_forest_best`”。
- en: Think of tags as little human-readable milestones that stand out among all the
    commit hashes.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 将标签视为在人类可读的里程碑，这些里程碑在所有提交哈希中脱颖而出。
- en: To clarify, the command `git tag ‘tag_name’` will only add a tag to the last
    commit. If you want to add a tag to a specific commit, you need to specify the
    commit hash at the end of the command, after the tag name.
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为了澄清，命令 `git tag ‘tag_name’` 只会给最后一个提交添加标签。如果你想为特定提交添加标签，你需要在命令末尾指定提交哈希，在标签名称之后。
- en: 5\. Branch
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 分支
- en: After commits, branches are the bread and butter of Git. 99% of the time, you
    will be working inside a Git branch.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 提交后，分支是 Git 的核心。99% 的时间里，你都将在 Git 分支中工作。
- en: By default, the branch you are on when you initialize Git inside a folder will
    be named either `main` or `master`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当你在文件夹中初始化 Git 时，你所在的分支将被命名为 `main` 或 `master`。
- en: '![](../Images/65888cbb303d3432c38b2fa97e01ed64.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/65888cbb303d3432c38b2fa97e01ed64.png)'
- en: Image by me. The master branch.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供。主分支。
- en: You can think of other branches as alternate realities of your code base.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将其他分支视为你代码库的替代现实。
- en: By creating a Git branch, you can test and experiment with new features, ideas,
    and fixes without fearing you will mess up your code base.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建 Git 分支，你可以测试和实验新功能、想法和修复，而不用担心会弄乱你的代码库。
- en: 'For example, you can test a new algorithm for a classification task in a new
    branch without disrupting the main code base:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以在一个新的分支中测试用于分类任务的新算法，而不会干扰主代码库：
- en: '![](../Images/36e11b813e20d5213d12cd9816ef4da0.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/36e11b813e20d5213d12cd9816ef4da0.png)'
- en: Image by me. Creating the new SGD branch.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供。创建新的 SGD 分支。
- en: Git branches are very cheap. When you call `git branch new_branch_name`, Git
    creates a pseudo-copy of the master branch without duplicating any of the files.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Git 分支非常便宜。当你调用 `git branch new_branch_name` 时，Git 会创建主分支的伪副本，而不会重复任何文件。
- en: After creating a new branch and experimenting with your fresh ideas, you have
    the option to delete the branch if the results do not seem promising. On the other
    hand, if you are content with the changes made in the new branch, you can merge
    it with the master branch.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新分支并尝试新想法后，如果结果看起来不太理想，你可以选择删除该分支。另一方面，如果你对新分支中的更改感到满意，你可以将其合并到主分支。
- en: 6\. HEAD
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. HEAD
- en: A Git repository can have several branches and hundreds of commits. So you might
    raise the excellent question “How does Git know which branch or commit you are
    at?”.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Git 仓库可以有多个分支和数百个提交。因此，你可能会提出一个很好的问题：“Git 如何知道你在哪个分支或提交上？”。
- en: Git uses a special pointer called **HEAD** and that is the answer.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Git 使用一个叫做**HEAD**的特殊指针，这就是答案。
- en: '![](../Images/da3321270729d5ad3e8dae70bad26d06.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/da3321270729d5ad3e8dae70bad26d06.png)'
- en: Image by me. Switching of the HEAD.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供。HEAD 的切换。
- en: Basically, the HEAD is you. Wherever you are, HEAD follows you in Git. 99% of
    the time, HEAD will be pointing to the **latest commit in the current branch**.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，HEAD 就是你。无论你在哪里，HEAD 都会在 Git 中跟随你。99% 的时候，HEAD 会指向**当前分支中的最新提交**。
- en: If you make a new commit, HEAD will move on to that. If you switch to a new
    or an old branch, HEAD will switch to the latest commit in that branch.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你进行新的提交，HEAD 将会移动到那个提交。如果你切换到一个新分支或旧分支，HEAD 将会切换到该分支中的最新提交。
- en: One use-case for HEAD is when comparing changes in different commits to each
    other. For example, calling `git diff HEAD~1` will compare the latest commit to
    the commit immediately before it.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: HEAD 的一个用例是比较不同提交之间的变化。例如，调用`git diff HEAD~1`将会比较最新提交与紧接在它之前的提交。
- en: This also means that `HEAD~n` syntax in Git refers to the *nth* commit *before*
    wherever the HEAD is.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着 Git 中的`HEAD~n`语法指的是*HEAD*所在位置*之前*的第*n*个提交。
- en: '![](../Images/853d1f7a1beea603b6a4ecb0903a9342.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/853d1f7a1beea603b6a4ecb0903a9342.png)'
- en: Image by me. HEAD~n syntax.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供。HEAD~n 语法。
- en: You may also go into the dreaded **detached HEAD state**. This doesn’t mean
    Git has lost track of you and doesn’t know where to point.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可能进入到令人讨厌的**分离的 HEAD 状态**。这并不意味着 Git 已经丢失了对你的追踪，不知道该指向哪里。
- en: A detached head state occurs when you use the command `git checkout HASH` to
    check out a specific commit, instead of using **git checkout branch_name**. This
    forces the HEAD to no longer point to the tip of a branch, but rather to a specific
    commit somewhere in the middle of the commit history.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用命令`git checkout HASH`来检出特定提交时，会发生分离的 HEAD 状态，而不是使用**git checkout branch_name**。这会迫使
    HEAD 不再指向分支的末端，而是指向提交历史中的某个特定提交。
- en: '![](../Images/27628f19f5d4ab78faa08482df1e9192.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/27628f19f5d4ab78faa08482df1e9192.png)'
- en: Image by me. Detached HEAD state.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供。分离的 HEAD 状态。
- en: Any changes or commits you make in the detached HEAD state will be isolated
    or orphaned and won’t be part of your Git history. The reason is that HEAD is,
    well, the head of branches. It strongly fancies attaching itself to branch tips
    or heads, not its stomach or legs.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在分离的 HEAD 状态下，你所做的任何更改或提交都会被孤立或孤立，不会成为你 Git 历史的一部分。原因是 HEAD 是分支的头部。它非常喜欢附着在分支的末端或头部，而不是它的腹部或腿部。
- en: So, if you want to make changes in a detached HEAD state, you should call `git
    switch -c new_branch` to create a new branch at the current commit. This gets
    you out of the state and moves the HEAD.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你想在分离的 HEAD 状态下进行更改，你应该调用`git switch -c new_branch`来在当前提交处创建一个新分支。这将使你脱离分离状态，并移动
    HEAD。
- en: Getting the hang of the HEAD will go a long way in helping you navigate any
    tangled Git tree.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 HEAD 对于帮助你导航任何复杂的 Git 树会大有裨益。
- en: 7\. Merge
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7\. 合并
- en: So, what happens after you create a new branch?
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，创建新分支后会发生什么？
- en: Do you discard it if your experiment doesn’t pan out with `git branch -d branch_name`?
    Or do you perform a fabled Git merge?
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的实验没有成功，你会用`git branch -d branch_name`丢弃它吗？还是会进行传说中的 Git 合并？
- en: Basically, a Git merge is a fancy party where two or even more branches come
    together to create a single thicker branch.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，Git 合并是一个盛大的聚会，其中两个甚至更多的分支汇聚在一起，创建一个更粗的分支。
- en: '![](../Images/3e9757742580ca948f5ef32a97ab2963.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3e9757742580ca948f5ef32a97ab2963.png)'
- en: Image by me. Merging of two branches.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供。两个分支的合并。
- en: When you merge branches, Git takes the code from each branch and combines them
    into a single cohesive code base.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当你合并分支时，Git 会将每个分支中的代码合并到一个统一的代码库中。
- en: If there are overlapping changes in the branches, i.e. both branches have changed
    lines 5–10 in `train.py`, Git raises a merge conflict.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果分支中存在重叠的更改，即两个分支都修改了`train.py`中的第 5 到 10 行，Git 会引发合并冲突。
- en: A merge conflict is as nasty as it sounds. To resolve the conflict, you have
    to decide which branch’s changes you want to keep.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 合并冲突听起来就像它的名字那样糟糕。要解决冲突，你必须决定要保留哪个分支的更改。
- en: Solving merge conflicts without swearing and boiling from the ears is a rare
    skill developed over time. So, I won’t talk much about them and will refer you
    to [this excellent article](https://www.atlassian.com/git/tutorials/using-branches/merge-conflicts)
    from Atlassian.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 解决合并冲突而不发火并且不让耳朵冒烟是一项随着时间推移而培养的稀有技能。所以，我不会多谈这个问题，会推荐你查看[这篇优秀的文章](https://www.atlassian.com/git/tutorials/using-branches/merge-conflicts)来自
    Atlassian。
- en: 8\. Stash
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8\. 储藏
- en: I tend to screw up a lot when coding. An idea strikes me; I try it out only
    to realize that it is rubbish.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我在编码时往往会搞砸很多。一个想法闪现；我尝试一下，结果发现它毫无用处。
- en: In the beginning, I would foolishly erase the mess into oblivion but later regret
    it. Even though the idea was rubbish, it doesn’t mean I couldn’t use certain code
    blocks in the future.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，我会愚蠢地将混乱的代码抹去，但后来会后悔。尽管这个想法毫无用处，但这并不意味着我不能在未来使用某些代码块。
- en: Then, I discovered Git stashes and they quickly became one of my favorite Git
    features.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我发现了 Git 暂存区，它们很快成为了我最喜欢的 Git 特性之一。
- en: When you call `git stash`, Git automatically stashes or hides both staged and
    unstaged changes in the working directory. The files revert back to a state where
    they just came out of a commit.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调用`git stash`时，Git 会自动将暂存的或隐藏的更改（包括已暂存和未暂存的更改）放入工作目录。文件会恢复到刚刚提交的状态。
- en: '![](../Images/c43a098c1f87953f22451d579be63107.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c43a098c1f87953f22451d579be63107.png)'
- en: Image by me. What happens in a stash?
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供。暂存区发生了什么？
- en: After you stash your changes, you can continue your work as usual. When you
    want to retrieve them again (anywhere), you can use the `git stash apply` or `git
    stash pop` command. These commands will restore the changes that were previously
    saved in the stash to the working directory.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在你暂存了更改之后，你可以像往常一样继续你的工作。当你想再次检索这些更改时（无论在何处），你可以使用`git stash apply`或`git stash
    pop`命令。这些命令将把之前保存到暂存区的更改恢复到工作目录中。
- en: Note that `git stash` command only saves changes made to tracked files and not
    untracked files. In order to stash both tracked and untracked files, you need
    to use the `-u` flag with the `git stash` command. Ignored files will not be included
    in the stash.
  id: totrans-144
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，`git stash`命令只保存对跟踪文件的更改，而不包括未跟踪的文件。为了暂存跟踪和未跟踪的文件，你需要使用`-u`标志与`git stash`命令一起使用。被忽略的文件不会包含在暂存区中。
- en: 9\. GitHub
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9\. GitHub
- en: So, we come to the age-old question — what is the difference between Git and
    GitHub?
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们来到了一个古老的问题——Git和GitHub之间有什么区别？
- en: This is like asking the difference between a burger and a cheeseburger.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像是在问汉堡和芝士汉堡之间的区别。
- en: Git is a version control system that tracks repositories. On the other hand,
    GitHub is a web-based platform used to store Git-controlled repositories online.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是一个版本控制系统，用于跟踪仓库。另一方面，GitHub 是一个基于网络的平台，用于在线存储由 Git 控制的仓库。
- en: Git really shines when its repositories are made online and hence, open for
    collaboration. If a repository is only on your local machine, people can’t work
    on it with you.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当仓库在线并且开放合作时，Git 的优势真正显现出来。如果一个仓库仅存在于你的本地机器上，其他人无法与你一起进行工作。
- en: So, think of GitHub as a remote mirror of your local repo that people can clone,
    fork, and suggest pull requests.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，可以将 GitHub 看作是你本地仓库的远程镜像，其他人可以克隆、分叉并建议拉取请求。
- en: And if these terms sound alien to you, stick around for my next article where
    I explain N (I don’t know how many right now) GitHub concepts that will clear
    the confusion right away.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些术语对你来说还很陌生，请关注我的下一篇文章，我将解释 N（我现在不知道有多少个）GitHub 概念，立即澄清这些困惑。
- en: Wrap
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包装
- en: There you go! I hope this article gave you tremendous clarity regarding these
    9 Git concepts. Especially, I find that the concept of HEAD is a real *head*-scratcher
    for a lot of folks :)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我希望这篇文章为你提供了关于这9个 Git 概念的极大清晰度。特别是，我发现 HEAD 的概念对很多人来说是个真正的*难题* :)
- en: Be sure to read the official Git docs for more (very boring, though) information.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 确保阅读官方 Git 文档以获得更多（尽管非常无聊）信息。
- en: Thank you for reading!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！
- en: Loved this article and, let’s face it, its bizarre writing style? Imagine having
    access to dozens more just like it, all written by a brilliant, charming, witty
    author (that’s me, by the way :).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢这篇文章以及它那奇特的写作风格？想象一下，你可以访问更多类似的文章，都是由一个才华横溢、迷人且机智的作者（顺便说一下，就是我 :)）撰写的。
- en: For only 4.99$ membership, you will get access to not just my stories, but a
    treasure trove of knowledge from the best and brightest minds on Medium. And if
    you use [my referral link](https://ibexorigin.medium.com/membership), you will
    earn my **supernova of gratitude** and a virtual high-five for supporting my work.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 只需 4.99 美元的会员，你将不仅能访问我的故事，还能获得 Medium 上最优秀和最聪明头脑的知识宝库。如果你使用[我的推荐链接](https://ibexorigin.medium.com/membership)，你将获得我**超新星的感激**以及一个虚拟的击掌，以感谢你对我工作的支持。
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----b4eaf7a154c2--------------------------------)
    [## Join Medium with my referral link — Bex T.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ibexorigin.medium.com/membership?source=post_page-----b4eaf7a154c2--------------------------------)
    [## 使用我的推荐链接加入 Medium — Bex T.'
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获得对我所有⚡高级⚡内容和整个Medium平台的无限制访问。通过购买我的…
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----b4eaf7a154c2--------------------------------)
    ![](../Images/a01b5e4fb641db5f35b8172a4388e821.png)
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----b4eaf7a154c2--------------------------------)
    支持我的工作！[](../Images/a01b5e4fb641db5f35b8172a4388e821.png)'
- en: Image by me. Via Midjourney.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我制作。通过Midjourney。
