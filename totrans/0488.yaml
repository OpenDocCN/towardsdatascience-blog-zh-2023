- en: 'Charts that Tell a Story: Turn a Data Visualization into Something More'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/charts-that-tell-a-story-turn-a-plotly-visualization-into-something-more-a723e427d5aa](https://towardsdatascience.com/charts-that-tell-a-story-turn-a-plotly-visualization-into-something-more-a723e427d5aa)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://medium.com/@kurt.klingensmith?source=post_page-----a723e427d5aa--------------------------------)[![Kurt
    Klingensmith](../Images/2249e99f12d10f81598c754b1aaf76cc.png)](https://medium.com/@kurt.klingensmith?source=post_page-----a723e427d5aa--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a723e427d5aa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a723e427d5aa--------------------------------)
    [Kurt Klingensmith](https://medium.com/@kurt.klingensmith?source=post_page-----a723e427d5aa--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a723e427d5aa--------------------------------)
    ·9 min read·Mar 29, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2d64ae634a4dc6519ffaf708147a18f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Erik Mclean](https://unsplash.com/@introspectivedsgn?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/bOJC9SwFfQk?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText).
  prefs: []
  type: TYPE_NORMAL
- en: Data visualizations convey ideas that dataframes and tables cannot. But effectively
    telling a story through data visualization requires an aesthetically pleasing,
    interpretable chart that provides the context necessary for the visualization
    to stand on its own.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, Python contains numerous data visualization libraries, such as
    [Plotly Express](https://plotly.com/python/plotly-express/), that quickly create
    charts via a single line of code [1]. While useful, such charts can rarely stand
    alone in a formal publication or survive scrutiny without further context provided;
    a professional, standalone chart that tells a story through data requires a little
    extra work. This article walks through the steps to elevate a data visualization
    to the next level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Code for this walkthrough is available at the [**GitHub page linked here**](https://github.com/kurtklingensmith/Visualizations).
    Feel free to download the code and follow along in Jupyter notebook — click “code”
    and “Download ZIP” to get the ipynb file.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Data Preparation and Initial Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The libraries used are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Returning to an old favorite dataset, the [Seaborn library](https://seaborn.pydata.org)’s
    automotive dataset (labeled ‘mpg’) provides great data on vehicle fuel consumption
    during the energy crisis era [2]. This data, via use of the groupby function,
    will provide average vehicle miles per gallon (MPG) by year from 1970 to 1982\.
    Here is the code to load and prepare the dataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The dataframe head should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b2ceecdcbc0021090490a730dc198cfd.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'One line of code in plotly express gives the following bar chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fa78a65a40c47f0ef7aaecae1899b5c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: Only a few lines of code were necessary to prepare and visualize the data. But
    would such a visualization be worthy of publication in a magazine or formal business
    report? Probably not.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. The Next Level: Labels, Formats, Colors'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let’s look at color schemes for the chart. Running the following code
    updates the color value and template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The updated chart now appears like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d5297f43b9abd8713a05848cd7f5bec2.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first change in the above code was adding the ‘Average MPG’ column to color.
    While technically redundant (the ‘Average MPG’ is already captured in the y-value,
    or bar height), specifying the color as ‘Average MPG’ allows application of a
    color scale to aid in quick interpretation. In this case, the Plotly diverging
    color scale “RdYlGn” maps nicely to the data: less efficient years are red, while
    more efficient years are green, and the in between are orange and yellow. Discover
    other Plotly color schemes [here](https://plotly.com/python/builtin-colorscales/)
    [3].'
  prefs: []
  type: TYPE_NORMAL
- en: Because the color and y-values are the same, the colorbar that Plotly would
    normally include is redundant; the above code eliminates it. Finally, the code
    changes the default Plotly theme to ‘plotly_white’. Read more about Plotly themes
    [here](https://plotly.com/python/templates/) [4].
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** If considering colorblind-friendly schemes, read [this Towards Data
    Science Article](/two-simple-steps-to-create-colorblind-friendly-data-visualizations-2ed781a167ec)
    on how to adjust color schemes [5]. For this article, the Red-Yellow-Green is
    retained both as a proof of concept as well as the fact that the MPG information
    is still conveyed by the y-axis (bar height) value.'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Labels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next steps label the axes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Plotly will normally default axis titles to the column title of the data in
    the specified axes, but [**update_xaxes()** and **update_yaxes**()](https://plotly.com/python/axes/)
    allows further customization [6]. Note that MPG is spelled out as “Miles Per Gallon”
    to avoid confusing the viewer with acronyms. Additionally, for the x-axis, the
    “dtick” value is set to 1; this ensures each bar along the x-axis has a model
    year value placed below it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code updates the title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The function [**update_layout**()](https://plotly.com/python/reference/layout/)
    allows for the addition of a title [7]. Note the text incorporates HTML-style
    code: <b> and </b> create bold text for the contents within; <i> and </i> do the
    same for italicizing; <br> represents a page break; and lastly, <sup> represents
    a superscript for the chart’s subtitle. The \ between text lines in the title
    allows the text block to continue on the next line of code, creating cleaner code
    blocks.'
  prefs: []
  type: TYPE_NORMAL
- en: The font is also adjustable, as is the font’s color. Find other colors easily
    with Google’s [**color picker**](https://g.co/kgs/KHVrPZ) [8].
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we use the [**add_annotation**()](https://plotly.com/python/text-and-annotations/)
    function to annotate the data source on our chart [9]:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'All of this results in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1c94f5a63974d98a8b5eb05e4e78b4e4.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: Note how the chart has a title and subtitle that introduce the context for the
    data, while the axes provide unambiguous labels and the bars’ height and color
    quickly show each year’s average MPG. Additionally, there is a data source reference
    at the bottom. This could be a good stopping point for a chart headed to publication
    but, to show how far a visualization can go, the next section will introduce some
    more options.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Add Annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add more context to the chart, the following code creates a horizontal line
    representing the average MPG from 1970 to 1982 as well as an annotation box describing
    the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When added to the chart, this yields:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/293e6bbeb1beb33b46ba81e9d296f96e.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: Note how the add_annotation() function allows the creation of a border (bordercolor=‘black’)
    and an arrow. The x and y values in the add_annotation() function position the
    callout and may require some trial and error to get the box at the desired spot.
  prefs: []
  type: TYPE_NORMAL
- en: 'This line and callout box help further emphasize that MPG improved significantly
    in years 1980, 1981, and 1982\. Additionally, it shows that from 1975 to 1979,
    average MPG showed consistent improvement year over year. Suppose it is necessary
    to highlight this period of improvement; it can be done with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The function [**add_vrect()**](https://plotly.com/python/horizontal-vertical-shapes/)
    creates a rectangular box that can highlight a specific section of the graph [10];
    in this case, it highlights the period of consistent improvement in the late 1970’s.
    Placement of the add_vrect() code matters; placing it after the add_hline() function
    means it will be over the horizontal line versus under as seen below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/29b09c0b41b22b79f53ac6f46a219212.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'It may seem like there’s nothing left to add, but there is one more possibility:
    an explanation for the rise in fuel economy. **Let’s assume the chart is part
    of a study that found decreasing engine sizes directly contributed to improvements
    in MPG**. Fortunately, the Seaborn MPG data includes engine displacement data.
    With some data preparation below as well as some new annotations, the final piece
    is ready for the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The data preparation section calculates the average engine displacement in
    the 1970s (70 through 79) as well as the three years from the eighties (80, 81,
    and 82). This is then passed into a text string that is used for the text value
    in the add_annotation() function. The final chart appears as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c0f396f3f8410dec5b6cec4a7166c491.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chart can now stand alone and tell the story of average yearly fuel mileage
    during the energy crisis era. Some final considerations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Less is generally more: stop adding to a chart when it’s reached its ability
    to convey the necessary information given the context the chart is presented in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A standalone infographic might need more items, while a chart displayed during
    an oral presentation or as part of a written report would suffice with fewer items.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color schemes, font choices, and sizes impact readability and accessibility.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the customer cannot understand the mesage of a chart, it’s not the customer’s
    fault.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5\. Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python’s various visualization libraries, to include Plotly Express, offer a
    quick way to generate highly customizable charts that can range from a basic visualization
    to a fully customized standalone product. Building out visualizations with an
    understanding of how to best convey the story results in the most effective messaging.
    Experiment with the code yourself and feel free to [**download the full notebook
    at the GitHub page**](https://github.com/kurtklingensmith/Visualizations).
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate The Final Chart in a Single Block of Code:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'References:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] Plotly, [Plotly Express in Python](https://plotly.com/python/plotly-express/)
    (2023).'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] Seaborn, [Seaborn: statistical data visualization](https://seaborn.pydata.org)
    (2023).'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] Plotly, [Built-in continuous color scales in Python](https://plotly.com/python/builtin-colorscales/)
    (2023).'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] Plotly, [Theming and templates in Python](https://plotly.com/python/templates/)
    (2023).'
  prefs: []
  type: TYPE_NORMAL
- en: '[5] CR Ferreira, [Two Simple Stemps to Create Colorblind-Friendly Data Visualizations](/two-simple-steps-to-create-colorblind-friendly-data-visualizations-2ed781a167ec)
    (2020), Towards Data Science.'
  prefs: []
  type: TYPE_NORMAL
- en: '[6] Plotly, [Axes in Python](https://plotly.com/python/axes/) (2023).'
  prefs: []
  type: TYPE_NORMAL
- en: '[7] Plotly, [Layout in Python](https://plotly.com/python/reference/layout/)
    (2023).'
  prefs: []
  type: TYPE_NORMAL
- en: '[8] Google, [google color picker](https://g.co/kgs/KHVrPZ) (2023).'
  prefs: []
  type: TYPE_NORMAL
- en: '[9] Plotly, [Text and annotations in Python](https://plotly.com/python/text-and-annotations/)
    (2023)'
  prefs: []
  type: TYPE_NORMAL
- en: '[10] Plotly, [Horizontal and Vertical lines and rectangles in Python](https://plotly.com/python/horizontal-vertical-shapes/)
    (2023).'
  prefs: []
  type: TYPE_NORMAL
