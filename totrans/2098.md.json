["```py\n# Libraries\nimport pandas as pd\nimport numpy as np\nfrom darts import TimeSeries\nfrom darts.models import TiDEModel\nfrom darts.dataprocessing.transformers import Scaler\nfrom darts.utils.timeseries_generation import datetime_attribute_timeseries\nfrom darts.utils.likelihood_models import QuantileRegression\nfrom darts.dataprocessing.transformers import StaticCovariatesTransformer\n\n# Global Variables\nTIME_COL = \"Date\"\nTARGET = \"Weekly_Sales\"\nSTATIC_COV = [\"Store\", \"Dept\"]\nFREQ = \"W-FRI\"\nSCALER = Scaler()\nTRANSFORMER = StaticCovariatesTransformer()\n```", "```py\n# read train and test datasets and transform train dataset\ntrain = pd.read_csv('data/train.csv')\ntrain[\"Date\"] = pd.to_datetime(train[\"Date\"])\ntrain[TARGET] = np.where(train[TARGET] < 0, 0, train[TARGET])\ntrain_darts = TimeSeries.from_group_dataframe(\n df=train,\n group_cols=STATIC_COV,\n time_col=TIME_COL,\n value_cols=TARGET,\n static_cols=STATIC_COV,\n freq=FREQ,\n fill_missing_dates=True,\n fillna_value=0)\n```", "```py\n# read test dataset and determine Forecast Horizon\ntest = pd.read_csv('data/test.csv')\ntest[\"Date\"] = pd.to_datetime(test[\"Date\"])\nFORECAST_HORIZON = len(test['Date'].unique())\n```", "```py\n# we get the holiday data that we have in both train and test dataset\nholidays_df = pd.concat([train[[\"Date\", \"IsHoliday\"]], test[[\"Date\", \"IsHoliday\"]]]).drop_duplicates()\n# convert bool to numeric\nholidays_df[\"IsHoliday\"] = holidays_df[\"IsHoliday\"]*1\n# create dynamic covariates for each series in the training darts\ndynamic_covariates = []\nfor serie in train_darts:\n    # add the month and week as a covariate\n    covariate = datetime_attribute_timeseries(\n        serie,\n        attribute=\"month\",\n        one_hot=True,\n        cyclic=False,\n        add_length=FORECAST_HORIZON,\n    )\n    covariate = covariate.stack(\n        datetime_attribute_timeseries(\n            serie,\n            attribute=\"week\",\n            one_hot=True,\n            cyclic=False,\n            add_length=FORECAST_HORIZON,\n        )\n    )\n\n  # create holidays with dates for training and test\n    holidays_serie = pd.merge(pd.DataFrame(covariate.time_index).rename(columns={'time':'Date'}), holidays_df, on='Date', how='left')\n    covariate = covariate.stack(\n                TimeSeries.from_dataframe(holidays_serie, time_col=\"Date\", value_cols=\"IsHoliday\", freq=FREQ)\n            )\n    dynamic_covariates.append(covariate)\n```", "```py\n# scale covariates\ndynamic_covariates_transformed = SCALER.fit_transform(dynamic_covariates)\n# scale data\ndata_transformed = SCALER.fit_transform(train_darts)\n# transform static covariates\ndata_transformed = TRANSFORMER.fit_transform(data_transformed)\n```", "```py\nTiDE_params = {\n    \"input_chunk_length\": 4, # number of weeks to lookback\n    \"output_chunk_length\": FORECAST_HORIZON,\n    \"num_encoder_layers\": 1,\n    \"num_decoder_layers\": 1,\n    \"decoder_output_dim\": 1,\n    \"hidden_size\": 15,\n    \"temporal_width_past\": 4,\n    \"temporal_width_future\": 4,\n    \"temporal_decoder_hidden\": 26,\n    \"dropout\": 0.1,\n    \"batch_size\": 16,\n    \"n_epochs\": 5,\n    \"likelihood\": QuantileRegression(quantiles=[0.25, 0.5, 0.75]),\n    \"random_state\": 42,\n    \"use_static_covariates\": True,\n    \"optimizer_kwargs\": {\"lr\": 1e-3},\n    \"use_reversible_instance_norm\": False,\n}\n\nmodel = TiDEModel(**TiDE_params)\nmodel.fit(data_transformed, future_covariates=dynamic_covariates_transformed, verbose=False)\npred = SCALER.inverse_transform(model.predict(n=FORECAST_HORIZON, series=data_transformed, future_covariates=dynamic_covariates_transformed, num_samples=50))\n```"]