- en: 7 Examples to Master Categorical Data Operations with Python Pandas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python Pandas掌握分类数据操作的7个示例
- en: 原文：[https://towardsdatascience.com/7-examples-to-master-categorical-data-operations-with-python-pandas-51cdcb0228ba](https://towardsdatascience.com/7-examples-to-master-categorical-data-operations-with-python-pandas-51cdcb0228ba)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/7-examples-to-master-categorical-data-operations-with-python-pandas-51cdcb0228ba](https://towardsdatascience.com/7-examples-to-master-categorical-data-operations-with-python-pandas-51cdcb0228ba)
- en: Use category data type when working with low-cardinality categorical features
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在处理低基数类别特征时使用类别数据类型
- en: '[](https://sonery.medium.com/?source=post_page-----51cdcb0228ba--------------------------------)[![Soner
    Yıldırım](../Images/c589572e9d1ee176cd4f5a0008173f1b.png)](https://sonery.medium.com/?source=post_page-----51cdcb0228ba--------------------------------)[](https://towardsdatascience.com/?source=post_page-----51cdcb0228ba--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----51cdcb0228ba--------------------------------)
    [Soner Yıldırım](https://sonery.medium.com/?source=post_page-----51cdcb0228ba--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://sonery.medium.com/?source=post_page-----51cdcb0228ba--------------------------------)[![Soner
    Yıldırım](../Images/c589572e9d1ee176cd4f5a0008173f1b.png)](https://sonery.medium.com/?source=post_page-----51cdcb0228ba--------------------------------)[](https://towardsdatascience.com/?source=post_page-----51cdcb0228ba--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----51cdcb0228ba--------------------------------)
    [Soner Yıldırım](https://sonery.medium.com/?source=post_page-----51cdcb0228ba--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----51cdcb0228ba--------------------------------)
    ·8 min read·Nov 9, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----51cdcb0228ba--------------------------------)
    ·阅读时长8分钟·2023年11月9日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/a0de95c1f991d735d8dc687318a5f381.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a0de95c1f991d735d8dc687318a5f381.png)'
- en: (image created by author)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: （作者创建的图片）
- en: 'Categorical variables can take on a value from a limited number of values,
    which are usually fixed. Here are some examples of categorical variables:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 类别变量可以从有限数量的值中取值，这些值通常是固定的。以下是一些类别变量的例子：
- en: English skill level indicator (A1, A2, B1, B2, C1, C2)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英语水平指标（A1、A2、B1、B2、C1、C2）
- en: Blood type of a person (A, B, AB, 0)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个体的血型（A、B、AB、O）
- en: Demographic information such as race and gender
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人口统计信息，如种族和性别
- en: Education level
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 教育水平
- en: Pandas provides a dedicated data type of categorical variables ( `category`
    or `CategoricalDtype` ). Although such data can also be stored with `object` or
    `string` data types, there are several advantages of using the `category` data
    type. We’ll learn about these advantages but let’s first start with how to work
    with the categorical data.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas提供了一种专用的分类变量数据类型（`category`或`CategoricalDtype`）。尽管这样的数据也可以用`object`或`string`数据类型存储，但使用`category`数据类型有几个优点。我们将了解这些优点，但首先让我们开始学习如何处理分类数据。
- en: When we create a Series or DataFrame with textual data, its data type becomes
    `object` by default. To use `category` data type, we need to explicitly define
    it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们用文本数据创建Series或DataFrame时，其数据类型默认为`object`。要使用`category`数据类型，我们需要明确地定义它。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Although the values are the same, the data types are different as shown with
    `dtype` when you print the Series.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管值相同，但正如你在打印Series时通过`dtype`所示，数据类型不同。
- en: 'We’ll go over 7 sets of examples to learn the following topics:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过7组示例来学习以下主题：
- en: Category data type in DataFrames
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DataFrames中的类别数据类型
- en: Categories
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类别
- en: Adding and updating values
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加和更新值
- en: Adding and removing categories
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加和删除类别
- en: Order among categories
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类别之间的顺序
- en: Renaming categories
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重命名类别
- en: Advantages of using category data type
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用类别数据类型的优点
- en: Example 1 — category data type in DataFrames
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 1 — DataFrames中的类别数据类型
- en: We can declare `category` data type when creating the Series or DataFrame as
    we did above. We can also convert them to `category` afterwards using the `astype`
    function.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在创建Series或DataFrame时声明`category`数据类型，如上所述。我们也可以使用`astype`函数将其转换为`category`。
- en: In the code snippet below, we first create a DataFrame with two columns of `object`
    data type. Then, we change the data type of the `blood_type` column to `category`
    . Remember each column of a DataFrame is a Series.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，我们首先创建一个包含两个`object`数据类型的列的DataFrame。然后，我们将`blood_type`列的数据类型更改为`category`。记住，DataFrame的每一列都是一个Series。
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Example 2 — categories
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 2 — 类别
- en: A Pandas Series of `category` data type is defined with the categories. By default,
    categories are determined as the unique values in the series.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`category` 数据类型的 Pandas Series 是通过类别来定义的。默认情况下，类别是 Series 中的唯一值。'
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The categories are shown when we print the brands. We can also extract them
    using the `categories` method available via the cat accessor.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 打印品牌时显示类别。我们也可以使用通过 cat 访问器提供的 `categories` 方法来提取它们。
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It returns an index of the categories.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回类别的索引。
- en: 'We can also define categories while creating the Series, which can be done
    as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在创建 Series 时定义类别，具体方法如下：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The value “Honda” does not exist in the Series currently but it can be added
    since it’s listed among the categories.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当前 Series 中不存在值“本田”，但它可以被添加，因为它列在类别中。
- en: Example 3 — adding and updating values
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 3 — 添加和更新值
- en: To add a new value in a Series of `category` data type or replace an existing
    one, we should pick a value from the defined categories. Otherwise, Pandas change
    the data type of the Series to `object` .
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 `category` 数据类型的 Series 中添加新值或替换现有值，我们应该从定义的类别中选择一个值。否则，Pandas 会将 Series
    的数据类型更改为 `object`。
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When we added the new item “Honda”, which is not among the listed categories,
    we ended up with a Series of `object` data type.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们添加了新的项“本田”时，它不在列出的类别中，最终得到的 Series 的数据类型为 `object`。
- en: If we try to change one of the existing values with a value different from the
    existing categories, Pandas will raise a type error.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试将现有值更改为不同于现有类别的值，Pandas 会引发类型错误。
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There are different ways of fixing this problem. For instance, we can add “Honda”
    as a new category before using it in the Series.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的方法有很多。例如，我们可以在使用 Series 之前将“本田”作为新类别添加。
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Example 4— adding and removing categories
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 4—添加和删除类别
- en: We can add multiple categories at once using a Python list.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Python 列表一次添加多个类别。
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Just like we can add new categories, it is possible to remove existing categories.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们可以添加新类别一样，也可以删除现有类别。
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It is important to note that if the Series includes values that belong to a
    removed category (i.e. a category that no longer exists), these values become
    a missing value (i.e. NaN).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，如果 Series 包含属于已移除类别的值（即不再存在的类别），这些值将变为缺失值（即 NaN）。
- en: We can use the `categories` method to extract the existing categories from a
    Series.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `categories` 方法从 Series 中提取现有类别。
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Example 5— order among categories
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 5—类别之间的顺序
- en: In some cases, there is an order among categories (e.g. S < M < L). There are
    different ways of enforcing such as order.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，类别之间有顺序（例如 S < M < L）。有不同的方法来强制执行这种顺序。
- en: One option is to use the `as_ordered` function to add an order to an existing
    Series of categorical data.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一种选择是使用 `as_ordered` 函数为现有的分类数据 Series 添加顺序。
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We now see an order among the categories but it’s wrong. Pandas assigns alphabetical
    order for the string data, which actually makes sense. We can fix this by reordering
    the categories (check the next example).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在看到类别之间有顺序，但顺序错误。Pandas 为字符串数据分配字母顺序，这实际上是有意义的。我们可以通过重新排序类别来修复这个问题（请查看下一个示例）。
- en: The sizes Series in the previous example have ordered categories but with a
    a wrong order. Let’s fix it using the `reorder_categories` method.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个示例中的 sizes Series 有排序的类别，但顺序错误。让我们使用 `reorder_categories` 方法来修复它。
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We write the categories in the desired order inside a Python list and pass it
    to the `reorder_categories` method.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将所需的类别顺序写在 Python 列表中，并将其传递给 `reorder_categories` 方法。
- en: To remove the order from the categories, we can use the `as_unordered` method.
    Let’s apply it to the sizes Series created in the previous example.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要从类别中移除顺序，我们可以使用 `as_unordered` 方法。让我们将其应用于之前示例中创建的 sizes Series。
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It is also possible to enforce the order while creating the Series using the
    `ordered` parameter.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 Series 时也可以通过使用 `ordered` 参数来强制执行顺序。
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The ordering is determined based on the order in which we write the categories
    (in this example, it’s C, B, A).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 顺序是根据我们写入类别的顺序来确定的（在此示例中为 C、B、A）。
- en: Example 6— renaming categories
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 6—重命名类别
- en: We can use the `rename_categories` method if we need to rename the categories.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要重命名类别，我们可以使用 `rename_categories` 方法。
- en: In the previous example, we created a Series called “division” with the categories
    C, B, and A. Let’s rename these categories.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，我们创建了一个名为“division”的 Series，包含类别 C、B 和 A。让我们重命名这些类别。
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As we see in the output, renaming categories also updates the values in the
    Series.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在输出中看到的，重命名类别也会更新 Series 中的值。
- en: Example 7— Advantages of using category data type
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 7——使用类别数据类型的优势
- en: The main data structure of Pandas is DataFrame, which is a two-dimensional data
    structure with labeled rows and columns. Each column in a DataFrame is also a
    Series object. Thus, we can easily use categorical data types in a DataFrame.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 的主要数据结构是 DataFrame，它是一个带有标签的二维数据结构。DataFrame 中的每一列也是一个 Series 对象。因此，我们可以很容易地在
    DataFrame 中使用类别数据类型。
- en: In this example, we’ll create a sample DataFrame and then add a new column by
    changing the data type of an existing column to category.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将创建一个示例 DataFrame，然后通过将现有列的数据类型更改为类别类型来添加一个新列。
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The DataFrame we created looks like below. The `brand` and `brand_categorical`
    columns store the same data but with different data types.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的 DataFrame 如下所示。`brand` 和 `brand_categorical` 列存储了相同的数据，但数据类型不同。
- en: '![](../Images/b69016b17a2ca150af7dccebcecb961d.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b69016b17a2ca150af7dccebcecb961d.png)'
- en: The first 5 rows of the cars DataFrame (image by author)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 车辆 DataFrame 的前 5 行（图像来源：作者）
- en: What is the purpose of using categorical data type over object or string data
    types? The data is the same anyways.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类别数据类型而不是对象或字符串数据类型的目的是什么？数据本身还是一样的。
- en: The answer is the memory usage. Especially if the number of distinct values
    is much less than the total number of values (low-cardinality), you’ll save a
    ton of memory space by using category data type instead of object.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是内存使用情况。特别是当不同值的数量远低于总值数量（低基数）时，使用类别数据类型而不是对象类型可以节省大量的内存空间。
- en: Let’s confirm by calculating the memory usage of the columns in the cars DataFrame.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过计算车辆 DataFrame 中列的内存使用量来确认。
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: It calculates the memory usage in bytes. We use 8 times less memory with category
    data type compared to the object data type. This difference matters more when
    we work with larger datasets (e.g. millions of rows).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 它计算的是以字节为单位的内存使用量。使用类别数据类型相比于对象数据类型，可以节省 8 倍的内存。当我们处理更大的数据集（例如，数百万行）时，这种差异更为重要。
- en: Final words
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结语
- en: Category data type is relatively less common than other string-based data types.
    The reason might be that we usually encode string-based data before using it in
    a machine learning model. However, even for data cleaning and preparation, category
    data type offers important advantages. Thus, if a string-based variable contains
    a few distinct values compared to the total values, I strongly recommend using
    category data type.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 类别数据类型相比其他基于字符串的数据类型相对较少见。原因可能是我们通常在将字符串数据用于机器学习模型之前会对其进行编码。然而，即使在数据清理和准备过程中，类别数据类型也提供了重要的优势。因此，如果一个基于字符串的变量相对于总值包含的不同值较少，我强烈建议使用类别数据类型。
- en: Thank you for reading. Please let me know if you have any feedback.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如有任何反馈，请告诉我。
