- en: Unlock Data Science Potential with Your Laptop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/unlock-data-science-potential-with-your-laptop-64c64652e906](https://towardsdatascience.com/unlock-data-science-potential-with-your-laptop-64c64652e906)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/db0810c2224728333d6fa9d0907305a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [photo nic](https://unsplash.com/@chiro?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Your laptop, from zero to hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@mastafa.foufa?source=post_page-----64c64652e906--------------------------------)[![Mastafa
    Foufa](../Images/2e0b26ed83f04e943438afa1aab462a8.png)](https://medium.com/@mastafa.foufa?source=post_page-----64c64652e906--------------------------------)[](https://towardsdatascience.com/?source=post_page-----64c64652e906--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----64c64652e906--------------------------------)
    [Mastafa Foufa](https://medium.com/@mastafa.foufa?source=post_page-----64c64652e906--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----64c64652e906--------------------------------)
    ·6 min read·Nov 7, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: As a data scientist, you know how important it is to have a reliable and efficient
    laptop that can handle all the tasks and tools you need for your projects.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you are working with large datasets, complex models, or BI visualizations,
    you want to avoid any technical issues or performance bottlenecks that could compromise
    your results. That is why I believe setting up your laptop for success is a crucial
    step in your data science journey.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note. This article is mostly for Windows users.** Though, some of this article
    may be of interest to Linux and Mac users.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: By following our steps and tips, you will be able to transform your laptop into
    a powerful and productive DS machine that can handle any task or challenge that
    you may face.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s get started and **set you up for success**!
  prefs: []
  type: TYPE_NORMAL
- en: Most important — What you can’t live without
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**1\. Install Anaconda Prompt**'
  prefs: []
  type: TYPE_NORMAL
- en: Surprisingly, not every Data Scientist is using **Anaconda**. Don’t be one of
    them.
  prefs: []
  type: TYPE_NORMAL
- en: It is essential to create virtual environments and not break your operating
    system when installing libraries. For every project, create a **conda** environment
    and install relevant libraries within this environment only.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**. Make sure you have **pip** installed in your conda environment. It
    often happens that when using pip install on a new conda environment, you are
    using your pip from the default conda environment, hence it is not using the new
    one.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/929d6ed9abcc0c3d9cb545d79f699271.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Resource**. From the author.'
  prefs: []
  type: TYPE_NORMAL
- en: If you cannot use **conda** from the terminal, and have the following issue,
    you essentially need to add Anaconda to your path by updating your environment
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8c489b54267d40fa9142bafbb89b7e11.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Resource**. From the author.'
  prefs: []
  type: TYPE_NORMAL
- en: More precisely, to add Anaconda to your environment variables, you can follow
    the steps given on [stackoverflow](https://stackoverflow.com/questions/44515769/conda-is-not-recognized-as-internal-or-external-command).
    Below, we can see my edits based on where Anaconda was installed on my personal
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9f7915d3be9ad255288e2304cd15951d.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Resource**. From the author.'
  prefs: []
  type: TYPE_NORMAL
- en: My suggestion here is to let Anaconda do that for you during the installation
    process. When prompted whether to add Anaconda3 to your path, click **yes**.
  prefs: []
  type: TYPE_NORMAL
- en: The [Anaconda documentation](https://docs.anaconda.com/free/anaconda/install/uninstall/#simple-remove)
    outlines thoroughly how to uninstall Anaconda.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, note that there are alternatives to Anaconda virtual environments.
    Among them, one can commonly find the python virtual environment (***virtualenv).***
    However, I personally go for **conda.**
  prefs: []
  type: TYPE_NORMAL
- en: To create a `virtualenv`, one can call `virtualenv YOUR_ENV_NAME`, where `*YOUR_ENV_NAME*`is
    a directory to place the new virtual environment with all the packages of interest.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The most important thing to remember here is that it is important to create
    a separate environment with all the related packages useful for your project.
    For example, if tomorrow a new project is given to you, don’t hurry up into the
    project without setting the proper first layer with a dedicated environment containing
    all the required packages. Such environment can then be shared in many ways with
    your peers. In my experience, following this process has also helped me push my
    models to production much faster.
  prefs: []
  type: TYPE_NORMAL
- en: '**2\. Get Linux commands available on your terminal**'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get Linux commands, here is the trick. You will install **git**, the traditional
    way. Then, for Windows users like myself, you need to change your environment
    variables [*System variables*] as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Install **git**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add **C:\Program Files\Git\usr\bin** to your path variable [*System variables*]
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Important note.** If you don’t see a “**usr**” folder in your Git folder,
    it’s because it’s hidden. Add the folder **exactly as stated above and shown below**,
    even though you cannot see it.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Question**.For some reason, the “ls”, “clear”, etc, linux commands work and
    within a few weeks disappear for me. Can anyone tell me why I have to go over
    the above step and edit environment variables that often?'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/b41ba932ab0dd9cd8b68c8aa8512f50b.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Resource**. From the author.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I personally can’t code on my local machine without those commands. My **most
    used commands** are:'
  prefs: []
  type: TYPE_NORMAL
- en: '*ls/cd/mkdir*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conda related commands (*conda create — name env_name python=3*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pip related commands (*pip install …*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: docker related commands *(when working with docker*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**3\. Get an IDE**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Visual Studio Code** or **PyCharm**.'
  prefs: []
  type: TYPE_NORMAL
- en: I used to work heavily on PyCharm. I have recently switched to Visual Studio
    Code. Both are great options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install all relevant extensions. For example, for VS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**python** extension'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**jupyter** extension'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**github copilot** extension'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/77f47fb007d71107e560445fbb005845.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Resource**. From the author.'
  prefs: []
  type: TYPE_NORMAL
- en: Building clean code is almost essential nowadays, especially in big tech companies.
    Hence, I suggest you leverage one of the above editors where one can debug the
    code whilst keeping it clean and organized.
  prefs: []
  type: TYPE_NORMAL
- en: '**4\. Get to know how to replicate your work in the cloud**'
  prefs: []
  type: TYPE_NORMAL
- en: It is not really part of your laptop but the industry is growingly using the
    cloud for all kinds of projects. You might be working in a company leveraging
    Microsoft Azure, Amazon AWS, or Google cloud. Quite often, you will be asked to
    directly work there. Hence, it’s a good skill to be able to replicate what you
    do locally in the cloud itself.
  prefs: []
  type: TYPE_NORMAL
- en: I know in Azure Machine Learning studio, it’s quite easy to create your **conda**
    environment and hence following the above steps will ease out your transition
    to the cloud. Do some homework to understand how that relates to other cloud DS
    platforms. On the other hand, *Azure Synapses* work rather differently with a
    backend leveraging **pyspark**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Question to you**. How would you optimize the transition from your local
    machine to the cloud?'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: More exotic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Windows Terminal**'
  prefs: []
  type: TYPE_NORMAL
- en: Linux commands such as “ls”, “cd”, etc., are extremely valuable. I had that
    configured a long time ago in my previous Surface laptop. This time, I struggled
    a bit to find relevant documentation to set this up.
  prefs: []
  type: TYPE_NORMAL
- en: Initially I thought that Windows Terminal came in with the Linux commands by
    default. Though, it is not the case. Hence, you can see the Windows Terminal essentially
    as a fancy terminal where you can split your screens and select multiple terminals
    within it, such as Command Prompt or PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: In my experience, this is a top productivity feature that I consistently use
    with a terminal for my **git** work, another for running and debugging my python
    project, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8a1533d1d691a19f74f3b219becd9f30.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Resource.** From [https://en.wikipedia.org/wiki/Windows_Terminal](https://en.wikipedia.org/wiki/Windows_Terminal).'
  prefs: []
  type: TYPE_NORMAL
- en: '**“Windows Terminal** is a [multi-tabbed](https://en.wikipedia.org/wiki/Tabbed)
    [terminal emulator](https://en.wikipedia.org/wiki/Terminal_emulator) that [Microsoft](https://en.wikipedia.org/wiki/Microsoft)
    has developed for [Windows 10](https://en.wikipedia.org/wiki/Windows_10) and later[[4]](https://en.wikipedia.org/wiki/Windows_Terminal#cite_note-4)
    as a replacement for [Windows Console](https://en.wikipedia.org/wiki/Windows_Console).[[5]](https://en.wikipedia.org/wiki/Windows_Terminal#cite_note-introducing-windows-terminal-5)
    It can run any command-line app in a separate tab. It is preconfigured to run
    [Command Prompt](https://en.wikipedia.org/wiki/Windows_Command_Prompt), [PowerShell](https://en.wikipedia.org/wiki/PowerShell),
    [WSL](https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux), [SSH](https://en.wikipedia.org/wiki/SSH),
    and Azure Cloud Shell Connector.”[[6]](https://en.wikipedia.org/wiki/Windows_Terminal#cite_note-:1-6)[[7]](https://en.wikipedia.org/wiki/Windows_Terminal#cite_note-:0-7)
    From Wikipedia'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/8783c6afbef6a8bc3e24ad9b315cd95b.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [JJ Ying](https://unsplash.com/@jjying?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: GPU for Deep Learning.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Cuda* is often the keyword you are looking for here. Though, for macOS there
    are other options.'
  prefs: []
  type: TYPE_NORMAL
- en: Deep Learning and statistical projects requiring a lot of compute power often
    benefit from running on GPU given how faster it is compared to CPU. Historically,
    I have had a lot of issues running things on my local machine with GPU and I would
    often look for cloud solutions where this is naturally embedded and only require
    some tools in python like **pytorch** or **tensorflow** to push the operations
    on GPU. Azure ML, Google Colab and other alternative cloud solutions for Machine
    Learning all offer GPU capabilities without the need to install all sorts of things.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/76d6d0c5aad21f5bef250d38c8d11f0b.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [BoliviaInteligente](https://unsplash.com/@boliviainteligente?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 👋 One last thing — want to connect?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I am a Data Scientist at Microsoft and an ex-teacher at EPITA Paris. I have
    8 patents in AI and continuously push AI to the edge.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I would love you to be among my first 1,000 followers.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Also, follow me on* [*LinkedIn*](https://www.linkedin.com/in/mastafa-foufa-666a1a109/)*.*'
  prefs: []
  type: TYPE_NORMAL
