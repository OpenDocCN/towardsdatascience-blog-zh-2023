["```py\nsns.histplot(penguins, x=\"flipper_length_mm\", hue=\"species\");\n```", "```py\nsns.kdeplot(penguins, x=\"flipper_length_mm\", fill=True, hue=\"species\");\n```", "```py\np = so.Plot(penguins, x=\"flipper_length_mm\", color=\"species\")\n```", "```py\np.add(so.Bars(), so.Hist())\n```", "```py\np.add(so.Area(), so.KDE())\n```", "```py\n%matplotlib inline\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\n\nimport pandas as pd\n\nsns.set()\npenguins = sns.load_dataset('penguins')\n```", "```py\nsns.barplot(penguins, x=\"island\", y=\"body_mass_g\", hue=\"species\");\n```", "```py\n(\n    so.Plot(penguins, x=\"island\", y=\"body_mass_g\", color=\"species\")\n    .add(so.Bar(), so.Dodge())\n)\n```", "```py\nsns.relplot(penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\");\n```", "```py\n(\n    so.Plot(penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", color=\"species\")\n    .add(so.Dots())\n)\n```", "```py\ntips = sns.load_dataset(\"tips\")\n```", "```py\nday_mean = tips[['day', 'tip']].groupby('day').mean().round(2).reset_index()\n```", "```py\n(\n    day_mean\n    .pipe(so.Plot, y=\"day\", x=\"tip\", text=\"tip\")\n    .add(so.Bar(width=.5))\n    .add(so.Text(color='w', halign=\"right\"))\n)\n```", "```py\nax = sns.barplot(day_mean, x=\"tip\", y=\"day\")\n\nfor p in ax.patches:\n    width = p.get_width()\n    ax.text(width,\n            p.get_y() + p.get_height()/2,\n            '{:1.2f}'.format(width),\n            ha=\"right\", va=\"center\")\nplt.show()\n```", "```py\ncitibike = pd.read_csv(\"../data/CitiBike-2021-combined.csv\", index_col=\"ID\")\ncitibike.info()\n```", "```py\nData columns (total 15 columns):\n #   Column                   Non-Null Count   Dtype         \n---  ------                   --------------   -----         \n 0   Trip Duration            735502 non-null  int64         \n 1   Start Time               735502 non-null  datetime64[ns]\n 2   Stop Time                735502 non-null  datetime64[ns]\n 3   Start Station ID         735502 non-null  int64         \n 4   Start Station Name       735502 non-null  object        \n 5   Start Station Latitude   735502 non-null  float64       \n 6   Start Station Longitude  735502 non-null  float64       \n 7   End Station ID           735502 non-null  int64         \n 8   End Station Name         735502 non-null  object        \n 9   End Station Latitude     735502 non-null  float64       \n 10  End Station Longitude    735502 non-null  float64       \n 11  Bike ID                  735502 non-null  int64         \n 12  User Type                735502 non-null  object        \n 13  Birth Year               735502 non-null  int64         \n 14  Gender                   735502 non-null  object           \ndtypes: datetime64[ns](2), float64(4), int64(8), object(6)\nmemory usage: 117.8+ MB\n```", "```py\ncitibike['Start Time'] = pd.to_datetime(citibike['Start Time'])\ncitibike['Stop Time'] = pd.to_datetime(citibike['Stop Time'])\n\ncitibike['Day Of Week'] = citibike['Start Time'].dt.day_of_week\ncitibike['Start Month'] = citibike['Start Time'].dt.month\nday_dict = {0: 'Mon', 1: 'Tue', 2: 'Wen', 3: 'Thu', 4: 'Fri', 5: 'Sat', 6: 'Sun'}\ncitibike['Day Of Week'] = citibike['Day Of Week'].replace(day_dict)\n```", "```py\ncitibike['Gender'] = citibike['Gender'].replace({0: 'Unknown', 1: 'Male', 2: 'Female'})\ncitibike['Decade'] = (citibike['Birth Year'] // 10 * 10).astype(str) + 's'\ncitibike['Duration_Min'] = citibike['Trip Duration'] // 60\n```", "```py\ncitibike_sample = citibike.sample(n=10000, random_state=1701)\n```", "```py\n(\n    citibike.groupby('Start Month').size().reset_index(name=\"Count\")\n    .pipe(so.Plot, x=\"Start Month\", y=\"Count\")\n    .add(so.Line(marker='o', edgecolor='w'))\n    .add(so.Text(valign='bottom'), text='Count')\n)\n```", "```py\n(\n    so.Plot(citibike_sample, x=\"Day Of Week\", color=\"Gender\")\n    .scale(x=so.Nominal(order=['Mon', 'Tue', 'Wen', 'Thu', 'Fri', 'Sat', 'Sun']))\n    .add(so.Bar(), so.Hist(stat=\"proportion\"), so.Dodge())\n)\n```", "```py\nmean = citibike_sample[\"Duration_Min\"].mean()\nstd = citibike_sample[\"Duration_Min\"].std()\ncitibike_filterd = citibike_sample.query(\"(Duration_Min > @mean - @std) and (Duration_Min < @mean + @std)\")\n\n(\n    so.Plot(citibike_filterd, x=\"Duration_Min\")\n    .facet(col=\"Gender\")\n    .layout(size=(6,3))\n    .add(so.Bars(), so.Hist(stat=\"proportion\"))\n)\n```", "```py\n(\n    so.Plot(citibike_filterd, x=\"Duration_Min\")\n    .facet(col=\"Gender\", row=\"User Type\")\n    .share(y=False)\n    .add(so.Bars(), so.Hist(stat=\"proportion\"))\n)\n```", "```py\nstart_end_station = citibike_sample\n                    .groupby([\"Start Station ID\", \"End Station ID\"])\n                    .size().reset_index(name=\"Count\")\n```", "```py\np8 = start_end_station[\"Count\"].quantile(.8)\nstart_end_filtered = start_end_station[start_end_station[\"Count\"] >= p8]\n```", "```py\n(\n    so.Plot(start_end_filtered, x=\"Start Station ID\", y=\"End Station ID\",\n            pointsize=\"Count\", color=\"Count\")\n    .add(so.Dots())\n)\n```"]