- en: An Easy Guide to Master Moving Average and Running Total in SQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/an-easy-guide-to-master-moving-average-and-running-total-in-sql-f1fa7acc9b59](https://towardsdatascience.com/an-easy-guide-to-master-moving-average-and-running-total-in-sql-f1fa7acc9b59)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Unlocking Advanced Data Analysis in SQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://iffatm.medium.com/?source=post_page-----f1fa7acc9b59--------------------------------)[![Iffat
    Malik](../Images/7be3b651053507de2077b3c3c9d3a408.png)](https://iffatm.medium.com/?source=post_page-----f1fa7acc9b59--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f1fa7acc9b59--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f1fa7acc9b59--------------------------------)
    [Iffat Malik](https://iffatm.medium.com/?source=post_page-----f1fa7acc9b59--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f1fa7acc9b59--------------------------------)
    ·10 min read·Jul 11, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/94d341250c8e2d199fd84500cc7e30b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: If you work with data, you’ve likely come across the terms ‘*Moving Average’*
    and ‘*Running Total’* quite frequently. Data professionals often refer to the
    saying,
  prefs: []
  type: TYPE_NORMAL
- en: “ The trend is your friend. “
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Having a clear understanding of the trend is crucial for making accurate forecasts
    and informed decisions. However, determining the trend is not always a straightforward
    task. This is where a simple moving average comes into the picture. By tracking
    the trend over a defined time period, it helps identify and mitigate noise while
    smoothing out data fluctuations. This technique enhances our ability to analyse
    patterns effectively and make reliable predictions.
  prefs: []
  type: TYPE_NORMAL
- en: Before diving into the code demonstration, let’s familiarise ourselves with
    a few key terms.
  prefs: []
  type: TYPE_NORMAL
- en: What is Moving Average?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Moving Average* is also known as *Rolling Average, Running Average*, or *Rolling
    Mean.* You calculate it by taking the average of a set of values over a specific
    period of time.'
  prefs: []
  type: TYPE_NORMAL
- en: It provides a standardised and concise way to summarise and analyse data, revealing
    the overall trend and enabling data professionals, and decision-makers to draw
    meaningful conclusions based on distribution, central tendency, variability, and
    relationship within a dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Many people are enthusiastic about tracking their daily step counts. So, let’s
    use this to understand the concept of moving average. Let’s say, instead of focusing
    solely on the number of steps we take each day, we calculate a 7-day moving average
    of step count.
  prefs: []
  type: TYPE_NORMAL
- en: To calculate the 7-day moving average, add the step counts from the past seven
    days and divide the sum by 7.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d944cba4ed0a758dd3219df14ab12fd1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Considering the calculation in the above image, the moving average of *7928.57*
    steps gives us a better understanding of our overall activity levels. By comparing
    this average to the daily step count, we can see whether we consistently meet
    or surpass the average.
  prefs: []
  type: TYPE_NORMAL
- en: If the daily step count consistently stays above the moving average, it indicates
    we are maintaining a higher level of activity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the other hand, if the daily step count consistently falls below the moving
    average, it may suggest a decrease in our overall activity level.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/84c5fe34a623c4fde129f5db1d908c36.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Using a moving average helps us gain insight into the general trend of our step
    count and provides a clearer picture of our fitness progress over time, allowing
    us to make adjustments if needed and set realistic goals for improving our activity
    level.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is Running Total?**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Running Total* is also referred to as *Cumulative Sum.* It is the summation
    of the values in the current row and all the rows above the current row.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say we have a budget spreadsheet to track the daily expenses. By calculating
    a running total of expenses, we can gain insights into,
  prefs: []
  type: TYPE_NORMAL
- en: How much we have spent so far in the month,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How close are we to reaching the spending limit, or
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there are any spending patterns emerging over time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/2aeec239669a06840cdc05f32a8c9c3e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: This will help us make informed decisions about adjusting our spending habits,
    reallocating funds, or identifying areas where we may need to cut back.
  prefs: []
  type: TYPE_NORMAL
- en: '**When do we use them?**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Moving averages and running totals can be used in a variety of situations,
    from everyday examples we just talked about earlier to more complex ones like
    time series forecasting or analysing stock market data. These techniques provide
    useful insights and analysis capabilities for a wide range of common and more
    advanced scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: Moving averages and rolling totals are useful for understanding how sales and
    demand change over time. By calculating these measures using existing sales data,
    businesses can identify trends, and patterns in demand, and recognise any seasonal
    variations in sales. This information is helpful in anticipating demand, planning
    production, managing existing inventory, finding opportunities to increase sales
    in specific areas or periods, optimise production schedules to avoid stock-outs
    or excess inventory, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These measures are used to track how well a business is performing over time.
    For example, by adding up KPIs (Key Performance Indicators) like total sales revenue,
    customer acquisition, or website traffic over a specific period, businesses can
    see how their performance is changing, set goals, and measure progress toward
    those goals. It helps them understand the overall trend and evaluate their success.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They can be used to analyse customer behaviour data. For instance, A retailer
    website can track the average amount spent by customers, by calculating the moving
    average of the order values over a certain period. This helps identify any changes
    in customer spending patterns over time. A declining moving average might signal
    a need to investigate factors impacting customer spending and implement strategies
    to boost it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the stock market, an uptrend refers to a consistent increase in the price
    of a stock over a period of time. This indicates a positive market sentiment and
    potential for price appreciation. Conversely, a downtrend refers to a consistent
    decrease in the stock price, indicating a negative market sentiment and potential
    for further price decline. Traders use moving averages as reference points: if
    the stock price remains above the moving average, it suggests an uptrend, and
    if it stays below, it indicates a downtrend. This helps traders make decisions
    about buying or selling stocks based on the market trend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While moving averages emphasise on trends, running totals provide valuable insights
    into cumulative values.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Scenario
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Say, We have a table named *“ARTICLES”* that captures daily view counts for
    various articles from *1st June 2023* to *10th June 2023*. Each entry in the table
    represents a date, article title, and the number of views recorded on that day.
    You can find the source data and code file in my [*GitHub Repository*](https://github.com/PhoenixIM/All_Things_SQL/tree/main/MovingAverage_RunningTotal),
  prefs: []
  type: TYPE_NORMAL
- en: Here is the sample data,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3a57a3617bb0952680aea5125bf4dd83.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'The most convenient and straightforward approach to compute both moving average
    and running total in SQL is by utilising Window Functions. To revisit the concepts
    of Window Functions and Aggregate Functions, you can read the detailed explanation
    available here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-use-sql-aggregate-functions-92f7244a07cb?source=post_page-----f1fa7acc9b59--------------------------------)
    [## SQL Aggregate Functions for your next Data Science interview'
  prefs: []
  type: TYPE_NORMAL
- en: Back To Basics | SQL fundamentals for beginners
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-use-sql-aggregate-functions-92f7244a07cb?source=post_page-----f1fa7acc9b59--------------------------------)
    [](/window-functions-a-must-know-for-data-engineers-and-data-scientists-4dd3e4ad0d2?source=post_page-----f1fa7acc9b59--------------------------------)
    [## Window Functions — A must know for Data Engineers and Data Scientists
  prefs: []
  type: TYPE_NORMAL
- en: Back To Basics | SQL fundamentals for beginners
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/window-functions-a-must-know-for-data-engineers-and-data-scientists-4dd3e4ad0d2?source=post_page-----f1fa7acc9b59--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '**Calculating Running Total using Window Function**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Continuing to our demo, imagine you need to find out a cumulative sum of the
    total views on article *“Aggregate Functions in SQL”* by the end of each day,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/26c8308c1a907989661e5377e5787cc1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Here, we have used *OVER()* clause in the above query, it is essential as it
    identifies a function as a Window Function and its purpose is to define a specific
    group of rows (a window) on which the Window Function will perform its calculations.
    But wait, that’s not all.
  prefs: []
  type: TYPE_NORMAL
- en: In the code above we have also used a *FRAME* clauseas,
  prefs: []
  type: TYPE_NORMAL
- en: RANGE BETWEEN **UNBOUNDED PRECEDING** AND **CURRENT ROW**
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What is it? Essentially, the Window Function relies on either *ROW* or *RANGE*
    to determine which values should be considered for the calculation within the
    partition, by specifying the starting and ending points of the selected subset.
  prefs: []
  type: TYPE_NORMAL
- en: So here, the *FRAME* clause specifies the size of the frame - *the value of
    the current row and the values of all the rows above the current row* - on which
    the *SUM(NO_OF_VIEWS)* needs to be performed. It keeps adding the value of *“NO_OF_VIEWS”*
    as it goes along, giving us a running total for each row ordered by *DATE*.
  prefs: []
  type: TYPE_NORMAL
- en: In the example above, if we omit the *RANGE* clause, the result will remain
    unchanged. Can you guess why? Whenever we use *ORDER BY* clause in a Window Function,
    the default frame is, ‘*RANGE BETWEEN UNBOUNDED**PRECEDING AND CURRENT**ROW’.*
    However, personally, I find it beneficial to include the *RANGE* or *ROW* clause
    as it enhances clarity and understanding. Inevitably, there will be a point in
    the future when someone else inherits your code. It is always advisable to write
    your code in a manner that makes it easier for others to understand and work with
    it.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about *FRAME* clause here,
  prefs: []
  type: TYPE_NORMAL
- en: '[](/anatomy-of-sql-window-functions-7256d8cf509a?source=post_page-----f1fa7acc9b59--------------------------------)
    [## Anatomy of SQL Window Functions'
  prefs: []
  type: TYPE_NORMAL
- en: Back To Basics | SQL fundamentals for beginners
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/anatomy-of-sql-window-functions-7256d8cf509a?source=post_page-----f1fa7acc9b59--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s do the same analysis for all the articles - find out a cumulative
    sum of the total views of each article by the end of each day,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/134b4630d684ece90b15791e0676dd92.png)'
  prefs: []
  type: TYPE_IMG
- en: GIF by author
  prefs: []
  type: TYPE_NORMAL
- en: Here, we divided the data into partitions based on the *ARTICLE_TITLE*. Then,
    we performed a *SUM(NO_OF_VIEWS)* calculation for each partition as defined by
    the *FRAME* clause.
  prefs: []
  type: TYPE_NORMAL
- en: For a better understanding, please refer to the image provided below. It illustrates
    the calculations performed for a single partition. The same logic and calculations
    are applicable to all other partitions as well.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0e6c4f7eac7288b772bd77d99f14405e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Calculating Moving Average using Window Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s determine the performance of each article by calculating a 3-day moving
    average of the total number of views per day. This will give us insights into
    how the articles are performing over time.
  prefs: []
  type: TYPE_NORMAL
- en: In simple terms, a 3-day moving average means we calculate the average number
    of views for three consecutive days. To do this, we add up the views for the current
    day, the day before, and the day before that. Then, we divide the total by 3 to
    find the average. This helps us understand the average popularity of articles
    over a short period of time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/83f08ac64793ba987fdbde7defeea430.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we have utilised the *FRAME* clause as *“ROWS BETWEEN 2 PRECEDING
    AND CURRENT ROW.”* This indicates that when calculating the average of *NO_OF_VIEWS*,
    the function considers the value of the current row as well as the values from
    the two preceding days.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/687650cd976993d11fa89b4f78ced595.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: One noticeable observation in the output is that when the number of views is
    very high or low, the moving average tends to smooth out those extreme values
    and give values that are not as extreme. If we plot the daily number of views
    and the 3-day moving average on a line chart; this is what it looks like,
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/718659998c0acac18c7e965a3a9fab7f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author — Daily Number of Views vs 3 Days Moving Average - Individual
    View
  prefs: []
  type: TYPE_NORMAL
- en: Here, the blue line represents the number of daily view counts and the red line
    represents the 3-days moving average. As I mentioned before, the moving average
    line (red line) appears smoother when compared to the line representing the daily
    view count (blue line).
  prefs: []
  type: TYPE_NORMAL
- en: The primary objective of using the moving average technique is to achieve this
    smoothing effect that helps eliminate or reduce noise from the data.
  prefs: []
  type: TYPE_NORMAL
- en: In this context, noise refers to short-term irregularities or fluctuations that
    exist within the data. By minimising or removing noise, we can focus on underlying
    patterns and trends without being overly influenced by any random or temporary
    fluctuations.
  prefs: []
  type: TYPE_NORMAL
- en: We calculated a 3-day moving average in the example. However, you can calculate
    averages using different numbers of previous values based on your requirement
    and the data available to you. You can decide to use more or fewer days to calculate
    the average, depending on what works best for your specific situation and the
    information you have.
  prefs: []
  type: TYPE_NORMAL
- en: If you choose a higher number of previous values, the resulting graph will have
    a smoother curve. On the other hand, if you opt for a smaller number of rows for
    calculating the averages, the moving average graph will closely resemble the original
    values.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There is a significant difference between, for instance, a 3-day moving average
    and a 7-day moving average.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6db79e68342911faf55e755bd3777c73.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author — Daily Number of Views vs 3-Days Moving Average vs 7-Days Moving
    Average
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The aim of this article is to provide a comprehensive understanding of how to
    calculate moving average and running totals in SQL. These techniques prove to
    be incredibly valuable when it comes to identifying trends within datasets. To
    ensure accurate results, it is crucial to have a dataset without any gaps in dates.
    It’s important to note that in this article, we utilised a smaller dataset for
    demo purposes. In real-world scenarios with larger datasets, you may encounter
    various fluctuations, making it more challenging to determine a clear trend. The
    presence of a vast amount of data can reveal more intricate patterns and provide
    a more comprehensive understanding of the underlying trends.
  prefs: []
  type: TYPE_NORMAL
- en: If you remember something really well, you must have practiced it well,
  prefs: []
  type: TYPE_NORMAL
- en: '[HackerRank](https://www.hackerrank.com/) or [LeetCode](https://leetcode.com/)
    to practice basic/intermediate/advance SQL problems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the source data and code file used in this article in my [*GitHub
    Repository*](https://github.com/PhoenixIM/All_Things_SQL/tree/main/MovingAverage_RunningTotal)*.*
  prefs: []
  type: TYPE_NORMAL
- en: '[*Become a member and read every story on Medium*](https://medium.com/@iffatm/membership)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: Happy Learning!
  prefs: []
  type: TYPE_NORMAL
