["```py\ndemand = {'scarves': 7000, 'hats': 9000, 'gloves': 8000}\nlabour = {'scarves': 0.4, 'hats': 0.3, 'gloves': 0.2, 'limit': 6000}\nproduction = {'scarves': 0.1, 'hats': 0.18, 'gloves': 0.05, 'limit': 2000}\nprofit = {'scarves': 15, 'hats': 12, 'gloves': 8}\n```", "```py\n# Install library with: pip install ortools\n# Load library\nfrom ortools.sat.python import cp_model\n\n# Initialise CP-SAT model\nmodel = cp_model.CpModel()\n\n# Set decision variables\nscarves = model.NewIntVar(0, demand['scarves'], 'scarves')\nhats = model.NewIntVar(0, demand['hats'], 'hats')\ngloves = model.NewIntVar(0, demand['gloves'], 'gloves')\n\n# Add constraints\nmodel.Add(int(10*labour['scarves'])*scarves + \n          int(10*labour['hats'])*hats + \n          int(10*labour['gloves'])*gloves <= 10*labour['limit'])\n\nmodel.Add(int(100*production['scarves'])*scarves + \n          int(100*production['hats'])*hats + \n          int(100*production['gloves'])*gloves <= 100*production['limit'])\n\n# Set objective\nmodel.Maximize(profit['scarves']*scarves + \n               profit['hats']*hats + \n               profit['gloves']*gloves)\n\n# Solve model\nsolver = cp_model.CpSolver()\nsolver.Solve(model)\n\n# Inspect output\nprint(f\"Profit: ${solver.ObjectiveValue():,.2f}\\n\")\n\nlabour_cost = 0\nproduction_cost = 0\nfor var in [scarves, hats, gloves]:\n    value = solver.Value(var)\n    name = var.Name()\n    labour_cost += value * labour[name]\n    production_cost += value * production[name]\n    print(f\"{value:.0f} {name}\")\n\nprint(f\"\\nLabour cost: ${labour_cost:,.2f}\")\nprint(f\"Production cost: ${production_cost:,.2f}\")\n```", "```py\nfrom ortools.linear_solver import pywraplp\n\n# Initialise linear solver with the SCIP backend\nmodel = pywraplp.Solver.CreateSolver('SCIP')\n\n# Set decision variables\nscarves = model.IntVar(0, demand['scarves'], 'scarves')\nhats = model.IntVar(0, demand['hats'], 'hats')\ngloves = model.IntVar(0, demand['gloves'], 'gloves')\n\n# Add constraints\nmodel.Add(labour['scarves']*scarves + \n          labour['hats']*hats + \n          labour['gloves']*gloves <= labour['limit'])\n\nmodel.Add(production['scarves']*scarves + \n          production['hats']*hats + \n          production['gloves']*gloves <= production['limit'])\n\n# Set objective\nmodel.Maximize(profit['scarves']*scarves + \n               profit['hats']*hats + \n               profit['gloves']*gloves)\nmodel.Solve()\n\n# Inspect output\nprint(f\"Profit: ${model.Objective().Value():,.2f}\\n\")\n\nlabour_cost = 0\nproduction_cost = 0\nfor var in [scarves, hats, gloves]:\n    value = var.solution_value()\n    name = var.name()\n    labour_cost += value * labour[name]\n    production_cost += value * production[name]\n    print(f\"{value:.0f} {name}\")\n\nprint(f\"\\nLabour cost: ${labour_cost:,.2f}\")\nprint(f\"Production cost: ${production_cost:,.2f}\")\n```", "```py\n# Initialise linear solver with the SCIP backend\nmodel = pywraplp.Solver.CreateSolver('SCIP')\n\n# Set decision variables\nscarves = model.IntVar(0, demand['scarves'], 'scarves')\nhats = model.IntVar(0, demand['hats'], 'hats')\ngloves = model.IntVar(0, demand['gloves'], 'gloves')\n\n# Add constraints\nlabour_constraint = model.Constraint(0, labour['limit'], 'labour_constraint')\nlabour_constraint.SetCoefficient(scarves, labour['scarves'])\nlabour_constraint.SetCoefficient(hats, labour['hats'])\nlabour_constraint.SetCoefficient(gloves, labour['gloves'])\n\nproduction_constraint = model.Constraint(0, production['limit'], 'production_constraint')\nproduction_constraint.SetCoefficient(scarves, production['scarves'])\nproduction_constraint.SetCoefficient(hats, production['hats'])\nproduction_constraint.SetCoefficient(gloves, production['gloves'])\n\n# Set objective\nobjective = model.Objective()\nobjective.SetCoefficient(scarves, profit['scarves'])\nobjective.SetCoefficient(hats, profit['hats'])\nobjective.SetCoefficient(gloves, profit['gloves'])\nobjective.SetMaximization()\n\nmodel.Solve()\n\nprint(f\"Profit: ${model.Objective().Value():,.2f}\\n\")\n\nlabour_cost = 0\nproduction_cost = 0\nfor var in [scarves, hats, gloves]:\n    value = var.solution_value()\n    name = var.name()\n    labour_cost += value * labour[name]\n    production_cost += value * production[name]\n    print(f\"{value:.0f} {name}\")\n\nprint(f\"\\nLabour cost: ${labour_cost:,.2f}\")\nprint(f\"Production cost: ${production_cost:,.2f}\")\n```", "```py\n# Install library with: pip install docplex cplex\n# Load library\nfrom docplex.cp.model import CpoModel\n\n# Initialise model\nmodel = CpoModel()\n\n# Set decision variables\nscarves = model.integer_var(0, demand['scarves'], 'scarves')\nhats = model.integer_var(0, demand['hats'], 'hats')\ngloves = model.integer_var(0, demand['gloves'], 'gloves')\n\n# Add constraints\nmodel.add(labour['scarves']*scarves + \n          labour['hats']*hats + \n          labour['gloves']*gloves <= labour['limit'])\n\nmodel.add(production['scarves']*scarves + \n          production['hats']*hats + \n          production['gloves']*gloves <= production['limit'])\n\n# Set objective\nmodel.maximize(profit['scarves']*scarves + \n               profit['hats']*hats + \n               profit['gloves']*gloves)\nsolution = model.solve()\n\n# Inspect output\nprint(f\"Profit: ${solution.get_objective_value():,.2f}\\n\")\n\nlabour_cost = 0\nproduction_cost = 0\nfor name in ['scarves', 'hats', 'gloves']:\n    value = solution[name]\n    labour_cost += value * labour[name]\n    production_cost += value * production[name]\n    print(f\"{value:.0f} {name}\")\n\nprint(f\"\\nLabour cost: ${labour_cost:,.2f}\")\nprint(f\"Production cost: ${production_cost:,.2f}\")\n```", "```py\nfrom docplex.mp.model import Model\n\n# Initialise model\nmodel = Model()\n```", "```py\nfor name in ['scarves', 'hats', 'gloves']:\n    value = solution[name]\n```", "```py\nfor var in [scarves, hats, gloves]:\n    value = var.solution_value\n    name = var.name\n```", "```py\n# Install library with: pip install pulp\n# Load library\nfrom pulp import LpProblem, LpMaximize, LpVariable, LpStatus\n\nmodel = LpProblem(sense=LpMaximize)\n\n# Set decision variables\nscarves = LpVariable(name='scarves', lowBound=0, upBound=demand['scarves'], cat='Integer')\nhats = LpVariable(name='hats', lowBound=0, upBound=demand['hats'], cat='Integer')\ngloves = LpVariable(name='gloves', lowBound=0, upBound=demand['gloves'], cat='Integer')\n\n# Add constraints\nmodel += (labour['scarves']*scarves + \n          labour['hats']*hats + \n          labour['gloves']*gloves <= labour['limit'], 'labour_constraint')\n\nmodel += (production['scarves']*scarves + \n          production['hats']*hats + \n          production['gloves']*gloves <= production['limit'], 'production_constraint')\n\n# Set objective\nmodel += profit['scarves']*scarves + profit['hats']*hats + profit['gloves']*gloves\nmodel.solve()\n\n# Inspect output\nprint(f\"Profit: ${model.objective.value():,.2f}\\n\")    \n\nlabour_cost = 0\nproduction_cost = 0\nfor var in model.variables():\n    value = var.value()\n    name = var.name\n    labour_cost += value * labour[name]\n    production_cost += value * production[name]\n    print(f\"{value:.0f} {name}\")\n\nprint(f\"\\nLabour cost: ${labour_cost:,.2f}\")\nprint(f\"Production cost: ${production_cost:,.2f}\") \n```"]