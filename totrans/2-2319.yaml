- en: How To Use Hugging Face Agents For NLP Tasks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 Hugging Face 代理进行 NLP 任务
- en: 原文：[https://towardsdatascience.com/what-are-hugging-face-agents-48c175bd33e3](https://towardsdatascience.com/what-are-hugging-face-agents-48c175bd33e3)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/what-are-hugging-face-agents-48c175bd33e3](https://towardsdatascience.com/what-are-hugging-face-agents-48c175bd33e3)
- en: A step by step tutorial on how to use Transformers tools and agents.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一步步教程，教你如何使用 Transformers 工具和代理。
- en: '[](https://medium.com/@fmnobar?source=post_page-----48c175bd33e3--------------------------------)[![Farzad
    Mahmoodinobar](../Images/2d75209693b712300e6f0796bd2487d0.png)](https://medium.com/@fmnobar?source=post_page-----48c175bd33e3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----48c175bd33e3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----48c175bd33e3--------------------------------)
    [Farzad Mahmoodinobar](https://medium.com/@fmnobar?source=post_page-----48c175bd33e3--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@fmnobar?source=post_page-----48c175bd33e3--------------------------------)[![Farzad
    Mahmoodinobar](../Images/2d75209693b712300e6f0796bd2487d0.png)](https://medium.com/@fmnobar?source=post_page-----48c175bd33e3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----48c175bd33e3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----48c175bd33e3--------------------------------)
    [Farzad Mahmoodinobar](https://medium.com/@fmnobar?source=post_page-----48c175bd33e3--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----48c175bd33e3--------------------------------)
    ·11 min read·May 17, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----48c175bd33e3--------------------------------)
    ·阅读时间约11分钟·2023年5月17日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/ba93162cbfcba76e15991d90518ec9c6.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ba93162cbfcba76e15991d90518ec9c6.png)'
- en: Photo by [Alev Takil](https://unsplash.com/@alevisionco?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/3syTDiVAc7w?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Alev Takil](https://unsplash.com/@alevisionco?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)拍摄，图片来自[Unsplash](https://unsplash.com/photos/3syTDiVAc7w?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: '[Hugging Face](https://huggingface.co), the open-source AI community for machine
    learning practitioners, recently integrated the concept of tools and agents into
    its popular [Transformers](https://huggingface.co/docs/transformers/index) library.
    If you have already used Hugging Face for Natural Language Processing (NLP), computer
    vision and audio/speech processing tasks, you may be wondering what value tools
    and agents add to the ecosystem. Agents add an arguably major level of convenience
    for the users — let me explain.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[Hugging Face](https://huggingface.co)，一个为机器学习从业者提供的开源 AI 社区，最近将工具和代理的概念集成到了其流行的[Transformers](https://huggingface.co/docs/transformers/index)库中。如果你已经使用
    Hugging Face 进行自然语言处理（NLP）、计算机视觉和音频/语音处理任务，你可能会好奇工具和代理为生态系统带来了什么价值。代理为用户增加了一个可以说是重要的便利性——让我来解释一下。'
- en: Let’s say I wanted to use a model from Hugging Face Hub to create translations
    from English to French. In such a case, I would need to do some research to find
    a good model, then figure out how to actually use that model and finally code
    it up and generate the translation. But what if you already had a Hugging Face
    expert at your disposal that already knew all of that? In other words, you would
    just tell the expert that you want to translate a sentence from English to French
    and then the expert would take care of finding a good model, coding up the problem
    and returning the results — and the expert is much faster than what you and I
    could do. That is exactly what agents do! We describe what we want to the agent
    in plain English and then the agent looks into the tools available in its toolbox
    and executes it! This is very similar to asking ChatGPT to translate a sentence
    and then ChatGPT takes care of the rest. But now, instead of being limited to
    the handful of models that ChatGPT uses (i.e. [Open AI models](https://platform.openai.com/docs/models),
    such as GPT 3.5 or GPT-4), agents have access to many models available on Hugging
    Face.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我想使用 Hugging Face Hub 上的模型将英文翻译成法文。在这种情况下，我需要进行一些研究以找到一个好的模型，然后弄清楚如何实际使用该模型，最后编写代码生成翻译。但是，如果你已经有一个
    Hugging Face 专家在手，他们已经知道所有这些信息呢？换句话说，你只需告诉专家你想将一个句子从英文翻译成法文，然后专家会负责寻找一个好的模型、编写代码并返回结果——而且专家的速度远远快于你和我能做的。这正是代理的作用！我们用简单的英文描述我们想要的，然后代理查看其工具箱中的可用工具并执行它！这非常类似于请求
    ChatGPT 翻译一个句子，然后 ChatGPT 处理剩下的。但是现在，代理不仅限于 ChatGPT 使用的少数几个模型（即 [Open AI 模型](https://platform.openai.com/docs/models)，例如
    GPT 3.5 或 GPT-4），代理还可以访问 Hugging Face 上的许多模型。
- en: Now that we understand what agents and tools do, let’s look at how this can
    be implemented.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了代理和工具的作用，让我们看看如何实现它们。
- en: '[](https://medium.com/@fmnobar/membership?source=post_page-----48c175bd33e3--------------------------------)
    [## Join Medium with my referral link'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 通过我的推荐链接加入 Medium](https://medium.com/@fmnobar/membership?source=post_page-----48c175bd33e3--------------------------------)'
- en: Read every story from Farzad (and other writers on Medium). Your membership
    fee directly supports Farzad and other…
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Farzad（以及 Medium 上的其他作者）的每个故事。你的会员费直接支持 Farzad 和其他…
- en: medium.com](https://medium.com/@fmnobar/membership?source=post_page-----48c175bd33e3--------------------------------)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/@fmnobar/membership?source=post_page-----48c175bd33e3--------------------------------)'
- en: Transformers Agent — Implementation
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Transformers 代理 — 实现
- en: For this section, I have mainly relied on the Hugging Face [documentations](https://huggingface.co/docs/transformers/transformers_agents)
    about agents and have implemented them using my own examples.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这一部分，我主要依赖于 Hugging Face [文档](https://huggingface.co/docs/transformers/transformers_agents)
    关于代理，并使用我自己的示例进行了实现。
- en: Step 1 — Requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤 1 — 要求
- en: Let’s start with importing a few libraries that we will be using for this exercise.
    Note that I have included the versions of these libraries in the results, in case
    you want to create an identical environment.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始导入我们在这个练习中将要使用的一些库。请注意，我在结果中包含了这些库的版本，以便你想创建一个相同的环境。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Results:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '![](../Images/d7c4311342ce450bcfcf4e8117da175b.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d7c4311342ce450bcfcf4e8117da175b.png)'
- en: If your environment does not have one or some of these libraries, then you could
    get an error from the above code block. If so, you can go ahead and run the cell
    below to install the libraries. I have made the assumption that if you are reading
    this post, your environment has Python so it is not included below.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的环境中没有一个或多个这些库，你可能会从上述代码块中遇到错误。如果是这样，你可以运行下面的单元格来安装这些库。我假设如果你正在阅读这篇文章，你的环境中已经有
    Python，因此下面没有包含。
- en: '**Pro Tip:** If you need to run one line of command, such as installing transformers
    in a Jupyter notebook or similar, you could use `!pip install transformers==4.29.0`.
    Instead of adding `!` to the beginning of each command line in the code block
    below, I have used the `%%sh`, which is a magic command indicating all the contents
    of this cell are to be run as commands.'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**技巧提示：** 如果你需要运行一行命令，例如在 Jupyter notebook 或类似环境中安装 transformers，你可以使用 `!pip
    install transformers==4.29.0`。在下面的代码块中，我使用了 `%%sh`，这是一个魔法命令，表示此单元格中的所有内容都作为命令运行。'
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Step 2 — Hugging Face Login
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤 2 — Hugging Face 登录
- en: Now that our environment is ready, we need to login to Hugging Face to have
    access to their inference API. This step requires a free Hugging Face token. If
    you do not have one, you can follow the instructions [in this link](https://huggingface.co/docs/api-inference/quicktour)
    (this took me less than 5 minutes) to create one for yourself.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的环境已经准备好，我们需要登录到Hugging Face以访问他们的推理API。此步骤需要一个免费的Hugging Face令牌。如果你没有，可以按照[这个链接](https://huggingface.co/docs/api-inference/quicktour)中的说明（我花了不到5分钟）为自己创建一个。
- en: Let’s log in.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们登录。
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Results:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '![](../Images/44710363755cd3adf6391107f6c7e7fa.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/44710363755cd3adf6391107f6c7e7fa.png)'
- en: Results indicate that login was successful.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示登录成功。
- en: In the next step, we will instantiate the agent. Note that Hugging Face supports
    various agents (which is essentially a large language model or LLM). Some are
    behind a pay wall, such as Open AI’s and some are open-source, such as BigCode
    and OpenAssistant. For this post, I have selected one of the free and open-source
    options from BigCode called [Starcoder](https://huggingface.co/bigcode/starcoder),
    since this will be more convenient for those getting started to experiment with
    such models. If you are interested in using other agents, Hugging Face has an
    easy-to-read tutorial linked [here](https://huggingface.co/docs/transformers/transformers_agents).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们将实例化代理。请注意，Hugging Face支持各种代理（本质上是大型语言模型或LLM）。有些代理是收费的，如Open AI的，有些是开源的，如BigCode和OpenAssistant。对于这篇文章，我选择了BigCode提供的一个免费开源选项[Starcoder](https://huggingface.co/bigcode/starcoder)，因为这将更方便刚入门的用户尝试这些模型。如果你对使用其他代理感兴趣，Hugging
    Face提供了一个易于阅读的教程，链接在[这里](https://huggingface.co/docs/transformers/transformers_agents)。
- en: Let’s continue to the next step and instantiate our agent.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续进行下一步并实例化我们的代理。
- en: Step 3 — Instantiate Agent
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3步 — 实例化代理
- en: Code block below instantiates the [Starcoder](https://huggingface.co/bigcode/starcoder)
    agent from BigCode.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码块实例化了来自BigCode的[Starcoder](https://huggingface.co/bigcode/starcoder)代理。
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that our agent is ready, let’s see what it can do!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的代理准备好了，让我们看看它能做什么！
- en: Step 4 — Run Tasks
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4步 — 执行任务
- en: We are going to ask the model to generate a picture as the very first task.
    What we do is we communicate what we want to the agent and the agent will make
    it happen. Let’s look at an example.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要求模型生成一张图片，这是第一个任务。我们的做法是将我们想要的内容传达给代理，然后代理会完成它。让我们来看一个例子。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Results:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '![](../Images/436ed3317ac30b6bc7f7cf5bc687ac89.png)![](../Images/c7d8daa76491b03c67235df8c1d9c465.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/436ed3317ac30b6bc7f7cf5bc687ac89.png)![](../Images/c7d8daa76491b03c67235df8c1d9c465.png)'
- en: Picture of the ocean, generated by [Hugging Face Agent](https://huggingface.co/docs/transformers/transformers_agents)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Hugging Face Agent](https://huggingface.co/docs/transformers/transformers_agents)生成的海洋图片
- en: That is quite interesting! Looking at the results, we can see the agent explains
    some of the steps it takes. For example, the agent uses the `image_generator`
    tool to generate the picture that we asked for.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这很有趣！从结果来看，我们可以看到代理解释了它采取的一些步骤。例如，代理使用了`image_generator`工具来生成我们要求的图片。
- en: We mentioned that our agent is an LLM and we know that outputs are randomly
    generated and are expected to change as we run the model again. Let’s see what
    we will get if we run the same task another time.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提到我们的代理是一个LLM，我们知道输出是随机生成的，并且期望在重新运行模型时会有所变化。让我们看看如果再运行一次相同的任务会得到什么结果。
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Results:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '![](../Images/02613d8d9f290eab1c71a87bf5b75ef6.png)![](../Images/412f79f86460fc0ab9cb7de809367819.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/02613d8d9f290eab1c71a87bf5b75ef6.png)![](../Images/412f79f86460fc0ab9cb7de809367819.png)'
- en: Picture of the ocean, generated by [Hugging Face Agent](https://huggingface.co/docs/transformers/transformers_agents)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Hugging Face Agent](https://huggingface.co/docs/transformers/transformers_agents)生成的海洋图片
- en: As expected, the pictures are different. But what if after seeing the picture,
    we want to make a change to that picture? For example, it would be nice to see
    a ship in this picture. Let’s ask our agent to add a ship to the same picture.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，图片不同。但是，如果在看到图片后，我们想对图片进行修改会怎么样呢？例如，看到这张图片中有一艘船会很不错。让我们要求我们的代理在同一张图片上添加一艘船。
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Results:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '![](../Images/a1ba2f0731af640cbfabd63afb77abd7.png)![](../Images/5f873bd61d02d66ea0c107b16da3c27c.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a1ba2f0731af640cbfabd63afb77abd7.png)![](../Images/5f873bd61d02d66ea0c107b16da3c27c.png)'
- en: Picture of the ocean and a ship, generated by [Hugging Face Agent](https://huggingface.co/docs/transformers/transformers_agents)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Hugging Face Agent](https://huggingface.co/docs/transformers/transformers_agents)生成的海洋和船只图片
- en: As we see, the agent used a different tool this time called `image_transform`,
    since it no longer needs to generate an entire image and rather it *transforms*
    the provided image by adding a ship to it. We can see the small ship in the top
    left side quadrant of the picture. Not bad at all!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这次代理使用了一个不同的工具叫做`image_transform`，因为它不再需要生成整张图像，而是通过在提供的图像中添加一艘船来*转换*图像。我们可以看到图像左上角的那个小船。表现得还不错！
- en: But at this point you may be asking what is the agent actually doing? We will
    answer that question next.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 不过这时候你可能会问，代理实际上在做什么？我们将在接下来回答这个问题。
- en: Step 5 — What Do Agents Actually Do?
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5步 — 代理实际上做了什么？
- en: As we learned earlier, agents are LLMs that are performing tasks given our provided
    prompts. In other words, agents receive our prompts and then based on what is
    being asked, the agents collect the tools they believe will be helpful and then
    run such a code. Hugging Face provides a way of looking at the agents’ code by
    adding `return_code=True` to our run command. In other words, we can ask the agent
    to just return the code block and then we can modify and/or run the code ourselves.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所学，代理是执行我们提供的提示的LLM。换句话说，代理接收我们的提示，然后根据要求，代理收集他们认为有用的工具并运行这些代码。Hugging
    Face 提供了一种查看代理代码的方法，即在我们的运行命令中添加`return_code=True`。换句话说，我们可以要求代理仅返回代码块，然后我们可以自己修改和/或运行代码。
- en: 'Let’s re-run our command as follows and look at the results:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新运行我们的命令，如下所示，并查看结果：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Results:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '![](../Images/cc01e21595854b92c277bbb17e445740.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cc01e21595854b92c277bbb17e445740.png)'
- en: 'I have cleaned up and re-written what the agent returned as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经清理并重新编写了代理返回的内容如下：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let’s run this code and look at the results.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行这段代码并查看结果。
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Results:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '![](../Images/3e678b3f7c771224a1f761481528a691.png)![](../Images/8616f7dfbb1cc6941ba21ee00e96bac0.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3e678b3f7c771224a1f761481528a691.png)![](../Images/8616f7dfbb1cc6941ba21ee00e96bac0.png)'
- en: Picture of the ocean, generated by [Hugging Face Agent](https://huggingface.co/docs/transformers/transformers_agents)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 海洋的图片，由[Hugging Face 代理](https://huggingface.co/docs/transformers/transformers_agents)生成
- en: That worked as expected. In other words, we no longer need to rely on the agent
    to create that code for us and we can directly use the `huggingface-tools/text-to-image`
    tool to generate pictures.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如预期那样工作。换句话说，我们不再需要依赖代理为我们创建代码，我们可以直接使用`huggingface-tools/text-to-image`工具生成图片。
- en: Now that we understand how agents pick their tools and work, let’s look at some
    additional tools.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了代理如何选择工具并工作的过程，让我们看看一些额外的工具。
- en: Step 6 — Additional Tools
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6步 — 额外工具
- en: 'In this section, we will cover a few examples of other tools that agents can
    use, as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将涵盖代理可以使用的其他一些工具，如下所示：
- en: Image captioning
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像描述
- en: Question answering
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题解答
- en: Translation
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 翻译
- en: Mixed Requests
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混合请求
- en: 6.1\. Image Captioning
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.1\. 图像描述
- en: This is a fun exercise. First, we will use the `text-to-image` tool to generate
    a picture of a toy car. Then we will save that picture and ask the agent to caption
    it.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个有趣的练习。首先，我们将使用`text-to-image`工具生成一张玩具车的图片。然后我们将保存该图片，并要求代理对其进行描述。
- en: Let’s start with creating a picture of a toy car.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建一张玩具车的图片。
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Results:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '![](../Images/bcb5e93f4585cd1af78f8d1af5c683f5.png)![](../Images/ef4960d58c10dccad1cfba66bb33a20c.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bcb5e93f4585cd1af78f8d1af5c683f5.png)![](../Images/ef4960d58c10dccad1cfba66bb33a20c.png)'
- en: Picture of a toy car, generated by [Hugging Face Agent](https://huggingface.co/docs/transformers/transformers_agents)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 玩具车的图片，由[Hugging Face 代理](https://huggingface.co/docs/transformers/transformers_agents)生成
- en: Then, I saved it to the local drive and then will read it using the [Python
    Imaging Library or PIL](https://pillow.readthedocs.io/en/latest/handbook/tutorial.html).
    After that, we will prompt the agent to caption that image.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我将其保存到本地驱动器，然后使用[Python Imaging Library 或 PIL](https://pillow.readthedocs.io/en/latest/handbook/tutorial.html)读取它。之后，我们将提示代理对该图像进行描述。
- en: 'Below is the code block:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码块：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Results:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '![](../Images/324ca2b43f12b7857cd02ad0e791ba9c.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/324ca2b43f12b7857cd02ad0e791ba9c.png)'
- en: 'Look at the very last sentence in the bottom — That is a good caption! The
    agent is describing the car, which seems pretty accurate. In case you are curious
    about what is going on under the hood, let’s have the agent return the code to
    see what tools are being used and how, as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 看看最后一句话——这是一个很好的描述！代理描述了这辆车，这似乎相当准确。如果你对幕后发生的事情感到好奇，让我们让代理返回代码，看看使用了哪些工具以及如何使用，如下所示：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Results:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '![](../Images/4ea65270cf8084a0baee3ff1c912c344.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4ea65270cf8084a0baee3ff1c912c344.png)'
- en: 'Let’s clean up the code block as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将代码块清理如下：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What the agent did was to load the `image-captioning` tool and then caption
    the image that we provided. Sounds straight forward! Let’s move on to the next
    example.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 代理所做的是加载`image-captioning`工具，然后为我们提供的图像生成标题。听起来很简单！让我们继续下一个例子。
- en: 6.2\. Question Answering
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.2\. 问答
- en: Question answering is self-explanatory but let’s make it more interesting. Instead
    of providing a paragraph to the agent and asking questions about the provided
    information, let’s provide an image and ask the agent about the content of the
    image.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 问答是显而易见的，但让我们让它更有趣。与其提供一段文字给代理并询问有关提供信息的问题，不如提供一张图像，并询问代理有关图像的内容。
- en: 'I wrote a few lines in a word document and then saved it as a `*.jpg` image
    in my local. Let’s first use PIL to see the image as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我在一个Word文档中写了几行文字，然后将其保存为`*.jpg`图像在本地。我们首先使用PIL查看如下图像：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Results:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '![](../Images/3714c8286ca3c4512ad93a9891bc1fc4.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3714c8286ca3c4512ad93a9891bc1fc4.png)'
- en: 'As you can see, the image has a few sentences about my imaginary friend in
    Seattle, named Jack. Next, let’s ask a question from our agent and see how it
    responds. I would like to ask the agent about Jack’s favorite color, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，图像中有几句关于我在西雅图的虚构朋友Jack的句子。接下来，让我们向代理提问，并看看它如何回应。我想问代理Jack最喜欢的颜色是什么，如下所示：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Results:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '![](../Images/07a67564facefa30e94c8b8464aff040.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/07a67564facefa30e94c8b8464aff040.png)'
- en: Once again, let’s look at the very last sentence in the bottom — That is pretty
    good! We can see that text extraction is not perfect, for example, it extracted
    Tesla to ‘tesia’ but still, the agent returned the relevant portion of the image,
    which answered our question.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 再次查看底部的最后一句——这相当不错！我们可以看到文本提取并不完美，例如，它将Tesla提取为‘tesia’，但代理仍然返回了相关的图像部分，回答了我们的问题。
- en: 'Let’s see what tools exactly the agent used:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代理究竟使用了哪些工具：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Results:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '![](../Images/d27992c81d5ef777b366714e68d22874.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d27992c81d5ef777b366714e68d22874.png)'
- en: 'Let’s clean up the code as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将代码清理如下：
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We can see that the agent used the `document-question-answering` tool and then
    asked the question in the form of a question answering task.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到代理使用了`document-question-answering`工具，然后以问答任务的形式提出了问题。
- en: Next, let’s see if the agent can perform translation.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看代理是否能执行翻译。
- en: 6.3\. Translation
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.3\. 翻译
- en: This one is pretty straight forward. Let’s ask the agent to translate a sentence
    and then see what tools it uses.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分相当简单。让我们让代理翻译一个句子，然后看看它使用了哪些工具。
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Results:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '![](../Images/dac8673b6a482be55a5993b0c05f8b2f.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dac8673b6a482be55a5993b0c05f8b2f.png)'
- en: 'Excellent! We see the result, which is the translation of the provided sentence
    in French. Let’s look what agent used:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们看到了结果，这是所提供句子的法语翻译。让我们看看代理使用了什么工具：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Results:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '![](../Images/66da63cc9c20655112efcb27870e8a60.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/66da63cc9c20655112efcb27870e8a60.png)'
- en: 'Let me clean up the code first:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我先清理一下代码：
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: That looks pretty straight forward. The agent uses the `translation` tool and
    the agent recognized the source (`src_lang`) and target language (`tgt_lang`)
    correctly, based on what we asked it to do!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来相当简单。代理使用了`translation`工具，并且代理正确地识别了源语言（`src_lang`）和目标语言（`tgt_lang`），这是基于我们要求的！
- en: At this point, I was wondering whether the agent can handle more complicated
    tasks. We will look at that next.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一步，我在想代理是否能够处理更复杂的任务。我们接下来会看看。
- en: 6.4\. Mixed Requests
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 6.4\. 混合请求
- en: What if we combine a question answering and translation? Let’s ask the agent
    what Jack’s favorite color is while asking that the answer must be returned in
    French.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将问答和翻译结合起来呢？让我们问代理Jack最喜欢的颜色是什么，同时要求答案必须用法语返回。
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Results:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '![](../Images/0a861eb40b6caaf1f09d5c486e82a248.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0a861eb40b6caaf1f09d5c486e82a248.png)'
- en: Look at the last sentence — that is great! We see that the agent first returned
    the English answer and then translates the response to French, as we asked it
    to!
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 看看最后一句——这很好！我们看到代理首先返回了英文答案，然后按照我们的要求将响应翻译成了法语！
- en: Conclusion
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Agents and Tools are a powerful combination. I see agents benefiting both technical
    users (i.e. machine learning and AI practitioners) and also the non-technical
    users. For technical users, agents speed up the process — agents can help by selecting
    among many tools and return the code for the technical user to modify to their
    needs. On the other hand, non-technical users who are not familiar with machine
    learning, can simply ask what they want in plain English and the agent will take
    care of the rest.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '-   代理和工具是一个强大的组合。我认为代理对技术用户（即机器学习和 AI 从业者）和非技术用户都很有益。对于技术用户，代理可以加快过程——代理可以帮助选择多个工具中的一个，并返回代码供技术用户根据需求进行修改。另一方面，不熟悉机器学习的非技术用户，只需用简单的英语提出需求，代理将处理其余的工作。'
- en: I hope you enjoyed this brief tutorial on agents and tools! If you are interested
    in learning more about implementing Natural Language Processing (NLP) tasks in
    Hugging Face, check out the post below.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '-   希望你喜欢这篇关于代理和工具的简要教程！如果你对在 Hugging Face 中实现自然语言处理（NLP）任务感兴趣，请查看下面的帖子。'
- en: '[](/implement-nlp-tasks-using-hugging-face-77dfdcad65fd?source=post_page-----48c175bd33e3--------------------------------)
    [## Implement NLP Tasks Using Hugging Face'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/implement-nlp-tasks-using-hugging-face-77dfdcad65fd?source=post_page-----48c175bd33e3--------------------------------)
    [## 使用 Hugging Face 实现 NLP 任务'
- en: An introductory tutorial to use Hugging Face for NLP tasks.
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '-   介绍如何使用 Hugging Face 进行 NLP 任务的教程。'
- en: towardsdatascience.com](/implement-nlp-tasks-using-hugging-face-77dfdcad65fd?source=post_page-----48c175bd33e3--------------------------------)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/implement-nlp-tasks-using-hugging-face-77dfdcad65fd?source=post_page-----48c175bd33e3--------------------------------)'
- en: Thanks for Reading!
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '-   感谢阅读！'
- en: If you found this post helpful, please [follow me on Medium](https://medium.com/@fmnobar)
    and subscribe to receive my latest posts!
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '-   如果你觉得这篇帖子有帮助，请 [在 Medium 上关注我](https://medium.com/@fmnobar) 并订阅以接收我最新的帖子！'
- en: '*(All images, unless otherwise noted, are by the author.)*'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '-   *(除非另有说明，所有图片均由作者提供。)*'
