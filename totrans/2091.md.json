["```py\ndef get_similarity(seq_a: str, seq_b: str) -> Union[float, int]:\n    \"\"\" \n    Make a similarity heuristic,\n    here we use Jaccard similarity or IOU\n\n    seq_a: First sequence to compare\n    seq_b: Second sequence to compare\n\n    Returns:\n    Similarity score (float or int)\n    \"\"\"\n    # Tokenize\n    set_a = set(seq_a.split(' '))\n    set_b = set(seq_b.split(' ')) \n\n    # Calculate IOU/Jaccard similarity\n    return len(set_a.intersection(set_b)) / len(set_a.union(set_b))\n\ndef example_selector(examples: List[str], input: str, examples2use: int) -> List[str]:\n    \"\"\" \n    Pseudo code for an example selector\n\n    examples: List of training corpus\n    input: Target sequence to translate\n    examples2use: Number of examples to use\n\n    Returns:\n    List of selected examples\n    \"\"\"\n    scores = [get_similarity(example, input) for example in examples]\n    sorted_idx = [i for i, _ in sorted(enumerate(scores), key=lambda x: x[1], reverse=True)]\n    return examples[sorted_idx[:examples2use]]\n```"]