["```py\nbasket = pd.read_csv(\"/content/bread_basket.csv\")\nbasket.head()\n```", "```py\nbasket.loc[basket['Transaction']==3]\n```", "```py\n# Groupby by the Transaction Ids and count items\nbasket = basket.groupby(\n              by=['Transaction', \n                  'Item'])['Item'].count().reset_index(name='Item_Count')\n\n# Pivot table by the transaction and convert item count to boolean \nbasket = basket.pivot_table(\n              index='Transaction', \n              columns='Item', \n              values='Item_Count', \n              aggfunc='sum').fillna(0).astype(bool)\n```", "```py\n# Support value for single items\nsupport = basket.mean().sort_values(ascending=False)\nsupport.head(10)\n```", "```py\n# Add antecedent and consequent pairs to the data set \nbasket['Coffee & Bread'] = np.logical_and(basket['Coffee'], basket['Bread'])\nbasket['Coffee & Tea'] = np.logical_and(basket['Coffee'], basket['Tea'])\nbasket['Coffee & Cake'] = np.logical_and(basket['Coffee'], basket['Cake'])\n\n# Calculate support\nsupport = basket.mean().sort_values(ascending=False)\nsupport.head(10)\n```", "```py\n# Confidence value of if Coffee then Bread \nprint(support['Coffee & Bread']/support['Coffee'])\n\n# Confidence value of if Coffee then Cake \nprint(support['Coffee & Cake']/support['Coffee'])\n```", "```py\n# Lift value of if Coffee then Bread \nprint(support['Coffee & Bread']/(support['Coffee']*support['Bread']))\n\n# Lift value of if Coffee then Cake \nprint(support['Coffee & Cake']/(support['Coffee']*support['Cake']))\n```", "```py\n# Leverage value of if Coffee then Bread \nprint(support['Coffee & Bread'] - (support['Coffee']*support['Bread']))\n\n# Leverage value of if Coffee then Cake \nprint(support['Coffee & Cake'] - (support['Coffee']*support['Cake']))\n```", "```py\n# Conviction value of if Coffee then Bread \nprint(support['Coffee']*(\n        1-support['Bread'])/(support['Coffee'] - support['Coffee & Bread']))\n\n# Conviction value of if Coffee then Cake \nprint(support['Coffee']*(\n        1-support['Cake'])/(support['Coffee'] - support['Coffee & Cake']))\n```", "```py\nfrom mlxtend.frequent_patterns import association_rules, apriori\n\n# Apply Apriori algorithm\nfrequent_itemsets = apriori(basket, min_support=0.01, use_colnames=True)\n```", "```py\nfrequent_itemsets.sort_values(by='support', ascending=False).head(20)\n```", "```py\n# Compute association rules\nrules = association_rules(frequent_itemsets, metric=\"confidence\", \n  min_threshold=0.5)\n```", "```py\n!pip install pycaret==2.3\n\nfrom pycaret.arules import plot_model\n\n# Plot rules\nplot_model(rules, plot = '2d')\n```"]