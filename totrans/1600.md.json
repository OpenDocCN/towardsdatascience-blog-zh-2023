["```py\noptimizer = torch.optim.SGD([theta], lr=learning_rate, momentum=momentum)\n```", "```py\noptimizer = torch.optim.SGD([theta], lr=learning_rate, momentum=momentum, nesterov=True)\n```", "```py\noptimizer = torch.optim.Adagrad([theta], lr=learning_rate)\n```", "```py\noptimizer = torch.optim.RMSprop([theta], lr=learning_rate, alpha=alpha, eps=eps)\n```", "```py\noptimizer = torch.optim.Adam([theta], lr=learning_rate)\n```", "```py\nimport torch\nimport plotly.graph_objects as go\n\n# Function to perform optimisation and log theta\ndef optimize(optimizer_class, theta_init, lr, iterations, **kwargs):\n    theta_values = []\n    theta = torch.tensor([theta_init], requires_grad=True)\n    optimizer = optimizer_class([theta], lr=lr, **kwargs)\n    for _ in range(iterations):\n        optimizer.zero_grad()\n        loss = theta.pow(2)\n        loss.backward()\n        optimizer.step()\n        theta_values.append(theta.item())\n    return theta_values\n\n# Initial values\ntheta_init = 3.0\nlearning_rate = 0.01\niterations = 1000\n\n# Optimiser configurations\noptim_configs = {\n    \"Momentum\": {\"optimizer_class\": torch.optim.SGD, \"lr\": learning_rate, \"momentum\": 0.9},\n    \"Nesterov\": {\"optimizer_class\": torch.optim.SGD, \"lr\": learning_rate, \"momentum\": 0.9, \"nesterov\": True},\n    \"Adagrad\": {\"optimizer_class\": torch.optim.Adagrad, \"lr\": learning_rate},\n    \"Adam\": {\"optimizer_class\": torch.optim.Adam, \"lr\": learning_rate},\n    \"RMSprop\": {\"optimizer_class\": torch.optim.RMSprop, \"lr\": learning_rate}\n}\n\n# Run optimization for each optimizer and collect theta values\nresults = {}\nfor name, config in optim_configs.items():\n    results[name] = optimize(**config, theta_init=theta_init, iterations=iterations)\n\n# Plot the results\nfig = go.Figure()\n\nfor optimiser, theta_values in results.items():\n    fig.add_trace(go.Scatter(x=list(range(iterations)), y=theta_values, mode='lines', name=optimiser))\n\nfig.update_layout(title=\"Optimiser Performance Comparison\",\n                  xaxis_title=\"Iteration Number\",\n                  yaxis_title=\"Value of Theta\",\n                  legend_title=\"Optimisers\",\n                  template=\"plotly_white\",\n                  width=900,\n                  height=600,\n                  font=dict(size=18),\n                  xaxis=dict(tickfont=dict(size=16)),\n                  yaxis=dict(tickfont=dict(size=16)),\n                  title_font_size=24)\n\nfig.show()\n```"]