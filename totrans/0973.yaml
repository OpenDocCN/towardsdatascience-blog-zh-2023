- en: Get the Most from Pandas GroupBy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/get-the-most-from-pandas-groupby-fa2b6db3eccc](https://towardsdatascience.com/get-the-most-from-pandas-groupby-fa2b6db3eccc)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: From basic examples to a practical exercise
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@kurt.klingensmith?source=post_page-----fa2b6db3eccc--------------------------------)[![Kurt
    Klingensmith](../Images/2249e99f12d10f81598c754b1aaf76cc.png)](https://medium.com/@kurt.klingensmith?source=post_page-----fa2b6db3eccc--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fa2b6db3eccc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fa2b6db3eccc--------------------------------)
    [Kurt Klingensmith](https://medium.com/@kurt.klingensmith?source=post_page-----fa2b6db3eccc--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fa2b6db3eccc--------------------------------)
    ·6 min read·Oct 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7ec1d3c4e2e305e8ddda6adf5ac61ee5.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Alex Suprun](https://unsplash.com/@sooprun?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/A53o1drQS2k?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText).
  prefs: []
  type: TYPE_NORMAL
- en: Python’s pandas library includes many useful tools for interrogating and manipulating
    data, one of which is the powerful GroupBy function. This function enables grouping
    observations by various categories and aggregating them in numerous ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'This may sound confusing at first, but this guide will walk through how to
    use the function and its various features. The walkthrough includes:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to GroupBy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying GroupBy to Practice Datasets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various GroupBy Techniques.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practical Exercise and Application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Code and Data:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The data and Jupyter notebook with full Python code used in this walkthrough
    is [available at the linked github page](https://github.com/kurtklingensmith/GroupBy).
    Download or clone the repository to follow along. This guide uses synthetic data
    with fake names generated by the author for this article; the data is available
    at the linked github page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code requires the following libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 1.1\. Getting Started — Data Load and GroupBy Basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to load in a dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This gets the following dataframe with information about students who took
    a series of tests at school. It includes their age, three test scores, when they
    took their class, their average grade, letter grade, and whether or not they passed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cc2d3a3b4546c3e91bda6846c0de3345.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Pandas’ GroupBy allows splitting the dataframe into elements of interest and
    applying some sort of function to it. The easiest way to think about GroupBy is
    to formulate a question that the GroupBy operation solves. A simple starting point
    is to ask how many students passed the course:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the above line of code, GroupBy groups on the ‘CoursePass’ column and then
    performs a count function on the ‘CoursePass’ column. This returns a simple count:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/555ca28c3497001e93703099e29dc7b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is fairly similar to the value_counts() operation, which performs as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/61e9ffa8dc482c9671905db2611e317f.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: This is a good start, but GroupBy can do far more advanced operations. Let’s
    look at multiple columns and more complex questions about the student data.
  prefs: []
  type: TYPE_NORMAL
- en: 1.2\. GroupBy() with Multiple Columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Suppose we want to know how many students passed in each class session (Afternoon,
    Evening, and Morning). The following GroupBy code quickly answers that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The above code groups by columns “ClassSession” and “CoursePass” while returning
    counts for each CoursePass status (“Yes” or “No”). The result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c5a26840263c73015f8cb7d2c6f9f590.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that ordering the columns within the parenthesis matters. Swapping the
    order of “ClassSession” and “CoursePass” results in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7d48ab39368d9043d3ccc918907c2cbd.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: Before moving to even more advanced applications of GroupBy, let’s take a lok
    at how to clean up the output for an improved presentation.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3\. Cleaning Up GroupBy’s Outputs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several ways to get a standard GroupBy output into a cleaner appearing
    dataframe format. Let’s take one of the examples above and add “.to_frame()” to
    the end of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7bae339fdaeca448cbe1b779e07016ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice this returns multilevel columns and no index. Also note that two columns
    are named “CoursePass.” To flatten the columns, adjust the names, and add an index,
    use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This returns the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/96a9c436012d6e319df1d605f9cb5245.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: Adding reset_index() to the operation flattens the columns and adds an index;
    passing a name within reset_index() names the column being counted (in this case
    “CoursePass”) to “Count.” Failing to rename the column within reset_index() would
    return an error due to two columns being named “CoursePass.”
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be taken a step further by hiding the index altogether:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e1c0101b4076717ff58a87344b73c71e.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s look at more advanced GroupBy functions.
  prefs: []
  type: TYPE_NORMAL
- en: 1.4\. Advanced GroupBy Capabilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'GroupBy can create an object of the selected columns. The below code creates
    a GroupBy object based on two columns of interest; applying the mean() function
    to the object while passing two other columns of interest returns the mean for
    those columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/02dc5ee6c1b80df81a069c6aac60ce56.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: Note how the output is grouped by the columns “LetterGrade” and “CoursePass”
    and returns the averages for the columns “Test1” and “Test2,” which were the two
    columns chosen for the mean() function from the initial GroupBy object.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be taken to an even more advanced level by using multiple aggregations.
    Consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d9607ae50f5a3120fe1d363390ef8a3a.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The above code answers several questions: sorting by LetterGrade and CoursePass,
    what is the average, min, and max Grade of each student and the average, min,
    and max Age of each student?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a GroupBy object is not always necessary; the agg() function can allow
    the answering of fairly complex questions. Suppose we wanted to filter by CoursePass
    and ClassSession to find the average Age and Grade for each student; the following
    code provides the answers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2ce86be302e1ffc0c04e2688b0e5b718.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The aggregate function can also pass numpy operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This yields:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/857b4a6f46f14310c91748d310d5e034.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The aggregate function can also directly rename columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e9f1b4d72b85b59bae11facba8c30406.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: The number of syntactical possibilities for GroupBy means there’s probably an
    elegant code solution to a complex question about a dataframe. Now that we’ve
    explored the basics, let’s look at some practical applications of how to apply
    GroupBy.
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Exercise: Quickly Visualize Grade Counts'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Requirement:** Given student test scores for a course, visualize the total
    of each letter grade achieved by each class session on one chart.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by taking a look at the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0c0017a791640146d81d4c03234497cc.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The requirement is interested in letter grades and class session; that indicates
    the GroupBy will sort on the columns ClassSession and LetterGrade. The requirement
    also wants a total; let’s use the count() function and see what comes back:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8f21a83df5441dd4607a18da3cfffa95.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The above code grouped the data by Class Session and Letter Grade while counting
    the number of occurrences of each letter grade in each grouping combination. The
    sort_values() code sorts by Letter Grade A through F. All that’s left to do is
    to visualize the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This generates the following plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/28b3fd74ddd969c5260448afc284f421.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author.
  prefs: []
  type: TYPE_NORMAL
- en: With just a few lines of code, the question is answered!
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Conclusion.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Pandas GroupBy function is a powerful tool that can quickly perform aggregations
    and mathematical operations on specific data groupings from a dataframe. Often,
    one execution of the function is all that’s necessary to answer a seemingly involved
    question. Mastering GroupBy’s use provides data scientists with an effective tool
    for data preparation and manipulation. Feel free to use the provided notebook
    and [code at the linked GitHub page](https://github.com/kurtklingensmith/GroupBy)
    and experiment some more with GroupBy!
  prefs: []
  type: TYPE_NORMAL
