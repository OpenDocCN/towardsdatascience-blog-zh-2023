- en: Plot Streaming Data with Python and Plotly Express
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 和 Plotly Express 绘制流数据
- en: 原文：[https://towardsdatascience.com/plot-streaming-data-with-python-and-plotly-express-e7aea8d9c441](https://towardsdatascience.com/plot-streaming-data-with-python-and-plotly-express-e7aea8d9c441)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/plot-streaming-data-with-python-and-plotly-express-e7aea8d9c441](https://towardsdatascience.com/plot-streaming-data-with-python-and-plotly-express-e7aea8d9c441)
- en: Tracking the ISS in real time
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实时跟踪国际空间站
- en: '[](https://medium.com/@lee_vaughan?source=post_page-----e7aea8d9c441--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----e7aea8d9c441--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e7aea8d9c441--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e7aea8d9c441--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----e7aea8d9c441--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@lee_vaughan?source=post_page-----e7aea8d9c441--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----e7aea8d9c441--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e7aea8d9c441--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e7aea8d9c441--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----e7aea8d9c441--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e7aea8d9c441--------------------------------)
    ·8 min read·Mar 26, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e7aea8d9c441--------------------------------)
    ·8 分钟阅读·2023年3月26日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/962b0ecd54ae50e1fb81942915e0c069.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/962b0ecd54ae50e1fb81942915e0c069.png)'
- en: The International Space Station (image from [NASA Image Gallery](https://images.nasa.gov/))
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 国际空间站（图片来自 [NASA 图片库](https://images.nasa.gov/)）
- en: '*Streaming data* refers to real-time data which is continuously flowing from
    a source to a target. It includes audio, video, text, or numerical data that is
    generated by sources such as social media platforms, sensors, and servers. The
    data transmission is in a steady stream with no fixed beginning or end. Streaming
    data is important in fields such as healthcare, finance, and transportation, and
    it forms a key component of the [*Internet of Things (IoT)*](https://www.networkworld.com/article/3207535/what-is-iot-the-internet-of-things-explained.html).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*流数据* 指的是实时数据，它不断地从源头流向目标。它包括音频、视频、文本或由社交媒体平台、传感器和服务器等来源生成的数值数据。数据传输以稳定的流形式进行，没有固定的开始或结束。流数据在医疗保健、金融和运输等领域非常重要，并且它是
    [*物联网 (IoT)*](https://www.networkworld.com/article/3207535/what-is-iot-the-internet-of-things-explained.html)
    的关键组成部分。'
- en: The ability to handle streaming data is an important skill for a data scientist.
    In this *Quick Success Data Science* project, we’ll use streaming data to track
    the International Space Station (ISS) as it orbits the Earth. For coding we’ll
    use Python and Plotly Express in a Jupyter Notebook.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 处理流数据的能力是数据科学家的重要技能。在这个 *快速成功数据科学* 项目中，我们将使用流数据来跟踪国际空间站（ISS）绕地球轨道运行。我们将使用 Python
    和 Plotly Express 在 Jupyter Notebook 中进行编码。
- en: International Space Station Telemetry
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 国际空间站遥测
- en: '*Telemetry* is the *in-situ* collection and automatic transmission of remote
    sensor data to receiving equipment for monitoring. While there are numerous sources
    for ISS telemetry, we’ll use the [*WTIA REST API*](https://wheretheiss.at/w/developer)
    (WTIA stands for *Where the ISS at?*).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*遥测* 是 *原位* 收集和自动传输远程传感器数据到接收设备以进行监测。虽然有众多国际空间站的遥测数据来源，我们将使用 [*WTIA REST API*](https://wheretheiss.at/w/developer)（WTIA
    代表 *国际空间站在哪里？*）。'
- en: This API was written by Bill Shupp to include more features than are provided
    by typical ISS tracking/notification sites. At the end of the article, I’ll list
    some additional sources for ISS telemetry and tracking, in case you want to try
    them out or compare our results to theirs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 API 由 Bill Shupp 编写，包含了比典型的国际空间站跟踪/通知网站提供的更多功能。文章末尾，我将列出一些额外的国际空间站遥测和跟踪来源，以备你想尝试或将我们的结果与他们的结果进行比较。
- en: The Plotly Express Library
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Plotly Express 库
- en: '[*Plotly Express*](https://plotly.com/python/plotly-express/) is a built-in
    part of the Plotly graphing library. As a simpler, higher-level version of Plotly,
    it’s the recommended starting point for creating most common figures.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Plotly Express*](https://plotly.com/python/plotly-express/) 是 Plotly 图形库的内置部分。作为
    Plotly 的简化、高级版本，它是创建大多数常见图形的推荐起点。'
- en: Plotly Express contains more than 30 functions for creating entire figures at
    once, and the API for these functions was carefully designed to be as consistent
    and easy to learn as possible. This makes it easy to switch between figure types
    during a data exploration session.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly Express包含30多个用于一次性创建整个图形的函数，这些函数的API设计得非常一致且易于学习。这使得在数据探索过程中可以轻松切换图形类型。
- en: While Plotly Express is easy to use and creates beautiful, interactive plots,
    they’re not as customizable as plots generated in lower-level libraries like Plotly
    or matplotlib. As always, you have to give up some control for ease of use.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Plotly Express易于使用且能创建美观的交互图，但它们的自定义程度不如使用Plotly或matplotlib等低级库生成的图表。像往常一样，你必须为了易用性而放弃一些控制权。
- en: 'Installing Plotly gives you access to Plotly Express. You can install it using
    `pip`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Plotly可以访问Plotly Express。你可以使用`pip`安装它：
- en: '`pip install plotly==5.13.1`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip install plotly==5.13.1`'
- en: 'or conda:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 或 conda：
- en: '`conda install -c plotly plotly=5.13.1`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda install -c plotly plotly=5.13.1`'
- en: Note that the version number will change in time, so be sure to check the Plotly
    [docs](https://plotly.com/python/getting-started/#installation), which also include
    support for classic Jupyter Notebook and JupyterLab, if needed. Additionally,
    you can find the *PyPi* page for Plotly Express [here](https://pypi.org/project/plotly-express/).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，版本号会随着时间变化，因此请务必检查Plotly的[文档](https://plotly.com/python/getting-started/#installation)，其中还包括对经典Jupyter
    Notebook和JupyterLab的支持（如有需要）。此外，你可以在[这里](https://pypi.org/project/plotly-express/)找到Plotly
    Express的*PyPi*页面。
- en: The Process
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过程
- en: Data streams aren’t truly continuous. Websites are updated at *some* frequency,
    such as once per second. Likewise, we can’t get the data faster than it’s created,
    nor should we try to get it as fast as possible. If you ping a website too frequently,
    it may think it’s under attack and block your access. So, when possible, we should
    request data at the polite rate of every 5 or 10 seconds.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 数据流并不是真正连续的。网站更新的频率是*某个*频率，比如每秒一次。同样，我们不能比数据生成的速度更快地获取数据，也不应该尝试尽可能快地获取。如果你频繁地ping一个网站，它可能会认为受到攻击并阻止你的访问。因此，在可能的情况下，我们应该以每5或10秒的礼貌速率请求数据。
- en: 'In this project, we’ll handle streaming data *incrementally*. Here’s the workflow:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本项目中，我们将*逐步*处理流数据。以下是工作流程：
- en: Get the data from a website.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从网站获取数据。
- en: Put it in a pandas DataFrame.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其放入pandas DataFrame中。
- en: Plot it with Plotly Express.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Plotly Express绘制图表。
- en: Clear the plot.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除图表。
- en: Repeat.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复。
- en: Importing Libraries and Assigning Constants
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入库和分配常量
- en: In addition to Plotly Express, we’ll need the `time` module, to control how
    often we access the streaming data; the requests library, for retrieving the data
    from a URL; the pandas library, for preparing the data for plotting; and `IPython.display`,
    for clearing the plot prior to posting an updated ISS location.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Plotly Express外，我们还需要`time`模块来控制访问流数据的频率；requests库用于从URL获取数据；pandas库用于准备数据以供绘图；以及`IPython.display`，用于在发布更新的ISS位置之前清除图表。
- en: We’ll use a constant named `ISS_URL` to store the WTIA REST API URL. And since
    streaming data never ends, we'll assign another constant, `ORBIT_TIME_SECS`, to
    help us determine when to end the program. This constant represents the approximate
    time — in seconds — for one complete ISS orbit of the Earth (about 92 minutes).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用名为`ISS_URL`的常量来存储WTIA REST API的URL。由于流数据永无止境，我们将分配另一个常量`ORBIT_TIME_SECS`，帮助我们确定何时结束程序。该常量代表一个完整的ISS绕地球运行的时间（约92分钟）。
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Getting the Streaming Data
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取流数据
- en: The following `get_iss_telemetry` function retrieves the streaming data from
    the URL, loads it as a pandas DataFrame, drops unnecessary columns, and returns
    the DataFrame. Each time this function is called, it records the ISS telemetry
    for a *single instant in time*. Later, we'll call this function in a loop to track
    the ISS *over time*. Of course, for all this to work, you'll need an active internet
    connection.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`get_iss_telemetry`函数从URL获取流数据，将其加载为pandas DataFrame，删除不必要的列，并返回DataFrame。每次调用此函数时，它会记录ISS的*单个瞬间*的遥测数据。稍后，我们将在循环中调用此函数，以*随时间跟踪*
    ISS。当然，为了使这一切正常工作，你需要一个活跃的互联网连接。
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first step is to get the telemetry from the website. The requests library
    abstracts the complexities of HTTP (*HyperText Transfer Protocol*) requests in
    Python, making them simpler and more human friendly. The `get()` method retrieves
    the URL and assigns the output to a `response` variable, which references the
    `Response` object the web page returned for the request. This object's *text attribute*
    holds the web page as a readable text string.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先从网站获取遥测数据。requests库抽象化了Python中HTTP（*超文本传输协议*）请求的复杂性，使其更加简单和人性化。`get()`方法检索URL并将输出分配给一个`response`变量，该变量引用了网页返回的`Response`对象。此对象的*text属性*包含可读的网页文本字符串。
- en: The next step is to check the `response` object's HTTP status code. A code of
    200 means that the client has requested documents from the server and the server
    has complied. While 200 is the most common successful response, you may also see
    201, 202, 205, or 206.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是检查`response`对象的HTTP状态码。状态码200表示客户端已请求服务器上的文档，服务器已应允。虽然200是最常见的成功响应，但你可能还会看到201、202、205或206。
- en: 'The website response is in JSON (*JavaScript Object Notation*) format, so we
    use the `.json()` method to load the text string as a Python dictionary, named
    `data`. Here''s an example of the output:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 网站的响应格式为JSON（*JavaScript对象表示法*），因此我们使用`.json()`方法将文本字符串加载为Python字典，名为`data`。以下是输出示例：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Next, we turn the `data` dictionary into a pandas DataFrame named `telemetry`.
    Note that the `index=[0]` argument heads off an "avoid scalar values without index"
    error. As we don't need information like the "id" or "solar_lat," we'll drop those
    columns before returning the DataFrame.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将`data`字典转换为名为`telemetry`的pandas DataFrame。请注意，`index=[0]`参数可以避免“避免没有索引的标量值”错误。由于我们不需要诸如“id”或“solar_lat”之类的信息，我们将在返回DataFrame之前删除这些列。
- en: '![](../Images/10b4322ac9ce4cb44288b878a47bb6a1.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/10b4322ac9ce4cb44288b878a47bb6a1.png)'
- en: The final “telemetry” DataFrame (image by author)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的“遥测”DataFrame（图像来源于作者）
- en: Plotting the ISS
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制国际空间站
- en: The last step is to define a function to plot the telemetry for a given number
    of orbits. This function will call the previous function using a `for` loop. The
    resulting plot will include a *marker* for the ISS and a *line* to record its
    [*ground track*](https://en.wikipedia.org/wiki/Ground_track) over time.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是定义一个函数，用于绘制给定数量轨道的遥测数据。这个函数将使用`for`循环调用之前的函数。最终的图形将包括一个*标记*表示国际空间站，并且有一条*线*记录其[
    *地面轨迹*](https://en.wikipedia.org/wiki/Ground_track)随时间变化。
- en: As we will be plotting a sphere onto a 2D map, this circular path will appear
    as an S-shaped *sinusoid*. Here’s a [fun video](https://www.youtube.com/watch?v=JyfEffMrglI)
    explaining why.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将在二维地图上绘制一个球体，这条圆形路径将表现为一个S形的*正弦曲线*。这是一个[有趣的视频](https://www.youtube.com/watch?v=JyfEffMrglI)，解释了原因。
- en: '![](../Images/36ac42ff099734662399a2c09c8a34ff.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/36ac42ff099734662399a2c09c8a34ff.png)'
- en: Circular orbits appear sinusoidal when flattened (image by author).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当扁平化时，圆形轨道呈现为正弦波形（图像来源于作者）。
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `track_iss` function takes as arguments a URL, the number of orbits to plot,
    and a time interval, in seconds, for pausing execution. This pause is to prevent
    the website from being overwhelmed with requests. The last two arguments use keywords
    which means they will be treated as defaults.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`track_iss`函数接受一个URL、要绘制的轨道数量和一个暂停执行的时间间隔（秒）作为参数。这个暂停是为了防止网站被过多请求淹没。最后两个参数使用关键字，这意味着它们将被视为默认值。'
- en: The `num_pulls` variable refers to how many times we call our `get_iss_telemetry()`
    function and “pull” data from the website. This number is based on the orbital
    time, the number of orbits, and the pause interval.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`num_pulls`变量指的是我们调用`get_iss_telemetry()`函数并从网站“拉取”数据的次数。这个数字基于轨道时间、轨道数量和暂停间隔。'
- en: To draw the path of the ISS across the map, we’ll need to store the lat-lon
    pair from each pull in a list. So, we initialize an empty list for each attribute
    prior to starting the loop.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在地图上绘制国际空间站的轨迹，我们需要将每次提取的经纬度对存储在一个列表中。因此，我们在开始循环之前初始化每个属性的空列表。
- en: To plot the telemetry, we loop through the `num_pulls` variable and first call
    the `get_iss_telemetry()` function, rounding the result to two decimal places.
    We then append the latitude and longitude results to our lists and clear the screen,
    so that we start each loop with a fresh plot.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制遥测数据，我们遍历`num_pulls`变量，首先调用`get_iss_telemetry()`函数，将结果四舍五入到小数点后两位。然后，我们将纬度和经度结果附加到我们的列表中，并清除屏幕，以便每次循环都以新的图形开始。
- en: Now to generate the figure. First, we call the `px.scatter_geo()` method to
    plot points on a map of the Earth. The inputs are intuitive. The color of our
    ISS marker is determined by the DataFrame’s “visibility” column. The output consists
    of “daylight,” “eclipsed,” and “visible.” The latter refers to when the ISS is
    still reflecting sunlight and thus visible in the night sky. To convert these
    outcomes to colors, we pass the `color_discrete_map` argument a dictionary.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来生成图形。首先，我们调用`px.scatter_geo()`方法在地球地图上绘制点。输入直观易懂。我们的ISS标记的颜色由DataFrame的“visibility”列决定。输出包括“daylight”、“eclipsed”和“visible”。后者指的是ISS仍在反射阳光，从而在夜空中可见。要将这些结果转换为颜色，我们将`color_discrete_map`参数传递一个字典。
- en: To support “hover window” popups, we pass the `hover_data` argument a list of
    column names for the data we want to see. To see the *complete* DataFrame, we’d
    pass `df.columns`, rather than a list.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持“悬停窗口”弹出，我们将`hover_data`参数传递为我们想要查看的数据列名列表。要查看*完整*的DataFrame，我们应传递`df.columns`，而不是列表。
- en: In Plotly, a *figure* is comprised of one or more *traces*, where each trace
    is a plot element like a scatter plot, line plot, or bar plot. The `px.line_geo()`
    method returns a figure object containing a *single* trace object that represents
    a line drawn with the given latitudes and longitudes. We add this object using
    its *data attribute* (`.data[0]`). The index is “0” because there’s only one trace.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在Plotly中，*图形*由一个或多个*轨迹*组成，每个轨迹是一个绘图元素，例如散点图、折线图或条形图。`px.line_geo()`方法返回一个包含*单个*轨迹对象的图形对象，该对象表示用给定的纬度和经度绘制的线。我们使用其*数据属性*（`.data[0]`）来添加该对象。索引为“0”，因为只有一个轨迹。
- en: After adding a trace, we need to update the traces in the figure with the `update_traces()`
    method. Our ISS marker parameters are specified using a dictionary. We use an
    open “X” for the marker symbol. For the line plot, we specify a color of blue.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 添加轨迹后，我们需要使用`update_traces()`方法更新图中的轨迹。我们的ISS标记参数使用字典指定。我们使用开放的“X”作为标记符号。对于折线图，我们指定颜色为蓝色。
- en: To finish the figure, we call the `update_layout()` method and pass it a width,
    height, and title. Then we call the `show()` method to display the results.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成图形，我们调用`update_layout()`方法并传入宽度、高度和标题。然后我们调用`show()`方法来显示结果。
- en: The loop ends by calling the `time` module's `sleep()` method and passing it
    the `interval` variable. In this case, it will pause the loop for 10 seconds.
    Even though the WTIA REST API is *rate limited* to one second, there's no need
    to be greedy!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 循环通过调用`time`模块的`sleep()`方法并传入`interval`变量来结束。在这种情况下，它将使循环暂停10秒。尽管WTIA REST API的*请求速率*被限制为每秒一次，但没有必要贪婪！
- en: 'All that’s left to do is call our function:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的就是调用我们的函数：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/bdc0eab246346956ceb3b0fd95ca05c1.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bdc0eab246346956ceb3b0fd95ca05c1.png)'
- en: The ISS tracker showing ~2 orbits of the ISS (image by author)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 显示约2圈ISS轨道的ISS跟踪器（图片作者提供）
- en: The Outcome
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结果
- en: Despite a trivial amount of code, this plot possesses a *lot* of functionality.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管代码量微不足道，但这个图表拥有*很多*功能。
- en: If you hover the cursor over the marker, a popup window will display telemetry
    such as the station’s altitude, velocity (in km/hour), visibility, and so on.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将光标悬停在标记上，弹出窗口将显示诸如站点的高度、速度（以公里/小时为单位）、可见性等遥测数据。
- en: '![](../Images/d29dd5bf5fed7a1d1647be2580d74ca2.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d29dd5bf5fed7a1d1647be2580d74ca2.png)'
- en: The Plotly Express figure with the ISS marker’s hover window active (image by
    author)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly Express图形与激活的ISS标记悬停窗口（图片作者提供）
- en: You can zoom in and out with a mouse scroller or the toolbar. You can take screenshots,
    pan, and reset the view. The ISS marker will change colors depending on how the
    ISS is illuminated.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用鼠标滚轮或工具栏进行缩放。你可以截图、平移和重置视图。ISS标记的颜色会根据ISS的照明情况而变化。
- en: '![](../Images/72427d3e655e41725bf8bf40fcf87b9e.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/72427d3e655e41725bf8bf40fcf87b9e.png)'
- en: The ISS marker turns red when its position corresponds to daytime (image by
    author)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当ISS标记的位置对应于白天时，标记会变成红色（图片作者提供）
- en: Finally, we handled the streaming ISS data by treating it *incrementally*. And
    even though it’s being streamed at a frequency of one hertz, we pulled the data
    every ten secconds to go easy on the source API.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过*增量*处理流式ISS数据。尽管它以每秒一赫兹的频率流式传输，我们还是每十秒拉取一次数据，以便对源API更为友好。
- en: More Trackers
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多跟踪器
- en: You can also access the ISS’s telemetry through the [*Open-Notify-API*](http://open-notify.org/Open-Notify-API/ISS-Location-Now/).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过[*Open-Notify-API*](http://open-notify.org/Open-Notify-API/ISS-Location-Now/)访问ISS的遥测数据。
- en: 'And as always with Python, there’s more than one way to accomplish a task.
    Here are some alternative approaches for tracking the station:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 正如使用Python一样，总有多种方法可以完成任务。以下是一些追踪空间站的替代方法：
- en: Use Plotly Express with an [orthographic (globe) projection](https://medium.com/codex/tracking-the-space-station-live-with-python-155060d1df45).
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Plotly Express和[正射投影（地球）](https://medium.com/codex/tracking-the-space-station-live-with-python-155060d1df45)。
- en: Use Plotly Express and [calculate the station’s velocity.](https://pythonawesome.com/international-space-station-data-with-python-research/)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Plotly Express并[计算空间站的速度](https://pythonawesome.com/international-space-station-data-with-python-research/)。
- en: Use an [ISS icon](https://www.geeksforgeeks.org/how-to-track-iss-international-space-station-using-python/)
    for tracking and include crew information.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一个[ISS图标](https://www.geeksforgeeks.org/how-to-track-iss-international-space-station-using-python/)进行追踪，并包含船员信息。
- en: Track the station with [Raspberry Pi](https://www.hackster.io/sridhar-rajagopal/international-space-station-tracker-6afdca#:~:text=Run%20the%20iss.py%20python%20script%20%28using%20python3%29%3A%20%24,the%20International%20Space%20Station%20on%20your%20ePaper%20Display%21).
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[Raspberry Pi](https://www.hackster.io/sridhar-rajagopal/international-space-station-tracker-6afdca#:~:text=Run%20the%20iss.py%20python%20script%20%28using%20python3%29%3A%20%24,the%20International%20Space%20Station%20on%20your%20ePaper%20Display%21)追踪空间站。
- en: Thanks!
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谢谢！
- en: Thanks for reading and be sure to follow me for more *Quick Success Data Science*
    projects in the future.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读，确保关注我以获取未来更多*快速成功数据科学*项目。
