- en: 'Geospatial Data Science: Points Pattern Analysis'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/geospatial-data-science-points-pattern-analysis-a61e04a6ddb8](https://towardsdatascience.com/geospatial-data-science-points-pattern-analysis-a61e04a6ddb8)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A quick tutorial to perform a geospatial points pattern analysis in Python.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://gustavorsantos.medium.com/?source=post_page-----a61e04a6ddb8--------------------------------)[![Gustavo
    Santos](../Images/a19a9f4525cdeb6e7a76cd05246aa622.png)](https://gustavorsantos.medium.com/?source=post_page-----a61e04a6ddb8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a61e04a6ddb8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a61e04a6ddb8--------------------------------)
    [Gustavo Santos](https://gustavorsantos.medium.com/?source=post_page-----a61e04a6ddb8--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a61e04a6ddb8--------------------------------)
    ·8 min read·Sep 25, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4e4be86ffe20aa9ae48c9e9cdbc209cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Bernard Hermant](https://unsplash.com/@bernardhermant?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/Jlh7u4NjNAQ?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Geospatial Data Science is a sub-area of the Data area that deals with the analysis
    of data points taking in consideration where in space that event has happened.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say we own a chain of retail stores that sells smartphones. Our chain
    has a few distribution centers and we are about to open a couple of new stores.
    Where can we do that?
  prefs: []
  type: TYPE_NORMAL
- en: Such insight could come from a geospatial analysis that would show us where
    the sales are concentrated, if there are clusters where the sales are higher or
    lower and other insights.
  prefs: []
  type: TYPE_NORMAL
- en: The point pattern analysis enters in this game when we want to make sure we
    are looking at a geographically clustered dataset. Just like much of our work
    as Data Scientists, points pattern is about creating a hypothesis and removing
    much of the uncertainty to confirm it or not using statistics applied to data.
    In this case, it is not different. There are a couple of stats tests to be done,
    what will be shown in this post.
  prefs: []
  type: TYPE_NORMAL
- en: By the way, we have been studying Geospatial Data Science lately here in my
    blog. If you don’t know much about the subject, here are two good reads before
    you dive into this post.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/analyzing-geospatial-data-with-python-7244c1b9e302?source=post_page-----a61e04a6ddb8--------------------------------)
    [## Analyzing Geospatial Data with Python'
  prefs: []
  type: TYPE_NORMAL
- en: A practical data analysis post with Python code.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/analyzing-geospatial-data-with-python-7244c1b9e302?source=post_page-----a61e04a6ddb8--------------------------------)
    [](/analyzing-geospatial-data-with-python-part-2-hypothesis-test-fe3f3f18fc82?source=post_page-----a61e04a6ddb8--------------------------------)
    [## Analyzing Geospatial Data with Python (Part 2 — Hypothesis Test)
  prefs: []
  type: TYPE_NORMAL
- en: Learning about Geospatial Hypothesis test for Asheville’s AirBnb listings.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/analyzing-geospatial-data-with-python-part-2-hypothesis-test-fe3f3f18fc82?source=post_page-----a61e04a6ddb8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Coding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start with the packages to be used in this exercise. If any of them are
    not installed in your environment, don’t forget to use `pip install` or `conda
    install` (for Anaconda users) followed by the package name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The dataset to be used is, once again, the listings from *AirBnb* for the city
    of Asheville, in North Carolina, USA. The data can be retrieved from an independent
    project in the website [http://insideairbnb.com/](http://insideairbnb.com/), where
    anyone can go and download the datasets for analysis. The data is open under the
    [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).
  prefs: []
  type: TYPE_NORMAL
- en: I have downloaded the file [listings.csv.gz](http://data.insideairbnb.com/united-states/nc/asheville/2023-06-18/data/listings.csv.gz).
  prefs: []
  type: TYPE_NORMAL
- en: To load the data to a Python session, here’s the code. The first snippet is
    a simple `read_csv()` from Pandas, where we pre-determined which columns we would
    like to pull from the raw data. Then, we used `gpd.GeoDataFrame` to convert the
    dataset to the `Geopandas` object type, specifying the columns to use as X and
    Y axes, plus the geo coordinate system (`crs` *— use 4326 which is the same as
    the GPS systems, one of the most common reference systems*).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Basically, the transformation to Geopandas is the creation of this column `geometry`
    and the object type.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b8d34f2981deb87257ac73bbbf481e00.png)'
  prefs: []
  type: TYPE_IMG
- en: Geopandas dataset. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Great. With that done, let’s have a quick look at the map. The code is simple,
    with a figure `fig` and axes `ax` created with `subplots`, since there will be
    two plots. One for the base map and another for the points.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This code yields the next plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/67c0f2378fc687b424cbc76e65003b4b.png)'
  prefs: []
  type: TYPE_IMG
- en: Asheville, NC listings from Airbnb. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Cool. The map is looking ok, but it does not give us too much information. Let’s
    enhance our analysis now.
  prefs: []
  type: TYPE_NORMAL
- en: Point Pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first analysis we can do when thinking about Points Pattern Analysis is
    checking how concentrate those data points are in geographical terms.
  prefs: []
  type: TYPE_NORMAL
- en: Here, the `seaborn` library can be of help. The method `jointplot` brings us
    a scatterplot together with histograms on the margins. It is an awesome addition
    to the analysis, as it gives us insights about how concentrate are the points
    and where, just by looking where the bars are higher.
  prefs: []
  type: TYPE_NORMAL
- en: To create it, we can pass the x and y from the `geometry` column, plus the dataset
    (`data`), the size of the points (`s`) and `color`, and the `height` of the graphic.
    The next snippet is to add a basemap to this jointplot, which can be done with
    `contextily`, giving the jointplot variable to the method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As the result, we see this beautiful map.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a826a25c0c7e8930e784790bd7bb34e4.png)'
  prefs: []
  type: TYPE_IMG
- en: Jointplot over a base map of Asheville, NC. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: I love this plot. From it, we can quickly get some good insights already. The
    downtown area of the city marked in red (and surroundings) is indeed where the
    listings are concentrated. And then we can also notice that as we go farther from
    that region, the number of listings drops and gets more sparse.
  prefs: []
  type: TYPE_NORMAL
- en: 'That makes perfect sense. Let’s think about that: Airbnb is a platform for
    people to rent their houses or bedrooms. Those rental properties are normally
    in residential areas, since the main purpose of them is to serve as a home, not
    a business. And the location of house communities are normally in areas where
    there are urban infra-structure around, like malls, grocery store, pharmacy, banks
    etc. As houses in mountain remote locations are more challenging to be built,
    it is expected that there would be less location points there too.'
  prefs: []
  type: TYPE_NORMAL
- en: Statistical Tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have already plotted the jointplot and got some good insights, we
    still need to test the points pattern to know if they are statistically clustered
    or not. I mean, those points could be all together just by chance too. Who knows.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to test and make sure you’re working with a pattern, there are two good
    tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ripley’s G:** This test will check the cumulative distribution of the distances
    of a point to its nearest neighbors. So, the test measures the distance from a
    given house to neighbors 1, 2, 3, …, n and compare that distribution of distances
    with a simulated random distribution of points. If we observe that the observed
    data behaves differently than the simulation for a determinate space, we can conclude
    that the data has a pattern, thus it is clustered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ripley’s K:** This test makes a similar test, comparing the observed data
    with a random simulated distribution. The difference to the G test is that the
    K test considers all the distances in the data, not just the closest neighbors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ripley’s G tests the distribution of distances to the nearest neighbors. Ripley’s
    K tests the distribution of distances to the entire dataset.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Ripley’s G
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s learn how to perform those tests now. First, the G test. It is simple
    enough to write, but it takes a while to run, depending on the size of the dataset.
    Here, the test is getting 40 neighbors distances. It took about 6 minutes to run.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To plot the result, the code snippet is as follows. We are plotting one black
    line for the median of each simulation and a red line with the statistic for each
    data point.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As a result, the code displays the next figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4d3a091a9dfb8c1ada2eff736a8bde12.png)'
  prefs: []
  type: TYPE_IMG
- en: Ripley’s G test. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We can see that, for the distances of 0 and 0.003, the observed data grows faster
    than the simulated data, confirming that there are significant spatial patterns
    in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Ripley’s K
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The second test is the K test. This one works with a *null hypothesis of complete
    spatial randomness* and an *alternative hypothesis of spatial pattern in the data.*
  prefs: []
  type: TYPE_NORMAL
- en: Running the K test is as easy as the other one. However, the test is more computationally
    expensive. It took more than 30 minutes to run in a session on Google Colab.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The code above will give us the next plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e55c9eea26423ececb8aeaae66f15782.png)'
  prefs: []
  type: TYPE_IMG
- en: Ripley’s K test. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Once again, the observed data is much higher than the simulations, confirming
    our spatial pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Before You Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this post, we learned how to create some statistical tests for Geospatial
    points pattern confirmation.
  prefs: []
  type: TYPE_NORMAL
- en: Once we plot some data points on a map, they can be clustered just by chance,
    without a clear pattern. But a good way to confirm the geospatial pattern is to
    run the **Ripley’s G** and **Ripley’s K** tests.
  prefs: []
  type: TYPE_NORMAL
- en: One can benefit of those tests to confirm that there is a pattern in clusters
    with high and low prices in the city listings of Asheville, NC, for example. Therefore,
    if you’re listing a rental property, you would know the best price to compete
    in each neighborhood of that city.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can download the code in my repo at GitHub and apply to your data.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/gurezende/Studying/blob/master/Python/Geospatial/Points_Pattern_Python.ipynb?source=post_page-----a61e04a6ddb8--------------------------------)
    [## Studying/Python/Geospatial/Points_Pattern_Python.ipynb at master · gurezende/Studying'
  prefs: []
  type: TYPE_NORMAL
- en: This is a repository with my tests and studies of new packages - Studying/Python/Geospatial/Points_Pattern_Python.ipynb…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/gurezende/Studying/blob/master/Python/Geospatial/Points_Pattern_Python.ipynb?source=post_page-----a61e04a6ddb8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: If you liked my content, don’t forget to follow me or find me on [LinkedIn](https://www.linkedin.com/in/gurezende/).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@gustavorsantos?source=post_page-----a61e04a6ddb8--------------------------------)
    [## Gustavo Santos - Medium'
  prefs: []
  type: TYPE_NORMAL
- en: Read writing from Gustavo Santos on Medium. Data Scientist. I extract insights
    from data to help people and companies…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@gustavorsantos?source=post_page-----a61e04a6ddb8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[JORDAN, David S. [2023]. *Applied Geospatial Data Science with Python*. 1
    ed. Pactk Publishing.](https://www.amazon.com/Applied-Geospatial-Data-Science-Python/dp/1803238127/ref=asc_df_1803238127/?tag=hyprod-20&linkCode=df0&hvadid=598352683676&hvpos=&hvnetw=g&hvrand=1787360199645971497&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=1020988&hvtargid=pla-1875036424962&psc=1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.hindawi.com/journals/isrn/2013/753475/?source=post_page-----a61e04a6ddb8--------------------------------)
    [## A Statistical Test for Ripley''s Function Rejection of Poisson Null Hypothesis'
  prefs: []
  type: TYPE_NORMAL
- en: Ripley's function is the classical tool to characterize the spatial structure
    of point patterns. It is widely used in…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.hindawi.com](https://www.hindawi.com/journals/isrn/2013/753475/?source=post_page-----a61e04a6ddb8--------------------------------)
    [](https://github.com/pysal/pointpats/blob/main/notebooks/distance_statistics-numpy-oriented.ipynb?source=post_page-----a61e04a6ddb8--------------------------------)
    [## pointpats/notebooks/distance_statistics-numpy-oriented.ipynb at main · pysal/pointpats
  prefs: []
  type: TYPE_NORMAL
- en: Planar Point Pattern Analysis in PySAL. Contribute to pysal/pointpats development
    by creating an account on GitHub.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/pysal/pointpats/blob/main/notebooks/distance_statistics-numpy-oriented.ipynb?source=post_page-----a61e04a6ddb8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
