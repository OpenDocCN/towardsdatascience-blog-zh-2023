["```py\nlist[start:end:step]\n```", "```py\nmy_list: list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\neven_numbers: list = my_list[::2]  # [0, 2, 4, 6, 8]\n```", "```py\nmy_list: list = [1, 2, 3, 4, 5]\nreversed_list: list = my_list[::-1]  # [5, 4, 3, 2, 1]\n```", "```py\nx: int = 5\n\ncondition1: bool = x > 1  # check if x is greater than 1\ncondition2: bool = x < 10 # check if x is smaller than 10 \n\nprint(condition1 and condition2) # True\n```", "```py\nx: int = 5\n\nprint(1 < x < 10)   # True\nprint(10 < x < 20)  # False\n```", "```py\nx: int = 5\n\nprint(5 == x > 4)  # True\nprint(x < 10 < x*10 < 100)  # True\n```", "```py\n# Creating complex numbers\nz1 = 2 + 3j\nz2 = complex(4, -2)  # (4 -2j)\n\n# Accessing real and imaginary parts\nprint(z1.real)  # 2.0\nprint(z1.imag)  # 3.0\n\n# Arithmetic with complex numbers\nz3 = z1 + z2  # (6+1j)\nz4 = z1 * z2  # (14+8j)\nz5 = z1 / z2  # (0.1+0.8j)\n\n# Conjugate of a complex number\nz6 = z1.conjugate()  # (2-3j)\n```", "```py\nx: int = 5\ny: int = 99\n\nx + y  # 104\nprint(_)  # 104\n```", "```py\ndef my_sum(a, b, c):\n    return a + b + c\n```", "```py\nmy_list = [1, 2, 3]\n\nresult = my_sum(my_list[0], my_list[1], my_list[2])\nprint(result)  # 6\n```", "```py\nresult = my_sum(*my_list)\nprint(result)  # 6\n```", "```py\n# Example of dictionary argument unpacking\ndef my_func(a, b, c):\n    print(f\"a={a}, b={b}, c={c}\")\n\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\n\nmy_func(**my_dict)\n```"]