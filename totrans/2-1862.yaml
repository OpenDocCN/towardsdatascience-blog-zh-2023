- en: Simulated Annealing with Restart Strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/simulated-annealing-with-restart-a19a53d914c8](https://towardsdatascience.com/simulated-annealing-with-restart-a19a53d914c8)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A variation on the classic Simulated Annealing optimisation algorithm and its
    application to the Travelling Salesman Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@egorhowell?source=post_page-----a19a53d914c8--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----a19a53d914c8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a19a53d914c8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a19a53d914c8--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----a19a53d914c8--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a19a53d914c8--------------------------------)
    ·5 min read·Feb 13, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6c17609952a9449fb2de3dd465a9a0ee.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Jonathan Greenaway](https://unsplash.com/es/@jogaway?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In my previous article we discussed how to solve the [***Travelling Salesman
    Problem (TSP)***](https://en.wikipedia.org/wiki/Travelling_salesman_problem) using
    the [***meta-heuristic***](https://en.wikipedia.org/wiki/Metaheuristic) optimisation
    algorithm of [***Simulated Annealing***](https://en.wikipedia.org/wiki/Simulated_annealing).
    You can check out that article here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd?source=post_page-----a19a53d914c8--------------------------------)
    [## How To Solve Travelling Salesman Problem With Simulated Annealing'
  prefs: []
  type: TYPE_NORMAL
- en: Getting the optimal solution to the Travelling Salesman Problem using the Simulated
    Annealing optimisation algorithm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd?source=post_page-----a19a53d914c8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: The TSP is a famous [***combinatorial optimisation***](https://en.wikipedia.org/wiki/Combinatorial_optimization)
    and [***operations research***](https://en.wikipedia.org/wiki/Operations_research)
    problem. Its objective is to find the shortest distance a salesman can travel
    through ***n*** cities by visiting each city once and ending in the original/starting
    city.
  prefs: []
  type: TYPE_NORMAL
- en: The problem sounds simple, however as we add more cities the number of possible
    routes is subject to a [***combinatorial explosion***](https://en.wikipedia.org/wiki/Combinatorial_explosion).
    For example, with ***4*** cities the number of possible routes is ***3***, ***6***
    cities it is ***60***, however for ***20*** cities its a gigantic ***60,822,550,200,000,000!***
    In fact for ***20*** cities it would take on the order of [***~2000*** years to
    try every route](https://www.sciencedirect.com/topics/earth-and-planetary-sciences/traveling-salesman-problem)
    by [***brute-force***](https://blog.routific.com/blog/travelling-salesman-problem)!
  prefs: []
  type: TYPE_NORMAL
- en: The numberof possible solutions to the TSP scales as **(n-1)!/2** where **n**
    is the number of cities.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is where [***heuristic***](https://en.wikipedia.org/wiki/Heuristic_(computer_science))
    and meta-heuristic methods, like Simulated Annealing, come in to provide good-enough
    solutions in a reasonable amount of computation time.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will review the process of Simulated Annealing and explain
    a slight variation to its original algorithm which can lead to an improvement
    in perforamance. We will then implement this variation to solve the TSP in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Simulated Annealing With Restart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Simulated Annealing is a stochastic (random) [***global search***](https://en.wikipedia.org/wiki/Global_optimization)
    optimisation algorithm. It derives its name from the [***Annealing***](https://en.wikipedia.org/wiki/Annealing_(materials_science))
    process in [***Metallurgy***](https://en.wikipedia.org/wiki/Metallurgy) which
    alters the physical properties of a metal through the use of temperature.
  prefs: []
  type: TYPE_NORMAL
- en: Simulated Annealing uses this idea of temperature to help it compute the probability
    of transitioning to a less optimal solution to greater [***explore***](https://scikit-optimize.github.io/stable/auto_examples/exploration-vs-exploitation.html)
    the state space to have a higher chance of reaching the [***global optimum***](https://en.wikipedia.org/wiki/Maxima_and_minima).
    This is to avoid getting trapped in [***local optimums***](https://en.wikipedia.org/wiki/Local_optimum)
    that [***greedy***](https://en.wikipedia.org/wiki/Greedy_algorithm) algorithms
    such as [***Nearest Neighbour***](https://en.wikipedia.org/wiki/Nearest_neighbour_algorithm)
    often do.
  prefs: []
  type: TYPE_NORMAL
- en: Theory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The general mathematical framework for Simulated Annealing is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9da4d08b77e9b035591c1bf918a26073.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation generated by author in LaTeX.
  prefs: []
  type: TYPE_NORMAL
- en: 'Where:'
  prefs: []
  type: TYPE_NORMAL
- en: This transition probability is derived from the [**Boltzmann distribution**](https://en.wikipedia.org/wiki/Boltzmann_distribution)
    from [**thermodynamics**](https://www.britannica.com/science/thermodynamics).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/85547289e68b773bdc0e161dd3c1a438.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation generated by author in LaTeX.
  prefs: []
  type: TYPE_NORMAL
- en: Here ***x*** is the current solution, ***x’*** is the new solution, ***Δy***
    is the difference in performance of the two solutions, ***P(x → x’)*** is the
    probability of transitioning to the new solution and ***T*** is the temperature
    of the process at that point in time.
  prefs: []
  type: TYPE_NORMAL
- en: If the new solution is better than the current solution, then we always transition
    to this new solution as the probability from the above formula is ***1***. Furthermore,
    when the new solution is worse but the temperature is very high, we are very likely
    to transition to the new solution despite its worse performance. However, as the
    temperature decreases, we are less likely to transition to a worse new solution.
    Therefore, the process starts to converge and is [***exploiting***](https://scikit-optimize.github.io/stable/auto_examples/exploration-vs-exploitation.html)
    the search space.
  prefs: []
  type: TYPE_NORMAL
- en: 'The temperature is often cooled geometrically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5792d44c41d7e19438a14cf4bb2e9d58.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation generated by author in LaTeX.
  prefs: []
  type: TYPE_NORMAL
- en: Where ***γ*** is the calling factor with a range ***0 ≤ γ ≤ 1*** and ***t***
    is the iteration number.
  prefs: []
  type: TYPE_NORMAL
- en: Another frequent question is how to calculate the initial temperature? This
    is sophisticated subject and and a good research [***here***](https://www.researchgate.net/publication/227061666_Computing_the_Initial_Temperature_of_Simulated_Annealing)
    helps answer this question. In general, this mainly a trial and error process.
  prefs: []
  type: TYPE_NORMAL
- en: Variation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inspired from the authors of [this research paper](https://econpapers.repec.org/article/gamjmathe/v_3a9_3ay_3a2021_3ai_3a14_3ap_3a1625-_3ad_3a591554.htm),
    we can slightly modify this original implementation to help explore the search
    space more widely. This is done by **resetting the temperature to the initial
    temperature every time we find a new best solution**. A process which can be described
    as ***restart.*** This is essentially us carrying out several Simulated Annealing
    processes and choosing the best found solution.
  prefs: []
  type: TYPE_NORMAL
- en: Modified Algorithm For TSP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Steps to implement the modified Simulated Annealing algorithm for the TSP:'
  prefs: []
  type: TYPE_NORMAL
- en: Get an initial solution, this is any valid route.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Randomly select two cities and swap them to generate a new route.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Simulated Annealing to compute the probability of whether we accept this
    new solution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continue this process for a set number of iterations and cool the temperature
    on every iteration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the new solution is the best solution we have seen so far, then reset the
    temperature to the initial temperature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always log the best overall solution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now implement this new modified version of Simulated Annealing to solve
    the TSP. Lets begin by generating some cities and plotting an initial solution:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8007685ab58b5aef52d8f57cf2855b9f.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now lets build a Python class for the modified Simulated Annealing algorithm
    for the TSP:'
  prefs: []
  type: TYPE_NORMAL
- en: I am not the best coder, so the following snippet of code is not the most optimal
    or best practice implementation!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the algorithm and logging the outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ae4a3ff6b1ae492fae8b9116fbf71c00.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8e8e3654647a54bd82a13c2b46c30ad6.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: From the above plots we see the temperature restarting frequently at the beginning
    of the process, but tailing off as the iterations increase. The best found route
    seems reasonable, however there is still some paths crossing over which may mean
    we have not found the global optimum. But thats the point of a meta-heuristic
    algorithm, the solution is meant to be *good-enough*!
  prefs: []
  type: TYPE_NORMAL
- en: Summary and Further Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article we have explained the modified version of the Simulated Annealing
    algorithm. In this version, we reset the temperature to the initial temperature
    every time we find a new best solution, a process named *restart*. This approach
    provided a good solution our simulated Travelling Salesman problem that we implemented
    in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Full code used in this article is available at my GitHub here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/egorhowell/Medium-Articles/blob/main/Optimisation/simulated-annealing/sa_with_restart.py?source=post_page-----a19a53d914c8--------------------------------)
    [## Medium-Articles/sa_with_restart.py at main · egorhowell/Medium-Articles'
  prefs: []
  type: TYPE_NORMAL
- en: Code I use in my medium blog/articles. Contribute to egorhowell/Medium-Articles
    development by creating an account on…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/egorhowell/Medium-Articles/blob/main/Optimisation/simulated-annealing/sa_with_restart.py?source=post_page-----a19a53d914c8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Another Thing!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----a19a53d914c8--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  prefs: []
  type: TYPE_NORMAL
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----a19a53d914c8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Connect With Me!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**YouTube**](https://www.youtube.com/@egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**GitHub**](https://github.com/egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References and Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Algorithms for Optimization*](https://mitpress.mit.edu/9780262039420/algorithms-for-optimization/)*.*
    [Mykel J. Kochenderfer](https://mitpress.mit.edu/author/mykel-j-kochenderfer-18773)
    and [Tim A. Wheeler](https://mitpress.mit.edu/author/tim-a-wheeler-28144). ***2019***.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
