["```py\nbrew install postgresql mysql\n```", "```py\nconda env create -f environment.yml\n```", "```py\npython src/generate-raw-data.py\n```", "```py\ncon = duckdb.connect('data/data-mart.duckdb')\ncon.query('select * from raw.orders limit 5').df()\n\n       Id SiteIdDelivery  DateBooked CurrencyCode  Price   Cost          Type\n0  o00000         s00018  2020-10-28          USD  13.44   9.36         Parts\n1  o00001         s00032  2020-05-04          USD  84.74  49.30         Parts\n2  o00002         s00009  2021-08-16          USD  76.38  41.19  Installation\n3  o00003         s00025  2022-07-26          USD  25.51   9.99  Installation\n4  o00004         s00038  2020-02-16          GBP  49.54  20.08         Parts\n```", "```py\ncon.query('select * from raw.fx_rates limit 5').df()\n\n   Year        Currency  Rate\n0  2020            Euro  1.10\n1  2021            Euro  1.20\n2  2022            Euro  1.15\n3  2020  Pound Sterling  1.30\n4  2021  Pound Sterling  1.40\n```", "```py\ncon.query('select * from raw.sites limit 5').df()\n\n       Id SiteOwnerId         Region\n0  s00000      a00000     Antarctica\n1  s00001      a00001         Europe\n2  s00002      a00002  South America\n3  s00003      a00003  South America\n4  s00004      a00004  South America\n```", "```py\ncon.query('select * from raw.accounts limit 5').df()\n\n       Id                 CompanyName  BillingRegion\n0  a00000         Cisco Systems, Inc.     Antarctica\n1  a00001     Asbury Automotive Group         Europe\n2  a00002                Helping Hand  South America\n3  a00003  Buena Vista Realty Service  South America\n4  a00004         The Pink Pig Tavern  South America\n```", "```py\n-- data_mart/models/staging/stg_fx_rates.sql\nselect\n    Year::integer as year,\n    Currency as currency_name,\n    Rate as to_usd_rate\nfrom raw.fx_rates\n```", "```py\n-- data_mart/models/marts/fct_fx_rates.sql\nselect\n    year,\n    case\n        when currency_name = 'Euro' then 'EUR'\n        when currency_name = 'Pound Sterling' then 'GBP'\n        else null\n    end as currency_code,\n    to_usd_rate\nfrom {{ ref('stg_fx_rates') }}\n```", "```py\n-- data_mart/models/marts/fct_orders.sql\nwith orders as (\n    select *,\n        extract('year' from booked_date)::integer as booked_year\n    from {{ ref('stg_orders') }}\n), rates as (\n    select * from {{ ref('fct_fx_rates') }}\n)\n\nselect\n    orders.order_id,\n    orders.deliver_to_site_id,\n    orders.order_type,\n    orders.currency_code,\n    orders.order_price_lcu,\n    orders.order_cost_lcu,\n    orders.order_price_lcu * rates.to_usd_rate as order_price_usd,\n    orders.order_cost_lcu * rates.to_usd_rate as order_cost_usd,\n    orders.booked_date\nfrom orders\nleft join rates\n    on orders.booked_year = rates.year and orders.currency_code = rates.currency_code\n```", "```py\n# bottom of data_mart/dbt_project.yml\nmodels:\n  data_mart:\n    +materialized: table\n    staging:\n      +materialized: view\n      +schema: staging\n    marts:\n      +materialized: table\n      +schema: marts\n```", "```py\n# $HOME/.dbt/profiles.yml\ndata_mart:\n  outputs:\n   dev:\n     type: duckdb\n     path: <path-to-data-mart.duckdb>  # replace with absolute path\n  target: dev\n```", "```py\ndbt run --project-dir data_mart/\n```", "```py\ncon = duckdb.connect('data/data-mart.duckdb')\ncon.query('select * from main_marts.fct_orders limit 5').df()\n\n  order_id deliver_to_site_id  ... order_cost_usd booked_date\n0   o00000             s00048  ...        10.2960  2020-10-28\n1   o00010             s00033  ...        86.1250  2020-01-21\n2   o00014             s00039  ...        20.8725  2022-04-25\n3   o00015             s00035  ...        32.8580  2021-08-18\n4   o00019             s00026  ...         0.3410  2020-07-27\n```", "```py\n# metrics/metrics.yml\nmetric:\n  name: order_revenue_usd\n  type: measure_proxy\n  type_params:\n    measure: order_revenue_usd\n---\nmetric:\n  name: order_margin_percent\n  type: expr\n  type_params:\n    expr: (order_profit_usd / order_revenue_usd) * 100\n    measures:\n      - order_profit_usd\n      - order_revenue_usd\n```", "```py\n# metrics/source_orders.yml\ndata_source:\n  name: orders  # must be unique across all sources\n  description: Master table customer orders.\n  sql_table: main_marts.fct_orders  # the corresponding database table\n  identifiers:  # primary and foreign keys\n    - name: order_id\n      type: primary\n    - name: site_id\n      type: foreign\n      expr: deliver_to_site_id\n  measures:\n    - name: order_revenue_usd\n      description: The total order revenue in USD.\n      expr: order_price_usd\n      agg: sum\n    - name: order_profit_usd\n      description: The profit of orders in USD.\n      expr: order_price_usd - order_cost_usd\n      agg: sum\n  dimensions:  # temporal or categorical attributes, or \"dimensions\"\n    - name: order_type\n      type: categorical\n    - name: booked_date\n      type: time\n      type_params:\n        is_primary: true\n        time_granularity: day\n  mutability:  # only relevant for caching\n    type: immutable\n```", "```py\n# metrics/source_sites.yml\ndata_source:\n  name: sites\n  description: Master table customer sites.\n  sql_table: main_marts.dim_sites\n  identifiers:\n    - name: site_id\n      type: primary\n    - name: account_id\n      type: foreign\n      expr: owner_account_id\n  dimensions:\n    - name: site_region\n      type: categorical\n  mutability:\n    type: immutable\n```", "```py\n# $HOME/.metricflow/config.yml\nmodel_path: <path-to-the-metrics-directory>  # <repo-root>/metrics\ndwh_schema: main_marts\ndwh_dialect: duckdb\ndwh_database: <path-to-data-mart.duckdb>  # <repo-root>/data/data-mart.duckdb\n```", "```py\nmf health-check\n```", "```py\nmf query --metrics order_revenue_usd --dimensions booked_date__year --order booked_date__year\n\nâœ” Success ðŸ¦„ - query completed after 0.25 seconds\n| booked_date__year   |   order_revenue_usd |\n|:--------------------|--------------------:|\n| 2020-01-01 00:00:00 |           290906.78 |\n| 2021-01-01 00:00:00 |           316765.36 |\n| 2022-01-01 00:00:00 |           196059.51 |\n```", "```py\nmf query --metrics order_revenue_usd,order_margin_percent --dimensions booked_date__year,site_id__account_id__account_region --order booked_date__year\n\nâœ” Success ðŸ¦„ - query completed after 0.56 seconds\n| booked_date__year   | site_id__account_id__account_region   |   order_revenue_usd |   order_margin_percent |\n|:--------------------|:--------------------------------------|--------------------:|-----------------------:|\n| 2020-01-01 00:00:00 | North America                         |            41072.23 |                  54.35 |\n| 2020-01-01 00:00:00 | South America                         |            74438.04 |                  50.04 |\n| 2020-01-01 00:00:00 | Asia                                  |            11014.66 |                  53.45 |\n| 2020-01-01 00:00:00 | Europe                                |            16931.01 |                  50.34 |\n| 2020-01-01 00:00:00 | Australia                             |            86869.00 |                  50.86 |\n| 2020-01-01 00:00:00 | Antarctica                            |            16628.68 |                  54.75 |\n| 2020-01-01 00:00:00 | Africa                                |            43953.17 |                  51.79 |\n| 2021-01-01 00:00:00 | Africa                                |            41805.07 |                  51.56 |\n| 2021-01-01 00:00:00 | Australia                             |            96069.27 |                  52.88 |\n| 2021-01-01 00:00:00 | Antarctica                            |            20648.17 |                  52.80 |\n| 2021-01-01 00:00:00 | North America                         |            42920.44 |                  53.30 |\n| 2021-01-01 00:00:00 | South America                         |            83231.81 |                  51.95 |\n| 2021-01-01 00:00:00 | Europe                                |            19789.86 |                  52.43 |\n| 2021-01-01 00:00:00 | Asia                                  |            12300.75 |                  53.04 |\n| 2022-01-01 00:00:00 | South America                         |            51114.66 |                  50.94 |\n| 2022-01-01 00:00:00 | Africa                                |            27058.34 |                  53.68 |\n| 2022-01-01 00:00:00 | Europe                                |            11311.23 |                  55.24 |\n| 2022-01-01 00:00:00 | Asia                                  |             8608.74 |                  51.16 |\n| 2022-01-01 00:00:00 | North America                         |            27818.37 |                  56.11 |\n| 2022-01-01 00:00:00 | Australia                             |            60342.90 |                  50.47 |\n| 2022-01-01 00:00:00 | Antarctica                            |             9805.27 |                  54.43 |\n```", "```py\nstreamlit run src/app.py\n```", "```py\nimport streamlit as st\nfrom metricflow import MetricFlowClient\n\nclient = MetricFlowClient.from_config()\n\n@st.cache_data\ndef load_data(metric: str, granularity: str = 'month'):\n    data = client.query(metrics=[metric],\n                        dimensions=['site_id__site_region', f'metric_time__{granularity}'],\n                        order=[f'metric_time__{granularity}']).result_df\n\n    data.columns = ['Period', 'Region', metric]\n    return data\n```"]