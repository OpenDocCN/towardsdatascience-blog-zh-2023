- en: How To Use Argument Parsing for Greater Efficiency in Machine Learning Workflows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-use-argument-parsing-for-greater-efficiency-in-machine-learning-workflows-2f637eaf5f6a](https://towardsdatascience.com/how-to-use-argument-parsing-for-greater-efficiency-in-machine-learning-workflows-2f637eaf5f6a)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A complete guide on how to use argparse for your command line applications and
    how it can be leveraged for machine learning projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://thomasdorfer.medium.com/?source=post_page-----2f637eaf5f6a--------------------------------)[![Thomas
    A Dorfer](../Images/9258a1735cee805f1d9b02e2adf01096.png)](https://thomasdorfer.medium.com/?source=post_page-----2f637eaf5f6a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2f637eaf5f6a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2f637eaf5f6a--------------------------------)
    [Thomas A Dorfer](https://thomasdorfer.medium.com/?source=post_page-----2f637eaf5f6a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2f637eaf5f6a--------------------------------)
    ·6 min read·Mar 29, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/69122e7dab880b86b587b9c89ca6fe94.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve spent some time roaming around in the world of data science or software
    engineering, you have most likely come across some applications that require you
    to use your command-line interface, or CLI. Common examples include [Azure CLI](https://learn.microsoft.com/en-us/cli/azure/)
    for managing Azure resources or [Git](https://git-scm.com/book/en/v2/Getting-Started-The-Command-Line)
    for version control and source code management.
  prefs: []
  type: TYPE_NORMAL
- en: The same type of functionality and program interactivity can be achieved with
    your own custom Python application. Command-line arguments are a great tool to
    enrich your application with the necessary flexibility that allows you and your
    users to seamlessly configure and customize the behavior of the program.
  prefs: []
  type: TYPE_NORMAL
- en: One popular and (perhaps) the most frequently used Python library for parsing
    command-line arguments is [**argparse**](https://docs.python.org/3/library/argparse.html).
    In this article, we’ll explore some of its core functionalities and — using concrete
    examples — take a closer look at how to efficiently leverage them for Python applications.
  prefs: []
  type: TYPE_NORMAL
- en: An Introduction to argparse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python’s argparse module offers an intuitive and user-friendly way to parse
    command-line arguments. In a nutshell, all you need to do is (1) create an `ArgumentParser`
    object, (2) add your argument specifications through the `add_argument()` method,
    and (3) run the parser with the `parse_args()` method. Let’s now explore each
    of these three steps in a bit more detail and see how they can be combined to
    form a fully functional command-line parser.
  prefs: []
  type: TYPE_NORMAL
- en: First, the `[ArgumentParser](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser)`
    object serves as a container that holds necessary information such as the name
    of the program or a brief description of it. This information can be retrieved
    by the user through the help arguments `-h` or `--help` and provides them with
    a better understanding of the intent of the program.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Second, we can add positional or optional arguments through the `add_argument()`
    method. Positional arguments are specified by simply providing the argument name,
    whereas optional arguments need to be identified through the `—` prefix. A single
    dash is used to specify an abbreviated version of the argument, usually a single
    letter, and a double dash is used to provide a more descriptive argument name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we can run the parser using the `parse_args()` method, which then allows
    us to access and manipulate the arguments specified in the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now run this program — let’s name it `program.py` — in our CLI with
    some random arguments to see how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We have now constructed a functionality that allows us to specify input arguments
    directly on the command-line and then use these to perform any operations we would
    like. You can probably imagine by now how useful this can be for any development
    process that requires the repeated run of a program and thus an easy and seamless
    way of interaction.
  prefs: []
  type: TYPE_NORMAL
- en: Utility in Machine Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s assume you have built a machine learning or deep learning model in Python
    and you would like to run it using different hyperparameters, such as learning
    rate, batch size, or number of epochs, and store the results in different directories.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying these hyperparameters directly on the command-line considerably simplifies
    the way you interact with that program. It enables you to do experimentation with
    different model configurations without actually having to modify the underlying
    source code, thus also reducing the likelihood of introducing unintended bugs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Train a Random Forest Classifier'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine you want to build an experimentation workflow that allows you to seamlessly
    and repeatedly train a random forest classifier. You want to configure it in such
    a way that you can simply pass the training dataset, some hyperparameters, and
    the model’s target directory to the CLI and it will just run it, train the model
    and store it in the specified location for you.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we’ll use the publicly available [Iris Species](https://www.kaggle.com/datasets/uciml/iris)
    dataset. We can load the dataset through `seaborn` and save it as `iris.csv`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The get a better idea of what our data looks like, we can visualize it with
    a [pair plot](https://seaborn.pydata.org/generated/seaborn.pairplot.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1fece23c463a551e30046124c72fdc6f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by the Author. Dataset used: [Iris Species](https://www.kaggle.com/datasets/uciml/iris).
    License: [CC0 Public Domain](https://creativecommons.org/publicdomain/zero/1.0/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now on to our main task: building a parser functionality into our Python program.
    To train the random forest classifier, we’d like to pass it the training dataset
    — that’s going to be our positional argument — two hyperparameters, and a target
    path where our model will be stored. The latter ones will be our optional arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: For the optional arguments, we will also specify the type through the `type`
    keyword, the default values through the `default` keyword, and a helpful description
    of the argument through the `help` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we will parse the arguments and store the results in the variable `args`,
    which we will later use to specify the dataset that we’re reading in, the hyperparameters
    to train the classifier, and the location where we’d like the model to be saved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how this looks in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, let’s save that script as `train_rf.py` and place it in the same directory
    as our training dataset, `iris.csv`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we open up a terminal window from which we can call this program with
    custom-defined arguments. In the example below, we specify `n_estimators` to be
    100 and `max_depth` to be 10\. Regarding `model_path`, we’re happy with the default
    path and don’t need to specify it in this case.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This line will train our random forest classifier and, after a short while,
    you’ll see a file named `model.pkl` appear in your directory, which you can then
    use to validate your model on a test set or to produce predictions.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this article gave you some insights on how to use argparse in Python
    to parse arguments directly from the CLI and, consequently, improve the user experience
    and interactivity of your machine learning application.
  prefs: []
  type: TYPE_NORMAL
- en: Happy coding!
  prefs: []
  type: TYPE_NORMAL
- en: 'More Resources:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[argparse — Parser for command-line options, arguments and sub-commands — Python
    3.11.2 documentation](https://docs.python.org/3/library/argparse.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Liked this article?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s connect! You can find me on [Twitter](https://twitter.com/ThomasADorfer)
    and [LinkedIn](https://www.linkedin.com/in/thomasdorfer/).
  prefs: []
  type: TYPE_NORMAL
- en: If you like to support my writing, you can do so through a [Medium Membership](https://thomasdorfer.medium.com/membership),
    which provides you access to all my stories as well as those of thousands of other
    writers on Medium.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@thomasdorfer/membership?source=post_page-----2f637eaf5f6a--------------------------------)
    [## Join Medium with my referral link - Thomas A Dorfer'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Thomas A Dorfer (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@thomasdorfer/membership?source=post_page-----2f637eaf5f6a--------------------------------)
  prefs: []
  type: TYPE_NORMAL
