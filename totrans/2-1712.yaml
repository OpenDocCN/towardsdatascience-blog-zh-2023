- en: Python args, kwargs, and All Other Ways to Pass Arguments to Your Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/python-args-kwargs-and-all-other-ways-to-pass-arguments-to-your-function-bd2acdce72b5](https://towardsdatascience.com/python-args-kwargs-and-all-other-ways-to-pass-arguments-to-your-function-bd2acdce72b5)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Expertly design your function parameters in 6 examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://mikehuls.medium.com/?source=post_page-----bd2acdce72b5--------------------------------)[![Mike
    Huls](../Images/8f9f55a0d25db00799c5d37383b7f5b6.png)](https://mikehuls.medium.com/?source=post_page-----bd2acdce72b5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bd2acdce72b5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bd2acdce72b5--------------------------------)
    [Mike Huls](https://mikehuls.medium.com/?source=post_page-----bd2acdce72b5--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bd2acdce72b5--------------------------------)
    ·8 min read·Mar 7, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/232d65cc44f26ade0195ce94e644d795.png)'
  prefs: []
  type: TYPE_IMG
- en: What does the slash and asterisk do? (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: This article is a deep dive in designing your function parameters. We’ll find
    out what `*args` and `**kwargs` do, what the function of `/` and `*`is, and how
    to design your function parameters in the best way possible. A function with well-designed
    parameters is easier to understand and use by other developers. In this article
    we explore **6 questions** that demonstrate **everything you need to know** to
    **become a parameter-expert**. Let’s code!
  prefs: []
  type: TYPE_NORMAL
- en: 'Prep: definitions and passing arguments'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part we’ll quickly go through the terminology and all the ways Python
    offers to handle passing arguments to a function.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/six-levels-of-python-decorators-1f12c9067b23?source=post_page-----bd2acdce72b5--------------------------------)
    [## Understanding Python decorators: six levels of decorators from beginner to
    expert'
  prefs: []
  type: TYPE_NORMAL
- en: How decorators work, when to use them and 6 examples in increasingly complexity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/six-levels-of-python-decorators-1f12c9067b23?source=post_page-----bd2acdce72b5--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: What is the difference between parameters and arguments?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Many people use these terms interchangeably but there are differences. Parameters
    are initialized with the values that the arguments supply:'
  prefs: []
  type: TYPE_NORMAL
- en: '**parameters** are the names that are defined in the function definition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**arguments** are the values that are passed to the function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/9456d0abd2f46f9d3a8fb8e4818d04a2.png)'
  prefs: []
  type: TYPE_IMG
- en: parameters are red, arguments are green (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: What are the two ways I can pass arguments?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can pass arguments **positionally** and by **keywords**. In the example
    below we pass the value `hello` as a positional arg. The value `world` is passed
    with a keyword; we specify that we want to pass `world` to the `thing` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The difference between positional arguments and kwargs (keyword arguments)
    is that the **order** in which you pass positional arguments matter. If you call
    `the_func(''world'', ''hello'')` it will print `world hello`. The order in which
    you pass kwargs doesn’t matter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Also notice (in the last line) that you can mix and match positional and keyword
    arguments as long as the kwargs come after the positional ones.
  prefs: []
  type: TYPE_NORMAL
- en: Is the performance of args better than kwargs?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Check out the article below!
  prefs: []
  type: TYPE_NORMAL
- en: '[](/args-vs-kwargs-which-is-the-fastest-way-to-call-a-function-in-python-afb2e817120?source=post_page-----bd2acdce72b5--------------------------------)
    [## Args vs kwargs: which is the fastest way to call a function in Python?'
  prefs: []
  type: TYPE_NORMAL
- en: A clear demonstration of the timeit module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/args-vs-kwargs-which-is-the-fastest-way-to-call-a-function-in-python-afb2e817120?source=post_page-----bd2acdce72b5--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Designing function parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part we’ll answer 6 questions that demonstrate all the ways in which
    you can design your function parameters. Each answer will be accompanied by an
    example and a use-case if required.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. How do I catch all uncaught positional arguments?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With `*args` you can design your function in such a way that it accepts an unspecified
    number of parameters. As an example, take a look at the function below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this function we define the first two parameters (`a` and `b`) normally.
    Then we use `*args` to pack all remaining arguments in a tuple. Think of the `*`
    as eating up all unmached arguments and pushing them into a tuple-variable called
    ‘args’. Let’s see this in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The last call assigns the value 1 to parameter `a`, a 2 gets assigned to `b`
    and the `arg` variable gets filled with `(3, 4)`. Since this is a tuple we can
    loop over it in the function and use the values for multiplication!
  prefs: []
  type: TYPE_NORMAL
- en: '[](/why-and-how-custom-exceptions-lead-to-cleaner-better-code-2382216829fd?source=post_page-----bd2acdce72b5--------------------------------)
    [## Why and how custom exceptions lead to cleaner, better code'
  prefs: []
  type: TYPE_NORMAL
- en: Clean up your code by creating your own custom exceptions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/why-and-how-custom-exceptions-lead-to-cleaner-better-code-2382216829fd?source=post_page-----bd2acdce72b5--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 2\. How do I catch all uncaught keyword arguments?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The same trick we use in the previous part can be used to catch all remaining,
    unmatched keyword arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Like with `*args`, the `**kwargs` keyword eats up all unmatched keyword arguments
    and stores them in a dictionary called `kwargs`. We can then access this dictionary
    like in the function above.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: With `kwargs` we can add some extra arguments to the `introduce` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/no-need-to-ever-write-sql-again-sqlalchemys-orm-for-absolute-beginners-107be0b3148f?source=post_page-----bd2acdce72b5--------------------------------)
    [## No Need to Ever Write SQL Again: SQLAlchemy’s ORM for Absolute Beginners'
  prefs: []
  type: TYPE_NORMAL
- en: With this ORM you can create a table, insert, read, delete and update data without
    writing a single line of SQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/no-need-to-ever-write-sql-again-sqlalchemys-orm-for-absolute-beginners-107be0b3148f?source=post_page-----bd2acdce72b5--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 3\. How can I design my function to only accept keyword arguments?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you really don’t want to mix up your parameters you can force your function
    to only accept keyword arguments. A perfect use-case for this could be a function
    that transfers money from one account to another. You really don’t want to pass
    the account numbers positionally because then you run the risk that a developer
    switch up the account numbers accidentally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the function above you see the `*` again. I think of the asterisk as eating
    up all unmatched positional arguments, but whereas `*args` stores all unmatched,
    positional arguments in the `args` tuple, the bare `*` just voids them.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/understanding-python-context-managers-for-absolute-beginners-4873b6249f16?source=post_page-----bd2acdce72b5--------------------------------)
    [## Understanding Python Context-Managers for Absolute Beginners'
  prefs: []
  type: TYPE_NORMAL
- en: Understand the WITH statement with lightsabers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/understanding-python-context-managers-for-absolute-beginners-4873b6249f16?source=post_page-----bd2acdce72b5--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 4\. How do I design my function to only accept positional arguments?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The function below is an example of a function allowing only positional arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `/` in the function definition forces all parameters that precede it to
    be positional. Sidenote: this doesn’t mean that all parameters that follow the
    `/` *must* be kwarg-only; these can be positionally *and* with keywords.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Why would I want this? Doesn’t this decrease the readability of my code?**
    Good question! An example occasion could be when you define a function that is
    so clear that you don’t need the keyword-argument to specify what it does. For
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example it’s pretty clear that we are checking if the memory size of
    `''a''` exceeds 100 bytes. I can’t really think of a better name to give the `x`
    parameter and it’s fine to call the function without the need to specify that
    `x=’a’`. Another function is the built-int `len` function: it would be pretty
    awkward to call `len(target_object=some_list)`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a little extra we can change the parameter-name since we know it doesn’t
    break any calls to the function: we don’t allow kwargs. In addition we can even
    extend this function with full backward compatibility like so. The version below
    will check if any provided argument exceeds 100 bytes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We can replace the `x` by `*args` because in the previous version the `/` ensured
    that the function was called *only* with positional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/cython-for-absolute-beginners-30x-faster-code-in-two-simple-steps-bbb6c10d06ad?source=post_page-----bd2acdce72b5--------------------------------)
    [## Cython for absolute beginners: 30x faster code in two simple steps'
  prefs: []
  type: TYPE_NORMAL
- en: Easy Python code compilation for blazingly fast applications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/cython-for-absolute-beginners-30x-faster-code-in-two-simple-steps-bbb6c10d06ad?source=post_page-----bd2acdce72b5--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '**5\. Mix and match — How do I pass args that are either positional or kwargs?**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As an example we’ll look to the `len` function we’ve discussed earlier. This
    function allows only positional arguments. We’ll extend this function with by
    allowing the developer to choose whether or not to count duplicates. We want to
    the developer to pass this keyword with kwargs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As you see we want to count the `len` of the `x` variable. We can only pass
    the argument for the `x` parameter positionally since it’s preceded by a `/`.
    The `no_duplicates` parameter must be passed with a keyword since it follows the
    `*`. Let’s call the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[](/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----bd2acdce72b5--------------------------------)
    [## Destroying Duck Hunt with OpenCV — image analysis for beginners'
  prefs: []
  type: TYPE_NORMAL
- en: Write code that will beat every Duck Hunt high score
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/image-analysis-for-beginners-destroying-duck-hunt-with-opencv-e19a27fd8b6?source=post_page-----bd2acdce72b5--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Mix and match — all together
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The function below is pretty extreme example of how you can combine all previously
    discussed techniques. First, it forced the first two arguments to be passed positionaly,
    the next two can be passed positionally *and* with keywords, then two keyword-only
    parameters and then we catch the remaining uncaught with `**kwargs`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can pass this function like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[](/multi-tasking-in-python-speed-up-your-program-10x-by-executing-things-simultaneously-4b4fc7ee71e?source=post_page-----bd2acdce72b5--------------------------------)
    [## Multi-tasking in Python: Speed up your program 10x by executing things simultaneously'
  prefs: []
  type: TYPE_NORMAL
- en: Step-by-step guide to apply threads and processes to speed up your code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/multi-tasking-in-python-speed-up-your-program-10x-by-executing-things-simultaneously-4b4fc7ee71e?source=post_page-----bd2acdce72b5--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article we went through all the ways to design your function parameters
    and seen the way you can mix and match them so that the developer can use your
    function in the best way possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'I hope this article was as clear as I hope it to be but if this is not the
    case please let me know what I can do to clarify further. In the meantime, check
    out my [other articles](https://mikehuls.com/articles?tags=python) on all kinds
    of programming-related topics like these:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Git for absolute beginners: understanding Git with the help of a video game](https://mikehuls.medium.com/git-for-absolute-beginners-understanding-git-with-the-help-of-a-video-game-88826054459a)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Create and publish your own Python package](https://mikehuls.medium.com/create-and-publish-your-own-python-package-ea45bee41cdc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Create a fast auto-documented, maintainable, and easy-to-use Python API in
    5 lines of code with FastAPI](https://mikehuls.medium.com/create-a-fast-auto-documented-maintainable-and-easy-to-use-python-api-in-5-lines-of-code-with-4e574c00f70e)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Happy coding!
  prefs: []
  type: TYPE_NORMAL
- en: — Mike
  prefs: []
  type: TYPE_NORMAL
- en: '*P.S: like what I’m doing?* [*Follow me!*](https://mikehuls.medium.com/membership)'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://mikehuls.medium.com/membership?source=post_page-----bd2acdce72b5--------------------------------)
    [## Join Medium with my referral link — Mike Huls'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Mike Huls (and thousands of other writers on Medium).
    Your membership fee directly supports Mike…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: mikehuls.medium.com](https://mikehuls.medium.com/membership?source=post_page-----bd2acdce72b5--------------------------------)
  prefs: []
  type: TYPE_NORMAL
