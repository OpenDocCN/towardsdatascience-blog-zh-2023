["```py\n$ conda create -n dash-app python=3.9.12\n$ conda activate dash-app\n```", "```py\n.\n├── dash-app              \n│   └── assets              # this folder contains style files\n│   │   ├── style.py\n│   │   └── typography.css\n│   ├── components          # this folder contains reusable components\n│   │   ├── dropdown.py\n│   │   └── navbar.py\n│   ├── environment         # this folder contains environment settings\n│   │   ├── .env\n│   │   ├── .env_development\n│   │   └── settings.py\n│   ├── pages               # this folder contains the pages\n│   ├── plots               # this folder contains different plots\n│   ├── utils               # this folder contains helper functions\n│   ├── app.py\n│   ├── Dockerfile\n│   ├── index.py\n│   └── requirements.txt\n```", "```py\n# main style of the app\nMAIN_COLORS = {\n    'primary': '#165AA7',\n    'secondary': '#000000',\n    'third': '#FFFFFF',\n}\n```", "```py\nbody {\n    font-family: sans-serif;\n}\n\nh1, h2, h3, h4, h5, h6 {\n    text-align: center;\n}\n```", "```py\nfrom dash import dcc\n\ndef render_dropdown(dropdown_id: str, items=[''], clearable_option=False):\n    dropdown = dcc.Dropdown(\n        id=dropdown_id,\n        clearable=clearable_option,\n        options=[{'label': i, 'value': i} for i in items],\n        value=items[0],\n    )\n    return dropdown\n```", "```py\nimport dash_bootstrap_components as dbc\n\nfrom environment.settings import VERSION\n\n# import own style (see /assets)\nfrom assets.style import MAIN_COLORS\n\nnavbar = dbc.NavbarSimple(\n    children=[\n        dbc.NavItem(dbc.NavLink(\"Dashboard\", href=\"/dashboard\")),\n    ],\n    brand=\"Gapminder \" + VERSION,\n    brand_href=\"/\",\n    color=MAIN_COLORS[\"primary\"],\n    sticky='top',\n    links_left=True,\n    dark=True\n)\n```", "```py\nVERSION=1.0.0\n```", "```py\nVERSION=1.0.0-dev\nHOST=127.0.0.1\nPORT=7000\nDEBUG=True\n```", "```py\nimport os\nfrom dotenv import load_dotenv\n\nenv_path = os.path.join(os.path.dirname(__file__), os.getenv('ENV_FILE') or \".env_development\")\nload_dotenv(dotenv_path=env_path, override=True)\n\nVERSION = os.environ.get(\"VERSION\")\n\nAPP_HOST = os.environ.get(\"HOST\")\nAPP_PORT = os.environ.get(\"PORT\")\nAPP_DEBUG = bool(os.environ.get(\"DEBUG\"))\n```", "```py\nfrom dash.dependencies import Input, Output\nfrom app import app\nfrom pages.dashboard.dashboard_model import map_dataframe\n\n# import components\nfrom plots.map_plot import *\n\n@app.callback(\n    Output(component_id='div-vis', component_property='children'),\n    Input(component_id='dropdown-choose-item', component_property='value')\n)\ndef update_vis(variable):\n    df = map_dataframe()\n    fig = bubble_map(df, variable)\n\n    return fig\n```", "```py\nimport plotly.express as px\n\ndef get_map_data():\n     df = px.data.gapminder()\n     return df\n\ndef map_dataframe():\n    return get_map_data()\n```", "```py\nimport dash_bootstrap_components as dbc\nfrom dash import html\n\n# import components\nfrom components.dropdown import render_dropdown\nfrom components.navbar import navbar\n\ndef render_dashboard():\n    return html.Div([\n        navbar,\n        html.Div(\n            [\n                html.Br(),\n                dbc.Container(\n                    fluid=True,\n                    children=[\n                        dbc.Row(\n                            [\n                                dbc.Col(\n                                    width=2,\n                                    children=dbc.Card(\n                                        [\n                                            dbc.CardHeader(\"Variables\"),\n                                            dbc.CardBody(\n                                                [\n                                                    render_dropdown(dropdown_id=\"dropdown-choose-item\", items=['Population', 'Life expectancy', 'GDP per capita'])\n                                                ]\n                                            )\n                                        ],\n                                        style={'height': \"84vh\"},\n                                    )\n                                ),\n                                dbc.Col(\n                                    width=10,\n                                    children=dbc.Card(\n                                        [\n                                            dbc.CardHeader(\"World map\"),\n                                            dbc.CardBody(\n                                                [\n                                                    html.Div(id='div-vis')\n                                                ]\n                                            )\n                                        ],\n                                        style={'height': '84vh'}\n                                    )\n                                )\n                            ]\n                        )\n                    ]\n                ),\n            ]\n        )\n    ])\n```", "```py\nfrom dash import html\n\ndef page_not_found():\n    return html.Div([\n        html.H1('404'),\n        html.H2('Page not found'),\n        html.H2('Oh, something went wrong!')\n    ])\n```", "```py\nfrom dash import dcc\nimport plotly.express as px\n\ndef bubble_map(df, variable):\n    dict_variable = {'Population':'pop', 'Life expectancy':'lifeExp', 'GDP per capita':'gdpPercap'}\n    variable = dict_variable[variable]\n\n    fig = px.scatter_geo(df, locations=\"iso_alpha\", color=\"continent\",\n                     hover_name=\"country\", size=variable,\n                     animation_frame=\"year\",\n                     projection=\"natural earth\")\n\n    return dcc.Graph(figure=fig)\n```", "```py\nimport dash\nimport dash_bootstrap_components as dbc\n\nAPP_TITLE = \"Plotly Dash\"\napp = dash.Dash(__name__,\n                title=APP_TITLE,\n                update_title='Loading...',\n                suppress_callback_exceptions=True,\n                external_stylesheets=[dbc.themes.FLATLY])\n```", "```py\nfrom dash import dcc\nfrom dash import html\nfrom dash.dependencies import Input, Output\n\n# import pages\nfrom pages.dashboard.dashboard_view import render_dashboard\nfrom pages.dashboard.dashboard_controller import *\nfrom pages.page_not_found import page_not_found\n\nfrom app import app\n\nfrom environment.settings import APP_HOST, APP_PORT, APP_DEBUG\n\nserver = app.server\n\ndef serve_content():\n    return html.Div([\n        dcc.Location(id='url', refresh=False),\n        html.Div(id='page-content')\n    ])\n\napp.layout = serve_content()\n\n@app.callback(Output('page-content', 'children'),\n              Input('url', 'pathname'))\ndef display_page(pathname):\n    if pathname in '/' or pathname in '/dashboard':\n        return render_dashboard()\n    return page_not_found()\n\nif __name__ == '__main__':\n    app.run_server(debug=APP_DEBUG, host=APP_HOST, port=APP_PORT)\n```", "```py\ndash==2.9.1\ndash-bootstrap-components==1.4.1\ngunicorn==20.1.0\npython-dotenv==1.0.0\ngeopandas==0.13.0\n```", "```py\n$ pip install -r requirements.txt\n```", "```py\n$ python index.py\n```", "```py\nFROM python:3.9.12\n\n# Create non-root group and user\nRUN addgroup --system shared1 \\\n    && adduser --system --home /var/cache/shared1 --ingroup shared1 --uid 1001 dashuser\n\nWORKDIR /usr/share/shared1/dashapp\n\nCOPY requirements.txt /usr/share/shared1/dashapp/\n\n# Elegantly activating a venv in Dockerfile\nENV VIRTUAL_ENV=/usr/share/shared1/dashapp/venv\nRUN python3 -m venv $VIRTUAL_ENV\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n\n# Install requirements\nRUN pip install --trusted-host pypi.python.org -r requirements.txt\n\nCOPY . /usr/share/shared1/dashapp/\n\n# set enviroment variables\n# This prevent Python from writing out pyc files\nENV PYTHONDONTWRITEBYTECODE=1\n# This keeps Python from buffering stdin/stdout\nENV PYTHONUNBUFFERED=1\n\nENV ENV_FILE=\".env\"\n\nEXPOSE 7000\n\nUSER dashuser\n\nENTRYPOINT [\"gunicorn\", \"index:server\", \"-b\", \"0.0.0.0:7000\", \"--workers=4\"]\n```", "```py\ndocker build -t dash-app:latest .\n```", "```py\ndocker run --name dashboard -d -p 7000:7000 dash-app\n```"]