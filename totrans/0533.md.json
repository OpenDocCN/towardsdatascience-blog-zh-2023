["```py\n# main_sysargv.py\nimport sys\n\nif __name__ == \"__main__\":\n    print(sys.argv)\n```", "```py\n$ python main_sysargv.py train 2023-01-01 \n['main_sysargv.py', 'train', '2023-01-01']\n```", "```py\n# main_argparse.py\nimport argparse\nimport datetime\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n\n    # Specify expected arguments\n    parser.add_argument(\n        \"--train\",\n        type=bool,\n    )\n    parser.add_argument(\n        \"--start_date\",\n        type=lambda dt: datetime.datetime.strptime(dt, \"%Y-%m-%d\"),\n    )\n\n    # Interpret passed arguments\n    args = parser.parse_args()\n    print(args)\n    print(args.train, type(args.train))\n    print(args.start_date, type(args.start_date))\n```", "```py\n$ python main_argparse.py --train true --start_date 2023-01-01\nNamespace(train=True, start_date=datetime.datetime(2023, 1, 1, 0, 0))\nTrue <class 'bool'>\n2023-01-01 00:00:00 <class 'datetime.datetime'>\n```", "```py\n# main_argparse2.py\nimport argparse\nfrom enum import Enum\n\nclass ConstantsSaveLocation(Enum):\n    LOCAL = \"local\"\n    DATABASE = \"database\"\n\nif __name__ == \"__main__\":\n    # 1\\. Include description and epilog\n    parser = argparse.ArgumentParser(\n        description=\"Run the training/scoring pipeline (text at the top)\",\n        epilog=\"Created by Kay Jan (text at the bottom)\",\n    )\n\n    # 2\\. Positional arguments\n    parser.add_argument(\n        \"train\",\n        type=bool,\n    )\n\n    # 3\\. Option arguments\n    parser.add_argument(\n        \"--n_estimator\",          # long name\n        \"-n\",                     # short name; alias\n        type=int,                 # simple data type\n        required=True,            # make mandatory\n        choices=[100, 200, 300],  # for limiting options\n        default=400,              # default value\n        dest=\"n\",                 # for Namespace reference\n        help=\"For model training\",  # for help docs\n        metavar=\"N\",              # for help docs\n    )\n\n    # 3\\. Option arguments (on/off switch)\n    parser.add_argument(\n        \"--verbose\",\n        \"-v\",\n        action=\"store_true\",      # on/off switch\n    )\n\n    # 4\\. Composite data type (Enum class)\n    parser.add_argument(\n        \"--save_loc\",\n        type=ConstantsSaveLocation,\n    )\n\n    # 4\\. Composite data type (list)\n    parser.add_argument(\n        \"--item\",\n        type=str,\n        nargs=\"*\",\n    )\n\n    # 5\\. Interpret passed arguments (from the command line via sysargv)\n    args = parser.parse_args()\n    print(args)\n\n    # 5\\. Interpret passed arguments (from passing arguments)\n    args = parser.parse_args(\n        [\n            \"true\", \"-n\", \"100\", \"-v\",\n            \"--save_loc\", \"local\", \"--item\", \"a\", \"b\", \"c\",\n        ]\n    )\n    print(args)\n```", "```py\n$ python main_argparse2.py -h                                                      \nusage: main_argparse2.py [-h] --n_estimator N [--verbose] [--save_loc SAVE_LOC] [--item ITEM [ITEM ...]] train\n\nRun the training/scoring pipeline (text at the top)\n\npositional arguments:\n  train\n\noptions:\n  -h, --help            show this help message and exit\n  --n_estimator N, -n N\n                        For model training\n  --verbose, -v\n  --save_loc SAVE_LOC\n  --item ITEM [ITEM ...]\n\nCreated by Kay Jan (text at the bottom)\n\n$ python main_argparse2.py true -n 100 -v --save_loc local --item a b c\nNamespace(train=True, n=100, verbose=True, save_loc=<ConstantsSaveLocation.LOCAL: 'local'>, item=['a', 'b', 'c'])\nNamespace(train=True, n=100, verbose=True, save_loc=<ConstantsSaveLocation.LOCAL: 'local'>, item=['a', 'b', 'c'])\n```", "```py\n# main_docopt.py\n\"\"\"Project Name\nDescription of project\n\nUsage:\n    main_docopt.py (train|test) --n_estimator <N> [--save_loc <LOC>] [--item <ITEM>...] [-v]\n    main_docopt.py --version\n\nOptions:\n    -h --help               Show this screen.\n    --version               Show version.\n    -n --n_estimator <N>    Number of estimator.\n    --save_loc <LOC>        Save location.\n    --item <ITEM>           Items.\n    -v --verbose            Verbosity.\n\"\"\"\nfrom docopt import docopt\n\nif __name__ == \"__main__\":\n    args = docopt(__doc__, version=\"0.1.0\")\n    print(args)\n```", "```py\n$ python main_docopt.py -h\nProject Name\nDescription of project\n\nUsage:\n    main_docopt.py (train|test) --n_estimator <N> [--save_loc <LOC>] [--item <ITEM>...] [-v]\n    main_docopt.py --version\n\nOptions:\n    -h --help               Show this screen.\n    --version               Show version.\n    -n --n_estimator <N>    Number of estimator.\n    --save_loc <LOC>        Save location.\n    --item <ITEM>           Items.\n    -v --verbose            Verbosity.\n\n$ python main_docopt.py train --n_estimator 100 --save_loc database --item a --item b\n{'--item': ['a', 'b'],\n '--n_estimator': '100',\n '--save_loc': 'database',\n '--verbose': False,\n '--version': False,\n 'test': False,\n 'train': True}\n```", "```py\n# main_typer.py\nimport typer\n\ndef main(train: bool, start_date: str = \"2010-01-01\"):\n    print(train, start_date)\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```", "```py\n$ python main_typer.py --help\n\n Usage: main_typer.py [OPTIONS] TRAIN                          \n\n╭─ Arguments ─────────────────────────────────────────────────╮\n│ *    train        [default: None] [required]                │\n╰─────────────────────────────────────────────────────────────╯\n╭─ Options ───────────────────────────────────────────────────╮\n│ --start-date        TEXT  [default: 2010-01-01]             │\n│ --help                    Show this message and exit.       │\n╰─────────────────────────────────────────────────────────────╯\n\n$ python main_typer.py true --start-date 2023-01-01 \nTrue 2023-01-01\n```", "```py\n# main_typer.py\nimport typer\nfrom enum import Enum\nfrom typing import List\n\napp = typer.Typer(help=\"Run the training/scoring pipeline\")\n\nclass ConstantsSaveLocation(Enum):\n    LOCAL = \"local\"\n    DATABASE = \"database\"\n\n@app.command()\ndef train(n_estimators: int, start_date: str = \"2010-01-01\"):\n    print(n_estimators, start_date)\n\n@app.command()\ndef test(save_loc: ConstantsSaveLocation, items: List[str]):\n    print(save_loc, items)\n\nif __name__ == \"__main__\":\n    app()\n```", "```py\n$ python main_typer2.py --help\n\n Usage: main_typer2.py [OPTIONS] COMMAND [ARGS]...             \n\n Run the training/scoring pipeline                             \n\n╭─ Options ───────────────────────────────────────────────────╮\n│ --install-completion          Install completion for the    │\n│                               current shell.                │\n│ --show-completion             Show completion for the       │\n│                               current shell, to copy it or  │\n│                               customize the installation.   │\n│ --help                        Show this message and exit.   │\n╰─────────────────────────────────────────────────────────────╯\n╭─ Commands ──────────────────────────────────────────────────╮\n│ test                                                        │\n│ train                                                       │\n╰─────────────────────────────────────────────────────────────╯\n\n$ python main_typer2.py train --help\n\n Usage: main_typer2.py train [OPTIONS] N_ESTIMATORS            \n\n╭─ Arguments ─────────────────────────────────────────────────╮\n│ *    n_estimators      INTEGER  [default: None] [required]  │\n╰─────────────────────────────────────────────────────────────╯\n╭─ Options ───────────────────────────────────────────────────╮\n│ --start-date        TEXT  [default: 2010-01-01]             │\n│ --help                    Show this message and exit.       │\n╰─────────────────────────────────────────────────────────────╯\n\n$ python main_typer2.py train 100 --start-date 2023-01-01\n100 2023-01-01\n\n$ python main_typer2.py test local a b c\nConstantsSaveLocation.LOCAL ['a', 'b', 'c']\n```"]