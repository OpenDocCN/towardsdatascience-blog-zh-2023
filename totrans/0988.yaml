- en: 'How to Group Data in R: Going Beyond “group_by”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/going-beyond-group-by-how-to-group-data-in-r-af30f19c1ff2](https://towardsdatascience.com/going-beyond-group-by-how-to-group-data-in-r-af30f19c1ff2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Go from beginner to advanced with these grouping workflows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://roryspanton.medium.com/?source=post_page-----af30f19c1ff2--------------------------------)[![Rory
    Spanton](../Images/6c35a3de7cb516aac09bc5cf417a6c70.png)](https://roryspanton.medium.com/?source=post_page-----af30f19c1ff2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----af30f19c1ff2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----af30f19c1ff2--------------------------------)
    [Rory Spanton](https://roryspanton.medium.com/?source=post_page-----af30f19c1ff2--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----af30f19c1ff2--------------------------------)
    ·8 min read·Feb 15, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/94f77c2b664024472c8b2639518e76a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Camille San Vicente](https://unsplash.com/@camillesanvicente?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Grouping data allows you to perform operations on subsets of a dataset, rather
    than the entire dataset. Working with grouped data is a crucial aspect of data
    analysis, and has near-limitless uses in data science.
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways to create and manipulate groups with R. In this article,
    I’ll explain grouping workflows from the dplyr package, from the fundamentals
    to more advanced functions.
  prefs: []
  type: TYPE_NORMAL
- en: By the end, you should have all the tools needed to extract valuable insights
    from grouped data. All of the code in this article is also available on [GitHub](https://github.com/roryspanton/medium-code/blob/master/grouping/grouping.R).
  prefs: []
  type: TYPE_NORMAL
- en: Basic grouping in dplyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To group data in dplyr, you’ll mainly use the `group_by` function. You can use
    this to specify one or more variables to group the data by. Here’s an example
    with the penguins dataset from the palmerpenguins package. You can install this
    package by running `install.packages(“palmerpenguins”)`. Once loaded with `library(palmerpenguins)`,
    you’ll be able to access the `penguins` dataset by name, as seen below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/715042c8ee8a7b0aa02ec3fb769ea62e.png)'
  prefs: []
  type: TYPE_IMG
- en: A quick look at the dataset allows us to identify categorical variables that
    are suitable for grouping. Here, we can group by species; a factor with three
    levels. Viewing the grouped data in the console, we can see the grouping structure
    printed clearly above the column names. I’ve highlighted this in red.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f1d85ecf7b61b3b1530e3e381ab8220e.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also access the names and levels of grouping variables in our data with
    the `group_keys` function. Using this function on our grouped data returns a tibble
    with each grouping variable as a column, and each group level as a row.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d65c2363111da238b2e0cf2babcd38f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Now the data is grouped, we can apply another function to it. A common use of
    grouped data is for calculating summary statistics with the `summarise` function.
    In the example below, `summarise` returns the mean body mass for each species
    of penguin. This gives us a neat summary table with little effort.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8b103d1e1fb6502dc8a0a2a737bff04e.png)'
  prefs: []
  type: TYPE_IMG
- en: You can also use other dplyr functions like `mutate`, `filter`, `select`, and
    more on grouped data. While diving deep into all of these functions could take
    up a whole article by itself, the dplyr [grouped data vignette](https://dplyr.tidyverse.org/articles/grouping.html)
    is a helpful guide to how these functions behave with grouped data.
  prefs: []
  type: TYPE_NORMAL
- en: Grouping by more than one variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The process of grouping data by more than one variable is simple; just add another
    variable name inside `group_by`. For instance, one could group the `penguins`
    data by both species and sex.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/16af95c733061adf1b5bcbd6dab0fee8.png)'
  prefs: []
  type: TYPE_IMG
- en: First, we filter out NA values in the sex column, then group by species and
    sex. Using the same summary function on this newly grouped data gives a mean body
    mass measure for each combination of levels across our two grouping variables.
  prefs: []
  type: TYPE_NORMAL
- en: Creating variables within group_by
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Moving on from the basic use of `group_by`, we can get into more advanced grouping workflows.
  prefs: []
  type: TYPE_NORMAL
- en: One useful yet underrated dplyr feature is that you can create new grouping
    variables within `group_by`.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say we want to get summary statistics for penguins at all levels of factor
    that isn’t already coded in the `penguins` data. For instance, the `penguins`
    dataset is made up of observations from three research studies, but the study
    identifier isn’t included in the cleaned version of the data. How can we calculate
    the mean body mass for penguins in each study?
  prefs: []
  type: TYPE_NORMAL
- en: An obvious solution would be to create a new variable with the study identifier
    for each row in the data, group by that variable, and then summarise.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/eeb3822911326c60d0a384266413aba7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'However, you can combine the first two steps into one by creating the grouping
    variable inside `group_by` with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This gives exactly the same output as the long-form version while saving valuable
    space. This makes it a great trick to shorten long pipe sequences in your analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Splitting up data by groups with group_split
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might run into situations where you want to split up groups into separate
    tibbles. For instance, you could write each species in the penguins data as a
    separate data file. For this, you’ll need `group_split`.
  prefs: []
  type: TYPE_NORMAL
- en: As its name suggests, `group_split` splits up data into separate tibbles; one
    for each level of the grouping variable species. It returns these tibbles in a
    list, which we can then feed into a separate function that writes each file one
    by one.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To write the filenames here, we make further use of the `group_keys` function
    to get the names of each level of our grouping variable. Using `pull` then turns
    these names into a vector that we can put into our `write_csv` function.
  prefs: []
  type: TYPE_NORMAL
- en: We then apply the `write_csv` function to each of the datasets inside `species_list`,
    giving each csv an appropriate filename from `species_names`. The `map2` function
    enables us to repeat this operation for each dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Using group_split like this saves a lot of manual filtering and writing. What
    could otherwise be a laborious task (especially in a dataset with even more groups)
    becomes achievable with minimal effort.
  prefs: []
  type: TYPE_NORMAL
- en: Grouping temporarily using with_groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes when grouping data for one purpose, we then want to drop the grouping
    structure to continue with further analyses. The standard way to do this is by
    using the `ungroup` function. In the example below, we filter the largest three
    penguins by body mass in each species. Ungrouping after this operation gets rid
    of the grouping structure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: However, grouping by a variable, manipulating the data, and then ungrouping
    can add unnecessary steps to your code. Luckily, there’s a shorter way of temporarily
    performing a grouped operation using the `with_groups` function.
  prefs: []
  type: TYPE_NORMAL
- en: First, you specify a grouping variable in the `.groups` argument. Then, you
    specify a function you want to apply to each group, using tidyverse-specific syntax.
    For instance, in this example, I’ve denoted the function I want to apply using
    the tilde (~) symbol. I then go onto write my function, using the “.” symbol as
    a placeholder for my data.
  prefs: []
  type: TYPE_NORMAL
- en: This syntax will be familiar to those who have learned the map functions from
    the tidyverse’s purrr package. These allow you to repeat other functions, giving
    each element of a list or vector as input. They’re well worth learning and help
    with understanding advanced features in other tidyverse packages.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-use-map-functions-for-data-science-in-r-8180c2ed6d79?source=post_page-----af30f19c1ff2--------------------------------)
    [## How to Use Map Functions for Data Science in R'
  prefs: []
  type: TYPE_NORMAL
- en: Learn powerful functional programming tools from the tidyverse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-use-map-functions-for-data-science-in-r-8180c2ed6d79?source=post_page-----af30f19c1ff2--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Running `with_groups` gives us the same output as the longer “`group_by`, `slice`,
    `ungroup`” workflow. Inspecting the output, we can see that `with_groups` has
    dropped the grouping structure in the data after applying our function just like
    the previous example, allowing for further analysis to be done on the full dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Bonus: applying grouped functions with group_map'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While `with_groups` shares some syntax with `map` functions, there’s also a
    special case of `map` that’s built for grouped data; `group_map`. We can examine
    its behaviour by using it to repeat the same `slice_max` function as the previous
    example.
  prefs: []
  type: TYPE_NORMAL
- en: '`group_map` applies to data that’s already grouped. It returns the results
    for each grouped operation as separate tibbles in a list, much like the results
    of `group_split`. You may also notice that there is no species column in the output.
    This is because `group_map` drops the grouping variables from its output by default.
    There is an option to keep them by adding the argument `.keep = TRUE`, however.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8d3012b8bd8c28ca3b830ec1dcbb0428.png)'
  prefs: []
  type: TYPE_IMG
- en: In my own code, I don’t use `group_map` very often, usually opting for more
    conventional `map` functions or simpler grouping workflows instead. That said,
    in cases where you start with grouped data and want to end with transformed, separated
    datasets, it’s a tidy shortcut.
  prefs: []
  type: TYPE_NORMAL
- en: 'Summary: When to use each dplyr grouping function'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In sum, the grouping functions in dplyr are a great way of extracting a lot
    of value from data with little effort. To recap their uses:'
  prefs: []
  type: TYPE_NORMAL
- en: '`group_by` adds one or more groupings to a dataset. You can create grouping
    variables within `group_by`, to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group_keys` returns the grouping structure of a tibble'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ungroup` removes groupings from data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group_split` separates a dataset into separate tibbles by group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_groups` temporarily groups data to perform a single operation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group_map` applies a function to grouped data and returns the results for
    each group in a list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if you only use `group_by`, you can do all kinds of summary statistics,
    within-group filtering, and much more. Lots of R users get on fine using this
    function alone.
  prefs: []
  type: TYPE_NORMAL
- en: That said, going further with the other grouping workflows we’ve explored gives
    you even more options. If you use them the next time you’re grouping data, you’ll
    save more space and reduce the amount of steps in your analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Want to read all my articles on programming, data science, and more? Sign up
    for a Medium membership at [this link](https://medium.com/@roryspanton/membership)
    and get full access to all my writing and every other story on Medium. This also
    helps me directly, as I get a small contribution from your membership fee at no
    extra cost to you.
  prefs: []
  type: TYPE_NORMAL
- en: You can also get all my new articles delivered straight to your inbox whenever
    I post by [subscribing here](https://roryspanton.medium.com/subscribe). Thanks
    for reading!
  prefs: []
  type: TYPE_NORMAL
