- en: Benchmarking Machine Learning Models with Cross-Validation and Matplotlib in
    Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/benchmarking-machine-learning-models-with-cross-validation-and-matplotlib-in-python-4957a41149e](https://towardsdatascience.com/benchmarking-machine-learning-models-with-cross-validation-and-matplotlib-in-python-4957a41149e)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Learn how to create an object-oriented approach to compare and evaluate the
    performance of machine learning models using cross-validation and results visualization*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@theDrewDag?source=post_page-----4957a41149e--------------------------------)[![Andrea
    D''Agostino](../Images/58c7c218815f25278aae59cea44d8771.png)](https://medium.com/@theDrewDag?source=post_page-----4957a41149e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4957a41149e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4957a41149e--------------------------------)
    [Andrea D''Agostino](https://medium.com/@theDrewDag?source=post_page-----4957a41149e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4957a41149e--------------------------------)
    ·5 min read·Jan 23, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/943df594f470acf297324fd669536fb8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will look at how to use Python to compare and evaluate the
    performance of machine learning models.
  prefs: []
  type: TYPE_NORMAL
- en: We will use cross-validation with Sklearn to test the models and Matplotlib
    to display the results.
  prefs: []
  type: TYPE_NORMAL
- en: The main motivation for doing this is **to have a clear and accurate understanding
    of model performance and thus improve the model selection process.**
  prefs: []
  type: TYPE_NORMAL
- en: Cross-validation is a robust method for testing models on data other than training
    data. It allows us to evaluate model performance on *folds*, data that has not
    been used to train the model itself, which gives us a more accurate estimate of
    model performance on real data.
  prefs: []
  type: TYPE_NORMAL
- en: For a detailed explanation of cross-validation, check this out article
  prefs: []
  type: TYPE_NORMAL
- en: '[](/what-is-cross-validation-in-machine-learning-14d2a509d6a5?source=post_page-----4957a41149e--------------------------------)
    [## What is cross-validation in machine learning'
  prefs: []
  type: TYPE_NORMAL
- en: Learn what cross-validation is — a fundamental technique for building generalizable
    models
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/what-is-cross-validation-in-machine-learning-14d2a509d6a5?source=post_page-----4957a41149e--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: We will use an object-oriented approach so that we can reuse it for other machine
    learning projects easily, making this method highly replicable.
  prefs: []
  type: TYPE_NORMAL
- en: The Benchmark class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start, we will create a class called `Benchmark` which will be responsible
    for testing models. The class will accept a dictionary of models, where the key
    will be the model name and the value will be the template object itself.
  prefs: []
  type: TYPE_NORMAL
- en: The class will also generate test data using the `make_classification` function
    of scikit-learn.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The main function of the class will be the `test_models` function, which will
    accept test data and use cross-validation to test the models. The function will
    store the results in an instance-bound variable and return the model with the
    highest score through the various iterations of the cross-validation.
  prefs: []
  type: TYPE_NORMAL
- en: To display the results, we will add a function called `plot_cv_results` to the
    class. This function will use Matplotlib to create a bar graph showing the average
    cross validation score for each model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Finally, to use the class, we will instantiate the `Benchmark` object by passing
    in the dictionary of models and calling the `test_models` function with the test
    data. Next, we will use the `plot_cv_results` function to display the results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: And this is the result.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9eee6baf2e12209bc76d83061f841d0e.png)'
  prefs: []
  type: TYPE_IMG
- en: Model benchmark result. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: This way, **we can easily compare and evaluate the performance of models and
    then choose the model that performs best for our specific problem.**
  prefs: []
  type: TYPE_NORMAL
- en: In this example we used the `make_classification` function to generate the toy
    data, but of course you can use any dataset you like.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the `Benchmark` class can be extended to include other features,
    such as the ability to save results to a file or test models across multiple datasets.
  prefs: []
  type: TYPE_NORMAL
- en: What are the next steps?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Following the usual machine learning pipeline, the next step will **be to tune
    the hyperparameters of the best model** (in this case `ExtraTreesClassifier`).
    This if our features are to be considered definitive.
  prefs: []
  type: TYPE_NORMAL
- en: If they are not, an intermediate step would be to do **feature selection / engineering**,
    and repeat the benchmarking step every time such features are changed.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Benchmark` class we’ve created is just one example of how you can implement
    this technique in a project, but it can easily be adapted and customized to meet
    your project’s specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: The main benefit of using this approach is **that it automates the process of
    comparing and evaluating models, which can save time and reduce human errors.**
  prefs: []
  type: TYPE_NORMAL
- en: Recommended Reads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the interested, here are a list of books that I recommended for each ML-related
    topic. There are ESSENTIAL books in my opinion and have greatly impacted my professional
    career.
  prefs: []
  type: TYPE_NORMAL
- en: '**Intro to ML**: [*Confident Data Skills: Master the Fundamentals of Working
    with Data and Supercharge Your Career*](https://amzn.to/3WZ51cE)by Kirill Eremenko'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sklearn / TensorFlow**: [*Hands-On Machine Learning with Scikit-Learn, Keras,
    and TensorFlow*](https://amzn.to/3jseVGb) by Aurelien Géron'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NLP**: [*Text as Data: A New Framework for Machine Learning and the Social
    Sciences*](https://amzn.to/3l9FO22)by Justin Grimmer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sklearn / PyTorch**: [*Machine Learning with PyTorch and Scikit-Learn: Develop
    machine learning and deep learning models with Python*](https://amzn.to/3wYZf0e)
    by Sebastian Raschka'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data Viz**: [*Storytelling with Data: A Data Visualization Guide for Business
    Professionals*](https://amzn.to/3HUtGtB) by Cole Knaflic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Useful Links (written by me)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Learn how to perform a top-tier Exploratory Data Analysis in Python**: [*Exploratory
    Data Analysis in Python — A Step-by-Step Process*](/exploratory-data-analysis-in-python-a-step-by-step-process-d0dfa6bf94ee)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Learn the basics of TensorFlow**: [*Get started with TensorFlow 2.0 — Introduction
    to deep learning*](https://medium.com/towards-data-science/a-comprehensive-introduction-to-tensorflows-sequential-api-and-model-for-deep-learning-c5e31aee49fa)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Perform text clustering with TF-IDF in Python**: *Text Clustering with TF-IDF
    in Python*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**If you want to support my content creation activity, feel free to follow
    my referral link below and join Medium’s membership program**. I will receive
    a portion of your investment and you’ll be able to access Medium’s plethora of
    articles on data science and more in a seamless way.'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@theDrewDag/membership?source=post_page-----4957a41149e--------------------------------)
    [## Join Medium with my referral link - Andrea D''Agostino'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Andrea D'Agostino (and thousands of other writers on Medium).
    Your membership fee directly…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@theDrewDag/membership?source=post_page-----4957a41149e--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Code template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here is the entire codebase
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
