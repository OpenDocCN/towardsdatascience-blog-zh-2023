- en: How to Create a Heat-Line Plot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-create-a-heat-line-plot-82f8038d1659](https://towardsdatascience.com/how-to-create-a-heat-line-plot-82f8038d1659)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Creating a multi-dimensional segmented line graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://barrysmyth.medium.com/?source=post_page-----82f8038d1659--------------------------------)[![barrysmyth](../Images/b8a047ec4b651b9a476a3d430c5723f6.png)](https://barrysmyth.medium.com/?source=post_page-----82f8038d1659--------------------------------)[](https://towardsdatascience.com/?source=post_page-----82f8038d1659--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----82f8038d1659--------------------------------)
    [barrysmyth](https://barrysmyth.medium.com/?source=post_page-----82f8038d1659--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----82f8038d1659--------------------------------)
    ·4 min read·Nov 23, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: You’ve probably heard of a [heatmap](https://en.wikipedia.org/wiki/Heat_map).
    Those 2D colour-coded grids that can be used to represent several (usually 3)
    data dimensions; for example, the heatmap below shows the average temperature
    in the Southern Rockies based on month and year.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1193a14008d575f0a15984eae4f99d05.png)'
  prefs: []
  type: TYPE_IMG
- en: A heat map showing the average temperature in the Southern Rockies from 1950
    to 2020.. [[CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0)]
  prefs: []
  type: TYPE_NORMAL
- en: Heat-maps came to mind when I needed to visualise some [Strava data](/improving-the-strava-training-log-4d2039c49ec4).
    I wanted to compare some recent marathons that I ran by looking at my pacing and
    heart rate (zones) across the 42.2 kms of each race. This suggested a line graph
    to me, using each 1 km interval as the *x-values* and my pacing during these intervals
    as the *y-values*. But what about my heart rate (as a measure of effort) during
    these intervals? The standard Matplotlib (my graphing library of choice) [line
    graph](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html)
    doesn't provide a straightforward way to encode such extra dimensions because
    properties such as line colour, thickness and style are fixed and applied top
    the graph as a whole. For my use-case, I wanted to be able to vary the properties
    of the individual line segments so that I could, for example, use colour to show
    my heart rate zones during different parts of the race.
  prefs: []
  type: TYPE_NORMAL
- en: This is reasonably straightforward to do and it is a useful example of when
    and why to look beyond Matplotlib’s default built-ins. The basic idea is to separately
    plot each of the line segments making up the line graph. This way we can individually
    control the visual properties of each segment so that, for example, the line segment’s
    colour can be used to represent something like heart rate in this case.
  prefs: []
  type: TYPE_NORMAL
- en: We can do this by using Matplotlib’s `[LineCollection](https://matplotlib.org/3.1.1/gallery/shapes_and_collections/line_collection.html)`*,*
    as a convenient way to plot multiple lines (or line segments) with separate colours
    and widths. To do this we need to convert our list of (x, y) points into a list
    of start and end coordinates for each of the line segments. For example, given
    the following (x, y) points …
  prefs: []
  type: TYPE_NORMAL
- en: (x0, y0), (x1, y1), …, (xn, yn)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '… we need to produce a list of line segments as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[ [(x0, y0), (x1, y1)], [(x1, y1), (x2, y2)], …, [(xn-1, yn-1), (xn, yn)] ]'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is the purpose of lines 12–16 in the code below; although the above is
    a somewhat simplified representation for the purpose of this explanation.
  prefs: []
  type: TYPE_NORMAL
- en: Example code to produce a simple heat-line.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we can use these segments to produce a `LineCollection`, specifying the
    colours and widths (`linewidths`) of each segment and using `.add_collection`
    to add them to the current axis (`ax`); lines 19 and 20 above.
  prefs: []
  type: TYPE_NORMAL
- en: Using some sample *x, y* and heart rate (zone) data, this produces the line
    graph below. It is close to what we want but not yet correct, because the individual
    line segments are not connected properly.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8e28ebf93a75612ed93a1bde9b80da18.png)'
  prefs: []
  type: TYPE_IMG
- en: A first attempt at the heat-line, showing average pacing per KM of the marathon
    with each segment colour-coded according to heart rate zones.
  prefs: []
  type: TYPE_NORMAL
- en: To fix this we can set `capstyle='round'` to connect the line segments more
    elegantly; lines 22 and 26 in the final code below. And, as one additional improvement,
    we can also add a border around the line, by plotting a slightly thicker single-colour
    line in the background; lines 21 and 22 below. This produces a more pleasing-looking
    end result shown below. The addition of a border is useful as a way to emphasise
    the heat-line and can also help with separating multiple heat-lines, if several
    are plotted on the same axis.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3009facba1bcf9bf2e50755fee02204e.png)'
  prefs: []
  type: TYPE_IMG
- en: An updated heat-line, with improved transitions between segments and the addition
    of a border for emphasis and to facilitate better separation if multiple heat-lines
    are plotted on the same axis.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this is updated below, with additional parameters to control the
    appearance (width and colour) of the border. Notice that in this example, we do
    not adjust the width/thickness of the line graph — the width of all of the line
    segments is set to a fixed value (10) — although the code provided does allow
    for such an adjustment using the parameter `w`.
  prefs: []
  type: TYPE_NORMAL
- en: Improved code to produce a version of the heat-line with improved segment connections
    and a border.
  prefs: []
  type: TYPE_NORMAL
- en: In this short article, we have discussed how to produce a modified version of
    a line graph, using Python and Matplotlib, which allows for individual line graph
    segments to be adjusted (colour and width) to encode up to 4 data dimensions instead
    of the usual 2\. This type of graph proved to be useful in some work I was doing
    analysing marathon races and for completeness, an example of a finished graph
    is shown below, with various annotations added for clarity.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b2d619e7bf59ed3aeb32f84aa7e55fc3.png)'
  prefs: []
  type: TYPE_IMG
- en: An example race visualisation for a runner of the Dublin City Marathon (DCM)
    using the heat-line. The mean pace for the race is shown along with the minimum
    and maximum paces achieved during the race. An elevation plot of the Dublin course
    is included for reference.
  prefs: []
  type: TYPE_NORMAL
- en: Marathons aside, this approach should be general enough to be used in a variety
    of other circumstances to visualise multi-dimensional time-series data.
  prefs: []
  type: TYPE_NORMAL
- en: Unless otherwise indicated, all images and code have been produced by the [author](https://barrysmyth.medium.com).
  prefs: []
  type: TYPE_NORMAL
