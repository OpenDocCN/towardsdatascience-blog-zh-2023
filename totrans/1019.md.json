["```py\narray(['Hot', 'Warm', 'Freezing', 'Lava Hot', 'Cold', 'Boiling Hot', nan],\n      dtype=object)\n```", "```py\ndf_train = train.copy()\n\nmapping = {\n    \"Cold\": 0,\n    \"Hot\": 1,\n    \"Lava Hot\": 2,\n    \"Boiling Hot\": 3,\n    \"Freezing\": 4,\n    \"Warm\": 5\n}\n\ndf_train[\"ord_2\"].map(mapping)\n\n>> \n0         1.0\n1         5.0\n2         4.0\n3         2.0\n4         0.0\n         ... \n599995    4.0\n599996    3.0\n599997    4.0\n599998    5.0\n599999    3.0\nName: ord_2, Length: 600000, dtype: float64\n```", "```py\nfrom sklearn import preprocessing\n\n# we handle missing values\ndf_train[\"ord_2\"].fillna(\"NONE\", inplace=True)\n# init the sklearn encoder\nle = preprocessing.LabelEncoder()\n# fit + transform\ndf_train[\"ord_2\"] = le.fit_transform(df_train[\"ord_2\"])\ndf_train[\"ord_2\"]\n\n>>\n0         3\n1         6\n2         2\n3         4\n4         1\n         ..\n599995    2\n599996    0\n599997    2\n599998    6\n599999    0\nName: ord_2, Length: 600000, dtype: int64\n```", "```py\nmapping = {label: index for index, label in enumerate(le.classes_)}\nmapping\n\n>>\n{'Boiling Hot': 0,\n 'Cold': 1,\n 'Freezing': 2,\n 'Hot': 3,\n 'Lava Hot': 4,\n 'NONE': 5,\n 'Warm': 6}\n```", "```py\n |   |   |   |   |   |   \n-------------|---|---|---|---|---|---\n Freezing    | 0 | 0 | 0 | 0 | 0 | 1 \n Warm        | 0 | 0 | 0 | 0 | 1 | 0 \n Cold        | 0 | 0 | 0 | 1 | 0 | 0 \n Boiling Hot | 0 | 0 | 1 | 0 | 0 | 0 \n Hot         | 0 | 1 | 0 | 0 | 0 | 0 \n Lava Hot    | 1 | 0 | 0 | 0 | 0 | 0 \n```", "```py\nfrom sklearn import preprocessing\n\n# we handle missing values\ndf_train[\"ord_2\"].fillna(\"NONE\", inplace=True)\n# init sklearn's encoder\nohe = preprocessing.OneHotEncoder()\n# fit + transform\nohe.fit_transform(df_train[\"ord_2\"].values.reshape(-1, 1))\n\n>>\n<600000x7 sparse matrix of type '<class 'numpy.float64'>'\n with 600000 stored elements in Compressed Sparse Row format>\n```", "```py\nohe.fit_transform(df_train[\"ord_2\"].values.reshape(-1, 1)).toarray()\n\n>>\narray([[0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 1.],\n       [0., 0., 1., ..., 0., 0., 0.],\n       ...,\n       [0., 0., 1., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 1.],\n       [1., 0., 0., ..., 0., 0., 0.]])\n```", "```py\ndf_train.groupby([\"ord_2\"])[\"id\"].count()\n\n>>\nord_2\nBoiling Hot     84790\nCold            97822\nFreezing       142726\nHot             67508\nLava Hot        64840\nWarm           124239\nName: id, dtype: int64\n```", "```py\ndf_train.groupby([\"ord_2\"])[\"id\"].transform(\"count\")\n\n>>\n0          67508.0\n1         124239.0\n2         142726.0\n3          64840.0\n4          97822.0\n            ...   \n599995    142726.0\n599996     84790.0\n599997    142726.0\n599998    124239.0\n599999     84790.0\nName: id, Length: 600000, dtype: float64\n```", "```py\ndf_train[\"new_1\"] = df_train[\"ord_1\"].astype(str) + \"_\" + df_train[\"ord_2\"].astype(str)\ndf_train[\"new_1\"]\n\n>>\n0                 Contributor_Hot\n1                Grandmaster_Warm\n2                    nan_Freezing\n3                 Novice_Lava Hot\n4                Grandmaster_Cold\n                   ...           \n599995            Novice_Freezing\n599996         Novice_Boiling Hot\n599997       Contributor_Freezing\n599998                Master_Warm\n599999    Contributor_Boiling Hot\nName: new_1, Length: 600000, dtype: object\n```", "```py\ndf_train[\"ord_2\"].value_counts()\n\n>>\nFreezing       142726\nWarm           124239\nCold            97822\nBoiling Hot     84790\nHot             67508\nLava Hot        64840\nName: ord_2, dtype: int64\n```", "```py\ndf_train[\"ord_2\"].fillna(\"NONE\").value_counts()\n\n>>\nFreezing       142726\nWarm           124239\nCold            97822\nBoiling Hot     84790\nHot             67508\nLava Hot        64840\nNONE            18075\n```", "```py\ntest[\"target\"] = -1\ndata = pd.concat([train, test]).reset_index(drop=True)\nfeatures = [f for f in train.columns if f not in [\"id\", \"target\"]]\nfor feature in features:\n    le = preprocessing.LabelEncoder()\n    temp_col = data[feature].fillna(\"NONE\").astype(str).values\n    data.loc[:, feature] = le.fit_transform(temp_col)\n\ntrain = data[data[\"target\"] != -1].reset_index(drop=True)\ntest = data[data[\"target\"] == -1].reset_index(drop=True)\n```", "```py\ntrain = pd.read_csv(\"/kaggle/input/cat-in-the-dat-ii/train.csv\")\ntest = pd.read_csv(\"/kaggle/input/cat-in-the-dat-ii/test.csv\")\n\ndf = train.copy()\n\ndf[\"kfold\"] = -1\ndf = df.sample(frac=1).reset_index(drop=True)\ny = df.target.values\n\nkf = model_selection.StratifiedKFold(n_splits=5)\n\nfor f, (t_, v_) in enumerate(kf.split(X=df, y=y)):\n  df.loc[v_, 'kfold'] = f\n```", "```py\ndef run(fold: int) -> None:\n    features = [\n        f for f in df.columns if f not in (\"id\", \"target\", \"kfold\")\n    ]\n\n    for feature in features:\n        df.loc[:, feature] = df[feature].astype(str).fillna(\"NONE\")\n\n    df_train = df[df[\"kfold\"] != fold].reset_index(drop=True)\n    df_valid = df[df[\"kfold\"] == fold].reset_index(drop=True)\n\n    ohe = preprocessing.OneHotEncoder()\n\n    full_data = pd.concat([df_train[features], df_valid[features]], axis=0)\n    print(\"Fitting OHE on full data...\")\n    ohe.fit(full_data[features])\n\n    x_train = ohe.transform(df_train[features])\n    x_valid = ohe.transform(df_valid[features])\n    print(\"Training the classifier...\")\n    model = linear_model.LogisticRegression()\n    model.fit(x_train, df_train.target.values)\n\n    valid_preds = model.predict_proba(x_valid)[:, 1]\n\n    auc = metrics.roc_auc_score(df_valid.target.values, valid_preds)\n\n    print(f\"FOLD: {fold} | AUC = {auc:.3f}\")\n\nrun(0)\n\n>>\nFitting OHE on full data...\nTraining the classifier...\nFOLD: 0 | AUC = 0.785\n```", "```py\ndef run(fold: int) -> None:\n    features = [\n        f for f in df.columns if f not in (\"id\", \"target\", \"kfold\")\n    ]\n\n    for feature in features:\n        df.loc[:, feature] = df[feature].astype(str).fillna(\"NONE\")\n\n    print(\"Fitting the LabelEncoder on the features...\")\n    for feature in features:\n        le = preprocessing.LabelEncoder()\n        le.fit(df[feature])\n        df.loc[:, feature] = le.transform(df[feature])\n\n    df_train = df[df[\"kfold\"] != fold].reset_index(drop=True)\n    df_valid = df[df[\"kfold\"] == fold].reset_index(drop=True)\n\n    x_train = df_train[features].values\n    x_valid = df_valid[features].values\n\n    print(\"Training the classifier...\")\n    model = xgboost.XGBClassifier(n_jobs=-1, n_estimators=300)\n    model.fit(x_train, df_train.target.values)\n\n    valid_preds = model.predict_proba(x_valid)[:, 1]\n\n    auc = metrics.roc_auc_score(df_valid.target.values, valid_preds)\n\n    print(f\"FOLD: {fold} | AUC = {auc:.3f}\")\n\n# execute on 2 folds\nfor fold in range(2):\n    run(fold)\n\n>>\nFitting the LabelEncoder on the features...\nTraining the classifier...\nFOLD: 0 | AUC = 0.768\nFitting the LabelEncoder on the features...\nTraining the classifier...\nFOLD: 1 | AUC = 0.765\n```"]