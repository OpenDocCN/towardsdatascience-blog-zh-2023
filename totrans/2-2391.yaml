- en: Window Functions in PostgreSQL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PostgreSQL中的窗口函数
- en: 原文：[https://towardsdatascience.com/window-functions-in-postgresql-788d2ad57c6b](https://towardsdatascience.com/window-functions-in-postgresql-788d2ad57c6b)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/window-functions-in-postgresql-788d2ad57c6b](https://towardsdatascience.com/window-functions-in-postgresql-788d2ad57c6b)
- en: A must-know for any data practitioner
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任何数据从业者必须了解的知识
- en: '[](https://ms101196.medium.com/?source=post_page-----788d2ad57c6b--------------------------------)[![Merlin
    Schäfer](../Images/70108782dda329ca5bbc4cfb5d650e5e.png)](https://ms101196.medium.com/?source=post_page-----788d2ad57c6b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----788d2ad57c6b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----788d2ad57c6b--------------------------------)
    [Merlin Schäfer](https://ms101196.medium.com/?source=post_page-----788d2ad57c6b--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ms101196.medium.com/?source=post_page-----788d2ad57c6b--------------------------------)[![梅尔林·舍费尔](../Images/70108782dda329ca5bbc4cfb5d650e5e.png)](https://ms101196.medium.com/?source=post_page-----788d2ad57c6b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----788d2ad57c6b--------------------------------)[![数据科学前沿](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----788d2ad57c6b--------------------------------)
    [梅尔林·舍费尔](https://ms101196.medium.com/?source=post_page-----788d2ad57c6b--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----788d2ad57c6b--------------------------------)
    ·8 min read·Jan 6, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[数据科学前沿](https://towardsdatascience.com/?source=post_page-----788d2ad57c6b--------------------------------)
    ·阅读时间8分钟·2023年1月6日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/6fb505f5f62aafc51e7e278fa8654702.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6fb505f5f62aafc51e7e278fa8654702.png)'
- en: Photo by [Stephen Dawson](https://unsplash.com/@dawson2406?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[斯蒂芬·道森](https://unsplash.com/@dawson2406?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Have you ever found yourself writing long SQL queries with many steps or subqueries
    containing aggregate functions to calculate seemingly simple metrics? Have you
    ever wondered if you “couldn’t just calculate along the table differently to make
    things easier”? Then it might be time to have a look at window functions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾经发现自己编写了许多步骤或包含聚合函数的长SQL查询，以计算看似简单的指标？你是否曾经想过“是否可以通过不同的方式计算表中的内容，以简化操作”？那么，也许是时候看看窗口函数了。
- en: 'Window functions are a handy and powerful feature in SQL that allows you to
    perform calculations across a number of rows similar to aggregate functions. But
    other than aggregate functions, which you might use with a GROUP BY, they don’t
    return a single value for a group of rows, but a value for each row in the set.
    Let’s look at an example:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口函数是SQL中一个方便且强大的特性，它允许你对多行进行类似于聚合函数的计算。但不同于可能会与GROUP BY一起使用的聚合函数，它们不会返回一组行的单一值，而是返回集合中每一行的值。我们来看看一个例子：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/d9ea7c43f0f7d2cd4a66ac506fe0d215.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d9ea7c43f0f7d2cd4a66ac506fe0d215.png)'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/c630683f642ebee9e71a1a2d75085451.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c630683f642ebee9e71a1a2d75085451.png)'
- en: Why and when should you use window functions?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你为什么以及何时应该使用窗口函数？
- en: One advantage of window functions is that they allow you to work with aggregate
    and non-aggregate values combined because the rows are not collapsed together.
    This opens up a way to calculate many things in one step that would otherwise
    require multiple.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口函数的一个优势是，它们允许你结合使用聚合值和非聚合值，因为行不会被合并在一起。这为在一步中计算许多内容提供了一种方法，否则需要多个步骤。
- en: Window functions are also relatively simple to use and read compared to multiple
    subqueries and self-joins. They reduce the complexity and number of steps in your
    queries, which makes it easier to maintain down the road.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 与多个子查询和自连接相比，窗口函数相对简单易用且易于阅读。它们减少了查询的复杂性和步骤数，从而使得后续维护变得更加容易。
- en: In this way, they can also help with performance issues. For example, you can
    use a window function instead of having to do a self-join or subqueries.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，它们也可以帮助解决性能问题。例如，你可以使用窗口函数，而不是进行自连接或子查询。
- en: Important window functions
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重要的窗口函数
- en: You can use functions like SUM() and COUNT() as window functions but there are
    some special functions that are only available as window functions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将SUM()和COUNT()等函数用作窗口函数，但还有一些特殊函数仅作为窗口函数可用。
- en: 'Here are some of the most important window functions in PostgreSQL:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些PostgreSQL中最重要的窗口函数：
- en: 'RANK(): returns the rank of each row within a set of rows. The rank is determined
    by the order of the rows in the set. Rank 1 would be the first row. Tied rows
    receive the same rank, which can lead to gaps.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'RANK(): 返回每行在数据集中的排名。排名是根据行在数据集中的顺序决定的。排名为 1 的是第一行。排名相同的行会获得相同的排名，这可能导致排名中出现间隙。'
- en: 'DENSE_RANK(): similar to RANK(), but it does not skip any ranks if there are
    ties in the values of the rows. For example, if two rows have the same value and
    are ordered as the first and second rows, their ranks will be 1 and 1 and the
    next will receive 2, not 1 and 1 and 3 as it would be the case with RANK().'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'DENSE_RANK(): 类似于 RANK()，但如果行值相同，它不会跳过任何排名。例如，如果两行具有相同的值且被排序为第一行和第二行，它们的排名将是
    1 和 1，接下来的是 2，而不是 1 和 1 和 3，正如 RANK() 的情况。'
- en: 'ROW_NUMBER(): returns a unique, number for each row in the set. The first row
    is assigned a row number of 1, the second row is assigned a row number of 2, and
    so on.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'ROW_NUMBER(): 返回数据集中每行的唯一编号。第一行的行号为 1，第二行的行号为 2，依此类推。'
- en: 'NTILE(): divides the rows into a specified number of groups, or “tiles” and
    assigns a tile number to each row. For example, if you specify NTILE(3) and have
    9 rows in the set, the first 3 rows will be assigned a tile number of 1, the next
    3 rows will be assigned a tile number of 2, and the final 3 rows will be assigned
    a tile number of 3\. This function can be used to calculate quantiles.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'NTILE(): 将行分成指定数量的组或“块”，并为每行分配一个块编号。例如，如果你指定 NTILE(3) 并且数据集中有 9 行，前 3 行将被分配块编号
    1，接下来的 3 行将被分配块编号 2，最后 3 行将被分配块编号 3。这个函数可以用来计算分位数。'
- en: '5\. LAG() and LEAD(): These functions are used to access values from previous
    or subsequent rows in the set. For example, if you have a set of values and you
    want to compare the value in each row to the value in the previous row, you could
    use the LAG() function to access the previous value.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '5\. LAG() 和 LEAD(): 这些函数用于访问数据集中前一个或后一个行的值。例如，如果你有一组值，并且想将每一行的值与前一行的值进行比较，可以使用
    LAG() 函数来访问前一个值。'
- en: '**Let’s look at some examples!**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**让我们看一些示例！**'
- en: '**RANK(), DENSE_RANK, and ROW_NUMBER():** To use these functions, you would
    specify the name of the column that you want to rank, and the ORDER BY clause
    that determines the order of the rows in the set.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**RANK()、DENSE_RANK 和 ROW_NUMBER()**: 使用这些函数时，你需要指定要排名的列名，以及决定数据集行顺序的 ORDER
    BY 子句。'
- en: 'For example, to rank the rows in a table by the number of values in the “sales”
    column, you could use the following query:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要按“销售”列中的值数量对表中的行进行排名，你可以使用以下查询：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/0462adf3da8d9dafe19bd8eeec7d0a8b.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0462adf3da8d9dafe19bd8eeec7d0a8b.png)'
- en: In this example, the respective ranking function assigns a rank of 1 to the
    row with the highest number of values in the “sales” column, a rank of 2 (or one
    if ties are allowed) to the row with the second-highest, and so on.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，相应的排名函数将最高值的行分配排名 1，第二高值的行分配排名 2（或如果允许并列，则为 1），依此类推。
- en: '**NTILE**(): To use the NTILE() function, you need to specify the number of
    tiles that you want to create, as well as the ORDER BY clause that determines
    the order of the rows in the set. For example, to divide the rows in a table into
    4 tiles (quartiles), you could use the following query:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**NTILE()**: 使用 NTILE() 函数时，你需要指定要创建的块数以及决定数据集行顺序的 ORDER BY 子句。例如，要将表中的行分成
    4 个块（四分位数），你可以使用以下查询：'
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/aea65a7078033b6cba6343a44d84dc0b.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aea65a7078033b6cba6343a44d84dc0b.png)'
- en: As you can see we can now easily determine the top/bottom quartiles’ sales.
    I found this function to be very useful to find the values above or below a certain
    percentage/quantile.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们现在可以轻松确定前/后四分位数的销售额。我发现这个函数对于找出高于或低于某个百分比/分位数的值非常有用。
- en: '**LAG**() and **LEAD**(): To use the LAG() or LEAD() functions, you would specify
    the name of the column that you want to access, the number of rows to move, and
    the default value to use if the specified row does not exist. For example, to
    access the value in the previous row in the “sales” column, you could use the
    following query:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**LAG()** 和 **LEAD()**: 使用 LAG() 或 LEAD() 函数时，你需要指定要访问的列名、移动的行数以及如果指定的行不存在时使用的默认值。例如，要访问“销售”列中前一行的值，你可以使用以下查询：'
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/94bb9940f20f825fc5f9e3dad3aea62b.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/94bb9940f20f825fc5f9e3dad3aea62b.png)'
- en: Here, the LAG() function will access the value in the previous row in the “sales”
    column, and return 0 if there is no previous row (for example, if the current
    row is the first row in the set).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，LAG()函数将访问“sales”列中前一行的值，如果没有前一行，则返回0（例如，如果当前行是集合中的第一行）。
- en: OVER, PARTITION BY, and ORDER BY
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OVER、PARTITION BY和ORDER BY
- en: The OVER clause is an optional part of the syntax for many window functions
    in PostgreSQL. It specifies the criteria that determine the set of rows that the
    function will operate on. For example, if you want to use a window function to
    calculate the average “sales” value for each year, you could use the OVER clause
    to define the set of rows as all rows with the same “year” value. The OVER clause
    typically includes the PARTITION BY and ORDER BY clauses, which are used to divide
    the rows into groups (or partitions) and determine the order of the rows within
    each partition.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: OVER子句是PostgreSQL中许多窗口函数的可选语法部分。它指定决定函数操作的行集的标准。例如，如果你想使用窗口函数计算每年的平均“sales”值，你可以使用OVER子句将行集定义为所有具有相同“year”值的行。OVER子句通常包括PARTITION
    BY和ORDER BY子句，这些子句用于将行分成组（或分区）并确定每个分区内的行顺序。
- en: The OVER clause is a powerful feature of window functions in PostgreSQL, as
    it allows you to control the criteria that determine the set of rows that the
    function will operate on. This allows you to perform calculations on groups of
    rows, or even on individual rows, depending on your needs.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: OVER子句是PostgreSQL中窗口函数的一个强大特性，它允许你控制决定窗口函数操作的行集的标准。这使得你可以根据需要对行组或单行进行计算。
- en: 'If you need even more control over the included rows you can use **row selection
    in your OVER clause**. A row selection clause determines the rows that will be
    included in the set that the window function operates on. The row selection clause
    can be used to specify the **number of rows** to include, or the **range of rows**
    to include, based on the position of the current row in the set. This can be useful
    if you only want to include a certain number of rows from the beginning or end
    of the set, or if you want to exclude certain rows from the calculation. Here
    are some examples that you might encounter frequently:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要对包含的行进行更精细的控制，可以使用**OVER子句中的行选择**。行选择子句决定了窗口函数操作的集合中将包含哪些行。行选择子句可以用来指定**包含的行数**或**行的范围**，根据当前行在集合中的位置来确定。如果你只想从集合的开始或结束部分包含某些行，或想排除计算中的某些行，这会很有用。以下是一些你可能经常遇到的例子：
- en: 'ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING: This clause specifies
    that all rows in the set should be included in the calculation. This is the default
    behavior if no row selection clause is specified, so you won’t see it a lot but
    it’s the most used row selection.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING：这个子句指定集合中的所有行都应包含在计算中。这是默认行为，如果没有指定行选择子句，你不会经常看到它，但这是最常用的行选择。
- en: 'ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING: This clause specifies that
    all rows from the current row to the end of the set should be included in the
    calculation.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING：这个子句指定从当前行到集合的末尾的所有行都应包含在计算中。
- en: 'ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW: This clause specifies that
    all rows from the beginning of the set to the current row should be included in
    the calculation. I found this to be very useful in cumulative calculations.'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW：这个子句指定从集合开始到当前行的所有行都应包含在计算中。我发现这在累积计算中非常有用。
- en: 'ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING: This clause specifies that the current
    row and the two rows immediately preceding and following it should be included
    in the calculation. You can change the numerical values to adjust the size and
    shape of your calculation window.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING：这个子句指定当前行及其前后各一行应包含在计算中。你可以更改数值来调整计算窗口的大小和形状。
- en: Here are a few more things, which are good to know
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这里还有一些值得了解的内容：
- en: Window functions can be used in the SELECT, WHERE, and HAVING clauses of a query.
    This allows you to use the results of the window function in various parts of
    the query, and even to use them to filter the rows that are returned by the query.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 窗口函数可以在查询的SELECT、WHERE和HAVING子句中使用。这允许你在查询的各个部分使用窗口函数的结果，甚至用它们来过滤查询返回的行。
- en: Window functions can be combined with aggregate functions. For example, you
    can use a window function to calculate the rank of each row, and then use an aggregate
    function like SUM() to calculate the total sum of the ranks. This can be very
    useful in the calculations of fractions and percentages.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 窗口函数可以与聚合函数结合使用。例如，你可以使用窗口函数来计算每一行的排名，然后使用SUM()等聚合函数来计算排名的总和。这在计算分数和百分比时非常有用。
- en: Window functions can be used with the GROUP BY clause. When used in combination
    with the GROUP BY clause, window functions will calculate the value for each group
    of rows, rather than for the entire set of rows.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 窗口函数可以与GROUP BY子句一起使用。当与GROUP BY子句结合使用时，窗口函数将计算每一组行的值，而不是整个行集的值。
- en: Window functions can be used with subqueries and CTEs. This allows you to perform
    calculations on the results of a subquery/CTE, rather than on the original data
    set.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 窗口函数可以与子查询和CTE（公共表表达式）一起使用。这允许你对子查询/CTE的结果进行计算，而不是对原始数据集进行计算。
- en: There is a WINDOW keyword is used to define the window frames for window functions
    in PostgreSQL. A window frame is the set of rows that a window function operates
    on, and is determined by the OVER clause and any row selection clauses that are
    included in the function’s syntax. By using the WINDOW keyword, you can specify
    the window frames for multiple window functions in a single query, rather than
    repeating the OVER and row selection clauses for each function. This can make
    your queries more readable and easier to maintain.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PostgreSQL中，有一个WINDOW关键字用于定义窗口函数的窗口帧。窗口帧是窗口函数操作的行集，由OVER子句和函数语法中包含的任何行选择子句决定。通过使用WINDOW关键字，你可以在单个查询中为多个窗口函数指定窗口帧，而不是为每个函数重复OVER和行选择子句。这可以使你的查询更具可读性，更易于维护。
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In conclusion, window functions are a powerful and versatile tool in PostgreSQL
    that allows you to perform complex calculations on sets of rows. Whether you need
    to calculate ranks, divide rows into groups, or access values from other rows,
    window functions have you covered.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，窗口函数是PostgreSQL中一种强大且多功能的工具，它允许你对行集合进行复杂的计算。无论你是需要计算排名、将行分组，还是访问其他行的值，窗口函数都能满足你的需求。
- en: I hope you learned something and can improve your calculations and analysis
    with window functions!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你学到了东西，并能利用窗口函数改进你的计算和分析！
- en: -Merlin
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: -梅林
- en: '[](https://ms101196.medium.com/membership?source=post_page-----788d2ad57c6b--------------------------------)
    [## Join Medium with my referral link - Merlin Schäfer'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ms101196.medium.com/membership?source=post_page-----788d2ad57c6b--------------------------------)
    [## 通过我的推荐链接加入Medium - 梅林·谢费尔'
- en: Read every story from Merlin Schäfer (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读梅林·谢费尔（Merlin Schäfer）和其他成千上万名作家的每个故事。你的会员费用直接支持……
- en: ms101196.medium.com](https://ms101196.medium.com/membership?source=post_page-----788d2ad57c6b--------------------------------)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: ms101196.medium.com](https://ms101196.medium.com/membership?source=post_page-----788d2ad57c6b--------------------------------)
