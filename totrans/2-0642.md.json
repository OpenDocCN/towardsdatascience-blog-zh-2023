["```py\njulia> y = [5, 10] .== [5, 10]\n2-element BitVector:\n 1\n 1\n\njulia> BitArray\nBitArray\n\njulia> BitVector\nBitVector (alias for BitArray{1})\n```", "```py\nfunction myfunc()\n\nend\n```", "```py\ntypeof(myfunc)\n\ntypeof(myfunc) (singleton type of function myfunc, subtype of Function)\n```", "```py\nmethods(myfunc)\n\n# 1 method for generic function myfunc from [35mMain[39m:myfunc() in Main at In[4]:1\n```", "```py\nf = x -> x += 5\n\nf2(x) = x += 5\n```", "```py\nx::Int64 -> 5 +  x\n```", "```py\nx = [5, 10, 15, 20]\n```", "```py\nxmask = x .< 14\n```", "```py\nx[xmask]\n2-element Vector{Int64}:\n  5\n 10\n```", "```py\nfilter(x::Int64 -> x < 14, x)\n\n2-element Vector{Int64}:\n  5\n 10\n```", "```py\nmydict = Dict(:A => [5, 10], :B => [4, 10])\n\nfilter(k::Pair{Symbol, Vector{Int64}} -> k[2][1] != 5, mydict)\n\nDict{Symbol, Vector{Int64}} with 1 entry:\n  :B => [4, 10]\n```", "```py\nx = [5, 10, nothing, nothing, 40]\n\nfilter!(x) do number\n    ~(isnothing(number))\nend\n\n3-element Vector{Union{Nothing, Int64}}:\n  5\n 10\n 40\n```", "```py\nusing DataFrames\n\ndf = DataFrame(:X => [1, 2, 3, 4], :Y => [1, 2, 3, 4])\n```", "```py\nfilter!(df) do row\n    if row[:X] > 3\n        return(false)\n    end\n    true\nend\n```"]