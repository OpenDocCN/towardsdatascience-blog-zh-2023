["```py\nimport matplotlib.pyplot as plt\nfrom scipy.stats import beta\n\nx = np.linspace(0, 1, 100)\nplt.plot(x, beta.pdf(x, 4, 10))\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats\n\nTHETA_TRUE = 0.3  # True probability for landing heads\n# Parameters defining the beta prior distribution\nALPHA_PRIOR = 4\nBETA_PRIOR = 10\nNUM_SAMPLES = 100000  # Number of MCMC steps\n\n# Fake a dataset which equals the one assumed in the previous sections\nD = np.asarray([1] * 36 + [0] * 64)\n\n# Define prior distribution\nprior = scipy.stats.beta(ALPHA_PRIOR, BETA_PRIOR)\n\ndef likelihood_ratio(theta_1, theta_2):\n    return (theta_1 / theta_2) ** np.sum(D == 1) * (\n        (1 - theta_1) / (1 - theta_2)\n    ) ** np.sum(D == 0)\n\ndef norm_ratio(theta_1, theta_2):\n    return prior.pdf(theta_1) / prior.pdf(theta_2)\n\n# Step 1\nx = np.random.uniform(0, 1)\n\n# Proposal distribution\nq = scipy.stats.norm(0, 0.1)\n\nsamples = []\n\nfor i in range(NUM_SAMPLES):\n    # Step 2\n    y = x + q.rvs()\n    # Step 3\n    ratio = likelihood_ratio(y, x) * norm_ratio(y, x)\n    p = min(ratio * q.pdf(x - y) / q.pdf(y - x), 1)\n    # Step 4\n    u = np.random.uniform(0, 1)\n    # Step 5\n    x = y if u <= p and 0 <= y <= 1 else x\n    samples.append(x)\n\n# Plot the sampled posterior distribution\nplt.hist(samples, density=True, bins=100)\n# Plot the posterior distribution obtained by the analytical solution\nx_values = np.linspace(0, 1, 100)\nplt.plot(x_values, scipy.stats.beta.pdf(x_values, 36 + ALPHA_PRIOR, 100 - 36 + BETA_PRIOR))\n\nplt.show()\n```"]