- en: 6 Bad Habits Killing Your Productivity in Data Science
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/6-bad-habits-killing-your-productivity-in-data-science-ce9c17c7b833](https://towardsdatascience.com/6-bad-habits-killing-your-productivity-in-data-science-ce9c17c7b833)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And what to do for achieving success
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://donatoriccio.medium.com/?source=post_page-----ce9c17c7b833--------------------------------)[![Donato
    Riccio](../Images/0af2a026e72a023db4635522cbca50eb.png)](https://donatoriccio.medium.com/?source=post_page-----ce9c17c7b833--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ce9c17c7b833--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ce9c17c7b833--------------------------------)
    [Donato Riccio](https://donatoriccio.medium.com/?source=post_page-----ce9c17c7b833--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ce9c17c7b833--------------------------------)
    ·8 min read·Oct 3, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d046eb0051c8bcc86dfea9d2c7c0c412.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author. (AI generated)
  prefs: []
  type: TYPE_NORMAL
- en: Learning data science is like learning how to play a musical instrument — you
    must develop good habits and get the foundations straight to succeed.
  prefs: []
  type: TYPE_NORMAL
- en: Just like a musician requires scales, arpeggios, and rhythm exercises before
    being able to play concertos, a data scientist needs to ingrain key practices
    to develop their potential.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding detrimental habits and cultivating productive ones allows you to shift
    your mental focus from the mechanics to the artistry of your work.
  prefs: []
  type: TYPE_NORMAL
- en: Developing data science habits like using virtual environments and tracking
    experiments transforms your workflow from a struggle to a smooth-flowing creative
    process.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we’ll explore six everyday bad habits that can secretly destroy
    your effectiveness as a data scientist and provide tips to help boost your productivity.
  prefs: []
  type: TYPE_NORMAL
- en: Using the system interpreter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A virtual environment is a siloed Python installation separate from your system
    environment. It lets you install packages and libraries for a specific project
    without affecting your system Python setup. Neglecting to use virtual environments
    can lead to *dependency hell*.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in one of my first data science projects, I was building a machine
    learning model for image classification. I installed TensorFlow 2.0 globally to
    get started. A few weeks later my colleague gave me some code that required TensorFlow
    1.x. Installing this caused all kinds of conflicts with my first project’s dependencies!
    I spent hours debugging before realizing I should have used virtual environments
    to avoid this mess. I couldn’t get the inherited code working until I set up a
    virtual environment to match my colleague’s original setup.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6c46ac60d70c4ec99d73e8149eb5992d.png)'
  prefs: []
  type: TYPE_IMG
- en: Virtual environments can have different python versions. Image by the author
    (AI generated elements)
  prefs: []
  type: TYPE_NORMAL
- en: A virtual environment neatly sidesteps this issue by giving each project its
    own sandboxed space. Each environment has a dedicate python interpreter, pip and
    libraries.
  prefs: []
  type: TYPE_NORMAL
- en: You can install libraries safely, knowing it won’t affect other workflows. No
    more worrying about breaking your Python installation!
  prefs: []
  type: TYPE_NORMAL
- en: Tools like **Anaconda** and **virtualenv** make creating and managing virtual
    environments a breeze. Set aside 1 minute to activate an environment for each
    new project to avoid hours of frustration down the line. It’s one habit that offers
    enormous time savings.
  prefs: []
  type: TYPE_NORMAL
- en: To create a virtual environment with conda, use the following command.
  prefs: []
  type: TYPE_NORMAL
- en: '`conda create -n env_name python=3.x`'
  prefs: []
  type: TYPE_NORMAL
- en: And then, activate the environment.
  prefs: []
  type: TYPE_NORMAL
- en: '`conda activate env_name`'
  prefs: []
  type: TYPE_NORMAL
- en: These two lines of code will save you hours of time and free you from dependency
    hell.
  prefs: []
  type: TYPE_NORMAL
- en: Over Relying on Notebooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jupyter notebooks are beloved in data science for their intuitive workflow and
    ability to interweave code, visualizations, and text.
  prefs: []
  type: TYPE_NORMAL
- en: Using notebooks for everything has considerable downsides when it comes to collaboration,
    reproducibility, and project structure.
  prefs: []
  type: TYPE_NORMAL
- en: Notebooks are challenging to version control and lack features like testing
    frameworks and linting present in other environments. Simultaneous editing rapidly
    leads to merge conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: It’s also tempting to use notebooks as a scratchpad, leading to disorganized,
    sprawling documents.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fe987ae2845f372feb6222f3fff03c51.png)'
  prefs: []
  type: TYPE_IMG
- en: An organized data science project structure by [Cookiecutter Data Science.](https://drivendata.github.io/cookiecutter-data-science/)
  prefs: []
  type: TYPE_NORMAL
- en: Once past initial exploration and prototyping, shift your workflow to .py scripts
    and .py modules to benefit from software engineering best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Move the notebook code into organized functions and files.
  prefs: []
  type: TYPE_NORMAL
- en: Use notebooks for presenting findings, establishing narratives, and sharing
    reproducible results.
  prefs: []
  type: TYPE_NORMAL
- en: Combining notebooks with scripts gives you the best of both worlds.
  prefs: []
  type: TYPE_NORMAL
- en: Using the mouse too much
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The mouse seems intuitive, but excessive clicking and menu hunting wastes precious
    time. The keyboard offers much more efficient ways to navigate and manipulate
    your workspace.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the keyboard to:'
  prefs: []
  type: TYPE_NORMAL
- en: Jump directly to a specific line number instead of scrolling.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select and edit multiple lines together rather than line-by-line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comment and uncomment blocks of code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace multiple occurrences of a word.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigate directly to functions and variables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instantly format messy code instead of manually fixing indentation and spacing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactor code safely by renaming variables and functions across files in one
    step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/a6f985df7222b9e7e97824c9b1250f4b.png)'
  prefs: []
  type: TYPE_IMG
- en: Our Llama is trying to figure out how to use keyboard shortcuts. Image by the
    author (AI generated)
  prefs: []
  type: TYPE_NORMAL
- en: The keyboard has shortcuts to speed up nearly everything you do daily in the
    code editor.
  prefs: []
  type: TYPE_NORMAL
- en: Forget the mouse and keep your hands on the keyboard to code faster.
  prefs: []
  type: TYPE_NORMAL
- en: Skipping data versioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I was building a text classification model and wanted to try different preprocessing
    methods on the training data. I created several variations, but when I found the
    best performing version, I realized I had forgotten the exact steps I used, and
    I couldn’t reproduce the results.
  prefs: []
  type: TYPE_NORMAL
- en: It was incredibly frustrating.
  prefs: []
  type: TYPE_NORMAL
- en: Code can be easily version-controlled using Git. But, data is often neglected
    when it comes to versioning best practices. It’s a huge missed opportunity in
    terms of experimentation and reproducibility.
  prefs: []
  type: TYPE_NORMAL
- en: Versioning your data allows for tracking of how datasets change over time. You
    are free to experiment, creating many variations to explore how changing the data
    improves your model, knowing you can quickly revert if needed.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to store metadata, such as dataset descriptions, preprocessing
    steps, and intended usage, to prevent data decay. Document what each version of
    your data represents to prevent reproducibility issues.
  prefs: []
  type: TYPE_NORMAL
- en: Version control gives you the confidence to enhance datasets iteratively and
    rapidly explore modeling ideas, knowing you have an escape hatch if things go
    wrong.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: My favorite tool is Data Version Control (DVC) because it’s easy to set up and
    can connect to different cloud storage services, including Google Drive.
  prefs: []
  type: TYPE_NORMAL
- en: Not Tracking Your Experiments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When I started studying data science, I was manually tracking everything.
  prefs: []
  type: TYPE_NORMAL
- en: Every detail, from features to model architecture, was scattered across messy
    spreadsheets with inconsistent file names.
  prefs: []
  type: TYPE_NORMAL
- en: This led to a huge confusion, and I found it very difficult to reproduce the
    results. I was wasting time manually adding parameters when experiment tools can
    easily automate it.
  prefs: []
  type: TYPE_NORMAL
- en: Enter experiment tracking. Machine learning experiments involve many moving
    parts — data samples, feature engineering code, model configurations, performance
    metrics, etc. An experiment is a configuration of parameters that lead to a specific
    result, usually tracked during a training run.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e788219498ec9c845975131e46a2777a.png)'
  prefs: []
  type: TYPE_IMG
- en: Experiments in MLFlow. [Source.](https://mlflow.org/docs/latest/tutorials-and-examples/tutorial.html#comparing-the-models)
  prefs: []
  type: TYPE_NORMAL
- en: MLFlow, Comet, and W&B provide handy ways to log all the pieces of your ML workflow
    — code versions, datasets, parameters, and metrics. These systems capture the
    end-to-end flow in an organized, searchable structure.
  prefs: []
  type: TYPE_NORMAL
- en: Review your experiments tracking reports to identify successes worth pursuing
    and valuable lessons from failures.
  prefs: []
  type: TYPE_NORMAL
- en: Build on what worked rather than reinventing the wheel each time.
  prefs: []
  type: TYPE_NORMAL
- en: Not Using a Code Assistant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Become an early adopter of AI coding to maximize your productivity as a data
    scientist. The ability to quickly translate ideas into code gives you an edge
    in bringing data science projects to fruition faster.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Copilot is an AI tool that suggests whole lines and functions inside
    your editor while you code. It helps you write code faster by suggesting contextually
    relevant code snippets in real time. Copilot improves your productivity by reducing
    time spent on boilerplate code and debugging.
  prefs: []
  type: TYPE_NORMAL
- en: A [recent study](https://arxiv.org/pdf/2302.06590.pdf) by Microsoft, GitHub,
    and MIT researchers investigated the impacts of AI tools on programming efficiency.
    They designed an experiment utilizing Copilot to test completion times on a coding
    task between assisted and unassisted developers.
  prefs: []
  type: TYPE_NORMAL
- en: Sampling participants from freelancing platforms, they divided 95 volunteers
    into treated and control groups. The treated group received a Copilot demo while
    both coded an HTTP server. Performance was measured by success in passing tests
    and completion time. Shockingly, the Copilot group finished over 55% faster on
    average than the controls at just 71 minutes compared to 161 minutes!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/156fc5cad732498ea1775287ebd2641a.png)'
  prefs: []
  type: TYPE_IMG
- en: Time to task completion. Copilot group (treated) vs control. [Source](https://arxiv.org/pdf/2302.06590.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: However, my advice about integrating AI tools in your workflow shouldn’t lead
    to mindless copy-pasting of AI-generated code. You don’t want to use them without
    first understanding what your code is doing and why.
  prefs: []
  type: TYPE_NORMAL
- en: Also, questions remain around potential code quality impacts from reliance on
    AI. Carefully evaluate these tools to ensure they appropriately support — not
    replace — human problem-solving and creativity.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Data Science project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s walk through setting up a structured project for a binary classification
    project on the Titanic dataset, using MLFlow and DVC.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a project and Git repo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create a Conda environment and install some libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Organize the project structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In `src/models/train_model.py`, use MLflow to log parameters and metrics. This
    is a very minimal example that should give you the idea. It tracks a Random Forest
    model with `n_estimators` and the cross-validation accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In `src/features/build_features.py`, use DVC to version data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now your data versions are tracked alongside model parameters and metrics. Remember
    to commit to git and DVC every time you change something.
  prefs: []
  type: TYPE_NORMAL
- en: Modular code, MLflow, and DVC provide end-to-end experimentation and reproducibility.
    Versioning data and models allows you to improve workflow iteratively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once organized, you should have something that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Source code and outputs are separated to facilitate tracking and versioning.
  prefs: []
  type: TYPE_NORMAL
- en: This is just a concept and you should customize it according to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: The Next Level of Productivity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data science productivity relies not just on technical knowledge but also on
    developing the proper habits. Avoid common pitfalls like neglecting virtual environments,
    overusing notebooks, and not tracking experiments. Instead, cultivate practices
    like leveraging keyboard shortcuts, versioning data, tracking experiments systematically,
    and offloading repetitive work to AI.
  prefs: []
  type: TYPE_NORMAL
- en: '***Enjoyed this article? Get weekly data science interview questions delivered
    to your inbox by subscribing to my newsletter,*** [***The Data Interview***](https://thedatainterview.substack.com/)***.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Also, you can find me on*** [***LinkedIn***](https://www.linkedin.com/in/driccio/)***.***'
  prefs: []
  type: TYPE_NORMAL
