["```py\nimport mlflow\nimport mlflow.sklearn\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.metrics import mean_squared_error\nimport numpy as np\n```", "```py\n# Initiate a new MLflow run\nwith mlflow.start_run():\n    # Train and fit the model\n    model = ElasticNet(alpha=0.5, l1_ratio=0.5)\n    model.fit(X_train, y_train)\n\n    # Make predictions and calculate the RMSE\n    predictions = model.predict(X_test)\n    rmse = np.sqrt(mean_squared_error(y_test, predictions))\n\n    # Log parameters\n    mlflow.log_param(\"alpha\", 0.5)\n    mlflow.log_param(\"l1_ratio\", 0.5)\n\n    # Log metric\n    mlflow.log_metric(\"rmse\", rmse)\n\n    # Log model (artifact)\n    mlflow.sklearn.log_model(model, \"model\")\n```", "```py\nmlflow.sklearn.log_model(lr_model, \"model\")\n```", "```py\nresult = mlflow.register_model(\n    \"runs:/d16076a3ec534311817565e6527539c0/model\",\n    \"ElasticNetWineModel\"\n)\n```", "```py\nmlflow.search_runs()\n```", "```py\nmodel_uri = \"models:/ElasticNetWineModel/1\"\nmodel = mlflow.pyfunc.load_model(model_uri)\n```", "```py\nclient = mlflow.tracking.MlflowClient()\nclient.transition_model_version_stage(\n    name=\"ElasticNetWineModel\",\n    version=1,\n    stage=\"Production\",\n)\n```", "```py\nimport mlflow.pyfunc\nclass ModelWrapper(mlflow.pyfunc.PythonModel):\n    def load_context(self, context):\n        # Initialization logic\n        pass\n    def predict(self, context, model_input):\n        # Prediction logic\n        pass\n# Saving the model\nmlflow.pyfunc.save_model(path=\"model_path\", python_model=ModelWrapper())\n```", "```py\nmlflow models serve -m models:/ElasticNetWineModel/1 -p 1234\n```", "```py\nname: My_Project\nconda_env: conda.yaml\nentry_points:\n  main:\n    parameters:\n      alpha: float # no default value\n      l1_ratio: {type: float, default: 0.5} # default value\n    command: \"python main.py {alpha} {l1_ratio}\" # run script with params\n```", "```py\nmlflow run . -P alpha=0.42\n```"]