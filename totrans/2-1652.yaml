- en: 'Pipelines in Scikit-Learn: An Amazing Way to Bundle Transformations'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/pipelines-in-scikit-learn-an-amazing-way-to-bundle-transformations-9ef0594000ac](https://towardsdatascience.com/pipelines-in-scikit-learn-an-amazing-way-to-bundle-transformations-9ef0594000ac)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How pipelines can help you write better code for machine learning and data science
    üòç
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@ebbeberge?source=post_page-----9ef0594000ac--------------------------------)[![Eirik
    Berge, PhD](../Images/7507374e75980fd0c1056af3cd299eaa.png)](https://medium.com/@ebbeberge?source=post_page-----9ef0594000ac--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9ef0594000ac--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9ef0594000ac--------------------------------)
    [Eirik Berge, PhD](https://medium.com/@ebbeberge?source=post_page-----9ef0594000ac--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9ef0594000ac--------------------------------)
    ¬∑5 min read¬∑Apr 5, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/af74d4aa798e6d0abd86bb7284cd5dc3.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Rodion Kutsaiev](https://unsplash.com/fr/@frostroomhead?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Your Journey
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Introduction](#a6cb)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Problems Without Pipelines?](#8f4f)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Pipelines to the Rescue!](#d657)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Useful Attributes and Utility Functions](#15c2)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Wrapping Up](#c801)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 1 ‚Äî Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most popular Python libraries for dealing with machine learning tasks
    is [scikit-learn](https://scikit-learn.org/stable/index.html). It went public
    in 2010 and has since been essential for implementing popular supervised ML algorithms
    like [logistic regression](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html#sklearn.linear_model.LogisticRegression),
    [random forests](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html#sklearn.ensemble.RandomForestClassifier),
    and [support vector machines](https://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVR.html#sklearn.svm.LinearSVR).
  prefs: []
  type: TYPE_NORMAL
- en: When writing code in scikit-learn, you can use a feature called **pipelines**.
    This feature allows you to bundle up several of the steps in the machine learning
    process into a single component. The use of pipelines is one of the *single most
    determining factors* for whether scikit-learn code is easy to work with. It‚Äôs
    frustrating how many neglect pipelines when creating machine learning models in
    scikit-learn üòû
  prefs: []
  type: TYPE_NORMAL
- en: In this blog post, you will learn the advantages of scikit-learn pipelines.
    After reading this, you should feel confident in applying pipelines to your own
    machine learning projects. Let‚Äôs jump in üëç
  prefs: []
  type: TYPE_NORMAL
- en: 2 ‚Äî Problems Without Pipelines?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The goal of pipelines is to encapsulate several steps in a machine learning
    project into a **single manageable piece**. To illustrate this, let us start with
    the following setup code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As the imports in the code block above suggest, we are going to scale the data
    and then use a **random forest model** for classification. Without pipelines,
    this would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'There are both serious and minor problems with the code above! Let‚Äôs mention
    some of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Leakage:** If you look carefully at the code above, then you can see
    that it actually leaks information about the training data to the testing data.
    Specifically, when `scaler` transforms `X_test`, then it uses the minimum and
    maximum values of `X_train` to do this. Hence information about the training set
    is revealed in the testing set. This can make the accuracy of the random forest
    on the testing set a bit optimistic!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Intermediate Variable Names:** We created the intermediate variable names
    `X_train_scaled` and `X_test_scaled`. This is only necessary because we have the
    scaling and the training as completely separate processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Less Explicit Function Calls:** In the code above, several of the lines are
    intermediate `.fit()` and `.transform()` function calls. This clutters the code
    and makes it less readable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hyperparameter Search:** We want to do a hyperparameter search for both the
    `feature_range` parameter in the `MinMaxScaler` and the `n_estimators` parameter
    in the `RandomForestClassifier`. We would need to do these searches completely
    separately! Not only is it more cumbersome, but we then greedily optimize each
    of them separately, rather than looking for a combined optimum. This can make
    us miss the best solution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3 ‚Äî Pipelines to the Rescue!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/bef3e9da02e6c480b931e6a8f1b2ceb6.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Erlend Ekseth](https://unsplash.com/@er1end?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'It should not come as a surprise that pipelines are what will save the day.
    Compare the above code with the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The code with the pipeline is shorter, sweeter, and avoids all the problems
    listed above:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Leakage:** Pipelines automatically ensure that there is no data leakage
    happening!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Intermediate Variable Names:** You don‚Äôt need any intermediate variable names
    like `X_train_scaled` and `X_test_scaled` anymore!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Less Explicit Function Calls:** With the pipeline, you only need a single
    `.fit()` function call to execute the whole sequence. This makes the code easier
    to read!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hyperparameter Search:** Once you have used a pipeline, you can do a hyperparameter
    search on all of the components at once. The method `.get_params()` is useful
    for getting the parameter names for all the transformers/estimators in the pipeline.
    This is nicely explained in the blog post [Integrate Pipeline into Scikit-Learn‚Äôs
    Hyperparameter Search](/integrate-pipeline-into-scikit-learns-hyperparameter-search-e123c743b6a0)!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4 ‚Äî Useful Attributes and Utility Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After fitting a pipeline in scikit-learn, there are certain attributes that
    will make your life a lot easier. I have been guilty of neglecting these and have
    paid the priceüòÖ
  prefs: []
  type: TYPE_NORMAL
- en: 'The first is the attribute `named_steps`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Whenever you have a composite object (like pipelines in scikit-learn), it is
    useful to know how to access the individual components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another useful attribute is `.n_features_in_`. This will show you how many
    features were passed into the first implicit `.fit()`method in the pipeline (in
    our case, the `.fit()` method for the `MinMaxScaler`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you can also use the utility function `make_pipeline()`to create pipelines
    in scikit-learn. The difference is that `make_pipeline` automatically gives names
    to the different transformers/estimators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: I personally prefer to use the utility function `make_pipeline` as then I don‚Äôt
    need to come up with names myself. If many developers are working on different
    pipelines, then `make_pipeline` **ensures consistency**.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn more about nested parameters and caching when it comes
    to pipelines, then check out the [pipeline user guide](https://scikit-learn.org/stable/modules/compose.html)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 5‚Äî Wrapping Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/4a06c775ef80f575c5d7cdfe36d7a151.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Spencer Bergen](https://unsplash.com/@spencerbergen?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, you now understand how and why you should use pipelines when writing
    machine learning code in Scikit-Learn. If you are interested in data science,
    programming, or anything in between, then feel free to add me on [LinkedIn](https://www.linkedin.com/in/eirik-berge/)
    and say hi ‚úã
  prefs: []
  type: TYPE_NORMAL
- en: '**Like my writing?** Check out some of my other posts for more Python content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Modernize Your Sinful Python Code with Beautiful Type Hints](/modernize-your-sinful-python-code-with-beautiful-type-hints-4e72e98f6bf1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Visualizing Missing Values in Python is Shockingly Easy](/visualizing-missing-values-in-python-is-shockingly-easy-56ed5bc2e7ea)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introducing Anomaly/Outlier Detection in Python with PyOD üî•](/introducing-anomaly-outlier-detection-in-python-with-pyod-40afcccee9ff)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Awesome NumPy Functions That Can Save You in a Pinch](/5-awesome-numpy-functions-that-can-save-you-in-a-pinch-ba349af5ac47)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Expert Tips to Skyrocket Your Dictionary Skills in Python üöÄ](/5-expert-tips-to-skyrocket-your-dictionary-skills-in-python-1cf54b7d920d)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
