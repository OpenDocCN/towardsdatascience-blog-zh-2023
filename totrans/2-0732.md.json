["```py\n!pip install langchain >> null\n!pip install openai >> null\n```", "```py\nfrom langchain.llms import OpenAI\n```", "```py\n#past you api key here\n\nimport os\nos.environ['OPENAI_API_KEY'] = \"yuor-openai-key\"\n```", "```py\nllm = OpenAI(model_name=\"text-ada-001\", n=2, best_of=2)\n```", "```py\nllm(\"tell me a story please.\")\n```", "```py\nllm_result = llm.generate([\"Tell me a short story\", \"whath is your favourite colour?\", \"Is the earth flat?\"])\n```", "```py\nllm_result.llm_output\n```", "```py\n!pip install tiktoken >> None\nimport tiktoken\n```", "```py\nllm.get_num_tokens(\"How many old are you?\")\n\n#OUTPUT : 6\n```", "```py\nfrom langchain import PromptTemplate\n\ntemplate = \"\"\"\nI want you to act as businessman.\n\nYou have few passions in your life which are:\n\n- Money\n- Data\n- Basketball\n\nI want to write a Medium Blog post about {product}.\nWhat is a good for a title of such post?\n\"\"\"\n\nprompt = PromptTemplate(\n    input_variables=[\"product\"],\n    template=template,\n)\n```", "```py\nprompt.format(product = \"how to make a bunch of money\")\n```", "```py\nfrom langchain.prompts import load_prompt\n\nprompt = load_prompt(\"lc://prompts/conversation/prompt.json\")\nprompt\n```", "```py\nllm(prompt.format(history=\"\", input=\"What is 3 - 3?\"))\n```", "```py\nfrom langchain import PromptTemplate, FewShotPromptTemplate\n\n# First, create the list of few shot examples.\nexamples = [\n    {\"word\": \"cool\", \"superlative\": \"coolest\"},\n    {\"word\": \"tall\", \"superlative\": \"tallest\"},\n]\n```", "```py\n# Next, we specify the template to format the examples we have provided.\n# We use the `PromptTemplate` class for this.\nexample_formatter_template = \"\"\"\nWord: {word}\nSuperlative: {superlative}\\n\n\"\"\"\nexample_prompt = PromptTemplate(\n    input_variables=[\"word\", \"superlative\"],\n    template=example_formatter_template,\n)\n```", "```py\n# Finally, we create the `FewShotPromptTemplate` object.\nfew_shot_prompt = FewShotPromptTemplate(\n    examples=examples,\n    example_prompt=example_prompt,\n\n    prefix=\"Give the superlative of every input\",\n\n    suffix=\"Word: {input}\\nSuperlative:\",\n\n    input_variables=[\"input\"],\n    example_separator=\"\\n\\n\",\n)\n```", "```py\nprint(few_shot_prompt.format(input=\"big\"))\n```", "```py\nllm(few_shot_prompt.format(input=\"large\"))\n```", "```py\nfrom abc import ABC, abstractmethod\nfrom typing import List\nfrom langchain.schema import Document\n\nclass BaseRetriever(ABC):\n    @abstractmethod\n    def get_relevant_documents(self, query: str) -> List[Document]:\n        \"\"\"Get texts relevant for a query.\n\n        Args:\n            query: string to find relevant texts for\n\n        Returns:\n            List of relevant documents\n        \"\"\"\n```", "```py\n!pip install chromadb >> null\n```", "```py\nfrom langchain.chains import RetrievalQA\nfrom langchain.llms import OpenAI\n```", "```py\n#download data\nimport requests\n\nurl = \"https://raw.githubusercontent.com/hwchase17/langchain/master/docs/modules/state_of_the_union.txt\"\nresponse = requests.get(url)\ndata = response.text\nwith open(\"state_of_the_union.txt\", \"w\") as text_file:\n    text_file.write(data)\n```", "```py\nfrom langchain.document_loaders import TextLoader\nloader = TextLoader('state_of_the_union.txt', encoding='utf8')\n```", "```py\nindex = VectorstoreIndexCreator().from_loaders([loader])\n```", "```py\nquery = \"What did Ohio Senator Sherrod Brown say?\"\nindex.query(query)\n```", "```py\nfrom langchain.prompts import PromptTemplate\nfrom langchain.llms import OpenAI\n\nllm = OpenAI(temperature=0.9)\nprompt = PromptTemplate(\n    input_variables=[\"product\"],\n    template=\"What is a good name for a website that sells {product}?\",\n)\n```", "```py\nfrom langchain.chains import LLMChain\nchain = LLMChain(llm=llm, prompt=prompt)\n\n#run the chain with the input needed for the prompt\nprint(chain.run(\"paints\"))\n```", "```py\nfrom langchain.memory import ChatMessageHistory\n```", "```py\nhistory = ChatMessageHistory()history.add_user_message(\"hello friend!\")history.add_ai_message(\"how are you?\")\n```", "```py\nhistory.messages\n```", "```py\nfrom langchain.memory import ConversationBufferMemory\n```", "```py\nmemory = ConversationBufferMemory()\nmemory.chat_memory.add_user_message(\"hello friend!\")\nmemory.chat_memory.add_ai_message(\"how are you?\")\n```", "```py\nmemory.load_memory_variables({})\n```", "```py\nfrom langchain.llms import OpenAI\nfrom langchain.chains import ConversationChain\n\nllm = OpenAI(temperature=0)\nconversation = ConversationChain(\n    llm=llm, \n    verbose=True, \n    memory=ConversationBufferMemory()\n)\n```", "```py\nconversation.predict(input=\"Hello friend!\")\n```", "```py\nconversation.predict(input=\"I would like to discuss about the universe\")\n```", "```py\nconversation.predict(input=\"Whats your favourite planet?\")\n```", "```py\nconversation.memory\n```", "```py\nfrom langchain.agents import load_tools\nfrom langchain.agents import initialize_agent\nfrom langchain.agents import AgentType\nfrom langchain.llms import OpenAI\n```", "```py\n!pip install google-search-results >> null\nos.environ['SERPAPI_API_KEY'] = \"your token here\"\n```", "```py\nllm = OpenAI(model_name=\"text-ada-001\")\n```", "```py\ntools = load_tools([\"serpapi\", \"llm-math\"], llm=llm)\n```", "```py\nagent = initialize_agent(tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True)\n```", "```py\nagent.run(\"How old is Joe Biden? What is his current age raised to the 0.56 power?\")\n```"]