- en: 'Voronoi Grids: A Practical Application'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/voronoi-grids-a-practical-application-7e6ee3b1daf0](https://towardsdatascience.com/voronoi-grids-a-practical-application-7e6ee3b1daf0)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Quick Success Data Science
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mapping school zones in Melbourne, Australia
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@lee_vaughan?source=post_page-----7e6ee3b1daf0--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----7e6ee3b1daf0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7e6ee3b1daf0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7e6ee3b1daf0--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----7e6ee3b1daf0--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7e6ee3b1daf0--------------------------------)
    ·10 min read·Nov 28, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/749f1c178903f8991aec8a771abd436e.png)'
  prefs: []
  type: TYPE_IMG
- en: Melbourne as a stained-glass window envisioned by Leonardo.ai DreamShaper v7
  prefs: []
  type: TYPE_NORMAL
- en: '*Voronoi grids*, also called Voronoi *diagrams*, are used to partition a plane
    into discrete regions around a given set of *seed points*. For each seed, there
    is a corresponding region, called a Voronoi *cell*, within which all points on
    the plane are closer to *that* seed than to any other.'
  prefs: []
  type: TYPE_NORMAL
- en: Voronoi diagrams have applications in many fields, including computer science,
    geography, biology, and urban planning. A particularly important application is
    to map the nearest airfields for planes needing to make an emergency landing.
  prefs: []
  type: TYPE_NORMAL
- en: The government of Melbourne, Australia uses this tool to produce *school catchment*
    maps. “Catchment” refers to those students who reside in a particular area and
    are guaranteed a position in specific schools. Because students are eligible to
    attend the *nearest* primary or high school to where they live — as measured by
    Euclidian distance — the map of school zones is by default a Voronoi diagram.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/64a322ea08319cfba5b42537ad497b98.png)'
  prefs: []
  type: TYPE_IMG
- en: Melbourne School Catchment map ([Victoria Dept. of Education](https://www.findmyschool.vic.gov.au/),
    CC-BY 4.0)
  prefs: []
  type: TYPE_NORMAL
- en: In this *Quick Success Data Science* project, we’ll explore the concept of Voronoi
    diagrams by making our own version of the Melbourne catchment map. We’ll use a
    subset of primary schools in the metropolitan area and grid them with the SciPy
    library’s `Voronoi` class. We'll then use the Folium library to overlay the Voronoi
    diagram on a street map of Melbourne.
  prefs: []
  type: TYPE_NORMAL
- en: The Dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To produce the dataset, I used the Victoria government’s [*Find My School*](https://www.findmyschool.vic.gov.au/#school=1283701)
    website to look up the addresses for 109 primary schools in the Melbourne metropolitan
    area. I then used [LatLong.net](https://www.latlong.net/convert-address-to-lat-long.html)
    to convert the addresses to decimal latitude and longitude and stored the results
    in a CSV file in this [Gist](https://gist.github.com/rlvaugh/7a59c99c41bc6d6b10cd5047a109453b).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5f9a3ddadd720b429e64e9ac3cec7ffc.png)'
  prefs: []
  type: TYPE_IMG
- en: Melbourne-area primary school locations used in this project (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: The SciPy Voronoi Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python’s *SciPy* scientific library is designed for mathematics, science, and
    engineering, and addresses many standard problem domains in scientific computing.
    It’s built on and supplements *Numerical Python* ([*NumPy*](https://numpy.org/))
    and provides many user-friendly and efficient numerical routines.
  prefs: []
  type: TYPE_NORMAL
- en: For making Voronoi diagrams, SciPy provides the `scipy.spatial.voronoi()` class,
    which uses the [Qhull library](http://www.qhull.org/) to compute the Voronoi grid.
    As mentioned previously, all the locations within a grid cell should be closer
    to the seed point used to generate that cell than to any other seed point.
  prefs: []
  type: TYPE_NORMAL
- en: In the diagram below, taken from the SciPy docs, the seed points are arranged
    orthogonally, leading to a straightforward grid pattern with the seed points in
    the *centers* of the cells.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8d82d5fdd39eb4f9a69da577995b164c.png)'
  prefs: []
  type: TYPE_IMG
- en: An orthogonal Voronoi grid (from the SciPy docs)
  prefs: []
  type: TYPE_NORMAL
- en: The seed points are shown in blue. The *vertices*, where lines in the diagram
    meet, are colored in orange. The *ridges* (lines) between the seed points are
    drawn in black. These form the boundaries of the Voronoi cells.
  prefs: []
  type: TYPE_NORMAL
- en: Because most of the seed points in the previous diagram are along the *edge*
    of the map, only the center seed point is associated with a *finite* cell or region,
    and thus is surrounded on all sides by *finite* ridges. The other ridges are dashed
    as they extend to infinity and thus bound *infinite* cells that never “close,”
    as there are no outer seed points from which to compute an intervening ridge.
  prefs: []
  type: TYPE_NORMAL
- en: The diagram below, also from the docs, was built from a *non-orthogonal* arrangement
    of seed points and consequently has more complex cells. Note how some of the ridges
    are drawn with solid lines and some with dashed.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ba7f2aaed929a1ef0a3f39b84dd7b51b.png)'
  prefs: []
  type: TYPE_IMG
- en: A non-orthogonal Voronoi grid (from the SciPy docs)
  prefs: []
  type: TYPE_NORMAL
- en: The ridges drawn with solid lines converge and meet *somewhere*, creating a
    closed and finite region. The dashed lines are divergent and never intersect,
    so their cells have infinite area. In practice, these infinite cells are generally
    disregarded or artificially bounded, such as with a map-edge polygon.
  prefs: []
  type: TYPE_NORMAL
- en: We can access lists of the regions (cells), and the coordinates used to define
    the regions, with attributes such as `voronoi.regions`, `voronoi.vertices`, `voronoi.ridge_vertices`,
    and `voronoi.ridge_points`. We’ll use these later to create plottable polygons
    for the Voronoi cells.
  prefs: []
  type: TYPE_NORMAL
- en: The Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code below, written in JupyterLab, follows these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the CSV file of school names and locations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the school locations to create a Voronoi grid.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Transform the Voronoi grid into plottable polygons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Truncate the edge cells with a square bounding box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plot the schools and Voronoi grid on a street map of Melbourne.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Importing Libraries and Preparing the Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To accomplish our task we’ll need pandas, geopandas, shapely (bundled with geopandas),
    Folium, and SciPy. The pandas and geopandas libraries permit the loading and processing
    of the data, shapely creates plottable polygons, Folium permits mapping, and SciPy
    provides the algorithm for building the Voronoi grid.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re not familiar with it, [*GeoPandas*](https://geopandas.org/en/stable/docs.html)
    is an open-source, third-party library designed to support geospatial mapping
    in Python. It extends the datatypes used by the [pandas](https://pandas.pydata.org/docs/)
    library and makes working with geospatial vector data similar to working with
    tabular data. It also enables operations in Python that would otherwise require
    a dedicated geospatial database, such as Post GIS.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After making the imports, we use pandas to read the CSV file and geopandas to
    turn the schools’ coordinates into *point geometries*.
  prefs: []
  type: TYPE_NORMAL
- en: A *GeoDataFrame* is a pandas DataFrame with a special “geometry” column for
    location data. This column bundles together the type of geometric object (such
    as a point, line string, polygon, etc.) and the coordinates (longitude and latitude)
    needed to draw it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/abced138554483fe9f3484ebcf1e97f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Example “geometry” column (boxed) of a GeoDataFrame (from [Python Tools for
    Scientists](https://a.co/d/eUoO01X) by author)
  prefs: []
  type: TYPE_NORMAL
- en: Notice that when making the GeoDataFrame we have to provide a *coordinate reference
    system* using the argument `crs=EPSG:4326`. “EPSG” stands for “European Petroleum
    Survey Group” dataset and the 4326 code is used by the *Global Positioning System*
    (*GPS*). This system projects the latitude and longitude coordinates from our
    3D planet onto the flat surface of a map. You can read more about it [here](https://en.wikipedia.org/wiki/EPSG_Geodetic_Parameter_Dataset).
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Voronoi Grid
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next step is to create the Voronoi grid by passing the GeoDataFrame’s “Longitude”
    and “Latitude” columns to the SciPy library’s `Voronoi()` class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Next, we make a list of the Voronoi polygons and remove empty regions and regions
    that extend to infinity. This requires using the `regions` attribute of the `vor`
    object returned by the `Voronoi()` class. If this attribute starts with -1, then
    we know that the region never closes. As part of the process, we pass the `vertices`
    attribute to shapely’s `Polygon()` class, which generates plottable polygons that
    we add to a new GeoDataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Truncating the Voronoi Cells
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because we’re not using all the primary schools in the area, many edge cells
    will be unconstrained and may extend for ridiculously long distances. To handle
    these, we’ll create a bounding box and use it to truncate any Voronoi cells (polygons)
    that extend beyond it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0235962b84a0ba808579748bae93010f.png)'
  prefs: []
  type: TYPE_IMG
- en: The unbounded grid. Yikes! (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We first define the lat-lon limits of the bounding box, using values slightly
    larger than those found in the CSV file. We then call `Polygon()` again to create
    the plottable polygon, then use list comprehension and the shapely `Polygon` `intersection()`
    method to truncate each polygon in the GeoDataFrame. Note how we use the special
    `geometry` column (`gdf_voronoi.geometry`) for this. We finish by creating a new
    GeoDataFrame to hold the truncated polygons.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting the Map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Voronoi diagram is useless without a way to relate it to the real world.
    So, we’ll use Folium to draw it over a street map of the city (by choosing `OpenStreetMap`
    as the `tiles` argument).
  prefs: []
  type: TYPE_NORMAL
- en: We’ll also need the school locations and related information. This requires
    looping through the GeoDataFrame and adding each marker to the map. We can control
    the icon *inside* the marker by setting the `icon` argument to the “home” symbol.
    You can find a list of icons like this on the [Glyphicons page](https://getbootstrap.com/docs/3.3/components/).
    You can also create custom icons, as described in this [article](/create-tailor-made-tourist-maps-with-folium-954706cc04e8).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here’s the resulting map, which permits zooming and panning.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cb099b9fa1849f417a0489b2d1a08aa9.png)'
  prefs: []
  type: TYPE_IMG
- en: The final map (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Some schools at the edge of the diagram are not in colored cells as their “ridges”
    extend to infinity without converging. These can be “fixed” by merging the Voronoi
    cell with another polygon. We’ll discuss this option shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the markers launches a pop-up window with the school’s name and
    address.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/59bd3f47270f9231ac25fb6480dc7c55.png)'
  prefs: []
  type: TYPE_IMG
- en: The pop-up window with school information (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: To turn off the blue fill color for the polygons, just modify the `style_function`
    parameter when creating the `folium.GeoJson` object, as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now all you’ll see are the cell boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/756429eddc848ddc56ee912141138923.png)'
  prefs: []
  type: TYPE_IMG
- en: The final map with the fill color set to “none” (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating a Municipal Polygon
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can view the actual Melbourne catchment map at the beginning of this article,
    at the [*Find My School*](https://www.findmyschool.vic.gov.au/) site (click on
    a school icon to activate the grid), or at [mangomap.com](https://mangomap.com/schoolcatchment/maps/56116/schoolcatchment.com.au-Victoria--Melbourne-Primary-School-Zone-Map?#).
  prefs: []
  type: TYPE_NORMAL
- en: Unlike our map, the real school zones *blend* the Voronoi polygons with *other
    boundaries*, such as the coastline along Port Philip Bay. Incorporating all these
    additional boundaries is beyond the scope of this article, but we can see how
    it’s done by using the City of Melbourne’s *municipal boundary polygon*.
  prefs: []
  type: TYPE_NORMAL
- en: The city provides this polygon as a *shapefile*. A shapefile is a geospatial
    vector data format for geographic information system (GIS) software. Despite its
    name, a “shapefile” isn’t a single file but a *collection* of files in a single
    folder. You can read more about them [here](https://medium.com/python-in-plain-english/shape-up-your-maps-with-shapefiles-8fb3d9403e16).
  prefs: []
  type: TYPE_NORMAL
- en: To download the shapefile, first navigate to the *Municipal Boundary* page of
    the [*City of Melbourne’s Open Data* *site*](https://data.melbourne.vic.gov.au/explore/dataset/municipal-boundary/export/)
    and then export the shapefile (as “whole dataset”). This data is shared under
    a *CC Attribution 4.0 International license*.
  prefs: []
  type: TYPE_NORMAL
- en: Store the zipped folder in the same folder as your Python script or notebook,
    so you can use the code provided below. ***Do not unzip the folder.***
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dafbe41a696551860f20d1e657db2e9f.png)'
  prefs: []
  type: TYPE_IMG
- en: The municipal boundary folder
  prefs: []
  type: TYPE_NORMAL
- en: Here’s the code for truncating and merging the existing polygons with the municipal
    boundary. It’s similar to the truncation process used for the bounding box and
    assumes that you’ve already run the previous code (for those running the code
    in a notebook).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The new map, shown below, contains only the Voronoi cells *within* the Melbourne
    city limits. Many cell boundaries now conform to non-Voronoi-related features
    such as the Yarra River, the docks, and major roads.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2564d24c07548f65adb70ceecff52d13.png)'
  prefs: []
  type: TYPE_IMG
- en: The Voronoi polygons truncated to the Melbourne Municipal Boundary (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Some cells are isolated from their respective schools. This is because the Melbourne
    municipal polygon isn’t actually used to define the school zones. We’re using
    it here to *demonstrate* how the final map could be created once you have a collection
    of all the correct polygons. As you saw, it’s a simple process.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Voronoi diagram is a nearest-neighbor mapping that lets you subdivide a plane
    with *n* generating points into *n* convex polygons. Each polygon contains one
    generating point and every location in a given polygon is closer to its generating
    point than to any other generating point.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we used a Voronoi diagram to partition a map of Melbourne,
    Australia into school catchment areas. Students in each zone are closer to the
    associated primary school than to any other primary school in the city. This map
    differs from the real thing as we didn’t use all the schools or incorporate all
    the modifying polygons, such as for rivers and coastlines.
  prefs: []
  type: TYPE_NORMAL
- en: Python’s SciPy library contains built-in functionality for generating Voronoi
    grids. With the help of additional third-party libraries like geopandas and Folium,
    you can project these grids onto maps for real-world applications.
  prefs: []
  type: TYPE_NORMAL
- en: Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to learn more about Voronoi diagrams, check out this informative
    article by Francesco Bellilli.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/the-fascinating-world-of-voronoi-diagrams-da8fc700fa1b?source=post_page-----7e6ee3b1daf0--------------------------------)
    [## The fascinating world of Voronoi diagrams'
  prefs: []
  type: TYPE_NORMAL
- en: A brief introduction about this ubiquitous pattern and its applications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/the-fascinating-world-of-voronoi-diagrams-da8fc700fa1b?source=post_page-----7e6ee3b1daf0--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Thanks!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for reading and please follow me for more *Quick Success Data Science*
    projects in the future.
  prefs: []
  type: TYPE_NORMAL
