["```py\n def compute_entropy_4D(tensor):\n    \"\"\"\n    Compute the entropy on a 4D tensor with shape (number_of_classes, 256, 256, 256).\n\n    Parameters:\n        tensor (np.ndarray): 4D tensor of shape (number_of_classes, 256, 256, 256)\n\n    Returns:\n        np.ndarray: 3D tensor of shape (256, 256, 256) with entropy values for each pixel.\n    \"\"\"\n\n    # First, normalize the tensor along the class axis so that it represents probabilities\n    sum_tensor = np.sum(tensor, axis=0, keepdims=True)\n    tensor_normalized = tensor / sum_tensor\n\n    # Calculate entropy\n    entropy_elements = -tensor_normalized * np.log2(tensor_normalized + 1e-12)  # Added a small value to avoid log(0)\n    entropy = np.sum(entropy_elements, axis=0)\n\n    entropy = np.transpose(entropy, (2,1,0))\n\n    total_entropy = np.sum(entropy)\n\n    return entropy, total_entropy\n```"]