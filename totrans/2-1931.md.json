["```py\n# Define a function to extract values from a column and convert to integer\ndef extract_and_convert(column, prefix):\n    return column.str.extract(f'{prefix}(\\d+)')[0].astype(int)\n\n# Extract HDL and LDL values and add them as new columns\ndf['HDL'] = extract_and_convert(df['Cholesterol Levels'], 'HDL:')\ndf['LDL'] = extract_and_convert(df['Cholesterol Levels'], 'LDL:')\n```", "```py\n# List of unique symptoms\nunique_symptoms = ['Difficulty Speaking', 'Headache', 'Loss of Balance', 'Dizziness',\n                   'Confusion', 'Seizures', 'Blurred Vision', 'Severe Fatigue',\n                   'Numbness', 'Weakness']\n\n# Create binary columns for each unique symptom indicating its presence in 'Symptoms'\ndf[unique_symptoms] = df['Symptoms'].str.contains('|'.join(unique_symptoms))\n```", "```py\n# Convert categorical columns to numerical codes using label encoding\ndf[categorical_columns] = df[categorical_columns].apply(lambda x: pd.factorize(x)[0])\n\n# Convert the target variable to numerical codes using label encoding\ndf[target] = pd.factorize(df[target])[0]\n```", "```py\n# Define numerical columns \nnumerical_columns = ['age', 'bmi', 'glucose', 'stress', 'bp', 'hdl', 'ldl', ]\n\n# Define categorical columns\ncategorical_columns = ['gender', 'hypertension', 'heart_dis', 'married', 'work', 'residence',\n                       'smoker', 'alcohol', 'fitness', 'stroke_history', 'family_stroke_history',\n                       'diet', 'speech', 'headache', 'balance', 'dizziness', 'confusion',\n                       'seizures', 'vision', 'fatigue', 'numbness', 'weakness']\n\n# Define target column\ntarget = 'diagnosis'\n```", "```py\ndef summary(df: pd.DataFrame, \n            numerical_columns: list, \n            categorical_columns: list, \n            target: str,\n            categorical_summary: Optional[bool] = True, \n            numerical_summary: Optional[bool] = True,\n            perform_tests: Optional[bool] = True, \n            plot_corr_heatmap: Optional[bool] = True,\n            calculate_cat_averages: Optional[bool] = True, \n            plot_distribution: Optional[bool] = True) -> None:\n    \"\"\"\n    Generate a summary of data exploration tasks.\n    \"\"\"\n    df_numerical = df[numerical_columns]\n    df_categorical = df[categorical_columns]\n\n    # Join numerical and categorical columns together\n    df_joined = df_numerical.join(df_categorical)\n    df_joined[target] = df[target]\n\n    if categorical_summary:\n        print('\\nCATEGORICAL SUMMARY')\n        categorical_summary = calculate_categorical_summary(df_categorical)\n        display(categorical_summary.round(2))\n\n    if numerical_summary:\n        print('\\nNUMERICAL SUMMARY')\n        numerical_summary = calculate_numerical_summary(df_numerical)\n        display(numerical_summary.round(2))\n\n    if perform_tests:\n        print('\\nSTATISTICAL TESTS')\n        df_summary = statistical_tests(df, categorical_columns, numerical_columns, target)\n        display(df_summary.round(2))\n\n    if plot_corr_heatmap:\n        plot_correlation_heatmap(df_joined)\n\n    if calculate_cat_averages:\n        for col in categorical_columns:\n            display(df_joined.groupby(col).mean())\n\n    if plot_distribution:\n        plot_distribution_plots(df, categorical_columns + [target], numerical_columns)\n```"]