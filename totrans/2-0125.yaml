- en: 5 Ways to Apply If-Else Conditional Statements in Pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/5-ways-to-apply-if-else-conditional-statements-in-pandas-b9627e5f475b](https://towardsdatascience.com/5-ways-to-apply-if-else-conditional-statements-in-pandas-b9627e5f475b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Revisiting Pandas Basics and Honing Your Data Wrangling Skills
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@insightsbees?source=post_page-----b9627e5f475b--------------------------------)[![My
    Data Talk](../Images/8adf8046dbb807d7613a324bdab8bc02.png)](https://medium.com/@insightsbees?source=post_page-----b9627e5f475b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b9627e5f475b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b9627e5f475b--------------------------------)
    [My Data Talk](https://medium.com/@insightsbees?source=post_page-----b9627e5f475b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b9627e5f475b--------------------------------)
    ·5 min read·Jan 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/653970acab6f79ac21f6f4b15288ac6d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [muxin alkayis](https://pixabay.com/users/muxin25-17301468/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=5364820)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=5364820)
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new column or modifying an existing column in a Pandas data frame
    — based on a set of `if-else` conditions — is probably one of the most frequently
    encountered problems among all different types of data wrangling tasks. In this
    post, I’d like to share with you my notepad which summarizes the 5 popular ways
    of applying `if-else` conditional statements in Pandas dataframes with handy and
    practical code snippets. For simplicity, I created a small sample dataset and
    will use it for demonstration purposes throughout the tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say we have a pandas dataframe as shown below. The column ‘visits_30days’
    shows how many times a customer visited a website in the last 30 days. We want
    to create a new column that either categorizes these customers into ‘non-visitor’
    or ‘visitor’ (a binary categorization) or categorizes them into multiple buckets
    such as ‘0 visits’, ‘1–5 visits’, ‘6-10 visits’, etc. We’ll name this new column
    ‘visits_category’.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/327ad85ebfcb6fd6fbd9c0021d719432.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Method 1: Use the **numpy.where()** function'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `numpy.where()` function is an elegant and efficient python function that
    you can use to add a new column based on ‘true’ or ‘false’ **binary** conditions.
    The syntax looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Applying the syntax to our dataframe, our code would look like this. The new
    column ‘visits_category’ has the value of either ‘Yes’ or ‘No’ depending on the
    condition of whether the value of the ‘visits_30days’ column is equal to 0 or
    not.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4641f1adc64d35126c8c968de12e093a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '**Method 2: Use the lambda function**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like `np.where()` , the `lambda` function is another superb choice when you
    need to add a column based on a simple binary `if-else` condition. The generic
    structure of the code using `lambda` function is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For our specific example, the code would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Method 3: Use the numpy.select() function'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let’s move on to a more complicated scenario. Let’s say we want to create
    multiple categories for ‘visits_category’ involving multiple conditions. You won’t
    be able to achieve it by using `np.where()`. Instead, you can use `np.select()`
    to apply more complicated conditions.
  prefs: []
  type: TYPE_NORMAL
- en: First, create a python `list` that specifies your conditions in the order of
    which one needs to be executed first, second, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Then, create a python `list` of values that we want to assign to each condition.
    Make sure each value corresponds to the condition created in the first step.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Finally, create the new column using `np.select()` by using the two `lists`
    you created before as the arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Putting the three pieces of code together you get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/74070d4e40731c28fc4e14d575bb330b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Method 4: Use the Pandas `apply()` function'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With this method, we can first define a function that specifies the conditions.
    We then apply that function along columns (`axis=1`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Method 5: Use DataFrame.loc()'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pandas `DataFrame.loc()` selects rows and columns by label(s) in a given `DataFrame`.
    For example, in the code below, the first line of code selects the rows in the
    dataframe where the value of ‘visits_30days’ is equal to zero and assigns ‘0 visits’
    to the new column ‘visits_category’ for only those rows that meet this specific
    condition. You then do the same thing for other conditions as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Learning and summarizing the most common pandas’ data wrangling techniques has
    always been a fun and helpful exercise in my daily data scientist life. Data wrangling
    is an important element in a data scientist’s day-to-day work and accounts for
    nearly 80% of the time spent on a data analytics project. Having a notepad nearby
    with all your favorite code snippets sorted and summarized is a great and efficient
    way to improve your productivity. I hope you enjoyed this tutorial and thanks
    for reading.
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Source:** The sample dataset used in this tutorial was created by the
    author for demonstration purposes.'
  prefs: []
  type: TYPE_NORMAL
- en: You can unlock full access to my writing and the rest of Medium by signing up
    for Medium membership ($5 per month) through this [referral link](https://medium.com/@insightsbees/membership).
    By signing up through this link, I will receive a portion of your membership fee
    at no additional cost to you. Thank you!
  prefs: []
  type: TYPE_NORMAL
