- en: 'Getting Started with Great Expectations: A Guide to Data Validation in Python'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/getting-started-with-great-expectations-a-guide-to-data-validation-in-python-95a8ffc2b747](https://towardsdatascience.com/getting-started-with-great-expectations-a-guide-to-data-validation-in-python-95a8ffc2b747)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn how to prevent data quality issues with a few lines of code in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://eugenia-anello.medium.com/?source=post_page-----95a8ffc2b747--------------------------------)[![Eugenia
    Anello](../Images/537f444252cdc60709e7a19e37734c7b.png)](https://eugenia-anello.medium.com/?source=post_page-----95a8ffc2b747--------------------------------)[](https://towardsdatascience.com/?source=post_page-----95a8ffc2b747--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----95a8ffc2b747--------------------------------)
    [Eugenia Anello](https://eugenia-anello.medium.com/?source=post_page-----95a8ffc2b747--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----95a8ffc2b747--------------------------------)
    ·5 min read·Jul 12, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b44619fb1e276911bf755eb0cda452a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Link Hoang](https://unsplash.com/@linkhoang) on [Unsplash](https://unsplash.com/photos/UoqAR2pOxMo)
  prefs: []
  type: TYPE_NORMAL
- en: When you work on a data science project with a company, you usually don’t have
    a unique test set, unlike university and research, but you keep receiving newly
    updated samples from the client.
  prefs: []
  type: TYPE_NORMAL
- en: Before applying the machine learning model to the new sample, you need to verify
    its data quality, such as the column names, the column types, and the distribution
    of the fields, which should match the training and old test set.
  prefs: []
  type: TYPE_NORMAL
- en: Manually analyzing the data can be time-consuming when the data is dirty and
    presents more than 100 features. Luckily, there is a life-saving Python library,
    called **Great Expectations**. Did I intrigue you? Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: What is Great Expectations?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/12c18fd03279efe713c48475f0618327.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Illustration by Author. Source: [flaticon](https://www.flaticon.com/free-icon/detective_695877?term=sherlock+holmes&page=1&position=4&origin=search&related_id=695877).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Great Expectations is an open-source Python library that is specialized in
    solving three important aspects to manage data:'
  prefs: []
  type: TYPE_NORMAL
- en: '**validating data** by verifying if it respects some important conditions or
    expectations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**automating data profiling** to test your data fastly without the need of
    starting from scratch'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**formatted documents**, that contain the results of the expectations and validations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this tutorial, we are going to focus on validating data, which is one of
    the main issues when dealing with real-world data.
  prefs: []
  type: TYPE_NORMAL
- en: Airbnb listings in Amsterdam
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to analyze the Airbnb listings provided by [Inside Airbnb](http://insideairbnb.com/get-the-data/).
    We are going to work with data from [Amsterdam](http://data.insideairbnb.com/the-netherlands/north-holland/amsterdam/2023-06-05/visualisations/reviews.csv).
    The dataset is already split into training and test sets. As you may guess from
    the name of the dataset, the goal is to predict listing prices. If we just keep
    attention to the number of reviews, we can notice that the number of reviews on
    the test data has more variability than the ones of the training set.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0c4665fcd1b8224d2dbcb6e8e46d2d9a.png)'
  prefs: []
  type: TYPE_IMG
- en: Illustration by Author
  prefs: []
  type: TYPE_NORMAL
- en: The question that we should ask ourselves is “What other differences did we
    miss? Let’s get started with the library!
  prefs: []
  type: TYPE_NORMAL
- en: '**Table of contents:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Requirements**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Load file**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create Expectations**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before installing the library, it’s recommended to [install Python 3 and create
    a virtual environment](https://www.digitalocean.com/community/tutorial-collections/how-to-install-python-3-and-set-up-a-programming-environment).
    After you have activated the environment, we can install the Python library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You also need to download the data from [Kaggle](https://www.kaggle.com/datasets/samuelcortinhas/house-price-prediction-seattle)
    to follow the tutorial. The files should be contained inside the folder “data”.
  prefs: []
  type: TYPE_NORMAL
- en: Load file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like in Pandas, the great expectations library has the equivalent method to
    import the CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In case you have other types of data, like JSON, parquet and XLSX, you can just
    wrap the Pandas methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/690dfb9035b1a9ae37953988ef86b07f.png)'
  prefs: []
  type: TYPE_IMG
- en: Illustration by Author
  prefs: []
  type: TYPE_NORMAL
- en: This is a fast overview of our test data and the variables we are going to analyze
    in the next steps.
  prefs: []
  type: TYPE_NORMAL
- en: Create expectations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this library, [expectations](https://legacy.docs.greatexpectations.io/en/latest/reference/core_concepts/expectations/expectations.html#expectations)
    consist in several tests that verify the quality of your data. The beauty of the
    library is that you don’t need to check manually, but there are already more than
    300 implemented expectations with intuitive names.
  prefs: []
  type: TYPE_NORMAL
- en: '**Check if there are the same columns as before**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s suppose that the client has sent us a new sample and we want to check
    if it contains the same columns as in the training set. There are a lot of ways
    to do it in pandas if you ask ChatGPT, but there is a more intuitive method to
    do it with great expectations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: From the result, we can see that the method found most of the columns, except
    for the fields id and neighbourhood. Since the condition isn’t respected completely,
    the key “success” is valued as false.
  prefs: []
  type: TYPE_NORMAL
- en: '**2\. Check if there are no null values in last_review**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The missing values are one of the main problems when working with real-world
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: From this test, we can see that we have 143 missing values in that column.
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. Check if the type of minimum_nights is an integer**'
  prefs: []
  type: TYPE_NORMAL
- en: 'It may seem banal, but you may find errors because the model was trained on
    a column with a different type. So, this expectation is useful for avoiding waste
    of time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The expectation is respected, highlighted by `"success":true`.
  prefs: []
  type: TYPE_NORMAL
- en: '**4\. Check if the maximum price is within a specific interval**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we have seen that the price has different distribution in training and
    test sets. We try to investigate if the maximum price is between 413 e 12000,
    which corresponds respectively to the 90th percentile and the maximum of the training
    set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The output tells us that the maximum price is 7900 and is within that interval.
  prefs: []
  type: TYPE_NORMAL
- en: 'Final thoughts:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I just provided an overview of the Great Expectations to introduce the main
    functionality: the expectations. You can explore other declarative statements,
    or expectations, from the [official website](https://greatexpectations.io/expectations/?filterType=undefined&gotoPage=undefined&showFilters=undefined&viewType=undefined).
    In the next article, I am going to cover the automation of data profiling and
    visualization of all the expectations in a unique document. You can find the GitHub
    code [here](https://github.com/eugeniaring/Medium-Articles/blob/main/MLOps/great_expectation_start.ipynb).
    Thanks for reading! Have a nice day!'
  prefs: []
  type: TYPE_NORMAL
- en: '*Disclaimer: This data set is licensed under Attribution 4.0 International
    (CC BY 4.0)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Useful Resources:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Documentation of Great Expectations](https://legacy.docs.greatexpectations.io/en/latest/guides/tutorials/explore_expectations_in_a_notebook.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GitHub page of Great Expectations](https://github.com/great-expectations/great_expectations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
