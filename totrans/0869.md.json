["```py\n!pip install opencv-python\n```", "```py\nimport cv2\n```", "```py\nimport cv2\n\n# default webcam\nstream = cv2.VideoCapture(0)\n\nwhile(True):\n    # Capture frame-by-frame\n    (grabbed, frame) = stream.read()\n\n    # Show the frame\n    cv2.imshow(\"Image\", frame)\n    key = cv2.waitKey(1) & 0xFF    \n    if key == ord(\"q\"):    # Press q to break out of the loop\n        break\n\n# Cleanup\nstream.release()\ncv2.waitKey(1)\ncv2.destroyAllWindows()\ncv2.waitKey(1)\n```", "```py\nstream = cv2.VideoCapture(0)\n```", "```py\n # Capture frame-by-frame\n    (grabbed, frame) = stream.read()\n\n    # Show the frame\n    cv2.imshow(\"Image\", frame)\n```", "```py\n key = cv2.waitKey(1) & 0xFF    \n    if key == ord(\"q\"):    # Press q to break out of the loop\n        break\n```", "```py\n# Cleanup\nstream.release()\ncv2.waitKey(1)\ncv2.destroyAllWindows()\ncv2.waitKey(1)\n```", "```py\n$ python face_detection.py\n```", "```py\nimport cv2\n\n# for face detection\nface_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\n```", "```py\nwhile(True):\n    # Capture frame-by-frame\n    (grabbed, frame) = stream.read()\n\n    #===============DETECTING FACES============\n    # Convert to grayscale\n    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n\n    # Try to detect faces in the webcam\n    faces = face_cascade.detectMultiScale(gray, \n                                          scaleFactor=1.3, \n                                          minNeighbors=5)\n\n    # for each faces found\n    for (x, y, w, h) in faces:        \n        # Draw a rectangle around the face\n        color = (0, 255, 255) # in BGR\n        stroke = 5    \n        cv2.rectangle(frame, (x, y), (x + w, y + h), \n            color, stroke)\n    #===============DETECTING FACE=============\n\n    # Show the frame\n    cv2.imshow(\"Image\", frame)\n    key = cv2.waitKey(1) & 0xFF    \n    if key == ord(\"q\"):    # Press q to break out of the loop\n        break\n```", "```py\n# for each faces found\n    for (x, y, w, h) in faces:        \n        # Draw a rectangle around the face\n        color = (0, 255, 255) # in BGR\n        stroke = 5    \n        cv2.rectangle(frame, (x, y), (x + w, y + h), \n            color, stroke)\n```", "```py\nimport cv2\n\n# for face detection\nface_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\n\n# default webcam\nstream = cv2.VideoCapture(0)\n\nwhile(True):\n    # Capture frame-by-frame\n    (grabbed, frame) = stream.read()\n\n    # Convert to grayscale\n    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n\n    # Try to detect faces in the webcam\n    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)\n\n    # for each faces found\n    for (x, y, w, h) in faces:        \n        # Draw a rectangle around the face\n        color = (0, 255, 255) # in BGR\n        stroke = 5    \n        cv2.rectangle(frame, (x, y), (x + w, y + h), \n            color, stroke)\n\n    # Show the frame\n    cv2.imshow(\"Image\", frame)\n    key = cv2.waitKey(1) & 0xFF    \n    if key == ord(\"q\"):    # Press q to break out of the loop\n        break\n\n# Cleanup\nstream.release()\ncv2.waitKey(1)\ncv2.destroyAllWindows()\ncv2.waitKey(1)\n```"]