- en: 4 Ways to Quantify Fat Tails with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/4-ways-to-quantify-fat-tails-with-python-10ce62c0ada1](https://towardsdatascience.com/4-ways-to-quantify-fat-tails-with-python-10ce62c0ada1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Intuition and Example Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://shawhin.medium.com/?source=post_page-----10ce62c0ada1--------------------------------)[![Shaw
    Talebi](../Images/1449cc7c08890e2078f9e5d07897e3df.png)](https://shawhin.medium.com/?source=post_page-----10ce62c0ada1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----10ce62c0ada1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----10ce62c0ada1--------------------------------)
    [Shaw Talebi](https://shawhin.medium.com/?source=post_page-----10ce62c0ada1--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----10ce62c0ada1--------------------------------)
    ·11 min read·Dec 7, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b5203c61a2cee6046950ad6cec930138.png)'
  prefs: []
  type: TYPE_IMG
- en: A fat (cat’s) tail. Image from Canva.
  prefs: []
  type: TYPE_NORMAL
- en: This is the third article in a series on [Power Laws and Fat Tails](/pareto-power-laws-and-fat-tails-0355a187ee6a).
    In the [previous post](https://medium.com/towards-data-science/detecting-power-laws-in-real-world-data-with-python-b464190fade6),
    we explored how to detect power laws from empirical data. While this technique
    can be handy, fat tails go beyond simply fitting data to a power law distribution.
    In this article, I will break down 4 ways we can quantify fat tails and share
    example Python code analyzing real-world data.
  prefs: []
  type: TYPE_NORMAL
- en: '*Note: If you are unfamiliar with terms like Power Law distribution or Fat
    Tail, review* [*this article*](https://medium.com/towards-data-science/pareto-power-laws-and-fat-tails-0355a187ee6a)
    *as a primer.*'
  prefs: []
  type: TYPE_NORMAL
- en: In the [first article](/pareto-power-laws-and-fat-tails-0355a187ee6a) of this
    series, we introduced the idea of **fat tails,** which describes the **degree
    to which rare events drive the aggregate statistics of a distribution**. We saw
    an extreme example of fat tails via the Pareto distribution where, for example,
    80% of sales are generated by 20% of customers (and 50% of sales are generated
    by just 1% of customers).
  prefs: []
  type: TYPE_NORMAL
- en: '[](/pareto-power-laws-and-fat-tails-0355a187ee6a?source=post_page-----10ce62c0ada1--------------------------------)
    [## Pareto, Power Laws, and Fat Tails'
  prefs: []
  type: TYPE_NORMAL
- en: What they don’t teach you in statistics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/pareto-power-laws-and-fat-tails-0355a187ee6a?source=post_page-----10ce62c0ada1--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Although Pareto (and more generally power law) distributions give us a salient
    example of fat tails, this is a more general notion that lives on a spectrum ranging
    from thin-tailed (i.e. a Gaussian) to very fat-tailed (i.e. Pareto 80–20).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1165dd459098d49a27a5760128eeac49.png)'
  prefs: []
  type: TYPE_IMG
- en: The spectrum of Fat-tailedness. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'This view of *fat-tailedness* provides us with a more flexible and precise
    way of categorizing data than simply labeling it as a Power Law (or not). However,
    this begs the question: *how do we define fat-tailedness?*'
  prefs: []
  type: TYPE_NORMAL
- en: '**4 Ways to Quantify Fat Tails**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While there is no “true” measure of fat-tailedness, there are a few heuristics
    (i.e. rules of thumb) we can use in practice to quantify *how fat-tailed* data
    are. Here, we review 4 such heuristics. We start by introducing each technique
    conceptually and then dive into example Python code.
  prefs: []
  type: TYPE_NORMAL
- en: '**Heuristic 1: Power Law Tail Index**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *fattest* fat tails appear in Power Law distributions, where **the smaller
    a Power Law’s tail index (i.e. *α*), the fatter its tail**, as illustrated in
    the image below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3930ecd4789e8b354961f2b415e00124.png)'
  prefs: []
  type: TYPE_IMG
- en: Example Power Law distributions with various α values. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: This observation that **smaller tail indexes imply fatter tails** naturally
    motivates us to use *α* to quantify fat tails. In practice, this boils down to
    [fitting a power law](/detecting-power-laws-in-real-world-data-with-python-b464190fade6)
    distribution to a given dataset and extracting the estimated *α* value.
  prefs: []
  type: TYPE_NORMAL
- en: While this is a straightforward approach, it has one obvious limitation. Namely,
    the approach will break down when working with data that poorly fits a power law.
  prefs: []
  type: TYPE_NORMAL
- en: '**Heuristic 2: Kurtosis (i.e. non-Gaussianity)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The opposite of a fat tail is a **thin tail** (i.e. **rare events are so rare
    they are negligible**). A thin-tailed exemplar is the beloved Gaussian distribution,
    where the probability of an event 6 sigma away from the mean is about 1 in a billion.
  prefs: []
  type: TYPE_NORMAL
- en: This inspires another measure of fat tails by quantifying how “UN-Gaussian”
    the data are. We can do this via so-called non-Gaussianity measures. While we
    could devise many such measures, the most popular is **Kurtosis**, defined by
    the expression below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/064b94c8c1dc272c7093f90b9f05cb2a.png)'
  prefs: []
  type: TYPE_IMG
- en: Definition of Kurtosis according to ref [1] and [2]. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: Kurtosis is driven by values far from the center (i.e. the tails). Thus, **the
    larger the kurtosis, the fatter the tail**.
  prefs: []
  type: TYPE_NORMAL
- en: This measure tends to work well when all the moments are finite [3]. One major
    limitation, however, is that Kurtosis is not defined for some distributions, e.g.
    Pareto with *α* =< 4, which makes it useless for many fat-tailed data.
  prefs: []
  type: TYPE_NORMAL
- en: '**Heuristic 3: Log-normal’s σ**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In past articles of this series, we discussed the Log-normal distribution, defined
    by the probability density function below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/baf93cd83c594d20e2c395eb9c14bdf7.png)'
  prefs: []
  type: TYPE_IMG
- en: The probability density function of log-normal distribution [4]. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: As we saw [before](/detecting-power-laws-in-real-world-data-with-python-b464190fade6),
    this distribution is a bit *mischievous* because it can appear Gaussian-like for
    low **σ**, yet Pareto-like at high **σ**. This naturally provides another way
    to quantify fat tails, where **the larger the σ, the fatter the tail**.
  prefs: []
  type: TYPE_NORMAL
- en: We can obtain this measure in a similar way as *Heuristic 1*. Namely, we fit
    a log-normal distribution to our data and extract the fit’s σ value. While this
    is a simple procedure, it (like *Heuristic 1*) breaks down when the log-normal
    fit does not explain the underlying data well.
  prefs: []
  type: TYPE_NORMAL
- en: '**Heuristic 4: Taleb’s κ**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The preceding heuristics (H) started with a particular distribution in mind
    (i.e. H1 — Power Law and H3 — Log-normal). In practice, however, our data rarely
    precisely follow any particular distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, comparisons using these measures may be problematic when evaluating
    2 variables following qualitatively different distributions. For instance, using
    a power law’s tail index to compare Pareto-like and Gaussian-like data may have
    little significance since a power law will poorly fit into Gaussian-like data.
  prefs: []
  type: TYPE_NORMAL
- en: This motivates the use of non-distribution-specific measures of fat-tailedness.
    One such measure was proposed by Taleb in ref [3]. The proposed **metric (κ)**
    is defined for **unimodal data with finite mean** **and** **takes values between
    0 and 1**, where **0** indicates data are **maximally thin-tailed** and **1**
    implies the data are **maximally fat-tailed**. It is defined according to the
    expression below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c60aa289efeb7e9afb85bba6042f03b1.png)'
  prefs: []
  type: TYPE_IMG
- en: Definition of Taleb’s κ metric [3]. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: The metric compares two samples (say, Sₙ₀ and Sₙ) where Sₙ is the sum of *n*
    samples drawn from a particular distribution. For example, if we evaluate a Gaussian
    distribution and choose *n*=100, we would draw 100 samples from a Gaussian and
    sum them all together to create S₁₀₀.
  prefs: []
  type: TYPE_NORMAL
- en: '***M(n)*** in the above expression denotes the **mean absolute deviation**,
    defined according to the equation below. This measure of the **dispersion around
    the mean** tends to be more robust than the standard deviation [3][5].'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c4be29d1e35847f2c5406b6b80027ea3.png)'
  prefs: []
  type: TYPE_IMG
- en: Definition of mean absolute deviation from κ equation [3]. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: To simplify things, we can choose n₀=1, giving us the expression below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e94ec6235c9d1eb4d9f45036f749224a.png)'
  prefs: []
  type: TYPE_IMG
- en: κ with n₀=1\. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: The key term here is *M(n)/M(1)*, where ***M(n)* quantifies the dispersion around
    the mean for the sum of n samples** (of some distribution).
  prefs: []
  type: TYPE_NORMAL
- en: For **thin-tailed** distributions, *M(30)* will be relatively close to *M(1)*
    since the data generally sit close to the mean. Thus, *M(30)/M(1) ~ 1.*
  prefs: []
  type: TYPE_NORMAL
- en: For **fat-tailed** data, however, *M(30)* will be much larger than *M(1)*. Thus,
    *M(30)/M(1) >> 1\.* This is illustrated below, where the left plot shows how dispersion
    scales for a sum of Gaussians, and the right plot shows how it scales for a Pareto.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/619514d46d0fb2e071e1b9098bc217a0.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Scaling of M(n) and M(1) for Gaussian (left) and Pareto 80–20 (right) distributions.
    Notice the y-axis labels.* Note: the scale of Gaussian dispersion increases due
    to the summing of n distributions. *Image by author.*'
  prefs: []
  type: TYPE_NORMAL
- en: Thus, for fat-tailed data, the denominator in the κ equation will be bigger
    than the numerator, making the second term on the RHS smaller and, ultimately,
    κ larger.
  prefs: []
  type: TYPE_NORMAL
- en: 'If this was all more math than you bargained for, here’s the takeaway:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Big κ = fat-tailed, small κ = thin-tailed**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Example Code: Quantifying the Fat-tailedness of (Real-world) Social Media
    Data**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the conceptual stuff out of the way, let’s see what using these heuristics
    looks like in practice. Here, we will use each approach described above to analyze
    the same data from the [previous article](/detecting-power-laws-in-real-world-data-with-python-b464190fade6)
    of this series.
  prefs: []
  type: TYPE_NORMAL
- en: The data are from my social media accounts, which include monthly followers
    gained on **Medium**, earnings per **YouTube** video, and daily impressions on
    **LinkedIn**. The data and code are freely available at the [GitHub repo](https://github.com/ShawhinT/YouTube-Blog/tree/main/power-laws/3-quantifying-fat-tails).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/ShawhinT/YouTube-Blog/tree/main/power-laws/3-quantifying-fat-tails?source=post_page-----10ce62c0ada1--------------------------------)
    [## YouTube-Blog/power-laws/3-quantifying-fat-tails at main · ShawhinT/YouTube-Blog'
  prefs: []
  type: TYPE_NORMAL
- en: Codes to complement YouTube videos and blog posts on Medium. - YouTube-Blog/power-laws/3-quantifying-fat-tails
    at main…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/ShawhinT/YouTube-Blog/tree/main/power-laws/3-quantifying-fat-tails?source=post_page-----10ce62c0ada1--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: We start by importing some helpful libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will load each dataset and store them in a dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: At this point, looking at the data is always a good idea. We can do that by
    plotting histograms and printing the top 5 records for each dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c6f1b93d5bce6020817c85f4614546f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Histograms for monthly Medium followers. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/df31d7b781cdbfc08bff529aaeff5800.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Histograms for YouTube video earnings. Note: if you notice a difference from
    the previous article, it’s because I found a rogue record in the data (that’s
    why looking is a good idea 😅). Image by author.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1bbd897528f57b6f247f33ee6223bb66.png)'
  prefs: []
  type: TYPE_IMG
- en: Histograms for daily LinkedIn impressions. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: Based on the histograms above, each dataset appears fat-tailed to some extent.
    Let’s see the top 5 records by percentage to get another look at this.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fa20b74cd0e5ba368dc5e5595d01d78d.png)'
  prefs: []
  type: TYPE_IMG
- en: Top 5 records by percentage for each dataset. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: From this view, Medium followers appear the most fat-tailed, with 60% of followers
    coming from just 2 months. YouTube earnings are also strongly fat-tailed, where
    about 60% of revenue comes from just 4 videos. LinkedIn impressions seem the least
    fat-tailed.
  prefs: []
  type: TYPE_NORMAL
- en: While we may get a qualitative sense of the fat-tailedness just by *looking
    at the data*, let’s make this more quantitative via our 4 heuristics.
  prefs: []
  type: TYPE_NORMAL
- en: '**Heuristic 1: Power Law Tail Index**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To obtain an *α* for each dataset, we can use the [*powerlaw*](https://pypi.org/project/powerlaw/)library
    as we did in the [previous article](/detecting-power-laws-in-real-world-data-with-python-b464190fade6).
    This is done in the code block below, where we perform the fit and print the parameter
    estimates for each dataset in a for loop.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/27ab7fb5f3ff30dd33631589952cd248.png)'
  prefs: []
  type: TYPE_IMG
- en: Power Law fit results. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: The results above match our qualitative assessment that Medium followers are
    the most fat-tailed, followed by YouTube earnings and LinkedIn impressions (remember,
    a smaller *α* means a fatter tail).
  prefs: []
  type: TYPE_NORMAL
- en: 'Heuristic 2: Kurtosis'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An easy way to compute Kurtosis is using an off-the-shelf implementation. Here,
    I use [Scipy](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosis.html)
    and print the results in a similar way as before.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7a5c6028042943ab2c6e65e12b4bf67a.png)'
  prefs: []
  type: TYPE_IMG
- en: Kurtosis values for each dataset. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kurtosis tells us a different story than *Heuristic 1*. The ranking of fat-tailedness
    according to this measure is as follows: LinkedIn > Medium > YouTube.'
  prefs: []
  type: TYPE_NORMAL
- en: However, these results should be taken with a grain of salt. As we saw with
    the power law fits above, all 3 datasets fit a power law with *α* < 4, meaning
    the Kurtosis is infinite. So, while the computation returns a value, it’s probably
    wise to be suspicious of these numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Heuristic 3: Log-normal’s σ'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can again use the [*powerlaw*](https://pypi.org/project/powerlaw/) library
    to obtain σ estimates similar to what we did for *Heuristic 1*. Here’s what that
    looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c04fa0e0af43c6313421f3731517e5f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Log-normal fit results. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the σ values above, we see all fits imply the data are fat-tailed,
    where Medium followers and LinkedIn impressions have similar σ estimates. YouTube
    earnings, on the other hand, have a significantly larger σ value, implying a (much)
    fatter tail.
  prefs: []
  type: TYPE_NORMAL
- en: One cause for suspicion, however, is that the fit estimates a negative μ, which
    may suggest a Log-normal fit may not explain the data well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Heuristic 4: Taleb’s κ'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since I couldn’t find an off-the-shelf Python implementation for computing κ
    (I didn’t look very hard), this computation requires a few extra steps. Namely,
    we need to define 3 helper functions, as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The first function, *mean_abs_deviation(),* computes the mean absolute deviation
    as defined earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need a way to generate and sum *n* samples from our empirical data.
    Here, I take a naive approach and randomly sample an input array (X) *n* times
    and sum the samples together.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, I bring together *mean_abs_deviation(S)* and *generate_n_sample(X,n)*
    to implement the κ calculation defined before and compute it for each dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e9a0e3eec0eb8455d966fa603ee674c8.png)'
  prefs: []
  type: TYPE_IMG
- en: κ(1,100) values for each dataset. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: The results above give us yet another story. However, given the implicit randomness
    of this calculation (recall *generate_n_sample()* definition) and the fact we’re
    dealing with fat tails, point estimates (i.e. just running the computation once)
    cannot be trusted.
  prefs: []
  type: TYPE_NORMAL
- en: Accordingly, I run the same calculation 1000x and print the mean *κ(1,100)*
    for each dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3a6876630004a5b93d4e7621354d4920.png)'
  prefs: []
  type: TYPE_IMG
- en: Mean κ(1,100) values from 1000 runs for each dataset. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: These more stable results indicate Medium followers are the most fat-tailed,
    followed by LinkedIn Impressions and YouTube earnings.
  prefs: []
  type: TYPE_NORMAL
- en: '*Note: One can compare these values to Table III in ref [3] to better understand
    each κ value. Namely, these values are comparable to a Pareto distribution with
    α between 2 and 3.*'
  prefs: []
  type: TYPE_NORMAL
- en: Although each heuristic told a slightly different story, all signs point toward
    Medium followers gained being the most fat-tailed of the 3 datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While binary labeling data as fat-tailed (or not) may be tempting, fat-tailedness
    lives on a spectrum. Here, we broke down 4 heuristics for quantifying *how fat-tailed*
    data are.
  prefs: []
  type: TYPE_NORMAL
- en: Although each approach has its limitations, they provide practitioners with
    quantitative ways of comparing the fat-tailedness of empirical data.
  prefs: []
  type: TYPE_NORMAL
- en: '**👉 More on Power Laws & Fat Tails**: [Introduction](/pareto-power-laws-and-fat-tails-0355a187ee6a)
    | [Power Law Fits](/detecting-power-laws-in-real-world-data-with-python-b464190fade6)'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://shawhin.medium.com/subscribe?source=post_page-----10ce62c0ada1--------------------------------)
    [## Get FREE access to every new story I write'
  prefs: []
  type: TYPE_NORMAL
- en: Get FREE access to every new story I write P.S. I do not share your email with
    anyone By signing up, you will create a…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: shawhin.medium.com](https://shawhin.medium.com/subscribe?source=post_page-----10ce62c0ada1--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Connect**: [My website](https://shawhintalebi.com/) | [Book a call](https://calendly.com/shawhintalebi)
    | [Ask me anything](https://shawhintalebi.com/contact/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Socials**: [YouTube 🎥](https://www.youtube.com/channel/UCa9gErQ9AE5jT2DZLjXBIdA)
    | [LinkedIn](https://www.linkedin.com/in/shawhintalebi/) | [Twitter](https://twitter.com/ShawhinT)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Support**: [Buy me a coffee](https://www.buymeacoffee.com/shawhint) ☕️'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/the-data-entrepreneurs?source=post_page-----10ce62c0ada1--------------------------------)
    [## The Data Entrepreneurs'
  prefs: []
  type: TYPE_NORMAL
- en: A community for entrepreneurs in the data space. 👉 Join the Discord!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/the-data-entrepreneurs?source=post_page-----10ce62c0ada1--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '[1] [Scipy Kurtosis](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosis.html#scipy.stats.kurtosis)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] [Scipy Moment](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.moment.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] [arXiv:1802.05495](https://arxiv.org/abs/1802.05495) [stat.ME]'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] [https://en.wikipedia.org/wiki/Log-normal_distribution](https://en.wikipedia.org/wiki/Log-normal_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[5] Pham-Gia, T., & Hung, T. (2001). The mean and median absolute deviations.
    *Mathematical and Computer Modelling*, *34*(7–8), 921–936\. [https://doi.org/10.1016/S0895-7177(01)00109-1](https://doi.org/10.1016/S0895-7177(01)00109-1)'
  prefs: []
  type: TYPE_NORMAL
