["```py\nimport requests\n\ndef calculate_transaction_value(amount):\n    response = requests.get('https://api.exchangeratesapi.io/latest?base=USD&symbols=EUR')\n    exchange_rate = response.json()['rates']['EUR']\n    transaction_value = amount * exchange_rate\n    return transaction_value\n```", "```py\nimport os\nimport requests\n\ndef get_exchange_rate():\n    url = \"https://api.apilayer.com/exchangerates_data/latest?symbols=EUR&base=USD\"\n\n    payload = {}\n    headers = {\"apikey\": os.environ[\"API_KEY\"]}\n\n    response = requests.request(\"GET\", url, headers=headers, data=payload)\n    result = response.json()[\"rates\"][\"EUR\"]\n    return result\n\ndef calculate_transaction_value(exchange_rate, amount):\n    transaction_value = amount * exchange_rate\n    return transaction_value\n```", "```py\nexchange_rate = get_exchange_rate()\ntransaction_value = calculate_transaction_value(100, exchange_rate)\nprint(f'Transaction value in EUR: {transaction_value}')\n\n>> Transaction value in EUR: 93.71199999999999\n```", "```py\npip install pipe\n```", "```py\nimport os\nimport requests\nfrom pipe import Pipe\n\ndef get_exchange_rate():\n    url = \"https://api.apilayer.com/exchangerates_data/latest?symbols=EUR&base=USD\"\n\n    payload = {}\n    headers = {\"apikey\": os.environ[\"API_KEY\"]}\n\n    response = requests.request(\"GET\", url, headers=headers, data=payload)\n    result = response.json()[\"rates\"][\"EUR\"]\n    return result\n\n@Pipe\ndef calculate_transaction_value(exchange_rate, amount):\n    transaction_value = amount * exchange_rate\n    return transaction_value\n```", "```py\ntransaction_value = (\n    get_exchange_rate() \n    | calculate_transaction_value(100)\n)\n```", "```py\nsales_regional_lead_data = (\n    get_sales_leads(region=\"EMEA\")\n    | create_placeholder_dataframe(\n        years=3\n    )  # Create a dataset replicating each sales lead for 12 months x years\n    | merge_budgets_to_sales_leads(\n        get_project_budgets() | aggregate_project_budgets_to_sales_leads()\n    )\n    | merge_crm_data_to_sales_leads(\n        get_crm_data() | aggregate_crm_data_to_sales_leads()\n    )\n    | merge_invoice_data_to_sales_leads(\n        get_project_invoices() | aggregate_invoices_to_sales_leads()\n    )\n    | merge_work_in_progress_to_sales_leads(\n        get_project_work_in_progress() | aggregate_work_in_progress_to_sales_leads()\n    )\n    | recognize_partial_invoices(finished_pct_cutoff=.8)\n    | compute_sales_for_each_sales_lead()\n    | compute_delivery_for_each_sales_lead()\n    | compute_margin_for_each_sales_lead()\n    | compute_average_margin_for_each_sales_lead()\n    | compute_average_delivery_for_each_sales_lead()\n    | compute_average_sales_for_each_sales_lead()\n    | load_sales_leads_to_database(\n        db_config, table_name=\"sales_leads\", if_exists=\"append\"\n    )\n)\n```", "```py\nsales/\n├── __init__.py\n├── crm_data.py\n├── invoices.py\n├── budgets.py\n├── work_in_progress.py\n├── sales_leads.py\n├── matrices.py\n├── db.py\n```"]