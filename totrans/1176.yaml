- en: How to Enhance Your Visualizations with a Matplotlib Mosaic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-enhance-your-visualizations-with-matplotlib-mosaic-adcaf0008aa6](https://towardsdatascience.com/how-to-enhance-your-visualizations-with-matplotlib-mosaic-adcaf0008aa6)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: One of the coolest methods I have learned from Matplotlib
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://gustavorsantos.medium.com/?source=post_page-----adcaf0008aa6--------------------------------)[![Gustavo
    Santos](../Images/a19a9f4525cdeb6e7a76cd05246aa622.png)](https://gustavorsantos.medium.com/?source=post_page-----adcaf0008aa6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----adcaf0008aa6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----adcaf0008aa6--------------------------------)
    [Gustavo Santos](https://gustavorsantos.medium.com/?source=post_page-----adcaf0008aa6--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----adcaf0008aa6--------------------------------)
    ·5 min read·Jun 8, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6fa68ce84e5bfd42fc18ef09855c0ba9.png)'
  prefs: []
  type: TYPE_IMG
- en: Smile! Mosaic subplots are here! Image created by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data visualization is very important. We could develop a lot just from this
    sentence, but I believe you already got the “picture”. I am sure this is not the
    first time you hear this. And even if it is, I still assume it’s not a surprise,
    right?
  prefs: []
  type: TYPE_NORMAL
- en: A plot is worth a thousand observations.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If *an image is worth a thousand words,* I’d say that, for data science, *a
    plot is worth a thousand observations*.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, let’s move to what’s important here. The goal of this quick post is
    to show you the method `subplot_mosaic()`. This function is just amazing. Recently
    I was just browsing around and reading some Data Science related content when
    I saw it. I was just amazed by how easy it became to quickly create multiple plots
    in the same figure.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how it is done in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The data to be used will be the dataset *Tips*, native from Seaborn package
    in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Mosaic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before mosaic, there were other ways to create subplots. They are not difficult
    at all, but they are not as flexible as the `subplot_mosaic()` method. You can
    read the next post to know what I am talking about.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/plot-multiple-graphics-in-the-same-figure-using-python-1cbe5a23e89f?source=post_page-----adcaf0008aa6--------------------------------)
    [## Plot Multiple Graphics in the Same Figure Using Python'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to plot multiple graphics in the same matplotlib figure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/plot-multiple-graphics-in-the-same-figure-using-python-1cbe5a23e89f?source=post_page-----adcaf0008aa6--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'The great contribution that the mosaic method gives us is the flexibility to
    create many designs with very little code. Look at the next image: if we want
    to reproduce that in matplotlib now, we will use the mosaic function.'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we have 3 plots. **Plot A** will take one spot at the top left.
    **Plot B** will take one spot at the bottom left of the figure. **Plot C** will
    take two spots at top and bottom on the right-hand side. Thus, now, all we have
    to do is to translate that to Python, and you’ll see it’s really straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b4258bff75396fb8b6ae7a14ddf23d65.png)'
  prefs: []
  type: TYPE_IMG
- en: Mosaic to be created in matplotlib. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at the code. We start creating a figure and then a mosaic variable.
    The mosaic variable can take lists or strings. I think it is easier to use strings
    with triple quotes and “draw” with text exactly how it will look like in the final
    plot figure. Notice that the use of `ac bc` in the code is in the same order and
    shape as the previous figure. By repeating `c` twice on the right side, I am telling
    matplotlib that I want the plot C to take those two spots of the figure. The rest
    of the code is just regular graphic creation code.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at the variable `mosaic` , you will see this: `{‘a’: <Axes: label=’a’>,
    ‘c’: <Axes: label=’c’>, ‘b’: <Axes: label=’b’>}`. So, it creates a dictionary,
    and we just need to point where each graphic will go now.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here is the resulting visualization.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5ae8ac4d3ace6331890d1f68e15f38ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Mosaic plot resulting from the previous code. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Ok. I hope I got your attention already.
  prefs: []
  type: TYPE_NORMAL
- en: We can create different layouts. Check this out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0202910a94b094e3504c104ca7ded5c3.png)'
  prefs: []
  type: TYPE_IMG
- en: Mosaic plot resulting from the previous code. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Or yet, here’s another example with more graphics.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/312c1abee08d2fe959b9fa14af234261.png)'
  prefs: []
  type: TYPE_IMG
- en: Mosaic plot resulting from the previous code. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Titles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'But you might be asking yourself: *what about chart titles?*'
  prefs: []
  type: TYPE_NORMAL
- en: Good question, I’d say! Let’s learn how to place them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first option is the simplest: we can add a single title for the entire
    image with one additional line of code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8a6adfdbe148b180d8710e327973ec1c.png)'
  prefs: []
  type: TYPE_IMG
- en: Mosaic plot with a single title. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, we may want to add one title per plot. Ergo, let’s create a
    loop that goes over each axes and each titles in a list and match them one by
    one. If we call `mosaic.items()`, we will see that dictionary with tuples, just
    like shown before: `(‘a’, <Axes: label=’a’>)`. To set the title, we want to access
    the `Axes` portion — the second item in the tuple — , and that’s why we use `ax[1]`
    in the code snippet in the sequence.'
  prefs: []
  type: TYPE_NORMAL
- en: Here is how it can be done.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: And this is the result.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4a20ecc02d6f96e5c75fa0f25c47dcb4.png)'
  prefs: []
  type: TYPE_IMG
- en: Mosaic plot with a one title per plot. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Very nice, isn’t it?
  prefs: []
  type: TYPE_NORMAL
- en: Before You Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I believe plotting multiple graphics in a single figure can be helpful for comparison,
    for presentation purposes. And having a method that makes it easier makes a lot
    of difference.
  prefs: []
  type: TYPE_NORMAL
- en: Remember the steps
  prefs: []
  type: TYPE_NORMAL
- en: Create a figure
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a mosaic variable with `subplot_mosaic()` and use ‘‘‘triple quotes’’’
    to “draw” your mosaic. Write each graphic label as many times as needed to fill
    the spots in the mosaic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add titles with `plt.suptitle()` or with a loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s all.
  prefs: []
  type: TYPE_NORMAL
- en: If you liked this content, [follow me for more, here.](https://gustavorsantos.medium.com/)
  prefs: []
  type: TYPE_NORMAL
- en: Find me on [LinkedIn](https://www.linkedin.com/in/gurezende/) as well. And if
    you’re considering subscribing to Medium to read my posts and much more content,
    consider using this referral code, as you motivate me to keep creating content.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@gustavorsantos/membership?source=post_page-----adcaf0008aa6--------------------------------)
    [## Join Medium with my referral link - Gustavo Santos'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Gustavo Santos (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@gustavorsantos/membership?source=post_page-----adcaf0008aa6--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[## matplotlib.pyplot.subplot_mosaic - Matplotlib 3.7.1 documentation'
  prefs: []
  type: TYPE_NORMAL
- en: Build a layout of Axes based on ASCII art or nested lists. This is a helper
    function to build complex GridSpec layouts…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: matplotlib.org](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplot_mosaic.html?source=post_page-----adcaf0008aa6--------------------------------)
    [](https://matplotlib.org/stable/gallery/text_labels_and_annotations/label_subplots.html?source=post_page-----adcaf0008aa6--------------------------------#sphx-glr-gallery-text-labels-and-annotations-label-subplots-py)
    [## Labelling subplots - Matplotlib 3.7.1 documentation
  prefs: []
  type: TYPE_NORMAL
- en: Labelling subplots is relatively straightforward, and varies, so Matplotlib
    does not have a general method for doing…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: matplotlib.org](https://matplotlib.org/stable/gallery/text_labels_and_annotations/label_subplots.html?source=post_page-----adcaf0008aa6--------------------------------#sphx-glr-gallery-text-labels-and-annotations-label-subplots-py)
  prefs: []
  type: TYPE_NORMAL
