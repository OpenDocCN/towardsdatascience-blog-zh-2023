- en: Top 10 errors in R and how to fix them
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/top-10-errors-in-r-and-how-to-fix-them-e8848718c836](https://towardsdatascience.com/top-10-errors-in-r-and-how-to-fix-them-e8848718c836)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this post, I highlight the 10 most common errors in R and how to fix them.
    I also mention a couple of warnings (which are different than errors).
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://antoinesoetewey.medium.com/?source=post_page-----e8848718c836--------------------------------)[![Antoine
    Soetewey](../Images/51d7837d18ff15a62cac2343a485e35d.png)](https://antoinesoetewey.medium.com/?source=post_page-----e8848718c836--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e8848718c836--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e8848718c836--------------------------------)
    [Antoine Soetewey](https://antoinesoetewey.medium.com/?source=post_page-----e8848718c836--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e8848718c836--------------------------------)
    ·19 min read·Feb 7, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4de29e9b3b38890b3f696b925355bfba.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Kai Pilger](https://unsplash.com/@kaip?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are just starting with R, you will often encounter errors in your code
    which prevent it to run. I remember when I was just starting to use R, errors
    in my code were so frequent that I almost gave up learning this programming language.
    I even recall that I went back to Excel a few times to finish my analyses because
    I could not find what was causing the issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, I forced myself to continue despite the difficulties of the beginning.
    And today, even if I still encounter errors almost every time I write R code,
    with experience and practice, it takes less and less time to fix them. If you
    are also struggling at the beginning, rest assured, it is normal: everyone experiences
    some frustration when learning a new programming language (and this is the case
    not only with R).'
  prefs: []
  type: TYPE_NORMAL
- en: In this post, I highlight the **10 most common errors in R and how to fix them**.
    Of course, errors depend on your code and your analyses, so it is impossible to
    cover all of them (and Google does it way better than me). However, I would like
    to focus on some common syntax mistakes that are frequent when learning R, and
    which can sometimes take a long time to be fixed before realizing that the solution
    is right in front of our eyes.
  prefs: []
  type: TYPE_NORMAL
- en: This collection is based on my personal experience and the errors encountered
    by my students when I [teach](https://antoinesoetewey.com/teaching/) R. This list
    being non-exhaustive, feel free to comment (at the end of the post) with errors
    you often face when using R.
  prefs: []
  type: TYPE_NORMAL
- en: For each error, I provide examples and solutions to fix them. I also mention
    a couple of warnings (which are, strictly speaking, not errors) at the end of
    the post.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Unmatched parentheses, curly braces, square brackets or quotes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One rather trivial but still quite frequent error is a missing parenthesis,
    curly brace, square bracket or quotation mark.
  prefs: []
  type: TYPE_NORMAL
- en: 'This type of error is applicable to many programming languages. In R, for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: These errors are easy to detect when the code is basic, but can become much
    harder to spot with a more complex code, for instance:[1](https://statsandr.com/blog/top-10-errors-in-r/#fn1)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Thankfully, if you use RStudio,[2](https://statsandr.com/blog/top-10-errors-in-r/#fn2)
    a closing parenthesis, curly brace, square bracket or quotation mark will automatically
    be written when you open one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bear in mind that when installing a package, you *must* use (single or double)
    quotation marks around the package’s name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead, write one of the two following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The solution of course is to simply match all opening parentheses, curly braces,
    square brackets and quotation marks with their closing counterparts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, make sure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'to correctly place commas:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'you do not mix single and double quotation marks for the same element:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note that `c('Group 1', "Group 2")` does not throw an error but for consistency,
    it is not recommended to mix single and double quotes within the same vector.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Using a function that is not installed or loaded
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you encounter the following error: “Error in … : could not find function
    ‘…’”, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0ef20392d1313d4ac1c7f6440d0d0173.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: it means you are trying to use a function belonging to a package which is not
    yet installed or loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To solve this error, you have to install the package (if it is not installed
    yet) and load it with the `install.packages()` and `library()` functions, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: If you are not sure about the usage of these two functions, see more details
    about [installing and loading a package in R](https://statsandr.com/blog/an-efficient-way-to-install-and-load-r-packages/).
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Typos in function, variable, dataset, object or package names
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another common mistake is to misspell a function, a variable, a dataset, an
    object or a package’s name, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Make sure that you correctly spell all your functions, variables, datasets,
    objects and packages:'
  prefs: []
  type: TYPE_NORMAL
- en: Note that **R is case sensitive**; `mean()` is considered different than `Mean()`
    for R!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: If you are sure that you correctly spelled an object, a function or a dataset
    but you still have an error stating that “object ‘…’ is not found”, make sure
    that you defined your object/function/dataset *before* calling it!
  prefs: []
  type: TYPE_NORMAL
- en: It often happens that a student asks me to come to his/her computer because
    he/she runs the exact same code than me, but cannot make it work. Most of the
    time, if his/her code is indeed exactly the same than mine, he/she simply has
    not executed a object/function/dataset before running the code which includes
    that object/function/dataset. In other words, he/she simply tries to use an undefined
    object or variable.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that writing code in a R script (contrarily to the console) does not
    mean it is compiled. You actually have to run it (by clicking on the Run button
    or using the keyboard shortcut) in order the code to be executed and used later.
    If you are still struggling with this, see the [basics of R and RStudio](https://statsandr.com/blog/how-to-install-r-and-rstudio/).
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Missing, incorrect or misspelled arguments in functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most R functions require arguments. For example, the `rnorm()` function requires
    at least the number of observations, specified via the argument `n`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your code will not run if you do not specify compulsory arguments, or if incorrectly
    specify an argument. Moreover, the result might not be what you expect if you
    misspell an argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The last piece of code does not throw an error, but the result is not what we
    want.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To solve these errors, make sure to specify **at least all compulsory arguments**
    of the function, and the correct ones:'
  prefs: []
  type: TYPE_NORMAL
- en: In `rnorm()`, it is the standard deviation, `sd`, which can be specified in
    addition to the number of observations `n` (instead of the variance `var`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing `NA` is done with `na.rm` (instead of `narm`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'If you do not know the arguments of a function by heart, you can always check
    the documentation with `?function_name` or `help(function_name)`, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 5\. Wrong, inappropriate or inconsistent data types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several [data types in R](https://statsandr.com/blog/data-types-in-r/),
    the main ones being:'
  prefs: []
  type: TYPE_NORMAL
- en: Numeric
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Character
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Factor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logical
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You know that some operations and analyses are possible and appropriate only
    with some specific types of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, it is not appropriate to compute the [mean](https://statsandr.com/blog/descriptive-statistics-in-r/#mean)
    of a factor or character variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Likewise, although it is technically possible, it makes little sense to draw
    a [barplot](https://statsandr.com/blog/descriptive-statistics-in-r/#barplot) of
    a [quantitative continuous](https://statsandr.com/blog/variable-types-and-examples/)
    variable because in most cases, the frequency will be 1 for each value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1c3f7da05a76fa39d1cb11ac662a462e.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot by author
  prefs: []
  type: TYPE_NORMAL
- en: '*(By the way, if your data is not already displayed in the form of a table,
    do not forget to add* `*table()*` *inside the* `*barplot()*` *function.)*'
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure to use the appropriate operation and type of analysis depending on
    the variable(s) of interest.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: for factor variables, it is more appropriate to compute frequencies and/or relative
    frequencies, and draw barplots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for quantitative continuous variables, it is more appropriate to compute the
    mean, median, etc. and draw histograms, boxplots, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for logical variables, the mean,[3](https://statsandr.com/blog/top-10-errors-in-r/#fn3)
    a frequency table and a barplot are appropriate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for character variables, [word clouds](https://statsandr.com/blog/draw-a-word-cloud-with-a-shiny-app/)
    are the most appropriate (unless the variable can be considered as a factor variable
    because there are not too many different levels)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We now illustrate the examples in R:[4](https://statsandr.com/blog/top-10-errors-in-r/#fn4)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c5dc8c6ec5f0789de10055b6d4cb9dd0.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot by author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f8bdde4d4e8393d95c0daec1f0d122ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot by author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0239b95877a26e5064a2a75a2957bbc3.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot by author
  prefs: []
  type: TYPE_NORMAL
- en: For the interested reader, see the most common [descriptive statistics in R](https://statsandr.com/blog/descriptive-statistics-in-r/)
    for different types of data.
  prefs: []
  type: TYPE_NORMAL
- en: Note that, as for descriptive statistics, the choice of the statistical test
    depends on the variable’s type. See this [flowchart](https://statsandr.com/blog/what-statistical-test-should-i-do/)
    to help you in selecting the most appropriate statistical test depending on the
    number of variables and their types.
  prefs: []
  type: TYPE_NORMAL
- en: 'An error linked to the one mentioned above is **inconsistent** data type. See
    it in practice with the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, vector `x` is numerical, whereas vector `y` is in the form of
    character. This is due to the fact that the last element of `y` is surrounded
    with quotation marks (and thus considered as a string instead of a numerical value),
    so the entire vector takes the character form.
  prefs: []
  type: TYPE_NORMAL
- en: This can happen when you [import a dataset into R](https://statsandr.com/blog/how-to-import-an-excel-file-in-rstudio/)
    and one or several elements of a variable are not encoded correctly. This leads
    to the entire variable to be considered as a character variable by R.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this, it is a good practice to check the structure of your dataset
    (with `str()`) after importing it to make sure all your variables have the desired
    format. If not, you can either correct the values in the initial file or change
    the format in R (with `as.numeric()`).
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Forgetting the + sign in ggplot2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you just learned to use the [ggplot2 package](https://statsandr.com/blog/graphics-in-r-with-ggplot2/)
    for your visualizations (and I highly recommend it!), a common mistake is to forget
    the `+` sign.
  prefs: []
  type: TYPE_NORMAL
- en: 'You know that a visualization made with ggplot2 is constructed by adding several
    layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/78c5d04ba34a4a3945f71fd1711dd810.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot by author
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For all your graphics with ggplot2, do not forget to add a `**+**` **sign after
    each layer *except* the last one**.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Misunderstanding between = and ==
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Assignment in R can be done in three ways, from the most to the least common:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<-`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`=`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`assign()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second method, that is `=`, should not be confused with `==`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Indeed, assigning an object (with any of the three above methods) is used to
    save something in R. For example, if we want to save the vector `(1, 3, 7)` and
    rename that vector `x`, we can write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'When executing this piece of code, you will see that the vector `x` of size
    3 appears in the tab “Environment” (the top right panel if you use the default
    view of RStudio):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/28383f29ff75cb95aa0d13523ed68397.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'From now on, we can use that vector simply by calling it by its name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'By no means, you can assign an object with `==`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: So you are wondering, when would we need to use `==`? Actually, it is used when
    you want to use an equal sign.
  prefs: []
  type: TYPE_NORMAL
- en: 'I understand that it may be abstract and confusing at the moment, so let’s
    suppose the following two scenarios as examples (which are the two most common
    cases when we use `==`):'
  prefs: []
  type: TYPE_NORMAL
- en: we want to check whether an assigned object or variable respects some conditions,
    and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: we want to subset a dataframe based on one or several conditions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For these examples, suppose a [sample](https://statsandr.com/blog/what-is-the-difference-between-population-and-sample/)
    of 5 children:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now write different pieces of code for these two scenarios to illustrate
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to check whether the variable `Age` is equal to the vector `(1, 2,
    3, 4, 5)`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: With this code, we ask whether the first element of the variable `Age` is equal
    to 1, the second element of the variable `Age` is equal to 2, and so on. The answer
    is of course `FALSE`, `FALSE`, `TRUE`, `FALSE` and `FALSE` since only the third
    child has an age **equal** to 3 years.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to know which of our 5 sampled children are girls:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: The results show that the first, second and fifth children are girls, while
    the third and fourth children are not girls.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you write any of these two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: You actually overwrite the `Age` and `Gender` variables, such that our 5 children
    will have an age from 1 to 5 (1 year for the first child, up to 5 years for the
    fifth child) and all of them will be girls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now suppose we want to subset our dataframe based on a condition, namely, we
    want to extract only the children who are 7 years old:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'If you do not want to use the subset function, you can also use square brackets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the previous examples, we do not want to assign anything.
    Instead, we are asking “is this variable or vector *equal* to something else?”.
    For that specific need, we use `==`.
  prefs: []
  type: TYPE_NORMAL
- en: So to sum up, for technical reasons and in order to distinguish between the
    two concepts, R uses `=` for assignments, and `==` for the equality sign. Make
    sure to understand the difference between the two to avoid any errors.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Undefined columns selected
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are used to subset dataframes with square brackets, `[]`, instead of
    the `subset()` or `filter()` functions, you may have faced the error “Error in
    [.data.frame(…) : undefined columns selected”.'
  prefs: []
  type: TYPE_NORMAL
- en: This occurs when R does not understand the column you want to use while subsetting
    the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Considering the same sample of 5 children introduced earlier, the following
    code will throw an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: because it does not specify the column dimension.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Remember that dataframes in R have two dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: the rows (one for each experimental unit), and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the columns (one for each variable)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: and **in that particular order** (so row first, then column)!
  prefs: []
  type: TYPE_NORMAL
- en: Since dataframes have two dimensions, R expects two dimensions when you call
    `dat[]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In particular, it expects the first and then the second dimension, **separated
    by a comma**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: This code means that we are extracting all rows where `Age` is equal to 7 (first
    dimension, i.e. before the comma), for all variables of the dataset (since we
    did not specify any column after the comma).
  prefs: []
  type: TYPE_NORMAL
- en: For the interested reader, see more ways to [subset and manipulate data in R](https://statsandr.com/blog/data-manipulation-in-r/).
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Problem when importing or using the wrong data file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Importing a dataset in R can be quite challenging for beginners, mainly due
    to the misunderstanding about the working directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'When importing a file, **R will not search for the file in all your folders**
    of your computer. Instead, it will look only in one specific folder. If your dataset
    is not inside that folder, it will result in an error such as “cannot open file
    ‘…’: No such file or directory”:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f959e5fc295037cf47ed64a93656d374.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: To fix this, you must specify the path to the folder where your dataset is located.
    In other words, you need to tell R in which folder you want it to work, hence
    the name working directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting the working directory can be done with the `setwd()` function or via
    the “Files” tab in the lower right panel of RStudio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/683454af6a073198bd8fb4086918c495.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can move the dataset in the folder where R is currently working
    (this can be found with `getwd()`). See more details on [importing a file into
    R and about the working directory](https://statsandr.com/blog/how-to-import-an-excel-file-in-rstudio/).
  prefs: []
  type: TYPE_NORMAL
- en: Another related problem is to use the wrong file. This error is different than
    the previous ones in the sense that you will not encounter an error but your analyses
    will still be wrong.
  prefs: []
  type: TYPE_NORMAL
- en: It may sound trivial, but make sure to import and use the correct data file!
    This is particularly the case if you have files for different points in time and
    which have a common structure (for example weekly or monthly data files with the
    exact same variables). It happened to me that I reported results for the wrong
    week (fortunately, without much consequence).
  prefs: []
  type: TYPE_NORMAL
- en: Also, make sure that you actually use all the rows you want to include in your
    analyses. It happened to me that, in order to test a model (and avoid long computing
    times), I extracted a random sample of the original dataset, and almost forgot
    about this sampling when running my final analyses.
  prefs: []
  type: TYPE_NORMAL
- en: It is thus a good practice to remind you to remove sampling and filters after
    you have tested your code (and before interpreting the final results).
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Problem when using the $ operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the last error of this top 10, I would like to focus on two related errors:'
  prefs: []
  type: TYPE_NORMAL
- en: “$ operator is invalid for atomic vectors”, and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: “object of type ‘closure’ is not subsettable”.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I gather them in one single section because they are linked to each other in
    the sense that they both involve the `$` operator.
  prefs: []
  type: TYPE_NORMAL
- en: $ operator is invalid for atomic vectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand this error, we first must recall that an atomic vector is a *one*-dimensional
    object (usually created with `c()`). This is different than dataframes or matrices
    which are *two*-dimensional (i.e., rows form the first dimension and columns correspond
    to the second dimension).
  prefs: []
  type: TYPE_NORMAL
- en: 'The error “$ operator is invalid for atomic vectors” occurs when we try to
    access an element of an atomic vector using the dollar operator (`$`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `$` operator cannot be used to extract elements in atomic vectors. Instead,
    we must use double brackets `[[]]` notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember that the `$` operator can be used with dataframes, so we can also
    fix this error by first converting the atomic vector to a dataframe,[5](https://statsandr.com/blog/top-10-errors-in-r/#fn5)
    and then access an element by its name with the `$` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: object of type ‘closure’ is not subsettable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another error (which I must admit is quite obscure and confusing when learning
    R) is the following: “object of type ‘closure’ is not subsettable”.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This error occurs when we try to subset or access some elements of a function.
    An example with the well-known `mean()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'In R, we can subset lists, vectors, matrices, dataframes, but not functions.
    So it throws an error because it is impossible to subset an object of type “closure”,
    and a function is of that type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Most of the times, you will not encounter this error when using a basic function
    such as the `mean()` function (because it is unlikely that your goal is really
    to subset a function…).
  prefs: []
  type: TYPE_NORMAL
- en: Indeed, you will most likely face this error when trying to subset a dataset
    named `data`, but this dataset is not defined in the environment (because it has
    not been imported or created properly for instance).
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand the concept, see the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'So far so good. Now suppose we made a mistake when creating the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that a comma is missing between variables `x` and `y`. As a
    result, the dataset named `data` is not created and thus not defined.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, if we now try to access the variable `x` from that dataset `data`,
    R will actually try to subset the function named `data` instead of the dataset
    named `data`!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'This happens because, I repeat, the dataset `data` does not exist, so R looks
    for an object named `data` and find a function with that name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Warnings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Warnings are different than errors in the sense that they alert you about something,
    but it does not prevent you from running the code. It is a good practice to read
    these warnings as they may give you valuable information.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are too many warnings to mention them all, but I would like to focus
    on two common ones:'
  prefs: []
  type: TYPE_NORMAL
- en: “NAs introduced by coercion”, and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: “Removed … rows containing non-finite values (stat_bin())”.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NAs introduced by coercion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This warning occurs when you try to convert a vector which includes at least
    one non-numerical value to a numeric vector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: You do not need to fix it since it is only a warning and not an error. R is
    simply informing you that at least one element in the initial vector was converted
    to `NA` because it could not be converted to a numeric value.
  prefs: []
  type: TYPE_NORMAL
- en: Removed … rows containing non-finite values (stat_bin())
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This warning occurs when you use [ggplot2](https://statsandr.com/blog/graphics-in-r-with-ggplot2/)
    to draw plots. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c6461c98394cdf8333bd305dfb5644d7.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot by author
  prefs: []
  type: TYPE_NORMAL
- en: Again, as it is a warning you do not need to fix it. It is simply informing
    you that there are some missing values (`NA`) in the variable of interest and
    that these missing values are removed to construct the plot.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for reading. I hope that this collection of errors prevented you from
    making some coding mistakes, or that it helped you in debugging your code.
  prefs: []
  type: TYPE_NORMAL
- en: If you still cannot fix your error, I would recommend to read the documentation
    of the function (if you struggle with a function in particular), or look online
    for the solution. Bear in mind that if you encounter an error, it is very likely
    that someone else posted the answer online (Stack Overflow is usually a good resource).
  prefs: []
  type: TYPE_NORMAL
- en: R has a steep learning curve, in particular if you are not familiar with another
    programming language. Nonetheless, with practice and time, you will make less
    and less coding errors, but more importantly, you will be more and more proficient
    in typing the right keywords in search engines, resulting in less time spent looking
    for the solution.
  prefs: []
  type: TYPE_NORMAL
- en: As always, if you have a question or a suggestion related to the topic covered
    in this article, please add it as a comment so other readers can benefit from
    the discussion.
  prefs: []
  type: TYPE_NORMAL
- en: There are 2 mistakes in that piece of code, feel free to try to fix them as
    an exercise.[↩︎](https://statsandr.com/blog/top-10-errors-in-r/#fnref1)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And I strongly recommend using RStudio and not just R. See the differences [here](https://statsandr.com/blog/how-to-install-r-and-rstudio/).[↩︎](https://statsandr.com/blog/top-10-errors-in-r/#fnref2)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that `mean()` applied to a logical variable gives the proportion of `TRUE`.[↩︎](https://statsandr.com/blog/top-10-errors-in-r/#fnref3)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`par(mfrow = c(1, 2))` is used to put two plots next to each other.[↩︎](https://statsandr.com/blog/top-10-errors-in-r/#fnref4)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that we also need to take the transpose of the vector `x` in order to have
    it as 1 row, 3 columns.[↩︎](https://statsandr.com/blog/top-10-errors-in-r/#fnref5)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Related articles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[RStudio addins, or how to make your coding life easier?](https://statsandr.com/blog/rstudio-addins-or-how-to-make-your-coding-life-easier/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to keep yourself updated with the latest R news?](https://statsandr.com/blog/how-to-keep-up-to-date-with-the-latest-r-news/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[One-sample Wilcoxon test in R](https://statsandr.com/blog/one-sample-wilcoxon-test-in-r/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Hypothesis test by hand](https://statsandr.com/blog/hypothesis-test-by-hand/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ANOVA in R](https://statsandr.com/blog/anova-in-r/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Originally published at* [*https://statsandr.com*](https://statsandr.com/blog/top-10-errors-in-r/)
    *on February 7, 2023.*'
  prefs: []
  type: TYPE_NORMAL
