["```py\npip install nltk\n```", "```py\nimport nltk\nnltk.download('words')\n```", "```py\nimport spacy\nimport nltk\nfrom nltk.corpus import words\n\n# Load the English language model\nnlp = spacy.load(\"en_core_web_sm\")\n\ndef is_pangram(word, required_letter, given_letters):\n    word = word.lower()\n    if required_letter not in word:\n        return False\n    return all(l in word for l in given_letters)\n\ndef find_pangrams(word_list, required_letter, given_letters):\n    pangrams = set()\n    for word in word_list:\n        if is_pangram(word, required_letter, given_letters):\n            pangrams.add(word)\n    return pangrams\n\ndef main():\n    # Get the list of words from nltk\n    nltk_words = words.words()\n\n    # Define the required letter and other given letters\n    required_letter = 'i'\n    given_letters = ['a', 'd', 'e', 'm', 't', 'y', 'i']\n\n    # Find pangrams\n    pangrams = find_pangrams(nltk_words, required_letter, given_letters)\n    print(\"Pangrams found:\", pangrams)\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\n>>> pangrams\n{'diathermotherapy', 'pentamethylenediamine', 'absentmindedly', \n'undemonstratively', 'hypodermatically', 'bisdimethylamino', \n'endolymphatic', 'Polystomidae', 'metasedimentary', 'Methodistically', \n'thermodynamicist', 'vasoepididymostomy', 'animatedly', 'radiochemistry', \n'hydrometeorological', 'demisability', 'hydrometallurgically',\n'Mylodontidae', 'ektodynamorphic', 'detrimentally', 'Tetradynamia',\n'immoderately', 'Merycopotamidae', 'Hypsiprymnodontinae', 'lymphadenitis', \n'diaphanometry', 'Cyclostomatidae', 'Platystomidae', 'smithydander', \n'hydroatmospheric', 'hydropneumatic', 'condimentary', 'hydrometamorphism', 'pentadactylism', 'diathermacy', 'ventripyramid', 'acidometry', 'thermodynamist', 'improvidentially', 'methodically', 'diethylenediamine', 'aldermanity', 'hemidactylous', 'myxadenitis', 'Myliobatidae', 'demountability', 'diathermy', 'lymphangioendothelioma', 'unmitigatedly', 'Basidiomycetes', 'Hydrometridae', 'ectodactylism', 'thermoradiotherapy', 'predaytime', 'indemnificatory', 'Hemibasidiomycetes', 'dilemmatically', 'cardiometry', 'lymphadenectasia', 'misunderstandingly', 'diastematomyelia', \n```", "```py\nimport nltk\nfrom nltk.corpus import words\n\ndef is_pangram(word, required_letter, given_letters):\n    word = word.lower()\n    if required_letter not in word:\n        return False\n\n    for letter in word:\n        if letter not in given_letters:\n            return False\n    return all(l in word for l in given_letters)\n\ndef find_pangrams(word_list, required_letter, given_letters):\n    pangrams = set()\n    for word in word_list:\n        if is_pangram(word, required_letter, given_letters):\n            pangrams.add(word)\n    return pangrams\n\ndef main():\n    # Get the list of words from nltk\n    nltk_words = words.words()\n\n    # Define the required letter and other given letters\n    required_letter = 'i'\n    given_letters = ['a', 'd', 'e', 'm', 't', 'y', 'i']\n\n    # Find pangrams\n    pangrams = find_pangrams(nltk_words, required_letter, given_letters)\n    print(\"Pangrams found:\", pangrams)\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\n>>> pangrams\n{'didymate', 'daytime', 'Maytide'}\n```", "```py\ndef read_words_from_file(filename):\n    with open(filename, 'r') as f:\n        return [word.strip() for word in f.readlines()]\n\ndef is_pangram(word, required_letter, given_letters):\n    word = word.lower()\n    if len(word) < 4 or required_letter not in word:\n        return False\n\n    for letter in word:\n        if letter not in given_letters:\n            return False\n    return all(l in word for l in given_letters)\n\ndef find_pangrams(word_list, required_letter, given_letters):\n    pangrams = set()\n    for word in word_list:\n        if is_pangram(word, required_letter, given_letters):\n            pangrams.add(word)\n    return pangrams\n\ndef main():\n    # Get the list of words from the words.txt file\n    filename = 'words.txt'\n    word_list = read_words_from_file(filename)\n\n    # Define the required letter and other given letters\n    required_letter = 'c'\n    given_letters = ['c', 'd', 'e', 'n', 'l', 'o', 'w']\n\n    # Find pangrams\n    pangrams = find_pangrams(word_list, required_letter, given_letters)\n    print(\"Pangrams found:\", pangrams)\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\n% python3 pangram.py\nPangrams found: {'clowned'}\n```"]