- en: Visualising the RGB Channels of Satellite Images with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/visualising-the-rgb-channels-of-satellite-images-with-python-6d541af1f98d](https://towardsdatascience.com/visualising-the-rgb-channels-of-satellite-images-with-python-6d541af1f98d)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to deal with multiple spectral bands, large pixel values and skewed RGB
    channels when visualising satellite images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://conorosullyds.medium.com/?source=post_page-----6d541af1f98d--------------------------------)[![Conor
    O''Sullivan](../Images/2dc50a24edb12e843651d01ed48a3c3f.png)](https://conorosullyds.medium.com/?source=post_page-----6d541af1f98d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6d541af1f98d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6d541af1f98d--------------------------------)
    [Conor O''Sullivan](https://conorosullyds.medium.com/?source=post_page-----6d541af1f98d--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6d541af1f98d--------------------------------)
    ·6 min read·Apr 11, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a9459dc9abec413cf09d12e5685b4600.png)'
  prefs: []
  type: TYPE_IMG
- en: '(source: [SWED](https://openmldata.ukho.gov.uk/))'
  prefs: []
  type: TYPE_NORMAL
- en: 'Satellite images contain an abundance of information. The downside is that
    it is not straightforward to visualise them. The data differs from normal images
    as they can have:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Over 12 channels**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Large pixel values**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Skewed pixel values**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will discuss these key considerations. We then factor them into a Python
    function that will give you flexibility when combining the RGB channels. Specifically,
    it allows you to adjust the **brightness** and **hue** of your images. The code
    is given and you can find the full project on [GitHub](https://github.com/conorosully/medium-articles/blob/master/src/remote%20sensing/visualise_rgb_bands.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: Imports and Dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our first import is the [Geospatial Data Abstraction Library](https://gdal.org/index.html)
    (gdal). This can be useful when working with remote sensing data. We also have
    more standard Python packages (lines 4–5). Finally, glob is used to handle file
    paths (line 7).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will be visualising images from the test set [**Sentinel-2 waters edge dataset**](https://openmldata.ukho.gov.uk/#:~:text=Sentinel%2D2%20Water%20Edges%20Dataset%20contains%20pairs%20of%20images%20and,non%2Dwater%20(0).)
    **(**SWED). This contains 98 images of coastlines from 49 locations. We load all
    the paths to these images below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Key considerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Number of spectral bands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We load the first image (line 2) and output its shape (line 3). This gives us
    a value of **(12,256,256)**. In other words, each image consists of 12 channels
    of 256x256 pixels. If this was a normal image, we would expect dimensions of (256,256,3).
    That is each pixel has 3 channels — RGB.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The 12 channels are the [sentinel-2 spectral bands](https://en.wikipedia.org/wiki/Sentinel-2).
    Each band is a measurement of a different wavelength of electromagnetic radiation
    reflected off the Earth’s surface. This includes infrared light that humans cannot
    see. When visualising the images, we are only interested in the visible light
    bands.
  prefs: []
  type: TYPE_NORMAL
- en: For our particular image, the visible light bands are found in positions 3 (red),
    2 (green) and 1 (blue). We select these below. We also transpose the array so
    it has dimensions (256,256,3).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Large pixel values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To capture as much detail as possible, satellite images have a large dynamic
    range. As a result, pixel values do not fall into the typical range of [0, 255].
    For our image, printing out the min and max pixel values gives us **150 and 8,600**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The sentinel-2 images have a [maximum reflectance value of 10000](https://docs.digitalearthafrica.org/en/latest/data_specs/Sentinel-2_Level-2A_specs.html).
    Although pixels can occasionally have values higher than this, we can ignore these
    large values when visualising the RGB channels. So, we scale images by dividing
    by 10000 and clipping them between 0 and 1\. This ensures all pixel values will
    be between 0 and 1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Skewed pixel values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can now display our satellite image using matplotlib (line 2). You will notice
    the image has a low brightness/contrast. This is typical when displaying RGB channels.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6d85bfd0a6d45f966e09c88d0ff0bbdf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: RGB channels with low brightness (source: author) (dataset: [SWED](https://openmldata.ukho.gov.uk/))'
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned, the dynamic range of satellite images is large. This is so they
    can capture a wider range of pixels — from very bright to very dark. The result
    is that pixels tend to be **skewed** towards lower values. You can see this in
    the histograms below. These give the pixel frequencies for the RGB channels of
    the above image.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/323998d6874fb3dfcedaf963bbe611d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: skewed pixel values of RGB channels of a satellite image (source:
    author)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: A simple approach to getting better images is to clip the range of pixel values
    for each channel (line 2). We take only the pixel values from 0 to 0.3 and scale
    them back to between 0 and 1\. In **Figure 3**, you can see the resulting image
    is brighter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/aa25879f9e7c50adc4354673c1c06cf9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: RGB channels with high brightness (source: author) (dataset: [SWED](https://openmldata.ukho.gov.uk/))'
  prefs: []
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a quick visualisation, the above is all you will need. If you want more
    control over the process, you can use the function below. This will scale the
    image, select the RGB channels and clip each channel using a different cutoff.
    There is also a display option that will output the RGB histograms with the selected
    cutoffs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You can see this function in action below. In this case, we clip each channel
    using a cutoff of 0.3\. **Figure 4** shows the histograms with these cutoffs and
    the resulting RGB image. This can be useful when experimenting with different
    cutoffs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f9191c468a14cf31b9606b32ddc747b8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: output of RGB channel visualisation function (source: author) (dataset:
    [SWED](https://openmldata.ukho.gov.uk/))'
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting brightness
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Different images will have different optimal cutoffs. In fact, the cover image
    of this article was created using 3 different values. The function above makes
    it easy to adjust them. In **Figure 5**, you can see how adjusting the cutoffs
    will change the brightness.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3d4fdafd766f52c64206c1596d624360.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: adjusting the brightness of satellite images (source: author) (dataset:
    [SWED](https://openmldata.ukho.gov.uk/))'
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting colour (hue)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It also gives you more control over each colour channel. As seen in **Figure
    6**, if we reduce the cutoff for a given channel that colour will become more
    prominent. This can help you fine-tune your visualisations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/da5e907aeef03f274c57ed12c9206cc0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: adjusting the colour of satellite images (source: author) (dataset:
    [SWED](https://openmldata.ukho.gov.uk/))'
  prefs: []
  type: TYPE_NORMAL
- en: When working with remoting sensing data is often important to visualise your
    images. It will allow you to build intuition around your problem. Perhaps even
    more important, you can create beautiful images used to explain your work to others.
    The function above will allow you to create the most eye-catching images possible.
    Keep in mind, you may need to adapt it to your satellite image dataset.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you enjoyed this article! You can support me by becoming one of my [**referred
    members**](https://conorosullyds.medium.com/membership) **:)**
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://conorosullyds.medium.com/membership?source=post_page-----6d541af1f98d--------------------------------)
    [## Join Medium with my referral link — Conor O’Sullivan'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: conorosullyds.medium.com](https://conorosullyds.medium.com/membership?source=post_page-----6d541af1f98d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '| [Twitter](https://twitter.com/conorosullyDS) | [YouTube](https://www.youtube.com/channel/UChsoWqJbEjBwrn00Zvghi4w)
    | [Newsletter](https://mailchi.mp/aa82a5ce1dc0/signup) — sign up for FREE access
    to a [Python SHAP course](https://adataodyssey.com/courses/shap-with-python/)'
  prefs: []
  type: TYPE_NORMAL
- en: Dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Sentinel-2 waters edge dataset** (SWED) (licence: [Sentinel Data Legal Notice](https://sentinel.esa.int/documents/247904/690755/Sentinel_Data_Legal_Notice))
    [https://openmldata.ukho.gov.uk/](https://openmldata.ukho.gov.uk/)'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GISGeography, **Sentinel 2 Bands and Combinations** (2022),[https://gisgeography.com/sentinel-2-bands-combinations/](https://gisgeography.com/sentinel-2-bands-combinations/)
  prefs: []
  type: TYPE_NORMAL
- en: Csaba, **Creating Sentinel-2 RGB composite images in Python** (2021), [https://www.satmapper.hu/en/rgb-images/](https://www.satmapper.hu/en/rgb-images/)
  prefs: []
  type: TYPE_NORMAL
