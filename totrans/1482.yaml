- en: 'Mastering Containerization: A Guide to Creating Docker-Like Environments without
    Docker'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/mastering-containerization-a-guide-to-creating-docker-like-environments-without-docker-121b3f444d2f](https://towardsdatascience.com/mastering-containerization-a-guide-to-creating-docker-like-environments-without-docker-121b3f444d2f)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Unlocking the power of containerization: A step-by-step tutorial on building
    container-like environments.'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://dpoulopoulos.medium.com/?source=post_page-----121b3f444d2f--------------------------------)[![Dimitris
    Poulopoulos](../Images/ce535a1679779f5a2ec8b024e6691e50.png)](https://dpoulopoulos.medium.com/?source=post_page-----121b3f444d2f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----121b3f444d2f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----121b3f444d2f--------------------------------)
    [Dimitris Poulopoulos](https://dpoulopoulos.medium.com/?source=post_page-----121b3f444d2f--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----121b3f444d2f--------------------------------)
    ·6 min read·Feb 4, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8974063124ae85ec620839fea9da5396.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Timelab Pro](https://unsplash.com/it/@timelabpro?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Containers have revolutionized how we deploy and manage applications, providing
    unparalleled levels of portability, scalability, and consistency.
  prefs: []
  type: TYPE_NORMAL
- en: However, you shouldn’t be intimidated by Docker’s sleek exterior — it’s time
    to delve into the mechanics that make containerization possible. By understanding
    the inner workings of Docker, you’ll gain a deeper appreciation for the technology
    and a broader understanding of your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: The last three articles in this series pave the way. We discussed Namespace,
    Control Groups (cgroups), and overlay file systems. These are the building blocks
    we use today to create our own container-like environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/containers-how-they-work-under-the-hood-and-why-theyre-taking-over-the-data-science-world-6b94702609aa?source=post_page-----121b3f444d2f--------------------------------)
    [## Containers: How They Work Under the Hood and Why They’re Taking Over the Data
    Science World'
  prefs: []
  type: TYPE_NORMAL
- en: A Beginner’s Guide to Understanding the Magic of Docker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'towardsdatascience.com](/containers-how-they-work-under-the-hood-and-why-theyre-taking-over-the-data-science-world-6b94702609aa?source=post_page-----121b3f444d2f--------------------------------)
    [](/the-power-of-linux-cgroups-how-containers-take-control-of-their-resources-ba564fef13b0?source=post_page-----121b3f444d2f--------------------------------)
    [## The Power of Linux Cgroups: How Containers Take Control of Their Resources'
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing Container Resource Allocation with Linux Control Groups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/the-power-of-linux-cgroups-how-containers-take-control-of-their-resources-ba564fef13b0?source=post_page-----121b3f444d2f--------------------------------)
    [](/exploring-the-power-of-overlay-file-systems-in-linux-containers-d846724ec06d?source=post_page-----121b3f444d2f--------------------------------)
    [## Exploring the Power of Overlay File Systems in Linux Containers
  prefs: []
  type: TYPE_NORMAL
- en: Unlocking the Potential of Containerization with a unique yet simple idea of
    layering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/exploring-the-power-of-overlay-file-systems-in-linux-containers-d846724ec06d?source=post_page-----121b3f444d2f--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: This educational blog post will guide you through building lightweight, isolated
    environments without relying on Docker. You won’t be able to replace Docker just
    yet! This is only for educational purposes. Docker offers much more than creating
    containers. However, the journey is what matters.
  prefs: []
  type: TYPE_NORMAL
- en: Are you ready to unlock the secrets of your OS and take your understanding of
    containerization to the next level? Buckle up, grab a cup of coffee, and dive
    into the exciting world of containerization without Docker!
  prefs: []
  type: TYPE_NORMAL
- en: '[Learning Rate](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=dockerless)
    is a newsletter for those who are curious about the world of MLOps. MLOps is a
    broad field that strives to bring ML models to production in an efficient and
    rerpoducible way. Containers play a crucial role in the pipeline. If you want
    to learn more about topics like this subscribe [here](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=dockerless).
    You’ll hear from me on the last Saturday of every month with updates and thoughts
    on the latest MLOps news and articles!'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A Quick Recap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we’ll dive headfirst into the exciting world of containers.
    In five minutes, you should be able to run your own Linux distribution in a container-like
    environment you’ve built yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we said in the foreword, we have already examined the primitives we’ll use
    today. But for completeness'' sake, here’s a quick recap:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Namespaces: Namespaces are kernel features that allow you to create isolated
    environments within a single Linux system. Each namespace has its own view of
    the system, meaning that processes within a namespace are unaware of the processes
    running in other namespaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Control Groups: Linux control groups, or cgroups, is a kernel feature that
    allows an administrator to allocate resources such as CPU, memory, and I/O bandwidth
    to groups of processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Overlay File Systems: Overlay file systems enable multiple lower layers to
    be stacked on top of each other, creating a unified view of the data. In the context
    of Linux containers, an overlay file system is used to layer the changes made
    by a container on top of a base image while preserving the original image intact.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, now that we know what each of the tools we’ll use do, let’s put them to
    work.
  prefs: []
  type: TYPE_NORMAL
- en: Headfirst
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Coming in somewhere between 1 and 5 Mb in on-disk size (depending on the variant),
    BusyBox is a very good ingredient to craft space-efficient distributions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a BusyBox container, you’d normally run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This command would give you a shell inside a BusyBox container. We will try
    to achieve something similar today without running the `docker run` command.
  prefs: []
  type: TYPE_NORMAL
- en: So, first things first, let’s download the image. For this, we’ll use a tool
    called [Skopeo](https://github.com/containers/skopeo). This series of articles
    is all about containers; thus, let’s use their might to download the image we
    want without installing Skopeo.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a directory named `busybox-image` anywhere you like, and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output you should see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f2dfa263c25b982a20912d0c6e18971e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'This command will give the directory you created as a volume in the Skopeo
    container. Then, it will instruct the container to download the BusyBox image
    in the directory. Thus, if you now run an `ls` command, you will be able to see
    the downloaded image in the directory you created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1719edf61cbc32bf0c61e7d3a2ec95e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll see a bunch of files there. What we care about is the largest file in
    size. Let’s untar it in a new directory. First, create a new directory and `cd`
    into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now untar the image inside the `busybox` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the`ls` command again; you’ll see the root file system of the BusyBox image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/457463c187912d732281046f3f3878d0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to the parent directory and create three new ones: an `upper` directory,
    a `workdir`, and a `root`. We have covered what these are in the post about overlay
    file systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s create our overlay file system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Great! Now, if you run `ls -la root`, you should be able to see the contents
    of the BusyBox image inside the `root` directory you created. As we saw in the
    overlay file system tutorial, the `root` directory provides a unified view of
    the `lower` and `upper` directories. However, the `lower` directory remains read-only,
    and any changes you make will be recorded in the `upper` directory. This will
    keep our `busybox` base image intact.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let’s create our container-like environment using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'That’s it! You did it! Let’s run `uname -r` to verify that we’re in a BusyBox
    container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4b536f17541d1b7cf589ca23928732a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'You can even run a well-known command like `ping` and observe that you just
    called the BusyBox version of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/27e6728b405cd03040828bcb2fde0499.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Now, there are a lot of things missing. For example, you have no access to the
    internet. Running `ping` or `wget` will have no result. But that’s for another
    time. As we said, this won’t be a production-ready environment but an effort to
    demystify a few things that Docker does.
  prefs: []
  type: TYPE_NORMAL
- en: If you’d like to constrain the resource consumption of your container toy, look
    into the Control Groups article linked in the introduction. It’s easier than you
    think.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In conclusion, creating a container-like environment without Docker is a valuable
    skill for any developer. Whether you’re looking to explore alternative technologies,
    address compatibility issues, or simply broaden your understanding of containerization,
    the techniques and tools covered in this article will help you achieve your goals.
  prefs: []
  type: TYPE_NORMAL
- en: By following this step-by-step tutorial, you can build your own lightweight,
    isolated environments confidently and easily. Will it work? Not yet! Hang in there
    until the next article!
  prefs: []
  type: TYPE_NORMAL
- en: Remember, containerization is a constantly evolving field, and there’s always
    more to learn. So, keep exploring, experimenting, and pushing the limits of what’s
    possible!
  prefs: []
  type: TYPE_NORMAL
- en: About the Author
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: My name is [Dimitris Poulopoulos](https://www.dimpo.me/?utm_source=medium&utm_medium=article&utm_campaign=dockerless),
    and I’m a machine learning engineer working for [Arrikto](https://www.arrikto.com/).
    I have designed and implemented AI and software solutions for major clients such
    as the European Commission, Eurostat, IMF, the European Central Bank, OECD, and
    IKEA.
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in reading more posts about Machine Learning, Deep Learning,
    Data Science, and DataOps, follow me on [Medium](https://towardsdatascience.com/medium.com/@dpoulopoulos/follow),
    [LinkedIn](https://www.linkedin.com/in/dpoulopoulos/), or [@james2pl](https://twitter.com/james2pl)
    on Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: Opinions expressed are solely my own and do not express the views or opinions
    of my employer.
  prefs: []
  type: TYPE_NORMAL
