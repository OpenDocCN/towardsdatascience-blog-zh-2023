["```py\nimport requests\nmicrosoft_api_url = 'https://api.cognitive.microsofttranslator.com/languages?api-version=3.0'\nresp = requests.get(microsoft_api_url)\nprint(resp.json())\n```", "```py\nimport requests\nbody = [{\"text\": \"First sentence I want to translate\"}, {\"text\": \"Second sentence I want to translate\"}]\napi_version = \"3.0\"\ngerman_iso_code = 'de'\narabic_iso_code = 'ar'\nendpoint = 'translate'\n\nurl = f'https://api.cognitive.microsofttranslator.com/{endpoint}?api-version={api_version}&to={german_iso_code}&to={arabic_iso_code}'\n\nresp = requests.post(url, json=body)\n```", "```py\n # code as before, new additions enclosed in ------\n\nimport requests\nbody = [{\"text\": \"First sentence I want to translate\"}, {\"text\": \"Second sentence I want to translate\"}]\napi_version = \"3.0\"\ngerman_iso_code = 'de'\narabic_iso_code = 'ar'\nendpoint = 'translate'\n\n### -----------------------------------------------------\nimport uuid\n\n# YOUR PROJECT CREDENTIALS\nyour_key = \"your_key_keep_this_a_secret\"\nyour_project_location = \"your_project_location\"\n\n# headers\nheaders = {\n  'Ocp-Apim-Subscription-Key': your_key,\n  'Ocp-Apim-Subscription-Region': your_project_location,\n  # default values\n  'Content-type': 'application/json',\n  'X-ClientTraceId': str(uuid.uuid4())\n}\n### -----------------------------------------------------\n\nurl = f'https://api.cognitive.microsofttranslator.com/{endpoint}?api-version={api_version}&to={german_iso_code}&to={arabic_iso_code}'\n\nresp = requests.post(\n  url,\n  headers=headers,  # add the headers\n  json=body\n)\n```", "```py\nimport os\n\nMICROSOFT_TRANSLATE_API_KEY = os.environ.get('MICROSOFT_TRANSLATE_API_KEY', 'default_key')\n```", "```py\npython -c \"from package_name.external_apis.config import MICROSOFT_TRANSLATE_API_KEY; print(MICROSOFT_TRANSLATE_API_KEY)\"\n\nexport MICROSOFT_TRANSLATE_API_KEY=\"your_actual_key\"\n\npython -c \"from package_name.external_apis.config import MICROSOFT_TRANSLATE_API_KEY; print(MICROSOFT_TRANSLATE_API_KEY)\"\n```", "```py\nimport os\n\nclass Password:\n  def __init__(self, password):\n    self.__password = password\n\n  def get_password():\n    return self.__password\n\nMICROSOFT_TRANSLATE_API_KEY_CLASS = Password(os.environ.get('MICROSOFT_TRANSLATE_API_KEY', 'default_key'))\n\nprint(MICROSOFT_TRANSLATE_API_KEY_CLASS.get_password())  # prints password\nprint(MICROSOFT_TRANSLATE_API_KEY_CLASS.password)  # error\nprint(MICROSOFT_TRANSLATE_API_KEY_CLASS.__password)  # error\n```", "```py\n\"\"\"\nconfig.py file\n\"\"\"\nimport os\n\n# MICROSOFT API CONFIGS\nMICROSOFT_TRANSLATE_URL = 'https://api.cognitive.microsofttranslator.com'\nMICROSOFT_TRANSLATE_LOCATION = os.environ.get('MICROSOFT_TRANSLATE_LOCATION', 'default_location')\nMICROSOFT_TRANSLATE_API_KEY = os.environ.get('MICROSOFT_TRANSLATE_API_KEY', 'default_key')\n```", "```py\n\"\"\"\nmicrosoft.py file\n\"\"\"\n\nimport uuid\nfrom package_name.external_apis.config import (\n  MICROSOFT_TRANSLATE_URL,\n  MICROSOFT_TRANSLATE_LOCATION,\n  MICROSOFT_TRANSLATE_API_KEY\n)\n\n# -- prepare headers\nHEADERS = {\n  'Ocp-Apim-Subscription-Key': MICROSOFT_TRANSLATE_API_KEY,\n  'Ocp-Apim-Subscription-Region': MICROSOFT_TRANSLATE_LOCATION,\n  'Content-type': 'application/json',\n  'X-ClientTraceId': str(uuid.uuid4())\n}\n\n# -- utils\ndef _is_response_valid(status_code):\n    if str(status_code).startswith('2'):\n        return True\n\n# -- functions for endpoints\n\n# /languages endpoint\ndef get_languages(api_version='3.0'):\n\n    # prepare url\n    url = f'{MICROSOFT_TRANSLATE_URL}/languages?api-version={api_version}'\n\n    # send request and process outputs\n    resp = requests.get(url)\n    status_code = resp.status_code\n    if _is_response_valid(status_code):\n        return resp.json(), status_code\n\n    return resp.text, status_code\n\n# /translate endpoint\ndef translate_text(text, target_language, source_language=None, api_version='3.0'):\n\n    # send request and process outputs\n    url = f'{MICROSOFT_TRANSLATE_URL}/translate?api-version={api_version}'\n\n    # standardise target language type\n    if isinstance(target_language, str):\n        target_language = [target_language]\n\n    # dynamically add array parameter to url\n    for lang in target_language:\n        url = f'{url}&to={lang}'\n\n    if source_language:\n        url = f'{url}&from={source_language}'\n\n    # standardise text type\n    if isinstance(text, str):\n        text = [text]\n\n    # dynamically build the request body\n    body = [{'text': text_} for text_ in text]\n\n    # send request and process outputs\n    resp = requests.post(url, headers=HEADERS, json=body)\n    status_code = resp.status_code\n\n    if _is_response_valid(status_code)\n        return resp.json(), status_code\n\n    return resp.text, status_code\n```", "```py\n\"\"\"\nmicrosoft.py file\n\"\"\"\n\nimport uuid\nimport logging\nfrom package_name.external_apis.config import (\n  MICROSOFT_TRANSLATE_URL,\n  MICROSOFT_TRANSLATE_LOCATION,\n  MICROSOFT_TRANSLATE_API_KEY\n)\n\n# imports for typing annotations\nfrom typing import Optional, Union, List\n\n# -- configure logger. Taken from official python docs\nLOGGER = logging.getLogger(__name__)\nLOGGER.setLevel(logging.DEBUG)\nch = logging.StreamHandler()\nch.setLevel(logging.DEBUG)\ndate_format = '%Y-%m-%d %H:%M:%S'\nformatter = logging.Formatter('%(asctime)s:%(name)s:%(levelname)s:%(message)s', datefmt=date_format)\nch.setFormatter(formatter)\nLOGGER.addHandler(ch)\n\n# -- prepare headers\nHEADERS = {\n  'Ocp-Apim-Subscription-Key': MICROSOFT_TRANSLATE_API_KEY,\n  'Ocp-Apim-Subscription-Region': MICROSOFT_TRANSLATE_LOCATION,\n  'Content-type': 'application/json',\n  'X-ClientTraceId': str(uuid.uuid4())\n}\n\n# -- utils\ndef _is_response_valid(status_code: int) -> Optional[bool]:\n    \"\"\" Function to check response is valid or not\n\n    :param status_code: status code from response\n    :returns: True if valid response, None otherwise\n    \"\"\"\n    if str(status_code).startswith('2'):\n        return True\n\n# -- functions for endpoints\n\n# /languages endpoint\ndef get_languages(api_version: str = '3.0') -> tuple:\n    \"\"\" get languages available from API for specific version\n\n    :param api_version: version of API to use\n    :returns: (available languages, status_code)\n\n    \"\"\"\n    # prepare url\n    url = f'{MICROSOFT_TRANSLATE_URL}/languages?api-version={api_version}'\n\n    # send request and process outputs\n    LOGGER.info(f'Getting languages available on api_version={api_version}')\n    resp = requests.get(url)\n    status_code = resp.status_code\n    if _is_response_valid(status_code):\n        return resp.json(), status_code\n\n    LOGGER.error('Failed to get languages')\n    return resp.text, status_code\n\n# /translate endpoint\ndef translate_text(text: Union[str, List[str]], target_language: Union[str, List[str]], source_language: Optional[str] = None, api_version: str = '3.0') -> tuple:\n    \"\"\"translates txt using the microsoft translate API\n\n    :param text: text to be translated. Either single or multiple (stored in a list)\n    :param target_language: ISO format of target translation languages\n    :param source_language: ISO format of source language. If not provided is inferred by the translator, defaults to None\n    :param api_version: api version to use, defaults to \"3.0\"\n    :return: for successful response, (status_code, [{\"translations\": [{\"text\": translated_text_1, \"to\": lang_1}, ...]}, ...]))        \n    \"\"\"\n    # send request and process outputs\n    url = f'{MICROSOFT_TRANSLATE_URL}/translate?api-version={api_version}'\n\n    # standardise target language type\n    if isinstance(target_language, str):\n        target_language = [target_language]\n\n    # dynamically add array parameter to url\n    for lang in target_language:\n        url = f'{url}&to={lang}'\n\n    if source_language:\n        url = f'{url}&from={source_language}'\n\n    # standardise text type\n    if isinstance(text, str):\n        text = [text]\n\n    # dynamically build the request body\n    body = [{'text': text_} for text_ in text]\n\n    LOGGER.info(f'Translating {len(text)} texts to {len(target_language)} languages')\n    # send request and process outputs\n    resp = requests.post(url, headers=HEADERS, json=body)\n    status_code = resp.status_code\n\n    if _is_response_valid(status_code)\n        return resp.json(), status_code\n    LOGGER.error('Failed to translate texts')\n    return resp.text, status_code\n```", "```py\nexport MICROSOFT_API_CREDENTIALS_JUPYTER='my_key'\njupyter notebook\n```", "```py\n%%capture\nimport os\nimport json\nfrom dotenv import load_dotenv\nload_dotenv() # loads key values pairs into env\nMICROSOFT_TRANSLATE_API_KEY = os.environ.get('MICROSOFT_TRANSLATE_API_KEY_JUPYTER')\n%set_env MICROSOFT_TRANSLATE_API_KEY=$MICROSOFT_TRANSLATE_API_KEY\n```"]