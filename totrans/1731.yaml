- en: Python on the Web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/python-on-the-web-b819a6a55ec7](https://towardsdatascience.com/python-on-the-web-b819a6a55ec7)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Showcasing Python applications on the web without any server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://pierpaoloippolito28.medium.com/?source=post_page-----b819a6a55ec7--------------------------------)[![Pier
    Paolo Ippolito](../Images/981abb84149adab275473b76bdbde66f.png)](https://pierpaoloippolito28.medium.com/?source=post_page-----b819a6a55ec7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b819a6a55ec7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b819a6a55ec7--------------------------------)
    [Pier Paolo Ippolito](https://pierpaoloippolito28.medium.com/?source=post_page-----b819a6a55ec7--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b819a6a55ec7--------------------------------)
    ·9 min read·Oct 11, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/318b3a5fe6458ff8549c4a678f90e7c6.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Ales Nesetril](https://unsplash.com/@alesnesetril?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using [popular Python visualization libraries](/interactive-data-visualization-167ae26016e8)
    it can be relatively straightforward to create locally charts and dashboards of
    different forms. Although, it can be much more complicated to share your results
    with other people on the web.
  prefs: []
  type: TYPE_NORMAL
- en: One possible approach to do this is using libraries such as Streamlit, [Flask](/flask-and-heroku-for-online-machine-learning-deployment-425beb54a274),
    [Plotly Dash](/interactive-dashboards-for-data-science-51aa038279e5) and paying
    for a web hosting service to cover the server side and run your Python scripts
    to show on the webpage. Alternatively, some providers like [Plotly Chart or Datapane
    provide also free cloud support](/embedding-interactive-python-plots-on-the-web-84ceab57e417)
    for you to upload your Python visualizations and then embed them on the web. In
    both scenarios, you would be able to achieve anything you need if you have a small
    budget for your project, but there is any way we could achieve similar results
    for free?
  prefs: []
  type: TYPE_NORMAL
- en: 'As part of this article, we are going to explore 3 possible approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Panel by Holoviz](https://panel.holoviz.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Shiny for Python](https://shiny.posit.co/py/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PyScript](https://pyscript.net/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to showcase each of these 3 approaches, we are going to create a simple
    application to explore historical inflation data from all over the world. In order
    to do so, we are going to use [The World Bank Gloabal Database of Inflation](https://www.worldbank.org/en/research/brief/inflation-database)
    all information about licensing for the data can be found at [this link](https://datacatalog.worldbank.org/public-licenses)
    [1].
  prefs: []
  type: TYPE_NORMAL
- en: Once downloaded the data, we can then use the following pre-processing function
    in order to better shape the dataset for visualization and import just the 3 Excel
    Sheets we are going to use as part of the analysis (overall inflation data, inflation
    for food and energy prices).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Each dataset will then have a date index with a row for each year and a column
    for each of the different countries with their respective inflation percentage
    values (Figure 1).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f811c1a1abd52a2611b57a5f64250a92.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Overall Inflation Dataset (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: All the code used as part of this project can be freely accessed on my [GitHub
    profile](https://github.com/pierpaolo28/Data-Visualization/tree/master) and the
    resulting online dashboards from this project can be accessed at [this link](https://ppiconsulting.dev/Projects/project23.html).
  prefs: []
  type: TYPE_NORMAL
- en: Panel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Panel is an open-source Python library part of the HoloViz ecosystem. It can
    be simply installed using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once imported the data, we can then proceed to develop our application:'
  prefs: []
  type: TYPE_NORMAL
- en: We first import the necessary libraries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specify a tamplate to use to style the application and its title.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a dropdown widget where the user can select a country to examine. In
    this case Switzerland is provided as the default choice when the application is
    loaded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3 helper functions are designed in order to take the selected country as input
    and then return different temporal parts of the series to nicely display the raw
    inflation data to the user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ultimately, the 3 helper functions are binded with the dropdown widget and added
    together on a column on the interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result, we should then get the following output (Figure 2):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f50c23dddbd57d88aa9e095d983867d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Displaying Tabular data (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: Following a similar structure, we can then proceed to make a slider where the
    user can pick the range of years to examine and create a plot to visualize the
    country historical trend (Figure 3).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/74803242388d911d1807b15e6176ada7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Overall Inflation Trend (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have been able to visualize the overall inflation data, we can then
    add a second plot where the user can choose if inspect the food or energy prices
    inflation trend (Figure 4).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/757ea8438c4b466a6329128a26479340.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: Food/Energy Inflation Trend (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we can also add an explorer widget on the dashboard in order to make
    it possible for the user to create its own charts (Figure 5).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d0fa4d52e024688d9615717b79679fe3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: Explorer Widget (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: Once created the full application and stored it in a ***pane_example.py*** file,
    we can then run the command below in order to visualize the results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The application can then be converted into an HTML format using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After the conversion, it should then be possible to launch it with an HTTP
    server. The web page should then be available at the following link: [***http://localhost:8000/docs/panel_example.html***](http://localhost:8000/docs/panel_example.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Shiny for Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Shiny was on open source library originally developed for R, that is now available
    also for Python users. It can be easily installed using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Once imported the data, we can then work on our application, by first importing
    the necessary dependencies and then structuring the layout of the application.
    Specifically the following steps are adopted:'
  prefs: []
  type: TYPE_NORMAL
- en: We first create a title for the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design a sidebar containing a dropdown and a slider (to be used as inputs to
    populate the following plots).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output 2 plots next to the sidebar (to show the overall inflation trend for
    a country and its annual change in inflation).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a final dropdown and plot at the end of the application (where users can
    inspect the food/energy prices inflation trend).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Once defined the layour we can then proceed to create the different plots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The application can then be launched locally using the following command (Figure
    6):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/001f8bdbccc70c0f8b1e08509c4af725.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: Shiny Application Example (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: If interested in converting the code into HTML so that to share it on a webpage,
    we then need to first install [***shinylive***](https://shiny.posit.co/py/docs/shinylive.html)
    and then use the following command (make sure to name your application ***app.py***!).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'After the conversion, it should then be possible to launch the application
    with an HTTP server. The web page should then be available at the following link:
    [http://[::1]:8008/](http://[::1]:8008/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: PyScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PyScript is a framework developed by Anaconda in order to make possible to write
    Python code directly into your HTML files. After importing the ***pyscript.js***
    scripts, Python code can then be automatically executed and processed to render
    the results in your application.
  prefs: []
  type: TYPE_NORMAL
- en: All the HTML code needed in order to run our application is shown below. The
    Python code can then be just pasted between the ***<py-config>*** commands. After
    the ***<py-config>*** command, a ***div*** has also been added in order add a
    title to the application and get different input parameters for our plots (in
    the same way we had input parameters for our Panel and Shiny dashboards).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we start by importing the libraries and defining a plot function
    to create the overall inflation trend plot and annual change. Using the js library
    we can then be able to get the input parameters specified in the HTML file and
    call our plotting function.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a proxy is created in order to check if the end users change over time
    any of the parameters, and if so automatically update their values stored in Python
    and the respective plots.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Once finished developing the application and storing it in a ***.html*** file,
    we can then immediately launch it by opening the file using a web browser (Figure
    7).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/86c33463f7c22ea76d62953a14567770.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7: PyScript Example Application (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to deploy our applications on the web, it might be necessary to store
    our input data alongside the application in a single file (e.g. after the conversion
    from Python to HTML it could in fact not be possible anymore to load the data
    from XLSX). One possible way to do this is to:'
  prefs: []
  type: TYPE_NORMAL
- en: Export the 3 daframes originally imported into CSV files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open the CSV files one at the time and paste the whole content in a variable
    (as shown below).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use this setup in the same file as the rest of your application (instead of
    the ***import_data*** function).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Using this setup and converting the Panel and Python Shiny applications to HTML
    code as explained above it can then be possible to host your application on the
    web without needing to pay for any server.
  prefs: []
  type: TYPE_NORMAL
- en: One simple approach in order to do this, is using GitHub pages and adding our
    project files to an online repository. More information about GitHub pages is
    available [here.](https://pages.github.com/)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As part of this article we explored 3 different options which can be used in
    order to share your Python applications on the web without having to pay for any
    service management. Although, we also saw that taking this approach has some inherent
    limitations and could therefore not be the best option when designing more complex
    applications or working with large amounts of data.
  prefs: []
  type: TYPE_NORMAL
- en: If interested instead in showcasing your Machine Learning projects online (without
    needing a server architecture), [Tensorflow.js](/online-machine-learning-with-tensorflow-js-2ae232352901)
    and [ONNX](/onnx-easily-exchange-deep-learning-models-f3c42100fd77) could be two
    great solutions for your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Contacts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to keep updated with my latest articles and projects [follow me
    on Medium](https://pierpaoloippolito28.medium.com/subscribe) and subscribe to
    my [mailing list](http://eepurl.com/gwO-Dr). These are some of my contacts details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Linkedin](https://uk.linkedin.com/in/pier-paolo-ippolito-202917146)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Personal Website](https://pierpaolo28.github.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Medium Profile](https://towardsdatascience.com/@pierpaoloippolito28)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GitHub](https://github.com/pierpaolo28)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Kaggle](https://www.kaggle.com/pierpaolo28)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bibliography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] The World Bank, A Global Database of Inflation. Accessed at: [https://www.worldbank.org/en/research/brief/inflation-database](https://www.worldbank.org/en/research/brief/inflation-database).
    License: [Creative Commons Attribution 4.0 International license](https://creativecommons.org/licenses/by/4.0)
    (CC-BY 4.0).'
  prefs: []
  type: TYPE_NORMAL
