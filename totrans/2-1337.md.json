["```py\nclass Pizza:\n    def __init__(self, size, toppings):\n        self.size = size\n        self.toppings = toppings\n\n# Now let's create a pizza\nmy_pizza = Pizza('large', ['pepperoni', 'mushrooms'])\n\nprint(my_pizza.size)  # This will print: large\nprint(my_pizza.toppings)  # This will print: ['pepperoni', 'mushrooms']\n```", "```py\nclass Pizza:\n    def __init__(self, size, toppings):\n        self.size = size\n        self.toppings = toppings\n\n    def __str__(self):\n        return f\"A {self.size} pizza with {', '.join(self.toppings)}\"\n\nmy_pizza = Pizza('large', ['pepperoni', 'mushrooms'])\nprint(my_pizza)  # This will print: A large pizza with pepperoni, mushrooms\n```", "```py\nclass Pizza:\n    def __init__(self, size, toppings):\n        self.size = size\n        self.toppings = toppings\n\n    def __repr__(self):\n        return f\"Pizza('{self.size}', {self.toppings})\"\n\nmy_pizza = Pizza('large', ['pepperoni', 'mushrooms'])\nprint(repr(my_pizza))  # This will print: Pizza('large', ['pepperoni', 'mushrooms'])\n```", "```py\nclass Pizza:\n    def __init__(self, size, toppings):\n        self.size = size\n        self.toppings = toppings\n\n    def __add__(self, other):\n        if not isinstance(other, Pizza):\n            raise TypeError(\"You can only add another Pizza!\")\n        new_toppings = self.toppings + other.toppings\n        return Pizza(self.size, new_toppings)\n\n# Let's create two pizzas\npizza1 = Pizza('large', ['pepperoni', 'mushrooms'])\npizza2 = Pizza('large', ['olives', 'pineapple'])\n\n# And now let's \"add\" them\ncombined_pizza = pizza1 + pizza2\n\nprint(combined_pizza.toppings)  # This will print: ['pepperoni', 'mushrooms', 'olives', 'pineapple']\n```", "```py\nclass Pizza:\n    def __init__(self, size, toppings):\n        self.size = size\n        self.toppings = toppings\n\n    def __len__(self):\n        return len(self.toppings)\n\n# Let's create a pizza\nmy_pizza = Pizza('large', ['pepperoni', 'mushrooms', 'olives'])\n\nprint(len(my_pizza))  # This will print: 3\n```", "```py\nclass Pizza:\n    def __init__(self, size, toppings):\n        self.size = size\n        self.toppings = toppings\n\n    def __iter__(self):\n        self.n = 0\n        return self\n\n    def __next__(self):\n        if self.n < len(self.toppings):\n            result = self.toppings[self.n]\n            self.n += 1\n            return result\n        else:\n            raise StopIteration\n\n# Let's create a pizza\nmy_pizza = Pizza('large', ['pepperoni', 'mushrooms', 'olives'])\n\n# And now let's iterate over it\nfor topping in my_pizza:\n    print(topping)\n```"]