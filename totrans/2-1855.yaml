- en: Simple way to Deploy ML Models as Flask APIs on Amazon ECS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Amazon ECS 上将机器学习模型作为 Flask API 部署的简单方法
- en: 原文：[https://towardsdatascience.com/simple-way-to-deploy-ml-models-as-flask-apis-on-amazon-ecs-7be11f9dc4d9](https://towardsdatascience.com/simple-way-to-deploy-ml-models-as-flask-apis-on-amazon-ecs-7be11f9dc4d9)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/simple-way-to-deploy-ml-models-as-flask-apis-on-amazon-ecs-7be11f9dc4d9](https://towardsdatascience.com/simple-way-to-deploy-ml-models-as-flask-apis-on-amazon-ecs-7be11f9dc4d9)
- en: Deploy Flask APIs on Amazon ECS in 4 minutes
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 4 分钟内将 Flask API 部署到 Amazon ECS
- en: '[](https://medium.com/@nikola.kuzmic945?source=post_page-----7be11f9dc4d9--------------------------------)[![Nikola
    Kuzmic](../Images/b6be2a8e377bc450ced5260a79a1f4bb.png)](https://medium.com/@nikola.kuzmic945?source=post_page-----7be11f9dc4d9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7be11f9dc4d9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7be11f9dc4d9--------------------------------)
    [Nikola Kuzmic](https://medium.com/@nikola.kuzmic945?source=post_page-----7be11f9dc4d9--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nikola.kuzmic945?source=post_page-----7be11f9dc4d9--------------------------------)[![Nikola
    Kuzmic](../Images/b6be2a8e377bc450ced5260a79a1f4bb.png)](https://medium.com/@nikola.kuzmic945?source=post_page-----7be11f9dc4d9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7be11f9dc4d9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7be11f9dc4d9--------------------------------)
    [Nikola Kuzmic](https://medium.com/@nikola.kuzmic945?source=post_page-----7be11f9dc4d9--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7be11f9dc4d9--------------------------------)
    ·6 min read·Mar 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7be11f9dc4d9--------------------------------)
    ·6 分钟阅读·2023年3月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/e65f1c65818c31933d75bdf5d19ede50.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e65f1c65818c31933d75bdf5d19ede50.png)'
- en: Photo by [Arjan van den Berg](https://unsplash.com/@arjan71?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Arjan van den Berg](https://unsplash.com/@arjan71?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: In this post we’ll cover how to deploy a linear regression XGBoost model which
    predicts a developer’s salary based on their years of experience.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将介绍如何部署一个线性回归 XGBoost 模型，该模型根据开发者的工作经验年限来预测他们的薪资。
- en: 👉 Game Plan
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 👉 游戏计划
- en: Train an XGBoost model
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 训练一个 XGBoost 模型
- en: Build a simple Flask API to serve model predictions
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建一个简单的 Flask API 来提供模型预测
- en: Build a Docker Image for the Flask API
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 Flask API 构建 Docker 镜像
- en: Deploy the Docker Container on Amazon ECS
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Amazon ECS 上部署 Docker 容器
- en: 'Entire Source Code Github Repo: [link](https://github.com/kuzmicni/flask-on-ecs/tree/simple)🧑‍💻'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 完整源代码 GitHub 仓库：[link](https://github.com/kuzmicni/flask-on-ecs/tree/simple)🧑‍💻
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Why we need APIs to deploy ML models
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么我们需要 API 来部署机器学习模型
- en: If you are reading this post, likely you have reached the stage in your Data
    Science project where you want to make your awesome ML models available for everyone
    on the internet. People refer to this step as deploying them to production.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在阅读这篇文章，说明你已经到了数据科学项目的阶段，希望将你出色的机器学习模型在互联网上提供给所有人。人们称这一步骤为将模型部署到生产环境中。
- en: Here we won’t make things too complex and examine what a proper production-grade
    deployment should look like, rather we’re simply going to leverage the default
    Flask development server to demonstrate the process end-to-end what it takes to
    take the trained/pickled XGBoost ML model, dockerize it, and deploy it as a real-time
    API on Amazon ECS.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们不会使事情变得过于复杂，也不会详细审查生产级部署的样子，而是简单地利用默认的 Flask 开发服务器演示从训练/保存的 XGBoost 机器学习模型，到
    Docker 化，再到将其作为实时 API 部署到 Amazon ECS 的全过程。
- en: '👉 Step 1: Train an XGBoost model'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 👉 步骤 1：训练一个 XGBoost 模型
- en: Train an XGBoost model to predict the developer salary based on their years
    of experience and save the model as a pickle file.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 训练一个 XGBoost 模型以预测开发者的薪资，基于他们的工作经验年限，并将模型保存为 pickle 文件。
- en: 'To run it inside VS Code, let’s create a separate Python 3.8 environment:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 VS Code 内运行，让我们创建一个单独的 Python 3.8 环境：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Then Restart VS Code and in Jupyter Notebook -> Select ‘**py38demo**’ as the
    Kernel.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后重启 VS Code，并在 Jupyter Notebook 中 -> 选择‘**py38demo**’作为内核。
- en: 'Train & pickle the XGBoost model:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 训练并 pickle XGBoost 模型：
- en: '![](../Images/2723cb7fac45c5d3298592071ff9c2e7.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2723cb7fac45c5d3298592071ff9c2e7.png)'
- en: Time to create an API which can serve these recommendations!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是创建一个可以提供这些推荐的 API 的时候了！
- en: '👉 Step 2: Flask API'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 👉 步骤 2：Flask API
- en: Our API will load the XGBoost model, accept POST requests, and produce a response.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 API 将加载 XGBoost 模型，接受 POST 请求，并生成响应。
- en: 'Let’s first run our API locally. Then in a separate terminal we can test it
    by sending a payload POST request to see what a developer with 2.5 years of experience
    would make:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们在本地运行 API。然后在一个单独的终端中，我们可以通过发送负载 POST 请求来测试，以查看一个拥有 2.5 年经验的开发者会做什么：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/25839f9865edaa4a0c8f48fc538e5b5e.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/25839f9865edaa4a0c8f48fc538e5b5e.png)'
- en: $260k after 2.5 years, and $750k after 12.5 years. Not bad! 🤑
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 2.5 年后 $260k，12.5 年后 $750k。不错！🤑
- en: '👉 Step 3: Docker Image'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 👉 步骤 3：Docker 镜像
- en: To run our application inside the Docker Container, we need a “blueprint” with
    instructions on what environment to use, which local files to copy, and how to
    run the application. All of this is referred to as a Docker Image and by convention
    it is specified in a **Dockerfile**
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Docker 容器中运行我们的应用程序，我们需要一个“蓝图”，该蓝图包含有关使用什么环境、要复制哪些本地文件以及如何运行应用程序的指令。所有这些都被称为
    Docker 镜像，通常在 **Dockerfile** 中指定。
- en: We can now run our API inside the Docker container and test locally as well.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在 Docker 容器中运行我们的 API 并进行本地测试。
- en: 'Note: since I am building the image on a Mac, I need to specify'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：由于我在 Mac 上构建镜像，我需要指定
- en: ''
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- - platform linux/amd64'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- - platform linux/amd64'
- en: ''
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: for it to be compatible with the ECS Fargate Linux environment.
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使其与 ECS Fargate Linux 环境兼容。
- en: Here’s how we build & run the image.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何构建和运行镜像的步骤。
- en: 'Note: we bind our host (i.e. laptop’s) port 80 to docker container’s port 80:'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：我们将主机（即笔记本电脑）的端口 80 绑定到 Docker 容器的端口 80：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let’s test our API which is now running inside the Docker Container! 📦
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试一下现在在 Docker 容器中运行的 API！📦
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/713eeda0fea59338e8683225bd070861.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/713eeda0fea59338e8683225bd070861.png)'
- en: Time to deploy this on AWS! 🚀
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候在 AWS 上部署了！🚀
- en: '👉 Step 4: Run the container on Amazon ECS'
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 👉 步骤 4：在 Amazon ECS 上运行容器
- en: This section may look overwhelming at first, but actually it’s quite simple
    if we break the process into 6 simple steps.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个部分可能一开始看起来很复杂，但实际上如果我们将过程分解成 6 个简单步骤，就会变得很简单。
- en: '![](../Images/d1fd7ac870f7b51f76e2bb1fbde293c0.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d1fd7ac870f7b51f76e2bb1fbde293c0.png)'
- en: 'Chrome Logo: [1], Flask Logo: [2]'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome 徽标：[1]，Flask 徽标：[2]
- en: '**i) Push the Docker image to ECR**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**i) 将 Docker 镜像推送到 ECR**'
- en: Let’s create an ECR repo called **demo** where we can push the Docker image.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为 **demo** 的 ECR 仓库，我们可以将 Docker 镜像推送到其中。
- en: '![](../Images/052bc48fc29df4f521e507c1ce4522c1.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/052bc48fc29df4f521e507c1ce4522c1.png)'
- en: 'Then we can use the Push Commands provided by ECR:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用 ECR 提供的推送命令：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Assumption: you have configured AWS CLI on your local machine and setup an
    IAM user with the right permission to interact with the ECR. You can find more
    info at this [link](https://docs.aws.amazon.com/AmazonECR/latest/userguide/getting-started-cli.html).'
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 假设：您已在本地机器上配置了 AWS CLI，并设置了具有与 ECR 交互所需权限的 IAM 用户。您可以在此 [链接](https://docs.aws.amazon.com/AmazonECR/latest/userguide/getting-started-cli.html)
    中找到更多信息。
- en: After running the above 3 commands, we can see our image is there on ECR! 🎉
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述 3 个命令后，我们可以看到我们的镜像已经在 ECR 上了！🎉
- en: '![](../Images/ef09ad855af44d36c11bf523fc372e78.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ef09ad855af44d36c11bf523fc372e78.png)'
- en: '**Copy & Paste the Image URI** somewhere as we’ll need it in the next couple
    of steps.'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**复制并粘贴镜像 URI** 到某个地方，因为我们将在接下来的几个步骤中需要它。'
- en: '**ii) Create an IAM Execution Role**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**ii) 创建 IAM 执行角色**'
- en: 'We need to create an Execution Role so that our ECS task which will run the
    container has the access to pull images from the ECR. We’ll name it: **simpleRole**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个执行角色，以便运行容器的 ECS 任务可以访问从 ECR 拉取镜像。我们将其命名为：**simpleRole**
- en: '![](../Images/baa3344183dc1d1c70b2124b4fd2f84e.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/baa3344183dc1d1c70b2124b4fd2f84e.png)'
- en: '**iii) Create a Security Group**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**iii) 创建安全组**'
- en: 'Security Group is needed to allow anyone on the internet to send requests to
    our application. In the real world you may want to constrain this to a specific
    set of IPs but here we’ll open it for everyone and call it:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 需要安全组以允许互联网上的任何人向我们的应用程序发送请求。在现实世界中，您可能希望将其限制为特定的 IP 集合，但在这里我们将其对所有人开放，并命名为：
- en: '**simpleSG**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**simpleSG**'
- en: '![](../Images/b03a4f6fdaa10334799b8dd0fc1e057b.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b03a4f6fdaa10334799b8dd0fc1e057b.png)'
- en: '**iv) Create an ECS Cluster**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**iv) 创建 ECS 集群**'
- en: 'This step is straightforward and only takes couple seconds. We’ll call it:
    **flaskCluster**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个步骤很简单，只需几秒钟。我们将其命名为：**flaskCluster**
- en: '![](../Images/7e86f7cfaede8933a5bacb1fb73dbbc1.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7e86f7cfaede8933a5bacb1fb73dbbc1.png)'
- en: while our cluster is being provisioned, let’s create a Task Definition.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的集群被配置时，让我们创建一个任务定义。
- en: '**v) Create a Task Definition**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**v) 创建任务定义**'
- en: 'Task Definition, as the name implies is a set of instructions related to which
    image to run, port to open, and how much virtual CPU and memory we want to allocate.
    We’ll call it: **demoTask**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 任务定义，顾名思义，是一组与运行哪个镜像、开放哪个端口以及分配多少虚拟 CPU 和内存相关的指令。我们将其称为：**demoTask**
- en: '![](../Images/713bffc8c5e6f1cd4fdd219169bb96af.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/713bffc8c5e6f1cd4fdd219169bb96af.png)'
- en: '**vi) Run the Task**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**vi) 运行任务**'
- en: Let’s run our **demoTask** on our **flaskCluster,** with the **simpleSG** we
    created in ***step iii)***.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的**flaskCluster**上运行**demoTask**，使用我们在***步骤 iii)*** 中创建的**simpleSG**。
- en: '![](../Images/f46cd2d6ea10f104037ae766e2a28ad7.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f46cd2d6ea10f104037ae766e2a28ad7.png)'
- en: Time to test out the deployed API from the **Public IP** address! 🥁
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以通过**公共 IP**地址测试已部署的 API 了！ 🥁
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/e6b6a8e4fe5ebf0fa9d349352a483afc.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e6b6a8e4fe5ebf0fa9d349352a483afc.png)'
- en: It’s working! 🥳
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 它正在运行！ 🥳
- en: As you can see we are able to get the salary predictions by sending POST requests
    to the **Public IP** provided by ECS. 🔥
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，我们可以通过向 ECS 提供的**公共 IP**发送 POST 请求来获取薪资预测。 🔥
- en: Final Words
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后
- en: This was just a simple demonstration of how we can dockerize our XGBoost models
    and deploy them on Amazon ECS for real-time inference. However, we used the default
    development server provided by Flask and instead should use a production-grade
    application server like Gunicorn which we’ll cover in the next post.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个简单的演示，展示了我们如何将 XGBoost 模型 Docker 化并在 Amazon ECS 上进行实时推理。然而，我们使用了 Flask
    提供的默认开发服务器，实际上应该使用像 Gunicorn 这样的生产级应用服务器，下一篇文章中我们会介绍它。
- en: Thanks for reading and I hope you found this useful for getting started with
    Flask, Docker and Amazon ECS!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读，希望你觉得这些内容对开始使用 Flask、Docker 和 Amazon ECS 有帮助！
- en: Want more useful articles on ML Engineering?
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 想要更多关于 ML 工程的有用文章？
- en: '[*Subscribe for free*](https://medium.com/@nikola.kuzmic945/subscribe) *to
    get notified when I publish a new story.*'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[*免费订阅*](https://medium.com/@nikola.kuzmic945/subscribe) *以便在我发布新故事时收到通知。*'
- en: '*Become a Medium member to read more stories from me and thousands of other
    writers. You can support me by using my* [*referral link*](https://medium.com/@nikola.kuzmic945/membership)
    *when you sign up. I’ll receive a commission at no extra cost to you.*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*成为 Medium 会员，阅读更多来自我和其他数千名作者的故事。你可以通过使用我的* [*推荐链接*](https://medium.com/@nikola.kuzmic945/membership)
    *来支持我。当你注册时，我将获得佣金，而你无需额外支付费用。*'
- en: '**References**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考资料**'
- en: '[1] Chrome Logo: [Link](https://logos-world.net/chrome-logo/)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] Chrome 标志：[链接](https://logos-world.net/chrome-logo/)'
- en: '[2] Flask Logo: [Link](https://flask.palletsprojects.com/en/2.2.x/)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] Flask 标志：[链接](https://flask.palletsprojects.com/en/2.2.x/)'
