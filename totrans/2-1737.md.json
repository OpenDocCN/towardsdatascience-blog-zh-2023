["```py\nsorted(iterable, key=None, reverse=False)\n```", "```py\nsorted(iterable) -> sorted list\n```", "```py\n#Create a list of numbers\nnums = [3, 1, 9, 7, 5]\n\n#Sort the list of numbers\ns_nums = sorted(nums)\n\n#Print sorted list\nprint(s_nums)\n```", "```py\n[1, 3, 5, 7, 9]\n```", "```py\n#Create a list of numbers\nnums = [3, 1, 9, 7, 5]\n\n#Sort the list of numbers\ns_nums = sorted(nums, reverse=True)\n\n#Print sorted list\nprint(s_nums)\n```", "```py\n[9, 7, 5, 3, 1]\n```", "```py\n#Create a list of strings\nfruit = ['banana', 'pineapple', 'orange', 'apple']\n\n#Sort the list of strings\ns_fruit = sorted(fruit)\n\n#Print sorted list\nprint(s_fruit)\n```", "```py\n['apple', 'banana', 'orange', 'pineapple']\n```", "```py\n['Python', 'programming', 'tutorial', 'code']\n```", "```py\n#Create a list of words\nwords = ['Python', 'programming', 'tutorial', 'code']\n\n#Sort the list of words based on length of each word\ns_words = sorted(words, key=lambda x: len(x))\n\n#Print sorted list\nprint(s_words)\n```", "```py\n['code', 'Python', 'tutorial', 'programming']\n```", "```py\n['Python', 'programming', 'tutorial', 'code']\n```", "```py\n#Create a list of words\nwords = ['Python', 'programming', 'tutorial', 'code']\n\n#Define a function to calculate length of a word\ndef calc_len(word):\n    len_w = len(word)\n    return len_w\n\n#Sort the list of words based on length of each word\ns_words = sorted(words, key=calc_len)\n\n#Print sorted list\nprint(s_words)\n```", "```py\n['code', 'Python', 'tutorial', 'programming']\n```", "```py\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def __repr__(self):\n        return repr((self.name, self.age))\n```", "```py\n#Create a list of tuples\npersons = [\n    Person('Mike', 20),\n    Person('John', 35),\n    Person('David', 23),\n]\n\n#Print list of tuples\nprint(persons)\n```", "```py\n[('Mike', 20), ('John', 35), ('David', 23)]\n```", "```py\n#Sort the list of tuples based on age attribute\ns_persons = sorted(persons, key=lambda person: person.age)\n\n#Print sorted list\nprint(s_persons)\n```", "```py\n[('Mike', 20), ('David', 23), ('John', 35)]\n```"]