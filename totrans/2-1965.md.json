["```py\ninput → tempvar_1 := func_1(input) →\n        tempvar_2 := func_2(tempvar_1) →\n        func_3(tempvar_2) → output\n```", "```py\ninput → func_3(func_2(func_1(input))) → output\n```", "```py\n# snippet 1\nthird_function(second_function(first_function(x)))\n\n# snippet 2\nx1 = first_function(x)\nx2 = second_function(x1)\nx3 = third_function\n```", "```py\n# snippet 1\nx1 = 2.056 * x\nx2 = x1 / (1 + x1)\ny = 2.3 / (- x2 - 7.33)\n\n# snippet 2\ny = 2.3 / (- 2.056 * x / (1 + 2.056 * x) - 7.33)\n```", "```py\ndef calc_with_tempvar(x):\n    y = x**2\n    z = y/2\n    f = z + 78\n    g = f/333.333\n    return g\n```", "```py\ndef calc_without_tempvar(x):\n    return ((x**2)/2 + 78)/333.333\n```", "```py\n>>> for x in (1, 2.3, 0.0000465, 100_000_000.004):\n...     assert calc_with_tempvar(x) == calc_without_tempvar(x)\n```", "```py\n>>> import perftester\n>>> perftester.config.set_defaults(\n...     \"time\",\n...     Number=20_000_000,\n...     Repeat=7,\n... )\n```", "```py\n>>> x = 1.67\n>>> t1 = perftester.time_benchmark(calc_with_tempvar, x)\n>>> t2 = perftester.time_benchmark(calc_without_tempvar, x)\n```", "```py\n>>> perftester.pp({\n...     \"1\\. composition\": t1[\"min\"],\n...     \"2\\. one-shot\": t2[\"min\"],\n...     \"3\\. composition--to--one-shot ratio\": t1[\"min\"] / t2[\"min\"]\n... })\n{'1\\. composition': 2.063e-07,\n '2\\. one-shot': 1.954e-07,\n '3\\. composition--to--one-shot ratio': 1.056}\n```", "```py\ndef calc_with_tempvar_shorter(x):\n    y = x**2\n    z = y/2\n    f = z + 78\n    return f/333.333\n```", "```py\n>>> t3 = perftester.time_benchmark(calc_without_tempvar_shorter, x)\n>>> t3[\"min\"]\n1.998e-07\n```"]