- en: 'From Powerpoints to PDFs to CSV Files: Python Classes for Reading Major File
    Types'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/from-powerpoints-to-pdfs-to-csv-files-python-classes-for-reading-major-file-types-14eac058ecb5](https://towardsdatascience.com/from-powerpoints-to-pdfs-to-csv-files-python-classes-for-reading-major-file-types-14eac058ecb5)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Be able to extract and compare information from multiple different file types
    in your next data science project!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://ben-mccloskey20.medium.com/?source=post_page-----14eac058ecb5--------------------------------)[![Benjamin
    McCloskey](../Images/7118f5933f2affe2a7a4d3375452fa4c.png)](https://ben-mccloskey20.medium.com/?source=post_page-----14eac058ecb5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----14eac058ecb5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----14eac058ecb5--------------------------------)
    [Benjamin McCloskey](https://ben-mccloskey20.medium.com/?source=post_page-----14eac058ecb5--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----14eac058ecb5--------------------------------)
    ·6 min read·Jan 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ae884e2e91a90681e265bf02b77cd8e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Glen Carrie](https://unsplash.com/@glencarrie?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many different types of files a data scientist may need to read for
    their project. While it is particularly easy to read *text* files in Python, other
    file types may need additional support from various Python APIs to ensure they
    are Python-readable and usable. Today’s code provides multiple different Python
    classes that can be used for reading many different file types. The output of
    each class is a text string which a data scientist can then use for information
    extraction as well as similarity analysis of various documents.
  prefs: []
  type: TYPE_NORMAL
- en: PDF Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have discussed many times in the past the importance of PDF files and how
    to work with them in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/pdf-parsing-dashboard-with-plotly-dash-256bf944f536?source=post_page-----14eac058ecb5--------------------------------)
    [## PDF Parsing Dashboard with Plotly Dash'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to how to read and display PDF files in your next dashboard.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'towardsdatascience.com](/pdf-parsing-dashboard-with-plotly-dash-256bf944f536?source=post_page-----14eac058ecb5--------------------------------)
    [](/natural-language-processing-pdf-processing-function-for-obtaining-a-general-overview-6fa63e81fbf1?source=post_page-----14eac058ecb5--------------------------------)
    [## Natural Language Processing: PDF Processing Function for Obtaining a General
    Overview'
  prefs: []
  type: TYPE_NORMAL
- en: Many of the documents used for Natural Language Processing (NLP) today are in
    .pdf format. Reading the pdfs into…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/natural-language-processing-pdf-processing-function-for-obtaining-a-general-overview-6fa63e81fbf1?source=post_page-----14eac058ecb5--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'I wanted to include the below class because I cannot stress how important it
    is to use PDF files in your next project. Many people use PDFs for various different
    tasks today and there is too much information in them to be simply thrown away.
    The *pdfReader* class has two functions: one that will make the PDF Python readable
    and another that will turn the PDF into one string of text in Python. **Note:
    There have been recently new updates to PyPDF2 so take caution when using old
    tutorials that have not been updated. Many of the method names have been changed
    in PyPDF2 3.0.0.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Microsoft Powerpoint Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Fun fact: there is a way to read Microsoft Powerpoint files into Python and
    see what information they contain. The *pptReader* class below will read the text
    from each slide in your Powerpoint presentation and add it to a string of text.
    Do not worry about images in your Powerpoint, the **ppt_text()** function handles
    those!'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Microsoft Excel Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Surprisingly, excel files are a bit more difficult to read into Python than
    I had originally expected. I had to use the *openpyxl* library to first read an
    excel file into Python. I was not getting the output I wanted so I then saved
    the read-in file as a standard *csv* file and continued from there. That trick
    worked!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: CSV Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may be wondering why I did not use the Pandas library for reading my CSVs.
    I used the traditional **open()** method because I wanted all of the information
    within the given *csv* files and many *csv* files are formatted differently. Additionally,
    I am inclined to use the Standard Python Libary and not import external APIs *when
    the Built-in functions work just as well as the APIs or can quickly perform my
    desired task.*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Extra: Natural Language Preprocessing Class'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with all of the above classes in one project, the normalization
    of the outputs from each class occurs by formatting them as strings of text. I
    was working with various documents in a recent project of mine and I needed to
    also preprocess each of the strings to add more normalization as well as remove
    unnecessary information. After reading all of your files into python, use the
    *data processor*class to clean each of the strings and standardize them across
    all samples.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today we looked at different Python Classes a data scientist can use in their
    next project for reading in various file types. While there are other file types
    that can be read into Python, the varieties discussed today are very important
    and can sometimes be overlooked. Using today’s file reading classes along with
    the final data cleaning class can allow you to compare and contrast the information
    within completely different file types. For example, maybe you want to use Natural
    Language Processing and look at different research documents, find which are similar,
    and then recommend those for a student to study in their current class. This is
    just one of many different projects that can be created from the classes provided
    today, enjoy!
  prefs: []
  type: TYPE_NORMAL
- en: '**If you enjoyed today’s reading, PLEASE give me a follow and let me know if
    there is another topic you would like me to explore! If you do not have a Medium
    account, sign up through my link** [**here**](https://ben-mccloskey20.medium.com/membership)**!
    Additionally, add me on** [**LinkedIn**](https://www.linkedin.com/in/benjamin-mccloskey-169975a8/),
    **or feel free to reach out! Thanks for reading!**'
  prefs: []
  type: TYPE_NORMAL
