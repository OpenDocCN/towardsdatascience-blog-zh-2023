["```py\nfrom itertools import repeat\nfrom statistics import median\nimport functools\nimport time\n\ndurations = []\n\n## repeat a given function multiple times, append the execution duration to a list\ndef record_timer(func, times = 5):\n    for _ in repeat(None, times):\n        start_time = time.perf_counter()\n        value = func()\n        end_time = time.perf_counter()\n        run_time = end_time - start_time\n        print(f\"Finished {func.__name__!r} in {run_time:.10f} secs\")\n        durations.append(run_time)\n    return value\n\n## Decorator and compute the median of the function\ndef repeat_executor(times=5):\n    def timer(func):\n        \"\"\"Print the runtime of the decorated function\"\"\"\n        @functools.wraps(func)\n        def wrapper_timer(*args, **kwargs):\n            value = record_timer(func, times=times)\n            print(f'{median(list(durations))}')\n            return value\n        return wrapper_timer\n    return timer\n```", "```py\nimport pandas as pd\nfrom repeat_helper import repeat_executor\n\ndf = pd.read_csv(\"./Parking_Violations_Issued_-_Fiscal_Year_2017.csv\")\ndf = df[['Summons Number', 'Vehicle Make', 'Issue Date']]\n\n# ## Filter on the Vehicle Make for BMW\n@repeat_executor(times=5)\ndef test_filter():\n    return df[df['Vehicle Make'] == 'BMW']['Summons Number']\n\n# # ## Group By on the Vehicle Make and Count \n@repeat_executor(times=5)\ndef test_groupby():\n    return df.groupby(\"Vehicle Make\").agg({\"Summons Number\":'count'})\n\n# # ## SELF join\n@repeat_executor(times=5)\ndef test_self_join():\n    return df.set_index(\"Summons Number\").join(df.set_index(\"Summons Number\"), how=\"inner\", rsuffix='_other').reset_index()['Summons Number']\n\n## window function\n@repeat_executor(times=5)\ndef test_window_function():\n    df['summon_rank'] = df.sort_values(\"Issue Date\",ascending=False) \\\n        .groupby(\"Vehicle Make\") \\\n        .cumcount() + 1\n    return df\n\ntest_filter()\n# # The median time is 0.416s\ntest_groupby()\n# # The median time is 0.600s\ntest_self_join()\n# # The median time is 4.159s\ntest_window_function()\n# # The median time is 17.465s\n```", "```py\nimport duckdb\nfrom repeat_helper import repeat_executor\n\ncon = duckdb.connect(database=':memory:')\ncon.execute(\"\"\"CREATE TABLE parking_violations AS SELECT \"Summons Number\", \"Vehicle Make\", \"Issue Date\" FROM read_csv_auto('/Users/chengzhizhao/projects/pandas_alternatives/Parking_Violations_Issued_-_Fiscal_Year_2017.csv', delim=',', SAMPLE_SIZE=-1);\"\"\")\ncon.execute(\"\"\"SELECT COUNT(1) FROM parking_violations\"\"\")\nprint(con.fetchall())\n# ## Filter on the Vehicle Make for BMW\n@repeat_executor(times=5)\ndef test_filter():\n    con.execute(\"\"\"\n        SELECT * FROM parking_violations WHERE \"Vehicle Make\" = 'BMW'\n        \"\"\")\n    return con.fetchall()\n\n# # ## Group By on the Vehicle Make and Count \n@repeat_executor(times=5)\ndef test_groupby():\n    con.execute(\"\"\"\n        SELECT COUNT(\"Summons Number\") FROM parking_violations GROUP BY \"Vehicle Make\"\n        \"\"\")\n    return con.fetchall()\n\n# # # ## SELF join\n@repeat_executor(times=5)\ndef test_self_join():\n    con.execute(\"\"\"\n        SELECT a.\"Summons Number\"\n        FROM parking_violations a\n        INNER JOIN parking_violations b on a.\"Summons Number\" = b.\"Summons Number\"\n        \"\"\")\n    return con.fetchall()\n\n# ## window function\n@repeat_executor(times=5)\ndef test_window_function():\n    con.execute(\"\"\"\n        SELECT *, ROW_NUMBER() OVER (PARTITION BY \"Vehicle Make\" ORDER BY \"Issue Date\")\n        FROM parking_violations \n        \"\"\")\n    return con.fetchall()\n\ntest_filter()\n# The median time is 0.410s\ntest_groupby()\n# # The median time is 0.122s\ntest_self_join()\n# # The median time is 3.364s\ntest_window_function()\n# # The median time is 6.466s\n```", "```py\nimport polars as pl\nfrom repeat_helper import repeat_executor\n\ndf = pl.read_csv(\"./Parking_Violations_Issued_-_Fiscal_Year_2017.csv\")\ndf = df.select(['Summons Number', 'Vehicle Make', 'Issue Date'])\n\n# ## Filter on the Vehicle Make for BMW\n@repeat_executor(times=5)\ndef test_filter():\n    return df.filter(pl.col('Vehicle Make') == 'BMW').select('Summons Number')\n\n# # ## Group By on the Vehicle Make and Count \n@repeat_executor(times=5)\ndef test_groupby():\n    return df.groupby(\"Vehicle Make\").agg(pl.col(\"Summons Number\").count())\n\n# # # ## SELF join\n@repeat_executor(times=5)\ndef test_self_join():\n    return df.join(df, on=\"Summons Number\", how=\"inner\").select('Summons Number')\n\n# ## window function\n@repeat_executor(times=5)\ndef test_window_function():\n    return df.select(\n        [\n            'Summons Number',\n            'Vehicle Make',\n            'Issue Date',\n            pl.col(['Issue Date']).sort(reverse=True).cumcount().over(\"Vehicle Make\").alias(\"summon_rank\")\n        ]\n    )   \n\ntest_filter()\n# # The median time is 0.0523s\n\ntest_groupby()\n# # # The median time is 0.0808s\n\ntest_self_join()\n# # # The median time is 1.343s\n\ntest_window_function()\n# # The median time is 2.705s\n```", "```py\nimport vaex\nfrom repeat_helper import repeat_executor\n\nvaex.settings.main.thread_count = 4 # cores fit my macbook\n\ndf = vaex.open('./Parking_Violations_Issued_-_Fiscal_Year_2017.csv')\ndf = df[['Summons Number', 'Vehicle Make', 'Issue Date']]\n\n# ## Filter on the Vehicle Make for BMW\n@repeat_executor(times=5)\ndef test_filter():\n    return df[df['Vehicle Make'] == 'BMW']['Summons Number']\n\n# # ## Group By on the Vehicle Make and Count \n@repeat_executor(times=5)\ndef test_groupby():\n    return df.groupby(\"Vehicle Make\").agg({\"Summons Number\":'count'})\n\n# # ## SELF join\n@repeat_executor(times=5)\ndef test_self_join():\n    return df.join(df, how=\"inner\", rsuffix='_other', left_on='Summons Number', right_on='Summons Number')['Summons Number']\n\ntest_filter()\n# # The median time is 0.006s\n\ntest_groupby()\n# # The median time is 2.987s\n\ntest_self_join()\n# # The median time is 4.224s\n\n# window function https://github.com/vaexio/vaex/issues/804\n```", "```py\nvf['rownr`] = vaex.vrange(0, len(vf))\n```", "```py\n## import pandas as pd\nimport modin.pandas as pd\n```", "```py\nimport os\nos.environ[\"MODIN_ENGINE\"] = \"ray\"  # Modin will use Ray\n\n#########################\n#######Same AS Pandas#######\n#########################\n\ntest_filter()\n# # The median time is 0.828s\n\ntest_groupby()\n# # The median time is 1.211s\n\ntest_self_join()\n# # The median time is 1.389s\n\ntest_window_function()\n# # The median time is 15.635s, \n# `DataFrame.groupby_on_multiple_columns` is not currently supported by PandasOnRay, defaulting to pandas implementation.\n```"]