- en: 'Ultimate Hive Tutorial: Essential Guide to Big Data Management and Querying'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/ultimate-hive-tutorial-essential-guide-to-big-data-management-and-querying-ce9ffe77a799](https://towardsdatascience.com/ultimate-hive-tutorial-essential-guide-to-big-data-management-and-querying-ce9ffe77a799)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Unlocking the power of Hive: your in-depth guide with visual mindmap Insights'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@yoloshe302?source=post_page-----ce9ffe77a799--------------------------------)[![Summer
    He](../Images/8bdf6ffcb4d02033d966243d3f25f1c4.png)](https://medium.com/@yoloshe302?source=post_page-----ce9ffe77a799--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ce9ffe77a799--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ce9ffe77a799--------------------------------)
    [Summer He](https://medium.com/@yoloshe302?source=post_page-----ce9ffe77a799--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ce9ffe77a799--------------------------------)
    ·8 min read·Nov 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ffec0a11222ebfb6a018ea8edb5d97bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author via Obsidian
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Navigating the labyrinth of big data can be a daunting endeavor, especially
    when the paths are paved with complex terminology and intricate processes. This
    is particularly true for [Apache Hive](https://hive.apache.org/), a powerful tool
    that’s essential for data management and querying in the Big Data ecosystem. Despite
    its significance, clear and concise tutorial resources on Hive can be scarce.
    That’s precisely why I’ve crafted the “Ultimate Hive Tutorial: Essential Guide
    to Big Data Management and Querying.”'
  prefs: []
  type: TYPE_NORMAL
- en: This blog aims to cut through the complexity and offer you a singular, comprehensive
    guide that sheds light on the **Hive Metastore**, the **Hive Data Model**, and
    the nuanced world of **metadata** — all with the help of intuitive examples and
    visual mindmaps.
  prefs: []
  type: TYPE_NORMAL
- en: Example Statement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To demonstrate the Hive core concept, let’s imagine a global retail chain deploying
    Hive to catalog and inspect its sales transactions. Central to this operation
    is a principal database, named `sales_db`. Within this database lies a pivotal
    table, `sales_data`, conceived to systematically record sales activity. We will
    use this example to illustrate all Hive-related concepts across this article.
    Let’s take a glance at the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c8b0bfdfbb2f243fa22924b2eb6f9870.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author via Excel
  prefs: []
  type: TYPE_NORMAL
- en: What is [Metadata](https://en.wikipedia.org/wiki/Metadata)?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine you stumbled upon an ancient, dusty library. Each book contains a story,
    but without the catalog cards summarizing the contents — titles, authors, publishing
    dates — you’d be adrift in a sea of information. Metadata is akin to these catalog
    cards for data. **It’s not the data itself; it’s the “data about data”** — a layer
    of information that describes the primary data’s properties, relationships, and
    lineage. In the above `sales_data` table, the metadata includes the **column names**
    — `region_id` , `date` , `transaction_id` , `product_id` , `store_id` , `sale_price`
    , along with their **data types, data locations**, etc.
  prefs: []
  type: TYPE_NORMAL
- en: What is [Hive Metastore](https://cwiki.apache.org/confluence/display/hive/design#:~:text=that%20with%201.-,Metastore,-Motivation)?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Continuing with our library analogy, if metadata is the catalog card, the Hive
    Metastore is the **librarian**. It meticulously **organizes** these cards, ensuring
    that every piece of data has a place and every query has a map to the treasure
    trove of information. **The Hive Metastore doesn’t house the actual books (data);
    it stores and manages the metadata.** It’s the curator that keeps track of where
    everything is stored in the [Hadoop Distributed File System (HDFS)](https://www.ibm.com/topics/hdfs),
    what each file contains, how it’s formatted, and how it’s partitioned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Acting as a guardian of data, it ensures that every query and data operation
    occurs seamlessly, offering users a clear structure amidst the chaos of big data.
    Hive metastore consists of two fundamental units:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Metastore Service**: A service that provides metastore access to other Apache
    Hive services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metadata Database**: Disk storage for the Hive metadata which is separate
    from [HDFS](https://www.ibm.com/topics/hdfs) storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the [Hive Data Model](https://cwiki.apache.org/confluence/display/hive/design#:~:text=8%20and%209).-,Hive%20Data%20Model,-Data%20in%20Hive)?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s first talk about the Metadata Database and how it is designed — the Hive
    data model, the blueprint of our metaphorical library’s shelves. It’s how the
    Hive organizes the metadata so that it can be efficiently stored, accessed, and
    queried. It defines the structure of **tables**, **partitions**, and **buckets**,
    which are like the library’s compartments and drawers where metadata is sorted
    and stashed.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the global retail example, let’s take an enhanced perspective on the Hive
    data model:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tables**: Tables in Hive are the linchpins of the data model, mirroring the
    structure and function of their relational database counterparts. The `sales_data`
    table is an exemplar, structured to store relevant sales metrics in an organized
    manner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Buckets**: Hive introduces an additional layer of data organization with
    bucketing, which sorts data into a predetermined number of buckets. Each bucket
    is filled based on the hashed value of a specified column, fostering a more balanced
    data distribution and enhancing query performance. In the case of our retail chain,
    the `region_id` column could be a candidate for bucketing, ensuring that sales
    data is equitably partitioned across different regional segments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Partitions**: To address the inherent challenges of querying vast data troves,
    Hive implements partitions. This feature segments tables into discrete parts,
    each corresponding to unique column values. With partitions, a query targeted
    at a specific subset of data — such as sales on a particular date — can be executed
    with increased speed and efficiency. For the `sales_data` table, partitioning
    by the `date` column means that each calendar day''s sales are neatly filed in
    their own **sub-directory** within the [Hadoop Distributed File System (HDFS)](https://www.ibm.com/topics/hdfs),
    streamlining access and retrieval.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/ecf523aa65581f7ab24f34eea7167a2f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author via Obsidian
  prefs: []
  type: TYPE_NORMAL
- en: This refined overview of the Hive Data Model encapsulates its principal components,
    underscoring the model’s capacity to simplify and expedite the querying process
    within the expanse of big data. By leveraging Hive’s capabilities, businesses
    can navigate the complexities of data storage and analysis with confidence and
    precision.
  prefs: []
  type: TYPE_NORMAL
- en: 'Treasures of the Library: Table Types'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When talking about tables in Hive Metastore, much like the varied collection
    within a library, there are two primary kinds of treasures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Managed Tables**](http://www.hadooplessons.info/2014/12/managed-table-and-external-table-in-hive.html):
    Think of these as the stories that the library owns, nurtures, and safeguards.
    They are stored within the library’s confines and managed directly by it. In Hive,
    if **drop** any of those tables, the **data will be deleted**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**External Tables**](http://www.hadooplessons.info/2014/12/managed-table-and-external-table-in-hive.html):
    Think of these as reference cards that direct seekers to stories located in other
    libraries. While they don’t reside in the library, they offer a gateway to more
    knowledge. In Hive, if **drop** any of those tables, the **data will remain**
    but **unlinked** with Hive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why Hive Data Model?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, why does this matter? In a big data world, we’re not dealing with mere
    volumes; we’re dealing with oceans of data. Just like the most efficient libraries
    in the world, we need a system to manage this scale. The Hive data model enables
    you to query vast data sets without getting lost at sea. It provides a familiar
    relational model that lets you partition your data like chapters in a book, bucketing
    similar topics together for quick access.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the `sales_data` the table is stored in [Parquet format](https://parquet.apache.org/docs/file-format/):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Where Data is Stored**: The actual sales data (the raw data) is stored in
    [Parquet](https://parquet.apache.org/docs/file-format/) files within [HDFS](https://www.ibm.com/topics/hdfs).
    These files reside on disk across multiple nodes in a Hadoop cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metadata Management**: Hive Metastore holds the metadata about the `sales_data`
    table. This metadata includes information such as the schema (names and types
    of columns), the location of the [Parquet](https://parquet.apache.org/docs/file-format/)
    files in [HDFS](https://www.ibm.com/topics/hdfs), partitioning and bucketing details,
    and other table properties.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When a query is submitted, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s what happened:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Query Execution**: When a Hive query is run against the `sales_data` table,
    Hive leverages the metadata to understand the structure of the data and determine
    the **location** of the **relevant** [Parquet](https://parquet.apache.org/docs/file-format/)
    files. For queries that only need specific columns, **Hive can efficiently read
    the required data from the columnar Parquet files without scanning the entire
    data set.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Partitioning and Performance**: If `sales_data` is partitioned by a column
    like `date`, Hive will store the data in separate subdirectories for each partition
    in [HDFS](https://www.ibm.com/topics/hdfs). The [Parquet](https://parquet.apache.org/docs/file-format/)
    files in each partition directory contain only the data for that specific date.
    When a query filters by date, **Hive reads only the Parquet files from the relevant
    partition directories, which is a key performance optimization.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In essence, only files under the `US`bucket with the corresponding `date` will
    be read for the query. While data in the `sales_data` table is physically stored
    in [Parquet](https://parquet.apache.org/docs/file-format/) files on [HDFS](https://www.ibm.com/topics/hdfs),
    but Hive manages how this data is **structured**, **queried**, and **processed**.
    The combination of Hive for metadata management and Parquet for data storage results
    in a powerful and efficient system for managing big data.
  prefs: []
  type: TYPE_NORMAL
- en: '**Optimizations Based on Metadata**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The true power of Hive, particularly in handling Big Data, is unveiled through
    its optimization mechanisms which heavily rely on metadata. Here’s how:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Partition Pruning**: One of the most significant optimizations is partition
    pruning, where Hive uses metadata to identify and access only the relevant partitions
    for a query. For instance, if an analyst wants to analyze sales from the first
    quarter of the year, Hive will use the date-related metadata to skip all partitions
    that fall outside this range. This substantially reduces the amount of data read
    and processed, resulting in faster query execution.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Metadata for Cost-Based Optimization**: Hive also uses metadata to perform
    cost-based optimization (CBO). By understanding data statistics like row counts
    and data distribution, Hive can determine the most efficient way to execute a
    query. It can decide whether to use an index, whether to perform a map-side join
    instead of a reduce-side join, or the best order in which to join multiple tables.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Metadata for Column Statistics**: Column statistics such as min/max values,
    number of nulls, and data distribution enable Hive to make informed decisions
    on which execution path will be the most efficient. This can include skipping
    blocks of data that do not meet the query’s filter criteria or choosing the right
    operator for aggregations.'
  prefs: []
  type: TYPE_NORMAL
- en: Through these interactions — querying the Metastore for schema and location
    details, and leveraging metadata for optimizations — Hive provides a robust platform
    for executing complex analytical workloads on large-scale data sets. These optimizations
    ensure that even as data grows exponentially, Hive queries remain performant,
    making it an essential tool in the big data ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Versatility of Hive Metastore: Beyond Hive Integration'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While the Hive Metastore is primarily associated with Apache Hive, its utility
    extends far beyond a single service. The Hive Metastore acts as a central **schema
    repository** and is crucial for integrating a variety of data processing tools
    within the Hadoop ecosystem and beyond. Here’s how the Hive Metastore serves as
    a nexus for multiple services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Broader Hadoop Ecosystem Synergy**: Tools like [Apache Spark™](https://spark.apache.org/)
    and [Apache Pig](https://pig.apache.org/) tap into the Metastore to read Hive
    table metadata, facilitating a cohesive data processing environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BI Tools Compatibility**: BI applications, such as [Tableau](https://www.tableau.com/data-insights),
    connect to the Hive Metastore to visualize and query Hive-managed data, making
    additional data insights more accessible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data Lake Governance**: Platforms like [Apache Atlas](https://atlas.apache.org/#/)
    integrate with the Metastore on data governance, leveraging its metadata for comprehensive
    data lineage and security.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Schema Management and Data Quality**: The Metastore is pivotal for managing
    schema evolution and ensuring data quality across various applications, maintaining
    data integrity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-Platform Data Access**: The Metastore enables compatibility with cloud
    services, allowing seamless access to Hive data across different environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dive Deep:** Elaborate Mindmap of the Hive Library Universe'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A mindmap serves as a graphical method to structure and depict information.
    Let’s encapsulate our discussion on the Hive Metastore using a mindmap illustrated
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3d873363c3e86a1038aec5ee4c35b631.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author via Obsidian
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Embarking on the journey of big data with Hive doesn’t have to be a solo voyage
    through uncharted waters. With this guide, I hope you gain a comprehensive understanding
    of Hive. With these concepts, I hope you’re ready to set the full potential of
    your `sales_data`, and any other data you encounter, turning analytics into actionable
    insights. Welcome aboard, and Happy Data Managing! 📚💾
  prefs: []
  type: TYPE_NORMAL
