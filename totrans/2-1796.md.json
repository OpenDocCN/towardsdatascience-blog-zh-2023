["```py\ncomposer require openai-php/client\n```", "```py\nexport MY_OPENAI_KEY={your key}\n#Replace {your key} by your OpenAI API key\n```", "```py\n<?php\n$yourApiKey = getenv('MY_OPENAI_KEY');\n....//remainder of your script\n?>\n```", "```py\n<?php\ndefine('MY_OPENAI_KEY'. '{your key}');\n?>\n```", "```py\n<?php\nrequire_once(\"path/to/key.php\"); //the path to your key.php file\n$yourApiKey = MY_OPENAI_KEY;\n....//remainder of your script\n?>\n```", "```py\n<?php\n//This line is necessary to load the PHP client installed by Composer\nrequire_once('../vendor/autoload.php');\n\n//Change the next line to $yourApiKey = MY_OPENAI_KEY; if you didn't use an environment variable and set your key in a separate file\n$yourApiKey = getenv('MY_OPENAI_KEY');\n\n//Create a client object\n$client = OpenAI::client($yourApiKey);\n\n//The $prompt variable stores our entire prompt\n$prompt = \"Translate the following text into emoji:\n\nI would like an hamburger without onions.\n\";\n\n//We send our prompt along with parameters to the API\n//It creates a completion task\n$result = $client->completions()->create([\n    'model' => 'text-davinci-003',\n    'prompt' => $prompt\n]);\n\n//After a few seconds the response will be stored in $results\n//We can print the text answered by GPT\necho $result['choices'][0]['text']; \n\n?>\n```", "```py\n'model' => 'ada',\n```", "```py\n$result = $client->completions()->create([\n    'model' => 'text-davinci-003',\n    'prompt' => $prompt,\n    'max_tokens' => 2\n]);\n```", "```py\n<?php\n//This line is necessary to load the PHP client installed by Composer\nrequire_once('../vendor/autoload.php');\n\n//Change the next line to $yourApiKey = MY_OPENAI_KEY; if you set your key in a separate file\n$yourApiKey = getenv('MY_OPENAI_KEY');\n\n//Create a client object\n$client = OpenAI::client($yourApiKey);\n\n//The $prompt variable stores our entire prompt\n$prompt = \"Translate the following text into emoji:\n\nI would like an hamburger without onions.\n\";\n\n//We send our prompt along with parameters to the API\n//It creates a chat completion task\n$result = $client->chat()->create([\n    'model' => 'gpt-3.5-turbo',\n    'messages' => [\n        ['role' => 'user', 'content' => $prompt],\n    ],\n]);\n\n//After a few seconds the respone will be store in results\n//We can print the text answer by GPT\necho $result['choices'][0]['message']['content']; \n\n?>\n```", "```py\nprint_r($result->toArray());\n```", "```py\nArray\n(\n    [id] => chatcmpl-7AJFw****\n    [object] => chat.completion\n    [created] => 1682691656\n    [model] => gpt-3.5-turbo-0301\n    [choices] => Array\n        (\n            [0] => Array\n                (\n                    [index] => 0\n                    [message] => Array\n                        (\n                            [role] => assistant\n                            [content] => 🍔🚫🧅\n                        )\n\n                    [finish_reason] => stop\n                )\n\n        )\n\n    [usage] => Array\n        (\n            [prompt_tokens] => 23\n            [completion_tokens] => 9\n            [total_tokens] => 32\n        )\n```", "```py\n$.ajax({  \n            type:\"POST\",  \n            url:\"call.php\",  \n            data:{ prompt: my_prompt //my_prompt stores the prompt\n            },\n            success:function(data){  \n            data = $.parseJSON(data);\n            $('#my_GPT_response').html(data[\"choices\"][0][\"message\"][\"content\"]);\n            }  \n        }); \n```", "```py\n<?php\n//This line is necessary to load the PHP client installed by Composer\nrequire_once('../vendor/autoload.php');\n\n//At least check that the prompt is sent\n//Of course you should also check the content of the variable according to what you want to do with it\nif (isset($_POST['prompt'])){\n  //Change the next line to $yourApiKey = MY_OPENAI_KEY; if you set your key in a separate file\n  $yourApiKey = getenv('MY_OPENAI_KEY');\n\n  //Create a client object\n  $client = OpenAI::client($yourApiKey);\n\n  //The $prompt variable stores our entire prompt\n  $prompt = \"Translate the following text into emoji:\n\n  \".$_POST['prompt'].\"\n  \";\n\n  //We send our prompt along with parameters to the API\n  //It creates a chat completion task\n  $result = $client->chat()->create([\n      'model' => 'gpt-3.5-turbo',\n      'messages' => [\n          ['role' => 'user', 'content' => $prompt],\n      ],\n  ]);\n  $result = $response->toArray();\n  echo json_encode($result);\n}\n\n?>\n```"]