- en: 5 Signs You’ve Become an Advanced Pandas User Without Even Realizing It
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/5-signs-youve-become-an-advanced-pandas-user-without-even-realizing-it-40b81b82d369](https://towardsdatascience.com/5-signs-youve-become-an-advanced-pandas-user-without-even-realizing-it-40b81b82d369)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Time to take credit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/?source=post_page-----40b81b82d369--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----40b81b82d369--------------------------------)[](https://towardsdatascience.com/?source=post_page-----40b81b82d369--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----40b81b82d369--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----40b81b82d369--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----40b81b82d369--------------------------------)
    ·10 min read·May 12, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e83e79f70c536ea968b37c4d93615614.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Barbara A Lane](https://pixabay.com/users/barbaraalane-756613/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=2144354)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=2144354)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Do you find yourself daydreaming about Pandas DataFrames and Series? Do you
    spend hours on end performing complex manipulations and aggregations, barely noticing
    your back pain and thinking “this is so much fun” all the while?
  prefs: []
  type: TYPE_NORMAL
- en: Well, you might as well be an advanced Pandas user without even realizing it.
    Join the club of Pandas aficionados who have reached this rare level and embrace
    the fact that you are officially a data wizard.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s take a look at five signs that you are in this club.
  prefs: []
  type: TYPE_NORMAL
- en: 0\. Know when to ditch Pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you first started out learning data analysis, it might have seemed like
    Pandas could do everything. Many online courses market Pandas as a one-stop-shop
    for all your data-related needs.
  prefs: []
  type: TYPE_NORMAL
- en: However, with experience, you’ve come to realize that Pandas has many shortcomings.
    Instead of blindly busting it for any data-related task, you know how to take
    a step back and ask yourself, “Is Pandas the best option here?”
  prefs: []
  type: TYPE_NORMAL
- en: There are a few scenarios where the answer to that question is a big fat NO.
    These include real-time data processing, handling massive datasets, high-performance
    computing, and production-level data pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: 1/ For real-time data processing, imagine a cannon that shoots pieces of real-time
    data from some process at 100 sph (shoots per hour :). The pieces are coming fast
    and furious, and you have to catch, process, and save each one mid-air.
  prefs: []
  type: TYPE_NORMAL
- en: Put gently, Pandas will be suffocated by this level of data processing. Instead,
    you should use libraries like Apache Kafka.
  prefs: []
  type: TYPE_NORMAL
- en: '2/ When it comes to massive datasets, Wes McKinney, the creator of Pandas,
    had a rule of thumb:'
  prefs: []
  type: TYPE_NORMAL
- en: The RAM must be 5–10 times bigger than the dataset size for Pandas to work optimally.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “Easy enough”, you would say if it was 2013, but today’s datasets tend to break
    this rule easily.
  prefs: []
  type: TYPE_NORMAL
- en: 3/ High-performance computing is like conducting a symphony. Just as a conductor
    needs to coordinate the action of many different musicians to create a harmonious
    performance, high-performance computing tasks require coordination and synchronization
    of multiple processing elements and threads to achieve the best results.
  prefs: []
  type: TYPE_NORMAL
- en: As for Pandas, it runs solo.
  prefs: []
  type: TYPE_NORMAL
- en: 4/ For production-level data pipelines, think of them as a water supply system.
    Just as it needs to be reliable, scalable, and maintainable to ensure a constant
    supply of clean water, data pipelines need similar qualities. While Pandas may
    take care of cleaning and transformation, other libraries should be used for the
    rest.
  prefs: []
  type: TYPE_NORMAL
- en: It may be difficult to leave the furry arms of Pandas, but don’t feel guilty
    about exploring other options if it isn’t enough.
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I have recently become interested in Polars, a library written in
    Rust that was designed from scratch to address all the limitations of Pandas.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/7-easy-steps-to-switch-from-pandas-to-lightning-fast-polars-and-never-return-b14c66fc85b9?source=post_page-----40b81b82d369--------------------------------)
    [## 7 Easy Steps To Switch From Pandas to Lightning Fast Polars And Never Return'
  prefs: []
  type: TYPE_NORMAL
- en: Edit description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/7-easy-steps-to-switch-from-pandas-to-lightning-fast-polars-and-never-return-b14c66fc85b9?source=post_page-----40b81b82d369--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also play mix-and-match with libraries like `datatable`. Here is a
    code snippet I often use to load large CSVs in a fraction of a second and perform
    my analyses in Pandas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 1\. Need For Speed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pandas is a massive library with many different methods to perform the same
    task. However, if you’re an experienced user, you know which method works best
    in specific situations.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, you’re familiar with the differences between iteration functions
    like `apply`, `applymap`, `map`, `iterrows`, and `itertuples`. You are also aware
    of the trade-offs between using a slower alternative for better functionality
    and using the best one for optimal speed.
  prefs: []
  type: TYPE_NORMAL
- en: While some people may call you fussy, you carefully use `iloc` and `loc` because
    you know that `iloc` is faster for indexing rows, and `loc` is faster for columns.
  prefs: []
  type: TYPE_NORMAL
- en: However, when it comes to indexing values, you avoid these accessors because
    you understand that conditional indexing is orders of magnitude faster with the
    `[query](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html)`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: And you also know that the `replace` function is best friends with `query` to
    replace values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Besides, you are comfortable with different file formats such as CSVs, Parquets,
    Feathers, and HDFs and you consciously choose between them, instead of blindly
    pouring everything into good-old CSVs. You know that choosing the right format
    can help save hours and memory resources down the line.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to file formats, you also have a powerful trick up your sleeve —
    vectorization!
  prefs: []
  type: TYPE_NORMAL
- en: Rather than treating DataFrames as just *data frames*, you think of them as
    matrices and the columns as vectors. Whenever you find yourself itching to use
    an iteration function like `apply` or `itertuples`, you first see if you can use
    vectorization to apply a function to all elements in a column simultaneously,
    rather than one-by-one.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, you prefer to use the underlying NumPy arrays with the `.values` attribute
    instead of Pandas Series because you have observed first-hand how vectorization
    is much faster with NumPy arrays.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-boost-pandas-speed-and-process-10m-row-datasets-in-milliseconds-48d5468e269?source=post_page-----40b81b82d369--------------------------------)
    [## How to Boost Pandas Speed And Process 10M-row Datasets in Milliseconds'
  prefs: []
  type: TYPE_NORMAL
- en: Edit description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-boost-pandas-speed-and-process-10m-row-datasets-in-milliseconds-48d5468e269?source=post_page-----40b81b82d369--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: When all else fails, you don’t call it a day and give up. No.
  prefs: []
  type: TYPE_NORMAL
- en: You turn to either [Cython](https://stackoverflow.com/questions/30270117/how-to-speed-up-pandas-with-cython-or-numpy)
    or [Numba](https://numba.pydata.org/) for truly computationally-intensive tasks
    because you are a pro. While most people learned Pandas basics, you spent a few
    excruciating hours to learn these two technologies. That’s what sets you apart.
  prefs: []
  type: TYPE_NORMAL
- en: As if all these weren’t enough, you have given the [Enhancing performance](https://pandas.pydata.org/pandas-docs/stable/user_guide/enhancingperf.html)
    page of Pandas user guide a thorough read.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. So many data types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pandas offers so much flexibility with data types. Instead of just using plain
    `float`, `int`, and `object` data types, you have made the following two images
    your wallpapers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f7b4f4b040adf6ce0d4c36f25391bf3a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [http://pbpython.com/pandas_dtypes.html](http://pbpython.com/pandas_dtypes.html)
    BSD-3 clause.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/badbe7314f755c3288891f07ef0b8a7c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [https://docs.scipy.org/doc/numpy-1.13.0/user/basics.types.html](https://docs.scipy.org/doc/numpy-1.13.0/user/basics.types.html).
    SciPy docs.'
  prefs: []
  type: TYPE_NORMAL
- en: You deliberately choose the smallest data type possible because you know it
    is very friendly for your RAM. You know that `int8` takes up much less memory
    than `int64`, and the same goes for floats.
  prefs: []
  type: TYPE_NORMAL
- en: You also avoid the `object` data type like the plague since it is the worst
    one there is.
  prefs: []
  type: TYPE_NORMAL
- en: Before reading data files, you observe their top few rows with `cat file_name.extension`
    to decide which data types you want to use for the columns. Then, when using `read_`*
    functions, you fill out the `dtype` parameter for each column instead of letting
    Pandas decide for itself.
  prefs: []
  type: TYPE_NORMAL
- en: You also perform data manipulation *inplace* as much as possible. Without it,
    you know that Pandas spawns off copies of the DataFrames and Series, littering
    your memory. Additionally, you have a very good grip of classes and parameters
    like `pd.Categorical` and `chunksize`.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Friends with Pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If there is one thing that makes Pandas the king of data analysis libraries,
    it’s got to be its integration with the rest of the data ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: For example, by now you must have realized how you can change the plotting backend
    of Pandas from Matplotlib to either Plotly, HVPlot, holoviews, Bokeh, or Altair.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, Matplotlib is best friends with Pandas but for once in a while, you fancy
    something interactive like Plotly or Altair.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Talking about backends, you’ve also noticed that Pandas added a fully-supported
    PyArrow implementation for its `read_*` functions to load data files in the brand-new
    2.0.0 version.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When it was NumPy backend only, there were many limitations like little support
    for non-numeric data types, near-total disregard to missing values or no support
    for complex data structures (dates, timestamps, categoricals).
  prefs: []
  type: TYPE_NORMAL
- en: 'Before 2.0.0, Pandas had been cooking up in-house solutions to these problems
    but they were not as good as some heavy users have hoped. With PyArrow backend,
    loading data is considerably faster and it brings a suite of data types that Apache
    Arrow users are familiar with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Another cool feature of Pandas I am sure you use all the time in JupyterLab
    is styling DataFrames.
  prefs: []
  type: TYPE_NORMAL
- en: Since project Jupyter is so awesome, Pandas developers added a bit of HTML/CSS
    magic under the `.style` attribute so you can spice up plain old DataFrames in
    a way that reveals additional insights
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a56c5db29cb487d67e19c25a4992956b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. The data sculptor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since Pandas is a data analysis and manipulation library, the truest sign you
    are pro is how flexibly you can shape and transform datasets to suit your purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'While most online courses provide the ready-made, cleaned columnar format data,
    the datasets in the wild come in many shapes and forms. For example, one of the
    most annoying formats of data is row-based (very common with financial data):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bd76a5c60fb8f67ede3d384070fb402a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'You must be able to convert row-based format into a more useful format like
    the below example using `[pivot](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.pivot.html)`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2cb5c4b98554dd38571fea9daf3cbb04.png)'
  prefs: []
  type: TYPE_IMG
- en: You may also have to perform the opposite of this operation, called a melt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example with `[melt](https://pandas.pydata.org/docs/reference/api/pandas.melt.html)`
    function of Pandas that turns columnar data into row-based format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/94c66f36d2e14f49d512378c2725015a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/44e4b0a8b5abeb6d7510780a37b23473.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Such functions can be quite challenging to understand and even harder to apply.
  prefs: []
  type: TYPE_NORMAL
- en: There are other similar ones like `pivot_table`, which creates a pivot table
    that can compute different types of aggregations for each value in the table.
  prefs: []
  type: TYPE_NORMAL
- en: Another function is `stack/unstack`, which can collapse/explode DataFrame indices.
    `crosstab` computes a cross-tabulation of two or more factors, and by default,
    computes a frequency table of the factors but can also compute other summary statistics.
  prefs: []
  type: TYPE_NORMAL
- en: Then there’s `groupby`. Even though the basics of this function is simple, its
    more advanced use-cases are very hard to master. If the contents of the Pandas
    groupby function were made into a separate library, it would be larger than most
    in the Python ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Skillfully choosing the right function for a particular situation is a sign
    you are true data sculptor.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/meet-the-hardest-functions-of-pandas-part-i-7d1f74597e92?source=post_page-----40b81b82d369--------------------------------)
    [## Meet the hardest functions of Pandas, Part I'
  prefs: []
  type: TYPE_NORMAL
- en: Edit description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/meet-the-hardest-functions-of-pandas-part-i-7d1f74597e92?source=post_page-----40b81b82d369--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Read parts [two](/meet-the-hardest-functions-of-pandas-part-ii-f8029a2b0c9b)
    and [three](/shape-tables-like-jelly-with-pandas-melt-and-pivot-f2e13e666d6) to
    learn the ins and outs of the functions mentioned in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While the title of the article may have seemed like a playful way to recognize
    advanced Pandas users, my aim was to also provide some guidance for beginners
    looking to up their data analysis skills.
  prefs: []
  type: TYPE_NORMAL
- en: By highlighting some of the quirky habits of advanced users, I wanted to shed
    light on some of the lesser-known but powerful features of this versatile library.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you are a seasoned data pro or just starting out, mastering Pandas can
    be daunting. However, by recognizing the signs of an advanced user and adopting
    some of their techniques and tricks, you can take your data analysis game to the
    next level.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this article has provided some entertainment and inspiration for you
    to explore the depths of Pandas and become a master of data manipulation. Thank
    you for taking reading!
  prefs: []
  type: TYPE_NORMAL
- en: Loved this article and, let’s face it, its bizarre writing style? Imagine having
    access to dozens more just like it, all written by a brilliant, charming, witty
    author (that’s me, by the way :).
  prefs: []
  type: TYPE_NORMAL
- en: For only 4.99$ membership, you will get access to not just my stories, but a
    treasure trove of knowledge from the best and brightest minds on Medium. And if
    you use my referral link, you will earn my supernova of gratitude and a virtual
    high-five for supporting my work.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----40b81b82d369--------------------------------)
    [## Join Medium with my referral link - Bex T.'
  prefs: []
  type: TYPE_NORMAL
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----40b81b82d369--------------------------------)
    ![](../Images/241e86d1ac029974dc37f42263151bef.png)
  prefs: []
  type: TYPE_NORMAL
- en: Image by author via Midjourney.
  prefs: []
  type: TYPE_NORMAL
