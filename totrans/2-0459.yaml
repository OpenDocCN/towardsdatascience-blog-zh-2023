- en: But What is LDA? Explained using mathematical animation like 3Blue1Brown.
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 但什么是LDA？使用类似于3Blue1Brown的数学动画来解释。
- en: 原文：[https://towardsdatascience.com/but-what-is-lda-explained-using-mathematical-animation-like-3blue1brown-4e8825334d84](https://towardsdatascience.com/but-what-is-lda-explained-using-mathematical-animation-like-3blue1brown-4e8825334d84)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/but-what-is-lda-explained-using-mathematical-animation-like-3blue1brown-4e8825334d84](https://towardsdatascience.com/but-what-is-lda-explained-using-mathematical-animation-like-3blue1brown-4e8825334d84)
- en: '[](https://huonglanchu.medium.com/?source=post_page-----4e8825334d84--------------------------------)[![Lan
    Chu](../Images/813b24f60d6cfe2c9273e064d850c7fe.png)](https://huonglanchu.medium.com/?source=post_page-----4e8825334d84--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4e8825334d84--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4e8825334d84--------------------------------)
    [Lan Chu](https://huonglanchu.medium.com/?source=post_page-----4e8825334d84--------------------------------)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://huonglanchu.medium.com/?source=post_page-----4e8825334d84--------------------------------)[![Lan
    Chu](../Images/813b24f60d6cfe2c9273e064d850c7fe.png)](https://huonglanchu.medium.com/?source=post_page-----4e8825334d84--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4e8825334d84--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4e8825334d84--------------------------------)
    [Lan Chu](https://huonglanchu.medium.com/?source=post_page-----4e8825334d84--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4e8825334d84--------------------------------)
    ·13 min read·Jun 5, 2023
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----4e8825334d84--------------------------------)
    ·13分钟阅读·2023年6月5日
- en: --
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: And impress your colleagues ;)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让你的同事们印象深刻 ;)
- en: Have you ever struggled with explaining mathematical concepts? [3Blue1Brown](https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw)
    is my favourite Youtube channel when it comes to finding cool videos and animations
    explaining Math and Stats topics. I was the one who never really understood Binomial
    distribution, until I watched the visual explanation on this channel 🤷‍♀️
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾经为解释数学概念而苦恼过？[3Blue1Brown](https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw)是我最喜欢的YouTube频道，它提供了很酷的数学和统计主题的视频和动画。直到我观看了这个频道上的可视化解释，我才真正理解了二项分布🤷‍♀️
- en: Wouldn’t it be awesome if you can learn how these animations are created so
    you can create similar animations to explain data science concepts and impress
    your teammates and managers? 🤩😍
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能够了解这些动画是如何制作的，以便你能创建类似的动画来解释数据科学概念，并让你的队友和经理们印象深刻，那岂不是很棒吗？🤩😍
- en: '![](../Images/7ab098d34071bfd7946379f5053adbe6.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7ab098d34071bfd7946379f5053adbe6.png)'
- en: LDA generative process. Gif by author.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: LDA生成过程。作者制作的Gif。
- en: Well, you are in luck because you can use [**Manim**](https://docs.manim.community/en/stable/)
    for that! 😍 It is a free and open-source project that allows us to create mathematical
    animation using Python, originally written by [**Grant** **Sanderson**](https://twitter.com/3blue1brown)andnow
    maintained by the Manim Community.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，你真幸运，因为你可以使用[**Manim**](https://docs.manim.community/en/stable/)来实现这一点！😍它是一个免费的开源项目，允许我们使用Python创建数学动画，最初由[**Grant**
    **Sanderson**](https://twitter.com/3blue1brown)编写，现在由Manim社区维护。
- en: In this article, we will learn how to create some basic elements in Manim and
    apply what we will learn to animate how a document is generated using Latent Dirichlet
    Allocation (LDA). If you wish to understand how LDA works, I have [an article](https://medium.com/towards-data-science/what-do-countries-talk-about-at-the-un-general-debate-topic-modelings-using-lda-19873cf00fe0)
    that will be helpful. In this post, we will take it for granted that you understand
    how LDA works. Alright, let’s get started.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将学习如何在Manim中创建一些基本元素，并应用我们所学的内容来动画展示如何生成文档，使用的是Latent Dirichlet Allocation
    (LDA)。如果你希望理解LDA的工作原理，我有[一篇文章](https://medium.com/towards-data-science/what-do-countries-talk-about-at-the-un-general-debate-topic-modelings-using-lda-19873cf00fe0)可以帮助你。在这篇文章中，我们将假定你已经理解了LDA的工作原理。好了，让我们开始吧。
- en: What is Manim
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Manim
- en: '![](../Images/75a5d38b37166bc1d3fabc48abec793d.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/75a5d38b37166bc1d3fabc48abec793d.png)'
- en: 'Manim is a python library that allows users to create precise mathematical
    animations like the videos of [3Blue1Brown](https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw).
    Manim is built with the following main components and it requires a recent version
    of Python (3.7–3.10) to work:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Manim是一个Python库，它允许用户创建精确的数学动画，类似于[3Blue1Brown](https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw)的视频。Manim由以下主要组件构建，并且需要较新的Python版本（3.7–3.10）才能运行：
- en: Python
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python
- en: '[pycairo](https://cairographics.org/pycairo/) for making the figures'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[pycairo](https://cairographics.org/pycairo/) 用于制作图形'
- en: '[FFmpeg](https://ffmpeg.org/download.html#build-windows) for converting frames
    to video'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[FFmpeg](https://ffmpeg.org/download.html#build-windows) 用于将帧转换为视频'
- en: '[LaTeX](https://miktex.org/download) for writing text and formula'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[LaTeX](https://miktex.org/download) 用于编写文本和公式'
- en: Manim Building blocks
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Manim 构建模块
- en: '![](../Images/d2dff97ef88e7a5f171a4c3c06f5d207.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d2dff97ef88e7a5f171a4c3c06f5d207.png)'
- en: '[Manim example](https://docs.manim.community/en/stable/examples.html)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[Manim 示例](https://docs.manim.community/en/stable/examples.html)'
- en: 'Essentially, manim puts together three concepts to produce mathematical animations:
    the [**Mobject**](https://docs.manim.community/en/stable/reference/manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject),
    the [**Animation**](https://docs.manim.community/en/stable/reference/manim.animation.animation.Animation.html#manim.animation.animation.Animation),
    and the [**Scene**](https://docs.manim.community/en/stable/reference/manim.scene.scene.Scene.html#manim.scene.scene.Scene).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，manim 将三个概念结合起来以生成数学动画： [**Mobject**](https://docs.manim.community/en/stable/reference/manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject)，
    [**Animation**](https://docs.manim.community/en/stable/reference/manim.animation.animation.Animation.html#manim.animation.animation.Animation)，
    和 [**Scene**](https://docs.manim.community/en/stable/reference/manim.scene.scene.Scene.html#manim.scene.scene.Scene)。
- en: '**Mobject** is short for Mathematical Object. They are the basic building blocks
    for all manim animations. Each class that derives from Mobjects represents an
    object such as shapes, equations, or diagrams, that can be animated and displayed
    on the screen.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**Mobject** 是 Mathematical Object 的缩写。它们是所有 manim 动画的基本构建块。每个从 Mobjects 派生的类代表一个可以在屏幕上动画化和显示的对象，例如形状、方程或图表。'
- en: At the heart of manim is **Animation**, which is procedures that interpolate
    between two Mobjects. It defines the transformations and movements that can be
    applied to Mobjects such as [rotate](https://docs.manim.community/en/stable/reference/manim.animation.rotation.Rotate.html#manim.animation.rotation.Rotate),
    or [fadeout](https://docs.manim.community/en/stable/reference/manim.animation.fading.FadeOut.html#manim.animation.fading.FadeOut).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: manim 的核心是 **Animation**，这是在两个 Mobjects 之间进行插值的过程。它定义了可以应用于 Mobjects 的变换和运动，例如
    [旋转](https://docs.manim.community/en/stable/reference/manim.animation.rotation.Rotate.html#manim.animation.rotation.Rotate)
    或 [淡出](https://docs.manim.community/en/stable/reference/manim.animation.fading.FadeOut.html#manim.animation.fading.FadeOut)。
- en: The **Scene** class is the canvas for your animations. Every Mobject has to
    be `[added](https://docs.manim.community/en/stable/reference/manim.scene.scene.Scene.html#manim.scene.scene.Scene.add)`
    to a scene to be displayed and every animation has to be `[played](https://docs.manim.community/en/stable/reference/manim.scene.scene.Scene.html#manim.scene.scene.Scene.play)`
    by a scene.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**Scene** 类是你动画的画布。每个 Mobject 都必须被 `[添加](https://docs.manim.community/en/stable/reference/manim.scene.scene.Scene.html#manim.scene.scene.Scene.add)`
    到一个场景中才能显示，每个动画也必须通过场景 `[播放](https://docs.manim.community/en/stable/reference/manim.scene.scene.Scene.html#manim.scene.scene.Scene.play)`。'
- en: Setting up the Environment
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置环境
- en: 'You can create a new environment and install Manim using conda by running:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令创建一个新的环境并使用 conda 安装 Manim：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It is a good practice to install manim with conda since all dependencies like
    ffmpeg, pycairo etc… are handled by conda, you don’t need to worry about having
    to install additional dependencies. LaTeX is an optional dependency and will not
    be installed with conda. In order to make use of Manim’s interface to LaTeX, for
    example, to render equations, you can install Latex for macOS by running:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最好通过 conda 安装 manim，因为 conda 会处理所有的依赖项，如 ffmpeg、pycairo 等，你不需要担心安装额外的依赖项。LaTeX
    是一个可选的依赖项，不会通过 conda 安装。为了使用 Manim 的 LaTeX 接口，例如渲染公式，你可以通过运行以下命令来为 macOS 安装 LaTeX：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: while on Ubuntu, you can run
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上，你可以运行
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: At this point, you should have a working installation of Manim. Perfect, let
    us get started.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该已经成功安装了 Manim。很好，我们开始吧。
- en: '**Creating Basic elements using Manim**'
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**使用 Manim 创建基本元素**'
- en: In this section, we will learn how to create basic Mobjects such as an arrow,
    a curve and a bar chart using Manim. This will prepare us for creating the animation
    of LDA generative process in the next session.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将学习如何使用 Manim 创建基本的 Mobjects，比如箭头、曲线和条形图。这将为我们在下一节中创建 LDA 生成过程的动画做好准备。
- en: Creating Basic Elements - an Arrow
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基本元素 - 一个箭头
- en: 'First, let us import all of the contents of the manim library:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们导入 manim 库的所有内容：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In Manim, the code for scripting an animation is typically written inside the
    `construct()` method of the `Scene` class. Within this method, you can create
    objects, display them on the screen, and animate them. For example, you can create
    two arrows using the `Arrow` class and position them next to each other using
    the `shift()` method, which is used for adjusting the position of a `Mobject`
    . Finally, we will use `Create` class to initialize the animation of the objects
    and add an animation to the scene by calling the `play()` method:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save the script above in a `Arrows.py` file. Now, in the project folder where
    you store this file, run the following command to generate a video for the script
    (the “-p” allow you to display the video after the animation renders)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/0fae877239b6ed8b55bf733b7aae9ee3.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: Creating Basic Elements - Bar chart
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can also create a bar chart using the `BarChart` class from Manim. In the
    example below, I create a bar chart using the following configuration:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/386d08cc50025a753c3ca1fe31db5b3a.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: But just creating a bar chart is not much fun. Let’s see if we can turn the
    initial bar chart to an ending bart chart. To do that, we will use the powerful
    `[animate(](https://docs.manim.community/en/stable/reference/manim.mobject.mobject.Mobject.html#manim.mobject.mobject.Mobject.animate))`
    method.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '**.animate**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '`animate()` is a property of all Mobjects that allows you to depict how objects
    change over time such as changing position, color, size or shape of an object
    during the course of the animation. In the following example, we will create animations
    for the first bar chart that already exist in the scene and turn it into the second
    bar chart using `animate.become()` :'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/7cce2fed395a29c68ee0b762713b5022.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: Create Basic Element - a Curve
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Manim, `Axes` is a class that is used to create a visual representation
    of the coordinate system where mathematical objects like graphs, points, lines
    can be added. In this example, we will use `Axes` class to plot the Sin function.
    First, the `Axes` object is created with some specific configurations. Next, we
    will get a name for the sin curve using `axes.get_axis_labels()`method. The labels
    are added to the `axes` using the `add()` method and finally, `VGroup` class is
    used to group `axes` and `sin_curve` and move them together. The resulting animation
    will display the sin function as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/47700f185d2514eed72d938bb464af83.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: ​
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create LDA Animation with Manim
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cool, by now you have learnt how to create some elements such as Arrow, Curve
    and Bar chart in Manim. How about applying what we have learnt so far to animate
    how LDA model generates a document?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Basically, LDA generative process contains two components : topic distribution
    and word distribution. Hence, we will animate how a document is created with LDA
    by animating how word and topic are selected.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'LDA makes use of *Dirichlet and multinomial distributions*. However, to be
    able to visualize the data in 2 dimensions, we will consider a simpler example
    in which our document only contains two topics: **food 🍕 and animal 🐖**. This
    allows us to vizualize topic distribution using the Beta distribution instead
    of Dirichlet distribution.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: LDA使用*Dirichlet和多项式分布*。然而，为了能够在二维中可视化数据，我们将考虑一个更简单的示例，其中我们的文档只包含两个主题：**食物 🍕
    和动物 🐖**。这使我们可以使用Beta分布而不是Dirichlet分布来可视化主题分布。
- en: Create the topic distribution
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建主题分布
- en: '**Probability Density Curve (PDF) of beta distribution**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**Beta分布的概率密度曲线 (PDF)**'
- en: 'We will start by creating the probability density curve of beta distribution.
    How to draw that curve? Yes, you are right! We will begin by setting up an `Axes`
    object on which we can draw the PDF. I will use some pre-defined configuration
    as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建Beta分布的概率密度曲线开始。如何绘制这条曲线？没错！我们将首先设置一个`Axes`对象，以便在其上绘制PDF。我将使用以下一些预定义的配置：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After setting up the Axes object, it would be nice to add labels for the x-axis
    and y-axis by calling the `get_x_axis_label()` and `ax.get_y_axis_label()` methods.
    To write the labels, we will use the Latex syntax provided by the `Tex` class.
    With some more cosmetic improvements, the labels are ready:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好Axes对象后，通过调用`get_x_axis_label()`和`ax.get_y_axis_label()`方法为x轴和y轴添加标签会很不错。为了书写标签，我们将使用`Tex`类提供的LaTeX语法。经过一些美化处理，标签就准备好了：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/58039398ea22ee81a6b6518114a054f6.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/58039398ea22ee81a6b6518114a054f6.png)'
- en: 'Great, we will now create the PDF curve by creating a beta distribution object
    using parameter 𝛼 and 𝛽 from the class and add that curve to the Axes object:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，我们现在将通过使用类中的参数𝛼和𝛽创建一个beta分布对象来创建PDF曲线，并将该曲线添加到Axes对象中：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/55c2fbb2d85b56f31dc1d8a2f9de001b.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/55c2fbb2d85b56f31dc1d8a2f9de001b.png)'
- en: 'Beautiful! Every good plot has a title, let’s add a title for the PDF curve
    using `Tex` class:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！每个好的图表都有一个标题，让我们使用`Tex`类为PDF曲线添加一个标题：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To show that the PDF curve uses alpha and beta parameters, I want to include
    them in the animation by creating two `Tex` objects and show it next to the ax
    using `.next_to()` method . The following block of code will just do the job:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示PDF曲线使用了alpha和beta参数，我想通过创建两个`Tex`对象并使用`.next_to()`方法将其显示在轴旁边来将其包含在动画中。以下代码块将完成这项工作：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, we will use the `Write` and `Create` classes to write the alpha, beta
    values and draw the axes and PDF curve on the screen:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用`Write`和`Create`类来在屏幕上写入alpha、beta值，并绘制轴和PDF曲线：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/ffb7ea4f40a094df822942faadeaabb6.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ffb7ea4f40a094df822942faadeaabb6.png)'
- en: 'Good. The next thing to do is to animate how a topic distribution is created
    during the LDA process. Our document contains 2 topics: **food 🍕 and animal 🐖**.
    We will create a function to return a `BarChart` object that shows the probability
    of each topic appearing in the document. The beta distribution takes alpha and
    beta as parameters, additional styling and customization options can be passed
    through `kwargs`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。接下来要做的是动画演示LDA过程中如何创建主题分布。我们的文档包含2个主题：**食物 🍕 和动物 🐖**。我们将创建一个函数来返回一个`BarChart`对象，显示每个主题在文档中出现的概率。Beta分布以alpha和beta作为参数，额外的样式和自定义选项可以通过`kwargs`传递：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, we will create a manim bar chart object `bar` by initializing the BarChart
    and add the bar chart to the bottom right of the screen. Next, we want to label
    each bar with “food” and “animal” by creating Tex objects that display labels
    and position the labels below the corresponding bars using `.next_to()`method.
    Finally, we draw and display the creation of the bar chart using `Create` class:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过初始化BarChart创建一个manim条形图对象`bar`，并将条形图添加到屏幕的右下角。接下来，我们希望通过创建显示标签的Tex对象来标记每个条形，并使用`.next_to()`方法将标签放置在相应条形的下方。最后，我们使用`Create`类绘制并显示条形图的创建过程：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/b1257dd0a3ce919db43eaa1a49e0a6da.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b1257dd0a3ce919db43eaa1a49e0a6da.png)'
- en: 'To simulate the resampling from the beta distribution many times, we will create
    loops in which for each iteration, a new sample is generated, corresponding probabilities
    are calculated, and the bar chart’s values are updated accordingly using the `change_bar_values`
    method:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟从Beta分布中进行多次重采样，我们将创建循环，在每次迭代中生成一个新样本，计算相应的概率，并使用`change_bar_values`方法相应地更新条形图的值：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Combine everything together, and we have the following animation:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有内容结合起来，我们就有了以下动画：
- en: '![](../Images/24dfd86a06b18508ace184157e44c550.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/24dfd86a06b18508ace184157e44c550.png)'
- en: If you see an animation of a PDF curve and a bar chart being drawn, Congratulations!
    You just wrote your very first Manim scene from scratch to display LDA topic distribution.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到一个 PDF 曲线和柱状图被绘制的动画，恭喜你！你刚刚从头开始编写了你的第一个 Manim 场景，用来显示 LDA 主题分布。
- en: Create the word distribution
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建词汇分布
- en: 'Great, we have the topic distribution. However, a topic should contain words
    belong to it as well. Let’s assume that our vocabulary consists of the following
    ten words:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，我们有了主题分布。然而，一个主题还应该包含属于它的词汇。假设我们的词汇表包括以下十个词：
- en: '{🍌,🥝,🍋,🍓,🍅,🐥,🐖,🐑,🐊,🦓}'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '{🍌,🥝,🍋,🍓,🍅,🐥,🐖,🐑,🐊,🦓}'
- en: 'and that each document will consist of only 5 words. To visualize the generative
    process of LDA, we will show both the topic distribution and the word distribution
    per topic, in two separate bar charts. The topic distribution will be the same
    as what we did before:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 并且每个文档将仅包含 5 个词。为了可视化 LDA 的生成过程，我们将分别显示每个主题的主题分布和词汇分布，两个单独的柱状图。主题分布将与我们之前做的相同：
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Unfortunately, for the word distribution, we cannot pass a list of emojis to
    `bar_names` and this has to be added manually one by one in the correct spot.
    We will create a helper function for this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，对于词汇分布，我们不能将表情符号列表传递给 `bar_names`，这必须一个个手动添加到正确的位置。我们将为此创建一个辅助函数：
- en: '[PRE19]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, we load an SVG symbol from disk using `symbol = SVGMobject(f”icons/{word}.svg”)`
    and move it right below the corresponding bar using `.next_to()` method. The `BarChart`
    consists of 10 bars (due to 10 words in our vocabulary), and the “ith” bar, can
    be referenced with `bar_chart.bars[i].`
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 `symbol = SVGMobject(f”icons/{word}.svg”)` 从磁盘加载一个 SVG 符号，并使用 `.next_to()`
    方法将其移动到对应的柱子正下方。`BarChart` 包含 10 根柱子（因为我们的词汇表中有 10 个词汇），并且第“i”根柱子可以通过 `bar_chart.bars[i]`
    来引用。
- en: '![](../Images/3f5a839d808bffb35677acdc711f8208.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3f5a839d808bffb35677acdc711f8208.png)'
- en: 'To illustrate the random picking of topics and words, we add two arrows to
    the scene:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明主题和词汇的随机选择，我们在场景中添加两个箭头：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: which draws a small vertical line and `.add_tip()` adds an arrowhead to it.
    These arrows will appear, disappear and move around to illustrate which topic
    and which word was picked during the random picking process.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这将绘制一条小的垂直线，`.add_tip()` 将箭头头部添加到线条上。这些箭头将出现、消失并移动，以说明在随机选择过程中选择了哪个主题和哪个词汇。
- en: 'We start the animation by sampling from a Dirichlet distribution to obtain
    the word distribution per topic:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过从 Dirichlet 分布中采样来开始动画，以获取每个主题的词汇分布：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '​and initialize the animation by letting each bar transform from zero to its
    initial value:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ​并通过让每根柱子从零变换到其初始值来初始化动画：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![](../Images/1b139adacc126e61f442043dad0cbefb.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1b139adacc126e61f442043dad0cbefb.png)'
- en: ​
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: ​
- en: 'Next, we randomly sample a topic from the topic distribution (this is done
    by multinominal distribution) and visualize the choice using an arrow. This can
    be achieved by either fading them into the scene if it’s the first topic/word
    that is chosen:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们从主题分布中随机采样一个主题（这是通过多项分布完成的），并使用箭头可视化选择。这可以通过在选择的第一个主题/词汇时将其淡入场景来实现：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](../Images/7e3bfb9ebe6ae1b394fb49b70095b6dd.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7e3bfb9ebe6ae1b394fb49b70095b6dd.png)'
- en: 'or by playing a movement animation when a new topic/word is chosen:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 或者通过播放一个运动动画，当选择了新的主题/词汇时：
- en: '[PRE24]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![](../Images/840b6bf0829e2321e47b933a0f6b438e.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/840b6bf0829e2321e47b933a0f6b438e.png)'
- en: 'Now that a topic and word are chosen, we can finally start writing our document.
    We make a copy of the chosen word and animate a movement of that word into the
    document that we are generating:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在选择了主题和词汇，我们可以最终开始编写我们的文档。我们复制所选的词汇，并将该词汇动画化地移动到我们正在生成的文档中：
- en: '[PRE25]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](../Images/9b26f04bbcdeebccd5c397cfd1c7a1bb.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9b26f04bbcdeebccd5c397cfd1c7a1bb.png)'
- en: 'We repeat the process of choosing a topic and word for as many times as we
    want the document size to be, which is 5 words in our example. To transition to
    the next document, we fade out the arrows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重复选择主题和词汇的过程，直到达到我们希望的文档大小，在我们的例子中是 5 个词。要过渡到下一个文档，我们使箭头渐隐：
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'and create a new row to write a new document:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 并创建一个新行以编写新文档：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![](../Images/bad91f9cf6781a523519093147697866.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bad91f9cf6781a523519093147697866.png)'
- en: 'and resample the word/topic distributions:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 并重新采样词汇/主题分布：
- en: '[PRE28]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![](../Images/d7f37d8530155f6cfa99b18ce24a01f9.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d7f37d8530155f6cfa99b18ce24a01f9.png)'
- en: and repeat the whole process for as many documents as we want. In the following
    example we create 3 documents, where each document contains 5 words.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 并对任意多个文档重复整个过程。在下面的示例中，我们创建了 3 个文档，每个文档包含 5 个词。
- en: '![](../Images/7ab098d34071bfd7946379f5053adbe6.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7ab098d34071bfd7946379f5053adbe6.png)'
- en: Recap
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Congratulations! You have just created a LDA generative process in Manim. In
    this article, we have learnt:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你刚刚在 Manim 中创建了一个 LDA 生成过程。在这篇文章中，我们学习了：
- en: 'Three main building blocks of Manim:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Manim 的三个主要构建模块：
- en: 'Mobjects: Mathematical objects that can be displayed on the screen, such as
    `Circle`, `Square`, `Axes, etc.`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mobjects：可以在屏幕上显示的数学对象，例如 `Circle`、`Square`、`Axes` 等。
- en: Animations that defines the transformations and movements that can be applied
    to Mobjects.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义可以应用于 Mobjects 的转换和移动的动画。
- en: 'Scenes: A Scene is the canvas of your animation thtat display the Mobjects.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 场景：场景是你动画的画布，显示 Mobjects。
- en: 2\. Create basic Manim objects such as Arrow, Bar chart and Curve
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 创建基本的 Manim 对象，例如箭头、条形图和曲线
- en: 3\. Animate the process of generating a document using LDA.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 动画化生成文档的过程，使用 LDA。
- en: Manim offer many more capabilities that go far beyond what I’ve covered in this
    post. The best way to learn is through doing, so I encourage you to explore further
    and experiment with your own examples. And I would love to see your animations!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Manim 提供了许多超出本文范围的功能。最好的学习方式是通过实践，因此我鼓励你进一步探索并尝试自己的示例。我也很期待看到你的动画！
- en: References
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'Manim documentation: [Manim Community v0.17.3](https://docs.manim.community/en/stable/index.html)'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Manim 文档：[Manim Community v0.17.3](https://docs.manim.community/en/stable/index.html)
- en: '[How to Create Mathematical Animations like 3Blue1Brown Using Python | by Khuyen
    Tran | Towards Data Science](/how-to-create-mathematical-animations-like-3blue1brown-using-python-f571fb9da3d1)'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[如何使用 Python 创建类似 3Blue1Brown 的数学动画 | 作者 Khuyen Tran | Towards Data Science](/how-to-create-mathematical-animations-like-3blue1brown-using-python-f571fb9da3d1)'
- en: Code
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码
- en: Full code that produces all animations can be found [here](https://github.com/lanchuhuong/manim_lda/tree/main).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 产生所有动画的完整代码可以在 [这里](https://github.com/lanchuhuong/manim_lda/tree/main) 找到。
