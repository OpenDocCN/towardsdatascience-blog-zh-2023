- en: How to Build Waterfall Charts with Plotly Graph Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-build-waterfall-charts-with-plotly-graph-objects-a8354543c42e](https://towardsdatascience.com/how-to-build-waterfall-charts-with-plotly-graph-objects-a8354543c42e)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Plotly Express doesn’t implement waterfall charts but we can create a helper
    function that leverages Plotly Graph Objects instead
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@alan-jones?source=post_page-----a8354543c42e--------------------------------)[![Alan
    Jones](../Images/359379fab1d6685ff08080b98173e67c.png)](https://medium.com/@alan-jones?source=post_page-----a8354543c42e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a8354543c42e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a8354543c42e--------------------------------)
    [Alan Jones](https://medium.com/@alan-jones?source=post_page-----a8354543c42e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a8354543c42e--------------------------------)
    ·8 min read·Sep 14, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7e1bc52e691c1d6e2bec6531912b3380.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Plotly gives you two ways of drawing charts: Graph Objects and Plotly Express.
    The first is a set of low-level functions that provide maximum flexibility for
    creating charts, while Plotly Express gives us a set of easy-to-use methods that
    implement the most commonly used charts.'
  prefs: []
  type: TYPE_NORMAL
- en: Plotly Express functions are essentially wrappers around Plotly Graph Objects.
  prefs: []
  type: TYPE_NORMAL
- en: But there is no Waterfall Chart method in Plotly Express, so we are going to
    present a waterfall chart function that is simple to use for what is probably
    the most common use case and also has the flexibility to address more complex
    usage.
  prefs: []
  type: TYPE_NORMAL
- en: Waterfall charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Waterfall charts are a bit like bar charts that have been split over a number
    of columns. They are often used to show the increase and decrease of a value over
    time. For example, take the following data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The labels represent amounts of cash in different categories that have either
    been received or spent and the data are the actual amounts (in dollars, hundreds
    of dollars, thousands… whatever).
  prefs: []
  type: TYPE_NORMAL
- en: We can usefully represent this data as a waterfall chart where the first column
    is the starting point, the last column is the endpoint and the columns in between
    show the cash flow that resulted in the final sum.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/81a6702a8bf88267e2a53847b3ffeaa8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Typically, a waterfall chart distinguishes positive and negative amounts by
    colour — in this case, green for positive and red for negative. The final column
    is given a third colour as this represents the final result rather than a positive
    or negative change.
  prefs: []
  type: TYPE_NORMAL
- en: This is a typical use case although more complex charts are possible.
  prefs: []
  type: TYPE_NORMAL
- en: In her book *Storytelling with Data*[1], Cole Nussbaumer Knaflic (CNK) regards
    the Waterfall Chart as one of her 12 essential charts and gives an example of
    how it can be used to describe changes in employment over time. Here is my version
    of her chart.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7136b6890eebf61a22016fa80dec42b6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: You can see that we begin with a headcount of 100 and this is increased and
    decreased for various reasons until we end up with a final headcount of 116.
  prefs: []
  type: TYPE_NORMAL
- en: CNK prefers a single colour for all of the columns and, strictly speaking, the
    colours in the previous chart are indeed redundant as it is clear from the labels
    and the direction of the column (up or down) whether the change is positive or
    negative.
  prefs: []
  type: TYPE_NORMAL
- en: I understand CNK’s point of view, the chart rendered in her style probably looks
    better than the colourful one, but I also see that, particularly with a more complex
    chart, the colours could be helpful. Here’s a variation on the headcount chart
    where the positive and negative changes are mixed and you might agree that the
    red/green version is a little clearer (if, perhaps, not as aesthetically pleasing).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ba4d606d37f63eaf4557fd6fa385f514.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cfe2e84b4ddbc4befc86d09ce73a4a84.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The solution that we shall develop will default to the colourful version but
    will also let you change the colour scheme if you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: Using the function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I’ve implemented the waterfall function in a separate file — `plotlyhelper.py`—
    so that it can be used as a library function. After importing the library, simple
    usage is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We can use the function in any context where a Plotly chart can be rendered,
    for example, in a Flask application, a Jupyter Notebook, or a Streamlit app. We’ll
    look at the implementation later but here is how to use it in a Streamlit app.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Which will give you two versions of the ‘headcount’ chart in two columns.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/45393a19fee2db3832ad4badee45801f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The obligatory parameters are the labels and the data, and in the examples above,
    we also specify a title (this defaults to an empty string if you don’t set it).
    Using these parameters we will get the default — colourful — version of the chart.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the colour scheme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the second example, we also set the parameter `color` which defines the colour
    for all of the bars in the chart. This can be any value that is accepted by Plotly
    as a colour.
  prefs: []
  type: TYPE_NORMAL
- en: We can also change the individual bar colours using the parameters `bicolor,
    dcolor, tcolor,` and `ccolor` which define the colours for an incrementing bar,
    a decrementing bar, the final bar and the colour of the connecting line between
    the bars. These default to “Green”, “Red”, “Blue”, and “Dark Grey”, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: If you set the `color` parameter this overrides any other colour that you may
    have set.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s an example of how to set the individual colours.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Which draws this.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b300de157c96670f56188bafa64bfef5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Maybe we could have competition for the most garish colour scheme.
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of other parameters that we also can explore.
  prefs: []
  type: TYPE_NORMAL
- en: Annotations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The labels on the individual bars default to the data but can be customised
    with the `annotation` parameter. This is an array of labels that can be strings
    or numeric values and will be displayed on the bars. Here, for example, only the
    first and last bars are labelled.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d6c7d4b3d9d14607ff162ebc033b9968.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: If no labels are required then `annotation` can be set to an empty list.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple time periods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes we want to represent a series of time periods with intermediate totals.
    We can do this by specifying the type of each bar. In the default chart, all the
    bars except the last one are ‘relative’ meaning that they will be displayed as
    positive or negative values relative to the current running total. The final bar
    is of the type ‘total’ which means that it will show the current value of the
    running total.
  prefs: []
  type: TYPE_NORMAL
- en: To represent multiple time periods we use intermediate ‘total’ bars. Take this
    example.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/66e7ad5fcfb578cc3ad57df6dbd1fdb3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Here we are showing profit and loss amounts for two quarters with an intermediate
    total for ‘Q1’ and a final total for ‘Q2’.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this we specify a list of bar types and pass it as the parameter
    `measure`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You should note that the data array element that maps onto the intermediate
    total is given the correct value of 130 but, unlike the other bars, this is *not*
    used to calculate the length of the bar; the bar length is calculated automatically
    from the previous values, and the data value for that bar is only used as an annotation.
  prefs: []
  type: TYPE_NORMAL
- en: The waterfall helper function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All of which brings us to the actual implementation.
  prefs: []
  type: TYPE_NORMAL
- en: While Plotly Express does not implement a Waterfall Chart, Graph Objects (GO)
    include such a function. It’s just a bit tedious to use — which is why I developed
    this simple wrapper around it. As you can see from the code below, the GO waterfall
    function requires you to set many parameters. The helper function eliminates the
    need for this by setting defaults and/or calculating values — the user only needs
    to set two or three essential parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can cut and paste this code into your own code or visit my website to download
    the function and a Streamlit app that implements all of the examples above. As
    a bonus, the downloadable Streamlit code will also include a version of the Waterfall
    chart implemented in Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you have found this introduction to Waterfall Charts and their implementation
    in Plotly Graph Objects useful. The lack of a Waterfall Chart in Plotly Express
    is unimportant if you include a function like this in a helper library and it
    can make life much simpler when used across multiple projects.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading and please take a look at my [website](http://alanjones2.github.io)
    where you can find links to other articles and code. You can also subscribe to
    my occasional [newsletter](http://technofile.substack.com) where I publish some
    full articles as well as links to stuff that I have published on Medium.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[*Storytelling with Data, a data visualization guide for business professionals*](https://amzn.to/3dJlMaS),
    Cole Nussbaumer Knaflic, Wiley, 2015 (affiliate link)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: English spelling — I am fully aware that I mix English and American spelling
    in this article but I am being consistent — honestly, I am. I use the English
    spelling of ‘colour’ in the text because… well, I’m English. But I use the American
    spelling ‘color’ in my code because I’m a programmer — and I am used to the fact
    that most programming languages use American English.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
