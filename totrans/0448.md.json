["```py\nimport math\n\nfrom typing import Generator\n\n# Type aliases\nNumber = int | float\nPowerType = int | float\nPipelineItems = Iterable[Number]\n\ndef double(x: Number) -> Number:\n    return x**2\n\ndef power(x: Number, n: PowerType) -> Number:\n    return x**n\n\ndef add(x: Number, y: Number) -> Number:\n    return x + y\n\ndef calculate(x: Number) -> Number:\n    x = power(x, 0.5)\n    x = double(x)\n    x = add(x, 12)\n    x = power(x, 2)\n    x = add(x, math.pi**0.5)\n    x = round(x, 2)\n    x = add(x, 75)\n    return x\n\ndef get_generator_pipeline(\n    items: PipelineItems,\n) -> Generator[Number, None, None]:\n    \"\"\"Create generator pipeline applying calculate() to each item.\"\"\"\n    return (calculate(x_i) for x_i in items)\n```", "```py\n>>> items = [1.12, 2.05, 1.122, -0.220002, 7.0036]\n>>> pipeline = get_generator_pipeline(items)\n>>> list(pipeline)\n```", "```py\nfrom typing import Dict, Generator, Iterable, List, Set\n\ndef get_generator_pipeline(\n    items: PipelineItems,\n) -> Generator[Number, None, None]:\n    \"\"\"Create generator pipeline applying calculate() to each item.\"\"\"\n    return (calculate(x_i) for x_i in items)\n\ndef get_listcomp_pipeline(items: PipelineItems) -> List[Number]:\n    \"\"\"Create listcomp pipeline applying calculate() to each item.\"\"\"\n    return [calculate(x_i) for x_i in items]\n\ndef get_setcomp_pipeline(items: PipelineItems) -> Set[Number]:\n    \"\"\"Create setcomp pipeline applying calculate() to each item.\"\"\"\n    return {calculate(x_i) for x_i in items}\n\ndef get_dictcomp_pipeline(items: PipelineItems) -> Dict[Number, Number]:\n    \"\"\"Create dictcomp pipeline using calculate() for items.\n\n    Items are dict keys with calculate(item) being\n    the corresponding value.\n    \"\"\"\n    return {x_i: calculate(x_i) for x_i in items}\n\ndef get_dictcomp_pipeline_str(items: PipelineItems) -> Dict[str, Number]:\n    \"\"\"Create dictcomp pipeline using calculate() for items.\n\n    str(item) are dict keys with calculate(item) being\n    the corresponding value.\n    \"\"\"\n    return {str(x_i): calculate(x_i) for x_i in items}\n```", "```py\n>>> items = (1, 1.0, 10, 50.03, 100)\n```", "```py\n>>> gen_pipeline = get_generator_pipeline(items)\n>>> gen_pipeline # doctest: +ELLIPSIS\n<generator object get_generator_pipeline.<locals>.<genexpr> at 0x7...>\n```", "```py\n>>> for i in gen_pipeline:\n...     print(i)\n245.77\n245.77\n560.77\n3924.49\n12620.77\n```", "```py\n>>> gen_pipeline # doctest: +ELLIPSIS\n<generator object get_generator_pipeline.<locals>.<genexpr> at 0x7...>\n>>> next(gen_pipeline)\nTraceback (most recent call last):\n  ...\nStopIteration\n```", "```py\n>>> list_pipeline = get_listcomp_pipeline(items)\n>>> list_pipeline\n[245.77, 245.77, 560.77, 3924.49, 12620.77]\n```", "```py\n>>> 1 == 1.0\nTrue\n```", "```py\n>>> set_pipeline = get_setcomp_pipeline(items)\n>>> set_pipeline\n{560.77, 3924.49, 245.77, 12620.77}\n```", "```py\n>>> dict_pipeline = get_dictcomp_pipeline(items)\n{1: 245.77, 10: 560.77, 50.03: 3924.49, 100: 12620.77}\n```", "```py\n>>> str(1) != str(1.0)\nTrue\n```", "```py\ndef get_dictcomp_pipeline_str(items: PipelineItems) -> Dict[str, Number]:\n    \"\"\"Create dictcomp pipeline using calculate() for items.\n\n    str(item) are dict keys with calculate(item) being\n    the corresponding value.\n    \"\"\"\n    return {str(x_i): calculate(x_i) for x_i in items}\n```", "```py\n>>> dict_str_pipeline = get_dictcomp_pipeline_str(items)\n>>> dict_str_pipeline\n{'1': 245.77, '1.0': 245.77, '10': 560.77, '50.03': 3924.49, '100': 12620.77}\n```", "```py\ndef calculate(x: Number) -> Number:\n    x = power(x, .5)\n    x = double(x)\n    x = add(x, 12)\n    x = power(x, 2)\n    x = add(x, math.pi**.5)\n    x = round(x, 2)\n    x = add(x, 75)\n    return x\n```", "```py\nNumber = int | float\nPowerType = int | float\n```", "```py\nNumber = Union[int, float]\nPowerType = Union[int, float]\n```", "```py\nimport math\n\nfrom typing import Dict, Generator, Iterable, List, Set\n\nNumber = int | float\nPowerType = int | float\nPipelineItems = Iterable[Number]\n\ndef double(x: Number) -> Number:\n    return x**2\n\ndef power(x: Number, n: PowerType) -> Number:\n    return x**n\n\ndef add(x: Number, y: Number) -> Number:\n    return x + y\n\ndef calculate(x: Number) -> Number:\n    x = power(x, 0.5)\n    x = double(x)\n    x = add(x, 12)\n    x = power(x, 2)\n    x = add(x, math.pi**0.5)\n    x = round(x, 2)\n    x = add(x, 75)\n    return x\n\ndef get_generator_pipeline(\n    items: PipelineItems,\n) -> Generator[Number, None, None]:\n    \"\"\"Create generator pipeline applying calculate() to each item.\"\"\"\n    return (calculate(x_i) for x_i in items)\n\ndef get_listcomp_pipeline(items: PipelineItems) -> List[Number]:\n    \"\"\"Create listcomp pipeline applying calculate() to each item.\"\"\"\n    return [calculate(x_i) for x_i in items]\n\ndef get_setcomp_pipeline(items: PipelineItems) -> Set[Number]:\n    \"\"\"Create setcomp pipeline applying calculate() to each item.\"\"\"\n    return {calculate(x_i) for x_i in items}\n\ndef get_dictcomp_pipeline(items: PipelineItems) -> Dict[Number, Number]:\n    \"\"\"Create dictcomp pipeline using calculate() for items.\n\n    Items are dict keys with calculate(item) being the corresponding value.\n    \"\"\"\n    return {x_i: calculate(x_i) for x_i in items}\n\ndef get_dictcomp_pipeline_str(items: PipelineItems) -> Dict[str, Number]:\n    \"\"\"Create dictcomp pipeline using calculate() for items.\n\n    str(item) are dict keys with calculate(item) being\n    the corresponding value.\n    \"\"\"\n    return {str(x_i): calculate(x_i) for x_i in items}\n\nif __name__ == \"__main__\":\n    items = (1, 1.0, 10, 50.03, 100)\n    gen_pipeline = get_generator_pipeline(items)\n    list_pipeline = get_listcomp_pipeline(items)\n    set_pipeline = get_setcomp_pipeline(items)\n    dict_pipeline = get_dictcomp_pipeline(items)\n    dict_str_pipeline = get_dictcomp_pipeline_str(items)\n\n    # Generator pipeline\n    # Note that we need to evaluate it to see the output,\n    # hence the for loop.\n    print(gen_pipeline)\n    for i in gen_pipeline:\n        print(i)\n\n    # Listcomp pipeline\n    print(list_pipeline)\n\n    # Setcomp pipeline\n    print(set_pipeline)\n\n    # Dictcomp pipeline\n    print(dict_pipeline)\n\n    # Dictcomp pipeline with strings as keys\n    print(dict_str_pipeline)\n```"]