["```py\ndef elliot(x):\n  return ((.5*x) / (1 + K.abs(x)))\n\nelliot = Activation(elliot)\n```", "```py\nimport keras.backend as K\nfrom keras.layers import Layer\nfrom keras.layers import Activation\nimport pandas as pd \nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom keras import layers\nfrom keras import Sequential\n```", "```py\niris = pd.read_csv(\"https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data\")\n\n# Preprocess the data\nX = iris.iloc[:, :-1].values\ny = iris.iloc[:, -1].values\n\n# Encode the categorical output labels\nencoder = LabelEncoder()\ny = encoder.fit_transform(y)\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n```", "```py\n#Model 1 (Sigmoid)\n\n#Model 1\nmodel = Sequential()\nmodel.add(layers.Dense(8, input_dim=4, activation='sigmoid'))\nmodel.add(layers.Dense(3, activation='softmax'))\n\n#Model 2 (Tanh)\nmodel = Sequential()\nmodel.add(layers.Dense(8, input_dim=4, activation='tanh'))\nmodel.add(layers.Dense(3, activation='softmax'))\n\n#Model 3 (ReLU)\nmodel = Sequential()\nmodel.add(layers.Dense(8, input_dim=4, activation='relu'))\nmodel.add(layers.Dense(3, activation='softmax'))\n\n#Model 4 (Elliot)\nmodel = Sequential()\nmodel.add(layers.Dense(8, input_dim=4, activation=elliot))\nmodel.add(layers.Dense(3, activation='softmax'))\n```", "```py\n# Compile the model\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Train the model (Pick the number of epochs)\nmodel.fit(X_train, y_train, epochs=1, batch_size=10)\n```"]