- en: 'Electric Cars In the Netherlands: Exploratory Data Analysis with Python and
    SQLAlchemy (Part 2)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 荷兰电动车：使用 Python 和 SQLAlchemy 的探索性数据分析（第二部分）
- en: 原文：[https://towardsdatascience.com/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-and-sqlalchemy-part-2-c12c6cc2a902](https://towardsdatascience.com/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-and-sqlalchemy-part-2-c12c6cc2a902)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-and-sqlalchemy-part-2-c12c6cc2a902](https://towardsdatascience.com/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-and-sqlalchemy-part-2-c12c6cc2a902)
- en: Data analysis and visualization with Python, SQLAlchemy, and Bokeh
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Python、SQLAlchemy 和 Bokeh 进行数据分析和可视化
- en: '[](https://dmitryelj.medium.com/?source=post_page-----c12c6cc2a902--------------------------------)[![Dmitrii
    Eliuseev](../Images/7c48f0c016930ead59ddb785eaf3e0e6.png)](https://dmitryelj.medium.com/?source=post_page-----c12c6cc2a902--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c12c6cc2a902--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c12c6cc2a902--------------------------------)
    [Dmitrii Eliuseev](https://dmitryelj.medium.com/?source=post_page-----c12c6cc2a902--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://dmitryelj.medium.com/?source=post_page-----c12c6cc2a902--------------------------------)[![Dmitrii
    Eliuseev](../Images/7c48f0c016930ead59ddb785eaf3e0e6.png)](https://dmitryelj.medium.com/?source=post_page-----c12c6cc2a902--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c12c6cc2a902--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c12c6cc2a902--------------------------------)
    [Dmitrii Eliuseev](https://dmitryelj.medium.com/?source=post_page-----c12c6cc2a902--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c12c6cc2a902--------------------------------)
    ·17 min read·Mar 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----c12c6cc2a902--------------------------------)
    ·阅读时间 17 分钟·2023年3月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/eb70cab9e1b8d3ded4a77f3599684a30.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eb70cab9e1b8d3ded4a77f3599684a30.png)'
- en: Smart EQ Car, Image Source [https://en.wikipedia.org/wiki/Smart_electric_drive](https://en.wikipedia.org/wiki/Smart_electric_drive)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Smart EQ 汽车，图片来源 [https://en.wikipedia.org/wiki/Smart_electric_drive](https://en.wikipedia.org/wiki/Smart_electric_drive)
- en: 'When was the first electric car registered? (Spoiler: it was much earlier than
    most people may think.) Which cars are more expensive, the electric Porcshe or
    Jaguar? Exploratory data analysis (EDA) is not only an important part of building
    every data pipeline, but it is also a pretty interesting process. In the [first
    part](/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-d01477949984),
    I analyzed the RDW (Netherlands Vehicle Authority) dataset with Python and Pandas,
    and one of the challenges was the large (about 10 GB) dataset size. As a workaround,
    I specified the columns list, which needs to be loaded in Pandas. It works, but
    what if the dataset is larger, and there is still not enough RAM to put all the
    data in memory, or if the dataset is placed on a remote database? In this article,
    I will show how to make a similar analysis using SQLAlchemy. This will allow making
    “heavy” data processing using SQL, without the need to load all data in Pandas.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个电动车是什么时候注册的？（剧透：比大多数人想象的要早得多。）电动保时捷和捷豹哪一款更贵？探索性数据分析（EDA）不仅是构建每个数据管道的重要部分，而且是一个相当有趣的过程。在[第一部分](/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-d01477949984)中，我使用
    Python 和 Pandas 分析了 RDW（荷兰车辆管理局）数据集，其中一个挑战是数据集大小较大（约 10 GB）。作为解决方案，我指定了需要在 Pandas
    中加载的列列表。这种方法有效，但如果数据集更大，内存中没有足够的 RAM 来容纳所有数据，或者数据集存放在远程数据库中怎么办？在这篇文章中，我将展示如何使用
    SQLAlchemy 进行类似的分析。这将允许使用 SQL 进行“重型”数据处理，而无需将所有数据加载到 Pandas 中。
- en: Let’s get started.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Loading the data
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载数据
- en: The **RDW** (“Rijks Dienst Wegverkeer”, [https://www.rdw.nl](https://www.rdw.nl/))
    is a Dutch organization that handles approvals and registration of motorized vehicles
    and driving licenses in the Netherlands. I will use the “Gekentekende voertuigen”
    (“Vehicles with license plates”) dataset. As was described in the first part,
    it is available under a Public Domain license and can be downloaded from [opendata.rdw.nl](https://opendata.rdw.nl/Voertuigen/Open-Data-RDW-Gekentekende_voertuigen/m9d7-ebf2).
    For data processing, I will be using [SQLite](https://www.sqlite.org/index.html),
    which is a free and lightweight database engine, it can easily run on any PC.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**RDW**（“Rijks Dienst Wegverkeer”， [https://www.rdw.nl](https://www.rdw.nl/)）是一个荷兰组织，负责荷兰的机动车和驾驶执照的批准与登记。我将使用“Gekentekende
    voertuigen”（“带有车牌的车辆”）数据集。如第一部分所述，它在公共领域许可证下提供，可以从[opendata.rdw.nl](https://opendata.rdw.nl/Voertuigen/Open-Data-RDW-Gekentekende_voertuigen/m9d7-ebf2)下载。数据处理将使用[SQLite](https://www.sqlite.org/index.html)，它是一个免费的轻量级数据库引擎，可以轻松运行在任何PC上。'
- en: 'In the beginning, we need to download and import the CSV file to SQLite. The
    file size is about 10 GB; it can be downloaded for free and no registration is
    required. To import the data, I run the “*sqlite3 rdw_data.db”* command, and enter
    3 commands:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，我们需要将CSV文件下载并导入到SQLite中。文件大小约为10 GB；可以免费下载，无需注册。为了导入数据，我运行了“*sqlite3 rdw_data.db*”命令，并输入了3个命令：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here “Open_Data_RDW__Gekentekende_voertuigen.csv” is the original CSV file,
    and “rdw_data” is a table, which should be created. The import process takes some
    time, and after that, we are done with the command line and can return to Jupyter
    Lab. First, let’s make the needed imports and see which database columns we have:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里“Open_Data_RDW__Gekentekende_voertuigen.csv”是原始的CSV文件，“rdw_data”是一个需要创建的表。导入过程需要一些时间，之后我们就可以结束命令行操作，回到Jupyter
    Lab。首先，让我们进行必要的导入，看看我们拥有哪些数据库列：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'I am using Pandas DataFrame for displaying the results because its output is
    much more convenient to read. For example, the “display(columns)” will show the
    output like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用Pandas DataFrame来显示结果，因为它的输出更易于阅读。例如，“display(columns)”会显示如下输出：
- en: '![](../Images/2377c1b73fdee568bdfaf83ffad23cd2.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2377c1b73fdee568bdfaf83ffad23cd2.png)'
- en: 'At the same time, the “display(pd.DataFrame(columns))” output looks much better:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，“display(pd.DataFrame(columns))”的输出效果要好得多：
- en: '![](../Images/b71c7750022f84e386c8619e2cdf5389.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b71c7750022f84e386c8619e2cdf5389.png)'
- en: Let’s check what we get. We can see that all columns have TEXT type, so we will
    need to convert the values. There are 91 columns in the database, but from the
    actual analysis, I need only the car’s type, license plate, model name, price,
    and registration date. I will also use a “Number of cylinders” as a helper to
    detect if the car is electric or not. Last but not least, I am going to analyze
    only “personal” (“Personenauto” in Dutch) cars, not tracks or buses, so I will
    use this filter in the SQL query.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下结果。我们可以看到所有列都是TEXT类型，因此我们需要转换这些值。数据库中有91列，但根据实际分析，我只需要汽车的类型、车牌、型号名称、价格和注册日期。我还会使用“Number
    of cylinders”作为辅助来检测汽车是否是电动车。最后但同样重要的是，我只会分析“personal”（荷兰语中的“Personenauto”）汽车，而不是卡车或公交车，所以我会在SQL查询中使用这个过滤器。
- en: 'Let’s do this conversion using SQL:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用SQL进行这个转换：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here I created a new table and converted Integer and Date columns into proper
    formats. I replaced all empty strings with NULLs, and as a bonus for readers,
    I translated Dutch column names to English. I also created the “Is electric” column,
    which I will use later.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我创建了一个新表，并将整数和日期列转换成适当的格式。我将所有空字符串替换为NULL，并作为读者的额外奖励，我将荷兰语列名翻译成了英文。我还创建了“Is
    electric”列，后面会使用到。
- en: The initial conversion is done, and we are ready to go.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 初始转换完成，我们准备好了。
- en: Basic analysis
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本分析
- en: In the beginning, let’s see the main properties of the dataset, like data samples,
    dimensionality, and the number of NULL values.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，让我们看看数据集的主要属性，如数据样本、维度和NULL值的数量。
- en: 'Using SQL, we can get the total amount of records:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SQL，我们可以获取记录的总数：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In total, we have 9,487,265 cars, registered in the Netherlands at the time
    of writing this article (for those readers, who will download the dataset later,
    this number will obviously, be bigger). The total amount is also equal to the
    number, I got in the [first part](/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-d01477949984),
    where I did a similar analysis using Pandas-only — it’s an easy way to check if
    the processing is right.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 总共有 9,487,265 辆车，在撰写本文时已在荷兰注册（对于那些稍后下载数据集的读者，这个数字显然会更大）。这个总数也等于我在[第一部分](/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-d01477949984)中得到的数字，在那里我使用
    Pandas 进行了类似的分析——这是一种检查处理是否正确的简单方法。
- en: 'Let’s now see the first 5 samples in the database; it is easy to do using SQL.
    Here and later I will be using Pandas to display tables, it’s convenient because
    Pandas has native SQL binding:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看数据库中的前 5 个样本；使用 SQL 很容易做到这一点。在这里和之后我将使用 Pandas 来显示表格，因为 Pandas 有原生的 SQL
    绑定，这很方便。
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result looks like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '![](../Images/ea773726c399f2b8a9f26574d5c55fa0.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ea773726c399f2b8a9f26574d5c55fa0.png)'
- en: 'Let’s check how many missing/NULL numbers we have in different columns. Pandas
    DataFrame has a convenient method “df.isna().sum()”, but I was not able to find
    something similar in SQL. We need to specify all the columns, we need to check:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下不同列中缺失/NULL 数量。Pandas DataFrame 有一个方便的方法“df.isna().sum()”，但我在 SQL 中找不到类似的东西。我们需要指定所有需要检查的列：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Using SQL, I calculate the sum of values, which can be NULL or empty. The result
    looks like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SQL，我计算了可能是 NULL 或空的值的总和。结果如下所示：
- en: '![](../Images/9816496d6f548387930784ae00a2df9a.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9816496d6f548387930784ae00a2df9a.png)'
- en: Here we can see the total amount of cars (9,487,265). Every car has a license
    plate and a registration date; those fields are probably mandatory for registration.
    But 2,480,506 records do not have a price. 864 do not have a “trade name”, and
    so on. And here I can see a problem — those 864 records with empty “trade name”
    fields do not match the 1,405 empty records, I got in Pandas in the [first part](/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-d01477949984).
    This is obviously, not right, where is the difference? It is impossible to check
    9,487,265 records manually, and the easiest way to debug the problem was to save
    unique “trade name” values to the text file and to compare both files using the
    “Diff” tool. And it turned out, that the problem was simple but interesting —
    in the first part, I was using the “pd.read_csv” method to load the data. This
    method is “smart enough” to automatically replace “NULL”, “NA”, “N/A” and some
    other values (a full list can be found in [the manual](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html))
    with NULLs, and this conversion is *enabled* by default. In our case, [Mazda NA](https://en.wikipedia.org/wiki/Mazda_MX-5_(NA))
    is a real car model, and Pandas automatically converted all names “NA” to NULL
    for those cars (it also reminds me of the [old story](https://www.wired.com/2015/11/null/)
    about the man with the last name Null, who was “invisible for computers”;). Anyway,
    the Mazda NA car is not electric, so it does not affect the results of the first
    part, but it is good to keep in mind that such problems may occur.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到汽车的总数量（9,487,265）。每辆车都有一个车牌和一个注册日期；这些字段可能是注册的必填项。但有 2,480,506 条记录没有价格，864
    条记录没有“商标名称”，等等。在这里，我看到一个问题——这些 864 条空“商标名称”字段的记录与我在 Pandas 中得到的 1,405 条空记录不匹配，在[第一部分](/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-d01477949984)中得到了这个结果。这显然是不对的，差异在哪里？不可能手动检查
    9,487,265 条记录，而调试这个问题的最简单方法是将唯一的“商标名称”值保存到文本文件中，并使用“Diff”工具比较两个文件。结果表明，问题简单但有趣——在第一部分，我使用了“pd.read_csv”方法加载数据。这个方法“足够聪明”可以自动将“NULL”、“NA”、“N/A”和一些其他值（完整列表可以在[手册](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html)中找到）替换为
    NULL，这个转换默认是*启用的*。在我们的案例中，[Mazda NA](https://en.wikipedia.org/wiki/Mazda_MX-5_(NA))
    是一个真实的汽车模型，而 Pandas 自动将这些车的所有“NA”名称转换为 NULL（这也让我想起了[旧故事](https://www.wired.com/2015/11/null/)关于姓氏
    Null 的人，他对计算机来说是“不可见的”）。无论如何，Mazda NA 车不是电动车，所以它不会影响第一部分的结果，但要记住这种问题可能会发生是好的。
- en: 'But let’s return to analysis. Using SQL, we can easily make useful requests,
    for example, let’s see the top 10 most expensive cars in the Netherlands:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们回到分析中。使用 SQL，我们可以轻松地进行有用的请求，例如，来看一下荷兰最贵的前10辆车：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The result is interesting:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 结果很有趣：
- en: '![](../Images/66051c65fd6c256701f259e4c845bc45.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/66051c65fd6c256701f259e4c845bc45.png)'
- en: I was expecting to see Porsche, Mercedes, or BMW on this list, but having Peugeot
    or Fiat here is surprising for me, though, I’m not an expert in luxury cars.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我本来期待在这个列表中看到Porsche、Mercedes或BMW，但看到Peugeot或Fiat在这里对我来说有点意外，不过，我不是豪华车方面的专家。
- en: Data transform
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据转换
- en: We already did some basic analysis using SQL requests, but the purpose of this
    article is to analyze *electric cars.* To detect if the car is electric or not,
    we need to know its manufacturer and model name. Ideally, if electric cars would
    have “ELECTRIC” in their name, the task would be straightforward. But in the real
    life, there is no logic in the model naming at all. “Mazda MX-30” is electric,
    but “Mazda MX-5” is not. “Kia Niro” is electric and “Kia Sorento” is not, and
    so on. The is no rule in this, and the easiest way is just to create a table of
    electric car models and use it. But first, let’s check if car models and trade
    names in the dataset are consistent.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用SQL请求做了一些基本分析，但本文的目的是分析*电动汽车*。要检测汽车是否为电动，我们需要知道其制造商和型号名称。理想情况下，如果电动汽车的名称中有“ELECTRIC”，任务会简单得多。但在现实生活中，车型命名毫无逻辑。“Mazda
    MX-30”是电动的，但“Mazda MX-5”不是。“Kia Niro”是电动的，而“Kia Sorento”不是，等等。这没有规则，最简单的方法就是创建一个电动汽车型号的表格并加以使用。但首先，让我们检查一下数据集中汽车型号和商标名称是否一致。
- en: 'Let’s verify **car** **models** first, for example, let’s see all PEUGEOT cars:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们验证**汽车** **型号**，例如，查看所有的PEUGEOT汽车：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The result looks like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 结果看起来是这样的：
- en: '![](../Images/3eb2fa7000664fa27f4e2a508b812995.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3eb2fa7000664fa27f4e2a508b812995.png)'
- en: 'Almost all cars in the database have the name “PEUGEOT”, which is fine, but
    several cars have longer names, like “PEUGEOT BOXER”. The first word is enough
    to know the car model, so we can easily remove the rest. And it will be more convenient
    for future analysis; for example, we can group cars by model and see how many
    Peugeot cars were sold. In the first part, I already created a method to remove
    redundant words from the model name:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库中的几乎所有汽车都有名称“PEUGEOT”，这很好，但有几辆车的名称较长，如“PEUGEOT BOXER”。第一个词足以知道汽车型号，因此我们可以轻松去除其余部分。这将使未来的分析更加方便；例如，我们可以按型号对汽车进行分组，看看售出了多少辆Peugeot汽车。在第一部分中，我已经创建了一个方法来去除型号名称中的冗余词：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s now check the next column. Car **trade names** in the dataset can sometimes
    be duplicated with models, like the “NISSAN” car in this example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们检查下一列。数据集中汽车**商标名称**有时会与型号重复，例如这个例子中的“NISSAN”汽车：
- en: '![](../Images/61af9b5e0cc94364a27fd67b4302d428.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/61af9b5e0cc94364a27fd67b4302d428.png)'
- en: I created a method to remove these duplicates, in this example, it will convert
    the “NISSAN MURANO” field to just “MURANO”.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个方法来移除这些重复项，在这个示例中，它会将“NISSAN MURANO”字段转换为仅“ MURANO”。
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now we can finally figure out if the car **is electric** or not. In the [first
    part](/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-d01477949984),
    I already created a method for that:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们终于可以弄清楚这辆车**是否为电动**了。在[第一部分](/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-d01477949984)中，我已经为此创建了一个方法：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this code, I search for specific keywords; for example, if the model is “BMW”,
    then the “I3” trade name will show us that this car is electric. And as an extra
    check (some cars may be electric or hybrid), I also analyze the number of cylinders
    which must be 0 or NULL for electric cars.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我搜索特定的关键词；例如，如果型号是“BMW”，那么“I3”商标名称会告诉我们这辆车是电动的。作为额外的检查（一些汽车可能是电动或混合动力），我还分析了气缸数量，对于电动汽车，气缸数量必须是0或NULL。
- en: 'All 3 methods were already tested in the first part, and they work well, for
    example, I can easily apply a *model_normalize* method to the Pandas dataset using
    one line of code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分中已经测试过的所有3种方法都效果很好，例如，我可以通过一行代码轻松地将*model_normalize*方法应用于Pandas数据集：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: But how can we use it with SQL? Well, directly we can’t, but we can do this
    with the help of ORM.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们如何在SQL中使用它呢？好吧，直接用是不行的，但我们可以借助ORM来实现。
- en: SQLAlchemy ORM
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQLAlchemy ORM
- en: ORM (Object Relational Mapping) is a technology, used for creating a “bridge”
    between the OOP language and relational databases. Practically, we can create
    a special Python class, and SQLALchemy will automatically transform all requests
    to this class into SQL. Which is pretty convenient, and allows developers to write
    code in pure Python, without ugly brackets and long SQL strings.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: ORM（对象关系映射）是一种技术，用于在OOP语言和关系数据库之间创建一个“桥梁”。实际上，我们可以创建一个特殊的Python类，SQLALchemy会自动将对这个类的所有请求转换为SQL。这非常方便，允许开发人员用纯Python编写代码，而不必处理难看的括号和长SQL字符串。
- en: 'Let’s create a “Car” class and put the needed methods there:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个“Car”类，并在其中放入所需的方法：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As an example of this approach, let’s display the most expensive cars of the
    specific model in the Netherlands. With a standard SQL, we can make a request
    like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 作为这种方法的一个示例，让我们展示荷兰特定型号的最贵汽车。使用标准 SQL，我们可以发出如下请求：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As a result, we get the table:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是我们得到了表格：
- en: '![](../Images/0feb89557eef33feb27aef90729a5cbf.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0feb89557eef33feb27aef90729a5cbf.png)'
- en: 'It works, but the SQL string is pretty long, and I had to use the f-string
    to add the needed variables to the request. With the help of Object Relational
    Mapping, I can just use standard Python code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 它是有效的，但 SQL 字符串相当长，我不得不使用 f-string 将所需的变量添加到请求中。在对象关系映射的帮助下，我可以直接使用标准 Python
    代码：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: SQLAlchemy will create a proper SQL request “under the hood”, and as a result,
    we have an easier-to-read Python code. The major drawback, though, is that SQL
    is more or less standard; there are many resources and tutorials about it, but
    the SQLAlchemy code is specific only to this library. But for our task, this approach
    works well.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 将在“幕后”创建一个适当的 SQL 请求，因此我们得到了更易读的 Python 代码。然而，主要的缺点是 SQL 或多或少是标准的；有很多关于它的资源和教程，但
    SQLAlchemy 代码仅限于此库。但对于我们的任务，这种方法效果很好。
- en: 'Using ORM, we can easily apply our “check_electric” method to all the records
    in the database:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ORM，我们可以轻松地将我们的“check_electric”方法应用于数据库中的所有记录：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this code, I read records from the database, update the parameters, and save
    data back to the table. SQLAlchemy will update the table using SQL requests, and
    it is definitely slower than updating Pandas Dataframe directly in memory. Calling
    the same methods in Pandas took only 130 seconds, and the SQLAlchemy requests
    took 390 seconds, so the difference is about 3 times. On the other side, for the
    batch update, we need much less memory, and there is no need to keep the whole
    dataframe in RAM.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我从数据库中读取记录，更新参数，并将数据保存回表中。SQLAlchemy 将使用 SQL 请求更新表格，这肯定比直接在内存中更新 Pandas
    Dataframe 要慢。调用 Pandas 中的相同方法只需 130 秒，而 SQLAlchemy 请求则花费了 390 秒，因此差异约为 3 倍。另一方面，对于批量更新，我们需要的内存要少得多，而且不需要将整个数据框保存在
    RAM 中。
- en: Analysis
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析
- en: After updating the table, we’re finally ready to go. As a warm-up, let’s calculate
    the car prices' mean and percentiles.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 更新表格后，我们终于准备好了。作为热身，让我们计算一下汽车价格的均值和百分位数。
- en: 'Calculating **the mean** is easy, and can be done with SQLAlchemy in 1 line
    of code. Let’s get the total amount of cars and their arithmetic price mean:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 计算**均值**很简单，可以用 SQLAlchemy 一行代码完成。让我们获取汽车的总数量及其算术价格均值：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Getting **the percentiles** is a bit more tricky, and we have two ways of doing
    that. We can load only the “prices” column, then it’s possible to use NumPy “percentile”
    method to do the math:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 获取**百分位数**稍微复杂一点，我们有两种方法可以做到这一点。我们可以仅加载“价格”列，然后使用 NumPy 的“percentile”方法进行计算：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If the dataset is large and we want to avoid loading the data at all, we can
    get the percentile using pure SQL by combining “order_by”, “limit” and “offset”:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据集很大，我们想要避免完全加载数据，可以通过结合“order_by”、“limit”和“offset”来使用纯 SQL 获取百分位数：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The results are interesting:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 结果很有趣：
- en: '![](../Images/0a6b9c80de01a2c31eb44f33983321f1.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0a6b9c80de01a2c31eb44f33983321f1.png)'
- en: The Netherlands is a country with pretty high average salaries, but at the moment
    of writing this article, only 2,93% of cars are electric. The median price for
    all cars is €26,341, and electric cars are “on average” 2x more expensive; their
    median price is €49,975\. The 95th percentile for all cars is €73,381, which means
    that 95% of the cars have a lower price. At the same time, 95% of electric cars
    have a price lower than €106,989.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 荷兰是一个平均工资相当高的国家，但在撰写本文时，只有 2.93% 的汽车是电动的。所有汽车的中位数价格为 €26,341，而电动汽车“平均”贵 2 倍；其中位数价格为
    €49,975\. 所有汽车的第 95 百分位数为 €73,381，这意味着 95% 的汽车价格更低。与此同时，95% 的电动汽车价格低于 €106,989。
- en: 'Let''s now find something more fun. Let’s get the Top-20 electric cars in the
    Netherlands:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们找点更有趣的。让我们获取荷兰前20名电动车：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As we can see, Tesla has the first place, with more than 55,000 cars registered
    in the country:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从表格中可以看到，特斯拉排名第一，注册在该国的汽车超过55,000辆：
- en: '![](../Images/c6874bb4aa8e723c5de48753e2d0af7a.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c6874bb4aa8e723c5de48753e2d0af7a.png)'
- en: Top-20 electric car manufacturers, Image by author
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 前20名电动车制造商，图片来源：作者
- en: 'I was curious about which Tesla model is the most popular. To know this, we
    can change the request:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我对哪个特斯拉型号最受欢迎感到好奇。为了了解这一点，我们可以更改请求：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'It is clear that the “Model 3” is the most popular electric car at the moment
    of writing this article:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，“Model 3”是撰写本文时最受欢迎的电动汽车：
- en: '![](../Images/75b9746effc62cf4c416d825e844b751.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/75b9746effc62cf4c416d825e844b751.png)'
- en: Tesla models bar chart, Image by author
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Tesla车型柱状图，图像由作者提供
- en: 'But we can also see that the dataset obviously needs more cleaning: some Tesla
    cars were registered as “MODEL 3”, some as “MODEL3”, some cars were saved as a
    “ROADSTER”, and some as “RAODSTER”, and so on.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们也可以看到数据集显然需要更多清理：一些Tesla汽车被注册为“MODEL 3”，一些为“MODEL3”，一些汽车被保存为“ROADSTER”，一些为“RAODSTER”等等。
- en: 'Let’s now group the **electric car registrations per date**. To make the graph
    more clear, I want to group dates by quarter, but the code for extracting quarters
    in SQL can be bulky. Instead, I will group registrations per day using SQL, then
    I can calculate quarters using the internal Pandas function:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来按日期对**电动汽车注册情况**进行分组。为了使图表更清晰，我想按季度分组日期，但在SQL中提取季度的代码可能很庞大。相反，我将使用SQL按天分组注册，然后可以使用Pandas内部函数计算季度：
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In this code, I first converted the SQL result to the Pandas dataframe; then
    I converted Python “date” objects to “datetime” (for some reason, the quarter
    calculation works with “datetime” only). The code is almost similar to the first
    part, but here I use Pandas “groupby.sum()” instead of “size()”, because the data
    retrieved from SQL was already grouped by days.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我首先将SQL结果转换为Pandas dataframe；然后我将Python的“date”对象转换为“datetime”（因为某些原因，季度计算仅与“datetime”有效）。代码几乎与第一部分相同，但这里我使用Pandas的“groupby.sum()”代替“size()”，因为从SQL中检索的数据已经按天分组。
- en: 'The result is interesting:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 结果很有趣：
- en: '![](../Images/795a2d8c4fee6577e7183eafd445fd69.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/795a2d8c4fee6577e7183eafd445fd69.png)'
- en: Electric car registrations, Image by author
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 电动汽车注册情况，图像由作者提供
- en: As was described in the first part, the first electric car was registered in
    the Netherlands in 1992\. It was a [Fiat Panda Elettra](https://www.fcaheritage.com/en-uk/heritage/stories/fiat-panda-elettra),
    a small two-seat car with a 70 km/h maximum speed, 100 km range, and 12 lead-acid
    6V batteries as a power source. It was the only electric car in the whole country
    for 15 years; the 3 next [Tesla Roadster](https://en.wikipedia.org/wiki/Tesla_Roadster_(first_generation))
    cars were registered only in 2009.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如第一部分所述，荷兰首辆电动汽车在1992年注册。那是一辆[Fiat Panda Elettra](https://www.fcaheritage.com/en-uk/heritage/stories/fiat-panda-elettra)，是一辆小型双座车，最高时速70
    km/h，续航100 km，电源由12块6V铅酸电池提供。它是全国家唯一的电动汽车，15年内没有其他电动汽车；接下来的3辆[Tesla Roadster](https://en.wikipedia.org/wiki/Tesla_Roadster_(first_generation))汽车直到2009年才注册。
- en: 'Let’s now get a **price distribution** of electric cars. I want to draw a box
    and whisker plot, and for that, I need to know the minimum, maximum, and quartile
    values per model:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看电动汽车的**价格分布**。我想绘制一个箱型图，为此，我需要了解每种车型的最小值、最大值和四分位数值：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In this code, first I get the list of all car models; then I get the prices
    for each model and aggregate those prices using Pandas. Then I combine the data
    into a single dataframe. The result looks like this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我首先获取所有汽车型号的列表；然后获取每种型号的价格，并使用Pandas对这些价格进行汇总。然后将数据合并成一个单一的dataframe。结果如下：
- en: '![](../Images/42adf5e6f024da5912f92a5e1c11a0b7.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/42adf5e6f024da5912f92a5e1c11a0b7.png)'
- en: 'Having this dataframe, it is easy to draw a box plot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个dataframe，绘制箱型图变得简单：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The result looks like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![](../Images/d4ce1b8b1cfb400f70076fc2954ba3b4.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d4ce1b8b1cfb400f70076fc2954ba3b4.png)'
- en: Electric car manufacturers and prices box plot, Image by author
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 电动汽车制造商和价格箱型图，图像由作者提供
- en: With the help of SQLAlchemy, it is also easy to get all prices of electric cars
    and build the **histogram** using the “np.histogram” method. The code is almost
    the same as in the [first part](/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-d01477949984);
    those who wish can do it on their own.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 借助SQLAlchemy，还可以轻松获取所有电动汽车的价格，并使用“np.histogram”方法构建**直方图**。代码几乎与[第一部分](/electric-cars-in-the-netherlands-exploratory-data-analysis-with-python-d01477949984)相同，愿意的话可以自己尝试。
- en: Conclusion
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Analyzing the data from the real dataset is interesting, and it turned out that
    SQL and Pandas work together pretty well. The “heavy lifting” of retrieving and
    pre-processing the data can be done using SQLAlchemy, then this data can be used
    in Pandas.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 分析真实数据集很有趣，结果显示SQL和Pandas的配合效果很好。数据的“繁重”检索和预处理可以使用SQLAlchemy完成，然后这些数据可以在Pandas中使用。
- en: As for the processing of the data itself, a lot of work can be done. It may
    be interesting to combine this data with the [Kaggle Electric Vehicles](https://www.kaggle.com/datasets/geoffnel/evs-one-electric-vehicle-dataset)
    dataset and find the correlation between the maximum distance range, price, and
    car release date (newer models should have a longer range). I tried to do this,
    but the car model names in both datasets do not match, and I am not an expert
    in cars to do this manually for every model. Also, as was shown before, the RDW
    dataset needs more cleaning, and not all the names are consistent. Readers, who
    are interested, can continue these experiments on their own.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 关于数据本身的处理，还有很多工作可以做。将这些数据与[Kaggle 电动车](https://www.kaggle.com/datasets/geoffnel/evs-one-electric-vehicle-dataset)数据集结合，寻找最大行驶距离、价格和汽车发布日期之间的相关性可能会很有趣（较新的车型应有更长的行驶距离）。我尝试过这样做，但两个数据集中的车型名称不匹配，而我又不是汽车专家，无法手动对每个型号进行处理。此外，正如之前所示，RDW数据集需要更多的清理，名称也不一致。对这方面感兴趣的读者可以自行继续这些实验。
- en: If you enjoyed this story, feel free [to subscribe](https://medium.com/@dmitryelj/membership)
    to Medium, and you will get notifications when my new articles will be published,
    as well as full access to thousands of stories from other authors.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这个故事，可以随时[订阅](https://medium.com/@dmitryelj/membership)Medium，你将会收到我新文章发布的通知，并且可以全面访问其他作者的数千篇故事。
- en: Thanks for reading.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。
