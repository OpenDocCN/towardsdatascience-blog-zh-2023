- en: Introduction to mypy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: mypy 介绍
- en: 原文：[https://towardsdatascience.com/introduction-to-mypy-3d32fc96db75](https://towardsdatascience.com/introduction-to-mypy-3d32fc96db75)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/introduction-to-mypy-3d32fc96db75](https://towardsdatascience.com/introduction-to-mypy-3d32fc96db75)
- en: Static type checking for Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 的静态类型检查
- en: '[](https://medium.com/@hrmnmichaels?source=post_page-----3d32fc96db75--------------------------------)[![Oliver
    S](../Images/b5ee0fa2d5fb115f62e2e9dfcb92afdd.png)](https://medium.com/@hrmnmichaels?source=post_page-----3d32fc96db75--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3d32fc96db75--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3d32fc96db75--------------------------------)
    [Oliver S](https://medium.com/@hrmnmichaels?source=post_page-----3d32fc96db75--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@hrmnmichaels?source=post_page-----3d32fc96db75--------------------------------)[![Oliver
    S](../Images/b5ee0fa2d5fb115f62e2e9dfcb92afdd.png)](https://medium.com/@hrmnmichaels?source=post_page-----3d32fc96db75--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3d32fc96db75--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3d32fc96db75--------------------------------)
    [Oliver S](https://medium.com/@hrmnmichaels?source=post_page-----3d32fc96db75--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3d32fc96db75--------------------------------)
    ·8 min read·Apr 6, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在[Towards Data Science](https://towardsdatascience.com/?source=post_page-----3d32fc96db75--------------------------------)
    ·阅读时间8分钟·2023年4月6日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/1256da4cc8ec98ef8ebafde56c0e759c.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1256da4cc8ec98ef8ebafde56c0e759c.png)'
- en: Photo by [Agence Olloweb](https://unsplash.com/@olloweb?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/d9ILr-dbEdg?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Agence Olloweb](https://unsplash.com/@olloweb?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)提供，在[Unsplash](https://unsplash.com/photos/d9ILr-dbEdg?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)上
- en: We mentioned mypy as a must-have in a previous post about [Python best practices](https://medium.com/towards-data-science/best-practices-for-python-development-bf74c2880f87)
    — here, we want to introduce it with more details.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前关于[Python最佳实践](https://medium.com/towards-data-science/best-practices-for-python-development-bf74c2880f87)的文章中提到了
    mypy 是必备的——在这里，我们希望更详细地介绍它。
- en: '[mypy](https://mypy.readthedocs.io/en/stable/), as the docs explain, is a “static
    type checker for Python”. This means, it adds type annotations and checks to the
    language Python, which is dynamically typed by design (types are inferred at runtime,
    as opposed to, e.g. C++). Doing so lets you find bugs in your code during compile-time,
    which is a great help — and a must for any semi-professional Python project, as
    explained in my previous post.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[mypy](https://mypy.readthedocs.io/en/stable/)，正如文档所解释的，是一个“Python 的静态类型检查器”。这意味着，它为
    Python 添加类型注解和检查，而 Python 是设计上动态类型的（类型在运行时推断，与例如 C++ 相对）。这样做可以在编译时发现代码中的错误，这是一种极大的帮助——并且是任何半专业
    Python 项目的必备条件，正如我在之前的文章中所解释的那样。'
- en: 'In this post we will introduce mypy using several examples. Disclaimer: this
    post won’t introduce every mypy feature (not even near it). Instead, I’ll try
    to find a good balance between sufficient details to let you write nearly all
    the code you want — and generating a steep learning curve from zero to solid mypy
    understanding. For more details, I’d like to refer to the official docs or any
    other great tutorial out there.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将通过几个示例来介绍 mypy。免责声明：这篇文章不会介绍 mypy 的所有功能（甚至连一部分都不会）。相反，我会尝试在提供足够细节以让你编写几乎所有想要的代码和从零开始到扎实理解
    mypy 之间找到一个良好的平衡。有关更多细节，我建议查阅官方文档或其他优秀教程。
- en: Installation
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: 'To install mypy, simply run: `pip install mypy`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 mypy，只需运行：`pip install mypy`
- en: However, I would recommend to use some form of dependency management system,
    such as [poetry](https://medium.com/towards-data-science/dependency-management-with-poetry-f1d598591161).
    How to include this and mypy in a larger software project, is explained [here](https://medium.com/towards-data-science/best-practices-for-python-development-bf74c2880f87).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我建议使用某种形式的依赖管理系统，例如[poetry](https://medium.com/towards-data-science/dependency-management-with-poetry-f1d598591161)。如何将它和
    mypy 包含在更大的软件项目中，已在[这里](https://medium.com/towards-data-science/best-practices-for-python-development-bf74c2880f87)进行了说明。
- en: First Steps
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初步步骤
- en: 'Let’s motivate the usage of mypy with a first example. Consider the following
    code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过第一个示例来激发对 mypy 使用的兴趣。请考虑以下代码：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`multiply` expects two numbers and returns their product. Thus, `multiply(3,
    10)` works well and returns the desired result. But the second statement fails
    and crashes the execution, as we can’t multiply strings. Due to Python being dynamically
    typed, nothing stopped us from coding / executing that statement, and we only
    found the issue at run time — which is problematic.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`multiply`期望两个数字并返回它们的乘积。因此，`multiply(3, 10)`工作正常并返回预期结果。但是第二条语句失败并崩溃，因为我们不能将字符串相乘。由于
    Python 是动态类型的，没有任何东西阻止我们编写/执行该语句，我们只在运行时发现了这个问题——这很有问题。'
- en: 'Here, mypy comes to the rescue. We can now annotate the arguments, and also
    the return type of the function, as such:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，mypy 及时提供了帮助。我们现在可以注解函数的参数和返回类型，如下所示：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This annotation won’t change the execution in anyway, in particular, you can
    still run this faulty program. However, before doing so and shipping our program,
    we can now run mypy and check for any possible errors via: `mypy .`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种注解不会以任何方式改变执行，特别是，你仍然可以运行这个有问题的程序。然而，在这样做和发布我们的程序之前，我们现在可以运行 mypy 并通过以下命令检查任何可能的错误：`mypy
    .`
- en: Running this command will fail, and correctly point out that we can’t pass strings
    to `multiply`. Above command is meant to be executed from the main folder of the
    application, `.` will check every file in the current folder and subdirectories.
    But you can also check specific files via `mypy file_to_check.py`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令将失败，并正确指出我们不能将字符串传递给`multiply`。上述命令旨在从应用程序的主文件夹中执行，`。`将检查当前文件夹及子目录中的每个文件。但你也可以通过`mypy
    file_to_check.py`来检查特定文件。
- en: This hopefully motivated the need and usage of mypy, now let’s dive deeper.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这希望能激发对 mypy 的需求和使用的理解，现在让我们更深入探讨。
- en: Configuring mypy
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 mypy
- en: mypy can be configured in many different ways — without going into details,
    it just needs to find one config file (such as mypy.ini, [pyproject.toml](https://medium.com/towards-data-science/dependency-management-with-poetry-f1d598591161),
    …) with a “mypy” section in it. Here, we will create the default file `mypy.ini`,
    which should live in the project’s main folder.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: mypy 可以通过多种方式进行配置——无需详细说明，它只需要找到一个包含“mypy”部分的配置文件（如 mypy.ini，[pyproject.toml](https://medium.com/towards-data-science/dependency-management-with-poetry-f1d598591161)
    等）。在这里，我们将创建默认的`mypy.ini`文件，它应该位于项目的主文件夹中。
- en: 'Now, let’s come to possible configuration options. For this, we go back to
    our initial example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看可能的配置选项。为此，我们回到最初的示例：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Simply running mypy actually yields no errors! That is, because type hints are
    optional by default — and mypy only checks types where an annotation is given.
    We can disable this via the flag `— disallow-untyped-defs`. Furthermore, there
    is a multitude of other flags one can use (see [here](https://mypy.readthedocs.io/en/stable/command_line.html#miscellaneous-strictness-flags)).
    However, in line with the general format of this post, we won’t go into detail
    of all these — and instead just present the strict mode. This mode turns on basically
    all optional checks. And in my experience, the best way of using mypy is to simply
    ask for the strictest checking possible — and then fix (or selectively ignore)
    any upbrought issues.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，简单地运行 mypy 并不会产生错误！这是因为类型提示默认是可选的——而 mypy 只检查那些有注解的类型。我们可以通过标志`— disallow-untyped-defs`来禁用这一点。此外，还有许多其他标志可以使用（参见
    [here](https://mypy.readthedocs.io/en/stable/command_line.html#miscellaneous-strictness-flags)）。然而，根据本帖的一般格式，我们不会详细讨论所有这些标志——而是仅呈现严格模式。此模式基本上开启所有可选检查。在我的经验中，使用
    mypy 的最佳方法是要求尽可能严格的检查——然后修复（或选择性地忽略）所有出现的问题。
- en: 'To do so, let’s fill the `mypy.ini` file like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们可以像这样填写`mypy.ini`文件：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The section header `[mypy]` is needed for any mypy related configuration, and
    the next line is pretty self-explanatory.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`[mypy]`部分头对于任何 mypy 相关的配置都是必要的，下一行是相当自解释的。'
- en: When we now run mypy as usual, we are getting errors complaining about the missing
    type annotations — which only go away once everything is typed and we remove the
    faulty string call.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们像往常一样运行 mypy 时，我们会遇到关于缺失类型注解的错误——这些错误只有在所有内容都被注解并且我们移除错误的字符串调用后才会消失。
- en: Now let’s have a closer look at how to annotate with mypy.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更详细地看看如何使用 mypy 进行注解。
- en: Annotating with mypy
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 mypy 注解
- en: In this section we’ll describe the most common type annotations and mypy keywords.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将描述最常见的类型注解和 mypy 关键字。
- en: Primitive Types
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本类型
- en: 'We can annotate primitive types by simply using their Python type, i.e. `bool`,
    `int`, `float`, `str`, …:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过简单地使用其 Python 类型来注解基本类型，即`bool`、`int`、`float`、`str`等：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Collection Types
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合类型
- en: 'Starting from Python 3.9 upwards, also the built-in collection types can be
    used as type annotations. That is `list`, `set`, `dict`, …:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Python 3.9 开始，内置的集合类型也可以用作类型注解。即 `list`、`set`、`dict` 等：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As we can see, we have to specify the contents of the containers (e.g. `int`).
    For mixed types, see below.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，我们必须指定容器的内容（例如`int`）。对于混合类型，请参见下文。
- en: Earlier Python Versions
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 早期 Python 版本
- en: 'For earlier Python versions, one had to use legacy types from the `typing`
    module:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于早期的 Python 版本，必须使用 `typing` 模块中的旧版类型：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Mixing Contents
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合内容
- en: 'As teased above, we might want to create containers holding different data
    types. To do so, we can use the `Union` keyword — which allows us to annotate
    a type as a union of types:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，我们可能想要创建包含不同数据类型的容器。为此，我们可以使用`Union`关键字——它允许我们将类型注解为类型的联合：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Similar to the simplifications done in Python 3.9, Python 3.10 (specifically
    [PEP 604](https://peps.python.org/pep-0604/)) introduces an abbreviated notation
    of the `Union` type using the logical or operator (`|`):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 Python 3.9 中的简化，Python 3.10（具体是[PEP 604](https://peps.python.org/pep-0604/)）引入了使用逻辑或操作符（`|`）的`Union`类型的缩写表示法：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Other mypy Keywords
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他 mypy 关键字
- en: In this section we’ll introduce more essential types and keywords.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍更多基本类型和关键字。
- en: None
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无
- en: '`None`, just as in “normal” Python, denotes a `None` value — most commonly
    used for annotating functions without return type:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`None`，就像在“正常”Python中一样，表示一个`None`值——最常用于注解没有返回类型的函数：'
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Optional
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可选
- en: 'Often, we might come across situations where we want to implement branching
    code based on whether we passed a value for a parameter or not — and often, we
    use `None` to indicate the absence of it. For this, we can use `typing.Optional[X]`
    — which denotes exactly this: it annotates type `X`, but also allows `None`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常会遇到这样一种情况：我们想根据是否传递了参数值来实现分支代码——通常，我们使用`None`来表示其缺失。为此，我们可以使用`typing.Optional[X]`——它正是表示这一点：它注解类型`X`，但也允许`None`：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Following Python 3.10 and above introduced PEP 604, `Optional` can again be
    shorted to `X | None`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 继 Python 3.10 及以上版本引入的 PEP 604，`Optional` 可以再次缩短为 `X | None`：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that this does not correspond to [required or optional parameters](https://levelup.gitconnected.com/untangling-required-optional-positional-and-keyword-arguments-f7792320a40d),
    which is often confused! An optional parameter is one which we do not have to
    specify when calling a function — whereas mypy’s `Optional` indicates a parameter
    which can be of some type, but also `None`. A possible source of confusion could
    be that a common default value for optional parameters is `None`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这与[必需或可选参数](https://levelup.gitconnected.com/untangling-required-optional-positional-and-keyword-arguments-f7792320a40d)不对应，这一点经常被混淆！可选参数是指在调用函数时不必指定的参数——而
    mypy 的 `Optional` 表示一个可以是某种类型，但也可以是 `None` 的参数。可能的混淆来源是可选参数的一个常见默认值是 `None`。
- en: Any
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任意
- en: '`Any`, as the name suggests (I feel I keep repeating this sentence …) simply
    allows every type — thus effectively turning off any kinds of type checking. Thus,
    try to avoid this whenever you can.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`Any`，正如其名所示（我觉得我总是在重复这句话……）简单地允许任何类型——从而有效地关闭任何类型检查。因此，尽量避免在可能的情况下使用它。'
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Annotating Variables
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注解变量
- en: 'So far, we have used mypy to only annotate function parameters and return types.
    It is just natural to extend this to any kind of variables:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们仅使用 mypy 注解了函数参数和返回类型。自然地，这也可以扩展到任何类型的变量：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: However, this is somewhat lesser used (and also not enforced by the strict version
    of mypy), as the types of variables are mostly clear from the context. Usually,
    you would only do this when the code is relatively ambiguous and hard to read.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种用法相对较少（并且严格版的 mypy 也不强制执行），因为变量的类型通常可以从上下文中推断出来。通常情况下，只有在代码相对模糊且难以阅读时，你才会这么做。
- en: Annotating Complex Types
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注解复杂类型
- en: In this section we’ll discuss annotating classes, but also annotating with your
    own and other complex classes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论类的注解，以及使用你自己的和其他复杂类进行注解。
- en: Annotating Classes
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注解类
- en: 'Annotating classes can be handled pretty quickly: just annotate class functions
    as any other function, but don’t annotate the self argument in the constructor:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注解类可以很快处理：只需像注解其他函数一样注解类函数，但不要注解构造函数中的 self 参数：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Annotating with Custom / Complex Classes
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用自定义/复杂类进行注解
- en: 'With our class defined, we can now use its name as any other type annotation:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 定义好类之后，我们现在可以像其他类型注解一样使用其名称：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In fact, mypy works with most classes and types out of the box, e.g.:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，mypy 可以直接与大多数类和类型一起使用，例如：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Fixing mypy Issues
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复mypy问题
- en: In this section we’ll see how to deal with external libraries which do not support
    typing and selectively disable type checking for certain lines which cause issues
    — on the basis of a slightly more complex example involving [numpy](https://numpy.org/)
    and [matplotlib](https://matplotlib.org/stable/index.html).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何处理不支持类型标注的外部库，并有选择地禁用对某些引发问题的代码行的类型检查——基于一个稍微复杂一点的示例，其中涉及到[numpy](https://numpy.org/)和[matplotlib](https://matplotlib.org/stable/index.html)。
- en: 'Let’s begin with a first version of the code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从代码的第一个版本开始：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We define a simple function computing the sinus of a numpy array, and apply
    it to the input values `x`, which span the space [0, 10]. Then, we plot the sinus
    curve using `matplotlib`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个简单的函数来计算numpy数组的正弦，并将其应用于输入值`x`，这些值覆盖了区间[0, 10]。然后，我们使用`matplotlib`绘制正弦曲线。
- en: In this code, we also see the correct typing of numpy arrays using `numpy.typing`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们还看到使用`numpy.typing`进行numpy数组的正确类型标注。
- en: 'However, if we run mypy on this, we’ll get two errors. The first one is:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们在此运行mypy，会出现两个错误。第一个是：
- en: 'error: Returning Any from function declared to return “ndarray[Any, dtype[floating[_32Bit]]]”'
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'error: Returning Any from function declared to return “ndarray[Any, dtype[floating[_32Bit]]]”'
- en: 'This is a relatively common pattern in mypy. We actually did not do anything
    wrong, but mypy would like it somewhat more explicit — and here — as well as in
    other situations — we have to “force” mypy to accept our code. We can do this
    for example by introducing a proxy variable of the correct type:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是mypy中一种相对常见的模式。我们实际上没有做错什么，但mypy希望它更为明确——在这里——以及在其他情况中——我们必须“强制”mypy接受我们的代码。例如，我们可以通过引入一个正确类型的代理变量来做到这一点：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The next error is:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个错误是：
- en: 'error: Skipping analyzing “matplotlib”: found module but no type hints or library
    stubs'
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'error: Skipping analyzing “matplotlib”: found module but no type hints or library
    stubs'
- en: 'This is because `matplotlib` is not typed (yet). Thus, we need to let mypy
    know to exclude it from checking. We do this by adding the following to our mypy.ini
    file:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为`matplotlib`尚未进行类型标注。因此，我们需要让mypy知道排除它的检查。我们通过在mypy.ini文件中添加以下内容来实现：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Lastly, note that you can also selectively ignore any lines of code by appending
    `# type: ignore` to it. Do this, if there really is an unsolvable issue with mypy,
    or you want to silence some known but irrelevant warnings / errors. We could have
    also hidden our first error above via this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '最后，请注意，你还可以通过在代码行末添加`# type: ignore`来有选择地忽略任何代码行。如果确实存在无法解决的mypy问题，或者你想要忽略一些已知但不相关的警告/错误，可以这样做。我们也可以通过这样做来隐藏上面的第一个错误：'
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Conclusion
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this post we introduced mypy, which is a static type checker for Python.
    Using mypy, we can (and should) annotate types of variables, parameters and return
    values — giving us a way of sanity checking our program at compile time. mypy
    is very wide-spread, and recommended for any semi-large software project.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们介绍了mypy，它是一个用于Python的静态类型检查工具。使用mypy，我们可以（并且应该）注释变量、参数和返回值的类型——为我们提供了一种在编译时对程序进行合理性检查的方法。mypy被广泛使用，推荐用于任何中型以上的软件项目。
- en: We started by installing and configuring mypy. Then, we introduced how to annotate
    primitive and complex types, such as lists, dicts or sets. Next, we discussed
    other important annotators, such as `Union`, `Optional`, `None`, or `Any`. Eventually,
    we showed that mypy supports a wide range of complex types, such as custom classes.
    We finished the tutorial by showing how to debug and fix mypy errors.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从安装和配置mypy开始。然后，我们介绍了如何注释基本和复杂类型，例如列表、字典或集合。接下来，我们讨论了其他重要的注释器，如`Union`、`Optional`、`None`或`Any`。最终，我们展示了mypy支持广泛的复杂类型，如自定义类。我们通过展示如何调试和修复mypy错误来结束教程。
- en: That’s it for mypy — I hope, you liked this post, thanks for reading!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是关于mypy的内容——希望你喜欢这篇文章，感谢阅读！
