- en: Grow a Treemap with Python and Plotly Express
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/grow-a-treemap-with-python-and-plotly-express-963706a2bd74](https://towardsdatascience.com/grow-a-treemap-with-python-and-plotly-express-963706a2bd74)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Turn a government PDF into a financial planning tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@lee_vaughan?source=post_page-----963706a2bd74--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----963706a2bd74--------------------------------)[](https://towardsdatascience.com/?source=post_page-----963706a2bd74--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----963706a2bd74--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----963706a2bd74--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----963706a2bd74--------------------------------)
    ·8 min read·Apr 7, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b3a0fa3113923d8d9c7a5a3b1e3e8827.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by Robert Murray on Unsplash!
  prefs: []
  type: TYPE_NORMAL
- en: '*Hierarchical* data is a data model where items are linked to each other in
    parent-child relationships, forming a tree structure. Some obvious examples are
    family trees and corporate organization charts.'
  prefs: []
  type: TYPE_NORMAL
- en: A *treemap* is a diagram that represents hierarchical data using nested rectangles.
    The area of each rectangle corresponds to its numerical value. Treemaps have been
    around for about 30 years. An early application was to visualize hard drive usage,
    as demonstrated in the figure below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5fbfa693cbf1cf386397aaca4297ed39.png)'
  prefs: []
  type: TYPE_IMG
- en: Allocation of hard disk space visualized with a treemap ([Carnivore1973 via
    Wikimedia Commons](https://commons.wikimedia.org/w/index.php?search=Carnivore1973&title=Special%3AMediaSearch&go=Go&type=image))
  prefs: []
  type: TYPE_NORMAL
- en: 'Treemaps let you capture both the *value* of individual categories and the
    *structure* of the hierarchy. They’re useful for:'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying hierarchical data when the number of categories overwhelms a bar
    chart.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlighting proportions between individual categories and the whole.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distinguishing categories using different sizes and colors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spotting patterns, primary contributors, and outliers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bringing a fresh look to data visualization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this *Quick Success Data Science* project, we’ll use Python to create a treemap
    to help people budget for expenses. We’ll first use the *tabula-py* library to
    turn a web-based *Bureau of Labor Statistics* PDF into a pandas DataFrame. Then
    we’ll use the *Plotly Express* library to turn the DataFrame into an attractive
    and interactive area-based visualization.
  prefs: []
  type: TYPE_NORMAL
- en: Consumer Expenditure Surveys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the pandemic and subsequent inflationary surge, consumer spending has drawn
    a lot of attention. Individuals need to know how to budget effectively, and policymakers
    need to understand what sectors are causing the most financial burden to potential
    voters.
  prefs: []
  type: TYPE_NORMAL
- en: To help track income and spending, the *Census Bureau* uses *Consumer Expenditure
    Surveys* to collect information on US consumers’ expenditures, income, and demographic
    characteristics. The *Bureau of Labor Statistics (BLS)* then compiles these statistics
    into [annual reports](https://www.bls.gov/cex/tables-getting-started-guide.htm#section2)
    published in September.
  prefs: []
  type: TYPE_NORMAL
- en: These BLS reports are in the [public domain](https://www.bls.gov/bls/linksite.htm)
    and are useful to both policymakers and individuals. Young people just starting
    out can use the tables as a starting point for preparing budgets and savings plans.
    Older people can use the same tables to help plan their retirement. You can view
    a complete table [here](https://www.bls.gov/cex/tables/calendar-year/aggregate-group-share/reference-person-age-ranges-2021.pdf)
    and part of one in the figure below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1276bf992c99e58646db88dd097a4fa1.png)'
  prefs: []
  type: TYPE_IMG
- en: The first lines of the 2021 BLS Consumer Expenditure Survey Table 1300 (from
    the Bureau of Labor Statistics)
  prefs: []
  type: TYPE_NORMAL
- en: 'Consumer Expenditure tables lump expenditures into 14 different types, as listed
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a5bda3dfcd29b142a0e1eec9e55082d0.png)'
  prefs: []
  type: TYPE_IMG
- en: Explanation of expenditure types (from the Bureau of Labor Statistics)
  prefs: []
  type: TYPE_NORMAL
- en: The **cash contributions** category includes support for college students living
    away from home, alimony and child support payments, and personal cash gifts, such
    as those for birthdays or weddings. It also includes contributions to religious,
    charitable, or political organizations.
  prefs: []
  type: TYPE_NORMAL
- en: The Plotly Express and Tabula Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Plotly Express*](https://plotly.com/python/plotly-express/) is a higher-level
    version of the *Plotly* graphing library. It lets you easily produce attractive
    figures with a lot of built-in functionality.'
  prefs: []
  type: TYPE_NORMAL
- en: A weakness of treemaps is that small rectangles may not be labeled, or the labels
    may be illegible. Plotly Express helps to overcome this limitation by providing
    an interactive “hover window” that appears when the cursor pauses over a rectangle.
    This popup window contains detailed information that would be impractical to display
    directly on the diagram.
  prefs: []
  type: TYPE_NORMAL
- en: The [*tabula-py*](https://tabula-py.readthedocs.io/en/latest/getting_started.html)
    library is a Python wrapper of tabula-java, which enables table extraction from
    a PDF. The extracted data can then be converted into a list of DataFrames, or
    a CSV, TSV, or JSON file.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install Plotly Express and tabula-py with pip or conda. Plotly Express
    requires Plotly as a dependency. Here’s the conda installation example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conda install plotly plotly_express tabula-py`'
  prefs: []
  type: TYPE_NORMAL
- en: The Process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our job will be to convert the BLS “Table 1300” PDF into a pandas DataFrame
    and then into a treemap. While tabula-py provides multiple format conversions
    for PDFs, we’ll take the CSV route here:'
  prefs: []
  type: TYPE_NORMAL
- en: Use tabula-py to read the PDF from the web and convert it to a CSV.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use pandas to convert the CSV to a DataFrame.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use pandas to clean and prepare the DataFrame for plotting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use Plotly Express to plot the treemap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Importing Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following snippet imports the libraries we’ll need, sets up Jupyter Notebook
    to show the maximum rows in a DataFrame, and rounds float values in DataFrames
    to two decimal places.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Converting the PDF Table into a DataFrame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To convert the web-based PDF into a DataFrame, we’ll first use tabula-py to
    convert it into a CSV file and then use pandas to convert the CSV file into a
    DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8bdecf7f44a05927651b05f5b2ea40f0.png)'
  prefs: []
  type: TYPE_IMG
- en: The head of the initial DataFrame (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Wrangling the Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we need to clean the DataFrame. Row 4 contains the number of [consumer units](https://www.bls.gov/cex/csxgloss.htm#cu),
    *in thousands*, for each age bracket, stored in columns 3–9\. We’ll need the number
    of consumer units for each bracket to determine *average* expenditures later.
    The following code extracts the unit information, removes punctuation, converts
    the results to integers, and multiplies by 1,000.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Next, we create a dictionary that uses as keys and values the age brackets —
    based on the DataFrame column headers — and the number of consumer units in each
    bracket.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Preparing an Age Bracket for Plotting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll want to plot a *single* age bracket at a time. The following code designates
    the bracket (for 25–34-year-olds), produces a new DataFrame for this bracket,
    does some more data cleaning and renaming, and calculates the percentage share
    and average expenditure for each expenditure type.
  prefs: []
  type: TYPE_NORMAL
- en: The expenditure type *names*, such as “Food” and “Housing,” were found by scrolling
    through Table 1300\. These represent high-level summaries of much more granular
    expenditure details. The age bracket column represents the *percent* of the aggregate
    spending attributed to that age group.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0876da9c5d96fd610bd80c2e9a2d856d.png)'
  prefs: []
  type: TYPE_IMG
- en: The DataFrame ready for plotting (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Plotting the Treemap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plotly Express comes with over 30 functions for creating entire figures at once.
    The `treemap()` function takes the DataFrame, “the top-level” category (in this
    case, the “Expenditure Type”), the remaining categories (`df.index`), and column
    names for the values and colors. We'll also specify a color scale (“portland”)
    and dimensions for the figure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4c36158f54e018479059d668f63110a1.png)'
  prefs: []
  type: TYPE_IMG
- en: The treemap for average expenditures for 25–34-year-olds (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: You can see how this figure could be useful for financial planners trying to
    explain budgeting to a client. Compared to several pages of text, it’s a *lot*
    easier on the eyes. And with Plotly Express, you can drill down to see the detailed
    values by simply hovering your cursor over a rectangle, as demonstrated for the
    healthcare sector below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3821af7545957ccf505b93ca756a3804.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of the hover feature showing details for healthcare spending (image
    by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Although it won’t change the appearance of the table, you can switch the display
    to show “Expenditure Percent” by switching the arguments for the `values` and
    `color` parameters, as so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5b650daaac2afe378abc7b23b4d469f4.png)'
  prefs: []
  type: TYPE_IMG
- en: The treemap for average expenditure percent for 25–34-year-olds (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Based on the previous treemap, it’s apparent that 25–34-year-olds tend to spend
    most of their income on housing, transportation, and insurance. But what about
    seniors?
  prefs: []
  type: TYPE_NORMAL
- en: If you change the `AGE` variable to `'75 years'` and rerun the code, you'll
    see that healthcare has become much more important, as are cash contributions,
    which probably take the form of charitable donations and gifts to family. The
    color bar also indicates that expenditures are generally lower than for the 25–34-year-old
    bracket.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/13339842216d8223e60021402ece2875.png)'
  prefs: []
  type: TYPE_IMG
- en: The treemap for average expenditures for 75+ year-olds (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'One final observation about treemaps: because the data is *sorted*, you can
    distinguish between categories with similar values. In the previous figure, while
    both “Food” and “Transportation” are similar in size, you can be sure that “Food”
    is larger because of its position in the hierarchy.'
  prefs: []
  type: TYPE_NORMAL
- en: Caveat Emptor!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The values in the BLS table represent *nationwide* averages. Local variations
    may occur. For example, housing and transportation costs will undoubtedly be higher
    in large urban areas versus small rural towns. Additionally, all the expenditure
    estimates are subject to [error](https://www.bls.gov/cex/ce-se-2016.pdf). Therefore,
    this data should be used *directionally*, rather than *absolutely*, for any financial
    planning purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The tabula-py module greatly simplifies the process of converting PDF tables
    into useful formats like CSV. Likewise, Plotly Express, paired with a pandas DataFrame,
    makes it easy to generate interactive treemaps. With a treemap, you can easily
    visualize — and communicate — relationships in hierarchical data.
  prefs: []
  type: TYPE_NORMAL
- en: Treemaps are interesting, but they aren’t the only game in town. To see the
    same basic data presented with Sankey diagrams, check out this [post](https://www.visualcapitalist.com/how-americans-make-and-spend-their-money-by-age-group/)
    in the *Visual Capitalist*.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for reading. If you enjoyed this article, then check out my books, [*Impractical
    Python Projects*](https://a.co/d/gxMMzzf) and [*Real-world Python*](https://a.co/d/d8rGegu),for
    more coding ideas.And follow me to see more *Quick Success Data Science* projects
    in the future.
  prefs: []
  type: TYPE_NORMAL
