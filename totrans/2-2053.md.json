["```py\ndocker run --name user_db -e POSTGRES_PASSWORD=testpass -p 5432:5432 -d postgres\n```", "```py\nCREATE DATABASE user_database;\n\\c user_database;\n\nCREATE TABLE users (\n    username VARCHAR(50),\n    email VARCHAR(50)\n);\n\nINSERT INTO users (username, email) VALUES\n    ('user1', 'user1@example.com'),\n    ('user2', 'user2@example.com'),\n    ('user3', 'user3@example.com'),\n    ...\n    ('user10', 'user10@example.com');\n```", "```py\nSELECT  email FROM users WHERE username=â€™user10'; \n```", "```py\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass User(BaseModel):\n    name: str\n    email: str\n    body: str\n\n@app.post(\"/send_email\")\nasync def send_email(user: User):\n    return {\n        \"message\": f\"Email successfully sent to {user.name} with email {user.email}. Email body:\\n\\n{user.body}\"\n    }\n```", "```py\nFROM python:3.9-slim-buster\n\nWORKDIR /app\nADD . /app\n\nRUN pip install --no-cache-dir fastapi uvicorn\n\nEXPOSE 1000\n\nCMD [\"uvicorn\", \"app:app\", \"--host\", \"0.0.0.0\", \"--port\", \"1000\"]\n```", "```py\ndocker build -t fastapi_email_service .\n```", "```py\ndocker run -d -p 1000:1000 fastapi_email_service\n```", "```py\n@retry(wait=wait_random_exponential(min=1, max=40), stop=stop_after_attempt(3))\ndef chat_completion_request(messages, functions=None, model=GPT_MODEL):\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + openai.api_key,\n    }\n    json_data = {\"model\": model, \"messages\": messages}\n    if functions is not None:\n        json_data.update({\"functions\": functions})\n\n    response = requests.post(\n        \"https://api.openai.com/v1/chat/completions\",\n        headers=headers,\n        json=json_data,\n    )\n    return response\n```", "```py\nclass Chat:\n    def __init__(self):\n        self.conversation_history = []\n\n    def add_prompt(self, role, content):\n        message = {\"role\": role, \"content\": content}\n        self.conversation_history.append(message)\n\n    def display_conversation(self):\n        for message in self.conversation_history:\n            print(f\"{message['role']}: {message['content']}\")\n```", "```py\nfunctions = [\n    {\n        \"name\": \"send_email\",\n        \"description\": \"Send a new email\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"to\": {\n                    \"type\": \"string\",\n                    \"description\": \"The destination email.\",\n                },\n                \"name\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the person that will receive the email.\",\n                },\n                \"body\": {\n                    \"type\": \"string\",\n                    \"description\": \"The body of the email.\",\n                },\n            },\n            \"required\": [\"to\", \"name\", \"body\"],\n        },\n    },\n    {\n        \"name\": \"sql_query_email\",\n        \"description\": \"SQL query to get user emails\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"query\": {\n                    \"type\": \"string\",\n                    \"description\": \"The query to get users emails.\",\n                },\n            },\n            \"required\": [\"query\"],\n        },\n    },\n]\n```", "```py\nchat = Chat()\nchat.add_prompt(\"user\", \"Send an email to user10 saying that he needs to pay the monthly subscription fee.\")\nresult_query = ''\n\nfor i in range(2):\n    chat_response = chat_completion_request(\n        chat.conversation_history,\n        functions=functions\n    )\n    response_content = chat_response.json()['choices'][0]['message']\n\n    if 'function_call' in response_content:\n        if response_content['function_call']['name'] == 'send_email':\n            res = json.loads(response_content['function_call']['arguments'])\n            send_email(res['name'], res['to'], res['body'])\n            break\n        elif response_content['function_call']['name'] == 'sql_query_email':\n            result_query = query_db(json.loads(response_content['function_call']['arguments'])['query'])\n            chat.add_prompt('user', str(result_query))\n    else:\n        chat.add_prompt('assistant', response_content['content'])\n```", "```py\n{\n  \"message\": \"Email successfully sent to User 10 with email user10@example.com.\",\n  \"Email body\": \"\\n\\nDear User 10, \\n\\nThis is a reminder that your monthly subscription fee is due. Please make the payment as soon as possible to ensure uninterrupted service. Thank you for your cooperation. \\n\\nBest regards, \\nYour Subscription Service Team\"\n}\n```"]