- en: Introduction to Data Version Control
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据版本控制简介
- en: 原文：[https://towardsdatascience.com/introduction-to-data-version-control-59fabf447a60](https://towardsdatascience.com/introduction-to-data-version-control-59fabf447a60)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/introduction-to-data-version-control-59fabf447a60](https://towardsdatascience.com/introduction-to-data-version-control-59fabf447a60)
- en: PYTHON | DATA | PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON | DATA | PROGRAMMING
- en: A step-by-step guide to implementing your own DVC in Python using Hangar
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Hangar在Python中实现自己的DVC的逐步指南
- en: '[](https://david-farrugia.medium.com/?source=post_page-----59fabf447a60--------------------------------)[![David
    Farrugia](../Images/082ed61e24c7c26a4ae1c77343a87824.png)](https://david-farrugia.medium.com/?source=post_page-----59fabf447a60--------------------------------)[](https://towardsdatascience.com/?source=post_page-----59fabf447a60--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----59fabf447a60--------------------------------)
    [David Farrugia](https://david-farrugia.medium.com/?source=post_page-----59fabf447a60--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://david-farrugia.medium.com/?source=post_page-----59fabf447a60--------------------------------)[![David
    Farrugia](../Images/082ed61e24c7c26a4ae1c77343a87824.png)](https://david-farrugia.medium.com/?source=post_page-----59fabf447a60--------------------------------)[](https://towardsdatascience.com/?source=post_page-----59fabf447a60--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----59fabf447a60--------------------------------)
    [David Farrugia](https://david-farrugia.medium.com/?source=post_page-----59fabf447a60--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----59fabf447a60--------------------------------)
    ·7 min read·Aug 18, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----59fabf447a60--------------------------------)
    ·阅读时间7分钟·2023年8月18日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/a8220431c99c3ef95c58fd1005524447.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a8220431c99c3ef95c58fd1005524447.png)'
- en: Photo by [Florian Olivo](https://unsplash.com/@florianolv?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Florian Olivo](https://unsplash.com/@florianolv?utm_source=medium&utm_medium=referral)拍摄，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: What is Data Version Control (DVC)?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是数据版本控制（DVC）？
- en: Any production-level system requires some kind of versioning.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 任何生产级系统都需要某种形式的版本控制。
- en: '**A single source of current truth.**'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**一个当前真实来源的单一来源。**'
- en: Any resources that are continuously updated, especially simultaneously by multiple
    users, require some kind of an audit trail to keep track of all changes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 任何持续更新的资源，尤其是被多个用户同时更新的资源，都需要某种审计跟踪以记录所有更改。
- en: In software engineering, the solution to this is [Git](https://git-scm.com/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件工程中，解决方案是[Git](https://git-scm.com/)。
- en: If you have written code in your life, then you are probably familiar with the
    beauty that is Git.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经编写过代码，那么你可能对Git的美妙之处非常熟悉。
- en: Git allows us to commit changes, create different branches from a source, and
    merge back our branches, to the original to name a few.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Git允许我们提交更改，从源创建不同的分支，并将我们的分支合并回原始分支，仅举几例。
- en: DVC is purely the same paradigm but for datasets. See, live data systems are
    continuously ingesting newer data points while different users carry out different
    experiments on the same datasets.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: DVC完全是相同的范式，但适用于数据集。请看，实时数据系统不断吸收新的数据点，而不同的用户在相同的数据集上进行不同的实验。
- en: This leads to multiple versions of the same dataset, which is definitely not
    a single source of truth.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了同一数据集的多个版本，这显然不是单一的真实来源。
- en: Additionally, in a machine learning environment, we would also have several
    versions of the same ‘model’ trained on different versions of the same dataset
    (for instance, model re-training to include newer data points).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在机器学习环境中，我们还会有多个版本的同一“模型”，这些模型是在相同数据集的不同版本上训练的（例如，重新训练模型以包括更新的数据点）。
- en: If not properly audited and versioned, this would create a tangled web of datasets
    and experiments. We definitely do not want that!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有适当的审计和版本控制，这将会创建一个复杂的数据集和实验网络。我们绝对不想要这种情况！
- en: DVC is, therefore, a system that involves tracking our datasets by registering
    changes on a particular dataset. There are multiple DVC solutions both free and
    paid.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，DVC是一个涉及通过注册特定数据集的更改来跟踪我们数据集的系统。既有免费的DVC解决方案，也有付费的解决方案。
- en: I recently discovered [Hangar](https://github.com/tensorwerk/hangar-py), a fully
    open-source Python DVC package. Let’s have a look at what it can do, shall we?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近发现了[Hangar](https://github.com/tensorwerk/hangar-py)，这是一个完全开源的Python DVC包。我们来看看它能做些什么吧。
- en: Working with Hangar
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Hangar
- en: The hangar package is a pure Python implementation and is available through
    pip.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: hangar 包是一个纯 Python 实现，可以通过 pip 安装。
- en: Its core functionality is also closely developed to git, which greatly helps
    the learning curve.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 它的核心功能也与 git 紧密相关，这极大地帮助了学习曲线的提升。
- en: We also have the option to either interact with hangar via the command line
    or use its dedicated Python client.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以选择通过命令行与 hangar 进行交互，或使用其专用的 Python 客户端。
- en: 'Some functionality available include:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的一些功能包括：
- en: '***checkout*** *— switch to a new branch or reference point*'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***checkout*** *— 切换到新的分支或参考点*'
- en: '***commit*** *— add the current changes to the current branch*'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***commit*** *— 将当前更改添加到当前分支*'
- en: '***branch*** *— create a reference point to a specific commit*'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***branch*** *— 创建一个指向特定提交的参考点*'
- en: '***merge*** *— combine the changes from one branch to another*'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***merge*** *— 将一个分支的更改合并到另一个分支中*'
- en: '***diff*** *— compare the changes between two branches*'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***diff*** *— 比较两个分支之间的更改*'
- en: '***push*** *— upload the local version to the remote repository*'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***push*** *— 将本地版本上传到远程仓库*'
- en: '***pull/fetch*** *— update the local version of a dataset from the remote repository*'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***pull/fetch*** *— 从远程仓库更新数据集的本地版本*'
- en: '***log*** *— display the commit history*'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***log*** *— 显示提交历史*'
- en: '*Note: the remote repository is the single source of current truth.*'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*注意：远程仓库是当前真实数据的唯一来源。*'
- en: The positive thing to note here is that Hangar is not built on top of git but
    rather emulates the functionality of git. This makes it faster.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，Hangar 不是基于 git 构建的，而是模拟 git 的功能。这使得它运行更快。
- en: 'We can install hangar through pip using:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过 pip 使用以下命令安装 hangar：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After installing Hangar, we can import the package directly to Python.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Hangar 后，我们可以直接将该包导入 Python。
- en: The first thing that we need to do to work with Hangar is to create a data repository.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是创建一个数据仓库。
- en: We can import the Repository class from the Hangar package and use it to define
    our repository.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从 Hangar 包中导入 Repository 类并用它来定义我们的仓库。
- en: If it’s our first time working with a particular repository, we have to also
    initialise it using the `init()` function.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是我们第一次处理某个仓库，我们还需要使用 `init()` 函数来初始化它。
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Before we can continue with our data versioning example, let us first discuss
    the methodology behind Hangar.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续数据版本控制的示例之前，让我们先讨论一下 Hangar 背后的方法论。
- en: Approaching Hangar
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接触 Hangar
- en: 'The main learning curve behind Hangar is understanding the best way to interact
    with the package. Hangar involves four main components:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Hangar 的主要学习曲线在于理解如何与这个包进行最佳交互。Hangar 包含四个主要组件：
- en: The Repository
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仓库
- en: We can think about the repository as our project warehouse. The repository is
    essentially a collection and history of the commits performed.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将仓库视为我们的项目仓库。仓库本质上是对所做提交的集合和历史记录。
- en: '**Ideally, every project has its own repository.**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**理想情况下，每个项目都有自己的仓库。**'
- en: For example, if we have two main tasks — predicting handwritten digits and predicting
    fraud — we also create two repositories respectively.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们有两个主要任务——预测手写数字和预测欺诈——我们也会分别创建两个仓库。
- en: The Dataset
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据集
- en: This one is simple.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这一个很简单。
- en: The dataset is, you guessed it, our dataset. But what is a dataset exactly?
    Let’s take the Titanic dataset for analogy. What makes up the dataset?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集就是，你猜对了，就是我们的数据集。但是数据集究竟是什么呢？我们以 Titanic 数据集为例。数据集的组成是什么？
- en: Is it the individual samples? Is it the variables monitored? And here is where
    we can get pretty creative with things. Hangar describes a dataset as a collection
    of columns. We will get into it next.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 是指单个样本吗？是指监控的变量吗？在这里我们可以充分发挥创意。Hangar 将数据集描述为一个列的集合。我们接下来会深入探讨这个问题。
- en: The Column
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列
- en: The column can be any data property or attribute which we like. It can be an
    array of features, an array of labels, an array of feature names, or even an array
    of unique identifiers.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 列可以是我们喜欢的任何数据属性或特征。它可以是特征数组、标签数组、特征名称数组，甚至是唯一标识符数组。
- en: Every item in the column array should, however, correspond to an individual
    sample in the dataset.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，列数组中的每个项目都应该对应于数据集中的单个样本。
- en: 'At the moment, the supported Column types are:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，支持的列类型有：
- en: '*add_bytes_column — bytes*'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*add_bytes_column — 字节*'
- en: '*add_ndarray_column — arrays*'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*add_ndarray_column — 数组*'
- en: '*add_str_column — string*'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*add_str_column — 字符串*'
- en: For instance, if we have a dataset of 28x28 images, we would opt for an array
    column (with every sample having a shape of 28x28) to represent the actual numerical
    data.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们有一个28x28图像的数据集，我们会选择一个数组列（每个样本的形状为28x28）来表示实际的数值数据。
- en: We can use bytes or string columns to store its label, and a string column to
    store the image file name.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用字节或字符串列来存储其标签，并使用字符串列来存储图像文件名。
- en: '![](../Images/7922bdb0f9664f437dbde6ce05e792b3.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7922bdb0f9664f437dbde6ce05e792b3.png)'
- en: Image by author.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: Of course, the above is merely a guide on how to structure your dataset.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，上述只是关于如何构建数据集的指南。
- en: The type of data that you are working with, as well as the type of experiments
    to be done, all impact the structuring strategy for Hangar.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你所处理的数据类型以及要进行的实验类型都会影响Hangar的结构化策略。
- en: For example, one might also opt to have a dedicated column for training data
    and another for validation data.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你也可以选择为训练数据和验证数据各自设立一个专门的列。
- en: A Column should be a collection of data samples. We start off with an empty
    collection, and on sample addition, the collection index increases.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 列应该是数据样本的集合。我们从一个空集合开始，样本添加后，集合索引会增加。
- en: The Data
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据
- en: And finally, the data. Once we have figured out which Columns to have, processing
    the data accordingly becomes a relatively simple task.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后是数据。一旦我们确定了需要哪些列，相应地处理数据就变成了一项相对简单的任务。
- en: The data itself is just numbers. It doesn’t have any direct meaning, and it
    doesn’t have any structure.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 数据本身只是数字。它没有直接的意义，也没有任何结构。
- en: With that out of the way, let’s proceed with the rest of our example.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，让我们继续我们的示例。
- en: Assuming we have a tabular classification dataset — `df` — we will simply store
    the entire dataset in a single column as bytes.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个表格分类数据集——`df`——我们会将整个数据集作为字节存储在一个单独的列中。
- en: We start off by creating a **WriterCheckout**.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始时创建一个**WriterCheckout**。
- en: 'The WriterCheckout object allows us to enable a specific branch (in our case,
    we only have a single branch: master) with write access (i.e. with the ability
    to write and commit changes to the active branch).'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: WriterCheckout对象允许我们启用一个特定的分支（在我们的例子中，我们只有一个分支：master），并具有写入访问权限（即能够写入和提交更改到活动分支）。
- en: We do this using `master = repo.checkout(write=True)`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过`master = repo.checkout(write=True)`来完成这一步。
- en: We can then instruct Hangar to create a bytes Column called ‘*data*’ by calling
    the `add_bytes_column`. Since this is our first commit, our Column is still empty.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以指示Hangar创建一个名为‘*data*’的字节列，通过调用`add_bytes_column`。由于这是我们的第一次提交，所以我们的列仍然是空的。
- en: For our first commit, we can commit our data at index 0.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一次提交，我们可以在索引0处提交数据。
- en: Since we specified our Column as a bytes object, we must first convert our data
    to a bytes object.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将列指定为字节对象，因此我们必须先将数据转换为字节对象。
- en: We can eventually call the `commit` function to commit and save our changes.
    Below, we show a code example of what we just discussed.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以最终调用`commit`函数来提交并保存我们的更改。下面，我们展示了刚刚讨论的代码示例。
- en: '[PRE2]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note: Hangar does not allow more than one WriterCheckouts to be in circulation
    to avoid conflicts. Thus, when not using a WriterCheckout, be sure to close it.
    If a write lock is already in circulation, we would only be allowed to checkout
    in read-only mode.'
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：Hangar不允许有多个WriterCheckouts以避免冲突。因此，当不使用WriterCheckout时，请确保关闭它。如果写锁已经在流通中，我们只能以只读模式进行checkout。
- en: If we want to add another commit to the same Column, we follow the same process
    but instead commit to `master['data'][1]`, and so on for future commits.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想对同一列添加另一个提交，我们按照相同的过程进行，但改为提交到`master['data'][1]`，以此类推进行未来的提交。
- en: Every commit will also have a hash key bound to it.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 每个提交也会有一个绑定的哈希键。
- en: Branching in Hangar
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Hangar中分支
- en: Branching becomes particularly useful when we want to get a copy of the data
    at a specific point to run custom experiments on it without actually changing
    it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 分支在我们想要获取某个特定点的数据副本以进行自定义实验而不实际更改数据时特别有用。
- en: We can branch out and after we confirm that our processing is correct, we also
    have the ability to merge back to the mainstream.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以分支出去，并在确认我们的处理正确后，也可以将其合并回主流。
- en: 'The typical branching flow looks something like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的分支流程大致如下：
- en: '[PRE3]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can create branches using`repo.create_branch(name=''test'')`, and merge
    as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`repo.create_branch(name='test')`创建分支，并按如下方式进行合并：
- en: '[PRE4]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Every commit in Hangar is given a hash key. We can use that hash to pinpoint
    exactly the branching point:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Hangar中的提交都有一个哈希键。我们可以使用这个哈希来准确确定分支点：
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'By calling`repo.log()`, we can get a log summary of the current branches and
    their latest commit. An example log would look something like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用`repo.log()`，我们可以获得当前分支及其最新提交的日志摘要。一个示例日志可能如下所示：
- en: '[PRE6]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can get the difference and conflicts between branches as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下方式获取分支之间的差异和冲突：
- en: '`repo.diff(''master'', ''test2'')`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`repo.diff(''master'', ''test2'')`'
- en: Concluding Remarks
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this post, we went over the Hangar package as an open-source solution for
    DVC in Python. Is this all that Hangar offers? Definitely not! We introduced the
    fundamentals and discovered how we can get started with Hangar. As always, I highly
    encourage you to go over their [documentation](https://hangar-py.readthedocs.io/en/stable/readme.html)
    and practice with your own use-case.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们讨论了Hangar包作为Python中DVC的开源解决方案。这就是Hangar提供的全部吗？绝对不是！我们介绍了基础知识，并发现如何开始使用Hangar。正如以往，我强烈建议你查看他们的[文档](https://hangar-py.readthedocs.io/en/stable/readme.html)并在自己的用例中实践。
- en: '**Did you enjoy this post? For $5/month, you can become a member to unlock
    unlimited access to Medium. You will be directly supporting me and all your other
    favourite writers on Medium. So huge thanks for that!**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**你喜欢这篇文章吗？只需$5/月，你就可以成为会员，解锁对Medium的无限访问。你将直接支持我以及你在Medium上最喜欢的其他作者。非常感谢！**'
- en: '[](https://david-farrugia.medium.com/membership?source=post_page-----59fabf447a60--------------------------------)
    [## Join Medium with my referral link - David Farrugia'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://david-farrugia.medium.com/membership?source=post_page-----59fabf447a60--------------------------------)
    [## 通过我的推荐链接加入Medium - David Farrugia'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为Medium会员，你的部分会员费用会流向你阅读的作者，并且你可以全面访问每个故事……
- en: david-farrugia.medium.com](https://david-farrugia.medium.com/membership?source=post_page-----59fabf447a60--------------------------------)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[david-farrugia.medium.com](https://david-farrugia.medium.com/membership?source=post_page-----59fabf447a60--------------------------------)'
- en: Want to Get in Touch?
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 想联系我吗？
- en: I would love to hear your thoughts on the topic, or anything AI and Data.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我很想听听你对这个话题，或任何关于AI和数据的看法。
- en: Drop me an email at ***davidfarrugia53@gmail.com*** should you wish to get in
    touch.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望联系我，可以发邮件至***davidfarrugia53@gmail.com***。
- en: '[Linkedin](https://www.linkedin.com/in/david-farrugia/)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[Linkedin](https://www.linkedin.com/in/david-farrugia/)'
