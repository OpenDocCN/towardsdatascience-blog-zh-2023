- en: Introduction to Data Version Control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/introduction-to-data-version-control-59fabf447a60](https://towardsdatascience.com/introduction-to-data-version-control-59fabf447a60)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PYTHON | DATA | PROGRAMMING
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A step-by-step guide to implementing your own DVC in Python using Hangar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://david-farrugia.medium.com/?source=post_page-----59fabf447a60--------------------------------)[![David
    Farrugia](../Images/082ed61e24c7c26a4ae1c77343a87824.png)](https://david-farrugia.medium.com/?source=post_page-----59fabf447a60--------------------------------)[](https://towardsdatascience.com/?source=post_page-----59fabf447a60--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----59fabf447a60--------------------------------)
    [David Farrugia](https://david-farrugia.medium.com/?source=post_page-----59fabf447a60--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----59fabf447a60--------------------------------)
    ·7 min read·Aug 18, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a8220431c99c3ef95c58fd1005524447.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Florian Olivo](https://unsplash.com/@florianolv?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: What is Data Version Control (DVC)?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any production-level system requires some kind of versioning.
  prefs: []
  type: TYPE_NORMAL
- en: '**A single source of current truth.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Any resources that are continuously updated, especially simultaneously by multiple
    users, require some kind of an audit trail to keep track of all changes.
  prefs: []
  type: TYPE_NORMAL
- en: In software engineering, the solution to this is [Git](https://git-scm.com/).
  prefs: []
  type: TYPE_NORMAL
- en: If you have written code in your life, then you are probably familiar with the
    beauty that is Git.
  prefs: []
  type: TYPE_NORMAL
- en: Git allows us to commit changes, create different branches from a source, and
    merge back our branches, to the original to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: DVC is purely the same paradigm but for datasets. See, live data systems are
    continuously ingesting newer data points while different users carry out different
    experiments on the same datasets.
  prefs: []
  type: TYPE_NORMAL
- en: This leads to multiple versions of the same dataset, which is definitely not
    a single source of truth.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, in a machine learning environment, we would also have several
    versions of the same ‘model’ trained on different versions of the same dataset
    (for instance, model re-training to include newer data points).
  prefs: []
  type: TYPE_NORMAL
- en: If not properly audited and versioned, this would create a tangled web of datasets
    and experiments. We definitely do not want that!
  prefs: []
  type: TYPE_NORMAL
- en: DVC is, therefore, a system that involves tracking our datasets by registering
    changes on a particular dataset. There are multiple DVC solutions both free and
    paid.
  prefs: []
  type: TYPE_NORMAL
- en: I recently discovered [Hangar](https://github.com/tensorwerk/hangar-py), a fully
    open-source Python DVC package. Let’s have a look at what it can do, shall we?
  prefs: []
  type: TYPE_NORMAL
- en: Working with Hangar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The hangar package is a pure Python implementation and is available through
    pip.
  prefs: []
  type: TYPE_NORMAL
- en: Its core functionality is also closely developed to git, which greatly helps
    the learning curve.
  prefs: []
  type: TYPE_NORMAL
- en: We also have the option to either interact with hangar via the command line
    or use its dedicated Python client.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some functionality available include:'
  prefs: []
  type: TYPE_NORMAL
- en: '***checkout*** *— switch to a new branch or reference point*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***commit*** *— add the current changes to the current branch*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***branch*** *— create a reference point to a specific commit*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***merge*** *— combine the changes from one branch to another*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***diff*** *— compare the changes between two branches*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***push*** *— upload the local version to the remote repository*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***pull/fetch*** *— update the local version of a dataset from the remote repository*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***log*** *— display the commit history*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Note: the remote repository is the single source of current truth.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The positive thing to note here is that Hangar is not built on top of git but
    rather emulates the functionality of git. This makes it faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can install hangar through pip using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After installing Hangar, we can import the package directly to Python.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing that we need to do to work with Hangar is to create a data repository.
  prefs: []
  type: TYPE_NORMAL
- en: We can import the Repository class from the Hangar package and use it to define
    our repository.
  prefs: []
  type: TYPE_NORMAL
- en: If it’s our first time working with a particular repository, we have to also
    initialise it using the `init()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Before we can continue with our data versioning example, let us first discuss
    the methodology behind Hangar.
  prefs: []
  type: TYPE_NORMAL
- en: Approaching Hangar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main learning curve behind Hangar is understanding the best way to interact
    with the package. Hangar involves four main components:'
  prefs: []
  type: TYPE_NORMAL
- en: The Repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can think about the repository as our project warehouse. The repository is
    essentially a collection and history of the commits performed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Ideally, every project has its own repository.**'
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we have two main tasks — predicting handwritten digits and predicting
    fraud — we also create two repositories respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The Dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This one is simple.
  prefs: []
  type: TYPE_NORMAL
- en: The dataset is, you guessed it, our dataset. But what is a dataset exactly?
    Let’s take the Titanic dataset for analogy. What makes up the dataset?
  prefs: []
  type: TYPE_NORMAL
- en: Is it the individual samples? Is it the variables monitored? And here is where
    we can get pretty creative with things. Hangar describes a dataset as a collection
    of columns. We will get into it next.
  prefs: []
  type: TYPE_NORMAL
- en: The Column
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The column can be any data property or attribute which we like. It can be an
    array of features, an array of labels, an array of feature names, or even an array
    of unique identifiers.
  prefs: []
  type: TYPE_NORMAL
- en: Every item in the column array should, however, correspond to an individual
    sample in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment, the supported Column types are:'
  prefs: []
  type: TYPE_NORMAL
- en: '*add_bytes_column — bytes*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*add_ndarray_column — arrays*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*add_str_column — string*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For instance, if we have a dataset of 28x28 images, we would opt for an array
    column (with every sample having a shape of 28x28) to represent the actual numerical
    data.
  prefs: []
  type: TYPE_NORMAL
- en: We can use bytes or string columns to store its label, and a string column to
    store the image file name.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7922bdb0f9664f437dbde6ce05e792b3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the above is merely a guide on how to structure your dataset.
  prefs: []
  type: TYPE_NORMAL
- en: The type of data that you are working with, as well as the type of experiments
    to be done, all impact the structuring strategy for Hangar.
  prefs: []
  type: TYPE_NORMAL
- en: For example, one might also opt to have a dedicated column for training data
    and another for validation data.
  prefs: []
  type: TYPE_NORMAL
- en: A Column should be a collection of data samples. We start off with an empty
    collection, and on sample addition, the collection index increases.
  prefs: []
  type: TYPE_NORMAL
- en: The Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: And finally, the data. Once we have figured out which Columns to have, processing
    the data accordingly becomes a relatively simple task.
  prefs: []
  type: TYPE_NORMAL
- en: The data itself is just numbers. It doesn’t have any direct meaning, and it
    doesn’t have any structure.
  prefs: []
  type: TYPE_NORMAL
- en: With that out of the way, let’s proceed with the rest of our example.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming we have a tabular classification dataset — `df` — we will simply store
    the entire dataset in a single column as bytes.
  prefs: []
  type: TYPE_NORMAL
- en: We start off by creating a **WriterCheckout**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The WriterCheckout object allows us to enable a specific branch (in our case,
    we only have a single branch: master) with write access (i.e. with the ability
    to write and commit changes to the active branch).'
  prefs: []
  type: TYPE_NORMAL
- en: We do this using `master = repo.checkout(write=True)`.
  prefs: []
  type: TYPE_NORMAL
- en: We can then instruct Hangar to create a bytes Column called ‘*data*’ by calling
    the `add_bytes_column`. Since this is our first commit, our Column is still empty.
  prefs: []
  type: TYPE_NORMAL
- en: For our first commit, we can commit our data at index 0.
  prefs: []
  type: TYPE_NORMAL
- en: Since we specified our Column as a bytes object, we must first convert our data
    to a bytes object.
  prefs: []
  type: TYPE_NORMAL
- en: We can eventually call the `commit` function to commit and save our changes.
    Below, we show a code example of what we just discussed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: Hangar does not allow more than one WriterCheckouts to be in circulation
    to avoid conflicts. Thus, when not using a WriterCheckout, be sure to close it.
    If a write lock is already in circulation, we would only be allowed to checkout
    in read-only mode.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If we want to add another commit to the same Column, we follow the same process
    but instead commit to `master['data'][1]`, and so on for future commits.
  prefs: []
  type: TYPE_NORMAL
- en: Every commit will also have a hash key bound to it.
  prefs: []
  type: TYPE_NORMAL
- en: Branching in Hangar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Branching becomes particularly useful when we want to get a copy of the data
    at a specific point to run custom experiments on it without actually changing
    it.
  prefs: []
  type: TYPE_NORMAL
- en: We can branch out and after we confirm that our processing is correct, we also
    have the ability to merge back to the mainstream.
  prefs: []
  type: TYPE_NORMAL
- en: 'The typical branching flow looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can create branches using`repo.create_branch(name=''test'')`, and merge
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Every commit in Hangar is given a hash key. We can use that hash to pinpoint
    exactly the branching point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'By calling`repo.log()`, we can get a log summary of the current branches and
    their latest commit. An example log would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can get the difference and conflicts between branches as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`repo.diff(''master'', ''test2'')`'
  prefs: []
  type: TYPE_NORMAL
- en: Concluding Remarks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this post, we went over the Hangar package as an open-source solution for
    DVC in Python. Is this all that Hangar offers? Definitely not! We introduced the
    fundamentals and discovered how we can get started with Hangar. As always, I highly
    encourage you to go over their [documentation](https://hangar-py.readthedocs.io/en/stable/readme.html)
    and practice with your own use-case.
  prefs: []
  type: TYPE_NORMAL
- en: '**Did you enjoy this post? For $5/month, you can become a member to unlock
    unlimited access to Medium. You will be directly supporting me and all your other
    favourite writers on Medium. So huge thanks for that!**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://david-farrugia.medium.com/membership?source=post_page-----59fabf447a60--------------------------------)
    [## Join Medium with my referral link - David Farrugia'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: david-farrugia.medium.com](https://david-farrugia.medium.com/membership?source=post_page-----59fabf447a60--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Want to Get in Touch?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I would love to hear your thoughts on the topic, or anything AI and Data.
  prefs: []
  type: TYPE_NORMAL
- en: Drop me an email at ***davidfarrugia53@gmail.com*** should you wish to get in
    touch.
  prefs: []
  type: TYPE_NORMAL
- en: '[Linkedin](https://www.linkedin.com/in/david-farrugia/)'
  prefs: []
  type: TYPE_NORMAL
