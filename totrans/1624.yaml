- en: Pandas for Time Series
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/pandas-for-time-series-c6cb7c0a3680](https://towardsdatascience.com/pandas-for-time-series-c6cb7c0a3680)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data Processing in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This article explained the pandas’ methods for time series. Let’s deal with
    the time series like a pro.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://kahemchu.medium.com/?source=post_page-----c6cb7c0a3680--------------------------------)[![KahEm
    Chu](../Images/2f89d02e85f61f08f048773990f4d53f.png)](https://kahemchu.medium.com/?source=post_page-----c6cb7c0a3680--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c6cb7c0a3680--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c6cb7c0a3680--------------------------------)
    [KahEm Chu](https://kahemchu.medium.com/?source=post_page-----c6cb7c0a3680--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c6cb7c0a3680--------------------------------)
    ·13 min read·Jul 26, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0d95a391ba99fb3f6fd922f3c4bbba8f.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Aron Visuals](https://unsplash.com/@aronvisuals?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/s/photos/time?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Since I joined the workforce as a data scientist, most of the data I deal with
    are time series. Well, so there are a lot of definitions for ***time series***,
    generally it’s defined as a set of data points collected over a period of time.
    Or speaking in a Pythonic way, it refers to a dataset with a datetime index, and
    at least one column with numerical values.
  prefs: []
  type: TYPE_NORMAL
- en: It could be the price of a stock over the past few months, the sales of a hypermarket
    for the past few weeks, or even the blood sugar level records collected throughout
    the months for a patient.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I will show how to apply pandas to a time series dataset, with
    an example of generated blood sugar level records.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that, this article will be structured as below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[DateTime Format Manipulation](#aca7) — *changing the datetime series into
    the desired format*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Converting DateTime to a Particular Period](#0342) — *convert each data point
    to the specific time periods*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Filtering DateTime Series based on Condition](#db28) — *filtering data points
    based on selected time period*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Time Shift](#e5e1) — *shifting data points down for a specific number of period*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Resampling Time Series](#6895) — *grouping data points based on the specified
    time period*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Line Chart](#b3cf)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As usual, the first step in any analysis with Python is importing the necessary
    library.
  prefs: []
  type: TYPE_NORMAL
- en: Import Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Then, let’s generate a blood sugar level records dataset for this demo.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: With the script above, a dataset with 2160 data points recorded in one year,
    with 4 hours gap is generated. The data points started on July 1st, 2020 and ended
    on Jun 25th, 2021.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ab1a588e0031acd76012e416dc6774e4.png)'
  prefs: []
  type: TYPE_IMG
- en: The first 10 data points. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/099cacfb56278a59cdddf740a64b0c37.png)'
  prefs: []
  type: TYPE_IMG
- en: The last 10 data points. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Now the data is ready, let’s get started!😊
  prefs: []
  type: TYPE_NORMAL
- en: DateTime Format Manipulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Below are five methods that can be used for manipulating datetime series.
  prefs: []
  type: TYPE_NORMAL
- en: '`[pandas.Series.dt.normalize](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.normalize.html)`
    — Convert times to midnight, 12:00:00.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[pandas.Series.dt.round](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.round.html)`
    — Perform round operation on the data to the specified freq.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[pandas.Series.dt.floor](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.floor.html)`
    — Perform floor operation on the data to the specified freq.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[pandas.Series.dt.ceil](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.ceil.html)`
    — Perform ceil operation on the data to the specified freq.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[pandas.Series.dt.strftime](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.strftime.html)`
    — Convert to Index using specified date_format.'
  prefs: []
  type: TYPE_NORMAL
- en: Method to Round Off the Timestamp
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the `.round`, `.floor` and `.ceil` methods, we need to define the frequency
    to round off the time. The frequency must be a fixed frequency like ‘S’ (second)
    and cannot be ‘ME’ (month end).
  prefs: []
  type: TYPE_NORMAL
- en: Based on the author’s try & error, the fixed frequency are D, H, T/min, S, L/ms,
    U/us, and N. See [Time Series Frequencies](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-offset-aliases)
    for all the frequency values.
  prefs: []
  type: TYPE_NORMAL
- en: The difference of `.round`, `.floor` and `.ceil` methods will be shown in the
    two examples below. *The two examples below will use the list of dates generated
    instead of the data frame generated for demo purposes.*
  prefs: []
  type: TYPE_NORMAL
- en: The first example is rounding off the timestamp with a 2-hour frequency gap
    to a 6-hour frequency gap.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9e61ab3ca714132bad512c44ec4fbccf.png)'
  prefs: []
  type: TYPE_IMG
- en: Script Output 1\. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The second example is rounding off the timestamp with a 3-hour frequency gap
    to a 6-hour frequency gap.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/05f6416445f4c74d95fafe6f03514bf0.png)'
  prefs: []
  type: TYPE_IMG
- en: Script Output 2\. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The 6-hour frequency means the time will be cut into equal-length time periods,
    where each period is 6 hours apart, and the first period always starts at midnight
    00:00:00\. As there are 24 hours in a day, hence we will be having 4 periods as
    shown in the chart below.
  prefs: []
  type: TYPE_NORMAL
- en: The first period will be 12 am to 6 am, then the second period will be 6 am
    to 12 pm and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e14e879219bb5be9280f8a761f5cb606.png)'
  prefs: []
  type: TYPE_IMG
- en: Difference between round, floor and ceil methods. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the chart above, for the `.floor` method, it will always return
    the lower bound of the period. For the `.ceil` method, it is the opposite of `.floor`,
    where it will always return the upper bound of the period.
  prefs: []
  type: TYPE_NORMAL
- en: For the `.round` method, it will return the nearest bound of the period, but
    when the distance to the two bounds is equal, it will return either.
  prefs: []
  type: TYPE_NORMAL
- en: That’s the difference between the 3 methods above. How the timestamps are rounded
    off will impact the result of the analysis later, hence, it’s critical to pick
    the method according to the analysis required.
  prefs: []
  type: TYPE_NORMAL
- en: To apply the method above on a data frame, we need to add `.dt` before the method.
  prefs: []
  type: TYPE_NORMAL
- en: To change the date, let us copy the date index as a column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ec79f7a0c68e4a242cdce8ca3e5be818.png)'
  prefs: []
  type: TYPE_IMG
- en: A data frame with duplicated dates column. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The `dtypes` of the data frame is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/96a8f2018730d6f2208bc984cfc61dc2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: In the first example below, we will round the timestamp at a 6-hour frequency.
    The `.dt.normalize` will always round the time to midnight, hence only the date
    is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/edcbf73626b8f8fb800dce67bae2c0af.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The first example is the same as the two examples with generated list of dates,
    the timestamp is rounding off according to the hour.
  prefs: []
  type: TYPE_NORMAL
- en: In the second example below, we will round the date at “D” frequency which means
    the timestamp will be rounded off to the nearest day.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/51c6b86cd4572b84cdd481c581f8a2e7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: For the second example, the `.floor` method will return the lower bound of the
    period which is the same day as the timestamp, while the `.ceil` method will always
    return the upper bound of the period which is the next day of the date **except**
    when the timestamp is at midnight 00:00 hour.
  prefs: []
  type: TYPE_NORMAL
- en: For the `.round` method, it will still return the nearest bound of the period,
    but when the distance to the two bounds is equal, it will return either.
  prefs: []
  type: TYPE_NORMAL
- en: Method to Convert the DateTime Format — strftime()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By using `.strftime()` methods, we can convert the timestamp into the required
    format. In the example below, the standard ISO format date has been converted
    into <month> <day>, <year> format, which can be represented by `strftime()` format
    code`‘%B %d, %Y’`. `%B` is referring to Month as the locale’s full name. See all
    the `strftime()` format codes [here](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2873e42fa1dfe494f788cad3e878f28e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Converting the DateTime format like changing the month from digit to full name
    can clear the clutter for whether the 7 refers to month or day.
  prefs: []
  type: TYPE_NORMAL
- en: Converting DateTime to a Particular Period
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`[pandas.Series.dt.to_period](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.to_period.html)`
    — Cast to PeriodArray/Index at a particular frequency. Converts DatetimeArray/Index
    to PeriodArray/Index.'
  prefs: []
  type: TYPE_NORMAL
- en: The first example below will convert a timestamp to a week.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As in the output below, the datetime array has been converted to a period array,
    where each element in the list has been changed from a timestamp to a week.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9a90575ffc056d13bcb48f48aaae255e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The second example below will convert a timestamp to a month.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As in the output below, the datetime array has been converted to a month array,
    where each element in the list has been changed from a timestamp to a month.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fa55cb7d0207e8e8c7e3ade86c79f503.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's apply that to a data frame. Same with the example earlier, we need
    to add `.dt` before `.to_period()` when applying the method to a data frame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Each datetime in the dates column has been converted to a month.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/04b5ffce2c0afef01547e648c747be91.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: With the new period column, we can do a pivot table to get additional insight.
    For example, we can calculate the average blood sugar level for each month.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f9169fc78117bfa750e47428d4e21774.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: We can also calculate the average blood sugar level by week period for more
    detailed monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4bf944a77acb638a23066f071853ebc5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: We can calculate the average blood sugar level for each week as below. If the
    blood sugar level continues to increase for multiple weeks, then we should take
    action to control it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/30a4d0016f257664489ee919ec838e31.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: If we use the daily data, the rise in blood sugar level for a few days might
    be due to a luxurious dinner only, but the rise in blood sugar for a few weeks
    might indicate the patient’s health is at risk.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9499700b4325fe839794c84693dcdc78.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: For the pivot table, the index label and the column label will not be at the
    same level, as shown in the image above.
  prefs: []
  type: TYPE_NORMAL
- en: To make the Index label and column label at the same level, the index will need
    to be reset as below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/228697cd406880712d8605853eed8baf.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering DateTime Series based on Condition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`[pandas.Series.at_time](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.at_time.html)`
    — Select values at a particular time of day (e.g., 9:30 AM).'
  prefs: []
  type: TYPE_NORMAL
- en: '`[pandas.Series.between_time](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.between_time.html)`
    — Select values between particular times of the day (e.g., 9:00–9:30 AM).'
  prefs: []
  type: TYPE_NORMAL
- en: This method is nice for the investigation of health records, like the blood
    sugar level of a patient every day in the early morning and before sleep. It could
    also be useful for applications like tracking your sales or the airline within
    a specific time period.
  prefs: []
  type: TYPE_NORMAL
- en: For examples below, we will apply the two methods mentioned above to track the
    blood sugar level records at 8 am and between 7 pm and 9 pm.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/83410cb6b8e5404b1d4a707d16cd31cc.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: In the example above, only the records that were recorded at 8 am will be shown.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** This method only can be applied on the data frame where the Index
    is **DatetimeIndex**, else will cause TypeError as below.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/44aa998134696c5af3f4d4cdd8c6c438.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: For example below, only the first five records between 7 pm and 9 pm will be
    shown.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1510c8b669c68f53b0ed19d7d44e5442.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Time Shift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`[pandas.Series.shift](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.shift.html)`
    — Shift the time index, using the index’s frequency if available.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** As this method shifts the data points according to the time index,
    the Index must be a **Datetime index** or a **Period index**.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Let’s recall the pivot table from the previous section to demo the time shift
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/65190e0b07e74504bd611d78f1cf4a80.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We can shift down the data points by one period as specified in the script.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6dc7a0152d5733655a9fb82c985e011f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: By changing the periods to -1, we can shift up the data points by one period
    too. For example, the data points have been shifting up one month, which means
    the current July data point was August.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d443c77132f66aac8385a46d645424a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The column name might be ambiguous as it did not reflect the actual value. To
    solve that, we can combine it with `.rename()` method to directly rename the time
    shift column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/aeb5df3091c81123599f1f91fcd7addf.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: We can combine the original data points with the shifted data points to make
    a comparison table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8fadc57577f486223f5525d494c55a1e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: With the two series above, we can calculate the percentage of changes in blood
    sugar levels.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/04a81197d5a5a19fc6aaf0deef3899fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: That’s pretty cool. Do you know what is even cooler? We do not need to calculate
    the percentage of change, `pandas` have the method ready for you😊!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d1627990dbc8a45e4362ead6ca178d65.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: As we continue from the previous example, there are two columns in the data
    frame now. When have more than one column, need to specify to perform calculations
    on which column.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4059a24b87f02a485abf4304b8eb7842.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Resampling Time Series
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`[pandas.Series.resample](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.resample.html)`
    — Convenience method for frequency conversion and resampling of time series. The
    object must have a datetime-like index (DatetimeIndex, PeriodIndex, or TimedeltaIndex),
    or the caller must pass the label of a datetime-like series/index to the on/level
    keyword parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: The example below is using the `df_pivot` from the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The script above will resample the data frame based on the period index, which
    means it will group the data points based on the period specified, where in this
    case is “Q” or quarter, by the mean of the data points within the period.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cad40a1b8bdb89fe8932f629eb7c0a7d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Below is another example of resampling the data points with another period of
    time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a6722e30b83e9813b00c114bf9a16b56.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, the data points will be grouped based on the period specified,
    where in this case is “Y” or year, by the mean of the data points within the period.
    We can also group the data points by the max value from the data points within
    the period.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8a502609f7bb50ccd27fb941f3c268e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Take note that the calculated column like `pct_change` and `value_change` will
    be added up too, so now the calculated column in the output does not reflect the
    correct value anymore.
  prefs: []
  type: TYPE_NORMAL
- en: Take note that the resample request the data frame to have a DateTime-like or
    period index, else it will cause a type error. Let’s see
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/42d7d127534bd9082696331f1493eb13.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f64d19f9524971652070572afac56b76.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Line Chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`[pandas.Series.plot.line](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.plot.line.html)`
    — Plot Series or DataFrame as lines.'
  prefs: []
  type: TYPE_NORMAL
- en: We can plot the line chart with `.plot()` method and `.plot.line()` .
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Both commands above yield the same result.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/378745db7b15c4059019f249c78307fa.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: If you notice, there is 2021 under Jan, maybe if we let the data start from
    2020 Jan, it will show 2020 as well?
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create the data frame with data points starting from the year 2020.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/78a463395f065708813e4317cc4756da.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Let’s plot the chart!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eb605ca424ac3274fdb77d81c8e2e1a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Yes! So the year will show under January, if you have data starting from the
    second or later month in the year, you may need to make a better title to remove
    clutter from your audience.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7c863a77c9fd478635a6deee038fd232.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: One last note to you, the `pandas` plot function required `matplotlib` library
    to be installed, or else it will cause an import error.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In conclusion, we have covered how to format the DateTime series, and how to
    change a timestamp to a period or group them into periods by resampling. We also
    cover how to effectively filter the time series based on condition, and shift
    the data points up or down to learn new insights. Lastly, we also go thru how
    to swiftly create a chart to see the trend for the time series.
  prefs: []
  type: TYPE_NORMAL
- en: That’s all for the `pandas` for time series. I hope you enjoy reading this article
    and hope it helps you to understand more about how to apply `pandas` to deal with
    time series. Thanks! 😊
  prefs: []
  type: TYPE_NORMAL
- en: Stay Connected
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Subscribe on [YouTube](https://www.youtube.com/channel/UCiMtx0qbILP41Ot-pkk6eJw)
  prefs: []
  type: TYPE_NORMAL
- en: Side Note
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have explained the possible manipulation you can perform on the DateTime variables
    in [Dealing with Dates in Python](https://medium.com/towards-data-science/dealing-with-dates-in-python-1b4069a07a0f).
  prefs: []
  type: TYPE_NORMAL
- en: In [Report Automation Tips with Python](/report-automation-tips-with-python-783a9cd58e23),
    I have explained some tips on report automation. Check it out!
  prefs: []
  type: TYPE_NORMAL
- en: Thank you and congrats for reading to the end 😊!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9779752c92760d918255cb7694d8ab6f.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Hanny Naibaho](https://unsplash.com/@hannynaibaho?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/images/events/thank-you?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
