- en: 'Programming in 3D: My First Steps into Quantum Computing'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在三维中编程：我迈出的量子计算第一步
- en: 原文：[https://towardsdatascience.com/programming-in-3d-my-first-steps-into-quantum-computing-566b9b93929d](https://towardsdatascience.com/programming-in-3d-my-first-steps-into-quantum-computing-566b9b93929d)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/programming-in-3d-my-first-steps-into-quantum-computing-566b9b93929d](https://towardsdatascience.com/programming-in-3d-my-first-steps-into-quantum-computing-566b9b93929d)
- en: Tutorial
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 教程
- en: A world of computing in multiple dimensions
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多维计算的世界
- en: '[](https://medium.com/@KoryBecker?source=post_page-----566b9b93929d--------------------------------)[![Kory
    Becker](../Images/53a2493fe53f215d3e715d456b36c553.png)](https://medium.com/@KoryBecker?source=post_page-----566b9b93929d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----566b9b93929d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----566b9b93929d--------------------------------)
    [Kory Becker](https://medium.com/@KoryBecker?source=post_page-----566b9b93929d--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@KoryBecker?source=post_page-----566b9b93929d--------------------------------)[![Kory
    Becker](../Images/53a2493fe53f215d3e715d456b36c553.png)](https://medium.com/@KoryBecker?source=post_page-----566b9b93929d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----566b9b93929d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----566b9b93929d--------------------------------)
    [Kory Becker](https://medium.com/@KoryBecker?source=post_page-----566b9b93929d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----566b9b93929d--------------------------------)
    ·9 min read·Feb 22, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----566b9b93929d--------------------------------)
    ·9分钟阅读·2023年2月22日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/632bdebf55363ec9dc95beb782e83e6d.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/632bdebf55363ec9dc95beb782e83e6d.png)'
- en: 'Source: [Stable Diffusion](https://stablediffusionweb.com/).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：[Stable Diffusion](https://stablediffusionweb.com/)。
- en: I remember my first quantum experience
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我记得我的第一次量子体验
- en: I was speaking at the Grace Hopper 2018 ([GHC18](https://ghc.anitab.org/2018-attend/))
    conference. I had just visited the incredibly crowded and overwhelming vendor
    expo, and was looking for place to sit for a few minutes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我在2018年格雷斯·霍珀（[GHC18](https://ghc.anitab.org/2018-attend/)）大会上发言。我刚刚参观了人满为患、令人应接不暇的展位博览会，并且正在寻找一个可以坐一会儿的地方。
- en: As it turns out, I ended up sitting down to an introductory presentation from
    IBM Quantum on using [Qiskit](https://qiskit.org/), an open-source quantum computing
    framework.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 结果证明，我坐下来参加了IBM Quantum关于使用[Qiskit](https://qiskit.org/)的入门演讲，这是一种开源量子计算框架。
- en: Peering into the looking glass
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 透过镜子观察
- en: The presentation was a basic introduction into the concept of a qubit and [superposition](https://medium.com/towards-data-science/the-magic-of-quantum-computing-a-beginners-guide-to-writing-a-magic-number-guessing-game-c1cdb384f457).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个演讲是对量子比特和[叠加态](https://medium.com/towards-data-science/the-magic-of-quantum-computing-a-beginners-guide-to-writing-a-magic-number-guessing-game-c1cdb384f457)概念的基本介绍。
- en: I had no idea what superposition was, and yet, I found the presentation absolutely
    enthralling.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我对什么是叠加态毫无头绪，但我发现这次演讲绝对引人入胜。
- en: Just imagine, the idea of a bit on a computer being able to represent both the
    values 0 and 1 at the same time.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，计算机上的比特能够同时表示0和1这两个值的想法。
- en: '*How could this be possible?*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*这怎么可能呢？*'
- en: While this ultimately started my [foundation](https://medium.com/towards-data-science/the-magic-of-quantum-computing-a-beginners-guide-to-writing-a-magic-number-guessing-game-c1cdb384f457)
    into quantum computing, it also opened my eyes to the idea of programming at an
    entirely different level.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这最初让我对量子计算建立了[基础](https://medium.com/towards-data-science/the-magic-of-quantum-computing-a-beginners-guide-to-writing-a-magic-number-guessing-game-c1cdb384f457)，但它也让我对在完全不同的层次上编程的想法开了眼界。
- en: It felt like programming in 3D.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这感觉就像在三维空间中编程。
- en: Programming in the quantum world
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在量子世界中编程
- en: On a classical computer, bits are represented with a value of 0 or 1\. This
    is an exclusive condition.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在经典计算机上，比特以0或1的值表示。这是一种排他条件。
- en: A bit can hold a value of 0 OR 1.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个比特可以持有0或1的值。
- en: However, it can not be both 0 AND 1 at the same time.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它不可能同时是0和1。
- en: A qubit on a quantum computer, on the other hand, can hold a value of 0 AND
    1 (or a floating point value in between) at the same time.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，量子计算机上的量子比特可以同时持有0和1的值（或介于两者之间的浮动值）。
- en: '*Think about this for a moment*'
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*想一想这个问题*'
- en: 'If we have two bits on a classical computer, we can represent one of the following
    values during a single CPU cycle: 00, 01, 10, 11.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在经典计算机上有两个比特，我们可以在一个CPU周期内表示以下一个值：00、01、10、11。
- en: However, two qubits on a quantum computer can represent those same values simultaneously.
    This means that you can process calculations with quadratic or exponential increases
    in speed!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，量子计算机上的两个量子位可以同时表示这些相同的值。这意味着你可以以二次或指数级的速度处理计算！
- en: Similarly to how two qubits can represent four different values simultaneously,
    with three qubits we can represent eight values. Likewise, with four qubits we
    can represent sixteen.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于两个量子位可以同时表示四种不同的值，三个量子位可以表示八个值。同样，四个量子位可以表示十六个值。
- en: While a classical computer can process n calculations per n bits, a quantum
    computer can process an astounding 2^n calculations per n qubits!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然经典计算机可以处理每n位的n个计算，但量子计算机可以处理惊人的2^n个计算每n个量子位！
- en: With just 50 qubits you could process 2⁵⁰ calculations in a single CPU cycle.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 只需50个量子位，你就可以在一个CPU周期内处理2⁵⁰个计算。
- en: This is equivalent to over 140,000 GB of data processed during a single run
    of the program.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于在程序的单次运行中处理超过140,000 GB的数据。
- en: Thinking in a higher dimension
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在更高维度中思考
- en: Since quantum computing can process multiple states for each qubit simultaneously,
    you begin to think in an entirely different way when writing a program.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于量子计算可以同时处理每个量子位的多个状态，因此编写程序时你开始以完全不同的方式思考。
- en: Instead of writing a program with a single bit and expecting it to result in
    a value of 0 or 1 for a particular calculation, you have to begin thinking in
    a range of percentages.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 与其编写一个使用单一比特的程序并期望它在特定计算中得到0或1的结果，你必须开始考虑一系列的百分比。
- en: So, a qubit might be 0 about half of the time, and it might be 1 the other half
    of the time.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，一个量子位可能在一半时间里为0，另一半时间里为1。
- en: This sounds confusion, and it had me confused at first as well — *in fact, it
    still does!*
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来很混乱，我最初也感到困惑——*实际上，到现在仍然感到困惑！*
- en: However, let’s consider a fun example to understand the core difference in programming
    a classical program to programming a quantum computer.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，让我们考虑一个有趣的示例来理解编写经典程序与编写量子计算机程序之间的核心区别。
- en: I say hello, you say goodbye
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我说你好，你说再见
- en: Let’s suppose that we want to write a program to output “Hello” or “Goodbye”,
    depending on an argument passed in having the value of 1 or 3.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想编写一个程序，根据传入的参数值为1或3，输出“你好”或“再见”。
- en: If the function is passed an input of 1, we output the word, “Hello”.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数接收到输入1，我们输出单词“你好”。
- en: If the function is passed an input of 3, we output the word, “Goodbye”.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数接收到输入3，我们输出单词“再见”。
- en: These two values are only one bit apart in binary (1 = 01, 3 = 11). We’re keeping
    the first, least significant bit, fixed to a value of 1\. These two values serve
    as a convenient example for a quantum computer.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个值在二进制中相差仅一位（1 = 01，3 = 11）。我们将第一个、最低有效位固定为1。这两个值作为量子计算机的一个方便示例。
- en: Let’s see how we would write a plain classical program with it.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何用它来编写一个普通的经典程序。
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Hello
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你好
- en: Goodbye
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 再见
- en: This is programming at a two-dimensional level.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是在二维层面上编程。
- en: We have a function that we can understand and it takes a single numeric input.
    We use a conditional statement to check if the value is 1 or 3\. We output the
    message accordingly.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个可以理解的函数，它接受一个数字输入。我们使用条件语句来检查值是否为1或3。然后相应地输出消息。
- en: Each time this function is executed, we know exactly what the output will be
    according to the input.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 每次执行此函数时，我们都知道根据输入输出的结果是什么。
- en: Let’s see what this looks like on a quantum computer.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在量子计算机上这是什么样子的。
- en: Programming in 3D
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在3D中编程
- en: We can use the quantum computing framework, Qiskit, to create our program, as
    shown in the following example.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用量子计算框架Qiskit来创建我们的程序，如下例所示。
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/ecc81276f0e11acabf924541c62b1bc6.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ecc81276f0e11acabf924541c62b1bc6.png)'
- en: 'A quantum computing program for generating a 2-bit number of 01 (1) or 11 (3).
    The first qubit (q0) is set to a value of 1\. The second qubit (q1) is in superposition
    with a value of 0 and 1\. Source: Author, generated by Qiskit.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 生成2比特数字01（1）或11（3）的量子计算程序。第一个量子位（q0）设置为1。第二个量子位（q1）处于0和1的叠加态。来源：作者，由Qiskit生成。
- en: The above program uses two qubits. Just like our classical program using an
    input of 1 or 3 to output a message, we can represent the same two values on a
    quantum computer by using two qubits.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的程序使用了两个量子比特。就像我们的经典程序使用输入 1 或 3 来输出消息一样，我们可以通过使用两个量子比特在量子计算机上表示相同的两个值。
- en: Since both of the values in binary, 01 (1) and 11 (3), require the least-significant
    bit to be a value of 1, we invert the first qubit (using the X-gate) to hold a
    value of 1.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于二进制中两个值 01 (1) 和 11 (3) 都需要最不重要的位为 1，我们通过反转第一个量子比特（使用 X-gate）来使其持有值 1。
- en: '*Now, here comes the amazing part*'
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*现在，这里来到了惊人的部分*'
- en: Our quantum program can hold two different values at the same time!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的量子程序可以同时持有两个不同的值！
- en: While the least significant qubit (q0) is fixed to a value of 1, the most significant
    qubit (q1) will hold a value of both 0 AND 1, effectively representing the integer
    1 or 3\. If this qubit ends up measuring as a value of 0, the resulting binary
    will be 01, and thus result in an integer of 1\. If the qubit measures a value
    of 1, the resulting binary will be 11, and result in an integer of 3.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当最不重要的量子比特 (q0) 固定为 1 时，最重要的量子比特 (q1) 将同时持有 0 和 1 的值，从而有效地表示整数 1 或 3。如果这个量子比特最终测量为
    0，则结果二进制为 01，从而得到整数 1。如果量子比特测量为 1，则结果二进制为 11，得到整数 3。
- en: '**Together, the two qubits are virtually able to represent both the numbers
    1 and 3 at the same time!**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**两个量子比特几乎可以同时表示数字 1 和 3！**'
- en: Let’s run the program and see what the output looks like.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行程序，看看输出结果。
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '{‘11’: 526, ‘01’: 498}'
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '{‘11’: 526, ‘01’: 498}'
- en: A quantum computer outputs the number of times that the two qubits measured
    a value of 11 or 01\. In both cases, notice how only the most-significant qubit
    (the one towards the left) is changing value.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 量子计算机输出两个量子比特测量为 11 或 01 的次数。在这两种情况下，请注意只有最重要的量子比特（即左侧的那个）在变化。
- en: This is the qubit (q1) that we placed in superposition — and this is the part
    where it feels like programming in 3D!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们放置于叠加态的量子比特 (q1) —— 这就是感觉像在 3D 中编程的地方！
- en: We’re no longer considering a single value. Instead, we now have to think about
    *multiple* values. Specifically, we have to think about both 1 and 3 as an input
    into our greeting program simultaneously.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再考虑单一值。而是，我们现在必须考虑 *多个* 值。具体来说，我们必须同时考虑 1 和 3 作为输入到我们的问候程序中。
- en: '![](../Images/6b830b3bcc9dc22177117ef13ea5340f.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6b830b3bcc9dc22177117ef13ea5340f.png)'
- en: 'The distribution of results for 1 or 3 on a quantum computer. Source: Author.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 量子计算机上 1 或 3 的结果分布。来源：作者。
- en: Half of the time we will receive a 1 as input to our function, while the other
    half of the time we will receive a 3.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一半时间我们会收到 1 作为函数输入，而另一半时间我们会收到 3。
- en: The message that our function outputs is tied directly to the chance that the
    second qubit (q1) ends up in a state of 0 or 1.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的函数输出的消息直接与第二个量子比特 (q1) 处于 0 或 1 状态的机会相关。
- en: Running the quantum version
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行量子版本
- en: It takes significant thought to wrap one’s mind around the idea that a quantum
    program will return multiple values.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 理解量子程序会返回多个值的想法需要大量思考。
- en: Since we will get back multiple values, we would need to change the greeting
    program to account for both cases.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将返回多个值，我们需要更改问候程序以考虑这两种情况。
- en: '[PRE3]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Hello
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你好
- en: Goodbye
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 再见
- en: The above program slightly modifies our original classical implementation, in
    that we are now checking if any of the resulting counts from measuring the quantum
    circuit have a count greater than zero. If so, we output the result.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的程序略微修改了我们原来的经典实现，即我们现在检查量子电路测量结果中是否有任何计数大于零。如果有，我们输出结果。
- en: 'Notice, the important distinction between the classical and quantum implementations
    of the greeting function:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，经典版和量子版问候函数之间的重要区别：
- en: The classical version required calling the *greeting()* function two times in
    order to output both messages.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经典版需要调用 *greeting()* 函数两次以输出两条消息。
- en: The quantum version only requires a single call of *qgreeting()* to output the
    same messages.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 量子版本只需要调用一次 *qgreeting()* 即可输出相同的消息。
- en: Superimposing greetings
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 叠加问候
- en: So far, we’ve modified the greeting program to check the counts from the qubit
    measurements. This let us output two messages from a single call, which helps
    us understand the quantum nature of multiple outcomes from our program.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经修改了问候程序以检查量子比特测量的计数。这使我们能够从一次调用中输出两个消息，这有助于我们理解程序中多个结果的量子性质。
- en: However, since the qubits truly represent multiple values at the same time,
    instead of displaying two separate greetings, maybe we could superimpose the two
    greetings on top of one another!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于量子比特确实同时表示多个值，与其展示两个单独的问候语，也许我们可以将两个问候语叠加在一起！
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: HelGood
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: HelGood
- en: Wow — we’re superimposing the two messages (“Hello” and “Goodbye”) and combining
    them into a single greeting (“HelGood”).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 哇——我们将两个消息（“你好”和“再见”）叠加在一起，并将它们合并为一个问候语（“HelGood”）。
- en: The number of letters output from each greeting comes from the measurement counts
    from each outcome of 01 (1) and 11 (3) in our quantum program.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从每个问候语输出的字母数量来自我们量子程序中每个结果01（1）和11（3）的测量计数。
- en: Since our quantum circuit has a 50/50 chance of resulting in either outcome,
    it’s no surprise that we’re taking the first half of each greeting and joining
    them together.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的量子电路有50/50的机会得到任何结果，因此我们将每个问候语的前一半组合在一起也就不足为奇。
- en: '*Well, maybe that isn’t quite right either*'
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*好吧，也许这也不完全正确*'
- en: While merging the two greetings together does, indeed, give a sense of the multiple
    values that the quantum program can simultaneously represent, it’s still a bit
    confusing.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将两个问候语合并在一起确实可以体现量子程序同时表示的多重值，但仍然有些令人困惑。
- en: Instead, let’s resolve the multiple quantum states into a single answer.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，让我们将多个量子态解析为一个单一的答案。
- en: Flattening down quantum
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展平量子
- en: As we’ve seen, the quantum *qgreeting()* uses a percentage of counts, resulting
    from the measurements of the quantum program in order to output a message.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，量子*qgreeting()* 使用量子程序测量结果中的百分比计数来输出消息。
- en: Since we have measurement counts for each outcome, let’s just take the majority
    count and pass that as input to our original classical greeting method.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们对每个结果都有测量计数，让我们只取数量最多的计数，并将其作为输入传递给我们原始的经典问候方法。
- en: 'If the quantum program resulted in {‘11’: 529, ‘01’: 495}, we would use the
    binary result of 11, which equals 3, since it has the highest count.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '如果量子程序的结果是 {‘11’: 529, ‘01’: 495}，我们将使用二进制结果11，其等于3，因为它的计数最多。'
- en: Majority rules
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多数规则
- en: Let’s use this method to run our original classical greeting method by selecting
    the value with the majority count and passing it as input to our classical program.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用这种方法，通过选择数量最多的值并将其作为输入传递给我们的经典程序来运行我们原始的经典问候方法。
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Hello
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你好
- en: Goodbye
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 再见
- en: Goodbye
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 再见
- en: Goodbye
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 再见
- en: Hello
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你好
- en: Goodbye
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 再见
- en: This seems more realistic.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎更为现实。
- en: We’re now selecting the majority count and using that message as the output.
    This is actually called measuring in the [computational basis](https://quantumcomputing.stackexchange.com/questions/1410/what-is-meant-by-the-term-computational-basis)
    state.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在选择数量最多的计数，并使用该消息作为输出。这实际上被称为在[计算基](https://quantumcomputing.stackexchange.com/questions/1410/what-is-meant-by-the-term-computational-basis)态下测量。
- en: Notice, the output is returning different messages each time we execute the
    quantum circuit. This is due to the single qubit that we placed in superposition
    (on the most significant qubit).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，每次执行量子电路时输出的消息都不同。这是由于我们放置在叠加态中的单个量子比特（在最重要的量子比特上）。
- en: We no longer have a completely deterministic program where we can be certain
    of the output. Instead, our program runs in the quantum universe!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再拥有一个完全确定的程序，可以对输出结果有确定性。相反，我们的程序运行在量子宇宙中！
- en: Quantum computing power and complexity
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 量子计算能力和复杂性
- en: It’s just fascinating how we can virtually represent simultaneous values in
    a quantum computing program.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在量子计算程序中几乎同时表示多个值，这真是令人着迷。
- en: However, it’s not too difficult to see how complex this can become when we start
    considering 3, 4, 10, 20, or 100 qubits in a program.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们开始考虑程序中的3、4、10、20或100个量子比特时，很容易看到这变得多么复杂。
- en: If only one qubit is placed into superposition (to have a 50/50 random chance
    of resulting in a value of 0 or 1), it may not be too difficult to grasp. After
    all, all of the other qubits will be a fixed value as initially assigned. Only
    the qubit(s) in superposition will hold the possibility for multiple values. However,
    when one or more qubits are in superposition, it becomes increasingly complex
    — but also increasingly more powerful!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只有一个量子比特被置于叠加态（即有50/50的随机概率结果为0或1），理解起来可能不会太困难。毕竟，其他量子比特将保持最初分配的固定值。只有处于叠加态的量子比特会拥有多个可能值。然而，当一个或多个量子比特处于叠加态时，情况变得越来越复杂——但同时也变得越来越强大！
- en: In fact, superposition is at the core of gaining quadratic and exponential performance
    increases in quantum programs, compared to their classical counterparts. Since
    they can represent multiple states during a single CPU cycle, they can process
    far more permutations of bits than a classical computer.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，与经典计算机相比，叠加态是量子程序在性能上获得二次方和指数级提升的核心。由于量子比特可以在单个CPU周期内表示多个状态，因此它们能够处理比经典计算机更多的比特排列。
- en: Now, I hope it is becoming apparent how programming a quantum computer feels
    like programming in 3D. It’s, simply put, a completely different level from classical
    programming!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我希望你能逐渐明白，编程量子计算机就像在编程3D一样。简单来说，这与经典编程是完全不同的层次！
- en: Does this sound like fun?
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这听起来有趣吗？
- en: I hope that this initial discovery into quantum computing has piqued your interest
    as much as it did mine.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这次对量子计算的初步探索能像激发了我的兴趣一样，激发你的兴趣。
- en: I certainly believe it’s this higher dimensional thinking that makes quantum
    computing so enticing, especially for programmers looking to develop their skills
    on an entirely new level.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我确实相信，正是这种高维思维使量子计算如此引人入胜，特别是对于那些希望在全新层次上提升技能的程序员来说。
- en: You can download the complete code example for the greeting program [here](https://gist.github.com/primaryobjects/07db824f3b1b06cf4dbace6f2725052f).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[这里](https://gist.github.com/primaryobjects/07db824f3b1b06cf4dbace6f2725052f)下载问候程序的完整代码示例。
- en: About the Author
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于作者
- en: If you’ve enjoyed this article, please consider following me on [Medium](https://medium.com/@KoryBecker),
    [Twitter](https://twitter.com/PrimaryObjects), and my [web site](https://primaryobjects.com/)
    to be notified of my future posts and research work.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这篇文章，请考虑在[Medium](https://medium.com/@KoryBecker)、[Twitter](https://twitter.com/PrimaryObjects)以及我的[网站](https://primaryobjects.com/)上关注我，以便获取我未来的帖子和研究成果的通知。
