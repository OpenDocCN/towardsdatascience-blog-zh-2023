["```py\n# Import library\nfrom clusteval import clusteval\n\n# Initialize\ncl = clusteval(cluster='dbscan', evaluate='silhouette', max_clust=10)\n# Import example dataset\nX, y = cl.import_example(data='blobs', params={'random_state':1})\n\n# find optimal number of clusters\nresults = cl.fit(X)\n\n# Make plot\ncl.plot()\n# Show scatterplot with silhouette scores\ncl.scatter()\n\n# [clusteval] >INFO> Fit with method=[dbscan], metric=[euclidean], linkage=[ward]\n# [clusteval] >INFO> Gridsearch across epsilon..\n# [clusteval] >INFO> Evaluate using silhouette..\n# [clusteval] >INFO: 100%|██████████| 245/245 [00:07<00:00, 33.88it/s]\n# [clusteval] >INFO> Compute dendrogram threshold.\n# [clusteval] >INFO> Optimal number clusters detected: [4].\n# [clusteval] >INFO> Fin.\n# [clusteval] >INFO> Estimated number of n_clusters: 4, average silhouette_score=0.812 \n```", "```py\n# Import\nfrom clusteval import clusteval\n\n# Initialize\ncl = clusteval(cluster='agglomerative', evaluate='dbindex', max_clust=10)\n# Import example dataset\nX, y = cl.import_example(data='blobs', params={'random_state':1})\n\n# find optimal number of clusters\nresults = cl.fit(X)\n\n# Make plot\ncl.plot(figsize=(12, 7))\n# Show scatterplot with silhouette scores\ncl.scatter()\n\n# [clusteval] >INFO> Fit with method=[agglomerative], metric=[euclidean], linkage=[ward]\n# [clusteval] >INFO> Evaluate using dbindex.\n# [clusteval] >INFO: 100%|██████████| 18/18 [00:00<00:00, 120.32it/s]\n# [clusteval] >INFO> Compute dendrogram threshold.\n# [clusteval] >INFO> Optimal number clusters detected: [4].\n# [clusteval] >INFO> Fin.\n```", "```py\n# Import library\nfrom clusteval import clusteval\n\n# Initialize\ncl = clusteval(cluster='agglomerative', evaluate='derivative', max_clust=20)\n# Import example dataset\nX, y = cl.import_example(data='blobs', params={'random_state':1})\n\n# find optimal number of clusters\nresults = cl.fit(X)\n\n# Make plot\ncl.plot(figsize=(12, 8))\n# Show scatterplot with silhouette scores\ncl.scatter()\n```"]