- en: 'Why SOLID Design Matters: Avoid Code Smells and Write Maintainable Code'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/why-solid-design-matters-avoid-code-smells-and-write-maintainable-code-553b3c6c0ca8](https://towardsdatascience.com/why-solid-design-matters-avoid-code-smells-and-write-maintainable-code-553b3c6c0ca8)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use the SOLID principles to design readable, scalable, and maintainable software
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.knulst.de/?source=post_page-----553b3c6c0ca8--------------------------------)[![Paul
    Knulst](../Images/9fcb767d927a1fe53ee739c584fdf92c.png)](https://medium.knulst.de/?source=post_page-----553b3c6c0ca8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----553b3c6c0ca8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----553b3c6c0ca8--------------------------------)
    [Paul Knulst](https://medium.knulst.de/?source=post_page-----553b3c6c0ca8--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----553b3c6c0ca8--------------------------------)
    ·11 min read·Jan 6, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b4c330587de200d1eb6c4001a63fe8ba.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: Photo by [Markus Spiske](https://unsplash.com/@markusspiske?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    / [Unsplash](https://unsplash.com/s/photos/code-javascript?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SOLID is an acronym for five principles of object-oriented design, that were
    first outlined by Robert C. Martin in the early 2000s. These principles can help
    developers to create more maintainable and scalable software systems. The five
    principles are:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/90521a414adf6b65d9386cf3bcc7250f.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: All five SOLID principles — visualized by author
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I want to showcase the power of the SOLID principles for building
    readable and maintainable software applications. Furthermore, I will provide practical
    examples of how to apply the SOLID principles with TypeScript.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: These examples will demonstrate how the SOLID principles can be used to design
    and build better, more scalable applications.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Whether you are a developer, a data scientist, or a user of decentralized applications,
    these examples will provide a valuable starting point for applying the SOLID principles
    to your code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Single Responsibility Principle
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each module should have one and only one reason to change.
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- Robert C. Martin'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Single Responsibility Principle is a principle of object-oriented design
    that states that a class or module should have only one responsibility or reason
    to change. This means a class should have a narrowly-defined scope and should
    not take on too many responsibilities.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: In TypeScript, the Single Responsibility Principle can be applied by dividing
    a large and complex class into smaller and more focused ones, each with its well-defined
    responsibility. For example, consider a class responsible for managing user account
    information, including their profile details, preferences, and payment information.
    This class may have many methods for handling different aspects of the user account,
    such as updating their profile, managing their preferences, and processing payments.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: To apply the Single Responsibility Principle, we can break this large class
    into several smaller ones, each with a specific responsibility. For example, we
    might have a `UserProfile` class responsible for managing the user profile information,
    a `UserPreferences` class responsible for managing their preferences, and a `UserPayments`
    class responsible for processing their payments. Each of these classes would have
    a narrowly-defined scope, and they would be easier to maintain and extend than
    the original, monolithic class.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of how these classes might be implemented in TypeScript:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Within this example, every class has a narrowly-defined responsibility and a
    well-defined interface. The `UserProfile` class is responsible for managing the
    user profile information, the `UserPreferences` class is responsible for managing
    their preferences, and the `UserPayments` class is responsible for processing
    their payments.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: This makes it easier to understand the purpose and behavior of each class, and
    it also makes it easier to extend and maintain the code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Open/Closed Principle
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modules should be open for extension but closed for modification.
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- Robert C. Martin'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Open/Closed Principle is a principle of object-oriented design that says
    that a class should be open for extension but closed for modification. This means
    that the class should be designed in such a way that new behavior can be added
    with inheritance or composition, without changing the existing code.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: In TypeScript, the Open/Closed Principle can be applied using abstract classes,
    interfaces, and polymorphism to create a flexible and extensible design. For example,
    consider a simple `Shape` class representing different geometric shapes, such
    as circles, squares, and triangles. This class might have a `draw()` method that
    can be used to render any shape on the screen.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: To apply the Open/Closed Principle, we can define an abstract `Shape` class
    that contains shared behavior of all shapes, such as a `draw()` method. We can
    then define subclasses for each specific type of shape, such as `Circle`, `Square`,
    and `Triangle`, which inherit from the `Shape` class and override the `draw()`
    method to provide their specific behavior.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of how this might be implemented in TypeScript:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, the `Shape` class is open for extension because new subclasses
    can be defined to add new behavior. We could define a `Rectangle` class that extends
    the `Shape` class and overrides the `draw()` method to provide its specific behavior.
    However, the `Shape` class is closed to modifications, because we cannot change
    the existing code in the `Shape` class without breaking the subclasses that extend
    it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`Shape` 类是开放扩展的，因为可以定义新的子类来添加新行为。我们可以定义一个 `Rectangle` 类，扩展 `Shape` 类并重写
    `draw()` 方法来提供其特定行为。然而，`Shape` 类是封闭修改的，因为我们不能在不破坏扩展它的子类的情况下更改 `Shape` 类中的现有代码。
- en: This makes the code more flexible and maintainable because we can add new behavior
    without changing the existing code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得代码更加灵活和可维护，因为我们可以在不改变现有代码的情况下添加新行为。
- en: Liskov Substitution Principle
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 里氏替换原则
- en: Use interfaces/protocols to separate interchangeable parts.
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用接口/协议来分离可替换的部分。
- en: '- Robert C. Martin'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- 罗伯特·C·马丁'
- en: The Liskov Substitution Principle is a principle of object-oriented design that
    states that objects in a program should be replaceable with instances of their
    subtypes without altering the correctness of the program. This means that subclasses
    should be able to extend or override the behavior of their parent classes without
    breaking the parent class’s contract.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 里氏替换原则是面向对象设计的一个原则，指出程序中的对象应该可以用其子类型的实例来替换，而不会改变程序的正确性。这意味着子类应该能够扩展或重写其父类的行为，而不破坏父类的合同。
- en: In other words, the Liskov Substitution Principle is a way to ensure that subtypes
    are substitutable for their base types, meaning that any program written to use
    a base type should be able to run without modification if a subtype is used instead.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，里氏替换原则是一种确保子类型可以替代其基类型的方式，这意味着任何编写为使用基类型的程序，在使用子类型时应该能够正常运行，而无需修改。
- en: In TypeScript, the Liskov Substitution Principle can be applied by defining
    a class and ensuring that subclasses extend it. For example, consider a simple
    `Vehicle` class that represents different types of vehicles, such as cars, motorcycles,
    or boats. This `Vehicle` class might include the `startEngine()` method, as well
    as other methods or properties that are common to all vehicles. We can then define
    subclasses for each specific type of vehicle, such as `Car` or `Motocycle`, which
    extends the `Vehicle` class and provide their behavior for the `startEngine()`
    method.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TypeScript 中，通过定义一个类并确保子类扩展它，可以应用里氏替换原则。例如，考虑一个简单的 `Vehicle` 类，它表示不同类型的车辆，如汽车、摩托车或船只。这个
    `Vehicle` 类可能包括 `startEngine()` 方法，以及所有车辆共有的其他方法或属性。然后，我们可以为每种具体类型的车辆定义子类，如 `Car`
    或 `Motorcycle`，这些子类扩展了 `Vehicle` 类，并提供 `startEngine()` 方法的具体行为。
- en: 'Here is an example of how this might be implemented in TypeScript:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何在 TypeScript 中实现这一点的示例：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, the `Car` and `Motorcycle` classes are subtypes of the `Vehicle`
    class. The `useVehicle()` function expects an object of type `Vehicle`, but because
    of the Liskov Substitution Principle, we can pass an object of type `Car` or `Motorcycle`
    to this function, and it will work correctly.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`Car` 和 `Motorcycle` 类是 `Vehicle` 类的子类型。`useVehicle()` 函数期望一个 `Vehicle`
    类型的对象，但由于里氏替换原则，我们可以将 `Car` 或 `Motorcycle` 类型的对象传递给这个函数，它将正确工作。
- en: This is because `Car` and `Motorcycle` are substitutable for `Vehicle` – that
    is, objects of type `Car` and `Motorcycle` can be used wherever objects of type
    `Vehicle` are expected, without altering the desired properties of the program.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为 `Car` 和 `Motorcycle` 可以替代 `Vehicle` —— 即 `Car` 和 `Motorcycle` 类型的对象可以在期望
    `Vehicle` 类型对象的地方使用，而不会改变程序的期望属性。
- en: Interface Segregation Principle
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接口分离原则
- en: Clients should not be forced to depend upon interfaces that they do not use.”
    — Robert C. Martin
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 客户不应该被迫依赖他们不使用的接口。” — 罗伯特·C·马丁
- en: The Interface Segregation Principle is a principle of object-oriented design
    that states that clients of an object should not be forced to depend on methods
    they do not use. This means that the interfaces of a class should be designed
    in such a way that each interface serves a specific purpose and is used by a specific
    client. This principle helps to reduce the amount of unused code in a program,
    making it more efficient and easier to maintain.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接口隔离原则是面向对象设计的一项原则，它说明对象的客户端不应被迫依赖于他们不使用的方法。这意味着一个类的接口应该设计成每个接口都服务于特定的目的并被特定的客户端使用。这个原则有助于减少程序中的未使用代码，使程序更加高效和易于维护。
- en: The motivation for this principle is to avoid the problem of monolithic interfaces,
    which define many methods that may not be relevant for all clients. This can lead
    to client code that is bloated and hard to maintain because it is forced to implement
    or mock unused methods to satisfy the interface contract.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个原则的动机是避免单一接口的问题，这种接口定义了许多可能对所有客户端不相关的方法。这可能导致客户端代码膨胀且难以维护，因为它被迫实现或模拟未使用的方法以满足接口契约。
- en: To apply the Interface Segregation Principle, it is best to define multiple
    small and focused interfaces, rather than a single, monolithic interface. This
    allows each client to implement only necessary methods, without being forced to
    implement unused methods. This can lead to a more modular and maintainable design
    because the interfaces are more closely aligned with the needs of their clients.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应用接口隔离原则，最好定义多个小而集中的接口，而不是一个单一的庞大接口。这允许每个客户端只实现必要的方法，而不被迫实现未使用的方法。这可以导致一个更加模块化和易于维护的设计，因为接口与其客户端的需求更紧密地对齐。
- en: In TypeScript, the Interface Segregation Principle can be applied by creating
    small, specific interfaces for each type of object in a program.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TypeScript 中，接口隔离原则可以通过为程序中的每种对象类型创建小而具体的接口来实现。
- en: 'For example, consider a program that has two types of objects: `Cat` and `Fish`.
    A fish object might have a `eat()` method, while a cat object might have `eat()`
    and `move()` methods. To follow the Interface Segregation Principle, we could
    create two separate interfaces for `Cat` and `Fish`, each with its unique methods:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个有两种类型对象的程序：`Cat` 和 `Fish`。一个鱼对象可能有一个 `eat()` 方法，而猫对象可能有 `eat()` 和 `move()`
    方法。为了遵循接口隔离原则，我们可以为 `Cat` 和 `Fish` 创建两个独立的接口，每个接口都有其独特的方法：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, the `Eating` and `Moving` interfaces are defined. The `Eating`
    interface has a single method, `eat()`, while the `Moving` interface has a single
    method, `move()`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，定义了 `Eating` 和 `Moving` 接口。`Eating` 接口有一个方法 `eat()`，而 `Moving` 接口有一个方法
    `move()`。
- en: The `Cat` class is defined as a subtype of `Eating` and `Moving` – that is,
    it implements both interfaces. This means that the `Cat` class is required to
    implement the `eat()` and `move()` methods with a specific implementation.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cat` 类被定义为 `Eating` 和 `Moving` 的子类型——也就是说，它实现了这两个接口。这意味着 `Cat` 类需要具体实现 `eat()`
    和 `move()` 方法。'
- en: The `Fish` class is defined as a subtype of the `Eating` interface. This means
    that the `Fish` class is only required to implement the `eat()` method. The `Fish`
    class provides an implementation for this method, but it does not need to implement
    the `move()` method because fish do not move the same way as other animals.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`Fish` 类被定义为 `Eating` 接口的一个子类型。这意味着 `Fish` 类只需要实现 `eat()` 方法。`Fish` 类提供了该方法的实现，但不需要实现
    `move()` 方法，因为鱼的移动方式与其他动物不同。'
- en: The Interface Segregation Principle helps to improve the design of a program
    by breaking down large, general interfaces into smaller, more specific ones.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接口隔离原则通过将大型、通用的接口拆分为更小、更具体的接口，帮助改善程序的设计。
- en: This can make a program more efficient and easier to maintain.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以使程序更加高效并且更容易维护。
- en: Dependency Inversion Principle
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖倒置原则
- en: Entities must depend on abstractions, not on concretions. It states that the
    high-level module must not depend on the low-level module, but they should depend
    on abstractions.
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 实体必须依赖于抽象，而不是具体实现。这说明高层模块不应依赖于低层模块，而应依赖于抽象。
- en: '- Robert C. Martin'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- 罗伯特·C·马丁'
- en: The Dependency Inversion Principle is a software design principle that states
    that high-level modules should not depend on low-level modules, but rather both
    should depend on abstractions. This principle helps to improve the flexibility
    and maintainability of a program, by allowing different parts of the program to
    evolve independently.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖倒置原则是一个软件设计原则，它指出高层模块不应该依赖于低层模块，而是两者都应该依赖于抽象。这个原则有助于提高程序的灵活性和可维护性，使程序的不同部分能够独立演进。
- en: 'In TypeScript, the Dependency Inversion Principle can be applied by defining
    abstractions (interfaces or abstract classes) that define the contract for different
    parts of the program. For example, consider a program that has a `Database` class
    and a `UserService` class. The `UserService` class might depend on the `Database`
    class to store and retrieve user data. To follow the Dependency Inversion Principle,
    we could define an abstract `DataStore` interface that the `Database` class implements,
    and have the `UserService` class depends on the `DataStore` interface instead
    of the `Database` class directly. This way, the `UserService` class is not tied
    to a specific implementation of a data store, and can be used with any class that
    implements the `DataStore` interface:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TypeScript 中，可以通过定义抽象（接口或抽象类）来应用依赖倒置原则，这些抽象定义了程序不同部分的合同。例如，考虑一个有 `Database`
    类和 `UserService` 类的程序。`UserService` 类可能依赖于 `Database` 类来存储和检索用户数据。为了遵循依赖倒置原则，我们可以定义一个抽象
    `DataStore` 接口，`Database` 类实现这个接口，并让 `UserService` 类依赖于 `DataStore` 接口，而不是直接依赖
    `Database` 类。这样，`UserService` 类就不会绑定到具体的数据存储实现上，可以与任何实现了 `DataStore` 接口的类一起使用：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this example, the `UserService` class depends on the `DataStore` interface,
    and can work with any class that implements that interface. This allows us to
    change the implementation of the `Database` class without affecting the `UserService`
    class, or to use a different class altogether as long as it implements the `DataStore`
    interface.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`UserService` 类依赖于 `DataStore` 接口，并且可以与任何实现该接口的类一起使用。这使得我们可以在不影响 `UserService`
    类的情况下更改 `Database` 类的实现，或使用任何实现了 `DataStore` 接口的不同类。
- en: If applying the Dependency Inversion Principle the design of a program will
    be improved by decoupling high-level modules from low-level ones and making both
    depend on abstractions.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用依赖倒置原则，程序的设计将通过将高层模块与低层模块解耦，并使两者都依赖于抽象来得到改善。
- en: This can make a program more flexible and easier to maintain.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以使程序更具灵活性，更容易维护。
- en: Beware! Avoid Common Misconceptions
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小心！避免常见误解
- en: Unfortunately, there are several misconceptions about the SOLID principles and
    they are easily used wrong.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，关于 SOLID 原则存在一些误解，并且这些原则很容易被错误使用。
- en: One common misconception is that they should be followed blindly without considering
    the specific needs and constraints of the project at hand. But, in reality, these
    principles are guidelines that can help developers to create more maintainable
    and scalable software. SOLID principles should always be applied with care and
    judgment.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的误解是，这些原则应该盲目遵循，而不考虑当前项目的具体需求和限制。但实际上，这些原则是可以帮助开发者创建更具可维护性和可扩展性的指导方针。SOLID原则应始终谨慎和有判断地应用。
- en: For example, the Single Responsibility Principle can sometimes be violated to
    improve the performance or simplicity of a class.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，为了提高类的性能或简洁性，单一责任原则有时会被违反。
- en: Another common misconception is that the SOLID principles apply only to object-oriented
    languages, such as Kotlin, TypeScript, Java, or C++. This is wrong because these
    principles are language-agnostic and can be applied to any software system, regardless
    of the programming paradigm or language used.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的误解是，SOLID 原则只适用于面向对象的语言，如 Kotlin、TypeScript、Java 或 C++。这是错误的，因为这些原则是与语言无关的，可以应用于任何软件系统，无论使用的是何种编程范式或语言。
- en: Keep in mind that the SOLID principles are no silver bullet that can solve every
    problem in software design. These principles are just one tool among many that
    can help developers to create better software.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，SOLID 原则并不是一个能够解决软件设计中每一个问题的灵丹妙药。这些原则只是众多工具中的一个，可以帮助开发者创建更好的软件。
- en: '**They should be used with other design principles and practices, such as refactoring,
    testing, and continuous integration.**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**它们应该与其他设计原则和实践一起使用，例如重构、测试和持续集成。**'
- en: Closing Notes
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结束语
- en: In conclusion, the SOLID principles are a set of guidelines that can help developers
    create more maintainable, extendable, and understandable software by focusing
    on creating classes and modules that are single-purpose, well-encapsulated, and
    easy to modify.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，SOLID原则是一套指导方针，可以帮助开发人员通过专注于创建单一目的、封装良好且易于修改的类和模块，来创建更具可维护性、可扩展性和易于理解的软件。
- en: By adhering to the SOLID principles, developers can save time and effort in
    the long run by writing code that is easier to maintain and adapt over time.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵守SOLID原则，开发人员可以通过编写更易于维护和随时间适应的代码，从长远来看节省时间和精力。
- en: It is paramount to understand that these principles should not be strictly followed
    in all situations. They should be treated more like guidelines that can be applied
    in different ways depending on the specific use case in the project.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 需要明白的是，这些原则不应在所有情况下严格遵循。它们应该被视为可以根据项目的具体用例以不同方式应用的指导方针。
- en: As a developer, it’s important to approach the SOLID principles with a flexible
    and open mind. By doing this, you can make the most out of these guidelines and
    use them to create better software.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，以灵活和开放的心态对待SOLID原则是很重要的。这样，你可以充分利用这些指导方针，并用它们来创建更好的软件。
- en: Furthermore, SOLID principles are no new or revolutionary idea in software design.
    These principles are based on decades of experience and research in the field
    of object-oriented design, and they build on the work of many other software developers
    and researchers who came before.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，SOLID原则在软件设计中并不是新颖或革命性的想法。这些原则基于几十年的面向对象设计经验和研究，并且建立在许多前辈软件开发人员和研究者的工作基础上。
- en: If you want to dive deeper into the topic of how to develop readable, scalable,
    and maintainable code, check out this video (and the following 5). It’s the first
    lesson of “Coding Better World Together” by Robert C. Martin who promoted the
    SOLID principles.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想深入了解如何开发可读、可扩展和可维护的代码，可以查看这个视频（以及接下来的5个视频）。这是Robert C. Martin的《Coding Better
    World Together》的第一课，他推广了SOLID原则。
- en: The first lesson of “Coding Better World Together” by Robert C. Martin
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Robert C. Martin的《Coding Better World Together》的第一课
- en: Finally, what do you think about the SOLID principles? Also, do you have any
    questions regarding any of the five principles? I would love to hear your thoughts
    and answer your questions. Please share everything in the comments.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你对SOLID原则有什么看法？另外，你是否对这五个原则中的任何一个有疑问？我很愿意听听你的想法并回答你的问题。请在评论中分享你的想法。
- en: Feel free to connect with me on [my blog](https://www.paulsblog.dev), [LinkedIn](https://www.linkedin.com/in/paulknulst/),
    [Twitter](https://twitter.com/paulknulst), and [GitHub](https://github.com/paulknulst).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎在[我的博客](https://www.paulsblog.dev)、[LinkedIn](https://www.linkedin.com/in/paulknulst/)、[Twitter](https://twitter.com/paulknulst)和[GitHub](https://github.com/paulknulst)上与我联系。
