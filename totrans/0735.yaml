- en: 'Devil is in the detail: Become a Power BI champion by thinking out of the box'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/devil-is-in-the-detail-become-a-power-bi-champion-by-thinking-out-of-the-box-54c173a07733](https://towardsdatascience.com/devil-is-in-the-detail-become-a-power-bi-champion-by-thinking-out-of-the-box-54c173a07733)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Power Bi is full of “unsung heroes”! One of them, Analytics panel, combined
    with changing the visual type, helped me significantly improve the performance
    of the Power BI report
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://datamozart.medium.com/?source=post_page-----54c173a07733--------------------------------)[![Nikola
    Ilic](../Images/9fab894b9696c0dfd80c5173188b720b.png)](https://datamozart.medium.com/?source=post_page-----54c173a07733--------------------------------)[](https://towardsdatascience.com/?source=post_page-----54c173a07733--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----54c173a07733--------------------------------)
    [Nikola Ilic](https://datamozart.medium.com/?source=post_page-----54c173a07733--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----54c173a07733--------------------------------)
    ·5 min read·Jul 7, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f684b4174148291c4fbc04b52f8c0e21.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Photo by Alice Dietrich on Unsplash](https://unsplash.com/de/fotos/FwF_fKj5tBo)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A few weeks ago, I was working on [performance tuning of the Power BI report](https://data-mozart.com/mastering-dp-500-implement-performance-improvements-in-power-query-and-data-sources/)
    for one of my clients. The report page was rendering super slow (15+ seconds).
    To provide you with a little background: the report uses a live connection to
    a tabular model hosted in SSAS Tabular 2016.'
  prefs: []
  type: TYPE_NORMAL
- en: What if I tell you that I managed to speed up the performance of the report
    page more than twice, without changing a single line of DAX code behind the calculations?!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keep reading and you’ll see why very often the devil is in the detail and how
    thinking outside of the box may help you become a true Power BI champ:)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1e6d958a420a66586a912bcac7d23c93.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Let me quickly explain the illustration above. There is a Line and clustered
    column chart visual, where the four lines represent the user choice from the slicers
    on the left (Reporting threshold and three layers), while the columns are the
    total sales amount. Data is broken down per year and product. Each of the lines
    is calculated using DAX (by the way, there is no [SELECTEDVALUE function](https://data-mozart.com/display-selected-slicers-in-power-bi/)
    available in SSAS 2016).
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ve turned on Performance Analyzer, grabbed the DAX query and executed it
    in the DAX Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/70ab7ff401b4127da2b08fbab7ebbb25.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: As you may see, the query takes 13.5 seconds to execute (with cache cleared
    before run), whereas most of the time was spent within the [Formula Engine](https://data-mozart.com/vertipaq-brain-muscles-behind-power-bi/)
    (76%). This is important, because we’ll compare this result with an improved version
    of the report page.
  prefs: []
  type: TYPE_NORMAL
- en: So, what would an experienced Power BI developer do to optimize this scenario?
    Rewrite DAX? WRONG!
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see what can be done without changing the DAX logic!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In case you didn’t know, Power BI offers you an undervalued feature, or let’s
    think of it as an “unsung hero”, which is called the Analytics panel.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dc45c4bc2ba263747e3e84e43bd0674b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Most of us obviously spend the majority of our Power BI development time in
    the other two panels — data and format. So, you would be surprised how many Power
    BI developers are not even aware of this third panel, or even when aware, very
    rarely using it.
  prefs: []
  type: TYPE_NORMAL
- en: Without going deep into details, this panel lets you add additional analytic
    ingredients to your visuals — such as Min, Max, Average, Median lines, error bars,
    etc. Depending on the visual type, not all options are available! And, this was
    important in my use case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once I opened the Analytics panel, only Error bars were available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8171688838a9b45cfccf5504e8b01a2c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Essentially, the idea here is, since these four lines are not changing based
    on the numbers in the visual itself (they have constant value based on the slicer
    selection), to leverage the Constant line feature from the Analytics panel. Since
    no Constant line is available with Line and clustered column chart visual, let’s
    duplicate our visual and change its type to a regular Clustered column chart.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/539e16094ec6dbc6608e832b31eff3a8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'As you see, the “numbers” are here, but we are missing our lines. Let’s switch
    to the Analytics panel and create 4 constant lines, each based on the DAX measure
    produced by the slicer selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9b9bb7f5120dec3d92f2a9ec83c6a875.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to add a constant line. Next, expand the Line property and
    as a value, choose the “fX” button, which enables you to set the value of the
    constant line based on expression (in our case, that’s the expression generated
    by the DAX measure). Repeat the process for all four lines.
  prefs: []
  type: TYPE_NORMAL
- en: '***I’m reminding you once again, please be aware that I haven’t touched the
    DAX code at all!***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once I turned off the Y axis, this is how my “twin” visual looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a7c290be769629e7369a7eb3d6be1091.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Pretty much the same, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'Ok, let’s now check the performance of this visual:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bc5b43fd15f309e59815037967229cc0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: It’s more than 5 seconds faster than the original one! If you carefully compare
    the previous DAX Studio screenshot, you will notice that the number of [Storage
    Engine queries](https://data-mozart.com/inside-vertipaq-compress-for-success/)
    is exactly the same as in the previous case (and SE time is practically the same),
    which means that the Storage Engine has exactly the same amount of work to do
    to retrieve the data.
  prefs: []
  type: TYPE_NORMAL
- en: The key difference is between the Formula Engine times — unlike in the original
    visual, where 75% of the total query time was spent in FE, this time it’s reduced
    to below 60%!
  prefs: []
  type: TYPE_NORMAL
- en: I was curious to see why is that happening and what is the main difference between
    the two query plans generated by the Formula Engine.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d3e7af005949bd5a51f0438276cb0487.png)'
  prefs: []
  type: TYPE_IMG
- en: Slower query — part of the DAX code
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/de6c1f4141f7af3f572cd664221291c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Faster query — part of the DAX code
  prefs: []
  type: TYPE_NORMAL
- en: 'The “only” difference between the two query plans — in the slower version,
    two virtual tables were created: one to calculate the value of the “column” in
    the visual (_ScopedCoreI0), and another to calculate the value for the lines in
    the same visual (_ScopedCoreDM0). Finally, these two tables were joined using
    the NATURALLEFTOUTERJOIN function.'
  prefs: []
  type: TYPE_NORMAL
- en: In the faster version, there is no second table that calculates the lines’ value.
    Additionally, measures that calculate the lines’ value were wrapped with the [IGNORE](https://dax.guide/ignore/)
    function, which tags the measure(s) within the SUMMARIZECOLUMNS expression to
    be omitted from the evaluation of the non-blank rows.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have witnessed, changing the visual type, combined with the usage of
    the “unsung hero”, Analytics panel, ensured a significant performance improvement
    in this scenario. It’s not by coincidence that people say that “the devil is in
    the detail” — therefore, more often than not, thinking outside of the box will
    lead to some creative solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading!
  prefs: []
  type: TYPE_NORMAL
- en: '[Become a member and support thousands of authors on Medium!](https://datamozart.medium.com/membership)'
  prefs: []
  type: TYPE_NORMAL
