- en: 5 Functions is All You Need to Manage Your Data with dplyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/5-functions-is-all-you-need-to-manage-your-data-with-dplyr-1630825c47b0](https://towardsdatascience.com/5-functions-is-all-you-need-to-manage-your-data-with-dplyr-1630825c47b0)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to efficiently make your data ready-to-use
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://sonery.medium.com/?source=post_page-----1630825c47b0--------------------------------)[![Soner
    Yıldırım](../Images/c589572e9d1ee176cd4f5a0008173f1b.png)](https://sonery.medium.com/?source=post_page-----1630825c47b0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1630825c47b0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1630825c47b0--------------------------------)
    [Soner Yıldırım](https://sonery.medium.com/?source=post_page-----1630825c47b0--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1630825c47b0--------------------------------)
    ·8 min read·Mar 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/37b7af736531d661d732e23977fce5dd.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Kelly Sikkema](https://unsplash.com/@kellysikkema?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/-1_RZL8BGBM?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Those who have worked on real-life tasks with real-life data know that the bigger
    slice of pie belongs to data wrangling.
  prefs: []
  type: TYPE_NORMAL
- en: What I mean by data wrangling covers operations done to make the data ready
    for other stakeholders or downstream processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whether you are a data analyst, data scientist, or data engineer, you will
    need to perform one or more of the following operations as part of your daily
    routine:'
  prefs: []
  type: TYPE_NORMAL
- en: Filtering (e.g. get me the sales data in Texas)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sorting (e.g. I want to see the top 10 best seller in last week)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating (e.g. change the category of these products)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summarizing (e.g. I want to see the average revenue per category)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data analysis and manipulation tools exist in the data science ecosystem to
    provide efficient ways of performing these operations to be able to keep their
    existence in the ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, we will learn how to handle these tasks using one of the predominant
    tools in data science: dplyr.'
  prefs: []
  type: TYPE_NORMAL
- en: It is a package for R programming language and described as “a grammar of data
    manipulation”.
  prefs: []
  type: TYPE_NORMAL
- en: We can either install dplyr by itself or use [tidyverse](https://www.tidyverse.org/),
    which is a collection of R packages for data science. I prefer the latter because
    it allows me to use some functions from other packages in tidyverse (e.g. read_csv
    from readr).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with importing the libraries and reading a dataset. We will be using
    a sample dataset that I prepared with mock data. You can download it from my [datasets](https://github.com/SonerYldrm/datasets)
    repo.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The resulting object is a tibble, which is just like a DataFrame or table.
  prefs: []
  type: TYPE_NORMAL
- en: 'All data manipulation challenges come down to using one or more of the following
    5 functions:'
  prefs: []
  type: TYPE_NORMAL
- en: select
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mutate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: filter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arrange
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: summarise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**1\. Select**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The select function can be used for selecting columns. It allows us to do so
    by keeping or dropping columns using their names and types.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go over several examples to see how select works. The following example
    shows how to select a particular column or columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also do the selection by excluding (dropping) one or more columns using
    the “!” as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If we are selecting multiple consecutive columns, it’s easier to use “:” to
    define the range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use column indices so the following does the same operation as
    the one above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can also select columns based on their data types. For instance, the following
    selects the numerical columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'By using the same predicate function (i.e. where), we can select non-numeric
    columns as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Mutate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The mutate function, as its name suggests, modifies the tibble by updating the
    existing columns or creating new ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, we can increase the price values by 10 percent as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also create new columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Multiple updates can be done in a single operation. Before doing an example
    to demonstrate this case, let’s mention two very useful features:'
  prefs: []
  type: TYPE_NORMAL
- en: We can combine different types of operations using the “%>%” operator to create
    pipes and solve complex tasks involving multiple steps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The new columns are immediately available so that we can use them in the same
    mutate function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example to show the two features mentioned above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the example above, we first select the price and cost columns from sales
    and create the price_updated column from the price column and then use this new
    column to create the profit_updated column.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Filter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The filter function lets us filter observations (i.e. rows) based on a condition
    or a set of conditions.
  prefs: []
  type: TYPE_NORMAL
- en: The following example filters rows with a price of more than 1000.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s use a more complex filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If we have a condition with multiple values, we can use the “%in%” operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Arrange
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The arrange function sorts the rows based on the values in a column or columns.
    It is similar to SQL order by and Pandas sort_values function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: By default, the sorting is done in ascending order. We can change it to descending
    by adding a “-” before the column name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: To sort by multiple columns, we can write the column names separated by comma.
    The following example sorts the rows by store name and then by last_week_sales
    (descending).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 5\. Summarise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It summarizes groups down to one row. Together with the group_by function, we
    can use it for calculating aggregated values for groups. This operation is similar
    to SQL group by and Pandas groupby function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: There are several aggregate functions to extract insights from data and perform
    in-depth analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of them from the official documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Center: `[mean()](https://rdrr.io/r/base/mean.html)`, `[median()](https://rdrr.io/r/stats/median.html)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Spread: `[sd()](https://rdrr.io/r/stats/sd.html)`, `[IQR()](https://rdrr.io/r/stats/IQR.html)`,
    `[mad()](https://rdrr.io/r/stats/mad.html)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Range: `[min()](https://rdrr.io/r/base/Extremes.html)`, `[max()](https://rdrr.io/r/base/Extremes.html)`,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Position: `[first()](https://dplyr.tidyverse.org/reference/nth.html)`, `[last()](https://dplyr.tidyverse.org/reference/nth.html)`,
    `[nth()](https://dplyr.tidyverse.org/reference/nth.html)`,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Count: `[n()](https://dplyr.tidyverse.org/reference/context.html)`, `[n_distinct()](https://dplyr.tidyverse.org/reference/n_distinct.html)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Logical: `[any()](https://rdrr.io/r/base/any.html)`, `[all()](https://rdrr.io/r/base/all.html)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The functions we have covered in this article help you get almost all your data
    manipulation and analysis work done. Being able to use them together in a pipe
    provides further flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: '*You can become a* [*Medium member*](https://sonery.medium.com/membership)
    *to unlock full access to my writing, plus the rest of Medium. If you already
    are, don’t forget to* [*subscribe*](https://sonery.medium.com/subscribe) *if you’d
    like to get an email whenever I publish a new article.*'
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading. Please let me know if you have any feedback.
  prefs: []
  type: TYPE_NORMAL
