- en: Pivot tables in Pandas and Handling Multi-Index Data with Hands-On Examples
    in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/pivot-tables-in-pandas-with-hands-on-examples-in-python-9f29a48796f2](https://towardsdatascience.com/pivot-tables-in-pandas-with-hands-on-examples-in-python-9f29a48796f2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn how to pivot a Pandas DataFrame and get meaningful insights
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://suemnjeri.medium.com/?source=post_page-----9f29a48796f2--------------------------------)[![Susan
    Maina](../Images/a3ac5f206f175c711a9e7779283fc18d.png)](https://suemnjeri.medium.com/?source=post_page-----9f29a48796f2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9f29a48796f2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9f29a48796f2--------------------------------)
    [Susan Maina](https://suemnjeri.medium.com/?source=post_page-----9f29a48796f2--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9f29a48796f2--------------------------------)
    ·11 min read·Feb 9, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/58df12263c028369de91b8ed82ca9f81.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Елена from Pexels](https://www.pexels.com/photo/upside-down-multicolored-pencils-8850038/)
  prefs: []
  type: TYPE_NORMAL
- en: A pivot table is a data manipulation tool that rearranges a table and sometimes
    aggregates the values for easy analysis.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we’ll look at the Pandas pivot_table function and how to use
    the various parameters it offers. We'll explore a real-world dataset from Kaggle
    to illustrate when and how to use the pivot_table function.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of a pivot table
  prefs: []
  type: TYPE_NORMAL
- en: You can group the data by one or more columns and then summarize the values
    using various statistics such as mean, sum, and count.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has an easy-to-use syntax that intuitively allows for simple to complex data
    transformations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pivot_table syntax**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Required parameters:*'
  prefs: []
  type: TYPE_NORMAL
- en: '`data`: the data source, in the form of pandas DataFrame'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Either one of the two parameters below must be present to group the data.*'
  prefs: []
  type: TYPE_NORMAL
- en: '`index`: column(s) to group the data row-wise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`columns`: column(s) to group the data column-wise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Optional parameters:*'
  prefs: []
  type: TYPE_NORMAL
- en: '`values`: column(s) to aggregate using the `aggfunc` function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aggfunc`: Function used to aggregate the values by.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fill_value`: value to replace missing values with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dropna`: whether to remove entire rows or columns that contain only NaN values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`margins`: whether to include row and column subtotals.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`margins_name`: label names for the row and column subtotals.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`observed`: displays only observed values for categorical groupers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort`: whether to sort the resulting row indices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Returns:*'
  prefs: []
  type: TYPE_NORMAL
- en: The pivot_table function returns a DataFrame with the summarized data using
    the parameters passed to it.
  prefs: []
  type: TYPE_NORMAL
- en: '**An easy-to-use analogy** — In short, the pivot table syntax says that for
    every `‘index’`, return the `‘aggfunc’` of the `‘values’` column(s), segregated
    (further grouped) by `‘columns’`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f8c1b1921da8f77cfa41468439837e15.png)'
  prefs: []
  type: TYPE_IMG
- en: Pandas pivot_table illustration by author
  prefs: []
  type: TYPE_NORMAL
- en: In our demonstrations below, we’ll use this analogy to understand the operations.
  prefs: []
  type: TYPE_NORMAL
- en: '**The data**'
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we’ll use the Hotel Reservations [Dataset](https://www.kaggle.com/datasets/ahsan81/hotel-reservations-classification-dataset)
    from Kaggle available under the [Attribution 4.0 International (CC BY 4.0)](https://creativecommons.org/licenses/by/4.0/)
    license. After exploring and cleaning the dataset in [this](https://github.com/suemnjeri/medium-articles/blob/main/pivot_table_pandas/EDA%20and%20Cleaning%20Hotel%20reservations%20Data.ipynb)
    notebook, below is a sample of the DataFrame that we’ll use to demonstrate pivot
    tables in Pandas.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aa38bf7cf92c7348d86d17e039c6ebbc.png)'
  prefs: []
  type: TYPE_IMG
- en: Sample DataFrame by author
  prefs: []
  type: TYPE_NORMAL
- en: '**Exploring one parameter at a time**'
  prefs: []
  type: TYPE_NORMAL
- en: '**‘Index’ parameter (Default: index = None)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the column(s) for grouping the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let’s look at the code above using the analogy we mentioned earlier. For each
    `market`, we want the `mean` of *all numeric* columns (the `values` parameter
    defaults to all columns which can handle the default `aggfunc=’mean’` parameter
    and are not present in the `‘index’` parameter).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bc2d28efb30667a48116e267bb28a876.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: This results in a DataFrame grouped by the `‘market’`. The values in each cell
    are calculated as the average value of that column (e.g. number of guests, or
    room price) per market group.
  prefs: []
  type: TYPE_NORMAL
- en: '**‘Columns’ parameter (Default: columns = None)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is also for grouping the data but on the columns level.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The same analogy applies. For each `‘market’`, return the `‘mean’` of the numeric
    values. The groups are displayed column-wise, and a transposed DataFrame to the
    one in the previous section is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/278bf1bd1801048ef72ca996694b6524.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '**‘Values’ parameter (Default: values = None)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These are the values that will appear in the table cells. The aggregation function
    is applied to these values.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned earlier, we must pass the `data` and at least the `index` or `columns`
    parameters that group the data. If the `values` parameter is not explicitly specified,
    it is inferred from the data as the columns that support the `aggfunc` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The code above says that for every `‘meal_plan’` group, return the `‘mean’`
    of the `‘room_price’` values.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ebf332d440a1d94d42c8ba9741f20fc6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '**‘Aggfunc’ parameter (Default: aggfunc = ‘mean’)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the function to aggregate the values (or choose the value to return)
    per group.
  prefs: []
  type: TYPE_NORMAL
- en: The table below contains the commonly used `aggfunc` options and whether they
    apply to only numeric functions or both numeric and categorical functions.
  prefs: []
  type: TYPE_NORMAL
- en: '**Numeric columns:**'
  prefs: []
  type: TYPE_NORMAL
- en: '*‘mean’ — average of each group'
  prefs: []
  type: TYPE_NORMAL
- en: ‘sum’ — total sum per group
  prefs: []
  type: TYPE_NORMAL
- en: ‘median’ — median value per group
  prefs: []
  type: TYPE_NORMAL
- en: ‘std’ — standard deviation
  prefs: []
  type: TYPE_NORMAL
- en: ‘var’ — variance for each group
  prefs: []
  type: TYPE_NORMAL
- en: ‘mad’ — mean absolute deviation
  prefs: []
  type: TYPE_NORMAL
- en: ‘prod’ — product of values per group*
  prefs: []
  type: TYPE_NORMAL
- en: '**Both numeric and categorical columns**'
  prefs: []
  type: TYPE_NORMAL
- en: '*‘count’ — number of rows per group'
  prefs: []
  type: TYPE_NORMAL
- en: ‘min’ — minimum value per group
  prefs: []
  type: TYPE_NORMAL
- en: ‘max’ — maximum value
  prefs: []
  type: TYPE_NORMAL
- en: ‘first’ — first row value per group
  prefs: []
  type: TYPE_NORMAL
- en: ‘last’ — last row value
  prefs: []
  type: TYPE_NORMAL
- en: ‘nunique’- number of unique values per group*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the code above, for every `‘market’` group, return the number of `unique`
    `‘room_types’`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e22db644bfcfcf94dded4bf0d5134a80.png)'
  prefs: []
  type: TYPE_IMG
- en: '`**aggfunc**` **dictionary** — we can also have `{‘values’:’aggfunc’}` dictionary
    pairs where we pass different functions for different `values` columns.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, for every `‘market’` group, return the `count` of `‘room_types’`, the
    `maximum` `‘lead_time’`, and the `average ‘price’`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f52bd99043e7094629ba520e1bfc7e78.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '`**df.reset_index()**` — The results produced in the examples above are grouped
    by the `index` parameter, making it the new [index](/pandas-index-explained-b131beaf6f7b).
    You can use `df.reset_index()` to reset this column to a regular column, which
    also adds a [RangeIndex](https://pandas.pydata.org/docs/reference/api/pandas.RangeIndex.html)
    with integers from 0.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c99bf87068d35763770ddbeb3e3b287b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '**Understanding Multi-index column headers in pivot tables**'
  prefs: []
  type: TYPE_NORMAL
- en: Before looking at the other pivot_table parameters, let's touch on [multi-index
    columns](https://medium.com/towards-data-science/functions-that-generate-a-multiindex-in-pandas-and-how-to-remove-the-levels-7aa15ac7ca95)
    that result from the pivot_table, and later on, how to remove the levels.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/99d0d2c2f4db168fd6d928a628c00312.png)'
  prefs: []
  type: TYPE_IMG
- en: DataFrame Multi-index illustration by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Multi-index columns are present when the pivot table has:'
  prefs: []
  type: TYPE_NORMAL
- en: '*An ‘index’ parameter'
  prefs: []
  type: TYPE_NORMAL
- en: AND
  prefs: []
  type: TYPE_NORMAL
- en: multiple ‘columns’ parameters
  prefs: []
  type: TYPE_NORMAL
- en: AND/OR
  prefs: []
  type: TYPE_NORMAL
- en: multiple ‘values’ parameters
  prefs: []
  type: TYPE_NORMAL
- en: AND/OR
  prefs: []
  type: TYPE_NORMAL
- en: multiple ‘aggfunc’ parameters*
  prefs: []
  type: TYPE_NORMAL
- en: '**~** `**index**` **and multiple** `**columns**`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the code above, we group the data by `‘market’` and then return the `average`
    `‘room price’` further grouped by `status` and `year`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/92bdf388d14d01c37540f4bfefa16448.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Notice that for every column in the `‘columns’` list, a column level (hierarchy)
    is added to the table in the order of outermost(0) towards innermost(1).
  prefs: []
  type: TYPE_NORMAL
- en: '**~** `**index**` **and multiple** `**values**`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, we group the data by `‘market’`, then return the `mean` of the `‘nights‘`
    and `‘month’` values, grouped by the `‘status’.`
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/803d10cc5ebb172de20abc9a99e83003.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The `values` level comes on top of the `columns`, and by default, the names
    are sorted. (The `sort=False` argument currently only works on the row indices).
    Unlike the `columns` parameter, all the names are held at one level, no matter
    the length of the list.
  prefs: []
  type: TYPE_NORMAL
- en: '**~** `**index**` **and multiple** `**aggfunc**` **options**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, group the data by `‘market’`, then return the `mean` and the `maximum`
    values of the `‘guests’` column, further grouped by `‘status’`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7697e9fdfabc8408d446dcd6fe9dc910.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The `aggfunc` layer comes at the highest level. Similar to the `values`, all
    the `aggfunc` options are held at one level.
  prefs: []
  type: TYPE_NORMAL
- en: '**~** `**index**` **and multiple** `**columns**`**,** `**values**`**, and**
    `**aggfunc**` **options**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, for every `‘market’`, return the `median` and `maximum` values of the
    `‘lead_time’` and `‘mights’` columns, further grouped by `‘status’` and `‘year’`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d4829fb846abe1cd57f620c4e80c38b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we now have four levels; two levels for the `columns` parameter,
    and a level each for the `values` and the `aggfunc` arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '**Removing the multi-index layers**'
  prefs: []
  type: TYPE_NORMAL
- en: You will see that the `df.reset_index()` will not work as expected when there
    is a hierarchy of columns.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a4bd2bff7d95da584c0f13f515cfa10c.png)'
  prefs: []
  type: TYPE_IMG
- en: df.reset_index with multi-index illustration by author
  prefs: []
  type: TYPE_NORMAL
- en: Here are two ways to deal with the multi-index
  prefs: []
  type: TYPE_NORMAL
- en: '***combine/merge the levels***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/e8ccf3a894118ea33d6120865476a52e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Using the pivot table above, below are two ways to merge the levels.
  prefs: []
  type: TYPE_NORMAL
- en: '***Using the*** `***map***` ***and*** `***join***` ***functions***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Inside the `map` function, call the `join` function and pass the separator symbol,
    in our case an underscore. This returns a list of the joined column levels, which
    you then assign to the dataframe’s column names as below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/18f2dcda5f386dafd3f7d80cec9cfae4.png)'
  prefs: []
  type: TYPE_IMG
- en: Merged multi-index column headers
  prefs: []
  type: TYPE_NORMAL
- en: You can also provide other symbols or characters as separators, for example,
    an empty string `(‘’.join)`, a dot `(‘.’.join)`, or even a word`(‘per’.join)`.
    Note that the levels are combined from the topmost level (level 0) towards the
    innermost (level -1).
  prefs: []
  type: TYPE_NORMAL
- en: '***Using list comprehension —***this is useful when you want to re-order the
    names during a merge.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The code above results in the same DataFrame as the previous section. This code
    says that for every column, and with `i` being the topmost level and `j` the one
    after that, return the two levels in that order (`i` then `j`) separated by an
    underscore.
  prefs: []
  type: TYPE_NORMAL
- en: Now, say you want a different order for the names after merging. We’ll use the
    DataFrame below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1639343193fbb83e9d15d49d1ac04419.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: You can merge like `level1_level0_level2` using a list comprehension. Here,
    use three variable names to represent the levels `(i,j,k)`, then provide the desired
    format to return, like `(f’{j}_{i}_{k}’)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the code above, we used a space to separate the names.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9705d7ed4a9373b101b550b52f7f259c.png)'
  prefs: []
  type: TYPE_IMG
- en: Merged column names by author
  prefs: []
  type: TYPE_NORMAL
- en: '***2\. Drop some levels***'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, the level is not useful.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7edada3497acfb9e59ef0d4744ff7960.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: To drop the first two levels of the pivot table above, use `df.columns.droplevel(level=position)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f210d114ca7c730c2e58c431bc10ba16.png)'
  prefs: []
  type: TYPE_IMG
- en: DataFrame with dropped multi-index columns
  prefs: []
  type: TYPE_NORMAL
- en: '**Removing the ‘column-level’ names** — Once you remove or merge the levels,
    you can then use `df.reset_index()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/42c2d81f7f6491d107eeb63be1332e8a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: But now, the original column names that were passed to the `columns` parameter
    are present in the reset DataFrame. See `‘year’` above, which appears at the wrong
    location as the name of the new index. Let us use `df.rename_axis()` to remove
    this name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2e470f2934316cc8a1c50b4be338559a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '**‘Fill_value’ parameter (Default: fill_value = None)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the value that replaces the missing values.
  prefs: []
  type: TYPE_NORMAL
- en: Missing values, or NaNs (Not a number), appear when there are no `index-columns`
    combinations for the `values` you are aggregating.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/99b0055b657526e5ce791815aa8fcf27.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: In the DataFrame above (left), the area code 1112 does not have an agent ‘b’,
    hence the NaN where the 1112 and ‘b’ combination value should be.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can use `fill_value=0` to replace the NaNs with 0.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e8f282310773c2119502fc6a7149db15.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: You can also use string values like in the code below where we pass an empty
    string to the `fill_value` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6e130e806bcf94c23898d522279c9bf9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '**‘dropna’ parameter (Default: dropna = True)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When `True`, this parameter drops rows or columns which contain only missing
    values.
  prefs: []
  type: TYPE_NORMAL
- en: For example, using the DataFrame below, suppose we have a new `agent c` who
    hasn’t been assigned an area code yet, and a new `area code 1113` without a price
    and size.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4070eff986069840fa1d0c5c2e7b14c3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want them to appear in the pivoted table without being present in the
    original table, we can follow the steps below:'
  prefs: []
  type: TYPE_NORMAL
- en: Convert the `agent` and `area_code` features into [Categorical data types](https://pandas.pydata.org/docs/user_guide/categorical.html)
    and provide all the possible categories.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Pivot the data using `dropna=False` so that columns and rows containing only
    missing values are not dropped. You can also use `fill_value` here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/81261af1227b89fec75f0341563c4d17.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '**‘Margins’ parameter (Default: margins = False)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This displays an aggregated value for every row and column of the pivoted table.
    The margin parameter works when the results of the pivoted table are numeric values
    (values from `aggfunc` functions such as `sum`, `count`, `nunique` etc.), and
    the same `aggfunc` function is used to calculate the `margin` values.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in the pivot_table below, we group the data by `‘area_code’` and
    return the `sum` of the `‘price’`, further grouped by the `‘agent’`. We also want
    the `margins` values, and in this case, the `sum` of the row and column values
    is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/559e6c6cbea82091d3bc1e0d640aec7c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '**‘Margins_name’ parameter (Default: margins_name=’All’)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This renames the margin names and only works with `margins` set to True.
  prefs: []
  type: TYPE_NORMAL
- en: In the code below, we change the margin names to `‘sum_total’`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2cbc2fd8f30afc5bbfa28be97bac4bd2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '**‘Observed’ parameter (Default: observed = False)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you have [Categorical](https://pandas.pydata.org/docs/reference/api/pandas.Categorical.html)
    data types as we did earlier, sometimes the pivot_table will display rows and
    columns containing only zero values. This happens even when `dropna=True`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5a598864c08fcdf270ad28f96e111622.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: When you set `observed=True`, only ‘observed’ groupings are displayed. This
    saves memory and computational power when creating pivot tables from large datasets.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e0ff6f97a183cc336251e04e6bddf697.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '**‘Sort’ parameter (default: sort = True)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This sorts the row and column indices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/59ff0b0a57e6d35a0b232b7ffebcfc13.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: When `sort=False`, the resulting row indices appear in the original order, but
    the column headers remain sorted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0ff71bb6b66929588fa6143ccac99692.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this article, we looked at how to use the Pandas pivot table and its parameters.
    We also learned that `values` of all the unique combinations of the `index` and
    `columns` parameters are aggregated into one value using the `aggfunc` function.
  prefs: []
  type: TYPE_NORMAL
- en: We then saw how hierarchical columns [(multi-index)](https://medium.com/towards-data-science/functions-that-generate-a-multiindex-in-pandas-and-how-to-remove-the-levels-7aa15ac7ca95)
    result from passing an `index` together with multiple `columns`, `values`, or
    `aggfunc` arguments. Later, we merged and dropped the multi-index levels.
  prefs: []
  type: TYPE_NORMAL
- en: A pivot table is important for summarizing a dataset. You can then use this
    summary to plot graphs, or format and style the table for a presentation.
  prefs: []
  type: TYPE_NORMAL
- en: Find the notebook and files used in this article [here on GitHub](https://github.com/suemnjeri/medium-articles/blob/main/pivot_table_pandas/Pivot_table%20examples%20using%20Hotel%20Reservations%20Data.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: I hope you enjoyed the article. To receive more like these whenever I publish
    a new one, subscribe [here](https://suemnjeri.medium.com/subscribe/@suemnjeri).
    If you are not yet a medium member and would like to support me as a writer, follow
    [this link](https://medium.com/@suemnjeri/membership) and I will earn a small
    commission. Thank you for reading!
  prefs: []
  type: TYPE_NORMAL
