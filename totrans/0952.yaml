- en: How to Do Fuzzy String Matching in Pandas Dataframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/fuzzy-string-matching-in-pandas-2c185a24617f](https://towardsdatascience.com/fuzzy-string-matching-in-pandas-2c185a24617f)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Matching text where there’s no perfect match
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://thuwarakesh.medium.com/?source=post_page-----2c185a24617f--------------------------------)[![Thuwarakesh
    Murallie](../Images/44f1a14a899426592bbd8c7f73ce169d.png)](https://thuwarakesh.medium.com/?source=post_page-----2c185a24617f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2c185a24617f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2c185a24617f--------------------------------)
    [Thuwarakesh Murallie](https://thuwarakesh.medium.com/?source=post_page-----2c185a24617f--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2c185a24617f--------------------------------)
    ·6 min read·Apr 17, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0e2257b146dc3409abf7ce5b742d7da1.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Lucas Santos](https://unsplash.com/@_staticvoid?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: The real world is not perfect.
  prefs: []
  type: TYPE_NORMAL
- en: People use different forms of the same piece of information. Even well-established
    systems use different standards. You’d have seen city names misspelled, like “Santana”
    instead of “Santa Ana” or “St. Louie” instead of “St. Louis.”
  prefs: []
  type: TYPE_NORMAL
- en: When working with real-world data, this is inevitable. Thus we must ensure that
    the data we take to the next steps in our pipeline are standardized.
  prefs: []
  type: TYPE_NORMAL
- en: We can tackle this problem with Fuzzy string matching. This, too, is not perfect,
    yet very helpful.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/python-decorators-for-data-science-6913f717669a?source=post_page-----2c185a24617f--------------------------------)
    [## 5 Python Decorators I Use in Almost All My Data Science Projects'
  prefs: []
  type: TYPE_NORMAL
- en: Decorators provide a new and convenient way for everything from caching to sending
    notifications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/python-decorators-for-data-science-6913f717669a?source=post_page-----2c185a24617f--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Fuzzy String Matching in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’d probably use Pandas dataframes for wrangling if you're a Python programmer.
    Along with pandas, you could use “thefuzz” to do fuzzy string matching.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[TheFuzz](https://github.com/seatgeek/thefuzz) is an open-source Python package
    formally known as “FuzzyWuzzy.” It uses the **Levenshtein edit distance** to calculate
    the similarity string similarity.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the basic usage of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[](/sql-on-pandas-usign-duckdb-f7cd238a0a5a?source=post_page-----2c185a24617f--------------------------------)
    [## SQL on Pandas — My New Favorite for 10X Speed.'
  prefs: []
  type: TYPE_NORMAL
- en: Bringing the best of both worlds together
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/sql-on-pandas-usign-duckdb-f7cd238a0a5a?source=post_page-----2c185a24617f--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: How text similarity is measured?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Levenshtein distance, also known as edit distance, is a metric used to measure
    the difference or similarity between two strings. It calculates the minimum number
    of operations (insertions, deletions, or substitutions) required to transform
    one string into another.
  prefs: []
  type: TYPE_NORMAL
- en: The smaller the Levenshtein distance between two strings, the more similar they
    are.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For example, consider the two strings “chat” and “chart”. The Levenshtein distance
    between them is 1 because the only operation needed to transform “chat” into “chart”
    is to replace the letter “a” with “r”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now Consider the strings “intention” and “execution”. The Levenshtein distance
    between them is 5\. The following is one of the possible ways to transform “intention”
    into “execution” with a minimum number of operations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace ‘i’ with ‘e’: entention'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace ’n’ with ‘x’: extention'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Delete ‘t’: exention'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace ‘n’ with ‘u’: exection'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert ‘u’: execution'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The total cost of these operations is 5, which is the Levenshtein distance between
    the two strings.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, the smaller the Levenshtein distance between two strings, the more
    similar they are. For instance, if two strings have a Levenshtein distance of
    0, then they are identical. Conversely, if the distance is large, it indicates
    that the strings are significantly different.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the [Educative article on Levenshtein distance](https://www.educative.io/answers/the-levenshtein-distance-algorithm),
    as it’s not the scope of this post.
  prefs: []
  type: TYPE_NORMAL
- en: But here’s a short example of how we can get a similarity score for two strings
    in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[](/black-with-git-hub-actions-4ffc5c61b5fe?source=post_page-----2c185a24617f--------------------------------)
    [## Maintain Clean Python Code With Black and GitHub Actions.'
  prefs: []
  type: TYPE_NORMAL
- en: Nobody wants a messy codebase; few have the patience to clean it.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/black-with-git-hub-actions-4ffc5c61b5fe?source=post_page-----2c185a24617f--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Using Fuzzy string matches to remove duplicates in Pandas dataframes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the common challenges when working with user-created data is to remove
    duplicates. But the task becomes challenging when the duplicates aren’t exact
    matches.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can write a little function to check string similarity and remove duplicates.
    Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Our original dataset had similar names — John Smith and Jon Smith, James Johnson,
    and James Johnsan. But we were able to get rid of these duplicates.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/python-code-like-natural-english-ff5cb09e97b9?source=post_page-----2c185a24617f--------------------------------)
    [## How My Python Scripts Sound More Like a Natural Conversation'
  prefs: []
  type: TYPE_NORMAL
- en: Pipes are an incredibly fantastic technique for more human-friendly coding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/python-code-like-natural-english-ff5cb09e97b9?source=post_page-----2c185a24617f--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Standardizing fuzzy duplicates in a Pandas dataframe
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s an implementation of a function that replaces duplicate rows in the
    “Name” column with the first occurrence of that row, based on a similarity score
    threshold using thefuzz package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can remove the Jon Smiths with John Smiths in our dataset using this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fuzzy string matching is a must for real-life data. Unless you autogenerate
    data, you almost always expect non-standard values in your dataset. Even among
    autogenerated systems, the conventions may vary.
  prefs: []
  type: TYPE_NORMAL
- en: When text data involved, I often see we stuck at some point where there are
    fuzzy matching is required.
  prefs: []
  type: TYPE_NORMAL
- en: In such situations, we can use the techniques highlighted in this post. We’ve
    used the Python package “thefuzz” to match strings using Levenshtein’s distance
    and removed duplicates from Pandas dataframes. We can replace them with one proper
    value if needed instead of removing them.
  prefs: []
  type: TYPE_NORMAL
- en: But fuzzy string matching is not perfect. For instance, in the last example
    of replacing duplicates, our script has replaced all “James Johnson” with “James
    Johnsan.” If Johnson is what we prefer, our script hasn’t done a good job.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, we need to use fuzzy matching as a last resort. Or a helpful guide. But
    relying on them too much is not advisable.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this helps.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading, friend! Say Hi to me on [**LinkedIn**](https://www.linkedin.com/in/thuwarakesh/),
    [**Twitter**](https://twitter.com/Thuwarakesh), and [**Medium**](https://thuwarakesh.medium.com/).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Not a Medium member yet? Please use this link to [**become a member**](https://thuwarakesh.medium.com/membership)
    because, at no extra cost for you, I earn a small commission for referring you.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
