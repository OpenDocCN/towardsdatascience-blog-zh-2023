["```py\n# Create dataset\ndtf <- data.frame(\n  id = 1:100,\n  product= sample(c('product A', 'product B', 'product C', 'product D'), size=100, replace=T),\n  qty = as.integer( rnorm(100, 10, 2) ),\n  amt = rnorm(100, 1280, 300),\n  amt2 = rnorm(100, 1280, 300)\n)\n\n[OUT]:\n     id   product qty    amt   amt2\n1     1 product A   9  954.1 1418.5\n2     2 product B  12 1606.9  877.7\n3     3 product D   7 1241.6 1433.5\n4     4 product A  11 1413.2 1203.8\n5     5 product B  10 1623.3 1451.1\n```", "```py\n# Apply: Apply a function to all the columns\napply( X= dtf[,c(3,4,5)], MARGIN= 2, FUN= mean)\n\n[OUT]:\nqty     amt    amt2 \n9.55 1303.42 1267.46 \n```", "```py\napply( X= dtf, MARGIN= 2, FUN= mean)\n\n     id product     qty     amt    amt2 \n     NA      NA      NA      NA      NA \nWarning messages:\n1: In mean.default(newX[, i], ...) :\n  argument is not numeric or logical: returning NA\n```", "```py\napply( X= dtf$amt, MARGIN= 2, FUN= mean)\n\nError in apply(X = dtf$amt, MARGIN = 2, FUN = mean) : \n  dim(X) must have a positive length\n```", "```py\n id   product qty    amt   amt2\n1     1 product A   9  954.1 1418.5\n2     2 product B  12 1606.9  877.7\n3     3 product D   7 1241.6 1433.5\n4     4 product A  11 1413.2 1203.8\n5     5 product B  10 1623.3 1451.1\n\n# Apply: Apply a function to all the rows\napply( X= dtf[, c(4,5)], MARGIN= 1, FUN= mean)\n\n[OUT]:\n  [1] 1186.3 1242.3 1337.6 1308.5 1537.2 1007.1 1094.0 1465.9 1602.8 1204.4 1155.4 1190.6  812.3 1565.5 1118.5\n [16] 1346.4 1259.2 1319.0 1293.2 1402.1 1471.2 1491.8 1248.5 1154.7 1693.5 1358.8 1396.8 1262.8 1383.0 1270.0\n [31] 1621.8  933.7  850.7  892.6 1482.3 1191.3 1612.7 1677.2 1496.7 1504.8  947.7  865.5  953.5 1151.8  947.6\n [46] 1763.6 1229.1 1328.0  893.1 1386.8 1004.8  975.0  931.7 1665.4 1417.0 1482.3  974.0 1444.9 1233.7 1548.7\n [61] 1469.9 1612.0 1159.9 1130.9 1617.9 1290.0 1227.9 1072.6 1367.1 1027.3 1472.1 1263.1 1347.1 1463.3 1324.0\n [76] 1361.6 1330.7 1380.8 1699.4 1389.0 1165.8 1146.8 1358.7 1326.3 1213.6  983.1 1385.5  919.4 1212.9 1226.1\n [91] 1003.2 1643.5 1327.8 1566.7  966.4 1270.6 1359.5 1252.3 1216.1 1405.6\n```", "```py\n# Average of the amounts (avg by row)\ndtf$avg_amounts <- apply( X= dtf[, c(4,5)], MARGIN= 1, FUN= mean)\n\n# See first 5 rows\ndtf |> head(5)\n\n  id product qty    amt   amt2 avg_amounts\n1  1       A   9  954.1 1418.5        1186\n2  2       B  12 1606.9  877.7        1242\n3  3       D   7 1241.6 1433.5        1338\n4  4       A  11 1413.2 1203.8        1309\n5  5       B  10 1623.3 1451.1        1537\n```", "```py\n# Average AMT by product QTY\ndtf$amt_by_qty <- apply(\n  X= dtf[, c(3,4)],\n  MARGIN= 1,\n  FUN= function(mtrx){ mtrx[2]/mtrx[1]}\n       )\n\n# See first 5 rows\ndtf |> head(5)\n\n[OUT]:\n  id product qty    amt   amt2 avg_amounts amt_by_qty\n1  1       A   9  954.1 1418.5        1186      106.0\n2  2       B  12 1606.9  877.7        1242      133.9\n3  3       D   7 1241.6 1433.5        1338      177.4\n4  4       A  11 1413.2 1203.8        1309      128.5\n5  5       B  10 1623.3 1451.1        1537      162.3\n```", "```py\n# Creating a list\nl <- list(c(1,2), 'l', 1.6, TRUE)\n\n# Check the type of each object in the list\nlapply(l, class)\n\n[OUT]:\n[[1]]\n[1] \"numeric\"\n\n[[2]]\n[1] \"character\"\n\n[[3]]\n[1] \"numeric\"\n\n[[4]]\n[1] \"logical\"\n```", "```py\n# Use sapply for the same list\nsapply(l, FUN = class)\n\n[OUT]: an array\n[1] \"numeric\"   \"character\" \"numeric\"   \"logical\" \n```", "```py\n# Using sapply to remove the word 'product' from the description\ndtf$product <- sapply(dtf$product,\n                      FUN= function(x){ strsplit(x, ' ')[[1]][2] })\n\n[OUT]:\n  id product qty    amt   amt2\n1  1       A   9  954.1 1418.5\n2  2       B  12 1606.9  877.7\n3  3       D   7 1241.6 1433.5\n4  4       A  11 1413.2 1203.8\n5  5       B  10 1623.3 1451.1\n```", "```py\n# Using tapply to calculate the mean of amt by product \ntapply(X= dtf$amt, INDEX = dtf$product, FUN = mean)\n\n[OUT]:\n   A    B    C    D \n1295 1290 1304 1323 \n```"]