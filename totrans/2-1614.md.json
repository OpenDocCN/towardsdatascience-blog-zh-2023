["```py\n# Import library\nimport numpy as np\n\n# Generate 10000 samples from a normal distribution\nX = np.random.normal(163, 10, 10000)\n```", "```py\n# Install distfit library\npip install distfit\n```", "```py\n# Import library\nfrom distfit import distfit\n\n# Initialize for common/popular distributions with bootstrapping.\ndfit = distfit(distr='popular', n_boots=100)\n\n# Estimate the best fit\nresults = dfit.fit_transform(X)\n\n# Plot the RSS and bootstrap results for the top scoring PDFs\ndfit.plot_summary(n_top=10)\n\n# Show the plot\nplt.show()\n```", "```py\n# Make figure\nfig, ax = plt.subplots(1, 2, figsize=(20, 8))\n\n# PDF for only the best fit\ndfit.plot(chart='PDF', n_top=1, ax=ax[0]);\n\n# CDF for the top 10 fits\ndfit.plot(chart='CDF', n_top=10, ax=ax[1])\n\n# Show the plot\nplt.show()\n```", "```py\n# Initialize for common or popular distributions.\ndfit = distfit(distr='loggamma', alpha=0.01, bound='both')\n\n# Estimate the best fit\nresults = dfit.fit_transform(X)\n\n# Print model parameters\nprint(dfit.model)\n\n# {'name': 'loggamma',\n#  'score': 6.676334203908028e-05,\n#  'loc': -1895.1115726427015,\n#  'scale': 301.2529482991781,\n#  'arg': (927.596119872062,),\n#  'params': (927.596119872062, -1895.1115726427015, 301.2529482991781),\n#  'color': '#e41a1c',\n#  'CII_min_alpha': 139.80923469906566,\n#  'CII_max_alpha': 185.8446340627711}\n\n# Save model\ndfit.save('./human_height_model.pkl')\n```", "```py\n# New human heights\ny = [130, 160, 200]\n\n# Make predictions\nresults = dfit.predict(y, alpha=0.01, multtest='fdr_bh', todf=True)\n\n# The prediction results\nresults['df']\n\n#        y   y_proba y_pred         P\n# 0  130.0  0.000642   down  0.000428\n# 1  160.0  0.391737   none  0.391737\n# 2  200.0  0.000321     up  0.000107\n\nplt.figure();\nfig, ax = plt.subplots(1, 2, figsize=(20, 8))\n# PDF for only the best fit\ndfit.plot(chart='PDF', ax=ax[0]);\n# CDF for the top 10 fits\ndfit.plot(chart='CDF', ax=ax[1])\n# Show plot\nplt.show()\n```", "```py\n# Initialize distfit\ndfit = distfit()\n\n# Import dataset\ndf = dfit.import_example(data='gas_spot_price')\n\nprint(df)\n#             price\n# date             \n# 2023-02-07   2.35\n# 2023-02-06   2.17\n# 2023-02-03   2.40\n# 2023-02-02   2.67\n# 2023-02-01   2.65\n#           ...\n# 1997-01-13   4.00\n# 1997-01-10   3.92\n# 1997-01-09   3.61\n# 1997-01-08   3.80\n# 1997-01-07   3.82\n\n# [6555 rows x 1 columns]\n```", "```py\n# Get unique years\ndfit.lineplot(df, xlabel='Years', ylabel='Natural gas spot price', grid=True)\n\n# Show the plot\nplt.show()\n```", "```py\n# Initialize\nfrom distfit import distfit\n\n# Fit distribution\ndfit = distfit(distr='full', n_boots=100)\n\n# Search for best theoretical fit.\nresults = dfit.fit_transform(df['price'].values)\n\n# Plot PDF/CDF\nfig, ax = plt.subplots(1,2, figsize=(25, 10))\ndfit.plot(chart='PDF', n_top=10, ax=ax[0])\ndfit.plot(chart='CDF', n_top=10, ax=ax[1])\n\n# Show plot\nplt.show()\n```", "```py\n# Plot Summary and QQ-plot\nfig, ax = plt.subplots(1,2, figsize=(25, 10))\n\n# Summary plot\ndfit.plot_summary(ax=ax[0])\n\n# QQplot\ndfit.qqplot(df['price'].values, n_top=10, ax=ax[1])\n\n# Show the plot\nplt.show()\n```", "```py\n# Make prediction\ndfit.predict(df['price'].values, alpha=0.05, multtest=None)\n\n# Line plot with data points outside the confidence interval.\ndfit.lineplot(df['price'], labels=df.index)\n```"]