- en: 'Unlocking the Power of Distributed SQL with Presto: A Comprehensive Guide'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/what-is-apache-presto-6986d1fbf951](https://towardsdatascience.com/what-is-apache-presto-6986d1fbf951)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Everything You Need to Know About Presto and How to Use It in Your Data Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@niklas_lang?source=post_page-----6986d1fbf951--------------------------------)[![Niklas
    Lang](../Images/5fa71386db00d248438c588c5ae79c67.png)](https://medium.com/@niklas_lang?source=post_page-----6986d1fbf951--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6986d1fbf951--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6986d1fbf951--------------------------------)
    [Niklas Lang](https://medium.com/@niklas_lang?source=post_page-----6986d1fbf951--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6986d1fbf951--------------------------------)
    ·7 min read·Jan 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f78de98edb175d35cfbb55e329a4c257.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Anish Prajapati](https://unsplash.com/@anesprajapati?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Presto is an open-source distributed [SQL](https://databasecamp.de/daten/sql)
    engine suitable for querying large amounts of data. It was developed by Facebook
    in 2012 and subsequently made open-source under the Apache license. The engine
    does not provide its own database system and is therefore often used with well-known
    database solutions, such as [Apache Hadoop](https://databasecamp.de/daten/hadoop-erklaert)
    or [MongoDB](https://databasecamp.de/daten/mongodb).
  prefs: []
  type: TYPE_NORMAL
- en: How is Presto built?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The structure of Presto is similar to that of classical database management
    systems (DBMS), which use so-called massively parallel processing (MPP). This
    uses different components that perform different tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Client**: The client is the starting and ending point of each query. It passes
    the SQL command to the coordinator and receives the final result from the worker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Coordinator**: The coordinator receives the commands to be executed from
    the client and breaks them down in order to analyze how complex their processing
    is. He plans or coordinates the execution of several commands and monitors their
    processing with the help of the scheduler. Based on the execution plan, the commands
    are then passed on to the scheduler.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scheduler**: The scheduler is a part of the coordinator, which is ultimately
    responsible for passing on the commands to the workers. It monitors the correct
    execution of the commands according to the plan created by the coordinator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Worker**: The workers take over the actual execution of the commands and
    receive the results from the data sources from the connectors. The final results
    are then passed back to the client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connector**: The Connectors are the interfaces to the supported data sources.
    They know the peculiarities of the different [databases](https://databasecamp.de/en/data/database)
    and systems and can therefore adapt the commands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What applications use Presto?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This SQL engine can be used when connecting different data sources that store
    large amounts of data. These, even if they are non-relational [databases](https://databasecamp.de/en/data/database),
    can be controlled using classic SQL commands. Presto is often used in the [Big
    Data](https://databasecamp.de/en/data/big-data-basics) area, where low query times
    and high performance are of immense importance. It can also be used for queries
    on [data warehouses](https://databasecamp.de/en/data/data-warehouses).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the industry, many well-known companies already rely on Presto. Besides
    Facebook, which invented the query engine, these include for example:'
  prefs: []
  type: TYPE_NORMAL
- en: Uber uses the SQL query engine for its massive data lakehouse with well over
    59 petabytes of data. Various Data Scientists, as well as regular users, need
    to be able to access this data in a short period of time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At Twitter, the immensely increasing amount of data also became a cost issue
    as SQL query expenses increased. Therefore, SQL query engines were used to scale
    the system horizontally. In addition, a [Machine Learning](https://databasecamp.de/en/machine-learning)
    model was trained that can predict the expected query time even before a query
    is made.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alibaba relies on SQL query engines to build its [data lake](https://databasecamp.de/en/data/data-lakes).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these examples were taken from the [Use Case section on the Presto website](https://prestodb.io/powered-by-presto.html).
  prefs: []
  type: TYPE_NORMAL
- en: What are the Advantages of using Presto?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Presto offers several advantages when working with large amounts of data. These
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: Open-Source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The open source availability not only offers the possibility to use the tool
    without licensing costs, but also goes hand in hand with the fact that the source
    code can be viewed and, with sufficient know-how, also tailored to one’s own needs.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, open source programs also often have a large, active community,
    so problems can usually be solved by a quick Internet search. These many active
    users of Presto also ensure that the system is constantly being developed and
    improved, which in turn benefits all other users.
  prefs: []
  type: TYPE_NORMAL
- en: High Performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Due to its architecture, this SQL query engine can also query large amounts
    of data within a few seconds and without large latency periods. This high performance
    is made possible by the distributed architecture, which enables horizontal scaling
    of the system.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, Presto can be run both on-premise and in the cloud, so performance
    can be further improved by moving to the cloud if needed.
  prefs: []
  type: TYPE_NORMAL
- en: High Compatibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By using the [Structured Query Language](https://databasecamp.de/en/data/sql-definition),
    Presto is easy to use for many users, since the handling of the query language
    is already known and this knowledge can still be used. This makes it easy to implement
    even complex functions.
  prefs: []
  type: TYPE_NORMAL
- en: Compatibility is further ensured by a variety of available connectors for common
    database systems, such as [MongoDB](https://databasecamp.de/en/data/mongodb-basics),
    [MySQL](https://databasecamp.de/en/data/mysqls), or the [Hadoop Distributed File
    System](https://databasecamp.de/en/data/apache-hdfs). If these are not sufficient,
    custom connectors can also be configured or written.
  prefs: []
  type: TYPE_NORMAL
- en: How to query data using Presto?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Querying with Presto involves connecting to a data source and executing SQL
    queries. Here are the basic steps for querying with Presto:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Installation**: Install Presto on a cluster or a single machine. You can
    download the latest version from the official website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration**: Configure the system to connect to the data sources you
    want to query. For this, you need to have the connectors for each data source
    set up, the authentication details specified, and the required parameters set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Establish connection**: Use a client to connect to the Presto cluster or
    machine. The Presto client can be a command line interface or a GUI tool such
    as Presto CLI or SQL Workbench.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Execute SQL queries**: Once you are connected, you can run SQL queries against
    the data sources. The queries can be simple SELECT statements or more complex
    queries with JOINs, GROUP BYs, and subqueries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Optimizing queries**: Presto offers several options for optimizing queries,
    such as setting the number of nodes, configuring memory limits, and using query
    optimization techniques like cost-based optimization and dynamic filtering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitor query execution**: The program provides several tools for monitoring
    query execution, such as CLI, the Web UI, and the query logs. You can use these
    tools to track the progress of queries, monitor resource usage and troubleshoot
    any problems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In summary, querying with Presto involves connecting to data sources, executing
    SQL queries, and optimizing queries for performance. With its fast query execution
    and support for multiple data sources, the software can be a valuable tool for
    Big Data processing and analysis.
  prefs: []
  type: TYPE_NORMAL
- en: How can Presto and Hadoop be used together?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Presto does not inherently have a built-in data source that can store information.
    Therefore, it relies on the use of other, external [databases](https://databasecamp.de/en/data/database).
    In practice, [Apache Hadoop](https://databasecamp.de/en/data/hadoop-explained),
    or the [Hadoop Distributed File System](https://databasecamp.de/en/data/apache-hdfs)
    (HDFS), is often used for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/39fbe1aee01487307790e882804a4706.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Overview of Hadoop Components | Source: Author'
  prefs: []
  type: TYPE_NORMAL
- en: The connection between HDFS and Presto is established via the Hive Connector.
    The main advantage is that Presto can be used to easily search through different
    file formats and therefore search through all HDFS files. It is often used as
    an alternative to Hive since Presto is optimized for fast queries, which Hive
    cannot offer.
  prefs: []
  type: TYPE_NORMAL
- en: What are the Differences between Presto and Spark?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache Spark is a distributed analytics framework that can be used for many
    different [Big Data](https://databasecamp.de/en/data/big-data-basics) applications.
    It relies on in-memory data storage and parallel execution of processes to ensure
    high performance. It is one of the most comprehensive [Big Data](https://databasecamp.de/en/data/big-data-basics)
    systems on the market and offers, among other things, batch processing, graph
    databases, or support for [Machine Learning](https://databasecamp.de/en/machine-learning).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/af297c2a9fcd1cc7b444a4e4e2094d32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Apache Spark Components | Source: Author'
  prefs: []
  type: TYPE_NORMAL
- en: It is often mentioned in connection with Presto or even understood as a competitor
    to it. However, the two systems are very different and share few similarities.
    Both programs are open-source available systems when working with [Big Data](https://databasecamp.de/en/data/big-data-basics).
    They can both offer good performance, due to their distributed architecture and
    the possibility of scaling. Accordingly, they can also be run both on-premise
    and in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, besides these (albeit rather few) similarities, Apache Spark and Presto
    differ in some fundamental characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: Spark Core does not support SQL queries, for now, you need the additional SparkSQL
    component for that. Presto, on the other hand, is a travel SQL query engine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spark offers a very wide range of application possibilities, for example, also
    through the possibility of building and deploying entire machine learning models.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presto, on the other hand, specializes primarily in the fast processing of data
    queries for large data volumes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is what you should take with you
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Presto is an open-source distributed SQL engine suitable for querying large
    amounts of data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The engine can be used for distributed queries that should have fast response
    times and low latency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presto differs from Apache Spark in that it is primarily focused on data querying,
    while Spark offers a wide range of application capabilities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since Presto does not have its own data source, it is often used together with
    Apache Hadoop as an alternative to their Hive Connector.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*If you like my work, please subscribe* [*here*](https://medium.com/subscribe/@niklas_lang)
    *or check out my website* [*Data Basecamp*](http://www.databasecamp.de/en/homepage)*!
    Also, medium permits you to read* ***3 articles*** *per month for free. If you
    wish to have* ***unlimited*** *access to my articles and thousands of great articles,
    don’t hesitate to get a membership for $****5*** *per month by clicking my referral
    link:* [https://medium.com/@niklas_lang/membership](https://medium.com/@niklas_lang/membership)'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/4-basic-sql-commands-every-new-data-scientist-should-know-ba02e40bfc1a?source=post_page-----6986d1fbf951--------------------------------)
    [## 4 Basic SQL Commands Every New Data Scientist Should Know'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the Structured Query Language
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/4-basic-sql-commands-every-new-data-scientist-should-know-ba02e40bfc1a?source=post_page-----6986d1fbf951--------------------------------)
    [](/8-machine-learning-algorithms-everyone-new-to-data-science-should-know-772bd0f1eca1?source=post_page-----6986d1fbf951--------------------------------)
    [## 8 Machine Learning Algorithms Everyone New to Data Science Should Know
  prefs: []
  type: TYPE_NORMAL
- en: Shortly Explaining the Algorithms Behind Machine Learning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'towardsdatascience.com](/8-machine-learning-algorithms-everyone-new-to-data-science-should-know-772bd0f1eca1?source=post_page-----6986d1fbf951--------------------------------)
    [](/database-basics-acid-transactions-bf4d38bd8e26?source=post_page-----6986d1fbf951--------------------------------)
    [## Database Basics: ACID Transactions'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the ACID properties of Databases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/database-basics-acid-transactions-bf4d38bd8e26?source=post_page-----6986d1fbf951--------------------------------)
  prefs: []
  type: TYPE_NORMAL
