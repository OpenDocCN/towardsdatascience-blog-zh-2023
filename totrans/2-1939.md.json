["```py\ndef get_new_releases(limit: int = 50, offset: int = 0) -> List[Dict[str, Any]]:\n    \"\"\"\n    Fetch new releases from Spotify.\n\n    Args:\n        limit (int, optional): Maximum number of album results to return. Defaults to 50.\n        offset (int, optional): The index of the first result to return. Defaults to 0.\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing album information.\n    \"\"\"\n    new_releases = sp.new_releases(limit=limit, offset=offset)\n    albums = new_releases[\"albums\"][\"items\"]\n    return albums\n```", "```py\ndef get_album_tracks(album_id: str) -> List[Dict[str, Any]]:\n    \"\"\"\n    Fetch tracks from a specific album.\n\n    Args:\n        album_id (str): The Spotify ID of the album.\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing track information.\n    \"\"\"\n    tracks = sp.album_tracks(album_id)[\"items\"]\n    return tracks\n```", "```py\ndef save_data_to_file(data: List[Dict[str, Any]], file_path: str) -> None:\n    \"\"\"\n    Save data to a JSON file.\n\n    Args:\n        data (List[Dict[str, Any]]): List of dictionaries containing album and track information.\n        file_path (str): Path to the JSON file where the data will be saved.\n    \"\"\"\n    with open(file_path, \"w\", encoding=\"utf-8\") as file:\n        json.dump(data, file, ensure_ascii=False, indent=4)\n\ndef load_data_from_file(file_path: str) -> List[Dict[str, Any]]:\n    \"\"\"\n    Load data from a JSON file.\n\n    Args:\n        file_path (str): Path to the JSON file where the data is stored.\n\n    Returns:\n        List[Dict[str, Any]]: List of dictionaries containing album and track information.\n    \"\"\"\n    with open(file_path, \"r\", encoding=\"utf-8\") as file:\n        return json.load(file)\n```", "```py\ndef download_latest_albums_data() -> None:\n    \"\"\"\n    Download the latest albums and tracks data from Spotify and save it to a JSON file.\n    \"\"\"\n    limit = 50\n    offset = 0\n    total_albums = 30\n    album_count = 0\n\n    all_albums = []\n\n    while total_albums is None or album_count < total_albums:\n        new_releases = get_new_releases(limit, offset)\n        if total_albums is None:\n            total_albums = sp.new_releases()[\"albums\"][\"total\"]\n\n        for album in new_releases:\n            album_info = {\n                \"album_name\": album[\"name\"],\n                \"artist_name\": album[\"artists\"][0][\"name\"],\n                \"album_type\": album[\"album_type\"],\n                \"release_date\": album[\"release_date\"],\n                \"available_markets\": album[\"available_markets\"],\n                \"tracks\": [],\n            }\n\n            tracks = get_album_tracks(album[\"id\"])\n\n            for track in tracks:\n                track_info = {\n                    \"track_name\": track[\"name\"],\n                    \"duration_ms\": track[\"duration_ms\"],\n                    \"preview_url\": track[\"preview_url\"],\n                }\n                album_info[\"tracks\"].append(track_info)\n\n            all_albums.append(album_info)\n            album_count += 1\n\n        offset += limit\n        time.sleep(1)  # Add a delay to avoid hitting the rate limit\n        print(f\"Downloaded {album_count}/{total_albums}\")\n\n    save_data_to_file(all_albums, \"albums_and_tracks.json\")\n```", "```py\ndef preprocess_docs(data: List[Dict[str, Any]]) -> List[Document]:\n    \"\"\"\n    Convert the JSON data to a list of Document objects.\n\n    Args:\n        data (List[Dict[str, Any]]): List of dictionaries containing album and track information.\n\n    Returns:\n        List[Document]: A list of Document objects containing the JSON data as strings, split into 3000-character segments.\n    \"\"\"\n    json_string = json.dumps(data, ensure_ascii=False, indent=4)\n    doc_splits = [json_string[i : i + 3500] for i in range(0, len(json_string), 3500)]\n    docs = [Document(page_content=split_text) for split_text in doc_splits]\n    return docs\n```", "```py\ndef get_summary(docs: List[Document]) -> str:\n    \"\"\"\n    Generate a summary using the JSON data provided in the list of Document objects.\n\n    Args:\n        docs (List[Document]): A list of Document objects containing the JSON data as strings.\n\n    Returns:\n        str: The generated summary.\n    \"\"\"\n    llm = ChatOpenAI(temperature=0, model_name=\"gpt-3.5-turbo\")\n\n    prompt_template = \"\"\"Write a short summary about the latest songs in Spotify based on the JSON data below: \\n\\n{text}.\"\"\"\n    prompt_template2 = \"\"\"Write an article about the latest music released in Spotify (below) and adress the change in music trends using the style of Rick Beato. : \\n\\n{text}\"\"\"\n\n    PROMPT = PromptTemplate(template=prompt_template, input_variables=[\"text\"])\n    PROMPT2 = PromptTemplate(template=prompt_template2, input_variables=[\"text\"])\n\n    chain = load_summarize_chain(\n        llm,\n        chain_type=\"map_reduce\",\n        return_intermediate_steps=True,\n        map_prompt=PROMPT,\n        combine_prompt=PROMPT2,\n        verbose=True,\n    )\n\n    res = chain({\"input_documents\": docs}, return_only_outputs=True)\n\n    return res\n```"]