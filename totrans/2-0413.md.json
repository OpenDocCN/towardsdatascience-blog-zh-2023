["```py\n# Imports\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(sjPlot) #contigency tables\nlibrary(FactoMineR) #CA functions\nlibrary(ade4) # Create CA\n```", "```py\n# Dataset\n\ndf <- data.frame(\n  trans_id = 1:30,\n  register = as.factor(c('rgs1', 'rgs1', 'rgs1', 'rgs2', 'rgs1', 'rgs2', \n                         'rgs1', 'rgs2', 'rgs1', 'rgs2', 'rgs1', 'rgs2', \n                         'rgs1', 'rgs2', 'rgs1', 'rgs2', 'rgs1', 'rgs2', \n                         'rgs1', 'rgs2', 'rgs1', 'rgs2', 'rgs1', 'rgs2',\n                         'rgs1', 'rgs2', 'rgs1', 'rgs2', 'rgs1', 'rgs2')),\n  product1 = as.factor(c('banana', 'banana', 'pasta', 'milk', 'yogurt', \n                         'milk', 'pasta', 'milk', 'pasta', 'milk', 'banana',\n                         'milk', 'banana', 'banana', 'pasta', 'bread', 'bread',\n                         'milk', 'yogurt', 'bread', 'banana', 'pasta', 'yogurt','milk',\n                         'yogurt', 'bread', 'bread', 'pasta', 'milk', 'banana')),\n  product2 = as.factor(c('strawberries', 'strawberries', 'sauce', 'bread', 'water',\n                         'bread', 'sauce', 'bread', 'sauce', 'bread', 'strawberries',\n                         'bread', 'strawberries', 'bread', 'water', 'bread', 'water', \n                         'bread', 'bread', 'yogurt','strawberries', 'sauce', \n                         'strawberries', 'bread', 'strawberries', 'milk', 'bread',\n                         'sauce', 'bread', 'strawberries'))\n)\n```", "```py\nfor (var1 in 2:4){\n  for (var2 in 4:2) {\n  contingency <- table(df[,var1], df[, var2])\n  chi2 <- chisq.test(contingency)\n  writeLines( paste(\"p-Value for\",\n                    colnames(df)[var1], \"and\", colnames(df)[var2],\n                    chi2$p.value))\n  }\n}\n\np-Value for register and product2 0.0271823155904414\np-Value for register and product1 0.0318997966416755\np-Value for register and register 3.2139733725587e-07\np-Value for product1 and product2 9.51614574849618e-06\np-Value for product1 and product1 5.49284039685425e-18\np-Value for product1 and register 0.0318997966416755\np-Value for product2 and product2 8.43312760405718e-20\np-Value for product2 and product1 9.51614574849618e-06\np-Value for product2 and register 0.0271823155904414\n```", "```py\n# Register x product1\nsjt.xtab(var.row = df$register,\n         var.col = df$product1,\n         show.exp = TRUE,\n         show.row.prc = TRUE,\n         show.col.prc = TRUE)\n```", "```py\n# Creating the Multiple Correspondence Analysis\nACM <- dudi.acm(df[,2:4], \n                scannf = FALSE)\n```", "```py\nACM$co\n\n                           Comp1       Comp2\nregister.rgs1          0.7660067  0.05610284\nregister.rgs2         -0.8754363 -0.06411753\nproduct1.banana        0.8060812  0.99732829\nproduct1.bread        -0.6784873 -0.03550393\nproduct1.milk         -1.2068148  0.23776669\nproduct1.pasta         0.6008691 -1.82914217\nproduct1.yogurt        0.9497931  0.56723529\nproduct2.bread        -0.9315168  0.26905544\nproduct2.milk         -1.1707641 -0.10768356\nproduct2.sauce         0.5351564 -1.96850658\nproduct2.strawberries  1.0569306  1.00621404\nproduct2.water         0.7961676 -0.40682587\nproduct2.yogurt       -1.1707641 -0.10768356\n```", "```py\nACM$cw\n\n        register.rgs1         register.rgs2       product1.banana        product1.bread         product1.milk \n           0.17777778            0.15555556            0.07777778            0.05555556            0.08888889 \n       product1.pasta       product1.yogurt        product2.bread         product2.milk        product2.sauce \n           0.06666667            0.04444444            0.13333333            0.01111111            0.05555556 \nproduct2.strawberries        product2.water       product2.yogurt \n           0.08888889            0.03333333            0.01111111 \n```", "```py\nACM$eig\n [1] 0.77575767 0.64171051 0.54102510 0.44643851 0.33333333 0.25656245 0.15516469 0.10465009 0.05690406 0.02178693\n\n# Variance from each dimension\nperc_variance <- (ACM$eig / sum(ACM$eig)) * 100\n\n[1] 23.272730 19.251315 16.230753 13.393155 10.000000  7.696873  4.654941  3.139503  1.707122  0.653608\n```", "```py\n# How many categories by variable\nqty_categories <- apply( df[,2:4], 2, function(x) nlevels(as.factor(x)) )\n\nregister product1 product2 \n       2        5        6\n```", "```py\n# Create the df with coordinates\ndf_ACM <- data.frame(ACM$co, \n                     Variable = rep(names(qty_categories),\n                                          qty_categories) )\n```", "```py\n# Plotting the perceptual map\n\ndf_ACM %>%\n  rownames_to_column() %>%\n  rename(Category = 1) %>%\n  mutate(Category = gsub(\"register.\",\"\", Category),\n         Category = gsub(\"product1.\",\"\", Category),\n         Category = gsub(\"product2.\",\"\", Category)) %>%\n  ggplot(aes(x = Comp1, y = Comp2, label = Category, color = Variable)) +\n  geom_point() +\n  geom_label_repel() +\n  geom_vline(aes(xintercept = 0), linetype = \"longdash\", color = \"grey48\") +\n  geom_hline(aes(yintercept = 0), linetype = \"longdash\", color = \"grey48\") +\n  labs(x = paste(\"Dimensão 1:\", paste0(round(perc_variancia[1], 2), \"%\")),\n       y = paste(\"Dimensão 2:\", paste0(round(perc_variancia[2], 2), \"%\"))) +\n  theme_bw()\n```"]