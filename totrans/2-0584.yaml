- en: Create 3-D Galactic Art with Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/create-3-d-galactic-art-with-matplotlib-a7534148a319](https://towardsdatascience.com/create-3-d-galactic-art-with-matplotlib-a7534148a319)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: More Fun with Logarithmic Spirals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@lee_vaughan?source=post_page-----a7534148a319--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----a7534148a319--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a7534148a319--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a7534148a319--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----a7534148a319--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a7534148a319--------------------------------)
    ·11 min read·Oct 4, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a088a775770e8db4d621ccb4aa4398ed.png)'
  prefs: []
  type: TYPE_IMG
- en: A 3-D simulation of a spiral galaxy (by author)
  prefs: []
  type: TYPE_NORMAL
- en: In a [previous article](https://medium.com/towards-data-science/create-galactic-art-with-tkinter-e0418a59b215),
    I demonstrated how you could use Python’s Tkinter GUI module to make *2-D* galactic
    art using the equation for a logarithmic spiral [1]. In this article, we’ll take
    things a step further and use Python’s primary plotting library, matplotlib, to
    produce attractive *3-D* simulations of spiral galaxies. Besides being fun, this
    project is a great way to present the concept of logarithmic spirals to students.
  prefs: []
  type: TYPE_NORMAL
- en: The Polar Equation for a Logarithmic Spiral
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Logarithmic* spirals are produced when natural objects grow geometrically.
    Some examples are galaxies, hurricanes, and pinecones. In the case of galaxies,
    these spirals are represented by the star-packed *spiral arms*.'
  prefs: []
  type: TYPE_NORMAL
- en: Because spirals radiate from a central point or *pole*, they can be graphed
    with *polar coordinates*. In this system, the (*x, y*) coordinates used in the
    more familiar Cartesian coordinate system are replaced by (*r,* Ɵ), where *r*
    is the distance from the pole (at 0, 0), and Ɵ (theta) is the angle measured counterclockwise
    from the x-axis.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e69f4225cac1548df350025c279c3e95.png)'
  prefs: []
  type: TYPE_IMG
- en: Example polar coordinate system (from “Impractical Python Projects” [2])
  prefs: []
  type: TYPE_NORMAL
- en: 'Using these terms, the polar equation for a logarithmic spiral is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b58ebfab4af1e7c476c69a98524a3767.png)'
  prefs: []
  type: TYPE_IMG
- en: where *e* is the base of natural logarithms, *a* is a scaling factor that controls
    the size, and *b* is a growth factor that controls the spiral’s “openness” and
    direction of growth.
  prefs: []
  type: TYPE_NORMAL
- en: The Programming Strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As in the previous article, we’ll model a four-armed spiral galaxy by using
    the logarithmic equation to draw a single spiral and then rotate and redraw the
    spiral three more times. To model the central core of the galaxy we’ll randomly
    distribute points in a sphere. To capture the “background glow” of the galaxy,
    we’ll randomly distribute small “stars” around the galactic disc.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, to make it all three-dimensional, we’ll randomly move stars in the
    galactic disc up and down a little, and then use matplotlib to display the results
    in a 3-D chart.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ll need matplotlib for this project. You can install it with either:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conda install matplotlib`'
  prefs: []
  type: TYPE_NORMAL
- en: or
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install matplotlib`'
  prefs: []
  type: TYPE_NORMAL
- en: The Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following code was written in JupyterLab and is described by cell. You can
    download the full script from this [Gist](https://gist.github.com/rlvaugh/a49bf875890581f338a000c2b5c3a2bb).
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries and Setting Up the Display
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For working with the logarithmic spiral equation and randomly shifting star
    locations we’ll use the `math`, `random`, and `numpy` libraries. For plotting
    we’ll use `matplotlib`.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll display the results in a *Qt* window, which will quickly update and let
    us zoom, pan, save, and so on. And since we’re working in outer space, we’ll set
    the plot’s background style to dark.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we’ll represent the radius of our galactic disc with a constant called
    `SCALE`. Values between 200 and 700 will give the best results. You can relate
    these to real-world units by using the Milky Way galaxy as a reference. The radius
    of the Milky Way is 50,000 light-years. So, using a `SCALE` value of 500 means
    each pixel on your screen will equal 50,000/500 = 100 light-years.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Defining a Function to Build a Spiral Arm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we’ll define a function to build a single spiral arm using the logarithmic
    spiral equation. This equation will draw a single curving line, but we’ll “flesh
    it out” by varying the size and location of stars (“fuzzing”), and by duplicating
    the spiral for each arm and shifting it slightly backward while shrinking its
    stars. This will create a bright “leading” edge and a dim “trailing” edge.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7ec00614194a6ad6abf54fb026c9439a.png)'
  prefs: []
  type: TYPE_IMG
- en: Filling out spiral arms by shifting spirals and changing star positions (from
    “Impractical Python Projects” [2])
  prefs: []
  type: TYPE_NORMAL
- en: The logarithmic spiral equation outputs points in two dimensions. To add 3-D
    “height” to our galaxy, we’ll create a `z` variable and assign it a random value
    scaled to the size of the galaxy (based on the `SCALE` constant).
  prefs: []
  type: TYPE_NORMAL
- en: The function will return a list of (x, y, z) locations for a single spiral arm.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: One thing to note here is that spiral galaxies are broad in the x and y directions
    but thin in the z-direction. Matplotlib’s default settings won’t handle this well,
    so, before plotting, we’ll manually limit the z-axis values to between -15 and
    15 (-20 to 20 also yields good results).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3e1a545fe6c3777a16e2c2d62fd89471.png)'
  prefs: []
  type: TYPE_IMG
- en: The galaxy simulation with the frame on. Note the vertical exaggeration used
    in the z-axis (by author)
  prefs: []
  type: TYPE_NORMAL
- en: I’m taking this exaggerated z-axis into account when scaling in the z-direction.
    Consequently, if you manually force all the axes to be the same scale, you may
    see some distortion.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning Spiral Arm Parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make a four-armed spiral galaxy, we’ll need to call the previous `build_spiral_stars()`function
    eight times (twice for each spiral to draw the leading and trailing edges). To
    prepare for this, let’s build a list of tuples that contain the last three arguments
    that we need to pass. Since the `b` parameter stays the same for each arm, we’ll
    just pass it directly when we call the function. The arguments I’m using were
    determined through trial and error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Defining a Function to Build the Spiral Arms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next function takes the `arms_info` list we just made, plus a value for
    `b`, and returns a list of all the stars in the leading edges of each of the four
    spirals, and a similar list for the trailing edges. We need separate lists as
    we’ll use a smaller marker size when plotting the trailing edges.
  prefs: []
  type: TYPE_NORMAL
- en: The function discriminates between leading and trailing edges by checking whether
    the `arms_info` index is odd or even.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Defining a Function to Generate Spherical Coordinates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While most of a spiral galaxy consists of a flattened disc, the center tends
    to “[bulge](https://en.wikipedia.org/wiki/Galactic_bulge)” out [3].
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d941553eb52c92383e3fbf596b46c10a.png)'
  prefs: []
  type: TYPE_IMG
- en: An artist’s impression of the central bulge of the Milky Way (by NASA via Wikimedia
    Commons [4])
  prefs: []
  type: TYPE_NORMAL
- en: To create a bulge in our simulation, we’ll define a function that generates
    a spherical cloud of points. It will accept arguments for the number of points
    we want plus a radius, and will then generate random x, y, and z points and return
    them as a list of tuples.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll generate the points using NumPy’s `random.normal()` function, which draws
    random samples from a normal distribution. It takes arguments for the mean, standard
    deviation, and output shape (dimensions). We’ll then multiply these points by
    the `radius` argument to scale them to the simulation.
  prefs: []
  type: TYPE_NORMAL
- en: To account for the vertical exaggeration in the matplotlib display, we’ll reduce
    the `z` values, found at index `[2]` in each `coords` tuple, by multiplying them
    by 0.02\. (This value is somewhat arbitrary; feel free to play with it).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Defining a Function to Build the Core Stars
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we’ll define a function that calls the previous function to build and
    return a list of coordinates for the outer and inner core. We’ll divide the core
    into two volumes to provide a visual gradation into the dense central area.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Defining a Function for Scattering Star Haze
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The space between the spiral arms isn’t devoid of stars, so we need a function
    to randomly cast points across the whole galactic model. Think of this as the
    “haze” or “glow” you see in photographs of galaxies.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll include scalars for the radius (`r_mult`) and z-value (`z_mult`). These
    will let us “thicken” the galactic disc towards the center by calling the function
    twice to generate “inner” and “outer” sets of points.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the impact of star haze versus no star haze:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6f8d2496f4668b8f4e243ba06b99964b.png)'
  prefs: []
  type: TYPE_IMG
- en: The impact of star haze on the galaxy simulation (by author)
  prefs: []
  type: TYPE_NORMAL
- en: Generating Star Coordinates and Plotting the Galaxy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following code completes the program by calling the functions that build
    the star coordinate lists and then passing them to matplotlib’s `scatter()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'To prepare the data for plotting, we use the splat operator (`*`) such as in
    `*zip(*leading_arm)`. This syntax unzips a list of tuples, effectively transposing
    rows into columns. Tuples are unpacked, and each element is passed as a separate
    argument to the `zip()` function. This creates separate tuples for the x, y, and
    z values, with the correct corresponding values in each tuple. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a_list = [(x1, y1, z1), (x2, y2, z2)]**'
  prefs: []
  type: TYPE_NORMAL
- en: '***zip(*a_list) => (x1, x2), (y1, y2), (z1, z2)**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e33087f15980784a9ca302eab7d3800b.png)'
  prefs: []
  type: TYPE_IMG
- en: Output of the program (by author)
  prefs: []
  type: TYPE_NORMAL
- en: That’s a nice-looking galaxy. I want to live there!
  prefs: []
  type: TYPE_NORMAL
- en: As you may have noticed, our code includes several parameters that you can use
    to tweak the output and indulge your inner artist.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, changing the `b` parameter in the `build_spiral_arms()` function
    changes the appearance of the leading and trailing arms. Here’s an example where
    `b` is set to `-0.5`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ea4eee459e1515f5f34f733e8487b11c.png)'
  prefs: []
  type: TYPE_IMG
- en: Output with b = -0.5 (by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Changing the `SCALE` constant affects the size of the galactic bulge. Here
    are some examples using different values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/345d8d31492de3d636c21d2f075c5b50.png)'
  prefs: []
  type: TYPE_IMG
- en: Profile views of the galaxy using different SCALE values (by author)
  prefs: []
  type: TYPE_NORMAL
- en: In the previous figure, notice how using light grey for the outer haze stars
    produces “dust belts” similar to those you see in profiles of real galaxies.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also change the marker styles. For example, if you want to use actual
    star shapes, add this snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Then pass `star` as the `marker` argument in the call to `ax.scatter()`. The
    `(6)` indicates the number of *vertices*. A value of 5 produces a five-pointed
    star and 6 produces six points.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bonus: Generating Globular Clusters'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ve finished the spiral galaxy project, but I would be remiss if I didn’t
    show you how to build an astronomical oddity called a [*globular cluster*](https://en.wikipedia.org/wiki/Globular_cluster)[5].These
    are spherical collections of stars that orbit most spiral galaxies such as our
    Milky Way. They are among the oldest features in a galaxy and can contain millions
    of tightly packed stars [6].
  prefs: []
  type: TYPE_NORMAL
- en: 'The function we defined to build the spherical core stars is perfect for building
    globular clusters, so why not use it? Here’s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/791f92c95984e50786d9d886001ea37b.png)'
  prefs: []
  type: TYPE_IMG
- en: A globular cluster simulation (by author)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Python, matplotlib, and a simple equation, we were able to easily generate
    3-D simulations of a spiral galaxy. Besides producing some neat digital art, this
    project is a great way to introduce logarithmic spirals to students in diverse
    fields of study including mathematics, astronomy, and programming.
  prefs: []
  type: TYPE_NORMAL
- en: Citations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Vaughan, L. (2023), “Create Galactic Art with Tkinter: Model Mother Nature
    with Logarithmic Spirals,” *Towards Data Science*, [https://towardsdatascience.com/create-galactic-art-with-tkinter-e0418a59b215](/create-galactic-art-with-tkinter-e0418a59b215).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Vaughan, Lee, 2018, [*Impractical Python Projects: Playful Programming Activities
    to Make You Smarter*](https://a.co/d/5e2NG9b), No Starch Press, San Francisco.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wikipedia contributors. (2023, October 3). Galactic bulge. In *Wikipedia, The
    Free Encyclopedia*. Retrieved 16:23, October 3, 2023, from [https://en.wikipedia.org/w/index.php?title=Galactic_bulge&oldid=1178373003](https://en.wikipedia.org/w/index.php?title=Galactic_bulge&oldid=1178373003).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ESO/NASA/JPL-Caltech/M. Kornmesser/R. Hurt, CC BY 4.0 <[https://creativecommons.org/licenses/by/4.0](https://creativecommons.org/licenses/by/4.0/)>,
    via Wikimedia Commons, [File:Artist’s impression of the central bulge of the Milky
    Way.jpg — Wikimedia Commons](https://commons.wikimedia.org/wiki/File:Artist%27s_impression_of_the_central_bulge_of_the_Milky_Way.jpg).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wikipedia contributors. (2023, September 24). Globular cluster. In *Wikipedia,
    The Free Encyclopedia*. Retrieved 00:56, October 4, 2023, from [https://en.wikipedia.org/w/index.php?title=Globular_cluster&oldid=1176809907](https://en.wikipedia.org/w/index.php?title=Globular_cluster&oldid=1176809907).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Vaughan, Lee, 2023, [*Python Tools for Scientists: An Introduction to Using
    Anaconda, JupyterLab, and Python’s Scientific Libraries*](https://a.co/d/e7ltmEN),
    No Starch Press, San Francisco.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Thanks!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for reading and please follow me for more *Quick Success Data Science*
    projects in the future.
  prefs: []
  type: TYPE_NORMAL
