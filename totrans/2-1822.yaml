- en: Securing your Containerised Models and Workloads
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护你的容器化模型和工作负载
- en: 原文：[https://towardsdatascience.com/securing-your-containerised-models-and-workloads-3bff4d90a07b](https://towardsdatascience.com/securing-your-containerised-models-and-workloads-3bff4d90a07b)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/securing-your-containerised-models-and-workloads-3bff4d90a07b](https://towardsdatascience.com/securing-your-containerised-models-and-workloads-3bff4d90a07b)
- en: Switch to a non-root user!
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切换到非根用户！
- en: '[](https://medium.com/@teosiyang?source=post_page-----3bff4d90a07b--------------------------------)[![Jake
    Teo](../Images/9687f43822fab69befb750a8ec58516d.png)](https://medium.com/@teosiyang?source=post_page-----3bff4d90a07b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3bff4d90a07b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3bff4d90a07b--------------------------------)
    [Jake Teo](https://medium.com/@teosiyang?source=post_page-----3bff4d90a07b--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@teosiyang?source=post_page-----3bff4d90a07b--------------------------------)[![Jake
    Teo](../Images/9687f43822fab69befb750a8ec58516d.png)](https://medium.com/@teosiyang?source=post_page-----3bff4d90a07b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3bff4d90a07b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3bff4d90a07b--------------------------------)
    [Jake Teo](https://medium.com/@teosiyang?source=post_page-----3bff4d90a07b--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3bff4d90a07b--------------------------------)
    ·8 min read·Oct 24, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3bff4d90a07b--------------------------------)
    ·阅读时间8分钟·2023年10月24日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Containerisation is now the *de facto* means of deploying many applications,
    with Docker being the forefront software driving its adoption. With its popularity
    also comes the increased risk of attacks [1]. Hence it will serve us well to secure
    our docker applications. The most fundamental means of doing this is to ensure
    that we set the user within our containers as a non-root user.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 容器化现在是部署许多应用程序的*事实上的*方法，其中Docker是推动其采用的前沿软件。随着其流行，也带来了攻击风险的增加 [1]。因此，我们需要确保保护我们的Docker应用程序。实现这一目标的最基本方法是确保我们在容器内设置非根用户。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Why use Non-Root?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要使用非根用户？
- en: Or rather, why not use the root user? Let’s take an example of a dummy architecture
    like the one below.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 或者说，为什么不使用根用户？让我们以下面的虚拟架构为例。
- en: '![](../Images/f13742acc9199c79964e30e62bc8eac1.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f13742acc9199c79964e30e62bc8eac1.png)'
- en: A hacker entering a container with root access. Image by author
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客进入一个具有根权限的容器。图片由作者提供
- en: 'Security is often viewed in a multi-layered approach. If an attacker manages
    to enter a container, the permissions it has as a user will be the first layer
    of defence. If the container user is assigned to have root access, the attacker
    can have free control of everything within the container. With such broad access,
    it can also exploit any potential vulnerabilities present and using that, potentially
    escape out to the host, and gain full access access to all connecting systems.
    The consequences are severe, including the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 安全通常被视为多层防御。如果攻击者设法进入容器，作为用户的权限将是第一道防线。如果容器用户被分配了根权限，攻击者就可以自由控制容器内的一切。凭借如此广泛的访问权限，攻击者还可以利用任何潜在的漏洞，并可能通过这些漏洞逃脱到主机，获得对所有连接系统的完全访问权限。后果非常严重，包括以下几点：
- en: retrieve the secrets stored
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检索存储的机密
- en: intercept and disrupt your traffic
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拦截并扰乱你的流量
- en: run malicious services like crypto-mining
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行恶意服务，如加密挖矿
- en: gain access to any connecting sensitive services like databases
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问任何连接的敏感服务，如数据库
- en: '![](../Images/1698de8e7b318fe8852897900e5f7418.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1698de8e7b318fe8852897900e5f7418.png)'
- en: The attacker can potentially transverse through your infrastructure services
    with root access. Image by author
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可能通过根权限横向渗透你的基础设施服务。图片由作者提供
- en: Damn, that sounds really scary! Well, the solution is simple, change your containers
    to a non-root user!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 真是太可怕了！不过解决方案很简单，将你的容器改为非根用户！
- en: '*Before we even go to the rest of the article, if you do not have a good grasp
    of Linux permissions and access rights, do take a look at my previous* [*article*](https://medium.com/@teosiyang/securing-linux-servers-with-two-commands-de5b565dc104)
    *[2].*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*在继续阅读本文之前，如果你对Linux权限和访问控制没有很好的理解，请查看我之前的* [*文章*](https://medium.com/@teosiyang/securing-linux-servers-with-two-commands-de5b565dc104)
    *[2]。*'
- en: What You Can & Cannot Do as a Default Non-Root User
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作为默认的非根用户，你可以做什么和不能做什么
- en: Let’s attempt to create a simple Docker application with a default non-root
    user. Use the `Dockerfile` below.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试创建一个具有默认非 root 用户的简单 Docker 应用程序。使用下面的`Dockerfile`。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Build the image and create a container with it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 构建镜像并使用它创建一个容器。
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now that you are inside the container, let’s try a few commands. So what are
    the things that you cannot do? You can see that all kinds of writing and installation
    permissions are not allowed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你在容器内，让我们尝试几个命令。那么你不能做哪些事情呢？你可以看到各种写入和安装权限都是不允许的。
- en: '![](../Images/495c8c4df0bda8034359b37a6672190e.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/495c8c4df0bda8034359b37a6672190e.png)'
- en: Things you cannot do as a default non-root user. Screenshot by author.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 作为默认的非 root 用户你不能做的事情。作者截图。
- en: On the opposite spectrum, we can run all kinds of read permissions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在相反的情况下，我们可以运行各种读取权限。
- en: '![](../Images/376c2dc54b91b1e90b06e88235e902d2.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/376c2dc54b91b1e90b06e88235e902d2.png)'
- en: Read commands are ok. Image by author
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 读取命令是可以的。作者图片
- en: Because we have python installed, it is a little unique. If we `ls -l $(which
    python)` we can see that the python interpreter has full permissions. Thus, it
    can execute existing python files like the `example.py` file we created initially
    in the `Dockerfile`. We can even enter into the python console and run simple
    commands. However, as other system write permissions have been removed when we
    switch to the non-root user, you can see that we cannot create and modify the
    scripts, or use python to run write commands.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们安装了 python，它有些独特。如果我们`ls -l $(which python)`，可以看到 python 解释器具有完全权限。因此，它可以执行像我们在`Dockerfile`中最初创建的`example.py`文件这样的现有
    python 文件。我们甚至可以进入 python 控制台并运行简单命令。然而，当我们切换到非 root 用户时，其他系统写入权限已被移除，因此你会看到我们无法创建和修改脚本，或使用
    python 执行写入命令。
- en: '![](../Images/a73482545f95e2efa3fc2e68d391bf71.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a73482545f95e2efa3fc2e68d391bf71.png)'
- en: Existing python scripts can be executed, but nothing else. Image by author
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 可以执行现有的 python 脚本，但其他操作则不可行。作者图片
- en: While system-wide restrictions are good for security, there will be many instances
    whereby write permissions for specific files and directories are required, and
    we need to cater for such allowances.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然系统范围的限制对安全性有好处，但在许多情况下，特定文件和目录的写入权限是必需的，我们需要考虑这些许可。
- en: In the following sections, I will give examples of four scenarios in a machine
    learning operations lifecycle. With these examples, one should be able to gain
    an understanding of how to implement for most other instances.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我将给出机器学习操作生命周期中的四种场景的示例。通过这些示例，可以了解如何实现大多数其他情况。
- en: The Four Scenarios
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 四种场景
- en: 1) Serve a Model from Host — Read Only
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1) 从主机服务模型 — 只读
- en: When serving a model, it involves an inference and serving script to load the
    model and expose it via an API (e.g., Flask, FastAPI) to accept inputs. The model
    is sometimes loaded from the host machine, and separated from the image so that
    the image size is optimally small, and any reload of the image will be optimally
    quick without repeated model downloads. The model is then passed into the container
    via a [bind-mount](https://docs.docker.com/storage/bind-mounts/)volume, to be
    loaded and served.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 服务模型时，它涉及到一个推理和服务脚本，用于加载模型并通过 API（例如 Flask、FastAPI）暴露它以接受输入。模型有时从主机加载，并与镜像分开，以使镜像大小尽可能小，任何重新加载镜像都将尽可能快速而不重复下载模型。然后，模型通过一个[bind-mount](https://docs.docker.com/storage/bind-mounts/)卷传递到容器中，以便加载和服务。
- en: '![](../Images/d2429a66f49352779768b059e20b622d.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d2429a66f49352779768b059e20b622d.png)'
- en: Serving a model only requires read permissions. Image by author
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 服务模型只需要读取权限。作者图片
- en: This is probably the least cumbersome way to implement a non-root user because
    only read permission is required, which by default is granted to all users. Below
    is a sample `Dockerfile` of how that is done.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是实现非 root 用户的最简单方法，因为只需要读取权限，而所有用户默认都被授予此权限。下面是一个如何完成的示例`Dockerfile`。
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It has two simple commands to first create a new system user called `nonroot`.
    Second, it is then switched from the root to the `nonroot`user just before the
    last `CMD` line. This is important as a default non-root user does not have any
    write and execute permissions, so it cannot install, copy or manipulate files
    that are required as seen in the earlier steps.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 它有两个简单的命令，首先创建一个名为`nonroot`的新系统用户。其次，在最后一行`CMD`之前，从 root 切换到`nonroot`用户。这一点很重要，因为默认的非
    root 用户没有任何写入和执行权限，因此不能安装、复制或操作在早期步骤中所需的文件。
- en: Now that we know how to assign a non-root user in Docker, let’s go to the next
    step.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何在 Docker 中分配非 root 用户，接下来我们进入下一步。
- en: '**2) Run Data Processing Pipelines — Write within Container**'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2) 运行数据处理管道 — 在容器内写入**'
- en: Sometimes, we just want to store temporary files to execute some jobs, let’s
    say, some data preprocessing work. This consists of adding and deleting files.
    We can do such tasks within the container since the files are not persistent.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们只是想存储临时文件以执行一些任务，例如，一些数据预处理工作。这包括添加和删除文件。我们可以在容器内完成这些任务，因为文件不是持久的。
- en: '![](../Images/9c3a138c2b9fa01285a44f72be81bbae.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9c3a138c2b9fa01285a44f72be81bbae.png)'
- en: Writing files. Image by author
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 写入文件。作者图片
- en: However, we will need write permissions if we are using a non-root user. To
    do that, we will need to use the command `chown` (change owner) and assign ownership
    to the `nonroot` user for the specific folder where write access is required.
    With that done, we can then switch the user to `nonroot` .
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用非 root 用户，我们需要写入权限。为此，我们需要使用命令`chown`（更改所有者）并将特定文件夹的所有权分配给`nonroot`用户。完成后，我们可以切换到`nonroot`用户。
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 3) Libraries Automatically Writing Files — Write within Container
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3) 库自动写入文件 — 在容器内写入
- en: The previous example shows how to write files which we created ourselves. However,
    it is also common for the libraries you use to create files and directories automatically.
    You will only know they are created when you try running the container and it
    is denied permission to write.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例展示了如何写入我们自己创建的文件。然而，库自动创建文件和目录也是很常见的。你只有在尝试运行容器时才会知道它们已被创建，并且被拒绝写入权限。
- en: I will show you two such examples, one from `supervisor`, which is used to manage
    multiple processes, and another from `huggingface-hub`, for downloading models
    from huggingface. Permission errors like these will be seen if we switch to a
    non-root user.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我将给你展示两个这样的示例，一个来自`supervisor`，用于管理多个进程，另一个来自`huggingface-hub`，用于从 huggingface
    下载模型。如果我们切换到非 root 用户，将会看到类似的权限错误。
- en: '![](../Images/17a5f1d2032ec06efbec72679a83a162.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/17a5f1d2032ec06efbec72679a83a162.png)'
- en: Supervisor prevented from creating a log file. Screenshot by author.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**Supervisor** 阻止了创建日志文件。作者截图。'
- en: '![](../Images/d3417206526641e6649a202d416e4b65.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d3417206526641e6649a202d416e4b65.png)'
- en: Supervisor prevented from storing pid in the file. Screenshot by author.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**Supervisor** 阻止了将 PID 存储在文件中。作者截图。'
- en: '![](../Images/c337cb2e7554b0f0f10d4b048a734c1b.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c337cb2e7554b0f0f10d4b048a734c1b.png)'
- en: Huggingface Hub prevented from downloading the model file. Screenshot by author.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**Huggingface Hub** 阻止了下载模型文件。作者截图。'
- en: For the two `supervisor` files, we can create them as empty files first, and
    assign ownership rights to them. For the `huggingface-hub` download issue, it
    has already been hinted in the error log that we can change the download directory
    via the `TRANSFORMERS_CACHE` variable, hence we can first assign the directory
    variable, create the directory, and then assign ownership.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于两个`supervisor`文件，我们可以先将它们创建为空文件，并赋予所有权。对于`huggingface-hub`的下载问题，错误日志中已提示我们可以通过`TRANSFORMERS_CACHE`变量更改下载目录，因此我们可以先设置目录变量，创建目录，然后分配所有权。
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Of course, there will be other examples that may slightly differ from what I
    show here, but the concept of allowing the least permissions to write will be
    the same.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还会有其他示例可能与我这里展示的略有不同，但允许最少写入权限的概念将是相同的。
- en: 4) Save Trained Models — Write to Host
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4) 保存训练好的模型 — 写入主机
- en: Let’s say we are using a container to train a model, and we want that model
    to be written to the host, e.g., to be picked up by another task for benchmarking
    or deployment. For this instance, we will need to write the model file out by
    linking a container directory to the host directory, also known as a bind mount.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们使用容器训练模型，并希望将该模型写入主机，例如，以便被另一个任务用于基准测试或部署。在这种情况下，我们需要通过将容器目录链接到主机目录来写入模型文件，这也称为绑定挂载。
- en: '![](../Images/3df3be7a331f921dfa24f3ec31b6f674.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3df3be7a331f921dfa24f3ec31b6f674.png)'
- en: Writing a model file out to the host. Image by author
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 将模型文件写入主机。作者图片
- en: First, we need to create a group and user for `nonroot`, specifying a unique
    ID for each, where for this case, we use `1001` (any number from 1000 is fine).
    Then, a model directory to store the model is created.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为`nonroot`创建一个组和用户，并为每个指定唯一的ID，在此情况下，我们使用`1001`（1000以上的任意数字都可以）。然后，创建一个模型目录来存储模型。
- en: A difference here compared to Scenario 2 is that `chown` is not required for
    the model directory to write. Why?
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 与情境2相比的不同之处在于，模型目录的写入不需要`chown`。为什么？
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is because **the permission of the bind-mounted directory is determined
    by the host directory**. Hence, we need to again create the same user in the host,
    ensuring that the user id is the same. The model directory is then created in
    the host and the `nonroot` user is granted the owner permissions.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为**绑定挂载目录的权限由主机目录决定**。因此，我们需要在主机中再次创建相同的用户，确保用户 ID 相同。然后在主机中创建模型目录，并将`nonroot`用户授予所有者权限。
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Bind mount is usually specified in the `docker-compose.yml` file or `docker
    run` command to enable more flexibility. Below is an example of the former.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定挂载通常在`docker-compose.yml`文件或`docker run`命令中指定，以启用更多灵活性。以下是前者的一个示例。
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And for the latter:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于后者：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Run either of them, and you will see that your non-root user can execute the
    script without any issues.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 运行其中之一，你会看到你的非根用户可以毫无问题地执行脚本。
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have seen how we can assign non-root user and still make the containers work
    with their desired tasks. This is mainly relevant when specific write permissions
    are required. We just need to know two fundamental concepts.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何分配非根用户并仍然使容器完成其所需任务。这主要在需要特定写入权限时相关。我们只需了解两个基本概念。
- en: For writing permissions in the container, `chown` in the `Dockerfile`
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在容器中进行写入权限的设置，可以使用`Dockerfile`中的`chown`。
- en: For writing permissions for a bind-mount, create the same non-root user in the
    host and `chown` in the host directory
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于绑定挂载的写入权限，请在主机中创建相同的非根用户，并在主机目录中使用`chown`。
- en: If you need to enter into the docker container and run some tests as a root
    user, we can use the following command.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要进入 Docker 容器并以 root 用户身份运行一些测试，我们可以使用以下命令。
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: References
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] Wong et al. (2023) [On the Security of Containers: Threat Modeling, Attack
    Analysis, and Mitigation Strategies](https://www.sciencedirect.com/science/article/abs/pii/S0167404823000500).
    *Computers & Security*, Vol. 128.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[1] Wong et al. (2023) [关于容器的安全性：威胁建模、攻击分析和缓解策略](https://www.sciencedirect.com/science/article/abs/pii/S0167404823000500)。*Computers
    & Security*，第128卷。'
- en: '[2] My previous post on Linux permissions and access rights: [https://medium.com/@teosiyang/securing-linux-servers-with-two-commands-de5b565dc104](https://medium.com/@teosiyang/securing-linux-servers-with-two-commands-de5b565dc104)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2] 我之前关于 Linux 权限和访问控制的文章：[https://medium.com/@teosiyang/securing-linux-servers-with-two-commands-de5b565dc104](https://medium.com/@teosiyang/securing-linux-servers-with-two-commands-de5b565dc104)'
