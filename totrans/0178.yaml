- en: A Comprehensive Guide to Building Enterprise-Level Plotly Dash Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/a-comprehensive-guide-to-building-enterprise-level-plotly-dash-apps-bd40dfe1313c](https://towardsdatascience.com/a-comprehensive-guide-to-building-enterprise-level-plotly-dash-apps-bd40dfe1313c)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Production ready web apps with pure Python and Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://tinztwinspro.medium.com/?source=post_page-----bd40dfe1313c--------------------------------)[![Janik
    and Patrick Tinz](../Images/a08aa54f553f606ef5df86f9411c36ac.png)](https://tinztwinspro.medium.com/?source=post_page-----bd40dfe1313c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bd40dfe1313c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bd40dfe1313c--------------------------------)
    [Janik and Patrick Tinz](https://tinztwinspro.medium.com/?source=post_page-----bd40dfe1313c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bd40dfe1313c--------------------------------)
    ·10 min read·May 15, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7de17ef1cc6ad4e71a3adb156a7deaa1.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Scott Graham](https://unsplash.com/@homajob?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Data Science projects always need some kind of visualisation. For the initial
    analysis, data scientists usually use Jupyter Notebooks and libraries like matplotlib
    or seaborn. In exploratory data analysis, data scientists use histograms, and
    scatter plots or make statistical evaluations. For the first insights, this approach
    is very well suited. However, interactive dashboards are more appropriate for
    presenting the results. Many clients want exactly that! Interactive dashboards
    are a proven approach to explaining results in an understandable and comprehensible
    way.
  prefs: []
  type: TYPE_NORMAL
- en: But creating an interactive dashboard is not a trivial task. In our view, Plotly
    Dash is the best choice for creating impressive diagrams. For a production-ready
    dashboard application, you must consider further aspects (e.g. deployment with
    Docker).
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we want to share our best practices for building a well structured
    dashboard application with Plotly Dash. In addition, we show how to deploy a Dash
    App cleanly with Docker. We are always open to suggestions for improvement. Please
    write your thoughts in the comments!
  prefs: []
  type: TYPE_NORMAL
- en: Why Plotly Dash?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Plotly Dash](https://dash.plotly.com/) is a productive Python Framework for
    building web-based applications. The Open Source library is licensed under the
    permissive MIT license. It is written on top of [Flask](https://flask.palletsprojects.com/en/2.2.x/),
    [Plotly.js](https://plotly.com/javascript/) and [React.js](https://react.dev/).
    You can create and deploy web apps with customised user interface (UI) in [Python](https://www.python.org/),
    [R](https://www.r-project.org/), [Julia](https://julialang.org/), and [F#](https://fsharp.org/).
    The framework abstracts the protocols and technologies needed to create a full-stack
    web app.'
  prefs: []
  type: TYPE_NORMAL
- en: Advantages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can implement the web interface in pure Python. No JavaScript is required!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dash is reactive! You can implement complex UIs with multiple Inputs, multiple
    Outputs and Inputs that depend on other Inputs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dash Apps are multi-user apps. Multiple users can view a Dash App with independent
    sessions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dash is written on top of React.js. You can implement and use your own Dash
    components with React.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dash Apps uses Flask as the backend, so you can run them using [Gunicorn](https://gunicorn.org/).
    Gunicorn allows you to scale a Dash App to thousands of users by increasing the
    number of worker processes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open Source Framework (licensed under the permissive MIT license).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Awesome documentation and community ([Dash Community Forum](https://community.plotly.com/)
    and [GitHub](https://github.com/plotly/dash)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disadvantages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Callbacks must have Inputs and Outputs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two callbacks can’t update the same output element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each framework has disadvantages, but the disadvantages of Dash can be solved
    with workarounds. The advantages outweigh the disadvantages!
  prefs: []
  type: TYPE_NORMAL
- en: Why Docker?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use [Docker](https://www.docker.com/) to isolate applications. It uses
    a concept called container virtualisation. Applications can be easily deployed
    with Docker because lightweight containers contain all the necessary packages.
    Containers share the services of a single operating system kernel, so they use
    fewer resources than virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: Docker makes it easy to deploy a Dash App. With Docker, you can deploy the Dash
    App to all architectures (amd64, i386, arm64, arm). This approach makes you independent
    of the deployment environment (on-premise or cloud).
  prefs: []
  type: TYPE_NORMAL
- en: Model View Controller Pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Model View Controller (MVC) is a pattern for dividing software into the three
    components: *Model*, *View* and *Controller*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5aabf677d5960e43d109608bf3c487bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Model View Controller Architecture (Image by authors)
  prefs: []
  type: TYPE_NORMAL
- en: The model component contains the business logic. This component communicates
    with a database or other backend components. The view component displays the data.
    It should be noted that the view has no direct connection to the model. The controller
    forms the connection. The controller is responsible for data processing. The controller
    updates the view with data from one or more models.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Parallel development**: The individual components can be implemented by different
    developers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability:** Multiple views for the same data model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Avoid complexity:** Division of the application into separate MVC units'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clean separation of the concepts:** Logical grouping of the specific tasks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disadvantages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Strong dependency between model and controller**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Best Practices: Project Structure for Dash Apps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We show you our best practices with an example Dash app. Feel free to use this
    example as the basis for your next Dash App.
  prefs: []
  type: TYPE_NORMAL
- en: We recommend working in a virtual environment (e.g. [conda](https://docs.conda.io/en/latest/)).Please
    install conda on your system.Create a virtual environment to keep your main system
    clean.
  prefs: []
  type: TYPE_NORMAL
- en: '**Create and activate the conda environment:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Web apps consist of many components and pages. We recommend that you divide
    the individual concepts into several folders and files. This approach simplifies
    the maintenance of the web app considerably.
  prefs: []
  type: TYPE_NORMAL
- en: '**We recommend the following structure:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We go through the individual folders and files in detail from top to bottom.
  prefs: []
  type: TYPE_NORMAL
- en: assets folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This folder contains the style information (e.g. CSS, JavaScript files or favicon.ico)
    of your Dash App. Dash automatically serves all files when you name the folder
    `assets`.
  prefs: []
  type: TYPE_NORMAL
- en: '**style.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the `style.py` file, we define the colour scheme of the app. A Python dictionary
    is a good choice. We can easily access the dictionary information from other files.
    For more style information, you can easily create another dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '**typography.css**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `typography.css` file contains the typography information.
  prefs: []
  type: TYPE_NORMAL
- en: components folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This folder contains all reusable components (e.g. dropdown, button or table).
    The advantage is that you can use these components on several pages.
  prefs: []
  type: TYPE_NORMAL
- en: '**dropdown.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: For the dropdown menu, we use the [Dash Core Components](https://dash.plotly.com/dash-core-components).
    We can use the function `render_dropdown()` whenever we need a dropdown menu.
    The advantage is that all dropdown menus have the same style.
  prefs: []
  type: TYPE_NORMAL
- en: '**navbar.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The navigation bar contains the links to the individual pages. For the navigation
    bar, we use the [Dash Bootstrap Components](https://dash-bootstrap-components.opensource.faculty.ai/docs/components/navbar/).
    You can design the `dbc.NavbarSimple()` component individually.
  prefs: []
  type: TYPE_NORMAL
- en: environment folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Different environments have different configuration files. There are Dev, Staging,
    Prod, and others. This folder contains the different environment files. In our
    case, we have a development (`.env_development`) and a production (`.env`) environment.
  prefs: []
  type: TYPE_NORMAL
- en: '**.env**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This file contains the production parameters. We use the `VERSION` parameter
    later in the web interface to see which environment is active.
  prefs: []
  type: TYPE_NORMAL
- en: '**.env_development**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This file contains the development parameters. The parameters `HOST`, `PORT`,
    and`DEBUG` will use for the local development server.
  prefs: []
  type: TYPE_NORMAL
- en: '**settings.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this file, we read the environment configurations. For this, we use the Python
    package [python-dotenv](https://pypi.org/project/python-dotenv/). First, we read
    the correct configuration file based on the environment variable `ENV_FILE`. For
    local development, we use `.env_development`. Via the `ENV_FILE` environment variable,
    we can define the corresponding environment. We set the `ENV_FILE` variable later
    in the Dockerfile. In our case, `.env` is the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: pages folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A web app usually consists of several pages. We recommend creating a folder
    for each page. Each page folder contains three files to apply the MVC pattern.
    A page has a model, view and controller file. So we have a clean separation of
    concepts.
  prefs: []
  type: TYPE_NORMAL
- en: '**dashboard/dashboard_controller.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The controller is the interface between the view and the model. The controller
    reacts to the events of the web interface. In addition, the controller obtains
    the data from the model. Finally, the controller returns the results to the web
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: '**dashboard/dashboard_model.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the `dashboard_model.py` file, we get the data via the built-in dataset gapminder
    of the package [plotly.express.data](https://plotly.com/python-api-reference/generated/plotly.express.data.html).
  prefs: []
  type: TYPE_NORMAL
- en: '**dashboard/dashboard_view.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this file, we define the appearance of the web interface. In this context,
    we use the dropdown menu and the navbar from the components folder.
  prefs: []
  type: TYPE_NORMAL
- en: '**page_not_found.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This page appears when a page is not found. For example, if you enter an incorrect
    path in the URL.
  prefs: []
  type: TYPE_NORMAL
- en: plots folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This folder contains the different plots of the app. We recommend creating a
    new file for each plot type.
  prefs: []
  type: TYPE_NORMAL
- en: '**map_plot.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We use [Plotly Express](https://plotly.com/python/plotly-express/) for the map
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: utils folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This folder contains helper functions and components that can be used in general.
    An example is a connector to other services (e.g. RESTful Services).
  prefs: []
  type: TYPE_NORMAL
- en: app.py
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In this file, we create the Dash instance with `dash.Dash()`. We have a dynamic
    layout which is why we set `suppress_callback_exceptions` to `True`. In addition,
    we use the FLATLY theme from the [Dash Bootstrap Components themes](https://dash-bootstrap-components.opensource.faculty.ai/docs/themes/explorer/).
  prefs: []
  type: TYPE_NORMAL
- en: index.py
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This file is the entry point of the Dash App. For Gunicorn, it is important
    to define `server = app.server`. That sets the Flask server for the app. The function
    `display_page()` will be triggered when the page changes. For the development
    environment, we pass `app.run_server()` the parameters from the dev environment
    file.
  prefs: []
  type: TYPE_NORMAL
- en: requirements.txt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This file contains all required dependencies. Please install the dependencies
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now we are ready to start the app.
  prefs: []
  type: TYPE_NORMAL
- en: Local Development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Navigate to the `dash-app` folder and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The Dash App starts. You can open the app at [http://127.0.0.1:7000](http://127.0.0.1:7000).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c4135fb819ffaae8a222572a9cd32cc7.png)'
  prefs: []
  type: TYPE_IMG
- en: Dashboard Dev Version (Screenshot by authors)
  prefs: []
  type: TYPE_NORMAL
- en: We can see the version number 1.0.0-dev that we set in the development environment.
    Dash provides debug information in the bottom right corner. The [Dash Dev Tools](https://dash.plotly.com/devtools)
    are enabled when developing your Dash App.
  prefs: []
  type: TYPE_NORMAL
- en: Dockerize the Dash App (Production Environment)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Note:* Please install [Docker](https://www.docker.com/get-started/) on your
    system.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dockerfile**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the Dockerfile, we create a user and a virtual environment. A virtual environment
    helps to keep control over the Python dependencies. It also keeps the difference
    between the local development environment and the container application small.
    The tutorial “[Elegantly activating a virtualenv in a Dockerfile](https://pythonspeed.com/articles/activate-virtualenv-dockerfile/)”
    by Itamar Turner-Trauring describes how to activate a virtual environment in a
    Dockerfile. Read it if you are interested! The virtual environment does not slow
    down the Dash application. Also, we are less likely to encounter strange bugs
    over time (e.g. changes at the operating system level). In the last line, we define
    the entry point. The host must be **0.0.0.0** so that the Dash App is accessible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can build the app with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now you can open the app at [http://0.0.0.0:7000](http://127.0.0.1:7000).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ccf4d39f204afc4c3f1424a43fa1bab4.png)'
  prefs: []
  type: TYPE_IMG
- en: Dashboard Prod Version (Screenshot by authors)
  prefs: []
  type: TYPE_NORMAL
- en: We can see the version number 1.0.0 that we set in the production environment
    file. Docker allows us to deploy the Dash application in a lightweight container
    independent of the environment in the cloud or on-premises.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we have presented a concept for structuring a Dash App. We
    showed how to apply the Model View Controller pattern to get a clean separation
    of concepts. This approach facilitates the maintenance of the Dash application.
    We also showed how to use different environments. Finally, we presented a clean
    way to deploy the Dash application in a Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: 👉🏽 [**Join our free weekly Magic AI newsletter for the latest AI updates!**](https://magicai.tinztwins.de)
  prefs: []
  type: TYPE_NORMAL
- en: 👉🏽 [**You can find all our Freebies on our digital products page!**](https://shop.tinztwins.de/)
  prefs: []
  type: TYPE_NORMAL
- en: '[**Subscribe for free**](https://tinztwinspro.medium.com/subscribe) **to get
    notified when we publish a new story:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://tinztwinspro.medium.com/subscribe?source=post_page-----bd40dfe1313c--------------------------------)
    [## Get an email whenever Janik and Patrick Tinz publishes.'
  prefs: []
  type: TYPE_NORMAL
- en: Get an email whenever Janik and Patrick Tinz publishes. By signing up, you will
    create a Medium account if you don’t…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: tinztwinspro.medium.com](https://tinztwinspro.medium.com/subscribe?source=post_page-----bd40dfe1313c--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about us on our [About page](https://medium.com/@tinztwinspro/about).
    Don’t forget to follow us on [X](https://twitter.com/tinztwins). Thanks so much
    for reading. If you liked this article, feel free to share it. **Have a great
    day!**
  prefs: []
  type: TYPE_NORMAL
- en: Sign up for a Medium membership using [our link](https://tinztwinspro.medium.com/membership)
    to read unlimited Medium stories.
  prefs: []
  type: TYPE_NORMAL
