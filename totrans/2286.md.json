["```py\nMEAN_F, STD_F = 5, 1\nMEAN_P, STD_P = 9, 2\nMEAN_Q, STD_Q = 5.8, 1\n\ndef normal_dist(\n    mean: float, standard_deviation: float, x: np.ndarray\n) -> np.ndarray:\n    return (\n        1\n        / (standard_deviation * np.sqrt(2 * np.pi))\n        * np.exp(-0.5 * ((x - mean) / standard_deviation) ** 2)\n    )\n\nf = partial(normal_dist, MEAN_F, STD_F)\np = partial(normal_dist, MEAN_P, STD_P)\nq = partial(normal_dist, MEAN_Q, STD_Q)\n```", "```py\nx = np.linspace(0, 15, 100)\nplt.plot(x, f(x), \"b-\", label=\"f\")\nplt.plot(x, p(x), \"r-\", label=\"p\")\nplt.plot(x, q(x), \"y-\", label=\"q\")\nplt.legend()\nplt.show()\n```", "```py\nx_p = np.random.normal(loc=MEAN_P, scale=STD_P, size=NUM_SAMPLES)\ny_p = f(x_p)\n```", "```py\nx_q = np.random.normal(loc=MEAN_Q, scale=STD_Q, size=NUM_SAMPLES)\ny_q = f(x_q) * p(x_q) / q(x_q)\n```", "```py\nfrom functools import partial\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nNUM_SAMPLES = 1000000\nMEAN_F, STD_F = 5, 1\nMEAN_P, STD_P = 9, 2\nMEAN_Q, STD_Q = 5.8, 1\n\ndef normal_dist(\n    mean: float, standard_deviation: float, x: np.ndarray\n) -> np.ndarray:\n    return (\n        1\n        / (standard_deviation * np.sqrt(2 * np.pi))\n        * np.exp(-0.5 * ((x - mean) / standard_deviation) ** 2)\n    )\n\nf = partial(normal_dist, MEAN_F, STD_F)\np = partial(normal_dist, MEAN_P, STD_P)\nq = partial(normal_dist, MEAN_Q, STD_Q)\n\nx = np.linspace(0, 15, 100)\nplt.plot(x, f(x), \"b-\", label=\"f\")\nplt.plot(x, p(x), \"r-\", label=\"p\")\nplt.plot(x, q(x), \"y-\", label=\"q\")\nplt.legend()\nplt.show()\n\nx_p = np.random.normal(loc=MEAN_P, scale=STD_P, size=NUM_SAMPLES)\ny_p = f(x_p)\n\nx_q = np.random.normal(loc=MEAN_Q, scale=STD_Q, size=NUM_SAMPLES)\ny_q = f(x_q) * p(x_q) / q(x_q)\n\nprint(\n    f\"Original mean / variance: {np.mean(y_p):.6f} / {np.var(y_p):.6f}\"\n)\nprint(\n    f\"Importance sampling mean / variance: {np.mean(y_q):.6f} / {np.var(y_q):.6f}\"\n)\n```"]