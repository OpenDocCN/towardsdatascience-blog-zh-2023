["```py\nimport pandas as pd\nfrom matplotlib.patches import Polygon\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport matplotlib.patheffects as PathEffects\n```", "```py\nfont_family = \"Work sans\"\nbackground_color = \"#E0E9F5\"\n\nsns.set_style({\n    \"axes.facecolor\": background_color,\n    \"figure.facecolor\": background_color,\n    \"font.family\": font_family,\n})\n```", "```py\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/oscarleoo/matplotlib-tutorial-data/main/us_election_2020.csv\"\n)\n```", "```py\ndef get_hexagon_corners(row, width, height):\n    cx, cy = row.x, row.y\n    w2, h4 = width / 2, height / 4\n    x = [cx, cx+w2, cx+w2, cx, cx-w2, cx-w2]\n    y = [cy-2*h4, cy-h4, cy+h4, cy+2*h4, cy+h4, cy-h4]\n    return list(zip(x, y))\n```", "```py\ndef draw_hexagon(ax, row, scale=1):\n    width = 3 * scale\n    height = 4 * scale\n\n    xy = get_hexagon_corners(row, width, height)\n    b_hexagon = Polygon(xy=xy, closed=True, facecolor=\"#000000\", edgecolor=\"#000\", linewidth=4)\n    ax.add_artist(b_hexagon)\n\n    # Additional functions\n```", "```py\nfig, ax = plt.subplots(figsize=(20, 20))\nax.set(xlim=(0, 37), ylim=(0, 27))\n\nfor i, row in df.iterrows():\n    draw_hexagon(ax, row, scale=0.9)\n\nax.set_aspect(0.9, adjustable='box')\nplt.axis(\"off\")\nplt.show()\n```", "```py\ndef get_boundries(row, width, height):\n    x_min = row.x - width / 2\n    x_max = row.x + width / 2\n    y_min = row.y - height / 2\n    y_max = row.y + height / 2\n    return x_min, x_max, y_min, y_max\n```", "```py\ndef fill_hexagon(row, width, height, ratio, top=True):\n    x_min, x_max, y_min, y_max = get_boundries(row, width, height)\n\n    y = ratio * height\n    y = y_max - y if top else y_min + y\n    y_start = y_max if top else y_min\n    h4 = height / 4 if top else - (height / 4)\n\n    if ratio < 0.25:\n        x_shift = 2 * ratio * width\n        x = [row.x-x_shift, row.x, row.x+x_shift]\n        y = [y, y_start, y]\n    elif ratio < 0.75:\n        x = [x_min, x_min, row.x, x_max, x_max]\n        y = [y, row.y + h4, y_start, row.y + h4, y]\n    else:\n        x_shift = 2 * (1 - ratio) * width\n        x = [row.x-x_shift, x_min, x_min, row.x, x_max, x_max, row.x+x_shift]\n        y = [y, row.y - h4, row.y + h4, y_start, row.y + h4, row.y - h4, y]\n\n    return list(zip(x, y))\n```", "```py\ndef draw_hexagon(ax, row, edgecolor=\"#000\", scale=1):\n    width = 3 * scale\n    height = 4 * scale\n\n    xy = get_hexagon_corners(row, width, height)\n    b_hexagon = Polygon(xy=xy, closed=True, facecolor=\"#000000\", edgecolor=\"#000\", linewidth=4)\n    ax.add_artist(b_hexagon)\n\n    # Additional functions\n    d_ratio = row.democrat / row.total\n    r_ratio = row.republican / row.total\n\n    d_hexagon = Polygon(xy=fill_hexagon(row, width, height, d_ratio, top=False), closed=True, facecolor=\"blue\")\n    r_hexagon = Polygon(xy=fill_hexagon(row, width, height, r_ratio, top=True), closed=True, facecolor=\"red\")\n\n    ax.add_artist(d_hexagon)\n    ax.add_artist(r_hexagon)\n```", "```py\ndef add_text(row):\n    center = (row.x, row.y - 0.2)\n    d_ratio = row.democrat / row.total\n    r_ratio = row.republican / row.total\n    o_ratio = row.other / row.total\n\n    a1 = plt.annotate(row.state, center, ha=\"center\", va=\"bottom\", fontsize=26, fontweight=\"bold\", color=\"w\")\n    a2 = plt.annotate(\"{:.0f}/{:.0f}/{:.0f}\".format(100 * d_ratio, 100 * r_ratio, 100 * o_ratio), (center[0], center[1] - 0.12), ha=\"center\", va=\"top\", fontsize=14, fontweight=\"bold\", color=\"w\")\n    a1.set_path_effects([PathEffects.withStroke(linewidth=1, foreground=\"#000000\")])\n    a2.set_path_effects([PathEffects.withStroke(linewidth=1, foreground=\"#000000\")])\n```", "```py\nfig, ax = plt.subplots(figsize=(20, 20))\nax.set(xlim=(0, 37), ylim=(0, 27))\n\nfor i, row in df.iterrows():\n    draw_hexagon(ax, row, scale=0.9)\n    add_text(row)\n\nplt.annotate(\"2020\", xy=(0.5, 0.93), fontsize=96, xycoords=\"axes fraction\", ha=\"center\", va=\"center\", fontweight=\"bold\", color=\"#000\")\n\nax.set_aspect(0.9, adjustable='box')\nplt.axis(\"off\")\nplt.show()\n```"]