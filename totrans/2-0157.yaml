- en: A Beginner’s Guide to Linear Programming and the Simplex Algorithm
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/a-beginners-guide-to-linear-programming-and-the-simplex-algorithm-87db017e92b4](https://towardsdatascience.com/a-beginners-guide-to-linear-programming-and-the-simplex-algorithm-87db017e92b4)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/3a703168db41392764a4e5273ef4a826.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: Farm with corn. Still life by Dall-E 2.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Tackling a wide range of optimization problems
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://hennie-de-harder.medium.com/?source=post_page-----87db017e92b4--------------------------------)[![Hennie
    de Harder](../Images/3e4f2cccd6cb976ca3f8bf15597daea8.png)](https://hennie-de-harder.medium.com/?source=post_page-----87db017e92b4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----87db017e92b4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----87db017e92b4--------------------------------)
    [Hennie de Harder](https://hennie-de-harder.medium.com/?source=post_page-----87db017e92b4--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----87db017e92b4--------------------------------)
    ·8 min read·Jan 9, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '**Linear programming is a powerful tool. It has applications in a wide range
    of fields, including engineering, finance, and operations research. Linear programming
    has been used to solve problems as diverse as scheduling airline flights and designing
    manufacturing processes. In this blog post, we will explore the basics of linear
    programming and how it can be used to solve practical problems.**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Linear programming (LP) is a mathematical optimization technique. It is used
    to find the optimal solution to problems involving multiple variables and constraints.
    By representing the constraints and objective function of a problem as a system
    of linear equations and inequalities, linear programming algorithms can systematically
    search the solution space and identify solutions that maximize or minimize a given
    objective.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: First, I’ll give a simple example. Then we’ll dive into the simplex algorithm,
    which is used in the background to find the optimal solution of LP problems fast.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Example of a Linear Programming Problem
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Suppose a farmer has 120 acres of land on which to grow two crops: wheat and
    corn. Wheat requires 2 acres of land per ton, and corn requires 1 acre of land
    per ton. The farmer wants to maximize the profit from the crops, which is €100
    per ton of wheat and €150 per ton of corn. The farmer also has a limit of 50 tons
    of wheat and 40 tons of corn that can be produced.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: To solve this problem using linear programming, we first need to identify the
    decision variables, which are the quantities of wheat and corn that the farmer
    will grow. We will use the variables *w* and *c* to represent the number of tons
    of wheat and corn, respectively.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to write the objective function, which represents the profit
    that the farmer wants to maximize. In this case, the objective function is:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要编写目标函数，它表示农民想要最大化的利润。在这种情况下，目标函数是：
- en: '![](../Images/299feb2638791c12718067f5f3da2c81.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/299feb2638791c12718067f5f3da2c81.png)'
- en: 'Then, we need to write the constraints, which represent the limits on the quantities
    of wheat and corn that can be produced. The constraints are:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要编写约束条件，这些条件代表了可以生产的小麦和玉米的数量限制。约束条件如下：
- en: '![](../Images/b6c87024b5b6c73c8d69e21151a8d3a9.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b6c87024b5b6c73c8d69e21151a8d3a9.png)'
- en: The first two constraints represent the limits on the total number of tons of
    wheat and corn that can be produced. The third constraint represents the limit
    on the total amount of land that is available.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个约束条件表示可以生产的小麦和玉米总吨数的限制。第三个约束条件表示可用土地总面积的限制。
- en: To solve the problem, we can use the simplex algorithm or another linear programming
    method to find the values of *w* and *c* that maximize the objective function
    subject to the constraints. In this case, the optimal solution would be to grow
    40 tons of wheat and 40 tons of corn, which would yield a profit of €10,000.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们可以使用简单形算法或其他线性规划方法来寻找最大化目标函数的* w* 和 * c* 的值，同时满足约束条件。在这种情况下，最优解是种植40吨小麦和40吨玉米，这样可以获得€10,000的利润。
- en: This is just a simple example to illustrate the basic steps of solving a linear
    programming problem. In practice, linear programming is used to solve much more
    complex problems with many more variables and constraints.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个简单的例子，用来说明解决线性规划问题的基本步骤。在实际应用中，线性规划用于解决更多变量和约束条件的复杂问题。
- en: 'Below, a visualization of the problem:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是问题的可视化：
- en: '![](../Images/abb8d5021bb14f56b66ca9ca55abb489.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/abb8d5021bb14f56b66ca9ca55abb489.png)'
- en: Linear programming visualization. Image by author.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 线性规划可视化。图片由作者提供。
- en: The grey area is called the feasible region. Every point in the area contains
    a feasible solution. The area is bounded by the constraints.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 灰色区域称为可行区域。区域中的每一个点都包含一个可行解。该区域受约束条件的限制。
- en: The [fundamental theorem of linear programming](https://en.wikipedia.org/wiki/Fundamental_theorem_of_linear_programming)
    states that the maxima occur at the region’s corners. This is important information
    the simplex algorithm uses.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[线性规划基本定理](https://en.wikipedia.org/wiki/Fundamental_theorem_of_linear_programming)
    说明了最大值出现在区域的角落。这是简单形算法使用的重要信息。'
- en: The Simplex Algorithm
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单形算法
- en: The simplex algorithm is a widely used method for solving linear programming
    problems. It was developed by George Dantzig in 1947\. The intuition behind the
    algorithm is to ‘walk’ from corner to corner in the feasible region space in a
    systematic way. When the optimal solution is found, the process stops.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 简单形算法是一种广泛使用的解决线性规划问题的方法。它由乔治·丹茨格于1947年开发。该算法的直观思路是以系统的方式从可行区域的角落“行走”。当找到最优解时，过程结束。
- en: 'The simplex algorithm is an iterative process that relies on mathematical calculations
    and logical reasoning to find the optimal solution to a linear programming problem.
    It is efficient and reliable and also used in mixed integer programming (after
    relaxation of the constraints). The basic steps of the simplex algorithm are as
    follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 简单形算法是一个迭代过程，依靠数学计算和逻辑推理来找到线性规划问题的最优解。它高效可靠，也用于混合整数规划（在约束条件放松后）。简单形算法的基本步骤如下：
- en: Convert the constraints of the linear programming problem into a system of linear
    equations, the standard form.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将线性规划问题的约束条件转化为线性方程组的标准形式。
- en: Find a basic feasible solution by setting some of the variables to zero and
    solving for the remaining variables.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将一些变量设置为零，并求解其余变量，找到一个基本可行解。
- en: Test the basic feasible solution to see if it is optimal. If it is, the algorithm
    is finished. If not, the algorithm selects a variable to enter the basis, and
    updates the basic feasible solution accordingly.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试基本可行解是否最优。如果是，算法结束。如果不是，算法选择一个变量进入基准，并相应更新基本可行解。
- en: Repeat step 3 until the optimal solution is found.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤3，直到找到最优解。
- en: Let’s walk through the steps one by one using the wheat and corn example.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步走过小麦和玉米的例子。
- en: '**Step 1\. Convert the constraints of the linear programming problem into a
    system of linear equations, the standard form.** The first step is rewriting the
    constraints and objective in standard form:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 1\. 将线性规划问题的约束转换为线性方程组，即标准形式。** 第一步是将约束和目标重写为标准形式：'
- en: '![](../Images/96a1db95ef346f4f30b5a60983ad7206.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/96a1db95ef346f4f30b5a60983ad7206.png)'
- en: Rewriting to standard form. Image by author.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 重写为标准形式。图片由作者提供。
- en: In the standard form, the ‘smaller than’ signs are replaced by equal signs,
    and every constraint has a slack variable added (s1, s2, s3). In this way, smaller
    than is still maintained because the slack variables can only get positive values.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在标准形式中，“小于”符号被替换为等号，并且每个约束都有一个松弛变量添加（s1、s2、s3）。这样，小于仍然得以保持，因为松弛变量只能取得正值。
- en: 'Often, a tableau is used to make the problem more readable. A tableau is a
    table in which we write down the coefficients. A column represents a variable
    and a row a constraint. In this case the bottom row contains the coefficients
    of the objective. The final column holds the values on the right hand side of
    the equations. We use the standard form to create the tableau:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，表格用于使问题更具可读性。表格是一个我们写下系数的表格。列代表一个变量，行代表一个约束。在这种情况下，底部行包含目标函数的系数。最后一列包含方程右侧的值。我们使用标准形式来创建表格：
- en: '![](../Images/8e1a05e0b39d246c15b6b51b0e6e4b33.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8e1a05e0b39d246c15b6b51b0e6e4b33.png)'
- en: The tableau for the corn and wheat problem. Every constraint and the objective
    are represented in the rows, while the columns represent the variables. The values
    are the coefficients. Image by author.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 玉米和小麦问题的表格。每个约束和目标都在行中表示，而列表示变量。值是系数。图片由作者提供。
- en: '**Step 2\. Find a basic feasible solution by setting some of the variables
    to zero and solving for the remaining variables.** Now that we have the tableau,
    we can use it to find a basic feasible solution. A basic feasible solution is
    a solution that satisfies all the constraints and lies on a vertex. We can easily
    detect one from the tableau.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 2\. 通过将某些变量设置为零并求解其余变量来找到一个基本可行解。** 现在我们有了表格，我们可以使用它来找到一个基本可行解。基本可行解是一个满足所有约束并位于一个顶点上的解。我们可以很容易地从表格中检测到一个。'
- en: 'In the tableau, there are two types of variables: *basic variables* and *non-basic
    variables*. Basic variables have only one non-zero entry, and non-basic variables
    have more than one non-zero entry. The *basis* contains all basic variables. If
    we look at the current state of the tableau, the slack variables *s₁*, *s₂* and
    *s₃* are in the basis. The variables w and c are non-basic and set to zero. The
    current basic feasible solution has the following values: *s₁* = 50, *s₂* = 40,
    *s₃* = 120, *Z* = 0, *w* = 0 and *c* = 0.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在表格中，有两种类型的变量：*基本变量* 和 *非基本变量*。基本变量只有一个非零项，而非基本变量有多个非零项。*基变量* 包含所有基本变量。如果我们查看当前的表格状态，松弛变量
    *s₁*、*s₂* 和 *s₃* 在基变量中。变量 w 和 c 是非基本的，并被设置为零。当前基本可行解的值为：*s₁* = 50，*s₂* = 40，*s₃*
    = 120，*Z* = 0，*w* = 0 和 *c* = 0。
- en: '![](../Images/24905ad633a8047300943ed6d2e8808e.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/24905ad633a8047300943ed6d2e8808e.png)'
- en: Non-basic and basic variables. Image by author.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 非基本变量和基本变量。图片由作者提供。
- en: 'This solution corresponds to the following corner point:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 该解对应于以下角点：
- en: '![](../Images/978e835c6d35d5965f354dbeb54a8503.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/978e835c6d35d5965f354dbeb54a8503.png)'
- en: Starting point of the simplex algorithm. Image by author.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 单纯形算法的起点。图片由作者提供。
- en: '**Step 3\. Test the basic feasible solution to see if it is optimal. If it
    is, the algorithm is finished. If not, the algorithm selects a variable to enter
    the basis, and updates the basic feasible solution accordingly.** Testing if the
    basic feasible solution is optimal is possible by looking at the objective row
    in the tableau. Because this is a maximization problem, we can improve it by removing
    the negative coefficients. We can’t improve anymore if all negative values are
    gone. There are negative values in the bottom row, so improvement is possible
    and we didn’t found the optimal solution yet.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 3\. 测试基本可行解是否最优。如果是，则算法结束。如果不是，算法选择一个变量进入基变量，并相应地更新基本可行解。** 通过查看表格中的目标行，可以测试基本可行解是否最优。由于这是一个最大化问题，我们可以通过去除负系数来改进它。如果所有负值都消失了，我们就无法再改进了。底部行中存在负值，因此可以改进，我们尚未找到最优解。'
- en: '![](../Images/92704ccd5c16c60bdd1d7319641d3462.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/92704ccd5c16c60bdd1d7319641d3462.png)'
- en: Selecting the entering variable based on the negative values of the objective
    row. Image by author.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 根据目标行中的负值选择进入变量。图像由作者提供。
- en: 'Now, we need to select a variable for entering the basis. To select the entering
    variable, take the lowest coefficient in the objective row. In our case, it’s
    -150 corresponding to *c.* This is the entering variable. Then, we need to select
    the row to perform [Gaussian elimination](https://en.wikipedia.org/wiki/Gaussian_elimination).
    This is done by dividing the RHS values by the coefficients of *c*. So in our
    case we got 40/1=40 for the second row and 120/1=120 for the third row. The lowest
    value is 40, and that’s the reason why the second row is used. Now we can wipe
    the table with row 2, to include *c* in the basis:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要选择一个变量进入基。选择进入变量时，取目标行中最低的系数。在我们的例子中，它是 -150，对应于 *c*。这就是进入变量。接着，我们需要选择要进行[高斯消元](https://en.wikipedia.org/wiki/Gaussian_elimination)的行。这是通过将右侧值除以
    *c* 的系数来完成的。因此，在我们的例子中，第二行得到40/1=40，第三行得到120/1=120。最低值是40，这就是为什么使用第二行。现在我们可以用第2行清除表格，以将
    *c* 包括在基中：
- en: '![](../Images/7e8cf7a076b8ee1876cc6dd68094cf94.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7e8cf7a076b8ee1876cc6dd68094cf94.png)'
- en: 'Performing Guassian elimination to let variable c enter the basis: subtracting
    row 2 from row 3, adding 150 times row 2 to row 4\. Image by author.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 执行高斯消元以使变量`c`进入基：从第3行中减去第2行，将第2行乘以150后加到第4行。图像由作者提供。
- en: 'The new objective value is 6000, and the variables in the basis are *c*, *s₁*
    and *s₃*, equal to 40, 50 and 80 respectively. We moved to a new corner point,
    the next basic feasible solution:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 新的目标值是6000，基中的变量是 *c*、*s₁* 和 *s₃*，分别为40、50和80。我们移动到一个新的角点，即下一个基本可行解：
- en: '![](../Images/450df0f35155b0850fd8d4db4d69ec4e.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/450df0f35155b0850fd8d4db4d69ec4e.png)'
- en: Now we moved to the next feasible solution (down right corner). Image by author.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们转到下一个可行解（右下角）。图像由作者提供。
- en: '**Step 4\. Repeat step 3 until the optimal solution is found.** The optimal
    solution isn’t found, because there is a negative value in the objective row of
    the tableau. So let’s repeat step 3: The entering variable is *w*, because it
    has the lowest coefficient in the objective row. The row we should use for Gaussian
    elimination is row 3, because 80/2 < 50/1\. After row reduction, the tableau looks
    like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**第4步。重复第3步，直到找到最优解。** 由于表格的目标行中有负值，因此未找到最优解。所以让我们重复第3步：进入变量是 *w*，因为它在目标行中有最低的系数。我们应该使用第3行进行高斯消元，因为80/2
    < 50/1。经过行简化，表格如下：'
- en: '![](../Images/1c1f0a1c83f12a5cb825b358ad1a6b34.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1c1f0a1c83f12a5cb825b358ad1a6b34.png)'
- en: Let w enter the basis, divide row 3 by 2, subtract this new row 3 from row 1,
    adding 100 times row 3 to row 4\. Image by author.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让 *w* 进入基，将第3行除以2，从第1行中减去这一新行3，将第3行乘以100后加到第4行。图像由作者提供。
- en: 'The variables in the basis are *w*, *c* and *s₁* with corresponding values
    of 40, 40 and 10, respectively. The value of *Z* (objective) is equal to 10000\.
    This is exactly the optimal solution we had in the beginning. There are no negative
    entries in the bottom row, so this is the optimal solution. The steps we took:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 基中的变量是 *w*、*c* 和 *s₁*，对应的值分别为40、40和10。*Z*（目标）的值等于10000。这正是我们一开始得到的最优解。底行中没有负值，所以这是最优解。我们采取的步骤：
- en: '![](../Images/2c0dab8bbb144e491aa82f878b90b1f3.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2c0dab8bbb144e491aa82f878b90b1f3.png)'
- en: Steps we took during solving the problem with the simplex algorithm. Starting
    at the bottom left, taking two steps to end at the optimal solution. Image by
    author.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用单纯形算法解决问题时所采取的步骤。从左下角开始，走两步到达最优解。图像由作者提供。
- en: This is an easy example of how the simplex algorithm works. It is used to solve
    more complex problems than the one we discussed here.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的单纯形算法工作原理的例子。它用于解决比我们讨论的更复杂的问题。
- en: Conclusion
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Linear programming is a tool that can help individuals and organizations make
    the most of their resources and achieve their goals. Whether you are a business
    owner trying to maximize profit, a researcher seeking to optimize a complex process,
    or a student learning about optimization techniques, linear programming offers
    a wide range of applications and opportunities for growth. By understanding the
    principles of linear programming and the simplex algorithm, you can take the first
    step towards solving a variety of optimization problems and making informed decisions
    that can have a lasting impact.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: When applying these techniques in practice, you don’t have to implement the
    algorithm, because optimization software does that for you.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: The simplex algorithm is also applied in mixed integer programming, where relaxation
    of constraints makes it possible to apply the algorithm. If you want to learn
    more, you can read the articles below.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-handle-optimization-problems-daf97b3c248c?source=post_page-----87db017e92b4--------------------------------)
    [## How to Handle Optimization Problems?'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Easy examples with solutions and code.
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-handle-optimization-problems-daf97b3c248c?source=post_page-----87db017e92b4--------------------------------)
    [](/mathematical-optimization-heuristics-every-data-scientist-should-know-b26de0bd43e6?source=post_page-----87db017e92b4--------------------------------)
    [## Mathematical Optimization Heuristics Every Data Scientist Should Know
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Local search, genetic algorithms and more.
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/mathematical-optimization-heuristics-every-data-scientist-should-know-b26de0bd43e6?source=post_page-----87db017e92b4--------------------------------)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
