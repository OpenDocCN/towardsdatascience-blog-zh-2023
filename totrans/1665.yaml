- en: Plotting Venn Diagrams in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/plotting-venn-diagrams-in-python-6c55e0d78e57](https://towardsdatascience.com/plotting-venn-diagrams-in-python-6c55e0d78e57)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn how to use venn diagrams to show the relationships between two or more
    sets of data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/?source=post_page-----6c55e0d78e57--------------------------------)[![Wei-Meng
    Lee](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----6c55e0d78e57--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6c55e0d78e57--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6c55e0d78e57--------------------------------)
    [Wei-Meng Lee](https://weimenglee.medium.com/?source=post_page-----6c55e0d78e57--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6c55e0d78e57--------------------------------)
    ·8 min read·Feb 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2ed9f5f1ccb1be0bc142682d0a50dda0.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Dustin Humes](https://unsplash.com/@dustinhumes_photography?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'In data visualization, most of the charts that we generate belongs to one or
    more of the following types:'
  prefs: []
  type: TYPE_NORMAL
- en: Bar chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pie chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Histogram
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time Series
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, one type of chart that is not commonly used is a **Venn diagram**.
    A **Venn diagram** is another type of visualization that is way too under-rated.
    It is actually a very useful form of visualization that allows you to examine
    the relationships between two different sets of data. For example, the following
    Venn diagram shows the relationship between two sets of creatures — Set A (left
    circle; creatures with two legs) and B (right circle; creatures that fly). The
    overlapping region contains those creatures that are two-legged and can fly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aa03f8a417428d010024c735ad872a4f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [https://en.wikipedia.org/wiki/Venn_diagram#/media/File:Venn_diagram_example.png](https://en.wikipedia.org/wiki/Venn_diagram#/media/File:Venn_diagram_example.png)'
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I will show you how to plot a Venn diagram from a sample dataset.
    I will also show you how to customize the Venn diagram to modify its look-and-feel.
  prefs: []
  type: TYPE_NORMAL
- en: So let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing the matplotlib-venn package**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use the `pip` command to install the `matplotlib-venn` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the dataset, I have created a fictitious dataset file named **purchases.csv**
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This file contains the purchases of three Mac products (Mac mini, Mac Studio,
    and MacBook Pro 13) by the various customers identified by their `custid`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step would be to load it up into a Pandas DataFrame object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fb4e06c4177e705e09f207f72b2175e4.png)'
  prefs: []
  type: TYPE_IMG
- en: All images by author
  prefs: []
  type: TYPE_NORMAL
- en: Plotting Venn Diagrams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To plot a 2-circle Venn diagram, there are a couple of ways to do it. The easiest
    way is to supply two *sets* of values to the `venn2()` function (in the `matplotlib_venn`
    package) and it will automatically plot the venn diagram for you.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use this approach to plot a 2-circle Venn diagram to show the number of
    people who bought Mac minis, Mac Studios, and both.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, I will find all the customers who bought a Mac mini and extract the
    `custid` as a *set*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following set of `custid` are those that purchased a Mac mini:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Likewise, I will extract all the `custid` that bought a Mac Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'These are the customers who bought a Mac Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now ready to plot the 2-circle Venn diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9ae2401e887f90b99e64b6098cd98176.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that you need to supply the labels to be displayed on the venn diagram.
    If you don’t, the default label is A and B, which can be a little misleading or
    confusing.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you want a 3-circle Venn diagram, simply call the `venn3()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5175a3ae845b6db5b58d901febc5f482.png)'
  prefs: []
  type: TYPE_IMG
- en: I really like this approach as I don’t have to manually calculate how many people
    bought only a Mac mini, how many bought a Mac studio, how many bought both Mac
    mini and Mac Studio, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Alternative Approach 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The second approach is to manually pass in the numeric values to the `venn2()`
    or `venn3()` functions. For the `venn2()` function, the format is: `venn2(subsets
    = (*Ab*,*aB*,*AB*))`, where:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Ab*** means the count of items contained within set A, but not in set B'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***aB*** means the count of items contained within set B, but not in set A'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AB** means the count of items contained both in set A and B'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s calculate the values for **Ab**, **aB**, and **AB** using our dataframe.
    First, find the people who bought a Mac mini but did not buy the Mac Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, find the people who bought a Mac Studio but did not buy the Mac mini:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, find the people who bought *both* the Mac mini *and* the Mac Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'With the values for **Ab**, **aB**, and **AB** calculated, you now just need
    to count the items in each set and pass them to the `venn2()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Not surprisingly, the result is the same as the one we had earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9ae2401e887f90b99e64b6098cd98176.png)'
  prefs: []
  type: TYPE_IMG
- en: Alternative Approach 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next approach is the binary approach. Instead of passing in the values
    as a tuple, you pass in a **dictionary**. For a 2-circle Venn diagram, you pass
    in binary values in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Ab*** — “`10`”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***aB***— “`01`"'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***AB***— “`11`”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And for 3-circle venn diagram the binary values are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Abc*** — “`100`”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***ABc*** — “`110`”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***ABC*** — “`111`”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***aBC***— “`011`"'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**abC** — “`001`”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***AbC***— “`101`”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***aBc*** — “`010`”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code snippet plots the same 2-circle Venn diagram that you did
    previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Customizing the Venn diagram
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the resultant Venn diagram is created using matplotlib, it is customizable
    just like any charts created using matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the alpha
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can set the alpha (transparency) setting on the circles using the `alpha`
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s how the chart looks like with the `alpha` parameter set to 0.8\. If
    you want a lighter shade, set it to a lower value like 0.1 or 0.2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6a722fde2d84e740f2208505e435a8a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting the colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can specify the individual colors of the circles using the `set_colors`
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0b8db6e703d4fdc2cdf9df2a0e9ded60.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting the line styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To draw outlines for the circles, use the `venn2_circles()` function (for 2-circle
    Venn diagram) together with the `venn2()` function. The following code snippet
    shows how you can draw dashed ( `--`) outlines with a line width of `5` each:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You can refer to [https://matplotlib.org/3.1.0/gallery/lines_bars_and_markers/linestyles.html](https://matplotlib.org/3.1.0/gallery/lines_bars_and_markers/linestyles.html)
    for the list of line styles supported.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here is the updated Venn diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f944c57181997731d277b47bf050256f.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting the font size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two types of labels displayed on the Venn diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Labels** — the text outside the circle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subset Labels** — the text inside the circle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code snippet sets the font sizes for both types of labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/599bd7a716ea2eed1cff459d01a4772b.png)'
  prefs: []
  type: TYPE_IMG
- en: Customizing the line style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also programmatically set the style and line width of the outlines
    outside the `venn2_circles()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2d64c090692178178d0cbbb31d30bf43.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting Plot Title
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'And since this is matplotlib, you can obviously set the title for the figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/aa82bc1050093691ca2710d62c707f1e.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting the subset labels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to customize the appearances of individual labels, you can use
    the `get_label_by_id()` function and pass in the binary value for the individual
    circle to reference the labels and set their display text and color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f6d600d24223bd4b1c96efc89a0f1e3c.png)'
  prefs: []
  type: TYPE_IMG
- en: '**If you like reading my articles and that it helped your career/study, please
    consider signing up as a Medium member. It is $5 a month, and it gives you unlimited
    access to all the articles (including mine) on Medium. If you sign up using the
    following link, I will earn a small commission (at no additional cost to you).
    Your support means that I will be able to devote more time on writing articles
    like this.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/membership?source=post_page-----6c55e0d78e57--------------------------------)
    [## Join Medium with my referral link - Wei-Meng Lee'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Wei-Meng Lee (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----6c55e0d78e57--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: And so you have it! You learned how to plot simple 2-circle and 3-circle Venn
    diagrams using a sample dataframe, and a host of customizations you can make to
    your diagrams. Plotting the Venn diagrams is easy, the more challenging part is
    wrangling your data so that you can use it to pass to the API for plotting. In
    any case, I hope you have fun with Venn diagrams!
  prefs: []
  type: TYPE_NORMAL
