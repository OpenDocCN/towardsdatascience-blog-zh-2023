- en: Forward and Backward Mapping for Computer Vision
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算机视觉中的前向映射和后向映射
- en: 原文：[https://towardsdatascience.com/forward-and-backward-mapping-for-computer-vision-833436e2472](https://towardsdatascience.com/forward-and-backward-mapping-for-computer-vision-833436e2472)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/forward-and-backward-mapping-for-computer-vision-833436e2472](https://towardsdatascience.com/forward-and-backward-mapping-for-computer-vision-833436e2472)
- en: Forward Mapping and Backward Mapping applied to the transformation of images
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前向映射和后向映射在图像变换中的应用
- en: '[](https://medium.com/@JavierMtz5?source=post_page-----833436e2472--------------------------------)[![Javier
    Martínez Ojeda](../Images/5b5df4220fa64c13232c29de9b4177af.png)](https://medium.com/@JavierMtz5?source=post_page-----833436e2472--------------------------------)[](https://towardsdatascience.com/?source=post_page-----833436e2472--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----833436e2472--------------------------------)
    [Javier Martínez Ojeda](https://medium.com/@JavierMtz5?source=post_page-----833436e2472--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@JavierMtz5?source=post_page-----833436e2472--------------------------------)[![哈维尔·马丁内斯·奥赫达](../Images/5b5df4220fa64c13232c29de9b4177af.png)](https://medium.com/@JavierMtz5?source=post_page-----833436e2472--------------------------------)[](https://towardsdatascience.com/?source=post_page-----833436e2472--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----833436e2472--------------------------------)
    [哈维尔·马丁内斯·奥赫达](https://medium.com/@JavierMtz5?source=post_page-----833436e2472--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----833436e2472--------------------------------)
    ·8 min read·May 25, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----833436e2472--------------------------------)
    ·阅读时间8分钟·2023年5月25日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/70e8ea23d3113c4bc92f03ce050b98d4.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/70e8ea23d3113c4bc92f03ce050b98d4.png)'
- en: Photo by [Vadim Bogulov](https://unsplash.com/@franku84?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Vadim Bogulov](https://unsplash.com/@franku84?utm_source=medium&utm_medium=referral)拍摄，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: If you want to read this article without a Premium Medium account, you can do
    it from this friend link :)
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你想在没有Premium Medium账户的情况下阅读本文，可以通过这个好友链接访问 :)
- en: '[https://www.learnml.wiki/forward-and-backward-mapping-for-computer-vision/](https://www.learnml.wiki/forward-and-backward-mapping-for-computer-vision/)'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://www.learnml.wiki/forward-and-backward-mapping-for-computer-vision/](https://www.learnml.wiki/forward-and-backward-mapping-for-computer-vision/)'
- en: 'In this article two algorithms for image warping will be presented and explained:
    **forward mapping** and **backward mapping**. In addition to introducing these
    algorithms at a theoretical level, they will also be applied to real images to
    see the results and capabilities of each algorithm.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将介绍和解释两种图像扭曲算法：**前向映射**和**后向映射**。除了在理论层面介绍这些算法之外，还将它们应用于实际图像，以查看每种算法的结果和能力。
- en: In order to fully understand everything explained in this article it is necessary
    to be familiar with 2D transformation matrices, which were introduced and explained
    in [the previous article](https://medium.com/@JavierMtz5/2d-matrix-transformations-for-computer-vision-80b4a4f2120f).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分理解本文解释的内容，需要熟悉2D变换矩阵，这些内容在[上一篇文章](https://medium.com/@JavierMtz5/2d-matrix-transformations-for-computer-vision-80b4a4f2120f)中进行了介绍和解释。
- en: '[](https://medium.com/@JavierMtz5/2d-matrix-transformations-for-computer-vision-80b4a4f2120f?source=post_page-----833436e2472--------------------------------)
    [## 2D Matrix Transformations for Computer Vision'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@JavierMtz5/2d-matrix-transformations-for-computer-vision-80b4a4f2120f?source=post_page-----833436e2472--------------------------------)
    [## 2D矩阵变换在计算机视觉中的应用'
- en: Scaling, Rotation and Translation through transformation matrices for Computer
    Vision
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过变换矩阵进行计算机视觉中的缩放、旋转和平移
- en: medium.com](https://medium.com/@JavierMtz5/2d-matrix-transformations-for-computer-vision-80b4a4f2120f?source=post_page-----833436e2472--------------------------------)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@JavierMtz5/2d-matrix-transformations-for-computer-vision-80b4a4f2120f?source=post_page-----833436e2472--------------------------------)
- en: Introduction
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: As seen in the previous article, the way to apply transformations on images
    is to iterate over each of the pixels of the image and apply the transformation
    on each of them individually. However, there are certain use cases in which the
    transformations cannot be applied directly, since, for example, the new positions
    of some pixels might be outside the image domain. Another possible problem is
    that the new image could have empty pixels (white stripes), because it is difficult
    to map all pixels of the original image to all pixels of the new image after the
    transformation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一篇文章所示，对图像应用变换的方法是遍历图像的每个像素，并对每个像素单独应用变换。然而，在某些用例中，变换不能直接应用，例如，某些像素的新位置可能超出了图像范围。另一个可能的问题是新图像可能会有空白像素（白条），因为在变换后很难将原始图像的所有像素映射到新图像的所有像素。
- en: To avoid some of these problems, the two algorithms that will be presented in
    this article, **forward mapping** and **backward mapping**, are used, which apply
    different techniques to transform the images correctly.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这些问题，本文将介绍的两个算法，**前向映射**和**后向映射**，采用了不同的技术来正确转换图像。
- en: Forward Mapping
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前向映射
- en: 'The forward mapping process consists of the simple image transformation process
    that has been discussed in the introduction and in the previous article: it iterates
    over all the pixels of the image, and the corresponding transformation is applied
    to each pixel individually. However, those cases in which the new position of
    the transformed pixel falls outside the image domain, an example of which is shown
    below, must be taken into account.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 前向映射过程包括在引言和上一篇文章中讨论的简单图像变换过程：它遍历图像的所有像素，并对每个像素单独应用相应的变换。然而，必须考虑到那些变换后像素的新位置超出图像范围的情况，如下例所示。
- en: '![](../Images/1e994393d52e63a666940568c696591e.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1e994393d52e63a666940568c696591e.png)'
- en: Transformed image’s pixels fall outside the original image domain. **Image by
    author**
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 转换后的图像像素超出了原始图像的范围。**图像由作者提供**
- en: To carry out the forward mapping process, first define a function that receives
    as parameters the original coordinates of a pixel. This function will apply a
    transformation to the original pixel coordinates, and return the new coordinates
    of the pixel after the transformation. The following code example shows the function
    for the rotation transformation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行前向映射过程，首先定义一个函数，该函数以像素的原始坐标作为参数。这个函数会对原始像素坐标应用转换，并返回转换后的新坐标。以下代码示例展示了旋转变换的函数。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once you have this function, you only need to iterate over each pixel of the
    image, apply the transformation and check if the new pixel coordinates are within
    the domain of the original image. If the new coordinates are within the domain,
    the pixel on the new coordinates of the new image will take the value that the
    original pixel had in the original image. If it falls outside the image, the pixel
    is omitted.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你拥有这个函数，你只需遍历图像的每个像素，应用变换，并检查新像素坐标是否在原始图像的范围内。如果新坐标在范围内，新图像的新坐标上的像素将采用原始图像中原始像素的值。如果超出图像范围，该像素将被忽略。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The result of applying a rotation transformation with foward mapping can be
    seen in the image below, where on the left is the original image, and on the right
    the transformed image. It is important to note that for this image the origin
    of coordinates is in the upper left corner, so the image rotates around that point
    anti-clockwise.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转变换应用前向映射的结果可以在下图中看到，左侧是原始图像，右侧是转换后的图像。需要注意的是，对于这张图像，坐标原点在左上角，因此图像围绕该点逆时针旋转。
- en: '![](../Images/0b8fe93b2a0a1854e1d9a6adb07f1bbf.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0b8fe93b2a0a1854e1d9a6adb07f1bbf.png)'
- en: Results of applying Forward Mapping. **Left image extracted from MNIST Dataset
    [1]. Full image by author**
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 应用前向映射的结果。**左图摘自 MNIST 数据集 [1]。完整图像由作者提供**
- en: Regarding the result of the transformation, it can be seen how the transformed
    image does not have the full-black background that the original one has, but instead
    has many white stripes. This happens, as mentioned in the introduction, because
    the pixels of the original image do not always map to all the pixels of the new
    image. Since the new coordinates are calculated by rounding to the nearest pixel,
    this results in many intermediate pixels never receiving a value. In this case,
    as the new image is initialized with all pixels blank, the pixels that have not
    been given a value during the transformation will remain blank, generating those
    white stripes in the transformed image.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 关于变换结果，可以看到变换后的图像不像原始图像那样有完全黑色的背景，而是有许多白色条纹。正如引言中提到的，这种情况发生是因为原始图像的像素并不总是映射到新图像的所有像素上。由于新坐标是通过四舍五入到最近的像素计算的，这导致许多中间像素没有获得值。在这种情况下，由于新图像初始化时所有像素为空，因此在变换过程中没有赋值的像素将保持为空，生成了变换图像中的白色条纹。
- en: 'In addition, it should be noted that there is another notable problem: overlaps.
    This problem occurs when two pixels of the original image are transformed to the
    same pixel of the new image. For the code used in this article, if there are two
    pixels of the original image that map to the same pixel of the new image, the
    new pixel will take the value of the last original pixel that has been transformed,
    overwriting the value of the first one that was already set.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还应注意另一个显著问题：重叠。当原始图像的两个像素被变换到新图像的同一像素时，就会出现这个问题。对于本文使用的代码，如果有两个原始图像的像素映射到新图像的同一像素，新像素将取最后一个已变换的原始像素的值，覆盖第一个已设置的值。
- en: Backward Mapping
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反向映射
- en: The backward mapping algorithm arises from the need to eliminate the white stripes
    that are generated in the image due to the transformation, as well as the possible
    overlaps. As has been said, these stripes appear when not all the pixels of the
    transformed image take a value, because of rounding during the calculation of
    the new coordinates in the forward mapping process, and the overlaps occur when
    two or more pixels of the original image map to the same pixel of the new image.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 反向映射算法产生的原因是需要消除由于变换而在图像中生成的白色条纹以及可能的重叠。正如前面所提到的，这些条纹出现的原因是由于在前向映射过程中计算新坐标时四舍五入的缘故，导致不是所有的变换图像像素都有值，而重叠发生在原始图像的两个或多个像素映射到新图像的同一像素时。
- en: 'The logic behind this algorithm is easy: instead of transforming each pixel
    of the original image to its new coordinates in the new image (forward), this
    time all the pixels of the new image are inversely transformed to pixels of the
    original image (backward). In this way, there will never be any pixel without
    value in the new image, since they will all take the value of a single pixel of
    the original image, thus solving both problems.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个算法背后的逻辑很简单：不是将原始图像的每个像素转换到新图像中的新坐标（前向），而是将新图像中的所有像素逆向转换到原始图像的像素（反向）。这样，新图像中就不会有没有值的像素，因为它们都会采用原始图像中单个像素的值，从而解决了两个问题。
- en: Luckily, the transformation that is applied to the coordinates of a pixel using
    a transformation matrix can be undone by following the same process with the inverse
    transformation matrix. This property of transformation matrices, together with
    its proof, can be seen in the figure below.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，使用变换矩阵对像素坐标进行的变换可以通过应用逆变换矩阵来撤销。变换矩阵的这个属性以及其证明可以在下图中看到。
- en: '![](../Images/c8659bb90b475febb8cdd224d21ca1a8.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c8659bb90b475febb8cdd224d21ca1a8.png)'
- en: Transformations with Inverse Transformation Matrix and proof. **Image by author**
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用逆变换矩阵的变换及证明。**作者提供的图像**
- en: Taking into account this property, the algorithm consists of iterating over
    each pixel of the new image, and applying the inverse transformation to each of
    these pixel’s coordinates to know from which pixel of the original image they
    have to take the value.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一属性，算法的组成包括对新图像的每个像素进行迭代，并对每个像素的坐标应用逆变换，以知道它们需要从原始图像的哪个像素获取值。
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that the ***apply_inverse_transformation()*** function takes as input the
    coordinates in the new image, and returns the coordinates in the original image,
    instead of receiving the original coordinates and returning the new ones, as was
    the case for forward mapping.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，***apply_inverse_transformation()*** 函数接受新图像中的坐标作为输入，并返回原始图像中的坐标，而不是像正向映射那样接受原始坐标并返回新坐标。
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The result of applying a rotation transformation with backward mapping can be
    seen in the image below, where on the left is the original image, and on the right
    the transformed image. As mentioned previously, the image rotates about the origin
    of coordinates, which is located in the upper left corner.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 应用反向映射的旋转变换结果可以在下图中看到，左侧是原始图像，右侧是变换后的图像。如前所述，图像围绕坐标原点旋转，坐标原点位于左上角。
- en: '![](../Images/12c1d821afb3dc25607c2f01c6e06dcb.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/12c1d821afb3dc25607c2f01c6e06dcb.png)'
- en: Results of applying Backward Mapping. **Left image extracted from MNIST Dataset
    [1]. Full image by author**
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 反向映射的应用结果。**左侧图像摘自 MNIST 数据集 [1]。完整图像由作者提供**
- en: In the image you can see how all those white stripes that appeared when applying
    forward mapping have disappeared when applying backward mapping. In fact you can
    see how the quality of the transformed image is quite good (we must take into
    account that the quality of the original image is not very good), so we can consider
    the backward mapping algorithm much better than forward mapping for those cases
    in which white stripes appear during the transformation.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在图像中你可以看到，应用正向映射时出现的那些白色条纹，在应用反向映射时都消失了。实际上，你可以看到变换后的图像质量相当好（我们必须考虑到原始图像的质量不是很高），因此我们可以认为，在出现白色条纹的情况下，反向映射算法明显优于正向映射。
- en: Conclusion
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Forward mapping is a simple to implement and easy to understand algorithm, since
    it consists of the direct transformation of each pixel of the original image to
    the new image. However, this algorithm presents the overlapping problem, and the
    problem of leaving many pixels without value, which considerably lowers the quality
    of the transformed image. The backward mapping algorithm, whose implementation
    is just as straightforward as forward mapping, has much better results and solves
    both problems, because it gives a single value to all pixels of the new image.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正向映射是一个简单易实现且易于理解的算法，因为它直接将原始图像的每个像素转换到新图像。然而，该算法存在重叠问题以及留下一些像素没有值的问题，这些问题会显著降低变换图像的质量。反向映射算法，其实现与正向映射一样简单，结果要好得多，并且解决了这两个问题，因为它为新图像的所有像素提供了一个唯一的值。
- en: As for the execution time of the algorithms, both have the same complexity,
    so it will generally always be a better idea to use the backward mapping algorithm,
    due to its better results. In an ideal scenario, the function in charge of applying
    the individual transformations on each pixel (called ***apply_transformation()***
    and ***apply_inverse_transformation()*** in this article) will not construct the
    transformation matrix, but will receive it as a parameter. This will save the
    execution time needed by the forward mapping algorithm to build the transformation
    matrix, and by the backward mapping algorithm to build the matrix and invert it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 关于算法的执行时间，两者具有相同的复杂度，因此一般来说，使用反向映射算法通常是一个更好的选择，因为它的结果更佳。在理想情况下，负责对每个像素应用个体变换的函数（在本文中称为***apply_transformation()***和***apply_inverse_transformation()***）不会构造变换矩阵，而是将其作为参数传入。这将节省正向映射算法构建变换矩阵所需的执行时间，同时也节省反向映射算法构建和反转矩阵的时间。
- en: In conclusion, the backward mapping algorithm achieves very good results compared
    to forward mapping, both having practically the same execution time. However,
    it should be noted that both algorithms need a long time to carry out the transformation
    for high resolution images, although they are still very useful to establish the
    bases on which other more powerful transformation algorithms are built.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，反向映射算法相比于正向映射算法取得了非常好的结果，两者的执行时间几乎相同。然而，需要注意的是，两种算法都需要较长时间来处理高分辨率图像，尽管如此，它们仍然非常有用，为构建其他更强大的变换算法奠定了基础。
- en: Data
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据
- en: The image used along the article is extracted from the MNIST dataset **[1]**.
    The dataset is made available under a [Creative Commons Attribution-Share Alike
    3.0 license](https://creativecommons.org/licenses/by-sa/3.0/).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中使用的图像摘自 MNIST 数据集 **[1]**。该数据集在[创作共用署名-相同方式共享 3.0 许可协议](https://creativecommons.org/licenses/by-sa/3.0/)下提供。
- en: Reference
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: '**[1]** [http://yann.lecun.com/exdb/mnist/](http://yann.lecun.com/exdb/mnist/)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**[1]** [http://yann.lecun.com/exdb/mnist/](http://yann.lecun.com/exdb/mnist/)'
