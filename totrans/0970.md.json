["```py\nimport pandas as pd\nimport numpy as np\nimport geopandas as gpd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport contextily\n\n# Spatial Stats\nfrom pointpats import distance_statistics, QStatistic, random, PointPattern\n```", "```py\n# Import the file to this exercise\n# Open listings file\nlistings = pd.read_csv('/content/listings.csv',\n                       usecols=['id', 'property_type', 'neighbourhood_cleansed',\n                                'bedrooms', 'beds', 'bathrooms_text', 'price',\n                                'latitude','longitude'])\n\n# Convert the file to GeoPandas\npoints_gpd = gpd.GeoDataFrame(listings,\n                              geometry= gpd.points_from_xy(\n                                  x=listings.longitude,\n                                  y=listings.latitude),\n                              crs= \"EPSG:4326\")\n```", "```py\n#Quick check gpd dataframe\nfig, ax = plt.subplots(figsize=(8,8))\n# zorder=1 is the plot below\nasheville.plot(ax=ax, color=None, zorder=1)\n# zorder=2 is the top layer\npoints_gpd.plot(ax=ax, zorder=2, color='black', markersize=8)\n```", "```py\n# Check concentration of the points\nplot2 = sns.jointplot(\n    x= points_gpd.geometry.x,\n    y= points_gpd.geometry.y,\n    data= points_gpd,\n    s=5, height=7, color='k')\n\n# Add a basemap to the jointplot\ncontextily.add_basemap( plot2.ax_joint,\n                       crs=\"EPSG:4326\",\n                        source= contextily.providers.Stamen.TonerLite)\n```", "```py\n# Coding Ripley's G (6 mins to run)\nripley_g = distance_statistics.g_test(points_gpd[['longitude', 'latitude']].values,\n                                      support=40,\n                                      keep_simulations= True)\n```", "```py\n# Plot G test\nplt.figure(figsize=(20,7))\n# Simulated Data line plot\nplt.plot(ripley_g.support,\n         np.median(ripley_g.simulations, axis=0),\n         color='k', label= 'Randomly Simulated Data')\n# Ripley Stat plot for Observed data\nplt.plot(ripley_g.support,\n         ripley_g.statistic, marker='o',\n         color='red', label= 'Observed Data')\n# Plot setup\nplt.legend(loc=4)\nplt.xlabel('Distance')\nplt.xticks( np.arange(0.0, 0.023, 0.001) )\nplt.ylabel('Ripley G function statistic')\nplt.title('Rypleys G Test')\nplt.show()\n```", "```py\n# Coding Ripley's K\nripley_k = distance_statistics.k_test(points_gpd[['longitude', 'latitude']].values,\n                                      keep_simulations= True)\n\n# Plot K test\n\n# Simulated Data line plot\nplt.plot(ripley_k.support,\n         ripley_k.simulations.T,\n         color='k', alpha=.1)\n# Ripley Stat plot for Observed data\nplt.plot(ripley_k.support,\n         ripley_k.statistic, marker='x',\n         color='orange')\n\n# p<0.05 = alternative hypothesis: spatial pattern\nplt.scatter(ripley_k.support,\n            ripley_k.statistic,\n            cmap='viridis', c=ripley_k.pvalue < .05,\n            zorder=4)\n# Plot setup\nplt.xlabel('Distance')\nplt.ylabel('Ripley K function')\nplt.title('Rypleys K Function Plot')\nplt.show()\n```"]