- en: How To Forecast With Moving Average Models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-forecast-with-moving-average-models-6f3c9cbba60d](https://towardsdatascience.com/how-to-forecast-with-moving-average-models-6f3c9cbba60d)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Tutorial and theory on how to carry out forecasts with moving average models
    for time series analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@egorhowell?source=post_page-----6f3c9cbba60d--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----6f3c9cbba60d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6f3c9cbba60d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6f3c9cbba60d--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----6f3c9cbba60d--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6f3c9cbba60d--------------------------------)
    ·6 min read·Jan 23, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6fb0947aa4194f06a35db89cc3cb7f8e.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Sigmund](https://unsplash.com/de/@sigmund?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In my previous post we covered [***autoregression***](https://medium.com/towards-data-science/how-to-forecast-time-series-using-autoregression-1d45db71683).
    This is where you forecast future values using some linear weighted combination
    of previous observed values of that time series. Rather than using the previous
    observations, we can forecast using past ***forecast errors*** instead. This is
    known as the [***moving-average***](https://en.wikipedia.org/wiki/Moving-average_model)
    ***(MA)*** model.
  prefs: []
  type: TYPE_NORMAL
- en: This is not to be confused with the [**rolling mean model**](https://en.wikipedia.org/wiki/Moving_average)*,*
    which is also dubbed as a moving average model.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this post I want to go over the theory and framework behind the moving average
    forecasting model and then dive into a short tutorial on how you can implement
    it in Python!
  prefs: []
  type: TYPE_NORMAL
- en: Supplemental Video.
  prefs: []
  type: TYPE_NORMAL
- en: Moving Average Model Theory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As declared above, the moving average model is *regression-like* by fitting
    coefficients, ***θ*,** to the previously forecasted errors, ***ε***, also known
    as [***white noise error***](https://en.wikipedia.org/wiki/White_noise), with
    the additon of a constant term that is the mean, ***μ***:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cdf6a947a5b15204b7124d76b4dbe89e.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation generated by author in LaTeX.
  prefs: []
  type: TYPE_NORMAL
- en: This is a ***MA(q) model***,where ***q*** is the number of error terms, which
    is known as the **order**.
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One key requirement of the MA(q) model is that, like autoregression, it needs
    the data to be[***stationary***](/time-series-stationarity-simply-explained-125269968154).
    This is means it has a **constant variance and mean through time**. This can be
    achieved through [***differencing***](https://otexts.com/fpp2/stationarity.html)and
    stabilising the variance through a [***Logarithm or Box-Cox transform***](/box-cox-transform-for-time-series-cc45f26082c6).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to learn more about stationarity and these transformations, checkout
    my previous articles on these subjects below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/time-series-stationarity-simply-explained-125269968154?source=post_page-----6f3c9cbba60d--------------------------------)
    [## Time-Series Stationarity Simply Explained'
  prefs: []
  type: TYPE_NORMAL
- en: A simple and intuitive explanation for the need of stationarity in time-series
    modelling.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/time-series-stationarity-simply-explained-125269968154?source=post_page-----6f3c9cbba60d--------------------------------)
    [](/box-cox-transform-for-time-series-cc45f26082c6?source=post_page-----6f3c9cbba60d--------------------------------)
    [## Box-Cox Transform for Time Series
  prefs: []
  type: TYPE_NORMAL
- en: How to create a stationary time series using the Box-Cox transformation.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/box-cox-transform-for-time-series-cc45f26082c6?source=post_page-----6f3c9cbba60d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Order Selection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Selecting the order of a MA model can be accomplished by viewing the [***autocorrelation
    function***](https://medium.com/towards-data-science/autocorrelation-for-time-series-analysis-86e68e631f77)***.***
    Autocorrelation measures the **correlation of the time series at various time
    steps (lags)**. If a lag has a high correlation, then it is influential in describing
    what the current value of the time series is. This idea of ‘influence’ can be
    used to carry out forecasts.
  prefs: []
  type: TYPE_NORMAL
- en: We can use autocorrelation to plot a [***correlogram***](https://en.wikipedia.org/wiki/Correlogram)of
    the various lags of the time series to determine which are [***statistically significant***](https://en.wikipedia.org/wiki/Statistical_significance)
    in impacting the forecasts. If this is hard to visualise at the moment, don't
    worry we will carry out a Python tutorial on this exact process later!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to understand more about autocorrelation, checkout my previous
    article on it here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/autocorrelation-for-time-series-analysis-86e68e631f77?source=post_page-----6f3c9cbba60d--------------------------------)
    [## Autocorrelation For Time Series Analysis'
  prefs: []
  type: TYPE_NORMAL
- en: Describing what autocorrelation is and why it is useful in time series analysis.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/autocorrelation-for-time-series-analysis-86e68e631f77?source=post_page-----6f3c9cbba60d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: However, another more common approach is to simply iterate over different combinations/number
    of orders and use the model that gives the optimal performance. The optimal performance
    is typically evaluated by the model that returns the best [***Akaike information
    criterion***](https://en.wikipedia.org/wiki/Akaike_information_criterion) ***(AIC)***
    value, that is based on [***maximum likelihood estimation***](https://en.wikipedia.org/wiki/Maximum_likelihood_estimation).
    This process is analogous to [***hyperparameter tuning***](https://medium.com/towards-data-science/optimise-your-hyperparameter-tuning-with-hyperopt-861573239eb5)
    in classical Machine Learning.
  prefs: []
  type: TYPE_NORMAL
- en: Estimation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have our order of MA terms, we need to fit their coefficients! Unfortunately,
    this is not as easy as in linear or autoregression as the errors are not observable.
    So, how do we do it?
  prefs: []
  type: TYPE_NORMAL
- en: Well, it is not so straightforward and I will leave a link [***here***](https://online.stat.psu.edu/stat510/lesson/2/2.1)
    for a full mathematical walkthrough which explains this process well. However,
    the general gist is that the **autocorrelation values for each lag are directly
    related to their coefficients**. Therefore, once you know the autocorrelation
    of a forecast error, you can work backwards to acquire its coefficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, for a ***MA(1)*** model (model with one forecast error term),
    its autocorrelation, ***c_1***, is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d94a18f3d1ee44307c0a118e948c2307.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation generated by author in LaTeX.
  prefs: []
  type: TYPE_NORMAL
- en: One can see that if we know ***c_1***, then this is just a simple quadratic
    equation that we can solve for the coefficient. This same idea can be extended
    to a ***MA(q)*** model, but with more complexity of course due to multiple errors
    and coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: Python Tutorial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s now implement the moving average model in Python!
  prefs: []
  type: TYPE_NORMAL
- en: Data [from Kaggle](https://www.kaggle.com/datasets/ashfakyeafi/air-passenger-data-for-time-series-analysis)
    with a CC0 licence.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First plot the data:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/87f5dd5f5d2da117e26234afff4d36d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clearly the time series has a yearly seasonality and a consistent upward trend.
    Therefore, we need to make it stationary through differencing and the Box-Cox
    transform:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/292a8d8d14a569b5a44375d2d96cc7b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: The data now appears to be stationary. We could have made it further stationary
    by carrying out second order differencing or seasonal differencing, however I
    think it is satisfactory here.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to learn more about these more sophisticated differencing methods,
    checkout my previous blog post here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/seasonality-of-time-series-5b45b4809acd?source=post_page-----6f3c9cbba60d--------------------------------)
    [## Seasonality of Time Series'
  prefs: []
  type: TYPE_NORMAL
- en: An intuition of how seasonality affects time series analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/seasonality-of-time-series-5b45b4809acd?source=post_page-----6f3c9cbba60d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can now start the modelling phase by finding the optimal number of orders.
    To do this, we plot an autocorrelation correlogram like we discussed above:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c356ffd6710bdfaec3d2ca0783da0ea9.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: The blue region signifies where the values are no longer statistically significant.
    From the above plot, we can that see that the last significant lag is the ***13th***.
    Therefore, our **model order for the MA model will be 13**.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, no direct MA model function or package exists in Python, so we
    are going to use the [***ARIMA***](https://en.wikipedia.org/wiki/Autoregressive_integrated_moving_average)
    function from *statsmodels* and set every component to zero apart from the moving
    average orders.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry about what ARIMA is or stands for, I will cover it in my next article!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: Analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s now plot the forecast by **undifferencing** the data and carrying out
    the **inverse** **Box-Cox transform**:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4f621537ff8b5d210b0a5859c56122d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the forecasts have captured the trend mostly well, however they
    have failed to notice the seasonality. In my previous article, the autoregression
    model, that was trained on the same data, managed to pick up both the trend and
    seasonality. You can checkout the autoregression modelling walkthrough here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-forecast-time-series-using-autoregression-1d45db71683?source=post_page-----6f3c9cbba60d--------------------------------)
    [## How To Forecast Time-Series Using Autoregression'
  prefs: []
  type: TYPE_NORMAL
- en: Tutorial on how to forecast using an autoregressive model in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-forecast-time-series-using-autoregression-1d45db71683?source=post_page-----6f3c9cbba60d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Summary and Further Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we have learned how to forecast with the moving-average model.
    This is where you forecast future values as a linear combination of the previous
    forecast errors. It is easy to implement in Python, however didn't lead to as
    good results compared to the autoregression model we saw in my previous post.
  prefs: []
  type: TYPE_NORMAL
- en: 'Full code used in this article can be found at my GitHub here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/egorhowell/Medium-Articles/blob/main/Time%20Series/ARIMA/moving_average.py?source=post_page-----6f3c9cbba60d--------------------------------)
    [## Medium-Articles/moving_average.py at main · egorhowell/Medium-Articles'
  prefs: []
  type: TYPE_NORMAL
- en: Code I use in my medium blog/articles. Contribute to egorhowell/Medium-Articles
    development by creating an account on…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/egorhowell/Medium-Articles/blob/main/Time%20Series/ARIMA/moving_average.py?source=post_page-----6f3c9cbba60d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Another Thing!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----6f3c9cbba60d--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  prefs: []
  type: TYPE_NORMAL
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----6f3c9cbba60d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Connect With Me!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**YouTube**](https://www.youtube.com/@egorhowell?sub_confirmation=1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**GitHub**](https://github.com/egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References and Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Forecasting: Principles and Practice:* [https://otexts.com/fpp2/](https://otexts.com/fpp3/accuracy.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
