- en: How to Perform Univariate Outlier Detection in Python for Machine Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-perform-univariate-outlier-detection-in-python-for-machine-learning-b9fb05e72661](https://towardsdatascience.com/how-to-perform-univariate-outlier-detection-in-python-for-machine-learning-b9fb05e72661)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Outlier detection series — Part 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/?source=post_page-----b9fb05e72661--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----b9fb05e72661--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b9fb05e72661--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b9fb05e72661--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----b9fb05e72661--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b9fb05e72661--------------------------------)
    ·9 min read·Feb 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/32e714fae05225ece5cf9f7517a7195a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Alexa](https://pixabay.com/users/alexas_fotos-686414/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1744091)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1744091)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first question to ask before starting outlier detection is, "Does my dataset
    even have outliers?". While the usual answer is "Yes", it is always recommended
    to sniff the hint of outlier presence in the air before making big efforts (like
    using machine learning models) to isolate them.
  prefs: []
  type: TYPE_NORMAL
- en: So, we will start this second part of our outlier detection tutorial series
    by looking at general methods of detecting the presence of outliers like data
    visualization. Then, we will continue the post by discussing methods to detect
    univariate and multivariate outliers.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-perform-outlier-detection-in-python-in-easy-steps-for-machine-learning-1-8f9a3e6c88b5?source=post_page-----b9fb05e72661--------------------------------)
    [## How to Perform Outlier Detection in Python for Machine Learning: Part 1'
  prefs: []
  type: TYPE_NORMAL
- en: Earth is an outlier — the theory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-perform-outlier-detection-in-python-in-easy-steps-for-machine-learning-1-8f9a3e6c88b5?source=post_page-----b9fb05e72661--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: The dataset to be used
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll be using the Diamonds dataset throughout the tutorial. It is large enough
    to not be a toy dataset and has a nice combination of numeric and categorical
    features.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3e8e2c20d2a846f17d651a056848bf5c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Our eventual task after outlier detection is predicting the carat of diamonds
    given its physical characteristics and price:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Before we get to that part, we want to detect and isolate the outliers to make
    our dataset as clean as possible (it is relatively clean now).
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s extract the feature and target arrays and encode the categorical
    columns using OrdinalEncoder class from Sklearn:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are ready…
  prefs: []
  type: TYPE_NORMAL
- en: Do outliers even exist?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: …to answer the question, "Do outliers even exist"? The first step is to look
    at the summary statistics of the target variable — the carat. We are looking if
    there are suspicious enough gaps between the minimum, mean, and maximum of the
    target.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The values are 0.2, 0.8, and 5.01 for minimum, mean, and maximum, respectively.
    The significant gaps between the minimum and maximum and between the mean and
    the maximum already suggest there might be outliers (remember, outliers are often
    the extreme data points in distributions).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s confirm this suspicion by plotting the histogram of the target:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c9521e30be475000d03aee3d03b6e86a.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, the bulk of the histogram is between 0.2 and 3 carats. But the
    right tail of the histogram goes up to 5, but we can't see any bins there. If
    you see a histogram with a long left or right tail but no bins in the tails, then
    there is a small number of extreme values (outliers) in the distribution. (Outliers
    — check!)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at the features array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fec9fb7e6270431a9f99eb6ab1822a58.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'After excluding the categoricals, we can probably guess that price is the most
    important feature. And like carat, we can see significant differences between
    the mean price and the cheapest and most expensive diamonds. Let''s plot a histogram
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0774ac2855e3bcb22ebb75cde482c17a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: We can see that most data points lie below 5000$; the rest of the bins have
    very low heights. This is getting tricky — do we consider all the points above
    5000 as outliers now?
  prefs: []
  type: TYPE_NORMAL
- en: Well, no — we can’t say samples are outliers by looking at a single plot. Remember,
    first impressions often lie.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look more closely by plotting a boxplot of diamond cut quality versus
    price. The cut quality is given in descending order from left to right.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b15e2298c0c3f006c84325f0518a6f32.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author. Diamond cut quality vs. price. The dark spots above the
    whiskers denote outliers — there are many, and that’s why they are jumbled up.
  prefs: []
  type: TYPE_NORMAL
- en: Even though we see many outliers in the plot marked with circles above the whiskers
    of the boxes, we can't safely conclude they are outliers.
  prefs: []
  type: TYPE_NORMAL
- en: If you pay attention, the highest quality, ideal diamonds have prices of around
    2000$ (look at the median), and yet, the lowest quality, fair diamonds cost much
    more, around 3000$. This suggests that there exist some hidden multivariate relationships
    between the features of the dataset and that we can't draw conclusions from just
    single and two-variable plots.
  prefs: []
  type: TYPE_NORMAL
- en: Actually, this is the case for almost all datasets. Plain descriptive statistics
    and simple plots can only hint at the presence of outliers. And since we can't
    really see the big-picture relationships among all features using these methods,
    we have to turn to more sophisticated techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Univariate outlier detection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let's look at techniques that allow us to detect outliers in single distributions,
    like our target array of diamond carats.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most popular methods to perform outlier detection on univariate datasets
    is using plain-old z-scores. Recall that a z-score of a datapoint tells us how
    many standard deviations it is away from the mean.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if distribution A has a mean of 5 and a standard deviation of 3.2,
    the sample 17.2 would have a z-score of (17.2–5) / 3.2 = 3.8125.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can calculate the z-score of all elements in an array using the `zscore`
    function from `scipy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In statistics, a z-score of 3 is commonly used as a threshold between inliers
    and outliers. So, using array filtering, we can mark any samples as outliers if
    the absolute value of their z-score is higher than 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The method marks 0.8% of samples as outliers, and that's not a coincidence.
    The idea of using a z-score of three as a threshold for outliers comes from [the
    Empirical Rule](https://en.wikipedia.org/wiki/68%E2%80%9395%E2%80%9399.7_rule).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dd7d9092e16bc0e311169d8ecfec9d87.png)'
  prefs: []
  type: TYPE_IMG
- en: '[CC BY-SA Licence. Wikipedia.](https://en.wikipedia.org/wiki/68%E2%80%9395%E2%80%9399.7_rule)'
  prefs: []
  type: TYPE_NORMAL
- en: The [Empirical Rule](https://en.wikipedia.org/wiki/68%E2%80%9395%E2%80%9399.7_rule)
    states that data within one, two, and three standard deviations or z-scores roughly
    represent 68%, 95%, and 99.7% of the distribution, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: So, if a sample has a z-score higher than 3, we can safely conclude that is
    an extreme value since it is different than roughly 99.7% of the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: We found 439 outliers using the z-scores method, but can we really trust this
    output? Actually, we can't.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Empirical Rule, and in turn, z-scores are only appropriate to normally
    distributed data. And from the histogram of diamond carats we saw earlier, we
    know for a fact that our target, y, is not normally distributed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/976cffa54ccfda55fb1ce8c27d6d1534.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author. A histogram of diamond carats. The plot shows the distribution
    is not normal.
  prefs: []
  type: TYPE_NORMAL
- en: So, we must take another approach now.
  prefs: []
  type: TYPE_NORMAL
- en: Modified z-scores
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When your distribution isn't normal, z-scores won't cut it to detect outliers.
    Instead, you can use the brother of z-scores — Median Absolute Deviation (MAD),
    also called modified z-scores.
  prefs: []
  type: TYPE_NORMAL
- en: The idea is simple — since outliers most affect the mean and standard deviation
    of distributions, we will stop using those metrics and replace them with the median.
  prefs: []
  type: TYPE_NORMAL
- en: Why replace mean with the median? Median denotes the 50th percentile, which
    represents the middle value of a distribution when it is sorted. This means no
    matter how big or small outliers are, they won’t affect the median’s value in
    the slightest.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'When we replace the mean with the median in the standard deviation formula,
    we get the median absolute deviation. It is calculated by subtracting the median
    from each sample in the distribution, taking the absolute value, and then, the
    median of differences. Here is how to do that operation in NumPy for our target,
    y:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We can confirm our calculations are correct using the `median_abs_deviation`
    function from `scipy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the same result. Now, if we insert the MAD value into the following
    formula, we get modified z-scores:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d4dd857e60fbb7fcb3030858eff980d7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author. Cool-looking M is the median and x_i is the ith sample
    in the distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'In modified z-scores, a MAD score of 3.5 is used as a threshold for outliers.
    The formula is already implemented as the `MAD` estimator in the PyOD library.
    Let''s see how to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Once you import the estimator from `models.mad`, you can fit it to the target
    array `y`. By default, all PyOD estimators require 2D arrays, so we are feeding
    `y` after we've reshaped it.
  prefs: []
  type: TYPE_NORMAL
- en: After MAD is fit, we can access inlier/outlier labels for each sample using
    the `labels_` attribute. It returns 0 for inliers and 1 for outliers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s count the 1s:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, `MAD` estimator found 222 outliers, as compared to the 439 we
    found with z-scores. Since `MAD` uses robust metrics like median, we can trust
    this output more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s plot the histogram of diamond carats once more after we remove the outliers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e0d42d46f6eacd58a070eb2ca228c581.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, the tail of the histogram is gone.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is a summary of the steps you can take to perform univariate outlier detection
    when given a new dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: Check if there are even outliers to begin with, using basic methods like summary
    statistics, histograms, and boxplots.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have a reasonable assumption for the presence of outliers, you can
    start univariate outlier detection on the target array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the array is normally distributed, you can go with z-scores.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you don't know the distribution type or confirmed that it isn't normal, you
    can use modified z-scores with a threshold of 3.5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Thank you for reading!
  prefs: []
  type: TYPE_NORMAL
- en: Check out my comprehensive course on [outlier detection on DataCamp](https://app.datacamp.com/learn/courses/anomaly-detection-in-python)
    to learn much more about the topic (the first chapter is free)!
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----b9fb05e72661--------------------------------)
    [## Join Medium with my referral link - Bex T.'
  prefs: []
  type: TYPE_NORMAL
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----b9fb05e72661--------------------------------)
    [](https://ibexorigin.medium.com/subscribe?source=post_page-----b9fb05e72661--------------------------------)
    [## Get an email whenever Bex T. publishes.
  prefs: []
  type: TYPE_NORMAL
- en: Get an email whenever Bex T. publishes. By signing up, you will create a Medium
    account if you don't already have one…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'ibexorigin.medium.com](https://ibexorigin.medium.com/subscribe?source=post_page-----b9fb05e72661--------------------------------)
    [](/how-to-perform-outlier-detection-in-python-in-easy-steps-for-machine-learning-1-8f9a3e6c88b5?source=post_page-----b9fb05e72661--------------------------------)
    [## How to Perform Outlier Detection in Python for Machine Learning: Part 1'
  prefs: []
  type: TYPE_NORMAL
- en: Earth is an outlier — the theory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-perform-outlier-detection-in-python-in-easy-steps-for-machine-learning-1-8f9a3e6c88b5?source=post_page-----b9fb05e72661--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: More stories from me…
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/geekculture/5-excellent-julia-features-that-python-developers-can-only-wish-they-had-e1531a596239?source=post_page-----b9fb05e72661--------------------------------)
    [## 5 Excellent Julia Features That Python Developers Can Only Wish They Had'
  prefs: []
  type: TYPE_NORMAL
- en: Continuation of Julia vs. Python debate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/geekculture/5-excellent-julia-features-that-python-developers-can-only-wish-they-had-e1531a596239?source=post_page-----b9fb05e72661--------------------------------)
    [](/5-best-python-synthetic-data-generators-and-how-to-use-them-when-you-lack-data-f62bcf62d43c?source=post_page-----b9fb05e72661--------------------------------)
    [## 5 Best Python Synthetic Data Generators And How to Use Them When You Lack
    Data
  prefs: []
  type: TYPE_NORMAL
- en: Let's get even more data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'towardsdatascience.com](/5-best-python-synthetic-data-generators-and-how-to-use-them-when-you-lack-data-f62bcf62d43c?source=post_page-----b9fb05e72661--------------------------------)
    [](https://pub.towardsai.net/bentoml-vs-fastapi-the-best-ml-model-deployment-framework-and-why-its-bentoml-f0ed26cae88d?source=post_page-----b9fb05e72661--------------------------------)
    [## Bentoml vs. Fastapi: The Best ML Model Deployment Framework and Why It’s Bentoml'
  prefs: []
  type: TYPE_NORMAL
- en: Detailed comparison between BentoML and FastAPI for model deployment.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pub.towardsai.net](https://pub.towardsai.net/bentoml-vs-fastapi-the-best-ml-model-deployment-framework-and-why-its-bentoml-f0ed26cae88d?source=post_page-----b9fb05e72661--------------------------------)
  prefs: []
  type: TYPE_NORMAL
