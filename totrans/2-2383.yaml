- en: Why You (Almost) Can’t Calculate Pi to a Billion Digits in Python at Home
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么你（几乎）不能在家中用Python计算圆周率到一亿位
- en: 原文：[https://towardsdatascience.com/why-you-almost-cant-calculate-pi-to-a-billion-digits-in-python-at-home-4262a4de9f80](https://towardsdatascience.com/why-you-almost-cant-calculate-pi-to-a-billion-digits-in-python-at-home-4262a4de9f80)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/why-you-almost-cant-calculate-pi-to-a-billion-digits-in-python-at-home-4262a4de9f80](https://towardsdatascience.com/why-you-almost-cant-calculate-pi-to-a-billion-digits-in-python-at-home-4262a4de9f80)
- en: It is harder than you think
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这比你想象的要困难
- en: '[](https://ibexorigin.medium.com/?source=post_page-----4262a4de9f80--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----4262a4de9f80--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4262a4de9f80--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4262a4de9f80--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----4262a4de9f80--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ibexorigin.medium.com/?source=post_page-----4262a4de9f80--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----4262a4de9f80--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4262a4de9f80--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4262a4de9f80--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----4262a4de9f80--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4262a4de9f80--------------------------------)
    ·9 min read·Oct 9, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表在[数据科学的前沿](https://towardsdatascience.com/?source=post_page-----4262a4de9f80--------------------------------)
    ·阅读时间9分钟·2023年10月9日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/470ca271edba8912cae6b51f3a61c164.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/470ca271edba8912cae6b51f3a61c164.png)'
- en: Image by me with Midjourney.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我使用Midjourney生成。
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: In June 9, 2022 Google set a new world record for calculating the most number
    of digits of Pi — 100 TRILLION! This monumental achievement was possible using
    the y-cruncher program running on Google Cloud. It crunched numbers for a whopping
    157 days, 23 hours, 31 minutes and 7.651 seconds.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 2022年6月9日，谷歌设立了计算圆周率最多位数的新世界纪录——100万亿位！这一重大成就得益于在谷歌云上运行的y-cruncher程序。该程序计算了整整157天、23小时、31分钟和7.651秒。
- en: If one billion is 100 thousand times smaller than 100 trillion, would the runtime
    decrease accordingly? In other words, would it take only 136 seconds?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一亿是10万倍小于100万亿，那么运行时间会相应减少吗？换句话说，是不是只需要136秒？
- en: But 136 seconds is too ambitious. Home PCs are much less powerful than Google
    Cloud’s most formidable environments. So, how about a more reasonable runtime
    like 24 hours?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但136秒实在太过雄心勃勃。家用电脑远不如谷歌云的强大环境。那么，像24小时这样更合理的运行时间如何？
- en: Turns out, calculating even a billion digits of Pi within 24 hours is a giant
    pipe dream. This article explains why with evidence in Python.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 结果发现，在24小时内计算即使是一亿位的圆周率也是一个巨大的梦想。本文通过Python证据解释了原因。
- en: First of all, what is wrong with `math.pi`?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首先，`math.pi`有什么问题？
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`math.pi` has a precision of 15 digits. While it is not much, it is enough
    for the highest accuracy calculations in science.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`math.pi`的精度为15位。虽然这不是很多，但足以进行科学中的最高精度计算。'
- en: For example, NASA’s Jet Propulsion Lab (JPL) uses 15 digits of Pi to navigate
    between planets. To give you an idea, this level of precision is enough to calculate
    the circumference of a circle with a radius of 15 billion miles. The resulting
    94 billion miles circumference would be off by no more than the width of your
    little finger. Think about that!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，NASA 的喷气推进实验室（JPL）使用15位数字的圆周率来在行星间导航。为了给你一个概念，这种精度足以计算一个半径为150亿英里的圆的周长。结果是940亿英里的周长误差不超过你小指的宽度。想一想吧！
- en: So, why even bother with a billion digits, let alone a 100 trillion?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么还要纠结于一亿位，更不用说100万亿位了？
- en: 'Well, to give you the geek’s answer: “Because it would be so freaking cool!”.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，给你一个极客的答案：“因为这实在太酷了！”
- en: What if we increase the decimal precision?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果我们增加小数点精度会怎样？
- en: Before we take out the big guns (the algorithms!), what if we increase decimal
    precision in Python when approximating π? That would be much simpler.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们使用大招（算法！）之前，如果我们在Python中增加近似π的小数点精度呢？那会简单得多。
- en: For the approximation, we will use Ramanujan’s formula for π. Mathematicians
    all over the world use it to approximate π to an insurmountable extent.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种近似，我们将使用拉马努jan的π公式。全球的数学家都用它来极其准确地近似π。
- en: '![](../Images/5b27cd95f3b1ba6f38f65ac53d447247.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5b27cd95f3b1ba6f38f65ac53d447247.png)'
- en: Image by me
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我制作
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We’ve got a precision of 16 using simple arithmetic. Let’s increase it to 1000
    digits and measure the runtime:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用简单的算术达到了16位的精度。让我们将其提高到1000位并测量运行时间：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It took only a fraction of a second to get a 1000-point precision! Let’s boldly
    increase the runtime to 1 million:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅花了不到一秒的时间就获得了1000位的精度！让我们大胆地将运行时间增加到100万：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Only three milliseconds — what’s going on? Looks like we can calculate the
    billion digits in no time. Let’s try that:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅三毫秒——发生了什么？看起来我们可以在瞬间计算出十亿位数字。我们来试试：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Not even 10 seconds! `approximation` now holds a billion digits of Pi, calculated
    in only... waaaaait a second! We didn't compare the first few dozen digits to
    the verified digits of Pi to make sure the approximation is precise.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至不到10秒！`approximation`现在包含了十亿位的圆周率，仅计算了……等等！我们没有将前几十位数字与验证过的圆周率数字进行比较，以确保近似值的准确性。
- en: 'So, let’s check:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们检查一下：
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Well, looks like our approximation is only accurate till the 7th digit. What
    a disappointment!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，看起来我们的近似值仅准确到第7位。真让人失望！
- en: So, what just went wrong?
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么，刚刚发生了什么问题？
- en: Why did we get a horrible result? Is Ramanujan’s formula incorrect? Of course
    not! G.H. Hardy himself thought finding Ramanujan’s talent was his greatest math
    contribution.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们得到如此糟糕的结果？拉曼努金的公式不正确吗？当然不是！G.H. 哈代本人认为发现拉曼努金的才华是他最大的数学贡献。
- en: The problem is with the way modern computers store floating point numbers and
    represent them. I won’t go deep into this but refer you to [this Wikipedia page](https://en.wikipedia.org/wiki/Floating-point_arithmetic)
    and [this excellent StackOverflow thread](https://stackoverflow.com/questions/588004/is-floating-point-math-broken).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于现代计算机存储浮点数和表示它们的方式。我不会深入探讨这个问题，但建议你参考[这个维基百科页面](https://en.wikipedia.org/wiki/Floating-point_arithmetic)和[这个出色的StackOverflow讨论](https://stackoverflow.com/questions/588004/is-floating-point-math-broken)。
- en: 'Basically, we are facing a more complex version of the following conundrum:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们面临的是以下难题的更复杂版本：
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Due to limits in precision, errors like above can accumulate, especially for
    irrationals like Pi. Even a small rounding error can compound over multiple operations,
    completely changing the end result.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于精度的限制，上述错误可能会积累，特别是对于像圆周率这样的无理数。即使是一个小的舍入误差，也可能在多次操作中积累，完全改变最终结果。
- en: 'This brings us to a realization: formulas with ratios and simple math won’t
    accurately calculate Pi’s digits quickly.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我们意识到：使用比例和简单数学的公式无法快速准确地计算圆周率的位数。
- en: The big guns or short history of computing
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大牌或者计算机简史
- en: Archimedes approximated Pi by adding more sides to polygons inscribed and circumscribed
    around a circle. But the world has come a long way since then. The two millennia
    old method was simple but it wasn’t built for computers. Sorry, Archimedes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 阿基米德通过增加多边形的边数来近似圆周率，内切和外切于圆。但自那时以来，世界已经走了很长一段路。这个两千年前的方法简单，但它不是为计算机设计的。对不起，阿基米德。
- en: '![](../Images/31020d747b9c265eacbd07be7004463a.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/31020d747b9c265eacbd07be7004463a.png)'
- en: GIF by me using Wolfram.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: GIF由我使用Wolfram制作。
- en: '[](https://demonstrations.wolfram.com/ArchimedesApproximationOfPi/?source=post_page-----4262a4de9f80--------------------------------)
    [## Archimedes'' Approximation of Pi - Wolfram Demonstrations Project'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://demonstrations.wolfram.com/ArchimedesApproximationOfPi/?source=post_page-----4262a4de9f80--------------------------------)
    [## 阿基米德的圆周率近似 - Wolfram演示项目'
- en: A unit circle is displayed. A regular polygon of sides is circumscribed. Another
    regular polygon of sides is…
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示了一个单位圆。一个正多边形被内切。另一个正多边形被……
- en: demonstrations.wolfram.com](https://demonstrations.wolfram.com/ArchimedesApproximationOfPi/?source=post_page-----4262a4de9f80--------------------------------)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: demonstrations.wolfram.com](https://demonstrations.wolfram.com/ArchimedesApproximationOfPi/?source=post_page-----4262a4de9f80--------------------------------)
- en: Of course, Newton had something to say in his time and contributed his converging
    series to approximate Pi as well. But he was able to calculate only 14 digits.
    To do more, he needed to live longer becuase each successive digit required many
    more terms in the series.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，牛顿在他的时代也有所贡献，并且贡献了他的收敛级数来近似圆周率。但他只能计算出14位数字。要计算更多位，他需要活得更久，因为每增加一位需要更多的级数项。
- en: Then came Ramanujan with his formulas that rapidly converged to spit out Pi.
    The ratio we have used earlier was a simplification. For the computers of the
    mid-20th century, the efficiency of his methods was near light-speed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，拉马努金用他的公式迅速收敛并计算π。我们之前使用的比例是一个简化。对于20世纪中期的计算机来说，他的方法的效率几乎是光速。
- en: Till the end of the 20th century, scientists used more algorithms based on fast
    converging series. For example, different variations of Gauss-Legendre algorithm
    broke six different world records from just 16500 digits in 1982 to 24 billion
    in 2002\. But such algorithms were for the rich scientists — they required massive
    compute resources, especially memory.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 到20世纪末，科学家们使用了更多基于快速收敛系列的算法。例如，Gauss-Legendre算法的不同变体在1982年从16500位到2002年的240亿位之间打破了六项世界纪录。但这些算法对于富有的科学家来说才适用——它们需要大量的计算资源，特别是内存。
- en: So, the early 21st century saw the rise of Spigot algorithms. These things could
    calculate digits of [transcendental numbers](https://en.wikipedia.org/wiki/Transcendental_number)
    like Pi sequentially from left to right. This meant they required significantly
    smaller memory as they didn’t need to remember the previous digits to calculate
    the next. But they have the disadvantage of being slower than converging series.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，21世纪初，Spigot算法开始兴起。这些算法可以从左到右顺序计算[超越数](https://en.wikipedia.org/wiki/Transcendental_number)的位数。这意味着它们需要显著较小的内存，因为它们不需要记住之前的位数来计算下一位。但它们的缺点是比收敛系列要慢。
- en: So, what did Google use?
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么，Google使用了什么？
- en: Since Google could throw (waste?) as much resources as they wanted to set a
    world record, they chose [the Chudnovsky algorithm](https://en.wikipedia.org/wiki/Chudnovsky_algorithm).
    This series is based on Ramanujan’s formulas. It has set **seven world records**
    for calculating Pi. The records were set from 2009 to 2022, with all records in
    the trillions.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Google可以投入（浪费？）他们想要的资源来创下世界纪录，他们选择了[Chudnovsky算法](https://en.wikipedia.org/wiki/Chudnovsky_algorithm)。这个系列基于拉马努金的公式。它已经创造了**七项世界纪录**用于计算π。这些记录从2009年到2022年设立，所有记录都在万亿位数级别。
- en: '![](../Images/b5ca1e20c5e6e3f7cfe669c2ea1515e7.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b5ca1e20c5e6e3f7cfe669c2ea1515e7.png)'
- en: The Chudnovsk algorithm. Image from Wikipedia. Wikimedia commons.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Chudnovsky算法。图片来自维基百科。维基媒体共享资源。
- en: In the introduction, I mentioned that Google used a special program called y-cruncher.
    This program can calculate numbers like Pi with trillions of digits. Its ideal
    environments are multi-core systems as it is a multi-threaded software.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍中，我提到Google使用了一个名为y-cruncher的特殊程序。这个程序可以计算像π这样的万亿位数字。它的理想环境是多核系统，因为它是一个多线程软件。
- en: And what an ideal environment Google provided!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 而且Google提供了一个理想的环境！
- en: 'To run the 100 trillion digit experiment, the Compute Engine had these insane
    specifications:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行100万亿位数字的实验，计算引擎具有这些疯狂的规格：
- en: '![](../Images/be230a3d243d117009401529da8b46d1.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/be230a3d243d117009401529da8b46d1.png)'
- en: Image from the Google’s announcement of the record.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自Google的记录公告。
- en: Of course, hardware wasn’t the only factor behind the success of the achievement.
    To learn more about software architecture and little details, visit [the Google
    Cloud](https://cloud.google.com/blog/products/compute/calculating-100-trillion-digits-of-pi-on-google-cloud)
    page.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，硬件并不是成就成功的唯一因素。要了解更多关于软件架构和细节，请访问[Google Cloud](https://cloud.google.com/blog/products/compute/calculating-100-trillion-digits-of-pi-on-google-cloud)页面。
- en: Trying out Chudnovsky
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试使用Chudnovsky
- en: To get a feel for the algorithm, let’s try Chudnovsky on my PC to calculate
    the first 10k digits. I am running a modest AMD Ryzen 9 3200x 12-core CPU with
    a 32GB of RAM.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了感受算法的效果，让我们在我的PC上尝试Chudnovsky来计算前10k位。我正在运行一台配有32GB RAM的AMD Ryzen 9 3200x
    12核CPU的普通电脑。
- en: 'First, let’s write a timer decorator we can add to any Pi-calculator function:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们编写一个计时器装饰器，可以添加到任何π计算函数中：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now, let’s put Chudnovsky into a function. You don’t have to read it as it is
    pretty hairy function (I don’t understand it myself). The only thing it does is
    approximate digits of Pi up to `n_digits` and write them to a text file.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将Chudnovsky放入一个函数中。你不必阅读它，因为这是一个相当复杂的函数（我自己也不理解）。它唯一的作用是近似计算π的`n_digits`位，并将结果写入文本文件中。
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let’s try it for the first 1000 digits:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试计算前1000位：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Even though the function ran under two seconds, it is only accurate up to 13
    decimal points. Why?
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管函数运行时间不到两秒，但它的准确度仅为13位小数。为什么？
- en: First of all, the function is severely underoptimized. `chudnovsky_to_file`
    is a bare-bones Chudnovsky, with no fancy tricks and spices added in. Adding them
    here would break the Medium interface.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，函数严重未优化。`chudnovsky_to_file`是一个基础的Chudnovsky，没有添加任何华丽的技巧或调料。在这里添加它们会破坏Medium界面。
- en: Also, native Python isn’t well-equipped to handle certain operations on massive
    integers or long-precision floats. For example, what’s ruining the above function
    is the square root function in the second line of the function body.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，原生Python在处理大整数或长精度浮点数的某些操作时并不充分准备。例如，导致上述函数问题的是函数体第二行的平方根函数。
- en: To make Chudnovsky faster in Python, read [this excellent (but painfully detailed)
    article](https://www.craig-wood.com/nick/articles/pi-chudnovsky/). It actually
    calculates 1 billion digits in under 10 minutes.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Python中加速Chudnovsky，请阅读[这篇优秀（但痛苦详细）的文章](https://www.craig-wood.com/nick/articles/pi-chudnovsky/)。它实际上在不到10分钟内计算了10亿位数字。
- en: As for us, let’s try an algorithm that’s more or less understandable and doesn’t
    need much alterations.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们来说，让我们尝试一种或多种易于理解且无需过多修改的算法。
- en: Trying a Spigot algorithm
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试Spigot算法
- en: Apart from requiring low memory resources, Spigot algorithms have the unique
    advantage to run indefinitely. This means, as long as you’ve got the time, you
    can calculate transcendental constants to any reasonable digit.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 除了需要较低的内存资源外，Spigot算法还有一个独特的优点，那就是可以无限期运行。这意味着，只要你有时间，你可以计算任意精度的超越常数。
- en: 'This [excellent article](https://www.gavalas.dev/blog/spigot-algorithms-for-pi-in-python/)
    lists many Spigot algorithms in Python, listing them in the order of efficiency.
    For this article, we will choose Gosper’s proven series:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇[优秀的文章](https://www.gavalas.dev/blog/spigot-algorithms-for-pi-in-python/)列出了许多Python中的Spigot算法，并按效率顺序排列。对于这篇文章，我们将选择Gosper的验证系列：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`gospers_pi` is a generator, so we will wrap it inside another function that
    runs it up to `n_digits` and then, writes the digits into a text file:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`gospers_pi`是一个生成器，所以我们将把它包装在另一个函数中，该函数运行到`n_digits`并将数字写入文本文件：'
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, let’s try it on the first 1000:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们试试前1000位：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: It took a fraction of a second and upon comparing the last few digits to the
    verified 1000 digits of Pi, we can see that the algorithm is both fast and correct.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这花了不到一秒钟，并且在将最后几位数字与验证过的1000位π数字进行比较时，我们可以看到该算法既快速又准确。
- en: And now, I will let the function run for 1 million digits and do some editing
    on this article in the meantime.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将让函数运行1百万位数字，同时对这篇文章进行一些编辑。
- en: Conclusion
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: I came to a massive realization when I started the 1-million-digit experiment
    — I should have put milestone checks every 10k or so digits!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当我开始1百万位数字实验时，我意识到一个重大问题——我应该每隔10k位左右设置一个里程碑检查！
- en: It has been hours. The article is edited and done. But the function doesn’t
    seem to stop any time soon. The only thing I know is that my RAM usage went up
    by 1 GB since the start. I will update the results once the function finishes
    (if ever).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 已经过了好几个小时。文章已编辑完成。但函数似乎不会很快停止。我只知道自从开始以来我的RAM使用量增加了1 GB。我会在函数完成（如果有的话）后更新结果。
- en: 'This just shows it: calculating digits of Pi requires great patience and perseverance.
    From scouring the internet for a suitable algorithm to waiting dazedly for the
    program to exit (and hoping the last digits match verified results from the Internet).'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅仅展示了这一点：计算π的位数需要极大的耐心和毅力。从在互联网上寻找合适的算法到呆呆地等待程序退出（并希望最后的数字与互联网上验证的结果相匹配）。
- en: This article also discusses some clear problems with Python. It has limited
    support for high-precision math and has turtle-like speed. But if you endure enough,
    like the article on calculating 1 billion digits in 10 minutes, you’ll be rewarded.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本文还讨论了一些Python的明显问题。它对高精度数学的支持有限，而且速度像乌龟一样慢。但如果你足够耐心，比如计算10亿位数字的文章，你将获得回报。
- en: Thank you for reading!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！
- en: Well, it is finally finished overnight.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，它终于在一夜之间完成了。
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 20k seconds or almost 6 hours. I checked the last four digits against the verified
    million digits of Pi over at piday.org and the results were spot on!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 2万秒或接近6小时。我检查了最后四位数字与piday.org上验证的百万位π数字，结果完全正确！
- en: You can download my million digits from [here](https://raw.githubusercontent.com/BexTuychiev/medium_stories/master/2023/10_october/1_calculating_pi/pi_million_digits.txt)
    (the file is under 1 MB on GitHub).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[这里](https://raw.githubusercontent.com/BexTuychiev/medium_stories/master/2023/10_october/1_calculating_pi/pi_million_digits.txt)下载我的百万位数字（文件在GitHub上小于1
    MB）。
- en: Thank you for sticking to the end!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你坚持到最后！
