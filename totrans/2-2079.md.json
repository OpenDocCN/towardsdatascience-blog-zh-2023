["```py\nimport numpy as np\nimport plotly.graph_objects as go\n\n# Set seed for reproducibility\nnp.random.seed(42)\n\n# Create arrays with the specified distributions\nfirst_ten = np.random.uniform(low=0, high=4, size=10)\nlast_ten = np.random.uniform(low=0, high=4, size=10)\nmiddle_ten = np.random.gamma(shape=2, scale=2, size=10) + 4 # shift the gamma distribution\n\n# Combine the arrays\nmeasurements = np.concatenate((first_ten, middle_ten, last_ten))\n\n# Create x values\nx_values = np.arange(1, 31)\n\n# Create the line chart\nfig = go.Figure(\n    data=go.Scatter(\n        x=x_values, \n        y=measurements, \n        mode='lines+markers')\n    )\n\nfig.update_layout(\n    title='Ad Influence on Web Traffic', \n    xaxis_title='Time', \n    yaxis_title='Visits per Minute',\n    width=1000,\n    height=600\n)\n\nfig.show()\n```", "```py\nimport numpy as np\nimport plotly.graph_objects as go\n\n# Set seed for reproducibility\nnp.random.seed(42)\n\n# Create arrays with the specified distributions\nfirst_ten = np.random.uniform(low=0, high=4, size=10)\nlast_ten = np.random.uniform(low=0, high=4, size=10)\nmiddle_ten = np.random.gamma(shape=2, scale=2, size=10) + 4 # shift the gamma distribution\n\n# Combine the arrays\nmeasurements = np.concatenate((first_ten, middle_ten, last_ten))\n\n# Create x values\nx_values = np.arange(1, 31)\n\n# Calculate combined median\ncombined_median = np.median(np.concatenate((first_ten, last_ten)))\n\n# Create the line chart\nfig = go.Figure()\n\n# Create the line chart\nfig = go.Figure(\n    data=go.Scatter(\n        x=x_values, \n        y=measurements, \n        mode='lines+markers')\n    )\n\n# Add median line\nfig.add_trace(\n    go.Scatter(\n        x=x_values, \n        y=[combined_median]*len(x_values), \n        mode='lines', \n        name='Baseline', \n        line=dict(color='firebrick', width=2, dash='dash'))\n)\n\nfig.update_layout(\n    title='Ad Influence on Web Traffic',\n    xaxis_title='Time',\n    yaxis_title='Visits per Minute',\n    width=1000,\n    height=600\n)\n\nfig.show()\n```", "```py\nimport numpy as np\nimport plotly.graph_objects as go\n\n# Set seed for reproducibility\nnp.random.seed(42)\n\n# Create arrays with the specified distributions\nfirst_ten = np.random.uniform(low=0, high=4, size=10)\nlast_ten = np.random.uniform(low=0, high=4, size=10)\nmiddle_ten = np.random.gamma(shape=2, scale=2, size=10) + 4 # shift the gamma distribution\n\n# Combine the arrays\nmeasurements = np.concatenate((first_ten, middle_ten, last_ten))\n\n# Create x values\nx_values = np.arange(1, 31)\n\n# Calculate combined median\ncombined_median = np.median(np.concatenate((first_ten, last_ten)))\n\n# Create the line chart\nfig = go.Figure()\n\n# Add scatter plot\nfig.add_trace(\n    go.Scatter(\n        x=x_values, \n        y=measurements, \n        mode='lines+markers', \n        name='Web Traffic')\n)\n\n# Add median line\nfig.add_trace(\n    go.Scatter(\n        x=x_values, \n        y=[combined_median]*len(x_values), \n        mode='lines', \n        name='Baseline', \n        line=dict(color='firebrick', width=2, dash='dash'))\n)\n\n# Add vertical line at minute 10\nfig.add_shape(\n    type='line',\n    x0=10, y0=0,\n    x1=10, y1=max(measurements),\n    line=dict(\n        color=\"Purple\",\n        width=3,\n        dash=\"dot\",\n    )\n)\n\n# Add annotation to indicate TV spot\nfig.add_annotation(\n    x=10,\n    y=max(measurements),\n    text=\"TV ad aired\",\n    showarrow=True,\n    arrowhead=1,\n    ax=-100,\n    ay=-25,\n    font=dict(\n        size=16,\n        color=\"Black\"\n    ),\n)\n\nfig.update_layout(\n    title='Ad Influence on Web Traffic',\n    xaxis_title='Time',\n    yaxis_title='Visits per Minute',\n    width=1000,\n    height=600\n)\n\nfig.show()\n```", "```py\nimport numpy as np\nimport plotly.graph_objects as go\n\n# Set seed for reproducibility\nnp.random.seed(42)\n\n# Create arrays with the specified distributions\nfirst_ten = np.random.uniform(low=0, high=4, size=10)\nlast_ten = np.random.uniform(low=0, high=4, size=10)\nmiddle_ten = np.random.gamma(shape=2, scale=2, size=10) + 4 # shift the gamma distribution\n\n# Combine the arrays\nmeasurements = np.concatenate((first_ten, middle_ten, last_ten))\n\n# Create x values\nx_values = np.arange(1, 31)\n\n# Calculate combined median\ncombined_median = np.median(np.concatenate((first_ten, last_ten)))\n\n# Create the line chart\nfig = go.Figure()\n\n# Add scatter plot\nfig.add_trace(\n    go.Scatter(\n        x=x_values, \n        y=measurements, \n        mode='lines+markers', \n        name='Web Traffic')\n)\n\n# Add median line\nfig.add_trace(\n    go.Scatter(\n        x=x_values, \n        y=[combined_median]*len(x_values), \n        mode='lines', \n        name='Baseline', \n        line=dict(color='firebrick', width=2, dash='dash'))\n)\n\n# Add shaded region for the influence of the ad\nfig.add_trace(\n    go.Scatter(\n        x=list(x_values[9:20]) + list(x_values[9:20])[::-1], \n        y=list([combined_median]*11) + list(measurements[9:20])[::-1], \n        fill='toself', \n        fillcolor='rgba(0,200,0,0.2)', \n        line=dict(width=0), \n        hoverinfo=\"skip\", \n        showlegend=True, \n        name='Ad Impact')\n)\n\n# Add vertical line at minute 10\nfig.add_shape(\n    type='line',\n    x0=10, y0=0,\n    x1=10, y1=max(measurements),\n    line=dict(\n        color=\"Purple\",\n        width=3,\n        dash=\"dot\",\n    )\n)\n\n# Add annotation to indicate TV spot\nfig.add_annotation(\n    x=10,\n    y=max(measurements),\n    text=\"TV ad aired\",\n    showarrow=True,\n    arrowhead=1,\n    ax=-100,\n    ay=-25,\n    font=dict(\n        size=16,\n        color=\"Black\"\n    ),\n)\n\nfig.update_layout(\n    title='Ad Influence on Web Traffic',\n    xaxis_title='Time',\n    yaxis_title='Visits per Minute',\n    width=1000,\n    height=600\n)\n\nfig.show()\n```", "```py\nimport numpy as np\nimport plotly.graph_objects as go\n\n# Set seed for reproducibility\nnp.random.seed(42)\n\n# Create arrays with the specified distributions\nfirst_ten = np.random.uniform(low=0, high=4, size=10)\nlast_ten = np.random.uniform(low=0, high=4, size=10)\nmiddle_ten = np.random.gamma(shape=2, scale=2, size=10) + 4 # shift the gamma distribution\n\n# Combine the arrays\nmeasurements = np.concatenate((first_ten, middle_ten, last_ten))\n\n# Create x values\nx_values = np.arange(1, 31)\n\n# Calculate combined median\ncombined_median = np.median(np.concatenate((first_ten, last_ten)))\n\n# Create the line chart\nfig = go.Figure()\n\n# Add baseline region\nfig.add_trace(\n    go.Scatter(\n        x=list(x_values) + list(x_values)[::-1], \n        y=[combined_median]*len(x_values) + [0]*len(x_values), \n        fill='toself', \n        fillcolor='rgba(128, 0, 128, 0.2)', \n        line=dict(width=0), \n        hoverinfo=\"skip\", \n        showlegend=True, \n        name='Baseline')\n)\n\n# Add scatter plot\nfig.add_trace(\n    go.Scatter(\n        x=x_values, \n        y=measurements, \n        mode='lines+markers', \n        name='Web Traffic',\n        line=dict(color='#636EFA'))\n)\n\n# Add median line\nfig.add_trace(\n    go.Scatter(\n        x=x_values, \n        y=[combined_median]*len(x_values), \n        mode='lines', \n        name='Median', \n        line=dict(color='Purple', width=2, dash='dash'))\n)\n\n# Add shaded region for the influence of the ad\nfig.add_trace(\n    go.Scatter(\n        x=list(x_values[9:20]) + list(x_values[9:20])[::-1], \n        y=list([combined_median]*11) + list(measurements[9:20])[::-1], \n        fill='toself', \n        fillcolor='rgba(0,200,0,0.2)', \n        line=dict(width=0), \n        hoverinfo=\"skip\", \n        showlegend=True, \n        name='Ad Impact')\n)\n\n# Add vertical line at minute 10\nfig.add_shape(\n    type='line',\n    x0=10, y0=0,\n    x1=10, y1=max(measurements),\n    line=dict(\n        color=\"Green\",\n        width=3,\n        dash=\"dot\",\n    )\n)\n\n# Add annotation to indicate TV spot\nfig.add_annotation(\n    x=10,\n    y=max(measurements),\n    text=\"TV ad aired\",\n    showarrow=True,\n    arrowhead=1,\n    ax=-100,\n    ay=-25,\n    font=dict(\n        size=16,\n        color=\"Green\"\n    ),\n)\n\n# Add vertical line at minute 20\nfig.add_shape(\n    type='line',\n    x0=20, y0=0,\n    x1=20, y1=max(measurements),\n    line=dict(\n        color=\"Red\",\n        width=3,\n        dash=\"dot\",\n    )\n)\n\n# Add annotation to indicate lift window cutoff\nfig.add_annotation(\n    x=20,\n    y=max(measurements),\n    text=\"Lift window cutoff\",\n    showarrow=True,\n    arrowhead=1,\n    ax=100,\n    ay=-25,\n    font=dict(\n        size=16,\n        color=\"Red\"\n    ),\n)\n\n# Add annotation for lift\nfig.add_annotation(\n    x=15,\n    y=combined_median + (max(measurements[9:20])-combined_median)/4,\n    text=\"Lift due to Ad\",\n    showarrow=False,\n    font=dict(\n        size=18,\n        color=\"Green\"\n    ),\n)\n\n# Add annotation for baseline\nfig.add_annotation(\n    x=15,\n    y=combined_median/2,\n    text=\"Baseline\",\n    showarrow=False,\n    font=dict(\n        size=18,\n        color=\"Purple\"\n    ),\n)\n\nfig.update_layout(\n    title='Ad Influence on Web Traffic',\n    xaxis_title='Time',\n    yaxis_title='Visits per Minute',\n    width=1000,\n    height=600\n)\n\nfig.show()\n```"]