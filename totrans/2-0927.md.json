["```py\nimport tensorflow as tf\nimport tensorflow_probability as tfp\nimport matplotlib.pyplot as plt\nfrom scipy.stats import t\nimport numpy as np\n\ntfd = tfp.distributions\n\n# Sample data\nsample_size = 30.\nsample_mean = 50000.\nsample_stddev = 10000.\nsample_data = tfd.Normal(loc=sample_mean, scale=sample_stddev).sample(sample_size)\n\nplt.hist(sample_data, density=True, alpha=0.5);\n```", "```py\nsample_mean = tf.reduce_mean(sample_data)\nsample_mean\n\n<tf.Tensor: shape=(), dtype=float32, numpy=50212.75>\n```", "```py\n# Standard error of the sample mean\nsample_stddev = tf.math.reduce_std(sample_data)\nstandard_error = sample_stddev / tf.sqrt(sample_size)\n\n# Margin of error\nconfidence_level = 0.95\ndegrees_of_freedom = sample_size - 1\nt_distribution = tfp.distributions.StudentT(df=degrees_of_freedom, loc=0., scale=1.)\n\n# t_distribution.quantile() seems to have a bug\nt_value = t.ppf(confidence_level+(1-confidence_level)/2, df=sample_size-1)\nmargin_of_error = t_value * standard_error\n\nconfidence_interval_lower = sample_mean - margin_of_error\nconfidence_interval_upper = sample_mean + margin_of_error\nconfidence_interval = (confidence_interval_lower.numpy(), confidence_interval_upper.numpy())\nconfidence_interval\n\n(46550.523, 53645.047)\n```", "```py\ndef visualize_output(sample_data, sample_mean, interval, type_interval):\n    plt.hist(sample_data, density=True, alpha=0.5)\n    plt.axvline(x=sample_mean, color='r', linestyle='dashed', linewidth=2)\n    plt.axvline(x=interval[0], color='g', linewidth=2)\n    plt.axvline(x=interval[1], color='g', linewidth=2)\n    plt.legend(['Sample Mean', f'{type_interval} interval'])\n    plt.show()\n\nvisualize_output(sample_data, sample_mean, confidence_interval, 'confidence')\n```", "```py\nmu_prior = 40000.\nsigma_prior = 5000.\nprior = tfd.Normal(loc=mu_prior, scale=sigma_prior)\n```", "```py\nmu_likelihood = np.mean(sample_data)\nsigma_likelihood = np.std(sample_data)\nlikelihood = tfd.Normal(loc=np.mean(sample_data), scale=np.std(sample_data))\n```", "```py\n# Compute the posterior distribution using Bayes' theorem\nvar_posterior = 1 / ((sample_size/(sigma_likelihood**2)) + (1/(sigma_prior**2)))\nmu_posterior = var_posterior * (mu_prior/(sigma_prior**2) + (sample_size*mu_likelihood)/(sigma_likelihood**2))\nposterior = tfd.Normal(mu_posterior, tf.sqrt(var_posterior))\ncredible_interval = (posterior.quantile(0.025).numpy(), posterior.quantile(0.975).numpy())\ncredible_interval\n\n(45801.615148780984, 52224.89311258316)\n```", "```py\nx = np.linspace(30000, 70000, 1000)\n\ny_prior = prior.prob(x)\ny_likelihood = likelihood.prob(x)\ny_posterior = posterior.prob(x)\n\nplt.plot(x,y_prior, label=\"Prior\")\nplt.plot(x,y_likelihood, label=\"Likelihood\")\nplt.plot(x,y_posterior, label=\"Posterior\")\n\nplt.legend();\n```", "```py\nvisualize_output(sample_data, posterior.mean(), (posterior.quantile(0.025), posterior.quantile(0.975)), 'credible')\n```"]