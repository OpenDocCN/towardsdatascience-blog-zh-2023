["```py\npip install pypdfium2\n```", "```py\ndef convert_pdf_to_images(file_path, scale=300/72):\n\n    pdf_file = pdfium.PdfDocument(file_path)\n\n    page_indices = [i for i in range(len(pdf_file))]\n\n    renderer = pdf_file.render(\n        pdfium.PdfBitmap.to_pil,\n        page_indices = page_indices, \n        scale = scale,\n    )\n\n    final_images = [] \n\n    for i, image in zip(page_indices, renderer):\n\n        image_byte_array = BytesIO()\n        image.save(image_byte_array, format='jpeg', optimize=True)\n        image_byte_array = image_byte_array.getvalue()\n        final_images.append(dict({i:image_byte_array}))\n\n    return final_images\n```", "```py\ndef display_images(list_dict_final_images):\n\n    all_images = [list(data.values())[0] for data in list_dict_final_images]\n\n    for index, image_bytes in enumerate(all_images):\n\n        image = Image.open(BytesIO(image_bytes))\n        figure = plt.figure(figsize = (image.width / 100, image.height / 100))\n\n        plt.title(f\"----- Page Number {index+1} -----\")\n        plt.imshow(image)\n        plt.axis(\"off\")\n        plt.show()\n```", "```py\nconvert_pdf_to_images = convert_pdf_to_images('Experimentation_file.pdf')\ndisplay_images(convert_pdf_to_images)\n```", "```py\npip install pytesseract\n```", "```py\nfrom pytesseract import image_to_string  \n\ndef extract_text_with_pytesseract(list_dict_final_images):\n\n    image_list = [list(data.values())[0] for data in list_dict_final_images]\n    image_content = []\n\n    for index, image_bytes in enumerate(image_list):\n\n        image = Image.open(BytesIO(image_bytes))\n        raw_text = str(image_to_string(image))\n        image_content.append(raw_text)\n\n    return \"\\n\".join(image_content) \n```", "```py\ntext_with_pytesseract = extract_text_with_pytesseract(convert_pdf_to_images)\nprint(text_with_pytesseract)\n```", "```py\nThis document provides a quick summary of some of Zoumanaâ€™s article on Medium.\nIt can be considered as the compilation of his 80+ articles about Data Science, Machine Learning and\n\nMachine Learning Operations.\n\nWhether you are just getting started or you're an experienced professional looking to upskill, these\n\nmaterials can be helpful.\n\nData Science section covers basic to advanced\nconcepts such as statistics, model evaluation\nmetrics, SQL queries, NoSQL courses, data\nvisualization using Tableau and #powerbi, and\nmany more.\n\nLink: httos://Inkd.in/g8zcS_vE\n\nMLOps chapter explains how to build and\ndeploy models using different strategies such as\nDocker containers, and GitHub actions on AWS\nEC2 instances, Azure. Also, it covers how to build\nREST APIs to serve your models.\n\nLink: httos://Inkd.in/gyiUsdgz\n\nNatural Language Processing Covers simple NLP\nconcepts to more advanced ones such as\nTransformers and their applications in Finance,\nScience, etc.\n\nLink: httos://Inkd.in/gBdZbHty\n\nComputer Vision section covers SOTA models\n(e.g. YOLO) and different technics to mitigate\n\noverfitting when training computer vision\nmodels.\n\nLink: httos://Inkd.in/gDY8ZqVs\n\nPython section showcases multiple libraries to\nfacilitate one's daily life, especially when dealing\nwith PDF, and Word files when scraping data\nfrom the web, and even benchmarking analysis\nto help choose the right data processing tool.\nLink: https://Inkd.in/gH HUMM9\n\nPandas & Python Tricks Covers my daily tips and\ntricks on LinkedIn. And, there are plenty of those,\nespecially on my\n\nwebsite https://Inkd.in/gPbichB5\nhttps://Inkd.in/QgUs8inuZ\n\nMachine Learning part is about Fexplainable Al,\nclustering, classification tasks, etc.\n\nLink: httos://Inkd.in/gJdSvQns\n```", "```py\n!pip install opencv-python-headless==4.1.2.30\n```", "```py\n!pip install easyocr\n```", "```py\nfrom easyocr import Reader\n\n# Load model for the English language\nlanguage_reader = Reader([\"en\"])\n```", "```py\ndef extract_text_with_easyocr(list_dict_final_images):\n\n    image_list = [list(data.values())[0] for data in list_dict_final_images]\n    image_content = []\n\n    for index, image_bytes in enumerate(image_list):\n\n        image = Image.open(BytesIO(image_bytes))\n        raw_text = language_reader.readtext(image)\n        raw_text = \" \".join([res[1] for res in raw_text])\n\n        image_content.append(raw_text)\n\n    return \"\\n\".join(image_content)\n```", "```py\ntext_with_easy_ocr = extract_text_with_easyocr(convert_pdf_to_images)\nprint(text_with_easy_ocr)\n```", "```py\n!pip install PyPDF2\n```", "```py\ndef extract_text_with_pyPDF(PDF_File):\n\n    pdf_reader = PdfReader(PDF_File)\n\n    raw_text = ''\n\n    for i, page in enumerate(pdf_reader.pages):\n\n        text = page.extract_text()\n        if text:\n            raw_text += text\n\n    return raw_text\n```", "```py\ntext_with_pyPDF = extract_text_with_pyPDF(\"Experimentation_file.pdf\")\nprint(text_with_pyPDF)\n```", "```py\n!pip install langchain\n```", "```py\nfrom langchain.document_loaders.image import UnstructuredImageLoader.\n```", "```py\ndef extract_text_with_langchain_image(list_dict_final_images):\n\n    image_list = [list(data.values())[0] for data in list_dict_final_images]\n    image_content = []\n\n    for index, image_bytes in enumerate(image_list):\n\n        image = Image.open(BytesIO(image_bytes))\n        loader = UnstructuredImageLoader(image)\n        data = loader.load()\n        raw_text = data[index].page_content\n\n        image_content.append(raw_text)\n\n    return \"\\n\".join(image_content)\n```", "```py\ntext_with_langchain_image = extract_text_with_langchain_image(convert_pdf_to_images)\nprint(text_with_langchain_image)\n```", "```py\nfrom langchain.document_loaders import UnstructuredFileLoader\n\ndef extract_text_with_langchain_pdf(pdf_file):\n\n    loader = UnstructuredFileLoader(pdf_file)\n    documents = loader.load()\n    pdf_pages_content = '\\n'.join(doc.page_content for doc in documents)\n\n    return pdf_pages_content\n```", "```py\ntext_with_langchain_files = extract_text_with_langchain_pdf(\"Experimentation_file.pdf\")\nprint(text_with_langchain_files)\n```"]