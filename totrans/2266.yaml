- en: Using DuckDB with Polars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/using-duckdb-with-polars-e15a865e48a3](https://towardsdatascience.com/using-duckdb-with-polars-e15a865e48a3)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn how to use SQL to query your Polars DataFrames
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/?source=post_page-----e15a865e48a3--------------------------------)[![Wei-Meng
    Lee](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----e15a865e48a3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e15a865e48a3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e15a865e48a3--------------------------------)
    [Wei-Meng Lee](https://weimenglee.medium.com/?source=post_page-----e15a865e48a3--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e15a865e48a3--------------------------------)
    ·6 min read·Apr 14, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cbb9711706d8c7fc20b5950a3119d9d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Hans-Jurgen Mager](https://unsplash.com/@hansjurgen007?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'In my previous few articles on data analytics, I talk about two important up-and-coming
    libraries that are currently gaining a lot of tractions in the industry:'
  prefs: []
  type: TYPE_NORMAL
- en: '**DuckDB** — where you can query your dataset in-memory using SQL statements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Polars** — a much more efficient DataFrame library compared to the venerable
    Pandas library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](https://levelup.gitconnected.com/using-duckdb-for-data-analytics-bab3e3ff032c?source=post_page-----e15a865e48a3--------------------------------)
    [## Using DuckDB for Data Analytics'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to use SQL to perform data analytics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: levelup.gitconnected.com](https://levelup.gitconnected.com/using-duckdb-for-data-analytics-bab3e3ff032c?source=post_page-----e15a865e48a3--------------------------------)
    [](/getting-started-with-the-polars-dataframe-library-6f9e1c014c5c?source=post_page-----e15a865e48a3--------------------------------)
    [## Getting Started with the Polars DataFrame Library
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to manipulate tabular data using the Polars dataframe library (and
    replace Pandas)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/getting-started-with-the-polars-dataframe-library-6f9e1c014c5c?source=post_page-----e15a865e48a3--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: What about combining the power of these two libraries?
  prefs: []
  type: TYPE_NORMAL
- en: In fact, you can directly query a Polars dataframe through DuckDB, using SQL
    statements.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'So what are the benefits of querying your Polars dataframe using SQL? Despite
    the ease of use, manipulating Polars dataframes still require a bit of practise
    and a relatively steep learning curve. But since most developers are already familiar
    with SQL, isn’t it more convenient to manipulate the dataframes directly using
    SQL? Using this approach, developers have the best of both worlds:'
  prefs: []
  type: TYPE_NORMAL
- en: the ability to query Polars dataframes using all the various functions, or
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: use SQL for cases where it is much more natural and easier to extract the data
    that they want
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this article, I will give you some examples of how you can make use of SQL
    through DuckDB to query your Polars dataframes.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Polars and DuckDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this article, I am using Jupyter Notebook. Ensure that you have installed
    Polars and DuckDB using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Polars DataFrame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started, let’s create a Polars DataFrame by hand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s how the dataframe looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4bb866b4933fae6c0685796b7e4a1e30.png)'
  prefs: []
  type: TYPE_IMG
- en: All images by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Say, you now want to find all phones from Apple which has sales of more than
    80\. You can use the `filter()` function in Polars, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'And the result looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f098ddc50e2829d6a26b202146a398e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Using SQL on Polars DataFrames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s now do the exact query that we did in the previous section, except that
    this time round we will use DuckDB with a SQL statement. But first, let’s select
    all the rows in the dataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4d50095af9274b5ae4e2576f9e17f367.png)'
  prefs: []
  type: TYPE_IMG
- en: You can directly reference the `df` dataframe from your SQL statement.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Using DuckDB, you issue a SQL statement using the `sql()` function. Alternatively,
    the `query()` function also works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `result` variable is a `duckdb.DuckDBPyRelation` object. Using this object,
    you can perform quite a number of different tasks, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Getting the mean of the **Sales** column:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/091914145b671517fd57378f896f92ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Describing the dataframe:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a0c80c8875f5263c64246451a45d4d28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Applying a scaler function to the columns in the dataframe:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/73659ac83d2d352e7c9b25c89aabcbe0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Reordering the dataframe:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/dc415b24e3fa94c1c3333e8f90e64c34.png)'
  prefs: []
  type: TYPE_IMG
- en: But the easiest way is to query the Polars DataFrame is to use SQL directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you want to get all the rows with sales greater than 80, simply
    use the `sql()` function with the SQL statement below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/040257cca6b5961a73c12a190c0f5963.png)'
  prefs: []
  type: TYPE_IMG
- en: The `pl()` function converts the `duckdb.DuckDBPyRelation` object to a Polars
    DataFrame. If you want to convert it to a Pandas DataFrame instead, use the `df()`
    function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you want to get all the rows whose model name starts with “*iPhone*”, then
    use the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/db8c004f556c41e592182fe2b9df15f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want all devices from *Apple* and *Xiao Mi*, then use the following
    SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8e98424eb7dd2ce0c60aee96851c10dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The real power of using DuckDB with Polars DataFrame is when you want to query
    from multiple dataframes. Consider the following three CSV files from the **2015
    Flights Delay** dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '**2015 Flights Delay dataset** — [https://www.kaggle.com/datasets/usdot/flight-delays](https://www.kaggle.com/datasets/usdot/flight-delays).
    **Licensing —** [CC0: Public Domain](https://creativecommons.org/publicdomain/zero/1.0/)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: flights.csv
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: airlines.csv
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: airports.csv
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s load them up using Polars:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The above statements use lazy evaluation to load up the three CSV files. This
    ensures that any queries on the dataframes are not performed until all the queries
    are optimized. The `collect()` function forces Polars to load the CSV files into
    dataframes.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here is how the `df_flights`, `df_airlines`, and `df_airports` dataframes look
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/076397b1b57dcc0891cadea711ca2e06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Suppose you want to count the number of times an airline has a delay , and
    at the same time display the name of each airline, here is the SQL statement that
    you can use using the `df_airlines` and `df_flights` dataframes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ef73a955174fd254140ac86f4113281b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to count the number of airports in each state and sort the count
    in descending order, you can use the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c7e20ebbe013dcef94abc9c60f0fa139.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, suppose you want to know which airline has the highest average delay.
    You can use the following SQL statement to calculate the various statistics, such
    as *minimum arrival delay*, *maximum array delay*, *mean arrival delay*, and *standard
    deviation of arrival delay*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7a4765e06988734c7d87d811ce38a1ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Based on the mean arrival delay, we can see that the AS airline is the one with
    the shortest delay (as the value is negative, this means most of the time it arrives
    earlier!) and NK airline is the one with the longest delay. Want to know what
    is the AS airline? Try it out using what you have just learned! I will leave it
    as an exercise and the answer is at the end of this article.
  prefs: []
  type: TYPE_NORMAL
- en: '**If you like reading my articles and that it helped your career/study, please
    consider signing up as a Medium member. It is $5 a month, and it gives you unlimited
    access to all the articles (including mine) on Medium. If you sign up using the
    following link, I will earn a small commission (at no additional cost to you).
    Your support means that I will be able to devote more time on writing articles
    like this.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/membership?source=post_page-----e15a865e48a3--------------------------------)
    [## Join Medium with my referral link - Wei-Meng Lee'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Wei-Meng Lee (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----e15a865e48a3--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this short article, I illustrated how DuckDB and Polars can be used together
    to query your dataframes. Utilizing both libraries gives you the best of both
    worlds — using a familiar querying language (which is SQL) to query an efficient
    dataframe. Go ahead and try it out using your own dataset and share with us how
    it has helped your data analytics processes.
  prefs: []
  type: TYPE_NORMAL
- en: '*Answer to quiz:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
