["```py\nclear; close all; clc\n\na = 8; da = 2; % Example a = 8 with uncertainty 2\n\nb = 4; db = 1; % Example b = 4 with uncertainty 1\n\nc = a — b; dc = sqrt(da*da + db*db); % Analytical error propagation\n\ndisp(‘Expected’)\ndisp([num2str(c), ‘ +/- ‘, num2str(dc)]) % Print\nfprintf(‘\\n’)\n\n% =============== Start here Monte Carlo simulation\n\nc_mc = []; % Will hold all results\n\nfor i=1:100000\n a_mc = normrnd(a, da); % Get a random number with a Gaussian distribution around a\n b_mc = normrnd(b, db); % Same around b\n\n c_mc = [c_mc; a_mc — b_mc]; % Run calculation and store\nend\n\ndisp(‘From MonteCarlo with 10 iterations’)\ndisp([num2str(mean(c_mc(1:10))), ‘ +/- ‘, num2str(std(c_mc(1:10)))]) % Print result for 10 iterations\nfprintf(‘\\n’)\n\ndisp(‘From MonteCarlo with 100 iterations’)\ndisp([num2str(mean(c_mc(1:100))), ‘ +/- ‘, num2str(std(c_mc(1:100)))]) % Result for 100 iterations\nfprintf(‘\\n’)\n\ndisp(‘From MonteCarlo with 1000 iterations’)\ndisp([num2str(mean(c_mc(1:1000))), ‘ +/- ‘, num2str(std(c_mc(1:1000)))]) % Result for 1000 iterations\nfprintf(‘\\n’)\n\ndisp(‘From MonteCarlo with 10000 iterations’)\ndisp([num2str(mean(c_mc(1:10000))), ‘ +/- ‘, num2str(std(c_mc(1:10000)))]) % Result for 10000 iterations\nfprintf(‘\\n’)\n\ndisp('From MonteCarlo with 100000 iterations')\ndisp([num2str(mean(c_mc(1:100000))), ' +/- ', num2str(std(c_mc(1:100000)))]) % Result for 100000 iterations\nfprintf('\\n')\n```", "```py\nclear; close all; clc\n\na = 5; b = 4;    % Slope and intercept\n\nx = [1:10];    % x from 1 to 10\n\ny = a * x + b + normrnd(0, 1, 1, 10);   % Simulate data and add Gaussian noise centered at 0 and with a width of +/- 1\n```", "```py\nanalyticfit = fitlm(x,y)   % fitlm performs a linear fit and displays the results, which include\n                           % the analytically-derived slope and intercept and their uncertainties\n```", "```py\nanalyticfit = \n\nLinear regression model:\n\nEstimated Coefficients:\n                   Estimate      SE       tStat       pValue  \n                   ________    _______    ______    __________\n\n    (Intercept)     3.6469     0.94449    3.8612     0.0048006\n    x1              5.0534     0.15222    33.198    7.3956e-10\n\nNumber of observations: 10, Error degrees of freedom: 8\nRoot Mean Squared Error: 1.38\nR-squared: 0.993,  Adjusted R-Squared: 0.992\nF-statistic vs. constant model: 1.1e+03, p-value = 7.4e-10\n```", "```py\na_mc = [];    % Vector with slopes from Monte Carlo run\nb_mc = [];    % Vector with intercepts from Monte Carlo run\n\nfor i=1:10000          % 10k iterations, and in each:\n yy = normrnd(y,1);    % Create temporal vector where noise is added to the experimental y values\n P = polyfit(x,yy,1);  % Fit that vector to x using linear regresion as a polynomial of degree 1\n\n b_mc = [b_mc; P(1)]; % Store all a values\n a_mc = [a_mc; P(2)]; % \nend\n\nfprintf(‘\\n’)\ndisp(‘From Monte Carlo with 10 iterations’)\ndisp([‘Intercept = ‘, num2str(mean(a_mc(1:10))), ‘ +/- ‘, num2str(std(a_mc(1:10)))])\ndisp([‘Slope = ‘, num2str(mean(b_mc(1:10))), ‘ +/- ‘, num2str(std(b_mc(1:10)))])\nfprintf(‘\\n’)\n\ndisp(‘From Monte Carlo with 100 iterations’)\ndisp([‘Intercept = ‘, num2str(mean(a_mc(1:100))), ‘ +/- ‘, num2str(std(a_mc(1:100)))])\ndisp([‘Slope = ‘, num2str(mean(b_mc(1:100))), ‘ +/- ‘, num2str(std(b_mc(1:100)))])\nfprintf(‘\\n’)\n\ndisp(‘From Monte Carlo with 1000 iterations’)\ndisp([‘Intercept = ‘, num2str(mean(a_mc(1:1000))), ‘ +/- ‘, num2str(std(a_mc(1:1000)))])\ndisp([‘Slope = ‘, num2str(mean(b_mc(1:1000))), ‘ +/- ‘, num2str(std(b_mc(1:1000)))])\nfprintf(‘\\n’)\n\ndisp(‘From Monte Carlo with 10000 iterations’)\ndisp([‘Intercept = ‘, num2str(mean(a_mc(1:10000))), ‘ +/- ‘, num2str(std(a_mc(1:10000)))])\ndisp([‘Slope = ‘, num2str(mean(b_mc(1:10000))), ‘ +/- ‘, num2str(std(b_mc(1:10000)))])\nfprintf(‘\\n’)\n```", "```py\n[b1,res,J] = nlinfit(x,y,’AuxiliaryFunctionForNlinfit’,guesses);\n\nb1 = b1';\ndof = length(x)-length(b1);\nsfit1 = norm(res)/sqrt(dof);\nsd1 = sfit1*sqrt(diag(inv(J’*J)));\n```", "```py\nfor mcIteration = 1:10000\n\n mcIteration   % Prints in what iteration the loop is\n\n for j=1:numel(yexp)     % Take experimental y values and add noise (more noise when higher)\n   yy(j) = normrnd(yexp(j), yexp(j) * 0.05); % In the example, the error is 5 % of the value\n end\n\n [b1,res,J]=nlinfit(x,yy,’AuxFunction’,beta0, opts);\n predictedy = AuxFunction(b1,x);\n\n mc_results = [mc_results; b1];\nend\n\ndisp([‘-’])\ndisp([‘-’])                     % Printe the results of the simulation\ndisp([‘================== MONTE CARLO SIMULATION’])\ndisp([‘R21 = ‘,num2str(mean(mc_results(:,1))), ‘ +/- ‘, num2str(std(mc_results(:,1)))])\ndisp([‘R22 = ‘,num2str(mean(mc_results(:,2))), ‘ +/- ‘, num2str(std(mc_results(:,2)))])\ndisp([‘kEX = ‘,num2str(mean(mc_results(:,3))), ‘ +/- ‘, num2str(std(mc_results(:,3)))])\ndisp([‘dw = ‘,num2str(mean(mc_results(:,4))), ‘ +/- ‘, num2str(std(mc_results(:,4)))])\ndisp([‘p1_0 = ‘,num2str(mean(mc_results(:,5))), ‘ +/- ‘, num2str(std(mc_results(:,5)))])\ndisp([‘p1_20 = ‘,num2str(mean(mc_results(:,6))), ‘ +/- ‘, num2str(std(mc_results(:,6)))])\ndisp([‘p1_40 = ‘,num2str(mean(mc_results(:,7))), ‘ +/- ‘, num2str(std(mc_results(:,7)))])\ndisp([‘p1_50 = ‘,num2str(mean(mc_results(:,8))), ‘ +/- ‘, num2str(std(mc_results(:,8)))])\n```"]