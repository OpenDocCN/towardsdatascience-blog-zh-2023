- en: How to Connect to GCP Cloud SQL with Cloud SQL Auth Proxy in Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-connect-to-gcp-cloud-sql-with-cloud-sql-auth-proxy-in-docker-99bdf810c498](https://towardsdatascience.com/how-to-connect-to-gcp-cloud-sql-with-cloud-sql-auth-proxy-in-docker-99bdf810c498)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn a standard way to connect dockerized applications to GCP Cloud SQL instances
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://lynn-kwong.medium.com/?source=post_page-----99bdf810c498--------------------------------)[![Lynn
    G. Kwong](../Images/b9a05b6587db5ca41c1d8264adda5b06.png)](https://lynn-kwong.medium.com/?source=post_page-----99bdf810c498--------------------------------)[](https://towardsdatascience.com/?source=post_page-----99bdf810c498--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----99bdf810c498--------------------------------)
    [Lynn G. Kwong](https://lynn-kwong.medium.com/?source=post_page-----99bdf810c498--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----99bdf810c498--------------------------------)
    ·9 min read·Feb 20, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ab898b9635bf96960353af4de7d4cb3b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by WilliamsCreativity (Servers Data) in Pixabay
  prefs: []
  type: TYPE_NORMAL
- en: Cloud SQL on the Google Cloud Platform (GCP) is a great service if you want
    to host your relational databases in the cloud. There are some standard ways to
    connect to Cloud SQL from your GCP resources like Cloud Run, Compute engine, etc.
    However, it’s not as well documented regarding how to connect your dockerized
    application to Cloud SQL.
  prefs: []
  type: TYPE_NORMAL
- en: The Cloud SQL Auth proxy is the recommended way to connect your dockerized applications
    to Cloud SQL. It provides secure access to your Cloud SQL instances without the
    need for authorized networks or for configuring SSL.
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we will introduce how to use Cloud SQL Auth proxy in various ways,
    with a focus on how to write `docker-compose.yaml` file for connecting dockerized
    applications to Cloud SQL instances.
  prefs: []
  type: TYPE_NORMAL
- en: Preparation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, I assume you already have a GCP Cloud SQL instance available.
    The creation of a Cloud SQL instance is generally done by a system or DevOps engineer.
    However, if you work on your own projects or just want to do it for learning purposes,
    you can create one by yourself. Head to the GCP console and follow the instructions,
    it should be fairly straightforward to create one. Remember to create a DB user
    which will be used later.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to run the code in this post on your personal laptop or desktop,
    it’s recommended to set up your local environment to work with GCP.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure your Google account or service account has at least the “*Cloud SQL
    Client*” role. It can also be assigned the “Cloud SQL Editor” or “Cloud SQL Admin”
    role if applicable.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the Cloud SQL Admin API is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Use the Cloud SQL Auth proxy command directly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some occasions when using the Cloud SQL Auth proxy command directly
    (without using Docker) is preferable. For example, when you want to run the command
    as a startup script or make it as a service on your bare metal machine or Cloud
    virtual machine (VM).
  prefs: []
  type: TYPE_NORMAL
- en: Learning the Cloud SQL Auth proxy command is also helpful for use in Docker
    as the command is actually the same, just the latter is run in a Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to download the binary file of the Cloud SQL Auth proxy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can find the latest version of Cloud SQL Auth proxy in its GitHub repo.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we can use Cloud SQL Auth proxy to connect to our Cloud SQL instance,
    please check the comments below which include context-wise explanations for each
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that an ampersand (&) is put at the end of the `cloud-sql-proxy` command
    line so we can run Cloud SQL Auth proxy in another process in the background.
    In this way, we won’t accidentally close the connection and don’t need to open
    a new tab if we want to use a SQL client to connect to our SQL instance immediately.
  prefs: []
  type: TYPE_NORMAL
- en: We can use the `jobs` command to see the processes running in the background.
    We can also use `fg %N` or `kill %N` (where `N` is the number returned by `jobs`)
    to bring the process to the foreground or to kill it.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can then connect to your SQL instance with your SQL client or in your application
    with some libraries like SQLAlchemy.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a MySQL client, the command is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that the host is `127.0.0.1`, namely, our local host as we are using a
    proxy to connect to our database.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to write complex SQL queries, it’s highly recommended to use a graphical
    tool like DBeaver, which is a free universal tool for managing various databases.
    It has great support for syntax highlighting, autocompletion, and many other fantastic
    features. It’s like a graphical version of SQLAlchemy. If you haven’t tried it
    before, it’s well worth trying and you will find it outperforms most other tools.
  prefs: []
  type: TYPE_NORMAL
- en: Use the Cloud SQL Auth proxy with Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also start Cloud SQL Auth proxy with Docker, which is normally suitable
    when you don’t want to or cannot install `cloud-sql-proxy`.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s pretty straightforward to start the Cloud SQL Auth proxy with Docker,
    you just need to follow these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note that `-p 127.0.0.1:3306` specifies that the Cloud SQL Auth proxy is not
    exposed outside the local host, whereas `--address 0.0.0.0` is used to make the
    port accessible outside of the Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: It’s not very common to start the Cloud SQL Auth proxy with Docker directly.
    A more useful way is to use Docker Compose as we will see in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Use the Cloud SQL Auth proxy with Docker Compose
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Normally we don’t use Docker to start a standalone container for the Cloud SQL
    Auth proxy. Instead, we specify it together with our application in a `docker-compose.yaml`
    file. In this way, our application can be dockerized properly and can be installed
    by all developers on their computers together with the database dependencies required.
  prefs: []
  type: TYPE_NORMAL
- en: We will see how to put a FastAPI microservice and Cloud SQL Auth proxy in the
    same `docker-compose.yaml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'But first, let’s see how to create a `docker-compose.yaml` file just for the
    Cloud SQL Auth proxy because there are some details that we should get clear with
    first. Our initial `docker-compose.yaml` file will have the content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As we see, the settings are the same as the ones above for using Docker directly.
    Note that for the `command` key, we should not specify the `cloud-sql-proxy` command
    as it’s specified inside the Docker container automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we can bring up the `cloudsql` service by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Normally as a developer, we would have permission to access our databases with
    our personal Google accounts. If you have logged into GCP with `gcloud auth login`,
    you can just bind the `~/.config/gcloud` folder to the container and don’t need
    to provide a service account key file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This is the preferable way for local development because using a service account
    key file has the risk of leaking it and causing security issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if you bring up the `cloudsql` service with this `docker-compose.yaml`
    file directly, you will normally see this error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The reason is that we are binding the `~/.config/gcloud` folder from our local
    host to a folder in the container which will be used by the `nonroot` user. Therefore,
    we need to change the permissions for the `~/.config/gcloud` folder so it can
    be accessed by the `nonroot` user in the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: These two commands make the `~/.config/gcloud/` folder and its subfolders, as
    well as all the content, accessible to other users (non-owner or group users).
    Please check [this post](https://levelup.gitconnected.com/some-linux-commands-that-can-boost-your-work-efficiency-dramatically-9dc802a10618)
    if you want to know more about these commands.
  prefs: []
  type: TYPE_NORMAL
- en: If you bring up the service again, everything should work properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s add our FastAPI application to the `docker-compose.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Key points for this `docker-compose.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: The application and Cloud proxy services must have the same network. Otherwise,
    the database cannot be accessed in the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Some non-sensitive environment variables are set as plain text by the `environment`
    key, and sensitive ones by the secret file `secrets.env`. This file should not
    be added to the repository for version control.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The application is set to depend on the Cloud proxy so the database can always
    be accessible when the application is up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A special environment variable `PYTHONPATH` is set to `/app:.:..` to make it
    easier to import the modules by relative or absolute paths.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can use Pydantic to read the environment variables in our application, which
    is really convenient:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The above code can be used as a template for any Python microservice.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our simple application, we can read our users'' data with a [FastAPI](https://levelup.gitconnected.com/build-apis-with-fastapi-in-python-all-essentials-you-need-to-get-started-6bf9fa90c6b8)
    dependency injection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[This GitHub repo](https://github.com/lynnkwong/cloudsql-proxy-demo) contains
    all the code for this post. It is recommended to check the related posts for [Pydantic](https://lynn-kwong.medium.com/how-to-use-pydantic-to-read-environment-variables-and-secret-files-in-python-8a6b8c56381c),
    [SQLAlchemy](https://levelup.gitconnected.com/learn-the-basics-and-get-started-with-sqlalchemy-orm-from-scratch-66c8624b069),
    and [FastAPI](https://levelup.gitconnected.com/build-apis-with-fastapi-in-python-all-essentials-you-need-to-get-started-6bf9fa90c6b8)
    if you want to dive into the code. These are all very popular libraries for Python
    developers and are well worth being added to your toolset.'
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we have introduced how to use Cloud SQL Auth proxy on a bare metal
    machine or virtual machine directly. Different authenticating methods are introduced,
    including using default authentication and a service account key file.
  prefs: []
  type: TYPE_NORMAL
- en: We have also introduced how to use Docker to start the Cloud SQL Auth proxy
    directly. However, it’s not recommended as it’s not portable and is thus difficult
    to share the settings with other developers. A preferable way is to use a`docker-compose.yaml`
    file to connect our dockerized applications to Cloud SQL instances.
  prefs: []
  type: TYPE_NORMAL
- en: A simple but practical example of how to use the Cloud SQL Auth proxy in a real
    project is provided which can serve as a template for your own projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Related articles:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[How to Connect to GCP Cloud SQL Instances in Cloud Run Services](/how-to-connect-to-gcp-cloud-sql-instances-in-cloud-run-servies-1e60a908e8f2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build APIs with FastAPI in Python — All Essentials You Need to Get Started](https://levelup.gitconnected.com/build-apis-with-fastapi-in-python-all-essentials-you-need-to-get-started-6bf9fa90c6b8)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
