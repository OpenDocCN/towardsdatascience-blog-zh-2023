- en: 'Goodbye os.path: 15 Pathlib Tricks to Quickly Master The File System in Python'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 告别 os.path：15 个 Pathlib 技巧迅速掌握 Python 文件系统
- en: 原文：[https://towardsdatascience.com/goodbye-os-path-15-pathlib-tricks-to-quickly-master-the-file-system-in-python-881213ca7c21](https://towardsdatascience.com/goodbye-os-path-15-pathlib-tricks-to-quickly-master-the-file-system-in-python-881213ca7c21)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/goodbye-os-path-15-pathlib-tricks-to-quickly-master-the-file-system-in-python-881213ca7c21](https://towardsdatascience.com/goodbye-os-path-15-pathlib-tricks-to-quickly-master-the-file-system-in-python-881213ca7c21)
- en: No headaches and unreadable code from `os.path`
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不再有`os.path`带来的头疼和难以阅读的代码
- en: '[](https://ibexorigin.medium.com/?source=post_page-----881213ca7c21--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----881213ca7c21--------------------------------)[](https://towardsdatascience.com/?source=post_page-----881213ca7c21--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----881213ca7c21--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----881213ca7c21--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ibexorigin.medium.com/?source=post_page-----881213ca7c21--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----881213ca7c21--------------------------------)[](https://towardsdatascience.com/?source=post_page-----881213ca7c21--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----881213ca7c21--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----881213ca7c21--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----881213ca7c21--------------------------------)
    ·7 min read·Apr 7, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----881213ca7c21--------------------------------)
    ·阅读时间 7 分钟·2023 年 4 月 7 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/d29d81ae086f20c107547e340856efe7.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d29d81ae086f20c107547e340856efe7.png)'
- en: A robot pal. — Via Midjourney
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人伙伴。 — 来自 Midjourney
- en: 'Pathlib may be my favorite library (after Sklearn, obviously). And given there
    are over 130 thousand libraries, that’s saying something. Pathlib helps me turn
    code like this written in `os.path`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Pathlib 可能是我最喜欢的库（显然在 Sklearn 之后）。考虑到有超过 13 万个库，这已经很说明问题了。Pathlib 帮助我将像这样的代码从
    `os.path` 转换过来：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'into this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为如下内容：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Pathlib came out in Python 3.4 as a replacement for the nightmare that was
    `os.path`. It also marked an important milestone for Python language on the whole:
    they finally turned every single thing into an object (even [nothing](https://docs.python.org/3/c-api/none.html)).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Pathlib 于 Python 3.4 中推出，作为替代 `os.path` 的噩梦。它还标志着 Python 语言的一个重要里程碑：他们终于将每一件事都变成了对象（即使是
    [nothing](https://docs.python.org/3/c-api/none.html)）。
- en: The biggest drawback of `os.path` was treating system paths as strings, which
    led to unreadable, messy code and a steep learning curve.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`os.path` 的最大缺陷是将系统路径视为字符串，这导致了难以阅读、混乱的代码和陡峭的学习曲线。'
- en: By representing paths as fully-fledged **objects**, Pathlib solves all these
    issues and introduces elegance, consistency, and a breath of fresh air into path
    handling.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将路径表示为完全成熟的 **对象**，Pathlib 解决了所有这些问题，并为路径处理带来了优雅、一致性和一丝清新。
- en: And this long-overdue article of mine will outline some of the best functions/features
    and tricks of `pathlib` to perform tasks that would have been truly horrible experiences
    in `os.path`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇我一直拖延的文章将概述一些 `pathlib` 的最佳函数/特性和技巧，以执行那些在 `os.path` 中会是极其糟糕的任务。
- en: Learning these features of Pathlib will make everything related to paths and
    files easier for you as a data professional, especially during data processing
    workflows where you have to move around thousands of images, CSVs, or audio files.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 学习这些 Pathlib 的功能将使你作为数据专业人士处理路径和文件变得更容易，特别是在需要处理成千上万的图像、CSV 文件或音频文件的数据处理工作流中。
- en: Let’s get started!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Working with paths
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路径操作
- en: '**1\. Creating paths**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**1\. 创建路径**'
- en: Almost all features of `pathlib` is accessible through its `Path` class, which
    you can use to create paths to files and directories.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`pathlib`的几乎所有功能都可以通过其 `Path` 类访问，你可以用它来创建文件和目录的路径。'
- en: 'There are a few ways you can create paths with `Path`. First, there are class
    methods like `cwd` and `home` for the current working and the home user directories:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以使用 `Path` 创建路径。首先，有像 `cwd` 和 `home` 这样的类方法，用于当前工作目录和用户主目录：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can also create paths from string paths:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以从字符串路径创建路径：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Joining paths is a breeze in Pathlib with the forward slash operator:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用正斜杠操作符在 Pathlib 中连接路径是轻而易举的：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Please, don't let anyone ever catch you using `os.path.join` after this.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请不要让任何人看到你在使用 `os.path.join`。
- en: 'To check whether a path, you can use the boolean function `exists`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查路径是否存在，你可以使用布尔函数 `exists`：
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Sometimes, the entire Path object won’t be visible, and you have to check whether
    it is a directory or a file. So, you can use `is_dir` or `is_file` functions to
    do it:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，整个 Path 对象可能不可见，你需要检查它是目录还是文件。因此，你可以使用`is_dir`或`is_file`函数来判断：
- en: '[PRE14]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Most paths you work with will be relative to your current directory. But, there
    are cases where you have to provide the exact location of a file or a directory
    to make it accessible from any Python script. This is when you use `absolute`
    paths:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你处理的大多数路径相对于当前目录。但有时你需要提供文件或目录的确切位置，以便从任何 Python 脚本中访问它。这时你使用`absolute`路径：
- en: '[PRE18]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Lastly, if you have the misfortune of working with libraries that still require
    string paths, you can call `str(path)`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你不幸要处理仍然需要字符串路径的库，你可以调用 `str(path)`：
- en: '[PRE20]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Most libraries in the data stack have long supported `Path` objects, including
    `sklearn`, `pandas`, `matplotlib`, `seaborn`, etc.
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 数据栈中的大多数库很早就支持了 `Path` 对象，包括 `sklearn`、`pandas`、`matplotlib`、`seaborn` 等。
- en: '**2\. Path attributes**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 路径属性**'
- en: '`Path` objects have many useful attributes. Let’s see some examples using this
    path object that points to an image file.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`Path` 对象有许多有用的属性。让我们看看一些使用指向图像文件的路径对象的示例。'
- en: '[PRE22]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Let's start with the `parent`. It returns a path object that is one level up
    the current working directory.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `parent` 开始。它返回一个路径对象，该对象在当前工作目录上一级。
- en: '[PRE24]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Sometimes, you may want only the file `name` instead of the whole path. There
    is an attribute for that:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能只想要文件的 `name` 而不是整个路径。这里有一个属性可以做到这一点：
- en: '[PRE26]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: which returns only the file name with the extension.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 只返回带有扩展名的文件名。
- en: 'There is also `stem` for the file name without the suffix:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 还有 `stem` 用于没有后缀的文件名：
- en: '[PRE28]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Or the `suffix` itself with the dot for the file extension:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 或带有点的 `suffix` 本身作为文件扩展名：
- en: '[PRE30]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If you want to divide a path into its components, you can use `parts` instead
    of `str.split(''/'')`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将路径划分为其组件，你可以使用 `parts` 代替 `str.split('/')`：
- en: '[PRE32]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If you want those components to be `Path` objects in themselves, you can use
    `parents` attribute, which creates a generator:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要那些组件本身成为 `Path` 对象，你可以使用 `parents` 属性，它创建一个生成器：
- en: '[PRE34]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Working with files
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理文件
- en: '![](../Images/87265966c391ee7d32b99ff9f942387d.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/87265966c391ee7d32b99ff9f942387d.png)'
- en: Classified files. — Midjourney
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 分类文件。— Midjourney
- en: 'To create files and write to them, you don''t have to use `open` function anymore.
    Just create a `Path` object and `write_text` or `write_btyes` to them:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建文件并向其中写入内容，你不再需要使用 `open` 函数。只需创建一个 `Path` 对象，然后 `write_text` 或 `write_bytes`
    即可：
- en: '[PRE36]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Or, if you already have a file, you can `read_text` or `read_bytes`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你已经有一个文件，你可以 `read_text` 或 `read_bytes`：
- en: '[PRE37]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: However, note that `write_text` or `write_bytes` overrides existing contents
    of a file.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 但请注意，`write_text`或`write_bytes`会覆盖文件中现有的内容。
- en: '[PRE41]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'To append new information to existing files, you should use `open` method of
    `Path` objects in `a` (append) mode:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要向现有文件添加新信息，你应该使用 `Path` 对象的 `open` 方法，模式为 `a`（附加）：
- en: '[PRE44]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: It is also common to rename files. `rename` method accepts the destination path
    for the renamed file.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 重命名文件也很常见。`rename` 方法接受重命名文件的目标路径。
- en: 'To create the destination path in the current directory, i. e. rename the file,
    you can use `with_stem` on the existing path, which replaces the `stem` of the
    original file:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要在当前目录中创建目标路径，即重命名文件，你可以在现有路径上使用 `with_stem`，它替换原始文件的 `stem`：
- en: '[PRE46]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Above, `file.md` is turned into `new_markdown.md`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 上述，`file.md` 被转为 `new_markdown.md`。
- en: 'Let''s see the file size through `stat().st_size`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `stat().st_size` 查看文件大小：
- en: '[PRE48]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'or the last time the file was modified, which was a few seconds ago:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 或文件上次修改的时间，这是几秒钟前的事：
- en: '[PRE50]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '`st_mtime` returns a timestamp, which is the count of seconds since January
    1, 1970\. To make it readable, you can use use the `fromtimestamp` function of
    `datatime`.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`st_mtime` 返回一个时间戳，这是自 1970 年 1 月 1 日以来的秒数。为了使其可读，你可以使用 `datetime` 的 `fromtimestamp`
    函数。'
- en: 'To remove unwanted files, you can `unlink` them:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除不需要的文件，你可以 `unlink` 它们：
- en: '[PRE52]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Setting `missing_ok` to `True` won't raise any alarms if the file doesn't exist.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `missing_ok` 设置为 `True`，如果文件不存在不会引发任何警报。
- en: Working with directories
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理目录
- en: '![](../Images/97200e350b1dc2ecdae2da62bdf37d35.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/97200e350b1dc2ecdae2da62bdf37d35.png)'
- en: Folders in an office. — Midjourney
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 办公室中的文件夹。— Midjourney
- en: There are a few neat tricks to work with directories in Pathlib. First, let's
    see how to create directories recursively.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在Pathlib中处理目录有几个很棒的技巧。首先，让我们看看如何递归创建目录。
- en: '[PRE53]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The `new_dir` doesn''t exist, so let''s create it with all its children:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`new_dir`还不存在，所以让我们创建它及其所有子目录：'
- en: '[PRE55]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: By default, `mkdir` creates the last child of the given path. If the intermediate
    parents don't exist, you have to set `parents` to `True`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`mkdir`只会创建给定路径的最后一个子目录。如果中间的父目录不存在，你必须将`parents`设置为`True`。
- en: 'To remove empty directories, you can use `rmdir`. If the given path object
    is nested, only the last child directory is deleted:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除空目录，你可以使用`rmdir`。如果给定的路径对象是嵌套的，则只会删除最后一个子目录：
- en: '[PRE56]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'To list the contents of a directory like `ls` on the terminal, you can use
    `iterdir`. Again, the result will be a generator object, yielding directory contents
    as separate path objects one at a time:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出目录的内容，就像终端中的`ls`一样，你可以使用`iterdir`。结果将是一个生成器对象，一次产生一个路径对象的目录内容：
- en: '[PRE57]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: To capture all files with a specific extension or a name pattern, you can use
    the `glob` function with a regular expression.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要捕捉所有具有特定扩展名或名称模式的文件，你可以使用带有正则表达式的`glob`函数。
- en: 'For example, below, we will find all text files inside my home directory with
    `glob("*.txt")`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面我们将使用`glob("*.txt")`在我的主目录中找到所有文本文件：
- en: '[PRE59]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'To search for text files recursively, meaning inside all child directories
    as well, you can use *recursive glob* with `rglob`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要递归搜索文本文件，即包括所有子目录内的文件，你可以使用*递归glob*与`rglob`：
- en: '[PRE61]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Learn about regular expressions [here](https://realpython.com/regex-python/).
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 了解正则表达式 [这里](https://realpython.com/regex-python/)。
- en: You can also use `rglob('*')` to list directory contents recursively. It is
    like the supercharged version of `iterdir()`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`rglob('*')`递归列出目录内容。这就像`iterdir()`的超级增强版。
- en: One of the use cases of this is counting the number of file formats that appear
    within a directory.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个用例是统计目录中出现的文件格式数量。
- en: 'To do this, we import the `Counter` class from `collections` and provide all
    file suffixes to it within the articles folder of `home`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们从`collections`中导入`Counter`类，并在`home`的文章文件夹中提供所有文件后缀：
- en: '[PRE63]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Operating system differences
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作系统差异
- en: Sorry, but we have to talk about this nightmare of an issue.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 对不起，但我们必须讨论这个噩梦般的问题。
- en: 'Up until now, we have been dealing with `PosixPath` objects, which are the
    default for UNIX-like systems:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在处理`PosixPath`对象，它们是UNIX-like系统的默认对象：
- en: '[PRE65]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'If you were on Windows, you would get a `WindowsPath` object:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Windows上，你会得到一个`WindowsPath`对象：
- en: '[PRE67]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Instantiating another system's path raises an error like the above.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 实例化另一个系统的路径会引发类似上述的错误。
- en: But what if you were forced to work with paths from another system, like code
    written by coworkers who use Windows?
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你被迫处理来自其他系统的路径，比如同事们用Windows写的代码呢？
- en: 'As a solution, `pathlib` offers pure path objects like `PureWindowsPath` or
    `PurePosixPath`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 作为解决方案，`pathlib`提供了像`PureWindowsPath`或`PurePosixPath`这样的纯路径对象：
- en: '[PRE69]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'These are primitive path objects. You''ve access to some path methods and attributes,
    but essentially, the path object remains a string:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是原始路径对象。你可以访问一些路径方法和属性，但本质上，路径对象仍然是一个字符串：
- en: '[PRE71]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Conclusion
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: If you have noticed, I lied in the title of the article. Instead of 15, I believe
    the count of new tricks and functions was 30ish.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意到，我在文章标题中撒了谎。实际上新技巧和函数的数量是大约30个，而不是15个。
- en: I didn't want to scare you off.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我不想吓到你。
- en: But I hope I've convinced you enough to ditch `os.path` and start using `pathlib`
    for much easier and more readable path operations.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 但我希望我已经足够说服你放弃`os.path`，开始使用`pathlib`来进行更简单和更可读的路径操作。
- en: Forge a new *path*, if you will :)
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 锻造一个新的*路径*，如果你愿意 :)
- en: '![](../Images/0c5f3ba9e8226957b62ee0afc66e34ae.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0c5f3ba9e8226957b62ee0afc66e34ae.png)'
- en: Path. — Midjourney
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Path. — Midjourney
- en: If you enjoyed this article and, let's face it, its bizarre writing style, consider
    supporting me by signing up to become a Medium member. Membership costs 4.99$
    a month and gives you unlimited access to all my stories and hundreds of thousands
    of articles written by more experienced folk. If you sign up through [this link](https://ibexorigin.medium.com/membership),
    I will earn a small commission with no extra cost to your pocket.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这篇文章，并且，老实说，其怪异的写作风格，考虑通过注册成为Medium会员来支持我。会员费用为每月4.99美元，可以无限制访问我所有的故事以及成千上万篇更有经验的作者写的文章。如果你通过
    [这个链接](https://ibexorigin.medium.com/membership) 注册，我将赚取少量佣金，而不会增加你的额外费用。
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----881213ca7c21--------------------------------)
    [## Join Medium with my referral link — Bex T.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ibexorigin.medium.com/membership?source=post_page-----881213ca7c21--------------------------------)
    [## 通过我的推荐链接加入 Medium — Bex T.'
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获得对我所有⚡高级⚡内容和 Medium 上所有内容的独家访问权限，没有限制。通过购买我一份支持我的工作…
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----881213ca7c21--------------------------------)
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----881213ca7c21--------------------------------)
