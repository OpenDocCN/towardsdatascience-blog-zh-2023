["```py\n@pn.cache\ndef load_processor_model(\n    processor_name: str, model_name: str\n) -> Tuple[CLIPProcessor, CLIPModel]:\n    processor = CLIPProcessor.from_pretrained(processor_name)\n    model = CLIPModel.from_pretrained(model_name)\n    return processor, model\n\ndef get_similarity_scores(class_items: List[str], image: Image) -> List[float]:\n    processor, model = load_processor_model(\n        \"openai/clip-vit-base-patch32\", \"openai/clip-vit-base-patch32\"\n    )\n    inputs = processor(\n        text=class_items,\n        images=[image],\n        return_tensors=\"pt\",  # pytorch tensors\n    )\n    outputs = model(**inputs)\n    logits_per_image = outputs.logits_per_image\n    class_likelihoods = logits_per_image.softmax(dim=1).detach().numpy()\n    return class_likelihoods[0]py\n```", "```py\nasync def process_inputs(class_names: List[str], image_url: str):\n    \"\"\"\n    High level function that takes in the user inputs and returns the\n    classification results as panel objects.\n    \"\"\"\n    ...\n    yield results\n```", "```py\nimage_url = pn.widgets.TextInput(\n    name=\"Image URL to classify\",\n    value=pn.bind(random_url, randomize_url),\n)\nclass_names = pn.widgets.TextInput(\n    name=\"Comma separated class names\",\n    placeholder=\"Enter possible class names, e.g. cat, dog\",\n    value=\"cat, dog, parrot\",\n)\n```", "```py\ninteractive_result = pn.panel(\n    pn.bind(process_inputs, image_url=image_url, class_names=class_names),\n    height=600,\n)\n```", "```py\npn.bind(process_inputs, image_url=image_url_input, ...)\n```", "```py\npn.extension(design=\"bootstrap\", sizing_mode=\"stretch_width\")\n```", "```py\nrow_bar = pn.indicators.Progress(\n    ...\n    design=pn.theme.Material,\n)\n```", "```py\n@pn.cache\ndef load_processor_model(\n    processor_name: str, model_name: str\n) -> Tuple[CLIPProcessor, CLIPModel]:\n    processor = CLIPProcessor.from_pretrained(processor_name)\n    model = CLIPModel.from_pretrained(model_name)\n    return processor, model\n```", "```py\nfooter_row = pn.Row(pn.Spacer(), align=\"center\")\nfor icon, url in ICON_URLS.items():\n    href_button = pn.widgets.Button(icon=icon, width=35, height=35)\n    href_button.js_on_click(code=f\"window.open('{url}')\")\n    footer_row.append(href_button)\nfooter_row.append(pn.Spacer())\n```", "```py\nasync def open_image_url(image_url: str) -> Image:\n    async with aiohttp.ClientSession() as session:\n        async with session.get(image_url) as resp:\n            return Image.open(io.BytesIO(await resp.read()))\n```", "```py\ndef open_image_url(image_url: str) -> Image:\n    with requests.get(image_url) as resp:\n        return Image.open(io.BytesIO(resp.read()))\n```"]