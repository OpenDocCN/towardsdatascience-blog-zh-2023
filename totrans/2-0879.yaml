- en: 'FastAPI and Streamlit: The Python Duo You Must Know About'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FastAPI 和 Streamlit：你必须了解的 Python 双雄
- en: 原文：[https://towardsdatascience.com/fastapi-and-streamlit-the-python-duo-you-must-know-about-72825def1243](https://towardsdatascience.com/fastapi-and-streamlit-the-python-duo-you-must-know-about-72825def1243)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/fastapi-and-streamlit-the-python-duo-you-must-know-about-72825def1243](https://towardsdatascience.com/fastapi-and-streamlit-the-python-duo-you-must-know-about-72825def1243)
- en: '[THE FULL STACK 7-STEPS MLOPS FRAMEWORK](https://towardsdatascience.com/tagged/full-stack-mlops)'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[完整的 7 步 MLOps 框架](https://towardsdatascience.com/tagged/full-stack-mlops)'
- en: 'Lesson 6: Consume and Visualize your Model''s Predictions using FastAPI and
    Streamlit. Dockerize Everything'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第6课：使用 FastAPI 和 Streamlit 消耗和可视化模型预测。对所有内容进行 Docker 化
- en: '[](https://pauliusztin.medium.com/?source=post_page-----72825def1243--------------------------------)[![Paul
    Iusztin](../Images/d07551a78fa87940220b49d9358f3166.png)](https://pauliusztin.medium.com/?source=post_page-----72825def1243--------------------------------)[](https://towardsdatascience.com/?source=post_page-----72825def1243--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----72825def1243--------------------------------)
    [Paul Iusztin](https://pauliusztin.medium.com/?source=post_page-----72825def1243--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://pauliusztin.medium.com/?source=post_page-----72825def1243--------------------------------)[![Paul
    Iusztin](../Images/d07551a78fa87940220b49d9358f3166.png)](https://pauliusztin.medium.com/?source=post_page-----72825def1243--------------------------------)[](https://towardsdatascience.com/?source=post_page-----72825def1243--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----72825def1243--------------------------------)
    [Paul Iusztin](https://pauliusztin.medium.com/?source=post_page-----72825def1243--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----72825def1243--------------------------------)
    ·14 min read·Jun 12, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----72825def1243--------------------------------)
    ·阅读时间 14 分钟·2023年6月12日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/7beb5df667e2b1bf00cd37002c98447f.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7beb5df667e2b1bf00cd37002c98447f.png)'
- en: Photo by [Hassan Pasha](https://unsplash.com/@hpzworkz?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Hassan Pasha](https://unsplash.com/@hpzworkz?utm_source=medium&utm_medium=referral)
    提供，[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)上的照片
- en: This tutorial represents **lesson 6 out of a 7-lesson course** that will walk
    you step-by-step through how to **design, implement, and deploy an ML system**
    using **MLOps good practices**. During the course, you will build a production-ready
    model to forecast energy consumption levels for the next 24 hours across multiple
    consumer types from Denmark.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程代表**7节课程中的第6节课**，将逐步指导你如何**设计、实现和部署 ML 系统**，并应用**MLOps 良好实践**。在课程中，你将构建一个生产级模型，用于预测丹麦多个消费者类型在接下来的24小时内的能源消耗水平。
- en: '*By the end of this course, you will understand all the fundamentals of designing,
    coding and deploying an ML system using a batch-serving architecture.*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*完成本课程后，你将理解如何设计、编码和部署一个使用批量服务架构的 ML 系统的所有基础知识。*'
- en: This course *targets mid/advanced machine learning engineers* who want to level
    up their skills by building their own end-to-end projects.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本课程*针对希望通过构建自己的端到端项目来提升技能的中级/高级机器学习工程师*。
- en: '*Nowadays, certificates are everywhere. Building advanced end-to-end projects
    that you can later show off is the best way to get recognition as a professional
    engineer.*'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*如今，证书随处可见。构建先进的端到端项目并展示是获得专业工程师认可的最佳方式。*'
- en: 'Table of Contents:'
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录：
- en: Course Introduction
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 课程简介
- en: Course Lessons
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 课程内容
- en: Data Source
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据来源
- en: 'Lesson 6: Consume and Visualize your Model’s Predictions using FastAPI and
    Streamlit. Dockerize Everything.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第6课：使用 FastAPI 和 Streamlit 消耗和可视化模型预测。对所有内容进行 Docker 化。
- en: 'Lesson 6: Code'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第6课：代码
- en: Conclusion
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结论
- en: References
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考文献
- en: Course Introduction
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 课程简介
- en: '***At the end of this 7 lessons course, you will know how to:***'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '***在这7节课程结束时，你将知道如何：***'
- en: design a batch-serving architecture
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计一个批量服务架构
- en: use Hopsworks as a feature store
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Hopsworks 作为特征存储
- en: design a feature engineering pipeline that reads data from an API
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计一个从 API 读取数据的特征工程管道
- en: build a training pipeline with hyper-parameter tunning
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个带有超参数调优的训练管道
- en: use W&B as an ML Platform to track your experiments, models, and metadata
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 W&B 作为 ML 平台来跟踪实验、模型和元数据
- en: implement a batch prediction pipeline
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现一个批量预测管道
- en: use Poetry to build your own Python packages
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Poetry 构建你自己的 Python 包
- en: deploy your own private PyPi server
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署你自己的私有 PyPi 服务器
- en: orchestrate everything with Airflow
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用 Airflow 编排一切
- en: use the predictions to code a web app using FastAPI and Streamlit
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用预测来编码一个使用 FastAPI 和 Streamlit 的 Web 应用
- en: use Docker to containerize your code
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Docker 将你的代码容器化
- en: use Great Expectations to ensure data validation and integrity
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Great Expectations 确保数据验证和完整性
- en: monitor the performance of the predictions over time
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控预测结果的性能随时间的变化
- en: deploy everything to GCP
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有内容部署到 GCP
- en: build a CI/CD pipeline using GitHub Actions
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 构建 CI/CD 管道
- en: If that sounds like a lot, don't worry. After you cover this course, you will
    understand everything I said before. Most importantly, you will know WHY I used
    all these tools and how they work together as a system.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这听起来很多，不用担心。在你完成这个课程后，你将理解我之前所说的一切。最重要的是，你会知道我为什么使用这些工具以及它们如何作为一个系统协同工作。
- en: '**If you want to get the most out of this course,** [**I suggest you access
    the GitHub repository**](https://github.com/iusztinpaul/energy-forecasting) **containing
    all the lessons'' code. This course is designed to quickly read and replicate
    the code along the articles.**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你想最大限度地从这个课程中受益，** [**我建议你访问包含所有课程代码的 GitHub 仓库**](https://github.com/iusztinpaul/energy-forecasting)
    **。本课程旨在快速阅读和复制文章中的代码。**'
- en: By the end of the course, you will know how to implement the diagram below.
    Don't worry if something doesn't make sense to you. I will explain everything
    in detail.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 到课程结束时，你将知道如何实现下图。即使有些内容对你来说不太明白，也不用担心。我会详细解释一切。
- en: '![](../Images/4b5c3b0b8e2162ea8fd268ca745199ec.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4b5c3b0b8e2162ea8fd268ca745199ec.png)'
- en: Diagram of the architecture you will build during the course [Image by the Author].
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 课程中你将构建的架构示意图 [作者提供的图片]。
- en: By the **end of Lesson 6**, you will know how to consume the predictions and
    the monitoring metrics from the GCP bucket within a web app using FastAPI and
    Streamlit.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 到**第 6 课结束时**，你将知道如何使用 FastAPI 和 Streamlit 从 GCP 存储桶中消费预测和监控指标。
- en: 'Course Lessons:'
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 课程内容：
- en: '[Batch Serving. Feature Stores. Feature Engineering Pipelines.](https://medium.com/towards-data-science/a-framework-for-building-a-production-ready-feature-engineering-pipeline-f0b29609b20f)'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[批量服务。特征存储。特征工程管道。](https://medium.com/towards-data-science/a-framework-for-building-a-production-ready-feature-engineering-pipeline-f0b29609b20f)'
- en: '[Training Pipelines. ML Platforms. Hyperparameter Tuning.](https://medium.com/towards-data-science/a-guide-to-building-effective-training-pipelines-for-maximum-results-6fdaef594cee)'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[训练管道。ML 平台。超参数调整。](https://medium.com/towards-data-science/a-guide-to-building-effective-training-pipelines-for-maximum-results-6fdaef594cee)'
- en: '[Batch Prediction Pipeline. Package Python Modules with Poetry.](https://medium.com/towards-data-science/unlock-the-secret-to-efficient-batch-prediction-pipelines-using-python-a-feature-store-and-gcs-17a1462ca489)'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[批量预测管道。用 Poetry 打包 Python 模块。](https://medium.com/towards-data-science/unlock-the-secret-to-efficient-batch-prediction-pipelines-using-python-a-feature-store-and-gcs-17a1462ca489)'
- en: '[Private PyPi Server. Orchestrate Everything with Airflow.](/unlocking-mlops-using-airflow-a-comprehensive-guide-to-ml-system-orchestration-880aa9be8cff)'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[私有 PyPi 服务器。用 Airflow 编排一切。](/unlocking-mlops-using-airflow-a-comprehensive-guide-to-ml-system-orchestration-880aa9be8cff)'
- en: '[Data Validation for Quality and Integrity using GE. Model Performance Continuous
    Monitoring.](/ensuring-trustworthy-ml-systems-with-data-validation-and-real-time-monitoring-89ab079f4360)'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[使用 GE 进行数据质量和完整性验证。模型性能的持续监控。](/ensuring-trustworthy-ml-systems-with-data-validation-and-real-time-monitoring-89ab079f4360)'
- en: '**Consume and Visualize your Model''s Predictions using FastAPI and Streamlit.
    Dockerize Everything.**'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用 FastAPI 和 Streamlit 消费和可视化你的模型预测。将一切 Docker 化。**'
- en: '[Deploy All the ML Components to GCP. Build a CI/CD Pipeline Using Github Actions.](https://medium.com/towards-data-science/seamless-ci-cd-pipelines-with-github-actions-on-gcp-your-tools-for-effective-mlops-96f676f72012)'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[将所有 ML 组件部署到 GCP。使用 GitHub Actions 构建 CI/CD 管道。](https://medium.com/towards-data-science/seamless-ci-cd-pipelines-with-github-actions-on-gcp-your-tools-for-effective-mlops-96f676f72012)'
- en: '[[Bonus] Behind the Scenes of an ‘Imperfect’ ML Project — Lessons and Insights](https://medium.com/towards-data-science/imperfections-unveiled-the-intriguing-reality-behind-our-mlops-course-creation-6ff7d52ecb7e)'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[[附加内容] ‘不完美’ ML 项目的幕后 — 经验教训和见解](https://medium.com/towards-data-science/imperfections-unveiled-the-intriguing-reality-behind-our-mlops-course-creation-6ff7d52ecb7e)'
- en: Check out [Lesson 3](/unlock-the-secret-to-efficient-batch-prediction-pipelines-using-python-a-feature-store-and-gcs-17a1462ca489)
    to learn how we computed and stored the predictions in a GCP bucket.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [第 3 课](/unlock-the-secret-to-efficient-batch-prediction-pipelines-using-python-a-feature-store-and-gcs-17a1462ca489)
    了解我们如何计算和存储 GCP 存储桶中的预测结果。
- en: Also, in [Lesson 5](/ensuring-trustworthy-ml-systems-with-data-validation-and-real-time-monitoring-89ab079f4360),
    you can see how we calculated the monitoring metrics, which are also stored in
    a GCP bucket.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在[第5节](/ensuring-trustworthy-ml-systems-with-data-validation-and-real-time-monitoring-89ab079f4360)，你可以查看我们如何计算监控指标，这些指标也存储在GCP存储桶中。
- en: You will consume the predictions and the monitoring metrics from the GCP bucket
    and display them in a friendly dashboard using FastAPI and Streamlit.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从GCP存储桶中获取预测结果和监控指标，并使用FastAPI和Streamlit将其显示在一个友好的仪表板上。
- en: Data Source
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据源
- en: We used a free & open API that provides hourly energy consumption values for
    all the energy consumer types within Denmark [1].
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了一个免费的开放API，它提供了丹麦所有能源消费者类型的每小时能源消耗值[1]。
- en: They provide an intuitive interface where you can easily query and visualize
    the data. [You can access the data here](https://www.energidataservice.dk/tso-electricity/ConsumptionDE35Hour)
    [1].
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 它们提供了一个直观的界面，你可以轻松查询和可视化数据。[你可以在这里访问数据](https://www.energidataservice.dk/tso-electricity/ConsumptionDE35Hour)
    [1]。
- en: 'The data has 4 main attributes:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 数据具有4个主要属性：
- en: '**Hour UTC:** the UTC datetime when the data point was observed.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小时UTC：** 观测数据点时的UTC日期时间。'
- en: '**Price Area:** Denmark is divided into two price areas: DK1 and DK2 — divided
    by the Great Belt. DK1 is west of the Great Belt, and DK2 is east of the Great
    Belt.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**价格区域：** 丹麦被划分为两个价格区域：DK1和DK2 —— 由大贝尔特分隔。DK1位于大贝尔特以西，DK2位于大贝尔特以东。'
- en: '**Consumer Type:** The consumer type is the Industry Code DE35, owned and maintained
    by Danish Energy.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消费者类型：** 消费者类型为行业代码DE35，由丹麦能源公司拥有和维护。'
- en: '**Total Consumption:** Total electricity consumption in kWh'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**总消耗：** 总电力消耗（单位：千瓦时）'
- en: '**Note:** The observations have a lag of 15 days! But for our demo use case,
    that is not a problem, as we can simulate the same steps as it would in real-time.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 观测数据有15天的滞后！但对于我们的演示用例，这不是问题，因为我们可以模拟与实时相同的步骤。'
- en: '![](../Images/4eab6debdb7ba94406b8d0a8e28e3438.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4eab6debdb7ba94406b8d0a8e28e3438.png)'
- en: A screenshot from our web app showing how we forecasted the energy consumption
    for area = 1 and consumer_type = 212 [Image by the Author].
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的网页应用程序的截图，显示了我们如何预测区域=1和消费者类型=212的能源消耗[图片由作者提供]。
- en: 'The data points have an hourly resolution. For example: "2023–04–15 21:00Z",
    "2023–04–15 20:00Z", "2023–04–15 19:00Z", etc.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 数据点具有每小时分辨率。例如：“2023–04–15 21:00Z”，“2023–04–15 20:00Z”，“2023–04–15 19:00Z”等。
- en: We will model the data as multiple time series. Each unique **price area** and
    **consumer type tuple represents its** unique time series.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将数据建模为多个时间序列。每个唯一的**价格区域**和**消费者类型**元组代表一个独特的时间序列。
- en: Thus, we will build a model that independently forecasts the energy consumption
    for the next 24 hours for every time series.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将构建一个模型，为每个时间序列独立预测接下来的24小时的能源消耗。
- en: '*Check out the video below to better understand what the data looks like* 👇'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*查看下面的视频以更好地理解数据的样子* 👇'
- en: Course & data source overview [Video by the Author].
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 课程和数据源概述 [视频由作者提供]。
- en: 'Lesson 6: Consume and Visualize your Model''s Predictions using FastAPI and
    Streamlit. Dockerize Everything.'
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6节：使用FastAPI和Streamlit获取并可视化模型的预测。将一切Docker化。
- en: The goal of Lesson 6
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第6节的目标
- en: In Lesson 6, you will build a FastAPI backend that will consume the predictions
    and monitoring metrics from GCS and expose them through a RESTful API. More concretely,
    through a set of endpoints that will expose the data through HTTP(S).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在第6节中，你将构建一个FastAPI后端，该后端将从GCS中获取预测结果和监控指标，并通过RESTful API暴露这些数据。更具体地说，通过一组端点通过HTTP(S)暴露数据。
- en: 'Also, you will implement 2 different frontend applications using solely Streamlit:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你将使用Streamlit实现两个不同的前端应用程序：
- en: a dashboard showing the forecasts (aka your application),
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示预测的仪表板（即你的应用程序），
- en: a dashboard showing the monitoring metrics (aka your monitoring dashboard).
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示监控指标的仪表板（即你的监控仪表板）。
- en: Both frontend applications will request data from the FastAPI RESTful API through
    HTTP(s) and use Streamlit to render the data into some beautiful plots.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 两个前端应用程序将通过HTTP(s)从FastAPI RESTful API请求数据，并使用Streamlit将数据呈现成一些美丽的图表。
- en: I want to highlight that you can use both frameworks (FastAPI & Streamlit) in
    Python. This is extremely useful for a DS or MLE, as Python is their holy grail.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我想强调的是，你可以在Python中同时使用这两个框架（FastAPI和Streamlit）。这对数据科学家或机器学习工程师非常有用，因为Python是他们的终极工具。
- en: '![](../Images/4a7712f71ecc251c99dd732bb42dc92c.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4a7712f71ecc251c99dd732bb42dc92c.png)'
- en: Diagram of the final architecture with the Lesson 6 components highlighted in
    blue [Image by the Author].
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最终架构的示意图，Lesson 6 组件以蓝色突出显示 [图片来源：作者]。
- en: 'Note that consuming the predictions from the bucket is completely decoupled
    from the 3 pipeline design. For example, running the 3 pipelines: feature engineer,
    training, and inference takes ~10 minutes. But to read the predictions or the
    monitor metrics from the bucket is almost instant.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，从存储桶中获取预测结果与 3 个管道设计完全解耦。例如，运行 3 个管道：特征工程、训练和推理大约需要 10 分钟。但从存储桶中读取预测结果或监控指标几乎是瞬间完成的。
- en: 'Thus, by caching the predictions into GCP, you served the ML model online from
    the client''s point of view: the predictions are served in real time.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过将预测结果缓存到 GCP，你从客户端的角度在线提供了 ML 模型：预测结果是实时提供的。
- en: '*This is the magic of the batch architecture.*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*这就是批处理架构的魔力。*'
- en: The next natural steps are to move your architecture from a batch architecture
    to a request-response or streaming one.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的自然步骤是将你的架构从批处理架构迁移到请求-响应或流式架构。
- en: The good news is that the FE and training pipelines would be almost the same,
    and you would have to move only the batch prediction pipeline (aka the inference
    step) into your web infrastructure. [Read this article to learn the basics of
    deploying your model in a request-response fashion using Docker.](https://medium.com/faun/key-concepts-for-model-serving-38ccbb2de372)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是 FE 和训练管道几乎是相同的，你只需要将批处理预测管道（即推理步骤）迁移到你的 web 基础设施中。[阅读这篇文章以了解使用 Docker 以请求-响应方式部署模型的基础知识。](https://medium.com/faun/key-concepts-for-model-serving-38ccbb2de372)
- en: '***Why?***'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '***为什么？***'
- en: Because the training pipeline uploads the weights of the trained model into
    the model registry. From there, you can use the weights as it fits best for your
    use case.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 因为训练管道将训练模型的权重上传到模型注册表。从那里，你可以根据你的用例需求使用这些权重。
- en: Theoretical Concepts & Tools
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理论概念与工具
- en: '**FastAPI:** One of the latest and most famous Python API web frameworks. I
    have tried all of the top Python API web frameworks: Django, Flask, and FastAPI,
    and my heart goes to FastAPI.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**FastAPI：** 最新且最著名的 Python API web 框架之一。我尝试过所有顶级 Python API web 框架：Django、Flask
    和 FastAPI，我的心属 FastAPI。'
- en: '***Why?***'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '***为什么？***'
- en: First, it is natively async, which can boost performance with fewer computing
    resources.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，它本地支持异步，这可以用更少的计算资源提升性能。
- en: Secondly, it is easy and intuitive to use, which makes it suitable for applications
    of all sizes. Even though, for behemoth monoliths, I would still choose Django.
    But this is a topic for another time.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，它使用简单直观，适合各种规模的应用程序。尽管如此，对于庞大的单体应用，我仍然会选择 Django。但这是另一个话题。
- en: '**Streamlit:** Streamlit makes coding simple UI components, mostly dashboards,
    extremely accessible using solely Python.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**Streamlit：** Streamlit 使得用 Python 轻松创建简单的 UI 组件（主要是仪表盘）变得非常简单。'
- en: The scope of Streamlit is to let Data Scientists and ML engineers use what they
    know best, aka Python, to build a beautiful frontend for their models quickly.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit 的范围是让数据科学家和 ML 工程师利用他们最擅长的东西，即 Python，快速构建他们模型的漂亮前端。
- en: '*Which is precisely what we did*✌️'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*这正是我们所做的*✌️'
- en: Thus, you will use FastAPI as your backend and Streamlit as your frontend to
    build a web app solely in Python.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你将使用 FastAPI 作为后端，Streamlit 作为前端，仅用 Python 构建一个 web 应用。
- en: 'Lesson 6: Code'
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lesson 6：代码
- en: '[You can access the GitHub repository here.](https://github.com/iusztinpaul/energy-forecasting)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[你可以在这里访问 GitHub 仓库。](https://github.com/iusztinpaul/energy-forecasting)'
- en: '**Note:** All the installation instructions are in the READMEs of the repository.
    Here you will jump straight to the code.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 所有的安装说明都在仓库的 README 文件中。这里你将直接进入代码部分。'
- en: '*The code within Lesson 6 is located under the following:*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*Lesson 6 中的代码位于以下位置：*'
- en: '[***app-api***](https://github.com/iusztinpaul/energy-forecasting/tree/main/app-api)folder
    — FastAPI backend'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[***app-api***](https://github.com/iusztinpaul/energy-forecasting/tree/main/app-api)
    文件夹 — FastAPI 后端'
- en: '[***app-frontend***](https://github.com/iusztinpaul/energy-forecasting/tree/main/app-frontend)
    folder — Predictions Dashboard'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[***app-frontend***](https://github.com/iusztinpaul/energy-forecasting/tree/main/app-frontend)
    文件夹 — 预测仪表盘'
- en: '[***app-monitoring***](https://github.com/iusztinpaul/energy-forecasting/tree/main/app-monitoring)
    folder — Monitoring Dashboard'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[***app-monitoring***](https://github.com/iusztinpaul/energy-forecasting/tree/main/app-monitoring)
    文件夹 — 监控仪表盘'
- en: 'Using Docker, you can quickly spin up all 3 components at once:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Docker，你可以迅速启动所有三个组件：
- en: '[PRE0]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Directly storing credentials in your git repository is a huge security risk.
    That is why you will inject sensitive information using a **.env** file.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 直接将凭证存储在你的 git 仓库中是一个巨大的安全风险。这就是为什么你将通过**.env**文件注入敏感信息。
- en: The **.env.default** is an example of all the variables you must configure.
    It is also helpful to store default values for attributes that are not sensitive
    (e.g., project name).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**.env.default**是你必须配置的所有变量的示例。它还帮助存储不敏感的属性的默认值（例如，项目名称）。'
- en: '![](../Images/87b81fc121cea9485a6b41dd4d656eb8.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/87b81fc121cea9485a6b41dd4d656eb8.png)'
- en: A screenshot of the .env.default file [Image by the Author].
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**.env.default**文件的截图[作者提供的图片]。'
- en: Prepare Credentials
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备凭证
- en: For this lesson, the only service you need access to is GCS. In the **Prepare
    Credentials** section of[Lesson 3](/unlock-the-secret-to-efficient-batch-prediction-pipelines-using-python-a-feature-store-and-gcs-17a1462ca489),
    we already explained in detail how to do this. Also, you have more information
    in the [GitHub README](https://github.com/iusztinpaul/energy-forecasting/blob/main/README.md#gcp).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本课程，你需要访问的唯一服务是 GCS。在[第 3 课](/unlock-the-secret-to-efficient-batch-prediction-pipelines-using-python-a-feature-store-and-gcs-17a1462ca489)的**准备凭证**部分，我们已经详细解释了如何操作。此外，你还可以在[GitHub
    README](https://github.com/iusztinpaul/energy-forecasting/blob/main/README.md#gcp)中找到更多信息。
- en: To keep things concise, in this lesson, I want to highlight that the web app
    GCP service account should have read access only for security reasons.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持简洁，在本课程中，我想强调的是，Web 应用的 GCP 服务账户应仅具有读取权限，以保证安全。
- en: '**Why?**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么？**'
- en: Becausethe FastAPI API will only read data from the GCP buckets & keeping the
    permissions to the bare minimum is good practice.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 FastAPI API 只会读取 GCP 存储桶中的数据，并且保持最小权限是一种良好的实践。
- en: Thus, if your web app is hacked, the attacker can only read the data using the
    stolen service account credentials. He can't delete or overwrite the data, which
    is much more dangerous in this case.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你的 Web 应用被黑客入侵，攻击者只能使用被盗的服务账户凭证读取数据。他不能删除或覆盖数据，这在这种情况下要安全得多。
- en: Thus, repeat the same steps as in the **Prepare Credentials** section of [Lesson
    3](/unlock-the-secret-to-efficient-batch-prediction-pipelines-using-python-a-feature-store-and-gcs-17a1462ca489),
    but instead of choosing the *Store Object Admin* role, choose the *Storage Object
    Viewer role*.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，重复[第 3 课](/unlock-the-secret-to-efficient-batch-prediction-pipelines-using-python-a-feature-store-and-gcs-17a1462ca489)的**准备凭证**部分中的相同步骤，但选择*Storage
    Object Viewer role*角色，而不是*Store Object Admin*角色。
- en: Remember that now you have to download a different JSON file containing your
    GCP service account key with read-only access.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你现在需要下载一个不同的 JSON 文件，其中包含你的 GCP 服务账户密钥，并具有只读访问权限。
- en: Check out the [README](https://github.com/iusztinpaul/energy-forecasting/blob/main/README.md#the-web-app)
    to learn how to complete the **.env** file. I want to highlight that only the
    FastAPI backend will have to load the **.env** file. Thus, you must place the
    **.env** file only in the [***app-api***](https://github.com/iusztinpaul/energy-forecasting/tree/main/app-api)
    folder.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[README](https://github.com/iusztinpaul/energy-forecasting/blob/main/README.md#the-web-app)了解如何完成**.env**文件。我想强调的是，只有
    FastAPI 后端需要加载**.env**文件。因此，你必须将**.env**文件仅放在[***app-api***](https://github.com/iusztinpaul/energy-forecasting/tree/main/app-api)文件夹中。
- en: FastAPI Backend
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FastAPI 后端
- en: FastAPI backend overview [Video by the Author].
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 后端概述[作者提供的视频]。
- en: As a reminder, the FastAPI code can be found under [***app-api/api***](https://github.com/iusztinpaul/energy-forecasting/tree/main/app-api/api).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒一下，FastAPI 代码可以在[***app-api/api***](https://github.com/iusztinpaul/energy-forecasting/tree/main/app-api/api)下找到。
- en: '**Step 1:** Create the FastAPI application, where we configured the docs, the
    CORS middleware and the endpoints root API router.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 1:** 创建 FastAPI 应用，在其中配置文档、CORS 中间件和端点根 API 路由器。'
- en: '**Step 2:** Define the Settings class. The scope of this class is to hold all
    the constants and configurations you need across your API code, such as:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 2:** 定义 Settings 类。该类的作用是保存 API 代码中需要的所有常量和配置，例如：'
- en: '*generic configurations:* the port, log level or version,'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通用配置:* 端口、日志级别或版本，'
- en: '*GCP credentials:* bucket name or path to the JSON service account keys.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*GCP 凭证:* 存储桶名称或 JSON 服务账户密钥的路径。'
- en: You will use the Settings object across the project using the **get_settings()**
    function.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在项目中使用**get_settings()**函数来使用 Settings 对象。
- en: Also, inside the **Config** class, we programmed FastAPI to look for a **.env**
    file in the current directory and load all the variables prefixed with **APP_API_.**
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the **.env.default** file, all the variables start with **APP_API_**.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/87b81fc121cea9485a6b41dd4d656eb8.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
- en: A screenshot of the .env.default file [Image by the Author].
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 3:** Define the schemas of the API data using Pydantic. These schemas
    encode or decode data from JSON to a Python object or vice versa. Also, they validate
    the type and structure of your JSON object based on your defined data model.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: When defining a Pydantic BaseModel, it is essential to add a type to every variable,
    which will be used at the validation step.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 4:** Define your endpoints, in web lingo, known as views. Usually, a
    view has access to some data storage and based on a query, it returns a subset
    of the data source to the requester.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '***Thus, a standard flow for retrieving (aka GET request) data looks like this:***'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: “client → request data → endpoint → access data storage → encode to a Pydantic
    schema → decode to JSON → respond with requested data”
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how we defined an endpoint to GET all the consumer types:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: We used "**gcsfs.GCSFileSystem"** to access the GCS bucket as a standard filesystem.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: We attached the endpoint to the **api_router**.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Using the **api_router.get()** Python decorator, we attached a basic function
    to the **/consumer_type_values** endpoint.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: In the example above, when calling "**https://<some_ip>:8001/api/v1/consumer_type_values"**
    the **consumer_type_values()** function will be triggered, and the response of
    the endpoint will be strictly based on what the function return.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Another important thing is to highlight that by defining the **response_model
    (aka the schema) in the Python decorator,** you don't have to create the Pydantic
    schema explicitly.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: If you return a dictionary that is 1:1, respecting the schema structure, FastAPI
    will automatically create the Pydantic object for you.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '*That''s it. Now we will repeat the same logic to define the rest of the endpoints.
    FastAPI makes everything so easy and intuitive for you.*'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at the whole [***views.py***](https://github.com/iusztinpaul/energy-forecasting/blob/main/app-api/api/views.py)file,
    where we defined endpoints for the following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '**/health** → health check'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**/consumer_type_values** → GET all possible consumer types'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**/area_values** → GET all possible area types'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**/predictions/{area}/{consumer_type}** → GET the predictions for a given area
    and consumer type. Note that using the {<some_variable>} syntax, you can add parameters
    to your endpoint — [FastAPI docs](https://fastapi.tiangolo.com/tutorial/path-params/)
    [2].'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**/monitoring/metrics** → GET the aggregated monitoring metrics'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**/monitoring/values/{area}/{consumer_type}** → GET the monitoring values for
    a given area and consumer type'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I want to highlight again that the FastAPI backend only reads the GCS bucket's
    predictions. The inference step is done solely in the batch prediction pipeline.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我想再次强调，FastAPI后端只读取GCS桶的预测。推理步骤完全在批量预测管道中完成。
- en: 'You can also go to "[**http://<your-ip>:8001/api/v1/docs**](http://35.207.134.188:8001/api/v1/docs)**"**
    to access the Swagger docs of the API, where you can easily see and test all your
    endpoints:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以访问“[**http://<your-ip>:8001/api/v1/docs**](http://35.207.134.188:8001/api/v1/docs)**”**来访问API的Swagger文档，在那里你可以轻松查看和测试所有端点：
- en: '![](../Images/f22922d4e71d0df403068efcff1c0d3c.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f22922d4e71d0df403068efcff1c0d3c.png)'
- en: Screenshot of the Swapper API docs [Image by the Author].
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Swapper API文档的截图[作者的图片]。
- en: Thats it! Now you know how to build a FastAPI backend. Things might get more
    complicated when adding a database layer and user sessions, but you learned all
    the main concepts that will get you started!
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！现在你知道如何构建FastAPI后端了。添加数据库层和用户会话可能会使事情变得更复杂，但你已经掌握了所有主要概念，这将帮助你入门！
- en: Streamlit Predictions Dashboard
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Streamlit预测仪表板
- en: Streamlit predictions dashboard overview [Video by the Author].
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit预测仪表板概述[作者的视频]。
- en: Access the code under [***app-frontend/frontend***](https://github.com/iusztinpaul/energy-forecasting/tree/main/app-frontend/frontend).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[***app-frontend/frontend***](https://github.com/iusztinpaul/energy-forecasting/tree/main/app-frontend/frontend)下的代码。
- en: Using Streamlit is quite simple. The whole UI is defined using the code below
    that does the following
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Streamlit非常简单。整个UI通过下面的代码定义，代码执行以下操作：
- en: it defines the title,
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它定义标题，
- en: it makes a request to the backend for all possible area types & creates a dropdown
    based on it,
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它向后端请求所有可能的区域类型，并根据此创建一个下拉列表，
- en: it makes a request to the backend for all possible consumer types & creates
    a dropdown based on it,
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它向后端请求所有可能的消费者类型，并根据此创建一个下拉列表，
- en: based on the current chosen area and consumer types, it builds and renders a
    plotly chart.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于当前选择的区域和消费者类型，它构建并渲染一个plotly图表。
- en: Straight forward, right?
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 直接了当，对吧？
- en: Note that we could have made additional checks for the status code of the HTTP
    requests. For example, if the request status code differs from 200, display a
    text with "The server is down." But we wanted to keep things simple and emphasize
    only the Streamlit code ✌️
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们本可以对HTTP请求的状态码进行额外的检查。例如，如果请求状态码与200不同，则显示一条文本“服务器宕机”。但我们希望保持简洁，只强调Streamlit代码✌️
- en: We moved all the constants to a different file to be easily accessible all over
    the code. As a next step, you could make them configurable through a **.env**
    file, similar to the FastAPI setup.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将所有常量移到了一个不同的文件中，以便在整个代码中轻松访问。下一步，你可以通过**.env**文件使其可配置，类似于FastAPI的设置。
- en: Now, let's see how we built the chart 🔥
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们是如何构建图表的🔥
- en: This part contains no Streamlit code, only some Pandas and Plotly code.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分没有Streamlit代码，只有一些Pandas和Plotly代码。
- en: 'The **build_data_plot()** function performs 3 main steps:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**build_data_plot()**函数执行3个主要步骤：'
- en: It requests the prediction data for an area and consumer type from the FastAPI
    backend.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它从FastAPI后端请求某个区域和消费者类型的预测数据。
- en: If the response is valid (status_code == 200), it extracts the data from the
    response and builds a DataFrame from it. Otherwise, it creates an empty DataFrame
    to pass the same structure further.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果响应有效（status_code == 200），则从响应中提取数据并构建一个DataFrame。否则，它会创建一个空的DataFrame，以便进一步传递相同的结构。
- en: It builds a line plot — plotly graph using the DataFrame computed above.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它使用上述计算的DataFrame构建一个折线图——plotly图表。
- en: 'The role of the **build_dataframe()** function is to take 2 lists:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**build_dataframe()**函数的作用是接受2个列表：'
- en: a list of datetimes which will be used as the X axis of the line plot;
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个日期时间的列表，将作为折线图的X轴；
- en: a list of values that be used as the Y-axis of the line plot;
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一组将用作折线图Y轴的值；
- en: …and to convert them into a DataFrame. If some data points are missing, we resample
    the datetimes to a frequency of 1H to have the data continuous and highlight the
    missing data points.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: …并将其转换为DataFrame。如果一些数据点缺失，我们会将日期时间重采样为1小时的频率，以确保数据连续并突出显示缺失的数据点。
- en: Quite simple, right? That is why people love Streamlit.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 非常简单，对吧？这就是人们喜欢Streamlit的原因。
- en: Streamlit Monitoring Dashboard
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Streamlit监控仪表板
- en: Streamlit monitoring dashboard overview [Video by the Author].
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit监控仪表板概述[作者的视频]。
- en: The monitoring code can be accessed under [***app-monitoring/monitoring***](https://github.com/iusztinpaul/energy-forecasting/tree/main/app-monitoring)***.***
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 监控代码可以在 [***app-monitoring/monitoring***](https://github.com/iusztinpaul/energy-forecasting/tree/main/app-monitoring)***
    下访问。***
- en: You will see that the code is almost identical to the predictions dashboard.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现代码几乎与预测仪表板相同。
- en: When defining the Streamlit UI structure, we additionally implemented a plot
    containing the aggregated metrics and a divider.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义 Streamlit UI 结构时，我们还实现了一个包含汇总指标和分隔符的图表。
- en: The nice thing about decoupling the definition of the UI components with the
    data access is that you can inject any data in the UI without modifying it as
    long as you respect the interface of the expected data.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 解耦 UI 组件定义和数据访问的好处在于，你可以在 UI 中注入任何数据，只要尊重预期数据的接口，而无需修改 UI。
- en: The **build_metrics_plot()** function is almost identical to the **build_data_plot()**
    function from the predictions dashboard, except for the data we request from the
    API.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**build_metrics_plot()** 函数几乎与预测仪表板中的 **build_data_plot()** 函数相同，只是我们从 API
    请求的数据不同。'
- en: 'The same story goes for the **build_data_plot()** function from the monitoring
    dashboard:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 对于监控仪表板中的 **build_data_plot()** 函数也是如此：
- en: As you can see, all the data access and manipulation are handled on the FastAPI
    backend. The Streamlit UI's job is to request and display the data.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，所有的数据访问和操作都在 FastAPI 后端处理。Streamlit UI 的工作是请求和展示数据。
- en: It is nice that we just reused 90% of the predictions dashboard code to build
    a friendly monitoring dashboard.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 很高兴我们只重用了 90% 的预测仪表板代码来构建一个友好的监控仪表板。
- en: Wrap Everything with Docker
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用 Docker 包装一切
- en: The final step is to Dockerize the 3 web applications and wrap them up in a
    docker-compose file.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将这三个 web 应用程序 Docker 化，并将它们打包到一个 docker-compose 文件中。
- en: 'Thus, we can start the whole web application with a single command:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以通过一个命令启动整个 web 应用程序：
- en: '[PRE1]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '***Here is the*** [***FastAPI Dockerfile***](https://github.com/iusztinpaul/energy-forecasting/blob/main/app-api/Dockerfile)***:***'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '***这里是*** [***FastAPI Dockerfile***](https://github.com/iusztinpaul/energy-forecasting/blob/main/app-api/Dockerfile)***:***'
- en: One interesting thing to highlight is that we initially copied & installed only
    the Poetry dependencies. Thus, when you modify the code, the Docker image will
    be rebuilt only starting from line 19, aka copying your code.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，我们最初只复制并安装了 Poetry 依赖项。因此，当你修改代码时，Docker 镜像将仅从第 19 行开始重建，即复制你的代码。
- en: This is a common strategy to leverage the Docker caching features when building
    an image to speed up your development process, as you rarely add new dependencies
    and installing them is the most time-consuming step.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种常见的策略，利用 Docker 缓存功能在构建镜像时加快开发过程，因为你很少添加新的依赖项，而安装它们是最耗时的步骤。
- en: 'Also, inside **run.sh** we call:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在 **run.sh** 中我们调用：
- en: '[PRE2]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: But wait, there is no Python file in the command 😟
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 但是等一下，命令中没有 Python 文件 😟
- en: Well, you can actually define a **__main__.py** file inside a module, making
    your module executable.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 其实，你可以在模块内部定义一个 **__main__.py** 文件，使你的模块可执行。
- en: 'Thus, when calling the **api** module, you call the [**__main__.py**](https://github.com/iusztinpaul/energy-forecasting/blob/main/app-api/api/__main__.py)
    file:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当调用 **api** 模块时，你会调用 [**__main__.py**](https://github.com/iusztinpaul/energy-forecasting/blob/main/app-api/api/__main__.py)
    文件：
- en: In our case, in the[**__main__.py**](https://github.com/iusztinpaul/energy-forecasting/blob/main/app-api/api/__main__.py)
    file, we use the uvicorn web server to start the FastAPI backend and configure
    it with the right IP, port, log_level, etc.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，在[**__main__.py**](https://github.com/iusztinpaul/energy-forecasting/blob/main/app-api/api/__main__.py)
    文件中，我们使用 uvicorn web 服务器来启动 FastAPI 后端，并用正确的 IP、端口、日志级别等进行配置。
- en: '**Here is the** [**Streamlit predictions dashboard Dockerfile**](https://github.com/iusztinpaul/energy-forecasting/blob/main/app-frontend/Dockerfile)**:**'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**这里是** [**Streamlit 预测仪表板 Dockerfile**](https://github.com/iusztinpaul/energy-forecasting/blob/main/app-frontend/Dockerfile)**:**'
- en: As you can see, this Dockerfile is almost identical to the one used for the
    FastAPI backend, except for the last **CMD** command, which is a standard CLI
    command for starting your Streamlit application.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这个 Dockerfile 几乎与用于 FastAPI 后端的那个相同，除了最后的 **CMD** 命令，这是一个标准的 CLI 命令，用于启动你的
    Streamlit 应用程序。
- en: The [Streamlit monitoring dashboard Dockerfile](https://github.com/iusztinpaul/energy-forecasting/blob/main/app-monitoring/Dockerfile)
    is identical to the predictions dashboard Dockerfile. So it is redundant to copy-paste
    it here.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[Streamlit监控仪表板Dockerfile](https://github.com/iusztinpaul/energy-forecasting/blob/main/app-monitoring/Dockerfile)与预测仪表板Dockerfile完全相同。所以在这里重复粘贴是多余的。'
- en: The good news is that you can leverage the Dockerfile template I showed you
    above to Dockerize most of your Python applications ✌️
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，你可以利用我之前展示的Dockerfile模板来Docker化大部分Python应用程序✌️
- en: 'Finally, let''s see how to wrap up everything with docker-compose. You can
    access the file under [***deploy/app-docker-compose.yml***](https://github.com/iusztinpaul/energy-forecasting/blob/main/deploy/app-docker-compose.yml):'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看如何使用docker-compose来完成所有工作。你可以在[***deploy/app-docker-compose.yml***](https://github.com/iusztinpaul/energy-forecasting/blob/main/deploy/app-docker-compose.yml)文件中找到相关内容：
- en: As you can see, the frontend and monitoring services must wait for the API to
    turn on before starting.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，前端和监控服务必须等待API启动后才能开始。
- en: Also, only the API needs to load the credentials from a **.env** file.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，只有API需要从**.env**文件中加载凭证。
- en: 'Now, you can run the entire web application using only the following command,
    and Docker will take care of building the images and running the containers:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你只需运行以下命令，Docker将处理构建镜像和运行容器：
- en: '[PRE3]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Conclusion
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Congratulations! You finished the **sixth lesson** from the **Full Stack 7-Steps
    MLOps Framework** course. It means that now you understand how to consume the
    predictions of your ML system to build your awesome application.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你完成了**第六课**的**全栈七步MLOps框架**课程。这意味着你现在已经理解了如何使用你的机器学习系统的预测来构建你出色的应用程序。
- en: 'In this lesson, you learned how to:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课中，你学会了如何：
- en: consume the predictions & monitoring metrics from GCS,
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从GCS中消费预测和监控指标，
- en: build a FastAPI backend to load and serve the data from GCS,
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个FastAPI后端来加载和服务来自GCS的数据，
- en: implement a dashboard in Streamlit to show the predictions,
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Streamlit中实现一个仪表板来展示预测，
- en: create a monitoring dashboard in Streamlit to visualize the performance of the
    model.
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Streamlit中创建一个监控仪表板来可视化模型的性能。
- en: Now that you understand the flexibility of building an application on top of
    an ML system that uses a batch prediction architecture, you can easily design
    full-stack machine learning applications.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经理解了基于批量预测架构的机器学习系统上构建应用程序的灵活性，你可以轻松设计全栈机器学习应用程序。
- en: '[Check out Lesson 7](/seamless-ci-cd-pipelines-with-github-actions-on-gcp-your-tools-for-effective-mlops-96f676f72012)
    for the final step of the **Full Stack 7-Steps MLOps Framework**, which is to
    deploy everything to GCP and build a CI/CD pipeline using GitHub Actions.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '[查看第7课](/seamless-ci-cd-pipelines-with-github-actions-on-gcp-your-tools-for-effective-mlops-96f676f72012)，这是**全栈七步MLOps框架**的最后一步，即将所有内容部署到GCP并使用GitHub
    Actions构建CI/CD管道。'
- en: '**Also,** [**you can access the GitHub repository here**](https://github.com/iusztinpaul/energy-forecasting)**.**'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '**另外，** [**你可以在这里访问GitHub仓库**](https://github.com/iusztinpaul/energy-forecasting)**。**'
- en: 💡 My goal is to help machine learning engineers level up in designing and productionizing
    ML systems. Follow me on [LinkedIn](https://www.linkedin.com/in/pauliusztin/)
    or subscribe to my [weekly newsletter](https://pauliusztin.substack.com/) for
    more insights!
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 💡 我的目标是帮助机器学习工程师在设计和生产化机器学习系统方面提升水平。关注我在[LinkedIn](https://www.linkedin.com/in/pauliusztin/)或订阅我的[每周通讯](https://pauliusztin.substack.com/)以获取更多见解！
- en: 🔥 If you enjoy reading articles like this and wish to support my writing, consider
    [becoming a Medium member](https://pauliusztin.medium.com/membership). Using [my
    referral link](https://pauliusztin.medium.com/membership), you can support me
    without extra cost while enjoying limitless access to Medium's rich collection
    of stories.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 🔥 如果你喜欢阅读这样的文章并希望支持我的写作，请考虑[成为Medium会员](https://pauliusztin.medium.com/membership)。使用[我的推荐链接](https://pauliusztin.medium.com/membership)，你可以在不增加额外成本的情况下支持我，同时享受Medium丰富故事的无限访问权限。
- en: '[](https://pauliusztin.medium.com/membership?source=post_page-----72825def1243--------------------------------)
    [## Join Medium with my referral link - Paul Iusztin'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://pauliusztin.medium.com/membership?source=post_page-----72825def1243--------------------------------)
    [## 使用我的推荐链接加入Medium - Paul Iusztin'
- en: 🤖 Join to get exclusive content about designing and building production-ready
    ML systems 🚀 Unlock full access to…
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 🤖 加入以获取有关设计和构建生产就绪机器学习系统的独家内容🚀 解锁完全访问权限...
- en: pauliusztin.medium.com](https://pauliusztin.medium.com/membership?source=post_page-----72825def1243--------------------------------)
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '[pauliusztin.medium.com](https://pauliusztin.medium.com/membership?source=post_page-----72825def1243--------------------------------)'
- en: Thank you ✌🏼 !
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 谢谢✌🏼！
- en: References
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[1] [Energy Consumption per DE35 Industry Code from Denmark API](https://www.energidataservice.dk/tso-electricity/ConsumptionDE35Hour),
    [Denmark Energy Data Service](https://www.energidataservice.dk/about/)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] [丹麦 API 每小时 DE35 行业代码的能源消耗](https://www.energidataservice.dk/tso-electricity/ConsumptionDE35Hour)，[丹麦能源数据服务](https://www.energidataservice.dk/about/)'
- en: '[2] [Path Parameters](https://fastapi.tiangolo.com/tutorial/path-params/),
    FastAPI Documentation'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] [路径参数](https://fastapi.tiangolo.com/tutorial/path-params/)，FastAPI 文档'
