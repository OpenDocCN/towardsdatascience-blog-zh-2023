- en: Are Globals in Python Really Global?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/are-globals-in-python-really-global-492f1e4faf9b](https://towardsdatascience.com/are-globals-in-python-really-global-492f1e4faf9b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PYTHON PROGRAMMING
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Learn a hack to make a Python object truly global.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@nyggus?source=post_page-----492f1e4faf9b--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----492f1e4faf9b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----492f1e4faf9b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----492f1e4faf9b--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----492f1e4faf9b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----492f1e4faf9b--------------------------------)
    ·8 min read·Nov 17, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4f883bbad7e256509273e34303fb4715.png)'
  prefs: []
  type: TYPE_IMG
- en: Truly global means accessible from everywhere. Photo by [Markus Spiske](https://unsplash.com/@markusspiske?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Does Python offer globals?
  prefs: []
  type: TYPE_NORMAL
- en: An immediate response is, it does. And indeed, enough to look into [the Python
    official documentation](https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python)
    to read that…
  prefs: []
  type: TYPE_NORMAL
- en: In Python, variables that are only referenced inside a function are implicitly
    global. If a variable is assigned a value anywhere within the function’s body,
    it’s assumed to be a local unless explicitly declared as global.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So, Python definitely offers globals. What’s more, globals constitute quite
    a controversial topic, as using them can lead to serious difficulties for both
    the developer and the user.
  prefs: []
  type: TYPE_NORMAL
- en: You might think, why at all should we use a programming tool that is so controversial.
    It’s a fair question — but it’s simple to answer. Globals are among programming
    tools that can be very useful under the condition that they are correctly used.
    Incorrectly used, however, they can do more harm than good.
  prefs: []
  type: TYPE_NORMAL
- en: Globals are among programming tools that can be very useful under the condition
    that they are correctly used. Incorrectly used, however, they can do more harm
    than good.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Globals can be accessed from anywhere in a program. Hence, if you need a particular
    object to be accessible from everywhere — this is when you create a global object.
  prefs: []
  type: TYPE_NORMAL
- en: You can create global constants, which don’t change during program execution;
    and global variables, which can change. A global constant is thus a literal value.
    Examples can be, for instance, a company’s name, the value of Pi, or any mathematical
    constant. A global variable can be price, demand or color; these values can change,
    and that’s why they are variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[The Python naming convention](https://peps.python.org/pep-0008/) for globals
    is as follows: use uppercase for global constants (`PI`) and lowercase for global
    variables (`price`).'
  prefs: []
  type: TYPE_NORMAL
- en: Globals constitute a typical topic in programming, but this does not have to
    mean that they work the same in each programming language. Globals in Python have
    their own specificity, and any Python developer must know how they work.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, therefore, we’ll discuss what makes the essence of global
    variables: the global scope. I will show you what *global* means in the Python
    context, and that what we normally consider global in Python does not necessarily
    mean *truly global*.'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll also analyze the implications of this issue — and I’ll show you how to
    utilize this knowledge in coding practice. This will require knowledge, skills
    and — above all — caution, because these are quite subtle matters that can easily
    lead to significant mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: What is a global variable?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This article does not aim to debate whether globals should be used or not. It’s
    enough to say that a global variable has a global scope and its value can change,
    while a global constant has a global scope and its value cannot change.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s postpone the discussion of whether or not you should use globals in your
    Python programs for another day. First, it is such an important topic that it
    deserves our full attention, and therefore deserves a dedicated article. Second,
    to discuss things like that, we need to know more about the global scope in Python,
    a topic that this article introduces.
  prefs: []
  type: TYPE_NORMAL
- en: Globals generally
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As Tony Gaddis explains in his [book](https://media.pearsoncmg.com/bc/abp/cs-resources/products/product.html#product,isbn=0134801156),
    a global variable can be used in all modules in a program. In other words, the
    global scope is the entire program, so a global variable or constant can be used
    in each module of the program.
  prefs: []
  type: TYPE_NORMAL
- en: This is a very concise explanation, but that’s all we need because there is
    nothing complex about the definition of global variables.
  prefs: []
  type: TYPE_NORMAL
- en: Globals in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will see that the definition of globals in Python is more complicated.
    Interestingly, the official Python documentation doesn’t say much about globals.
    You can read the small section I linked to above, and you can read about [the](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement)
    `[global](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement)`
    [statement itself](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement).
    You should also note the following digression in [PEP8](https://peps.python.org/pep-0008/#global-variable-names),
    where the style guide explains the naming convention for global variables:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s hope that these variables are meant for use inside one module only.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In other words, *let’s hope that global variables are meant for use at the module
    level, not at the truly global level*.
  prefs: []
  type: TYPE_NORMAL
- en: The question is, do you know how to use global objects that are truly global
    in Python? In the following section, I will show you what they are and how to
    make objects global across the entire program. Such objects are available in this
    particular Python session from any module without having to import them, just
    like `sum`, `list` and many other objects are available without actually importing
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Module global scope
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A module global scope is what the name suggests: the global scope for a particular
    module. It’s best to show this in an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, so what do we have here? First of all, we’ve got two global objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`COMPANY_NAME` — a global constant'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`year` — a global variable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then we have a function `represent()`, which uses both of these globals. Let’s
    see this in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'What you’ve just seen is the typically understood global scope in Python: the
    module global scope. It’s time to move on, to discuss the program global scope.'
  prefs: []
  type: TYPE_NORMAL
- en: Program global scope
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The only global variables in Python that can be accessed from all modules are
    those available in the `builtins` module.
  prefs: []
  type: TYPE_NORMAL
- en: It contains, for instance, the above-mentioned `sum` and `list` objects as well
    as many others, such as exceptions (e.g., `ValueError` or `Exception`) or various
    functions (e.g., `any` or `all`). So, basically anything that is available through
    the `builtins` module is available in all the modules in the Python session.
  prefs: []
  type: TYPE_NORMAL
- en: Now, for our little hack. It’s quite simple, so if you’re not new to Python,
    you might have already come up with it yourself. If you want to make an object
    global, simply add it to the `builtins` module. This will immediately make the
    object available in all the modules of a session without the need to import anything.
    Of course, we’re talking about *a particular session*, the one in which the object
    has been added to the `builtins` scope.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to make an object global, it’s enough to add it to the `builtins`
    module.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s see how this trick works. First, create a `main.py` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create another module, `use.py`, located in the same directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `scream()` function uses the `SCREAM` object, even though
    it’s neither defined nor imported in the `use` module. What we do know, however,
    is that it’s defined and added to the `builtins` module in the `main` module.
    Will this work?
  prefs: []
  type: TYPE_NORMAL
- en: 'First, note that [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
    will not like using the `SCREAM` object inside the `use` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b5879ece268772f2eed871a2a77f0136.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
    doesn’t know that SCREAM has been added to builtins. Screenshot from Visual Studio
    Code, by author'
  prefs: []
  type: TYPE_NORMAL
- en: 'Neither will `[mypy](https://mypy.readthedocs.io/en/stable/)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e2b4e19ce451a9364511bcd80ac730ba.png)'
  prefs: []
  type: TYPE_IMG
- en: '`[Mypy](https://mypy.readthedocs.io/en/stable/)` doesn’t know that SCREAM has
    been added to builtins. Screenshot from Visual Studio Code, by author'
  prefs: []
  type: TYPE_NORMAL
- en: So, this is considered a static error. Is it?
  prefs: []
  type: TYPE_NORMAL
- en: 'It is — even if we can make this work dynamically. This is a static error because
    whether or not this will work depends on the order of imports. If you simply import
    `use` and run the `scream()` function, you will get an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b3c8d92db6a6d0bbf3fbbd6b3bfdd588.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The failure of use.scream(2): SCREAM is undefined. Screenshot from Visual Studio
    Code, by author'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if you first import `main` and then `use`, you may be surprised to
    see the `scream()` function working just fine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a759c4deb36a4f9836c44a4fb07d1a21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Success of use.scream(2): SCREAM has been added to builtins. Screenshot from
    Visual Studio Code, by author'
  prefs: []
  type: TYPE_NORMAL
- en: 'This time, it worked because when we imported `main`, these lines were run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/36855bf89b0521963bab657e66d1b8cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The builtins hack: SCREAM is now a truly global object. Screenshot from Visual
    Studio Code, by author'
  prefs: []
  type: TYPE_NORMAL
- en: 'That way, the `builtins` module achieved a new object, `SCREAM`. From now on,
    you can use `SCREAM`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/939afa11120e8c2a863e0df581f389ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The builtins hack: SCREAM is now a truly global object. Screenshot from Visual
    Studio Code, by author'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the article, I showed you a little hack to make Python objects truly global.
    You’ve unlikely seen this method in action, but this doesn’t mean it’s completely
    unused.
  prefs: []
  type: TYPE_NORMAL
- en: 'One example is the `[tracemem](https://github.com/nyggus/tracemem/)` Python
    package. In [its documentation](https://github.com/nyggus/tracemem/#why-the-builtins-global-scope),
    you will see the following explanation of why `tracemem` utilizes the `builtins`
    global scope:'
  prefs: []
  type: TYPE_NORMAL
- en: Since this feature of `*tracemem*` is to be used to debug memory use from various
    modules, it’d be inconvenient to import the required objects in all these modules.
    That’s why the required objects are kept in the global scope…
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Whether you find this explanation convincing or not, I believe it’s valuable
    to be aware of this trick. It’s one of those things that can significantly broaden
    your Python knowledge by helping you grasp the language’s intricacies.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the decision of whether or not to use `builtins` globals in your coding
    practice is a different story. Of one thing I am certain: you should never decide
    to do so without a solid understanding of how globals operate in Python.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I called this a hack, but never forget that all Python objects available in
    a session are made available via the `builtins` globals. This doesn’t mean, however,
    that you should use this method for any global: any global is not the same thing
    as Python builtins.'
  prefs: []
  type: TYPE_NORMAL
- en: Thus, you definitely shouldn’t overuse this hack. Not only can it introduce
    static and dynamic errors, but also it can makes code difficult to read and comprehend.
    However, in rare instances, you might find yourself thinking that despite these
    drawbacks, this is precisely what you need.
  prefs: []
  type: TYPE_NORMAL
- en: If that’s the case, pause and reconsider your decision. Then, reconsider it
    again. And even once more. Discuss it with your fellow project members. Only after
    this thorough evaluation, if no one raises objections, should you consider using
    this method.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of whether or not you ever employ this concept in your own projects,
    it’s essential to grasp how the `builtins` scope and globals function. This is
    because the `builtins` scope establishes the fundamental scope of Python, and
    without understanding this you will never really know how Python works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thanks for reading. If you enjoyed this article, you may also enjoy other articles
    I wrote; you will see them [here](https://medium.com/@nyggus). And if you want
    to join Medium, please use my referral link below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@nyggus/membership?source=post_page-----492f1e4faf9b--------------------------------)
    [## Join Medium with my referral link - Marcin Kozak'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@nyggus/membership?source=post_page-----492f1e4faf9b--------------------------------)
  prefs: []
  type: TYPE_NORMAL
