- en: Are Globals in Python Really Global?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/are-globals-in-python-really-global-492f1e4faf9b](https://towardsdatascience.com/are-globals-in-python-really-global-492f1e4faf9b)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Learn a hack to make a Python object truly global.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@nyggus?source=post_page-----492f1e4faf9b--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----492f1e4faf9b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----492f1e4faf9b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----492f1e4faf9b--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----492f1e4faf9b--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----492f1e4faf9b--------------------------------)
    ·8 min read·Nov 17, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4f883bbad7e256509273e34303fb4715.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
- en: Truly global means accessible from everywhere. Photo by [Markus Spiske](https://unsplash.com/@markusspiske?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Does Python offer globals?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: An immediate response is, it does. And indeed, enough to look into [the Python
    official documentation](https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python)
    to read that…
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: In Python, variables that are only referenced inside a function are implicitly
    global. If a variable is assigned a value anywhere within the function’s body,
    it’s assumed to be a local unless explicitly declared as global.
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So, Python definitely offers globals. What’s more, globals constitute quite
    a controversial topic, as using them can lead to serious difficulties for both
    the developer and the user.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: You might think, why at all should we use a programming tool that is so controversial.
    It’s a fair question — but it’s simple to answer. Globals are among programming
    tools that can be very useful under the condition that they are correctly used.
    Incorrectly used, however, they can do more harm than good.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Globals are among programming tools that can be very useful under the condition
    that they are correctly used. Incorrectly used, however, they can do more harm
    than good.
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Globals can be accessed from anywhere in a program. Hence, if you need a particular
    object to be accessible from everywhere — this is when you create a global object.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: You can create global constants, which don’t change during program execution;
    and global variables, which can change. A global constant is thus a literal value.
    Examples can be, for instance, a company’s name, the value of Pi, or any mathematical
    constant. A global variable can be price, demand or color; these values can change,
    and that’s why they are variables.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建在程序执行期间不改变的全局常量；以及可以改变的全局变量。因此，全局常量是字面值。例如，可以是公司的名称、圆周率的值或任何数学常量。全局变量可以是价格、需求或颜色；这些值可以改变，这就是它们是变量的原因。
- en: '[The Python naming convention](https://peps.python.org/pep-0008/) for globals
    is as follows: use uppercase for global constants (`PI`) and lowercase for global
    variables (`price`).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[Python的命名约定](https://peps.python.org/pep-0008/)如下：全局常量使用大写字母（`PI`），全局变量使用小写字母（`price`）。'
- en: Globals constitute a typical topic in programming, but this does not have to
    mean that they work the same in each programming language. Globals in Python have
    their own specificity, and any Python developer must know how they work.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 全局变量是编程中的一个典型话题，但这并不意味着它们在每种编程语言中都表现相同。Python中的全局变量有其自身的特殊性，任何Python开发者都必须了解它们的工作方式。
- en: 'In this article, therefore, we’ll discuss what makes the essence of global
    variables: the global scope. I will show you what *global* means in the Python
    context, and that what we normally consider global in Python does not necessarily
    mean *truly global*.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将探讨什么构成全局变量的本质：全局作用域。我会向你展示在Python上下文中*全局*的含义，以及我们通常认为的Python中的全局变量并不一定是*真正的全局*。
- en: We’ll also analyze the implications of this issue — and I’ll show you how to
    utilize this knowledge in coding practice. This will require knowledge, skills
    and — above all — caution, because these are quite subtle matters that can easily
    lead to significant mistakes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将分析这个问题的影响——我会展示如何在编码实践中利用这些知识。这需要知识、技能和——最重要的是——谨慎，因为这些是相当微妙的事项，容易导致重大错误。
- en: What is a global variable?
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是全局变量？
- en: This article does not aim to debate whether globals should be used or not. It’s
    enough to say that a global variable has a global scope and its value can change,
    while a global constant has a global scope and its value cannot change.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本文旨在探讨全局变量的本质：全局作用域。**全局变量**具有全局作用域，其值可以改变，而**全局常量**则具有全局作用域，其值不可改变。
- en: Let’s postpone the discussion of whether or not you should use globals in your
    Python programs for another day. First, it is such an important topic that it
    deserves our full attention, and therefore deserves a dedicated article. Second,
    to discuss things like that, we need to know more about the global scope in Python,
    a topic that this article introduces.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论是否在Python程序中使用全局变量的事宜留到另一天。首先，这是一个如此重要的话题，值得我们全神贯注，因此值得一篇专门的文章。其次，讨论这些内容时，我们需要了解更多关于Python中的全局作用域的知识，这是本文所介绍的。
- en: Globals generally
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局变量一般
- en: As Tony Gaddis explains in his [book](https://media.pearsoncmg.com/bc/abp/cs-resources/products/product.html#product,isbn=0134801156),
    a global variable can be used in all modules in a program. In other words, the
    global scope is the entire program, so a global variable or constant can be used
    in each module of the program.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Tony Gaddis在他的[书籍](https://media.pearsoncmg.com/bc/abp/cs-resources/products/product.html#product,isbn=0134801156)中解释的，**全局变量**可以在程序中的所有模块中使用。换句话说，全局作用域是整个程序，因此全局变量或常量可以在程序的每个模块中使用。
- en: This is a very concise explanation, but that’s all we need because there is
    nothing complex about the definition of global variables.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简洁的解释，但这正是我们所需的，因为全局变量的定义并不复杂。
- en: Globals in Python
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python中的全局变量
- en: 'You will see that the definition of globals in Python is more complicated.
    Interestingly, the official Python documentation doesn’t say much about globals.
    You can read the small section I linked to above, and you can read about [the](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement)
    `[global](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement)`
    [statement itself](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement).
    You should also note the following digression in [PEP8](https://peps.python.org/pep-0008/#global-variable-names),
    where the style guide explains the naming convention for global variables:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现 Python 中的全局定义更复杂。有趣的是，官方 Python 文档对全局变量的描述并不多。你可以阅读我上面链接的小节，也可以阅读[the](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement)
    `[global](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement)`
    [statement itself](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement)。你还应该注意[PEP8](https://peps.python.org/pep-0008/#global-variable-names)中的这一点，其中样式指南解释了全局变量的命名约定：
- en: Let’s hope that these variables are meant for use inside one module only.
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 希望这些变量仅用于一个模块内部。
- en: In other words, *let’s hope that global variables are meant for use at the module
    level, not at the truly global level*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，*希望全局变量是用于模块级别，而不是完全的全局级别*。
- en: The question is, do you know how to use global objects that are truly global
    in Python? In the following section, I will show you what they are and how to
    make objects global across the entire program. Such objects are available in this
    particular Python session from any module without having to import them, just
    like `sum`, `list` and many other objects are available without actually importing
    them.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是，你知道如何使用 Python 中真正全局的对象吗？在接下来的部分，我将向你展示它们是什么以及如何使对象在整个程序中全局。这样的对象在特定的 Python
    会话中可以从任何模块访问，而无需导入，就像`sum`、`list`和许多其他对象一样，它们在不实际导入的情况下就可以使用。
- en: Module global scope
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块全局作用域
- en: 'A module global scope is what the name suggests: the global scope for a particular
    module. It’s best to show this in an example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 模块全局作用域就是字面上的意思：特定模块的全局作用域。最好通过一个例子来展示这一点：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Okay, so what do we have here? First of all, we’ve got two global objects:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，那么我们有什么呢？首先，我们有两个全局对象：
- en: '`COMPANY_NAME` — a global constant'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COMPANY_NAME` — 一个全局常量'
- en: '`year` — a global variable'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`year` — 一个全局变量'
- en: 'Then we have a function `represent()`, which uses both of these globals. Let’s
    see this in action:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们有一个函数`represent()`，它使用了这两个全局变量。让我们看看它的实际效果：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'What you’ve just seen is the typically understood global scope in Python: the
    module global scope. It’s time to move on, to discuss the program global scope.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚看到的是 Python 中通常理解的全局作用域：模块全局作用域。现在是时候继续讨论程序全局作用域了。
- en: Program global scope
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 程序全局作用域
- en: The only global variables in Python that can be accessed from all modules are
    those available in the `builtins` module.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，唯一可以从所有模块访问的全局变量是那些在`builtins`模块中的变量。
- en: It contains, for instance, the above-mentioned `sum` and `list` objects as well
    as many others, such as exceptions (e.g., `ValueError` or `Exception`) or various
    functions (e.g., `any` or `all`). So, basically anything that is available through
    the `builtins` module is available in all the modules in the Python session.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含了例如上述提到的`sum`和`list`对象以及许多其他对象，如异常（例如，`ValueError`或`Exception`）或各种函数（例如，`any`或`all`）。所以，基本上，任何通过`builtins`模块提供的东西都可以在
    Python 会话中的所有模块中使用。
- en: Now, for our little hack. It’s quite simple, so if you’re not new to Python,
    you might have already come up with it yourself. If you want to make an object
    global, simply add it to the `builtins` module. This will immediately make the
    object available in all the modules of a session without the need to import anything.
    Of course, we’re talking about *a particular session*, the one in which the object
    has been added to the `builtins` scope.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，进行我们的简单小技巧。如果你对 Python 不陌生，你可能已经自己想到这个方法了。如果你想让一个对象成为全局的，只需将其添加到`builtins`模块中。这会立即使该对象在会话中的所有模块中可用，而无需导入任何内容。当然，我们说的是*特定的会话*，即对象已被添加到`builtins`作用域的会话。
- en: If you want to make an object global, it’s enough to add it to the `builtins`
    module.
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你想让一个对象成为全局的，只需将其添加到`builtins`模块中即可。
- en: 'Let’s see how this trick works. First, create a `main.py` module:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个技巧是如何工作的。首先，创建一个`main.py`模块：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now create another module, `use.py`, located in the same directory:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建另一个模块，`use.py`，位于同一目录下：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, the `scream()` function uses the `SCREAM` object, even though
    it’s neither defined nor imported in the `use` module. What we do know, however,
    is that it’s defined and added to the `builtins` module in the `main` module.
    Will this work?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，`scream()` 函数使用了 `SCREAM` 对象，即使它在 `use` 模块中既没有定义也没有导入。我们确切知道的是，它在 `main`
    模块中的 `builtins` 模块中被定义并添加。这样会有效吗？
- en: 'First, note that [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
    will not like using the `SCREAM` object inside the `use` module:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请注意 [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
    不会喜欢在 `use` 模块中使用 `SCREAM` 对象：
- en: '![](../Images/b5879ece268772f2eed871a2a77f0136.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b5879ece268772f2eed871a2a77f0136.png)'
- en: '[Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
    doesn’t know that SCREAM has been added to builtins. Screenshot from Visual Studio
    Code, by author'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
    并不知道 SCREAM 已经被添加到内建函数中。截图来自 Visual Studio Code，作者提供'
- en: 'Neither will `[mypy](https://mypy.readthedocs.io/en/stable/)`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`[mypy](https://mypy.readthedocs.io/en/stable/)` 也不会喜欢：'
- en: '![](../Images/e2b4e19ce451a9364511bcd80ac730ba.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e2b4e19ce451a9364511bcd80ac730ba.png)'
- en: '`[Mypy](https://mypy.readthedocs.io/en/stable/)` doesn’t know that SCREAM has
    been added to builtins. Screenshot from Visual Studio Code, by author'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`[Mypy](https://mypy.readthedocs.io/en/stable/)` 并不知道 SCREAM 已经被添加到内建函数中。截图来自
    Visual Studio Code，作者提供'
- en: So, this is considered a static error. Is it?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这是否被认为是静态错误呢？
- en: 'It is — even if we can make this work dynamically. This is a static error because
    whether or not this will work depends on the order of imports. If you simply import
    `use` and run the `scream()` function, you will get an error:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们能让它动态运行，这也是一个静态错误，因为是否能正常工作取决于导入的顺序。如果你只是导入`use`并运行`scream()`函数，你将会遇到一个错误：
- en: '![](../Images/b3c8d92db6a6d0bbf3fbbd6b3bfdd588.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b3c8d92db6a6d0bbf3fbbd6b3bfdd588.png)'
- en: 'The failure of use.scream(2): SCREAM is undefined. Screenshot from Visual Studio
    Code, by author'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: use.scream(2)失败：SCREAM 未定义。截图来自 Visual Studio Code，作者提供
- en: 'However, if you first import `main` and then `use`, you may be surprised to
    see the `scream()` function working just fine:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你先导入`main`然后再导入`use`，你可能会惊讶地发现`scream()`函数可以正常工作：
- en: '![](../Images/a759c4deb36a4f9836c44a4fb07d1a21.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a759c4deb36a4f9836c44a4fb07d1a21.png)'
- en: 'Success of use.scream(2): SCREAM has been added to builtins. Screenshot from
    Visual Studio Code, by author'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: use.scream(2) 成功：SCREAM 已经被添加到内建函数中。截图来自 Visual Studio Code，作者提供
- en: 'This time, it worked because when we imported `main`, these lines were run:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这次它起作用了，因为当我们导入`main`时，这些代码行被执行了：
- en: '![](../Images/36855bf89b0521963bab657e66d1b8cb.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/36855bf89b0521963bab657e66d1b8cb.png)'
- en: 'The builtins hack: SCREAM is now a truly global object. Screenshot from Visual
    Studio Code, by author'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 内建函数破解：SCREAM 现在是一个真正的全局对象。截图来自 Visual Studio Code，作者提供
- en: 'That way, the `builtins` module achieved a new object, `SCREAM`. From now on,
    you can use `SCREAM`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，`builtins` 模块创建了一个新的对象，`SCREAM`。从现在起，你可以使用 `SCREAM`：
- en: '![](../Images/939afa11120e8c2a863e0df581f389ab.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/939afa11120e8c2a863e0df581f389ab.png)'
- en: 'The builtins hack: SCREAM is now a truly global object. Screenshot from Visual
    Studio Code, by author'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 内建函数破解：SCREAM 现在是一个真正的全局对象。截图来自 Visual Studio Code，作者提供
- en: Conclusion
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In the article, I showed you a little hack to make Python objects truly global.
    You’ve unlikely seen this method in action, but this doesn’t mean it’s completely
    unused.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在文章中，我向你展示了一个小技巧，使 Python 对象真正成为全局对象。你可能没见过这种方法，但这并不意味着它完全没有用。
- en: 'One example is the `[tracemem](https://github.com/nyggus/tracemem/)` Python
    package. In [its documentation](https://github.com/nyggus/tracemem/#why-the-builtins-global-scope),
    you will see the following explanation of why `tracemem` utilizes the `builtins`
    global scope:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子是 `[tracemem](https://github.com/nyggus/tracemem/)` Python 包。在 [它的文档](https://github.com/nyggus/tracemem/#why-the-builtins-global-scope)
    中，你将看到以下关于 `tracemem` 如何利用 `builtins` 全局作用域的解释：
- en: Since this feature of `*tracemem*` is to be used to debug memory use from various
    modules, it’d be inconvenient to import the required objects in all these modules.
    That’s why the required objects are kept in the global scope…
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 由于 `*tracemem*` 这个功能用于调试来自不同模块的内存使用，因此在所有这些模块中导入所需的对象会很不方便。这就是为什么所需的对象被保留在全局作用域中的原因……
- en: Whether you find this explanation convincing or not, I believe it’s valuable
    to be aware of this trick. It’s one of those things that can significantly broaden
    your Python knowledge by helping you grasp the language’s intricacies.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是否觉得这个解释有说服力，我相信了解这个技巧是有价值的。它是那些可以显著扩展你Python知识的东西，通过帮助你掌握语言的复杂性。
- en: 'However, the decision of whether or not to use `builtins` globals in your coding
    practice is a different story. Of one thing I am certain: you should never decide
    to do so without a solid understanding of how globals operate in Python.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，是否在你的编码实践中使用`builtins`全局变量是另一回事。我确信一点：在没有对Python中全局变量的操作有深入理解的情况下，你绝不应该决定使用它。
- en: 'I called this a hack, but never forget that all Python objects available in
    a session are made available via the `builtins` globals. This doesn’t mean, however,
    that you should use this method for any global: any global is not the same thing
    as Python builtins.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我称之为技巧，但永远不要忘记，所有在会话中可用的Python对象都是通过`builtins`全局变量提供的。然而，这并不意味着你应该对任何全局变量使用这种方法：任何全局变量并不等同于Python内置对象。
- en: Thus, you definitely shouldn’t overuse this hack. Not only can it introduce
    static and dynamic errors, but also it can makes code difficult to read and comprehend.
    However, in rare instances, you might find yourself thinking that despite these
    drawbacks, this is precisely what you need.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你绝对不应该过度使用这个技巧。它不仅可能引入静态和动态错误，还可能使代码难以阅读和理解。然而，在少数情况下，你可能会觉得尽管有这些缺点，这正是你所需要的。
- en: If that’s the case, pause and reconsider your decision. Then, reconsider it
    again. And even once more. Discuss it with your fellow project members. Only after
    this thorough evaluation, if no one raises objections, should you consider using
    this method.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这种情况，请暂停并重新考虑你的决定。然后，再考虑一次，甚至再考虑一次。与项目成员讨论。在经过这彻底的评估后，如果没有人提出异议，才考虑使用这种方法。
- en: Regardless of whether or not you ever employ this concept in your own projects,
    it’s essential to grasp how the `builtins` scope and globals function. This is
    because the `builtins` scope establishes the fundamental scope of Python, and
    without understanding this you will never really know how Python works.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是否在自己的项目中使用这个概念，理解`builtins`作用域和全局变量的工作原理都是至关重要的。这是因为`builtins`作用域建立了Python的基本作用域，没有理解这一点，你永远无法真正了解Python的工作机制。
- en: 'Thanks for reading. If you enjoyed this article, you may also enjoy other articles
    I wrote; you will see them [here](https://medium.com/@nyggus). And if you want
    to join Medium, please use my referral link below:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你喜欢这篇文章，你也可能会喜欢我写的其他文章；你可以在[这里](https://medium.com/@nyggus)看到它们。如果你想加入Medium，请使用我下面的推荐链接：
- en: '[](https://medium.com/@nyggus/membership?source=post_page-----492f1e4faf9b--------------------------------)
    [## Join Medium with my referral link - Marcin Kozak'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 通过我的推荐链接加入Medium - Marcin Kozak](https://medium.com/@nyggus/membership?source=post_page-----492f1e4faf9b--------------------------------)'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为Medium的会员，你的部分会员费用将用于你阅读的作者，你可以完全访问每一篇故事…
- en: medium.com](https://medium.com/@nyggus/membership?source=post_page-----492f1e4faf9b--------------------------------)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/@nyggus/membership?source=post_page-----492f1e4faf9b--------------------------------)'
