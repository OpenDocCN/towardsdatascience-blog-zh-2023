- en: Discretizing the Continues Features in Reinforcement Learning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在强化学习中离散化连续特征
- en: 原文：[https://towardsdatascience.com/discretizing-the-continues-features-in-reinforcement-learning-b69b388215ea](https://towardsdatascience.com/discretizing-the-continues-features-in-reinforcement-learning-b69b388215ea)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/discretizing-the-continues-features-in-reinforcement-learning-b69b388215ea](https://towardsdatascience.com/discretizing-the-continues-features-in-reinforcement-learning-b69b388215ea)
- en: How to convert infinite variables to a discrete space using tile coding and
    Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用平铺编码和 Python 将无限变量转换为离散空间
- en: '[](https://eligijus-bujokas.medium.com/?source=post_page-----b69b388215ea--------------------------------)[![Eligijus
    Bujokas](../Images/061fd30136caea2ba927140e8b3fae3c.png)](https://eligijus-bujokas.medium.com/?source=post_page-----b69b388215ea--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b69b388215ea--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b69b388215ea--------------------------------)
    [Eligijus Bujokas](https://eligijus-bujokas.medium.com/?source=post_page-----b69b388215ea--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://eligijus-bujokas.medium.com/?source=post_page-----b69b388215ea--------------------------------)[![Eligijus
    Bujokas](../Images/061fd30136caea2ba927140e8b3fae3c.png)](https://eligijus-bujokas.medium.com/?source=post_page-----b69b388215ea--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b69b388215ea--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b69b388215ea--------------------------------)
    [Eligijus Bujokas](https://eligijus-bujokas.medium.com/?source=post_page-----b69b388215ea--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b69b388215ea--------------------------------)
    ·6 min read·Mar 13, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b69b388215ea--------------------------------)
    ·阅读时间 6 分钟·2023 年 3 月 13 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/bdde8e9b4d25e844f699ec37d46e776f.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bdde8e9b4d25e844f699ec37d46e776f.png)'
- en: Photo by [Ehud Neuhaus](https://unsplash.com/@paramir?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Ehud Neuhaus](https://unsplash.com/@paramir?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 'This article is a continuation of the Reinforcement Learning series. To recap,
    visit these articles:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本文是强化学习系列的延续。要回顾，请访问以下文章：
- en: '[](/first-steps-in-the-world-of-reinforcement-learning-using-python-b843b76538e3?source=post_page-----b69b388215ea--------------------------------)
    [## First Steps in the World Of Reinforcement Learning using Python'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/first-steps-in-the-world-of-reinforcement-learning-using-python-b843b76538e3?source=post_page-----b69b388215ea--------------------------------)
    [## Python 中强化学习的第一步'
- en: Original Python implementation of how to find the best places to be in one of
    the fundamental worlds of reinforcement…
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 的原始实现，展示如何在强化学习的基本世界之一中找到最佳位置…
- en: towardsdatascience.com](/first-steps-in-the-world-of-reinforcement-learning-using-python-b843b76538e3?source=post_page-----b69b388215ea--------------------------------)
    [](/temporal-differences-with-python-first-sample-based-reinforcement-learning-algorithm-54c11745a0ee?source=post_page-----b69b388215ea--------------------------------)
    [## Temporal Differences with Python — First Sample-Based Reinforcement Learning
    Algorithm
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/first-steps-in-the-world-of-reinforcement-learning-using-python-b843b76538e3?source=post_page-----b69b388215ea--------------------------------)
    [](/temporal-differences-with-python-first-sample-based-reinforcement-learning-algorithm-54c11745a0ee?source=post_page-----b69b388215ea--------------------------------)
    [## 使用 Python 的时间差 — 第一个基于样本的强化学习算法
- en: Coding up and understanding the TD(0) algorithm using Python
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Python 编码并理解 TD(0) 算法
- en: towardsdatascience.com](/temporal-differences-with-python-first-sample-based-reinforcement-learning-algorithm-54c11745a0ee?source=post_page-----b69b388215ea--------------------------------)
    [](/the-values-of-actions-in-reinforcement-learning-using-q-learning-cb4b03be5c81?source=post_page-----b69b388215ea--------------------------------)
    [## The Values of Actions in Reinforcement Learning using Q-learning
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/temporal-differences-with-python-first-sample-based-reinforcement-learning-algorithm-54c11745a0ee?source=post_page-----b69b388215ea--------------------------------)
    [](/the-values-of-actions-in-reinforcement-learning-using-q-learning-cb4b03be5c81?source=post_page-----b69b388215ea--------------------------------)
    [## 使用 Q-learning 的强化学习中行动的价值
- en: The Q-learning algorithm implemented from scratch in Python
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从零开始在 Python 中实现 Q-learning 算法
- en: towardsdatascience.com](/the-values-of-actions-in-reinforcement-learning-using-q-learning-cb4b03be5c81?source=post_page-----b69b388215ea--------------------------------)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/the-values-of-actions-in-reinforcement-learning-using-q-learning-cb4b03be5c81?source=post_page-----b69b388215ea--------------------------------)
- en: 'The last article about Q-Learning explored the concept of assigning a number
    to a state action pair:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Q 学习的最后一篇文章探讨了将数字分配给状态动作对的概念：
- en: '![](../Images/0a6720d5ff36a0a18c56ea8abdc8fd1c.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0a6720d5ff36a0a18c56ea8abdc8fd1c.png)'
- en: Q value function
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Q 值函数
- en: The states used were states that can be listed and written into a table. For
    example, we indexed all the available positions in a maze that our agent can be
    in. Even in a huge maze (imagine a million times million grid) we can still assign
    a unique index to each state and straightforwardly use the states when filling
    out the Q-table.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的状态是可以列出并写入表格的状态。例如，我们对代理可能处于的迷宫中的所有可用位置进行了索引。即使在一个巨大的迷宫（想象一个百万乘百万的网格）中，我们仍然可以为每个状态分配一个唯一的索引，并在填写
    Q 表时直接使用这些状态。
- en: Often in practice, the states that our agent is in cannot be uniquely indexed
    and fit into a table. For example, imagine that the state is the angle of the
    wheel which can be turned exactly one time and it can take ANY value in the range
    **[-360, 360]** degrees. The wheel can be turned at exactly **12.155…, 152.1568…**
    and so on degrees. We cannot index all the unique degrees and create a table —
    the amount of possibilities is infinite.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 实践中，我们的代理所处的状态通常不能被唯一索引并适配到表格中。例如，假设状态是轮子的角度，该角度可以精确地旋转一次，并且可以取**[-360, 360]**度范围内的任何值。轮子可以精确地转到**12.155…、152.1568…**等度数。我们不能索引所有独特的度数并创建一个表——可能性是无限的。
- en: Nevertheless, we would still like to use all the algorithms that RL has to offer.
    Thus, the first step is to create a discrete feature space from the features that
    have infinite possibilities.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们仍然希望使用强化学习（RL）提供的所有算法。因此，第一步是从具有无限可能性的特征中创建一个离散特征空间。
- en: One of the popular techniques to discretize a continuous feature space is the
    so-called **tile coding** algorithm.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 离散化连续特征空间的流行技术之一是所谓的**瓷砖编码**算法。
- en: 'The definition of tile coding is as follows¹:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 瓷砖编码的定义如下¹：
- en: Tile coding is a method for representing a continuous state space by dividing
    the state space into a number of overlapping regions, called tiles, and then representing
    the state by the set of tiles that it falls into.
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 瓷砖编码是一种通过将状态空间划分为若干重叠区域（称为瓷砖），然后通过状态所落入的瓷砖集合来表示连续状态空间的方法。
- en: 'We can represent a simple 1 feature discretization with the following code
    and graph:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用以下代码和图表示一个简单的 1 特征离散化：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/bf16b9a4f2371e723d57d763e6b9171d.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bf16b9a4f2371e723d57d763e6b9171d.png)'
- en: Tiling coding in action for x=0.46; Graph by author
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: x=0.46 的瓷砖编码实际操作；图由作者提供
- en: To understand tile coding, we need to perfectly understand what is going on
    in the above graph.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解瓷砖编码，我们需要完美地理解上述图中的内容。
- en: The bottom-most horizontal line is the feature **x** which can obtain any value
    in the range [0, 1].
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最底部的水平线是特征**x**，它可以在[0, 1]范围内取得任何值。
- en: Each red line is a ***tiling*** which is used in discretizing the feature **x**.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每条红线是用于离散化特征**x**的***瓷砖***。
- en: Each tiling is divided into **tiles**, which are evenly spaced out.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 每个瓷砖被划分为**瓷砖**，这些瓷砖间隔均匀。
- en: The blue dashed line is a random value taken from the x range. The question
    is, how do we use the 4 tilings and 8 tiles to create a discrete state out of
    the x feature value?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝色虚线是从 x 范围中取出的随机值。问题是，我们如何使用 4 个瓷砖和 8 个瓷砖来从 x 特征值创建一个离散状态？
- en: 'The algorithm is as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 算法如下：
- en: 'Given a **value s** from a continues x feature:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 给定来自连续 x 特征的**值 s**：
- en: 'For each tiling:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个瓷砖：
- en: Initialize a vector of size equal to the number of tiles. Fill it with 0.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化一个大小等于瓷砖数量的向量。将其填充为 0。
- en: Calculate in what tile the **s value** falls. Save that index **i**.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算**s值**落在哪个瓷砖中。保存该索引**i**。
- en: Fill in the vector coordinate **i** with value 1.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用值1填充向量坐标**i**。
- en: Finally, stack all the vectors into one vector.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将所有向量堆叠成一个向量。
- en: 'Let us work out the example presented in the graph. For the first tiling, directly
    above the feature space x, the blue value falls into the 5th tiling space. Thus,
    the feature vector of the first tiling is:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们计算图中展示的示例。对于第一个瓷砖，在特征空间 x 的正上方，蓝色值落在第 5 个瓷砖空间中。因此，第一个瓷砖的特征向量是：
- en: '**[0, 0, 0, 0, 1, 0, 0, 0]**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**[0, 0, 0, 0, 1, 0, 0, 0]**'
- en: 'For the second tiling, we repeat the same process and end up with the vector:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第二个瓷砖，我们重复相同的过程，并得到如下向量：
- en: '**[0, 0, 0, 0, 1, 0, 0, 0]**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**[0, 0, 0, 0, 1, 0, 0, 0]**'
- en: 'The third and fourth tilings vectors:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 第三和第四个瓷砖向量：
- en: '**[0, 0, 0, 1, 0, 0, 0, 0]**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**[0, 0, 0, 1, 0, 0, 0, 0]**'
- en: '**[0, 0, 0, 1, 0, 0, 0, 0]**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**[0, 0, 0, 1, 0, 0, 0, 0]**'
- en: The final discrete vector, representing the blue dashed “state” is
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 表示蓝色虚线“状态”的最终离散向量是
- en: '[**0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0**]'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[**0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0**]'
- en: Let's do one more example with an x value of 0.44 to understand the process
    fully.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再做一个例子，x 值为 0.44，以完全理解这个过程。
- en: '![](../Images/acb2b1c7de719853a1ad91f8db1b8ee1.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/acb2b1c7de719853a1ad91f8db1b8ee1.png)'
- en: x=0.44; Graph by author
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: x=0.44；作者图表
- en: 'Each tiling vector (starting from the bottom):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 每个平铺向量（从底部开始）：
- en: '**[0, 0, 0, 0, 1, 0, 0, 0]**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**[0, 0, 0, 0, 1, 0, 0, 0]**'
- en: '**[0, 0, 0, 1, 0, 0, 0, 0]**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**[0, 0, 0, 1, 0, 0, 0, 0]**'
- en: '**[0, 0, 0, 1, 0, 0, 0, 0]**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**[0, 0, 0, 1, 0, 0, 0, 0]**'
- en: '**[0, 0, 1, 0, 0, 0, 0, 0]**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**[0, 0, 1, 0, 0, 0, 0, 0]**'
- en: 'Final state vector:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最终状态向量：
- en: '[**0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0**]'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[**0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0**]'
- en: The final state representing the vector will be of length **N tilings * N tiles.**
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最终状态向量的长度为 **N 平铺 * N 瓦片**。
- en: The process of assigning a vector to a state that is presented by 2 features
    follows a very similar algorithm. The tilings now are not horizontal lines but
    rectangles.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 将向量分配给由 2 个特征表示的状态的过程遵循一个非常类似的算法。现在的平铺不再是水平线，而是矩形。
- en: Let us imagine that our state is comprised of continuous x and y variables,
    each ranging from 0 to 1.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设我们的状态由连续的 x 和 y 变量组成，每个变量的范围从 0 到 1。
- en: 'We will divide the whole feature space with 2 tilings, each comprised of 4
    tiles:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用 2 个平铺将整个特征空间划分，每个平铺包含 4 个瓦片：
- en: '![](../Images/6fa1a58693ac1f05241117af30017e0c.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6fa1a58693ac1f05241117af30017e0c.png)'
- en: 2D continues space; Graph by author
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 二维连续空间；作者图表
- en: The grey zone in the above graph represents the original feature space. Each
    red tiling is divided into 4 tiles. We want to create a vector representing the
    state for the blue point (0.44, 0.44).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上图中的灰色区域表示原始特征空间。每个红色平铺被划分为 4 个瓦片。我们想为蓝点（0.44，0.44）创建一个表示状态的向量。
- en: 'The algorithm is the same as in the 1D case, but now we assign the index for
    the point falling into a tile going from left to right, going from the top left:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 算法与 1D 情况相同，但现在我们为点分配索引，按从左到右的顺序，从左上角开始：
- en: '![](../Images/996fe8c04ca108a1624e6f1bfbe675b4.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/996fe8c04ca108a1624e6f1bfbe675b4.png)'
- en: Indexing the tiling; Graph by author
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 索引平铺；作者图表
- en: 'Thus, for the first and second tiling, the blue point will fall into the 3rd
    tile and the resulting state vectors would be:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于第一个和第二个平铺，蓝点将落入第3个平铺，结果状态向量如下：
- en: '**[0, 0, 1, 0]**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**[0, 0, 1, 0]**'
- en: '**[0, 0, 1, 0]**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**[0, 0, 1, 0]**'
- en: 'And the final vector would be:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最终向量将是：
- en: '**[0, 0, 1, 0, 0, 0, 1, 0]**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**[0, 0, 1, 0, 0, 0, 1, 0]**'
- en: 'Taking another point:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 取另一个点：
- en: '![](../Images/42423ea91b3e52464c09f4c2357b6819.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/42423ea91b3e52464c09f4c2357b6819.png)'
- en: Another 2D point; Graph by author
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个二维点；作者图表
- en: 'The vectors would be:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 向量将是：
- en: '**[1, 0, 0, 0]**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**[1, 0, 0, 0]**'
- en: '**[0, 0, 1, 0]**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**[0, 0, 1, 0]**'
- en: 'With the final vector being:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最终向量为：
- en: '**[0, 0, 1, 0, 0, 0, 1, 0]**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**[0, 0, 1, 0, 0, 0, 1, 0]**'
- en: The intuition to create vectors representing states in 3D and above dimensions
    is the same as in the above examples.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 创建表示 3D 及以上维度状态的向量的直觉与上述示例相同。
- en: 'A powerful implementation in Python can be found here:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中可以找到一个强大的实现：
- en: '[](http://incompleteideas.net/tiles/tiles3.html?source=post_page-----b69b388215ea--------------------------------)
    [## RLAI open web page'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[## RLAI 打开网页](http://incompleteideas.net/tiles/tiles3.html?source=post_page-----b69b388215ea--------------------------------)'
- en: RLAI open web page by Here we describe software implementing the core part of
    the idea of tile coding as described in…
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RLAI 打开网页在这里我们描述了实现平铺编码核心部分的软件，如...
- en: incompleteideas.net](http://incompleteideas.net/tiles/tiles3.html?source=post_page-----b69b388215ea--------------------------------)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[incompleteideas.net](http://incompleteideas.net/tiles/tiles3.html?source=post_page-----b69b388215ea--------------------------------)'
- en: In this article, I showcased how to go from continuous feature space to finite
    vectors to represent states using tile coding. In the next article of this RL
    series, I will use this encoding to assign action values to each of such states.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我展示了如何从连续特征空间到有限向量以表示状态，使用平铺编码。在本 RL 系列的下一篇文章中，我将使用这种编码为每个状态分配动作值。
- en: Happy learning and stay tuned!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 快乐学习，敬请关注！
- en: '[1]'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[1]'
- en: '**Author:** *Richard Sutton*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者：** *理查德·萨顿*'
- en: '**URL:** [http://www.incompleteideas.net/book/8/node6.html#:~:text=Tile%20coding%20is%20a%20form,exhaustive%20partitions%20of%20input%20space](http://www.incompleteideas.net/book/8/node6.html#:~:text=Tile%20coding%20is%20a%20form,exhaustive%20partitions%20of%20input%20space).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址:** [http://www.incompleteideas.net/book/8/node6.html#:~:text=Tile%20coding%20is%20a%20form,exhaustive%20partitions%20of%20input%20space](http://www.incompleteideas.net/book/8/node6.html#:~:text=Tile%20coding%20is%20a%20form,exhaustive%20partitions%20of%20input%20space)。'
