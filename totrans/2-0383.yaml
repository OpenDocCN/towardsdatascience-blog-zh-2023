- en: 'Beyond Numpy and Pandas: Unlocking the Potential of Lesser-Known Python Libraries'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超越 Numpy 和 Pandas：释放鲜为人知的 Python 库的潜力
- en: 原文：[https://towardsdatascience.com/beyond-numpy-and-pandas-unlocking-the-potential-of-lesser-known-python-libraries-86d2bdc4d230](https://towardsdatascience.com/beyond-numpy-and-pandas-unlocking-the-potential-of-lesser-known-python-libraries-86d2bdc4d230)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/beyond-numpy-and-pandas-unlocking-the-potential-of-lesser-known-python-libraries-86d2bdc4d230](https://towardsdatascience.com/beyond-numpy-and-pandas-unlocking-the-potential-of-lesser-known-python-libraries-86d2bdc4d230)
- en: 3 Python libraries for scientific computation you should know as a data professional
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3 个数据专业人员应该了解的 Python 科学计算库
- en: '[](https://federicotrotta.medium.com/?source=post_page-----86d2bdc4d230--------------------------------)[![Federico
    Trotta](../Images/e997e3a96940c16ab5071629016d82fd.png)](https://federicotrotta.medium.com/?source=post_page-----86d2bdc4d230--------------------------------)[](https://towardsdatascience.com/?source=post_page-----86d2bdc4d230--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----86d2bdc4d230--------------------------------)
    [Federico Trotta](https://federicotrotta.medium.com/?source=post_page-----86d2bdc4d230--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://federicotrotta.medium.com/?source=post_page-----86d2bdc4d230--------------------------------)[![Federico
    Trotta](../Images/e997e3a96940c16ab5071629016d82fd.png)](https://federicotrotta.medium.com/?source=post_page-----86d2bdc4d230--------------------------------)[](https://towardsdatascience.com/?source=post_page-----86d2bdc4d230--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----86d2bdc4d230--------------------------------)
    [Federico Trotta](https://federicotrotta.medium.com/?source=post_page-----86d2bdc4d230--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----86d2bdc4d230--------------------------------)
    ·12 min read·Jul 6, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----86d2bdc4d230--------------------------------)
    ·阅读时间 12 分钟·2023 年 7 月 6 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/8d87b395925ef2d403f2cee6542c46b9.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8d87b395925ef2d403f2cee6542c46b9.png)'
- en: Image by [OrMaVaredo](https://pixabay.com/it/users/ormavaredo-14515736/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=5826755)
    on [Pixabay](https://pixabay.com/it//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=5826755)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [OrMaVaredo](https://pixabay.com/it/users/ormavaredo-14515736/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=5826755)
    提供，来源于 [Pixabay](https://pixabay.com/it//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=5826755)
- en: Python is one of the most used programming languages in the world and provides
    developers with a wide range of libraries.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是世界上使用最广泛的编程语言之一，为开发者提供了广泛的库。
- en: Anyway, when it comes to data manipulation and scientific computation, we generally
    think of libraries such as `Numpy`, `Pandas`, or `SciPy`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，当涉及数据处理和科学计算时，我们通常会想到 `Numpy`、`Pandas` 或 `SciPy` 等库。
- en: In this article, we introduce 3 Python libraries you may be interested in.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们介绍了 3 个你可能感兴趣的 Python 库。
- en: 1\. Dask
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. Dask
- en: Introducing Dask
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍 Dask
- en: Dask is a flexible parallel computing library that enables distributed computing
    and parallelism for large-scale data processing.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Dask 是一个灵活的并行计算库，使大规模数据处理的分布式计算和并行处理成为可能。
- en: 'So, why should we use Dask? As they say on [their website](https://www.dask.org/):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们为什么要使用 Dask 呢？正如他们在 [他们的网站](https://www.dask.org/) 上所说：
- en: Python has grown to become the dominant language both in data analytics and
    general programming. This growth has been fueled by computational libraries like
    NumPy, pandas, and scikit-learn. However, these packages weren’t designed to scale
    beyond a single machine. Dask was developed to natively scale these packages and
    the surrounding ecosystem to multi-core machines and distributed clusters when
    datasets exceed memory.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Python 已经成长为数据分析和通用编程领域的主导语言。这一增长得益于像 NumPy、pandas 和 scikit-learn 这样的计算库。然而，这些包并未设计用于超越单机的规模。Dask
    的开发旨在将这些包及其生态系统本地扩展到多核机器和分布式集群，当数据集超出内存时。
- en: 'So, one of the common uses of Dask, [as they say](https://docs.dask.org/en/latest/dataframe.html),
    is:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Dask 的一个常见用途是 [如他们所说](https://docs.dask.org/en/latest/dataframe.html)：
- en: 'Dask DataFrame is used in situations where pandas is commonly needed, usually
    when pandas fails due to data size or computation speed:'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Dask DataFrame 在 pandas 常用的情况下使用，通常是当 pandas 因数据大小或计算速度而失败时：
- en: ''
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- Manipulating large datasets, even when those datasets don’t fit in memory'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- 操作大数据集，即使这些数据集无法完全加载到内存中'
- en: ''
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- Accelerating long computations by using many cores'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- 通过使用多个核心加速长时间计算'
- en: ''
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- Distributed computing on large datasets with standard pandas operations like
    groupby, join, and time series computations'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- 在大型数据集上进行分布式计算，使用标准 pandas 操作，如 groupby、join 和时间序列计算'
- en: 'So, Dask is a good choice when we need to deal with huge Pandas data frames.
    This is because Dask:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，当我们需要处理巨大的 Pandas 数据框时，Dask 是一个不错的选择。这是因为 Dask：
- en: Allows users to manipulate 100GB+ datasets on a laptop or 1TB+ datasets on a
    workstation
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 允许用户在笔记本电脑上处理 100GB+ 的数据集，或在工作站上处理 1TB+ 的数据集
- en: Which is a pretty impressive result.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一项相当令人印象深刻的结果。
- en: 'What happens under the hood, is that:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后发生的情况是：
- en: Dask DataFrames coordinate many pandas DataFrames/Series arranged along the
    index. A Dask DataFrame is partitioned *row-wise*, grouping rows by index value
    for efficiency. These pandas objects may live on disk or on other machines.
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Dask 数据框协调许多按索引排列的 pandas 数据框/系列。Dask 数据框是按*行*分区的，通过按索引值分组行以提高效率。这些 pandas 对象可能存储在磁盘上或其他机器上。
- en: 'So, we have something like that:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们可以得到类似这样的结果：
- en: '![](../Images/71811bfd3b02b98adc658fe6251dc6ed.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/71811bfd3b02b98adc658fe6251dc6ed.png)'
- en: The difference between a Dask and a Pandas data frame. Image by Author, freely
    inspired by one on the Dask website already quoted.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Dask 和 Pandas 数据框之间的区别。图像由作者提供，灵感来自于已引用的 Dask 网站上的图像。
- en: Some features of Dask in action
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dask 的一些功能展示
- en: 'First of all, we need to install Dask. We can do it via `pip` or `conda` like
    so:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装 Dask。我们可以通过`pip`或`conda`来完成，方法如下：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**FEATURE ONE: OPENING A CSV FILE**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**功能一：打开 CSV 文件**'
- en: 'The first feature we can show of Dask is how we can open a CSV. We can do it
    like so:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以展示的第一个 Dask 特性是如何打开 CSV 文件。我们可以这样做：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'So, as we can see in the code, the way we use Dask is very similar to Pandas.
    In particular:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，正如我们在代码中看到的，使用 Dask 的方式与 Pandas 非常相似。特别是：
- en: We use the method `read_csv()` exactly as in Pandas
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`read_csv()`方法，就像在 Pandas 中一样。
- en: 'We intercept a column exactly as in Pandas. In fact, if we had a Pandas data
    frame called `df` we’d intercept a column this way: `df[''column_name'']`.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们以完全相同的方式截取列，就像在 Pandas 中一样。实际上，如果我们有一个名为`df`的 Pandas 数据框，我们会这样截取列：`df['column_name']`。
- en: We apply the `mean()` method to the intercepted column similar to Pandas, but
    here we also need to add the method `compute()`.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们对截取的列应用`mean()`方法，类似于 Pandas，但这里我们还需要添加`compute()`方法。
- en: Also, even if the methodology of opening a CSV file it’s the same as in Pandas,
    under the hood Dask is effortlessly processing a large dataset that exceeds the
    memory capacity of a single machine.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，即使打开 CSV 文件的方法与 Pandas 相同，在幕后 Dask 也在轻松处理超出单台机器内存容量的大型数据集。
- en: This means that we can’t see any actual difference, except the fact that a large
    data frame can’t be opened in Pandas, but in Dask we can.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们看不到任何实际差异，除了一个事实，那就是大型数据框在 Pandas 中无法打开，但在 Dask 中可以。
- en: '**FEATURE TWO: SCALING MACHINE LEARNING WORKFLOWS**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**功能二：扩展机器学习工作流**'
- en: We can use Dask to also create a classification dataset with a huge number of
    samples. We can then split it into the train and the test sets, fit the train
    set with an ML model, and calculate predictions for the test set.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 Dask 创建一个包含大量样本的分类数据集。然后，我们可以将其拆分为训练集和测试集，用 ML 模型拟合训练集，并为测试集计算预测结果。
- en: 'We can do it like so:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以这样做：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This example stresses the ability of Dask to handle huge datasets even in the
    case of a Machine Learning problem, by distributing computations across multiple
    cores.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子强调了 Dask 处理庞大数据集的能力，即使在机器学习问题的情况下，通过将计算分布到多个核心上。
- en: In particular, we can create a “Dask dataset” for a classification case with
    the method `dask_datasets.make_classification()`, and we can specify the number
    of samples and chunks (even, very huge!).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们可以使用方法`dask_datasets.make_classification()`创建一个用于分类的“Dask 数据集”，并且我们可以指定样本数量和块（甚至非常庞大！）。
- en: Similarly as before, the predictions are obtained with the method `compute()`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 和之前一样，预测结果是通过`compute()`方法获得的。
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**FEATURE THREE: EFFICIENT IMAGE PROCESSING**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**功能三：高效的图像处理**'
- en: The power of parallel processing that Dask utilizes can also be applied to images.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Dask 利用的并行处理能力也可以应用于图像。
- en: 'In particular, we could open multiple images, resize them, and save them resized.
    We can do it like so:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们可以打开多个图像，调整其大小，并保存调整后的图像。我们可以这样做：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'So, here’s the process:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这里是处理流程：
- en: We open all the “.jpg” images in the current folder (or in a folder that you
    can specify) with the method `dask_image.imread.imread("image*.jpg")`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们用方法`dask_image.imread.imread("image*.jpg")`打开当前文件夹中的所有“.jpg”图像（或者是一个你可以指定的文件夹中的图像）。
- en: We resize them all at 300x300 using a list comprehension in the method `da.stack()`.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们用`da.stack()`方法中的列表推导式将它们调整到300x300。
- en: We compute the result with the method `compute()`, as we did before.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用方法`compute()`来计算结果，就像以前一样。
- en: We save all the resized images with the for cycle.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们用for循环保存所有调整大小的图像。
- en: 2\. SymPy
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. SymPy
- en: Introducing Sympy
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍Sympy
- en: If you need to make mathematical calculations and computations and want to stick
    to Python, you can try Sympy.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要进行数学计算和运算，并且希望坚持使用Python，你可以尝试Sympy。
- en: 'Indeed: why use other tools and software, when we can use our beloved Python?'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 确实：为何使用其他工具和软件，当我们可以使用我们喜爱的Python呢？
- en: 'As per what they write [on their website](https://www.sympy.org/en/index.html),
    Sympy is:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 根据他们在[网站](https://www.sympy.org/en/index.html)上的描述，Sympy是：
- en: a Python library for symbolic mathematics. It aims to become a full-featured
    computer algebra system (CAS) while keeping the code as simple as possible in
    order to be comprehensible and easily extensible. SymPy is written entirely in
    Python.
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个用于符号数学的Python库。它旨在成为一个功能齐全的计算机代数系统（CAS），同时保持代码尽可能简单，以便易于理解和扩展。SymPy完全用Python编写。
- en: 'But why use SymPy? They suggest:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 但为什么使用SymPy？他们建议：
- en: SymPy is…
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SymPy是...
- en: ''
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**- Free:** Licensed under BSD, SymPy is free both as in speech and as in beer.'
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**- 免费：** 根据BSD许可证，SymPy既是免费的（在言论上），也是免费的（在酒精上）。'
- en: ''
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**- Python-based:** SymPy is written entirely in Python and uses Python for
    its language.'
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**- 基于Python：** SymPy完全用Python编写，并且使用Python作为其语言。'
- en: ''
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**- Lightweight:** SymPy only depends on mpmath, a pure Python library for
    arbitrary floating point arithmetic, making it easy to use.'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**- 轻量级：** SymPy仅依赖于mpmath，一个用于任意浮点运算的纯Python库，使其易于使用。'
- en: ''
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**- A library:** Beyond use as an interactive tool, SymPy can be embedded in
    other applications and extended with custom functions.'
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**- 一个库：** 除了作为交互工具使用外，SymPy可以嵌入到其他应用程序中，并通过自定义函数进行扩展。'
- en: So, it basically has all the characteristics that can be loved by Python addicts!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，它基本上具备了Python爱好者喜欢的所有特点！
- en: Now, let’s see some of its features.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看它的一些功能。
- en: Some features of SymPy in action
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SymPy的某些功能展示
- en: 'First of all, we need to install it:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装它：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**FEATURE ONE: SOLVING AN ALGEBRAIC EQUATION**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**特性一：解决代数方程**'
- en: 'If we need to solve an algebraic equation, we can use SymPy like so:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要解决代数方程，可以像这样使用SymPy：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'So, that’s the process:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这就是过程：
- en: We define the symbols of the equation with the method `symbols()`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`symbols()`方法定义方程的符号。
- en: We write the algebraic equation with the method `Eq`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们用`Eq`方法编写代数方程。
- en: We solve the equation with the method `solve()`.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们用`solve()`方法解决方程。
- en: When I was at the University I used different tools to solve these kinds of
    problems, and I have to say that SymPy, as we can see, is very readable and user-friendly.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在大学时，我使用过不同的工具来解决这些问题，我不得不说，正如我们所见，SymPy非常易读且用户友好。
- en: 'But, indeed: it’s a Python library, so how could that be any different?'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 但确实：它是一个Python库，那会有什么不同呢？
- en: '**FEATURE TWO: CALCULATING DERIVATIVES**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**特性二：计算导数**'
- en: 'Calculating derivatives is another task we may mathematically need, for a lot
    of reasons when analyzing data. Often, we may need calculations for any reason,
    and SympY really simplifies this process. In fact, we can do it like so:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 计算导数是我们在数据分析中可能需要的另一项任务。通常，我们可能需要进行计算，SymPy确实简化了这个过程。实际上，我们可以这样做：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'So, as we can see, the process is very simple and self-explainable:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，正如我们所见，过程非常简单且自解释：
- en: We define the symbol of the function we’re deriving with `symbols()`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`symbols()`定义我们要导出的函数的符号。
- en: We define the function.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义函数。
- en: We calculate the derivative with `diff()` specifying the function and the symbol
    we’re calculating the derivative (this is an absolute derivative, but we could
    perform even partial derivatives in the case of functions that have `x` and `y`
    variables).
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们用`diff()`计算导数，指定函数和我们计算导数的符号（这是绝对导数，但对于具有`x`和`y`变量的函数，我们也可以进行偏导数计算）。
- en: And if we test it, we’ll see that the result arrives in a matter of 2 or 3 seconds.
    So, it’s also pretty fast.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们测试它，我们会看到结果在2到3秒内到达。所以，它也相当快。
- en: '**FEATURE THREE: CALCULATING INTEGRATIONS**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**特性三：计算积分**'
- en: 'Of course, if SymPy can calculate derivatives, it can also calculate integrations.
    Let’s do it:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果SymPy可以计算导数，它也可以计算积分。让我们来做一下：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: So, here we use the method `integrate()`, specifying the function to integrate
    and the variable of integration.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在这里我们使用方法 `integrate()`，指定要积分的函数和积分变量。
- en: Couldn’t it be easier?!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 难道不更简单吗？！
- en: 3\. Xarray
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. Xarray
- en: Introducing Xarray
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍 Xarray
- en: Xarray is a Python library that extends the features and functionalities of
    NumPy, giving us the possibility to work with labeled arrays and datasets.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Xarray 是一个 Python 库，它扩展了 NumPy 的功能和特性，使我们能够使用标签数组和数据集。
- en: 'As they say [on their website](https://docs.xarray.dev/en/stable/), in fact:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 正如[他们的网站](https://docs.xarray.dev/en/stable/)上所说的：
- en: Xarray makes working with labeled multi-dimensional arrays in Python simple,
    efficient, and fun!
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Xarray 使得在 Python 中处理带标签的多维数组变得简单、高效且有趣！
- en: 'And [also](https://docs.xarray.dev/en/stable/getting-started-guide/why-xarray.html):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以及[也](https://docs.xarray.dev/en/stable/getting-started-guide/why-xarray.html)：
- en: Xarray introduces labels in the form of dimensions, coordinates and attributes
    on top of raw NumPy-like multidimensional arrays, which allows for a more intuitive,
    more concise, and less error-prone developer experience.
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Xarray 在原始的类似 NumPy 的多维数组之上引入了标签，如维度、坐标和属性，从而允许更直观、更简洁且错误更少的开发体验。
- en: In other words, it extends the functionality of NumPy arrays by adding labels
    or coordinates to the array dimensions. These labels provide metadata and enable
    more advanced analysis and manipulation of multi-dimensional data.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，它通过为数组维度添加标签或坐标来扩展 NumPy 数组的功能。这些标签提供了元数据，并使得对多维数据进行更高级的分析和操作成为可能。
- en: For example, in NumPy, arrays are accessed using integer-based indexing.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 NumPy 中，数组是通过基于整数的索引进行访问的。
- en: In Xarray, instead, each dimension can have a label associated with it, making
    it easier to understand and manipulate the data based on meaningful names.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xarray 中，每个维度可以有一个关联的标签，使得基于有意义的名称理解和操作数据变得更容易。
- en: For example, instead of accessing data with `arr[0, 1, 2]`, we can use `arr.sel(x=0,
    y=1, z=2)` in Xarray, where `x`, `y`, and `z` are dimension labels.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 Xarray 中，我们可以使用 `arr.sel(x=0, y=1, z=2)` 来代替 `arr[0, 1, 2]`，其中 `x`、`y`
    和 `z` 是维度标签。
- en: This makes the code much more readable!
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得代码更加可读！
- en: So, let’s see some features of Xarray.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们看看 Xarray 的一些功能。
- en: Some features of Xarray in action
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xarray 的一些功能示例
- en: 'As usual, to install it:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，要安装它：
- en: '[PRE10]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**FEATURE ONE: WORKING WITH LABELED COORDINATES**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**功能一：处理带标签的坐标**'
- en: 'Suppose we want to create some data related to temperature and we want to label
    these with coordinates like latitude and longitude. We can do it like so:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想创建一些与温度相关的数据，并希望用坐标如纬度和经度来标记这些数据。我们可以这样做：
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And if we print them we get:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打印它们，我们得到：
- en: '[PRE12]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'So, let’s see the process step-by-step:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们一步步来看这个过程：
- en: We’ve created the temperature values as a NumPy array.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经创建了一个温度值的 NumPy 数组。
- en: We’ve defined the latitudes and longitueas values as NumPy arrays.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经将纬度和经度值定义为 NumPy 数组。
- en: We’ve stored all the data in an Xarray array with the method `DataArray()`.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经使用方法 `DataArray()` 将所有数据存储在一个 Xarray 数组中。
- en: We’ve selected a subset of the latitudes and longitudes with the method `sel()`
    that selects the values we want for our subset.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用方法 `sel()` 选择了纬度和经度的一个子集，这个方法选择了我们想要的子集值。
- en: The result is also easily readable, so labeling is really helpful in a lot of
    cases.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 结果也很容易读取，因此标签在很多情况下确实很有帮助。
- en: '**FEATURE TWO: HANDLING MISSING DATA**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**功能二：处理缺失数据**'
- en: 'Suppose we’re collecting data related to temperatures during the year. We want
    to know if we have some null values in our array. Here''s how we can do so:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在收集一年中的温度数据。我们想知道数组中是否有一些空值。方法如下：
- en: '[PRE13]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: And so we obtain that we have 10 null values.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 于是我们得到有 10 个空值。
- en: Also, if we take a look closely at the code, we can see that we can apply Pandas’
    methods to an Xarray like `isnull.sum()`, as in this case, that counts the total
    number of missing values.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果我们仔细看看代码，我们可以看到可以将 Pandas 的方法应用于 Xarray，如 `isnull.sum()`，在这个例子中，这个方法计算了缺失值的总数。
- en: '**FEATURE ONE: HANDLING AND ANALYZING MULTI-DIMENSIONAL DATA**'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**功能一：处理和分析多维数据**'
- en: The temptation to handle and analyze multi-dimensional data is high when we
    have the possibility to label our arrays. So, why not try it?
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有可能给数组加标签时，处理和分析多维数据的诱惑很大。那么，为什么不试试呢？
- en: For example, suppose we’re still collecting data related to temperatures at
    certain latitudes and longitudes.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们仍在收集与特定纬度和经度相关的温度数据。
- en: 'We may want to calculate the mean, the max, and the median temperatures. We
    can do it like so:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能希望计算均值、最大值和中位数温度。我们可以这样做：
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: And we obtained what we wanted, also in a clearly readable way.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们达到了我们想要的结果，并且方式也很清晰易读。
- en: And again, as before, to calculate the max, min, and mean values of temperatures
    we’ve used Pandas’ functions applied to an array.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 再次如前所述，我们通过 Pandas 的函数应用于一个数组来计算最大值、最小值和均值。
- en: Conclusions
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we’ve shown three libraries for scientific calculation and
    computation.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们展示了三种用于科学计算的库。
- en: While SymPy can be the substitute for other tools and software, giving us the
    possibility to use Python code to compute mathematical calculations, Dask and
    Xarray extend the functionalities of other libraries, helping us in situations
    where we may have difficulties with other most known Python libraries for data
    analysis and manipulation.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 SymPy 可以替代其他工具和软件，让我们有可能使用 Python 代码进行数学计算，但 Dask 和 Xarray 扩展了其他库的功能，帮助我们在遇到其他最知名的
    Python 数据分析和处理库的困难时应对。
- en: '![](../Images/5079e3af9eda458328cb258c452fb935.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5079e3af9eda458328cb258c452fb935.png)'
- en: Federico Trotta
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 费德里科·特罗塔
- en: Hi, I’m Federico Trotta and I’m a freelance Technical Writer.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，我是费德里科·特罗塔，我是一名自由职业的技术作家。
- en: Want to collaborate with me? [Contact me](https://bio.link/federicotrotta).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 想与我合作？[联系我](https://bio.link/federicotrotta)。
