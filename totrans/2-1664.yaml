- en: Plotting Network Graphs using Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/plotting-network-graphs-using-python-bc62f0d93b3f](https://towardsdatascience.com/plotting-network-graphs-using-python-bc62f0d93b3f)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn how to use the NetworkX package to visualize complex networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/?source=post_page-----bc62f0d93b3f--------------------------------)[![Wei-Meng
    Lee](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----bc62f0d93b3f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bc62f0d93b3f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bc62f0d93b3f--------------------------------)
    [Wei-Meng Lee](https://weimenglee.medium.com/?source=post_page-----bc62f0d93b3f--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bc62f0d93b3f--------------------------------)
    ·8 min read·Mar 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4b615d98b00885dc02862a0e401d3331.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Alina Grubnyak](https://unsplash.com/@alinnnaaaa?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: A **network graph** is a form of visualization that enables you to visualize
    and analyze the relationships between entities. For example, the following figure
    shows the contribution of Wikipedia editors to the various Wikipedia language
    versions during one month in the summer of 2013.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dc83a60b182ae123e6d82facacec2ea3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [https://en.wikipedia.org/wiki/Graph_theory#/media/File:Wikipedia_multilingual_network_graph_July_2013.svg](https://en.wikipedia.org/wiki/Graph_theory#/media/File:Wikipedia_multilingual_network_graph_July_2013.svg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the network graph, you can gather a few observations:'
  prefs: []
  type: TYPE_NORMAL
- en: English (**en**) is the dominant language where all the other languages are
    translated into; at the same time, a lot of English materials are also translated
    into other languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chinese (**zh**) is translated into Japanese (**ja**), but not the other way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both Chinese and Japanese materials are translated into English, and vice versa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this article, I will show you the basics of plotting network graphs using
    the **NetworkX** package.
  prefs: []
  type: TYPE_NORMAL
- en: Installing NetworkX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install the NetworkX package, use the `pip` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Some Graph Terminologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you start plotting your network graph, it is useful to understand some
    basic network graph terminologies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows a *directed graph* (also known as a *digraph*; a
    graph in which the edges have a direction as indicated by the arrows):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/48b49908fd2c9dd6a2b211a83f2c279e.png)'
  prefs: []
  type: TYPE_IMG
- en: All images by author
  prefs: []
  type: TYPE_NORMAL
- en: The ***nodes*** are the fundamental units in a graph. Nodes are also commonly
    known as ***vertices***.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ***edges*** are the connections between two nodes in the graph.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An *undirected graph*, on the other hand, has no directions between nodes (and
    hence no arrows) and the edges are bidrectional.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s now get to work to create a network graph. We shall do this step-by-step.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a `networkx.classes.graph.Graph` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `nx.Graph()` class creates a undirected graph. If you want to create a directed
    graph, use `nx.DiGraph(directed=True)`, which returns an `networkx.classes.digraph.DiGraph`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: We will talk about directed graph later in this article.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Adding Nodes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the graph created (`G`), you now need to add some nodes to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The above code snippet added three nodes to the graph, with no edges defined
    (yet). Besides using the `add_node()` function to add individual nodes, you can
    also add multiple nodes in one go using the `add_nodes_from()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Your graph has five nodes at this moment.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Edges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the nodes defined, you can now add the edges to connect them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Like nodes, you can add individual edge using the `add_edge()` function, or
    add multiple edges using the `add_edges_from()` function (just supply a list of
    tuples representing each edge).
  prefs: []
  type: TYPE_NORMAL
- en: Drawing the Graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the nodes and edges added to the graph, you are now ready to visualize
    the graph using the `draw()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bdf06548d0ee93b061ab306c7363777a.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that you will get a different graph every time you call the `draw()` function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here is another variation of the same graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e61a884b17785ab53730a11f07f4384e.png)'
  prefs: []
  type: TYPE_IMG
- en: Displaying the labels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Apparently, a graph without labels is not very useful (if useable at all!).
    So let’s draw the graph with the nodes labelled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The above `draw()` function with the `with_labels` parameter is equivalent
    to calling the following functions:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`nx.draw_networkx_nodes()` — draws all the nodes in the graph'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nx.draw_networkx_labels()` — draws the labels on each node'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nx.draw_networkx_edges()` — draws the edges connecting the nodes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So what are the advantages of using the `draw()` function vs the other functions?
    Well, drawing using the individual functions allow you to customize the look and
    feel of individual nodes, labels, and edges.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You can now see the label for each node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/de02687a5212888561c6a3b8c0bb473a.png)'
  prefs: []
  type: TYPE_IMG
- en: Using layouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Remember that the `draw()` function uses a different layout for your graph
    every time you plot it? Well, you can specify the layout you want to use for your
    graph. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'All the nodes will now be arranged in a circular manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/941e4b87b5680c46e65200805c688901.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, you can also draw the graph using the circular layout through
    the `nx.draw_circular()` function (instead of the `nx.draw()` function):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can try the other layouts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nx.draw_kamada_kawai(G, with_labels = True)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nx.draw_planar(G, with_labels = True)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nx.draw_random(G, with_labels = True)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nx.draw_spectral(G, with_labels = True)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nx.draw_spring(G, with_labels = True)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nx.draw_shell(G, with_labels = True)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Labelling the edges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the nodes labelled, you might also want to label the edges. You can do
    so via the `nx.draw_networkx_edge_labels()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The above code snippets labels the two edges for the three nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a4d0b7797bb8adc614d03a3e9bf19cb4.png)'
  prefs: []
  type: TYPE_IMG
- en: Directed Graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far our graph is undirected. In some cases it might be useful to plot a
    directed graph. For instance, in our example the edges might represent the flights
    between two cities. Using a directed graph allows us to visually inspect which
    are the flights going from one city to another. The following code snippet shows
    our example now plotted as a directed graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You can now observe that there are flights from Singapore to San Francisco,
    and vice versa. On the other hand, there is flights from Riga to San Francisco,
    but not the other way round.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2aef039c9ba80b04d54e899d4088e0d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Customizing the Nodes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, the nodes are blue in color and the size is pretty small. You can
    customize the nodes as well as the edge color by passing a dictionary to the `draw()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The nodes are now in yellow (and bigger) and the edges are in blue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/75b33eba5bf2795e4dc774925b5c5045.png)'
  prefs: []
  type: TYPE_IMG
- en: Outlining the Nodes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to outline the nodes, you need to manually do it using `matplotlib`.
    The following code snippet sets the figure size to 10 inches by 10 inches (*width*
    x *height*) and then use the `set_edgecolor()` function to draw a black outline
    for each node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Each of the nodes now have a black outline:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/10d7bb9d8c98a009b4cfd8d48de30d95.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you did not set the figure size, your graph may look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4eadd1d8e05870baf6435f421e980f74.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting Node Colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To give each node a different color, you can specify a color palette, such
    as from `bokeh`, and set the color in the `node_color` key in the dictionary to
    be passed into the `draw()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The graph will now have different colors for each node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/689d80a8b84713a3af42043fedf1657d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to specify your own colors, you can set them manually in the dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Related Articles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](/building-interactive-network-graphs-using-pyvis-5b8e6e25cf64?source=post_page-----bc62f0d93b3f--------------------------------)
    [## Building Interactive Network Graphs using pyvis'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to make your network graphs come to life
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/building-interactive-network-graphs-using-pyvis-5b8e6e25cf64?source=post_page-----bc62f0d93b3f--------------------------------)
    [](/visualizing-geospatial-network-graphs-using-basemap-and-mplleaflet-76a7f3d0c923?source=post_page-----bc62f0d93b3f--------------------------------)
    [## Visualizing Geospatial Network Graphs using Basemap and mplleaflet
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to plot network graphs on maps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/visualizing-geospatial-network-graphs-using-basemap-and-mplleaflet-76a7f3d0c923?source=post_page-----bc62f0d93b3f--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '**If you like reading my articles and that it helped your career/study, please
    consider signing up as a Medium member. It is $5 a month, and it gives you unlimited
    access to all the articles (including mine) on Medium. If you sign up using the
    following link, I will earn a small commission (at no additional cost to you).
    Your support means that I will be able to devote more time on writing articles
    like this.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/membership?source=post_page-----bc62f0d93b3f--------------------------------)
    [## Join Medium with my referral link - Wei-Meng Lee'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Wei-Meng Lee (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----bc62f0d93b3f--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, I discussed the basics of network graph and how it is useful
    to let you visualize the relationships between different entities in your dataset.
    For this article, my focus is on how to use the NetworkX package to plot the graph.
    In my next article, I will make use of the Flights Delay dataset and visualize
    the connections between different airports. Stay tuned!
  prefs: []
  type: TYPE_NORMAL
