- en: Plotting Network Graphs using Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 绘制网络图
- en: 原文：[https://towardsdatascience.com/plotting-network-graphs-using-python-bc62f0d93b3f](https://towardsdatascience.com/plotting-network-graphs-using-python-bc62f0d93b3f)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/plotting-network-graphs-using-python-bc62f0d93b3f](https://towardsdatascience.com/plotting-network-graphs-using-python-bc62f0d93b3f)
- en: Learn how to use the NetworkX package to visualize complex networks
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解如何使用 NetworkX 包来可视化复杂网络
- en: '[](https://weimenglee.medium.com/?source=post_page-----bc62f0d93b3f--------------------------------)[![Wei-Meng
    Lee](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----bc62f0d93b3f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bc62f0d93b3f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bc62f0d93b3f--------------------------------)
    [Wei-Meng Lee](https://weimenglee.medium.com/?source=post_page-----bc62f0d93b3f--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://weimenglee.medium.com/?source=post_page-----bc62f0d93b3f--------------------------------)[![Wei-Meng
    Lee](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----bc62f0d93b3f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bc62f0d93b3f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bc62f0d93b3f--------------------------------)
    [魏孟李](https://weimenglee.medium.com/?source=post_page-----bc62f0d93b3f--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bc62f0d93b3f--------------------------------)
    ·8 min read·Mar 6, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bc62f0d93b3f--------------------------------)
    ·阅读时间8分钟·2023年3月6日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/4b615d98b00885dc02862a0e401d3331.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4b615d98b00885dc02862a0e401d3331.png)'
- en: Photo by [Alina Grubnyak](https://unsplash.com/@alinnnaaaa?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Alina Grubnyak](https://unsplash.com/@alinnnaaaa?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 提供
- en: A **network graph** is a form of visualization that enables you to visualize
    and analyze the relationships between entities. For example, the following figure
    shows the contribution of Wikipedia editors to the various Wikipedia language
    versions during one month in the summer of 2013.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络图**是一种可视化形式，使你能够可视化和分析实体之间的关系。例如，下图展示了2013年夏季一个月内维基百科编辑对各种维基百科语言版本的贡献。'
- en: '![](../Images/dc83a60b182ae123e6d82facacec2ea3.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dc83a60b182ae123e6d82facacec2ea3.png)'
- en: 'Source: [https://en.wikipedia.org/wiki/Graph_theory#/media/File:Wikipedia_multilingual_network_graph_July_2013.svg](https://en.wikipedia.org/wiki/Graph_theory#/media/File:Wikipedia_multilingual_network_graph_July_2013.svg)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '来源: [https://en.wikipedia.org/wiki/Graph_theory#/media/File:Wikipedia_multilingual_network_graph_July_2013.svg](https://en.wikipedia.org/wiki/Graph_theory#/media/File:Wikipedia_multilingual_network_graph_July_2013.svg)'
- en: 'From the network graph, you can gather a few observations:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从网络图中，你可以得出一些观察结论：
- en: English (**en**) is the dominant language where all the other languages are
    translated into; at the same time, a lot of English materials are also translated
    into other languages
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英语 (**en**) 是主要的语言，所有其他语言都翻译成英语；同时，许多英语材料也被翻译成其他语言
- en: Chinese (**zh**) is translated into Japanese (**ja**), but not the other way
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中文 (**zh**) 被翻译成日语 (**ja**)，但反向翻译则不然
- en: Both Chinese and Japanese materials are translated into English, and vice versa
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中文和日语材料都被翻译成英语，反之亦然
- en: In this article, I will show you the basics of plotting network graphs using
    the **NetworkX** package.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将向你展示如何使用**NetworkX**包绘制网络图的基础知识。
- en: Installing NetworkX
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 NetworkX
- en: 'To install the NetworkX package, use the `pip` command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 NetworkX 包，请使用`pip`命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Some Graph Terminologies
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些图的术语
- en: Before you start plotting your network graph, it is useful to understand some
    basic network graph terminologies.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始绘制你的网络图之前，了解一些基本的网络图术语是很有用的。
- en: 'The following figure shows a *directed graph* (also known as a *digraph*; a
    graph in which the edges have a direction as indicated by the arrows):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了一个*有向图*（也称为*有向图*；图中的边有方向，如箭头所示）：
- en: '![](../Images/48b49908fd2c9dd6a2b211a83f2c279e.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/48b49908fd2c9dd6a2b211a83f2c279e.png)'
- en: All images by author
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所有图片均由作者提供
- en: The ***nodes*** are the fundamental units in a graph. Nodes are also commonly
    known as ***vertices***.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***节点***是图中的基本单元。节点也通常被称为***顶点***。'
- en: The ***edges*** are the connections between two nodes in the graph.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***边***是图中两个节点之间的连接。'
- en: An *undirected graph*, on the other hand, has no directions between nodes (and
    hence no arrows) and the edges are bidrectional.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，*无向图*没有节点之间的方向（因此没有箭头），而且边是双向的。
- en: Creating a Graph
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建图形
- en: Let’s now get to work to create a network graph. We shall do this step-by-step.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在开始创建一个网络图。我们将逐步进行。
- en: 'First, create a `networkx.classes.graph.Graph` object:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个`networkx.classes.graph.Graph`对象：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `nx.Graph()` class creates a undirected graph. If you want to create a directed
    graph, use `nx.DiGraph(directed=True)`, which returns an `networkx.classes.digraph.DiGraph`
    object.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`nx.Graph()`类创建一个无向图。如果你想创建一个有向图，请使用`nx.DiGraph(directed=True)`，它返回一个`networkx.classes.digraph.DiGraph`对象。'
- en: We will talk about directed graph later in this article.
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们将在本文后面讨论有向图。
- en: Adding Nodes
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加节点
- en: 'With the graph created (`G`), you now need to add some nodes to it:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 创建图形（`G`）后，你现在需要向其中添加一些节点：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The above code snippet added three nodes to the graph, with no edges defined
    (yet). Besides using the `add_node()` function to add individual nodes, you can
    also add multiple nodes in one go using the `add_nodes_from()` function:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段向图形添加了三个节点，但尚未定义边。除了使用`add_node()`函数添加单个节点外，你还可以使用`add_nodes_from()`函数一次性添加多个节点：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Your graph has five nodes at this moment.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 目前你的图形有五个节点。
- en: Adding Edges
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加边
- en: 'With the nodes defined, you can now add the edges to connect them:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了节点后，你现在可以添加边以连接它们：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Like nodes, you can add individual edge using the `add_edge()` function, or
    add multiple edges using the `add_edges_from()` function (just supply a list of
    tuples representing each edge).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与节点一样，你可以使用`add_edge()`函数添加单独的边，或者使用`add_edges_from()`函数添加多个边（只需提供表示每条边的元组列表）。
- en: Drawing the Graph
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制图形
- en: 'With the nodes and edges added to the graph, you are now ready to visualize
    the graph using the `draw()` function:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在图形中添加了节点和边后，你现在可以使用`draw()`函数来可视化图形：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You should see something like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似这样的结果：
- en: '![](../Images/bdf06548d0ee93b061ab306c7363777a.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bdf06548d0ee93b061ab306c7363777a.png)'
- en: Note that you will get a different graph every time you call the `draw()` function.
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，每次调用`draw()`函数时，你都会得到不同的图形。
- en: 'Here is another variation of the same graph:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是同一图形的另一种变体：
- en: '![](../Images/e61a884b17785ab53730a11f07f4384e.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e61a884b17785ab53730a11f07f4384e.png)'
- en: Displaying the labels
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示标签
- en: 'Apparently, a graph without labels is not very useful (if useable at all!).
    So let’s draw the graph with the nodes labelled:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，没有标签的图形不是很有用（如果完全可用的话！）。所以让我们绘制一个带有节点标签的图：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The above `draw()` function with the `with_labels` parameter is equivalent
    to calling the following functions:'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 上述`draw()`函数与`with_labels`参数等同于调用以下函数：
- en: '`nx.draw_networkx_nodes()` — draws all the nodes in the graph'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nx.draw_networkx_nodes()` — 绘制图形中的所有节点'
- en: '`nx.draw_networkx_labels()` — draws the labels on each node'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nx.draw_networkx_labels()` — 在每个节点上绘制标签'
- en: '`nx.draw_networkx_edges()` — draws the edges connecting the nodes'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nx.draw_networkx_edges()` — 绘制连接节点的边'
- en: So what are the advantages of using the `draw()` function vs the other functions?
    Well, drawing using the individual functions allow you to customize the look and
    feel of individual nodes, labels, and edges.
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 那么使用`draw()`函数与其他函数相比有什么优势呢？实际上，使用各个函数绘图可以让你自定义单个节点、标签和边的外观。
- en: 'You can now see the label for each node:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以看到每个节点的标签：
- en: '![](../Images/de02687a5212888561c6a3b8c0bb473a.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/de02687a5212888561c6a3b8c0bb473a.png)'
- en: Using layouts
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用布局
- en: 'Remember that the `draw()` function uses a different layout for your graph
    every time you plot it? Well, you can specify the layout you want to use for your
    graph. Here is an example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 记住`draw()`函数每次绘制图形时都会使用不同的布局？好吧，你可以指定你想要用于图形的布局。这里是一个例子：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'All the nodes will now be arranged in a circular manner:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 所有节点现在将以圆形方式排列：
- en: '![](../Images/941e4b87b5680c46e65200805c688901.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/941e4b87b5680c46e65200805c688901.png)'
- en: 'Alternatively, you can also draw the graph using the circular layout through
    the `nx.draw_circular()` function (instead of the `nx.draw()` function):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你也可以通过`nx.draw_circular()`函数（而不是`nx.draw()`函数）使用圆形布局绘制图形：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can try the other layouts:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以尝试其他布局：
- en: '`nx.draw_kamada_kawai(G, with_labels = True)`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nx.draw_kamada_kawai(G, with_labels = True)`'
- en: '`nx.draw_planar(G, with_labels = True)`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nx.draw_planar(G, with_labels = True)`'
- en: '`nx.draw_random(G, with_labels = True)`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nx.draw_random(G, with_labels = True)`'
- en: '`nx.draw_spectral(G, with_labels = True)`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nx.draw_spectral(G, with_labels = True)`'
- en: '`nx.draw_spring(G, with_labels = True)`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nx.draw_spring(G, with_labels = True)`'
- en: '`nx.draw_shell(G, with_labels = True)`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nx.draw_shell(G, with_labels = True)`'
- en: Labelling the edges
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标记边
- en: With the nodes labelled, you might also want to label the edges. You can do
    so via the `nx.draw_networkx_edge_labels()` function.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在给节点标记的情况下，您可能还想标记边。您可以通过 `nx.draw_networkx_edge_labels()` 函数来实现。
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The above code snippets labels the two edges for the three nodes:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段标记了三个节点的两条边：
- en: '![](../Images/a4d0b7797bb8adc614d03a3e9bf19cb4.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a4d0b7797bb8adc614d03a3e9bf19cb4.png)'
- en: Directed Graph
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有向图
- en: 'So far our graph is undirected. In some cases it might be useful to plot a
    directed graph. For instance, in our example the edges might represent the flights
    between two cities. Using a directed graph allows us to visually inspect which
    are the flights going from one city to another. The following code snippet shows
    our example now plotted as a directed graph:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的图是无向的。在某些情况下，绘制有向图可能会很有用。例如，在我们的示例中，边可能表示两个城市之间的航班。使用有向图可以让我们直观地检查哪些航班从一个城市到另一个城市。以下代码片段显示了我们示例现在被绘制为有向图：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can now observe that there are flights from Singapore to San Francisco,
    and vice versa. On the other hand, there is flights from Riga to San Francisco,
    but not the other way round.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以观察到从新加坡到旧金山的航班，反之亦然。另一方面，从里加到旧金山有航班，但反向则没有。
- en: '![](../Images/2aef039c9ba80b04d54e899d4088e0d6.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2aef039c9ba80b04d54e899d4088e0d6.png)'
- en: Customizing the Nodes
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定制节点
- en: 'By default, the nodes are blue in color and the size is pretty small. You can
    customize the nodes as well as the edge color by passing a dictionary to the `draw()`
    function:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，节点是蓝色的，大小相当小。您可以通过将字典传递给 `draw()` 函数来定制节点以及边的颜色：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The nodes are now in yellow (and bigger) and the edges are in blue:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 节点现在是黄色的（并且更大），边是蓝色的：
- en: '![](../Images/75b33eba5bf2795e4dc774925b5c5045.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/75b33eba5bf2795e4dc774925b5c5045.png)'
- en: Outlining the Nodes
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 给节点添加轮廓
- en: 'If you want to outline the nodes, you need to manually do it using `matplotlib`.
    The following code snippet sets the figure size to 10 inches by 10 inches (*width*
    x *height*) and then use the `set_edgecolor()` function to draw a black outline
    for each node:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想为节点添加轮廓，需要使用 `matplotlib` 手动完成。以下代码片段将图形大小设置为 10 英寸 x 10 英寸（*宽度* x *高度*），然后使用
    `set_edgecolor()` 函数为每个节点绘制黑色轮廓：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Each of the nodes now have a black outline:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 每个节点现在都有一个黑色轮廓：
- en: '![](../Images/10d7bb9d8c98a009b4cfd8d48de30d95.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/10d7bb9d8c98a009b4cfd8d48de30d95.png)'
- en: 'If you did not set the figure size, your graph may look like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有设置图形大小，您的图表可能看起来像这样：
- en: '![](../Images/4eadd1d8e05870baf6435f421e980f74.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4eadd1d8e05870baf6435f421e980f74.png)'
- en: Setting Node Colors
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置节点颜色
- en: 'To give each node a different color, you can specify a color palette, such
    as from `bokeh`, and set the color in the `node_color` key in the dictionary to
    be passed into the `draw()` function:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要为每个节点指定不同的颜色，您可以指定一个颜色调色板，例如来自 `bokeh`，并将颜色设置在传递给 `draw()` 函数的字典中的 `node_color`
    键中：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The graph will now have different colors for each node:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在图表将为每个节点使用不同的颜色：
- en: '![](../Images/689d80a8b84713a3af42043fedf1657d.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/689d80a8b84713a3af42043fedf1657d.png)'
- en: 'If you want to specify your own colors, you can set them manually in the dictionary:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想指定自己的颜色，可以在字典中手动设置它们：
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Related Articles
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关文章
- en: '[](/building-interactive-network-graphs-using-pyvis-5b8e6e25cf64?source=post_page-----bc62f0d93b3f--------------------------------)
    [## Building Interactive Network Graphs using pyvis'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/building-interactive-network-graphs-using-pyvis-5b8e6e25cf64?source=post_page-----bc62f0d93b3f--------------------------------)
    [## 使用 pyvis 构建互动网络图'
- en: Learn how to make your network graphs come to life
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解如何让您的网络图栩栩如生
- en: towardsdatascience.com](/building-interactive-network-graphs-using-pyvis-5b8e6e25cf64?source=post_page-----bc62f0d93b3f--------------------------------)
    [](/visualizing-geospatial-network-graphs-using-basemap-and-mplleaflet-76a7f3d0c923?source=post_page-----bc62f0d93b3f--------------------------------)
    [## Visualizing Geospatial Network Graphs using Basemap and mplleaflet
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/building-interactive-network-graphs-using-pyvis-5b8e6e25cf64?source=post_page-----bc62f0d93b3f--------------------------------)
    [](/visualizing-geospatial-network-graphs-using-basemap-and-mplleaflet-76a7f3d0c923?source=post_page-----bc62f0d93b3f--------------------------------)
    [## 使用 Basemap 和 mplleaflet 可视化地理空间网络图
- en: Learn how to plot network graphs on maps
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解如何在地图上绘制网络图
- en: towardsdatascience.com](/visualizing-geospatial-network-graphs-using-basemap-and-mplleaflet-76a7f3d0c923?source=post_page-----bc62f0d93b3f--------------------------------)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/visualizing-geospatial-network-graphs-using-basemap-and-mplleaflet-76a7f3d0c923?source=post_page-----bc62f0d93b3f--------------------------------)
- en: '**If you like reading my articles and that it helped your career/study, please
    consider signing up as a Medium member. It is $5 a month, and it gives you unlimited
    access to all the articles (including mine) on Medium. If you sign up using the
    following link, I will earn a small commission (at no additional cost to you).
    Your support means that I will be able to devote more time on writing articles
    like this.**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你喜欢阅读我的文章，并且这些文章对你的职业/学习有帮助，请考虑注册成为 Medium 会员。每月$5，注册后可以无限访问 Medium 上所有文章（包括我的）。如果你通过以下链接注册，我将获得一小笔佣金（不会增加你的额外费用）。你的支持意味着我能花更多时间撰写类似的文章。**'
- en: '[](https://weimenglee.medium.com/membership?source=post_page-----bc62f0d93b3f--------------------------------)
    [## Join Medium with my referral link - Wei-Meng Lee'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://weimenglee.medium.com/membership?source=post_page-----bc62f0d93b3f--------------------------------)
    [## 使用我的推荐链接加入 Medium - Wei-Meng Lee'
- en: Read every story from Wei-Meng Lee (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Wei-Meng Lee 的每一个故事（以及 Medium 上其他成千上万位作者的故事）。你的会员费将直接支持…
- en: weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----bc62f0d93b3f--------------------------------)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----bc62f0d93b3f--------------------------------)
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this article, I discussed the basics of network graph and how it is useful
    to let you visualize the relationships between different entities in your dataset.
    For this article, my focus is on how to use the NetworkX package to plot the graph.
    In my next article, I will make use of the Flights Delay dataset and visualize
    the connections between different airports. Stay tuned!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我探讨了网络图的基础知识以及它如何帮助你可视化数据集中不同实体之间的关系。本文重点介绍了如何使用 NetworkX 包来绘制图形。在我的下一篇文章中，我将利用航班延误数据集来可视化不同机场之间的联系。敬请关注！
