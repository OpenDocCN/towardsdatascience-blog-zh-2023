- en: 'Back To Basics, Part Dos: Gradient Descent'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础回顾，第二部分：梯度下降
- en: 原文：[https://towardsdatascience.com/back-to-basics-part-dos-linear-regression-cost-function-and-gradient-descent-e3d7d05c56fd](https://towardsdatascience.com/back-to-basics-part-dos-linear-regression-cost-function-and-gradient-descent-e3d7d05c56fd)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/back-to-basics-part-dos-linear-regression-cost-function-and-gradient-descent-e3d7d05c56fd](https://towardsdatascience.com/back-to-basics-part-dos-linear-regression-cost-function-and-gradient-descent-e3d7d05c56fd)
- en: '[](https://medium.com/@shreya.rao?source=post_page-----e3d7d05c56fd--------------------------------)[![Shreya
    Rao](../Images/03f13be6f5f67783d32f0798f09a4f86.png)](https://medium.com/@shreya.rao?source=post_page-----e3d7d05c56fd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e3d7d05c56fd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e3d7d05c56fd--------------------------------)
    [Shreya Rao](https://medium.com/@shreya.rao?source=post_page-----e3d7d05c56fd--------------------------------)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@shreya.rao?source=post_page-----e3d7d05c56fd--------------------------------)[![Shreya
    Rao](../Images/03f13be6f5f67783d32f0798f09a4f86.png)](https://medium.com/@shreya.rao?source=post_page-----e3d7d05c56fd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e3d7d05c56fd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e3d7d05c56fd--------------------------------)
    [Shreya Rao](https://medium.com/@shreya.rao?source=post_page-----e3d7d05c56fd--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e3d7d05c56fd--------------------------------)
    ·11 min read·Feb 4, 2023
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e3d7d05c56fd--------------------------------)
    ·阅读时间11分钟·2023年2月4日
- en: --
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Welcome to the second part of our ***Back To Basics*** series. In the [first
    part](https://medium.com/towards-data-science/back-to-basics-part-uno-linear-regression-cost-function-and-gradient-descent-590dcb3eee46),
    we covered how to use Linear Regression and Cost Function to find the best-fitting
    line for our house prices data. However, we also saw that testing multiple *intercept*
    values can be tedious and inefficient. In this second part, we’ll delve deeper
    into Gradient Descent, a powerful technique that can help us find the perfect
    *intercept* and optimize our model. We’ll explore the math behind it and see how
    it can be applied to our linear regression problem.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到我们的***基础回顾***系列的第二部分。在 [第一部分](https://medium.com/towards-data-science/back-to-basics-part-uno-linear-regression-cost-function-and-gradient-descent-590dcb3eee46)中，我们讲解了如何使用线性回归和成本函数来为我们的房价数据找到最佳拟合线。然而，我们也看到测试多个*截距*值可能既繁琐又低效。在第二部分中，我们将深入探讨梯度下降，这是一种强大的技术，可以帮助我们找到完美的*截距*并优化我们的模型。我们将探讨其背后的数学原理，并看看它如何应用于我们的线性回归问题。
- en: Gradient descent is a powerful optimization algorithm that ***aims to quickly
    and efficiently find the minimum point of a curve.*** The best way to visualize
    this process is to imagine you are standing at the top of a hill, with a treasure
    chest filled with gold waiting for you in the valley.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 梯度下降是一种强大的优化算法，它***旨在快速高效地找到曲线的最小点***。最好的可视化方式是想象你站在山顶，山谷里有一个装满金币的宝箱等着你。
- en: '![](../Images/31950f4c1265a42f3cdc94e121c9c121.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/31950f4c1265a42f3cdc94e121c9c121.png)'
- en: However, the exact location of the valley is unknown because it’s super dark
    out and you can’t see anything. Moreover, you want to reach the valley before
    anyone else does (because you want all of the treasure for yourself duh). Gradient
    descent helps you navigate the terrain and reach this *optimal* point ***efficiently
    and quickly***. At each point, it’ll tell you how many steps to take and in what
    direction you need to take them.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，山谷的确切位置是未知的，因为外面非常黑暗，你什么也看不见。此外，你希望在其他人之前到达山谷（因为你想独占所有的宝藏）。梯度下降帮助你导航地形，并***高效而迅速地***到达这个*最佳*点。在每个点，它会告诉你该走多少步以及需要朝哪个方向前进。
- en: 'Similarly, gradient descent can be applied to our linear regression problem
    by using the steps laid out by the algorithm. To visualize the process of finding
    the minimum, let’s plot the **MSE** curve. We already know that the equation of
    the curve is:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，通过使用算法制定的步骤，梯度下降可以应用到我们的线性回归问题中。为了可视化找到最小值的过程，让我们绘制**MSE**曲线。我们已经知道曲线的方程是：
- en: '![](../Images/87267eb6c972fc8f4d5a7b12866e05ba.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/87267eb6c972fc8f4d5a7b12866e05ba.png)'
- en: the equation of the curve is the equation used to calculate the MSE
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 曲线方程是用于计算均方误差（MSE）的方程
- en: 'And from the [previous article](/back-to-basics-part-uno-linear-regression-cost-function-and-gradient-descent-590dcb3eee46#e9d3),
    we know that the equation of **MSE** in our problem is:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从[上一篇文章](/back-to-basics-part-uno-linear-regression-cost-function-and-gradient-descent-590dcb3eee46#e9d3)中，我们知道我们问题中的**MSE**方程是：
- en: '![](../Images/d6eceaa5e7b3d066189f7a1ac2e4866d.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d6eceaa5e7b3d066189f7a1ac2e4866d.png)'
- en: 'If we zoom out we can see that an **MSE** curve (which resembles our valley)
    can be found by substituting a bunch of *intercept* values in the above equation.
    So let’s plug in 10,000 values of the *intercept*, to get a curve that looks like
    this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们放大一点，就会看到一个**MSE**曲线（类似于我们的谷底）可以通过将一堆*截距*值代入上述方程来找到。所以让我们代入 10,000 个*截距*值，得到如下曲线：
- en: '![](../Images/35693cf8ddf5baac7d203b1097c6fec7.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/35693cf8ddf5baac7d203b1097c6fec7.png)'
- en: in reality, we won’t know what the MSE curve looks like
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们并不知道 MSE 曲线的样子
- en: 'The goal is to reach the bottom of this **MSE** curve, which we can do by following
    these steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是达到这个**MSE**曲线的底部，我们可以通过以下步骤实现：
- en: 'Step 1: Start with a random initial guess for the intercept value'
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 1：从一个随机的截距值初始猜测开始
- en: In this case, let’s assume our initial guess for the *intercept* value is 0.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，假设我们对*截距*值的初始猜测是 0。
- en: 'Step 2: Calculate the gradient of the MSE curve at this point'
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 2：计算此点 MSE 曲线的梯度
- en: The *gradient* of a curve at a point is represented by the tangent line (a fancy
    way of saying that the line touches the curve only at that point) at that point.
    For example, at Point A, the *gradient* of the **MSE**curve can be represented
    by the red tangent line, when the intercept is equal to 0.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 曲线在某一点的*梯度*由该点的切线表示（这是说该直线仅在该点接触曲线的一种方式）。例如，在点 A，当截距等于 0 时，**MSE**曲线的*梯度*可以由红色切线表示。
- en: '![](../Images/fb9166b4caf089cf0c697c648b9dd34c.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fb9166b4caf089cf0c697c648b9dd34c.png)'
- en: the gradient of the MSE curve when intercept = 0
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当截距 = 0 时，MSE 曲线的梯度
- en: 'In order to determine the value of the *gradient*, we apply our knowledge of
    calculus. Specifically, the *gradient* is equal to the derivative of the curve
    with respect to the *intercept* at a given point. This is denoted as:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定*梯度*的值，我们运用微积分知识。具体来说，*梯度*等于曲线对*截距*的导数，这在给定点上表示为：
- en: '![](../Images/7c5e380599fa8a3a18934636beb7952d.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7c5e380599fa8a3a18934636beb7952d.png)'
- en: 'NOTE: If you’re unfamiliar with derivatives, I recommend watching this [Khan
    Academy video](https://www.khanacademy.org/math/ap-calculus-ab/ab-differentiation-1-new/ab-2-6a/v/derivative-properties-and-polynomial-derivatives)
    if interested. Otherwise you can gloss over the next part and still be able to
    follow the rest of the article.'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：如果你不熟悉导数，我建议观看这个[Khan Academy 视频](https://www.khanacademy.org/math/ap-calculus-ab/ab-differentiation-1-new/ab-2-6a/v/derivative-properties-and-polynomial-derivatives)。否则，你可以略过下一部分，仍然能够跟随文章的其余内容。
- en: 'We calculate the ***derivative of the MSE curve***as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计算***MSE 曲线的导数***如下：
- en: '![](../Images/4d20f8c99a090c3d0064f8278a109110.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d20f8c99a090c3d0064f8278a109110.png)'
- en: 'Now to find the ***gradient at point A***, we substitute the value of the *intercept*
    at point A in the above equation. Since *intercept* = 0, the derivative at point
    A is:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在为了找到***点 A 处的梯度***，我们将点 A 处的*截距*值代入上述方程中。由于*截距* = 0，点 A 处的导数为：
- en: '![](../Images/4396d75c2117cd2749a7064d047acc98.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4396d75c2117cd2749a7064d047acc98.png)'
- en: So when the *intercept* = 0, the *gradient* = -190
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以当*截距* = 0 时，*梯度* = -190
- en: '**NOTE:** As we approach the optimal value, the gradient values approach zero.
    At the optimal value, the gradient is equal to zero. Conversely, the farther away
    we are from the optimal value, the larger the gradient becomes.'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 当我们接近最优值时，梯度值接近零。在最优值处，梯度等于零。相反，当我们离最优值越远，梯度就越大。'
- en: '![](../Images/53a9ed2d96545e7594f89580a1562d4b.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/53a9ed2d96545e7594f89580a1562d4b.png)'
- en: From this, we can infer that the step size should be related to the *gradient*
    since it tells us if we should take a baby step or a big step. This means that
    when the *gradient* of the curve is close to 0, then we should take baby steps
    because we are close to the optimal value. And if the *gradient* is bigger, we
    should take bigger steps to get to the optimal value faster.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从中我们可以推断步长应与*梯度*相关，因为它告诉我们是采取小步还是大步。这意味着，当曲线的*梯度*接近 0 时，我们应采取小步，因为我们接近最优值。如果*梯度*较大，则我们应采取较大的步伐，以更快地达到最优值。
- en: '**NOTE:** However, if we take a super huge step, then we could make a big jump
    and miss the optimal point. So we need to be careful.'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/530f203471ffe32da5363fa119668a64.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
- en: 'Step 3: Calculate the Step Size using the gradient and the Learning Rate and
    update the intercept value'
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we see that the ***Step Size*** and *gradient* are proportional to each
    other, the *Step Size* is determined by multiplying the *gradient* by a pre-determined
    constant value called the ***Learning Rate:***
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4c6f90e480006770f80b6d63955ff71c.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: The *Learning Rate* controls the magnitude of the *Step Size* and ensures that
    the step taken is not too large or too small.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: In practice, the Learning Rate is usually a small positive number that is ≤
    0.001\. But for our problem let’s set it to 0.1.
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'So when the intercept is 0:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/85a1486d4568655f8eac74ac0b88f057.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: 'Based on the *Step Size* we calculated above, we update the *intercept* (aka
    change our current location)using any of these equivalent formulas:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f65719bb3785606ade584ef0ccb4f3a0.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: To find the new *intercept* in this step, we plug in the relevant values…
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8fe76562abcce203af813c59e5ba3399.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: …and find that the new *intercept* = 19.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Now plugging this value in the **MSE** equation, we find that the **MSE** when
    the *intercept* is 19 = 8064.095\. In one big step, we moved closer to our optimal
    value and reduced the **MSE**.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b1b82fffb290f2788fea5d3962472167.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: 'Even if we look at our graph, we see how much better our new line with *intercept*
    19 is fitting our data than our old line with *intercept* 0:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/045bf220b37575802b777d3c834da4af.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: 'Step 4: Repeat steps 2–3'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We repeat Steps 2 and 3 using the updated *intercept* value.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, since the new *intercept* value in this iteration is 19, following
    [Step 2](https://medium.com/towards-data-science/back-to-basics-part-dos-linear-regression-cost-function-and-gradient-descent-e3d7d05c56fd#6ab4),
    we will calculate the gradient at this new point:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7fda83bf1af29af75d5d14427aa37f96.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: And we find that the *gradient* of the **MSE** curve at the intercept value
    of 19 is -152 (as represented by the red tangent line in the illustration below).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/682e6a49f54e380cbd91d1d30fceeb63.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: 'Next, in accordance with [Step 3](https://medium.com/towards-data-science/back-to-basics-part-dos-linear-regression-cost-function-and-gradient-descent-e3d7d05c56fd#67b0),
    let’s calculate the *Step Size*:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7365eb11df5edd90de1dff199c7cd829.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: 'And subsequently, update the *intercept* value:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0d5165ff0a1326f1cc044713e5cbfd23.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: Now we can compare the line with the previous *intercept* of 19 to the new line
    with the new intercept 34.2…
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9826e5617c32f3d17e27f6504f07f3fe.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: …and we can see that the new line fits the data better.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Overall, the **MSE** is getting smaller…
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a0369469f4ecfeb61ed98f3ce9e610a4.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: '…and our *Step Sizes* are getting smaller:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: …而我们的*步长*正在变得越来越小：
- en: '![](../Images/c2c5de345da3c8464070fd8580741258.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c2c5de345da3c8464070fd8580741258.png)'
- en: 'We repeat this process iteratively until we converge toward the optimal solution:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们反复进行这个过程，直到我们收敛到最佳解决方案：
- en: '![](../Images/901fbdaec84cf2dd3bbcab2e37c3d2ae.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/901fbdaec84cf2dd3bbcab2e37c3d2ae.png)'
- en: As we progress toward the minimum point of the curve, we observe that the *Step
    Size* becomes increasingly smaller. After 13 steps, the gradient descent algorithm
    estimates the *intercept* value to be 95\. If we had a crystal ball, this would
    be confirmed as the minimum point of the **MSE** curve. And it is clear to see
    how this method is more efficient compared to the brute force approach that we
    saw in the [previous article](https://medium.com/towards-data-science/back-to-basics-part-uno-linear-regression-cost-function-and-gradient-descent-590dcb3eee46).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们向曲线的最小点推进时，我们观察到*步长*变得越来越小。在13步之后，梯度下降算法估计*截距*值为95。如果我们有一个水晶球，这将被确认作为**MSE**曲线的最小点。很明显，这种方法比我们在[上一篇文章](https://medium.com/towards-data-science/back-to-basics-part-uno-linear-regression-cost-function-and-gradient-descent-590dcb3eee46)中看到的蛮力方法更有效。
- en: 'Now that we have the optimal value of our *intercept*, the linear regression
    model is:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了*截距*的最佳值，线性回归模型是：
- en: '![](../Images/2a023c202b0fa0c978c9d5e9931747b4.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2a023c202b0fa0c978c9d5e9931747b4.png)'
- en: 'And the linear regression line looks like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 线性回归线如下所示：
- en: '![](../Images/e8f950f35515deab6e817bef1d18b635.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e8f950f35515deab6e817bef1d18b635.png)'
- en: best fitting line with intercept = 95 and slope = 0.069
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳拟合线的截距为95，斜率为0.069
- en: Finally, going back to our friend Mark’s question — What value should he sell
    his 2400 feet² house for?
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，回到我们朋友马克的问题——他应该以多少价格出售他那2400平方英尺的房子？
- en: '![](../Images/df544c7f5484bf0183180a27be7a2ed3.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/df544c7f5484bf0183180a27be7a2ed3.png)'
- en: Plug in the house size of 2400 feet² into the above equation…
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将2400平方英尺的房屋大小代入上述方程……
- en: '![](../Images/7e3e761cd93dbd21bc734bd60c452953.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7e3e761cd93dbd21bc734bd60c452953.png)'
- en: …and voila. We can tell our unnecessarily worried friend Mark that based on
    the 3 houses in his neighborhood, he should look to sell his house for around
    $260,600.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: …瞧。我们可以告诉我们不必要担心的朋友马克，根据他所在社区的3栋房子，他应该将他的房子出售价格定在约$260,600。
- en: Now that we have a solid understanding of the concepts, let’s do a quick Q&A
    sesh answering any lingering questions.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对这些概念有了扎实的理解，让我们进行一个简短的问答环节，解答任何悬而未决的问题。
- en: Why does finding the gradient actually work?
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么找出梯度实际上有效？
- en: 'To illustrate this, consider a scenario where we are attempting to reach the
    minimum point of curve C, denoted as *x**. And we are currently at point A at
    *x*, located to the left of *x**:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，考虑一个场景，我们尝试达到曲线C的最小点，记作*x**。我们当前在点A，位于*x*的左侧：
- en: '![](../Images/e0f02362947f0992318f4878ea407da7.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e0f02362947f0992318f4878ea407da7.png)'
- en: If we take the derivative of the curve at point A with respect to *x*, represented
    as *dC(x)/dx*, we obtain a negative value (this means the *gradient* is sloping
    downwards). We also observe that we need to move to the right to reach *x**. Thus,
    we need to increase *x* to arrive at the minimum *x*.*
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在点A对曲线关于*x*求导，记作*dC(x)/dx*，我们会得到一个负值（这意味着*梯度*向下倾斜）。我们还观察到，需要向右移动才能到达*x**。因此，我们需要增加*x*以到达最小*x*。
- en: '![](../Images/4b8b203b05f324d3298c2bb561b8230a.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4b8b203b05f324d3298c2bb561b8230a.png)'
- en: the red line, or the gradient, is sloping downwards => a negative Gradient
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 红线，或称梯度，向下倾斜 => 负梯度
- en: Since *dC(x)/dx* is negative, *x-𝛂*dC(x)/dx* will be larger than *x*, thus moving
    towards *x**.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 由于*dC(x)/dx*是负值，*x-𝛂*dC(x)/dx*将大于*x*，因此朝着*x**移动。
- en: Similarly, if we are at point A located to the right of the minimum point x*,
    then we get a **positive *gradient*** (*gradient* is sloping upwards), *dC(x)/dx*.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，如果我们在点A，位于最小点*x*的右侧，则我们得到一个**正的*梯度***（*梯度*向上倾斜），*dC(x)/dx*。
- en: '![](../Images/de1279dfa948d530aff96b49cfced9bb.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/de1279dfa948d530aff96b49cfced9bb.png)'
- en: the red line, or the Gradient, is sloping upwards => a positive Gradient
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 红线，或称梯度，向上倾斜 => 正梯度
- en: So *x-𝛂*dC(x)/dx* will be less than *x*, thus moving towards *x**.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 因此*x-𝛂*dC(x)/dx*将小于*x*，从而朝着*x**移动。
- en: How does gradient decent know when to stop taking steps?
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 梯度下降法如何知道何时停止？
- en: Gradient descent stops when the *Step Size* is very close to 0\. As previously
    discussed, at the minimum point the *gradient* is 0 and as we approach the minimum,
    the *gradient* approaches 0\. Therefore, when the *gradient* at a point is close
    to 0 or in the vicinity of the minimum point, the *Step Size* will also be close
    to 0, indicating that the algorithm has reached the optimal solution.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/14032af67e4aa8ee4c35958ce14d4b11.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
- en: when we are close to the minimum point, the gradient is close to 0, and subsequently,
    Step Size is close to 0
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: In practice the Minimum Step Size = 0.001 or smaller
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/233f17195cde7e3426dca77493c57e9d.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
- en: That being said, gradient descent also includes a limit on the number of steps
    it will take before giving up called the *Maximum Number of Steps*.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: In practice, the Maximum Number of Steps = 1000 or greater
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So even if the *Step Size* is larger than the *Minimum Step Size*, if there
    have been more than the *Maximum Number of Steps*, gradient descent will stop.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: What if the minimum point is more challenging to identify?
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Until now, we have been working with a curve where it’s easy to identify the
    minimum point (these kinds of curves are called ***convex***). But what if we
    have a curve that’s not as pretty (technically aka ***non-convex***) and looks
    like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d6f599cf88e193dbc1ba7cb96b050c3f.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
- en: Here, we can see that Point B is the *global minimum* (actual minimum), and
    Points A and C are *local minimums* (points that can be confused for the *global
    minimum* but aren’t). So if a function has multiple *local minimums* and a *global
    minimum*, it is not guaranteed that gradient descent will find the *global minimum*.
    Moreover, which local minimum it finds will depend on the position of the initial
    guess (as seen in [Step 1](/back-to-basics-part-dos-linear-regression-cost-function-and-gradient-descent-e3d7d05c56fd#87cf)
    of gradient descent).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cfb3784ccaa78a0fc2f825e8e3c540d0.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: Taking this non-convex curve above as an example, if the initial guess is at
    Block A or Block C, gradient descent will declare that the minimum point is at
    local minimums A or C, respectively when in reality it’s at B. Only when the initial
    guess is at Block B, the algorithm will find the global minimum B.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '**Now the question is — how do we make a good initial guess?**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '*Simple answer:* Trial and Error. Kind of.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '*Not-so-simple answer:* From the graph above, if our minimum guess of *x* was
    0 since that lies in Block A, it’ll lead to the local minimum A. Thus, as you
    can see, 0 may not be a good initial guess in most cases. A common practice is
    to apply a random function based on a uniform distribution on the range of all
    possible values of x. Additionally, if feasible, running the algorithm with different
    initial guesses and comparing their results can provide insight into whether the
    guesses differ significantly from each other. This helps in identifying the global
    minimum more efficiently.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Okay, we’re almost there. Last question.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: What if we are trying to find more than one optimal value?
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Until now, we were focused on only finding the optimal intercept value because
    we magically knew the *slope* value of the linear regression is 0.069\. But what
    if don’t have a crystal ball and don't know the optimal *slope* value? Then we
    need to optimize both the slope and intercept values, expressed as *x₀* and *x₁*
    respectively.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: In order to do that, we must utilize partial derivatives instead of just derivatives.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'NOTE: Partial derivates are calculated in the same way as reglar old derivates,
    but are denoted differently because we have more than one variable we are trying
    to optimize for. To learn more about them, read this [article](https://www.mathsisfun.com/calculus/derivatives-partial.html)
    or watch this [video](https://www.youtube.com/watch?v=JAf_aSIJryg).'
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: However, the process remains relatively similar to that of optimizing a single
    value. The cost function (such as **MSE**) must still be defined and the gradient
    descent algorithm must be applied, but with the added step of finding partial
    derivatives for both x₀ and x₁.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1: Make initial guesses for x₀ and x₁**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 2: Find the partial derivatives with respect to x₀ and x₁ at these points**'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/23106bd4ebe44c70dc9e745e6a65f5da.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
- en: '**Step 3: Simultaneously update x₀ and x₁ based on the partial derivatives
    and the Learning Rate**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/320d5c87006b30dd542e0d81eb06fa58.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
- en: '**Step 4: Repeat Steps 2–3 until the Maximum Number of Steps is reached or
    the Step Size is less that the Minimum Step Size**'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '*And we can extrapolate these steps to 3, 4, or even 100 values to optimize
    for.*'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, gradient descent is a powerful optimization algorithm that efficiently
    helps us reach the optimal value. It can be applied to many other optimization
    problems, making it a fundamental tool for data scientists to have in their arsenal.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'UPDATE: [Part 3 on Logistic Regression](https://medium.com/towards-data-science/back-to-basics-part-tres-logistic-regression-e309de76bd66)
    is also up now!'
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As always, feel free to connect with me on [LinkedIn](https://www.linkedin.com/in/shreyarao24/)
    or email me at *shreya.statistics@gmail.com* to send me questions and suggestions
    for any other algorithms that you want illustrated!
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
