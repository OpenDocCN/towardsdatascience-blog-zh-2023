- en: How to Load Multiple CSV Files into a Pandas DataFrame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://towardsdatascience.com/load-multiple-csv-pandas-9c0c88c5adff](https://towardsdatascience.com/load-multiple-csv-pandas-9c0c88c5adff)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Importing and concatenating multiple CSV files into one pandas DataFrame
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://gmyrianthous.medium.com/?source=post_page-----9c0c88c5adff--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----9c0c88c5adff--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9c0c88c5adff--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9c0c88c5adff--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----9c0c88c5adff--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Â·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9c0c88c5adff--------------------------------)
    Â·5 min readÂ·Jan 31, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/649a65c5a7ba242fecd95611a28a9576.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Daniel K Cheung](https://unsplash.com/@danielkcheung?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/cPF2nlWcMY4?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: CSV (Common Separated Values) is a popular file format used to store and exchange
    data. In fact, this type of source is commonly used for relatively small volumes
    of data.
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas` is a commonly used Python package that lets developers process and
    transform data as part of analytical and data science tasks. However, beform perforning
    any task pandas needs to load all the data into memory. This means that the package
    can only be used for relatively small volumes of data â€” well this depends on the
    capabilities of the host machine but for an average machine, we would only be
    able to load a few GBs of data within memory.'
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, loading CSV files in memory and then processing the data with pandas,
    is a very common task given that such files usually consist of data whose size
    can be loaded in-memory.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Subscribe to Data Pipeline**](https://thedatapipeline.substack.com/welcome)**,
    a newsletter dedicated to Data Engineering**'
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will demonstrate how to load multiple CSV files in a single
    pandas DataFrame. Furthermore, weâ€™ll also showcase how to identify the source
    file in every record so that we can tell which data point belongs to a certain
    data file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now letâ€™s assume that we have data points collected in three separate CSV files
    namely `data_1.csv`, `data_2.csv` and `data_3.csv` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Concatenating multiple CSV files in a single pandas DataFrame
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have some dummy data in three separate CSV files, we can go ahead
    and import them in one DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: The first option we have is to read every individual CSV file using `pandas.read_csv()`
    function and concatenate all loaded files into a single DataFrame using `pandas.concatenate()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the newly constructed DataFrame contains all the data points found in the
    three input CSV files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice how the index of our DataFrame is reset when loading data from multiple
    files. If instead youâ€™d want to create a new index for the newly created DataFrame,
    all you need to do is ignore the index whilst concatenating the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Avoid specifying explicit file names
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now letâ€™s assume that we have hundreds of different CSV files that we would
    want to concateante into a single DataFrame. Instead of wasting time and lines
    of code to explicitly write all the individual filenames down, we could instead
    use a whitecard.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do so, by taking advantage of `glob` module, which is part of the standard
    libary and offers functionality to support unix style pathname pattern expansion.
    For example, in order to create a list containing of all the files ending with
    `.csv` filename under the current directory, we could use the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The full code that reads all csv files under current directory and concatenates
    them in a single pandas DataFrame is shared below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Another approach â€” and perhaps a more Pythonic one â€” is one that takes advantage
    `map` built-in function that lets us run a method or function over an [Iterable](/python-iterables-vs-iterators-688907fd755f)
    (like a Python List) without having to explicitly call a `for` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Identifying records coming from different files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some other use-cases, knowing the original source file of a given record
    could be a piece of information that we would also need to track.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we expect that our DataFrame will hold an additional column that specifies
    the corresponding filename from which every record was added into the DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Final Thoughts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this article, we demonstrated how to load multiple CSV files and concatenate
    them into a single DataFrame in pandas. Additionally, we showcased how you can
    actually perform this import without having to explicitly specify the file names
    to be loaded. Finally, we discussed how you can even create a new column in the
    loaded DataFrame such that you can then identify the source file for each record.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have loaded your data into pandas, you can take advantage of the
    rich API the package offers and lets you peform analyses, transformations and
    any kind of processing you might have to do. If you are looking to write a pandas
    DataFrame back to a CSV file make sure to follow the guide below ðŸ‘‡.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/pandas-to-csv-aab4ac27c455?source=post_page-----9c0c88c5adff--------------------------------)
    [## How to Write Pandas DataFrame to CSV File'
  prefs: []
  type: TYPE_NORMAL
- en: Taking advantage of all the options available when writing pandas DataFrames
    into CSV files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/pandas-to-csv-aab4ac27c455?source=post_page-----9c0c88c5adff--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '[**Subscribe to Data Pipeline**](https://thedatapipeline.substack.com/welcome)**,
    a newsletter dedicated to Data Engineering**'
  prefs: []
  type: TYPE_NORMAL
- en: ðŸ‘‡ **Related articles you may also like** ðŸ‘‡
  prefs: []
  type: TYPE_NORMAL
- en: '[](/etl-vs-elt-68e221d78719?source=post_page-----9c0c88c5adff--------------------------------)
    [## ETL vs ELT: Whatâ€™s the Difference?'
  prefs: []
  type: TYPE_NORMAL
- en: A comparison between ETL and ELT in the context of Data Engineering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/etl-vs-elt-68e221d78719?source=post_page-----9c0c88c5adff--------------------------------)
    [](/cte-sql-945e4b461de3?source=post_page-----9c0c88c5adff--------------------------------)
    [## What are CTEs in SQL
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Common Table Expression (CTE) in SQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/cte-sql-945e4b461de3?source=post_page-----9c0c88c5adff--------------------------------)
    [](/dbt-55b35c974533?source=post_page-----9c0c88c5adff--------------------------------)
    [## What is dbt (data build tool)
  prefs: []
  type: TYPE_NORMAL
- en: A gentle introduction to dbt that is taking over the data world
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/dbt-55b35c974533?source=post_page-----9c0c88c5adff--------------------------------)
  prefs: []
  type: TYPE_NORMAL
