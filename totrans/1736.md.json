["```py\ndef change_string(input_string:str) -> None:\n    \"\"\" Notice that this functions doesn't return anything! \"\"\"\n    input_string += 'a'\n\ndef change_list(input_list:list) -> None:\n    \"\"\" Notice that this functions doesn't return anything! \"\"\"\n    input_list.append('a')\n```", "```py\nmy_str = 'hello'\nprint(my_str)                        # 'hello'\nchange_string(input_string=my_str)\nprint(my_str)                        # 'hello'\n\nmy_list = ['hello']\nprint(my_list)                       # ['hello'] \nchange_list(input_list=my_list)\nprint(my_list)                       # ['hello', 'a'] !?\n```", "```py\nIMMUTABLE                                  MUTABLE\nint, float, decimal, complex (numbers)     list\nbool                                       set\nstr                                        dict\ntuple\nfrozenset\n```", "```py\nmy_str = 'a'\nprint(id(my_str))    # 1988650365763\nmy_str += 'b'\nprint(id(my_str))    # 1988650363313\n```", "```py\nmy_list= ['a']\nprint(id(my_list))    # 1988503659344\nmy_list.append('b')\nprint(id(my_list))    # 1988503659344\n```", "```py\n# Immutable var: string\nmy_str = 'a'\nprint(id(my_str))            # 1988650365936\nmy_str = 'b'\nprint(id(my_str))            # 1988650350704\n\n# Mutable var: list\nmy_lst = ['a', 'list']\nprint(id(my_lst))            # 1988659494080\nmy_lst = ['other', 'list']\nprint(id(my_lst))            # 1988659420608\n```", "```py\n# 1\\. Define list and check out the memory-address and content\nmy_list = ['a', 'list']\nprint(id(my_list), my_list)            # 2309673102336 ['a', 'list']\n\ndef change_list(input_list:list):\n    \"\"\" Adds value to the list but don't return the list \"\"\"\n    print(id(input_list), input_list)  # 2309673102336 ['a', 'list']\n    input_list.append('b')\n    print(id(input_list))              # 2309673102336 ['a', 'list', 'b']\n\n# 2\\. Pass the list into our function (function doesn't return anything)\nchange_list(input_list=my_list)     \n\n# 3\\. Notice that the memory location is the same and the list has changed\nprint(id(my_list), my_list)            # 2309673102336 ['a', 'list', 'b']\n```", "```py\n# 1\\. Define a tuple, check out memory address and content\nmy_tup = {'a', 'tup'}\nprint(id(immutable_string), my_tup)        # 2560317441984, {'a', 'tup'}\n\ndef change_tuple(input_tuple:tuple):\n    \"\"\" 'overwrites' the tuple we received, don't return anything \"\"\"\n    print(id(input_tuple))                 # 2560317441984, {'a', 'tup'}\n    input_tuple = ('other', 'tuple')\n    print(id(input_tuple))                 # 2560317400064, {'other', 'tup'}\n\n# 2\\. Pass the list into our function (nothing is returned from function)\nchange_tuple(input_tuple=immutable_tuple) \n\n# 3\\. Print out memory location and content again\nprint(id(my_tup), my_tup)                  # 2560317441984, {'a', 'tup'}\n```", "```py\n# 2\\. Pass the list into our function (nothing is returned from function)\nchange_list(input_list=my_list.copy()) \n```"]