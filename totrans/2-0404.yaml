- en: 'Boto3 vs AWS Wrangler: Simplifying S3 Operations with Python'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Boto3 与 AWS Wrangler：使用 Python 简化 S3 操作
- en: 原文：[https://towardsdatascience.com/boto3-vs-aws-wrangler-simplifying-s3-operations-with-python-596bdf021ef2](https://towardsdatascience.com/boto3-vs-aws-wrangler-simplifying-s3-operations-with-python-596bdf021ef2)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/boto3-vs-aws-wrangler-simplifying-s3-operations-with-python-596bdf021ef2](https://towardsdatascience.com/boto3-vs-aws-wrangler-simplifying-s3-operations-with-python-596bdf021ef2)
- en: A comparative analysis for AWS S3 development
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 针对 AWS S3 开发的比较分析
- en: '[](https://anbento4.medium.com/?source=post_page-----596bdf021ef2--------------------------------)[![Antonello
    Benedetto](../Images/bf802bb46dce03dd3bd4e17c1dffe5b7.png)](https://anbento4.medium.com/?source=post_page-----596bdf021ef2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----596bdf021ef2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----596bdf021ef2--------------------------------)
    [Antonello Benedetto](https://anbento4.medium.com/?source=post_page-----596bdf021ef2--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://anbento4.medium.com/?source=post_page-----596bdf021ef2--------------------------------)[![Antonello
    Benedetto](../Images/bf802bb46dce03dd3bd4e17c1dffe5b7.png)](https://anbento4.medium.com/?source=post_page-----596bdf021ef2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----596bdf021ef2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----596bdf021ef2--------------------------------)
    [Antonello Benedetto](https://anbento4.medium.com/?source=post_page-----596bdf021ef2--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----596bdf021ef2--------------------------------)
    ·10 min read·Jun 20, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----596bdf021ef2--------------------------------)
    ·阅读时间 10 分钟·2023 年 6 月 20 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/1fda6e713968eca65e7b3b2f71cd45b3.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1fda6e713968eca65e7b3b2f71cd45b3.png)'
- en: Picture by [Hemerson Coelho](https://unsplash.com/photos/_HFP0eMwYWY) on [Unsplash](https://unsplash.com/)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Hemerson Coelho](https://unsplash.com/photos/_HFP0eMwYWY) 提供，[来自 Unsplash](https://unsplash.com/)
- en: On-Demand Courses | Recommended
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按需课程 | 推荐
- en: '*A few of my readers have contacted me asking for on-demand courses to help
    you* ***BECOME*** *a solid* ***Data Engineer****. These are 3 great resources
    I would recommend:*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*一些读者联系我，询问是否有按需课程帮助你* ***成为*** *一个扎实的* ***数据工程师***。这些是我推荐的 3 个绝佳资源：'
- en: '[**Data Engineering Nano-Degree (UDACITY)**](https://imp.i115008.net/zaX10r)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**数据工程纳米学位 (UDACITY)**](https://imp.i115008.net/zaX10r)'
- en: '[**Data Streaming With Apache Kafka & Apache Spark Nano-Degree** **(UDACITY)**](https://imp.i115008.net/zaX10r)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**使用 Apache Kafka 和 Apache Spark 进行数据流处理纳米学位 (UDACITY)**](https://imp.i115008.net/zaX10r)'
- en: '[**Spark And Python For Big Data With PySpark (UDEMY)**](https://click.linksynergy.com/deeplink?id=533LxfDBSaM&mid=39197&murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fspark-and-python-for-big-data-with-pyspark%2F)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**大数据与 PySpark 的 Spark 和 Python (UDEMY)**](https://click.linksynergy.com/deeplink?id=533LxfDBSaM&mid=39197&murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fspark-and-python-for-big-data-with-pyspark%2F)'
- en: '***Not a Medium member yet?*** *Consider signing up with my* [*referral link*](https://anbento4.medium.com/membership)
    *to gain access to everything Medium has to offer for as little as $5 a month!*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '***还不是 Medium 会员？*** *考虑通过我的* [*推荐链接*](https://anbento4.medium.com/membership)
    *注册，低至每月 5 美元即可访问 Medium 的所有内容！*'
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'In this tutorial, we will delve into the world of AWS S3 development with Python
    by exploring and comparing two powerful libraries: `boto3` and `awswrangler`.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将通过探索和比较两个强大的库：`boto3` 和 `awswrangler`，深入了解 AWS S3 的 Python 开发。
- en: If you’ve ever wondered
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经想过
- en: “What is the best Python tool to interact with AWS S3 Buckets? “
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “哪个 Python 工具最适合与 AWS S3 存储桶交互？”
- en: ''
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “How to perform S3 operations in the most efficient way?”
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “如何以最有效的方式执行 S3 操作？”
- en: then you’ve come to the right place.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 那么你来对地方了。
- en: 'Indeed, throughout this post, we will cover a range of common operations essential
    for working with AWS S3 buckets among which:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 的确，在这篇文章中，我们将涵盖一系列处理 AWS S3 存储桶的常见操作，其中包括：
- en: '**listing objects**,'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**列出对象**，'
- en: '**checking object existence**,'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**检查对象存在性**，'
- en: '**downloading objects**,'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**下载对象**，'
- en: '**uploading objects**,'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**上传对象**，'
- en: '**deleting objects**,'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**删除对象**，'
- en: '**writing objects**,'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**写入对象**，'
- en: '**reading objects (standard way or with SQL)**'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**读取对象（标准方式或使用 SQL）**'
- en: By comparing the two libraries, we will identify their similarities, differences,
    and optimal use cases for each operations. By the end, you will have a clear understanding
    of which library is better suited for specific S3 tasks.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过比较这两个库，我们将识别它们的相似性、差异以及每个操作的最佳用例。到最后，你将清楚了解哪个库更适合特定的S3任务。
- en: Additionally, for those who read to the very bottom, we will also explore how
    to leverage `boto3` and `awswrangler` to read data from S3 using friendly SQL
    queries.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于那些读到最后的人，我们还将探讨如何利用`boto3`和`awswrangler`通过友好的SQL查询从S3读取数据。
- en: So let’s dive in and discover the best tools for interacting with AWS S3 and
    learn how to perform these operations efficiently with Python using both libraries.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们深入了解，发现与AWS S3交互的最佳工具，并学习如何使用这两个库高效地执行这些操作。
- en: Prerequisites & Data
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件与数据
- en: 'The package versions used in this tutorial are:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中使用的软件包版本为：
- en: '`boto3==1.26.80`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boto3==1.26.80`'
- en: '`awswrangler==2.19.0`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`awswrangler==2.19.0`'
- en: 'Also, three initial files including [randomly generated](https://github.com/anbento0490/projects/blob/main/boto3_vs_awswrangler/generator.py)
    `account_balances` data have been uploaded to an S3 bucket named `coding-tutorials`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，三个初始文件，包括[随机生成的](https://github.com/anbento0490/projects/blob/main/boto3_vs_awswrangler/generator.py)`account_balances`数据，已上传到名为`coding-tutorials`的S3桶中：
- en: '![](../Images/eac70331fc5658f0f3fa3623ce13edad.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eac70331fc5658f0f3fa3623ce13edad.png)'
- en: 'Despite you should be aware that a number of ways exists to establish a connection
    to a S3 bucket, in this case, we are going to use the `setup_default_session()`
    from `boto3`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你应该知道有多种方法可以与S3桶建立连接，但在这种情况下，我们将使用`boto3`的`setup_default_session()`：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This method is handy as, once the session has been set, it can be shared by
    both `boto3` and `awswrangler`, meaning that we won’t need to pass any more secrets
    down the road
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法很方便，因为一旦设置了会话，它可以被`boto3`和`awswrangler`共享，这意味着我们不需要再传递任何秘密信息。
- en: Comparative Analysis
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较分析
- en: Now let’s compare `boto3` and `awswrangler` while performing a number of common
    operations and find what’s the best tool for the job.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们比较一下`boto3`和`awswrangler`在执行一些常见操作时，找出最适合的工具。
- en: The full notebook including the code that follows can be found in [this GitHub
    folder](https://github.com/anbento0490/projects/blob/main/boto3_vs_awswrangler/AWS%20Wrangler%20vs%20Boto3.ipynb).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 包含以下代码的完整笔记本可以在[这个GitHub文件夹](https://github.com/anbento0490/projects/blob/main/boto3_vs_awswrangler/AWS%20Wrangler%20vs%20Boto3.ipynb)中找到。
- en: 1 Listing Objects
  id: totrans-44
  prefs:
  - PREF_H2
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1 列出对象
- en: Listing objects, is probably the first operation we should perform while exploring
    a new S3 bucket and is a simple way to check whether a session has been correctly
    set.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 列出对象可能是我们在探索新S3桶时应该执行的第一个操作，也是检查会话是否正确设置的简单方法。
- en: 'With `boto3` objects can be listed using:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`boto3`可以通过以下方式列出对象：
- en: '`boto3.client(''s3'').list_objects()`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boto3.client(''s3'').list_objects()`'
- en: '`boto3.resource(''s3'').Bucket().objects.all()`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boto3.resource(''s3'').Bucket().objects.all()`'
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Despite both `client` and `resource` classes do a decent job, the `client` class
    should be preferred, as it is more elegant and provides a large number of [*easily
    accessible*] low-level metadata as a nested `JSON` ( among which the object `size`).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`client`和`resource`类做得都不错，但`client`类应当优先选择，因为它更优雅，并提供了大量的[*易于访问*]低级元数据，作为嵌套的`JSON`（其中包括对象的`size`）。
- en: 'On the other hand, `awswrangler` only provides a single method to list objects:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`awswrangler`仅提供了一个列出对象的方法：
- en: '`wr.s3.list_objects()`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wr.s3.list_objects()`'
- en: 'Being a high-level method, this does not return any *low-level* metadata about
    the object, such that to find the file `size` we need to call:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种高级方法，这不会返回任何*低级*的对象元数据，因此要找到文件的`size`，我们需要调用：
- en: '`wr.s3.size_objects`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wr.s3.size_objects`'
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The code above returns:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码返回：
- en: '![](../Images/b259fee732a14f6ccdf543fea958c5f7.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b259fee732a14f6ccdf543fea958c5f7.png)'
- en: Comparison → Boto3 Wins
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较 → Boto3胜出
- en: Despite `awswrangler` is more straightforward to use, `boto3` wins the challenge,
    while listing S3 objects. In fact, its low-level implementation, means that many
    more objects metadata can be retrieved using one of its classes. Such information
    is extremely useful while accessing S3 bucket in a programmatic way.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`awswrangler`使用起来更为直观，但在列出S3对象时，`boto3`胜出。实际上，其底层实现意味着可以使用其类检索更多的对象元数据。这些信息在以编程方式访问S3桶时非常有用。
- en: 2 Checking Object Existence
  id: totrans-60
  prefs:
  - PREF_H2
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2 检查对象存在性
- en: The ability to check objects existence is required when we wish for additional
    operations to be triggered as a result of an object being already available in
    S3 or not.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望触发附加操作时，检查对象的存在性是必要的，这些操作是基于对象是否已经存在于 S3 中。
- en: 'With `boto3` such checks can be performed using:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `boto3` 可以通过以下方式执行这些检查：
- en: '`boto3.client(''s3'').head_object()`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boto3.client(''s3'').head_object()`'
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Instead `awswrangler` provides the dedicated method:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，`awswrangler` 提供了一个专用的方法：
- en: '`wr.s3.does_object_exist()`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wr.s3.does_object_exist()`'
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The code above returns:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码返回：
- en: '![](../Images/2b2d923348a660095d648fb820dc32a5.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2b2d923348a660095d648fb820dc32a5.png)'
- en: Comparison → AWSWrangler Wins
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较 → AWSWrangler 胜出
- en: 'Let’s admit it: `boto3` method name [`head_object()`] is not that intuitive.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们承认：`boto3` 的方法名 [`head_object()`] 并不是那么直观。
- en: Also having a dedicated method is undoubtedly and advantage of `awswrangler`
    that wins this match.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，拥有专用方法无疑是 `awswrangler` 在这场比赛中的优势。
- en: 3 D**ownloading Objects**
  id: totrans-73
  prefs:
  - PREF_H2
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3 D**ownloading Objects**
- en: 'Downloading objects in local is extremely simple with both `boto3` and `awswrangler`
    using the following methods:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下方法，在本地下载对象在 `boto3` 和 `awswrangler` 中都非常简单：
- en: '`boto3.client(''s3'').download_file()` or'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boto3.client(''s3'').download_file()` 或'
- en: '`wr.s3.download()`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wr.s3.download()`'
- en: 'The only difference is that `download_file()` takes `bucket` , `object_key`
    and `local_file` as input variables, whereas `download()` only requires the S3
    `path` and `local_file` :'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别是 `download_file()` 需要 `bucket`、`object_key` 和 `local_file` 作为输入变量，而 `download()`
    只需要 S3 `path` 和 `local_file`：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When the code is executed, both versions of the same object are indeed downloaded
    in local inside the `tmp/` folder:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 执行代码时，确实会将同一个对象的两个版本下载到本地的 `tmp/` 文件夹中：
- en: '![](../Images/d07ddbee8ae0200a1039f92f3451c4c8.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d07ddbee8ae0200a1039f92f3451c4c8.png)'
- en: Comparison → Draw
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较 → 平局
- en: We can consider both libraries being equivalent as long as downloading files
    is concerned, therefore let’s call it a draw.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载文件方面，我们可以认为两个库是等效的，因此我们称其为平局。
- en: 4 U**ploading Objects**
  id: totrans-83
  prefs:
  - PREF_H2
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4 U**ploading Objects**
- en: 'Same reasoning applies while uploading files from local environment to S3\.
    The methods that can be employed are:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 上传本地环境中的文件到 S3 时，同样的推理适用。可以使用的方法有：
- en: '`boto3.client(''s3'').upload_file()` or'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boto3.client(''s3'').upload_file()` 或'
- en: '`wr.s3.upload()`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wr.s3.upload()`'
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Executing the code, uploads two new `account_balances` objects (*for the months
    of April and May 2023*) to the `coding-tutorials` bucket:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 执行代码，将两个新的 `account_balances` 对象（*2023 年 4 月和 5 月*）上传到 `coding-tutorials` 存储桶：
- en: '![](../Images/852f24c0cbdf7fec16c28310039c0cbe.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/852f24c0cbdf7fec16c28310039c0cbe.png)'
- en: Comparison → Draw
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较 → 平局
- en: This is another draw. So far there’s absolute parity between the two libraries!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这仍然是平局。到目前为止，这两个库之间完全平等！
- en: 5 D**eleting Objects**
  id: totrans-92
  prefs:
  - PREF_H2
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5 D**eleting Objects**
- en: 'Let’s now assume we wished to delete the following objects:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们希望删除以下对象：
- en: '[PRE7]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`boto3` allows to delete objects one-by-one or in bulk using the following
    methods:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`boto3` 允许通过以下方法逐个或批量删除对象：'
- en: '`boto3.client(''s3'').delete_object()`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boto3.client(''s3'').delete_object()`'
- en: '`boto3.client(''s3'').delete_objects()`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boto3.client(''s3'').delete_objects()`'
- en: 'Both methods return a `response` including `ResponseMetadata` that can be used
    to verify whether objects have been deleted successfully or not. For instance:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 两种方法都返回一个包含 `ResponseMetadata` 的 `response`，可以用来验证对象是否成功删除。例如：
- en: while deleting a single object, a `HTTPStatusCode==204` indicates that the operation
    has been completed successfully (*if objects are found in the S3 bucket*);
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在删除单个对象时，`HTTPStatusCode==204` 表示操作已成功完成（*如果 S3 存储桶中找到对象*）；
- en: while deleting multiple objects, a `Deleted` list is returned with the names
    of successfully deleted items.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在删除多个对象时，会返回一个包含成功删除项目名称的 `Deleted` 列表。
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'On the other hand, `awswrangler` provides a method that can be used for both
    single and bulk deletions:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`awswrangler` 提供了一个可以用于单个和批量删除的方法：
- en: '`wr.s3.delete_objects()`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wr.s3.delete_objects()`'
- en: Since `object_keys` can be recursively passed to the method as a `list_comprehension`
    *-* *instead of being converted to a dictionary first like before -* using this
    syntax is a real pleasure.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `object_keys` 可以作为 `list_comprehension` 递归传递给方法，而不需要像以前那样先转换成字典，使用这种语法确实令人愉快。
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Executing the code above, deletes the objects in S3 and then returns:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述代码，会删除 S3 中的对象，然后返回：
- en: '![](../Images/c88bed5920fc5803a97ae8a076e78e93.png)![](../Images/6b6148a016715ecf59f7a0cb75d2c424.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c88bed5920fc5803a97ae8a076e78e93.png)![](../Images/6b6148a016715ecf59f7a0cb75d2c424.png)'
- en: Comparison → Boto3 Wins
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较 → Boto3 胜出
- en: 'This is tricky one: `awswrangler` has a simpler syntax to use while deleting
    multiple objects, as we can simply pass the full list to the method.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点棘手：`awswrangler`在删除多个对象时有更简单的语法，因为我们可以直接将完整的列表传递给该方法。
- en: However `boto3` returns a large number of information in the `response`that
    are extremely useful logs, while deleting objects programmatically.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`boto3`在`response`中返回大量有用的日志信息，这在编程删除对象时非常有用。
- en: Because in a production environment, low-level metadata is better than almost
    no metadata, `boto3` wins this challenge and now leads 2–1.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 因为在生产环境中，低级别的元数据总比几乎没有元数据要好，`boto3`赢得了这场挑战，现在领先2–1。
- en: 6 W**riting Objects**
  id: totrans-112
  prefs:
  - PREF_H2
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6 写入对象
- en: When it comes to write files to S3, `boto3` does not even provide an *out-of-the-box*
    method to perform such operations.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在将文件写入S3时，`boto3`甚至没有提供一个*开箱即用*的方法来执行这些操作。
- en: For example, if we wanted to create a new `parquet` file using `boto3`, we would
    first need to persist the object on the local disk (*using* `to_parquet()` *method
    from* `pandas`) and then upload it to S3 using the `upload_fileobj()` method.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想用`boto3`创建一个新的`parquet`文件，我们首先需要将对象保存到本地磁盘（*使用*`pandas`的`to_parquet()`
    *方法*），然后使用`upload_fileobj()`方法将其上传到S3。
- en: 'Differently from `upload_file()` (*explored at point 4*) the `upload_fileobj()`
    method [is a managed transfer which will perform a multipart upload in multiple
    threads, if necessary](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3/client/upload_fileobj.html):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 与`upload_file()`（*在第4点中探讨*）不同，`upload_fileobj()`方法 [是一种托管传输，将在必要时在多个线程中执行分块上传](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3/client/upload_fileobj.html)：
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: On the other hand, one of the main advantages of the `awswrangler` library (*while
    working with* `pandas`) , is that it can be used to write objects directly to
    the S3 bucket (*without saving them to the local disk*) that is both elegant and
    efficient.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`awswrangler`库的主要优点之一（*在与`pandas`一起使用时*）是它可以直接将对象写入S3桶（*而无需将其保存到本地磁盘*），这既优雅又高效。
- en: 'Moreover, `awswrangler` [offers great flexibility](https://aws-sdk-pandas.readthedocs.io/en/stable/stubs/awswrangler.s3.to_parquet.html)
    allowing users to:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`awswrangler` [提供了极大的灵活性](https://aws-sdk-pandas.readthedocs.io/en/stable/stubs/awswrangler.s3.to_parquet.html)，允许用户：
- en: Apply specific compression algorithms like `snappy` , `gzip` and `zstd`;
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用特定的压缩算法，如`snappy`、`gzip`和`zstd`；
- en: '`append` to or `overwrite` existing files via the `mode` parameter when `dataset
    = True`;'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`mode`参数在`dataset = True`时`append`到或`overwrite`现有文件；
- en: Specify one or more partitions columns via the `partitions_col` parameter.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`partitions_col`参数指定一个或多个分区列。
- en: '[PRE11]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once executed, the code above writes `account_balances_june2023` as a single
    `parquet` file, and `account_balances_july2023` as a folder with four files already
    partitioned by `COMPANY_CODE`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行，上述代码将`account_balances_june2023`写入为一个单独的`parquet`文件，并将`account_balances_july2023`写入为一个包含四个文件的文件夹，这些文件已按`COMPANY_CODE`分区：
- en: '![](../Images/4fe7aa19b30f332c68d9ab13229d7009.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4fe7aa19b30f332c68d9ab13229d7009.png)'
- en: Comparison → AWSWrangler Wins
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较 → AWSWrangler获胜
- en: If working with `pandas` is an option, `awswrangler` offers a much more advanced
    set of operations while writing files to S3, particularly when compared to `boto3`
    that in this case, is not exactly the best tool for the job.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用`pandas`是一个选项，`awswrangler`在将文件写入S3时提供了更高级的操作集，特别是与`boto3`相比，在这种情况下，`boto3`并不是最好的工具。
- en: 7.1 R**eading Objects (Python)**
  id: totrans-127
  prefs:
  - PREF_H2
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.1 读取对象（Python）
- en: 'As similar reasoning applies while trying to read objects from S3 using `boto3`:
    since this library does not offer a built in read method, the best option we have
    is to perform an API call (`get_object()`), read the `Body` of the `response`
    and then pass the `parquet_object` to `pandas`.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试使用`boto3`从S3读取对象时，同样的推理适用：由于该库没有内置的读取方法，我们能做的最佳选择是执行API调用（`get_object()`），读取`response`的`Body`，然后将`parquet_object`传递给`pandas`。
- en: Note that `pd.read_parquet()` method expects a *file-like* object as input,
    which is why we need to pass the content read from the `parquet_object` as a binary
    stream.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`pd.read_parquet()`方法期望一个*类文件*对象作为输入，这就是为什么我们需要将从`parquet_object`读取的内容作为二进制流传递。
- en: 'Indeed, by using `io.BytesIO()` we create a temporary *file-like* object in
    memory, avoiding the need to save the Parquet file locally before reading it.
    This is in turn improves performance, especially when working with large files:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，通过使用`io.BytesIO()`，我们在内存中创建了一个临时的*类文件*对象，从而避免了在读取之前将Parquet文件保存到本地。这反过来提高了性能，特别是在处理大型文件时：
- en: '[PRE12]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As expected, `awswrangler` instead excels at reading objects from S3, returning
    a `pandas` df as an output.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，`awswrangler` 在读取 S3 对象方面表现出色，返回一个 `pandas` df 作为输出。
- en: 'It supports a number of input formats like `csv`, `json`, `parquet` and more
    recently `delta` tables. Also passing the `chunked` parameter allows to read objects
    in a *memory-friendly* way:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 它支持多种输入格式，如 `csv`、`json`、`parquet` 和最近的 `delta` 表。此外，传递 `chunked` 参数可以以 *内存友好的*
    方式读取对象：
- en: '[PRE13]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Executing the code above returns a `pandas` df with May data:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述代码会返回一个包含 5 月数据的 `pandas` df：
- en: '![](../Images/346c3221bd25425a5fdb305a0bc46311.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/346c3221bd25425a5fdb305a0bc46311.png)'
- en: Comparison → AWSWrangler Wins
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较 → AWSWrangler 胜出
- en: Yes, there are ways around the lack of proper methods in `boto3.` However, `awswrangler`
    is a library conceived to read S3 objects efficiently, hence it also wins this
    challenge.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，有办法绕过 `boto3` 中缺乏适当方法的问题。然而，`awswrangler` 是一个旨在高效读取 S3 对象的库，因此它也赢得了这个挑战。
- en: 7.2 Reading Objects (SQL)
  id: totrans-139
  prefs:
  - PREF_H2
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.2 读取对象（SQL）
- en: The ones that managed to read until this point deserve a bonus and that bonus
    is reading objects from S3 using plain SQL.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 读到这里的读者值得一个奖励，那就是使用纯 SQL 从 S3 读取对象。
- en: 'Let’s suppose we wished to fetch data from the `account_balances_may2023.parquet`
    object using the `query` below (*that filters data by* `AS_OF_DATE`):'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们希望使用下面的 `query` 从 `account_balances_may2023.parquet` 对象中获取数据（*通过* `AS_OF_DATE`
    *进行数据过滤*）：
- en: '[PRE14]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In `boto3` this can be achieved via the `select_object_content()` method. Note
    how we should also specify the `inputSerialization` and `OutputSerialization`
    formats:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `boto3` 中，可以通过 `select_object_content()` 方法实现。注意，我们还需要指定 `inputSerialization`
    和 `OutputSerialization` 格式：
- en: '[PRE15]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If working with `pandas` df is an option, `awswrangler` also offers a very
    handy `select_query()` method that requires minimal code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用 `pandas` df 是一个选项，那么 `awswrangler` 还提供了一个非常方便的 `select_query()` 方法，只需最少的代码：
- en: '[PRE16]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'For both libraries, the returned df will look like this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这两个库，返回的 df 将如下所示：
- en: '![](../Images/346c3221bd25425a5fdb305a0bc46311.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/346c3221bd25425a5fdb305a0bc46311.png)'
- en: Conclusion
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this tutorial we explored **7 common operations** that can be performed on
    S3 buckets and run a comparative analysis between `boto3` and `awswrangler` libraries.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们探讨了 **7 种常见操作**，这些操作可以在 S3 存储桶上执行，并对 `boto3` 和 `awswrangler` 库进行了比较分析。
- en: Both approaches allow us to interact with S3 buckets, however the main difference
    is that the `boto3` client provides low-level access to AWS services, while `awswrangler`
    offers a simplified and more high-level interface for various data engineering
    tasks.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 两种方法都允许我们与 S3 存储桶进行交互，但主要区别在于 `boto3` 客户端提供了对 AWS 服务的低级访问，而 `awswrangler` 提供了一个简化的、更高级的数据工程任务接口。
- en: Overall, `awswrangler` is our winner with 3 points (*checking objects existence*,
    *write objects*, *read objects*) vs 2 points scored by `boto3` (*listing object*,
    *deleting objects*). Both the *upload/download objects* categories were draws
    and did not assign points.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，`awswrangler` 以 3 分（*检查对象是否存在*、*写入对象*、*读取对象*）战胜了 `boto3` 的 2 分（*列出对象*、*删除对象*）。*上传/下载对象*
    类别平局，因此没有得分。
- en: Despite the result above, the truth is that both libraries give their best when
    used interchangeably, to excel in the tasks they have been built for.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管结果如上，但事实是这两个库在可以互换使用时表现最佳，能够在它们所设计的任务中表现出色。
- en: Sources
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源
- en: '[AWS Wrangler Documentation](https://aws-sdk-pandas.readthedocs.io/en/stable/index.html)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[AWS Wrangler 文档](https://aws-sdk-pandas.readthedocs.io/en/stable/index.html)'
- en: '[Boto3 S3 Client Documentation](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html)'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Boto3 S3 客户端文档](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html)'
- en: '*All images, unless otherwise noted, are by the author.*'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，所有图片均由作者提供。*'
