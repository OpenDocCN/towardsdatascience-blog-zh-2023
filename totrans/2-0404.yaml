- en: 'Boto3 vs AWS Wrangler: Simplifying S3 Operations with Python'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/boto3-vs-aws-wrangler-simplifying-s3-operations-with-python-596bdf021ef2](https://towardsdatascience.com/boto3-vs-aws-wrangler-simplifying-s3-operations-with-python-596bdf021ef2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A comparative analysis for AWS S3 development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://anbento4.medium.com/?source=post_page-----596bdf021ef2--------------------------------)[![Antonello
    Benedetto](../Images/bf802bb46dce03dd3bd4e17c1dffe5b7.png)](https://anbento4.medium.com/?source=post_page-----596bdf021ef2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----596bdf021ef2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----596bdf021ef2--------------------------------)
    [Antonello Benedetto](https://anbento4.medium.com/?source=post_page-----596bdf021ef2--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----596bdf021ef2--------------------------------)
    ·10 min read·Jun 20, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1fda6e713968eca65e7b3b2f71cd45b3.png)'
  prefs: []
  type: TYPE_IMG
- en: Picture by [Hemerson Coelho](https://unsplash.com/photos/_HFP0eMwYWY) on [Unsplash](https://unsplash.com/)
  prefs: []
  type: TYPE_NORMAL
- en: On-Demand Courses | Recommended
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*A few of my readers have contacted me asking for on-demand courses to help
    you* ***BECOME*** *a solid* ***Data Engineer****. These are 3 great resources
    I would recommend:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Data Engineering Nano-Degree (UDACITY)**](https://imp.i115008.net/zaX10r)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Data Streaming With Apache Kafka & Apache Spark Nano-Degree** **(UDACITY)**](https://imp.i115008.net/zaX10r)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Spark And Python For Big Data With PySpark (UDEMY)**](https://click.linksynergy.com/deeplink?id=533LxfDBSaM&mid=39197&murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fspark-and-python-for-big-data-with-pyspark%2F)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Not a Medium member yet?*** *Consider signing up with my* [*referral link*](https://anbento4.medium.com/membership)
    *to gain access to everything Medium has to offer for as little as $5 a month!*'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this tutorial, we will delve into the world of AWS S3 development with Python
    by exploring and comparing two powerful libraries: `boto3` and `awswrangler`.'
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve ever wondered
  prefs: []
  type: TYPE_NORMAL
- en: “What is the best Python tool to interact with AWS S3 Buckets? “
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “How to perform S3 operations in the most efficient way?”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: then you’ve come to the right place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Indeed, throughout this post, we will cover a range of common operations essential
    for working with AWS S3 buckets among which:'
  prefs: []
  type: TYPE_NORMAL
- en: '**listing objects**,'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**checking object existence**,'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**downloading objects**,'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**uploading objects**,'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**deleting objects**,'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**writing objects**,'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**reading objects (standard way or with SQL)**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By comparing the two libraries, we will identify their similarities, differences,
    and optimal use cases for each operations. By the end, you will have a clear understanding
    of which library is better suited for specific S3 tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, for those who read to the very bottom, we will also explore how
    to leverage `boto3` and `awswrangler` to read data from S3 using friendly SQL
    queries.
  prefs: []
  type: TYPE_NORMAL
- en: So let’s dive in and discover the best tools for interacting with AWS S3 and
    learn how to perform these operations efficiently with Python using both libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites & Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The package versions used in this tutorial are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`boto3==1.26.80`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`awswrangler==2.19.0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also, three initial files including [randomly generated](https://github.com/anbento0490/projects/blob/main/boto3_vs_awswrangler/generator.py)
    `account_balances` data have been uploaded to an S3 bucket named `coding-tutorials`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eac70331fc5658f0f3fa3623ce13edad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Despite you should be aware that a number of ways exists to establish a connection
    to a S3 bucket, in this case, we are going to use the `setup_default_session()`
    from `boto3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This method is handy as, once the session has been set, it can be shared by
    both `boto3` and `awswrangler`, meaning that we won’t need to pass any more secrets
    down the road
  prefs: []
  type: TYPE_NORMAL
- en: Comparative Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let’s compare `boto3` and `awswrangler` while performing a number of common
    operations and find what’s the best tool for the job.
  prefs: []
  type: TYPE_NORMAL
- en: The full notebook including the code that follows can be found in [this GitHub
    folder](https://github.com/anbento0490/projects/blob/main/boto3_vs_awswrangler/AWS%20Wrangler%20vs%20Boto3.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: 1 Listing Objects
  prefs:
  - PREF_H2
  - PREF_H1
  type: TYPE_NORMAL
- en: Listing objects, is probably the first operation we should perform while exploring
    a new S3 bucket and is a simple way to check whether a session has been correctly
    set.
  prefs: []
  type: TYPE_NORMAL
- en: 'With `boto3` objects can be listed using:'
  prefs: []
  type: TYPE_NORMAL
- en: '`boto3.client(''s3'').list_objects()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`boto3.resource(''s3'').Bucket().objects.all()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Despite both `client` and `resource` classes do a decent job, the `client` class
    should be preferred, as it is more elegant and provides a large number of [*easily
    accessible*] low-level metadata as a nested `JSON` ( among which the object `size`).
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, `awswrangler` only provides a single method to list objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wr.s3.list_objects()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Being a high-level method, this does not return any *low-level* metadata about
    the object, such that to find the file `size` we need to call:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wr.s3.size_objects`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The code above returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b259fee732a14f6ccdf543fea958c5f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparison → Boto3 Wins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Despite `awswrangler` is more straightforward to use, `boto3` wins the challenge,
    while listing S3 objects. In fact, its low-level implementation, means that many
    more objects metadata can be retrieved using one of its classes. Such information
    is extremely useful while accessing S3 bucket in a programmatic way.
  prefs: []
  type: TYPE_NORMAL
- en: 2 Checking Object Existence
  prefs:
  - PREF_H2
  - PREF_H1
  type: TYPE_NORMAL
- en: The ability to check objects existence is required when we wish for additional
    operations to be triggered as a result of an object being already available in
    S3 or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'With `boto3` such checks can be performed using:'
  prefs: []
  type: TYPE_NORMAL
- en: '`boto3.client(''s3'').head_object()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead `awswrangler` provides the dedicated method:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wr.s3.does_object_exist()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The code above returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2b2d923348a660095d648fb820dc32a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparison → AWSWrangler Wins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s admit it: `boto3` method name [`head_object()`] is not that intuitive.'
  prefs: []
  type: TYPE_NORMAL
- en: Also having a dedicated method is undoubtedly and advantage of `awswrangler`
    that wins this match.
  prefs: []
  type: TYPE_NORMAL
- en: 3 D**ownloading Objects**
  prefs:
  - PREF_H2
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Downloading objects in local is extremely simple with both `boto3` and `awswrangler`
    using the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`boto3.client(''s3'').download_file()` or'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wr.s3.download()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The only difference is that `download_file()` takes `bucket` , `object_key`
    and `local_file` as input variables, whereas `download()` only requires the S3
    `path` and `local_file` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When the code is executed, both versions of the same object are indeed downloaded
    in local inside the `tmp/` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d07ddbee8ae0200a1039f92f3451c4c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparison → Draw
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can consider both libraries being equivalent as long as downloading files
    is concerned, therefore let’s call it a draw.
  prefs: []
  type: TYPE_NORMAL
- en: 4 U**ploading Objects**
  prefs:
  - PREF_H2
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Same reasoning applies while uploading files from local environment to S3\.
    The methods that can be employed are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`boto3.client(''s3'').upload_file()` or'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wr.s3.upload()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Executing the code, uploads two new `account_balances` objects (*for the months
    of April and May 2023*) to the `coding-tutorials` bucket:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/852f24c0cbdf7fec16c28310039c0cbe.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparison → Draw
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is another draw. So far there’s absolute parity between the two libraries!
  prefs: []
  type: TYPE_NORMAL
- en: 5 D**eleting Objects**
  prefs:
  - PREF_H2
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s now assume we wished to delete the following objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`boto3` allows to delete objects one-by-one or in bulk using the following
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`boto3.client(''s3'').delete_object()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`boto3.client(''s3'').delete_objects()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Both methods return a `response` including `ResponseMetadata` that can be used
    to verify whether objects have been deleted successfully or not. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: while deleting a single object, a `HTTPStatusCode==204` indicates that the operation
    has been completed successfully (*if objects are found in the S3 bucket*);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: while deleting multiple objects, a `Deleted` list is returned with the names
    of successfully deleted items.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, `awswrangler` provides a method that can be used for both
    single and bulk deletions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wr.s3.delete_objects()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since `object_keys` can be recursively passed to the method as a `list_comprehension`
    *-* *instead of being converted to a dictionary first like before -* using this
    syntax is a real pleasure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Executing the code above, deletes the objects in S3 and then returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c88bed5920fc5803a97ae8a076e78e93.png)![](../Images/6b6148a016715ecf59f7a0cb75d2c424.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparison → Boto3 Wins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is tricky one: `awswrangler` has a simpler syntax to use while deleting
    multiple objects, as we can simply pass the full list to the method.'
  prefs: []
  type: TYPE_NORMAL
- en: However `boto3` returns a large number of information in the `response`that
    are extremely useful logs, while deleting objects programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Because in a production environment, low-level metadata is better than almost
    no metadata, `boto3` wins this challenge and now leads 2–1.
  prefs: []
  type: TYPE_NORMAL
- en: 6 W**riting Objects**
  prefs:
  - PREF_H2
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to write files to S3, `boto3` does not even provide an *out-of-the-box*
    method to perform such operations.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we wanted to create a new `parquet` file using `boto3`, we would
    first need to persist the object on the local disk (*using* `to_parquet()` *method
    from* `pandas`) and then upload it to S3 using the `upload_fileobj()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Differently from `upload_file()` (*explored at point 4*) the `upload_fileobj()`
    method [is a managed transfer which will perform a multipart upload in multiple
    threads, if necessary](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3/client/upload_fileobj.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: On the other hand, one of the main advantages of the `awswrangler` library (*while
    working with* `pandas`) , is that it can be used to write objects directly to
    the S3 bucket (*without saving them to the local disk*) that is both elegant and
    efficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moreover, `awswrangler` [offers great flexibility](https://aws-sdk-pandas.readthedocs.io/en/stable/stubs/awswrangler.s3.to_parquet.html)
    allowing users to:'
  prefs: []
  type: TYPE_NORMAL
- en: Apply specific compression algorithms like `snappy` , `gzip` and `zstd`;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`append` to or `overwrite` existing files via the `mode` parameter when `dataset
    = True`;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specify one or more partitions columns via the `partitions_col` parameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Once executed, the code above writes `account_balances_june2023` as a single
    `parquet` file, and `account_balances_july2023` as a folder with four files already
    partitioned by `COMPANY_CODE`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4fe7aa19b30f332c68d9ab13229d7009.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparison → AWSWrangler Wins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If working with `pandas` is an option, `awswrangler` offers a much more advanced
    set of operations while writing files to S3, particularly when compared to `boto3`
    that in this case, is not exactly the best tool for the job.
  prefs: []
  type: TYPE_NORMAL
- en: 7.1 R**eading Objects (Python)**
  prefs:
  - PREF_H2
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As similar reasoning applies while trying to read objects from S3 using `boto3`:
    since this library does not offer a built in read method, the best option we have
    is to perform an API call (`get_object()`), read the `Body` of the `response`
    and then pass the `parquet_object` to `pandas`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that `pd.read_parquet()` method expects a *file-like* object as input,
    which is why we need to pass the content read from the `parquet_object` as a binary
    stream.
  prefs: []
  type: TYPE_NORMAL
- en: 'Indeed, by using `io.BytesIO()` we create a temporary *file-like* object in
    memory, avoiding the need to save the Parquet file locally before reading it.
    This is in turn improves performance, especially when working with large files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As expected, `awswrangler` instead excels at reading objects from S3, returning
    a `pandas` df as an output.
  prefs: []
  type: TYPE_NORMAL
- en: 'It supports a number of input formats like `csv`, `json`, `parquet` and more
    recently `delta` tables. Also passing the `chunked` parameter allows to read objects
    in a *memory-friendly* way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Executing the code above returns a `pandas` df with May data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/346c3221bd25425a5fdb305a0bc46311.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparison → AWSWrangler Wins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yes, there are ways around the lack of proper methods in `boto3.` However, `awswrangler`
    is a library conceived to read S3 objects efficiently, hence it also wins this
    challenge.
  prefs: []
  type: TYPE_NORMAL
- en: 7.2 Reading Objects (SQL)
  prefs:
  - PREF_H2
  - PREF_H1
  type: TYPE_NORMAL
- en: The ones that managed to read until this point deserve a bonus and that bonus
    is reading objects from S3 using plain SQL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s suppose we wished to fetch data from the `account_balances_may2023.parquet`
    object using the `query` below (*that filters data by* `AS_OF_DATE`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In `boto3` this can be achieved via the `select_object_content()` method. Note
    how we should also specify the `inputSerialization` and `OutputSerialization`
    formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If working with `pandas` df is an option, `awswrangler` also offers a very
    handy `select_query()` method that requires minimal code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'For both libraries, the returned df will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/346c3221bd25425a5fdb305a0bc46311.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this tutorial we explored **7 common operations** that can be performed on
    S3 buckets and run a comparative analysis between `boto3` and `awswrangler` libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Both approaches allow us to interact with S3 buckets, however the main difference
    is that the `boto3` client provides low-level access to AWS services, while `awswrangler`
    offers a simplified and more high-level interface for various data engineering
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, `awswrangler` is our winner with 3 points (*checking objects existence*,
    *write objects*, *read objects*) vs 2 points scored by `boto3` (*listing object*,
    *deleting objects*). Both the *upload/download objects* categories were draws
    and did not assign points.
  prefs: []
  type: TYPE_NORMAL
- en: Despite the result above, the truth is that both libraries give their best when
    used interchangeably, to excel in the tasks they have been built for.
  prefs: []
  type: TYPE_NORMAL
- en: Sources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[AWS Wrangler Documentation](https://aws-sdk-pandas.readthedocs.io/en/stable/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Boto3 S3 Client Documentation](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*All images, unless otherwise noted, are by the author.*'
  prefs: []
  type: TYPE_NORMAL
