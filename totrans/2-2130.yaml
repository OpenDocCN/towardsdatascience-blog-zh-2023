- en: 'Towards Being Tool-Agnostic in Data Science: SQL Case When and Pandas Where'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/towards-being-tool-agnostic-in-data-science-sql-case-when-and-pandas-where-f6a3d3cbcafa](https://towardsdatascience.com/towards-being-tool-agnostic-in-data-science-sql-case-when-and-pandas-where-f6a3d3cbcafa)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explained with examples
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://sonery.medium.com/?source=post_page-----f6a3d3cbcafa--------------------------------)[![Soner
    Yıldırım](../Images/c589572e9d1ee176cd4f5a0008173f1b.png)](https://sonery.medium.com/?source=post_page-----f6a3d3cbcafa--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f6a3d3cbcafa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f6a3d3cbcafa--------------------------------)
    [Soner Yıldırım](https://sonery.medium.com/?source=post_page-----f6a3d3cbcafa--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f6a3d3cbcafa--------------------------------)
    ·6 min read·Jul 17, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/886913bc04bb14136595417bda17365c.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: Photo by [Monika Simeonova](https://unsplash.com/@monnysim?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/yUdawywuYm0?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Your customer data is in a SQL database. You’re assigned a task that involves
    retrieving data from some tables, doing some data cleaning and manipulation, and
    writing the results to a different table.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, you don’t know how to do those operations with SQL. No worries!
    You’re great at using Pandas for data cleaning and manipulation. So, you come
    up with a solution, which is:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Retrieve all the data from SQL tables
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the data as CSV files
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read the CSV files into Pandas DataFrames
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform the required data cleaning and manipulation operations
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write the results to a different CSV file
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload the data in the CSV file to a SQL table
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nice plan right?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: If you actually execute this plan, I’m sure your manager will have a talk with
    you, which can be pleasant or unpleasant depending on your manager’s personality.
    In any case, I don’t think you’ll execute this awesome plan anymore after the
    talk.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: I know there are usually many different ways of doing a task in data science.
    You should always aim for the most efficient one because you’ll typically work
    with very large datasets. Making things more complicated than necessary costs
    you extra money and time.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: “I’m great at Pandas so I’ll do everything with Pandas” is not a desired attitude.
    If your task involves reading data from SQL tables and writing results to SQL
    tables, the best way is usually doing the steps in between using SQL.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: SQL is not just a query language. It can be used as a highly efficient data
    analysis and manipulation tool as well.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: I remember writing SQL jobs to do very complex data preprocessing operations
    and they worked just fine.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得编写SQL作业来进行非常复杂的数据预处理操作，它们运行得很好。
- en: Data science is still an evolving field. New tools and concepts are introduced
    in no time. You should not be dependent on a single tool and should always be
    open to learning new ones.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学仍然是一个不断发展的领域。新的工具和概念不断出现。你不应依赖单一工具，应该始终保持学习新工具的开放态度。
- en: Pandas vs SQL
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pandas与SQL
- en: Pandas and SQL have a lot in common in terms of what they’re capable of. Both
    are extremely good at data analysis and manipulation.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas和SQL在能力上有很多相似之处。两者都非常擅长数据分析和处理。
- en: In this article, we’ll go through examples to learn how SQL `CASE WHEN` statement
    and Pandas `where` function can be used for doing the same operation. As a bonus,
    we’ll also learn about NumPy `where` function, which is more flexible than Pandas
    `where` .
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将通过示例学习如何使用SQL `CASE WHEN`语句和Pandas `where`函数来完成相同的操作。作为额外内容，我们还将了解NumPy
    `where`函数，它比Pandas `where`更灵活。
- en: I have the following data stored in a SQL table and a Pandas DataFrame, both
    are named `product_inventory` .
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我在一个SQL表和一个名为`product_inventory`的Pandas DataFrame中存储了以下数据。
- en: '![](../Images/757a12c4e1d2c24775a6c1f504781519.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/757a12c4e1d2c24775a6c1f504781519.png)'
- en: The first 5 rows of the data (image by author)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 数据的前5行（作者提供的图片）
- en: You can download this dataset as a CSV file from my [datasets](https://github.com/SonerYldrm/datasets)
    repo. It’s called `product_inventory.csv` .
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从我的[数据集](https://github.com/SonerYldrm/datasets)库中下载这个数据集。它的名字是`product_inventory.csv`。
- en: The first task
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一个任务
- en: We’ll first create a new column called `has_enough_stock` , which takes the
    value 1 if the stock quantity is more than 500 and 0 otherwise.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个名为`has_enough_stock`的新列，如果库存量大于500则取值1，否则取值0。
- en: 'The SQL version:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: SQL版本：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following part creates the `has_enough_stock` column according to the specified
    condition:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分根据指定条件创建`has_enough_stock`列：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The Pandas version includes the `where` function, which takes a condition and
    replaces values where the condition is false.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas版本包括`where`函数，该函数接受一个条件并在条件为假时替换值。
- en: In order to use it for our task, we first need to create the `has_enough_stock`
    column with all 0s. Then, we’ll change the 0s to 1s where the stock quantity is
    more than 500.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的任务中使用它，我们首先需要创建一个全为0的`has_enough_stock`列。然后，我们将库存量大于500的0更改为1。
- en: Since the `where` function allows for changing values where the condition is
    false, we’ll define the condition as `stock_qty <= 500` (i.e. stock quantity is
    less than or equal to 500). The rows for which this condition evaluates to false
    are the ones with a stock quantity of more than 500.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`where`函数允许在条件为假时更改值，所以我们将条件定义为`stock_qty <= 500`（即库存量小于或等于500）。该条件为假时的行即库存量大于500的行。
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/b1a04f964c78ca7506860275829640c1.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b1a04f964c78ca7506860275829640c1.png)'
- en: The first 5 rows of the product_inventory DataFrame (image by author)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`product_inventory` DataFrame的前5行（作者提供的图片）'
- en: NumPy where function
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy where函数
- en: When using the Pandas `where` function, we need to first create the `has_enough_stock`
    column with all 0s. This is because it only allows for updating values that do
    not fit the given condition.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Pandas `where`函数时，我们需要首先创建一个全为0的`has_enough_stock`列。这是因为它只允许更新不符合给定条件的值。
- en: NumPy `where` function lets you update the values that fit and don’t fit the
    condition so there is no need to initialize the column first.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy `where`函数允许你更新符合和不符合条件的值，因此无需先初始化列。
- en: '![](../Images/dc6761d832f4f6f443e74e774ade5fab.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dc6761d832f4f6f443e74e774ade5fab.png)'
- en: NumPy where function (image by author)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy where函数（作者提供的图片）
- en: 'Here is how we can create the `has_enough_stock` column with NumPy `where`
    function:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何使用NumPy `where`函数创建`has_enough_stock`列的方法：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first parameter is the condition, the second one is the value to be used
    for rows that fit the condition, and the third one is the value for rows that
    don’t fit the condition.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是条件，第二个是符合条件的行所使用的值，第三个是对于不符合条件的行的值。
- en: What if we need more than 2 categories?
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果我们需要多于2个类别怎么办？
- en: The example we did involves creating a column with only 2 values (i.e. categories).
    Let’s also do an example that requires creating more than 2 categories.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做的示例涉及创建一个只有2个值（即类别）的列。我们还将做一个需要创建多个类别的示例。
- en: '*You can become a* [*Medium member*](https://sonery.medium.com/membership)
    *to unlock full access to my writing, plus the rest of Medium. If you already
    are, don’t forget to* [*subscribe*](https://sonery.medium.com/subscribe) *if you’d
    like to get an email whenever I publish a new article.*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以成为* [*Medium 会员*](https://sonery.medium.com/membership) *以解锁对我写作内容的完全访问权限，并获得
    Medium 的其他内容。如果你已经是会员，别忘了* [*订阅*](https://sonery.medium.com/subscribe) *以便在我发布新文章时收到电子邮件。*'
- en: 'We’ll create a new column named `stock_situation` based on the following criteria:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将根据以下标准创建一个名为`stock_situation`的新列：
- en: Stock quantity > 500, “enough”
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库存数量 > 500，“足够”
- en: Stock quantity ≤ 500 and stock quantity > 200, “critical”
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库存数量 ≤ 500 且库存数量 > 200，“紧急”
- en: Stock quantity ≤ 200, “order asap”
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库存数量 ≤ 200，“尽快订购”
- en: The SQL version is quite similar. We’ll just need to add a new line with `WHEN
    condition THEN value` .
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 版本非常相似。我们只需添加一行`WHEN condition THEN value`。
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When it comes to creating this column in a Pandas DataFrame, we need a different
    function, which is the `select` function of NumPy.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Pandas DataFrame 中创建此列时，我们需要一个不同的函数，即 NumPy 的`select`函数。
- en: It can take a set of conditions and allow for assigning a value for each condition
    separately.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以接受一组条件，并允许为每个条件单独分配一个值。
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/ea9d3a4c9371da246c00d093b61ff675.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ea9d3a4c9371da246c00d093b61ff675.png)'
- en: (image by author)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: (图片由作者提供)
- en: The conditions and values are created using Python lists. Then, we just pass
    them to the `select` function as arguments.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 条件和值是使用 Python 列表创建的。然后，我们将它们作为参数传递给`select`函数。
- en: Final words
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结语
- en: The examples we did are not very complex but they support my point of not sticking
    to a particular tool especially when working with large datasets.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做的这些例子并不复杂，但它们支持我的观点，即在处理大数据集时不要拘泥于特定工具。
- en: Spending a few hours to learn a new tool can save you hours in the long run.
    It’ll also save you from doing unnecessary computations and thus spending extra
    money.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 花几个小时学习一个新工具，从长远来看可以节省你更多时间。它还能避免做不必要的计算，从而节省额外的费用。
- en: Thank you for reading. Please let me know if you have any feedback.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你有任何反馈，请告知我。
