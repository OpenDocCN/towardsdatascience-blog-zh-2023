- en: How to Build Popularity-Based Recommenders With Polars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-build-popularity-based-recommenders-with-polars-cc7920ad3f68](https://towardsdatascience.com/how-to-build-popularity-based-recommenders-with-polars-cc7920ad3f68)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[RECOMMENDATION SYSTEM](https://medium.com/tag/recommendation-system)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Basic recommenders that are easy to understand and implement, as well as fast
    to train
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://dr-robert-kuebler.medium.com/?source=post_page-----cc7920ad3f68--------------------------------)[![Dr.
    Robert Kübler](../Images/3b8d8b88f76c0c43d9c305e3885e7ab9.png)](https://dr-robert-kuebler.medium.com/?source=post_page-----cc7920ad3f68--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cc7920ad3f68--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cc7920ad3f68--------------------------------)
    [Dr. Robert Kübler](https://dr-robert-kuebler.medium.com/?source=post_page-----cc7920ad3f68--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cc7920ad3f68--------------------------------)
    ·6 min read·Apr 28, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/86cf3808c7ceac75c67a41bd0c28464e.png)'
  prefs: []
  type: TYPE_IMG
- en: Created by me on [dreamstudio.ai](https://beta.dreamstudio.ai/).
  prefs: []
  type: TYPE_NORMAL
- en: Recommender systems are algorithms designed to provide user recommendations
    based on their past behavior, preferences, and interactions. Becoming integral
    to various industries, including e-commerce, entertainment, and advertising, recommender
    systems improve user experience, increase customer retention, and drive sales.
  prefs: []
  type: TYPE_NORMAL
- en: 'While various advanced recommender systems exist, today I want to show you
    one of the most straightforward — yet often difficult to beat — recommenders:
    the **popularity-based recommender**. It is an excellent baseline recommender
    that you should always try out in addition to a more advanced model, such as matrix
    factorization.'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/introduction-to-embedding-based-recommender-systems-956faceb1919?source=post_page-----cc7920ad3f68--------------------------------)
    [## Introduction to Embedding-Based Recommender Systems'
  prefs: []
  type: TYPE_NORMAL
- en: Learn to build a simple matrix factorization recommender in TensorFlow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/introduction-to-embedding-based-recommender-systems-956faceb1919?source=post_page-----cc7920ad3f68--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: We will create *two* different flavors of popularity-based recommenders using
    [**polars**](https://pola.rs/) in this article. Don’t worry if you have not used
    the fast pandas-alternative polars before; this article is a great place to learn
    it along the way. Let’s start!
  prefs: []
  type: TYPE_NORMAL
- en: Initial Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Popularity-based recommenders work by suggesting the most frequently purchased
    products to customers. This vague idea can be turned into at least two concrete
    implementations:'
  prefs: []
  type: TYPE_NORMAL
- en: Check which articles are bought most often **across all customers**. Recommend
    these articles to each customer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check which articles are bought most often **per customer**. Recommend these
    per-customer articles to their corresponding customer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will now show how to implement these concretely using our own custom-crated
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to follow along with a real-life dataset, the [H&M Personalized
    Fashion Recommendations](https://www.kaggle.com/competitions/h-and-m-personalized-fashion-recommendations/overview)
    challenge on Kaggle provides you with an excellent example. Due to copyright reasons,
    I will not use this lovely dataset for this article.
  prefs: []
  type: TYPE_NORMAL
- en: The Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will create our own dataset. Make sure to install polars if you haven’t
    done so already:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Then, let us create random data consisting of a **(customer_id, article_id)
    pairs** that you should interpret as “The customer with this ID bought the article
    with that ID.”. We will use 1,000,000 customers that can buy 50,000 products.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e456b6c7e9473d4584b2d1e03e41147f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: This medium-sized dataset has **over 100,000,000 rows (transactions)**, an amount
    you could find in a business context.
  prefs: []
  type: TYPE_NORMAL
- en: The Task
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We now want to build recommender systems that scan this dataset in order to
    recommend *popular* items in some sense. We will shed light on two variants of
    how to interpret this:'
  prefs: []
  type: TYPE_NORMAL
- en: most popular across all customers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: most popular per customer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our recommenders should recommend **ten articles for each customer**.
  prefs: []
  type: TYPE_NORMAL
- en: '***Note:*** *We will* ***not*** *assess the quality of the recommenders here.
    Drop me a message if you are interested in this topic, though, since it’s worth
    having a separate article about this.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Most Popular Across All Customers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recommender, we don’t even care who bought the articles — all the information
    we need is in the **article_id** column alone.
  prefs: []
  type: TYPE_NORMAL
- en: 'High-level, it works like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Count how often each article appears in the column **article_id**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return the ten most frequent products as the recommendation for each customer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Familiar Pandas Version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a gentle start, let us check out how you could do this **in pandas**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: On my machine, this takes about **31 seconds**. This sounds like a little, but
    the dataset still has **only a moderate size**; things get really ugly with larger
    datasets. To be fair, 10 seconds are used for loading the CSV file. Using a better
    format, such as [parquet](https://en.wikipedia.org/wiki/Apache_Parquet), would
    decrease the loading time.
  prefs: []
  type: TYPE_NORMAL
- en: '***Note:*** *I used pandas 2.0.1, which is the latest and most optimized version.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Still, to prepare yet a little bit more for the polars version, let us do the
    pandas version using **method chaining**, a technique I grew to love.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is lovely since you can read from top to bottom what is happening without
    the need for a lot of intermediate variables that people usually struggle to name
    (*df_raw → df_filtered → df_filtered_copy → … → df_final anyone?*). The run time
    is the same, however.
  prefs: []
  type: TYPE_NORMAL
- en: Faster Polars Version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us implement the same logic **in polars** using method chaining as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Things look pretty similar, except for the running time: **3 seconds** instead
    of 31, which is impressive!'
  prefs: []
  type: TYPE_NORMAL
- en: Polars is just SO much faster than pandas.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Unarguably, this is one of the main advantages of polars over pandas. Apart
    from that, polars also has a **convenient syntax for creating complex operations**
    that pandas does not have. We will see more of that when creating the other popularity-based
    recommender.
  prefs: []
  type: TYPE_NORMAL
- en: It is also important to note that pandas and polars produce the same output
    as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Most Popular Per Customer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In contrast to our first recommender, we want to slice the dataframe per customer
    now and get the most popular products for each customer. This means that we need
    the **customer_id** as well as the **article_id** now.
  prefs: []
  type: TYPE_NORMAL
- en: 'We illustrate the logic using a small dataframe consisting of only ten transactions
    from three customers A, B, and C buying four articles 1, 2, 3, and 4\. We want
    to get the **top two articles per customer**. We can achieve this using the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/47520d362d304bb8c76cd9228fe17190.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We start with the original dataframe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then group by **customer_id** and **article_id** and aggregate via a count.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then aggregate again over the **customer_id** and write the **article_id**s
    in a list, just as in our last recommender. The twist is that we **sort this list
    by the count column**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That way, we end up with precisely what we want.
  prefs: []
  type: TYPE_NORMAL
- en: A bought products 1 and 2 most frequently.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: B bought products 4 and 2 most frequently. Products 4 and 1 would have been
    a correct solution as well, but internal orderings just happened to flush product
    2 into the recommendation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C only bought product 3, so that’s all there is.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 3 of this procedure sounds especially difficult, but polars lets us handle
    this conveniently.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**By the way:** This version **runs for about about a minute** on my machine
    already. I did not create a pandas version for this, and I’m definitely scared
    to do so and let it run. If you are brave, give it a try!'
  prefs: []
  type: TYPE_NORMAL
- en: A Small Improvement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, some users might have less than ten recommendations, and some even have
    none. An easy thing to do is pad each customer’s recommendations to ten articles.
    For example,
  prefs: []
  type: TYPE_NORMAL
- en: using random articles, or
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using the most popular articles across all customers from our first popularity-based
    recommender.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can implement the second version like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Popularity-based recommenders hold a significant position in the realm of recommendation
    systems due to their simplicity, ease of implementation, and effectiveness as
    an initial approach and a difficult-to-beat baseline.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we have learned how to transform the simple idea of popularity-based
    recommendations into code using the fabulous polars library.
  prefs: []
  type: TYPE_NORMAL
- en: The main disadvantage, especially of the personalized popularity-based recommender,
    is that the recommendations are **not inspiring** in any way. People have seen
    all of the recommended things before, meaning they are stuck in an extreme echo
    chamber.
  prefs: []
  type: TYPE_NORMAL
- en: 'One way to mitigate this problem *to some extent* is by using other approaches,
    such as collaborative filtering or hybrid approaches, such as here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/a-performant-recommender-system-without-cold-start-problem-69bf2f0f0b9b?source=post_page-----cc7920ad3f68--------------------------------)
    [## A Performant Recommender System Without Cold Start Problem'
  prefs: []
  type: TYPE_NORMAL
- en: When collaboration and content-based recommenders merge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/a-performant-recommender-system-without-cold-start-problem-69bf2f0f0b9b?source=post_page-----cc7920ad3f68--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: I hope that you learned something new, interesting, and valuable today. Thanks
    for reading!
  prefs: []
  type: TYPE_NORMAL
- en: '*If you have any questions, write me on* [*LinkedIn*](https://www.linkedin.com/in/dr-robert-k%C3%BCbler-983859150/)*!*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And if you want to dive deeper into the world of algorithms, give my new publication
    **All About Algorithms** a try! I’m still searching for writers!
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/all-about-algorithms?source=post_page-----cc7920ad3f68--------------------------------)
    [## All About Algorithms'
  prefs: []
  type: TYPE_NORMAL
- en: From intuitive explanations to in-depth analysis, algorithms come to life with
    examples, code, and awesome…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/all-about-algorithms?source=post_page-----cc7920ad3f68--------------------------------)
  prefs: []
  type: TYPE_NORMAL
