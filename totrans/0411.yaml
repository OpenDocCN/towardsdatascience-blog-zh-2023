- en: Bridge the Gap Between Data and Humanity With the Power of This Python Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/bridge-the-gap-between-data-and-humanity-with-the-power-of-this-python-library-553a9f55908b](https://towardsdatascience.com/bridge-the-gap-between-data-and-humanity-with-the-power-of-this-python-library-553a9f55908b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Make your Python outputs more understandable to humans
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://zoumanakeita.medium.com/?source=post_page-----553a9f55908b--------------------------------)[![Zoumana
    Keita](../Images/34a15c1d03687816dbdbc065f5719f80.png)](https://zoumanakeita.medium.com/?source=post_page-----553a9f55908b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----553a9f55908b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----553a9f55908b--------------------------------)
    [Zoumana Keita](https://zoumanakeita.medium.com/?source=post_page-----553a9f55908b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----553a9f55908b--------------------------------)
    ¬∑4 min read¬∑Feb 22, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We don‚Äôt need to rely on any statistics to realize that Python is one of the
    most used programming languages by Software developers, Data Scientists, and more.
    This is not only because of its flexibility, and ease of use, but also the wide
    range of libraries out there that makes our day-to-day tasks easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'This article introduces another powerful library: `humanize.`It helps bridge
    the gap between humans and Python outputs, by making them more understandable.
    Let‚Äôs have a look at some illustrations.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be able to use `humanize` the first step is to install it using the Python
    package manager`pip` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, you need to import the following libraries relevant to successfully perform
    the tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: '`getsize()` from `os` library for getting the size of a given file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datetime` used to work with time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And finally, the `humanize` library, which is the center of this article.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Everything set up to start the exploration, starting with Big numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Make big numbers more readable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is this number 1034503576643 ?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It requires some mental effort to effectively understand whether this number
    is in the range of a billion or a trillion. This is the type of burden that `humanizer`
    tries to soften by providing the user with a nicer output.
  prefs: []
  type: TYPE_NORMAL
- en: 'One way of doing it is separating it using the correct comma `**'',''**` and
    this is done using the `intcomma` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The output of the code above is ***1,034,503,576,643***, which is way better
    that the original number without a separator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, the result can be generated in natural language format using the
    `intword` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the following result: `1.0 trillion.`'
  prefs: []
  type: TYPE_NORMAL
- en: Working with DateTime
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 2022/9/6 (YYYY/MM/DD format) is Sep 06 2022
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The second format (Sep 6 2022) is much easier for anyone to understand than
    the first YYYY/MM/DD format because it lies in our day-to-day verbal communication
    as human beings. Such a result can be obtained using the `naturaldate` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This generates the following result: `Sep 06 2022.`'
  prefs: []
  type: TYPE_NORMAL
- en: Instead of using `naturaldate`, the result can be limited to the month and the
    date using the `naturalday` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The result is `Sep 06`
  prefs: []
  type: TYPE_NORMAL
- en: Working with duration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to DateTime, it is also possible to make duration human-readable by
    using the `naturaltime` function as illustrated below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The previous code generates `3 days ago` which anyone can understand.
  prefs: []
  type: TYPE_NORMAL
- en: Get the size and unit of files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: My file size is 278.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The most obvious question from this statement is
  prefs: []
  type: TYPE_NORMAL
- en: What unit are you using? Bytes, KiloBytes, Megabytes, Gigabytes, Terabytes?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This mystery can be solved using the `naturalsize` function as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: First, get the size of the `CSV` file using the `getsize` function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then the `naturalsize`function is used to generate a more appropriate output.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The result before humanization is 278.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After humanization, we get **278 Bytes**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scientific notation and fractions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The scientific notation of a given number can be more useful in some scenarios,
    like when using `power of the ten` notations. This can be achieved using the `scientific`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: With the `precision` parameter, the user can specify the number of precision
    values to consider after the decimals. When not specified, the precision value
    is 2.
  prefs: []
  type: TYPE_NORMAL
- en: Below is an illustration.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The outputs are given in the same order of the `print` statements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the default function: 2.30 x 10‚Å∂'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With the `precision` parameter: 2.30436 x 10‚Å∂'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What do you think is the fractional representation of 0.4646?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Save yourself from too much mathematical computation and just use the `fractional`function
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The answer is 105/226\. That‚Äôs really cool, isn‚Äôt it!
  prefs: []
  type: TYPE_NORMAL
- en: What if I am dealing with another language
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the previous results are in English. The same could be achieved in other
    languages such as French, Russian, and more.
  prefs: []
  type: TYPE_NORMAL
- en: The first step to reach that is to activate internationalization (`i18n`) feature
    using the `i18n.activate` function.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, it is possible to create a time delta object with a duration of
    3 seconds, but this time in `French`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The result is `il y a 3 secondes` which means `3 seconds ago` in English.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thank you for reading! üéâ üçæ
  prefs: []
  type: TYPE_NORMAL
- en: I hope you found this article helpful!
  prefs: []
  type: TYPE_NORMAL
- en: Also, If you like reading my stories and wish to support my writing, consider
    [becoming a Medium member](https://zoumanakeita.medium.com/membership). With a
    $ 5-a-month commitment, you unlock unlimited access to stories on Medium.
  prefs: []
  type: TYPE_NORMAL
- en: Would you like to buy me a coffee ‚òïÔ∏è? ‚Üí [Here you go](http://www.buymeacoffee.com/zoumanakeig)!
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to follow me on [Medium](https://zoumanakeita.medium.com/), [Twitter](https://twitter.com/zoumana_keita_),
    and [YouTube](https://www.youtube.com/channel/UC9xKdy8cz6ZuJU5FTNtM_pQ), or say
    Hi on [LinkedIn](https://www.linkedin.com/in/zoumana-keita/). It is always a pleasure
    to discuss AI, ML, Data Science, NLP, and MLOps stuff!
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you leave find the last two parts of this series below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Pandas & Python Tricks for Data Science & Data Analysis ‚Äî Part 1](https://medium.com/towards-data-science/pandas-and-python-tips-and-tricks-for-data-science-and-data-analysis-1b1e05b7d93a)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Pandas & Python Tricks for Data Science & Data Analysis ‚Äî Part 2](https://medium.com/towards-data-science/pandas-python-tricks-for-data-science-data-analysis-part-2-dc36460de90d)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Pandas & Python Tricks for Data Science & Data Analysis ‚Äî Part 3](/pandas-python-tricks-for-data-science-data-analysis-part-3-462d0e952925)'
  prefs: []
  type: TYPE_NORMAL
