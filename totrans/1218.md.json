["```py\ndef predict(X, w, b):\n    z = np.dot(X, w)\n    y_hat = sigmoid(z)\n    y_pred = np.zeros((y_hat.shape[0], 1))\n\n    for i in range(y_hat.shape[0]):\n        if y_hat[i, 0] < 0.5:\n            y_pred[i, 0] = 0\n        else:\n            y_pred[i, 0] = 1\n    return y_pred\n```", "```py\nfrom typing import Callable\nimport time\n\nimport numpy as np\nimport numexpr as ne\nimport matplotlib.pyplot as plt\n\nrng = np.random.default_rng(seed=4000)\n\ndef generate_ndarray(rows: int) -> np.ndarray:\n    result_array = rng.random((rows, 1))\n    return result_array\n```", "```py\nIn:  arr = generate_ndarray(200)\n     print(f\"The dimension of this array: {arr.ndim}\")\n     print(f\"The shape of this array: {arr.shape}\")\n\nOut: The dimension of this array: 2\n     The shape of this array: (200, 1)\n```", "```py\ndef numexpr_to_binary(np_array: np.ndarray) -> np.ndarray:\n    temp = np_array[:, 0]\n    temp = ne.evaluate(\"where(temp<0.5, 0, 1)\")\n    return temp[:, np.newaxis]\n```", "```py\narr = generate_ndarray(10)\nresult = numexpr_to_binary(arr)\n\nmapping = np.column_stack((arr, result))\nmapping\n```", "```py\ndef numexpr_example(rows: int) -> np.ndarray:\n    orig_arr = generate_ndarray(rows)\n    the_result = numexpr_to_binary(orig_arr)\n    return the_result\n```", "```py\ndef for_loop_example(rows: int) -> np.ndarray:\n    the_arr = generate_ndarray(rows)\n    for i in range(the_arr.shape[0]):\n        if the_arr[i][0] < 0.5:\n            the_arr[i][0] = 0\n        else:\n            the_arr[i][0] = 1\n    return the_arr\n```", "```py\ndef time_method(method: Callable):\n    time_dict = dict()\n    for i in range(9):\n        begin = time.perf_counter()\n        rows = 10 ** i\n        method(rows)\n        end = time.perf_counter()\n        time_dict[i] = end - begin\n    return time_dict\n```", "```py\nt_m = time_method(for_loop_example)\nt_m_2 = time_method(numexpr_example)\nplt.plot(t_m.keys(), t_m.values(), c=\"red\", linestyle=\"solid\")\nplt.plot(t_m_2.keys(), t_m_2.values(), c=\"green\", linestyle=\"dashed\")\nplt.legend([\"for loop\", \"numexpr\"])\nplt.xlabel(\"exponent\")\nplt.ylabel(\"time\")\nplt.show()\n```"]