- en: Solve the Mystery of the Serrated COVID Chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/solve-the-mystery-of-the-serrated-covid-chart-b0b517b224ef](https://towardsdatascience.com/solve-the-mystery-of-the-serrated-covid-chart-b0b517b224ef)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Downsample data to the proper resolution with pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@lee_vaughan?source=post_page-----b0b517b224ef--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----b0b517b224ef--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b0b517b224ef--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b0b517b224ef--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----b0b517b224ef--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b0b517b224ef--------------------------------)
    ·7 min read·Sep 12, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1640a51c93747c35858a5ab009a0dbde.png)'
  prefs: []
  type: TYPE_IMG
- en: DreamShaper_v7_A_computer_monitor_displaying_a_chart_with_a_jagged_blue_line
    (by author & Leonardo AI)
  prefs: []
  type: TYPE_NORMAL
- en: In the first year of the COVID-19 pandemic, the mortality toll of the disease
    was the subject of much controversy. Among the issues were early underestimation
    due to a lack of testing, mortalities going unrecorded outside of hospitals, and
    distinguishing deaths *of* COVID-19 from deaths *with* COVID-19 [1][2].
  prefs: []
  type: TYPE_NORMAL
- en: On top of everything, and to everyone’s great misfortune, the pandemic quickly
    became politicized. Partisan pundits leaped on every piece of data, looking for
    ways they could twist it to their advantage. Confirmation bias ran rampant. If
    you were on social media at the time, you probably saw posts that challenged the
    veracity of official charts and graphs.
  prefs: []
  type: TYPE_NORMAL
- en: In this *Quick Success Data Science* project, we’ll look at a particular chart
    that showed up on my Facebook wall at the time. The chart records US COVID-19
    mortalities for the first year of the pandemic, and it displays a distinctly serrated
    or “sawtooth” nature.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6f7d201b6f793aed44e26c2b38b1f820.png)'
  prefs: []
  type: TYPE_IMG
- en: US COVID-19 mortalities for the first year of the pandemic (by author from “The
    COVID Tracking Project” at The Atlantic [3])
  prefs: []
  type: TYPE_NORMAL
- en: The curve oscillations have a high frequency, and it’s doubtful that the disease
    progressed in this manner. While some considered this proof that COVID mortality
    counts were clearly wrong and could not be trusted, those of us blessed with data
    science skills quickly made short work of this overblown mystery.
  prefs: []
  type: TYPE_NORMAL
- en: The Dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The data we’ll use was collected as part of “[The COVID Tracking Project](https://covidtracking.com/)”
    at *The Atlantic* [3]. It includes COVID-19 statistics from March 3, 2020, to
    March 7, 2021\. To reduce the size of the dataset, I’ve downloaded the data for
    just the state of Texas and saved it as a CSV file in this [Gist](https://gist.github.com/rlvaugh/fa0491043140f68864625a515430c94d).
  prefs: []
  type: TYPE_NORMAL
- en: You can find the original dataset [here](https://covidtracking.com/data/state/texas)
    and the license for the data [here](https://covidtracking.com/about-data/license).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides Python, we’ll need the pandas library. You can install it using either:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conda install pandas`'
  prefs: []
  type: TYPE_NORMAL
- en: or
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install pandas`'
  prefs: []
  type: TYPE_NORMAL
- en: A nice thing about pandas is that it ships with built-in functionality for making
    plots and working with *time series*, which are data points indexed in chronological
    order. Both Python and pandas treat dates and times as special objects that are
    “aware” of the mechanics of the Gregorian calendar, the sexagesimal (base 60)
    time system, time zones, daylight-saving time, leap years, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Native Python supports time series through its `[datetime](https://docs.python.org/3/library/datetime.html)`
    module. Pandas' [datetime capability](https://pandas.pydata.org/docs/user_guide/timeseries.html)
    is based on the NumPy `datetime64` and `timedelta64` data types. By converting
    "string" dates into "real" dates, we can do useful things like extract the days
    of the week or average the data over weeks or months.
  prefs: []
  type: TYPE_NORMAL
- en: The Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following code was written in JupyterLab and is described by cell.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries and Loading the Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After importing pandas, we load the CSV file into a DataFrame, keeping only
    the columns for “date” and “mortalities.” We then convert the “date” column to
    datetime using the pandas’ `to_datetime()` method, sort it, and set it as the
    DataFrame's index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fa271d8e465c39dc42abaa01e7fb7b18.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting the Initial Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pandas’ plotting capability is limited but it’s fine for data exploration and
    “quick look” analyses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4a75d11c4126bee6e1d8c93111b16146.png)'
  prefs: []
  type: TYPE_IMG
- en: The initial Texas dataset (image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: This chart presents the same “choppiness” as the national data. It also includes
    a sharp spike around the end of July. Let’s look at this spike before investigating
    the oscillations.
  prefs: []
  type: TYPE_NORMAL
- en: Handling the Spike
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because the spike is clearly a *maximum* value, we can easily retrieve its value
    and corresponding date index by using the `max()` and `idxmax()` methods, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4bbb2e1fb0f83f6d33b439034387f7d9.png)'
  prefs: []
  type: TYPE_IMG
- en: This is most likely an anomalous value, especially given that the [Center for
    Disease Control](https://covid.cdc.gov/covid-data-tracker/#trends_dailydeaths/)
    (CDC) records only 239 deaths on this date, which is more consistent with the
    adjacent data. Let’s use the CDC value going forward. To change the DataFrame,
    we’ll apply the `.loc` indexer and pass it the date and column name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/329295b22972739d27b71f957ce9512d.png)'
  prefs: []
  type: TYPE_IMG
- en: The Texas data with the spike repaired (image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: That looks better. Now let’s evaluate the serrated nature of the curve. Visually,
    there appear to be about 4–5 oscillations every month, suggesting a *weekly* frequency.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the Weekly Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To investigate this in more detail, we’ll plot a random subset of the data by
    weekday. We’ll start by making a copy of our DataFrame, named “df_weekdays,” and
    add a column for weekdays. We’ll then plot about two weeks of data, over the (arbitrary)
    index range 103–120.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9181cf1813ecc8915a25900e3f707af9.png)'
  prefs: []
  type: TYPE_IMG
- en: A subset of the Texas data plotted by weekday (image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: The counts appear to drop during and after the weekends. Let’s investigate this
    further using a tabular format. We’ll look at a 3-week interval and highlight
    Mondays in the printout.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8bca768bac6d28521dffcf9f7f73f419.png)'
  prefs: []
  type: TYPE_IMG
- en: The lowest reported number of deaths consistently occurs on a Monday, and the
    Sunday results also appear suppressed. This suggests a *reporting* issue over
    the weekend.
  prefs: []
  type: TYPE_NORMAL
- en: Indeed, this issue was [confirmed](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7363007/)
    by researchers at the Albert Einstein College of Medicine and Johns Hopkins School
    of Public Health [4]. They found that the oscillations only appear in datasets
    where the date of mortality reflects the *reporting* date. In datasets *backdated*
    to the *episode* date, the oscillations are absent.
  prefs: []
  type: TYPE_NORMAL
- en: Downsampling from Days to Weeks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because of the reporting issues, the proper resolution for this data is *weekly*,
    rather than *daily*. In order to plot the data with a weekly interval, we need
    to *downsample* from a higher frequency to a lower frequency, using pandas’ `resample()`
    method. Because multiple samples must be combined into one, the `resample()` method
    is usually chained to a method for *aggregating* the data, as listed in the following
    figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c2f88b93cb678960948b354209176a7f.png)'
  prefs: []
  type: TYPE_IMG
- en: Useful aggregation methods in pandas (from “*Python Tools for Scientists”* [5])
  prefs: []
  type: TYPE_NORMAL
- en: Again, because the reporting issue affects *daily* counts but is corrected on
    a *weekly* basis, downsampling the data from daily to weekly should merge the
    low and high reports and smooth the curve. We’ll do this by passing the `resample()`
    method `W` and chaining the `sum()` aggregation method to sum the daily values.
    Besides `W`, other useful time series frequencies are shown in the table below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e559688f0c3179bed1f5d2fc90ea46f4.png)'
  prefs: []
  type: TYPE_IMG
- en: Useful pandas time series frequencies (from “Python Tools for Scientists” [5])
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7f7fe1284144c7891f352e32c6a1d69f.png)'
  prefs: []
  type: TYPE_IMG
- en: The Texas data resampled to a weekly frequency (image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: With the reporting bias “folded” into the new downsampled time series, the curve
    looks smoother, as we would expect.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we applied data science techniques to explain the strange,
    serrated nature of a historic COVID-19 mortality chart. These oscillations were
    used by some to question the veracity of the mortality data.
  prefs: []
  type: TYPE_NORMAL
- en: We found that the oscillations appeared to reflect the weekly tempo of reporting,
    pointing to biased practices in case reporting. Operational explanations like
    this should be considered prior to suggesting other mechanisms, such as the quality
    of hospital care over weekends or government tampering with reports.
  prefs: []
  type: TYPE_NORMAL
- en: We completed this project using pandas, Python’s primary data analysis package.
    Pandas is ideal for “quick look” analyses like this. Besides its spreadsheet-like
    capabilities, it includes built-in tools for plotting and for working with dates.
  prefs: []
  type: TYPE_NORMAL
- en: The process we used was simple, but that’s the point. It can take more effort
    to weave a conspiracy theory than to debunk one. My experiences in the corporate
    world were similar. We would sometimes argue for 3 weeks over whether to perform
    a task that would take 3 hours to complete if someone just sat down and did it!
  prefs: []
  type: TYPE_NORMAL
- en: Thanks!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for reading and follow me for more *Quick Success Data Science* projects
    in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Citations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lang, Katherine, March 11, 2022, [Are we overcounting COVID-19 deaths? (medicalnewstoday.com)](https://www.medicalnewstoday.com/articles/how-are-covid-19-deaths-counted-and-what-does-this-mean).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fichera, Angelo, April 2, 2021, [Flawed Report Fuels Erroneous Claims About
    COVID-19 Death Toll — FactCheck.org](https://www.factcheck.org/2021/04/scicheck-flawed-study-fuels-erroneous-claims-about-covid-19-death-toll/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The COVID Tracking Project at *The Atlantic*](https://covidtracking.com/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bergman, A., Sella, Y., Agre, P., & Casadevall, A. (2020), “Oscillations in
    U.S. COVID-19 Incidence and Mortality Data Reflect Diagnostic and Reporting Factors,”
    MSystems, 5(4), [https://doi.org/10.1128/mSystems.00544-20](https://doi.org/10.1128/mSystems.00544-20)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Vaughan, Lee, 2023, [*Python Tools for Scientists: An Introduction to Using
    Anaconda, JuptyerLab, and Python’s Scientific Libraries*](https://a.co/d/1SfWbGf),
    No Starch Press, San Francisco.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
