- en: Pandas and Python Tricks for Data Science and Data Analysis — Part 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/pandas-python-tricks-for-data-science-data-analysis-part-5-8fc987cd82da](https://towardsdatascience.com/pandas-python-tricks-for-data-science-data-analysis-part-5-8fc987cd82da)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is the fifth part of my Pandas & Python Tricks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://zoumanakeita.medium.com/?source=post_page-----8fc987cd82da--------------------------------)[![Zoumana
    Keita](../Images/34a15c1d03687816dbdbc065f5719f80.png)](https://zoumanakeita.medium.com/?source=post_page-----8fc987cd82da--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8fc987cd82da--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8fc987cd82da--------------------------------)
    [Zoumana Keita](https://zoumanakeita.medium.com/?source=post_page-----8fc987cd82da--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8fc987cd82da--------------------------------)
    ·6 min read·Apr 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2548e37f080486bf1d170b4a3216db00.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Andrew Neel](https://unsplash.com/@andrewtneel) on [Unsplash](https://unsplash.com/photos/cckf4TsHAuw)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A couple of days ago, I shared [some Python and Pandas tricks](https://medium.com/towards-data-science/pandas-python-tricks-for-data-science-data-analysis-part-3-462d0e952925)
    to help Data Analysts and Data Scientists quickly learn new valuable concepts
    that they might not be aware of. This is also part of the collection of tricks
    I share daily on [LinkedIn](https://www.linkedin.com/in/zoumana-keita/).
  prefs: []
  type: TYPE_NORMAL
- en: Pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Combine SQL statements and Pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: My gut feeling is telling me that more than 80% of the Data Scientists use Pandas
    in their daily Data Science activities.
  prefs: []
  type: TYPE_NORMAL
- en: And, I believe that this is because of the benefits it offers of being part
    of the wider range of the Python universe, making it accessible to many people.
  prefs: []
  type: TYPE_NORMAL
- en: 𝙒𝙝𝙖𝙩 𝙖𝙗𝙤𝙪𝙩 𝙎𝙌𝙇?
  prefs: []
  type: TYPE_NORMAL
- en: Even though not everyone uses it in their daily life (because not every company
    has necessary a SQL Database?), SQL’s performance is undeniable. Also, it is human-readable
    which makes it easily understood by even non-tech people.
  prefs: []
  type: TYPE_NORMAL
- en: ❓What if we could find a way to 𝙘𝙤𝙢𝙗𝙞𝙣𝙚 𝙩𝙝𝙚 𝙗𝙚𝙣𝙚𝙛𝙞𝙩𝙨 𝙤𝙛 𝙗𝙤𝙩𝙝 𝙋𝙖𝙣𝙙𝙖𝙨 𝙖𝙣𝙙 𝙎𝙌𝙇
    statements?
  prefs: []
  type: TYPE_NORMAL
- en: ✅ Here is where 𝗽𝗮𝗻𝗱𝗮𝘀𝗾𝗹 comes in handy 🎉🎉🎉
  prefs: []
  type: TYPE_NORMAL
- en: Below is an illustration 💡 Also you can watch the [full video here](https://youtu.be/8N5UOWderg4).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4770989a079af69369ac9508e2dc1fba.png)'
  prefs: []
  type: TYPE_IMG
- en: Update data of a given dataframe with another dataframe
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are multiple ways of replacing missing values 🧩 in Pandas, from simple
    imputation to more advanced methods.
  prefs: []
  type: TYPE_NORMAL
- en: But … 🚨
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, you just want to replace them using non-NA values from another DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: ✅ This can be achieved using the built-in update function from Pandas.
  prefs: []
  type: TYPE_NORMAL
- en: It aligns both DataFrames on their index and columns before performing the update.
  prefs: []
  type: TYPE_NORMAL
- en: 'General syntax ⚙️ below:'
  prefs: []
  type: TYPE_NORMAL
- en: 𝗳𝗶𝗿𝘀𝘁_𝗱𝗮𝘁𝗮𝗳𝗿𝗮𝗺𝗲.𝘂𝗽𝗱𝗮𝘁𝗲(𝘀𝗲𝗰𝗼𝗻𝗱_𝗱𝗮𝘁𝗮𝗳𝗿𝗮𝗺𝗲)
  prefs: []
  type: TYPE_NORMAL
- en: ✨ missing values from 𝗳𝗶𝗿𝘀𝘁_𝗱𝗮𝘁𝗮𝗳𝗿𝗮𝗺𝗲 dataframe are replaced with non-missing
    values from 𝘀𝗲𝗰𝗼𝗻𝗱_𝗱𝗮𝘁𝗮𝗳𝗿𝗮𝗺𝗲
  prefs: []
  type: TYPE_NORMAL
- en: ✨ 𝗼𝘃𝗲𝗿𝘄𝗿𝗶𝘁𝗲=𝗧𝗿𝘂𝗲 will overwrite 𝗳𝗶𝗿𝘀𝘁_𝗱𝗮𝘁𝗮𝗳𝗿𝗮𝗺𝗲’s values from using 𝘀𝗲𝗰𝗼𝗻𝗱_𝗱𝗮𝘁𝗮𝗳𝗿𝗮𝗺𝗲
    data, and this is the default value. If 𝗼𝘃𝗲𝗿𝘄𝗿𝗶𝘁𝗲=𝗙𝗮𝗹𝘀𝗲 only the missing values
    are replaced.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an illustration 💡
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/892216f15837f6f784bd57033b1cc1cb.png)'
  prefs: []
  type: TYPE_IMG
- en: From unstructured to structured data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data preprocessing is full of challenges 🔥
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine you have this data with candidates’ information in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '‘𝗔𝗱𝗷𝗮 𝗞𝗼𝗻𝗲: 𝗵𝗮𝘀 𝗠𝗮𝘀𝘁𝗲𝗿 𝗶𝗻 𝗦𝘁𝗮𝘁𝗶𝘀𝘁𝗶𝗰𝘀 𝗮𝗻𝗱 𝗶𝘀 𝟮𝟯 𝘆𝗲𝗮𝗿𝘀 𝗼𝗹𝗱’'
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: '‘𝗙𝗮𝗻𝘁𝗮 𝗧𝗿𝗮𝗼𝗿𝗲: 𝗵𝗮𝘀 𝗣𝗵𝗗 𝗶𝗻 𝗦𝘁𝗮𝘁𝗶𝘀𝘁𝗶𝗰𝘀 𝗮𝗻𝗱 𝗶𝘀 𝟯𝟬 𝘆𝗲𝗮𝗿𝘀 𝗼𝗹𝗱’'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, your task is to generate a table with the following information per candidate
    for further analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: ✨ The first and last name
  prefs: []
  type: TYPE_NORMAL
- en: ✨ The degree and field of study
  prefs: []
  type: TYPE_NORMAL
- en: ✨ The Age
  prefs: []
  type: TYPE_NORMAL
- en: 🚨 Performing such a task can be daunting 🤯
  prefs: []
  type: TYPE_NORMAL
- en: ✅ This is where the 𝘀𝘁𝗿.𝗲𝘅𝘁𝗿𝗮𝗰𝘁() function in Pandas can help!
  prefs: []
  type: TYPE_NORMAL
- en: It is a powerful text-processing function for extracting structured information
    from unstructured textual data.
  prefs: []
  type: TYPE_NORMAL
- en: Below is an illustration 💡
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3423245206870998857de40a78c75f6f.png)'
  prefs: []
  type: TYPE_IMG
- en: Perform multiple aggregations with the agg() function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to perform multiple aggregation functions like 𝘀𝘂𝗺, 𝗮𝘃𝗲𝗿𝗮𝗴𝗲, 𝗰𝗼𝘂𝗻𝘁
    … on one or multiple columns.
  prefs: []
  type: TYPE_NORMAL
- en: ✅ You can combine 𝗴𝗿𝗼𝘂𝗽𝗯𝘆() 𝗮𝗻𝗱 𝗮𝗴𝗴() 𝗳𝘂𝗻𝗰𝘁𝗶𝗼𝗻𝘀 from Pandas in one line of code.
  prefs: []
  type: TYPE_NORMAL
- en: Here is a Scenario 🎬 👇🏽
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s imagine this students’ data containing information about:'
  prefs: []
  type: TYPE_NORMAL
- en: ✨ Students’ areas of study
  prefs: []
  type: TYPE_NORMAL
- en: ✨ Their grades
  prefs: []
  type: TYPE_NORMAL
- en: ✨ The graduation years and the age of each student.
  prefs: []
  type: TYPE_NORMAL
- en: 'And, you have been requested to compute the following information per area
    of study and year:'
  prefs: []
  type: TYPE_NORMAL
- en: → The number of students
  prefs: []
  type: TYPE_NORMAL
- en: → The average grade
  prefs: []
  type: TYPE_NORMAL
- en: → The average age
  prefs: []
  type: TYPE_NORMAL
- en: Below is an image illustration 💡 for solving the scenario.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9fcd8980abaed48561a0cde5e53aec9d.png)'
  prefs: []
  type: TYPE_IMG
- en: Select observations between two specified times
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When working with time series data, you might want to select observations between
    two specified times for further analysis.
  prefs: []
  type: TYPE_NORMAL
- en: ✅ This can be quickly achieved using the 𝗯𝗲𝘁𝘄𝗲𝗲𝗻_𝘁𝗶𝗺𝗲() function.
  prefs: []
  type: TYPE_NORMAL
- en: Below is an illustration 💡
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/77efc58ab6f49f17553d2a9c49c6a381.png)'
  prefs: []
  type: TYPE_IMG
- en: Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Check if all elements meet a certain condition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ❌ The combination of 𝗳𝗼𝗿 loops and 𝗶𝗳 statements is not always the most elegant
    way when writing Python code.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, let’s say that you want to check if all the elements of an iterable
    meet a certain condition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Two possibilities may arise:'
  prefs: []
  type: TYPE_NORMAL
- en: 1️⃣ Either use for loop and if statement.
  prefs: []
  type: TYPE_NORMAL
- en: OR
  prefs: []
  type: TYPE_NORMAL
- en: 2️⃣ Use the **all()** built-in function
  prefs: []
  type: TYPE_NORMAL
- en: Below is an illustration 💡
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f2204e73ceb1a4ed4ec771582903ef26.png)'
  prefs: []
  type: TYPE_IMG
- en: Check if any element meets a certain condition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similarly to the previous case, if you want to check if at least one element
    of an iterable meet a certain condition.
  prefs: []
  type: TYPE_NORMAL
- en: ✅ Then use the **any()** built-in function which is more elegant than using
    **for** loop and **if** statement.
  prefs: []
  type: TYPE_NORMAL
- en: The illustration is similar to the above image.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid nested for loops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Writing nested 𝗳𝗼𝗿 loops is almost inevitable when your program becomes bigger
    and more complicated.
  prefs: []
  type: TYPE_NORMAL
- en: ❌ This can also make your code difficult to read and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: ✅ A better alternative is to use the built-in 𝗽𝗿𝗼𝗱𝘂𝗰𝘁() function instead.
  prefs: []
  type: TYPE_NORMAL
- en: Below is an illustration 💡
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/640c27c980c20b854e1c6ccbfe9af5d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Automatically handle index in a list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine you have to access elements in a list and their indexes at the same
    time.
  prefs: []
  type: TYPE_NORMAL
- en: One way of doing it is handling manually the indexes in a for loop.
  prefs: []
  type: TYPE_NORMAL
- en: ✅ Instead, you can use the 𝗲𝗻𝘂𝗺𝗲𝗿𝗮𝘁𝗲() built-in function.
  prefs: []
  type: TYPE_NORMAL
- en: This has two main benefits (I can think of).
  prefs: []
  type: TYPE_NORMAL
- en: ✨ First it automatically handles the index variable.
  prefs: []
  type: TYPE_NORMAL
- en: ✨ Then makes the code more readable.
  prefs: []
  type: TYPE_NORMAL
- en: Below is an illustration 💡
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fdf2df6b37caf1846f218f34cd227c91.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thank you for reading! 🎉 🍾
  prefs: []
  type: TYPE_NORMAL
- en: I hope you found this list of Python and Pandas tricks helpful! Keep an eye
    on here, because the content will be maintained with more tricks on a daily basis.
  prefs: []
  type: TYPE_NORMAL
- en: Also, If you like reading my stories and wish to support my writing, consider
    [becoming a Medium member](https://zoumanakeita.medium.com/membership). With a
    $ 5-a-month commitment, you unlock unlimited access to stories on Medium.
  prefs: []
  type: TYPE_NORMAL
- en: Would you like to buy me a coffee ☕️? → [Here you go](http://www.buymeacoffee.com/zoumanakeig)!
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to follow me on [Medium](https://zoumanakeita.medium.com/), [Twitter](https://twitter.com/zoumana_keita_),
    and [YouTube](https://www.youtube.com/channel/UC9xKdy8cz6ZuJU5FTNtM_pQ), or say
    Hi on [LinkedIn](https://www.linkedin.com/in/zoumana-keita/). It is always a pleasure
    to discuss AI, ML, Data Science, NLP, and MLOps stuff!
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you leave find the last two parts of this series below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Pandas & Python Tricks for Data Science & Data Analysis — Part 1](https://medium.com/towards-data-science/pandas-and-python-tips-and-tricks-for-data-science-and-data-analysis-1b1e05b7d93a)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Pandas & Python Tricks for Data Science & Data Analysis — Part 2](https://medium.com/towards-data-science/pandas-python-tricks-for-data-science-data-analysis-part-2-dc36460de90d)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Pandas & Python Tricks for Data Science & Data Analysis — Part 3](https://medium.com/towards-data-science/pandas-python-tricks-for-data-science-data-analysis-part-3-462d0e952925)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Pandas & Python Tricks for Data Science & Data Analysis — Part 4](https://medium.com/towards-data-science/pandas-python-tricks-for-data-science-data-analysis-part-4-67f61f69d62c)'
  prefs: []
  type: TYPE_NORMAL
