["```py\nimport time\n\ndef sleepy_function():\n    print(\"Before sleeping.\")\n    time.sleep(1)\n    print(\"After sleeping.\")\n\ndef main():\n    for _ in range(3):\n        sleepy_function()\n\nmain()\n```", "```py\nimport asyncio\n\nasync def sleepy_function():\n    print(\"Before sleeping.\")\n    await asyncio.sleep(1)\n    print(\"After sleeping.\")\n\nasync def main():\n    await asyncio.gather(*[sleepy_function() for _ in range(3)])\n\nasyncio.run(main())\n```", "```py\nasync def sample_coroutine():\n    print(\"Inside sample_coroutine\")\n```", "```py\nasyncio.run(sample_coroutine())\n```", "```py\nimport asyncio\n\nasync def sample_coroutine_2():\n    print(\"Inside sample_coroutine_2\")\n\nasync def sample_coroutine():\n    print(\"Inside sample_coroutine\")\n    await asyncio.sleep(1)\n    await sample_coroutine_2()\n\nasyncio.run(sample_coroutine())\n```", "```py\nimport asyncio\n\nasync def sleepy_function():\n    print(\"Before sleeping.\")\n    await asyncio.sleep(1)\n    print(\"After sleeping.\")\n\nasync def main():\n    task1 = asyncio.create_task(sleepy_function())\n    task2 = asyncio.create_task(sleepy_function())\n    task3 = asyncio.create_task(sleepy_function())\n\n    await task1\n    await task2\n    await task3\n\nasyncio.run(main())\n```", "```py\nimport asyncio\n\nasync def sleepy_function():\n    print(\"Before sleeping.\")\n    await asyncio.sleep(1)\n    print(\"After sleeping.\")\n\nasync def main():\n    await asyncio.gather(\n        sleepy_function(), sleepy_function(), sleepy_function()\n    )\n\nasyncio.run(main())\n```", "```py\nimport asyncio\n\nasync def sleepy_function():\n    print(\"Before sleeping.\")\n    await asyncio.sleep(1)\n    print(\"After sleeping.\")\n\nasync def main():\n    await asyncio.gather(*[sleepy_function() for _ in range(3)])\n\nasyncio.run(main())\n```", "```py\nimport asyncio\nimport threading\nfrom random import randint\n\nimport aiohttp\n\nNUM_CONSUMERS = 8\n\nasync def producer(queue: asyncio.Queue) -> None:\n    while True:\n        random_isbn = \"\".join([\"{}\".format(randint(0, 9)) for _ in range(0, 10)])\n        queue.put_nowait(random_isbn)\n        await asyncio.sleep(0.05)\n\nasync def consumer(consumer_idx: int, queue: asyncio.Queue) -> None:\n    while True:\n        isbn = await queue.get()\n        async with aiohttp.ClientSession() as session:\n            async with session.get(\n                \"https://openlibrary.org/api/books?bibkeys=ISBN:\"\n                + isbn\n                + \"&format=json\"\n            ) as resp:\n                book_descriptor = await resp.json()\n                if book_descriptor != {}:\n                    print(\n                        f\"Consumer {consumer_idx} found valid ISBN. Current queue size: {queue.qsize()}. Discovered book: {book_descriptor}\"\n                    )\n        queue.task_done()\n\nasync def main():\n    queue = asyncio.Queue()\n    await asyncio.gather(\n        *([producer(queue)] + [consumer(idx, queue) for idx in range(NUM_CONSUMERS)])\n    )\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```"]