["```py\nret = editor.template({'question': 'Is this a {adj} movie?',\n                       'context': 'This is a {adj} movie.' },\n                      labels='Yes, this is {adj}.',\n                      adj=['good', 'great', 'awesome', 'excellent'])\nprint(ret.data[0])\nprint(ret.labels[0])\nprint()\nprint(ret.data[1])\nprint(ret.labels[1])\nprint()\n```", "```py\n{'question': 'Is this a good movie?', 'context': 'This is a good movie.'}\nYes, this is good.\n\n{'question': 'Is this a great movie?', 'context': 'This is a great movie.'}\nYes, this is great.\n```", "```py\nimport checklist\nimport spacy\nimport itertools\nimport json\n\nimport checklist.editor\nfrom checklist.test_types import MFT, INV, DIR\nfrom checklist.expect import Expect\nfrom checklist.test_suite import TestSuite\nfrom checklist.perturb import Perturb\nimport checklist.text_generation\n\n# Template to generate comparison examples\nadj = ['large', 'fat', 'fresh', 'kind', 'deep', 'wierd', 'poor', 'clear', 'bold', 'calm', 'clever', 'firm', 'mean', 'quick', 'quiet', 'strong', 'bright', 'light']\nadj = [(x.rstrip('e'), x) for x in adj]\n\ntemp1 = editor.template(\n    [(\n    '{first_name} is {adj[0]}er than {first_name1}.',\n    'Who is less {adj[1]}?'\n    ),(\n    '{first_name} is {adj[0]}er than {first_name1}.',\n    'Who is {adj[0]}er?'\n    )\n    ],\n    labels = ['{first_name1}','{first_name}'],\n    adj=adj,\n    remove_duplicates=True,\n    nsamples=1000,\n    save=True\n    )\n\n# Generating train extension from comparisons\ntrain_extension_comparison = []\nid_n = 0\nfor string in range(len(temp1['data'])):\n  for i in range(len(temp1['data'][string])):\n    index_of_answer = temp1['data'][string][i][0].find(temp1['labels'][string][i])\n    train_extension_comparison.append({\n      'id':f'aug{id_n}',      \n      'title':'aug_comparison',\n      'context':temp1['data'][string][i][0],\n      'question':temp1['data'][string][i][1],\n      'answers':{\"text\": [temp1['labels'][string][i], temp1['labels'][string][i], temp1['labels'][string][i]], \"answer_start\": [index_of_answer, index_of_answer, index_of_answer]}\n    })\n    id_n += 1\n\n# will generate 1996 examples with different compbinations \n# of adjectives and first names according to the template.\n```"]