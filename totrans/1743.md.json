["```py\nfrom collections.abc import Sequence\n\ndef sum_of_squares(x: Sequence[float]) -> float:\n    n, s = len(x), sum(x)\n    return sum((x_i - s/n)**2 for x_i in x)\n```", "```py\ndef sum_of_squares(x: Sequence[float | int]) -> float:\n    n, s = len(x), sum(x)\n    return sum((x_i - s/n)**2 for x_i in x)\n```", "```py\nfrom typing import Iterable\n\ndef sum_of_squares(x: Iterable[float | int]) -> float:\n    n, s = len(x), sum(x)\n    return sum((x - s/n)**2)\n```", "```py\nfrom typing import Iterable\n\ndef sum_of_squares(x: Iterable[float]) -> float:\n    n, s = len(x), sum(x)\n    return sum((x - s/n)**2)\n```", "```py\nfrom collections import namedtuple\nfrom typing import NamedTuple\n\ndef join_names(names: tuple | namedtuple | NamedTuple) -> str:\n    return \" \".join(names)\n```", "```py\ndef join_names(names: tuple) -> str:\n    return \" \".join(names)\n```", "```py\nfrom collections import namedtuple\n\ndef join_names(names: namedtuple) -> str:\n    return \" \".join(names)\n```", "```py\n>>> sum_of_squares((i for i in (1., 2, 34)))\nTraceback (most recent call last):\n    ...\n    n, s = len(x), sum(x)\n    ^^^^^^\nTypeError: object of type 'generator' has no len()\n```", "```py\nerror: Argument 1 to \"sum_of_squares\" has incompatible type \n\"Generator[float, None, None]\"; expected \"Sequence[Union[float, int]]\"\n[arg-type]\n```"]