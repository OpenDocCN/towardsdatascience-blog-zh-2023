- en: What to Expect in Python 3.12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/python3-12-98245ecd6a97](https://towardsdatascience.com/python3-12-98245ecd6a97)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: New features, updates and removals in the upcoming Python 3.12 release
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://gmyrianthous.medium.com/?source=post_page-----98245ecd6a97--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----98245ecd6a97--------------------------------)[](https://towardsdatascience.com/?source=post_page-----98245ecd6a97--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----98245ecd6a97--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----98245ecd6a97--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----98245ecd6a97--------------------------------)
    ·6 min read·Jan 4, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/86526646e5b957d9c7aba56a61a39a50.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Yulia Matvienko](https://unsplash.com/@yuliamatvienko?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/kgz9vsP5JCU?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: While developers and teams still work on upgrading projects to use the revolutionary
    (in terms of performance) [Python 3.11](https://medium.com/towards-data-science/python-3-11-f62708eed569),
    a new release is in the works.
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.12 is expected to be released in the next few months, but the alpha
    version (currently `3.12.0a3`) is out and prerelease users can now have access
    to it in order to test out new features, report bugs and provide further recommendations
    — if needed.
  prefs: []
  type: TYPE_NORMAL
- en: In this article we will explore some of the changes we expect to be introduced
    according to the relevant PEP, including updates and additions of Python 3.12.
  prefs: []
  type: TYPE_NORMAL
- en: Removals and deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As of Python 3.10, `distutils` was marked as deprecated — in accordance to [PEP
    632](https://peps.python.org/pep-0632/) — and **Python 3.12 will remove the module**
    once and for all. Note that no backwards compatibility is offered, meaning that
    any import from `distutils` will result into an error.
  prefs: []
  type: TYPE_NORMAL
- en: For many years, `distutils` — that was part of the standard library — was the
    preferred module for package management in Python however, the arrival of `setuptools`
    many years back has changed the landscape and even the [Python Packaging User
    Guide](https://packaging.python.org/en/latest/) would recommend `setuptools` since
    it was designed to overcome some of the `distutils`‘s limitations.
  prefs: []
  type: TYPE_NORMAL
- en: Even though `setuptools` still uses functionality from `distutils`, the former
    has now integrated a copy of the latter which means that is no longer dependent
    on the standard library while `pip` has been replacing `distutils` with `setuptools`
    for a long time now. Therefore, it makes sense to remove the legacy `distutils`
    as part of Python 3.12 release.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, in Python 3.12, the `wstr` and `wstr_length` members will be removed
    from Unicode, as indicated in [PEP-623](https://peps.python.org/pep-0623/). This
    change is in line with the deprecation of certain Unicode APIs in [PEP-393](https://peps.python.org/pep-0393/).
    The removal of these members has resulted in the reduction of object size by 8
    or 16 bytes on 64bit platform.
  prefs: []
  type: TYPE_NORMAL
- en: Improved Error Messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python 3.12 will also make some improvements in messages reported by certain
    errors when these are being raised.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever a `NameError` is raised in the top-level for modules from the standard
    library, the Python 3.12 interpreter will now report suggestions as part of the
    error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, if a `NameError` occurs in a method and the instance has an attribute
    with the same name as the exception, the suggestion for correcting the error will
    be `self.<NAME>`, rather than the closest match in the method’s scope. For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In addition, whenever a `SyntaxError` is raised due to an invalid import syntax
    that follows the pattern `import x from y` instead of the valid syntax `from y
    import x`, a hint informing the user about this potential issue will be reported
    in the error message as illustrated in the example below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Finally, another improvement in the error message is related to `ImportError`
    and errors being raised whenever `from <module> import <name>` fails due to unresolved
    names. In Python 3.12, such error messages will also include suggestions for the
    unresolved name `<name>` based on the actual names included in module `<module>`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Linux perf profile is now available for Python functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linux perf profiler is a useful tool that helps users profile applications and
    obtain information related to their performance. In older Python versions, the
    profile was capable of reporting information native functions and procedures,
    written in C. As of Python 3.12, the interpreter is able to run in a special mode
    that allows the `perf` profiler report information for Python functions, too.
  prefs: []
  type: TYPE_NORMAL
- en: '`perf` profiling support can either be enabled from the start using the environment
    variable `[PYTHONPERFSUPPORT](https://docs.python.org/3.12/using/cmdline.html#envvar-PYTHONPERFSUPPORT)`
    or the `[-X perf](https://docs.python.org/3.12/using/cmdline.html#cmdoption-X)`
    option, or dynamically using `[sys.activate_stack_trampoline()](https://docs.python.org/3.12/library/sys.html#sys.activate_stack_trampoline)`
    and `[sys.deactivate_stack_trampoline()](https://docs.python.org/3.12/library/sys.html#sys.deactivate_stack_trampoline)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — [Python Docs](https://docs.python.org/3.12/howto/perf_profiling.html#how-to-enable-perf-profiling-support)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: sqlite3 command line interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python 3.12 will also introduce a command-line interface for `sqlite3`. This
    means that the `sqlite3` module can also be invoked as a script with the use of
    the `-m` flag of the language’s interpreter so that a SQLite shell is initiated
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Additionally, the [sqlite3 default adapters and converters](https://docs.python.org/3.12/library/sqlite3.html#sqlite3-default-converters)
    are now deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: Removal of deprecated unittest features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As part ot the Python 3.12 release, several features of the `unittest` module
    that were previously deprecated in earlier versions (mostly v3.1 and 3.2) will
    now be removed. The removals will include:'
  prefs: []
  type: TYPE_NORMAL
- en: Many `TestCase` method aliases, including `failUnless`, `failIf`, `failUnlessEqual`,
    `failIfEqual`, `failUnlessAlmostEqual`, `failIfAlmostEqual`, `failUnlessRaises`,
    `assert_`, `assertEquals`, `assertNotEquals`, `assertAlmostEquals`, `assertNotAlmostEquals`,
    `assertRegexpMatches`, `assertRaisesRegexp` and `assertNotRegexpMatches`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The TestCase method `assertDictContainsSubset`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `TestLoader.loadTestsFromModule` parameter `*use_load_tests*`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `_TextTestResult` alias of `TextTestResult`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other Language Additions and Improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While it is impossible to share the details of every single modification introduced
    in Python 3.12, here’s a high-level overview of some additional improvements and
    changes I personally found quite interesting:'
  prefs: []
  type: TYPE_NORMAL
- en: The `[os.path.isjunction()](https://docs.python.org/3.12/library/os.path.html#os.path.isjunction)`
    member is introduced in `os` module of the standard library, that lets users check
    to check if a given path is a junction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new `[pathlib.Path.walk()](https://docs.python.org/3.12/library/pathlib.html#pathlib.Path.walk)`
    method is introduced and allows walking directory trees, similar to `os.walk()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Removal of several modules and APIs](https://docs.python.org/3.12/whatsnew/3.12.html#pending-removal-in-python-3-13)
    that were previously deprecated in earlier Python versions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a more comprehensive coverage of all the changes planned to be introduced
    as part of the official release of version 3.12, you can refer to the relevant
    document, in the [official documentation](https://docs.python.org/3.12/whatsnew/3.12.html).
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Python’s 3.12 alpha release was recently made publicly available to prerelease
    users. In this article, we discussed some of the most interesting new features
    and updates based on the release details shared as of now. For the full details
    of the upcoming release you can refer to the [official changelog](https://docs.python.org/3.12/whatsnew/changelog.html#changelog).
    Some of these changes discussed in this article include:'
  prefs: []
  type: TYPE_NORMAL
- en: The removal of `distutils` module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The removal of `wstr` and `wstr_length` from Unicode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved error messages for `NameError`, `SyntaxError` and `ImportError`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for Linux perf profiler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added sqlite3 command line interface and deprecated default adapters and converters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removal of some previously deprecated `unittest` features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As stated in the [official Python documentation](https://docs.python.org/3.12/whatsnew/3.12.html),
    the new features and updates discussed are currently in draft form and more updates
    are expected whilst moving towards the actual release.
  prefs: []
  type: TYPE_NORMAL
- en: Prerelease users should be aware that this document is currently in draft form.
    It will be updated substantially as Python 3.12 moves towards release, so it’s
    worth checking back even after reading earlier versions.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[**Become a member**](https://gmyrianthous.medium.com/membership) **and read
    every story on Medium. Your membership fee directly supports me and other writers
    you read. You’ll also get full access to every story on Medium.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://gmyrianthous.medium.com/membership?source=post_page-----98245ecd6a97--------------------------------)
    [## Join Medium with my referral link — Giorgos Myrianthous'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: gmyrianthous.medium.com](https://gmyrianthous.medium.com/membership?source=post_page-----98245ecd6a97--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '**Related articles you may also like**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/diagrams-as-code-python-d9cbaa959ed5?source=post_page-----98245ecd6a97--------------------------------)
    [## Diagrams as Code in Python'
  prefs: []
  type: TYPE_NORMAL
- en: Creating cloud system architecture diagrams with Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/diagrams-as-code-python-d9cbaa959ed5?source=post_page-----98245ecd6a97--------------------------------)
    [](/switch-statements-python-e99ea364fde5?source=post_page-----98245ecd6a97--------------------------------)
    [## How to Write Switch Statements in Python
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how to write switch statements in Python using pattern matching
    or dictionaries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/switch-statements-python-e99ea364fde5?source=post_page-----98245ecd6a97--------------------------------)
    [](/run-airflow-docker-1b83a57616fb?source=post_page-----98245ecd6a97--------------------------------)
    [## How to Run Airflow Locally With Docker
  prefs: []
  type: TYPE_NORMAL
- en: A step by step guide for running Airflow with Docker on your local machine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/run-airflow-docker-1b83a57616fb?source=post_page-----98245ecd6a97--------------------------------)
  prefs: []
  type: TYPE_NORMAL
