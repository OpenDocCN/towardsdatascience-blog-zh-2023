["```py\ntext <- \"This is a random text. If you want to try to find a pattern here, \nlet's say the numbers 1 or 2 or 3, you can use stringR.\"\n\n# Find out if the word \"random\" is present\nstr_find(text, pattern='random')\n[1] TRUE\n\n# Extract the word \"random\"\nstr_extract(text, pattern= 'random')\n[1] \"random\"\n\n# Find where the pattern is located in the text\nstr_locate(text, 'random')\n     start end\n[1,]    11  16\n```", "```py\nstr_locate(text, pattern= '[k]')\n     start end\n[1,]    81  81\n```", "```py\nstr_locate(text, pattern= '[kwb]')\n     start end\n[1,]    31  31\n```", "```py\nstr_view_all(text, '[Ii].')\n```", "```py\n# The new text variable\ntext2 <- \"This is a random text 2\\. Use stringR and Regexp.\"\n\n# View all digits\nstr_view_all(text2, '\\\\d')\n\n# View all EXCEPT digits\nstr_view_all(text2, '\\\\D')\n\n# View all spaces\nstr_view_all(text2, '\\\\s')\n\n# View all EXCEPT spaces\nstr_view_all(text2, '\\\\S')\n\n# View all boundaries\nstr_view_all(text2, '\\\\b')\n```", "```py\n# Creating the text\ntext3 <- \"This is a random text 3\\. Hellooooo.\"\n\n# Finds the l and one or more reps of o.\nstr_view(text3, '[l][o]+')\n[OUT] looooo\n\n# Finds exactly 3 reps of o.\nstr_view_all(text3, 'o{3}')\n[OUT] ooo\n\n# Finds exactly 2 to 5 reps of o.\nstr_view_all(text3, 'o{2,5}')\n[OUT] ooooo\n\n# One letter or the other: N or M?\ntext4 <- \"nice or mice\"\nstr_extract_all(text4, '[nm]ice')\n[1] \"nice\" \"mice\"\n```", "```py\n# Character NOT a, m, d, x or e\nstr_view_all(text2, '[^amdxe]')\n```", "```py\n# Everything before ID\n# . for any character\n# + for one or more occurrences \nstr_extract_all(text5, '.+(?=ID)')\n[1] \"Extract the \"\n\n# Everything after ID\nstr_extract(text5, '(?<=ID ).+')\n[1] \"321\"\n```", "```py\n#Text\ntext6 <- 'ID-1234'\n\n# starts with ID\nstr_extract(text6, '^ID')\n[1] \"ID\"\n\n# ends with numbers\n# \\\\d = digits\n# + = one or more occurrences\n# $ = ends with\n\nstr_extract(text6, '\\\\d+$')\n[1] \"1234\"\n```", "```py\ntext <- 'A234 B334 C434 A334 B345'\nstr_extract_all(text, pattern= '[A]\\\\d+')\n[1] \"A234\" \"A334\"\n```", "```py\ntext <- \"Romeo and Juliet by William Shakespeare (6389)\nA Room with a View by E. M. Forster (5146)\nMiddlemarch by George Eliot (4913)\nLittle Women; Or, Meg, Jo, Beth, and Amy by Louisa May Alcott (4682)\nMoby Dick; Or, The Whale by Herman Melville (4521)\nThe Enchanted April by Elizabeth Von Arnim (4490)\nThe Complete Works of William Shakespeare by William Shakespeare (4432)\nThe Blue Castle: a novel by L. M. Montgomery (4418)\nCranford by Elizabeth Cleghorn Gaskell (4276)\nThe Adventures of Ferdinand Count Fathom â€” Complete by T. Smollett (4257)\"\n\n# Extracting the names of the books to a data.frame\nbooks = str_extract_all(text, pattern= '.+(?= by)')\n# Extracting the names of the authors to a data.frame\nauthors = str_extract_all(text, pattern= '(?<=by ).+ [^(\\\\d)]+')\n# Extracting the downloads\ndownloads = str_extract_all(text, pattern= '\\\\d+')\n\n# As dataframe\ngutenberg_top10 = data.frame(book = books,\n                             author= authors,\n                             downloads= downloads)\n# Correct columns names\ncolnames(gutenberg_top10) <- c('book', 'author', 'downloads')\n```"]