["```py\nimport torch\nscalar = torch.tensor(5)\n```", "```py\nvector = torch.tensor([7, 7])\nvector\n```", "```py\nvector.ndim\n```", "```py\nvector.shape\n```", "```py\nvector.dtype\n```", "```py\nmatrix = torch.tensor([[10.0, 20.0], \n                       [30.0, 40.0]])\n\nmatrix\n```", "```py\nprint(matrix.ndim)\nprint(matrix.shape)\nprint(matrix.dtype)\n```", "```py\ntorch.rand(size=(4, 4))\n```", "```py\ntensor = torch.tensor([1, 2, 3])\ntensor + 20\n```", "```py\ntensor * 10\n```", "```py\ntorch.multiply(tensor, 10)\n```", "```py\ntensor_1 = torch.tensor([[1,2,3],[2,3,4]])\ntensor_2 = torch.tensor([[1,2],[2,3],[3,4]])\n```", "```py\n# Hadamard product\ntensor_1 * tensor_1\n```", "```py\ntorch.matmul(tensor_1, tensor_2)\n```", "```py\ntensor_1 @ tensor_2\n```", "```py\nindexing_example = torch.tensor([[10,20,30],[40,50,60],[70,80,90]])\nindexing_example\n```", "```py\nindexing_example[0,:]\n```", "```py\nindexing_example[:,0]\n```", "```py\nindexing_example_3d = torch.tensor([[[10,20,30],[40,50,60],[70,80,90]], [[100,200,300],[400,500,600],[700,800,900]]])\nindexing_example_3d\n```", "```py\nindexing_example_3d[1,0,0]\n```", "```py\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n```", "```py\ntensor_on_gpu = tensor.to(device)\n```"]