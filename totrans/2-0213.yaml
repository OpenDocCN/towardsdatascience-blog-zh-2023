- en: A Performant Way to Query Streaming Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高效查询流式数据的方法
- en: 原文：[https://towardsdatascience.com/a-performant-way-to-query-streaming-data-b95c52b2361e](https://towardsdatascience.com/a-performant-way-to-query-streaming-data-b95c52b2361e)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-performant-way-to-query-streaming-data-b95c52b2361e](https://towardsdatascience.com/a-performant-way-to-query-streaming-data-b95c52b2361e)
- en: Improving a real-time streaming project with ksqlDB
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ksqlDB 改进实时流式项目
- en: '[](https://harrisonfhoffman.medium.com/?source=post_page-----b95c52b2361e--------------------------------)[![Harrison
    Hoffman](../Images/5eaa3e2bd0507297eb6c4a7efcf06324.png)](https://harrisonfhoffman.medium.com/?source=post_page-----b95c52b2361e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b95c52b2361e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b95c52b2361e--------------------------------)
    [Harrison Hoffman](https://harrisonfhoffman.medium.com/?source=post_page-----b95c52b2361e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://harrisonfhoffman.medium.com/?source=post_page-----b95c52b2361e--------------------------------)[![Harrison
    Hoffman](../Images/5eaa3e2bd0507297eb6c4a7efcf06324.png)](https://harrisonfhoffman.medium.com/?source=post_page-----b95c52b2361e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b95c52b2361e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b95c52b2361e--------------------------------)
    [Harrison Hoffman](https://harrisonfhoffman.medium.com/?source=post_page-----b95c52b2361e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b95c52b2361e--------------------------------)
    ·13 min read·May 22, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b95c52b2361e--------------------------------)
    ·阅读时间 13 分钟·2023年5月22日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/7ad66dc44368d76b3dccaa094133115e.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7ad66dc44368d76b3dccaa094133115e.png)'
- en: North Carolina. Image by Author.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 北卡罗来纳州。图像由作者提供。
- en: 'In a [previous article](/a-real-time-streaming-project-with-smartphone-data-7e838a1b009d),
    the components of a real-time streaming project that consumes and processes smartphone
    sensor data with FastAPI, Kafka, QuestDB, and Docker, were explored. This project
    was a first pass at implementing an architecture that can move streaming data
    from smartphones, through a Kafka log, and into a time series database where the
    data can be readily queried and processed. The end product was a dashboard that
    polled the database and displayed sensor readings in near real-time:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [上一篇文章](/a-real-time-streaming-project-with-smartphone-data-7e838a1b009d)
    中，我们探讨了一个实时流式项目的组件，该项目使用 FastAPI、Kafka、QuestDB 和 Docker 消耗和处理智能手机传感器数据。这个项目是实现一种架构的初步尝试，该架构可以将智能手机的流式数据通过
    Kafka 日志传输到时间序列数据库，在那里数据可以被轻松查询和处理。最终产品是一个仪表盘，它轮询数据库并实时显示传感器读数：
- en: '[](https://youtube.com/shorts/zRUVvz5vsl8?feature=share&source=post_page-----b95c52b2361e--------------------------------)
    [## Streaming Smartphone Data with FastAPI, Kafka, QuestDB, and Docker'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://youtube.com/shorts/zRUVvz5vsl8?feature=share&source=post_page-----b95c52b2361e--------------------------------)
    [## 使用 FastAPI、Kafka、QuestDB 和 Docker 流式传输智能手机数据'
- en: This video demonstrates the visualization of real-time smartphone sensor data
    using FastAPI, Kafka, QuestDB, and…
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 该视频演示了如何使用 FastAPI、Kafka、QuestDB 和…可视化实时智能手机传感器数据。
- en: youtube.com](https://youtube.com/shorts/zRUVvz5vsl8?feature=share&source=post_page-----b95c52b2361e--------------------------------)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: youtube.com](https://youtube.com/shorts/zRUVvz5vsl8?feature=share&source=post_page-----b95c52b2361e--------------------------------)
- en: One criticism of the project was the introduction of unnecessary latency due
    to writing data from Kafka to the database, and querying the database to display
    the most recent sensor readings. When our primary objective is to analyze data
    in near real-time, writing to and reading from a database becomes inefficient.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对该项目的一个批评是，由于从 Kafka 写入数据到数据库并查询数据库以显示最新的传感器读数，引入了不必要的延迟。当我们的主要目标是实时分析数据时，写入和读取数据库变得低效。
- en: This is one of the problems that [ksqlDB](https://docs.ksqldb.io/en/latest/)
    was created to solve. Instead of writing data to the database and querying it
    for analysis, ksqlDB enables direct processing and analysis of data streams, eliminating
    the need to persist data in a database before accessing it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 [ksqlDB](https://docs.ksqldb.io/en/latest/) 被创建来解决的问题之一。与将数据写入数据库并查询分析不同，ksqlDB
    允许直接处理和分析数据流，从而消除了在访问数据之前将数据持久化到数据库中的需求。
- en: 'This article will expand on the previous by introducing ksqlDB for querying
    and processing streaming data. Unlike traditional database polling, implementing
    [push queries](https://docs.ksqldb.io/en/latest/developer-guide/ksqldb-reference/select-push-query/)
    in ksqlDB significantly reduces latency in the dashboard and simplifies the backend
    infrastructure. All code used to build this project is available on GitHub:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将通过引入 ksqlDB 进行查询和处理流数据来扩展之前的内容。与传统的数据库轮询不同，在 ksqlDB 中实现 [推送查询](https://docs.ksqldb.io/en/latest/developer-guide/ksqldb-reference/select-push-query/)
    显著减少了仪表盘的延迟并简化了后端基础设施。用于构建此项目的所有代码都可以在 GitHub 上找到：
- en: '[](https://github.com/hfhoffman1144/smartphone_sensor_stream2?source=post_page-----b95c52b2361e--------------------------------)
    [## GitHub - hfhoffman1144/smartphone_sensor_stream2: Stream smartphone sensor
    data with FastAPI…'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/hfhoffman1144/smartphone_sensor_stream2?source=post_page-----b95c52b2361e--------------------------------)
    [## GitHub - hfhoffman1144/smartphone_sensor_stream2: 使用 FastAPI 流式传输智能手机传感器数据…'
- en: Stream smartphone data from Sensor Logger (see…
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从传感器记录器流式传输智能手机数据（见…
- en: github.com](https://github.com/hfhoffman1144/smartphone_sensor_stream2?source=post_page-----b95c52b2361e--------------------------------)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/hfhoffman1144/smartphone_sensor_stream2?source=post_page-----b95c52b2361e--------------------------------)
- en: The End Product
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终产品
- en: 'The objective of this project is the same as before: to develop a real-time
    dashboard that [visualizes sensor data](https://www.youtube.com/watch?v=zEMfVRgBuLA).
    However, in this iteration, our focus is on minimizing the perceptible latency
    between the phone and the dashboard by harnessing the power of ksqlDB. Here’s
    what the new dashboard should look like:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的目标与之前相同：开发一个实时仪表盘，以 [可视化传感器数据](https://www.youtube.com/watch?v=zEMfVRgBuLA)。然而，在这一迭代中，我们的重点是通过利用
    ksqlDB 的强大功能来最小化手机和仪表盘之间的可感知延迟。新的仪表盘应如下所示：
- en: '![](../Images/a45ebf91611918d6086364083c54191e.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a45ebf91611918d6086364083c54191e.png)'
- en: Smartphone Accelerometer Data Queried from ksqlDB. Image by Author.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 从 ksqlDB 查询的智能手机加速度计数据。图像由作者提供。
- en: Tri-axial accelerometer data from the smartphone is sent to a FastAPI app, written
    to Kafka, queried with ksqlDB, and displayed in the dashboard. Notice how quickly
    the plot responds to the phone’s movement — the delay is nearly undetectable.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 智能手机的三轴加速度计数据被发送到一个 FastAPI 应用程序，写入 Kafka，通过 ksqlDB 查询，并在仪表盘上显示。注意图表对手机移动的响应速度——延迟几乎无法察觉。
- en: 'This project also supports streaming from multiple smartphones:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目还支持来自多部智能手机的流数据：
- en: '![](../Images/382201beb14e374606a32f14f58c4b21.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/382201beb14e374606a32f14f58c4b21.png)'
- en: Streaming Data from Two Smartphones Simultaneously. Image by Author.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 同时从两部智能手机流式传输数据。图像由作者提供。
- en: '**Project Architecture**'
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**项目架构**'
- en: The architecture for this project is simpler than [before](/a-real-time-streaming-project-with-smartphone-data-7e838a1b009d)
    because QuestDB, and its consumer, are no longer required to get data to the dashboard.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目的架构比 [之前](//a-real-time-streaming-project-with-smartphone-data-7e838a1b009d)
    更简单，因为不再需要 QuestDB 及其消费者来将数据传输到仪表盘。
- en: '![](../Images/d62c945dd242a3da0d920a85f0ded5a3.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d62c945dd242a3da0d920a85f0ded5a3.png)'
- en: Project Architecture. Image by Author (made with Lucidchart).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 项目架构。图像由作者提供（使用 Lucidchart 制作）。
- en: Each smartphone sends sensor readings (accelerometer, gyroscope, and magnetometer)
    via POST request to a [FastAPI](https://fastapi.tiangolo.com/lo/) application
    (the producer). The producer reformats the request body to a ksqlDB-compatible
    JSON format and asynchronously writes sensor readings to a [Kafka topic](https://dattell.com/data-architecture-blog/what-is-a-kafka-topic/#:~:text=Kafka%20topics%20are%20the%20categories,consumers%20read%20data%20from%20topics.).
    Once sensor data arrives in the Kafka topic, it can be readily queried with ksqlDB.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每部智能手机通过 POST 请求将传感器读数（加速度计、陀螺仪和磁力计）发送到一个 [FastAPI](https://fastapi.tiangolo.com/lo/)
    应用程序（生产者）。生产者将请求体重新格式化为 ksqlDB 兼容的 JSON 格式，并异步地将传感器读数写入一个 [Kafka 主题](https://dattell.com/data-architecture-blog/what-is-a-kafka-topic/#:~:text=Kafka%20topics%20are%20the%20categories,consumers%20read%20data%20from%20topics.)。一旦传感器数据到达
    Kafka 主题，就可以通过 ksqlDB 进行查询。
- en: To obtain a continuous stream of sensor data, the client can establish a [server-sent
    event (SSE)](https://www.w3schools.com/html/html5_serversentevents.asp) connection
    with the backend (a FastAPI application). The backend initiates a [push query](https://docs.ksqldb.io/en/latest/concepts/queries/#:~:text=A%20push%20query%20is%20a%20form%20of%20query%20issued%20by%20a%20client%20that%20subscribes%20to%20a%20result%20as%20it%20changes%20in%20real%2Dtime.)
    through a ksqlDB API that continuously sends sensor data to the frontend.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取连续的传感器数据流，客户端可以与后端（一个FastAPI应用程序）建立一个[服务器推送事件（SSE）](https://www.w3schools.com/html/html5_serversentevents.asp)连接。后端通过ksqlDB
    API发起一个[推送查询](https://docs.ksqldb.io/en/latest/concepts/queries/#:~:text=A%20push%20query%20is%20a%20form%20of%20query%20issued%20by%20a%20client%20that%20subscribes%20to%20a%20result%20as%20it%20changes%20in%20real%2Dtime.)，持续将传感器数据发送到前端。
- en: 'Here’s the directory for the project:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是项目的目录：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Three [FastAPI](https://fastapi.tiangolo.com/lo/) applications are written
    to facilitate data flow and visualization— the producer, the dashboard frontend,
    and the dashboard backend. These apps, along with Kafak and ksqlDB, are orchestrated
    via [docker-compose](https://docs.docker.com/compose/):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 三个[FastAPI](https://fastapi.tiangolo.com/lo/)应用程序被编写以促进数据流动和可视化——生产者、仪表板前端和仪表板后端。这些应用程序与Kafak和ksqlDB一起，通过[docker-compose](https://docs.docker.com/compose/)进行编排：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Notice the four services not explicitly written in code (thankfully): Zookeeper,
    Kafka, ksqlDB, and Kafka-CLI. These services work together with the producer and
    dashboard to create the project. Let’s explore these components in more detail.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意那些未在代码中明确写出的四个服务（值得庆幸的是）：Zookeeper、Kafka、ksqlDB和Kafka-CLI。这些服务与生产者和仪表板一起工作，构建了该项目。让我们更详细地探索这些组件。
- en: The Producer
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产者
- en: '[Similar to before](/a-real-time-streaming-project-with-smartphone-data-7e838a1b009d#:~:text=to%20the%20system.-,The%20Producer,-So%20far%2C%20we),
    the producer is a FastAPI app that accepts data sent from smartphones (over POST
    request) and writes to a Kafka log. Here’s the directory structure:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[与之前类似](/a-real-time-streaming-project-with-smartphone-data-7e838a1b009d#:~:text=to%20the%20system.-,The%20Producer,-So%20far%2C%20we)，生产者是一个FastAPI应用程序，接受来自智能手机的数据（通过POST请求），并写入Kafka日志。以下是目录结构：'
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We won’t go through every file in the producer directory since everything is
    available on [GitHub](https://github.com/hfhoffman1144/smartphone_sensor_stream2).
    Instead, let’s take a look at `main.py` (the driving script of the producer API):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会逐一浏览生产者目录中的每个文件，因为所有内容都可以在[GitHub](https://github.com/hfhoffman1144/smartphone_sensor_stream2)上找到。相反，让我们看看`main.py`（生产者API的驱动脚本）：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The explanation of this code is largely the same as in the [previous article](/a-real-time-streaming-project-with-smartphone-data-7e838a1b009d#:~:text=Line%209%20instantiates,the%20data%20argument)%3A).
    The main difference is that sensor readings in the request payload need to be
    reformatted before they are written to Kafka. This new format allows the sensor
    data to be queried in a SQL-like fashion by ksqlDB. Each POST request from the
    phone sends JSON data that looks similar to this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的解释基本与[前一篇文章](/a-real-time-streaming-project-with-smartphone-data-7e838a1b009d#:~:text=Line%209%20instantiates,the%20data%20argument)%3A)相同。主要区别在于请求有效载荷中的传感器读数需要在写入Kafka之前重新格式化。这种新格式允许ksqlDB以类似SQL的方式查询传感器数据。每个来自手机的POST请求发送的JSON数据如下所示：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Individual sensor readings are located under “payload” and are written to Kafka
    in the `kafka_produce()` route:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 各个传感器读数位于“payload”下，并在`kafka_produce()`路由中写入Kafka：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `flatten_dict()` function located in `producer/app/core/utils.py` takes
    a raw sensor message in the payload, for instance:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`flatten_dict()`函数位于`producer/app/core/utils.py`中，它处理原始传感器消息，例如：'
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And reformats the message to be compatible with a ksqlDB schema — this is what
    is written to Kafka:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 并将消息重新格式化以兼容ksqlDB模式——这就是写入Kafka的内容：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Each entry in the reformatted sensor reading can be thought of as a column that
    can be queried by ksqlDB. More on this in the next section.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 重新格式化的传感器读数中的每一条记录可以看作是一个可以被ksqlDB查询的列。更多内容将在下一节中介绍。
- en: ksqlDB
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ksqlDB
- en: At this point, sensor readings can flow from smartphones to the FastAPI producer,
    where they are written to Kafka in a ksqlDB-compatible format. ksqlDB can then
    query recent and historical data in Kafka.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，传感器读数可以从智能手机流向FastAPI生产者，在那里以ksqlDB兼容格式写入Kafka。ksqlDB随后可以查询Kafka中的最新数据和历史数据。
- en: '[ksqlDB](https://docs.ksqldb.io/en/latest/) is an open-source streaming engine
    designed to process, analyze, and transform real-time data streams from Kafka
    using a SQL-like syntax. Put simply, ksqlDB enables interaction with data in Kafka
    topics using familiar relational database concepts like tables, queries, materialized
    views, queries, joins, and aggregations. The [capabilities](https://docs.ksqldb.io/en/latest/concepts/)
    of ksqlDB are extensive and won’t be fully covered in this article, but the documentation
    provides good definitions of the core concepts:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[ksqlDB](https://docs.ksqldb.io/en/latest/)是一个开源流式引擎，旨在使用类似SQL的语法处理、分析和转换来自Kafka的实时数据流。简而言之，ksqlDB使得使用熟悉的关系数据库概念（如表、查询、物化视图、查询、连接和聚合）与Kafka主题中的数据进行交互。ksqlDB的[功能](https://docs.ksqldb.io/en/latest/concepts/)非常广泛，本文章无法全面涵盖，但文档提供了核心概念的良好定义：'
- en: '[](https://docs.ksqldb.io/en/latest/concepts/?source=post_page-----b95c52b2361e--------------------------------)
    [## ksqlDB Concepts - ksqlDB Documentation'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://docs.ksqldb.io/en/latest/concepts/?source=post_page-----b95c52b2361e--------------------------------)
    [## ksqlDB概念 - ksqlDB文档'
- en: Learn about ksqlDB under the hood.
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解ksqlDB的内部工作原理。
- en: docs.ksqldb.io](https://docs.ksqldb.io/en/latest/concepts/?source=post_page-----b95c52b2361e--------------------------------)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[docs.ksqldb.io](https://docs.ksqldb.io/en/latest/concepts/?source=post_page-----b95c52b2361e--------------------------------)'
- en: 'For this project, a stream is created over the topic that stores smartphone
    sensor readings (the data written by the producer):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，将在存储智能手机传感器读数（生产者写入的数据）的主题上创建一个流：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The above ksqlDB statement creates a stream, `smartphone_sensor_stream`, that
    can be used to query sensor readings written to the `smartphone-sensor-data` Kafka
    topic. Libraries like [ksql-python](https://github.com/bryanyang0528/ksql-python)
    can be leveraged to interface with the ksqlDB REST API and programmatically execute
    queries:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上述ksqlDB语句创建了一个流`smartphone_sensor_stream`，可用于查询写入`smartphone-sensor-data` Kafka主题的传感器读数。可以利用像[ksql-python](https://github.com/bryanyang0528/ksql-python)这样的库来与ksqlDB
    REST API进行接口交互，并以编程方式执行查询：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: A [push query](https://docs.ksqldb.io/en/latest/concepts/queries/#:~:text=A%20push%20query%20is%20a%20form%20of%20query%20issued%20by%20a%20client%20that%20subscribes%20to%20a%20result%20as%20it%20changes%20in%20real%2Dtime.)
    is executed to retrieve sensor readings as they are written to the topic. In essence,
    a push query opens a long-lived connection that sends updates to a client any
    time new data is received in the topic. This makes push queries a good choice
    for streaming smartphone data.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[推送查询](https://docs.ksqldb.io/en/latest/concepts/queries/#:~:text=A%20push%20query%20is%20a%20form%20of%20query%20issued%20by%20a%20client%20that%20subscribes%20to%20a%20result%20as%20it%20changes%20in%20real%2Dtime.)被执行以检索传感器读数，因为它们被写入主题中。从本质上讲，推送查询打开一个长期连接，每当主题中接收到新数据时，都会将更新发送给客户端。这使得推送查询成为流式智能手机数据的良好选择。
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The above query “pushes” the device ID, time, and accelerometer values from
    `smartphone_sensor_stream` every time the stream is updated with data. This can
    be executed with ksql-python:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询每次流更新数据时“推送”设备ID、时间和加速度计值，从`smartphone_sensor_stream`中提取。这可以使用ksql-python执行：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The ksql-python client returns a [generator](https://wiki.python.org/moin/Generators)
    object that yields messages as they are written to Kafka and read from the stream.
    Unlike a conventional for loop that iterates over a fixed-size array, this loop
    will continue executing as long as data is received in the stream.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ksql-python客户端返回一个[生成器](https://wiki.python.org/moin/Generators)对象，该对象会在写入Kafka并从流中读取时产生消息。与传统的循环遍历固定大小数组不同，这种循环将继续执行，只要在流中接收到数据。
- en: 'The messages yielded from the query look similar to the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从查询中获得的消息看起来类似于以下内容：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: One message is returned at a time, each of which can be thought of as a row
    in the `smartphone_sensor_stream`ksql stream. Keep in mind that ksqlDB can perform
    more complex queries such as aggregates and joins, but for this project, only
    a basic `select`is needed.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一次返回一条消息，每条消息可以被认为是`smartphone_sensor_stream`ksql流中的一行。请记住，ksqlDB可以执行更复杂的查询，如聚合和连接，但对于这个项目，只需要一个基本的`select`。
- en: Dashboard Backend
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仪表板后端
- en: 'The dashboard backend is a FastAPI app that accepts SSE requests for sensor
    data streams. Once an SSE connection is requested, a ksqlDB push query is opened
    and continuously sends messages to the frontend as they arrive in Kafka. The directory
    structure for the dashboard backend looks like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板后端是一个FastAPI应用程序，接受SSE请求以获取传感器数据流。一旦请求了SSE连接，将打开一个ksqlDB推送查询，并在到达Kafka时持续向前端发送消息。仪表板后端的目录结构如下：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let’s first take a look at `data_api.py` — the interface between ksqlDB and
    the dashboard backend:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们看一下`data_api.py`——这是ksqlDB和仪表板后台之间的接口：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this script, `create_ksql_device_stream()` creates the ksqlDB stream defined
    in the previous section, and `ksql_sensor_push()` returns a generator that yields
    the results of the sensor data push query.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个脚本中，`create_ksql_device_stream()`创建了前一节定义的ksqlDB流，`ksql_sensor_push()`返回一个生成器，该生成器生成传感器数据推送查询的结果。
- en: 'Let’s break down the components of `main.py` — the driving script for the dashboard
    backend. Here are the dependencies:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细解析`main.py`——这是仪表板后台的主驱动脚本。以下是依赖项：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The primary imports to note are `EventSourceResponse` (the [class](https://www.starlette.io/responses/#eventsourceresponse:~:text=A%20response%20class%20that%20implements%20Server%2DSent%20Events.%20It%20enables%20event%20streaming%20from%20the%20server%20to%20the%20client%20without%20the%20complexity%20of%20websockets.)
    that implements SSE) and the functions from `data_api.py`. Next a KSQLAPI object
    and a FastAPI app are instantiated:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 主要需要注意的导入项是`EventSourceResponse`（[类](https://www.starlette.io/responses/#eventsourceresponse:~:text=A%20response%20class%20that%20implements%20Server%2DSent%20Events.%20It%20enables%20event%20streaming%20from%20the%20server%20to%20the%20client%20without%20the%20complexity%20of%20websockets.)
    实现了SSE）和来自`data_api.py`的函数。接下来，实例化了一个KSQLAPI对象和一个FastAPI应用：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Lastly, the SSE endpoint that sends sensor data from ksqlDB to the frontend
    is defined:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，定义了将传感器数据从ksqlDB发送到前端的SSE端点：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `message_stream()` endpoint accepts [GET](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET)
    requests that open long-lived connections through which the backend can continuously
    send sensor data. Within `message_stream()`, a [coroutine](https://docs.python.org/3/library/asyncio-task.html#coroutines)
    called `event_generator()` is defined and returned. The purpose of `event_generator()`is
    to create a while loop that yields sensor data messages as they are processed
    by ksqlDB. The only time this loop terminates is when the client closes the connection.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`message_stream()`端点接受[GET](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET)请求，这些请求打开长连接，后台可以通过这些连接持续发送传感器数据。在`message_stream()`中，定义并返回了一个[协程](https://docs.python.org/3/library/asyncio-task.html#coroutines)
    `event_generator()`。`event_generator()`的目的是创建一个while循环，在ksqlDB处理传感器数据消息时生成这些消息。只有当客户端关闭连接时，这个循环才会终止。'
- en: Dashboard Frontend
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仪表板前端
- en: 'The dashboard frontend is an HTML page hosted by a FastAPI application. Its
    purpose is to demonstrate that data is flowing through the components of this
    project, and is by no means a comprehensive frontend. The interface looks like
    this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板前端是由FastAPI应用托管的HTML页面。它的目的是展示数据如何在项目的各个组件之间流动，并不是一个全面的前端。界面如下：
- en: '![](../Images/d396fa7843ad4903f266249e753e8360.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d396fa7843ad4903f266249e753e8360.png)'
- en: Displaying Smartphone Sensor Data Streams on the Dashboard. Image by Author.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在仪表板上显示智能手机传感器数据流。图像由作者提供。
- en: When the user clicks “Start Streaming”, an SSE connection is opened with the
    backend, and data from the push query is sent continuously. All code used to create
    the frontend, along with instructions on how to get everything running, is available
    on [GitHub](https://github.com/hfhoffman1144/smartphone_sensor_stream2).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“开始流媒体传输”时，会与后台建立一个SSE连接，并持续发送来自推送查询的数据。所有用于创建前端的代码以及运行所有内容的说明都可以在[GitHub](https://github.com/hfhoffman1144/smartphone_sensor_stream2)上找到。
- en: Final Thoughts
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的思考
- en: This article introduced ksqlDB as a solution to improve the real-time streaming
    project that was previously built using FastAPI, Kafka, QuestDB, and Docker. The
    project aimed to create a dashboard that visualizes sensor data in near real-time.
    One of the challenges faced was the unnecessary latency caused by writing data
    from Kafka to a database and querying the database for analysis.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 本文介绍了ksqlDB作为一种解决方案，用以改进之前使用FastAPI、Kafka、QuestDB和Docker构建的实时流媒体项目。该项目旨在创建一个可视化传感器数据的仪表板，接近实时展示数据。面临的挑战之一是由于将数据从Kafka写入数据库并查询数据库进行分析所造成的不必要延迟。
- en: ksqlDB, a database purpose-built for stream processing, was implemented to address
    this issue. Instead of persisting data in a database before accessing it, ksqlDB
    enables direct processing and analysis of data streams in Kafka. By implementing
    push queries in ksqlDB, the latency in the dashboard was significantly reduced,
    resulting in a nearly undetectable delay in displaying sensor readings.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: ksqlDB 是一个为流处理而构建的数据库，用于解决此问题。与其在访问数据之前将其持久化到数据库中，ksqlDB 允许直接处理和分析 Kafka 中的数据流。通过在
    ksqlDB 中实现推送查询，仪表盘的延迟显著减少，传感器读数的显示几乎没有可检测的延迟。
- en: The use of ksqlDB simplified the backend infrastructure and allowed for efficient
    analysis of sensor readings in near real-time. Future articles will continue making
    improvements on this project and enhancing its functionality with new tools and
    features. As always, feedback is greatly appreciated. Thanks for reading!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: ksqlDB的使用简化了后端基础设施，并允许对传感器读数进行近实时高效分析。未来的文章将继续对该项目进行改进，并通过新工具和功能增强其功能。我们始终欢迎反馈。感谢阅读！
- en: '*Become a Member:* [*https://harrisonfhoffman.medium.com/membership*](https://harrisonfhoffman.medium.com/membership)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*成为会员:* [*https://harrisonfhoffman.medium.com/membership*](https://harrisonfhoffman.medium.com/membership)'
- en: References
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: '***Apache Kafka:***[*https://kafka.apache.org/*](https://kafka.apache.org/)'
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***Apache Kafka:***[*https://kafka.apache.org/*](https://kafka.apache.org/)'
- en: ''
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Event-Driven Architectures — The Queue vs The Log:*** [*https://jack-vanlightly.com/blog/2018/5/20/event-driven-architectures-the-queue-vs-the-log*](https://jack-vanlightly.com/blog/2018/5/20/event-driven-architectures-the-queue-vs-the-log)'
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***Event-Driven Architectures — The Queue vs The Log:*** [*https://jack-vanlightly.com/blog/2018/5/20/event-driven-architectures-the-queue-vs-the-log*](https://jack-vanlightly.com/blog/2018/5/20/event-driven-architectures-the-queue-vs-the-log)'
- en: ''
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Lucidchart:***[*https://www.lucidchart.com/*](https://www.lucidchart.com/pages/landing?utm_source=google&utm_medium=cpc&utm_campaign=_chart_en_us_mixed_search_brand_exact_&km_CPC_CampaignId=1457964857&km_CPC_AdGroupID=57044764032&km_CPC_Keyword=lucidchart&km_CPC_MatchType=e&km_CPC_ExtensionID=&km_CPC_Network=g&km_CPC_AdPosition=&km_CPC_Creative=442433231228&km_CPC_TargetID=aud-552508845082%3Akwd-33511936169&km_CPC_Country=9026996&km_CPC_Device=c&km_CPC_placement=&km_CPC_target=&gclid=Cj0KCQiAkMGcBhCSARIsAIW6d0CWGMutQsstwP9ldA4dNOtZFA1Rx74z64sS-PRobNhZ_vyLMUMrESIaAslAEALw_wcB)'
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***Lucidchart:***[*https://www.lucidchart.com/*](https://www.lucidchart.com/pages/landing?utm_source=google&utm_medium=cpc&utm_campaign=_chart_en_us_mixed_search_brand_exact_&km_CPC_CampaignId=1457964857&km_CPC_AdGroupID=57044764032&km_CPC_Keyword=lucidchart&km_CPC_MatchType=e&km_CPC_ExtensionID=&km_CPC_Network=g&km_CPC_AdPosition=&km_CPC_Creative=442433231228&km_CPC_TargetID=aud-552508845082%3Akwd-33511936169&km_CPC_Country=9026996&km_CPC_Device=c&km_CPC_placement=&km_CPC_target=&gclid=Cj0KCQiAkMGcBhCSARIsAIW6d0CWGMutQsstwP9ldA4dNOtZFA1Rx74z64sS-PRobNhZ_vyLMUMrESIaAslAEALw_wcB)'
- en: ''
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Kafka Poc using FastApi:*** [*https://github.com/GavriloviciEduard/fastapi-kafka*](https://github.com/GavriloviciEduard/fastapi-kafka)'
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***Kafka Poc using FastApi:*** [*https://github.com/GavriloviciEduard/fastapi-kafka*](https://github.com/GavriloviciEduard/fastapi-kafka)'
- en: ''
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***geo-stream-kafka:***[*https://github.com/iwpnd/geo-stream-kafka*](https://github.com/iwpnd/geo-stream-kafka)'
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***geo-stream-kafka:***[*https://github.com/iwpnd/geo-stream-kafka*](https://github.com/iwpnd/geo-stream-kafka)'
- en: ''
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***18 Most Popular IoT Devices in 2022:*** [*https://www.softwaretestinghelp.com/iot-devices/#:~:text=Smart%20Mobiles%2C%20smart%20refrigerators%2C%20smartwatches,there%20by%20the%20year%202022%3F*](https://www.softwaretestinghelp.com/iot-devices/#:~:text=Smart%20Mobiles%2C%20smart%20refrigerators%2C%20smartwatches,there%20by%20the%20year%202022%3F)'
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***18 Most Popular IoT Devices in 2022:*** [*https://www.softwaretestinghelp.com/iot-devices/#:~:text=Smart%20Mobiles%2C%20smart%20refrigerators%2C%20smartwatches,there%20by%20the%20year%202022%3F*](https://www.softwaretestinghelp.com/iot-devices/#:~:text=Smart%20Mobiles%2C%20smart%20refrigerators%2C%20smartwatches,there%20by%20the%20year%202022%3F)'
- en: ''
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***FastAPI:***[*https://fastapi.tiangolo.com/*](https://fastapi.tiangolo.com/)'
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***FastAPI:***[*https://fastapi.tiangolo.com/*](https://fastapi.tiangolo.com/)'
- en: ''
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***QuestDB:***[*https://questdb.io/docs/*](https://questdb.io/docs/)'
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***QuestDB:***[*https://questdb.io/docs/*](https://questdb.io/docs/)'
- en: ''
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Row vs Column Oriented Databases:***[*https://dataschool.com/data-modeling-101/row-vs-column-oriented-databases/*](https://dataschool.com/data-modeling-101/row-vs-column-oriented-databases/)'
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***Row vs Column Oriented Databases:***[*https://dataschool.com/data-modeling-101/row-vs-column-oriented-databases/*](https://dataschool.com/data-modeling-101/row-vs-column-oriented-databases/)'
- en: ''
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**ksqlDB**: [https://docs.ksqldb.io/en/latest/](https://docs.ksqldb.io/en/latest/)'
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**ksqlDB**: [https://docs.ksqldb.io/en/latest/](https://docs.ksqldb.io/en/latest/)'
