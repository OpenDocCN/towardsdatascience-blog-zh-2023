- en: How To Install Traefik Ingress Controller In Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-install-traefik-ingress-controller-in-kubernetes-fa2b9079e942](https://towardsdatascience.com/how-to-install-traefik-ingress-controller-in-kubernetes-fa2b9079e942)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Provide load balancing, name-based virtual hosting, and SSL-termination
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.knulst.de/?source=post_page-----fa2b9079e942--------------------------------)[![Paul
    Knulst](../Images/9fcb767d927a1fe53ee739c584fdf92c.png)](https://medium.knulst.de/?source=post_page-----fa2b9079e942--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fa2b9079e942--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fa2b9079e942--------------------------------)
    [Paul Knulst](https://medium.knulst.de/?source=post_page-----fa2b9079e942--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fa2b9079e942--------------------------------)
    ·5 min read·Jan 4, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2c753cb3418bb0cc7907fc66fb5f7b5c.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Growtika Developer Marketing Agency](https://unsplash.com/@growtika?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    / [Unsplash](https://unsplash.com/s/photos/kubernetes-k8s?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This tutorial will show how to use Traefik as an Ingress Controller in Kubernetes
    (or k8s) to provide load balancing, name-based virtual hosting, and SSL termination.
  prefs: []
  type: TYPE_NORMAL
- en: To follow this tutorial, you need.
  prefs: []
  type: TYPE_NORMAL
- en: A running Kubernetes cluster or a Managed Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Load Balancer that dynamically distributes your traffic to any Kubernetes
    resource that is marked as [LoadBalancer](https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A PRIMARY_DOMAIN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: The domain that I use in this post is `PRIMARY_DOMAIN`, please change
    accordingly. If your desired domain is `paulsblog.dev`, replace `PRIMARY_DOMAIN`
    with `paulsblog.dev`.'
  prefs: []
  type: TYPE_NORMAL
- en: What is an Ingress Controller?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An Ingress Controller is an API object that will manage external access to any
    deployed service in a Kubernetes cluster. Typically HTTP or HTTPS is used. Furthermore,
    it provides load balancing, name-based virtual hosting, and SSL termination.
  prefs: []
  type: TYPE_NORMAL
- en: Why do you need an Ingress Controller?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This list will show the most important benefits of using an Ingress Controller
    in a Kubernetes cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: Load balance any traffic between every service that is deployed outside of the
    Kubernetes cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow HTTP traffic between services within the cluster but enforce HTTPS traffic
    from outside the Kubernetes cluster while terminating encryption.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplify interaction between internal services and re-route when required by
    changing the Ingress Routing Rule.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prepare Kubernetes Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing Helm, Kubernetes Package Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To install Helm on your Kubernetes cluster, you can use the official Helm installer
    script that will automatically install the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: Before installing Helm, you can get a deeper understanding of Helm if you read
    about it in [the official Helm documentation](https://helm.sh/docs/). Afterward,
    download the script and execute it locally.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Configure `kubectl` To Access The Kubernetes Cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If `kubectl` is used, you can use three different techniques to work with the
    cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. Use** `**--kubeconfig**` **flag for every command:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**2\. Use** `**KUBECONFIG**` **environment variable:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**3\. Copy the config file to** `**$HOME/.kube/config**`'
  prefs: []
  type: TYPE_NORMAL
- en: Prepare Helm Chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Traefik, you should add the official Traefik Helm repository to
    your Helm client. This could be done by executing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Afterward, you have to configure the Helm chart by creating a `values.yaml`.
    All possible values can be found [in the GitHub of the Traefik Helm chart](https://github.com/traefik/traefik-helm-chart/blob/master/traefik/values.yaml)
    and will be used to set the static configuration of the Traefik proxy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you should create a `values.yaml` and paste the following into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This `values.yaml` is used to configure the Traefik proxy and will:'
  prefs: []
  type: TYPE_NORMAL
- en: use IONOS as the certificate resolver. To find your provider [consult the traefik
    documentation](https://doc.traefik.io/traefik/https/acme/#dnschallenge)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: set the certificates main domain to `PRIMARY_DOMAIN`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: set the certificates sans to `*.PRIMARY_DOMAIN`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: store every generated certificate in `/data/acme.json`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'run a busybox init container to fix a common permission problem that is explained
    here: [https://github.com/containous/traefik/issues/6972](https://github.com/containous/traefik/issues/6972)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: load the IONOS_API_KEY from a secret. If using some other provider add every
    needed environment variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deactivate the Traefik dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: enable persistence for the Traefik proxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install Traefik Proxy As Ingress Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To install Traefik Proxy in your Kubernetes cluster, follow the next four simple
    steps
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. Begin with creating a Kubernetes namespace:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**2\. Create a** `**treafik-secret.yaml**` **that will contain the secret used
    within the Helm chart for SSL certificate creation:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**3\. Apply the secret in your Kubernetes cluster:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**4\. Install Traefik using Helm and apply** `**values.yaml**`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you change anything within the `values.yaml` and want to update the Traefik
    proxy, this can be done by executing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After some minutes, your Traefik is deployed correctly, and you can map your
    PRIMARY_DOMAIN A record to the IP of the Traefik Load Balancer. You can find the
    external IP by executing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'It should output the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/57988e456ba61fe464300998cb117bb0.png)'
  prefs: []
  type: TYPE_IMG
- en: The output of kubectl gets all within the traefik namespace
  prefs: []
  type: TYPE_NORMAL
- en: When the external IP is not set, wait some time and retry it. If you did not
    receive an external IP, you probably did not have an external load balancer installed/bought.
  prefs: []
  type: TYPE_NORMAL
- en: Enable Traefik Dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To enable the Traefik Dashboard within the Kubernetes cluster, you will have
    to create an Ingress route and a middleware to enable Basic authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder called `traefik-dashboard` which will contain every file
    to set up the Traefik dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a base64 encoded user and password that will be used within the
    Kubernetes secret:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Afterward, copy the `htpasswd` string and create the Kubernetes secret `001-auth-secret`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create a Kubernetes middleware `002-middleware` which will use the basic
    auth secret:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can create the Ingress route `003-ingressroute` for the Traefik dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you named the files as described, you should have the following file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Switch to the upper folder and use the following command to apply all files
    in the correct order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: After some minutes, the Traefik dashboard is online and can be reached by its
    domain (https://traefik.PRIMARY_DOMAIN).
  prefs: []
  type: TYPE_NORMAL
- en: Closing Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope this article gave you a quick and neat overview of how to set up Traefik
    Proxy as an Ingress Controller within your Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Using Helm to set up a Traefik Ingress controller makes it easy to install,
    reconfigure, and update the Traefik Proxy.
  prefs: []
  type: TYPE_NORMAL
- en: With this setup, you can deploy any Kubernetes Pod/Service and use an IngressRoute
    to make it accessible through SSL with any subdomain.
  prefs: []
  type: TYPE_NORMAL
- en: I would love to hear your feedback about this tutorial. Furthermore, if you
    already run a Traefik installation and use a different approach, please comment
    here and explain what you have done differently. Also, if you have any questions,
    please ask them in the comments. I will answer them if possible.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to connect with me on [my blog](https://www.paulsblog.dev), [LinkedIn](https://www.linkedin.com/in/paulknulst/),
    [Twitter](https://twitter.com/paulknulst), and [GitHub](https://github.com/paulknulst).
  prefs: []
  type: TYPE_NORMAL
- en: '*This article was initially published on my blog at* [*https://www.paulsblog.dev/how-to-install-traefik-ingress-controller-in-kubernetes/*](https://www.paulsblog.dev/how-to-install-traefik-ingress-controller-in-kubernetes/)'
  prefs: []
  type: TYPE_NORMAL
