["```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import minimize, Bounds, LinearConstraint, NonlinearConstraint\n```", "```py\ndef f(x):\n    '''Objective function'''\n    return 0.5*x[0]**2 + 2.5*x[1]**2 + 4 * x[0] * np.sin(np.pi * x[0]) + 5\n\ndef df(x):\n    '''Gradient of the objective function'''\n    return np.array([x[0] + 4 * np.sin(np.pi * x[0]) + 4 * np.pi * x[0] * np.cos(np.pi * x[0]), 5*x[1]])\n```", "```py\n# Generate data\nX0, X1 = np.meshgrid(np.linspace(-1, 1, 100), np.linspace(-1, 1, 100))\nZ = f(np.stack([X0, X1]))\n\n# Plot\nfig = plt.figure(figsize=(30, 20))\n\n# First subplot\nax = fig.add_subplot(1, 3, 1, projection='3d')\nax.contour3D(X0, X1, Z, 70, cmap='plasma')\nax.set_xlabel('$x_{0}$')\nax.set_ylabel('$x_{1}$')\nax.set_zlabel('$f(x)$')\n\n# Second subplot\nax = fig.add_subplot(1, 3, 2, projection='3d')\nax.contour3D(X0, X1, Z, 70, cmap='plasma')\nax.set_xlabel('$x_{0}$')\nax.set_ylabel('$x_{1}$')\nax.set_zlabel('$f(x)$')\nax.axes.yaxis.set_ticklabels([])\nax.view_init(0, 80)\n\n# Third subplot\nax = fig.add_subplot(1, 3, 3, projection='3d')\nax.contour3D(X0, X1, Z, 70, cmap='plasma')\nax.set_xlabel('$x_{0}$')\nax.set_ylabel('$x_{1}$')\nax.set_zlabel('$f(x)$')\nax.axes.zaxis.set_ticklabels([])\nax.view_init(89, -90);\n```", "```py\n# Starting point\nx_start = np.array([0.5, 0.5])\n\n# Optimization\nresult = minimize(\n    f, x_start, method='trust-constr', jac=df)\n\nresult.x.round(3)\n```", "```py\narray([-0.,  0.])\n```", "```py\n# Minimum from unconstrained optimization\nmin_x0, min_x1 = np.meshgrid(result.x[0], result.x[1])   \nmin_z = f(np.stack([min_x0, min_x1]))\n\n# Plot\nfig = plt.figure(figsize=(30, 20))\n\n# First subplot\nax = fig.add_subplot(1, 3, 1, projection='3d')\nax.contour3D(X0, X1, Z, 40, cmap='plasma')\nax.scatter(min_x0, min_x1, min_z, marker='o', color='red', linewidth=10)\nax.set_xlabel('$x_{0}$')\nax.set_ylabel('$x_{1}$')\nax.set_zlabel('$f(x)$')\n\n# Second subplot\nax = fig.add_subplot(1, 3, 2, projection='3d')\nax.contour3D(X0, X1, Z, 40, cmap='plasma')\nax.scatter(min_x0, min_x1, min_z, marker='o', color='red', linewidth=10)\nax.set_xlabel('$x_{0}$')\nax.set_ylabel('$x_{1}$')\nax.set_zlabel('$f(x)$')\nax.axes.yaxis.set_ticklabels([])\nax.view_init(0, 80)\n\n# Third subplot\nax = fig.add_subplot(1, 3, 3, projection='3d')\nax.contour3D(X0, X1, Z, 40, cmap='plasma')\nax.scatter(min_x0, min_x1, min_z, marker='o', color='red', linewidth=10)\nax.set_xlabel('$x_{0}$')\nax.set_ylabel('$x_{1}$')\nax.set_zlabel('$f(x)$')\nax.axes.zaxis.set_ticklabels([])\nax.view_init(89, -90);\n```", "```py\nlim = [0.25, 0.30, 0.75, 0.8]\n\nbounds = Bounds([lim[0], lim[1]],  # [min x0, min x1]\n                [lim[2], lim[3]])  # [max x0, max x1]\n\nresult = minimize(\n    f, x_start, method='trust-constr', jac=df, bounds=bounds)\n\nresult.x.round(3)\n```", "```py\narray([0.25, 0.301])\n```", "```py\n# Feasible region (bounds)\nX0_bound, X1_bound = np.meshgrid(np.linspace(lim[0], lim[2], 20), np.linspace(lim[1], lim[3], 20))\nZ_bound = f(np.stack([X0_bound, X1_bound]))\n\n# New minimum within bounds\nmin_x0_bounds, min_x1_bounds = np.meshgrid(result.x[0], result.x[1])   \nmin_z_bounds = f(np.stack([min_x0_bounds, min_x0_bounds]))\n\n# Plot\nfig = plt.figure(figsize=(30, 20))\n\n# First subplot\nax = fig.add_subplot(1, 3, 1, projection='3d')\nax.contour3D(X0, X1, Z, 40, cmap='plasma')\nax.scatter(min_x0, min_x1, min_z, marker='o', color='red', linewidth=10)\nax.scatter(min_x0_bounds, min_x1_bounds, min_z_bounds, marker='o', color='blue', linewidth=10)\nax.plot_surface(X0_bound, X1_bound, Z_bound, color='black', alpha=0.6)\nax.set_xlabel('$x_{0}$')\nax.set_ylabel('$x_{1}$')\nax.set_zlabel('$f(x)$')\n\n# Second subplot\nax = fig.add_subplot(1, 3, 2, projection='3d')\nax.contour3D(X0, X1, Z, 40, cmap='plasma')\nax.scatter(min_x0, min_x1, min_z, marker='o', color='red', linewidth=10)\nax.scatter(min_x0_bounds, min_x1_bounds, min_z_bounds, marker='o', color='blue', linewidth=10)\nax.plot_surface(X0_bound, X1_bound, Z_bound, color='black', alpha=0.6)\nax.set_xlabel('$x_{0}$')\nax.set_ylabel('$x_{1}$')\nax.set_zlabel('$f(x)$')\nax.axes.yaxis.set_ticklabels([])\nax.view_init(0, 80)\n\n# Third subplot\nax = fig.add_subplot(1, 3, 3, projection='3d')\nax.contour3D(X0, X1, Z, 40, cmap='plasma')\nax.scatter(min_x0, min_x1, min_z, marker='o', color='red', linewidth=10)\nax.scatter(min_x0_bounds, min_x1_bounds, min_z_bounds, marker='o', color='blue', linewidth=10)\nax.plot_surface(X0_bound, X1_bound, Z_bound, color='black', alpha=0.6)\nax.set_xlabel('$x_{0}$')\nax.set_ylabel('$x_{1}$')\nax.set_zlabel('$f(x)$')\nax.axes.zaxis.set_ticklabels([])\nax.view_init(89, -90);\n```", "```py\nlinear_constraint = LinearConstraint(\n    [[1, 0], [1, -1]], [0.25, -np.inf], [np.inf, 0.1])\n\nresult = minimize(\n    f, x_start, method='trust-constr', jac=df, constraints=linear_constraint)\n\nresult.x.round(3)\n```", "```py\narray([0.25, 0.15])\n```", "```py\n# Linear constraints: first hyperplane\nX0_lin_1 = np.repeat(0.25, 20)\nX1_lin_1, Z_lin_1 = np.meshgrid(np.linspace(-1, 1, 20), np.linspace(4, 10, 20))\n\n# Linear constraints: second hyperplane\nX1_lin_2 = np.linspace(-1, 1, 20)\nX0_lin_2 = X1_lin_2 + 0.1\n\n# New minimum with linear constraints\nmin_x0_lin_constr, min_x1_lin_constr = np.meshgrid(result.x[0], result.x[1])   \nmin_z_lin_constr = f(np.stack([min_x0_lin_constr, min_x0_lin_constr]))\n\n# Plot\nfig = plt.figure(figsize=(30, 20))\n\n# First subplot\nax = fig.add_subplot(1, 3, 1, projection='3d')\nax.contour3D(X0, X1, Z, 40, cmap='plasma')\nax.scatter(min_x0, min_x1, min_z, marker='o', color='red', linewidth=10)\nax.scatter(min_x0_lin_constr, min_x1_lin_constr, min_z_lin_constr, marker='o', color='blue', linewidth=10)\nax.plot_surface(X0_lin_1, X1_lin_1, Z_lin_1, color='green', alpha=0.3)\nax.plot_surface(X0_lin_2, X1_lin_2, Z_lin_1, color='yellow', alpha=0.2)\nax.set_xlabel('$x_{0}$')\nax.set_ylabel('$x_{1}$')\nax.set_zlabel('$f(x)$')\n\n# Second subplot\nax = fig.add_subplot(1, 3, 2, projection='3d')\nax.contour3D(X0, X1, Z, 40, cmap='plasma')\nax.scatter(min_x0, min_x1, min_z, marker='o', color='red', linewidth=10)\nax.scatter(min_x0_lin_constr, min_x1_lin_constr, min_z_lin_constr, marker='o', color='blue', linewidth=10)\nax.plot_surface(X0_lin_1, X1_lin_1, Z_lin_1, color='green', alpha=0.2)\nax.plot_surface(X0_lin_2, X1_lin_2, Z_lin_1, color='yellow', alpha=0.2)\nax.set_xlabel('$x_{0}$')\nax.set_ylabel('$x_{1}$')\nax.set_zlabel('$f(x)$')\nax.axes.yaxis.set_ticklabels([])\nax.view_init(0, 80)\n\n# Third subplot\nax = fig.add_subplot(1, 3, 3, projection='3d')\nax.contour3D(X0, X1, Z, 40, cmap='plasma')\nax.scatter(min_x0, min_x1, min_z, marker='o', color='red', linewidth=10)\nax.scatter(min_x0_lin_constr, min_x1_lin_constr, min_z_lin_constr, marker='o', color='blue', linewidth=10)\nax.plot_surface(X0_lin_1, X1_lin_1, Z_lin_1, color='green', alpha=1)\nax.plot_surface(X0_lin_2, X1_lin_2, Z_lin_1, color='yellow', alpha=1)\nax.set_xlabel('$x_{0}$')\nax.set_ylabel('$x_{1}$')\nax.set_zlabel('$f(x)$')\nax.axes.zaxis.set_ticklabels([])\nax.view_init(89, -90);\n```", "```py\nnon_linear_eq= lambda x: x[0]**2 + x[1]**2\n\nnon_linear_constr = NonlinearConstraint(\n    non_linear_eq, 0.2, np.inf)\n\nresult = minimize(\n    f, np.array([0.5, 1]), method='trust-constr', jac=df, constraints=non_linear_constr)\n\nresult.x.round(3)\n```", "```py\narray([-0., 0.447])\n```", "```py\nresult = minimize(\n    f, \n    x_start, \n    method='trust-constr', \n    jac=df, \n    bounds=bounds,\n    constraints=[linear_constraint, non_linear_constr]\n)\n\nresult.x.round(3)\n```", "```py\narray([0.25, 0.371])\n```"]