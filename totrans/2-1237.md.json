["```py\nimport requests\nimport json\n\ndef get_tmdb_api_key():\n\n headers = {\"X-Aws-Parameters-Secrets-Token\": os.environ.get(\"AWS_SESSION_TOKEN\")}\n\n secrets_extension_endpoint = (\n \"http://localhost:\"\n + \"2773\"\n + \"/secretsmanager/get?secretId=\"\n + \"<< your secrets arn >>\"\n )\n\n r = requests.get(secrets_extension_endpoint, headers=headers)\n secret = json.loads(r.text)[\"SecretString\"]\n secret = json.loads(secret)\n TMDB_API_KEY = secret[\"TMDB_API\"]\n\n return TMDB_API_KEY\n```", "```py\ndef write_to_s3(df, type, imdb_id): \n\n # Get JSON for the DataFrame\n output = json.loads(df.to_json(orient='records'))\n\n string = str(output)\n encoded_string = string.encode(\"utf-8\")\n\n bucket_name = \"lambda-tmdb\"\n file_name = \"out.json\"\n s3_path = \"output/\" + type + \"/\" + imdb_id + \"-\" + type + \"-\" + file_name\n\n s3 = boto3.resource('s3')\n object = s3.Object(bucket_name, s3_path)\n object.put(Body=encoded_string)\n\n return \"Success\"\n```", "```py\nwrite_to_s3(df_crew, \"crew\", imdb_id)\n```", "```py\n# delete the old zip\nrm tmdb-deployment-package.zip\n\n# change the directory to the site-packages directory and zip the contents\ncd venv/lib/python3.9/site-packages\n\n# Explicitly add the tmdbsimple package folders needed for the lambda function\nzip -r ../../../../tmdb-deployment-package.zip tmdbsimple tmdbsimple-2.9.1.dist-info\n\n# change back to the root directory and add the needed python files\ncd ../../../../\nzip -g tmdb-deployment-package.zip lambda_function.py\n\n# deploy to AWS Lambda\naws lambda update-function-code --function-name lambda-tmdb --zip-file fileb://tmdb-deployment-package.zip\n```", "```py\nAPI Gateway URL + ?ids=tt0162346&ids=tt0326900\n```", "```py\nparams = event[\"multiValueQueryStringParameters\"]\n\nid_list = params['ids']\n```", "```py\n$context.integrationErrorMessage\n```", "```py\ndef lambda_handler(event, context):\n\n    # Get the IDs from the Query String\n    params = event[\"multiValueQueryStringParameters\"]\n    id_list = params['ids']\n\n    # Get credentials from Secrets Manager\n    KEY = get_tmdb_api_key()\n\n    # Loop through the IDs passed and do something with them\n    for i in range(len(id_list)):\n\n        imdb_id = id_list[i]\n\n        # Get the movie details\n        # CODE NOT SHOWN\n        # Save the movie details as a dataframe\n\n        # write it to S3\n        write_to_s3(df_crew, \"crew\", imdb_id)\n\n    # return a success message in the proper format for a Lambda function\n    return {\n        \"statusCode\": 200,\n        \"headers\": {\"Content-Type\": \"application/json\"},\n        \"body\": \"Success\",\n    }\n```"]