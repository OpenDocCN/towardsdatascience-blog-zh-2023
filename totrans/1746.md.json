["```py\ndef validate_simple(data: Any) -> Literal[True]:\n    ...\n```", "```py\ndef validate_simple(data: Any) -> bool:\n    ...\n```", "```py\nColors = Literal[\"white\", \"black\", \"grey\"]\nGrey = Literal[\"grey\", \"gray\", \"shades of grey\", \"shades of gray\"]\nMode = Literal[\"read\", \"write\", \"append\"]\n```", "```py\nDays = Literal[\n    \"Monday\", \"Tuesday\", \"Wednesday\",\n    \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"\n]\n```", "```py\nLiteral[1, 5, 22] # integers\nLiteral[\"1\", \"5\", \"22\"] # strings\n```", "```py\nUnion[int, str]\n```", "```py\nTens = Literal[10, \"10\", \"ten\"]\n```", "```py\nPositives = Literal[True, 1, \"true\", \"yes\"]\nNegatives = Literal[False, 0, \"false\", \"no\"]\nYesOrNo = Literal[Positives, Negatives]\n```", "```py\nfrom typing import Any, get_args, Literal, Optional\n\nTens = Literal[10, \"10\", \"ten\"]\n```", "```py\ndef is_ten(obj: Any) -> Optional[Tens]:\n    if obj in get_args(Tens):\n        return obj\n    return None\n```", "```py\nfrom typing import Literal\nfrom enum import Enum\n\nColorsL = Literal[\"white\", \"black\", \"grey\"]\n\nclass ColorsE(Enum):\n    WHITE = \"white\"\n    BLACK = \"black\"\n    GREY = \"grey\"\n```", "```py\nColorsE2 = Enum(\"ColorsE2\", [\"WHITE\", \"BLACK\", \"GREY\"])\nColorsE3 = Enum(\"ColorsE3\", \"WHITE BLACK GREY\")\n```", "```py\nfrom typing import LiteralString\n\ndef foo(s: LiteralString) -> None\n    ...\n```", "```py\n>>> OneToTen = Literal[i for i in range(1, 11)]\n  File \"<stdin>\", line 1\n    OneToTen = Literal[i for i in range(1, 11)]\n                         ^^^\nSyntaxError: invalid syntax\n```", "```py\n>>> OneToTen = Literal[[i for i in range(1, 11)]]\n```", "```py\n>>> OneToTen\ntyping.Literal[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\n>>> get_args(OneToTen)\n([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],)\n```", "```py\n>>> get_args(OneToTen)\n([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],)\n>>> OneToTen.__args__\n([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],)\n>>> get_args(OneToTen) == OneToTen.__args__\nTrue\n```", "```py\n>>> OneToTen.__args__ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n>>> OneToTen\ntyping.Literal[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```", "```py\n>>> OneToTen == Literal[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nTrue\n>>> OneToTen.__args__ = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n>>> OneToTen == Literal[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nTrue\n>>> OneToTen.__args__ = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n>>> OneToTen == Literal[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nTrue\n```", "```py\n>>> OneToTen.__args__ = [i for i in range(1, 11)]\n>>> OneToTen == Literal[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nTrue\n>>> OneToTen.__args__ = list(range(1, 11))\n>>> OneToTen == Literal[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nTrue\n>>> OneToTen.__args__ = {i for i in range(1, 11)}\n>>> OneToTen == Literal[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nTrue\n```", "```py\n>>> OneToTen.__args__ = range(1, 11)\n>>> OneToTen == Literal[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nTrue\n>>> OneToTen.__args__ = (i for i in range(1, 11))\n>>> OneToTen == Literal[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nFalse\n>>> OneToTen.__args__ \n<generator object <genexpr> at 0x7f...>\n```"]