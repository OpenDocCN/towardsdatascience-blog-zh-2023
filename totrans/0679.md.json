["```py\nimport numpy as np\nimport pandas as pd\n\n# Create data frame of all possible outcomes\ndecision_list = ['Oakland', 'Las Vegas']\n\n# First Node\nchance_node_stadium_money_scenarios = ['Optimistic', 'Neutral', 'Pessimistic']\nchance_node_stadium_money_probabilities_oakland = [0.1, 0.3, 0.6]\nchance_node_stadium_money_probabilities_vegas = [0.5, 0.4, 0.1]\nchance_node_stadium_money_values = [855, 500, 0]\n\n#Second Node\nchance_node_ticket_sales_scenarios = ['Optimistic', 'Neutral', 'Pessimistic']\nchance_node_ticket_sales_probabilities_oakland = [0.2, 0.2, 0.6]\nchance_node_ticket_sales_probabilities_vegas = [0.3, 0.4, 0.3]\nchance_node_ticket_sales_values_per_year = [80, 55, 27]\n\n# Third Node\nchance_node_rsn_revenue_scenarios = ['Optimistic', 'Neutral', 'Pessimistic']\nchance_node_rsn_revenue_probabilities_oakland = [0.15, 0.5, 0.35]\nchance_node_rsn_revenue_probabilities_vegas = [0.1, 0.3, 0.6]\nchance_node_rsn_revenue_values_per_year = [60, 45, 36]\n\n# Convert annual values to NPV of 10 year time horizon\ntime_horizon = 10 # years\ndiscount_rate = 0.03 # per year\nchance_node_ticket_sales_values = [val * (1 - (1/((1 + discount_rate)**time_horizon)))/discount_rate for val in chance_node_ticket_sales_values_per_year]\nchance_node_rsn_revenue_values = [val * (1 - (1/((1 + discount_rate)**time_horizon)))/discount_rate for val in chance_node_rsn_revenue_values_per_year]\n\n# Create data frame of all possible scenarios\ndecision_list_list_for_df = []\nchance_node_stadium_money_list_for_df = []\nchance_node_stadium_money_probability_list_for_df = []\nchance_node_stadium_money_value_list_for_df = []\nchance_node_ticket_sales_list_for_df = []\nchance_node_ticket_sales_probability_list_for_df = []\nchance_node_ticket_sales_value_list_for_df = []\nchance_node_rsn_revenue_list_for_df = []\nchance_node_rsn_revenue_probability_list_for_df = []\nchance_node_rsn_revenue_value_list_for_df = []\n\nfor i in decision_list:\n    for j in range(len(chance_node_stadium_money_scenarios)):\n        for k in range(len(chance_node_rsn_revenue_scenarios)):\n            for m in range(len(chance_node_rsn_revenue_scenarios)):\n                decision_list_list_for_df.append(i)\n                chance_node_stadium_money_list_for_df.append(chance_node_stadium_money_scenarios[j])\n                chance_node_stadium_money_value_list_for_df.append(chance_node_stadium_money_values[j])\n                chance_node_ticket_sales_list_for_df.append(chance_node_ticket_sales_scenarios[k])\n                chance_node_ticket_sales_value_list_for_df.append(chance_node_ticket_sales_values[k])\n                chance_node_rsn_revenue_list_for_df.append(chance_node_rsn_revenue_scenarios[m])\n                chance_node_rsn_revenue_value_list_for_df.append(chance_node_rsn_revenue_values[m])\n\n                if i == 'Oakland':\n                    chance_node_stadium_money_probability_list_for_df.append(chance_node_stadium_money_probabilities_oakland[j])\n                    chance_node_ticket_sales_probability_list_for_df.append(chance_node_ticket_sales_probabilities_oakland[k])\n                    chance_node_rsn_revenue_probability_list_for_df.append(chance_node_rsn_revenue_probabilities_oakland[m])\n                elif i == 'Las Vegas':\n                    chance_node_stadium_money_probability_list_for_df.append(chance_node_stadium_money_probabilities_vegas[j])\n                    chance_node_ticket_sales_probability_list_for_df.append(chance_node_ticket_sales_probabilities_vegas[k])\n                    chance_node_rsn_revenue_probability_list_for_df.append(chance_node_rsn_revenue_probabilities_vegas[m])\n\ndecision_tree_df = pd.DataFrame(list(zip(decision_list_list_for_df, chance_node_stadium_money_list_for_df,\n                                         chance_node_stadium_money_probability_list_for_df,\n                                         chance_node_stadium_money_value_list_for_df,\n                                         chance_node_ticket_sales_list_for_df,\n                                         chance_node_ticket_sales_probability_list_for_df,\n                                         chance_node_ticket_sales_value_list_for_df,\n                                         chance_node_rsn_revenue_list_for_df,\n                                         chance_node_rsn_revenue_probability_list_for_df,\n                                         chance_node_rsn_revenue_value_list_for_df)),\n                               columns = ['Decision',\n                                          'Stadium_Money_Result', 'Stadium_Money_Prob', 'Stadium_Money_Value',\n                                          'Ticket_Sales_Result', 'Ticket_Sales_Prob', 'Ticket_Sales_Value', \n                                          'RSN_Revenue_Result', 'RSN_Revenue_Prob', 'RSN_Revenue_Value'])\n```", "```py\ndecision_tree_df['RSN_EV'] = decision_tree_df['RSN_Revenue_Prob'] * decision_tree_df['RSN_Revenue_Value']\n\n# Consolidate the RSN_EV values\nRSN_rollback_df = decision_tree_df.groupby(['Decision', 'Stadium_Money_Result', 'Stadium_Money_Prob', 'Ticket_Sales_Result', 'Ticket_Sales_Prob'])['RSN_EV'].sum().reset_index()\n\n# Keep the rest of the columns\ndecision_tree_df = decision_tree_df.groupby(['Decision', 'Stadium_Money_Result', 'Stadium_Money_Prob', 'Ticket_Sales_Result', 'Ticket_Sales_Prob'])['Stadium_Money_Value', 'Ticket_Sales_Value'].mean().reset_index()\n\n# merge two dataframes\ndecision_tree_df = pd.merge(decision_tree_df, RSN_rollback_df, on = ['Decision', 'Stadium_Money_Result', 'Stadium_Money_Prob', 'Ticket_Sales_Result', 'Ticket_Sales_Prob'])\n```", "```py\ndecision_tree_df['Ticket_Sales_RSN_EV'] = decision_tree_df['Ticket_Sales_Prob'] * decision_tree_df['Ticket_Sales_Value'] + decision_tree_df['RSN_EV']\n\n# Consolidate the Ticket Sales and RSN_EV values\nticket_sales_rollback_df = decision_tree_df.groupby(['Decision', 'Stadium_Money_Result', 'Stadium_Money_Prob'])['Ticket_Sales_RSN_EV'].sum().reset_index()\n\n# Keep the rest of the columns\ndecision_tree_df = decision_tree_df.groupby(['Decision', 'Stadium_Money_Result', 'Stadium_Money_Prob'])['Stadium_Money_Value'].mean().reset_index()\n\n# merge two dataframes\ndecision_tree_df = pd.merge(decision_tree_df, ticket_sales_rollback_df, on = ['Decision', 'Stadium_Money_Result', 'Stadium_Money_Prob'])\n```", "```py\ndecision_tree_df['Stadium_Money_Ticket_Sales_RSN_EV'] = decision_tree_df['Stadium_Money_Prob'] * decision_tree_df['Stadium_Money_Value'] + decision_tree_df['Ticket_Sales_RSN_EV']\n\n# Consolidate the Stadium Money, Ticket Sales, and RSN_EV values\ndecision_tree_df = decision_tree_df.groupby(['Decision'])['Stadium_Money_Ticket_Sales_RSN_EV'].sum().reset_index()\n```", "```py\n# Number of simulations\nn_sim = 5000\n\n# Track scenarios\noakland_stadium_money_probabilities_optimistic_list = []\noakland_stadium_money_probabilities_neutral_list = []\noakland_stadium_money_probabilities_pessimistic_list = []\n\noakland_ticket_sales_probabilities_optimistic_list = []\noakland_ticket_sales_probabilities_neutral_list = []\noakland_ticket_sales_probabilities_pessimistic_list = []\n\noakland_rsn_revenue_probabilities_optimistic_list = []\noakland_rsn_revenue_probabilities_neutral_list = []\noakland_rsn_revenue_probabilities_pessimistic_list = []\n\nvegas_stadium_money_probabilities_optimistic_list = []\nvegas_stadium_money_probabilities_neutral_list = []\nvegas_stadium_money_probabilities_pessimistic_list = []\n\nvegas_ticket_sales_probabilities_optimistic_list = []\nvegas_ticket_sales_probabilities_neutral_list = []\nvegas_ticket_sales_probabilities_pessimistic_list = []\n\nvegas_rsn_revenue_probabilities_optimistic_list = []\nvegas_rsn_revenue_probabilities_neutral_list = []\nvegas_rsn_revenue_probabilities_pessimistic_list = []\n\noakland_EV_list = []\nvegas_EV_list = []\n\ndecision_list = []\n\n# Create data frame of all possible outcomes\ndecision_list = ['Oakland', 'Las Vegas']\n\n# First Node\nchance_node_stadium_money_scenarios = ['Optimistic', 'Neutral', 'Pessimistic']\nchance_node_stadium_money_values = [855, 500, 0]\n\n#Second Node\nchance_node_ticket_sales_scenarios = ['Optimistic', 'Neutral', 'Pessimistic']\nchance_node_ticket_sales_values_per_year = [80, 55, 27]\n\n# Third Node\nchance_node_rsn_revenue_scenarios = ['Optimistic', 'Neutral', 'Pessimistic']\nchance_node_rsn_revenue_values_per_year = [60, 45, 36]\n\n# Convert annual values to NPV of 10 year time horizon\ntime_horizon = 10 # years\ndiscount_rate = 0.03 # per year\nchance_node_ticket_sales_values = [val * (1 - (1/((1 + discount_rate)**time_horizon)))/discount_rate for val in chance_node_ticket_sales_values_per_year]\nchance_node_rsn_revenue_values = [val * (1 - (1/((1 + discount_rate)**time_horizon)))/discount_rate for val in chance_node_rsn_revenue_values_per_year]\n\n# Run the probabilistic sensitivity analysis n_sim times\nfor n in range(n_sim):\n\n    ## Set up tree\n    #First node\n    chance_node_stadium_money_probabilities_oakland = np.random.uniform(0,1,3)\n    chance_node_stadium_money_probabilities_oakland = chance_node_stadium_money_probabilities_oakland / np.sum(chance_node_stadium_money_probabilities_oakland)\n\n    chance_node_stadium_money_probabilities_vegas = np.random.uniform(0,1,3)\n    chance_node_stadium_money_probabilities_vegas = chance_node_stadium_money_probabilities_vegas / np.sum(chance_node_stadium_money_probabilities_vegas)\n\n    #Second Node\n    chance_node_ticket_sales_probabilities_oakland = np.random.uniform(0,1,3)\n    chance_node_ticket_sales_probabilities_oakland = chance_node_ticket_sales_probabilities_oakland / np.sum(chance_node_ticket_sales_probabilities_oakland)\n\n    chance_node_ticket_sales_probabilities_vegas = np.random.uniform(0,1,3)\n    chance_node_ticket_sales_probabilities_vegas = chance_node_ticket_sales_probabilities_vegas / np.sum(chance_node_ticket_sales_probabilities_vegas)\n\n    # Third Node\n    chance_node_rsn_revenue_probabilities_oakland = np.random.uniform(0,1,3)\n    chance_node_rsn_revenue_probabilities_oakland = chance_node_rsn_revenue_probabilities_oakland / np.sum(chance_node_rsn_revenue_probabilities_oakland)\n\n    chance_node_rsn_revenue_probabilities_vegas = np.random.uniform(0,1,3)\n    chance_node_rsn_revenue_probabilities_vegas = chance_node_rsn_revenue_probabilities_vegas / np.sum(chance_node_rsn_revenue_probabilities_vegas)\n\n    # Evaluate Tree\n    # Create data frame of all possible scenarios\n    decision_list_list_for_df = []\n    chance_node_stadium_money_list_for_df = []\n    chance_node_stadium_money_probability_list_for_df = []\n    chance_node_stadium_money_value_list_for_df = []\n    chance_node_ticket_sales_list_for_df = []\n    chance_node_ticket_sales_probability_list_for_df = []\n    chance_node_ticket_sales_value_list_for_df = []\n    chance_node_rsn_revenue_list_for_df = []\n    chance_node_rsn_revenue_probability_list_for_df = []\n    chance_node_rsn_revenue_value_list_for_df = []\n\n    for i in decision_list:\n        for j in range(len(chance_node_stadium_money_scenarios)):\n            for k in range(len(chance_node_rsn_revenue_scenarios)):\n                for m in range(len(chance_node_rsn_revenue_scenarios)):\n                    decision_list_list_for_df.append(i)\n                    chance_node_stadium_money_list_for_df.append(chance_node_stadium_money_scenarios[j])\n                    chance_node_stadium_money_value_list_for_df.append(chance_node_stadium_money_values[j])\n                    chance_node_ticket_sales_list_for_df.append(chance_node_ticket_sales_scenarios[k])\n                    chance_node_ticket_sales_value_list_for_df.append(chance_node_ticket_sales_values[k])\n                    chance_node_rsn_revenue_list_for_df.append(chance_node_rsn_revenue_scenarios[m])\n                    chance_node_rsn_revenue_value_list_for_df.append(chance_node_rsn_revenue_values[m])\n\n                    if i == 'Oakland':\n                        chance_node_stadium_money_probability_list_for_df.append(chance_node_stadium_money_probabilities_oakland[j])\n                        chance_node_ticket_sales_probability_list_for_df.append(chance_node_ticket_sales_probabilities_oakland[k])\n                        chance_node_rsn_revenue_probability_list_for_df.append(chance_node_rsn_revenue_probabilities_oakland[m])\n                    elif i == 'Las Vegas':\n                        chance_node_stadium_money_probability_list_for_df.append(chance_node_stadium_money_probabilities_vegas[j])\n                        chance_node_ticket_sales_probability_list_for_df.append(chance_node_ticket_sales_probabilities_vegas[k])\n                        chance_node_rsn_revenue_probability_list_for_df.append(chance_node_rsn_revenue_probabilities_vegas[m])\n\n    decision_tree_df = pd.DataFrame(list(zip(decision_list_list_for_df, chance_node_stadium_money_list_for_df,\n                                             chance_node_stadium_money_probability_list_for_df,\n                                             chance_node_stadium_money_value_list_for_df,\n                                             chance_node_ticket_sales_list_for_df,\n                                             chance_node_ticket_sales_probability_list_for_df,\n                                             chance_node_ticket_sales_value_list_for_df,\n                                             chance_node_rsn_revenue_list_for_df,\n                                             chance_node_rsn_revenue_probability_list_for_df,\n                                             chance_node_rsn_revenue_value_list_for_df)),\n                                   columns = ['Decision',\n                                              'Stadium_Money_Result', 'Stadium_Money_Prob', 'Stadium_Money_Value',\n                                              'Ticket_Sales_Result', 'Ticket_Sales_Prob', 'Ticket_Sales_Value', \n                                              'RSN_Revenue_Result', 'RSN_Revenue_Prob', 'RSN_Revenue_Value'])\n    decision_tree_df['RSN_EV'] = decision_tree_df['RSN_Revenue_Prob'] * decision_tree_df['RSN_Revenue_Value']\n\n    # Consolidate the RSN_EV values\n    RSN_rollback_df = decision_tree_df.groupby(['Decision', 'Stadium_Money_Result', 'Stadium_Money_Prob', 'Ticket_Sales_Result', 'Ticket_Sales_Prob'])['RSN_EV'].sum().reset_index()\n\n    # Keep the rest of the columns\n    decision_tree_df = decision_tree_df.groupby(['Decision', 'Stadium_Money_Result', 'Stadium_Money_Prob', 'Ticket_Sales_Result', 'Ticket_Sales_Prob'])['Stadium_Money_Value', 'Ticket_Sales_Value'].mean().reset_index()\n\n    # merge two dataframes\n    decision_tree_df = pd.merge(decision_tree_df, RSN_rollback_df, on = ['Decision', 'Stadium_Money_Result', 'Stadium_Money_Prob', 'Ticket_Sales_Result', 'Ticket_Sales_Prob'])\n\n    decision_tree_df['Ticket_Sales_RSN_EV'] = decision_tree_df['Ticket_Sales_Prob'] * decision_tree_df['Ticket_Sales_Value'] + decision_tree_df['RSN_EV']\n\n    # Consolidate the Ticket Sales and RSN_EV values\n    ticket_sales_rollback_df = decision_tree_df.groupby(['Decision', 'Stadium_Money_Result', 'Stadium_Money_Prob'])['Ticket_Sales_RSN_EV'].sum().reset_index()\n\n    # Keep the rest of the columns\n    decision_tree_df = decision_tree_df.groupby(['Decision', 'Stadium_Money_Result', 'Stadium_Money_Prob'])['Stadium_Money_Value'].mean().reset_index()\n\n    # merge two dataframes\n    decision_tree_df = pd.merge(decision_tree_df, ticket_sales_rollback_df, on = ['Decision', 'Stadium_Money_Result', 'Stadium_Money_Prob'])\n\n    decision_tree_df['Stadium_Money_Ticket_Sales_RSN_EV'] = decision_tree_df['Stadium_Money_Prob'] * decision_tree_df['Stadium_Money_Value'] + decision_tree_df['Ticket_Sales_RSN_EV']\n\n    # Consolidate the Stadium Money, Ticket Sales, and RSN_EV values\n    decision_tree_df = decision_tree_df.groupby(['Decision'])['Stadium_Money_Ticket_Sales_RSN_EV'].sum().reset_index()\n\n    # Fill out lists for meta-model inputs\n    oakland_stadium_money_probabilities_optimistic_list.append(chance_node_stadium_money_probabilities_oakland[0])\n    oakland_stadium_money_probabilities_neutral_list.append(chance_node_stadium_money_probabilities_oakland[1])\n    oakland_stadium_money_probabilities_pessimistic_list.append(chance_node_stadium_money_probabilities_oakland[2])\n\n    oakland_ticket_sales_probabilities_optimistic_list.append(chance_node_ticket_sales_probabilities_oakland[0])\n    oakland_ticket_sales_probabilities_neutral_list.append(chance_node_ticket_sales_probabilities_oakland[1])\n    oakland_ticket_sales_probabilities_pessimistic_list.append(chance_node_ticket_sales_probabilities_oakland[2])\n\n    oakland_rsn_revenue_probabilities_optimistic_list.append(chance_node_rsn_revenue_probabilities_oakland[0])\n    oakland_rsn_revenue_probabilities_neutral_list.append(chance_node_rsn_revenue_probabilities_oakland[1])\n    oakland_rsn_revenue_probabilities_pessimistic_list.append(chance_node_rsn_revenue_probabilities_oakland[2])\n\n    vegas_stadium_money_probabilities_optimistic_list.append(chance_node_stadium_money_probabilities_vegas[0])\n    vegas_stadium_money_probabilities_neutral_list.append(chance_node_stadium_money_probabilities_vegas[1])\n    vegas_stadium_money_probabilities_pessimistic_list.append(chance_node_stadium_money_probabilities_vegas[2])\n\n    vegas_ticket_sales_probabilities_optimistic_list.append(chance_node_ticket_sales_probabilities_vegas[0])\n    vegas_ticket_sales_probabilities_neutral_list.append(chance_node_ticket_sales_probabilities_vegas[1])\n    vegas_ticket_sales_probabilities_pessimistic_list.append(chance_node_ticket_sales_probabilities_vegas[2])\n\n    vegas_rsn_revenue_probabilities_optimistic_list.append(chance_node_rsn_revenue_probabilities_vegas[0])\n    vegas_rsn_revenue_probabilities_neutral_list.append(chance_node_rsn_revenue_probabilities_vegas[1])\n    vegas_rsn_revenue_probabilities_pessimistic_list.append(chance_node_rsn_revenue_probabilities_vegas[2])\n\n    oakland_EV_list.append(decision_tree_df['Stadium_Money_Ticket_Sales_RSN_EV'][0])\n    vegas_EV_list.append(decision_tree_df['Stadium_Money_Ticket_Sales_RSN_EV'][1])\n\n    print(n)\n```", "```py\ndecision_tree_psa_data_df = pd.DataFrame(list(zip(oakland_stadium_money_probabilities_optimistic_list, \n                                         oakland_stadium_money_probabilities_neutral_list,\n                                         oakland_stadium_money_probabilities_pessimistic_list,\n                                         oakland_ticket_sales_probabilities_optimistic_list,\n                                         oakland_ticket_sales_probabilities_neutral_list,\n                                         oakland_ticket_sales_probabilities_pessimistic_list,\n                                         oakland_rsn_revenue_probabilities_optimistic_list,\n                                         oakland_rsn_revenue_probabilities_neutral_list,\n                                         oakland_rsn_revenue_probabilities_pessimistic_list,\n                                         vegas_stadium_money_probabilities_optimistic_list,\n                                         vegas_stadium_money_probabilities_neutral_list, \n                                         vegas_stadium_money_probabilities_pessimistic_list,\n                                         vegas_ticket_sales_probabilities_optimistic_list,\n                                         vegas_ticket_sales_probabilities_neutral_list,\n                                         vegas_ticket_sales_probabilities_pessimistic_list,\n                                         vegas_rsn_revenue_probabilities_optimistic_list,\n                                         vegas_rsn_revenue_probabilities_neutral_list, \n                                         vegas_rsn_revenue_probabilities_pessimistic_list,\n                                         oakland_EV_list, vegas_EV_list)),\n                                   columns = ['oakland_stad_mon_prob_optimistic',\n                                              'oakland_stad_mon_prob_neutral',\n                                              'oakland_stad_mon_prob_pessimistic',\n                                              'oakland_ticket_sales_prob_optimistic',\n                                              'oakland_ticket_sales_prob_neutral',\n                                              'oakland_ticket_sales_prob_pessimistic',\n                                              'oakland_rsn_rev_prob_optimistic',\n                                              'oakland_rsn_rev_prob_neutral',\n                                              'oakland_rsn_rev_prob_pessimistic',\n                                              'vegas_stad_mon_prob_optimistic',\n                                              'vegas_stad_mon_prob_neutral',\n                                              'vegas_stad_mon_prob_pessimistic',\n                                              'vegas_ticket_sales_prob_optimistic',\n                                              'vegas_ticket_sales_prob_neutral',\n                                              'vegas_ticket_sales_prob_pessimistic',\n                                              'vegas_rsn_rev_prob_optimistic',\n                                              'vegas_rsn_rev_prob_neutral',\n                                              'vegas_rsn_rev_prob_pessimistic',\n                                              'oakland_EV', 'vegas_EV'])\n\n# Add decision based on EV\ndecision_tree_psa_data_df['decision'] = 'Oakland'\ndecision_tree_psa_data_df.loc[decision_tree_psa_data_df['vegas_EV'] > decision_tree_psa_data_df['oakland_EV'],'decision'] = 'Las Vegas'\n```", "```py\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\n\n#Features\nX = decision_tree_psa_data_df.drop(['oakland_EV', 'vegas_EV', 'decision'], axis = 1)\n#labels\ny = decision_tree_psa_data_df['decision']\n\n# split into train (70%) and test set (30%)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=32)\n\n# Create decision tree model with maximum depth of 3 to keep recommendation managable\ndec_tree_model = tree.DecisionTreeClassifier(random_state=32, max_depth = 3, class_weight = 'balanced')\ndec_tree_model = dec_tree_model.fit(X_train, y_train)\n```", "```py\nfrom sklearn.metrics import roc_auc_score\nroc_auc_score(y_test, dec_tree_model.predict_proba(X_test)[:, 1])\n```", "```py\n# Plot decision tree results to see how decisions were made\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize = (14,14))\ntree.plot_tree(dec_tree_model, filled = True, feature_names = X.columns, fontsize = 8, class_names = ['Las Vegas', 'Oakland'])\nplt.show()\n```", "```py\n# 10-fold cross-validation scores\ncross_val_score(dec_tree_model, X, y, cv=10)\n```"]