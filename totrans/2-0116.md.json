["```py\n# INPUT\n10\n20\n30\n\n50\n60\n70\n\n# DESIRED OUTPUT\n[[10, 20, 30], [50, 60 70]]\n```", "```py\nnumbers = []\nwith open(\"file.txt\") as f:\n  group = []\n  for line in f:\n    if line == \"\\n\":\n      numbers.append(group)\n      group = []\n    else:\n      group.append(int(line.rstrip()))\n  # append the last group because if line == \"\\n\" will not be True for\n  # the last group\n  numbers.append(group)\n```", "```py\nwith open(\"file.txt\") as f:\n  # split input into groups based on empty lines\n  groups = f.read().rstrip().split(\"\\n\\n\")\n  # convert all the values in the groups into integers\n  nums = [list(map(int, (group.split()))) for group in groups]\n```", "```py\n# INPUT\nX\nY\nZ\n\n# DESIRED OUTPUT\n1\n2\n3\n```", "```py\ndef points_per_shape(shape: str) -> int:\n  if shape == 'X':\n    return 1\n  elif shape == 'Y':\n    return 2\n  elif shape == 'Z':\n    return 3\n  else:\n    raise ValueError('Invalid shape')\n```", "```py\nfrom enum import Enum\n\nclass ShapePoints(Enum):\n  X = 1\n  Y = 2\n  Z = 3\n\ndef points_per_shape(shape: str) -> int:\n  return ShapePoints[shape].value\n```", "```py\n# INPUT\nc\nZ\na\n...\n\n# DESIRED OUPUT\n3\n52\n1\n...\n```", "```py\nletters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\nletter_dict = dict()\nfor value, letter in enumerate(letters, start=1):\n  letter_dict[letter] = value\n\ndef letter_value(ltr: str) -> int:\n  return letter_dict[ltr]\n```", "```py\ndef letter_value(ltr: str) -> int\n  return 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.index(ltr) + 1\n```", "```py\ndef points_per_shape(shape: str) -> int:\n  return 'XYZ'.index(shape) + 1\n```", "```py\n# INPUT\n    [D]    \n[N] [C]    \n[Z] [M] [P]\n\n# DESIRED OUTPUT\n[' D ', 'NC', 'ZMP']\n```", "```py\nletters = []\nwith open('input.txt') as f:\n  for line in f:\n    row = ''\n    for index in range(1, len(line), 4):\n      row += line[index]\n    letters.append(row)\n```", "```py\nwith open('input.txt') as f:\n  letters = [line[1::4] for line in f]\n```", "```py\nclass Monkey:\n  monkeys: dict = dict()\n\n  def __init__(self, id: int):\n      self.id = id\n      self.bananas = 3\n      Monkey.monkeys[id] = self\n\n  def pass_banana(self, to_id: int):\n      Monkey.monkeys[to_id].bananas += 1\n      self.bananas -= 1\n\nMonkey(1)\nMonkey(2)\nMonkey.monkeys[1].pass_banana(to_id=2)\n\nprint(Monkey.monkeys[1].bananas)\n2\n\nprint(Monkey.monkeys[2].bananas)\n4\n```", "```py\n# INPUT\nx = 10 * 2\ny = 3 * 7\n\nmax(x,y)\n\n# DESIRED OUTPUT\nx = 20\ny = 21\n\nmax(x,y) = 21\n```", "```py\nprint(f\"x = {x}\")\nprint(f\"y = {y}\")\n\nprint(f\"max(x,y) = {max(x,y)}\")\n```", "```py\nprint(f\"{x = }\")\nprint(f\"{y = }\")\n\nprint(f\"{max(x,y) = }\")\n```"]