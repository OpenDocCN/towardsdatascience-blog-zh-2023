- en: The Minimalist’s Guide to Experiment Tracking with DVC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/the-minimalists-guide-to-experiment-tracking-with-dvc-f07e4636bdbb](https://towardsdatascience.com/the-minimalists-guide-to-experiment-tracking-with-dvc-f07e4636bdbb)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/40caa436b9fce122c4b24ed80894039f.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by Zarak Khan from [pexels.com](https://www.pexels.com/photo/a-minimalist-workspace-4256211/)
  prefs: []
  type: TYPE_NORMAL
- en: The bare minimum guide to get you started with experiment tracking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://eryk-lewinson.medium.com/?source=post_page-----f07e4636bdbb--------------------------------)[![Eryk
    Lewinson](../Images/56e09e19c0bbfecc582da58761d15078.png)](https://eryk-lewinson.medium.com/?source=post_page-----f07e4636bdbb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f07e4636bdbb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f07e4636bdbb--------------------------------)
    [Eryk Lewinson](https://eryk-lewinson.medium.com/?source=post_page-----f07e4636bdbb--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f07e4636bdbb--------------------------------)
    ·6 min read·May 15, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: This article is the third part of a series demonstrating how to utilize DVC
    and its VS Code extension for ML experimentation. In the [first part](/turn-vs-code-into-a-one-stop-shop-for-ml-experiments-49c97c47db27),
    I illustrated the entire setup of an ML project and demonstrated how to track
    and evaluate experiments within VS Code. In the [second part](/enhance-your-ml-experimentation-workflow-with-real-time-plots-434106b1a1c2),
    I showed how to use different types of plots, including live-plots, for experiment
    evaluation.
  prefs: []
  type: TYPE_NORMAL
- en: After reading these articles, you may be interested in using DVC for your next
    project. However, you may have thought that setting it up would require a lot
    of work, for example, with defining pipelines and versioning data. Perhaps for
    your next quick experiment, this would be an overkill, and you decided not to
    give it a try. That would be a pity!
  prefs: []
  type: TYPE_NORMAL
- en: And while there is a very good reason for having all of those steps there —
    your project will be fully tracked and reproducible —I understand that sometimes
    we are under a lot of pressure and need to experiment and iterate quickly. That
    is why in this article I will show you the bare minimum that is required to start
    tracking your experiments with DVC.
  prefs: []
  type: TYPE_NORMAL
- en: From zero to experiment tracking in a few lines of code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we dive into coding, I wanted to provide a bit more context about the
    toy example we will be using. The goal is to build a model that will identify
    fraudulent credit card transactions. The dataset (available on [Kaggle](https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud))
    can be considered highly imbalanced, with only 0.17% of the observations belonging
    to the positive class.
  prefs: []
  type: TYPE_NORMAL
- en: As I promised in the introduction, we will cover the bare minimum scenario in
    which you can almost immediately start tracking your experiments. Besides some
    standard libraries, we will be using the `dvc` and `dvclive` libraries, as well
    as the [DVC VS Code extension](https://marketplace.visualstudio.com/items?itemName=Iterative.dvc).
    The last one is not a hard requirement. We can inspect the tracked experiments
    from the command line. However, I prefer to use the special tabs integrated into
    the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by creating the bare-bones script. In this short script, we load
    the data, split it into training and test sets, fit the model, and evaluate its
    performance on the test set. You can see the entire script in the snippet below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the script returns the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: I don’t think I need to convince you that writing down those numbers on a piece
    of paper or in a spreadsheet is not the best way to track your experiments. This
    is especially true because we not only need to track the output, but it also crucial
    to know which code and potentially hyperparameters resulted in that score. Without
    knowing that, we can never reproduce the results of our experiments.
  prefs: []
  type: TYPE_NORMAL
- en: Having said that, let’s implement experiment tracking with DVC. First, we need
    to initialize DVC. We can do so by running the following code in the terminal
    (within our project’s root directory).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Then, we need to slightly modify our code using `dvclive`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The only part that has changed is the evaluation. Using the `Live` context,
    we are logging the parameters of the model (stored in the `train_params` dictionary)
    and the same scores that we have printed before. We can track [other things as
    well](https://dvc.org/doc/dvclive/how-it-works), for example, plots or images.
    To help you get started even faster, you can find a lot of useful code snippets
    in the [documentation](https://dvc.org/doc/dvclive/live) of `dvclive` or on the
    Setup screen of the DVC extension.
  prefs: []
  type: TYPE_NORMAL
- en: Before looking into the results, it makes sense to mention that `dvclive` expects
    each run to be tracked by Git. This means that it will save each run to the same
    path and overwrite the results each time. We specified `save_dvc_exp=True` to
    auto-track as a DVC experiment. Behind the scenes, DVC experiments are Git commits
    that DVC can identify, but at the same time, they do not clutter our Git history
    or create extra branches.
  prefs: []
  type: TYPE_NORMAL
- en: After running our modified script, we can inspect the results in the *Experiments*
    panel of the DVC extension. As we can see, the scores match the ones we have manually
    printed into the console.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8f7bc8a228daa2080b3b36615f44306d.png)'
  prefs: []
  type: TYPE_IMG
- en: To clearly see the benefits of setting up our tracking, we can quickly run another
    experiment. For example, let’s say we believe that we should decrease the `max_depth`
    hyperparameter to 5\. To do this, we simply change the value of the hyperparameter
    in the `train_params` dictionary and run the script again. We can then immediately
    see the results of the new experiment in the summary table. Additionally, we can
    see which combination of hyperparameters resulted in that score.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/18a3fad85e5ff978b53e3204205d021f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Nice and simple! Naturally, the simplified example we have presented can be
    easily extended. For example, we could:'
  prefs: []
  type: TYPE_NORMAL
- en: Track plots and compare the experiments using, for example, their ROC curves.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a DVC pipeline to ensure the reproducibility of each step of our project
    (loading data, processing, splitting, etc.).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a `params.yaml` file to parameterize all steps in our pipeline, including
    the training of an ML model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use DVC callbacks. In our example, we have manually stored information about
    the model’s hyperparameters and its performance. For frameworks such as XGBoost,
    LightGBM, or Keras, we could use callbacks that store all that information for
    us automatically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we explored the simplest experimentation tracking setup using
    DVC. I know that it can be daunting to start a project and already think about
    data versioning, reproducible pipelines, and so on. However, using the approach
    described in this article, we can start tracking our experiments with as little
    overhead as possible. While for larger projects, I would still highly encourage
    using all the tools that ensure reproducibility, for smaller ad-hoc experiments,
    this approach is definitely more appealing.
  prefs: []
  type: TYPE_NORMAL
- en: As always, any constructive feedback is more than welcome. You can reach out
    to me on [Twitter](https://twitter.com/erykml1) or in the comments. You can find
    all the code used for this article in [this repository](https://github.com/erykml/dvc_minimalist).
  prefs: []
  type: TYPE_NORMAL
- en: '*Liked the article? Become a Medium member to continue learning by reading
    without limits. If you use* [*this link*](https://eryk-lewinson.medium.com/membership)
    *to become a member, you will support me at no extra cost to you. Thanks in advance
    and see you around!*'
  prefs: []
  type: TYPE_NORMAL
- en: 'You might also be interested in one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/11-useful-pandas-functionalities-you-might-have-overlooked-ad080527c768?source=post_page-----f07e4636bdbb--------------------------------)
    [## 11 Useful Pandas Functionalities You Might Have Overlooked'
  prefs: []
  type: TYPE_NORMAL
- en: Part 3 of the series exploring the hidden gems of pandas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/11-useful-pandas-functionalities-you-might-have-overlooked-ad080527c768?source=post_page-----f07e4636bdbb--------------------------------)
    [](https://medium.com/geekculture/top-10-vs-code-extensions-for-data-science-ce3e24e24347?source=post_page-----f07e4636bdbb--------------------------------)
    [## Top 10 VS Code Extensions for Data Science
  prefs: []
  type: TYPE_NORMAL
- en: Enhance Your Productivity with These Must-Have Tools!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/geekculture/top-10-vs-code-extensions-for-data-science-ce3e24e24347?source=post_page-----f07e4636bdbb--------------------------------)
    [](/turn-vs-code-into-a-one-stop-shop-for-ml-experiments-49c97c47db27?source=post_page-----f07e4636bdbb--------------------------------)
    [## Turn VS Code into a One-Stop Shop for ML Experiments
  prefs: []
  type: TYPE_NORMAL
- en: How to run and evaluate experiments without leaving your IDE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/turn-vs-code-into-a-one-stop-shop-for-ml-experiments-49c97c47db27?source=post_page-----f07e4636bdbb--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: All images, unless noted otherwise, are by the author.
  prefs: []
  type: TYPE_NORMAL
