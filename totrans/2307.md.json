["```py\n### Multiple regression equation:\n\nY = β₀ + β₁X₁ + β₂X₂ + ... + βᵢXᵢ + ε\n```", "```py\n### VIF (Variance Inflation Factor) equation:\n\nVIF = 1/(1 - Rᵢ²)\n```", "```py\n#1 : not correlated\n#1–5 : moderately correlated\n#> 5 : highly correlated\n```", "```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n```", "```py\ndata = sns.load_dataset('mpg')\ndata.dropna(inplace=True)       #remove null rows\ndata.head()\n```", "```py\ndata.describe()\n```", "```py\ndata = data.iloc[:,0:-2]    # select columns\n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ndf_s = scaler.fit_transform(data)\ndf = pd.DataFrame(df_s, columns=data.columns)\ndf.head()\n```", "```py\nplt.figure(figsize=(9, 6))\nsns.heatmap(df.corr(), cmap='coolwarm', annot=True)\nplt.show()\n```", "```py\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor as vif\n\nvif_data = pd.DataFrame()\nvif_data[\"feature\"] = df.columns\n# calculating VIF for each feature\nvif_data[\"VIF\"] = [vif(df.values, i) for i in range(len(df.columns))]\n\nprint(vif_data)\n```", "```py\ndf1 = df[['mpg', 'cylinders', 'acceleration']]\ndf2 = df[['mpg', 'cylinders', 'displacement']]\n\n# VIF dataframe1\nvif_data1 = pd.DataFrame()\nvif_data1['feature'] = df1.columns\nvif_data1['VIF'] = [vif(df1.values, i) for i in range(len(df1.columns))]\nprint('model 1')\nprint(vif_data1)\n\n# VIF dataframe2\nvif_data2 = pd.DataFrame()\nvif_data2['feature'] = df2.columns\nvif_data2['VIF'] = [vif(df2.values, i) for i in range(len(df2.columns))]\nprint('model 2')  \nprint(vif_data2)\n```", "```py\nimport statsmodels.api as sm\ny1 = df1[['mpg']]\nX1 = df1[['cylinders', 'acceleration']]\n\nlm1 = sm.OLS(y1, X1)\nmodel1 = lm1.fit()\nmodel1.summary()\n```", "```py\ndef run_model(v1, v2, pd_):\n    mesh_size = 0.02\n    x_min, x_max = pd_[[v1]].min()[0], pd_[[v1]].max()[0] \n    y_min, y_max = pd_[[v2]].min()[0], pd_[[v2]].max()[0] \n    xrange = np.arange(x_min, x_max, mesh_size)\n    yrange = np.arange(y_min, y_max, mesh_size)\n    xx, yy = np.meshgrid(xrange, yrange)\n    return xx, yy, xrange, yrange\n```", "```py\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.svm import SVR\n\n#run and apply the model\nxx1, yy1, xr1, yr1 = run_model('cylinders', 'acceleration', X1)\npred1 = model1.predict(np.c_[xx1.ravel(), yy1.ravel()])\npred1 = pred1.reshape(xx1.shape)\n\n# plot the result\nfig = px.scatter_3d(df1, x='cylinders', y='acceleration', z='mpg')\nfig.update_traces(marker=dict(size=5))\nfig.add_traces(go.Surface(x=xr1, y=yr1, z=pred1, name='pred1'))\nfig.show()\n```", "```py\ny2 = df2[['mpg']]\nX2 = df2[['cylinders', 'displacement']]\n\nlm2 = sm.OLS(y2, X2)\nmodel2 = lm2.fit()\nmodel2.summary()\n```", "```py\n#run and apply the model\nxx2, yy2, xr2, yr2 = run_model('cylinders', 'displacement', X2)\npred2 = model2.predict(np.c_[xx2.ravel(), yy2.ravel()])\npred2 = pred2.reshape(xx2.shape)\n\n# plot the result\nfig = px.scatter_3d(df2, x='cylinders', y='displacement', z='mpg')\nfig.update_traces(marker=dict(size=5))\nfig.add_traces(go.Surface(x=xr2, y=yr2, z=pred2, name='pred2'))\nfig.show()\n```", "```py\n# randomly modify a row in the dataframe \nfrom random import *\nx = randint(1, len(df))\nmod_list = [i*1.25 for i in df.iloc[x,:]]   #multiply by 1.25\ndf_m = df.copy()\ndf_m.iloc[x] = mod_list\ndf_m\n```", "```py\ndf_m1 = df_m[['mpg', 'cylinders', 'acceleration']]\ndf_m2 = df_m[['mpg', 'cylinders', 'displacement']]\n\n# VIF dataframe1\nvif_data1 = pd.DataFrame()\nvif_data1['feature'] = df_m1.columns\nvif_data1['VIF'] = [vif(df_m1.values, i) for i in range(len(df_m1.columns))]\nprint('model m1')\nprint(vif_data1)\n\n###\n# VIF dataframe2\nvif_data2 = pd.DataFrame()\nvif_data2['feature'] = df_m2.columns\nvif_data2['VIF'] = [vif(df_m2.values, i) for i in range(len(df_m2.columns))]\nprint('model m2')  \nprint(vif_data2)\n```", "```py\ny_m1 = df_m1[['mpg']]\nX_m1 = df_m1[['cylinders', 'acceleration']]\n\nlm_m1 = sm.OLS(y_m1, X_m1)\nmodel_m1 = lm_m1.fit()\nmodel_m1.summary()\n```", "```py\ny_m2 = df_m2[['mpg']]\nX_m2 = df_m2[['cylinders', 'displacement']]\n\nlm_m2 = sm.OLS(y_m2, X_m2)\nmodel_m2 = lm_m2.fit()\nmodel_m2.summary()\n```", "```py\ndef compare_cef(base_m, mod_m, col):\n    val_base = base_m.summary().tables[1].as_html()\n    ml = pd.read_html(val_base, header=0, index_col=0)[0]\n\n    val_diff = mod_m.summary().tables[1].as_html()\n    ml_m = pd.read_html(val_diff, header=0, index_col=0)[0]\n\n    df_ = pd.DataFrame(abs(ml.iloc[:,0] - ml_m.iloc[:,0]))\n    df_.rename(columns={'coef': 'r '+str(col+1)}, inplace=True)\n    return df_\n```", "```py\nkeep_df1, keep_df2 = [], []\nfor n in range(len(df)):\n    mod_list = [i*1.25 for i in df.iloc[n,:]]\n    df_m = df.copy()\n    df_m.iloc[n] = mod_list\n\n    df_m1 = df_m[['mpg', 'cylinders', 'acceleration']]\n    y_m1, X_m1 = df_m1[['mpg']], df_m1[['cylinders', 'acceleration']]\n    lm_m1 = sm.OLS(y_m1, X_m1)\n    mdl_m1 = lm_m1.fit()\n\n    df_m2 = df_m[['mpg', 'cylinders', 'displacement']]\n    y_m2, X_m2 = df_m2[['mpg']], df_m2[['cylinders', 'displacement']]\n    lm_m2 = sm.OLS(y_m2, X_m2)\n    mdl_m2 = lm_m2.fit()\n\n    df_diff1 = compare_cef(model1, mdl_m1, n)\n    df_diff2 = compare_cef(model2, mdl_m2, n)\n    keep_df1.append(df_diff1)\n    keep_df2.append(df_diff2)\n\ndf_t1 = pd.concat(keep_df1, axis=1)\ndf_t2 = pd.concat(keep_df2, axis=1)\ndf_t = pd.concat([df_t1, df_t2], axis=0)\ndf_t\n```", "```py\nplt.figure(figsize=(16,2.5))\nsns.heatmap(df_t, cmap='Reds')\nplt.xticks([])\nplt.show()\n```", "```py\nx = 6     #select row number\nmod_list = [i*1.25 for i in df.iloc[x,:]]\ndf_m = df.copy()\ndf_m.iloc[x] = mod_list\n\ny_m1 = df_m[['mpg']]\nX_m1 = df_m[['cylinders', 'acceleration']]\nlm_m1 = sm.OLS(y_m1, X_m1)\nmodel_m1 = lm_m1.fit()\n\ny_m2 = df_m[['mpg']]\nX_m2 = df_m[['cylinders', 'displacement']]\nlm_m2 = sm.OLS(y_m2, X_m2)\nmodel_m2 = lm_m2.fit()\n```", "```py\n# run the model\npred_m1 = model_m1.predict(np.c_[xx1.ravel(), yy1.ravel()])\npred_m1 = pred_m1.reshape(xx1.shape)\n\n# plot the result\nfig = px.scatter_3d(df_m, x='cylinders', y='acceleration', z='mpg')\nfig.update_traces(marker=dict(size=5))\nfig.add_traces(go.Surface(x=xr1, y=yr1, z=pred1, name='pred'))\nfig.add_traces(go.Surface(x=xr1, y=yr1, z=pred_m1, name='pred_m1',\n                          colorscale = 'viridis_r'))\nfig.show()\n```", "```py\n# run the model\npred_m2 = model_m2.predict(np.c_[xx2.ravel(), yy2.ravel()])\npred_m2 = pred_m2.reshape(xx2.shape)\n\n# plot the result\nfig = px.scatter_3d(df_m, x='cylinders', y='displacement', z='mpg')\nfig.update_traces(marker=dict(size=5))\nfig.add_traces(go.Surface(x=xr2, y=yr2, z=pred2, name='pred'))\nfig.add_traces(go.Surface(x=xr2, y=yr2, z=pred_m2, name='pred_m2',\n                          colorscale = 'viridis_r'))\nfig.show()\n```"]