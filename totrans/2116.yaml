- en: Tips and Tricks to improve your R-Skills
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/tips-and-tricks-to-improve-your-r-skills-b0f58006d0c1](https://towardsdatascience.com/tips-and-tricks-to-improve-your-r-skills-b0f58006d0c1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn how to write efficient R code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://tinztwinspro.medium.com/?source=post_page-----b0f58006d0c1--------------------------------)[![Janik
    and Patrick Tinz](../Images/a08aa54f553f606ef5df86f9411c36ac.png)](https://tinztwinspro.medium.com/?source=post_page-----b0f58006d0c1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b0f58006d0c1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b0f58006d0c1--------------------------------)
    [Janik and Patrick Tinz](https://tinztwinspro.medium.com/?source=post_page-----b0f58006d0c1--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b0f58006d0c1--------------------------------)
    ·8 min read·May 11, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3c7d8cfed6ec4c5e7c742a51f3b4abbc.png)'
  prefs: []
  type: TYPE_IMG
- en: 1234567890-=Photo by [AltumCode](https://unsplash.com/es/@altumcode?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '**R** is widely used in business and science as a data analysis tool. The programming
    language is an essential tool for data driven tasks. For many Statisticians and
    Data Scientists, R is the first choice for statistical questions.'
  prefs: []
  type: TYPE_NORMAL
- en: Data Scientists often work with large amounts of data and complex statistical
    problems. Memory and runtime play a central role here. You need to write efficient
    code to achieve maximum performance. In this article, we present tips that you
    can use directly in your next R project.
  prefs: []
  type: TYPE_NORMAL
- en: Use code profiling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data Scientists often want to optimise their code to make it faster. In some
    cases, you will trust your intuition and try something out. This approach has
    the disadvantage that you probably optimise the wrong parts of your code. So you
    waste time and effort. You can only optimise your code if you know where your
    code is slow. The solution is **code profiling**. Code profiling helps you find
    slow code parts!
  prefs: []
  type: TYPE_NORMAL
- en: '[Rprof()](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/Rprof)
    is a built-in tool for code profiling. Unfortunately, Rprof() is not very user-friendly,
    so we do not recommend its direct use. We recommend the [profvis](http://rstudio.github.io/profvis/)
    package. Profvis allows the visualisation of the code profiling data from Rprof().
    You can install the package via the R console with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the next step, we do code profiling using an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you run this code in your [RStudio](https://posit.co/downloads/), then you
    will get the following output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e04e59d597c4247d6720c46a1c7beddf.png)'
  prefs: []
  type: TYPE_IMG
- en: Flame Graph (Image by authors)
  prefs: []
  type: TYPE_NORMAL
- en: At the top, you can see your R code with bar graphs for memory and runtime for
    each line of code. This display gives you an overview of possible problems in
    your code but does not help you to identify the exact cause. In the memory column,
    you can see how much memory (in MB) has been allocated (the bar on the right)
    and released (the bar on the left) for each call. The time column shows the runtime
    (in ms) for each line. For example, you can see that line 4 takes 280 ms.
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom, you can see the ***Flame Graph*** with the full called stack.
    This graph gives you an overview of the whole sequence of calls. You can move
    the mouse pointer over individual calls to get more information. It is also noticeable
    that the garbage collector (<GC>) takes a lot of time. But why? In the memory
    column, you can see in line 4 that there is an increased memory requirement. A
    lot of memory is allocated and released in line 4\. Each iteration creates another
    copy of `y`, resulting in increased memory usage. **Please avoid such copy-modify
    tasks!**
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the ***Data tab***. The ***Data tab*** gives you a compact
    overview of all calls and is particularly suitable for complex nested calls.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1529ea37bf7bfacfbf002501623cf37a.png)'
  prefs: []
  type: TYPE_IMG
- en: Data Tab (Image by authors)
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn more about provis, you can visit the [Github](https://github.com/rstudio/profvis)
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Vectorise your code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maybe you have heard of vectorisation. But what is that? Vectorisation is not
    just about avoiding `for()` loops. It goes one step further. You have to think
    in terms of vectors instead of scalars. Vectorisation is very important to speed
    up R code. Vectorised functions use loops written in C instead of R. Loops in
    C have less overhead, which makes them much faster. Vectorisation means finding
    the existing R function implemented in C that closely matches your task. The functions
    `rowSums()`, `colSums()`, `rowMeans()` and `colMeans()` are handy to speed up
    your R code. These vectorised matrix functions are always faster than the `apply()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'To measure the runtime, we use the R package [microbenchmark](https://cran.r-project.org/web/packages/microbenchmark/microbenchmark.pdf).
    In this package, the evaluations of all expressions are done in C to minimise
    the overhead. As an output, the package provides an overview of statistical indicators.
    You can install the microbenchmark package via the R Console with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, we compare the runtime of the `apply()` function with the `colMeans()`
    function. The following code example demonstrates it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In both cases, we calculate the mean value of each column of a data frame. To
    ensure the reliability of the result, we make 100 runs (`times=10`) using the
    microbenchmark package. As a result, we see that the `colMeans()` function is
    about three times faster.
  prefs: []
  type: TYPE_NORMAL
- en: We recommend the online book [R Advanced](https://adv-r.hadley.nz/perf-improve.html)
    if you want to learn more about vectorisation.
  prefs: []
  type: TYPE_NORMAL
- en: Matrices vs. Data frames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Matrices have some similarities with data frames. A matrix is a two-dimensional
    object. In addition, some functions work in the same way. A difference: All elements
    of a matrix must have the same type. Matrices are often used for statistical calculations.
    For example, the function lm() converts the input data internally into a matrix.
    Then the results are calculated. In general, matrices are faster than data frames.
    Now, we look at the runtime differences between matrices and data frames.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We perform 100 runs using the microbenchmark package to obtain a meaningful
    statistical evaluation. It is recognisable that the matrix access to the first
    row is about 30 times faster than for the data frame. **That’s impressive!** A
    matrix is significantly quicker, so you should prefer it to a data frame.
  prefs: []
  type: TYPE_NORMAL
- en: is.na() and anyNA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You probably know the function `is.na()` to check whether a vector contains
    missing values. There is also the function `anyNA()` to check if a vector has
    any missing values. Now we test which function has a faster runtime.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The evaluation shows that `anyNA()` is on average, significantly faster than
    `is.na()`. You should use `anyNA()` if possible.
  prefs: []
  type: TYPE_NORMAL
- en: if() … else() vs. ifelse()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`if() ... else()` is the standard control flow function and `ifelse()` is more
    user-friendly.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Ifelse()` works according to the following scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: From the point of view of many programmers, `ifelse()` is more understandable
    than the multiline alternative. The disadvantage is that `ifelse()` is not as
    computationally efficient. The following benchmark illustrates that `if() ...
    else()` runs more than 20 times faster.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You should avoid using `ifelse()` in complex loops, as it slows down your program
    considerably.
  prefs: []
  type: TYPE_NORMAL
- en: Parallel Computing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most computers have several processor cores, allowing parallel tasks to be
    processed. This concept is called parallel computing. The R package [parallel](https://stat.ethz.ch/R-manual/R-devel/library/parallel/doc/parallel.pdf)
    enables parallel computing in R applications. The package is pre-installed with
    base R. With the following commands, you can load the package and see how many
    cores your computer has:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Parallel data processing is ideal for Monte Carlo simulations. Each core independently
    simulates a realisation of the model. In the end, the results are summarised.
    The following example is based on the online book [Efficient R Programming](https://csgillespie.github.io/efficientR/performance.html#performance-parallel).
    First, we need to install the [devtools](https://cran.r-project.org/web/packages/devtools/index.html)
    package. With the help of this package, we can download the [efficient](https://github.com/csgillespie/efficient)
    package from GitHub. You must enter the following commands in the RStudio console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the efficient package, there is a function `snakes_ladders()` that simulates
    a single game of Snakes and Ladders. We will use the simulation to measure the
    runtime of the `sapply()` and `parSapply()` functions. `parSapply()` is the parallelised
    variant of `sapply()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The evaluation shows that `parSapply()` the simulation calculates on average
    about 3.5 x faster than the `sapply()` function. **Wow!** You can quickly integrate
    this tip into your existing R project.
  prefs: []
  type: TYPE_NORMAL
- en: R interface to other languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are cases where R is simply slow. You use all kinds of tricks, but your
    R code is still too slow. In this case, you should consider rewriting your code
    in another programming language. For other languages, there are interfaces in
    R in the form of R packages. Examples are [Rcpp](https://cran.r-project.org/web/packages/Rcpp/index.html)
    and [rJava](https://cran.r-project.org/web/packages/rJava/index.html). It is easy
    to write C++ code, especially if you have a software engineering background. Then
    you can use it in R.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you have to install Rcpp with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example demonstrates the approach:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: C++ is a powerful programming language, which makes it best suited for code
    acceleration. For very complex calculations, we recommend using C++ code.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we learned how to analyse R code. The provis package supports
    you in the analysis of your R code. You can use vectorised functions like `rowSums()`,
    `colSums()`, `rowMeans()` and `colMeans()` to accelerate your program. In addition,
    you should prefer matrices instead of data frames if possible. Use `anyNA()` instead
    of `is.na()` to check if a vector has any missing values. You speed up your R
    code by using `if() ... else()` instead of `ifelse()`. Furthermore, you can use
    parallelised functions from the parallel package for complex simulations. You
    can achieve maximum performance for complex code sections by using the Rcpp package.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some books for learning R. You will find three books that we think
    are very good for learning efficient R programming in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Efficient R Programming: A Practical Guide to Smarter Programming'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hands-On Programming with R: Write Your Own Functions and Simulations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'R for Data Science: Import, Tidy, Transform, Visualize, and Model Data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 👉🏽 [**Join our free weekly Magic AI newsletter for the latest AI updates!**](https://magicai.tinztwins.de)
  prefs: []
  type: TYPE_NORMAL
- en: 👉🏽 [**You can find all our Freebies on our digital products page!**](https://shop.tinztwins.de/)
  prefs: []
  type: TYPE_NORMAL
- en: '[**Subscribe for free**](https://tinztwinspro.medium.com/subscribe) **to get
    notified when we publish a new story:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://tinztwinspro.medium.com/subscribe?source=post_page-----b0f58006d0c1--------------------------------)
    [## Get an email whenever Janik and Patrick Tinz publishes.'
  prefs: []
  type: TYPE_NORMAL
- en: Get an email whenever Janik and Patrick Tinz publishes. By signing up, you will
    create a Medium account if you don’t…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: tinztwinspro.medium.com](https://tinztwinspro.medium.com/subscribe?source=post_page-----b0f58006d0c1--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about us on our [About page](https://medium.com/@tinztwinspro/about).
    Don’t forget to follow us on [X](https://twitter.com/tinztwins). Thanks so much
    for reading. If you liked this article, feel free to share it. **Have a great
    day!**
  prefs: []
  type: TYPE_NORMAL
- en: Sign up for a Medium membership using [our link](https://tinztwinspro.medium.com/membership)
    to read unlimited Medium stories.
  prefs: []
  type: TYPE_NORMAL
