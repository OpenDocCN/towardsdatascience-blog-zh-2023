["```py\nfrom sklearn.model_selection import train_test_split\n\n# src module here: https://github.com/vcerqueira/tsa4climate/tree/main/src\nfrom src.tde import time_delay_embedding\n\n# number of lags and forecasting horizon\nN_LAGS, HORIZON = 24, 24\n\n# leaving last 20% of observations for testing\ntrain, test = train_test_split(series, test_size=0.2, shuffle=False)\n\n# transforming time series into a tabular format for supervised learning\nX_train, Y_train = time_delay_embedding(train, n_lags=N_LAGS, horizon=HORIZON, return_Xy=True)\nX_test, Y_test = time_delay_embedding(test, n_lags=N_LAGS, horizon=HORIZON, return_Xy=True)\n```", "```py\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.model_selection import RandomizedSearchCV, TimeSeriesSplit\n\nfrom src.model_selection import (MetaEstimator,\n                                 search_space_with_feature_ext)\n\n# Create a pipeline for hyperparameter optimization\n# 'feature' contains different possibilities for feature extraction\n# 'model' contains different regression algorithms and respective hyperparameters\npipeline = Pipeline([('feature', FunctionTransformer()),\n                     ('model', MetaEstimator())])\n\n# do random search optimization for model selection\nsearch_mod = RandomizedSearchCV(estimator=pipeline,\n                                param_distributions=search_space_with_feature_ext,\n                                scoring='r2',\n                                n_iter=30,\n                                n_jobs=1,\n                                refit=True,\n                                verbose=2,\n                                cv=TimeSeriesSplit(n_splits=3),\n                                random_state=123)\n\nsearch_mod.fit(X_train, Y_train)\n\nprint(search_mod.best_estimator_)\n# Pipeline(steps=[('feature', FunctionTransformer()),\n#                 ('model', RidgeCV(alphas=0.25))])\n```", "```py\nfrom sklearn.metrics import r2_score\n\n# forecasting testing observations using the selected model\nY_hat_test = search_mod.predict(X_test)\nY_hat_test = pd.DataFrame(Y_hat_test, columns=Y_train.columns)\n\n# evaluating the selected model over the forecasting horizon\nr2_scores = {col: r2_score(y_true=Y_test[col], y_pred=Y_hat_test[col])\n             for col in Y_hat_test}\n```"]