- en: PyTorch Introduction —Tensors and Tensor Calculations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyTorch 简介——张量与张量计算
- en: 原文：[https://towardsdatascience.com/pytorch-introduction-tensors-and-tensor-calculations-412ff818bd5b](https://towardsdatascience.com/pytorch-introduction-tensors-and-tensor-calculations-412ff818bd5b)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/pytorch-introduction-tensors-and-tensor-calculations-412ff818bd5b](https://towardsdatascience.com/pytorch-introduction-tensors-and-tensor-calculations-412ff818bd5b)
- en: Learn about Tensors and how to use them in one of the most famous machine learning
    libraries, pytorch
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解张量以及如何在最著名的机器学习库之一 `pytorch` 中使用它们
- en: '[](https://ivopbernardo.medium.com/?source=post_page-----412ff818bd5b--------------------------------)[![Ivo
    Bernardo](../Images/39887b6f3e63a67c0545e87962ad5df0.png)](https://ivopbernardo.medium.com/?source=post_page-----412ff818bd5b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----412ff818bd5b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----412ff818bd5b--------------------------------)
    [Ivo Bernardo](https://ivopbernardo.medium.com/?source=post_page-----412ff818bd5b--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ivopbernardo.medium.com/?source=post_page-----412ff818bd5b--------------------------------)[![Ivo
    Bernardo](../Images/39887b6f3e63a67c0545e87962ad5df0.png)](https://ivopbernardo.medium.com/?source=post_page-----412ff818bd5b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----412ff818bd5b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----412ff818bd5b--------------------------------)
    [Ivo Bernardo](https://ivopbernardo.medium.com/?source=post_page-----412ff818bd5b--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----412ff818bd5b--------------------------------)
    ·8 min read·Nov 30, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----412ff818bd5b--------------------------------)
    ·8分钟阅读·2023年11月30日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/b8413e710aba7c20bbd31cf22008112b.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b8413e710aba7c20bbd31cf22008112b.png)'
- en: Math magic — Image Generated by AI
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 数学魔法——由 AI 生成的图像
- en: One of most important libraries in the Deep Learning field (and inclusively,
    where ChatGPT was built upon) is `pytorch`. Along with the Tensorflow framework,
    `pytorch` is one of the most famous neural network training frameworks available
    for software developers and data scientists. Apart from its usability and simple
    API, it excels in flexibility and memory usage, making it extremely fast in multi-dimensional
    calculus (one of the major components behind backpropagation, the important technique
    that is used to optimize Neural Network’s weights) — these details make it one
    of the most sought after libraries by companies when it comes to build Deep Learning
    models.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在深度学习领域（包括 ChatGPT 的构建基础）中最重要的库之一是 `pytorch`。与 Tensorflow 框架一起，`pytorch` 是可供软件开发人员和数据科学家使用的最著名的神经网络训练框架之一。除了其可用性和简单的
    API 外，它在灵活性和内存使用方面表现出色，使其在多维微积分中极其快速（这是反向传播的一个主要组成部分，反向传播是优化神经网络权重的重要技术）——这些细节使其成为公司在构建深度学习模型时最受欢迎的库之一。
- en: 'In this blog post, we’re going to check some basic operations using `pytorch`and
    understand how we can work with the `tensor` object! Tensors are mathematical
    representations of data that are commonly addressed by different names:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博客文章中，我们将检查一些使用`pytorch`的基本操作，并了解如何处理`tensor`对象！张量是数据的数学表示，通常有不同的名称：
- en: '1 element Tensor: commonly called the scalar, consists of a single mathematical
    value.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 维张量：通常称为标量，由一个数学值组成。
- en: '1-Dimensional Tensor: consisting of *n* examples, they are normally called
    1-D vectors and stores different mathematical elements in a single dimension.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 维张量：由 *n* 个示例组成，通常称为 1-D 向量，能够在单一维度中存储不同的数学元素。
- en: '2-Dimensional Tensors: commonly called matrices, are able to store data in
    two dimensions. Think of a normal SQL table or an excel spreadsheet.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2 维张量：通常称为矩阵，能够在两个维度中存储数据。可以想象成一个普通的 SQL 表或一个 Excel 电子表格。
- en: '3-Dimensional Tensors and beyond: Data organized with this dimensionality are
    normally harder to visualize and are generally called *n-dimensional* tensors*.*'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3 维张量及以上：具有这种维度的数据通常更难以可视化，通常称为 *n-维* 张量*。
- en: With this small introduction on mathematical concepts, let’s explore how to
    use `pytorch` in Python!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在对数学概念进行简单介绍后，让我们探索如何在 Python 中使用`pytorch`！
- en: The Tensor object
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 张量对象
- en: As we’ve described, the tensor object is a mathematical generalization of *n-dimensional*
    objects that can expand to virtually any dimension. Although in the context of
    Deep Learning, `tensors` are generally multidimensional, we can also create single
    element tensors (normally called scalars) using `torch` (although named `pytorch`
    , we use the name `torch` to manipulate the library in Python).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所述，张量对象是 *n 维* 对象的数学泛化，可以扩展到几乎任何维度。尽管在深度学习的上下文中，`tensors` 通常是多维的，但我们也可以使用
    `torch` 创建单元素张量（通常称为标量）（尽管名为 `pytorch`，我们使用 `torch` 来操作 Python 中的库）。
- en: If tensors are the central object in `torch` (or `pytorch` ), how can we create
    them in the library?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果张量是 `torch`（或 `pytorch`）中的核心对象，我们如何在库中创建它们？
- en: 'Super easy! Let’s create our first single-element tensor:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 超简单！让我们创建第一个单元素张量：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Our `scalar` object contains a single number — 5\. Let’s visualize our tensor
    below by calling it in the Python console:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `scalar` 对象包含一个数字 — 5。让我们通过在 Python 控制台中调用它来可视化我们的张量：
- en: '![](../Images/7a3593223add0044338cb8aa311c1030.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7a3593223add0044338cb8aa311c1030.png)'
- en: scalar object — Image by Author
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 标量对象 — 作者图像
- en: 'Fact 1: `torch.tensor` is used to create tensor objects'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '事实 1: `torch.tensor` 用于创建张量对象'
- en: 'Of course, we are not only tied to single element tensors — we can also create
    1-dimensional objects with multiple elements. Let’s pass a list inside the`torch.tensor`
    and see how that will go:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们不仅限于单元素张量 — 我们还可以创建具有多个元素的 1 维对象。让我们将一个列表传递到 `torch.tensor` 中，看看结果如何：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/05ff4daefab1efc39855aa600251e521.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05ff4daefab1efc39855aa600251e521.png)'
- en: vector object — Image by Author
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: vector 对象 — 作者图像
- en: Our object `vector` now contains two elements along a single dimension. Think
    as if this data contains 1 single row or a single column of data.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的对象 `vector` 现在包含一个维度上的两个元素。可以将这些数据视为 1 行或 1 列的数据。
- en: 'Having “dimensions” allows us to access interesting properties in our tensor
    — for example `ndim`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有“维度”允许我们访问张量中的有趣属性 — 例如 `ndim`：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/20a86d131a2a7168049f72deffaae26e.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/20a86d131a2a7168049f72deffaae26e.png)'
- en: ndim of vector object — image by author
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: vector 对象的 ndim — 作者图像
- en: 'Fact 2: `*tensor.ndim*` is used to obtain the number of dimensions of a tensor
    object'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '事实 2: `*tensor.ndim*` 用于获取张量对象的维度数量'
- en: In our case, the `vector` object only has a single dimension. How can we know
    how many elements our tensor object has? By using another property - `shape` !
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，`vector` 对象只有一个维度。我们如何知道张量对象包含多少元素？通过使用另一个属性 - `shape`！
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/7ebc201398505131cf4c64559f22d02e.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7ebc201398505131cf4c64559f22d02e.png)'
- en: shape of vector object — image by author
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: vector 对象的 shape — 作者图像
- en: 'Fact 3: `*tensor.shape*`is used to obtain the shape of a tensor object'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '事实 3: `*tensor.shape*` 用于获取张量对象的形状'
- en: Our tensor object contains two elements in a single dimension. We’ll see how
    this output compares to multidimensional objects.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的张量对象在一个维度中包含两个元素。我们将看看这个输出与多维对象的比较。
- en: '`torch` tensors also contain a data type attached to it. To know which, we
    can use:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`torch` 张量还包含一个附加的数据类型。要了解是哪个，我们可以使用：'
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/5d04609ab803207f60e42d4a13744a7f.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5d04609ab803207f60e42d4a13744a7f.png)'
- en: dtype of vector object — image by author
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: vector 对象的 dtype — 作者图像
- en: 'Fact 4: `*tensor.dtype*` *outputs the object type of our tensor.*'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '事实 4: `*tensor.dtype*` *输出张量对象的类型。*'
- en: Our tensor contains data in `int64` format.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的张量包含 `int64` 格式的数据。
- en: 'Let’s now expand our object into a 2-D tensor:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将对象扩展为一个 2-D 张量：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/038f1a20195e8e9e6ef374f846b57495.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/038f1a20195e8e9e6ef374f846b57495.png)'
- en: matrix object — image by author
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: matrix 对象 — 作者图像
- en: 'Let’s see some properties about our `matrix` object:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看关于我们的 `matrix` 对象的一些属性：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/9f0f9f370b1cb20d6d6d0aacb4c1cfa3.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9f0f9f370b1cb20d6d6d0aacb4c1cfa3.png)'
- en: ndim, shape and dtype of matrix object — image by author
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: ndim、shape 和 dtype 的矩阵对象 — 作者图像
- en: Our `matrix` object contains data in `float32` dtype in two dimensions with
    2 elements each.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `matrix` 对象包含两个维度中每个有 2 个元素的数据，dtype 为 `float32`。
- en: 'To finish our exploration on creating tensors, let’s see how we generate random
    tensors using `torch.rand` :'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成我们对创建张量的探索，让我们看看如何使用 `torch.rand` 生成随机张量：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/042af5da88558fef9bd1c0bc403ca822.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/042af5da88558fef9bd1c0bc403ca822.png)'
- en: random tensor — image by author
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 随机张量 — 作者图像
- en: For example, in the tensor above, we are generating a 4 by 4 matrix using `tensor.rand`
    . This is a very common operation in the context of deep learning (for example,
    generating random neural network layer weights to optimize later).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Tensor Operations
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s now see how we can perform operations with our tensors. If you’re already
    familiar with `numpy` , this should be pretty easy! Starting with a simple add
    operation:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/c011825b3678c3959acd6e54f5b2f475.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
- en: tensor + 10 calculation — Image by Author
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Adding a scalar to a tensor is easy — just use the normal mathematical operation!
    Can you guess how you can multiply a tensor by a scalar?
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Easy!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/231ec78f551782b2a8faff7083a77d8f.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: tensor * 10 calculation — Image by Author
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the abstraction `torch.multiply` :'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/231ec78f551782b2a8faff7083a77d8f.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: tensor * 10 calculation — Image by Author
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Two of the most common operations with tensors are the [Hadamard](https://en.wikipedia.org/wiki/Hadamard_product_(matrices))
    and [Dot](https://en.wikipedia.org/wiki/Dot_product) Product, with the latter
    being one of the most famous calculations that is widely used in the [Attention](https://en.wikipedia.org/wiki/Attention_(machine_learning))
    mechanism.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create two 2-D tensors to check these operations:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/23e8ad1876d981a1c6674d7b19405994.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: tensor_1, a 2 by 3 tensor — Image by Author
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1c65872340eb8eac160c223c3be8b78f.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: tensor_2, a 3 by 2 tensor — Image by Author
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform the Hadamard product, the tensor shapes must match. Let’s perform
    a calculation of `tensor_1` with itself:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/c65d2b0f5ef2237e2545847722fbaa8d.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: tensor_1 times tensor_1 — Image by Author
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'In case of the dot product, the inner dimensions of the tensors must match.
    Let’s multiply tensor_1 (a 2x3 tensor) by tensor_2 (a 3x2 tensor):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/b9e45a13c9d19b0bf13817ec7972f819.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: dot product of tensor_1 with tensor_2 — Image by Author
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also use the elegant @ operation, that does just the same:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/1f27284e552a677066a8d19e212c1566.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: dot product of tensor_1 with tensor_2 — Image by Author
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Tensor Indexing
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For our final examples, let’s see how we can pluck certain elements from our
    tensors. For these examples, we’ll use:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](../Images/b0502c943daafd92ef874f03bd991e87.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: 2-D Tensor example — Image by Author
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'Indexing in `pytorch` is similar to other Python objects — let’s try to index
    the first column:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/437768eee86f939199df84b0eba6f16a.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
- en: 1st Row Example — Image by Author
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Using 0 index on the `[]` will give us the ability to extract the first row
    of the object. The `:` symbol enables us to extract all elements from a certain
    dimension. In our case, we want all elements from the columns (2nd dimension).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Can you guess how to extract the first column? Just switch the position of the
    indices!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](../Images/1fd97f007ac58f2e361d693efded311c.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: 1st Column Example — Image by Author
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'For more complex objects, we can also use the same logic. Let’s try to index
    an element from a 3D `tensor`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更复杂的对象，我们也可以使用相同的逻辑。让我们尝试从一个 3D `tensor` 中索引一个元素：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](../Images/2089ea114dfb6cfa3186935b3d1400d8.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2089ea114dfb6cfa3186935b3d1400d8.png)'
- en: 3D Tensor — Image by Author
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 张量 — 图片由作者提供
- en: 'How can we extract the element “100” from this tensor? Let’s see, we want:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何从这个张量中提取元素“100”？让我们来看看，我们需要：
- en: First row
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一行
- en: First column
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一列
- en: Second matrix
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个矩阵
- en: 'Using indexing logic, we can do this easily:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用索引逻辑，我们可以轻松实现这一点：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![](../Images/dfaa73d9d3a30a542e7eb6b80d6d1684.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dfaa73d9d3a30a542e7eb6b80d6d1684.png)'
- en: 100 element from indexing_example_3d— Image by Author
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 从 indexing_example_3d 提取的 100 元素 — 图片由作者提供
- en: 'In `torch`, the index ordering for 3d objects is the following: matrix, row,
    column.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在`torch`中，3D 对象的索引顺序如下：矩阵、行、列。
- en: Can you try to index a 4D object?
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你能尝试索引一个 4D 对象吗？
- en: Bonus —Where is the tensor stored?
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外内容 — 张量存储在哪里？
- en: One of the advantages of using `torch` over other array libraries (such as `numpy`
    ) is the ability to save our tensors in the `gpu` — this will be particularly
    useful if we need to speed up neural network calculations.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`torch`相对于其他数组库（如`numpy`）的一个优点是能够将张量保存在`gpu`中——这在我们需要加速神经网络计算时特别有用。
- en: 'By default, your tensors are stored on the `cpu` (and most computers only have
    a cpu available) but you can send your tensors to your `gpu` by doing the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，你的张量存储在`cpu`上（而大多数计算机仅有一个cpu可用），但你可以通过以下操作将张量发送到`gpu`：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If `torch.cuda.is_available()` finds a specific NVIDIA gpu in your machine,
    it will let you send your tensor to it.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`torch.cuda.is_available()`在你的计算机上找到特定的 NVIDIA gpu，它会让你将张量发送到该 gpu。
- en: 'Imagining you have a tensor stored in a `tensor` named object, you can use
    the `.to` method to send it to the device:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你有一个存储在`tensor`命名对象中的张量，你可以使用`.to`方法将其发送到设备：
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Conclusion
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Thank you for taking the time to read this post! Working with tensors is extremely
    fun and definitely give you a solid foundation to work with advanced neural networks.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你抽时间阅读这篇文章！处理张量非常有趣，确实能为你提供一个坚实的基础，来使用高级神经网络。
- en: The `torch` API is extremely elegant and easy to visualize. Later, you can use
    these tensors to train Neural Networks (something I’ll show in the next blog posts
    of this series). Additionally, learning a bit of linear algebra as you go will
    be extremely helpful to learn some other Data Science and Machine Learning Algorithms.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`torch` API 非常优雅且易于可视化。之后，你可以使用这些张量来训练神经网络（这是我将在本系列的下一篇博客中展示的内容）。此外，在学习过程中稍微掌握一些线性代数将对学习其他数据科学和机器学习算法极有帮助。'
- en: The inspiration for this post came from [https://www.learnpytorch.io/](https://www.learnpytorch.io/)
    — this is an excellent free course on the Pytorch topic and I definitely recommend
    it. At [DareData](https://www.daredata.engineering/), we’ve been involved with
    a lot of Deep Learning projects and I can’t stress how important this course has
    been to train our people into learning this Machine Learning paradigm and all
    frameworks associated with it.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章的灵感来源于[https://www.learnpytorch.io/](https://www.learnpytorch.io/)——这是一个关于
    Pytorch 的优秀免费课程，我强烈推荐。在[DareData](https://www.daredata.engineering/)我们参与了许多深度学习项目，我不能强调这门课程对我们培训人员学习这种机器学习范式及其相关框架的重要性。
- en: In the next post, we’ll take a look into training a Linear Regression using
    `torch` — stay tuned!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一篇文章中，我们将探讨如何使用`torch`训练线性回归——敬请期待！
- en: '*If you would like to drop by my Python courses, feel free to join* ***my 16
    hour Python Course*** *(*[*The Complete Python Bootcamp for Beginners*](https://www.udemy.com/course/the-python-for-absolute-beginners-bootcamp/?couponCode=MEDIUMJULY)*).
    My Python courses are suitable for beginners/mid-level developers and I would
    love to have you on my class!*'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你想参加我的 Python 课程，随时加入* ***我的 16 小时 Python 课程*** *(*[*初学者完整 Python 训练营*](https://www.udemy.com/course/the-python-for-absolute-beginners-bootcamp/?couponCode=MEDIUMJULY)*）。我的
    Python 课程适合初学者/中级开发者，我非常希望你能加入我的课堂！*'
- en: '![](../Images/9244c5c0a938984506d56f766b6e234a.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9244c5c0a938984506d56f766b6e234a.png)'
- en: Python for Absolute Beginners Bootcamp — Image by Author
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Python 初学者训练营 — 图片由作者提供
