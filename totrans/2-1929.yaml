- en: Streamline Your Documentation with GPT-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/streamline-your-documentation-with-gpt-3-5d9f2bbf217c](https://towardsdatascience.com/streamline-your-documentation-with-gpt-3-5d9f2bbf217c)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Generating Python docstrings using artificial intelligence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://mikhailklassen.medium.com/?source=post_page-----5d9f2bbf217c--------------------------------)[![Mikhail
    Klassen](../Images/9c4a6cc856fd4061f682e95a1c145c36.png)](https://mikhailklassen.medium.com/?source=post_page-----5d9f2bbf217c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5d9f2bbf217c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5d9f2bbf217c--------------------------------)
    [Mikhail Klassen](https://mikhailklassen.medium.com/?source=post_page-----5d9f2bbf217c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5d9f2bbf217c--------------------------------)
    ·6 min read·Jan 16, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a6660b6f88943c3032a35dca7d0ba80a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image generated using DALL-E with the prompt: “A robot inspecting code at a
    computer terminal. Cyberpunk style, realistic.”'
  prefs: []
  type: TYPE_NORMAL
- en: GPT-3, the latest language model developed by OpenAI, has the ability to generate
    human-like text, making it a powerful tool for a variety of natural language processing
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: The model was also trained on programming languages. One use case for this is
    the generation of docstrings for Python functions.
  prefs: []
  type: TYPE_NORMAL
- en: What are docstrings?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A docstring is a string that appears as the first statement in a Python function.
    It provides a brief description of the function and its inputs and outputs, making
    it easier for other developers to understand and use the code. Writing clear and
    informative docstrings can be time-consuming and tedious, especially for large
    projects with many functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: GPT-3 can be used to generate docstrings by providing it with the source code
    of the Python function inside of a helpful prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Calculating the average value of a list of numbers'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose you wrote a function for calculating the average value of a list of
    numbers. You’d like GPT-3 to create the docstring.
  prefs: []
  type: TYPE_NORMAL
- en: '**Here is what the prompt for could be:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Crafting the right prompt is very important.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice how we help GPT-3 by:'
  prefs: []
  type: TYPE_NORMAL
- en: telling it the programming language (Python 3.7),
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: providing a comment about how we want an elaborate and high quality docstring
    for the function explicitly provided,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and then adding a line with the three double-quotes, which is the standard starting
    pattern of a docstring.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GPT-3 generated the following response
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: GPT-3 even knows to indent the block of text.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that the generated docstring may not be perfect and may
    require some editing. However, GPT-3 can save a significant amount of time and
    effort in the process of writing docstrings.
  prefs: []
  type: TYPE_NORMAL
- en: Automating docstring creation with a docstring generator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Copying and pasting your code into OpenAI’s playground only to have it generate
    docstrings for you is a bit tedious.
  prefs: []
  type: TYPE_NORMAL
- en: We are already seeing the advent of AI tools becoming embedded directly into
    our development environments, as in [GitHub Copilot](https://github.com/features/copilot)
    or [Amazon CodeWhisperer](https://techcrunch.com/2022/06/23/amazon-launches-codewhisperer-its-ai-pair-programming-tool/?guccounter=1&guce_referrer=aHR0cHM6Ly9zZWFyY2guYnJhdmUuY29tLw&guce_referrer_sig=AQAAAE_zMP6X9JPGw2-oobAzWmPyrnvxZKCz3fzevCOsNsJwZiwYfDv2y8qMHW5JdEDrNCnFF_1nF3a_MoELF1UVXnvZMT8SmSszuBnIFieQkGk21a1Q913Z0fN4EtJNSmVtzeVzGfWAfdshlhMMsED1xwqBifbRqb8V-ZPP_UGN0OH-).
  prefs: []
  type: TYPE_NORMAL
- en: The programmer of the future will be a human-AI hybrid. Let’s start playing
    with this capability ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you’re working in a Jupyter notebook, like in [Colab](https://colab.research.google.com/),
    and you want to quickly generate a docstring for a new function.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming you already have an OpenAI account, [generate your API key](https://beta.openai.com/account/api-keys)
    and paste it in the example below, copied to your notebook.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `inspect` library’s `getsource` function fetches the source code from any
    function you pass it and returns it as a string.
  prefs: []
  type: TYPE_NORMAL
- en: If the function already has a docstring, I don’t want to bias GPT-3, so I included
    some code to strip out any existing docstrings.
  prefs: []
  type: TYPE_NORMAL
- en: I’m assuming the code is Python, but I left the Python version as an optional
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: Experiments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now for the fun part. Let’s see how it does on a few examples.
  prefs: []
  type: TYPE_NORMAL
- en: Selection sort
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a sorting algorithm with O(n²) time complexity, meaning it’s inefficient
    on large lists, but it has the advantage of being simple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: I explicitly chose not to name the function something like `selection_sort`
    because I didn’t want GPT-3 to simply fetch a docstring from an example of selection
    sort it had seen in its training corpus.
  prefs: []
  type: TYPE_NORMAL
- en: 'Interestingly, GPT-3 inferred that the selection sort algorithm was in use
    here. It’s probable that somewhere in its corpus, the selection sort algorithm
    was written in exactly this way. Here is what GPT-3 returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: That’s a mostly adequate docstring.
  prefs: []
  type: TYPE_NORMAL
- en: Splitting data into training and test sets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A common step before training a machine learning model on data is to split the
    data into a training set and a test set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose you had a function to do this and write the results to two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Passing only the `randomly_split_dataset` function to our docstring generator
    via
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'GPT-3 returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Not bad. It stops abruptly during the example, but I found that this could be
    improved by increasing the number of `max_tokens`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now for the final test: documenting itself.'
  prefs: []
  type: TYPE_NORMAL
- en: Write a docstring for the docstring generator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perhaps the most satisfying result came from having the docstring generator
    write a docstring for itself.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The result was a perfectly acceptable docstring that we could now copy and paste
    into the function itself.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your mileage may vary. In my own experimentation, the results were sometimes
    bizarre or seemed unrelated to the function I was testing. Other times, I was
    blown away by the apparent insightfulness. It may be worth adjusting the `temperature`
    variable to explore more “creative” outputs.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that GPT-3 doesn’t actually *understand* the code. It
    cannot reason about your code. GPT-3 was trained on billions of lines of code,
    which included many high-quality docstrings. The neural network, with its 175
    billion parameters, is very good at predicting which sequence of tokens (words,
    etc.) are *most likely to follow* a given prompt.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to generating docstrings, GPT-3 can also be used for many other
    natural language processing tasks such as text summarization, question answering,
    and language translation. The potential applications of GPT-3 are vast, and it
    will be interesting to see how it is used in the future.
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, GPT-3 can be a useful tool for generating docstrings for Python
    functions, helping developers to write clear and informative documentation with
    minimal effort. As this model is still under development, it will be exciting
    to see how it can be used to improve other aspects of software development as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: If you enjoy reading stories like these and want to support me as a writer,
    consider signing up to become a Medium member. It’s $5 a month, which gives you
    access to all my writing and that of thousands of other writers. If you sign up
    using [my link](https://mikhailklassen.medium.com/membership), I’ll earn a small
    commission with no extra cost to you.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://mikhailklassen.medium.com/membership?source=post_page-----5d9f2bbf217c--------------------------------)
    [## Join Medium with my referral link — Mikhail Klassen'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Mikhail Klassen (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: mikhailklassen.medium.com](https://mikhailklassen.medium.com/membership?source=post_page-----5d9f2bbf217c--------------------------------)
  prefs: []
  type: TYPE_NORMAL
