["```py\nimport os\nimport pandas as pd\nimport numpy as np\nimport datetime\n\nfrom bokeh.io import show, output_notebook, export_png\nfrom bokeh.plotting import figure, output_file\nfrom bokeh.models import ColumnDataSource, LabelSet, Whisker\nfrom bokeh.palettes import *\noutput_notebook()\n```", "```py\nfilename = \"Open_Data_RDW__Gekentekende_voertuigen.csv\"\ndf = pd.read_csv(filename)\ndisplay(df)\n```", "```py\nfilename = \"Open_Data_RDW__Gekentekende_voertuigen.csv\"\nwith open(filename, 'r') as f:\n    header_str = f.readline()\n    print(header_str)\n    for _ in range(10):\n        print(f.readline())\n```", "```py\nKenteken,Voertuigsoort,Merk,Handelsbenaming,Vervaldatum APK,Datum tenaamstelling,Bruto BPM,Inrichting,Aantal zitplaatsen,Eerste kleur,Tweede kleur,Aantal cilinders,Cilinderinhoud,Massa ledig voertuig,Toegestane maximum massa voertuig,Massa rijklaar,Maximum massa trekken ongeremd,Maximum trekken massa geremd,Datum eerste toelating,Datum eerste tenaamstelling in Nederland,Wacht op keuren,Catalogusprijs,WAM verzekerd,Maximale constructiesnelheid,Laadvermogen,Oplegger geremd,Aanhangwagen autonoom geremd,Aanhangwagen middenas geremd,Aantal staanplaatsen,Aantal deuren,Aantal wielen,Afstand hart koppeling tot achterzijde voertuig,Afstand voorzijde voertuig tot hart koppeling,Afwijkende maximum snelheid,Lengte,Breedte,Europese voertuigcategorie,Europese voertuigcategorie toevoeging,Europese uitvoeringcategorie toevoeging,Plaats chassisnummer,Technische max. massa voertuig,Type,Type gasinstallatie,Typegoedkeuringsnummer,Variant,Uitvoering,Volgnummer wijziging EU typegoedkeuring,Vermogen massarijklaar,Wielbasis,Export indicator,Openstaande terugroepactie indicator,Vervaldatum tachograaf,Taxi indicator,Maximum massa samenstelling,Aantal rolstoelplaatsen,Maximum ondersteunende snelheid,Jaar laatste registratie tellerstand,Tellerstandoordeel,Code toelichting tellerstandoordeel,Tenaamstellen mogelijk,Vervaldatum APK DT,Datum tenaamstelling DT,Datum eerste toelating DT,Datum eerste tenaamstelling in Nederland DT,Vervaldatum tachograaf DT,Maximum last onder de vooras(sen) (tezamen)/koppeling,Type remsysteem voertuig code,Rupsonderstelconfiguratiecode,Wielbasis voertuig minimum,Wielbasis voertuig maximum,Lengte voertuig minimum,Lengte voertuig maximum,Breedte voertuig minimum,Breedte voertuig maximum,Hoogte voertuig,Hoogte voertuig minimum,Hoogte voertuig maximum,Massa bedrijfsklaar minimaal,Massa bedrijfsklaar maximaal,Technisch toelaatbaar massa koppelpunt,Maximum massa technisch maximaal,Maximum massa technisch minimaal,Subcategorie Nederland,Verticale belasting koppelpunt getrokken voertuig,Zuinigheidsclassificatie,Registratie datum goedkeuring (afschrijvingsmoment BPM),Registratie datum goedkeuring (afschrijvingsmoment BPM) DT,API Gekentekende_voertuigen_assen,API Gekentekende_voertuigen_brandstof,API Gekentekende_voertuigen_carrosserie,API Gekentekende_voertuigen_carrosserie_specifiek,API Gekentekende_voertuigen_voertuigklasse\n85XXXA,Personenauto,VOLKSWAGEN,CALIFORNIA,20230702,20220915,10437,kampeerwagen,,GROEN,Niet geregistreerd,5,2461,2088,2800,2188,700,2000,20010626,20010626,Geen verstrekking in Open Data,,Ja,,,,,,,0,4,0,0,,0,0,M1,,,r. in watergoot v. voorruit,2800,,,e1*96/79*0066*10,AJTCKX0,N1P00J2SGFM52B010U,1,0.03,292,Nee,Nee,,Nee,4500,0,0.00,2022,Logisch,00,Ja,07/02/2023 12:00:00 AM,09/15/2022 12:00:00 AM,06/26/2001 12:00:00 AM,06/26/2001 12:00:00 AM,,,,,,,,,,,,,,,,,,,,,,,,https://opendata.rdw.nl/resource/3huj-srit.json,https://opendata.rdw.nl/resource/8ys7-d773.json,https://opendata.rdw.nl/resource/vezc-m2t6.json,https://opendata.rdw.nl/resource/jhie-znh9.json,https://opendata.rdw.nl/resource/kmfi-hrps.json\n85XXXB,Personenauto,PEUGEOT,3*RFN*,20230920,20210224,5162,hatchback,5,ZWART,Niet geregistreerd,4,1997,1194,1719,1294,625,1300,20010720,20010720,Geen verstrekking in Open Data,,Ja,,,,,,,4,4,0,0,,420,0,M1,,,op r. schroefveerkoker onder motorkap,1719,,,e2*98/14*0244*00,C,B,0,0.08,261,Nee,Nee,,Nee,3019,0,,2022,Logisch,00,Ja,09/20/2023 12:00:00 AM,02/24/2021 12:00:00 AM,07/20/2001 12:00:00 AM,07/20/2001 12:00:00 AM,,,,,,,,,,,,,,,,,,,,,D,,,https://opendata.rdw.nl/resource/3huj-srit.json,https://opendata.rdw.nl/resource/8ys7-d773.json,https://opendata.rdw.nl/resource/vezc-m2t6.json,https://opendata.rdw.nl/resource/jhie-znh9.json,https://opendata.rdw.nl/resource/kmfi-hrps.json\n...\n85XXXN,Personenauto,NISSAN,NISSAN MURANO,20240106,20111126,18921,stationwagen,5,ZWART,Niet geregistreerd,6,3498,1833,2380,1933,750,1585,20081206,20081206,Geen verstrekking in Open Data,,Ja,,,,,,,4,4,0,0,,484,0,M1,,,r. voorzitting by dwarsbalk,2380,Z51,,e1*2001/116*0478*00,A,A01,0,0.1,283,Nee,Nee,,Nee,3965,0,,2023,Logisch,00,Ja,01/06/2024 12:00:00 AM,11/26/2011 12:00:00 AM,12/06/2008 12:00:00 AM,12/06/2008 12:00:00 AM,,,,,,,,,,,,,,,,,,,,,E,,,https://opendata.rdw.nl/resource/3huj-srit.json,https://opendata.rdw.nl/resource/8ys7-d773.json,https://opendata.rdw.nl/resource/vezc-m2t6.json,https://opendata.rdw.nl/resource/jhie-znh9.json,https://opendata.rdw.nl/resource/kmfi-hrps.json\n```", "```py\ncols = ['Kenteken', 'Voertuigsoort', 'Merk', 'Handelsbenaming', 'Aantal cilinders', 'Catalogusprijs']\ncols_date = ['Datum eerste tenaamstelling in Nederland']\n\nfilename = \"Open_Data_RDW__Gekentekende_voertuigen.csv\"\ndf = pd.read_csv(filename, usecols=cols + cols_date, parse_dates=cols_date, \n                 dtype={\"Catalogusprijs\": pd.UInt32Dtype(), \n                        \"Aantal cilinders\": pd.UInt32Dtype()})\ndisplay(df)\n\ndf = df[df['Voertuigsoort'] == 'Personenauto']\ndf.info(memory_usage=\"deep\")\n```", "```py\ndf.to_csv(\"Open_Data_RDW__Gekentekende_voertuigen_short.csv\", sep=',', \n          encoding='utf-8')\n```", "```py\ndf = df.drop('Voertuigsoort', axis=1)\n\ntranslations_dict_en_nl = {\n                           'Kenteken': 'License plate', \n                           'Merk': 'Model', \n                           'Handelsbenaming': 'Trade name', \n                           'Aantal cilinders': 'Number of Cylinders', \n                           'Catalogusprijs': 'Catalog price',\n                           'Datum eerste tenaamstelling in Nederland': 'First registration NL', \n                          }\n\ndf.rename(translations_dict_en_nl, axis='columns', inplace=True)\n```", "```py\ndisplay(df)\n\ndisplay(df.shape[0])\n\ndisplay(df.isna().sum())\n```", "```py\ndf[df['Catalog price'].notna()].sort_values(by=['Catalog price'], \n                                            ascending=False)\n```", "```py\ndisplay(df[df['Model'].str.contains(\"PEUGEOT\", case=False)]['Model'].unique())\n```", "```py\ndef model_normalize(s_val: str):\n    \"\"\" Convert 'PEUGEOT BOXER/GLOBE-TRAVE ' to 'PEUGEOT' \"\"\"\n    if s_val and isinstance(s_val, str) and len(s_val) > 0:\n        return s_val.replace(\"-\", \" \").replace(\"/\", \" \").split()[0].upper().strip()\n    return None\n```", "```py\ndf[\"Model\"] = df['Model'].map(lambda s: model_normalize(s))\n```", "```py\ndef name_normalize(model: str, trade_name: str):\n    \"\"\" Remove duplicates and convert the name to upper case \"\"\"\n    if isinstance(trade_name, str) and len(trade_name) > 0:\n        name = trade_name.upper().strip()\n        # Remove duplicates from model and trade name: \n        # (\"TESLA\", \"TESLA MODEL 3\") => (\"TESLA\", \"MODEL 3\")\n        if name.split()[0] == model:\n            # \"TESLA MODEL 3\" => [TESLA, MODEL, 3] => \"MODEL 3\"\n            return ' '.join(name.split()[1:])  \n        return name\n    return None\n```", "```py\ndf[\"Trade name\"] =  df.apply(lambda x: name_normalize(model=x['Model'], \n                                           trade_name=x['Trade name']), \n                                           axis=1)\n```", "```py\nn_top = 50\nall_models = df_models[\"Model\"].to_numpy()\nmodels, counts = np.unique(all_models, return_counts=True)\ncs = counts.argsort()  # Take sort indexes from 'counts' array\nx = counts[cs][-n_top:]\ny = models[cs][-n_top:]\n\np = figure(y_range=y, width=1400, height=600, \n           title=\"Top-%d cars in the Netherlands (data 2023)\" % n_top)\np.hbar(right=x, y=y, height=0.8, color=Viridis256[:n_top])\np.xgrid.grid_line_color = None\np.x_range.start = 0\np.below[0].formatter.use_scientific = False\nshow(p)\n```", "```py\nelectric_cars = {\n    \"AIWAYS\": ['U5', 'U6'],\n    \"AUDI\": ['E-TRON'],\n    \"BMW\": ['I3', 'I4', 'I7', 'IX'],\n    \"CITROEN\": ['E-C4'],\n    \"FIAT\": ['500E', 'ELETTRA'],\n    \"FORD\": ['MACH-E'],\n    \"HONDA\": ['\"E\"', '\"E ADVANCE\"'],  \n    \"HYUNDAI\": ['IONIQ', 'KONA'],\n    \"JAGUAR\": ['I-PACE'],\n    \"KIA\": ['NIRO', 'E-SOUL'],\n    \"LEXUS\": ['RZ'],\n    \"LUCID\": ['AIR'],\n    \"MAZDA\": ['MX-30'],\n    \"MERCEDES\": ['EQA', 'EQB', 'EQC', 'EQS', 'EQV'],\n    \"MG\": ['ZS EV'],\n    \"MINI\": ['COOPER SE'],\n    \"NISSAN\": ['ALTRA', 'ARIYA', 'EVALIA', 'LEAF', 'NUVU'],\n    \"OPEL\": ['AMPERA-E', 'COMBO-E', 'CORSA-E', 'MOKKA-E', 'VIVARO-E', 'ZAFIRA-E'],\n    \"PEUGEOT\": ['E-208', 'E-2008', 'E-RIFTER', 'E-TRAVELLER'],\n    \"POLESTAR\": ['2', '3'],\n    \"PORSCHE\": ['TAYCAN'],\n    \"RENAULT\": ['MASTER', 'TWINGO', 'KANGOO ELEC', 'ZOE'],\n    \"SKODA\": ['ENYAQ'],\n    \"SMART\": ['EQ'],\n    \"TESLA\": [''],\n    \"TOYOTA\": ['BZ'],\n    \"VOLKSWAGEN\": ['ID.3', 'ID.4', 'ID.5', 'E-GOLF'],\n    \"VOLVO\": ['C40', 'XC40']\n}\n```", "```py\ndef is_electric(model: str, trade_name: str, cylinders: int):\n    \"\"\" Determine if the car is electric \"\"\"\n    if isinstance(cylinders, int) and cylinders > 0:\n        return False\n    for e_model, e_names in electric_cars.items():\n        if model == e_model:\n            for e_name in e_names:\n                if trade_name and (e_name in trade_name or e_name.replace('\"', '') == trade_name):\n                    return True\n                if trade_name is None and len(e_name) == 0:\n                    return True\n    return False\n```", "```py\nprint(is_electric(\"AUDI\", \"E-TRON S SPORTBACK 55 QUATTRO\"))\nprint(is_electric(\"AUDI\", \"80 COUPE\"))\n\nprint(is_electric(\"HONDA\", \"E\"))\nprint(is_electric(\"HONDA\", \"EE 8\"))\nprint(is_electric(\"HONDA\", \"INTEGRA TYPE R\"))\n\nprint(is_electric(\"NISSAN\", \"MICRA\"))\nprint(is_electric(\"NISSAN\", \"LEAF 62KWH\"))\n\nprint(is_electric(\"TESLA\", \"ANY\"))\n```", "```py\ndf[\"Electric\"] = df.apply(lambda x: is_electric(model=x['Model'], \n                                       trade_name=x['Trade name'], \n                                       cylinders=x['Number of Cylinders']), \n                          axis=1)\n\ndf_electric = df.query(\"Electric == True\").drop(columns=['Number of Cylinders',\n                                                         'Electric'])\n```", "```py\nprint(f\"Cars total: {df.shape[0]}\")\nprint(f\"Cars electric: {df_electric.shape[0]} ({100*df_electric.shape[0]/df.shape[0]:.2f}%)\")\n\n# Calculate percentiles - all cars\n\nprices = df[df['Catalog price'].notna()]['Catalog price'].to_numpy()\n\nprint(\"Price mean:\", np.mean(prices))\nprint(\"Price standard deviation:\", np.std(prices))\nprint(\"Percentiles [5, 25, 50, 75, 95]:\", np.percentile(prices, [5, 25, 50, 75, 95]))\n\n# Calculate percentiles - electric cars\n\nprices = df_electric[df_electric['Catalog price'].notna()]['Catalog price'].to_numpy()\n\nprint(\"Electric cars price mean:\", np.mean(prices))\nprint(\"Electric cars price standard deviation:\", np.std(prices))\nprint(\"Electric cars percentiles [5, 25, 50, 75, 95]:\", np.percentile(prices, [5, 25, 50, 75, 95]))\n```", "```py\nreg_dates = df_electric[[\"Model\", \"Trade name\", \"First registration NL\"]].copy()\nreg_dates[\"Quarter\"] = reg_dates['First registration NL'].dt.to_period('Q')\n\ndata_per_year = reg_dates.groupby(['Quarter'], as_index=False).size()\n\ndates = data_per_year['Quarter']\namount = data_per_year['size']\n\np = figure(x_axis_type='datetime', width=1600, height=500, \n           title=f\"Electric car registrations in the Netherlands, 1992-2022\")\np.vbar(x=dates, top=amount, width=datetime.timedelta(days=3*22), line_color='black')\np.xaxis[0].ticker.desired_num_ticks = 30\np.xgrid.grid_line_color = None\nshow(p)\n```", "```py\ndf_prices = df_electric[df_electric['Catalog price'].notna()]\nprices_to_display = df_prices.query('`Catalog price` < 170000')['Catalog price'].to_numpy()\n\nhist_e, edges_e = np.histogram(prices_to_display, density=False, bins=50)\n\n# Draw\np = figure(width=1400, height=500, \n           title=f\"Electric cars price distribution in the Netherlands ({df_electric.shape[0]} cars total)\")\np.quad(top=hist_e, bottom=0, left=edges_e[:-1], right=edges_e[1:], line_color=\"darkblue\")\np.x_range.start = 15000\np.x_range.end = 150000\np.y_range.start = 0\np.xaxis[0].ticker.desired_num_ticks = 20\np.left[0].formatter.use_scientific = False\np.below[0].formatter.use_scientific = False\np.xaxis.axis_label = \"Price, EUR\"\np.yaxis.axis_label = \"Amount\"\nshow(p)\n```", "```py\ndf_price = df_electric[df_electric['Catalog price'].notna()]\n\ndef q0(x):\n    return x.quantile(0.01)\n\ndef q1(x):\n    return x.quantile(0.25)\n\ndef q3(x):\n    return x.quantile(0.75)\n\ndef q4(x):\n    return x.quantile(0.99)\n\nagg_data = {'Catalog price': ['size', 'min', q0, q1, 'median', q3, q4, 'max']}\n\nprices = df_price[['Model', 'Catalog price']].groupby('Model', as_index=False).agg(agg_data)\ndisplay(prices)\n```", "```py\nprices = prices.sort_values(by=('Catalog price', 'median'), ascending=True)\n\nmodels = prices[\"Model\"].to_numpy()\nq1 = prices[\"Catalog price\"][\"q1\"].to_numpy()\nq3 = prices[\"Catalog price\"][\"q3\"].to_numpy()\nv_min = prices[\"Catalog price\"][\"q0\"].to_numpy()\nv_max = prices[\"Catalog price\"][\"q4\"].to_numpy()\n\npalette = (Inferno10 + Magma10 + Plasma10 + Viridis10)[:models.shape[0]]\nsource = ColumnDataSource(data=dict(models=models, \n                                    bottom=q1, \n                                    top=q3, \n                                    color=palette, \n                                    lower=v_min, \n                                    upper=v_max))\n\np = figure(x_range=models, width=1400, height=500, \n           title=f\"Electric cars price distribution in the Netherlands\") \nwhisker = Whisker(base=\"models\", upper=\"upper\", lower=\"lower\", source=source)\np.add_layout(whisker)\np.vbar(x='models', top='top', bottom='bottom', width=0.9, color='color', \n       line_color=\"black\", source=source)\n\np.left[0].formatter.use_scientific = False\np.y_range.start = 0\nshow(p)\n```", "```py\ndf_data = df_electric[df_electric['Catalog price'].notna()]\n\nmodels = df_data['Model'].unique()\n\np = figure(x_axis_type='datetime', width=1400, height=800, \n           title=\"Electric car prices and registrations in the Netherlands\")\npalette = (Inferno10 + Magma10 + Plasma10 + Viridis10)[:len(models)]\ndraw_ratio = 15\nfor ind, model in enumerate(models):\n    df_model = df_data[df_data['Model'] == model]\n    if df_model.shape[0]//draw_ratio == 0:\n        continue\n\n    df_model = df_model.sample(df_model.shape[0]//draw_ratio)\n    x = df_model['First registration NL'].to_numpy()\n    y = df_model['Catalog price'].to_numpy()\n    p.scatter(x, y, size=2, color=palette[ind], legend_label=model[:3]) \n\np.left[0].formatter.use_scientific = False\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\np.legend.click_policy = \"mute\"\np.xaxis[0].ticker.desired_num_ticks = 20\nshow(p)\n```"]