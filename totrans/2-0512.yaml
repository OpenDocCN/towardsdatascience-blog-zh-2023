- en: 'Clean Code in PyTorch: Best Practices for Readable ML'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyTorch中的干净代码：可读性ML的最佳实践
- en: 原文：[https://towardsdatascience.com/clean-code-in-pytorch-best-practices-for-readable-ml-adfd798bf6df](https://towardsdatascience.com/clean-code-in-pytorch-best-practices-for-readable-ml-adfd798bf6df)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/clean-code-in-pytorch-best-practices-for-readable-ml-adfd798bf6df](https://towardsdatascience.com/clean-code-in-pytorch-best-practices-for-readable-ml-adfd798bf6df)
- en: '![](../Images/bd25c3ef78df4d6a87b77701273f3c31.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bd25c3ef78df4d6a87b77701273f3c31.png)'
- en: Photo by [Greyson Joralemon](https://unsplash.com/@greysonjoralemon?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Greyson Joralemon](https://unsplash.com/@greysonjoralemon?utm_source=medium&utm_medium=referral)提供，发布在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)。
- en: Five Tips for Writing Clean, Efficient and readable Code in PyTorch
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 五个编写干净、高效且易读代码的技巧，适用于PyTorch
- en: '[](https://medium.com/@marcellopoliti?source=post_page-----adfd798bf6df--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----adfd798bf6df--------------------------------)[](https://towardsdatascience.com/?source=post_page-----adfd798bf6df--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----adfd798bf6df--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----adfd798bf6df--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@marcellopoliti?source=post_page-----adfd798bf6df--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----adfd798bf6df--------------------------------)[](https://towardsdatascience.com/?source=post_page-----adfd798bf6df--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----adfd798bf6df--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----adfd798bf6df--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----adfd798bf6df--------------------------------)
    ·5 min read·Mar 17, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----adfd798bf6df--------------------------------)
    ·5分钟阅读·2023年3月17日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: In the field of data science and programming in general, it is very important
    to be able to write code that is easy to read and maintain. Surely you too have
    had the experience of writing code that seemed to work fine and that was pretty
    clear, but then you reread it a day or a week later and it looked incomprehensible.
    Even more obvious is this difficulty when you have to review code written by other
    people.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据科学和编程领域，能够编写易于阅读和维护的代码非常重要。你肯定也有过这样的经历：写出的代码看似运作正常且比较清晰，但一两天或一周后重新阅读时却显得难以理解。当你需要审查别人编写的代码时，这种困难就更为明显。
- en: In AI, it is critically important to write clear and understandable code, because
    we often have to set up several experiments, and then try multiple models, multiple
    data, and a ton of hyperparameters.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在AI领域，编写清晰易懂的代码至关重要，因为我们经常需要设置多个实验，然后尝试多个模型、多个数据和大量的超参数。
- en: In this article, I share with you some tips that I use when programming with
    PyTorch that you can apply immediately and I hope they will help you become a
    little more efficient in your work as a data scientist.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我分享了一些我在使用PyTorch编程时使用的技巧，你可以立即应用这些技巧，希望它们能帮助你在数据科学家的工作中变得更加高效。
- en: Create a DataModule class to manage your data
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个DataModule类来管理你的数据
- en: In this example, I will be working with the well-known MNIST dataset. Although
    the practices I use may seem unnecessary in this case, since the various libraries
    already facilitate the use of such simple datasets, they can always come in handy
    when working with more complex datasets.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我将使用著名的MNIST数据集。虽然我使用的实践在这种情况下可能看起来不必要，因为各种库已经方便了这类简单数据集的使用，但它们在处理更复杂的数据集时总是会派上用场。
- en: Many times when working with nonstandard datasets we have to go through different
    steps, such as downloading the data, structuring folders and subfolders to split
    the data, creating a custom Dataset class, and much more. So it would be useful
    to create a DataModule class that takes care of everything there is to do within
    it and provides two functions that directly return the data loaders that we will
    use for training.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理非标准数据集时，我们往往需要经历不同的步骤，比如下载数据、结构化文件夹和子文件夹以拆分数据、创建自定义Dataset类等。因此，创建一个DataModule类来处理所有这些操作并提供两个直接返回我们将用于训练的数据加载器的函数，将会非常有用。
- en: Having such a class will allow us to have a cleaner and more scalable workflow
    on a large scale. Let’s look at a simple example.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有这样的类将使我们在大规模上拥有更清晰、更具扩展性的工作流程。让我们看一个简单的例子。
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this case, the DataModule class takes care of creating datasets and instantiating
    dataloaders using two functions. In this way, in the main function, I can simply
    call the train_dataloader() and val_dataloader() functions to access my data.
    In general, if you have some data retrieval tasks that you need to perform to
    collect your dataset, it’s a good practice to add them to the DataModule class,
    which can then be used to instantiate dataloaders. In this way, you can access
    the data in a straightforward manner.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，DataModule 类负责使用两个函数创建数据集和实例化数据加载器。这样，在主函数中，我可以简单地调用 train_dataloader()
    和 val_dataloader() 函数来访问我的数据。一般来说，如果你有一些需要执行的数据检索任务来收集你的数据集，最好将它们添加到 DataModule
    类中，然后可以用它来实例化数据加载器。这样，你可以以直接的方式访问数据。
- en: Let’s reproduce TensorFlow fit method
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们复现 TensorFlow 的 fit 方法
- en: I am not a big fan of TensorFlow, in fact, unless required I almost always work
    with PyTorch. Though, I find that the fit() method of TensorFlow is quite handy.
    In fact, after you have created a model you only need to call model.fit(data)
    to train it, somewhat like you do with models in scikit-learn.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我不是 TensorFlow 的忠实粉丝，实际上，除非必要，我几乎总是使用 PyTorch。不过，我发现 TensorFlow 的 fit() 方法非常方便。实际上，在创建模型之后，你只需调用
    model.fit(data) 来训练它，类似于你在 scikit-learn 中使用模型的方式。
- en: So why not recreate something similar in PyTorch as well?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 那么为什么不在 PyTorch 中也重新创建类似的东西呢？
- en: What we will do in the next example is to define a fit function that trains
    the network on the MNIST data by taking as input the DataModule created earlier.
    After that, we will make this function a method of our class that defines the
    model.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在下一个示例中将做的是定义一个 fit 函数，该函数通过接受之前创建的 DataModule 作为输入来训练网络。之后，我们将把这个函数作为定义模型的类的方法。
- en: This way whenever we want to create a different model, we could always associate
    it with the fit() function, which remains unchanged.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，每当我们想要创建一个不同的模型时，我们总是可以将其与 fit() 函数关联起来，这个函数保持不变。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we can use model.fit(datamodule = datamodule, epochs = 3) to run our training.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用 model.fit(datamodule = datamodule, epochs = 3) 来运行我们的训练。
- en: Progress Bar
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进度条
- en: During the model training, it is really annoying not to have hints about how
    long it will take to finish. But fortunately, it is possible to implement a progress
    bar in PyTorch in a really easy way.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型训练过程中，如果没有关于完成所需时间的提示，确实会很烦人。但幸运的是，可以在 PyTorch 中以非常简单的方式实现一个进度条。
- en: Just use the tqdm function and wrap the dataloader and explicitly state the
    total length of the dataloader with *len(dataloader)*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 只需使用 tqdm 函数，将 dataloader 包装起来，并用 *len(dataloader)* 显式声明 dataloader 的总长度。
- en: In this way, a progress bar will appear as if by magic, making the output much
    more visually appealing.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，进度条就会像魔法一样出现，使输出更加美观。
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/78957b23a434b03e16b2423b8ac1d2c4.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/78957b23a434b03e16b2423b8ac1d2c4.png)'
- en: 'Source: [https://github.com/tqdm/tqdm](https://github.com/tqdm/tqdm)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '来源: [https://github.com/tqdm/tqdm](https://github.com/tqdm/tqdm)'
- en: Evaluation Metrics
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估指标
- en: I don’t know why but when I read codes written in PyTorch I very frequently
    see people implementing common metrics by hand, such as precision, recall, accuracy…
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道为什么，但当我阅读用 PyTorch 编写的代码时，我经常看到人们手动实现常见的指标，如精确度、召回率、准确率……
- en: However, this is not the case when they work with other libraries such as scikit-learn.
    Implementing these metrics within the training function can make the function
    difficult to read, and perhaps bugs are inserted even more easily.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当他们使用其他库，如 scikit-learn 时，情况就不同了。在训练函数中实现这些指标可能会使函数难以阅读，并且可能更容易插入错误。
- en: My suggestion then is to use the metrics already found in libraries such as
    scikit-learn when working. This allows us to use code that is probably more robust
    but more importantly saves us time!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议在工作时使用库中已经找到的指标，如 scikit-learn。这使我们能够使用可能更稳健的代码，更重要的是节省时间！
- en: Of course, the discussion is different if there is a need to implement custom
    metrics, so if you are doing research on, for example, new methods for model evaluation.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果需要实现自定义指标，那么讨论就会有所不同，例如，如果你正在研究模型评估的新方法。
- en: Particularly when starting to develop a project and we want to use standard
    metrics to see if we are going in the right direction, I find it useful to use
    the classification_report function of scikit-learn. Let’s look at an example.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是在开始开发项目时，我们希望使用标准指标来判断是否走在正确的道路上，我发现使用scikit-learn的classification_report函数非常有用。让我们看一个例子。
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/b300471471a870461c6dc132c296be30.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b300471471a870461c6dc132c296be30.png)'
- en: (Image By Author)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: (图片由作者提供)
- en: Final Thoughts
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结束语
- en: As a developer, I always try to make my code clear and clean (and bug-free![😉](https://emojipedia.org/it/apple/ios-15.4/faccina-che-fa-l-occhiolino/)).
    I always try to keep in mind the fact that my code must be as understandable as
    possible even without the use of comments. Therefore, I love to learn easy-to-use
    tricks that I can implement immediately in my code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名开发者，我总是尽力使我的代码清晰、整洁（且无错误！[😉](https://emojipedia.org/it/apple/ios-15.4/faccina-che-fa-l-occhiolino/)）。我总是记得我的代码必须尽可能易于理解，即使没有使用注释。因此，我喜欢学习可以立即在代码中实现的简单技巧。
- en: If this article was helpful to you follow me to read my next articles of this
    type! 😊
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这篇文章对你有帮助，请关注我以阅读我下一篇类似的文章！😊
- en: The End
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 终结
- en: '*Marcello Politi*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*马切洛·波利蒂*'
- en: '[Linkedin](https://www.linkedin.com/in/marcello-politi/), [Twitter](https://twitter.com/_March08_),
    [CV](https://march-08.github.io/digital-cv/)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[领英](https://www.linkedin.com/in/marcello-politi/)，[推特](https://twitter.com/_March08_)，[简历](https://march-08.github.io/digital-cv/)'
