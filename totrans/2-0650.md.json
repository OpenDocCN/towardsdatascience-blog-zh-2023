["```py\nwith data as (\n    select\n    current_timestamp() as ts           \n    ,'stage'            as context_type \n    ,1                  as user_id      \n    ,100                as credit_value \n    , true              as is_gift\nunion all\n    select\n    timestamp_sub(current_timestamp(), interval 24 hour) as ts           \n    ,'user'             as context_type \n    ,1                  as user_id      \n    ,200                as credit_value \n    ,false              as is_gift\nunion all\n    select\n    timestamp_sub(current_timestamp(), interval 24*2 hour) as ts           \n    ,'user'             as context_type \n    ,3                  as user_id      \n    ,300                as credit_value \n    ,true               as is_gift\n\n)\n, results as (\nselect \n     date(ts) as date \n    ,context_type\n    ,sum(credit_value)/100 as daily_credits_spend\nfrom data    \n\ngroup by rollup(1, context_type)\norder by 1\n)\n\nselect\n  date\n  ,if(context_type is null, 'total', context_type) as context_type\n  ,daily_credits_spend\nfrom results\norder by date\n; \n```", "```py\ncreate table if not exists production.payment_transaction_raw (\n  src string\n)\npartition by date(_partitiontime)\n;\ninsert production.payment_transaction_raw (src)\nselect\n'{\"transaction_id\":1,\"user_id\":1,\"reputation\":99,\"total_cost:9.99,\"product_id\":1001,\"product_type\":\"bot\", \"currency\":\"USD\",\"created_at\":\"2021-01-01 01:00:01 UTC\"}' union all select\n'{\"transaction_id\":2,\"user_id\":2,\"reputation\":99,\"total_cost:4.99,\"product_id\":2001,\"product_type\":\"charm\", \"currency\":\"USD\",\"created_at\":\"2022-01-01 01:00:01 UTC\"}' union all select\n'{\"transaction_id\":3,\"user_id\":1,\"reputation\":99,\"total_cost:6.99,\"product_id\":3001,\"product_type\":\"bot\", \"currency\":\"USD\",\"created_at\":\"2023-01-01 01:00:01 UTC\"}' union all select\n;\n```", "```py\ncreate table if not exists production.payment_transaction (\n  transaction_id   int64   \n ,user_id          int64   \n ,reputation       int64   \n ,total_cost       float64 \n ,product_id       int64\n ,product_type     string\n ,currency         string  \n ,created_at       timestamp\n)\npartition by date(created_at)\n;\ninsert production.payment_transaction (\n  transaction_id  \n ,user_id         \n ,reputation      \n ,total_cost      \n ,product_id      \n ,product_type\n ,currency        \n ,created_at      \n)\n\n-- insert new batch and avoid duplicates:\nselect\n  raw.transaction_id  \n ,raw.user_id         \n ,raw.reputation         \n ,raw.total_cost      \n ,raw.product_id          \n ,raw.product_type        \n ,raw.currency        \n ,raw.created_at      \nfrom (\n   select\n     cast(json_extract(src,'$.transaction_id') as int64)              as transaction_id  \n    ,cast(json_extract(src,'$.user_id') as int64)                     as user_id         \n    ,cast(json_extract(src,'$.reputation') as int64)                  as reputation         \n    ,cast(json_extract(src,'$.total_cost') as float64)                as total_cost      \n    ,cast(json_extract(src,'$.product_id') as int64)                  as product_id      \n    ,cast(json_extract(src,'$.product_type') as string)               as product_type      \n    ,cast(json_extract(src,'$.currency') as string)                   as currency        \n    ,cast(json_extract_scalar(src, '$.created_at') as timestamp)      as created_at      \n   from\n    production.payment_transaction_raw\n) raw\nleft join production.payment_transaction self on\n   raw.transaction_id = self.transaction_id\nwhere\n   self.transaction_id is null -- insert only new records that don't exit.\n;\n```"]