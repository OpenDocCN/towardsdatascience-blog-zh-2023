- en: How to Iterate Over a Pandas Dataframe
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何迭代一个Pandas Dataframe
- en: 原文：[https://towardsdatascience.com/how-to-iterate-over-a-pandas-dataframe-5dc15ab147f9](https://towardsdatascience.com/how-to-iterate-over-a-pandas-dataframe-5dc15ab147f9)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-iterate-over-a-pandas-dataframe-5dc15ab147f9](https://towardsdatascience.com/how-to-iterate-over-a-pandas-dataframe-5dc15ab147f9)
- en: '![](../Images/653feebb30296df7a7f51350e1ba4052.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/653feebb30296df7a7f51350e1ba4052.png)'
- en: Photo by [Sid Balachandran](https://unsplash.com/@itookthose?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Sid Balachandran](https://unsplash.com/@itookthose?utm_source=medium&utm_medium=referral)拍摄，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Row-major vs Column-major, Pandas best practices
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行优先与列优先，Pandas最佳实践
- en: '[](https://medium.com/@marcellopoliti?source=post_page-----5dc15ab147f9--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----5dc15ab147f9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5dc15ab147f9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5dc15ab147f9--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----5dc15ab147f9--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@marcellopoliti?source=post_page-----5dc15ab147f9--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----5dc15ab147f9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5dc15ab147f9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5dc15ab147f9--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----5dc15ab147f9--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5dc15ab147f9--------------------------------)
    ·4 min read·May 18, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----5dc15ab147f9--------------------------------)
    ·4分钟阅读·2023年5月18日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: If you have some experience in data science you surely have faced developed
    algorithms from tabular data, common challenges of this kind are for example the
    [Titanic — Machine Learning From Disaster](https://www.kaggle.com/c/titanic) or
    the Boston Housing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一些数据科学的经验，你肯定遇到过从表格数据中开发算法的情况，这类常见挑战的例子有[Titanic — 从灾难中学习机器学习](https://www.kaggle.com/c/titanic)或波士顿房价数据。
- en: Data represented in tabular form (such as CSV files) can be distinguished into
    **row-major format** and **column-major format**. In computing, row-major order
    and column-major order are methods for storing [multidimensional arrays](https://en.wikipedia.org/wiki/Multidimensional_array)
    in linear storage such as [random access memory](https://en.wikipedia.org/wiki/Random_access_memory).
    Depending on the paradigm with which the format was designed, there are best practices
    to follow to optimize file read and write times. Very often data scientists unfortunately
    use libraries such as pandas in the wrong way going to waste valuable time
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以表格形式表示的数据（如CSV文件）可以分为**行优先格式**和**列优先格式**。在计算中，行优先顺序和列优先顺序是存储[多维数组](https://en.wikipedia.org/wiki/Multidimensional_array)的线性存储方法，如[随机存取内存](https://en.wikipedia.org/wiki/Random_access_memory)。根据格式设计的范式，有最佳实践可遵循，以优化文件的读写时间。数据科学家经常不幸地以错误的方式使用诸如pandas之类的库，从而浪费宝贵的时间
- en: Row major format means that in a table, consecutive rows are saved consecutively
    in memory. So if I am reading row i , then accessing row i+1 will be a very fast
    operation.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 行优先格式意味着在表中，连续的行在内存中被连续保存。因此，如果我正在读取第i行，那么访问第i+1行将是一个非常快速的操作。
- en: Formats that follow the Column major format paradigm, such as Parquet, consecutively
    save columns in memory.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循列优先格式范式的格式，如Parquet，会在内存中连续保存列。
- en: In Machine Learning we often have the case where the rows are the data samples
    and the columns are the features. So we will use a CSV file if we need to access
    samples quickly while Parquet if we often need to access features (e.g. to calculate
    statistics etc.).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习中，我们经常遇到行代表数据样本，列代表特征的情况。因此，如果我们需要快速访问样本，我们将使用CSV文件，如果我们经常需要访问特征（例如计算统计等），我们将使用Parquet。
- en: '![](../Images/aa30c1e085b31bfd5d51722d4720f911.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aa30c1e085b31bfd5d51722d4720f911.png)'
- en: 'src: [https://en.wikipedia.org/wiki/Row-_and_column-major_order#/media/File:Row_and_column_major_order.svg](https://en.wikipedia.org/wiki/Row-_and_column-major_order#/media/File:Row_and_column_major_order.svg)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 'src: [https://en.wikipedia.org/wiki/Row-_and_column-major_order#/media/File:Row_and_column_major_order.svg](https://en.wikipedia.org/wiki/Row-_and_column-major_order#/media/File:Row_and_column_major_order.svg)'
- en: Pandas
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pandas
- en: Pandas is a library widely used in data science, especially when dealing with
    tabular data. Pandas is built on the concept of DataFrame, precisely a tabular
    representation of data. The DataFrame though follows the column major format paradigm.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 是一个在数据科学中广泛使用的库，尤其是在处理表格数据时。Pandas 基于 DataFrame 的概念，即数据的表格表示。虽然 DataFrame
    遵循列优先格式范式。
- en: So iterating a DataFrame, row by row, as is often done, is very slow. Let’s
    look at an example Let’s import the BostonHousing DataFrame and iterate it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以按行迭代 DataFrame，像通常做的那样，是非常慢的。让我们看一个例子，让我们导入 BostonHousing DataFrame 并进行迭代。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this first experiment, we iterate through the columns of the DataFrame (df.columns)
    and then access all the elements in each column, and calculate the time it takes
    to finish the process.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次实验中，我们迭代 DataFrame 的列（df.columns），然后访问每列中的所有元素，并计算完成该过程所需的时间。
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Instead, in this second experiment we iterate for rows in the DataFrame with
    the df.iloc function, which returns the contents of the entire row.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 而在第二次实验中，我们使用 df.iloc 函数按行迭代 DataFrame，该函数返回整行的内容。
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see the result of the second experiment is much greater than the
    first. In this case, our dataset was very small, but if you try with your own
    larger working dataset you will notice how this difference will become more and
    more pronounced.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，第二次实验的结果远大于第一次。在这种情况下，我们的数据集非常小，但如果你用自己的更大数据集进行尝试，你会注意到这种差异会变得越来越明显。
- en: '**Numpy**'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**Numpy**'
- en: Fortunately, the numpy library comes to our rescue. When we use numpy we can
    specify the major order we want to use, by default the row-major order is used.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，numpy 库来拯救我们。当我们使用 numpy 时，我们可以指定我们想要使用的主要顺序，默认情况下使用的是行优先顺序。
- en: So what we can do is convert a pandas DataFrame to numpy and iterate the latter
    line by line. Let’s look at some experiments.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们可以做的是将 pandas DataFrame 转换为 numpy，然后逐行迭代。让我们看一些实验。
- en: We first convert the DataFrame to a numpy format.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将 DataFrame 转换为 numpy 格式。
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now let’s iterate the data by column, and calculate the time.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们按列迭代数据，并计算时间。
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now same thing iterating by rows.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按行迭代同样的操作。
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We see that by using numpy the speed of both experiments is increased! Moreover,
    the difference between the two is minimal.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到使用 numpy 时两个实验的速度都提高了！而且，两者之间的差异很小。
- en: Final Thoughts
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 终极思考
- en: In this paper, we introduced the difference between row-major and column-major
    paradigms when dealing with tabular data. We pointed out a common mistake that
    is made by many data scientists using Pandas. The time difference in accessing
    the data, in this case, is minimal because we used a small dataset. But you have
    to be careful because the bigger the dataset you use the bigger this difference
    will become in turn, and you might lose a lot of time just reading the data. As
    a solution always try to use numpy whenever possible.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们介绍了处理表格数据时行优先和列优先范式的差异。我们指出了许多数据科学家使用 Pandas 时的一个常见错误。在这种情况下，访问数据的时间差异很小，因为我们使用了一个小数据集。但你必须小心，因为数据集越大，这种差异也会变大，你可能会浪费很多时间仅仅在读取数据上。作为解决方案，尽量在可能的情况下使用
    numpy。
- en: Follow me for more articles of this type![😉](https://emojipedia.org/it/apple/ios-15.4/faccina-che-fa-l-occhiolino/)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 关注我以获取更多类似文章！[😉](https://emojipedia.org/it/apple/ios-15.4/faccina-che-fa-l-occhiolino/)
- en: The End
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结束
- en: '*Marcello Politi*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*马切洛·波利蒂*'
- en: '[Linkedin](https://www.linkedin.com/in/marcello-politi/), [Twitter](https://twitter.com/_March08_),
    [Website](https://marcello-politi.super.site/)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[Linkedin](https://www.linkedin.com/in/marcello-politi/)、[Twitter](https://twitter.com/_March08_)、[Website](https://marcello-politi.super.site/)'
