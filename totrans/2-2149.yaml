- en: Try These 3 Lesser-Known Pandas Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/try-these-3-lesser-known-pandas-functions-cfee4bc7e191](https://towardsdatascience.com/try-these-3-lesser-known-pandas-functions-cfee4bc7e191)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Improve your data processing skills using pandas
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://yongcui01.medium.com/?source=post_page-----cfee4bc7e191--------------------------------)[![Yong
    Cui](../Images/475918ba9ca0ecd923abe2e7843582a9.png)](https://yongcui01.medium.com/?source=post_page-----cfee4bc7e191--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cfee4bc7e191--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cfee4bc7e191--------------------------------)
    [Yong Cui](https://yongcui01.medium.com/?source=post_page-----cfee4bc7e191--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cfee4bc7e191--------------------------------)
    ·6 min read·Aug 28, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bf3727e8ae6553e9f1b0037f4efe9f40.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: Photo by [Balázs Kétyi](https://unsplash.com/@balazsketyi?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'If you ask any experienced data scientist and machine learning engineer, what
    costs the most amount of time in their job? I guess many of them will say: data
    preprocessing — a step that cleans up the data and prepares it for sequential
    data analysis. The reason is simple — garbage in, garbage out. That is if you
    don’t prepare the data correctly, your “insights” of the data can hardly be meaningful.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Although the data preprocessing step can be rather tedious, Pandas provides
    all essential functions that allow us to complete our data clean-up job relatively
    easily. However, because of its versatility, not every user knows all the functionalities
    that the pandas library has to offer. In this article, I’d like to share 3 lesser-known,
    yet super useful, functions that you can try in your data science projects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Without further ado, let’s dive in.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '*Note: To provide context, suppose that you’re responsible for data management
    and analysis of a clothing store. The examples shown below are based on this assumption.*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 1\. explode
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first function that I want to mention is `explode`. This function is useful
    when you deal with data in a column that contains lists. When you use `explode`
    with this column, you create multiple rows by extracting each of the elements
    in the list into separate rows.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a simple code example to show you how to use the `explode` function.
    Suppose that you have a data frame that stores order information. In this table,
    you have a column (i.e., the `order` column) that contains lists of items, as
    shown below:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/d053917054ce1f4d9b05572d384308cf.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
- en: The needed operation is to split each item of the list into a separate row for
    further data processing. Without using `explode`, a naive solution may be the
    following. We simply iterate the original rows and create multiple rows from each
    of the items in the list.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的操作是将列表中的每个项目拆分为单独的行以进行进一步的数据处理。如果不使用`explode`，一个简单的解决方案可能是这样。我们只是迭代原始行，并从列表中的每个项目创建多个行。
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/109b461e89b1c55c516889176bfcecdf.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/109b461e89b1c55c516889176bfcecdf.png)'
- en: 'Using `explode`, we can have a much cleaner solution:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`explode`，我们可以有一个更简洁的解决方案：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, we specify the column that we want to “explode”, which results
    in a new data frame containing the column with each row being an item of the original
    list. Using the `assert` statement, I’m showing that using explode produces the
    same result as the previous solution.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们指定了要“explode”的列，这样会得到一个新数据框，包含每行都是原始列表中的一个项目。使用`assert`语句，我展示了使用explode与之前的解决方案产生相同的结果。
- en: 'As a side note, if you want the new data frame to have an index of 0, 1, …,
    n, you can specify `ignore_index` as `True`. The advantage of using `explode`
    compared with the naive solution is more than just a simple function call vs.
    a for loop — `explode` can also handle cases when certain rows contain a single
    item instead of a list object, such as a row like: `Chloe, Jeans`. This row can’t
    be correctly processed by the naive solution, because Jeans isn’t a list object.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 附带说明一下，如果你希望新数据框的索引为0、1、……、n，可以将`ignore_index`指定为`True`。与简单函数调用和for循环相比，使用`explode`的优势不仅仅是这些—`explode`还能处理某些行包含单个项目而非列表对象的情况，例如像`Chloe,
    Jeans`这样的行。简单的解决方案无法正确处理这种行，因为Jeans不是列表对象。
- en: 2\. assign
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. assign
- en: The second function that I want to discuss is `assign`. This function creates
    new columns or modifies existing ones in a data frame. The major benefit of this
    function is that you can add calculated or derived columns without modifying the
    original data in place.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我想讨论的第二个函数是`assign`。此函数可以在数据框中创建新列或修改现有列。该函数的主要好处是可以添加计算或衍生列，而无需修改原始数据。
- en: 'Let’s say we have a data frame containing information about the clothing store’s
    products and their prices, as below:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个数据框，包含关于服装店产品及其价格的信息，如下所示：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/aba9e6cd3bb20554978d743eaa4815a1.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aba9e6cd3bb20554978d743eaa4815a1.png)'
- en: 'We need to calculate the discounted prices for each product by applying a discount
    percentage — for the store’s employees, we take 20% off, and for the store’s VIP
    customers, we take 10% off. Without using `assign`, we may have the following
    solution:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要通过应用折扣百分比来计算每个产品的折扣价格—对于店铺员工，折扣20%，对于店铺VIP客户，折扣10%。如果不使用`assign`，我们可能会有以下解决方案：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/6a2f7a55c42acf493b7aca33a42a6aa5.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6a2f7a55c42acf493b7aca33a42a6aa5.png)'
- en: As you can see, we first create a copy of the data frame, such that the creation
    of new columns doesn’t change the original data frame. With the new data frame,
    we create the additional columns.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们首先创建数据框的副本，以确保新列的创建不会更改原始数据框。在新的数据框中，我们创建了额外的列。
- en: 'The `assign` function combines these separate steps, resulting in a cleaner
    solution:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`assign`函数将这些独立的步骤结合在一起，产生一个更简洁的解决方案：'
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see from the above code, in the `assign` function, we specify the
    two additional columns and supply each with the desired calculation. The output
    data frame matches the one that we created just now. As a quick note, you call
    the `assign` function with keyword arguments, and these keywords become the new
    column names.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如从上述代码中可以看出，在`assign`函数中，我们指定了两个附加列，并为每列提供了所需的计算。输出数据框与我们刚刚创建的一个匹配。快速说明一下，你通过关键字参数调用`assign`函数，这些关键字将成为新列名。
- en: 3\. interpolate
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. interpolate
- en: The third function I want to mention is `interpolate`, using which we can fill
    missing values in a data frame using various interpolation methods. As some of
    you may know, interpolation is a technique that estimates values based on the
    surrounding data points. In particular, when you deal with time-series data, it’s
    a common technique to fill missing values.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我想提到的第三个函数是`interpolate`，使用它我们可以通过各种插值方法填补数据框中的缺失值。正如你们中的一些人可能知道的那样，插值是一种基于周围数据点估算值的技术。特别是在处理时间序列数据时，这是填补缺失值的常用技术。
- en: 'Let’s say you have a data frame that stores the sales data. However, because
    in some days, the manager forgot to enter the sales data into the source, which
    resulted in some missing values, as below:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个存储销售数据的数据框。然而，由于在某些天，经理忘记将销售数据输入源中，导致一些缺失值，如下所示：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/847aaeaa2929e8725bea7d5b96c991ea.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/847aaeaa2929e8725bea7d5b96c991ea.png)'
- en: 'If we don’t use the `interpolate` function, we may identify the indices of
    missing values and locate their surrounding values, using which you can interpolate
    the missing values. As you can imagine, it’s a very complicated process. By contrast,
    you can use the `interpolate` function, which takes care of all these tedious
    steps, as below:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不使用`interpolate`函数，我们可能需要识别缺失值的索引并定位其周围的值，利用这些值来插值缺失值。如你所想，这是一项非常复杂的过程。相反，你可以使用`interpolate`函数，它处理了所有这些繁琐的步骤，如下所示：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/19b0c44fd1616665f0c98528ae9336f0.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/19b0c44fd1616665f0c98528ae9336f0.png)'
- en: In the interpolated data frame, you don’t see any missing values, and all of
    them are filled with interpolated values based on their surrounding values. As
    you may notice, the default interpolation method is linear, which assumes the
    changes are linear in the range of missing values, bounded by their non-missing
    neighbors. There are other interpolation methods, and you can check them out in
    the official [documentation](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.interpolate.html).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在插值后的数据框中，你看不到任何缺失值，所有缺失值都已被基于其周围值的插值值填补。如你所见，默认的插值方法是线性插值，这假设在缺失值范围内的变化是线性的，由其非缺失的邻近值所界定。还有其他插值方法，你可以在官方[文档](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.interpolate.html)中查看它们。
- en: Conclusion
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This is pretty much for this article. With the iterations of the pandas library,
    more and more functions have become available in recent versions. If you have
    some operations that you feel like complicated, look up its official documentation
    and there might be functions that are readily available for you to use, such as
    the `interpolate` function that can be used in dealing with missing data in the
    time-series analysis.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的内容大致如此。随着pandas库的迭代，越来越多的函数在最新版本中可用。如果你遇到一些复杂的操作，可以查阅其官方文档，可能会有现成的函数可供使用，比如可以用于处理时间序列分析中缺失数据的`interpolate`函数。
