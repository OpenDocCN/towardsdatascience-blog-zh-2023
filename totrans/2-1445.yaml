- en: 'Loguru: Simple as Print, Flexible as Logging'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/loguru-simple-as-print-flexible-as-logging-c964467f64aa](https://towardsdatascience.com/loguru-simple-as-print-flexible-as-logging-c964467f64aa)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The simple logging solution for your data science project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://khuyentran1476.medium.com/?source=post_page-----c964467f64aa--------------------------------)[![Khuyen
    Tran](../Images/98aa66025ad29b618e875c75f1c400a5.png)](https://khuyentran1476.medium.com/?source=post_page-----c964467f64aa--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c964467f64aa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c964467f64aa--------------------------------)
    [Khuyen Tran](https://khuyentran1476.medium.com/?source=post_page-----c964467f64aa--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c964467f64aa--------------------------------)
    ·8 min read·Jul 17, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3829b994881a3b1be639cbae3c28152d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '*Originally published at* [*https://mathdatasimplified.com*](https://mathdatasimplified.com/2023/07/17/simplify-your-python-logging-with-loguru/)
    *on July 17, 2023.*'
  prefs: []
  type: TYPE_NORMAL
- en: Why Use Logging in a Data Science Project?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data scientists often use the print function to debug their code. However, as
    the number of print statements increases, it becomes difficult to identify where
    the output is from due to the lack of line numbers or function names.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When putting the code into production, manually going through and removing all
    the debugging lines can be a tedious and error-prone task.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Logging provides the perfect solution for this problem by allowing data scientists
    to specify different levels (debug, info, warning, error) for their output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: By setting appropriate log levels, data scientists can selectively enable or
    disable certain types of output based on their needs. In production environments,
    they can set the log level to “INFO” or higher to exclude debugging logs, keeping
    logs concise and relevant.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Since the logs contain additional information, such as timestamps, function
    names, and line numbers, data scientists can quickly pinpoint the origin of log
    messages.
  prefs: []
  type: TYPE_NORMAL
- en: Data scientists can also direct log output to a file to review logs from previous
    runs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Why Are Many Data Scientists Not Using Logging?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many data scientists still prefer using print statements over logging because
    print is simpler and doesn’t require as much setup. For small scripts and one-off
    tasks, the overhead of setting up a logging framework seems unnecessary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Wouldn’t it be nice if there was a library that allows you to leverage the power
    of logging while making the experience as simple as print?
  prefs: []
  type: TYPE_NORMAL
- en: That is when Loguru, an open-source Python library, comes in handy. This article
    will show some Loguru features that make it a great alternative to the standard
    logging library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Feel free to play and fork the source code of this article here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/khuyentran1401/Data-science/tree/master/productive_tools/logging_tools?source=post_page-----c964467f64aa--------------------------------)
    [## Data-science/productive_tools/logging_tools at master · khuyentran1401/Data-science'
  prefs: []
  type: TYPE_NORMAL
- en: Collection of useful data science topics along with articles, videos, and code
    …
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/khuyentran1401/Data-science/tree/master/productive_tools/logging_tools?source=post_page-----c964467f64aa--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Elegant Out-of-the-Box Functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, logging gives boring and not very useful logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In contrast, Loguru generates informative and vibrant logs by default.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/54018e60bf25a291e18e51b50a965a91.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Format Logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Formatting logs allows you to add useful information to logs such as timestamps,
    log levels, module names, function names, and line numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The traditional logging approach uses the % formatting, which is not intuitive
    to use :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In contrast, Loguru uses the `{}` formatting, which is much more readable and
    easy to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Save Logs to Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Saving logs to files and printing them to the terminal using the traditional
    logging module requires two extra classes `FileHandler` and `StreamHandler`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: However, with Loguru, you can attain the same functionality with just the `add`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Rotate Logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rotating logs prevents the size of log files from getting too large by periodically
    creating new log files and archiving or removing older ones.
  prefs: []
  type: TYPE_NORMAL
- en: In the logging library, rotating logs requires an additional class called `TimedRotatingFileHandler`.
    The following code switches to a new log file every week ( `when="WO", interval=1`)
    and retains up to 4 weeks' worth of log files ( `backupCount=4`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In Loguru, you can replicate this behavior by adding the `rotation` and `retention`
    arguments to the `add` method. The syntax for specifying these arguments is readable
    and easy to use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Filter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Filtering in logging allows you to selectively control which log records should
    be output based on specific criteria.
  prefs: []
  type: TYPE_NORMAL
- en: In the logging library, filtering logs requires creating a custom logging filter
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In Loguru, you can simply use a lambda function to filter logs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Catch Exceptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Conventional logs for exceptions can be ambiguous and challenging to debug:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The exceptions displayed above are not very helpful as they don’t provide information
    about the values of `c` that triggered the exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Loguru enhances error identification by displaying the entire stack trace,
    including the values of variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/00e66ec52d1208b3a60d0c3b4bda08d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Loguru’s `catch` decorator allows you to catch any errors within a function.
    This decorator also identifies the thread on which the error occurs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/df176fcc258471a4f72be579f57daf34.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: But I don’t want to add more dependencies to my Python project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although incorporating Loguru into your project requires installing an additional
    library, it is remarkably lightweight and occupies minimal disk space.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, it helps in reducing boilerplate code, significantly reducing the
    friction associated with using logging and making your project easier to maintain
    in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: 'I love writing about data science concepts and playing with different data
    science tools. You can stay up-to-date with my latest posts by:'
  prefs: []
  type: TYPE_NORMAL
- en: Subscribing to my newsletter on [Data Science Simplified](https://mathdatasimplified.com/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect with me on [LinkedIn](https://www.linkedin.com/in/khuyen-tran-1401/)
    and [Twitter](https://twitter.com/KhuyenTran16).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
