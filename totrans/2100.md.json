["```py\nfrom sklearn.model_selection import train_test_split\n\nfrom src.tde import time_delay_embedding\n\n# Train / test split\ntrain, test = train_test_split(series, test_size=0.2, shuffle=False)\n\n# using past 12 observations as explanatory variables\nN_LAGS = 12\n# using the next 12 hours as the forecasting horizon\nHORIZON = 12\n\n# transforming time series into a tabular format for supervised learning\nX_train, Y_train = time_delay_embedding(train, n_lags=N_LAGS, horizon=HORIZON, return_Xy=True)\nX_test, Y_test = time_delay_embedding(test, n_lags=N_LAGS, horizon=HORIZON, return_Xy=True)\n```", "```py\nfrom sktime.transformations.series.date import DateTimeFeatures\n\nhourly_feats = DateTimeFeatures(ts_freq='H',\n                                keep_original_columns=False,\n                                feature_scope='efficient')\n\ndtime_train = hourly_feats.fit_transform(X_train)\n```", "```py\nfrom datetime import datetime\n\nimport numpy as np\nimport pandas as pd\n\nclass FourierTerms:\n\n    def __init__(self, period: float, n_terms: int, prefix=''):\n        self.period = period\n        self.n_terms = n_terms\n        self.prefix = prefix\n\n    def transform(self, index: pd.DatetimeIndex, use_as_index: bool = True):\n        t = np.array(\n            (index - datetime(1970, 1, 1)).total_seconds().astype(float)\n        ) / (3600 * 24.)\n\n        fourier_x = np.column_stack([\n            fun((2.0 * (i + 1) * np.pi * t / self.period))\n            for i in range(self.n_terms)\n            for fun in (np.sin, np.cos)\n        ])\n\n        col_names = [\n            f'{self.prefix}{fun.__name__[0].upper()}{i}'\n            for i in range(self.n_terms)\n            for fun in (np.sin, np.cos)\n        ]\n\n        fourier_df = pd.DataFrame(fourier_x, columns=col_names)\n\n        if use_as_index:\n            fourier_df.index = index\n\n        return fourier_df\n```", "```py\nfourier_daily = FourierTerms(n_terms=2, period=24, prefix='D_')\nfourier_monthly = FourierTerms(n_terms=2, period=24 * 30.5, prefix='M_')\nfourier_yearly = FourierTerms(n_terms=2, period=24 * 365, prefix='Y_')\n\ndfourier_train = fourier_daily.transform(X_train.index)\nmfourier_train = fourier_monthly.transform(X_train.index)\nyfourier_train = fourier_yearly.transform(X_train.index)\n\nfeats_train = pd.concat([X_train, dtime_train, dfourier_train,\n                         mfourier_train, yfourier_train],\n                        axis=1)\n\nmodel = RandomForestRegressor()\nmodel.fit(feats_train, Y_train)\n```"]