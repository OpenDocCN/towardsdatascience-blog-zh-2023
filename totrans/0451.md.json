["```py\nimport pandas as pd\n# Load the data\ndf = pd.read_csv(\"data.csv\")\n# Remove missing data and keep only useful columns\ndf = df.loc[\n    df['Value'] != \"No data\", \n    ['ParentLocation', 'Location', 'Period', 'Dim1', 'Value']\n]\n# Rename columns\ndf.columns = ['ParentLocation', 'Location', 'Period', 'Gender', 'Prevalence']\n# Some values in Prevalence contain ranges (like '13.4 [8.7 â€“ 18.9]'), so we just keep the average\ndf['Prevalence'] = df['Prevalence'].apply(\n    lambda x: float(x.split('[')[0]) if '[' in x else x\n)\n```", "```py\nimport seaborn as sns\n\n# Apply the style\nsns.set_style(\"ticks\")\nsns.despine()\n\n# Prepare df for this graph\ngrouped_df = df.groupby(\n    ['ParentLocation', 'Gender', 'Period']\n)['Prevalence'].mean().reset_index()\n\n# Create visualization\nsns.relplot(\n    data=grouped_df[\n        grouped_df['Gender'] != 'Both sexes'\n    ],\n    kind=\"line\",\n    x=\"Period\", \n    y=\"Prevalence\", \n    col=\"Gender\",\n    hue=\"ParentLocation\", \n    palette=\"Paired\"\n)\n```", "```py\nimport ipywidgets as widgets\n\ncountries = sorted(pd.unique(df['Location']))\n\n# Creates Dropdown Widget\ndef create_dd(desc, i=0):\n    dd = widgets.Dropdown(\n        options=countries, \n        value=countries[i], \n        description=desc\n    )\n    return dd\n\n# Creates the relplot\ndef draw_relplot(country1, country2):\n    sns.relplot(\n        data=df[\n            (df['Location'].isin([country1, country2]))\n            & (df['Gender'] != 'Both sexes')\n        ],\n        kind=\"line\",\n        x=\"Period\", \n        y=\"Prevalence\", \n        col=\"Gender\",\n        hue=\"Location\", \n        palette=\"Paired\"\n    )\n\n# Generate the final widget\ndd1 = create_dd('Country 1', 0)\ndd2 = create_dd('Country 2', 1)\nui = widgets.HBox([dd1, dd2])\n\n# Create the interactive plot and display\nout = widgets.interactive_output(\n    draw_relplot, \n    {'country1': dd1, 'country2': dd2}\n)\n\ndisplay(ui, out)\n```", "```py\nfrom bokeh.plotting import figure\nfrom bokeh.io import show, output_notebook\nfrom bokeh.layouts import row\nfrom bokeh.palettes import Paired\n\ndef prepare_figure(gender):\n    l = figure(\n        title=f\"Gender = {gender}\", \n        x_axis_label='Period', \n        y_axis_label='Prevalence',\n        width=475, \n        outer_width=475,\n        height=500,\n    )\n    for i, loc in enumerate(pd.unique(grouped_df['ParentLocation'])):\n        l.line(\n            grouped_df[\n                (grouped_df['Gender'] == gender) \n                & (grouped_df['ParentLocation']==loc)\n            ]['Period'], \n            grouped_df[\n                (grouped_df['Gender'] == gender) \n                & (grouped_df['ParentLocation']==loc)\n            ]['Prevalence'], \n            legend_label=loc, \n            line_width=2,\n            color=Paired[12][i]\n        )\n\n    l.legend.location = 'top_left'\n    l.legend.click_policy=\"mute\"\n    l.legend.label_text_font_size='8px'\n    l.legend.background_fill_alpha = 0.4\n\n    return l\n\n# Render the figure inline\noutput_notebook()\n\n# Create the first figure and input the data\nl1=prepare_figure('Male')\n\n# Create the second figure and input the data\nl2=prepare_figure('Female')\n\np = row(l1, l2)\n\n# Show the plot\nshow(p)\n```", "```py\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\n# Define variables\ncolors = ['#a6cee3', '#1f78b4']\n\n# Define widgets (using previous function)\ndd1 = create_dd('Country 1', 0)\ndd2 = create_dd('Country 2', 1)\n\n# Create figure and traces\ndef create_figure(country1, countr\n    fig = make_subplots(\n        shared_xaxes=True, \n        shared_yaxes=True, \n        rows=1, \n        cols=2,\n        vertical_spacing = 0,\n        subplot_titles=(\"Gender = Female\", \"Gender = Male\"),\n\n    )\n\n    for j, gender in enumerate(['Female', 'Male']):\n        for i, loc in enumerate([country1, country2]):\n            fig.add_trace(\n                go.Scatter(\n                    x=df[\n                        (df['Gender'] == gender) \n                        & (df['Location'] == loc)\n                    ]['Period'], \n                    y=df[\n                        (df['Gender'] == gender) \n                        & (df['Location'] == loc)\n                    ]['Prevalence'], \n                    name=loc, \n                    line=go.scatter.Line(color=colors[i]), \n                    hovertemplate=None,\n                    showlegend=False if j==0 else True\n                ), \n                row=1, \n                col=j+1 \n            )\n\n    # Prettify\n    fig.update_xaxes(showspikes=True, spikemode=\"across\")\n    fig.update_layout(\n        hovermode=\"x\",\n        template='simple_white'\n    )\n\n    return fig\n\nfig = create_figure(countries[0], countries[1])\n\n# Create the Figure Widget\ng = go.FigureWidget(\n    data = fig,\n    layout=go.Layout(\n        barmode='overlay'\n    )\n)\n\n# Handle what to do when the DD value changes\ndef response(change):\n    dfs = []\n    for gender in ['Female', 'Male']:\n        for loc in [dd1.value, dd2.value]:\n            dfs.append(\n                df[(df['Gender'] == gender)\n                  & (df['Location'] == loc)]\n            )\n\n    x = [temp_df['Period'] for temp_df in dfs]\n    y = [temp_df['Prevalence'] for temp_df in dfs]\n\n    with g.batch_update():\n        for i in range(len(g.data)):\n            g.data[i].x = x[i]\n            g.data[i].y = y[i]\n            g.data[i].name = dd1.value if i%2 == 0 else dd2.value\n\n        g.layout.barmode = 'overlay'\n        g.layout.xaxis.title = 'Period'\n        g.layout.yaxis.title = 'Prevalence'\n\ndd1.observe(response, names=\"value\")\ndd2.observe(response, names=\"value\")\n\ncontainer = widgets.HBox([dd1, dd2])\nwidgets.VBox([container, g])\n```", "```py\n# Install dash and jupyter_dash\n!pip install dash\n!pip install jupyter-dash\n\n# Import\nimport dash_core_components as dcc\nfrom dash import html\nfrom jupyter_dash import JupyterDash\n```", "```py\napp = JupyterDash(__name__)\n```", "```py\n html.Div([ \n        html.H1('Countries'), \n        html.Div(\n            [dcc.Dropdown(\n                id='country1_dropdown',\n                options=df['Location'].unique().tolist(),\n                value='',\n                placeholder='Select a country'\n            ),\n             dcc.Dropdown(\n                 id='country2_dropdown',\n                 options=df['Location'].unique().tolist(),\n                 value='',\n                 placeholder='Select a country'\n            )]\n        )\n    ]\n)\n```", "```py\nhtml.Div([\n    dcc.Graph(\n        id='chart'\n    )\n])\n```", "```py\nhtml.Div([\n        dcc.Graph(\n            id='chart', \n            style={}\n        )\n    ], style={\n        'grid-column-start': 'second',\n        'grid-column-end': 'third',\n    }\n)\n```", "```py\napp.layout = html.Div([\n    # Dropdown menu\n    html.Div([ \n        html.H1('Countries'), \n        html.Div(\n            [dcc.Dropdown(\n                id='country1_dropdown',\n                options=df['Location'].unique().tolist(),\n                value='',\n                placeholder='Select a country',\n                style={'margin-bottom': '10px', 'max-width': '200px'}\n            ),\n             dcc.Dropdown(\n                 id='country2_dropdown',\n                 options=df['Location'].unique().tolist(),\n                 value='',\n                 placeholder='Select a country',\n                 style={'max-width': '200px'}\n            )]\n        )\n    ], style={\n        'grid-column-start' : 'first',\n        'grid-column-end' : 'second',\n        'padding': '2%',\n        'justify-self': 'center'\n    }),\n\n    # Plot\n    html.Div([\n        dcc.Graph(\n            id='chart', \n            style={}\n        )\n    ], style={\n        'grid-column-start' : 'second',\n        'grid-column-end' : 'third',\n    })\n], style={\n    'width': '100vw'\n    'display': 'inline-grid',\n    'grid-template-columns': '[first] 15% [second] 60% [third] 25%',\n    'grid-template-rows': '[row] 100%',\n    'grid-gap': '1rem',\n    'align-items': 'right',\n})\n```", "```py\ncolors = ['#a6cee3', '#1f78b4'] \n\n@app.callback(\n    dash.dependencies.Output('chart', 'figure'),\n    dash.dependencies.Input('country1_dropdown', 'value'),\n    dash.dependencies.Input('country2_dropdown', 'value')\n)\ndef update_chart(country1, country2):   \n\n    # Create figure and traces\n    fig = make_subplots(\n        shared_xaxes=True, \n        shared_yaxes=True, \n        rows=1, \n        cols=2,\n        vertical_spacing = 0,\n        subplot_titles=(\"Gender = Female\", \"Gender = Male\"),\n\n    )\n\n    for j, gender in enumerate(['Female', 'Male']):\n        for i, loc in enumerate([country1, country2]):\n            fig.add_trace(\n                go.Scatter(\n                    x=df[\n                        (df['Gender'] == gender) \n                        & (df['Location'] == loc)\n                    ]['Period'], \n                    y=df[\n                        (df['Gender'] == gender) \n                        & (df['Location'] == loc)\n                    ]['Prevalence'], \n                    name=loc, \n                    line=go.scatter.Line(color=colors[i]), \n                    hovertemplate=None,\n                    showlegend=False if j==0 else True\n                ), \n                row=1, \n                col=j+1 \n            )\n\n    # Prettify\n    fig.update_xaxes(showspikes=True, spikemode=\"across\")\n    fig.update_layout(\n        hovermode=\"x\",\n        template='simple_white',\n    )\n\n    return fig\n```", "```py\n# Run app\nif __name__ == '__main__':\n    app.run_server()\n```", "```py\n**Thanks for reading the post!** \n\nI really hope you enjoyed it and found it insightful.\n\nFollow me and subscribe to my mailing list for more \ncontent like this one, it helps a lot!\n\n**@polmarin**\n```"]