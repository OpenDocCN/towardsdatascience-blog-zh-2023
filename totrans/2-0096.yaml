- en: 5 Best Python Synthetic Data Generators And How to Use Them When You Lack Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/5-best-python-synthetic-data-generators-and-how-to-use-them-when-you-lack-data-f62bcf62d43c](https://towardsdatascience.com/5-best-python-synthetic-data-generators-and-how-to-use-them-when-you-lack-data-f62bcf62d43c)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Let's get even more data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/?source=post_page-----f62bcf62d43c--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----f62bcf62d43c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f62bcf62d43c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f62bcf62d43c--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----f62bcf62d43c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f62bcf62d43c--------------------------------)
    ·8 min read·Jan 23, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4ec4344f18ad73a5f9dd05b5af784f43.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Photo by** [**Maxim Berg**](https://unsplash.com/@maxberg?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In 2021, 2.5 quintillion bytes (2.5 million terabytes) of data were produced
    daily. Today, it is even more. But apparently, that''s not enough because the
    Python ecosystem has many libraries to produce synthetic data. Maybe some of them
    are created just for the sake of being able to generate synthetic data, but most
    have beneficial applications such as:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Machine learning: when real-world data is not available or difficult to obtain
    for model training'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data privacy and security: Replace sensitive information in datasets with realistic
    but not actual data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Testing and debugging: test and debug software with synthetic data in a controlled
    environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data augmentation: artificially generating more data points from existing data
    using machine learning or statistics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This article will show six Python libraries for the above purposes and how to
    use them.
  prefs: []
  type: TYPE_NORMAL
- en: Random user information with Faker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Faker is one of the best early Python libraries to generate all types of random
    information. Some commonly-used attributes Faker generate are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Personal info: name, birthday, email, password, address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All kinds of date and timezone information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Financial details: credit cards, SSNs, banking'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Misc: URLs, sentences, language codes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'It has an intuitive API as well. After initiating a `Faker` class, you can
    generate a new fake item by calling its method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'All these methods return new items on each call, so it is easy to build an
    artificial CSV dataset with a code snippet like the one below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/975458f00f30d31b332ec2149298fbb2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: If you notice, the name and email addresses do not match. That's one of the
    disadvantages of using Faker — Faker-generated datasets are easily identifiable
    when used in public.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about it from [the docs](https://faker.readthedocs.io/en/master/).
  prefs: []
  type: TYPE_NORMAL
- en: Synthetic datasets with Sklearn for ML tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sklearn is such a vast and excellent library that it has dedicated support for
    synthetic data generation.
  prefs: []
  type: TYPE_NORMAL
- en: Its `datasets` module includes many functions to generate artificial datasets
    for various machine learning tasks. The most popular functions are `make_classification`
    and `make_regression`.
  prefs: []
  type: TYPE_NORMAL
- en: Both have `n_samples` and `n_features` parameters to control the number of rows
    and features of the resulting synthetic dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To control the difficulty of the task, you can specify how many features are
    useful or redundant with `n_informative` (correlated) or `n_redundant` (linear
    combinations of informative features) parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '`make_classification` also offers much control over the classification target,
    namely, the number of classes, clusters per class, and class weights.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also the `make_blobs` function for generating clustering tasks as
    seen below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9dad8b7a40590adad9fc6818e9cabf15.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: If you are looking for something fancy, there are other functions such as [make_checkerboard](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_checkerboard.html),
    [make_circles](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_circles.html),
    [make_moons](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_moons.html),
    and [make_s_curve](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_s_curve.html).
  prefs: []
  type: TYPE_NORMAL
- en: Dataset with outliers in PyOD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Anomaly detection is a ubiquitous problem in data science. But quality datasets
    with outliers are hard to come by if you want to practice. Fortunately, the Python
    Outlier Detection (PyOD) library has a utility function to generate synthetic
    data with outliers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f98d76dd50c6d6250ca7f838e51d1345.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The `generate_data` offers control over the number of rows in training and test
    sets and also the percentage of outliers in the resulting sets (`contamination`).
  prefs: []
  type: TYPE_NORMAL
- en: PyOD also has the largest suite of anomaly detection algorithms in the Python
    ecosystem. To learn more about it, you can check out [my anomaly detection course](https://app.datacamp.com/learn/courses/anomaly-detection-in-python)
    on DataCamp.
  prefs: []
  type: TYPE_NORMAL
- en: Synthetic data on top of another dataset with CTGAN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, onto the great stuff.
  prefs: []
  type: TYPE_NORMAL
- en: When you have limited data, it is hard for machine learning models to generalize
    well and not overfit. In such cases, you can use Conditional General Adversarial
    Networks — CTGAN.
  prefs: []
  type: TYPE_NORMAL
- en: After you fit it to any dataset, CTGAN can generate synthetic highly anonymous
    samples from the dataset's information space. This is a great way to increase
    both data security and dataset size.
  prefs: []
  type: TYPE_NORMAL
- en: '[CTGAN](https://github.com/sdv-dev/CTGAN) is provided by [the Synthetic Data
    Vault (SDV) project](https://github.com/sdv-dev). Its Python API exposes a `CTGAN`
    class that requires the dataset to be learned and a list of its categorical columns.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you can draw as many samples from it as you want with the `sample` function.
    Below, we are sampling 20k synthetic samples from the [cliché Iris dataset](/18-non-cliché-datasets-for-beginner-data-scientists-to-build-a-strong-portfolio-c59743b2a829):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7f2f68b2ad1b5934551f4bbcd8ff17bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author. [Iris dataset (CC By 4.0).](https://archive-beta.ics.uci.edu/dataset/53/iris)
  prefs: []
  type: TYPE_NORMAL
- en: Mimesis — Advanced Faker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mimesis is a full-fledged random information generator built upon Faker. It
    can generate many, many more random attributes than Faker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Its random generators are grouped into 20 categories, which makes Mimesis much
    more organized.
  prefs: []
  type: TYPE_NORMAL
- en: 'It also greatly supports country-specific information for 32 locales (languages).
    Below, we are generating a thousand rows of fake Spanish data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8211ea27661ae18b651976f61e3cdf27.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: You can also create custom locales where you combine multiple languages for
    area-specific information, i.e., data specific to western Europe.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about it from its [massive docs](https://mimesis.name/en/v6.0.0/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Image augmentation with TensorFlow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most effective methods to artificially increase the size of image
    datasets in computer vision problems is augmentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The idea is simple: when you have a small image dataset, too small for a neural
    network to train effectively, you can increase the number of images by using a
    variety of random image transformations. This way, the network will have more
    diverse examples to train on. Common image transformations are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Geometric: rotation, translation, scaling, flipping — change the size, orientation,
    and position of objects in images'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/aae8b7c4955ee5d7a8e9117edb385835.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from [TensorFlow docs (Apache License)](https://www.tensorflow.org/tutorials/images/data_augmentation)
  prefs: []
  type: TYPE_NORMAL
- en: 'Color and brightness: random changes in brightness and contrast to introduce
    more variation in lightning and color conditions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/8069a1a1ab49fabb8bf98d913575ab20.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from [TensorFlow docs (Apache License)](https://www.tensorflow.org/tutorials/images/data_augmentation)
  prefs: []
  type: TYPE_NORMAL
- en: 'Noise and blur: adding random noise and blurring effects to simulate different
    levels of image quality'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Such transformations can significantly increase dataset size by introducing
    similar but not identical image variations. This, in turn, results in performance
    gains in neural networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Image augmentation can be performed in many ways in TensorFlow. For image classification
    tasks, there is the `ImageDataGenerator` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You initialize it and set the transformations you want. Then, you can use its
    `flow_from_directory` method to read images in batches from the specified data
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Afterward, you can pass `train_generator` to Keras models' `fit`. The generator
    works asynchronously - while the model is training on a batch, the generator applies
    the transformations and resizes images of the next batch in the background.
  prefs: []
  type: TYPE_NORMAL
- en: 'For `flow_from_directory` to work, the structure of the dataset folder should
    have a hierarchy like the one below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The dataset must contain train and validation (and test) directories with images
    grouped into separate folders under their class name.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are other alternatives if you can''t force your dataset into such a structure.
    For example, when you are building your models with the Keras Sequential API,
    you can use transformation layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even though there is already so much data worldwide, synthetic data is becoming
    increasingly popular. This is reflected in the number of emerging synthetic data
    startups. According to [this market analysis](https://www.grandviewresearch.com/industry-analysis/synthetic-data-generation-market-report),
    the global synthetic data generation industry was worth over 100 million in 2021
    and is expected to grow at an annual rate of 34.8%.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we only scratched the industry's surface by learning about
    some of the most popular open-source alternatives. Unless you are looking for
    enterprise solutions, those libraries are more than enough for your basic needs.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading!
  prefs: []
  type: TYPE_NORMAL
- en: Loved this article and, let’s face it, its bizarre writing style? Imagine having
    access to dozens more just like it, all written by a brilliant, charming, witty
    author (that’s me, by the way :).
  prefs: []
  type: TYPE_NORMAL
- en: For only 4.99$ membership, you will get access to not just my stories, but a
    treasure trove of knowledge from the best and brightest minds on Medium. And if
    you use [my referral link](https://ibexorigin.medium.com/membership), you will
    earn my supernova of gratitude and a virtual high-five for supporting my work.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----f62bcf62d43c--------------------------------)
    [## Join Medium with my referral link — Bex T.'
  prefs: []
  type: TYPE_NORMAL
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----f62bcf62d43c--------------------------------)
    ![](../Images/a01b5e4fb641db5f35b8172a4388e821.png)
  prefs: []
  type: TYPE_NORMAL
