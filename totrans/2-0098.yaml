- en: 5 Code Optimization Techniques To Speed Up Your Programs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5 种代码优化技术，提高程序运行速度
- en: 原文：[https://towardsdatascience.com/5-code-optimization-techniques-to-speed-up-your-programs-cc7740381bcb](https://towardsdatascience.com/5-code-optimization-techniques-to-speed-up-your-programs-cc7740381bcb)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/5-code-optimization-techniques-to-speed-up-your-programs-cc7740381bcb](https://towardsdatascience.com/5-code-optimization-techniques-to-speed-up-your-programs-cc7740381bcb)
- en: Make your code more efficient and professional with these language-agnostic
    methods
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用这些与语言无关的方法使你的代码更高效、更专业
- en: '[](https://medium.com/@nic-obert?source=post_page-----cc7740381bcb--------------------------------)[![Nicholas
    Obert](../Images/d70330063c9edc2f63e53f62a78f82ec.png)](https://medium.com/@nic-obert?source=post_page-----cc7740381bcb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cc7740381bcb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cc7740381bcb--------------------------------)
    [Nicholas Obert](https://medium.com/@nic-obert?source=post_page-----cc7740381bcb--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nic-obert?source=post_page-----cc7740381bcb--------------------------------)[![尼古拉斯·奥伯特](../Images/d70330063c9edc2f63e53f62a78f82ec.png)](https://medium.com/@nic-obert?source=post_page-----cc7740381bcb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cc7740381bcb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cc7740381bcb--------------------------------)
    [尼古拉斯·奥伯特](https://medium.com/@nic-obert?source=post_page-----cc7740381bcb--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cc7740381bcb--------------------------------)
    ·7 min read·Nov 29, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cc7740381bcb--------------------------------)
    ·7分钟阅读·2023年11月29日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/1538a19522e68cf19f04a0b3e4287df6.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1538a19522e68cf19f04a0b3e4287df6.png)'
- en: Photo by [Shubham Dhage](https://unsplash.com/@theshubhamdhage?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于 [Shubham Dhage](https://unsplash.com/@theshubhamdhage?utm_source=medium&utm_medium=referral)
    的 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Make it work first, then make it fast. This is one common principle many professional
    programmers go by. At first, you may write your code using whichever approach
    seems the most intuitive to save development time on the draft. After you got
    a working implementation, you may want to optimize it by carefully choosing which
    techniques data structures work best in your specific case.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 先使其工作，然后使其更快。这是许多专业程序员遵循的一个常见原则。起初，你可能会使用看起来最直观的方法编写代码，以节省草稿开发时间。在你获得一个可运行的实现后，你可能会希望通过仔细选择哪些技术数据结构在你的具体情况下效果最佳来优化代码。
- en: In this article, we’ll explore five language-agnostic methods you can use to
    improve your code runtime. The following concepts are generic and can be applied
    to any programming language.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将探讨五种与语言无关的方法，你可以用来改善代码的运行时间。以下概念是通用的，可以应用于任何编程语言。
- en: Loop-invariant extraction
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环不变项提取
- en: 'Consider the following Python code that checks a list of strings against a
    regular expression to find all the matches:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑以下 Python 代码，它检查一个字符串列表与正则表达式的匹配情况：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Loops repeatedly apply a set of instructions to a varying input. With this in
    mind, can you spot any operation that doesn’t change in the code above?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 循环会将一组指令反复应用于变化的输入。考虑到这一点，你能在上面的代码中找到任何不变的操作吗？
- en: 'The statement ``rex = re.compile(r’[a-z]+’)`` operates on a constant input:
    the regex string. For every iteration of the loop, this statement does exactly
    the same thing, independently from the loop’s input. If we were to extract this
    invariant statement and execute it once before the loop, the code would still
    have the same overall behavior while saving some CPU cycles.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 语句 ``rex = re.compile(r’[a-z]+’)`` 在一个常量输入上操作：正则表达式字符串。在每次循环迭代中，这个语句都会做完全相同的事情，与循环的输入无关。如果我们将这个不变的语句提取出来，并在循环之前执行一次，代码仍然会保持相同的整体行为，同时节省一些
    CPU 周期。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As a rule of thumb, every variable or operation that is loop-invariant (doesn’t
    depend on the loop’s input or state) should be extracted out of the loop as long
    as the code logic remains the same.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，每个循环不变的变量或操作（不依赖于循环的输入或状态）都应该从循环中提取出来，只要代码逻辑保持不变。
- en: Sometimes, compilers will apply this kind of optimization to your code automatically.
    However, they are not guaranteed to always detect redundant statements, and interpreted
    languages don’t have the privilege of ahead-of-time optimization, so you should
    keep an eye on loop-invariant code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，编译器会自动对你的代码应用这种优化。然而，它们并不总是能够检测到冗余语句，而且解释型语言没有提前优化的特权，因此你应该关注循环不变代码。
- en: Enum states and types
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 枚举状态和类型
- en: 'When representing a variable object state, beginner programmers might think
    of using a string. Consider the following Rust code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在表示变量对象状态时，初学者程序员可能会想到使用字符串。考虑以下Rust代码：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: While strings are an intuitive solution, there are a few problems with that.
    First, string states are vulnerable to typing errors, as shown by the last if
    statement. Also, which are the possible states?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然字符串是一个直观的解决方案，但存在一些问题。首先，字符串状态容易出现输入错误，如最后一个if语句所示。此外，可能的状态有哪些？
- en: Anyway, we’re here to talk optimization. String comparison is terribly slow,
    as you have to check every single character to know whether they are equal. Also,
    strings require significantly more bytes to store than other alternatives. For
    example, you can use an enum to represent the object state and not worry about
    typing mistakes while harnessing the speed of integer comparison.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 不管怎样，我们来谈谈优化。字符串比较非常慢，因为你必须检查每一个字符以确定它们是否相等。此外，字符串需要比其他替代方案更多的字节来存储。例如，你可以使用枚举来表示对象状态，而无需担心输入错误，同时利用整数比较的速度。
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Enums are an abstraction based on integers and require very little memory to
    store. On top of that, enums are usually passed by value, thus avoiding the dereferencing
    overhead during operations like comparison. Many languages support enums natively,
    and most allow for such a pattern.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举是一种基于整数的抽象，所需存储的内存非常少。除此之外，枚举通常是按值传递的，从而避免了在比较等操作时的解引用开销。许多语言原生支持枚举，大多数语言允许这种模式。
- en: Algebraic and boolean operations
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代数和布尔操作
- en: 'Consider the following code snippets that include conditional statements:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下包含条件语句的代码片段：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If-statements are compiled into conditional jump instructions, which can make
    your code notably slower when compared to linear branch execution. Sometimes,
    conditional statements can be substituted with an equivalent expression that is
    **usually** faster, depending on its length and operations.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果语句被编译为条件跳转指令，与线性分支执行相比，这可能会显著降低你的代码速度。有时，可以用等效的表达式替代条件语句，**通常**更快，具体取决于其长度和操作。
- en: 'Here are the previous functions optimized using boolean and arithmetic expressions
    instead of conditionals:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用布尔和算术表达式优化过的前面的函数，而不是条件语句：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: However, you should always perform a benchmark on any supposedly optimized alternative
    to check whether it’s actually faster.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你应该始终对任何假定的优化替代方案进行基准测试，以检查它是否确实更快。
- en: Memoization
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 备忘录化
- en: No, it’s not a spelling mistake. Memoization is an algorithm optimization technique
    that consists of memorizing the output of a function along with its input. When
    dealing with resource-intensive functions that are going to be called multiple
    times, you can store the input and result in a map data structure so that you
    don’t have to compute the function again if the input is the same.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不，这不是拼写错误。备忘录化是一种算法优化技术，它包括记住函数的输出及其输入。当处理那些需要多次调用的资源密集型函数时，你可以将输入和结果存储在映射数据结构中，这样如果输入相同，就不需要重新计算函数。
- en: 'A classic example of a function that can be improved with memoization is computing
    the Fibonacci sequence. Consider the following code that calculates the nth number
    of the Fibonacci sequence:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可以通过备忘录化来改进的经典例子是计算斐波那契数列。考虑下面的代码，它计算斐波那契数列中的第n个数字：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For small inputs `n`, the function doesn’t take much time to execute. However,
    due to its time complexity of O(2ⁿ), larger input values will result in a significantly
    longer runtime.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于较小的输入`n`，函数的执行时间不会很长。然而，由于其时间复杂度为O(2ⁿ)，较大的输入值将导致显著更长的运行时间。
- en: 'Consider now this other approach that takes advantage of memorization:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑另一种利用备忘录化的方式：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As you can see from the graph below, memoization greatly improves the function
    runtime:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 从下图中可以看出，备忘录化极大地改善了函数的运行时间：
- en: '![](../Images/c2f38a31ac40a49f8055924c8a95e31d.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c2f38a31ac40a49f8055924c8a95e31d.png)'
- en: Benchmark of regular fibonacci function and memoization-optimized alternative
    (lower is faster)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 常规斐波那契函数和经过记忆化优化的替代函数的基准测试（数值越低越快）
- en: This is because this memoized function’s time complexity is roughly linear.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为这个记忆化函数的时间复杂度大致是线性的。
- en: '![](../Images/ae8ca033430d1d41f0da25fc07432962.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ae8ca033430d1d41f0da25fc07432962.png)'
- en: Memoized fibonacci function time complexity
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 记忆化斐波那契函数的时间复杂度
- en: Use a case-specific data structure
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用特定案例的数据结构
- en: One common example of data structure choice is the ubiquitous linked list vs
    array dilemma. Do you need the O(1) insertion time of linked lists or do you need
    the fast random indexing of arrays? When it comes to the choice of data structure,
    you have to compare the pros and cons of each option to find what fits your case
    best. Sometimes, you may even want to implement a custom-made data structure to
    fit exactly your requirements.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 数据结构选择的一个常见例子是普遍存在的链表与数组困境。你需要链表的O(1)插入时间，还是需要数组的快速随机索引？在选择数据结构时，你必须比较每个选项的优缺点，以找到最适合你的情况的结构。有时，你甚至可能想要实现一个定制的数据结构，以完全符合你的要求。
- en: 'Here are a few other examples of common data structure choices for optimization:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些优化中常见的数据结构选择的其他示例：
- en: '[Copy-on-write](https://en.wikipedia.org/wiki/Copy-on-write) implementations
    (COW). Structures that implement COW allow you to efficiently and safely pass
    data around via a shared immutable reference. The data gets copied only if you
    actually try to mutate it, thus saving time on pointless operations.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[写时复制](https://en.wikipedia.org/wiki/Copy-on-write)实现（COW）。实现COW的结构允许你通过共享不可变引用高效且安全地传递数据。只有在你实际尝试修改数据时，它才会被复制，从而节省了不必要的操作时间。'
- en: '[Circular buffers](https://en.wikipedia.org/wiki/Circular_buffer) are a common
    alternative to traditional arrays when implementing queue-like behavior or for
    caching data.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[循环缓冲区](https://en.wikipedia.org/wiki/Circular_buffer)是实现队列行为或缓存数据时，常见的传统数组替代方案。'
- en: '[Lookup tables](https://en.wikipedia.org/wiki/Lookup_table) and [hash tables](https://en.wikipedia.org/wiki/Hash_table)
    are used for fast indexing of data or handling different cases efficiently without
    branching.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[查找表](https://en.wikipedia.org/wiki/Lookup_table)和[哈希表](https://en.wikipedia.org/wiki/Hash_table)用于快速索引数据或高效处理不同情况而无需分支。'
- en: Parsing tables are a combination of lookup and hash tables nested in a tree-like
    fashion that allows you to efficiently and concisely parse structured data without
    having to write intricated and error-prone code. They are extensively used in
    compilers and classification algorithms.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析表是一种将查找表和哈希表组合在树状结构中的方式，这使你能够高效且简洁地解析结构化数据，而无需编写复杂且易出错的代码。它们在编译器和分类算法中被广泛使用。
- en: Key takeaways
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主要要点
- en: Optimizing code is not a simple job. You have to find the relevant bottlenecks
    first. Then, check carefully whether there are any redundant operations or a more
    direct approach to solve a problem. You may need to sketch your ideas out onto
    a piece of paper to better visualize algorithms, memory layouts, and data structures.
    Lastly, perform benchmarks and tests to see if you actually made your code any
    better or you broke something.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 优化代码不是一项简单的工作。你需要首先找到相关的瓶颈。然后，仔细检查是否存在冗余操作或是否有更直接的方法来解决问题。你可能需要将你的想法草绘到纸上，以更好地可视化算法、内存布局和数据结构。最后，进行基准测试和测试，看看你是否真正改进了代码，或者破坏了某些功能。
- en: I hope you enjoyed this article. If you have any thoughts, please share them
    in a comment. Thanks for reading!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你喜欢这篇文章。如果你有任何想法，请在评论中分享。感谢阅读！
- en: 'If you’re interested in learning more about code optimization, check out the
    following article about lookup tables and hash tables:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解更多关于代码优化的信息，请查看以下关于查找表和哈希表的文章：
- en: '[](https://betterprogramming.pub/get-rid-of-excessive-if-else-statements-with-lookup-and-hash-tables-c7dbed808996?source=post_page-----cc7740381bcb--------------------------------)
    [## Get Rid of Excessive If-Else Statements With Lookup and Hash Tables'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://betterprogramming.pub/get-rid-of-excessive-if-else-statements-with-lookup-and-hash-tables-c7dbed808996?source=post_page-----cc7740381bcb--------------------------------)
    [## 使用查找表和哈希表摆脱过多的 if-else 语句'
- en: A code performance practice that is used all-over professional codebases. Learn
    to use them with these simple examples.
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一种在专业代码库中普遍使用的代码性能实践。通过这些简单的示例学习如何使用它们。
- en: betterprogramming.pub](https://betterprogramming.pub/get-rid-of-excessive-if-else-statements-with-lookup-and-hash-tables-c7dbed808996?source=post_page-----cc7740381bcb--------------------------------)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
