["```py\n# Import libraries\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\nfrom PIL import Image\nfrom matplotlib.patches import Patch, Circle\n```", "```py\nedge_color = \"#30011E\"\nbackground_color = \"#fafafa\"\n\nsns.set_style({\n    \"font.family\": \"serif\",\n    \"figure.facecolor\": background_color,\n    \"axes.facecolor\": background_color,\n})\n```", "```py\n# Load and prepare geo-data\ncounties = gpd.read_file(\"./data/cb_2018_us_county_500k/\")\ncounties = counties[~counties.STATEFP.isin([\"72\", \"69\", \"60\", \"66\", \"78\"])]\ncounties = counties.set_index(\"GEOID\")\n\nstates = gpd.read_file(\"./data/cb_2018_us_state_500k/\")\nstates = states[~states.STATEFP.isin([\"72\", \"69\", \"60\", \"66\", \"78\"])]\n```", "```py\nax = counties.plot(edgecolor=edge_color + \"55\", color=\"None\", figsize=(20, 20))\nstates.plot(ax=ax, edgecolor=edge_color, color=\"None\", linewidth=1)\n\nplt.axis(\"off\")\nplt.show()\n```", "```py\n# Load and prepare geo-data\n...\n\ncounties = counties.to_crs(\"ESRI:102003\")\nstates = states.to_crs(\"ESRI:102003\")\n```", "```py\ndef translate_geometries(df, x, y, scale, rotate):\n    df.loc[:, \"geometry\"] = df.geometry.translate(yoff=y, xoff=x)\n    center = df.dissolve().centroid.iloc[0]\n    df.loc[:, \"geometry\"] = df.geometry.scale(xfact=scale, yfact=scale, origin=center)\n    df.loc[:, \"geometry\"] = df.geometry.rotate(rotate, origin=center)\n    return df\n```", "```py\ndef adjust_maps(df):\n    df_main_land = df[~df.STATEFP.isin([\"02\", \"15\"])]\n    df_alaska = df[df.STATEFP == \"02\"]\n    df_hawaii = df[df.STATEFP == \"15\"]\n\n    df_alaska = translate_geometries(df_alaska, 1300000, -4900000, 0.5, 32)\n    df_hawaii = translate_geometries(df_hawaii, 5400000, -1500000, 1, 24)\n\n    return pd.concat([df_main_land, df_alaska, df_hawaii])\n```", "```py\n# Load and prepare geo-data\n...\n\ncounties = adjust_maps(counties)\nstates = adjust_maps(states)\n```", "```py\n# Load facebook data\nfacebook_df = pd.read_csv(\"./data/county_county.tsv\", sep=\"\\t\")\nfacebook_df.user_loc = (\"0\" + facebook_df.user_loc.astype(str)).str[-5:]\nfacebook_df.fr_loc = (\"0\" + facebook_df.fr_loc.astype(str)).str[-5:]\n```", "```py\n# Create data map\ncounty_id = \"06075\" # San Francisco\ncounty_name = counties.loc[county_id].NAME\ncounty_facebook_df = facebook_df[facebook_df.user_loc == county_id]\n```", "```py\n# Create data map\n...\n\nselected_color = \"#FA26A0\"\ndata_breaks = [\n    (90, \"#00ffff\", \"Top 10%\"),\n    (70, \"#00b5ff\", \"90-70%\"),\n    (50, \"#6784ff\", \"70-50%\"),\n    (30, \"#aeb3fe\", \"50-30%\"),\n    (0, \"#e6e5fc\", \"Bottom 30%\"),\n]\n```", "```py\ndef create_color(county_df, data_breaks):\n    colors = []\n\n    for i, row in county_df.iterrows():\n        for p, c, _ in data_breaks:\n            if row.value >= np.percentile(county_df.value, p):\n                colors.append(c)\n                break\n\n    return colors\n```", "```py\n# Create data map\n...\n\ncounties.loc[:, \"value\"] = (county_facebook_df.set_index(\"fr_loc\").scaled_sci)\ncounties.loc[:, \"value\"] = counties[\"value\"].fillna(0)\ncounties.loc[:, \"color\"] = create_color(counties, data_breaks)\ncounties.loc[county_id, \"color\"] = selected_color\n\nax = counties.plot(edgecolor=edge_color + \"55\", color=counties.color, figsize=(20, 20))\nstates.plot(ax=ax, edgecolor=edge_color, color=\"None\", linewidth=1)\nax.set(xlim=(-2600000, None)) # Removing some of the padding to the left\n\nplt.axis(\"off\")\nplt.show()\n```", "```py\ndef add_title(county_id, county_name):\n    plt.annotate(\n        text=\"Social Connectedness Ranking Between US Counties and\",\n        xy=(0.5, 1.1), xycoords=\"axes fraction\", fontsize=16, ha=\"center\"\n    )\n\n    plt.annotate(\n        text=\"{} (FIPS Code {})\".format(county_name, county_id), \n        xy=(0.5, 1.03), xycoords=\"axes fraction\", fontsize=32, ha=\"center\",\n        fontweight=\"bold\"\n    )\n```", "```py\ndef add_legend(data_breaks, selected_color, county_name):\n    patches = [Patch(facecolor=c, edgecolor=edge_color, label=t) for _, c, t in data_breaks]\n    patches = [Patch(facecolor=selected_color, edgecolor=edge_color, label=county_name)] + patches\n\n    leg = plt.legend(\n        handles=patches,\n        bbox_to_anchor=(0.5, -0.03), loc='center',\n        ncol=10, fontsize=20, columnspacing=1,\n        handlelength=1, handleheight=1,\n        edgecolor=background_color,\n        handletextpad=0.4\n    )\n```", "```py\ndef add_information():\n    plt.annotate(\n        \"The Facebook Connectivity Index measure the likelyhood that users in different\\nlocations are connected on Facebook. The formula divides the number of Facebook\\nconnections with the number of possible connections for the two locations.\",\n        xy=(0.5, -0.08), xycoords=\"axes fraction\", ha=\"center\", va=\"top\", fontsize=18, linespacing=1.8\n    )\n\n    plt.annotate(\n        \"Source: https://dataforgood.facebook.com/\", \n        xy=(0.5, -0.22), xycoords=\"axes fraction\", fontsize=16, ha=\"center\",\n        fontweight=\"bold\"\n    )\n```", "```py\ndef add_circle(ax, counties_df, county_id):\n    center = counties_df[counties_df.index == county_id].geometry.centroid.iloc[0]\n    ax.add_artist(\n        Circle(\n            radius=100000, xy=(center.x, center.y), facecolor=\"None\", edgecolor=selected_color, linewidth=4\n        )\n    )\n```", "```py\n# Create data map\n...\n\nadd_circle(ax, counties, county_id)\nadd_title(county_id, county_name)\nadd_legend(data_breaks, selected_color, county_name)\nadd_information()\n\nplt.axis(\"off\")\nplt.show()\n```"]