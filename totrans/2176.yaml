- en: Understand SQL Injection and Learn to Avoid It in Python with SQLAlchemy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/understand-sql-injection-and-learn-to-avoid-it-in-python-with-sqlalchemy-2c0ba57733b2](https://towardsdatascience.com/understand-sql-injection-and-learn-to-avoid-it-in-python-with-sqlalchemy-2c0ba57733b2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn to interact with databases in a safe way in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://lynn-kwong.medium.com/?source=post_page-----2c0ba57733b2--------------------------------)[![Lynn
    G. Kwong](../Images/b9a05b6587db5ca41c1d8264adda5b06.png)](https://lynn-kwong.medium.com/?source=post_page-----2c0ba57733b2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2c0ba57733b2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2c0ba57733b2--------------------------------)
    [Lynn G. Kwong](https://lynn-kwong.medium.com/?source=post_page-----2c0ba57733b2--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2c0ba57733b2--------------------------------)
    ·5 min read·Apr 12, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a20548112fa3a883fe1500f087c263f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by mohamed_hassan (Hosting Web Man) on Pixabay
  prefs: []
  type: TYPE_NORMAL
- en: SQL Injection is one of the most common and also most dangerous web security
    vulnerabilities which allows hackers to inject malicious SQL code into unvalidated
    and unsanitized plain SQL queries. It is also a common issue that new developers
    overlook.
  prefs: []
  type: TYPE_NORMAL
- en: The cause and solution for SQL Injection are actually pretty simple. In this
    post, we will explore SQL Injection with some simple queries and will pretend
    to be an attacker to exploit our database. At the end of this post, you will fully
    understand SQL Injection and will never make the mistake again after realizing
    its power and danger.
  prefs: []
  type: TYPE_NORMAL
- en: Preparation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As usual, we will create a MySQL database using Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note that the root user is used for simplicity in this post, but it should never
    be used directly in our web applications in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Then let’s create some database and table to play with. The data set is the
    same as the one used in the previous series of posts for simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Since we will use SQLAlchemy in this post for database connection, we need to
    install the necessary libraries. As usual, it’s recommended to create a separate
    virtual environment so that the libraries won’t impact the system also other virtual
    environments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Explore SQL Injection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s now create a simple function to read some data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `read_student_scores()` function looks seemingly normal from a simple coding
    point of view. However, there is a huge security issue that can be exploited by
    malicious users.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we use it normally, it will just work normally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'However, it can also return something that is not supposed to be returned by
    evil users. The first thing to hack is to return all the records, even those that
    a user is not supposed to see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is possible because the `read_student_scores()` function doesn’t clean
    and validate the input parameter and simply concatenates the input data with the
    original query.
  prefs: []
  type: TYPE_NORMAL
- en: This is not uncommon for many developers. Actually, I have seen quite some legacy
    code written in this way. It is lucky that they have not been hacked before. Or
    maybe they have …
  prefs: []
  type: TYPE_NORMAL
- en: SQL Injection can be more harmful than shown above and can actually return anything
    for hackers.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s pretend we are malicious users and try to get some information that
    is not supposed to be returned by this function.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing a hacker wants to know is how many columns are returned. It
    is obvious in this example that two columns are returned. However, when the output
    is displayed with some user interface, it may not be that obvious.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many ways to guess how many columns are returned, two common ones
    are to use `ORDER BY` and `UNION`. Let’s see how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: From the above queries, the results, and the errors, we know that two columns
    are returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can arrive at the same conclusion using `UNION`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Using `UNION` we are able to guess the correct number of columns with a smaller
    number of tests. Actually, `UNION` is the most commonly used hacking tool to exploit
    a database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try to read something that’s not supposed to be returned normally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The database name and version are returned!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see something even scarier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The username and authentication strings of all DB users are returned! Using
    some brute guessing tools, the hacker can hack the passwords in a short time,
    especially if simple passwords are used.
  prefs: []
  type: TYPE_NORMAL
- en: How to avoid SQL Injection?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have understood what SQL Injection is and how dangerous it can be,
    let’s see how it can be avoided in practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most efficient way to prevent SQL Injection is to use parametrized queries,
    which is achieved with the `:param_name` syntax in SQLAlchemy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note that SQLAlchemy 2.0 is used in this post and thus the syntax for specifying
    parameters will be different from that in SQLAlchemy 1.x (normally 1.4).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see what the evil queries will return with parametrized queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: All these evil queries return an empty result, which is much safer than before.
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we have introduced what SQL Injection is, how it works, and how
    to avoid it using simple examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even though using parameterized queries can prevent most instances of SQL injections,
    to make our applications even more robust, we should apply the following strategies
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: Limit the permissions for the DB user to query the database. A root user is
    used in this example for simplicity, but it should never be used in practice.
    Actually, we should create a dedicated DB user (with a strong password) for our
    web application and only grant minimum permissions for it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clean and validate the input queries. If the type of the input data is not consistent
    or if it contains suspicious characters like hash (`#`), semicolon (`;`), minus
    (`-`), or even the word `UNION`, the case should be handled in a safe, robust,
    but also user-friendly way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Never show debugging logs directly to end users. Debugging logs should only
    be used for internal users because they can contain sensitive information that
    can be used by malicious users to exploit the system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Related articles:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[How to Execute Plain SQL Queries With SQLAlchemy in Python](https://betterprogramming.pub/how-to-execute-plain-sql-queries-with-sqlalchemy-627a3741fdb1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Work with SQLAlchemy Query, Table, and ORM Classes in Pandas](https://medium.com/gitconnected/how-to-work-with-sqlalchemy-query-table-and-orm-classes-in-pandas-477599174b6)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
