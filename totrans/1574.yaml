- en: Nested Dictionary Python — A Complete Guide to Python Nested Dictionaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/nested-dictionary-python-a-complete-guide-to-python-nested-dictionaries-756a7822cb4f](https://towardsdatascience.com/nested-dictionary-python-a-complete-guide-to-python-nested-dictionaries-756a7822cb4f)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to work with Nested Dictionary in Python? This article teaches you everything
    you need to know about Python Nested Dictionaries.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@radecicdario?source=post_page-----756a7822cb4f--------------------------------)[![Dario
    Radečić](../Images/41882a3b30bab9da43d66a59f1df366b.png)](https://medium.com/@radecicdario?source=post_page-----756a7822cb4f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----756a7822cb4f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----756a7822cb4f--------------------------------)
    [Dario Radečić](https://medium.com/@radecicdario?source=post_page-----756a7822cb4f--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----756a7822cb4f--------------------------------)
    ·12 min read·Apr 18, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/393f0346b4e4e357c149ccbef699a1e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Kelly Sikkema](https://unsplash.com/@kellysikkema?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: What is Nested Dictionary in Python?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One common data structure in Python is a nested dictionary, or a dictionary
    that can have other dictionaries as values for a given key. Beginners hate nested
    dictionaries because they require more time to work with and parse correctly,
    but it’s nothing you can’t manage with a bit of practice.
  prefs: []
  type: TYPE_NORMAL
- en: '[*New to Python? Learn basic Dictionaries First.*](https://betterdatascience.com/python-dictionaries/)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Today you’ll learn what is a nested dictionary, why to use nested dictionaries
    in Python, how to loop through a nested dictionary in Python, and much more. Regarding
    library imports, stick this to the top of your script or notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It will take care of formatting when printing nested dictionaries, so they’re
    a bit easier to read.
  prefs: []
  type: TYPE_NORMAL
- en: How to Create a Nested Dictionary in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many ways to create a nested dictionary, but you’ll primarily use
    two if you’re creating them from scratch in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Using Regular Python Notation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first way to create a nested Python dictionary is by leveraging regular
    Python notation. It means you don’t have to use any specific functions or libraries
    to create a dictionary. Simply assign it to a variable name, and format the entire
    thing as JSON.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example — the following code snippet creates a nested dictionary
    of employees, where employee email is set for the dictionary key, and additional
    information as a dictionary value. As you can see, the dictionary value is also
    a dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s what this nested dictionary looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/95933a2561bf5a249aff138a03198732.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 1 — Nested dictionary of employees (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: Overall, we have a dictionary with two keys (emails). Each of those keys has
    a dictionary for a value, and there’s even a third dictionary assigned to the
    `address` key.
  prefs: []
  type: TYPE_NORMAL
- en: '**Dictionaries aren’t ordered**, so that’s why you’re seeing the data not reflecting
    the ordering specified in the code. Don’t worry about that.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the zip() Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An alternative way to create a nested dictionary in Python is by using the `zip()`
    function. It's used to iterate over two or more iterators at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate, we’ll declare two lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '`employee_emails` - A list of emails that will represent the dictionary keys'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`employee_details` - A list of details for each employee, such as first name,
    last name, and address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you declare your data in this way, you can pass both to `zip()` and wrap
    everything inside a call to `dict()`. This will assign appropriate key-value pairs.
    Here''s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting data looks the same as what we had before:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/95933a2561bf5a249aff138a03198732.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 2 — Nested dictionary of employees (2) (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: In practice, there’s no reason to use this approach to declare nested dictionaries.
    It’s messy and takes longer to write. Just stick to the first one and you’ll be
    good to go.
  prefs: []
  type: TYPE_NORMAL
- en: Up next, let’s see how to access elements of a nested dictionary in Python.
  prefs: []
  type: TYPE_NORMAL
- en: How to Access Elements of a Nested Dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can access elements of a nested dictionary just like you would for a normal
    one, with one exception — **you now need to add an additional set(s) of brackets.**
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a couple of examples of what you can do:'
  prefs: []
  type: TYPE_NORMAL
- en: Access a single element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access a single element which is also a dictionary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concatenate multiple nested dictionary values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Or in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the output you should see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f2e3cf740754b49292d99ec641bfa68d.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 3 — Accessing elements of a nested Python dictionary (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: Overall, you need as many brackets as there are levels in a nested dictionary
    if you want to get to the bottom. For example, to get the city for `bdoe@email.com`,
    you would write `employees["bdoe@email.com"]["address"]["email"]`. Easy!
  prefs: []
  type: TYPE_NORMAL
- en: How to Change Values in a Nested Dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You now know how to access elements of a nested dictionary, but how can you
    change the values? It’s quite easy, and you can either change the values one by
    one or tackle multiple values at once.
  prefs: []
  type: TYPE_NORMAL
- en: Change a Single Value in a Nested Dictionary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can change a single value in a nested dictionary by accessing it and assigning
    a new value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example shows you how to change the complete `address` for one
    employee, one value at a time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The updated employee now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/afc06b778d468ff68f3cead95ea802a9.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 4 — Changing a single value in a nested dictionary (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: That’s great, but can you change the `address` in one line? Sure you can, let's
    explore how next.
  prefs: []
  type: TYPE_NORMAL
- en: Change Multiple Values in a Nested Dictionary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `address` property is a dictionary itself, which means you can change it
    completely in one line of Python code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s what the updated employee looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fef804a115244a36faefd97e886f06c6.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 5 — Changing multiple values in a nested dictionary (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to access and change nested dictionary elements, so next we’ll
    go over adding new elements to a nested dictionary in Python.
  prefs: []
  type: TYPE_NORMAL
- en: How to Add Elements to a Nested Dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding new elements to a nested dictionary in Python boils down to assigning
    a new key-value pair. It’s that simple!
  prefs: []
  type: TYPE_NORMAL
- en: 'The code snippet below declares two variables to hold the key and value for
    the new nested dictionary item, and then adds this pair by using the `dictionary[key]
    = value` assignment operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Our updated nested dictionary now has 3 records:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7c9bb2e5b58dcca3329dd1b63cf6b8b9.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 6 — Adding elements to a nested dictionary in Python (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: That’s addition, so next let’s go over deletion.
  prefs: []
  type: TYPE_NORMAL
- en: How to Delete Elements from a Nested Dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use Python’s `del` keyword followed by the name of the dictionary and
    a key you want to delete. For example, run `del d["name"]` to delete the key-value
    pair under the key of `name` in the dictionary `d`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, let’s use `del` to delete the newly added employee:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And we’re back to only two records now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/73e47e5df7fbb977d7483b2086921f39.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 7 — Deleting elements from a nested dictionary (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: Up next, let’s go over merging two or more dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: How to Merge Two Nested Dictionaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dictionary merging just means you want to take two or more dictionaries and
    combine them into a single one. It helps if the structure of dictionaries is identical,
    but it’s not required, since this is Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate, let’s declare a new nested dictionary of employees:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/71bfa779e4287a25b9f1c5b138d4fc28.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 8 — Two new employees (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: The idea is to add this dictionary to the one we already have, and there are
    two ways to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Merge Two Dictionaries with the update() Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `update()` function *updates* one dictionary with the contents of another.
    The updating happens inplace, which means you don't have to reassign the variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Our updated nested dictionary now has four records:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a49d325591beefe602a35539d36b5585.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 9 — Merging nested dictionaries (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: This function is easy to work with, but the downside is that **you can only
    add one dictionary at a time**. The next approach is a bit more flexible.
  prefs: []
  type: TYPE_NORMAL
- en: Merge Two Dictionaries with **kwargs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `**kwargs` approach might look strange to newcomers, but it essentially
    just unpacks a dictionary. By doing so, you can unpack as many dictionaries as
    you want into a single new dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The merged nested dictionary is identical to the one we had earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a49d325591beefe602a35539d36b5585.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 10 — Merging nested dictionaries (2) (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, it’s up to you to decide on the best merging approach. We recommend
    `**kwargs` since you can merge dozens of dictionaries in a single line of Python
    code.
  prefs: []
  type: TYPE_NORMAL
- en: How to Iterate Through a Nested Dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There’s no one-size-fits-all solution when it comes to iterating through a nested
    dictionary in Python. A structure of a dictionary item will vary, which means
    you’ll have to customize the code every time.
  prefs: []
  type: TYPE_NORMAL
- en: To show you how, we’ll go over two examples, one simpler and the other a bit
    heavier on the code side.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first example iterates over all dictionary items and prints the key, and
    then also iterates through the corresponding value and prints it. Here’s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what you should see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5545def91c5fc0297470fffbe7a90064.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 11 — Iterating through a nested dictionary (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: This approach might work if you don’t have an additional level of nesting, similar
    to what we have with `address`. It's much more challenging to *address* this,
    but let's give it a try next.
  prefs: []
  type: TYPE_NORMAL
- en: More Advanced Iteration Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The idea now is to step into the `address` dictionary and print all of the elements
    it contains.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the code a bit more robust, we’ll check if the item is a dictionary,
    and if so, iterate through its items. If the tem is not a dictionary, we’ll simply
    print it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s what you should see on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3815d18df9566e2537edd2f7a72e1b15.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 12 — Iterating through a nested dictionary (2) (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: Overall, we’ve managed to parse our nested dictionary structure, but again,
    **this won’t work on all nested dictionaries**. You’ll have to customize the code
    snippet to accommodate your use case, which can be tricky and time-consuming.
  prefs: []
  type: TYPE_NORMAL
- en: How to Flatten a Nested Dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Flattening a nested dictionary means you want to get a dictionary that doesn’t
    contain any dictionaries or lists inside.
  prefs: []
  type: TYPE_NORMAL
- en: This is a very common data preprocessing technique when parsing nested JSON
    documents to a Pandas DataFrame. If that’s what you’re dealing with, you know
    the structure of the input data will be quite different.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the time, you’ll have a **list of dictionaries**. We’ll declare one
    such list below, and add the `email` property inside each employee object instead
    of using it as a dictionary key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Once you have the data in this format, it’s time to flatten it. The following
    recursive function flattens one record, or one dictionary element inside a list.
    For any nested dictionary, it finds it will flatten it in a way that the key renames
    to the full *path*.
  prefs: []
  type: TYPE_NORMAL
- en: The `flatten_dict()` function has to be applied on each record in a list of
    dictionaries, meaning you can use either a Python loop or a list comprehension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have a completely flat structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/81b60c20bea581aa6b5682df3a14ae60.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 13 — Flattening a nested dictionary (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: Note how `address` was appended before its inner key-value pairs, so we still
    get the idea of where it belonged originally.
  prefs: []
  type: TYPE_NORMAL
- en: Now when you have a flat list of dictionaries, you can convert it into a Pandas
    DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Nested Dictionary Python to Pandas DataFrame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to convert a nested dictionary to a Pandas DataFrame, you’ll have
    to flatten it first. Otherwise, you’ll get weird indexing and possibly a dictionary
    for the value of a single cell.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s demonstrate a bad practice first, so you can get the idea of why flatten
    the data. Below we have an identical dictionary of employees to the one we used
    throughout the article. We’re then using it in a call to `pd.DataFrame()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s what the resulting DataFrame looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8db87f6991726a0cf0720db64bf06b92.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 14 — Nested dictionary to a Pandas DataFrame (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: Terrible and not usable. **You need to pass a list of flattened dictionaries
    to** `**pd.DataFrame()**` to get back the data in the appropriate format.
  prefs: []
  type: TYPE_NORMAL
- en: 'You already know how to flatten a nested dictionary, so this should feel like
    a walk in the park:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The DataFrame is now much easier to understand and analyze:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f0771a651af442fdb0db70862c38e8cd.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 15 — Nested dictionary to a Pandas DataFrame (2) (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: And finally, let’s cover nested dictionary to JSON conversion.
  prefs: []
  type: TYPE_NORMAL
- en: Nested Dictionary Python to JSON File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JSON and Python dictionaries go hand in hand, meaning you can easily go from
    a JSON file to a Python dictionary and vice-versa.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll show you how to go from a nested Python dictionary to a JSON file. You’ll
    need to import the `json` module and pass in your dictionary to `json.dumps()`.
    The optional `indent` parameter controls the indentation of nested structures
    inside a dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'And this is what your JSON object should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/be733537cec9514245f919c4895c70dd.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 16 — Nested dictionary to a JSON object (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now use Python’s context manager syntax to write the JSON object to
    a file. This code snippet writes it to a file named `employees.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You can open the JSON file in any text editor or even in JupyterLab. You’ll
    see something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1ba3e621494d22a6782667df4c47b84d.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 17 — Nested dictionary to a JSON file (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: And that’s how you can work with nested dictionaries in Python. Let’s make a
    short recap next.
  prefs: []
  type: TYPE_NORMAL
- en: Summing up Nested Dictionary Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There’s a lot that goes into working with nested dictionaries in Python. You
    can access individual values, change them, add new rows, delete old ones, merge
    multiple dictionaries, iterate over them, and even convert the entire thing to
    a Pandas DataFrame or JSON file.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, there’s no one-size-fits-all solution when it comes to nested
    dictionaries. The structure of one will vary from project to project, which means
    you’ll have to customize the code to match your scenario. That’s especially true
    when it comes to iterating through nested dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: This article should give you a good starting point and will cover 95% of scenarios,
    and you can always explore further on your own.
  prefs: []
  type: TYPE_NORMAL
- en: '*What’s your favorite thing about nested dictionaries? Are they giving you
    a lot of headaches in daily data science tasks?* Let me know in the comment section
    below.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Loved the article? Become a* [*Medium member*](https://medium.com/@radecicdario/membership)
    *to continue learning without limits. I’ll receive a portion of your membership
    fee if you use the following link, with no extra cost to you.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@radecicdario/membership?source=post_page-----756a7822cb4f--------------------------------)
    [## Join Medium with my referral link - Dario Radečić'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Dario Radečić (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@radecicdario/membership?source=post_page-----756a7822cb4f--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '*Originally published at* [*https://betterdatascience.com*](https://betterdatascience.com/nested-dictionary-python/)
    *on April 18, 2023.*'
  prefs: []
  type: TYPE_NORMAL
