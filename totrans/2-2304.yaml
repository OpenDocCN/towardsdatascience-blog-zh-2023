- en: 'Visualizing 3 Sklearn Cross-validation: K-Fold, Shuffle & Split, and Time Series
    Split'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/visualizing-sklearn-cross-validation-k-fold-shuffle-split-and-time-series-split-a13221eb5a56](https://towardsdatascience.com/visualizing-sklearn-cross-validation-k-fold-shuffle-split-and-time-series-split-a13221eb5a56)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Plotting the process of Sklearn K-Fold, Shuffle & Split, and Time Series Split
    cross-validation and showing validating results using Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@borih.k?source=post_page-----a13221eb5a56--------------------------------)[![Boriharn
    K](../Images/1b23a79640f5272c1382918bfdba03b0.png)](https://medium.com/@borih.k?source=post_page-----a13221eb5a56--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a13221eb5a56--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a13221eb5a56--------------------------------)
    [Boriharn K](https://medium.com/@borih.k?source=post_page-----a13221eb5a56--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a13221eb5a56--------------------------------)
    ·11 min read·Jul 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d108871835f017946586b4ff1daf416d.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Ryoji Iwata](https://unsplash.com/ja/@ryoji__iwata?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: What is Cross-validation?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Basically, cross-validation is a statistical method for evaluating learning
    algorithms. A fixed number of folds (groups of data) is set to run the analysis.
    These folds group the data into 2 sets: training and testing (validation) sets,
    that are cross-over in rounds, allowing each data point to be validated.'
  prefs: []
  type: TYPE_NORMAL
- en: The main purpose is to test the model's ability to predict independent data
    that was not used in creating it. It is also useful to cope with problems like
    [overfitting](https://en.wikipedia.org/wiki/Overfitting) or [selection bias](https://en.wikipedia.org/wiki/Selection_bias).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1e795e6552c4b80a654b1939bab4b22b.png)'
  prefs: []
  type: TYPE_IMG
- en: An example of results from cross-validations in this article. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, we are going to apply Python to visualize the process of 3
    cross-validation types from the [Scikit Learn](https://scikit-learn.org/stable/modules/cross_validation.html)
    library:'
  prefs: []
  type: TYPE_NORMAL
- en: K-Fold cross-validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shuffle & Split cross-validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time Series Split cross-validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moreover, the validation results can also be plotted to express insightful information.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started
  prefs: []
  type: TYPE_NORMAL
- en: 1\. K-Fold cross-validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: K-fold is a common method for cross-validation. Firstly, all the data are divided
    into folds. Then, the learning model is created from the training set (k-1 folds),
    and the testing set (the fold left) is used for validation.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, the folds obtained from the K-fold cross-validation are divided as
    equally as possible. Next, we are going to see the process of the K-fold cross-validation.
  prefs: []
  type: TYPE_NORMAL
- en: Import libraries and load data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For example, this article will work with the [wine dataset](https://archive.ics.uci.edu/dataset/109/wine),
    which can be downloaded from the Sklearn library. The dataset is a copy of [UCI
    ML wine data](https://archive.ics.uci.edu/dataset/109/wine) under the [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/)
    license.
  prefs: []
  type: TYPE_NORMAL
- en: In total, there are 13 constituents found in each of the three types of wines.
    These attributes will be used to build a classification model for classifying
    the wine classes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fb6152c16146145fb7cbad158467d821.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next process can be explained: we will start by applying the `KFold` [function](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.KFold.html)
    from Sklearn to group the data into training and testing sets. The number of folds
    can be specified with the *n_splits* parameter*.*'
  prefs: []
  type: TYPE_NORMAL
- en: Then, the Support Vector Machines ([SVMs](https://en.wikipedia.org/wiki/Support_vector_machine))
    will be created to classify wine classes in each iteration using the `svm` [function](https://scikit-learn.org/stable/modules/svm.html#:~:text=Support%20vector%20machines%20(SVMs)%20are,classification,%20regression%20and%20outliers%20detection.).
    Lastly, the `score` [function](https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html#sklearn.svm.SVC.score)
    will be used to measure the mean accuracy of the model performance.
  prefs: []
  type: TYPE_NORMAL
- en: These steps can be performed using the for-loop function in Python, as shown
    in the code below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ce190a8b84af274ff3b0e22fa07b5eb0.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have data and accuracy scores from the iterations, let's define
    a function to create a DataFrame for plotting.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ede77792fc279241bd373a448cd909a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Assign the order number of the iterations to the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3ed4ca8cb65b1227ba8cf0f52d807472.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualizing K-Fold cross-validation iterations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we can plot the process with scatter plots using [Plotly](https://plotly.com/python/line-and-scatter/),
    a useful data visualization library that can help build an interactive chart with
    just a few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c1facaa19844d9c5bafee41d0c3538b5.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting the K-fold cross-validation iterations. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: It can be noticed from the scatter plot that the training and testing sets in
    K-fold cross-validation are cross-over in successive rounds in each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing K-Fold cross-validation results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's continue by plotting the accuracy scores on the chart to get more information.
    Filter the DataFrame by selecting only rows with testing sets to get the accuracy
    scores.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Plot the score values using a color scale.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bc5d2f64a4f907e3975c83a0920e0ba0.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting the K-fold cross-validation results. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting the scores can facilitate comparing the outcomes. We can tell from
    the chart that the SVMs' accuracy obtained in the 7th iteration has the lowest
    score compared to the others.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bonus!!**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fortunately, we can combine the scatter plots to see both the process and the
    validation scores in the same plot with Plotly. The results will be presented
    as an interactive chart.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Ta-da…
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a73ad713c2f4f14d33ff99feec26a7ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Combining the K-fold cross-validation iterations plot and results plot. Image
    by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Shuffle & Split cross-validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As its name suggests, this cross-validation technique will first shuffle the
    data and then split it into training and testing sets.
  prefs: []
  type: TYPE_NORMAL
- en: By applying the `ShuffleSplit` [function](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.ShuffleSplit.html)
    from Sklearn, we can set the parameters to control the number of splits and the
    proportion between the sets. This method can be an alternative to K-fold if there
    is a need to control the proportion size.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fd6a8f07b757d50d9d1fc963e05dde94.png)'
  prefs: []
  type: TYPE_IMG
- en: Since the process for creating a DataFrame is the same as previously mentioned,
    we are going to repeat the code as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bda18a9e37eb663f0da953722b964688.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualizing Shuffle & Split cross-validation iterations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have prepared the DataFrame, let's use a scatter plot to show the
    sets obtained from the shuffle & split cross-validation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/531d393dab1e3ca428ab5cbcaa73963f.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting the shuffle & split cross-validation iterations. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: It can be seen that in shuffle & split, the data are all randomly divided into
    training and testing sets, while the data are grouped into the training and testing
    sets in the K-fold cross-validation.
  prefs: []
  type: TYPE_NORMAL
- en: Let's continue to plot the validation results.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing Shuffle & Split cross-validation results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Filter the DataFrame to get the accuracy scores.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/44abd64a7537e35b30ad673be3d7d2d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot the results using a color scale to express the score values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ffd1a624ede4208ae3278ea47ea1c84a.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting the shuffle & split cross-validation results. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The obtained chart does not look good. It is hard to read since data in the
    testing set are not grouped. We can improve the result by changing the scatter
    sizes. This can be done by adding a size parameter, as shown in the code below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/388aeb7bbfaa60a711cde5bc14b1ea97.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting the shuffle & split results using color and size to show the score
    values. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the scatter size helps distinguish the validation results. From the
    result above, the SVMs' accuracy from the testing set in the 6th iteration returns
    the lowest score while the 1st and the 3rd iterations return the highest ones.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Time Series Split cross-validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This technique helps validate a time-series model on a rolling basis. The main
    difference between time series split and K-fold: the first `K` folds in each iteration
    are the training sets and the `K+1` th fold is the testing set.'
  prefs: []
  type: TYPE_NORMAL
- en: Import libraries and load data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This article will work with meteorological data as an example. We can use the
    `Meteostat` [library](https://github.com/meteostat/meteostat-python) to get a
    location's temperature over time. This library is a useful tool that provides
    simple access to open weather and climate data using Pandas.
  prefs: []
  type: TYPE_NORMAL
- en: The meteorological data is used under the terms of the [CC BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/deed.en_GB)
    license. For example, let's get the average temperature of New York City between
    2010–2022.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ce95bbe5b478d04cf4e5388f825b7ef3.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot the average temperature data with a line chart.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a7a958e615f63842e61679baec130258.png)'
  prefs: []
  type: TYPE_IMG
- en: Line chart showing the average daily temperature of New York City 2010–2022\.
    Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The datetime column will be grouped to obtain the average monthly temperature
    for performing with a time-series model later.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2def517922791d768304a3f3247254f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Here comes the cross-validation part. We will use the `TimeSeriesSplit` [function](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.TimeSeriesSplit.html)
    from the Sklearn library to conduct the time series split cross-validation. The
    ***n_splits*** parameter can be specified to set the number of splits.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Assign the row numbers to each iteration for plotting.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/881f473aa073464cbfc04c0dde43b8c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualizing Time Series Split cross-validation iterations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a scatter plot to show the iterations of the time series split cross-validation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/40b2260d5c6b74d50eec7480f357fecd.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting the time series split cross-validation iterations. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Even though the visualization above can show us the process, the meteorological
    data are not this straight line. Next, we will plot the actual data and the prediction
    result in the chart.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing Time Series Split cross-validation results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For cross-validation, we can use the Autoregressive Integrated Moving Average
    ([ARIMA](https://en.wikipedia.org/wiki/Autoregressive_integrated_moving_average))
    model, a powerful method to build a prediction based on historical time-series
    data. The ARIMA model in this article will be created using the `pmdarima` [library](https://pypi.org/project/pmdarima/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The process can be explained: in each iteration, the ARIMA model is built from
    the data in training sets. After that, the forecasting and the data in testing
    sets are plotted in the same chart to compare the results.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Voila!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/57deec43a12ae5f6c02bfe9eccffc1ec.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting the time series split cross-validation with ARIMA prediction results.
    Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: From the chart, it can be seen that the ARIMA model has been improved over the
    iterations. Even though the first prediction does not perfectly fit (overlap)
    with the data in the testing set, it keeps getting better in the following ones.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cross-validation techniques help validate learning algorithms. The main concept
    is dividing data into training and testing sets. Then, the model is created using
    the training sets and is validated using the testing sets.
  prefs: []
  type: TYPE_NORMAL
- en: These methods can also be used to flag overfitting or selection bias.
  prefs: []
  type: TYPE_NORMAL
- en: 'Obviously, there are more cross-validation types than the ones mentioned in
    this article. By the way, the main concept is the same, and they all share the
    same purpose: to evaluate the model.'
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of my articles that you may find interesting:'
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the Effect of Multicollinearity on Multiple Regression Model ([link](https://medium.com/towards-data-science/visualizing-the-effect-of-multicollinearity-on-multiple-regression-model-8f323ef542a9))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8 Visualizations with Python to Handle Multiple Time-Series Data ([link](/8-visualizations-with-python-to-handle-multiple-time-series-data-19b5b2e66dd0))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7 Visualizations with Python to Express changes in Rank over time ([link](/7-visualizations-with-python-to-express-changes-in-rank-over-time-71c1f11d7e4b))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9 Visualizations with Python to show Proportions or Percentages instead of a
    Pie chart ([link](/9-visualizations-to-show-proportions-or-percentages-instead-of-a-pie-chart-4e8d81617451))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9 Visualizations with Python that Catch More Attention than a Bar Chart ([link](/9-visualizations-that-catch-more-attention-than-a-bar-chart-72d3aeb2e091))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Aeberhard,Stefan and Forina,M. (1991). *Wine.* UCI Machine Learning Repository.
    [https://doi.org/10.24432/C5PC7J](https://doi.org/10.24432/C5PC7J).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Cross-validation: Evaluating estimator performance*. Scikit. (n.d.). [https://scikit-learn.org/stable/modules/cross_validation.html#cross-validation-iterators](https://scikit-learn.org/stable/modules/cross_validation.html#cross-validation-iterators)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Cross-validation in Machine Learning — Javatpoint*. [www.javatpoint.com.](http://www.javatpoint.com.)
    (n.d.-b). [https://www.javatpoint.com/cross-validation-in-machine-learning](https://www.javatpoint.com/cross-validation-in-machine-learning)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Refaeilzadeh, P., Tang, L., Liu, H. (2009). *Cross-Validation*. In: LIU, L.,
    ÖZSU, M.T. (eds) Encyclopedia of Database Systems. Springer, Boston, MA. [https://doi.org/10.1007/978-0-387-39940-9_565](https://doi.org/10.1007/978-0-387-39940-9_565)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wikimedia Foundation. (2023, June 17). *Cross-validation (statistics)*. Wikipedia.
    [https://en.wikipedia.org/wiki/Cross-validation_(statistics)](https://en.wikipedia.org/wiki/Cross-validation_(statistics))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cochrane, C. (2018, May 19). *Time series nested cross-validation*. Medium.
    [https://towardsdatascience.com/time-series-nested-cross-validation-76adba623eb9](/time-series-nested-cross-validation-76adba623eb9)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Meteostat. (n.d.). *Meteostat/meteostat-python: Access and analyze historical
    weather and climate data with Python.* GitHub. [https://github.com/meteostat/meteostat-python](https://github.com/meteostat/meteostat-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*PMDARIMA*. PyPI. (n.d.). [https://pypi.org/project/pmdarima](https://pypi.org/project/pmdarima)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
