- en: 'Understanding Predictive Maintenance — Wave Data: Feature Engineering (Part
    2)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解预测性维护——波形数据：特征工程（第2部分）
- en: 原文：[https://towardsdatascience.com/understanding-predictive-maintenance-wave-data-feature-engineering-part-2-spectral-3eced3bdbb3e](https://towardsdatascience.com/understanding-predictive-maintenance-wave-data-feature-engineering-part-2-spectral-3eced3bdbb3e)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/understanding-predictive-maintenance-wave-data-feature-engineering-part-2-spectral-3eced3bdbb3e](https://towardsdatascience.com/understanding-predictive-maintenance-wave-data-feature-engineering-part-2-spectral-3eced3bdbb3e)
- en: Feature engineering of spectral data
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 频谱数据的特征工程
- en: '[](https://marcin-staskopl.medium.com/?source=post_page-----3eced3bdbb3e--------------------------------)[![Marcin
    Stasko](../Images/5142b9a260a1cce7c6a2ebcc16f46fbb.png)](https://marcin-staskopl.medium.com/?source=post_page-----3eced3bdbb3e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3eced3bdbb3e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3eced3bdbb3e--------------------------------)
    [Marcin Stasko](https://marcin-staskopl.medium.com/?source=post_page-----3eced3bdbb3e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://marcin-staskopl.medium.com/?source=post_page-----3eced3bdbb3e--------------------------------)[![Marcin
    Stasko](../Images/5142b9a260a1cce7c6a2ebcc16f46fbb.png)](https://marcin-staskopl.medium.com/?source=post_page-----3eced3bdbb3e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3eced3bdbb3e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3eced3bdbb3e--------------------------------)
    [Marcin Stasko](https://marcin-staskopl.medium.com/?source=post_page-----3eced3bdbb3e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3eced3bdbb3e--------------------------------)
    ·12 min read·Dec 1, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在[Towards Data Science](https://towardsdatascience.com/?source=post_page-----3eced3bdbb3e--------------------------------)
    ·阅读时间12分钟·2023年12月1日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/f135b31634608fd3f588fd8593f13524.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f135b31634608fd3f588fd8593f13524.png)'
- en: Photo by [Evie S.](https://unsplash.com/@evieshaffer?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Evie S.](https://unsplash.com/@evieshaffer?utm_source=medium&utm_medium=referral)拍摄，发布在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Article Purpose
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文章目的
- en: This is the second part of the article about Wave Data Feature Engineering.
    We are going to focus on the spectral features. Have you got any thoughts to add?
    Feel free to share!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关于波形数据特征工程的文章第二部分。我们将专注于频谱特征。你有什么想法要补充吗？请随时分享！
- en: This article is part of the series Understanding Predictive Maintenance.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本文是《了解预测性维护》系列的一部分。
- en: '[Check the whole series in this link](https://marcin-staskopl.medium.com/list/understanding-predictive-maintenance-series-e1f44d8a0cc3).
    Ensure you don’t miss out on new articles by following me. All images without
    captions were created by me.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[查看系列文章的完整列表](https://marcin-staskopl.medium.com/list/understanding-predictive-maintenance-series-e1f44d8a0cc3)。通过关注我来确保不错过新文章。所有没有说明的图片均由我创建。'
- en: Frequency-Domain Features
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 频域特征
- en: Transitioning to the frequency domain, we employ techniques like the `Fast Fourier
    Transform (FFT)` to convert time-domain signals. Extracted features include `dominant
    frequency`, `spectral entropy`, and `spectral kurtosis`. `Power Spectral Density
    (PSD)` and `Harmonic Ratios` offer insights into power distribution and harmonic
    relationships.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡到频域，我们使用像`快速傅里叶变换（FFT）`这样的技术将时域信号转换。提取的特征包括`主频率`、`频谱熵`和`频谱峭度`。`功率谱密度（PSD）`和`谐波比`提供了关于功率分布和谐波关系的见解。
- en: '`FFT (Fast Fourier Transform`) Convert the time-domain signal to the frequency
    domain. Extract features from the resulting spectrum, such as `dominant frequency`,
    `spectral entropy`, and `spectral kurtosis`.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FFT（快速傅里叶变换）`将时域信号转换为频域。从结果频谱中提取特征，如`主频率`、`频谱熵`和`频谱峭度`。'
- en: '`Power Spectral Density (PSD)` Describes how the power of a signal is distributed
    over frequency.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`功率谱密度（PSD）`描述信号的功率如何在频率上分布。'
- en: Plan for the next article
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下一篇文章计划
- en: Wavelet Transform
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小波变换
- en: Demodulation
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解调
- en: Recurrence Quantification Analysis (RQA)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环量化分析（RQA）
- en: Create the signal for experiments
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为实验创建信号
- en: 'I will use exactly the same as in the previous part:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用与上一部分完全相同的方法：
- en: '[](/understanding-predictive-maintenance-wave-data-feature-engineering-part-1-fd22b6a19323?source=post_page-----3eced3bdbb3e--------------------------------)
    [## Understanding Predictive Maintenance — Wave Data: Feature Engineering (Part
    1)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/understanding-predictive-maintenance-wave-data-feature-engineering-part-1-fd22b6a19323?source=post_page-----3eced3bdbb3e--------------------------------)
    [## 了解预测性维护——波形数据：特征工程（第 1 部分）'
- en: All the information you need to start learning about wave-data signal processing
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开始学习波形数据信号处理所需的所有信息
- en: towardsdatascience.com](/understanding-predictive-maintenance-wave-data-feature-engineering-part-1-fd22b6a19323?source=post_page-----3eced3bdbb3e--------------------------------)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/understanding-predictive-maintenance-wave-data-feature-engineering-part-1-fd22b6a19323?source=post_page-----3eced3bdbb3e--------------------------------)'
- en: 'Let’s generate the signal:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们生成信号：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Fast Fourier Transform (FFT) and Short-Time Fourier Transform (STFT)
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速傅里叶变换（FFT）和短时傅里叶变换（STFT）
- en: '![](../Images/1ebe66b97175a466eabf1d456011f01d.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1ebe66b97175a466eabf1d456011f01d.png)'
- en: FFT equation (Latex compiled)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: FFT 方程（已编译的 LaTeX）
- en: Signal Representation
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信号表示
- en: Let’s start with our signal, which is essentially a series of data points representing
    how the signal changes over time. This could be a sound wave, a sequence of numbers,
    or any other data that varies with time.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从信号开始，它本质上是一系列数据点，表示信号随时间的变化。这可以是声音波形、一系列数字或任何随时间变化的数据。
- en: Discrete Fourier Transform (DFT)
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 离散傅里叶变换（DFT）
- en: The `FFT` is a more efficient way of computing something called the `Discrete
    Fourier Transform (DFT)`. The `DFT` takes our signal and expresses it as a sum
    of sinusoidal functions, each representing a different frequency component. This
    is where the magic happens.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`FFT` 是计算称为离散傅里叶变换（DFT）的更高效方法。`DFT` 将我们的信号表示为正弦函数的总和，每个函数表示不同的频率分量。这就是魔法发生的地方。'
- en: Divide and Conquer
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分而治之
- en: Instead of directly computing the `DFT` for the entire signal, `FFT` takes advantage
    of the fact that a `DFT` of any composite signal can be expressed as the combination
    of `DFTs` of its subparts. It divides the signal into smaller sections, computes
    the `DFT` for each section, and then combines them.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`FFT` 并不是直接计算整个信号的 `DFT`，而是利用了这样的事实：任何复合信号的 `DFT` 可以表示为其子部分的 `DFT` 的组合。它将信号划分为较小的部分，计算每个部分的
    `DFT`，然后将它们组合起来。'
- en: Butterfly Operation
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 蝴蝶操作
- en: The magic of `FFT` lies in a process called the butterfly operation. It’s like
    a dance move where the computed frequencies are paired up and combined in a specific
    way. This happens recursively until we have the final frequency components of
    the entire signal.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`FFT` 的魔力在于一种称为蝴蝶操作的过程。这就像一种舞蹈动作，其中计算出的频率被配对并以特定的方式组合。这一过程递归进行，直到得到整个信号的最终频率分量。'
- en: Efficiency Boost
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 效率提升
- en: The key to `FFT’s` speed is its ability to dramatically reduce the number of
    computations needed compared to the straightforward `DFT` approach. By exploiting
    the symmetries and patterns in the signal, `FFT` efficiently calculates the frequency
    components.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`FFT` 速度的关键在于其能够显著减少与直接 `DFT` 方法相比所需的计算次数。通过利用信号中的对称性和模式，`FFT` 高效地计算频率分量。'
- en: Time for code
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码时间
- en: 'Now we can apply the theory into practice in simple code lines:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将理论应用到简单的代码行中：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`len(fft_result)` This is the length of the `FFT` result, which is essentially
    the number of points in the frequency domain. The `FFT` operation transforms a
    time-domain signal into a frequency-domain signal and `len(fft_result)` gives
    you the number of frequency bins.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`len(fft_result)` 这是 `FFT` 结果的长度，本质上是频域中的点数。`FFT` 操作将时域信号转换为频域信号，`len(fft_result)`
    给出频率分量的数量。'
- en: '`1/sampling_rate` This is the inverse of the sampling rate `sampling_rate`,
    representing the time interval between samples in the original time-domain signal.
    The sampling rate is the number of samples per second.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`1/sampling_rate` 这是采样率 `sampling_rate` 的倒数，表示原始时域信号中样本之间的时间间隔。采样率是每秒钟的样本数。'
- en: '`np.fft.fftfreq()` This function generates the frequencies corresponding to
    the `FFT` result. It takes two parameters. The first one is the length of the
    result `len(fft_result)`, and the second one is the sampling interval `1/sampling_rate`.
    It returns an array of frequencies.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.fft.fftfreq()` 这个函数生成与 `FFT` 结果对应的频率。它有两个参数，第一个是结果的长度 `len(fft_result)`，第二个是采样间隔
    `1/sampling_rate`。它返回一个频率数组。'
- en: But do not worry. Using these two lines, the whole ‘magic’ will happen
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但不用担心。使用这两行代码，整个“魔法”就会发生。
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/3030c1c4798e8b9fcbda10af3930d6ca.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3030c1c4798e8b9fcbda10af3930d6ca.png)'
- en: Vibration signal and their FFT representation (code output)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 振动信号及其 FFT 表示（代码输出）
- en: In the plot, we notice a central signal at 0, flanked by two mirrored symmetrical
    signals on the positive and negative sides. This indicates that our signal is
    comprised of a single distinct wave. Before delving into experiments, let’s first
    explore the concept of symmetry, and afterward, we can conduct experiments with
    various signals.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在图中，我们注意到一个位于 0 的中心信号，两侧有两个镜像对称的信号。这表明我们的信号由一个单一的波组成。在进行实验之前，让我们首先探讨对称性的概念，然后我们可以用各种信号进行实验。
- en: Behind the scenes — FFT symmetry
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景 — FFT 对称性
- en: What is happening on the backstage? We have some math and theoretical concepts.
    Let’s make it easy.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 背后发生了什么？我们有一些数学和理论概念。让我们简化一下。
- en: In many real-world scenarios, signals are composed of real numbers. In the time
    domain, these signals can be represented as a sequence of values. When you take
    the `FFT` of a real-valued signal, the resulting frequency spectrum is symmetric.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多实际场景中，信号由实数组成。在时间域，这些信号可以表示为一系列值。当你对实值信号进行`FFT`时，得到的频率谱是对称的。
- en: '`Complex conjugate pairs` the symmetry comes from the fact that the `FFT` involves
    complex numbers. For every positive frequency component, there is a corresponding
    negative frequency component with the same magnitude. These pairs of frequencies
    are complex conjugates of each other.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`复共轭对` 对称性来自于`FFT`涉及复数这一事实。对于每个正频率分量，存在一个具有相同幅度的负频率分量。这些频率对是彼此的复共轭。'
- en: '`Mirrored information` The positive frequencies represent the information about
    how the signal oscillates in one direction, while the negative frequencies represent
    the same information but in the opposite direction. The `FFT` captures both directions,
    and that’s why the plot looks symmetrical'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`镜像信息` 正频率表示信号在一个方向上的振荡信息，而负频率表示相同的信息，但方向相反。`FFT`捕捉了两个方向，这就是图形看起来对称的原因。'
- en: In summary, the symmetry in the `FFT` is a consequence of the mathematical properties
    of real-valued signals and complex numbers in the context of the `FFT`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，`FFT`中的对称性是实值信号和复数在`FFT`上下文中数学属性的结果。
- en: Let’s start the next experiments
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们开始下一个实验。
- en: Now we understand the basic concepts of the `FFT`. Let’s simulate 2 signals
    with different parameters connected together
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们理解了`FFT`的基本概念。让我们模拟两个不同参数的信号连接在一起。
- en: 'We will generate a second similar signal we will only focus on Frequency and
    amplitude:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将生成第二个类似的信号，我们只关注频率和幅度：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now let’s create a combined signal and plot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个组合信号并绘制图形：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/57fcc4acb0bbc1da2b258f81c8c4080c.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/57fcc4acb0bbc1da2b258f81c8c4080c.png)'
- en: Combined signal (code output)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 组合信号（代码输出）
- en: 'Now let’s make `FFT` and plot results:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们进行`FFT`并绘制结果：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/c3b80f5f648cbc24fc6d72e112363819.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c3b80f5f648cbc24fc6d72e112363819.png)'
- en: FFT representation of combined_signal (code output)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: FFT 信号的表示（代码输出）
- en: Now you can see we have the same amplitude height but 2 more signals equally
    offset. `First signal = 10Hz` `Second signal = 20Hz`
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以看到我们有相同的幅度高度，但多出了 2 个信号，且它们的偏移量相等。`第一个信号 = 10Hz` `第二个信号 = 20Hz`
- en: The X-axis position is adjusted for signal frequency. Let`s introduce the third
    signal = 100 Hz and plot.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: X 轴位置根据信号频率进行调整。让我们引入第三个信号 = 100 Hz 并绘制。
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/3cd43922bf37343c8adcf90dd4856560.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3cd43922bf37343c8adcf90dd4856560.png)'
- en: Combined_signal and additional 3rd signal component (code output)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 组合信号和额外的第三个信号组件（代码输出）
- en: As we can see our “new” signal is now much more offset due to the higher frequency
    value
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，由于更高的频率值，我们的“新”信号现在偏移了很多。
- en: What will happen if we add a fourth signal with a different amplitude
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们添加一个具有不同幅度的第四个信号会发生什么？
- en: Make a new signal and plot it together
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 制作一个新信号并将其一起绘制。
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/c0d325be9a1adc62419489c1b4808b4b.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c0d325be9a1adc62419489c1b4808b4b.png)'
- en: Combined_signal and additional 4th signal component (code output)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 组合信号和额外的第四个信号组件（代码输出）
- en: Now you can see our Amplitude spectrum is twice higher due to amplitude values
    1 and 2
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以看到我们的幅度谱由于幅度值 1 和 2 高了两倍。
- en: Power Spectral Density (PSD)
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 功率谱密度（PSD）
- en: '![](../Images/b00673857b4efd91c46ac5fe5eeb8a52.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b00673857b4efd91c46ac5fe5eeb8a52.png)'
- en: Power Spectral Density equation (Latex compiled)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 功率谱密度方程（Latex 编译）
- en: '`PSD` is like taking a special snapshot of a signal and understanding how much
    power it has at different frequencies. It helps us see the energy distribution
    across the musical or vibration spectrum. We have 2 main `PSD` estimation methods,
    `Welch` and `Barlett`.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`PSD` 就像是对信号进行特殊的快照，了解它在不同频率下的功率。这有助于我们观察音乐或振动频谱中的能量分布。我们有两种主要的 `PSD` 估计方法，`Welch`
    和 `Barlett`。'
- en: For the experiments, we will create a new combined signal just for the sake
    of clarity and improved visualization (not close frequency to see clear peaks)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实验，我们将创建一个新的组合信号，以便于清晰度和改进可视化（不接近频率以便清晰看到峰值）
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Welch Method
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Welch 方法
- en: '![](../Images/e0c7425232613e3a00a4f136fe2eff10.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e0c7425232613e3a00a4f136fe2eff10.png)'
- en: PSD Welch method equation (Latex compiled)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: PSD Welch 方法方程（Latex 编译）
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/71123b22b52b72afc783b1b5d44cbd5f.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/71123b22b52b72afc783b1b5d44cbd5f.png)'
- en: The Welch method divides the signal into overlapping segments and averages the
    periodograms. This approach provides a trade-off between accuracy and computational
    complexity. However, it may sacrifice frequency resolution for improved variance
    properties.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Welch 方法将信号分成重叠的段并对周期图进行平均。这种方法在准确性和计算复杂性之间提供了权衡。然而，它可能牺牲频率分辨率以改善方差特性。
- en: Bartlett Method
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bartlett 方法
- en: '![](../Images/6417a61e18e8d766fc42940367a55f98.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6417a61e18e8d766fc42940367a55f98.png)'
- en: PSD Bartlett estimation equation (Latex compiled)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: PSD Bartlett 估计方程（Latex 编译）
- en: '`Bartlett method` is a specific case of the `Welch` method with no overlap
    between segments. While offering simplicity and reduced computational load, it
    shares a similar trade-off between accuracy and frequency resolution with the
    `Welch` method.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`Bartlett 方法` 是 `Welch` 方法的一个特例，没有段间重叠。虽然提供了简便性和减少了计算负担，但它与 `Welch` 方法在准确性和频率分辨率之间存在类似的权衡。'
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/03d02678e1a4eb3dc4d1eabac31746b1.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/03d02678e1a4eb3dc4d1eabac31746b1.png)'
- en: The graphical explanation about the differences
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 关于差异的图形说明
- en: '![](../Images/1aa12142a80c595b49817dc0697ae9f6.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1aa12142a80c595b49817dc0697ae9f6.png)'
- en: 'image source and my recommendation: [https://www.researchgate.net/figure/Welchs-and-Bartletts-methods-for-power-spectral-density-estimation-The-Bartletts_fig1_349283231](https://www.researchgate.net/figure/Welchs-and-Bartletts-methods-for-power-spectral-density-estimation-The-Bartletts_fig1_349283231)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源和我的推荐：[https://www.researchgate.net/figure/Welchs-and-Bartletts-methods-for-power-spectral-density-estimation-The-Bartletts_fig1_349283231](https://www.researchgate.net/figure/Welchs-and-Bartletts-methods-for-power-spectral-density-estimation-The-Bartletts_fig1_349283231)
- en: Short-Time Fourier Transform (STFT) — windowing + FFT
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 短时傅里叶变换（STFT）— 窗函数 + FFT
- en: '![](../Images/19373aa6276e4a8135eb90a7f89c9985.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/19373aa6276e4a8135eb90a7f89c9985.png)'
- en: Short-Time Fourier Transform equation (Latex compiled)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 短时傅里叶变换方程（Latex 编译）
- en: Why it is useful in predictive maintenance?
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么它在预测性维护中有用？
- en: '`STFT` analysis enables engineers to scrutinize the frequency components of
    signals, such as vibrations or acoustic emissions from machinery. The distinct
    frequency patterns associated with various faults or abnormalities allow for the
    early detection of potential issues, contributing to minimizing downtime and maintenance
    costs.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`STFT` 分析使工程师能够仔细检查信号的频率成分，例如机械的振动或声发射。与各种故障或异常相关的独特频率模式允许早期检测潜在问题，有助于减少停机时间和维护成本。'
- en: One of the primary advantages of `STFT` in predictive maintenance is its ability
    to identify fault signatures early on. This is particularly crucial as `STFT`
    can detect low-amplitude vibrations or subtle changes in signals, providing an
    early warning system that allows practitioners to address issues before they escalate.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`STFT` 在预测性维护中的主要优势之一是它能及早识别故障特征。这尤其重要，因为 `STFT` 可以检测低振幅的振动或信号中的微妙变化，提供一个早期警告系统，使从业人员能够在问题升级之前解决它们。'
- en: Furthermore, `STFT` plays a pivotal role in distinguishing between normal and
    anomalous frequency patterns. By establishing baseline frequency spectra through
    a comparison of healthy and faulty equipment, engineers can efficiently identify
    deviations and signal impending problems, forming the foundation for effective
    predictive maintenance strategies.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`STFT` 在区分正常和异常频率模式中发挥了关键作用。通过比较健康设备和故障设备的基线频谱，工程师可以有效识别偏差并预警即将出现的问题，为有效的预测性维护策略奠定基础。
- en: Let’s make some code
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们写一些代码
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Woooh, just “one” line! Power of python. In this function, we have to play with
    2 important parameters with funny names `nperseg` and `noverlap`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，仅仅“一行”代码！Python 的威力。在这个函数中，我们需要处理两个具有有趣名称的参数 `nperseg` 和 `noverlap`。
- en: '`nperseg` (**N**umber of **P**oints p**er** **Seg**ment).'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`nperseg` (**每个**段的**点**数).'
- en: This parameter determines the size of each time window or segment. A larger
    `nperseg` one results in better frequency resolution but poorer time resolution,
    and a smaller `nperseg` one provides better time resolution but poorer frequency
    resolution. In other words, it affects the trade-off between time and frequency
    resolution. In the example, `nperseg=256` it means that each time window is 256
    points long.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这个参数决定了每个时间窗口或段的大小。较大的 `nperseg` 结果提供更好的频率分辨率，但时间分辨率较差，而较小的 `nperseg` 结果提供更好的时间分辨率，但频率分辨率较差。换句话说，它影响时间和频率分辨率之间的权衡。在这个例子中，`nperseg=256`
    意味着每个时间窗口长 256 个点。
- en: '`noverlap` (**N**umber of **Overlap**ping Points).'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`noverlap` (**重叠**点的**数量**).'
- en: This parameter controls the overlap between consecutive time windows. Overlapping
    windows help in capturing the dynamic changes in the signal over time. If `noverlap`
    is set to a value less than `nperseg`, the windows overlap. In the example, `noverlap=128`
    means that each time window overlaps with the previous one by 128 points.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这个参数控制连续时间窗口之间的重叠。重叠的窗口有助于捕捉信号随时间的动态变化。如果 `noverlap` 设置为小于 `nperseg` 的值，窗口将会重叠。在这个例子中，`noverlap=128`
    意味着每个时间窗口与前一个窗口重叠 128 个点。
- en: Let’s plot it
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们绘制它
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/b0c897371d42fd8124b6a9a71d0129be.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b0c897371d42fd8124b6a9a71d0129be.png)'
- en: STFT results spectrogram of combined_signal (code output)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: STFT 结果的 combined_signal 的频谱图（代码输出）
- en: We have to use `Sxx` with basically is spectrogram output(`Sxx[i, j]`) We can
    easily spot our 4 signals combined together. The thicker the ribbon the higher
    the amplitude we have
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须使用 `Sxx`，它基本上是频谱图输出（`Sxx[i, j]`）。我们可以很容易地发现我们的 4 个信号组合在一起。带子越粗，幅度越高。
- en: '`Spectogram Grid (Sxx)` Imagine a big grid like a piece of graph paper.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spectogram Grid (Sxx)` 想象一个像图纸一样的大网格。'
- en: '`Grid Rows (up and down)` Each row in the grid represents a different sound
    frequency, like high or low tones. Higher rows might represent high-pitched sounds,
    and lower rows could be for low-pitched sounds.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`Grid Rows (up and down)` 网格中的每一行表示不同的声音频率，比如高音或低音。较高的行可能表示高音，较低的行可能表示低音。'
- en: '`Grid Columns (left to right)` Each column in the grid represents a different
    moment in time, like a snapshot. As you move from left to right, you’re looking
    at how the sound changes over time.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`Grid Columns (left to right)` 网格中的每一列表示不同的时间点，就像快照一样。向右移动时，你可以看到声音如何随时间变化。'
- en: '`Colors in the Grid` The colors in the grid tell you how loud or strong each
    frequency is at each moment. Bright colors might mean loud sounds and dull colors
    might mean quieter sounds.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`Colors in the Grid` 网格中的颜色告诉你每个频率在每个时刻的响度或强度。明亮的颜色可能意味着响声，暗淡的颜色可能意味着安静的声音。'
- en: What will happen if one of our signals will be much stronger?
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果我们的一个信号要强得多，会发生什么？
- en: Let’s reframe the explanation in the context of predictive maintenance and simulate
    a scenario where we modify the fourth signal with a significantly higher amplitude,
    resembling a potential fault or anomaly in the machinery.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在预测性维护的背景下重新框定解释，并模拟一种情况，在这种情况下，我们将第四个信号的幅度显著增加，类似于机器中的潜在故障或异常。
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/22eb5899181c5e00363103f5a145c3ac.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/22eb5899181c5e00363103f5a145c3ac.png)'
- en: FFT results of combined_signal with component created using significantly higher
    amplitude (code output)
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: FFT 结果的 combined_signal，具有显著更高幅度的组成部分（代码输出）
- en: Now, observe our new signal, which is significantly dominant. This doesn’t imply
    that the other signals have vanished, but their presence is overshadowed by the
    amplitude of the prominent signal, making them appear more like noise in comparison.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，观察我们的新信号，它显著占据主导地位。这并不意味着其他信号消失了，而是它们的存在被显著信号的幅度所掩盖，使它们看起来更像是噪声。
- en: '[PRE14]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/a0d2e8a1cb05d06e81b0959c4b78963f.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a0d2e8a1cb05d06e81b0959c4b78963f.png)'
- en: STFT results spectrogram of combined_signal with component created using significantly
    higher amplitude (code output)
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: STFT 结果的 combined_signal 频谱图，具有显著更高幅度的组成部分（代码输出）
- en: In the spectrogram results, a conspicuous and intense line emerges, indicating
    a potential precursor to future machinery failure. In normal operational conditions,
    our machinery produces a background spectrum. However, as wear and tear progress
    or a component is on the verge of failure, deviations from this normal state become
    noticeable. To delve deeper into this, we might explore training a Convolutional
    Neural Network (CNN) to analyze these spectral patterns and identify distinctive
    signatures associated with impending failures. After the articles about feature
    engineering, I am going to start the modeling series.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在频谱图结果中，出现了一条显著而强烈的线条，指示未来机械故障的潜在前兆。在正常操作条件下，我们的机械设备会产生背景谱。然而，随着磨损的进展或某个部件即将故障，这种正常状态的偏差变得显而易见。为了更深入地研究这一点，我们可能会探索训练卷积神经网络（CNN）来分析这些频谱模式，并识别与即将发生的故障相关的特征。特征工程相关文章之后，我将开始建模系列。
- en: This is the end of part 2 of the wave data feature engineering. In the next
    article, I am going to cover.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这是波数据特征工程第二部分的结束。在下一篇文章中，我将进行讨论。
- en: Wavelet Transform
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小波变换
- en: Demodulation
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解调
- en: Recurrence Quantification Analysis (RQA)
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归量化分析（RQA）
- en: This article is part of the series Understanding Predictive Maintenance. Due
    to your great feedback and recommendation, I have a plan to make the book. If
    there is something that is worth extending or including just let me know. I am
    considering all your feedback.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 本文是《理解预测性维护》系列的一部分。由于您提供的宝贵反馈和建议，我计划将其编撰成书。如果有任何值得扩展或包含的内容，请告诉我。我正在考虑所有您的反馈。
- en: '[Check the whole series in this link](https://marcin-staskopl.medium.com/list/understanding-predictive-maintenance-series-e1f44d8a0cc3).
    Ensure you don’t miss out on new articles by following me.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[查看完整系列请点击此链接](https://marcin-staskopl.medium.com/list/understanding-predictive-maintenance-series-e1f44d8a0cc3)。请关注我，以确保您不会错过新文章。'
