- en: Causal Python — Elon Musk’s Tweet, Our Googling Habits, and Bayesian Synthetic
    Control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/causal-python-elon-musks-tweet-our-googling-habits-bayesian-synthetic-control-187114fc4aa8](https://towardsdatascience.com/causal-python-elon-musks-tweet-our-googling-habits-bayesian-synthetic-control-187114fc4aa8)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Applying synthetic control with a Bayesian twist to quantify the impact of a
    tweet (using CausalPy)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://aleksander-molak.medium.com/?source=post_page-----187114fc4aa8--------------------------------)[![Aleksander
    Molak](../Images/7fca5018f6ce88297fae31cef1fe0e6c.png)](https://aleksander-molak.medium.com/?source=post_page-----187114fc4aa8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----187114fc4aa8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----187114fc4aa8--------------------------------)
    [Aleksander Molak](https://aleksander-molak.medium.com/?source=post_page-----187114fc4aa8--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----187114fc4aa8--------------------------------)
    ·11 min read·Jan 8, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aeed401fdb4cd97fd78b62ea9d006cd6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Tolga Aslantürk](https://www.pexels.com/@tolgaaslanturk/) at [Pexels](https://www.pexels.com/photo/a-bird-flying-in-the-sky-11017085/)
  prefs: []
  type: TYPE_NORMAL
- en: October 2022 brought a lot of novelty to Twitter’s Headquarters in San Francisco
    (and a sink). Elon Musk, the CEO of Tesla and SpaceX became the new owner and
    the CEO of the company on October 27.
  prefs: []
  type: TYPE_NORMAL
- en: Some audiences welcomed the change warmly while others remained skeptical.
  prefs: []
  type: TYPE_NORMAL
- en: A day later, on October 28, Musk tweeted “*the bird is freed*”.
  prefs: []
  type: TYPE_NORMAL
- en: How powerful a tweet can be?
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a6ce1b8901be7f13324a66b0f23244aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Laura Tancredi](https://www.pexels.com/@laura-tancredi/) at [Pexels](https://www.pexels.com/photo/curving-shaped-fragment-of-modern-building-7078717/).
  prefs: []
  type: TYPE_NORMAL
- en: Objective
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this blog post we’ll use [**CausalPy**](https://causalpy.readthedocs.io/en/latest/)
    — a brand new Python causal package from [PyMC Developers](https://medium.com/u/7c6b7b6803cd?source=post_page-----187114fc4aa8--------------------------------)
    ([https://www.pymc-labs.io](https://www.pymc-labs.io)) to estimate Musk’s tweet’s
    impact on our googling behaviors leveraging a powerful causal technique called
    **synthetic control.** We’ll discuss the basics of the method’s mechanics, implement
    it step-by-step, and analyze potential problems with our approach, linking to
    additional resources on the way.
  prefs: []
  type: TYPE_NORMAL
- en: Ready?
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Early November 2022, I had a conference talk scheduled to talk about quantifying
    effects of interventions in time series data. I thought that it would be interesting
    to use a real-world example in the presentation and I recalled Musk’s tweet. There
    was a lot of buzz on the internet around Twitter’s acquisition and I wondered
    to what extent a tweet related to an event like this can influence our behaviors
    beyond traditional social media activities, for instance how does it impact how
    often we Google for “*Twitter*”?
  prefs: []
  type: TYPE_NORMAL
- en: '**Embed 1.** Elon Musk’s tweet.'
  prefs: []
  type: TYPE_NORMAL
- en: But first things first.
  prefs: []
  type: TYPE_NORMAL
- en: Causality & Experiments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Causal analysis seeks to identify and/or quantify the effects of interventions
    (also known as treatments) on the outcomes of interest. We change something in
    the world and we want to understand how another thing changes as a result of our
    action. For example, a pharmaceutical company might be interested in determining
    the effect of a new drug on a particular group of patients. This might be challenging
    for a number of reasons, yet the most basic one is that it’s impossible to observe
    the same patient both taking the drug and not taking it at the same time (this
    is known as the fundamental problem of causal inference).
  prefs: []
  type: TYPE_NORMAL
- en: People figured out many smart ways to overcome this challenge. The one considered
    a golden standard today is called a randomized experiment (or randomized controlled
    trial; **RCT**)¹. In an RCT participants (or other entities in general sometimes
    called ***units***) are randomly assigned to either the treatment group (with
    treatment) or the control group (without treatment)².
  prefs: []
  type: TYPE_NORMAL
- en: '[](/causal-kung-fu-in-python-3-basic-techniques-to-jump-start-your-causal-inference-journey-tonight-ae09181704f7?source=post_page-----187114fc4aa8--------------------------------)
    [## Causal Python — 3 Simple Techniques to Jump-Start Your Causal Inference Journey
    Today'
  prefs: []
  type: TYPE_NORMAL
- en: Learn 3 techniques for causal effect identification and implement them in Python
    without losing months, weeks or days…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/causal-kung-fu-in-python-3-basic-techniques-to-jump-start-your-causal-inference-journey-tonight-ae09181704f7?source=post_page-----187114fc4aa8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: We expect that in a well-designed RCT randomization will balance the treatment
    and control groups in terms of [**confounders**](https://causalpython.io/#confounding)
    and other important characteristics and this approach is usually pretty successful!
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, experiments are not always available for economic, ethical or
    organizational reasons among others.
  prefs: []
  type: TYPE_NORMAL
- en: What if we…
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7bf9992cbe8c8c61f93f098de58ad53a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Engin Akyurt](https://www.pexels.com/@enginakyurt/) @ [pexels.com](https://www.pexels.com/photo/red-synthetic-carpet-texture-14823277/)
  prefs: []
  type: TYPE_NORMAL
- en: Synthetic Control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What if we can only observe the outcome under treatment but the control group
    is not available? Alberto Abadie and Javier Gardeazabal found themselves in this
    exact situation when trying to asses the economic cost of conflict in Basque Country
    (Abadie & Gardeazabal, 2003). Their paper gave birth to the method that we discuss
    today — synthetic control.
  prefs: []
  type: TYPE_NORMAL
- en: The basic idea behind the method is simple — if we don’t have a control group,
    let’s create one!
  prefs: []
  type: TYPE_NORMAL
- en: How?
  prefs: []
  type: TYPE_NORMAL
- en: One solution is to predict it.
  prefs: []
  type: TYPE_NORMAL
- en: What if we take some other units that are *somehow similar* to our treated unit
    (but remain untreated) and use them as predictors? This is what synthetic control
    (almost exactly) is!
  prefs: []
  type: TYPE_NORMAL
- en: These untreated units are sometimes referred to as the ***donor pool***. Remembering
    that we’re in the realm of time series data, the basic synthetic control estimator
    is a weighted sum of untreated units. We’ll use an additional weight constraint
    that forces the weights to be between **0** and **1** and sum up to one².
  prefs: []
  type: TYPE_NORMAL
- en: Each weight scales the contribution of each untreated unit to the outcome. You
    can think of it as a constrained linear regression over time.
  prefs: []
  type: TYPE_NORMAL
- en: We fit the model on pre-treatment observations and predict the value of the
    outcome post-treatment. This logic is based on an assumption that the donor pool
    variables were not influenced by the treatment. When this assumption is met, the
    predicted post-treatment control group should keep all of the pre-treatment characteristics
    unchanged (assuming that the donor pool variables are good enough predictors of
    the outcome).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to see a step-by-step implementation of synthetic control with neatly
    presented math check [Matteo Courthoud](https://medium.com/u/666130fb420f?source=post_page-----187114fc4aa8--------------------------------)’s
    [blog post](/understanding-synthetic-control-methods-dd9a291885a1) and/or [Matheus
    Facure](https://medium.com/u/5a3f80e369d3?source=post_page-----187114fc4aa8--------------------------------)’s
    [chapter](https://matheusfacure.github.io/python-causality-handbook/15-Synthetic-Control.html)
    on synthetic control. If you want more applied research context check Scott Cunningham’s
    “[Causal Inference — The Mixtape](https://amzn.to/3MOINqp)”. For the Bayesian
    implementation (the one we use here) check [CausalPy source code](https://github.com/pymc-labs/CausalPy/blob/main/causalpy/pymc_models.py).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://aleksander-molak.medium.com/yes-six-causality-books-that-will-get-you-from-zero-to-advanced-2023-f4d08718a2dd?source=post_page-----187114fc4aa8--------------------------------)
    [## Yes! Six Causality Books That Will Get You From Zero to Advanced (2023)'
  prefs: []
  type: TYPE_NORMAL
- en: …and you can get 3 of them completely for free if you want! 🤗
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: aleksander-molak.medium.com](https://aleksander-molak.medium.com/yes-six-causality-books-that-will-get-you-from-zero-to-advanced-2023-f4d08718a2dd?source=post_page-----187114fc4aa8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Hypothesis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Going back to our tweet. My hypothesis was that Musk’s broadly discussed tweet
    (“*the bird is freed*”) made people more interested in Twitter itself and news
    about it. Hence, we’d expect to observe an increase in the number of searches
    for “*Twitter*” relative to other social media platforms.
  prefs: []
  type: TYPE_NORMAL
- en: In reality, this hypothesis is difficult to verify, as the outcome might be
    influenced not only by Musk’s tweet but also by *other factors* (e.g. media publications
    on Twitter acquisition). Note that this is in fact a great example of how [**confounding**](https://causalpython.io/#confounding)
    can occur **in synthetic control** analysis³ (Twitter acquisition causing Musk’s
    tweet *and* causing increased interest in the platform). Which specification (**tweet**
    as a cause or **acquisition** as a cause) sounds more reasonable to you? Let me
    know in the comments!
  prefs: []
  type: TYPE_NORMAL
- en: As this is a fun post, we’ll *assume* that Musk tweet’s influence on search
    behaviors is not confounded and that we can safely estimate it. If you decide
    to estimate the effect of Twitter acquisition on the number of searches for “*Twitter*”
    yourself, feel free to share your results with me on [LinkedIn](https://www.linkedin.com/in/aleksandermolak/)
    or join the Causal Python community (https://causalpython.io) and simply send
    me the results as a reply to one of our weekly emails.
  prefs: []
  type: TYPE_NORMAL
- en: Musk’s Tweet in The Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We use [Google Trends](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&cd=&cad=rja&uact=8&ved=2ahUKEwiJ9YDPxa78AhVtSPEDHf1QD4MQFnoECBAQAQ&url=https%3A%2F%2Ftrends.google.com%2Ftrends%2F&usg=AOvVaw1Iv7kLi18t1S2QG52bC3rn)
    as a source of time series data representing the global number of daily searches.
    We are interested in how searches for “[*Twitter*](https://twitter.com/AleksanderMolak)”
    have changed, so we collect data for this search plus we collect data for “*TikTok”*,
    “*Instagram”* and “[*LinkedIn*](https://www.linkedin.com/in/aleksandermolak/)*”*
    to use them as our ***donor pool***.
  prefs: []
  type: TYPE_NORMAL
- en: We‘ll use the data for a period between May 15 and November 11, 2022.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see the plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5ee1ea5a90878e1b900514f031bc3516.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 1\.** Data for *Twitter*, *LinkedIn*, TikTok and Instagram searches.
    Image by yours truly.'
  prefs: []
  type: TYPE_NORMAL
- en: We can see that Twitter and Instagram are the most searched for platforms. There’s
    some correlation between them. We can also see that there’s a very strong seasonal
    component in LinkedIn searches with much less searches over the weekends, which
    makes sense given the professional character of the site.
  prefs: []
  type: TYPE_NORMAL
- en: Musk posted his “*the bird is freed*” tweet on October 28\. Let’s add this information
    to the plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dc4b532f1fb1c9b16ad6fe77fb65896f.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 2.** Data for *Twitter*, *LinkedIn*, TikTok and Instagram searches
    including the treatment (black dotted line). Image by yours truly.'
  prefs: []
  type: TYPE_NORMAL
- en: We see that the sharp increase in searches for Twitter coincides with the day
    of Musk’s tweet.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how strong the effect is given a synthetically produced control group.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s Model It!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We start with the imports.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code block 1.** Importing the libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: We follow [CausalPy documentation](https://causalpy.readthedocs.io/en/latest/)
    convention and import the library as `cp`. We import `pandas` to read the data
    and `matplotlib` to help us with plotting.
  prefs: []
  type: TYPE_NORMAL
- en: We read in the data and cast index to date time (which helped us to generate
    the plots above and makes it easier to index the treatment but is not necessary).
  prefs: []
  type: TYPE_NORMAL
- en: '**Code block 2.** Reading in the data and changing index to date time type.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a brief look at the data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8b3c485ce3b271f5b53bb4a9cfe794f7.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 3.** The first five rows of our dataset. Image by yours truly.'
  prefs: []
  type: TYPE_NORMAL
- en: As expected, we see four variables and a date time index. We will use “*LinkedIn”*,
    “*TikTok”* and “*Instagram”* searches as the donor pool signals.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s store the treatment date in a variable and instantiate the model.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code block 3.** Storing treatment date in a variable and instantiating the
    model.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We use `WeightedSumFitter` model which will allow us to find weights for each
    of our donor pool variables in order to produce the best fit synthetic control.
    You might remember that we said earlier that we use two constraints to these weights:'
  prefs: []
  type: TYPE_NORMAL
- en: they should sum up to **1**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: they should be between **0** and **1**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that if the 1st condition is true, the 2nd condition can be replaced by
    a less restrictive constraint of non-negativity; we used the more restrictive
    condition as it might be more intuitive for some readers.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Meeting these constraints can be achieved in multiple ways. If you checked one
    of the references we mentioned above (Matteo’s blog or Matheus’ book) you might
    have noticed that they both used constrained optimization to achieve this goal.
    As we use Bayesian approach, we need to encode these constraints at a distribution
    level. A distribution that is a great fit for our required constraints is [Dirichlet
    distribution](https://en.wikipedia.org/wiki/Dirichlet_distribution). Samples from
    Dirichlet distribution sum up to **1** and are non-negative. If this makes you
    think about beta distribution, that’s a great intuition! Dirichlet is a (multidimensional)
    generalization of beta.
  prefs: []
  type: TYPE_NORMAL
- en: CausalPy will take care of initializing and fitting the distributions for us
    behind the scenes. We’re now ready to define and fit the model!
  prefs: []
  type: TYPE_NORMAL
- en: CausalPy supports R-style formulas for defining models. The formula `twitter
    ~ 0 + tiktok + linkedin + instgram` says that we want to model Twitter searches
    over time as a function of the “*TikTok”*, “*LinkedIn”* and “*Instagram”* searches.
    Zero in the beginning of the formula tells the model that we don’t want to fit
    the intercept.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code block 4.** Defining and fitting the model.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We use `SyntheticControl` experiment object that will take care of model fitting
    and result generation for us. We pass four arguments to the constructor: dataset,
    treatment index, formula that defines the model and model object (we picked `WeightedSumFitter`).'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re running the code for yourself, you’ll notice that it takes a while
    to initialize the sampler and sample the [chains](https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo),
    but after a minute or so we should be ready to plot the results.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://amzn.to/3NiCbT3?source=post_page-----187114fc4aa8--------------------------------)
    [## Causal Inference and Discovery in Python: Unlock the secrets of modern causal
    machine learning with…'
  prefs: []
  type: TYPE_NORMAL
- en: 'Causal Inference and Discovery in Python: Unlock the secrets of modern causal
    machine learning with DoWhy, EconML…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: amzn.to](https://amzn.to/3NiCbT3?source=post_page-----187114fc4aa8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s examine the results! The `results` object has a very convenient method
    called `.plot()` that allows us to summarize the results graphically in an efficient
    fashion.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code block 5.** Plotting the results.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This gives us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bd446e359ac0a9c30c50af953c15e303.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 4.** The results of our model. Image by yours truly.'
  prefs: []
  type: TYPE_NORMAL
- en: On the top of the plot we see the printout of pre-intervention Bayesian ***R²***
    (Gelman et al., 2018) that quantifies how well the pre-treatment number of searches
    for Twitter is predicted by our donor pool variables.
  prefs: []
  type: TYPE_NORMAL
- en: The topmost panel presents actual observations of the outcome variable (black
    dots), pre-treatment prediction of the outcome (dark blue line), donor pool variables
    (gray), our generated synthetic control (green), intervention time (vertical red
    line) and the effect of intervention (shaded blue region).
  prefs: []
  type: TYPE_NORMAL
- en: In the middle panel we see the **predicted causal impact** pre- and post-treatment.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the bottom panel shows the **cumulative causal effect**.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping It Up!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bayesian ***R²*** of **0.385** indicates that the model’s pre-treatment fit
    is not very good (the perfect fit would have ***R²*** of **1**)⁴. This is not
    necessarily very surprising as our donor pool is small. Many practitioners would
    recommend using at least between 5 to 25 variables in your donor pool as a rule
    of thumb. We had only 3.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, we can be pretty sure that we’re not overfitting, which might
    happen with larger sizes of donor pools (*vide* Abadie, 2021).
  prefs: []
  type: TYPE_NORMAL
- en: The post-treatment effect of Elon Musk’s tweet (assuming that we agree there’s
    no hidden confounding in the analysis) is relatively large, indicating that his
    tweet was powerful enough to temporarily change our googling behaviors!
  prefs: []
  type: TYPE_NORMAL
- en: Note that the other hypothesis (Twitter acquisition rather than the tweet as
    a treatment) looks promising — did you notice the increase in the number of searches
    for “*Twitter*” right before the intervention?
  prefs: []
  type: TYPE_NORMAL
- en: If you decide to check this hypothesis, **share your results** with me and the
    **community**!
  prefs: []
  type: TYPE_NORMAL
- en: About CausalPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**CausalPy** is still in its baby years, but is steadily growing. I got a message
    from the library creators that some exciting new features are in the pipeline,
    including user-defined priors support for synthetic control. Also, there’s much
    more to the library than just this one method. Make sure to check the repository
    for the latest version & updates here: [https://github.com/pymc-labs/CausalPy](https://github.com/pymc-labs/CausalPy)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code** and **conda environment** file are available here:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://github.com/AlxndrMlk/blogs-code/tree/main/Causal%20Python%20-%20Did%20Elon%20Musk%27s%20Tweet%20Change%20Our%20Googling%C2%A0Habits?source=post_page-----187114fc4aa8--------------------------------)
    [## blogs-code/Causal Python - Did Elon Musk''s Tweet Change Our Googling Habits
    at main ·…'
  prefs: []
  type: TYPE_NORMAL
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/AlxndrMlk/blogs-code/tree/main/Causal%20Python%20-%20Did%20Elon%20Musk%27s%20Tweet%20Change%20Our%20Googling%C2%A0Habits?source=post_page-----187114fc4aa8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Footnotes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ¹ There are experimental designs with more than one treatment and/or more than
    one control group, but we keep it simple here.
  prefs: []
  type: TYPE_NORMAL
- en: '² Note that these constraints are not necessary, but when the ***donor pool***
    variables take values both **above** *and* **below** the values of the outcome
    variable this forces the model not to extrapolate beyond the values that we’ve
    observed. In our case this makes sense — vide Figure 1\. where *Instagram* is
    (most of the time) above *Twitter* and other platforms are below. Allowing the
    model to extrapolate is not incorrect, yet it posits a risk that the model will
    *hallucinate* how the variables should behave above their observed ranges. If
    this reminds you of the positivity assumption — that’s a great intuition! More
    about positivity and extrapolation here: [https://causalpython.io/#positivity](https://causalpython.io/#positivity)'
  prefs: []
  type: TYPE_NORMAL
- en: ³ Note that we could also say that this scenario violates a no-multiple-versions-of-treatment
    part of the [SUTVA](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&cd=&cad=rja&uact=8&ved=2ahUKEwiGheHtmbb8AhVBTaQEHQgMDvkQFnoECC0QAQ&url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FRubin_causal_model&usg=AOvVaw1k-P4Hoq71MjTTd0XFjId-)
    assumption, but I believe that confounding perspective is clearer and more intuitive.
  prefs: []
  type: TYPE_NORMAL
- en: ⁴ Keeping in mind that using ***R²*** as a goodness-of-fit metric brings its
    own challenges.
  prefs: []
  type: TYPE_NORMAL
- en: 'Read more on causality in Python:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](/causal-kung-fu-in-python-3-basic-techniques-to-jump-start-your-causal-inference-journey-tonight-ae09181704f7?source=post_page-----187114fc4aa8--------------------------------)
    [## Causal Python: 3 Simple Techniques to Jump-Start Your Causal Inference Journey
    Today'
  prefs: []
  type: TYPE_NORMAL
- en: Learn 3 techniques for causal effect identification and implement them in Python
    without losing months, weeks or days…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'towardsdatascience.com](/causal-kung-fu-in-python-3-basic-techniques-to-jump-start-your-causal-inference-journey-tonight-ae09181704f7?source=post_page-----187114fc4aa8--------------------------------)
    [](/beyond-the-basics-level-up-your-causal-discovery-skills-in-python-now-2023-cabe0b938715?source=post_page-----187114fc4aa8--------------------------------)
    [## Causal Python: Level Up Your Causal Discovery Skills in Python [Beyond the
    basics!] (2023)'
  prefs: []
  type: TYPE_NORMAL
- en: …and unlock the potential of the best & most underrated Causal Discovery package
    in Python!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/beyond-the-basics-level-up-your-causal-discovery-skills-in-python-now-2023-cabe0b938715?source=post_page-----187114fc4aa8--------------------------------)
    [](https://aleksander-molak.medium.com/yes-six-causality-books-that-will-get-you-from-zero-to-advanced-2023-f4d08718a2dd?source=post_page-----187114fc4aa8--------------------------------)
    [## Yes! Six Causality Books That Will Get You From Zero to Advanced (2023)
  prefs: []
  type: TYPE_NORMAL
- en: …and you can get 3 of them completely for free if you want! 🤗
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: aleksander-molak.medium.com](https://aleksander-molak.medium.com/yes-six-causality-books-that-will-get-you-from-zero-to-advanced-2023-f4d08718a2dd?source=post_page-----187114fc4aa8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Abadie, A. (2021). Using Synthetic Controls: Feasibility, Data Requirements,
    and Methodological Aspects. *Journal of Economic Literature*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Abadie, A., & Gardeazabal, J. (2003). The Economic Costs of Conflict: A Case
    Study of the Basque Country. *Public Choice & Political Economy eJournal*.'
  prefs: []
  type: TYPE_NORMAL
- en: Athey, S., & Imbens, G. (2017). [The State of Applied Econometrics — Causality
    and Policy Evaluation](https://arxiv.org/pdf/1607.00699.pdf). *Journal of Economic
    Perspectives 32*(2).
  prefs: []
  type: TYPE_NORMAL
- en: Gelman, A., Goodrich, B., Gabry, J., & Vehtari, A. (2018). R-squared for Bayesian
    regression models. *The American Statistician.*
  prefs: []
  type: TYPE_NORMAL
