["```py\nimport numpy as np\nimport pandas as pd\n\ncfb_info_df = pd.read_csv(r'.\\FBS_Football_Team_Info.csv', encoding = 'unicode_escape')\n```", "```py\nmultiplier_per_top_25_team = 0.25\nmultiplier_rivalry_game = 0.5\n\nconference_games_per_team = 9\n```", "```py\nacc_teams = list(cfb_info_df['Team'][np.where(cfb_info_df['Current_conference_2025'] == 'ACC')[0]])\namerican_teams = list(cfb_info_df['Team'][np.where(cfb_info_df['Current_conference_2025'] == 'American')[0]])\nbig_12_teams = list(cfb_info_df['Team'][np.where(cfb_info_df['Current_conference_2025'] == 'Big 12')[0]])\nbig_ten_teams = list(cfb_info_df['Team'][np.where(cfb_info_df['Current_conference_2025'] == 'Big Ten')[0]])\ncusa_teams = list(cfb_info_df['Team'][np.where(cfb_info_df['Current_conference_2025'] == 'C-USA')[0]])\nindependent_teams = list(cfb_info_df['Team'][np.where(cfb_info_df['Current_conference_2025'] == 'Independent')[0]])\nmac_teams = list(cfb_info_df['Team'][np.where(cfb_info_df['Current_conference_2025'] == 'MAC')[0]])\nmountain_west_teams = list(cfb_info_df['Team'][np.where(cfb_info_df['Current_conference_2025'] == 'Mountain West')[0]])\npac_12_teams = list(cfb_info_df['Team'][np.where(cfb_info_df['Current_conference_2025'] == 'Pac-12')[0]])\nsec_teams = list(cfb_info_df['Team'][np.where(cfb_info_df['Current_conference_2025'] == 'SEC')[0]])\nsun_belt_teams = list(cfb_info_df['Team'][np.where(cfb_info_df['Current_conference_2025'] == 'Sun Belt')[0]])\n```", "```py\nimport networkx as nx\n\nrivalry_edge_list = pd.read_csv(r'.\\cfb_rivalry_edge_list.csv', encoding = 'unicode_escape')\n\nG = nx.Graph()\n\nnode_df = pd.read_csv(r'.\\cfb_node_list.csv', encoding = 'unicode_escape')\n\nfor team in np.array(node_df['Team']):\n    G.add_node(team)\n\nfor index in range(0, len(rivalry_edge_list['i'])):\n    G.add_edge(rivalry_edge_list['i'][index], rivalry_edge_list['j'][index], attr = rivalry_edge_list['weight'][index])\n```", "```py\ncurr_conf_teams = acc_teams\n\nteam_i_name = []\nteam_j_name = []\ngame_is_rivalry = []\nteam_i_prob_top_25 = []\nteam_j_prob_top_25 = []\nteam_i_fanbase = []\nteam_j_fanbase = []\n\nfor i in range(len(curr_conf_teams)):\n    for j in range((i+1), len(curr_conf_teams)):\n        team_i_name.append(curr_conf_teams[i])\n        team_j_name.append(curr_conf_teams[j])\n\n        if (curr_conf_teams[i] in list(G.neighbors(curr_conf_teams[j]))) | (curr_conf_teams[j] in list(G.neighbors(curr_conf_teams[i]))):\n            game_is_rivalry.append(1)\n        else:\n            game_is_rivalry.append(0)\n\n        team_i_prob_top_25.append(float(cfb_info_df['p_AP_Top_25_2001_to_2021'][np.where(cfb_info_df['Team'] == curr_conf_teams[i])[0]]))\n        team_j_prob_top_25.append(float(cfb_info_df['p_AP_Top_25_2001_to_2021'][np.where(cfb_info_df['Team'] == curr_conf_teams[j])[0]]))\n\n        team_i_fanbase.append(float(cfb_info_df['tj_altimore_fan_base_size_millions'][np.where(cfb_info_df['Team'] == curr_conf_teams[i])[0]]))\n        team_j_fanbase.append(float(cfb_info_df['tj_altimore_fan_base_size_millions'][np.where(cfb_info_df['Team'] == curr_conf_teams[j])[0]]))\n```", "```py\nacc_game_df = pd.DataFrame(team_i_name, columns = ['team_i'])\nacc_game_df['team_j'] = team_j_name\nacc_game_df['is_rivalry_game'] = game_is_rivalry\nacc_game_df['p_top_25_team_i'] = team_i_prob_top_25\nacc_game_df['p_top_25_team_j'] = team_j_prob_top_25\nacc_game_df['fanbase_millions_team_i'] = team_i_fanbase\nacc_game_df['fanbase_millions_team_j'] = team_j_fanbase\n\nacc_game_df['p_2_top_25_teams'] = acc_game_df['p_top_25_team_i'] * acc_game_df['p_top_25_team_j']\nacc_game_df['p_0_top_25_teams'] = (1 - acc_game_df['p_top_25_team_i']) * (1 - acc_game_df['p_top_25_team_j'])\nacc_game_df['p_1_top_25_teams'] = 1 - acc_game_df['p_0_top_25_teams'] - acc_game_df['p_2_top_25_teams']\n\nacc_game_df['payoff_2_top_25_teams'] = ((1 + multiplier_per_top_25_team) ** 2) * (1 + (multiplier_rivalry_game * acc_game_df['is_rivalry_game'])) * (acc_game_df['fanbase_millions_team_i'] + acc_game_df['fanbase_millions_team_j'])\nacc_game_df['payoff_0_top_25_teams'] = (1 + (multiplier_rivalry_game * acc_game_df['is_rivalry_game'])) * (acc_game_df['fanbase_millions_team_i'] + acc_game_df['fanbase_millions_team_j'])\nacc_game_df['payoff_1_top_25_teams'] = (1 + multiplier_per_top_25_team) * (1 + (multiplier_rivalry_game * acc_game_df['is_rivalry_game'])) * (acc_game_df['fanbase_millions_team_i'] + acc_game_df['fanbase_millions_team_j'])\n\nacc_game_df['expected_payoff_game'] = (acc_game_df['p_2_top_25_teams'] * acc_game_df['payoff_2_top_25_teams']) + (acc_game_df['p_1_top_25_teams'] * acc_game_df['payoff_1_top_25_teams']) + (acc_game_df['p_0_top_25_teams'] * acc_game_df['payoff_0_top_25_teams'])\n```", "```py\nimport plotly.express as px\n\nfig = px.histogram(acc_game_df, x=\"expected_payoff_game\", \n                   title='ACC Conference Games',\n                   labels={'expected_payoff_game':'Expected Payoff per Game'})\nfig.show()\n```", "```py\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\ncombined_payoff_df = pd.DataFrame({'ACC': acc_game_df['expected_payoff_game'],\n                                   'American': american_game_df['expected_payoff_game'],\n                                   'Big 12': big_12_game_df['expected_payoff_game'],\n                                   'B1G': big_ten_game_df['expected_payoff_game'],\n                                   'C-USA': cusa_game_df['expected_payoff_game'],\n                                   'MAC': mac_game_df['expected_payoff_game'],\n                                   'Mountain West': mountain_west_game_df['expected_payoff_game'],\n                                   'Pac-12': pac_12_game_df['expected_payoff_game'],\n                                   'SEC': sec_game_df['expected_payoff_game'],\n                                   'Sun Belt': sun_belt_game_df['expected_payoff_game']})\n\nplt.figure(figsize=(16, 6))\nsns.set_style('white')\nsns.boxplot(data=combined_payoff_df)\nsns.despine()\nplt.show()\n```", "```py\nfbs_teams = list(cfb_info_df['Team'])\n\ncurr_conf_teams = fbs_teams\n\nteam_i_name = []\nteam_j_name = []\ngame_is_rivalry = []\nteam_i_prob_top_25 = []\nteam_j_prob_top_25 = []\nteam_i_fanbase = []\nteam_j_fanbase = []\n\nfor i in range(len(curr_conf_teams)):\n    for j in range((i+1), len(curr_conf_teams)):\n        team_i_name.append(curr_conf_teams[i])\n        team_j_name.append(curr_conf_teams[j])\n\n        if (curr_conf_teams[i] in list(G.neighbors(curr_conf_teams[j]))) | (curr_conf_teams[j] in list(G.neighbors(curr_conf_teams[i]))):\n            game_is_rivalry.append(1)\n        else:\n            game_is_rivalry.append(0)\n\n        team_i_prob_top_25.append(float(cfb_info_df['p_AP_Top_25_2001_to_2021'][np.where(cfb_info_df['Team'] == curr_conf_teams[i])[0]]))\n        team_j_prob_top_25.append(float(cfb_info_df['p_AP_Top_25_2001_to_2021'][np.where(cfb_info_df['Team'] == curr_conf_teams[j])[0]]))\n\n        team_i_fanbase.append(float(cfb_info_df['tj_altimore_fan_base_size_millions'][np.where(cfb_info_df['Team'] == curr_conf_teams[i])[0]]))\n        team_j_fanbase.append(float(cfb_info_df['tj_altimore_fan_base_size_millions'][np.where(cfb_info_df['Team'] == curr_conf_teams[j])[0]]))\n\nfbs_game_df = pd.DataFrame(team_i_name, columns = ['team_i'])\nfbs_game_df['team_j'] = team_j_name\nfbs_game_df['is_rivalry_game'] = game_is_rivalry\nfbs_game_df['p_top_25_team_i'] = team_i_prob_top_25\nfbs_game_df['p_top_25_team_j'] = team_j_prob_top_25\nfbs_game_df['fanbase_millions_team_i'] = team_i_fanbase\nfbs_game_df['fanbase_millions_team_j'] = team_j_fanbase\n\nfbs_game_df['p_2_top_25_teams'] = fbs_game_df['p_top_25_team_i'] * fbs_game_df['p_top_25_team_j']\nfbs_game_df['p_0_top_25_teams'] = (1 - fbs_game_df['p_top_25_team_i']) * (1 - fbs_game_df['p_top_25_team_j'])\nfbs_game_df['p_1_top_25_teams'] = 1 - fbs_game_df['p_0_top_25_teams'] - fbs_game_df['p_2_top_25_teams']\n\nfbs_game_df['payoff_2_top_25_teams'] = ((1 + multiplier_per_top_25_team) ** 2) * (1 + (multiplier_rivalry_game * fbs_game_df['is_rivalry_game'])) * (fbs_game_df['fanbase_millions_team_i'] + fbs_game_df['fanbase_millions_team_j'])\nfbs_game_df['payoff_0_top_25_teams'] = (1 + (multiplier_rivalry_game * fbs_game_df['is_rivalry_game'])) * (fbs_game_df['fanbase_millions_team_i'] + fbs_game_df['fanbase_millions_team_j'])\nfbs_game_df['payoff_1_top_25_teams'] = (1 + multiplier_per_top_25_team) * (1 + (multiplier_rivalry_game * fbs_game_df['is_rivalry_game'])) * (fbs_game_df['fanbase_millions_team_i'] + fbs_game_df['fanbase_millions_team_j'])\n\nfbs_game_df['expected_payoff_game'] = (fbs_game_df['p_2_top_25_teams'] * fbs_game_df['payoff_2_top_25_teams']) + (fbs_game_df['p_1_top_25_teams'] * fbs_game_df['payoff_1_top_25_teams']) + (fbs_game_df['p_0_top_25_teams'] * fbs_game_df['payoff_0_top_25_teams'])\n```", "```py\nfig = px.histogram(fbs_game_df, x=\"expected_payoff_game\", \n                   title='All Possible NCAA FBS Games',\n                   labels={'expected_payoff_game':'Expected Payoff per Game'})\nfig.show()\n```", "```py\nnum_games_per_school = 15\n\nschedule_df = pd.DataFrame(cfb_info_df['Team'])\nschedule_df['games_scheduled'] = 0\n\nfor i in range(num_games_per_school):\n    col_name = 'game_' + str(i+1)\n    schedule_df[col_name] = ''\n```", "```py\n#Sort all games in descending order\nsorted_fbs_game_df = fbs_game_df.sort_values(by = 'expected_payoff_game', ascending = False)\nsorted_fbs_game_df['is_game_scheduled'] = 0\n\n# For each game, pick it if the teams have space on their schedule\nfor index in range(len(sorted_fbs_game_df['expected_payoff_game'])):\n\n    #Get index of team in schedule df\n    team_i_sched_id = np.where(schedule_df['Team'] == sorted_fbs_game_df['team_i'].iloc[index])[0][0]\n    team_j_sched_id = np.where(schedule_df['Team'] == sorted_fbs_game_df['team_j'].iloc[index])[0][0]\n\n    #Check that both teams have room in the schedule\n    if (schedule_df['games_scheduled'].iloc[team_i_sched_id] < num_games_per_school) and (schedule_df['games_scheduled'].iloc[team_j_sched_id] < num_games_per_school):\n\n        #Find num games scheduled\n        num_games_i = schedule_df['games_scheduled'].iloc[team_i_sched_id]\n        num_games_j = schedule_df['games_scheduled'].iloc[team_j_sched_id]\n\n        #Add team j to team i's schedule\n        team_i_name = sorted_fbs_game_df['team_i'].iloc[index]\n        team_j_name = sorted_fbs_game_df['team_j'].iloc[index]\n\n        schedule_df['game_'+str(num_games_i + 1)].iloc[team_i_sched_id] = team_j_name\n\n        #Add team i to team j's schedule\n        schedule_df['game_'+str(num_games_j + 1)].iloc[team_j_sched_id] = team_i_name\n\n        #Increment games scheduled\n        schedule_df['games_scheduled'].iloc[team_i_sched_id] = schedule_df['games_scheduled'].iloc[team_i_sched_id] + 1\n        schedule_df['games_scheduled'].iloc[team_j_sched_id] = schedule_df['games_scheduled'].iloc[team_j_sched_id] + 1\n\n        #Mark game as scheduled in sorted games df\n        sorted_fbs_game_df['is_game_scheduled'].iloc[index] = 1\n\n    if index % 100 == 0:\n        print(str(round((index+1)/len(sorted_fbs_game_df['expected_payoff_game']), 2)*100)+'% complete')\n```", "```py\nfig = px.histogram(chosen_games_df, x=\"expected_payoff_game\", \n                   title='Chosen NCAA FBS Games',\n                   labels={'expected_payoff_game':'Expected Payoff per Game'})\nfig.show()\n```", "```py\n#Get dataframe of only chosen games\nchosen_games_df = sorted_fbs_game_df.iloc[np.where(sorted_fbs_game_df['is_game_scheduled'] == 1)]\n\n#Create graph\nchosen_G = nx.from_pandas_edgelist(chosen_games_df, source='team_i', target='team_j')\n\n#Add edge weights to graph\nfor c in range(len(chosen_games_df['team_i'])):\n    chosen_G[chosen_games_df['team_i'].iloc[c]][chosen_games_df['team_j'].iloc[c]]['weight'] = chosen_games_df['expected_payoff_game'].iloc[c]\n```", "```py\nfrom node2vec import Node2Vec\n\n#Precompute probabilities and generate walks\nnode2vec = Node2Vec(chosen_G, dimensions = 64, walk_length = 30, num_walks = 50, workers = 1, seed = 0)\n\n#Embed nodes\nmodel = node2vec.fit(window = 10, min_count = 1, batch_words = 4)\n```", "```py\n# Data frame of embeddings only\nnode2vec_df_clean = pd.DataFrame(model.wv.vectors)\n\n#Data frame of embeddings and team name\nnode2vec_df = pd.DataFrame(model.wv.vectors)\nnode2vec_df['Team'] = model.wv.key_to_index.keys()\n```", "```py\nfrom sklearn.cluster import KMeans\n\nnum_conferences = int(len(node2vec_df['Team']) / num_games_per_school)\nkmeans = KMeans(n_clusters = num_conferences, random_state=0).fit(node2vec_df_clean)\nkmeans_conferences = kmeans.labels_\nnode2vec_df['Conference'] = kmeans_conferences\n```", "```py\nnum_teams_per_conf = np.zeros(num_conferences)\n\nfor i in range(num_conferences):\n    print(node2vec_df['Team'][np.where(node2vec_df['Conference'] == i)[0]])\n    num_teams_per_conf[i] = len(node2vec_df['Team'][np.where(node2vec_df['Conference'] == i)[0]])\n\nnum_conference_games_per_conf = np.zeros(num_conferences)\nnum_non_conference_games_per_conf = np.zeros(num_conferences)\n\nfor e in chosen_G.edges():\n    conference_i = node2vec_df['Conference'][np.where(node2vec_df['Team'] == e[0])[0][0]]\n    conference_j = node2vec_df['Conference'][np.where(node2vec_df['Team'] == e[1])[0][0]]\n\n    if conference_i == conference_j:\n        num_conference_games_per_conf[conference_i] = num_conference_games_per_conf[conference_i] + 2\n    else:\n        num_non_conference_games_per_conf[conference_i] = num_non_conference_games_per_conf[conference_i] + 1\n        num_non_conference_games_per_conf[conference_j] = num_non_conference_games_per_conf[conference_j] + 1\n\nplot_df = pd.DataFrame(num_conference_games_per_conf, columns = ['num_conf_games'])\nplot_df['num_non_conf_games'] = num_non_conference_games_per_conf\nplot_df['Conference'] = ['ACC+', 'Mountain South', 'Tuesday Group', 'Power Group', 'Super 20', 'Pac-17', 'Middle West', 'AAMWC']\nplot_df['Percent Conference Games'] = plot_df['num_conf_games']/(plot_df['num_conf_games']+plot_df['num_non_conf_games'])\nplot_df['Average Number Conference Games'] = num_games_per_school*(plot_df['num_conf_games']/(plot_df['num_conf_games']+plot_df['num_non_conf_games']))\n\nimport plotly.express as px\n\nfig = px.bar(plot_df, x='Conference', y='Average Number Conference Games', height=400)\nfig.show()\n```"]