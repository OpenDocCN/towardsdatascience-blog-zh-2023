- en: Introduction to MLOps Principles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/introduction-to-mlops-principles-c5d73a00aa76](https://towardsdatascience.com/introduction-to-mlops-principles-c5d73a00aa76)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A beginner-friendly introduction to MLOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@chimso1994?source=post_page-----c5d73a00aa76--------------------------------)[![Chayma
    Zatout](../Images/341c45f53ddf73dc0851d547cc7cb55a.png)](https://medium.com/@chimso1994?source=post_page-----c5d73a00aa76--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c5d73a00aa76--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c5d73a00aa76--------------------------------)
    [Chayma Zatout](https://medium.com/@chimso1994?source=post_page-----c5d73a00aa76--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c5d73a00aa76--------------------------------)
    ·9 min read·Oct 30, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6759305021d22ea569323972e468cf25.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Silvestri Matteo](https://unsplash.com/@silvestrimatteo?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: If you’re looking to elevate your MLOps projects to the next level, understanding
    its principles is an essential part of the process. In this article, we’ll offer
    an introduction to MLOps principles and elucidate the key concepts in an accessible
    manner. Each principle will receive a dedicated tutorial with practical examples
    in forthcoming articles. You can access all the examples on my [Github profile](https://github.com/Chim-SO?tab=repositories).
    However, if you’re new to MLOps, I recommend starting with my [beginner-friendly
    tutorial](https://medium.com/towards-data-science/a-beginner-friendly-introduction-to-mlops-95282f25325c)
    to get up to speed. So let’s dive in!
  prefs: []
  type: TYPE_NORMAL
- en: '**Table of contents:**'
  prefs: []
  type: TYPE_NORMAL
- en: · [1\. Introduction](#12e0)
  prefs: []
  type: TYPE_NORMAL
- en: · [2\. MLOps principles](#a1cf)
  prefs: []
  type: TYPE_NORMAL
- en: · [3\. Versioning](#7444)
  prefs: []
  type: TYPE_NORMAL
- en: · [4\. Testing](#5ef5)
  prefs: []
  type: TYPE_NORMAL
- en: · [5\. Automation](#c9ca)
  prefs: []
  type: TYPE_NORMAL
- en: · [6\. Monitoring and tracking](#d4ab)
  prefs: []
  type: TYPE_NORMAL
- en: · [7\. Reproducibility](#bb89)
  prefs: []
  type: TYPE_NORMAL
- en: · [8\. Conclusion](#dac8)
  prefs: []
  type: TYPE_NORMAL
- en: '**My MLOps tutorials:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Tutorial 1: A Key Start to MLOps: Exploring Its Essential Components*](/a-key-start-to-mlops-exploring-its-essential-components-27646238372d)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Tutorial 2: A Beginner-Friendly Introduction to MLOps Workflow*](/a-beginner-friendly-introduction-to-mlops-95282f25325c)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Tutorial 3: Introduction to MLOps Principles*](https://medium.com/towards-data-science/introduction-to-mlops-principles-c5d73a00aa76)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Tutorial 4: Structuring Your Machine Learning Project with MLOps in Mind*](https://medium.com/towards-data-science/structuring-your-machine-learning-project-with-mlops-in-mind-41a8d65987c9)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Tutorial 5: Version Controlling in Practice: Data, ML Model, and Code*](https://medium.com/towards-data-science/version-controlling-in-practice-data-ml-model-and-code-e13c518067dc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Tutorial 6: Testing in Practice: Code, Data and ML Model*](/testing-in-practice-code-data-and-ml-model-cfb1ada81f6c)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tutorial 7: Tracking in Practice: Code, Data and ML Model](/tracking-in-practice-code-data-and-ml-model-6787a881609c)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*[I will be updating this list as I publish articles on the subject]*'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a previous article, we defined MLOps as a set of techniques and practices
    used to design, build, and deploy machine learning models in an efficient, optimized,
    and organized manner. One of the key steps in MLOps is to establish a workflow
    and maintain it over time.
  prefs: []
  type: TYPE_NORMAL
- en: '**The MLOps workflow** outlines the steps to follow in order to develop, deploy,
    and maintain machine learning models. It includes the business problem that describes
    the problem in a structured way, data engineering that involves all the data preparation
    and preprocessing, machine learning model engineering that involves all the model
    processing from designing the model to its evaluation, and code engineering that
    involves serving the model. You can refer to the previous tutorial if you want
    more details.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4e3c315df42101a29809349a654afe97.png)'
  prefs: []
  type: TYPE_IMG
- en: MLOps workflow
  prefs: []
  type: TYPE_NORMAL
- en: All the parts of the workflow in MLOps are interconnected and run in a cyclic
    manner. At any point in the process, it may be necessary to revisit a previous
    step. This interdependence between the different stages of the workflow defines
    the **MLOps lifecycle**. The MLOps lifecycle is essential to ensure that the machine
    learning model is performing optimally and still addressing the business problem
    defined in the first stage. Therefore, it is crucial to maintain the MLOps lifecycle
    by adhering to the **MLOps principles**.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. MLOps principles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MLOps principles are a set of concepts that aim to maintain the MLOps lifecycle
    while reducing the time and cost of developing and deploying machine learning
    models, thus avoiding technical debt.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure the maintenance of the entire lifecycle, the principles need to be
    applied across different workflow steps, including data, the Machine Learning
    model (ML model), and code. These principles encompass versioning, testing, automation,
    monitoring and tracking, and reproducibility. Successfully implementing these
    principles entails utilizing appropriate tools and following best practices such
    as project structuring.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, I have attempted to prioritize the different principles based
    on their level of importance and the order in which they should be applied. However,
    it is important to note that all of these principles hold significance in mature
    machine learning projects: they are interdependent and complement each other.'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Versioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/381b5ec8431d8ef95ee1ee65353dac1e.png)'
  prefs: []
  type: TYPE_IMG
- en: The first thing to consider in MLOps principles is versioning your different
    application components including data, ML model and code. It enables the tracking
    of changes made to the different MLOps components and reproducibility of the different
    steps of the workflow. It also allows developers and data scientists to roll back
    to a previous version if needed, compare performance between different versions,
    and reproduce results.
  prefs: []
  type: TYPE_NORMAL
- en: Versioning in data engineering, includes versioning the datasets, the features,
    the metadata and the processing pipelines. It can be managed using a version control
    system (VCS) such as Git and DVC (Data Version Control), which enables versioning
    and tracking of large data files.
  prefs: []
  type: TYPE_NORMAL
- en: Versioning the ML model includes versioning the model itself (its architecture
    and its weights) the the training pipeline, the hyperparameters and the results.
    It is generally managed using Git; however, other tools, like MLflow, exist for
    this task and provide additional functionalities such as versioning other metadata.
  prefs: []
  type: TYPE_NORMAL
- en: Versioning the code includes versioning the code source itself and its different
    configurations. It is also recommended to keep the libraries versions for each
    code versioning to prevent libraries version problems.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, versioning is essential in MLOps to ensure that changes made to the
    machine learning model, code, and data are tracked and managed effectively.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/5804e8277c38d0dbadfb318cdf0f2799.png)'
  prefs: []
  type: TYPE_IMG
- en: Testing is an essential, crucial and mandatory aspect in MLOps. It reduces the
    risk of errors and bugs and enable to detect and fix the issues quickly. Furthermore,
    it guarantees that machine learning models are performing as intended and meeting
    the business problem requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Data testing ensures the quality and the correctness of the data used for machine
    learning which in turn ensures the accuracy and reliability of machine learning
    models. It includes datasets validation and data processing pipeline validation.
    Datasets validation consists of identifying the potential issues in data such
    as missing values and inconsistent data. This latter is done by computing some
    statistics and visualization techniques. Data processing pipeline validation consists
    of unit testing the different data processing functions especially for features
    creation.
  prefs: []
  type: TYPE_NORMAL
- en: The ML model testing ensures accurate predictions on new data and assesses the
    model’s generalization capabilities. It is a process of testing, evaluating and
    validating the ML model. This process includes testing the model specification,
    the training pipeline integration and the model’s the relevance and correctness.
    In addition, some non-functional requirements like security, fairness, interpretability
    also need to be tested to ensure the model’s effectiveness, reliability, and the
    ethical implications.
  prefs: []
  type: TYPE_NORMAL
- en: The code testing consists of verifying the correctness and quality of the whole
    MLOps project code to ensure that the code is free from defects and meets the
    requirements of the project. Code testing includes the unit testing the different
    modules and functions, the integration testing of the end-to-end pipeline, the
    system testing and the acceptance testing using real-world data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overall, testing is an essential aspect in MLOps to ensure the correctness
    and the efficiency of the MLOps pipeline. It can also improve the other MLOps
    principles:'
  prefs: []
  type: TYPE_NORMAL
- en: It ensures the code changes made during versioning is functioning correctly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It improve the automation by adding it to the automation pipeline.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It improves monitoring by detection potential issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It also improve the reproducibility by ensuring that models can be reproduced
    consistently over time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5\. Automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/8d42045b5ac7b471a9012c656b42dc24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Automation is an MLOps principle that aims to automate the different pipeline
    processing including building, testing, deploying and managing. Automation defines
    how free the system is from human intervention: the more free the system from
    manual process, the more automated the system. Therefore, the level of automation
    defines the level of process’s maturity.'
  prefs: []
  type: TYPE_NORMAL
- en: The process of data engineering is usually manual starting from data gathering
    and data preparation to data validation since this step has an experimental and
    iterative nature. However, some of steps can be automated such as data transformation
    and features manipulation. Automating these latter improves the accuracy and reduce
    manual errors.
  prefs: []
  type: TYPE_NORMAL
- en: ML model automation aims to automate the process from the model development
    to its deployment and management. It includes automating features engineering,
    model training, hyperparameters selection and tuning, model validation and model
    deployment. This latter reduces the time and resources required to build and deploy
    models, while also improving their quality and consistency especially when new
    data is available, the model change or for monitoring events. Automating the ML
    model development process can help to reduce the time and resources required to
    build and deploy models, while also improving their quality and consistency.
  prefs: []
  type: TYPE_NORMAL
- en: Code automation aims to reduce errors, increase efficiency, and improve overall
    quality. It includes the application build automation and the CD/CI pipelines
    automation to perform fast and reliable ML model deployments in production.
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, automation enables efficient and reliable implementation of the
    repetitive tasks and standardizes processes. Furthermore, it is interconnected
    with the other principles:'
  prefs: []
  type: TYPE_NORMAL
- en: It facilitates versioning by automating the management and tracking of different
    versions of code, data, and models.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It facilitates testing by automating the execution of various tests, such as
    unit tests, integration tests, and performance tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It facilitates monitoring by automating the collection, analysis, and visualization
    of relevant metrics and performance indicators.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It facilitates reproducibility by automating the execution of code, workflows,
    and pipelines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 6\. Monitoring and tracking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/be1a086c581b2f08e1b8092f1792fe3c.png)'
  prefs: []
  type: TYPE_IMG
- en: When the model is deployed, it is essential to monitor the MLOps project to
    assure the performance, stability and reliability of the ML model in production.
    If the monitoring detects an anomaly, the changes must be reported and the concerned
    developers must be alerted. Monitoring the different steps of MLOps consists of
    re-running and comparing them in a frequent basis.
  prefs: []
  type: TYPE_NORMAL
- en: Data monitoring in MLOps consists of continuously observing and analyzing the
    input data used in machine learning models to ensure its quality, consistency,
    and relevance. It includes monitoring the version change, the invariant in training
    and serving inputs, the invariant in the computed training and serving features,
    and the process of features generation.
  prefs: []
  type: TYPE_NORMAL
- en: ML model monitoring consists of tracking and evaluating the performance of machine
    learning models in production. It includes monitoring the model’s numerical stability,
    the model’s age and decay and the computational performance of the ML system.
  prefs: []
  type: TYPE_NORMAL
- en: Code monitring consists of tracking and evaluating the code used in machine
    learning project to ensure its quality, integrity, and adherence to coding standards.
    It includes monitoring the changes in source system, the dependencies upgrade
    and the predictive quality of the application on serving data.
  prefs: []
  type: TYPE_NORMAL
- en: Just as importantly, monitoring and tracking enable reproducibility by tracking
    the inputs, outputs, and execution of code, workflows, and models. In addition,
    by monitoring testing, anomalies in the model/system behavior and performance
    can be detected.
  prefs: []
  type: TYPE_NORMAL
- en: '*7\. Reproducibility*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/01dc9b21c787bd25946918049b1c72f5.png)'
  prefs: []
  type: TYPE_IMG
- en: Reproducibility is essential when building machine learning workflow. It allows
    to generate identical results giving the identical inputs regardless of the place
    of execution. To assure identical results the whole MLOps workflow needs to be
    reproducible.
  prefs: []
  type: TYPE_NORMAL
- en: Data reproducibility consists of capturing and preserving all the necessary
    information and processes related to data collection, preprocessing, and transformation,
    allowing others to obtain the same dataset for analysis or model training. It
    includes creating a backup for data, versioning data and features and creating
    and backup the metadata and documentation.
  prefs: []
  type: TYPE_NORMAL
- en: ML model reproducibility consists of to the ability to recreate and obtain the
    same trained machine learning model consistently. It includes ensuring that the
    parameters are the same and the order of the parameters is identical whether in
    development, production or on other machines.
  prefs: []
  type: TYPE_NORMAL
- en: Code reproducibility consists of the ability to recreate and obtain the same
    results from the code used for developing machine learning models. It includes
    ensuring that the dependencies version and the technical stack are identical for
    all environments. This is usually ensured by providing container images or virtual
    machines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overall, reproducibility is achieved by the other principles : versioning,
    testing, automation and monitoring work together to capture and maintain the necessary
    information, execute processes consistently, verify the correctness of results,
    and identify any factors that could impact the reproducibility of the models and
    workflows.'
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here we come to the end of this article. In this article, we presented and briefly
    explained the MLOps principles. You can think of MLOps principles as the components
    that maintain the MLOps lifecycle. They are achieved whether by practices, tools
    or both. To ensure the maintenance of all entire lifecycle, they are applied on
    the different components of the MLOps workflow.
  prefs: []
  type: TYPE_NORMAL
- en: In the next tutorials, we will learn in deep of the different MLOps principles.
    I will be writing more tutorials on MLOps and its various technologies, with examples,
    so stay tuned.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading this article. You can find all the examples of the different
    tutorials I provide in my [GitHub profile](https://github.com/Chim-SO?tab=repositories).
    If you appreciate my tutorials, please support me by following and subscribing.
    This way, you’ll receive notifications about my new articles. If you have any
    questions or suggestions, feel free to leave a comment.
  prefs: []
  type: TYPE_NORMAL
- en: Image credits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All images and figures in this article whose source is not mentioned in the
    caption are by the author.
  prefs: []
  type: TYPE_NORMAL
