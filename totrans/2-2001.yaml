- en: The Catcher in the… Python. Catch Exceptions and Warnings with One Tool
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 《… Python 中的捕手：用一个工具捕获异常和警告》
- en: 原文：[https://towardsdatascience.com/the-catcher-in-the-python-catch-exceptions-and-warnings-with-one-tool-81714117da76](https://towardsdatascience.com/the-catcher-in-the-python-catch-exceptions-and-warnings-with-one-tool-81714117da76)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-catcher-in-the-python-catch-exceptions-and-warnings-with-one-tool-81714117da76](https://towardsdatascience.com/the-catcher-in-the-python-catch-exceptions-and-warnings-with-one-tool-81714117da76)
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON PROGRAMMING
- en: Why not implement one tool for catching both exceptions and warnings in Python?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么不在 Python 中实现一个同时捕获异常和警告的工具呢？
- en: '[](https://medium.com/@nyggus?source=post_page-----81714117da76--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----81714117da76--------------------------------)[](https://towardsdatascience.com/?source=post_page-----81714117da76--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----81714117da76--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----81714117da76--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus?source=post_page-----81714117da76--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----81714117da76--------------------------------)[](https://towardsdatascience.com/?source=post_page-----81714117da76--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----81714117da76--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----81714117da76--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----81714117da76--------------------------------)
    ·13 min read·May 23, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----81714117da76--------------------------------)
    ·13 min read·2023年5月23日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/6f42c45eba05eb69d8a1a9adcc012803.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6f42c45eba05eb69d8a1a9adcc012803.png)'
- en: The article discusses catching exceptions and warnings in Python. Photo by [Keith
    Johnston](https://unsplash.com/de/@acfb5071?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章讨论了在 Python 中捕获异常和警告的问题。照片由 [Keith Johnston](https://unsplash.com/de/@acfb5071?utm_source=medium&utm_medium=referral)
    拍摄，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 'Python has some nice approach to handling exceptions. You can catch them, raise
    them, re-raise them, raise two exceptions at the same time (or rather, one exception
    from another), log them, and to create custom errors and their hierarchy, to name
    just the most important ones. If you want to handle warnings, you can also do
    that — but you need two separate tools: one for exceptions and one for warnings.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python 有一些很好的异常处理方法。你可以捕获它们、引发它们、重新引发它们、同时引发两个异常（或者说，一个异常引发另一个异常）、记录它们，还可以创建自定义错误及其层次结构，只列举了最重要的一些。如果你想处理警告，你也可以做到——但你需要两个不同的工具：一个用于异常，一个用于警告。
- en: Read this article to learn how to write a single catcher for both exceptions
    and warnings, and how to adjust it to your needs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读这篇文章，了解如何编写一个同时捕获异常和警告的工具，以及如何根据需求调整它。
- en: 'I really like Python’s exception handling. I like its simplicity, which you
    can see for instance here:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常喜欢 Python 的异常处理。我喜欢它的简洁性，比如这里展示的：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Before analyzing the function, let’s see it in action:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析函数之前，让我们看看它的实际应用：
- en: '![](../Images/a88c74fc599d02c8e7b5c31090fae843.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a88c74fc599d02c8e7b5c31090fae843.png)'
- en: The multiply_str() function in action; screenshot from Python REPL. Image by
    author
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: multiply_str() 函数的实际应用；来自 Python REPL 的截图。图片由作者提供
- en: The first two calls are correct. The second one is not, as we’re trying to multiply
    two strings. The third one is incorrect, too, but this time because the function
    got two integer values. They can be multiplied, but our function catches this
    scenario by noticing that the resulting object is not a string — which basically
    means something went wrong; hence the exception.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个调用是正确的。第二个调用不正确，因为我们试图乘以两个字符串。第三个调用也不正确，但这次是因为函数接收了两个整数值。它们可以被相乘，但我们的函数通过检测结果对象不是字符串来捕获这个场景——这基本上意味着出了问题，因此产生了异常。
- en: What we see here is called duck typing. We’re not checking if the input values
    are of correct types; instead, we’re doing what the function aims to do — here,
    multiply the two values. If it goes fine, then… it’s fine. Duck typing is a typical
    dynamic approach in Python.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看到的被称为鸭子类型。我们不是检查输入值是否具有正确的类型；而是执行函数的目标——在这里是乘以两个值。如果一切顺利，那么……就是好的。鸭子类型是
    Python 中一种典型的动态方法。
- en: 'In this function, however, the situation is a little more complex: the function
    will work also with two numeric values, something we’re not interested in. We
    do *not* want the function to be polymorphic: we want it to work with `x` a string
    and `n` an integer.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这个函数中，情况要复杂一些：该函数也将与两个数值一起工作，这是我们不感兴趣的。我们*不*希望函数具有多态性：我们希望它与 `x` 为字符串和 `n`
    为整数一起工作。
- en: We could thus check their types and raise the same exceptions as above. In the
    above version, we check the type of the return value, a faster approach. It’s
    faster because we check type of only one object (`xn`), but also only when we
    know `x` and `n` can be multiplied. So, this is not truly duck typing. Oftentimes,
    however, you will choose pure duck typing, the most natural Python approach.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以检查它们的类型，并引发与上述相同的异常。在上述版本中，我们检查返回值的类型，这是一种更快的方法。它更快，因为我们只检查一个对象的类型（`xn`），但仅在我们知道
    `x` 和 `n` 可以相乘时才进行检查。因此，这并不是真正的鸭子类型。然而，通常你会选择纯粹的鸭子类型，这是最自然的 Python 方法。
- en: 'In this article, however, we’re talking about something else: catching errors,
    so let’s move on. The `multiply_str()` function multiplies a string `x` by an
    int `n`, but does so in a controlled way — meaning that if something is wrong,
    the corresponding exception is caught and raised using a custom exception. Actually,
    it does more than that:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这篇文章中，我们讨论的是别的内容：捕获错误，所以让我们继续。`multiply_str()` 函数将一个字符串 `x` 乘以一个整数 `n`，但以受控的方式进行——这意味着如果出现问题，相应的异常会被捕获并使用自定义异常引发。实际上，它做的还不止这些：
- en: A customized message is added.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已添加自定义消息。
- en: '`MultiplicationError` is raised `from TypeError`.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MultiplicationError` 从 `TypeError` 中引发。'
- en: 'The latter thing is interesting in the context of our discussion. In practice,
    it helps you catch errors from `multiply_str` using both `except MultiplicationError`
    and `except TypeError`. Both will catch `MultiplicationError` — even though `TypeError`
    is not (programistically) related to the former. So, this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 后者在我们讨论的背景下很有趣。实际上，它帮助你使用 `except MultiplicationError` 和 `except TypeError`
    捕获 `multiply_str` 的错误。两者都会捕获 `MultiplicationError` —— 即使 `TypeError` 与前者没有（程序上）关系。所以，这：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'will catch the same error as this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 将捕获与此相同的错误：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This can be useful in various situations, especially when one uses `multiply_str()`
    in their own code outside of the package in which `multiply_str()` is defined.
    Otherwise, the user would have to import `MultiplicationError`. It’s easier to
    try to catch `TypeError`, and this will also allow you catching `MultiplicationError`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这在各种情况下都很有用，尤其是当一个人在其自己定义 `multiply_str()` 的包之外使用 `multiply_str()` 时。否则，用户将不得不导入
    `MultiplicationError`。尝试捕获 `TypeError` 更简单，这也允许你捕获 `MultiplicationError`。
- en: 'Of course, there’s far more into using exceptions in Python. You can read more
    about custom exceptions from this article:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Python 中使用异常的内容远不止这些。你可以从这篇文章中了解更多关于自定义异常的内容：
- en: '[](/should-we-use-custom-exceptions-in-python-b4b4bca474ac?source=post_page-----81714117da76--------------------------------)
    [## Should we use custom exceptions in Python?'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/should-we-use-custom-exceptions-in-python-b4b4bca474ac?source=post_page-----81714117da76--------------------------------)
    [## 我们是否应该在 Python 中使用自定义异常？'
- en: Python has so many built-in exceptions that we rarely need to create and use
    custom ones. Or do we?
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 有这么多内置异常，以至于我们很少需要创建和使用自定义异常。或者说，我们需要吗？
- en: towardsdatascience.com](/should-we-use-custom-exceptions-in-python-b4b4bca474ac?source=post_page-----81714117da76--------------------------------)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/should-we-use-custom-exceptions-in-python-b4b4bca474ac?source=post_page-----81714117da76--------------------------------)
- en: 'You may also find this article interesting:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还会发现这篇文章很有趣：
- en: '[](https://betterprogramming.pub/how-to-overwrite-asserterror-in-python-and-use-custom-exceptions-c0b252989977?source=post_page-----81714117da76--------------------------------)
    [## How to Overwrite AssertionError in Python and Use Custom Exceptions'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://betterprogramming.pub/how-to-overwrite-asserterror-in-python-and-use-custom-exceptions-c0b252989977?source=post_page-----81714117da76--------------------------------)
    [## 如何在 Python 中重写 AssertionError 并使用自定义异常'
- en: Python’s assert statement uses AssertionError. Know how to use a different exception
    instead
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 的 assert 语句使用 AssertionError。了解如何使用其他异常代替。
- en: betterprogramming.pub](https://betterprogramming.pub/how-to-overwrite-asserterror-in-python-and-use-custom-exceptions-c0b252989977?source=post_page-----81714117da76--------------------------------)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: betterprogramming.pub](https://betterprogramming.pub/how-to-overwrite-asserterror-in-python-and-use-custom-exceptions-c0b252989977?source=post_page-----81714117da76--------------------------------)
- en: But now, let’s move on to warnings.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在，让我们继续讨论警告。
- en: Handling warnings
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理警告
- en: Warnings are raised and caught in a similar way.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 警告的引发和捕获方式类似。
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We still raise an exception when an exception was raised during multiplication,
    but when the object to return is not a string, a warning is raised. See how this
    works:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当乘法过程中抛出异常时，我们仍然会抛出异常，但当返回的对象不是字符串时，会发出警告。看看这是如何工作的：
- en: '![](../Images/3718005531b811c86fac54dfade5550f.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3718005531b811c86fac54dfade5550f.png)'
- en: The multiply_str() function in action, this time with both an exception and
    a warning; screenshot from Python REPL. Image by author
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`multiply_str()` 函数的实际操作，这次有异常和警告；来自 Python REPL 的截图。图片由作者提供'
- en: 'As you see, with a warning, you get the warning, but you do also get the output,
    unlike in the case of an exception. You need to remember that Python’s default
    behavior is to warn you once:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，得到警告时，你会收到警告，但也会得到输出，这与异常的情况不同。你需要记住，Python 的默认行为是只警告一次：
- en: '![](../Images/c4001c19e48aac36c42204d0c8797023.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c4001c19e48aac36c42204d0c8797023.png)'
- en: The default behavior is to raise a particular warning only once; screenshot
    from Python REPL. Image by author
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 默认行为是只发出一次特定的警告；来自 Python REPL 的截图。图片由作者提供
- en: 'It assumes you will remember you have been warned, so you’re on your own. You
    can change this behavior, but we will talk about this some other day. Changing
    this behavior is easy. Consider the below screenshot *from a new session*, with
    the same code imported as before:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这假设你会记住你已经被警告过，所以你得自己解决。你可以改变这种行为，但我们会在其他时间讨论这个问题。改变这种行为很简单。请看下面的截图*来自一个新会话*，代码与之前导入的一样：
- en: '![](../Images/2d8b5cca9d1fc0d4b621f9f02f6095e7.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2d8b5cca9d1fc0d4b621f9f02f6095e7.png)'
- en: An “always” warning filter changes the default behavior; screenshot from Python
    REPL. Image by author
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一个“始终”警告过滤器会改变默认行为；来自 Python REPL 的截图。图片由作者提供
- en: From now on, we will work with this warnings filter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，我们将使用这个警告过滤器。
- en: There is more into warnings than that. Let’s stop here, however, as the main
    aim we want to achieve today is implementing a joint catcher of exceptions and
    warnings.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 警告远不止这些。让我们在这里停下，今天我们主要的目标是实现一个可以同时捕捉异常和警告的工具。
- en: Defining the catcher
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义捕捉器
- en: 'Okay, so we want to implement a tool that will enable us to catch both exceptions
    and warnings. First, let’s see how we can catch our custom `MultiplicationError`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们要实现一个工具，使我们能够捕捉到异常和警告。首先，让我们看看如何捕捉我们自定义的`MultiplicationError`：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'and warnings:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 和警告：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Of course, these are just some basic examples. We can do it in various ways,
    depending on what we want out joint catcher to return to the user. For the moment,
    let’s return a list with exceptions and warnings, ordered according to the time
    they were caught.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这些只是一些基本示例。我们可以根据希望返回给用户的内容以各种方式实现它。暂时，我们返回一个按捕捉时间排序的异常和警告列表。
- en: 'This is one of the simplest examples:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最简单的例子之一：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And let’s see how this works:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是如何工作的：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `divdiv()` function is, certainly, unnatural, as it always issues a warning,
    but I wanted to show a very simple example. After running incorrect command `divdiv(1,
    0)`, the catcher contains an exception and a warning.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`divdiv()` 函数确实不自然，因为它总是发出警告，但我想展示一个非常简单的例子。运行不正确的命令 `divdiv(1, 0)` 后，捕捉器包含了一个异常和一个警告。'
- en: 'We could improve the `catch()` function a little bit. While many Pythonistas
    like returning two- or three-element tuples from functions, you can instead return
    a named tuple:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以稍微改进一下`catch()`函数。虽然许多 Python 爱好者喜欢从函数返回两元素或三元素的元组，但你也可以返回一个命名元组：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We could define `CatchReturn` outside of the function; we could define it on
    the fly, using the following return line instead of the last two lines from the
    function above:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在函数外定义`CatchReturn`；也可以在函数内部动态定义，使用以下返回行替代上面函数的最后两行：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Anyway, with this namedtuple, the function certainly returns a namedtuple:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，使用这个命名元组，函数肯定会返回一个命名元组：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The good thing is, you can ignore that it’s a namedtuple and treat it just
    like a regular tuple:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 好的一点是，你可以忽略它是一个命名元组，将它像普通元组一样对待：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Okay, so this is the basic version of a joint catcher. But you can do so much
    more with such catchers! Below, I present two more examples, with only basic comments.
    You can enjoy the time spent with these examples and the effort to understand
    their implementation. Should you have any questions, though, don’t hesitate to
    ask them in the comments. And if you come up with some other examples you’d like
    to share, please do so!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这就是一个基本版本的联合捕获器。但你可以用这样的捕获器做更多的事情！下面，我展示了两个更多的示例，只有基本的注释。你可以享受这些示例的时间以及理解它们实现的努力。如果你有任何问题，请随时在评论中提问。如果你想到其他你想分享的示例，请务必告诉我！
- en: 'Example: Closure-based multiple catcher'
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：基于闭包的多个捕获器
- en: The previous catcher worked with a single function call. In this example, we
    will use a closure to build a catcher that can be used for many subsequent function
    calls. If a particular call goes fine, the catcher simply returns the result.
    If a warning is issued, it will return the output and log the warning. If an exception
    is raised, it will catch the exception — but it will not return at all.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的捕获器与单个函数调用一起工作。在这个示例中，我们将使用闭包来构建一个可以用于许多后续函数调用的捕获器。如果某个调用顺利进行，捕获器将简单地返回结果。如果发出了警告，它将返回输出并记录警告。如果引发了异常，它将捕获异常——但完全不会返回。
- en: 'Notice the implementation: I used a closure. The most common example of closures
    in Python are decorators, but closures can be used for other purposes as well.
    Here, we will use them to keep state; we could do so using a class (actually,
    we will do so in the next example), but as you will see, closures offer even a
    simpler approach for that.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意实现：我使用了闭包。Python中闭包最常见的例子是装饰器，但闭包也可以用于其他目的。在这里，我们将使用它们来保持状态；我们可以使用类（实际上，我们将在下一个示例中这样做），但正如你将看到的，闭包提供了一种更简单的方法。
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, let’s see the function in action. First, we need to create an object of
    the catcher:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看这个函数的实际操作。首先，我们需要创建一个捕获器对象：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We will now use the `all_catcher` object to call several functions. I will use
    the same `DivisionWarning` and `divdiv()` function we used above.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将使用`all_catcher`对象来调用多个函数。我将使用与上面相同的`DivisionWarning`和`divdiv()`函数。
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This catcher works with functions defined as `lambda`s, though we can use a
    different structure; we will do so in the next example. Above, `x1` is `None`
    because — in addition to `DivisionWarning` — the catcher caught an exception (`ZeroDivisionError`).
    To see the `issues` list, it’s enough to call `all_catcher()` (thanks to the `if`-block
    in the definition of the `catch_one()` function):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个捕获器与定义为`lambda`的函数一起使用，尽管我们可以使用不同的结构；我们将在下一个示例中这样做。上面，`x1`是`None`，因为除了`DivisionWarning`之外，捕获器还捕获了一个异常（`ZeroDivisionError`）。要查看`issues`列表，只需调用`all_catcher()`（感谢`catch_one()`函数中的`if`块）：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we call a function that works fine and dandy, we will get its return value,
    and the catcher will not log anything (so its `issues` list will remain unchanged):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们调用一个正常工作的函数，我们将得到其返回值，捕获器将不会记录任何内容（所以其`issues`列表将保持不变）：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let’s add some more calls:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再添加一些调用：
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The catcher’s net should contain more than it did¹:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获器的网应该包含比之前更多的内容¹：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: It does so indeed. Errors and warnings are logged here in the order of their
    catching, but this is just one of various possibilities.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 它确实如此。错误和警告在这里按捕获顺序记录，但这只是各种可能性中的一种。
- en: 'Oh, one more thing. You can use more such catchers in one session/script:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，还有一件事。你可以在一个会话/脚本中使用更多这样的捕获器：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Unlike `catcher1`, `catcher2` should be empty. Let’s check:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 与`catcher1`不同，`catcher2`应该是空的。让我们检查一下：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As another exercise, you can use a different data structure in `catch_all()`,
    instead of a list. Or log exceptions and warnings into different lists. Or log
    using the `logging` module. Or add a timestamp to each element.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 作为另一个练习，你可以在`catch_all()`中使用不同的数据结构，而不是列表。或者将异常和警告记录到不同的列表中。或者使用`logging`模块记录。或者为每个元素添加时间戳。
- en: 'Example: Class-based catcher'
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：基于类的捕获器
- en: We could implement a class-based that would work the same way as our above catcher
    implemented using a closure, but I will leave you this as an exercise. Instead,
    I will show you how to do something a little more interesting, that is, implement
    a catcher which works with the `|` pipe operator.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以实现一个基于类的捕获器，它的工作方式与我们上面使用闭包实现的捕获器相同，但我将把这留给你作为练习。相反，我将向你展示如何做一些更有趣的事情，即实现一个与`|`管道运算符一起工作的捕获器。
- en: 'Pipes aren’t too popular in Python, but they do exist. You can see them in
    the `Pipe` package:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，管道运算符不太流行，但它们确实存在。你可以在`Pipe`包中看到它们：
- en: '[](https://github.com/JulienPalard/Pipe?source=post_page-----81714117da76--------------------------------)
    [## GitHub - JulienPalard/Pipe: A Python library to use infix notation in Python'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[## GitHub - JulienPalard/Pipe: 用于在Python中使用中缀表示法的Python库](https://github.com/JulienPalard/Pipe?source=post_page-----81714117da76--------------------------------)'
- en: Module enabling a sh like infix syntax (using pipes). As an example, here is
    the solution for the 2nd Euler Project…
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块启用类似sh的中缀语法（使用管道）。作为示例，这里是第2个欧拉项目的解决方案……
- en: github.com](https://github.com/JulienPalard/Pipe?source=post_page-----81714117da76--------------------------------)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/JulienPalard/Pipe?source=post_page-----81714117da76--------------------------------)'
- en: While Python is not a functional programming language, it offers various tools
    you can use to at least imitate the functional-programming paradigm. The `Pipe`
    package is a very nice example of how to do it with pipes.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Python不是一种函数式编程语言，但它提供了各种工具，你可以用来至少模拟函数式编程范式。`Pipe`包是一个很好的示例，展示了如何使用管道来实现这一点。
- en: 'We will, however, implement our own pipe operator, by overloading the `|` operator:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们将实现我们自己的管道操作符，通过重载`|`操作符：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let’s use this `catcher`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用这个`catcher`：
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This is the basic usage. Let’s define a couple of helpers, to give us some
    flexibility:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是基本用法。让我们定义几个助手，以便给我们一些灵活性：
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `Run` function can be used instead of the `lambda` syntax (below, you can
    compare the two types of calling a function):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`Run`函数可以用来替代`lambda`语法（下面，你可以比较这两种调用函数的方式）：'
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'But if you use `Print` to, obviously, print, you will see `None`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果你使用`Print`来显然地打印，你会看到`None`：
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: But with `Print`, the catcher *only* prints and does not return anything. You
    can revise it to do both, in which case it could serve as simple debugging tool.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 但是使用`Print`时，捕获器*仅仅*打印而不返回任何东西。你可以修改它，使其同时完成这两项功能，在这种情况下，它可以作为一个简单的调试工具。
- en: 'We’re left with `Ignore`. It does not really ignore the function it’s ran with;
    it ignores any output from this function, catching exceptions and warnings:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们剩下的是`Ignore`。它并不会真正忽略与之运行的函数；它忽略该函数的任何输出，捕获异常和警告：
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`Run`, `Print` and `Ignore` are just three examples, and if you have a free
    minute, think of other examples that could work with this catcher. Note I used
    an atypical — and even non-Pythonic — approach in which I named class instances
    working in a similar way to functions (okay, more or less similar, even less)
    using a capital first letter. I did this to distinguish `Print` from its built-in
    counterpart, `print`. Although the other objects do not have their counterparts
    in the standard Python library, I wanted to use the same naming convention for
    all such objects working with the catcher.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`Run`、`Print`和`Ignore`只是三个示例，如果你有空闲时间，可以考虑其他可以与这个捕获器一起使用的示例。请注意，我使用了一种不典型的——甚至非Pythonic的——方法，其中我用大写字母命名与函数类似的类实例（好吧，更准确地说是类似于函数），以区分`Print`和内置的`print`。虽然其他对象在标准Python库中没有对应物，我还是希望对所有这些与捕获器一起工作的对象使用相同的命名约定。'
- en: I am not saying it’s a good approach — but I thought it was a good idea to show
    you that in some cases, you may try and use atypical syntax. However, if you decide
    to do so, to go against the grain, always think twice if what you’re doing is
    not too atypical for Python. And be prepared to defend your standpoint.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不是说这是一种好的方法——但我认为展示一下在某些情况下你可以尝试使用不典型语法是个好主意。然而，如果你决定这样做，即走非主流路线，请始终三思你所做的是否对Python来说过于不典型。并准备好捍卫你的立场。
- en: Conclusion
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This article intended to show why it’s worth implementing a joint catcher of
    warnings and exceptions, and to demonstrate how to implement some examples. My
    aim wasn’t to implement a tool for you to use in your projects, but rather to
    show you how to implement such tools.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章旨在展示为什么实现一个联合捕获警告和异常的工具是值得的，并演示如何实现一些示例。我的目标不是为你实现一个可以在项目中使用的工具，而是展示如何实现这样的工具。
- en: This does not mean the catchers we discussed are not ready for direct use; they
    are. Nevertheless, I hope that now that you’re equipped with this knowledge, you
    will be able to implement your own catchers, adapted to your projects.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着我们讨论的捕获器还没有准备好直接使用；它们已经准备好了。不过，我希望现在你已经掌握了这些知识后，能够实现适应你项目的自定义捕获器。
- en: If you have any comments or suggestions — for me or for other readers — feel
    free to share them in the comments.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有任何评论或建议——无论是对我还是对其他读者——请随时在评论中分享。
- en: Footnotes
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚注
- en: '¹ You can see a `doctest` flag in the code, since I used it to test the code
    from this article. `doctest` is a standard-library module for documentation testing.
    If you’re interested in learning more about this interesting module, you can do
    so from this article:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: ¹ 你可以在代码中看到一个`doctest`标志，因为我使用它来测试本文中的代码。`doctest`是一个用于文档测试的标准库模块。如果你有兴趣了解更多关于这个有趣模块的内容，可以参考这篇文章：
- en: '[](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----81714117da76--------------------------------)
    [## Python Documentation Testing with doctest: The Easy Way'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----81714117da76--------------------------------)
    [## 使用 doctest 进行 Python 文档测试：简单方法'
- en: doctest allows for documentation, unit and integration testing, and test-driven
    development.
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: doctest 允许进行文档、单元和集成测试，以及测试驱动开发。
- en: towardsdatascience.com](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----81714117da76--------------------------------)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----81714117da76--------------------------------)
- en: 'Thanks for reading. If you enjoyed this article, you may also enjoy other articles
    I wrote; you will see them [here](https://medium.com/@nyggus). And if you want
    to join Medium, please use my referral link below:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你喜欢这篇文章，你也可能会喜欢我写的其他文章；你可以在[这里](https://medium.com/@nyggus)查看。如果你想加入
    Medium，请使用下面的推荐链接：
- en: '[](https://medium.com/@nyggus/membership?source=post_page-----81714117da76--------------------------------)
    [## Join Medium with my referral link - Marcin Kozak'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus/membership?source=post_page-----81714117da76--------------------------------)
    [## 使用我的推荐链接加入 Medium - Marcin Kozak'
- en: Read every story from Marcin Kozak (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Marcin Kozak 和其他成千上万的 Medium 作者的每一篇故事。你的会员费直接支持…
- en: medium.com](https://medium.com/@nyggus/membership?source=post_page-----81714117da76--------------------------------)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@nyggus/membership?source=post_page-----81714117da76--------------------------------)
