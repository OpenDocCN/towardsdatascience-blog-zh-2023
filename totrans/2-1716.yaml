- en: How My Python Scripts Sound More Like a Natural Conversation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/python-code-like-natural-english-ff5cb09e97b9](https://towardsdatascience.com/python-code-like-natural-english-ff5cb09e97b9)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Pipes are an incredibly fantastic technique for more human-friendly coding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://thuwarakesh.medium.com/?source=post_page-----ff5cb09e97b9--------------------------------)[![Thuwarakesh
    Murallie](../Images/44f1a14a899426592bbd8c7f73ce169d.png)](https://thuwarakesh.medium.com/?source=post_page-----ff5cb09e97b9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ff5cb09e97b9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ff5cb09e97b9--------------------------------)
    [Thuwarakesh Murallie](https://thuwarakesh.medium.com/?source=post_page-----ff5cb09e97b9--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ff5cb09e97b9--------------------------------)
    ·5 min read·Mar 22, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5ac47c52ddaf312fc0a3540f558cc343.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Pavel Danilyuk](https://www.pexels.com/photo/close-up-shot-of-white-toy-robot-on-blue-and-pink-background-8294666/)
    from Pexels.
  prefs: []
  type: TYPE_NORMAL
- en: Your code is your documentation too.
  prefs: []
  type: TYPE_NORMAL
- en: People say that great programmers do not add comments to their code. They believe
    that if the code is hard to create, it should also be challenging for others to
    comprehend and alter. Hence they write straightforward code.
  prefs: []
  type: TYPE_NORMAL
- en: Although I don’t advocate for not commenting at all, there’s an element of truth
    in that statement I can’t deny. The code should be readable by anyone!
  prefs: []
  type: TYPE_NORMAL
- en: This is why SQL codes are great. The declarative syntax is far more readable
    than any general-purpose programming language. We know precisely what we select,
    the filters, how we aggregate, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/5-advanced-sql-techniques-for-real-life-projects-f2db9b6680e2?source=post_page-----ff5cb09e97b9--------------------------------)
    [## These 5 SQL Techniques Cover ~80% of Real-Life Projects'
  prefs: []
  type: TYPE_NORMAL
- en: Speed up your SQL learning curve.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/5-advanced-sql-techniques-for-real-life-projects-f2db9b6680e2?source=post_page-----ff5cb09e97b9--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Could we organize our Python scripts for readability? If we could make our python
    code look more declarative, would that improve the code quality? And would it
    be more fun?
  prefs: []
  type: TYPE_NORMAL
- en: I’ve been experimenting with different code styles for some of my projects.
    And using **pipe operators improves readability** to an excellent level. Slowly,
    I’m converting most of my codebase to leverage this technique.
  prefs: []
  type: TYPE_NORMAL
- en: But before jumping into pipes,
  prefs: []
  type: TYPE_NORMAL
- en: What makes your codebase hard to read?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Evolution has made us create acceptable norms in every aspect of our everyday
    tasks. We might not know them consciously, but doing them differently makes life
    hard for us and those around us.
  prefs: []
  type: TYPE_NORMAL
- en: In programming, too, we’ve developed acceptable norms. Software design principles,
    patterns, and code style guides are such norms.
  prefs: []
  type: TYPE_NORMAL
- en: When we follow them in our code, readers can easily figure out the structure
    of our code. Failing to do so creates a hard time for you and the other person.
  prefs: []
  type: TYPE_NORMAL
- en: If these are new, check out SOLID design principles and the PEP 8 style guide.
  prefs: []
  type: TYPE_NORMAL
- en: One of the SOLID principles has particular importance in restructuring your
    code using pipe operators--**The single responsibility principle (SRP)**. It says
    each block of our code(a function, a class, etc.) should handle one and only one
    aspect of our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a code that violates the SRP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The above code queries an API for the latest exchange rate and calculates the
    transaction value in USD. Although this function is trivial, it handles two things
    — retrieving the exchange rate from the external API and computing the value.
  prefs: []
  type: TYPE_NORMAL
- en: There are several practical problems with this approach. Since this isn’t the
    post’s scope, I’ll save it for another post. But most importantly, we can improve
    the code readability by introducing modularity.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s the same code after applying SRP (still not the other principles applied.)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s how you’d use it in your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, anyone can easily read the steps and understand them. The main code block
    is super simple. And whenever they need more detail, the can go into the function
    definitions.
  prefs: []
  type: TYPE_NORMAL
- en: Yet, when the code base grows large, which is the case in most real-life projects,
    keeping track of all the variables created and following along is difficult.
  prefs: []
  type: TYPE_NORMAL
- en: This is where pipes come in handy.
  prefs: []
  type: TYPE_NORMAL
- en: Pipes to boost the readability of our codebase.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you work with shell commands, one of the amazing things is that we can pipe
    the output of one operation to the next. It gives a logical flow to the instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could also restructure our Python code to have that logical flow. We can
    do it with the `pipe` package. We can install it from PyPI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We can now convert our functions into pipe operators. We only have to annotate
    functions with the pipe decorator.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/python-decorators-for-data-science-6913f717669a?source=post_page-----ff5cb09e97b9--------------------------------)
    [## 5 Python Decorators I Use in Almost All My Data Science Projects'
  prefs: []
  type: TYPE_NORMAL
- en: Decorators provide a new and convenient way for everything from caching to sending
    notifications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/python-decorators-for-data-science-6913f717669a?source=post_page-----ff5cb09e97b9--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here’s how we organize and call our functions in sequence.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, note that the pipe operation automatically picks the function’s
    first argument from its previous operation. We don’t pass the `exchange_rate`
    argument to `calculate_transaction_value` function. Instead, we only pass the
    amount.
  prefs: []
  type: TYPE_NORMAL
- en: I intentionally kept this example straightforward. But in real-life projects,
    you’d have longer constructs.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s a modified extract from my recent project (still simplified.)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This code version is easier to comprehend because it’s closer to natural conversations.
    Anyone can understand the steps and parameters that alter the behavior of each
    step. You can show this even to your non-technical stakeholders, and they would
    happily read it as a novel.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to organize our code is to break it into modules and keep them
    in separate files. Then these files are organized in a logical folder structure
    in the file system.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/python-project-structure-best-practices-d9d0b174ad5d?source=post_page-----ff5cb09e97b9--------------------------------)
    [## 7 Ways to Make Your Python Project Structure More Elegant'
  prefs: []
  type: TYPE_NORMAL
- en: Here are the best practices for a manageable, scalable, and easily understandable
    python project structure.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/python-project-structure-best-practices-d9d0b174ad5d?source=post_page-----ff5cb09e97b9--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, only this code snippet lives inside my `__init__.py` file of the
    module. I import the functions from submodules. Thus, the folder structure looks
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As programmers, our first priority is often to get things working. But if that’s
    the only goal, we’re missing the point.
  prefs: []
  type: TYPE_NORMAL
- en: Our code should be easy enough to read and comprehend for others without our
    help or the need to go back and forth with our documentation pages constantly.
  prefs: []
  type: TYPE_NORMAL
- en: After trying several techniques, the one that struck me was pipe operations.
    This post is more about why I think this is great. But I haven’t covered the full
    breadth of pipe operations here.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve already written a comprehensive post about pipe operations. Please check
    it out for more ways to use it.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/pipe-operations-in-python-1e8f8debe26?source=post_page-----ff5cb09e97b9--------------------------------)
    [## Use Pipe Operations in Python for More Readable and Faster Coding'
  prefs: []
  type: TYPE_NORMAL
- en: A handy Python package to save a ton of coding time and improve readability
    with shell-styled pipe operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/pipe-operations-in-python-1e8f8debe26?source=post_page-----ff5cb09e97b9--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading, friend! Say Hi to me on [**LinkedIn**](https://www.linkedin.com/in/thuwarakesh/),
    [**Twitter**](https://twitter.com/Thuwarakesh), and [**Medium**](https://thuwarakesh.medium.com/).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Not a Medium member yet? Please use this link to [**become a member**](https://thuwarakesh.medium.com/membership)
    because, at no extra cost for you, I earn a small commission for referring you.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
