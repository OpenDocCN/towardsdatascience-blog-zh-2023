- en: How My Python Scripts Sound More Like a Natural Conversation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我的Python脚本如何更像自然对话
- en: 原文：[https://towardsdatascience.com/python-code-like-natural-english-ff5cb09e97b9](https://towardsdatascience.com/python-code-like-natural-english-ff5cb09e97b9)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/python-code-like-natural-english-ff5cb09e97b9](https://towardsdatascience.com/python-code-like-natural-english-ff5cb09e97b9)
- en: Pipes are an incredibly fantastic technique for more human-friendly coding
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道是一种非常出色的技术，可以使代码更加人性化。
- en: '[](https://thuwarakesh.medium.com/?source=post_page-----ff5cb09e97b9--------------------------------)[![Thuwarakesh
    Murallie](../Images/44f1a14a899426592bbd8c7f73ce169d.png)](https://thuwarakesh.medium.com/?source=post_page-----ff5cb09e97b9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ff5cb09e97b9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ff5cb09e97b9--------------------------------)
    [Thuwarakesh Murallie](https://thuwarakesh.medium.com/?source=post_page-----ff5cb09e97b9--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://thuwarakesh.medium.com/?source=post_page-----ff5cb09e97b9--------------------------------)[![Thuwarakesh
    Murallie](../Images/44f1a14a899426592bbd8c7f73ce169d.png)](https://thuwarakesh.medium.com/?source=post_page-----ff5cb09e97b9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ff5cb09e97b9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ff5cb09e97b9--------------------------------)
    [Thuwarakesh Murallie](https://thuwarakesh.medium.com/?source=post_page-----ff5cb09e97b9--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ff5cb09e97b9--------------------------------)
    ·5 min read·Mar 22, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ff5cb09e97b9--------------------------------)
    ·5 min 阅读·2023年3月22日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/5ac47c52ddaf312fc0a3540f558cc343.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5ac47c52ddaf312fc0a3540f558cc343.png)'
- en: Photo by [Pavel Danilyuk](https://www.pexels.com/photo/close-up-shot-of-white-toy-robot-on-blue-and-pink-background-8294666/)
    from Pexels.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Pavel Danilyuk](https://www.pexels.com/photo/close-up-shot-of-white-toy-robot-on-blue-and-pink-background-8294666/)
    提供，来自Pexels。
- en: Your code is your documentation too.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码也是你的文档。
- en: People say that great programmers do not add comments to their code. They believe
    that if the code is hard to create, it should also be challenging for others to
    comprehend and alter. Hence they write straightforward code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 人们说伟大的程序员不会给代码添加注释。他们相信，如果代码难以编写，其他人也应该很难理解和修改。因此，他们编写简单明了的代码。
- en: Although I don’t advocate for not commenting at all, there’s an element of truth
    in that statement I can’t deny. The code should be readable by anyone!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我并不主张完全不添加注释，但这句话中确实有一部分真理，我无法否认。代码应该能够被任何人阅读！
- en: This is why SQL codes are great. The declarative syntax is far more readable
    than any general-purpose programming language. We know precisely what we select,
    the filters, how we aggregate, etc.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么SQL代码很棒的原因。声明式语法比任何通用编程语言都要更具可读性。我们清楚地知道我们选择了什么，过滤条件，如何汇总等。
- en: '[](/5-advanced-sql-techniques-for-real-life-projects-f2db9b6680e2?source=post_page-----ff5cb09e97b9--------------------------------)
    [## These 5 SQL Techniques Cover ~80% of Real-Life Projects'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/5-advanced-sql-techniques-for-real-life-projects-f2db9b6680e2?source=post_page-----ff5cb09e97b9--------------------------------)
    [## 这5种SQL技术覆盖了 ~80% 的现实项目'
- en: Speed up your SQL learning curve.
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加快你的SQL学习曲线。
- en: towardsdatascience.com](/5-advanced-sql-techniques-for-real-life-projects-f2db9b6680e2?source=post_page-----ff5cb09e97b9--------------------------------)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/5-advanced-sql-techniques-for-real-life-projects-f2db9b6680e2?source=post_page-----ff5cb09e97b9--------------------------------)
- en: Could we organize our Python scripts for readability? If we could make our python
    code look more declarative, would that improve the code quality? And would it
    be more fun?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能否组织我们的Python脚本以提高可读性？如果我们能使Python代码看起来更声明式，这会改善代码质量吗？而且会更有趣吗？
- en: I’ve been experimenting with different code styles for some of my projects.
    And using **pipe operators improves readability** to an excellent level. Slowly,
    I’m converting most of my codebase to leverage this technique.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直在为我的一些项目尝试不同的代码风格。使用**管道操作符提高了可读性**到一个极致的水平。慢慢地，我将大部分代码库转换为利用这种技术。
- en: But before jumping into pipes,
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但在深入了解管道之前，
- en: What makes your codebase hard to read?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么让你的代码库难以阅读？
- en: Evolution has made us create acceptable norms in every aspect of our everyday
    tasks. We might not know them consciously, but doing them differently makes life
    hard for us and those around us.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 进化使我们在日常任务的各个方面创造了可接受的规范。我们可能没有意识到这些规范，但以不同方式进行会让我们和周围的人生活变得困难。
- en: In programming, too, we’ve developed acceptable norms. Software design principles,
    patterns, and code style guides are such norms.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，我们也制定了可接受的规范。软件设计原则、模式和代码风格指南就是这些规范。
- en: When we follow them in our code, readers can easily figure out the structure
    of our code. Failing to do so creates a hard time for you and the other person.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在代码中遵循这些规范时，读者可以轻松理解我们代码的结构。如果不遵循这些规范，会给你和其他人带来困难。
- en: If these are new, check out SOLID design principles and the PEP 8 style guide.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些是新的，可以查看 SOLID 设计原则和 PEP 8 风格指南。
- en: One of the SOLID principles has particular importance in restructuring your
    code using pipe operators--**The single responsibility principle (SRP)**. It says
    each block of our code(a function, a class, etc.) should handle one and only one
    aspect of our code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用管道操作符重构代码时，**单一职责原则（SRP）**具有特别重要的意义。它指出我们代码的每个块（一个函数、一个类等）应该处理代码中的一个且仅有一个方面。
- en: 'Here’s a code that violates the SRP:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个违反 SRP 的代码示例：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The above code queries an API for the latest exchange rate and calculates the
    transaction value in USD. Although this function is trivial, it handles two things
    — retrieving the exchange rate from the external API and computing the value.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码查询 API 以获取最新的汇率，并计算以美元为单位的交易值。虽然这个函数很简单，但它处理了两个方面——从外部 API 获取汇率和计算值。
- en: There are several practical problems with this approach. Since this isn’t the
    post’s scope, I’ll save it for another post. But most importantly, we can improve
    the code readability by introducing modularity.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法存在几个实际问题。由于这不是文章的范围，我将为另一篇文章保存这些问题。但最重要的是，我们可以通过引入模块化来提高代码的可读性。
- en: Here’s the same code after applying SRP (still not the other principles applied.)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用 SRP 后的代码（仍未应用其他原则）。
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here’s how you’d use it in your code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你在代码中使用它的方式：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, anyone can easily read the steps and understand them. The main code block
    is super simple. And whenever they need more detail, the can go into the function
    definitions.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，任何人都可以轻松阅读这些步骤并理解它们。主要的代码块非常简单。而且每当他们需要更多细节时，可以查看函数定义。
- en: Yet, when the code base grows large, which is the case in most real-life projects,
    keeping track of all the variables created and following along is difficult.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当代码库变得庞大时，这在大多数实际项目中是如此，跟踪所有创建的变量并跟随进展是困难的。
- en: This is where pipes come in handy.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这时管道就派上用场了。
- en: Pipes to boost the readability of our codebase.
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道提升我们代码库的可读性。
- en: If you work with shell commands, one of the amazing things is that we can pipe
    the output of one operation to the next. It gives a logical flow to the instructions.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 shell 命令，其中一个惊人的地方是我们可以将一个操作的输出传递给下一个操作。这为指令提供了逻辑流程。
- en: 'We could also restructure our Python code to have that logical flow. We can
    do it with the `pipe` package. We can install it from PyPI:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以重构我们的 Python 代码，使其具有逻辑流程。我们可以使用 `pipe` 包来做到这一点。我们可以从 PyPI 安装它：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can now convert our functions into pipe operators. We only have to annotate
    functions with the pipe decorator.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以将函数转换为管道操作符。我们只需用管道装饰器标注函数即可。
- en: '[](/python-decorators-for-data-science-6913f717669a?source=post_page-----ff5cb09e97b9--------------------------------)
    [## 5 Python Decorators I Use in Almost All My Data Science Projects'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/python-decorators-for-data-science-6913f717669a?source=post_page-----ff5cb09e97b9--------------------------------)
    [## 我在几乎所有数据科学项目中使用的 5 个 Python 装饰器'
- en: Decorators provide a new and convenient way for everything from caching to sending
    notifications
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 装饰器提供了一种新的便利方式，从缓存到发送通知都可以使用它们。
- en: towardsdatascience.com](/python-decorators-for-data-science-6913f717669a?source=post_page-----ff5cb09e97b9--------------------------------)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/python-decorators-for-data-science-6913f717669a?source=post_page-----ff5cb09e97b9--------------------------------)'
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here’s how we organize and call our functions in sequence.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何按顺序组织和调用函数的示例。
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the above example, note that the pipe operation automatically picks the function’s
    first argument from its previous operation. We don’t pass the `exchange_rate`
    argument to `calculate_transaction_value` function. Instead, we only pass the
    amount.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，请注意管道操作会自动从前一个操作中提取函数的第一个参数。我们并没有将`exchange_rate`参数传递给`calculate_transaction_value`函数。相反，我们只传递了金额。
- en: I intentionally kept this example straightforward. But in real-life projects,
    you’d have longer constructs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我有意将这个示例保持简单。但在实际项目中，你可能会遇到更长的构造。
- en: Here’s a modified extract from my recent project (still simplified.)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我最近项目中修改的摘录（仍然是简化版）。
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This code version is easier to comprehend because it’s closer to natural conversations.
    Anyone can understand the steps and parameters that alter the behavior of each
    step. You can show this even to your non-technical stakeholders, and they would
    happily read it as a novel.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这种代码版本更容易理解，因为它更接近自然对话。任何人都可以理解每个步骤及其改变行为的参数。即使是非技术人员的利益相关者也能愉快地将其作为小说阅读。
- en: The best way to organize our code is to break it into modules and keep them
    in separate files. Then these files are organized in a logical folder structure
    in the file system.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 组织代码的最佳方法是将其拆分为模块并保存在单独的文件中。然后，这些文件在文件系统中以逻辑文件夹结构进行组织。
- en: '[](/python-project-structure-best-practices-d9d0b174ad5d?source=post_page-----ff5cb09e97b9--------------------------------)
    [## 7 Ways to Make Your Python Project Structure More Elegant'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 7 种方法使你的 Python 项目结构更优雅](/python-project-structure-best-practices-d9d0b174ad5d?source=post_page-----ff5cb09e97b9--------------------------------)'
- en: Here are the best practices for a manageable, scalable, and easily understandable
    python project structure.
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以下是可管理、可扩展且易于理解的 Python 项目结构的最佳实践。
- en: towardsdatascience.com](/python-project-structure-best-practices-d9d0b174ad5d?source=post_page-----ff5cb09e97b9--------------------------------)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/python-project-structure-best-practices-d9d0b174ad5d?source=post_page-----ff5cb09e97b9--------------------------------)'
- en: 'Therefore, only this code snippet lives inside my `__init__.py` file of the
    module. I import the functions from submodules. Thus, the folder structure looks
    something like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，只有这段代码存在于模块的`__init__.py`文件中。我从子模块中导入函数。因此，文件夹结构大致如下：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Conclusion
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: As programmers, our first priority is often to get things working. But if that’s
    the only goal, we’re missing the point.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 作为程序员，我们的首要任务往往是让事情运作起来。但如果这是唯一的目标，我们就会错过重点。
- en: Our code should be easy enough to read and comprehend for others without our
    help or the need to go back and forth with our documentation pages constantly.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码应该足够容易阅读和理解，让其他人无需我们的帮助或不断查看文档页面。
- en: After trying several techniques, the one that struck me was pipe operations.
    This post is more about why I think this is great. But I haven’t covered the full
    breadth of pipe operations here.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试了几种技术后，给我留下深刻印象的是管道操作。本文主要讲述为什么我认为这种操作很棒。但这里并没有涵盖管道操作的全部范围。
- en: I’ve already written a comprehensive post about pipe operations. Please check
    it out for more ways to use it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经写了一篇关于管道操作的全面文章。请查看以获取更多使用方法。
- en: '[](/pipe-operations-in-python-1e8f8debe26?source=post_page-----ff5cb09e97b9--------------------------------)
    [## Use Pipe Operations in Python for More Readable and Faster Coding'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 在 Python 中使用管道操作以获得更可读和更快的编码](/pipe-operations-in-python-1e8f8debe26?source=post_page-----ff5cb09e97b9--------------------------------)'
- en: A handy Python package to save a ton of coding time and improve readability
    with shell-styled pipe operations
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个方便的 Python 包，可以节省大量编码时间，并通过类 Unix 风格的管道操作提高可读性。
- en: towardsdatascience.com](/pipe-operations-in-python-1e8f8debe26?source=post_page-----ff5cb09e97b9--------------------------------)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/pipe-operations-in-python-1e8f8debe26?source=post_page-----ff5cb09e97b9--------------------------------)'
- en: Thanks for reading, friend! Say Hi to me on [**LinkedIn**](https://www.linkedin.com/in/thuwarakesh/),
    [**Twitter**](https://twitter.com/Thuwarakesh), and [**Medium**](https://thuwarakesh.medium.com/).
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 感谢阅读，朋友！在 [**LinkedIn**](https://www.linkedin.com/in/thuwarakesh/)、[**Twitter**](https://twitter.com/Thuwarakesh)
    和 [**Medium**](https://thuwarakesh.medium.com/) 上和我打个招呼吧。
- en: ''
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Not a Medium member yet? Please use this link to [**become a member**](https://thuwarakesh.medium.com/membership)
    because, at no extra cost for you, I earn a small commission for referring you.
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 还不是 Medium 会员？请使用这个链接来 [**成为会员**](https://thuwarakesh.medium.com/membership)，因为这样你不会增加额外费用，我将因推荐你而获得少量佣金。
