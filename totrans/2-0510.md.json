["```py\nimport pandas as pd\nloan_data = pd.read_csv(\"loan_data.csv\")\nloan_data.head()\n```", "```py\nimport matplotlib.pyplot as plt\n# Helper function for data distribution\n# Visualize the proportion of borrowers\ndef show_loan_distrib(data):\n  count = \"\"\n  if isinstance(data, pd.DataFrame):\n      count = data[\"not.fully.paid\"].value_counts()\n  else:\n      count = data.value_counts()\n\n  count.plot(kind = 'pie', explode = [0, 0.1], \n\n              figsize = (6, 6), autopct = '%1.1f%%', shadow = True)\n  plt.ylabel(\"Loan: Fully Paid Vs. Not Fully Paid\")\n  plt.legend([\"Fully Paid\", \"Not Fully Paid\"])\n  plt.show()\n\n# Visualize the proportion of borrowers\nshow_loan_distrib(loan_data)\n```", "```py\n# Check column types\nprint(loan_data.dtypes)\n```", "```py\nencoded_loan_data = pd.get_dummies(loan_data, prefix=\"purpose\",   \n\n                                   drop_first=True)\nprint(encoded_loan_data.dtypes)\n```", "```py\nX = encoded_loan_data.drop('not.fully.paid', axis = 1)\ny = encoded_loan_data['not.fully.paid']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, \n\n                                           stratify = y, random_state=2022)\n```", "```py\nX_train_cp = X_train.copy()\nX_train_cp['not.fully.paid'] = y_train\ny_0 = X_train_cp[X_train_cp['not.fully.paid'] == 0]\ny_1 = X_train_cp[X_train_cp['not.fully.paid'] == 1]\ny_0_undersample = y_0.sample(y_1.shape[0])\nloan_data_undersample = pd.concat([y_0_undersample, y_1], axis = 0)\n\n# Visualize the proportion of borrowers\nshow_loan_distrib(loan_data_undersample)\n```", "```py\nsmote = SMOTE(sampling_strategy='minority')\nX_train_SMOTE, y_train_SMOTE = smote.fit_resample(X_train,y_train)\n\n# Visualize the proportion of borrowers\nshow_loan_distrib(y_train_SMOTE)\n```", "```py\nX = loan_data_undersample.drop('not.fully.paid', axis = 1)\ny = loan_data_undersample['not.fully.paid']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, stratify = y, random_state=2022)\nlogistic_classifier = LogisticRegression()\nlogistic_classifier.fit(X_train, y_train)\ny_pred = logistic_classifier.predict(X_test)\nprint(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))\n```", "```py\nfrom sklearn.svm import SVC\nsvc_classifier = SVC(kernel='linear')\nsvc_classifier.fit(X_train, y_train)\n\n# Make Prediction & print the result\ny_pred = svc_classifier.predict(X_test)\n\nprint(classification_report(y_test,y_pred))\n```"]