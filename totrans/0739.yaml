- en: Dijkstra‚Äôs algorithm weighted by travel time in OSM networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/dijkstras-algorithm-weighted-by-travel-time-in-osm-networks-792aa92e03af](https://towardsdatascience.com/dijkstras-algorithm-weighted-by-travel-time-in-osm-networks-792aa92e03af)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Finding the fastest and shortest path with the OSMNX 1.6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://bryanvallejo16.medium.com/?source=post_page-----792aa92e03af--------------------------------)[![Bryan
    R. Vallejo](../Images/fd92974f57c72875cc133a2c959d64ca.png)](https://bryanvallejo16.medium.com/?source=post_page-----792aa92e03af--------------------------------)[](https://towardsdatascience.com/?source=post_page-----792aa92e03af--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----792aa92e03af--------------------------------)
    [Bryan R. Vallejo](https://bryanvallejo16.medium.com/?source=post_page-----792aa92e03af--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----792aa92e03af--------------------------------)
    ¬∑7 min read¬∑Oct 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/692de08c2ac0d0d9fef8304a5bad06dc.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Fastest route (red) and Shortest route (orange) in Morocco
    example
  prefs: []
  type: TYPE_NORMAL
- en: The Shortest Path (Dijkstra‚Äôs) algorithm can be applied in OSM networks like
    driving, bike, and pedestrian, to find the most optime route between origin and
    destination. But, the algorithm calculates in the network the shortest routes
    based on distance and it does not really mean the most optime route. The distance
    in a road network can be relative when we consider the speed of the roads. Definitely,
    the most optime route between the two points might be the shortest if the road
    network has equal speed on all roads. In the case we compare the speed in highways
    with urban streets we will refactor this idea understanding that the most optime
    route is the fastest.
  prefs: []
  type: TYPE_NORMAL
- en: ‚ÄúThe distance in a road network can be relative when we consider the speed of
    the roads‚Äù
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Thanks to the Python library OSMNX, it is possible to add speed to different
    kinds of roads at the global level and calculate the *Travel times* between nodes
    in the OSM network. This allows the Python library to process the Shortest Path
    algorithm weighted by *Travel times*.
  prefs: []
  type: TYPE_NORMAL
- en: This practice is the continuation of a previous tutorial that used the Shortest
    Path algorithm to calculate the shortest route between two locations in Morocco.
  prefs: []
  type: TYPE_NORMAL
- en: Shortest route in OSM network in Morocco
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](/shortest-path-dijkstras-algorithm-step-by-step-python-guide-896769522752?source=post_page-----792aa92e03af--------------------------------)
    [## Shortest Path (Dijkstra‚Äôs) algorithm step-by-step Python guide'
  prefs: []
  type: TYPE_NORMAL
- en: An update using OSMNX 1.6 and a long-distance path
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/shortest-path-dijkstras-algorithm-step-by-step-python-guide-896769522752?source=post_page-----792aa92e03af--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Access coding tutorials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are not yet a member of [Medium](https://medium.com/u/504c7870fdb6?source=post_page-----792aa92e03af--------------------------------)
    you will be required to subscribe to access the stories. You can follow more coding
    tutorials and support my work by joining using my personal link. Be part of this
    coding journey.
  prefs: []
  type: TYPE_NORMAL
- en: Join here üëâ [https://bit.ly/3yjLsSL](https://bit.ly/3yjLsSL)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: OSM data license
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Open Street Map data.** Licensed under [Open Data Commons Open Database License
    (ODbl)](https://opendatacommons.org/licenses/odbl/) or attribution license. Users
    are free to copy, distribute, transmit, and adapt the data as long as it is attributed
    to the author like ¬© [OpenStreetMap](https://www.openstreetmap.org/copyright)
    contributors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next steps will guide the process for applying the Shortest Path using the
    travel times. We will compare the fastest route and the shortest route to understand
    how the travel time and length changed.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we will use more functions from OSMNX that improve the results like `utils_graph.route_to_gdf()`
    , and for computing *Travel times* `add_edge_speeds()` and `add_edge_travel_times()`
    .
  prefs: []
  type: TYPE_NORMAL
- en: Here is a quick view of the origin and destination suggested by [Hanae](https://medium.com/u/3b913af53dd0?source=post_page-----792aa92e03af--------------------------------).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dd1ded2472ba3b204998b6b2c29a83e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Origin and destination locations.
  prefs: []
  type: TYPE_NORMAL
- en: Coding practice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Start getting the libraries we need.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 1\. Define origin and destination as GeoDataFrames
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Start adding the coordinates and creating a new GDF using Geopandas.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Get the Graph network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we have long-distance routes it is recommended to use the *envelope* function
    to get the Graph.
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs use a previously defined function
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Apply and visualize
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/86ce92fc96ba9311953cbbad921a39d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Graph with road network the contains origin and destination
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Adding Travel times to road network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will add the travel times using the function `add_edge_speeds()` that imputes
    the speed in km/h. The imputation adds mean max speed values of roads, per highway
    type. Then, we calculate the *travel times* using the function `add_edge_travel_time()`
  prefs: []
  type: TYPE_NORMAL
- en: We will keep the same variable *graph*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the case you want to modify the highway classes you can pass a dictionary
    based on local speed values
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, let‚Äôs give a quick view of the travel times by highway type getting the
    edges classes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e6d02f38607c6f55db56f06ffa1277c3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Speed and travel times in road network
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Find the closest nodes of Origin and Destination
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Get the closest nodes that are part of the network using the origin and destination
    coordinates. The function is `nearest_nodes()` in this new version 1.6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Then, we apply the shortest path algorithm between nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Calculate the Shortest Path using travel times
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to use the function `shortest_path()` to calculate our route. We
    will use both the distance and time to compare how different the routes are with
    the parameter `weight`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will give back a bunch of node‚Äôs code that are part of the route.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/93c60e89b3cfd82895cb495dd0e3f234.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Route‚Äôs nodes
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Create routes from nodes (one-line-code)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The osmnx has implemented a function `utils_graph.route_to_gdf()` that transforms
    the nodes to GeoDataFrame in just one line. Nicely, we can get the columns of
    interest on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 7\. Quick comparison (time and distance)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will compare both routes in travel time and length.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Print the values
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '*Fastest Route: Time 5.42 hours, Distance 378.93 km'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Shortest Route: Time 5.6 hours, Distance 362.84 km*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The results say that the fastest route is longer. As expected, the distance
    gets relative when the speed is involved.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Save files and visualize
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Save network and routes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In QGIS
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1fe4f787061be2e19a0907d58ce2108d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Fastest route (orange) and shortest route (yellow)
  prefs: []
  type: TYPE_NORMAL
- en: In Matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4c910cbf3a0c59ef031d78ac5e8bf926.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Faster route (red) and shortest route (yellow)
  prefs: []
  type: TYPE_NORMAL
- en: Known improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The new function used from osmnx `utils_graph.route_gdf()` creates a clean route.
    It uses the road segments and not only the union between nodes and the new path
    overlaps the OSM road network.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fcbca57f332951bddbf520786144db7d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Route overlaps road network.
  prefs: []
  type: TYPE_NORMAL
- en: '**Conclusion**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Shortest Path algorithm can be calculated using road speeds with the OSMNX
    function `add_edge_speeds()` and `add_edge_travel_times().` This different approach
    showed that the shortest path is relative if we implement the speed (travel time)
    in the calculation of the route. As expected, the fastest route ended up being
    longer than the shortest route but it reached its destination in the shortest
    travel time.
  prefs: []
  type: TYPE_NORMAL
- en: The improvement in the generation of the route overlapping the road network
    makes the calculation of distances and travel times more accurate in studies of
    accessibility and proximity at the urban-regional level.
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks to the material of [Geoff Boeing](https://medium.com/u/c490d872f7a?source=post_page-----792aa92e03af--------------------------------)
    I was able to explore these features and understand the functions of OSMNX.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to reach me for questions or customized analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Bryan R. LinkedIn*](https://www.linkedin.com/in/bryanrvallejo/)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
