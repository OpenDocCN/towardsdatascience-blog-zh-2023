- en: 'Optimization: Capacitated Facility Location Problem in Python'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/optimization-capacitated-facility-location-problem-in-python-57c08f259fe0](https://towardsdatascience.com/optimization-capacitated-facility-location-problem-in-python-57c08f259fe0)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Find the optimal number and location of warehouses to reduce costs and meet
    demand
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://nicolo-albanese.medium.com/?source=post_page-----57c08f259fe0--------------------------------)[![Nicolo
    Cosimo Albanese](../Images/9a2c26207146741b58c3742927d09450.png)](https://nicolo-albanese.medium.com/?source=post_page-----57c08f259fe0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----57c08f259fe0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----57c08f259fe0--------------------------------)
    [Nicolo Cosimo Albanese](https://nicolo-albanese.medium.com/?source=post_page-----57c08f259fe0--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----57c08f259fe0--------------------------------)
    ·12 min read·Feb 28, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cfab4658e033226dcba6aac3728625d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: Table of contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Introduction](#f74a)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Problem statement](#bd29)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Implementation](#7bcf)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3.1\. [The dataset](#5775)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3.2\. [Customers, warehouses and demand](#11c3)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3.3\. [Supply and fixed costs](#6211)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3.4\. [Transportation costs](#9569)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3.5\. [Optimization](#35b1)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Explore the results](#1790)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Conclusions](#280b)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 1\. Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Facility Location Problems (FLPs)* are classical optimization tasks. They
    aim at determining the best among potential sites for warehouses or factories.'
  prefs: []
  type: TYPE_NORMAL
- en: Warehouses may or may not have a limited capacity. This distinguishes the *capacitated
    (CFLP)* from the *uncapacitated (UFLP)* variants of the problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'The business goal to find the set of warehouse locations that minimize the
    costs. The original problem definition by [Balinski (1965)](https://doi.org/10.1287/mnsc.12.3.253)
    minimizes the sum of two (annual) cost voices:'
  prefs: []
  type: TYPE_NORMAL
- en: Transportation costs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warehouse fixed costs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transportation costs account for the expenses generated by reaching customers
    from the warehouse location. The warehouse fixed cost is location-specific. It
    may include, for instance, voices such as rent, taxes, electricity and maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: '*Facility location* is a well known subject and has a fairly rich literature.
    As such, many variants of the problem exist, as well as approaches. This post
    introduces the classical CFLP formulation and shares a practical Python example
    with [PuLP](https://coin-or.github.io/pulp/).'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Problem statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The goal of CFLP is to determine the number and location of warehouses that
    will meet the customers demand while reducing fixed and transportation costs.
    Therefore, we can pose the problem as the minimization of the following objective
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9c0a8efc2f9887c0a307944ff6ec2b5a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the previous expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '`N` is a set of customer locations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`M` is a set of candidate warehouse locations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fⱼ` represent the annual fixed cost for warehouse `j`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tᵢⱼ` represents the cost of transportation from warehouse `j` to customer
    `i`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xᵢⱼ` is the number of units delivered from warehouse `j` to customer `i`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`yⱼ` is a binary variable `yⱼ ∈ {0,1}`, indicating whether the warehouse should
    be built in the location `j` (`yⱼ = 1`) or not (`yⱼ = 0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us now consider the addition of **constraints** to the objective function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we are modeling a *capacitated* problem, each facility `j` can supply
    an annual maximum capacity `Cⱼ`. Therefore, the number of units delivered to a
    customer `xᵢⱼ` cannot be greater than this value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/619f8e66ba943a0d54d18229d931f6fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The yearly units delivered from warehouse `j` to customer `i` must range between
    zero and `dᵢ`, the annual demand from customer `i`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dc1f43e3b37f06046374445cb0c74eb6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And last but not least, we must meet customers’ demand. In this example, we
    impose that each warehouse serving a customer location must fully meet its demand:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7524e38712e10b74bad3aa3bf49ca791.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In conclusion, we can define the problem as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4c21c3e7bec3aefa4722b4abc564bfba.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us import the needed libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NumPy`, `Pandas` for data manipulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`math` for specific mathematical functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GeoPandas` for geospatial representations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Matplotlib` for data visualization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PuLP` for optimization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 3.1\. The dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We settle our optimization problem in Italy.
  prefs: []
  type: TYPE_NORMAL
- en: The starting dataset is available on [simplemaps.com](https://simplemaps.com/).
    We may download the input csv file [here](https://simplemaps.com/data/it-cities)
    and use it [freely for personal and commercial use](https://simplemaps.com/data/it-cities)
    under the [MIT license](https://opensource.org/license/mit/).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We are interested in the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`city`: name of the town;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lat`: latitude;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lng`: longitude;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`population`: number of inhabitants;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`capital`: indicates whether the city is a chief town or administrative center;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`admin_name`: name of the [highest level administration region](https://en.wikipedia.org/wiki/Regions_of_Italy).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.2\. Customers, warehouses and demand
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When creating customers, facility and demand, we assume that:'
  prefs: []
  type: TYPE_NORMAL
- en: Customers are a fraction (30%) of the input cities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facilities can be established only in administrative centers. As a starting
    condition, we assume we could build warehouses in 80% of the Italian chief towns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Demand is constant and known through the year. It is equal to a fraction (2%)
    of the population of the customers’ towns plus an error term.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '***Note***: in the online dataset, the region name `Valle d''Aosta` contains
    a typographic (curved) apostrophe (U+2019) instead of the typewriter (straight)
    apostrophe (U+0027). Please consider it if reproducing this code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Although it is not necessary to the optimization task, we may want to observe
    our locations on a map. `geopandas` simplifies this task. One may easily create
    a `GeoDataFrame` enriched with geospatial information using the `points_from_xy`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can access a map of Italy through `geopandas` and plot customers and potential
    warehouse locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/cf2ebf7f62c1bfa7c68e5327a8ec47f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can observe the average demand for each of the 20 Italian regions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/afbb1c9fba6984e3305d22ecd4e14fc3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'To easily leverage `PuLP` later on, let us store demand data in a dictionary
    of `customer-demand` pairs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 3.3\. Supply and fixed costs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To model supply and fixed costs, we assume that:'
  prefs: []
  type: TYPE_NORMAL
- en: Each warehouse can meet a maximum yearly supply equal to 3 times the average
    regional demand.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each warehouse has a constant annual fixed cost of 100.000,00 €, independently
    from its location.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As we did for the demand, we store supply and fixes costs in dictionaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 3.4\. Transportation costs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The estimate of transportation costs requires:'
  prefs: []
  type: TYPE_NORMAL
- en: the distance between the different locations, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a cost function per unit of distance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can approximate the distance between two locations on a spherical surface
    using the [Haversine formula](https://en.wikipedia.org/wiki/Haversine_formula):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us try it on two cities:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Milano (latitude: 45.4654219, longitude: 9.18854)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bergamo (latitude: 45.695000, longitude: 9.670000)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We obtain a distance of 45.5 Km. Unfortunately, this measure does not correspond
    to the one we would see, for instance, on a car navigation system, as we do not
    take routes into account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3cb6b800cae6c01dcbf774419874b0f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Haversine and route distance between two cities, Milano and Bergamo. Image by
    author.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, we can use our estimate as a reasonable approximation for our
    task.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to convert distances in a measure of cost. At the moment of
    this writing, the average price of gasoline in Italy is 1.87 €/L ([source](https://www.cargopedia.net/europe-fuel-prices)).
    The average consumption of an EURO VI truck is around 0.38 L/Km ([source](https://www.transportenvironment.org/wp-content/uploads/2021/07/2015_06_Comparing_US_EU_truck_fuel_economy_explantory_note_Final.pdf)).
    With a simple, yet reasonable, approximation, we can estimate an average cost
    of 0.71 € per Km traveled on the Italian soil:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now calculate the traveling costs for each warehouse-customer pair and
    store them in a dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 3.5\. Optimization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us remind the optimization problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4c21c3e7bec3aefa4722b4abc564bfba.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can define the two decision variables `xᵢⱼ` and `yⱼ`, the objective function
    and constraints as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can solve the optimization problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We can check the outcome as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now interested in exploring the decision variables: how many warehouses
    do we need? In what locations?'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Explore the results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At first, let us consider the business goal: minimize costs. We can check the
    value assumed by the objective function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This is the minimum possible cost we can achieve under the given constraints.
    Any other choice in the number or location of the warehouses would lead to a higher
    value of the objective function.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can access the decision variables through the `varValue` property. For example,
    we can see the value assumed by `yⱼ` for `j = Warehouse 1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'As `yⱼ = 1`, we should establish a warehouse in that location. We can easily
    manipulate the variable and count the number of needed facilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: It is sufficient to **build just 32 of the initially budgeted 91 sites**. The
    35.1% (32 / 91) of all potential warehouses is enough to meet the demand under
    the given constraints.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can save the decision variable in the initial data frame and observe the
    chosen locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1990033c061c90853e9dd02e58b62179.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6f255dd097ebbb9b78b353b1b627aa65.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can iterate over the decision variable `xᵢⱼ` and find the customers
    served by each warehouse in the optimized solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c757c5e2dc9984a46a3e10576bc8ec0c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this post, we introduced a classical optimization challenge: the Capacitated
    Facility Location Problem (CFLP). We described its derivation and shared a practical
    Python example. In particular, since we started with a raw dataset of geographical
    locations, we covered all the necessary passages and assumptions needed to frame
    and solve the problem.'
  prefs: []
  type: TYPE_NORMAL
