- en: 5 easy Python features you can start using today to write better code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5 个简单的 Python 特性，你可以立即开始使用以编写更好的代码
- en: 原文：[https://towardsdatascience.com/5-easy-python-features-you-can-start-using-today-to-write-better-code-b62e21190633](https://towardsdatascience.com/5-easy-python-features-you-can-start-using-today-to-write-better-code-b62e21190633)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/5-easy-python-features-you-can-start-using-today-to-write-better-code-b62e21190633](https://towardsdatascience.com/5-easy-python-features-you-can-start-using-today-to-write-better-code-b62e21190633)
- en: I’ve been using Python for 8+ years. Here are a few Python features I love,
    which makes your code refreshing and efficient.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我使用 Python 已经超过 8 年了。以下是我喜欢的一些 Python 特性，它们能使你的代码焕然一新且高效。
- en: '[](https://thushv89.medium.com/?source=post_page-----b62e21190633--------------------------------)[![Thushan
    Ganegedara](../Images/3fabfa37132f7d3a9e7679c3b8d7e061.png)](https://thushv89.medium.com/?source=post_page-----b62e21190633--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b62e21190633--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b62e21190633--------------------------------)
    [Thushan Ganegedara](https://thushv89.medium.com/?source=post_page-----b62e21190633--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://thushv89.medium.com/?source=post_page-----b62e21190633--------------------------------)[![Thushan
    Ganegedara](../Images/3fabfa37132f7d3a9e7679c3b8d7e061.png)](https://thushv89.medium.com/?source=post_page-----b62e21190633--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b62e21190633--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b62e21190633--------------------------------)
    [Thushan Ganegedara](https://thushv89.medium.com/?source=post_page-----b62e21190633--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b62e21190633--------------------------------)
    ·7 min read·Jul 19, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b62e21190633--------------------------------)
    ·阅读时间 7 分钟·2023年7月19日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/41822c8a9c950dbeb77a5353e33dc731.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/41822c8a9c950dbeb77a5353e33dc731.png)'
- en: Photo by [Chris Ried](https://unsplash.com/@cdr6934?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/ieic5Tq8YMk?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Chris Ried](https://unsplash.com/@cdr6934?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，发布在 [Unsplash](https://unsplash.com/photos/ieic5Tq8YMk?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: You have to admit, seeing a comment like “*This is super clean* 😎” or “*Didn’t
    know this could be done this way*” on your code or pull request fills you with
    a wonderful feeling. Personal experience has taught me, embracing good software
    engineering principles and making the most of the existing language functionality
    is the recipe for good code that others will feel grateful for.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须承认，看到代码或拉取请求上出现类似“*这真是超级干净* 😎”或“*没想到可以这样做*”的评论，会让你感到非常愉悦。个人经验告诉我，拥抱良好的软件工程原则并充分利用现有的语言功能，是编写出别人会感激的好代码的秘诀。
- en: As an MLE I use Python day in and day out. Python is a great option for ML practitioners
    due to its low barrier to entry combined with the massive ecosystem of scientific
    tooling.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名 MLE，我每天都在使用 Python。由于其低门槛和庞大的科学工具生态系统，Python 是机器学习从业者的一个极佳选择。
- en: This means that, an individual with little to no software engineering knowledge
    can quickly start using Python.
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这意味着，几乎没有软件工程知识的个人也可以快速开始使用 Python。
- en: This last statement can be said in two different tones of voice; positive or
    negative (try it!).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这最后一句话可以用两种不同的语气来表达：积极的或消极的（试试看！）。
- en: It may look like it’s a blessing at first, but in the grand scheme of things,
    the lack of the confinements of software engineering principles (e.g. Types, Objects)
    dissuade the engineers (MLE) or scientists (DS/AS) from writing good code (Trust
    me, we already got a bad reputation among software engineers as not-so-good engineers).
    This inevitably leads to unreadable, unmaintainable and untestable spaghetti code
    in most cases. And worse, one-day it becomes some unsuspecting victim’s worst
    nightmare to reuse this evil code. And you may even see a domino effect, where
    code built on top of bad code leads to … more bad code. Ultimately, this could
    even lead to organizational headaches down the track.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 起初这可能看起来是个福音，但从整体来看，缺乏软件工程原则（例如类型、对象）的约束使工程师（MLE）或科学家（DS/AS）不愿编写良好的代码（相信我，我们在软件工程师中已经有了不太好的声誉）。这不可避免地会导致大多数情况下的代码不可读、不可维护和无法测试。而更糟糕的是，有一天它会成为某个毫无防备的受害者最糟糕的噩梦，因为要重复使用这段恶劣的代码。你可能还会看到一种多米诺效应，即在糟糕代码之上构建的代码会导致……更多糟糕的代码。最终，这甚至可能会导致组织上的头痛。
- en: The bottom line is, doing something in Python is easy, but doing something the
    right way in Python is difficult. After 8+ years grappling with Python, I’m still
    learning different (and better) ways to improve my code. I’ve been blessed with
    good software engineers that would constructively criticize my code, when I do
    things in inefficient manner. Count your blessings if you have the same support.
    Here, I’m going to share a few levers you can pull to take your Python skills
    to the next level.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之，在 Python 中做事情很简单，但以正确的方式做事情却很困难。在与 Python 搅斗了 8 年之后，我仍在学习不同（和更好）的方式来改善我的代码。我很幸运有好的软件工程师会建设性地批评我的代码，当我以低效的方式做事时。如果你有同样的支持，那是你的幸运。在这里，我将分享一些可以提升你
    Python 技能的方法。
- en: 1\. Dataclasses help to remove the clutter
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 数据类有助于清除杂乱
- en: Say you want to manage a list of students with their heights. You may use a
    list of tuples to do this.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 比如你想管理一个学生及其身高的列表。你可以使用元组的列表来做到这一点。
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: But what if you want to add other attributes like the weight, grade and gender
    later on? There’s no possible way for you to use the above data structure without
    getting a headache and making tons of mistakes. You may use a dictionary, but
    still it’s clunky. A better solution is, using `dataclasses`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你后来想添加其他属性，如体重、成绩和性别怎么办？如果不头痛并犯很多错误，你无法使用上述数据结构。你可以使用字典，但仍然显得笨重。更好的解决方案是使用
    `dataclasses`。
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: So much cleaner! Then you simply instantiate a bunch of `Student` objects.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这样清爽多了！然后你只需实例化一堆 `Student` 对象。
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Then you can access attributes with, `students[0].name` like syntax. No more
    relying on obscure knowledge like, name is at `0th` position or using error-prone
    string keys (should you use a dictionary). There’s many other cool things you
    can do with `dataclasses`. Such as,
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以使用类似 `students[0].name` 的语法来访问属性。无需再依赖模糊的知识，例如名称在 `0th` 位置，或使用容易出错的字符串键（如果你使用字典的话）。你可以使用
    `dataclasses` 做很多其他很酷的事情。例如，
- en: Make objects immutable (By using `@dataclasses.dataclass(frozen=True`)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使对象不可变（通过使用 `@dataclasses.dataclass(frozen=True)`）
- en: Defining getters and setters
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义 getter 和 setter
- en: Use of the `dataclasses.field` for additional support for an attribute
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `dataclasses.field` 为属性提供额外支持
- en: Convert to a dictionary (`.asdict()`) or tuple (`.astuple()`) for serialization
    and for compatibility reasons.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将对象转换为字典（`.asdict()`）或元组（`.astuple()`）以进行序列化和兼容性处理。
- en: You can read more about `dataclasses` [here](https://docs.python.org/3/library/dataclasses.html).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [这里](https://docs.python.org/3/library/dataclasses.html) 阅读更多关于 `dataclasses`
    的内容。
- en: 2\. Compare in Python with style
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 使用风格在 Python 中进行比较
- en: Reduction and sorting is such an important part of any machine learning project.
    You probably are using `min` , `max` or `sorted` functions on lists of simple
    data types e.g. `str`, `float`, etc. But did you know that there’s a neat trick
    that increases the purview of the problems that can be solved using these basic
    functions?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 减少和排序是任何机器学习项目中一个重要的部分。你可能会在简单数据类型的列表（例如 `str`、`float` 等）上使用 `min`、`max` 或 `sorted`
    函数。但你是否知道，有一个巧妙的技巧可以扩展这些基本函数所能解决的问题的范围？
- en: You can use `min` , `max` and `sorted` to solve problems creatively using a
    special argument called `key` . The key allows you to define the logic to extract
    a “*comparison key*” from each item in your iterable.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `min`、`max` 和 `sorted` 创造性地解决问题，通过一个名为 `key` 的特殊参数。这个键允许你定义逻辑，从可迭代对象中的每个项目中提取一个“*比较键*”。
- en: Say you wanted to sort the following list of student heights,
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 比如你想要排序以下的学生身高列表，
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Even cooler, say you had a `dataclasses.dataclass` instead of this.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 更酷的是，假设你有一个 `dataclasses.dataclass` 而不是这个。
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Looks slick. Perhaps you want to find the student with the maximum height.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很酷。也许你想找出身高最高的学生。
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Did you know that, you could even simulate the `argmax` operation in plain Python?
    For those who don’t know, the `argmax` gives the index of the maximum value in
    a list/array. Again such an imperative computation in lot of algorithms.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道吗，你甚至可以用纯 Python 模拟 `argmax` 操作？对于那些不知道的人，`argmax` 给出列表/数组中最大值的索引。这在很多算法中都是一种强制计算。
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There’s been many occasions in my life where I was writing many lines of code,
    which I could’ve achieved by simply paying more attention to the key.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾多次遇到过这样的问题：写了很多行代码，而这些代码本来可以通过更关注关键点来完成。
- en: 3\. Make defaultdict your default
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 让 defaultdict 成为你的默认选择
- en: When using dictionaries, there’s a handy variant of the standard dictionary
    that may make your life easier. Say you want to manage how stock prices changed
    over 3 years. Assume the original format is the following.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字典时，有一个方便的变体可能会让你的生活更轻松。假设你要管理 3 年内股票价格的变化。假设原始格式如下。
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And you want to convert this to a dictionary. You can do:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你还想把这个转换为字典。你可以这样做：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This gets the job done, no doubt. But here’s a more elegant version of the same
    code using `defaultdict`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码确实完成了任务。但这里有一个使用 `defaultdict` 的更优雅版本。
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Woah, the code is much cleaner this way. No more worrying about whether the
    value is already instantiated or not. And it really shows you know your Python
    and data structures.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，代码这样会更简洁。无需再担心值是否已被实例化。这真的显示了你对 Python 和数据结构的了解。
- en: 4\. Say “I do” to the itertools
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 对 itertools 说“我愿意”
- en: '`itertools` is a built-in Python library for performing advance iterating over
    data structures with easy.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`itertools` 是一个内置的 Python 库，用于轻松地对数据结构进行高级迭代。'
- en: 'You may have had times in your life, where you want to iterate multiple lists
    to create a single list. In Python you might do:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在生活中遇到过需要迭代多个列表以创建一个单一列表的情况。在 Python 中你可能会这样做：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Would you believe that, with `itertools`, it is a one-liner?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你相信吗，用 `itertools` 这只需一行代码？
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Say you want to remove students that are less than 170cm tall. With `itertools`
    that’s another one liner.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 比如你想要移除身高低于 170cm 的学生。使用 `itertools` 这也是一行代码。
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: There are many other useful functions such as `accumulate`, `islice`, `starmap`,
    etc. You can checkout more [here](https://docs.python.org/3/library/itertools.html).
    Use `itertools`, rather than reinventing the wheel that leads to unwieldy and
    inefficient code. By using `itertools` you get the added benefit of speed, as
    it has efficient CPython based implementation of its functionality underneath.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他有用的函数，比如 `accumulate`、`islice`、`starmap` 等。你可以在[这里](https://docs.python.org/3/library/itertools.html)查看更多。使用
    `itertools`，而不是重新发明轮子，这样可以避免冗长和低效的代码。通过使用 `itertools`，你还能享受到速度上的优势，因为它在底层有高效的
    CPython 实现。
- en: 5\. Packing/Unpacking arguments
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 打包/解包参数
- en: 'Packing and unpacking is achieved via the star (`*`) and double star (`**`)
    operators. The easiest way to understand this concept is using functions. You
    can define a function with packed arguments or unpacked arguments. Let’s say we
    define the following two functions:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 打包和解包是通过星号 (`*`) 和双星号 (`**`) 操作符实现的。理解这一概念最简单的方法是使用函数。你可以定义一个带有打包参数或解包参数的函数。假设我们定义以下两个函数：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When calling `f1` you can only pass 3 parameters in, where `f2` can accept
    an arbitrary number of parameters, which are packed to a tuple `args`. So you’d
    call:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用 `f1` 时你只能传递 3 个参数，而 `f2` 可以接受任意数量的参数，这些参数被打包成一个元组 `args`。所以你会这样调用：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: All of these would work. If you want dictionary, where the key is the argument
    and the value is the parameter passed, you use the double star operator.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都可以工作。如果你想要一个字典，其中键是参数，值是传递的参数，你可以使用双星号操作符。
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To see how much better this is, here’s your alternative for writing `f2` would
    be:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要看看这有多好，这里是写 `f2` 的替代方案：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: That double parentheses is already giving me shivers! Using `*args` is much
    sweeter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 那双重括号已经让我不寒而栗了！使用 `*args` 甜美得多。
- en: '`zip()` is a real-life function that accepts an arbitrary number of iterables.
    It creates several new lists by taking the first item of each iterable, the second
    item from each iterable and so on. For the following example, `zip()` lets you
    interchange between the two formats;'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`zip()` 是一个实际的函数，它接受任意数量的可迭代对象。它通过取出每个可迭代对象的第一个项、第二个项，以此类推，创建几个新的列表。对于以下示例，`zip()`
    让你可以在两种格式之间互换；'
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is a surprisingly common necessity when you work with data. Remember our
    student example above? Say we just needed the sorted list of student names. we
    can simply zip the tuples to two lists.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当你处理数据时，这是一种意外常见的需求。记得我们上面的学生示例吗？假设我们只需要排序后的学生姓名列表。我们可以简单地将元组 zip 成两个列表。
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: It’s bringing the layout of data from format 1 to format 2 and discarding the
    second list (as that will contain all the heights).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是将数据从格式 1 布局到格式 2，并丢弃第二个列表（因为它将包含所有身高数据）。
- en: So, if you’re developing a function that needs to work with an arbitrary number
    of argument, use argument packing. It’s more elegant than passing a tuple or a
    dictionary.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在开发一个需要处理任意数量参数的函数，可以使用参数打包。这比传递一个元组或字典要优雅得多。
- en: Conclusion
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Those are 5 things that you can do differently next time you write an ML model
    in Python. Sticking with good software engineering principles and language standards
    gives a common ground for a group of engineers and scientists to work cohesively
    and iterate rapidly. By choosing to become better software engineers, you’ll also
    be lighting the way for your colleagues to do the same, which will enable friction-less
    collaborations among individuals and teams.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是你下次在 Python 中编写 ML 模型时可以做的 5 件不同的事。坚持良好的软件工程原则和语言标准为一组工程师和科学家提供了共同的基础，从而使他们能够协同工作并快速迭代。通过选择成为更好的软件工程师，你也将为你的同事照亮前进的道路，这将实现个人和团队之间无摩擦的合作。
- en: If you enjoyed this story, feel free [subscribe](https://thushv89.medium.com/membership)
    to Medium, and you will get notifications to fresh content from me, as well as
    unlock full access to thousands of engaging stories from other authors.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这个故事，欢迎[订阅](https://thushv89.medium.com/membership) Medium，你将获得来自我的新内容通知，并且解锁对其他作者成千上万精彩故事的完全访问。
- en: '[](https://thushv89.medium.com/membership?source=post_page-----b62e21190633--------------------------------)
    [## Join Medium with my referral link - Thushan Ganegedara'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 使用我的推荐链接加入 Medium - Thushan Ganegedara](https://thushv89.medium.com/membership?source=post_page-----b62e21190633--------------------------------)'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为 Medium 的会员，你的部分会员费将直接支持你阅读的作者，同时你也可以完全访问每一个故事……
- en: thushv89.medium.com](https://thushv89.medium.com/membership?source=post_page-----b62e21190633--------------------------------)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[thushv89.medium.com](https://thushv89.medium.com/membership?source=post_page-----b62e21190633--------------------------------)'
