- en: AutoML — Let Machine Learning Give Your Model Selection a Jump-Start
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/automl-let-machine-learning-give-your-model-selection-a-jump-start-a318de373890](https://towardsdatascience.com/automl-let-machine-learning-give-your-model-selection-a-jump-start-a318de373890)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Leveraging AutoML to increase productivity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@fmnobar?source=post_page-----a318de373890--------------------------------)[![Farzad
    Mahmoodinobar](../Images/2d75209693b712300e6f0796bd2487d0.png)](https://medium.com/@fmnobar?source=post_page-----a318de373890--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a318de373890--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a318de373890--------------------------------)
    [Farzad Mahmoodinobar](https://medium.com/@fmnobar?source=post_page-----a318de373890--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a318de373890--------------------------------)
    ·6 min read·Feb 13, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/70f880341c0148024182fe0ad6b008b3.png)'
  prefs: []
  type: TYPE_IMG
- en: Human vs. Machine, by [DALL.E 2](https://openai.com/dall-e-2/)
  prefs: []
  type: TYPE_NORMAL
- en: We use Machine Learning (ML) on a daily basis to find solutions to problems
    and make predictions, which usually involves getting to know the data through
    exploratory analysis, followed by data cleaning, deciding based on our best judgement
    on what ML models to use to solve that problem, followed by hyperparameter optimization
    and iteration. But what if we could use ML to solve the more meta-level problem
    of doing all of those steps and even selection of the best model, instead of us
    manually going through these repetitoud and tedious steps? AutoML is here to oblige!
  prefs: []
  type: TYPE_NORMAL
- en: In this post I will demonstrate how with only 3 lines of code, AutoML outperformed
    a predictive ML model that I had personally developed (for a previous post), in
    less than 14 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: My goal in this post is not to propose that we no longer need scientists and
    ML practitioners since we have AutoML and rather the point I wish to make is to
    demonstrate how we can leverage AutoML to make our model selection process more
    efficient and hence increase the overall productivity. Once AutoML provides us
    with a comparison of the performance of various ML model families, we can continue
    the task and further fine-tune the model to achieve better results.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: '*(All images, unless otherwise noted, are by the author.)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@fmnobar/membership?source=post_page-----a318de373890--------------------------------)
    [## Join Medium with my referral link - Farzad Mahmoodinobar'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Farzad (and other writers on Medium). Your membership
    fee directly supports Farzad and other…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@fmnobar/membership?source=post_page-----a318de373890--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: What Is AutoML?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Automatic Machine Learning or AutoML is the process of automating the ML workflow
    of data cleaning, model selection, training, hyperparameter optimization, and
    even sometimes model deployment. AutoML was initially developed with the goal
    of making ML more accessible to non-technical users and over time has evolved
    into a reliable productivity tool even for experienced ML practitioners.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand what AutoML is, let’s move on to seeing it in action.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will initially go through the quick implementation of AutoML, using [AutoGluon](https://auto.gluon.ai/stable/index.html)
    and then will compare the results to a model that I had developed in my post about
    [Linear Regression](https://medium.com/towards-data-science/linear-regression-occams-razor-of-predictive-machine-learning-modeling-f2ba5b144a2b)
    (linked below) so that we can compare AutoML’s results to mine.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/linear-regression-occams-razor-of-predictive-machine-learning-modeling-f2ba5b144a2b?source=post_page-----a318de373890--------------------------------)
    [## Linear Regression — Occam’s Razor of Predictive Machine Learning Modeling'
  prefs: []
  type: TYPE_NORMAL
- en: Machine learning modeling using linear regression in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/linear-regression-occams-razor-of-predictive-machine-learning-modeling-f2ba5b144a2b?source=post_page-----a318de373890--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: In order for the comparison to be meaningful, we will be using the same data
    set of car prices from [UCI Machine Learning Repository](https://archive-beta.ics.uci.edu/dataset/10/automobile)
    (CC BY 4.0). You can download the cleaned up data from [this link](https://gist.github.com/fmnobar/c9b4029e08e97978a9a53f4eb034b16f)
    and follow the code step by step.
  prefs: []
  type: TYPE_NORMAL
- en: 'If this is your first time using AutoGluon, you may need to install it in your
    environment. Installation steps that I followed for Mac using CPU (Python 3.8)
    are as follows (if you have a different operating system, please visit [here](https://auto.gluon.ai/stable/install.html)
    for easy instructions):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now that AutoGluon is ready to use, let’s import the libraries that we will
    be using.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will read the data set into a Pandas data frame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Then we will split the data into a train and test set. We will use 30% of the
    data as the test set and the remainder will be the train set. At this point and
    for the sake of comparability, I will make sure that we use the same `random_state
    = 1234` that I had used in my other post about Linear Regression so that our train
    and test sets created here are the same as what I had created in that post.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Results of running the code above is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e2aec8bebaf77c45f940bde9150b3591.png)'
  prefs: []
  type: TYPE_IMG
- en: As we see above, the data includes 193 rows across 25 columns. One column is
    the “price”, which is the target variable that we would like to predict and the
    remainder are the independent variables used to predict the target variable.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at the top five rows of the data just to understand what the data
    look like.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/60c29c1ee4427653ca7f0d35128252ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, let’s talk more about AutoGluon. First, we will create a dictionary of
    the models that would like AutoGluon to use and compare for this exercise. Below
    is a list of these models:'
  prefs: []
  type: TYPE_NORMAL
- en: 'GBM: LightGBM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CAT: CatBoost'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'XGB: XGBoost'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RF: Rrandom forest'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'XT: Eextremely randomized trees'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'KNN: K-nearest neighbors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LR: Linear regression'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then we get to the three lines of codes that I promised. These lines will accomplish
    and correspond to the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Train (or fit) the model to the training set
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create predictions for the test set using the trained models
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a leaderboard of the evaluation results of the models
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s write the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9243881eeea7abcb847d2a9d03ee51e7.png)'
  prefs: []
  type: TYPE_IMG
- en: Leaderboard comparing evaluation results of various ML models
  prefs: []
  type: TYPE_NORMAL
- en: And that is it!
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a closer look at the leaderboard.
  prefs: []
  type: TYPE_NORMAL
- en: In the final results, the column named “model” shows the name of the models
    that we included in our dictionary of models. There are eight of them (note that
    row numbers range from 0 to 7 for a total of 8). Column named “score_val” is the
    Root Mean Squared Error (RMSE) multiplied by -1 (AutoGluon does this multiplication
    by -1 so that the higher number is the better). Models are ranked from the best
    at the top of the table to the worst at the bottom of the table. In other words,
    “WeightedEnsemble_L2” is the best model in this exercise with an RMSE of ~2,142.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s see how this number compares to the evaluation results of the ML model
    that I had created in my post about [Linear Regression](https://medium.com/towards-data-science/linear-regression-occams-razor-of-predictive-machine-learning-modeling-f2ba5b144a2b).
    If you visit that post and search for MSE, you will find an MSE of ~6,725,127,
    which is equal to a RMSE of ~2,593 (RMSE is just the root of MSE). Comparing this
    number to the “score_val” column of the leaderboard shows that my model was better
    than 4 models that AutoGluon tried and it was worse than the top 4! Remember that
    I spent quite a bit of time on feature engineering and creating that model in
    that exercise while AutoGluon managed to find 4 better models in a little over
    13 seconds, using 3 lines of code! That is the power of AutoML in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation Notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The notebook I used in creating this post is provided below. Feel free to download,
    replicate and play around with it.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this post we talked about what AutoML is and how it can help users with or
    without a background in ML modeling. For non-technical users unfamiliar with ML,
    AutoML lowers the barrier to entry and enables such users to create powerful ML
    models. On the other hand, technical users such as scientists and ML practitioners
    can leverage what AutoML offers to increase their productivity by trying various
    models in a short period of time. Technical users then can spend their time on
    fine-tuning or improving the top recommendations of an AutoML algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for Reading!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you found this post helpful, please [follow me on Medium](/@fmnobar) and
    subscribe to receive my latest posts!
  prefs: []
  type: TYPE_NORMAL
