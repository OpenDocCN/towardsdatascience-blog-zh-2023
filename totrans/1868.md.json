["```py\nclass Network:\n\n    def create_source(self):\n        G = nx.DiGraph()\n        self.G = G\n        self.G.add_node(0)\n\n    def add_node(self):\n        index = len(self.G.nodes)\n        self.G.add_node(index)\n\n    def add_connection(self,node1,node2):\n        self.G.add_edge(node1,node2)\n```", "```py\nclass Network:\n\n    def create_source(self):\n        G = nx.DiGraph()\n        self.G = G\n        self.G.add_node(0)\n        self.G.nodes[0][\"Informed\"] = 1\n\n    def add_node(self):\n        index = len(self.G.nodes)\n        self.G.add_node(index)\n        self.G.nodes[index][\"Informed\"] = 0\n\n    def add_connection(self,node1,node2):\n        self.G.add_edge(node1,node2)\n        self.G[node1][node2][\"Connection\"] = nx.degree_centrality(self.G)[node1]\n\n    def propogate_information(self, resistance):\n        for edge in list(self.G.edges):\n            rand = np.random.uniform(0,resistance)\n            if self.G.nodes[edge[0]][\"Informed\"] == 1 and rand < self.G[edge[0]][edge[1]][\"Connection\"]:\n                self.G.nodes[edge[1]][\"Informed\"] = 1\n```", "```py\ndef get_color(network):\n    color_dict = dict({0:\"red\",1:\"green\"})\n    color = list(dict(network.G.nodes(data=\"Informed\")).values())\n    color = [color_dict[i] for i in color]\n    return color\n\nnetwork = Network()\nnetwork.create_source()\n\nfor i in range(0,100):\n    network.add_node()\n\nnodes = list(network.G.nodes)\nfor i in range(0,300):\n    if i == 0: \n        node1 = nodes[0]\n    else:\n        node1 = np.random.choice(nodes)\n    node2 = np.random.choice(nodes)\n\n    if node1 != node2:\n        network.add_connection(node1,node2)\n\npos = nx.kamada_kawai_layout(network.G)\ncolor = get_color(network)\n\nplt.figure(figsize =(10,10))\nnx.draw(network.G,  node_color = color, arrowsize=20, pos = pos)\n```", "```py\ninformed = []\nnetworks = [network.G.copy()]\nfor i in range(0,50):\n    network.propogate_information(.3)\n    informed.append(sum(list(dict(network.G.nodes(data=\"Informed\")).values())))\n    networks.append(network.G.copy())\n```", "```py\n#Import Libraries\nimport networkx as nx\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport imageio\n\n#Make helper functions\ndef makeGif(networks, name):\n    !mkdir frames\n\n    counter=0\n    images = []\n    for i in range(0,len(networks)):\n        plt.figure(figsize = (8,8))\n\n        color = get_color(networks[i])\n        nx.draw(networks[i],  node_color = color, arrowsize=20, pos = pos)\n        plt.savefig(\"frames/\" + str(counter)+ \".png\")\n        images.append(imageio.imread(\"frames/\" + str(counter)+ \".png\"))\n        counter += 1\n        plt.close()\n\n    imageio.mimsave(name, images)\n\n    !rm -r frames\n\ndef get_color(graph):\n    color_dict = dict({0:\"red\",1:\"green\"})\n    color = list(dict(graph.nodes(data=\"Informed\")).values())\n    color = [color_dict[i] for i in color]\n    return color\n\n#Create Network Class\nclass Network:\n\n    def create_source(self):\n        G = nx.DiGraph()\n        self.G = G\n        self.G.add_node(0)\n        self.G.nodes[0][\"Informed\"] = 1\n\n    def add_node(self):\n        index = len(self.G.nodes)\n        self.G.add_node(index)\n        self.G.nodes[index][\"Informed\"] = 0\n\n    def add_connection(self,node1,node2):\n        self.G.add_edge(node1,node2)\n        self.G[node1][node2][\"Connection\"] = nx.degree_centrality(self.G)[node1]\n\n    def propogate_information(self, resistance):\n        for edge in list(self.G.edges):\n            rand = np.random.uniform(0,resistance)\n            if self.G.nodes[edge[0]][\"Informed\"] == 1 and rand < self.G[edge[0]][edge[1]][\"Connection\"]:\n                self.G.nodes[edge[1]][\"Informed\"] = 1\n#Run simulation\nnetwork = Network()\nnetwork.create_source()\n\nfor i in range(0,100):\n    network.add_node()\n\nnodes = list(network.G.nodes)\nfor i in range(0,300):\n    if i == 0: \n        node1 = nodes[0]\n    else:\n        node1 = np.random.choice(nodes)\n    node2 = np.random.choice(nodes)\n\n    if node1 != node2:\n        network.add_connection(node1,node2)\n\npos = nx.kamada_kawai_layout(network.G)\ncolor = get_color(network.G)\n\n#Plot initial netowork\nplt.figure(figsize =(10,10))\nnx.draw(network.G,  node_color = color, arrowsize=20, pos = pos)\n\n#Propogate idea\ninformed = []\nnetworks = [network.G.copy()]\nfor i in range(0,50):\n    network.propogate_information(.3)\n    informed.append(sum(list(dict(network.G.nodes(data=\"Informed\")).values())))\n    networks.append(network.G.copy())\n\n#Plot final network\nplt.figure(figsize =(10,10))\ncolor = get_color(network.G)\nnx.draw(network.G,  node_color = color, arrowsize=20, pos = pos)\n\n#Plot contagion curve\nplt.figure()\nt = np.arange(0,len(informed),1)\nplt.plot(t,informed)\nplt.xlabel(\"Time\")\nplt.ylabel(\"Informed Members\")\nplt.title(\"Information Contagion Curve\")\nplt.savefig(\"contagionCurve.png\")\n\n#Save gif\nmakeGif(networks, \"contagion.gif\") \n```"]