- en: A Quick Guide to Beautiful Scatter Plots in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中美丽散点图的快速指南
- en: 原文：[https://towardsdatascience.com/a-quick-guide-to-beautiful-scatter-plots-in-python-75625ae67396](https://towardsdatascience.com/a-quick-guide-to-beautiful-scatter-plots-in-python-75625ae67396)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-quick-guide-to-beautiful-scatter-plots-in-python-75625ae67396](https://towardsdatascience.com/a-quick-guide-to-beautiful-scatter-plots-in-python-75625ae67396)
- en: Visualizing worldwide Life Expectancy vs GPD per capita
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可视化全球生命预期与人均GDP
- en: '[](https://hair-parra.medium.com/?source=post_page-----75625ae67396--------------------------------)[![Hair
    Parra](../Images/71a377f0415096dc6fb0a10e64b3b28e.png)](https://hair-parra.medium.com/?source=post_page-----75625ae67396--------------------------------)[](https://towardsdatascience.com/?source=post_page-----75625ae67396--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----75625ae67396--------------------------------)
    [Hair Parra](https://hair-parra.medium.com/?source=post_page-----75625ae67396--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://hair-parra.medium.com/?source=post_page-----75625ae67396--------------------------------)[![Hair
    Parra](../Images/71a377f0415096dc6fb0a10e64b3b28e.png)](https://hair-parra.medium.com/?source=post_page-----75625ae67396--------------------------------)[](https://towardsdatascience.com/?source=post_page-----75625ae67396--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----75625ae67396--------------------------------)
    [Hair Parra](https://hair-parra.medium.com/?source=post_page-----75625ae67396--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----75625ae67396--------------------------------)
    ·9 min read·Jan 12, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----75625ae67396--------------------------------)
    ·阅读时间9分钟·2023年1月12日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/960686bb3dcfd9fced9a5a64ae1af07d.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/960686bb3dcfd9fced9a5a64ae1af07d.png)'
- en: Image by author via Python Matplotlib
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者通过Python Matplotlib提供的图片
- en: 'So you already know some Python and matplotlib. Perhaps you are like me and
    really like sophisticated, beautiful and insightful plots. However, when you encounter
    some basic examples to replicate them yourself, as seen in [this documentation
    page](https://matplotlib.org/stable/gallery/lines_bars_and_markers/scatter_masked.html#sphx-glr-gallery-lines-bars-and-markers-scatter-masked-py),
    you might see something like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你已经知道了一些Python和matplotlib。也许你和我一样，喜欢复杂、美丽且富有洞察力的图表。然而，当你遇到一些基础示例并试图自己复现时，如
    [这个文档页面](https://matplotlib.org/stable/gallery/lines_bars_and_markers/scatter_masked.html#sphx-glr-gallery-lines-bars-and-markers-scatter-masked-py)
    中所见，你可能会看到这样的情况：
- en: 'which generates the following plot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成如下图表：
- en: '![](../Images/1639ccdc8f7156a3a66b6382425a4058.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1639ccdc8f7156a3a66b6382425a4058.png)'
- en: 'src: [https://matplotlib.org/stable/gallery/lines_bars_and_markers/scatter_masked.html#sphx-glr-gallery-lines-bars-and-markers-scatter-masked-py](https://matplotlib.org/stable/gallery/lines_bars_and_markers/scatter_masked.html#sphx-glr-gallery-lines-bars-and-markers-scatter-masked-py)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：[https://matplotlib.org/stable/gallery/lines_bars_and_markers/scatter_masked.html#sphx-glr-gallery-lines-bars-and-markers-scatter-masked-py](https://matplotlib.org/stable/gallery/lines_bars_and_markers/scatter_masked.html#sphx-glr-gallery-lines-bars-and-markers-scatter-masked-py)
- en: While very colourful, this plot is rather simple and not very insightful, and
    the code does explain its purpose. In this article, I would like to show you how
    to create beautiful, insightful scatter plots like the one you saw at the beginning
    of this article.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这张图非常色彩丰富，但相当简单，不太具备洞察力，代码也解释了其目的。在本文中，我将展示如何创建像文章开头看到的那样美丽而富有洞察力的散点图。
- en: The notebook with code for this tutorial [can be found here](https://colab.research.google.com/drive/1jJd7fjS_1T5OhOVBdb8nhkQPF7KXBgh0?usp=sharing),
    and the dataset we will be using can be found in [this link](https://ourworldindata.org/grapher/life-expectancy-vs-gdp-per-capita).
    Note that in this tutorial, I have mounted data in the drive, so you could either
    [do the same](https://medium.com/geekculture/how-to-load-a-dataset-from-the-google-drive-to-google-colab-67d0478bc634),
    or download the data locally and run a Jupyter Notebook instead. For convenience,
    you can also download the data from [my GitHub](https://github.com/JairParra/Introduction-to-Data-Science/blob/main/datasets/life-expectancy-vs-gdp-per-capita.csv).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程的代码笔记本 [可以在这里找到](https://colab.research.google.com/drive/1jJd7fjS_1T5OhOVBdb8nhkQPF7KXBgh0?usp=sharing)，我们将使用的数据集可以在
    [这个链接](https://ourworldindata.org/grapher/life-expectancy-vs-gdp-per-capita) 中找到。请注意，在本教程中，我已将数据挂载到驱动器中，因此你可以
    [做同样的事情](https://medium.com/geekculture/how-to-load-a-dataset-from-the-google-drive-to-google-colab-67d0478bc634)，或者将数据下载到本地并运行Jupyter
    Notebook。为了方便，你也可以从 [我的GitHub](https://github.com/JairParra/Introduction-to-Data-Science/blob/main/datasets/life-expectancy-vs-gdp-per-capita.csv)
    下载数据。
- en: Imports
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入
- en: As I will be using Google Colab on this example, you will see specific Colab
    drive imports. However, if you are doing this locally, you can skip these. Since
    we will also be doing some basic data cleaning and linear regression, I have also
    imported some Scikit-learn classes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我将在这个例子中使用Google Colab，你将看到特定的Colab驱动导入。但是，如果你是在本地进行操作，可以跳过这些。由于我们还将进行一些基本的数据清理和线性回归，我还导入了一些Scikit-learn类。
- en: 'The dataset: Life Expectancy vs GPD per capita'
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据集：预期寿命与人均GDP
- en: 'For this example, we are going to use the **Life Expectancy vs GDP per capita**
    dataset, which is available at [https://ourworldindata.org/](https://ourworldindata.org/).
    Once you’ve grabbed the data and you’re able to read the file, let’s examine the
    steps we will take to analyze it:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，我们将使用**预期寿命与人均GDP**数据集，该数据集可在[https://ourworldindata.org/](https://ourworldindata.org/)找到。一旦你获取了数据并能够读取文件，让我们查看分析它的步骤：
- en: Load the data
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载数据
- en: Examine the data and rename the columns for convenience
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查数据并重命名列以便于使用
- en: Extract rows/datapoints that have a value for GDP
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取具有GDP值的行/数据点
- en: Visualize the population distribution
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可视化人口分布
- en: Constructing the plotting function
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建绘图函数
- en: Plotting the data, beautifully!
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 美观地绘制数据！
- en: Load the data
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载数据
- en: First, let’s load and examine our data. We load the data using the correct data
    path using Pandas (wherever you placed it), and we rename some columns for convenience.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们加载并检查我们的数据。我们使用Pandas加载数据（无论你将数据放置在哪里），并重命名一些列以便于使用。
- en: 'The resulting data should look like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 结果数据应如下所示：
- en: '![](../Images/49465a0602e6c8025a83c07f61707aab.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/49465a0602e6c8025a83c07f61707aab.png)'
- en: Plot by author — generated using Python Pandas on Colab
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 作者绘制的图表——使用Python Pandas在Colab上生成
- en: Cleaning the data
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清理数据
- en: 'Notice that many data points have `Nan` for the `GDP` column, and also for
    the `Population`column. Since we cannot have an analysis on missing values, we
    are going to remove them from our data:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，许多数据点在`GDP`列和`Population`列中都有`Nan`值。由于我们无法对缺失值进行分析，因此我们将从数据中删除这些点：
- en: 'After having cleaned the GDP and selected the 2018 year (you can verify yourself
    there is no data with GDP for further years!), our data will look like so:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在清理了GDP数据并选择了2018年（你可以自己验证是否有进一步年份的GDP数据！）后，我们的数据将如下所示：
- en: '![](../Images/c6dabe6dacceab57eac04a3a80002214.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c6dabe6dacceab57eac04a3a80002214.png)'
- en: Plot by author — generated using Python Pandas on Colab
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 作者绘制的图表——使用Python Pandas在Colab上生成
- en: Note that we also excluded the data point `World` from our analysis since this
    contains an aggregate of all countries (feel free to include it and see how the
    final plot changes! ).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们还排除了`World`数据点，因为它包含所有国家的总和（可以自由包括它，看看最终图表有何变化！）。
- en: Visualizing the Population distribution
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化人口分布
- en: 'Notice that the population values are given in millions. Further in the plot,
    in order to add different colors to different thresholds of population numbers,
    we would like to see what its distribution looks like:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，人口值以百万为单位。在绘图中，为了给不同的人口数阈值添加不同的颜色，我们希望查看其分布情况：
- en: '![](../Images/325a20dd9815db4b5997a79157120705.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/325a20dd9815db4b5997a79157120705.png)'
- en: Image by author via Python Matplotlib
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片，使用Python Matplotlib生成
- en: 'Oops! This tells us that most countries have a population between 0.0 and 0.2^
    1e9 = 200 000 000 (200 millions) , and some countries have more than ~1200 millions.
    Since there is a bigger density on the left (more countries with fewer people),
    we can ignore the high-population countries and produce a histogram focused on
    the left countries:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！这告诉我们，大多数国家的人口在0.0到0.2^1e9 = 200,000,000（2亿）之间，而一些国家的人口超过了约1200万。由于左侧密度较大（更多国家的人口较少），我们可以忽略高人口国家，并制作一个集中在左侧国家的直方图：
- en: '![](../Images/01e779712bf925b487954655d3bc8c39.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/01e779712bf925b487954655d3bc8c39.png)'
- en: Image by author via Python Matplotlib
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片，使用Python Matplotlib生成
- en: Much better! We will use this to create approximate values to colour-code countries
    with different population densities.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 好得多！我们将用它来创建大致的值，以颜色编码不同人口密度的国家。
- en: Constructing the Plotting Function
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建绘图函数
- en: For this part, we will perform a couple of sub-steps, as shown below.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这一部分，我们将执行几个子步骤，如下所示。
- en: Function Definition
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数定义
- en: 'We will define our function as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按如下方式定义我们的函数：
- en: 'Note the three parameters: `df` , which is our data after initial pre-processing,
    `apply_color` to colour-code the population density, and `regression` to apply
    regression to the plot.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意三个参数：`df`，这是我们经过初步预处理后的数据，`apply_color`用于对人口密度进行颜色编码，以及`regression`用于在图表上应用回归。
- en: Filling missing data
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 填补缺失数据
- en: Our data still contains a couple of NaN values for important columns of interest,
    namely `["Expectancy", "GDP", "Population"]` . Although we could drop the rows
    with NaNs, a better idea here is to fill them with an “educated guess” instead.
    Popular options are the mean or median of the column, but here we will use a machine
    learning algorithm called **K** **Nearest Neighbours** (KNN) instead. If you are
    not familiar with it, you can read up on it [here](https://www.ibm.com/topics/knn).
    For our purposes,all it does is that it will essentially fill up the missing values
    by using the top N most-similar country entries based on the available attributes
    (say Expectancy and GDP) to predict the Population value, and using the average
    value of those.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据仍然包含一些重要列的NaN值，即`["Expectancy", "GDP", "Population"]`。虽然我们可以删除包含NaN的行，但这里更好的方法是用“有根据的猜测”来填补它们。常见的选项是列的均值或中位数，但在这里我们将使用一种称为**K**
    **最近邻**（KNN）的机器学习算法。如果你不熟悉它，你可以在[这里](https://www.ibm.com/topics/knn)阅读相关内容。就我们的目的而言，它实际上是通过使用基于可用属性（比如预期寿命和GDP）的最相似的N个国家的条目来预测人口值，并使用这些值的平均值来填补缺失值。
- en: '**Aggregating the data**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据汇总**'
- en: Although the data here is only for 2018, given a better daset, you could extend
    this analysis to more years. That’s why we also **aggregate the data** to make
    sure all the years are taken into account. This is done using Pandas `groupby(),`
    choosing the `"Country"` column as the argument. Additionally, we also round the
    data beforehand to reduce the number of decimals.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这里的数据仅为2018年的数据，但鉴于更好的数据集，你可以将此分析扩展到更多年份。这就是为什么我们还**汇总数据**以确保所有年份都被考虑在内。此操作是使用Pandas的`groupby()`，选择“`Country`”列作为参数。此外，我们还会提前对数据进行四舍五入，以减少小数位数。
- en: Extracting Plot Variables
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提取绘图变量
- en: Once again for the sake of convenience, we will reassign the columns to individual
    variables. Note that you could simply query the dataframe directly. An important
    step here, however, is that we will scale the `Population` column by a factor
    of a million and multiply by 2\. This will control the size of the dots when plotting
    the scatter plot.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，我们将再次把列重新分配到各个变量。请注意，你可以直接查询数据框。然而，一个重要的步骤是，我们将把`Population`列按一百万的比例缩放并乘以2。这将控制绘制散点图时点的大小。
- en: Perform Regression
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行回归
- en: 'An optional part of our plot is to draw a very nice line that follows the mean
    of all the different points which represent each of the country’s GDP vs their
    respective life expectancy. This will give us a way to quickly evaluate at glance
    the status of individual countries with respect to the general trend. For this,
    you could use Scikit-learn’s `ElasticSearchCV` , which is essentially linear regression
    which mixes Lasso and Ridge regression, adding regularization for a more robust
    fit. You can read about it in [the Wikipedia article](https://en.wikipedia.org/wiki/Elastic_net_regularization)
    and also see the corresponding [Scikit-learn documentation](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ElasticNetCV.html).
    Additionally, the CV stands for “Cross Validation”, which is a common technique
    in machine learning to reduce variance in your models. You can read more about
    it [here](https://medium.com/analytics-vidhya/understanding-cross-validation-for-beginners-31e0c606ebe0#:~:text=What%20is%20Cross%20Validation%3F,see%20how%20well%20it%20does.).
    The code is as follows (notice the `regression` parameter):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们图表的一个可选部分是绘制一条非常漂亮的线，这条线跟随所有不同点的均值，这些点代表了每个国家的GDP与其相应的预期寿命。这将使我们能够快速评估各个国家相对于总体趋势的状态。为此，你可以使用Scikit-learn的`ElasticSearchCV`，这本质上是线性回归的混合体，它结合了Lasso和Ridge回归，为了更稳健的拟合而添加了正则化。你可以在[维基百科文章](https://en.wikipedia.org/wiki/Elastic_net_regularization)中阅读相关内容，也可以查看相应的[Scikit-learn文档](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ElasticNetCV.html)。此外，CV代表“交叉验证”，这是一种在机器学习中减少模型方差的常见技术。你可以在[这里](https://medium.com/analytics-vidhya/understanding-cross-validation-for-beginners-31e0c606ebe0#:~:text=What%20is%20Cross%20Validation%3F,see%20how%20well%20it%20does.)了解更多。代码如下（注意`regression`参数）：
- en: After initializing the algorithm, we format the data into the correct format
    (here, the X argument are the predictive features, and y is the target), and then
    fit the regression model. Then, we produce predictions, and finally, arrange them
    in the right format. Note that we also trim the predictions for datapoints where
    the predictions are less than 90, so that the plot doesn’t go out bounds.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化算法后，我们将数据格式化为正确的格式（这里，X参数是预测特征，y是目标），然后拟合回归模型。接着，我们生成预测结果，最后将其整理成正确的格式。请注意，我们还会修剪预测值低于90的数据点，以避免图形超出边界。
- en: Start the plot, colour-code and add point density
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始绘图，上色并添加点密度
- en: We are now ready to start plotting. The first step, is to **colour-code** the
    population density points for each country in our data. We assign a different
    colour depending on the number of people, and only apply this if the argument
    `apply_color=True` . Remember the histogram we plotted before? If we take a look
    at the boundary values of the bins, we can come up with some nice bounds for the
    population, and give it an appropriate colour (of course, these are the colours
    that make sense to me, but feel free to choose whatever colours you want!).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备开始绘图。第一步是**为每个国家的人口密度点上色**。我们根据人口数量分配不同的颜色，仅在`apply_color=True`参数设置为真时才应用此操作。还记得我们之前绘制的直方图吗？如果我们查看箱子的边界值，我们可以为人口设置一些合理的范围，并赋予其适当的颜色（当然，这些颜色对我来说有意义，但你可以选择任何你喜欢的颜色！）。
- en: 'Next, we start the plot with `plt.figure()`and call the `plt.scatter()` method,
    depending on whether we want to colour code or not:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`plt.figure()`开始绘图，并调用`plt.scatter()`方法，具体取决于我们是否要上色：
- en: 'Here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里：
- en: The `s` argument will take a vector with real values, and will modify the resulting
    dot size accordingly. Therefore we assign the `population` variable, which already
    contains the appropriate scaling for each value ofr that country proportional
    to its number of people. The higher the population, the bigger the dot.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s`参数将接收一个实数值向量，并相应地修改点的大小。因此，我们分配`population`变量，它已经包含了每个国家值的适当缩放，与其人口数量成比例。人口越多，点就越大。'
- en: The `c` argument will apply the corresponding colour to each point, which is
    what we assigned to the dataframe before.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c`参数将为每个点应用相应的颜色，这些颜色是我们之前分配给数据框的。'
- en: The `alpha` argument will change the transparency of the dots.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alpha`参数将改变点的透明度。'
- en: Additionally, we can also annotate the points with high population density,
    which we can do using the `plt.annotate()` method. In order to obtain the corresponding
    country names, we subset such records and retrieve their corresponding coordinates,
    and then pass them to the method.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以用`plt.annotate()`方法对高人口密度的点进行标注。为了获得相应的国家名称，我们对子集记录进行检索，获取它们的坐标，然后传递给方法。
- en: Note the `+0.3` in the y-coordinate; this is to move the text a bit away from
    the point so it doesn’t overlap.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意y坐标中的`+0.3`；这是为了将文本稍微移动远离点，以避免重叠。
- en: Regression Line
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回归线
- en: Next, we add the regression line using `reg.plot()` using the `reg_data` that
    we created before. This line represents a sort of average life expectancy given
    the GDP per capita of some country, which we can use as a baseline to compare
    the relative status of other countries.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`reg.plot()`添加回归线，利用之前创建的`reg_data`。这条线代表了某个国家在给定人均GDP的情况下的平均预期寿命，我们可以用它作为基线来比较其他国家的相对状况。
- en: The `ls='--'` argument specifies line style. Note also that we are using as
    plotting arguments the GDP data ( `reg_data["X"]` ) and the corresponding predictions.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`ls=''--''`参数指定线条样式。还要注意，我们使用的是GDP数据（`reg_data["X"]`）和相应的预测值作为绘图参数。'
- en: Finish the plot
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成绘图
- en: 'Let’s finish up the code for our plot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们完成绘图代码：
- en: In the first part we add a label for the x-axis (GDP per capita), for the y-axis
    (Life Expectancy), and give our plot an appropriate title. Additionally, we display
    the x values in log scale, as it provides a prettier and more insightful plot
    (try removing it and see what happens!).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分，我们为x轴（人均GDP）和y轴（预期寿命）添加标签，并为绘图提供一个适当的标题。此外，我们以对数刻度显示x值，因为它提供了更美观、更具洞察力的图形（试着去掉它看看会发生什么！）。
- en: Next, we create the labels for the different colours. As Matplotlib creates
    the labels all at once, in order to create a label with the appropriate color
    and name, we create four corresponding “ghost” lines, which will not do anything
    on the final plot, but will provide a colour-coded label instead.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建不同颜色的标签。由于Matplotlib一次性创建所有标签，为了创建带有适当颜色和名称的标签，我们创建了四条对应的“幽灵”线，这些线在最终图表中不会做任何事情，但会提供一个颜色编码的标签。
- en: Finally, we create the legend and display our plot.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建图例并显示我们的图表。
- en: All together
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结一下
- en: 'We’ve come a long way. This is what the function looks like altogether:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经走了很长一段路。这就是整个函数的样子：
- en: Let’s test it out!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来测试一下吧！
- en: '![](../Images/e1dc42c546fd2539a3a23caf117bfb8e.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e1dc42c546fd2539a3a23caf117bfb8e.png)'
- en: Image by author using Python
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者使用Python生成
- en: Not bad at all! At glance, we can see all the different world countries life
    expectancy with respect to their GDP per capita, and their corresponding life
    expectancy measurements. Additionally, we can also see the name of some countries
    with a relatively big number of people.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 相当不错！一眼望去，我们可以看到所有世界各国相对于其人均GDP的**预期寿命**，以及它们相应的预期寿命测量值。此外，我们还可以看到一些**人口相对较多**的国家名称。
- en: 'We can also set `apply_color=True` to distinguish between population densities
    and produce the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以设置`apply_color=True`来区分不同的人口密度，并生成以下内容：
- en: '![](../Images/17cd2651774c3b30ed9d04f448a8e03f.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/17cd2651774c3b30ed9d04f448a8e03f.png)'
- en: Plot by author using Python
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 绘图由作者使用Python生成
- en: Just how beautiful that looks! We can now clearly see different magnitudes of
    population density easily thanks to the colour-coding.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来多么美丽啊！多亏了颜色编码，我们现在可以清晰地看到不同的**人口密度**。
- en: 'Finally, let’s add the regression line:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们来添加回归线：
- en: '![](../Images/0ad91d393fafa3e3c02176928dbe0bc8.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0ad91d393fafa3e3c02176928dbe0bc8.png)'
- en: Plot by author using Python on Google Colab
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 绘图由作者使用Python在Google Colab上生成
- en: And that’s it! We have now successfully generated the plot that you saw at the
    beginning of the article. Just by looking at the plot, we can tell at glance which
    countries had a life expectancy higher than the average relative to their GDP
    in 2018, by checking which countries lie above and beyond the regression line.
    Note that the actual regression line is a line (duh!) and not a curve, but because
    we are working in log-scale, it seems to be a curve instead, as the values are
    changed.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们现在已经成功生成了你在文章开始时看到的图表。仅凭图表，我们可以一眼看出哪些国家在2018年相对于其GDP的**预期寿命**高于平均水平，通过查看哪些国家位于回归线的上方和之外。请注意，实际的回归线是一条线（显而易见！），而不是一条曲线，但因为我们在对数尺度下工作，它看起来更像是曲线，因为数值被改变了。
- en: '**Last words**'
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**最后的话**'
- en: Beautiful, informative plots are an art, and while some libraries will definitely
    facilitate your learning; it’s never a bad idea to improve on the basics and become
    learn a couple of new tricks.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 美丽、信息丰富的图表是一门艺术，虽然一些库无疑会促进你的学习；但提高基础知识并学到一些新技巧永远不是一个坏主意。
- en: I hope that this article was interesting to you, and if so, make sure to check
    some of my other popular articles & series!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这篇文章对你来说很有趣，如果是这样的话，确保查看一下我其他的一些受欢迎的文章和系列！
- en: Data Science Basics
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据科学基础
- en: '[](/the-data-science-trilogy-numpy-pandas-and-matplotlib-basics-42192b89e26?source=post_page-----75625ae67396--------------------------------)
    [## The Data Science Trilogy: NumPy, Pandas and Matplotlib basics'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 数据科学三部曲：NumPy、Pandas和Matplotlib基础](https://towardsdatascience.com/the-data-science-trilogy-numpy-pandas-and-matplotlib-basics-42192b89e26?source=post_page-----75625ae67396--------------------------------)'
- en: So you are new to Python. Or perhaps you are already familiar with these libraries,
    but wanted to get a quick…
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 所以你是Python新手。或者你可能已经熟悉这些库，但想要快速了解一下……
- en: towardsdatascience.com](/the-data-science-trilogy-numpy-pandas-and-matplotlib-basics-42192b89e26?source=post_page-----75625ae67396--------------------------------)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 数据科学三部曲：NumPy、Pandas和Matplotlib基础](https://towardsdatascience.com/the-data-science-trilogy-numpy-pandas-and-matplotlib-basics-42192b89e26?source=post_page-----75625ae67396--------------------------------)'
- en: GIT Basics
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GIT基础
- en: '[](https://medium.com/analytics-vidhya/quick-git-is-all-you-need-6f6efd41b7c2?source=post_page-----75625ae67396--------------------------------)
    [## Quick GIT is all you NEED'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 快速GIT是你需要的一切](https://medium.com/analytics-vidhya/quick-git-is-all-you-need-6f6efd41b7c2?source=post_page-----75625ae67396--------------------------------)'
- en: Okay, so you have come here because you want to learn Git/Github. So instead
    of writing a 10 lines paragraph about it…
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 好吧，你来这里是因为你想学习Git/Github。因此，不如直接写一段关于它的`10行`文字……
- en: medium.com](https://medium.com/analytics-vidhya/quick-git-is-all-you-need-6f6efd41b7c2?source=post_page-----75625ae67396--------------------------------)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/analytics-vidhya/quick-git-is-all-you-need-6f6efd41b7c2?source=post_page-----75625ae67396--------------------------------)'
- en: Functional Programming in Python
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python中的函数式编程
- en: '[](https://medium.com/analytics-vidhya/going-functional-in-python-with-code-b50ba7742469?source=post_page-----75625ae67396--------------------------------)
    [## Going Functional in Python (with code)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Python中的函数式编程（含代码）](https://medium.com/analytics-vidhya/going-functional-in-python-with-code-b50ba7742469?source=post_page-----75625ae67396--------------------------------)'
- en: Ever heard about functional programming, but didn’t understand it and/or didn’t
    know where to start? Or maybe you would…
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 曾经听说过函数式编程，却没有理解或者不知道从哪里开始？或者你可能会…
- en: medium.com](https://medium.com/analytics-vidhya/going-functional-in-python-with-code-b50ba7742469?source=post_page-----75625ae67396--------------------------------)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/analytics-vidhya/going-functional-in-python-with-code-b50ba7742469?source=post_page-----75625ae67396--------------------------------)'
- en: Intro to Time Series Analysis in R
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间序列分析入门（使用R）
- en: '[](https://medium.com/analytics-vidhya/a-complete-introduction-to-time-series-analysis-with-r-9882f2d44c9d?source=post_page-----75625ae67396--------------------------------)
    [## A Complete Introduction To Time Series Analysis (with R)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 完整的时间序列分析介绍（使用R）](https://medium.com/analytics-vidhya/a-complete-introduction-to-time-series-analysis-with-r-9882f2d44c9d?source=post_page-----75625ae67396--------------------------------)'
- en: During these times of the Covid19 pandemic, you have perhaps heard about the
    collaborative efforts to predict new…
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Covid19疫情期间，你也许听说过关于预测新情况的合作努力…
- en: medium.com](https://medium.com/analytics-vidhya/a-complete-introduction-to-time-series-analysis-with-r-9882f2d44c9d?source=post_page-----75625ae67396--------------------------------)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/analytics-vidhya/a-complete-introduction-to-time-series-analysis-with-r-9882f2d44c9d?source=post_page-----75625ae67396--------------------------------)'
- en: References
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'The data used for this analysis and its original analysis was done by **Our
    World in Data,** and can be found at [https://ourworldindata.org/grapher/life-expectancy-vs-gdp-per-capita](https://ourworldindata.org/grapher/life-expectancy-vs-gdp-per-capita),
    where the following source is cited:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 用于此分析的数据及其原始分析由**我们的世界数据**完成，可以在 [https://ourworldindata.org/grapher/life-expectancy-vs-gdp-per-capita](https://ourworldindata.org/grapher/life-expectancy-vs-gdp-per-capita)
    找到，其中引用了以下来源：
- en: '*Madison Project Database (2020); UN WPP (2022); Zijdeman et al. (2015)*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*Madison项目数据库（2020）；联合国WPP（2022）；Zijdeman等（2015）*'
- en: 'From their page:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 从他们的页面：
- en: '*“Licenses: All visualizations, data, and articles produced by Our World in
    Data are open access under the* [*Creative Commons BY license*](https://creativecommons.org/licenses/by/4.0/)*.
    You have permission to use, distribute, and reproduce these in any medium, provided
    the source and authors are credited.”*'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*“许可证：我们的数据中的所有可视化、数据和文章都在* [*知识共享BY许可协议*](https://creativecommons.org/licenses/by/4.0/)*下开放访问。您可以在任何媒介中使用、分发和复制这些内容，只要注明来源和作者即可。”*'
- en: See [https://ourworldindata.org/about#legal](https://ourworldindata.org/about#legal)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 见 [https://ourworldindata.org/about#legal](https://ourworldindata.org/about#legal)
- en: Follow me at
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关注我
- en: '[https://www.linkedin.com/in/hair-parra-526ba19b/](https://www.linkedin.com/in/hair-parra-526ba19b/)'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://www.linkedin.com/in/hair-parra-526ba19b/](https://www.linkedin.com/in/hair-parra-526ba19b/)'
- en: '[https://github.com/JairParra](https://github.com/JairParra)'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://github.com/JairParra](https://github.com/JairParra)'
- en: '[https://medium.com/@hair.parra](https://medium.com/@hair.parra)'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://medium.com/@hair.parra](https://medium.com/@hair.parra)'
