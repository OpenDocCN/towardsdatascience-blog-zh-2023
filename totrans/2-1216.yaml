- en: How to Objectively Compare Two Ranked Lists in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在 Python 中客观地比较两个排名列表
- en: 原文：[https://towardsdatascience.com/how-to-objectively-compare-two-ranked-lists-in-python-b3d74e236f6a](https://towardsdatascience.com/how-to-objectively-compare-two-ranked-lists-in-python-b3d74e236f6a)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-objectively-compare-two-ranked-lists-in-python-b3d74e236f6a](https://towardsdatascience.com/how-to-objectively-compare-two-ranked-lists-in-python-b3d74e236f6a)
- en: A simplified explanation and implementation of Rank Biased Overlap
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对 Rank Biased Overlap 的简化解释和实现
- en: '[](https://krupesh-raikar.medium.com/?source=post_page-----b3d74e236f6a--------------------------------)[![Krupesh](../Images/e5cf0673fe40d115c29e4c6628395745.png)](https://krupesh-raikar.medium.com/?source=post_page-----b3d74e236f6a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b3d74e236f6a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b3d74e236f6a--------------------------------)
    [Krupesh](https://krupesh-raikar.medium.com/?source=post_page-----b3d74e236f6a--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://krupesh-raikar.medium.com/?source=post_page-----b3d74e236f6a--------------------------------)[![Krupesh](../Images/e5cf0673fe40d115c29e4c6628395745.png)](https://krupesh-raikar.medium.com/?source=post_page-----b3d74e236f6a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b3d74e236f6a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b3d74e236f6a--------------------------------)
    [Krupesh](https://krupesh-raikar.medium.com/?source=post_page-----b3d74e236f6a--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b3d74e236f6a--------------------------------)
    ·10 min read·Jan 5, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b3d74e236f6a--------------------------------)
    ·阅读时间 10 分钟·2023 年 1 月 5 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/8ce80da25708928b0424823ff8e67be0.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8ce80da25708928b0424823ff8e67be0.png)'
- en: '**Imagine you and your friend have both watched all 8 Harry Potter movies.**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**假设你和你的朋友都看过所有 8 部《哈利·波特》电影。**'
- en: '*But there’s a catch* — you have watched each movie the day it was released,
    without missing a single premier.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*但有一个问题* —— 你是每部电影在首映当天就观看的，没有错过任何一次首映。'
- en: Your friend, however, watched the 2nd movie first, then the 4th and 5th, and
    then binge-watched the rest when it was available on Netflix.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你的朋友却是先看了第二部电影，然后是第四部和第五部，最后在 Netflix 上追完了其余的电影。
- en: Theoretically, you and your friend are on an equal footing — both have watched
    all the movies of the series.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，你和你的朋友处于同等条件 —— 都看过该系列的所有电影。
- en: '***Is it really equal though?***'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '***它真的平等吗？***'
- en: '![](../Images/8368f473939f56ce003463091bdd50b2.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8368f473939f56ce003463091bdd50b2.png)'
- en: Image created by the author using a commercially usable typeface ([Harry P](https://fontswan.com/harry-potter-font/#4-caslon-antique))
    and CC image from [Wikimedia](https://commons.wikimedia.org/wiki/File:Harry_Potter_Lightning.svg)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者使用商业可用字体（[Harry P](https://fontswan.com/harry-potter-font/#4-caslon-antique)）和
    CC 图片来自 [Wikimedia](https://commons.wikimedia.org/wiki/File:Harry_Potter_Lightning.svg)
    制作
- en: You being a true fan, can never consider it equal.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个真正的粉丝，你绝对不能将它视为平等。
- en: How could someone not watch the movies of abook series, **In. A. Sequence?!**
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 怎么可能有人不按顺序观看一本书系列的电影，**这完全不合理？！**
- en: '***You consider it a sacrilege!***'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '***你认为这是亵渎！***'
- en: The good news is — **the math is on your side.** *You can boil this problem
    down into a ranked list comparison.*
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是 —— **数学对你有利。** *你可以将这个问题简化为排名列表比较。*
- en: There are several methods to compare lists.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以比较列表。
- en: 'In this post, you will:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，你将：
- en: Understand why we actually need a ranked list comparison
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解为什么我们实际上需要一个排名列表的比较
- en: See the requirements a comparison measure should satisfy
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看比较度量应该满足的要求
- en: Get an overview of a method called Rank Biased Overlap
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解一种叫做 Rank Biased Overlap 的方法
- en: Understand the mathematical approach behind it
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解其背后的数学方法
- en: Create a simple implementation in python
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 中创建一个简单的实现
- en: '*At the end of it, you will finally settle the disagreement with your friend
    once and for all:*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*最后，你将彻底解决与你朋友的分歧：*'
- en: '**You != Your Friend**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**你 != 你的朋友**'
- en: Why do you need a ranked list comparison?
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么你需要排名列表比较？
- en: Apart from the above movie viewing order disagreement, we are surrounded by
    examples of comparing lists!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上述的电影观看顺序分歧，我们周围充满了比较列表的例子！
- en: In fact, we all do such comparisons all the time.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们所有人都在不断进行这样的比较。
- en: Which results are better for the same query on Google vs. Bing?
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对同一查询在 Google 和 Bing 上的结果进行比较，哪个更好？
- en: How similar is the New York Times bestseller list to that from USA Today?
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《纽约时报》畅销书榜单与《今日美国》的榜单有多相似？
- en: How different are the top 10 movie rankings on Rotten Tomatoes as compared to
    IMDB?
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rotten Tomatoes上的前10部电影排名与IMDB相比有多不同？
- en: '**In the field of natural language processing and machine learning:**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**在自然语言处理和机器学习领域：**'
- en: How similar are two paragraphs once they are converted to tokenized word lists?
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个段落在转换为标记化单词列表后有多相似？
- en: How to compare the ranked outputs generated by two different learning-to-rank
    / machine-learned ranking (MLR)¹ models?
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何比较由两个不同的学习排序/机器学习排名（MLR）¹模型生成的排名输出？
- en: '**In manufacturing/production and logistics:**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**在制造/生产和物流领域：**'
- en: Comparing the sequence of incoming parts to the outgoing parts (FIFO). An ideal
    FIFO sequence looks like the one below. A ***1*** goes in first and a ***1***
    comes out first.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将传入部分的序列与传出部分的序列进行比较（FIFO）。一个理想的FIFO序列如下所示。一个***1***首先进入，一个***1***首先出来。
- en: '![](../Images/519d672799c368ca6a79ff634f26e335.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/519d672799c368ca6a79ff634f26e335.png)'
- en: But this may not always happen in the real world. Maybe a ***1*** goes in first
    but a ***3*** comes out first?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 但这在现实世界中可能并不总是发生。也许一个***1***先进去，但一个***3***先出来？
- en: '***Yeah, total chaos can ensue due to this.***'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '***是的，这可能导致完全的混乱。***'
- en: '![](../Images/3c411ebf2cc2c4ba4478210626748f53.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3c411ebf2cc2c4ba4478210626748f53.png)'
- en: Then, how are you supposed to measure the quality of the sequences?
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，你应该如何衡量序列的质量？
- en: '***You need some kind of measure.***'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '***你需要某种度量。***'
- en: Are there any requirements such a measure must satisfy?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种度量必须满足哪些要求？
- en: Requirements for a comparison measure
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较度量的要求
- en: Ideally, a comparison measure should be in the form of a score that indicates
    how similar the rankings are.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，比较度量应该以分数的形式出现，指示排名的相似程度。
- en: Think of the above examples again.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 再次考虑上述示例。
- en: 'You can already get clues about what such a measure should tell us:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从中得到关于这种度量应该告诉我们什么的线索：
- en: The ranked lists may be indefinite and possibly of different lengths — hence
    the measure***should be able to handle two different list sizes***
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 排名列表可能是无限的，且可能长度不同——因此度量***应该能够处理两个不同的列表大小***
- en: There should be an ability to compare at a chosen intersecting length — which
    means the measure***should handle the intersection length of the lists***
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该有能力在选择的交集长度下进行比较——这意味着度量***应该处理列表的交集长度***
- en: The top elements have more importance (like in search results, movie order,
    etc.) than the bottom ones — hence there should be a***possibility to give weights
    whenever needed***
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 顶部元素比底部元素更重要（例如在搜索结果、电影排序等方面）——因此应该有***在需要时赋予权重的可能性***
- en: Now let’s go look at something that satisfies these conditions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看满足这些条件的东西。
- en: Rank Biased Overlap
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排名偏差重叠
- en: As the name itself implies, this method is rank-biased.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如名字所暗示的，这种方法是排名偏向的。
- en: It means you can prioritize the top few elements in the list with a higher *weight*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你可以根据更高的*权重*优先考虑列表中的前几个元素。
- en: It was proposed in a paper titled — **A Similarity Measure for Infinite Rankings,
    by W. Weber et al²**
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法在一篇题为——**W. Weber等人²的《无限排名的相似性度量》**的论文中提出。
- en: You don’t have to go through the entire complexities in the research paper,
    I simplify most of the parts below so we can try a quick implementation in Python.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你不必通读整个研究论文中的复杂内容，我在下面简化了大部分部分，以便我们可以尝试在Python中进行快速实现。
- en: '***However, fasten your seatbelts and put on your math glasses, as we navigate
    through a few labyrinthine formulae!***'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '***不过，系好安全带，戴上数学眼镜，我们将穿越一些复杂的公式！***'
- en: 'Consider S and T as the names of the 2 ranked lists from our title image:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 设S和T为我们标题图像中两个排名列表的名称：
- en: '![](../Images/d6af78c3e0ca5e959b4c0b0439082065.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d6af78c3e0ca5e959b4c0b0439082065.png)'
- en: Let’s now define the intersection of these two lists, at a depth (d).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们定义这两个列表在深度（d）下的交集。
- en: '![](../Images/8d5f71a407d3d0ae457d78ef94ff1c99.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8d5f71a407d3d0ae457d78ef94ff1c99.png)'
- en: What does this actually mean?
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上意味着什么？
- en: 'It is the list of common elements from S and T, at a given length (called depth
    ***d***). It will be clear from this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这是S和T在给定长度（称为深度***d***）下的共同元素列表。从中可以清楚地看到：
- en: '![](../Images/18114de3b6b8447fe6cf7c5ffa49fd05.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/18114de3b6b8447fe6cf7c5ffa49fd05.png)'
- en: The depth is taken as *at most the length of the smaller list*, otherwise, the
    intersection does not make sense.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 深度被认为是*最多为较小列表的长度*，否则，交集就没有意义。
- en: The length of this new intersecting list is called the **Overlap**, which in
    this case is 7.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新的交集列表的长度称为**重叠**，在这种情况下是7。
- en: '![](../Images/997b92176df6ac85c999912cfccd4b13.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/997b92176df6ac85c999912cfccd4b13.png)'
- en: Next, we define something called the **Agreement** of the lists. It is simply
    the overlap by the depth.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义一个称为**一致性**的概念。它只是按深度计算的重叠。
- en: '![](../Images/1a6485faee812b787c6d399bc0af9519.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1a6485faee812b787c6d399bc0af9519.png)'
- en: The **Average Overlap (AO)** is the average agreement for all the depths of
    the lists, ranging from 1 to an integer k.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**平均重叠（AO）**是所有深度列表的平均一致性，范围从1到整数k。'
- en: When k = 1, the depth ranges from 1 to 1, which means comparing only the first
    element.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当k = 1时，深度范围从1到1，这意味着只比较第一个元素。
- en: '![](../Images/162de8fd4fde359b0b11ac1769ccdbeb.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/162de8fd4fde359b0b11ac1769ccdbeb.png)'
- en: Since the elements match, the intersection X is 1 and so is Agreement A.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 由于元素匹配，交集X为1，Agreement A也是1。
- en: Let’s look at k = 2.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下k = 2。
- en: '![](../Images/03984ece2d4e5a426d4136f3a25f0ca4.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/03984ece2d4e5a426d4136f3a25f0ca4.png)'
- en: In this case, ***d*** ranges from 1 to 2, that is we compare the first 2 elements
    from the lists. The overlap, in this case, is 1 as only the first element is common.
    Hence, the Agreement is 1/2 or 0.5.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，***d*** 从1到2，即我们比较列表中的前两个元素。在这种情况下，重叠为1，因为只有第一个元素是共同的。因此，一致性为1/2或0.5。
- en: Similarly, we can continue for k = 3.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以继续进行k = 3。
- en: '![](../Images/d23813cc91da60f9dc8e5dea22e52149.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d23813cc91da60f9dc8e5dea22e52149.png)'
- en: Well, now that you understand how it works, you can continue the process until
    k = 7.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，现在你明白它是如何工作的，你可以继续这个过程，直到k = 7。
- en: 'You will get the **Average Overlap (AO)** as:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到**平均重叠（AO）**为：
- en: '![](../Images/489a81fbe260bc14194cf33b87c98cf0.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/489a81fbe260bc14194cf33b87c98cf0.png)'
- en: This can work for any number of elements in the two lists.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以适用于两个列表中的任何元素数量。
- en: 'We can generalize the above summation as:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将上述求和概括为：
- en: '![](../Images/fba4278a591d351f3926218ce6f7c743.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fba4278a591d351f3926218ce6f7c743.png)'
- en: '**This is the foundation for the similarity measures.**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**这就是相似度度量的基础。**'
- en: The Average Overlap is a similarity measure, comparing the two lists at a given
    depth.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 平均重叠是一个相似度度量，用于比较两个列表在给定深度上的相似度。
- en: 'Take a family of such similarity measures (SIM):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 取一组这样的相似度度量（SIM）：
- en: '![](../Images/b0f39debd3de5ea3d119fae6af0bf412.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b0f39debd3de5ea3d119fae6af0bf412.png)'
- en: It is a geometric series where the ***d’***thtermis of form 1/(1-**p**) where
    0 < **p** < 1.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个几何级数，其中***d'***项的形式为1/(1-**p**)，其中0 < **p** < 1。
- en: Plugging this in the formula above and rearranging the terms, we can get the
    **Rank Based Overlap for the lists S and T as:**
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 将其代入上面的公式并重新排列项，我们可以得到**列表S和T的排名基础重叠**为：
- en: '![](../Images/477a2f114ddb7881cb13aef4969ca202.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/477a2f114ddb7881cb13aef4969ca202.png)'
- en: The variable **p** lies in the range (0, 1) and can be used to determine the
    influence of the first **d** elements on the final similarity score.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 变量**p**位于范围（0，1）内，可以用于确定前**d**个元素对最终相似度分数的影响。
- en: 'To get a single RBO score, the above formula can be extrapolated. Assuming
    that the **Agreement** till the depth **k** is continued indefinitely among the
    two lists, it can be generalized as:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了得到一个单一的RBO分数，可以对上述公式进行外推。假设深度**k**的**一致性**在两个列表之间无限延续，可以将其概括为：
- en: '![](../Images/c64fb564aeb99e3b3f0342c65ec1680a.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c64fb564aeb99e3b3f0342c65ec1680a.png)'
- en: The RBO score lies between 0 and 1.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: RBO分数在0和1之间。
- en: 0 means completely disjoint and 1 means exactly the same ranked lists.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0表示完全不相交，而1表示完全相同的排名列表。
- en: '**We will use this formula for the python implementation of an RBO function!**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们将使用这个公式来实现RBO函数的Python代码！**'
- en: 'The paper also shows how we can choose **p** for giving a weightage (Wrbo)
    to the top **d** elements under comparison (I will not get into the derivation
    here):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 论文还展示了我们如何选择**p**来给前**d**个元素赋予权重（Wrbo）（我在这里不深入推导）：
- en: '![](../Images/aa7d049a61b23affc6753d9177076822.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aa7d049a61b23affc6753d9177076822.png)'
- en: '**We will use this formula to implement the weight calculator function.**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们将使用这个公式来实现权重计算器功能。**'
- en: '***Phew,*** that was a lot to process!'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '***呼，*** 这真是信息量很大啊！'
- en: But don’t worry, the formulae look a lot more complicated than they actually
    are — **you will see how simple it is with python.**
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 但不要担心，这些公式看起来比实际要复杂得多——**你会看到用Python实现起来是多么简单。**
- en: So I hope you are still here because the fun part begins now!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我希望你还在这里，因为有趣的部分现在开始了！
- en: A Simple Implementation of Rank Biased Overlap in Python
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的排名偏倚重叠的简单实现
- en: I use the above formulae to write a simple implementation of the Rank Biased
    Overlap and a weightage calculator function in python.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用上述公式在python中编写了Rank Biased Overlap的简单实现和一个权重计算函数。
- en: Now that you understand how RBO is derived, it is easy to implement.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你了解了RBO的推导过程，实施起来很简单。
- en: '[PRE0]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let’s check on our example lists S and T.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下我们的示例列表S和T。
- en: '[PRE1]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The RBO score of 0.88 means that the lists are nearly 90% similar (which we
    saw also in the average overlap calculation before).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: RBO得分0.88意味着列表几乎90%相似（这在之前的平均重叠计算中也看到过）。
- en: This is in no way a robust python implementation.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝对不是一个稳健的python实现。
- en: '*However, it is clearly good enough to get started!*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*然而，它显然足够好，可以开始使用！*'
- en: '**Now let’s also implement the weight calculator function to help us choose
    p.**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**现在让我们实现权重计算器函数，帮助我们选择p。**'
- en: '[PRE2]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let’s check if it works.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下它是否有效。
- en: As per the research paper, p of 0.9 gives the top 10 elements a weightage of
    86% in the final similarity score¹.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 根据研究论文，p为0.9时，前10个元素在最终相似性评分中的权重为86%¹。
- en: 'Using our above function:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们上面的函数：
- en: '[PRE3]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Yay, it works well — it gives 86% as indicated in the paper!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，它运行良好——与论文中指出的一致，得到了86%！
- en: '*We now have our arsenal ready.*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们现在准备好了工具。*'
- en: '**Let’s settle the score between you and your friend!**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**让我们解决你和你朋友之间的分数吧！**'
- en: Settle Your Fight!
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决你的争论！
- en: Let’s test it out by creating lists of Harry Potter movies in the order of how
    you and your friend watched them.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建哈利·波特电影的列表，以你和你朋友观看的顺序来测试一下。
- en: And then run your RBO function on it!
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在其上运行你的RBO函数！
- en: '[PRE4]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**0.78!**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**0.78！**'
- en: So, watching the movies out of sequence is definitely different, else the score
    would be 1!
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，按顺序观看电影确实很重要，否则分数会是1！
- en: '***But you can go even further.***'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '***但你可以更进一步。***'
- en: Usually, the first few movies introduce the characters and build the fictional
    world — ***hence it is qualitatively more important that you watch them first
    and in the correct order.***
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，前几部电影介绍了角色并构建了虚构的世界——***因此，按正确的顺序首先观看这些电影具有更高的质量重要性。***
- en: Let’s use the weight calculator and give the first 4 movies more weightage (86%).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用权重计算器，并给前四部电影更多的权重（86%）。
- en: With some trials in the weight calculator function, we get a weight of 86% for
    p = 0.75 and d = 4.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对权重计算函数的一些试验，我们得到p = 0.75和d = 4时的权重为86%。
- en: '[PRE5]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Hence, using p as 0.75 in the RBO function will give the first four movies
    more influence in the ranking comparison:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在RBO函数中使用p为0.75将使前四部电影在排名比较中有更大的影响：
- en: '[PRE6]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The resulting comparison score is **0.53!**
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 得到的比较得分是**0.53！**
- en: This means if you skip the first few movies, or watch them out of sequence,
    it is objectively bad.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果你跳过前几部电影，或以错误的顺序观看，它是客观上的不良。
- en: '**In fact, your friend’s viewing order is only half as good (53%) as compared
    to yours!**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**实际上，你朋友的观看顺序仅比你的顺序好一半（53%）！**'
- en: '*And now you have the math to prove it!*'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '*现在你有数学证明这一点！*'
- en: Advantages of RBO
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RBO的优势
- en: 'Rank-biased overlap is not the only method for comparing lists — the other
    methods are:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Rank-biased overlap并不是比较列表的唯一方法——其他方法包括：
- en: Kendall Tau³
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kendall Tau³
- en: Pearson’s Correlation⁴
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pearson相关系数⁴
- en: 'However, RBO has several advantages over them:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，RBO在以下几个方面优于其他方法：
- en: RBO is suitable for different lengths of the comparison lists (disjoint or nonsimilar)
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RBO适用于不同长度的比较列表（不相交或不相似）
- en: It has a weight measure — you can give more importance to the top or the bottom
    of the comparison
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有权重测量——你可以赋予比较中顶部或底部更多的重要性
- en: Due to these benefits, I decided to explain RBO in detail in this post.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些好处，我决定在这篇文章中详细解释RBO。
- en: However, feel free to look at the other two as I linked in the sources — *they
    are also used in different situations!*
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，欢迎查看我在来源中链接的其他两个——*它们在不同的情况下也会使用！*
- en: Conclusion
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: To summarize, in this post you learned one of the measures for comparing ranked
    lists — the **Rank Biased Overlap.**
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，在这篇文章中你学到了比较排名列表的一种度量——**Rank Biased Overlap。**
- en: You ventured through the mathematics of it
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经深入了解了它的数学原理
- en: Did a simple implementation in python
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在python中做了一个简单的实现
- en: Used the functions to do a practical comparison of the movie viewing order
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用这些函数对电影观看顺序进行了实际比较
- en: Understood its benefits!
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解了它的好处！
- en: Now anytime there is a disagreement about comparing movie rankings, viewing
    order, or basically any sequences, ***you can settle it like a pro!***
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在每当出现关于比较电影排名、观看顺序或基本上任何序列的分歧时，***你可以像专家一样解决问题！***
- en: '*Fin.*'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '*完结。*'
- en: '**Sources and notes:**'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源和注释：**'
- en: '[1] [Learning to Rank](https://en.wikipedia.org/wiki/Learning_to_rank)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] [学习排名](https://en.wikipedia.org/wiki/Learning_to_rank)'
- en: '[2] [A similarity measure for indefinite rankings — William Webber, Alistair
    Moffat, Justin Zobel](https://dl.acm.org/doi/10.1145/1852102.1852106)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] [不确定排名的相似性度量 — 威廉·韦伯，阿利斯泰尔·莫法特，贾斯廷·佐贝尔](https://dl.acm.org/doi/10.1145/1852102.1852106)'
- en: '[3] [Kendall rank correlation coefficient](https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] [肯德尔秩相关系数](https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient)'
- en: '[4] [Pearson correlation coefficient](https://en.wikipedia.org/wiki/Pearson_correlation_coefficient)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] [皮尔逊相关系数](https://en.wikipedia.org/wiki/Pearson_correlation_coefficient)'
- en: Copyrights to images, gifs, and scripts belong to the author.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图片、动图和脚本的版权归作者所有。
