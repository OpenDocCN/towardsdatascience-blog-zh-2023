["```py\n@classmethod\n    def as_completed(cls, fs, *, loop=None, timeout=None, total=None, **tqdm_kwargs):\n        \"\"\"\n        Wrapper for `asyncio.as_completed`.\n        \"\"\"\n        if total is None:\n            total = len(fs)\n        kwargs = {}\n        if version_info[:2] < (3, 10):\n            kwargs['loop'] = loop\n        yield from cls(asyncio.as_completed(fs, timeout=timeout, **kwargs),\n                       total=total, **tqdm_kwargs)\n```", "```py\n@classmethod\n    async def gather(cls, *fs, loop=None, timeout=None, total=None, **tqdm_kwargs):\n        \"\"\"\n        Wrapper for `asyncio.gather`.\n        \"\"\"\n        async def wrap_awaitable(i, f):\n            return i, await f\n\n        ifs = [wrap_awaitable(i, f) for i, f in enumerate(fs)]\n        res = [await f for f in cls.as_completed(ifs, loop=loop, timeout=timeout,\n                                                 total=total, **tqdm_kwargs)]\n        return [i for _, i in sorted(res)]\n```"]