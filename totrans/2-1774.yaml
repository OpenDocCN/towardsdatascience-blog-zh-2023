- en: Reduce your Cloud Composer bills (Part 2)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/reduce-your-cloud-composer-bills-part-2-af63da03806f](https://towardsdatascience.com/reduce-your-cloud-composer-bills-part-2-af63da03806f)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use Scheduled CICD pipelines to shut down environments and restore them to their
    previous state
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://marcgeremie.medium.com/?source=post_page-----af63da03806f--------------------------------)[![Marc
    Djohossou](../Images/096f7877d14b7671e48500175931dbea.png)](https://marcgeremie.medium.com/?source=post_page-----af63da03806f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----af63da03806f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----af63da03806f--------------------------------)
    [Marc Djohossou](https://marcgeremie.medium.com/?source=post_page-----af63da03806f--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----af63da03806f--------------------------------)
    ·5 min read·Mar 31, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5916b0798af7eae9eb8a1b97188a2840.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Sasun Bughdaryan](https://unsplash.com/@sasun1990?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: This is the second part of 2 parts series which goal is to introduce an efficient
    way to save money while using Cloud Composer for jobs orchestration. Thus, I highly
    recommend to check [the first part](https://medium.com/towards-data-science/reduce-your-cloud-composer-bills-f03e112df689)
    of the series if that’s not already done.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following are the main topics that will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Cloud Composer 2 pricing (Part 1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Snapshots as a way to shut down Composer and still preserve its state (Part
    1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Creating Composer Environments using Snapshots (Part 1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Summing Up (Part 1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Destroying Composer Environments To Save Money (Part 2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Updating Composer Environments (Part 2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Automating Composer Environments Creation and Destruction (Part 2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Summing Up (Part 2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Destroying Composer Environments To Save Money
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is how to reduce the Cloud Composer bill: **Shut down the environment
    while it’s not been used**.'
  prefs: []
  type: TYPE_NORMAL
- en: The key to the cost reduction strategy is to save a snapshot or state of the
    Composer Environment before destroying it. Please, note that this strategy won’t
    work for Environments that has orchestration jobs running continuously twenty-four
    hours a day, seven days a week, like production Environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The pipeline that destroys the Composer Environment has 3 steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Save a snapshot of the Environment
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the tasks logs to a backup Cloud Storage bucket
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the Environment and its bucket
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Similarly to the Environment Creation, we create a trigger to run the Environment
    Destruction CICD pipeline
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Updating Composer Environments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As time goes by, there will be the need to update the Cloud Composer Environments.
    Updating the Environment is handled as a separate CICD pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: The number of steps of this pipeline is expected to increase as the number of
    update operations grow. Following is a simple example of update pipeline where
    an environment variable is added to the Cloud Composer Environment after its creation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The associate CICD pipeline trigger needs to be created following the same principle
    as for Environment creation and destruction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Automating Composer Environments Creation, Update and Destruction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point, there are 3 pipelines in place to implement the Cloud Composer
    cost reduction strategy:'
  prefs: []
  type: TYPE_NORMAL
- en: The creation pipeline creates the Composer Environment from the latest snapshot
    to keep the state of orchestration jobs executions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The destruction pipeline destroys the Composer Environment after having saved
    its state in a snapshot
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The update pipeline is useful to apply any update to the Composer Environment
    every once in a while
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While it’s okay to keep the update pipeline runs manual, the cost reduction
    strategy requires the automation of the creation and destruction pipelines. This
    can be accomplished with the help of [Cloud Scheduler](https://cloud.google.com/scheduler?hl=fr).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Cloud Scheduler, as the name suggests is a managed Google Cloud service which
    can be used to schedule different tasks. In our case, the tasks that need to be
    run on schedule are the Cloud Build Triggers for Composer Environment creation
    and destruction.
  prefs: []
  type: TYPE_NORMAL
- en: From the Cloud Build interface, it’s possible to add a schedule to a Trigger.
    Firstly we enable the Cloud Scheduler API.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Then, we open the Environment Creation Trigger and click on *RUN ON SCHEDULE*
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/50c4a85826e56ce04b2d7e3266224a51.png)'
  prefs: []
  type: TYPE_IMG
- en: Image By Author, Add a Schedule to a Cloud Build Trigger
  prefs: []
  type: TYPE_NORMAL
- en: Then we configure the schedule. The most important parameters are the name of
    the schedule, its frequency and the service account to use to run the schedule.
    For instance, name the schedule *trg-environment-creator-schedule*, make it run
    *every day at 7 a.m except the weekend*, and use the *sac-cmp* service account
    to run the schedule job.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/296797e65f2bcd1b8c0f22d4b5de2cc3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image By Author, Add a Schedule to a Cloud Build Trigger
  prefs: []
  type: TYPE_NORMAL
- en: That is it for the Environment Creation. Now every day at 7 a.m, the environment
    will be automatically recreated from its latest snapshot.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we add a schedule to the Environment Destruction pipeline. We might
    use the name *trg-environment-destroyer-schedule* and a frequency of *0 21 * *
    1–5*, meaning that the Composer Environment will be automatically destroyed every
    day at 9 p.m.
  prefs: []
  type: TYPE_NORMAL
- en: Summing Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cloud Composer does not allow starting and stopping Environments, which put
    the service on the higher side, as far as cost in concerned. In my opinion, the
    best attempt to substantially reduce the price of Cloud Composer is to destroy
    and recreate the Environments.
  prefs: []
  type: TYPE_NORMAL
- en: However, the state of an Environment is lost when the Environment is destroyed.
    This is where Snapshots come into play. In the cost reduction strategy proposed,
    Snapshots are leveraged to save the state of Environments. In addition, tasks
    logs are also saved in a Cloud Storage backup bucket because they are not natively
    saved as part of Snapshots.
  prefs: []
  type: TYPE_NORMAL
- en: The destroy and recreate processes are made transparent to users with the help
    of Cloud Build and Cloud Scheduler. The Environment update is handled via a separate
    pipeline which is meant to be triggered manually on demand, anytime an update
    is needed.
  prefs: []
  type: TYPE_NORMAL
- en: The CICD pipelines code is available in this [Gitlab repository](https://gitlab.com/marcdjoh/reduce_composer_bill).
    Feel free to check it out. Thank you for your time and stay tuned for more.
  prefs: []
  type: TYPE_NORMAL
