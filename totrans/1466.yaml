- en: Make Beautiful (and Useful) Spaghetti Plots with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/make-beautiful-and-useful-spaghetti-plots-with-python-ec4269d7e8c9](https://towardsdatascience.com/make-beautiful-and-useful-spaghetti-plots-with-python-ec4269d7e8c9)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Stacked line charts are so hot right now!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@lee_vaughan?source=post_page-----ec4269d7e8c9--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----ec4269d7e8c9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ec4269d7e8c9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ec4269d7e8c9--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----ec4269d7e8c9--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ec4269d7e8c9--------------------------------)
    ·9 min read·Aug 16, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fedaf4e55bedea5aab332d21b73cc8b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Hunter Harritt](https://unsplash.com/@hharritt?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/Ype9sdOPdYc?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: 'There have been a *lot* of climate change articles recently, and many feature
    distinctive *stacked line charts* that summarize data over many decades. Here’s
    an example from the [*Climate Reanalyzer*](https://climatereanalyzer.org/clim/sst_daily/)
    that shows how sea temperatures over the last year-and-a-half have been well above
    average [1]:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ab6c58584ac93c1b200f233ca2eefaed.png)'
  prefs: []
  type: TYPE_IMG
- en: Global (60S-60N) Sea Surface Temperature (1981–2023) [1]
  prefs: []
  type: TYPE_NORMAL
- en: 'And here’s a similar chart from Dr. Zachary Labe’s [site](https://zacklabe.com/antarctic-sea-ice-extentconcentration/)
    showing the extent of Antarctic Sea ice over the last 40+ years [2]:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d15623fc1525214fdbbbf8d9a3bd1368.png)'
  prefs: []
  type: TYPE_IMG
- en: Antarctic sea ice extent (1978–2023) [2]
  prefs: []
  type: TYPE_NORMAL
- en: These charts have become a popular choice for *infographics*, such as in [this
    article](https://www.theguardian.com/world/2023/jul/29/something-weird-is-going-on-search-for-answers-as-antarctic-sea-ice-stays-at-historic-lows),
    but this popularity is a bit surprising [3]. Due to the difficulty in following
    individual lines through these dense, tangled displays, they’re generally shunned
    and disparaged as “spaghetti” plots.
  prefs: []
  type: TYPE_NORMAL
- en: But there’s a secret to using spaghetti plots successfully. You must *emphasize*
    one or two lines against a *diminished* background of all the other lines. This
    strategy lets you place the selected lines within an overall context. Do they
    represent *normal* outcomes or are they *outliers*? Are the results *really good*
    or *really bad*? By superimposing them on a background trend, the story can write
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: In this *Quick Success Data Science* project, we’re going to produce a facsimile
    of the previous Antarctic Sea Ice chart with the Plotly Express graphing library.
    With this code example, you should be able to generate similar plots for your
    own datasets.
  prefs: []
  type: TYPE_NORMAL
- en: National Snow and Ice Data Center
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For data we’ll use a comprehensive public dataset compiled by the [*National
    Snow and Ice Data Center*](https://nsidc.org/home), a part of the Cooperative
    Institute for Research in Environmental Sciences (CIRES) at the University of
    Colorado, Boulder [4]. This dataset utilizes satellite imagery to track and monitor
    changes in polar sea ice, such as the “halo” of ice around Antarctica.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ddae3e9de58928b91470652d170fe1bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 10 August 2023 sea ice extent based on satellite imagery [4]
  prefs: []
  type: TYPE_NORMAL
- en: The data comes in both monthly and daily increments. For the highest resolution
    possible, we’ll look at the daily data. For convenience, I’ve already downloaded
    the CSV file to this [Gist](https://gist.github.com/rlvaugh/219460e980f44fa72e3259118b0ce512).
    Additionally, a user guide can be found [here](https://nsidc.org/sites/default/files/g02135-v003-userguide_1_1.pdf#page=30).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Plotly Express* is a high-level version of the *Plotly* graphing library that
    makes beautiful, highly interactive visualizations. You can install it with either
    conda or pip.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the conda installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conda install -c plotly plotly_express`'
  prefs: []
  type: TYPE_NORMAL
- en: 'And here’s the pip version:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install plotly`'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll also need the pandas data analysis package. Install it with either:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conda install pandas`'
  prefs: []
  type: TYPE_NORMAL
- en: 'or:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install pandas`'
  prefs: []
  type: TYPE_NORMAL
- en: 'You may also need `nbformat`for Plotly Express. Install it with either:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conda install -c conda-forge nbformat`'
  prefs: []
  type: TYPE_NORMAL
- en: 'or:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install nbformat`'
  prefs: []
  type: TYPE_NORMAL
- en: The Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following code was written in Jupyter Lab and is presented *by cell*.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the imports. We’re using aliases for easier typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Normally, importing Plotly Express would be sufficient. Including Plotly’s `graph_objects`
    module, however, gives us more customization options (think matplotlib vs. seaborn).
    The `plotly.io` module will let us import Plotly’s ready-made design templates,
    saving us work.
  prefs: []
  type: TYPE_NORMAL
- en: Loading and Preparing the Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following commented code uses the pandas library to load the data from the
    Gist and prepare it for plotting. Part of this involves creating a new DataFrame
    column for the day of the year (January 1st = 1 and December 31st = 365 for non-leap
    years, 366 for leap years). We’ll use this `Day of Year` column for the x-axis
    in our line plots.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/df5bfae9f114327632d1345e4111dd5d.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot the Stacked Line Chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following commented code plots the stacked line chart for sea ice extent.
    The line for each year is first plotted in light gray. The years 2022 and 2023
    are then plotted in black and red, respectively, and with a thicker line weight.
    The objective is to show how dramatically the ice has retreated in the last two
    years.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/67aae9fcb963efa705bf151079e77672.png)'
  prefs: []
  type: TYPE_IMG
- en: Antarctic sea ice extent chart built using Plotly Express (image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Wow, what a gorgeous graph! And with Plotly Express, the legend is “live.” That
    means you can click on a year, and it will disappear from the plot. Double-click
    a year and all the other lines will disappear. What an easy way to untangle a
    spaghetti plot!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to use a *dark theme*, just replace the `template` argument with
    `plotly_dark` in the call to the `px.line()` method. You''ll also want to change
    the line color for the borders to `white` in the `fig.update_xaxes()` and `fig.update_yaxes()`
    methods, and for the year 2022 in the first call to `fig.update_traces()`. Here''s
    the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c32a4d9c5c0a28905a7e631d9a3b03b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Antarctic sea ice extent chart using the “plotly_dark” theme (image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: To turn these charts into persistent static images, just click the “camera”
    icon on the Plotly toolbar. This will save the chart as a *PNG* file.
  prefs: []
  type: TYPE_NORMAL
- en: Using a Fill Color
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An alternative to showing most of the lines in a *light* color is to use a
    *solid fill color* between the lines for *maximum* and *minimum* extent. Here’s
    an attractive example from Zack Labe [2]:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b1ae7ba453f893b7a08d6aa0a83c00cb.png)'
  prefs: []
  type: TYPE_IMG
- en: Antarctic sea ice anomalies (1979–2022) [2]
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try this approach with our previous plot. The first step is to calculate
    statistics on the `Extent` column grouped by the day of the year (`Day of Year`).
    For each daily grouping, pandas' `agg()` (aggregate) method will let us find the
    minimum and maximum values. We'll save the results in a new DataFrame named `bounds`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f0ea650ee9069b3a6caf2bc76c1043a7.png)'
  prefs: []
  type: TYPE_IMG
- en: If you look at the original CSV data file, you’ll see that the data is collected
    every other day. Over the years, every day of the year gets sampled, but not for
    any *given* year.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9119a3d3ac5650f96adac1c15e1c9d98.png)'
  prefs: []
  type: TYPE_IMG
- en: The head of the CSV data file (image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Because the extent value for *adjacent* days can come from *different* years,
    we can end up with “jittery” curves. This seems to be a bigger problem with the
    minimum extent values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f25721b971294e30ddbce8b88f5389ac.png)'
  prefs: []
  type: TYPE_IMG
- en: Irregular sampling leads to a jagged minimum extent curve (image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Smoothing the Minimum Extent Curve
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To smooth out this jagged curve, we just need to take the 2-day [*moving average*](https://en.wikipedia.org/wiki/Moving_average)
    of the data. This involves calling the pandas `rolling()` method on the column,
    passing it `2`, and then calling the `mean()` method. Because there's no data
    before the first row, it will be assigned a `NaN` value, so we'll drop it from
    the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/767988fee4d972ca85da6e667de58568.png)'
  prefs: []
  type: TYPE_IMG
- en: Highlighting the Last Two Years
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To easily highlight the sea ice extent for 2022 and 2023 on the new plot, we’ll
    filter our original DataFrame (`df`) to make two new DataFrames.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Plotting the Filled Chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following commented code generates the filled line chart. Because Plotly’s
    `plotly_dark` template isn't truly black, the first steps create a *custom* template
    where all the elements are black. This type of control is more easily done using
    *full Plotly*, rather than the higher-level Plotly Express package.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll use Plotly’s `go.Scatter()` method and pass it arguments for how
    to fill beneath the curves. For the upper `Max Extent` curve, we’ll use the `tonexty`
    argument to fill the area beneath the curve in dark gray. Then, for the smoothed
    `Min SMA2` curve, we’ll use the `tozeroy` argument to fill beneath it with black,
    overwriting the previous dark gray.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/814e38240749b5a6bd7b8508fa258bb3.png)'
  prefs: []
  type: TYPE_IMG
- en: The filled line chart plotted with a customized dark theme (image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Notice how far the gray fill is “pulled down” to connect with the final 2023
    data point. This demonstrates what a huge impact 2023 is having on the sea ice
    record.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting Standard Deviations with the Mean
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Many published sea ice charts include the mean and 2x the standard deviation
    for the 20-year period 1981–2010\. With the pandas `agg()` method, it''s easy
    to go back, filter the original DataFrame to these years, and then regenerate
    the `bounds` DataFrame to include columns for the mean and 2x the standard deviation.
    Here''s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d7c7c4f6eec83dbaff6fbb112671fd95.png)'
  prefs: []
  type: TYPE_IMG
- en: Filled line chart showing the 1981–2010 mean and 2x STD (image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: For Gaussian distributions, two standard deviations encompass over 95% of all
    samples. This really emphasizes the extreme nature of the last two years.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this article, we reproduced the stacked line chart technique popular for
    climate data visualizations. Not only did the Plotly library make this easy, but
    it also produced interactive digital graphs that can be saved as static images.
  prefs: []
  type: TYPE_NORMAL
- en: While spaghetti plots are often disparaged for their busy nature, if used correctly,
    they can tell a strong story. In this case, we used the *emphasis* technique to
    highlight a few lines while diminishing all the others.
  prefs: []
  type: TYPE_NORMAL
- en: For other strategies for making sense of spaghetti plots, visit the [story-telling-with-data
    site](https://www.storytellingwithdata.com/blog/2013/03/avoiding-spaghetti-graph).
    And to make similar plots using the matplotlib library, check out [IceVarFigs/README.md
    at master · zmlabe/IceVarFigs (github.com)](https://github.com/zmlabe/IceVarFigs/blob/master/README.md)
  prefs: []
  type: TYPE_NORMAL
- en: Citations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Birkel, S.D., “Daily Sea Surface Temperature,” Climate Reanalyzer (https://ClimateReanalyzer.org),
    Climate Change Institute, University of Maine, USA. Accessed on August 13, 2023\.
    (Climate Reanalyzer content is licensed under a [Creative Commons Attribution
    4.0 International License](http://creativecommons.org/licenses/by/4.0/)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Labe, Zachary, 2023, “Antarctic Sea Ice,” Climate Visualizations, ([https://zacklabe.com/](https://zacklabe.com/)),
    Princeton University and NOAA GFDL. Accessed on August 13, 2023\. (Content is
    licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Readfern, Graham, July 28, 2023, “‘Something Weird is Going On’: Search for
    Answers as Antarctic Sea Ice Stays at Historic Lows,” (https://theguardian.com).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fetterer, F., K. Knowles, W. N. Meier, M. Savoie, and A. K. Windnagel. Sea Ice
    Index, Version 3\. 2017, Distributed by National Snow and Ice Data Center. [https://doi.org/10.7265/N5K072F8](https://nsidc.org/data/g02135/versions/3).
    Date Accessed 08–09–2023.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Thanks!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Thanks for reading and please follow me for more *Quick Success Data Science*
    projects in the future.
  prefs: []
  type: TYPE_NORMAL
