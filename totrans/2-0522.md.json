["```py\nsudo pip3 install \"apache-airflow==2.7.1\" --constraint \"https://raw.githubusercontent.com/apache/airflow/constraints-2.7.1/constraints-3.9.txt\"\n```", "```py\ncd ~\nmkdir airflow && cd airflow\nexport AIRFLOW_HOME=/home/pi/airflow\nairflow db init\nairflow users create --role Admin --username airflow --password airflow --email admin --firstname admin --lastname admin\nmkdir dags\n```", "```py\n[Unit]\nDescription=Airflow webserver daemon\nAfter=network.target postgresql.service mysql.service redis.service rabbitmq-server.service\nWants=postgresql.service mysql.service redis.service rabbitmq-server.service\n\n[Service]\nEnvironmentFile=/home/pi/airflow/env\nUser=pi\nGroup=pi\nType=simple\nExecStart=/bin/bash -c 'airflow webserver --pid /home/pi/airflow/webserver.pid'\nRestart=on-failure\nRestartSec=5s\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n```", "```py\n[Unit]\nDescription=Airflow scheduler daemon\nAfter=network.target postgresql.service mysql.service redis.service rabbitmq-server.service\nWants=postgresql.service mysql.service redis.service rabbitmq-server.service\n\n[Service]\nEnvironmentFile=/home/pi/airflow/env\nUser=pi\nGroup=pi\nType=simple\nExecStart=/usr/bin/bash -c 'airflow scheduler'\nRestart=always\nRestartSec=5s\n\n[Install]\nWantedBy=multi-user.target\n```", "```py\nAIRFLOW_CONFIG=/home/pi/airflow/airflow.cfg\nAIRFLOW_HOME=/home/pi/airflow/\n```", "```py\nsudo systemctl daemon-reload\nsudo systemctl enable airflow-webserver.service\nsudo systemctl enable airflow-scheduler.service\nsudo systemctl start airflow-webserver.service\nsudo systemctl start airflow-scheduler.service\n```", "```py\nfrom pyyoutube import Api\n\ndef process_channels(requests_limit: int,\n                     data_path: str):\n    \"\"\" Get data for YouTube channels and save it in CSV file \"\"\"\n    ...\n```", "```py\nfrom airflow import DAG\nfrom airflow.decorators import task\nfrom airflow.models import Variable\nfrom datetime import datetime, timedelta\n\ndata_path = \"/home/pi/airflow/data/\"\n\ndefault_args={\n        \"depends_on_past\": False,\n        \"email\": [],\n        \"email_on_failure\": False,\n        \"email_on_retry\": False,\n        \"retries\": 1,\n        \"retry_delay\": timedelta(minutes=60),\n}\n\ndef create_dag():\n    \"\"\" Create a DAG object \"\"\"\n    return DAG(\n        \"dag_youtube\",\n        default_args=default_args,\n        description=\"YouTube Retreive\",\n        schedule_interval=timedelta(hours=12),\n        start_date=datetime(2021, 1, 1),\n        catchup=False,\n        tags=[\"youtube\"]\n    )\n\n@task(task_id=\"collect_channels_stats_gr1\")\ndef get_channels_stats_gr1():\n    import get_statistics as gs\n    limit = int(Variable.get(\"RequestLimit\"))\n    ret = gs.process_channels(limit, data_path)\n    return f\"GR1: {ret} channels saved\"\n\n@task(task_id=\"collect_channels_stats_gr2\")\ndef get_channels_stats_gr2():\n    import get_statistics as gs\n    limit = int(Variable.get(\"RequestLimit\"))\n    ret = gs.process_channels(limit, data_path)\n    return f\"GR2: {ret} channels saved\"\n\n@task(task_id=\"collect_channels_stats_gr3\")\ndef get_channels_stats_gr3():\n    import get_statistics as gs\n    limit = int(Variable.get(\"RequestLimit\"))\n    ret = gs.process_channels(limit, data_path)\n    return f\"GR3: {ret} channels saved\"\n\n# Create the DAG\nwith create_dag() as dag:    \n    get_channels_stats_gr1()\n    get_channels_stats_gr2()\n    get_channels_stats_gr3()\n```"]