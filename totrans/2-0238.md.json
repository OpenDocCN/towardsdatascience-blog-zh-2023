["```py\nimport { useState } from \"react\";\n\nexport default function App() {\n\n  const colors = [\"green\", \"red\"];\n  const [colorIdx, setColorIdx] = useState(0);\n\n  const onClickCallBack = () => setColorIdx(1 - colorIdx);\n\n  return (\n    <div className=\"App\">\n      <button\n        onClick={onClickCallBack}\n        style={{\n          background: colors[colorIdx],\n        }}\n      >\n        Click me\n      </button>\n    </div>\n  );\n}\n```", "```py\nimport { useState } from \"react\";\n```", "```py\nconst [colorIdx, setColorIdx] = useState(0);\n```", "```py\nconst onClickCallBack = () => setColorIdx(1 - colorIdx);\n```", "```py\n<button onClick={onClickCallBack} ...>\n```", "```py\nexport default function App() {\n\n  ... \n\n  console.log(\"click\");\n  console.log(colors[colorIdx]);\n\n  return (...)\n```", "```py\nimport { useState, useEffect } from \"react\";\n\nexport default function App() {\n\n  ...\n\n  useEffect(() => {console.log(\"click\")}, [])\n\n  console.log(colors[colorIdx]);\n  return (...)\n```", "```py\n<select\n  value=\"SP95\"\n  className=\"general-input\"\n>\n  {fuelTypes.map((e) => (\n    <option value={e}>{e}</option>\n  ))}\n</select>\n```", "```py\nconst [gasType, setGasType] = useState(\"SP95\");\n\n<select  value={selectedValue}  className=\"general-input\">...</select>\n```", "```py\nconst handleChangeDropdown = (event) => {\n  setGasType(event.target.value);\n};\n\n<select value={gasType} className=\"general-input\" onChange={handleChangeDropdown}>\n```", "```py\nconst [postalCode, setPostalCode] = useState(\"\");\n\nconst handleChangeTextArea = (event) => {\n  const newValue = event.target.value;\n  if (/^\\d{0,5}$/.test(newValue)) {\n    setPostalCode(newValue);\n  }\n};\n\n<input\n  type=\"text\"\n  placeholder=\"Postal Code\"\n  className=\"general-input\"\n  onChange={handleChangeTextArea}\n  value={postalCode}\n/>\n```", "```py\nconst handleButtonClick = () => {\n  console.log(`Postal Code: ${postalCode}, Gas Type: ${gasType}`)\n}\n\n<button className=\"send-request-button\" onClick={handleButtonClick}>\n  Find Stations\n</button>\n```", "```py\n{\n  \"lat\": 49.1414,\n  \"lon\": 2.5087,\n  \"city\": \"Orry-la-Ville\",\n  \"circle_lat\": [49.411,49.410,...],\n  \"circle_lon\": [2.5087,2.5347,...],\n  \"station_infos\": [\n    {\n      \"address\": \"Centre Commercial Villevert 60300 Senlis\",\n      \"price_per_L\": 1.88,\n      \"price_tank\": 113,\n      \"delta_average\": 7,\n      \"better_average\": 1,\n      \"google_map_link\": \"https://www.google.com/maps/search/?api=1&query=Centre+Commercial+Villevert+60300+Senlis\",\n      \"distance\": 10,\n      \"latitude\": 49.221,\n      \"longitude\": 2.591\n    },\n    {\n      \"address\": \"Rue de Pontoise 95540 Méry-Sur-Oise\",\n      \"price_per_L\": 1.9,\n      \"price_tank\": 114,\n      \"delta_average\": 6,\n      \"better_average\": 1,\n      \"google_map_link\": \"https://www.google.com/maps/search/?api=1&query=Rue+de+Pontoise+95540+Méry-Sur-Oise\",\n      \"distance\": 26,\n      \"latitude\": 49.061,\n      \"longitude\": 2.17\n    },\n    ...\n  ]\n}\n```", "```py\n// A parent component, made of a state variable and a Child component\nexport default function Parent() {\n\n  [variable, setVariable] = useState(0)\n  return ( \n    <Child childVariable={variable} /> \n  )\n}\n\n// We pass \"props\" as parameter of our children component\n// This props is an Object (key/value) which contains all the attributes passed\n// in the parent component\nexport default function Child(props) {\n  //We access the variable via props.childVariable\n  //It will return the current value stored in childVariable, which is in this case 0\n  console.log(props.childVariable)\n}\n```", "```py\nexport default function Parent() {\n\n  [variable, setVariable] = useState(0)\n\n  return ( \n    <Child childVariable={variable} setVariable={(newVal) => setVariable(newVal)}/> \n  )\n}\n\nexport default function Child(props) {\n  <button onClick={() => props.setVariable(props.childVariable+1)} />\n}\n```", "```py\nconst [stationsData, setStationsData] = useState([]);\nconst [latCity, setLatCity] = useState(0);\nconst [lonCity, setLonCity] = useState(0);\nconst [latCircle, setLatCircle] = useState([]);\nconst [lonCircle, setLonCircle] = useState([]);\n```", "```py\n<StationsFilter\n  setStationsData={setStationsData}\n  setLatCity={setLatCity}\n  setLonCity={setLonCity}\n  setLatCircle={setLatCircle}\n  setLonCircle={setLonCircle}\n/>\n\n//And don't forget to modify the definition of StationsFilter in StationsFilter.js \n//to include the props object !\n\n//In StationsFilter.js:\nexport default function StationsFilter(props) {...}\n```", "```py\nconst handleButtonClick = () => {\n  fetch(`${APIURL}/stations?oil_type=${gasType}&postal_code=${postalCode}`)\n    .then((res) => {\n      return res.json();\n    })\n    .then((data) => {\n      props.setStationsData([...data[\"station_infos\"]]);\n      props.setLonCity(data[\"lon\"]);\n      props.setLatCity(data[\"lat\"]);\n      props.setLonCircle([...data[\"circle_lon\"]]);\n      props.setLatCircle([...data[\"circle_lat\"]]);\n    });\n};\n```", "```py\n<StationsTable stationsData={stationsData} />\n```", "```py\nexport default function StationsTable(props) {...}\n```", "```py\n <tbody>\n     {props.stationsData.map((row) => {...})}\n </tbody>\n```", "```py\n<StationsMap\n  stationsData={stationsData}\n  latCircle={latCircle}\n  lonCircle={lonCircle}\n  lonCity={lonCity}\n  latCity={latCity}\n/>\n```", "```py\nconst circleTrace = {\n  fill:\"toself\",\n  fillcolor:\"rgba(1,1,1,0.2)\",\n  lat:props.latCircle,\n  lon:props.lonCircle,\n  marker:{\"color\":\"black\",\"size\":45},\n  mode:\"lines\",\n  opacity:0.8,\n  showlegend:false,\n  type:\"scattermapbox\",\n  uid: uuidv4()\n}\n```", "```py\nconst stationsBorder = {\n  lat: props.stationsData.map((e) => e[\"latitude\"]),\n  lon: props.stationsData.map((e) => e[\"longitude\"]),\n  marker: { color: \"black\", size: 45 },\n  mode: \"markers\",\n  opacity: 0.8,\n  showlegend: false,\n  text: props.stationsData.map((e) => e[\"price_per_L\"].toString() + \"€/L\"),\n  type: \"scattermapbox\",\n  uid: uuidv4()\n};\n```", "```py\nnpm install uuid\n```", "```py\nimport { v4 as uuidv4 } from \"uuid\";\n```", "```py\nconst data = [circleTrace,stationsBorder,stationsPriceColor,\n              stationIconsTrace,pointLocation];\n```", "```py\nconst { REACT_APP_API_KEY } = process.env;\n\nconst layout = {\n  mapbox: {\n    accesstoken: REACT_APP_API_KEY,\n    center: { lat: props.latCity, lon: props.lonCity },\n    style: \"streets\",\n    zoom: 11,\n  },\n  margin: { b: 0, l: 0, r: 0, t: 0 },\n  autosize: true,\n};\n```", "```py\nfuel-station-front/\n  |-- node_modules/\n  |-- public/\n  |-- src/\n  |-- package.json\n  |-- package-lock.json\n  |-- README.md\n  |-- .env\n```", "```py\nREACT_APP_API_KEY=pk.auek...\n```", "```py\n return (\n    <div className=\"component-embbeder\">\n      <Plot\n        data={data}\n        layout={layout}\n        style={{ height: \"100%\", width: \"100%\" }}\n        useResizeHandler={true}\n      />\n    </div>\n  );\n```", "```py\nconst ApiCallAndUpdateState = (gasType, postalCode) => {\n  fetch(`${APIURL}/stations?oil_type=${gasType}&postal_code=${postalCode}`)\n  .then((res) => {\n    return res.json();\n  })\n  .then((data) => {\n    setStationsData([...data[\"station_infos\"]]);\n    setLonCity(data[\"lon\"]);\n    setLatCity(data[\"lat\"]);\n    setLonCircle([...data[\"circle_lon\"]]);\n    setLatCircle([...data[\"circle_lat\"]]);\n  });\n}\n```", "```py\nuseEffect(() => {\n  ApiCallAndUpdateState(\"SP98\",\"75001\")\n}, [])\n```", "```py\n<StationsFilter\n    ApiCallAndUpdateState={ApiCallAndUpdateState}\n/>\n```", "```py\nconst handleButtonClick = () => {\n  props.ApiCallAndUpdateState(gasType, postalCode)\n};\n```", "```py\nnpm i react-slider\n```", "```py\nimport ReactSlider from \"react-slider\";\n```", "```py\nconst [distanceFilter, setDistanceFilter] = useState(5);\n```", "```py\n<StationsFilter ApiCallAndUpdateState={ApiCallAndUpdateState} />\n<ReactSlider\n  className=\"horizontal-slider\"\n  markClassName=\"example-mark\"\n  thumbClassName=\"example-thumb\"\n  trackClassName=\"example-track\"\n  min={1}\n  max={30}\n  value={distanceFilter}\n  renderThumb={(props, state) => (\n    <div {...props}>{state.valueNow}</div>\n  )}\n  onAfterChange={(e) => setDistanceFilter(e)}\n/>\n<StationsTable stationsData={stationsData} />\n```", "```py\nconst filteredData = stationsData.filter(stationPrice => stationPrice.distance <= distanceFilter);\n```", "```py\n |-- StationsMap/\n      |-- StationsMap.js\n      |-- StationsMap.css\n      |-- utils/\n        |-- drawCircle.js\n```", "```py\nfunction calcPointsOnCircle(lat, lon, radius, numPoints) {\n  const points = [];\n  const R = 6371;\n\n  for (let i = 0; i < numPoints; i++) {\n    const bearing = (360 / numPoints) * i;\n    const lat2 = Math.asin(\n      Math.sin(toRadians(lat)) * Math.cos(radius / R) +\n        Math.cos(toRadians(lat)) *\n          Math.sin(radius / R) *\n          Math.cos(toRadians(bearing))\n    );\n    const lon2 =\n      toRadians(lon) +\n      Math.atan2(\n        Math.sin(toRadians(bearing)) *\n          Math.sin(radius / R) *\n          Math.cos(toRadians(lat)),\n        Math.cos(radius / R) - Math.sin(toRadians(lat)) * Math.sin(lat2)\n      );\n    points.push([toDegrees(lat2), toDegrees(lon2)]);\n  }\n\n  points.push(points[0]);\n\n  return points;\n}\n\nfunction toRadians(degrees) {\n  return (degrees * Math.PI) / 180;\n}\n\nfunction toDegrees(radians) {\n  return (radians * 180) / Math.PI;\n}\n```", "```py\nexport { calcPointsOnCircle };\n```", "```py\nimport { calcPointsOnCircle } from \"./utils/drawCircle\";\n...\n\nexport default function StationsMap(props) {\n\n  // We use our function to create an array of points based on the state variables\n  const pointsOnCircle = calcPointsOnCircle(\n    props.latCity,\n    props.lonCity,\n    props.distanceFilter,\n    100\n  );\n\n  // We use map() to extract all the lat and all the lon and pass them to the \n  // circleTrace\n  const circleTrace = {\n    fill: \"toself\",\n    fillcolor: \"rgba(1,1,1,0.2)\",\n    lat: pointsOnCircle.map((e) => e[0]),\n    lon: pointsOnCircle.map((e) => e[1]),\n    marker: { color: \"black\", size: 45 },\n    mode: \"lines\",\n    opacity: 0.8,\n    showlegend: false,\n    type: \"scattermapbox\",\n    uid: uuidv4(),\n  };\n\n  ...\n```", "```py\nconst mapDistZoom = {\n  1: 14.0,\n  2: 13.45,\n  3: 12.9,\n  ...\n};\n\n...\nconst layout = {\n  mapbox: {\n    accesstoken: REACT_APP_API_KEY,\n    center: { lat: props.latCity, lon: props.lonCity },\n    style: \"streets\",\n    zoom: mapDistZoom[props.distanceFilter],\n  },\n  margin: { b: 0, l: 0, r: 0, t: 0 },\n  autosize: true,\n};\n```", "```py\nconst [citySearch, setCitySearch] = useState(\"\");\nconst [gasTypeSearch, setGasTypeSearch] = useState(\"\");\n```", "```py\nconst ApiCallAndUpdateState = (gasType, postalCode) => {\n  fetch(`${APIURL}/stations?oil_type=${gasType}&postal_code=${postalCode}`)\n    .then((res) => {\n      return res.json();\n    })\n    .then((data) => {\n      ...\n      setGasTypeSearch(gasType);\n      setCitySearch(data[\"city\"]);\n    });\n};\n```", "```py\n <h2 style={{ padding: \"1px\", margin: \"5px\", textAlign: \"center\" }}>\n    {citySearch} - {gasTypeSearch}\n  </h2>\n```", "```py\n const sumPrice = stationsData.reduce(\n    (total, value) => total + value[\"price_per_L\"],\n    0\n  );\n\n  const avgPrice = sumPrice / stationsData.length;\n```", "```py\n<StationsMap\n  ...\n  avgPrice={avgPrice}\n/>\n```", "```py\nconst COLOR_PRICE_THRESHOLD = 0.1\nconst stationsPriceColor = {\n    marker: {\n      color: props.stationsData.map((e) => {\n        var price = e[\"price_per_L\"];\n        if (price > props.avgPrice * (1+COLOR_PRICE_THRESHOLD)) {\n          price = props.avgPrice * (1+COLOR_PRICE_THRESHOLD);\n        }\n        if (price < props.avgPrice * (1-COLOR_PRICE_THRESHOLD)) {\n          price = props.avgPrice * (1-COLOR_PRICE_THRESHOLD);\n        }\n        return price;\n      }),\n      ...\n    },\n    ...,\n  };\n```", "```py\n hovertemplate: '%{text}<extra></extra>'\n```", "```py\nhoverinfo: \"skip\"\n```", "```py\nconst [apiError, setApiError] = useState(false);\n```", "```py\nfetch(`${APIURL}/stations?oil_type=${gasType}&postal_code=${postalCode}`)\n  .then((res) => {\n    if (!res.ok) {\n      throw new Error(\"Problem with the API...\");\n    }\n    return res.json();\n  })\n  .then((data) => {...})\n```", "```py\nfetch(`${APIURL}/stations?oil_type=${gasType}&postal_code=${postalCode}`)\n  .then((res) => {...})\n  .then((data) => {\n    ...\n    setApiError(false);\n  })\n  .catch((error) => {\n    setApiError(true);\n  });\n```", "```py\n<input\n  className={\"general-input\" + (props.apiError ? \" input-error\" : \"\")}\n  type=\"text\"\n  placeholder=\"Postal Code\"\n  onChange={handleChangeTextArea}\n  value={postalCode}\n/>\n```", "```py\n.input-error {\n  border: solid 2px red;\n}\n```"]