["```py\nimport mido  # pip3 install mido\n\nmid = mido.MidiFile(\"Beethoven/Bagatelle.mid\", clip=True)\nfor ind, track in enumerate(mid.tracks):\n    print(f\"Track {ind}\")\n    for item in track[:10]:\n        print(item)\n```", "```py\nTrack 0\nMetaMessage('track_name', name='L.v.Beethoven Bagatelle in C minor WoO 52', time=0)\nMetaMessage('text', text='XFhd:2001/08/21:JP:Classical::::L.v.Beethoven::', time=0)\nMetaMessage('time_signature', numerator=3, denominator=4, clocks_per_click=96, notated_32nd_notes_per_beat=8, time=0)\nMetaMessage('sequencer_specific', data=(0, 0, 65), time=0)\n...\nTrack 1\nMetaMessage('track_name', name='Right', time=0)\nMetaMessage('key_signature', key='Eb', time=0)\nnote_on channel=0 note=72 velocity=80 time=3072\nnote_off channel=0 note=72 velocity=100 time=380\nnote_on channel=0 note=72 velocity=80 time=4\n...\nTrack 2\nMetaMessage('track_name', name='Left', time=0)\nMetaMessage('key_signature', key='Eb', time=0)\nnote_on channel=1 note=43 velocity=100 time=768\nnote_off channel=1 note=43 velocity=100 time=380\nnote_on channel=1 note=43 velocity=100 time=4\n...\n```", "```py\ndef extract_midi_notes(file_path: str) -> List[int]:\n    \"\"\" Get all notes from a MIDI file \"\"\"\n    notes = []\n    mid = mido.MidiFile(file_path, clip=True)\n    for track in mid.tracks:\n        for item in track:\n            # Example:\n            # {'type': 'note_on', 'time': 241, 'note': 67, 'velocity': 56, 'channel': 0}\n            item_data = item.dict()\n            if item_data[\"type\"] == \"note_on\":\n                note = item_data[\"note\"]\n                velocity = item_data[\"velocity\"]\n                if velocity > 0:\n                    notes.append(note)\n    return notes\n```", "```py\ndef get_notes(files_mask: str):\n    \"\"\" Get all notes from several files \"\"\"\n    midi_notes = []\n    for file_path in glob.glob(files_mask):\n        midi_notes += extract_midi_notes(file_path)\n    return midi_notes\n```", "```py\nimport matplotlib.pyplot as plt\n\n# Get data\nfiles_mask = \"Tchaikovsky/*.mid\"\nmidi_notes = get_notes(files_mask)\n\n# Draw\nfig, ax = plt.subplots(figsize=(7, 5))\nplt.hist(midi_notes, density=False, bins=60, range=[21, 108], edgecolor='#505070')\nplt.ylabel('Count')\nplt.xlabel('MIDI Notes')\nax.spines['top'].set_color('#EEEEEE')\nax.spines['right'].set_color('#EEEEEE')\nax.spines['bottom'].set_color('#888888')\nax.spines['left'].set_color('#888888')\nplt.tight_layout()\nplt.title(files_mask.split(\"/\")[0])\nplt.show()\n```", "```py\nfig, ax = plt.subplots(figsize=(14, 3))\n\ndef draw_patch(ax, x: int, y: int, w: int, h: int, color: str, alpha=0.6):\n    \"\"\" Draw a patch in specific coordinates and color \"\"\"\n    #  H\n    #  |\n    # (xy)--W\n    ax.add_patch(Rectangle((x, y), w, h,\n                            facecolor=color, edgecolor=None,\n                            alpha=alpha, fill=True,\n                            linewidth=1, zorder=2))\n\ndef draw_black_note(ax, x_pos: int, key_width: int, keyb_height: int):\n    \"\"\" Draw a black note in a specific X-position \"\"\"\n    note_w = 0.4*key_width\n    ax.plot([x_pos - note_w, x_pos - note_w, x_pos + note_w, x_pos + note_w],\n            [keyb_height-1, 0.25*keyb_height, 0.25*keyb_height, keyb_height-1], color=\"#111111\")\n\n    draw_patch(ax, x_pos - note_w, 0.25*keyb_height, 2*note_w, 0.75*keyb_height, color=\"#000000\")\n\nnum_octaves = 9\nnote_per_octave = 7\nkey_width, key_height = 20, 160\n\n# Key names\nkey_names = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]\n\n# Draw frame\nkeyb_width = num_octaves*note_per_octave*key_width\nax.plot([0, keyb_width, keyb_width, 0, 0], [0, 0, key_height, key_height, 0], color=\"#0000AA\")\n\n# Draw octaves\nfor oct_num in range(num_octaves):\n    oct_xpos = oct_num*key_width*7\n    # Octave separator\n    ax.plot([oct_xpos, oct_xpos], [0, key_height-1], color=\"#0000AA\")\n    # Note separator\n    for note_num in range(1, 7):\n        x_pos = oct_num*key_width*7 + note_num*key_width\n        ax.plot([x_pos, x_pos], [1, key_height-1], color=\"#EEEEEE\")\n\n    # Black keys\n    for black_pos_ind in [1, 2, 4, 5, 6]:\n        x_pos = oct_xpos + black_pos_ind*key_width\n        draw_black_note(ax, x_pos, key_width, key_height)\n\n    # White keys\n    for note_ind in range(note_per_octave):\n        x_pos = oct_num*key_width*7 + note_ind*key_width\n        key_name = f\"{key_names[note_ind]}{oct_num}\"\n\n        # Text\n        ax.text(x_pos + key_width/2, 0.1*key_height, key_name, verticalalignment='bottom',\n                horizontalalignment='center', color='black', fontsize=9)\n\nplt.axis(\"off\")\nplt.xlim(5*key_width - 1, 57*key_width + 1)\nplt.tight_layout()\nplt.show()\n```", "```py\ndef get_midi_code(key_name: str) -> int:\n    \"\"\" Convert key name to the MIDI code. 'E3' => 52 \"\"\"\n    # MIDI codes: C0 - 12, D0 - 14, etc; 12 keys in octave\n    key_names = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n    # \"E1\" => E, 1\n    name, octave = key_name[0], int(key_name[1])\n    return (octave + 1)*12 + key_names.index(name)\n```", "```py\nmidi_notes = get_notes(\"Tchaikovsky/*.mid\")\nnotes_counter = Counter(midi_notes)\n\nmost_common = notes_counter.most_common(1)[0]\nprint(f\"Most common MIDI code {most_common[0]}, was used {most_common[1]} times\")\n#> Most common MIDI code 61, was used 171 times\n\nmidi_code = get_midi_code(\"C4\")\nprint(f\"C4 note was used {notes_counter[midi_code]} times\")\n#> C4 note was used 123 times\n```", "```py\nfor note_ind in range(note_per_octave):\n    x_pos = oct_num*key_width*7 + note_ind*key_width\n    key_name = f\"{key_names[note_ind]}{oct_num}\"\n\n    midi_code = get_midi_code(key_name)\n    # Number as a heatmap\n    use_count = notes_counter[midi_code]\n    if use_count > 0:\n        color = \"#FF0000\"\n        max_note_count = most_common[1]\n        alpha = use_count/max_note_count\n        margin = 0.1*key_width\n        draw_patch(ax, x_pos + margin, 0.02*key_height, key_width - 2*margin,\n                   0.2*key_height, color, alpha=alpha)\n\n    # Number as text\n    ax.text(x_pos + key_width/2, 0.05*key_height, str(use_count),\n            verticalalignment='bottom', horizontalalignment='center',\n            color='#333333', fontsize=7)\n```"]