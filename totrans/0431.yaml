- en: Automate Soil Profile in PLAXIS Using Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/build-soil-profile-in-plaxis-using-python-a9c870e253c7](https://towardsdatascience.com/build-soil-profile-in-plaxis-using-python-a9c870e253c7)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PLAXIS AUTOMATION SERIES
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Step-by-step guide toward automation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@philip.studio11?source=post_page-----a9c870e253c7--------------------------------)[![Philip
    Tsang](../Images/d0a2cd2992cd8db421354e7eab77c655.png)](https://medium.com/@philip.studio11?source=post_page-----a9c870e253c7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a9c870e253c7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a9c870e253c7--------------------------------)
    [Philip Tsang](https://medium.com/@philip.studio11?source=post_page-----a9c870e253c7--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a9c870e253c7--------------------------------)
    ·10 min read·Jan 4, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/44a11b0f334c6a4f666bad1cd8f09828.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Kevin Ku](https://unsplash.com/@ikukevk?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/w7ZyuGYNpRQ?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: As a Geotechnical Engineer, one of the most important PLAXIS workflows is to
    build soil profile and assign correct soil properties. Although the interface
    for soil input is user-friendly, this process can be time-consuming.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are potential rooms for improvement:'
  prefs: []
  type: TYPE_NORMAL
- en: Create multiple boreholes in a single table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign soil properties to each layer automatically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Capability to use repeated soil properties. Of course this can also be achieved
    with PLAXIS built-in “.matXdb” to store material database. However, Excel format
    allows more flexibility to change material properties as per project, as well
    as having the possibility to link to another master spreadsheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This tutorial aims to extend the lesson learnt from the **4th tutorial**. We
    will further develop our Excel interface to define soil profile and assign soil
    properties in PLAXIS.
  prefs: []
  type: TYPE_NORMAL
- en: Read values from Excel using Pandas
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Input soil depth with Excel and create soil profile
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Input soil properties with Excel and assign material
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As before, this tutorial requires the readers have VS Code and PLAXIS environment
    installed. Follow the instructions from the article below if you’re new to this
    page.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/start-using-python-to-automate-plaxis-35a5297321e7?source=post_page-----a9c870e253c7--------------------------------)
    [## Start Using Python to Automate PLAXIS'
  prefs: []
  type: TYPE_NORMAL
- en: Step-by-step guide toward automation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/start-using-python-to-automate-plaxis-35a5297321e7?source=post_page-----a9c870e253c7--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Also, we will also need *pandas* installed to the PLAXIS environment. Follow
    the instructions below to install external modules if you haven’t done so.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/plaxis-output-visualisation-using-python-a144d2367094?source=post_page-----a9c870e253c7--------------------------------)
    [## PLAXIS Output Visualisation Using Python'
  prefs: []
  type: TYPE_NORMAL
- en: Step-by-step guide toward automation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/plaxis-output-visualisation-using-python-a144d2367094?source=post_page-----a9c870e253c7--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Excel Input Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to the 4th tutorial, we want to create an Excel input template and create
    soil profile in PLAXIS.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create an empty excel spreadsheet, call it “Soil_input”. The interface
    contains two worksheets:'
  prefs: []
  type: TYPE_NORMAL
- en: OHE Ground Profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Soil properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/e5b82de19a2cb7bc032b81dc27eeee5c.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from Excel by the author
  prefs: []
  type: TYPE_NORMAL
- en: When you create the worksheets, ensure they follow the same names as shown above
    as the naming is case-sensitive.
  prefs: []
  type: TYPE_NORMAL
- en: OHE Ground Profile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The purpose of the “OHE Ground Profile” worksheet is to define the name and
    depth of soil units. These values will be used to create corresponding boreholes
    in PLAXIS. It involves four input values as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: specify the name of each borehole. This row will not be extracted in
    Python but it’s a good tracker of which boreholes we are working on. For example,
    column B contains all the input values for “BH1”.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'x coord: define the x coordinate of each borehole.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Top: define the y coordinate at the top of each borehole. In other words, the
    top R.L. in terms of geotechnical engineering.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Soil unit name & layer coordinates: starting from row 4, we will first define
    the name of soil unit name in column A. Then we input the **bottom y coordinate**
    of each unit under each borehole.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It should be emphasised that this template is designed to input the bottom coordinate
    of each unit. Another important note is that we should input all the units across
    all the boreholes in column A. Similar to the logic of PLAXIS interface, if we
    encounter a unit which doesn’t exist in a borehole, we put the same y coordinate
    as the previous unit.
  prefs: []
  type: TYPE_NORMAL
- en: Take “BH1” as an example, we put 4 m for both “SSIV” and “SSIII”, which means
    “SSIII” doesn’t exist in “BH1”.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/88bd96bf8cca2546e3ea867a9319291d.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from Excel by the author
  prefs: []
  type: TYPE_NORMAL
- en: Soil properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The purpose of this worksheet is to define the soil properties of each unit.
    This contains the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: Name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Material
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit weight (kN/m3)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Young’s Modulus, E’ (kPa)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poisson ratio, v (nu) (-)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cohesion, c’ (kPa)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Friction angle, phi (degree)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tensile strength (kPa)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interface strength (-)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'K0 auto?: T/F which determines if K0 is calculated automatically in PLAXIS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'K0x = K0y?: T/F to determine if K0x is equivalent to K0y'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: K0x (-)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: K0y (-)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/5692a979d30724aba26dfab474cfc9aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from Excel by the author
  prefs: []
  type: TYPE_NORMAL
- en: These are typical material properties for Mohr-Coulomb model in PLAXIS 2D, just
    to ensure all input properties are in the correct unit. It should also be noted
    that this template is only designed for **Drained** condition.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have created the excel spreadsheet with the worksheets and values
    as outlined above.
  prefs: []
  type: TYPE_NORMAL
- en: Once the input file is created, we are ready to move to the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Read Values from Excel Using Pandas'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main goal of Step 1 is to set the soil contour and read the excel input
    template.
  prefs: []
  type: TYPE_NORMAL
- en: First, we create an empty python file and call it “soil_geometry.py”.
  prefs: []
  type: TYPE_NORMAL
- en: Import Modules and Start Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to previous tutorial, we will start off by importing relevant modules
    and start server.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Read Excel File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'File location: C:\Users\phtsang\Desktop\PLAXIS_V22\Python_automation'
  prefs: []
  type: TYPE_NORMAL
- en: 'File name: spreadsheet we created earlier which is “Soil_input.xlsx”'
  prefs: []
  type: TYPE_NORMAL
- en: Since we want to extract values from “OHE Ground Profile”, we will use “pd.read_excel()”
    and specify the worksheet we want to read using “sheet_name”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once we have the Excel template set up, we can then use these values to create
    soil profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Input soil depth with Excel and create soil profile'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Step 2, we will extract the borehole values from the “OHE Ground Profile”
    worksheet and create soil profile accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: The information involved in the input table is shown below. We will need this
    to reference our code.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/88bd96bf8cca2546e3ea867a9319291d.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from Excel by the author
  prefs: []
  type: TYPE_NORMAL
- en: We will be using **pandas**‘s methodsto extract values from Excel. Detailed
    explanation can be found in the following article.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/using-python-to-interact-with-excel-plaxis-input-a2124f6ebc72?source=post_page-----a9c870e253c7--------------------------------)
    [## Using Python to Interact With Excel (PLAXIS Input)'
  prefs: []
  type: TYPE_NORMAL
- en: Step-by-step guide toward automation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/using-python-to-interact-with-excel-plaxis-input-a2124f6ebc72?source=post_page-----a9c870e253c7--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to extract values from “OHE Ground Profile” worksheet and stores
    as “df_soil”.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Then, we need to create the 1st borehole with the X coordinate from the “BH1”
    column (i.e. df_soil.iloc[0,1]). It should be noted that the first row is skipped
    from dataframe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Create the first soil layer using PLAXIS command ‘g_i.soillayer(0)’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After that, we will set the top y coordinate of 1st borehole using the command
    as shown below.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Soillayers[0]: represents the first soil layer. Soillayers[1] will then represent
    the second layer etc.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Zones[0]: represents the 1st borehole.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Top.set: allows us to specify the top y coordinate of the soil unit. This only
    needs to be set once for the first layer as the following layers will automatically
    take the bottom y coordinate from previous layer as their top y coordinate (similar
    to what PLAXIS does).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Next, we loop through other borehole columns (i.e. BH2–4) to (1) create boreholes
    with the given x coordinates and (2) set top y coordinates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Once we set the top coordinate of each borehole, we then loop through the rest
    of the layers and set the corresponding bottom coordinates for 1st borehole.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here we need to check if the loop reaches the last layer. If we don’t reach
    the last layer, need to create a new layer using the command ‘g_i.soillayer(1)’,
    otherwise, don’t create a new layer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, we loop through the rest of the boreholes except 1st borehole and set
    the bottom coordinates with the following code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The final script should be as follow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b11d38dd8f4a805168004c03d792350c.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from VS Code by the author
  prefs: []
  type: TYPE_NORMAL
- en: Once the soil profile is created, we can then define the soil properties for
    each soil unit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Input soil properties with Excel and assign material'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Step 3, we aim to extract the soi properties from the “Soil properties” worksheet
    and assign these properties to the layer object (i.e. “SZ”, “SSIV” etc) we specified
    in column A in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: The information involved in the input table is shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5692a979d30724aba26dfab474cfc9aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from Excel by the author
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the previous step, we first read the values from “Soil properties”
    and store them as dataframe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The typical soil properties for Mohr-Coulomb model are mentioned under “Excel
    Input Interface”. We will loop through the rows in the table and use iloc to find
    each value and assign them to corresponding variables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To access soil models in PLAXIS using Python, numerical value should be used
    which is in the order displayed in PLAXIS. For example, the “Linear Elastic” model
    is represented by 1 and the “Mohr-Coulomb” model is represented by 2, and so forth
    and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Then, we will assign an interface strength ratio if a value is given in the
    Excel template. To do this, we need to assign “Manual” as a string to ‘InterfaceStrength’
    and the given ratio to ‘Rinter’. If no value is provided, “Rigid” will be assigned
    to ‘InterfaceStrength’ automatically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Last component of the soil properties is the K0 condition. We need to decide
    if the K0 determination is “Manual” or “Automatic”. In PLAXIS-Python environment,
    “Automatic” and “Manual” are represented by 0 and 1 respectively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also need to check if K0x = K0y based on user input. The checked and
    unchecked box of “K0x = K0y” are represented by True and False in Python respectively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Then, use PLAXIS command ‘setproperties()’ to set material properties, similar
    to the 4th tutorial.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After that, we store the soil material as objects to ‘soilmat’.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Last step is to set material to the soil layer according to the “Name” column
    (i.e. column A) in the “OHE Ground Profile” worksheet. We will need to use if
    to check the material name provided in the table. If the name of the material
    matches the existing material object, assign that material to the soil layer using
    ‘Soils.setmaterial()’.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The final script is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/09e9348e1db222379da33b3b85b95107.png)![](../Images/14d0696f98a9650867f522eda5c7b718.png)![](../Images/5636dba803b1cfea3f83130662fffb60.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from VS Code by the author
  prefs: []
  type: TYPE_NORMAL
- en: Run the script with the following.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You should see the following is created in PLAXIS 2D. As you see from the soil
    windows, all boreholes have been created according the inputs from Excel.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dd066281dbd24d1bdaf47d0d358434d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from PLAXIS by the author
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/01dfedf74f951255c95ea2380c00836c.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from PLAXIS by the author
  prefs: []
  type: TYPE_NORMAL
- en: In terms of soil properties, all soil units have been created with the properties
    we specified in the input table.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c58a9cdee30e4b6b39aa10c7f87b74bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Brilliant! We have just created a soil profile with material definition using
    a user interface for PLAXIS 2D.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That’s all for the fifth tutorial on creating soil profile including material
    definitions using Python. After this tutorial, you should be able to obtain soil
    input from excel and create profile, as well as assign soil properties in PLAXIS.
  prefs: []
  type: TYPE_NORMAL
- en: If you enjoy reading this type of content, feel free to follow my page. I will
    keep posting this series of tutorials on automating PLAXIS with Python. Apart
    from that, I’m also keen to share knowledge on how to use Python to automate workflow
    in engineering.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@philip.studio11/membership?source=post_page-----a9c870e253c7--------------------------------)
    [## Join Medium with my referral link - Philip Tsang'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Philip Tsang (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@philip.studio11/membership?source=post_page-----a9c870e253c7--------------------------------)
  prefs: []
  type: TYPE_NORMAL
