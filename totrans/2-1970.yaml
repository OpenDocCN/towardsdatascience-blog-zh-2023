- en: Test Data Pipelines the Fun and Easy Way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://towardsdatascience.com/test-data-pipelines-the-fun-and-easy-way-d0f974a93a59](https://towardsdatascience.com/test-data-pipelines-the-fun-and-easy-way-d0f974a93a59)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Beginners guide: Why unit and integration tests are so important for your data
    platform'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://mshakhomirov.medium.com/?source=post_page-----d0f974a93a59--------------------------------)[![ðŸ’¡Mike
    Shakhomirov](../Images/bc6895c7face3244d488feb97ba0f68e.png)](https://mshakhomirov.medium.com/?source=post_page-----d0f974a93a59--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d0f974a93a59--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d0f974a93a59--------------------------------)
    [ðŸ’¡Mike Shakhomirov](https://mshakhomirov.medium.com/?source=post_page-----d0f974a93a59--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Â·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d0f974a93a59--------------------------------)
    Â·10 min readÂ·Feb 22, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ec79de49e60c28a7517c3d1f8392b35b.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Simon Wilkes](https://unsplash.com/@simonfromengland?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: This story is for those who would like to learn how to code and how to run **tests,
    automate CI/CD checks and run them in any environment including locally.**
  prefs: []
  type: TYPE_NORMAL
- en: '**Unit testing** is an essential must-have skill for machine learning engineers
    these days. It looks great on your CV and increases the chances of getting employed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Iâ€™m a Data Engineer and very often I need to create microservices **to process
    the data (ETL).** Depending on the task we might want to do the following (not
    an extensive list):'
  prefs: []
  type: TYPE_NORMAL
- en: Extract data from one source and pass it to another.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transform the data along the way, i.e. change format, PII masking, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load the data somewhere else, i.e. data warehouse solution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In each of these cases, we would want to guarantee that our data services perform
    as required, and as we make changes, automated tests are run to ensure logic consistency.
  prefs: []
  type: TYPE_NORMAL
- en: Simplify
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I use a simple atomic design for each part of the data pipeline I have in mind
    and deploy it with AWS Lambda or Cloud Functions (Google Cloud Platform). In this
    way, we can orchestrate it with ease and ML Ops becomes a trivial task.
  prefs: []
  type: TYPE_NORMAL
- en: Types of tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In unit testing code behaviour is tested using tiny, independent units, or unit
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'So what we want to test depends on our microservice logic and infrastructure
    but in general it would be this:'
  prefs: []
  type: TYPE_NORMAL
- en: Simple **unit tests** for function logic, i.e. `processEvent()` function inside
    your microservice.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We would want to make sure that this particular function returns the expected
    result consistently when we provide some input for it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Integration tests**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This would be the case when we need to test how our service works in conjunction
    with some other services, i.e. it sends a request and receives something back
    in return (response).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What makes a good unit test?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It should test expected vs actual results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should describe the scriptâ€™s logic corresponding to use cases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should be automated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be Independent (tests should not do setup or teardown for one another)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should be easy to implement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Be Repeatable: Anyone should be able to run it in any environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once itâ€™s written, it should remain for future use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Letâ€™s imagine a simple **scenario** where we were tasked to create a data pipeline
    to transfer the data from one cloud platform to another, i.e. from GCP to AWS
    and do some ETL along the way:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/11aeb1ce49ace677c1fd6ed88456ca37.png)'
  prefs: []
  type: TYPE_IMG
- en: Service architecture with tests. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: We can create a simple **microservice** with AWS Lambda or Cloud Functions that
    will process that pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: This can be anything pipeline wise and this way we can deploy as many data pipelines
    as we need.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/data-pipeline-design-patterns-100afa4b93e3?source=post_page-----d0f974a93a59--------------------------------)
    [## Data pipeline design patterns'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right architecture with examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/data-pipeline-design-patterns-100afa4b93e3?source=post_page-----d0f974a93a59--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Creating a data service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This will be a simple atomic design for a serverless microservice to perform
    one single operation.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a Python user donâ€™t worry, I have a similar story in Python on how
    to write **integration** tests with **Python** and **AWS Lambda. Anyways this
    story is just to demonstrate how to perform tests for your data pipelines.**
  prefs: []
  type: TYPE_NORMAL
- en: Letâ€™s create our serviceâ€¦
  prefs: []
  type: TYPE_NORMAL
- en: 'In your command line run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Now we can open it in the code editor and start codingâ€¦*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Our App structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Letâ€™s create our `app.js`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Simple, right? We are learning to code. Letâ€™s start with simple things and we
    can always add lots of other useful features later.
  prefs: []
  type: TYPE_NORMAL
- en: To *initialise* your App you can run `npm init` or simply copy my package.json
    file and then run `npm install` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the packages we are going to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Again, it is simple, right? Indeed, we are going to use only whatâ€™s necessary
    moving
  prefs: []
  type: TYPE_NORMAL
- en: '`aws-sdk` to devDependencies so it will never go into our Lambda package zip.
    AW services use this package by default in their `runtime` and there is no need
    to install it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eslint`- related packages are good for development and there is no need to
    explain why.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*it makes your code look nice and consistent.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`run-local-lambda` is just an alternative to run lambda locally for demonstration
    purposes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mocha` & `chai` is finally what we need for testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add an event to invoke the service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our data engineering jobs/tasks to run will be coming from the `event` that
    will invoke our service. This event can be fired by another data service, i.e.
    orchestrator Lambda or AWS Cloudwatch to run it simply on a schedule.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create `./test/event.js` i.e.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we define a job configuration to move data from one cloud to
    another, i.e. from Google Cloud Storage to AWS S3\. This is a trivial task in
    data engineering performed almost daily. We also supply `configOverride` parameter
    to tell our service whether we want to use a custom event or the one defined in
    the config file. For example, it can be a task that has to be run daily, hourly,
    etc.
  prefs: []
  type: TYPE_NORMAL
- en: Add processEvent() function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now letâ€™s add `processEvent()` function. It will do something simple with event
    data, i.e. return current `DATE`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now letâ€™s add this to our app.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, letâ€™s add a new script to our `package.json` file to use `run-local-lambda`
    with event supplied from `./test/event.json` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can run `npm run local` in our command line to test Lambda locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/88786befe1a55274437424c3438e6bd3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: So we see that it works and Lambda returns something when we run it locally.
  prefs: []
  type: TYPE_NORMAL
- en: Thatâ€™s great news but how do we `unit-test` it?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use Mocha and Chai to unit test our data service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/9ab5af6af672ddc9d7aea1caee5a2b88.png)'
  prefs: []
  type: TYPE_IMG
- en: First of all, why use `mocha` and `chai`?
  prefs: []
  type: TYPE_NORMAL
- en: '**Mocha** is a great framework for testing where we can run all tests from
    the test folder recursively, i.e. `npm run test` will run `test1.js`, `test2.js`,...,
    `testN.js`. It enables the following:'
  prefs: []
  type: TYPE_NORMAL
- en: use of any assertion library (this is where we will use Chai)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: asynchronous testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: test coverage reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chai** is an assertion library for NodeJS that can be paired with Mocha to
    raise assertions in our tests.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1536452ca32105a5410fd8973ca0fb67.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: Letâ€™s add a couple of unit tests. One will test that Lambda return results with
    `runTime` and the second one will check that Lambda returns a response with the
    correct status codes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâ€™s create `stack/js-lambda-unit-tests/test/unit/runTimeTest.js` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now letâ€™s add this single unit test to scripts in our `package.json` as sometimes
    we might need to run only one test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now if we run in the command line `npm run test-lambda-runtime`
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b90c204b93c5c9c86a80781e223f90d0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: Now letâ€™s add the second test but now we would want to add new behaviour to
    our lambda, i.e.
  prefs: []
  type: TYPE_NORMAL
- en: it must return status `400` on error.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To emulate the error we will supply an event with a missing job `name`. Our
    `./test/unit/lambdaResponseTest.js` should look like that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And letâ€™s add error handling to our `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'So the final `app.js` must look like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now letâ€™s change our package.json scripts to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'You probably noticed a new script to run commands recursively in `./test/unit`
    folder. `npm run test-unit` will run all tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ec9de236f8b5ed0d7aa6eb3f7ce82a83.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'You probably noticed an integration test script in `package.json` More about
    integration tests can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://mydataschool.com/blog/data-platform-unit-and-integration-tests-explained/?source=post_page-----d0f974a93a59--------------------------------)
    [## Data Platform Unit and Integration Tests Explained'
  prefs: []
  type: TYPE_NORMAL
- en: How to do this exercise and how to apply it to our data pipelines? This is a
    good question I asked myself at the veryâ€¦
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: mydataschool.com](https://mydataschool.com/blog/data-platform-unit-and-integration-tests-explained/?source=post_page-----d0f974a93a59--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: An integration test is when we test how our application interacts with something
    else, i.e. another service or API.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In data engineering and machine learning, tests are frequently used to ensure
    that new code changes do not create unintended modifications and to assist describe
    the fundamental core functionality of the data platform.
  prefs: []
  type: TYPE_NORMAL
- en: It is a must-have skill for any machine learning engineer. Getting used to reading
    tests might be uncomfortable but youâ€™ll benefit from developing it today throughout
    your path into coding!
  prefs: []
  type: TYPE_NORMAL
- en: It looks great on every CV and the idea is the same for any programming language.
    Make sure you add **Pytest**, Mocha, Chai, Sinon and things like Mock to your
    testing tools.
  prefs: []
  type: TYPE_NORMAL
- en: Github repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://github.com/mshakhomirov/js-lambda-unit-tests.git](https://github.com/mshakhomirov/js-lambda-unit-tests.git)'
  prefs: []
  type: TYPE_NORMAL
- en: Recommended read
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://mochajs.org/](https://mochajs.org/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://www.chaijs.com/api/bdd/](https://www.chaijs.com/api/bdd/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://stackoverflow.com/questions/52019039/how-to-test-aws-lambda-handler-locally-using-nodejs](https://stackoverflow.com/questions/52019039/how-to-test-aws-lambda-handler-locally-using-nodejs)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://stackoverflow.com/questions/54846513/lambda-trigger-callback-vs-context-done](https://stackoverflow.com/questions/54846513/lambda-trigger-callback-vs-context-done)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://opensourceforgeeks.blogspot.com/2019/03/writing-unit-tests-for-aws-lambda-in.html](http://opensourceforgeeks.blogspot.com/2019/03/writing-unit-tests-for-aws-lambda-in.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://dashbird.io/blog/test-javascript-lambda-functions/](https://dashbird.io/blog/test-javascript-lambda-functions/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://docs.aws.amazon.com/lambda/latest/dg/nodejs-context.html](https://docs.aws.amazon.com/lambda/latest/dg/nodejs-context.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://www.google.com/search?client=firefox-b-d&q=aws+lambda+test+TypeError%3A+context.done+is+not+a+function](https://www.google.com/search?client=firefox-b-d&q=aws+lambda+test+TypeError%3A+context.done+is+not+a+function)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
