["```py\n\"Answer the customers prompt based on the folowing context:\n==== context: {document title} ====\n{document content}\n\n...\n\nprompt: {prompt}\"\n```", "```py\n\"\"\"Downloading a word encoder.\nI was going to use word2vect, but glove downloads way faster. For our purposes\nthey're conceptually identical\n\"\"\"\n\nimport gensim.downloader\n\n#doenloading encoder\nword_encoder = gensim.downloader.load('glove-twitter-25')\n\n#getting the embedding for a word\nword_encoder['apple']\n```", "```py\n\"\"\"defining a function for embedding an entire document to a single mean vector\n\"\"\"\n\nimport numpy as np\n\ndef embed_sequence(sequence):\n    vects = word_encoder[sequence.split(' ')]\n    return np.mean(vects, axis=0)\n\nembed_sequence('its a sunny day today')\n```", "```py\n\"\"\"Calculating distance between two embedding vectors\nuses manhattan distance\n\"\"\"\n\nfrom scipy.spatial.distance import cdist\n\ndef calc_distance(embedding1, embedding2):\n    return cdist(np.expand_dims(embedding1, axis=0), np.expand_dims(embedding2, axis=0), metric='cityblock')[0][0]\n\nprint('similar phrases:')\nprint(calc_distance(embed_sequence('sunny day today')\n                  , embed_sequence('rainy morning presently')))\n\nprint('different phrases:')\nprint(calc_distance(embed_sequence('sunny day today')\n                  , embed_sequence('perhaps reality is painful')))\n```", "```py\n\"\"\"Defining documents\nfor simplicities sake I only included words the embedder knows. You could just\nparse out all the words the embedder doesn't know, though. After all, the retreival\nis done on a mean of all embeddings, so a missing word or two is of little consequence\n\"\"\"\ndocuments = {\"menu\": \"ratatouille is a stew thats twelve dollars and fifty cents also gazpacho is a salad thats thirteen dollars and ninety eight cents also hummus is a dip thats eight dollars and seventy five cents also meat sauce is a pasta dish thats twelve dollars also penne marinera is a pasta dish thats eleven dollars also shrimp and linguini is a pasta dish thats fifteen dollars\",\n             \"events\": \"on thursday we have karaoke and on tuesdays we have trivia\",\n             \"allergins\": \"the only item on the menu common allergen is hummus which contain pine nuts\",\n             \"info\": \"the resteraunt was founded by two brothers in two thousand and three\"}\n```", "```py\n\"\"\"defining a function that retreives the most relevent document\n\"\"\"\n\ndef retreive_relevent(prompt, documents=documents):\n    min_dist = 1000000000\n    r_docname = \"\"\n    r_doc = \"\"\n\n    for docname, doc in documents.items():\n        dist = calc_distance(embed_sequence(prompt)\n                           , embed_sequence(doc))\n\n        if dist < min_dist:\n            min_dist = dist\n            r_docname = docname\n            r_doc = doc\n\n    return r_docname, r_doc\n\nprompt = 'what pasta dishes do you have'\nprint(f'finding relevent doc for \"{prompt}\"')\nprint(retreive_relevent(prompt))\nprint('----')\nprompt = 'what events do you guys do'\nprint(f'finding relevent doc for \"{prompt}\"')\nprint(retreive_relevent(prompt))\n```", "```py\n\"\"\"Defining retreival and augmentation\ncreating a function that does retreival and augmentation,\nthis can be passed straight to the model\n\"\"\"\ndef retreive_and_agument(prompt, documents=documents):\n    docname, doc = retreive_relevent(prompt, documents)\n    return f\"Answer the customers prompt based on the folowing documents:\\n==== document: {docname} ====\\n{doc}\\n====\\n\\nprompt: {prompt}\\nresponse:\"\n\nprompt = 'what events do you guys do'\nprint(f'prompt for \"{prompt}\":\\n')\nprint(retreive_and_agument(prompt))\n```", "```py\n\"\"\"Using RAG with OpenAI's gpt model\n\"\"\"\n\nimport openai\nopenai.api_key = OPENAI_API_TOKEN\n\nprompts = ['what pasta dishes do you have', 'what events do you guys do', 'oh cool what is karaoke']\n\nfor prompt in prompts:\n\n    ra_prompt = retreive_and_agument(prompt)\n    response = openai.Completion.create(model=\"gpt-3.5-turbo-instruct\", prompt=ra_prompt, max_tokens=80).choices[0].text\n\n    print(f'prompt: \"{prompt}\"')\n    print(f'response: {response}')\n```"]