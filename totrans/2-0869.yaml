- en: Face Detection using Python — the Precursor to Face Recognition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/face-detection-using-python-the-precursor-to-face-recognition-316ded4d116f](https://towardsdatascience.com/face-detection-using-python-the-precursor-to-face-recognition-316ded4d116f)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Have fun with Python by using your webcam to detect your face
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/?source=post_page-----316ded4d116f--------------------------------)[![Wei-Meng
    Lee](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----316ded4d116f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----316ded4d116f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----316ded4d116f--------------------------------)
    [Wei-Meng Lee](https://weimenglee.medium.com/?source=post_page-----316ded4d116f--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----316ded4d116f--------------------------------)
    ·8 min read·Apr 11, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dc686dbd8129b723c18318609f2ec438.png)'
  prefs: []
  type: TYPE_IMG
- en: All images by author
  prefs: []
  type: TYPE_NORMAL
- en: '*Face detection* is a technique that identifies human faces in a digital image.
    Face detection is a relatively mature technology — remember back in the good old
    days of your digital camera when you looked through the viewfinder? You saw rectangles
    surrounding the faces of the people in the viewfinder.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Face detection is the technique you need to learn before you can perform face
    recognition, which is trying to put a name to a face.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For face detection, one of the most famous algorithms is known as the ***Viola-Jones
    Face Detection*** technique, commonly known as **Haar cascades**. Haar cascades
    were invented long before deep learning was popular and is one of the most commonly
    used techniques for detecting faces.
  prefs: []
  type: TYPE_NORMAL
- en: Ethical Considerations for Face Detection/Recognition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the ability to detect and recognize faces is definitely cool, it certainly
    has a lot of ethical implications. There are several concerns that you need to
    take note before you get too ahead of yourself when implementing facial recognition
    into your projects. Concerns such as **privacy** (face detection can be used to
    track people’s movements without their consent), **bias** (face detection can
    be biased towards individual of different race, gender, or age), and **misuse**
    (faces captured may be used for other illegal uses or malicious purposes). So
    while this article focuses on the technical capability for face detection, you
    should consider carefully the moral and ethical implications before you implement
    it in your work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some low-risk projects where face detection/recognition can be implemented:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Attendance tracking** — you can use face recognition in schools or workplace
    to take attendance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Personalization** — using face recognition to personalize services. A good
    example is for entertainment services such as recommending specific TV shows based
    on a user’s watching history.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security** — use of face recognition to unlock non-critical systems, such
    as smartphones and computers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, using face recognition in certain applications has severe moral implications.
    Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Law enforcement** — while face recognition can be useful for law enforcement,
    there are some serious concerns about its inaccuracies and biases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Surveillance** — face recognition technologies have been used in some countries
    for monitoring and tracking its citizens, particularly dissidents. Some companies
    also uses face recognition to monitor employees’ productivity, which is a direct
    infringement of their privacies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are some articles that you can read to learn more about the legal and
    moral concerns of face recognition:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Facial Recognition in the United States: Privacy Concerns and Legal Developments
    —** [https://www.asisonline.org/security-management-magazine/monthly-issues/security-technology/archive/2021/december/facial-recognition-in-the-us-privacy-concerns-and-legal-developments/](https://www.asisonline.org/security-management-magazine/monthly-issues/security-technology/archive/2021/december/facial-recognition-in-the-us-privacy-concerns-and-legal-developments/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Privacy and security issues associated with facial recognition software**
    — [https://www.techrepublic.com/article/privacy-and-security-issues-associated-with-facial-recognition-software/](https://www.techrepublic.com/article/privacy-and-security-issues-associated-with-facial-recognition-software/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**10 reasons to be concerned about facial recognition technology** — [https://www.privacycompliancehub.com/gdpr-resources/10-reasons-to-be-concerned-about-facial-recognition-technology/](https://www.privacycompliancehub.com/gdpr-resources/10-reasons-to-be-concerned-about-facial-recognition-technology/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Do Haar Cascades Work?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **Haar cascade classifier** is used to detect the object for which it has
    been trained. If you’re interested in a detailed explanation of the mathematics
    behind how Haar cascade classifiers work, check out the paper by Paul Viola and
    Michael Jones at [https://www.cs.cmu.edu/~efros/courses/LBMV07/Papers/viola-cvpr-01.pdf](https://www.cs.cmu.edu/~efros/courses/LBMV07/Papers/viola-cvpr-01.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a high-level overview of how a Haar classifier for face works:'
  prefs: []
  type: TYPE_NORMAL
- en: First, a set of positive images (images of faces) and a set of negative images
    (images with faces) are used to train the classifier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You then extract the features from the images. The following figure shows some
    of the features that are extracted from images containing faces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/c57de5b145ab3ecf7b03ba0c71ee1ccd.png)'
  prefs: []
  type: TYPE_IMG
- en: To detect faces from an image, you look for the presence of the various features
    that are usually found on human faces (see the following figure), such as the
    eyebrow, where the region above the eyebrow is lighter than the region below it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/e6d93256d6f5a9e8f7e346b678b7f8e4.png)'
  prefs: []
  type: TYPE_IMG
- en: When an image contains a combination of all these features, it is deemed to
    contain a face.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fortunately, without needing to know how Haar cascades work, **OpenCV** can
    perform face detection out of the box using a pre-trained Haar cascade, along
    with other Haar cascades for recognizing other objects. The list of predefined
    Haar cascades is available on GitHub at [https://github.com/opencv/opencv/tree/master/data/haarcascades](https://github.com/opencv/opencv/tree/master/data/haarcascades).
  prefs: []
  type: TYPE_NORMAL
- en: '**Open Source Computer Vision** (**OpenCV**) is an open source computer vision
    and machine learning software library originally developed by Intel. It was built
    to provide a common infrastructure for computer vision applications and to accelerate
    the use of machine perception in the commercial products. OpenCV ships with several
    pre-trained Haar cascades that can detect eyes, faces, Russian car plates, smiles,
    and more.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For face detection, you’ll need the `haarcascade_frontalface_default.xml` file
    that you can download from the GitHub link in the previous paragraph.
  prefs: []
  type: TYPE_NORMAL
- en: Installing OpenCV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s try out face detection using OpenCV. First, you need to use the following
    command to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For the example in this article, you need to create a file named **face_detection.py**.
    Start by populating it with the following statement to import the OpenCV library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Reading from the Webcam
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next thing would be to connect to your webcam and display the image on
    the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To reference your webcam, use the `VideoCapture` class and pass it a number
    indicating your webcam instance (`0` for first webcam, `1` for second webcam and
    so on):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To continuously capture the inputs from the webcam, use an infinite loop (`while(True)`)
    and read each frame and then show it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To allow the program to gracefully exit, wait for the user to press a key on
    the keyboard. When the “q” key is pressed, the loop terminates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then perform your cleanup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the program, go to Terminal and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see your face:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5a099fac77ed129e1eb18f6211e226d0.png)'
  prefs: []
  type: TYPE_IMG
- en: Detecting Face
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here comes the fun part — detecting face(s). First, create an instance of the
    `CascadeClassifier` class and pass it the **haarcascade_frontalface_default.xml**
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You need to copy the haarcascade_frontalface_default.xml file and put it in
    the same folder as the face_detection.py file. You can download the XML file from
    [https://github.com/opencv/opencv/tree/master/data/haarcascades](https://github.com/opencv/opencv/tree/master/data/haarcascades).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You can now use it to detect faces using the `detectMultiScale()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Take note of the the following parameters in the `detectMultiScale()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: The `scaleFactor` parameter allows you to rescale the capture image to a new
    dimension so that the face can be detected by the algorithm.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `minNeighbors` parameter specifies how many neighbors each candidate rectangle
    should have to retain it. This parameter affects the quality of the detected faces.
    Higher value results in less detections but with higher quality. Usually, 4 to
    6 is a good number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can vary the values of these two parameters to ensure that faces are detected
    correctly.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'When faces are detected, you want to draw rectangles around them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When you rerun the **face_detection.py** file again, you should now be able
    to detect faces:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ad46aab0034093f8d7e0848bc80c053f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The entire content for **face_detection.py** file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**If you like reading my articles and that it helped your career/study, please
    consider signing up as a Medium member. It is $5 a month, and it gives you unlimited
    access to all the articles (including mine) on Medium. If you sign up using the
    following link, I will earn a small commission (at no additional cost to you).
    Your support means that I will be able to devote more time on writing articles
    like this.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/membership?source=post_page-----316ded4d116f--------------------------------)
    [## Join Medium with my referral link - Wei-Meng Lee'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Wei-Meng Lee (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----316ded4d116f--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope this short article provided you with a simple way to detect faces using
    Python and your webcam. Be sure to download the haar cascades XML file and put
    it into the same folder as your Python file. In future articles, I will show you
    some techniques to perform face recognition. Stay tuned!
  prefs: []
  type: TYPE_NORMAL
