["```py\n### ----- WHISPER ----- ###\nimport whisper\n```", "```py\nmodel = whisper.load_model(\"large\", \"cpu\")\nresult = model.transcribe(\"<YOUR AUDIO FILE>.wav\")### ----- WHISPERX ----- ###\nimport whisperxmodel = whisperx.load_model(\"large-v2\", \"gpu\", compute_type=\"float16\")\naudio = whisperx.load_audio(\"<YOUR AUDIO FILE>.wav\")\nresult = model.transcribe(audio)\n```", "```py\nfrom whisperx import load_align_model, align\n```", "```py\nmodel_a, metadata = load_align_model(language_code=result['language'], device=\"cpu\")\nresult_aligned = align(result['segments'], model_a, metadata, \"<YOUR AUDIO FILE>.wav\", \"cpu\")\n```", "```py\nversion: '3.8'\nservices:\n  postgres:\n    container_name: container-pg\n    image: ankane/pgvector\n    hostname: localhost\n    ports:\n      - \"5432:5432\"\n    environment:\n      POSTGRES_USER: admin\n      POSTGRES_PASSWORD: root\n      POSTGRES_DB: postgres\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n    restart: unless-stopped\n  pgadmin:\n    container_name: container-pgadmin\n    image: dpage/pgadmin4\n    depends_on:\n      - postgres\n    ports:\n      - \"5050:80\"\n    environment:\n      PGADMIN_DEFAULT_EMAIL: admin@admin.com\n      PGADMIN_DEFAULT_PASSWORD: root\n    restart: unless-stopped\nvolumes:\n  postgres-data:\n```", "```py\nfrom langchain.embeddings import HuggingFaceEmbeddings\n\nencoder = HuggingFaceEmbeddings(\n    model_name=\"sentence-transformers/multi-qa-mpnet-base-dot-v1\",\n    model_kwargs={\"device\": \"cpu\"},\n)\n```", "```py\nfrom langchain.vectorstores.pgvector import PGVector\n\nCONNECTION_STRING = PGVector.connection_string_from_db_params(\n     driver=\"psycopg2\", # driver to connect with postgres\n     host=\"localhost\", # host defined in docker-compose.yml\n     port=\"5432\", # port defined in docker-compose.yml     \n     database=\"postgres\", # database defined in docker-compose.yml\n     user=\"admin\", # user defined in docker-compose.yml\n     password=\"root\", # password defined in docker-compose.yml\n)\n```", "```py\nCOLLECTION_NAME = \"Meeting ID\"\n```", "```py\nfrom langchain.docstore.document import Document\n\n# Transform transcription into documents and add the start and end time of each sequence \ndocs = [Document(page_content=f'start {item[\"start\"]} - end {item[\"end\"]}: {item[\"text\"]}') for item in result['segments']]\ndb = PGVector.from_documents(\n embedding=encoder,\n  documents=docs,\n  collection_name=COLLECTION_NAME,\n  connection_string=CONNECTION_STRING,\n  pre_delete_collection=True,  # deletes previous records, useful for testing\n)\n```", "```py\nsimilar_docs = db.similarity_search(\"<USER QUERY>\")\n```"]