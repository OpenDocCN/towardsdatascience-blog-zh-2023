["```py\nimport pandas as pd\nfrom googleapiclient.discovery import build\n\n# API configuration\napi_key = 'YOUR API KEY FROM STEP 0'\nyoutube = build('youtube', 'v3', developerKey=api_key)\n```", "```py\n# Youtube Channel ID\nmkhbh_id = 'UCBJycsmduvYEL83R_U4JriQ'\n\n# Put channel overview in a DataFrame\nrequest = youtube.channels().list(part=\"snippet,contentDetails,statistics\", id=mkhbh_id)\nresponse = request.execute()\n\nchannel_overview = {\n    'title' : response['items'][0]['snippet']['title'],\n    'description' : response['items'][0]['snippet']['description'],\n    'publishedAt' : response['items'][0]['snippet']['publishedAt'],\n    'viewCount' : response['items'][0]['statistics']['viewCount'],\n    'subscriberCount' : response['items'][0]['statistics']['subscriberCount'],\n    'videoCount' : response['items'][0]['statistics']['videoCount'],\n    'uploads' : response['items'][0]['contentDetails']['relatedPlaylists']['uploads']\n}\n\ndf_channel_overview = pd.DataFrame([channel_overview])\ndf_channel_overview\n```", "```py\n# Get all the video IDs from the channel and put them in a list\nplaylistId = df_channel_overview['uploads'].iloc[0]\nvideo_ids = []\n\nrequest = youtube.playlistItems().list(part=\"snippet,contentDetails\", playlistId=playlistId, maxResults = 50)\nresponse = request.execute()\nnextPageToken = response.get('nextPageToken')\n\nfor item in response['items']:\n    video_ids.append(item['contentDetails']['videoId'])\n\nwhile nextPageToken is not None:\n    request = youtube.playlistItems().list(part=\"snippet,contentDetails\", playlistId=playlistId, maxResults = 50, pageToken = nextPageToken)\n    response = request.execute()\n    nextPageToken = response.get('nextPageToken')\n    for item in response['items']:\n        video_ids.append(item['contentDetails']['videoId'])\n```", "```py\n# Put video details in data frame\nvideos = []\n\nfor i in range(0, len(video_ids), 50):\n    request = youtube.videos().list(part=\"snippet,contentDetails,statistics\", id=video_ids[i:i+50])\n    response = request.execute()\n\n    for item in response['items']:\n        video = {\n            'channelTitle' : df_channel_overview['title'].iloc[0],\n            'videoId' : item['id'],\n            'categoryId' : item['snippet']['categoryId'],\n            'publishedAt' : item['snippet']['publishedAt'],\n            'title' : item['snippet']['title'],\n            'description' : item['snippet']['description'],\n            'tags' : item['snippet'].get('tags','no_tags'),\n            'duration' : item['contentDetails']['duration'],\n            'viewCount' : item['statistics'].get('viewCount',0),\n            'likeCount' : item['statistics'].get('likeCount', 0),\n            'commentCount' : item['statistics'].get('commentCount',0)\n        }\n        videos.append(video)\n\ndf_videos = pd.DataFrame(videos)\ndf_videos\n```", "```py\nimport isodate\n# Convert duration column to seconds\ndf_videos['duration_sec'] = df_videos['duration'].apply(lambda x: isodate.parse_duration(x).total_seconds())\n\n# Convert specific columns to numeric type\nnumeric_columns = ['viewCount', 'likeCount', 'commentCount', 'duration_sec']\ndf_videos[numeric_columns] = df_videos[numeric_columns].apply(pd.to_numeric, errors='coerce')\n\n# Convert column to Datetime to access the year\ndf_videos['publishedAt'] = pd.to_datetime(df_videos['publishedAt'])\ndf_videos['year'] = df_videos['publishedAt'].dt.year\n```"]