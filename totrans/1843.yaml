- en: Shaping Your Data with SQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/shaping-your-data-with-sql-71822f2fc2f4](https://towardsdatascience.com/shaping-your-data-with-sql-71822f2fc2f4)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Improve & optimize your data analytical process with different techniques for
    data shaping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://nphchi223.medium.com/?source=post_page-----71822f2fc2f4--------------------------------)[![Chi
    Nguyen](../Images/cc6e778a0c64c1c8b3c4d2d96fd62b4f.png)](https://nphchi223.medium.com/?source=post_page-----71822f2fc2f4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----71822f2fc2f4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----71822f2fc2f4--------------------------------)
    [Chi Nguyen](https://nphchi223.medium.com/?source=post_page-----71822f2fc2f4--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----71822f2fc2f4--------------------------------)
    ·9 min read·Apr 18, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f1698cdffbc741feba22e618c4552b93.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [OB OA](https://unsplash.com/@oboa?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Why is Data Shaping?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is no one-size-fits-all data. For different purposes and used cases, data
    is customized accordingly. The more you are aware of the intended use of data
    afterward, the more equipped you will be to correctly present your data to the
    end users.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the data utilized to undertake in-depth analysis differ from the
    aggregated data provided to upper management.
  prefs: []
  type: TYPE_NORMAL
- en: Another example, the business development team is more concerned with the overall
    cost per area to convert new users than the marketing managers are with affiliate
    marketing costs, which they want to look at specifically by region.
  prefs: []
  type: TYPE_NORMAL
- en: That being said, transforming existing data structures into any alternative
    pivoted or unpivoted structure is an indispensable step in any data manipulation
    and analytical process.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I will introduce a few techniques to shape and slice your data
    in some specific cases. Usually, I will present my examples with PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s start to see what we’ve got!
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I will use the data from World Happiness Report 2015–2021 in this article.
    This dataset provides the happiness levels of countries around the world based
    on different indicators: economic growth, social support, life expectancy at birth,
    etc. The data is available on [Kaggle](https://www.kaggle.com/datasets/jahaidulislam/world-happiness-report-2005-2021)
    with the [CC0: Public Domain](https://creativecommons.org/publicdomain/zero/1.0/)
    license. As seen in the image below, I will just utilize a few fields for this
    post, which are:'
  prefs: []
  type: TYPE_NORMAL
- en: Country name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Year: Report year (2005–2021)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Life ladder: The best potential life for each respondent is represented by
    a 10 on a ladder, while the worst possible life is represented by a 0\. Each participant
    is then asked to rank their current life on that ladder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Log GDP per capita: Log of the GDP per person in terms of purchasing power
    parity (PPP) adjusted dollars.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Social support: The perception of social support (being able to rely on others)
    in the nation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Healthy life expectancy at birth: The average lifespan of a country’s citizens
    at a certain period.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/22ade4f845bb614765b7a847b458a8fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Using Window Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rolling Calculation with PRECEDING AND CURRENT ROW
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Example:** Showing therolling 3-year average life ladder index for each country'
  prefs: []
  type: TYPE_NORMAL
- en: What is the three-year rolling average? Simply, it calculates the average life
    ladder score for the last two years plus the current year. If the current year
    is 2010, for instance, the three-year rolling average of the life ladder score
    of each country will be equal to the average scores of that country in 2008, 2009,
    and 2010\. As you can see in the picture below, the ‘rolling_average’ in 2010
    of Afghanistan is 4.29, and this value is the mean of 3.72, 4.40, and 4.76.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/876677e6d359615f81b0da203af30914.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: To specify the range of rows to be considered in the calculation, window functions
    in SQL are used with `PRECEDING` and `CURRENT ROW`. To be specific, `PRECEDING`
    determines the number of rows that are before the `CURRENT ROW.`So, in the conjunction
    with `PARTITION BY` the country and `ORDER BY` year, the SQL command below returns
    the rolling 3-year average life ladder score for each country in the ‘rolling_average’
    column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Over The Period Calculation with UNBOUNDED PRECEDING AND CURRENT ROW
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Example:** Showing theover-period average life ladder score for each country'
  prefs: []
  type: TYPE_NORMAL
- en: For this calculation to happen, we use `UNBOUNDED PRECEDING AND CURRENT ROW`.
    The calculation window will include the current value and all the rows up to the
    current rows.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if the current year is 2009, a country’s average score over the
    period will be equal to the average of its scores in 2008 and 2009\. Likewise,
    in 2010 the average life ladder score will be determined by dividing the scores
    from 2008, 2009, and 2010 by 3\. You can see the command below for more reference.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f690b5b7afc7235f2d5a853a6d8d33f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Percentage Calculation with UNBOUNDED PRECEDING AND CURRENT ROW
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Example:** Calculate the percentage change of life ladder point in comparison
    with the cumulative average.'
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the previous example, which used `UNBOUNDED PRECEDING AND CURRENT
    ROW`, but instead of computing the average value across time alone, this example
    is concerned with the percentage change between the current values and the period
    average. In this case, the results are stored in the fourth column as in the picture
    below. You can easily observe which year actually has a positive/negative change
    compared to the rolling average. Also, this indicator tells us about the magnitude
    of the change in the target value.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0bc2ad9bf7d4bb0f933d8c20a3ec9a61.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Actually, in time series analysis, this method is one of the important approaches
    for identifying data trends or patterns across time. For example, it is most frequently
    used in sales analysis, where sales growth or market share are of primary concern.
  prefs: []
  type: TYPE_NORMAL
- en: Percentile Calculation with PERCENTILE_RANK()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Example:** Identifying the percentile of the GDP per capita of each country
    in the region'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, I’m interested in knowing which countries have the better GDP
    per capita in their respective regions in 2008\. The task is simply done with
    the support of `PERCENTILE_RANK()` the function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d2e4c46cecbed565e890557d836445c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: So, as you may observe, by `PARTITION BY` the region and `ORDER BY` the GDP
    per capita, the command put the countries into different percentile categories
    based on their rank of GDP per capita. For instance, according to data, Latvia’s
    GDP per capita is higher than 33% of countries in Central and Eastern Europe.
  prefs: []
  type: TYPE_NORMAL
- en: Using CASE WHEN in conjunction with aggregate function to transform data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Example:** Displaying the average life ladder score for each year in each
    continent'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, I will categorize the countries into 4 big different regions such
    as Asia, Europe, Africa, and America based on the ‘regional_indicator’ field.
    We can get the average value of the life ladder corresponding to each location
    by first identifying each area using `CASE WHEN`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6f60053d4395426da2d3a6a31e2e53db.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the life ladder scores of 4 different regions saved in rows
    have been transformed into 4 distinct columns. This data transformation makes
    it simple for analysts to monitor the variations in values across different locations
    within a given year. It’s also useful to track how an area’s data changes over
    time in a certain period.
  prefs: []
  type: TYPE_NORMAL
- en: Unpivoting data with UNION ALL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Example**: unpivoting the table in the previous data set'
  prefs: []
  type: TYPE_NORMAL
- en: How do we make the table in the previous example above into the table below?
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b4718a0d218c001003c9e873d55008fc.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Analytics requires flexible techniques of data transformation since it enables
    you to see your data in any dimension and gain more insightful information. As
    you see, the preceding example demonstrates how the result data table gives us
    insights both when we view the data vertically and when we view it horizontally.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, I will present a simple transformation of how to unpivot data
    to its original state with `UNION ALL`. One thing to note when using `UNION ALL`
    is that the number of columns and the data types in each component used for the
    union must be compatible.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Pivoting data with UNPIVOTING and PIVOTING functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: UNNEST function to unpivot data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Example:** thesame requirement as the previous case'
  prefs: []
  type: TYPE_NORMAL
- en: Knowing more than one way of playing with data to produce the same result is
    essential since it enables greater active control over the data. That being said,
    besides `UNION ALL` , `UNNEST()` is another function to unpivot data. The use
    of `UNNEST()` is help to convert an array column into different rows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f1ae35fa9c63daa57fd9175a884e3420.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: In our example, the array column of [‘Asia’, ‘Europe’, ‘Africa’, ‘Ameria’] is
    now transformed back to the row values after unnesting.
  prefs: []
  type: TYPE_NORMAL
- en: CROSSTAB function to pivot data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Example: the same requirement with CASE WHEN example: Displaying the average
    life ladder score for each year in each continent'
  prefs: []
  type: TYPE_NORMAL
- en: '`COSSTAB()` is an intelligent way of pivoting data, transforming, and summarizing
    data in a matrix format. In this case, I will use this function to make the row
    values of Asia, Europe, Africa, America, and Commonwealth_of_Independent_States
    into different columns.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/21c1e9f898a4f5caff288990ece0e839.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Insights are hidden under data, and our mission is to play with data in any
    possible way to get the most out of the numbers and facts.
  prefs: []
  type: TYPE_NORMAL
- en: Above are some of my tricks for shaping and manipulating data, and I hope I
    hope they’ll be of great use to you.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading till the end. To receive updates regarding my upcoming posts,
    kindly subscribe as a member using the provided [**Medium Link.**](https://nphchi223.medium.com/subscribe)
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read my other SQL articles at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://nphchi223.medium.com/all-about-data-profiling-in-sql-582a0f250d75](https://nphchi223.medium.com/all-about-data-profiling-in-sql-582a0f250d75)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://medium.com/geekculture/essential-sql-queries-that-data-analysts-should-have-known-bec83a300193](https://medium.com/geekculture/essential-sql-queries-that-data-analysts-should-have-known-bec83a300193)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://medium.com/geekculture/essential-sql-queries-that-data-analysts-shouldnt-have-missed-part-2-6aaf36dbeec7](https://medium.com/geekculture/essential-sql-queries-that-data-analysts-shouldnt-have-missed-part-2-6aaf36dbeec7)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/how-to-use-group-by-and-partition-by-in-sql-f3d241846e3e](/how-to-use-group-by-and-partition-by-in-sql-f3d241846e3e)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/guide-to-sql-and-its-equivalent-commands-in-python-445e134adaba](/guide-to-sql-and-its-equivalent-commands-in-python-445e134adaba)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://medium.com/geekculture/date-time-manipulations-in-sql-d93d44bac723](https://medium.com/geekculture/date-time-manipulations-in-sql-d93d44bac723)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/distinguish-4-ranking-functions-in-sql-37db99107c05](/distinguish-4-ranking-functions-in-sql-37db99107c05)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
