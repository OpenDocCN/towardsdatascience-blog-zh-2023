- en: 4 All Time Useful Tricks Of Pandas Group By
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/4-all-time-useful-use-cases-of-pandas-group-by-77aae706322b](https://towardsdatascience.com/4-all-time-useful-use-cases-of-pandas-group-by-77aae706322b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data Science
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A One-stop-solution For All Your Questions About Data Aggregation Using Pandas
    Groupby
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@17.rsuraj?source=post_page-----77aae706322b--------------------------------)[![Suraj
    Gurav](../Images/f5dca32861f8c1c428e66fbe2174c04b.png)](https://medium.com/@17.rsuraj?source=post_page-----77aae706322b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----77aae706322b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----77aae706322b--------------------------------)
    [Suraj Gurav](https://medium.com/@17.rsuraj?source=post_page-----77aae706322b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----77aae706322b--------------------------------)
    ·8 min read·Mar 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6cb476af3f438709882dc9b91ed40ea2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Hands off my tags! Michael Gaida](https://pixabay.com/users/652234-652234/?utm_source=link-attribution&amp%3Butm_medium=referral&amp%3Butm_campaign=image&amp%3Butm_content=1422182)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&amp%3Butm_medium=referral&amp%3Butm_campaign=image&amp%3Butm_content=1422182)
  prefs: []
  type: TYPE_NORMAL
- en: In Python, pandas is a commonly used library for data analysis. With its many
    built-in functions and methods, it makes data analysis faster and easier.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important aspects of data analysis is data aggregation, which
    helps you group the data by one variable and aggregate the rest of the numeric
    data to get summary statistics. And ultimately, you can use these summary statistics
    to answer the business question.
  prefs: []
  type: TYPE_NORMAL
- en: That’s where pandas function — `**groupby()**` — is useful, which groups the
    data based on values from a categorical or non-numerical column and helps you
    to analyse the data by these newly formed groups.
  prefs: []
  type: TYPE_NORMAL
- en: In my one of the past article — [**5 Pandas Group By Tricks You Should Know
    in Python**](/5-pandas-group-by-tricks-you-should-know-in-python-f53246c92c94)—
    you can learn what is `groupby` and how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I am explaining 4 highly useful and often googled pandas `groupby`
    tricks with examples, which you must know to effectively perform data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve also attached a complete Jupyter-Notebook with all the examples by the
    end of this article.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: For this article, I’m using the most popular dataset on [UC Irvine Machine Learning
    Repository](https://archive-beta.ics.uci.edu/) — [**Iris**](https://archive-beta.ics.uci.edu/dataset/53/iris)
    — which is created by R.A. Fisher and available under [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/legalcode)
    license.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s import the dataset into pandas DataFrame — `**df**`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/79e8cd00ebbadae913c4c7509e98407c.png)'
  prefs: []
  type: TYPE_IMG
- en: Iris dataset | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: It is a simple 150 x 5 dataset containing the information of 3 classes of the
    Iris plant.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with the first use-case, assuming that you already explored [***how
    to use***](/5-pandas-group-by-tricks-you-should-know-in-python-f53246c92c94) `[***groupby***](/5-pandas-group-by-tricks-you-should-know-in-python-f53246c92c94)`
    in my previous article as mentioned above.
  prefs: []
  type: TYPE_NORMAL
- en: Applying different functions to different columns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Pandas `groupby`, you can group all the rows of the dataset by categorical/non-numerical
    column and apply a function to aggregate the other desired numerical columns.
  prefs: []
  type: TYPE_NORMAL
- en: For example, suppose you would like to get the sepal length for each class of
    the Iris plant. You can simply pass the column *class* in `groupby` and use `sum()`
    function on the column *sepal_length*, as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2471355f94eb96b80b0c29106416f90b.png)'
  prefs: []
  type: TYPE_IMG
- en: Simple pandas groupby | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: It is quite straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: But what if you would like to get a total sepal length and average sepal width
    for each class?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: That’s where the `**agg()**` function jumps in, which is used to apply aggregate
    functions on pandas DataFrame `groupby` object obtained by using `pandas.DataFrame.groupby`.
  prefs: []
  type: TYPE_NORMAL
- en: Certainly, you don’t need to use `groupby()` multiple times, rather you can
    create a single groupby object and pass the column and its aggregate function
    as key-value pair in the `agg()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Here two columns on which you want to apply aggregate functions are — *sepal_length*
    and *sepal_width*—and the actual aggregate functions you want to apply on these
    columns are, `sum` and `mean`
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the key-value pair, i.e. the dictionary, will look like
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Whereas the `groupby` object will be created as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: And then you can apply function `agg()` on this groupby object as below,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To get an output like —
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ef725afff98ed58ce4cf568d5a87a8b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Apply multiple function on different columns | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Well, you don’t need to split the code into 3 distinct lines, which I did just
    to simplify the things.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll get exactly the same output by clubbing everything in the single line
    of code as below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Extending the same logic, you can apply multiple functions on the same column,
    but in slightly different way.
  prefs: []
  type: TYPE_NORMAL
- en: Applying multiple functions to the same column
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, you need to find out multiple statistics for the same column separated
    by a category, such as computing the minimum and maximum values. To do this, you
    can pass a **list of functions** to the `agg()` method.
  prefs: []
  type: TYPE_NORMAL
- en: For an instance, suppose you would like to get minimum, maximum, and median
    values of sepal length for each class of the Iris plant.
  prefs: []
  type: TYPE_NORMAL
- en: The actual aggregate functions you want to apply on this column are `min`, `max`
    and `median`, which you must pass as a list as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1436e641416c4fa702cb84eb6c3e4fe6.png)'
  prefs: []
  type: TYPE_IMG
- en: Apply multiple functions on same column | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Following the same way, you can apply multiple functions on multiple columns
    at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in addition to above calculations, you can also get the same metrics
    for sepal width.
  prefs: []
  type: TYPE_NORMAL
- en: As this is a multiple column scenario, you should switch back to **key-value
    pair for column name and function name** as you did in the previous method. However,
    instead of single function name, this time you will pass the list of function
    names as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/209525957ca952409784147a152b788b.png)'
  prefs: []
  type: TYPE_IMG
- en: Apply multiple functions on multiple columns | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: As a result, you’ll get an easy to understand DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: However, it still has two rows as column heading and you can get rid of them
    by simply renaming the aggregated columns.
  prefs: []
  type: TYPE_NORMAL
- en: Customize aggregation column names
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use the names of your choice for the column aggregations so that you
    can easily identify the returned column aggregations and get rid of 2nd row in
    the column headings.
  prefs: []
  type: TYPE_NORMAL
- en: All you need to do is make a **tuple of column name and aggregate function**
    and assign this tuple to a column name.
  prefs: []
  type: TYPE_NORMAL
- en: Continuing the above example, you want to apply function `‘min’` on the column
    *sepal_length*, so the tuple will be `(‘sepal_length’, ‘min’)` and you will assign
    this tuple to the column named *min_sepal_length* as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, you can create tuples for all the column aggregations and assign
    them to a custom name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: And finally pass them in the `agg()` function separated by comma as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6101aa4b62c7f84beae6c7b9559e61df.png)'
  prefs: []
  type: TYPE_IMG
- en: Naming returned columns in Pandas aggregate function | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Quick it is!
  prefs: []
  type: TYPE_NORMAL
- en: Now, this looks much simplified and easy-to-read output.
  prefs: []
  type: TYPE_NORMAL
- en: So far, you applied only the standard or built-in functions on one or more columns.
    However, sometimes you need to apply an user-defined function and using aggregate
    function you can easily do that.
  prefs: []
  type: TYPE_NORMAL
- en: Applying custom or user-defined functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often the built-in aggregation functions in pandas are not sufficient for your
    needs and you define your own custom functions for your analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can apply these user-defined or custom function to grouped data using
    the `agg` method.
  prefs: []
  type: TYPE_NORMAL
- en: For example, suppose you defined a custom function to compute the range of a
    column as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: And now you would like to get the range for sepal length, sepal width, petal
    length and petal width of the Iris plant separated by its class.
  prefs: []
  type: TYPE_NORMAL
- en: Again this is multiple columns scenario, so you must use a **key-value pairs**
    where **key is the column name** and **value is the name of the user-defined function**
    as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will quickly give you an output as —
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5750d9dee5d36f4b104128ea6a99120a.png)'
  prefs: []
  type: TYPE_IMG
- en: Apply user defined function on multiple columns | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: However, it will be difficult for viewer of the above DataFrame to understand
    which type of aggregate function is used to get these numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, adding more context make sense here, which can be achieved by adding
    maximum and minimum values for each column.
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, you can also combine user-defined functions with built-in functions
    and apply them to multiple columns in the `agg()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take another example.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose, you would like to compute minimum, maximum and above user-defined function
    for all the numerical columns in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: And now this is **multiple columns — multiple functions** scenario which means
    you’ll still use key-value pairs but pass list of functions as a value, as shown
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: To get an quick output as —
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/52aa6edd63f961511e83f4b3760b8c89.png)'
  prefs: []
  type: TYPE_IMG
- en: Apply multiple functions on multiple columns | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Interesting, right?
  prefs: []
  type: TYPE_NORMAL
- en: But it is still difficult to say what’s there in the function `my_range` and
    what type of computation happens in this function.
  prefs: []
  type: TYPE_NORMAL
- en: It makes more sense to give a meaningful name to this function and then use
    the function again for aggregation.
  prefs: []
  type: TYPE_NORMAL
- en: You can easily assign a name for the function using below code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: And then re-apply the function `my_range` on all the required columns as,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/465cc4daff2866fa3bd47bff2fcdea45.png)'
  prefs: []
  type: TYPE_IMG
- en: pandas groupby agg custom function multiple columns | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Now, this output looks much more useful as it tells you exactly what type of
    calculations were performed on each column.
  prefs: []
  type: TYPE_NORMAL
- en: That’s all about data aggregation using pandas `groupby`! 🏆
  prefs: []
  type: TYPE_NORMAL
- en: I hope you found this article useful and saved it as a **one-stop-solution**
    for pandas `.groupby()` use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing these flexibility features about data aggregation using pandas `.groupby()`
    can certainly boost your productivity. It also helps you to aggregate and represent
    the data in better and easy-to-understand way.
  prefs: []
  type: TYPE_NORMAL
- en: '*Interested in reading more stories on Medium??*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 💡 Consider [**Becoming a Medium Member**](https://medium.com/@17.rsuraj/membership)
    to **access unlimited** stories on medium and daily interesting Medium digest.
    I will get a small portion of your fee and No additional cost to you.
  prefs: []
  type: TYPE_NORMAL
- en: 💡 Be sure to [**Sign-up to my Email list**](https://medium.com/subscribe/@17.rsuraj)
    to never miss another article on data science guides, tricks and tips, SQL and
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: 💡 Here is a complete [**Notebook**](https://github.com/17rsuraj/data-curious/blob/master/TowardsDataScience/4_Use_cases_Pandas_Group_By.ipynb)
    with all the examples.
  prefs: []
  type: TYPE_NORMAL
- en: '**Thank you for reading!**'
  prefs: []
  type: TYPE_NORMAL
