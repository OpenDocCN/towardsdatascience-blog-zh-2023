["```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\n\n# Normalize the RGB colors (RGB color tuples in comments):\ncolors = [(42/255, 34/255, 31/255),    # (42, 34, 31)\n          (82/255, 59/255, 53/255),    # (82, 59, 53)\n          (112/255, 69/255, 37/255),   # (112, 69, 37)\n          (187/255, 164/255, 132/255)  # (187, 164, 132)\n         ]\n\n# Create a ListedColormap (discrete colors):\ncustom_cmap_discrete = ListedColormap(colors)\n\n# Display a colorbar with the custom colormap:\nfig, ax = plt.subplots(figsize=(6, 1))\nplt.imshow([[i for i in range(len(colors))]], \n           cmap=custom_cmap_discrete, \n           aspect='auto')\nplt.xticks([]), plt.yticks([]);  # Turn off tickmarks\n# plt.show()\n```", "```py\ncmap = ListedColormap([\"darkorange\", \"gold\", \"lawngreen\", \"lightseagreen\"])\n```", "```py\n# Create randomized data with NumPy:\ndata = np.random.rand(10, 10)\n\n# Plot using the custom colormap:\nplt.imshow(data, cmap=custom_cmap_discrete)\nplt.colorbar();\n# plt.show()\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\n\n# Normalize RGB colors (RGB color tuples in comments):\ncolors = [(42/255, 34/255, 31/255),     # (42, 34, 31)\n          (82/255, 59/255, 53/255),     # (82, 59, 53)\n          (112/255, 69/255, 37/255),    # (112, 69, 37)\n          (167/255, 143/255, 105/255),  # (187, 164, 132)\n          (177/255, 166/255, 150/255)   # (177, 166, 150)\n         ]\n\n# Create a list of positions for each color in the colormap:\npositions = [0.0, 0.25, 0.5, 0.75, 1.0]\n\n# Create a LinearSegmentedColormap (continuous colors):\ncustom_cmap = LinearSegmentedColormap.from_list('custom_colormap', \n                                                list(zip(positions, colors)))\n\n# Display a colorbar with the custom colormap:\nfig, ax = plt.subplots(figsize=(6, 1))\nplt.imshow([[i for i in range(256)]], \n           cmap=custom_cmap, \n           aspect='auto', \n           vmin=0, \n           vmax=255)\nplt.xticks([]), plt.yticks([]);\n# plt.show()\n```", "```py\n# Create randomized data:\ndata = np.random.rand(10, 10)\n\n# Plot using the custom colormap:\nplt.imshow(data, cmap=custom_cmap)\nplt.colorbar();\n# plt.show()\n```", "```py\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport geopandas as gpd\n\n# Load the CSV file into a pandas DataFrame:\ndf = pd.read_csv('https://bit.ly/3t3Vbx7')\n\n# Create a GeoDataFrame with Point geometries:\ngdf = gpd.GeoDataFrame(df, \n                       geometry=gpd.points_from_xy(df['longitude'], \n                                                   df['latitude']), \n                       crs='EPSG:4326')\n\ngdf.head(3)\n```", "```py\n# Plot tree locations along with NYC borough boundaries:\npath_to_data = gpd.datasets.get_path(\"nybb\")\ngdf_nyc = gpd.read_file(path_to_data)\n\n# Extract the boundaries GeoSeries:\nborough_boundaries = gdf_nyc.boundary\n\n# Plot the boundaries with no fill:\nax = borough_boundaries.plot(figsize=(9, 9), \n                             linewidth=1, \n                             edgecolor='olivedrab')\n\n# Convert the tree gdf crs to the boroughs crs:\ngdf = gdf.to_crs(gdf_nyc.crs)\n\n# Plot the tree locations in the same figure:\ngdf.plot(column='common', \n         ax=ax, \n         legend=True, \n         markersize=1, \n         cmap=custom_cmap)\n\n# Customize the plot:\nplt.title('NYC Selected Oak Tree Species Distribution')\nplt.xticks([]), plt.yticks([]);\n\n# Show the plot\n# plt.show()\n```", "```py\nfrom matplotlib.colors import LinearSegmentedColormap\nimport geoplot as gplt\nimport geoplot.crs as gcrs\n\n# Reverse colormap so darkest = most dense for KDE plot:\ncolors = [(177/255, 166/255, 150/255),  # (177, 166, 150)\n          (167/255, 143/255, 105/255),  # (187, 164, 132)\n          (112/255, 69/255, 37/255),  # (112, 69, 37)\n          (82/255, 59/255, 53/255),   # (82, 59, 53)\n          (42/255, 34/255, 31/255)  # (42, 34, 31)\n         ]\n\n# Create a list of positions for each color in the colormap\npositions = [0.0, 0.25, 0.50, 0.75, 1.0]\n\n# Create a LinearSegmentedColormap\ncustom_cmap_r = LinearSegmentedColormap.from_list('custom_colormap', \n                                                  list(zip(positions, colors)))\n\n# Get the borough boundaries:\nboroughs = gpd.read_file(gplt.datasets.get_path('nyc_boroughs'))\nboroughs = boroughs.to_crs('EPSG:4326')\n\n# Reset the gdf's crs:\ngdf = gdf.to_crs('EPSG:4326')\n\n# Plot the KDE map:\nax = gplt.kdeplot(gdf, cmap=custom_cmap_r, fill=True, clip=boroughs)\ngplt.polyplot(boroughs, zorder=1, ax=ax);\n```"]