- en: How to Create a Simple GIS Map with Plotly and Streamlit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 Plotly 和 Streamlit 创建一个简单的 GIS 地图
- en: 原文：[https://towardsdatascience.com/how-to-create-a-simple-gis-map-with-plotly-and-streamlit-7732d67b84e2](https://towardsdatascience.com/how-to-create-a-simple-gis-map-with-plotly-and-streamlit-7732d67b84e2)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-create-a-simple-gis-map-with-plotly-and-streamlit-7732d67b84e2](https://towardsdatascience.com/how-to-create-a-simple-gis-map-with-plotly-and-streamlit-7732d67b84e2)
- en: Data Visualization
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据可视化
- en: Plotly map functions combined with Streamlit user interface components provide
    a way of creating GIS-style dashboards
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Plotly 地图功能与 Streamlit 用户界面组件相结合，提供了一种创建 GIS 风格仪表盘的方法
- en: '[](https://medium.com/@alan-jones?source=post_page-----7732d67b84e2--------------------------------)[![Alan
    Jones](../Images/359379fab1d6685ff08080b98173e67c.png)](https://medium.com/@alan-jones?source=post_page-----7732d67b84e2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7732d67b84e2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7732d67b84e2--------------------------------)
    [Alan Jones](https://medium.com/@alan-jones?source=post_page-----7732d67b84e2--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@alan-jones?source=post_page-----7732d67b84e2--------------------------------)[![Alan
    Jones](../Images/359379fab1d6685ff08080b98173e67c.png)](https://medium.com/@alan-jones?source=post_page-----7732d67b84e2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7732d67b84e2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7732d67b84e2--------------------------------)
    [Alan Jones](https://medium.com/@alan-jones?source=post_page-----7732d67b84e2--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7732d67b84e2--------------------------------)
    ·14 min read·Dec 22, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7732d67b84e2--------------------------------)
    ·14 分钟阅读·2023 年 12 月 22 日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/2d61b8df3867dd582f1410384f6f274f.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2d61b8df3867dd582f1410384f6f274f.png)'
- en: The COVID data dashboard from Johns Hopkins University — Photo by [Clay Banks](https://unsplash.com/@claybanks?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰·霍普金斯大学的 COVID 数据仪表盘 — 图片由 [Clay Banks](https://unsplash.com/@claybanks?utm_source=medium&utm_medium=referral)
    提供，来自 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: In 2020 we all got used to seeing a lot more data in the media than we were
    used to. The sophisticated data dashboards created by Johns Hopkins University,
    among others, became a staple of news presentations about the spread of COVID-19
    and were essential viewing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2020 年，我们都习惯了在媒体上看到比以前更多的数据。约翰·霍普金斯大学等创建的精密数据仪表盘成为了关于 COVID-19 扩散的新闻报道中的重要内容。
- en: So, if any positives have come out of the pandemic, maybe one is that more people
    can understand graphical representations of data.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果疫情有任何积极的方面，也许就是更多的人能够理解数据的图形表示。
- en: That experience has, perhaps, led to the greater use of graphs and dashboards
    in the presentation of data of all types, whether it be medical, financial or
    other numbers in the news.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这种经验可能导致了图表和仪表盘在各种数据呈现中的更广泛使用，无论是医学、金融还是新闻中的其他数字。
- en: Along with graphs that represented the exponential growth of infection rates
    and tracked R numbers, we also got used to the type of geographic information
    that we see in the Johns Hopkins dashboard above. This shows a global view of
    how the pandemic was developing but we all had our local versions of these systems,
    too.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 除了展示感染率的指数增长和追踪 R 数字的图表外，我们还习惯了约翰·霍普金斯仪表盘上看到的地理信息类型。这展示了全球疫情的发展情况，但我们也都有这些系统的本地版本。
- en: Those applications used sophisticated software to represent the data and the
    geography onto which it was mapped but we can attempt to do something similar
    — albeit rather simpler — using Plotly and Streamlit.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些应用程序使用了复杂的软件来表示数据和地理位置，但我们可以尝试做一些类似的事情——虽然相对简单一些——使用 Plotly 和 Streamlit。
- en: We’ll start by creating some simple maps in Plotly and work our way up to a
    data dashboard inspired by Johns Hopkins University using Streamlit.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从在 Plotly 中创建一些简单的地图开始，然后逐步使用 Streamlit 创建一个受约翰·霍普金斯大学启发的数据仪表盘。
- en: The final app will look something like the image below.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的应用程序将类似于下图所示。
- en: '![](../Images/e32e40cf3b174c6f3787573dc4deeeb6.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e32e40cf3b174c6f3787573dc4deeeb6.png)'
- en: But before we get to the app, we need to explore how to use Plotly maps.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我们进入应用程序之前，我们需要探讨如何使用 Plotly 地图。
- en: Plotly maps
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Plotly 地图
- en: 'Plotly supports a few map types but we are going to use *outline* maps as they
    are simple to use and clear. The image below shows a Streamlit app with two versions
    of Plotly outline maps that represent the population of Australian states. The
    one on the left is a Choropleth: a map with coloured areas where the colour represents
    some value — in this case population.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 支持几种地图类型，但我们将使用*轮廓*地图，因为它们简单易用且清晰。下面的图片展示了一个 Streamlit 应用，其中包含两种 Plotly
    轮廓地图，表示澳大利亚各州的人口。左侧的是 Choropleth：一个带有颜色区域的地图，颜色代表某个值——在这种情况下是人口。
- en: The other is a Scatter Map that shows values with circles that represent the
    data — in this case, both the size and the colour represent the population.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个是 Scatter Map，它使用圆圈来显示值，圆圈的大小和颜色都代表数据——在这种情况下，大小和颜色都代表人口。
- en: To create maps like this, we use the functions `choropleth` and `scatter_geo`
    from Plotly Express.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建这样的地图，我们使用 Plotly Express 的 `choropleth` 和 `scatter_geo` 函数。
- en: '![](../Images/a7a6cdf6d4848500f0d0bd42160f1948.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a7a6cdf6d4848500f0d0bd42160f1948.png)'
- en: 'Data source: Australian Bureau of Statistics — see Notes'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 数据来源：澳大利亚统计局——见注释
- en: 'We’ll discuss how to create these maps later but you may have already noticed
    one of the disadvantages of using size to represent a value in the Scatter Map
    in this example: the population of the Northern Territory, the home of Uluru (also
    known as Ayer’s Rock) and the third biggest state in Australia, is so small by
    comparison to the others that the circle is not visible. The colour in Choropleth
    is pale but since it takes up the whole of the area of the state it is easily
    visible.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后将讨论如何创建这些地图，但你可能已经注意到在这个例子中使用大小来表示 Scatter Map 中值的一个缺点：北领地的人口相对于其他地区非常少，以至于圆圈不可见。Choropleth
    中的颜色较浅，但由于它覆盖了整个州区域，因此非常明显。
- en: '*Both the code and the data files that we will use in this article will be
    available for download and a demonstrator app will also be published in the Streamlit
    Community Cloud. I’ll include the links at the end of the article to a GitHub
    repository where you can view and/or download the code and data, and one to the
    app, as well. When I refer to files or folders in the text below it is with reference
    to the GitHub repo.*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*本文中将使用的代码和数据文件都可以下载，并且演示应用也将发布在 Streamlit Community Cloud。我会在文章末尾提供一个 GitHub
    仓库的链接，您可以查看和/或下载代码和数据，还会提供一个应用链接。当我在下文中提到文件或文件夹时，是指 GitHub 仓库。*'
- en: Get the data
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取数据
- en: Our final dashboard will use data about CO2 emissions. This data is derived
    from tables in a GitHub repository belonging to [Our World in Data](https://ourworldindata.org/)
    (see Notes). OWID is a great source of data and analysis which I have used many
    times (e.g. [New Data Demonstrates that 2023 was the Hottest Summer Ever](https://medium.com/towards-data-science/new-data-demonstrates-that-2023-was-the-hottest-summer-ever-d92d500a8f01)).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最终仪表板将使用 CO2 排放数据。这些数据来源于 [Our World in Data](https://ourworldindata.org/)
    的 GitHub 仓库中的表格（参见注释）。OWID 是一个很好的数据和分析来源，我已经使用过多次（例如，[新的数据表明 2023 年是有记录以来最热的夏天](https://medium.com/towards-data-science/new-data-demonstrates-that-2023-was-the-hottest-summer-ever-d92d500a8f01)）。
- en: The data that I have copied from OWID represents the CO2 emissions for countries
    since 1750\. The original data contains far more information than we need, so
    I have created subsets of the data and stored them in the app. You will find them
    in the `data` folder.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我从 OWID 复制的数据代表自 1750 年以来的各国 CO2 排放。原始数据包含的信息远远超出我们所需，所以我创建了数据的子集，并将其存储在应用中。您会在
    `data` 文件夹中找到它们。
- en: We will start by creating a simple app that will display the emissions for the
    year 2021 in a choropleth. The code below reads a CSV file that contains data
    for many years and filters it to create a Pandas dataframe for 2021, only.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建一个简单的应用开始，该应用会显示 2021 年的排放数据，使用 choropleth。下面的代码读取一个包含多年数据的 CSV 文件，并筛选出仅用于
    2021 年的 Pandas 数据框。
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can see what the data looks like from the image below. The *Entity* column
    contains the name of the country; the *Code* column is an internationally recognised
    three-letter code ([ISO 3166–1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3))
    that represents the country; *Year* is self-explanatory and is, of course, always
    2021 in this dataframe; and the *Annual CO2 emissions* column gives the annual
    emissions in tonnes of CO2.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从下面的图片看到数据的样子。*Entity*列包含了国家的名称；*Code*列是一个国际公认的三字母代码（[ISO 3166–1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)），用于表示国家；*Year*显而易见，在这个数据框中总是2021年；*Annual
    CO2 emissions*列给出了每年的CO2排放量（以吨为单位）。
- en: '![](../Images/07134c6a39928598f0e764c6f1c1e73f.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/07134c6a39928598f0e764c6f1c1e73f.png)'
- en: Once we have our data we are ready to create a map from it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了数据，就可以从中创建地图。
- en: Choropleths
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 着色图
- en: As I mentioned a choropleth is a map with shaded areas — the areas might be
    a country, state, or some other defined part of the globe and the level of shading
    represents a value.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如我所提到的，着色图是具有阴影区域的地图——这些区域可能是国家、州或地球上的其他定义部分，阴影的程度代表一个值。
- en: We’ll use the CO2 data above. First, we can ignore the year — it’s always 2021
    — the value in the emissions column will determine the colour and the ISO code
    will specify the area on the map that will be shaded.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用上面的CO2数据。首先，我们可以忽略年份——它总是2021年——排放量列的值将决定颜色，而ISO代码将指定地图上将被着色的区域。
- en: 'We start by defining a few variables: the column from which we will read the
    data and the maximum and minimum values of that data. We’ll use these to set the
    range of colours used on the map.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定义几个变量：我们将从中读取数据的列以及数据的最大值和最小值。我们将使用这些值来设置地图上颜色的范围。
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can now create our map using Plotly Express `choropleth`. As you can see
    from the code below, there are 5 parameters:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用Plotly Express的`choropleth`创建地图。如下面的代码所示，共有5个参数：
- en: The first is the dataframe that we will be reading.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个是我们将要读取的数据框。
- en: '`locations` is set to the column that refers to the part of the map to which
    the data in the dataframe refers. Here we specify the ‘Code’ column which contains
    the ISO code for a country, e.g. ‘AND’ for Andorra or ‘ZMB’ for Zambia (as you
    can see in the data table above). This code will be matched to the same code in
    the map (that is, the location).'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`locations`设置为指代数据框中数据所对应地图部分的列。这里我们指定了包含国家ISO代码的“Code”列，例如安道尔为‘AND’或赞比亚为‘ZMB’（如上表所示）。这个代码将与地图上的相同代码（即位置）匹配。'
- en: The third parameter, `color`, specifies how the colour is set. Here we use the
    column ‘Annual CO₂ emissions’, so the colour of the section of the map specified
    by the ISO code will be set according to the level of emissions.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三个参数`color`指定了颜色的设置方式。这里我们使用“Annual CO₂ emissions”列，因此地图上由ISO代码指定的区域的颜色将根据排放水平设置。
- en: The next parameter, `hover_name`, specifies the column where the name of the
    country can be found (the actual name, rather than the code) and this will be
    displayed when your pointer hovers over that part of the map.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个参数`hover_name`指定了可以找到国家名称的列（实际名称，而不是代码），当你的指针悬停在地图的该部分时，这个名称将会显示出来。
- en: The final value to be passed to the function is, `color_range`, the range of
    colours to be used to represent the level of emissions. We calculated the maximum
    and minimum values earlier and these will be mapped onto the beginning and end
    of the default colour range.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 传递给函数的最终值是`color_range`，它表示用于表示排放水平的颜色范围。我们之前计算了最大值和最小值，这些值将映射到默认颜色范围的开始和结束。
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The are several other parameters that are available to us but we will rely on
    the default values for these, for now.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 还有几个其他参数可供我们使用，但我们目前将依赖于这些参数的默认值。
- en: Where’s the map
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地图在哪里？
- en: You may think we have missed something here. I keep referring to a map but where
    is it? The answer is that while we can certainly specify a map (as we shall see
    later) Plotly conveniently incorporates some maps that represent various parts
    of the world — it defaults to using one of the whole world. And that default world
    map is divided into countries that are labelled with the appropriate ISO code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能觉得我们在这里遗漏了什么。我一直提到地图，但它在哪里呢？答案是，虽然我们确实可以指定一张地图（如后面所见），但Plotly方便地包含了一些代表世界不同部分的地图——它默认使用的是整个世界的地图。这个默认的世界地图被划分为带有适当ISO代码的国家。
- en: If we run the code above using`plotly_chart(fig)` in Streamlit, or `fig.show()`
    in a standard Python environment, or Jupyter Notebook, we will get the figure
    shown below.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在Streamlit中使用`plotly_chart(fig)`运行上述代码，或者在标准Python环境或Jupyter Notebook中使用`fig.show()`，我们将得到如下所示的图形。
- en: '![](../Images/a42c255ac9f123c96a50d11b66a81a20.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a42c255ac9f123c96a50d11b66a81a20.png)'
- en: You can see that, in this screenshot, the mouse is hovering over the USA so
    we can see the specific information for that country. That’s quite neat and has
    not involved a great deal of effort.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，在这个截图中，鼠标悬停在美国上，这样我们可以看到那个国家的具体信息。这相当不错，而且没有花费太多精力。
- en: But what if we don’t want to see the whole world?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们不想看到整个世界怎么办？
- en: As I said, Plotly helpfully includes built-in maps. These are `'world'`, `'usa'`,
    `'europe'`, `'asia'`, `'africa'`, `'north america'`, or `'south america'.`
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我所说，Plotly很贴心地包括了内置地图。这些地图包括`'world'`、`'usa'`、`'europe'`、`'asia'`、`'africa'`、`'north
    america'`或`'south america'`。
- en: So, simply adding a new parameter to the function call can change the map from
    the default `'world'` to any of the above. That parameter is `scope` and set to
    `'europe'` in the code below.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，简单地在函数调用中添加一个新参数可以将地图从默认的`'world'`更改为上述任何一个。这个参数是`scope`，在下面的代码中设置为`'europe'`。
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The resulting map is shown in the following screenshot and you can see, in the
    code and on the map that I have also set a title for the chart.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 结果地图如下面的截图所示，你可以在代码和地图中看到，我也为图表设置了一个标题。
- en: '![](../Images/c83ae03a553197ced1aa008998646fab.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c83ae03a553197ced1aa008998646fab.png)'
- en: Europe emissions
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 欧洲排放
- en: The range of colours is still set for the entire world so given that emissions
    for different European countries are not so different, it is difficult to distinguish
    between them here. To get a better picture of emissions in Europe we might want
    to set the range to just the countries that we are focussing on.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色范围仍然设置为整个世界，因此考虑到不同欧洲国家的排放量差异不大，这里很难区分它们。为了更好地了解欧洲的排放情况，我们可能希望将范围设置为仅关注的国家。
- en: But our purpose here is simply to illustrate the use of the `scope` parameter.
    And to that end here is a set of images for some of the other built-in maps.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们在这里的目的是仅仅说明`scope`参数的使用。因此，这里有一组其他内置地图的图片。
- en: '![](../Images/2f9c0637e91bc37ce74d1d19bdfaea6e.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2f9c0637e91bc37ce74d1d19bdfaea6e.png)'
- en: The code to create these maps is in the repo.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 创建这些地图的代码在仓库中。
- en: You are not limited to the built-in maps, though; you can provide your own,
    too, such as the Australian state map we saw earlier.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你并不局限于内置地图；你也可以提供你自己的地图，例如我们之前看到的澳大利亚州地图。
- en: The next code panel contains a complete Streamlit app to produce the Australian
    choropleth that we saw above.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个代码面板包含一个完整的Streamlit应用程序，用于生成我们之前看到的澳大利亚颜色图层。
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After the imports and the introductory text, we open a *GeoJSON* file from the
    *geo* folder called *australia.geojson* (see Notes)*.* This is a map file that
    can be used in place of the built-in maps. (To find maps like these, you can do
    an Internet search, or use GitHub which has several repositories of GeoJSON maps.)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入和介绍文本之后，我们从*geo*文件夹中打开一个名为*australia.geojson*的*GeoJSON*文件（见注释）。这是一个可以替代内置地图的地图文件。（要找到类似的地图，你可以进行互联网搜索，或者使用GitHub，那里有几个GeoJSON地图的仓库。）
- en: 'In the call to `px.choropleth` we see an additional parameter `geojson` which
    identifies the map that we loaded. We also need to specify a feature on the map
    that we are going to use to display the data. We can find the features by inspecting
    the JSON code: `oz[''features''][0]` will show you the features on this map. The
    one we are looking for is `properties.name`. So, this goes in the parameter, `featureidkey`.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在`px.choropleth`的调用中，我们看到一个额外的参数`geojson`，它标识了我们加载的地图。我们还需要指定一个地图上的特征，用于显示数据。我们可以通过检查JSON代码找到特征：`oz['features'][0]`将显示此地图上的特征。我们要找的是`properties.name`。因此，这将作为参数`featureidkey`的值。
- en: If we leave it at that then we will get a map of the whole world with the choropleth
    tucked away in the corner!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们就这样做，我们会得到一张整个世界的地图，颜色图层被隐藏在角落里！
- en: '![](../Images/02849659728bdf7cccc290bf38a85dcc.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/02849659728bdf7cccc290bf38a85dcc.png)'
- en: A map without the bounds set
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 没有设置边界的地图
- en: 'So, we need to tell the choropleth function the bounds of the map: we set the
    parameter `fitbounds` to `''geojson''` and this will ensure that only the part
    of the world that is defined by the map is displayed'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要告诉颜色图层函数地图的边界：我们将参数`fitbounds`设置为`'geojson'`，这将确保仅显示由地图定义的世界部分。
- en: Scatter maps
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 散点地图
- en: Scatter maps are very similar to choropleths but instead of areas being blocked
    out with colour; coloured circles are positioned in those areas (like a scatter
    chart).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图与分层色彩图非常相似，但不是用颜色填充区域，而是将有颜色的圆圈放置在这些区域中（类似于散点图）。
- en: Here is a scatter map of populations in European countries.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个欧洲国家人口的散点图。
- en: '![](../Images/1b20c95a455105526810bf355bd2dd27.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1b20c95a455105526810bf355bd2dd27.png)'
- en: European populations — data source Eurostat (see Notes)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 欧洲人口——数据来源Eurostat（见备注）
- en: The code is very similar to a choropleth but, in addition to specifying the
    colour that represents the data, we can also set the size of the circles.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码与分层色彩图非常相似，但除了指定表示数据的颜色外，我们还可以设置圆圈的大小。
- en: Here is the code to draw the map above.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是绘制上述地图的代码。
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The population data comes from Eurostat (see Notes) although I have added the
    three-letter ISO country codes instead of the two-letter ones that the EU tend
    to use and only used the data for 2021\. Here is a sample of the data.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 人口数据来自于Eurostat（见备注），虽然我添加了三字母的ISO国家代码，而不是EU通常使用的两字母代码，并且仅使用了2021年的数据。以下是数据的一个示例。
- en: '![](../Images/8d49dc59647e8bd64f21698f033f8255.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8d49dc59647e8bd64f21698f033f8255.png)'
- en: 'European population figures: source, Eurostat'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 欧洲人口数据：来源，Eurostat
- en: You can see from the code that the parameters for the scatter map are pretty
    much the same as for the choropleth but here I’ve set the `size` parameter to
    the same column as `colour` so the size of the circle varies with the population
    as well as the colour.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 从代码中可以看到，散点图的参数与分层色彩图非常相似，但在这里我将`size`参数设置为与`colour`相同的列，因此圆圈的大小也随人口数量而变化。
- en: Interactivity
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互性
- en: If we are going to build a dashboard then we want to include some interactivity.
    In the screenshot below we have gone back to our CO2 emissions data and are displaying
    two choropleths that utilise two different projections. We are not going to go
    into any details about map projections here, but there is one worth mentioning.
    The choropleth on the right represents the world as a globe and it behaves like
    one, too. If you click on the globe and move the mouse, the globe will rotate.
    This may be more amusing than useful but it is quite satisfying to play with.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要构建一个仪表盘，那么我们希望包含一些交互性。在下面的截图中，我们回到我们的二氧化碳排放数据，并显示了两个使用不同投影的分层色彩图。我们不会详细讨论地图投影，但有一个值得提及的。右侧的分层色彩图将世界表示为地球仪，并且它的行为也像一个地球仪。如果你点击地球仪并移动鼠标，地球仪会旋转。这可能比有用更有趣，但玩起来非常令人满意。
- en: Orthographic projection
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正射投影
- en: '![](../Images/8b47f324736b18a6c35c2693dae40fbe.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8b47f324736b18a6c35c2693dae40fbe.png)'
- en: We can see the code for globe representation below.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是地球仪表示的代码。
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It’s much the same as we have already seen except that the is a new parameter,
    `projection` which is set to `'orthographic'` it is this orthographic view that
    gives us an interactive globe. We’ll see this code in context shortly.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们已经看到的内容几乎一样之外，这里有一个新的参数`projection`，它被设置为`'orthographic'`，正是这个正射投影视图给我们提供了一个互动地球仪。我们将在稍后看到这些代码的具体应用。
- en: User input
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户输入
- en: However, the main user interactivity in this app is through a slider bar that
    lets us select a year for which emissions will be displayed. This is one of the
    built-in Streamlit input widgets and is an effective method of getting user input.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个应用程序的主要用户交互是通过一个滑块条来实现的，滑块条允许我们选择一个年份以显示排放量。这是一个内置的Streamlit输入控件，是获取用户输入的有效方法。
- en: Here is the complete code for the app shown above.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是上面展示的应用程序的完整代码。
- en: '[PRE7]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The main difference between this and previous apps is that we are using a data
    file that covers the whole range of years from 1750 to 2021 and the inclusion
    of the slider bar which selects the variable `year`. This variable is then used
    in the choropleth code to filter the data from the dataframe and display a map
    for the selected year.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的应用程序相比，这个应用程序的主要区别在于我们使用了一个涵盖1750年至2021年整个范围的数据文件，以及包含选择变量`year`的滑块条。这个变量然后在分层色彩图代码中用于从数据框中过滤数据，并显示所选年份的地图。
- en: Now we have the basic ingredients to create a pleasing dashboard app.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了创建一个令人愉悦的仪表盘应用程序的基本要素。
- en: The Dashboard
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仪表盘
- en: We have already covered most of the code that is used in the dashboard, apart
    from some standard Streamlit layout code and a bit of Pandas filtering.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了仪表盘中使用的大部分代码，除了些标准的Streamlit布局代码和一些Pandas过滤。
- en: 'It has optional views: on the left is a map that can selected to be either
    a choropleth or a scatter map with radio buttons; and on the right, a multi-select
    box allows you to select one or more countries — their data can be viewed as a
    table or graphs using Streamlit tabs.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 它有可选视图：左侧是一个地图，可以选择为分级图或散点图，通过单选按钮选择；右侧的多选框允许你选择一个或多个国家——这些国家的数据可以使用Streamlit选项卡以表格或图形形式查看。
- en: Streamlit makes this sort of functionality very easy as you can see in the code
    below that implements the selection of countries and the display of a line chart
    or a dataframe in one of two tabs.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit使得这种功能变得非常简单，正如下面的代码所示，实现了国家选择和在两个选项卡中显示折线图或数据框的功能。
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The year for which emissions are shown is selected from the slider bar near
    the top and a global total for that year is also shown top left and the data views
    are automatically updated when the year is changed.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 排放量显示的年份可以从顶部的滑块条中选择，并且该年份的全球总数也显示在左上角，当年份发生变化时，数据视图会自动更新。
- en: '![](../Images/49686b9f65f0eef7df2285fb5786a07f.png)![](../Images/bc11aa72b2cbf4353f720ecc718466a9.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/49686b9f65f0eef7df2285fb5786a07f.png)![](../Images/bc11aa72b2cbf4353f720ecc718466a9.png)'
- en: 'The complete code is too long to include here but the entire dashboard and
    pages that illustrate all of the code above are published in the Streamlit Cloud
    here: [CO2_Emissions_Dashboard](https://co2-dashboard.streamlit.app/CO2_Emissions_Dashboard).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 完整代码过长，无法在这里包括，但整个仪表板和展示所有上述代码的页面已发布在Streamlit Cloud上：[CO2_Emissions_Dashboard](https://co2-dashboard.streamlit.app/CO2_Emissions_Dashboard)。
- en: You can also access the GitHub repository that contains all of the code and
    data either from the app or by following the direct link [here](https://github.com/alanjones2/st-choropleth/tree/main).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过应用程序或点击直接链接[这里](https://github.com/alanjones2/st-choropleth/tree/main)访问包含所有代码和数据的GitHub存储库。
- en: Is it really a GIS?
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它真的算是一个GIS吗？
- en: The dashboard uses geographical representations of data but doesn’t let you
    do any deep analysis, so it’s more of a dashboard than a serious GIS. But it does
    let you explore the CO2 emissions across the globe and through time.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板使用地理数据表示，但不允许进行深入分析，因此它更像是一个仪表板，而不是一个严肃的GIS。但它确实允许你探索全球及时间范围内的CO2排放。
- en: We can see from the graphs, for example, that during the Industrial Revolution
    (the 80-odd years from 1750), it was only the UK that created any serious emissions
    but in the 20th century, these were quickly dwarfed by those of the USA and other
    countries. These graphs can also show us that some countries have managed to reduce
    their emissions over the last few years, while others have not.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从图表中看到，例如，在工业革命（1750年左右的80年间）期间，只有英国产生了严重的排放，但在20世纪，这些排放很快被美国和其他国家的排放所超越。这些图表还可以显示出一些国家在过去几年里成功减少了排放，而其他国家则没有。
- en: 'The table view allows us to rank the selected counties in order of emissions.
    You might expect those with large populations to be the worst offenders, and in
    the case of China, you would be right, but look at India and the USA, and you
    will see quite different situations: India, with a similar population to China,
    has much lower emissions; and the US emissions are declining while China’s are
    still increasing.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 表格视图允许我们按排放量对选定的县进行排序。你可能会认为人口较多的国家是最严重的排放者，就中国而言，你是对的，但看看印度和美国，你会看到完全不同的情况：印度的人口与中国相近，但排放量却低得多；而美国的排放量正在下降，而中国的排放量仍在增加。
- en: But whether or not it is a true GIS, I hope you have found that has been a useful
    exercise in how to create an attractive and useful dashboard in Streamlit using
    its mapping elements.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 不管它是否是真正的GIS，我希望你发现这是一项如何在Streamlit中使用其映射元素创建一个有吸引力且有用的仪表板的有用练习。
- en: Thanks for reading.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。
- en: Notes
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 备注
- en: All images, screenshots and code have been created by the author unless otherwise
    noted.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非另有说明，所有的图像、截图和代码均由作者创建。
- en: Australian population data comes from the Australian Bureau of Statistics, [National,
    state and territory population](https://www.abs.gov.au/statistics/people/population/national-state-and-territory-population/latest-release)[,](https://www.abs.gov.au/statistics/people/population/national-state-and-territory-population/latest-release),)
    ABS Website, accessed 13 December 2023, CC-BY 4.0 licence.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 澳大利亚的人口数据来源于澳大利亚统计局，[国家、省州和领地人口](https://www.abs.gov.au/statistics/people/population/national-state-and-territory-population/latest-release)[,](https://www.abs.gov.au/statistics/people/population/national-state-and-territory-population/latest-release),)
    ABS网站，访问日期：2023年12月13日，CC-BY 4.0许可证。
- en: Global CO₂ Emissions Data is derived from the [Our World in Data (OWID) co2-data
    GitHub repository](https://github.com/owid/co2-data), [Creative Commons BY license](https://creativecommons.org/licenses/by/4.0/).
    The data used here was created from the OWID original in September 2023.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全球 CO₂ 排放数据来源于 [我们的数据世界（OWID）co2-data GitHub 仓库](https://github.com/owid/co2-data)，[创意共享
    BY 许可证](https://creativecommons.org/licenses/by/4.0/)。这里使用的数据是基于 OWID 原始数据创建的，时间为
    2023 年 9 月。
- en: Australian state GeoJSON from [Click that Hood on GitHub](https://github.com/codeforgermany/click_that_hood),
    retrieved 16/12/2023, MIT license.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 澳大利亚州的 GeoJSON 数据来自 [GitHub 上的 Click that Hood](https://github.com/codeforgermany/click_that_hood)，检索日期为
    2023 年 12 月 16 日，MIT 许可证。
- en: European population data from [Eurostat](https://ec.europa.eu/eurostat/web/interactive-publications/demography-2023),
    retrieved 16/12/2023, CC-BY 4.0 licence.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欧洲人口数据来自 [欧盟统计局](https://ec.europa.eu/eurostat/web/interactive-publications/demography-2023)，检索日期为
    2023 年 12 月 16 日，CC-BY 4.0 许可证。
- en: You can find more of my work on my [website](http://alanjones2.github.io) and
    follow me either here on Medium or with my occasional [newsletter](http://technofile.substack.com).
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在我的 [网站](http://alanjones2.github.io) 上找到更多我的作品，也可以在 Medium 上关注我，或通过我的偶尔
    [通讯](http://technofile.substack.com) 进行关注。
