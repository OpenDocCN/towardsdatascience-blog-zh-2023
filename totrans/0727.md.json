["```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport powerlaw\nimport pandas as pd\n\nnp.random.seed(0)\n```", "```py\n# power law data\na = 2\nx_min = 1\nn = 1_000\nx = np.linspace(0, n, n+1)\ns_pareto = (np.random.pareto(a, len(x)) + 1) * x_min\n\n# log normal data\nm = 10\ns = 1\ns_lognormal = np.random.lognormal(m, s, len(x)) * s * np.sqrt(2*np.pi)\n```", "```py\n# fit power to power law data\nresults = powerlaw.Fit(s_pareto)\n\n# printing results\nprint(\"alpha = \" + str(results.power_law.alpha)) # note: powerlaw lib's alpha definition is different than standard i.e. a_powerlawlib = a_standard + 1\nprint(\"x_min = \" + str(results.power_law.xmin))\nprint('p = ' + str(compute_power_law_p_val(results)))\n\n# Calculating best minimal value for power law fit\n# alpha = 2.9331912195958676\n# x_min = 1.2703447024073973\n# p = 0.999\n```", "```py\n# fit power to log normal data\nresults = powerlaw.Fit(s_lognormal)\nprint(\"alpha = \" + str(results.power_law.alpha)) # note: powerlaw lib's alpha definition is different than standard i.e. a_powerlawlib = a_standard + 1\nprint(\"x_min = \" + str(results.power_law.xmin))\nprint('p = ' + str(compute_power_law_p_val(results)))\n\n# Calculating best minimal value for power law fit\n# alpha = 2.5508694755027337\n# x_min = 76574.4701482522\n# p = 0.999\n```", "```py\n# fixing xmin so that fit must include all data\nresults = powerlaw.Fit(s_lognormal, xmin=np.min(s_lognormal))\nprint(\"alpha = \" + str(results.power_law.alpha))\nprint(\"x_min = \" + str(results.power_law.xmin))\n\n# alpha = 1.3087955873576855\n# x_min = 2201.318351239509\n```", "```py\nprint(\"mu = \" + str(results.lognormal.mu))\nprint(\"sigma = \" + str(results.lognormal.sigma))\n\n# mu = 10.933481999687547\n# sigma = 0.9834599169175509\n```", "```py\ndistribution_list = ['lognormal', 'exponential', 'truncated_power_law', \\\n      'stretched_exponential', 'lognormal_positive']\n\nfor distribution in distribution_list:\n    R, p = results.distribution_compare('power_law', distribution)\n    print(\"power law vs \" + distribution + \n          \": R = \" + str(np.round(R,3)) + \n          \", p = \" + str(np.round(p,3)))\n\n# power law vs lognormal: R = -776.987, p = 0.0\n# power law vs exponential: R = -737.24, p = 0.0\n# power law vs truncated_power_law: R = -419.958, p = 0.0\n# power law vs stretched_exponential: R = -737.289, p = 0.0\n# power law vs lognormal_positive: R = -776.987, p = 0.0\n```"]