["```py\npip install --upgrade git+https://github.com/UKPLab/sentence-transformers\npip install keybert ctransformers[cuda]\npip install --upgrade git+https://github.com/huggingface/transformers\n```", "```py\nfrom ctransformers import AutoModelForCausalLM\n\n# Set gpu_layers to the number of layers to offload to GPU. \n# Set to 0 if no GPU acceleration is available on your system.\nmodel = AutoModelForCausalLM.from_pretrained(\n    \"TheBloke/Mistral-7B-Instruct-v0.1-GGUF\",\n    model_file=\"mistral-7b-instruct-v0.1.Q4_K_M.gguf\",\n    model_type=\"mistral\",\n    gpu_layers=50,\n    hf=True\n)\n```", "```py\nfrom transformers import AutoTokenizer, pipeline\n\n# Tokenizer\ntokenizer = AutoTokenizer.from_pretrained(\"mistralai/Mistral-7B-Instruct-v0.1\")\n\n# Pipeline\ngenerator = pipeline(\n    model=model, tokenizer=tokenizer,\n    task='text-generation',\n    max_new_tokens=50,\n    repetition_penalty=1.1\n)\n```", "```py\n>>> response = generator(\"What is 1+1?\")\n>>> print(response[0][\"generated_text\"])\n\"\"\"\nWhat is 1+1?\nA: 2\n\"\"\"\n```", "```py\nprompt = \"\"\"\nI have the following document:\n* The website mentions that it only takes a couple of days to deliver but I still have not received mine\n\nExtract 5 keywords from that document.\n\"\"\"\nresponse = generator(prompt)\nprint(response[0][\"generated_text\"])\n```", "```py\n\"\"\"\nI have the following document:\n* The website mentions that it only takes a couple of days to deliver but I still have not received mine\n\nExtract 5 keywords from that document.\n\n**Answer:**\n1\\. Website\n2\\. Mentions\n3\\. Deliver\n4\\. Couple\n5\\. Days\n\"\"\"\n```", "```py\nexample_prompt = \"\"\"\n<s>[INST]\nI have the following document:\n- The website mentions that it only takes a couple of days to deliver but I still have not received mine.\n\nPlease give me the keywords that are present in this document and separate them with commas.\nMake sure you to only return the keywords and say nothing else. For example, don't say:\n\"Here are the keywords present in the document\"\n[/INST] meat, beef, eat, eating, emissions, steak, food, health, processed, chicken</s>\"\"\"\n```", "```py\nkeyword_prompt = \"\"\"\n[INST]\nI have the following document:\n- [DOCUMENT]\n\nPlease give me the keywords that are present in this document and separate them with commas.\nMake sure you to only return the keywords and say nothing else. For example, don't say:\n\"Here are the keywords present in the document\"\n[/INST]\n\"\"\"\n```", "```py\n>>> prompt = example_prompt + keyword_prompt\n>>> print(prompt)\n\"\"\"\n<s>[INST]\nI have the following document:\n- The website mentions that it only takes a couple of days to deliver but I still have not received mine.\n\nPlease give me the keywords that are present in this document and separate them with commas.\nMake sure you to only return the keywords and say nothing else. For example, don't say: \n\"Here are the keywords present in the document\"\n[/INST] meat, beef, eat, eating, emissions, steak, food, health, processed, chicken</s>\n[INST]\n\nI have the following document:\n- [DOCUMENT]\n\nPlease give me the keywords that are present in this document and separate them with commas.\nMake sure you to only return the keywords and say nothing else. For example, don't say: \n\"Here are the keywords present in the document\"\n[/INST]\n\"\"\"\n```", "```py\nfrom keybert.llm import TextGeneration\nfrom keybert import KeyLLM\n\n# Load it in KeyLLM\nllm = TextGeneration(generator, prompt=prompt)\nkw_model = KeyLLM(llm)\n```", "```py\ndocuments = [\n\"The website mentions that it only takes a couple of days to deliver but I still have not received mine.\",\n\"I received my package!\",\n\"Whereas the most powerful LLMs have generally been accessible only through limited APIs (if at all), Meta released LLaMA's model weights to the research community under a noncommercial license.\"\n]\n\nkeywords = kw_model.extract_keywords(documents)\n```", "```py\n[['deliver',\n    'days',\n    'website',\n    'mention',\n    'couple',\n    'still',\n    'receive',\n    'mine'],\n    ['package', 'received'],\n    ['LLM',\n    'API',\n    'accessibility',\n    'release',\n    'license',\n    'research',\n    'community',\n    'model',\n    'weights',\n    'Meta']]\n```", "```py\nfrom keybert import KeyLLM\nfrom sentence_transformers import SentenceTransformer\n\n# Extract embeddings\nmodel = SentenceTransformer('BAAI/bge-small-en-v1.5')\nembeddings = model.encode(documents, convert_to_tensor=True)\n\n# Load it in KeyLLM\nkw_model = KeyLLM(llm)\n\n# Extract keywords\nkeywords = kw_model.extract_keywords(\n    documents, \n    embeddings=embeddings, \n    threshold=.5\n)\n```", "```py\n>>> keywords\n[['deliver',\n    'days',\n    'website',\n    'mention',\n    'couple',\n    'still',\n    'receive',\n    'mine'],\n    ['deliver',\n    'days',\n    'website',\n    'mention',\n    'couple',\n    'still',\n    'receive',\n    'mine'],\n    ['LLaMA',\n    'model',\n    'weights',\n    'release',\n    'noncommercial',\n    'license',\n    'research',\n    'community',\n    'powerful',\n    'LLMs',\n    'APIs']]\n```", "```py\nfrom keybert import KeyLLM, KeyBERT\n\n# Load it in KeyLLM\nkw_model = KeyBERT(llm=llm, model='BAAI/bge-small-en-v1.5')\n\n# Extract keywords\nkeywords = kw_model.extract_keywords(documents, threshold=0.5)\n```", "```py\n>>> keywords\n[['deliver',\n  'days',\n  'website',\n  'mention',\n  'couple',\n  'still',\n  'receive',\n  'mine'],\n ['deliver',\n  'days',\n  'website',\n  'mention',\n  'couple',\n  'still',\n  'receive',\n  'mine'],\n ['LLaMA',\n  'model',\n  'weights',\n  'release',\n  'license',\n  'research',\n  'community',\n  'powerful',\n  'LLMs',\n  'APIs',\n  'accessibility']]\n```"]