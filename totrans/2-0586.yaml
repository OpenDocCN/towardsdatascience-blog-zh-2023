- en: Create and Deploy a REST API Extracting Predominant Colors from Images
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建并部署一个提取图像主要颜色的REST API
- en: 原文：[https://towardsdatascience.com/create-and-deploy-a-rest-api-extracting-predominant-colors-from-images-a44b94cc3d46](https://towardsdatascience.com/create-and-deploy-a-rest-api-extracting-predominant-colors-from-images-a44b94cc3d46)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/create-and-deploy-a-rest-api-extracting-predominant-colors-from-images-a44b94cc3d46](https://towardsdatascience.com/create-and-deploy-a-rest-api-extracting-predominant-colors-from-images-a44b94cc3d46)
- en: Using unsupervised machine learning, FastAPI and Docker
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用无监督机器学习、FastAPI和Docker
- en: '[](https://nicolo-albanese.medium.com/?source=post_page-----a44b94cc3d46--------------------------------)[![Nicolo
    Cosimo Albanese](../Images/9a2c26207146741b58c3742927d09450.png)](https://nicolo-albanese.medium.com/?source=post_page-----a44b94cc3d46--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a44b94cc3d46--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a44b94cc3d46--------------------------------)
    [Nicolo Cosimo Albanese](https://nicolo-albanese.medium.com/?source=post_page-----a44b94cc3d46--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://nicolo-albanese.medium.com/?source=post_page-----a44b94cc3d46--------------------------------)[![Nicolo
    Cosimo Albanese](../Images/9a2c26207146741b58c3742927d09450.png)](https://nicolo-albanese.medium.com/?source=post_page-----a44b94cc3d46--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a44b94cc3d46--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a44b94cc3d46--------------------------------)
    [Nicolo Cosimo Albanese](https://nicolo-albanese.medium.com/?source=post_page-----a44b94cc3d46--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a44b94cc3d46--------------------------------)
    ·15 min read·Sep 26, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a44b94cc3d46--------------------------------)
    ·阅读时间15分钟·2023年9月26日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/2c1fc392c4d210706b63a714d397b644.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2c1fc392c4d210706b63a714d397b644.png)'
- en: Image by author.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: Table of contents
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录
- en: '[Problem statement](#c5a9)'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[问题陈述](#c5a9)'
- en: '[Extract colors from images](#dfe8)'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[从图像中提取颜色](#dfe8)'
- en: '[Project structure](#dfe8)'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[项目结构](#dfe8)'
- en: '[Code](#50f4)'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[代码](#50f4)'
- en: '[Deploy the Docker container](#d547)'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[部署Docker容器](#d547)'
- en: '[Let’s try it!](#aeea)'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[让我们尝试一下！](#aeea)'
- en: '[API documentation](#1e07)'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[API文档](#1e07)'
- en: '[Conclusions](#17f9)'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[结论](#17f9)'
- en: '[License disclaimer](#01e6)'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[许可证声明](#01e6)'
- en: 1\. Problem statement
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 问题陈述
- en: Let us imagine a control room of a **manufacturing facility**, where the fabricated
    products need to be sorted automatically. For instance, based on their color,
    goods may be redirected to different branches of a roller conveyor for further
    processing or packaging.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设想一个**制造设施**的控制室，其中生产的产品需要自动分类。例如，根据颜色，货物可能会被重新导向滚筒输送机的不同分支，以进行进一步处理或包装。
- en: Otherwise, we can also imagine an **online retailer** trying to enhance the
    user experience by adding a *search-by-color* functionality. Customers may more
    easily find a clothing item from a particular color, thus simplifying their access
    to products of interest.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，我们也可以设想一个**在线零售商**试图通过添加*按颜色搜索*功能来增强用户体验。客户可以更容易地找到特定颜色的衣物，从而简化他们对感兴趣产品的访问。
- en: Or, just like the author, you can picture yourself as an **IT consultant** implementing
    a simple, fast and reusable tool to generate color palettes for presentations,
    charts and apps from input images.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，就像作者一样，你可以将自己想象成一位**IT顾问**，实现一个简单、快速且可重用的工具，用于从输入图像中生成适用于演示文稿、图表和应用程序的色彩调色板。
- en: These are just few examples of how extracting the main colors from a picture
    may either improve operational efficiency or boost customer experience.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是从图片中提取主要颜色如何提升操作效率或增强客户体验的几个示例。
- en: In this blog post, we use Python to implement the extraction of predominant
    colors from a given picture. Then, we use FastAPI and Docker to package and deploy
    the solution as a service.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博客文章中，我们使用Python实现从给定图片中提取主要颜色。然后，我们使用FastAPI和Docker将解决方案打包并部署为服务。
- en: The purpose of this post is to share an end-to-end illustration about the deployment
    of a lightweight and self-consistent service leveraging Machine Learning techniques
    to carry out a business purpose. Such a service may be easily integrated in a
    [microservice architecture](https://microservices.io/index.html).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本帖的目的是分享一个关于部署轻量且自洽服务的端到端示例，该服务利用机器学习技术实现商业目的。这样的服务可以轻松集成到[microservice architecture](https://microservices.io/index.html)中。
- en: 2\. Extract colors from images
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 从图像中提取颜色
- en: 'A digital image is essentially a 2-dimensional grid of individual components
    known as pixels. [Pixels](https://en.wikipedia.org/wiki/Pixel) are the smallest
    unit of display in the image, and carry information about its color. A popular
    approach to color representation is the [RGB color model](https://en.wikipedia.org/wiki/RGB_color_model).
    This additive model uses combination of the three primary colors — red, green
    and blue (hence the name, RGB) to create a broad array of colors. The intensity
    of each primary color is represented by an 8-bit value. Therefore, each pixel
    has three intensity values, one for each of the primary colors, ranging from 0
    to 255:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 数字图像本质上是一个二维的像素网格。[像素](https://en.wikipedia.org/wiki/Pixel)是图像中最小的显示单元，携带关于颜色的信息。常用的颜色表示方法是[RGB颜色模型](https://en.wikipedia.org/wiki/RGB_color_model)。这一加法模型使用三种原色——红色、绿色和蓝色（因此称为RGB）组合，创造出丰富的颜色。每种原色的强度由一个8位值表示。因此，每个像素有三个强度值，分别对应三种原色，范围从0到255：
- en: '![](../Images/d2c8f47bfe42b47c0b34d156753956d1.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d2c8f47bfe42b47c0b34d156753956d1.png)'
- en: The additive RGB color model. From [Wikipedia](https://it.wikipedia.org/wiki/RGB#/media/File:AdditiveColor.svg).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 加法 RGB 颜色模型。来源于 [维基百科](https://it.wikipedia.org/wiki/RGB#/media/File:AdditiveColor.svg)。
- en: We can extract predominant colors from an image through clustering. In brief,
    clustering techniques try to group similar objects together. Among clustering
    methods, we are going to use the [K-Means](https://en.wikipedia.org/wiki/K-means_clustering)
    algorithm. It aims at creating “compact” groups by minimizing the sum of squared
    distances between the data points and their respective group centers, named centroids.
    We can choose the number of groups/clusters `k` to create. In our case, the data
    points are the RGB values of each pixel. After model training, we can consider
    the centroids as representatives of the main colors inside the image.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过聚类从图像中提取主要颜色。简而言之，聚类技术尝试将相似的对象分组。在聚类方法中，我们将使用[K-Means](https://en.wikipedia.org/wiki/K-means_clustering)算法。它旨在通过最小化数据点与各自组中心（质心）之间的平方距离之和来创建“紧凑”的组。我们可以选择要创建的组/簇数量
    `k`。在我们的案例中，数据点是每个像素的 RGB 值。模型训练后，我们可以将质心视为图像中主要颜色的代表。
- en: 'Let us jump into practice and create a `ColorAnalyzer` class accepting an input
    image and extracting its main colors. The class will have the following methods:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入实践，创建一个 `ColorAnalyzer` 类，接受输入图像并提取其主要颜色。该类将具有以下方法：
- en: '`load_image` loads the image into a 2D array from the local path or URL.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`load_image` 从本地路径或 URL 加载图像到二维数组。'
- en: '`is_url` checks if the input path is URL.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_url` 检查输入路径是否为 URL。'
- en: '`preprocess_image` resizes the image to improve processing speed.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preprocess_image` 调整图像大小以提高处理速度。'
- en: '`find_clusters` applies K-Means clustering to extract important colors as centroids.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find_clusters` 应用 K-Means 聚类以提取重要颜色作为质心。'
- en: '`sort_clusters_by_size` sorts colors by cluster size in descending order.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort_clusters_by_size` 按簇大小降序排序颜色。'
- en: '`plot_image` displays the original input image (resized).'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plot_image` 显示原始输入图像（已调整大小）。'
- en: '`plot_3d_clusters` shows a 3-D plot of the clusters. The observations display
    their centroid’s (predominant) color.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plot_3d_clusters` 显示簇的三维图。观察结果显示其质心（主要）颜色。'
- en: '`plot_predominant_colors` plots a bar chart of the main colors ordered by presence
    in the image.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plot_predominant_colors` 绘制一张按图像中颜色出现频率排序的条形图。'
- en: '`get_predominant_colors` returns a list of the main colors as JSON objects.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_predominant_colors` 返回主要颜色的 JSON 对象列表。'
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can test our class using a Python notebook:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Python notebook 测试我们的类：
- en: 'Instantiate the class using an input URL pointing to an online image:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用指向在线图像的输入 URL 实例化类：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Plot the original image (resized):'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制原始图像（已调整大小）：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/f8293b34b0fc5aebbf5e674107db75a8.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f8293b34b0fc5aebbf5e674107db75a8.png)'
- en: Image by author.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: 'Plot a bar chart of the most predominant colors:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制最主要颜色的条形图：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/1f5ef6576add27124dbd825e02ffa182.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1f5ef6576add27124dbd825e02ffa182.png)'
- en: Image by author.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: 'Display the obtained clusters:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示获得的簇：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/feeceaf27f30e61a9b885552456a345f.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/feeceaf27f30e61a9b885552456a345f.png)'
- en: Image by author.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: 'Return a list of extracted colors as JSON objects:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回提取颜色的 JSON 对象列表：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can repeat the process for any input image (URL or local path) and inspect
    the outcome. For instance:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对任何输入图像（URL或本地路径）重复这一过程，并检查结果。例如：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/8ab7b9205cce01bc4730af5e13adf475.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8ab7b9205cce01bc4730af5e13adf475.png)'
- en: Image by author.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: How can we create a web service that provides this image analysis capability
    on request? We need to turn our notebook into a Python project that exposes a
    REST API.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如何创建一个在请求时提供图像分析功能的Web服务？我们需要将我们的笔记本转换为一个暴露REST API的Python项目。
- en: 3\. Project structure
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 项目结构
- en: 'Let us introduce the main ingredients of our project:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们介绍一下项目的主要组成部分：
- en: '[REST API](https://www.redhat.com/en/topics/api/what-is-a-rest-api): [REST](https://en.wikipedia.org/wiki/REST)
    (Representational State Transfer) API is an architectural style for designing
    applications. It uses standard HTTP methods (GET, POST, …) to allow communication
    between different systems. In our case, we want to enable a client to request
    the extraction of predominant colors from an input image using HTTP requests.
    We will use [FastAPI](https://fastapi.tiangolo.com/) to build the API service.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[REST API](https://www.redhat.com/en/topics/api/what-is-a-rest-api)：[REST](https://en.wikipedia.org/wiki/REST)（表述性状态转移）API是一种设计应用程序的架构风格。它使用标准的HTTP方法（GET、POST等）来允许不同系统之间的通信。在我们的案例中，我们希望通过HTTP请求使客户端能够请求从输入图像中提取主要颜色。我们将使用[FastAPI](https://fastapi.tiangolo.com/)来构建API服务。'
- en: '[Docker](https://docs.docker.com/): a platform that allows to build, deploy,
    and run applications in isolated containers. Using Docker will help us to package
    together all the dependencies needed for the color extraction task, ensuring consistency,
    portability and removing operational headaches (*What Python version am I using?
    Did I install all packages? What version of OpenCV do I need?*).'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Docker](https://docs.docker.com/)：一个允许在隔离容器中构建、部署和运行应用程序的平台。使用Docker将帮助我们将所有用于颜色提取任务所需的依赖项打包在一起，确保一致性、可移植性并消除操作上的麻烦（*我使用的是哪个Python版本？我安装了所有包吗？我需要什么版本的OpenCV？*）。'
- en: '![](../Images/1d593e563f4b288d979a6371fdc9caaf.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1d593e563f4b288d979a6371fdc9caaf.png)'
- en: REST API. Image by author.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: REST API。图像由作者提供。
- en: 'We can structure the project as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将项目结构如下：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`README.md`: project documentation in Markdown.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.md`：项目文档，以Markdown格式编写。'
- en: '`requirements.txt`: list of Python dependencies needed to run the project.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requirements.txt`：运行项目所需的Python依赖项列表。'
- en: '`Dockerfile`: text document with all the commands to assemble a Docker image,
    i.e. an isolated environment for the project.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dockerfile`：包含所有组装Docker镜像命令的文本文件，即用于项目的隔离环境。'
- en: '`main.py`: the entry point of our application.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.py`：我们应用程序的入口点。'
- en: '`api/`: sub-folder with the definition of the REST API endpoints. In our simple
    example, we just have one endpoint to request color extraction.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`api/`：包含REST API端点定义的子文件夹。在我们的简单示例中，我们只有一个端点用于请求颜色提取。'
- en: '`dto/`: sub-folder with the data classes used in the requests and responses
    for the API service. The name `dto` derives from [Data Transfer Object](https://en.wikipedia.org/wiki/Data_transfer_object),
    as these classes represent the interface between the client and the service.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dto/`：包含在API服务请求和响应中使用的数据类的子文件夹。名称`dto`源自[数据传输对象](https://en.wikipedia.org/wiki/Data_transfer_object)，因为这些类代表客户端和服务之间的接口。'
- en: '`service/`: sub-folder with the application logic. In our example, the `ColorAnalyzer`
    class provides the image processing capability.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`service/`：包含应用程序逻辑的子文件夹。在我们的示例中，`ColorAnalyzer`类提供图像处理能力。'
- en: '`notebooks/`: sub-folder with notebook experiments.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`notebooks/`：包含笔记本实验的子文件夹。'
- en: The separation between data (or *model*), endpoints definition (or *controller*)
    and application logic (or *service*) in separate modules (`dto/`, `api/`, `service/`)
    is one way to guarantee clarity, maintainability, and reusability. It also promotes
    a cleaner architecture and simplify further developments. The reader may refer
    to the [MVC design pattern](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)
    for more information.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同模块（`dto/`、`api/`、`service/`）中分离数据（或*模型*）、端点定义（或*控制器*）和应用程序逻辑（或*服务*）是一种保证清晰性、可维护性和可重用性的方法。这也促进了更清洁的架构，并简化了后续开发。读者可以参考[MVC设计模式](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)以获取更多信息。
- en: 4\. Code
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 代码
- en: 'Let’s start looking into `main.py`. In our entry point, we:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始查看`main.py`。在我们的入口点中，我们：
- en: 'Create a FastAPI application: `app = FastAPI()`.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建FastAPI应用程序：`app = FastAPI()`。
- en: Enable CORS to allow client-side calls to the web service through the `add_middleware`
    method.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用CORS以通过`add_middleware`方法允许客户端调用Web服务。
- en: Define a `GET` request handler for the root endpoint (`"/"`) returning a simple
    message.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为根端点（`"/"`）定义一个`GET`请求处理程序，返回一个简单的消息。
- en: 'Include a router to our api module with the `"api/"` prefix. The prefix will
    become part of the final endpoint as follows: `"http://<host>:<port>/api/<endpoint>"`.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的api模块中包含一个路由器，并使用`"api/"`前缀。该前缀将成为最终端点的一部分，如下所示：`"http://<host>:<port>/api/<endpoint>"`。
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The definition of the endpoints is the `api` module. Inside the`"api/endpoints.py"`
    file, we:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 端点的定义在`api`模块中。在`"api/endpoints.py"`文件内，我们：
- en: 'Create the router for the FastAPI app: `router = APIRouter()`, which imported
    in the `main.py`.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为FastAPI应用程序创建路由器：`router = APIRouter()`，该路由器在`main.py`中被导入。
- en: Define a `POST` request for the `/colors` endpoint. The application expects
    a request of class `ColorExtractionRequest`, and returns a response of class `ColorExtractionResponse`.
    The two objects are defined in the `dto` module.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为`/colors`端点定义一个`POST`请求。应用程序期望一个`ColorExtractionRequest`类的请求，并返回一个`ColorExtractionResponse`类的响应。这两个对象在`dto`模块中定义。
- en: Upon receiving a request, a `ColorAnalyzer` object is instantiated and the color
    extraction results are returned as response to the user.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在接收到请求后，会实例化一个`ColorAnalyzer`对象，并将颜色提取结果作为响应返回给用户。
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let us explore the data model for the requests and responses. Its classes are
    in the `dto` module, inside the `dto/image_data.py` file:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索请求和响应的数据模型。其类定义在`dto`模块中，位于`dto/image_data.py`文件内：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This data model is straightforward. In brief, the service:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数据模型很简单。简而言之，该服务：
- en: Accepts an input URL or path, as well as a desired number of clusters/predominant
    colors.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受一个输入的URL或路径，以及一个期望的集群数量/主要颜色。
- en: Returns a list of JSON objects made of RGB values and the percentage of pixels
    in the image belonging to that cluster.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回一个由RGB值和图像中属于该集群的像素百分比组成的JSON对象列表。
- en: Interestingly, defining `pydantic` classes not only increases readability and
    maintenance, but also simplifies the generation of API documentation leveraging
    the FastAPI framework (more on that in the following paragraphs).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，定义`pydantic`类不仅提高了可读性和维护性，还简化了利用FastAPI框架生成API文档的过程（更多内容见后续段落）。
- en: Now, we only need to define a Docker image and deploy the Docker container.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需要定义一个Docker镜像并部署Docker容器。
- en: 5\. Deploy the Docker container
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 部署Docker容器
- en: 'Let us observe the `Dockerfile` inside the project root. This text document
    contains all the commands to create a Docker image for our project. In detail:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们观察项目根目录中的`Dockerfile`。此文本文件包含了为我们的项目创建Docker镜像的所有命令。具体如下：
- en: '`FROM python:3.8-slim` sets the base image as starting point.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FROM python:3.8-slim`将基础镜像设置为起始点。'
- en: '`WORKDIR /colors-extractor` sets the working directory inside the container
    to `/colors-extractor`.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WORKDIR /colors-extractor`将容器内的工作目录设置为`/colors-extractor`。'
- en: '`COPY requirements.txt requirements.txt` copies the dependencies from our local
    machine into the container inside the `WORKDIR`.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COPY requirements.txt requirements.txt`将依赖项从本地机器复制到容器内的`WORKDIR`。'
- en: '`RUN pip install -r requirements.txt` installs the Python dependencies listed
    in requirements.txt on the Docker container.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RUN pip install -r requirements.txt`在Docker容器中安装requirements.txt中列出的Python依赖项。'
- en: '`COPY . .` copies the project files from our local machine into the container.
    We do this later, after installing the dependencies, because Docker creates an
    image by layering subsequent commands. If we just update our code base, given
    the current order of commands the Docker engine will not reinstall all the dependencies.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COPY . .`将项目文件从本地机器复制到容器中。我们在安装依赖项后再执行此操作，因为Docker通过分层后续命令创建镜像。如果我们只是更新代码库，根据当前命令的顺序，Docker引擎不会重新安装所有依赖项。'
- en: '`EXPOSE 8000` exposes port 8000, on which our FastAPI app runs.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EXPOSE 8000`暴露了8000端口，我们的FastAPI应用程序就在这个端口上运行。'
- en: '`CMD [“uvicorn”, “main:app”, “--host”, “0.0.0.0”, “--port”, “8000”]` is the
    command to run when the container starts. In this case, we instruct the container
    to run the FastAPI app using Uvicorn. The mapping `main:app` sets the correct
    entry point of our app, in our case `main.py`.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CMD [“uvicorn”, “main:app”, “--host”, “0.0.0.0”, “--port”, “8000”]`是容器启动时运行的命令。在这种情况下，我们指示容器使用Uvicorn运行FastAPI应用程序。映射`main:app`设置了我们应用程序的正确入口点，即`main.py`。'
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To deploy the Docker container locally, from command line:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地部署Docker容器，从命令行：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can show running containers through:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式展示运行中的容器：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'With this command, we can get the container id associated to our application,
    and use it to inspect the logs:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令，我们可以获取与我们的应用程序相关联的容器ID，并使用它来检查日志：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The logs confirm that the application is running:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 日志确认应用程序正在运行：
- en: '![](../Images/18ae641e0cb5b912b04ddec4644f313a.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
- en: Image by author.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Let’s try it!
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us remember the endpoint structure:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '`main.py` declares a router to the `api` module with an `/api` prefix.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `api` module defines a `POST` request handler for the `/colors` endpoint
    inside the `endpoints.py` file.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The running port is `8000`.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Therefore, we should perform a `POST` call to:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '`[http://localhost:8000/api/colors](http://localhost:8000/api/colors.)`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To test the service, we may use tools such as [curl](https://curl.se/) or [Postman](https://www.postman.com/):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Result:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Similarly, using Postman:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0f7022adc2c32f7e6b995f2e6ab7d6bc.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
- en: Testing the service using Postman. Image by author.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'We can inspect the container again to verify the presence of our test calls
    in the logs:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/43df7a68a2f05c6e99085f0656f1cc4c.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
- en: Logs. Image by author.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 7\. API documentation
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'FastAPI automatically provides a documentation of the implemented APIs. By
    default, it is available at:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '`[http://<host>:<port>/docs](http://localhost:8000/api/colors.)`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By reaching that URL, we can find a web user interface ([Swagger UI](https://github.com/swagger-api/swagger-ui))
    fully documenting our endpoints:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/72e3c56bb3ab7f165cf89e93209a09ba.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: API documentation. Image by author.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'The data model for the requests and responses is under the `Schemas` section
    of the web interface, and it is populated with the `pydantic` models defined in
    the `dto` module and associated to the router’s handlers:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d8b9917ee6c7b99af2aeef87b3a85950.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
- en: Data models. Image by author.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Conclusions
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this blog post, we shared a step-by-step implementation of a service leveraging:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Unsupervised Machine Learning techniques to reach a business goal, i.e. extracting
    predominant colors from images.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FastAPI to serve the solution as a REST API.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker for isolated and consistent deployment.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our goal is to showcase a comprehensive example that could be easily reused
    and extended to deploy a Machine Learning model as a REST API.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: The full code for this blog is available on [GitHub](https://github.com/NicoloAlbanese/colors-extractor/tree/main).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '**9\. License disclaimer**'
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To write this post, we used two images:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: “[*Brown grass field background of mountain view*](https://unsplash.com/photos/xjXz8GKXcTI)”
    by [Linh Nguyen](https://unsplash.com/@bylinhnguyen).
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “[*White ceramic mug filled with coffee*](https://unsplash.com/photos/ZJsseAxEcqM)”
    by [Justin Leibow](https://unsplash.com/@justinleibow).
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both sources are free to use for personal and commercial use under the [Unplash
    license](https://unsplash.com/license). We generated image URLs using [Picsum](https://picsum.photos/)
    ([GitHub repo](https://github.com/DMarby/picsum-photos)) available under the [MIT
    license](https://github.com/DMarby/picsum-photos/blob/main/LICENSE.md).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
