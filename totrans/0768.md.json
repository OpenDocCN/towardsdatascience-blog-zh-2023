["```py\npip install --upgrade scalecast\n```", "```py\ntransformer = Transformer(['DiffTransform'])\nreverter = Reverter(['DiffRevert'],base_transformer=transformer)\n\ndef forecaster(f):\n    f.add_ar_terms(100)\n    f.add_seasonal_regressors('month')\n    f.set_estimator('xgboost')\n    f.manual_forecast()\n\npipeline = Pipeline(\n    steps = [\n        ('Transform',transformer),\n        ('Forecast',forecaster),\n        ('Revert',reverter)\n    ]\n)\n```", "```py\nf = Forecaster(\n    y=starts, # an array of observed values\n    current_dates=starts.index, # an array of dates\n    future_dates=24, # 24-length forecast horizon\n    test_length=24, # 24-length test-set for confidence intervals\n    cis=True, # generate naive intervals for comparison with the end result\n)\n\nf = pipeline.fit_predict(f)\n```", "```py\nbacktest_results = backtest_for_resid_matrix(\n    f, # one or more positional Forecaster objects can go here\n    pipeline=pipeline, # both univariate and multivariate pipelines supported\n    alpha = 0.05, # 0.05 for 95% cis (default) \n    bt_n_iter = None, # by default uses the minimum required: 20 for 95% cis, 10 for 90%, etc.\n    jump_back = 1, # space between training sets, default 1\n)\n```", "```py\nbacktest_resid_matrix = get_backtest_resid_matrix(backtest_results)\n```", "```py\noverwrite_forecast_intervals(\n    f, # one or more positional Forecaster objects can go here\n    backtest_resid_matrix=backtest_resid_matrix,\n    models=None, # if more than one models are in the matrix, subset down here\n    alpha = .05, # 0.05 for 95% cis (default)\n)\n```"]