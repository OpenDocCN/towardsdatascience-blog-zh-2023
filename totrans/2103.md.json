["```py\nimport pandas as pd\n\nfrom src.spatial import SpatialGridDecomposition, prune_coordinates\n\n# reading the data set\ntrips_df = pd.read_csv('trips.csv', parse_dates=['time'])\n\n# removing outliers from coordinates\ntrips_df = prune_coordinates(trips_df=trips_df, lhs_thr=0.01, rhs_thr=0.99)\n\n# grid decomposition with 10000 cells\ngrid = SpatialGridDecomposition(n_cells=10000)\n# setting bounding box\ngrid.set_bounding_box(lat=trips_df.latitude, lon=trips_df.longitude)\n# grid decomposition\ngrid.grid_decomposition()\n```", "```py\nfrom src.spatial import ODFlowCounts\n\n# getting origin and destination coordinates for each trip\ndf_group = trips_df.groupby(['cab', 'cab_trip_id'])\ntrip_points = df_group.apply(lambda x: ODFlowCounts.get_od_coordinates(x))\ntrip_points.reset_index(drop=True, inplace=True)\n```", "```py\n# getting the origin and destination cell centroid\nod_pairs = trip_points.apply(lambda x: ODFlowCounts.get_od_centroids(x, grid.centroid_df), axis=1)\n```", "```py\nflow_count = od_pairs.value_counts().reset_index()\nflow_count = flow_count.rename({0: 'count'}, axis=1)\n\ntop_od_pairs = flow_count.head(50)\n```", "```py\n# preparing data\ntrip_points = pd.concat([trip_points, od_pairs], axis=1)\ntrip_points = trip_points.sort_values('time_start')\ntrip_points.reset_index(drop=True, inplace=True)\n\n# getting origin-destination cells for each trip, and origin start time\ntrip_starts = []\nfor i, pair in top_od_pairs.iterrows():\n\n    origin_match = trip_points['origin'] == pair['origin']\n    dest_match = trip_points['destination'] == pair['destination']\n\n    od_trip_df = trip_points.loc[origin_match & dest_match, :]\n    od_trip_df.loc[:, 'pair'] = i\n\n    trip_starts.append(od_trip_df[['time_start', 'time_end', 'pair']])\n\ntrip_starts_df = pd.concat(trip_starts, axis=0).reset_index(drop=True)\n\n# more data processing\nod_count_series = {}\nfor pair, data in trip_starts_df.groupby('pair'):\n\n    new_index = pd.date_range(\n        start=data.time_start.values[0],\n        end=data.time_end.values[-1],\n        freq='H',\n        tz='UTC'\n    )\n\n    od_trip_counts = pd.Series(0, index=new_index)\n    for _, r in data.iterrows():\n        dt = r['time_start'] - new_index\n        dt_secs = dt.total_seconds()\n\n        valid_idx = np.where(dt_secs >= 0)[0]\n        idx = valid_idx[dt_secs[valid_idx].argmin()]\n\n        od_trip_counts[new_index[idx]] += 1\n\n    od_count_series[pair] = od_trip_counts.resample('H').mean()\n\nod_df = pd.DataFrame(od_count_series)\n```", "```py\nfrom pmdarima.arima import auto_arima\n\n# getting the first OD pair as example\nseries = od_df[0].dropna()\n\n# fitting an ARIMA model\nmodel = auto_arima(y=series, m=24)\n```"]