- en: How to Debug Python Scripts with the Logging Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-troubleshoot-python-scripts-with-the-logging-module-aaf630c35fe3](https://towardsdatascience.com/how-to-troubleshoot-python-scripts-with-the-logging-module-aaf630c35fe3)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Print statements can only take you so far…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@aashishnair?source=post_page-----aaf630c35fe3--------------------------------)[![Aashish
    Nair](../Images/23f4b3839e464419332b690a4098d824.png)](https://medium.com/@aashishnair?source=post_page-----aaf630c35fe3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----aaf630c35fe3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----aaf630c35fe3--------------------------------)
    [Aashish Nair](https://medium.com/@aashishnair?source=post_page-----aaf630c35fe3--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----aaf630c35fe3--------------------------------)
    ·7 min read·Aug 26, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/88282bab14f50541e0bba68c4d0cf0bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Photo by Tima Miroshnichenko: [https://www.pexels.com/photo/a-person-writing-on-a-notebook-5336909/](https://www.pexels.com/photo/a-person-writing-on-a-notebook-5336909/)'
  prefs: []
  type: TYPE_NORMAL
- en: Table of Contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ∘ [Introduction](#cb4a)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [The Logging Module](#3486)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [The Levels of Logging](#21ff)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Configuring Levels](#5e80)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Configuring Levels for Debugging](#0153)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Creating Log Files](#a8c5)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Formatting Log Messages](#9e39)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Key Takeaways](#968a)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Consider the following scenario: You’ve written a piece of code that either
    returns an error or yields an unexpected value.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To find the erroneous line of code, you write a print statement…
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Then add another print statement…
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Then follow it up with another print statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you’ve identified and fixed the issue, these print statements are useless.
    So, you delete or comment out each of them one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If your troubleshooting experience resembles the scenario above, you’re already
    familiar with the frustration of using print statements to deal with erroneous
    lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, there is a tool in Python that offers a much more effective strategy
    for debugging code: the logging module.'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we delve into the basic functionalities of the logging module and explore
    the features that make it such a powerful troubleshooting tool.
  prefs: []
  type: TYPE_NORMAL
- en: The Logging Module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The logging module is designed for programmers looking to track certain events
    in their programs effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, there aren’t any prerequisites to learning to use the tool, especially
    if you’re already familiar with Python’s print statements.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of syntax, the logging module’s commands are very similar to print
    statements, allowing users to generate messages with simple one-liners.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/cfb5aa4dd8e09a88fb20087738a2030d.png)'
  prefs: []
  type: TYPE_IMG
- en: Code Output (Created by Author)
  prefs: []
  type: TYPE_NORMAL
- en: That being said, logging includes features that are not provided by regular
    print statements, which we will now cover.
  prefs: []
  type: TYPE_NORMAL
- en: The Levels of Logging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the logging module, all messages are *not* equal. Events in the logging module
    are broken down into different levels of importance.
  prefs: []
  type: TYPE_NORMAL
- en: The logging module’s [documentation](https://docs.python.org/3/library/logging.html)
    lists the 5 levels of logging and explains when they should be used.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0465e1d48a4b88bd3e482395b22fbe69.png)'
  prefs: []
  type: TYPE_IMG
- en: Levels of Logging (Created by Author)
  prefs: []
  type: TYPE_NORMAL
- en: In other words, when users use logging to write messages, they also get to set
    the importance of said message. An INFO message is best for monitoring the status
    of an event, a WARNING message is best for issuing a warning, and an ERROR message
    is best for reporting an error.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, users can assign importance to their messages by using levels depending
    on their purpose. For example, when loading a dataset, one can write messages
    with INFO and ERROR levels.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: With different levels of importance assigned to messages, users can *define*
    the threshold for the importance of messages that they want to or do not want
    to see.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the logging module only considers logs that are at the level WARNING
    or above.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/08354bb0fac575276cfb8b2163a96dd7.png)'
  prefs: []
  type: TYPE_IMG
- en: Levels of Logging (Created by Author)
  prefs: []
  type: TYPE_NORMAL
- en: This means that logging a message without additional configuration does not
    return messages at the DEBUG and INFO levels.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/24c3353aee9ff74e3c7fa500650c135e.png)'
  prefs: []
  type: TYPE_IMG
- en: Code Output (Created by Author)
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the output, only the messages at levels WARNING, ERROR, and CRITICAL
    are actually generated.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Levels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike print statements, logging allows users to configure the importance levels
    of messages that should be generaed.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, suppose that we need to record messages at levels INFO and above.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ee69937bacb51685334abe11c844f4e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Levels of Logging (Created by Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'We can instruct the program to generate INFO level messages by using the `basicConfig`
    method and defining the `level` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: Now, all messages at levels INFO and above will be shown.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b2bc07db37eb40e5967110a343b9922e.png)'
  prefs: []
  type: TYPE_IMG
- en: Code Output (Created by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Since the program has been configured to accept logs at INFO and above, all
    logs that are not at the DEBUG level are recorded.
  prefs: []
  type: TYPE_NORMAL
- en: '**Configuring Levels for Debugging**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Through the `basicConfig` method, users can shift the threshold for logging
    levels to include the desired levels while omitting the undesired levels.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, let’s suppose that we are performing transformations on a variable
    and wish to find the value of the variable after each transformation. Here, we
    perform mathematical operations on variable x:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The threshold logging level has been set to DEBUG, which means that all of
    the logging messages will be created. Running the code will return the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ead65573e741b39b7b40ad6c5d81b5ba.png)'
  prefs: []
  type: TYPE_IMG
- en: Code Output (Created by Author)
  prefs: []
  type: TYPE_NORMAL
- en: These messages can be helpful, but once the debugging is complete, they provide
    no value. So, how do we stop these messages from being generated in future iterations?
  prefs: []
  type: TYPE_NORMAL
- en: If we were working with print statements, the solution would be to delete or
    comment out each and every unwanted print statement. Thankfully, with logging,
    the unwanted debug messages can be removed by simply modifying the logging level
    threshold using the `basicConfig` method.
  prefs: []
  type: TYPE_NORMAL
- en: We can now change the logging level to INFO, thereby omitting all log messages
    with the DEBUG level importance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8423850df155d0c9d7b699a22598cc87.png)'
  prefs: []
  type: TYPE_IMG
- en: Code Output (Created by Author)
  prefs: []
  type: TYPE_NORMAL
- en: This time, even though the logging commands are still in place, they are omitted
    as the DEBUG level is lower than the assigned INFO level threshold.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, when we wish to start the debugging process, we can use logging
    to do the opposite: lower the threshold importance level for log messages so that
    the program generates messages with lower importance levels.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating Log Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using print statements, messages are shown on a command line or console
    but are not stored in any location.
  prefs: []
  type: TYPE_NORMAL
- en: Using the logging module’s `basicConfig` method, users can create a file dedicated
    to recording all messages created with the module.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, the following snippet uses the `basicConfig` method to save all
    messages in a newly created file named “demo.log”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, no messages will show up in the console when the script is run. Instead,
    the messages will be stored directly in the “demo.log” file.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c99c75915c4ac7911131a7d9bd887a14.png)'
  prefs: []
  type: TYPE_IMG
- en: demo.log (Created by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, these recorded messages are not overwritten; they remain in the
    “demo.log” file when additional logs are added. If we run the same script again,
    the new log messages will be added in new lines.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/047e5706bfa4ac5f610eb7561c402344.png)'
  prefs: []
  type: TYPE_IMG
- en: demo.log (Created by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Formatting Log Messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The messages in logs are not always that informative and readable.
  prefs: []
  type: TYPE_NORMAL
- en: To generate messages more fitting for the given use case, users can configure
    the format of their messages with the `basicConfig` method.
  prefs: []
  type: TYPE_NORMAL
- en: In the snippet below, we configure the messages to be composed of the timestamp,
    the logging level, and the message.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bd4a19bd578a493db50bcec4894254b5.png)'
  prefs: []
  type: TYPE_IMG
- en: Code Output (Created by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Establishing the format of your logs can make the generated messages both informative
    and readable. Of course, the ideal format depends on the programmers’ personal
    preference.
  prefs: []
  type: TYPE_NORMAL
- en: Key Takeaways
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/9916e1f7b6d3302c5e191eea149e4b56.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Prateek Katyal](https://unsplash.com/@prateekkatyal?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Overall, while print statements tend to be treated as the go-to tool for examining
    or troubleshooting code, the logging module is a more fitting tool for such purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Logging offers a system that categorizes messages into different levels of importance.
    Moreover, they boast features that enable users to easily configure what messages
    to generate, how they should be formatted, and where they should be stored.
  prefs: []
  type: TYPE_NORMAL
- en: The logging module has the capacity to make the debugging experience quicker
    and stress-free, so consider adopting it if you are tired of using plain, generic
    print statements.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading!
  prefs: []
  type: TYPE_NORMAL
