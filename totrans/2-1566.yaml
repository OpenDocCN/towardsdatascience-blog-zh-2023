- en: Natural Audio Data Augmentation Using Spotify’s Pedalboard
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spotify的Pedalboard进行自然音频数据增强
- en: 原文：[https://towardsdatascience.com/natural-audio-data-augmentation-using-spotifys-pedalboard-212ea59d39ce](https://towardsdatascience.com/natural-audio-data-augmentation-using-spotifys-pedalboard-212ea59d39ce)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/natural-audio-data-augmentation-using-spotifys-pedalboard-212ea59d39ce](https://towardsdatascience.com/natural-audio-data-augmentation-using-spotifys-pedalboard-212ea59d39ce)
- en: With ready-to-use Python code & presets
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包含现成的Python代码和预设
- en: '[](https://medium.com/@maxhilsdorf?source=post_page-----212ea59d39ce--------------------------------)[![Max
    Hilsdorf](../Images/01da76c553e43d5ed6b6849bdbfd00da.png)](https://medium.com/@maxhilsdorf?source=post_page-----212ea59d39ce--------------------------------)[](https://towardsdatascience.com/?source=post_page-----212ea59d39ce--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----212ea59d39ce--------------------------------)
    [Max Hilsdorf](https://medium.com/@maxhilsdorf?source=post_page-----212ea59d39ce--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@maxhilsdorf?source=post_page-----212ea59d39ce--------------------------------)[![Max
    Hilsdorf](../Images/01da76c553e43d5ed6b6849bdbfd00da.png)](https://medium.com/@maxhilsdorf?source=post_page-----212ea59d39ce--------------------------------)[](https://towardsdatascience.com/?source=post_page-----212ea59d39ce--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----212ea59d39ce--------------------------------)
    [Max Hilsdorf](https://medium.com/@maxhilsdorf?source=post_page-----212ea59d39ce--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----212ea59d39ce--------------------------------)
    ·10 min read·Jan 9, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----212ea59d39ce--------------------------------)
    ·10分钟阅读·2023年1月9日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/66165831ed554a6df7e20476f30856b8.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/66165831ed554a6df7e20476f30856b8.png)'
- en: Image adapted from [**戸山 神奈**](https://unsplash.com/de/fotos/Qi32ATTSwp4)**.**
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片改编自[**户山 神奈**](https://unsplash.com/de/fotos/Qi32ATTSwp4)**.**
- en: As a data scientist, working with audio data is often quite a struggle. One
    common problem is the **lack of data** to build effective models for tasks like
    voice recognition, music recommendation, and speech-to-text. Often, **audio data
    is sensitive**, portraying a human voice or copyright-protected music. Finally,
    audio data is high-dimensional and usually requires **huge computational resources**,
    compared to other data types. Hence, it is crucial to make the best of the data
    you have. Audio data augmentation is a great method to achieve that!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据科学家，处理音频数据常常是一项艰巨的任务。一个常见的问题是**数据缺乏**，这会影响构建有效模型（如语音识别、音乐推荐和语音转文本）的能力。通常，**音频数据是敏感的**，可能包含人声或受版权保护的音乐。最后，相比其他数据类型，音频数据是高维的，通常需要**巨大的计算资源**。因此，充分利用现有数据至关重要。音频数据增强是一种很好的方法来实现这一目标！
- en: 'In this article, we will cover the following topics:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将讨论以下主题：
- en: '**Fundamentals of (Audio) Data Augmentation**'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**（音频）数据增强基础**'
- en: '**Introduction to Spotify Pedalboard**'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Spotify Pedalboard简介**'
- en: '**Best Practices for Audio Data Augmentation**'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**音频数据增强的最佳实践**'
- en: '**Advanced Uses With Ready-to-Use Code & Presets**'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**利用现成代码和预设的高级用法**'
- en: Data Augmentation
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据增强
- en: Data Augmentation is the process of slightly modifying some or all examples
    in a dataset to increase the total amount of training data. If done right, augmenting
    a dataset can effectively **prevent overfitting**. This means that your machine
    learning models will likely produce more **generalizable results** even with a
    rather small amount of data. Data augmentation is generally applied solely to
    the training data because the validation and test metrics would be invalid if
    augmentations were mixed in.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 数据增强是通过轻微修改数据集中部分或所有示例来增加训练数据总量的过程。如果做得正确，增强数据集可以有效地**防止过拟合**。这意味着，即使数据量相对较小，你的机器学习模型也很可能会产生更具**普遍适用性的结果**。数据增强通常仅应用于训练数据，因为如果将增强混入验证和测试数据中，度量指标将变得无效。
- en: 'The most important thing to consider is that an augmented example must still
    be similar enough to the original example to be considered *“of the same class”*.
    This is what we call a **natural** or **in-distribution** augmentation. Here is
    an example from image recognition, where data augmentation is widely applied:
    If you rotate and shift the image of a cat, you can generate a variety of modified
    images that are technically “different” images but still clearly cats.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，增强示例必须仍然足够类似于原始示例，以便被视为*“同一类别”*。这就是我们所说的**自然**或**分布内**增强。以下是图像识别中的一个示例，数据增强被广泛应用：如果你旋转和平移猫的图像，你可以生成各种经过修改的图像，这些图像在技术上是“不同”的，但仍然明显是猫。
- en: '![](../Images/bbe4e9f8c7c42e2e577986d15a3e75c5.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bbe4e9f8c7c42e2e577986d15a3e75c5.png)'
- en: Shifting and rotating an image of a cat for Data Augmentation Inspired by an
    [introductory article by Suki Lau](/image-augmentation-for-deep-learning-histogram-equalization-a71387f609b2).
    Cat image by [Alexander London](https://unsplash.com/de/@alxndr_london).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为数据增强而对猫的图像进行平移和旋转，这一灵感来源于[Suki Lau的介绍文章](/image-augmentation-for-deep-learning-histogram-equalization-a71387f609b2)。猫的图像由[Alexander
    London](https://unsplash.com/de/@alxndr_london)提供。
- en: If your augmented example looks somewhat like an example the model might encounter
    “in the real world” when it is deployed, you are good to go.
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你的增强示例看起来在模型部署时可能会遇到“现实世界”的示例，那就可以了。
- en: This rule of thumb is useful, but what does this mean for audio data?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这一经验法则很有用，但这对音频数据意味着什么呢？
- en: Audio Data Augmentation
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 音频数据增强
- en: 'I have a good message for you: in machine learning, audio data is often represented
    as an image, e.g. as a spectrogram. How different can it be from the cat example,
    then? Well, here is also a bad message: Neither shifting nor rotating these images
    is of any use. Just look at the image below:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我有个好消息要告诉你：在机器学习中，音频数据通常表现为图像，例如谱图。那么它与猫的例子有多大不同呢？嗯，这里也有一个坏消息：平移或旋转这些图像都没有用。只需看看下面的图像：
- en: '![](../Images/e1446c31b26e934e466c8536b4902453.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e1446c31b26e934e466c8536b4902453.png)'
- en: Rotation and shifting applied to a spectrogram. Image by the author.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 应用在谱图上的旋转和平移。图像由作者提供。
- en: You do not need any expertise in signal processing to tell that the shifted
    and rotated spectrogram is **NOT a natural augmentation**. Your model with never
    see a shifted/rotated spectrogram in “real life” so you should not train it with
    those.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要任何信号处理方面的专业知识就能看出，平移和旋转后的谱图**不是自然增强**。你的模型在“现实生活”中永远不会看到平移/旋转的谱图，因此你不应使用这些进行训练。
- en: 'There are three types of audio data augmentation that are somewhat widely adopted:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种音频数据增强方法被广泛采用：
- en: After transforming audio to an image representation, use **masking** to “hide”
    some parts of the image from the model.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将音频转换为图像表示后，使用**遮罩**来“隐藏”图像中的某些部分。
- en: If your audio files are longer than what you want to use as model input, you
    could draw **multiple snippets** from a single audio file.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的音频文件比你想用作模型输入的长度要长，你可以从单个音频文件中提取**多个片段**。
- en: Apply signal modifications like **audio effects** to your examples to alter
    them slightly.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对你的示例应用信号修改，如**音频效果**，以稍微改变它们。
- en: Out of these three, I consider **the third option to be best** at reliably producing
    natural augmentations for all kinds of audio data. However, it requires lots of
    effort and careful thought to do it right. That is why I made this the topic of
    this article.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这三种方法中，我认为**第三种选项最好**，它能够可靠地产生所有类型音频数据的自然增强。然而，它需要大量的努力和细致的思考才能正确完成。这就是为什么我把它作为本文的主题。
- en: Whether it is speech or music, sound files can typically be edited with audio
    effects like compressors, equalizers, or reverbs. In fact, this is the bread and
    butter of any sound engineer. The great thing is that these effects are so inherent
    to the data we are working with that they are **especially viable for data augmentation**.
    If I increase the overall reverb on a rock song, it is still a rock song, but
    the resulting spectrogram may look noticeably different.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是语音还是音乐，声音文件通常可以用音频效果如压缩器、均衡器或混响来编辑。实际上，这些是任何声音工程师的“基本功”。好消息是，这些效果在我们处理的数据中非常固有，因此**特别适合数据增强**。如果我增加了摇滚歌曲的整体混响，它仍然是一首摇滚歌曲，但生成的谱图可能看起来明显不同。
- en: '**Pedalboard**'
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**踏板板**'
- en: '![](../Images/a341d460ac2c0639fa68841ca29af36b.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a341d460ac2c0639fa68841ca29af36b.png)'
- en: A guitar pedal board. Image by [Frankie Lopez](https://unsplash.com/de/fotos/NEmRMr0e2TQ).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 吉他踏板板。图像由[Frankie Lopez](https://unsplash.com/de/fotos/NEmRMr0e2TQ)提供。
- en: Pedalboard was released relatively recently in September 2021 with an [introductory
    article](https://engineering.atspotify.com/2021/09/07/introducing-pedalboard-spotifys-audio-effects-library-for-python/)
    and a [github repository](https://github.com/spotify/pedalboard). The term “pedalboard”
    comes from electrical guitarists, who tend to use multiple guitar effects like
    distortion or reverb in the form of foot pedals, usually chained together to a
    pedalboard. While pedalboard was clearly built for musical applications, it is
    also great for speech augmentation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Pedalboard 于 2021 年 9 月相对较新发布，附有 [介绍文章](https://engineering.atspotify.com/2021/09/07/introducing-pedalboard-spotifys-audio-effects-library-for-python/)
    和 [github 仓库](https://github.com/spotify/pedalboard)。术语 “pedalboard” 源于电吉他手，他们通常使用多个吉他效果器，比如失真或混响，通常以脚踏板的形式连接到效果板上。尽管
    pedalboard 显然是为音乐应用而构建的，但它也非常适合语音增强。
- en: Install
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: You can simply run this in your terminal to install pedalboard.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在终端中运行以下命令来安装 pedalboard。
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To work with Pedalboard’s effects, you need to load an audio file into Python
    as an array representation of its waveform. “librosa” and “soundfile” are especially
    useful for this.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Pedalboard 的效果，你需要将音频文件加载到 Python 中，作为其波形的数组表示形式。“librosa”和“soundfile” 在这方面尤其有用。
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In order for librosa to work properly, you will also need to download and install
    [**FFmpeg**](https://www.ffmpeg.org/download.html)and [add it to your PATH environment
    variables](https://www.java.com/en/download/help/path.html)**.**
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使 librosa 正常工作，你还需要下载并安装 [**FFmpeg**](https://www.ffmpeg.org/download.html)
    并 [将其添加到你的 PATH 环境变量](https://www.java.com/en/download/help/path.html)** 中**。
- en: Load Audio
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载音频
- en: 'To load an audio file, just use:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载音频文件，只需使用：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '“librosa.load” returns the waveform array and the audio sample rate. We are
    going to use the following short music example throughout this article to demonstrate
    the capabilities of pedalboard:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: “librosa.load” 返回波形数组和音频采样率。我们将使用以下短音乐示例贯穿本文，以演示 pedalboard 的功能：
- en: This is a snippet from a short funky instrumental that I produced a good while
    ago. You can download the audio file directly from [SoundCloud](https://soundcloud.com/user-726858933/spotify_pedalboard_base_example)
    if you want to follow along.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在不久前制作的一段短小的放克风格的器乐片段。如果你想跟随操作，可以直接从 [SoundCloud](https://soundcloud.com/user-726858933/spotify_pedalboard_base_example)
    下载音频文件。
- en: Apply a Single Pedal
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用单个效果踏板
- en: First, we import “Pedalboard” and “Reverb” from the pedalboard library. Even
    if we just want to apply one effect, we need to instantiate a “Pedalboard” first
    and then append our effect to it. As an effect, we will be using a reverb effect
    with the default pedalboard settings.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从 pedalboard 库中导入 “Pedalboard” 和 “Reverb”。即使我们只想应用一个效果，也需要首先实例化一个 “Pedalboard”，然后将我们的效果添加到其中。作为效果，我们将使用具有默认
    pedalboard 设置的混响效果。
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There are many ways to export audio waveforms to .mp3 or .wav files. Here is
    one common way:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以将音频波形导出为 .mp3 或 .wav 文件。这里是一种常见的方法：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is what our example sounds like after applying the standard reverb:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用标准混响效果后的示例声音：
- en: It is easy to hear that, although the reverb is already quite strong, we have
    kept the relevant musical parameters and the overall expression of the track intact.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易听出，尽管混响效果已经相当强烈，但我们保留了相关的音乐参数和整体的曲目表现。
- en: 'What if we want a different kind of reverb? Pedalboard allows us to use custom
    parameters for each effect pedal. For instance, this is how you can create a reverb
    that is more dominant than the one we used before:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要不同类型的混响效果怎么办？Pedalboard 允许我们为每个效果踏板使用自定义参数。例如，这里是如何创建一个比之前使用的混响效果更为突出的效果：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you listen to the example below, you will notice that the reverb effect is
    so dominant that it overshadows the underlying music. This is an example of an
    unnatural augmentation, at least for most use cases.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你听下面的示例，你会发现混响效果非常突出，以至于掩盖了基础音乐。这是一个不自然增强的例子，至少对于大多数使用情况来说是这样。
- en: Apply Multiple Pedals
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用多个效果踏板
- en: There are many more effects we could use and combine into an effect chain. A
    **PitchShift** moves the whole audio to a higher or lower pitch, for instance,
    two semitones up. A **Compressor** pushes the louder parts of a signal down so
    that the sound is less dynamic and more intense. On top of that, let us add a
    reverb with custom parameters, again.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用更多效果并将它们组合成一个效果链。例如，**PitchShift** 会将整个音频的音高提高或降低，比如提升两个半音。**Compressor**
    会将信号中较响的部分降低，从而使声音的动态范围减少，更加紧凑。除此之外，我们还可以再次添加具有自定义参数的混响效果。
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is what the resulting audio sounds like:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果音频的声音示例：
- en: Have we already gone too far with the effects? That is, of course, to be discussed
    in the context of the machine learning task. If I want to detect the key of a
    song, we should obviously not shift the pitch if we want to keep the same pitch
    label for the track. If, however, we try to detect the genre of a track, it is
    still clearly recognizable as a — badly produced — funk track.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是否已经对效果处理过度了？当然，这需要在机器学习任务的背景下讨论。如果我想检测歌曲的调性，显然我们不应该改变音高，以保持相同的音高标签。如果我们尝试检测一首曲目的风格，它仍然可以明显被识别为——制作不佳的——放克曲目。
- en: Problems and Best Practices
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题和最佳实践
- en: '![](../Images/f110f15816f8b01db31b4e4bcabf0c01.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f110f15816f8b01db31b4e4bcabf0c01.png)'
- en: Image adapted from [Olia Danilevich](https://www.pexels.com/de-de/@olia-danilevich/).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图片改编自 [Olia Danilevich](https://www.pexels.com/de-de/@olia-danilevich/)。
- en: At this point, it should be clear to see that pedalboard is great for natural
    audio data augmentation. However, in a real-world use case, there are a few more
    things to consider.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，应该可以清楚地看到，踏板板非常适合自然音频数据增强。然而，在实际使用案例中，还有一些额外的事项需要考虑。
- en: “Good” Presets
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “好”的预设
- en: If we want to keep our augmentations natural, we need to find a preset (or multiple
    presets) that allows us to **reliably create natural augmentations** for all examples
    in our dataset. For example, adding more distortion to a heavy metal track may
    be a viable option, but is a classical music piece with distorted violins really
    natural?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想保持增强效果自然，我们需要找到一个（或多个）预设，能够**可靠地创建自然的增强效果**，适用于我们数据集中的所有示例。例如，为重金属曲目添加更多失真可能是一个可行的选择，但将古典音乐中的小提琴失真处理真的自然吗？
- en: '**Augmentation Variety**'
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**增强多样性**'
- en: 'Of course, we can use the same effect chain for all the examples we want to
    augment. However, introducing some randomness into the effect chain for each example
    has two big advantages:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以对所有我们想增强的示例使用相同的效果链。然而，对每个示例在效果链中引入一些随机性有两个显著的优点：
- en: You can create multiple augmentations of the same example and they will be different.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以创建相同示例的多个增强效果，它们会有所不同。
- en: The model learns to deal with a more diverse range of effects, which can increase
    its robustness.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模型学习处理更多样化的效果，这可以提高其鲁棒性。
- en: Using random effect chains while maintaining naturalness in the augmentations
    is the **key challenge** here.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在保持增强自然性的同时使用随机效果链是这里的**关键挑战**。
- en: '**Speed**'
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**速度**'
- en: If we want to process thousands of audio examples, we need to think about an
    efficient implementation. Surely, we could augment each file and store the augmented
    examples as audio files. However, are we really interested in keeping our augmentations
    stored somewhere? If not, we could compute the augmentations within our data processing
    script or pipeline. For instance, if we want to compute mel spectrograms for each
    audio example, we could
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想处理成千上万的音频示例，我们需要考虑一个高效的实现方式。我们当然可以增强每个文件并将增强后的示例存储为音频文件。然而，我们真的有兴趣将增强效果存储在某个地方吗？如果没有，我们可以在数据处理脚本或管道中计算增强效果。例如，如果我们想计算每个音频示例的梅尔谱图，我们可以
- en: Load the audio into a numpy array.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将音频加载到 numpy 数组中。
- en: Roll a random pedalboard and apply it to the array.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随机生成一个踏板板并将其应用于数组。
- en: Compute mel spectrograms for both, the original audio and the augmented example.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算原始音频和增强示例的梅尔谱图。
- en: Store both mel spectrograms in the training dataset.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个梅尔谱图都存储在训练数据集中。
- en: This way, **no time is wasted** on exporting and loading audio files that we
    will never use again.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，**不会浪费时间**在导出和加载我们不会再使用的音频文件上。
- en: '**Pedalboard Augmentation GitHub Repository**'
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**踏板板增强 GitHub 仓库**'
- en: '![](../Images/8311940d5036f2487186e16ad333f4e1.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8311940d5036f2487186e16ad333f4e1.png)'
- en: Screenshot by Author.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 截图由作者提供。
- en: To help you get started with audio augmentation, I wrote some code and published
    it in [this github repository](https://github.com/MaxHilsdorf/pedalboard_audio_augmentation).
    The repository includes
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助你开始进行音频增强，我写了一些代码并将其发布在[这个 GitHub 仓库](https://github.com/MaxHilsdorf/pedalboard_audio_augmentation)中。该仓库包括
- en: an audio augmentation module that implements **random, natural effect chains**.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个实现**随机、自然效果链**的音频增强模块。
- en: example scripts for applying these random, natural augmentations to individual
    files or as part of a mel spectrogram feature extraction pipeline
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例脚本用于将这些随机、自然的增强应用于单个文件或作为梅尔谱图特征提取管道的一部分
- en: some example audio files from the GTZAN dataset which you can use to play around
    with augmentations.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 GTZAN 数据集中获得了一些示例音频文件，你可以用来玩弄增强效果。
- en: While I cannot cover the details of the code in this post, I still want to show
    you how it can be used to apply a random effect chain to a single audio file.
    For further guidance, check out the “README.md” file in the repository.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我无法在这篇文章中详细讲解代码，但我仍然想展示如何将随机效果链应用于单个音频文件。有关进一步的指导，请查看仓库中的“README.md”文件。
- en: '**Building a Random Effect Chain**'
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**构建随机效果链**'
- en: First, we add the path to the audio augmentation module (“code/audio_augmentation.py”
    in the repo) to our sys.path and import the relevant functionalities.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将音频增强模块（库中的“code/audio_augmentation.py”）的路径添加到 sys.path 中，并导入相关功能。
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Next, we define an effect chain by specifying the effects we want to use in
    the correct order. Also, we assign a probability value to each pedal that states
    how likely the pedal is to be activated for each pedalboard roll. If you want
    all of your pedals to be applied every time, set all probabilities to 1.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们通过指定正确顺序中希望使用的效果来定义效果链。此外，我们为每个踏板分配一个概率值，表示每次踏板板滚动时该踏板被激活的可能性。如果你希望每次都应用所有踏板，请将所有概率设置为
    1。
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Next, we define a fallback effect chain. This one is needed in case none of
    the pedals pass the random roll, i.e. no effect is selected. In this case, the
    module will use this fallback effect chain as a default.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义一个备用效果链。这在没有踏板通过随机滚动的情况下需要，即没有效果被选择。在这种情况下，模块将使用这个备用效果链作为默认设置。
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Rolling the Pedalboard
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滚动踏板板
- en: 'To “roll” our pedalboard, we can use this code which applied the “roll_pedal”
    function from the augmentation module:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要“滚动”我们的踏板板，我们可以使用这段代码，它调用了增强模块中的“roll_pedal”函数：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that the “pedal_dict” was imported from the augmentation module. It holds
    information on the parameter ranges and applies a random setting to each pedal.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，“pedal_dict”是从增强模块导入的。它保存了参数范围的信息，并为每个踏板应用了随机设置。
- en: Applying the Random Pedalboard
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用随机踏板板
- en: Now, finally, we can load our audio file and apply the random pedalboard to
    it using the “process_track” function from the augmentation module.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，最后，我们可以加载我们的音频文件，并使用增强模块中的“process_track”函数将随机踏板板应用于它。
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Let us listen to what this code would do with our example track!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们听听这段代码会对我们的示例音轨做什么！
- en: This one has a slight chorus effect as well as some minor distortion applied
    to it. It sounds noticeably different from the original one but is still very
    close to it. While we are at it, let us try another random augmentation roll!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个效果有轻微的合唱效果以及一些轻微的失真。它听起来明显不同于原始版本，但仍然非常接近。在此期间，让我们再尝试另一种随机增强滚动！
- en: Here, we have a compressor, a low-pass filter, a high-pass filter, and a pitch
    shift applied to the signal. This time, the difference is much more noticeable.
    Yet, the naturalness of the track is maintained.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们对信号应用了压缩器、低通滤波器、高通滤波器和音高移位。这次差异更为明显。然而，音轨的自然性仍然得到保持。
- en: Conclusion
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this post, we
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们
- en: learned what data augmentation is and why it is used.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习了数据增强是什么以及为何使用它。
- en: discussed why natural augmentation is so important.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论了自然增强为何如此重要。
- en: saw that audio data augmentation is different from augmenting other data types.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看到音频数据增强与其他数据类型的增强有所不同。
- en: got hands-on experience applying the pedalboard library to audio signals.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获得了将踏板板库应用于音频信号的实际经验。
- en: outlined best practices for audio data augmentations.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 概述了音频数据增强的最佳实践。
- en: had a first look at a prebuilt pedalboard-based audio augmentation module.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初步了解了一个基于踏板板的音频增强模块。
- en: '**I hope you learned something new and found this post useful!**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**希望你学到了一些新知识，并觉得这篇文章有用！**'
- en: If you are interested in other forms of audio data augmentation, check out [this
    article](/music-genre-classification-using-a-divide-conquer-crnn-2ff1cf49859f)
    I wrote on music genre classification using a “divide & conquer” method.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对其他形式的音频数据增强感兴趣，可以查看我写的 [这篇文章](/music-genre-classification-using-a-divide-conquer-crnn-2ff1cf49859f)，讲述了如何使用“分而治之”方法进行音乐类型分类。
