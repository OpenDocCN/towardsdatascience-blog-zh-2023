["```py\nimport geopandas as gpd # version: 0.9.0\n\ngdf_iucn = gpd.read_file('MAMMALS_TERRESTRIAL_ONLY')\nprint('Number of records: ', len(gdf_iucn))\nprint('Number of attributes: ', len(gdf_iucn.keys()))\ngdf_iucn.head(3)\n```", "```py\nprint(len(set(gdf_iucn.id_no)))\nprint(len(set(gdf_iucn.sci_name)))\n```", "```py\nfrom collections import Counter\n\nfor a in ['kingdom', 'phylum', 'class', 'order_', 'family', 'genus']:    \n    print(a, Counter(gdf_iucn[[a, 'sci_name']].drop_duplicates()[a].to_list()).most_common(3), len(set(gdf_iucn[a])))\n```", "```py\ngdf_iucn[gdf_iucn.genus=='Canis'].head(5)\n```", "```py\ngdf_iucn[['presence', 'origin', 'seasonal', 'legend']].head(5)\n```", "```py\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\ndef get_distribution(x):\n    return list(zip(*[(k, v) for k, v in Counter(x.to_list()).most_common()]))\n\nf, ax = plt.subplots(1,3,figsize = (15,4))\n\nfor idx, feat in enumerate(['presence', 'origin', 'seasonal']):    \n    values, frequencies = get_distribution(gdf_iucn[feat])\n    ax[idx].bar(values, frequencies)\n    ax[idx].set_yscale('log')\n    ax[idx].set_title(feat) \n```", "```py\nf, ax = plt.subplots(1,1,figsize = (15,5))\n\nvalues, frequencies = get_distribution(gdf_iucn['legend'])\nax.bar(values, frequencies)\nax.set_title('Frequency of habitat-characteristics', fontsize = 20)\nax.set_yscale('log')\nax.set_xticks(range(len(values)))\nax.set_xticklabels(values, rotation = 60, ha = 'right')\nplt.show()\n```", "```py\nCounter(gdf_iucn.compiler).most_common(5)\n```", "```py\nCounter(gdf_iucn.source).most_common(5)\n```", "```py\nCounter(gdf_iucn.citation).most_common(5)\n```", "```py\nmin(gdf_iucn.yrcompiled), max(gdf_iucn.yrcompiled)\n```", "```py\nf, ax = plt.subplots(1,1,figsize = (15,5))\n\nax.set_title('The number of records per year', fontsize = 20)\nvalues, frequencies = get_distribution(gdf_iucn['yrcompiled'])\nax.bar(values, frequencies)\n```", "```py\ncategory_d = {  'EX' : 'Extinct',\n                'EW' : 'Extinct in The Wild',\n                'RE' : 'Regionally Extinct',\n                'CR' : 'Critically Endangered',\n                'EN' : 'Endangered',\n                'VU' : 'Vulnerable', \n                'DD' : 'Data Deficient',\n                'LC' : 'Least Concern',\n                'NT' : 'Not Threatened'\n     }\n\ngdf_iucn['category'] = gdf_iucn['category'].map(category_d)\n\nCounter(gdf_iucn[['sci_name', 'category']].drop_duplicates().category).most_common()\n```", "```py\nsorted(set(gdf_iucn[gdf_iucn.category.isin(['Extinct', 'Extinct in The Wild'])].sci_name.to_list()))\n```", "```py\ndef get_color(x):\n    if x in ['Critically Endangered', 'Endangered', 'Vulnerable']:\n        return 'red'\n    elif x in ['Extinct in The Wild', 'Regionally Extinct', 'Extinct']:\n        return 'k'\n    else:\n        return 'green'\n\nf, ax = plt.subplots(1,2,figsize = (12,6))\n\nax[0].set_title(70 * ' ' + 'The number of species category', fontsize = 20, pad = 30)\nvalues, frequencies = get_distribution(gdf_iucn[['sci_name', 'category']].drop_duplicates().category)\ncolors = [get_color(v) for v in values]\n\nfor idx in range(2):\n    ax[idx].bar(values, frequencies, color = colors)\n    ax[idx].set_xticks(range(len(values)))\n    ax[idx].set_xticklabels(values, rotation = 60, ha = 'right')\nax[1].set_yscale('log')\n\nplt.tight_layout()\n```", "```py\n# lets sum up the area of each patch a species may have\ngdf_iucn.groupby(by = 'sci_name').sum().sort_values(by = 'SHAPE_Area').head(10)\n```", "```py\ngdf_iucn.groupby(by = 'sci_name').sum().sort_values(by = 'SHAPE_Area').head(10).index.to_list()\n```", "```py\ngdf_iucn.groupby(by = 'sci_name').sum().sort_values(by = 'SHAPE_Area', ascending = False).head(10).index.to_list()\n```", "```py\n# transform the coordinate reference system\ngdf_iucn_t = gdf_iucn.copy()\ngdf_iucn_t = gdf_iucn_t.to_crs('+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs')\n```", "```py\nf, ax = plt.subplots(1,1,figsize=(15,10))\ngdf_iucn_t.sample(200).plot(ax=ax, edgecolor = 'k', linewidth = 0.5, alpha = 0.5, cmap = 'tab20')\n```", "```py\nimport contextily as ctx\nf, ax = plt.subplots(1,1,figsize=(15,10))\ngdf_iucn_t.plot(ax=ax, edgecolor = 'k', linewidth = 0.5, alpha = 0.15, cmap = 'tab20')\nctx.add_basemap(ax, alpha = 0.8, crs = gdf_iucn_t.crs, url = ctx.providers.Esri.WorldPhysical)\nax.axis('off')\nax.set_ylim([-9.5*10**6, 9.5*10**6])\n```", "```py\nf, ax = plt.subplots(1,1,figsize=(15,10))\ngdf_iucn_t.plot(ax=ax, edgecolor = 'k', linewidth = 0.5, alpha = 0.15, cmap = 'tab20')\nctx.add_basemap(ax, alpha = 0.8, crs = gdf_iucn_t.crs, url = ctx.providers.Esri.WorldGrayCanvas)\nax.axis('off')\nax.set_ylim([-9.5*10**6, 9.5*10**6])\n#plt.savefig('worldmap_habitats_WorldGrayCanvas.png', dpi = 600, bbox_inches = 'tight')\n```", "```py\ngdf_iucn[gdf_iucn.genus.str.contains('Giraffa')].head(5)\n```", "```py\nf, ax = plt.subplots(1,1,figsize=(15,10))\ngdf_iucn[gdf_iucn.sci_name=='Giraffa camelopardalis'].plot(ax=ax, edgecolor = 'k', linewidth = 0.5, alpha = 0.9, color = '#DAA520')\n\nax.set_xlim([-5, 55])\nax.set_ylim([-38, 15])\nax.set_title('The habitat patches of Giraffa camelopardalis (Giraffes)', fontsize = 18, y = 1.03)\n\nctx.add_basemap(ax, alpha = 0.8, crs = gdf_iucn.crs, url = ctx.providers.Esri.WorldPhysical)\nplt.savefig('1_giraffe.png', dpi = 200)\n```", "```py\nworld = gpd.read_file('ne_10m_admin_0_countries')\nprint(len(set(world.ADMIN)))\nworld.plot()\n```", "```py\ndef is_endangered(x):\n    if x in ['Critically Endangered', 'Endangered', 'Vulnerable']:\n        return True\n    else:\n        return False\n\ngdf_iucn['endangered_species'] = gdf_iucn.category.apply(is_endangered)\nprint(Counter(gdf_iucn['endangered_species']))\n```", "```py\nnumber_of_all_species = gpd.overlay(world, gdf_iucn).groupby(by = 'ADMIN').count().to_dict()['geometry']\n\nnumber_of_end_species = gpd.overlay(world, gdf_iucn[gdf_iucn.endangered_species==True]).groupby(by = 'ADMIN').count().to_dict()['geometry']\n\nworld['number_of_all_species'] = world.ADMIN.map(number_of_all_species)\nworld['number_of_end_species'] = world.ADMIN.map(number_of_end_species)\nworld['number_of_all_species'] = world['number_of_all_species'].fillna(0)\nworld['number_of_end_species'] = world['number_of_end_species'].fillna(0)\nworld['ratio_of_end_species']  = world['number_of_end_species'] / world['number_of_all_species']\n```", "```py\nFinally, use these updated to visualize the global distributions on the level of countries:from mpl_toolkits.axes_grid1 import make_axes_locatable\nfrom matplotlib.colors import LogNorm\n\nf, ax = plt.subplots(1,1,figsize=(15,7))\n\nax.set_title('Total number of species', fontsize = 20, pad = 30)\nworld.plot(ax=ax, color = 'grey', alpha = 0.5, linewidth = 0.5, edgecolor = 'grey')\n\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"2%\", pad=-0.01)\nworld[world.number_of_all_species>0].plot(column = 'number_of_all_species',ax=ax,legend_kwds={'label': \"Total number of species\"}, edgecolor ='k',  linewidth = 1.5, cax=cax, cmap = 'Greens', legend=True,  norm=LogNorm(vmin=1, vmax=world.number_of_all_species.max())) \n```", "```py\nf, ax = plt.subplots(1,1,figsize=(15,7))\n\nax.set_title('Number of endangered species', fontsize = 20, pad = 30)\nworld.plot(ax=ax, color = 'grey', alpha = 0.5, linewidth = 0.5, edgecolor = 'grey')\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"2%\", pad=-0.01)\nworld[world.number_of_end_species>0].plot(column = 'number_of_end_species',ax=ax, legend_kwds={'label': \"Number of endangered of species\"}, edgecolor ='k', linewidth = 1.5, cax=cax, cmap = 'RdYlGn_r',  legend=True,  norm=LogNorm(vmin=1, vmax=world.number_of_end_species.max()))\n\nplt.savefig('2_map.png', dpi = 200)\n```", "```py\nf, ax = plt.subplots(1,1,figsize=(15,7))\n\nax.set_title('Ratio of endangered species', fontsize = 20, pad = 30)\nworld.plot(ax=ax, color = 'grey', alpha = 0.5, linewidth = 0.5, edgecolor = 'grey')\n\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"2%\", pad=-0.01)\nworld.plot(column = 'ratio_of_end_species',ax=ax,  legend_kwds={'label': \"Fraction of endangered of species\"}, edgecolor ='k', linewidth = 1.5, cax=cax, cmap = 'RdYlGn_r', legend=True, vmin = 0, vmax = 0.22) \n```"]