["```py\nestimator = Estimator(\n    entry_point='training.py',\n    keep_alive_period_in_seconds=600,\n    ...\n)\n```", "```py\n#pipeline.py script\n...\n# Steps 2 to 5\n\ntuner = HyperparameterTuner(\n    estimator=estimator,\n    metric_definitions=[\n        {\n          \"Name\": \"training:score\",\n          \"Regex\": \"average model training score:(.*?);\"\n        },\n        {\n          \"Name\": \"validation:score\",\n          \"Regex\": \"average model validation score:(.*?);\"\n        }\n    ],\n    objective_metric_name=\"validation:score\",\n    strategy=\"Bayesian\",\n    max_jobs=max_jobs, # M x N\n    max_parallel_jobs=max_parallel_jobs # M\n)\n\n# Step 2 - Hyperparameter tuning With cross-validation step\nstep_tune = TuningStep(\n    name=\"tuning-step\",\n    step_args=tuner.fit({\n        \"train\": \"<s3-path-to-training-folds>\",\n        \"validation\": \"<s3-path-to-validation-folds>\"\n    })\n)\n\n# Step 3 - Optimal hyperparameter retrieval step\nstep_lambda = LambdaStep(\n    name=\"get-optimal-hyperparameters-step\",\n    lambda_func=lambda_get_optimal_hyperparameters,\n    inputs={\n        \"best_training_job_name\": step_tune.properties.BestTrainingJob.TrainingJobName,\n    },\n    outputs=[\n        LambdaOutput(output_name=\"hyperparameter_a\"),\n        LambdaOutput(output_name=\"hyperparameter_b\"),\n        LambdaOutput(output_name=\"hyperparameter_c\")\n    ]\n)\n\n# Step 4 - Final training step\nstep_train = TrainingStep(\n    name=\"final-training-step\",\n    step_args=estimator.fit({\"train\": \"<s3-path-to-full-training-set>\"})\n)\n\nmodel = Model(\n    model_data=step_train.properties.ModelArtifacts.S3ModelArtifacts,\n    ...\n)\n\n# Step 5 - Model registration step\nstep_model_registration = ModelStep(\n    name=\"model-registration-step\",\n    step_args=model.register(.)\n)\n```", "```py\n#cross_validation.py script\n\nimport time\n...\n\ntraining_jobs = []\nfor fold_index in range(number_of_folds):\n\n    # Create cross-validation training jobs (one per fold)\n    job = train_model(\n        training_data=\"<training-data-s3-path>\"\n        validation_data=\"<validation-data-s3-path>\"\n        fold_index=fold_index,\n        hyperparameters={\n            \"hyperparameter_a\": \"<value-of-hyperparameter-a>\",\n            \"hyperparameter_b\": \"<value-of-hyperparameter-b>\",\n            \"hyperparameter_c\": \"<value-of-hyperparameter-c>\"\n    })\n    training_jobs.append(job)\n\n    # Add delay to prevent Rate Exceeded error. \n    time.sleep(5)\n...\n```"]