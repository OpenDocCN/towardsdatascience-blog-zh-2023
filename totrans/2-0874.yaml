- en: 'False Prophet: Feature Engineering for a Homemade Time Series Regression'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'False Prophet: 自制时间序列回归的特征工程'
- en: 原文：[https://towardsdatascience.com/false-prophet-feature-engineering-for-a-homemade-time-series-regression-part-1-of-2-52d9df3d930d](https://towardsdatascience.com/false-prophet-feature-engineering-for-a-homemade-time-series-regression-part-1-of-2-52d9df3d930d)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/false-prophet-feature-engineering-for-a-homemade-time-series-regression-part-1-of-2-52d9df3d930d](https://towardsdatascience.com/false-prophet-feature-engineering-for-a-homemade-time-series-regression-part-1-of-2-52d9df3d930d)
- en: Building on ideas from Meta’s Prophet package to create powerful features for
    time series machine learning models
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于 Meta 的 Prophet 包中的想法，创建强大的时间序列机器学习模型特征
- en: '[](https://bradley-stephen-shaw.medium.com/?source=post_page-----52d9df3d930d--------------------------------)[![Bradley
    Stephen Shaw](../Images/b3ef5e6e292083ff0f8523ec5ffe89f0.png)](https://bradley-stephen-shaw.medium.com/?source=post_page-----52d9df3d930d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----52d9df3d930d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----52d9df3d930d--------------------------------)
    [Bradley Stephen Shaw](https://bradley-stephen-shaw.medium.com/?source=post_page-----52d9df3d930d--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://bradley-stephen-shaw.medium.com/?source=post_page-----52d9df3d930d--------------------------------)[![Bradley
    Stephen Shaw](../Images/b3ef5e6e292083ff0f8523ec5ffe89f0.png)](https://bradley-stephen-shaw.medium.com/?source=post_page-----52d9df3d930d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----52d9df3d930d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----52d9df3d930d--------------------------------)
    [Bradley Stephen Shaw](https://bradley-stephen-shaw.medium.com/?source=post_page-----52d9df3d930d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----52d9df3d930d--------------------------------)
    ·15 min read·Oct 13, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----52d9df3d930d--------------------------------)
    ·阅读时间 15 分钟·2023年10月13日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/11454c39c829e4be351a11be4cce5a77.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/11454c39c829e4be351a11be4cce5a77.png)'
- en: Photo by [Scott Rodgerson](https://unsplash.com/@scottrodgerson?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[Scott Rodgerson](https://unsplash.com/@scottrodgerson?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 上的照片'
- en: Meta’s Prophet package¹ is one of the most widely-used packages for time series.
    At least anecdotally, according to me, after looking through a list of time series
    articles that I’ve bookmarked for later reading.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Meta 的 Prophet 包¹ 是最广泛使用的时间序列包之一。至少根据我的经验，在查看了我为稍后阅读而收藏的一系列时间序列文章后是这样。
- en: Sarcasm aside, I have used the package before and I love it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 说笑归说笑，我以前使用过这个包，我非常喜欢它。
- en: Another great resource for time series modelling is Vincent Warmerdam’s talk
    titled “Winning with Simple, even Linear, Models”² where he touches on modelling
    time series with linear models (with a bit of preparation).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个很棒的时间序列建模资源是 Vincent Warmerdam 的演讲，题为“通过简单甚至线性模型获胜”²，他在演讲中讨论了如何使用线性模型建模时间序列（需要一些准备工作）。
- en: Now, there are some elements of data science which blur the boundaries of art
    and science — think hyperparameter tuning, or defining the structure of a neural
    network.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有一些数据科学元素模糊了艺术和科学的界限——例如超参数调优或定义神经网络的结构。
- en: 'We’re going to lean into the art and do what a lot of the great artists have
    done: borrow ideas from others. So, in this series of articles we’ll be borrowing
    feature engineering ideas from Prophet, and linear modelling ideas from Vincent
    to perform our very own time series regression with a real-world time series.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将倾向于艺术，做许多伟大艺术家所做的事情：借鉴他人的想法。因此，在这一系列文章中，我们将从 Prophet 中借鉴特征工程的想法，并从 Vincent
    中借鉴线性建模的想法，进行我们自己的时间序列回归分析。
- en: The big picture
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大局观
- en: Let’s touch first on what the overall goal is, before we hone in on feature
    engineering.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先讨论一下总体目标，然后再深入到特征工程中。
- en: The overarching goal is simple — to generate the most accurate forecast of future
    events across a specified time horizon.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 总体目标很简单——在指定的时间范围内生成最准确的未来事件预测。
- en: We’ll start from scratch with a time series containing only a date variable
    and the quantity of interest. From this, we’re going to derive additional bits
    of information which will allow us to model future outcomes accurately. These
    extra features will be heavily “inspired” by Prophet.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: We’ll then feed our engineered data into a lightweight model, and let it learn
    how to best forecast into the future. Later on, we’ll dive into the model’s internal
    workings — after all, we’ll need to understand what’s driving our forecasts.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve seen the forest let’s get a close up of the trees, starting with
    a look at our data.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Data
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’re going to be using real-world data from the UK — in this case, road traffic
    accidents.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: This is the STATS19³ data set produced by the UK government. This data set is
    quite large so to make things a bit more manageable, we’re going to aggregate
    the daily accident count up to a monthly figure.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Visualising our time series, we see a downward trend and a strong yearly pattern.
    It could also be argued that these patterns change at some point between 2012
    and 2014.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/341e08ba1d4b4fa2d786736ed7fea684.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: Image by author
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: That’s already two kinds of features that we’ll need to create — something to
    capture the overall direction of travel, and something that captures the repeated
    annual pattern (or seasonality).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Feature engineering
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll touch on the general ideas that will drive our engineering before moving
    on to its implementation.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: The beauty of Prophet
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Prophet uses a decomposable time series model with three main components combined
    additively (with a little randomness on the side). Mathematically, this is:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dbec65f97390c18984bc7f151b967875.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: Image by author
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Here *g(t)* is the trend function which models non-periodic changes in the value
    of the time series, *s(t)* represents periodic changes (e.g., weekly and yearly
    seasonality), and *h(t)* represents the effects of holidays which occur on potentially
    irregular schedules over one or more days.⁴
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'It’s this decomposable model form that makes Prophet so flexible, and it’s
    this idea that a time series is separable that will guide our feature engineering:
    that is, we’ll generate features that will help us model each one of these components.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Our imitation won’t be a Prophet doppelganger — we’re only taking inspiration
    from it. So we’ll make a couple of changes:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '*g(t)* will also represent step changes or change points in the time series.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We won’t focus too much on the error term (epsilon), other than to remember
    that Prophet uses it to represent “idiosyncratic changes which are not accommodated
    by the model”⁴.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Aside: if you’re unfamiliar with the components of a time series, this article
    is a good summary:*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://pub.towardsai.net/lets-do-time-series-decomposition-d59d6bd4eea6?source=post_page-----52d9df3d930d--------------------------------)
    [## Let’s Do: Time Series Decomposition'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: A guide to effectively breaking a time series into its constituent parts
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pub.towardsai.net](https://pub.towardsai.net/lets-do-time-series-decomposition-d59d6bd4eea6?source=post_page-----52d9df3d930d--------------------------------)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[pub.towardsai.net](https://pub.towardsai.net/lets-do-time-series-decomposition-d59d6bd4eea6?source=post_page-----52d9df3d930d--------------------------------)'
- en: We’ll start with basic features that we can get from the date field, before
    deriving some more imaginative features.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从基本的日期相关特征开始，然后再衍生一些更具想象力的特征。
- en: 'Base features: step zero'
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础特征：零步骤
- en: 'As a warm up, let’s get out some basic date-related features:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 作为热身，让我们获取一些基本的日期相关特征：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: All of these features are available directly. It’s probably clear — even to
    the uninitiated — that these features are likely going to be predictive of the
    monthly accident count.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些特征都可以直接获得。即使是对这些特征不熟悉的人也可能很清楚，这些特征很可能会预测每月的事故数量。
- en: Time for some themed engineering.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候进行一些主题工程了。
- en: Trend
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 趋势
- en: Trend, or long-term changes over time, can take various forms.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 趋势，即随时间的长期变化，可以呈现各种形式。
- en: If present at all, trends can often be quite simple — consistent upward or downward
    changes are not uncommon. The airline passenger count data that’s used in many
    time series demonstrations⁵ has a very clear and simple trend at play.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在的话，趋势通常会非常简单——持续的上升或下降变化并不少见。在许多时间序列演示中使用的航空公司乘客数据⁵展示了一个非常清晰且简单的趋势。
- en: However, trends can get more complicated than that. They could for instance,
    be non-linear, where there is an acceleration or deceleration in the rate of change.
    There could be multiple instances of acceleration or deceleration. Or there could
    be step changes where there is a sudden change in location of the trend.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，趋势可能会变得比这更复杂。例如，它们可能是非线性的，其中存在加速或减速的现象。可能会有多个加速或减速的实例。或者可能会有阶跃变化，其中趋势的位置发生突变。
- en: 'We’ve seen above that there looks to be a downward linear trend in our data,
    with a change point somewhere between 2012 and 2014\. I’m not entirely sure of
    the exact form of the trend, so I’ll create a variety of them and let the model
    figure out which is best:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到我们的数据中似乎存在一个下降的线性趋势，变化点位于2012年和2014年之间的某个地方。我不完全确定趋势的确切形式，所以我将创建各种趋势，并让模型找出哪一个最合适：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Visually, this gives us a number of possible trends (with some scaling to get
    everything to fit on the same chart):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从视觉上来看，这给我们提供了许多可能的趋势（通过一些缩放来将所有内容适配到同一图表上）：
- en: '![](../Images/28610a9f922d926b33c7c59226ab6c48.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/28610a9f922d926b33c7c59226ab6c48.png)'
- en: Image by author
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: '*Aside: it’s important to note that while all of these trends look to be increasing,
    the model will be able to use these to capture the decreasing trend in the data,
    by for example using negative weights or coefficients. This applies not only to
    the trend components, but all features used in the model.*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*附注：重要的是要注意，虽然所有这些趋势看起来都是上升的，但模型将能够利用这些趋势捕捉数据中的下降趋势，例如使用负权重或系数。这不仅适用于趋势组件，还适用于模型中使用的所有特征。*'
- en: Now for some change points.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来看一些变化点。
- en: Prophet detects change points by first specifying a large number of potential
    change points, and then using as few of them as possible⁶. Prophet’s default approach
    is to create 25 evenly spaced change points over the first 80% of the data.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Prophet通过首先指定大量潜在变化点，然后尽可能少地使用这些点来检测变化点。Prophet的默认方法是在数据的前80%内创建25个均匀间隔的变化点。
- en: We’ll do something similar by first creating many potential change points and
    then letting the model choose which points to use. This is not too dissimilar
    from Prophet, but there’s no constraints on spacing.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过首先创建许多潜在的变化点，然后让模型选择使用哪些点来做一些类似的事情。这与Prophet并没有太大区别，但没有对间隔施加限制。
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If we take a look at the first 12 rows, we see how the change point creation
    has worked:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看前12行，我们可以看到变化点创建是如何工作的：
- en: '![](../Images/48ca78bf041e0b05889dae8a684e7ab5.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/48ca78bf041e0b05889dae8a684e7ab5.png)'
- en: Image by author
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Not very complex at all as we have a column for each change point feature indicating
    whether or not the observation happened before or after a given date.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 并不复杂，因为我们为每个变化点特征都有一列，指示观察是否发生在给定日期之前或之后。
- en: It’s worth mentioning that I’ve only allowed change points to happen at the
    end of each quarter. Unless we’re absolutely certain of changes in the series,
    the setting of these points can be a bit of an art where we balance flexibility
    against overreaction; change points need to be frequent enough to capture real
    changes in trend but not so frequent that they begin to capture noise.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: In this case quarterly change points have a bit going for them. Firstly, they
    effectively put a minimum time threshold on how long a change has to last before
    it is considered “real” — potentially useful in reducing the model’s propensity
    to confuse signal for noise.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: In the UK, quarterly changes roughly align with seasonal changes and significant
    calendar changes (e.g. 1 January).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'There are external environment effects to consider too: new registration plates
    are released around March and September of each year, which usually drive a spike
    in new car sales. As new cars are generally safer than old cars, it’s not unreasonable
    to imagine that the change in car parc mix would have an impact on the number
    of road traffic accidents.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: While it’s probably not too bad a place to start from, we might have to circle
    back later for some fine-tuning.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Seasonality
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We refer to regular or periodic effects present in a time series as seasonality.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'Prophet uses Fourier series to represent seasonal effects in the additive model.
    This generalises as the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/764ac5dff3304ab7021489578f0efd4b.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: Image by author
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: The Fourier representation essentially implies that all the repetitive effects
    that we see in a time series can be represented by a series of sine and cosine
    waves of varying period.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: As we’re working with monthly data, we’d expect to see seasonal effects around
    the same time every year; in other words, the *period* of our time series is one
    year, or 12 months. So we’d need to set *P* = 12.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '*N* = 10 and *N* = 3 have been noted to work well for series with yearly and
    weekly seasonality respectively⁴, but we’ll extend *N* to 12 for good measure.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that we’re not creating a separate seasonal model, but rather seasonal
    features which our single model can assemble to represent periodic variations.
    With that in mind we create our Prophet-inspired features as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This creates multiple sine and cosine waves of various periods, ready for the
    model to assemble together in order to capture seasonality. So as input features,
    these may look a little like so:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7da1e50fe657bde47f342d27b4699002.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: '*Aside: note how higher values of n reduce the period — or time needed to complete
    a full cycle — of the sine function.*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Our model will select and scale these functions in various ways so that the
    periodic (or *seasonal*) element of the time series is appropriately accounted
    for… that is, the model will determine the *a* and *b* coefficients in the formula
    above.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Holidays
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Holidays and events provide large, somewhat predictable shocks to many business
    time series and often do not follow a periodic pattern, so their effects are not
    well modeled by a smooth cycle.⁴
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 假期和事件对许多业务时间序列提供了大的、相对可预测的冲击，并且通常不遵循周期模式，因此它们的效果不能很好地通过平滑周期建模。⁴
- en: An excellent example of this is the Easter weekend which in the UK has a very
    definite impact on vehicular incidents. However, this holiday weekend doesn’t
    occur during the same month each year — in some instances it falls in March, while
    in other years we have to wait until April before we can start our search for
    chocolate rabbits.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子是复活节周末，在英国对车辆事故有非常明显的影响。然而，这个假期周末并不是每年都在同一个月份——有时它发生在三月，而在其他年份，我们得等到四月才能开始寻找巧克力兔子。
- en: While we will know fairly well in advance when Easter occurs (and will of course
    know when it occurred in the past), it’s quite difficult to model with the seasonal
    approach above. So we’ll take a different tack and instead count the number of
    bank holidays and business days in a month, which should allow us to also capture
    the effect of more regular holidays like Christmas.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们可以相当提前知道复活节的日期（当然也知道过去的日期），但用上述季节性方法建模相当困难。因此，我们将采取不同的方法，而是统计每月的银行假期和工作日数量，这应该使我们也能够捕捉到像圣诞节这样更规律的假期的影响。
- en: 'We can use `numpy` to get to business days:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`numpy`来获取工作日：
- en: '[PRE4]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '… but need the `holidays` package and a bit of help from StackOverflow⁹ to
    get to monthly holiday count:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: ……但是需要`holidays`包和一点来自StackOverflow的帮助才能获得每月的假期数量：
- en: '[PRE5]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We’ll leave out the number of weekend days: as it can be derived from existing
    features, using the count of weekend days could introduce unwanted feature correlation.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将忽略周末天数：因为可以从现有特征中推导出，使用周末天数可能会引入不必要的特征相关性。
- en: And that it’s — feature engineering complete, and we’re just about ready to
    move on to the modelling.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样——特征工程完成，我们准备好进入建模阶段。
- en: Wrap up and ramble
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结与闲聊
- en: We’ve covered a lot of ground in this article. As is becoming tradition, we’ll
    quickly recap and then have a bit of a ramble.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这篇文章中涵盖了很多内容。按照惯例，我们将快速回顾一下，然后进行一些闲聊。
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: After touching on our aspirations to build an awesome forecasting model we looked
    at UK road traffic accident data. We saw strong trend and seasonality in our aggregated
    monthly counts and knew that we’d need to create a variety of features to capture
    these effects.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论了构建一个出色的预测模型的愿望之后，我们查看了英国道路交通事故数据。我们看到我们汇总的每月数据中存在明显的趋势和季节性，并知道我们需要创建各种特征来捕捉这些效应。
- en: We started our feature engineering process with a light warm up — extracting
    simple and directly available date features.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的特征工程过程从简单的预热开始——提取简单且直接可用的日期特征。
- en: We moved on to building features to capture the trend along with some allowance
    for change points, which were treated fairly simply. There was some potential
    merit to our logic but we acknowledged that it might need some fine tuning.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始构建捕捉趋势的特征，并允许一些变化点，这些变化点被相对简单地处理。我们的逻辑可能有一定的价值，但我们承认可能需要一些微调。
- en: We used adapted Fourier transforms to model seasonality, creating 12 sets of
    seasonal features.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了改进的傅里叶变换来建模季节性，创建了12组季节性特征。
- en: Finally we moved on to creating holiday features, choosing to focus on the number
    of working and holiday days in a month.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们转向创建假期特征，选择专注于每月的工作日和假期天数。
- en: Cyclical feature encoding
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环特征编码
- en: When building new features we need to keep with two things in mind — what *could*
    be predictive of our target and how it would be interpreted by the machine.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建新特征时，我们需要牢记两点——什么*可能*对我们的目标有预测作用以及它如何被机器解读。
- en: A good example of this is month of the year which we usually represent using
    an integer mapping (i.e. January = 1, …, December = 12). We can be fairly sure
    that the month of the year would be a strong driver of accident count. But if
    we were to pass to the model the integer encoding, the model would treat the December
    of one year as something very different to the January of the following year,
    even they are temporally adjacent!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子是年度月份，我们通常用整数映射来表示（即：一月 = 1，……，十二月 = 12）。我们可以相当确定地认为月份会对事故数量产生强烈的影响。但是如果我们将整数编码传递给模型，模型会将某一年的十二月视为与下一年的一月完全不同的时间点，即使它们是时间上相邻的！
- en: We solve this issue with cyclical feature encoding, or more specifically by
    conversion to polar co-ordinates. Since neither the sine nor cosine transformation
    deliver a unique encoding on their own, we use the combination of both.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: The code above doesn’t show any examples of cyclical encoding but it is used
    in my workflow and turns out to be an important feature in the model (see part
    2).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: The Prophet features
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following in a similar vein, our “Prophet features” relied heavily on sine and
    cosine transformations. In reality, these are really Fourier transforms.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Eagle-eyed readers may have picked up on how the Prophet features have been
    created. In the original paper, the time dimension has been re-based to a certain
    point and every observation is reflected as being *t* time units after that. We’ve
    not done that, instead opting to go another path. If I ever revisit this, it may
    be something to consider.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'Lagged features: the elephant in the room'
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, I’ve really just glossed over the use of lagged features. Or lack of
    use to be precise.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Using previous values of the target quantity to predict the current or future
    value of the target quantity — i.e. using values that are “lagged” in time — is
    a staple in a lot of really great time series models. And for good reason, as
    they are generally strong predictors.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: My reluctance to do so centres on the whole purpose of the model — to be good
    at forecasting. When we forecast with lagged features, we usually have to “walk”
    the lagged features forward and transition from using actual values of the target
    to using predicted values of the target.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: To make that more concrete, consider a model which uses one lagged feature —
    that is, we use the value of the target at time *t — 1* to predict the value of
    the target at time *t*. We’re interested in using the model to forecast 3 steps
    into the future.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: The first forecast (at time *t + 1*) will use the value of the target today.
    Since the target value is known there are no issues here and it’s business as
    usual.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Now consider the forecast for time *t + 2*. We need the target value as at time
    *t + 1* in order to use our model. Of course, the *true* target value is unknown
    at this point and so we resort to using the *predicted*target for time *t + 1\.*
    When it comes to forecasting time *t + 3,* we walk forward the prediction from
    time *t + 2*, so on and so forth. From this it’s clear how prediction error can
    get baked into the forecast; early errors get compounded as poor predictions get
    walked forward and reused. I’m not a fan of this.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a secondary benefit from not using lagged features, and that is model
    explainability: we are forced into modelling the target in a different way and
    really have to think about (and model!) the drivers of outcome.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Oftentimes this leads to a better conversation with stakeholders, as explaining
    a forecast starts to sound like “long-term trend represents X% and seasonality
    represents Y% of a forecast of Z” rather than “the forecast is B because the value
    of the previous forecast was A”.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: A last note on lagged features before moving on. We aren’t constrained to using
    lagged *target* features, so while we’ve discussed including previous values of
    the target feature we could equally include lagged predictors with similar caveats
    and requirements.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: This isn’t intended to be a blanket put down of the use of lagged features —
    I’m sure there are use cases where it makes perfect sense to do so. The number
    of lags used and length of forecasting window may even mean that this is a non-issue.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Change points
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s talk about change points, and the creation thereof.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: I’ve created change points in a really simplistic way, and I’m sure there are
    many ways to improve my implementation. Prophet arguably does it better by creating
    evenly spaced change points in the first 80% of the data, but then there are a
    few things to consider.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: This reduces the impact of more recent spurious change points on future forecasts
    — that’s a good thing.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: But how many true changes happen on evenly-spaced time intervals? And if changes
    really did happen at that cadence, wouldn’t it be better thought of as some seasonal
    impact? Yes, it’s splitting hairs. Yes, it is important. Fine, I’ll move on.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: While we can model historic change points, it’s a bit more difficult to model
    future change points; there are instances where an upcoming change is known.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: For instance, the UK introduced the Civil Liability Act which made changes to
    the personal injury compensation system in England and Wales. If you were to regularly
    model the number and cost of compensation claims for whiplash injuries like I
    do (for work, not pleasure), the implementation of this act in June 2021 resulted
    in quite a serious step change. But since it was known about in advance, it was
    possible to take steps to account for it.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: These kinds of changes need a case-by-case approach, with pragmatism and common
    sense being front and centre.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Interactions
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Anyone keeping count of elephants in the room? Here’s another — we haven’t built
    any features which capture the interaction between predictors.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Interactions are incredibly useful features which can capture the relationship
    between various predictors. An interaction occurs when an independent variable
    has a different effect on the outcome depending on the values of another independent
    variable⁹.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: In our case one of the more interesting motivations for using interactions would
    be to allow the seasonality to change over time, as we currently assume — and
    model — that the same seasonal effect holds true for more than twenty years. There’s
    no obvious evidence to the contrary but we could potentially eke out more forecasting
    power from the model by interacting time with some features.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: We’ll have to add this to our list of things to do next time.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Holidays
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lastly, a quick word on holidays.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: We touched on some of the headaches that the Easter weekend can give us and
    came up with a simple solution.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: A real enhancement to the feature engineering would be the incorporation of
    school holidays. These will likely have an impact on the number of road traffic
    accidents, and so would be strong predictors.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately it’s not so easy to do as schools in the UK go on holiday at slightly
    different times for slightly different lengths of time. Perhaps we could get really
    imaginative and create a distribution of school holidays, and allocate that to
    each month — another one for next time.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: That’s it from me. I hope you enjoyed reading this as much as I enjoyed writing
    it.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: As always, please let me know what you think — I’m really interested to hear
    about your experiences with Prophet or with modelling time series in different
    ways.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: As I mentioned, I’ll be tackling the modelling in a forthcoming article — keep
    your eyes peeled for that.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Until next time.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: References and resources
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[GitHub — facebook/prophet: Tool for producing high quality forecasts for time
    series data that has multiple seasonality with linear or non-linear growth.](https://github.com/facebook/prophet)'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Vincent Warmerdam: Winning with Simple, even Linear, Models | PyData London
    2018 — YouTube](https://www.youtube.com/watch?v=68ABAU_V8qI&list=WL&index=32&t=2183s)'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://roadtraffic.dft.gov.uk/downloads](https://roadtraffic.dft.gov.uk/downloads)
    used under the [Open Government Licence (nationalarchives.gov.uk)](https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/)'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Forecasting at scale (peerj.com)](https://peerj.com/preprints/3190.pdf)'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[A comprehensive guide to time series decomposition | Towards AI](https://pub.towardsai.net/lets-do-time-series-decomposition-d59d6bd4eea6)'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Trend Changepoints | Prophet (facebook.github.io)](https://facebook.github.io/prophet/docs/trend_changepoints.html)'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Civil-liability-act-2018-Q-and-A.docx (live.com)](https://view.officeapps.live.com/op/view.aspx?src=https%3A%2F%2Fassets.publishing.service.gov.uk%2Fmedia%2F5c62d226ed915d04538f124f%2FCivil-liability-act-2018-Q-and-A.docx%23%3A%7E%3Atext%3DThe%2520Civil%2520Liability%2520Act%25202018%2520makes%2520important%2520changes%2520to%2520the%2Cinjury%2520discount%2520rate%2520is%2520set.&wdOrigin=BROWSELINK)'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[interaction.pdf (mcgill.ca)](https://www.medicine.mcgill.ca/epidemiology/joseph/courses/EPIB-621/interaction.pdf)'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://stackoverflow.com/a/59681727/11637704](https://stackoverflow.com/a/59681727/11637704)'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
