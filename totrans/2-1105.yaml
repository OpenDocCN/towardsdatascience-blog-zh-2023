- en: How to Improve Your Code Quality with Python Pre-Commit Hooks?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/how-to-automate-code-quality-with-python-pre-commit-hooks-e550debbd62e](https://towardsdatascience.com/how-to-automate-code-quality-with-python-pre-commit-hooks-e550debbd62e)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Commit your code with peace of mind
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://ahmedbesbes.medium.com/?source=post_page-----e550debbd62e--------------------------------)[![Ahmed
    Besbes](../Images/93804d9291439715e578f204b79c9bdd.png)](https://ahmedbesbes.medium.com/?source=post_page-----e550debbd62e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e550debbd62e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e550debbd62e--------------------------------)
    [Ahmed Besbes](https://ahmedbesbes.medium.com/?source=post_page-----e550debbd62e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e550debbd62e--------------------------------)
    ¬∑7 min read¬∑Jul 22, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e3c1be9eec7e621417f6b1786fbe9dd9.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Roman Synkevych](https://unsplash.com/@synkevych?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: If you‚Äôre a Python developer, you may frequently come across situations where
    your team members have different coding styles that make the codebase inconsistent.
    As a result, **this leads to bugs, decreases productivity**, and **makes collaboration
    difficult**.
  prefs: []
  type: TYPE_NORMAL
- en: As someone who strives to maintain code quality, I know how painful this situation
    can be.
  prefs: []
  type: TYPE_NORMAL
- en: 'üëâ There is fortunately a solution that solves this issue: **pre-commit hooks**.'
  prefs: []
  type: TYPE_NORMAL
- en: Pre-commit hooks are scripts or tools that run before you make a commit to your
    version control system. They can automatically format your code, run tests, check
    for linting errors, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: I started using pre-commit hooks in both my personal and professional projects.
    They have helped me catch and fix potential issues early on, ensuring that my
    code is always clean and consistent. Plus, they have saved me a lot of time and
    effort by automating repetitive tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In ***this practical blog post, we will dive into this topic. We will explore
    how to set pre-commits, customize them to suit your needs, and integrate them
    into your development workflow.***
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you‚Äôre a Python developer looking to enhance your code quality and productivity
    across your team, this post is for you.
  prefs: []
  type: TYPE_NORMAL
- en: So, without further ado, let‚Äôs have a look üîç
  prefs: []
  type: TYPE_NORMAL
- en: 'Pre-commits: how they integrate into the Git workflow'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pre-commit hooks are scripts that run automatically before each commit to check
    your code for errors. These hooks are language agnostic and help to catch issues
    before they are committed to the repository, ensuring that only high-quality code
    is committed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram visualizes a git workflow that includes the pre-commit
    hooks: once you hit the `git commit` command, these scripts are triggered. And
    when they‚Äôre done executing, a final step verifies that all the checks passed.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0145ccfc38da7687e199c9ac4d0b7805.png)'
  prefs: []
  type: TYPE_IMG
- en: My pre-commit configuration for my personal projects
  prefs: []
  type: TYPE_NORMAL
- en: ‚úÖ If the pre-commit checks don‚Äôt pass, you need to iterate on your codebase
    and provide the fixes accordingly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‚ùå If the pre-commit check pass, your code is committed successfully
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up and configuring pre-commit hook in your Python project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start using pre-commit in your Python project, you first need to install
    it. You can do this using pip, the Python package installer. Run the following
    command in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once pre-commit is installed, you need to set up a configuration file named
    `.pre-commit-config.yaml` in the root directory of your project. This file will
    specify which hooks pre-commit should use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here‚Äôs a configuration I use in my`.pre-commit-config.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this configuration, we‚Äôre using three hooks from the pre-commit-hooks [repository](https://github.com/pre-commit/pre-commit-hooks)
    (a repo that contains some out-of-the-box hooks for pre-commit) `trailing-whitespace`,
    `check-yaml`, and `end-of-file-fixer`.
  prefs: []
  type: TYPE_NORMAL
- en: '`trailing-whitespace`trims trailing whitespace'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`check-yaml` checks that YAML files are correctly formatted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`end-of-file-fixer` makes sure files end in a new line and only a new line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After setting up the configuration file, you need to install the git hooks.
    Run the following command in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, pre-commit will run automatically on `git commit`. If any of these hooks
    in your configuration file fail, the commit will be aborted.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can customize your `.pre-commit-config.yaml` file to include any
    hooks that are relevant to your project. There are many pre-built hooks available,
    but you can also create your own if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Some common pre-commit hooks for Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many pre-built hooks available that can help improve the quality
    of your Python code. Here are a few common ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '1 ‚Äî `black`: This is a code formatter for Python. It automatically formats
    your code to make it more readable and consistent. Here''s how you can add it
    to your `.pre-commit-config.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '2 ‚Äî `flake8` : This is a tool for enforcing coding standards in Python. It
    checks your code against PEP8, Python''s official style guide, and also looks
    for logical errors. Here''s how you can add it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '3 ‚Äî `isort`: This tool automatically sorts and formats your Python imports.
    Here''s how you can add it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '4 ‚Äî `mypy`: This is a static type checker for Python. It helps catch certain
    types of errors before your code is even run. Here''s how you can add it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '5 ‚Äî `pycln` : This is a tool that helps find and remove unused import statements'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '6 ‚Äî `pydocstyle` : this is a static analysis tool for checking compliance with
    Python docstring conventions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '7 ‚Äî Custom hooks for running **unit tests**: Instead of referencing an external
    repository, you can specify a custom command that should be triggered at each
    commit. In this example, we run unit tests. This will probably introduce a slight
    overhead depending on your test suite.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: These are just a few examples of the many pre-commit hooks available for Python.
    For more info, you can check this [repository](https://github.com/pre-commit/pre-commit-hooks)
    or add your custom quality code checks.
  prefs: []
  type: TYPE_NORMAL
- en: How to run pre-commit hooks and fix a codebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, I‚Äôll share with you the pre-commit configuration I use in my
    personal projects. Then, I‚Äôll show you how it works in practice and prevents potential
    errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, here‚Äôs my configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now I‚Äô,m going to add the following poorly formatted dummy script to my existing
    codebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As you see, this script has many issues:'
  prefs: []
  type: TYPE_NORMAL
- en: 'an unused import statement: `math`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'no black formatting: extra spaces between the arguments and the variable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a lot of trailing spaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we add this file and commit the code, we get these errors from the hooks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/443e8bf3e0a8487e6751f4d9c3ddf107.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by the author
  prefs: []
  type: TYPE_NORMAL
- en: '`black` failed but reformatted the code automatically'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pydoctyle` failed and indicated where the documentation is missing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pycln` failed and automatically removed the unused import statement'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we add the automatically modified script and commit the code again, we notice
    that everything passes except the `pyodstyle` hook.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2e3e623d1292a25f40b6cc3fc94a135a.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by the author
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we have to update the documentation manually,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'add the code, and commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7d34f2060fc47e193ad2bd1b73bd2d8c.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by the author
  prefs: []
  type: TYPE_NORMAL
- en: Now, you‚Äôre ready to push your code.
  prefs: []
  type: TYPE_NORMAL
- en: Observing the impact of pre-commit on code quality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The impact of pre-commit on code quality is significant and multifaceted. Here
    are a few ways in which pre-commit can enhance the quality of your Python code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Consistent Code Formatting**: With hooks like `black` and `isort`, your code
    will follow a consistent style. This makes the code easier to read and understand,
    not just for you, but for anyone else who might work on your project.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Catching Errors Early**: Hooks like `flake8` and `mypy` can catch potential
    errors and bugs before your code is even run. This can save you a lot of time
    debugging later on.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Enforcing Best Practices:** Many hooks enforce Python best practices, such
    as PEP8 compliance. This can help you write cleaner, more efficient code.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Running Unit tests**: Pre-commits allow you to run your unit tests locally
    and check they succeed before pushing your code. This prevents you from encountering
    test errors during your CICD.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By integrating pre-commit into your development workflow, you can ensure that
    your code is always of the highest quality. It‚Äôs a tool that can save you time,
    effort, and potentially a lot of headaches in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: pre-commit is a powerful tool that can significantly enhance the quality of
    your Python code. By automating checks for common issues, enforcing best practices,
    and preventing bad commits, pre-commit can save you time, effort, and a lot of
    debugging headaches.
  prefs: []
  type: TYPE_NORMAL
- en: It‚Äôs easy to integrate into your development workflow and highly customizable,
    allowing you to choose the hooks that best fit your project‚Äôs needs.
  prefs: []
  type: TYPE_NORMAL
- en: New to Medium? You can subscribe for $5 per month and unlock unlimited articles
    on various topics (tech, design, entrepreneurship‚Ä¶) You can support me by clicking
    on my referral [link](https://ahmedbesbes.medium.com/membership)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[](https://ahmedbesbes.medium.com/membership?source=post_page-----e550debbd62e--------------------------------)
    [## Join Medium with my referral link - Ahmed Besbes'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story‚Ä¶
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ahmedbesbes.medium.com](https://ahmedbesbes.medium.com/membership?source=post_page-----e550debbd62e--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://pre-commit.com/](https://pre-commit.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/pre-commit/pre-commit/](https://github.com/pre-commit/pre-commit/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/watch?v=psjz6rwzMdk&ab_channel=mCoding](https://www.youtube.com/watch?v=psjz6rwzMdk&ab_channel=mCoding)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
