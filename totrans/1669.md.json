["```py\ndf = pd.read_csv('data/ec2_cpu_utilization.csv')\n\n# The labels are listed in the NAB repository for each dataset\nanomalies_timestamp = [\n        \"2014-02-26 22:05:00\",\n        \"2014-02-27 17:15:00\"\n    ]\n\n# Ensure the timestamp column is an actual timestamp\ndf['timestamp'] = pd.to_datetime(df['timestamp'])\n```", "```py\ndf['is_anomaly'] = 1\n\nfor each in anomalies_timestamp:\n    df.loc[df['timestamp'] == each, 'is_anomaly'] = -1\n```", "```py\nanomaly_df = df.loc[df['is_anomaly'] == -1]\ninlier_df = df.loc[df['is_anomaly'] == 1]\n\nfig, ax = plt.subplots()\n\nax.scatter(inlier_df.index, inlier_df['value'], color='blue', s=3, label='Inlier')\nax.scatter(anomaly_df.index, anomaly_df['value'], color='red', label='Anomaly')\nax.set_xlabel('Time')\nax.set_ylabel('CPU usage')\nax.legend(loc=2)\n\nfig.autofmt_xdate()\nplt.tight_layout()\n```", "```py\nimport seaborn as sns\n\nsns.kdeplot(df['value']);\nplt.grid(False)\nplt.axvline(0.134, 0, 1, c='black', ls='--')\nplt.tight_layout()\n```", "```py\nfrom scipy.stats import median_abs_deviation\n\nmad = median_abs_deviation(df['value'])\nmedian = np.median(df['value'])\n```", "```py\ndef compute_robust_z_score(x):\n    return .6745*(x-median)/mad\n\ndf['z-score'] = df['value'].apply(compute_robust_z_score)\n```", "```py\ndf['baseline'] = 1\n\ndf.loc[df['z-score'] >= 3.5, 'baseline'] = -1 # Right-end tail\ndf.loc[df['z-score'] <=-3.5, 'baseline'] = -1 # Left-hand tail\n```", "```py\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n\ncm = confusion_matrix(df['is_anomaly'], df['baseline'], labels=[1, -1])\n\ndisp_cm = ConfusionMatrixDisplay(cm, display_labels=[1, -1])\n\ndisp_cm.plot();\n\nplt.grid(False)\nplt.tight_layout()\n```", "```py\ntrain = df[:3550]\ntest = df[3550:]\n```", "```py\nfrom sklearn.ensemble import IsolationForest\n\n# Only one outlier in the training set\ncontamination = 1/len(train)\n\niso_forest = IsolationForest(contamination=contamination, random_state=42)\n\nX_train = train['value'].values.reshape(-1,1)\n\niso_forest.fit(X_train)\n```", "```py\npreds_iso_forest = iso_forest.predict(test['value'].values.reshape(-1,1))\n```", "```py\ncm = confusion_matrix(test['is_anomaly'], preds_iso_forest, labels=[1, -1])\n\ndisp_cm = ConfusionMatrixDisplay(cm, display_labels=[1, -1])\n\ndisp_cm.plot();\n\nplt.grid(False)\nplt.tight_layout()\n```", "```py\nfrom sklearn.neighbors import LocalOutlierFactor\n\nlof = LocalOutlierFactor(contamination=contamination, novelty=True)\n\nlof.fit(X_train)\n```", "```py\npreds_lof = lof.predict(test['value'].values.reshape(-1,1))\n```", "```py\ncm = confusion_matrix(test['is_anomaly'], preds_lof, labels=[1, -1])\n\ndisp_cm = ConfusionMatrixDisplay(cm, display_labels=[1, -1])\n\ndisp_cm.plot();\n```"]