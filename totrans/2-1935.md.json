["```py\nContent-Type: multipart/mixed; boundary=\"//\"\nMIME-Version: 1.0\n\n--//\nContent-Type: text/cloud-config; charset=\"us-ascii\"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 7bit\nContent-Disposition: attachment; filename=\"cloud-config.txt\"\n\n#cloud-config\ncloud_final_modules:\n- [scripts-user, always]\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 7bit\nContent-Disposition: attachment; filename=\"userdata.txt\"\n\n# your script here\n\n--//--\n```", "```py\nContent-Type: multipart/mixed; boundary=\"//\"\nMIME-Version: 1.0\n\n--//\nContent-Type: text/cloud-config; charset=\"us-ascii\"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 7bit\nContent-Disposition: attachment; filename=\"cloud-config.txt\"\n\n#cloud-config\ncloud_final_modules:\n- [scripts-user, always]\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 7bit\nContent-Disposition: attachment; filename=\"userdata.txt\"\n\n#!/bin/bash\n\n# --------------- define functions --------------- #\n\nfunction install_docker() {\n  # some installations\n}\n\nfunction create_dotenv() {\n  # create .env file\n}\n\nfunction setup_docker_compose() {\n  # setup docker-compose.yml\n}\n\nfunction launch_docker_compose() {\n  # launch your container\n}\n\n# --------------- execute script --------------- #\n\nif [ ! -e \"STARTED\" ]; then\n  # on first launch\n  install_docker\n  create_dotenv\n  setup_docker_compose\n  launch_docker_compose\n  touch \"STARTED\";\nelse\n  # on restart\n  create_dotenv\n  setup_docker_compose\nfi\n\n--//--\n```", "```py\nContent-Type: multipart/mixed; boundary=\"//\"\nMIME-Version: 1.0\n\n--//\nContent-Type: text/cloud-config; charset=\"us-ascii\"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 7bit\nContent-Disposition: attachment; filename=\"cloud-config.txt\"\n\n#cloud-config\ncloud_final_modules:\n- [scripts-user, always]\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 7bit\nContent-Disposition: attachment; filename=\"userdata.txt\"\n\n#!/bin/bash\n\n# --------------- define functions --------------- #\n\nfunction install_docker() {\n  # https://docs.docker.com/engine/install/ubuntu/\n  sudo apt-get update;\n  sudo apt-get install -y ca-certificates gnupg lsb-release;\n\n  sudo mkdir -p /etc/apt/keyrings\n  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --yes --dearmor -o /etc/apt/keyrings/docker.gpg\n  echo \\\n    \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n    $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n  sudo apt update\n  sudo apt-get -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n}\n\nfunction create_dotenv() {\n  ENV=$(curl -s http://169.254.169.254/latest/meta-data/tags/instance/Env)\n  cd $1\n  rm -f .env\n\n  # Calculate memory limit & reservation for docker container\n  # 90% limit, 70% reserved\n  total_memory=$(free -m | awk '/^Mem:/{print $2}')\n  MEM_LIMIT=$(echo \"$total_memory * 0.9\" | bc)\n  MEM_LIMIT=$(printf \"%.0f\" \"$MEM_LIMIT\")\n  MEM_RES=$(echo \"$total_memory * 0.7\" | bc)\n  MEM_RES=$(printf \"%.0f\" \"$MEM_RES\")\n  echo \"Memory limit: $MEM_LIMIT $MEM_RES MB\"\n\n  echo MEM_LIMIT=${MEM_LIMIT}M >> .env\n  echo MEM_RES=${MEM_RES}M >> .env  \n  echo ENV=$ENV >> .env\n  echo -e \"[INFO] dotenv created ==========\\n\"\n}\n\nfunction setup_docker_compose() {\n  # pull docker-compose file\n  CI_TOKEN=\"get from secrets-manager\"\n  curl --header \"PRIVATE-TOKEN: $CI_TOKEN\" \"https://gitlab.com/api/v4/projects/${1}/repository/files/docker-compose.yml/raw?ref=main\" -o ${2}docker-compose.yml\n\n  # pull image\n  AWS_ACCOUNT=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .accountId)\n  AWS_REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/region)\n  aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin\n  echo -e \"[INFO] docker-compose downloaded & docker logged in ==========\\n\"\n}\n\nfunction launch_docker_compose() {\n  docker compose pull\n  docker compose up -d\n  echo -e \"[INFO] docker image pulled and up ==========\\n\"\n}\n\n# --------------- execute script --------------- #\n\nPROJECTID=12345678\nHOMEDIR=/home/ubuntu/\n\nif [ ! -e \"STARTED\" ]; then\n  # on first launch\n  install_docker\n  create_dotenv $HOMEDIR\n  setup_docker_compose $PROJECTID $HOMEDIR\n  launch_docker_compose\n  touch \"STARTED\";\nelse\n  # on restart\n  create_dotenv $HOMEDIR\n  setup_docker_compose $PROJECTID $HOMEDIR\nfi\n\n--//--\n```", "```py\nContent-Type: multipart/mixed; boundary=\"//\"\nMIME-Version: 1.0\n\n--//\nContent-Type: text/cloud-config; charset=\"us-ascii\"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 7bit\nContent-Disposition: attachment; filename=\"cloud-config.txt\"\n\n#cloud-config\ncloud_final_modules:\n- [scripts-user, always]\n\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 7bit\nContent-Disposition: attachment; filename=\"userdata.txt\"\n\n#!/bin/bash\n\n# --------------- define functions --------------- #\n\nfunction install_aws_cli() {\n  sudo apt-get update;\n  sudo apt-get install -y curl unzip;\n\n  sudo curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\";\n  sudo unzip awscliv2.zip;\n  sudo ./aws/install;\n  rm -f awscliv2.zip; rm -rf aws;\n}\n\nfunction download_scripts() {\n  # download template functions from S3\n  aws s3 cp s3://<s3.bucket.name>/userdata_template.sh userdata_template.sh\n  source userdata_template.sh\n}\n\n# --------------- execute script --------------- #\n\nPROJECTID=12345678\nHOMEDIR=/home/ubuntu/\n\ncd $HOMEDIR\nif [ ! -e \"STARTED\" ]; then\n  # on first launch\n  install_aws_cli\n  download_scripts\n  install_docker\n  create_dotenv $HOMEDIR\n  setup_docker_compose $PROJECTID $HOMEDIR\n  launch_docker_compose\n  touch \"STARTED\";\nelse\n  # on restart\n  download_scripts\n  create_dotenv $HOMEDIR\n  setup_docker_compose $PROJECTID $HOMEDIR\nfi\n```", "```py\n# print the last 100 lines of log file\ntail -n 100 /var/log/cloud-init-output.log\n```", "```py\n# print the user data script\ncurl -s http://169.254.169.254/latest/user-data\n\n# the script itself is stored in this directory\ncd /var/lib/cloud/instance/scripts\n```"]