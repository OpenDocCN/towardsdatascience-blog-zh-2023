["```py\nfrom sklearn.datasets import fetch_20newsgroups\n\ntrain_set = fetch_20newsgroups(subset='train', remove=('headers', 'footers', 'quotes'))\ntest_set = fetch_20newsgroups(subset='test', remove=('headers', 'footers', 'quotes'))\n```", "```py\nX_train, y_train = train_set.data, train_set.target\nX_test, y_test = test_set.data, test_set.target\n```", "```py\nprint('Documents in training set:', len(X_train))\nprint('Documents in test set:', len(X_test))\n```", "```py\nDocuments in training set: 11314\nDocuments in test set: 7532\n```", "```py\ncategories = train_set.target_names\ncategories\n```", "```py\n['alt.atheism',\n 'comp.graphics',\n 'comp.os.ms-windows.misc',\n 'comp.sys.ibm.pc.hardware',\n 'comp.sys.mac.hardware',\n 'comp.windows.x',\n 'misc.forsale',\n 'rec.autos',\n 'rec.motorcycles',\n 'rec.sport.baseball',\n 'rec.sport.hockey',\n 'sci.crypt',\n 'sci.electronics',\n 'sci.med',\n 'sci.space',\n 'soc.religion.christian',\n 'talk.politics.guns',\n 'talk.politics.mideast',\n 'talk.politics.misc',\n 'talk.religion.misc']\n```", "```py\nprint(X_train[0])\n```", "```py\nI was wondering if anyone out there could enlighten me on this car I saw\nthe other day. It was a 2-door sports car, looked to be from the late 60s/\nearly 70s. It was called a Bricklin. The doors were really small. In addition,\nthe front bumper was separate from the rest of the body. This is \nall I know. If anyone can tellme a model name, engine specs, years\nof production, where this car is made, history, or whatever info you\nhave on this funky looking car, please e-mail.\n```", "```py\ncategories[y_train[0]]\n```", "```py\n'rec.autos'\n```", "```py\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nvectorizer = TfidfVectorizer(stop_words='english')\nX_train_vec = vectorizer.fit_transform(X_train)\n```", "```py\nprint(X_train_vec.shape)\n```", "```py\n(11314, 101322)\n```", "```py\nvocab = vectorizer.get_feature_names_out()\nprint(vocab[50000:50010]) # pick a subset of the tokens\n```", "```py\n['innacurate' 'innappropriate' 'innards' 'innate' 'innately' 'inneficient'\n 'inner' 'innermost' 'innertubes' 'innervation']\n```", "```py\nprint(X_train_vec.nnz / X_train_vec.shape[0])\n```", "```py\n66.802987449178\n```", "```py\nX_test_vec = vectorizer.transform(X_test)\n```", "```py\nfrom sklearn.naive_bayes import MultinomialNB\n\nclf = MultinomialNB(alpha=0.01)\nclf.fit(X_train_vec, y_train)\n```", "```py\nfrom sklearn.metrics import f1_score\n\naccuracy_train = clf.score(X_train_vec, y_train)\ny_train_pred = clf.predict(X_train_vec)\nf1_train = f1_score(y_train, y_train_pred, average='macro')\n\nprint(f'Accuracy (train): {accuracy_train:.4f}')\nprint(f'F1 score (train): {f1_train:.4f}')\n```", "```py\nAccuracy (train): 0.9595\nF1 score (train): 0.9622\n```", "```py\naccuracy_test = clf.score(X_test_vec, y_test)\ny_test_pred = clf.predict(X_test_vec)\nf1_test = f1_score(y_test, y_test_pred, average='macro')\n\nprint(f'Accuracy (test): {accuracy_test:.4f}')\nprint(f'F1 score (test): {f1_test:.4f}')\n```", "```py\nAccuracy (test): 0.7010\nF1 score (test): 0.6844\n```", "```py\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n\ncm = confusion_matrix(y_test, y_test_pred)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=clf.classes_)\nfig, ax = plt.subplots(figsize=(10, 8))\ndisp.plot(ax=ax, cmap='Blues')\n```", "```py\nimport time\n\ndef benchmark(classifiers, names, X_train, y_train, X_test, y_test, verbose=True):\n    evaluations = []\n\n    for clf, name in zip(classifiers, names):\n        evaluation = {}\n        evaluation['classifier'] = name\n\n        start_time = time.time()\n        clf.fit(X_train, y_train)\n        evaluation['training_time'] = time.time() - start_time\n\n        evaluation['accuracy'] = clf.score(X_test, y_test)\n        y_test_pred = clf.predict(X_test)\n        evaluation['f1_score'] = f1_score(y_test, y_test_pred, average='macro')\n\n        if verbose:\n            print(evaluation)\n        evaluations.append(evaluation)\n    return evaluations\n```", "```py\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n\nclassifiers = [clf, LogisticRegression(), KNeighborsClassifier(), RandomForestClassifier(), AdaBoostClassifier()]\nnames = ['Multinomial NB', 'Logistic Regression', 'KNN', 'Random Forest', 'AdaBoost']\n\nevaluations = benchmark(classifiers, names, X_train_vec, y_train, X_test_vec, y_test)\n```", "```py\n{'classifier': 'Multinomial NB', 'training_time': 0.06482672691345215, 'accuracy': 0.7010090281465746, 'f1_score': 0.6844389919212164}\n{'classifier': 'Logistic Regression', 'training_time': 39.38498568534851, 'accuracy': 0.6909187466808284, 'f1_score': 0.6778246092753284}\n{'classifier': 'KNN', 'training_time': 0.003989696502685547, 'accuracy': 0.08218268720127456, 'f1_score': 0.07567337211476842}\n{'classifier': 'Random Forest', 'training_time': 43.847145318984985, 'accuracy': 0.6233404142326076, 'f1_score': 0.6062667217793061}\n{'classifier': 'AdaBoost', 'training_time': 6.09197473526001, 'accuracy': 0.36563993627190655, 'f1_score': 0.40123307742451064}\n```", "```py\ndf = pd.DataFrame(evaluations).set_index('classifier')\n\ndf['accuracy'].plot.barh()\nplt.xlabel('Accuracy (test)')\nplt.ylabel('Classifier')\n```", "```py\ndf['f1_score'].plot.barh(color='purple')\nplt.xlabel('F1 score (test)')\n```", "```py\ndf['training_time'].plot.barh(color='green')\nplt.xlabel('Training time (sec)')\nplt.ylabel('Classifier')\n```", "```py\ndef show_top_n_features(clf, vectorizer, categories, n=10):\n    feature_names = vectorizer.get_feature_names_out()\n\n    for i, category in enumerate(categories):       \n        top_n = np.argsort(clf.feature_log_prob_[i])[-n:]\n        print(f\"{category}: {' '.join(feature_names[top_n])}\")\n```", "```py\nshow_top_n_features(clf, vectorizer, categories) \n```", "```py\nalt.atheism: islam atheists say just religion atheism think don people god\ncomp.graphics: looking format 3d know program file files thanks image graphics\ncomp.os.ms-windows.misc: card problem thanks driver drivers use files dos file windows\ncomp.sys.ibm.pc.hardware: monitor disk thanks pc ide controller bus card scsi drive\ncomp.sys.mac.hardware: know monitor does quadra simms thanks problem drive apple mac\ncomp.windows.x: using windows x11r5 use application thanks widget server motif window\nmisc.forsale: asking email sell price condition new shipping offer 00 sale\nrec.autos: don ford new good dealer just engine like cars car\nrec.motorcycles: don just helmet riding like motorcycle ride bikes dod bike\nrec.sport.baseball: braves players pitching hit runs games game baseball team year\nrec.sport.hockey: league year nhl games season players play hockey team game\nsci.crypt: people use escrow nsa keys government chip clipper encryption key\nsci.electronics: don thanks voltage used know does like circuit power use\nsci.med: skepticism cadre dsl banks chastity n3jxp pitt gordon geb msg\nsci.space: just lunar earth shuttle like moon launch orbit nasa space\nsoc.religion.christian: believe faith christian christ bible people christians church jesus god\ntalk.politics.guns: just law firearms government fbi don weapons people guns gun\ntalk.politics.mideast: said arabs arab turkish people armenians armenian jews israeli israel\ntalk.politics.misc: know state clinton president just think tax don government people\ntalk.religion.misc: think don koresh objective christians bible people christian jesus god\n```"]