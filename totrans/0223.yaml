- en: A Quick Guide to Beautiful Scatter Plots in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/a-quick-guide-to-beautiful-scatter-plots-in-python-75625ae67396](https://towardsdatascience.com/a-quick-guide-to-beautiful-scatter-plots-in-python-75625ae67396)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Visualizing worldwide Life Expectancy vs GPD per capita
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://hair-parra.medium.com/?source=post_page-----75625ae67396--------------------------------)[![Hair
    Parra](../Images/71a377f0415096dc6fb0a10e64b3b28e.png)](https://hair-parra.medium.com/?source=post_page-----75625ae67396--------------------------------)[](https://towardsdatascience.com/?source=post_page-----75625ae67396--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----75625ae67396--------------------------------)
    [Hair Parra](https://hair-parra.medium.com/?source=post_page-----75625ae67396--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----75625ae67396--------------------------------)
    ·9 min read·Jan 12, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/960686bb3dcfd9fced9a5a64ae1af07d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author via Python Matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: 'So you already know some Python and matplotlib. Perhaps you are like me and
    really like sophisticated, beautiful and insightful plots. However, when you encounter
    some basic examples to replicate them yourself, as seen in [this documentation
    page](https://matplotlib.org/stable/gallery/lines_bars_and_markers/scatter_masked.html#sphx-glr-gallery-lines-bars-and-markers-scatter-masked-py),
    you might see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'which generates the following plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1639ccdc8f7156a3a66b6382425a4058.png)'
  prefs: []
  type: TYPE_IMG
- en: 'src: [https://matplotlib.org/stable/gallery/lines_bars_and_markers/scatter_masked.html#sphx-glr-gallery-lines-bars-and-markers-scatter-masked-py](https://matplotlib.org/stable/gallery/lines_bars_and_markers/scatter_masked.html#sphx-glr-gallery-lines-bars-and-markers-scatter-masked-py)'
  prefs: []
  type: TYPE_NORMAL
- en: While very colourful, this plot is rather simple and not very insightful, and
    the code does explain its purpose. In this article, I would like to show you how
    to create beautiful, insightful scatter plots like the one you saw at the beginning
    of this article.
  prefs: []
  type: TYPE_NORMAL
- en: The notebook with code for this tutorial [can be found here](https://colab.research.google.com/drive/1jJd7fjS_1T5OhOVBdb8nhkQPF7KXBgh0?usp=sharing),
    and the dataset we will be using can be found in [this link](https://ourworldindata.org/grapher/life-expectancy-vs-gdp-per-capita).
    Note that in this tutorial, I have mounted data in the drive, so you could either
    [do the same](https://medium.com/geekculture/how-to-load-a-dataset-from-the-google-drive-to-google-colab-67d0478bc634),
    or download the data locally and run a Jupyter Notebook instead. For convenience,
    you can also download the data from [my GitHub](https://github.com/JairParra/Introduction-to-Data-Science/blob/main/datasets/life-expectancy-vs-gdp-per-capita.csv).
  prefs: []
  type: TYPE_NORMAL
- en: Imports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I will be using Google Colab on this example, you will see specific Colab
    drive imports. However, if you are doing this locally, you can skip these. Since
    we will also be doing some basic data cleaning and linear regression, I have also
    imported some Scikit-learn classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dataset: Life Expectancy vs GPD per capita'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this example, we are going to use the **Life Expectancy vs GDP per capita**
    dataset, which is available at [https://ourworldindata.org/](https://ourworldindata.org/).
    Once you’ve grabbed the data and you’re able to read the file, let’s examine the
    steps we will take to analyze it:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Examine the data and rename the columns for convenience
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract rows/datapoints that have a value for GDP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visualize the population distribution
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Constructing the plotting function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plotting the data, beautifully!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let’s load and examine our data. We load the data using the correct data
    path using Pandas (wherever you placed it), and we rename some columns for convenience.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting data should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49465a0602e6c8025a83c07f61707aab.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot by author — generated using Python Pandas on Colab
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Notice that many data points have `Nan` for the `GDP` column, and also for
    the `Population`column. Since we cannot have an analysis on missing values, we
    are going to remove them from our data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After having cleaned the GDP and selected the 2018 year (you can verify yourself
    there is no data with GDP for further years!), our data will look like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c6dabe6dacceab57eac04a3a80002214.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot by author — generated using Python Pandas on Colab
  prefs: []
  type: TYPE_NORMAL
- en: Note that we also excluded the data point `World` from our analysis since this
    contains an aggregate of all countries (feel free to include it and see how the
    final plot changes! ).
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the Population distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Notice that the population values are given in millions. Further in the plot,
    in order to add different colors to different thresholds of population numbers,
    we would like to see what its distribution looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/325a20dd9815db4b5997a79157120705.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author via Python Matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: 'Oops! This tells us that most countries have a population between 0.0 and 0.2^
    1e9 = 200 000 000 (200 millions) , and some countries have more than ~1200 millions.
    Since there is a bigger density on the left (more countries with fewer people),
    we can ignore the high-population countries and produce a histogram focused on
    the left countries:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/01e779712bf925b487954655d3bc8c39.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author via Python Matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: Much better! We will use this to create approximate values to colour-code countries
    with different population densities.
  prefs: []
  type: TYPE_NORMAL
- en: Constructing the Plotting Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this part, we will perform a couple of sub-steps, as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: Function Definition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will define our function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the three parameters: `df` , which is our data after initial pre-processing,
    `apply_color` to colour-code the population density, and `regression` to apply
    regression to the plot.'
  prefs: []
  type: TYPE_NORMAL
- en: Filling missing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our data still contains a couple of NaN values for important columns of interest,
    namely `["Expectancy", "GDP", "Population"]` . Although we could drop the rows
    with NaNs, a better idea here is to fill them with an “educated guess” instead.
    Popular options are the mean or median of the column, but here we will use a machine
    learning algorithm called **K** **Nearest Neighbours** (KNN) instead. If you are
    not familiar with it, you can read up on it [here](https://www.ibm.com/topics/knn).
    For our purposes,all it does is that it will essentially fill up the missing values
    by using the top N most-similar country entries based on the available attributes
    (say Expectancy and GDP) to predict the Population value, and using the average
    value of those.
  prefs: []
  type: TYPE_NORMAL
- en: '**Aggregating the data**'
  prefs: []
  type: TYPE_NORMAL
- en: Although the data here is only for 2018, given a better daset, you could extend
    this analysis to more years. That’s why we also **aggregate the data** to make
    sure all the years are taken into account. This is done using Pandas `groupby(),`
    choosing the `"Country"` column as the argument. Additionally, we also round the
    data beforehand to reduce the number of decimals.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting Plot Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once again for the sake of convenience, we will reassign the columns to individual
    variables. Note that you could simply query the dataframe directly. An important
    step here, however, is that we will scale the `Population` column by a factor
    of a million and multiply by 2\. This will control the size of the dots when plotting
    the scatter plot.
  prefs: []
  type: TYPE_NORMAL
- en: Perform Regression
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An optional part of our plot is to draw a very nice line that follows the mean
    of all the different points which represent each of the country’s GDP vs their
    respective life expectancy. This will give us a way to quickly evaluate at glance
    the status of individual countries with respect to the general trend. For this,
    you could use Scikit-learn’s `ElasticSearchCV` , which is essentially linear regression
    which mixes Lasso and Ridge regression, adding regularization for a more robust
    fit. You can read about it in [the Wikipedia article](https://en.wikipedia.org/wiki/Elastic_net_regularization)
    and also see the corresponding [Scikit-learn documentation](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ElasticNetCV.html).
    Additionally, the CV stands for “Cross Validation”, which is a common technique
    in machine learning to reduce variance in your models. You can read more about
    it [here](https://medium.com/analytics-vidhya/understanding-cross-validation-for-beginners-31e0c606ebe0#:~:text=What%20is%20Cross%20Validation%3F,see%20how%20well%20it%20does.).
    The code is as follows (notice the `regression` parameter):'
  prefs: []
  type: TYPE_NORMAL
- en: After initializing the algorithm, we format the data into the correct format
    (here, the X argument are the predictive features, and y is the target), and then
    fit the regression model. Then, we produce predictions, and finally, arrange them
    in the right format. Note that we also trim the predictions for datapoints where
    the predictions are less than 90, so that the plot doesn’t go out bounds.
  prefs: []
  type: TYPE_NORMAL
- en: Start the plot, colour-code and add point density
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are now ready to start plotting. The first step, is to **colour-code** the
    population density points for each country in our data. We assign a different
    colour depending on the number of people, and only apply this if the argument
    `apply_color=True` . Remember the histogram we plotted before? If we take a look
    at the boundary values of the bins, we can come up with some nice bounds for the
    population, and give it an appropriate colour (of course, these are the colours
    that make sense to me, but feel free to choose whatever colours you want!).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we start the plot with `plt.figure()`and call the `plt.scatter()` method,
    depending on whether we want to colour code or not:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: The `s` argument will take a vector with real values, and will modify the resulting
    dot size accordingly. Therefore we assign the `population` variable, which already
    contains the appropriate scaling for each value ofr that country proportional
    to its number of people. The higher the population, the bigger the dot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `c` argument will apply the corresponding colour to each point, which is
    what we assigned to the dataframe before.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `alpha` argument will change the transparency of the dots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, we can also annotate the points with high population density,
    which we can do using the `plt.annotate()` method. In order to obtain the corresponding
    country names, we subset such records and retrieve their corresponding coordinates,
    and then pass them to the method.
  prefs: []
  type: TYPE_NORMAL
- en: Note the `+0.3` in the y-coordinate; this is to move the text a bit away from
    the point so it doesn’t overlap.
  prefs: []
  type: TYPE_NORMAL
- en: Regression Line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we add the regression line using `reg.plot()` using the `reg_data` that
    we created before. This line represents a sort of average life expectancy given
    the GDP per capita of some country, which we can use as a baseline to compare
    the relative status of other countries.
  prefs: []
  type: TYPE_NORMAL
- en: The `ls='--'` argument specifies line style. Note also that we are using as
    plotting arguments the GDP data ( `reg_data["X"]` ) and the corresponding predictions.
  prefs: []
  type: TYPE_NORMAL
- en: Finish the plot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s finish up the code for our plot:'
  prefs: []
  type: TYPE_NORMAL
- en: In the first part we add a label for the x-axis (GDP per capita), for the y-axis
    (Life Expectancy), and give our plot an appropriate title. Additionally, we display
    the x values in log scale, as it provides a prettier and more insightful plot
    (try removing it and see what happens!).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create the labels for the different colours. As Matplotlib creates
    the labels all at once, in order to create a label with the appropriate color
    and name, we create four corresponding “ghost” lines, which will not do anything
    on the final plot, but will provide a colour-coded label instead.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we create the legend and display our plot.
  prefs: []
  type: TYPE_NORMAL
- en: All together
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ve come a long way. This is what the function looks like altogether:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s test it out!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e1dc42c546fd2539a3a23caf117bfb8e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author using Python
  prefs: []
  type: TYPE_NORMAL
- en: Not bad at all! At glance, we can see all the different world countries life
    expectancy with respect to their GDP per capita, and their corresponding life
    expectancy measurements. Additionally, we can also see the name of some countries
    with a relatively big number of people.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also set `apply_color=True` to distinguish between population densities
    and produce the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/17cd2651774c3b30ed9d04f448a8e03f.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot by author using Python
  prefs: []
  type: TYPE_NORMAL
- en: Just how beautiful that looks! We can now clearly see different magnitudes of
    population density easily thanks to the colour-coding.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let’s add the regression line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0ad91d393fafa3e3c02176928dbe0bc8.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot by author using Python on Google Colab
  prefs: []
  type: TYPE_NORMAL
- en: And that’s it! We have now successfully generated the plot that you saw at the
    beginning of the article. Just by looking at the plot, we can tell at glance which
    countries had a life expectancy higher than the average relative to their GDP
    in 2018, by checking which countries lie above and beyond the regression line.
    Note that the actual regression line is a line (duh!) and not a curve, but because
    we are working in log-scale, it seems to be a curve instead, as the values are
    changed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Last words**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Beautiful, informative plots are an art, and while some libraries will definitely
    facilitate your learning; it’s never a bad idea to improve on the basics and become
    learn a couple of new tricks.
  prefs: []
  type: TYPE_NORMAL
- en: I hope that this article was interesting to you, and if so, make sure to check
    some of my other popular articles & series!
  prefs: []
  type: TYPE_NORMAL
- en: Data Science Basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](/the-data-science-trilogy-numpy-pandas-and-matplotlib-basics-42192b89e26?source=post_page-----75625ae67396--------------------------------)
    [## The Data Science Trilogy: NumPy, Pandas and Matplotlib basics'
  prefs: []
  type: TYPE_NORMAL
- en: So you are new to Python. Or perhaps you are already familiar with these libraries,
    but wanted to get a quick…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/the-data-science-trilogy-numpy-pandas-and-matplotlib-basics-42192b89e26?source=post_page-----75625ae67396--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: GIT Basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/analytics-vidhya/quick-git-is-all-you-need-6f6efd41b7c2?source=post_page-----75625ae67396--------------------------------)
    [## Quick GIT is all you NEED'
  prefs: []
  type: TYPE_NORMAL
- en: Okay, so you have come here because you want to learn Git/Github. So instead
    of writing a 10 lines paragraph about it…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/analytics-vidhya/quick-git-is-all-you-need-6f6efd41b7c2?source=post_page-----75625ae67396--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Functional Programming in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/analytics-vidhya/going-functional-in-python-with-code-b50ba7742469?source=post_page-----75625ae67396--------------------------------)
    [## Going Functional in Python (with code)'
  prefs: []
  type: TYPE_NORMAL
- en: Ever heard about functional programming, but didn’t understand it and/or didn’t
    know where to start? Or maybe you would…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/analytics-vidhya/going-functional-in-python-with-code-b50ba7742469?source=post_page-----75625ae67396--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Intro to Time Series Analysis in R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/analytics-vidhya/a-complete-introduction-to-time-series-analysis-with-r-9882f2d44c9d?source=post_page-----75625ae67396--------------------------------)
    [## A Complete Introduction To Time Series Analysis (with R)'
  prefs: []
  type: TYPE_NORMAL
- en: During these times of the Covid19 pandemic, you have perhaps heard about the
    collaborative efforts to predict new…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/analytics-vidhya/a-complete-introduction-to-time-series-analysis-with-r-9882f2d44c9d?source=post_page-----75625ae67396--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The data used for this analysis and its original analysis was done by **Our
    World in Data,** and can be found at [https://ourworldindata.org/grapher/life-expectancy-vs-gdp-per-capita](https://ourworldindata.org/grapher/life-expectancy-vs-gdp-per-capita),
    where the following source is cited:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Madison Project Database (2020); UN WPP (2022); Zijdeman et al. (2015)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'From their page:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“Licenses: All visualizations, data, and articles produced by Our World in
    Data are open access under the* [*Creative Commons BY license*](https://creativecommons.org/licenses/by/4.0/)*.
    You have permission to use, distribute, and reproduce these in any medium, provided
    the source and authors are credited.”*'
  prefs: []
  type: TYPE_NORMAL
- en: See [https://ourworldindata.org/about#legal](https://ourworldindata.org/about#legal)
  prefs: []
  type: TYPE_NORMAL
- en: Follow me at
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://www.linkedin.com/in/hair-parra-526ba19b/](https://www.linkedin.com/in/hair-parra-526ba19b/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/JairParra](https://github.com/JairParra)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://medium.com/@hair.parra](https://medium.com/@hair.parra)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
