- en: Introduction to Apache Iceberg Tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/introduction-to-apache-iceberg-tables-a791f1758009](https://towardsdatascience.com/introduction-to-apache-iceberg-tables-a791f1758009)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A few Compelling Reasons to Choose Apache Iceberg for Data Lakes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://mshakhomirov.medium.com/?source=post_page-----a791f1758009--------------------------------)[![💡Mike
    Shakhomirov](../Images/bc6895c7face3244d488feb97ba0f68e.png)](https://mshakhomirov.medium.com/?source=post_page-----a791f1758009--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a791f1758009--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a791f1758009--------------------------------)
    [💡Mike Shakhomirov](https://mshakhomirov.medium.com/?source=post_page-----a791f1758009--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a791f1758009--------------------------------)
    ·8 min read·Apr 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8757d57a9e2fc3aae50cadf617507568.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Annie Spratt](https://unsplash.com/@anniespratt?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '**Apache Iceberg**: What is it? Apache Iceberg — is it a new data lake file
    format? A table format? Why is it so good? Time travel for data lakes?'
  prefs: []
  type: TYPE_NORMAL
- en: I will try to answer all these questions in this story.
  prefs: []
  type: TYPE_NORMAL
- en: Transactionally consistent data lake tables with point-in-time snapshot isolation
    is all we need.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Selecting a table format is a crucial choice for anybody pursuing a data lake
    or data mesh strategy. Some important data lake platform features to consider
    include **schema evolution support,** **read and write time**, **scalability**
    (is data processing Hadoop splittable?), **compression** efficiency and **time
    travel** to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right file and table format based on business requirements will
    define how fast and cost-effective your data platform might be.
  prefs: []
  type: TYPE_NORMAL
- en: '**Iceberg** is a ***table format***, engine and file format agnostic. Iceberg
    is not, in general, a development of a previous technology like **Apache Hive**.
    And it is a good thing, because developing something from an older technology
    might be limiting. A good example is how schema can change over time, and Iceberg
    can help to handle this as simply as renaming a column. ***It was designed and
    is proven to perform in data lake platforms at scale on the world’s most demanding
    workloads.***'
  prefs: []
  type: TYPE_NORMAL
- en: More and more data tools introduce Iceberg tables support.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For instance, we can create an Apache Iseberg table in AWS Athena (must be
    engine 3) like so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Google’s BigQuery now also supports Iceberg tables:'
  prefs: []
  type: TYPE_NORMAL
- en: Iceberg tables and data platform types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Netflix created Iceberg originally, and it was supported and donated to the
    Apache Software Foundation eventually. Now, Iceberg is developed independently,
    it is a completely non-profit, open-source project and is focused on dealing with
    challenging data platform architectures.
  prefs: []
  type: TYPE_NORMAL
- en: It supports multiple big data file formats, including Apache Avro, Apache Parquet,
    and Apache ORC.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping data in the data lake is one the most simple solutions when we design
    the data platform.
  prefs: []
  type: TYPE_NORMAL
- en: It requires much less maintenance compared to modern data warehouse solutions.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data lakes are typically used to store all types of data — structured and unstructured
    — at any size. Data lakes were traditionally connected with the Apache Hadoop
    Distributed File System (HDFS). However, organizations are increasingly using
    object storage solutions such as Amazon S3, Google Cloud Storage or Microsoft
    Azure Data Lake Storage.
  prefs: []
  type: TYPE_NORMAL
- en: In a few words, data lakes simplify data management by centralizing the data.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Opposite to that, when every access is routed through a single system ( data
    warehouse), it simplifies concurrency management and updates but limits flexibility
    and raises costs. I previously wrote about it here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/data-platform-architecture-types-f255ac6e0b7?source=post_page-----a791f1758009--------------------------------)
    [## Data Platform Architecture Types'
  prefs: []
  type: TYPE_NORMAL
- en: How well does it answer your business needs? Dilemma of a choice.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/data-platform-architecture-types-f255ac6e0b7?source=post_page-----a791f1758009--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: It is all great but while building a data lake data platform we might face some
    other issues as well, i.e. no time travel, no schema evolution support, and complexity
    of data transformation and data definition.
  prefs: []
  type: TYPE_NORMAL
- en: When we build a data lake data platform, external tables will most likely bring
    the whole set of cons related to that architecture… but Iceberg helps to solve
    this.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**At least some well-known limitations of traditional external tables:**'
  prefs: []
  type: TYPE_NORMAL
- en: For example, we **can’t modify them with DML statements and data consistency
    is not guaranteed.** Having said that, if the underlying data was changed during
    the processing we might not get consistent results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have usually a **limited number of concurrent queries** in modern data warehouses,
    i.e. 4 in BigQuery.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: External tables **do not work with clustering** and will not let export data
    from them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will not let us use wildcards to reference table names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No time travel features**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From my experience, data consistency is one of the most important features large-scale
    analytics would require. Iceberg solves it and now multiple engines ( Spark, Hive,
    Presto, Dremio, etc.) can operate on the same table simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: It also offers many other brilliant features such as rollback to the previous
    table version (to quietly resolve issues), and advanced data filtering capabilities
    at scale when processing huge amounts of data.
  prefs: []
  type: TYPE_NORMAL
- en: Data consistency and improved processing efficiency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A good example is when an ETL process modifies the dataset by adding and deleting
    files from storage, another application reading the dataset may process a partial
    or inconsistent representation of the dataset and produce inaccurate results.
  prefs: []
  type: TYPE_NORMAL
- en: Iceberg would typically mitigate these risks by leveraging lots of manifest
    (metadata) files to take snapshots along the way the data is being processed.
    It will capture schemas and maintain deltas, including file information and partitioning
    data to guarantee consistency and complete isolation.
  prefs: []
  type: TYPE_NORMAL
- en: Iceberg also automatically arranges snapshot metadata in a hierarchical manner
    which ensures quick and efficient table modifications without redefining all dataset
    files, resulting in optimal performance while working at data lake scale.
  prefs: []
  type: TYPE_NORMAL
- en: Iceberg offers SQL commands that allow you to combine new data (MERGE), change
    old rows, and remove specific rows.
  prefs: []
  type: TYPE_NORMAL
- en: Iceberg can eagerly rebuild data files to improve read performance or employ
    delete deltas to speed up updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good merge example can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/advanced-sql-techniques-for-beginners-211851a28488?source=post_page-----a791f1758009--------------------------------)
    [## Advanced SQL techniques for beginners'
  prefs: []
  type: TYPE_NORMAL
- en: On a scale from 1 to 10 how good are your data warehousing skills?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/advanced-sql-techniques-for-beginners-211851a28488?source=post_page-----a791f1758009--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Another one which can be applied to that AWS Athena table above is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2ddfd9ebb83759959e340d702256c0e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Time travel feature
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Modern data warehouses allow to time travel in your data, i.e. we can go to
    a specific timestamp to get that particular state of data in our table. For instance,
    in Google Cloud BigQuery we can run this SQL below to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It might be a “nice-to-have” feature for data lake platforms as well.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you design a data architecture around files, such as Apache ORC or Apache
    Parquet, you will profit from ease of implementation, but you will also run into
    that issue described above. Time travel is not supported. Schema evolution has
    always been a problem too. When fields change over time it might be a problem.
    For instance, AVRO file format has schema evolution support and I previously wrote
    about big data file formats’ pros and cons here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/big-data-file-formats-explained-275876dc1fc9?source=post_page-----a791f1758009--------------------------------)
    [## Big Data File Formats, Explained'
  prefs: []
  type: TYPE_NORMAL
- en: Parquet vs ORC vs AVRO vs JSON. Which one to choose and how to use them?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/big-data-file-formats-explained-275876dc1fc9?source=post_page-----a791f1758009--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Iceberg keeps the whole history within the Iceberg table format, with no storage
    system dependencies.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Iceberg table users may query past states at any Iceberg snapshot or historical
    point in time for consistent results, comparison, or rollback to remedy errors
    since the historical state is immutable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Schema evolution support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It’s not a secret that data lake files might change over time, as well as their
    schemas. Adding a column in the Iceberg table now will not return “dead” data.
  prefs: []
  type: TYPE_NORMAL
- en: Column names and the order can be changed. The best part is that schema updates
    never need to rebuild your table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Iceberg allows for in-place table changes and it ensures correctness, i.e. new
    columns added never read existing values from another column. When data volume
    varies, we now can modify partition layout or change a table schema just using
    SQL, even for nested structures, i.e.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is what Iceberg calls Partition evolution.
  prefs: []
  type: TYPE_NORMAL
- en: When you modify a partition specification, the existing data written with an
    earlier specification remains unaffected.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Each partition version’s metadata is saved separately. Iceberg does not require
    expensive diversions such as rewriting table data or moving to a new table.
  prefs: []
  type: TYPE_NORMAL
- en: Improved partitioning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Iceberg terms it is called “Hidden partitions”. The traditional data lake
    way of using partitions is called “Hive partitioning layout”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s consider an external table with Hive partitioning layout in BigQuery:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Partitions must be explicit in Hive and are shown as columns, thus the `**user_transactions**`
    table would contain a `**dt**` date column. This means that all SQL queries that
    do something with our table will have to have `**dt**` filter in addition to a
    `**timestamp**` filter.
  prefs: []
  type: TYPE_NORMAL
- en: Hive requires partition values. It does not understand the link between the
    transaction timestamp and `dt` in our table example above.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Oppositely**, Iceberg generates partition values by taking a column value
    and, if needed, modifying it. Iceberg is in charge of translating transaction
    **`timestamp**` to `**dt**` and maintaining the connection. Iceberg may hide partitioning
    since it does not require user-maintained partition columns.'
  prefs: []
  type: TYPE_NORMAL
- en: Partition values are always created appropriately and utilized to speed up queries
    wherever possible.
  prefs: []
  type: TYPE_NORMAL
- en: '`dt` would be invisible to both producers and consumers and queries no longer
    rely on the actual physical layout of our table.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'It helps to avoid partitioning errors while transforming the data. For example,
    using the wrong date format, led to incorrect partitioning, not failures: `**20230101**`
    instead of `**2023–01–01**`. ***This is a well-known and most common problem with
    Hive partitioning payout.*** Another problem that Iceberg helps to solve is that
    in Hive partitioning layout all working queries are related to the table’s partitioning
    scheme, therefore changing the partitioning setup will break queries.'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Relational databases and data warehouses both support atomic transactions and
    time travel but they do it in their proprietary way. Iceberg, being an Apache
    project, is completely open source and not reliant on any specific tools or data
    lake engines.
  prefs: []
  type: TYPE_NORMAL
- en: Iceberg supports industry-standard file formats like Parquet, ORC, and Avro
    and is compatible with key data lake engines such as Dremio, Spark, Hive, and
    Presto. Its wide community collaboration generates new ideas and provides assistance
    in the long term. It features various active communities, such as public Slack
    channels, in which everyone is free and welcome to participate. It was designed
    and is proven to perform in data lake platforms at scale on the world’s largest
    workloads and environments.
  prefs: []
  type: TYPE_NORMAL
- en: Organizations now can enjoy the full potential and advantages of moving to a
    data lake architecture by utilizing Iceberg. Feel the cost-effectiveness of cloud
    storage-based data platforms with no need to sacrifice the features and capabilities
    of traditional databases and data warehouse solutions.
  prefs: []
  type: TYPE_NORMAL
- en: It makes our data lake platform really flexible and reliable
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**To conclude these are the benefits of the Iceberg table format:**'
  prefs: []
  type: TYPE_NORMAL
- en: Several separate programs can handle the same dataset concurrently and consistently.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved data processing and data reliability (more efficient updates for very
    large data lake-scale tables).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved schema handling as it evolves over time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ETL pipelines are greatly simplified (By acting on data in place in the data
    lake rather than transporting data between numerous separate systems).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Recommended read:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1\. [https://cloud.google.com/bigquery/docs/time-travel](https://cloud.google.com/bigquery/docs/time-travel)
  prefs: []
  type: TYPE_NORMAL
- en: 2\. [https://www.apache.org/](https://www.apache.org/)
  prefs: []
  type: TYPE_NORMAL
- en: 3\. [https://hive.apache.org/](https://hive.apache.org/)
  prefs: []
  type: TYPE_NORMAL
- en: 4\. [https://iceberg.apache.org/community/](https://iceberg.apache.org/community/)
  prefs: []
  type: TYPE_NORMAL
- en: 5\. [https://cloud.google.com/bigquery/docs/iceberg-tables](https://cloud.google.com/bigquery/docs/iceberg-tables)
  prefs: []
  type: TYPE_NORMAL
- en: 6\. [https://medium.com/towards-data-science/data-platform-architecture-types-f255ac6e0b7](https://medium.com/towards-data-science/data-platform-architecture-types-f255ac6e0b7)
  prefs: []
  type: TYPE_NORMAL
- en: 7\. [https://medium.com/towards-data-science/big-data-file-formats-explained-275876dc1fc9](https://medium.com/towards-data-science/big-data-file-formats-explained-275876dc1fc9)
  prefs: []
  type: TYPE_NORMAL
- en: 8\. [https://iceberg.apache.org/docs/latest/evolution/](https://iceberg.apache.org/docs/latest/evolution/)
  prefs: []
  type: TYPE_NORMAL
- en: 9\. [https://iceberg.apache.org/docs/latest/partitioning/#icebergs-hidden-partitioning](https://iceberg.apache.org/docs/latest/partitioning/#icebergs-hidden-partitioning)
  prefs: []
  type: TYPE_NORMAL
- en: 10\. [https://cloud.google.com/bigquery/docs/external-data-cloud-storage#sql](https://cloud.google.com/bigquery/docs/external-data-cloud-storage#sql)
  prefs: []
  type: TYPE_NORMAL
