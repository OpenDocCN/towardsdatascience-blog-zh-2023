- en: How to Extract Text from Any PDF and Image for Large Language Model
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何从任何PDF和图像中提取文本以用于大型语言模型
- en: 原文：[https://towardsdatascience.com/how-to-extract-text-from-any-pdf-and-image-for-large-language-model-2d17f02875e6](https://towardsdatascience.com/how-to-extract-text-from-any-pdf-and-image-for-large-language-model-2d17f02875e6)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-extract-text-from-any-pdf-and-image-for-large-language-model-2d17f02875e6](https://towardsdatascience.com/how-to-extract-text-from-any-pdf-and-image-for-large-language-model-2d17f02875e6)
- en: Use these text extraction techniques to get quality data for your LLM models
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用这些文本提取技术为您的LLM模型获取高质量数据
- en: '[](https://zoumanakeita.medium.com/?source=post_page-----2d17f02875e6--------------------------------)[![Zoumana
    Keita](../Images/34a15c1d03687816dbdbc065f5719f80.png)](https://zoumanakeita.medium.com/?source=post_page-----2d17f02875e6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2d17f02875e6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2d17f02875e6--------------------------------)
    [Zoumana Keita](https://zoumanakeita.medium.com/?source=post_page-----2d17f02875e6--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://zoumanakeita.medium.com/?source=post_page-----2d17f02875e6--------------------------------)[![Zoumana
    Keita](../Images/34a15c1d03687816dbdbc065f5719f80.png)](https://zoumanakeita.medium.com/?source=post_page-----2d17f02875e6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2d17f02875e6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2d17f02875e6--------------------------------)
    [Zoumana Keita](https://zoumanakeita.medium.com/?source=post_page-----2d17f02875e6--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2d17f02875e6--------------------------------)
    ·7 min read·Jul 25, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----2d17f02875e6--------------------------------)
    ·阅读时间7分钟·2023年7月25日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/b75ec7ee88027665b818561aad71953d.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b75ec7ee88027665b818561aad71953d.png)'
- en: Image by [Patrick Tomasso](https://unsplash.com/@impatrickt) on [Unsplash](https://unsplash.com/photos/Oaqk7qqNh_c)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自[Patrick Tomasso](https://unsplash.com/@impatrickt)的[Unsplash](https://unsplash.com/photos/Oaqk7qqNh_c)
- en: Motivation
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动机
- en: 'Large language models have taken the internet by storm, leading more people
    to not pay close attention to the most important part of using these models: quality
    data!'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 大型语言模型已在互联网引起轰动，导致更多的人忽视使用这些模型最重要的部分：高质量的数据！
- en: This article aims to provide a few techniques to efficiently extract text from
    any type of document. After completing this tutorial, you will have a clear idea
    of which tool to use depending on your use case.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本文旨在提供一些从任何类型的文档中高效提取文本的技术。完成本教程后，您将对根据使用情况选择工具有一个清晰的了解。
- en: Full Video Explanation on YouTube
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: YouTube上的完整视频讲解
- en: The Python Libraries
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python库
- en: This article focuses on the Pytesseract, easyOCR, PyPDF2, and LangChain libraries.
    The experimentation data is a one-page PDF file and is freely available on my
    [GitHub](https://github.com/keitazoumana/Experimentation-Data/blob/main/Experimentation_file.pdf).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本文重点介绍了Pytesseract、easyOCR、PyPDF2和LangChain库。实验数据是一个单页PDF文件，可以在我的[GitHub](https://github.com/keitazoumana/Experimentation-Data/blob/main/Experimentation_file.pdf)上自由获取。
- en: Both Pytesseract and easyOCR work with images hence requiring converting the
    PDF files into images before performing the content extraction.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Pytesseract和easyOCR都处理图像，因此需要在执行内容提取之前将PDF文件转换为图像。
- en: 'The conversion can be done using the `pypdfium2` which is a powerful library
    for PDF file processing, and it is implementation is given below:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 转换可以使用`pypdfium2`完成，这是一种强大的PDF文件处理库，下面给出了实现方法：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This function takes a PDF as input and returns a list of each page of the PDF
    as a list of images.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数以PDF作为输入，并返回PDF每一页的图像列表。
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, we can use the `display_images` function to visualize all the pages of
    the PDF file.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用`display_images`函数来可视化PDF文件的所有页面。
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'By combining the above two functions, we can get the following result:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结合上述两个函数，我们可以得到以下结果：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/a403ee31eaf0a83985388989519bd1fb.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a403ee31eaf0a83985388989519bd1fb.png)'
- en: Visualization of the PDF in image format (Image by Author)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以图像格式可视化PDF（图片来自作者）
- en: Now it is time to dive deep into the text extraction process!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是深入探索文本提取过程的时候了！
- en: Pytesseract
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pytesseract
- en: 'Pytesseract (Python-tesseract) is an OCR tool for Python used to extract textual
    information from images, and the installation is done using the `pip` command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Pytesseract（Python-tesseract）是一个用于从图像中提取文本信息的Python OCR工具，安装可以使用`pip`命令：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The following helper function uses the `image_to_string()` function from `Pytesseract`
    to extract the text from the input image.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下辅助函数使用`Pytesseract`的`image_to_string()`函数从输入图像中提取文本。
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The text can be extracted using the `extract_text_with_pytesseract` function
    as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 文字可以使用`extract_text_with_pytesseract`函数提取，如下所示：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Successful execution of the above code generates the following result:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的成功执行会生成以下结果：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`Pytesseract` was able to extract the content of the image.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pytesseract`能够提取图像的内容。'
- en: Here is how it managed to do it!
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 下面是它如何完成这个任务的！
- en: '`Pytesseract` starts by identifying rectangular shapes within the input image
    from top-right to bottom-right. Then it extracts the content of the individual
    images, and the final result is the concatenation of those extracted content.
    This approach works perfectly when dealing with column-based PDFs and image documents.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pytesseract`通过识别输入图像中的矩形形状，从右上角到右下角开始。然后提取各个图像的内容，最终结果是这些提取内容的串联。这种方法在处理基于列的PDF和图像文档时效果很好。'
- en: easyOCR
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: easyOCR
- en: This is also an open-source Python library for Optical Character Recognition
    and currently supports the extraction of text written in over 80 languages. `easyocr`
    requires both `Pytorch` and `OpenCV` which can be installed using the below instruction.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是一个用于光学字符识别的开源Python库，目前支持提取80多种语言的文本。`easyocr`需要同时安装`Pytorch`和`OpenCV`，可以使用以下说明进行安装。
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Depending on your OS, the installation of the Pytorch module might be different.
    But all the instructions can be found on the [official page](https://pytorch.org/).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的操作系统，Pytorch模块的安装可能会有所不同。但所有说明都可以在[官方页面](https://pytorch.org/)找到。
- en: Now comes the installation of the `easyocr` library.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在进行`easyocr`库的安装。
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It is important to specify the language of the document we are working with
    when using `easyocr` because of its multilanguage nature. Setting the language
    is done through its `Reader` module, by specifying the list of languages.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`easyocr`时，指定我们正在处理的文档语言是很重要的，因为它支持多种语言。通过其`Reader`模块指定语言列表来设置语言。
- en: For instance, `fr` for French, `en` for English. The exhaustive list of languages
    is available [here](https://www.jaided.ai/easyocr/).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`fr`表示法语，`en`表示英语。完整的语言列表可在[这里](https://www.jaided.ai/easyocr/)查看。
- en: With all this in mind, let's get into the process!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，让我们开始这个过程吧！
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The text extraction process is implemented in the `extract_text_with_easyocr`
    function:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 文本提取过程在`extract_text_with_easyocr`函数中实现：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can execute the above function as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下方式执行上述函数：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/79c085ae0f30e61fdd3369d3316ffee8.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/79c085ae0f30e61fdd3369d3316ffee8.png)'
- en: EasyOCR result (Image by Author)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: EasyOCR 结果（作者提供的图像）
- en: The result of `easyocr` seems less efficient compared to `Pytesseract` . For
    instance, it was able to efficiently read the first two paragraphs. However, instead
    of considering each bloc of text a separate text, it is reading using a row-based
    approach. For instance, the string ***Data Science section covers basic to advanced***
    from the first bloc has been combined with ***overfitting when training computer
    vision*** from the second bloc, and this kind of combination completely disorganizes
    the structure of the text and biases the end result.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 相比于`Pytesseract`，`easyocr`的结果似乎效率较低。例如，它能够高效地读取前两段文字。然而，它没有将每一块文本视为独立的文本，而是使用基于行的方法进行读取。例如，来自第一块的字符串***Data
    Science section covers basic to advanced***与来自第二块的***overfitting when training
    computer vision***结合在一起，这种组合完全打乱了文本结构，并偏离了最终结果。
- en: PyPDF
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PyPDF
- en: '`PyPDF2` is also a Python library specifically for PDF processing tasks such
    as text and metadata retrieval, merging, cropping, etc.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`PyPDF2`也是一个专门用于PDF处理任务的Python库，例如文本和元数据检索、合并、裁剪等。'
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The extraction logic is implemented in the `extract_text_with_pyPDF` function:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 提取逻辑在`extract_text_with_pyPDF`函数中实现：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](../Images/11cf6ca1c6763b3f336c2f365c177b1f.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/11cf6ca1c6763b3f336c2f365c177b1f.png)'
- en: Text extraction with PyPDF library (Image by Author)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PyPDF库的文本提取（作者提供的图像）
- en: The extract process is fast and accurate, and it even keeps the original font
    size. The main issue with PyPDF is that it can not efficiently extract text from
    images.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 提取过程快速且准确，并且甚至保留了原始字体大小。PyPDF的主要问题是无法高效地从图像中提取文本。
- en: LangChain
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LangChain
- en: The `UnstructuredImageLoader` and `UnstructuredFileLoader` modules from [langchain](https://python.langchain.com/docs/get_started/introduction.html)
    can be used to extract text from images and text/pdf files respectively, and both
    options will be explored in this section.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 [langchain](https://python.langchain.com/docs/get_started/introduction.html)
    的 `UnstructuredImageLoader` 和 `UnstructuredFileLoader` 模块可用于分别从图像和文本/pdf 文件中提取文本，这两个选项将在本节中进行探讨。
- en: 'But, first, we need to install the `langchain` library as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，首先，我们需要按照以下步骤安装 `langchain` 库：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Text extraction from an image
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从图像中提取文本
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The text extraction function is given below:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 文本提取函数如下所示：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, we can extract the content:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以提取内容了：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![](../Images/1371ef3704faac52caa42c8463480576.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1371ef3704faac52caa42c8463480576.png)'
- en: Text extraction from langchain UnstructuredImageLoader (Image by Author)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从 langchain UnstructuredImageLoader 提取文本（图像来源：作者）
- en: The library managed to efficiently extract the content of the image.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 该库成功地从图像中提取了内容。
- en: Text extraction from a PDF
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从 PDF 中提取文本
- en: Below is the implementation for content extraction from PDF.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从 PDF 中提取内容的实现。
- en: '[PRE20]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Similarly to the `PyPDF` module, langchain module is capable of generating accurate
    results while keeping the original font size.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `PyPDF` 模块类似，`langchain` 模块能够在保持原始字体大小的同时生成准确的结果。
- en: '![](../Images/b3b54f052fe3aa01c4fe997a8ce5e481.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b3b54f052fe3aa01c4fe997a8ce5e481.png)'
- en: Text extraction from langchain UnstructuredFileLoader (Image by Author)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 从 langchain UnstructuredFileLoader 提取文本（图像来源：作者）
- en: Conclusion
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This short tutorial provided a brief overview of some well-known libraries.
    Each one of them has their own strengths and weaknesses and should be wisely applied
    depending on the use case. The [complete code](https://github.com/keitazoumana/Medium-Articles-Notebooks/blob/main/OCR_Content_Extraction.ipynb)
    is available on my GitHub.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简短的教程概述了一些知名库。每个库都有其自身的优点和缺点，应该根据具体用例明智地应用。完整的代码可以在我的 GitHub 上找到 [这里](https://github.com/keitazoumana/Medium-Articles-Notebooks/blob/main/OCR_Content_Extraction.ipynb)。
- en: I hope this short tutorial helped you acquire new skill sets.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这个简短的教程能帮助你获得新的技能。
- en: Also, If you like reading my stories and wish to support my writing, consider
    [becoming a Medium member](https://zoumanakeita.medium.com/membership). With a
    $ 5-a-month commitment, you unlock unlimited access to stories on Medium.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你喜欢阅读我的故事并希望支持我的写作，可以考虑 [成为 Medium 会员](https://zoumanakeita.medium.com/membership)。只需每月
    $5 的承诺，你即可解锁 Medium 上的无限制访问权限。
- en: Would you like to buy me a coffee ☕️? → [Here you go](http://www.buymeacoffee.com/zoumanakeig)!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 想请我喝咖啡 ☕️ 吗？→ [这里是链接](http://www.buymeacoffee.com/zoumanakeig)!
- en: Feel free to follow me on [Medium](https://zoumanakeita.medium.com/), [Twitter](https://twitter.com/zoumana_keita_),
    and [YouTube](https://www.youtube.com/channel/UC9xKdy8cz6ZuJU5FTNtM_pQ), or say
    Hi on [LinkedIn](https://www.linkedin.com/in/zoumana-keita/). It is always a pleasure
    to discuss AI, ML, Data Science, NLP, and MLOps stuff!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 随时可以在 [Medium](https://zoumanakeita.medium.com/)、[Twitter](https://twitter.com/zoumana_keita_)
    和 [YouTube](https://www.youtube.com/channel/UC9xKdy8cz6ZuJU5FTNtM_pQ) 上关注我，或者在
    [LinkedIn](https://www.linkedin.com/in/zoumana-keita/) 上打招呼。讨论人工智能、机器学习、数据科学、自然语言处理和
    MLOps 相关话题总是很愉快的！
