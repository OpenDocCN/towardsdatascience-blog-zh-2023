- en: 'How To Fix TypeError: ObjectId Is Not JSON Serializable'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/pymongo-cursor-to-json-9f770740375a](https://towardsdatascience.com/pymongo-cursor-to-json-9f770740375a)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Converting a mongo cursor into JSON object in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://gmyrianthous.medium.com/?source=post_page-----9f770740375a--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----9f770740375a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9f770740375a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9f770740375a--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----9f770740375a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9f770740375a--------------------------------)
    ·4 min read·Jan 7, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eaab2de46fd1a4afdef1ebe34e4c49af.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Ciprian Boiciuc](https://unsplash.com/@ciprian?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/TrNSWatUW5g?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Welcome to our tutorial on serializing PyMongo cursors into JSON. In this article,
    we will cover how to properly handle `ObjectId` and `datetime` objects, as well
    as any other object, using a custom `JSONEncoder`.
  prefs: []
  type: TYPE_NORMAL
- en: One common task when working with PyMongo is the need to serialize data for
    storage or for transfer over a network. In this tutorial, we will look at how
    to serialize a PyMongo cursor, which is a common data structure used to store
    results from a MongoDB query, into JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: 'A commonly reported error when doing so, is the following `TyperError`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will also delve into how to properly handle complex data types such as `ObjectId`
    and datetime objects, which cannot be serialized directly into JSON. We will show
    you how to use a custom `JSONEncoder` to properly handle these objects and any
    other custom object types you may have in your PyMongo cursor.
  prefs: []
  type: TYPE_NORMAL
- en: So if you want to learn how to serialize PyMongo cursors into JSON and handle
    complex data types, keep reading!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom `JSONEncoder`
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `JSONEncoder` — which is a member of the `json` module of the standard
    library — is an extensible JSON encoder for Python data structures. By default,
    is supports the following serialisations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This means that whenever an object of a different data type is observed (which
    is not listed on the above table), a `TypeError` will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: When working with documents in Mongo, by default every document will have an
    assigned `_id` that corresponds to a unique identifier for every document within
    a collection. Now whenever you query a Mongo collection, a cursor will be returned
    containing (a pointer to) the retrieved documents where each document will also
    have the `_id` field of type `ObjectId`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, if you attempt to serialise such documents using the default `JSONEncoder`,
    you will end up getting the error mentioned in the introduction of this tutorial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Therefore, in order to manage to serialise such objects contained in the PyMongo
    cursor, we need to extend the default `JSONEncoder` such that it properly handles
    such data types the way we would want it to. To achieve this we will also need
    to implement the `default` method to return the mapping we wish, as specified
    in the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: To extend this to recognize other objects, subclass and implement a `[default()](https://docs.python.org/3/library/json.html#json.JSONEncoder.default)`
    method with another method that returns a serializable object for `o` if possible,
    otherwise it should call the superclass implementation (to raise `[TypeError](https://docs.python.org/3/library/exceptions.html#TypeError)`).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — [Python documentation](https://docs.python.org/3/library/json.html#json.JSONEncoder)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In our custom `JSONEncoder`, I am about to serialise any instance of `bson.ObjectId`
    and `datetime.datetime` to `str`. Depending on the documents contained in your
    own Mongo cursor, you may have to specify and handle additional (or perhaps less)
    data types.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Encoding the Mongo Cursor using the MongoJSONEncoder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have extended the defualt `JSONEncoder` such that is now capable
    of also encoding objects of type `bson.ObjectId` and `datetime.datetime`, we can
    now encode the Mongo cursor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Python object out of the JSON object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, in case you wish to convert the newly created JSON object into a Python
    object (that is a list of dictionaries containing the key-value pairs that correspond
    to the document values within the Mongo cursor), all you need to call is the `json.loads()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Final Thoughts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this tutorial, we learned how to serialize PyMongo cursors into JSON and
    properly handle complex data types such as `ObjectId` and `datetime` objects.
    We accomplished this by creating a custom `JSONEncoder` that extended the default
    `JSONEncoder` and implemented a `default()` method.
  prefs: []
  type: TYPE_NORMAL
- en: We then used this custom encoder to encode the PyMongo cursor, and finally,
    we converted the resulting JSON object into a Python object using the `json.loads()`
    function. This tutorial demonstrated how to handle `ObjectId` and `datetime` objects,
    but the custom `JSONEncoder` can also be extended to handle any other custom object
    types that may be present in the PyMongo cursor.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Become a member**](https://gmyrianthous.medium.com/membership) **and read
    every story on Medium. Your membership fee directly supports me and other writers
    you read. You’ll also get full access to every story on Medium.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://gmyrianthous.medium.com/membership?source=post_page-----9f770740375a--------------------------------)
    [## Join Medium with my referral link — Giorgos Myrianthous'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: gmyrianthous.medium.com](https://gmyrianthous.medium.com/membership?source=post_page-----9f770740375a--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '**Related articles you may also like**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/diagrams-as-code-python-d9cbaa959ed5?source=post_page-----9f770740375a--------------------------------)
    [## Diagrams as Code in Python'
  prefs: []
  type: TYPE_NORMAL
- en: Creating cloud system architecture diagrams with Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/diagrams-as-code-python-d9cbaa959ed5?source=post_page-----9f770740375a--------------------------------)
    [](/infrastructure-as-code-f153d810428b?source=post_page-----9f770740375a--------------------------------)
    [## Infrastructure as Code
  prefs: []
  type: TYPE_NORMAL
- en: Managing infrastructure resources with code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/infrastructure-as-code-f153d810428b?source=post_page-----9f770740375a--------------------------------)
  prefs: []
  type: TYPE_NORMAL
