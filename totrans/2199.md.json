["```py\nimport re\nimport math\nfrom collections import Counter\nimport numpy as np\n```", "```py\ndocs = [\"ChatGPT is a AI chatbot developed by OpenAI.\",\n        \"ChatGPT is built on top of the GPT family of large language models.\",\n        \"Generative AI is rising in popularity and has started to transform businesses in various ways possible.\"]\n```", "```py\np_docs = []\ntok_set = []\nfor doc in docs:\n    p_doc = re.sub(r'[^\\w\\s]', '', doc.lower())\n    p_docs.append(p_doc)\n    tok_set.extend(p_doc.split())\n\ntok_set = set(tok_set)\nprint(p_docs)\nprint(tok_set)\n```", "```py\ndef calculate_idf(p_docs, tok_set):\n    idf = {}\n    for tok in tok_set:\n        N = len(p_docs)\n        df = 0\n        for doc in p_docs:\n            if tok in doc.split():\n                df += 1\n        idf[tok] = math.log(N/df)\n    return idf\n\nidf = calculate_idf(p_docs, tok_set)\nprint(idf)\n```", "```py\ndef calculate_tf(tok, p_doc):\n    toks = p_doc.split()\n    tok_freq = Counter(toks)\n    if tok in tok_freq:\n        return tok_freq[tok]/len(toks)\n    return 0\n```", "```py\nprint(calculate_tf(\"chatgpt\", p_docs[0]))\nprint(calculate_tf(\"chatgpt\", p_docs[1]))\nprint(calculate_tf(\"chatgpt\", p_docs[2]))\n```", "```py\ndef prepare_docs(docs):\n    p_docs = []\n    tok_set = []\n    for doc in docs:\n        p_doc = re.sub(r'[^\\w\\s]', '', doc.lower())\n        p_docs.append(p_doc)\n        tok_set.extend(p_doc.split())\n\n    tok_set = set(tok_set)\n    return p_docs, tok_set\n\ndef tf_idf(tok, docs):\n    p_docs, tok_set = prepare_docs(docs)\n    print(f\"calculating tf-idf for {tok} in all docs...\")\n    idf_dict = calculate_idf(p_docs, tok_set)\n    idf = idf_dict[tok] if tok in idf_dict else 0.0\n    print(f\"idf for {tok}: {round(idf, 4)}\")\n    for i, doc in enumerate(p_docs):\n        tf = calculate_tf(tok, doc)\n        tf_idf = tf * idf\n        print(f\"Doc {i+1}: {doc}, tf: {round(tf, 4)}, tf-idf: {round(tf_idf, 4)}\")\n```", "```py\nprint(tf_idf(\"chatgpt\", docs))\n```", "```py\nprint(tf_idf(\"gpt\", docs))\n```", "```py\nprint(tf_idf(\"generative\", docs))\n```", "```py\nprint(tf_idf(\"is\", docs))\n```", "```py\nprint(tf_idf(\"gpt4\", docs))\n```", "```py\ndef tf_idf(tok, docs):\n    p_docs, tok_set = prepare_docs(docs)\n    idf_dict = calculate_idf(p_docs, tok_set)\n    idf = idf_dict[tok] if tok in idf_dict else 0\n    tf_idfs = []\n    for i, doc in enumerate(p_docs):\n        tf = calculate_tf(tok, doc)\n        tf_idf = tf * idf\n        tf_idfs.append(tf_idf)\n    return tf_idfs\n```", "```py\ndef search_query(query, docs):\n    print(f\"searching for: {query}\")\n    terms = query.lower().split()\n    score = 0\n    tf_idfs = []\n    for tok in terms:\n        tf_idfs.append(tf_idf(tok, docs))\n    tf_idfs = np.array(tf_idfs)\n    print(tf_idfs)\n    doc_scores = np.sum(tf_idfs, axis=0) # summation of tf_idfs of all query terms for each doc\n    print(doc_scores)\n    rank_doc = np.argsort(doc_scores)[::-1]\n    print(\"docs ranked in order of relevance:\")\n    for i in rank_doc:\n        print(f\"Doc {i+1}: {docs[i]}, score: {doc_scores[i]}\")\n```", "```py\nprint(search_query(\"ChatGPT AI\", docs))\n```", "```py\nprint(search_query(\"AI language models\", docs))\n```"]