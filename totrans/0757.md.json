["```py\nimport pandas as pd\nimport numpy as np\nimport plotly.graph_objects as go\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn import tree\nfrom sklearn.model_selection import train_test_split\n```", "```py\nnp.random.seed(0)\n\n# Constants for the quadratic equation\na, b, c = 1, 2, 3\n\n# Create a DataFrame with a single feature\nn = 500  # number of data points\nx = np.linspace(-10, 10, n)  # feature values from -10 to 10\nnoise = np.random.normal(0, 10, n)  # some random noise\ny = a * x**2 + b * x + c + noise  # quadratic equation with noise\n\ndata = pd.DataFrame({'X': x, 'y': y})\ndata[\"X\"] = data[\"X\"].round(3)\ndata[\"y\"] = data[\"y\"].round(3)\n```", "```py\nX_train, X_test, y_train, y_test = train_test_split(data[[\"X\"]], \n                        data[\"y\"], test_size=0.2, random_state=0)\n\ntrain_df = pd.concat([X_train, y_train], axis=1)\ntest_df = pd.concat([X_test, y_test], axis=1)\n\nprint(f\"Shape of Training DF: {train_df.shape}\")\nprint(f\"Shape of Test DF: {test_df.shape}\")\n```", "```py\n# Fit the regression tree\nregressor = DecisionTreeRegressor()\nregressor.fit(X_train, y_train)\n```", "```py\n# Predict for training data and compute mean squared error\ntrain_yhat = regressor.predict(X_train)\ntrain_mse = mean_squared_error(y_train, train_yhat)\n\n# Predict for test data and compute mean squared error\ntest_yhat = regressor.predict(X_test)\ntest_mse = mean_squared_error(y_test, test_yhat)\n\nprint(f\"MSE on training set: {np.round(train_mse, 3)}\")\nprint(f\"MSE on test set: {np.round(test_mse, 3)}\")\n```", "```py\nfrom sklearn.ensemble import BaggingRegressor\n\nbag_regressor = BaggingRegressor(\n    DecisionTreeRegressor(), n_estimators=200,\n    max_samples=100, bootstrap=True, n_jobs=-1\n)\n\nbag_regressor.fit(X_train, y_train)\n```", "```py\n# Predict for training data and compute mean squared error\nbag_train_yhat = bag_regressor.predict(X_train)\nbag_train_mse = mean_squared_error(y_train, bag_train_yhat)\n\n# Predict for test data and compute mean squared error\nbag_test_yhat = bag_regressor.predict(X_test)\nbag_test_mse = mean_squared_error(y_test, bag_test_yhat)\n\nprint(f\"MSE on training set: {np.round(bag_train_mse, 3)}\")\nprint(f\"MSE on test set: {np.round(bag_test_mse, 3)}\")\n```"]