- en: Model Evaluation in Time Series Forecasting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/model-evaluation-in-time-series-forecasting-ae41993e267c](https://towardsdatascience.com/model-evaluation-in-time-series-forecasting-ae41993e267c)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introducing backtesting for time series using the Skforecast library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://javiferfer.medium.com/?source=post_page-----ae41993e267c--------------------------------)[![Javier
    Fernandez](../Images/d881a426c3f28ad5f41355a7aa92ed86.png)](https://javiferfer.medium.com/?source=post_page-----ae41993e267c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ae41993e267c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ae41993e267c--------------------------------)
    [Javier Fernandez](https://javiferfer.medium.com/?source=post_page-----ae41993e267c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ae41993e267c--------------------------------)
    ·6 min read·Mar 5, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0a6a23a2ca72f5acd77ac7e855528173.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Lukas](https://www.pexels.com/@goumbik) on [Pexels](https://www.pexels.com/photo/chart-close-up-data-desk-590022/)
  prefs: []
  type: TYPE_NORMAL
- en: Time-series forecasting consists of making predictions based on historical time
    data to drive future strategic decision-making in a wide range of applications.
  prefs: []
  type: TYPE_NORMAL
- en: When evaluating a model, we split our data into a training and a test set. While
    the training set is used to train the model and determine the optimal hyperparameters,
    the test set is used to evaluate it. To have a more robust evaluation of the model
    performance, it is common to use [cross-validation](https://en.wikipedia.org/wiki/Cross-validation_%28statistics%29#:~:text=Cross%2Dvalidation%20is%20a%20resampling,model%20will%20perform%20in%20practice.).
    Cross-validation is a resampling method that uses different data sets to test
    and train a model on several iterations.
  prefs: []
  type: TYPE_NORMAL
- en: However, it is not possible to implement straightforward cross-validation on
    time series data as it ignores the temporal components between the observations.
    Therefore, this article presents different methods used to evaluate time series
    models, known as [backtesting](https://en.wikipedia.org/wiki/Backtesting).
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Backtesting is a term used in modeling that refers to assessing a model using
    existing historic data. It involves selecting several training and test sets going
    step-by-step forward in time. The main idea behind backtesting is similar to the
    one behind cross-validation, except that backtesting considers the temporal component
    of the data. This method enables us to (1) assess and visualize how the model
    error develops over time and (2) estimate the variance of the model error.
  prefs: []
  type: TYPE_NORMAL
- en: In production, it is a common practice to first determine the optimal parameters
    using a backtesting method and then retrain the model with the available data.
    But, this retraining does not necessarily need to be with all the available data
    or every time new data is available. Depending on our strategy, we can select
    a different backtesting method.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Backtesting with refit and increasing training size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The model is tested on a sequentially increased training set, always having
    a fixed origin and using all the data available. In this method, there is a fixed
    origin and the size of the training set increases for each iteration, as displayed
    in Figure 1.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fd8389c0b054e23a0ebd4d546586b671.png)![](../Images/d7005815c9ad3218745e209a0bf0957a.png)'
  prefs: []
  type: TYPE_IMG
- en: '***Fig. 1****. Time series backtesting diagram with an initial training size
    of ten observations, a prediction horizon of 3 steps, and retraining at each iteration.*
    ***Ref****:* [*Skforecast*](https://www.cienciadedatos.net/documentos/py27-time-series-forecasting-python-scikitlearn.html)
    *[1].*'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Backtesting with refit and fixed training size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This method is similar to the previous one except that it rolls the origin of
    the forecast. Therefore, the size of the training set remains constant, as displayed
    in Figure 2\. This method can be considered a time series analogous to cross-validation
    techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Compared to the previous method, this method is less expensive as the size of
    the training set stays the same for each iteration. It also allows for distinct
    error distribution by lead time and desensitizes the error measures to special
    events at any single origin [2]. An example where this approach is interesting
    is when there have been events or “abnormal” periods, such as COVID, within the
    historical data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f45f9dc96bec49070cdff66a94bbab04.png)![](../Images/6ca8fb135dd54935fcef37cdf8116117.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Fig. 2**. *Time series backtesting diagram with an initial training size
    of ten observations, a prediction horizon of 3 steps, and a training set of constant
    size.* ***Ref****:* [*Skforecast*](https://www.cienciadedatos.net/documentos/py27-time-series-forecasting-python-scikitlearn.html)
    *[1].*'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Backtesting without refit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last backtesting approach consists of training the model with an initial
    training set and assessing it sequentially without updating it. This strategy
    has the advantage of being much faster since the model is trained only once. However,
    the model does not incorporate the latest data available, so it may lose predictive
    capacity over time.
  prefs: []
  type: TYPE_NORMAL
- en: This approach is interesting if it is necessary to make predictions with a high
    frequency on new data coming into the system.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/426dfbdb0a65c10f1ecc67fb628fdf20.png)![](../Images/05a2ff5bac9d22384b24a8ad9496d1fc.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Fig. 3**. *Time series backtesting diagram with an initial training size
    of ten observations, a prediction horizon of 3 steps, and no retraining at each
    iteration.* ***Ref****:* [*Skforecast*](https://www.cienciadedatos.net/documentos/py27-time-series-forecasting-python-scikitlearn.html)
    *[1].*'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here is the implementation of backtesting using the Skforecast library. Skforecast
    is a python library that eases using scikit-learn regressors as multi-step forecasters.
    It also works with any regressor compatible with the scikit-learn API (pipelines,
    CatBoost, LightGBM, XGBoost, Ranger…).
  prefs: []
  type: TYPE_NORMAL
- en: For testing purposes, we have used the publicly available h2o datastet under
    the [GitHub](https://github.com/JoaquinAmatRodrigo/skforecast/blob/master/data/h2o.csv)
    MIT license, whose data goes from 1991–07–01 to 2008–06–01 monthly.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1e3fac06460e27370029c29e4667b3d9.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Fig. 4**. *Visualization of the dataset, where blue data is used for training
    and orange for testing.* ***Ref****: Image by author.*'
  prefs: []
  type: TYPE_NORMAL
- en: Below, there are the three described backtesting methods with a random forest
    regressor used as autoregression.
  prefs: []
  type: TYPE_NORMAL
- en: 'When looking at the implementation, the difference between the backtesting
    methods relies on the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '*initial_train_size*: Number of samples in the initial train split.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*fixed_train_size*: If *True*, train size doesn’t increase but moves by ‘steps’
    in each iteration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*refit*: Whether to re-fit the forecaster in each iteration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*steps*: Number of steps to predict.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1\. Backtesting with refit and increasing training size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The model is first trained with the series length set until 2002–01–01, to then
    sequentially add ten new data into the training. This process is repeated until
    the entire series has been run.
  prefs: []
  type: TYPE_NORMAL
- en: To set this method, the *fixed_train_size* and *refit* parameters are set to
    *False* and *True*, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7819ead7155a4ebde3a6afe2727bc5b9.png)'
  prefs: []
  type: TYPE_IMG
- en: As observed, the training set increases over time while the test set remains
    constant over time.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Backtesting with refit and fixed training size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to backtesting with refit and increasing training size, the model is
    first trained with the series length set until 2002–01–01 to then sequentially
    add ten new data into the training. However, in this method, the size keeps constant
    over time, which means both the training and test sets have always the same size.
  prefs: []
  type: TYPE_NORMAL
- en: To set this method, both the *fixed_train_size* and *refit* parameters are set
    to *True*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/48887a8d03df59c87af56fa3884fa5dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 3\. Backtesting without refit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to backtesting with refit and increasing training size, the model is
    first trained with the series length set until 2002–01–01\. However, the training
    set does not change over time where as the test set moves ten steps each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: To set this method, both the *fixed_train_size* and *refit* parameters are set
    to *False*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/18f669f95f4fe85af8aeb3ca72c44218.png)'
  prefs: []
  type: TYPE_IMG
- en: This same methodology can be run with not only sklearn-based models but with
    other ones such as [SARIMAX](https://github.com/JoaquinAmatRodrigo/skforecast/blob/master/skforecast/model_selection_statsmodels/model_selection_statsmodels.py).
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this article, we have discussed the different methods for model evaluation
    for time series forecasting, known as backtesting. The main take-home messages
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: There are three main backtesting methods, whose main differences rely on whether
    there is refit or not, the training size, and the origin of the forecast.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The backtesting method should depend on the production scenario.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since both the implementation and the computation time can be expensive, try
    to use already optimized Python libraries such as Skforecast.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***If you enjoyed this post, please consider*** [***subscribing***](https://javiferfer.medium.com/membership)***.
    You’ll get access to all of my content + every other article on Medium from awesome
    creators!***'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[](/creating-an-arima-model-for-time-series-forecasting-ff3b619b848d?source=post_page-----ae41993e267c--------------------------------)
    [## Creating an ARIMA Model for Time Series Forecasting'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing and implementing the ARIMA model in the AirPassengers dataset
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/creating-an-arima-model-for-time-series-forecasting-ff3b619b848d?source=post_page-----ae41993e267c--------------------------------)
    [](/time-series-forecasting-based-on-the-trend-and-seasonal-components-26b92866e548?source=post_page-----ae41993e267c--------------------------------)
    [## Time-Series Forecasting Based on Trend and Seasonal components
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing the trend and seasonality of the time-series to decompose the time-series
    and implement forecasting models
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/time-series-forecasting-based-on-the-trend-and-seasonal-components-26b92866e548?source=post_page-----ae41993e267c--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '[1] Skforecast, [Skforecast: time series forecasting with Python and Scikit-learn](https://www.cienciadedatos.net/documentos/py27-time-series-forecasting-python-scikitlearn.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] Elsevier, [Out-of-sample tests of forecasting accuracy: an analysis and
    review](https://sci-hub.st/10.1016/S0169-2070(00)00065-0)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] H2O AI Cloud, [Backtesting](https://docs.h2o.ai/wave-apps/h2o-model-validation/v0.14.0/guide/validation-tests/backtesting/backtesting)'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] Machine Learning Mastery, [Backtest ML models time series forecasting](https://machinelearningmastery.com/backtest-machine-learning-models-time-series-forecasting/)'
  prefs: []
  type: TYPE_NORMAL
