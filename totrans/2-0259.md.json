["```py\nimport pandas as pd\nfrom sklearn.datasets import fetch_openml\nfrom sklearn.model_selection import train_test_split\n\n# Load data and split into training and testing sets\nX, y = fetch_openml(\"titanic\", version=1, as_frame=True, return_X_y=True)\nX.drop(['boat', 'body', 'home.dest'], axis=1, inplace=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2)\nX_train.head()\n```", "```py\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef extract_title(X):\n    \"\"\"Extract the title from each passenger's `name`.\"\"\"\n    X['title'] = X['name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]\n    return X\n\nextract_title_transformer = FunctionTransformer(extract_title)\nprint(type(extract_title_transformer))\n# <class 'sklearn.preprocessing._function_transformer.FunctionTransformer'>\n```", "```py\nfrom sklearn.pipeline import Pipeline\n\npreprocessor = Pipeline(steps=[\n  ('extract_title', extract_title_transformer),\n  # ... any other transformers we want to include, e.g. SimpleImputer or MinMaxScaler\n])\n\nX_train_transformed = preprocessor.fit_transform(X_train)\nX_train_transformed\n```", "```py\ndef extract_title(X):\n    \"\"\"Extract the title from each passenger's `name`.\"\"\"\n    X['title'] = X['name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]\n\ndef is_upper_class(X, upper_class_titles):\n    \"\"\"If the passenger's title is in the list of `upper_class_titles`, return 1, else 0.\"\"\"\n    X['upper_class'] = X['title'].apply(lambda x: 1 if x in upper_class_titles else 0)\n    return X\n\npreprocessor = Pipeline(steps=[\n  ('extract_title', FunctionTransformer(extract_title)),\n  ('is_upper_class', FunctionTransformer(is_upper_class,\n                      kw_args={'upper_class_titles':['Dr', 'Col', 'Major', 'Lady', 'Rev', 'Sir', 'Capt']})),\n    # ... any other transformers we want to include, e.g. SimpleImputer or MinMaxScaler\n])\n\nX_train_transformed = preprocessor.fit_transform(X_train)\nX_train_transformed\n```", "```py\ndef extract_title(X):\n    \"\"\"Extract the title from each passenger's `name`.\"\"\"\n    X['title'] = X['name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]\n```", "```py\n# Stateless - no prior information is used in the transformation\ndef impute_mean_stateless(X):\n    X['column1'] = X['column1'].fillna(X['column1'].mean())\n\n# Stateful - prior information about the training set is used in the transformation\ncolumn1_mean_train = np.mean(X_train['column1'])\ndef impute_mean(X):\n    X['column1'] = X['column1'].fillna(column1_mean_train)\n    return X\n```", "```py\n# Show the test set, pre-transformation\nX_test.head(3)\n```", "```py\nprint(\"X_train mean: \", X_train['age'].mean())\n# X_train mean:  29.857414148681055\n\nprint(\"X_test mean: \", X_test['age'].mean())\n# X_test mean:  29.97444952830189\n```", "```py\ndef impute_mean(X):\n    X['age'] = X['age'].fillna(X['age'].mean())\n    return X\n\nimpute_mean_FT = FunctionTransformer(impute_mean) # Convert function to Transformer\nprepro = impute_mean_FT.fit(X_train) # The Transformer is \"fitted\" to the train set\nprepro.transform(X_test) # The fitted Transformer is used to transform the test set\n```", "```py\nfrom sklearn.base import TransformerMixin\n\nclass ExtractTitle(TransformerMixin):\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X, y=None):\n        X['title'] = X['name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]\n        return X\n\npreprocessor = Pipeline(steps=[\n    ('extract_title', ExtractTitle()),\n])\n\nX_train_transformed = preprocessor.fit_transform(X_train)\nX_train_transformed.head()\n```", "```py\nclass IsUpperClass(TransformerMixin):\n    def __init__(self, upper_class_titles):\n        self.upper_class_titles = upper_class_titles        \n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X, y=None):\n        X['upper_class'] = X['title'].apply(lambda x: 1 if x in self.upper_class_titles else 0)\n        return X\n\npreprocessor = Pipeline(steps=[\n    ('IsUpperClass', IsUpperClass(upper_class_titles=['Dr', 'Col', 'Major', 'Lady', 'Rev', 'Sir', 'Capt'])),\n])\n\nX_train_transformed = preprocessor.fit_transform(X_train)\nX_train_transformed.head()\n```"]