- en: Improving Your SQL Logic with Common Table Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/improving-your-sql-logic-with-common-table-expressions-26f04967fc86](https://towardsdatascience.com/improving-your-sql-logic-with-common-table-expressions-26f04967fc86)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Making logic easier to write, read, explain, and maintain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@elliottstam?source=post_page-----26f04967fc86--------------------------------)[![Elliott
    Stam](../Images/5469da79b12b9d5842df36d381415033.png)](https://medium.com/@elliottstam?source=post_page-----26f04967fc86--------------------------------)[](https://towardsdatascience.com/?source=post_page-----26f04967fc86--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----26f04967fc86--------------------------------)
    [Elliott Stam](https://medium.com/@elliottstam?source=post_page-----26f04967fc86--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----26f04967fc86--------------------------------)
    ·6 min read·Dec 5, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6a63bf368229748a912d02f23f3d9489.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Sam Moghadam Khamseh](https://unsplash.com/@sammoghadamkhamseh?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'Throwing your laundry into a pile and hoping for the best probably isn’t a
    great long-term strategy for managing your clothes. It’ll be hard to:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SELECT socks FROM pile` later on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'And you’ll definitely struggle to:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SELECT shirt FROM pile WHERE wrinkles = false` when you need a shirt.'
  prefs: []
  type: TYPE_NORMAL
- en: As with managing your clothes, there are clear benefits to actively managing
    how SQL logic is organized.
  prefs: []
  type: TYPE_NORMAL
- en: In this article we’re taking a look at how common table expressions (CTEs) can
    improve your SQL logic. Spaghetti code is rarely good code, and this is as true
    in SQL as it is in any programming language. In data management and engineering
    there are no silver bullets. However, keeping your logic organized and easy to
    review will only help you. So let’s dive in!
  prefs: []
  type: TYPE_NORMAL
- en: What does a common table expression look like?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I sometimes call them `WITH` clauses. Why? Let’s take a look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: A example common table expression.
  prefs: []
  type: TYPE_NORMAL
- en: I call them `WITH` statements because they always begin with … `WITH` .
  prefs: []
  type: TYPE_NORMAL
- en: 'At a glance, how easy is it to understand what’s happening? There are three
    parts:'
  prefs: []
  type: TYPE_NORMAL
- en: A query identifying the “high value customers”.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A query identifying the “new customers”.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final querying stage performing an inner join between the “high value customers”
    and the “new customers”, providing a result set containing only the customers
    who exist in both categories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An alternative approach
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before I knew about common table expressions (CTEs / `WITH` statements), this
    is how I might have approached this query:'
  prefs: []
  type: TYPE_NORMAL
- en: Before someone showed me the value of CTEs, this is how I wrote all my queries.
  prefs: []
  type: TYPE_NORMAL
- en: There isn’t necessarily anything wrong with the query above. In fact, it appears
    to just be re-organization of the code.
  prefs: []
  type: TYPE_NORMAL
- en: But sometimes the order of things matters.
  prefs: []
  type: TYPE_NORMAL
- en: Matters, the order of things sometimes does (thanks, Yoda).
  prefs: []
  type: TYPE_NORMAL
- en: 'My opinion is that the CTE approach is easier to work with and interpret. When
    reading the CTE query, it’s clear to me that the story is:'
  prefs: []
  type: TYPE_NORMAL
- en: We have high-value customers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have new customers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our results will return the inner join of the two sets of customers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That is a simple and straightforward story. The second query isn’t rocket science
    either, but here is how I experience reading it:'
  prefs: []
  type: TYPE_NORMAL
- en: We have a customer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have total revenue (probably for the customer).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have days since last seen (probably for the customer).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have a subquery deriving customers who met some revenue threshold.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will perform an inner join on another subquery….
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The other subquery derives customers who were first seen in the last 90 days.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That story is still easy enough to piece together, but it takes me six thoughts
    to piece the story together whereas it takes only three to piece together the
    CTE version. I’m a simple man — cutting the effort in half goes a long way for
    me.
  prefs: []
  type: TYPE_NORMAL
- en: But in all seriousness, in practice I find that the CTE approach modularizes
    the logic in such a way that it’s easy to define small pieces of your SQL puzzle,
    enabling you to easily connect the pieces of the puzzle in the final querying
    stage.
  prefs: []
  type: TYPE_NORMAL
- en: What we saw above was a toy example. In the real world, complex problems often
    require more complex logic. It’s helpful to find ways to break complex problems
    (or complex queries) into smaller pieces. In doing this, one complex problem might
    become a handful of simple problems. And if you can easily solve a handful of
    simple problems then you have successfully developed a simple solution to a complex
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: Summarizing the benefits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In my experience these are the core benefits of adopting common table expressions
    into your SQL workflows:'
  prefs: []
  type: TYPE_NORMAL
- en: Organization of the logic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Readability of the logic and the purpose of the query.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maintainability of the logic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explainability of the logic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Performance and extensibility (say what?)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '1: Organization of the logic'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Common table expressions provide structure to our queries. Similar to how paragraphs
    provide structure to the pages of a book, or how rooms provide structure to a
    house, or how functions provide structure to a program, or… you get the point.
  prefs: []
  type: TYPE_NORMAL
- en: Having reliable and predictable patterns is an absolute win in terms of improving
    the efficacy of our queries.
  prefs: []
  type: TYPE_NORMAL
- en: '2: Readability of the logic and the purpose of the query'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The organization of the structure in our queries helps to make them more readable.
    Have you ever tried reading a book from the 1800s? Do a quick Google search. Some
    of those sentences could go on for multiple *pages.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Unstructured SQL queries are like really, really long sentences: it’s hard
    to keep track of it all. Where does one thought end the other begin?'
  prefs: []
  type: TYPE_NORMAL
- en: Keeping your logic readable is a big win. It’s a win for you and it’s a win
    for anyone else who will ever look at your query. The logic in your queries shouldn’t
    be a cryptographic algorithm that keeps Alan Turing up at night trying to solve.
    They should be so easy that non-technical people think, “hey I think know what
    that’s doing”.
  prefs: []
  type: TYPE_NORMAL
- en: '3: Maintainability of the logic'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When your queries are easy to read, they’re easy to maintain. You don’t want
    to come back to a query three months after you wrote it only to spend hours deciphering
    how the damn thing works.
  prefs: []
  type: TYPE_NORMAL
- en: Odds are that even good queries will need to adapt and evolve over time. Good
    queries should be easy to understand, debug, and extend for further use.
  prefs: []
  type: TYPE_NORMAL
- en: Common table expressions make it easy to break your logic into bite-size pieces.
    This improves the maintainability of your queries, as you can isolate specific
    components of the logic. For example, you might have a 500 line query but because
    you organized it well you know that implementing a new feature only requires editing
    a specific section of your CTE which involves a mere 20 lines.
  prefs: []
  type: TYPE_NORMAL
- en: '4: Explainability of the logic'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Organized, readable logic tends to be easier to explain than a bunch of spaghetti.
    Whether it’s documentation, project handovers, or inquisitive business users poking
    holes in your implementation: you’ll need to explain your logic at some point
    if it’s doing anything important.'
  prefs: []
  type: TYPE_NORMAL
- en: Common table expressions make it easy to break your logic into small, explainable
    pieces. When your stakeholders understand the small pieces, you’re very close
    to winning them over in terms of understanding the bigger picture.
  prefs: []
  type: TYPE_NORMAL
- en: '5: Performance and extensibility'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Technically a common table expression is not more performant than a chain of
    in-line subqueries. Our two examples earlier should be equal in terms of performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'But on the battlefield of performance, we don’t fight fair. This is what will
    make you stand out as a data engineer: do you know how to tilt the scale unfairly
    in your favor? Common table expressions can help make it obvious when there is
    a common query component being implemented in many workflows. This opens the door
    for efficiencies in terms of automation or perhaps ETL optimizations which allow
    performing that query once and recycling its result set in multiple places.'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also likely find that you have a “library” of query components after
    you adopt common table expressions. A piece of a query you wrote last week might
    be relevant to a new business use case you’re working on today. When your queries
    are organized and well-structured using common table expressions, it’s very easy
    to reach into a problem you already solved and grab the relevant chunk of logic
    to insert into a new problem that needs solving.
  prefs: []
  type: TYPE_NORMAL
- en: What next?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Getting a SQL query working is just the start. Setting it up to deliver maximum
    value (and minimal headache) over its lifetime is the differentiator.
  prefs: []
  type: TYPE_NORMAL
- en: Look back at some of your old queries. Are they easy to understand? Are they
    easy to explain and maintain? If the answer is no, then give what we’ve talked
    about here a try.
  prefs: []
  type: TYPE_NORMAL
- en: Organize your logic into a common table expression. Split it into pieces of
    logic that are easier to manage. Run your changes by a colleague and see how they
    react. Take what works for you and run with it!
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping it up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: That does it for this article. As you’ve read this far, I hope you found this
    useful and interesting! Good luck out there writing good quality SQL.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re wanting more content, check out my [YouTube channel](https://www.youtube.com/@devyx)!
    Drop me a comment and let me know what other data engineering topics you’re curious
    to explore.
  prefs: []
  type: TYPE_NORMAL
