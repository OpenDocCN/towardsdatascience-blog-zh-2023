- en: 'Social Network Analysis with NetworkX: A Gentle Introduction'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/social-network-analysis-with-networkx-a-gentle-introduction-6123eddced3](https://towardsdatascience.com/social-network-analysis-with-networkx-a-gentle-introduction-6123eddced3)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn how companies like Facebook and LinkedIn extract insights from networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@riccardo.andreoni?source=post_page-----6123eddced3--------------------------------)[![Riccardo
    Andreoni](../Images/5e22581e419639b373019a809d6e65c1.png)](https://medium.com/@riccardo.andreoni?source=post_page-----6123eddced3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6123eddced3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6123eddced3--------------------------------)
    [Riccardo Andreoni](https://medium.com/@riccardo.andreoni?source=post_page-----6123eddced3--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6123eddced3--------------------------------)
    ·8 min read·Sep 28, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/43b579957937d01605dc5f2d6c4e31f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image source: [pixabay.com](https://pixabay.com/photos/play-stone-network-networked-1237457/)'
  prefs: []
  type: TYPE_NORMAL
- en: How do streaming platforms like Netflix **recommend the perfect movie** for
    your evening? How can we optimize **player positioning in sports** like soccer?
    How can we **identify fraudulent activities** in financial networks? How can we
    **predict a match in dating apps** like Tinder?
  prefs: []
  type: TYPE_NORMAL
- en: 'All these challenges have the same solution: [**Social Network Analysis**](https://en.wikipedia.org/wiki/Social_network_analysis).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Social Network Analysis (SNA) is a powerful data science field that allows
    to explore the intricate relationships within a network of entities, discovering
    hidden patterns and capturing insights. Network entities can be everything: they
    can be people on a social network like Instagram, websites on the internet, or
    even sport teams in a tournament network.'
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, I will help you understand what are networks in data
    science, I will describe the most common types, and I will implement several algorithms
    to extract valuable information from the networks.
  prefs: []
  type: TYPE_NORMAL
- en: All the theoretical parts will be combined with practical examples. You will
    find several **Python code** snippets to familiarize yourself with the [**NetworkX**](https://networkx.org/)
    Python library.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A network, also called a graph, is a particular representation of information
    consisting of two essential components: **nodes** and **edges**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nodes** are the building blocks of a network. They represent the individual
    entities within a network. They can impersonate a wide variety of things such
    as people in a social network but also genes in a biological network.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Edges**, instead, represent the relationships between the nodes. They can
    define interactions between two people, associations, or dependencies. Edges may
    be directed, meaning that the relationship they represent goes from one node to
    another. Think of a directed edge representing the payment made by a person to
    another, it is indeed beneficial to know the direction of the money exchange.
    This asymmetry is represented with arrows.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [NetworkX](https://networkx.org/), nodes and edges are easily represented
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the above “Hello world” code is this little and naive network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/23a4be625cbbcc4156099f2b027eb028.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, in a similar fashion, the [NetwrokX](https://networkx.org/) library
    can easily create more complex networks such as the one displayed below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ab5e2a548bd3ea82d17fe8efb8c6c977.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author. [Data source](https://snap.stanford.edu/data/ego-Facebook.html).
  prefs: []
  type: TYPE_NORMAL
- en: Types of Networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In modeling a real-world network, we must consider that there exist **several
    structures** of them. I will briefly introduce the most common networks and show
    how easy it is to model them with NetworkX.
  prefs: []
  type: TYPE_NORMAL
- en: Directed and Undirected Networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Directed** networks have edges with a defined direction. This indicates an
    asymetry in the relation between two nodes. For example, in an email network,
    the direction of the edge can indicate which node sends the email and which one
    receives it.'
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, **undirected** networks neglect any direction of the arcs,
    implying symmetric relations between the nodes. An example could be a friendship
    network, where usually the relationship is mutual, or a sport tournament network.
  prefs: []
  type: TYPE_NORMAL
- en: 'In NetworkX the code used to instantiate respectively directed and undirected
    networks is `DiGraph()` or `Graph()`. I randomly generate synthetic networks with
    the [Numpy](https://numpy.org/) library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can explore the graphs with some beautiful interactive visualizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e59e8ac162943a33be0ed20205045716.png)'
  prefs: []
  type: TYPE_IMG
- en: Synthetic Directed Graph. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2add834ec32f3c6175ee29ba11c41534.png)'
  prefs: []
  type: TYPE_IMG
- en: Synthetic Undirected Graph. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Weighted Networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some cases, the **relationships between entities are not equal**. We can
    measure the “strength” of a relationship by adding a weight to each edge. The
    weight reflects the significance of the interaction between a couple of nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Consider, as an instance, a flight network. Each airport represents a node and
    edges represent the flights between them. It is convenient to assign a weight
    to each edge to model information such as the flight duration, distance, or ticket
    price.
  prefs: []
  type: TYPE_NORMAL
- en: To create a simple weighted network in NetworkX, we need to initialize an empty
    `nx.Graph()`object. The second step is to add edges with the `add_edge()` method
    and include the weight attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we can visualize the weighted network.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f256d23ee2799a8940d0091c28c74d0d.png)'
  prefs: []
  type: TYPE_IMG
- en: Synthetic Weighted Graph. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: One variety of weighted networks are **signed networks**. They take into account
    the positivity or negativity of each relationship by **assigning a sign** (+ or
    -) to each edge.
  prefs: []
  type: TYPE_NORMAL
- en: One example of a signed network is an online product reviews network. Such a
    network represents products and customers as nodes and customer reviews are edges.
    Edges can have a positive sign (+) or a negative one (-) reflecting respectively
    a positive or a negative review.
  prefs: []
  type: TYPE_NORMAL
- en: 'In NetworkX signed graphs are created as easily as weighted graphs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Extracting Information from Networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we understand the different forms networks can assume, we need to know
    how to **extract meaningful insights** from them. We may want to find which are
    the **key nodes** or edges, and uncover **hidden patterns**. Fortunately, several
    algorithms have been developed to answer these questions.
  prefs: []
  type: TYPE_NORMAL
- en: PageRank Algorithm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PageRank is a famous algorithm that measures the importance of nodes within
    a network. It was originally developed by Larry Page and Sergey Brin at Google
    and it achieved tremendous results in ranking web pages for their search engine.
  prefs: []
  type: TYPE_NORMAL
- en: The core idea of the PageRank algorithm is that important nodes are the ones
    that have many incoming edges from other network’s nodes, especially from other
    important nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The step followed by the PageRank algorithm are straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: Assign an initial PageRank score to each node, equal to 1/N (where N is the
    total number of nodes in the network).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply the basic PageRank update rule. It states that each node provides to his
    neighbors nodes an equal fraction of its PageRank score.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The new PageRank score of each node is updated as the sum of the values it receive
    from its neighbors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These steps are repeated until the PageRank scores converge to stable values.
  prefs: []
  type: TYPE_NORMAL
- en: If we take the following 25 nodes network, which I synthetically generated,
    it is extremely complex to state which is the most influential.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f07ccf53bd8e646c79cab0d109d8b693.png)'
  prefs: []
  type: TYPE_IMG
- en: Synthetic Network generated with the PAM algorithm. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We may have some clues, but the PageRank algorithm makes our lives easier by
    assigning a mathematical value to each node's importance. Fortunately, NetworkX
    has an in-built PageRank method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can clearly see from the results that nodes 0, 7, and 6 have the highest
    PageRank score.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1b629c985b9f5d750ee12efd0b0fe741.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: HITS Algorithm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The HITS algorithm aims to identify **two types of important nodes** in a network:
    hubs and authorities.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hubs** are the nodes that point to many other nodes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authorities** are the nodes that are pointed to by many hubs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Differently than PageRank, with HITS we can not only measure the importance
    of each node in the network but also extrapolate insights about its role in the
    graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps followed by the HITS algorithm are:'
  prefs: []
  type: TYPE_NORMAL
- en: Assign to each node in the network an Authority score and an Hub score equal
    to 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply the Authority Update Rule to each node. The Authority score of a node
    is the sum of the Hub score of the nodes pointing to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply the Hub Update Rule to each node. The Hub score of a node is the sum of
    the Authority score of the nodes it is pointing at.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After each iteration, we update the Authority and Hub scores. After a large
    number of iterations both the scores should converge.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to the NetworkX library, we can compare the HITS results with the ones
    provided by NetworkX.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We clearly see how the nodes with the higher Authority score are among the ones
    with the higher PageRank score. Node 0 ranks first in both the two metrics, and
    nodes 7, 6, and 5 are among the top ones.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d6bb2451d1563079f9ea5e8875033f99.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: What PageRank misses is the “Hub” role of nodes 13, 8, 10 and20\. They are connected
    with relevant nodes, so we can affirm they play a significant role in the network.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this post, we saw how extracting information from networks is made more accessible
    through specialized libraries like NetworkX. Most metrics and network algorithms
    can be computed with a single function.
  prefs: []
  type: TYPE_NORMAL
- en: What we saw is only an introduction to social network analysis in machine learning,
    topics that should be part of every data scientist toolkit. While we’ve touched
    upon some fundamental concepts, the field extends far beyond these introductory
    insights.
  prefs: []
  type: TYPE_NORMAL
- en: I recommend digging into the resources and references attached to this article.
  prefs: []
  type: TYPE_NORMAL
- en: If you liked this story, consider following me to be notified of my upcoming
    projects and articles!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of my past projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/ensemble-learning-with-scikit-learn-a-friendly-introduction-5dd64650de6c?source=post_page-----6123eddced3--------------------------------)
    [## Ensemble Learning with Scikit-Learn: A Friendly Introduction'
  prefs: []
  type: TYPE_NORMAL
- en: Ensemble learning algorithms like XGBoost or Random Forests are among the top-performing
    models in Kaggle competitions…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'towardsdatascience.com](/ensemble-learning-with-scikit-learn-a-friendly-introduction-5dd64650de6c?source=post_page-----6123eddced3--------------------------------)
    [](/use-deep-learning-to-generate-fantasy-character-names-build-a-language-model-from-scratch-792b13629efa?source=post_page-----6123eddced3--------------------------------)
    [## Use Deep Learning to Generate Fantasy Names: Build a Language Model from Scratch'
  prefs: []
  type: TYPE_NORMAL
- en: Can a language model invent unique fantasy character names? Let’s build it from
    scratch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/use-deep-learning-to-generate-fantasy-character-names-build-a-language-model-from-scratch-792b13629efa?source=post_page-----6123eddced3--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Social network analysis](https://en.wikipedia.org/wiki/Social_network_analysis)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NetworkX](https://networkx.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Network Science — Albert-László Barabás](http://networksciencebook.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Social Network Analysis: Methods and Applications — Stanley Wasserman, Katherine
    Faust](https://www.cambridge.org/core/books/social-network-analysis/90030086891EB3491D096034684EFFB8)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Applied Social Network Analysis in Python](https://www.coursera.org/learn/python-social-network-analysis)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
