- en: Should We Be Virtualizing Our Data Science Systems —or Not?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/should-we-be-virtualizing-our-data-science-systems-and-or-not-6cb69b4850f3](https://towardsdatascience.com/should-we-be-virtualizing-our-data-science-systems-and-or-not-6cb69b4850f3)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/5f30971c4f4c248f248ced63c885dacc.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: Author’s Current Homelab Setup
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: It can be hard to navigate the pros and cons of virtualizing data science processes,
    but some power and performance trends cannot be ignored
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@willkeefe?source=post_page-----6cb69b4850f3--------------------------------)[![Will
    Keefe](../Images/e26b5d394bd268f2b7e333d4b45711eb.png)](https://medium.com/@willkeefe?source=post_page-----6cb69b4850f3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6cb69b4850f3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6cb69b4850f3--------------------------------)
    [Will Keefe](https://medium.com/@willkeefe?source=post_page-----6cb69b4850f3--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6cb69b4850f3--------------------------------)
    ·12 min read·Sep 12, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: As utilizing “big data” is more and more relevant for problem-solving across
    every industry, data repositories of homelab and data-lake scale alike require
    more parallelized computing power to extract, transform, load, and analyze data
    than ever before. While creating my own homelab, the decision to create my parallelized
    setups over virtual machines or natively on hardware left me stumped, and I struggled
    to find performance comparisons. In this article, we’ll explore some of the pros
    and cons of each setup, as well as a side-by-side performance and benchmarks of
    each methodology both virtual and native.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many of parallelized compute clusters include multiple nodes, or computers designated
    to process tasks distributed over them in a cluster. Managing such nodes can be
    a major headache, hence why [Data Engineering is so lucrative](https://www.thinkful.com/blog/data-analyst-vs-data-engineer/#:~:text=Data%20Analysis%20or%20Data%20Engineering,hand%2C%20is%20%24112%2C288%20a%20year.)
    compared to their analytical counterparts. Typically, companies will manage entire
    fleets of clusters, which would make it almost impossible to give individual attention
    to individual nodes, and instead “high availability” setups with tools such as
    Proxmox, Kubernetes, and Docker Swarm are requirements for the modern enterprise.
    You’ve likely already interacted with these clusters and not realized this week,
    even — the chicken sandwich I had for lunch from Chick-fil-A is famously fulfilled
    via an [edge-computing Kubernetes cluster](https://medium.com/chick-fil-atech/enterprise-restaurant-compute-f5e2fd63d20f)
    with their point-of-sale system.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many benefits to computing in virtualized machines, including:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟化机器上计算有许多好处，包括：
- en: Entire operating systems can be rapidly deployed from corporate servers to the
    field nearly instantaneously
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个操作系统可以从企业服务器快速部署到现场，几乎是瞬时的
- en: Images can be backed up in real-time
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像可以实时备份
- en: Deployments can be containerized to limit scope and increase security
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署可以容器化以限制范围并增加安全性
- en: In the event of hardware failures, systems can be migrated with minimal downtime
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在硬件故障的情况下，系统可以在最小的停机时间内迁移
- en: These are not new concepts by any means, but with a growing need for data analysis
    at every level of organizations, the way parallelized deployments are accessed
    can and should vary, as the downside of virtualization is generally the further
    from bare metal you get, the more your system’s performance will be impacted.
    While one developer working on an Excel file may not be impacted, data analysis
    in the gigabytes or even terabytes needs to carefully consider how and when to
    use virtual tools, and to build setups that keep processing capability in mind.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些并不是新概念，但随着每个组织对数据分析需求的增加，访问并行化部署的方式可以并且应该有所不同，因为虚拟化的缺点通常是你离裸金属越远，你的系统性能受到的影响就越大。虽然一个开发者在处理一个
    Excel 文件时可能不会受到影响，但在处理几GB甚至TB的数据时，需要仔细考虑如何以及何时使用虚拟工具，并建立考虑处理能力的设置。
- en: Setting up our comparison
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的比较
- en: To put this to the test, we can compare the setup of a small to medium-sized
    organization using enterprise hardware readily available (I can’t afford the good
    stuff). In my homelab, I have a computing cluster built from multiple refurbished
    enterprise units. I have a few other articles linked below on how I built this
    setup, and what I use it for, but now let's compare the performance between a
    virtual system and a bare metal system and measure the impact of virtualization
    specifically.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证这一点，我们可以比较使用 readily available 企业硬件的小型到中型组织的设置（我负担不起那些高级设备）。在我的家庭实验室中，我有一个由多个翻新的企业单元构建的计算集群。我在下面的一些文章中链接了如何构建此设置以及我的用途，但现在让我们比较虚拟系统和裸金属系统之间的性能，并特别测量虚拟化的影响。
- en: '[](/a-complete-guidebook-on-starting-your-own-homelab-for-data-analysis-552c9f532ff0?source=post_page-----6cb69b4850f3--------------------------------)
    [## A Complete Guidebook on Starting Your Own Homelab for Data Analysis'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 关于启动自己的数据分析家庭实验室的完整指南](/a-complete-guidebook-on-starting-your-own-homelab-for-data-analysis-552c9f532ff0?source=post_page-----6cb69b4850f3--------------------------------)'
- en: There has never been a better time to start your data science homelab for analyzing
    data useful to you, storing…
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在是启动你的数据科学家庭实验室以分析对你有用的数据的最佳时机，存储……
- en: towardsdatascience.com](/a-complete-guidebook-on-starting-your-own-homelab-for-data-analysis-552c9f532ff0?source=post_page-----6cb69b4850f3--------------------------------)
    [](https://betterprogramming.pub/building-python-distributed-machine-learning-models-for-derivatives-on-homelab-cluster-dd9cb1d97e23?source=post_page-----6cb69b4850f3--------------------------------)
    [## Building Distributed Machine Learning Models on a Homelab Cluster with Python
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/a-complete-guidebook-on-starting-your-own-homelab-for-data-analysis-552c9f532ff0?source=post_page-----6cb69b4850f3--------------------------------)
    [](https://betterprogramming.pub/building-python-distributed-machine-learning-models-for-derivatives-on-homelab-cluster-dd9cb1d97e23?source=post_page-----6cb69b4850f3--------------------------------)
    [## 在家庭实验室集群上使用 Python 构建分布式机器学习模型'
- en: Using affordable homelab equipment we set up ourselves, it is easy to set up
    parallelized and distributed machine…
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用我们自己设置的经济实惠的家庭实验室设备，设置并行和分布式机器非常简单……
- en: betterprogramming.pub](https://betterprogramming.pub/building-python-distributed-machine-learning-models-for-derivatives-on-homelab-cluster-dd9cb1d97e23?source=post_page-----6cb69b4850f3--------------------------------)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[betterprogramming.pub](https://betterprogramming.pub/building-python-distributed-machine-learning-models-for-derivatives-on-homelab-cluster-dd9cb1d97e23?source=post_page-----6cb69b4850f3--------------------------------)'
- en: Since writing the above articles, I’ve upgraded my setup slightly by adding
    in six HP EliteDesk 800 G3 Minis with Intel Core i7–7700 processors, 32 GB of
    DDR4–2400 RAM, and 256–512 GB SATA III SSDs. I purchased these units cheap at
    around $80 a unit from an auction site and paid around an extra $30–40 a piece
    to trick them out with new RAM and hard drives. The processors are all 65W models
    with 90W power supplies. The processors are even by today’s standards nothing
    to snuff at, turbo [boosted over 4Ghz](https://www.cpubenchmark.net/cpu.php?cpu=Intel+Core+i7-7700+%40+3.60GHz&id=2905)
    and 4 cores, 8 threads.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: For the comparison today I have two nodes, side by side. One node is running
    Proxmox, a Linux OS that is optimized for virtualization and deployment, running
    a Windows 10 Pro VM and the other node is running Windows 10 Pro on bare metal.
    There is no “right” OS to use, as it is heavily dependent on the tools one prefers
    using, but each has its own pros and cons.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Proxmox
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the pros of Proxmox is it claims to only marginally impact baseline processing.
    At rest, we can see the hypervisor I’ve deployed on a node is idling with very
    low resource usage. The below screenshot captures the performance summary of only
    one node. We can see at idle only a fraction of a percent of the CPU is being
    used, which correlates to very limited wattage (and power bills) as well.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/871ce8cb966bab307db68ea7d631d1c8.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: Dashboard for a specific node — Screenshot by Author
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Once a guest OS is deployed, however, it's a totally different story. Resource
    utilization at that point is determined nearly entirely by the VM configuration.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'A few of the notes I’ve learned from playing around with Proxmox are:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: There is a fairly steep learning curve. This is an enterprise tool, and while
    plenty of documentation exists for using Proxmox, expect to spend a significant
    amount of time reading the documentation, forums, and even Reddit threads.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On a similar but positive note, plenty of documentation is available for solving
    problems as they arise, and the community built around the platform is strong.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proxmox, while having a very intuitive GUI, still requires some “thinking outside
    of the box” to solve problems. For example, once I created a Windows VM and tweaked
    it to the standard I wanted, I couldn’t “drag and drop it” to another node with
    the same ease I had starting the image for the first time. I had to create networked
    attached storage (NAS) by adding an external drive to a broken laptop I have running
    Windows as an SMB share (some folks may remember the fabled glowing laptop in
    the corner of my apartment from my first article). This storage acted as a middleman
    and backup repository for cloning and migrating my VMs.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’m not a big Linux guy. I know, I know, I really ought to dive a little deeper
    into it, but the convenience Macs and Windows PCs have offered me over the years
    have led me to struggle at first whenever trying to complete an operation with
    a CLI that I normally can just fumble through by clicking.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我不是一个很精通 Linux 的人。我知道，我知道，我确实应该深入研究一下，但多年来 Mac 和 Windows PC 的便利性使得我在尝试用 CLI
    完成操作时会感到挣扎，而这些操作我通常可以通过点击来完成。
- en: Proxmox is very easily scalable. Adding my first node to a cluster or “datacenter”
    as it's referred to took a little while for me to figure out, but adding all of
    the other nodes took no time at all. Out of the box I was able to customize each
    node the way I wanted by completing admin tasks such as assigning static IP addresses.
    Deploying VMs took mere minutes once I got the hang of it too.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Proxmox 非常容易扩展。将第一个节点添加到集群或所谓的“数据中心”花了一些时间才弄明白，但添加其他节点则没有花费任何时间。一开始我能够通过完成分配静态
    IP 地址等管理员任务，按照我的要求自定义每个节点。一旦掌握了技巧，部署虚拟机也只需几分钟。
- en: It's pretty cool, and I really geek out on the dashboard that presents all of
    the operating statistics that I closely monitor during operation. Below in the
    screenshot, we can see the dashboard monitoring not only one of the node’s usage
    but also notes on our other nodes as well. Being able to flex between nodes in
    our data center is huge when monitoring on bare metal may require remoting between
    instances.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这非常酷，我非常喜欢那个展示所有操作统计数据的仪表板，我在操作过程中会密切监控。下图中，我们可以看到仪表板不仅监控了一个节点的使用情况，还记录了其他节点的情况。能够在数据中心的节点之间灵活切换是巨大的，当在裸机上监控可能需要在实例之间远程操作时。
- en: '![](../Images/84d4b439d2ee079747066aedcf599366.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/84d4b439d2ee079747066aedcf599366.png)'
- en: Proxmox GUI on homelab — Screenshot by Author
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Proxmox 图形界面在家庭实验室 — 作者截屏
- en: Finally, one thought I had in retrospect is that no matter how much time I’ve
    spent configuring Windows VMs to operate exactly how I want them (it took me all
    night earlier this week to configure nested virtualization the way I wanted to
    get Docker to work), there is always one more barrier or bottleneck.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，回顾起来我想到的一个问题是，不管我花了多少时间来配置 Windows 虚拟机以使其完全按照我希望的方式运行（本周早些时候，我花了一整晚来配置嵌套虚拟化以使
    Docker 能够运行），总是会有一个额外的障碍或瓶颈。
- en: Containerizing
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器化
- en: I won’t even measure a comparison for Docker, as the containers I was trying
    to spin up in the VM (a Minecraft server for an obligatory bi-annual Minecraft
    night with friends from college) would not even reach an acceptable level of performance
    (the server could not keep up and was unplayable). While my weekend plans were
    slightly foiled if I intended to use nested virtualization, there are practical
    applications that could be impacted as well.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我甚至不会对 Docker 进行比较，因为我在虚拟机中尝试启动的容器（一个为每半年一次的大学朋友 Minecraft 夜晚准备的 Minecraft 服务器）甚至无法达到令人满意的性能水平（服务器无法跟上，且无法进行游戏）。虽然如果我打算使用嵌套虚拟化，我的周末计划略有受阻，但也有实际应用可能会受到影响。
- en: One tool I frequently use for work and play is PyCaret, a Python library dedicated
    to ensemble machine-learning models. ML models frequently have processor or architecture-specific
    caveats, such as PyCaret not working on M1 Macs due to the ARM architecture, Tensorflow
    not being optimized for a Radeon graphics card I was using, and Autogluon not
    building on my i7 Mac (I don’t even know why). As a result, frequently these packages
    are containerized into Docker applications for portability. I’ve also been looking
    into DynamoDB localized in docker to take advantage of a powerful AWS NoSQL architecture
    without needing to pay the big bills associated with it in the cloud. Time and
    speed are the selling point of these tools, and the impact of nested virtualization
    on Docker is huge (at least on these PCs). In fact, the performance decrease is
    compounding at each level of virtualization, [with performance decreases of 10%
    or more at each level](https://cloud.google.com/compute/docs/instances/nested-virtualization/overview).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常用于工作和娱乐的一个工具是 PyCaret，一个专注于集成机器学习模型的 Python 库。机器学习模型常常有处理器或架构特定的注意事项，比如 PyCaret
    不适用于 M1 Macs，因为 ARM 架构的原因，Tensorflow 没有针对我使用的 Radeon 显卡进行优化，而 Autogluon 在我的 i7
    Mac 上无法构建（我甚至不知道为什么）。因此，这些包通常被容器化成 Docker 应用程序以实现便携性。我还在研究本地化到 Docker 的 DynamoDB，以利用强大的
    AWS NoSQL 架构，而无需支付云端相关的高额费用。时间和速度是这些工具的卖点，而嵌套虚拟化对 Docker 的影响是巨大的（至少在这些 PC 上）。实际上，性能下降在每一级虚拟化中都是递增的，[每一级的性能下降超过
    10%](https://cloud.google.com/compute/docs/instances/nested-virtualization/overview)。
- en: One added reflection to share with folks who would point it out is that LXCs
    (Linux containers) that can run Docker are running on the host OS itself, so large
    programs like ML models that could cause kernel panics, like memory swap failures,
    will kill not only the container but also the OS (instead of just a guest OS alone).
    Therefore, I wasn’t even considering using them here, although they are definitely
    a useful tool for lighter applications.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些可能会指出这一点的人来说，一个额外的反思是，能够运行 Docker 的 LXCs（Linux 容器）是在主机操作系统上运行的，因此像 ML 模型这样的大型程序可能会导致内核崩溃，如内存交换失败，不仅会杀死容器，还会影响操作系统（而不仅仅是客操作系统）。因此，我甚至没有考虑在这里使用它们，尽管它们无疑是轻量级应用程序的有用工具。
- en: Even without measuring, we can see that getting as close to bare metal as possible
    improves the performance of our tools. Some folks however have been able to produce
    great performance and remain virtualized. [AWS Nitro](https://aws.amazon.com/ec2/nitro/),
    for example, is a real differentiator in the field that has contributed to Amazon’s
    wide-scale computing and data warehousing success, albeit, at a significant cost
    that makes some data science tools such as Sagemaker cost what I paid for each
    of my desktops in one month for one notebook. We can see below that one standard
    instance of a Sagemaker studio notebook for eight hours a day, five days a week
    with similar specs to our machine (even with a limited clock speed too) costs
    approximately $75 a month. All in all, each of my units costs maybe $100–120 a
    node with their upgrades, and power is affordable at 10–15W idle and 65W at peak.
    This roughly equates to maybe $2–3 a month in electricity. This is nearly an order
    of magnitude of savings over the entire year.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 即使没有测量，我们也可以看到尽可能接近裸金属的方式能提升工具的性能。然而，一些人能够在虚拟化环境中仍然实现出色的性能。例如，[AWS Nitro](https://aws.amazon.com/ec2/nitro/)就是该领域中的一个真正的差异化因素，它为亚马逊的大规模计算和数据仓储成功做出了贡献，尽管这需要巨大的成本，使得一些数据科学工具如Sagemaker的费用相当于我为每台桌面电脑在一个月内支付的费用来租用一台笔记本电脑。我们可以看到下面一个标准的Sagemaker工作室笔记本实例，每天使用八小时，一周五天，规格与我们的机器相似（甚至时钟速度有限），大约每月需
    $75。总体来看，每个单元的成本可能在 $100–120 之间，升级后，功耗在待机状态下约为 10–15W，峰值为 65W。这大致相当于每月 $2–3 的电费。这与整年相比节省了近一个数量级。
- en: '![](../Images/e7d6cb4db1a37a0f4e28be339840d177.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e7d6cb4db1a37a0f4e28be339840d177.png)'
- en: Sagemaker Calculated costs via AWS’s public cost estimator — Screenshot taken
    by Author
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Sagemaker 计算成本通过 AWS 的公共成本估算器 — 作者截图
- en: That being said, I’m sure as time progresses and better, faster hardware is
    available on the consumer and second-hand market, the gap between virtualized
    performance and physical performance will shrink. If [Intel](https://medium.com/u/fb610dd2569b?source=post_page-----6cb69b4850f3--------------------------------)
    wants to send me an i9–13900K or [NVIDIA AI](https://medium.com/u/ab69c39a85e1?source=post_page-----6cb69b4850f3--------------------------------)
    an RTX 4090 though, I’d be happy to put it to the test and report back to everyone.
    In the meantime, I’ll settle for my HP mini pcs and AWS free tier for my data
    analysis and virtualization needs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我相信随着时间的推移以及更好、更快的硬件在消费者和二手市场上的出现，虚拟化性能与实际性能之间的差距会缩小。如果[英特尔](https://medium.com/u/fb610dd2569b?source=post_page-----6cb69b4850f3--------------------------------)想送我一台
    i9–13900K 或[NVIDIA AI](https://medium.com/u/ab69c39a85e1?source=post_page-----6cb69b4850f3--------------------------------)送我一台
    RTX 4090，我会很乐意进行测试并向大家汇报。与此同时，我将满足于我的 HP mini 电脑和 AWS 免费套餐来满足我的数据分析和虚拟化需求。
- en: The Comparison
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较
- en: For actually comparing virtual versus physical performance, we will perform
    both a generalized benchmark test, and then a Python performance test on both
    the Windows 10 VM and physical system. I’ll note here that I am allocating the
    same number of cores and RAM to both the VM and PC (although this feels a little
    risky to me on the VM side, as I have had issues allocating “all” cores because
    it has impacted host hypervisor performance before which cause a system failure).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实际比较虚拟性能与物理性能，我们将对 Windows 10 虚拟机和物理系统分别进行一般化的基准测试，然后进行 Python 性能测试。在这里我要说明的是，我为虚拟机和
    PC 分配了相同数量的核心和 RAM（虽然这让我在虚拟机方面有点冒险，因为我曾经在分配“所有”核心时遇到过问题，因为这影响了宿主虚拟化程序的性能，导致系统故障）。
- en: Without further delay, below is a snapshot of the [benchmark](https://www.userbenchmark.com/)
    built off of userbenchmark.com for the VM, run locally. Below we can see that
    the VCPU is performing well below baseline and average, and our RAM is just slightly
    so. This is indicative that either our CPU is not being well utilized, or there
    is a significant amount of overhead on the CPU hosting the VM during these mathematically
    intense operations during testing. See the screenshot for specific metrics such
    as integer calculation performance.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不拖延，以下是基于 userbenchmark.com 为虚拟机构建的 [基准测试](https://www.userbenchmark.com/)
    快照，运行于本地。以下我们可以看到 VCPU 的性能远低于基线和平均水平，我们的 RAM 也仅稍微低于基线。这表明要么我们的 CPU 没有得到充分利用，要么在测试期间这些数学密集型操作中，托管虚拟机的
    CPU 存在大量开销。具体的整数计算性能等指标见截图。
- en: '![](../Images/7a0deab40be12559b20236689bfd3650.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7a0deab40be12559b20236689bfd3650.png)'
- en: Screenshot by Author
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图
- en: Not looking too hot overall, although the unit itself is putting out some BTUs
    right now.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 整体表现不算特别好，尽管单位本身目前输出了一些 BTUs。
- en: Let’s also now assess performance by running a simple Python script as a baseline
    (and note that this is running single-threaded due to the GIL). The unscientific
    Python script below I made up to create a rough “speed calculation” for comparing
    relative performance.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过运行一个简单的 Python 脚本作为基准来评估性能（请注意，由于 GIL，该脚本是单线程运行的）。下面的非科学 Python 脚本是我编写的，用于创建一个粗略的“速度计算”以比较相对性能。
- en: 'In two cells we are first:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个单元格中，我们首先进行：
- en: Counting to an arbitrarily large number and adding each number to a list
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算一个任意大的数字并将每个数字添加到列表中
- en: Multiplying increasingly large numbers in a loop
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在循环中乘以越来越大的数字
- en: Each of these tests is timed and repeated to come up with a baseline of relative
    performance for comparing the speed of processing and memory IO. The code snips
    are also below, in case you are interested in running it yourself to compare further.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 每个测试都有时间限制，并且会重复执行，以建立相对性能的基线，用于比较处理速度和内存 IO。以下是代码片段，供你感兴趣时自行运行以进一步比较。
- en: '[PRE0]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/a3fd2855e045d18be71e53f3225320dd.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a3fd2855e045d18be71e53f3225320dd.png)'
- en: Python Running in Virtual Machine’s Jupyter Notebook Instance — Screenshot by
    Author
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟机的 Jupyter Notebook 实例中运行 Python — 作者截图
- en: The first script finished in 8.84ms and the second finished in 11.5ms on average.
    We’ll compare these numbers on the VM to bare metal soon.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个脚本平均完成时间为 8.84ms，第二个脚本平均完成时间为 11.5ms。我们将很快在虚拟机和裸金属之间比较这些数据。
- en: After running our scripts, we can see that a good chunk of RAM is in use, however,
    the CPU is not tracking much utilization at all, although I’d be concerned over
    rubber banding if attempting to distribute this task over multiple threads. 12.5GB
    being used at idle is a significant amount of overhead and should be optimized
    with further research.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行我们的脚本后，我们可以看到相当一部分RAM在使用中，然而，CPU的利用率几乎没有增加，不过如果尝试在多个线程中分配此任务，我会担心弹性带来的问题。12.5GB的空闲内存是一个显著的开销，应通过进一步的研究进行优化。
- en: '![](../Images/6b73b18862810ddfb3df704818d14647.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6b73b18862810ddfb3df704818d14647.png)'
- en: Screenshot of Task Manager by Author
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的任务管理器截图
- en: Now for bare metal…
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现在谈谈裸金属……
- en: Running Windows 10 Pro natively on actual hardware we can see significantly
    better benchmarks for performance using the same test suite we used for the VM.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际硬件上原生运行Windows 10 Pro，我们可以看到使用相同测试套件的性能基准显著提高，这与虚拟机上使用的测试套件相同。
- en: '![](../Images/64d03b0c4b44c9268be859b3ff1d0300.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/64d03b0c4b44c9268be859b3ff1d0300.png)'
- en: Screenshot by Author
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图
- en: Our processor is tracked at performing nearly twice at integer comparison in
    Windows natively as virtualized; it really blew the VM out of the water. We are
    much closer to our baseline and the process average in general. As for our RAM,
    we had significantly better read and write speeds, and when operating on a single
    core our throughput was nearly 3x better. Operating on bare metal truly makes
    a huge impact on IO and processing speed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的处理器在Windows原生模式下的整数比较性能几乎是虚拟化模式的两倍，这使得虚拟机的表现大打折扣。我们现在更接近基准线，一般而言，处理过程的平均水平也有所提高。至于我们的RAM，读写速度显著提升，当在单核上运行时，吞吐量几乎提高了3倍。直接在裸金属上运行对IO和处理速度确实产生了巨大的影响。
- en: When running our Python tests, we noted similar jumps in performance. Our test
    scripts ran twice as fast as they did virtualized at 4.06ms for test 1 and 6.04ms
    for test 2\. This is half the speed of the original tests on the VM.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行我们的Python测试时，我们注意到性能有类似的跳跃。我们的测试脚本运行速度是虚拟化模式的两倍，测试1为4.06毫秒，测试2为6.04毫秒。这是虚拟机上原始测试速度的一半。
- en: '![](../Images/37490889ae6b482c59cd4fbf2caf59eb.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/37490889ae6b482c59cd4fbf2caf59eb.png)'
- en: Screenshot of Jupyter Notebook of Bare Metal by Author
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的裸金属Jupyter Notebook截图
- en: Running unvirtualized, we can also see the used RAM is half of what the VM occupied
    at idle. All in all, this shows that running on bare metal can lead to significant
    improvements in processing and memory performance compared to the same hardware
    running virtual machines.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在未虚拟化的情况下，我们还可以看到使用的RAM是虚拟机空闲时的一半。总的来说，这表明与运行虚拟机的相同硬件相比，裸金属运行可以显著改善处理和内存性能。
- en: '![](../Images/735a780de6f349549ee68641c1789404.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/735a780de6f349549ee68641c1789404.png)'
- en: Screenshot of Task Manager by Author
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的任务管理器截图
- en: There is no one-size-fits-all solution to every team’s unique data science needs.
    For the enterprise, it may make sense to spend more on virtual analytical tools
    where security and performance can be closely monitored. Smaller companies may
    be able to leverage cloud tools too, depending on the size of their wallets. For
    individual and small research teams, however, building on bare metal may be a
    necessity for optimal performance.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 每个团队独特的数据科学需求没有一刀切的解决方案。对于企业而言，花更多的钱用于虚拟分析工具可能更为合理，因为这些工具的安全性和性能可以得到严格监控。较小的公司也可以利用云工具，具体取决于它们的预算。然而，对于个人和小型研究团队来说，基于裸金属的构建可能是实现最佳性能的必要条件。
- en: The strategy I used for building my projects and pipelines is not to focus on
    managing particular hosts and nodes, but rather to keep a backup of a fresh install
    of Windows (minus the bloatware) that has exactly what I need preinstalled — certain
    Python packages, code redistributables, server connections, etc. The rest of the
    project is centralized in a code repo that I can copy and deploy to nodes for
    processing at runtime. Gigabit connection speeds that are ubiquitous to most computers
    from the mid-2010s forward are more than fast enough to transmit data for data
    science libraries and packages. Therefore, the need for high-availability computing
    and OS uptime is decreased, as I manage the hard drives in bulk and do not make
    large changes locally. Some services still require some active management, such
    as containers running in Docker, but those would require fairly active management
    anyway, and having it on my native Windows 10 Pro installation makes more sense
    for how I want to spend my time because stuff is going to break either way.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我用于构建项目和管道的策略不是专注于管理特定的主机和节点，而是保持一个新安装的 Windows（去除多余软件）的备份，其中预安装了我所需的所有内容——某些
    Python 包、代码重新分发包、服务器连接等。项目的其余部分集中在一个代码库中，我可以在运行时将其复制并部署到节点进行处理。从2010年代中期开始，大多数计算机都具备的千兆连接速度足够快，可以传输数据科学库和包。因此，对高可用计算和操作系统正常运行时间的需求减少了，因为我大规模管理硬盘，不会在本地进行大规模更改。一些服务仍然需要主动管理，例如在
    Docker 中运行的容器，但这些服务无论如何都需要相当活跃的管理，将其放在我的本地 Windows 10 专业版安装中，更符合我如何支配时间的方式，因为无论如何都会发生故障。
- en: What do you think? Where do you run your code? What tools and platforms do you
    prefer to host your data science workflows? Let me know below, or feel free to
    network with me on [LinkedIn](https://www.linkedin.com/in/will-keefe-476016127/)!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你怎么看？你在哪里运行你的代码？你倾向于使用哪些工具和平台来托管你的数据科学工作流？请在下面告诉我，或者随时在 [LinkedIn](https://www.linkedin.com/in/will-keefe-476016127/)
    上与我建立联系！
- en: Curious about the hardware I’m using? Check out my reviews at [www.willkeefe.com](http://www.willkeefe.com)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对我使用的硬件感兴趣？查看我在 [www.willkeefe.com](http://www.willkeefe.com) 上的评论。
