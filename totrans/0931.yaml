- en: Introduction to Genetic Algorithms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/from-biology-to-computing-an-introduction-to-genetic-algorithms-b39476743483](https://towardsdatascience.com/from-biology-to-computing-an-introduction-to-genetic-algorithms-b39476743483)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Discover the power of evolutionary computing and how to apply it to everyday
    problems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@egorhowell?source=post_page-----b39476743483--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----b39476743483--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b39476743483--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b39476743483--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----b39476743483--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b39476743483--------------------------------)
    ·6 min read·Apr 17, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e410603becb8f4c414e88ace60f06e32.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Warren Umoh](https://unsplash.com/@warrenumoh?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Charles Darwin developed his [***theory of evolution***](https://en.wikipedia.org/wiki/Evolution)in
    the 19th century little did he know that this theory would have a profound impact
    on computational algorithms***.***
  prefs: []
  type: TYPE_NORMAL
- en: The ideas of natural selection, survival of the fittest, mutation, and cross-overall
    lead to the ‘best’ variants surviving and carrying the ‘best’ traits forward.
    John Henry Holland took these concepts and pioneered the [***meta-heuristic***](https://en.wikipedia.org/wiki/Metaheuristic)[***genetic
    algorithm***](https://en.wikipedia.org/wiki/Genetic_algorithm)in 1975 to solve
    mathematical optimizationproblems***.*** This is not the first time biological
    processes have influenced machine learning. Perhaps the most notable is Frank
    Rosenblattdeveloping the [***neural network perceptron***](https://en.wikipedia.org/wiki/Perceptron)
    in 1958inspired by the real neurons in the brain.
  prefs: []
  type: TYPE_NORMAL
- en: Most genetic algorithms are used to solve [***combinatorial optimization***](https://en.wikipedia.org/wiki/Combinatorial_optimization)
    problems where the [***brute-force search***](https://en.wikipedia.org/wiki/Brute-force_search)
    is intractable due to the sheer magnitude of permutations and combinations. Example
    include the [***knapsack***](https://en.wikipedia.org/wiki/Knapsack_problem) and
    [***traveling salesman***](https://en.wikipedia.org/wiki/Travelling_salesman_problem)
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a Data Scientist, chances are you will come across problems like
    these in your career, therefore it is worth understanding how to approach them
    and this post will cover one of the best and most common methods. We will dive
    into the theory, methodology, and general uses of genetic algorithms to show how
    you can implement them to solve almost any optimization problem.
  prefs: []
  type: TYPE_NORMAL
- en: Notation & Terminology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Much of the terminology for genetic algorithms derive from its corresponding
    biological process:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Encoding & Decoding**: *Mapping the problem to a conveniently numerical format
    for the algorithm to utilize. Common techniques include* [***binary and permutation
    encoding.***](https://www.obitko.com/tutorials/genetic-algorithms/encoding.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Population:** *A set of possible solutions.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chromosome:** *A single possible solution.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gene:** *A positional representation of one element in the chromosome.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Allele**: *The value of a Gene.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fitness Function:** *A score is given to each solution to determine its ‘fitness’
    to the optimization problem.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These different terms can be visually demonstrated below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/78340c76994f7e32fa61b616488c0565.png)'
  prefs: []
  type: TYPE_IMG
- en: Diagram by author.
  prefs: []
  type: TYPE_NORMAL
- en: Algorithm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Initialisation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The algorithm begins by generating an initial population for the problem. This
    needs to be adequately diverse with a range of solutions from the possible search
    space with a total number in the ***100s*** or ***1000s*** ideally.
  prefs: []
  type: TYPE_NORMAL
- en: Selection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After we have our population, we need to ***select*** solutions (parents) to
    take forward to produce offspring for the next generation. The parents are selected
    based on their fitness to ensure the ‘best’ genes are passed on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some [techniques](https://en.wikipedia.org/wiki/Selection_%28genetic_algorithm%29)
    for selection are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Elitism:** *Choose a certain number of solutions in the current population
    with the best fitness function.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Roulette Wheel:**](https://en.wikipedia.org/wiki/Fitness_proportionate_selection)*Sample
    from a probability distribution of the solutions (chromosomes) in the current
    population where each solution’s probability,* ***p_s****, is proportional to
    its fitness score,* ***f_s****:*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/b3a6659302b278f49252377a9c8b3ca4.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation generated by author in LaTeX.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Tournament**](https://en.wikipedia.org/wiki/Tournament_selection)**:** *This
    involves selecting solutions at random and running tournaments with these subset
    solutions where the winner is the one with the best fitness score.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many other methods for the selection process and different variants
    of the techniques listed above. You can also combine selection procedures to generate
    hybrid methods as well. There is no *‘one size fits all’* and it’s best to experiment
    with various types.
  prefs: []
  type: TYPE_NORMAL
- en: Crossover
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have our parents, we need to combine their genetic material to produce
    offspring to generate a new fitter population. Similarly to the selection stage,
    there exists sundry [***operators***](https://en.wikipedia.org/wiki/Operator_%28computer_programming%29)
    to carry out crossover, and it is very dependent on the type of encoding for the
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go through some of the [most common](https://en.wikipedia.org/wiki/Crossover_(genetic_algorithm)):'
  prefs: []
  type: TYPE_NORMAL
- en: '**One-point crossover:** *Swap the genes from a selected point on the parents’
    chromosomes:*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/5882b7305d624132f182c802fe6011bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Diagram by author.
  prefs: []
  type: TYPE_NORMAL
- en: '**Two-point crossover:** *Swap the genes from two selected points on the parents’
    chromosomes:*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/45439e13dd16bd5d945c2234dc5b86a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Diagram by author.
  prefs: []
  type: TYPE_NORMAL
- en: '**Uniform crossover:** *Each gene is randomly selected from the corresponding
    genes from the two parents:*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/13ff770c59bc0718c31664741443bfc2.png)'
  prefs: []
  type: TYPE_IMG
- en: Diagram by author.
  prefs: []
  type: TYPE_NORMAL
- en: These techniques are valid for binary-encoded chromosomes and for other different
    encodings other operators will probably be required. There is a great article
    linked [***here***](https://medium.com/geekculture/crossover-operators-in-ga-cffa77cdd0c8)
    that gives a comprehensive list of some more complex crossover operators.
  prefs: []
  type: TYPE_NORMAL
- en: Mutation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final step in the algorithm is [***mutation***](https://en.wikipedia.org/wiki/Mutation_%28genetic_algorithm%29).
    This is analogous to [***biological mutation***](https://en.wikipedia.org/wiki/Mutation)
    where offspring can have a random alteration to its DNA. A mutation is a slight
    modification to the genes in a solution with a small probability. If the probability
    is high, then the genetic algorithm becomes a [***random search***](https://en.wikipedia.org/wiki/Random_search)***.***
    The main motivation behind the mutation operator is to diversify the population
    and reduce the chance of [***local optima***](https://en.wikipedia.org/wiki/Maximum_and_minimum).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/97a25926114e725beff85aa319789ff3.png)'
  prefs: []
  type: TYPE_IMG
- en: Diagram by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lets run through some [simple and easy to apply mutations](https://www.tutorialspoint.com/genetic_algorithms/genetic_algorithms_mutation.htm):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bit flip:** *Iterate through the genes in a chromosome and with each pass
    randomly flip a bit with a small probability:*'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/270f1a62905be6ee6f5a9b2931482ab5.png)'
  prefs: []
  type: TYPE_IMG
- en: Diagram by author.
  prefs: []
  type: TYPE_NORMAL
- en: '**Swap:** *Select two genes, with low probability, in the chromosome and swap
    them:*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/7ad22b1132e46480aff4f14b85ec323c.png)'
  prefs: []
  type: TYPE_IMG
- en: Diagram by author.
  prefs: []
  type: TYPE_NORMAL
- en: Linked [***here***](https://www.geeksforgeeks.org/mutation-algorithms-for-string-manipulation-ga/)
    is a further list of mutation operators.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Similarly to crossover, the above mutation operators are valid for binary-encoded
    problems, therefore may not be appropriate for other types of problems and encodings.
  prefs: []
  type: TYPE_NORMAL
- en: Termination
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The algorithm can end due to several reasons which are up to the users’ discretion:'
  prefs: []
  type: TYPE_NORMAL
- en: '*A certain number of generations reached*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*A desired fitness is achieved*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Computational resource exhausted*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Fitness score has plateaued*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Genetic algorithms are used in an assorted range of fields, including but not
    limited to:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Scheduling in production planning*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Vehicle routing problems*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Financial markets and portfolio optimization*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Training neural networks*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Image processing*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weaknesses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some vulnerabilities of the genetic algorithm are:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Scalability is not as good as other optimization algorithms, hence can have
    a long computing time*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Difficulty to adequately fine-tune hyperparameters such as mutation and selection
    can lead to non-convergence or useless results*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Doesn’t guarantee finding the global optimum, however, this is the trade-off
    of all meta-heuristic methods*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*An expensive and complex fitness function can also lead to long computation
    durations*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary & Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The genetic algorithm derives its name from the analogous process in evolutionary
    biology. It is a meta-heuristic optimization algorithm that starts from an initial
    population and iteratively uses the best solutions from the population to create
    new and better solutions (offspring) through the operators of selection, crossover,
    and mutation. It can be used in many areas such as medicine and supply chain but
    can suffer from long compute times depending on the evaluation metric and the
    hyperparameters are chosen.
  prefs: []
  type: TYPE_NORMAL
- en: Another Thing!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----b39476743483--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  prefs: []
  type: TYPE_NORMAL
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----b39476743483--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Connect With Me!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**YouTube**](https://www.youtube.com/@egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**GitHub**](https://github.com/egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References & Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Algorithms for Optimization*](https://mitpress.mit.edu/9780262039420/algorithms-for-optimization/)*.*
    [Mykel J. Kochenderfer](https://mitpress.mit.edu/author/mykel-j-kochenderfer-18773)
    and [Tim A. Wheeler](https://mitpress.mit.edu/author/tim-a-wheeler-28144). ***2019***.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Combinatorial Optimization: Theory and Algorithms.*](https://link.springer.com/book/10.1007/978-3-662-56039-6)
    [Bernhard Korte](https://www.amazon.co.uk/s/ref=dp_byline_sr_book_1?ie=UTF8&field-author=Bernhard+Korte&text=Bernhard+Korte&sort=relevancerank&search-alias=books-uk)
    and [Jens Vygen](https://www.amazon.co.uk/Jens-Vygen/e/B00DQ1CB98/ref=dp_byline_cont_book_2).
    ***2018***.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Holland, J.H. (1975) *Adaptation in Natural and Artificial Systems.* University
    of Michigan Press, Ann Arbor. (2nd Edition, MIT Press, 1992.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rosenblatt, F. (1958). The perceptron: A probabilistic model for information
    storage and organization in the brain. *Psychological Review, 65*(6), 386–408\.
    [https://doi.org/10.1037/h0042519](https://psycnet.apa.org/doi/10.1037/h0042519)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
