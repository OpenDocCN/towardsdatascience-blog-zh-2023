["```py\nfrom math import asin, sqrt\nfrom qiskit import QuantumCircuit, execute, Aer\nfrom qiskit.visualization import plot_histogram\n\ndef prob_to_angle(prob):\n    return 2*asin(sqrt(prob))\n\n# Create a quantum circuit with one qubit\nqc = QuantumCircuit(1)\n\n# rotate the qubit state vector\nqc.ry(prob_to_angle(0.7245), 0)\n\n# Tell Qiskit how to simulate our circuit\nbackend = Aer.get_backend('statevector_simulator') \n\n# Do the simulation, returning the result\nresult = execute(qc,backend, shots=1000).result()\n\n# get the probability distribution\ncounts = result.get_counts()\n\n# Show the histogram\nplot_histogram(counts)\n```", "```py\n# Create a quantum circuit with one qubit\nqc = QuantumCircuit(1)\n\n# rotate the qubit state vector\nqc.ry(prob_to_angle(0.7245), 0)\n\n# measure the qubit\nqc.measure_all()\n\n# Tell Qiskit how to simulate our circuit\nbackend = Aer.get_backend('qasm_simulator') \n\n# Do the simulation, returning the result\nresult = execute(qc,backend, shots=1000).result()\n\n# get the probability distribution\ncounts = result.get_counts()\n\n# Show the histogram\nplot_histogram(counts)\n```", "```py\nfrom qiskit import transpile\nfrom qiskit.providers.fake_provider import FakeQuito\nfrom qiskit.providers.aer import AerSimulator\n\n# create a fake backend\ndevice_backend = FakeQuito()\n\n# create a simulator from the backend\nsim_quito = AerSimulator.from_backend(device_backend)\n\n# transpile the circuit\nmapped_circuit = transpile(qc, backend=sim_quito)\n\n# run the transpiled circuit, no need to assemble it\nresult = sim_quito.run(mapped_circuit, shots=1000).result()\n\n# get the probability distribution\ncounts = result.get_counts()\n\n# Show the histogram\nplot_histogram(counts)\n```", "```py\ndef discretize(counts, blocks):\n    weigthed = 0\n    sum_count = 0\n    print (counts)\n    for key, value in counts.items():\n        weigthed += int(key)*int(value*0.999*blocks)\n        sum_count += value\n    return int(weigthed/sum_count)\n\ndiscretize(counts, 4) # Output here: 2\n```"]