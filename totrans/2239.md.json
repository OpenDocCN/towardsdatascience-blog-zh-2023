["```py\nwine_data = pd.read_csv('winequality-red.csv', sep=';')\nwine_data.head(10)\n```", "```py\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nwine_data_scaled = sc.fit_transform(wine_data)\n```", "```py\naverage_method = AgglomerativeClustering(n_clusters = None, \n                                         distance_threshold = 0, \n                                         linkage = 'average')\naverage_method.fit(wine_data_scaled)\n```", "```py\nfrom scipy.cluster.hierarchy import dendrogram\n\ndef plot_dendrogram(model, **kwargs):\n    # Create linkage matrix and then plot the dendrogram\n\n    # create the counts of samples under each node\n    counts = np.zeros(model.children_.shape[0])\n    n_samples = len(model.labels_)\n    for i, merge in enumerate(model.children_):\n        current_count = 0\n        for child_idx in merge:\n            if child_idx < n_samples:\n                current_count += 1  # leaf node\n            else:\n                current_count += counts[child_idx - n_samples]\n        counts[i] = current_count\n\n    linkage_matrix = np.column_stack(\n        [model.children_, model.distances_, counts]\n    ).astype(float)\n\n    # Plot the corresponding dendrogram\n    dendrogram(linkage_matrix, **kwargs)\n```", "```py\nplot_dendrogram(average_method, truncate_mode=\"level\", p=20)\nplt.title('Dendrogram of Hierarchical Clustering - Average Method')\n```", "```py\nward_method = AgglomerativeClustering(n_clusters = None, \n                                         distance_threshold = 0, \n                                         linkage = 'ward')\nward_method.fit(wine_data_scaled)\n\nplot_dendrogram(ward_method, truncate_mode=\"level\", p=20)\n```", "```py\nward_method_solution = AgglomerativeClustering(n_clusters = 7,\n                                         linkage = 'ward')\nwine_data['cluster'] = ward_method_solution.fit_predict(wine_data_scaled)\n```", "```py\nwine_data.groupby([‘cluster’]).mean()\n```"]