["```py\nimport numpy as np\nfrom statsmodels.tsa.seasonal import MSTL\n\n# creating an artificial time series with complex seasonality\n# daily and weekly seasonality\nperiod1, period2 = 24, 24 * 7\n# 500 data points\nsize = 500\nbeta1 = np.linspace(-.6, .3, num=size)\nbeta2 = np.linspace(.6, -.3, num=size)\nsin1 = np.asarray([np.sin(2 * np.pi * i / period1) for i in np.arange(1, size + 1)])\nsin2 = np.asarray([np.sin(2 * np.pi * i / period2) for i in np.arange(1, size + 1)])\ncos1 = np.asarray([np.cos(2 * np.pi * i / period1) for i in np.arange(1, size + 1)])\ncos2 = np.asarray([np.cos(2 * np.pi * i / period2) for i in np.arange(1, size + 1)])\n\nxt = np.cumsum(np.random.normal(scale=0.1, size=size))\nnoise = np.random.normal(scale=0.1, size=size)\n\n# combining parts\nyt = xt + beta1 * sin1 + beta2 * cos1 + sin2 + cos2 + noise\n\n# hourly time series\nind = pd.date_range(end=pd.Timestamp('2023-07-10'), periods=size, freq='H')\nyt = pd.Series(yt, index=ind)\nyt.name = 'Series'\nyt.index.name = 'Date'\n\n# decomposition with MSTL\ndecomp = MSTL(endog=yt, periods=(period1, period2)).fit()\n```", "```py\nfrom sktime.transformations.series.fourier import FourierFeatures\n\n# Fourier series with two periods\n# 4 terms for the first period\n# 2 terms for the second period\nfourier = FourierFeatures(sp_list=[period1, period2],\n                          fourier_terms_list=[4, 2],\n                          keep_original_columns=False)\n\nfourier_feats = fourier.fit_transform(yt)\n```", "```py\nfrom orbit.models import KTR\nfrom orbit.diagnostics.plot import plot_predicted_data, plot_predicted_components\nfrom sklearn.model_selection import train_test_split\n\ndf = yt.reset_index()\n\n# train test split\ntrain, test = train_test_split(df, shuffle=False, test_size=100)\n\n# creating a KTR instance with the required periods\nktr_with_seas = KTR(\n    response_col='Series',\n    date_col='Date',\n    seed=1,\n    seasonality=[24, 24 * 7],\n    estimator='pyro-svi',\n    n_bootstrap_draws=1e4,\n    # pyro training config\n    num_steps=301,\n    message=100,\n)\n\n# fitting the model\nktr_with_seas.fit(train)\n\n# inference\npredicted_df = ktr_with_seas.predict(df=df, decompose=True)\n\n_ = plot_predicted_data(training_actual_df=train,\n                        predicted_df=predicted_df,\n                        date_col='Date',\n                        actual_col='Series',\n                        test_actual_df=test,\n                        markersize=10, lw=.5)\n\n_ = plot_predicted_components(predicted_df=predicted_df,\n                              date_col='Date',\n                              plot_components=['trend',\n                                               'seasonality_24',\n                                               'seasonality_168'])\n```"]