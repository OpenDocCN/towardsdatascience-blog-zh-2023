["```py\n# variant A\n\ncompany_list = [\"Tesla\", \"Apple\", \"Block\", \"Palantir\"]\n\ni = 0\nfor company in company_list:\n    print(i, company)\n    i+=1\n\n# Output:\n# 0 Tesla\n# 1 Apple\n# 2 Block\n# 3 Palantir\n```", "```py\n# variant B\n\ncompany_list = [\"Tesla\", \"Apple\", \"Block\", \"Palantir\"]\n\nfor count, company in enumerate(company_list, start=0):\n    print(count, company)\n\n# Output\n# 0 Tesla\n# 1 Apple\n# 2 Block\n# 3 Palantir\n```", "```py\nlist_a = [0,1,1]\nlist_b = [2,3,5]\n\nzipped = zip(list_a, list_b)\nlist(zipped)\n\n# Output\n# [(0, 2), (1, 3), (1, 5)]\n```", "```py\nlist(zip(range(7), range(42)))\n\n# Output\n# [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]\n```", "```py\nlist(zip(range(7), range(42), strict=True))\n\n# Output\n# ---------------------------------------------------------------------------\n# ValueError                                Traceback (most recent call last)\n# Cell In[2], line 1\n# ----> 1 list(zip(range(7), range(42), strict=True))\n#\n# ValueError: zip() argument 2 is longer than argument 1\n```", "```py\nfrom time import perf_counter\n\nlist_a = range(0, 10_000, 1)\nlist_b = range(10_000, 20_000, 1)\n\nstart = perf_counter()\nfor i in range(len(list_a)):\n    a = list_a[i]\n    b = list_b[i]\nprint(perf_counter()-start)\n\n# Output\n# 0.00775 s -> 7.75 ms\n```", "```py\nfrom time import perf_counter\n\nlist_a = range(0, 10_000, 1)\nlist_b = range(10_000, 20_000, 1)\n\nstart = perf_counter()\nfor a,b in zip(list_a, list_b):\n    # do something\n    pass\nprint(perf_counter()-start)\n# Output\n# 0.00093 s -> 0.93 ms\n```", "```py\ndef add_function(a, b):\n    print(a + b)\n\nfoo = 2\nbar = 5\nadd_function(foo, bar)\n\n# Output\n# 7\n```", "```py\n# Unpacking\ndef add_function(a, b):\n    print(a + b)\n\nfoo1 = [2, 5]\nfoo2 = {'a':2, 'b':5}\nadd_function(*foo1)\nadd_function(**foo2)\n\n# Output\n# 7\n# 7\n```", "```py\n# Packing\ndef add_function(*args):\n    print(sum(args))\n\nadd_function(1, 1, 2, 3, 5)\n\n# Output\n# 12\n```", "```py\n# with additional tmp variable\na = 2\nb = 4\ntmp = a\na = b\nb = tmp\nprint(a, b)\n\n# Output\n# 4 2\n\n# without additional tmp variable\na = 2\nb = 4\na, b = b, a\nprint(a, b)\n\n# Output\n# 4 2\n```", "```py\nexample_list = [1, 1, 2, 3, 5]\nexample_list[0], example_list[3] = example_list[3], example_list[0]\n\nprint(example_list)\n\n# Output\n# [3, 1, 2, 1, 5]\n```", "```py\ndict={1: 2, 3: 4, 3: 5}\nprint(dict[8]) \n\n# Output\n# ---------------------------------------------------------------------------\n# KeyError                                  Traceback (most recent call last)\n# Cell In[30], line 2\n#      1 dict={1: 2, 3: 4, 3: 5}\n# ----> 2 print(dict[8]) \n#\n# KeyError: 8\n```", "```py\ndict={1: 2, 3: 4, 3: 5}\nprint(dict.get(8)) \n\n# Output\n# None\n```", "```py\ndict={1: 2, 3: 4, 3: 5}\nprint(dict.get(8), 0) \n\n# Output\n# 0\n```", "```py\nimport json\nwith open('config/config_timescaleDB.json') as timescaleDB_file:\n    config_timescaleDB_dict = json.load(timescaleDB_file)\n```", "```py\n# bad way\nmillion = 1000000     # 1 million\nthousand = 1000        # 1 thousand\ntotal = million + thousand\nprint(f'{total:,}')  \n\n# Output\n# 1,001,000\n\n# smart way\nmillion = 1_000_000     # 1 million\nthousand = 1_000        # 1 thousand\ntotal = million + thousand\nprint(f'{total:,}')\n\n# Output\n# 1,001,000\n```"]