- en: A Simple CI/CD Setup for ML Projects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的 ML 项目 CI/CD 设置
- en: 原文：[https://towardsdatascience.com/a-simple-ci-cd-setup-for-ml-projects-604de7fd64cd](https://towardsdatascience.com/a-simple-ci-cd-setup-for-ml-projects-604de7fd64cd)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-simple-ci-cd-setup-for-ml-projects-604de7fd64cd](https://towardsdatascience.com/a-simple-ci-cd-setup-for-ml-projects-604de7fd64cd)
- en: '![](../Images/e7789e958d448c41d90f7ac7c763a80e.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e7789e958d448c41d90f7ac7c763a80e.png)'
- en: Photo by [vackground.com](https://unsplash.com/@vackground?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [vackground.com](https://unsplash.com/@vackground?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Apply best practices and learn to use GitHub Actions to build robust code
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用最佳实践并学习使用 GitHub Actions 来构建稳健的代码
- en: '[](https://medium.com/@marcellopoliti?source=post_page-----604de7fd64cd--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----604de7fd64cd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----604de7fd64cd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----604de7fd64cd--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----604de7fd64cd--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@marcellopoliti?source=post_page-----604de7fd64cd--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----604de7fd64cd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----604de7fd64cd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----604de7fd64cd--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----604de7fd64cd--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----604de7fd64cd--------------------------------)
    ·7 min read·Dec 20, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----604de7fd64cd--------------------------------)
    ·7 分钟阅读·2023年12月20日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: Dealing with **integrations, deployment, scalability** and all those topics
    that make Machine Learning projects a real product is a job on its own. There
    is a reason why there exist different job positions ranging from data scientist
    to ML Engineer and MLOps. Still, even if you don’t need to be an expert on these
    topics, it is **good to have some standard well-defined practices that can help
    you when you kick off a project**. Certainly! In this article, I outline the best
    practices I’ve developed — a balance between code quality and the time invested
    in implementing them. I run my code on [Deepnote](https://deepnote.com/), which
    is a cloud-based notebook that’s great for collaborative data science projects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 处理**集成、部署、可扩展性**以及所有那些使机器学习项目成为真正产品的主题本身就是一项工作。这就是为什么从数据科学家到 ML 工程师和 MLOps 之间存在不同职位的原因。尽管你不需要成为这些领域的专家，但**拥有一些标准的明确定义的实践来帮助你启动项目是很好的**。确实如此！在这篇文章中，我概述了我开发的最佳实践——在代码质量和实施时间之间的平衡。我在
    [Deepnote](https://deepnote.com/) 上运行我的代码，这是一款基于云的笔记本，非常适合协作数据科学项目。
- en: Start Simple — Readme
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从简单开始 — README
- en: This may seem trivial but **try to keep a Readme file more or less up to date**.
    If it costs you little time, and you like it, also try to make a Readme that looks
    good. Include imagine headers icons or whatever. This file must **be clear and
    understandable**. Remember that in a real project, you will not only be working
    with other developers but also with salespeople, and project managers, and every
    now and then they might have to read the Readme to understand what you are working
    on.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来可能很琐碎，但**尽量保持 README 文件的更新**。如果花费时间不多，并且你喜欢这样做，尝试让 README 也看起来好看。包括想象中的标题图标或其他内容。这个文件必须**清晰易懂**。记住，在实际项目中，你不仅仅是与其他开发者合作，还会与销售人员和项目经理合作，他们可能需要阅读
    README 以了解你在做什么。
- en: You can find [here](https://github.com/othneildrew/Best-README-Template) a really
    nice readme template!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[这里](https://github.com/othneildrew/Best-README-Template)找到一个非常棒的 README
    模板！
- en: '[](https://github.com/othneildrew/Best-README-Template?source=post_page-----604de7fd64cd--------------------------------)
    [## GitHub - othneildrew/Best-README-Template: An awesome README template to jumpstart
    your projects!'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/othneildrew/Best-README-Template?source=post_page-----604de7fd64cd--------------------------------)
    [## GitHub - othneildrew/Best-README-Template: 一个极好的 README 模板，助力你的项目启动！'
- en: 'An awesome README template to jumpstart your projects! - GitHub - othneildrew/Best-README-Template:
    An awesome README…'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/othneildrew/Best-README-Template?source=post_page-----604de7fd64cd--------------------------------)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Use virtual environments, your laptop will be happy
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You probably know this better than I do, in order to develop a cool project
    we need external libraries. Often a lot of them! These **libraries may have dependencies
    or conflicts**. That is why it is a **good idea to create virtual environments**.
    A virtual environment helps you **to have projects isolated from each other**,
    to have completely different development environments. Usually, to do this in
    Python you **use pip or conda**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://pypi.org/project/pip/?source=post_page-----604de7fd64cd--------------------------------)
    [## pip'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: The PyPA recommended tool for installing Python packages.
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pypi.org](https://pypi.org/project/pip/?source=post_page-----604de7fd64cd--------------------------------)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: I personally am a fan of pip. Here is how to create and activate a virtual environment.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now you’re allowed to install all the libraries you wish!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Create a Requirements file, your colleagues will be happy
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is **no point in writing code**, especially in a field like Machine Learning,
    if **you do not allow reproducibility** of the code and experiments. Surely the
    **place to start is to create a requirements.txt** file
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[## Requirements File Format - pip documentation v23.3.2'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Requirements files serve as a list of items to be installed by pip, when using
    pip install . Files that use this format…
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pip.pypa.io](https://pip.pypa.io/en/stable/reference/requirements-file-format/?source=post_page-----604de7fd64cd--------------------------------)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: I **can’t run code written by someone else if I don’t know what libraries that
    person has installed** to run the code. For this reason, you should keep a text
    file named ***requirements.txt*** in which you **enter the names of all the libraries**.
    You can edit this file manually, that is, every time you install a library with
    pip, you also enter the name of the library in the requirements. Or you can use
    a **useful pip command, to automatically enter all the libraries installed** in
    your virtual environment directly into the requirements. Let’s see how to do this.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: If you run the following command
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: you will see a list of all installed libraries appear in the terminal. Now just
    use a terminal trick to redirect the output of this command to the requirements.txt
    file instead of the terminal display.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you check your requirements now you will see that they have updated automatically!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to automatically install all requirements in a new virtual environment
    you can run the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Format your code with Black
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many of the libraries I use in this article do much more than what I describe.
    But as I anticipated my purpose is solely to have some sort of routine to follow
    when I develop.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://pypi.org/project/black/?source=post_page-----604de7fd64cd--------------------------------)
    [## black'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[## black](https://pypi.org/project/black/?source=post_page-----604de7fd64cd--------------------------------)'
- en: The uncompromising code formatter.
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无妥协的代码格式化工具。
- en: pypi.org](https://pypi.org/project/black/?source=post_page-----604de7fd64cd--------------------------------)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[pypi.org](https://pypi.org/project/black/?source=post_page-----604de7fd64cd--------------------------------)'
- en: '**I use Black to format code clearly** and neatly. Here is the command you
    can use to run black:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**我使用 Black 来清晰地格式化代码** 和整洁地排列。这里是你可以用来运行 black 的命令：'
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the command, we specified to edit all python files (*.py) within the src
    directory.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令中，我们指定了编辑 src 目录下所有的 python 文件（*.py）。
- en: Analyse your code with PyLint
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 PyLint 分析你的代码
- en: PyLint is another extremely useful library that I suggest you start using.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: PyLint 是另一个非常有用的库，我建议你开始使用。
- en: '[](https://pypi.org/project/pylint/?source=post_page-----604de7fd64cd--------------------------------)
    [## pylint'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[## pylint'
- en: python code static checker
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: python 代码静态检查器
- en: pypi.org](https://pypi.org/project/pylint/?source=post_page-----604de7fd64cd--------------------------------)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[pypi.org](https://pypi.org/project/pylint/?source=post_page-----604de7fd64cd--------------------------------)'
- en: '**PyLint automatically checks for errors in your code, forces the use of standards,
    and also checks for code smells**, such as imports that have never been used.
    PyLint also assigns a score from 1 to 10 to the quality of your code.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**PyLint 自动检查代码中的错误，强制使用标准，并检查代码气味**，例如从未使用过的导入。PyLint 还会给你的代码质量打分，范围从 1 到
    10。'
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You will notice that I have modified the command, disabling two flags (R, and
    C). In this way, PyLint will not issue warnings or alerts for problems related
    to refactoring and conventions.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到我修改了命令，禁用了两个标志（R 和 C）。这样，PyLint 将不会发出有关重构和约定的问题的警告或提示。
- en: 'The output should look like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![](../Images/5068bca3d09f63df1763dc355639f37b.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5068bca3d09f63df1763dc355639f37b.png)'
- en: Image By Author
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Run Tests, make sure your code is working
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行测试，确保你的代码正常工作
- en: '**How do you know your code always works if you don’t use tests?** Get in the
    **habit of creating simple unit tests**, which you can always extend when you
    write some function. A unit test is nothing more than another function that will
    pass a sequence of inputs to the function you want to test and see if the output
    is as expected.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你不使用测试，怎么知道你的代码总是有效的？** 养成 **创建简单单元测试的习惯**，你可以在编写函数时随时扩展。单元测试不过是一个函数，它会将一系列输入传递给你想测试的函数，并查看输出是否符合预期。'
- en: You can implement unit tests in a variety of ways; a widely used library in
    Python is [PyTest](https://docs.pytest.org/en/7.4.x/).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过多种方式实现单元测试；在 Python 中广泛使用的库是 [PyTest](https://docs.pytest.org/en/7.4.x/)。
- en: '[## pytest: helps you write better programs - pytest documentation'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[## pytest: helps you write better programs - pytest documentation'
- en: The maintainers of pytest and thousands of other packages are working with Tidelift
    to deliver commercial support and…
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pytest 和其他成千上万的包的维护者正在与 Tidelift 合作，提供商业支持和…
- en: docs.pytest.orgI usually create a src sister folder, called test, in which I
    collect all my unittests.](https://docs.pytest.org/en/7.4.x/?source=post_page-----604de7fd64cd--------------------------------)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[docs.pytest.org 我通常创建一个名为 test 的 src 姐妹文件夹，在其中收集所有的单元测试。](https://docs.pytest.org/en/7.4.x/?source=post_page-----604de7fd64cd--------------------------------)'
- en: I usually create a *src* sister folder, called *test*, in which I collect all
    my unit tests.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常创建一个 *src* 姐妹文件夹，叫做 *test*，在其中收集所有的单元测试。
- en: To launch all the automatically written tests we run the following
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动所有自动生成的测试，我们运行以下命令
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: I am lazy, I’ll use a Makefile
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我很懒，我会使用 Makefile
- en: At this point, we have seen many files and many commands launch it. I would
    say that as a routine it is a bit heavy. I would like something simpler, I don’t
    have a very good memory😅
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经看到许多文件和许多命令。我觉得作为例行操作有点繁重。我希望有一些更简单的东西，我的记忆不好😅
- en: 'Well, then we can create a **Makefile, which is a file in which we write some
    instructions**, and **this will launch the commands previously seen for us**.
    In the Makefile I want to write instructions to **install requirements, format
    code with black, check code smells with PyLint, and launch tests with PyTest**.
    Here then is what our Makefile will look like:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那么我们可以创建一个 **Makefile，这是一种我们可以在其中写入一些指令的文件**，并且 **这将为我们启动之前看到的命令**。在 Makefile
    中，我想写指令以 **安装需求、使用 black 格式化代码、使用 PyLint 检查代码气味，并使用 PyTest 启动测试**。下面是我们的 Makefile
    将是什么样子：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In this way every time we use this command from the terminal:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，每次我们从终端使用这个命令时：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It will actually be run
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，它将被执行
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: And the same thing applies to all the other commands of course in the same way.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，所有其他命令也适用相同的方法。
- en: Now our repo already looks much more professional!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的仓库看起来更专业了！
- en: '**Run Everything at every push with GitHub Actions**'
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**通过GitHub Actions在每次推送时运行所有内容**'
- en: 'I hope everything is clear so far. At this point whenever we want to make changes
    to our code before we commit and push to GitHub we’ll run the following commands
    to make sure everything works as smoothly as possible: *make install, make format,
    make lint, make test.*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望到目前为止一切都清楚。此时，每当我们想要对代码进行更改时，在提交和推送到GitHub之前，我们会运行以下命令，以确保一切顺利进行：*make install,
    make format, make lint, make test*。
- en: But developers like to automate everything. So, **isn’t there a way that automatically
    runs this entire process on every git push?** Well yes, there is, just make use
    of **GitHub Actions**!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 但开发者喜欢自动化一切。那么，**难道没有一种方法可以在每次git推送时自动运行整个过程吗？** 当然有，只需使用**GitHub Actions**即可！
- en: With GitHub actions, we can **set triggers**, that is, specify events that will
    trigger commands, and the commands in our case are all in the Makefile.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GitHub actions，我们可以**设置触发器**，即指定触发命令的事件，在我们的例子中，这些命令都在Makefile中。
- en: To create GitHub actions, we need to **create the .github/workflows folder**
    in our working directory. Within this new directory, we **create a YML file**
    that we can for example name **mlops.yml**.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建GitHub actions，我们需要在工作目录中**创建 .github/workflows 文件夹**。在这个新目录中，我们**创建一个YML文件**，例如可以命名为**mlops.yml**。
- en: In this file, we can specify several things. First of all, any name we want.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，我们可以指定几个内容。首先是我们想要的任何名字。
- en: After that, we specify the event (or events) that will trigger the commands,
    in this case [push]. Then, we deal with the *steps* (of which the first part I
    don’t even remember exactly what is, but fortunately there is Google and ChatGPT
    from which we can copy and paste 😅).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们指定将触发命令的事件（或事件），在这种情况下是[push]。接着，我们处理*steps*（其中第一部分我甚至不记得是什么，但幸运的是有Google和ChatGPT，我们可以从中复制粘贴😅）。
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This should be the code structure of the entire project
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该是整个项目的代码结构
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: That’s it!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！
- en: Now you should be able to check on GitHub all the commands running at every
    push on the *actions* tab.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能够在GitHub的*actions*标签下查看每次推送时运行的所有命令。
- en: '![](../Images/7ea8851bfccdd459afd44931ba9ff461.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7ea8851bfccdd459afd44931ba9ff461.png)'
- en: Image By Author
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: '**Final Thoughts**'
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**最终思考**'
- en: In this article, I have shown you some best practices that I use when developing
    projects in Python to ensure some quality in the code and protect my GitHub repository
    from not very functional commits. Each of these topics can still be delved into
    tremendously, however being able to at least somewhat structure your code quickly
    and easily I think can be a great help in improving your work!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我展示了一些我在开发Python项目时使用的最佳实践，以确保代码质量，并保护我的GitHub仓库免受不太实用的提交。虽然每个主题仍然可以深入探讨，但能够至少以某种方式快速轻松地构建你的代码，我认为对提高你的工作是很有帮助的！
- en: If you are interested in this article follow me on Medium! 😁
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这篇文章感兴趣，可以在Medium上关注我！😁
- en: 💼 [Linkedin](https://www.linkedin.com/in/marcello-politi/) ️| 🐦 [Twitter](https://twitter.com/_March08_)
    | [💻](https://emojiterra.com/laptop-computer/) [Website](https://marcello-politi.super.site/)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 💼 [Linkedin](https://www.linkedin.com/in/marcello-politi/) ️| 🐦 [Twitter](https://twitter.com/_March08_)
    | [💻](https://emojiterra.com/laptop-computer/) [Website](https://marcello-politi.super.site/)
