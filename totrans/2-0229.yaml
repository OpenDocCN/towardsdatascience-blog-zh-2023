- en: A Simple CI/CD Setup for ML Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/a-simple-ci-cd-setup-for-ml-projects-604de7fd64cd](https://towardsdatascience.com/a-simple-ci-cd-setup-for-ml-projects-604de7fd64cd)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/e7789e958d448c41d90f7ac7c763a80e.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [vackground.com](https://unsplash.com/@vackground?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Apply best practices and learn to use GitHub Actions to build robust code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@marcellopoliti?source=post_page-----604de7fd64cd--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----604de7fd64cd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----604de7fd64cd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----604de7fd64cd--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----604de7fd64cd--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----604de7fd64cd--------------------------------)
    ·7 min read·Dec 20, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dealing with **integrations, deployment, scalability** and all those topics
    that make Machine Learning projects a real product is a job on its own. There
    is a reason why there exist different job positions ranging from data scientist
    to ML Engineer and MLOps. Still, even if you don’t need to be an expert on these
    topics, it is **good to have some standard well-defined practices that can help
    you when you kick off a project**. Certainly! In this article, I outline the best
    practices I’ve developed — a balance between code quality and the time invested
    in implementing them. I run my code on [Deepnote](https://deepnote.com/), which
    is a cloud-based notebook that’s great for collaborative data science projects.
  prefs: []
  type: TYPE_NORMAL
- en: Start Simple — Readme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This may seem trivial but **try to keep a Readme file more or less up to date**.
    If it costs you little time, and you like it, also try to make a Readme that looks
    good. Include imagine headers icons or whatever. This file must **be clear and
    understandable**. Remember that in a real project, you will not only be working
    with other developers but also with salespeople, and project managers, and every
    now and then they might have to read the Readme to understand what you are working
    on.
  prefs: []
  type: TYPE_NORMAL
- en: You can find [here](https://github.com/othneildrew/Best-README-Template) a really
    nice readme template!
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/othneildrew/Best-README-Template?source=post_page-----604de7fd64cd--------------------------------)
    [## GitHub - othneildrew/Best-README-Template: An awesome README template to jumpstart
    your projects!'
  prefs: []
  type: TYPE_NORMAL
- en: 'An awesome README template to jumpstart your projects! - GitHub - othneildrew/Best-README-Template:
    An awesome README…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/othneildrew/Best-README-Template?source=post_page-----604de7fd64cd--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Use virtual environments, your laptop will be happy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You probably know this better than I do, in order to develop a cool project
    we need external libraries. Often a lot of them! These **libraries may have dependencies
    or conflicts**. That is why it is a **good idea to create virtual environments**.
    A virtual environment helps you **to have projects isolated from each other**,
    to have completely different development environments. Usually, to do this in
    Python you **use pip or conda**.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://pypi.org/project/pip/?source=post_page-----604de7fd64cd--------------------------------)
    [## pip'
  prefs: []
  type: TYPE_NORMAL
- en: The PyPA recommended tool for installing Python packages.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pypi.org](https://pypi.org/project/pip/?source=post_page-----604de7fd64cd--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: I personally am a fan of pip. Here is how to create and activate a virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now you’re allowed to install all the libraries you wish!
  prefs: []
  type: TYPE_NORMAL
- en: Create a Requirements file, your colleagues will be happy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is **no point in writing code**, especially in a field like Machine Learning,
    if **you do not allow reproducibility** of the code and experiments. Surely the
    **place to start is to create a requirements.txt** file
  prefs: []
  type: TYPE_NORMAL
- en: '[## Requirements File Format - pip documentation v23.3.2'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements files serve as a list of items to be installed by pip, when using
    pip install . Files that use this format…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pip.pypa.io](https://pip.pypa.io/en/stable/reference/requirements-file-format/?source=post_page-----604de7fd64cd--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: I **can’t run code written by someone else if I don’t know what libraries that
    person has installed** to run the code. For this reason, you should keep a text
    file named ***requirements.txt*** in which you **enter the names of all the libraries**.
    You can edit this file manually, that is, every time you install a library with
    pip, you also enter the name of the library in the requirements. Or you can use
    a **useful pip command, to automatically enter all the libraries installed** in
    your virtual environment directly into the requirements. Let’s see how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: If you run the following command
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: you will see a list of all installed libraries appear in the terminal. Now just
    use a terminal trick to redirect the output of this command to the requirements.txt
    file instead of the terminal display.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If you check your requirements now you will see that they have updated automatically!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to automatically install all requirements in a new virtual environment
    you can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Format your code with Black
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many of the libraries I use in this article do much more than what I describe.
    But as I anticipated my purpose is solely to have some sort of routine to follow
    when I develop.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://pypi.org/project/black/?source=post_page-----604de7fd64cd--------------------------------)
    [## black'
  prefs: []
  type: TYPE_NORMAL
- en: The uncompromising code formatter.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pypi.org](https://pypi.org/project/black/?source=post_page-----604de7fd64cd--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '**I use Black to format code clearly** and neatly. Here is the command you
    can use to run black:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the command, we specified to edit all python files (*.py) within the src
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: Analyse your code with PyLint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PyLint is another extremely useful library that I suggest you start using.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://pypi.org/project/pylint/?source=post_page-----604de7fd64cd--------------------------------)
    [## pylint'
  prefs: []
  type: TYPE_NORMAL
- en: python code static checker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pypi.org](https://pypi.org/project/pylint/?source=post_page-----604de7fd64cd--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '**PyLint automatically checks for errors in your code, forces the use of standards,
    and also checks for code smells**, such as imports that have never been used.
    PyLint also assigns a score from 1 to 10 to the quality of your code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that I have modified the command, disabling two flags (R, and
    C). In this way, PyLint will not issue warnings or alerts for problems related
    to refactoring and conventions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5068bca3d09f63df1763dc355639f37b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: Run Tests, make sure your code is working
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**How do you know your code always works if you don’t use tests?** Get in the
    **habit of creating simple unit tests**, which you can always extend when you
    write some function. A unit test is nothing more than another function that will
    pass a sequence of inputs to the function you want to test and see if the output
    is as expected.'
  prefs: []
  type: TYPE_NORMAL
- en: You can implement unit tests in a variety of ways; a widely used library in
    Python is [PyTest](https://docs.pytest.org/en/7.4.x/).
  prefs: []
  type: TYPE_NORMAL
- en: '[## pytest: helps you write better programs - pytest documentation'
  prefs: []
  type: TYPE_NORMAL
- en: The maintainers of pytest and thousands of other packages are working with Tidelift
    to deliver commercial support and…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: docs.pytest.orgI usually create a src sister folder, called test, in which I
    collect all my unittests.](https://docs.pytest.org/en/7.4.x/?source=post_page-----604de7fd64cd--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: I usually create a *src* sister folder, called *test*, in which I collect all
    my unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: To launch all the automatically written tests we run the following
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: I am lazy, I’ll use a Makefile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, we have seen many files and many commands launch it. I would
    say that as a routine it is a bit heavy. I would like something simpler, I don’t
    have a very good memory😅
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, then we can create a **Makefile, which is a file in which we write some
    instructions**, and **this will launch the commands previously seen for us**.
    In the Makefile I want to write instructions to **install requirements, format
    code with black, check code smells with PyLint, and launch tests with PyTest**.
    Here then is what our Makefile will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In this way every time we use this command from the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: It will actually be run
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: And the same thing applies to all the other commands of course in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: Now our repo already looks much more professional!
  prefs: []
  type: TYPE_NORMAL
- en: '**Run Everything at every push with GitHub Actions**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I hope everything is clear so far. At this point whenever we want to make changes
    to our code before we commit and push to GitHub we’ll run the following commands
    to make sure everything works as smoothly as possible: *make install, make format,
    make lint, make test.*'
  prefs: []
  type: TYPE_NORMAL
- en: But developers like to automate everything. So, **isn’t there a way that automatically
    runs this entire process on every git push?** Well yes, there is, just make use
    of **GitHub Actions**!
  prefs: []
  type: TYPE_NORMAL
- en: With GitHub actions, we can **set triggers**, that is, specify events that will
    trigger commands, and the commands in our case are all in the Makefile.
  prefs: []
  type: TYPE_NORMAL
- en: To create GitHub actions, we need to **create the .github/workflows folder**
    in our working directory. Within this new directory, we **create a YML file**
    that we can for example name **mlops.yml**.
  prefs: []
  type: TYPE_NORMAL
- en: In this file, we can specify several things. First of all, any name we want.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we specify the event (or events) that will trigger the commands,
    in this case [push]. Then, we deal with the *steps* (of which the first part I
    don’t even remember exactly what is, but fortunately there is Google and ChatGPT
    from which we can copy and paste 😅).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This should be the code structure of the entire project
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: That’s it!
  prefs: []
  type: TYPE_NORMAL
- en: Now you should be able to check on GitHub all the commands running at every
    push on the *actions* tab.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7ea8851bfccdd459afd44931ba9ff461.png)'
  prefs: []
  type: TYPE_IMG
- en: Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: '**Final Thoughts**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, I have shown you some best practices that I use when developing
    projects in Python to ensure some quality in the code and protect my GitHub repository
    from not very functional commits. Each of these topics can still be delved into
    tremendously, however being able to at least somewhat structure your code quickly
    and easily I think can be a great help in improving your work!
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in this article follow me on Medium! 😁
  prefs: []
  type: TYPE_NORMAL
- en: 💼 [Linkedin](https://www.linkedin.com/in/marcello-politi/) ️| 🐦 [Twitter](https://twitter.com/_March08_)
    | [💻](https://emojiterra.com/laptop-computer/) [Website](https://marcello-politi.super.site/)
  prefs: []
  type: TYPE_NORMAL
