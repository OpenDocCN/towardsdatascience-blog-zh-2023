["```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\nnp.random.seed(42)\nv1 = np.random.randint(5,45,50)\nv2 = np.random.randint(10,60,50)\nv3 = np.random.randint(30,80,50)\nv4 = np.random.randint(90,100,50)\n\ndf = pd.DataFrame(zip(v1,v2,v3,v4),\n                  columns=['v1','v2','v3','v4'])\ndf = df.melt()\ndf.head()\n```", "```py\nv_list = ['v1', 'v2', 'v3', 'v4']\nc_code = ['#F77F00','#56C596','#2A639B','#F6D55C']\ndict_color = dict(zip(v_list,c_code))\n```", "```py\ndf_gb = df.groupby(by='variable').sum().reset_index()\ndf_gb['pct']= [round(i,1) for i in df_gb['value']*100/df_gb['value'].sum()]\ndf_gb['color']= c_code\ndf_gb\n```", "```py\ngroups = ['V']\nv1 = [df_gb.pct[0]]\nv2 = [df_gb.pct[1]]\nv3 = [df_gb.pct[2]]\nv4 = [df_gb.pct[3]]\nvalues = np.array([v1, v2, v3, v4])\n\nsns.set_style('darkgrid')\nfig, ax = plt.subplots(figsize=(1,6))\n\nfor i,c in zip(range(values.shape[0]), df_gb.color):\n    ax.bar(groups,values[i], bottom=np.sum(values[:i], axis=0), color=c)\nplt.show()\n```", "```py\nfig, ax = plt.subplots(figsize=(8,8))\nax.scatter(0, 0)\ncir = plt.Circle((0, 0), 1, color='lightgray', fill=True)\nax.add_patch(cir)\n\ndf_gb.sort_values(by=['pct'], ascending=False, inplace=True)\n\nfor i,c,l in zip(df_gb.pct,df_gb.color,df_gb.variable):\n    data = np.array(i)\n    r = np.sqrt(data/100)\n    cir_p = plt.Circle((0, r-1), r, color=c, fill=True)\n    ax.add_patch(cir_p)\n    ax.axis('off')\n    kw = dict(color=\"white\", va=\"center\", ha=\"center\")\n    kw.update(dict(fontsize=19))\n    ax.text(0, (2*r)-1.08, l+' '+str(i)+'%', **kw)\n    ax.set_aspect('equal')\n\nplt.xlim([-1, 1])\nplt.xlim([-1, 1])\nplt.show()\n```", "```py\nfor i,c,l in zip(df_gb.pct,df_gb.color,df_gb.variable):\n    data = np.array(i)\n    r = np.sqrt(data/100)\n\n    fig, ax = plt.subplots(figsize=(8,8))\n    ax.scatter(0, 0)\n    cir = plt.Circle((0, 0), 1, color='lightgray', fill=True)\n    cir_p = plt.Circle((0, r-1), r, color=c, fill=True)\n    ax.add_patch(cir)\n    ax.add_patch(cir_p)\n    ax.axis('off')\n    kw = dict(color=\"white\", va=\"center\", ha=\"center\")\n    kw.update(dict(fontsize=32))\n    ax.text(0, r-1, l+'\\n'+str(i)+'%', **kw)\n    ax.set_aspect('equal')\n\n    plt.xlim([-1, 1])\n    plt.xlim([-1, 1])\n    plt.show()\n```", "```py\nimport plotly.express as px\nfig = px.pie(df_gb, values='value', names='variable',\n             color='variable', color_discrete_map=dict_color)\nfig.update_layout(width=600, height=600, margin=dict(l=0, r=0, b=0, t=0))\nfig.show()\n```", "```py\nimport plotly.express as px\nfig = px.pie(df_gb, values='value', names='variable',\n             color='variable', color_discrete_map=dict_color,\n             hole=0.6)\nfig.update_layout(width=600, height=600, margin=dict(l=0, r=0, b=0, t=0))\nfig.show()\n```", "```py\ndf['sub']=[i+'.1' if j%2 else i+'.2' for i,j in zip(df.variable, df.value)]\ndf_wsub=df.groupby(by=['variable','sub']).mean().reset_index()\ndf_wsub\n```", "```py\nimport plotly.express as px\nfig = px.treemap(df_wsub, path=['variable', 'sub'], values='value',\n                 color='variable',color_discrete_map=dict_color)\n#fig.update_traces(root_color=\"lightgrey\")\nfig.update_layout(width=800, height=600, margin=dict(l=0, r=0, b=0, t=0))\nfig.show()\n```", "```py\nimport plotly.express as px\nfig = px.sunburst(df_wsub, path=['variable', 'sub'], values='value',\n                  color='variable',color_discrete_map=dict_color)\nfig.update_layout(width=800, height=600, margin=dict(l=0, r=0, b=0, t=0))\nfig.show()\n```", "```py\nnp.random.seed(42)\nv1 = np.random.randint(5,50,50)\nv2 = np.random.randint(5,50,50)\nv3 = np.random.randint(20,60,50)\nv4 = np.random.randint(20,60,50)\nv5 = np.random.randint(90,100,50)\nv6 = np.random.randint(10,50,50)\nv7 = np.random.randint(10,50,50)\nv8 = np.random.randint(25,60,50)\nv9 = np.random.randint(25,60,50)\n\ndf = pd.DataFrame(zip(v1,v2,v3,v4,v5,v6,v7,v8,v9),\n                  columns=['v1','v2','v3','v4','v5','v6','v7','v8','v9'])\ndf = df.melt()\n\n#extract color palette\npal = list(sns.color_palette(palette='Spectral', n_colors=9).as_hex())\n\ndf_gb = df.groupby(by='variable').sum().reset_index()\ndf_gb['pct']= [round(i,1) for i in df_gb['value']*100/df_gb['value'].sum()]\ndf_gb['color']= pal\ndf_gb\n```", "```py\nsns.set_style('darkgrid')\nplt.figure(figsize=(9,5))\nplt.bar(x=df_gb.variable, height=df_gb.pct,color=df_gb.color)\nplt.show()\n```", "```py\nimport math\nplt.gcf().set_size_inches(8,8)\nsns.set_style('darkgrid')\n\n#set max value\nmax_val = 26\nax = plt.subplot(projection='polar')\n\nfor i,p,l in zip(range(len(df_gb)),pal,df_gb.variable):\n    ax.barh(i, df_gb['pct'][i]*2*np.pi/max_val, label=l, color=p)\n\n#set the subplot \nax.set_theta_zero_location('N')\nax.set_theta_direction(1)\nax.set_rlabel_position(0)\nax.set_thetagrids([], labels=[])\n\nlabels = [i+' '+str(j)+'%' for i,j in zip(df_gb.variable, df_gb.pct)]\nax.set_rgrids(range(len(df_gb)), labels= labels)\n\n#set the projection\nax = plt.subplot(projection='polar')\nplt.legend().set_visible(False)\nplt.show()\n```", "```py\nplt.figure(figsize=(8,8))\nax = plt.subplot(111, polar=True)\nplt.axis()\n\n#set min and max value\nax.axis(ymin=0, ymax=25)\n\n#set heights and width\nheights = df_gb['pct']\nwidth = 2*np.pi / len(df_gb)\n#set index and angle\nindexes = list(range(1, len(df_gb)+1))\nangles = [element * width for element in indexes]\nbars = ax.bar(x=angles, height=heights, width=width, bottom=0,\n              linewidth=1, edgecolor=\"white\", color=pal)\nlabelPadding = 2\n\nlabels = [i+' '+str(j)+'%' for i,j in zip(df_gb.variable, df_gb.pct)]\nfor bar, angle, height, label in zip(bars, angles, heights, labels):\n    rotation = np.rad2deg(angle)\n    alignment = \"\"\n    #deal with alignment\n    if angle >= np.pi/2 and angle < 3*np.pi/2:\n        alignment = \"right\"\n        rotation = rotation + 180\n    else: \n        alignment = \"left\"\n\n    ax.text(x=angle, y=0 + bar.get_height() + labelPadding,\n            s=label, ha=alignment, va='center', rotation=rotation, \n            rotation_mode=\"anchor\")\n\n    ax.set_thetagrids([], labels=[])\n\nplt.show()\n```", "```py\nimport plotly.express as px\nimport pandas as pd\nfig = px.line_polar(df_gb, r='pct', theta='variable',\n                    line_close=True, color_discrete_sequence=[c_code[1]])\nfig.update_polars(radialaxis_range=[0,25])\nfig.update_layout(width=600, height=600, margin=dict(l=10,r=10,b=10,t=20))\nfig.update_traces(fill='toself')\nfig.show()\n```", "```py\nimport circlify\n# compute circle positions:\ncircles = circlify.circlify(df_gb['pct'].tolist(), \n                            show_enclosure=False, \n                            target_enclosure=circlify.Circle(x=0, y=0))\n```", "```py\ndf_gb.sort_values(by='pct', ascending=True, inplace=True)\n\nfig, ax = plt.subplots(figsize=(8,8), facecolor='white')\nax.axis('off')\nlim = max(max(abs(c.x)+c.r, abs(c.y)+c.r,) for c in circles)\nplt.xlim(-lim, lim)\nplt.ylim(-lim, lim)\n\n# print circles\nfor circle,v,p,color in zip(circles,df_gb.variable,df_gb.pct,df_gb.color):\n    x, y, r = circle\n    ax.add_patch(plt.Circle((x, y), r, alpha=0.9,color = color))\n    plt.annotate(v+'\\n'+str(p)+'%',(x,y),size=12,va='center',ha='center')\n\nplt.xticks([])\nplt.yticks([])\nplt.show()\n```"]