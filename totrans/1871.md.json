["```py\n**Topics included:\n----------------**\n01\\. What is singular value decomposition?\n02\\. SVD equation and its terms\n03\\. Singular value decomposition in NumPy - svd() function\n04\\. What is eigendecomposition?\n05\\. Eigendecomposition equation and its terms\n06\\. Eigendecomposition in NumPy - eig() function\n07\\. Performing PCA using singular value decomposition\n08\\. Performing PCA using eigendecomposition\n09\\. Compare the results of both methods\n10\\. Conclusions\n```", "```py\nimport numpy as np\nA = np.array([[2, 4, 1],\n              [5, 7, 6],\n              [1, 1, 3]])\n\nU, s, Vt = np.linalg.svd(A)\n\nprint(\"A\")\nprint(A)\nprint(\"\\nU\")\nprint(U)\nprint(\"\\ns\")\nprint(s)\nprint(\"\\nVt\")\nprint(Vt)\n```", "```py\nS = np.zeros(np.shape(A))\nnp.fill_diagonal(S,s)\nprint(S)\n```", "```py\ns = np.linalg.svd(A, compute_uv=False)\nprint(s)\n```", "```py\nimport numpy as np\nA = np.array([[2, 4, 1],\n              [5, 7, 6],\n              [1, 1, 3]])\n\neigen_vals, eigen_vecs = np.linalg.eig(A)\n\nprint(\"A\")\nprint(A)\nprint(\"\\nEigenvalues\")\nprint(eigen_vals)\nprint(\"\\nEigenvectors\")\nprint(eigen_vecs)\n```", "```py\nfrom sklearn.datasets import load_wine\n\nwine = load_wine()\nX = wine.data\ny = wine.target\n\nprint(\"Wine dataset size:\", X.shape)\n```", "```py\nfrom sklearn.preprocessing import StandardScaler\n\nX_scaled = StandardScaler().fit_transform(X)\n```", "```py\nimport numpy as np\ncov_mat = np.cov(X_scaled.T)\n```", "```py\nU, s, Vt = np.linalg.svd(cov_mat)\nprint(s)\n```", "```py\nexp_var = (s / np.sum(s)) * 100\nprint(exp_var)\n```", "```py\ncum_exp_var = np.cumsum(exp_var)\n\n# a = Number of input features + 1\na = X.shape[1] + 1\n\nimport matplotlib.pyplot as plt\nplt.bar(range(1, a), exp_var, align='center',\n        label='Individual explained variance')\n\nplt.step(range(1, a), cum_exp_var, where='mid',\n         label='Cumulative explained variance', color='red')\n\nplt.ylabel('Explained variance percentage')\nplt.xlabel('Principal component index')\nplt.xticks(ticks=list(range(1, a)))\nplt.legend(loc='best')\nplt.tight_layout()\n\nplt.savefig(\"cumulative explained variance plot.png\")\n```", "```py\neigen_vals, eigen_vecs = np.linalg.eig(cov_mat)\nprint(eigen_vals)\n```", "```py\n# Sort the eigenvalues in descending order\neigen_vals = np.sort(eigen_vals)[::-1]\nprint(eigen_vals)\n```"]