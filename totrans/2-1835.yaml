- en: Setting up a flask application for Data Science
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为数据科学设置 Flask 应用
- en: 原文：[https://towardsdatascience.com/setting-up-a-flask-application-for-data-science-7522fc9f771e](https://towardsdatascience.com/setting-up-a-flask-application-for-data-science-7522fc9f771e)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/setting-up-a-flask-application-for-data-science-7522fc9f771e](https://towardsdatascience.com/setting-up-a-flask-application-for-data-science-7522fc9f771e)
- en: The basic structure of a flask application to allow for modular development
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建一个 Flask 应用的基本结构，以支持模块化开发
- en: '[](https://philip-wilkinson.medium.com/?source=post_page-----7522fc9f771e--------------------------------)[![Philip
    Wilkinson, Ph.D.](../Images/9811fa38963c29193b01a5cf856d014f.png)](https://philip-wilkinson.medium.com/?source=post_page-----7522fc9f771e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7522fc9f771e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7522fc9f771e--------------------------------)
    [Philip Wilkinson, Ph.D.](https://philip-wilkinson.medium.com/?source=post_page-----7522fc9f771e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://philip-wilkinson.medium.com/?source=post_page-----7522fc9f771e--------------------------------)[![Philip
    Wilkinson, Ph.D.](../Images/9811fa38963c29193b01a5cf856d014f.png)](https://philip-wilkinson.medium.com/?source=post_page-----7522fc9f771e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7522fc9f771e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7522fc9f771e--------------------------------)
    [Philip Wilkinson, Ph.D.](https://philip-wilkinson.medium.com/?source=post_page-----7522fc9f771e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7522fc9f771e--------------------------------)
    ·9 min read·Mar 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7522fc9f771e--------------------------------)
    ·阅读时间 9 分钟·2023 年 3 月 10 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/7e9b18fe28a0c2adf0b7354b9a41f272.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7e9b18fe28a0c2adf0b7354b9a41f272.png)'
- en: Photo by [KOBU Agency](https://unsplash.com/@kobuagency?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [KOBU Agency](https://unsplash.com/@kobuagency?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: A Data Science workflow often involves the use of notebooks and python scripts.
    These are great tools but it often means that your outputs can often remain in
    those files without seeing the light of day. A good way to change that however
    is by creating a website to show and discuss your findings or an API to serve
    your model to the rest of the world. One framework that can help in this regard
    is Flask.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学工作流程通常涉及笔记本和 Python 脚本的使用。这些都是很棒的工具，但通常意味着你的输出可能会一直保留在这些文件中，无法展示。然而，改变这种情况的一个好方法是创建一个网站来展示和讨论你的发现，或者创建一个
    API 将你的模型提供给全世界。Flask 是一个可以帮助实现这一点的框架。
- en: Flask allows you to build both websites and APIs that allow you to share your
    results more broadly. Either through an interface that tells a store of your work
    and results or through an API that other people can call to get model predictions.
    Flask is a lightweight framework that is easy to learn and use, making it a good
    choice for Data scientists who want to focus on building their models and analysing
    data rather than learning complex web development frameworks. It is also in Python
    so many of the steps in a Data Science workflow can easily be transferred over
    to the Flask framework.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 允许你构建网站和 API，使你可以更广泛地分享你的成果。无论是通过一个展示你的工作和结果的界面，还是通过一个其他人可以调用以获取模型预测的
    API，Flask 都能实现。Flask 是一个轻量级框架，易于学习和使用，非常适合希望专注于构建模型和分析数据的 Data Scientist，而不是学习复杂的
    Web 开发框架。它也使用 Python，因此数据科学工作流程中的许多步骤可以很容易地转移到 Flask 框架中。
- en: In this article I will show you how to set up the basic framework of a flask
    application that you can then build on. This will include explaining the basic
    structure of the application alongside what you would want to put in each file.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将向你展示如何设置一个 Flask 应用的基本框架，之后你可以在其基础上进行扩展。这将包括解释应用的基本结构以及你希望放入每个文件的内容。
- en: Flask project structure
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Flask 项目结构
- en: 'We can start with an overview of the basic flask structure. This takes the
    form:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从基本的 Flask 结构概述开始。它的形式如下：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'where:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: '`application/` directory contains the main flask application code'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/` 目录包含主要的 Flask 应用代码'
- en: '`static/` directory contains static files such as CSS stylesheets, Javascript
    scripts and images used in the website'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static/` 目录包含网站中使用的静态文件，如 CSS 样式表、JavaScript 脚本和图片'
- en: '`templates/` directory contains HTML templates used by the flask application'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templates/` 目录包含 Flask 应用使用的 HTML 模板'
- en: '`__init__.py` initialises the flask application and sets up the configuration
    and database connections'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__.py` 初始化 Flask 应用程序并设置配置和数据库连接。'
- en: '`routes.py` defines the routes for the flask application'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`routes.py` 定义了 Flask 应用程序的路由。'
- en: '`tests/` directory contains the test files for the flask application'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests/` 目录包含 Flask 应用程序的测试文件。'
- en: '`flask_env` contains the virtual environment for the Flask application'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flask_env` 包含 Flask 应用程序的虚拟环境。'
- en: '`.env` file contains environment variables used by the Flask application'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.env` 文件包含 Flask 应用程序使用的环境变量。'
- en: '`flask_config.py` contains the configuration settings for the Flask application'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flask_config.py` 包含 Flask 应用程序的配置设置。'
- en: '`app.py` is the entry point for the flask application and runs the flask development
    server.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.py` 是 Flask 应用程序的入口点，并运行 Flask 开发服务器。'
- en: So, how do we get started with this?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何开始呢？
- en: Setting up the environment
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置环境。
- en: To get started with building this flask application what you want to do is to
    create a Python virtual environment. This is good practice that helps to isolate
    the dependencies of the application from the global Python environment on your
    machine. This makes it easier to manage the dependencies and ensures that the
    application runs smoothly on different machines.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始构建这个 Flask 应用程序，你需要创建一个 Python 虚拟环境。这是一个好习惯，有助于将应用程序的依赖项与机器上的全局 Python 环境隔离开来。这使得管理依赖项变得更容易，并确保应用程序在不同机器上顺利运行。
- en: 'For this you need to first open a terminal window and navigate to the directory
    where you want to create the virtual environment. You then run the following command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，你需要首先打开一个终端窗口，并导航到你想要创建虚拟环境的目录。然后运行以下命令：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this case I have called it `flask_application` but it is also common to just
    call in `env` as well.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我将其命名为 `flask_application`，但也可以简单地命名为 `env`。
- en: 'You can then activate the environment using:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以使用以下命令激活环境：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'and install common libraries. In this case, the basic libraries that we will
    be using are `flask` (of course), `python-dotenv` and `pytest` . To install these
    you can then run:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 并安装常用库。在这种情况下，我们将使用的基本库是 `flask`（当然）、`python-dotenv` 和 `pytest`。要安装这些库，你可以运行以下命令：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: which should then be installed in your virtual environment. Note that sometimes
    this may take some time so don’t be too worried!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这些库应该安装在你的虚拟环境中。请注意，有时这可能需要一些时间，所以不要太担心！
- en: 'It is good practice that when changes are made to the virtual environment,
    such as installing new libraries, you freeze the requirements so that anyone else
    knows what libraries you are using and their version. This can be done using the
    command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当对虚拟环境进行更改时，例如安装新库时，最好冻结要求，以便其他人知道你使用了哪些库及其版本。这可以通过以下命令完成：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: which creates the requirements.txt file. This will make it easier for anyone
    else to replicate your environment on their own machine.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建 `requirements.txt` 文件。这将使其他人更容易在自己的机器上复制你的环境。
- en: Base level files
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础文件。
- en: 'Once your have the virtual environment set up and the `requirements.txt` file
    created then you want to start building your application up. We can therefore
    start with the files located at the bottom of the directory structure:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你设置好虚拟环境并创建了 `requirements.txt` 文件，你就可以开始构建你的应用程序。因此，我们可以从目录结构底部的文件开始：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The file you will want to start off with is the `.env` file which is used to
    set the environment variables for the application. To start off with, this will
    look like:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要首先从 `.env` 文件开始，该文件用于设置应用程序的环境变量。刚开始时，它看起来像这样：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Where the first line tells the Flask application that the application file is
    called `app.py` (not yet created). When using the `flask run` command, this will
    tell the application to run the `app.py` file to get the application started.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行告诉 Flask 应用程序应用程序文件叫做 `app.py`（尚未创建）。使用 `flask run` 命令时，这将告诉应用程序运行 `app.py`
    文件以启动应用程序。
- en: We also start with a development environment as this is only on our local machine
    for now. For this we set `FLASK_ENV = development` and `FLASK_DEBUG=1` which tells
    us that we have a development environment and to run the flask debugger when the
    environment starts. This allows for hot reloading so that when you make any changes
    to the code you don’t have to restart the instance to see those in the browser!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还从开发环境开始，因为这只是目前在本地机器上。为此，我们设置`FLASK_ENV = development`和`FLASK_DEBUG=1`，这表明我们有一个开发环境，并在环境启动时运行Flask调试器。这允许热重载，因此当您对代码进行任何更改时，不必重启实例即可在浏览器中查看这些更改！
- en: 'The final line in this file then is the secret key. This is a cryptographic
    key that is used to encrypt session data and other sensitive data that is transmitted
    between the client and server and is an important security measure. In this case
    we use a 16 bit key which is generated using the command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件中的最后一行是秘密密钥。这是一个加密密钥，用于加密会话数据和客户端与服务器之间传输的其他敏感数据，是重要的安全措施。在这种情况下，我们使用一个16位密钥，该密钥通过以下命令生成：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This file can then be added to if you have any other information or keys that
    you want the application to use such as API Keys, which can be set in this file.
    Since these are environment variables it is common to use snake case (spaces replaced
    with `_` ) where all the letters are capitalised.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有其他信息或密钥需要应用程序使用，例如API密钥，可以将这些信息添加到此文件中。由于这些是环境变量，通常使用蛇形命名法（空格替换为`_`），所有字母都大写。
- en: Of course, you don’t actually want to share your secrets or API keys with anyone
    unless you are working with them and you only want to do that securely. That is
    why you duplicate the `.env` file to create the `.env.template` file and remove
    any information you want to keep secret. Other developers can then use the `.env.template`
    file to create their own `.env` file with their own keys and information if necessary,
    or you could securely share your own keys if need be.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，除非您与他人合作并希望安全地共享，否则您实际上不希望与任何人分享您的秘密或API密钥。这就是为什么您需要复制`.env`文件来创建`.env.template`文件，并删除您希望保密的任何信息。其他开发人员可以使用`.env.template`文件创建自己的`.env`文件，填入自己的密钥和信息，或在必要时安全地共享自己的密钥。
- en: 'This means that in your `.gitignore` file, you will simply only need to write:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在您的`.gitignore`文件中，您只需写入：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: which will tell git to ignore any changes to the `.env` file to ensure that
    your secrets are not shared.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这将告诉git忽略对`.env`文件的任何更改，以确保您的秘密不会被共享。
- en: 'The next stage is then creating the `flask_config.py` file which is used to
    create a configuration object for your application. In our case this takes the
    form:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下一阶段是创建`flask_config.py`文件，用于为您的应用程序创建一个配置对象。在我们的案例中，这个对象的形式为：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: which uses the `SECRET_KEY` variable defined in the `.env` file. If the secret
    is not present then an error is raised and the application is stopped from running.
    This is used to ensure that the application runs as expected and is secure and
    can be added to if you have any other configuration parameters.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 该密钥使用了在`.env`文件中定义的`SECRET_KEY`变量。如果没有找到秘密密钥，将会引发错误，并阻止应用程序运行。这是为了确保应用程序按预期运行，并且是安全的，您可以根据需要添加其他配置参数。
- en: 'Finally then, we have the `app.py` file which is the entry point for the Flask
    application and is used to run the Flask development server. At the moment, this
    simply contains:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有`app.py`文件，它是Flask应用程序的入口点，用于运行Flask开发服务器。目前，这仅包含：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: which imports the `app` from the `application` folder and runs it. With the
    base structure in place, we can then move on to create the application structure.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该结构导入`application`文件夹中的`app`并运行它。建立了基础结构后，我们可以继续创建应用程序结构。
- en: Application structure
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序结构
- en: We create an `application` folder within the repository to organise the application
    code and resources in a structured and modular way. Specifically, this structure
    enables the application to be extended into a more comprehensive application if
    needed, by allowing for the creation of multiple routes, models, viewmodels and
    templates that can be utilised in the final application and improves the maintainability
    and scalability of the code. For now, however, we only need a simple structure.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在仓库中创建一个`application`文件夹，以结构化和模块化的方式组织应用程序代码和资源。具体而言，这种结构使得应用程序可以在需要时扩展为更全面的应用程序，通过创建多个路由、模型、视图模型和模板，从而提高代码的可维护性和可扩展性。然而，目前我们只需要一个简单的结构。
- en: 'We can start of by creating the `__init__.py` file which is used to intialise
    the application when it is called from the `app.py` file from the base folder.
    This contains:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过创建 `__init__.py` 文件开始，该文件用于初始化从基础文件夹中的 `app.py` 文件调用的应用程序。它包含：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Which imports the `flask` library and the `Config` object, initialises the app
    and then imports the routes.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 它导入 `flask` 库和 `Config` 对象，初始化应用程序，然后导入路由。
- en: Importantly, we can see that no routes or views are defined in this file. To
    maintain a modular structure, these routes which determine what the application
    does, are defined in the `routes.py` file, separate from the initalisation.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，我们可以看到这个文件中没有定义任何路由或视图。为了保持模块化结构，这些决定应用程序行为的路由是在 `routes.py` 文件中定义的，与初始化分开。
- en: 'We can thus define the `routes.py` file as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以将 `routes.py` 文件定义如下：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'There are two main things to notice here:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个主要要点需要注意：
- en: The strange decorator syntax where `@app.route("/")` is used. This decorator
    is used to define routes that users of the application can take and takes a URL
    pattern argument and associates it with a view function. In this example, we define
    a route for the root URL (`/`) and associated it with the `index()` function.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 奇怪的装饰器语法 `@app.route("/")`。这个装饰器用于定义用户可以访问的路由，接受一个 URL 模式参数并将其与视图函数关联。在这个示例中，我们为根
    URL (`/`) 定义了一个路由，并将其与 `index()` 函数关联。
- en: The `index()` function, rather than returning a value, instead returns the function
    `render_template("index.html")` . This function, provided by flask, is used to
    allow functions to return HTML templates that are predefined.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`index()` 函数不是返回一个值，而是返回函数 `render_template("index.html")`。这个函数由 flask 提供，用于允许函数返回预定义的
    HTML 模板。'
- en: So what are these HTML templates?
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这些 HTML 模板是什么呢？
- en: 'Well, in the `index()` function we return the `index.html` template. From the
    file structure this is located in the `templates` folder and contains:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，在 `index()` 函数中我们返回了 `index.html` 模板。从文件结构来看，它位于 `templates` 文件夹中，并包含：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What this is then is essentially an HTML file that in our case simply shows
    “Hello World” which can be seen between the `<h1></h1>` tags in the `container`
    class.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这本质上是一个 HTML 文件，在我们的例子中简单地显示“Hello World”，可以在 `container` 类中的 `<h1></h1>` 标签之间看到。
- en: We’ve also added in some extra bits here in the head and body which primarily
    is used to import bootstrap, a CSS framework that makes developing much easier,
    and JQuery, which makes adding interactivity much easier to the application. But
    these can be ignored if you so wish and you can simply define `<h1>Hello World!</h1>`
    in the body!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在头部和主体中添加了一些额外的内容，主要用于导入 bootstrap，一个使开发变得更容易的 CSS 框架，以及 JQuery，使应用程序的交互更容易。但如果你愿意，可以忽略这些，你可以简单地在主体中定义
    `<h1>Hello World!</h1>`！
- en: Other files and folders
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他文件和文件夹
- en: 'What we’ve then covered is the basic structure of the application and what
    it contains but there are also some other files and folders that have not been
    covered:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经覆盖了应用程序的基本结构及其内容，但还有一些其他文件和文件夹没有涉及：
- en: '`application/templates` — This folder will contain all the HTML templates that
    the application will use.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/templates` — 这个文件夹将包含应用程序使用的所有 HTML 模板。'
- en: '`application/templates/includes` — This folder can contain supplementary HTML
    structures that you may want to include in your layout or other files such as
    a navbar, footer or a jumbotron'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/templates/includes` — 这个文件夹可以包含你可能想要在布局或其他文件中包含的辅助 HTML 结构，例如导航栏、页脚或大屏幕。'
- en: '`tests` — This folder will contain all your tests for the flask application
    is split into two further folders for`functional` and `unit` tests.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests` — 这个文件夹将包含所有对 flask 应用程序的测试，进一步分为 `functional` 和 `unit` 测试两个文件夹。'
- en: '`static` — This folder contains all your static files that are used in the
    application and includes the `css` , `images` and `scripts` that may be used.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static` — 这个文件夹包含了应用程序中使用的所有静态文件，包括 `css`、`images` 和可能使用的 `scripts`。'
- en: Running the application
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'Now that we have all the structure in place and the environment set up and
    running all you have to do is run the command `flask run` . You should then see
    something like:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了所有结构设置和环境配置，只需运行命令 `flask run`。你应该会看到类似如下的内容：
- en: '![](../Images/ccd19436518b7859f97b988e65facc57.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ccd19436518b7859f97b988e65facc57.png)'
- en: Image by Author
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: which tells you the application is live and is running on `http://127.0.0.1:5000`
    .
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉你应用程序正在运行，并且运行在 `http://127.0.0.1:5000`。
- en: 'This means that you should then be able to navigate to this URL in your browser
    or to `localhost:5000` and see the output:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你应该能够在浏览器中导航到这个 URL 或 `localhost:5000` 并查看输出：
- en: '![](../Images/41cce9b6fffbf6d7c600ecef90dd6a57.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/41cce9b6fffbf6d7c600ecef90dd6a57.png)'
- en: Image by Author
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Which shows that the application is running! Congratulations, you have run your
    first flask app!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明应用程序正在运行！恭喜你，成功运行了第一个 Flask 应用！
- en: Extending the functionality
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展功能
- en: 'Beyond the basic structure shown here, flask has considerable flexibility to
    allow for a variety of different extensions:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 超越这里展示的基本结构，Flask 具有相当大的灵活性，允许各种不同的扩展：
- en: 'Flask-wtf: A library that can handle getting input from users in a secure and
    reliable way'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask-wtf：一个可以以安全和可靠的方式处理用户输入的库
- en: 'Flask-SQLAlchemy: A library that allows you to integrate with the SQLAlchemy
    ORM and hence with databases (there are also other libraries interaction with
    other common databases such as MongoDB)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask-SQLAlchemy：一个允许你与 SQLAlchemy ORM 及数据库集成的库（还有其他库可以与如 MongoDB 等常见数据库进行交互）
- en: 'Flask-Login: A library that provides user authentication functionality if you
    want to manage access to certain parts of your application based on user roles.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask-Login：一个提供用户认证功能的库，如果你想根据用户角色管理对应用程序某些部分的访问权限。
- en: Among many more libraries and use cases! This structure facilitates these extensions
    by allowing you to build up the application in a modular way, improving maintainability,
    scalability and the modularity of the code. Whether you want to serve an API over
    the routes to your machine learning algorithm or you want to showcase your story
    in a website!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多更多的库和用例中！这种结构通过允许你以模块化的方式构建应用程序，从而促进了这些扩展，提升了代码的可维护性、可扩展性和模块化。不论你是想通过路由服务你的机器学习算法的
    API，还是想在网站上展示你的故事！
- en: 'Code for this post is available at: [https://github.com/PhilipDW183/flask_structure](https://github.com/PhilipDW183/flask_structure)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的代码可以在：[https://github.com/PhilipDW183/flask_structure](https://github.com/PhilipDW183/flask_structure)
    获取
