- en: 'Upgrade Your Data Visualisations: 4 Python Libraries to Enhance Your Matplotlib
    Charts'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/upgrade-your-data-visualisations-4-python-libraries-to-enhance-your-matplotlib-charts-74361bc3b92e](https://towardsdatascience.com/upgrade-your-data-visualisations-4-python-libraries-to-enhance-your-matplotlib-charts-74361bc3b92e)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Improve Your Data Visualisations with These Easy-to-Use Matplotlib Style Libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----74361bc3b92e--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----74361bc3b92e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----74361bc3b92e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----74361bc3b92e--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----74361bc3b92e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----74361bc3b92e--------------------------------)
    ·10 min read·Apr 11, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d8a07ceb3cd353286c89691b31d29527.png)'
  prefs: []
  type: TYPE_IMG
- en: Example line plot with gradient fill generated by the CyberPunk matplotlib theme.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Matplotlib**](https://matplotlib.org/) is a widely used data visualisation
    Python library, and is often come across early in the data science and python
    learning journey. However, over the years, it has gained a reputation for creating
    plain-looking figures, and it can be awkward to use, especially for newcomers.'
  prefs: []
  type: TYPE_NORMAL
- en: In my last few articles, I have shown how we can turn the basic plots that [**matplotlib**](https://matplotlib.org/)
    creates into [**something that is more eye-catching and aesthetically pleasing
    to look at**](https://medium.com/p/421ab8cdd36f). This has ranged from extending
    the plotting code by writing several additional lines of code to just adding a
    few lines.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I will share with you four matplolib theme libraries that can
    easily take your matplotlib figures from boring to interesting. Each theme can
    be applied using two lines of code — an import statement and a use statement from
    matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: Even though these libraries are great for creating stylish plots, you need to
    be aware of your intended audience and different visual issues people may have,
    including colour blindness.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s jump into it!
  prefs: []
  type: TYPE_NORMAL
- en: Creating Dummy Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start using the matplotlib styles, we first need to create some dummy
    data so that we have something to display.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can easily be done like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: CyberPunk Style with mplcyberpunk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cyberpunk is a popular science fiction subgenre known for its dystopian, technologically
    advanced worlds and countercultural attitude. Often scenes are depicted in a futuristic
    style featuring neon lights and bright, bold colours.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e6f0fba1531d0aea99da47766eb4ad85.png)'
  prefs: []
  type: TYPE_IMG
- en: Image generated by the author using Midjourney. (a bustling dystopian cyberpunk-themed
    futuristic city street featuring places with lots of street vendors. Shops and
    area surrounded with bright neon lights. Rainy and dark atmosphere. Photorealistic.
    — ar 3:2)
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes when creating plots for a poster or infographic, you need that extra
    spark to draw in the reader. This is where I feel the CyberPunk styling comes
    into its own. However, you do have to be aware that it may not be seen as professional
    when creating figures for publications, and it may not be suitable for readers
    with colour vision problems.
  prefs: []
  type: TYPE_NORMAL
- en: We can easily apply this styling to our plots using the [**CyberPunk theme.**](https://github.com/dhaitz/mplcyberpunk)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bffa76dc40932ce6cb12c2903410612f.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of a CyberPunk-themed Matplotlib figure. Image by dhaitz and from the
    CyberPunk Readme.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started with this theme, we can install it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To use the CyberPunk theme, all we have to do is call upon `plt.style.use()`
    and pass in the parameter `cypberpunk`.
  prefs: []
  type: TYPE_NORMAL
- en: In order to make our points glow, we need to make a call to the `make_scatter_glow()`
    function. This appears to be required after each call to `plt.scatter()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we get back the following plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a40e1b2747752bdebfb272720649b3f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Scatter plot after applying the CyberPunk theme. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We can also apply the CyberPunk theme to line plots. To make the lines glow,
    we can make a single call to `mplcyberpunk.make_lines_glow()`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When run, the following plot is returned with neon-like lines.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/059d305ac75e3c8b2b2f39dc6481c421.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib chart after applying the CyberPunk theme. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We can take the above plot one step further and include a gradient fill between
    the lines and the zero point.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This creates a very interesting effect like so.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6ac77c1c6bd619af3bd46d86d29e5c1e.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib chart after applying glowing gradient filled using the CyberPunk
    theme. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: There are several other options for the CypberPunk library, and it is worth
    checking out its repository.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/dhaitz/mplcyberpunk?source=post_page-----74361bc3b92e--------------------------------)
    [## GitHub - dhaitz/mplcyberpunk: "Cyberpunk style" for matplotlib plots'
  prefs: []
  type: TYPE_NORMAL
- en: A Python package on top of matplotlib to create 'cyberpunk' style plots with
    3 additional lines of code. After…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/dhaitz/mplcyberpunk?source=post_page-----74361bc3b92e--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Matplotx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The [**matplotx library**](https://github.com/nschloe/matplotx) provides an
    easy way to stylise your matplotlib figures instantly. The library contains several
    themes that can easily be accessed and applied to any matplotlib figure.
  prefs: []
  type: TYPE_NORMAL
- en: When working with plots and figures in dark-themed Jupyter Notebooks or VSCode,
    having bright white figures appear can be jarring to the eye.
  prefs: []
  type: TYPE_NORMAL
- en: In order to reduce this impact, we can make the figures dark-themed. However,
    this does require several lines of code to get the styling correct.
  prefs: []
  type: TYPE_NORMAL
- en: Matplotx makes this process much easier, as you will see below. And as it contains
    multiple themes, I can easily find one that matches my VSCode theme.
  prefs: []
  type: TYPE_NORMAL
- en: Matplotx can be installed into your Python environment by opening up a terminal/command
    prompt and running the following command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Once the library has been installed, we can simply use a with statement, to
    call upon `plt.style.context` and pass in `matplotx.styles` . From here, we can
    choose one of the many available themes.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, I have selected the very popular Dracula theme
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When run, we get back the following
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cf2a546d2bde9e9e0852c4243c841d19.png)'
  prefs: []
  type: TYPE_IMG
- en: Scatter plot after applying the matplotx, dracula theme. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a whole host of different styles within matplotx:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0f1b25ee96966953cd7b64b70832c7de.png)'
  prefs: []
  type: TYPE_IMG
- en: Some of the styles available from matplotx. Image captured from matplotx GitHub
    repository
  prefs: []
  type: TYPE_NORMAL
- en: Let’s check out our line plot with the Pitaya Smoothie theme.
  prefs: []
  type: TYPE_NORMAL
- en: As there are multiple sub-themes for this, we need to access them using square
    brackets. In this example, we have a dark theme, so we need to pass in `dark`
    in order to access it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we get back the following line plot in our chosen
    theme.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f8bafe5e1fa83327182c4313170bc78a.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib line plot after applying thePitaya Smoothie dark theme from matplotx.
    Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also numerous light themes. For example, Pitaya Smoothie has one
    and can be accessed like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fc4c1fdb2830a5f4c4557ea26e968bed.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib line plot after applying the Pitaya Smoothie light theme from matplotx.
    Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to see more on this library, check out my earlier article:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/from-dull-to-stunning-how-matplotx-can-improve-your-matplotlib-charts-f370cbf7acc?source=post_page-----74361bc3b92e--------------------------------)
    [## From Dull to Stunning: How Matplotx Can Improve Your Matplotlib Charts'
  prefs: []
  type: TYPE_NORMAL
- en: Simplifying the process of creating stunning charts with Matplotx
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/from-dull-to-stunning-how-matplotx-can-improve-your-matplotlib-charts-f370cbf7acc?source=post_page-----74361bc3b92e--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Or, if you want to grab the theme and try it out yourself, check out the link
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/nschloe/matplotx?source=post_page-----74361bc3b92e--------------------------------)
    [## GitHub - nschloe/matplotx: More styles and useful extensions for Matplotlib'
  prefs: []
  type: TYPE_NORMAL
- en: Some useful extensions for Matplotlib. This package includes some useful or
    beautiful extensions to Matplotlib. Most of…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/nschloe/matplotx?source=post_page-----74361bc3b92e--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Quantum Black Styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: QuantumBlack Labs is a company founded in 2012 that helps other companies use
    data to make better decisions. They use advanced technology like machine learning
    and artificial intelligence to analyse complex data sets across a range of industries
    like healthcare, finance, and transportation.
  prefs: []
  type: TYPE_NORMAL
- en: A few years ago, they released their own styles on [**GitHub.**](https://github.com/quantumblacklabs/qbstyles)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/02a5513c834fb309768b0a7795e0301e.png)'
  prefs: []
  type: TYPE_IMG
- en: Examples of applying the Quantum Black Labs style library to matplotlib figures.
    Image created by Quantum Black Labs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the theme, we can install the style library like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Once installed, we need to add the following line to import it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you are working in Jupyter Notebooks, you will need to use separate cells
    between the above line and the ones below.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to use the dark theme, we call upon the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, if we want to use a light theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We can then begin the code for creating our scatter plot
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We will get back one of the following plots, depending on whether you selected
    a light or a dark theme.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/24751daa670ab16fe8a911dd8edb5133.png)![](../Images/bb31a49b40794eb1a3e902de205d717c.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib scatter plots after applying the Quantum Black Labs theme (light
    mode on the left, dark mode on the right). Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how the dark theme looks on a line plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above, we get back the following plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/70ed8fa202b243adf4d1f533fc8052b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib line plot after applying the Quantum Labs Dark theme. Image by the
    author.
  prefs: []
  type: TYPE_NORMAL
- en: The styling of plots with this library is a little toned down from the plots
    generated in Matplotx, however, it does make them feel slightly more professional,
    especially with the light-styled plots. I wouldn’t have any hesitation in including
    these in a professional presentation or in training course material.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check out the theme in the link below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/quantumblacklabs/qbstyles?source=post_page-----74361bc3b92e--------------------------------)
    [## GitHub - quantumblacklabs/qbstyles: QuantumBlack Matplotlib styles'
  prefs: []
  type: TYPE_NORMAL
- en: QB Styles is a python package with a light and a dark matplotlib style. Dark
    style Light style qbstyles is a Python…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/quantumblacklabs/qbstyles?source=post_page-----74361bc3b92e--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Science Plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When writing scientific journal or conference articles, creating clear, simple,
    and easily interpretable figures is essential. Some journals, such as Nature,
    require a set style, while in other cases, it is considered nice to have and prevents
    having stylised graphics that make it difficult for the reader to interpret.
  prefs: []
  type: TYPE_NORMAL
- en: This is where the **SciencePlots library** comes in.
  prefs: []
  type: TYPE_NORMAL
- en: It is used to generate graphs using common scientific journal styles, making
    creating figures much easier.
  prefs: []
  type: TYPE_NORMAL
- en: One thing that is great with this library is it makes the figures suitable for
    printing out in black and white — which is still a common practice amongst researchers.
    This will result in the lines being easily distinguishable from each other by
    changing the line styles or making sure there are different shapes on a scatter
    plot for categorical data.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to explore more of the styles that are available within [SciencePlots](https://github.com/garrettj403/SciencePlots),
    I recommend checking out the Wiki Page on the library’s GitHub page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/garrettj403/SciencePlots/wiki/Gallery?source=post_page-----74361bc3b92e--------------------------------)
    [## Gallery'
  prefs: []
  type: TYPE_NORMAL
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/garrettj403/SciencePlots/wiki/Gallery?source=post_page-----74361bc3b92e--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Running the SciencePlots styling library requires LaTeX to be installed on your
    computer. You can find more details about LaTex and how to install [**here**](https://www.latex-project.org/get/).
  prefs: []
  type: TYPE_NORMAL
- en: If running on Google Colab, you can run the following code in a cell in order
    to install LaTeX.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Once the library and LaTeX have been set up, you can create your first scientific
    plot using the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we get the following plot, which is ideal for including
    in a journal publication. It is simple and easy to distinguish between the different
    lines.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c672d919a9cc68501f8f5f362380170c.png)'
  prefs: []
  type: TYPE_IMG
- en: SciencePlots theme applied to a line plot, providing high-visibility and suitable
    for inclusion in scientific journals. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see what the IEEE style is like. We can create one by modifying the following
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: It’s a little different to the one above, and the colours have changed, but
    still a very good-looking scientific journal plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c4e6d5086b030f17c4e3161d7a3d10f6.png)'
  prefs: []
  type: TYPE_IMG
- en: SciencePlots theme applied to a line plot using IEEE styling. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Over the years, I have authored numerous technical papers for conferences and
    journals. These papers have been heavy on the charts, and these have often been
    created in Excel or with several lines of Python plotting code. This can be time-consuming,
    especially in getting the sizing, colours and line styles correct.
  prefs: []
  type: TYPE_NORMAL
- en: Going forward, for any of my future papers, I will be looking at the SciencePlots
    theme as a starting point.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested in giving it a go, you can grab the SciencePlots theme
    from the link below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/garrettj403/SciencePlots?source=post_page-----74361bc3b92e--------------------------------)
    [## GitHub - garrettj403/SciencePlots: Matplotlib styles for scientific plotting'
  prefs: []
  type: TYPE_NORMAL
- en: 'Warning : As of version 2.0.0, you need to add import scienceplots before setting
    the style (…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/garrettj403/SciencePlots?source=post_page-----74361bc3b92e--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within this article, we have seen four very useful matplotlib python libraries
    that can take your boring matplotlib figure to the next level. Each of these libraries
    provides unique styling to your plots.
  prefs: []
  type: TYPE_NORMAL
- en: Even though these styles provide a nice creative visualisation, you do need
    to consider your audience, especially those with colour blindness and other eye-related
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, the whole point of creating awesome data visuals is to make your info
    easy to understand and share your story in the best way possible.
  prefs: []
  type: TYPE_NORMAL
- en: But, sometimes, having some fun with data and going all out with a CyberPunk
    theme is nice.
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)*Alternatively,
    you can* [***sign up for my newsletter***](https://fabulous-founder-2965.ck.page/2ca286e572)
    *to get additional content straight into your inbox for free.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Secondly, you can get the full Medium experience and support thousands of
    other writers and me by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the fantastic Medium articles, as well as the
    chance to make money with your writing.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support.*'
  prefs: []
  type: TYPE_NORMAL
