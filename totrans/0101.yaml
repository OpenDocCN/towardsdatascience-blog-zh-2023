- en: 5 Easy and Effective Ways to Use Python Logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/5-easy-and-effective-ways-to-use-python-logging-a9564bd17ccd](https://towardsdatascience.com/5-easy-and-effective-ways-to-use-python-logging-a9564bd17ccd)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use Python Logging like a Pro
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://dmitryelj.medium.com/?source=post_page-----a9564bd17ccd--------------------------------)[![Dmitrii
    Eliuseev](../Images/7c48f0c016930ead59ddb785eaf3e0e6.png)](https://dmitryelj.medium.com/?source=post_page-----a9564bd17ccd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a9564bd17ccd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a9564bd17ccd--------------------------------)
    [Dmitrii Eliuseev](https://dmitryelj.medium.com/?source=post_page-----a9564bd17ccd--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a9564bd17ccd--------------------------------)
    ·5 min read·Jun 16, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/15b156437e425ed1bab6abb488109fac.png)'
  prefs: []
  type: TYPE_IMG
- en: Image generated by author
  prefs: []
  type: TYPE_NORMAL
- en: I can bet that almost every Python developer sometimes uses “print” for debugging.
    There’s nothing wrong with that for prototyping, but for production, there are
    much more effective ways to handle the logs. In this article, I will show five
    practical reasons why Python “logging” is much more flexible and powerful and
    why you absolutely should use it if you have not started before.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get into it.
  prefs: []
  type: TYPE_NORMAL
- en: Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make things more practical, let’s consider a toy example. I created a small
    application that calculates a linear regression for two Python lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This code works, but can we do it better? We obviously can. Let’s see five advantages
    of using “*logging*” instead of “*print”* in this code.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Logging levels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s change our code a bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here I replaced “print” calls with “logging” calls. We made a small change,
    but it makes the output much more flexible. Using the “level” parameter, we can
    now set different **logging levels**. For example, if we use “*level=logging.DEBUG”*,
    then all output will be visible. When we are sure that our code is ready for production,
    we can change the level to “*logging.INFO”*, and debugging messages will not be
    displayed anymore:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/34e99f94dbf967ee7ccad706bc985a91.png)'
  prefs: []
  type: TYPE_IMG
- en: The “INFO” debug level is at the left and “DEBUG” at the right, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: And what is important is that no code change is needed except the initialization
    of the logging itself!
  prefs: []
  type: TYPE_NORMAL
- en: 'By the way, all available constants can be found in the *logging/__init__.py*
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the “ERROR” level is the highest; by enabling the “ERROR” log
    level, we can suppress all other messages, and only errors will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Formatting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we can see from the last screenshot, it is easy to control the logging output.
    But we can do much more to improve that. We can also adjust the output by providing
    the “*format”* string. For example, I can specify formatting like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Without any other code changes, I will be able to see timestamps, file names,
    and even the line numbers in the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b3f1d4f3e7e2e74df608dad6ca20df85.png)'
  prefs: []
  type: TYPE_IMG
- en: Logging output, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: There are about 20 different parameters available, which can be found in the
    “[LogRecord attributes](https://docs.python.org/3/library/logging.html)” paragraph
    of the manual.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Saving logs to a file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Python logging is a very flexible module, and its functionality can be easily
    expanded. Let’s say we want to save all our logs into a file for future analysis.
    To do this, we need to add only two lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, I added a new parameter “handlers”. A *StreamHandler* is displaying
    the log at the console, and the *FileHandler*, as we can guess from its name,
    saves the same output to the file.
  prefs: []
  type: TYPE_NORMAL
- en: This system is really flexible. Plenty of different “handler” objects are available
    in Python, and I encourage readers to [check the manual](https://docs.python.org/3/library/logging.handlers.html)
    on their own. And as we already know, logging works almost automatically; no further
    code changes are required.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Rotating log files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Saving logs into a file is a good option, but alas, the disk space is not unlimited.
    We can easily solve this problem by using the rotating log file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: All parameters are self-explanatory. A *TimedRotatingFileHandler* object will
    create a log file, which will be changed every midnight, and only the last three
    log files will be stored. The previous files will be automatically renamed to
    something like “debug.log.2023.03.03”, and after a 3-day interval, they will be
    deleted.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Sending logs via socket
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Python’s logging is surprisingly flexible. If we don’t want to save logs into
    a local file, we can just add a socket handler, which will send logs to another
    service using a specific IP and port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: That’s it; no more code changes are required!
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also create another application that will listen to the same port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The tricky part here is to use the *emit* method, which adds all remote data
    received by a socket to an active StreamHandler.
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Bonus: Log filters'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, a small bonus for readers who were attentive enough to read until
    this part. It is also easy to add custom filters to logs. Let’s say we want to
    log only X and Y values into the file for future analysis. It is easy to create
    a new Filter class, which will save to log only strings containing “x:” or “y:”
    records:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Then we can easily add this filter to the file log. Our console output will
    stay intact, but the file will have only “x:” and “y:” values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this short article, we learned several easy ways to incorporate logs into
    the Python application. Logging in Python is a very flexible framework, and it
    is definitely worth spending some time investigating how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading, and good luck with future experiments.
  prefs: []
  type: TYPE_NORMAL
- en: If you enjoyed this story, feel free [to subscribe](https://medium.com/@dmitryelj/membership)
    to Medium, and you will get notifications when my new articles will be published,
    as well as full access to thousands of stories from other authors.
  prefs: []
  type: TYPE_NORMAL
