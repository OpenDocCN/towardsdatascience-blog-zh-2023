- en: 'Graphing Billy Corgan’s Network: Analyzing and Mapping Social Relationships
    with Python’s NetworkX Library — Part 4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/graphing-billy-corgans-network-analyzing-and-mapping-social-relationships-with-python-s-networkx-724de1e431ac](https://towardsdatascience.com/graphing-billy-corgans-network-analyzing-and-mapping-social-relationships-with-python-s-networkx-724de1e431ac)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Continue learning how to conduct social network analysis with NetworkX and Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://christineegan42.medium.com/?source=post_page-----724de1e431ac--------------------------------)[![Christine
    Egan](../Images/d0a11bde52ceaa53d7162f2dd77c8041.png)](https://christineegan42.medium.com/?source=post_page-----724de1e431ac--------------------------------)[](https://towardsdatascience.com/?source=post_page-----724de1e431ac--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----724de1e431ac--------------------------------)
    [Christine Egan](https://christineegan42.medium.com/?source=post_page-----724de1e431ac--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----724de1e431ac--------------------------------)
    ·11 min read·Jul 21, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '[At the beginning of our investigation into Billy Corgan’s sphere of influence](https://medium.com/towards-data-science/visualizing-social-networks-for-better-insights-analyzing-and-mapping-social-relationships-with-efeb82ab853e),
    we introduced social network analysis and basic concepts like nodes and edges.
    In [Part 2](https://medium.com/towards-data-science/visualizing-social-networks-for-better-insights-analyzing-and-mapping-social-relationships-with-f4a9cf6b6d57),
    we expanded our understanding of social network analysis by graphing the relationships
    between the members of the bands [Smashing Pumpkins](https://smashingpumpkins.com/)
    and [Zwan](https://en.wikipedia.org/wiki/Zwan). Then, we examined metrics like
    degree centrality and betweenness centrality to investigate the relationships
    between the members of the different bands. At the same time, we discussed how
    domain knowledge helps to inform our understanding of the results.'
  prefs: []
  type: TYPE_NORMAL
- en: In [Part 3](https://medium.com/towards-data-science/closeness-and-communities-analyzing-social-networks-with-python-and-networkx-part-3-c19feeb38223),
    we introduced a third centrality measure, [closeness centrality](https://neo4j.com/docs/graph-data-science/current/algorithms/closeness-centrality/).
    We also began a discussion on the concept of communities and subgroups and demonstrated
    different community graphs and how we might use closeness centrality to inform
    our interpretation. Using the network of musicians that were members of the bands
    Zwan and Smashing Pumpkins, we made inferences about the relationships between
    the members.
  prefs: []
  type: TYPE_NORMAL
- en: This time around, we will make our results more interesting by expanding the
    network and adding additional bands. At the same time, we will expand our understanding
    of measures of centrality and the concept of community while refining our Matplotlib
    skills to make your NetworkX graphs even more engaging.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/98ff5a512ec3f8d30e0fbb5bb4bc4023.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Tool — By Lugnuts — Own work, CC BY-SA 4.0](https://commons.wikimedia.org/w/index.php?curid=117730065)'
  prefs: []
  type: TYPE_NORMAL
- en: Adding Complexity to the Network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In previous installments, we covered three essential metrics in social network
    analysis: **degree centrality**, **betweenness centrality**, and **closeness centrality**.
    We also discussed the concept of **communities** and described how that framework
    can be applied to understand network dynamics among the communities/bands that
    comprise Billy Corgan’s network.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/24010914bf66ddc999448305ac2ffd6b.png)'
  prefs: []
  type: TYPE_IMG
- en: Remember this from last time? It’s a NetworkX graph we created with Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: While even a small group of musicians can exhibit interesting network dynamics,
    the lack of complexity in the network made our results less interesting and did
    not provide insights beyond what we might glean from common sense. This time around,
    we will add more bands and musicians to the network to observe how communities
    emerge the connections between the musicians influence network dynamics.
  prefs: []
  type: TYPE_NORMAL
- en: Another Sphere of Influence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another popular rock band that emerged during the 1990s is [Tool](https://loudwire.com/tags/tool/)
    — known for their unique and progressive approach to rock music. Tool often combines
    elements of alternative metal, progressive rock, and art rock, resulting in a
    distinctive and experimental sound. Their songs often incorporate metaphorical
    and allegorical storytelling that leaves room for interpretation.
  prefs: []
  type: TYPE_NORMAL
- en: From a data science perspective, Tool is an interesting choice, because they
    also incorporate mathematical themes in various ways within their music. While
    they don’t explicitly utilize mathematical formulas or equations (in other words
    — we can’t exactly call them a [math rock band](https://en.wikipedia.org/wiki/List_of_math_rock_groups)),
    they often employ complex time signatures and rhythmic patterns that can be seen
    as mathematically inspired. [One of the better-known examples](https://www.youtube.com/watch?v=nI63B3cY7q0)
    of mathematical themes in Tool’s music is the Fibonacci Sequence and the Golden
    Ratio in the song [Lateralus](https://en.wikipedia.org/wiki/Lateralus_(song)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/af3ad3f641069c3a1179b2985e17763c.png)'
  prefs: []
  type: TYPE_IMG
- en: Maynard James Keenan © Markus Felix | PushingPixels ([contact me](https://commons.wikimedia.org/wiki/User_talk:MarkusFelix)),
    CC BY-SA 4.0, via Wikimedia Commons
  prefs: []
  type: TYPE_NORMAL
- en: Fans will note that Maynard James Keenan, the lead singer of Tool and A Perfect
    Circle, has other projects that we will save for a future installment. But what
    does any of this have to do with Billy Corgan? Let’s use measures of centrality
    to investigate.
  prefs: []
  type: TYPE_NORMAL
- en: Before you start…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Do you have basic knowledge of* ***Python****? If not,* [*start here*](https://medium.com/towards-data-science/virtual-environments-for-python-data-science-projects-on-mac-os-big-sur-with-pyenv-and-virtualenv-60db5516bf06)*.*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*How about* ***Pandas****? If not,* [*start here*](https://medium.com/towards-data-science/pandas-i-read-csv-head-tail-info-and-describe-43b9b2736490)*.*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Are you familiar with* ***basic concepts in social network analysis****, like
    nodes and edges? If not,* [*start here*](/visualizing-social-networks-for-better-insights-analyzing-and-mapping-social-relationships-with-efeb82ab853e)*.*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Are you comfortable with concepts in social network analysis****,*** *like*
    ***degree centrality*** *and* ***betweenness centrality****? If not,* [*start
    here*](https://medium.com/towards-data-science/visualizing-social-networks-for-better-insights-analyzing-and-mapping-social-relationships-with-f4a9cf6b6d57)*!
    How about* ***communities****? If not,* [*start here*](https://medium.com/towards-data-science/closeness-and-communities-analyzing-social-networks-with-python-and-networkx-part-3-c19feeb38223)*.*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[](https://christineegan42.medium.com/membership?source=post_page-----724de1e431ac--------------------------------)
    [## Join Medium with my referral link - Christine Egan'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: christineegan42.medium.com](https://christineegan42.medium.com/membership?source=post_page-----724de1e431ac--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Measures of Centrality with Python and NetworkX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the code cells below we will expand our network by adding **Tool** and **A
    Perfect Circle** toour network of 1990s musicians. Then, we will use measures
    of centrality to analyze the network.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Constructing Communities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the code cell below, we import NetworkX and Matplotlib. Just like we did
    in [Part 3](/closeness-and-communities-analyzing-social-networks-with-python-and-networkx-part-3-c19feeb38223),
    we create a graph object with NetworkX and make a list of all the band members
    in each band. Then, we combine all of the bands and assign them to the variable
    `communities` .
  prefs: []
  type: TYPE_NORMAL
- en: '***Note: Current and former members are included in the lists of members.***'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to use a for-loop to iterate over the list of band members.
    Then, we use `.add_nodes_from()` to add each band member to the network graph.
  prefs: []
  type: TYPE_NORMAL
- en: To connect members of the same `community` (i.e., band) , we input a list comprehension
    that contains each member in the band and eliminates any doubles (e.g., `(Billy
    Corgan, Billy Corgan)` ) into the `.add_edges_from()` .
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Calculate Measures of Centrality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With our data in place and our network graph populated, we can call on methods
    from NetworkX to calculate measures of centrality and analyze the network. The
    results will be stored in a [Pandas dataframe](https://medium.com/towards-data-science/pandas-i-read-csv-head-tail-info-and-describe-43b9b2736490).
  prefs: []
  type: TYPE_NORMAL
- en: 'The output should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is significantly more interesting than our results in the last episode,
    which looked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Before we move on to build a visualization with Matplotlib of this NetworkX
    graph, let’s digest our observations about the table that we generated. To do
    this, we will describe each centrality measure, then make an interpretation based
    on the results from our data.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Betweenness Centrality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*(Quantifies how often a node acts as a bridge or intermediary in the flow
    of information or interactions between other nodes.)*'
  prefs: []
  type: TYPE_NORMAL
- en: When our network contained only two bands (Smashing Pumpkins and Zwan), Billy
    Corgan and Jimmy Chamberlain ranked the highest in betweenness centrality. Since
    Tool and A Perfect Circle share a common frontman, we see that Maynard James Keenan
    usurps some of the betweenness, lowering the betweenness between Billy and Jimmy.
    However, the band member with the new highest betweenness centrality is **James
    Iha**. This suggests that James Iha is the node that links these *subgroups* together.
    Using domain knowledge, this checks out. As a member of both Smashing Pumpkins
    and A Perfect Circle, he is the common link between Billy Corgan’s bandmates and
    Maynard James Keenan’s bandmates.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Degree Centrality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*(Measures the number of direct connections (edges) that a node (individual)
    has in the network.)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**James Iha** has the highest degree centrality score (0.782609), indicating
    that he has the most direct connections with other individuals in the network.
    This is because unlike Zwan and Tool, Smashing Pumpkins and A Perfect Circle have
    had a rotating cast of members that all share a connection with James Iha.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/30a30b93675d91e30253bb6e8e0a0b32.png)'
  prefs: []
  type: TYPE_IMG
- en: James Iha by Tiffany Bauer, [CC BY-SA 3.0](http://creativecommons.org/licenses/by-sa/3.0/),
    via [Wikimedia Commons](https://commons.wikimedia.org/wiki/File:James_Iha.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Closeness Centrality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Closeness centrality measures how close a node is to all other nodes in the
    network, taking into account the shortest paths. In this case, James Iha has the
    highest closeness centrality score (0.821429), indicating that he can reach other
    individuals in the network quickly and efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: These centrality measures provide a way to identify key individuals who have
    significant connections, act as bridges, and have efficient access to other individuals
    in the network.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have calculated the measures of centrality, we can create a NetworkX
    graph with Matplotlib. This time, we will make the graph more engaging by adding
    colors, labels, titles, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Visualize NetworkX Graphs with Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The table we created in the previous section provides important information
    about influential musicians in the network. To make these results more intuitive,
    we can create a visualization of the graph with [Matplotlib](https://matplotlib.org/)
    and NetworkX. In previous installments, we have kept our graphs relatively simple.
    This time, we will use some advanced functionality to make our visualization especially
    engaging.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a reminder, this is what our previous network graph looked like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/24010914bf66ddc999448305ac2ffd6b.png)'
  prefs: []
  type: TYPE_IMG
- en: NetworkX graph for Smashing Pumpkins and Zwan from Closeness and Communities
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Add Color with Matplotlib
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you check the [NetworkX documentation](https://networkx.org/documentation/stable/reference/generated/networkx.drawing.nx_pylab.draw_networkx_nodes.html)
    for the method `.draw_networkx_nodes()`, you will notice an argument for `node_color`
    that accepts a `color` or `array of colors`. In our case, we want to go with the
    `array of colors` so that we can assign a color to each node based on which band
    the member is in.
  prefs: []
  type: TYPE_NORMAL
- en: Before we get into those details, let’s select some colors. 🎨
  prefs: []
  type: TYPE_NORMAL
- en: When creating plots with Matplotlib, you can use [named colors or hex codes](https://matplotlib.org/stable/tutorials/colors/colors.html).
    For more information about color choices and the many techniques available, check
    out the [documentation](https://matplotlib.org/stable/tutorials/colors/colors.html#comparison-between-x11-css4-and-xkcd-colors)
    (they even provide code so that you can generate this chart yourself 🤩).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2935b189a87dc15e38b5f051c09d1e09.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Named Colors to use with Matplotlib](https://matplotlib.org/stable/gallery/color/named_colors.html)'
  prefs: []
  type: TYPE_NORMAL
- en: In our case, the goal is to create a dictionary of band names that are mapped
    to the colors we selected. Then, we want to loop over the nodes and add the selected
    color for that node to a list. Since we want to emphasize connections between
    the communities, we will choose a special color for members that appear in more
    than one band.
  prefs: []
  type: TYPE_NORMAL
- en: To accomplish this, we use a `for-loop` to iterate over every node in the network.
    Then, we use a series of `if-else` statements to assign the special color to any
    member that appears more than once in `flat_communities`. If the node for that
    member only appears once, a color is assigned based on which band the member belongs
    to.
  prefs: []
  type: TYPE_NORMAL
- en: Using the code block above, we generated a list of twenty-four colors. This
    directly maps to the list of twenty-four nodes in the network.
  prefs: []
  type: TYPE_NORMAL
- en: This output will be the input for `.node_colors()` when we call on `.draw_networkx_nodes()`
    to start populating our graph’s visualization.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Plotting Figures and Calculating Node Position
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin drawing the visualization, we call on Matplotlib’s `.figure()` and
    set `figsize` to 20 x 12 to provide room for our network graph.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we use NetworkX’s `.spring_layout()` to calculate the position of each
    node in the network. This will allow us to plot the nodes on the visualization.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Draw Nodes and Edges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we will use `.draw_networkx_nodes()` and `.draw_networkx_edges()` to graph
    each node and their connection. Let’s discuss the arguments for each.
  prefs: []
  type: TYPE_NORMAL
- en: '`**.draw_networkx_nodes()**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`G`: the NetworkX graph object (`G`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pos`: the position of each of the nodes we generated above (`pos`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`node_color`: the list of colors we generated (`node_colors`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`node_size`: how big should each node be?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alpha`: how transparent should each node be?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.draw_networkx_edges()**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`G`: the NetworkX graph object (`G`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pos`: the position of each of the nodes we generated above (`pos`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`edge_color`: what color should the edges be?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alpha`: how transparent should each edge be?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is what it looks like in Python
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Add Labels to NetworkX Graphs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To add labels, we can use the NetworkX method `.draw_networkx_labels` .
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go through each parameter and understand their significance. We will skip
    the ones we have recently reviewed, like `G` and `pos`. Then, I’ll show you how
    to put it all together.
  prefs: []
  type: TYPE_NORMAL
- en: '`font_size`: This parameter sets the font size for the node labels. It specifies
    how large or small the text representing the node label should be.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`font_color`: This parameter sets the color of the node labels. You can specify
    the color using various formats, such as named colors (‘red’, ‘blue’, etc.) or
    hexadecimal values (‘#RRGGBB’) .'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`verticalalignment`: This parameter controls the vertical alignment of the
    node labels with respect to the nodes. For example, setting it to `’top’` aligns
    the labels above the nodes.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`bbox`: This parameter is a dictionary containing properties for the bounding
    box (bbox) of the node labels. It is typically used to define a background box
    or a rectangle around the labels to improve visibility and readability.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`labels`: This is an optional parameter that allows you to specify a dictionary
    with custom node labels. The dictionary’s keys should be node IDs (usually integers),
    and the values should be the corresponding labels you want to assign to each node.
    If this parameter is not provided, the default node labels will be used (usually
    the node IDs).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is what the code will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '**5\. Add a Legend to Matplotlib Visualizations**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, we want to add a legend to provide context for the viewer. To accomplish
    this, we need to create three lists (`legend labels`, `legend colors`, and `legend
    markers`), then provide those lists as arguments to `plt.legend()` . We will also
    use the optional args `loc`, `fontsize`, `frameon`, `borderpad`, and `borderaxespad`
    , to stylize the legend.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s review the purpose of each optional arg we selected.
  prefs: []
  type: TYPE_NORMAL
- en: '`loc` : Where should the legend be located on the screen?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`fontsize`: Determines the text size of the legend.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`frameon`: Adds a border around the legend.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`borderpad`: Adds a little pad space between the border and the text.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`borderaxespad`: The pad between the axes and legend border, in font-size units.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These are just a few of the many optional args you can use to stylize your matplotlib
    legends. Check out the [documentation](https://matplotlib.org/stable/api/legend_api.html)
    to review all of them, as well as the possible values that you can provide.
  prefs: []
  type: TYPE_NORMAL
- en: For `legend labels` , we simply provide the name of each band. For `legend_colors`
    we refer to the dictionary we created, `color_palette` , and use the key values
    to define the color of each band. Next, `legend_markers` positions the markers
    in a straight vertical line, and define their size and shape.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we pull it all together with `plt.legend()` . This is what it looks
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Adding Finishing Touches
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To put a bow on our NetworkX graph, we can add a title by calling plt.title(),
    then stylizing the title with `fontsize`, `fontweight`, and `pad.`
  prefs: []
  type: TYPE_NORMAL
- en: By using the `off` parameter with plt.axis(), we can remove the border around
    the network graph, allowing for more even spacing and readability.
  prefs: []
  type: TYPE_NORMAL
- en: Calling `plt.tight_layout()` automatically adjusts the placement of graph elements,
    for even more improved spacing and readability.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we simply call `plt.show()` to display our visualization!
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the final product:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/de431df9f8965377424ef564b5086e8a.png)'
  prefs: []
  type: TYPE_IMG
- en: NetworkX graph created with Matplotlib “Musicians in Billy Corgan’s Network”
  prefs: []
  type: TYPE_NORMAL
- en: Interpreting NetworkX Graphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this tutorial, we used Billy Corgan’s network to demonstrate foundational
    concepts in social network analysis, by building on the network we built in Part
    1, Part 2, and Part 3\. This time, we made the network more complex by adding
    two additional bands, Tool, and A Perfect Circle. This allowed us to observe the
    effect of additional individuals (nodes) in the network, and how that impacts
    measures of centrality.
  prefs: []
  type: TYPE_NORMAL
- en: What we discovered is that James Iha is an important intermediary between the
    community of musicians associated with Billy Corgan (Smashing Pumpkins and Zwan)
    and Maynard James Keenan (Tool and A Perfect Circle). This result is interesting
    because it suggests that lead singers are not necessarily the most influential
    players in the larger network. If we consider how this technique can be used at
    scale with large networks, we can appreciate the utility of NetworkX graphs and
    how they can help us quickly identify important nodes in the network. Then, we
    can use metrics, like degree centrality, betweenness centrality, and closeness
    centrality to highlight the nuances in our findings. Finally, we imbue our interpretation
    with domain knowledge to reach an explainable result.
  prefs: []
  type: TYPE_NORMAL
- en: So, if you are a subject matter expert when it comes to alternative music, what
    do you think of these results? If you noticed any interesting changes in the network
    after the addition of Tool and A Perfect Circle, be sure to mention it in **Responses**
    💬!
  prefs: []
  type: TYPE_NORMAL
- en: '***If you would like the*** [***annotated notebook***](https://github.com/christine-egan42/sna-billy-corgan/blob/main/SNA4-Graphing-Billy-Corgans-Community.ipynb)
    ***for this tutorial, visit my*** [***GitHub***](https://github.com/christine-egan42)***!
    Give it a ⭐️ for easy reference.*** 👩🏻‍💻 [Christine Egan](https://christine-egan42.github.io/)
    | [medium](https://christineegan42.medium.com/) | [github](https://github.com/christine-egan42)
    | [linkedin](https://www.linkedin.com/in/christineegan42/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://christineegan42.medium.com/membership?source=post_page-----724de1e431ac--------------------------------)
    [## Join Medium with my referral link - Christine Egan'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: christineegan42.medium.com](https://christineegan42.medium.com/membership?source=post_page-----724de1e431ac--------------------------------)
  prefs: []
  type: TYPE_NORMAL
