["```py\nmkdir ds-ec2 && cd ds-ec2\n```", "```py\ncdk init --language=python\n```", "```py\nsource .venv/bin/activate\npip install -r requirements.txt\n```", "```py\n# Create a VPC to control the network our instance lives on.\nvpc = ec2.Vpc(self, \"ds-vpc\", cidr=\"10.0.0.0/16\")\n```", "```py\n# Create a session manager role so we can connect without SSH.\nrole = iam.Role(\n    self,\n    \"ds-ec2-role\",\n    assumed_by=iam.ServicePrincipal(\"ec2.amazonaws.com\"),\n    role_name=\"ds-ec2-role\",\n)\n\n# Provide access to SSM for secure communication with the instance.\nrole.add_managed_policy(\n    iam.ManagedPolicy.from_aws_managed_policy_name(\n        \"AmazonSSMManagedInstanceCore\",\n    )\n)\n```", "```py\n# Create a security group that only allows inbound traffic.\nsecurity_group = ec2.SecurityGroup(\n    self,\n    \"ds-security-group\",\n    vpc=vpc,\n    allow_all_outbound=True,\n    security_group_name=\"ds-security-group\",\n)\n```", "```py\n# Create initializatoin commands for non GPU instances\nmultipart_user_data = ec2.MultipartUserData()\n\npython_other_pkgs = []\nenv_activate_cmd = \"python3.8 -m \"\ninstall_python = ec2.UserData.for_linux()\n\n# Install python3.8 on the instance\ninstall_python.add_commands(\"sudo yum update & sudo amazon-linux-extras install -y python3.8 \")\n\n# Activate python3.8 and install the CPU version of torch.\ninstall_python.add_commands(\n    f\"{env_activate_cmd} pip install torch --extra-index-url https://download.pytorch.org/whl/cpu\"  # noqa: E501\n)\n\n# Add the commands to the multipart user data and execute them.\nmultipart_user_data.add_part(ec2.MultipartBody.from_user_data(install_python))\n```", "```py\nmatplotlib\nseaborn\nnumpy\ndatasets\npandas\nscikit-learn\nboto3\nnltk\ntransformers\nspacy\njupyter\njupyterlab\n```", "```py\n# Create a list of all requirements we want installed on our instance.\nwith open(\"requirements.txt\", \"r\") as f:\n    python_pkgs = [x.strip() for x in f.readlines()]\n\n# Install python dependencies.\npkgs_to_install = \" \".join(python_pkgs)\ninstall_dependencies = ec2.UserData.for_linux()\ninstall_dependencies.add_commands(f\"{env_activate_cmd} pip install {pkgs_to_install}\")\nmultipart_user_data.add_part(ec2.MultipartBody.from_user_data(install_dependencies))\n```", "```py\n# Increase the disk space on the device\nroot_volume = ec2.BlockDevice(device_name=\"/dev/xvda\", volume=ec2.BlockDeviceVolume.ebs(60))\n```", "```py\n# Create a generic machine image for use with CPU.\nimage = ec2.MachineImage.latest_amazon_linux(generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX_2)\n```", "```py\n# Create a Machine Image with the specified AMI.\nimage = ec2.MachineImage.generic_linux({region: os.getenv(\"AWS_AMI\")})\n```", "```py\nec2.Instance(\n            self,\n            \"ds-instance\",\n            role=role,\n            instance_type=ec2.InstanceType(instance_type),\n            machine_image=image,\n            vpc=vpc,\n            security_group=security_group,\n            user_data=multipart_user_data,\n            block_devices=[root_volume],\n        )\n```", "```py\n from aws_cdk import Stack, aws_ec2 as ec2\nfrom aws_cdk import aws_iam as iam\nfrom constructs import Construct\nimport os\nfrom ds_ec2.utils import (\n    get_instance_type,\n    get_machine_image,\n    is_gpu,\n)\n\ndef is_gpu(instance_type: str) -> bool:\n    \"\"\"Check to see if an instance type is gpu enabled.\"\"\"\n    return \"p\" in instance_type or \"g5\" in instance_type or \"g4\" in instance_type\n\nclass DsEc2Stack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:\n        \"\"\"\n        Create a single EC2 instance with the libraries need to do data science work.\n\n        This ec2 instance understands whether it has a gpu or not and installs the\n        correct libraries.  If not instance_type is provided defaults to c4.2xlarge.\n        \"\"\"\n        super().__init__(scope, construct_id, **kwargs)\n\n        # Get the current region to deploy to\n        region = os.getenv(\"CDK_DEFAULT_REGION\")\n\n        # Get the instance type from the environment. If none then defaults c2.4xlarge.\n        if \"INSTANCE_TYPE\" in os.environ:\n            instance_type = os.getenv(\"INSTANCE_TYPE\")\n        else:\n            instance_type = \"c4.2xlarge\"\n\n        # Create a VPC to control the network our instance lives on.\n        vpc = ec2.Vpc(self, \"ds-vpc\", cidr=\"10.0.0.0/16\")\n\n        # Create a session manager role so we can connect without SSH.\n        role = iam.Role(\n            self,\n            \"ds-ec2-role\",\n            assumed_by=iam.ServicePrincipal(\"ec2.amazonaws.com\"),\n            role_name=\"ds-ec2-role\",\n        )\n\n        # Provide access to SSM for secure communication with the instance.\n        role.add_managed_policy(\n            iam.ManagedPolicy.from_aws_managed_policy_name(\n                \"AmazonSSMManagedInstanceCore\",\n            )\n        )\n\n        # Create a security group that only allows inbound traffic.\n        security_group = ec2.SecurityGroup(\n            self,\n            \"ds-security-group\",\n            vpc=vpc,\n            allow_all_outbound=True,\n            security_group_name=\"ds-security-group\",\n        )\n\n        # Create initializatoin commands for non GPU instances\n        multipart_user_data = ec2.MultipartUserData()\n\n        # Create a list of all requirements we want installed on our instance.\n        with open(\"requirements.txt\", \"r\") as f:\n            python_pkgs = [x.strip() for x in f.readlines()]\n\n        # Check if the instance is a GPU if it isn't we want to install python\n        # and install the cpu version of pytorch.  Otherwise we want to activate\n        # the GPU enabled version of pytorch in the AMI.\n        if not is_gpu(instance_type):\n            python_other_pkgs = []\n            env_activate_cmd = \"python3.8 -m \"\n            install_python = ec2.UserData.for_linux()\n            install_python.add_commands(\"sudo yum update & sudo amazon-linux-extras install -y python3.8 \")\n            install_python.add_commands(\n                f\"{env_activate_cmd} pip install torch --extra-index-url https://download.pytorch.org/whl/cpu\"  # noqa: E501\n            )\n\n            # Install python.\n            multipart_user_data.add_part(ec2.MultipartBody.from_user_data(install_python))\n\n            # Increase the disk space on the device.\n            root_volume = ec2.BlockDevice(device_name=\"/dev/xvda\", volume=ec2.BlockDeviceVolume.ebs(25))\n\n            # Create a generic machine image for use with CPU.\n            image = ec2.MachineImage.latest_amazon_linux(generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX_2)\n\n        else:\n            python_other_pkgs = []\n\n            # The deep learning AMI's have python installed we need to activate it.\n            env_activate_cmd = \"source activate pytorch; \"\n\n            # Increase the disk space on the device\n            root_volume = ec2.BlockDevice(device_name=\"/dev/xvda\", volume=ec2.BlockDeviceVolume.ebs(60))\n\n            # Create a Machine Image with the specified AMI.\n            image = ec2.MachineImage.generic_linux({region: os.getenv(\"AWS_AMI\")})\n\n        # Install python dependencies.\n        pkgs_to_install = \" \".join(python_pkgs + python_other_pkgs)\n        install_dependencies = ec2.UserData.for_linux()\n        install_dependencies.add_commands(f\"{env_activate_cmd} pip install {pkgs_to_install}\")\n        multipart_user_data.add_part(ec2.MultipartBody.from_user_data(install_dependencies))\n\n        # Create an EC2 instance ami-01dafd60663418a6f 1.12.0\n        image = get_machine_image(instance_type, region)\n        ec2.Instance(\n            self,\n            \"ds-instance\",\n            role=role,\n            instance_type=ec2.InstanceType(instance_type),\n            machine_image=image,\n            vpc=vpc,\n            security_group=security_group,\n            user_data=multipart_user_data,\n            block_devices=[root_volume],\n        )\n```", "```py\n export INSTANCE_TYPE=\"instance-type\"; export AWS_AMI=\"aws_ami_id\"; cdk deploy\n```", "```py\n# SSH over Session Manager\nhost i-* mi-*\n    ProxyCommand sh -c \"aws ssm start-session --target %h --document-name AWS-StartSSHSession --parameters 'portNumber=%p'\"\n```", "```py\naws ssm start-session --target instance_id --region=our_region\n```", "```py\naws ec2 describe-instances --region=your-region  --query \"Reservations[].Instances[?State.Name == 'running'].InstanceId[]\" --output text\n```", "```py\nscreen -S jupyter\n```", "```py\ncd /home/ssm-user\n```", "```py\njupyter-lab --no-browser --ip=0.0.0.0 --port=8123\n```", "```py\naws ssm start-session --target instance_id --region out_region --document-name AWS-StartPortForwardingSession --parameters '{\"portNumber\":[\"8123\"],\"localPortNumber\":[\"8123\"]}'\n```"]