- en: How to Do Data Validation on Your Data on Pandas with pytest
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用pytest对Pandas中的数据进行数据验证
- en: 原文：[https://towardsdatascience.com/how-to-do-data-validation-on-your-data-on-pandas-with-pytest-d5dda51ad0e4](https://towardsdatascience.com/how-to-do-data-validation-on-your-data-on-pandas-with-pytest-d5dda51ad0e4)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-do-data-validation-on-your-data-on-pandas-with-pytest-d5dda51ad0e4](https://towardsdatascience.com/how-to-do-data-validation-on-your-data-on-pandas-with-pytest-d5dda51ad0e4)
- en: DATA
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据
- en: Implementing basic data validation on your processed DataFrames with Python
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在处理的DataFrame上实施基本的数据验证
- en: '[](https://byrondolon.medium.com/?source=post_page-----d5dda51ad0e4--------------------------------)[![Byron
    Dolon](../Images/9ff32138c7b1913be24cc7ab971752b0.png)](https://byrondolon.medium.com/?source=post_page-----d5dda51ad0e4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d5dda51ad0e4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d5dda51ad0e4--------------------------------)
    [Byron Dolon](https://byrondolon.medium.com/?source=post_page-----d5dda51ad0e4--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://byrondolon.medium.com/?source=post_page-----d5dda51ad0e4--------------------------------)[![Byron
    Dolon](../Images/9ff32138c7b1913be24cc7ab971752b0.png)](https://byrondolon.medium.com/?source=post_page-----d5dda51ad0e4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d5dda51ad0e4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d5dda51ad0e4--------------------------------)
    [Byron Dolon](https://byrondolon.medium.com/?source=post_page-----d5dda51ad0e4--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d5dda51ad0e4--------------------------------)
    ·10 min read·May 26, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表在[Towards Data Science](https://towardsdatascience.com/?source=post_page-----d5dda51ad0e4--------------------------------)
    ·10分钟阅读·2023年5月26日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/e0ef97c2f7836a1f5e61f73ce2556434.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e0ef97c2f7836a1f5e61f73ce2556434.png)'
- en: Image used with permission by my talented sister [ohmintyartz](https://www.instagram.com/ohmintyartz/)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我才华横溢的妹妹[ohmintyartz](https://www.instagram.com/ohmintyartz/)授权使用
- en: 'Working with data at scale for machine learning is exciting, but there’s an
    important step you shouldn’t forget before you even begin thinking about training
    a model: **data validation**.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在大规模机器学习中处理数据是令人兴奋的，但在开始训练模型之前，有一步你不应忘记：**数据验证**。
- en: Data validation refers to verifying if the data you collect and transform is
    correct and usable. It would help if you always made sure that the data you end
    up using in a machine learning model or data analysis is ending up as you expect.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 数据验证是指验证你收集和转换的数据是否正确且可用。你应始终确保你在机器学习模型或数据分析中使用的数据符合你的期望。
- en: This process can involve starting by checking to see if your raw data fits your
    expectations (like how the source you’re collecting from defines the output) to
    checking that your data processing functions are working as expected.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程可能涉及从检查原始数据是否符合你的期望（例如，你收集的来源如何定义输出）开始，到检查你的数据处理函数是否按预期工作。
- en: We can take a look at how you can implement basic testing and data validation
    in Python using **pytest** on a data processing pipeline with Pandas. We’ll start
    by taking a look at an initial set of data processing functions and then how we
    can implement some tests to ensure that our processing functions and data are
    behaving as expected.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看看如何在数据处理管道中使用**pytest**在Pandas上实现基本的测试和数据验证。我们将从查看一组初始的数据处理函数开始，然后看看如何实现一些测试，以确保我们的处理函数和数据按预期行为。
- en: You can follow along in a notebook or IDE of your own. You can download the
    dataset from Kaggle [here](https://www.kaggle.com/datasets/deepanshuverma0154/sales-dataset-of-ecommerce-electronic-products?resource=download),
    available free for use under the CC0 1.0 Universal (CC0 1.0) Public Domain Dedication
    license.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在自己的笔记本或IDE中跟随操作。你可以从Kaggle[这里](https://www.kaggle.com/datasets/deepanshuverma0154/sales-dataset-of-ecommerce-electronic-products?resource=download)下载数据集，使用CC0
    1.0通用（CC0 1.0）公共领域献身许可证免费提供。
- en: Intro — An initial data processing and simple data validation with Pytest
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 — 使用Pytest进行初步数据处理和简单数据验证
- en: The code we’ll be working with in this piece is this set of Python functions
    that use Pandas to read in and process data. It includes a function to read the
    raw data in chunks, then a few functions that perform some transformations on
    the raw data.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本文中使用的代码是一组使用Pandas读取和处理数据的Python函数。它包括一个函数来分块读取原始数据，然后是几个对原始数据进行转换的函数。
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we can get started with implementing our first data validation test.
    If you’re going to follow along in a notebook or IDE, you should import the following
    in a new file (or in another cell in your notebook):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以开始实现我们的第一个数据验证测试。如果你打算在笔记本或 IDE 中跟随，应该在新文件（或笔记本中的另一个单元格）中导入以下内容：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can read more on how to actually run pytest (naming conventions for files
    and how tests are discovered [here](https://docs.pytest.org/en/7.1.x/explanation/goodpractices.html#test-discovery),
    but for our case, all you need to do is create a new file called `test_data_processing.py`
    and in your IDE as you add to the file you just can run `pytest` and optionally
    with “- -verbose”.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以阅读更多关于如何实际运行 pytest（文件命名约定和如何发现测试[这里](https://docs.pytest.org/en/7.1.x/explanation/goodpractices.html#test-discovery)），但在我们的案例中，你只需创建一个名为`test_data_processing.py`的新文件，并在你的
    IDE 中添加到文件后，你可以运行`pytest`，可选地加上“--verbose”。
- en: Quick Introduction to pytest and Simple Data Validation Check
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pytest 简介和简单的数据验证检查
- en: Pytest is a testing framework in Python that makes it easy for you to write
    tests for your data pipelines. You can primarily make use of the assert statement,
    which essentially checks if a condition you place after `assert` evaluates to
    True or False. If it evaluates to False, it will raise an exception `AssertionError`
    (and when used with pytest will cause the test to fail).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Pytest 是一个 Python 中的测试框架，它使你能够轻松地为你的数据管道编写测试。你可以主要使用 assert 语句，它本质上检查在`assert`后面放置的条件是否为
    True 或 False。如果条件为 False，它将引发异常`AssertionError`（并且在与 pytest 一起使用时会导致测试失败）。
- en: So first, let’s test something simple. All we’re going to do is check if the
    output of one of our functions (the first one to read the raw data) returns a
    DataFrame.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所以首先，让我们测试一些简单的东西。我们要做的只是检查我们其中一个函数（第一个读取原始数据的函数）的输出是否返回一个 DataFrame。
- en: As a quick aside, you’ll notice in the original function we write the arrow
    `->` syntax to add type hints to the function where we say that the function should
    return a DataFrame. This means that if you write in your function to return something
    other than a DataFrame, your IDE will flag it as returning an invalid output (but
    this won’t technically break your code or prevent it from running).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一下，你会注意到在原始函数中，我们写了箭头`->`语法来为函数添加类型提示，我们说函数应该返回一个 DataFrame。这意味着如果你在函数中写了返回其他类型的内容，你的
    IDE 会标记为返回无效输出（但这不会从技术上破坏你的代码或阻止它运行）。
- en: To actually check if the function returns a DataFrame, we’ll implement a function
    to test the `read_raw_data` function and just call it `test_read_raw_data`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实际检查函数是否返回一个 DataFrame，我们将实现一个函数来测试`read_raw_data`函数，并将其命名为`test_read_raw_data`。
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this function, we add a one-line docstring to explain that our test function
    is just checking if the output is a DataFrame. Then, we assign the output of the
    existing `read_raw_data` function to a variable and use `isinstance` to return
    True or False if the specified object is of the type you put in. In this case,
    we check if the `test_df` is a `DataFrame`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们添加了一行文档字符串来解释我们的测试函数只是检查输出是否为一个 DataFrame。然后，我们将现有的`read_raw_data`函数的输出分配给一个变量，并使用`isinstance`来返回
    True 或 False，如果指定的对象是你放入的类型。在这种情况下，我们检查`test_df`是否是一个`DataFrame`。
- en: 'We can similarly do this for the rest of our functions that just take a DataFrame
    as input and are expected to return a DataFrame as output. Implementing it can
    look like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以类似地对剩余的函数进行处理，这些函数仅接受 DataFrame 作为输入，并且预期返回一个 DataFrame 作为输出。实现可能如下所示：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that you can also use the `assert` statement in a for loop, so we just
    go through each of the functions, passing in a DataFrame as input and checking
    to see if the output is also a DataFrame.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你还可以在 for 循环中使用`assert`语句，因此我们只需遍历每个函数，传入一个 DataFrame 作为输入，并检查输出是否也是 DataFrame。
- en: Implementing fixtures in pytest for more efficient testing
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 pytest 中实现 fixture 以提高测试效率
- en: 'You can see above that we had to write the exact same line twice in our two
    different test functions:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，上面我们不得不在两个不同的测试函数中写完全相同的行：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is because for both test functions, we needed a DataFrame as input for
    our test to check if the output of our data processing functions resulted in a
    DataFrame. So you can avoid copying the same code in all your test functions,
    you can use fixtures, which let you write some code that **pytest will let you
    reuse in your different tests.** Doing so looks like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为对于两个测试函数，我们都需要一个DataFrame作为输入来检查我们的数据处理函数的输出是否结果为一个DataFrame。因此，为了避免在所有测试函数中复制相同的代码，你可以使用fixtures，这让你编写一些**pytest允许你在不同测试中重用的代码。**
    这样做的方式如下：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We define the `test_df` in a function this time that returns the raw DataFrame.
    Then, in our test functions, we just include `test_df` as a parameter and we can
    use it just as we did before.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这次在函数中定义`test_df`，该函数返回原始DataFrame。然后，在我们的测试函数中，我们只需将`test_df`作为参数包含在内，就可以像之前一样使用它。
- en: Testing if a function transforms a DataFrame
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试一个函数是否转换了DataFrame
- en: 'Next, let’s get into checking our `split_purchase_address` function, which
    essentially outputs the same DataFrame passed as input but with additional address
    columns. Our test function will look like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将检查我们的`split_purchase_address`函数，该函数实际上输出的是与输入相同的DataFrame，但增加了额外的地址列。我们的测试函数将如下所示：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, we’ll check two main things:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将检查两个主要方面：
- en: Does the output DataFrame have more columns than the original DataFrame?
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出的DataFrame是否比原始DataFrame有更多列？
- en: Does the output DataFrame have a different index than the original DataFrame?
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出的DataFrame是否具有与原始DataFrame不同的索引？
- en: First, we run the `split_purchase_address` function, passing the `test_df` as
    input and assigning the result to a new variable. This gives us the output of
    the original function that we can then test.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们运行`split_purchase_address`函数，将`test_df`作为输入传递，并将结果分配给一个新变量。这会给我们原始函数的输出，然后我们可以对其进行测试。
- en: To actually do the test, we could check if a specific column exists in the output
    DataFrame, but a simpler (not necessarily better) way of doing it is just checking
    if the output DataFrame has more columns than the original with the `assert` statement.
    Similarly, we can `assert` if the length of the index for each of the DataFrames
    is the same.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要实际进行测试，我们可以检查输出的DataFrame中是否存在特定列，但一种更简单（不一定更好）的方法是仅使用`assert`语句检查输出DataFrame是否比原始DataFrame有更多列。类似地，我们可以使用`assert`语句检查每个DataFrame的索引长度是否相同。
- en: You can also check the [Pandas testing documentation](https://pandas.pydata.org/docs/reference/testing.html)
    for some built-in testing functions, but there are only a few functions that essentially
    just check if two of a DataFrame, index, or Series are equal. We use the `assert_index_equal`
    function to do the same thing that we do with the `index.__len__()`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以查看[Pandas 测试文档](https://pandas.pydata.org/docs/reference/testing.html)以了解一些内置的测试函数，但实际上只有少数几个函数用于检查DataFrame、索引或Series的两个对象是否相等。我们使用`assert_index_equal`函数来完成与`index.__len__()`相同的操作。
- en: Testing if a DataFrame has a specific column in the output
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试DataFrame在输出中是否具有特定列
- en: 'As mentioned before, we can also check if a DataFrame contains a specific column.
    We’ll move on to the next function `extract_product_pack_information` which should
    always output the original DataFrame with an additional column called “Pack Information”.
    Our test function will look like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们还可以检查DataFrame是否包含特定列。接下来我们将讨论`extract_product_pack_information`函数，该函数应始终输出带有额外名为“Pack
    Information”列的原始DataFrame。我们的测试函数将如下所示：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, all we do is call `columns` again on the output of the original function,
    but this time check specifically if the “Pack Information” column is in the list
    of columns. If for some reason we edited our original `extract_product_pack_information`
    function to return additional columns or renamed the output column, this test
    would fail. This would be a good reminder to check if what whatever we used the
    final data for (like a machine learning model) also took that into account.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们所做的就是在原始函数的输出上再次调用`columns`，但这次特别检查“Pack Information”列是否在列列表中。如果由于某种原因我们修改了原始的`extract_product_pack_information`函数以返回额外的列或重命名了输出列，则此测试将失败。这将是一个很好的提醒，检查我们最终用于什么（如机器学习模型）是否也考虑了这一点。
- en: 'We could then make do two things:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以做两件事：
- en: Make changes downstream in our code pipeline (like code that refers to the “Pack
    Information” column);
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的代码管道下游进行更改（例如引用“Pack Information”列的代码）；
- en: Edit our tests to reflect the changes in our processing function.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑我们的测试以反映处理函数中的更改。
- en: Testing to see if a DataFrame’s columns are the correct data types
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 DataFrame 的列是否具有正确的数据类型
- en: Another thing we should be doing is checking to see if the DataFrame returned
    by our functions has columns of our desired data types. For example, if we’re
    doing calculations on numerical columns, we should see if the columns are returned
    as an `int` or `float`, depending on what we need.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应检查由函数返回的 DataFrame 是否具有我们所需的数据类型。例如，如果我们在数值列上进行计算，我们应检查这些列是以 `int` 还是 `float`
    类型返回，这取决于我们的需要。
- en: Let’s test data types on our `one_hot_encode_product_column` function, where
    we do a common step in feature engineering on one of the categorical columns in
    the original DataFrame. We expect all the columns to be of the `uint8` DataType
    (what the `get_dummies` function in Pandas returns by default), so we can test
    that like this.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试一下 `one_hot_encode_product_column` 函数的数据类型，其中我们在原始 DataFrame 的一个分类列上进行常见的特征工程步骤。我们期望所有列的数据类型都是
    `uint8`（`get_dummies` 函数在 Pandas 中默认返回的数据类型），所以我们可以这样进行测试。
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The output of the `get_dummies` function also returns columns that have an underscore
    (this, of course, could be done better by checking the actual column names- like
    in the previous test function we check for specific columns).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_dummies` 函数的输出还会返回带有下划线的列（当然，这可以通过检查实际列名来更好地完成——就像在之前的测试函数中我们检查特定列一样）。'
- en: Here, all we’re doing is in a for loop of target columns checking if all of
    them are of the `np.dtype("uint8")` data type. I checked this previously by just
    in a notebook checking the data type of one of the output columns like `column.dtype`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们所做的只是通过循环检查所有目标列是否都是 `np.dtype("uint8")` 数据类型。我之前在笔记本中通过检查其中一列的 `column.dtype`
    来完成了这项检查。
- en: Final additional data validation on the final output
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对最终输出进行额外的数据验证
- en: Another good practice in addition to testing the individual functions you have
    that make up your data processing and transformation pipelines is testing the
    final output of your pipeline.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 除了测试你拥有的构成数据处理和转换管道的单个函数外，另一个好习惯是测试管道的最终输出。
- en: To do so, we’ll simulate running our entire pipeline in the test, and then check
    the resulting DataFrame.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将在测试中模拟运行整个管道，然后检查结果 DataFrame。
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Our final `test_process_raw_data` will check for two final things:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最终 `test_process_raw_data` 将检查两个最终点：
- en: '**Checking if the original columns are still present in the final DataFrame
    —** this isn’t always a requirement, but it might be that you want all the raw
    data to still be available (and not transformed) in your output. Doing so is simple-
    we just need to check if the column in the `test_df` is still present in the `processed_df`.
    Finally, we can this time raise an `AssertionError` (similarly to just using an
    `assert` statement) if the column is not present. This is a nice example of how
    you can output a specific message in your tests when needed.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**检查最终 DataFrame 是否仍然包含原始列——**这并不总是一个要求，但可能你希望所有原始数据仍然可用（而不是转换）在输出中。做到这一点很简单——我们只需要检查
    `test_df` 中的列是否仍然存在于 `processed_df` 中。最后，如果列不存在，我们可以这次引发 `AssertionError`（类似于使用
    `assert` 语句）。这是一个很好的示例，展示了如何在需要时在测试中输出特定的消息。'
- en: '**Checking if the final DataFrame doesn’t have any duplicates** — there are
    a lot of different ways you can do this- in this case, we’re just using the “Order
    ID” (which we expect to be like an index) and the `assert_series_equal` to see
    if the output DataFrame didn’t generate any duplicate rows.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**检查最终 DataFrame 是否没有重复项**——有很多不同的方法可以做到这一点——在这种情况下，我们只使用“订单 ID”（我们期望它像索引一样）和
    `assert_series_equal` 来检查输出 DataFrame 是否没有生成重复行。'
- en: Checking the pytest output
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查 pytest 输出
- en: 'For a quick look at what running pytest looks like, in your IDE just run:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要快速查看运行 pytest 的情况，只需在 IDE 中运行：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Pytest will check the new test file with all the test functions and run them!
    This is a simple implementation of having a series of data validation and testing
    checks on your data processing pipeline. If you run the above, the output should
    look something like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Pytest 将检查包含所有测试函数的新测试文件并运行它们！这是对数据处理管道进行一系列数据验证和测试检查的简单实现。如果你运行上述代码，输出应该类似于：
- en: '![](../Images/dc15c89fd7a8569aad10610a272e65fe.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dc15c89fd7a8569aad10610a272e65fe.png)'
- en: The output of pytest 1 — image by Author
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: pytest 输出 1 —— 作者提供的图片
- en: '![](../Images/9683f3c7842a24fec75c9ff210e4bf82.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9683f3c7842a24fec75c9ff210e4bf82.png)'
- en: The output of pytest 2— image by Author
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: pytest 输出 2 —— 作者提供的图片
- en: '![](../Images/4329338c6ab7af6d989a113c829a207c.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4329338c6ab7af6d989a113c829a207c.png)'
- en: The output of pytest 3— image by Author
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: pytest 3的输出— 作者图片
- en: You can see that our final test failed, specifically the part of the test where
    we check if all of the columns from the initial DataFrame are present in the final.
    Also that our custom error message in the `AssertionError` we defined earlier
    is populating correctly—that the “Product” column from our original DataFrame
    is not showing up in the final DataFrame (see if you can find why based on our
    initial data processing functions).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到我们最终的测试失败了，特别是在测试中我们检查初始DataFrame的所有列是否存在于最终DataFrame中。此外，我们之前定义的`AssertionError`中的自定义错误消息是否正确显示——我们原始DataFrame中的“Product”列没有出现在最终的DataFrame中（请查看我们的初始数据处理函数，看看能否找到原因）。
- en: There’s a lot more room to improve on this testing—we just have a really simple
    implementation with basic testing and data validation cases. For more complex
    pipelines, you may want to have a lot more testing both for your individual data
    processing functions, as well as on your raw and final output DataFrames to ensure
    that the data you end up using is data you can trust.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试还有很大的改进空间——我们现在只有一个非常简单的实现，包含基本的测试和数据验证案例。对于更复杂的管道，你可能需要更多的测试，不仅是对单个数据处理函数的测试，还包括对原始和最终输出DataFrame的测试，以确保你使用的数据是可以信赖的。
- en: Thanks for taking the time to read this piece! If you enjoy my content I’d love
    it if you sign up for Medium using my referral link below. This’ll let me get
    a portion of your monthly subscription AND you’ll get access to some exclusive
    features only for Medium members. And if you’re already following me, thanks a
    bunch for your support!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你花时间阅读这篇文章！如果你喜欢我的内容，我希望你能通过下面的推荐链接注册Medium。这样我可以获得你每月订阅的一部分，同时你也能访问Medium会员专属的某些功能。如果你已经在关注我，非常感谢你的支持！
- en: '[](https://byrondolon.medium.com/membership?source=post_page-----d5dda51ad0e4--------------------------------)
    [## Join Medium with my referral link — Byron Dolon'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://byrondolon.medium.com/membership?source=post_page-----d5dda51ad0e4--------------------------------)
    [## 使用我的推荐链接加入Medium — Byron Dolon'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为Medium会员，你的一部分会费将用于支持你阅读的作者，同时你将获得对每篇故事的完全访问权限……
- en: byrondolon.medium.com](https://byrondolon.medium.com/membership?source=post_page-----d5dda51ad0e4--------------------------------)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: byrondolon.medium.com](https://byrondolon.medium.com/membership?source=post_page-----d5dda51ad0e4--------------------------------)
- en: M**ore by me:** *-* [*5 Practical Tips for Aspiring Data Analysts*](https://byrondolon.medium.com/5-practical-tips-for-aspiring-data-analysts-9917006d4dae?sk=019edbddaca4d313665caafe4b747d26)
    *-* [*Mastering Ecommerce Data Analysis*](https://python.plainenglish.io/mastering-analysis-for-e-commerce-with-pandas-e4219a87b10c?sk=9aa8fd1024b89e89e4b0904c8d00d242)
    *-* [*Check for a Substring in a Pandas DataFrame*](/check-for-a-substring-in-a-pandas-dataframe-column-4b949f64852?sk=bfb5bbab11ae45c47bfb316d931c3b56)
    *-* [*7 Best Repositories on Github to Learn Python*](https://medium.com/towards-data-science/top-7-repositories-on-github-to-learn-python-44a3a7accb44)
    *-* [*5 (and a half) Lines of Code for Understanding Your Data with Pandas*](/5-and-a-half-lines-of-code-for-understanding-your-data-with-pandas-aedd3bec4c89?sk=7007a1ae248cf7ea4ef5fcd4af7ae72b)
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: M**ore by me:** *-* [*5个实用技巧，助你成为数据分析师*](https://byrondolon.medium.com/5-practical-tips-for-aspiring-data-analysts-9917006d4dae?sk=019edbddaca4d313665caafe4b747d26)
    *-* [*掌握电商数据分析*](https://python.plainenglish.io/mastering-analysis-for-e-commerce-with-pandas-e4219a87b10c?sk=9aa8fd1024b89e89e4b0904c8d00d242)
    *-* [*在Pandas DataFrame中检查子字符串*](/check-for-a-substring-in-a-pandas-dataframe-column-4b949f64852?sk=bfb5bbab11ae45c47bfb316d931c3b56)
    *-* [*学习Python的7个最佳Github资源库*](https://medium.com/towards-data-science/top-7-repositories-on-github-to-learn-python-44a3a7accb44)
    *-* [*用Pandas理解数据的5（又半）行代码*](/5-and-a-half-lines-of-code-for-understanding-your-data-with-pandas-aedd3bec4c89?sk=7007a1ae248cf7ea4ef5fcd4af7ae72b)
