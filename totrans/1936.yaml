- en: Structuring Your Machine Learning Project with MLOps in Mind
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/structuring-your-machine-learning-project-with-mlops-in-mind-41a8d65987c9](https://towardsdatascience.com/structuring-your-machine-learning-project-with-mlops-in-mind-41a8d65987c9)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'MLOps in Action: Project Structuring'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@chimso1994?source=post_page-----41a8d65987c9--------------------------------)[![Chayma
    Zatout](../Images/341c45f53ddf73dc0851d547cc7cb55a.png)](https://medium.com/@chimso1994?source=post_page-----41a8d65987c9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----41a8d65987c9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----41a8d65987c9--------------------------------)
    [Chayma Zatout](https://medium.com/@chimso1994?source=post_page-----41a8d65987c9--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----41a8d65987c9--------------------------------)
    ·14 min read·Mar 16, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ff4a6fc8ea3f407bf08adfa0cf7d1d88.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Priscilla Du Preez](https://unsplash.com/@priscilladupreez?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: If you’re looking to take your machine learning projects to the next level,
    MLOps is an essential part of the process. In this article, we’ll provide you
    with a practical tutorial on how to structure your projects for MLOps, using the
    classic handwritten digit classification problem as an example. We’ll take you
    step-by-step through the process of creating a basic project template that you
    can use to organize your own projects. By the end of this tutorial, you’ll have
    a solid understanding of MLOps principles and how to apply them to your own projects.
    However, if you’re new to MLOps, we recommend starting with my [beginner-friendly
    tutorial](https://medium.com/towards-data-science/a-beginner-friendly-introduction-to-mlops-95282f25325c)
    to get up to speed. So let’s dive in and take your ML projects to the next level!
  prefs: []
  type: TYPE_NORMAL
- en: '**Table of contents:**'
  prefs: []
  type: TYPE_NORMAL
- en: · [1\. Introduction](#c6d8)
  prefs: []
  type: TYPE_NORMAL
- en: · [2\. MLOps](#6150)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [2.1\. Business problem](#2b4f)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [2.2\. Data engineering](#aadf)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [2.3\. Machine learning model engineering](#8845)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [2.4\. Code engineering](#8a22)
  prefs: []
  type: TYPE_NORMAL
- en: · [3\. Project structure](#5c87)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [3.1\. Cookiecutter Data Science](#477b)
  prefs: []
  type: TYPE_NORMAL
- en: · [4\. MLOps project structure](#ca36)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [4.1\. Starting a new MLOps project](#db66)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [4.2\. Using MLOps project template for handwritten digits classification](#4e0e)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [4.3\. How to run your project?](#85d1)
  prefs: []
  type: TYPE_NORMAL
- en: · [5\. Conclusion](#822e)
  prefs: []
  type: TYPE_NORMAL
- en: '**My MLOps tutorials:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Tutorial 1: A Key Start to MLOps: Exploring Its Essential Components*](/a-key-start-to-mlops-exploring-its-essential-components-27646238372d)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Tutorial 2: A Beginner-Friendly Introduction to MLOps Workflow*](/a-beginner-friendly-introduction-to-mlops-95282f25325c)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Tutorial 3: Introduction to MLOps Principles*](https://medium.com/towards-data-science/introduction-to-mlops-principles-c5d73a00aa76)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Tutorial 4: Structuring Your Machine Learning Project with MLOps in Mind*](https://medium.com/towards-data-science/structuring-your-machine-learning-project-with-mlops-in-mind-41a8d65987c9)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Tutorial 5: Version Controlling in Practice: Data, ML Model, and Code*](https://medium.com/towards-data-science/version-controlling-in-practice-data-ml-model-and-code-e13c518067dc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Tutorial 6: Testing in Practice: Code, Data and ML Model*](/testing-in-practice-code-data-and-ml-model-cfb1ada81f6c)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tutorial 7: Tracking in Practice: Code, Data and ML Model](/tracking-in-practice-code-data-and-ml-model-6787a881609c)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*[I will be updating this list as I publish articles on the subject]*'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous tutorial, we defined MLOps as a way to design, build, and deploy
    machine learning models in an efficient, optimized, and organized manner. This
    is achieved by combining a set of techniques, practices, and tools that are often
    discussed within the context of the MLOps lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: In the MLOps lifecycle, the first step after understanding the problem is to
    structure your project. This is typically done by using a template, whether it’s
    a company template, a public template, or your own template, as we will see later
    in this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this tutorial, we will use handwritten digit classification as an example.
    [In a previous tutorial](/a-brief-introduction-to-neural-networks-a-classification-problem-43e68c770081),
    I created a Github repository for MNIST classification, and the project structure
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The project folder includes the ‘dataset_scripts’ folder, which contains scripts
    for manipulating the dataset in its original IDX format (you can check my previous
    tutorial, “[How to Effortlessly Explore Your IDX Dataset](https://medium.com/mlearning-ai/how-to-effortlessly-explore-your-idx-dataset-97753246031f)”
    for more information), Python scripts to train three different types of models,
    a .gitignore file, and a README file. The project structure is simple as it’s
    designed for tutorial purposes. In this tutorial, I will introduce my project
    structure for MLOps projects. Note that if you want programming details about
    the models and training, you can always refer to my tutorial, “[A Brief Introduction
    to Neural Networks: A Classification Problem.](https://medium.com/towards-data-science/a-brief-introduction-to-neural-networks-a-classification-problem-43e68c770081#ebb1)”'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. MLOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The different steps in the machine learning process are outlined in the MLOps
    workflow, which includes the business problem, data engineering, machine learning
    model engineering, and code engineering. In this section, we will explore how
    to implement each step. However, some steps will not be discussed in-depth since
    the problem we are addressing (handwritten digit classification) does not require
    them. We will focus on steps that are highlighted in green (see the Figure below).
    The remaining steps will be covered in future tutorials. If you want to learn
    more about the MLOps workflow, you can check out my [beginner-friendly tutorial](https://medium.com/towards-data-science/a-beginner-friendly-introduction-to-mlops-95282f25325c#73c3).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e9de58aa621ff53f49d0e56eea54f2c6.png)'
  prefs: []
  type: TYPE_IMG
- en: MLOps workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1\. Business problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The problem addressed in this tutorial is the classification of handwritten
    digits, which is a multi-class classification task. Specifically, given an input
    image of a handwritten digit ranging from 0 to 9, the model is required to identify
    the digit and output its corresponding label.
  prefs: []
  type: TYPE_NORMAL
- en: 'The AI canvas comprises the following components: task description, prediction
    (model output), judgement, action, outcome, training, input, feedback, and model
    impact on the problem. For the current problem of handwritten digits classification,
    our AI canvas would be structured and filled as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/14c63515ad60c27020cf7d5044ed3ac0.png)'
  prefs: []
  type: TYPE_IMG
- en: AI canvas for handwritten digits classification.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2\. Data engineering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/eb0feafdbeff33bad8939fa6979fdf71.png)'
  prefs: []
  type: TYPE_IMG
- en: Data engineering
  prefs: []
  type: TYPE_NORMAL
- en: 'Data engineering encompasses various tasks, such as data ingestion, exploration
    and validation, cleaning, labeling, and splitting. In this project, we performed
    the following data engineering tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data ingestion**: We downloaded the MNIST dataset in its original format
    from its [official website](http://yann.lecun.com/exdb/mnist/) and converted it
    to a CSV file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data exploration and validation:** We visualized some images from the dataset
    and displayed some insights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data cleaning:** The dataset was already clean and did not require any further
    cleaning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data labeling:** The dataset was already labeled, so no additional labeling
    was necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data splitting:** The dataset was already split into training and test sets.
    We will extract the validation set from the training set later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s worth noting that this project involves a relatively simple data engineering
    process, as the dataset was already prepared and processed. However, we will explore
    more complex examples in future articles.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3\. Machine learning model engineering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/1061df7ede18794545ff5f8f83bf832d.png)'
  prefs: []
  type: TYPE_IMG
- en: Machine Learning model engineering
  prefs: []
  type: TYPE_NORMAL
- en: 'Machine learning model engineering is the third step in MLOps workflow. It
    involves various tasks, such as model training, evaluation, testing, and packaging.
    In this project, we performed the following ML model engineering tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model training**: For feature engineering, we used data scaling (to scale
    the pixels to the range of [0,1]), data reshaping (to represent the image as a
    1D vector or 2D matrix), and data encoding (one-hot encoding). For model engineering,
    we implemented two different types of models and applied hyperparameter tuning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model evaluation**: In addition to accuracy, we used other evaluation metrics
    such as recall, precision, and F1 score to ensure that the model meets the business
    objectives (outcomes) described in the AI canvas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model testing**: After evaluating the model, we tested it on two different
    types of data: the first type is the test set of the MNIST dataset, and the second
    type is some handwritten digit images generated from the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model packaging and versioning** will be discussed in the next tutorial,
    where we will cover the machine learning pipeline in more detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want more programming details, you can always check out [my previous
    tutorial](https://medium.com/towards-data-science/a-brief-introduction-to-neural-networks-a-classification-problem-43e68c770081#ebb1).
  prefs: []
  type: TYPE_NORMAL
- en: 2.4\. Code engineering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/5fef6bbf3624758abe9cce4d1bed8474.png)'
  prefs: []
  type: TYPE_IMG
- en: Code engineering
  prefs: []
  type: TYPE_NORMAL
- en: In the code engineering step, the selected model is deployed to the application
    and its performance needs to be monitored and logged. Before deploying the model,
    the serving pattern and deployment strategy need to be thoughtfully selected.
    After deployment, its behavior needs to be managed and maintained to ensure it
    is functioning properly. Although this part is not elaborated in this tutorial,
    I plan to dedicate an entire article to it in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Project structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have highlighted the different MLOps steps that we applied in the
    handwritten digits classification, let’s move on to structuring the project to
    meet the project need while keeping these steps in mind. To do this, I will first
    present a well-known project structures, then I will present my project structure
    template for MLOps. This template will be updated later as we add more components.
  prefs: []
  type: TYPE_NORMAL
- en: 'But why is it important to properly structure your machine learning projects?
    Well, there are several benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Good transparency:** An organized project is easier to understand, not only
    for you but also for others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simple maintenance:** A well-structured project is easier to maintain and
    update, saving you time and effort.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Improved efficiency:** A clear plan reduces time wasted and minimizes the
    risk of getting sidetracked or losing track of important information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Good reproducibility and reusability:** A good project structure ensures
    that project results can be easily reproduced and its components can be reusable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Easy collaboration:** When a project is organized in a clear and logical
    way, it becomes easier for others to understand and contribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In summary, properly structuring your machine learning project can lead to greater
    transparency, efficiency, maintainability, and collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: 3.1\. Cookiecutter Data Science
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned earlier in this article, before writing any lines of code, the
    first thing we need to do is define the project structure. This can be accomplished
    by using a project structure template. Templates can be the company template established
    to respond to company/project needs, a publicly available template that a group
    of people or an individual has created and published for others to use, or your
    own custom template that you feel comfortable using.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most famous project structure in the field is the [Cookiecutter
    Data Science](https://drivendata.github.io/cookiecutter-data-science/) which is:'
  prefs: []
  type: TYPE_NORMAL
- en: a logical, reasonably standardized, but flexible project structure for doing
    and sharing data science work.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You can find the project structure of this template below, as well as a description
    of each file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b09267875fcb85c7e64eeb1aec1ce975.png)'
  prefs: []
  type: TYPE_IMG
- en: 4\. MLOps project structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have explained how the different steps of MLOps workflow are executed,
    let’s define a project structure template that aligns with the MLOps workflow.
    The [Cookiecutter MLOps](https://github.com/Chim-SO/cookiecutter-mlops) template
    is based on the Cookiecutter Data Science template we presented earlier. Like
    Cookiecutter Data Science, my Cookiecutter MLOps template includes the LICENSE,
    README, Makefile and requirements files; and docs, models, notebooks, references,
    reports, visualization and source folders. However, an additional folder (configs)
    has been added and the source and the visualization folders have been enhanced.
  prefs: []
  type: TYPE_NORMAL
- en: 'The MLOps project structure template has the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The **configs** folder contains all the configuration files, such as model hyperparameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **data** folder (the sub-folder of src) includes the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'ingestion.py: used to gather the data. If you need to create backups, protect
    private information, or create a metadata catalog, it’s best to do it here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'cleaning.py: used to clean the data by reducing outliers/noise, handling missing
    values, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'labeling.py: used to label the data if necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'splitting.py: used to split the data into test and train sets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'validation.py: used to validate the data (to ensure it is ready for training).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'build_features.py: this file has been moved to this folder because building
    features means organizing your dataset into a specific structure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the **models** folder (the sub-folder of src), each model’s scripts are
    organized in the model’s folder and include:'
  prefs: []
  type: TYPE_NORMAL
- en: 'model.py: used to define the model architecture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'dataloader.py: used to load the data to be fed to the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'preprocessing.py: used to preprocess the data before feeding it to the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'train.py: used to train the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'hyperparameters_tuning.py: used to tune the model and/or the training hyperparameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'predict.py: used to make predictions on randomimages (not from the dataset).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **visualization** folder includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'exploration.py: this file includes functions used to visualize the data during
    the data engineering process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'evaluation.py: this file includes functions used to visualize the training
    results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This was the MLOps template and there are some important notes to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: This is a basic template, so some files and folders can be removed or added
    based on your project requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some preprocessing functions can be used across all models, so it’s possible
    to create a single preprocessing file and move it to the data folder to avoid
    duplicating functions. However, it’s recommended to keep the preprocessing file
    separate to improve the model’s reusability and prevent potential problems in
    the future.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the predict script, it’s assumed that the data is coming from an application
    rather than the dataset, so additional preprocessing steps may be required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.1\. Starting a new MLOps project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to use this template to start your machine learning project, you
    can either use the [GitHub template](https://github.com/Chim-SO/mlops-template)
    or use the [Cookiecutter template](https://github.com/Chim-SO/cookiecutter-mlops),
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the **GitHub template**, first, you need to visit the template page
    here. Then, click on the green button ‘Use this template’, and you will have to
    choose whether to ‘Create a new repository’ or to ‘Open in a codespace’:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/06116b251e11eb2f28ff3a5d5bea5f11.png)'
  prefs: []
  type: TYPE_IMG
- en: The Github template
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the **Cookiecutter template**, you first need to install C[ookiecutter](https://cookiecutter.readthedocs.io/en/latest/installation.html#install-cookiecutter)
    using:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then run this command at the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example configuration for the handwritten digit classification,
    which you can customize by filling in the required parameters. Pressing the Enter
    key will keep the default values for any parameters you do not wish to change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 4.2\. Using MLOps project template for handwritten digits classification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the second section, we discussed the different steps involved in the MLOps
    workflow for the handwritten digits classification task. Implementing that pipeline
    using the MLOps template will result in the following project structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Since we have already described the contents of each file and folder, I will
    now highlight the most important steps that can be a little ambiguous.
  prefs: []
  type: TYPE_NORMAL
- en: The `configs` folder contains two configuration files, one for each model. For
    instance, the `singleoutput.yaml` file includes model configurations, training
    parameters, logging parameters (which will be discussed in the next tutorials),
    and parameters for model tuning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Using the `src/data/ingestion.py`, the data is first downloaded and stored in
    `data/raw/`. Then it is transformed into a record structure using `src/data/build_features.py`
    and stored directly to `data/processed`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `data/external` folder, I have added a `test` sub-folder that includes
    some random images of handwritten digits. These images will be used by the `predict.py`
    script for testing the trained model's predictions on new, unseen data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/1a421629c47c746eae990d041c02f252.png)'
  prefs: []
  type: TYPE_IMG
- en: The data/interim folder is empty for this example since there is no intermediate
    step in the data processing pipeline.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the data is a classic dataset, instead of duplicating the data loader for
    each model, it is moved from the models folder to `src/data/`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `src/models/<model>/predict.py` script outlines the pipeline to predict
    the class of a random image. Unlike the preprocessing pipeline used to train the
    model, which involves resizing and scaling, the prediction pipeline starts by
    trimming the image, inverting the pixels, and then resizing and scaling it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/6a293a711bd63c6886c3e95d04e7506c.png)'
  prefs: []
  type: TYPE_IMG
- en: Data preprocessing pipeline of random images.
  prefs: []
  type: TYPE_NORMAL
- en: The `MLproject` file and the `mlruns` folder are utilized by the MLflow library,
    which is a platform used to manage the machine learning pipeline. The next article
    will cover this topic in detail, so if it is new to you, don’t worry.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.3\. How to run your project?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several ways to execute a Python project: interactive runs (executing
    it line by line), batch runs (scheduling a cron job or using a job scheduler),
    containerized run (using Docker or Kubernetes), automated runs (using MLflow for
    example), or distributed runs (using a distributed computing framework like Apache
    Spark). As this is not the main subject of this article, let’s use the easiest
    way by executing these commands from the project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 5\. Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we have provided an MLOps project structure template and applied
    it for the handwritten digit classification problem. We demonstrated how the MLOps
    workflow is applied to solve this problem and drew up a project structure template
    that you can use as a [Cookiecutter project](https://github.com/Chim-SO/cookiecutter-mlops/tree/master/%7B%7B%20cookiecutter.repo_name%20%7D%7D)
    or a [Github template](https://github.com/Chim-SO/mlops-template). If you find
    the template helpful, please give it a star on GitHub so that others can discover
    it. If you are new to MLOps, you can read my [beginner-friendly tutorial](/a-beginner-friendly-introduction-to-mlops-95282f25325c#aabc).
  prefs: []
  type: TYPE_NORMAL
- en: In the next articles, we will continue with this example to cover all the MLOps
    workflow and principles. I will be writing more tutorials on MLOps and its various
    technologies with examples, so stay tuned.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading this article. You can find the example project in my [GitHub
    profile](https://github.com/Chim-SO?tab=repositories). If you have any questions
    or suggestions, feel free to leave a comment.
  prefs: []
  type: TYPE_NORMAL
- en: Image credits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All images and figures in this article whose source is not mentioned in the
    caption are by the author.
  prefs: []
  type: TYPE_NORMAL
