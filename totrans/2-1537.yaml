- en: Morphological Operations with Simulation (CV-05)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有仿真的形态学操作（CV-05）
- en: 原文：[https://towardsdatascience.com/morphological-operations-a-way-to-remove-image-distortion-513d162e7d05](https://towardsdatascience.com/morphological-operations-a-way-to-remove-image-distortion-513d162e7d05)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/morphological-operations-a-way-to-remove-image-distortion-513d162e7d05](https://towardsdatascience.com/morphological-operations-a-way-to-remove-image-distortion-513d162e7d05)
- en: Easiest Explanation of Morphological Operation in Image Processing
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图像处理中的形态学操作最简单解释
- en: '[](https://zubairhossain.medium.com/?source=post_page-----513d162e7d05--------------------------------)[![Md.
    Zubair](../Images/1b983a23226ce7561796fa5b28c00d65.png)](https://zubairhossain.medium.com/?source=post_page-----513d162e7d05--------------------------------)[](https://towardsdatascience.com/?source=post_page-----513d162e7d05--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----513d162e7d05--------------------------------)
    [Md. Zubair](https://zubairhossain.medium.com/?source=post_page-----513d162e7d05--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://zubairhossain.medium.com/?source=post_page-----513d162e7d05--------------------------------)[![Md.
    Zubair](../Images/1b983a23226ce7561796fa5b28c00d65.png)](https://zubairhossain.medium.com/?source=post_page-----513d162e7d05--------------------------------)[](https://towardsdatascience.com/?source=post_page-----513d162e7d05--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----513d162e7d05--------------------------------)
    [Md. Zubair](https://zubairhossain.medium.com/?source=post_page-----513d162e7d05--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----513d162e7d05--------------------------------)
    ·8 min read·May 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----513d162e7d05--------------------------------)
    ·8分钟阅读·2023年5月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/25ac9ee05dcdbe22e425ab418321eb3e.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/25ac9ee05dcdbe22e425ab418321eb3e.png)'
- en: Photo by [Katharina Matt](https://unsplash.com/ko/@katharinamatt?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Katharina Matt](https://unsplash.com/ko/@katharinamatt?utm_source=medium&utm_medium=referral)
    提供，发布于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Motivation
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动机
- en: Every day, we deal with a lot of images. The images come with different intensities
    and resolutions. Sometimes, we can’t extract proper information from an image
    for quality. Various image processing techniques help us in many aspects. Morphological
    operation is one of the important techniques by which we can reduce the distortion
    of an image and play with the shape. Look at the image below.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们每天处理大量的图像。这些图像具有不同的强度和分辨率。有时，由于质量原因，我们无法从图像中提取适当的信息。各种图像处理技术在许多方面对我们有帮助。形态学操作是一种重要的技术，通过它我们可以减少图像的失真并对形状进行操作。请看下面的图像。
- en: '![](../Images/4c9d05405e8a0f4dd3711870c326274e.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4c9d05405e8a0f4dd3711870c326274e.png)'
- en: The left one is the image before applying the morphological operation, and the
    right one is after the operation (Image By Author )
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧是应用形态学操作前的图像，右侧是操作后的图像（作者提供的图像）
- en: Another Example —
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子 —
- en: '![](../Images/0d51522cf10f5cc4fca5cc584a6b73cc.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0d51522cf10f5cc4fca5cc584a6b73cc.png)'
- en: Before and after applying morphological operation (Image By Author)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 应用形态学操作前后的对比（作者提供的图像）
- en: The results are interesting. But the use cases of morphological operations are
    not limited to these two types of tasks. *I will discuss everything you need to
    know about the morphological operation in this article.*
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 结果很有趣。但形态学操作的使用案例不仅限于这两种任务。*我将在本文中讨论你需要了解的所有形态学操作。*
- en: '`*[N.B. Mainly morphological analysis works on binary images. If you don’t
    know how to create a binary image, read my previous article on* [*image thresholding*](https://medium.com/towards-data-science/thresholding-a-way-to-make-images-more-visible-b3e314b5215c)*.
    ]*`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`*[注意：主要的形态学分析适用于二值图像。如果你不知道如何创建二值图像，请阅读我之前的文章* [*图像阈值化*](https://medium.com/towards-data-science/thresholding-a-way-to-make-images-more-visible-b3e314b5215c)*。]*`'
- en: Table of Contents
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目录
- en: '`[**Morphological Operations in Detail**](#2eba)`'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[**形态学操作详解**](#2eba)`'
- en: '`[**Different Types of Morphological Operations with Implementation**](#8b6a)`'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[**不同类型的形态学操作及其实现**](#8b6a)`'
- en: '`2.1\. [Erosion](#026f)`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`2.1\. [侵蚀](#026f)`'
- en: '`2.2\. [Dilation](#197f)`'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`2.2\. [膨胀](#197f)`'
- en: '`2.3\. [Compound Operations](#42ed)`'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`2.3\. [复合操作](#42ed)`'
- en: 3\. `[**Conclusion**](#2c4c)`
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. `[**结论**](#2c4c)`
- en: Morphological Operations in Detail
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 形态学操作详解
- en: Morphological operation is a technique to process an image based on its shape.
    It works on comparing the neighboring pixels to structure an image. The process
    is preferable for binary images `({0,1} or {0,255})`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 形态学操作是一种基于图像形状处理图像的技术。它通过比较邻近像素来构建图像。该过程适用于二值图像`({0,1} 或 {0,255})`。
- en: '**How does the process work?**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**这个过程是如何工作的？**'
- en: Before getting familiar with morphological operations, we need to have knowledge
    about some basic terminologies — ***Structuring Element, Miss, Hit and Fit.***
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在熟悉形态学操作之前，我们需要了解一些基本术语——***结构元素、错过、命中和适合。***
- en: '![](../Images/c52546aac7b68a728a28c65bbf73439f.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c52546aac7b68a728a28c65bbf73439f.png)'
- en: 'Figure 1: Morphological Operation’s Elements (Image By Author)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：形态学操作的元素（图像由作者提供）
- en: '**Structuring Element**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**结构元素**'
- en: It’s a small piece of shape or template that analyze every pixel of an image
    with the neighborhood pixels under the element. *The structuring element is shown
    in the above image marked with blue color.*
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个小的形状或模板，分析图像的每个像素与元素下的邻域像素。*上图中标记为蓝色的结构元素。*
- en: '*Different Structuring Elements —*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*不同的结构元素——*'
- en: '![](../Images/636b974d432f9e96826d76a77765548d.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/636b974d432f9e96826d76a77765548d.png)'
- en: 'Figure 2: Different Structuring Elements (Image By Author)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图2：不同的结构元素（图像由作者提供）
- en: Structuring elements are designed according to the shape of the image. The size
    of structuring elements can be of different sizes (`2x2, 3x3, 5x1, 5x5, etc.`).
    Structuring elements contains the intensity value of foreground and background
    (`namely 0 or 1`). It can also hold the **don’t care** value. One pixel of the
    structuring element is considered an **origin**. In the above image, I have mentioned
    the origin pixel with a black dot. *There is no hard and fast rule to define the
    origin. It is depended on you. But conventionally, the origin is considered the
    center pixel.*
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 结构元素是根据图像的形状设计的。结构元素的大小可以有不同的尺寸（`2x2, 3x3, 5x1, 5x5, 等`）。结构元素包含前景和背景的强度值（即0或1）。它还可以包含**无所谓**的值。结构元素的一个像素被视为**原点**。在上面的图像中，我用黑点标记了原点像素。*定义原点没有硬性规定，这取决于你。但通常，原点被认为是中心像素。*
- en: Morphological operation is done by propagating the structuring elements through
    the image. The pixel value is changed in the `**origin**` position of the image
    by comparing the pixels under the structuring elements.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 形态学操作是通过在图像上传播结构元素来完成的。通过比较结构元素下的像素，改变图像中`**原点**`位置的像素值。
- en: '**Miss:** If no pixel of the image matches with the structuring element, then
    it is called miss. Shown in ***figure 1***.'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**错过：** 如果图像中没有像素与结构元素匹配，则称为错过。见于***图1***。'
- en: ''
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Hit:** When at least one pixel of structuring element overlaps with the image
    pixel, it is called hit. Shown in ***figure 1***.'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**命中：** 当结构元素的至少一个像素与图像像素重叠时，称为命中。见于***图1***。'
- en: ''
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Fit:** If all the pixels of structuring elements match with the image, then
    it is called fit. Shown in ***figure 1***.'
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**适合：** 如果结构元素的所有像素与图像匹配，则称为适合。见于***图1***。'
- en: '**Basically, there are two types of morphological operations —**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**基本上，有两种类型的形态学操作——**'
- en: '`*Erosion*`'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`*腐蚀*`'
- en: '`*Dilation*`'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`*膨胀*`'
- en: Another two compound operations can be derived from these two operations — ***Closing
    and Opening***.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从这两种操作中可以导出另外两种复合操作——***闭合和开操作***。
- en: '**Different Types of Morphological Operations with Implementation**'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**不同类型的形态学操作及其实现**'
- en: The binary image is suitable for applying morphological operations.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 二值图像适合应用形态学操作。
- en: '**Erosion**'
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**腐蚀**'
- en: The operation is simple. The structuring element convolutes the object’s each
    pixel. If all the pixels of the structuring element overlap with object image
    pixels (satisfy the fit condition), the object image pixel will be filled with
    foreground pixel intensity value. Otherwise, it will be filled with background
    pixel intensity value.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 操作很简单。结构元素卷积对象的每个像素。如果结构元素的所有像素都与对象图像像素重叠（满足适合条件），对象图像像素将填充前景像素强度值。否则，它将填充背景像素强度值。
- en: '*Let’s assume 0 for the background and 1 for the foreground.*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*假设背景为0，前景为1。*'
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I have created a simulation for better intuition. For demonstration purposes,
    I have used a 2x2 structuring element with an intensity of 1.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个模拟以便更好地理解。为了演示目的，我使用了一个强度为1的2x2结构元素。
- en: '![](../Images/820fd045a7fbe63938711b197a40eddd.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/820fd045a7fbe63938711b197a40eddd.png)'
- en: 'Figure-3: Structuring Element (Image By Author)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图3：结构元素（作者图像）
- en: I have taken an image with 6x6 pixels. Where the white color elements are considered
    as 0 intensity value and sky-blue color pixels are considered as intensity value
    of 1\. *Now carefully observe the simulation given below.*
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经拍摄了一张6x6像素的图像。白色元素被视为0强度值，天蓝色像素被视为1的强度值。*现在仔细观察下面的模拟。*
- en: '![](../Images/d1e34df3aaf46b4347f213c7a09bf7e9.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d1e34df3aaf46b4347f213c7a09bf7e9.png)'
- en: Erosion Operation (Gif By Author)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 侵蚀操作（作者Gif）
- en: The structuring element convolutes every pixel of the given image. If it satisfies
    the miss or hit condition, it will change the pixel to 0 in the **origin's** location
    of the structuring element. In the simulation, I have shown where the pixel is
    changed from 1 to 0 with red color. Finally, we get the following result.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 结构元素会卷积到给定图像的每个像素上。如果它满足漏检或击中条件，它将把像素更改为**原始**位置的0。在模拟中，我用红色显示了像素从1变为0的地方。最后，我们得到如下结果。
- en: '![](../Images/f2bb1e20474a7d47bc367d45f9b7a818.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f2bb1e20474a7d47bc367d45f9b7a818.png)'
- en: 'Figure-4: Erosion Result (Image by Author)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图4：侵蚀结果（作者图像）
- en: So, it shows that the main image pixels have been reduced by erosion.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这表明主要图像像素通过侵蚀减少了。
- en: Practical Implementation with OpenCv
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用OpenCV的实际实现
- en: '`**We will use *the OpenCV* library to implement the morphological operations.
    In the OpenCV library, the structuring element is known as *the kernel*.**`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`**我们将使用*OpenCV*库来实现形态学操作。在OpenCV库中，结构元素被称为*内核*。**`'
- en: First of all, we import the necessary libraries.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入必要的库。
- en: '***I will show how the image gets changed with different structuring elements/
    kernel sizes.***'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '***我将展示图像如何随着不同的结构元素/内核大小而变化。***'
- en: '*Loading the image —*'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*加载图像 —*'
- en: Our image is black on white background. `But [**OpenCV**](https://docs.opencv.org/4.x/d9/d61/tutorial_py_morphological_ops.html)
    expects black background with a white image object for morphological operation.`
    So, we convert the *white background* to *black* and the *black object to white,*
    with `inverse binary thresholding`. Next, we apply `5x5, 9x9 and 11x11` kernels
    on the *inverse binary threshold image*. As we have applied morphological operation
    on the inverse binary threshold image, *we have applied inverse binary thresholding
    again after the morphological operation to retain the white background and black
    object.* And finally, we have plotted the images.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的图像在白色背景上是黑色的。`但是 [**OpenCV**](https://docs.opencv.org/4.x/d9/d61/tutorial_py_morphological_ops.html)
    期望黑色背景与白色图像对象进行形态学操作。` 所以，我们将*白色背景*转换为*黑色*，并将*黑色对象转换为白色*，使用`逆二值化`。接下来，我们在*逆二值化图像*上应用`5x5、9x9和11x11`内核。由于我们对逆二值化图像应用了形态学操作，*在形态学操作后，我们再次应用逆二值化以保留白色背景和黑色对象。*最后，我们绘制了这些图像。
- en: The code is given below with the comments.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是带有注释的代码。
- en: We can also apply more than one iteration on the image with the same kernel
    size. Output is shown for 1, 2 and 3 iterations with a kernel size of 5x5.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以对图像应用多个迭代，使用相同的内核大小。结果显示为5x5内核大小下的1、2和3次迭代。
- en: '**Properties of Erosion with Coding Example**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**侵蚀的属性与编码示例**'
- en: '*It can be used to remove the extra noise of an object.*'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*这可以用来去除对象的额外噪声。*'
- en: '*Loading the image —*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*加载图像 —*'
- en: '*Result after removing the external noise —*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*去除外部噪声后的结果 —*'
- en: The steps are similar to the previous code `*(inverse binary thresholding →
    morphological operation → inverse thresholding to retain the original image background
    and foreground color)*`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤类似于之前的代码`*(逆二值化 → 形态学操作 → 逆阈值化以保留原始图像背景和前景色)*`。
- en: '*2\. Disjoint the joint images.*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*2\. 将连接的图像分开。*'
- en: '*Coding example —*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*编码示例 —*'
- en: Loading a joint image —
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 加载连接图像 —
- en: It disjoints the images.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 它将图像分开。
- en: '**Dilation**'
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**膨胀**'
- en: In dilation, structuring element convolute on the object image. *If any of the
    structuring element’s pixel value overlaps with the object image (****satisfy
    the hit condition****), the object image pixel will be filled with foreground
    pixel intensity value. Otherwise, the pixel intensity value will remain the same.*
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在膨胀操作中，结构元素会卷积到对象图像上。*如果结构元素的像素值与对象图像重叠（****满足击中条件****），则对象图像像素将被填充为前景像素强度值。否则，像素强度值将保持不变。*
- en: '*We assume 0 for the background and 1 for the foreground.*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们假设背景为0，前景为1。*'
- en: '[PRE1]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For better intuition, I have created a simulation of the dilation operation.
    As the structuring element, we have used the previous structuring element of the
    *figure-3* and kept the same image as shown in the `erosion operation`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解，我创建了膨胀操作的模拟。作为结构元素，我们使用了*图-3*中的先前结构元素，并保留了与`腐蚀操作`中显示的相同图像。
- en: '*Now, carefully observe the dilation operation shown below.*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*现在，仔细观察下面展示的膨胀操作。*'
- en: '![](../Images/fae81b650193fff867cf061e6d89a5f8.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fae81b650193fff867cf061e6d89a5f8.png)'
- en: Dilation Operation (Gif by Author)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 膨胀操作（作者提供的Gif）
- en: The structuring element is convoluting in every pixel of the object image from
    left to right and top to bottom. When it satisfies the hit or miss condition,
    the pixel in the origin’s location of the structuring element changes from 0 to
    1\. Otherwise, it remains the same. After completing the operation, it produces
    the result shown below.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 结构元素在对象图像的每个像素上从左到右、从上到下进行卷积。当满足击中或未击中条件时，结构元素原点位置的像素从0变为1。否则，它保持不变。完成操作后，产生如下结果。
- en: '![](../Images/6233b33aa759bd92c3dae1255727f8c7.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6233b33aa759bd92c3dae1255727f8c7.png)'
- en: 'Figure-5: Dilation result (Image By Author)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '图-5: 膨胀结果（作者提供的图片）'
- en: So, dilation increases the pixels of the object image.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，膨胀增加了对象图像的像素。
- en: '**Practical Implementation with OpenCv**'
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**使用OpenCv的实际应用**'
- en: I have used the same image shown in the ***erosion*** section. The code is also
    identical to the previous section. In this section, we will apply dilation instead
    of erosion operation and show the results for different kernel sizes and iterations.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了***腐蚀***部分中显示的相同图像。代码也与前一部分相同。在这一部分，我们将应用膨胀操作而不是腐蚀操作，并展示不同内核大小和迭代次数的结果。
- en: With different iteration values and the same kernel size of 5x5, we can see
    how the shape of the object image is changing. For implementation with OpenCV,
    we have followed the same steps as described in the erosion section `*(inverse
    binary thresholding → morphological operation → inverse thresholding to retain
    the original image background and foreground color)*`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用不同的迭代值和相同的5x5内核大小，我们可以看到对象图像的形状如何变化。对于OpenCV的实现，我们遵循了与腐蚀部分相同的步骤`*(反向二值化阈值
    → 形态学操作 → 反向阈值以保留原始图像背景和前景颜色)*`。
- en: '**Properties of Dilation Operation with Example**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**膨胀操作的属性及示例**'
- en: With dilation, we can reduce/repair the breaks of an image.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过膨胀，我们可以减少/修复图像的断裂。
- en: '*Coding Example —*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*编码示例 —*'
- en: We have loaded the image of ***‘H’*** with breaks.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们加载了一个带有断裂的***‘H’***图像。
- en: Next, we applied dilation to repair the breaks.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们应用膨胀来修复断裂。
- en: And we have successfully done the job.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功完成了任务。
- en: 2\. We can remove the internal noise of an image with dilation.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 我们可以通过膨胀去除图像的内部噪声。
- en: '*Coding Example —*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*编码示例 —*'
- en: '*Load an image with internal noise.*'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '*加载带有内部噪声的图像。*'
- en: After applying dilation on the above image, we can easily get an output image
    with no noise.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述图像上应用膨胀后，我们可以轻松得到没有噪声的输出图像。
- en: Compound Operations
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复合操作
- en: There are some other compound morphological operations. Among them, `**opening
    and closing**` are two widely used operations. The following diagram shows the
    operations at a glance.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他的复合形态学操作。其中，`**开操作和闭操作**`是两种广泛使用的操作。下图一览无余地展示了这些操作。
- en: '![](../Images/5fa6194f85d88ea91395117303cf613a.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5fa6194f85d88ea91395117303cf613a.png)'
- en: 'Figure-6: Opening and Closing Operation (Image by Author)[1]'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '图-6: 开操作和闭操作（作者提供的图片）[1]'
- en: The **opening operation** is done by performing erosion and then dilation. It
    removes the joint on the objects keeping the shape identical to the main object.
    Shown in Figure 6\. It is useful to remove background noise[2].
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**开操作**通过先进行腐蚀然后进行膨胀来完成。它去除对象上的连接，同时保持形状与主对象相同。见图6。它有助于去除背景噪声[2]。'
- en: We can apply opening by using OpenCV with the following syntax.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用OpenCV应用开操作，语法如下。
- en: '[PRE2]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If we first apply dilation and erosion on the next, the process is known as
    **closing**. The process is shown in figure-6\. It helps to remove the noise of
    the foreground image[2]. The syntax for closing operations with OpenCV is given
    below.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们先对下一步应用膨胀和腐蚀，那么这个过程称为**闭操作**。这个过程在图-6中展示。它有助于去除前景图像的噪声[2]。使用OpenCV进行闭操作的语法如下。
- en: '[PRE3]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Some other compound operations are available, like morphological gradient, top
    hat, and black hat.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他一些复合操作，例如形态学梯度、顶帽和黑帽。
- en: Conclusion
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Though the process of morphological operation is simple, it can be used for
    boundary extraction, filling the hole, detecting a foreign object from food, thickening
    an image object, extracting the skeletons of an image, clearing borders, etc.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管形态学操作的过程很简单，但它可以用于边界提取、填充孔洞、检测食物中的异物、加厚图像对象、提取图像骨架、清除边界等。
- en: If you thoroughly read the article, I believe you will have enough confidence
    to implement the techniques in solving real-life problems.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认真阅读这篇文章，我相信你将有足够的信心在解决实际问题时应用这些技术。
- en: References
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: Gonzalez, R. C. (2009). *Digital image processing*. Pearson education india.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Gonzalez, R. C. (2009). *数字图像处理*. Pearson education india.
- en: '[https://docs.opencv.org/4.x/d9/d61/tutorial_py_morphological_ops.html](https://docs.opencv.org/4.x/d9/d61/tutorial_py_morphological_ops.html)'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://docs.opencv.org/4.x/d9/d61/tutorial_py_morphological_ops.html](https://docs.opencv.org/4.x/d9/d61/tutorial_py_morphological_ops.html)'
- en: '`Join medium with the following link to support my writings.`'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`通过以下链接加入 Medium 支持我的写作。`'
- en: '`[https://mzh706.medium.com/membership](https://mzh706.medium.com/membership)`'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mzh706.medium.com/membership](https://mzh706.medium.com/membership)'
- en: Other articles from my **computer vision** series —
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我**计算机视觉**系列的其他文章 —
- en: '[](/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68?source=post_page-----513d162e7d05--------------------------------)
    [## Getting Started with NumPy and OpenCV for Computer Vision (CV-01)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://towardsdatascience.com/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68?source=post_page-----513d162e7d05--------------------------------](https://towardsdatascience.com/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68?source=post_page-----513d162e7d05--------------------------------)
    [## 开始使用 NumPy 和 OpenCV 进行计算机视觉 (CV-01)'
- en: Start Your Coding for Computer vision with Python
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用 Python 开始你的计算机视觉编程
- en: towardsdatascience.com](/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68?source=post_page-----513d162e7d05--------------------------------)
    [](/how-color-is-represented-and-viewed-in-computer-vision-b1cc97681b68?source=post_page-----513d162e7d05--------------------------------)
    [## A Comprehensive Guide on Color Representation in Computer Vision (CV-02)
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://towardsdatascience.com/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68?source=post_page-----513d162e7d05--------------------------------](https://towardsdatascience.com/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68?source=post_page-----513d162e7d05--------------------------------)
    [https://towardsdatascience.com/how-color-is-represented-and-viewed-in-computer-vision-b1cc97681b68?source=post_page-----513d162e7d05--------------------------------](https://towardsdatascience.com/how-color-is-represented-and-viewed-in-computer-vision-b1cc97681b68?source=post_page-----513d162e7d05--------------------------------)
    [## 计算机视觉中颜色表示的全面指南 (CV-02)'
- en: A Detail Explanation of Color Space and Color Model
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 颜色空间和颜色模型的详细解释
- en: towardsdatascience.com](/how-color-is-represented-and-viewed-in-computer-vision-b1cc97681b68?source=post_page-----513d162e7d05--------------------------------)
    [](/blend-images-and-create-watermark-with-opencv-d24381b81bd0?source=post_page-----513d162e7d05--------------------------------)
    [## The Easiest Guideline on Image Blending (CV-03)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://towardsdatascience.com/how-color-is-represented-and-viewed-in-computer-vision-b1cc97681b68?source=post_page-----513d162e7d05--------------------------------](https://towardsdatascience.com/how-color-is-represented-and-viewed-in-computer-vision-b1cc97681b68?source=post_page-----513d162e7d05--------------------------------)
    [https://towardsdatascience.com/blend-images-and-create-watermark-with-opencv-d24381b81bd0?source=post_page-----513d162e7d05--------------------------------](https://towardsdatascience.com/blend-images-and-create-watermark-with-opencv-d24381b81bd0?source=post_page-----513d162e7d05--------------------------------)
    [## 图像混合的最简单指南 (CV-03)'
- en: Easiest Guideline on Blending and Pasting Image for Computer Vision
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算机视觉中图像混合和粘贴的最简单指南
- en: towardsdatascience.com](/blend-images-and-create-watermark-with-opencv-d24381b81bd0?source=post_page-----513d162e7d05--------------------------------)
    [](/thresholding-a-way-to-make-images-more-visible-b3e314b5215c?source=post_page-----513d162e7d05--------------------------------)
    [## Thresholding — a Way to Make Images More Visible (CV-04)
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://towardsdatascience.com/blend-images-and-create-watermark-with-opencv-d24381b81bd0?source=post_page-----513d162e7d05--------------------------------](https://towardsdatascience.com/blend-images-and-create-watermark-with-opencv-d24381b81bd0?source=post_page-----513d162e7d05--------------------------------)
    [https://towardsdatascience.com/thresholding-a-way-to-make-images-more-visible-b3e314b5215c?source=post_page-----513d162e7d05--------------------------------](https://towardsdatascience.com/thresholding-a-way-to-make-images-more-visible-b3e314b5215c?source=post_page-----513d162e7d05--------------------------------)
    [## 阈值化 — 使图像更清晰的方式 (CV-04)'
- en: Extract More Information from Images with Thresholding
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过阈值化从图像中提取更多信息
- en: towardsdatascience.com](/thresholding-a-way-to-make-images-more-visible-b3e314b5215c?source=post_page-----513d162e7d05--------------------------------)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://towardsdatascience.com/thresholding-a-way-to-make-images-more-visible-b3e314b5215c?source=post_page-----513d162e7d05--------------------------------](https://towardsdatascience.com/thresholding-a-way-to-make-images-more-visible-b3e314b5215c?source=post_page-----513d162e7d05--------------------------------)'
