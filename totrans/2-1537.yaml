- en: Morphological Operations with Simulation (CV-05)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/morphological-operations-a-way-to-remove-image-distortion-513d162e7d05](https://towardsdatascience.com/morphological-operations-a-way-to-remove-image-distortion-513d162e7d05)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Easiest Explanation of Morphological Operation in Image Processing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://zubairhossain.medium.com/?source=post_page-----513d162e7d05--------------------------------)[![Md.
    Zubair](../Images/1b983a23226ce7561796fa5b28c00d65.png)](https://zubairhossain.medium.com/?source=post_page-----513d162e7d05--------------------------------)[](https://towardsdatascience.com/?source=post_page-----513d162e7d05--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----513d162e7d05--------------------------------)
    [Md. Zubair](https://zubairhossain.medium.com/?source=post_page-----513d162e7d05--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----513d162e7d05--------------------------------)
    ·8 min read·May 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/25ac9ee05dcdbe22e425ab418321eb3e.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Katharina Matt](https://unsplash.com/ko/@katharinamatt?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every day, we deal with a lot of images. The images come with different intensities
    and resolutions. Sometimes, we can’t extract proper information from an image
    for quality. Various image processing techniques help us in many aspects. Morphological
    operation is one of the important techniques by which we can reduce the distortion
    of an image and play with the shape. Look at the image below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4c9d05405e8a0f4dd3711870c326274e.png)'
  prefs: []
  type: TYPE_IMG
- en: The left one is the image before applying the morphological operation, and the
    right one is after the operation (Image By Author )
  prefs: []
  type: TYPE_NORMAL
- en: Another Example —
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0d51522cf10f5cc4fca5cc584a6b73cc.png)'
  prefs: []
  type: TYPE_IMG
- en: Before and after applying morphological operation (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: The results are interesting. But the use cases of morphological operations are
    not limited to these two types of tasks. *I will discuss everything you need to
    know about the morphological operation in this article.*
  prefs: []
  type: TYPE_NORMAL
- en: '`*[N.B. Mainly morphological analysis works on binary images. If you don’t
    know how to create a binary image, read my previous article on* [*image thresholding*](https://medium.com/towards-data-science/thresholding-a-way-to-make-images-more-visible-b3e314b5215c)*.
    ]*`'
  prefs: []
  type: TYPE_NORMAL
- en: Table of Contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`[**Morphological Operations in Detail**](#2eba)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[**Different Types of Morphological Operations with Implementation**](#8b6a)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`2.1\. [Erosion](#026f)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`2.2\. [Dilation](#197f)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`2.3\. [Compound Operations](#42ed)`'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. `[**Conclusion**](#2c4c)`
  prefs: []
  type: TYPE_NORMAL
- en: Morphological Operations in Detail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Morphological operation is a technique to process an image based on its shape.
    It works on comparing the neighboring pixels to structure an image. The process
    is preferable for binary images `({0,1} or {0,255})`.
  prefs: []
  type: TYPE_NORMAL
- en: '**How does the process work?**'
  prefs: []
  type: TYPE_NORMAL
- en: Before getting familiar with morphological operations, we need to have knowledge
    about some basic terminologies — ***Structuring Element, Miss, Hit and Fit.***
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c52546aac7b68a728a28c65bbf73439f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Morphological Operation’s Elements (Image By Author)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structuring Element**'
  prefs: []
  type: TYPE_NORMAL
- en: It’s a small piece of shape or template that analyze every pixel of an image
    with the neighborhood pixels under the element. *The structuring element is shown
    in the above image marked with blue color.*
  prefs: []
  type: TYPE_NORMAL
- en: '*Different Structuring Elements —*'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/636b974d432f9e96826d76a77765548d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Different Structuring Elements (Image By Author)'
  prefs: []
  type: TYPE_NORMAL
- en: Structuring elements are designed according to the shape of the image. The size
    of structuring elements can be of different sizes (`2x2, 3x3, 5x1, 5x5, etc.`).
    Structuring elements contains the intensity value of foreground and background
    (`namely 0 or 1`). It can also hold the **don’t care** value. One pixel of the
    structuring element is considered an **origin**. In the above image, I have mentioned
    the origin pixel with a black dot. *There is no hard and fast rule to define the
    origin. It is depended on you. But conventionally, the origin is considered the
    center pixel.*
  prefs: []
  type: TYPE_NORMAL
- en: Morphological operation is done by propagating the structuring elements through
    the image. The pixel value is changed in the `**origin**` position of the image
    by comparing the pixels under the structuring elements.
  prefs: []
  type: TYPE_NORMAL
- en: '**Miss:** If no pixel of the image matches with the structuring element, then
    it is called miss. Shown in ***figure 1***.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Hit:** When at least one pixel of structuring element overlaps with the image
    pixel, it is called hit. Shown in ***figure 1***.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Fit:** If all the pixels of structuring elements match with the image, then
    it is called fit. Shown in ***figure 1***.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Basically, there are two types of morphological operations —**'
  prefs: []
  type: TYPE_NORMAL
- en: '`*Erosion*`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`*Dilation*`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another two compound operations can be derived from these two operations — ***Closing
    and Opening***.
  prefs: []
  type: TYPE_NORMAL
- en: '**Different Types of Morphological Operations with Implementation**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The binary image is suitable for applying morphological operations.
  prefs: []
  type: TYPE_NORMAL
- en: '**Erosion**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The operation is simple. The structuring element convolutes the object’s each
    pixel. If all the pixels of the structuring element overlap with object image
    pixels (satisfy the fit condition), the object image pixel will be filled with
    foreground pixel intensity value. Otherwise, it will be filled with background
    pixel intensity value.
  prefs: []
  type: TYPE_NORMAL
- en: '*Let’s assume 0 for the background and 1 for the foreground.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: I have created a simulation for better intuition. For demonstration purposes,
    I have used a 2x2 structuring element with an intensity of 1.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/820fd045a7fbe63938711b197a40eddd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure-3: Structuring Element (Image By Author)'
  prefs: []
  type: TYPE_NORMAL
- en: I have taken an image with 6x6 pixels. Where the white color elements are considered
    as 0 intensity value and sky-blue color pixels are considered as intensity value
    of 1\. *Now carefully observe the simulation given below.*
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d1e34df3aaf46b4347f213c7a09bf7e9.png)'
  prefs: []
  type: TYPE_IMG
- en: Erosion Operation (Gif By Author)
  prefs: []
  type: TYPE_NORMAL
- en: The structuring element convolutes every pixel of the given image. If it satisfies
    the miss or hit condition, it will change the pixel to 0 in the **origin's** location
    of the structuring element. In the simulation, I have shown where the pixel is
    changed from 1 to 0 with red color. Finally, we get the following result.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f2bb1e20474a7d47bc367d45f9b7a818.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure-4: Erosion Result (Image by Author)'
  prefs: []
  type: TYPE_NORMAL
- en: So, it shows that the main image pixels have been reduced by erosion.
  prefs: []
  type: TYPE_NORMAL
- en: Practical Implementation with OpenCv
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`**We will use *the OpenCV* library to implement the morphological operations.
    In the OpenCV library, the structuring element is known as *the kernel*.**`'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we import the necessary libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '***I will show how the image gets changed with different structuring elements/
    kernel sizes.***'
  prefs: []
  type: TYPE_NORMAL
- en: '*Loading the image —*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our image is black on white background. `But [**OpenCV**](https://docs.opencv.org/4.x/d9/d61/tutorial_py_morphological_ops.html)
    expects black background with a white image object for morphological operation.`
    So, we convert the *white background* to *black* and the *black object to white,*
    with `inverse binary thresholding`. Next, we apply `5x5, 9x9 and 11x11` kernels
    on the *inverse binary threshold image*. As we have applied morphological operation
    on the inverse binary threshold image, *we have applied inverse binary thresholding
    again after the morphological operation to retain the white background and black
    object.* And finally, we have plotted the images.
  prefs: []
  type: TYPE_NORMAL
- en: The code is given below with the comments.
  prefs: []
  type: TYPE_NORMAL
- en: We can also apply more than one iteration on the image with the same kernel
    size. Output is shown for 1, 2 and 3 iterations with a kernel size of 5x5.
  prefs: []
  type: TYPE_NORMAL
- en: '**Properties of Erosion with Coding Example**'
  prefs: []
  type: TYPE_NORMAL
- en: '*It can be used to remove the extra noise of an object.*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Loading the image —*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Result after removing the external noise —*'
  prefs: []
  type: TYPE_NORMAL
- en: The steps are similar to the previous code `*(inverse binary thresholding →
    morphological operation → inverse thresholding to retain the original image background
    and foreground color)*`.
  prefs: []
  type: TYPE_NORMAL
- en: '*2\. Disjoint the joint images.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Coding example —*'
  prefs: []
  type: TYPE_NORMAL
- en: Loading a joint image —
  prefs: []
  type: TYPE_NORMAL
- en: It disjoints the images.
  prefs: []
  type: TYPE_NORMAL
- en: '**Dilation**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In dilation, structuring element convolute on the object image. *If any of the
    structuring element’s pixel value overlaps with the object image (****satisfy
    the hit condition****), the object image pixel will be filled with foreground
    pixel intensity value. Otherwise, the pixel intensity value will remain the same.*
  prefs: []
  type: TYPE_NORMAL
- en: '*We assume 0 for the background and 1 for the foreground.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For better intuition, I have created a simulation of the dilation operation.
    As the structuring element, we have used the previous structuring element of the
    *figure-3* and kept the same image as shown in the `erosion operation`.
  prefs: []
  type: TYPE_NORMAL
- en: '*Now, carefully observe the dilation operation shown below.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fae81b650193fff867cf061e6d89a5f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Dilation Operation (Gif by Author)
  prefs: []
  type: TYPE_NORMAL
- en: The structuring element is convoluting in every pixel of the object image from
    left to right and top to bottom. When it satisfies the hit or miss condition,
    the pixel in the origin’s location of the structuring element changes from 0 to
    1\. Otherwise, it remains the same. After completing the operation, it produces
    the result shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6233b33aa759bd92c3dae1255727f8c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure-5: Dilation result (Image By Author)'
  prefs: []
  type: TYPE_NORMAL
- en: So, dilation increases the pixels of the object image.
  prefs: []
  type: TYPE_NORMAL
- en: '**Practical Implementation with OpenCv**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I have used the same image shown in the ***erosion*** section. The code is also
    identical to the previous section. In this section, we will apply dilation instead
    of erosion operation and show the results for different kernel sizes and iterations.
  prefs: []
  type: TYPE_NORMAL
- en: With different iteration values and the same kernel size of 5x5, we can see
    how the shape of the object image is changing. For implementation with OpenCV,
    we have followed the same steps as described in the erosion section `*(inverse
    binary thresholding → morphological operation → inverse thresholding to retain
    the original image background and foreground color)*`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Properties of Dilation Operation with Example**'
  prefs: []
  type: TYPE_NORMAL
- en: With dilation, we can reduce/repair the breaks of an image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Coding Example —*'
  prefs: []
  type: TYPE_NORMAL
- en: We have loaded the image of ***‘H’*** with breaks.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we applied dilation to repair the breaks.
  prefs: []
  type: TYPE_NORMAL
- en: And we have successfully done the job.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. We can remove the internal noise of an image with dilation.
  prefs: []
  type: TYPE_NORMAL
- en: '*Coding Example —*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Load an image with internal noise.*'
  prefs: []
  type: TYPE_NORMAL
- en: After applying dilation on the above image, we can easily get an output image
    with no noise.
  prefs: []
  type: TYPE_NORMAL
- en: Compound Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some other compound morphological operations. Among them, `**opening
    and closing**` are two widely used operations. The following diagram shows the
    operations at a glance.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5fa6194f85d88ea91395117303cf613a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure-6: Opening and Closing Operation (Image by Author)[1]'
  prefs: []
  type: TYPE_NORMAL
- en: The **opening operation** is done by performing erosion and then dilation. It
    removes the joint on the objects keeping the shape identical to the main object.
    Shown in Figure 6\. It is useful to remove background noise[2].
  prefs: []
  type: TYPE_NORMAL
- en: We can apply opening by using OpenCV with the following syntax.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If we first apply dilation and erosion on the next, the process is known as
    **closing**. The process is shown in figure-6\. It helps to remove the noise of
    the foreground image[2]. The syntax for closing operations with OpenCV is given
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Some other compound operations are available, like morphological gradient, top
    hat, and black hat.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Though the process of morphological operation is simple, it can be used for
    boundary extraction, filling the hole, detecting a foreign object from food, thickening
    an image object, extracting the skeletons of an image, clearing borders, etc.
  prefs: []
  type: TYPE_NORMAL
- en: If you thoroughly read the article, I believe you will have enough confidence
    to implement the techniques in solving real-life problems.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Gonzalez, R. C. (2009). *Digital image processing*. Pearson education india.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://docs.opencv.org/4.x/d9/d61/tutorial_py_morphological_ops.html](https://docs.opencv.org/4.x/d9/d61/tutorial_py_morphological_ops.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Join medium with the following link to support my writings.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`[https://mzh706.medium.com/membership](https://mzh706.medium.com/membership)`'
  prefs: []
  type: TYPE_NORMAL
- en: Other articles from my **computer vision** series —
  prefs: []
  type: TYPE_NORMAL
- en: '[](/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68?source=post_page-----513d162e7d05--------------------------------)
    [## Getting Started with NumPy and OpenCV for Computer Vision (CV-01)'
  prefs: []
  type: TYPE_NORMAL
- en: Start Your Coding for Computer vision with Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68?source=post_page-----513d162e7d05--------------------------------)
    [](/how-color-is-represented-and-viewed-in-computer-vision-b1cc97681b68?source=post_page-----513d162e7d05--------------------------------)
    [## A Comprehensive Guide on Color Representation in Computer Vision (CV-02)
  prefs: []
  type: TYPE_NORMAL
- en: A Detail Explanation of Color Space and Color Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-color-is-represented-and-viewed-in-computer-vision-b1cc97681b68?source=post_page-----513d162e7d05--------------------------------)
    [](/blend-images-and-create-watermark-with-opencv-d24381b81bd0?source=post_page-----513d162e7d05--------------------------------)
    [## The Easiest Guideline on Image Blending (CV-03)
  prefs: []
  type: TYPE_NORMAL
- en: Easiest Guideline on Blending and Pasting Image for Computer Vision
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/blend-images-and-create-watermark-with-opencv-d24381b81bd0?source=post_page-----513d162e7d05--------------------------------)
    [](/thresholding-a-way-to-make-images-more-visible-b3e314b5215c?source=post_page-----513d162e7d05--------------------------------)
    [## Thresholding — a Way to Make Images More Visible (CV-04)
  prefs: []
  type: TYPE_NORMAL
- en: Extract More Information from Images with Thresholding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/thresholding-a-way-to-make-images-more-visible-b3e314b5215c?source=post_page-----513d162e7d05--------------------------------)
  prefs: []
  type: TYPE_NORMAL
