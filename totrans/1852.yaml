- en: Simple Surveys with Streamlit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/simple-surveys-with-streamlit-and-databutton-d027586f1c71](https://towardsdatascience.com/simple-surveys-with-streamlit-and-databutton-d027586f1c71)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Streamlit’s user interface components made constructing simple surveys easy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@alan-jones?source=post_page-----d027586f1c71--------------------------------)[![Alan
    Jones](../Images/359379fab1d6685ff08080b98173e67c.png)](https://medium.com/@alan-jones?source=post_page-----d027586f1c71--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d027586f1c71--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d027586f1c71--------------------------------)
    [Alan Jones](https://medium.com/@alan-jones?source=post_page-----d027586f1c71--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d027586f1c71--------------------------------)
    ·10 min read·Jun 19, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/054e1e498d5035ba5a4e7c90024ebc1e.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Nguyen Dang Hoang Nhu](https://unsplash.com/@nguyendhn?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '*What do think about the future of AI, should it be regulated, will it create
    new jobs or will it destroy them?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*How do you think will Climate Change affect the way you live?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Do you believe that there is alien life in the universe?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Which is your preferred programming language for data science?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes we use other people’s data to create a story — other times we need
    to create our own data and so we have to collect it. This might be a survey or
    a log of experimental results but we need to present questions and we need to
    record the resulting data.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there are services that will do it for you (sometimes for a fee but
    there are often free options, too). Or you could stick to the tried and tested
    clipboard and pencil method.
  prefs: []
  type: TYPE_NORMAL
- en: But creating a simple survey is pretty easy if you are a Streamlit user.
  prefs: []
  type: TYPE_NORMAL
- en: Storing the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a bit of a sticking point though, though. Streamlit’s user interface
    components are great and easy to use, but there are no built-in data storage methods.
    You could simply store data in a text file or a SQLite database and that would
    work well but only for a local app.
  prefs: []
  type: TYPE_NORMAL
- en: If you try deploying that app in the Streamlit Cloud, you will find that any
    data you create disappears.
  prefs: []
  type: TYPE_NORMAL
- en: It’s obvious when you think about it.
  prefs: []
  type: TYPE_NORMAL
- en: When you start a Streamlit Cloud app it copies the source files from Github,
    including any data files or databases, but when you leave the app, nothing is
    written back. So when you start the app up again, you are starting from scratch.
    Any data that you have gathered and stored only lasts as long as the app is running.
    When you leave the app that data is lost.
  prefs: []
  type: TYPE_NORMAL
- en: Not great behaviour for a survey app.
  prefs: []
  type: TYPE_NORMAL
- en: The Streamlit people have, of course, thought of this and have suggested solutions
    in their documentation (see the tutorials section in the ‘[Knowledge Base](https://docs.streamlit.io/knowledge-base/tutorials)’).
    Mostly these are concerned with connecting to database servers that run various
    databases like MySQL, Microsoft SQL Server, etc. but also show how to use Streamlit
    with cloud-based services like Amazon S3, MongoDB and Google Cloud Storage.
  prefs: []
  type: TYPE_NORMAL
- en: There is also [Databutton](https://databutton.com/) which is a comprehensive
    online development environment for Streamlit that features, amongst other things,
    one-click deployment, AI-supported coding and, conveniently, data storage as part
    of the development and deployment environments. There is a section on porting
    to Databutton towards the end of the article.
  prefs: []
  type: TYPE_NORMAL
- en: '*(Some of you may have seen this article publicised with Databutton in the
    title —this was an error. I’ve included a Databutton section but I will write
    a more comprehensive article about Databutton in the near future.)*'
  prefs: []
  type: TYPE_NORMAL
- en: For now, we’re going to concentrate on the survey part and deal with the storage
    separately. In this app, we’ll just use a local file for storing the data but
    to make our future lives easier, we’ll put all of the file operations in a library.
    That way if we want to port to another platform we simply need to re-write the
    library. So, just bear in mind that our initial app is not designed to be deployed
    but to work on a local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a survey in Streamlit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Streamlit provides a good selection of user interface components that can be
    used for creating, presenting and analysing survey data. In particular, we’ll
    make use of groups of radio buttons to implement multiple-choice questions and
    the editable dataframe to display and edit the questionnaire itself.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/205e80633762714d137fa9d1b0e27d8e.png)'
  prefs: []
  type: TYPE_IMG
- en: A multiple choice question using Streamlit radio buttons — screenshot by author
  prefs: []
  type: TYPE_NORMAL
- en: We can think about more sophisticated presentations or different question types,
    later - for the moment we’ll keep it simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three components to the app: the questionnaire editor; the survey
    presentation; and the results analyser/visualiser. I’ve implemented them as pages
    in a multi-page app. (All that means is that they live in a folder called *pages*.)'
  prefs: []
  type: TYPE_NORMAL
- en: The editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will mostly use Python dictionaries to represent our data — both the questionnaire
    and the results — and, in this local app version, we’ll store it as JSON files.
  prefs: []
  type: TYPE_NORMAL
- en: The questions will be stored in two fields, `text`, a string that contains the
    question text and `responses` which is a string of multiple-choice answers separated
    by commas.
  prefs: []
  type: TYPE_NORMAL
- en: You can the the question data displayed as a Streamlit `data_editor` component
    in the screenshot, below. And using this component, you can edit the questionnaire
    directly, if you wish.
  prefs: []
  type: TYPE_NORMAL
- en: 'Above the editable dataframe are a couple of fields: the first is for the question
    and the second is for the list of possible responses. Fill this in and hit the
    *Add question to survey* button and you will see the new question appear in the
    dataframe.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As I said, you can also edit the dataframe directly: click in the appropriate
    field to change the existing data; click to the left of a row to select it and
    use the delete key to remove it; or click on the left below the last row to add
    a new row.'
  prefs: []
  type: TYPE_NORMAL
- en: In either case, you need to hit *Save changes* to store the data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cd5de156456201fd9ebfb5ab3042f6f6.png)'
  prefs: []
  type: TYPE_IMG
- en: The questionnaire editor — screenshot by author
  prefs: []
  type: TYPE_NORMAL
- en: You can see the implementation, below.
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit programs are re-run each time there is a user interaction, so we use
    the Streamlit session facility to store the questionnaire so that its value is
    properly maintained. Other than that, it is a pretty straightforward Streamlit
    program; it presents two `st.text_input()` components (add a default response
    string to the second one) followed by an `st.data_editor()` that both displays
    the questionnaire and allows it to be modified.
  prefs: []
  type: TYPE_NORMAL
- en: The final part of the program is where the data is stored. This uses routines
    that I have written in the `DButils` library. These are essentially a wrapper
    around basic file storage functions — as I said earlier I’ve implemented storage
    like those so that the programs can be used with alternative storage options on
    a different platform.
  prefs: []
  type: TYPE_NORMAL
- en: '`DButils.get_survey()` retrieves the stored questionnaire, and `DButils.save_survey()`
    saves the entire dataframe to the file.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Present the survey
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each question is presented as a group of radio buttons.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c89f0ec0c8b9762cd46170032b1f477a.png)'
  prefs: []
  type: TYPE_IMG
- en: Presenting the survey — screenshot by author
  prefs: []
  type: TYPE_NORMAL
- en: As you can see below we iterate through the questionnaire, extracting the `text`
    field for the prompt and splitting the `responses` field into its separate answers
    in order to display the button group.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The complete set of recorded data is then added to the stored responses with
    `DButils.update()`.
  prefs: []
  type: TYPE_NORMAL
- en: Present the results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The results page is divided into 3 sections: the first shows the results as
    a data table that can be downloaded as a CSV file.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0dd6f831cc54beffb30f588bdd8362fa.png)'
  prefs: []
  type: TYPE_IMG
- en: Presenting the results 1 — screenshot by author
  prefs: []
  type: TYPE_NORMAL
- en: The second part is a graphical overview of the complete survey. The bar chart
    is created with Plotly Express.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/26bb89bd841dd2b3f8ea81b95a2956f4.png)'
  prefs: []
  type: TYPE_IMG
- en: Presenting the results 2— screenshot by author
  prefs: []
  type: TYPE_NORMAL
- en: And the final part lets the user select the results for each question which
    are displayed as a bar graph (also Plotly).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/271a28831eed746c375a5fb912c70fe2.png)'
  prefs: []
  type: TYPE_IMG
- en: Presenting the results 3— screenshot by author
  prefs: []
  type: TYPE_NORMAL
- en: The code for this is below. We use `DButils.get_results()` to load the results
    dataframe and then display this as a `st.dataframe()` (not editable, this time,
    of course!) and we add a download button that will save the data on your local
    machine as a CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: Following this, there is bar a chart of the entire response data (coloured for
    each question). And since this is not necessarily the easier thing to read, there
    follows a radio button group that lets you choose a specific question to focus
    on. The bar charts for each question are drawn beforehand, in a loop, and the
    appropriate one is displayed for the selected radio button.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `DButils` library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see below, the `DButils` library has a number of functions for reading,
    writing and updating CSV files. It also defines constants for the two files that
    we used above.
  prefs: []
  type: TYPE_NORMAL
- en: The library is written specifically for a local app using JSON files to store
    the data but if you wanted to port to another platform, there are only four simple
    functions to re-write and two constants to define.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Databutton
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To demonstrate how easy it is to port this to another platform, and in particular
    how easy it is to port to Databutton, here is a new version of the *DButils* library.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To port the whole thing to Databutton just copy the pages above to Databutton
    pages and copy the code above into a Databutton library.
  prefs: []
  type: TYPE_NORMAL
- en: What makes this so easy is that I hardly had to write any code — Databutler
    did it for me. I simply asked the AI assistant to generate the library code for
    each page and then pasted that into the library file.
  prefs: []
  type: TYPE_NORMAL
- en: And it just worked?
  prefs: []
  type: TYPE_NORMAL
- en: Not quite. The code that Databutler generated for the individual pages used
    slightly different names for the data stores, for example, `survey_results` for
    one page and just `survey` for another. This was fixed in a few seconds. Then
    it did just work!
  prefs: []
  type: TYPE_NORMAL
- en: On reflection, I could have been a little more precise in my prompting and told
    Databutler the names it should use.
  prefs: []
  type: TYPE_NORMAL
- en: In the real world
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I hope that you might agree that these simple routines create a reasonably attractive
    app and show you how Streamlit can be used to create simple surveys.
  prefs: []
  type: TYPE_NORMAL
- en: But there are a few things that you would need to think about if you wanted
    to deploy such a thing in the real world.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few things that you might want to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: Even though surveys are done anonymously, you might want to be able to identify
    the respondent so as to avoid duplicate entries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might want to include different question types or present them in different
    ways (an `st.select_slider()` for example).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Randomising the way the responses are presented can sometimes avoid leading
    the respondent to a particular answer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You would almost certainly want to add demographic questions to the survey.
    These can be implemented as multiple-choice questions, too, but the results need
    to be treated differently from the others when doing the analysis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But this is not a tutorial on how to design a survey, so I’ll leave it there.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading, I hope you found it a useful guide on how you might approach
    the design of surveys in Streamlit. This app is deliberately very simple and the
    data storage only works when the app is deployed locally — I hope to address these
    things in a later article.
  prefs: []
  type: TYPE_NORMAL
- en: If you’d like to see more of my work please take a look at my [webpage](http://alanjones2.github.io).
  prefs: []
  type: TYPE_NORMAL
