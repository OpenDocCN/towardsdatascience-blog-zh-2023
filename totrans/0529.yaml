- en: Combining Actuals and Forecasts in one continuous Line in Power BI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/combining-actuals-and-forecasts-in-one-continuous-line-in-power-bi-dc5fd3a66c6f](https://towardsdatascience.com/combining-actuals-and-forecasts-in-one-continuous-line-in-power-bi-dc5fd3a66c6f)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*In several businesses, we have the Actual Sales and Forecasts. We can add
    these numbers to one line chart and see two lines. But one of my clients asked
    me if he can have one continuous line with the Actuals until the selected month
    and the Forecast for all months afterward. Here is how I did it.*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@salvatorecagliari?source=post_page-----dc5fd3a66c6f--------------------------------)[![Salvatore
    Cagliari](../Images/a24b0cefab6e707cfee06cde9e857559.png)](https://medium.com/@salvatorecagliari?source=post_page-----dc5fd3a66c6f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dc5fd3a66c6f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dc5fd3a66c6f--------------------------------)
    [Salvatore Cagliari](https://medium.com/@salvatorecagliari?source=post_page-----dc5fd3a66c6f--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dc5fd3a66c6f--------------------------------)
    ·11 min read·Aug 12, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bdf5c662a3ba1059b9c687aa83483651.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Carlos Muza](https://unsplash.com/@kmuza?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To set the context, let’s look at the following picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d1021777052b3a9bd671e0dfdf451e48.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1 — Actuals and Forecast with a line chart (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: For this chart, I just entered a few numbers in Excel and created a line chart
    from these numbers.
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the Actual and Forecast Sales lines are diverging from each
    other, which would be as expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'While this is OK in most cases, my client wanted to have a different view of
    his data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/316258782ab59d99c2c8a132befaced9.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2 — Target view requested by my client (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the target is to create one continuous line. Starting with January,
    then going forward with the Actual numbers per Month until the selected Month
    (Set in a separate Slicer). Then continue with the Forecast numbers. But the cutover
    at the selected month must be connected to form one continuous line.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, the cutover point must move to the selected month when he changes
    the selection for the month.
  prefs: []
  type: TYPE_NORMAL
- en: Well, that sounded interesting.
  prefs: []
  type: TYPE_NORMAL
- en: Approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At first, the request sounded familiar: I want to select a specific month,
    and I want to see the data for the entire year and use the chosen month to do
    a particular calculation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I explained a solution to this in one of my past articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-show-more-dates-than-selected-in-dax-bda0c4140121?source=post_page-----dc5fd3a66c6f--------------------------------)
    [## How to show more dates than selected in DAX'
  prefs: []
  type: TYPE_NORMAL
- en: What if your users want to see more years than the selected year. Let’s look
    into it
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-show-more-dates-than-selected-in-dax-bda0c4140121?source=post_page-----dc5fd3a66c6f--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'In short: I need a copy of my Date table and link it to my primary Date table.'
  prefs: []
  type: TYPE_NORMAL
- en: Then, I use the copied Date table for the Slicer and the primary Date table
    for the chart.
  prefs: []
  type: TYPE_NORMAL
- en: I can use the [CROSSFILTER()](https://dax.guide/crossfilter/) function to turn
    off the relationship between the copied Date table and the primary Date table
    to show all months of the selected year.
  prefs: []
  type: TYPE_NORMAL
- en: So far, so good.
  prefs: []
  type: TYPE_NORMAL
- en: But now I have to figure out how to calculate the correct values at the right
    point.
  prefs: []
  type: TYPE_NORMAL
- en: Way to the solution (Actuals)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step is to make sure that I can select one month from the Slicer using
    the copied Date table and use it to define the year for reporting the monthly
    results.
  prefs: []
  type: TYPE_NORMAL
- en: 'The challenge here is that without any logic, I will end up seeing only one
    data point for the selected month:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/913336789c25df95628a913be4a3d8cb.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3 — One data point without specific logic (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'I must add some code to the Measure to correct this to see all months:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: First, I have to determine the selected year.
  prefs: []
  type: TYPE_NORMAL
- en: Then I use [CALCULATE()](https://dax.guide/calculate/) to add a filter to the
    selected year. But in addition, I use the [CROSSFILTER()](https://dax.guide/crossfilter/)
    function to turn off the relationship between the copied Date table and the primary
    Date table.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the intermediary result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3fd4bd01df4e7a1e93f8f3c6242b8ba9.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4 — Result with the correct Date logic (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: Now I get the same result, regardless of which month I select in the Slicer.
    The result changes only when I choose a month from a different year.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to add the logic to calculate the Actual Sales results only
    up to the selected month.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: I select May, and I see the Sales from January to May
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I select February, and I see only January and February
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this case, I cannot add a further Filter to CALCULATE() like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This filter would overwrite any filter from the Date table and return the same
    value for all months.
  prefs: []
  type: TYPE_NORMAL
- en: I need to ensure that no result is calculated after the selected month.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what I came up with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: First, I determine the last selected date from the copied Date table ‘Selection
    Date’. For example, when I choose May 2022, I will get May 31\. 2022\. For April,
    I will get April 30\. 2022.
  prefs: []
  type: TYPE_NORMAL
- en: Next, I get the last date of the current Filter context in the Line Chart. As
    I use the primary Date table in the Visual, I can get it from there.
  prefs: []
  type: TYPE_NORMAL
- en: But, as I turn off the Relationship with the copied Date table, I must restrict
    the Year to the selected year from the Slicer. This is why I must add the filter
    ‘Date’[Year] = SelYear.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, I use an IF to determine if I must return a value.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the Measure returns only results up to the selected month.
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen above, my data contains up to Max 2022.
  prefs: []
  type: TYPE_NORMAL
- en: 'But when I select March 2022, I get this result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1d7d0585edb87ad154074ce80eac717b.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5 — Result of the Measure for Actuals until March 2022 (Figure by the
    Author)
  prefs: []
  type: TYPE_NORMAL
- en: Next step — Calculate the Forecast
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, I must calculate the forecast starting from the Selected Month.
  prefs: []
  type: TYPE_NORMAL
- en: 'I can take the previous Measure and change the [IF()](https://dax.guide/if/)
    to start from the selected month until the end of the year:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, I only changed the IF() statement to start at the selected month
    and finish at the actual year’s end.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are near the final result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/242e50bbd276789de994dcd8df9826e7.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6 — Result of the unadjusted Forecast Measure (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: But now I have this gap in the line.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that I need to have one continuous line?
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, I need to make one little change to my Measure to calculate
    the Forecast: At the point of the selected month, I must return the Actual Sales
    number.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The modified Measure is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can see that I exchanged the IF() with a [SWITCH()](https://dax.guide/switch/)
    and added a new condition to check if “ActiveDate” is equal to “LastSelDate”.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last change is to change the line for the Forecast to a dashed line, and
    the result is as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ab1b7a30a8e9b42c42b11be14611c715.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7 — Final Result (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: What if we don’t have Sales?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, so good.
  prefs: []
  type: TYPE_NORMAL
- en: But what happens when the user chooses a month after the last month with Actual
    Sales?
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7b81c093208c42fdd5467f3d4fc11eed.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8 — Gap when selecting a month without any Actual Sales (Figure by the
    Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'My client said: Well, my users can understand this. So, no problem. Leave it
    as it is.'
  prefs: []
  type: TYPE_NORMAL
- en: 'But for this Article, I want to give you a possible solution: When no data
    for Actual Sales exists, return the Forecast.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s translate this to an additional condition for the SWITCH():'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Look at the first condition of SWITCH: ISBLANK([Retail Sales (Using correct
    date)]), Forecast'
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is not exactly as originally needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5232b11b17c833766e31eaed92c5b78f.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9 — Result with the closed gap (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: What is not possible is to close the gap between May and June.
  prefs: []
  type: TYPE_NORMAL
- en: The reason is that as we evaluate the Retail Sales Measure, we add the Forecast
    only when the Retail Sales Measure is blank. Therefore, we have no possibility
    of adding the missing value.
  prefs: []
  type: TYPE_NORMAL
- en: The data doesn’t exist at this point.
  prefs: []
  type: TYPE_NORMAL
- en: So, the only way to get one continuous line is to freeze the data, to stay as
    is, even when selecting a month after the last month with Actual data.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, I followed this process:'
  prefs: []
  type: TYPE_NORMAL
- en: Check if the month after the following month contains a Sales result
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If yes, return the Sales result for the selected month
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If no, then get the last Sales value and return it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If no Sales data exists for the current month, return the Forecast result
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To achieve this, I need a Measure to get the Sales for the Month after the
    current Month:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Usually, this Measure would be much easier to write.
  prefs: []
  type: TYPE_NORMAL
- en: But because of the specific requirements for the solution, I need to do it this
    way.
  prefs: []
  type: TYPE_NORMAL
- en: First, I have to get the last date of the current month à Variable LastActDate
  prefs: []
  type: TYPE_NORMAL
- en: Then I get the Sales results for the dates after the variable LastActDate (>
    [EOMONTH](https://dax.guide/eomonth)(‘Date’[Date], 0) and before or at the last
    Date of the following Month (<= EOMONTH(‘Date’[Date], 1).
  prefs: []
  type: TYPE_NORMAL
- en: But I only return this value when the Measure used to return the Actual Sales
    value returns no data ([ISBLANK()](https://dax.guide/isbank)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, I can use this Measure to check if the current Month in the Visual is
    the last Month with Actual Sales data. If yes, return the last known Sales Data.
    Afterward, return Forecast data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As I have to check for multiple cases, I use SWITCH() to decide which value
    I return.
  prefs: []
  type: TYPE_NORMAL
- en: 'When I select June 2022, or afterward, I always get this result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aeef0491f368ac79fedea488d5776e8e.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10 — result with the full Measure (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: Please consider that I must use the Month/Year column in the chart. I need this
    column, as the Measure must know which month in which year the current position
    is. Firstly, it was enough to know in which month I am, As I take the year from
    the selection in the Slicer.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, this wasn’t possible anymore. So, I must change the used column
    for the months.
  prefs: []
  type: TYPE_NORMAL
- en: The big problem with this Measure is that it takes almost three seconds to calculate
    the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the first Measure needs less than one second to complete the calculation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1838f1ee4767200905b490278bcbe32b.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11 — Comparing execution duration of the first and the full version (Figure
    by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: The CROSSFILTER() Problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Microsoft documentation for [CROSSFILTER()](https://learn.microsoft.com/en-us/dax/crossfilter-function)
    states in the Remarks section:'
  prefs: []
  type: TYPE_NORMAL
- en: This function is not supported for use in DirectQuery mode when used in calculated
    columns or row-level security (RLS) rules.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, this critical point is not mentioned in the DAX.guide documentation
    for [CROSSFILTER()](https://dax.guide/crossfilter/).
  prefs: []
  type: TYPE_NORMAL
- en: I encountered this issue on a data model of one of my clients.
  prefs: []
  type: TYPE_NORMAL
- en: If you implement RLS in your Data model, the above solution will no longer work.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative to the CROSSFILTER() function is using [ALLEXCEPT()](https://dax.guide/allexcept/).
  prefs: []
  type: TYPE_NORMAL
- en: With ALLEXCEPT(), we can remove all filters from a table except for the filter
    on one or more columns of that table.
  prefs: []
  type: TYPE_NORMAL
- en: We can use ALLEXCEPT() to replace CROSSFILTER() while retaining the filter on
    the Year column of the ‘Selection Date’ table.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Sales Measure will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: So, why we don’t use ALLEXCEPT() to begin with?
  prefs: []
  type: TYPE_NORMAL
- en: This version is much shorter and easier to understand than the version with
    CROSSFILTER().
  prefs: []
  type: TYPE_NORMAL
- en: Well, let’s look at the performance of the two versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, let’s look at the performance of the version with CROSSFILTER():'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/56fa9b2c6c2b9ce6e785f765d4e0f6d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12 — Server Timings for the Measure with CROSSFILTER() (Figure by the
    Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s change the Measure in DAX Studio to the Version with ALLEXCEPT()
    and measure the performance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4233f3ed4c65a371cc001afc38fc0149.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13 — Server Timings of the Version with ALLEXCEPT() (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the Query takes more than double the time.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, the Storage Engine (SE) part shrinks from 46.7% to 16.7 %. This indicates
    that the Version with ALLEXCEPT() is less efficient than the version with CROSSFILTER().
  prefs: []
  type: TYPE_NORMAL
- en: The main reason is that the relationship between the ‘Selection Date’ and the
    ‘Date’ table remains active, and these two tables are joined together to get the
    result.
  prefs: []
  type: TYPE_NORMAL
- en: And the Formula Engine (FE) processing time is much higher than before.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about why this isn’t good in my Article on this topic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-get-performance-data-from-power-bi-with-dax-studio-b7f11b9dd9f9?source=post_page-----dc5fd3a66c6f--------------------------------)
    [## How to get performance data from Power BI with DAX Studio'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes we have a slow Report, and we need to figure out why. We will see
    how to collect performance data and the…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-get-performance-data-from-power-bi-with-dax-studio-b7f11b9dd9f9?source=post_page-----dc5fd3a66c6f--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: So the approach with CROSSFILTER() should be used, as long as we don’t are constrained
    by the statement mentioned above in the Microsoft documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the approach with the two Date tables offers great possibilities to enhance
    the reporting capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: But it introduces some complexity when calculating specific results, like the
    Sales for the following month.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, I recommend exploring this model and how it can give you previously
    unknown ways to develop solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Until today, I built multiple solutions using this approach, which I previously
    thought impossible or very complex to develop or understand.
  prefs: []
  type: TYPE_NORMAL
- en: The requirements for the solution shown here were very particular, but I learned
    a lot while developing the complete solution.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, knowing the restrictions when using CROSSFILTER() and the alternative
    available is important.
  prefs: []
  type: TYPE_NORMAL
- en: But at the same time, it’s important to know that the alternative is less efficient.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/718441ef8b3265861ee37c70ae6e8dbb.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Riccardo Annandale](https://unsplash.com/@pavement_special?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I use the Contoso sample dataset, like in my previous articles. You can download
    the ContosoRetailDW Dataset for free from Microsoft [here](https://www.microsoft.com/en-us/download/details.aspx?id=18279).
  prefs: []
  type: TYPE_NORMAL
- en: The Contoso Data can be freely used under the MIT License, as described [here](https://github.com/microsoft/Power-BI-Embedded-Contoso-Sales-Demo).
  prefs: []
  type: TYPE_NORMAL
- en: I modified the dataset to contain only the Retail Sales table and added a derived
    table for the Forecast data.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@salvatorecagliari/subscribe?source=post_page-----dc5fd3a66c6f--------------------------------)
    [## Get an email whenever Salvatore Cagliari publishes.'
  prefs: []
  type: TYPE_NORMAL
- en: Get an email whenever Salvatore Cagliari publishes. By signing up, you will
    create a Medium account if you don't…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@salvatorecagliari/subscribe?source=post_page-----dc5fd3a66c6f--------------------------------)
  prefs: []
  type: TYPE_NORMAL
