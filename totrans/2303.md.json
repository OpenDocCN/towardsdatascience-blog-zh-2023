["```py\nimport pandas as pd\ndf = pd.read_csv('flights.csv', \n                 usecols = [\"ORIGIN_AIRPORT\", \"DESTINATION_AIRPORT\",\"YEAR\"])\ndf.head()\n```", "```py\ndf_between_airports = df.groupby(by=[\"ORIGIN_AIRPORT\", \"DESTINATION_AIRPORT\"]).count()\ndf_between_airports = df_between_airports['YEAR'].rename('COUNT').reset_index() \ndf_between_airports = df_between_airports.query('ORIGIN_AIRPORT.str.len() <= 3 & DESTINATION_AIRPORT.str.len() <= 3')\ndf_between_airports = df_between_airports.sort_values(by=\"COUNT\", \n                                                      ascending=False)\ndf_between_airports\n```", "```py\ntop = 800\ndf_between_airports = df_between_airports.head(top)\ndf_between_airports\n```", "```py\nimport networkx as nx\n\nG = nx.from_pandas_edgelist(df_between_airports, \n                            'ORIGIN_AIRPORT', \n                            'DESTINATION_AIRPORT',\n                            create_using = nx.DiGraph())\n```", "```py\nG.nodes()\n```", "```py\nNodeView(('SFO', 'LAX', 'JFK', 'LAS', 'LGA', 'ORD', 'OGG', 'HNL', 'ATL', \n'MCO', 'DFW', 'SEA', 'BOS', 'DCA', 'FLL', 'PHX', 'DEN', 'TPA', 'SAN', \n'PHL', 'KOA', 'ANC', 'MSP', 'SJC', 'MIA', 'CLT', 'HOU', 'DAL', 'OAK', \n'SLC', 'LIH', 'BWI', 'MSY', 'SMF', 'JAX', 'EWR', 'DTW', 'IAH', 'MKE', \n'ITO', 'RDU', 'SAT', 'AUS', 'MDW', 'SJU', 'SNA', 'PBI', 'PDX', 'CLE', \n'CVG', 'RSW', 'IND', 'BUR', 'IAD', 'BNA', 'RIC', 'STL', 'MCI', 'CMH', \n'DSM', 'PIT', 'RNO', 'BHM', 'CHS', 'MSN', 'GEG', 'SAV', 'MEM', 'GRR', \n'ONT', 'CID', 'GRB', 'SDF', 'CHA', 'OKC', 'DAY', 'CAE', 'ORF', 'GSO', \n'TUS', 'TUL', 'GRK', 'XNA', 'PVD', 'BTR', 'GSP', 'ABQ', 'HSV', 'BUF', \n'AGS', 'BDL', 'ABI', 'JAN', 'LEX', 'SHV', 'PNS', 'FWA', 'MOB', 'SGF', \n'MHT', 'VPS', 'MGM', 'ICT', 'PIA', 'LFT', 'PSP', 'CRP', 'TLH', 'FAR', \n'TYS', 'SBA', 'GNV', 'COS', 'OMA', 'MAF', 'CAK', 'FSD', 'LIT'))\n```", "```py\nG.edges()\n```", "```py\nEdgeView([('SFO', 'LAX'), ('SFO', 'JFK'), ('SFO', 'LAS'), ('SFO', 'ORD'), \n('SFO', 'SAN'), ('SFO', 'SEA'), ('SFO', 'DEN'), ('SFO', 'EWR'), \n('SFO', 'PHX'), ('SFO', 'DFW'), ('SFO', 'SNA'), ('SFO', 'PDX'), \n('SFO', 'BOS'), ('SFO', 'IAD'), ('SFO', 'IAH'), ('SFO', 'SLC'), \n('SFO', 'ATL'), ('SFO', 'MSP'), ('SFO', 'ONT'), ('SFO', 'PSP'), \n('SFO', 'SBA'), ('SFO', 'PHL'), ('SFO', 'HNL'), ('SFO', 'AUS'), \n('LAX', 'JFK'), ('LAX', 'LAS'), ('LAX', 'ORD'), ('LAX', 'SEA'), \n('LAX', 'PHX'), ('LAX', 'DFW'), ('LAX', 'SJC'), ('LAX', 'OAK'), \n('LAX', 'DEN'), ('LAX', 'ATL'), ('LAX', 'SMF'), ('LAX', 'SLC'), \n...\n...\n```", "```py\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(8, 8))\n\noptions = {\n    'node_color':'yellow',\n    'node_size': 1500,\n    'width': 1,\n    'arrowstyle': '-|>',\n    'arrowsize': 18,\n}\n\nnx.draw_circular(G, with_labels = True,  **options)\n```", "```py\ntop = 140\ndf_between_airports = df_between_airports.head(top)\ndf_between_airports\n```", "```py\n!pip install basemap\n```", "```py\n$ brew install geos\n```", "```py\n$ export GEOS_DIR=/opt/homebrew/Cellar/geos/3.11.1\n```", "```py\nimport pandas as pd\n\ndf_airports = pd.read_csv('airports.csv')\ndf_airports\n```", "```py\n# check which airport does not have location information\ndf_airports[(df_airports['LATITUDE'].isna()==True) |\n            (df_airports['LONGITUDE'].isna()==True)]\n```", "```py\n# ECP airport\ndf_airports.at[96,'LATITUDE'] = 30.354984\ndf_airports.at[96,'LONGITUDE'] = -85.79934\n\n# PBG airport\ndf_airports.at[234,'LATITUDE'] = 44.6597091\ndf_airports.at[234,'LONGITUDE'] = -73.46722069999998\n\n# UST airport\ndf_airports.at[313,'LATITUDE'] = 29.954352\ndf_airports.at[313,'LONGITUDE'] = -81.342935\n```", "```py\nfrom mpl_toolkits.basemap import Basemap as Basemap\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize = (10,9))\n\nbasemap = Basemap(\n    projection = 'merc',\n    llcrnrlon = -180, \n    urcrnrlon = -50,     \n    llcrnrlat = -10,  \n    urcrnrlat = 70,    \n    lat_ts = 0,\n    resolution = 'l',\n    suppress_ticks = True)\n```", "```py\n# pass in lon, lat to convert to x/y map projection coordinates\nbasemap_x, basemap_y = basemap(df_airports['LONGITUDE'].values, \n                               df_airports['LATITUDE'].values)\n```", "```py\npos = {}\nfor i, IATA_CODE in enumerate (df_airports['IATA_CODE']):    \n    pos[IATA_CODE] = (basemap_x[i], basemap_y[i])\n```", "```py\n{'ABE': (11626491.577256551, 6073282.907509623),\n 'ABI': (8930961.032284452, 4930788.720997522),\n 'ABQ': (8160681.891600923, 5282318.28670927),\n 'ABR': (9071074.35752435, 6803760.994159843),\n 'ABY': (10653083.864127252, 4815986.333659503),\n 'ACK': (12224744.463780478, 6161722.945706454),\n ...\n```", "```py\nax = plt.figure(figsize=(13, 13))\n\nnx.draw_networkx_nodes(G = G, \n                       pos = pos, \n                       nodelist = G.nodes(), \n                       node_color = 'r', \n                       alpha = 0.7, \n                       node_size = [sum(df_between_airports.query(f'DESTINATION_AIRPORT == \"{x}\"')['COUNT']) / 400 for x in G.nodes()]\n                       )\n\nnx.draw_networkx_labels(G = G, \n                       pos = pos,\n                       labels =  {x:x for x in G.nodes()},\n                       font_size = 10\n                       )\n\nnx.draw_networkx_edges(G = G, \n                       pos = pos, \n                       edge_color='g',\n                       alpha=0.2, \n                       arrows = False)\n\nbasemap.drawcoastlines(linewidth = 0.5)\n```", "```py\nbasemap = Basemap(projection='ortho',\n                  lon_0 = -105,\n                  lat_0 = 40,\n                  resolution = 'l')\n```", "```py\nimport matplotlib.pyplot as plt\nimport mplleaflet\nimport networkx as nx\n\n# load the nodes and edges\nG = nx.from_pandas_edgelist(df_between_airports, \n                            'ORIGIN_AIRPORT', \n                            'DESTINATION_AIRPORT')\n\n# create a dictionary of this format: { IATA_CODE: [LONGITUDE, LATITUDE] }\npos = df_airports[['IATA_CODE','LONGITUDE','LATITUDE']].set_index('IATA_CODE').T.to_dict('list')\n```", "```py\n{'ABE': [-75.4404, 40.65236],\n 'ABI': [-99.6819, 32.41132],\n 'ABQ': [-106.60919, 35.04022],\n 'ABR': [-98.42183, 45.44906],\n 'ABY': [-84.19447, 31.53552],\n 'ACK': [-70.06018, 41.25305],\n 'ACT': [-97.23052, 31.61129],\n 'ACV': [-124.10862, 40.97812],\n ...\n ...\n```", "```py\nfig, ax = plt.subplots(figsize=(15,15))\n\n# draw the nodes\nnx.draw_networkx_nodes(G,\n                       pos = pos,\n                       node_size = [sum(df_between_airports.query(f'DESTINATION_AIRPORT == \"{x}\"')['COUNT']) / 1500 for x in G.nodes()],\n                       node_color='red',\n                       alpha = 0.8)\n\n# draw the edges\nnx.draw_networkx_edges(G,\n                       pos = pos,\n                       edge_color = 'gray', \n                       alpha=0.3)\n\n# display the map\nmplleaflet.display(fig=fig)\n```", "```py\n# top = 140\n# df_between_airports = df_between_airports.head(top)\n# df_between_airports\n```"]