- en: 4 Essential Techniques You Must Learn as a Python Beginner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/4-essential-techniques-you-must-learn-as-a-python-beginner-84a64ece3461](https://towardsdatascience.com/4-essential-techniques-you-must-learn-as-a-python-beginner-84a64ece3461)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And how to use them so you can ace that next job interview with ease
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://murtaza5152-ali.medium.com/?source=post_page-----84a64ece3461--------------------------------)[![Murtaza
    Ali](../Images/2aecff50999761022af29f9b30e2f925.png)](https://murtaza5152-ali.medium.com/?source=post_page-----84a64ece3461--------------------------------)[](https://towardsdatascience.com/?source=post_page-----84a64ece3461--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----84a64ece3461--------------------------------)
    [Murtaza Ali](https://murtaza5152-ali.medium.com/?source=post_page-----84a64ece3461--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----84a64ece3461--------------------------------)
    ·8 min read·Feb 9, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/384232c5c565694cf27955acb6a266aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Carl Heyerdahl](https://unsplash.com/@carlheyerdahl?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: The Lambda Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s say you are working with some data in a Jupyter notebook, just doing some
    quick exploration and analysis. You’re still in the early stages of data cleaning
    and processing, far from any production-ready models or visualizations or applications.
    But you do have a deadline to meet, so you’re exploring quickly and efficiently,
    making use of your stellar Python skills.
  prefs: []
  type: TYPE_NORMAL
- en: In the midst of your adventures, you come across a column in your data that
    requires transformation. You just need to square the numbers in the column. It’s
    nothing crazy, but it’s unfortunately also one of those weird necessities that
    is simple enough to be quick, but complex enough to not have its own built-in
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, you decide to use [Pandas’s](https://pandas.pydata.org/docs/reference/api/pandas.Series.apply.html)
    `[apply](https://pandas.pydata.org/docs/reference/api/pandas.Series.apply.html)`
    [function to transform the data](https://pandas.pydata.org/docs/reference/api/pandas.Series.apply.html)
    column using your own, custom function [1]. To do this, you need to write a function
    that squares numbers, and you do so in the only way you know how:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This gets the job done, but it’s a little annoying and messy, especially for
    a Jupyter notebook. It doesn’t meld well with the one-line structure of most Pandas
    operations, and accordingly won’t look very nice when your colleagues review your
    notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'But do not despair, my friend, for the lambda function is here to save you.
    **Lambda functions —** or, more generally, anonymous functions — provide an alternative
    way to define functions in Python. And the best part is, you can write them in
    a single line! This is most easily seen via example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The above code is identical to our earlier definition of this function. Here
    are a few things you should know:'
  prefs: []
  type: TYPE_NORMAL
- en: The `lambda` keyword is analogous to the `def` keyword, letting Python know
    we want to define a function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The parameters for lambda functions are to the left of the colon, and the return
    statement is to the right of the colon (and doesn’t actually use the `return`
    keyword).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We don’t have to give the function a name, but if we wish to do so, we can do
    it using variable assignment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That last point is key. Using lambda functions lets us define a function and
    call it or pass it in as an argument to another function without ever having to
    give it a name. Let’s illustrate this by returning to our previous example and
    making it concrete.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s imagine we have the DataFrame `my_df` below, containing three people’s
    salaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this ridiculously idealistic world, employers have just announced that everyone’s
    salaries will be *squared*. We can update our DataFrame in a single line by using
    a lambda function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: And voila — endless riches! Perhaps a bit dramatic, but hopefully you will now
    remember what lambda functions are and how to use them. If you would like a more
    detailed discussion on their nuances and subtleties, I recommend checking out
    my [two-part article series that discusses lambda functions in great detail](/whats-in-a-lambda-c8cdc67ff107).
  prefs: []
  type: TYPE_NORMAL
- en: In this article, it’s time to move to the next topic.
  prefs: []
  type: TYPE_NORMAL
- en: The List Comprehension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you’re in the early stages of learning Python, it’s unlikely you’ve heard
    of the list comprehension, but I dare say you’ve probably heard of the for loop.
    You know, that thing that lets you loop over sequences and do with them as you
    please:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, we take a list of numbers and keep just the even ones.
    The code is simple enough — but because this is Python, and we love simplicity
    — we can make it even more elegant.
  prefs: []
  type: TYPE_NORMAL
- en: 'How? Enter the list comprehension. A **list comprehension** is a piece of Python
    syntax that effectively lets you run a for loop in a single line and put all the
    resulting elements into a newly constructed list. It’s a bit confusing in abstract
    terms, but becomes easier to see with an example. Here’s how you would accomplish
    the same thing as above using a list comprehension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This code basically just puts a for loop into one line. You still have the `for`
    keyword telling Python to loop through the original list, and the `item` at the
    beginning just tells Python what we want to include in the final list. In this
    case, we just want to include the original item, but *only if* it passes the evenness
    filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'What’s more, you can also apply an additional transformation after filtering.
    The code below will also square the result before putting it into our final list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see how list comprehensions can come in handy. If you do choose to
    use them, here are a few important points to keep in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: The filter will always be applied before the mapping transformation. In the
    above code, the filter checks for even numbers, and the mapping transformation
    squares the original items.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Like any for loop, a list comprehension can be used to iterate over any iterable
    sequence, not just lists. Why is it called a list comprehension then? Because
    it always *produces* a list as its end result.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, remember that while list comprehensions can generally be used to make
    your code more concise, they aren’t always necessary. A good rule of thumb is
    to only use them if they actually make your code more readable. Remember that
    readability isn’t necessarily a function of length — it’s possible for code that
    is simple to understand in a traditional for loop to become messy and confusing
    in a list comprehension.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[For more on list comprehensions, you can check out my two-part series on them
    as well.](/whats-in-a-list-comprehension-c5d36b62f5)'
  prefs: []
  type: TYPE_NORMAL
- en: Continuing and breaking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Two useful but occasionally overlooked features of the Python programming language
    (and other programming languages, as it happens) are the `continue` and `break`
    keywords.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start be defining what each of these do — then we’ll look at a couple
    concrete examples and talk about why you might want to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Continuing and breaking are both operations that can be performed from inside
    of a loop. They are similar in flavor, but fundamentally different in their effects.
    **Continue** can be used to immediately stop the *current* run of a loop and skip
    to the *next* run, whereas **break** is used to *leave the loop completely*.
  prefs: []
  type: TYPE_NORMAL
- en: As with most programming-related concepts, this is best seen with an example.
    Study the code snippet below carefully.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Do you see the difference? When we use `continue`, we simply skip over the `5`
    because Python immediately moves to the next iteration of the loop and thus never
    sees the `print` statement for `5`. Alternatively, when we use `break`, Python
    exits the loop completely, so nothing is printed out at all after we hit `4`.
  prefs: []
  type: TYPE_NORMAL
- en: Also, it’s worth noting that while we used a for loop in the example above,
    both `continue` and `break` work just as well with while loops.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a couple situations where you might need to use these charming little
    keywords:'
  prefs: []
  type: TYPE_NORMAL
- en: If you need to loop indefinitely until some condition is reached, it’s common
    practice to use `break` in combination with `while True:`. Normally, `while True:`
    would result in an infinite loop, but pairing it with `break` allows you to get
    around that.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Say you’re looping through a set of data that’s coming to you in real time (a
    **stream** of sorts, if you want to get technical). If you want to ignore some
    of the data for whatever reason but keep looping over the rest, then `continue`
    will be a very helpful keyword indeed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now then, let’s `continue`, shall we?
  prefs: []
  type: TYPE_NORMAL
- en: Getting User Input
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One could argue that this is not an essential technique in Python, but in programming
    in general. But since Python is a subset of programming in general, and it’s the
    subset I assume you’re learning on account of having made it this far into my
    article, I think this topic is fair game.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you’re unfamiliar with this in general, gathering **user input** is
    just a fancy programming term for letting whoever is using your program or application
    interact with it by (usually) typing in their own characters. In Python, this
    feature is accessed through the `input` function. You can try it out yourself
    in a live interpreter sessions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'There are three things happening here:'
  prefs: []
  type: TYPE_NORMAL
- en: First, I simply called the `input` function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This led to the cursor moving to the next line. At this point, I was able to
    type in `Hi I am a person`. We know that Python was expecting user input on this
    line because it didn’t error despite this not being valid Python code. We can
    also see that the interpreter prompt ( `>>>` ) is not present on this line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last line simply prints the whatever the user input was back to the terminal.
    Generally, this won’t happen, as you’ll probably want to save your user input
    into a variable so you can use it later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I know the above example is a bit vague, so here’s an example of how you might
    write some code in an actual program that makes use of this feature. We can usually
    pass a string into the `input` function as well, which will be used to prompt
    the user to type something in.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'And there you have it! Now you know how to interact directly with whoever uses
    your incredible programs. There’s just one more thing I should mention: *Everything*
    read in via user input is read in as a string. As a result, remember to convert
    numbers explicitly using `int` or `float`, lest you end up with some very annoying
    bugs!'
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts and Recap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s your Python beginner cheat sheet ([Part 2](https://medium.com/towards-data-science/4-common-python-mistakes-you-should-avoid-as-a-beginner-bd28feb6162b)):'
  prefs: []
  type: TYPE_NORMAL
- en: Write better Pandas code (or code in general, but especially Pandas code) by
    making use of one-line **lambda functions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get to know the for loop’s cousin, the **list comprehension**. It’s a useful,
    oft-overlooked feature that can optimize your code quality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maximize your loop usage with the help of `**break**` and `**continue**`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A plethora of programs will require you to use **user input**, so it’s in your
    best interest to get comfortable with it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Python is a language rich and full with features and treasures all collectively
    aimed at making *you* a better programmer.
  prefs: []
  type: TYPE_NORMAL
- en: So learn it, and learn it well.
  prefs: []
  type: TYPE_NORMAL
- en: '**Want to excel at Python?** [**Get exclusive, free access to my simple and
    easy-to-read guides here**](https://witty-speaker-6901.ck.page/0977670a91)**.
    Want to read unlimited stories on Medium? Sign up with my referral link below!**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://murtaza5152-ali.medium.com/?source=post_page-----84a64ece3461--------------------------------)
    [## Murtaza Ali - Medium'
  prefs: []
  type: TYPE_NORMAL
- en: Read writing from Murtaza Ali on Medium. PhD student at the University of Washington.
    Interested in human-computer…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: murtaza5152-ali.medium.com](https://murtaza5152-ali.medium.com/?source=post_page-----84a64ece3461--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] [https://pandas.pydata.org/docs/reference/api/pandas.Series.apply.html](https://pandas.pydata.org/docs/reference/api/pandas.Series.apply.html)'
  prefs: []
  type: TYPE_NORMAL
