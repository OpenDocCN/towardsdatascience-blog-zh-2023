- en: Using PyGWalker to Enhance Your Jupyter Notebook EDA Experience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/use-pygwalker-to-enhance-your-jupyter-notebook-eda-experience-d7a5ee358be9](https://towardsdatascience.com/use-pygwalker-to-enhance-your-jupyter-notebook-eda-experience-d7a5ee358be9)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An Introduction to the PyGWalker Library for Easy Data Visualisation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----d7a5ee358be9--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----d7a5ee358be9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d7a5ee358be9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d7a5ee358be9--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----d7a5ee358be9--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d7a5ee358be9--------------------------------)
    ·8 min read·Mar 1, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d1654e3d8430ddfdcc8f3c0cc172f965.png)'
  prefs: []
  type: TYPE_IMG
- en: PyGWalker showing multiple plots within the same view. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Creating effective and compelling data visualisations quickly and efficiently
    is a key part of the data science workflow. There are several options available
    to do this ranging from commercial software like Tableau to free alternatives
    like dedicated python libraries. The amount of skill and time needed to generate
    plots can vary between the different options.
  prefs: []
  type: TYPE_NORMAL
- en: Over the years, several python libraries have been developed to simplify the
    process of exploring your data. So simple in fact, that all you need to get started
    are 3–5 lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: One such library that has recently appeared on the EDA scene is PyGWalker.
  prefs: []
  type: TYPE_NORMAL
- en: '[PyGWalker](https://github.com/Kanaries/graphic-walker) (**Py**thon binding
    of **G**raphic **Walker**) is a python library that can help speed up the data
    analysis and visualisation workflow directly within a Jupyter notebook. It leverages
    the power of interactivity by providing an interface similar to the popular data
    analytics software called Tableau.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/00162996533ed4eb612a487218021c89.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a scatter plot in PygWalker using well log data. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: With this type of interface, we can drag and drop our variables into specific
    sections and quickly create a plot, filter it, and understand our data.
  prefs: []
  type: TYPE_NORMAL
- en: You can visit the GitHub repository for PyGWalker using the link below.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/Kanaries/pygwalker?source=post_page-----d7a5ee358be9--------------------------------)
    [## GitHub - Kanaries/pygwalker: PyGWalker: Turn your pandas dataframe into a
    Tableau-style User…'
  prefs: []
  type: TYPE_NORMAL
- en: PyGWalker can simplify your Jupyter Notebook data analysis and data visualization
    workflow, by turning your pandas…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/Kanaries/pygwalker?source=post_page-----d7a5ee358be9--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: This article will explore some of the features of PyGWalker using one of my
    favourite well log data sets (details at the end of the article).
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this article, the version of PygWalker is `0.1.4.6`,
    and some of the features illustrated may have been updated since this version.
  prefs: []
  type: TYPE_NORMAL
- en: Video Tutorial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A video version of this tutorial is available on my [YouTube channel](https://www.youtube.com/c/AndyMcDonald42)
    if you want to see PyGWalker in action.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and Running PyGWalker in Jupyter Lab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started with PyGWalker, we need to install it. We can do this by using
    `pip install pygwalker`or `conda install pygwalker`if you are using Anaconda.
  prefs: []
  type: TYPE_NORMAL
- en: After the PyGWalker library has been installed, we can open our Jupyter Notebook
    and then import PyGWalker alongside the [pandas](https://pandas.pydata.org/) library,
    which will be used to load our data from a CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After these have been imported, the next step is to load the data we are going
    to be using for this tutorial. We can load this data by calling upon the familiar
    `pd.read_csv()` function from pandas, and then pass in our CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now it is time to run PyGWalker, and we can do it with the following straightforward
    call.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once the cell has been run, we will get a very nice interface showing the available
    variables within the dataset. The variables will be split based on their type.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f4244560ed41e8b6535a0d1fc1d8ed94.png)'
  prefs: []
  type: TYPE_IMG
- en: PyGWalker User Interface directly within a Jupyter Notebook. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Scatter Plot with PygWalker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first plot we will create is a simple scatter plot of RHOB and NPHI — a
    commonly used plot within petrophysics.
  prefs: []
  type: TYPE_NORMAL
- en: Before we do this, we need to turn off the aggregation on the toolbar. This
    will allow us to plot the actual data values rather than any form of aggregation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2e6f96904f7918b59359a1e51804a2b9.png)'
  prefs: []
  type: TYPE_IMG
- en: Toggling the aggregation option off will allow the plotting of actual data values.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can select the variables we want to plot from the field list on the left.
    These can be clicked on and dragged into the x or y-axis boxes, depending on what
    axis you want the variables on.
  prefs: []
  type: TYPE_NORMAL
- en: You will also notice that the items within the field list have different icons.
    The blue document-like icons represent categorical data, and the purple hashtags
    represent numeric data.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, I have placed the NPHI on the x-axis and RHOB on the y-axis.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/00162996533ed4eb612a487218021c89.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a scatter plot in PygWalker using well log data. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the PygWalker Plot Size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the plot appears, it may look very small. However, we can increase the
    size of our plot very easily. This is done by going to the menu and changing the
    layout mode from auto to fixed.
  prefs: []
  type: TYPE_NORMAL
- en: Once that option has been changed, we can either change the size by clicking
    on the blue border that appears around our plot or by clicking on the cog icon
    next to the Layout Mode button and adjusting the sliders.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8555e7e2d16ee9f8582fc1da7c20d2ef.png)'
  prefs: []
  type: TYPE_IMG
- en: Changing the figure size within PygWalker. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Additional Variables to the PyGWalker Scatter Plot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also apply more variables to the plot to help us understand our data
    better. These additional variables can be categorical or numeric, and we can use
    them to add colour, opacity, size and shape.
  prefs: []
  type: TYPE_NORMAL
- en: In the example below, I have added the LITH variable, which will colour the
    data points by different lithologies. We can then hover over any point in the
    scatter plot and view its values.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a781e0f757480a286f33049dd90dec8e.png)'
  prefs: []
  type: TYPE_IMG
- en: Applying a categorical variable to the scatter plot created by PyGWalker. Image
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: If we use a numeric variable instead, we will get a colour bar along the side
    of the plot. The range of values for this axis can be changed by applying a filter
    — we will see how to do this shortly.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d4e08a793c345da37a74ea50fb422266.png)'
  prefs: []
  type: TYPE_IMG
- en: Applying a numeric variable to the scatter plot created by PyGWalker. Image
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Zooming and Moving Around the PygWalker Scatter Plot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we want to change the scales or zoom in on a section of data, we first have
    to click on the Auto Resizing button on the toolbar and then we can zoom in or
    out using the mouse scroll wheel.
  prefs: []
  type: TYPE_NORMAL
- en: We can then move around the plot by using the left mouse clicking, holding that
    button, and dragging the cursor around the plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e20373495604d16d61c0c17420581f5d.png)'
  prefs: []
  type: TYPE_IMG
- en: Zooming and moving around the scatter plot in PyGWalker. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: It would be nice to be able to change the scales on the plot manually by clicking
    on the axis or the corners of the axis, similar to how we can do it in a Plotly
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering Data By Categories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also filter the data using our variables.
  prefs: []
  type: TYPE_NORMAL
- en: When we filter using categorical data, we click and drag the variable we want
    into the filters section and then deselect the categories we do not want to see.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eab93de92f6290f933b68c6222223752.png)'
  prefs: []
  type: TYPE_IMG
- en: Applying categorical filters in PygWalker. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: When filtering using a numeric variable, we get a slider where we can control
    the min and max range. It does not appear as if we can edit the values manually,
    which would be a nice feature to have.
  prefs: []
  type: TYPE_NORMAL
- en: A nice feature is that we can we can apply multiple filters by adding another
    variable into the filter box and setting the range or selecting the categories
    we want.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/37e54c8c6170fb5ea1f422b39bbf73fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Applying numerical filters to data using PygWalker. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Line Plot with PyGWalker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several different plot types available within PyGWalker.
  prefs: []
  type: TYPE_NORMAL
- en: When adding data and the Mark Type is set to Auto, the library will try to find
    the best plot for your data. However, this may not always be the most appropriate
    chart type.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the chart type by clicking the Mark Type button on the toolbar
    and then selecting the type you want.
  prefs: []
  type: TYPE_NORMAL
- en: The example below shows how you can create a line plot with two variables.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0348c57c0c4267e82e2c400494a99b50.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a line plot in PyGWalker. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing Raw Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PyGWalker provides a nice way to view the raw data within your dataframe and
    change the data type if required. This is handy if a column has been accidentally
    identified as the wrong data type and you need to change it quickly.
  prefs: []
  type: TYPE_NORMAL
- en: It would be nice to be able to do more on the data view, such as filtering the
    data or applying colour scales to the columns, as sometimes this can help reveal
    any issues within the data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d1c4314b584eded28f4038fde054ab37.png)'
  prefs: []
  type: TYPE_IMG
- en: The raw data view within PyGWalker. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PyGWalker has provided one of the most interactive experiences and nicest-looking
    setups I have come across with EDA libraries in a Jupyter notebook. The interface
    provides an easy way for non-coders or beginner coders to start creating charts
    immediately.
  prefs: []
  type: TYPE_NORMAL
- en: You should give it a try for your next project. Check out my article below if
    you want to see other powerful Python EDA libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/5-powerful-python-libraries-you-need-to-know-to-enhance-your-eda-process-f0100d563c16?source=post_page-----d7a5ee358be9--------------------------------)
    [## 5 Powerful Python Libraries For EDA You Need to Know About'
  prefs: []
  type: TYPE_NORMAL
- en: Leverage the Power of Python to Explore and Understand Your Data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/5-powerful-python-libraries-you-need-to-know-to-enhance-your-eda-process-f0100d563c16?source=post_page-----d7a5ee358be9--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'The dataset used in this article is a subset of a training dataset used as
    part of a Machine Learning competition run by Xeek and FORCE 2020 *(Bormann et
    al., 2020)*. It is released under a NOLD 2.0 licence from the Norwegian Government,
    details of which can be found here: [Norwegian Licence for Open Government Data
    (NLOD) 2.0](https://data.norge.no/nlod/en/2.0/). The full dataset can be accessed
    [here](https://doi.org/10.5281/zenodo.4351155).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The full reference for the dataset is:'
  prefs: []
  type: TYPE_NORMAL
- en: Bormann, Peter, Aursand, Peder, Dilib, Fahad, Manral, Surrender, & Dischington,
    Peter. (2020). FORCE 2020 Well well log and lithofacies dataset for machine learning
    competition [Data set]. Zenodo. [http://doi.org/10.5281/zenodo.4351156](http://doi.org/10.5281/zenodo.4351156)
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)*Alternatively,
    you can* [***sign up for my newsletter***](https://fabulous-founder-2965.ck.page/2ca286e572)
    *to get additional content straight into your inbox for free.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Secondly, you can get the full Medium experience and support me and thousands
    of other writers by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the fantastic Medium articles and the chance
    to make money with your writing. If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support!*'
  prefs: []
  type: TYPE_NORMAL
