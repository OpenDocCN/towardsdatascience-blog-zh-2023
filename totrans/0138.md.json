["```py\nimport pandas as pd\n\n# create Series\nblood_type = pd.Series([\"A\", \"B\", \"AB\", \"0\"])\n\nprint(blood_type)\n# output\n0     A\n1     B\n2    AB\n3     0\ndtype: object\n\n# create Series with category data type\nblood_type = pd.Series([\"A\", \"B\", \"AB\", \"0\"], dtype=\"category\")\n\nprint(blood_type)\n# output\n0     A\n1     B\n2    AB\n3     0\ndtype: category\nCategories (4, object): ['0', 'A', 'AB', 'B']\n```", "```py\n# create a DataFrame with two columns\ndf = pd.DataFrame(\n    {\n        \"name\": [\"Jane\", \"John\", \"Ashley\", \"Matt\"],\n        \"blood_type\": [\"A\", \"B\", \"AB\", \"0\"]\n    }\n)\n\n# check the data types\ndf.dtypes\n# output\nname          object\nblood_type    object\ndtype: object\n\n# convert the blood_type column to category\ndf[\"blood_type\"] = df[\"blood_type\"].astype(\"category\")\n\n# check the data types again\ndf.dtypes\n# output\nname            object\nblood_type    category\ndtype: object\n```", "```py\n# create Series with category dtype\nbrands = pd.Series([\"Ford\", \"Toyota\", \"BMW\"], dtype=\"category\")\n\nprint(brands)\n# output\n0      Ford\n1    Toyota\n2       BMW\ndtype: category\nCategories (3, object): ['BMW', 'Ford', 'Toyota']\n```", "```py\nbrands.cat.categories\n\n# output\nIndex(['BMW', 'Ford', 'Toyota'], dtype='object')\n```", "```py\n# create Series with category data type\nbrands = pd.Series(\n    pd.Categorical(\n        [\"Ford\", \"Toyota\", \"BMW\"], \n        categories=[\"Ford\", \"Toyota\", \"BMW\", \"Honda\"]\n    )\n)\n\nprint(brands)\n# output\n0      Ford\n1    Toyota\n2       BMW\ndtype: category\nCategories (4, object): ['Ford', 'Toyota', 'BMW', 'Honda']\n```", "```py\n# create a Series with category data type\nbrands = pd.Series([\"Ford\", \"Toyota\", \"BMW\"], dtype=\"category\")\n\nprint(brands)\n# output\n0      Ford\n1    Toyota\n2       BMW\ndtype: category\nCategories (3, object): ['BMW', 'Ford', 'Toyota']\n\n# Add a new item of a different category\nbrands[3] = \"Honda\"\n\nprint(brands)\n# output\n0      Ford\n1    Toyota\n2       BMW\n3     Honda\ndtype: object\n```", "```py\n# create a Series with category data type\nbrands = pd.Series([\"Ford\", \"Toyota\", \"BMW\"], dtype=\"category\")\n\n# replace the third value with Honda\nbrands[2] = \"Honda\"\n\n# output\nTypeError: Cannot setitem on a Categorical with a new category (Honda), set the categories first\n```", "```py\n# add Honda as a category\nbrands = brands.cat.add_categories(\"Honda\")\n\n# replace the third value with Honda\nbrands[2] = \"Honda\"\n\nprint(brands)\n\n# output\n0      Ford\n1    Toyota\n2     Honda\ndtype: category\nCategories (4, object): ['BMW', 'Ford', 'Toyota', 'Honda'] \n```", "```py\n# create Series with category data type\nsizes = pd.Series([\"S\", \"M\", \"L\"], dtype=\"category\")\n\n# add two new categories\nsizes = sizes.cat.add_categories([\"XS\", \"XL\"])\n\nprint(sizes)\n\n# output\n0    S\n1    M\n2    L\ndtype: category\nCategories (5, object): ['L', 'M', 'S', 'XS', 'XL']\n```", "```py\n# create Series with category data type\nsizes = pd.Series([\"S\", \"M\", \"L\", \"XL\", \"XXL\"], dtype=\"category\")\n\n# remove XL and XXL categories\nsizes = sizes.cat.remove_categories([\"XL\", \"XXL\"])\n\nprint(sizes)\n\n# output\n0      S\n1      M\n2      L\n3    NaN\n4    NaN\ndtype: category\nCategories (3, object): ['L', 'M', 'S']\n```", "```py\n# create Series with category data type\nsizes = pd.Series([\"S\", \"M\", \"M\", \"L\", \"L\", \"S\"], dtype=\"category\")\n\n# extract categories\nsizes.cat.categories \n\n# output\nIndex(['L', 'M', 'S'], dtype='object')\n\n# extract categories as a list\nlist(sizes.cat.categories)\n\n# output\n['L', 'M', 'S']\n```", "```py\n# create Series with category data type\nsizes = pd.Series([\"L\", \"S\", \"XL\", \"M\", \"L\", \"S\"], dtype=\"category\")\n\n# convert it to ordered\nsizes = sizes.cat.as_ordered()\n\nprint(sizes)\n\n# output\n0     L\n1     S\n2    XL\n3     M\n4     L\n5     S\ndtype: category\nCategories (4, object): ['L' < 'M' < 'S' < 'XL']\n```", "```py\n# convert it to ordered\nsizes = sizes.cat.reorder_categories([\"S\", \"M\", \"L\", \"XL\"])\n\nprint(sizes)\n\n# output\n0     L\n1     S\n2    XL\n3     M\n4     L\n5     S\ndtype: category\nCategories (4, object): ['S' < 'M' < 'L' < 'XL']\n```", "```py\n# convert it to unordered\nsizes = sizes.cat.as_unordered()\n\nprint(sizes)\n\n# output\n0     L\n1     S\n2    XL\n3     M\n4     L\n5     S\ndtype: category\nCategories (4, object): ['L', 'M', 'S', 'XL']\n```", "```py\n# create Series with category data type\ndivisions = pd.Series(pd.Categorical(\n\n    values=[\"C\", \"C\", \"A\", \"B\", \"A\", \"C\", \"A\"], \n    categories=[\"C\", \"B\", \"A\"], \n    ordered=True\n\n))\n\nprint(divisions)\n\n# output\n0    C\n1    C\n2    A\n3    B\n4    A\n5    C\n6    A\ndtype: category\nCategories (3, object): ['C' < 'B' < 'A']\n```", "```py\n# rename the categories\ndivisions = divisions.cat.rename_categories([\"group C\", \"group B\", \"group A\"])\n\nprint(divisions)\n\n# output\n0    group C\n1    group C\n2    group A\n3    group B\n4    group A\n5    group C\n6    group A\ndtype: category\nCategories (3, object): ['group C' < 'group B' < 'group A']\n```", "```py\nimport numpy as np\n\n# create a DataFrame with 100000 rows\ncars = pd.DataFrame({\n\n    \"id\": np.arange(1, 100001),\n    \"brand\": [\"Ford\", \"Toyota\", \"BMW\", \"Tesla\"] * 25000,\n    \"price\": np.random.randint(10000, 20000, size=100000)\n\n})\n\n# add a brand_categorical column\ncars[\"brand_categorical\"] = cars[\"brand\"].astype(\"category\")\n\n# check the data types\ncars.dtypes\n\n# output\nid                      int64\nbrand                  object\nprice                   int64\nbrand_categorical    category\ndtype: object\n```", "```py\n# check the data types\ncars.memory_usage()\n\n# output\nIndex                   132\nid                   800000\nbrand                800000\nprice                800000\nbrand_categorical    100204\ndtype: int64\n```"]