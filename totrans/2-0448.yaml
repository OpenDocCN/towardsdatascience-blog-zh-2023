- en: Building Comprehension Pipelines in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中构建理解管道
- en: 原文：[https://towardsdatascience.com/building-comprehension-pipelines-in-python-ec68dce53d03](https://towardsdatascience.com/building-comprehension-pipelines-in-python-ec68dce53d03)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/building-comprehension-pipelines-in-python-ec68dce53d03](https://towardsdatascience.com/building-comprehension-pipelines-in-python-ec68dce53d03)
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON 编程
- en: Comprehension pipelines are a Python-specific idea for building pipelines
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解管道是构建管道的一种 Python 特有的理念
- en: '[](https://medium.com/@nyggus?source=post_page-----ec68dce53d03--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----ec68dce53d03--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ec68dce53d03--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ec68dce53d03--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----ec68dce53d03--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus?source=post_page-----ec68dce53d03--------------------------------)[![马尔钦·科扎克](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----ec68dce53d03--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ec68dce53d03--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ec68dce53d03--------------------------------)
    [马尔钦·科扎克](https://medium.com/@nyggus?source=post_page-----ec68dce53d03--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ec68dce53d03--------------------------------)
    ·12 min read·Feb 17, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----ec68dce53d03--------------------------------)
    ·阅读时间12分钟·2023年2月17日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/686b7a1a7f83a53912af9f9378a8391c.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/686b7a1a7f83a53912af9f9378a8391c.png)'
- en: Comprehension pipelines take you straight to the goal. Photo by [Anika Huizinga](https://unsplash.com/@iam_anih?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 理解管道能直接带你到达目标。图片来源于[安妮卡·胡辛加](https://unsplash.com/@iam_anih?utm_source=medium&utm_medium=referral)在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 'Generator pipelines offer a Pythonic way to create software pipelines, that
    is, chains of operations in which each operation but the first one takes the output
    of the previous operation as its input:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器管道提供了一种 Pythonic 的方式来创建软件管道，即操作链，其中每个操作（除了第一个）都将前一个操作的输出作为其输入：
- en: '[](/building-generator-pipelines-in-python-8931535792ff?source=post_page-----ec68dce53d03--------------------------------)
    [## Building Generator Pipelines in Python'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/building-generator-pipelines-in-python-8931535792ff?source=post_page-----ec68dce53d03--------------------------------)
    [## 在 Python 中构建生成器管道'
- en: This article proposes an elegant way to build generator pipelines
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这篇文章提出了一种优雅的方式来构建生成器管道
- en: towardsdatascience.com](/building-generator-pipelines-in-python-8931535792ff?source=post_page-----ec68dce53d03--------------------------------)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/building-generator-pipelines-in-python-8931535792ff?source=post_page-----ec68dce53d03--------------------------------)
- en: They enable you to apply transforming programming as described by Thomas and
    Hunt in their great book *The Pragmatic Programmer:*
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 它们使你能够应用转换编程，如托马斯和亨特在他们伟大的书籍*程序员的修炼*中所描述的那样
- en: '[](https://en.wikipedia.org/wiki/The_Pragmatic_Programmer?source=post_page-----ec68dce53d03--------------------------------)
    [## The Pragmatic Programmer - Wikipedia'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://en.wikipedia.org/wiki/The_Pragmatic_Programmer?source=post_page-----ec68dce53d03--------------------------------)
    [## 程序员的修炼 - 维基百科'
- en: 'From Wikipedia, the free encyclopedia The Pragmatic Programmer: From Journeyman
    to Master is a book about computer…'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 来自维基百科，百科全书《程序员的修炼：从学徒到大师》是一本关于计算机的书…
- en: en.wikipedia.org](https://en.wikipedia.org/wiki/The_Pragmatic_Programmer?source=post_page-----ec68dce53d03--------------------------------)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: en.wikipedia.org](https://en.wikipedia.org/wiki/The_Pragmatic_Programmer?source=post_page-----ec68dce53d03--------------------------------)
- en: A typical generator pipeline in Python uses a generator at each step of the
    pipeline. In other words, each step of the pipeline is constructed as a generator.
    Thomas and Hunt discuss pipelines achieved via the pipe operator, available in
    many programming languages. While Python does not have a built-in pipe operator,
    it can be easily created because some operators are available for overloading
    in class definitions. We can see this done in [the](https://github.com/JulienPalard/Pipe)
    `[Pipe](https://github.com/JulienPalard/Pipe)` [Python package](https://github.com/JulienPalard/Pipe),
    which uses the `|` operator.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的典型生成器管道在管道的每一步都使用生成器。换句话说，管道的每一步都构建为一个生成器。Thomas 和 Hunt 讨论了通过管道操作符实现的管道，这在许多编程语言中都可以使用。虽然Python没有内置的管道操作符，但由于某些操作符可以在类定义中重载，因此可以很容易地创建它。我们可以在[这个](https://github.com/JulienPalard/Pipe)
    `[Pipe](https://github.com/JulienPalard/Pipe)` [Python包](https://github.com/JulienPalard/Pipe)中看到这一点，该包使用了`|`操作符。
- en: In [the above-mentioned article](/building-generator-pipelines-in-python-8931535792ff),
    I showed that using generators to create each step of the pipeline can introduce
    a visual clutter that decreases code readability. In addition, when each run of
    a pipeline is fast, this approach shows poor performance. Therefore, I proposed
    an alternative, efficient way of building generator pipelines that is more readable
    than the classical generator pipeline. The method combines function composition
    with a generator. In the future, I will show you how to create pipelines using
    a pipe operator.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在[上述文章](/building-generator-pipelines-in-python-8931535792ff)中，我展示了使用生成器来创建管道的每一步可能引入的视觉混乱，从而降低代码的可读性。此外，当管道的每次运行都很快时，这种方法的性能较差。因此，我提出了一种替代的、比经典生成器管道更具可读性的高效构建生成器管道的方法。该方法将函数组合与生成器结合使用。未来，我将向您展示如何使用管道操作符创建管道。
- en: 'Nonetheless, generator expressions are a special case of comprehensions, as
    I wrote in this article:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，正如我在本文中所写的那样，生成器表达式是推导的一个特例。
- en: '[](/a-guide-to-python-comprehensions-4d16af68c97e?source=post_page-----ec68dce53d03--------------------------------)
    [## A Guide to Python Comprehensions'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/a-guide-to-python-comprehensions-4d16af68c97e?source=post_page-----ec68dce53d03--------------------------------)
    [## Python 推导指南'
- en: Learn the intricacies of list comprehensions (listcomps), set comprehensions
    (setcomps), dictionary comprehensions…
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学习列表推导（listcomps）、集合推导（setcomps）、字典推导等的复杂性。
- en: towardsdatascience.com](/a-guide-to-python-comprehensions-4d16af68c97e?source=post_page-----ec68dce53d03--------------------------------)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/a-guide-to-python-comprehensions-4d16af68c97e?source=post_page-----ec68dce53d03--------------------------------)'
- en: So, why should we limit ourselves to generator pipelines? Why not listcomp pipelines
    or dictcomp pipelines or setcomp pipelines?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么我们要把自己局限于生成器管道呢？为什么不考虑列表推导管道、字典推导管道或集合推导管道呢？
- en: This question has been bothering me for some time, but I treated it like a tiresome
    fly buzzing over my head and refusing to let me rest, buzzing and buzzing and
    buzzing… Finally, I gave up rejecting the idea and decided at least to bring it
    up for consideration. It was about two months ago, during a pleasant walk with
    my two dogs in the woods. A beautiful winter, snow, frost, strong wind — and me
    and the dogs in the woods, walking one of my favorite paths and thinking (well,
    me, not the dogs) about building pipelines using other comprehensions than generator
    expressions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题困扰了我一段时间，但我把它当作烦人的苍蝇在头顶嗡嗡作响，无法让我安宁，不停地嗡嗡嗡……最终，我放弃了拒绝这个想法，并决定至少提出讨论。大约两个月前，在一次愉快的冬季散步中，我带着我的两只狗走在森林里。一个美丽的冬天，雪、霜、强风——我和狗狗们在树林里，走在我最喜欢的小路上，思考（好吧，是我，不是狗）如何使用其他推导来构建管道，而不仅仅是生成器表达式。
- en: This article is the result of this walk. I propose a generalization of generator
    pipelines into what I call *comprehension pipelines*, of which generator pipelines
    are just a specific case.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本文是这次探讨的结果。我提出了一种将生成器管道推广到我称之为*推导管道*的概念，其中生成器管道只是一个特例。
- en: Example of a generator pipeline
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成器管道示例
- en: 'For consistency and clarity, I will use the same example of a generator pipeline
    I used in the previous article. Do note that I revised type annotations a little
    bit. The generator pipeline looked as follows¹:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持一致性和清晰性，我将使用在上一篇文章中用到的相同生成器管道示例。请注意，我稍微修改了一些类型注解。生成器管道如下¹：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `get_generator_pipeline()` function — previously named `get_pipeline()`
    — returns a generator pipeline; that is, a generator that lazily (on demand) calculates
    the pipeline for the subsequent elements of the `items` iterable. We can evaluate
    the generator any way we want, e.g., using `list()`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_generator_pipeline()`函数——之前称为`get_pipeline()`——返回一个生成器管道；也就是说，一个生成器，它懒惰地（按需）计算`items`可迭代对象的后续元素的管道。我们可以用任何我们想要的方式评估生成器，例如，使用`list()`：'
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If we want to get a list, however, it makes no sense to use a generator expression
    — the corresponding list comprehension would do better! So, why should we use
    a generator pipeline and not a list-comprehension pipeline from the very beginning?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想得到一个列表，那么使用生成器表达式就没有意义——对应的列表推导式会更好！那么，为什么一开始就不使用列表推导管道而使用生成器管道呢？
- en: When to use generator pipelines? And when not to?
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么时候使用生成器管道？什么时候不使用？
- en: 'Generator pipelines have one big advantage, and it’s the same as the main advantage
    of generators in general: lazy evaluation. When the `items` iterable is huge,
    or when the the pipeline’s steps produce large objects, a generator pipeline will
    help us avoid problems with running out of memory.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器管道有一个重要的优势，这与生成器的主要优势相同：延迟评估。当`items`可迭代对象很大，或者管道的步骤生成大型对象时，生成器管道将帮助我们避免内存不足的问题。
- en: But what if the `items` iterable is short and the output iterable does not consume
    much memory? Why should we worry about memory when we’re certain there’s nothing
    to worry about? What’s more, we know that a generator expression can be slower
    than the corresponding list comprehension — with one exception, when the number
    (or size) of items is too big to keep and process all of them in the memory.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果`items`可迭代对象很短且输出可迭代对象占用的内存不多，那我们为何要担心内存问题呢？更何况，我们知道生成器表达式可能比对应的列表推导式要慢——唯一的例外是，当项的数量（或大小）大到无法在内存中全部保留和处理时。
- en: 'Consider the following example, quite different from the above one:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下这个与上面示例相当不同的例子：
- en: We have `paths`, a list of paths to files.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有`paths`，一个包含文件路径的列表。
- en: In each step of the pipeline, a text file is read from a path, and the text
    is processed.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在管道的每一步中，从一个路径读取一个文本文件，并对文本进行处理。
- en: As a result, an iterable of the processed texts is returned.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，返回的是处理后的文本的可迭代对象。
- en: In this case, the output iterable will be far larger than the input iterable.
    Thus, a generator pipeline will work best here when the number of paths is huge
    — because it would be memory-inefficient, if possible at all, to return a long
    list of long texts. We need the pipeline to return a generator; hence, a generator
    pipeline.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，输出可迭代对象将远大于输入可迭代对象。因此，当路径数量庞大时，生成器管道在这里效果最好——因为返回一个长文本的长列表将会非常低效，甚至可能无法实现。我们需要管道返回一个生成器，因此需要生成器管道。
- en: Now, imagine another pipeline. We have the same iterable of paths, but our processing
    of the texts is different. Before, we returned long texts. Now, the only information
    we need from each text is whether or not the word “Python” occurs in a text; hence,
    for each text we will need a Boolean value and nothing more. So, for the list
    of paths, we will get a list of the same length with Boolean values. What’s the
    advantage of the generator pipeline here? None.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，想象另一个管道。我们有相同的路径可迭代对象，但我们对文本的处理不同了。之前，我们返回长文本。现在，我们只需要每个文本中是否包含“Python”这个词的信息；因此，对于每个文本，我们只需要一个布尔值。对于路径列表，我们将得到一个长度相同的布尔值列表。生成器管道在这里的优势是什么？没有。
- en: 'What’s more, returning just a Boolean value would make little sense, if any:
    it’d be difficult to link a particular value with the corresponding text. Hence,
    it’d be best to return a dictionary with paths as keys and their Boolean values
    as values. This would make a pipeline based on a dictionary. Alternatively, we
    could return a list of paths with the word “Python” in the text; such output,
    however, would omit the other paths, and so we would lose part of the information
    — and sometimes we may need it.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，仅返回布尔值几乎没有意义：很难将特定的值与相应的文本联系起来。因此，最好返回一个以路径为键，布尔值为值的字典。这将使管道基于字典。或者，我们可以返回一个包含文本中“Python”单词的路径列表；然而，这种输出会忽略其他路径，从而丢失部分信息——有时我们可能需要这些信息。
- en: Building comprehension pipelines
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立理解管道
- en: 'We’ve finally come to the main topic of this article: comprehension pipelines,
    and how to build them. The examples above showed how we can decide whether or
    not we need a generator pipeline or a different type of pipeline. In addition
    to generator pipelines, we can build'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于来到了本文的主题：理解管道以及如何构建它们。上述示例展示了我们如何决定是否需要生成器管道或其他类型的管道。除了生成器管道，我们还可以构建
- en: list-comprehension pipelines, *aka* listcomp pipelines
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表理解管道，*即* listcomp管道
- en: set-comprehension pipelines, *aka* setcomp pipelines
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合理解管道，*即* setcomp管道
- en: dictionary-comprehension pipelines, *aka* dictcomp pipelines
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字典理解管道，*即* dictcomp管道
- en: Below, I will rewrite the generator pipeline that uses the `calculate()` function
    using these three other types of comprehension pipelines. For the sake of completeness,
    I will repeat the code of the generator pipeline. I will also change the imports
    from `typing`, as this time we need more types than before, when we created only
    a generator pipeline.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我将使用这三种其他类型的理解管道重写使用`calculate()`函数的生成器管道。为了完整性，我将重复生成器管道的代码。我还会改变`typing`的导入，因为这次我们需要比之前更多的类型，之前我们只创建了一个生成器管道。
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: I used a particular version of a dictionary pipeline, but note that we can build
    also other versions, depending on what we want to use as the dictionary’s keys.
    We will see an example in a moment.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了特定版本的字典管道，但请注意，我们也可以构建其他版本，具体取决于我们希望将什么用作字典的键。稍后我们将看到一个示例。
- en: Below, we will summarize these basic types of pipelines, including the generator
    pipeline. Do remember that they differ in *the output*, as all of them can take
    the input of the same type — any iterable will do.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将总结这些基本类型的管道，包括生成器管道。请记住，它们在*输出*上有所不同，因为它们都可以接受相同类型的输入——任何可迭代对象都可以。
- en: Generator pipeline
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成器管道
- en: Takes any iterable (`items`) as input.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以任何可迭代对象（`items`）作为输入。
- en: Returns a generator as a pipeline.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回一个生成器作为管道。
- en: Can use a generator expression of any form and complexity (e.g., it can include
    several levels of `if` filters and `for` loops).
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用任何形式和复杂度的生成器表达式（例如，它可以包含多个级别的`if`过滤器和`for`循环）。
- en: Can be evaluated on demand.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以按需求值。
- en: List-comprehension pipeline, aka listcomp pipeline
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表理解管道，也称为listcomp管道
- en: Takes any iterable (`items`) as input.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以任何可迭代对象（`items`）作为输入。
- en: Runs a list comprehension as a pipeline and so returns a list.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行列表理解作为管道，因此返回一个列表。
- en: Can use a list comprehension of any complexity.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用任何复杂度的列表理解。
- en: Is evaluated greedily.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是贪婪求值的。
- en: Set-comprehension pipeline, aka setcomp pipeline
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合理解管道，也称为setcomp管道
- en: Takes any iterable (`items`) as input.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以任何可迭代对象（`items`）作为输入。
- en: Runs a set comprehension as a pipeline and so returns a set.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行集合理解作为管道，因此返回一个集合。
- en: Can use a set comprehension of any complexity.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用任何复杂度的集合理解。
- en: As the final output is a set, it will contain unique results. So, if two or
    more items from the iterable return the same output, its repeated instances will
    be skipped.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于最终输出是一个集合，它将包含唯一的结果。因此，如果可迭代对象中的两个或更多项返回相同的输出，它们的重复实例将被跳过。
- en: Is evaluated greedily.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是贪婪求值的。
- en: Dictionary-comprehension pipeline, aka dictcomp pipeline
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字典理解管道，也称为dictcomp管道
- en: Takes any iterable (`items`) as input.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以任何可迭代对象（`items`）作为输入。
- en: Runs a dictionary comprehension as a pipeline and so returns a dictionary.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行字典理解作为管道，因此返回一个字典。
- en: Can use a dictionary comprehension of any complexity.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用任何复杂度的字典理解。
- en: For a particular `item`, a key-value pair is returned; the key does not have
    to be `item` — it can be anything that results from `item` or any processing of
    it.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于特定的`item`，返回一个键值对；键不必是`item`——它可以是从`item`或其任何处理结果中得到的任何东西。
- en: Since the pipeline returns a dictionary, you should use unique keys; otherwise,
    the results for the same keys will be overwritten and the last key-value pair
    will be kept.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于管道返回一个字典，你应该使用唯一的键；否则，相同键的结果将被覆盖，最后一个键值对将被保留。
- en: Is evaluated greedily.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是贪婪求值的。
- en: Examples
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例
- en: 'Here, let’s see how the above pipelines behave. We will do it for the following
    iterable:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，让我们看看上述管道的行为。我们将对以下可迭代对象进行操作：
- en: '[PRE3]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'I show the examples as doctests. You can read more about this fantastic built-in
    Python package for documentation testing in the following *Towards Data Science*
    article:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我以doctests的形式展示这些示例。你可以在以下*Towards Data Science*文章中阅读更多关于这个用于文档测试的出色Python内置包的内容：
- en: '[](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----ec68dce53d03--------------------------------)
    [## Python Documentation Testing with doctest: The Easy Way'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----ec68dce53d03--------------------------------)
    [## Python 文档测试使用 doctest：简单的方法'
- en: doctest allows for documentation, unit and integration testing, and test-driven
    development.
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: doctest 允许进行文档、单元和集成测试，以及测试驱动开发。
- en: towardsdatascience.com](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----ec68dce53d03--------------------------------)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----ec68dce53d03--------------------------------)'
- en: In the appendix at the end of the article, you will find the whole script for
    this exercise.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在文章末尾的附录中，你会找到这个练习的完整脚本。
- en: Generator pipeline
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成器管道
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As expected, the generator pipeline returns a generator. So, for the moment,
    we cannot see the output, and to do so, we need to evaluate its values. How to
    do that depends on the pipeline and the problem being solved. Here, we will use
    a good ol’ `for` loop:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，生成器管道返回一个生成器。因此，目前我们无法看到输出，要做到这一点，我们需要评估其值。如何做取决于管道和解决的问题。在这里，我们将使用一个简单的
    `for` 循环：
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Do remember that `gen_pipeline` is a regular generator, even if created using
    a generator pipeline. As a generator, after evaluating (which we did in the `for`
    loop above), it’s empty. It’s still there, but you cannot use it to see the output
    anymore:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，即使 `gen_pipeline` 是使用生成器管道创建的，它仍然是一个普通的生成器。作为生成器，在评估之后（我们在上面的 `for` 循环中做了），它是空的。它仍然存在，但你不能再用它来查看输出：
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Listcomp pipeline
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Listcomp 管道
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: A listcomp pipeline evaluates the pipeline greedily, so when being created.
    We can already see the results, and of course you can do that as many times as
    you want, unlike the generator pipeline above.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Listcomp 管道会贪婪地评估管道，因此在创建时就可以看到结果。你可以根据需要多次这样做，这与上面的生成器管道不同。
- en: 'Like before, we can see that the first two values are exactly the same. This
    should be expected, as the first two elements of `items` are the same… or aren’t
    they? The first one is an integer, `1`, while the second one is a float, `1.0`.
    Theoretically, these are *not* the same objects, as they have different types.
    Python, however, treats them as equal:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 像之前一样，我们可以看到前两个值完全相同。这是可以预期的，因为 `items` 的前两个元素是相同的……或者不是？第一个是整数 `1`，而第二个是浮点数
    `1.0`。理论上，这些 *不是* 相同的对象，因为它们的类型不同。然而，Python 将它们视为相等：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So, how will setcomp and dictcomp pipelines behave? We’ll see that below.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，`setcomp` 和 `dictcomp` 管道会有什么表现呢？我们将在下文中看到。
- en: Setcomp pipeline
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Setcomp 管道
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Ha! Note that while `items` contain five elements, the output above contains
    only four. This is not unexpected — as we saw above, Python treats `1` and `1.0`
    as equal, so the results of evaluating `calculate(x)` for these two values are
    the same. And since they are the same, the resulting set contains only one output
    value, that is, `245.77`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 哈！注意虽然 `items` 包含五个元素，但上述输出仅包含四个。这并不意外——正如我们之前看到的，Python 将 `1` 和 `1.0` 视为相等，因此对这两个值评估
    `calculate(x)` 的结果是相同的。由于它们是相同的，结果集合中只包含一个输出值，即 `245.77`。
- en: Remember this when using sets and setcomp pipelines. Thus, use setcomp pipelines
    when you want to achieve such behavior — in other words, use this type of pipeline
    when you want to keep only unique results.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用集合和 setcomp 管道时请记住这一点。因此，当你希望实现这种行为时——换句话说，当你希望只保留唯一结果时——请使用 setcomp 管道。
- en: Dictcomp pipelines
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dictcomp 管道
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Like with sets, we got four elements of the resulting dictionary. As you see,
    when you want to use both `1` and `1.0` as keys in a dictionary, they are joined
    into one key, `1` in our case. If this is what you need to get, you’re done here.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 与集合一样，我们得到了结果字典的四个元素。如你所见，当你希望在字典中使用 `1` 和 `1.0` 作为键时，它们会合并成一个键，在我们的例子中是 `1`。如果这正是你想要的结果，那么你完成了。
- en: 'What if you need the both of them? You can create string keys, for instance.
    Does indeed Python treat `str(1)` and `str(1.0)` as different? Let’s see:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要它们两个怎么办？你可以创建字符串键。例如，Python 是否将 `str(1)` 和 `str(1.0)` 视为不同的？让我们来看看：
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Yes, it does! We need to redefine the pipeline function, then:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，确实如此！我们需要重新定义管道函数，然后：
- en: '[PRE12]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let’s see this new dictcomp pipeline in action:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个新的 dictcomp 管道如何运作：
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The resulting dictionary has five elements, as we wanted it to have.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 结果字典包含五个元素，正如我们所期望的那样。
- en: Conclusion
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, I proposed the generalization of generator pipelines to comprehension
    pipelines. While generator expressions are commonly used to create pipelines,
    the resulting generator pipelines are a specific case of comprehension pipelines.
    When you create a pipeline, consider which type of pipeline best represents your
    needs — and use it. No need to stick to generator pipelines only because the term
    “generator pipelines” is common in the Python community. You’re free to use whatever
    suits your goal.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我提出了将生成器管道的一般化扩展到理解管道。虽然生成器表达式通常用于创建管道，但生成的生成器管道是理解管道的一个特例。当你创建一个管道时，请考虑哪种类型的管道最能代表你的需求——并使用它。不必因为“生成器管道”这个术语在Python社区中很常见而仅仅坚持使用生成器管道。你可以自由使用任何适合你目标的方法。
- en: 'In this article, we used simple examples. I did this for purpose: this simplicity
    helped us focus on the main topic of this article — comprehension pipelines. In
    the future, I plan to show you more advanced examples representing real-life scenarios.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们使用了简单的示例。我这样做是有目的的：这种简洁性帮助我们集中关注本文的主要话题——理解管道。未来，我计划展示更多代表现实生活场景的高级示例。
- en: 'Note that the functions creating the final comprehension — in our examples,
    `get_generator_pipeline()`, `get_listcomp_pipeline()`, `get_setcomp_pipeline()`,
    `get_dictcomp_pipeline()` and `get_dictcomp_pipeline_str()` — create only the
    final step of the pipeline. The actual pipeline, however, is hidden in the function
    that these functions call; in our case, this is the `calculate()` function. Let’s
    return to this function for the moment:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，创建最终理解的函数——在我们的示例中，`get_generator_pipeline()`、`get_listcomp_pipeline()`、`get_setcomp_pipeline()`、`get_dictcomp_pipeline()`和`get_dictcomp_pipeline_str()`——仅创建管道的最后一步。然而，实际的管道隐藏在这些函数调用的函数中；在我们的例子中，这是`calculate()`函数。我们暂时回到这个函数：
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Do you see what I mean? Our pipeline consists of the functions `power()`, `double()`,
    `add()`, `power()` again, `add()` again, `round()`, and `add()` once more. This
    is where all the steps of the pipeline are applied, and the functions that create
    the output simply call this function in a way that suits your needs.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你明白我的意思吗？我们的管道由函数`power()`、`double()`、`add()`、再次`power()`、再次`add()`、`round()`和再次`add()`组成。这里应用了所有的管道步骤，创建输出的函数只是以适合你需求的方式调用这个函数。
- en: 'Remember that if the basic functions (the first four of the list from the previous
    sentence) do not suit your needs, you can create a new function, as we did above
    when defining the `get_dictcomp_pipeline_str()` function. This example showed
    that we’re not limited to the base versions of comprehension pipelines: you can
    do whatever you want, if only this is correct.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，如果基本函数（前面句子中列出的前四个函数）不符合你的需求，你可以创建一个新函数，就像我们在定义`get_dictcomp_pipeline_str()`函数时所做的那样。这个例子表明，我们不受限于理解管道的基础版本：只要正确，你可以做任何你想做的事情。
- en: Footnotes
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚注
- en: '¹ If you work with Python in version below 3.10, the code will not work. This
    is because of `typing`’s union operator `|`, which can be used instead of `Union`.
    It was added in Python 3.10\. So, if you have older Python,replace these two lines:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: ¹ 如果你使用的是低于3.10版本的Python，代码将无法运行。这是因为`typing`的联合运算符`|`可以替代`Union`，它是在Python
    3.10中添加的。因此，如果你使用的是旧版本Python，请替换这两行：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'with these three lines:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这三行：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This will work.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这将有效。
- en: Appendix
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录
- en: Below, you will find the full code of the script used in this article. As mentioned
    in the above footnote, in older versions of Python, you may need to replace `int
    | float` with `Union[int, float]`, certainly after importing `Union` from `typing`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本文中使用的脚本的完整代码。如上脚注所述，在旧版本的Python中，你可能需要将`int | float`替换为`Union[int, float]`，当然在此之前需要从`typing`中导入`Union`。
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
