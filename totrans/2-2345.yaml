- en: What‚Äôs new in Pandas 2.0?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/whats-new-in-pandas-2-0-5df366eb0197](https://towardsdatascience.com/whats-new-in-pandas-2-0-5df366eb0197)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The five things to know about the big release
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://jeffhale.medium.com/?source=post_page-----5df366eb0197--------------------------------)[![Jeff
    Hale](../Images/11d534200a7fdc5d997fa2ddbc66132b.png)](https://jeffhale.medium.com/?source=post_page-----5df366eb0197--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5df366eb0197--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5df366eb0197--------------------------------)
    [Jeff Hale](https://jeffhale.medium.com/?source=post_page-----5df366eb0197--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5df366eb0197--------------------------------)
    ¬∑5 min read¬∑Apr 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Pandas 2.0 hit general availability on April 3, 2023\. Let‚Äôs see what features
    are hotter than a Corgi in the sunshine. ‚òÄÔ∏è
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/64c4f87ef9ed00d3cb56323cded1e96c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: pixabay.com'
  prefs: []
  type: TYPE_NORMAL
- en: Three years ago I wrote [What‚Äôs new in Pandas 1.0](/whats-new-in-pandas-1-0-ffa99bd43a58).
    One pandemic and a bunch of AI advances later, here we are with pandas 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: Pandas is the standard, brain-friendly Python library for working with data.
    The 2.0 update is all about making pandas faster and more memory efficient. Memory
    is the number one reason people need to leave pandas for Dask, Ray, SQL databases,
    Spark DataFrames, and other tools. The more you can reduce memory use while working
    in pandas, the easier life is. üôÇ
  prefs: []
  type: TYPE_NORMAL
- en: As you might expect with a major release version, pandas 2.0 has a number of
    significant changes. Let‚Äôs dig in!
  prefs: []
  type: TYPE_NORMAL
- en: pyarrow *üêç‚û°Ô∏è*
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If there‚Äôs one word to sum up this release it‚Äôs *pyarrow.*
  prefs: []
  type: TYPE_NORMAL
- en: Pandas was built using NumPy data structures for memory management. Now you
    have the option to us use [pyarrow](https://arrow.apache.org/docs/python/index.html)
    as your backing memory format.
  prefs: []
  type: TYPE_NORMAL
- en: Using pyarrow means you a speed up and makes for more memory-efficient operations,
    because you can take advantage of the C++ implementation of [Arrow](https://arrow.apache.org/docs/cpp/index.html).
    Fun fact, the creator of pandas, [Wes McKinney](https://en.wikipedia.org/wiki/Wes_McKinney)
    went on to work on Arrow in 2016, after open sourcing pandas in 2009.
  prefs: []
  type: TYPE_NORMAL
- en: What‚Äôs Arrow? [Sebastian Raschk](https://twitter.com/rasbt) explains that it‚Äôs
    ‚Äú‚Ä¶an open-source and language-agnostic columnar data format to represent data
    in memory. It can enable zero-copy sharing of data between processes.‚Äù
  prefs: []
  type: TYPE_NORMAL
- en: Columnar data stores group columns of data together in memory, making for faster
    operations on tasks such as returning the mean of a column. Arrow datatypes also
    incorporate such useful concepts as null values, as discussed above.
  prefs: []
  type: TYPE_NORMAL
- en: Is pandas with pyarrow faster than other pandas alternatives? On a few task
    [Sebastian Raschka showed pandas could be faster](https://twitter.com/rasbt/status/1632090412117532672)
    than [polars](https://github.com/pola-rs/polars), a relatively new ‚ÄúLightning-fast
    DataFrame library for Rust and Python‚Äù that also uses Arrow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then Ritchie Vink, the author of the polars library, ran a comparison test
    on the [TPCH-10 benchmark](https://docs.deistercloud.com/content/Databases.30/TPCH%20Benchmark.90/index.xml?embedded=true),
    a larger, more relevant test for real-world data. See some of the results and
    discussion below:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Source: [https://twitter.com/RitchieVink/status/1632334005264580608](https://twitter.com/RitchieVink/status/1632334005264580608)'
  prefs: []
  type: TYPE_NORMAL
- en: Looks like pandas may still have a ways to go and that polars might be worth
    checking out if you haven‚Äôt yet.
  prefs: []
  type: TYPE_NORMAL
- en: Using [Numba](https://pandas.pydata.org/docs/user_guide/enhancingperf.html#pandas-numba-engine)
    inside pandas is another option if you feel the need for speed. Regardless, the
    general advice to avoid premature optimization is sound.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here‚Äôs the code to use the pyrarrow backing format when reading in a CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you want to go deeper, Marc Garcia has a [nice post](https://datapythonista.me/blog/pandas-20-and-the-arrow-revolution-part-i)
    on the history of pandas memory structures and pyarrow support in pandas 2.0 (note
    that the syntax was updated between the pre-release version and general availability).
  prefs: []
  type: TYPE_NORMAL
- en: nullable dtypes from the get go
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All has not been easy with missing (null) values in pandas. Pandas was built
    on NumPy and NumPy didn‚Äôt support null values for some data types.
  prefs: []
  type: TYPE_NORMAL
- en: For example, NumPy integer dtypes couldn‚Äôt support null values. The introduction
    of a null value in an integer column led to automatic conversion of that column
    to a float dtype. One minute a column is an integer, the next minute it‚Äôs a float.
    This was suboptimal, to say the least.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pandas 1.0 gave us nullable dtypes, but they took some work to use. Now, when
    you read data into your DataFrame you can specify you want nullable NumPy-backed
    dtypes like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'UPDATE: Note that this syntax was updated since the 2.0 beta release.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that most, but not all `read_xxx` functions support nullable dtypes. See
    more [here](https://pandas.pydata.org/docs/whatsnew/v2.0.0.html#argument-dtype-backend-to-return-pyarrow-backed-or-numpy-backed-nullable-dtypes).
  prefs: []
  type: TYPE_NORMAL
- en: The `pyarrow` dtype gives you nullability from the get-go.
  prefs: []
  type: TYPE_NORMAL
- en: More NumPy dtypes for indices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You now have a wider range of NumPy dtypes for pandas indices to reduce memory
    use. Now you can choose lower memory dtypes for indices. For example, you can
    specify the index to use 32-bit integers, saving 50% of the memory that you would
    have used previously, when 64-bit was the only option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Read more [here](https://pandas.pydata.org/pandas-docs/version/2.0/whatsnew/v2.0.0.html#index-can-now-hold-numpy-numeric-dtypes).
  prefs: []
  type: TYPE_NORMAL
- en: copy-on-write mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pandas is getting lazy. In a good way. üôÇ A slew of DataFrame and Series methods
    will no longer create a copy of the pandas object until needed. For example `df.head()`
    won‚Äôt create a new DataFrame with the first five rows, but instead just return
    a view of the first five rows.
  prefs: []
  type: TYPE_NORMAL
- en: 'These changes will save time and memory. Just use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There are a few other ways you can set this behavior, because pandas loves to
    give you multiple ways to do things. ‚ù§Ô∏è
  prefs: []
  type: TYPE_NORMAL
- en: Installable extras
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now you can install extra Python libraries that particular pandas callables
    rely on at the same time you install pandas. For example, running the following
    command will give you the libraries you need to work with Google Cloud Platform
    and Parquet file formats.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: ‚ö†Ô∏è Make sure you don‚Äôt forget the quotes!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the available install options:'
  prefs: []
  type: TYPE_NORMAL
- en: all (for all the extras)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: computation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: timezone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fss
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aws
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gcp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: excel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parquet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: feather
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hdf5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: spss
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: postgresql
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mysql
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sql-other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: html
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: xml
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: plot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: output_formatting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: clipboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: compression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about the dependencies installed [here](https://pandas.pydata.org/docs/getting_started/install.html#install-dependencies).
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install pandas 2.0 in your virtual environment from PyPI, upgrade with this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now you‚Äôre on your way to faster, more memory-efficient data manipulation! üéâ
  prefs: []
  type: TYPE_NORMAL
- en: Wrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You‚Äôve seen the biggest changes in pandas 2.0\. There are other changes such
    as new date parameter names for `read_csv` and similar functions. [Check out the
    release post for all the details](https://pandas.pydata.org/pandas-docs/version/2.0/whatsnew/v2.0.0.html#configuration-option-mode-dtype-backend-to-return-pyarrow-backed-dtypes).
  prefs: []
  type: TYPE_NORMAL
- en: Even with the new changes there will be the times when you don‚Äôt have enough
    memory for your pandas DataFrame. For those times I shared eight tips to help
    in [this guide](/forgetful-pandas-98b50c1193a9).
  prefs: []
  type: TYPE_NORMAL
- en: If you‚Äôre new to pandas, check out [Memorable Pandas](https://memorablepandas.com/),
    my introductory book on the library.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you found this guide to pandas 2.0 changes to be helpful. If you did,
    please give it a share so other folks can find it, too! üöÄ
  prefs: []
  type: TYPE_NORMAL
- en: I write about Python, data, and other tech topics. If you‚Äôre into that stuff,
    [follow me](https://jeffhale.medium.com/) so you don‚Äôt miss out!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7a28dc434ef34199ac66bccca51578a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: pixabay.com'
  prefs: []
  type: TYPE_NORMAL
- en: Happy coding!
  prefs: []
  type: TYPE_NORMAL
