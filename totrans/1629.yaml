- en: How to Write Pandas DataFrame to CSV File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/pandas-to-csv-aab4ac27c455](https://towardsdatascience.com/pandas-to-csv-aab4ac27c455)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Taking advantage of all the options available when writing pandas DataFrames
    into CSV files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://gmyrianthous.medium.com/?source=post_page-----aab4ac27c455--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----aab4ac27c455--------------------------------)[](https://towardsdatascience.com/?source=post_page-----aab4ac27c455--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----aab4ac27c455--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----aab4ac27c455--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----aab4ac27c455--------------------------------)
    ·5 min read·Jan 13, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/881b8b4f1e7bf014f76b61f5f78e7900.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Hello I’m Nik](https://unsplash.com/fr/@helloimnik?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/l4ADb9OVqTY?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: One very common task when working with pandas involves the export of a DataFrame
    into a CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will be demonstrating how to write a pandas DataFrame into
    CSV files. Furthermore, we will also be showcasing how to use the various options
    of the pandas API in order to deal with missing values, datetime formatting, compression
    and really anything else you might need when it comes to persisting DataFrames
    in CSVs.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s create an example DataFrame that we will be using and referencing
    throughout this tutorial in order to demonstrate a few different options when
    it comes to exporting a pandas DataFrame into CSV files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Exporting a pandas DataFrame into a CSV file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to export a pandas DataFrame into `csv` all you need to do is call
    the `pandas.DataFrame.to_csv()` function and provide the output filename:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Change the default separator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you’d like to change the default separator ( `,` ) then you need to provide
    the `sep` argument. The following example will persist the pandas DataFrame into
    a CSV file where the column values will be tab-delimited:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Excluding the index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous examples, you may have noticed already that apart from the
    column names and values, the index is also persisted. If you would like to get
    rid of it, then simply provide `index=False` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Remove the headers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Likewise, you can get rid of the headers (i.e. the column names) by passing
    `header=False`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Writing only a subset of the columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, you might want to export only a subset of columns from the DataFrame
    object. You can select which columns to persist by specifying them in the `columns`
    argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Specifying the format of datetime objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our example DataFrame column `colD` is of type `datetime` and by default,
    it will be exported in a `YYYY-MM-DD` format. You can specify the desired date
    format in `date_format` argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If you are interested in learning more on how to deal with datetime object foramts
    in Python you can read one of my recent articles, heres on Medium.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/datetime-format-pandas-541c661d41c2?source=post_page-----aab4ac27c455--------------------------------)
    [## How to Change the Datetime Format in Pandas'
  prefs: []
  type: TYPE_NORMAL
- en: Working with datetimes in Python and pandas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/datetime-format-pandas-541c661d41c2?source=post_page-----aab4ac27c455--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Change the way NaN values are written to the csv file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, `to_csv()` function will export missing values as empty characters.
    `na_rep` argument can be used to specify the desired output format of `NaN` values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Other Options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For large DataFrames you may need to compress the output in a `zip` format.
    To do so, you can specify the desired compression strategy in `compression` argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Some other alternative compression strategies are `'zip'`, `'gzip'`, `'bz2'`,
    `'zstd'`, `'tar'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, to change the file format encoding, you can take advantage of the
    `encoding` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Final Thoughts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In conclusion, this article has demonstrated the various options available when
    writing pandas DataFrames into CSV files. From changing the default separator,
    excluding the index, removing headers, writing only a subset of columns, specifying
    the format of datetime objects, and changing the way NaN values are written to
    the CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: The pandas API provides a wide range of options to handle different scenarios
    when it comes to persisting DataFrames in CSV files. This makes it a powerful
    tool for data manipulation and analysis. With the knowledge provided in this article,
    you should be able to export your DataFrames to CSV files with ease and precision.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Become a member**](https://gmyrianthous.medium.com/membership) **and read
    every story on Medium. Your membership fee directly supports me and other writers
    you read. You’ll also get full access to every story on Medium.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://gmyrianthous.medium.com/membership?source=post_page-----aab4ac27c455--------------------------------)
    [## Join Medium with my referral link — Giorgos Myrianthous'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: gmyrianthous.medium.com](https://gmyrianthous.medium.com/membership?source=post_page-----aab4ac27c455--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '**Related articles you may also like**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/diagrams-as-code-python-d9cbaa959ed5?source=post_page-----aab4ac27c455--------------------------------)
    [## Diagrams as Code in Python'
  prefs: []
  type: TYPE_NORMAL
- en: Creating cloud system architecture diagrams with Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/diagrams-as-code-python-d9cbaa959ed5?source=post_page-----aab4ac27c455--------------------------------)
    [](/args-kwargs-python-d9c71b220970?source=post_page-----aab4ac27c455--------------------------------)
    [## *args and **kwargs in Python
  prefs: []
  type: TYPE_NORMAL
- en: Discussing the difference between positional and keyword arguments and how to
    use *args and **kwargs in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/args-kwargs-python-d9c71b220970?source=post_page-----aab4ac27c455--------------------------------)
  prefs: []
  type: TYPE_NORMAL
