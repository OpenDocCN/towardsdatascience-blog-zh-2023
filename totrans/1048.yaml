- en: 'Histogram Equalization: A Step-by-Step Guideline (CV- 06)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/histogram-equalization-a-step-by-step-guideline-06-527dcb1a7504](https://towardsdatascience.com/histogram-equalization-a-step-by-step-guideline-06-527dcb1a7504)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Histogram Equalization of Image in Detail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://zubairhossain.medium.com/?source=post_page-----527dcb1a7504--------------------------------)[![Md.
    Zubair](../Images/1b983a23226ce7561796fa5b28c00d65.png)](https://zubairhossain.medium.com/?source=post_page-----527dcb1a7504--------------------------------)[](https://towardsdatascience.com/?source=post_page-----527dcb1a7504--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----527dcb1a7504--------------------------------)
    [Md. Zubair](https://zubairhossain.medium.com/?source=post_page-----527dcb1a7504--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----527dcb1a7504--------------------------------)
    ·5 min read·Jul 27, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/36c2593b53eee8c7ba0611e2ee487993.png)'
  prefs: []
  type: TYPE_IMG
- en: Original Image by [Dan Fador](https://pixabay.com/users/danfador-55851/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=190055)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=190055)
    (Top left image is the main image, and the bottom left image is the grayscale
    version of the image. The right-side images are the result of Histogram Equalization)
  prefs: []
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Histogram is the process of visual representation of frequency distribution
    with a bar plot. In computer vision, an image histogram is the process of representation
    of the frequency of intensity values with a bar plot. With image histogram equalization,
    we can easily adjust the distribution of frequency values of the image intensities.
    Generally, the process helps us to increase the contrast and brightness of an
    image. The process is simple and easy to implement. This article will discuss
    the full process of histogram equalization along with coding examples.
  prefs: []
  type: TYPE_NORMAL
- en: Table of Contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`[**Image Histogram**](#bc52)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[**Full process of histogram equalization**](#38d7)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[**Step-by-step, hands-on implementation**](#04de)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Image Histogram
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***Image histogram*** is the representation of the frequency of image intensity
    values with a bar plot. In Fig -1, I have shown a sample image with its intensity
    values in a 2D space.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8cd94539290d7482144a9135265f244a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig-1: Sample Image Intensity values (Image by Author)'
  prefs: []
  type: TYPE_NORMAL
- en: The values range from 0 to 7\. Let’s calculate the frequency of the values.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f4c9ef582838a962918f0877a1c0a482.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig-2: Frequency of the Image Intensity Values (Image by Author)'
  prefs: []
  type: TYPE_NORMAL
- en: An ***image histogram*** is a simple representation of the *frequency* against
    the *intensity value* with a bar plot, as shown in *Fig-3*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c4c701e5abe8be94b026ccdb0d1315c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig-3: Histogram of the Image (Image by Author)'
  prefs: []
  type: TYPE_NORMAL
- en: Full Process of Histogram Equalization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Histogram equalization is the process of uniformly distributing the frequency
    of the image intensity values with the help of some functions. Mainly the functions
    are probability function — **PDF *(Probability Density Function)* and CDF *(Cumulative
    Distribution Function).***
  prefs: []
  type: TYPE_NORMAL
- en: '**PDF** is calculated with the frequency of an intensity value divided by the
    total frequency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CDF** holds the probability of a probability distribution less than or equal
    to a particular value. For example, PDF of the intensity value `*0 → 0.12, 1 →
    0.24, 2 → 0.12, etc. So, CDF for 1 is 0.12+0.24 = 0.36, 2 is 0.36+ 0.12=0.48,
    and so on.*`The entire result is compiled in ***Fig-4****.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/6af823cd29ec69378976a9d055d32604.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig-4: Histogram Equalization Calculation (Image by Author)'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we need to multiply **CDF** with an integer number.
  prefs: []
  type: TYPE_NORMAL
- en: '***The process of selecting the number —***'
  prefs: []
  type: TYPE_NORMAL
- en: The **max** intensity value of the image is 7, shown in *Fig — 1\.* We have
    to select a whole/ integer number with the following formula.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bce5fc512e8fbc18d6d5220e3fb79e67.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, x is the least number of bits representing the max intensity value. For
    our case, the max value is 7, and `*(2³ -1 = 7)*`. We can't represent the max
    intensity value if we choose 2 as a value of x. So, in our case, the optimum multiplication
    value is 7.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will round the multiplication result to get the equalized histogram
    value. The intensity value is replaced with the equalized histogram value to find
    the final output. The entire process is shown in **Fig-4.**
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7b95792c81a910f73b1fd83a379b9483.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig-5: Initial Intensity Value and Equalized Histogram Intensity Value (Image
    by Author)'
  prefs: []
  type: TYPE_NORMAL
- en: To apply histogram equalization, we need to replace the initial intensity value
    with the equalized histogram value.
  prefs: []
  type: TYPE_NORMAL
- en: The new image will be as follows —
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ecdcfa04d1871af7061b7c245cdab0f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig-6: Image with Equalized Histogram Intensity value (Image by Author)'
  prefs: []
  type: TYPE_NORMAL
- en: The frequency of the equalized histogram intensity value differs from the previous
    one, shown in ***Fig-6***.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7ddbc2b8a55ec67f6911f94ac3c84ed6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig-6: New Equalized Frequency (Image by Author)'
  prefs: []
  type: TYPE_NORMAL
- en: A comparison of the frequency of the image intensity frequency is shown in *Fig-7*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a47e4da1c8d7b3f17973a3f1bedd7a22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig-7: Comparison (Image by Author)'
  prefs: []
  type: TYPE_NORMAL
- en: If we observe the comparison of equalized histogram frequency with the initial
    frequency, we will find that the intensity value of the equalized histogram is
    comparatively higher than the initial one, represented in *Fig-7*.
  prefs: []
  type: TYPE_NORMAL
- en: '*It’s time to jump into the hands-on implementation with Python….*'
  prefs: []
  type: TYPE_NORMAL
- en: Step-by-Step Implementation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the implementation of the histogram equalization, we use the **OpenCV**
    library.
  prefs: []
  type: TYPE_NORMAL
- en: '*Let’s import the necessary libraries and read the image in grayscale —*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Calculate the frequency of the image and plot the histogram —*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As most image portions are dark, the frequency of the low-intensity value (~0)
    is larger than the high-intensity value.
  prefs: []
  type: TYPE_NORMAL
- en: '***OpenCV*** *function* `***cv2.equalizeHist()***` *helps to implement histogram
    equalization —*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we closely observe the output image, we may notice the image brightness is
    higher than the original image.
  prefs: []
  type: TYPE_NORMAL
- en: '*Let’s set the equalized histogram plot —*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The frequency of the intensity value is more uniformly distributed than the
    primary image.
  prefs: []
  type: TYPE_NORMAL
- en: Work with Color Image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An RGB/BGR image has 3 channels — ***Red, Green, and Blue.*** To apply histogram
    equalization in the image, we need to convert the RGB/BGR image into an `**HSV**
    *(Hue, Saturation, and Value)*` image. Finally, we apply histogram equalization
    to the Value parameter of the **HSV** image.
  prefs: []
  type: TYPE_NORMAL
- en: Apply histogram equalization and convert it to an RGB image for visualization
    with `**matplotlib**`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It clearly seems that the image's brightness and contrast have increased significantly.
  prefs: []
  type: TYPE_NORMAL
- en: '*If you want, you can plot the histogram and equalized histogram shown previously.*'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are living in a world of generative AI. These basic computer vision techniques
    seem very basic and obsolete, but these are the base of creating a powerful model
    or innovation. So, I always emphasize the basis of knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: '*I have started to write a series of computer vision articles. The previous
    articles are embedded as follows —*'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68?source=post_page-----527dcb1a7504--------------------------------)
    [## Getting Started with NumPy and OpenCV for Computer Vision (CV-01)'
  prefs: []
  type: TYPE_NORMAL
- en: Start Your Coding for Computer vision with Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68?source=post_page-----527dcb1a7504--------------------------------)
    [](/how-color-is-represented-and-viewed-in-computer-vision-b1cc97681b68?source=post_page-----527dcb1a7504--------------------------------)
    [## A Comprehensive Guide on Color Representation in Computer Vision (CV-02)
  prefs: []
  type: TYPE_NORMAL
- en: A Detail Explanation of Color Space and Color Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-color-is-represented-and-viewed-in-computer-vision-b1cc97681b68?source=post_page-----527dcb1a7504--------------------------------)
    [](/blend-images-and-create-watermark-with-opencv-d24381b81bd0?source=post_page-----527dcb1a7504--------------------------------)
    [## The Easiest Guideline on Image Blending (CV-03)
  prefs: []
  type: TYPE_NORMAL
- en: Easiest Guideline on Blending and Pasting Image for Computer Vision
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/blend-images-and-create-watermark-with-opencv-d24381b81bd0?source=post_page-----527dcb1a7504--------------------------------)
    [](/thresholding-a-way-to-make-images-more-visible-b3e314b5215c?source=post_page-----527dcb1a7504--------------------------------)
    [## Thresholding — a Way to Make Images More Visible (CV-04)
  prefs: []
  type: TYPE_NORMAL
- en: Extract More Information from Images with Thresholding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/thresholding-a-way-to-make-images-more-visible-b3e314b5215c?source=post_page-----527dcb1a7504--------------------------------)
    [](/morphological-operations-a-way-to-remove-image-distortion-513d162e7d05?source=post_page-----527dcb1a7504--------------------------------)
    [## Morphological Operations with Simulation for Computer Vision (CV-05)
  prefs: []
  type: TYPE_NORMAL
- en: Easiest Explanation of Morphological Operation in Image Processing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/morphological-operations-a-way-to-remove-image-distortion-513d162e7d05?source=post_page-----527dcb1a7504--------------------------------)
  prefs: []
  type: TYPE_NORMAL
