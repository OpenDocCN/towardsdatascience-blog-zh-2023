- en: Pivot away from spreadsheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/pivot-away-from-spreadsheets-e2c1639f4e2b](https://towardsdatascience.com/pivot-away-from-spreadsheets-e2c1639f4e2b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Excel isn’t the only pivot table joint in town
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://bradley-stephen-shaw.medium.com/?source=post_page-----e2c1639f4e2b--------------------------------)[![Bradley
    Stephen Shaw](../Images/b3ef5e6e292083ff0f8523ec5ffe89f0.png)](https://bradley-stephen-shaw.medium.com/?source=post_page-----e2c1639f4e2b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e2c1639f4e2b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e2c1639f4e2b--------------------------------)
    [Bradley Stephen Shaw](https://bradley-stephen-shaw.medium.com/?source=post_page-----e2c1639f4e2b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e2c1639f4e2b--------------------------------)
    ·8 min read·Apr 13, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/25b9c5f30107ac892acc25c53fe0b677.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [DDP](https://unsplash.com/fr/@moino007?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '“But pivot tables!”: a common response from many Excel fans on hearing me sing
    the praises of `pandas` (and the inevitable suggestion that they forget about
    spreadsheets for data analysis).'
  prefs: []
  type: TYPE_NORMAL
- en: The belief that pivot tables are the sole property of spreadsheets is probably
    holding many people back from fully transitioning to using Python for data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, this isn’t true at all — as we’ll see today as we dive into:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic pivot tables in `pandas`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using bespoke functions and calculated fields in pivot tables
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s get cracking — we’ll start by simulating some data.
  prefs: []
  type: TYPE_NORMAL
- en: The data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ll start by simulating some data. Nothing too strenuous here as we simulate
    some sales data about two different products:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '… which gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/21d8af9703d06969508bb365069b6f9f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: That looks fair enough. Let’s start with the basics of a pivot table.
  prefs: []
  type: TYPE_NORMAL
- en: Basic pivot tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The premise behind a pivot table is quite simple: some quantity is tabulated
    (or calculated) across various segments of data. The results of this can be represented
    in a table, where the value in the appropriate row and column intersection is
    the segment result.'
  prefs: []
  type: TYPE_NORMAL
- en: As an example, let’s take a look at the total number of quotes per store per
    product.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Excel, we’d probably create the pivot table query as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2d3163a40f029c4ab9ba9fda0ee3869e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '… and that would give us a basic table which looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0be95a06dccdead8ffe63629b5873314.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Blank entries here indicate that there is no data for a specific segment — e.g.
    there were no quotes in the Central store for product C.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is quite straightforward to replicate in `pandas` , using the `pivot_table`¹
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is presented slightly differently, with the missing data more prominent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/93460d0b752c770656e003ce726ceaf9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at the code in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: The `index` , `columns` , and `values` arguments are analogous to the “Columns”,
    “Rows” and “Values” fields in the Excel pivot table query. That is, the columns
    that we provide to `index` will form the **rows** of our pivot table. Likewise,
    the columns we provide through `columns` will form the **columns** in our pivot
    table. And last but not least, whatever we provide via `values` will be the quantities
    which we calculate and tabulate and will populate the table **cells**.
  prefs: []
  type: TYPE_NORMAL
- en: Slightly different is how we define the function to be applied to the tabulated
    data. In Excel, we’d normally click through each quantity in the “Values” pane,
    choosing an appropriate function from the “Values Field Settings” window.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f5dbc7224c4cf6f8f527518cb0b817cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: In Python, it’s a bit simpler, as we can just refer to functions by their names
    (more on this later).
  prefs: []
  type: TYPE_NORMAL
- en: 'What about extending the table to cover more quantities? If, for instance,
    we wanted to calculate the minimum number of quotes and sales for each product
    and store combination, this would do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8cfd0dd0d5de8677f8c37a999f72c25f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Ah, but something looks different here — we’ve included statistics for each
    row and column (and named it “Combined”). That’s easily achieved as `margins`
    controls whether or not to include these totals, and `margins_name` allows us
    to give a meaningful name to these table entries.
  prefs: []
  type: TYPE_NORMAL
- en: Bespoke functions and calculated fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A lot of analysis — including exploratory analysis — can be done using the
    same simple functions: sums, averages, minimums, maximums (standard deviations
    and variances at a push). These functions are so ubiquitous that they are built
    into `pandas` and we can refer to them by name in our call to `pivot_table` .'
  prefs: []
  type: TYPE_NORMAL
- en: However there are instances where we might need to use a custom function. For
    instance, calculating the coefficient of variation is by no means a “standard”
    function but we can get to it quite easily by first defining what it is, and then
    feeding it into the pivot table call via `aggfunc` .
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d53150afd2fbcf4ec8dbdd80acb7163d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: One of the more useful features of an Excel pivot table is the ability to create
    what’s called a calculated field — a field in the pivot table which is derived
    from other fields in the pivot table. The `pandas` implementation of the pivot
    table can still provide these but it takes a little more work, and a return to
    first principles.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a working example, let’s imagine we are interested in the conversion rate
    of each product across each store. This is quite simple mathematically:'
  prefs: []
  type: TYPE_NORMAL
- en: Calculate the total number of actual sales (“Numbers” in our data) for each
    product and store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate the total number of sales quotes (“Quotes”) for each product and store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The conversion rate is then (1) / (2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To get this as a pivot table, we code this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'which yields:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d426f97aae837ea6080a6ff3d2870713.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this is fine as a standalone exhibit but for completeness we can
    also join this back to a pivot table containing the “raw” figures too.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a bonus, a few tips and tricks before we wrap up.
  prefs: []
  type: TYPE_NORMAL
- en: Getting creative with custom functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We talked a little about using bespoke functions. I demonstrated a case where
    we needed a custom function for the analysis, but you can use custom functions
    in more creative ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, let’s use the built in `sum` function to calculate total quotes
    and sales. Something like this, say:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0becca8ad8a39ab1ec613dcc6e209a68.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Now, as much as I believe in function before form, I don’t like the way that
    the “sum” is floating around as a pseudo-title. If I was to present this table,
    I would consider writing a new function with a name appropriate for presentation
    — e.g. “Total” — which does the exact same thing as `sum` but gives a more descriptive
    table result.
  prefs: []
  type: TYPE_NORMAL
- en: 'So define the new function and pass it in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'gives us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a405df1d3c0d83d6d5015da9306d52fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: And whilst the table isn’t exactly presentation-ready, it does look better.
  prefs: []
  type: TYPE_NORMAL
- en: Formatting pivot tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I used the p-word quite a bit there: oftentimes, simple pivot tables make their
    way into slide packs.'
  prefs: []
  type: TYPE_NORMAL
- en: Before we do that, we might want to do a bit of formatting to the table — perhaps
    treat the missing values in an appropriate fashion and make the numbers easier
    to read.
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s quite simple to do with some DataFrame styling. Here’s one I made earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0afa4369e95ed36310998e65496f369c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: That’s done by adding a little `.style.format(’{:,.0f}’,na_rep=’-’)` to the
    end of the call to `pivot_table` .
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s tons of customisation available for the presentation of a DataFrame.
    So much so that I’ve actually written an article about it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/make-your-tables-look-glorious-2a5ddbfcc0e5?source=post_page-----e2c1639f4e2b--------------------------------)
    [## Make Your Tables Look Glorious'
  prefs: []
  type: TYPE_NORMAL
- en: Simple formatting tricks to make your pandas DataFrames presentation-ready
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/make-your-tables-look-glorious-2a5ddbfcc0e5?source=post_page-----e2c1639f4e2b--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve covered a fair bit of ground quite quickly. We’ve gone through the basics
    of pivot tables in `pandas` , stretched our arm at using bespoke functions, and
    taken a swing at a worked example of a calculated field.
  prefs: []
  type: TYPE_NORMAL
- en: Before we call it a day, a few thoughts.
  prefs: []
  type: TYPE_NORMAL
- en: Excel still has a few things going for it. One is the familiarity; no matter
    how simple, trying something completely new can be challenging.
  prefs: []
  type: TYPE_NORMAL
- en: Two is the ease-of-use that click and drag actions give users — there’s simply
    none of that in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the advantage of clicking and dragging can be outweighed in the long
    term if the action has to be repeated many times over: converting the actions
    into hard code will save time and effort.'
  prefs: []
  type: TYPE_NORMAL
- en: Yes, this can be done in VBA or by recording a macro, but let’s be honest —
    no matter how big and helpful the VBA community is, it’s still a difficult (and
    not very popular) language to learn.
  prefs: []
  type: TYPE_NORMAL
- en: There are also more subtle functions and actions that Excel does better than
    `pandas` . I’m not saying that you can’t do these in `pandas` , but Excel can
    make your life a little easier when you’re handling dates, filtering pivot tables
    and creating calculated fields.
  prefs: []
  type: TYPE_NORMAL
- en: If you find yourself repeatedly creating the same pivot table on a regular basis,
    maybe you should consider switching over to Python. I have, and I haven’t looked
    back — in this case, the grass really is greener on this side.
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve made it this far — **thank you for reading!** If you’ve enjoyed my
    ramblings and would like more, take a look at my other stories. I write about
    all sorts of things from [charts and graphs](https://medium.com/towards-data-science/make-your-charts-look-glorious-9ce3fa310b70)
    to [neural networks](https://medium.com/towards-data-science/lets-do-neural-networks-d849d80fd012).
  prefs: []
  type: TYPE_NORMAL
- en: References and resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[pandas.pivot_table — pandas 2.0.0 documentation (pydata.org)](https://pandas.pydata.org/docs/reference/api/pandas.pivot_table.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Coefficient of variation — Wikipedia](https://en.wikipedia.org/wiki/Coefficient_of_variation)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
