- en: '*args, **kwargs, and Everything in Between'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/args-kwargs-and-everything-in-between-ff7d9b536494](https://towardsdatascience.com/args-kwargs-and-everything-in-between-ff7d9b536494)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The fundamentals of function parameters and arguments in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://philip-wilkinson.medium.com/?source=post_page-----ff7d9b536494--------------------------------)[![Philip
    Wilkinson, Ph.D.](../Images/9811fa38963c29193b01a5cf856d014f.png)](https://philip-wilkinson.medium.com/?source=post_page-----ff7d9b536494--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ff7d9b536494--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ff7d9b536494--------------------------------)
    [Philip Wilkinson, Ph.D.](https://philip-wilkinson.medium.com/?source=post_page-----ff7d9b536494--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ff7d9b536494--------------------------------)
    ·6 min read·Jul 18, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f4942f955c3c59bada72dac594277ddb.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Sigmund](https://unsplash.com/@sigmund?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Python has become the go-to language in Data Science for its versatility, simplicity,
    and powerful libraries. Functions, with their ability to encapsulate reusable
    code, play a key role in streamlining and enhancing the data science workflow
    in Python. Understanding the nuances of function arguments and parameters is essential
    for harnessing the true potential of Python functions in the context of Data Science.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters v Arguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing to understand when working with functions in Python is the
    difference between parameters and arguments. A parameter is a variable within
    a function definition, while an argument is what you pass into the function''s
    parameters when you call it. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`param1` and `param2` are functional parameters, while `"Arg1"` and `"Arg2"`
    are the arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: Positional v Keyword arguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, “Arg1” and “Arg2” are passed in as positional arguments. This
    is because the parameter that each argument relates to are not specified in the
    functional call. This means that due to their order “Arg1” takes the position
    of `param1`, and “Arg2” takes the position of `param2` .
  prefs: []
  type: TYPE_NORMAL
- en: We can change the order by taking advantage of keyword arguments. This is where
    the parameter that each argument relates to, is clearly defined using the correct
    keyword.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This example produces the same output as the first function call, even when
    the position of the arguments has been switched because the parameter that each
    argument relates to was defined using the corresponding keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Default Parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The second thing you will often see is default parameters. These parameters
    often have a common value or “default” value that can often be ignored when calling
    the function. They are set in the function definition by assigning the parameter
    a default value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the function above we set the we set the default of whether to print or
    not to `False` . This can be overridden when you call the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When working with default parameters, it is important to note that a non-default
    parameter cannot follow a default parameter in the function definition. This ensures
    that your most used and variable parameters are at the start of your function
    definition and are assigned first.
  prefs: []
  type: TYPE_NORMAL
- en: '*Args'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A brilliant thing about functions in Python is that they can take an arbitrary
    number of positional arguments. The syntax for this takes the form of the argument
    name prefaced by an asterisk. By convention, this argument is defined as `*args`
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`*args` is typically passed as a tuple to the function, so we can take advantage
    of iteration. For example, in the volume function above, we assume that any amount
    of numbers are passed into the function to calculate the volume of a multi-dimensional
    object.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A safer way to implement this however is to ensure that at least one number
    is passed in to start with, with a variable number of other dimensional lengths:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using the `*args` parameter in this allows you to pass any number of positional
    arguments to the function, making the function more flexible and capable of handling
    a varying number of inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to note that to working with `*args`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*args` must come after every other positional parameter in the function definition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There can only be one `*args` in each parameter list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*args` only collects positional arguments, not keyword arguments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any argument proceeding `*args` are taken to be regular positional arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any arguments passed after `*args` must be passed as mandatory keyword arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs`'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The alternative is to accept an arbitrary number of keyword arguments. This
    can be done by prefixing a parameter in the function definition with `**` . By
    convention, this parameter is called `**kwargs` . This allows you to pass key-value
    pairs as arguments to function, providing a flexible way to handle named parameters
    in a function.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of this is creating HTML tags which have a key and a value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To take advantage of `**kwargs` you must ensure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*args` must always precede `**kwargs` in an argument list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs` must always be last in an argument list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Positional only arguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After Python 3.8, you also have the ability to specify positional-only arguments.
    This is done by adding `/` at the end of the parameter list that you want to be
    positional.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this example you cannot pass a value to the x parameter as a keyword, x must
    be a positional argument.
  prefs: []
  type: TYPE_NORMAL
- en: This can also be combined with regular arguments to ensure that some are positional,
    whilst others can be positional or keyword.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `greeting` can be passed to the function by either its position
    or keyword, whilst `name` can only be passed by position.
  prefs: []
  type: TYPE_NORMAL
- en: This can be useful when arguments have a natural order but are hard to give
    good descriptive names to. It also allows you to refactor your code without worrying
    too much about code that depends on those names.
  prefs: []
  type: TYPE_NORMAL
- en: Keyword only arguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The alternative is to specify keyword-only arguments. This is done by adding
    a `*` before a parameter list in the function definition. An argument after the
    `*` must be a keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `celsius` is a keyword-only argument so Python will raise an
    error if you try to specify it based on position without the keyword.
  prefs: []
  type: TYPE_NORMAL
- en: This is useful in situations where you want to make sure that the correct value
    is being passed through to the function. In this case, we ensure that Celsius
    is passed to the function, not Fahrenheit or Kelvin.
  prefs: []
  type: TYPE_NORMAL
- en: Type Hinting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, since Python 3.5 you can now hint which type a parameter should expect.
    This follows the syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, hinting that you want to add together two numbers together in
    a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: It is important to note here that this does not enforce types, but is merely
    used to suggest and hint which types should be passed to the function. Importantly,
    type hints can now be picked up by most modern IDEs and warnings can be presented
    when the incorrect type is passed to the function.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mastering function arguments in Python is a crucial skill for any data scientist
    seeking to optimise their workflow. With a solid understanding of function arguments,
    you can write cleaner, more concise code that promotes reusability, modularity
    and maintainability. So embrace the versatility and complexity of function arguments
    in Python, continue to explore the depths of Python’s function capability and
    experiment with different argument patterns to improve your coding workflow.
  prefs: []
  type: TYPE_NORMAL
- en: If you liked what you read and are not yet a Medium member, feel free to sign
    up for Medium using my referral link below to support me and other amazing writers
    on this platform! Thank you in advance.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://philip-wilkinson.medium.com/membership?source=post_page-----ff7d9b536494--------------------------------)
    [## Join Medium with my referral link — Philip Wilkinson'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: philip-wilkinson.medium.com](https://philip-wilkinson.medium.com/membership?source=post_page-----ff7d9b536494--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Or feel free to check out some of my other articles on Medium:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/eight-data-structures-every-data-scientist-should-know-d178159df252?source=post_page-----ff7d9b536494--------------------------------)
    [## Eight Data Structures Every Data Scientist Should Know'
  prefs: []
  type: TYPE_NORMAL
- en: From Basic Data Structures to Abstract Data Types in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/eight-data-structures-every-data-scientist-should-know-d178159df252?source=post_page-----ff7d9b536494--------------------------------)
    [](/a-complete-data-science-curriculum-for-beginners-825a39915b54?source=post_page-----ff7d9b536494--------------------------------)
    [## A Complete Data Science Curriculum for Beginners
  prefs: []
  type: TYPE_NORMAL
- en: 'UCL Data Science Society: Introduction to Python, Data Scientists Toolkit,
    Data Science with Python'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/a-complete-data-science-curriculum-for-beginners-825a39915b54?source=post_page-----ff7d9b536494--------------------------------)
    [](https://python.plainenglish.io/a-practical-introduction-to-random-forest-classifiers-from-scikit-learn-536e305d8d87?source=post_page-----ff7d9b536494--------------------------------)
    [## A Practical Introduction to Random Forest Classifiers from scikit-learn
  prefs: []
  type: TYPE_NORMAL
- en: 'UCL Data Science Society Workshop 14: What is a Random Forest Classifier, Implementation,
    Evaluation, and Improvement'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: python.plainenglish.io](https://python.plainenglish.io/a-practical-introduction-to-random-forest-classifiers-from-scikit-learn-536e305d8d87?source=post_page-----ff7d9b536494--------------------------------)
  prefs: []
  type: TYPE_NORMAL
