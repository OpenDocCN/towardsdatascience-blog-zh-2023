["```py\nimport networkx as nx\n\n# Create an instance of a graph\nG = nx.Graph()\n\n# Create an edge between two nodes. The nodes will be also created.\nG.add_edge('A', 'B', weight=6)\n```", "```py\n# Synthetic Directed Graph\nGd = nx.DiGraph()\nfor i in range(30):\n    node_1 = np.random.randint(10)\n    node_2 = np.random.randint(10)\n    if node_1 != node_2:\n        Gd.add_edge(node_1, node_2)   \n\n# Synthetic Undirected Graph\nG = nx.Graph()\nfor i in range(30):\n    node_1 = np.random.randint(10)\n    node_2 = np.random.randint(10)\n    if node_1 != node_2:\n        G.add_edge(node_1, node_2) \n```", "```py\n# Initialize the graph\nG = nx.Graph()\n\n# Add weighted edges\nG.add_edge(\"A\", \"B\", weight=0.6)\nG.add_edge(\"A\", \"C\", weight=0.2)\nG.add_edge(\"C\", \"D\", weight=0.1)\nG.add_edge(\"C\", \"E\", weight=0.7)\nG.add_edge(\"C\", \"F\", weight=0.9)\nG.add_edge(\"A\", \"D\", weight=0.3)\n```", "```py\n# Initialize the graph\nG = nx.Graph()\n\n# Add weighted edges\nG.add_edge(\"A\", \"B\", sign='+')\nG.add_edge(\"A\", \"C\", sign='-')\nG.add_edge(\"C\", \"D\", sign='-')\nG.add_edge(\"C\", \"E\", sign='+')\nG.add_edge(\"C\", \"F\", sign='-')\nG.add_edge(\"A\", \"D\", sign='+')\n```", "```py\n# Generate an artificial network of 25 nodes\nG = nx.barabasi_albert_graph(25,4, seed=42)\n\n# Apply the PageRank algorithm and store the scores in a pd dataframe\npagerank_results = nx.pagerank(G, alpha=0.85, max_iter=100, tol=1e-06)\npagerank_results = pd.Series(pagerank_results).sort_values(ascending=False)\n\n# Plot the most importan node scores\nfig, ax = plt.subplots()\nsns.barplot(x=pagerank_results.iloc[:10].values, y=pagerank_results.iloc[:10].index.astype(str), orient='h', alpha=0.75)\nax.set_xlabel('PageRank Score')\nax.set_ylabel('Node')\nax.spines['top'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nfor i in ax.containers:\n    ax.bar_label(i,fmt='%.2f')\n```", "```py\n# Convert the previously create graph to directed\nG_dir = G.to_directed()\nfor a, b in list(G.edges()):\n    G_dir.remove_edge(a, b)\n\n# Compute HITS scores\nhits_results = nx.hits(G_dir, max_iter=100, tol=1e-06)\nauthority_results = pd.Series(hits_results[1]).sort_values(ascending=False)\nhubs_results = pd.Series(hits_results[0]).sort_values(ascending=False)\n\n# Plot the results\nfig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2)\nfig.set_figheight(8)\nfig.set_figwidth(16)\nsns.barplot(x=authority_results.iloc[:10].values, y=authority_results.iloc[:10].index.astype(str), orient='h', alpha=0.75, ax=ax1)\nax1.set_xlabel('Authority Score')\nax1.set_ylabel('Node')\nax1.spines['top'].set_visible(False)\nax1.spines['bottom'].set_visible(False)\nax1.spines['right'].set_visible(False)\nax1.spines['left'].set_visible(False)\nfor i in ax1.containers:\n    ax1.bar_label(i,fmt='%.2f')\n\nsns.barplot(x=hubs_results.iloc[:10].values, y=hubs_results.iloc[:10].index.astype(str), orient='h', alpha=0.75, ax=ax2)\nax2.set_xlabel('Hub Score')\nax2.set_ylabel('Node')\nax2.spines['top'].set_visible(False)\nax2.spines['bottom'].set_visible(False)\nax2.spines['right'].set_visible(False)\nax2.spines['left'].set_visible(False)\nfor i in ax2.containers:\n    ax2.bar_label(i,fmt='%.2f')\n```"]