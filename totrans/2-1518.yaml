- en: Migrating data? Make the most of the Product itself!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/migrating-data-make-the-most-of-the-product-itself-b79b56d5e6c1](https://towardsdatascience.com/migrating-data-make-the-most-of-the-product-itself-b79b56d5e6c1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use the product features to make the data migration process easier
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://alle-sravani.medium.com/?source=post_page-----b79b56d5e6c1--------------------------------)[![Alle
    Sravani](../Images/64909a4d45cb2569175f0feb5dc552f7.png)](https://alle-sravani.medium.com/?source=post_page-----b79b56d5e6c1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b79b56d5e6c1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b79b56d5e6c1--------------------------------)
    [Alle Sravani](https://alle-sravani.medium.com/?source=post_page-----b79b56d5e6c1--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b79b56d5e6c1--------------------------------)
    ·7 min read·Mar 1, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I would like to share some key learnings from a data migration
    project I had worked on in the past. My company was migrating their internal CRM
    system to Salesforce and I was tasked to facilitate the data migration process.
    I had numerous obstacles along the way, but I was able to overcome them all. I’ve
    included the best practices that helped me with my project below. If you are currently
    working on or planning a data migration project, this article is for you. If you
    are completely new to the issue, I have attempted to keep the language simple
    so that you can follow along and get a general understanding of how data migration
    projects function. Despite the fact that I’m using examples that are more relevant
    to Salesforce, you might find something valuable for the specific product you’re
    working with.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6476c97f48a8fa0e837c9247c557cf3f.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Kevin Ku](https://unsplash.com/@ikukevk?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '**Acquaint yourself with the product**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I already knew the internal CRM system (let’s call it the legacy system) and
    the data architecture behind it, so all I needed to do was get comfortable with
    Salesforce. I began by exploring Trailhead, Salesforce’s free online learning
    portal. They also offer a free developer login account (sign up [here](https://developer.salesforce.com/signup))
    to allow you to explore their product and its features. I used this account until
    I got access to the platform by my employer. The initial investigation enabled
    me in discovering all of the potential product features that I could later exploit.
  prefs: []
  type: TYPE_NORMAL
- en: '**Create your testing environment**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If possible, set up a separate testing environment for yourself (and your team)
    to test the data pipelines/connections you’re building. If the product does not
    allow you to create a separate environment, you must establish some testing standards
    and techniques. All testing data should be easily identifiable and deleted so
    that the production environment remains clean. You may not be the only one working
    on the project, and you certainly don’t want someone else’s activities to have
    an impact on your data.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, Salesforce provides the option to create such environments (called
    as Sandbox). Typically, a company can maintain one sandbox for UAT testing, one
    as a backup recovery and one or more for development purposes. A professional
    edition of Salesforce gives you 10 Developer Sandboxes, which I think is quite
    cool. I conveniently tested all the API connections I had built, the data pipelines
    and some other codes I had written. I could send, modify and delete all test records
    without worrying too much.
  prefs: []
  type: TYPE_NORMAL
- en: '**Design the architecture**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Every business is unique, and no single product will fit perfectly. There will
    always be special adjustments you will have to make so that the data meets the
    business logic. You must find the best data structure for each table. This is
    also an excellent moment to review the current data architecture and identify
    any shortcomings that could be rectified in the new system. Salesforce allows
    customers to create custom objects (tables) and fields (columns) to store company-specific
    data. You can create up to 50 custom objects and 100 custom fields per object
    in the professional edition. The best thing is these custom objects and fields
    have the same capabilities as the built-in objects and fields.
  prefs: []
  type: TYPE_NORMAL
- en: For example, I was able to combine three tables into one and differentiate them
    by just adding one additional field describing the type of record. Leveraging
    the parent-child relationship, I was able to easily set up aggregated fields on
    the parent object which would adjust automatically when the data on child items
    was updated. I set up validation rules on the fields so that the system will do
    the quality checks on data before storing them. I also modified the page layouts
    to adjust what data is shown to the end-users. I made several such tiny improvements,
    which resulted in a clean data architecture and decreased the overall system’s
    complexity.
  prefs: []
  type: TYPE_NORMAL
- en: '**Automate your processes**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'There are two types of automation I’m talking about here:'
  prefs: []
  type: TYPE_NORMAL
- en: Automate the business process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build data pipelines to migrate data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating the business processes comes first. This can reduce the manual efforts
    of end-users and errors. From the data point of view, it also means you have slightly
    less data to import in. For example, the sales team team would create an “opportunity”
    for a customer. If it reaches the quotation stage, they would add in the products
    and other attributes to generate a quotation. If deal goes through, then using
    the signed contract (created from quotation), the sales admin would then create
    an “order” in the system with the same products. In the past, the sales and CRM
    systems were different and thus the double entry was unavoidable. But with Salesforce,
    I was able to easily automate the order creation process using the built-in “Flow”
    feature which would directly fetch all the data from the opportunity itself. As
    a result, for new opportunities which were still in processing stages on Salesforce,
    orders were directly created later on Salesforce itself and not in the old system.
  prefs: []
  type: TYPE_NORMAL
- en: The second part is to automate the data ingestion process. Ideally, the data
    should be migrated only once. Once the migration is done, then the users should
    only use the new system. Sadly, this was not the case for my organisation. There
    were certain intricate procedures and edge situations that did not fit in Salesforce,
    and we had to wait for the developers to build a custom solution for those. On
    the other hand, the management wanted the users to begin working on Salesforce,
    and thus both systems were utilised concurrently for a time. For the old data,
    updates were only made in the legacy system. For me it was a mess because it was
    hard to keep track of what changed and I had to update the imported data multiple
    times. The data structures in the two systems differed, and some pre-processing
    was required before I could import into Salesforce. I saved a lot of time and
    efforts by writing codes for them to ensure the data in both systems was up to
    date.
  prefs: []
  type: TYPE_NORMAL
- en: '**Keep an eye out for Data Governance**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Because you are transitioning to a new system, you must exercise extreme caution
    before granting access to end users. There may be no data governance structure
    in place. By default, everyone can see everything, which may be quite dangerous.
    You must define roles, who has access to what, and the amount of access that you
    wish to grant. Salesforce has a robust framework in place to manage such roles
    and responsibilities. Hierarchies can be set up, and read/write/view or no access
    can be controlled down to the field level while permission sets can be configured
    to handle special scenarios. Whenever someone quits the company, it is quite simple
    to deactivate their account and transfer all of their records to someone else.
    It’s a good idea to have at least one user set up as a test account so you can
    test the data access and permissions provided to each role.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f71fa016e8b6c6dee18eeca1de86602c.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Melanie Deziel](https://unsplash.com/@storyfuel?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '**Maintain reports**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Numbers say volumes. Create reports on the migration tasks completed and, if
    possible, put them all on a dashboard to track your progress. Maintain such reports
    in Excel if it is not feasible to do so on the product itself. This could serve
    as a way to track your progress. Salesforce offers an excellent reporting tool.
    Their dashboards are quite restricted in comparison to standard BI tools, but
    they are still something. I set up a separate dashboard for data quality for this
    project. I created multiple reports that flagged missing data and discrepancies
    and placed them all on one dashboard. This dashboard was shared with all users,
    and they could only see their records that had data issues. This made it easier
    to fix the problems and increased the data quality over time.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/55a0cd98852e728e929c88b4b1c5a0a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Towfiqu barbhuiya](https://unsplash.com/es/@towfiqu999999?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: There are numerous additional capabilities that I also exploited such as Apex
    codes, approval process, email services, visualforce pages, chatter, etc but they
    were more on development side and less on data. I don’t want to go into every
    element of Salesforce that impressed me, so I’ll stop here. Being a data person,
    I must admit that their product impressed me. I hope you found this article useful.
    Do check out my previous article where I talked about the challenges I encountered
    when creating a Tableau dashboard using Big Data.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/tableau-dashboards-and-big-data-learnings-e0a29cb7377c?source=post_page-----b79b56d5e6c1--------------------------------)
    [## Big data experience with Tableau dashboards — challenges and learnings'
  prefs: []
  type: TYPE_NORMAL
- en: Get the best insights from big data with Tableau dashboards with a good dataset
    which is aggregated and can be easily…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/tableau-dashboards-and-big-data-learnings-e0a29cb7377c?source=post_page-----b79b56d5e6c1--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '**Before you go…**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Follow me on Medium so you don’t miss any new posts I write in future; you
    will find more of my articles on my* [*profile page*](https://medium.com/@alsr.sravani)*.
    You can also connect with me on* [*LinkedIn*](https://www.linkedin.com/in/alle-sravani/)
    *or* [*Twitter*](https://twitter.com/sravani_alle)*!*'
  prefs: []
  type: TYPE_NORMAL
