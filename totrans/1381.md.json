["```py\nfunction remove!(vec::Vector{Int64}, index::Int64 = length(vec))\nend\n```", "```py\nfunction example(x::Any)\n\nend\n```", "```py\nmethods(example)\n```", "```py\nmethods(example)[1].sig\n\nTuple{typeof(Main.NPaeMcfIjB.example), Any}\n```", "```py\nimport Base: cd\n```", "```py\nBase.delete_method(methods(cd)[1])\n```", "```py\nvec = Vector{Int64}([5, 10, 15, 20])\n```", "```py\nfunction example(vec::Vector{Int64} = [1, 2])\n\nend\n```", "```py\nfunction example(vec::Vector{<:Real})\n\nend\n```", "```py\nmyvec = [x + 1 for x in 1:5]\n5-element Vector{Int64}: 2 3 4 5 6\n```", "```py\n[begin \n    if x > 5\n      true\n    else\n      false\n    end\n end for x in myvec]\n```", "```py\nexp = Meta.parse(\"x = 5\")\n\neval(exp)\n```", "```py\nfieldnames(Expr)\n(:head, :args)\n\nexp.head\n:(=)\n\nexp.args\n\n2-element Vector{Any}: :x 5\n```", "```py\ny = 5\nmodule Example\n    x = 5\nend\n```", "```py\nExample.eval(Meta.parse(\"x += 1\"))\n\nexample.x\n\n6\n```", "```py\njulia> do_stuff(a::Int64) = a * 5 * 2 - a + 2\ndo_stuff (generic function with 1 method)\n\njulia> add5(a::Int64) = a += 5\nadd5 (generic function with 1 method)\n```", "```py\njulia> a |> add5 |> do_stuff\n92\n```", "```py\nopen(\"myfile.txt\", \"w\") do o\n    redirect_stdout(o) do io\n        println(\"hello!\")\n    end\nend\n```"]