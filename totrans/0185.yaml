- en: Makefile Tutorial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/a-data-scientists-guide-to-make-and-makefiles-1595f39e0704](https://towardsdatascience.com/a-data-scientists-guide-to-make-and-makefiles-1595f39e0704)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to use Make and Makefiles to optimise your machine learning pipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@egorhowell?source=post_page-----1595f39e0704--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----1595f39e0704--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1595f39e0704--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1595f39e0704--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----1595f39e0704--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1595f39e0704--------------------------------)
    ·5 min read·Aug 11, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/df1db4763ccc19619b1d790059ed64f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Nubelson Fernandes](https://unsplash.com/@nublson?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data Scientists are now expected to write production code to deploy their machine
    learning algorithms. Therefore, we need to be aware of software engineering standards
    and methods to ensure our models are deployed robustly and effectively. One such
    tool that is very well known in the developer community is `make`. This a powerful
    Linux command that has been known to developers for a long time and in this article
    I want to show how it can be used to build efficient machine learning pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: What Is Make?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`make` is a terminal command/executable just like `ls` or `cd` that is in most
    UNIX-like operating systems such as MacOS and Linux.'
  prefs: []
  type: TYPE_NORMAL
- en: The use of `make` is to simplify and breakdown your workflow into a logical
    grouping of shell commands.
  prefs: []
  type: TYPE_NORMAL
- en: It is used widely by developers and is also being adopted by Data Scientists
    as it simplifies the machine learning pipeline and enables more robust production
    deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Why Make For Data Science?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`make` is a powerful tool that Data Scientists should be utilising for the
    following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Automate the setup of machine learning environments*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Clearer end-to-end pipeline documentation*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Easier to test models with different parameters*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Obvious structure and execution of your project*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What Is A Makefile?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A `Makefile` is basically what the `make` commands read and execute from. It
    has three components:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Targets***: *These are the files you are trying to build or you have a*
    `PHONY` *target if you are just carrying out commands.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Dependencies:*** *Source files that need to be run before this target is
    executed.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Command:*** *As it says on the tin, these are the list of steps to produce
    the target.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s run through a very simple example to make this theory concrete.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below is a `Makefile` that has the target `hello` with the command `echo` to
    print `''Hello World''` to the screen and it has no dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can run this by simply executing `make hello` in the terminal which will
    give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It essentially just listed and carried out the command. This is the essence
    of `make` there is nothing too complicated going on.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we made the target `hello` a `.PHONY` as it doesn’t produce a file.
    This is the meaning behind `.PHONY`, only use it for targets that don’t spit out
    a file.
  prefs: []
  type: TYPE_NORMAL
- en: We can add an @ symbol before the `echo` command if we don’t want to print it
    to the screen.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'We can add another target in the `Makefile` to generate a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the `data.csv` target, we execute `make data.csv`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: And you should notice a `data.csv` file in your local directory.
  prefs: []
  type: TYPE_NORMAL
- en: Machine Learning Pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview of a Pipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Below is an example pipeline for a machine learning project we will construct
    using `Makefile` and `make`. It is based on a previous project where I built on
    [**ARIMA**](/how-to-forecast-with-arima-96b3d4db111a) model to forecast US airline
    passengers. You can check out more about it here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-forecast-with-arima-96b3d4db111a?source=post_page-----1595f39e0704--------------------------------)
    [## How To Forecast With ARIMA'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to the ARIMA forecasting model and how to use it
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-forecast-with-arima-96b3d4db111a?source=post_page-----1595f39e0704--------------------------------)
    ![](../Images/66f7e47e44c808a35bb7a713e678bfec.png)
  prefs: []
  type: TYPE_NORMAL
- en: Diagram by author.
  prefs: []
  type: TYPE_NORMAL
- en: So, the `read_clean_data.py` file will load in and make the time series data
    [**stationary**](https://medium.com/towards-data-science/time-series-stationarity-simply-explained-125269968154).
    The `model.py` file will fit an ARIMA model to the cleaned data. Finally, the
    `analysis.py` file will compute the performance of our forecast.
  prefs: []
  type: TYPE_NORMAL
- en: Another key thing to notice here is the dependency between files. The `analysis.py`
    can’t run unless `model.py` has been executed. This is where the dependencies
    in the `Makefile` become useful.
  prefs: []
  type: TYPE_NORMAL
- en: Walkthrough
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Below is our first file `read_clean_data.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: Data [from Kaggle](https://www.kaggle.com/datasets/ashfakyeafi/air-passenger-data-for-time-series-analysis)
    with a CC0 licence.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: Here we read our US airline data and make it stationary through differencing
    and the [**Box-Cox transform**](https://medium.com/towards-data-science/box-cox-transform-for-time-series-cc45f26082c6)
    and save it to a file in the local directory called `clean_data.csv`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we have the `model.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'And finally, we have our analysis file, `analysis.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then code the following `Makefile` for our three stage pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Notice how we have declared the dependencies of each step to the previous one
    to ensure we have the correct files to carry every step. We have also added the
    `clean` target to remove the generated files if needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The whole pipeline can run through the `make all` command, and the output will
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'And will generate the following plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/99b80ca50576390c469374aea9950e89.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the `Makefile` file pipeline worked and the forecasts look pretty
    good!
  prefs: []
  type: TYPE_NORMAL
- en: Summary & Further Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'That’s it! I hope you enjoyed this short tutorial on `make` and `Makefile`.
    Of course, there is more complexity and fancy things you can do with these tools,
    but this post can serve as your starting point. The key things to remember are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*make*` *is a UNIX command that automates the running of certain workflows*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*A* `*Makefile*` *allows us to write several* `*make*` *commands and sequences
    to automate the machine learning pipeline*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The full code used in this article is available on my GitHub here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Software%20Engineering%20/make-example?source=post_page-----1595f39e0704--------------------------------)
    [## Medium-Articles/Software Engineering /make-example at main · egorhowell/Medium-Articles'
  prefs: []
  type: TYPE_NORMAL
- en: Code I use in my medium blog/articles. Contribute to egorhowell/Medium-Articles
    development by creating an account on…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Software%20Engineering%20/make-example?source=post_page-----1595f39e0704--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References & Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*More info on make for data science*](https://datasciencesouth.com/blog/make)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Makefile tutorial*](https://makefiletutorial.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another Thing!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----1595f39e0704--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  prefs: []
  type: TYPE_NORMAL
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----1595f39e0704--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Connect With Me!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**YouTube**](https://www.youtube.com/@egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**GitHub**](https://github.com/egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
