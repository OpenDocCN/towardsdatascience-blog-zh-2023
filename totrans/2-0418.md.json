["```py\nfrom collections import defaultdict  # For counting members by age.\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import patches  # For drawing boxes on the plot.\nimport pandas as pd\nimport seaborn as sns\n```", "```py\n# Prepare generational data for plotting as boxes on chart:\nCURRENT_YEAR = 2023\n_GEN_NAMES = ['Silent', 'Boomers', 'Gen X', 'Millennials', 'Gen Z']\n_GEN_START_YR = [1928, 1946, 1965, 1981, 1997]\n_GEN_END_YR = [1945, 1964, 1980, 1996, 2012]  \n_GEN_START_AGE = [CURRENT_YEAR - x for x in _GEN_END_YR]\n_GEN_END_AGE = [CURRENT_YEAR - x for x in _GEN_START_YR]\n_GEN_COLORS = ['lightgray', 'white', 'lightgray', 'white', 'lightgray']\n```", "```py\n# Load the data:\ndf = pd.read_csv('https://bit.ly/3EdQrai')\n\n# Assign the current date:\ncurrent_date = pd.to_datetime('8/25/2023')\n\n# Convert \"Birthday\" column to datetime:\ndf['Birthday'] = pd.to_datetime(df['Birthday'])\n\n# Make a new \"Age\" column in years:\ndf['Age'] = ((current_date - df['Birthday']).dt.days) / 365.25\ndf['Age'] = df['Age'].astype(int)\n\ndf.head(3)\n```", "```py\n# Initialize count columns:\ndf['R count house'] = 0\ndf['D count house'] = 0\ndf['R count senate'] = 0\ndf['D count senate'] = 0\n\n# Create dictionaries with default values of 0:\nr_count_h_dict = defaultdict(int)\nd_count_h_dict = defaultdict(int)\nr_count_s_dict = defaultdict(int)\nd_count_s_dict = defaultdict(int)\n\n# Iterate through the DataFrame and update counts:\nfor index, row in df.iterrows():\n    age = row['Age']\n    if row['Branch'] == 'House':\n        if row['Party'] == 'R':\n            r_count_h_dict[age] += 1\n            df.at[index, 'R count house'] = r_count_h_dict[age]\n        elif row['Party'] == 'D':\n            d_count_h_dict[age] -= 1\n            df.at[index, 'D count house'] = d_count_h_dict[age]\n    elif row['Branch'] == 'Senate':\n        if row['Party'] == 'R':\n            r_count_s_dict[age] += 1\n            df.at[index, 'R count senate'] = r_count_s_dict[age]\n        elif row['Party'] == 'D':\n            d_count_s_dict[age] -= 1\n            df.at[index, 'D count senate'] = d_count_s_dict[age]\n        elif row['Party'] == 'I':\n            d_count_s_dict[age] -= 1\n            df.at[index, 'D count senate'] = d_count_s_dict[age]\n\ndf.head(3)\n```", "```py\n# Filter out zero values:\nmask = df != 0\n\n# Apply the mask to the DataFrame:\ndf = df[mask]\n\ndf.head(3)\n```", "```py\ndef make_plot(data, ax, x, color, title):\n    \"\"\"Make a custom seaborn scatterplot with annotations.\"\"\"\n    sns.scatterplot(data=data, \n                    x=x, \n                    y='Age', \n                    marker='$\\u25AC$', \n                    color=color, \n                    edgecolor=color, \n                    ax=ax, \n                    legend=False)\n\n    # Set the border positions and visibility:\n    ax.spines.left.set_position('zero')\n    ax.spines.right.set_color('none')\n    ax.spines.top.set_color('none')\n    ax.spines.bottom.set_color('none')\n\n    # Set x and y limits, ticks, labels, and title:\n    ax.set_xlim(-15, 15)\n    ax.set_ylim(25, 100)\n    ax.tick_params(bottom=False)\n    ax.set(xticklabels=[])\n    ax.set(yticklabels=[])\n    ax.set_xlabel('')\n    ax.set_ylabel('')\n    ax.set_title(title)\n\n    # Manually annotate the y-axis along the right border:\n    ax.text(x=12.5, y=96, s='Age')\n    ax.set_yticks(np.arange(30, 101, 10))\n    ylabels = [30, 40, 50, 60, 70, 80, 90]\n    for label in ylabels:\n        ax.text(x=13, y=label, s=str(label))\n\n    # Add shading and annotation for each generation:\n    for _, (name, start_age, end_age, gcolor) in enumerate(zip(_GEN_NAMES, \n                                                               _GEN_START_AGE,\n                                                               _GEN_END_AGE, \n                                                               _GEN_COLORS)):\n        rect = patches.Rectangle((-15, start_age), \n                                 width=30, \n                                 height=end_age - start_age, \n                                 facecolor=gcolor, \n                                 alpha=0.3)\n        rect.set_zorder(0)  # Move shading below other elements.\n        ax.add_patch(rect)\n        ax.text(x=-15, y=end_age - 2, s=name)\n\n    plt.tight_layout()\n```", "```py\n# Make the figure and call the plotting function:\nfig, (ax0, ax1) = plt.subplots(nrows=1, ncols=2, figsize=(8, 5))\nmake_plot(df, ax0, 'D count house', 'blue', 'House' )\nmake_plot(df, ax0, 'R count house', 'firebrick', 'House')\nmake_plot(df, ax1, 'D count senate', 'blue', 'Senate')\nmake_plot(df, ax1, 'R count senate', 'firebrick', 'Senate')\n\n# Add figure title and custom legend:\nfig.suptitle('Age of US Congress 2023')\nax0.text(x=-15, y=17, s='$\\u25AC$ Democrat & Independent', color='blue')\nax0.text(x=1.7, y=17, s='$\\u25AC$ Republican', color='firebrick');\n\n# Optional line to save figure:\n# plt.savefig('age_of_congress.png', bbox_inches='tight', dpi=600)\n```"]