["```py\ndf1 = pd.read_csv('chocolate_trade_2012_2022.csv', encoding='iso-8859-1')\ndf2 = pd.read_csv('chocolate_trade_2002_2012.csv', encoding='iso-8859-1')\n\ndf = df1.append(df2)\nprint(len(df))\ndf.head(5)\n```", "```py\nprint(df.keys())\n```", "```py\n# compute the number of missing values\nfeatures_to_kep = ['PartnerDesc', 'ReporterDesc',  'PrimaryValue', 'GrossWgt', 'RefYear']\n\nprint('Get the fraction of missing values:')\nfor feat in features_to_kep:\n    print(feat,round((len(df)- len(df.dropna(subset = [feat])))/len(df),3))\n```", "```py\n# filter the data\nprint(len(df))\ndf = df[['PartnerDesc', 'ReporterDesc',  'PrimaryValue', 'GrossWgt', 'RefYear']]\ndf2 = df.dropna(subset = ['PrimaryValue'])\ndf2 = df2[df2.PrimaryValue>0]\ndf2 = df2[df2.ReporterDesc != 'World']\ndf2 = df2[df2.PartnerDesc != 'World']\nprint(len(df2))\ndf2.head(3)\n```", "```py\nimport matplotlib.pyplot as plt\n\n# this function does some nice formatting on the axis and labels\ndef format_axis(ax):   \n    for pos in ['right', 'top']:   ax.spines[pos].set_edgecolor('w')    \n    for pos in ['bottom', 'left']: ax.spines[pos].set_edgecolor('k')         \n    ax.tick_params(axis='x', length=6, width=2, colors='k')\n    ax.tick_params(axis='y', length=6, width=2, colors='k') \n    for tick in ax.xaxis.get_major_ticks():  tick.label.set_fontsize(12) \n    for tick in ax.yaxis.get_major_ticks():  tick.label.set_fontsize(12)\n\nf, ax = plt.subplots(1,4,figsize=(15,4))\n\nax[0].hist(df2['PrimaryValue'], bins = 20)\nax[1].hist(df2['GrossWgt'], bins = 20)\nax[2].hist(df2['RefYear'], bins = 8)\nax[3].scatter(df2['PrimaryValue'], df2['GrossWgt'], alpha = 0.1)\n\nax[0].set_ylabel('Number of records', fontsize = 14)\nax[0].set_xlabel('PrimaryValue', fontsize = 14)\nax[1].set_xlabel('GrossWgt', fontsize = 14)\nax[2].set_xlabel('RefYear', fontsize = 14)\nax[3].set_ylabel('PrimaryValue', fontsize = 14)\nax[3].set_xlabel('GrossWgt', fontsize = 14)\n\nax[0].set_yscale('log')\nax[1].set_yscale('log')\n\nax[3].set_yscale('log')\nax[3].set_xscale('log')\n\nfor aax in ax: format_axis(aax)\n\nplt.tight_layout()\n```", "```py\ndf2.groupby(by = 'ReporterDesc').sum().sort_values(by = 'PrimaryValue', ascending = False)[['PrimaryValue']].head(10)\n```", "```py\n# get the list of overall top 10 countries\ntop10 = df2.groupby(by = 'ReporterDesc').sum().sort_values(by = 'PrimaryValue', ascending = False)[['PrimaryValue']].head(10).index.to_list()\ntop10_ranks = {t : [] for t in top10}\n\n# store the latest order here for the visualization\ntop10_latest = {}\n\n# for each year, create a ranking, and store them in a dictionary of lists\n# where each key is a country\nfor year in range(2002, 2023):\n\n    df2_year = df2[df2.RefYear==year]\n    df2_year = df2_year.groupby(by = 'ReporterDesc').sum().sort_values(by = 'PrimaryValue', ascending = False)[['PrimaryValue']]\n\n    df2_year['rank'] = [1 + i for i in range(len(df2_year))]\n\n    for c, r in df2_year.to_dict()['rank'].items():\n        if c in top10_ranks:\n            top10_ranks[c].append((year, r))\n            if year == 2022:\n                top10_latest[c] = r\n\ntop10_latest = [c for c, r in sorted([(c, r) for c, r in top10_latest.items()], key=lambda x: x[1])]            \ntop10_ranks \n```", "```py\nf, ax = plt.subplots(1,1,figsize=(15,5))\n\nfor country in top10_latest:\n\n    ranks = top10_ranks[country]    \n    y, r = zip(*ranks)\n    ax.plot(y, r, 'o-', label = country, linewidth = 2)\n\nformat_axis(ax)\nax.set_ylim([13.5,0.5])\nax.set_xlim([2001,2023])\nax.legend(loc=(1.00, 0.14), frameon = False, handletextpad=.5, fontsize = 16)\nax.set_xlabel('Year', fontsize = 20)\nax.set_ylabel('Annual rank', fontsize = 20)\n```", "```py\nimport networkx as nx\nimport math\n\ndf2['Weight'] = [math.log(v) for v in df2.PrimaryValue.to_list()]\n\nG = nx.from_pandas_edgelist(df2, source='ReporterDesc', target='PartnerDesc', edge_attr= 'Weight', create_using = nx.DiGraph)\nG.number_of_nodes(), G.number_of_edges()\n```", "```py\ntop_value = max(df2.PrimaryValue)\ndf3 = df2[df2.PrimaryValue>top_value*0.001]\n\nG = nx.from_pandas_edgelist(df3, source='ReporterDesc', target='PartnerDesc', edge_attr= 'Weight', create_using = nx.DiGraph)\nG.number_of_nodes(), G.number_of_edges()\n\nG = nx.from_pandas_edgelist(df3, source='ReporterDesc', target='PartnerDesc', edge_attr= 'Weight', create_using = nx.DiGraph)\nG.number_of_nodes(), G.number_of_edges()\n```"]