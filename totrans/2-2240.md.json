["```py\nimport numpy as np\nX = np.array([[1, 2], [2, 1], [1, 3], [1, 2.5], [3.1, 5], [4, 10], [3.6, 5.4], [2, 3]])\n```", "```py\nplt.scatter(X[:,0], X[:,1])\nneurons = [[2,4], [2,8], [3,4], [3,8]]\n\nfor neuron in neurons:\n      plt.scatter(neuron[0], neuron[1], c='orange', s=400, edgecolor='black')\n```", "```py\nfrom minisom import MiniSom\n\nsom = MiniSom(\n 2, 2, 2, sigma=1, \n learning_rate=1, neighborhood_function=’gaussian’, random_seed=42)\n som.train(X, 100)\n```", "```py\nnodes = som.get_weights().reshape(4, 2)\n plt.scatter(nodes[:,0], nodes[:,1], c=’purple’, s=400, edgecolor=’black’)\n plt.show()\n```", "```py\nfinancial_valuation_data = pd.read_csv(‘/data/constituents-financials_csv.csv’)\n```", "```py\nfinancial_valuation_data[‘Volatility’] = (\n financial_valuation_data[’52 Week High’]-financial_valuation_data[’52 Week Low’]\n )/financial_valuation_data[’52 Week High’]\n```", "```py\nfinancial_valuation_data_subset = (\n financial_valuation_data[[‘Price/Earnings’,’Dividend Yield’,’Earnings/Share’,’Price/Sales’, ‘Price/Book’, ‘Volatility’]]\n)\n```", "```py\nscaled_data = StandardScaler().fit_transform(financial_valuation_data_subset)\nscaled_data = np.nan_to_num(scaled_data, nan=0)\n```", "```py\nsom = MiniSom(\n    15,\n    15,\n    6,\n    sigma=0.5,\n    learning_rate=1,\n    neighborhood_function='gaussian',\n    random_seed=42\n    )\n```", "```py\nnp.random.seed(42)\n\nnum_iterations = 1000\n\nq_errors = []\nfor i in range(1, num_iterations):\n som.train_batch(scaled_data, i)\n q_errors.append(som.quantization_error(scaled_data))\n```", "```py\nsom = MiniSom(\n 15, 15, 6, sigma=0.5,\n learning_rate=1, neighborhood_function=’gaussian’, random_seed=42)\nsom.train(scaled_data, 1000)\n```", "```py\nscaled_data[0]\n```", "```py\nsom.winner(scaled_data[0])\n```", "```py\nsom.winner(scaled_data[1])\n```", "```py\nfinancial_valuation_data[‘winner_node’] = (\n [som.winner(scaled_data[i]) for i in range(0, len(scaled_data))]\n)\n```", "```py\nfinancial_valuation_data.groupby(‘winner_node’).size().sort_values().tail(10)\n```", "```py\n(\n financial_valuation_data\n .loc[financial_valuation_data[‘winner_node’]\n .apply(lambda x: (x[0] == 4) & (x[1] == 0))]\n)\n```", "```py\n(\n    financial_valuation_data \n    .loc[financial_valuation_data['winner_node']\n         .apply(lambda x: (x[0] >= 9) & (x[0] <= 11) & (x[1] == 1))]\n)\n```", "```py\n(\n financial_valuation_data\n .loc[financial_valuation_data[‘winner_node’]\n .apply(lambda x: (x[0] >= 7) & (x[0] <= 8) & (x[1] == 12))]\n)\n```"]