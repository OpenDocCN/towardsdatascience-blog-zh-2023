- en: What is pyproject.toml in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/pyproject-python-9df8cc092f61](https://towardsdatascience.com/pyproject-python-9df8cc092f61)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Managing Python project dependencies in pyproject.toml files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://gmyrianthous.medium.com/?source=post_page-----9df8cc092f61--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----9df8cc092f61--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9df8cc092f61--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9df8cc092f61--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----9df8cc092f61--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9df8cc092f61--------------------------------)
    ·5 min read·May 9, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f52d5d1a92753c16cb2f548c0ac9aecd.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Fré Sonneveld](https://unsplash.com/@fresonneveld?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/s/photos/chain?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Dependency management in Python is tricky, and sometimes frustrating work. Newcomers,
    are usually tempted to install any dependency (i.e. package) they may find useful,
    even in a single virtual enviroment. Therefore, this approach increases the chances
    of having conflicting package dependencies and ending up in the so-called **dependency
    hell**.
  prefs: []
  type: TYPE_NORMAL
- en: In a couple of my previous articles, we covered a few different methods for
    handling dependencies in Python projects, using `setup.py`, `setup.cfg` and `requirements.txt`
    files. However, as of Python 3.6, a new standard configuration file called `pyproject.toml`
    was introduced, and aims to simplify the way users manage dependencies and metadata
    definitions.
  prefs: []
  type: TYPE_NORMAL
- en: Over the last few years, the `pyproject.toml` file has become the standard (and
    most popular) way for managing depdendeices in Python projects. In the next few
    sections we will explore how dependency management can be achieved using this
    file. Furthermore, we will also demonstrate how to install a Project with `pyproject.toml`
    specification in editable mode.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Subscribe to Data Pipeline**](https://thedatapipeline.substack.com/welcome)**,
    a newsletter dedicated to Data Engineering**'
  prefs: []
  type: TYPE_NORMAL
- en: Dependency management prior to pyproject.toml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When Python was first released, the defacto package used for building distributions
    was `distutils`. Over time, `setuptools` made its appearence aiming to build additional
    features on top of `distutils`. Both tools made use of a `setup.py` file where
    users could specify dependencies and metadata used as part of the package build
    distribution.
  prefs: []
  type: TYPE_NORMAL
- en: This however, has created an issue given that any project that chooses to use
    `setuptools` must be import the package in `setup.py` file. Therefore, `setup.py`
    cannot be executed without knowing its dependencies but at the same time, the
    purpose of the file itself is to determine these dependencies. And this is how
    we ended up with the so-called chicken and egg problem in Python dependency management.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this information is enough to understand why a new approach was required.
    If you are interested in learning more about a more detailed explanation of the
    chicken-and-egg problem with `setuptools` and `pip` make sure to read [PEP-518](https://peps.python.org/pep-0518/#rationale).
  prefs: []
  type: TYPE_NORMAL
- en: The new propasal, which is part of PEP-518, aimed to specify a new way for Python
    projects to list their dependencies upfront, so that tools like `pip` can make
    sure they are installed prior to the project build.
  prefs: []
  type: TYPE_NORMAL
- en: The pyproject.toml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `pyproject.tom` file was introduced as part of the Python Enhancement Proposal
    [(PEP) 518](https://peps.python.org/pep-0518/), that specifies how Python projects
    must specify build dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: These build dependeencies will be stored in the file that is located at the
    root directory of the project and follows the TOML (Tom’s Obvious, Minimal Language)
    syntax.
  prefs: []
  type: TYPE_NORMAL
- en: It contains metadata information such as the project name, version, description,
    author, license, and various other details.
  prefs: []
  type: TYPE_NORMAL
- en: One of the key features of the `pyproject.toml` file is the ability to define
    project dependencies. This allows developers to specify the packages and their
    versions required for the project to run properly. This helps in maintaining the
    consistency of the project and ensures that the project can be easily reproduced
    by other developers.
  prefs: []
  type: TYPE_NORMAL
- en: The `pyproject.toml` file also supports the concept of `extras` which allows
    developers to define optional dependencies for a project. This allows users to
    install only the necessary dependencies in order to run the project. Usually,
    in the `extras` section one could specify additional requirements that will be
    used as part of testing (e.g. `pytest`).
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the standard metadata and dependencies, `pyproject.toml` file
    also supports custom fields that can be used by third-party tools. As an example,
    you can consider linters, formatters and checkers such as `black` and `mypy`.
    This allows developers to extend the functionality of the file and add custom
    fields as per their requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Managing dependencies in `pyproject.toml`
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`pyprojet.toml` can be used with package dependency management tools, such
    as `setuptools` and `poetry`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example file for a project using `poetry`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s an example with `setuptools`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Installing project in editable mode from pyproject.toml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are actively developing a project, the chances are you may want to install
    the project locally in editable mode. When installing a package in editable mode
    from a specific location, any changes made to the source code will be reflected
    immediately in the environment (without you having to re-install the “new” version).
  prefs: []
  type: TYPE_NORMAL
- en: Assuming you are using `poetry` to manage your Python dependencies and in order
    to install a Python project in editable mode, you need to have the following content
    in your `pyproject.toml` file
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: and from the project’s root directory, simply run
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, a `poetry install` will also result in editable install. You
    can find out more on how to manage your Python projects’ dependencies with Poetry,
    in one of my latest articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/python-poetry-83f184ac9ed1?source=post_page-----9df8cc092f61--------------------------------)
    [## Managing Python Dependencies with Poetry'
  prefs: []
  type: TYPE_NORMAL
- en: Dependency management and packaging with Poetry
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/python-poetry-83f184ac9ed1?source=post_page-----9df8cc092f61--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In today’s article we discussed about the usage of `pyproject.toml` in Python
    when it comes to managing dependencies and distributing projects across the community.
  prefs: []
  type: TYPE_NORMAL
- en: Overall `pyproject.toml` provides a standard and easy-to-use configuration for
    Python projects. It simplifies the process of defining metadata and dependencies,
    and ensures that the project can be easily reproduced by other developers.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Subscribe to Data Pipeline**](https://thedatapipeline.substack.com/welcome)**,
    a newsletter dedicated to Data Engineering**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related articles you may also like**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/setuptools-python-571e7d5500f2?source=post_page-----9df8cc092f61--------------------------------)
    [## setup.py vs setup.cfg in Python'
  prefs: []
  type: TYPE_NORMAL
- en: Using setuptools to manage dependencies and distribute your Python packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/setuptools-python-571e7d5500f2?source=post_page-----9df8cc092f61--------------------------------)
    [](/requirements-vs-setuptools-python-ae3ee66e28af?source=post_page-----9df8cc092f61--------------------------------)
    [## requirements.txt vs setup.py in Python
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the purpose of requirements.txt, setup.py and setup.cfg in Python
    when developing and distributing…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/requirements-vs-setuptools-python-ae3ee66e28af?source=post_page-----9df8cc092f61--------------------------------)
    [](/python-poetry-83f184ac9ed1?source=post_page-----9df8cc092f61--------------------------------)
    [## Managing Python Dependencies with Poetry
  prefs: []
  type: TYPE_NORMAL
- en: Dependency management and packaging with Poetry
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/python-poetry-83f184ac9ed1?source=post_page-----9df8cc092f61--------------------------------)
  prefs: []
  type: TYPE_NORMAL
