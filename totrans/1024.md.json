["```py\nyear = 2015\n\ny = df[df['yr_built'] == year]['price'].agg(['count','median'])\n\nobserved_diff = abs(y['median'] - df['price'].median())\n```", "```py\nn_simulation = 1_000\n\nsampling = lambda x,y: x['price'].sample(n=int(y['count']))\n\nsim_diffs = np.asarray([\n    abs(sampling(df,y).median() - df['price'].median()) \n    for i in tqdm(range(n_simulation))\n])\n```", "```py\np_value = np.mean(sim_diffs >= observed_diff)\n```", "```py\nyear = 2015\n\ncv_scoring = lambda x,y: np.mean(cross_val_score(\n    RandomForestClassifier(10), \n    x, y, cv=5, scoring='roc_auc', n_jobs=-1, \n    error_score='raise'\n))\n\nobserved_score = cv_scoring(\n    df.drop(['yr_built','date','id'], axis=1), \n    (df['yr_built'] == year).astype(int)\n)\n```", "```py\nn_simulation = 1_000\n\nsim_scores = np.asarray([\n    cv_scoring(\n        df.drop(['yr_built','date','id'], axis=1), \n        (df['yr_built'] == year).sample(frac=1).astype(int)\n    )\n    for i in tqdm(range(n_simulation))\n])\n```", "```py\np_value = np.mean(sim_scores >= observed_score)\n```"]