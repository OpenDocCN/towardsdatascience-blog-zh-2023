- en: Setting up a flask application for Data Science
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/setting-up-a-flask-application-for-data-science-7522fc9f771e](https://towardsdatascience.com/setting-up-a-flask-application-for-data-science-7522fc9f771e)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The basic structure of a flask application to allow for modular development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://philip-wilkinson.medium.com/?source=post_page-----7522fc9f771e--------------------------------)[![Philip
    Wilkinson, Ph.D.](../Images/9811fa38963c29193b01a5cf856d014f.png)](https://philip-wilkinson.medium.com/?source=post_page-----7522fc9f771e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7522fc9f771e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7522fc9f771e--------------------------------)
    [Philip Wilkinson, Ph.D.](https://philip-wilkinson.medium.com/?source=post_page-----7522fc9f771e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7522fc9f771e--------------------------------)
    ·9 min read·Mar 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7e9b18fe28a0c2adf0b7354b9a41f272.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [KOBU Agency](https://unsplash.com/@kobuagency?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: A Data Science workflow often involves the use of notebooks and python scripts.
    These are great tools but it often means that your outputs can often remain in
    those files without seeing the light of day. A good way to change that however
    is by creating a website to show and discuss your findings or an API to serve
    your model to the rest of the world. One framework that can help in this regard
    is Flask.
  prefs: []
  type: TYPE_NORMAL
- en: Flask allows you to build both websites and APIs that allow you to share your
    results more broadly. Either through an interface that tells a store of your work
    and results or through an API that other people can call to get model predictions.
    Flask is a lightweight framework that is easy to learn and use, making it a good
    choice for Data scientists who want to focus on building their models and analysing
    data rather than learning complex web development frameworks. It is also in Python
    so many of the steps in a Data Science workflow can easily be transferred over
    to the Flask framework.
  prefs: []
  type: TYPE_NORMAL
- en: In this article I will show you how to set up the basic framework of a flask
    application that you can then build on. This will include explaining the basic
    structure of the application alongside what you would want to put in each file.
  prefs: []
  type: TYPE_NORMAL
- en: Flask project structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can start with an overview of the basic flask structure. This takes the
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'where:'
  prefs: []
  type: TYPE_NORMAL
- en: '`application/` directory contains the main flask application code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`static/` directory contains static files such as CSS stylesheets, Javascript
    scripts and images used in the website'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`templates/` directory contains HTML templates used by the flask application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__init__.py` initialises the flask application and sets up the configuration
    and database connections'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`routes.py` defines the routes for the flask application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tests/` directory contains the test files for the flask application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flask_env` contains the virtual environment for the Flask application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.env` file contains environment variables used by the Flask application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flask_config.py` contains the configuration settings for the Flask application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.py` is the entry point for the flask application and runs the flask development
    server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, how do we get started with this?
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started with building this flask application what you want to do is to
    create a Python virtual environment. This is good practice that helps to isolate
    the dependencies of the application from the global Python environment on your
    machine. This makes it easier to manage the dependencies and ensures that the
    application runs smoothly on different machines.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this you need to first open a terminal window and navigate to the directory
    where you want to create the virtual environment. You then run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this case I have called it `flask_application` but it is also common to just
    call in `env` as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then activate the environment using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'and install common libraries. In this case, the basic libraries that we will
    be using are `flask` (of course), `python-dotenv` and `pytest` . To install these
    you can then run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: which should then be installed in your virtual environment. Note that sometimes
    this may take some time so don’t be too worried!
  prefs: []
  type: TYPE_NORMAL
- en: 'It is good practice that when changes are made to the virtual environment,
    such as installing new libraries, you freeze the requirements so that anyone else
    knows what libraries you are using and their version. This can be done using the
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: which creates the requirements.txt file. This will make it easier for anyone
    else to replicate your environment on their own machine.
  prefs: []
  type: TYPE_NORMAL
- en: Base level files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once your have the virtual environment set up and the `requirements.txt` file
    created then you want to start building your application up. We can therefore
    start with the files located at the bottom of the directory structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The file you will want to start off with is the `.env` file which is used to
    set the environment variables for the application. To start off with, this will
    look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Where the first line tells the Flask application that the application file is
    called `app.py` (not yet created). When using the `flask run` command, this will
    tell the application to run the `app.py` file to get the application started.
  prefs: []
  type: TYPE_NORMAL
- en: We also start with a development environment as this is only on our local machine
    for now. For this we set `FLASK_ENV = development` and `FLASK_DEBUG=1` which tells
    us that we have a development environment and to run the flask debugger when the
    environment starts. This allows for hot reloading so that when you make any changes
    to the code you don’t have to restart the instance to see those in the browser!
  prefs: []
  type: TYPE_NORMAL
- en: 'The final line in this file then is the secret key. This is a cryptographic
    key that is used to encrypt session data and other sensitive data that is transmitted
    between the client and server and is an important security measure. In this case
    we use a 16 bit key which is generated using the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This file can then be added to if you have any other information or keys that
    you want the application to use such as API Keys, which can be set in this file.
    Since these are environment variables it is common to use snake case (spaces replaced
    with `_` ) where all the letters are capitalised.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you don’t actually want to share your secrets or API keys with anyone
    unless you are working with them and you only want to do that securely. That is
    why you duplicate the `.env` file to create the `.env.template` file and remove
    any information you want to keep secret. Other developers can then use the `.env.template`
    file to create their own `.env` file with their own keys and information if necessary,
    or you could securely share your own keys if need be.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that in your `.gitignore` file, you will simply only need to write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: which will tell git to ignore any changes to the `.env` file to ensure that
    your secrets are not shared.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next stage is then creating the `flask_config.py` file which is used to
    create a configuration object for your application. In our case this takes the
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: which uses the `SECRET_KEY` variable defined in the `.env` file. If the secret
    is not present then an error is raised and the application is stopped from running.
    This is used to ensure that the application runs as expected and is secure and
    can be added to if you have any other configuration parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally then, we have the `app.py` file which is the entry point for the Flask
    application and is used to run the Flask development server. At the moment, this
    simply contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: which imports the `app` from the `application` folder and runs it. With the
    base structure in place, we can then move on to create the application structure.
  prefs: []
  type: TYPE_NORMAL
- en: Application structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We create an `application` folder within the repository to organise the application
    code and resources in a structured and modular way. Specifically, this structure
    enables the application to be extended into a more comprehensive application if
    needed, by allowing for the creation of multiple routes, models, viewmodels and
    templates that can be utilised in the final application and improves the maintainability
    and scalability of the code. For now, however, we only need a simple structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can start of by creating the `__init__.py` file which is used to intialise
    the application when it is called from the `app.py` file from the base folder.
    This contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Which imports the `flask` library and the `Config` object, initialises the app
    and then imports the routes.
  prefs: []
  type: TYPE_NORMAL
- en: Importantly, we can see that no routes or views are defined in this file. To
    maintain a modular structure, these routes which determine what the application
    does, are defined in the `routes.py` file, separate from the initalisation.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can thus define the `routes.py` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two main things to notice here:'
  prefs: []
  type: TYPE_NORMAL
- en: The strange decorator syntax where `@app.route("/")` is used. This decorator
    is used to define routes that users of the application can take and takes a URL
    pattern argument and associates it with a view function. In this example, we define
    a route for the root URL (`/`) and associated it with the `index()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `index()` function, rather than returning a value, instead returns the function
    `render_template("index.html")` . This function, provided by flask, is used to
    allow functions to return HTML templates that are predefined.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So what are these HTML templates?
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, in the `index()` function we return the `index.html` template. From the
    file structure this is located in the `templates` folder and contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: What this is then is essentially an HTML file that in our case simply shows
    “Hello World” which can be seen between the `<h1></h1>` tags in the `container`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve also added in some extra bits here in the head and body which primarily
    is used to import bootstrap, a CSS framework that makes developing much easier,
    and JQuery, which makes adding interactivity much easier to the application. But
    these can be ignored if you so wish and you can simply define `<h1>Hello World!</h1>`
    in the body!
  prefs: []
  type: TYPE_NORMAL
- en: Other files and folders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What we’ve then covered is the basic structure of the application and what
    it contains but there are also some other files and folders that have not been
    covered:'
  prefs: []
  type: TYPE_NORMAL
- en: '`application/templates` — This folder will contain all the HTML templates that
    the application will use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/templates/includes` — This folder can contain supplementary HTML
    structures that you may want to include in your layout or other files such as
    a navbar, footer or a jumbotron'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tests` — This folder will contain all your tests for the flask application
    is split into two further folders for`functional` and `unit` tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`static` — This folder contains all your static files that are used in the
    application and includes the `css` , `images` and `scripts` that may be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have all the structure in place and the environment set up and
    running all you have to do is run the command `flask run` . You should then see
    something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ccd19436518b7859f97b988e65facc57.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: which tells you the application is live and is running on `http://127.0.0.1:5000`
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that you should then be able to navigate to this URL in your browser
    or to `localhost:5000` and see the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/41cce9b6fffbf6d7c600ecef90dd6a57.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Which shows that the application is running! Congratulations, you have run your
    first flask app!
  prefs: []
  type: TYPE_NORMAL
- en: Extending the functionality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Beyond the basic structure shown here, flask has considerable flexibility to
    allow for a variety of different extensions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Flask-wtf: A library that can handle getting input from users in a secure and
    reliable way'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Flask-SQLAlchemy: A library that allows you to integrate with the SQLAlchemy
    ORM and hence with databases (there are also other libraries interaction with
    other common databases such as MongoDB)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Flask-Login: A library that provides user authentication functionality if you
    want to manage access to certain parts of your application based on user roles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Among many more libraries and use cases! This structure facilitates these extensions
    by allowing you to build up the application in a modular way, improving maintainability,
    scalability and the modularity of the code. Whether you want to serve an API over
    the routes to your machine learning algorithm or you want to showcase your story
    in a website!
  prefs: []
  type: TYPE_NORMAL
- en: 'Code for this post is available at: [https://github.com/PhilipDW183/flask_structure](https://github.com/PhilipDW183/flask_structure)'
  prefs: []
  type: TYPE_NORMAL
