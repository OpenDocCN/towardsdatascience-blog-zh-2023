- en: 'Conquer Retries in Python Using Tenacity: An End-to-End Tutorial'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/conquer-retries-in-python-using-tenacity-an-in-depth-tutorial-3c98b216d798](https://towardsdatascience.com/conquer-retries-in-python-using-tenacity-an-in-depth-tutorial-3c98b216d798)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PYTHON TOOLBOX](https://medium.com/@qtalen/list/python-toolbox-4289824c6407)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Enhancing your Python projects with robust retry mechanisms and error-handling
    techniques
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://qtalen.medium.com/?source=post_page-----3c98b216d798--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----3c98b216d798--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3c98b216d798--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3c98b216d798--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----3c98b216d798--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3c98b216d798--------------------------------)
    ·5 min read·Jul 1, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7d3089c27ffefc03c909a68dcb0d46b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Often, trying one more time leads to success. Photo Credit: Created by Author,
    [Canva](https://www.canva.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: This article will discuss Tenacity’s basic usage and customization capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: This instrumental Python library provides a retry mechanism. We will also explore
    Tenacity’s retry and exception-handling capabilities through a practical example.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine you’re managing hundreds of web services, some located overseas (with
    high latency) and others pretty old (and not very stable). How would you feel?
  prefs: []
  type: TYPE_NORMAL
- en: 'My colleague Wang is in such a predicament. He told me that he was pretty frustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: Every day, he needs to check the invocation status of these remote services,
    and he often encounters timeout issues or other anomalies. Troubleshooting is
    particularly challenging.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, much of the client-side code was written by his predecessors, making
    it challenging to perform substantial refactoring. So, the services have to continue
    running as they are.
  prefs: []
  type: TYPE_NORMAL
- en: It would be great if there was a way to automatically reconnect these remote
    calls after an exception occurs. With tears in his eyes, Wang looked at me.
  prefs: []
  type: TYPE_NORMAL
- en: 'I assured him it was no problem and introduced him to a new tool from my toolbox:
    `Tenacity`. With just one decorator, the existing code can gain retry capabilities.
    Let’s see how to use it.'
  prefs: []
  type: TYPE_NORMAL
- en: Installation and Basic Usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since Tenacity’s official website only offers a simple API document, let’s start
    with the library’s installation and some basic usage.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you’re using pip, simply run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’re using Anaconda, Tenacity is not in the default channel, so you need
    to install it from `conda-forge`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Basic usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After installing Tenacity, let’s look at some basic usage of the library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply add an `@retry` decorator and your code will have retry capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want your code to stop retrying after a certain number of attempts,
    you can write it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, to avoid frequent retries that may exhaust connection pools, I recommend
    adding a waiting time before each retry. For example, if you want to wait for
    2 seconds before each connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Although it’s not mentioned in the documentation, I prefer to wait an extra
    second longer than the last time before each retry to minimize resource waste:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, if the retry is caused by an `exception` being thrown in the method,
    it is best to throw the `exception` back out. This allows for more flexible exception
    handling when calling the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Advanced Features: Custom Callbacks'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to some common use cases, you may add your own retry determination
    logic, such as deciding based on the result of the method execution or printing
    the method invocation parameters before execution.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we can use `Custom Callbacks` for customization.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to extend `Custom Callbacks`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'One is the recommended approach from the documentation: writing an extension
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: This method will be passed a `RetryCallState` instance as a parameter when executed.
  prefs: []
  type: TYPE_NORMAL
- en: Through this parameter, we can obtain the wrapped method, the parameters of
    the method call, the returned result, and any thrown exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we can use this approach to judge the return value of a method
    and retry if the value is even:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Of course, before making this judgment, if an `exception` is thrown, retry directly.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to pass additional parameters in the extension method, you can add
    a wrapper outside the extension method.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, this wrapper will pass a `logger` parameter. When the number of
    retries exceeds two, it will print the retry time, method name, and method parameters
    to the log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Real-World Network Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, to give you a deep impression of using `Tenacity` in your projects,
    I will use a remote client project as an example to demonstrate how to integrate
    Tenacity’s powerful capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: This project will simulate accessing an HTTP service and deciding whether or
    not to retry based on the returned `status code`.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, to avoid wasting server resources due to long connection wait times,
    I will also add a 2-second timeout for each request. If a timeout occurs, the
    connection will be retried.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0fff2a947e57c17abb07b946af8fe3f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Flow chart of the project. Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Before starting the code, I will implement several extension methods. One of
    the methods is to judge when a method’s retry count exceeds two, and print a warning
    message in the log:'
  prefs: []
  type: TYPE_NORMAL
- en: Another extension method is to judge the returned `status code`. If the status
    code is greater than 300, retry. Of course, timeouts will also trigger retries.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we have the implementation of the remote call method. After writing the
    method, remember to add Tenacity’s retry decorator. The strategy I use here is
    to retry up to 20 times, waiting for 1 second longer than the previous retry before
    each retry.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, don’t forget to add the two extension methods we just implemented:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/21a0313daa6f3532642772706b958ed4.png)'
  prefs: []
  type: TYPE_IMG
- en: After several retries, I finally got the correct result. Screenshot by Author
  prefs: []
  type: TYPE_NORMAL
- en: Mission complete! Wasn’t that super simple?
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I’m glad I helped Wang solve another problem.
  prefs: []
  type: TYPE_NORMAL
- en: By using `Tenacity`, we can easily equip existing code with various retry mechanisms,
    thereby enhancing the robustness and self-recovery capabilities of the program.
  prefs: []
  type: TYPE_NORMAL
- en: I would be even happier if this library could help you solve problems. Feel
    free to leave a comment and discuss.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides improving code execution speed and performance, using various tools
    to improve work efficiency is also a performance enhancement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Peng Qian](../Images/fa6bd24b4781f623be8ea40c4e6bdb78.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Peng Qian](https://qtalen.medium.com/?source=post_page-----3c98b216d798--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Python Toolbox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[View list](https://qtalen.medium.com/list/python-toolbox-4289824c6407?source=post_page-----3c98b216d798--------------------------------)6
    stories![Seaborn 0.12: An Insightful Guide to the Objects Interface and Declarative
    Graphics](../Images/6c1f4ca8d7b82c288cb229b73f560c04.png)![Supercharge Your Python
    Asyncio With Aiomultiprocess: A Comprehensive Guide](../Images/9c366de04067cd0ec1b30d9ce223011b.png)![Conquer
    Retries in Python Using Tenacity: An In-depth Tutorial](../Images/e636d5546f5826d60865c6a95f976fa8.png)[](https://medium.com/@qtalen/membership?source=post_page-----3c98b216d798--------------------------------)
    [## Join Medium with my referral link - Peng Qian'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@qtalen/membership?source=post_page-----3c98b216d798--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'This article was originally published at: [https://www.dataleadsfuture.com/conquer-retries-in-python-using-tenacity-an-end-to-end-tutorial/](https://www.dataleadsfuture.com/conquer-retries-in-python-using-tenacity-an-end-to-end-tutorial/)'
  prefs: []
  type: TYPE_NORMAL
