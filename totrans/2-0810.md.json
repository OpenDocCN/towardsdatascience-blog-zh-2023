["```py\npip install ultralytics\n```", "```py\nyolo detect predict model=yolov8x.pt source=\"img.jpg\" save=True\n```", "```py\nfrom ultralytics import YOLO\n\nmodel = YOLO('yolov8x.pt')\nresults = model('img.jpg', save=True)\n```", "```py\nyolo detect predict model=yolov8m.pt source=\"vid.mp4\" save=True\n```", "```py\nfrom ultralytics import YOLO\n\nmodel = YOLO('yolov8m.pt')\nresults = model('vid.mp4', save=True)\n```", "```py\nyolo detect predict model=yolov8n.pt source=0 show=True\n```", "```py\nfrom ultralytics import YOLO\n\nmodel = YOLO('yolov8n.pt')\nmodel.predict(source=\"0\", show=True)\n```", "```py\nimport cv2\nimport supervision as sv\nfrom ultralytics import YOLO\n\ndef main():\n\n    # to save the video\n    writer= cv2.VideoWriter('webcam_yolo.mp4', \n                            cv2.VideoWriter_fourcc(*'DIVX'), \n                            7, \n                            (1280, 720))\n\n    # define resolution\n    cap = cv2.VideoCapture(0)\n    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)\n    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)\n\n    # specify the model\n    model = YOLO(\"yolov8n.pt\")\n\n    # customize the bounding box\n    box_annotator = sv.BoxAnnotator(\n        thickness=2,\n        text_thickness=2,\n        text_scale=1\n    )\n\n    while True:\n        ret, frame = cap.read()\n        result = model(frame, agnostic_nms=True)[0]\n        detections = sv.Detections.from_yolov8(result)\n        labels = [\n            f\"{model.model.names[class_id]} {confidence:0.2f}\"\n            for _, confidence, class_id, _\n            in detections\n        ]\n        frame = box_annotator.annotate(\n            scene=frame, \n            detections=detections, \n            labels=labels\n        ) \n\n        writer.write(frame)\n\n        cv2.imshow(\"yolov8\", frame)\n\n        if (cv2.waitKey(30) == 27): # break with escape key\n            break\n\n    cap.release()\n    writer.release()\n    cv2.destroyAllWindows()\n\nif __name__ == \"__main__\":\n    main()\n```"]