- en: 'AI Search Algorithms: A Deep Dive into the Most Popular Ones'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 人工智能搜索算法：深入了解最受欢迎的算法
- en: 原文：[https://towardsdatascience.com/ai-search-algorithms-a-deep-dive-into-the-most-popular-ones-2760679368bb](https://towardsdatascience.com/ai-search-algorithms-a-deep-dive-into-the-most-popular-ones-2760679368bb)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/ai-search-algorithms-a-deep-dive-into-the-most-popular-ones-2760679368bb](https://towardsdatascience.com/ai-search-algorithms-a-deep-dive-into-the-most-popular-ones-2760679368bb)
- en: Going through four of the most-used search algorithms in AI
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍四种最常用的人工智能搜索算法
- en: '[](https://polmarin.medium.com/?source=post_page-----2760679368bb--------------------------------)[![Pol
    Marin](../Images/a4f69a96717d453db9791f27b8f85e86.png)](https://polmarin.medium.com/?source=post_page-----2760679368bb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2760679368bb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2760679368bb--------------------------------)
    [Pol Marin](https://polmarin.medium.com/?source=post_page-----2760679368bb--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://polmarin.medium.com/?source=post_page-----2760679368bb--------------------------------)[![Pol
    Marin](../Images/a4f69a96717d453db9791f27b8f85e86.png)](https://polmarin.medium.com/?source=post_page-----2760679368bb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2760679368bb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2760679368bb--------------------------------)
    [Pol Marin](https://polmarin.medium.com/?source=post_page-----2760679368bb--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2760679368bb--------------------------------)
    ·11 min read·Aug 23, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2760679368bb--------------------------------)
    ·阅读时间 11 分钟·2023年8月23日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/b054060379f1a626a70cb89b3b1a1aa8.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b054060379f1a626a70cb89b3b1a1aa8.png)'
- en: Photo by [Mitchell Luo](https://unsplash.com/@mitchel3uo?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由 [Mitchell Luo](https://unsplash.com/@mitchel3uo?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 提供的照片
- en: It’s as if we don’t have enough humans on Earth, that we’ve been trying for
    years to create machines that behave like us. We create mathematical models or
    agents that act rationally, so we don’t have to rely on other human beings’ decisions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 就好像地球上人类还不够一样，我们已经尝试了多年创造行为类似于我们的机器。我们创建数学模型或代理，行为理性，以便我们不必依赖其他人的决策。
- en: Search algorithms were the most used for a long time, but with the rise of machine
    and deep learning, they’ve kind of taken a seat back. However, I think all data
    scientists should know about them because they are an amazing toolset that will
    prove useful in many situations.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索算法曾经是最常用的，但随着机器学习和深度学习的兴起，它们的使用有所减少。然而，我认为所有的数据科学家都应该了解它们，因为它们是一个极其有用的工具集，在许多情况下都能发挥作用。
- en: 'They can be applied in many situations, but the most representative ones are
    games: tic tac toe, maze, even chess… And we’ll use these to explain the algorithms
    we’ll be visiting today.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这些算法可以应用于许多情况，但最具代表性的是游戏：井字棋、迷宫、甚至国际象棋……我们将用这些来解释今天将要讨论的算法。
- en: We’ll be introducing four of the most famous ones and we’ll be expanding a little
    bit on them, using some practical and visual examples.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍四种最著名的搜索算法，并将通过一些实用和直观的例子对它们进行详细讲解。
- en: As always, refer to the **Resources** section at the bottom of this article
    for more info and code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，请参阅本文底部的 **资源** 部分以获取更多信息和代码。
- en: But before that, we need to introduce some definitions to understand some key
    terms.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但在此之前，我们需要介绍一些定义，以便理解一些关键术语。
- en: Terminology
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 术语
- en: '**Agent**: it’s the human, model, or algorithm that interacts with its environment.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理**：它是与环境互动的人、模型或算法。'
- en: '**State**: a particular environment or set of elements that represent the problem
    at a given moment.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态**：在特定时刻表示问题的环境或元素集合。'
- en: '**State space**: the set of all possible reachable states.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态空间**：所有可能到达的状态的集合。'
- en: '**Goal state**: the final state, where certain conditions are met.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标状态**：最终状态，满足特定条件的状态。'
- en: '**Action**: a function or decision the agent must make in a given state to
    move to the next one.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动作**：代理在给定状态下必须做出的功能或决策，以便转移到下一个状态。'
- en: We could define more terms but these are the basic-most ones, enough for today’s
    topic.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以定义更多术语，但这些是最基本的术语，足以涵盖今天的主题。
- en: Representation
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表示
- en: AI Search Algorithms are usually explained using graphs and we won’t change
    the status quo today.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 人工智能搜索算法通常使用图来解释，今天我们不会改变现状。
- en: 'Here’s a sample graph:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个示例图：
- en: '![](../Images/f6c04074d7aaf42713247bfdce3b4128.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f6c04074d7aaf42713247bfdce3b4128.png)'
- en: Sample graph we’ll use to explain the concepts — image by the author
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用来解释概念的示例图——作者提供的图像
- en: In a graph, each node is a state. And we always have the **initial state** (A
    in this case, in green) and the **goal state** (which I’ve decided it’ll be E,
    in red). It's through the **actions** we defined in the previous section that
    our agent can move from one state to the next and repeat that successively until
    we reach the goal state.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在图中，每个节点是一个状态。我们总是有**初始状态**（在这个例子中是A，绿色）和**目标状态**（我决定是E，红色）。正是通过我们在前一节中定义的**动作**，我们的代理才能从一个状态移动到下一个状态，并反复执行，直到达到目标状态。
- en: All the nodes, from A to F, define the **state space**.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从A到F的所有节点定义了**状态空间**。
- en: What differs then is the algorithm we use to get from A to E. And that’s what
    we’ll start exploring next.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 那么不同之处在于我们从A到E的算法。这就是我们接下来要开始探索的内容。
- en: Depth First Search
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深度优先搜索
- en: The Depth First Search (DFS)[1] algorithm is one of the **uninformed search
    algorithms**, in which the only information we have is the one provided in the
    problem definition.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 深度优先搜索（DFS）[1] 算法是**非信息型搜索算法**之一，其中我们只有在问题定义中提供的信息。
- en: In other words, in an uninformed search algorithm, we know where we want to
    go — we want to reach the goal state E — but we don’t know how close or far we
    are from it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，在一个非信息型搜索算法中，我们知道我们想要去哪里——我们想达到目标状态E——但我们不知道距离目标有多近或多远。
- en: The Depth First Search in particular keeps on moving forward until it reaches
    a leaf node. At each bifurcation it might encounter, it randomly selects one direction
    and keeps on moving forward.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 深度优先搜索特别是不断向前移动，直到到达叶节点。在每个可能遇到的分叉点，它随机选择一个方向并继续前进。
- en: If the leaf node we reach is the goal state, then we’re done. But if it’s not,
    then it goes up again to the last bifurcation and keeps on moving forward. This
    process is repeated recursively until we get to the goal state.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们到达的叶节点是目标状态，那我们就完成了。但如果不是，那它会再次上升到最后的分叉点，并继续向前移动。这个过程会递归重复，直到我们到达目标状态。
- en: 'Let’s see it now:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看：
- en: '![](../Images/3c95b2c864a81e567d60f541f5d3eb82.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3c95b2c864a81e567d60f541f5d3eb82.png)'
- en: The first action applied — image by the author
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个应用的动作——作者提供的图像
- en: From the initial state A, we can only move towards B. So, after the action takes
    place, our agent will be in that second state. Then comes the bifurcation, and
    we need to choose. As DFS is an uninformed type of algorithm, it chooses randomly
    because we know nothing about which one is best. Let’s suppose it chose F instead
    of C.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从初始状态A，我们只能移动到B。因此，在动作发生后，我们的代理将处于那个第二个状态。然后到达分叉点，我们需要做出选择。由于DFS是一个非信息型算法，它会随机选择，因为我们不知道哪个是最佳选择。假设它选择了F而不是C。
- en: '![](../Images/b338de4f49ee8c9e3dbf9061730aa8b4.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b338de4f49ee8c9e3dbf9061730aa8b4.png)'
- en: DFS second decision — image by the author
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: DFS 第二次决策——作者提供的图像
- en: As the algorithm is trained to go in-depth until it explores other branches,
    it will have to again decide between going to D and E. If it chose E, we’d be
    done. But we’re unlucky this time and it randomly goes to D.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于算法被训练为深入探索，直到探索其他分支，它将不得不再次在D和E之间做出决定。如果它选择了E，那我们就完成了。但这次我们运气不好，它随机选择了D。
- en: '![](../Images/56664120de80a6334313d9c3704fcce2.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/56664120de80a6334313d9c3704fcce2.png)'
- en: Possible DFS implementation — image by the author
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的DFS实现——作者提供的图像
- en: At this point, the algorithm has visited A, B, F, and D. Being at D, there’s
    only one direction possible and it takes us to E. There, we’re done.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，算法已经访问了A、B、F和D。处于D时，只剩一个方向，它将我们带到E。在那里，我们就完成了。
- en: This algorithm is simple yet effective in multiple cases. It follows the last-in
    first-out strategy and that’s why it could be implemented using a stack.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个算法在多个情况下简单有效。它遵循先进后出的策略，这就是为什么可以使用栈来实现它。
- en: In our example, the optimal solution gets us from A to E in 3 steps, but it’s
    not guaranteed. In fact, the example we followed took us 4 actions.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，最优解决方案将我们从A到E需要3步，但这并不保证。事实上，我们遵循的例子用了4个动作。
- en: Breadth-First Search
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 广度优先搜索
- en: 'Breadth First Search or BFS[2] is another type of uninformed search algorithm
    and we could say it’s the opposite of DFS: instead of going deep branch by branch,
    it doesn’t reach the next depth level until all nodes from the previous level
    have been explored.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'While we used a stack in DFS, here we use a queue: it follows the first-in-first-out
    strategy.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Again, let’s traverse the graph to see it visually. It goes from A to B as we
    saw previously, we have no alternative here. Then we arrive at the bifurcation
    at B and, as it’s an uninformed algorithm, we simply choose randomly between C
    and F. We’ll basically be exploring both, it’s just a matter of which one we explore
    first.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/57cfeb2f89179eb61ec809430442204b.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: 'Second step of BFS: we’ve explored A, B, C and F— image by the author'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: We’ve explored level 1 (node A), level 2 (node B), and level 3 (nodes C and
    F). We now move on to level 4, where we explore the final leaves — E and D.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, whether we explore E before D or vice versa is a completely arbitrary
    decision:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: If C went first in the B bifurcation, then we would reach E right after that.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But if F went first, then a random decision would be made as to whether we explore
    D or E first.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BFS has some potential, as well as DFS, but both have their flaws. One will
    be best in some cases but will result inefficient in others. These are simple
    algorithms and, while still useful, we deserve more.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Greedy Best-First Search
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the first **informed search algorithm** we’ll be visiting today. In
    this kind of algorithm, we do have information about the goal state, and our duty
    is to use that information to choose wisely before each step. We define the term
    *heuristic* as this piece of information that tells us how close or far we are
    from the goal.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Greedy Best-First Search** (GBFS)[3] algorithm is simple: we simply move
    toward the nodes that take us closer to the goal node, and the heuristic *h(x)*
    is the one measuring the closeness.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: In the typical maze game, the closeness could be expressed by the number of
    pixels/tiles away we are from it, both in the vertical and horizontal direction.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Let’s suppose an example, in which we want to go from A to B, and we’ve already
    played up until we reach a tricky decision point. If we were using BFS or DFS,
    the selection would have been random. But we’re using informed algorithms now.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the following maze, in which there’s a number in each tile defining how
    many tiles away we are from the goal. In other words, the heuristic defines the
    number of steps we need to go from the actual tile to the goal, supposing a maze
    without walls in which we can only move horizontally or vertically:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/25739bcdc10df56469846942fe61f1ba.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
- en: Sample maze with closeness heuristic values — image by the author
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: If we used GBFS, the closeness heuristic we’re using suggests that we go up
    because if we go up the number of steps needed to reach B is decreased from 2
    to 1, but if we go down it increases from 2 to 3\. In other words, if we go up
    we get closer to the goal and we move further if we decide to go down.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用 GBFS，我们使用的接近启发式建议我们向上移动，因为如果我们向上移动，到达 B 所需的步骤从 2 减少到 1，而如果我们向下移动，则从 2
    增加到 3。换句话说，如果我们向上移动，我们离目标更近，而如果我们向下移动，我们则离目标更远。
- en: This isn’t perfect, because we’re only taking into account how close we are
    to B, but not the actual walls we have between us and the goal state. That’s something
    we just cannot control with GBFS.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不完美，因为我们只是考虑了离 B 的距离，而没有考虑到我们与目标状态之间的实际障碍。这是 GBFS 无法控制的。
- en: For consistency purposes, let me go back to the graph representation we’ve been
    using on and on, only that this time it will be a whole new graph. We still want
    to get from A to E but, as we already know, we now have information in each node
    about how close we are to the end state.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持一致性，让我回到我们一直使用的图形表示，只不过这次会是全新的图。我们仍然想从 A 到 E，但如我们所知，我们现在有关于每个节点的更多信息，了解我们离最终状态的距离。
- en: We’re going to use the letter h to provide an imaginary value to the heuristic.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用字母 h 来提供启发式的虚拟值。
- en: '![](../Images/de36516b65b435651198708477a72df8.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/de36516b65b435651198708477a72df8.png)'
- en: Sample graph with heuristics — image by the author
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 带有启发式的示例图 — 图片由作者提供
- en: 'The proposed example works the same way the maze does: every action required
    to move from state to state gets us either one unit closer to the goal, one unit
    further, or makes us remain the same. The most optimal path is clear: From A to
    C to E. It’s a matter of moving toward the node with a smaller *h(x)* if there’s
    a bifurcation.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 提出的示例与迷宫的工作方式相同：从一个状态移动到另一个状态的每一个动作要么使我们离目标更近一单位，要么使我们更远一单位，或者让我们保持不变。最优路径是明确的：从
    A 到 C 再到 E。如果有分叉点，那就朝着 *h(x)* 较小的节点移动。
- en: But it could have been different. Imagine that the heuristic didn’t differ by
    one unit at max from node to node, but it depended on several environmental factors.
    If it was that way, the optimal path would not have changed in our example, because
    it’s a really simple one, but it would be a totally different story in a more
    complex graph.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 但情况可能会有所不同。想象一下，如果启发式不仅仅依赖于节点之间最大差异的单位，而是依赖于多个环境因素。如果是这样的话，在我们的例子中最优路径不会改变，因为它非常简单，但在更复杂的图中情况会完全不同。
- en: Greedy Best-First Search is a powerful algorithm but it isn’t perfect. While
    it considers how close we are to the goal, it doesn’t take into account the actual
    costs of having gone that far.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 贪婪最佳优先搜索是一种强大的算法，但它并不完美。虽然它考虑了我们离目标有多近，但它没有考虑到到达这一点的实际费用。
- en: Believe it or not, the cost of getting to a state or node is as important as
    the cost of the greedy search.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 信不信由你，到达一个状态或节点的成本和贪婪搜索的成本同样重要。
- en: Get ready for the next algorithm.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为下一个算法做好准备。
- en: A* Search
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A* 搜索
- en: The **A* search algorithm**[4] is a variation of the GBFS algorithm but now,
    as stated, we take into account the costs of getting to each node. In other words,
    traversing via different edges might not have the same cost.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**A* 搜索算法**[4] 是 GBFS 算法的一种变体，但如前所述，我们考虑了到达每个节点的成本。换句话说，通过不同的边进行遍历可能会有不同的成本。'
- en: 'We’ll define:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将定义：
- en: '**Forward cost** — *h(x)*. It’s the same heuristic used in GBFS: the distance
    between the current state and the goal state.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**前向成本** — *h(x)*。这是 GBFS 中使用的相同启发式：当前状态与目标状态之间的距离。'
- en: '**Backward cost** — g(x). It’s the cost of going from the initial state to
    the current state. It’s a cumulative cost, in the sense that it sums all the previous
    costs.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后向成本** — g(x)。这是从初始状态到当前状态的成本。它是一个累积成本，意思是它将所有之前的成本加起来。'
- en: The goal of A* Search then is to find a path where the sum of both costs is
    the least. In mathematical terms, the overall cost of the node *x* is given by
    ***f(x) = g(x) + h(x).***
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: A* 搜索的目标是找到一种路径，使得两种费用的总和最小。用数学术语来说，节点 *x* 的总成本为 ***f(x) = g(x) + h(x)。***
- en: 'To illustrate this, I’ll be using the initial graph we’ve already used. We
    still want to get from A to E and the costs are shown now:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，我将使用我们已经使用过的初始图。我们仍然想从 A 到 E，现在的费用如下所示：
- en: '![](../Images/9d7645d5ad830ed6627870fc22449db8.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9d7645d5ad830ed6627870fc22449db8.png)'
- en: New graph to perform the A* Search in — image by the author
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 新图以执行 A* 搜索 — 图片由作者提供
- en: Take a moment to think about which could be the optimal path here. The numbers
    around the nodes are the forward costs and the numbers close to the lines are
    the backward costs.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 花一点时间思考一下这里可能的**最佳路径**。节点周围的数字是前向成本，靠近线条的数字是后向成本。
- en: 'Let''s try to decipher it now, going step by step:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们一步一步解码：
- en: We have no other option than going from A to B. The cost of reaching B is *f(B)
    = 2 + 2 = 4*.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们别无选择，只能从A到B。到达B的成本是 *f(B) = 2 + 2 = 4*。
- en: From B, we can either go to C or F. Here we pause and check which one’s lower.
    We see that *f(C) = 7 + 1 = 8* and *f(F) = 3+1 = 4*. Then, we determine **F**
    to be the best solution.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从B开始，我们可以选择去C或F。这里我们暂停并检查哪一个更低。我们看到 *f(C) = 7 + 1 = 8* 和 *f(F) = 3+1 = 4*。然后，我们确定**F**是最佳方案。
- en: 'From F, we again have two options: we can go to E and reach the goal state
    or go towards D. Most would choose E because we wouldn’t need to do extra steps,
    but we’re smart and we’ll let the math do the work: *f(D) = 6+1 = 7* and *f(E)
    = 13+0 = 13*. D is therefore a better option than E.'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从F开始，我们又有两个选择：我们可以去E并达到目标状态，或前往D。大多数人会选择E，因为不需要额外的步骤，但我们聪明，我们让数学来做工作：*f(D) =
    6+1 = 7* 和 *f(E) = 13+0 = 13*。因此，D比E更好。
- en: However, remember that we still have an open path at B, where we could go towards
    C. But the cost of going from B to C is 8, still above 7, so we’ll still keep
    on moving in the F->D direction.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不过，请记住我们在B还有一条未走的路径，我们可以前往C。但从B到C的成本是8，仍高于7，所以我们仍将继续向F->D方向移动。
- en: From D we can only go to E (or move backward to F, which doesn’t make sense).
    The cost is *f(E) = 7+0 = 7*. As it is still lower than f(C), we’re done here.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从D我们只能去E（或返回F，这没有意义）。成本是 *f(E) = 7+0 = 7*。由于它仍然低于f(C)，所以我们到此为止。
- en: So the optimal path is finally A->B->F->D->E.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 所以最终的**最佳路径**是A->B->F->D->E。
- en: '![](../Images/0de3368e80d2cce428ecb80baf0d4629.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0de3368e80d2cce428ecb80baf0d4629.png)'
- en: Optimal path using A* Search— image by the author
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用A*搜索的**最佳路径**— 作者提供的图片
- en: Conclusion
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Put this knowledge into practice.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 把这些知识付诸实践。
- en: We haven’t used any code here because I believe trying to build it on your own
    is the best way to understand how these algorithms work. However, in the resources
    section below you’ll have a link to a GitHub repo[5] I’ve created where I’ve coded
    three of these four algorithms we’ve seen today.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有使用任何代码，因为我相信自己动手构建是理解这些算法如何工作的最佳方式。然而，在下面的资源部分你会找到一个我创建的GitHub仓库[5]的链接，我在其中实现了今天看到的四种算法中的三种。
- en: My implementations are simple and not the most efficient. My goal in providing
    the code was to let you play with it and improve it your way by making an iterative
    function recursive, by creating more complex classes…
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我的实现很简单，不是最有效的。提供代码的目的是让你玩转它，并通过将迭代函数改为递归函数、创建更复杂的类等方式改进它。
- en: Go ahead and try to implement your own maze implementation using DFS, BFS, GBFS,
    or A* Search. Don’t just copy my code, use it as a template (you might find some
    surprises there).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 继续尝试用DFS、BFS、GBFS或A*搜索实现你自己的迷宫解决方案。不要只是复制我的代码，而是将其作为模板使用（你可能会发现一些惊喜）。
- en: Be creative and resourceful, and don’t stop here. Try other algorithms we haven’t
    covered here like minimax or uniform cost search. Google is your friend.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要有创造力和资源fulness，千万不要停下来。尝试其他我们没有覆盖的算法，如minimax或uniform cost search。Google是你的好帮手。
- en: Today I’ve covered the basics of these four algorithms showing how they work
    with visual examples and following a set of steps. I used simple examples but
    the process is the same on larger graphs.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我讲解了这四种算法的基础知识，展示了它们如何通过视觉示例和一系列步骤工作。我使用了简单的示例，但在较大的图上过程是一样的。
- en: The key here is, as data scientists, to understand them, know how to use them,
    and, most importantly, identify situations in which they could be useful for us.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是，作为数据科学家，要理解这些算法，知道如何使用它们，更重要的是识别它们对我们有用的情况。
- en: Search algorithms are just a part of AI and they’re still key even though they’ve
    been around for a while.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索算法只是AI的一部分，尽管它们已经存在一段时间，但仍然是关键。
- en: Go ahead and try them out!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 继续尝试这些算法吧！
- en: '[PRE0]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you’d like to support me further, consider subscribing to Medium’s Membership
    through the link you find below: it won’t cost you any extra penny but will help
    me through this process.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想进一步支持我，可以考虑通过下面的链接订阅Medium的会员：这不会额外花费你任何费用，但会帮助我完成这个过程。
- en: '[](https://medium.com/@polmarin/membership?source=post_page-----2760679368bb--------------------------------)
    [## Join Medium with my referral link - Pol Marin'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@polmarin/membership?source=post_page-----2760679368bb--------------------------------)
    [## 通过我的推荐链接加入 Medium - Pol Marin'
- en: Read every story from Pol Marin (and thousands of other writers on Medium).
    Your membership fee directly supports Pol…
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Pol Marin 的每一个故事（以及 Medium 上成千上万的其他作家）。你的会员费直接支持 Pol…
- en: medium.com](https://medium.com/@polmarin/membership?source=post_page-----2760679368bb--------------------------------)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@polmarin/membership?source=post_page-----2760679368bb--------------------------------)
- en: Resources
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源
- en: '[1] [Depth-First Search — Wikipedia](https://en.wikipedia.org/wiki/Depth-first_search)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] [深度优先搜索 — 维基百科](https://en.wikipedia.org/wiki/Depth-first_search)'
- en: '[2] [Breadth-First Search — Wikipedia](https://en.wikipedia.org/wiki/Breadth-first_search)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] [广度优先搜索 — 维基百科](https://en.wikipedia.org/wiki/Breadth-first_search)'
- en: '[3] [Best-First Search — Wikipedia](https://en.wikipedia.org/wiki/Best-first_search)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] [最佳优先搜索 — 维基百科](https://en.wikipedia.org/wiki/Best-first_search)'
- en: '[4] [A* Search Algorithm — Wikipedia](https://en.wikipedia.org/wiki/A*_search_algorithm)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] [A* 搜索算法 — 维基百科](https://en.wikipedia.org/wiki/A*_search_algorithm)'
- en: '[5] [AI Search Algorithms Repo — GitHub](https://github.com/polmarin/ai_search_algorithms)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[5] [AI 搜索算法库 — GitHub](https://github.com/polmarin/ai_search_algorithms)'
- en: Additional Resources
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外资源
- en: '[Search Algorithms in AI — Geeks For Geeks](https://www.geeksforgeeks.org/search-algorithms-in-ai/)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[AI 中的搜索算法 — Geeks For Geeks](https://www.geeksforgeeks.org/search-algorithms-in-ai/)'
