- en: A Guide to Association Rule Mining
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/a-guide-to-association-rule-mining-96c42968ba6](https://towardsdatascience.com/a-guide-to-association-rule-mining-96c42968ba6)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Create insights from frequent patterns using market basket analysis with Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://idilismiguzel.medium.com/?source=post_page-----96c42968ba6--------------------------------)[![Idil
    Ismiguzel](../Images/6846628535770a9f3e13ebb555e82abd.png)](https://idilismiguzel.medium.com/?source=post_page-----96c42968ba6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----96c42968ba6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----96c42968ba6--------------------------------)
    [Idil Ismiguzel](https://idilismiguzel.medium.com/?source=post_page-----96c42968ba6--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----96c42968ba6--------------------------------)
    ¬∑10 min read¬∑Apr 5, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c4deb918ffc351de2f6044aa03c1a954.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Matthias Schr√∂der](https://unsplash.com/@trancepole?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Association rule mining is a rule-based machine learning technique used to find
    frequent patterns in a data set. Frequent patterns may include frequent itemsets
    that are usually bought together or subsequences that are bought in sequence.
    For example, cookies and coffee can be *frequent itemset* for a cafe, and a laptop
    and external monitor can be a *subsequence* for an electronics store. Finding
    frequent patterns in a transactional database and detecting associations between
    items is an extremely popular data science use case. Some application areas are
    item recommendations, cross-selling, promotion design, customer behavior analysis,
    and inventory management.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, we will cover **market basket analysis** technique for association
    rule mining and will answer questions including but not limited to:'
  prefs: []
  type: TYPE_NORMAL
- en: if a customer buys item A how likely will she also buy item B? Is there a positive
    or negative correlation or it happens totally at random?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: which items should be placed next to each other in a store or content page of
    an app?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: which items can be bundled together in a promotional activity or recommended
    after showing interest in a certain item?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While following the article, you can check out the [Jupyter Notebook](https://github.com/Idilismiguzel/Machine-Learning/blob/master/Association_Rule_Mining/market_basket_analysis.ipynb)
    on my GitHub for complete analysis and code.
  prefs: []
  type: TYPE_NORMAL
- en: What is market basket analysis?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A basket is a collection of items that are selected by the user such as items
    in a shopping cart or content consumed on a website. Market basket analysis helps
    us to learn **associations** between items in the inventory and therefore, we
    can leverage historical data to predict user purchase behavior and recommend items
    to the users without knowing extra information about them.
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this article, we will use ‚Äú[The Bread Basket](https://www.kaggle.com/datasets/mittalvasu95/the-bread-basket)‚Äù
    data set that belongs to a bakery located in Edinburgh and includes over 9000
    transactions. You can download it from Kaggle.
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs have a look! ‚òïÔ∏è
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/91ade79624ab8a4e9fbca0608beace99.png)'
  prefs: []
  type: TYPE_IMG
- en: First 5 rows of the data set
  prefs: []
  type: TYPE_NORMAL
- en: As you can see the data set has transaction ids in `Transaction` column and
    every item bought has a separate row even though they belong to the same transaction
    id. Let‚Äôs print all the items of Transaction=3.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9845e068c4b575151f28c0bd761b2dc2.png)'
  prefs: []
  type: TYPE_IMG
- en: Transaction ID=3
  prefs: []
  type: TYPE_NORMAL
- en: During the analysis, we will not use `date_time`, `period_day`, and `weekday_weekend`
    columns. Additionally, we will need to show items as boolean and each transaction
    id should be represented in one row. After this feature engineering, we transform
    the data set as below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/23fedc78d81a907531c1e21076d67072.png)'
  prefs: []
  type: TYPE_IMG
- en: First 5 rows of the data set after feature engineering
  prefs: []
  type: TYPE_NORMAL
- en: What are association rules?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Market basket analysis is based on discovering associations between items by
    using **association rules** which take the form of if-then relationships. To build
    an association rule, we should have at least one **antecedent** and one **consequent**.
  prefs: []
  type: TYPE_NORMAL
- en: 'One antecedent and one consequent: if { üç™ } then { ‚òïÔ∏è }'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Multi antecedent: if { üç™, üç∞ } then { ‚òïÔ∏è}'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Multi consequent: if { üç™ } then { ‚òïÔ∏è, ü•õ }'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of total rules grows by the factor of unique items. As you can imagine,
    not all rules can be equally important and we need **metrics** to help us identify
    which rules to eliminate and which to consider.
  prefs: []
  type: TYPE_NORMAL
- en: Support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Support is the main metric to measure how interesting and important a rule is.
    It can be applied to a single item or pair of antecedents and consequents. It
    is calculated by dividing the number of transactions including certain item(s)
    by the number of total transactions. Support value ranges from 0 to 1.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cd0aaeb3206a2245dbe2f4da013227d6.png)'
  prefs: []
  type: TYPE_IMG
- en: For example, if we have 10 transactions and 6 of them include coffee and 4 of
    them include both coffee and cookie, then support of {coffee} is 60% and support
    of {coffee, cookie} is 40%. Note that, support is equal to 40% for both if {coffee}
    then {cookie} and if {cookie} then {coffee}. Let‚Äôs calculate support on our data
    set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fa1000546a5d0a630eb2e6c57e9d77b9.png)'
  prefs: []
  type: TYPE_IMG
- en: Support value of top 10
  prefs: []
  type: TYPE_NORMAL
- en: If we want to find the support value of a pair of antecedent and consequent
    we can add them as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f7f7e2def33cd2e46256d0ba9b1fbf69.png)'
  prefs: []
  type: TYPE_IMG
- en: Support value of top 10 after adding new pairs
  prefs: []
  type: TYPE_NORMAL
- en: Confidence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Confidence is the probability of purchasing item B given that they purchased
    item A. It is calculated by dividing the support of item A&B by the support of
    item A. Confidence value ranges from 0 to 1.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to use support together with confidence since popular items
    can mislead the interpretation of results if we use support metric only.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fb803052d2616b5fc768e686b848a57c.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 0.18 for Coffee ‚Üí Bread
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 0.11 for Coffee ‚Üí Cake
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We can interpret these results as 18% confidence means that 18% of the transactions
    that include Coffee also include Bread.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to mention that, confidence metric is not symmetric and Confidence(A‚ÜíB)
    is different than Confidence(B‚ÜíA).
  prefs: []
  type: TYPE_NORMAL
- en: We summarise support and confidence with the following notation and we will
    see that while pruning association rules, it is important to check if the rules
    satisfy both minimum support and minimum confidence levels.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/64f7de3d4c3c345458218fa0152b21af.png)'
  prefs: []
  type: TYPE_IMG
- en: Lift
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lift metric is used to detect uninteresting association rules to ease rule pruning.
    It assumes the occurrence of item A in a transaction is independent of the occurrence
    of item B if *P*(*A* ‚à™ *B*) = *P*(*A*)*P*(*B*), otherwise these two items are
    dependent and so **correlated**. It is calculated by dividing the proportion of
    transactions that contain items A and B by the proportion of item A and item B
    that takes place independently. The lift value ranges from 0 to infinity.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/915c7bb4ff7a030961ced891244f4cac.png)'
  prefs: []
  type: TYPE_IMG
- en: Lift(A ‚Üí B) > 1 means that items are **positively** correlated and occurrence
    of one positively affects the occurrence of other
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Lift(A ‚Üí B) =1 means that there is no correlation
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Lift(A ‚Üí B) < 1 means that items are **negatively** correlated and occurrence
    of one negatively affects the occurrence of other
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 0.57 for Coffee ‚Üí Bread
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1.10 for Coffee ‚Üí Cake
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As you can see having Coffee in a transaction decreases the chances of having
    Bread while increasing the chances of having a Cake.
  prefs: []
  type: TYPE_NORMAL
- en: Also, note that the lift metric is symmetric, meaning Lift(A‚ÜíB) is equal to
    Lift(B‚ÜíA).
  prefs: []
  type: TYPE_NORMAL
- en: Leverage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Leverage is the measure of the difference between having items A&B in a transaction
    together and having item A and item B as they were independent. It is calculated
    by extracting the proportion of item A and item B that takes place independently
    from the proportion of transactions that contain items A and B. Leverage value
    ranges between -1 and 1.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f13b75a6c4b566db65d8ed26a6a22440.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: -0.06 for Coffee ‚Üí Bread
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 0.005 for Coffee ‚Üí Cake
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Since the leverage value ranges between -1 and 1 we can use it to compare different
    pairs.
  prefs: []
  type: TYPE_NORMAL
- en: Conviction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Conviction metric is used to measure how much a consequent depends on an antecedent.
    It is calculated by multiplying the proportion of transactions that contain item
    A with the proportion of transactions that do not contain item B and dividing
    this by the proportion of transactions that contain item A and not item B. Conviction
    value ranges from 0 to infinity.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6b3e2804fdd6b4b1d8109f74788e0d4b.png)'
  prefs: []
  type: TYPE_IMG
- en: If the conviction value is high, this means that the consequent is highly dependent
    on the antecedent.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As you can see we calculated support for *not* bread as `1-support(Bread)` and
    support for coffee and *not* bread as `support(Coffee) ‚Äî support(Coffee & Bread).`
  prefs: []
  type: TYPE_NORMAL
- en: 0.82 for Coffee ‚Üí Bread
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1.01 for Coffee ‚Üí Cake
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Putting all together
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Previously, we learned support, confidence, lift, leverage, and conviction metrics
    and manually calculated them. Let‚Äôs now put them all together and make the calculations
    using `[mlxtend](http://rasbt.github.io/mlxtend/)` library instead.
  prefs: []
  type: TYPE_NORMAL
- en: We first create frequent itemsets using our transactional data with the`[apriori](https://github.com/rasbt/mlxtend/blob/master/mlxtend/frequent_patterns/apriori.py)`function.
    In the function, we can define a minimum threshold for the support metric which
    is very useful for pruning. I decided to define minimum support as 0.01, but you
    can try different values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Let‚Äôs have a look at the first 20 items of the `frequent_itemsets.`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/07a1cb406f122c0f5ef96535faf67d46.png)'
  prefs: []
  type: TYPE_IMG
- en: First 20 rows of frequent_itemsets generated
  prefs: []
  type: TYPE_NORMAL
- en: You can see the apriori algorithm automatically calculated support metric for
    both unique items and antecedent-consequent pairs.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will generate the rules by using `[association_rules](https://github.com/rasbt/mlxtend/blob/master/mlxtend/frequent_patterns/association_rules.py)`
    function. In association_rules, we can select an evaluation metric ( `'support',
    'confidence', 'lift', 'leverage', 'conviction', or 'zhangs_metric'` ) and set
    a minimum threshold value for that. Here, I selected ‚Äòconfidence‚Äô as evaluation
    metric and set the minimum threshold as 0.5\. Feel free to change the metric based
    on the rule of interest.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Let‚Äôs have a look at `rules` ‚Äî the output pandas dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/650685d724c3fabb1d705e66fecebbe3.png)'
  prefs: []
  type: TYPE_IMG
- en: Rules generated by association_rules
  prefs: []
  type: TYPE_NORMAL
- en: Super! üöÄ We now have a very interesting set of rules that have confidence greater
    than 0.5, lift greater than 1 (meaning positive correlation), positive leverage,
    and high conviction. Also, note that our starting point was a total number of
    rules that was exponential in the number of items and we ended up with 10 rules
    which are the most important and interesting.
  prefs: []
  type: TYPE_NORMAL
- en: We will now look at a plotting technique to help us visualize. You may think
    this is not necessary cause we have only 10 rules, however, if you have many rules
    or need to present, a good visual helps a lot.
  prefs: []
  type: TYPE_NORMAL
- en: I think `plot_model` function from `PyCaret` library is extremely easy to use
    and interpret to visualize association rules. But note that, while I write this
    article pycaret version 3.0 was released however, to use this specific function
    I had to downgrade to pycaret version 2.3.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9724992165b5215b64d156d5cb14b983.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualizing association rules
  prefs: []
  type: TYPE_NORMAL
- en: As you can see we have confidence plotted on the left, lift plotted on the right
    with a colormap, and support plotted on the x-axis. From the plot, it is clear
    that Toast has the highest lift and confidence which makes it a great antecedent
    for Coffee. If you hover over Toast, it shows all metric calculations.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1218985a5af71114b1cc9a0dec71ec21.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualizing association rules for Coffee
  prefs: []
  type: TYPE_NORMAL
- en: You can easily rank the rules by looking at the plot for further assessment.
    But in general, all these antecedents can get Coffee as a recommendation.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to re-set the minimum threshold or change the evaluation metric while
    filtering the rules to allow different consequents and larger item sets.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we covered association rule mining and learned how we can apply
    it to a data set using market basket analysis technique. We learned support, confidence,
    lift, leverage, and conviction metrics and calculated them both manually and using
    mlxtend library. We also saw how to set minimum thresholds for those metrics to
    filter out uninteresting rules. In the end, we ended up with 10 interesting rules
    and visualized them using pycaret library.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you enjoyed reading about association rules and find the article useful!
    ‚ú®
  prefs: []
  type: TYPE_NORMAL
- en: '**Enjoy this article?** [**Become a member for more!**](https://idilismiguzel.medium.com/membership)'
  prefs: []
  type: TYPE_NORMAL
- en: '*You can*[***read my other articles here***](https://medium.com/@idilismiguzel)*and*
    [***follow me on Medium.***](https://medium.com/@idilismiguzel/follow)Let me know
    if you have any questions or suggestions.‚ú®'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: 'The Bread Basket dataset from [Kaggle](https://www.kaggle.com/datasets/mittalvasu95/the-bread-basket),
    License [CC0: Public Domain](https://creativecommons.org/publicdomain/zero/1.0/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Header photo by [Matthias Schr√∂der](https://unsplash.com/@trancepole?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All other images are by the Author
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Mlxtend source code](https://github.com/rasbt/mlxtend/tree/master/mlxtend/frequent_patterns)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PyCaret source code](https://pycaret.gitbook.io/docs/get-started/installation)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
