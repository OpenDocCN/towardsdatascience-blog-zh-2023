- en: A Step-by-Step Guide To Accurately Detect Peaks and Valleys.
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准确检测峰值和谷值的逐步指南。
- en: 原文：[https://towardsdatascience.com/a-step-by-step-guide-to-accurately-detect-peaks-and-valleys-9abc49a2eac3](https://towardsdatascience.com/a-step-by-step-guide-to-accurately-detect-peaks-and-valleys-9abc49a2eac3)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-step-by-step-guide-to-accurately-detect-peaks-and-valleys-9abc49a2eac3](https://towardsdatascience.com/a-step-by-step-guide-to-accurately-detect-peaks-and-valleys-9abc49a2eac3)
- en: Peak Detection is a challenging step in many applications. Read and learn how
    to accurately detect peaks and valleys in 1D vectors and 2D arrays (images).
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 峰值检测是许多应用中的一个挑战步骤。阅读并了解如何在1D向量和2D数组（图像）中准确检测峰值和谷值。
- en: '[](https://erdogant.medium.com/?source=post_page-----9abc49a2eac3--------------------------------)[![Erdogan
    Taskesen](../Images/8e62cdae0502687710d8ae4bbcd8966e.png)](https://erdogant.medium.com/?source=post_page-----9abc49a2eac3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9abc49a2eac3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9abc49a2eac3--------------------------------)
    [Erdogan Taskesen](https://erdogant.medium.com/?source=post_page-----9abc49a2eac3--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://erdogant.medium.com/?source=post_page-----9abc49a2eac3--------------------------------)[![Erdogan
    Taskesen](../Images/8e62cdae0502687710d8ae4bbcd8966e.png)](https://erdogant.medium.com/?source=post_page-----9abc49a2eac3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9abc49a2eac3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9abc49a2eac3--------------------------------)
    [Erdogan Taskesen](https://erdogant.medium.com/?source=post_page-----9abc49a2eac3--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9abc49a2eac3--------------------------------)
    ·13 min read·Sep 25, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9abc49a2eac3--------------------------------)
    ·13分钟阅读·2023年9月25日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/d5dafe822d8d4c83b379bcd509324bea.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d5dafe822d8d4c83b379bcd509324bea.png)'
- en: Photo by [Willian Justen de Vasconcellos](https://unsplash.com/@willianjusten?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/GZLY-0kPG3M?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Willian Justen de Vasconcellos](https://unsplash.com/@willianjusten?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来源于 [Unsplash](https://unsplash.com/photos/GZLY-0kPG3M?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: Our human brain is excellent in peak detection in relation to its context. What
    seems an easy task by eye can be a challenging task to automate by machines. In
    general, peaks and valleys indicate (significant) events such as sudden increases
    or decreases in price/volume, or sharp rises in demand. One of the challenges
    is the definition of a peak/valley which can differ across applications and domains.
    Other challenges can be more technical, such as a noisy signal that can result
    in many false positives or a single threshold that may not accurately detect local
    events. *In this blog, I will describe how to accurately detect peaks and valleys
    in a 1-dimensional vector or a 2-dimensional array (image) without making assumptions
    about the peak shape. In addition, I will demonstrate how to handle noise in the
    signal.* Analyses are performed using the ***findpeaks library***, and hands-on
    examples are provided for experimenting.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的人脑在峰值检测方面相对于其上下文非常出色。眼睛看似简单的任务，对于机器来说却可能是一项具有挑战性的任务。一般来说，峰值和谷值表示（重要的）事件，例如价格/交易量的突然增加或减少，或需求的急剧上升。挑战之一是峰值/谷值的定义，这在不同的应用和领域中可能有所不同。其他挑战可能更具技术性，例如噪声信号可能导致许多误报，或单一阈值可能无法准确检测局部事件。*在本博客中，我将描述如何在不对峰值形状做假设的情况下准确检测一维向量或二维数组（图像）中的峰值和谷值。此外，我还将演示如何处理信号中的噪声。*
    分析使用***findpeaks库***进行，并提供了动手示例以供实验。
- en: A Brief Introduction About Peaks and Valleys.
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 峰值和谷值简要介绍。
- en: The detection of (sudden) changes in a signal is an important task in many applications
    that needs to be reported or monitored. There are roughly two types of “sudden
    changes”, the so called *outliers* and *peaks of interest* which are conceptually
    different. *Outliers are data points that significantly deviate from what is normal
    in the data set whereas peaks of interest are specific data points or regions
    within a signal that have significance or relevance for the analysis or domain
    in question.* In case you need a deep dive with hands-on examples in outlier detection,
    try these blogs [1, 2].
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 检测信号中的（突发）变化是许多应用中的重要任务，需要进行报告或监控。大致上有两种类型的“突发变化”，即所谓的*异常值*和*关注峰值*，这两者在概念上是不同的。*异常值是指显著偏离数据集中正常值的数据点，而关注峰值是信号中具有分析或领域相关性的特定数据点或区域。*
    如果您需要深入了解并有实际示例的异常值检测，可以参考这些博客 [1, 2]。
- en: '[](/outlier-detection-using-principal-component-analysis-and-hotellings-t2-and-spe-dmodx-methods-625b3c90897?source=post_page-----9abc49a2eac3--------------------------------)
    [## Outlier Detection Using Principal Component Analysis and Hotelling’s T2 and
    SPE/DmodX Methods'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[outlier-detection-using-principal-component-analysis-and-hotellings-t2-and-spe-dmodx-methods-625b3c90897?source=post_page-----9abc49a2eac3--------------------------------]
    [## 使用主成分分析和 Hotelling’s T2 及 SPE/DmodX 方法检测异常值'
- en: Thanks to PCA’s sensitivity, it can be used to detect outliers in multivariate
    datasets
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 由于 PCA 的灵敏度，它可以用于检测多变量数据集中的异常值。
- en: towardsdatascience.com](/outlier-detection-using-principal-component-analysis-and-hotellings-t2-and-spe-dmodx-methods-625b3c90897?source=post_page-----9abc49a2eac3--------------------------------)
    [](/outlier-detection-using-distribution-fitting-in-univariate-data-sets-ac8b7a14d40e?source=post_page-----9abc49a2eac3--------------------------------)
    [## Outlier Detection Using Distribution Fitting in Univariate Datasets
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/outlier-detection-using-principal-component-analysis-and-hotellings-t2-and-spe-dmodx-methods-625b3c90897?source=post_page-----9abc49a2eac3--------------------------------)
    [outlier-detection-using-distribution-fitting-in-univariate-data-sets-ac8b7a14d40e?source=post_page-----9abc49a2eac3--------------------------------]
    [## 使用分布拟合在单变量数据集中检测异常值'
- en: Learn how to detect outliers using Probability Density Functions for fast and
    lightweight models and explainable…
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解如何使用概率密度函数检测异常值，以便快速轻量化模型并提供可解释性……
- en: towardsdatascience.com](/outlier-detection-using-distribution-fitting-in-univariate-data-sets-ac8b7a14d40e?source=post_page-----9abc49a2eac3--------------------------------)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/outlier-detection-using-distribution-fitting-in-univariate-data-sets-ac8b7a14d40e?source=post_page-----9abc49a2eac3--------------------------------)'
- en: '***But what is a peak of interest?***'
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '***但什么是关注峰值？***'
- en: A peak is a point or a region that is larger than their surroundings point(s).
    This can either be a local maximum or global maximum. It can also be repetitive
    data points that do not necessarily need to deviate from what is normal or expected.
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 峰值是指大于其周围点的点或区域。这可以是局部最大值或全局最大值，也可以是重复的数据点，这些点不一定需要偏离正常或预期值。
- en: The elasticity of such a definition makes peak detection a challenging task.
    In other words, “*How much higher should the peak be than its surrounding points?*”
    and “*How to define a local maximum?*” This is even more complicated by the fact
    that signals are usually not free of noise. There are a variety of techniques
    for peak detection, including simple thresholding, but also the use of derivatives,
    wavelet analysis, and/or convolutions. Attractive properties of peak detection
    methods are the ability of noise handling, and not making (too strong) assumptions
    of the signal-peak. Reasoning is that you need to detect the local maxima which
    can change between applications and the context. As an example, ECG signals are
    different in shape and amplitude compared to server load measurements. A well-known
    Python library with a peak detection function is *find_peaks* in *S*ciPy *[3]*.
    However, this function can not rank or prioritize the detected peaks and there
    are no built-in noise handling functions. *In the next sections, I will demonstrate
    how to detect peaks and valleys, handle signal noise, measure peak strength, and
    rank the results. I will demonstrate this for 1D vectors and 2D arrays using the
    findpeaks library.*
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这种定义的弹性使得峰值检测成为一项具有挑战性的任务。换句话说，*“峰值应该比其周围点高多少？”* 和 *“如何定义局部最大值？”* 这更加复杂的是，信号通常不免受到噪声的干扰。峰值检测有多种技术，包括简单的阈值设定，但也包括使用导数、小波分析和/或卷积。峰值检测方法的吸引力在于处理噪声的能力，并且不会对信号-峰值做出（过于强烈的）假设。推理是你需要检测局部最大值，这些最大值可能会根据应用和背景发生变化。例如，ECG信号在形状和幅度上与服务器负载测量不同。一个知名的具有峰值检测功能的Python库是*S*ciPy中的*find_peaks*
    *［3］*。然而，该函数不能对检测到的峰值进行排序或优先处理，也没有内置的噪声处理功能。*在接下来的部分中，我将演示如何检测峰值和谷值，处理信号噪声，测量峰值强度，并对结果进行排序。我将使用findpeaks库为1D向量和2D数组演示这一过程。*
- en: The Findpeaks Library Contains Four Specialized Methods For Peak Detection.
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Findpeaks库包含四种专门用于峰值检测的方法。
- en: 'The Findpeaks library aims to detect peaks and valleys in 1-dimensional vectors
    and 2-dimensional arrays (images) without making assumptions about the peak shape
    or baseline noise. There are four distinct methods implemented for the detection
    and ranking of peaks and valleys. Each method has its own advantages which makes
    it applicable for specific applications. In the next section, I will go through
    each of the methods with hands-on Python examples. If you want to experiment with
    the examples yourself, first pip install the [*Findpeaks package*](https://erdogant.github.io/findpeaks):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Findpeaks库旨在检测1维向量和2维数组（图像）中的峰值和谷值，而不对峰值形状或基线噪声做出假设。该库实现了四种不同的方法用于峰值和谷值的检测与排序。每种方法都有其独特的优势，使其适用于特定应用。在下一部分中，我将通过实际的Python示例介绍每种方法。如果你想自己试验这些示例，请首先pip安装[*Findpeaks
    package*](https://erdogant.github.io/findpeaks)。
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Topology Method (1).
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拓扑方法（1）。
- en: 'The Topology method is an efficient solution based on the idea of persistent
    homology *[4]*. The method runs in linear time — in fact, it is a single loop
    — after the function values are internally sorted. The idea of persistent homology
    is intuitive. In the next code section we will import the Findpeaks library and
    load an example data set:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 拓扑方法是基于持久同源性的思想的高效解决方案*［4］*。该方法在函数值内部排序后以线性时间运行——实际上是一个单一循环。持久同源性的思想是直观的。在接下来的代码部分，我们将导入Findpeaks库并加载一个示例数据集：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/ecfb496319a1f638a3bd07601b2952b3.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ecfb496319a1f638a3bd07601b2952b3.png)'
- en: 'Figure 1: Example signal with some local peaks and valleys. (image from the
    author)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：示例信号，包含一些局部峰值和谷值。（图像来自作者）
- en: We can clearly see the strongest (or highest) peak in Figure 1 is point 1, and
    then point 2, etc. To detect the peaks we can consider a water level that continuously
    descends to lower levels. At the top (the local maxima) there is the *birth* of
    an island. When lowering the water levels, two islands can merge. When the lower
    islands are merged to the higher islands again it is called *death*. In this manner,
    each candidate peak can be annotated with a *birth vs. death* point. The candidate
    peaks can be plotted in a so-called ***persistence diagram*** as shown in Figure
    2.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以清楚地看到图1中最强（或最高）的峰是点1，其次是点2，等等。为了检测这些峰，我们可以考虑一个持续下降到更低水平的水位。在顶部（局部最大值）有一个岛屿的*诞生*。当水位降低时，两个岛屿可以合并。当较低的岛屿再次与较高的岛屿合并时，称为*死亡*。通过这种方式，每个候选峰可以用*诞生与死亡*点进行标注。候选峰可以绘制在所谓的***持久性图***中，如图2所示。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/5926ba30aeb1f8c7a6fa28599480258a.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5926ba30aeb1f8c7a6fa28599480258a.png)'
- en: '*Figure 2: Example of a persistence diagram* with Birth vs. Death levels. (image
    from the author)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2：持久性图的示例*，显示出生与死亡水平。（图片来源于作者）'
- en: The diagonal in the right panel (left bottom to right top) represents points
    where birth and death levels are the same. In other words, points that are on
    the diagonal are flat signals or horizontal lines without peaks or other changes.***A
    peak of interest should be at the right side of the diagonal.***
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 右面板中的对角线（左下角到右上角）代表出生和死亡水平相同的点。换句话说，位于对角线上的点是平坦的信号或没有峰值或其他变化的水平线。***感兴趣的峰值应该位于对角线的右侧。***
- en: Let's stepwise go through Figure 2\. For the first point (right bottom corner),
    we see the birth at `score=1.5` and the death at `score=0`. For the second peak,
    we see `score=1.2` and the death level at `score=0.8` (blue arrows). This approach
    quantifies each peak relative to another and can therefore exclude peaks with
    low persistence, i.e. close to the diagonal. The peaks of interest can be ranked/prioritized
    and selected. The advantage of this method is that it can be applied to both 1D
    vectors and 2D arrays (images). Another advantage is that it returns explainable
    results, and false positive hits can be removed by clipping the results on the
    persistence score. The disadvantage is that noisy signals can result in thousands
    of hits and can become computationally intensive. However, we can easily select
    the top hits by their ranking. *I will demonstrate this in one of the following
    sections in this blog.*
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步分析图2。对于第一个点（右下角），我们看到出生于`score=1.5`，死亡于`score=0`。对于第二个峰值，我们看到`score=1.2`，死亡水平为`score=0.8`（蓝色箭头）。这种方法将每个峰值相对量化，因此可以排除低持久性（即接近对角线）的峰值。感兴趣的峰值可以被排序/优先考虑并选择。此方法的优点在于它可以应用于1D向量和2D数组（图像）。另一个优点是它返回可解释的结果，错误的阳性结果可以通过在持久性评分上剪裁结果来移除。缺点是嘈杂的信号可能导致成千上万的结果，并可能变得计算密集。然而，我们可以通过排名轻松选择顶级结果。*我将在本博客的后续章节中演示这一点。*
- en: The Mask Method (2).
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mask方法（2）。
- en: 'The Mask method takes a 2D array (image) and detects the peaks using the local
    maximum filter using a sliding `8x8 window`. It is slightly more advanced than
    simple thresholding because the thresholding is within the sliding window with
    the local maximum filter. Although it is a straightforward approach, it works
    very well in cases with a steady background. The advantages are that it is intuitive,
    explainable, and computationally fast. The disadvantage is that it can require
    intensive pre-processing steps. However, many of the pre-processing steps are
    taken care of in the *Findpeaks library.* In the next code section, we will load
    an example image, perform the preprocessing, and detect the peaks:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Mask方法接受一个2D数组（图像），并使用滑动的`8x8窗口`通过局部最大值滤波器检测峰值。它比简单的阈值处理稍微复杂，因为阈值处理是在滑动窗口内使用局部最大值滤波器进行的。尽管这是一个直接的方法，但在背景稳定的情况下效果很好。其优点在于直观、可解释且计算速度快。缺点是可能需要密集的预处理步骤。然而，许多预处理步骤都由*Findpeaks库*处理。在接下来的代码部分中，我们将加载一个示例图像，执行预处理，并检测峰值：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/09851d35d520e7b8e70f10317d3e5828.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/09851d35d520e7b8e70f10317d3e5828.png)'
- en: Figure 3\. The Mask method is applied to an image with automatic pre-processing.
    From left to right is shown the input image to scaling, color conversion, and
    denoising. (image from the author)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图3。Mask方法应用于具有自动预处理的图像。从左到右显示了输入图像到缩放、颜色转换和去噪。（图片来源于作者）
- en: 'The output contains `Xraw`, `Xprocessed` and `Xdetect` which are the same `NxM`
    size as the input image. The final detected peaks are stored in `Xdetect` and
    can be plotted with the `plot` functionality:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 输出包括`Xraw`、`Xprocessed`和`Xdetect`，它们的尺寸与输入图像相同`NxM`。最终检测到的峰值存储在`Xdetect`中，可以使用`plot`功能进行绘制：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/56a9d8bbbfc6b357cbb2a84f676e3718.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/56a9d8bbbfc6b357cbb2a84f676e3718.png)'
- en: Figure 4\. The detected peaks using the Mask method in the Findpeaks library.
    The numbers indicate the strength of the peak (image from the author)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图4。使用Findpeaks库中的Mask方法检测到的峰值。数字表示峰值的强度（图片来源于作者）
- en: The *Findpeaks library* also contains the functionality to transform a 2D image
    into a 3D mesh plot with the `plot_mesh` function. Such visuals help to get better
    intuition about the strength of the peaks. As an example, when we look at Figure
    4, it can be hard to see which peaks are strongest whereas the mesh plot in Figure
    5 provides better insights.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*Findpeaks 库* 还包含将 2D 图像转换为 3D 网格图的 `plot_mesh` 功能。这些视觉效果有助于更好地理解峰值的强度。例如，当我们查看图
    4 时，可能很难看到哪些峰值最强，而图 5 中的网格图提供了更好的见解。'
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/b6e282aa953046eb1fdca626ad8065f0.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b6e282aa953046eb1fdca626ad8065f0.png)'
- en: Figure 5\. Mesh plot generated by Findpeaks. (image from the author).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5\. 由 Findpeaks 生成的网格图。(图片来源：作者)。
- en: The Peakdetect Method (3).
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Peakdetect 方法 (3)。
- en: The third method in the *Findpeaks* library is the `peakdetect` method. This
    method is based on *Billauer's work* [2, 3], and has the advantage of finding
    the local maxima and minima in noisy signals. Noise is very common for which the
    typical solution is to smooth the curve with some low-pass filter. However, the
    smoothing of signals comes with the trade-off that peaks in the original signal
    can be lost or suppressed. This method requires setting the `lookahead` parameter,
    which is the distance to look ahead from a peak candidate to determine (if it
    is the actual peak). The default value is set to 200 but is adjustable for smaller
    datasets (i.e., with <50 data points). In the next code section, we will create
    a 1D vector with 10,000 data points and detect the peaks and valleys. We can plot
    the detected peak and valleys with the plotting functionality as depicted in Figure
    6\. First of all, the exact peaks and valleys are highlighted with crosses and
    dots, whereas entire regions are also extracted and colored differently.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*Findpeaks* 库中的第三种方法是 `peakdetect` 方法。该方法基于 *Billauer 的研究* [2, 3]，其优点在于能够在嘈杂信号中找到局部最大值和最小值。噪声非常常见，通常的解决方案是用某种低通滤波器来平滑曲线。然而，信号平滑的代价是原始信号中的峰值可能会丢失或被压制。此方法需要设置
    `lookahead` 参数，该参数是从峰值候选点向前看的距离，以确定它是否为实际峰值。默认值设置为 200，但对于较小的数据集（即 <50 数据点）可调整。在接下来的代码部分，我们将创建一个包含
    10,000 个数据点的一维向量，并检测峰值和谷值。我们可以使用绘图功能绘制检测到的峰值和谷值，如图 6 所示。首先，确切的峰值和谷值用交叉和点突出显示，而整个区域也被提取并用不同的颜色标记。'
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/4d4dfc7cd4709fe081b20a0e6163083b.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d4dfc7cd4709fe081b20a0e6163083b.png)'
- en: Figure 6\. Detection of peaks and valleys using the peakdetect method in Findpeaks.
    (image from the author)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6\. 使用 Findpeaks 中的 peakdetect 方法检测峰值和谷值。(图片来源：作者)
- en: The Caerus Method (4).
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Caerus 方法 (4)。
- en: The Caerus method is designed to detect peaks and valleys in 1D signals. It
    determines the local minima with the corresponding local maxima independent of
    the timeframe, scale, or trend. The method is based on a forward rolling window
    to iteratively score thousands of windows. For each window, the percentages are
    computed from the start-to-stop position. The resulting matrix is a `windowxlength
    dataframe` for which the highest scoring percentages, those above a minimum percentage,
    are used. The best scoring percentages are then aggregated. The final regions
    are determined based on the *distance* and *percentage* change of the start locations*.*
    This method has a strong advantage in finding peaks and valleys in turbulent data,
    such as stock-market data.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Caerus 方法旨在检测一维信号中的峰值和谷值。它确定局部最小值和对应的局部最大值，而不受时间框架、尺度或趋势的影响。该方法基于前向滚动窗口，迭代评分成千上万的窗口。对于每个窗口，计算从起始到结束位置的百分比。生成的矩阵是
    `windowxlength dataframe`，其中最高评分的百分比，即高于最低百分比的百分比，被使用。然后汇总评分最好的百分比。最终区域基于 *距离*
    和 *百分比* 的起始位置变化确定。该方法在发现波动数据（如股市数据）中的峰值和谷值方面具有强大的优势。
- en: To see this method in action, we need to set the minimum percentage `minperc`
    parameter and the window size. The `minperc` declares a starting position and
    the window is used to determine whether there is an increase in signal in terms
    of percentage change from the starting point. The use of smaller window sizes
    (e.g., 50) can detect local minima, whereas Larger window sizes (e.g., 1000) will
    stress the global minima. In the following code section, we will initialize with
    the `caerus` method and detect peaks with a minimum of 5% change.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看此方法的实际效果，我们需要设置最小百分比 `minperc` 参数和窗口大小。`minperc` 声明了一个起始位置，窗口用于确定从起始点开始的信号是否有百分比变化。使用较小的窗口大小（例如50）可以检测局部最小值，而较大的窗口大小（例如1000）将关注全局最小值。在以下代码部分中，我们将用
    `caerus` 方法初始化，并检测至少有5%变化的峰值。
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/2febad6810b48f98d00520f616d9146b.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2febad6810b48f98d00520f616d9146b.png)'
- en: Figure 7\. The results of the Cearus method. The bottom panel is the stock data
    for which the red vertical lines depict the peaks and the green vertical lines
    the valleys. The middle panel is the processed data and depicts the cumulative
    successes over the windows. The top panel is the percentage difference in the
    windows. (image from the author)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图7\. Cearus方法的结果。底部面板是股票数据，红色垂直线表示峰值，绿色垂直线表示谷值。中间面板是处理后的数据，显示了窗口内的累计成功次数。顶部面板是窗口中的百分比差异。（图片来自作者）
- en: Besides detection of the exact peak and valley locations, we can also mark an
    entire region as depicted below. The marked regions are also intuitively sound
    as they correctly label the *regions of growth over time*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 除了检测确切的峰值和谷值位置外，我们还可以标记整个区域，如下所示。标记的区域也直观地合理，因为它们正确标记了*随时间增长的区域*。
- en: '![](../Images/bf162e5205a8e2be995f9e3a32c5c2ff.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bf162e5205a8e2be995f9e3a32c5c2ff.png)'
- en: Figure 8\. The results of the Cearus method. Besides peaks and valleys (red
    and green vertical lines), regions can also be extracted and marked. (image from
    the author)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图8\. Cearus方法的结果。除了峰值和谷值（红色和绿色垂直线）外，还可以提取和标记区域。（图片来自作者）
- en: Preprocessing is an important task.
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预处理是一个重要的任务。
- en: Each of the previously described peak detection methods has its own (dis)advantages.
    An important task is the preprocessing of the input signal to prevent the detection
    of false positive hits. Real-world data is often incomplete, noisy, and requires
    normalization or scaling. *The Findpeaks library contains various pre-processing
    functionalities to help in these steps, such as denoising, interpolation, resizing,
    normalization, and scaling. In the next section, we will go through the available
    preprocessing functionalities, especially for 2D arrays.*
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 之前描述的每种峰值检测方法都有其自身的优缺点。一个重要的任务是对输入信号进行预处理，以防止检测到假阳性结果。现实世界的数据通常是不完整的、嘈杂的，并且需要归一化或缩放。*Findpeaks库包含各种预处理功能，以帮助完成这些步骤，如去噪、插值、缩放、归一化和缩放。在下一节中，我们将深入了解可用的预处理功能，特别是针对2D数组的功能。*
- en: Image Preprocessing Steps.
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像预处理步骤。
- en: The findpeaks library pipelines 4 *preprocessing* steps which are executed in
    a specific order as depicted below. Each of these steps can be controlled by setting
    the input parameters. After the last step, the peak detection method is applied.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: findpeaks库执行4个*预处理*步骤，这些步骤按照下面所示的特定顺序执行。每个步骤都可以通过设置输入参数来控制。最后一步后，应用峰值检测方法。
- en: '***Resizing the image*** can help to improve peak detection and will dramatically
    reduce computation time.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***图像缩放*** 可以帮助提高峰值检测的效果，并显著减少计算时间。'
- en: '***Scaling pixel values*** between [0–255] is an important step to make images
    comparable and peak detection more robust.'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***缩放像素值*** 在[0-255]之间是使图像可比和峰值检测更稳健的重要步骤。'
- en: '***Conversion to grayscale*** lowers the computational burden and makes images
    comparable. When having RGB colors, it will be converted into a 2D array.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***转换为灰度*** 减少了计算负担，并使图像具有可比性。当图像是RGB颜色时，它将被转换为2D数组。'
- en: '***Noise filtering*** is a crucial step. See the next section for more details.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***噪声过滤*** 是一个关键步骤。有关更多细节，请参见下一节。'
- en: Removal of Noise Before Peak Detection.
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 峰值检测前的噪声去除。
- en: Noise is an unwelcome addition to the input signal that is usually a disturbance
    of the measured signal. Noise follows a specific distribution and is often application-dependent
    (Figure 9). In other words, different techniques can be required to effectively
    remove/filter the noise from the signal for certain applications. The figure below
    depicts different types of noise with their distributions. As an example, the
    removal of salt and pepper noise would require a different approach than for example
    Gaussian noise.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 噪声是不受欢迎的附加到输入信号上的成分，通常是测量信号的干扰。噪声遵循特定分布，并且通常依赖于应用（图9）。换句话说，为某些应用有效去除/过滤噪声可能需要不同的技术。下图展示了不同类型的噪声及其分布。例如，去除盐和胡椒噪声的方法与去除高斯噪声的方法不同。
- en: '![](../Images/30033d7585065934ff253de3d3cd7826.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/30033d7585065934ff253de3d3cd7826.png)'
- en: Figure 9\. Three different types of noise with their distributions. (image from
    the author)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图9\. 三种不同类型的噪声及其分布。（图像来自作者）
- en: A clear example is when working with SAR images such as from the Sentinel-1
    satellite. These images are known to be affected by speckle noise that degrades
    the image quality. It is caused by the back-scatter waves from multiple distributed
    targets. It is locally strong and it increases the mean grey level of the local
    area. *The Findpeaks library contains various noise removal filters:*
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一个明显的例子是处理来自Sentinel-1卫星的SAR图像。这些图像已知会受到斑点噪声的影响，从而降低图像质量。它是由多个分布目标的回波波动造成的，局部强度高，并增加了局部区域的平均灰度级。*Findpeaks库包含各种噪声去除滤波器：*
- en: '***fastnl***'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***fastnl***'
- en: '***bilateral***'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***双边***'
- en: '***lee***'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***李***'
- en: '***lee enhanced***'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***李增强***'
- en: '***lee sigma***'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***李Sigma***'
- en: '***kuan***'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***宽***'
- en: '***frost***'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***霜冻***'
- en: '***median***'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***中值滤波***'
- en: '***mean filter***'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***均值滤波器***'
- en: All filters can remove or filter noise under certain conditions with the aim
    of leaving the original signal intact. As an example, the `bilateral filter` uses
    a Gaussian filter to preserve edges. The `Lee Sigma` and `fastnl`filter is ideal
    for removing speckle noise from SAR images. Let's load an example image with speckle
    noise and visually inspect the performance of noise filtering and the detection
    of peaks. For demonstration purposes, we will first perform peak detection without
    preprocessing of noise filtering step as depicted in the next code section and
    Figure 10 and Figure 11.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 所有滤波器在特定条件下都可以去除或过滤噪声，目的是保留原始信号不变。例如，`双边滤波器`使用高斯滤波器来保持边缘。`Lee Sigma`和`fastnl`滤波器非常适合去除SAR图像中的斑点噪声。我们将加载一个带有斑点噪声的示例图像，并直观检查噪声过滤和峰值检测的性能。为了演示，我们将首先在不进行噪声过滤预处理的情况下执行峰值检测，如下一个代码段、图10和图11所示。
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/ff718bd14d01ca584d541e1cd2b60e9c.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ff718bd14d01ca584d541e1cd2b60e9c.png)'
- en: Figure 10\. The left panel depicts the raw input image. The middle panel depicts
    the image after gray scaling. The right panel depicts the detected peaks. Tens
    of thousands of false positive hits are detected. (image from the author)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图10\. 左侧面板展示了原始输入图像。中间面板展示了灰度化后的图像。右侧面板展示了检测到的峰值。检测到了成千上万的假阳性结果。（图像来自作者）
- en: '![](../Images/8c39f5c729fb2b5a66c697f650b02c73.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8c39f5c729fb2b5a66c697f650b02c73.png)'
- en: Figure 11\. The mesh plot can help to visually see the noise levels compared
    to the signal of interest. We can see the peak (left middle) but it is hard to
    distinguish it from the noise. (image from the author)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图11\. 网格图可以帮助直观地查看噪声水平与感兴趣信号的比较。我们可以看到峰值（左中），但很难将其与噪声区分开来。（图像来自作者）
- en: From this point on, we will *preprocess* the image by `scaling` the pixel values,
    perform a`grayscale` conversion, and `fastnl` noise filtering. Below are depicted
    the steps of preprocessing. The final step is the *topology* method for peak detection.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 从此时起，我们将通过`缩放`像素值、执行`灰度化`转换和`fastnl`噪声过滤来*预处理*图像。下图展示了预处理的步骤。最后一步是用于峰值检测的*拓扑*方法。
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/c8db09206910042691c8b2db12db135d.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c8db09206910042691c8b2db12db135d.png)'
- en: Figure 12\. From Raw input image (left panel) towards preprocessed and denoise
    image (right panel). (image from the author)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图12\. 从原始输入图像（左侧面板）到预处理和去噪图像（右侧面板）。（图像来自作者）
- en: As depicted in Figure 12, the final denoised image shows a clear removal of
    the speckle noise. But is it good enough to detect the correct peaks? In the next
    step, we can examine the detected peaks (see below). We can now plot the image
    and overlay it with the detected peaks as shown in Figure 13\. We can clearly
    see that the correct region is detected. With the mesh plot, we get an even better
    intuition of the peak of interest (Figure 14).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/c4a6f8de251621d9c7e2c4f58467fcc2.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: Figure 13\. The top 5 peaks are highlighted and correctly detected as the peak
    of interest. (image from the author)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a6f50d10f5cddba168b626d4992d6d12.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: Figure 14\. The preprocessing step together with the denoising results in clear
    noise reduction and keeping the signal of interest intact. (image from the author)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Final words.
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I touched on the concepts of peak detection for 1D vectors, and 2D arrays (images).
    With the ***Findpeaks library***, it becomes easy to detect peaks and valleys
    using the four different methods. It pipelines the process of interpolation, normalization,
    scaling, noise filtering, and then the detection of peaks and valleys. The output
    is a data frame that contains the candidate peaks and valleys with their locations
    and the class labels. The results can be explored with various plot functionalities.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '*Be Safe, Stay Frosty.*'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Cheers E.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '*If you find this article helpful, you are welcome to* [*follow me*](http://erdogant.medium.com/)*.
    If you are thinking of taking a Medium membership, you can support my work a bit
    by using my* [*referral link*](https://medium.com/@erdogant/membership)*. It is
    the same price as a coffee but allows you to read unlimited articles monthly.*'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Software
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Findpeaks Github/Documentation](https://erdogant.github.io/findpeaks/)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s connect!
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Let’s connect on LinkedIn](https://www.linkedin.com/in/erdogant/)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Follow me on Github](https://github.com/erdogant)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Follow me on Medium](https://erdogant.medium.com/)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: E. Taskesen, [*Outlier Detection Using Principal Component Analysis and Hotelling’s
    T2 and SPE/DmodX Methods*](/outlier-detection-using-principal-component-analysis-and-hotellings-t2-and-spe-dmodx-methods-625b3c90897),
    Medium
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: E. Taskesen, [*Outlier Detection Using Distribution Fitting in Univariate Datasets*](/outlier-detection-using-distribution-fitting-in-univariate-data-sets-ac8b7a14d40e)*,*
    Medium
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Find peaks inside a signal based on peak properties*](https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.find_peaks.html),
    Scipy.'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*H. Edelsbrunner and J. Harer, Computational Topology. An Introduction, 2010,
    ISBN 0–8218–4925–5.*'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
