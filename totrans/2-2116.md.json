["```py\ninstall.packages(\"profvis\")\n```", "```py\nlibrary(\"profvis\")\n\nprofvis({\n  y <- 0\n  for (i in 1:10000) {\n    y <- c(y,i)\n  }\n})\n```", "```py\ninstall.packages(\"microbenchmark\")\n```", "```py\ninstall.packages(\"microbenchmark\")\nlibrary(\"microbenchmark\")\n\ndata.frame <- data.frame (a  = 1:10000, b = rnorm(10000))\nmicrobenchmark(times=100, unit=\"ms\", apply(data.frame, 2, mean), colMeans(data.frame))\n\n# example console output:\n# Unit: milliseconds\n#                       expr      min        lq      mean    median        uq      max neval\n# apply(data.frame, 2, mean) 0.439540 0.5171600 0.5695391 0.5310695 0.6166295 0.884585   100\n#       colMeans(data.frame) 0.183741 0.1898915 0.2045514 0.1948790 0.2117390 0.287782   100\n```", "```py\nlibrary(\"microbenchmark\")\n\nmatrix = matrix (c(1, 2, 3, 4), nrow = 2, ncol = 2, byrow = 1)\ndata.frame <- data.frame (a  = c(1, 3), b = c(2, 4))\nmicrobenchmark(times=100, unit=\"ms\", matrix[1,], data.frame[1,])\n\n# example console output:\n# Unit: milliseconds\n#            expr      min        lq       mean    median       uq      max neval\n#     matrix[1, ] 0.000499 0.0005750 0.00123873 0.0009255 0.001029 0.019359   100\n# data.frame[1, ] 0.028408 0.0299015 0.03756505 0.0308530 0.032050 0.220701   100\n```", "```py\nlibrary(\"microbenchmark\")\n\nx <- c(1, 2, NA, 4, 5, 6, 7) \nmicrobenchmark(times=100, unit=\"ms\", anyNA(x), any(is.na(x)))\n# example console output:\n# Unit: milliseconds\n#          expr      min       lq       mean   median       uq      max neval\n#      anyNA(x) 0.000145 0.000149 0.00017247 0.000155 0.000182 0.000895   100\n# any(is.na(x)) 0.000349 0.000362 0.00063562 0.000386 0.000393 0.022684   100\n```", "```py\n# test: condition, if_yes: condition true, if_no: condition false\nifelse(test, if_yes, if_no)\n```", "```py\nlibrary(\"microbenchmark\")\n\nif.func <- function(x){\n  for (i in 1:1000) {\n    if (x < 0) {\n      \"negative\"\n    } else {\n      \"positive\"\n    }\n  }\n}\nifelse.func <- function(x){\n  for (i in 1:1000) {\n    ifelse(x < 0, \"negative\", \"positive\")\n  }\n}\nmicrobenchmark(times=100, unit=\"ms\", if.func(7), ifelse.func(7))\n\n# example console output:\n# Unit: milliseconds\n#           expr      min       lq       mean   median        uq      max neval\n#     if.func(7) 0.020694 0.020992 0.05181552 0.021463 0.0218635 3.000396   100\n# ifelse.func(7) 1.040493 1.080493 1.27615668 1.163353 1.2308815 7.754153   100\n```", "```py\nlibrary(\"parallel\")\n\nno_of_cores = detectCores()\nprint(no_of_cores)\n\n# example console output:\n# [1] 8\n```", "```py\ninstall.packages(\"devtools\")\nlibrary(\"devtools\")\n\ndevtools::install_github(\"csgillespie/efficient\", args = \"--with-keep.source\")\n```", "```py\nlibrary(\"parallel\")\nlibrary(\"microbenchmark\")\nlibrary(\"efficient\")\n\nN = 10^4\ncl = makeCluster(4)\n\nmicrobenchmark(times=100, unit=\"ms\", sapply(1:N, snakes_ladders), parSapply(cl, 1:N, snakes_ladders))\nstopCluster(cl)\n\n# example console output:\n# Unit: milliseconds\n#                               expr      min       lq     mean   median       uq      max neval\n#        sapply(1:N, snakes_ladders) 3610.745 3794.694 4093.691 3957.686 4253.681 6405.910   100\n# parSapply(cl, 1:N, snakes_ladders)  923.875 1028.075 1149.346 1096.950 1240.657 2140.989   100\n```", "```py\ninstall.packages(\"Rcpp\")\n```", "```py\nlibrary(\"Rcpp\")\n\ncppFunction('\n  double sub_cpp(double x, double y) {\n    double value = x - y;\n    return value;\n  }\n')\n\nresult <- sub_cpp(142.7, 42.7)\nprint(result)\n\n# console output:\n# [1] 100\n```"]