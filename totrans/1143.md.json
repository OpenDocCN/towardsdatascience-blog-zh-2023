["```py\ndef create_age_distribution(female_df, male_df, country, year):\n    df_f = female_df[female_df.country_name == country].loc[::-1]\n    df_m = male_df[male_df.country_name == country].loc[::-1]\n\n    ax = sns.barplot(y=df_m[\"indicator_name\"], x=df_m[year] * -1, orient=\"h\", color=MALE_COLOR)\n    ax = sns.barplot(y=df_f[\"indicator_name\"], x=df_f[year], orient=\"h\", color=FEMALE_COLOR)\n\n    return ax\n```", "```py\nfig = plt.figure(figsize=(10, 7))\n\nax = create_age_distribution(\n    female_df=population_female,\n    male_df=population_male,\n    country=\"World\",\n    year=\"2021\"\n)\n\nplt.show()\n```", "```py\ndef set_seaborn_style(font_family, background_color, grid_color, text_color):\n    sns.set_style({\n        \"axes.facecolor\": background_color,\n        \"figure.facecolor\": background_color,\n\n        \"axes.labelcolor\": text_color,\n\n        \"axes.edgecolor\": grid_color,\n        \"axes.grid\": True,\n        \"axes.axisbelow\": True,\n\n        \"grid.color\": grid_color,\n\n        \"font.family\": font_family,\n        \"text.color\": text_color,\n        \"xtick.color\": text_color,\n        \"ytick.color\": text_color,\n\n        \"xtick.bottom\": False,\n        \"xtick.top\": False,\n        \"ytick.left\": False,\n        \"ytick.right\": False,\n\n        \"axes.spines.left\": False,\n        \"axes.spines.bottom\": True,\n        \"axes.spines.right\": False,\n        \"axes.spines.top\": False,\n    }\n)\n```", "```py\nFEMALE_COLOR = \"#F64740\"\nMALE_COLOR = \"#05B2DC\"\n\nset_seaborn_style(\n    font_family=\"PT Mono\",\n    background_color=\"#253D5B\",\n    grid_color=\"#355882\",\n    text_color=\"#EEEEEE\"\n)\n```", "```py\ndef create_x_labels(ax, xformat):\n    if xformat == \"billions\":\n        return [\"{}B\".format(round(abs(x / 1e9))) for x in ax.get_xticks()[1:-1]]\n    elif xformat == \"millions\":\n        return [\"{}M\".format(round(abs(x / 1e6))) for x in ax.get_xticks()[1:-1]]\n    elif xformat == \"thousands\":\n        return [\"{}K\".format(round(abs(x / 1e3))) for x in ax.get_xticks()[1:-1]]\n    elif xformat == \"percentage\":\n        return [\"{}%\".format(round(abs(x), 1)) for x in ax.get_xticks()[1:-1]] \n```", "```py\ndef format_ticks(ax, xformat, xlim=(None, None)):\n    ax.tick_params(axis=\"x\", labelsize=12, pad=8)\n    ax.tick_params(axis=\"y\", labelsize=12)\n    ax.set(ylabel=None, xlabel=None, xlim=xlim)\n\n    plt.xticks(\n        ticks=ax.get_xticks()[1:-1],\n        labels=create_x_labels(ax, xformat)\n    )\n```", "```py\nfig = plt.figure(figsize=(10, 7))\n\nax = create_age_distribution(\n    female_df=population_female,\n    male_df=population_male,\n    country=\"World\",\n    year=\"2021\"\n)\n\n# New functions\nformat_ticks(ax, xformat=\"millions\")\n\nplt.show()\n```", "```py\ndef add_legend(x, y): \n    patches = [\n        Patch(color=MALE_COLOR, label=\"Male\"),\n        Patch(color=FEMALE_COLOR, label=\"Female\")\n    ]\n\n    leg = plt.legend(\n        handles=patches,\n        bbox_to_anchor=(x, y), loc='center',\n        ncol=2, fontsize=15,\n        handlelength=1, handleheight=0.4,\n        edgecolor=background_color\n    )\n```", "```py\nfig = plt.figure(figsize=(10, 8))\n\nax = create_age_distribution(\n    female_df=population_female,\n    male_df=population_male,\n    country=\"World\",\n    year=\"2021\"\n)\n\n# New functions\nformat_ticks(ax, xformat=\"millions\")\nadd_legend(x=0.5, y=1.09)\nplt.title(\"Age Distribution for the World in 2021\", y=1.14, fontsize=20)\n\nplt.tight_layout()\nplt.show()\n```", "```py\ndef create_image_from_figure(fig):\n    plt.tight_layout()\n\n    fig.canvas.draw()\n    data = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)\n    data = data.reshape((fig.canvas.get_width_height()[::-1]) + (3,))\n    plt.close() \n\n    return Image.fromarray(data)\n```", "```py\ndef add_padding_to_chart(chart, left, top, right, bottom, background):\n    size = chart.size\n    image = Image.new(\"RGB\", (size[0] + left + right, size[1] + top + bottom), background)\n    image.paste(chart, (left, top))\n    return image\n```", "```py\nfig = plt.figure(figsize=(10, 8))\n\nax = create_age_distribution(\n    female_df=population_female,\n    male_df=population_male,\n    country=\"World\",\n    year=\"2021\"\n)\n\n# New functions\nformat_ticks(ax, xformat=\"millions\")\nadd_legend(x=0.5, y=1.09)\nplt.title(\"Age Distribution for the World in 2021\", y=1.14, fontsize=20)\n\nimage = create_image_from_figure(fig)\nimage = add_padding_to_chart(image, 20, 20, 20, 5, background_color)\n```", "```py\ndef create_grid(figures, pad, ncols):\n    nrows = int(len(figures) / ncols)\n    size = figures[0].size\n\n    image = Image.new(\n        \"RGBA\",\n        (ncols * size[0] + (ncols - 1) * pad, nrows * size[1] + (nrows - 1) * pad),\n        \"#ffffff00\"\n    )\n\n    for i, figure in enumerate(figures):\n        col, row = i % ncols, i // ncols\n        image.paste(figure, (col * (size[0] + pad), row * (size[1] + pad)))\n\n    return image\n```", "```py\nfigures = []\n\nfor country in [\n    \"United States\", \"China\", \"Japan\", \"Brazil\", \"Canada\",\n    \"Germany\", \"Pakistan\", \"Russian Federation\", \"Nigeria\", \n    \"Sweden\", \"Cambodia\", \"Saudi Arabia\", \"Iceland\",\n    \"Spain\", \"South Africa\", \"Morocco\"\n]:\n\n    fig = plt.figure(figsize=(10, 8))\n\n    ax = create_age_distribution(\n        female_df=population_ratio_female,\n        male_df=population_ratio_male,\n        country=country,\n        year=\"2021\"\n    )\n\n    ax.set(xlim=(-10, 10))\n\n    # New functions\n    format_ticks(ax, xformat=\"percentage\")\n    add_legend(x=0.5, y=1.09)\n    plt.title(\"Age Distribution for {} in 2021\".format(country), y=1.14, fontsize=20)\n\n    image = create_image_from_figure(fig)\n    image = add_padding_to_chart(image, 20, 20, 20, 5, background_color)\n\n    figures.append(image)\n\ngrid = create_grid(figures, pad=20, ncols=4)\n```", "```py\nimages = []\nyears = list(population_male.columns[4:])\n\nfor year in years:\n    fig = plt.figure(figsize=(10, 8))\n\n    ax = create_age_distribution(\n        female_df=population_female,\n        male_df=population_male,\n        country=\"World\",\n        year=year\n    )\n\n    # New functions\n    format_ticks(ax, xformat=\"millions\", xlim=(-400000000, 400000000))\n    add_legend(x=0.5, y=1.09)\n    plt.title(\"Age Distribution for the World in      \", y=1.14, fontsize=21)\n    plt.text(x=0.77, y=1.15, s=str(year), fontsize=21, transform=ax.transAxes)\n\n    image = create_image_from_figure(fig)\n    image = add_padding_to_chart(image, 20, 20, 20, 5, background_color)\n    images.append(image)\n```", "```py\n# Duplicating the last frames to add a delay \n# before the animation restarts\nimages = images + [images[-1] for _ in range(20)]\nimageio.mimwrite('./time-lapse.gif', images, duration=0.2)\n```"]