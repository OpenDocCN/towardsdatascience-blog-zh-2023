["```py\nimport numpy as np\nimport polars as pl\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom category_encoders.target_encoder import TargetEncoder\nfrom category_encoders.ordinal import OrdinalEncoder\n```", "```py\n>>> data = pl.read_csv(\"basic_categorical_dataset_1.csv\")\n>>> data.shape\n(852, 2)\n\n>>> data.sample(5)\nshape: (5, 2)\n┌─────────────┬───────────┐\n│ cat_feature ┆ target    │\n│ ---         ┆ ---       │\n│ str         ┆ f64       │\n╞═════════════╪═══════════╡\n│ v           ┆ 16.287324 │\n│ z           ┆ 16.285893 │\n│ j           ┆ 5.718953  │\n│ p           ┆ 14.290943 │\n│ y           ┆ 2.972485  │\n└─────────────┴───────────┘\n\n>>> data.select(\"cat_feature\").n_unique()\n25\n```", "```py\n>>> x = data.select(\"cat_feature\").to_numpy()\n>>> y = data.select(\"target\").to_numpy()\n>>> x_train, x_test, y_train, y_test = train_test_split(\n...     x, y, test_size=0.20, random_state=3\n... )\n>>> x_train.shape\n(681, 1)\n```", "```py\n>>> label_encoder = LabelEncoder()\n>>> x_train_label_encoded = label_encoder.fit_transform(x_train.ravel())\n>>> x_test_label_encoded = label_encoder.transform(x_test.ravel())\n```", "```py\n>>> fig, ax = plt.subplots(figsize=(10, 6))\n>>> ax.scatter(x_train_label_encoded, y_train)\n>>> ax.set_xlabel(\"Label-Encoded Categorical Feature\")\n>>> ax.set_ylabel(\"Target\")\n>>> plt.show()\n```", "```py\n>>> model = DecisionTreeRegressor(max_depth=4)\n>>> model.fit(x_train_label_encoded.reshape(-1, 1), y_train)\n>>> preds = model.predict(x_test_label_encoded.reshape(-1, 1))\n```", "```py\n>>> fig, ax = plt.subplots(figsize=(10, 6))\n>>> ax.scatter(x_test_label_encoded, y_test, label=\"Actual Test Set\" )\n>>> ax.scatter(x_test_label_encoded, preds, label=\"Predictions\")\n>>> ax.set_xlabel(\"Label-Encoded Categorical Feature\")\n>>> ax.set_ylabel(\"Target\")\n>>> ax.set_title(\"Actual vs Predicted Test Set: Max Depth = 4\")\n>>> ax.legend()\n>>> plt.show()\n```", "```py\n>>> target_mean_encoder = TargetEncoder(smoothing=0, min_samples_leaf=1)\n>>> x_train_target_encoded = target_mean_encoder.fit_transform(x_train, y_train).values\n>>> x_test_target_encoded = target_mean_encoder.transform(x_test).values\n```", "```py\n>>> fig, ax = plt.subplots(figsize=(10, 6))\n>>> ax.scatter(x_train_target_encoded, y_train)\n>>> ax.set_xlabel(\"Target-Encoded Categorical Feature\")\n>>> ax.set_ylabel(\"Target\")\n>>> plt.show()\n```", "```py\n>>> model = DecisionTreeRegressor(max_depth=4)\n>>> model.fit(x_train_target_encoded.reshape(-1, 1), y_train)\n>>> preds = model.predict(x_test_target_encoded.reshape(-1, 1))\n\n>>> fig, ax = plt.subplots(figsize=(10, 6))\n>>> ax.scatter(x_test_target_encoded, y_test, label=\"Actual Test Set\" )\n>>> ax.scatter(x_test_target_encoded, preds, label=\"Predictions\")\n>>> ax.set_xlabel(\"Target-Encoded Categorical Feature\")\n>>> ax.set_ylabel(\"Target\")\n>>> ax.set_title(\"Actual vs Predicted Test Set: Max Depth = 4\")\n>>> ax.legend()\n>>> plt.show()\n```", "```py\n>>> data = pl.read_csv(\"basic_categorical_dataset_2.csv\")\n>>> data.shape\n(3777, 2)\n\n>>> data.sample(5)\nshape: (5, 2)\n┌───────────────────────────────────┬────────────┐\n│ cat_feature                       ┆ target     │\n│ ---                               ┆ ---        │\n│ str                               ┆ f64        │\n╞═══════════════════════════════════╪════════════╡\n│ 79a5808e-4e18-401a-94e7-7a478260… ┆ 369.232239 │\n│ c29ae2f2-c4c0-4a48-b15f-ba72a81e… ┆ 492.785283 │\n│ df809121-1f19-4f89-bb42-e7c593d9… ┆ 602.706521 │\n│ 5840ee5f-69e9-4f5b-ac20-17e01033… ┆ 731.986467 │\n│ b5c74247-6aff-4762-844e-3ebb3cbf… ┆ 404.087366 │\n└───────────────────────────────────┴────────────┘\n\n>>> data.select(\"cat_feature\").n_unique()\n917\n```", "```py\n>>> x = data.select(\"cat_feature\").to_numpy()\n>>> y = data.select(\"target\").to_numpy()\n>>> x_train, x_test, y_train, y_test = train_test_split(\n...     x, y, test_size=0.20, random_state=3\n... )\n>>> x_train.shape\n(3021, 1)\n\n>>> label_encoder = OrdinalEncoder(handle_unknown=\"value\")\n>>> x_train_label_encoded = label_encoder.fit_transform(x_train, y_train).values\n>>> x_test_label_encoded = label_encoder.transform(x_test).values\n\n>>> target_mean_encoder = TargetEncoder(\n...     smoothing=0, min_samples_leaf=1, handle_unknown=\"value\"\n... )\n>>> x_train_target_encoded = target_mean_encoder.fit_transform(x_train, y_train).values\n>>> x_test_target_encoded = target_mean_encoder.transform(x_test).values\n```"]