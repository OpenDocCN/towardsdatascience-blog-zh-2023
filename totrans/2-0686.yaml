- en: 'Decoding NumPy’s Dot Product: A Brief Exploration of Dimensional Wizardry'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/decoding-numpys-dot-product-a-brief-exploration-of-dimensional-wizardry-63d80f21a315](https://towardsdatascience.com/decoding-numpys-dot-product-a-brief-exploration-of-dimensional-wizardry-63d80f21a315)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Clarifying once and for all the confusion over NumPy’s dot product
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://mnslarcher.medium.com/?source=post_page-----63d80f21a315--------------------------------)[![Mario
    Larcher](../Images/b5b443807fe06f096ed4fc5139b3cb42.png)](https://mnslarcher.medium.com/?source=post_page-----63d80f21a315--------------------------------)[](https://towardsdatascience.com/?source=post_page-----63d80f21a315--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----63d80f21a315--------------------------------)
    [Mario Larcher](https://mnslarcher.medium.com/?source=post_page-----63d80f21a315--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----63d80f21a315--------------------------------)
    ·5 min read·Jul 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3a4c3b065c8db38640141fa8b5164cca.png)'
  prefs: []
  type: TYPE_IMG
- en: Image generated with [DreamStudio](https://beta.dreamstudio.ai/generate) with
    the prompt “A chaotic, dark, gloomy, multidimensional world full of code wizards”.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Am I the only one who periodically gets confused when dealing with dimensions
    in NumPy? Today, while reading a [Gradio’s documentation page](https://www.gradio.app/guides/quickstart#an-image-example),
    I came across the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Hey, hey, hey! Why does the dot product of an image (W, H, 3) with a filter
    (3, 3) is legal? I asked ChatGPT to explain it to me, but it started giving me
    wrong answers (like saying this doesn’t work) or ignoring my question and started
    answering something else instead. So, there was no other solution than using my
    brain (plus reading the documentation, sigh).
  prefs: []
  type: TYPE_NORMAL
- en: If you are also a little confuse by the code above, continue reading.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dot Product: A Generic Example'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the [NumPy dot product documentation](https://numpy.org/doc/stable/reference/generated/numpy.dot.html)
    (with minor modifications):'
  prefs: []
  type: TYPE_NORMAL
- en: If a.shape = (I, J, C) and b.shape = (K, C, L), then dot(a, b)[i, j, k, l] =
    sum(a[i, j, :] * b[k, :, l]). Notice that the last dimension of “a” is equal to
    the second-to-last dimension of “b”.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Or, in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Output (same result):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Understanding NumPy Dot Product Shape
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To determine the shape of a dot product beforehand, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1**: Consider two arrays, “a” and “b,” with their respective shapes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this example, array “a” has a shape of (4, 3, 2), and array “b” has a shape
    of (3, 2, 5). Notice, once again, that the last dimension of “a” and the second-to-last
    dimension of “b” must match.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 2**: Take all the dimensions of “a” except the last and all the dimensions
    of “b” except the second-to-last.'
  prefs: []
  type: TYPE_NORMAL
- en: For array “a,” we exclude the last dimension (which is 2), resulting in a shape
    of (4, 3). For array “b,” we exclude the second-to-last dimension (which is also
    2), resulting in a shape of (3, 5).
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 3**: Concatenate the shapes obtained in Step 2.'
  prefs: []
  type: TYPE_NORMAL
- en: 'By concatenating the shapes using our rule, we get (4, 3, 3, 5). Let’s verify
    if it is true:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the resulting shape of the dot product matches our calculated
    shape (4, 3, 3, 5). Thus, our understanding of the dot product shape is correct!
  prefs: []
  type: TYPE_NORMAL
- en: Clarifying the Dot Product with Sepia Filter for RGB Pixels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s return to the original example with an image (H, W, C) and a filter (O,
    C), in this case, (3, 3).
  prefs: []
  type: TYPE_NORMAL
- en: Remember that, in the original example, the dot product is with sepia_filter.T,
    that have shape (C, O). In this case C = O = 3 but if they were different this
    would be important.
  prefs: []
  type: TYPE_NORMAL
- en: I have to take all the dimensions except the last from the image dimension,
    in this case, H and W, and all the dimensions except the second to last from the
    filter dimension, in this case, O. So the resulting dimension is (H, W, O) or,
    in our case (H, W, 3), still “RGB-like”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the NumPy documentation notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that this is the same as (removing the transposition from sepia_filter):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: But intuitively, how is every RGB pixel in the new image computed? Basically,
    every channel value of every new pixel (imagine R, “red”, at position 4, 2) is
    a linear combination of the old RGB values of the pixel at the same position,
    where the weight of this linear combination is the value in the corresponding
    row in sepia_filter (row index 0 for R, 1 for G, and 2 for B).
  prefs: []
  type: TYPE_NORMAL
- en: '**Bonus**: You can also use [einsum](https://numpy.org/doc/stable/reference/generated/numpy.einsum.html)
    for this! (more confusion haha, I know, NumPy is hard):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7560752a9c5a0f8058c0160cd599ff12.png)'
  prefs: []
  type: TYPE_IMG
- en: My profile picture “sepia-toned”
  prefs: []
  type: TYPE_NORMAL
- en: Try it and try to understand how it works as an exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You’ve successfully delved into the world of NumPy’s dot product
    and unraveled its mysteries. By following a simple rule of shape concatenation,
    you can now easily determine the resulting shape of the dot product for any pair
    of arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how dimensions interact empowers you to use the dot product effectively
    in various image manipulations. For instance, we explored the transformation of
    an image with the sepia filter, creating beautiful effects through linear combinations
    of RGB values.
  prefs: []
  type: TYPE_NORMAL
- en: Now armed with this knowledge, you can confidently explore the vast possibilities
    of NumPy’s dot product in your numerical computations and image processing tasks.
    So, dive in fearlessly, experiment, and let the dot product work its magic!
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for taking the time to read this article, and please feel free to
    leave a comment or connect with me to share your thoughts or ask any questions.
    To stay updated on my latest articles, you can follow me on [Medium](https://medium.com/@mnslarcher),
    [LinkedIn](https://www.linkedin.com/in/mnslarcher/) or [Twitter](https://twitter.com/mnslarcher).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@mnslarcher/membership?source=post_page-----63d80f21a315--------------------------------)
    [## Join Medium with my referral link - Mario Namtao Shianti Larcher'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@mnslarcher/membership?source=post_page-----63d80f21a315--------------------------------)
  prefs: []
  type: TYPE_NORMAL
