- en: 'Data Streaming Is Exciting: What You Need to Know Before Jumping in'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/data-streaming-is-exciting-what-you-need-to-know-before-jumping-in-e233e192337b](https://towardsdatascience.com/data-streaming-is-exciting-what-you-need-to-know-before-jumping-in-e233e192337b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Is Data Streaming Right for Your Business? Key Facts to Consider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://chengzhizhao.medium.com/?source=post_page-----e233e192337b--------------------------------)[![Chengzhi
    Zhao](../Images/186bba91822dbcc0f926426e56faf543.png)](https://chengzhizhao.medium.com/?source=post_page-----e233e192337b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e233e192337b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e233e192337b--------------------------------)
    [Chengzhi Zhao](https://chengzhizhao.medium.com/?source=post_page-----e233e192337b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e233e192337b--------------------------------)
    ·5 min read·Feb 27, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1d33cd261fc165c0bb572ab116c342c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Stephen Leonardi](https://unsplash.com/@stephenleo1982?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/DpvBWb4JW1M?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: 'Streaming data is an exciting space in the data field, and it has been getting
    tremendous attraction in recent years. With much excitement, the areas for open-source
    projects became crowded. Many technologies have made the streaming data process
    more straightforward than ever: Kafka, Flink, Spark, Storm, Beam, etc., have been
    in the market for years and have built a solid user base.'
  prefs: []
  type: TYPE_NORMAL
- en: “Let’s do streaming processing.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'It is an inevitable topic for data professionals. However, before anyone tells
    you about streaming, we should step back and double confirm with ourselves with
    a simple question: **Do I need streaming data for this use case?** Before jumping
    into it, let’s face the facts of streaming data in this story.'
  prefs: []
  type: TYPE_NORMAL
- en: Streaming Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we look at the facts about streaming data, let’s first look at what streaming
    data is. Hadoop set the foundation for processing large datasets and empowered
    data professionals to design more sophisticated data processing tools.
  prefs: []
  type: TYPE_NORMAL
- en: '[Tyler Akidau](https://www.oreilly.com/people/tyler-akidau/)’s paper on [MillWheel:
    Fault-Tolerant Stream Processing at Internet Scale](https://research.google/pubs/pub41378/)
    in 2013 sets the basis for modern streaming and inspires a streaming framework
    like [Apache Flink](https://flink.apache.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: Tyler’s famous [Streaming 101](https://www.oreilly.com/radar/the-world-beyond-batch-streaming-101/),
    [Streaming 102](https://www.oreilly.com/radar/the-world-beyond-batch-streaming-102/),
    and his book [Streaming System](https://www.oreilly.com/library/view/streaming-systems/9781491983867/)
    have the extensive context of streaming data.
  prefs: []
  type: TYPE_NORMAL
- en: I use the term “streaming,” you can safely assume I mean an execution engine
    designed for unbounded data sets, and nothing more. — [Tyler Akidau](https://www.oreilly.com/people/tyler-akidau/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Let’s use the exact definition followed by Tyler and focus on unbounded data
    throughout this story.
  prefs: []
  type: TYPE_NORMAL
- en: Kappa vs. Lambda Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are all familiar with Lambda architecture — we use two independent data
    processing systems: batch and streaming, writing similar logic twice and processing
    the same data. The streaming is for speculation, and the collection is for accuracy
    and completeness.'
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, we have Kappa architecture. We have a single pipeline running
    without duplicated code and leverage Kafka to achieve replayable action when we’d
    need accuracy and completeness.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, Kappa is a great idea for a well-designed system. However, the such
    system needs to keep data processing as the first citizen.
  prefs: []
  type: TYPE_NORMAL
- en: Streaming data Is Not Silver Bullet.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A while ago, there was an impression on data processing that “**Streaming Data
    Is a Silver Bullet,**” and we will all move to stream data. Batch processing is
    an antique.
  prefs: []
  type: TYPE_NORMAL
- en: 'Momentarily, people realized that streaming data isn’t the silver bullet to
    solve the problem but could worsen things:'
  prefs: []
  type: TYPE_NORMAL
- en: Streaming isn’t good enough to generate the complete data analysis dataset.
    A batch is still required to close the gap due to the late arrival of data or
    processing errors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streaming and batch processing usually speak a different language. Streaming
    usually runs in Java, Scala, and Go with frameworks like Apache Flink / Kafka
    Stream. Batch processing usually runs in Python, SQL, and R with frameworks like
    Apache Spark / SQL engine. Duplicating the same logic for both batch and streaming
    is a headache. It is one of the most challenging problems when running lambda
    architecture in production.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streaming data trade-offs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data naturally comes in a streaming fashion. Solving data problems in batch
    seems inappropriate initially, but batch has a reason to be famous for decades.
    Processing data in the batch is a simplified philosophy to resolve a complex problem.
  prefs: []
  type: TYPE_NORMAL
- en: There are significant trade-offs between batch processing and streaming processing.
  prefs: []
  type: TYPE_NORMAL
- en: '**Completeness vs. Speculation**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many data sources are inevitably generated with delay; mainly, your data analysis
    includes multiple data sources. Batch processing is an excellent position to handle
    completeness by delaying processing when everything is ready.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, data streaming can do so by waiting additional time means
    keeping data in memory for hours or a day, and it is expensive to accomplish this
    goal. Streaming can also deliver a complete dataset but requires the upstream
    data generator to cooperate to solve the data consolidation and extra delay.
  prefs: []
  type: TYPE_NORMAL
- en: '**The accurate SLA for your use case**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How fast do you need your streaming system to process data, and how much latency
    can you accept for your use case? Many ETL batch pipeline is processed daily.
    Is that slow for your business? Many use cases are **NOT** SLA restricted. Unlike
    advertisement or day trading, delays for hours won’t stop the company from operating
    regularly.
  prefs: []
  type: TYPE_NORMAL
- en: Streaming data is not easy to maintain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Late arrival data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One inevitable fact for any data processing system is: **Data Arrives Late**.
    A well-designed system could sometimes dodge this problem but only occasionally.'
  prefs: []
  type: TYPE_NORMAL
- en: In batch processing, late arrival data is not a big concern since data is processed
    much later than its event date, and SLA isn’t strict to minutes or hours. People
    who work in batch processing have a lower expectation that data will arrive within
    24 hours or more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Streaming isn’t a solution for a “catch-all” scenario—concepts like the [watermark](https://nightlies.apache.org/flink/flink-docs-master/docs/dev/datastream/event-time/generating_watermarks/)
    give an additional buffer for us to process that late arrival data. However, the
    watermark is another way to keep data in memory for some time. Memory isn’t free:
    at a further point, the watermark has to advance, and you decide to drop the record
    or send it to a dead queue for another process to reprocess — batch processing.'
  prefs: []
  type: TYPE_NORMAL
- en: 24/7 maintenance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maintaining a streaming application is demanding. Unlike batch processing, you
    have a downtime window in which you can relax to decide to fix a bug or drink
    a coffee.
  prefs: []
  type: TYPE_NORMAL
- en: With streaming data processing, 24/7 with minimum downtime is required. Your
    on-call team must monitor and fix potential data issues to keep the pipeline running.
    Streaming might sound exciting, but being on call as a data engineer who maintains
    a streaming pipeline takes a lot of work.
  prefs: []
  type: TYPE_NORMAL
- en: '**The join date is way more complex.**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Join data with multiple streams isn’t trivial in streaming. In batch, joining
    is easy by stitching a set of standard keys with two bounded tables. In streaming,
    careful consideration must be taken where two unbounded datasets join together.
  prefs: []
  type: TYPE_NORMAL
- en: 'A bigger question arises: How do we know if there are still incoming records
    we’d need to consider? Tyler’s [Streaming 102](https://www.oreilly.com/radar/the-world-beyond-batch-streaming-102/)
    has a great example to demonstrate this. tl;dr, joining data among different streams
    is far more complex than batch processing'
  prefs: []
  type: TYPE_NORMAL
- en: Final thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before adopting a streaming application, it’s critical to understand if your
    use case suits it.
  prefs: []
  type: TYPE_NORMAL
- en: Processing data in streaming fashion is exciting and attractive.
  prefs: []
  type: TYPE_NORMAL
- en: However, there is a cost for the excitement. Batch processing is more straightforward
    and has been historically approved for decades. Understanding the pros and cons
    before blindly jumping into data streaming processing should be carefully evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: 'I hope this story is helpful to you. This article is **part of a series** of
    my engineering & data science stories that currently consist of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chengzhi Zhao](../Images/51b8d26809e870b4733e4e5b6d982a9f.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Chengzhi Zhao](https://chengzhizhao.medium.com/?source=post_page-----e233e192337b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Data Engineering & Data Science Stories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[View list](https://chengzhizhao.medium.com/list/data-engineering-data-science-stories-ddab37f718e7?source=post_page-----e233e192337b--------------------------------)53
    stories![](../Images/8b5085966553259eef85cc643e6907fa.png)![](../Images/9dcdca1fc00a5694849b2c6f36f038d4.png)![](../Images/2a6b2af56aa4d87fa1c30407e49c78f7.png)'
  prefs: []
  type: TYPE_NORMAL
- en: You can also [**subscribe to my new articles**](https://chengzhizhao.medium.com/subscribe)
    or become a [**referred Medium member**](https://chengzhizhao.medium.com/membership)with
    unlimited access to all the stories on Medium.
  prefs: []
  type: TYPE_NORMAL
- en: In case of questions/comments, **do not hesitate to write in the comments**
    of this story or **reach me directly** through [Linkedin](https://www.linkedin.com/in/chengzhizhao/)
    or [Twitter](https://twitter.com/ChengzhiZhao).
  prefs: []
  type: TYPE_NORMAL
