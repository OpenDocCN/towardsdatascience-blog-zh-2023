["```py\n%timeit code_to_execute\n```", "```py\n34.6 ns ± 1.17 ns per loop (mean ± \nstd. dev. of 7 runs, 10000000 loops each)\n```", "```py\n%timeit l1=['sue','joe','liz']\n\n###Result\n34.6 ns ± 1.17 ns per loop (mean ± \nstd. dev. of 7 runs, 10000000 loops each)\n```", "```py\n%timeit l2=list(['sue','joe','liz'])\n\n###Result\n92.8 ns ± 1.35 ns per loop (mean ± \nstd. dev. of 7 runs, 10000000 loops each)\n```", "```py\n#Efficient\nlst = []\ntup = ()\ndct = {}\n\n#Not Efficient\nlst = list()\ntup = tuple()\ndct = dict()\n```", "```py\n#Efficient\nlst = [*range(10)]\n\n#Less efficient\nlst = list(range(10))\n```", "```py\n%timeit -r 5 -n 1000 list=['sue','liz','joe']\n\n###Result\n42 ns ± 0.458 ns per loop (mean ± std. dev. of 5 runs, 1000 loops each)\n```", "```py\n%%timeit\ncode_line_1\ncode_line_2\n...\n```", "```py\n%%timeit -r 5 -n 1000\nsquared_list=[]\nfor num in range(1000):\n    num_squared=num**2\n    squared_list.append(num_squared)\n\n###Result\n198 µs ± 9.31 µs per loop (mean ± \nstd. dev. of 5 runs, 1000 loops each)\n```", "```py\n%timeit -r 5 -n 1000 squared_list=[num**2 for num in range(1000)]\n\n###Result\n173 µs ± 7.22 µs per loop (mean ± \nstd. dev. of 5 runs, 1000 loops each)\n```", "```py\n%lprun -f function_name function_name(args)\n```", "```py\n!pip install line_profiler\n\n%load_ext line_profiler\n```", "```py\ndef remove_dups1(lst):\n    uniques = []\n    for name in lst:\n        if name not in uniques:\n            uniques.append(name)\n    return uniques\n```", "```py\n%lprun -f remove_dups1 remove_dups1(lst)\n```", "```py\ndef remove_dups2(lst):\n    return list(set(lst))\n```", "```py\n%lprun -f remove_dups2 remove_dups2(lst)\n```", "```py\n!pip install memory_profiler\n\n%load_ext memory_profiler\n```", "```py\nfrom my_file import func_name\n\n%mprun -f func_name func_name(params) \n```", "```py\nimport pandas as pd\n\ndata = pd.read_csv('Fuel_Consumption_2000-2022.csv')\n```", "```py\n%%file my_file.py\ndef calc_apply(df):\n    column = df['COMB (mpg)']\n    new_vals = column.apply(lambda x: x* 0.425)\n    df['kml'] = new_vals\n    return df\n\ndef calc_listcomp(df):\n    column = df['COMB (mpg)']\n    new_vals = [x*0.425 for x in column]\n    df['kml'] = new_vals\n    return df\n\ndef calc_direct(df):\n    column = df['COMB (mpg)']\n    new_vals = column*0.425\n    df['kml'] = new_vals\n    return df\n\ndef calc_numpy(df):\n    column = df['COMB (mpg)'].values\n    new_vals = column*0.425\n    df['kml'] = pd.Series(new_vals)\n    return df\n```", "```py\n %load_ext memory_profiler\n\nfrom my_file import calc_apply, calc_listcomp, \n                    calc_direct, calc_numpy\n```", "```py\n%mprun -f calc_apply calc_apply(data.copy())\n```", "```py\n%mprun -f calc_listcomp calc_listcomp(data.copy())\n```", "```py\n%mprun -f calc_direct calc_direct(data.copy())\n```", "```py\n%lprun -f calc_direct calc_direct(data.copy())\n```", "```py\n%lprun -f calc_numpy calc_numpy(data.copy())\n```"]