- en: Predict the Limits of Human Performance with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/predict-the-limits-of-human-performance-with-python-50cc824d2539](https://towardsdatascience.com/predict-the-limits-of-human-performance-with-python-50cc824d2539)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Modeling exponential decay with SciPy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@lee_vaughan?source=post_page-----50cc824d2539--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----50cc824d2539--------------------------------)[](https://towardsdatascience.com/?source=post_page-----50cc824d2539--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----50cc824d2539--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----50cc824d2539--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----50cc824d2539--------------------------------)
    ·10 min read·May 1, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dd3cd6cef24373c9dd49fb7a341aaeef.png)'
  prefs: []
  type: TYPE_IMG
- en: An expressive oil painting of an Olympic runner bursting through the finish
    line tape depicted as the explosion of a nebula (by DALL-E2)
  prefs: []
  type: TYPE_NORMAL
- en: Will a human ever outrun a Ferrari? Of course not. Human performance is inherently
    limited, and many factors restrict our speed, including how quickly our blood
    can deliver oxygen and how fast our muscles can twitch. Unless we undergo significant
    genetic engineering, we’re about as fast as we’ll ever be.
  prefs: []
  type: TYPE_NORMAL
- en: So how do we know this? Well, human performance, like many other traits, follows
    a [*bell curve distribution*](https://en.wikipedia.org/wiki/Normal_distribution)
    [1]. This means that most people fall within the average range, near the peak
    of the curve, with only a small percentage being exceptionally slow or fast. As
    we move farther away from the peak, the number of individuals with that level
    of performance drops off exponentially. In the case of sprinting, this means that
    the fastest sprinters have already reached the flattened, tapered part of the
    curve. As a result, making significant speed improvements will become increasingly
    difficult.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c0e8c855074e4ef95ee28c24314a7cbf.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph of 100 m trial times below 9.93 seconds recorded since 2005 [2]. (after
    [McCormick School of Engineering](https://www.mccormick.northwestern.edu/news/articles/2016/08/how-long-will-it-take-to-break-usain-bolts-100-meter-dash-record.html)
    (2016))
  prefs: []
  type: TYPE_NORMAL
- en: This is not to say that there’s no room for improvement. Training, nutrition,
    equipment, and other factors can help individuals improve their performance within
    their genetic limits. However, it’s important to recognize that we cannot fundamentally
    alter our physical limitations, especially if regulatory authorities continue
    to limit the use of advanced biotechnologies in track and field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because human performance is *bounded*, we can forecast future outcomes in
    many sports [3]. For example, the reduction in world record times for the 100
    m dash, like many other natural phenomena, appears to follow a pattern of [*exponential
    decay*](https://en.wikipedia.org/wiki/Exponential_decay) [4]. As a result, we
    can model it with an exponential equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9da87a135aa9e2cce28c5f892a47a9bc.png)'
  prefs: []
  type: TYPE_IMG
- en: An exponential equation (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'In this equation, `y` represents a prediction of a world record sprint time,
    in seconds; `x` represents the number of years since the first record was set;
    and `a`, `b`, and `c` represent *curve-fitting* parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`a` is the *scale factor* or *amplitude*. It determines the vertical stretch
    or compression of the exponential function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b` is the *decay constant*. It represents how quickly the function decays
    as `x` increases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`c` is the amount of *vertical shift*. It determines the `y` value of the horizontal
    asymptote, which is a horizontal line that the exponential function approaches
    as `x` approaches infinity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These three parameters are solved by fitting an exponential function to a set
    of data points using a *curve-fitting algorithm*. The values that best fit the
    data are determined by minimizing the sum of the squares of the differences between
    the predicted values of `y` and the actual values of `y` at each value of `x`.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, if you’re not a mathematician, finding the correct parameters might
    be a bit daunting. Fortunately for the rest of us, there’s a Python library that
    makes curve optimization a breeze.
  prefs: []
  type: TYPE_NORMAL
- en: The SciPy Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The open-source [SciPy library](https://scipy.org/) expands on NumPy by providing
    physical constants, conversion factors, and numerical routines for mathematics,
    science, and engineering use [5]. These include optimization routines for curve
    fitting, which is just what we need for this project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install SciPy with conda use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conda install scipy`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install with pip use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install scipy`'
  prefs: []
  type: TYPE_NORMAL
- en: The Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python code for this project was written in JupyterLab. If you want to download
    the notebook, you can find it at this [Gist](https://gist.github.com/rlvaugh/f1c293c7b31fa878b0cdeb256c6e99ab).
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries and Setting RC Parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following cell imports libraries and sets run configuration parameters for
    matplotlib figures. Setting these parameters upfront is not strictly necessary
    but reduces code later when plotting multiple figures.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Loading the Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: World records don’t get broken very often, so there are fewer than two dozen
    to match. We’ll use the records list at the *topend sports* [site](https://www.topendsports.com/sport/athletics/record-100m.htm)
    and enter it as a dictionary [6]. We’ll then turn the dictionary into a pandas
    DataFrame for ease of use. Most of our analysis will use the records (in seconds)
    versus the number of years since the first record, so we’ll add a column for the
    number of years.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4b7bb980b173c8d8b7fedc8307e04419.png)'
  prefs: []
  type: TYPE_IMG
- en: The men’s 100 m world records DataFrame (image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Graphing the World Records
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It’s always a good idea to look at your data as soon as possible, so let’s make
    a stem plot from the DataFrame. This should make it easy to see trends and outliers
    in the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/26206ba2c00fa092c396aef7c2d32b70.png)'
  prefs: []
  type: TYPE_IMG
- en: Stem plot of men’s 100 m world records by year (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: As you might expect for exponential decay, the record times decrease fairly
    quickly at first but then start to flatten out, like an airplane approaching a
    runway. While modern athletes are professionals with optimized training, nutrition,
    and equipment, gains get harder to come by as you approach the limit of human
    performance. *Or do they*?
  prefs: []
  type: TYPE_NORMAL
- en: Look at the last two data points on the right. They look like they fell off
    a cliff. This is no gentle curve coming in for a soft landing. This is weird.
    *This* is *Usain Bolt*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e9f2b409688fc7feab4ceb7bfaadb75b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Jamaican runner montage by DALL-E2 (prompt: A dramatic oil painting of a Jamaican
    Olympic runner wearing yellow shirt and green shorts and bursting through the
    finish line tape depicted as the explosion of a nebula)'
  prefs: []
  type: TYPE_NORMAL
- en: The Insane Story of Usain Bolt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Usain Bolt](https://en.wikipedia.org/wiki/Usain_Bolt) is a Jamaican runner
    and holder of the “world’s fastest man” title [6][7]. In 2008, he won an Olympic
    gold medal in the men’s 100 m sprint with a time of 9.69 seconds. This set a new
    world record, despite the fact that he slowed down to celebrate early (you can
    watch it [here](https://www.youtube.com/watch?v=93dC0o2aHto)).'
  prefs: []
  type: TYPE_NORMAL
- en: A year later Bolt stayed focused and crossed the finish line with a time of
    9.58 seconds and a peak speed of 44.72 km/hr (27.79 mph). This record was *decades*
    earlier than biostatisticians expected, based on the mathematical models of the
    time.
  prefs: []
  type: TYPE_NORMAL
- en: Today, thanks to Bolt, predictions for the ultimate time for the 100 m come
    with a *lot* of humility and uncertainty. Among the numbers bandied around are
    a relatively high 9[.44 seconds](https://www.wired.com/2008/08/bolt-is-freaky/)
    and a very low [9.27](https://www.runnersworld.com/races-places/a20791832/ultimate-100-meter-time-9-27-seconds/)
    [8][9].
  prefs: []
  type: TYPE_NORMAL
- en: To judge the impact Bolt had on 100 m dash predictions, let’s make some of our
    own. These will be purely mathematical, and based only on previous *world records*,
    rather than on the results of *all* professional races. We’ll first forecast the
    outcomes *without* Bolt, then repeat the process *with* Bolt. Since we’ll be doing
    this more than once, we’ll start by writing functions for creating and optimizing
    exponential functions.
  prefs: []
  type: TYPE_NORMAL
- en: Defining Functions for Exponential Decay
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first function will take the `x` values (years since the first record) and
    curve-fitting parameters `a`, `b`, and `c`, and return predicted `y` values (times).
    The second function will accept the first function as an argument, along with
    the `x` and `y` data, and use SciPy's `[optimize.curve_fit()](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.curve_fit.html#scipy.optimize.curve_fit)`
    method to automatically choose the best fitting parameters. We'll set the `p0`
    parameter to `None`, which means we'll let the method decide on the best minimum
    and maximum values for predicted values of `y`, rather than providing guesses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Optimizing the Curve Fitting Parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before calling our functions, we need to build datasets of the world records
    *with* Bolt’s times (`_all` suffix) and *without* them (`_nB` suffix). We'll pass
    these, along with our `expo()` function, to the `optimize_curve_fit()` function.
    This function returns the optimized `a`, `b`, and `c` fitting parameters as a
    NumPy array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Plotting the Results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To plot our predictive curves, we’ll pass our exponential decay function (`expo()`)
    to matplotlib's `plot()` method, along with the optimized fitting parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a56fc4cfdb9410f57705288c4da230fb.png)'
  prefs: []
  type: TYPE_IMG
- en: The two exponential curves fitted to the world record data (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Wow. Usain Bolt is truly off the curve. This is because, physically, he’s an
    *outlier*. Although taller than most sprinters and with a longer stride, he’s
    still able to maintain a similar *stride frequency* which means he can cover the
    same distance in fewer steps. This may be because he incorporates the fast-twitch
    muscle fibers of smaller sprinters with the mechanical advantages of a taller
    man’s body [8].
  prefs: []
  type: TYPE_NORMAL
- en: A valid question here is whether he *broke the curve* or merely *accelerated
    our progress along it*. To investigate, we’ll need to extrapolate the two curves
    into the future.
  prefs: []
  type: TYPE_NORMAL
- en: Predicting Future Performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following code first extrapolates the exponential curves over 570 years
    (from 20 years before the first record in 1912 to 550 years after). After plotting
    the curves, it marks Bolt’s data points so that we can see where they intersect
    the curves in the future. Finally, it prints the minimum time predicted for each
    curve. Note that these values are the same as the `c` parameter from the curve-fitting
    exercise.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/93ce6c406481c0ea881cb6be94e9e0a0.png)'
  prefs: []
  type: TYPE_IMG
- en: The two curves extrapolated into the future (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Technically, both curves allow for Bolt’s current record of 9.58 seconds. If
    we assume that the red curve, which *includes* Bolt’s data, is providing a valid
    prediction, then Bolt’s accomplishment was decades ahead of schedule.
  prefs: []
  type: TYPE_NORMAL
- en: The red curve predicts that the ultimate human limit in the 100 m dash is 9.19
    seconds and will be reached in about 400 years. Although 9.19 seconds is surely
    on the fast side, it’s not out of line with other published predictions, such
    as [9.27](https://www.runnersworld.com/races-places/a20791832/ultimate-100-meter-time-9-27-seconds/),
    [9.26](https://ideaisaac.blogspot.com/2008/08/world-records-for-mens-100-m-defy.html),
    and [9.09](https://ideaisaac.blogspot.com/2009/08/world-record-progression-for-mens-100-m.html)
    seconds [9][10][11].
  prefs: []
  type: TYPE_NORMAL
- en: And while 400 years is a long time, some researchers believe Bolt’s *current*
    record will stand for another [230 years](https://www.mccormick.northwestern.edu/news/articles/2016/08/how-long-will-it-take-to-break-usain-bolts-100-meter-dash-record.html)
    [2]! At any rate, our values of 9.57 and 9.19 seconds are plausible and have a
    good chance of bracketing the ultimate value. Isn’t math (and Python) wonderful?
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many natural phenomena, such as radioactive decay, fracturing in rocks, and
    population growth, can be modeled mathematically with tools like exponential equations,
    power laws, and logistic functions. In addition to matching existing data, these
    models can also forecast future behavior. In this *Quick Success Data Science*
    project, we used an exponential equation to predict the ultimate run time for
    the men’s 100 m race.
  prefs: []
  type: TYPE_NORMAL
- en: Fitting curves to data requires the manipulation of multiple parameters. The
    goal is to minimize the errors between actual data points and predicted data points.
    Python’s SciPy library includes functions that automate this process and make
    curve-fitting accessible to everyone.
  prefs: []
  type: TYPE_NORMAL
- en: Sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] Normal distribution. (2023, April 16). In Wikipedia. [https://en.wikipedia.org/wiki/Normal_distribution](https://en.wikipedia.org/wiki/Normal_distribution).'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] Northwestern University, McCormick School of Engineering: [*How Long Will
    it Take to Break Usain Bolt’s 100-meter Dash Record? Professor Luis Amaral calculates
    the odds*](https://www.mccormick.northwestern.edu/news/articles/2016/08/how-long-will-it-take-to-break-usain-bolts-100-meter-dash-record.html)
    (2016).'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] Little, Brown and Company, [*The Formula: The Universal Laws of Success*](https://a.co/d/hbMZ1x4)
    by Albert-László Barabási (2018).'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] [*Exponential decay*](https://en.wikipedia.org/wiki/Exponential_decay).
    (2023, March 11). In Wikipedia.'
  prefs: []
  type: TYPE_NORMAL
- en: '[5] SciPy: [*https://scipy.org/*](https://scipy.org/) (2023).'
  prefs: []
  type: TYPE_NORMAL
- en: '[6] Robert Wood, “*100m World Records*.” Topend Sports Website, 2008, [https://www.topendsports.com/sport/athletics/record-100m.htm,](https://www.topendsports.com/sport/athletics/record-100m.htm,)
    Accessed 1 May 2023.'
  prefs: []
  type: TYPE_NORMAL
- en: '[7] [*Usain Bolt*](https://en.wikipedia.org/wiki/Usain_Bolt). (2023, April
    15). In Wikipedia.'
  prefs: []
  type: TYPE_NORMAL
- en: '[8] Wired: [*Bolt is Freaky Fast, But Nowhere Near Human Limits*](https://www.wired.com/2008/08/bolt-is-freaky/)
    by Alexis Madrigal (2008).'
  prefs: []
  type: TYPE_NORMAL
- en: '[9] Runner’s World: [*Ultimate 100-Meter Time: 9.27 Seconds?*](https://www.runnersworld.com/races-places/a20791832/ultimate-100-meter-time-9-27-seconds/)
    by Amby Burfoot (2014).'
  prefs: []
  type: TYPE_NORMAL
- en: '[10] Idea & Issac: Femto Essays: [*World Records for Men’s 100 m Defy Simple
    Curve Fitting*](https://ideaisaac.blogspot.com/2008/08/world-records-for-mens-100-m-defy.html)
    by Tatsuo Tabata (2008).'
  prefs: []
  type: TYPE_NORMAL
- en: '[11] Idea & Issac: Femto Essays: [*Bolt’s World Record Changes Empirical Prediction
    Again*](https://ideaisaac.blogspot.com/2009/08/world-record-progression-for-mens-100-m.html)
    by Tatsuo Tabata (2009).'
  prefs: []
  type: TYPE_NORMAL
- en: Thanks!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for reading and be sure to follow me for more *Quick Success Data Science*
    projects in the future.
  prefs: []
  type: TYPE_NORMAL
