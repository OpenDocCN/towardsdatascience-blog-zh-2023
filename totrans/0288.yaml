- en: An Analysis of the Top Tech YouTube Channels with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/an-analysis-of-the-top-tech-youtube-channels-with-python-ad42c0291723](https://towardsdatascience.com/an-analysis-of-the-top-tech-youtube-channels-with-python-ad42c0291723)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Using the YouTube API to understand the performance of the top YouTube tech
    channels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://guillaume-weingertner.medium.com/?source=post_page-----ad42c0291723--------------------------------)[![Guillaume
    Weingertner](../Images/fbfb34af986a7788394b6033c6954d57.png)](https://guillaume-weingertner.medium.com/?source=post_page-----ad42c0291723--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ad42c0291723--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ad42c0291723--------------------------------)
    [Guillaume Weingertner](https://guillaume-weingertner.medium.com/?source=post_page-----ad42c0291723--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ad42c0291723--------------------------------)
    ·9 min read·Sep 8, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3c9e03b46832b007aa1cde6d70ac1d43.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo de [Szabo Viktor](https://unsplash.com/fr/@vmxhu?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    sur [Unsplash](https://unsplash.com/fr/photos/UfseYCHvIH0?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: '#0 The YouTube API'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Did you know that YouTube had an API? And did you know that this API can be
    used to get all the data you need for a cool data science project? Well, now you
    do.
  prefs: []
  type: TYPE_NORMAL
- en: In this article we will demonstrate how to use it to get a rich dataset which
    will allow us to analyze and compare the top tech channels.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to be able to make requests to the YouTube API we need to follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project in your [Google Developers Console](https://console.developers.google.com/)
    — all you need is a Google account to do this
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Request an API key on the “CREDENTIALS” tab by clicking “CREATE CREDENTIALS”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the YouTube API service by clicking on “ENABLE APIS AND SERVICES” on
    your dashboard then search and tick the “YouTube Data API v3**”**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And we are now ready to call the API to get our data.
  prefs: []
  type: TYPE_NORMAL
- en: 'A more detailed version of these explanations are available on Google documentation
    if necessary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://developers.google.com/youtube/v3/getting-started?source=post_page-----ad42c0291723--------------------------------)
    [## YouTube Data API Overview | Google for Developers'
  prefs: []
  type: TYPE_NORMAL
- en: Edit description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: developers.google.com](https://developers.google.com/youtube/v3/getting-started?source=post_page-----ad42c0291723--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have everything we need, let’s get coding!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Get a channel basic information (creation date, description, number of videos,
    number of subscribers, …)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get all video details of this channel (title, description, duration, views,
    likes, …)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do this for the 5 channels we want to investigate
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build some (interesting) analyses around this data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to kick start our project, we first need to install the google api
    client library (`pip install google-api-python-client`) and import the 2 libraries
    we will use throughout (pandas and the google api client library). We also store
    our API key and build this *youtube* object which will allow us to make the API
    calls, as described in the code below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: And now we are good to go, for real.
  prefs: []
  type: TYPE_NORMAL
- en: '**#1 Get MKBHD channel basic information**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Google documentation is well organized and easy to navigate, with each
    endpoint having its own section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://developers.google.com/youtube/v3/docs?source=post_page-----ad42c0291723--------------------------------)
    [## API Reference | YouTube Data API | Google for Developers'
  prefs: []
  type: TYPE_NORMAL
- en: The YouTube Data API lets you incorporate functions normally executed on the
    YouTube website into your own website or…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: developers.google.com](https://developers.google.com/youtube/v3/docs?source=post_page-----ad42c0291723--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: In this section we are using the **channels endpoint**.
  prefs: []
  type: TYPE_NORMAL
- en: All we need really is the channel id of the YouTube channel we consider. Here
    I’m focusing on the *MKBHD* channel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The channel id used to be very visible in the channel page url, but it’s no
    longer the case. However, looking for “channel_id” in the source code of the page
    works as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/758fd9119e21e3e753313152fc5a684f.png)'
  prefs: []
  type: TYPE_IMG
- en: How to find the channel id — screenshot by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have the channel_id, we can call the API to get the channel overview
    data as a JSON. The idea is to get, from that JSON, only what’s relevant to us
    and store this in a DataFrame as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And this is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/18ad70eee8484b38851426a4cec95ea0.png)'
  prefs: []
  type: TYPE_IMG
- en: MKBHD channel overview — image by author
  prefs: []
  type: TYPE_NORMAL
- en: We now have the overview of *MKBHD* channel (title, description, creation date,
    view count, sub count and video count) nicely stored in a DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: The “uploads” variable is key to access the list of videos of the channel later
    on.
  prefs: []
  type: TYPE_NORMAL
- en: '#2 Get all video details of MKBHD channel'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we are using the **playlistItems** and **videos** endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: The **playlistItems** endpointwill allow us to get all the **video IDs from
    the “uploads” variable** described above.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **videos** endpointwill allow us to get all the **video details from the
    video IDs**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code below does the first part. I stored the “uploads” variable in what
    I called the “playlistId” which just makes more sense to me.
  prefs: []
  type: TYPE_NORMAL
- en: Every request to the playlistItems endpoint gives a maximum of 50 video IDs.
    If the channel has more than 50 videos, we need to make multiple requests.
  prefs: []
  type: TYPE_NORMAL
- en: Each response will contain a “nextPageToken” if there are more video IDs to
    get. So the idea here is to make a first request to the API, add the video IDs
    in a list and check if there is a “nextPageToken”. If so, then we start a while
    loop which does the same request again until there is no more “nextPageToken”,
    meaning we got to the end and there are no more video IDs to get.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we got all the video IDs from *MKBHD* in a list, we can use the **videos
    endpoint** to get more details about these videos. We’ll store all this in a DataFrame
    thanks to the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The idea is similar as what we explained in the latter section. The API won’t
    respond with more than 50 videos per page, so we split our video IDs list into
    blocks of 50 and build a for loop.
  prefs: []
  type: TYPE_NORMAL
- en: And there we have it. All the video details, stored in a nicely formatted DataFrame!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/298023e651d6e4cf9c6a05aace2895f7.png)'
  prefs: []
  type: TYPE_IMG
- en: MKBHD video details DataFrame— image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'You might notice that the “duration” column uses an unusual format. Let’s translate
    it to seconds, and do a bit cleaning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: And we’re done.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of this section, we now have 2 DataFrames for a specific channel:'
  prefs: []
  type: TYPE_NORMAL
- en: '**df_channel_overview** — containing the overview info of the channel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**df_videos** — listing all the videos of the channel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**#3 The 5 Youtube channels**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The only thing left to do is to loop over the different channel IDs of the channels
    we want to consider in our analysis to get the df_channel_overview DataFrame and
    the df_videos DataFrame populated with all their data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The 5 tech channels we’re considering in this project are:'
  prefs: []
  type: TYPE_NORMAL
- en: '*MKBHD*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Unbox Therapy*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Linus Tech Tips*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Dave 2D*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Austin Evans*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'And finally, this is what our 2 data sets look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '**1- df_channel_overview**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d9a92e1f0e6c8e2af0b24a288bda4391.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Overview of the 5 biggest Tech channels on YouTube — source: YouTube API —
    image by author'
  prefs: []
  type: TYPE_NORMAL
- en: '**2- df_videos**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0c08e9d5a2d9ea49bebba853758a051a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'DataFrame of all videos of the considered Tech channels — source: YouTube API
    — image by author'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s build some nice looking graphs based on all this!
  prefs: []
  type: TYPE_NORMAL
- en: '#4 Channels analysis and comparison'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are already some interesting insights to unravel from the overview data
    of the 5 channels.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2142739713f044e4ebfb2feebceff1dc.png)'
  prefs: []
  type: TYPE_IMG
- en: View Count vs. Video Count of the Top Tech Channels — image by author
  prefs: []
  type: TYPE_NORMAL
- en: The graph above shows that *Linus Tech Tips* has by far the highest number of
    videos and views, however it’s *MKBHD* who averages more views per video, closely
    followed by *Unbox Therapy*.
  prefs: []
  type: TYPE_NORMAL
- en: The “videos” DataFrame allows us to go deeper and the number of videos released
    every year tells an interesting story. We can exclude 2023 from the conclusion
    as the year is not finished, hence the dip in the graph below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4ca12481c197007187ef1eb1e4f66a5b.png)'
  prefs: []
  type: TYPE_IMG
- en: It looks like *MKBHD*, *Austin Evans* and *Dave 2D* found their cruising pace
    for many years, averaging about 100 videos per year.
  prefs: []
  type: TYPE_NORMAL
- en: '*Unbox Therapy* on the other hand ramped up its video production in 2016 to
    200+ videos a year, before slowly getting back to 100 in 2022\. Maybe it’s too
    much work? Well, not for *Linus Tech Tips* which releases between 400 and 500
    videos per year!'
  prefs: []
  type: TYPE_NORMAL
- en: Making a lot of videos is great, but how do they perform in terms of views?
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/97a6890896ecc5cf3ee3b7117ad9d9c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Average number of views per video as a function of the release year — image
    by author
  prefs: []
  type: TYPE_NORMAL
- en: The average number of views per video as a function of the video release year
    gives an indication about the trend each channel is following. But there’s a catch.
    If I watch, in 2023, a video released in 2020, this view will be shown on the
    graph above in the year 2020\. So this does not really show the views of the channels
    over time, but rather the views per videos in their release year.
  prefs: []
  type: TYPE_NORMAL
- en: It’s good enough to notice though, that the videos *MKBHD* makes since 2017
    average between 4M and 5M views, whereas *Linus Tech Tips* averages between 2M
    and 2.5M views per video released in the same period.
  prefs: []
  type: TYPE_NORMAL
- en: '*Unbox Therapy* peaked in 2018 but is trending downward ever since.'
  prefs: []
  type: TYPE_NORMAL
- en: What about video duration? Is there a correlation between how long a video is
    and how many times it is viewed?
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4ff38cc0bfae39baa280a32256300d8c.png)'
  prefs: []
  type: TYPE_IMG
- en: View Count vs. Duration for Top Tech Channels — image by author
  prefs: []
  type: TYPE_NORMAL
- en: It’s hard to tell by just plotting the scatter plots but there is no clear cut.
    It does not seem to be a correlation at all. However, according to the following
    graph, not all video creators adopted the same strategy in terms of video duration.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/830c06c38ed1e5c7f9026f7a9b039f4e.png)'
  prefs: []
  type: TYPE_IMG
- en: Average duration of videos per released year of the Top Tech Channels — image
    by author
  prefs: []
  type: TYPE_NORMAL
- en: '*MKBHD* and *Unbox Therapy* are now producing shorter videos, as opposed to
    *Linus Tech Tips* who is not only creating more videos, but also longer ones.'
  prefs: []
  type: TYPE_NORMAL
- en: This could be due to some channels now releasing “shorts” which would lower
    the average duration of videos for a given year.
  prefs: []
  type: TYPE_NORMAL
- en: '#5 Conclusion'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This article only touches on some aspects of the analyses that could be done
    with these very rich datasets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other analysis ideas might include:'
  prefs: []
  type: TYPE_NORMAL
- en: Investigating the correlation between likes and views (or comments and views).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Isolating “shorts” which appeared on YouTube in 2021 and see how they perform
    compared to regular videos.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figuring out what the optimum strategy is in terms of balancing “shorts” and
    regular videos.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This goes to show that understanding APIs and how they can be leveraged to pull
    data from platforms can contribute to the development of some great data science
    projects!
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks for reading all the way to the end of the article.'
  prefs: []
  type: TYPE_NORMAL
- en: Follow for more!
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to leave a message below, or reach out to me through* [*LinkedIn*](https://www.linkedin.com/in/guillaume-weingertner-a4a27972/)
    */* [*X*](https://twitter.com/GuillaumeWein) *if you have any questions / remarks!*
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://guillaume-weingertner.medium.com/membership?source=post_page-----ad42c0291723--------------------------------)
    [## Join Medium with my referral link - Guillaume Weingertner'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: guillaume-weingertner.medium.com](https://guillaume-weingertner.medium.com/membership?source=post_page-----ad42c0291723--------------------------------)
  prefs: []
  type: TYPE_NORMAL
