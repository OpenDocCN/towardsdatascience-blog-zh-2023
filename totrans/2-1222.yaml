- en: How to Perform KMeans Clustering Using Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-perform-kmeans-clustering-using-python-7cc296cec092](https://towardsdatascience.com/how-to-perform-kmeans-clustering-using-python-7cc296cec092)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A complete overview of the KMeans clustering and implementation with Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://zoumanakeita.medium.com/?source=post_page-----7cc296cec092--------------------------------)[![Zoumana
    Keita](../Images/34a15c1d03687816dbdbc065f5719f80.png)](https://zoumanakeita.medium.com/?source=post_page-----7cc296cec092--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7cc296cec092--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7cc296cec092--------------------------------)
    [Zoumana Keita](https://zoumanakeita.medium.com/?source=post_page-----7cc296cec092--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7cc296cec092--------------------------------)
    ·7 min read·Jan 17, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Imagine that you are a Data Scientist working for a retail company and your
    boss requests for the customers’ segmentation into the following groups: low,
    average, medium, or platinum customers based on spending behavior for targeted
    marketing purposes and product recommendations.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Knowing that there is no such historical label associated with those customers,
    how is it possible to categorize them?*'
  prefs: []
  type: TYPE_NORMAL
- en: This is where clustering can help. It is an unsupervised machine-learning technique
    used to group unlabeled data into similar categories or clusters.
  prefs: []
  type: TYPE_NORMAL
- en: This conceptual article will focus more on the K-means clustering approach,
    one of the many techniques in unsupervised machine learning. It will start by
    providing an overview of what K-means clustering is, before walking you through
    a step-by-step implementation in Python using the popular `Scikit-learn` library.
  prefs: []
  type: TYPE_NORMAL
- en: What is K-Means Clustering?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The idea behind K-means clustering is to divide a dataset into a specified number
    of clusters (k), where all the points within the same cluster are similar to one
    another, and those in different clusters are different.
  prefs: []
  type: TYPE_NORMAL
- en: It starts by randomly assigning each data point to a cluster, and then it iteratively
    improves the clusters by moving the data points to the cluster center that is
    closest to them. This logic continues until the cluster assignments stop changing,
    or a maximum number of iterations is reached.
  prefs: []
  type: TYPE_NORMAL
- en: What are the key steps of K-means clustering?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Below are the five main steps of the k-means algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2610f3f6f8203ae41401ad9e3af82484.png)'
  prefs: []
  type: TYPE_IMG
- en: Five main steps in K-Means Clustering (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Below we can see an illustration of K-means where the convergence is reached
    at the 14th iteration.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/25ecacf287650a53419b0b12d8514e19.png)'
  prefs: []
  type: TYPE_IMG
- en: Convergence of *k*-means clustering algorithm ([Image from Wikipedia](https://en.wikipedia.org/wiki/K-means_clustering))
  prefs: []
  type: TYPE_NORMAL
- en: K-means clustering in Action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have an understanding of how k-means works, let’s see how to implement
    it in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, you need to install the following libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Pandas` for loading the data frame.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Matplotlib` for data visualizations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Scikit-learn` to use the `Kmean` algorithm.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The installation can be performed as follows using `pip`, the Python package
    manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Import libraries and load the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have an understanding of the K-means clustering algorithm, let’s
    dive deep. We will be using the [Mall Customer Data](https://www.kaggle.com/datasets/shwetabh123/mall-customers)
    freely available on Kaggle.
  prefs: []
  type: TYPE_NORMAL
- en: 'It contains for each customer this basic information: `ID`, `Gender`, `Age`,
    `Income`, and `Annual Spending score`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous `.head()` statement should generate the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a00dbf8657271fa7dd5eedb591b3daaf.png)'
  prefs: []
  type: TYPE_IMG
- en: First 5 rows of the Customer data (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Explore the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s have a quick statistical and visual understanding of the data before any
    further implementation of the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/32ae14bab6a9f4cfd40f6734b0d9b2a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Scatter Plot of Customers’ Age and their Spending Score (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2fd0f59d38c739d8217cc03202549c94.png)'
  prefs: []
  type: TYPE_IMG
- en: Scatter Plot of Customers’ Age and their Annual Income (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1926663f6c7994ee5f0573bf86982e92.png)'
  prefs: []
  type: TYPE_IMG
- en: Scatter Plot of Customers’ Spending Score and their Annual Income (Image By
    Author)
  prefs: []
  type: TYPE_NORMAL
- en: All these plots have different results, thus leading to different interpretations.
    For instance, the first plot seems to propose two different groups of customers,
    whereas the second one is not obvious and from the last one it looks like there
    are five different groups. This is where Kmeans will be helpful in efficiently
    generating the correct groups/clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we notice from the following result that there are no missing values in
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fb47ca1e71039f263e87d237d118fbc0.png)'
  prefs: []
  type: TYPE_IMG
- en: No null values in the data (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Get the relevant columns for clustering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Not all the columns are relevant for the clustering. In this example, we will
    use the numerical ones: `Age`, `Annual Income`, and `Spending Score`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Data Transformation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kmeans is sensitive to the measurement units and scales of the data. It is better
    to standardize the data first to tackle this issue. Also, this is a common practice
    prior to implementing any machine learning model.
  prefs: []
  type: TYPE_NORMAL
- en: Basically, the standardization substracts the mean of any feature from the actual
    values of that feature and divides the feature’s standard deviation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process is straightforward and is done as follows in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `StandardScaler` class from the `sklearn.preprocessing` module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply the `fit()` method to compute the mean and standard deviation of the features.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then finally use the `transform()` to scale the data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Determine the best number of cluster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A clustering model will not be relevant if we fail to identify the correct number
    of clusters to consider. Multiple techniques exist in the literature. We are going
    to consider the Elbow method, which is a heuristic method, and one of the widely
    used to find the optimal number of clusters.
  prefs: []
  type: TYPE_NORMAL
- en: The first helper function creates for each value of `K` the corresponding `KMeans`
    model and saves its inertia along with the actual `K` value.
  prefs: []
  type: TYPE_NORMAL
- en: The second function uses those inertias and `K` values to generate the final
    Elbow plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can apply the functions to the dataset using a maximum `K` value of
    `12` and get the final result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Below is the final result.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ff7dca91c819e23166e404210d4ffc6f.png)'
  prefs: []
  type: TYPE_IMG
- en: Graphic for finding the optimal number of clusters (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: From the plot, we notice that the cluster inertia decreases as we increase the
    number of clusters. Also the drop the inertia is minimal after `K=5` hence `5`
    can be considered as the optimal number of clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Create the final KMeans model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once we have determined the optimal number of clusters, we can finally apply
    the KMeans model to that value as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We can access the cluster to which each data point belongs by using the `.labels_`
    attribute. Let’s create a new column corresponding to those values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/cbb0bca74c9adba6f05e52f62c2c1a08.png)'
  prefs: []
  type: TYPE_IMG
- en: Final dataset after clustering (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'By looking at the first 5 customers, we can observe that the first two and
    last two have been assigned to the first cluster (cluster #1), whereas the third
    customer belongs to the third cluster (cluster #3)'
  prefs: []
  type: TYPE_NORMAL
- en: Visualize the clusters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have generated the clusters, the final step is to visualize them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/cdd8dad72510c59e60c065afe9baf18b.png)'
  prefs: []
  type: TYPE_IMG
- en: Clusters visualization (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: The KMeans clustering seems to generate a pretty good result, and the five clusters
    are well separated from each other, even though there is a slight overlap between
    the purple and the yellow clusters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general observation is that :'
  prefs: []
  type: TYPE_NORMAL
- en: Customers on the top left have a low spending score and a high annual income.
    A good marketing strategy could be implemented to target those customers so that
    they can spend more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the other hand, customers on the bottom left have a low annual income and
    also spends less, which makes sense, because they are trying to adjust their spending
    habit to their budget.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The top right customers are similar to the bottom left, the difference is that
    they have enough budget to spend.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the yellow group of customers spends beyond their budget.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congrats, you have learned how to perform KMeans clustering using Python. I
    hope you’ve gained the required skills to efficiently analyze your unlabeled datasets.
  prefs: []
  type: TYPE_NORMAL
- en: If you like reading my stories and wish to support my writing, consider [becoming
    a Medium member](https://zoumanakeita.medium.com/membership). With a $ 5-a-month
    commitment, you unlock unlimited access to stories on Medium.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to follow me on [my social networks](https://linktr.ee/zoumana). It
    is always a pleasure to discuss AI, ML, Data Science, NLP, and MLOps stuff!
  prefs: []
  type: TYPE_NORMAL
- en: The source code of the blog is [available on GitHub](https://github.com/keitazoumana/Medium-Articles-Notebooks/blob/main/KMean_Clustering.ipynb).
  prefs: []
  type: TYPE_NORMAL
