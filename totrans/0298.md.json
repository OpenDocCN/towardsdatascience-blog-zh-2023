["```py\npip install polars\n```", "```py\npip install pyarrow\n```", "```py\npip install jupyter_contrib_nbextensions\njupyter contrib nbextension install --user\njupyter nbextension enable execute_time/ExecuteTime\n```", "```py\n# Importing Pandas and Polars\nimport pandas as pd\nimport polars as pl\n```", "```py\n# Setting the filepath where I have saved the Titanic dataset locally\nTITANIC_FILEPATH = '../data/titanic/train.csv'\n\n# Loading the Titanic dataset with Pandas\ndf_pandas = pd.read_csv(TITANIC_FILEPATH)\n\n# Loading the Titanic dataset with Polars\ndf_polars = pl.read_csv(TITANIC_FILEPATH)\n```", "```py\n# Viewing the first few rows of the Pandas DataFrame\ndf_pandas.head()\n\n# Viewing the first few rows of the Polars DataFrame\ndf_polars.head()\n```", "```py\n# Viewing the general contents of the Pandas DataFrame\ndf_pandas.info()\n\n# Viewing stats about the Pandas DataFrame\ndf_pandas.describe()\n```", "```py\n# Viewing information about the Polars DataFrame\ndf_polars.describe()\n```", "```py\n# Viewing the values associated to the \"Embarked\" column in the Pandas DataFrame\ndf_pandas['Embarked'].value_counts()\n\n# Viewing the values associated to the \"Embarked\" column in the Polars DataFrame\ndf_polars['Embarked'].value_counts()\n```", "```py\n# Getting a slice of the Pandas DataFrame using index values\ndf_pandas[15:30]\n\n# Getting a slice of the Polars DataFrame using index values\ndf_polars[15:30]\n```", "```py\n# Extracting teenagers from the Pandas DataFrame\ndf_pandas[df_pandas['Age'].between(13, 19)]\n\n# Extracting teenagers from the Polars DataFrame\ndf_polars.filter(df_polars['Age'].is_between(13, 19))\n```", "```py\n# Filling \"Embarked\" nulls in the Pandas DataFrame\ndf_pandas['Embarked'].fillna('S', inplace = True)\n```", "```py\n# Filling \"Embarked\" nulls in the Polars DataFrame\ndf_polars = df_polars.with_columns(df_polars['Embarked'].fill_null('S'))\n```", "```py\n# Grouping data by ticket class and gender to view counts in the Pandas DataFrame\ndf_pandas.groupby(by = ['Pclass', 'Sex']).count()\n\n# Grouping data by ticket class and gender to view counts in the Polars dataframe\ndf_polars.groupby(by = ['Pclass', 'Sex']).count()\n```", "```py\n# Reloading each DataFrame from scratch\ndf_pandas = pd.read_csv(TITANIC_FILEPATH)\ndf_polars = pl.read_csv(TITANIC_FILEPATH)\n```", "```py\n# Dropping unnecessary features from the Pandas DataFrame\ndf_pandas.drop(columns = ['PassengerId', 'Name', 'Ticket', 'Cabin'], inplace = True)\n\n# Dropping unnecessary features from the Polars DataFrame\ndf_polars = df_polars.drop(columns = ['PassengerId', 'Name', 'Ticket', 'Cabin'])\n```", "```py\n# Importing the one-hot encoding object from Category Encoders\nfrom category_encoders.one_hot import OneHotEncoder\n```", "```py\n# Instantiating One Hot Encoder objects for the Pandas DataFrame\nsex_ohe_encoder_pandas = OneHotEncoder(use_cat_names = True, handle_unknown = 'ignore')\n\n# Performing a one hot encoding on the \"Sex\" column for the Pandas DataFrame\nsex_dummies_pandas = sex_ohe_encoder_pandas.fit_transform(X_pandas['Sex'])\n\n# Concatenating the gender dummies back to the original Pandas DataFrame\nX_pandas = pd.concat([X_pandas, sex_dummies_pandas], axis = 1)\n\n# Dropping the original \"Sex\" column in the Pandas DataFrame\nX_pandas.drop(columns = ['Sex'], inplace = True)\n```", "```py\n# Performing a one hot encoding on the \"Sex\" column for the Polars DataFrame\nsex_dummies_polars = sex_ohe_encoder_polars.fit_transform(X_polars['Sex'])\n```", "```py\n# Instantiating One Hot Encoder objects for the Polars DataFrame\nsex_ohe_encoder_polars = OneHotEncoder(use_cat_names = True, handle_unknown = 'ignore')\n\n# Performing a one hot encoding on the \"Sex\" column for the Polars DataFrame\nsex_dummies_polars = sex_ohe_encoder_polars.fit_transform(X_polars['Sex'].to_pandas())\n\n# Converting the Polars dummies from a Pandas DataFrame to a Polars DataFrame\nsex_dummies_polars = pl.from_pandas(sex_dummies_polars)\n\n# Concatenating the gender dummies back to the original Polars DataFrame\nX_polars = pl.concat([X_polars, sex_dummies_polars], how = 'horizontal')\n\n# Dropping the original \"Sex\" column in the Polars DataFrame\nX_polars = X_polars.drop(columns = ['Sex'])\n```", "```py\n# Establishing our bins values and names\nbin_labels = ['child', 'teen', 'young_adult', 'adult', 'elder']\nbin_values = [-1, 12, 19, 30, 60, 100]\n\n# Applying \"Age\" binning for the Pandas DataFrame\nage_bins_pandas = pd.DataFrame(pd.cut(X_pandas['Age'], bins = bin_values, labels = bin_labels))\n```", "```py\n# Applying \"Age\" binning for the Polars DataFrame\nage_bins_polars = pl.cut(X_polars['Age'], bins = bin_values)\nage_bins_polars.head()\n```", "```py\n# Importing Scikit-Learn's train_test_split function\nfrom sklearn.model_selection import train_test_split\n\n# Performing a train-validation split on the Pandas data\nX_train_pandas, X_val_pandas, y_train_pandas, y_val_pandas = train_test_split(X_pandas, y_pandas, test_size = 0.2, random_state = 42)\n\n# Performing a train-validation split on the Polars data\nX_train_polars, X_val_polars, y_train_polars, y_val_polars = train_test_split(X_polars, y_polars, test_size = 0.2, random_state = 42)\n```", "```py\n# Instantiating a Random Forest Classifier object for the Pandas DataFrame\nrfc_model_pandas = RandomForestClassifier(n_estimators = 50,\n                                          max_depth = 20,\n                                          min_samples_split = 10,\n                                          min_samples_leaf = 2)\n\n# Fitting the Pandas DataFrame to the Random Forest Classifier algorithm\nrfc_model_pandas.fit(X_train_pandas, y_train_pandas.values.ravel())\n```", "```py\n# Instantiating a Random Forest Classifier object for the Polars DataFrame\nrfc_model_polars = RandomForestClassifier(n_estimators = 50,\n                                          max_depth = 20,\n                                          min_samples_split = 10,\n                                          min_samples_leaf = 2)\n\n# Fitting the Polars DataFrame to the Random Forest Classifier algorithm\nrfc_model_polars.fit(X_train_polars, y_train_polars.values.ravel())\n```"]