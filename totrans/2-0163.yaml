- en: 'A bird''s eye view of linear algebra: the basics'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/a-birds-eye-view-of-linear-algebra-the-basics-29ad2122d98f](https://towardsdatascience.com/a-birds-eye-view-of-linear-algebra-the-basics-29ad2122d98f)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We think basis-free, we write basis-free, but when the chips are down we close
    the office door and compute with matrices like fury.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@rohitpandey576?source=post_page-----29ad2122d98f--------------------------------)[![Rohit
    Pandey](../Images/af817d8f68f2984058f0afb8fd7ecbe9.png)](https://medium.com/@rohitpandey576?source=post_page-----29ad2122d98f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----29ad2122d98f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----29ad2122d98f--------------------------------)
    [Rohit Pandey](https://medium.com/@rohitpandey576?source=post_page-----29ad2122d98f--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----29ad2122d98f--------------------------------)
    ¬∑12 min read¬∑Aug 27, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ad8a15d16434947475c6474d26411a89.png)'
  prefs: []
  type: TYPE_IMG
- en: A birds eye view of a field. Image created with midjourney
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the first chapter of the in-progress book on linear algebra, ‚ÄúA birds
    eye view of linear algebra‚Äù. The table of contents so far:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter-1: (Current) [The basics](https://medium.com/towards-data-science/a-birds-eye-view-of-linear-algebra-the-basics-29ad2122d98f)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter-2**: [The measure of a map ‚Äî determinants](https://medium.com/p/1e5fd752a3be)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Chapter-3:** [Why is matrix multiplication the way it is?](https://medium.com/towards-data-science/a-birds-eye-view-of-linear-algebra-why-is-matrix-multiplication-like-that-a4d94067651e)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter-4: [Systems of equations, linear regression and neural networks](https://medium.com/p/fe5b88a57f66)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter-5: [Rank nullity and why row rank == col rank](/a-birds-eye-view-of-linear-algebra-rank-nullity-and-why-row-rank-equals-column-rank-bc084e0e1075)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Linear algebra is a fundamental discipline underlying anything one can do with
    Math. From Physics to machine learning, probability theory (ex: Markov chains),
    you name it. No matter what you‚Äôre doing, linear algebra is always lurking under
    the covers, ready to spring at you as soon as things go multi-dimensional. In
    my experience (and I‚Äôve heard this from others), this was at the source of a big
    shock between high school and university. In high school (India), I was exposed
    to some very basic linear algebra (mainly determinants and matrix multiplication).
    Then in university level engineering education, every subject all of a sudden
    seems to be assuming proficiency in concepts like Eigen values, Jacobians, etc.
    like you were supposed to be born with the knowledge.'
  prefs: []
  type: TYPE_NORMAL
- en: This blog is meant to provide a high level overview of the concepts and their
    obvious applications that exist and are important to know in this discipline.
    So that you at least know what you don‚Äôt know (if anything). Its also an excuse
    to collect resources and links so people can dig deeper into the rabbit hole.
  prefs: []
  type: TYPE_NORMAL
- en: I) Vector spaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the previous section, linear algebra inevitably crops up when
    things go multi-dimensional. We start off with a scalar, which is just a number
    of some sort. For this article, we‚Äôll be considering real and complex numbers
    for these scalars. In general, a scalar can be any object where the basic operations
    of addition, subtraction, multiplication and division are defined (abstracted
    as a ‚Äúfield‚Äù). Now, we want a framework to describe collections of such numbers
    (add dimensions). These collections are called ‚Äúvector spaces‚Äù. We‚Äôll be considering
    the cases where the elements of the vector space are either real or complex numbers
    (the former being a special case of the latter). The resulting vector spaces are
    called ‚Äúreal vector spaces‚Äù and ‚Äúcomplex vector spaces‚Äù respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The ideas in linear algebra are applicable to these ‚Äúvector spaces‚Äù. The most
    common example is your floor, table or the computer screen you‚Äôre reading this
    on. These are all two-dimensional vector spaces since every point on your table
    can be specified by two numbers (the x and y coordinates as shown below). This
    space is denoted by *R¬≤* since two real numbers specify it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can generalize R¬≤in different ways. First, we can add dimensions. The space
    we live in is 3 dimensional (*R¬≥*). Or, we can curve it. The surface of a sphere
    like the Earth for example (denoted *S¬≤*), is still two dimensional, but unlike
    *R¬≤* (which is flat), it is curved. So far, these spaces have all basically been
    arrays of numbers. But the idea of a vector space is more general. It is a **collection
    of objects** where the following ideas should be well defined:'
  prefs: []
  type: TYPE_NORMAL
- en: Addition of any two of the objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Multiplication of the objects by a scalar (a real number).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Not only that, but the objects should be ‚Äúclosed‚Äù under these operations. This
    means that if you apply these two operations to the objects of the vector space,
    you should get objects of the same type (you shouldn‚Äôt leave the vector space).
    For example, the set of integers isn‚Äôt a vector space because multiplication by
    a scalar (real number) can give us something that isn‚Äôt an integer (3*2.5 = 7.5
    which isn‚Äôt an integer).
  prefs: []
  type: TYPE_NORMAL
- en: One of the ways to express the objects of a vector space is with vectors. Vectors
    require an arbitrary ‚Äúbasis‚Äù. An example of a basis is the compass system with
    directions ‚Äî North, South, East and West. Any direction (like ‚ÄúSouthWest‚Äù) can
    be expressed in terms of these. These are ‚Äúdirection vectors‚Äù but we can also
    have ‚Äúposition vectors‚Äù where we need an origin and a coordinate system intersecting
    at that origin. The latitude and longitude system for referencing every place
    on the surface of the Earth is an example. The latitude and longitude pair are
    one way to identify your house. But there are infinite other ways. Another culture
    might draw the latitude and longitude lines at a slightly different angle to what
    the standard is. And so, they‚Äôll come up with different numbers for your house.
    But that doesn‚Äôt change the physical location of the house itself. The house exists
    as an object in the vector space and these different ways to express that location
    are called ‚Äúbases‚Äù. Choosing one basis allows you to assign a pair of numbers
    to the house and choosing another one allows you to assign a different set of
    numbers that are equally valid.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e9aa624270d2cfce78532122c9b71c99.png)'
  prefs: []
  type: TYPE_IMG
- en: A vector space where every position is organized and neatly mapped to a collection
    of numbers. Image created with MidJourney.
  prefs: []
  type: TYPE_NORMAL
- en: Vector spaces can also be infinite dimensional. For instance, in miniature 12
    of [2], the entire set of real numbers is thought of as an infinite dimensional
    vector space.
  prefs: []
  type: TYPE_NORMAL
- en: II) Linear maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know what a vector space is, let‚Äôs take it to the next level and
    talk about two vector spaces. Since vector spaces are simply collections of objects,
    we can think of a mapping that takes an object from one of the spaces and maps
    it to an object from the other. An example of this is recent AI programs like
    Midjourney where you enter a text prompt and they return an image matching it.
    The text you enter is first converted to a vector. Then, that vector is converted
    to another vector in the image space via such a ‚Äúmapping‚Äù.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let *V* and *W* be vector spaces (either both real or complex vector spaces).
    A function *f: V ->W* is said to be a ‚Äòlinear map‚Äô if for any two vectors *u,
    v ùûÆ V* and any scalar *c* (a real number of complex number depending on weather
    we‚Äôre working with real or complex vector spaces)the following two conditions
    are satisfied:'
  prefs: []
  type: TYPE_NORMAL
- en: '*f(u+v) = f(u) + f(v) __(1)*'
  prefs: []
  type: TYPE_NORMAL
- en: '*f(c.v) = c.f(v) __(2)*'
  prefs: []
  type: TYPE_NORMAL
- en: Combining the above two properties, we can get the following result about a
    linear combination of *n* vectors.
  prefs: []
  type: TYPE_NORMAL
- en: '*f(c1.u1+ c2.u2+ ‚Ä¶ cn.un) = c1.f(u1)+c2.f(u2)+‚Ä¶+cn.f(un)*'
  prefs: []
  type: TYPE_NORMAL
- en: And now we can see where the name ‚Äúlinear map‚Äù comes from. If we pass to the
    linear map, *f*, a [linear combination](https://en.wikipedia.org/wiki/Linear_combination)
    of *n* vectors (LHS of equation above), this is equivalent to applying the same
    linear map to the functions (*f*) of the individual vectors. We can apply the
    linear map first and then the linear combination or the linear combination first
    and then the linear map. The two are equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: In high school, we learn about linear equations. In two dimensional space, such
    an equation is represented by *f(x)=m.x+c.* Here, *m* and *c* are the parameters
    of the equation. Note that this function isn‚Äôt a linear map. Although it satisfies
    equation (1) above, it fails to satisfy equation (2). If we set *f(x)=m.x* instead,
    then this is a linear map since it satisfies both equations.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b51b2bc1effa4bec64249b6c3f3c07ad.png)'
  prefs: []
  type: TYPE_IMG
- en: A linear map takes objects from one vector space and maps them to objects in
    another vector space. Kind of like a portal between worlds. Of course, there can
    be many such ‚Äúmaps‚Äù or ‚Äúportals‚Äù. A linear map has to satisfy other properties.
    If you pass a linear combination of vectors from the first space to it, it shouldn‚Äôt
    matter weather you apply the linear map first or the linear combination first.
    Image created with Midjourney
  prefs: []
  type: TYPE_NORMAL
- en: III) Matrices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In section I, we introduced the concept of basis for a vector space. Given a
    basis for the first vector space (*V*) and the dimensionality of the second one
    (*U*), every linear map can be expressed as a matrix (for details, see [here](https://math.libretexts.org/Bookshelves/Linear_Algebra/Book%3A_Linear_Algebra_(Schilling_Nachtergaele_and_Lankham)/06%3A_Linear_Maps/6.06%3A_The_matrix_of_a_linear_map)).
    A matrix is just a collection of vectors. These vectors can be arranged in columns,
    giving us a 2-d grid of numbers as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/23c1bf97c9459539a03669bc2cd8a7f4.png)'
  prefs: []
  type: TYPE_IMG
- en: A matrix as a collection of vectors arranged in columns. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: Matrices are the objects people first think of in the context of linear algebra.
    And for good reason. Most of the time spent practicing linear algebra is dealing
    with matrices. But it is important to remember that there (in general) are an
    infinite number of matrices that can represent a linear map, depending on the
    basis we choose for the first space, *V*. The linear map is hence a more general
    concept than the matrix one happens to be using to represent it.
  prefs: []
  type: TYPE_NORMAL
- en: How do matrices help us perform the linear map they represent (from one vector
    to the other)? Through the matrix getting multiplied with the first vector. The
    result is the second vector and the mapping is complete (from first to second).
  prefs: []
  type: TYPE_NORMAL
- en: In detail, we take the dot product (sum product) of the first vector, *v_1*
    with the first row of the matrix and this yields the first entry of the resulting
    vector, *v_2* and then the dot product of *v_1* with the second row of the matrix
    to get the second entry of *v_2* and so on. This process is demonstrated below
    for a matrix with 2 rows and 3 columns. The first vector, *v_1* is three dimensional
    and the second vector, *v_2* is two dimensional.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/45ef92ebb9ce072dff1eecabcbb44eae.png)'
  prefs: []
  type: TYPE_IMG
- en: How matrix multiplication with a vector works. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the underlying linear map behind a matrix with this dimensionality
    (*2*x*3*)will always take a three dimensional vector, *v_1* and map it to a two
    dimensional space, *v_2.*
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/16222cba6ad1af24c7729fcfa9fc1ab2.png)'
  prefs: []
  type: TYPE_IMG
- en: A linear transformation that takes vectors in three dimensional space and maps
    them to two dimensional space. Image created with MidJourney.
  prefs: []
  type: TYPE_NORMAL
- en: In general an (*n*x*m*) matrix will map an *m* dimensional vector to an *n*
    dimensional one.
  prefs: []
  type: TYPE_NORMAL
- en: III-A) Properties of matrices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let‚Äôs cover some properties of matrices that‚Äôll allow us to identify properties
    of the linear maps they represent.
  prefs: []
  type: TYPE_NORMAL
- en: Rank
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An important property of matrices and their corresponding linear maps is the
    rank. We can talk about this in terms of a collection of vectors, since that‚Äôs
    all a matrix is. Say we have a vector, *v1=[1,0,0]*. The first element of the
    vector is the coordinate along the x-axis, the second one is that along the y-axis
    and the third one the z-axis. These three axes are a basis (there are many) of
    the 3-dimensional space, *R¬≥,* meaning that any vector in this space can be expressed
    as a linear combination of those three vectors.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/436e428a8d095452450a4b9151c77742.png)'
  prefs: []
  type: TYPE_IMG
- en: A single vector in 3-dimensional space. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'We can multiply this vector by a scalar, *s*. This gives us *s.[1,0,0] = [s,0,0]*.
    As we vary the value of *s*, we can get any point along the x-axis. But that‚Äôs
    about it. Say we add another vector to our collection, *v2=[3.5,0,0]*. Now, what
    are the vectors we can make with linear combinations of those two vectors? We
    get to multiply the first one with any scalar, *s_1* and the second one with any
    scalar, *s_2*. This gives us:'
  prefs: []
  type: TYPE_NORMAL
- en: '*s_1.[1,0,0] + s_2[3.5,0,0] = [s_1+3.5 s_2, 0,0] = [s‚Äô,0,0]*'
  prefs: []
  type: TYPE_NORMAL
- en: Here, *s‚Äô* is just another scalar. So, we can still reach points only on the
    x-axis, even with linear combinations of both these vectors. The second vector
    didn‚Äôt ‚Äúexpand our reach‚Äù at all. The number of points we can reach with linear
    combinations of the two is exactly the same as the number we can reach with the
    first. So even though we have two vectors, the rank of this collection of vectors
    is *1* since the space they span is one dimensional. If on the other hand, the
    second vector were v2=*[0,1,0]* then you could get any point on the x-y plane
    with these two vectors. So, the space spanned would be two dimensional and the
    rank of this collection would be *2\.* If the second vector were *v2=[2.1,1.5,0.8]*,
    we could still span a two dimensional space with *v1* and *v2* (though that space
    would be different from the x-y plane now, it would be some other 2-d plane).
    And the two vectors would still have a rank of *2*. If the rank of a collection
    of vectors is the same as the number of vectors (meaning they can together span
    a space of dimensionality as high as the number of vectors), then they are called
    ‚Äúlinearly independent‚Äù.
  prefs: []
  type: TYPE_NORMAL
- en: If the vectors that make up the matrix can span an *m* dimensional space, then
    the rank of the matrix is *m*. But a matrix can be thought of as a collection
    of vectors in two ways. Since it's a simple two dimensional grid of numbers, we
    can either consider all the columns as the group of vectors or consider all the
    rows as the group as shown below. Here, we have a (*3*x*4*) matrix (three rows
    and 4 columns). It can be thought of either as a collection of 4 column vectors
    (each 3-dimensional) or 3 row vectors (each 4 dimensional).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/018e0f1b83fac6e2005ce360f1854c68.png)'
  prefs: []
  type: TYPE_IMG
- en: A matrix can be thought as a collection of row vectors or a collection of column
    vectors. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: Full row rank means all row the row vectors are linearly independent. Full column
    rank means all column vectors are linearly independent.
  prefs: []
  type: TYPE_NORMAL
- en: When the matrix is a square matrix, it turns out that the row rank and column
    rank will always be the same. This isn‚Äôt obvious at all and a proof is given in
    the mathexchange post, [[3](https://math.stackexchange.com/questions/332908/looking-for-an-intuitive-explanation-why-the-row-rank-is-equal-to-the-column-ran)].
    This means that for a square matrix, we can talk just in terms of the rank and
    don‚Äôt have to bother specifying ‚Äúrow rank‚Äù or ‚Äúcolumn rank‚Äù.
  prefs: []
  type: TYPE_NORMAL
- en: The linear transformation corresponding to a (*3* x *3*) matrix that has a rank
    of 2 will map everything in the 3-d space to a lower, 2-d space much like the
    (*3* x *2*) matrix we encountered in the last section.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a708174ba2dc6b258d9c0225da65da52.png)'
  prefs: []
  type: TYPE_IMG
- en: A light source forming shadows of points in 3-d space onto a 2-d floor or wall
    is one linear transformation that maps 3-d vectors to 2-d vectors. Image created
    with MidJourney.
  prefs: []
  type: TYPE_NORMAL
- en: Notions closely related to the rank of square matrices are the determinant and
    invertibility.
  prefs: []
  type: TYPE_NORMAL
- en: '**Determinants**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The determinant of a square matrix is its ‚Äúmeasure‚Äù in a sense. Let me explain
    by going back to thinking of a matrix as a collection of vectors. Let‚Äôs start
    with just one vector. The way to ‚Äúmeasure‚Äù it is obvious ‚Äî its length. And since
    we‚Äôre dealing only with square matrices, the only way to have one vector is to
    have it be one dimensional. Which is basically just a scalar. Things get interesting
    when we go from one dimension to two. Now, we‚Äôre in two dimensional space. So,
    the notion of ‚Äúmeasure‚Äù is no longer length, but has graduated to areas. And with
    two vectors in that two dimensional space, it is the area of the parallelogram
    they form. If the two vectors are parallel to each other (ex: both lie on x-axis).
    In other words, they are not linearly independent, then the area of the parallelogram
    between them will become zero. The determinant of the matrix formed by them will
    be zero and so will the rank of that matrix be zero.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/44587491903ede2868baa1ba07867824.png)'
  prefs: []
  type: TYPE_IMG
- en: Two vectors forming a parallelogram between them. The area of the parallelogram
    is the determinant of the matrix formed by those two vectors. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: Taking it one dimension higher, we get 3 dimensional space. And to construct
    a square matrix (*3*x*3*), we now need three vectors. And since the notion of
    ‚Äúmeasure‚Äù in three dimensional space is volume, the determinant of a (*3*x*3*)
    matrix becomes the volume contained between the vectors that make it up.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/02470622fe8b5ca433b3b611635c2db8.png)'
  prefs: []
  type: TYPE_IMG
- en: In three dimensional space, three vectors are needed to create a 3x3 matrix.
    The determinant of the matrix is the volume contained between those vectors. Image
    by MidJourney.
  prefs: []
  type: TYPE_NORMAL
- en: And this can be extended to space of any dimensionality.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we spoke about the area or the volume contained between the vectors.
    We didn‚Äôt specify if these were the vectors composing the rows of the square matrix
    or the ones composing its columns. And the somewhat surprising thing is that we
    don‚Äôt need to specify this because it doesn‚Äôt matter either way. Weather we take
    the vectors forming the rows and measure the volume between them or the vectors
    forming the columns, we get the same answer. This is proven in the mathexchange
    post [[4](https://math.stackexchange.com/a/636198/155881)].
  prefs: []
  type: TYPE_NORMAL
- en: There are a host of other properties of linear maps and corresponding matrices
    which are invaluable in understanding them and extracting value out of them. We‚Äôll
    be delving into invertability, eigen values, diagonalizability and different transformations
    one can do in the coming articles (check back here for links).
  prefs: []
  type: TYPE_NORMAL
- en: If you liked this story, buy me a coffee :) [https://www.buymeacoffee.com/w045tn0iqw](https://www.buymeacoffee.com/w045tn0iqw)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] Linear map: [https://en.wikipedia.org/wiki/Linear_map](https://en.wikipedia.org/wiki/Linear_map)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] Matousek‚Äôs miniatures: [https://kam.mff.cuni.cz/~matousek/stml-53-matousek-1.pdf](https://kam.mff.cuni.cz/~matousek/stml-53-matousek-1.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] Mathexchange post proving row rank and column rank are the same: [https://math.stackexchange.com/questions/332908/looking-for-an-intuitive-explanation-why-the-row-rank-is-equal-to-the-column-ran](https://math.stackexchange.com/questions/332908/looking-for-an-intuitive-explanation-why-the-row-rank-is-equal-to-the-column-ran)'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] Mathexchange post proving the determinants of a matrix and its transpose
    are the same: [https://math.stackexchange.com/a/636198/155881](https://math.stackexchange.com/a/636198/155881)'
  prefs: []
  type: TYPE_NORMAL
