["```py\nasync function main(){\n    // this creates the pool connection to the postgis server\n    const pool = new Pool({\n        user: process.env.POSTGRES_USER,\n        host: process.env.POSTGRES_HOST,\n        database: process.env.POSTGRES_DB,\n        password: process.env.POSTGRES_PASSWORD,\n        port: Number(process.env.POSTGRES_PORT),\n      });\n\n    // this fetches the data\n    const data = await ExtractData()\n    // this transforms and load the data based on the Pool connection\n    await transformAndLoad(data.features,pool)\n\n}\n```", "```py\n// located in /src/lib/functions.ts\n\nexport async function ExtractData() {\n    // link used in demo is https://skgrange.github.io/www/data/london_low_emission_zones.json\n    const res = await fetch('https://<linktodata>/')\n    const data = <GeoData> await res.json()\n    // add validation function to handle error here.\n    return data\n}\n```", "```py\n// This function transforms and loads the data into postgis\nexport async function transformAndLoad(geojsonFeatures: Feature[], pool: pg.Pool) {\n    const client = await pool.connect();\n\n    try {\n      await client.query('BEGIN'); // Start a new transaction\n\n      for (const geojsonPolygon of geojsonFeatures) {\n        const geometryType = geojsonPolygon.geometry.type;\n        const coordinates = geojsonPolygon.geometry.coordinates;\n\n        const insertQuery = `\n          INSERT INTO public.data (geometry, name, type,id)\n          VALUES (ST_setsrid(ST_GeomFromGeoJSON($1),4326), $2, $3,$4)\n        `;\n\n        const values = [\n          JSON.stringify({ type: geometryType, coordinates }),\n          geojsonPolygon.properties.name,    \n          geojsonPolygon.properties.type,    \n          getISOstring()\n        ];\n\n        await client.query(insertQuery, values); // Insert the GeoJSON data\n      }\n\n      await client.query('COMMIT'); // Commit the transaction if successful\n        // await client.query('ROLLBACK');\n        console.log('Bulk insert of POLYGON features successful');\n    } catch (error) {\n      await client.query('ROLLBACK'); // Roll back the transaction on error\n      console.error('Bulk insert failed:', error);\n    } finally {\n      client.release(); // Release the database connection\\\n      pool.end()\n    }\n  }\n```", "```py\nawait client.query('BEGIN');\ntry {\n// ... start inserting data...\n    await client.query('COMMIT');\n} catch {\n    // this code runs when we can't insert the data somehow. handle the error.\n    // cancels the data transactions as a whole, avoiding duplicates.\n    await client.query('ROLLBACK');\n}\n```", "```py\n// transformation\nconst geometryType = geojsonPolygon.geometry.type;\nconst coordinates = geojsonPolygon.geometry.coordinates;\n```", "```py\n// Correct way\nconst insertQuery = `\n          INSERT INTO public.data (geometry, name, type,id)\n          VALUES (ST_setsrid(ST_GeomFromGeoJSON($1),4326), $2, $3,$4)\n        `;\n```", "```py\n// DON'T DO THIS\nlet value: string;\nconst insertQuery = `\n          INSERT INTO public.data (name)\n          VALUES (\"${value}\")\n        `;\n```", "```py\n-- inserting spatial data\nINSERT INTO public.data (geometry, name, type,id)\nVALUES (ST_setsrid(ST_GeomFromGeoJSON($1),4326), $2, $3,$4)\n```", "```py\nST_GeomFromGeoJSON('{\"type\":\"Point\",\"coordinates\":[-48.23456,20.12345]}')\n```", "```py\nclient.release(); \npool.end();\n```", "```py\nSELECT name, type, id, geometry FROM data\n```"]