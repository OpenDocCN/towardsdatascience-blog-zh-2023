- en: How to Iterate Over a Pandas Dataframe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://towardsdatascience.com/how-to-iterate-over-a-pandas-dataframe-5dc15ab147f9](https://towardsdatascience.com/how-to-iterate-over-a-pandas-dataframe-5dc15ab147f9)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/653feebb30296df7a7f51350e1ba4052.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Sid Balachandran](https://unsplash.com/@itookthose?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Row-major vs Column-major, Pandas best practices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@marcellopoliti?source=post_page-----5dc15ab147f9--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----5dc15ab147f9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5dc15ab147f9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5dc15ab147f9--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----5dc15ab147f9--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Â·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5dc15ab147f9--------------------------------)
    Â·4 min readÂ·May 18, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: If you have some experience in data science you surely have faced developed
    algorithms from tabular data, common challenges of this kind are for example the
    [Titanic â€” Machine Learning From Disaster](https://www.kaggle.com/c/titanic) or
    the Boston Housing.
  prefs: []
  type: TYPE_NORMAL
- en: Data represented in tabular form (such as CSV files) can be distinguished into
    **row-major format** and **column-major format**. In computing, row-major order
    and column-major order are methods for storing [multidimensional arrays](https://en.wikipedia.org/wiki/Multidimensional_array)
    in linear storage such as [random access memory](https://en.wikipedia.org/wiki/Random_access_memory).
    Depending on the paradigm with which the format was designed, there are best practices
    to follow to optimize file read and write times. Very often data scientists unfortunately
    use libraries such as pandas in the wrong way going to waste valuable time
  prefs: []
  type: TYPE_NORMAL
- en: Row major format means that in a table, consecutive rows are saved consecutively
    in memory. So if I am reading row i , then accessing row i+1 will be a very fast
    operation.
  prefs: []
  type: TYPE_NORMAL
- en: Formats that follow the Column major format paradigm, such as Parquet, consecutively
    save columns in memory.
  prefs: []
  type: TYPE_NORMAL
- en: In Machine Learning we often have the case where the rows are the data samples
    and the columns are the features. So we will use a CSV file if we need to access
    samples quickly while Parquet if we often need to access features (e.g. to calculate
    statistics etc.).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aa30c1e085b31bfd5d51722d4720f911.png)'
  prefs: []
  type: TYPE_IMG
- en: 'src: [https://en.wikipedia.org/wiki/Row-_and_column-major_order#/media/File:Row_and_column_major_order.svg](https://en.wikipedia.org/wiki/Row-_and_column-major_order#/media/File:Row_and_column_major_order.svg)'
  prefs: []
  type: TYPE_NORMAL
- en: Pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pandas is a library widely used in data science, especially when dealing with
    tabular data. Pandas is built on the concept of DataFrame, precisely a tabular
    representation of data. The DataFrame though follows the column major format paradigm.
  prefs: []
  type: TYPE_NORMAL
- en: So iterating a DataFrame, row by row, as is often done, is very slow. Letâ€™s
    look at an example Letâ€™s import the BostonHousing DataFrame and iterate it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this first experiment, we iterate through the columns of the DataFrame (df.columns)
    and then access all the elements in each column, and calculate the time it takes
    to finish the process.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Instead, in this second experiment we iterate for rows in the DataFrame with
    the df.iloc function, which returns the contents of the entire row.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see the result of the second experiment is much greater than the
    first. In this case, our dataset was very small, but if you try with your own
    larger working dataset you will notice how this difference will become more and
    more pronounced.
  prefs: []
  type: TYPE_NORMAL
- en: '**Numpy**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fortunately, the numpy library comes to our rescue. When we use numpy we can
    specify the major order we want to use, by default the row-major order is used.
  prefs: []
  type: TYPE_NORMAL
- en: So what we can do is convert a pandas DataFrame to numpy and iterate the latter
    line by line. Letâ€™s look at some experiments.
  prefs: []
  type: TYPE_NORMAL
- en: We first convert the DataFrame to a numpy format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now letâ€™s iterate the data by column, and calculate the time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now same thing iterating by rows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We see that by using numpy the speed of both experiments is increased! Moreover,
    the difference between the two is minimal.
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this paper, we introduced the difference between row-major and column-major
    paradigms when dealing with tabular data. We pointed out a common mistake that
    is made by many data scientists using Pandas. The time difference in accessing
    the data, in this case, is minimal because we used a small dataset. But you have
    to be careful because the bigger the dataset you use the bigger this difference
    will become in turn, and you might lose a lot of time just reading the data. As
    a solution always try to use numpy whenever possible.
  prefs: []
  type: TYPE_NORMAL
- en: Follow me for more articles of this type![ðŸ˜‰](https://emojipedia.org/it/apple/ios-15.4/faccina-che-fa-l-occhiolino/)
  prefs: []
  type: TYPE_NORMAL
- en: The End
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Marcello Politi*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Linkedin](https://www.linkedin.com/in/marcello-politi/), [Twitter](https://twitter.com/_March08_),
    [Website](https://marcello-politi.super.site/)'
  prefs: []
  type: TYPE_NORMAL
