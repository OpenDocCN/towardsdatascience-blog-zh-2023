- en: 'Exploratory Data Analysis: What Do We Know About YouTube Channels (Part 1)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/exploratory-data-analysis-what-do-we-know-about-youtube-channels-3688c5cbc438](https://towardsdatascience.com/exploratory-data-analysis-what-do-we-know-about-youtube-channels-3688c5cbc438)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Getting statistical insights using Pandas and the YouTube Data API
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://dmitryelj.medium.com/?source=post_page-----3688c5cbc438--------------------------------)[![Dmitrii
    Eliuseev](../Images/7c48f0c016930ead59ddb785eaf3e0e6.png)](https://dmitryelj.medium.com/?source=post_page-----3688c5cbc438--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3688c5cbc438--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3688c5cbc438--------------------------------)
    [Dmitrii Eliuseev](https://dmitryelj.medium.com/?source=post_page-----3688c5cbc438--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3688c5cbc438--------------------------------)
    ·20 min read·Oct 28, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c687fb3e4373288c8b36bfc7df3c92ff.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: Photo by Glenn Carstens-Peters, [Unsplash](https://unsplash.com/photos/turned-on-flat-screen-television-EOQhsfFBhRk)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, there are more than 2.7 billion active YouTube users, and for many
    people, YouTube is not only entertainment but an important source of income. But
    how does it work? How many views or subscribers can different YouTube channels
    get? With the help of Python, Pandas, and the YouTube Data API, we can get some
    interesting insights.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Methodology
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This article will be divided into several parts:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Using the YouTube Data API. With this API, we will be able to get a list of
    YouTube channels for different search requests. For each channel, we will get
    information about the number of videos, views, and subscribers.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the list of channels we are interested in. This can be done only once.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collecting the channel data. To get statistical insights, we need to collect
    the data for some period of time.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data analysis.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without further ado, let’s get into it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 1\. YouTube Data API
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, a piece of good news for everyone who is interested in collecting data
    from large networks like YouTube: the YouTube API is free, and we don’t need to
    pay for it. To start using this API, we need two steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Open [https://console.cloud.google.com](https://console.cloud.google.com/) and
    create a new project. I already had an old project there, but after some period
    of inactivity, all its API limits were set to zeros, and I did not find a way
    to reset them. So, it’s just easier to make a new one.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/b173f36a2e5811de9b0692c9d4cafd68.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: Google Cloud Console, Image by author
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to “APIs and Services” and enable “YouTube Data API”. Open the API, go to
    “Credentials,” and create an API key. If everything is done correctly, the Quotas
    page will look like this:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/ef34c53ab0a0f1402e4f96845865be04.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: YouTube API Quotas, Image by author
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: That’s it; after that, we can start making API requests to get YouTube data.
    As for limits, a free quota is 10,000 queries per day. Calculating this quota
    is a bit tricky because it’s based on “internal” YouTube queries and not just
    on the number of API calls. Search requests are “heavy”, and for example, getting
    a list of 500 channels for the phrase “smartphone review” will cost us about 7,000
    “units”. So, we can do only one search like this per day with one API key. But
    a free tier allows us to have **12 projects**, with a separate quota for each
    project. So the task is easy, but we still need to keep the number of requests
    reasonably limited.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'The data collection pipeline will consist of two types of API calls:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: First, we will create a list of YouTube channels for different topics. This
    needs to be done only once.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, we can get the number of views and subscribers for each channel. I will
    be using Apache Airflow to run this task for at least a week, twice per day.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2\. Getting YouTube Channels**'
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the first step, we enabled the YouTube API. Now, let’s create a list of
    channels we are interested in. To do the search, I will be using the `search_by_keywords`
    method of the [python-youtube](https://github.com/sns-sdks/python-youtube) library.
    As an example, the output for the query “cats” looks like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we are interested in a `title`, `channelId`, and `publishedAt` parameters.
    We can also see the `totalResults` value, which is equal to 19544\. Alas, the
    YouTube API was made for end-users and not for analytics. We cannot get *all*
    YouTube channels for a search query “cats”; this API returns only a list of 400–500
    channels, somehow made by the YouTube recommender system.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use a simple program that makes the YouTube query for a specific phrase
    and saves the result into a CSV file:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As an output, we will get a CSV like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, we can do a search with different queries. This can be done only once;
    channel IDs are not changing. For the purpose of this article, I used these queries:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: “Cats”
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Dogs”
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Makeup tutorial”
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Photography”
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Smartphone review”
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Street photography”
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a result, I saved a list of channels (about 500 records for each query) in
    a CSV file, and I had about 3000 YouTube channels in total.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. Getting Channel Details**'
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As a next step, we need to get statistics for each channel. To do this, I will
    use the method `get_channel_info` from the same [python-youtube](https://github.com/sns-sdks/python-youtube)
    library:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A method can be used this way:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As an output, we will have a CSV file with the needed values:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Collecting The Data** Now, we know how to get a list of YouTube channels
    and how to get channel details, like the number of views and subscribers. But
    it is interesting to see the *dynamics* and how these values are changing over
    time. YouTube has a separate [Analytics API](https://developers.google.com/youtube/analytics/channel_reports),
    which can be used for reports. However, as written in the API documentation, “the
    user authorizing the request must be the owner of the channel”, so for our task,
    it is useless. The only way for us is to collect data for some time; 1–2 weeks
    looks like a good period of time.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 'Collecting the data can be done in different ways, and I decided to use **Apache
    Airflow** for that, which I installed on my Raspberry Pi. It turned out that the
    Raspberry Pi is an excellent data science tool for collecting data, which I have
    already used in several hobby projects. This $50 single-board computer has only
    2W power consumption, is silent, has no fans, and runs a full-fledged Ubuntu on
    a 4-core CPU. The Raspbian OS configuration details are out of the scope of this
    article; those who are interested are welcome to read my previous TDS post:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[](/collecting-data-with-apache-airflow-on-a-raspberry-pi-0ac3f72e377f?source=post_page-----3688c5cbc438--------------------------------)
    [## Collecting Data with Apache Airflow on a Raspberry Pi'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: A Raspberry Pi is All You Need
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/collecting-data-with-apache-airflow-on-a-raspberry-pi-0ac3f72e377f?source=post_page-----3688c5cbc438--------------------------------)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Exploratory Data Analysis
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Preprocessing**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we are approaching the fun part of this article: let’s see what kind
    of insights we can get from the collected data. I will use Pandas for data processing,
    Matplotlib, and Seaborn for drawing the graphs.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s load the data we collected before. Files can be copied from the
    Raspberry Pi using the `scp` command (here, *10.14.24.168* is the device address,
    and “pi” is a standard Raspbian user name:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Apache Airflow was executing the code twice per day, saving a separate CSV
    file with timestamps after each run. After a week, I got a bunch of CSV files
    with about 80K total records. Let’s load all files and combine them together into
    the Pandas dataframe:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The result looks like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/572024de9b398f9380e8e5d9a42b1856.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: Dataframe with time series data, Image by author
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'As a reminder, at the beginning of the article, I also collected a **list of
    channels** for different search requests (“Smartphones,” “Cats,” “Dogs,” etc.).
    Let’s load this list into a second dataframe:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Loading the channel list could be automated, but I have only 6 categories, so
    it was straightforward to simply hardcode them all. I also added a “subject” column
    to keep the category name (it is important to mention that the “subject” is not
    the “official” channel category given by its owner, but the name I used during
    the search request).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'At this moment, we have two Pandas data frames: one contains the basic channel
    data (id, title, and creation date), and the second has time-series data with
    the number of views, videos, and subscribers. Let’s **merge** these data frames
    together, using the `channelId` as a key:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们有两个 Pandas 数据框：一个包含基本频道数据（ID、标题和创建日期），另一个包含时间序列数据，包括观看次数、视频数量和订阅者数。让我们将这两个数据框
    **合并** 在一起，以 `channelId` 作为键：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, we are ready to have fun! Let’s visualize different types of data and draw
    them with Seaborn and Matplotlib.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备开始有趣的部分了！让我们用 Seaborn 和 Matplotlib 可视化不同类型的数据。
- en: '**4.1 Number of Views and Subscribers** As a warm-up, let''s sort YouTube channels
    by the number of views:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**4.1 观看次数和订阅者数量** 作为热身，让我们按观看次数排序 YouTube 频道：'
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result looks like this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![](../Images/e941a9ef19f0f168ab98408acc5a7253.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e941a9ef19f0f168ab98408acc5a7253.png)'
- en: YouTube channels, sorted by number of views, Image by author
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: YouTube 频道，按观看次数排序，作者提供的图片
- en: We can see a very large difference between values. The top channels on the list
    have literally billions of views and millions of subscribers. The numbers were
    actually so large that I had to add a thousand “,” separators to the column!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到数值之间的差异非常大。列表中的顶级频道拥有数十亿的观看次数和数百万的订阅者。实际的数字大到我不得不在列中添加了上千个“,”分隔符！
- en: 'As an aside note, why did I not use a [Pandas Styler](https://pandas.pydata.org/docs/user_guide/style.html)
    object for that? Indeed, it is easy to write this code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 题外话，我为什么不使用 [Pandas Styler](https://pandas.pydata.org/docs/user_guide/style.html)
    对象呢？确实，这样写代码很简单：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It turned out that it works well on a small dataframe. But at least, in Visual
    Studio Code, after changing the style, the dataframe is not displayed as a head,
    tail, and “…” anymore, and Visual Studio always shows all 3030 rows. If someone
    knows a solution, please write it in the comments below.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在小型数据框上效果很好。但至少在 Visual Studio Code 中，改变样式后，数据框不再显示为头、尾和“…”了，Visual Studio
    总是显示所有3030行。如果有人知道解决方案，请在下面的评论中写出来。
- en: 'It’s nice to see a dataframe, but the result will be much more clear in graphical
    form. Let’s draw the **number of views** using a barplot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 看到数据框很不错，但图形形式会更清晰。让我们使用条形图绘制 **观看次数**：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The drawing is easy, but some small tweaks were required. Again, I used a `FuncFormatter`
    to add “,” thousand dividers; otherwise, numbers are too large and not convenient
    to read. I also added a `decimation=10` parameter to reduce the number of records
    in the dataframe; otherwise, the vertical bars were too small. Still, we can see
    that the area is almost empty:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 绘图很简单，但需要一些小调整。再次，我使用了 `FuncFormatter` 添加“,”千位分隔符；否则，数字太大，不便于阅读。我还添加了 `decimation=10`
    参数来减少数据框中的记录数；否则，垂直条形图太小了。尽管如此，我们可以看到该区域几乎是空的：
- en: '![](../Images/a3f6c3e9788795815e6da07adad0d9a0.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a3f6c3e9788795815e6da07adad0d9a0.png)'
- en: Obviously, it is easy to adjust the vertical scale by using a `ylim` parameter,
    but I specifically left it like this so readers can see the real difference between
    “top” and “other” channels. The distribution is very strongly skewed. Several
    top channels have literally billions of views, and others compared to them are
    just not visible. From my list of about 3,000 channels, 5% of the top channels
    have 95% of total views.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，通过使用 `ylim` 参数很容易调整纵坐标刻度，但我特意将其保留为这样，以便读者能够看到“顶级”频道与“其他”频道之间的真实差异。分布非常偏斜。几个顶级频道的观看次数达到数十亿，而与之相比，其他频道几乎不可见。在我列出的约3000个频道中，前5%的频道拥有95%的总观看次数。
- en: 'We can also draw the **number of subscribers**, and its shape looks the same
    as the previous one:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以绘制 **订阅者数量**，其形状与之前的图表相同：
- en: '![](../Images/ddeb56d2b4856c2ac9e8b38ec901935a.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ddeb56d2b4856c2ac9e8b38ec901935a.png)'
- en: 'Let’s get more quantitatively accurate data using **percentiles**:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 **百分位数** 获取更准确的数据：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output looks like this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 输出看起来是这样的：
- en: '![](../Images/2057ac1778aba71a17e7044ddd03b52d.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2057ac1778aba71a17e7044ddd03b52d.png)'
- en: Quantiles data, Image by author
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 四分位数数据，作者提供的图片
- en: 'A 50th percentile (or 0.5 quantile) is a number, showing us that 50% of all
    values lie below that number. For example, the 50th percentile for all subscriber
    values is only 16\. It means that despite these Googleplex-like figures in the
    top, 50% of the channels in my list have less than 16 subscribers! It can be surprising,
    but we can easily verify this by sorting the dataframe by the number of subscribers
    and looking at the middle:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 50百分位数（或0.5分位数）是一个数字，显示了50%的所有值低于该数字。例如，所有订阅者值的50百分位数仅为16。这意味着尽管顶端的数字如同Googleplex一般，列表中50%的频道订阅者数少于16！这可能令人惊讶，但我们可以通过按订阅者数量对数据框进行排序并查看中间值来轻松验证这一点：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The result confirmed that the table above is correct:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 结果确认了上表的正确性：
- en: '![](../Images/74aa6de843a5361b21e3a9035c5d695e.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/74aa6de843a5361b21e3a9035c5d695e.png)'
- en: A middle part of the dataframe, Image by author
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框的中间部分，作者提供的图片
- en: All these values can give us an idea of the number of views and subscribers
    we can expect. But here, I analyzed only the 3030 channels I collected. Can we
    get a *total number* of YouTube channels with, let’s say, 1M and 100K subscribers?
    I did not find an answer, and it’s probably one of the YouTube secrets, the same
    as the real ratio between male and female users on Tinder;) Apparently, the YouTube
    recommender system has an algorithm for mixing “top” and “other” channels together
    in search results, giving newbies a chance to be seen by viewers.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些数值可以让我们对预期的观看次数和订阅者数量有一个大致的了解。但是在这里，我只分析了我收集的3030个频道。我们能得到一个*YouTube频道总数*，比如说，1百万和10万订阅者的频道总数吗？我没有找到答案，这可能是YouTube的秘密，就像Tinder上男女用户的真实比例一样；）显然，YouTube推荐系统有一个将“顶级”频道和“其他”频道混合在搜索结果中的算法，给新手提供了被观众看到的机会。
- en: '**4.2 Number of Subscribers per Registration Date** It is interesting to know
    that a particular YouTube channel has 1,000,000 views or subscribers, but how
    fast can channel owners reach this value? In the YouTube Data API, every channel
    has a “[publishedAt](https://developers.google.com/youtube/v3/docs/channels)”
    parameter, which represents a channel’s creation date. We cannot get historical
    data for a particular channel, but we can compare channels with different creation
    dates using a **scatter plot**. I will also separate different categories with
    different colors and add average lines.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**4.2 每注册日期的订阅者数量** 了解某个YouTube频道是否有1,000,000次观看或订阅者很有趣，但频道主们多快能达到这个值呢？在YouTube
    Data API中，每个频道都有一个“[publishedAt](https://developers.google.com/youtube/v3/docs/channels)”参数，代表频道的创建日期。我们无法获取特定频道的历史数据，但我们可以通过**散点图**比较不同创建日期的频道。我还将用不同颜色区分不同类别，并添加平均线。'
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The result is much more informative compared to a previous bar chart:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 相比于之前的柱状图，结果提供了更多的信息：
- en: '![](../Images/2a366aa929e53508dd203a80304e9739.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2a366aa929e53508dd203a80304e9739.png)'
- en: Number of subscribers distribution, Image by author
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 订阅者数量分布，作者提供的图片
- en: 1 million subscribers is a sort of “landmark” for many YouTube channels, and
    I set this value as a clipping limit for the graph. We can see that the “youngest”
    YouTube channel in my list reached this point at the beginning of 2022, so it
    took almost two years for the channel owners to do it (this analysis was made
    at the end of 2023). At the same time, there are some “old” channels, made even
    before 2010, that still do not reach 100,000 subscribers today.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 100万订阅者是许多YouTube频道的一个“标志性”数值，我将这个值设置为图表的裁剪限制。我们可以看到，我列表中“最年轻”的YouTube频道在2022年初达到了这一点，所以频道主们花了将近两年时间才做到这一点（此分析在2023年底进行）。与此同时，还有一些“老”频道，甚至在2010年之前创建的，今天仍然没有达到10万订阅者。
- en: 'As for the average values, they are also interesting. As we can see, more people
    are subscribed to the “Smartphone”-related channels, and the second popular category
    is “Makeup”. Let’s “zoom” a graph a bit more:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 关于平均值，它们也很有趣。我们可以看到，订阅“智能手机”相关频道的人更多，第二大热门类别是“化妆”。让我们再“放大”一下图表：
- en: '![](../Images/b1c9ed19ae24ac3bbc3032147cfd942e.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b1c9ed19ae24ac3bbc3032147cfd942e.png)'
- en: Number of subscribers distribution, Image by author
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 订阅者数量分布，作者提供的图片
- en: Here, we can see that the categories “Cats” and “Dogs” are on average much less
    popular (almost 10 times). Categories “Photography” and “Street photography” are
    even more niche, and even getting 100,000 subscribers can be a challenging goal
    for these channels.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到，“猫”和“狗”类别的受欢迎程度平均要低得多（几乎低10倍）。“摄影”和“街头摄影”类别更加小众，即使获得10万订阅者对这些频道来说也可能是一个具有挑战性的目标。
- en: '**4.3 Number of Subscribers per Video** This question can be interesting for
    those who want to start their own YouTube channel. How many videos should be published
    to get a certain number of views or subscribers? We know the number of videos
    and subscribers per channel and can find the answer by using **a** scatter plot.
    I will also use a linear regression model to draw average lines:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**4.3 每个视频的订阅者数量** 这个问题对于那些想要开始自己YouTube频道的人可能很有趣。应该发布多少视频才能获得一定数量的观看或订阅者？我们知道每个频道的视频和订阅者数量，可以通过使用**一个**散点图来找到答案。我还会使用线性回归模型来绘制平均线：'
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here, I limited the values to 100,000 subscribers and 1,000 videos. I also excluded
    the top 10 channels from the linear interpolation to make the average results
    more realistic.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我将值限制为100,000个订阅者和1,000个视频。我还从线性插值中排除了前10个频道，以使平均结果更具现实性。
- en: 'The output looks like this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![](../Images/c4852d4ddf8dae0a4753c93919228a74.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c4852d4ddf8dae0a4753c93919228a74.png)'
- en: Number of subscribers within 0–100K range, Image by author
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 订阅者数量在0–100K范围内，图像由作者提供
- en: Again, we can see that the “Makeup” and “Smartphones” channels are getting the
    highest number of subscribers per video. Average lines for “Cats” and “Dogs” are
    almost horizontal. How can it be? First, as we saw in the previous picture, the
    average number of subscribers for this category is generally lower. Second, I
    can guess that more people are publishing videos with cats and dogs, and the distribution
    is more skewed.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次看到，“化妆”和“智能手机”频道每个视频获得的订阅者最多。“猫”和“狗”的平均线几乎是水平的。这是怎么回事？首先，正如我们在前一张图片中看到的，这一类别的订阅者平均数量通常较低。其次，我猜测更多的人发布关于猫和狗的视频，分布更为倾斜。
- en: 'How about the top of the distribution? Well, there are enough channels, with
    >1M subscribers and less than 1000 videos:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 那么分布的顶部怎么样？好吧，那里有足够的频道，订阅者超过1M，视频少于1000个：
- en: '![](../Images/69c9d9f7ac102a616704fbb242e9a3b8.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/69c9d9f7ac102a616704fbb242e9a3b8.png)'
- en: Number of subscribers within 0–10M range, Image by author
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 订阅者数量在0–10M范围内，图像由作者提供
- en: 'I suppose these are professional studios with high-end cinematic equipment,
    and their budgets are pretty high. And how about the low part of the distribution?
    Let’s see another graph:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这些是配备高端电影设备的专业工作室，预算也相当高。那分布的低部分怎么样？让我们看看另一张图：
- en: '![](../Images/dfb34d12e663b43eb1cf8b415c375405.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dfb34d12e663b43eb1cf8b415c375405.png)'
- en: Number of subscribers within the lowest range, Image by author
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 订阅者数量在最低范围内，图像由作者提供
- en: I was surprised to see YouTube channels with 1,000–5,000 videos and only 10–50
    subscribers. It turned out that many of these channels are probably auto-generated
    by bots; they have only playlists and no videos, mostly no views, and no subscribers
    at all. What is the purpose of these channels? I don’t know. Some other channels
    belong to real people, and it is a bit sad to see when someone has posted >1000
    videos and each one has only 10–20 views per year.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我惊讶于看到一些YouTube频道有1,000–5,000个视频，但只有10–50个订阅者。结果是，这些频道很可能是由机器人自动生成的；它们只有播放列表，没有视频，大多数没有观看量，也没有订阅者。这些频道的目的是什么？我不知道。一些其他频道属于真实的人，看到有人发布了超过1000个视频，每个视频每年只有10–20次观看，这有点令人遗憾。
- en: '**4.4 Channel Dynamics — Views per Day** As we know, using the public YouTube
    API, we can only get the number of views and subscribers at the current moment,
    and only the owner can get the historical data. As a workaround, I collected data
    for a week with a Raspberry Pi and Apache Airflow. Now, it’s time to see what
    we can get.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**4.4 频道动态 — 每日观看量** 正如我们所知，使用公开的YouTube API，我们只能获得当前时刻的观看量和订阅者数量，只有频道所有者才能获得历史数据。作为替代方案，我使用Raspberry
    Pi和Apache Airflow收集了一周的数据。现在，是时候看看我们能得到什么了。'
- en: 'The processing in this case is a bit more tricky. I need to get every channel,
    sort its data by the timestamp, and calculate differential values:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，处理起来有点棘手。我需要获取每个频道的数据，按时间戳排序，并计算差值：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here, I use the `apply` method to calculate the difference between the first
    and other values in the dataframe. Then, I can draw the data with a `lineplot`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我使用`apply`方法计算数据框中第一个值和其他值之间的差异。然后，我可以使用`lineplot`绘制数据：
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: (the full code is longer; for clarity reasons, I keep only the essential parts)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: (完整代码更长，为了清晰起见，我只保留了必要部分)
- en: 'As we already know, the distribution is skewed. The result for the top 50 channels
    looks like this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，分布是倾斜的。前50个频道的结果如下：
- en: '![](../Images/dce935fc10f386882f0bc3bea47a6c33.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dce935fc10f386882f0bc3bea47a6c33.png)'
- en: Top 50 channel views per week, Image by author
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 每周前 50 个频道观看次数，作者图片
- en: As we can see, top channels can have more than several million views per day!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，顶级频道每天的观看次数可以超过几百万！
- en: 'How is it going at the right part of the distribution? In total, I collected
    3,030 channels, and this is the same graph for the 1,000 of them from the right
    side:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 分布右侧情况如何？总的来说，我收集了 3030 个频道，这是右侧 1000 个频道的相同图表：
- en: '![](../Images/f6b978bf153f01134c7d91e6177e4698.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f6b978bf153f01134c7d91e6177e4698.png)'
- en: 1000 YouTube channel views per week, Image by author
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 每周 1000 个 YouTube 频道观看次数，作者图片
- en: The results here are much less encouraging. Some channels got 50–100 new views
    per week, but most of the channels got only 10–20 views at all. The YouTube search
    is limited to about 500 items, but I can guess that most YouTube users never scroll
    to more than the first 1–2 pages.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的结果远不如预期。一些频道每周获得 50-100 次新观看，但大多数频道仅获得 10-20 次观看。YouTube 搜索限制在大约 500 个项目，但我可以猜测大多数
    YouTube 用户从未滚动超过前 1-2 页。
- en: '**4.5 Channel Dynamics — Subscribers per Day** Let’s see how the number of
    subscribers is changing. The code is the same, except that I used a “subscribers”
    column instead of “views”.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**4.5 渠道动态 — 每日订阅者数** 让我们来看看订阅者数量的变化。代码是一样的，只不过我使用了“订阅者”列而不是“观看次数”。'
- en: 'The results are interesting. First, let''s see the top 50 channels from my
    list:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 结果很有趣。首先，让我们看看我列表中的前 50 个频道：
- en: '![](../Images/e3e9f173b4b5fe9d896e789b0f52eb18.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e3e9f173b4b5fe9d896e789b0f52eb18.png)'
- en: New channel subscribers per week, Image by author
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 每周新频道订阅者，作者图片
- en: 'As we can see, top channels can get several thousand new subscribers per day!
    At the right part of the distribution, the results are not so exciting again but
    still interesting:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，顶级频道每天可以获得几千个新订阅者！在分布的右侧，结果再次不那么令人兴奋，但仍然很有趣：
- en: '![](../Images/a29b12586e145c1743142ac14ddfa798.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a29b12586e145c1743142ac14ddfa798.png)'
- en: New channel subscribers per week, Image by author
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 每周新频道订阅者，作者图片
- en: One of the channels “suddenly” got 100 subscribers per day, but this value did
    not increase anymore. Maybe the owner paid for the promotion, or one of the videos
    went viral — who knows? Other channels got only 5–10 new subscribers per week.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个频道“突然”每天获得 100 个订阅者，但这一数值没有再增加。也许频道主支付了推广费用，或者其中一个视频突然走红——谁知道呢？其他频道每周仅获得
    5-10 个新订阅者。
- en: '**4.6 Channel Dynamics — Videos per Day** It is also interesting to know how
    many videos per day are published by different channels. We can easily find an
    answer using the same code. First, let’s see a number of new videos from the top
    50 channels:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**4.6 渠道动态 — 每日视频数** 了解不同频道每天发布多少视频也很有趣。我们可以使用相同的代码轻松找到答案。首先，让我们看看前 50 个频道的新视频数量：'
- en: '![](../Images/2921a2344fcae7a12b4d03c49512e6bf.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2921a2344fcae7a12b4d03c49512e6bf.png)'
- en: New videos per day, Image by author
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 每日新视频，作者图片
- en: 'Here are the 1000 channels from the right part of my list:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我列表右侧的 1000 个频道：
- en: '![](../Images/bdbd1fddbfabd72380bfafe01140c291.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bdbd1fddbfabd72380bfafe01140c291.png)'
- en: New videos per day, Image by author
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 每日新视频，作者图片
- en: Interestingly, the numbers are not drastically different. But the top channels
    are apparently publishing fewer videos, and they definitely prefer quality to
    quantity. They can make only one video per week, and each video may have >1M views.
    However, there are some YouTube channels that have 5000+ videos in total; they
    publish several videos per day. Anyway, none of these channels are at the top,
    which is interesting to think about.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，数字并没有大幅度不同。但顶级频道显然发布的视频较少，他们显然更注重质量而非数量。他们每周只能制作一个视频，每个视频可能拥有超过 100 万的观看次数。然而，有些
    YouTube 频道总共有超过 5000 个视频；他们每天发布几个视频。无论如何，这些频道都没有跻身前列，这很值得思考。
- en: 'A “spaghetty graph” can show us a general trend, but it’s hard to read values
    from it. To get more precise data, we can draw a histogram for the top 50 channels:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: “意大利面图”可以展示我们一个大致趋势，但很难从中读取具体值。为了获得更精确的数据，我们可以为前 50 个频道绘制直方图：
- en: '![](../Images/96ace92e341ed0671f7fb4aa22ec945d.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/96ace92e341ed0671f7fb4aa22ec945d.png)'
- en: New videos per week, Image by author
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 每周新视频，作者图片
- en: As we can see, some channels are publishing more than one video per day, but
    the majority of the top channels are making only one or even fewer videos per
    week. Obviously, there is no universal formula that fits all the genres, and videos
    about cats or about smartphone or camera reviews may require absolutely different
    times of preparation. Readers are welcome to filter channels by different categories
    and do more detailed analysis on their own.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，有些频道每天发布多个视频，但大多数顶级频道每周只制作一个或更少的视频。显然，没有一种适用于所有类型的通用公式，关于猫的视频或智能手机或相机评论的视频可能需要完全不同的准备时间。欢迎读者按不同类别过滤频道，并自行做更详细的分析。
- en: '5\. Bonus: Anomaly Detection'
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 奖励：异常检测
- en: Finally, a small bonus for readers who were patient enough to read until this
    part. Let’s apply the anomaly detection algorithm and see if we can find some
    unusual YouTube channels. I will be using the unsupervised [IsolationForest](https://scikit-learn.org/stable/auto_examples/ensemble/plot_isolation_forest.html)
    algorithm for that. The algorithm itself is based on binary decision trees. At
    every step, the tree is branching using the random feature and a random threshold
    until each point is completely isolated or the maximum depth is reached. After
    that, the “anomaly score” is assigned to each point according to the depth of
    the tree required to achieve that point.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于耐心阅读到这里的读者，赠送一个小奖励。让我们应用异常检测算法，看看是否能找到一些不寻常的YouTube频道。我将使用无监督的[IsolationForest](https://scikit-learn.org/stable/auto_examples/ensemble/plot_isolation_forest.html)算法。该算法本身基于二叉决策树。在每一步，树通过随机特征和随机阈值进行分支，直到每个点完全孤立或达到最大深度。之后，根据达到该点所需的树深度，为每个点分配“异常分数”。
- en: I will use the number of views and subscribers per video as a metric. I also
    set a `contamination` value to 0.05; this is our desired proportion of outliers.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用每个视频的观看次数和订阅者数量作为度量标准。我还将`contamination`值设置为0.05；这是我们期望的异常比例。
- en: '[PRE19]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let’s sort the channels by anomaly score. The result looks like this:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来按异常分数对频道进行排序。结果如下所示：
- en: '![](../Images/c8c0c8ce77a93813f65ed6c33cb262c7.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c8c0c8ce77a93813f65ed6c33cb262c7.png)'
- en: In the first place of our “anomaly rating”, we see a channel from the category
    “Cats”, which indeed has a high number of subscribers per video. I watched this
    channel; I am not a fan of videos about cats, but technically it was indeed good.
    This was also probably the first time I saw a video that has 193M views (I must
    admit that no video about math or machine learning will ever get to this point;).
    The second channel in my “rating” was about makeup. I am absolutely not an expert
    in that area, and I was going to skip it, but one video still got my attention.
    The author was asking ChatGPT to write the makeup procedure. I was never thinking
    about using AI for makeup, though it is interesting to see how AI affects more
    and more areas of our lives.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们“异常评分”的第一位，我们看到一个来自“猫”类别的频道，这个频道确实每个视频的订阅者数量很高。我看了这个频道；虽然我不是猫视频的粉丝，但从技术上讲它确实做得很好。这也是我第一次看到一个有193M观看次数的视频（我必须承认，没有哪个关于数学或机器学习的视频能达到这一点；）。在我的“评分”中的第二个频道是关于化妆的。我对这一领域绝对不是专家，本来打算跳过它，但其中一个视频引起了我的注意。作者请ChatGPT写化妆步骤。我从未考虑过使用AI来化妆，尽管看到AI如何影响我们生活的越来越多领域还是很有趣。
- en: 'Sometimes it is easy to guess why the item has a high anomaly rating, but if
    the number of features is large, it can be complicated. In such cases, we can
    use the [**SHAP**](https://shap.readthedocs.io/en/latest/index.html) library to
    visualize the results:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 有时很容易猜测为什么某个项目具有高异常评分，但如果特征数量很大，这可能会变得复杂。在这种情况下，我们可以使用[**SHAP**](https://shap.readthedocs.io/en/latest/index.html)库来可视化结果：
- en: '[PRE20]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `explainer` method uses [Shapley values](https://en.wikipedia.org/wiki/Shapley_value)
    to explain different machine learning models, and it can work with the `IsolationForest`
    as well. After initialization, we can check different items in our list. Let’s
    examine the first one:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`explainer`方法使用[Shapley值](https://en.wikipedia.org/wiki/Shapley_value)来解释不同的机器学习模型，并且也可以与`IsolationForest`一起使用。初始化后，我们可以检查列表中的不同项目。让我们检查第一个：'
- en: '[PRE21]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The result looks like this:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '![](../Images/1dea2db9846285ae0aa666fba2a523cf.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1dea2db9846285ae0aa666fba2a523cf.png)'
- en: Shapley Explainer results, Image by author
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Shapley解释器结果，作者提供的图片
- en: 'In this another example, the `views_per_video` parameter looks normal, but
    the `subscribers_per_video` value is high:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个例子中，`views_per_video`参数看起来正常，但`subscribers_per_video`值很高：
- en: '![](../Images/491350f38481c3fd3e312b1de3f4b140.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/491350f38481c3fd3e312b1de3f4b140.png)'
- en: Shapley Explainer results, Image by author
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Shapley Explainer 结果，图片由作者提供
- en: In this case, we can see that both metrics are unusually high.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以看到两个指标都异常高。
- en: Conclusion
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, I explained how to get YouTube channel data using the YouTube
    Data API and a [python-youtube](https://github.com/sns-sdks/python-youtube) library.
    This data allows us to make YouTube search requests for different categories and
    get interesting statistical insights about YouTube channels.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我解释了如何使用 YouTube 数据 API 和 [python-youtube](https://github.com/sns-sdks/python-youtube)
    库获取 YouTube 频道数据。这些数据允许我们对不同类别进行 YouTube 搜索请求，并获得有关 YouTube 频道的有趣统计见解。
- en: I suppose every reader of this story has watched at least one YouTube video
    today or yesterday. According to [demandsage.com](https://www.demandsage.com/youtube-stats/),
    YouTube is the second-biggest search engine after Google, with 2.7B active users
    in 2023\. It is a part of our modern society and a part of everyday life. Thus,
    from cultural and research perspectives, it is interesting to know which categories
    are most popular and how many views and subscribers different channels can get.
    In this article, I used “neutral” categories like “Cats” or “Dogs”, but the same
    approach can be used for collecting data about politics, war, medicine, conspiracy
    theories, or any other topics. Last but not least, for many content creators,
    YouTube is an important source of income, and it can be crucial to know what kind
    of views or subscribers different categories can get. So, I encourage you, as
    a reader, to do the same tests on the topics you are interested in. Anyway, statistics
    is a science *about us*.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我想每个读者今天或昨天至少看过一个 YouTube 视频。根据 [demandsage.com](https://www.demandsage.com/youtube-stats/)，YouTube
    是仅次于 Google 的第二大搜索引擎，2023 年有 27 亿活跃用户。它是我们现代社会的一部分，也是日常生活的一部分。因此，从文化和研究的角度来看，了解哪些类别最受欢迎以及不同频道可以获得多少观看次数和订阅者是很有趣的。在本文中，我使用了像“猫”或“狗”这样的“中性”类别，但同样的方法可以用于收集关于政治、战争、医学、阴谋论或其他任何话题的数据。最后但同样重要的是，对许多内容创作者来说，YouTube
    是一个重要的收入来源，了解不同类别能获得多少观看次数或订阅者可能至关重要。因此，我鼓励你作为读者，对你感兴趣的话题进行相同的测试。无论如何，统计学是一门 *关于我们的*
    科学。
- en: 'In the second part of this story, I will focus on individual videos. We will
    see how often different YouTube channels publish the videos, and how many views
    these videos can get:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事的第二部分，我将重点关注单个视频。我们将查看不同 YouTube 频道发布视频的频率，以及这些视频能获得多少观看次数：
- en: '[](/exploratory-data-analysis-what-do-we-know-about-youtube-channels-part-2-754fab840e65?source=post_page-----3688c5cbc438--------------------------------)
    [## Exploratory Data Analysis: What Do We Know About YouTube Channels (Part 2)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/exploratory-data-analysis-what-do-we-know-about-youtube-channels-part-2-754fab840e65?source=post_page-----3688c5cbc438--------------------------------)
    [## 探索性数据分析：我们对 YouTube 频道了解多少（第 2 部分）'
- en: Getting statistical insights using Pandas and the YouTube Data API
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Pandas 和 YouTube 数据 API 获取统计见解
- en: towardsdatascience.com](/exploratory-data-analysis-what-do-we-know-about-youtube-channels-part-2-754fab840e65?source=post_page-----3688c5cbc438--------------------------------)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/exploratory-data-analysis-what-do-we-know-about-youtube-channels-part-2-754fab840e65?source=post_page-----3688c5cbc438--------------------------------)
- en: 'Those who are interested in social data analysis are also welcome to read other
    articles:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 对社会数据分析感兴趣的人也欢迎阅读其他文章：
- en: '[Housing Rental Market in Germany: Exploratory Data Analysis with Python](https://medium.com/towards-data-science/housing-rental-market-in-germany-exploratory-data-analysis-with-python-3975428d07d2)'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[德国住房租赁市场：使用 Python 进行探索性数据分析](https://medium.com/towards-data-science/housing-rental-market-in-germany-exploratory-data-analysis-with-python-3975428d07d2)'
- en: '[What People Write about Climate: Twitter Data Clustering in Python](https://medium.com/towards-data-science/what-people-write-about-climate-twitter-data-clustering-in-python-2fbbd2b95906)'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[人们对气候的看法：使用 Python 进行 Twitter 数据聚类分析](https://medium.com/towards-data-science/what-people-write-about-climate-twitter-data-clustering-in-python-2fbbd2b95906)'
- en: '[Finding Temporal Patterns in Twitter Posts: Exploratory Data Analysis with
    Python](https://medium.com/towards-data-science/finding-temporal-patterns-in-twitter-posts-exploratory-data-analysis-with-python-8aac618c8699)'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Twitter 帖子中寻找时间模式：使用 Python 进行探索性数据分析](https://medium.com/towards-data-science/finding-temporal-patterns-in-twitter-posts-exploratory-data-analysis-with-python-8aac618c8699)'
- en: '[Python Data Analysis: What Do We Know About Pop Songs?](https://blog.devgenius.io/python-data-analysis-what-do-we-know-about-pop-songs-b6197d85d4)'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 数据分析：我们对流行歌曲了解多少？](https://blog.devgenius.io/python-data-analysis-what-do-we-know-about-pop-songs-b6197d85d4)'
- en: If you enjoyed this story, feel free [to subscribe](https://medium.com/@dmitryelj/membership)
    to Medium, and you will get notifications when my new articles will be published,
    as well as full access to thousands of stories from other authors. If you want
    to get the full source code for this and my next posts, feel free to visit my
    [Patreon page](https://www.patreon.com/deliuseev).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这个故事，欢迎[订阅](https://medium.com/@dmitryelj/membership)Medium，你将会在我的新文章发布时收到通知，并且可以全面访问其他作者的成千上万篇故事。如果你想获取这篇文章以及我下一篇文章的完整源代码，欢迎访问我的[Patreon
    页面](https://www.patreon.com/deliuseev)。
- en: Thanks for reading.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。
