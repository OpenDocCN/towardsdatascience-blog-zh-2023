["```py\nimport numpy as np\nfrom azureml.opendatasets import NycTlcYellow\nfrom datetime import datetime\nfrom dateutil import parser\n\nend_date = parser.parse('2018-06-06')\nstart_date = parser.parse('2018-05-06')\n\nnyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\nnyc_tlc_df = nyc_tlc.to_pandas_dataframe()\nnyc_tlc_df\n```", "```py\n>>> nyc_tlc_df\n       vendorID  tpepPickupDateTime tpepDropoffDateTime  passengerCount  tripDistance puLocationId  ... extra  mtaTax  improvementSurcharge  tipAmount  tollsAmount  totalAmount\n0             2 2018-05-27 17:50:34 2018-05-27 17:56:41               3          0.82          161  ...   0.0     0.5                   0.3       0.00          0.0         6.80\n1             2 2018-05-23 08:20:41 2018-05-23 08:37:06               1          1.69          142  ...   0.0     0.5                   0.3       3.08          0.0        15.38\n3             2 2018-05-23 09:02:54 2018-05-23 09:17:59               2          6.64          140  ...   0.0     0.5                   0.3       0.00          0.0        20.30\n5             2 2018-05-23 13:28:48 2018-05-23 13:35:15               1          0.61          170  ...   0.0     0.5                   0.3       1.00          0.0         7.80\n7             2 2018-05-23 07:05:50 2018-05-23 07:07:40               2          0.48           48  ...   0.0     0.5                   0.3       0.00          0.0         4.30\n...         ...                 ...                 ...             ...           ...          ...  ...   ...     ...                   ...        ...          ...          ...\n339945        2 2018-06-04 14:03:37 2018-06-04 14:17:11               1          1.95          262  ...   0.0     0.5                   0.3       2.00          0.0        13.30\n339946        2 2018-06-04 17:15:23 2018-06-04 17:16:38               1          0.55          262  ...   1.0     0.5                   0.3       0.00          0.0         5.30\n339947        2 2018-06-04 16:59:23 2018-06-04 18:24:02               6         16.95           88  ...   1.0     0.5                   0.3       0.00          0.0        62.30\n339948        2 2018-06-04 10:34:44 2018-06-04 10:40:46               1          1.16          229  ...   0.0     0.5                   0.3       0.00          0.0         6.80\n339949        1 2018-06-04 12:35:57 2018-06-04 12:58:32               1          2.80          231  ...   0.0     0.5                   0.3       0.00          0.0        17.30\n\n[9066744 rows x 21 columns]\n```", "```py\n>>> nyc_tlc_df['totalAmount'].describe()\ncount    9.066744e+06\nmean     1.676839e+01\nstd      1.502198e+01\nmin     -4.003000e+02\n25%      8.750000e+00\n50%      1.209000e+01\n75%      1.830000e+01\nmax      8.019600e+03\nName: totalAmount, dtype: float64\n\n>>> nyc_tlc_df['tipAmount'].describe()\ncount    9.066744e+06\nmean     1.912497e+00\nstd      2.658866e+00\nmin     -1.010000e+02\n25%      0.000000e+00\n50%      1.410000e+00\n75%      2.460000e+00\nmax      4.000000e+02\nName: tipAmount, dtype: float64\n\n>>> nyc_tlc_df['tollsAmount'].describe()\ncount    9.066744e+06\nmean     3.693462e-01\nstd      1.883414e+00\nmin     -1.800000e+01\n25%      0.000000e+00\n50%      0.000000e+00\n75%      0.000000e+00\nmax      1.650000e+03\nName: tollsAmount, dtype: float64\n\n>>> nyc_tlc_df['tripDistance'].describe()\ncount    9.066744e+06\nmean     3.022766e+00\nstd      3.905009e+00\nmin      0.000000e+00\n25%      1.000000e+00\n50%      1.650000e+00\n75%      3.100000e+00\nmax      9.108000e+02\nName: tripDistance, dtype: float64\n```", "```py\ny=nyc_tlc_df['totalAmount']\ny[y < 0] = 0\n\ntripDistance=nyc_tlc_df['tripDistance']\ntripDistance[tripDistance < 0] = 0\n\ntipAmount=nyc_tlc_df['tipAmount']\ntipAmount[tipAmount < 0] = 0\n\ntollsAmount=nyc_tlc_df['tollsAmount']\ntollsAmount[tollsAmount < 0] = 0\n```", "```py\n>>> np.min(tollsAmount)\n0.0\n>>> np.min(tipAmount)\n0.0\n>>> np.min(tripDistance)\n0.0\n>>> np.min(y)\n0.0\n```", "```py\nfrom interpret.glassbox import LinearRegression\nfrom interpret import show\nfrom sklearn.model_selection import train_test_split\nseed = 1\n\nX = np.column_stack((tripDistance, tipAmount, tollsAmount))\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=seed)\nX_train\ny_train\n```", "```py\nlr = LinearRegression(random_state=seed)\nlr\nlr.fit(X_train, y_train)\nlr_global = lr.explain_global()\nshow(lr_global)\nlr_local = lr.explain_local(X_test[:5], y_test[:5])\nshow(lr_local)\n```", "```py\n>>> y_test[:5]\n451746     9.95\n161571    15.30\n72007     20.16\n115597    21.36\n37697     22.77\nName: totalAmount, dtype: float64\n```", "```py\nimport dice_ml\nfrom dice_ml.utils import helpers  # helper functions\nd = dice_ml.Data(dataframe=nyc_tlc_df, continuous_features=['tripDistance', 'tipAmount'], outcome_name='totalAmount')\n```", "```py\n>>> # generate counterfactuals\n>>> dice_exp_random.visualize_as_dataframe(show_only_changes=True)\nQuery instance (original outcome : 1)\n   tripDistance  tipAmount  totalAmount\n0           1.8       1.85            1\n\nDiverse Counterfactual set (new outcome: 0.0)\n  tripDistance tipAmount totalAmount\n0          0.4       1.0         0.0\n1          0.3       1.0         0.0\nQuery instance (original outcome : 1)\n   tripDistance  tipAmount  totalAmount\n0           2.3        2.0            1\n\nDiverse Counterfactual set (new outcome: 0.0)\n  tripDistance tipAmount totalAmount\n0          1.0         -         0.0\n1          0.6         -         0.0\n2          0.1         -         0.0\n3          0.4         -         0.0\n```"]