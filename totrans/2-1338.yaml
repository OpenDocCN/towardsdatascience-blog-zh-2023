- en: 'Introducing Python’s Parse: The Ultimate Alternative to Regular Expressions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/introducing-pythons-parse-the-ultimate-alternative-to-regular-expressions-3ae07e51b753](https://towardsdatascience.com/introducing-pythons-parse-the-ultimate-alternative-to-regular-expressions-3ae07e51b753)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PYTHON TOOLBOX](https://medium.com/@qtalen/list/python-toolbox-4289824c6407)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use best practices and real-world examples to demonstrate the powerful text
    parser library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://qtalen.medium.com/?source=post_page-----3ae07e51b753--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----3ae07e51b753--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3ae07e51b753--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3ae07e51b753--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----3ae07e51b753--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3ae07e51b753--------------------------------)
    ·7 min read·Jun 19, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/42ed2c770be414428f5dcde02d4033ad.png)'
  prefs: []
  type: TYPE_IMG
- en: The [parse](https://pypi.org/project/parse/) library is very simple to use.
    Photo by [Amanda Jones](https://unsplash.com/@amandagraphc?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: This article introduces a Python library called `parse` for quickly and conveniently
    parsing and extracting data from text, serving as a great alternative to Python
    regular expressions.
  prefs: []
  type: TYPE_NORMAL
- en: And which covers the best practices with the `parse` library and a real-world
    example of parsing nginx log text.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I have a colleague named Wang. One day, he came to me with a worried expression,
    saying he encountered a complex problem: his boss wanted him to analyze the server
    logs from the past month and provide statistics on visitor traffic.'
  prefs: []
  type: TYPE_NORMAL
- en: I told him it was simple. Just use regular expressions. For example, to analyze
    nginx logs, use the following regular expression, and it’s elementary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: But Wang was still worried, saying that learning regular expressions is too
    tricky. Although there are many ready-made examples online to learn from, he needs
    help with parsing uncommon text formats.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, even if he could solve the problem this time, what if his boss asked
    for changes in the parsing rules when he submitted the analysis? Wouldn’t he need
    to fumble around for a long time again?
  prefs: []
  type: TYPE_NORMAL
- en: Is there a simpler and more convenient method?
  prefs: []
  type: TYPE_NORMAL
- en: 'I thought about it and said, of course, there is. Let’s introduce our protagonist
    today: the Python `parse` library.'
  prefs: []
  type: TYPE_NORMAL
- en: Installation & Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As described on the parse GitHub page, it uses Python’s format() syntax to parse
    text, essentially serving as a reverse operation of Python f-strings.
  prefs: []
  type: TYPE_NORMAL
- en: Before starting to use `parse`, let’s see how to install the library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Direct installation with pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Installation with conda can be more troublesome, as parse is not in the default
    conda channel and needs to be installed through conda-forge:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After installation, you can use `from parse import *` in your code to use the
    library’s methods directly.
  prefs: []
  type: TYPE_NORMAL
- en: Features & Usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `parse` API is similar to Python Regular Expressions, mainly consisting
    of the `parse`, `search`, and `findall` methods. Basic usage can be learned from
    the parse documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Pattern format
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The parse format is very similar to the Python format syntax. You can capture
    matched text using `{}` or `{field_name}`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in the following text, if I want to get the profile URL and username,
    I can write it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you want to extract multiple phone numbers. Still, the phone numbers have
    different formats of country codes in front, and the phone numbers are of a fixed
    length of 11 digits. You can write it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Or if you need to process a piece of text in an HTML tag, but the text is preceded
    and followed by an indefinite length of whitespace, you can write it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the code above, `{:11}` refers to the width, which means to capture at least
    11 characters, equivalent to the regular expression `(.{11,})?`. `{:.11}` refers
    to the precision, which means to capture at most 11 characters, equivalent to
    the regular expression `(.{,11})?`. So when combined, it means `(.{11, 11})?`.
    The result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/db0f2100786e93af6f719bedb179d049.png)'
  prefs: []
  type: TYPE_IMG
- en: Capture fixed-width characters. Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'The most powerful feature of parse is its handling of time text, which can
    be directly parsed into Python datetime objects. For example, if we want to parse
    the time in an HTTP log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Retrieving results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two ways to retrieve the results:'
  prefs: []
  type: TYPE_NORMAL
- en: For capturing methods that use `{}` without a field name, you can directly use
    `result.fixed` to get the result as a tuple.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For capturing methods that use `{field_name}`, you can use `result.named` to
    get the result as a dictionary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Custom Type Conversions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although using `{field_name}` is already quite simple, the source code reveals
    that `{field_name}` is internally converted to `(?P<field_name>.+?)`. So, `parse`
    still uses regular expressions for matching. `.+?` represents one or more random
    characters in non-greedy mode.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/365d30715f56c358f1db01a1ae5c9f0a.png)'
  prefs: []
  type: TYPE_IMG
- en: The transformation process of parse format to regular expressions. Image by
    Author
  prefs: []
  type: TYPE_NORMAL
- en: However, often we hope to match more precisely. For example, the text “my email
    is [xxx@xxx.com](mailto:xxx@xxx.com)”, `“my email is {email}”` can capture the
    email. Sometimes we may get dirty data, for example, “my email is xxxx@xxxx”,
    and we don’t want to grab it.
  prefs: []
  type: TYPE_NORMAL
- en: Is there a way to use regular expressions for more accurate matching?
  prefs: []
  type: TYPE_NORMAL
- en: That’s when the `with_pattern` decorator comes in handy.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, for capturing email addresses, we can write it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Using the `with_pattern` decorator, we can define a custom field type, in this
    case, `Email`which will match the email address in the text. We can also use this
    approach to match other complicated patterns.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Real-world Example: Parsing Nginx Log'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After understanding the basic usage of parse, let’s return to the troubles of
    Wang mentioned at the beginning of the article. Let’s see how to parse logs if
    we have server log files for the past month.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** We chose [NASA’s HTTP log dataset](https://ita.ee.lbl.gov/html/contrib/NASA-HTTP.html)
    for this experiment, which is free to use.'
  prefs: []
  type: TYPE_NORMAL
- en: The text fragment to be parsed looks like this：
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f74f07199ba7bb21b4571288213d9668.png)'
  prefs: []
  type: TYPE_IMG
- en: What is the text fragment look like. Screenshot by Author
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to preprocess the parse expression. This way, when parsing large
    files, we don’t have to compile the regular expression for each line of text,
    thus improving performance.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the `parse_line` method is the core of this example. It uses the preprocessed
    expression to parse the text, returning the corresponding match if there is one
    and an empty dictionary if not.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we use the `read_file` method to process the text line by line using a
    generator, which can minimize memory usage. However, due to the disk’s 4k capability
    limitations, this method may not guarantee performance.
  prefs: []
  type: TYPE_NORMAL
- en: Since we need to perform statistics on the log files, we must use the `from_records`
    method to construct a `DataFrame` from the matched results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, in the `main` method, we put all the methods together and try to count
    the different `status_code` occurrences:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/69edd33345bf2fa58af85b5a7a986695.png)'
  prefs: []
  type: TYPE_IMG
- en: Wang’s troubles have been easily solved. Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: That’s it. Wang’s troubles have been easily solved.
  prefs: []
  type: TYPE_NORMAL
- en: Best Practices with `parse` Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although the `parse` library is so simple that I only have a little to write
    about in the article. There are still some best practices to follow, just like
    regular expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Readability and maintainability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To efficiently capture text and maintain expressions, it is recommended to always
    use `{field_name}` instead of `{}`. This way, you can directly use `result.named`
    to obtain key-value results.
  prefs: []
  type: TYPE_NORMAL
- en: Using `Parser(pattern)` to preprocess the expression is recommended, rather
    than `parse(pattern, text)`.
  prefs: []
  type: TYPE_NORMAL
- en: On the one hand, this can improve performance. On the other hand, when using
    `Custom Type Conversions`, you can keep the `pattern` and `extra_type` together,
    making it easier to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing performance for large datasets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you look at the source code, you can see that `{}` and `{field_name}` use
    the regular expressions `(.+?)` and `(?P<field_name>.+?)` for capture, respectively.
    Both expressions use the [non-greedy mode](https://docs.python.org/3/library/re.html#regular-expression-syntax).
    So when you use `with_pattern` to write your own expressions, also try to use
    non-greedy mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the same time, when writing `with_pattern`, if you use `()` for capture
    grouping, please use `regex_group_count` to specify the specific groups like this:
    `[@with_pattern](http://twitter.com/with_pattern)(r’((\d+))’, regex_group_count=2)`
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if a group is not needed in with_pattern, use `(?:x)` instead. `@with_pattern(r’(?:<input.*?>)(.*?)(?:</input>)’,
    regex_group_count=1)` means you want to capture the content between input tags.
    The input tags will not be captured.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, I changed my usual way of writing lengthy papers. By solving
    a colleague’s problem, I briefly introduced the use of the `parse` library. I
    hope you like this style.
  prefs: []
  type: TYPE_NORMAL
- en: This article does not cover the detailed usage methods on the official website.
    Still, it introduces some best practices and performance optimization solutions
    based on my experience.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, I explained in detail the use of the `parse` library to parse
    nginx logs with a practical example.
  prefs: []
  type: TYPE_NORMAL
- en: As the new series title suggests, besides improving code execution speed and
    performance, using various tools to improve work efficiency is also a performance
    enhancement.
  prefs: []
  type: TYPE_NORMAL
- en: This article helps data scientists simplify text parsing and spend time on more
    critical tasks. If you have any thoughts on this article, feel free to leave a
    comment and discuss.
  prefs: []
  type: TYPE_NORMAL
- en: 'My last article series was about Python Concurrency, and you can read it here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Peng Qian](../Images/fa6bd24b4781f623be8ea40c4e6bdb78.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Peng Qian](https://qtalen.medium.com/?source=post_page-----3ae07e51b753--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Python Concurrency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[View list](https://qtalen.medium.com/list/python-concurrency-2c979347da3b?source=post_page-----3ae07e51b753--------------------------------)10
    stories![Supercharge Your Python Asyncio With Aiomultiprocess: A Comprehensive
    Guide](../Images/9c366de04067cd0ec1b30d9ce223011b.png)![Unleashing the Power of
    Python Asyncio’s Queue](../Images/aa5886c47ef891be14eb17f9a2ed3d0d.png)![](../Images/d5b38ed916e599eb0673eb311f95348d.png)[](https://medium.com/@qtalen/membership?source=post_page-----3ae07e51b753--------------------------------)
    [## Join Medium with my referral link - Peng Qian'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@qtalen/membership?source=post_page-----3ae07e51b753--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'This article was originally published at: [https://www.dataleadsfuture.com/introducing-pythons-parse-the-ultimate-alternative-to-regular-expressions/](https://www.dataleadsfuture.com/introducing-pythons-parse-the-ultimate-alternative-to-regular-expressions/)'
  prefs: []
  type: TYPE_NORMAL
