["```py\n**What you will learn:\n----------------------------------------------------**\n1\\. Maths behind NMF\n2\\. NMF equation\n3\\. Feature matrix, V\n4\\. Transformed data matrix, W\n5\\. Factorization matrix, H\n6\\. Scikit-learn NMF() class\n7\\. Arguments, methods and attributes of NMF() class\n8\\. Load the MNIST with Scikit-learn\n9\\. Perform dimensionality reduction in image data\n\n**Other matrix decomposition methods:\n----------------------------------------------------** 1\\. Eigendecomposition\n2\\. Singular value decomposition\n```", "```py\nfrom sklearn.decomposition import NMF\n\n# W = transformed data matrix, V = original feature matrix\nW = NMF(n_components=d).fit_transform(V)\n```", "```py\nfrom sklearn.decomposition import NMF\n\n# H = factorization matrix\nH = NMF(n_components=d).fit(V).components_\n```", "```py\n# Import\nfrom sklearn.decomposition import NMF\n\n# Create an instance\nnmf_model = NMF(n_components, init, random_state)\n```", "```py\nW = nmf_model.fit_transform(V)\n```", "```py\nnmf_model.fit(V) # Fitted model\nW = nmf_model.transform(V)\n```", "```py\nrecovered_data = nmf_model.inverse_transform(W)\n```", "```py\nH = nmf_model.components_\n```", "```py\nfrom sklearn.datasets import fetch_openml\n\nmnist = fetch_openml('mnist_784', version=1)\nimage_data = mnist['data']\n\nprint(\"Shape:\", image_data.shape)\nprint(\"Type:\", type(image_data))\n```", "```py\nimport matplotlib.pyplot as plt\n\nn = 5\nplt.figure(figsize=(6.75, 1.5))\nfor i in range(n):\n  ax = plt.subplot(1, n, i+1)\n  plt.imshow(image_data.iloc[i].values.reshape(28, 28), cmap=\"binary\")\n  ax.axis('off')\n\nplt.show()\n```", "```py\nfrom sklearn.decomposition import NMF\n\nnmf_model = NMF(n_components=9, init='random', random_state=0)\nimage_data_nmf = nmf_model.fit_transform(image_data)\n\nprint(\"Shape:\", image_data_nmf.shape)\nprint(\"Type:\", type(image_data_nmf))\n```", "```py\nprint(\"V_shape:\", image_data.shape)\nprint(\"W_shape:\", image_data_nmf.shape)\nprint(\"H_shape\", nmf_model.components_.shape)\n```", "```py\nnmf_model.reconstruction_err_\n```", "```py\nimage_data_nmf_recovered = nmf_model.inverse_transform(image_data_nmf)\n\nn = 5\nplt.figure(figsize=(6.75, 1.5))\nfor i in range(n):\n  ax = plt.subplot(1, n, i+1)\n  plt.imshow(image_data_nmf_recovered[i, :].reshape(28, 28), cmap=\"binary\")\n  ax.axis('off')\n\nplt.show()\n```", "```py\nimport numpy as np\nfrom sklearn.decomposition import NMF\n\nV = np.array([[1, 1, -2, 1], [2, 1, -3, 2], [3, 1.2, -3.3, 5]])\n\nnmf_model = NMF(n_components=2, init='random', random_state=0)\nW = nmf_model.fit_transform(V)\n\nprint(\"V_shape:\", V.shape)\nprint(\"W_shape:\", W.shape)\nprint(\"Reconstruction error:\", nmf_model.reconstruction_err_)\n```"]