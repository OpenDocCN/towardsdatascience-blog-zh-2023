- en: 5 Powerful Python Libraries For EDA You Need to Know About
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/5-powerful-python-libraries-you-need-to-know-to-enhance-your-eda-process-f0100d563c16](https://towardsdatascience.com/5-powerful-python-libraries-you-need-to-know-to-enhance-your-eda-process-f0100d563c16)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Leverage the Power of Python to Explore and Understand Your Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----f0100d563c16--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----f0100d563c16--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f0100d563c16--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f0100d563c16--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----f0100d563c16--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f0100d563c16--------------------------------)
    ·10 min read·Feb 15, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/db53c469cf3830c20cea698f30724e15.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Gerd Altmann](https://pixabay.com/users/geralt-9301/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=6511448)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=6511448)
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring data is of good quality before running machine learning models is essential.
    If we feed poor-quality data to these models, we may end up with unexpected or
    unintended consequences. However, carrying out the prep work on data and trying
    to understand what you have or don’t have is very time-consuming. [Oftentimes
    this process can consume up to 90% of a projects available time.](https://www.researchgate.net/publication/357867454_Data_Quality_Considerations_for_Petrophysical_Machine-Learning_Models)
  prefs: []
  type: TYPE_NORMAL
- en: If you carry out Exploratory Data Analysis (EDA) within Python, you will be
    aware of the common libraries such as pandas, matplotlib and seaborn. All are
    great libraries, but each has their own nuances, which can take time to learn
    or remember.
  prefs: []
  type: TYPE_NORMAL
- en: In recent years, there have been several powerful low-code python libraries
    that make the data exploration and analysis phase of projects much quicker and
    easier.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I will introduce you to 5 of these python libraries, which
    will enhance your data analysis workflow. All of which can be run within a Jupyter
    notebook environment.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. YData Profiling (Previously Pandas Profiling)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The [YData Profiling library,](https://ydata-profiling.ydata.ai/docs/master/pages/getting_started/overview.html)
    formerly known as [Pandas Profiling](https://pypi.org/project/pandas-profiling/),
    allows you to create detailed reports based on a pandas dataframe. It is very
    simple to navigate and provides information on the individual variables, missing
    data analysis, data correlations and interactions.
  prefs: []
  type: TYPE_NORMAL
- en: One slight issue with YData Profiling, is the ability to handle larger datasets,
    which can slow down the report generation.
  prefs: []
  type: TYPE_NORMAL
- en: How to Use The YData Profiling Library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'YData Profiling can be installed via a terminal using pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After the library has been installed in your Python environment, we can simply
    import the `ProfileReport` module from the library alongside pandas. [Pandas](https://pandas.pydata.org/)
    is used to load our data from a CSV file or another format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once the data has been read, we can pass our dataframe to `ProfileReport` ,
    and the report will begin generating.
  prefs: []
  type: TYPE_NORMAL
- en: The length of time it takes to generate the report will be dependent on the
    size of your dataset. The larger the dataset, the longer it will take to generate.
  prefs: []
  type: TYPE_NORMAL
- en: After the report has been created, you can then begin scrolling through the
    report as seen below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a4d4c68c2c072c15bf20ebda039378d3.png)'
  prefs: []
  type: TYPE_IMG
- en: The Ydata Profile report of the selected dataset. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We can dig into each variable within the dataset and view information on data
    completeness, statistics and data types.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e769bc063d431f6689b918596192a3ce.png)'
  prefs: []
  type: TYPE_IMG
- en: View key statistics of numeric variables within the dataset. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We can also create visualisations of data completeness. This allows us to understand
    what data is missing and how missingness is related between the different variables.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1005b72879df221e101877f29d3fd3dc.png)'
  prefs: []
  type: TYPE_IMG
- en: Identification of missing values through various views using the YData Profiling
    report. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: You can explore more of the features in the Pandas Profiling (before it was
    renamed) in the article below.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/pandas-profiling-easy-exploratory-data-analysis-in-python-65d6d0e23650?source=post_page-----f0100d563c16--------------------------------)
    [## Pandas Profiling — Easy Exploratory Data Analysis in Python'
  prefs: []
  type: TYPE_NORMAL
- en: Fast and effective EDA with the Pandas Profiling Library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/pandas-profiling-easy-exploratory-data-analysis-in-python-65d6d0e23650?source=post_page-----f0100d563c16--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 2\. D-Tale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[D-Tale](https://pypi.org/project/dtale/) takes your Pandas dataframe to a
    whole new level. This powerful and fast library makes it very easy to interact
    with your data, carry out basic analysis and even edit it.'
  prefs: []
  type: TYPE_NORMAL
- en: I have only recently found this library, but it has become one of my go-to libraries
    for exploring data.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to give the library a try before downloading it, the library authors
    have provided a [live example](http://alphatechadmin.pythonanywhere.com/dtale/main/1).
  prefs: []
  type: TYPE_NORMAL
- en: How to Use D-Tale
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'D-Tale can be installed via a terminal using pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Then it can be imported alongside pandas, as seen below. Once the data has been
    read by pandas, the resultant dataframe can be passed over to `dtale.show()`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: After a little wait, the D-Tale interactive table will appear with all of the
    data contained within the dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4f1c4fd510be72c6247e478a41569e59.png)'
  prefs: []
  type: TYPE_IMG
- en: D-Tale comes with a large number of features that allow you to interrogate the
    data, visualise its completeness, edit the data and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we look into individual variables, such as the DTC column within this
    dataset, we can visualise the distribution of it using histograms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9834da378b6f99262ff4b065abbea499.png)'
  prefs: []
  type: TYPE_IMG
- en: Interactive histogram within the Describe module of D-Tale. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'And view how that data is distributed amongst a categorical variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b262294bacaadf34a916a5e0ccc8c41a.png)'
  prefs: []
  type: TYPE_IMG
- en: Easily visualise the data by categories such as lithology or geological formation.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to explore more of the features of D-Tale, you can find out more
    in my article below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/d-tale-for-fast-and-easy-exploratory-data-analysis-of-well-log-data-a2ffca5295b6?source=post_page-----f0100d563c16--------------------------------)
    [## D-Tale for Fast and Easy Exploratory Data Analysis of Well Log Data'
  prefs: []
  type: TYPE_NORMAL
- en: Speeding Up The Exploratory Data Analysis Workflow With The D-Tale Python Library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/d-tale-for-fast-and-easy-exploratory-data-analysis-of-well-log-data-a2ffca5295b6?source=post_page-----f0100d563c16--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 3\. SweetViz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SweetViz is another low code, interactive data visualisation and exploration
    library. From a couple of lines of code, we are able to create an interactive
    HTML file to explore our data.
  prefs: []
  type: TYPE_NORMAL
- en: How to Use SweetViz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sweetviz can be installed via the terminal using pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Once it has been installed, we can import it into our notebook and load our
    data using pandas.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We then need to call upon two more lines of code to be able to get our report:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This will then open a new browser tab with the following setup.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9df225c29a10a49cea65bf125bfdc28b.png)'
  prefs: []
  type: TYPE_IMG
- en: SweetViz — a fast and powerful EDA Python library. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Once the browser tab has opened, you can go through each of the variables within
    the dataframe and view the key statistics and the completeness of each variable.
    When you click on any of the variables, it will open up histograms of the data
    distribution if it is numeric data or a count of values if it is categorical data.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, it will show the relationship, in numbers, of that variable with
    the other variables in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to see this visually, you can click on the Associations button at
    the top of the dashboard to open up a graphical correlation graph. In the image
    below, we can see a mixture of squares and circles, which represents categorical
    variables and numeric variables, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The size of the square/circle represents the strength of the relationship, and
    the colour represents the Pearson’s correlation coefficient value. This has to
    be one of the best visualisations of relationships between variables I have seen
    so far within Python.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9afed5db1db3e58eced09c8353b299ea.png)'
  prefs: []
  type: TYPE_IMG
- en: Associations between variables generated using SweetViz. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: One of the minor issues I have found with this library is that you need a wide
    screen to be able to view all of the horizontal content without scrolling. However,
    don’t let that detract you from the power this library can bring to your EDA.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Missingno
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are interested in using a lightweight library to explore the completeness
    of your data, then [missingno](https://github.com/ResidentMario/missingno) is
    one you should definitely consider for your EDA toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: It is a Python library that provides a series of visualisations to understand
    the presence and distribution of missing data within a pandas dataframe. The library
    provides you with a small number of plots (barplot, matrix plot, heatmap or dendrogram)
    to visualise what columns in your dataframe contain missing values and how the
    degree of missingness is related between the variables.
  prefs: []
  type: TYPE_NORMAL
- en: How to Use MissingNo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Missingno can be installed via the terminal using pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Once the library has been installed, we can import it alongside pandas and load
    our data into a dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then call upon our desired plot from the ones available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2eb2d5d73f5c464f30650832b5b54ff1.png)![](../Images/3d03db67c05e390e17e56d957f13180c.png)![](../Images/99d7a00e624d9e8f2f913c1c845d0da8.png)![](../Images/f830fc167211a66e9c21e6b766e328b5.png)'
  prefs: []
  type: TYPE_IMG
- en: The four main plots within the missingno library. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The above four plots provide us insight into:'
  prefs: []
  type: TYPE_NORMAL
- en: How complete each column within the dataframe is — `msno.bar()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where the missing data occurs — `msno.matrix()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How correlated the missing values are — `msno.heatmap()` and `msno.dendrogram()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The nice thing about this library is that the plots are clean, easy to understand
    and can be quickly incorporated into a report as they are.
  prefs: []
  type: TYPE_NORMAL
- en: To understand more about each of these plots, I recommend diving into the article
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/using-the-missingno-python-library-to-identify-and-visualise-missing-data-prior-to-machine-learning-34c8c5b5f009?source=post_page-----f0100d563c16--------------------------------)
    [## Using the missingno Python library to Identify and Visualise Missing Data
    Prior to Machine Learning'
  prefs: []
  type: TYPE_NORMAL
- en: An example using petrophysical well log measurements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/using-the-missingno-python-library-to-identify-and-visualise-missing-data-prior-to-machine-learning-34c8c5b5f009?source=post_page-----f0100d563c16--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Sketch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Sketch](https://github.com/approximatelabs/sketch) is a very new (as of Feb
    2023) library that leverages the power of AI to help you understand your pandas
    dataframes by using natural language questions directly within Jupyter. You can
    also use it to generate sample code, for example how to make a plot of x and y
    within the dataframe, and then use that code to generate the required plot.'
  prefs: []
  type: TYPE_NORMAL
- en: The library is mostly self contained, where it uses machine learning algorithms
    to understand the context of your question in relation to your dataset. There
    is a function that does rely on OpenAI’s API, but that does not detract from how
    the library can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Sketch has a lot of potential to be powerful, especially if you are looking
    to provide an interface to customers with very limited knowledge of coding in
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: How to Use Sketch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sketch can be installed via the terminal using pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We then import pandas and sketch into our notebook, followed by loading the
    data from our CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Once sketch has been imported, three new methods will be available for our dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: The first is the `.ask` method, which allows you to ask questions — using natural
    language — about the contents of the dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This returns the following line with the max values of each of the numerical
    columns within the dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/77a25f6468e28fc958b4060311e757c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Response from Sketch when asked to return the max values of each column. Image
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also ask it how complete the dataframe is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: And it will return the following response in a human written form rather than
    tables or graphs.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/210b782b0373df47b5e33dae427bdd1f.png)'
  prefs: []
  type: TYPE_IMG
- en: Response from sketch when asked about the completeness of the dataframe. Image
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Very impressive. But that is not all.
  prefs: []
  type: TYPE_NORMAL
- en: We can even query the library about how to plot the data contained within the
    dataframe using `.sketch.howto()`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And it will return a code snippet of how to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e32e9202d935107430d88f8638bdd679.png)'
  prefs: []
  type: TYPE_IMG
- en: Returned code snippet from the sketch.howto function. Imaghe by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Which, when run, will return the following plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8d92b9db65a500948c4ff4c5a483fe6c.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated from code returned by sketch python library. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: The third option available with sketch is the `.apply` method, which requires
    an OpenAI API in order to run. This function is handy when we want to create new
    features from existing features or generate new ones. As of this moment, I have
    not explored this option, but I hope to in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more detail on Sketch, check out the following article:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/sketch-a-promising-ai-library-to-help-with-pandas-dataframes-directly-in-jupyter-5162c32c66ef?source=post_page-----f0100d563c16--------------------------------)
    [## Sketch: A Promising AI Library to Help With Pandas Dataframes Directly in
    Jupyter'
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging the Power of AI Within Jupyter Notebooks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: andymcdonaldgeo.medium.com](https://andymcdonaldgeo.medium.com/sketch-a-promising-ai-library-to-help-with-pandas-dataframes-directly-in-jupyter-5162c32c66ef?source=post_page-----f0100d563c16--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within this article, we have seen five powerful python libraries that can be
    used to speed up and enhance the exploratory data analysis phase of a project.
    These have ranged from simple graphics to interactions with the data using the
    power of natural language processing.
  prefs: []
  type: TYPE_NORMAL
- en: I highly recommend that you check these libraries out and explore their capabilities.
    You never know, you may just find your new favourite python library.
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should subscribe to my content and
    get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)*Alternatively,
    you can* [***sign up for my newsletter***](https://fabulous-founder-2965.ck.page/2ca286e572)
    *to get additional content straight into your inbox for free.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Secondly, you can get the full Medium experience and support thousands of
    other writers and me by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the fantastic Medium articles, as well as the
    chance to make money with your writing.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The dataset used in this article is a subset of a training dataset used as
    part of a Machine Learning competition run by Xeek and FORCE 2020 *(Bormann et
    al., 2020)*. It is released under a NOLD 2.0 licence from the Norwegian Government,
    details of which can be found here: [Norwegian Licence for Open Government Data
    (NLOD) 2.0](https://data.norge.no/nlod/en/2.0/). The full dataset can be accessed
    [here](https://doi.org/10.5281/zenodo.4351155).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The full reference for the dataset is:'
  prefs: []
  type: TYPE_NORMAL
- en: Bormann, Peter, Aursand, Peder, Dilib, Fahad, Manral, Surrender, & Dischington,
    Peter. (2020). FORCE 2020 Well well log and lithofacies dataset for machine learning
    competition [Data set]. Zenodo. [http://doi.org/10.5281/zenodo.4351156](http://doi.org/10.5281/zenodo.4351156)
  prefs: []
  type: TYPE_NORMAL
