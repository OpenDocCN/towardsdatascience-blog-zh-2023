- en: How to Develop a Streamlit Data Analytics Web App in 3 Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-develop-a-data-analytics-web-app-in-3-steps-92cd5e901c52](https://towardsdatascience.com/how-to-develop-a-data-analytics-web-app-in-3-steps-92cd5e901c52)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Step-by-Step Guide to Build Your First YouTube Analytics App
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://destingong.medium.com/?source=post_page-----92cd5e901c52--------------------------------)[![Destin
    Gong](../Images/c93d4341a928c36bc47031f02e23ebbf.png)](https://destingong.medium.com/?source=post_page-----92cd5e901c52--------------------------------)[](https://towardsdatascience.com/?source=post_page-----92cd5e901c52--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----92cd5e901c52--------------------------------)
    [Destin Gong](https://destingong.medium.com/?source=post_page-----92cd5e901c52--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----92cd5e901c52--------------------------------)
    ·8 min read·Feb 25, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2033b5a816b904b2e5d44e11dcbc8159.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Tran Mau Tri Tam](https://unsplash.com/@tranmautritam?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'For the majority of the time, data science/data analytics projects end up as
    delivering a static report or dashboard, which tremendously downgrades the efforts
    and thoughts being put into the process. Alternatively, web app is a great way
    to demonstrate your data analytics work, which can be further expanded as a service
    on self-served and interactive platforms. However, as data scientists or data
    analysts, we are not trained for developing softwares or websites. In this article,
    I would like to introduce tools like Streamlit and Plotly that allows us to easily
    develop and serve your data analytics projects through a web app, with the following
    three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4a8bbd1139b13a7381239bbf0f585642.png)'
  prefs: []
  type: TYPE_IMG
- en: Develop Data Analytic Web App in 3 Steps (image from author’s [website](https://www.visual-design.net/))
  prefs: []
  type: TYPE_NORMAL
- en: Extract Data and Build Database
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define Data Analytics Process as Functions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Construct Web App Interface
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Afterwards, we will be able to create a simple web app like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4257b12e6861996a382075406fc59159.png)'
  prefs: []
  type: TYPE_IMG
- en: Web App Demo (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Step 1\. Extract and Build Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/51b83b830a3cadf53e06eba1f6e5d885.png)'
  prefs: []
  type: TYPE_IMG
- en: Step 1 in Developing Data Analytics Web App (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: We will use YouTube Data as an example here, since it is relevant to our daily
    life. YouTube Data API allows us to get public YouTube data, such as video statistics
    (e.g. number of likes, views) or content details (e.g. tags, title, comments).
    To set up the YouTube API, it is required to sign up a Google Developer account
    and set up an API key. Here are some resources I found helpful to get myself started
    on using YouTube API.
  prefs: []
  type: TYPE_NORMAL
- en: '[Python YouTube API Tutorial: Getting Started — Creating an API Key and Querying
    the API](https://www.youtube.com/watch?v=th5_9woFJmk&t=1036s&ab_channel=CoreySchafer)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[YouTube Data API Documentation](https://developers.google.com/youtube/v3/docs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Google API Python Client](https://github.com/googleapis/google-api-python-client/blob/main/docs/start.md)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These resources takes us through how to create a YouTube API key and install
    required library (e.g. googleapiclient.discovery). After these dependencies have
    been resolved, we set up the connection to the API using Python and your own API
    key, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After establishing the connection, it’s time to explore what data is available
    for your data science projects. To do this, take a look at the [YouTube Data API
    documentation](https://developers.google.com/youtube/v3/docs), which provides
    an overview of the different kinds of data that can be accessed.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f6466744fc067222b4005141934d56ff.png)'
  prefs: []
  type: TYPE_IMG
- en: YouTube Data API reference list (screenshot by author)
  prefs: []
  type: TYPE_NORMAL
- en: We will use “[Videos](https://developers.google.com/youtube/v3/docs/videos/list)”
    as an example for this project and the `list()`method allows us to request the
    “[Video Resource](https://developers.google.com/youtube/v3/docs/videos#resource)”
    by passing the *part* parameter and several *filters*. *part* parameter specifies
    which components from the Video Resource you would like to fetch and here I am
    getting *snippet, statistics, and contentDetails*. Have a look at this [documentation](https://developers.google.com/youtube/v3/docs/videos#resource)
    which details all fields you can get from `videos().list()` method. And we specify
    the following *filter* parameters to limit the results returned from this request.
  prefs: []
  type: TYPE_NORMAL
- en: '`chart=’mostPopular’`: get the most popular videos'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`regionCode=''US’`: videos from US'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`videoCategoryId=1`: get the videos from a specific video category (e.g. 1
    is for Film & Animation), which can be found in this catalog of [video category
    ID](https://gist.github.com/dgp/1b24bf2961521bd75d6c).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`maxResults=20`: return a maximum number of 20 videos'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We then execute the request using `video_request.execute()` and the response
    will be returned as JSON format, which typically looks like the snapshot below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/03d92e26c4f93c4f31e4b9781bc78d94.png)'
  prefs: []
  type: TYPE_IMG
- en: response in JSON format (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: All information are stored in the “items” in the response. Then we extract the
    ‘items’ key and create the dataframe `video_df` by normalizing the JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As the result, we manage to tidy up the output into a structure that is easier
    to manipulate.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bf7949e9ab159ba5b639d529ccf5f745.png)'
  prefs: []
  type: TYPE_IMG
- en: video_df (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: To take a step further of working with JSON using Python, I recommend reading
    the article “[How to Best Work with JSON in Python](/how-to-best-work-with-json-in-python-2c8989ff0390)”.
  prefs: []
  type: TYPE_NORMAL
- en: Step 2\. Define Data Analytics Process as Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/38cde526632a5c69c48572a27c7bc047.png)'
  prefs: []
  type: TYPE_IMG
- en: Step 2 in Developing Data Analytics Web App (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: We can package multiple lines of code statements into one function, so that
    it can be iteratively executed and easily embedded with other web app components
    at the later stage.
  prefs: []
  type: TYPE_NORMAL
- en: Define extractYouTubeData()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For instance, we can encapsulate the data extraction process above into a function:
    `extractYouTubeData(youtube, categoryId)`*,* which allows us to pass a `categoryId`
    variable and output the top 20 popular videos under that category as `video_df`.
    In this way, we can get user’s input on which category they would like to select,
    then feed the input into this function and get the corresponding top 20 videos.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We can use `video_df.info()`to get all fields in this dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c5d2a3dd36d1e11b66f68a5ab54fa742.png)'
  prefs: []
  type: TYPE_IMG
- en: fields in video_df (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: With this valuable dataset we can carry out a large variety of analysis, such
    as exploratory data analysis, sentiment analysis, topic modeling etc.
  prefs: []
  type: TYPE_NORMAL
- en: I would like to start with designing the app for some exploratory data analysis
    on these most popular YouTube videos
  prefs: []
  type: TYPE_NORMAL
- en: video duration vs. the number of likes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the most frequently occurred tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the future articles, I will explore more techniques such as topic modeling
    and natural language processing to analyze the video title and comments. Therefore,
    if you would like to read more of my articles on Medium, I would really appreciate
    your support by signing up [Medium membership](https://destingong.medium.com/membership)
    ☕.
  prefs: []
  type: TYPE_NORMAL
- en: Define plotVideoDurationStats()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I would like to know whether video duration has some correlation with the number
    of likes for these popular videos. To achieve this, we firstly need to transform
    the `contentDetails.duration` from ISO datetime format into numeric values using
    `isodate.parse_duration().total_seconds()`. Then we can use scatter plot to visualize
    the video duration against the likes count. This is carried out using Plotly which
    allows more interactive experience for end users. The code snippet below returns
    the Plotly figure which will be embedded into our web app.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d13cb64b207ed51793603911430fb2c6.png)'
  prefs: []
  type: TYPE_IMG
- en: figure output from plotVideoDurationStats (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'To explore more tutorials based on Plotly, check out these blogs below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/an-interactive-guide-to-hypothesis-testing-in-python-979f4d62d85?source=post_page-----92cd5e901c52--------------------------------)
    [## An Interactive Guide to Hypothesis Testing in Python'
  prefs: []
  type: TYPE_NORMAL
- en: T-Test, ANOVA, Chi-Squared Test with Examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/an-interactive-guide-to-hypothesis-testing-in-python-979f4d62d85?source=post_page-----92cd5e901c52--------------------------------)
    [](/dynamic-eda-for-qatar-world-cup-teams-8945970f16be?source=post_page-----92cd5e901c52--------------------------------)
    [## How to Use Plotly for More Insightful and Interactive Data Explorations
  prefs: []
  type: TYPE_NORMAL
- en: 'Case Study: Dynamic EDA for Qatar World Cup Teams'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/dynamic-eda-for-qatar-world-cup-teams-8945970f16be?source=post_page-----92cd5e901c52--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Define plotTopNTags()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This function creates the figure of top N tags of a certain video category.
    Firstly, we iterate through all `snippet.tags` and collect all tags into a tag
    list. We then create the `tags_freq_df` that describe the counts of top N most
    frequent tags. Lastly, we use `px.bar()` to display the chart.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/291e58bf3ac37a0fd98625d759a0a630.png)'
  prefs: []
  type: TYPE_IMG
- en: figure output from plotTopNTags() (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Step 3\. Construct Web App Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/2737a712fc8b4a25e307bc2a341fd362.png)'
  prefs: []
  type: TYPE_IMG
- en: Step 3 in Developing Data Analytics Web App (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: We will use [Streamlit](https://docs.streamlit.io/library/get-started) to develop
    the web app interface. It is the easiest tool I found so far for web app development
    running on top of Python. It saves us the hassle to handle the HTTP request, define
    routes, or write HTML and CSS code.
  prefs: []
  type: TYPE_NORMAL
- en: Run `!pip install streamlit` to install Streamlit to your machine, or use this
    [documentation](https://docs.streamlit.io/library/get-started/installation) to
    install Streamlit in your preferred development environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a web app component is very easy using Streamlit. For example displaying
    a title is as simple as below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here we need several components to build the web app.
  prefs: []
  type: TYPE_NORMAL
- en: '**1) input: a dropdown menu for users to select video category**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9d88cc9050890409711893c7234d837e.png)'
  prefs: []
  type: TYPE_IMG
- en: dropdown menu (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: This code snippet allows us to create a dropdown menu with the prompt “Select
    YouTube Video Category” and options to choose from ‘Film & Animation’, ‘Music’,
    ‘Sports’, ‘Pets & Animals’.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**2) input: a slider for users choose the number of tags**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4101f558717cca51f484ebf894bed640.png)'
  prefs: []
  type: TYPE_IMG
- en: slider (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: This defines the slider and specifies the slider range from 0 to 20.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**3) output: a figure that displays the video duration vs. number of likes**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/80ca9c10df29411897cd2b0867e72c79.png)'
  prefs: []
  type: TYPE_IMG
- en: video duration vs. number of likes (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: We firstly create the `videoCategoryDict`to convert the category name into `categoryId`,
    then pass the `categoryId` through the `extractYouTubeData()`function that we
    defined previously. Check out this [page](https://gist.github.com/dgp/1b24bf2961521bd75d6c)
    for a full list of the video category their corresponding categoryId**.**
  prefs: []
  type: TYPE_NORMAL
- en: We then call the `plotVideoDuration()` function and display the plotly chart
    using `st.plotly_chart()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**4) output: a figure that displays the top tags in that video category**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e053b00481cf4dd69026bf6804d1525f.png)'
  prefs: []
  type: TYPE_IMG
- en: top tags in the video category (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: The last component requires us to feed user’s input of number of tags to the
    function `plotTopNTags()`*,* and create the plot by calling the function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: These code statements can be all contained in a single Python file python (e.g.
    YoutTubeDataApp.py). Then we navigate to the command line and use `!streamlit
    run YouTubeDataApp.py`to run the app in a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Take-Home Message
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Building a web app may seem intimidating for data analysts and data scientists.
    This post covers following three steps to get your hands on building your first
    web app and extend your data analytics projects to a self-served platform:'
  prefs: []
  type: TYPE_NORMAL
- en: Extract Data and Build Database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define Data Analytics Process as Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Construct Web App Interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More Resources Like This
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Destin Gong](../Images/dcd4375055f8aa7602b1433a60ad5ca3.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Destin Gong](https://destingong.medium.com/?source=post_page-----92cd5e901c52--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Get Started in Data Science
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[View list](https://destingong.medium.com/list/get-started-in-data-science-8006bb4ba3ad?source=post_page-----92cd5e901c52--------------------------------)9
    stories![](../Images/164870467df6c40201a5ba8519473403.png)![](../Images/d302bbd526df8af0e847419971dc535a.png)![Statistical
    Tests in Python](../Images/2ff8d4b6d8bd95fde596b31de22ef09e.png)![Destin Gong](../Images/dcd4375055f8aa7602b1433a60ad5ca3.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Destin Gong](https://destingong.medium.com/?source=post_page-----92cd5e901c52--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: EDA and Feature Engineering Techniques
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[View list](https://destingong.medium.com/list/eda-and-feature-engineering-techniques-e0696974ed54?source=post_page-----92cd5e901c52--------------------------------)9
    stories![](../Images/7fc2bdc73b7b052566cf26034941c232.png)![](../Images/a7c4110e9a854cf9e9eba83dfa46e7d3.png)![](../Images/3ac6d4f7832c8daa758f71b1e479406c.png)[](/dynamic-eda-for-qatar-world-cup-teams-8945970f16be?source=post_page-----92cd5e901c52--------------------------------)
    [## How to Use Plotly for More Insightful and Interactive Data Explorations'
  prefs: []
  type: TYPE_NORMAL
- en: 'Case Study: Dynamic EDA for Qatar World Cup Teams'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/dynamic-eda-for-qatar-world-cup-teams-8945970f16be?source=post_page-----92cd5e901c52--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '*Originally published at* [*https://www.visual-design.net*](https://www.visual-design.net/post/semi-automated-exploratory-data-analysis-process-in-python)
    *on Feb 23rd, 2023.*'
  prefs: []
  type: TYPE_NORMAL
