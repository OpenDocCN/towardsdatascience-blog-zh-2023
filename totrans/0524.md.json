["```py\n# Import dependencies\nimport pandas as pd\nimport numpy as np\nfrom geopy.geocoders import Nominatim\n# Read csv data with column 'City' and column 'State'\ncity_list_df = pd.read_csv(r'.\\FBS_Football_Cities.csv', encoding = 'unicode_escape')\n```", "```py\n# Lists to track latitude and longitude of each city\nlat_list = []\nlong_list = []\n# for each city in the dataframe, get the latitude and longitude and # add them to the lists\nindex = 0\nfor city in city_list_df['City']:\n    city_name = str(city)+', '+str(city_list_df['State'][index])\n\n    # Two cities needed some manual cleaning\n    if index == 39:\n        city_name = 'Urbana, Illinois'\n    elif index == 92:\n        city_name = 'San Jose, California'\n\n    print(city_name)\n    print(index)\n\n    # calling the Nominatim tool\n    loc = Nominatim(user_agent=\"GetLoc\")\n\n    # entering the location name\n    getLoc = loc.geocode(city_name)\n\n    # add the latitude and longitude to their respective lists\n    lat_list.append(getLoc.latitude)\n    long_list.append(getLoc.longitude)\n\n    index = index + 1\n```", "```py\nlat_long_df = pd.DataFrame(lat_list, columns=['latitude'])\nlat_long_df['longitude'] = long_list\nlat_long_df.to_csv(r'.\\cfb_lat_long.csv')\n```", "```py\n# Read csv of all data\ncfb_info_df = pd.read_csv(r'.\\FBS_Football_Team_Info.csv', encoding = 'unicode_escape')\n# Track conference name, lat., long., and city name \nconf_name_list = []\nconf_lat_list = []\nconf_long_list = []\nconf_city_list = []\n# for each conference in the data set calculate the mean  latitude and mean longitude\nfor conf in np.unique(cfb_info_df['Current_conference_2025']):\n    conf_latitude = np.mean(cfb_info_df[cfb_info_df['Current_conference_2025'] == conf]['Latitude'])\n    conf_longitude = np.mean(cfb_info_df[cfb_info_df['Current_conference_2025'] == conf]['Longitude'])\n\n    # calling the Nominatim tool\n    loc = Nominatim(user_agent=\"GetLoc\")\n\n    # entering the lat. and long. to return the city name\n    getCity = loc.reverse(str(conf_latitude)+', '+str(conf_longitude))\n\n    #Update lists\n    conf_name_list.append(conf)\n    conf_lat_list.append(conf_latitude)\n    conf_long_list.append(conf_longitude)\n    conf_city_list.append(getCity)\n\n    print(f'Conference: {conf}, Centroid City: {getCity} ({conf_latitude}, {conf_longitude})')\n\n#Create data frame by conference\nconf_center_df = pd.DataFrame(conf_name_list, columns=['conference'])\nconf_center_df['latitude'] = conf_lat_list\nconf_center_df['longitude'] = conf_long_list\nconf_center_df['city'] = conf_city_list\n# Add a column for text to appear on our map\nconf_center_df['text'] = conf_center_df['conference'] + ': ' + conf_center_df['city'].astype(str)\n```", "```py\nimport plotly.graph_objects as go\nfig = go.Figure(data=go.Scattergeo(\n        lon = conf_center_df['longitude'],\n        lat = conf_center_df['latitude'],\n        text = conf_center_df['text'],\n        mode = 'markers'))\nfig.update_layout(title = 'Conference Geographic Centers<br>(Hover for conference names)',\n        geo_scope='usa')\nfig.show()\n```", "```py\ncfb_info_df['Enrollment'].describe()\n```", "```py\ncount      133.000000\nmean     29337.541353\nstd      13780.834495\nmin       3297.000000\n25%      21200.000000\n50%      28500.000000\n75%      38500.000000\nmax      69400.000000\nName: Enrollment, dtype: float64\n```", "```py\nimport plotly.express as px\nfig = px.histogram(cfb_info_df, x=\"Enrollment\", color=\"Current_conference_2025\", marginal=\"box\", hover_data=cfb_info_df.columns)\nfig.show()\n```", "```py\nimport seaborn as sns\n# Pull out numeric columns from data\nnumeric_columns = ['Enrollment','years_playing','Stadium_capacity','total_draft_picks_2000_to_2020',\n                  'wsj_college_football_revenue_2019', 'tj_altimore_fan_base_size_millions', 'bowl_game_win_pct',\n                 'historical_win_pct', 'p_AP_Top_25_2001_to_2021']\n# Generate Correlation Matrix using only the numeric columns\ncorrelation_matrix = cfb_info_df.loc[:,numeric_columns].corr()\n# Print the correlation matrix\n#print(correlation_matrix)\n# Plot the correlation matrix using seaborn\n# Set plot size\nsns.set(rc={\"figure.figsize\":(11, 10)})\n# Show the plot\nsns.heatmap(correlation_matrix, annot=True)\n```", "```py\nimport plotly.express as px\nfig = px.scatter(cfb_info_df, x=\"Stadium_capacity\", y=\"p_AP_Top_25_2001_to_2021\", color=\"Current_conference_2025\",\n                 size=\"tj_altimore_fan_base_size_millions\",\n                labels=dict(Stadium_capacity=\"Stadium Capacity\", \n                            p_AP_Top_25_2001_to_2021=\"Percent of Weeks in AP Top 25\", \n                            Current_conference_2025=\"Conference (2025)\", \n                            tj_altimore_fan_base_size_millions = \"Fan Base Size\"))\nfig.show()\n```"]