["```py\npip install human-learn\n```", "```py\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\n\n# Get train and test data\ntrain = pd.read_csv(\"occupancy_data/datatraining.txt\").drop(columns=\"date\")\ntest = pd.read_csv(\"occupancy_data/datatest.txt\").drop(columns=\"date\")\n\n# Get X and y\ntarget = \"Occupancy\"\ntrain_X, train_y = train.drop(columns=target), train[target]\nval_X, val_y = test.drop(columns=target), test[target]\n```", "```py\ntrain.head(10)\n```", "```py\n# Train\nforest_model = RandomForestClassifier(random_state=1)\n\n# Preduct\nforest_model.fit(train_X, train_y)\nmachine_preds = forest_model.predict(val_X)\n\n# Evalute\nprint(classification_report(val_y, machine_preds))\n```", "```py\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfeature = \"Light\"\npx.box(data_frame=train, x=target, y=feature)\n```", "```py\nimport numpy as np\nfrom hulearn.classification import FunctionClassifier\n\ndef create_rule(data: pd.DataFrame, col: str, threshold: float=100):\n    return np.array(data[col] > threshold).astype(int)\n\nmod = FunctionClassifier(create_rule, col='Light')\n```", "```py\nmod.fit(train_X, train_y)\npreds = mod.predict(val_X)\nprint(classification_report(val_y, preds))\n```", "```py\nfrom hulearn.experimental.interactive import parallel_coordinates\n\nparallel_coordinates(train, label=target, height=200)\n```", "```py\nfrom sklearn.model_selection import GridSearchCV\n\ngrid = GridSearchCV(mod, cv=2, param_grid={\"threshold\": np.linspace(250, 750, 1000)})\ngrid.fit(train_X, train_y)\n```", "```py\nbest_threshold = grid.best_params_[\"threshold\"]\nbest_threshold\n> 364.61461461461465\n```", "```py\nhuman_preds = grid.predict(val_X)\nprint(classification_report(val_y, human_preds))\n```"]