- en: Your Data Science Visualizations Will Never Be The Same — Plotly & Dash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/your-data-science-visualizations-will-never-be-the-same-plotly-dash-6327d07d9efb](https://towardsdatascience.com/your-data-science-visualizations-will-never-be-the-same-plotly-dash-6327d07d9efb)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data Viz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using Plotly and Dash to create interactive dashboards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://polmarin.medium.com/?source=post_page-----6327d07d9efb--------------------------------)[![Pol
    Marin](../Images/a4f69a96717d453db9791f27b8f85e86.png)](https://polmarin.medium.com/?source=post_page-----6327d07d9efb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6327d07d9efb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6327d07d9efb--------------------------------)
    [Pol Marin](https://polmarin.medium.com/?source=post_page-----6327d07d9efb--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6327d07d9efb--------------------------------)
    ·14 min read·Oct 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3e1a35e12cadcbc748b7a5aa4bc77bfb.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Isaac Smith](https://unsplash.com/@isaacmsmith?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Not so long ago, I wrote a simple intro to four Python data visualization libraries
    where I showcased their pros and cons, and used practical examples to show what
    they are capable of.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we’re going to get deeper into the ones that I like the most, I highly encourage
    you to check that article first, as this one will expand on what was shown there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/building-interactive-data-visualizations-with-python-the-art-of-storytelling-ceb43db67488?source=post_page-----6327d07d9efb--------------------------------)
    [## Building Interactive Data Visualizations with Python — The Art of Storytelling'
  prefs: []
  type: TYPE_NORMAL
- en: Seaborn, Bokeh, Plotly, and Dash to effectively communicate data insights
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/building-interactive-data-visualizations-with-python-the-art-of-storytelling-ceb43db67488?source=post_page-----6327d07d9efb--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Today we’ll focus on **Plotly**[1] and **Dash**[2]. Why two? Because they go
    hand-in-hand. As I stated in the article linked above, “Dash isn’t a plotting
    library per se. It’s an amazing framework used to generate dashboards.”
  prefs: []
  type: TYPE_NORMAL
- en: So Plotly is the library we use to plot, and Dash is the framework we use to
    generate cool, interactive dashboards from those plots.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the set of steps we’ll follow to build today’s dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: Setup and installation — to get us in the proper state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some simple use cases — to show how Plotly works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a dashboard with Dash — to create the best dashboards.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusions — to wrap up the story and see the results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before going deeper, we need to talk about the data. We need some sort of data
    to be able to visualize it, right? Keeping up with most of my latest Medium content,
    I’ll be focusing on sports and, more concretely, football (soccer).
  prefs: []
  type: TYPE_NORMAL
- en: I’ll be using Statsbomb’s free data[3] from the 2015–16 LaLiga campaign.
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s a lot of data from that season but I want to visualize Futbol Club
    Barcelona’s players'' performance focusing mostly on attacking terms: shots, goals,
    assists…'
  prefs: []
  type: TYPE_NORMAL
- en: 'The purpose might differ based on the analyst’s position: are you a Real Madrid
    analyst? Then I’m sure you’ll want to decipher how your team can stop Leo Messi
    (spoiler: you can’t).'
  prefs: []
  type: TYPE_NORMAL
- en: But if you work within the Barça organization, you might want to just check
    your player’s numbers and see where some players perform better than others.
  prefs: []
  type: TYPE_NORMAL
- en: Whatever it is, always make sure you define your goals before creating any dashboard
    — there’s so much info you can visualize that you have to purposely pick the plots
    you want to look at.
  prefs: []
  type: TYPE_NORMAL
- en: And always aim for simplicity; non-technical people will have to draw conclusions
    from your dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: Setup and Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I like to keep things ordered and structured. So the first thing we’ll do is
    create a new directory in whatever path you want your app to be hosted in. I’ll
    create it on my Desktop, for simplicity. Here are the two commands I run on a
    terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now, the next natural step is to create a new Python environment within the
    new directory. I’ll use `pipenv` [4] but you can use your virtualenv management
    tool of preference (or none).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you haven’t got pipenv installed in your machine, then run this command
    first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create the environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will create a new environment and automatically activate it. Anything you
    install now from that terminal is going to be installed on the environment only.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let’s start installing libraries using pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Yep, by installing these three we’ll have more than enough. They all have their
    own dependencies and we’re going to take advantage of some of them like *Plotly*
    or *NumPy*.
  prefs: []
  type: TYPE_NORMAL
- en: With everything set up, we’re now ready to start exploring Plotly.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing Data with Plotly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'My recommendation here is to test it from a jupyter notebook, as it will make
    your development phase more fluid. In this case, you should also install it —
    I promise it’s the last installation we run — and we’ll also open it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As always, we’ll need to prepare the data and we’ll create a new notebook called
    **plotly.ipynb**. To avoid extremely large notebooks and files, I like to modularize
    my code. For that reason, I created a `src` directory within the project folder
    and added two new files there: `functions.py` and `classes.py`. The structure
    now looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The first function I’ll create is going to be called `prepare_team_data()` and
    will return events, shots, and assist data from the specified team (in our case,
    Barcelona).
  prefs: []
  type: TYPE_NORMAL
- en: As the function itself is not useful for today’s purposes, because we want to
    focus on plotting and creating dashboards, I won’t put the code to the function.
    But you have the link to the whole code in the Resources section[5].
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: And here’s a snapshot of what the shots DF looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1dd64d3f16ff7bb0ce93711ecda41578.png)'
  prefs: []
  type: TYPE_IMG
- en: shots DF screenshot — image by the author
  prefs: []
  type: TYPE_NORMAL
- en: Good, let’s start with shots then. I want to plot a player’s shot distribution,
    to see where he shoots from more and where his goals come from. To do this, I’ve
    created a `FootballPitch` class in the *classes.py* module.
  prefs: []
  type: TYPE_NORMAL
- en: This class allows us to plot a complete football pitch, half of it (the attacking
    half, it is), or even a heatmap as we’ll be doing.
  prefs: []
  type: TYPE_NORMAL
- en: Again, you can find the code in the GitHub link[5] in the Resources section
    at the bottom of this article. But we’re going to inspect it a little bit because
    here’s where we’ve used a lot of Plotly’s gifts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The class has basically two methods: `plot_pitch()` and `plot_heatmap`. As
    we’re first interested in displaying the player shots, let’s start with the first
    one by dividing it into little code chunks.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that you will see some variables and class attributes that we haven’t assigned
    any value to. These are function parameters or initialized when creating the object.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'First thing first: let’s declare the essential variables the function will
    use.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the figure declared, what we’ll do over and over again is
    **add traces or shapes** into it to customize it as we want. So, for example,
    the first thing the function does is plot a rectangular shape, being it the pitch
    itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, we add a trace which is a scatterplot with mode `lines` — meaning we want
    a line, not a real scatter plot with independent dots. The parameters are pretty
    self-explanatory, such as the x and y (the data we want to plot), the colors…
    The hoverinfo label is used to determine what we want to show when we hover our
    mouse over these lines. As we’re building the pitch as part of the background
    and isn’t telling us anything about the data we want to analyze, I’m setting it
    to skip.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we set some extra configurations into the figure’s layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'That gives us the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/38161acb7d8a81e3f6f6d87407d3ddcb.png)'
  prefs: []
  type: TYPE_IMG
- en: Football pitch (grass only) — image by the author
  prefs: []
  type: TYPE_NORMAL
- en: And we now have our pitch plotted. Not really meaningful… Yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Plotting in Plotly is really this easy! By adding some more traces and shapes
    into the plot, here’s what my pitch background ends up looking like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f834d589d827f1975bf7e9a1332015ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Football pitch — image by the author
  prefs: []
  type: TYPE_NORMAL
- en: Now, you might not be interested in displaying a football pitch. That’s why
    I didn’t put all the code here… But great dashboards are the result of creativity
    and skills, and plotting a pitch is a great way to display football events that
    happen on the pitch (if we’re interested in location).
  prefs: []
  type: TYPE_NORMAL
- en: So let’s get going and start displaying real data!
  prefs: []
  type: TYPE_NORMAL
- en: As we want to display shots — and goals — a **scatter plot** looks like a fair
    option to use. Remember that we already have the data prepared, we just have to
    filter it and display it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s plot Leo Messi’s shots and goals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The first part is self-explanatory: we just declare variables, instantiate
    the pitch, store the figure in the `fig` variable, and run a function that filters
    the `shots` data frame to return only the player ones.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, in a 2-iteration loop, we add a scatter plot twice: one for shots that
    weren’t a goal (which will be displayed in blue) and one for shots that resulted
    in a goal. The result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/16c050372beceaa057b939bb2607346a.png)'
  prefs: []
  type: TYPE_IMG
- en: Leo Messi’s shot and goal distribution in 2015/16 — image by the author
  prefs: []
  type: TYPE_NORMAL
- en: And what makes plotly amazing is that this plot is fully interactive. We can
    play around hovering our mouse to see the real shot locations, hide the non-goal
    ones to inspect just the scoring shots…
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go ahead now and build a **line plot.** It will be interactive of course,
    and we’ll use it to inspect the player’s shots by quarter and also to compare
    it with his teammates’ and the team’s average.
  prefs: []
  type: TYPE_NORMAL
- en: To do so, we’ll start by grouping shots in a quarterly manner (in 15-minute
    chunks) for each player. The next part will be plotting the values themselves
    and playing with line opacity to highlight the current player (Messi).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have all players ready, we’ll add the team’s average as a dashed
    line. The code does exactly the same as the snippet above but uses team-level
    data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And we’ll end up adding some styling to the layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/25baaaf3aff18214cbf50cafc0008e2e.png)'
  prefs: []
  type: TYPE_IMG
- en: The green, highlighted line is Leo Messi’s data (as the label shows when I hovered
    over the 60th-minute shot count). For some reason, maybe due to fatigue, Messi’s
    shots decreased during the 60-75 minutes but they increased in the last minutes
    of the game.
  prefs: []
  type: TYPE_NORMAL
- en: We see most of the team’s shots during the last 15 minutes decrease but Leo
    goes the other way. This shows a lot about his impact on the team and his desire
    to win.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, enough for the intro. We’ve managed to plot two different plots and
    also create an amazing background for our plots. I think we’ve covered more than
    Plotly’s basics.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Dashboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A dashboard is just a combination of plots displayed in an ordered and attractive
    way. And we already have the plots created — we did it in the last section — so
    we just need to display them.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it isn’t as straightforward. We’ll have to add some changes to the code
    snippets shared above but I promise they’ll be tiny.
  prefs: []
  type: TYPE_NORMAL
- en: To complete the dashboard, I’ll add some more plots and functionalities to make
    it fully interactive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having **Dash** already installed, I’ll create a new file called **app.py**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And the file’s template will start being this simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If you went on and executed the file (`python app.py`), you’d get a message
    in your terminal like the next one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Go ahead and navigate to [http://127.0.0.1:8050/](http://127.0.0.1:8050/). You’ll
    see a blank page, but that’s actually your dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start adding stuff, shall we? Take a look at the next code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: By now, it should sound familiar. It’s exactly the same code we used to display
    Messi’s shots… But now, instead of defining the player to be Leo Messi, it’s the
    function argument.
  prefs: []
  type: TYPE_NORMAL
- en: And where does this argument come from? Just above the function declaration,
    we have the **callback decorator**. These callbacks are what make Dash’s dashboards
    interactive.
  prefs: []
  type: TYPE_NORMAL
- en: We use them to determine the inputs and outputs of the associated app component.
    In this case, we’re saying that the function needs the `player` parameter which
    will come from the element called `player_dropdown` (which we haven’t defined
    yet).
  prefs: []
  type: TYPE_NORMAL
- en: As for the output, we made the function return the `fig`. Thanks to the callback
    decorator, the app knows that this will be the figure being used in the `shot_distribution`
    element from our dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: You probably have too many questions right now. How do I define a dropdown or
    any interactable component? How do I actually get to plot the shot_distribution
    element?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with the first question: the dropdown. Dash has its own core components
    (dcc) and the dropdown is one of them. Creating it is as simple as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This will create a dropdown using all player names as possible options, using
    `All players` as the default value. But the most important part is the **id**.
    Here’s where we get to tell Dash that this dropdown is the one associated with
    the previous function’s input callback.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, the value this dropdown has will be the player being shown on
    the shot distribution plot.
  prefs: []
  type: TYPE_NORMAL
- en: But we still need to place both of these components into our dashboard. The
    page remains blank.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need some HTML knowledge now, but basic knowledge will be more than enough
    (though it can get as complex as you want).
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to place these components within an HTML code. Dash, again, makes it
    extremely easy for us to do so. In the case of the dropdown, it can be done by
    simply wrapping the code with an `html.Div` component, basically placing the dropdown
    within a `<div></div>` HTML element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The way this works is the `html.Div` can have many child elements (hence the
    list) and then we can set the element’s CSS style using the style attribute, which
    is a dictionary. Easy, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of the shot distribution graph, here’s the equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Same structure, but to display graphs we use the `dcc.Graph` component and,
    as you probably guessed, the id attribute is key here too. It links this particular
    component with the output callback from the function we declared. So, whatever
    is computed there, will be displayed here.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have now wrapped the components with HTML code. But they aren’t being displayed
    yet. We need to add them to the dashboard’s layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'No secret here; the structure is the same but on a higher level. We’re placing
    the previous `<div></div>` elements into a big one (the whole website container)
    and providing some extra styling. Now, yes, if you refresh the website or restart
    the app, you’ll see your first results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3ab6a9949c7279620b2c8f71a8e8bb2b.png)'
  prefs: []
  type: TYPE_IMG
- en: Shot distribution plot — image by the author
  prefs: []
  type: TYPE_NORMAL
- en: Amazing what we’ve built already, right? This interactability is powerful.
  prefs: []
  type: TYPE_NORMAL
- en: 'To finish this section, let’s do the same but with the other plot we built.
    This time, I’ll paste the whole *new* code here so you can check it all at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6ffb5495ca16b142be37c2b07634e344.png)'
  prefs: []
  type: TYPE_IMG
- en: Resulting dashboard with two plots — image by the author
  prefs: []
  type: TYPE_NORMAL
- en: Now, this is functional. But it isn’t really attractive… HTML and CSS will be
    our tools making it more visually appealing (even though I’m not good at design).
  prefs: []
  type: TYPE_NORMAL
- en: However, this is outside of our scope. Our goal was to create a dashboard and
    we’ve done it. This one’s really simple but if you managed to understand everything
    we did, how the final dashboard was done I shared at the beginning and will share
    again in the next section will be no secret to you (again, the code is freely
    available at the bottom of this article)
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Today we built a dashboard with two plots and one dropdown. But we can scale
    it as needed. For example, knowing how to place a dropdown, we know how to place
    one slider. And, what about two?
  prefs: []
  type: TYPE_NORMAL
- en: '**Everything we learned today can be applied to any data you want to visualize,**
    from economic reports to medical results or ad campaign insights. I chose to apply
    it to football because I’m deeply passionate about it, but please generalize the
    knowledge and apply it anywhere.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Knowing how to place two plots, we can create many, many more. And different
    ones: one showing assists, another showing the player’s influence on the pitch,
    the comparison between his goals and the expected… And with all this plus a little
    bit of HTML and CSS, we get the final dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0977fd4baf87daa88d2d500cdf6bd411.png)'
  prefs: []
  type: TYPE_IMG
- en: Final dashboard — image by the author
  prefs: []
  type: TYPE_NORMAL
- en: I really hope you can see how good this tool is.
  prefs: []
  type: TYPE_NORMAL
- en: Dash and Plotly must be in any data analyst’s skillset. They are amazing libraries
    we can use to share our data and insights in a way that’s highly customized —
    i.e. adapted to your needs — and easy to comprehend.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] [Plotly: Low-code Data App Development](https://plotly.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] [Dash Documentation and User Guide — Plotly](https://dash.plotly.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] [Free Data | StatsBomb](https://statsbomb.com/what-we-do/hub/free-data/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] [Pipenv: Python Dev Workflow for Humans](https://pipenv.pypa.io/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[5] [Plotly & Dash Project Code — GitHub](https://github.com/polmarin/plotly-dash)'
  prefs: []
  type: TYPE_NORMAL
