- en: Build Reliable Machine Learning Pipelines with Continuous Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/build-reliable-machine-learning-pipelines-with-continuous-integration-ea822eb09bf6](https://towardsdatascience.com/build-reliable-machine-learning-pipelines-with-continuous-integration-ea822eb09bf6)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Automate Machine Learning Workflow with Continuous Integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://khuyentran1476.medium.com/?source=post_page-----ea822eb09bf6--------------------------------)[![Khuyen
    Tran](../Images/98aa66025ad29b618e875c75f1c400a5.png)](https://khuyentran1476.medium.com/?source=post_page-----ea822eb09bf6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ea822eb09bf6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ea822eb09bf6--------------------------------)
    [Khuyen Tran](https://khuyentran1476.medium.com/?source=post_page-----ea822eb09bf6--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ea822eb09bf6--------------------------------)
    ·8 min read·Apr 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Scenario
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a data scientist, you are responsible for improving the model currently in
    production. After spending months fine-tuning the model, you discover one with
    greater accuracy than the original.
  prefs: []
  type: TYPE_NORMAL
- en: Excited by your breakthrough, you create a pull request to merge your model
    into the main branch.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/480d636e81974aa7e60cbc4909caa2af.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, because of the numerous changes, your team takes over a week
    to evaluate and analyze them, which ultimately impedes project progress.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, after deploying the model, you identify unexpected behaviors resulting
    from code errors, causing the company to lose money.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0ee3976e144e82d05820476edb13c49d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: In retrospect, **automating code and model testing after submitting a pull request**
    would have prevented these problems and saved both time and money.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous Integration (CI) offers an easy solution for this issue.
  prefs: []
  type: TYPE_NORMAL
- en: What is CI?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CI is the practice of continuously merging and testing code changes into a
    shared repository. In a machine learning project, CI can be very useful for several
    reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Catching errors early**: CI facilitates the early identification of errors
    by automatically testing any code changes made, enabling timely problem detection
    during the development phase'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ensuring reproducibility**: CI helps ensure reproducibility by establishing
    clear and consistent testing procedures, making it easier to replicate machine
    learning project results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Faster feedback and decision-making**: By providing clear metrics and parameters,
    CI enables faster feedback and decision-making, freeing up reviewer time for more
    critical tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/7ad0988b1e5ca2dd147253bbabbeea78.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: This article will show you how to create a CI pipeline for a machine-learning
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Feel free to play and fork the source code of this article here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/khuyentran1401/cicd-mlops-demo/?source=post_page-----ea822eb09bf6--------------------------------)
    [## GitHub - khuyentran1401/cicd-mlops-demo: Demo for CI/CD in a machine learning
    project'
  prefs: []
  type: TYPE_NORMAL
- en: This is a sample project for the article Build Reliable Machine Learning Pipelines
    with Continuous Integration. CI/CD…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/khuyentran1401/cicd-mlops-demo/?source=post_page-----ea822eb09bf6--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: CI Pipeline Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The approach to building a CI pipeline for a machine-learning project can vary
    depending on the workflow of each company. In this project, we will create one
    of the most common workflows to build a CI pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: Data scientists make changes to the code, creating a new model locally.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Data scientists push the new model to remote storage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Data scientists create a pull request for the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A CI pipeline is triggered to test the code and model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If changes are approved, they are merged into the main branch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/4b234810e2c2f263d5f6bade18a230a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s illustrate an example based on this workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Build the Workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose experiment C performs exceptionally well after trying out various processing
    techniques and ML models. As a result, we aim to merge the code and model into
    the main branch.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/90ccc7411ef02e9442fbc2d5a203afd6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'To accomplish this, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Version the inputs and outputs of the experiment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload the model and data to remote storage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create test files to test the code and model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a GitHub workflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/90d224dae16bbd987f44527ccb0e5ffa.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s explore each of these steps in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Version inputs and outputs of an experiment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the DVC to version inputs and outputs of an experiment of a pipeline,
    including code, data, and model.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/dvc-github-actions-automatically-rerun-modified-components-of-a-pipeline-a3632519dc42?source=post_page-----ea822eb09bf6--------------------------------)
    [## DVC + GitHub Actions: Automatically Rerun Modified Components of a Pipeline'
  prefs: []
  type: TYPE_NORMAL
- en: A Perfect Combo to Quickly Iterate on Your DS Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/dvc-github-actions-automatically-rerun-modified-components-of-a-pipeline-a3632519dc42?source=post_page-----ea822eb09bf6--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'The pipeline is defined based on the file locations in the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/36ec196ec3b019a9b1cc1fd0ba661fc1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'We will describe the [stages](https://dvc.org/doc/command-reference/stage)
    of the pipeline and the data dependencies between them in the `dvc.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To run an experiment pipeline defined in `dvc.yaml` , type the following command
    on your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The run will automatically generate the `dvc.lock` file that stores the **exact
    versions** of the data, code, and dependencies between them. Using the same versions
    of the inputs and outputs makes sure that the same experiment can be reproduced
    in the future.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Upload data and model to a remote storage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DVC makes it easy to upload data files and models produced by the pipeline stages
    in the `dvc.yaml` file to a remote storage location.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/introduction-to-dvc-data-version-control-tool-for-machine-learning-projects-7cb49c229fe0?source=post_page-----ea822eb09bf6--------------------------------)
    [## Introduction to DVC: Data Version Control Tool for Machine Learning Projects'
  prefs: []
  type: TYPE_NORMAL
- en: Just like Git, but with Data!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/introduction-to-dvc-data-version-control-tool-for-machine-learning-projects-7cb49c229fe0?source=post_page-----ea822eb09bf6--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Before uploading our files, we will specify the remote storage location in
    the file `.dvc/config` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Make sure to replace the URI of your S3 bucket with the “read-write” remote
    storage URI.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/06af2e597cd8ad020588bd02b6c9db80.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Push files to the remote storage location named “read-write”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Create tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will also generate tests that verify the performance of the code responsible
    for processing data, training the model, and the model itself, ensuring that the
    code and model meet our expectations.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/12bfd1f122812338a9ed526557157be8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: View all test files [here](https://github.com/khuyentran1401/cicd-mlops-demo/tree/ci-main/tests).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Create a GitHub workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now it comes to the exciting part: Creating a GitHub workflow to automate the
    testing of your data and model! If you are not familiar with GitHub workflow,
    I recommend reading [this article](https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions)
    for a quick overview.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create the workflow called `Test code and model` in the file `.github/workflows/run_test.yaml`
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/832e1e28a72d976f8a3684ed0ad86373.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `on` field specifies that the pipeline is triggered on a pull request event.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `test_model` job includes the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Checking out the code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the Python environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pulling data and models from a remote storage location using DVC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running tests using pytest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluating the model using DVC experiments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the [Iterative CML](https://cml.dev/) (Continuous Machine Learning)
    environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a report with metrics and parameters, and commenting on the pull request
    with the report using CML.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note that for the job to function properly, it requires the following:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS credentials to pull the data and model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GitHub token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)
    to comment on the pull request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To ensure the secure storage of sensitive information in our repository and
    enable GitHub Actions to access them, we will use [encrypted secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e005a07a25beb1c49d4b05bcce81d060.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: That’s it! Now let’s try out this project and see if it works as we expected.
  prefs: []
  type: TYPE_NORMAL
- en: Try it Out
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To try out this project, start with creating a new repository using the project
    template.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/196074be00df234d18b6a2c1b126c908.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clone the repository to your local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Set up the environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Pull data from the remote storage location called “read”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Create experiments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The GitHub workflow will be triggered if any changes are made to the `params.yaml`
    file or files in the `src` and `tests` directories. To illustrate this, we will
    make some minor changes to the `params.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4657d69d2f9301bc395cb30f5a7601a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s create a new experiment with the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Push the modified data and model to remote storage called “read-write”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add, commit, and push changes to the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Create a pull request
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, create a pull request by clicking the Contribute button.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/22641cfa0bc1b0398282eb04bf9d39b3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: After creating a pull request in the repository, a GitHub workflow will be triggered
    to run tests on the code and model.
  prefs: []
  type: TYPE_NORMAL
- en: If all the tests pass, a comment will be added to the pull request, containing
    the metrics and parameters of the new experiment.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8d7d6169e49607307b6b2316ae3441ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: This information makes it easier for reviews to understand the changes made
    to the code and model. As a result, they can quickly evaluate whether the changes
    meet the expected performance criteria and decide whether to approve the PR for
    merging into the main branch. How cool is that?
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You have just learned how to create a CI pipeline for your
    machine-learning project. I hope this article will give you the motivation to
    create your own CI pipeline to ensure a reliable machine-learning workflow.
  prefs: []
  type: TYPE_NORMAL
- en: I love writing about data science concepts and playing with different data science
    tools. You can connect with me on [LinkedIn](https://www.linkedin.com/in/khuyen-tran-1401/)
    and [Twitter](https://twitter.com/KhuyenTran16).
  prefs: []
  type: TYPE_NORMAL
- en: 'Star [this repo](https://github.com/khuyentran1401/Data-science) if you want
    to check the code for the articles I have written. Follow me on Medium to stay
    notified about my latest data science articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/build-a-full-stack-ml-application-with-pydantic-and-prefect-915f00fe0c62?source=post_page-----ea822eb09bf6--------------------------------)
    [## Build a Full-Stack ML Application With Pydantic And Prefect'
  prefs: []
  type: TYPE_NORMAL
- en: Create a UI for ML Feature Engineering in One Line of Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/build-a-full-stack-ml-application-with-pydantic-and-prefect-915f00fe0c62?source=post_page-----ea822eb09bf6--------------------------------)
    [](/how-to-structure-an-ml-project-for-reproducibility-and-maintainability-54d5e53b4c82?source=post_page-----ea822eb09bf6--------------------------------)
    [## How to Structure an ML Project for Reproducibility and Maintainability
  prefs: []
  type: TYPE_NORMAL
- en: Start Your Next ML Project With This Template
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-structure-an-ml-project-for-reproducibility-and-maintainability-54d5e53b4c82?source=post_page-----ea822eb09bf6--------------------------------)
    [](/4-pre-commit-plugins-to-automate-code-reviewing-and-formatting-in-python-c80c6d2e9f5?source=post_page-----ea822eb09bf6--------------------------------)
    [## 4 pre-commit Plugins to Automate Code Reviewing and Formatting in Python
  prefs: []
  type: TYPE_NORMAL
- en: Write High-Quality Code with black, flake8, isort, and interrogate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/4-pre-commit-plugins-to-automate-code-reviewing-and-formatting-in-python-c80c6d2e9f5?source=post_page-----ea822eb09bf6--------------------------------)
    [](/pytest-for-data-scientists-2990319e55e6?source=post_page-----ea822eb09bf6--------------------------------)
    [## Pytest for Data Scientists
  prefs: []
  type: TYPE_NORMAL
- en: A Comprehensive Guide to Pytest for your Data Science Projects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/pytest-for-data-scientists-2990319e55e6?source=post_page-----ea822eb09bf6--------------------------------)
  prefs: []
  type: TYPE_NORMAL
