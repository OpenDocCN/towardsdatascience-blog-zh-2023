["```py\nfrom dataclasses import dataclass\nfrom pathlib import Path\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n#these are the key libraries for solving the problem\nfrom scipy.interpolate import interp1d\nfrom scipy.optimize import root_scalar\n\n#set plotting defaults\nplt.style.use('seaborn-v0_8-darkgrid')\nplt.rcParams['font.family'] = 'Times New Roman'\nplt.rcParams['font.size'] = 12\nfigsize = (6.4,4)\n\n#make folder to save plots to\nplots_folder = Path('plots')\nplots_folder.mkdir(exist_ok=True)\n\n#define conversion constants for ease of use later\nINCHES_TO_METERS = 25.4/1000\nFEET_TO_METERS = 12*INCHES_TO_METERS\nGALLONS_TO_M3 = 0.0037854118 #convert gallons to m^3\n```", "```py\n@dataclass\nclass Fluid():\n    #fluid defaults to water properties\n    rho: float = 997 #kg/m^3\n    mu: float = 0.0007972 #N-s/m^2 = kg/m-s\n    g: float = 9.81 #m/s^2\n```", "```py\nclass Pipe():\n\n    def __init__(self, L, D, epsilon, fluid: Fluid):\n\n        #pipe dimensions are all assumed to be in meters\n        self.L = L\n        self.D = D\n        self.epsilon= epsilon\n\n        #fluid properties\n        self.fluid = fluid\n\n    @property\n    def A(self):\n        \"\"\"computes cross-sectional area of pipe in m^2\"\"\"\n\n        return np.pi*(self.D/2)**2 #area in m^2\n\n    def Q_to_v(self, gpm):\n        \"\"\"Converts gpm to fluid speed in pipe in m/s\"\"\"\n\n        Q = gpm*GALLONS_TO_M3/60 #flow rate in m^3/s\n        return  Q/self.A #flow velocity in m/s\n\n    def friction_factor(self, gpm):\n        \"\"\"computes Darcy friction factor, given flow rate in gpm\n\n        This method uses Haaland's equation, wich is an explicit approximation\n        of the well-known, but implicit Colebrook equation\n        \"\"\"\n        #first get flow velocity from flow rate and pipe dimensions\n        v = self.Q_to_v(gpm)\n        #compute Reynold's number\n        Re = self.fluid.rho*v*self.D/self.fluid.mu\n        #compute relative roughness\n        e_over_d = self.epsilon/self.D\n        #use Haaland's equation\n        f = (-1.8*np.log10((e_over_d/3.7)**1.11 + 6.9/Re))**-2\n        return f\n\n    def head_loss(self, gpm):\n        \"\"\"computes head loss in meters, given flow rate in gpm\"\"\"\n\n        #get flow velocity\n        v = self.Q_to_v(gpm)\n        #get Darcy friction factor\n        f = self.friction_factor(gpm)\n        #compute head loss in meters\n        hl = 0.5*f*(self.L/self.D)*v**2/self.fluid.g\n        return hl\n\n    def head_loss_feet(self, gpm):\n        \"\"\"computes head loss in feet, given flow rate in gpm\"\"\"\n\n        hl_meters = self.head_loss(gpm)\n        return hl_meters/FEET_TO_METERS\n```", "```py\n#create fluid object for water\nwater = Fluid()\n\n#create pipe segment with water flowing in it\npipe = Pipe(L=100*FEET_TO_METERS, \n            D=1.25*INCHES_TO_METERS, \n            epsilon=0.00006*INCHES_TO_METERS,\n            fluid=water)\n```", "```py\ngpm_arr = np.linspace(1,30,100)\nhl = [pipe.head_loss_feet(gpm) for gpm in gpm_arr]\n\nfig, ax = plt.subplots(figsize=figsize)\nax.plot(gpm_arr, hl)\nax.set_xlabel('Flow Rate [gpm]')\nax.set_ylabel('Head Loss [ft]')\nfig.tight_layout()\nfig.savefig(plots_folder/'pipe_loss_curve.png')\n```", "```py\nclass Pump():\n\n    def __init__(self, file):    \n        #store file name\n        self.file = file \n        #read data into pandas dataframe and assign column names\n        self.data = pd.read_csv(file, names=['gpm', 'head [ft]']).set_index('gpm')\n        #create continuous interpolation function\n        self._interp = interp1d(self.data.index.to_numpy(), self.data['head [ft]'].to_numpy())\n\n    @property\n    def bounds(self):\n        \"\"\"returns min and max flow rates in pump curve data\"\"\"\n        return [self.data.index.min(), self.data.index.max()]\n\n    def head_gain_feet(self, gpm):\n        \"\"\"return head (in feet) produced by the pump at a given flow rate\"\"\"\n        return self._interp(gpm)\n```", "```py\npump = Pump('pump_data.csv')\npump.data.head()\n```", "```py\nhead_loss = [pipe.head_loss_feet(gpm) for gpm in pump.data.index]\n\nfig, ax = plt.subplots(figsize=figsize)\nax.plot(pump.data, label='Pump Curve')\nax.plot(pump.data.index, head_loss, label='Pipe Head Loss')\nax.set_xlabel(\"Flow Rate [gpm]\")\nax.set_ylabel(\"Head [ft]\")\nax.legend(frameon=True, facecolor='w', framealpha=1, loc=6)\nfig.tight_layout()\nfig.savefig(plots_folder/'pump_curve_with_losses.png')\n```", "```py\nclass System():\n\n    def __init__(self, pipe: Pipe, pump: Pump):\n        self.pipe = pipe\n        self.pump = pump\n\n    def residual(self, gpm):\n        \"\"\"\n        Computes the difference between the head produced by the pump\n        and the head loss in the pipe. At steady state, the pump head and \n        head loss will be equal and thus the residual function will go to zero\n        \"\"\"\n        return self.pump.head_gain_feet(gpm) - self.pipe.head_loss_feet(gpm)\n\n    def get_operating_point(self):\n        \"\"\"solve for the flow rate where the residual function equals zero. \n        i.e. the pump head equals the pipe head loss\"\"\"\n        return root_scalar(self.residual, bracket=self.pump.bounds)\n```", "```py\nsys = System(pipe, pump)\n\nres = sys.get_operating_point()\nres\n```", "```py\nhead_loss = [pipe.head_loss_feet(gpm) for gpm in pump.data.index]\n\nfig, ax = plt.subplots(figsize=figsize)\nax.plot(pump.data, label='Pump Curve')\nax.plot(pump.data.index, head_loss, label='Pipe Head Loss')\n#plot vertical line at operating point\nax.axvline(res.root, color='k', ls='--', lw=1)\nax.legend(frameon=True, facecolor='white', framealpha=1, loc=6)\nax.set_xlabel(\"Flow Rate [gpm]\")\nax.set_ylabel(\"Head [ft]\")\nax.set_title(f'Operating Point = {res.root:.1f} gpm')\nfig.tight_layout()\nfig.savefig(plots_folder/'intersection_solution.png')\n```", "```py\n#sweep pipe length from 100 to 1000 feet\nlengths_feet = np.linspace(100, 1000, 1000)\nlengths_meters = lengths_feet*FEET_TO_METERS\n\nflow_rates = []\nfor l in lengths_meters:\n    #update pipe length\n    sys.pipe.L = l \n    #compute new flow rate solution\n    res = sys.get_operating_point()\n    #append solution to flow rates list\n    flow_rates.append(res.root) \n\n#plot results\nfig, ax = plt.subplots(figsize=figsize)\nax.plot(lengths_feet, flow_rates)\nax.set_xlabel(\"Pipe Length [ft]\")\nax.set_ylabel(\"Flow Rate [gpm]\")\n# ax.set_ylim(bottom=0)\nfig.tight_layout()\nfig.savefig(plots_folder/'flow_vs_pipe_length.png')\n```"]