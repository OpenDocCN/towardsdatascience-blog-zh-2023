- en: Deep Understanding of Simple Linear Regression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/deep-understanding-of-simple-linear-regression-3776afe34473](https://towardsdatascience.com/deep-understanding-of-simple-linear-regression-3776afe34473)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Linear Regression from Scratch: Detailed Explanation'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://zubairhossain.medium.com/?source=post_page-----3776afe34473--------------------------------)[![Md.
    Zubair](../Images/1b983a23226ce7561796fa5b28c00d65.png)](https://zubairhossain.medium.com/?source=post_page-----3776afe34473--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3776afe34473--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3776afe34473--------------------------------)
    [Md. Zubair](https://zubairhossain.medium.com/?source=post_page-----3776afe34473--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3776afe34473--------------------------------)
    ·6 min read·Jan 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/63a803bc5e9f35621b832e0a453e5409.png)'
  prefs: []
  type: TYPE_IMG
- en: Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Machine learning is a process by which machines can learn from the data and
    take a rational decision on new data without explicit programming. The base of
    these models is mathematics and statistics. Linear regression is one of the simple
    and widely used regression algorithms. The regression algorithms predict continuous
    values.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we want to predict the price, age, weight, etc. Such types of values
    are not countable. That’s why these are known as continuous values. If you are
    still confused, I suggest you to read the [**article**](https://medium.com/towards-data-science/get-familiar-with-the-most-important-weapon-of-data-science-variables-48cc7cd85dc5).
  prefs: []
  type: TYPE_NORMAL
- en: Table of Content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`[**What is the regression problem in Machine Learning?**](#9272)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[**When do we use simple linear regression?**](#9579)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[**Simple linear regression in detail**](#9188)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[**Hands-on implementation with python**](#f03f)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the regression problem in Machine Learning?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In data science, machine learning algorithms are used to automate a system.
    In practice, there are mainly two types of problems — ***i. Supervised, and ii.
    Unsupervised.***
  prefs: []
  type: TYPE_NORMAL
- en: In the supervised problem, the training dataset is labelled. That means the
    algorithm has a target value. The supervised learning algorithm tries to predict
    the values like target values and optimizes its parameters accordingly. But in
    the unsupervised problem, there is no target value in the training dataset. The
    unsupervised learning algorithm tries to find the similarity among the data and
    train the model accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Supervised problems can be further classified into two categories — ***i. Classification,
    and ii. Regression.* Classification** problems are those problems which need to
    predict categorical values. On the contrary, **regression** problems work with
    continuous values.
  prefs: []
  type: TYPE_NORMAL
- en: When do we use simple linear regression?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I want to introduce linear regression before simple linear regression. Linear
    regression is a process of finding the regression output by fitting a regression
    line. It only works when our data is linearly distributed.
  prefs: []
  type: TYPE_NORMAL
- en: '`Simple or univariate linear regression is a regression process when there
    is only one independent variable or feature.` *There is also multivariate linear
    regression. I will discuss it in the upcoming article.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**When to use —**'
  prefs: []
  type: TYPE_NORMAL
- en: Simple linear regression is best suited when the data is linearly distributed,
    containing only one feature or independent variable.
  prefs: []
  type: TYPE_NORMAL
- en: Simple linear regression in detail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Simple linear regression only accepts one independent variable. *Look at the
    simple equation of a straight line.*
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dc943ed77a7815cfa713c149c4c917f8.png)'
  prefs: []
  type: TYPE_IMG
- en: '`In linear regression, the equation is called *the regression line equation.
    Here, m and c are the coefficients. m represents the slope of the regression line,
    and c is the constant value that represents the intersection point of the y-axis
    for the regression line. x represents the independent variable, and y is the dependent
    variable.*` Let’s make it more clear with the following diagram.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/63a803bc5e9f35621b832e0a453e5409.png)'
  prefs: []
  type: TYPE_IMG
- en: Simple Linear Regression (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Simple linear regression deals with one independent variable (x) and one dependent
    variable (y). The independent variable is the input value, and the dependent variable
    is the output or target value.
  prefs: []
  type: TYPE_NORMAL
- en: Look at the image and let me explain the process step by step. The`**x-axis**`
    represents the independent variable’s value, and the `**y-axis**` represents the
    dependent variable’s value. Black dots are the scatter plots of the training data
    points, and the data seem linearly distributed. These data will be needed to train
    the regression model’s parameters. For doing so, we will fit a straight line through
    the scatter plot, and the cumulative distance from the regression line is reasonably
    minimum. If we find the best regression line, we will get the predicted value
    easily by putting the `**x**` value. For a new data point, drawing a vertical
    straight line will intersect the regression line. The predicted value will be
    the intersection point of the y-axis if we draw a horizontal line from the intersection
    point of the regression line. For fitting the best regression line, finding the
    coefficient value of `**m**`and `**c**` of the above equation is our main challenge.
  prefs: []
  type: TYPE_NORMAL
- en: Again, the regression line equation is `***y=mx+c***`***.*** We will get the
    value of x from the dataset, but ***m*** and ***c*** are unknown. Optimum values
    of `***m***` and `***c***` can produce an optimum prediction value of `***y***`.
  prefs: []
  type: TYPE_NORMAL
- en: For simple linear regression, we can find the slope `**m**` with the following
    formula.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bc0efbb2bbad20fcd58b9c20a4f53c2e.png)'
  prefs: []
  type: TYPE_IMG
- en: Putting the value of `**m**` to the following equation, we will find the optimum
    value of `**c**`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/65a2b7648dffccc1788e5b7ea4caff14.png)'
  prefs: []
  type: TYPE_IMG
- en: '*[In this process, there is a limitation. We can’t find the coefficient values
    by this manual formula if the independent values become more than one. In that
    case, we use gradient descent along with the cost function to find the optimum
    values. I will discuss it in the upcoming articles.]*'
  prefs: []
  type: TYPE_NORMAL
- en: Hands on implementation with python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Importing the necessary python libraries.
  prefs: []
  type: TYPE_NORMAL
- en: For any machine learning model, the dataset is the main fuel. `*We use the*
    [*Boston House Price*](https://www.cs.toronto.edu/~delve/data/boston/bostonDetail.html)
    *dataset, which is publicly available and licensed under the public domain.*`
    Download the dataset from [here](https://www.kaggle.com/code/prasadperera/the-boston-housing-dataset/data).
  prefs: []
  type: TYPE_NORMAL
- en: '*Let’s load the dataset.*'
  prefs: []
  type: TYPE_NORMAL
- en: Setting the column names as there is no column name in the main dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the Pearson correlation to select the highest correlated feature as
    an independent variable.
  prefs: []
  type: TYPE_NORMAL
- en: Our target value is `‘MEDV’` . From the above correlation graph, the `‘RM’`
    variable has the highest correlation, which is `0.7`. So, we pick the variable
    `‘RM’`. The full form of the variable is given below [].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Defining x and y.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Splitting the train and test set.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Defining the function to calculate the coefficient value of* `***m and c***`*.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Plotting the regression line.*'
  prefs: []
  type: TYPE_NORMAL
- en: Prediction function.
  prefs: []
  type: TYPE_NORMAL
- en: Actual vs predicted value for our dataset.
  prefs: []
  type: TYPE_NORMAL
- en: There are significant errors in our model for some values. This is because our
    dataset has many features, and we just consider only one feature for demonstration
    purposes as we are dealing with simple linear regression.
  prefs: []
  type: TYPE_NORMAL
- en: '*Let’s calculate the mean absolute error for our model.*'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In practice, there are many libraries and easiest ways to implement linear regression.
    But I prefer learning from the very basics because it’s beneficial for absolute
    beginners. I believe if our base is strong enough, we can construct a high-rise
    building on the base. Otherwise, there is a possibility of an unusual breakdown
    of the structure.
  prefs: []
  type: TYPE_NORMAL
- en: The article will assist a lot to beginners, and it will provide a solid base.
    The reader will come to know how simple learner regression works.
  prefs: []
  type: TYPE_NORMAL
- en: '*Full notebook is available* [***here***](https://github.com/Zubair063/ML_articles/tree/main/Simple%20Linear%20Regression)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: '`*[I am writing series of articles on machine learning algorithms implemented
    from scratch. You may read the previous articles on KNN and K-means clustering
    from the link below.]*`'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/knn-algorithm-from-scratch-37febe0c15b3?source=post_page-----3776afe34473--------------------------------)
    [## KNN Algorithm from Scratch'
  prefs: []
  type: TYPE_NORMAL
- en: Implementation and Details Explanation of the KNN Algorithm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/knn-algorithm-from-scratch-37febe0c15b3?source=post_page-----3776afe34473--------------------------------)
    [](/unsupervised-learning-and-k-means-clustering-from-scratch-f4e5e9947c39?source=post_page-----3776afe34473--------------------------------)
    [## K-means Clustering from Scratch
  prefs: []
  type: TYPE_NORMAL
- en: 'K-means: The Best ML Algorithm to Cluster Data'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/unsupervised-learning-and-k-means-clustering-from-scratch-f4e5e9947c39?source=post_page-----3776afe34473--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Boston Dataset (toronto.edu)](https://www.cs.toronto.edu/~delve/data/boston/bostonDetail.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
