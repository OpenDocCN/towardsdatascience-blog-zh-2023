["```py\n # Import libraries\nimport os\nimport openai\n\n# Pass API Key\nos.environ['OPENAI_API_KEY'] = 'YOUR_API_KEY'\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n```", "```py\nconfig = {\n ‘engine’: ‘ENGINE_NAME’,\n ‘system_prompt’: ‘SYSTEM_PROMPT’,\n ‘user_prompt’: ‘USER_PROMPT’,\n ‘temperature’: TEMPERATURE,\n ‘max_tokens’: MAX_TOKENS\n}\n```", "```py\n# Import libraries\nimport openai\n\n# Define the call function\ndef magicWand(config):\n    # Extract variables from the config dictionary\n    engine = config.get('engine', 'gpt-3.5-turbo')  # Default to 'gpt-3.5-turbo'\n    system_prompt = config.get('system_prompt', '')\n    user_prompt = config.get('user_prompt', '') \n    temperature = config.get('temperature', 0.8)\n    max_tokens = config.get('max_tokens', 100)\n\n    # Create an array of message objects\n    messages = [\n        {\"role\": \"system\", \"content\": system_prompt},\n        {\"role\": \"user\", \"content\": user_prompt}\n    ]\n\n    # Make the API call\n    response = openai.ChatCompletion.create(\n        model=engine,\n        messages=messages,\n        max_tokens=max_tokens,\n        temperature=temperature\n    )\n\n    # Extract and return the generated text\n    return response.choices[0].message['content'].strip()\n```", "```py\n# Create the config dictionary\nconfig = {\n    'system_prompt': 'You will be provided with a piece of code, and your task is to explain it in a concise way.',\n    'engine': 'gpt-4',\n    'temperature': 0,\n    'max_tokens': 2000,\n    'user_prompt': '''\nimport openai\n\ndef magicWand(config):\n    engine = config.get('engine', 'gpt-3.5-turbo')\n    system_prompt = config.get('system_prompt', '')\n    user_prompt = config.get('user_prompt', '') \n    temperature = config.get('temperature', 0.8)\n    max_tokens = config.get('max_tokens', 100)\n\n    messages = [\n        {\"role\": \"system\", \"content\": system_prompt},\n        {\"role\": \"user\", \"content\": user_prompt}\n    ]\n\n    response = openai.ChatCompletion.create(\n        model=engine,\n        messages=messages,\n        max_tokens=max_tokens,\n        temperature=temperature\n    )\n\n    return response.choices[0].message['content'].strip()\n    '''\n}\n\n# Use the config to get the result\nresult = magicWand(config)\n\n# Print the result\nprint(result)\n```", "```py\n# Import libraries\nfrom IPython.display import display, Image\nimport requests\n\n# Generate the response\nresponse = openai.Image.create(\n  prompt=\"A black Scottish fold cat with light golden eyes laying down on white sheets\",\n  n=1,\n  size=\"512x512\"\n)\n\n# Save the image URL\nimage_url = response['data'][0]['url']\n\n# Fetch the image\nresponse = requests.get(image_url)\n\n# Display the image\nimg = Image(data=response.content)\ndisplay(img)\n```", "```py\n# Create the config dictionary\nconfig = {\n    'engine': 'gpt-4',\n    'system_prompt': 'You will be provided with text, and your task is to translate it into emojis. Do not use any regular text. Do your best with emojis only.',\n    'user_prompt': 'Data science articles are fun',\n    'temperature': 0.8,\n    'max_tokens': 128\n}\n\n# Use the config to get the result\nresult = magicWand(config)\n\n# Print the results\nprint(result)\n```", "```py\nconfig = {\n    'engine': 'gpt-3.5-turbo',\n    'system_prompt':'You will be provided with statements, and your task is to convert them to standard English.',\n    'user_prompt':'she looks at sky yesterday whil brushed her hair',\n    'max_tokens':256\n}\n\nresult = magicWand(config)\n\nprint(result)\n```", "```py\nconfig = {\n    'engine': 'gpt-4',\n    'system_prompt':'You will be provided with statements, and your task is to convert them to standard English.',\n    'user_prompt':'she looks at sky yesterday whil brushed her hair',\n    'max_tokens':256\n}\n\nresult = magicWand(config)\n\nprint(result)\n```", "```py\nconfig = {\n    'engine': 'gpt-3.5-turbo',\n    'system_prompt':'You will be provided with a text, and your task is to extract the airport codes from it.',\n    'user_prompt':'I flew from Seattle to Boston in August.',\n    'max_tokens':256\n}\n\nresult = magicWand(config)\n\nprint(result)\n```", "```py\nconfig = {\n    'engine': 'gpt-4',\n    'system_prompt':'You will be provided with a text, and your task is to extract the airport codes from it.',\n    'user_prompt':'I flew from Seattle to Boston in August.',\n    'max_tokens':256\n}\n\nresult = magicWand(config)\n\nprint(result)\n```", "```py\nconfig = {\n    'engine': 'gpt-3.5-turbo',\n    'system_prompt':'You will be provided with a text, and your task is to extract the named-entities from it.',\n    'user_prompt':'I flew from Seattle to Boston in August. I remember I was wearing my brand new Nike shoes because I was so excited about them that I ended up leaving my iPhone in the yellow Camry cab.',\n    'max_tokens':256\n}\n\nresult = magicWand(config)\n\nprint(result)\n```", "```py\nconfig = {\n    'engine': 'gpt-4',\n    'system_prompt':'You will be provided with a text, and your task is to extract the named-entities from it.',\n    'user_prompt':'I flew from Seattle to Boston in August. I remember I was wearing my brand new Nike shoes because I was so excited about them that I ended up leaving my iPhone in the yellow Camry cab.',\n    'max_tokens':256\n}\n\nresult = magicWand(config)\n\nprint(result)\n```", "```py\nconfig = {\n    'engine': 'gpt-4',\n    'system_prompt':'You will be provided with a text, and your task is to translate it to French.',\n    'user_prompt':'Can you help me with this task?',\n    'max_tokens':128\n}\n\nresult = magicWand(config)\n\nprint(result)\n```", "```py\nconfig = {\n    'engine': 'gpt-4',\n    'system_prompt':'You will be provided with a text, and your task is to provide a nuanced sentiment analysis.',\n    'user_prompt':'That was such an exciting movie!',\n    'max_tokens':128\n}\n\nresult = magicWand(config)\n\nprint(result)\n```", "```py\nconfig = {\n    'engine': 'gpt-4',\n    'system_prompt':'You will be provided with a text, and your task is to provide a summary of it, without using the original words.',\n    'user_prompt':'Text summarization is the task of automatically summarizing textual input, while still conveying the main points and gist of the incoming text. One example of the business intuition behind the need for such summarization models is the situations where humans read incoming text communications (e.g. customer emails) and using a summarization model can save human time.',\n    'max_tokens':256\n}\n\nresult = magicWand(config)\n\nprint(result)\n```", "```py\nconfig = {\n    'engine': 'gpt-3.5-turbo',\n    'system_prompt':'You will be provided with unstructured data, and your task is to parse it into a Pandas dataframe.',\n    'user_prompt':'As I was walking around Mars a few days ago, I came across a group of Amazon employees. The first one, Jack, was originally from Boston and wore black pants with a white shirt and black running shoes. Another one, Jill, had a long indigo-colored dress on with light blue sandals and was originally from Seattle. The third one was named John. I cannot remember what he was wearing but I particularly recall that John was from Newark, New Jersey. The last individual was Jenna and she was from San Francisco. Jenna had a white t-shirt and blue pants on but I cannot recall her shoes.',\n    'max_tokens':1024\n}\n\nresult = magicWand(config)\n\nprint(result)\n```", "```py\nconfig = {\n    'engine': 'gpt-3.5-turbo',\n    'user_prompt':'Write a SQL query which returns a rank of the salaries overall and also by gender from highest to the lowest salary.',\n    'max_tokens':1024,\n    'system_prompt':'''\nGiven the following SQL tables, your job is to write queries given a user’ s request.\n\nDROP TABLE IF EXISTS salary;\n\nCREATE TEMPORARY TABLE salary(city VARCHAR(30), average_salary int);\n\nINSERT INTO\nsalary\nVALUES\n    ('san_francisco', '54500'),\n    ('seattle', '54100'),\n    ('new_york', '34400'),\n    ('phoenix', '31800');\n\nDROP TABLE IF EXISTS people;\n\nCREATE TEMPORARY TABLE people(\n    person_id int,\n    name VARCHAR(30),\n    gender VARCHAR(30),\n    location VARCHAR(30),\n    birth_year int,\n    birth_month VARCHAR(30),\n    birth_day int,\n    job_title VARCHAR(30),\n    salary int\n);\n\nINSERT INTO\npeople\nVALUES\n    (\n        '1',\n        'james',\n        'male',\n        'seattle',\n        '1984',\n        '9',\n        '15',\n        'software_developer',\n        '115000'\n    ),\n    (\n        '2',\n        'mary',\n        'female',\n        'new_york',\n        '1992',\n        '1',\n        '13',\n        'financial_analyst',\n        '183000'\n    ),\n    (\n        '3',\n        'john',\n        'male',\n        'san_francisco',\n        '1971',\n        '4',\n        '22',\n        'data_scientist',\n        '165000'\n    ),\n    (\n        '4',\n        'patricia',\n        'female',\n        'phoenix',\n        '1971',\n        '8',\n        '15',\n        'physician',\n        '215000'\n    ),\n    (\n        '5',\n        'michael',\n        'male',\n        'new_york',\n        '1966',\n        '1',\n        '13',\n        'retired',\n        '25000'\n    ),\n    (\n        '6',\n        'jennifer',\n        'female',\n        'phoenix',\n        '1994',\n        '12',\n        '12',\n        'data_scientist',\n        '165000'\n    );\n'''\n}\n\nresult = magicWand(config)\n\nprint(result)\n```"]