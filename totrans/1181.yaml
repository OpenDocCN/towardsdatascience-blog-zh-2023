- en: How to Extract Text from Any PDF and Image for Large Language Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-extract-text-from-any-pdf-and-image-for-large-language-model-2d17f02875e6](https://towardsdatascience.com/how-to-extract-text-from-any-pdf-and-image-for-large-language-model-2d17f02875e6)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use these text extraction techniques to get quality data for your LLM models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://zoumanakeita.medium.com/?source=post_page-----2d17f02875e6--------------------------------)[![Zoumana
    Keita](../Images/34a15c1d03687816dbdbc065f5719f80.png)](https://zoumanakeita.medium.com/?source=post_page-----2d17f02875e6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2d17f02875e6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2d17f02875e6--------------------------------)
    [Zoumana Keita](https://zoumanakeita.medium.com/?source=post_page-----2d17f02875e6--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2d17f02875e6--------------------------------)
    ·7 min read·Jul 25, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b75ec7ee88027665b818561aad71953d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Patrick Tomasso](https://unsplash.com/@impatrickt) on [Unsplash](https://unsplash.com/photos/Oaqk7qqNh_c)
  prefs: []
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Large language models have taken the internet by storm, leading more people
    to not pay close attention to the most important part of using these models: quality
    data!'
  prefs: []
  type: TYPE_NORMAL
- en: This article aims to provide a few techniques to efficiently extract text from
    any type of document. After completing this tutorial, you will have a clear idea
    of which tool to use depending on your use case.
  prefs: []
  type: TYPE_NORMAL
- en: Full Video Explanation on YouTube
  prefs: []
  type: TYPE_NORMAL
- en: The Python Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This article focuses on the Pytesseract, easyOCR, PyPDF2, and LangChain libraries.
    The experimentation data is a one-page PDF file and is freely available on my
    [GitHub](https://github.com/keitazoumana/Experimentation-Data/blob/main/Experimentation_file.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Both Pytesseract and easyOCR work with images hence requiring converting the
    PDF files into images before performing the content extraction.
  prefs: []
  type: TYPE_NORMAL
- en: 'The conversion can be done using the `pypdfium2` which is a powerful library
    for PDF file processing, and it is implementation is given below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This function takes a PDF as input and returns a list of each page of the PDF
    as a list of images.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can use the `display_images` function to visualize all the pages of
    the PDF file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'By combining the above two functions, we can get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a403ee31eaf0a83985388989519bd1fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualization of the PDF in image format (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Now it is time to dive deep into the text extraction process!
  prefs: []
  type: TYPE_NORMAL
- en: Pytesseract
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pytesseract (Python-tesseract) is an OCR tool for Python used to extract textual
    information from images, and the installation is done using the `pip` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The following helper function uses the `image_to_string()` function from `Pytesseract`
    to extract the text from the input image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The text can be extracted using the `extract_text_with_pytesseract` function
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Successful execution of the above code generates the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`Pytesseract` was able to extract the content of the image.'
  prefs: []
  type: TYPE_NORMAL
- en: Here is how it managed to do it!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Pytesseract` starts by identifying rectangular shapes within the input image
    from top-right to bottom-right. Then it extracts the content of the individual
    images, and the final result is the concatenation of those extracted content.
    This approach works perfectly when dealing with column-based PDFs and image documents.'
  prefs: []
  type: TYPE_NORMAL
- en: easyOCR
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is also an open-source Python library for Optical Character Recognition
    and currently supports the extraction of text written in over 80 languages. `easyocr`
    requires both `Pytorch` and `OpenCV` which can be installed using the below instruction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Depending on your OS, the installation of the Pytorch module might be different.
    But all the instructions can be found on the [official page](https://pytorch.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Now comes the installation of the `easyocr` library.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: It is important to specify the language of the document we are working with
    when using `easyocr` because of its multilanguage nature. Setting the language
    is done through its `Reader` module, by specifying the list of languages.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, `fr` for French, `en` for English. The exhaustive list of languages
    is available [here](https://www.jaided.ai/easyocr/).
  prefs: []
  type: TYPE_NORMAL
- en: With all this in mind, let's get into the process!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The text extraction process is implemented in the `extract_text_with_easyocr`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We can execute the above function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/79c085ae0f30e61fdd3369d3316ffee8.png)'
  prefs: []
  type: TYPE_IMG
- en: EasyOCR result (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: The result of `easyocr` seems less efficient compared to `Pytesseract` . For
    instance, it was able to efficiently read the first two paragraphs. However, instead
    of considering each bloc of text a separate text, it is reading using a row-based
    approach. For instance, the string ***Data Science section covers basic to advanced***
    from the first bloc has been combined with ***overfitting when training computer
    vision*** from the second bloc, and this kind of combination completely disorganizes
    the structure of the text and biases the end result.
  prefs: []
  type: TYPE_NORMAL
- en: PyPDF
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`PyPDF2` is also a Python library specifically for PDF processing tasks such
    as text and metadata retrieval, merging, cropping, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The extraction logic is implemented in the `extract_text_with_pyPDF` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/11cf6ca1c6763b3f336c2f365c177b1f.png)'
  prefs: []
  type: TYPE_IMG
- en: Text extraction with PyPDF library (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: The extract process is fast and accurate, and it even keeps the original font
    size. The main issue with PyPDF is that it can not efficiently extract text from
    images.
  prefs: []
  type: TYPE_NORMAL
- en: LangChain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `UnstructuredImageLoader` and `UnstructuredFileLoader` modules from [langchain](https://python.langchain.com/docs/get_started/introduction.html)
    can be used to extract text from images and text/pdf files respectively, and both
    options will be explored in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'But, first, we need to install the `langchain` library as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Text extraction from an image
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The text extraction function is given below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can extract the content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1371ef3704faac52caa42c8463480576.png)'
  prefs: []
  type: TYPE_IMG
- en: Text extraction from langchain UnstructuredImageLoader (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: The library managed to efficiently extract the content of the image.
  prefs: []
  type: TYPE_NORMAL
- en: Text extraction from a PDF
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Below is the implementation for content extraction from PDF.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Similarly to the `PyPDF` module, langchain module is capable of generating accurate
    results while keeping the original font size.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b3b54f052fe3aa01c4fe997a8ce5e481.png)'
  prefs: []
  type: TYPE_IMG
- en: Text extraction from langchain UnstructuredFileLoader (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This short tutorial provided a brief overview of some well-known libraries.
    Each one of them has their own strengths and weaknesses and should be wisely applied
    depending on the use case. The [complete code](https://github.com/keitazoumana/Medium-Articles-Notebooks/blob/main/OCR_Content_Extraction.ipynb)
    is available on my GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this short tutorial helped you acquire new skill sets.
  prefs: []
  type: TYPE_NORMAL
- en: Also, If you like reading my stories and wish to support my writing, consider
    [becoming a Medium member](https://zoumanakeita.medium.com/membership). With a
    $ 5-a-month commitment, you unlock unlimited access to stories on Medium.
  prefs: []
  type: TYPE_NORMAL
- en: Would you like to buy me a coffee ☕️? → [Here you go](http://www.buymeacoffee.com/zoumanakeig)!
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to follow me on [Medium](https://zoumanakeita.medium.com/), [Twitter](https://twitter.com/zoumana_keita_),
    and [YouTube](https://www.youtube.com/channel/UC9xKdy8cz6ZuJU5FTNtM_pQ), or say
    Hi on [LinkedIn](https://www.linkedin.com/in/zoumana-keita/). It is always a pleasure
    to discuss AI, ML, Data Science, NLP, and MLOps stuff!
  prefs: []
  type: TYPE_NORMAL
