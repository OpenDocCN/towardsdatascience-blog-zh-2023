- en: Getting Started with NumPy and OpenCV for Computer Vision (CV-01)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68](https://towardsdatascience.com/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Start Your Coding for Computer vision with Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://zubairhossain.medium.com/?source=post_page-----555f88536f68--------------------------------)[![Md.
    Zubair](../Images/1b983a23226ce7561796fa5b28c00d65.png)](https://zubairhossain.medium.com/?source=post_page-----555f88536f68--------------------------------)[](https://towardsdatascience.com/?source=post_page-----555f88536f68--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----555f88536f68--------------------------------)
    [Md. Zubair](https://zubairhossain.medium.com/?source=post_page-----555f88536f68--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----555f88536f68--------------------------------)
    ·8 min read·Mar 15, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a1f29b1c045ba48aeb7b58ca7d9aece1.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Dan Smedley](https://unsplash.com/@nadyeldems?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We, human beings, perceive the environment and surroundings with our vision
    system. The human eye, brain, and limbs work together to perceive the environment
    and act accordingly. An intelligent system can perform those tasks which require
    some level of intelligence if done by a human. So, for performing intelligent
    tasks, artificial vision system is one of the important things for a computer.
    Normally, the camera and image are used to gather information needed to do the
    job. Computer vision and Image processing techniques help us to perform similar
    tasks done by humans, like image recognition, object tracking, etc.
  prefs: []
  type: TYPE_NORMAL
- en: In computer vision, the camera works as a human eye to capture the image, and
    the processor works as a brain to process the captured image and generate significant
    results. But there is a basic difference between humans and computers. The human
    brain works automatically, and intelligence is a by-born acquisition. On the contrary,
    the computer has no intelligence without human instruction (program). Computer
    vision is the way to provide the appropriate instruction so that it can work compatible
    with the human vision system. But the capacity is limited.
  prefs: []
  type: TYPE_NORMAL
- en: '`*In the upcoming sections, we will discuss the basic idea of how the image
    is formed and can be manipulated using python.*`'
  prefs: []
  type: TYPE_NORMAL
- en: Table of Contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`*Click on the Contents and Directly Land on the Section*`'
  prefs: []
  type: TYPE_NORMAL
- en: '`[**How Image is Formed and Displayed**](#ad63)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[**How does Computer Store Image in the Memory?**](#bf87)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[**Grayscale and Colored Image**](#c49f)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[**NumPy Basics to Work with Image**](#d58c)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[**OpenCV Basics**](#3075)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[**Play with NumPy**](#9734)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How Image is Formed and Displayed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The image is nothing but a combination of pixels with different color intensities.
    The jargon ‘pixels’ and ‘color intensity’ may be unknown to you. Don’t worry.
    It will be crystal clear, just read the article till the end.
  prefs: []
  type: TYPE_NORMAL
- en: '**Pixel** is the smallest unit/element of the digital image. Details are in
    the image below.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/760bb7c8723d0bd48ae408ef43565950.png)'
  prefs: []
  type: TYPE_IMG
- en: Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: The display is formed with pixels. In the above figure, there are 25 columns
    and 25 rows. Each small square is considered a pixel. The setup can house 625
    pixels. It represents a display with 625 pixels. If we shine the pixels with different
    **color intensity** (brightness), it will form a digital image.
  prefs: []
  type: TYPE_NORMAL
- en: '**How does the computer store the image in the memory?**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we look at the image carefully, we can compare it with a 2D matrix. A matrix
    has rows and columns, and its elements can be addressed with its index. The matrix
    structure is similar to an array. And computer store the image in an array of
    computer memory.
  prefs: []
  type: TYPE_NORMAL
- en: Each array element holds the **intensity** value of a color. Generally, the
    intensity value ranges from `**0 to 255**`. For demonstration purposes, I have
    included an array representation of an image.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/854daf2155323f2f5cdde6fad18b0a80.png)'
  prefs: []
  type: TYPE_IMG
- en: Sample Array Representation of a Grayscale Image (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: Grayscale and Colored Image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**The grayscale** image is a black-and-white image. It is formed with only
    one color. A pixel value close to 0 represents darkness and becomes brighter with
    higher intensity values. The highest value is 255, which represents the white
    color. A 2D array is sufficient to hold the grayscale image, as the last figure
    shows.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Colored images** can’t be formed with only one color; there might be hundreds
    of thousands of color combinations. Mainly, there are three primary color channels
    `**RED (R), GREEN(G), and Blue(B)**`. And each color channel is stored in a *2D
    array* and holds its intensity values, and the final image is the combination
    of these three color channels.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c59a3df10731dbae40ebf5e3ea60d76b.png)'
  prefs: []
  type: TYPE_IMG
- en: RGB Color Channel (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: This color model has (256 x 256 x 256) = 16,777,216 possible color combinations.
    `[***You may visualize the combination here.***](https://csunplugged.jp/csfg/data/interactives/rgb-mixer/index.html)`
  prefs: []
  type: TYPE_NORMAL
- en: But in computer memory, the image is stored differently.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/357d8039806f954a8e72102e575d233f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Stored in Computer Memory (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: The computer doesn’t know the RGB channels. It knows the intensity value. The
    red channel is stored with high intensity, and the green and blue channels are
    stored with medium and low-intensity values, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: NumPy Basics to Work with Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NumPy is a fundamental python package for scientific computation. It works mainly
    as an array object, but its operation isn’t limited to the array. However, the
    library can handle various numeric and logical operations on numbers [1]. `You
    will get NumPy official documentation [***here***](https://numpy.org/doc/stable/user/absolute_beginners.html).`
  prefs: []
  type: TYPE_NORMAL
- en: '*Let’s start our journey. First thing first.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Importing the NumPy library.***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s time to work with NumPy. As we know, NumPy works with an array. So, let’s
    try to create our first 2D array of all zeros.
  prefs: []
  type: TYPE_NORMAL
- en: '***Creating NumPy Array***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s as simple as that. We can also create a NumPy array with all ones just
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, NumPy also provides a method to fill the array with any values.
    The simple syntax `array.fill(value)` can do the job.
  prefs: []
  type: TYPE_NORMAL
- en: The array `‘b’` with all ones is now filled with `3`.
  prefs: []
  type: TYPE_NORMAL
- en: '***The Function of Seed in case of Random Number Generation***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Just have a look at the following coding examples.
  prefs: []
  type: TYPE_NORMAL
- en: In the first code cell, we have used `**np.random.seed(seed_value)**`, but we
    haven’t used any seeding for the other two code cells. There is a major difference
    between random number generation with and without seeding. In the case of random
    seeding, the generated random number remains the same for a specific seed value.
    On the other hand, without a seed value, random number changes for each execution.
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic operations (max, min, mean, reshape, etc.) with NumPy**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NumPy has made our life easier by providing numerous functions to do mathematical
    operations. `array_name.min(), array_name.max(), array_name.mean()` syntaxes help
    us find an array’s minimum, maximum, and mean values. *Coding example —*
  prefs: []
  type: TYPE_NORMAL
- en: Indeies of the minimum and maximum values can be extracted with the syntaxes
    `array_name.argmax(), array_name.argmin()`. *Example —*
  prefs: []
  type: TYPE_NORMAL
- en: Array reshaping is one of the important operations of `NumPy. array_name.reshape(row_no,
    column_no)` is the syntax for reshaping an array. While reshaping the array, we
    must be careful about the number of array elements before and after reshaping.
    In both cases, the total number of elements must be the same.
  prefs: []
  type: TYPE_NORMAL
- en: '**Array Indexing and Slicing**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each array element can be addressed with its `column and row` number. Let’s
    generate another array with 10 rows and columns.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we want to find the value of the first value of the array. It can be
    extracted by passing the row and column index (0 , 0).
  prefs: []
  type: TYPE_NORMAL
- en: Specific row and column values can be sliced with the syntax `array_name[row_no,:],
    array_name[:,column_no].`
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try to slice the central elements of the array.
  prefs: []
  type: TYPE_NORMAL
- en: OpenCV Basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**OpenCV** is an open-source python library for Computer Vision developed by
    Intel [2]. I will discuss a few usages of OpvenCv though its scope is vast. `You
    will find the official documentation [**here**](https://docs.opencv.org/4.x/d6/d00/tutorial_py_root.html).`'
  prefs: []
  type: TYPE_NORMAL
- en: '`I have used the following image for demonstration purposes.`'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/65956af1e9aa9a01bfa553246358120a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [jackouille21](https://pixabay.com/users/jackouille21-34177786/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7834580)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7834580)
  prefs: []
  type: TYPE_NORMAL
- en: '**Importing OpenCV and Matplotlib library**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matplotlib is a visualization library. It helps to visualize the image.
  prefs: []
  type: TYPE_NORMAL
- en: '**Loading the image with OpenCV and visualize with matplotlib**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have read the image with **OpenCV** and visualized it with the **matplotlib**
    library. The color has been changed because **OpenCV** reads the image in **BGR**
    format instead of **RGB**, but **matplotlib** expects the image in **RGB** format.
    So, we need to convert the image from **BGR to RGB**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Converting the image from BGR to RGB format**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, the image seems okay.
  prefs: []
  type: TYPE_NORMAL
- en: '**Converting image to grayscale**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can easily convert the image from BGR to grayscale with `cv2.COLOR_BGR2GRAY`
    is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: The above image is not properly gray though it has been converted to grayscale.
    It has been visualized with matplotlib. By default, matplotlib uses color mapping
    other than grayscale. To properly visualize it, we need to specify the grayscale
    color mapping in matplotlib. Let’s do that.
  prefs: []
  type: TYPE_NORMAL
- en: '**Rotating the image**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotating is also an easy task with `OpenCV`. `cv2.rotate()` function helps us
    to do that. `Clockwise and anticlockwise 90-degree and 180-degree` rotation have
    shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '**Resizing Image**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can resize the image by passing the width and height pixel values to the
    `cv2.resize()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Draw on Image**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes we need to draw on an existing image. For example, we need to draw
    a bounding box on an image object to identify it. Let’s draw a rectangle on the
    flower. `cv2.rectangle()` function helps to draw on it. *It takes some parameters
    like the image on which we draw the rectangle, the coordinate point of the upper
    left corner* `*(pt1)*` *and the lower right corner* `*(pt2)*`*, and the thickness
    of the boundary line. A coding example is given below.*
  prefs: []
  type: TYPE_NORMAL
- en: There are other drawing functions`[***cv.line()***](https://docs.opencv.org/4.x/d6/d6e/group__imgproc__draw.html#ga7078a9fae8c7e7d13d24dac2520ae4a2)*,*
    [***cv.circle()***](https://docs.opencv.org/4.x/d6/d6e/group__imgproc__draw.html#gaf10604b069374903dbd0f0488cb43670)
    *,* [***cv.ellipse()***](https://docs.opencv.org/4.x/d6/d6e/group__imgproc__draw.html#ga28b2267d35786f5f890ca167236cbc69)*,*
    [***cv.putText()***](https://docs.opencv.org/4.x/d6/d6e/group__imgproc__draw.html#ga5126f47f883d730f633d74f07456c576)*,*
    etc`. The full official documentation is available `[**here**](https://docs.opencv.org/4.x/dc/da5/tutorial_py_drawing_functions.html)`**[3]**.
  prefs: []
  type: TYPE_NORMAL
- en: Play with NumPy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will change the intensity value of an image. I will try to keep it simple.
    So, consider the grayscale image shown previously. *Find the shape of the image.*
  prefs: []
  type: TYPE_NORMAL
- en: It shows it is a `2D array with a size of **1200 x 1920**`. In the basic NumPy
    operation, we learned how to slice an array.
  prefs: []
  type: TYPE_NORMAL
- en: Using the concept, we have taken the grayscale image array slice `**[400:800,
    750:1350]**` and replaced the intensity values with `**255**`. Finally, we visualize
    it and find the above image.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Computer vision is one of the promising fields in modern computer science technology.
    I always emphasize the basic knowledge of any domain. I have discussed just the
    primary knowledge of computer vision and shown some hands-on coding. The concepts
    are very simple but may play a significant role for the beginner of computer vision.
  prefs: []
  type: TYPE_NORMAL
- en: '`***Full*** [***code***](https://github.com/Zubair063/ML_articles/blob/main/Getting%20Started%20with%20NumPy%20and%20OpenCV/Numpy_OpenCV.ipynb)
    ***is available*** [***here***](https://github.com/Zubair063/ML_articles/tree/main/Getting%20Started%20with%20NumPy%20and%20OpenCV)***.***`'
  prefs: []
  type: TYPE_NORMAL
- en: '`This is the first article of the computer vision series. Get connected to
    read the upcoming articles.`'
  prefs: []
  type: TYPE_NORMAL
- en: '*[N.B. Instructor* [*Jose Portilla’s*](https://pieriantraining.com/) *course
    helps me to gather knowledge.]*'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[NumPy documentation — NumPy v1.25.dev0 Manual](https://numpy.org/devdocs/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[OpenCV — Wikipedia](https://en.wikipedia.org/wiki/OpenCV)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[OpenCV: Drawing Functions in OpenCV](https://docs.opencv.org/4.x/dc/da5/tutorial_py_drawing_functions.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*You may read other series of articles given below.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/ultimate-guide-to-statistics-for-data-science-a3d8f1fd69a7?source=post_page-----555f88536f68--------------------------------)
    [## Ultimate Guide to Statistics for Data Science'
  prefs: []
  type: TYPE_NORMAL
- en: 'Statistics at a glance for data science: standard guidelines'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/ultimate-guide-to-statistics-for-data-science-a3d8f1fd69a7?source=post_page-----555f88536f68--------------------------------)
    [](https://medium.datadriveninvestor.com/ultimate-guide-to-data-visualization-for-data-science-90b0b13e72ab?source=post_page-----555f88536f68--------------------------------)
    [## Ultimate Guide to Data Visualization for Data Science
  prefs: []
  type: TYPE_NORMAL
- en: 'Data Visualization at a glance for data science: standard guidelines'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.datadriveninvestor.com](https://medium.datadriveninvestor.com/ultimate-guide-to-data-visualization-for-data-science-90b0b13e72ab?source=post_page-----555f88536f68--------------------------------)
  prefs: []
  type: TYPE_NORMAL
