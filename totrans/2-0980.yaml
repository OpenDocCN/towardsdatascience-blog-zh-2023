- en: Getting Started with NumPy and OpenCV for Computer Vision (CV-01)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[开始使用 NumPy 和 OpenCV 进行计算机视觉 (CV-01)](#cv-01)'
- en: 原文：[https://towardsdatascience.com/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68](https://towardsdatascience.com/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68](https://towardsdatascience.com/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68)
- en: Start Your Coding for Computer vision with Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用 Python 进行计算机视觉编程
- en: '[](https://zubairhossain.medium.com/?source=post_page-----555f88536f68--------------------------------)[![Md.
    Zubair](../Images/1b983a23226ce7561796fa5b28c00d65.png)](https://zubairhossain.medium.com/?source=post_page-----555f88536f68--------------------------------)[](https://towardsdatascience.com/?source=post_page-----555f88536f68--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----555f88536f68--------------------------------)
    [Md. Zubair](https://zubairhossain.medium.com/?source=post_page-----555f88536f68--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://zubairhossain.medium.com/?source=post_page-----555f88536f68--------------------------------)[![Md.
    Zubair](../Images/1b983a23226ce7561796fa5b28c00d65.png)](https://zubairhossain.medium.com/?source=post_page-----555f88536f68--------------------------------)[](https://towardsdatascience.com/?source=post_page-----555f88536f68--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----555f88536f68--------------------------------)
    [Md. Zubair](https://zubairhossain.medium.com/?source=post_page-----555f88536f68--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----555f88536f68--------------------------------)
    ·8 min read·Mar 15, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----555f88536f68--------------------------------)
    ·8 分钟阅读·2023年3月15日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/a1f29b1c045ba48aeb7b58ca7d9aece1.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a1f29b1c045ba48aeb7b58ca7d9aece1.png)'
- en: Photo by [Dan Smedley](https://unsplash.com/@nadyeldems?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[Dan Smedley](https://unsplash.com/@nadyeldems?utm_source=medium&utm_medium=referral)
    通过 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 提供的照片'
- en: Motivation
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动机
- en: We, human beings, perceive the environment and surroundings with our vision
    system. The human eye, brain, and limbs work together to perceive the environment
    and act accordingly. An intelligent system can perform those tasks which require
    some level of intelligence if done by a human. So, for performing intelligent
    tasks, artificial vision system is one of the important things for a computer.
    Normally, the camera and image are used to gather information needed to do the
    job. Computer vision and Image processing techniques help us to perform similar
    tasks done by humans, like image recognition, object tracking, etc.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们人类通过视觉系统感知环境和周围事物。人眼、大脑和四肢协同工作以感知环境并做出相应的动作。一个智能系统能够执行那些如果由人类完成则需要某种程度智力的任务。因此，为了执行智能任务，人工视觉系统是计算机的重要组成部分。通常，使用相机和图像来收集完成工作的所需信息。计算机视觉和图像处理技术帮助我们完成类似人类的任务，如图像识别、对象跟踪等。
- en: In computer vision, the camera works as a human eye to capture the image, and
    the processor works as a brain to process the captured image and generate significant
    results. But there is a basic difference between humans and computers. The human
    brain works automatically, and intelligence is a by-born acquisition. On the contrary,
    the computer has no intelligence without human instruction (program). Computer
    vision is the way to provide the appropriate instruction so that it can work compatible
    with the human vision system. But the capacity is limited.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机视觉中，相机像人眼一样捕捉图像，处理器像大脑一样处理捕捉到的图像并生成重要结果。但人类和计算机之间有一个基本的区别。人脑自动工作，智力是与生俱来的。而计算机没有智力，除非有人的指令（程序）。计算机视觉就是提供适当的指令，使计算机能够与人类视觉系统兼容。然而，其能力是有限的。
- en: '`*In the upcoming sections, we will discuss the basic idea of how the image
    is formed and can be manipulated using python.*`'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`*在接下来的部分中，我们将讨论图像如何形成及如何使用 Python 进行操作的基本概念。*`'
- en: Table of Contents
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目录
- en: '`*Click on the Contents and Directly Land on the Section*`'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`*点击目录直接跳转到相应章节*`'
- en: '`[**How Image is Formed and Displayed**](#ad63)`'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[**图像如何形成和显示**](#ad63)`'
- en: '`[**How does Computer Store Image in the Memory?**](#bf87)`'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[**计算机如何在内存中存储图像？**](#bf87)`'
- en: '`[**Grayscale and Colored Image**](#c49f)`'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[**灰度图像和彩色图像**](#c49f)`'
- en: '`[**NumPy Basics to Work with Image**](#d58c)`'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[**NumPy 基础以处理图像**](#d58c)`'
- en: '`[**OpenCV Basics**](#3075)`'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[**OpenCV 基础**](#3075)`'
- en: '`[**Play with NumPy**](#9734)`'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[**玩转 NumPy**](#9734)`'
- en: How Image is Formed and Displayed
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图像的形成与显示
- en: The image is nothing but a combination of pixels with different color intensities.
    The jargon ‘pixels’ and ‘color intensity’ may be unknown to you. Don’t worry.
    It will be crystal clear, just read the article till the end.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图像只不过是具有不同颜色强度的像素组合。‘像素’和‘颜色强度’这两个术语可能对你来说是陌生的。不要担心。阅读完文章后，一切都会变得清晰明了。
- en: '**Pixel** is the smallest unit/element of the digital image. Details are in
    the image below.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**像素**是数字图像的最小单位/元素。详细信息见下图。'
- en: '![](../Images/760bb7c8723d0bd48ae408ef43565950.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/760bb7c8723d0bd48ae408ef43565950.png)'
- en: Image By Author
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: The display is formed with pixels. In the above figure, there are 25 columns
    and 25 rows. Each small square is considered a pixel. The setup can house 625
    pixels. It represents a display with 625 pixels. If we shine the pixels with different
    **color intensity** (brightness), it will form a digital image.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 显示屏由像素构成。在上图中，有 25 列和 25 行。每个小方块被视为一个像素。这个设置可以容纳 625 个像素。它表示一个具有 625 个像素的显示屏。如果我们用不同的**颜色强度**（亮度）来照亮这些像素，它将形成一个数字图像。
- en: '**How does the computer store the image in the memory?**'
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**计算机如何将图像存储在内存中？**'
- en: If we look at the image carefully, we can compare it with a 2D matrix. A matrix
    has rows and columns, and its elements can be addressed with its index. The matrix
    structure is similar to an array. And computer store the image in an array of
    computer memory.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仔细观察图像，可以将其与 2D 矩阵进行比较。矩阵有行和列，其元素可以通过索引访问。矩阵结构类似于数组。计算机将图像存储在计算机内存的数组中。
- en: Each array element holds the **intensity** value of a color. Generally, the
    intensity value ranges from `**0 to 255**`. For demonstration purposes, I have
    included an array representation of an image.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数组元素保存**强度**值。通常，强度值范围从`**0 到 255**`。为了演示目的，我提供了图像的数组表示。
- en: '![](../Images/854daf2155323f2f5cdde6fad18b0a80.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/854daf2155323f2f5cdde6fad18b0a80.png)'
- en: Sample Array Representation of a Grayscale Image (Image By Author)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 灰度图像的示例数组表示（作者提供的图像）
- en: Grayscale and Colored Image
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 灰度图像与彩色图像
- en: '**The grayscale** image is a black-and-white image. It is formed with only
    one color. A pixel value close to 0 represents darkness and becomes brighter with
    higher intensity values. The highest value is 255, which represents the white
    color. A 2D array is sufficient to hold the grayscale image, as the last figure
    shows.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**灰度图像**是一种黑白图像。它由一种颜色形成。接近 0 的像素值代表黑暗，强度值越高，图像就越亮。最高值是 255，代表白色。一个 2D 数组足以存储灰度图像，正如最后的图示所示。'
- en: '**Colored images** can’t be formed with only one color; there might be hundreds
    of thousands of color combinations. Mainly, there are three primary color channels
    `**RED (R), GREEN(G), and Blue(B)**`. And each color channel is stored in a *2D
    array* and holds its intensity values, and the final image is the combination
    of these three color channels.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**彩色图像**不能仅由一种颜色形成；可能有成千上万种颜色组合。主要有三种基本颜色通道`**红色 (R)、绿色 (G) 和蓝色 (B)**`。每个颜色通道存储在一个*2D
    数组*中，并保存其强度值，最终图像是这三个颜色通道的组合。'
- en: '![](../Images/c59a3df10731dbae40ebf5e3ea60d76b.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c59a3df10731dbae40ebf5e3ea60d76b.png)'
- en: RGB Color Channel (Image By Author)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: RGB 颜色通道（作者提供的图像）
- en: This color model has (256 x 256 x 256) = 16,777,216 possible color combinations.
    `[***You may visualize the combination here.***](https://csunplugged.jp/csfg/data/interactives/rgb-mixer/index.html)`
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这种颜色模型具有 (256 x 256 x 256) = 16,777,216 种可能的颜色组合。 `[***你可以在这里可视化这些组合。***](https://csunplugged.jp/csfg/data/interactives/rgb-mixer/index.html)`
- en: But in computer memory, the image is stored differently.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 但在计算机内存中，图像的存储方式有所不同。
- en: '![](../Images/357d8039806f954a8e72102e575d233f.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/357d8039806f954a8e72102e575d233f.png)'
- en: Image Stored in Computer Memory (Image By Author)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在计算机内存中的图像（作者提供的图像）
- en: The computer doesn’t know the RGB channels. It knows the intensity value. The
    red channel is stored with high intensity, and the green and blue channels are
    stored with medium and low-intensity values, respectively.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机不知道 RGB 通道。它知道的是强度值。红色通道以高强度存储，绿色和蓝色通道分别以中等和低强度值存储。
- en: NumPy Basics to Work with Python
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy 基础知识以便与 Python 一起使用
- en: NumPy is a fundamental python package for scientific computation. It works mainly
    as an array object, but its operation isn’t limited to the array. However, the
    library can handle various numeric and logical operations on numbers [1]. `You
    will get NumPy official documentation [***here***](https://numpy.org/doc/stable/user/absolute_beginners.html).`
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy是一个用于科学计算的基础Python包。它主要作为数组对象工作，但它的操作不限于数组。然而，该库可以处理各种数字和逻辑操作[1]。`你可以在[***这里***](https://numpy.org/doc/stable/user/absolute_beginners.html)找到NumPy的官方文档。`
- en: '*Let’s start our journey. First thing first.*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*让我们开始我们的旅程。首先是第一步。*'
- en: '***Importing the NumPy library.***'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***导入NumPy库。***'
- en: It’s time to work with NumPy. As we know, NumPy works with an array. So, let’s
    try to create our first 2D array of all zeros.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是使用NumPy的时候了。正如我们所知，NumPy与数组一起工作。所以，让我们尝试创建第一个全零的2D数组。
- en: '***Creating NumPy Array***'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***创建NumPy数组***'
- en: It’s as simple as that. We can also create a NumPy array with all ones just
    as follows.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 就这么简单。我们也可以创建一个全为1的NumPy数组，方法如下。
- en: Interestingly, NumPy also provides a method to fill the array with any values.
    The simple syntax `array.fill(value)` can do the job.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，NumPy还提供了一种方法来用任意值填充数组。简单的语法`array.fill(value)`可以完成这项工作。
- en: The array `‘b’` with all ones is now filled with `3`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 数组`‘b’`中所有的元素现在都被填充为`3`。
- en: '***The Function of Seed in case of Random Number Generation***'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***随机数生成中的种子功能***'
- en: Just have a look at the following coding examples.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 只需看看以下的代码示例。
- en: In the first code cell, we have used `**np.random.seed(seed_value)**`, but we
    haven’t used any seeding for the other two code cells. There is a major difference
    between random number generation with and without seeding. In the case of random
    seeding, the generated random number remains the same for a specific seed value.
    On the other hand, without a seed value, random number changes for each execution.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个代码单元格中，我们使用了`**np.random.seed(seed_value)**`，但其他两个代码单元格中没有使用任何种子。在有种子和无种子的随机数生成之间有一个主要区别。在随机种子的情况下，生成的随机数对于特定的种子值保持不变。另一方面，没有种子值的情况下，每次执行时随机数都会变化。
- en: '**Basic operations (max, min, mean, reshape, etc.) with NumPy**'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用NumPy的基本操作（最大值、最小值、均值、重塑等）**'
- en: NumPy has made our life easier by providing numerous functions to do mathematical
    operations. `array_name.min(), array_name.max(), array_name.mean()` syntaxes help
    us find an array’s minimum, maximum, and mean values. *Coding example —*
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy通过提供大量函数来执行数学运算，使我们的生活更轻松。`array_name.min(), array_name.max(), array_name.mean()`语法帮助我们找到数组的最小值、最大值和均值。*编码示例
    —*
- en: Indeies of the minimum and maximum values can be extracted with the syntaxes
    `array_name.argmax(), array_name.argmin()`. *Example —*
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最小值和最大值的索引可以通过语法`array_name.argmax(), array_name.argmin()`提取。*示例 —*
- en: Array reshaping is one of the important operations of `NumPy. array_name.reshape(row_no,
    column_no)` is the syntax for reshaping an array. While reshaping the array, we
    must be careful about the number of array elements before and after reshaping.
    In both cases, the total number of elements must be the same.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 数组重塑是`NumPy.array_name.reshape(row_no, column_no)`的一个重要操作，用于重塑数组。在重塑数组时，我们必须注意重塑前后数组元素的数量。在两种情况下，总元素数必须相同。
- en: '**Array Indexing and Slicing**'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数组索引和切片**'
- en: Each array element can be addressed with its `column and row` number. Let’s
    generate another array with 10 rows and columns.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数组元素可以通过其`列和行`编号进行访问。我们来生成另一个具有10行和列的数组。
- en: Suppose we want to find the value of the first value of the array. It can be
    extracted by passing the row and column index (0 , 0).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想找出数组的第一个值。可以通过传递行和列索引（0 , 0）来提取。
- en: Specific row and column values can be sliced with the syntax `array_name[row_no,:],
    array_name[:,column_no].`
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用语法`array_name[row_no,:], array_name[:,column_no]`来切片特定的行和列值。
- en: Let’s try to slice the central elements of the array.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试切片数组的中心元素。
- en: OpenCV Basics
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenCV基础
- en: '**OpenCV** is an open-source python library for Computer Vision developed by
    Intel [2]. I will discuss a few usages of OpvenCv though its scope is vast. `You
    will find the official documentation [**here**](https://docs.opencv.org/4.x/d6/d00/tutorial_py_root.html).`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**OpenCV**是由英特尔开发的开源Python计算机视觉库[2]。我将讨论OpenCV的一些用法，尽管它的范围很广。`你可以在[**这里**](https://docs.opencv.org/4.x/d6/d00/tutorial_py_root.html)找到官方文档。`'
- en: '`I have used the following image for demonstration purposes.`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`我使用了以下图像进行演示。`'
- en: '![](../Images/65956af1e9aa9a01bfa553246358120a.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/65956af1e9aa9a01bfa553246358120a.png)'
- en: Image by [jackouille21](https://pixabay.com/users/jackouille21-34177786/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7834580)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7834580)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '**Importing OpenCV and Matplotlib library**'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matplotlib is a visualization library. It helps to visualize the image.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '**Loading the image with OpenCV and visualize with matplotlib**'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have read the image with **OpenCV** and visualized it with the **matplotlib**
    library. The color has been changed because **OpenCV** reads the image in **BGR**
    format instead of **RGB**, but **matplotlib** expects the image in **RGB** format.
    So, we need to convert the image from **BGR to RGB**.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '**Converting the image from BGR to RGB format**'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, the image seems okay.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '**Converting image to grayscale**'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can easily convert the image from BGR to grayscale with `cv2.COLOR_BGR2GRAY`
    is as follows.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: The above image is not properly gray though it has been converted to grayscale.
    It has been visualized with matplotlib. By default, matplotlib uses color mapping
    other than grayscale. To properly visualize it, we need to specify the grayscale
    color mapping in matplotlib. Let’s do that.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '**Rotating the image**'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotating is also an easy task with `OpenCV`. `cv2.rotate()` function helps us
    to do that. `Clockwise and anticlockwise 90-degree and 180-degree` rotation have
    shown below.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '**Resizing Image**'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can resize the image by passing the width and height pixel values to the
    `cv2.resize()` function.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '**Draw on Image**'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes we need to draw on an existing image. For example, we need to draw
    a bounding box on an image object to identify it. Let’s draw a rectangle on the
    flower. `cv2.rectangle()` function helps to draw on it. *It takes some parameters
    like the image on which we draw the rectangle, the coordinate point of the upper
    left corner* `*(pt1)*` *and the lower right corner* `*(pt2)*`*, and the thickness
    of the boundary line. A coding example is given below.*
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: There are other drawing functions`[***cv.line()***](https://docs.opencv.org/4.x/d6/d6e/group__imgproc__draw.html#ga7078a9fae8c7e7d13d24dac2520ae4a2)*,*
    [***cv.circle()***](https://docs.opencv.org/4.x/d6/d6e/group__imgproc__draw.html#gaf10604b069374903dbd0f0488cb43670)
    *,* [***cv.ellipse()***](https://docs.opencv.org/4.x/d6/d6e/group__imgproc__draw.html#ga28b2267d35786f5f890ca167236cbc69)*,*
    [***cv.putText()***](https://docs.opencv.org/4.x/d6/d6e/group__imgproc__draw.html#ga5126f47f883d730f633d74f07456c576)*,*
    etc`. The full official documentation is available `[**here**](https://docs.opencv.org/4.x/dc/da5/tutorial_py_drawing_functions.html)`**[3]**.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Play with NumPy
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will change the intensity value of an image. I will try to keep it simple.
    So, consider the grayscale image shown previously. *Find the shape of the image.*
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: It shows it is a `2D array with a size of **1200 x 1920**`. In the basic NumPy
    operation, we learned how to slice an array.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示这是一个`2D数组，大小为**1200 x 1920**`。在基本的NumPy操作中，我们学习了如何切片数组。
- en: Using the concept, we have taken the grayscale image array slice `**[400:800,
    750:1350]**` and replaced the intensity values with `**255**`. Finally, we visualize
    it and find the above image.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用该概念，我们提取了灰度图像数组片段`**[400:800, 750:1350]**`并将强度值替换为`**255**`。最后，我们对其进行可视化，得到了上述图像。
- en: Conclusion
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Computer vision is one of the promising fields in modern computer science technology.
    I always emphasize the basic knowledge of any domain. I have discussed just the
    primary knowledge of computer vision and shown some hands-on coding. The concepts
    are very simple but may play a significant role for the beginner of computer vision.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机视觉是现代计算机科学技术中一个有前途的领域。我总是强调任何领域的基础知识。我仅讨论了计算机视觉的基本知识，并展示了一些实践编码。这些概念非常简单，但对于计算机视觉的初学者可能起到重要作用。
- en: '`***Full*** [***code***](https://github.com/Zubair063/ML_articles/blob/main/Getting%20Started%20with%20NumPy%20and%20OpenCV/Numpy_OpenCV.ipynb)
    ***is available*** [***here***](https://github.com/Zubair063/ML_articles/tree/main/Getting%20Started%20with%20NumPy%20and%20OpenCV)***.***`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`***完整*** [***代码***](https://github.com/Zubair063/ML_articles/blob/main/Getting%20Started%20with%20NumPy%20and%20OpenCV/Numpy_OpenCV.ipynb)
    ***可在此处*** [***获取***](https://github.com/Zubair063/ML_articles/tree/main/Getting%20Started%20with%20NumPy%20and%20OpenCV)
    ***。***`'
- en: '`This is the first article of the computer vision series. Get connected to
    read the upcoming articles.`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`这是计算机视觉系列的第一篇文章。请保持关注，以阅读即将发布的文章。`'
- en: '*[N.B. Instructor* [*Jose Portilla’s*](https://pieriantraining.com/) *course
    helps me to gather knowledge.]*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*[注：讲师* [*Jose Portilla*](https://pieriantraining.com/) *的课程帮助我获取知识。]*'
- en: References
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[NumPy documentation — NumPy v1.25.dev0 Manual](https://numpy.org/devdocs/)'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[NumPy 文档 — NumPy v1.25.dev0 手册](https://numpy.org/devdocs/)'
- en: '[OpenCV — Wikipedia](https://en.wikipedia.org/wiki/OpenCV)'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[OpenCV — 维基百科](https://en.wikipedia.org/wiki/OpenCV)'
- en: '[OpenCV: Drawing Functions in OpenCV](https://docs.opencv.org/4.x/dc/da5/tutorial_py_drawing_functions.html)'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[OpenCV：OpenCV中的绘图函数](https://docs.opencv.org/4.x/dc/da5/tutorial_py_drawing_functions.html)'
- en: '*You may read other series of articles given below.*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*您可以阅读下面提供的其他系列文章。*'
- en: '[](/ultimate-guide-to-statistics-for-data-science-a3d8f1fd69a7?source=post_page-----555f88536f68--------------------------------)
    [## Ultimate Guide to Statistics for Data Science'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/ultimate-guide-to-statistics-for-data-science-a3d8f1fd69a7?source=post_page-----555f88536f68--------------------------------)
    [## 数据科学的终极统计指南'
- en: 'Statistics at a glance for data science: standard guidelines'
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据科学概述：标准指南
- en: towardsdatascience.com](/ultimate-guide-to-statistics-for-data-science-a3d8f1fd69a7?source=post_page-----555f88536f68--------------------------------)
    [](https://medium.datadriveninvestor.com/ultimate-guide-to-data-visualization-for-data-science-90b0b13e72ab?source=post_page-----555f88536f68--------------------------------)
    [## Ultimate Guide to Data Visualization for Data Science
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/ultimate-guide-to-statistics-for-data-science-a3d8f1fd69a7?source=post_page-----555f88536f68--------------------------------)
    [](https://medium.datadriveninvestor.com/ultimate-guide-to-data-visualization-for-data-science-90b0b13e72ab?source=post_page-----555f88536f68--------------------------------)
    [## 数据科学的终极数据可视化指南'
- en: 'Data Visualization at a glance for data science: standard guidelines'
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据科学概述：标准指南
- en: medium.datadriveninvestor.com](https://medium.datadriveninvestor.com/ultimate-guide-to-data-visualization-for-data-science-90b0b13e72ab?source=post_page-----555f88536f68--------------------------------)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.datadriveninvestor.com](https://medium.datadriveninvestor.com/ultimate-guide-to-data-visualization-for-data-science-90b0b13e72ab?source=post_page-----555f88536f68--------------------------------)'
