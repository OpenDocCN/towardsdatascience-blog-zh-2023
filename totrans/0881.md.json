["```py\nimport pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('titanic_train.csv')\ndf\n```", "```py\nimport re\n```", "```py\nexpression = 'William'\nname_search = re.search(expression, \"Allen, Mr. William Henry\")\nprint(name_search)\n```", "```py\n<re.Match object; span=(11, 18), match='William'>\n```", "```py\nif name_search:\n    # returns the part of the string where there was a match\n    print(name_search.group())\n    # William\n```", "```py\nprint(name_search.group(0)) # same as group()\n```", "```py\nWilliam\n```", "```py\nexpression = '[Ww]illiam'       # either W or w, followed by \"illiam\"\nname_search = re.search(expression, \"Allen, Mr. william Henry\")\nif name_search:\n    print(name_search.group())    \n    # william\n```", "```py\nexpression = '(?i)william'          # case insensitive search\nname_search = re.search(expression, \"Allen, Mr. WILLIAM Henry\")\nif name_search:\n    print(name_search.group())    \n    # WILLIAM\n```", "```py\nexpression = 'Henry$'               # ends with Henry \nname_search = re.search(expression, \"Allen, Mr. William Henry\")\nif name_search:\n    print(name_search.group())\n    # Henry\n```", "```py\nexpression = '^Allen'               # starts with Allen\nname_search = re.search(expression, \"Allen, Mr. William Henry\")\nif name_search:\n    print(name_search.group())\n    # Allen\n```", "```py\nexpression = ' ([A-Za-z]+)\\.'\nname_search = re.search(expression, \"Allen, Mr. William Henry\")\nprint(name_search)\nif name_search:\n    print(name_search.group(0))   # group zero is everything that matches the pattern\n    print(name_search.group(1))   # group 1 is the first ()\n```", "```py\n Mr.\n```", "```py\nMr\n```", "```py\n print(name_search.group(2))\n    # IndexError: no such group\n```", "```py\nexpression = ' ([A-Za-z]+)\\. ([A-Za-z]+)\\.'\ntitles_search = re.search(expression, \"Allen, Dr. Mr. William Henry\")\nif titles_search:\n    print(titles_search.group(0))   #  Dr. Mr.\n    print(titles_search.group(1))   # Dr\n    print(titles_search.group(2))   # Mr\n```", "```py\n# returns a list of non-overlapping matches\ntitles_search = re.findall('([A-Za-z]+)\\.', \"Mrs. Mr. Ms. Dr.\")\nprint(titles_search)\n```", "```py\n['Mrs', 'Mr', 'Ms', 'Dr']\n```", "```py\nexpression = '^Braund.+Owen' \nprint(df['Name'].str.count(expression))\n```", "```py\n**0      1**\n1      0\n2      0\n3      0\n4      0\n      ..\n886    0\n887    0\n888    0\n889    0\n890    0\nName: Name, Length: 891, dtype: int64\n```", "```py\nprint(df['Name'].str.count(expression).sum())\n# 1\n```", "```py\ndisplay(df[df['Name'].str.count(expression) == 1])\n```", "```py\nexpression = '^Braund.*Owen'\n```", "```py\nexpression = 'William'\n```", "```py\nexpression = 'William'\nprint(df['Name'].str.count(expression))\nprint(df['Name'].str.count(expression).sum())\ndisplay(df[df['Name'].str.count(expression) > 1]) \n```", "```py\nexpression = ' ([A-Za-z]+)\\.'\ndf['Title'] = df['Name'].str.extract(expression)\ndf\n```", "```py\nprint(df['Cabin'].unique())\n```", "```py\n[nan 'C85' 'C123' 'E46' 'G6' 'C103' 'D56' 'A6' 'C23 C25 C27' 'B78' 'D33'\n 'B30' 'C52' 'B28' 'C83' 'F33' 'F G73' 'E31' 'A5' 'D10 D12' 'D26' 'C110'\n 'B58 B60' 'E101' 'F E69' 'D47' 'B86' 'F2' 'C2' 'E33' 'B19' 'A7' 'C49'\n 'F4' 'A32' 'B4' 'B80' 'A31' 'D36' 'D15' 'C93' 'C78' 'D35' 'C87' 'B77'\n 'E67' 'B94' 'C125' 'C99' 'C118' 'D7' 'A19' 'B49' 'D' 'C22 C26' 'C106'\n 'C65' 'E36' 'C54' 'B57 B59 B63 B66' 'C7' 'E34' 'C32' 'B18' 'C124' 'C91'\n 'E40' 'T' 'C128' 'D37' 'B35' 'E50' 'C82' 'B96 B98' 'E10' 'E44' 'A34'\n 'C104' 'C111' 'C92' 'E38' 'D21' 'E12' 'E63' 'A14' 'B37' 'C30' 'D20' 'B79'\n 'E25' 'D46' 'B73' 'C95' 'B38' 'B39' 'B22' 'C86' 'C70' 'A16' 'C101' 'C68'\n 'A10' 'E68' 'B41' 'A20' 'D19' 'D50' 'D9' 'A23' 'B50' 'A26' 'D48' 'E58'\n 'C126' 'B71' 'B51 B53 B55' 'D49' 'B5' 'B20' 'F G63' 'C62 C64' 'E24' 'C90'\n 'C45' 'E8' 'B101' 'D45' 'C46' 'D30' 'E121' 'D11' 'E77' 'F38' 'B3' 'D6'\n 'B82 B84' 'D17' 'A36' 'B102' 'B69' 'E49' 'C47' 'D28' 'E17' 'A24' 'C50'\n 'B42' 'C148']\n```", "```py\nexpression = '^([A-G])'\ndf['CabinType'] = df['Cabin'].str.extract(expression)\n\nexpression = '^.{1}(.*)'  \ndf['CabinNumber'] = df['Cabin'].str.extract(expression)\ndf\n```", "```py\nexpression = 'William'\nprint(df['Name'].str.count(expression).sum())\ndisplay(df[df['Name'].str.count(expression) == 1])\n```", "```py\nexpression = 'William'\ndf[df['Name'].str.contains(expression)]\n```", "```py\nexpression = '^William'\ndf[df['Name'].str.contains(expression)]\n```", "```py\nexpression = 'William'\ndf[df['Name'].str.match(expression)] # Determine if string starts with \n                                     # a match of a regular expression\n```", "```py\nprint(df['Title'].unique())\n# ['Mr' 'Mrs' 'Miss' 'Master' 'Don' 'Rev' 'Dr' 'Mme' 'Ms' 'Major' 'Lady'\n# 'Sir' 'Mlle' 'Col' 'Capt' 'Countess' 'Jonkheer']\n```", "```py\ndf['Title'] = df['Title'].str.replace('Mlle', 'Miss')\ndf['Title'] = df['Title'].str.replace('Ms', 'Miss')\ndf['Title'] = df['Title'].str.replace('Mme', 'Miss')\n```", "```py\ndf['Name'] = df['Name'].str.replace(' (Mlle)\\.', ' Miss.', regex=True)\ndf['Name'] = df['Name'].str.replace(' (Ms)\\.', ' Miss.', regex=True)\ndf['Name'] = df['Name'].str.replace(' (Mme)\\.', ' Miss.', regex=True)\n```", "```py\nexpression = '([A-Za-z]*(ll)[a-z]*)'\ndf['Name'].str.findall(expression)\n```", "```py\n[i for i in df['Name'].str.findall(expression) if len(i)>0]\n```", "```py\n[[('Futrelle', 'll')],\n [('Allen', 'll'), ('William', 'll')],\n [('Bonnell', 'll')],\n [('William', 'll')],\n [('Williams', 'll')],\n [('William', 'll')],\n [('Ellen', 'll'), ('Nellie', 'll')],\n [('William', 'll')],\n [('William', 'll')],\n ...\n```", "```py\nexpression = '([A-Za-z]*(ll)[A-Za-z]*)'\nfor matches in df['Name'].str.findall(expression):\n    if len(matches)>0:\n        for names in matches:\n            print(names)\n        print('----') \n```", "```py\n('Futrelle', 'll')\n----\n('Allen', 'll')\n('William', 'll')\n----\n('Bonnell', 'll')\n----\n('William', 'll')\n----\n('Williams', 'll')\n----\n('William', 'll')\n----\n('Ellen', 'll')\n('Nellie', 'll')\n...\n```", "```py\nexpression = '([\\'A-Za-z ()\"//.-]+), ([A-Za-z]+). ([A-Za-z ()\"//.-]*)'\ndf1 = df['Name'].str.split(expression, expand=True)\ndisplay(df1)\n```", "```py\ndf1.drop([0,4], axis=1, inplace=True)\ndisplay(df1)\n```", "```py\ndf1.columns = ['Last Name','Title','First Name']\ndisplay(df1)\n```"]