["```py\nimport pandas as pd\nimport plotly.graph_objects as go\nfrom lightgbm import LGBMRegressor\n```", "```py\ndef load_climate_data(path):\n    # Load data in a dataframe.\n    with open(path,\"r\", encoding=\"ISO-8859-1\") as f:\n        data = f.readlines()\n    columns = data[27].split()\n    data = [v.split() for v in data[28:]]\n    data = pd.DataFrame(data, columns = columns)\n\n    # Fix time\n    data[\"time\"] = pd.to_datetime(data.Year + \"-\" + data.Month.astype(str))\n    data = data.drop(columns = [\"Year\",\"Month\"])\n    data = data.set_index(\"time\")\n\n    # Fix types\n    data = data.replace(\"NA\",None)\n    return data.astype(float)\n\nDATA_PATH = \"./data/climate-reports-tables-homogenized_LUG.txt\"\ndata = load_climate_data(DATA_PATH)\n```", "```py\ndef show_data(data,title=\"\"):\n    trace = [go.Scatter(x=data.index,y=data[c],name=c) for c in data.columns]\n    go.Figure(trace,layout=dict(title=title)).show()\n\n# Let's visualize the data.\nshow_data(data,\"Weather Data in Lugano\")\n```", "```py\ndef build_features(data, horizon):\n    \"\"\"Build lagged features.\n\n    We depend on horizon due to relative lags shift. \n    E.g, if the horizon is equal to 1, the target value \n    of 12 months before corresponds to a lag of 11.\n    \"\"\"\n    # Here we hardcode values for simplicity, but everything could \n    # (and should) be parametrized.\n    precipitation_lags = [0, 1, 2, 12 - horizon, 24 - horizon, 36 - horizon]\n    temperature_lags = [0, 1, 12 - horizon, 24 - horizon]\n\n    # Concatenate precipitation and temperature features.\n    features = pd.concat(\n        [\n            build_lagged_features(data.Precipitation, lags=precipitation_lags),\n            build_lagged_features(data.Temperature, lags=temperature_lags),\n        ],\n        axis=1,\n    )\n\n    # Add horizon_month as a feature.\n    features[\"horizon_month\"] = (features.index.month + horizon - 1) % 12 + 1\n\n    # Trick to later allow concatenation of features for different \n    # target horizons.\n    features = features.rename(\n        columns={\n            f\"Precipitation_lag_{12-horizon}\": \"Precipitation_lag_12_before_target\",\n            f\"Precipitation_lag_{24-horizon}\": \"Precipitation_lag_24_before_target\",\n            f\"Precipitation_lag_{36-horizon}\": \"Precipitation_lag_36_before_target\",\n            f\"Temperature_lag_{12-horizon}\": \"Temperature_lag_12_before_target\",\n            f\"Temperature_lag_{24-horizon}\": \"Temperature_lag_24_before_target\",\n        }\n    )\n\n    return features\n\ndef build_lagged_features(series, lags):\n    return pd.concat(\n        [series.shift(lag).rename(f\"{series.name}_lag_{lag}\") for lag in lags],\n        axis=1,\n    )\n```", "```py\ndef build_target_features(data, horizon):\n    targ = build_target(data.Precipitation, horizon)\n    feat = build_features(data, horizon)\n\n    # Drop missing values generated by lags/horizon.\n    idx = ~(feat.isnull().any(axis=1) | targ.isnull())\n    feat = feat.loc[idx]\n    targ = targ.loc[idx]\n\n    return targ, feat\n\ndef build_target(series, horizon):\n    return series.shift(-horizon)\n\n# Let's build the targets and features for each horizon.\nHORIZONS = [1,2,3]\ntarget_features = {h: build_target_features(data, h) for h in HORIZONS}\n```", "```py\ndef split_train_test(target_features, test_size):\n    targ_feat_split = {}\n    for horizon, (targ,feat) in target_features.items():\n        targ_train = targ.iloc[:-test_size]\n        feat_train = feat.iloc[:-test_size]\n        targ_test = targ.iloc[-test_size:]\n        feat_test = feat.iloc[-test_size:]\n\n        targ_feat_split[horizon] = targ_train, feat_train, targ_test, feat_test\n\n    return targ_feat_split\n\nTEST_SIZE = 10 * 12\ntarg_feat_split = split_train_test(target_features, test_size=TEST_SIZE)\n```", "```py\ndef train_models_by_horizon(targ_feat_split, model_params=None):\n    if model_params is None:\n        model_params = {}\n\n    # Train one model for each horizon\n    models_by_horizon = {}\n    for horizon, (targ_train,feat_train,_,_) in targ_feat_split.items():\n        model = LGBMRegressor(**model_params)\n        model.fit(feat_train, targ_train)\n        models_by_horizon[horizon] = model\n\n    return models_by_horizon\n\nmodels_by_horizon = train_models_by_horizon(targ_feat_split)\n```", "```py\ndef train_model_across_horizons(targ_feat_split, model_params=None):\n    if model_params is None:\n        model_params = {}\n\n    # Concatenate data across horizons.\n    targ_train_all = []\n    feat_train_all = []\n    for horizon, (targ_train,feat_train,_,_) in targ_feat_split.items():\n        # Add horizon as a feature.\n        feat_train = feat_train.copy()\n        feat_train[\"target_horizon\"] = horizon\n\n        targ_train_all.append(targ_train)\n        feat_train_all.append(feat_train)\n\n    targ_train_all = pd.concat(targ_train_all)\n    feat_train_all = pd.concat(feat_train_all)\n\n    # Train a single model.\n    model = LGBMRegressor(**model_params)\n    model.fit(feat_train_all, targ_train_all)\n\n    return model\n\nmodel_shared = train_model_across_horizons(targ_feat_split)\n```", "```py\ndef predict_models_by_horizon(targ_feat_split, models_by_horizon):\n    preds = {}\n    for horizon, (_,_,_,feat_test) in targ_feat_split.items():\n        preds[horizon] = models_by_horizon[horizon].predict(feat_test)\n    return preds\n\ndef predict_model_across_horizons(targ_feat_split, model):\n    preds = {}\n    for horizon, (_,_,_,feat_test) in targ_feat_split.items():\n        # Add horizon as a feature.\n        feat_test = feat_test.copy()\n        feat_test[\"target_horizon\"] = horizon\n\n        preds[horizon] = model.predict(feat_test)\n    return preds\n\npreds_by_horizon = predict_models_by_horizon(targ_feat_split, models_by_horizon)\npreds_model_shared = predict_model_across_horizons(targ_feat_split, model_shared)\n```", "```py\n# Let's combine the output in a convenient format.\noutput = {}\nfor horizon in HORIZONS:\n    df = targ_feat_split[horizon][2].rename(\"target\").to_frame()\n    df[\"pred_model_by_horizon\"] = preds_by_horizon[horizon]\n    df[\"pred_model_shared\"] = preds_model_shared[horizon]\n    output[horizon] = df\n```", "```py\ndef print_stats(output):\n    output_all = pd.concat(output.values())\n    mae_by_horizon = (output_all.target - output_all.pred_model_by_horizon).abs().mean()\n    mae_shared = (output_all.target - output_all.pred_model_shared).abs().mean()\n    print(\"                 BY HORIZON     SHARED\")\n    print(f\"MAE overall    :    {mae_by_horizon:.1f}         {mae_shared:.1f}\\n\")\n\n    for h,df in output.items():   \n        mae_by_horizon = (df.target - df.pred_model_by_horizon).abs().mean()\n        mae_shared = (df.target - df.pred_model_shared).abs().mean()\n        print(f\"MAE - horizon {h}:    {mae_by_horizon:.1f}         {mae_shared:.1f}\")\n\n# Let's show some statistics.\nprint_stats(output)\n```", "```py\n# Let's have a look at the predictions.\nfor horizon, df in output.items():\n    show_data(df,f\"Predictions at Horizon {horizon}\")\n```"]