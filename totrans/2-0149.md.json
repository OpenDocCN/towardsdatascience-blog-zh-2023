["```py\nperiod = 12 # monthly series\nsize = 120\n\nbeta1 = np.linspace(-.6, .3, num=size)\nbeta2 = np.linspace(.6, -.3, num=size)\nsin1 = np.asarray([np.sin(2 * np.pi * i / 12) for i in np.arange(1, size + 1)])\ncos1 = np.asarray([np.cos(2 * np.pi * i / 12) for i in np.arange(1, size + 1)])\n\nxt = np.cumsum(np.random.normal(scale=0.1, size=size))\n\nyt = xt + beta1 * sin1 + beta2 * cos1 + np.random.normal(scale=0.1, size=size)\n\nyt = pd.Series(yt)\n```", "```py\n# https://github.com/vcerqueira/blog/tree/main/src\nfrom src.seasonality import seasonal_strength\n\nseasonal_strength(yt, period=12)\n# 0.90\n```", "```py\nfrom pmdarima.arima import nsdiffs\n\nnsdiffs(x=yt, m=period, test='ch')\n# 0\n```", "```py\nfrom sktime.transformations.series.date import DateTimeFeatures\nfrom sklearn.preprocessing import OneHotEncoder\n\nmonthly_feats = DateTimeFeatures(ts_freq='M',\n                                 keep_original_columns=False,\n                                 feature_scope='efficient')\n\ndatetime_feats = monthly_feats.fit_transform(yt)\ndatetime_feats = datetime_feats.drop('year', axis=1)\n\nencoder = OneHotEncoder(drop='first', sparse=False)\nencoded_feats = encoder.fit_transform(datetime_feats)\n\nencoded_feats_df = pd.DataFrame(encoded_feats,\n                                columns=encoder.get_feature_names_out(),\n                                dtype=int)\n```", "```py\nfrom sktime.transformations.series.fourier import FourierFeatures\n\nfourier = FourierFeatures(sp_list=[12],\n                          fourier_terms_list=[4],\n                          keep_original_columns=False)\n\nfourier_feats = fourier.fit_transform(yt)\n```", "```py\nfrom sklego.preprocessing import RepeatingBasisFunction\n\nrbf_encoder = RepeatingBasisFunction(n_periods=4,\n                                     column='month_of_year',\n                                     input_range=(1, 12),\n                                     remainder='drop',\n                                     width=0.25)\n\nrbf_features = rbf_encoder.fit_transform(datetime_feats)\nrbf_features_df = pd.DataFrame(rbf_features,\n                               columns=[f'RBF{i}'\n                                        for i in range(rbf_features.shape[1])])\n```", "```py\nimport pmdarima as pm\nmodel = pm.auto_arima(yt, m=12, trace=True)\n\nmodel.summary()\n# Best model:  ARIMA(0,1,0)(1,0,0)[12]\n```", "```py\nfrom sklearn.model_selection import train_test_split\nfrom sktime.forecasting.compose import make_reduction\nfrom sklearn.linear_model import RidgeCV\n\ntrain, test = train_test_split(yt, test_size=12, shuffle=False)\n\ntrain_sdiff = train.diff(periods=12)[12:]\n\nforecaster = make_reduction(estimator=RidgeCV(),\n                            strategy='recursive',\n                            window_length=3)\n\nforecaster.fit(train_sdiff)\ndiff_pred = forecaster.predict(fh=list(range(1, 13)))\n```", "```py\nfrom statsmodels.tsa.api import STL\nfrom sktime.forecasting.naive import NaiveForecaster\n\n# fitting the seasonal decomposition method\nseries_decomp = STL(yt, period=period).fit()\n\n# adjusting the data\nseas_adj = yt - series_decomp.seasonal\n\n# forecasting the non-seasonal part\nforecaster = make_reduction(estimator=RidgeCV(),\n                            strategy='recursive',\n                            window_length=3)\n\nforecaster.fit(seas_adj)\n\nseas_adj_pred = forecaster.predict(fh=list(range(1, 13)))\n\n# forecasting the seasonal part\nseas_forecaster = NaiveForecaster(strategy='last', sp=12)\nseas_forecaster.fit(series_decomp.seasonal)\nseas_preds = seas_forecaster.predict(fh=list(range(1, 13)))\n\n# combining the forecasts\npreds = seas_adj_pred + seas_preds\n```"]