- en: 'Mastering Modular Programming: How to Take Your Python Skills to the Next Level'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精通模块化编程：如何提升你的 Python 技能
- en: 原文：[https://towardsdatascience.com/mastering-modular-programming-how-to-take-your-python-skills-to-the-next-level-ba14339e8429](https://towardsdatascience.com/mastering-modular-programming-how-to-take-your-python-skills-to-the-next-level-ba14339e8429)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/mastering-modular-programming-how-to-take-your-python-skills-to-the-next-level-ba14339e8429](https://towardsdatascience.com/mastering-modular-programming-how-to-take-your-python-skills-to-the-next-level-ba14339e8429)
- en: Best Practices for Writing Modular Python Code
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写模块化 Python 代码的最佳实践
- en: '[](https://federicotrotta.medium.com/?source=post_page-----ba14339e8429--------------------------------)[![Federico
    Trotta](../Images/e997e3a96940c16ab5071629016d82fd.png)](https://federicotrotta.medium.com/?source=post_page-----ba14339e8429--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ba14339e8429--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ba14339e8429--------------------------------)
    [Federico Trotta](https://federicotrotta.medium.com/?source=post_page-----ba14339e8429--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://federicotrotta.medium.com/?source=post_page-----ba14339e8429--------------------------------)[![Federico
    Trotta](../Images/e997e3a96940c16ab5071629016d82fd.png)](https://federicotrotta.medium.com/?source=post_page-----ba14339e8429--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ba14339e8429--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ba14339e8429--------------------------------)
    [Federico Trotta](https://federicotrotta.medium.com/?source=post_page-----ba14339e8429--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ba14339e8429--------------------------------)
    ·9 min read·Apr 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----ba14339e8429--------------------------------)
    ·阅读时间 9 分钟·2023 年 4 月 10 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/7aee29745d7f4d3995e0b85e5c9f67d3.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7aee29745d7f4d3995e0b85e5c9f67d3.png)'
- en: Image by [Jeon Sang-O](https://pixabay.com/it/users/jeonsango-1594796/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1498954)
    on [Pixabay](https://pixabay.com/it//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1498954)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[全尚烨](https://pixabay.com/it/users/jeonsango-1594796/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1498954)提供，来源于[Pixabay](https://pixabay.com/it//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=1498954)
- en: I recently wrote an article on [Python classes](https://medium.com/towards-data-science/python-classes-made-easy-the-definitive-guide-to-object-oriented-programming-881ed609fb6),
    where I said that classes are used as modules in Python, very often.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近写了一篇关于[Python 类](https://medium.com/towards-data-science/python-classes-made-easy-the-definitive-guide-to-object-oriented-programming-881ed609fb6)的文章，其中提到类在
    Python 中经常作为模块使用。
- en: In this article, I’ll describe what a module is, how to use modules, and why
    you should use modules in Python.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将描述什么是模块，如何使用模块，以及为什么你应该在 Python 中使用模块。
- en: At the end of this article, if you’ve never used a module, you’ll switch your
    mind. You’ll change your programming approach and use modules whenever you can.
    I’m sure of that.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章的最后，如果你从未使用过模块，你将改变看法。你会改变你的编程方式，并在每次可能的情况下使用模块。我对此深信不疑。
- en: 'I can understand you: when I discovered modules and their power, I started
    to use them every time I can.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我能理解你的感受：当我发现了模块及其强大功能时，我开始在每次可能的情况下使用它们。
- en: 'The only difference between me and you is that I didn’t find any complete and
    valuable resource that treated **all you need** to know about Python modules:
    this is why I’ve created this article.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我和你之间唯一的区别是我没有找到任何完整而有价值的资源来讲解**你需要**了解的所有关于 Python 模块的知识：这就是我创建这篇文章的原因。
- en: I found fragmented resources here and there. So, thanks to these and thanks
    to the advice of senior developers, after some days, I had a complete picture
    of Python modules.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现了一些零碎的资源。感谢这些资源和高级开发者的建议，经过几天的学习，我对 Python 模块有了全面的了解。
- en: After this article, I’m sure you’ll have the picture clear too and don’t need
    anything else to search to understand this topic. So, if you’re a beginner in
    Python, or if you’re a “navigate” Pythonista but never developed with modules,
    then this article is definitely for you.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读完这篇文章后，我相信你也会清楚地理解这个主题，并不需要其他资料去了解它。因此，如果你是 Python 新手，或者你是一个“摸索”中的 Python
    爱好者但从未使用过模块，那么这篇文章绝对适合你。
- en: Why you should modularize your Python code
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么你应该将 Python 代码模块化
- en: 'First of all, let’s start our discussion with some reasons why you should use
    modules in Python. I found 6:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们从一些你应该在 Python 中使用模块的理由开始讨论。我找到了 6 个理由：
- en: '**Better code organization**. Modules allow developers to organize their code
    into reusable units; these can be imported and used in other programs. This means
    that you shouldn’t think anymore about your Python application as a whole program
    where you write all your code. You’ll have a main file where you load and use
    the modules. We’ll see the idea in a practical way in the next paragraphs.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更好的代码组织**。模块允许开发者将代码组织成可重用的单元；这些单元可以被导入并在其他程序中使用。这意味着你不再需要把你的 Python 应用程序看作是一个写满所有代码的整体程序。你会有一个主文件，在其中加载和使用模块。我们将在接下来的段落中以实际的方式看到这个理念。'
- en: '**Code reusability**. This is one of the advantages of modules: you create
    an independent program that can be imported and reused in other programs. Maybe,
    with slight changes; but often, you can use it as is. This helps us save a lot
    of time and the amount of code written: writing similar code occurs more often
    than you think.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**代码重用性**。这是模块的一个优点：你创建一个独立的程序，可以在其他程序中导入和重用。可能需要稍微修改一下；但通常，你可以直接使用。这帮助我们节省了大量时间和编写代码的量：编写类似的代码发生的频率比你想象的要高。'
- en: '**Namespace management**. If you''ve ever coded in any language, you’ve faced
    several moments where you have to name variables. Well, as the code grows into
    your application, you may need to write variables with similar names. Modularity
    helps us fix names so that we don’t have to recreate the wheel each time because
    we’ll use names created in our modules even in our main file.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**命名空间管理**。如果你曾经用任何语言编码，你肯定遇到过需要命名变量的情况。随着代码在应用程序中增长，你可能需要写出具有相似名称的变量。模块化帮助我们修复名称，以便我们不必每次都重新发明轮子，因为我们将使用在模块中创建的名称，即使在主文件中也是如此。'
- en: '**Collaboration**. When working on a firm or when collaborating with friends
    on distributed projects (especially using Git), modularity allows us to work independently
    on modules. This way we can avoid overlapping problems in the same file.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**协作**。当在公司工作或与朋友合作进行分布式项目（特别是使用 Git）时，模块化允许我们独立工作在模块上。这样，我们可以避免在同一文件中出现重叠问题。'
- en: '**Easier debugging**. If you’ve debugged a 200 lines application you know how
    painful it is. Finding an error where you have tens of lines of code can need
    days. Modularity avoids all this pain because the modules are independent of each
    other. They represent small programs, so we can debug them easier than a monolith
    application.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更容易调试**。如果你调试过一个200行的应用程序，你就知道这有多痛苦。找到一个有几十行代码的错误可能需要几天时间。模块化避免了所有这些痛苦，因为模块彼此独立。它们代表了小程序，因此我们可以比调试一个整体应用程序更容易地调试它们。'
- en: '**Performance optimization**. Modules can optimize the performance of your
    machine because we can import only the code we need in the particular application
    we are developing.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**性能优化**。模块可以优化你的机器性能，因为我们可以只导入我们在特定应用程序中需要的代码。'
- en: What are modules in Python?
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中的模块是什么？
- en: 'As [1] says: “*By module, in Python, we intend packages and libraries, but
    even any piece of code that is separable from other code and that can work on
    its own”*.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如[1]所说：“*在 Python 中，模块指的是包和库，但也包括任何可以与其他代码分离且可以独立工作的代码片段*”。
- en: 'So, basically, every Python program is a module because it can work on its
    own. But this doesn’t mean we can import all modules. Or, better: this doesn’t
    mean it always makes sense to import a module into another file.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，每个 Python 程序都是一个模块，因为它可以独立工作。但这并不意味着我们可以导入所有模块。或者，更好地说：这并不意味着将一个模块导入到另一个文件中总是有意义的。
- en: 'For example, say you want to create a Python file that checks if three folders
    exist. If not, it creates them. It can be something like that:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你想创建一个 Python 文件，检查是否存在三个文件夹。如果不存在，它将创建这些文件夹。它可能类似于这样：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This file can be saved as `folders.py` and run. It works on its own, and so
    is a module. But let me ask you a question: does it make sense to import it into
    another Python file?'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件可以保存为`folders.py`并运行。它可以独立工作，因此是一个模块。但让我问你一个问题：将它导入到另一个 Python 文件中是否有意义？
- en: Stop reading for a moment and answer this question.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 停下来思考一下，并回答这个问题。
- en: 'Well, the answer is no, and for a simple reason: it’s too specific. I mean:
    if you ever need to recreate these three folders into another folder, you can
    move the file into the new folder and run it.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，答案是否定的，原因很简单：它太具体了。我的意思是：如果你需要将这三个文件夹重新创建到另一个文件夹中，你可以将文件移动到新文件夹中并运行它。
- en: 'So, when we import modules what we want is generality. This is why we create
    classes and functions as modules: because they’re general. If you want to reuse
    the above module in other files, you have to generalize it. For example, we can
    create a function like the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'So, this function can be useful to check if, in a specific folder, there are
    three general folders. But this time, the names can be any because they are passed
    as arguments of the function. Then, if they do not exist, they are created. So,
    for example, we can invoke it like so:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And then our function checks if “audio”, “image” and “documents” exist as folders
    in the directory where your Python file is. If not, it creates them.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'This code makes sense to be imported into another Python file because is general:
    wherever we may need to check for three folders, we can use it. We just need to
    declare the name of the three folders.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: How to use modules in Python
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Schematically, modules work like that:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/64d582ba1b9dd824fd71bafc7de85593.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: How modules work schematically. Image by Author.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: We have a “principal” Python file that usually can be called `main.py`. In that
    Python file, we import two modules.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Maybe you didn’t notice, but in the above code, we have imported `os` that
    is a Python module that helps create, manage, and remove directories. This means
    that, when managing directories, we don’t need to create our custom functions
    (or classes): we can use the `os` module and apply it to our specific cases. For
    example, we have used `os.makedirs` that creates folders.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'But apart from known modules and packages, how can we use modularity in Python
    in our everyday programming activities? Well, if you’ve never used the power of
    modularity, you’ll have to “switch” your mind; but believe me: it’s worth it!'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don’t use modules, your Python applications look something like that
    one:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8a41ae08b68f7b7e1c62481ffd3000f8.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: A monolith Python application. Image by Author.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in one file you:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Create functions and classes.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invoke the function and classes created with variables or whatever you may need.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Instead, if you use modules, your Python application becomes something like
    this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1450b35cf5692b0d77caa10d15d31fe5.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: A modularized Python application. Image by Author.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: So, this way, you create two functions and two classes in separate Python files
    — that are modules. Then, you import them into the main file.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, your folder organization should be something like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Of course, you can create how many `packages` subfolders you may need.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: The important thing is that in each subfolder there must be an `__init__.py`
    file.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see what it is, and how to use it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: A practical example in Python
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, let’s make a practical Python example. Let''s create a project called `my_project`
    where we have:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: A `main.py` file that is our main file.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A subfolder called `operations`, where we’ll have three Python files: `__init__.py`,
    `addition.py`, `subtraction.py`.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, this is our structure:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We want to create two simple modules that will make the sum and the difference
    of two integers. If the input is not an integer, the program will return an error.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the two modules can be something like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'and this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we’d like to import these two modules into our main file. To do so, we
    have to write the following in the `__init__.py`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So, the `__init__.py` is a Python file that is necessary to use when we work
    with modules because, somehow, it tells the main file that in the folder `operations`
    there are some packages to import. So, in the `__init__.py`, we have to declare
    all the functions that are in the packages, as shown above.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the `main.py` can be programmed, for example, like so:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'So, a couple of considerations on the main file:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: As the modules contain just one function each, we could write `from operations.addition
    import *`. Anyway, is a good practice to import just the functions and the classes
    we use from a module.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see, the main file is very clean. It just has the imports, the declaration
    of the variables using the imported methods, and the print of the results.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Final tips
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'My advice, which is taken from seniors, is to create a class for each module
    because it’s more maintainable. However, this is not a must: it depends on what
    you are coding.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: In the above example, I created two separate modules containing one function
    each. One alternative would be to create a class called, for example, `Operations`
    and to code the two functions as its method.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: This would be helpful because we’d create “similar functions” in just one file
    and make one import in the main file.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'So, don’t always take advice as a must: take them, but reason on what you need
    to create, having in mind the optimization you need.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Conclusions
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, tell me: how excited are you by this methodology? Well, when I clarified
    my mind on modules I started applying them to my daily work, and, believe me,
    it only got better.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'So, I hope I have clarified this topic to you; and if I didn’t, please: let
    me know in the comment. I can create other articles as a corollary to that one.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '*Subscribe to* [*my Substack newsletter*](https://federicotrotta.substack.com/?r=1ep1nf&utm_campaign=pub-share-checklist)
    *to get more on Python.*'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Join Medium through* [***my referral link***](https://federicotrotta.medium.com/membership)*:
    unlock all the content on Medium for 5$/month (with no additional fee).*'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Find/contact me here:* [*https://bio.link/federicotrotta*](https://bio.link/federicotrotta)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Found it useful?* ***Buy me a*** [***Ko-fi***](https://ko-fi.com/federicotrotta)***.***'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*More from me:*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[](/python-classes-made-easy-the-definitive-guide-to-object-oriented-programming-881ed609fb6?source=post_page-----ba14339e8429--------------------------------)
    [## Python Classes Made Easy: The Definitive Guide to Object-Oriented Programming'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Boost your Python skills with this comprehensive class reference
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'towardsdatascience.com](/python-classes-made-easy-the-definitive-guide-to-object-oriented-programming-881ed609fb6?source=post_page-----ba14339e8429--------------------------------)
    [](/python-loops-a-complete-guide-on-how-to-iterate-in-python-b29e0d12211d?source=post_page-----ba14339e8429--------------------------------)
    [## Python Loops: A Complete Guide On How To Iterate in Python'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging the power of loops in Python
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/python-loops-a-complete-guide-on-how-to-iterate-in-python-b29e0d12211d?source=post_page-----ba14339e8429--------------------------------)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '*Videography:*'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[1] If __name__ == “__main__” for Python Developers ([video](https://www.youtube.com/watch?v=NB5LGzmSiCs))'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
