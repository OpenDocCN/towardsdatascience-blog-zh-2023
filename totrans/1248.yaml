- en: How to Style Plots with Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-style-plots-with-matplotlib-45591394ff98](https://towardsdatascience.com/how-to-style-plots-with-matplotlib-45591394ff98)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Quick Success Data Science
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Don’t settle for the defaults!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@lee_vaughan?source=post_page-----45591394ff98--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----45591394ff98--------------------------------)[](https://towardsdatascience.com/?source=post_page-----45591394ff98--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----45591394ff98--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----45591394ff98--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----45591394ff98--------------------------------)
    ·8 min read·Nov 8, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b56ed3118211d9fd51f6edb70d57dec3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Setting the Style (Source: Cole Keister on Unsplash)'
  prefs: []
  type: TYPE_NORMAL
- en: Decades ago, my mother gave me a maroon velour tracksuit as a Christmas present.
    It was a God-awful thing, and I replied that it wasn’t really in style. She snorted
    derisively and said, “*You* set the style! Be a trendsetter!”
  prefs: []
  type: TYPE_NORMAL
- en: Needless to say, I did NOT set the style, but my wife still teases me with the
    “You set the style!” quote. I *do* set the style, however, when using Matplotlib,
    and unlike a velour tracksuit, that’s a good thing.
  prefs: []
  type: TYPE_NORMAL
- en: For convenience, Python’s Matplotlib library lets you override its default plotting
    options. You can use this powerful feature to not only customize plots but to
    apply consistent, automatic, and reusable styles for reports, publications, and
    presentations.
  prefs: []
  type: TYPE_NORMAL
- en: In this *Quick Success Data Science* project, we’ll take a quick look at how
    to style plots with Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: Styling Options in Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you’ve used Matplotlib much, you’ve probably changed the default settings
    for a plot, such as for the color of a line, by passing *new* values to methods
    that made the plot. But what if you want to set these values for *multiple* plots
    *at the same time*, so that all the curves are the same color, or to *cycle through*
    a pre-defined order of colors?
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, you can do this by using either:'
  prefs: []
  type: TYPE_NORMAL
- en: Runtime Configuration Parameters
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Style Files
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Style Sheets
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s look at each of these in turn.
  prefs: []
  type: TYPE_NORMAL
- en: Changing Runtime Configuration Parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One way to style plots is to set the parameters at *runtime*, using an instance
    of the `RcParams` class. The name of this class stands for *runtime configuration
    parameters*, and you run it from a notebook, script, or console using either the
    `pyplot` approach or the object-oriented style. (If you’re not familiar with these
    two methods, see my article, [*Demystifying Matplotlib*](https://medium.com/towards-data-science/demystifying-matplotlib-3895ab229a63)).
  prefs: []
  type: TYPE_NORMAL
- en: The plotting parameters are stored in the `matplotlib.rcParams` variable, which
    is a dictionary-like object. There’s a very long list of configurable parameters,
    which you can view in the Matplotlib [docs](https://matplotlib.org/stable/api/matplotlib_configuration_api.html#matplotlib.rcParams).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s look at a `pyplot` example in which we standardize the size of figures,
    use *red* for all plotted lines, and cycle through two different line styles.
    This means that the first line plotted will always have a certain consistent style
    and that the second line plotted will have another consistent style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Notice here that we also import Matplotlib as `mpl`. Importing Matplotlib in
    this manner gives us access to more features than in the `pyplot` module alone.
    We also import `cycler`. The `Cycler` class will let us specify which colors and
    other style properties we want to cycle through when making multi-data plots.
    You can read more about it [here](https://matplotlib.org/stable/users/explain/artists/color_cycle.html).
  prefs: []
  type: TYPE_NORMAL
- en: To access a property in `rcParams`, you treat it like a dictionary key. You
    can find the valid parameter names by entering `mpl.rcParams.keys()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next three lines, we set the figure size, line color, and line styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'NOTE: You can also set parameters through `pyplot`, using syntax like `plt.rcParams[‘lines.color’]
    = ‘black’`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To cycle through the line styles, we used the `axes.prop_cycle` key and then
    passed the cycler factory function the parameter (`‘linestyle’`) and a list of
    the styles (solid and dotted). These defaults have now been reset for all plots
    that you will make in the current session.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test it, let’s generate some data and plot it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c47e2ef72dd4f2bebea31ae41b9f0bb0.png)'
  prefs: []
  type: TYPE_IMG
- en: The styled plot (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Normally, this code would produce a plot with two solid lines, one blue and
    one orange. We overrode the defaults, however, so that we got two red lines distinguished
    by different line styles.
  prefs: []
  type: TYPE_NORMAL
- en: Note that if you were to plot *three* lines in the previous plot, the *third*
    line would cycle back to using the *solid* line style, and you’d have one dotted
    and two solid lines. If you want three different styles, you’ll need to add the
    extra style to the cycler.
  prefs: []
  type: TYPE_NORMAL
- en: 'For convenience, Matplotlib comes with functions for simultaneously modifying
    multiple settings in a single group using *keyword arguments*. Here’s an example
    where we first restore the default settings and then change the line width:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/12bbadf7e7230f444f544feb20c758c9.png)'
  prefs: []
  type: TYPE_IMG
- en: The restyled plot (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: In this plot, the default blue-orange color scheme is restored but the line
    width is customized to `5`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that you can also reset the defaults using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Creating and Using a Style File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can save changes you make to the Matplotlib defaults in a *file*. This lets
    you standardize plots for a report or presentation and share the customization
    within a project team. It also reduces code redundancy and complexity by letting
    you preset certain plot parameters and encapsulate them in an external file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a simple style file that sets some standards for plots, such as
    the figure size and resolution, the use of a background grid, and the typeface
    and size for titles, labels, and ticks. In a text editor, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'For Matplotlib to easily find this file, you need to save it in a specific
    location. First, find the location of the *matplotlibrc* file (where Matplotlib
    stores its defaults) by entering the following in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the output for my computer (yours will be different):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This shows you the path to the *mpl-data* folder, which contains the *matplotlibrc*
    file and a folder named *stylelib*, among others. Save your style file into the
    *stylelib* folder as *scientific_styles.mplstyle* (replacing the *.txt* extension).
  prefs: []
  type: TYPE_NORMAL
- en: 'NOTE: If Matplotlib has trouble finding this file later, you might need to
    restart the kernel.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now, let’s use this file to create a standardized plot. After importing `pyplot`,
    use its `style.use()` method to load the style file without its file extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, generate an empty figure using the object-oriented style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1d89d4842049de6ad6497cee15cda120.png)'
  prefs: []
  type: TYPE_IMG
- en: The standardized style (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: When you saved your style file, you might have noticed that the *stylelib* folder
    was full of preexisting *mplstyle* files. These files create many different plot
    formats, and you can look through them for clues on how to write your own style
    files. In the next section, we’ll use one of these files to override some of Matplotlib’s
    default values.
  prefs: []
  type: TYPE_NORMAL
- en: Applying Style Sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides letting you customize your own plots, Matplotlib provides *pre-defined*
    style sheets that you can import by using `style.use()`. These are the same format
    as the style file you created in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Style sheets look the same as the *matplotlibrc* file, but within one, you can
    set only `rcParams` that are related to the *actual style of the plot*. This makes
    style sheets portable between different machines because there’s no need to worry
    about uninstalled dependencies. But don’t worry, only a few `rcParams` can’t be
    reset, and you can view a list of these [here](https://matplotlib.org/stable/api/style_api.html#matplotlib.style.use/).
  prefs: []
  type: TYPE_NORMAL
- en: To see examples of the available style sheets, visit Matplotlib’s [Style Sheet
    Reference page](https://matplotlib.org/stable/gallery/style_sheets/style_sheets_reference.html).
    These examples take the form of a strip of thumbnails, as shown below. Some of
    the style sheets emulate popular plotting libraries like Seaborn and ggplot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cce2091300acca7d0b843d50b6450cb3.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of the grayscale style sheet (from matplotlib.org)
  prefs: []
  type: TYPE_NORMAL
- en: An important style sheet to be aware of is the *seaborn-colorblind* sheet. This
    style sheet uses “colorblind-safe” colors designed for the 5 to 10 percent of
    the population that suffers from color blindness.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Let’s try out a scatterplot using the *grayscale* style sheet that ships with
    Matplotlib. First, import NumPy and Matplotlib and select the `grayscale` style
    sheet.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, generate some dummy data for making two different point clouds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finish by setting up and executing the plot using the `pyplot` approach. Use
    log scales for both axes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b3e63df8dc9a5322207486ed2ca007da.png)'
  prefs: []
  type: TYPE_IMG
- en: A plot made with the grayscale style sheet (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: The point locations you see might differ from this figure due to the use of
    randomly generated data.
  prefs: []
  type: TYPE_NORMAL
- en: If you open the *grayscale.mplstyle* file*,* you’ll see that it looks a lot
    like the *scientific_styles.mplstyle* file that we made in the “Creating and Using
    a Style File” section. So, if an existing style sheet is not quite right for your
    purposes, you can always copy the file, edit it, and save it as a new style sheet!
  prefs: []
  type: TYPE_NORMAL
- en: Limiting Styling to Code Blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to use a style for only a *specific block* of code, rather than
    your entire script or notebook, the style package provides a context manager for
    limiting your changes to a specific scope. For more on this, see “Temporary styling”
    in the [docs](https://matplotlib.org/stable/users/explain/customizing.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib provides three main methods for styling plots. You can change the
    *runtime configuration parameters* within your script*,* make your own *style
    file* and save it in the *stylelib* folder, or use a pre-defined *style sheet*
    from the *stylelib* folder. You can apply these style changes to your entire code
    or to specified code blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Storing your style parameters in a file gives you the ability to share them
    with team members so that everyone’s plots have a consistent, unified look. Besides
    aiding the customization of plots, these techniques let you write cleaner code
    through the process of abstraction.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for reading and please follow me for more *Quick Success Data Science*
    projects in the future. For more Matplotlib tips and tricks, check out Chapter
    19 of my book, [*Python Tools for Scientists*](https://a.co/d/ggipGxL).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://a.co/d/ggipGxL?source=post_page-----45591394ff98--------------------------------)
    [## Python Tools for Scientists: An Introduction to Using Anaconda, JupyterLab,
    and Python''s Scientific…'
  prefs: []
  type: TYPE_NORMAL
- en: 'Python Tools for Scientists: An Introduction to Using Anaconda, JupyterLab,
    and Python''s Scientific Libraries…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: a.co](https://a.co/d/ggipGxL?source=post_page-----45591394ff98--------------------------------)
  prefs: []
  type: TYPE_NORMAL
