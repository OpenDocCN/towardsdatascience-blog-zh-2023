- en: VIM Tutorial — Edit Text Like a Pro
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/vim-tutorial-edit-text-like-a-pro-ea13e45010f5](https://towardsdatascience.com/vim-tutorial-edit-text-like-a-pro-ea13e45010f5)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An easy-to-follow tutorial for Vim text editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@fmnobar?source=post_page-----ea13e45010f5--------------------------------)[![Farzad
    Mahmoodinobar](../Images/2d75209693b712300e6f0796bd2487d0.png)](https://medium.com/@fmnobar?source=post_page-----ea13e45010f5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ea13e45010f5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ea13e45010f5--------------------------------)
    [Farzad Mahmoodinobar](https://medium.com/@fmnobar?source=post_page-----ea13e45010f5--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ea13e45010f5--------------------------------)
    ·12 min read·Mar 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5b1cb54fed04ecc490575d85a387c965.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Pereanu Sebastian](https://unsplash.com/@sebastian123) on [Unsplash](https://unsplash.com/photos/qFH7-yKoxik)
  prefs: []
  type: TYPE_NORMAL
- en: Vim is a powerful and highly customizable text editor that has been around since
    1991\. It is known for its modal editing interface — meaning it allows users to
    switch between different modes for editing, navigating, and selecting text. Vim
    is widely used by programmers and other power users who need a fast and efficient
    way to edit and manipulate text files. One of the main advantages of using Vim
    is its speed and efficiency. Once you learn the commands and master the interface,
    you can perform complex editing tasks with just a few keystrokes.
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we are going to go over the most common commands used in Vim.
    I have included a cheat sheet right after this section, which can be used for
    future reference. Cheat sheet is followed by a detailed tutorial of the commands.
    My recommendation would be to go through the detailed tutorial section first and
    then for future use, you can simply refer to the cheat sheet table.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: '*(All images, unless otherwise noted, are by the author.)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@fmnobar/membership?source=post_page-----ea13e45010f5--------------------------------)
    [## Join Medium with my referral link - Farzad Mahmoodinobar'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Farzad (and other writers on Medium). Your membership
    fee directly supports Farzad and other…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@fmnobar/membership?source=post_page-----ea13e45010f5--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Overview Table of Important Vim Commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following table summarizes some of the most important Vim commands that
    you need to know. Each command is described in more detail in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ba4c8f28dedb2bfe64420dfc6cf862fc.png)'
  prefs: []
  type: TYPE_IMG
- en: Vim Commands Cheat Sheet
  prefs: []
  type: TYPE_NORMAL
- en: Vim Commands — Detailed Tutorial with Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we will walk through some of the most common Vim commands in
    detail. We will also apply each of the commands to text files to see the results.
    We will be using the Command Line Interface (CLI) to run Vim commands (if you
    need a refresher on CLI, you can visit this [CLI tutorial]()). If you are ready,
    open the CLI and let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: 1\. “`vim"` — Create a File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First we will create a file named `demo.txt` so that we can apply the commands
    in that text file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This command creates a text file using Vim in the CLI. Once you run this command,
    you will see a blank page in your CLI similar to this picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/747655b58ac6ab0d96df9504425fe4fc.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the file is empty and we only see the name of the file in the
    bottom left corner. Let’s see how we can add some text in the text file.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. “i” — Insert
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `i` command stands for “insert” and it is used to enter insert mode in Vim.
    When you are in insert mode, you can enter and edit text just like in any other
    text editor. To use this command, simply press `i` while in normal mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and press `i` and then type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure not to press anything else. Below is what my CLI looks like at this
    point:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b8874d9cf28ac8e1df355dcf047c46fc.png)'
  prefs: []
  type: TYPE_IMG
- en: We see the text in that picture and also in the very bottom we can see that
    we are in the `— INSERT —` mode. In order to come out of that mode, simply press
    the escape key on your keyboard (make sure to do this before going to the next
    step).
  prefs: []
  type: TYPE_NORMAL
- en: So far we have added this text in the file but we have not saved the changes
    yet. Let’s look at that next.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. “:w” — Write
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `:w` command stands for “write” and it is used to save changes to a file
    in Vim. To use this command, simply type `:w` while in normal mode and press the
    return key (or enter) on your keyboard. This will save any changes you have made
    to the file and below is how it looks on my CLI after this change:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dd91ada46dae66097fac61c783599406.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Pro Tip:** Note that the “Write” command was entered after a “:”. In Vim,
    we enter the “command” mode by adding the command `:`. In other words, first we
    enter the command mode by typing `:` and then we type `w`, which becomes the “Write”
    command overall. We can always exit out of the command mode by pressing the escape
    button. We will use the command mode more in the next parts.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now that we have saved our changes, we can quit (i.e. close) the file, in the
    next step.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. "`:q"` — Quit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `:q` command stands for “quit” and it is used to exit Vim. To use this command,
    simply type `:q` while in normal mode (and press return/enter on your keyboard).
    If you have unsaved changes in the file, Vim will prompt you to save them before
    quitting.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. “:wq” — Write Quit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `:wq` command stands for “write quit” and it is used to save changes to
    a file and exit Vim in one command (instead of going through them separately,
    like we did in the previous example). To use this command, type `:wq` while in
    normal mode. This will save any changes you have made to the file and exit Vim.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. “h”, “j”, “k”, “l”, “w”, “b” — Navigation Through Text Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These commands are used to move the cursor around in Vim. `h` moves the cursor
    left, `j` moves it down, `k` moves it up, and `l` moves it right. `w` moves the
    cursor to the beginning of the next word and `b` moves the cursor to the beginning
    of the current word. These commands are used in normal mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to practice these, go ahead and open the file that we had created
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now that you have the file open in Vim, you can use the navigation keys to move
    around — give it a try!
  prefs: []
  type: TYPE_NORMAL
- en: '**Pro Tip:** Note the commands to open an existing file and creating a new
    file are the same. If the file already exists, Vim opens the existing file. If
    the file does not exist, Vim will create a new file.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 7\. “x” — Delete
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `x` command is used to delete the character under the cursor. To use this
    command, simply place the cursor on the character you want to delete and press
    “x” while in normal mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use this to delete letters “ic” from “Topic”. What I see is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4e444b3780e786236fe40bbe26d093c5.png)'
  prefs: []
  type: TYPE_IMG
- en: But what if we deleted these by mistake? Let’s see how we can undo this action
    in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. “u” — Undo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `u` command is used to undo changes in Vim. To use this command, simply
    press `u` while in normal mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'I pressed `u` twice and the deletions were undone as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/10e5c4395f4b369cd6bdff1b2ff1359b.png)'
  prefs: []
  type: TYPE_IMG
- en: 9\. “Ctrl-r” — Redo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Ctrl-r` command is used to redo changes in Vim. To use this command, simply
    press `Ctrl-r` while in normal mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say we changed our mind (again) and we actually meant to delete those
    two letters. I hit `Ctrl-r` twice and in the below screenshot we see that the
    letters are deleted once again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0c89f0c6cd5de030250b030380671d65.png)'
  prefs: []
  type: TYPE_IMG
- en: Ok. Let’s leave these changes for now. Let’s next talk about searching for a
    term using Vim.
  prefs: []
  type: TYPE_NORMAL
- en: 10\. “dd” — Delete Line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `dd` command is used to delete the entire line in Vim. To use this command,
    simply press `dd` while in normal model.
  prefs: []
  type: TYPE_NORMAL
- en: 11\. “/search_term” — Search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `/` command is used to search for a term in Vim. To use this command, type
    `/` followed by the term you want to search for and press enter. Vim will highlight
    the next occurrence of the term in the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s give this a try. I searched for “medium” using `/medium` and below are
    the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/50cbd69e468b6e338d7046bce31dedfb.png)'
  prefs: []
  type: TYPE_IMG
- en: As we see in the picture, the cursor jumped to the beginning of the word “medium”
    in the last line of text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s go ahead and highlight the search results using: `:set hlsearch`
    and now the searched term (i.e. “medium” in this example) is highlighted as shown
    in the picture below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1b0e78e49bdf3915b4e5d5cbcacf7d83.png)'
  prefs: []
  type: TYPE_IMG
- en: We can turn off this highlighted search using `:set nohlsearch`.
  prefs: []
  type: TYPE_NORMAL
- en: 12\. “:s/search_term/replace_term/g” — Replace
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `:s/search_term/replace_term/g` command is used to replace all occurrences
    of a term in Vim. To use this command, type `:s/search_term/replace_term/g` while
    in normal mode and press enter. Vim will replace all occurrences of the search
    term with the replace term.
  prefs: []
  type: TYPE_NORMAL
- en: 'I tried this by replacing “Tutorial” with “guideline” with the following command:
    `:s/Tutorial/Guideline/g`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Below are the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3c4fa7cccbc45d599f744dbc16305779.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, let’s talk about how we can accomplish copying a text and then pasting
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 13\. “yy” — Yank
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `yy` command is used to copy a line of text in Vim. To use this command,
    simply place the cursor on the line you want to copy and press `yy` while in normal
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: 14\. “p” — Paste
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `p` command is used to paste the text that has been yanked or deleted. To
    use this command, simply press `p` while in normal mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try the yank and paste commands. Go ahead and hit `yy` at the very beginning
    of the file and then press `p` and see what happens. Note that nothing really
    happens once you press `yy` but it is actually happening in the background. Once
    you press `p`, you will see the results. I happened to press `p` twice and below
    are the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d2e4e7ffb5c3b1bc56f0bfd78e254ae3.png)'
  prefs: []
  type: TYPE_IMG
- en: 15\. "`:set number"` — Show Line Numbers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `:set number` command is used to show line numbers in Vim. To use this command,
    type `:set number` while in normal mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'This one is self-explanatory. Below is what my CLI looks like after I enter
    the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/28c21de14e7767f8b17bdb65fb4937a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 16\. “:set nonumber” — Hide Line Numbers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `:set nonumber` command is used to hide line numbers in Vim. To use this
    command, type `:set nonumber` while in normal mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'And below are the results of hiding line numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8ff19d472f522a24d876804e60234157.png)'
  prefs: []
  type: TYPE_IMG
- en: 17\. “:set paste” — Paste Without Auto-Indent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `:set paste` command is used to paste text without auto-indentation. To
    use this command, type `:set paste` while in normal mode, then paste the text,
    and type `:set nopaste` to exit paste mode. An example of a use case for this
    command is when pasting textual inputs that are sensitive towards indentation,
    such as programming scripts (think about a for loop in Python or similar).
  prefs: []
  type: TYPE_NORMAL
- en: 18\. “:set spell” — Spell Check
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `:set spell` command is used to enable spell checking in Vim. To use this
    command, type `:set spell` while in normal mode. Vim will highlight any words
    that are misspelled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see if Vim identifies anything in our file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/17b5a63e5f74d1a7f2c7f29b30535608.png)'
  prefs: []
  type: TYPE_IMG
- en: As expected, my name is highlighted and is not recognized by Vim as a correctly-spelled
    word — I won’t take that personally!
  prefs: []
  type: TYPE_NORMAL
- en: 19\. “:set nospell” — Disable Spell Check
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `:set nospell` command is used to disable spell checking in Vim. To use
    this command, type `:set nospell` while in normal mode.
  prefs: []
  type: TYPE_NORMAL
- en: 20\. “:w filename” — Write to a File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `:w filename` command is used to write the contents of the current file
    to a new file with the specified filename. To use this command, type `:w filename`
    while in normal mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try this one. First I will go ahead and save the content of this file
    into a new file named `demo2.txt` using the following command: `:w demo2.txt`.
    Then I closed out Vim (using `:q!`) and then looking at the files (using the `ls`
    command in the CLI), I see the new file named `demo2.txt` is now added there.
    Let’s open it with Vim and see how it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/11286f918d4a8cd832777a7e7158b297.png)'
  prefs: []
  type: TYPE_IMG
- en: 21\. “:q!” — Quit Without Saving
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `:q!` command is used to exit Vim without saving any changes to the file.
    To use this command, type `:q!` while in normal mode. In case you noticed in the
    previous example, I exited out of Vim using `:q!` so we expect that the changes
    were not saved. Let’s open `demo.txt` and verify this. Below are the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fdb0922216c8bb2a2543fe2fad922cfe.png)'
  prefs: []
  type: TYPE_IMG
- en: As expected, the changes were not saved and I ended up with the original file.
  prefs: []
  type: TYPE_NORMAL
- en: 22\. “:e filename” — Open a File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `:e filename` command is used to open a file in Vim. To use this command,
    type `:e filename` while in normal mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the `demo.txt` file open, let’s open the second file named
    `demo2.txt` using this command and below are the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a5dc0e81f5aa16dfefdd6107bfcbb1fc.png)'
  prefs: []
  type: TYPE_IMG
- en: As expected, the second file was opened.
  prefs: []
  type: TYPE_NORMAL
- en: 23\. “:set tabstop=4” — Set Tab Width
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `:set tabstop=4` command is used to set the width of tabs in Vim to 4 spaces.
    To use this command, type `:set tabstop=4` while in normal mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try this one. I will first set the tabstop to 4, enter the insert mode
    and then add a tab to the beginning of the second line in the file and below are
    the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ccb7bc0e5dce69971feb5ed5f7ecfc03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let’s change the tabstop size to 8 and see how it changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49398ff13b736ce61fb2a72cfea4f630.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that the change was applied automatically the the existing tab in the file
    and the tab size was increased from 4 to 8, as shown in the picture above.
  prefs: []
  type: TYPE_NORMAL
- en: 24\. “:set expandtab” — Use Spaces Instead of Tabs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `:set expandtab` command is used to replace tabs with spaces in Vim. To
    use this command, type `:set expandtab` while in normal mode. This one is self-explanatory
    so let’s move to the next command.
  prefs: []
  type: TYPE_NORMAL
- en: 25\. “:set syntax=python” — Syntax Highlighting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `:set syntax=python` command is used to enable syntax highlighting for Python
    code in Vim. To use this command, type `:set syntax=python` while in normal mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'I was tempted to include this one because it is related to what I do and I
    use Python on a daily basis. In order to test this, let’s take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '1\. Open a new Python file using Vim by: `vim demo.py` 2\. Paste the following
    command (selected from my post about [Multivariate Analysis](https://medium.com/towards-data-science/multivariate-analysis-going-beyond-one-variable-at-a-time-5d341bd4daca))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Below are the results that I see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/df10406a4309b8f42ecd2445af99f9e4.png)'
  prefs: []
  type: TYPE_IMG
- en: '3\. Then I set the syntax to Python using: `:set syntax=python`'
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Then I turn on the syntax using: `:syntax on`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Below are the results, which follows Python syntax as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/989e8d812fb7f9a3f3c7a48b45eb53cb.png)'
  prefs: []
  type: TYPE_IMG
- en: As expected, the Python syntax is recognized and color-coded.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this post we introduced Vim, a versatile text editor within the Command Line
    Interface (CLI), utilized by programmers and advanced users. Then we walked through
    some of the most common commands used in Vim along with examples for each. I hope
    that by the end of this tutorial, you feel more comfortable about using Vim going
    forward and start integrating it in your day to day text editing activities.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for Reading!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you found this post helpful, please [follow me on Medium](/@fmnobar) and
    subscribe to receive my latest posts!
  prefs: []
  type: TYPE_NORMAL
