["```py\nfrom faker import Faker\n\nfake = Faker()\n\n>>> fake.name()\n'Nicole Perkins'\n\n>>> fake.address()\n'11669 Foster Cliffs Suite 161\\nPort Elizabethfurt, OK 47591'\n\n>>> fake.url()\n'http://www.wade.com/'\n```", "```py\nimport pandas as pd\n\ndf = pd.DataFrame(\n    [\n        {\n            \"name\": fake.name(),\n            \"address\": fake.address(),\n            \"birthday\": fake.date_of_birth(),\n            \"email\": fake.email(),\n            \"password\": fake.password(),\n        }\n        for _ in range(1000)\n    ]\n)\n\ndf.to_csv(\"data/fake.csv\", index=False)\n```", "```py\ndf.sample(5)\n```", "```py\nfrom sklearn.datasets import make_classification, make_regression\n\nX, y = make_classification(\n    n_samples=5000, n_features=20, n_informative=15, n_classes=3, n_clusters_per_class=3\n)\n\nX, y = make_regression(n_samples=5000, n_features=20, n_informative=10)\n```", "```py\nimport seaborn as sns\nfrom sklearn.datasets import make_blobs\n\nX, y = make_blobs(n_samples=500, n_features=2)\n\nsns.scatterplot(X[:, 0], X[:, 1], hue=y);\n```", "```py\nfrom pyod.utils.data import generate_data\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nX, y = generate_data(\n    n_train=500, contamination=0.13, n_features=2, train_only=True, random_state=1\n)\n\n# Plot\nsns.scatterplot(X[:, 0], X[:, 1], hue=y)\n\n# Modify the damn legend\nlegend = plt.legend(labels=['Inlier', 'Outlier'])\nlegend.legendHandles[1].set_color(\"orange\")\n```", "```py\nimport seaborn as sns\nimport pandas as pd\nfrom ctgan import CTGAN\n\n# Extract categorical data types\niris = sns.load_dataset(\"iris\")\ncategoricals = iris.select_dtypes(exclude=\"number\").columns.tolist()\n\n# Fit CTGAN\nctgan = CTGAN(epochs=10)\nctgan.fit(iris, categoricals)\n\n# Generate the data\nsynthetic_iris = ctgan.sample(20000)\nsynthetic_iris.head()\n```", "```py\nfrom mimesis import Generic\nfrom mimesis.locales import Locale\n\n# Spanish locale\nfake = Generic(Locale.ES)\n\nprint(dir(fake))\n```", "```py\naddress     code           development  food      locale   payment  text     \nbinaryfile  cryptographic  file         hardware  numeric  person   transport\nchoice      datetime       finance      internet  path     science\n```", "```py\nfrom mimesis import Generic\nfrom mimesis.locales import Locale\nimport pandas as pd\n\n# Spanish locale\nfake = Generic(Locale.ES)\n\ndf = pd.DataFrame(\n    [\n        {\n            \"name\": fake.person.full_name(),\n            \"country\": fake.address.country(),\n            \"birthday\": fake.datetime.date(),\n            \"email\": fake.person.email(),\n            \"password\": fake.person.password(),\n        }\n        for _ in range(1000)\n    ]\n)\n\ndf.head()\n```", "```py\nimport tensorflow as tf\n\ntrain_datagen = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale=1.0 / 255,\n    rotation_range=10,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    zoom_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\",\n)\n```", "```py\ntrain_generator = train_datagen.flow_from_directory(\n    \"data/raw/train\",\n    target_size=(50, 50),\n    batch_size=32,\n    class_mode=\"categorical\",\n)\n```", "```py\n$ tree -L 3 data/raw/train\n\ndata/raw/\n├── train\n│   ├── 0\n│   ├── 1\n│   ├── 2\n|   ...\n├── validation\n│   ├── 0\n│   ├── 1\n│   ├── 2\n|   ...\n```", "```py\nfrom tensorflow.keras import layers\n\nresize_and_rescale = tf.keras.Sequential([\n  layers.Resizing(IMG_SIZE, IMG_SIZE),\n  layers.Rescaling(1./255)\n])\n\nimage_augmentation = tf.keras.Sequential([\n  layers.RandomFlip(\"horizontal_and_vertical\"),\n  layers.RandomRotation(0.2),\n])\n\nmodel = tf.keras.Sequential([\n  # Add the preprocessing layers you created earlier.\n  resize_and_rescale,\n  data_augmentation,\n  layers.Conv2D(16, 3, padding='same', activation='relu'),\n  layers.MaxPooling2D(),\n  # Rest of your model.\n])\n```"]