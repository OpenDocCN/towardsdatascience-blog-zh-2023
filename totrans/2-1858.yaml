- en: Simplify Data Science Workflows on BigQuery with Fugue and Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/simplify-data-science-workflows-on-bigquery-with-fugue-and-python-5215a1b65e43](https://towardsdatascience.com/simplify-data-science-workflows-on-bigquery-with-fugue-and-python-5215a1b65e43)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Speed Up Iteration and Cut Computation Cost
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://khuyentran1476.medium.com/?source=post_page-----5215a1b65e43--------------------------------)[![Khuyen
    Tran](../Images/98aa66025ad29b618e875c75f1c400a5.png)](https://khuyentran1476.medium.com/?source=post_page-----5215a1b65e43--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5215a1b65e43--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5215a1b65e43--------------------------------)
    [Khuyen Tran](https://khuyentran1476.medium.com/?source=post_page-----5215a1b65e43--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5215a1b65e43--------------------------------)
    ·6 min read·Apr 13, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many data teams begin by establishing an analytics practice on data warehouses
    such as BigQuery. However, solely relying on BigQuery for data science workloads
    may not be the best approach due to various reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Advanced needs beyond SQL**: Use cases such as data validation, visualization,
    and machine learning forecasting may require more advanced functionalities beyond
    the limitations of SQL grammar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Costly for exploration**: BigQuery may not be the most cost-effective solution
    for data science tasks due to its iterative nature, which involves extensive feature
    engineering and algorithm experimentation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For data scientists working with data on BigQuery, an ideal solution would
    enable them to:'
  prefs: []
  type: TYPE_NORMAL
- en: Use both SQL and Python to query data from BigQuery.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interactively test various SQL queries locally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Effortlessly switch back to BigQuery after thorough testing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/5885ddbb9506439aefb9f64884f16214.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: The FugueSQL BigQuery integration allows you to do exactly that.
  prefs: []
  type: TYPE_NORMAL
- en: What is Fugue?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Fugue](https://github.com/fugue-project/fugue) is an open-source project that
    simplifies big data development by porting Python, Pandas, and SQL to distributed
    computing engines such as Spark, Dask, and Ray.'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/introducing-fuguesql-sql-for-pandas-spark-and-dask-dataframes-63d461a16b27?source=post_page-----5215a1b65e43--------------------------------)
    [## Introducing FugueSQL — SQL for Pandas, Spark, and Dask DataFrames'
  prefs: []
  type: TYPE_NORMAL
- en: An End-To-End SQL Interface for Data Science and Analytics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/introducing-fuguesql-sql-for-pandas-spark-and-dask-dataframes-63d461a16b27?source=post_page-----5215a1b65e43--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will use FugueSQL to simplify development on BigQuery.
  prefs: []
  type: TYPE_NORMAL
- en: 'Feel free to play and fork the source code of this article here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/khuyentran1401/Data-science/blob/master/data_science_tools/fugue_bigquery.ipynb?source=post_page-----5215a1b65e43--------------------------------)
    [## Data-science/fugue_bigquery.ipynb at master · khuyentran1401/Data-science'
  prefs: []
  type: TYPE_NORMAL
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/khuyentran1401/Data-science/blob/master/data_science_tools/fugue_bigquery.ipynb?source=post_page-----5215a1b65e43--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Installation and Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Install Fugue BigQuery**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install Fugue BigQuery integration, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Authenticate to Google BigQuery**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To authenticate to Google BigQuery, the standard method is to specify the location
    of a credential JSON file using the `GOOGLE_APPLICATION_CREDENTIALS` environment
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[How to obtain the credential JSON file.](https://cloud.google.com/bigquery/docs/quickstarts/quickstart-client-libraries)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Fugue BigQuery Usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Querying a Table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Begin by setting up FugueSQL for use in Jupyter Notebook or Lab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To run SQL queries using FugueSQL BigQuery integration, simply add `%%fsql bq`
    at the beginning of the cell.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/54ab8678f513f412a2bb74f812a57c77.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Parametrization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FugueSQL allows you to use Jinja templating to parameterize your SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: The query below parametrizes the `table` variable, which is particularly helpful
    when transitioning from a development table to a production table.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/39ecc58d373f10dfbcc9171f7267f963.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Breaking Up Queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Fugue includes several improvements to standard SQL that facilitate query breakdown.
    These enhancements are illustrated in the query below:'
  prefs: []
  type: TYPE_NORMAL
- en: The equal sign assigns the output of the query to the `df` variable, which is
    subsequently reused in another operation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TAKE` returns the whole row. `PREPARTION BY` partitions the data by gender.
    `PRESORT` sorts the data by the `ct` column in descending order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`YIELD` makes the DataFrame available to subsequent Jupyter Notebook cells.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/ab0bd2ba59bd5620b47ab4304c9cca19.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: We can now access the `names` variable and perform additional queries in a separate
    Jupyter Notebook cell.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e6fa40eb031b2d4cf0b815ff4e1293e4.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: FugueSQL Python Extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TRANSFORM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FugueSQL allows you to integrate Python functions into your SQL queries by using
    the [TRANSFORM keyword](https://fugue-tutorials.readthedocs.io/tutorials/quick_look/ten_minutes_sql.html#invoking-python-code).
  prefs: []
  type: TYPE_NORMAL
- en: The following query shows how the `get_decade` function is applied to the data
    using `TRANSFORM` to generate a new column named `decade`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9ffe27a4524af5ae4b2a9bf893938657.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: With `TRANSFORM`, data scientists can now perform feature engineering on data
    and utilize new machine learning models on BigQuery.
  prefs: []
  type: TYPE_NORMAL
- en: OUTPUT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FugueSQL also provides built-in extensions that facilitate integration with
    other plotting libraries, such as seaborn.
  prefs: []
  type: TYPE_NORMAL
- en: In the code below, `OUPUT USING sns:lineplot()` brings the query results to
    pandas and then generates the line plot using seaborn.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f38598549a765329d4269d01164a5e94.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Productionizing SQL Queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To transition from notebooks to production, we can eliminate the intermediate
    `YIELD` statements and pass the query as a string to the `fugue_sql()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We can then use the `as_pandas()` function to convert the output to pandas for
    further analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/84863656a1d5fa2a1cc9d5f77c119e4a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Iterating on Big Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FugueSQL offers the capability to sample a BigQuery table into a smaller DataFrame
    using the `SAMPLE` keyword. This speeds up the iteration process and avoids the
    need to work with the complete dataset every time.
  prefs: []
  type: TYPE_NORMAL
- en: Here, the `YIELD` keyword is used again to make the `test` DataFrame available.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1c687d93c4793baeaf7426b554c97d01.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: In the next cell, we can test the query on the `test` DataFrame using FugueSQL
    with [DuckDB](https://duckdb.org/) backend to speed up the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/fugue-and-duckdb-fast-sql-code-in-python-e2e2dfc0f8eb?source=post_page-----5215a1b65e43--------------------------------)
    [## Fugue and DuckDB: Fast SQL Code in Python'
  prefs: []
  type: TYPE_NORMAL
- en: Optimize Your SQL Code with Python and DuckDB
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/fugue-and-duckdb-fast-sql-code-in-python-e2e2dfc0f8eb?source=post_page-----5215a1b65e43--------------------------------)
    ![](../Images/0cb10bf231ecc4970be5ff82ff3e13c3.png)
  prefs: []
  type: TYPE_NORMAL
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Once the query has undergone thorough testing, switching the engine to `bq`
    is a simple task.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8b09f3c81267d9c86fa62e216d0456e4.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Combining BigQuery with Spark, Dask, or Ray
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are dealing with vast amounts of data in BigQuery, it may be too slow
    for a single machine to handle. Fugue provides a convenient way to integrate BigQuery
    with distributed computing frameworks such as Spark, Dask, and Ray.
  prefs: []
  type: TYPE_NORMAL
- en: In the query below, the `transform()` function applies the `median` function
    in a distributed manner to each partition of a Dask DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9bca30fc45e4b0c1a7dde640dae651dc.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: When the query is executed, the data is automatically persisted in a temporary
    dataset. By default, the dataset is named `FUGUE_TEMP_DATASET` and must be created
    in the BigQuery workspace, as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/41974e77c5b47c2224c6a50bdfe18002.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You have just learned how to quickly iterate on data that lives
    in BigQuery with FugueSQL. Fugue’s Python and SQL interoperability provides a
    frictionless developer experience with minimal boilerplate code.
  prefs: []
  type: TYPE_NORMAL
- en: I love writing about data science concepts and playing with different data science
    tools. You can connect with me on [LinkedIn](https://www.linkedin.com/in/khuyen-tran-1401/)
    and [Twitter](https://twitter.com/KhuyenTran16).
  prefs: []
  type: TYPE_NORMAL
- en: 'Star [this repo](https://github.com/khuyentran1401/Data-science) if you want
    to check the code for the articles I have written. Follow me on Medium to stay
    notified about my latest data science articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/validate-your-pandas-dataframe-with-pandera-2995910e564?source=post_page-----5215a1b65e43--------------------------------)
    [## Validate Your pandas DataFrame with Pandera'
  prefs: []
  type: TYPE_NORMAL
- en: Make Sure Your Data Matches Your Expectation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/validate-your-pandas-dataframe-with-pandera-2995910e564?source=post_page-----5215a1b65e43--------------------------------)
    [](/write-clean-python-code-using-pipes-1239a0f3abf5?source=post_page-----5215a1b65e43--------------------------------)
    [## Write Clean Python Code Using Pipes
  prefs: []
  type: TYPE_NORMAL
- en: A Short and Clean Approach to Processing Iterables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/write-clean-python-code-using-pipes-1239a0f3abf5?source=post_page-----5215a1b65e43--------------------------------)
    [](/2-tools-to-automatically-reload-when-python-files-change-90bb28139087?source=post_page-----5215a1b65e43--------------------------------)
    [## 2 Tools to Automatically Reload when Python Files Change
  prefs: []
  type: TYPE_NORMAL
- en: towardsdatascience.com](/2-tools-to-automatically-reload-when-python-files-change-90bb28139087?source=post_page-----5215a1b65e43--------------------------------)
    [](/create-observable-and-reproducible-notebooks-with-hex-460e75818a09?source=post_page-----5215a1b65e43--------------------------------)
    [## Create Observable and Reproducible Notebooks with Hex
  prefs: []
  type: TYPE_NORMAL
- en: How to integrate notebooks into your data pipeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/create-observable-and-reproducible-notebooks-with-hex-460e75818a09?source=post_page-----5215a1b65e43--------------------------------)
  prefs: []
  type: TYPE_NORMAL
