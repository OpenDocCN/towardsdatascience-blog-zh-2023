- en: Two Interesting Pandas Data Manipulation Functions You Need to Know
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/two-interesting-pandas-data-manipulation-functions-you-need-to-know-5eabd06af56b](https://towardsdatascience.com/two-interesting-pandas-data-manipulation-functions-you-need-to-know-5eabd06af56b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data Science
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Extremely useful pandas functions for converting a continuous pandas column
    into categorical ones.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@17.rsuraj?source=post_page-----5eabd06af56b--------------------------------)[![Suraj
    Gurav](../Images/f5dca32861f8c1c428e66fbe2174c04b.png)](https://medium.com/@17.rsuraj?source=post_page-----5eabd06af56b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5eabd06af56b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5eabd06af56b--------------------------------)
    [Suraj Gurav](https://medium.com/@17.rsuraj?source=post_page-----5eabd06af56b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5eabd06af56b--------------------------------)
    ·7 min read·Aug 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6bad487920cb6f6872e7975472f27f51.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Brendan Church](https://unsplash.com/@bdchu614?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Python pandas is a powerful and widely used library for data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: It comes up with 200+ functions and methods, making data manipulation and transformation
    easy. However, knowing all these functions and using them where required in the
    actual work isn’t a feasible task.
  prefs: []
  type: TYPE_NORMAL
- en: One of the common tasks in data manipulation is converting a column having continuous
    numerical values into a column containing discrete or categorical values. And
    pandas has two amazing built-in functions which can certainly save you a few minutes.
  prefs: []
  type: TYPE_NORMAL
- en: You can use such type of data transformation for a variety of applications like
    grouping data, analyzing data by discrete groups, or visualizing data using histograms.
  prefs: []
  type: TYPE_NORMAL
- en: For example,
  prefs: []
  type: TYPE_NORMAL
- en: Recently, I calculated [Herfindahl-Hirschman Index (HHI)](https://www.investopedia.com/terms/h/hhi.asp)
    to understand the market concentration of multiple brands. So in a pandas DataFrame,
    I had a column with continuous values of HHI for all brands. Ultimately, I wanted
    to convert this column to a discrete one to categorize each brand as low, medium,
    and high market concentration — **That’s where I got inspired for this story.**
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Without knowing these built-in pandas functions, you might need to write multiple
    *if-else* and *for* statements to get the same work done.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, here you’ll explore such 2 super-useful built-in pandas functions
    along with interesting examples (*including my project*), which will supercharge
    your data analysis and save you a couple of minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Often you need to convert a column with continuous values into another column
    with discrete values in your analytics project.
  prefs: []
  type: TYPE_NORMAL
- en: So basically you categorize the continuous data into several categories, i.e.
    buckets or bins. And you can do so by either specifying minimum and maximum values
    for each bin, i.e. defining bin edges or by specifying the number of bins.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your purpose of splitting a continuous series into a discrete one,
    you can use one of the **next two** methods.
  prefs: []
  type: TYPE_NORMAL
- en: As I was curious about a built-in function for my work, first I came across
    the `cut()` function from pandas library.
  prefs: []
  type: TYPE_NORMAL
- en: pandas cut()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use pandas **cut()** when you want to split the data into a fixed number
    of different buckets, irrespective of the number of values in each bucket.
  prefs: []
  type: TYPE_NORMAL
- en: As per pandas official documentation, there are 7 optional parameters for the
    function `**pandas.cut()**` along with 2 mandatory parameters.
  prefs: []
  type: TYPE_NORMAL
- en: But you don’t need to remember all of them.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve simplified things for you. I’m using this function quite often nowadays
    and found some of the function parameters more useful than others.
  prefs: []
  type: TYPE_NORMAL
- en: Here are the commonly used optional parameters which you’ll use in almost **90%
    of the cases**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Let’s take an example to understand how each of these parameters works.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you have the following continuous series, which you would like to convert
    into 5 bins.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1be215a603dcdfb9e9124c7b62b882aa.png)'
  prefs: []
  type: TYPE_IMG
- en: pandas cut() | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: You simply assigned the integer 5 to the parameter *bin* — as a result, pandas
    split the entire column *Series1* into 5 equal-sized buckets. Pandas assigned
    each value from *Series1* to one of these 5 buckets.
  prefs: []
  type: TYPE_NORMAL
- en: If you inspect each of these buckets, you’ll see two things are common.
  prefs: []
  type: TYPE_NORMAL
- en: The bin edges are non-integer — You can fix this by defining the bin edges in
    the bin parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each bin edge is closed on the right — It is coming from the default setting
    of the parameter right as `right=True`. It means that the pandas include the maximum
    value of the bucket in the same bucket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This parameter specifically helps you **control the binning process** and switching
    its value helps you include or exclude certain elements from a bin.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let’s give it a second chance.
  prefs: []
  type: TYPE_NORMAL
- en: This time you’ll pass a list of bin edges for the same DataFrame column and
    see how the result changes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c36e254566f210d2ea0d70c38e60c0c9.png)'
  prefs: []
  type: TYPE_IMG
- en: pandas cut with defined bin edges | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Pandas simply created new bins using the integers you provided in the *bin*
    parameter and assigned each number of *Series1* to these bins.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, you can also use the *Label* parameter to give a name to each of these
    buckets, like below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8cad66ce659972f2927cf9b8a4ad4be9.png)'
  prefs: []
  type: TYPE_IMG
- en: pandas cut() with bin labels | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: It works perfectly as expected!
  prefs: []
  type: TYPE_NORMAL
- en: Coming back to my work — **a real-world scenario** — I tried the function `**pandas.cut()**`
    on my below dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7b77257f2400c1e9bf2c0463c1f2a36d.png)'
  prefs: []
  type: TYPE_IMG
- en: Using pandas.cut() on a real-world example | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: However, the distribution of elements in each of these buckets is uneven, i.e.
    each bin contains a different number of elements. 5 brands belong to the *low*,
    3 brands belong to the *medium*, and only 2 brands belong to the *high* concentration
    bucket.
  prefs: []
  type: TYPE_NORMAL
- en: But for my project, I wanted to keep the distribution i.e. the number of brands
    in each bucket same and that’s where I found the next pandas method useful.
  prefs: []
  type: TYPE_NORMAL
- en: pandas qcut()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`pandas.qcut()` is used to get an equal data distribution in all the bins.
    It works on the principle of sample quantiles.'
  prefs: []
  type: TYPE_NORMAL
- en: Quantiles are the values that divide a series into a number of subsets — each
    containing nearly the same number of elements.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So when you cut a series using the function **qcut()**, it simply tells you
    which element`of the series belongs to which quantile.
  prefs: []
  type: TYPE_NORMAL
- en: The basic syntax of the function `qcut()` is almost the same as the syntax of
    the function `cut()`.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s understand this with an example — Here you’ll use both the functions `cut()`
    and `qcut()` on the same data and categorize them into 4 bins.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/418581e873b1ba46aa86e0cc0a07d37d.png)'
  prefs: []
  type: TYPE_IMG
- en: Quantile-based discretization Python | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Now, when you check the data distribution in each bin —
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You’ll see when you used the function `**cut()**`, although each bin size is
    equal, i.e. 23, each bin contains a different number of elements.
  prefs: []
  type: TYPE_NORMAL
- en: Whereas, when you used the function `**qcut()**`, a similar number of elements
    were present in each bucket. But you can see such distribution came at the cost
    of varied bin sizes.
  prefs: []
  type: TYPE_NORMAL
- en: So in the case of my project, the function `pandas.qcut()` was the ultimate
    solution as you can see here —
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2c5e68e80519d4dd6383d4e60831d5f0.png)'
  prefs: []
  type: TYPE_IMG
- en: Using pandas.qcut() to the real-world scenario | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: So, `**qcut()**` assigned 3 brands to each of the *medium* and *high* concentration
    buckets and 4 brands to the *low* concentration bucket.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you found this article refreshing and useful. Although the conversion
    of a continuous series into discrete ones is the common scenario in data analysis,
    the task can be really daunting if you don’t know the built-in functions.
  prefs: []
  type: TYPE_NORMAL
- en: Using these functions in your data analysis projects will certainly empower
    you to easily extract the required information from the data in no time.
  prefs: []
  type: TYPE_NORMAL
- en: LMK in the **Comments** which topics you would like to get such amazing articles!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Well, just knowing these functions is not enough — start using them in your
    data analysis tasks to unlock the real pandas power today.
  prefs: []
  type: TYPE_NORMAL
- en: Ready to level up your data analysis skills?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 💡 Consider [**Becoming a Medium Member**](https://medium.com/@17.rsuraj/membership)
    to **access unlimited** stories on Medium and daily interesting Medium digest.
    I will get a small portion of your fee and No additional cost to you.
  prefs: []
  type: TYPE_NORMAL
- en: 💡 Be sure to [**Sign-up to my Email list**](https://medium.com/subscribe/@17.rsuraj)
    to never miss another article on data science guides, tricks, and tips, SQL, and
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: To know more about my project, Comment your question!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Thank you for reading!
  prefs: []
  type: TYPE_NORMAL
