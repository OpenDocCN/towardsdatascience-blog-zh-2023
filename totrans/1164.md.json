["```py\nevidently==0.2.2\nscikit-learn==1.1.2\npandas==1.4.3\n```", "```py\nimport pandas as pd\nimport re\n\ndf = pd.read_csv('path/to/data/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv')\ndef convert_to_years(x):\n\n    str_split = x.split(' ')\n    years = int(str_split[0])\n\n    if len(str_split) == 4:\n        months = int(x.split(' ')[2])\n        total_years = round((years*12 + months)/12,2)\n\n    else:\n\n        total_years = years\n\n    return total_years\ndf['year_month'] = pd.to_datetime(df['month'])\ndf['year'] = df['year_month'].dt.year\ndf['month'] = df['year_month'].dt.month\ndf = df.drop(columns = ['block', 'street_name'])\ndf['remaining_lease'] = df['remaining_lease'].apply(convert_to_years)\ndf = df.rename(columns = {'resale_price':'target'})\n```", "```py\n# split data\n\ndf_train = df.loc[(df['year_month'] >= '2020-01-01') & (df['year_month'] < '2021-01-01')].drop(columns = ['year_month']).sample(n=10000)\ndf_test = df.loc[(df['year_month'] >= '2021-01-01') & (df['year_month'] < '2022-01-01')].drop(columns = ['year_month']).sample(n=5000)\ndf_score = df.loc[df['year_month'] >= '2022-01-01'].drop(columns = ['year_month', 'target']).sample(n=5000)\ny_train = df_train['target'].copy()\nX_train = df_train.drop(columns='target').copy()\ny_test = df_test['target'].copy()\nX_test = df_test.drop(columns='target').copy()\nX_score = df_score.copy()\n```", "```py\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.impute import SimpleImputer\n\ncategorical_features = ['town', 'flat_type', 'storey_range', 'flat_model']\ncategorical_transformer = Pipeline(steps=[('encoder', OneHotEncoder(handle_unknown='ignore'))])\nnumerical_features = ['floor_area_sqm', 'lease_commence_date', 'remaining_lease']\nnumerical_transformer = Pipeline(steps=[('impute', SimpleImputer())])\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('cat', categorical_transformer, categorical_features),\n        ('num', numerical_transformer, numerical_features)])\ngbr = GradientBoostingRegressor()\nregressor = Pipeline([('processing', preprocessor), ('regr', gbr)])\nregressor.fit(X_train, y_train)\n```", "```py\ndf_test['prediction'] = regressor.predict(X_test)\ndf_score['prediction'] = regressor.predict(X_score)\ndf_train['prediction'] = regressor.predict(X_train)\n```", "```py\nreport = Report(metrics=[\n  DataDriftPreset(drift_share=0.3),\n  TargetDriftPreset()\n])\n\nreport.run(reference_data=df_train, current_data=df_test)\nreport.save_html('evidently_metrics_report.html')\n```", "```py\nreport.json()\n#OR\nreport.as_dict()\n```", "```py\ntests = TestSuite(tests=[\n    NoTargetPerformanceTestPreset()\n])\n\ntests.run(reference_data=df_train.drop(columns='target'), current_data=df_score)\ntests.save_html('evidently_tests_report.html')\n```", "```py\ntests.json()\n#OR\ntests.as_dict()\n```"]