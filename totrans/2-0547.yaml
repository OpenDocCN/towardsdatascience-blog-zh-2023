- en: Configuring a Minimal Docker Image for Spatial Analysis with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置用于空间分析的最小 Docker 镜像与 Python
- en: 原文：[https://towardsdatascience.com/configuring-a-minimal-docker-image-for-spatial-analysis-with-python-dc9970ca8a8a](https://towardsdatascience.com/configuring-a-minimal-docker-image-for-spatial-analysis-with-python-dc9970ca8a8a)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/configuring-a-minimal-docker-image-for-spatial-analysis-with-python-dc9970ca8a8a](https://towardsdatascience.com/configuring-a-minimal-docker-image-for-spatial-analysis-with-python-dc9970ca8a8a)
- en: Learn how to install the basic geospatial dependencies, such as GDAL and XArray,
    and deploy them as a container
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习如何安装基本的地理空间依赖项，如 GDAL 和 XArray，并将其作为容器部署
- en: '[](https://cordmaur.medium.com/?source=post_page-----dc9970ca8a8a--------------------------------)[![Maurício
    Cordeiro](../Images/1ec750bf68bbaa0331fabdebebf28eb5.png)](https://cordmaur.medium.com/?source=post_page-----dc9970ca8a8a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dc9970ca8a8a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dc9970ca8a8a--------------------------------)
    [Maurício Cordeiro](https://cordmaur.medium.com/?source=post_page-----dc9970ca8a8a--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://cordmaur.medium.com/?source=post_page-----dc9970ca8a8a--------------------------------)[![Maurício
    Cordeiro](../Images/1ec750bf68bbaa0331fabdebebf28eb5.png)](https://cordmaur.medium.com/?source=post_page-----dc9970ca8a8a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dc9970ca8a8a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dc9970ca8a8a--------------------------------)
    [Maurício Cordeiro](https://cordmaur.medium.com/?source=post_page-----dc9970ca8a8a--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dc9970ca8a8a--------------------------------)
    ·6 min read·Feb 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dc9970ca8a8a--------------------------------)
    ·6 分钟阅读·2023 年 2 月 10 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/bad35a93cebcc774e60713494d3ae498.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bad35a93cebcc774e60713494d3ae498.png)'
- en: 'Image created with Dall-E 2\. Caption: ''Oil painting of the Earth with a satellite
    around it''.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Dall-E 2 创建的图像。说明：'地球的油画，旁边有一颗卫星'。
- en: 'Due to changes in Medium.com policy concerning non-members reads, implemented
    in Sep 2023, this post is now freely available on **geocorner.net**: [https://www.geocorner.net/post/configuring-a-minimal-docker-image-for-spatial-analysis-with-python](https://www.geocorner.net/post/configuring-a-minimal-docker-image-for-spatial-analysis-with-python)'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 由于 Medium.com 政策在 2023 年 9 月的变化，非会员阅读限制已实施，该帖子现在可以在 **geocorner.net** 上免费阅读：[https://www.geocorner.net/post/configuring-a-minimal-docker-image-for-spatial-analysis-with-python](https://www.geocorner.net/post/configuring-a-minimal-docker-image-for-spatial-analysis-with-python)
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Newcomers to the Python programming language quickly understand the significance
    of utilizing virtual environments and package management tools. The vast number
    of packages available presents a challenge in maintaining compatibility among
    dependencies, making virtual environments and package management critical components
    of a well-organized Python environment.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Python 编程语言的新手很快就会理解利用虚拟环境和包管理工具的重要性。可用的包数量庞大，这使得维护依赖项之间的兼容性成为挑战，因此虚拟环境和包管理是一个井然有序的
    Python 环境的关键组成部分。
- en: This complexity of managing dependencies is exacerbated when working with geospatial
    analysis. In addition to the numerous packages utilized in data science, it is
    necessary to incorporate specialized libraries such as GDAL, Rasterio, and STAC
    to support this type of analysis. Besides, it is widely known that GDAL can be
    particularly difficult to install, regardless of the operating system architecture,
    be it Windows, Linux, or Mac.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行地理空间分析时，依赖项管理的复杂性会加剧。除了数据科学中使用的众多包，还需要整合诸如 GDAL、Rasterio 和 STAC 等专业库来支持这类分析。此外，众所周知，无论操作系统架构是
    Windows、Linux 还是 Mac，安装 GDAL 都特别困难。
- en: If you want to deploy your geospatial environment to a cloud server, relying
    on basic conda skills just won’t cut it. Containerizing your environment is the
    way to go, to ensure compatibility and stability in the target deployment environment.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将你的地理空间环境部署到云服务器上，仅依靠基本的 conda 技能是不够的。容器化你的环境是确保目标部署环境中兼容性和稳定性的最佳方式。
- en: So, this article is here to save the day! It’s a quick and straightforward guide
    to setting up a minimalist Docker image, loaded with all the essential tools for
    geospatial analysis using Python. No more headaches, no more fuss!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这篇文章来拯救你的日子！这是一个快速而直接的指南，帮助你设置一个极简的Docker镜像，加载了所有使用Python进行地理空间分析的基本工具。不再头疼，不再麻烦！
- en: Installing Docker
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Docker
- en: First, we will need Docker installed. On **Mac** or **Windows** this can be
    done through the installation of **Docker Desktop** directly from `docker.com`
    (Figure 1).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装Docker。在**Mac**或**Windows**上，可以通过从`docker.com`直接安装**Docker Desktop**来完成（图1）。
- en: '![](../Images/0defba6d719975d17ae2c7c25c56f627.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0defba6d719975d17ae2c7c25c56f627.png)'
- en: 'Figure 1: Docker Desktop installation. Image by author.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：Docker Desktop安装。图像由作者提供。
- en: 'If you are on **linux**, the installation can be done using `apt` package manager:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是**linux**，可以使用`apt`包管理器进行安装：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Base Image
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础镜像
- en: The next step is to find a base image on Docker Hub to build on top of. There
    are images available that have all the geospatial dependencies pre-installed,
    such as those provided by the Pangeo community. However, the downside is that
    these images have a large compressed size of 1.42 GB.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是找到一个基础镜像在Docker Hub上进行构建。有些镜像预装了所有的地理空间依赖项，例如Pangeo社区提供的镜像。然而，这些镜像的压缩大小较大，达到1.42
    GB。
- en: Normally, the official Python images would be a good starting point for running
    Python, but installing GDAL on these images can be cumbersome. After exploring
    various options, I discovered that the easiest way is to start with an image that
    has GDAL pre-installed. This image is provided by the OSGeo community at `hub.docker.com/u/osgeo`
    (Figure 2).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，官方的Python镜像是运行Python的一个良好起点，但在这些镜像上安装GDAL可能很麻烦。在探索了各种选项后，我发现最简单的方法是从一个预装了GDAL的镜像开始。这个镜像由OSGeo社区提供，地址是`hub.docker.com/u/osgeo`（图2）。
- en: '![](../Images/1e191ddd818392e65dc0147731b02717.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1e191ddd818392e65dc0147731b02717.png)'
- en: 'Figure 2: OSGeo images provided in Docker HUB. Image by author.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图2：Docker HUB提供的OSGeo镜像。图像由作者提供。
- en: Once in the `osgeo/gdal` repository, we can go to the tab `Tags`. Besides the
    **latest** image version, we can note several other versions are available for
    different purposes and with different sizes. The latest has more than 1Gb of compressed
    size. After trying different versions, I found out that their ‘ubuntu-small’ version
    strikes a good balance between size (142 MB compressed) and compatibility with
    the required packages. So let's grab this one.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 进入`osgeo/gdal`仓库后，我们可以转到`Tags`标签。除了**latest**镜像版本外，我们可以注意到还有几个其他版本可供不同用途和大小。最新版本的压缩大小超过1GB。在尝试了不同版本后，我发现他们的‘ubuntu-small’版本在大小（142
    MB压缩）和与所需软件包的兼容性之间取得了良好的平衡。所以我们选择这个版本。
- en: '**Note:** The following steps are here just for educational purpose and check
    if the necessary packages can be installed successfully. We could jump directly
    to creating a Dockerfile from this image.'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 以下步骤仅用于教育目的，并检查是否可以成功安装必要的软件包。我们可以直接跳到从此镜像创建Dockerfile的步骤。'
- en: 'On the terminal or command line, we can run the following commands to pull
    the image and to create a container and enter it:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端或命令行中，我们可以运行以下命令来拉取镜像、创建容器并进入其中：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that the prompt will change to `root@<container_id>:/#`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意提示符会更改为`root@<container_id>:/#`。
- en: Once "inside" the container, we can check for the installed versions of basic
    packages. So, let's type the command `python` to enter the Python interpreter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦“进入”容器，我们可以检查已安装的基本软件包版本。所以，输入命令`python`以进入Python解释器。
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Installing Additional Packages
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装额外的软件包
- en: Ok, now that we have Python 3.10.6 and the most difficult package to install
    on Earth (yep, GDAL), we can just install the additional packages using PIP or
    CONDA, right? Easy Peasy!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们已经有了Python 3.10.6和地球上最难安装的软件包（是的，GDAL），我们可以使用PIP或CONDA安装额外的软件包，对吧？非常简单！
- en: 'Well, not really. If you go back to the container and try to run these commands
    are not installed by default. So let''s install PIP:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上并不是。如果你回到容器并尝试运行这些命令，默认情况下并未安装。因此，让我们安装PIP：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, with pip installed, we can install all the additional packages directly
    with `pip install package1 package2 …`. As the container is already isolated,
    we will skip using virtual environment inside the container and install the packages
    as root.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，安装了pip后，我们可以直接使用`pip install package1 package2 …`来安装所有额外的软件包。由于容器已经被隔离，我们将跳过在容器内部使用虚拟环境，并以root身份安装软件包。
- en: Creating a Dockerfile
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Dockerfile
- en: Now, to make it reproducible in other architectures ( `aarch64` , `X86_64`,
    etc.) let's create a Dockerfile to wrap up everything. Let's start by creating
    an empty text file called `Dockerfile` without any extension (that will make it
    easier to build the image without specifying the filename).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了在其他架构（`aarch64`，`X86_64`等）中使其可重现，我们来创建一个Dockerfile，将所有内容打包。首先创建一个名为 `Dockerfile`
    的空文本文件，没有任何扩展名（这将使构建镜像时无需指定文件名变得更容易）。
- en: 'The first thing in a Dockerfile is to specify the base image with its corresponding
    tag. So we write:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfile中的第一件事是指定基础镜像及其对应的标签。因此我们写：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Then we need to install the PIP. For that, we will write a RUN command.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要安装PIP。为此，我们将编写一个RUN命令。
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, we have two options.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有两个选择。
- en: '1- concatenate several lines of a pip install command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 1- 连接几行 `pip install` 命令：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '2- Or, to make it a little more "elegant" we can write our dependencies inside
    a requirements.txt file to make things more organized, we can create a `requirements.txt`
    file with all the packages we want installed, like so:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 2- 或者，为了使其更“优雅”，我们可以将依赖项写入 `requirements.txt` 文件中，使事情更有条理，我们可以创建一个包含所有要安装的包的
    `requirements.txt` 文件，如下所示：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And then, on the Dockerfile, we will copy our `requirements.txt` to the image,
    install the packages with `pip install --no-cache-dir` to purge the leftovers
    and we are set. The complete Dockerfile will look like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在Dockerfile中，我们将把 `requirements.txt` 复制到镜像中，使用 `pip install --no-cache-dir`
    安装包以清除残留物，然后我们就完成了。完整的Dockerfile将如下所示：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Building the Image
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建镜像
- en: 'Now that we have our the `requirements.txt` and the `Dockerfile` files saved
    on the filesystem, we can build the final image with the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在文件系统中保存了 `requirements.txt` 和 `Dockerfile` 文件，我们可以使用以下命令构建最终镜像：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To push it to the DockerHub, it is necessary to point it to a repository, like
    so:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其推送到DockerHub，需要将其指向一个仓库，如下所示：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: And voilà!!!! This image is available publicly at the address [https://hub.docker.com/repository/docker/cordmaur/geospatial_minimal/](https://hub.docker.com/repository/docker/cordmaur/geospatial_minimal/),
    and most important, with less than 300Mb (Figure 3). Enjoy it!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 看！这个镜像可以公开访问，地址是 [https://hub.docker.com/repository/docker/cordmaur/geospatial_minimal/](https://hub.docker.com/repository/docker/cordmaur/geospatial_minimal/)，最重要的是，镜像大小小于300Mb（图3）。尽情享用吧！
- en: '![](../Images/249fa29075fd80ba481b286976b4f5fe.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/249fa29075fd80ba481b286976b4f5fe.png)'
- en: 'Figure 3: Image in the DockerHub repository. Image by author.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图3：DockerHub仓库中的镜像。图像由作者提供。
- en: Conclusion
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: By following the steps outlined in this article, we have successfully created
    a minimal (< 300Mb) and efficient Docker image equipped with all the essential
    dependencies for geospatial analysis in Python 3.10\. This image can now be used
    on cloud servers to serve geospatial applications, ensuring compatibility and
    stability in deployment.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循本文中列出的步骤，我们成功创建了一个小于300Mb且高效的Docker镜像，配备了Python 3.10中的所有必需依赖项，用于地理空间分析。该镜像现在可以在云服务器上使用，以服务于地理空间应用，确保部署的兼容性和稳定性。
- en: Stay Connected
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持联系
- en: '*If you liked this article and want to support me as a writer, consider becoming
    a* [*Medium member*](https://cordmaur.medium.com/membership)*. It costs only $5/month
    and I’ll receive a small commission of your membership fee, with no extra cost
    to you. Or you can just* [*buy me a coffee*](https://www.buymeacoffee.com/cordmaurl)
    *anytime.*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你喜欢这篇文章并且希望支持我作为作者，请考虑成为一个* [*Medium会员*](https://cordmaur.medium.com/membership)*。每月只需$5，我将获得你会员费的一小部分佣金，对你没有额外费用。或者你也可以随时*
    [*请我喝杯咖啡*](https://www.buymeacoffee.com/cordmaurl) *。*'
- en: '[](http://cordmaur.medium.com/membership?source=post_page-----dc9970ca8a8a--------------------------------)
    [## Join Medium with my referral link - Maurício Cordeiro'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[](http://cordmaur.medium.com/membership?source=post_page-----dc9970ca8a8a--------------------------------)
    [## 使用我的推荐链接加入Medium - Maurício Cordeiro'
- en: Read every story from Maurício Cordeiro (and thousands of other writers on Medium).
    Your membership fee directly…
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读来自Maurício Cordeiro的每个故事（以及Medium上的成千上万的其他作者）。你的会员费直接……
- en: cordmaur.medium.com](http://cordmaur.medium.com/membership?source=post_page-----dc9970ca8a8a--------------------------------)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: cordmaur.medium.com](http://cordmaur.medium.com/membership?source=post_page-----dc9970ca8a8a--------------------------------)
