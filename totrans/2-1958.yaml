- en: 'Taipy: a Tool for Building User-Friendly Production-Ready Data Scientists Applications'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/taipy-a-tool-for-building-user-friendly-production-ready-data-scientists-applications-80de97aaf7dd](https://towardsdatascience.com/taipy-a-tool-for-building-user-friendly-production-ready-data-scientists-applications-80de97aaf7dd)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A simple, quick, and efficient way to build a full-stack data application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://zoumanakeita.medium.com/?source=post_page-----80de97aaf7dd--------------------------------)[![Zoumana
    Keita](../Images/34a15c1d03687816dbdbc065f5719f80.png)](https://zoumanakeita.medium.com/?source=post_page-----80de97aaf7dd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----80de97aaf7dd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----80de97aaf7dd--------------------------------)
    [Zoumana Keita](https://zoumanakeita.medium.com/?source=post_page-----80de97aaf7dd--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----80de97aaf7dd--------------------------------)
    ·14 min read·Jul 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dd3f4a403960bdb49c1abb76cda2d813.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Campaign Creators](https://unsplash.com/@campaign_creators) on [Unsplash](https://unsplash.com/photos/pypeCEaJeZY)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a Data Scientist, you might want to create dashboards for data visualization,
    visualize data and even implement business applications to assist stakeholders
    in making actionable decisions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiple tools and technology can be used to perform those tasks, whether open-source
    or proprietary software. However, these might not be ideal for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Some of the open-source technologies require a steep learning curve and hiring
    individuals with the appropriate expertise. Consequently, organizations may face
    an increased onboarding time for new employees, higher training costs, and potential
    challenges in finding qualified candidates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other open-source solutions are great for prototypes but will not scale to a
    production-ready application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, proprietary tools also come with their own challenges, including
    higher licensing costs, limited customization, and difficulty for businesses to
    switch to other solutions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Wouldn’t it be nice if there was a tool that is not only open-source but also
    easy to learn and able to scale into a full application?*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: That’s where Taipy comes in handy 🎉
  prefs: []
  type: TYPE_NORMAL
- en: This article will explain what Taipy is, along with some business cases that
    it can solve before exploring its key features. Furthermore, it will illustrate
    all the steps to create a full web application.
  prefs: []
  type: TYPE_NORMAL
- en: What is Taipy and why should you care?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is an open-source, 100% Python library and only requires basic knowledge
    of Python programming. It allows data scientists and machine learning engineers,
    and any other Python programmer to quickly turn their data and machine learning
    models into a fully functional web application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In today’s rapidly changing environment, the demand for robust, flexible, and
    powerful tools becomes essential, and below are some of the features that make
    Taipy such a unique platform:'
  prefs: []
  type: TYPE_NORMAL
- en: It is not exclusively designed for pilots but can also be extended to industrialized
    projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The simplicity of Taipy combined with powerful functionalities allow Python
    developers with a minimal programming background to build robust solutions in
    a short amount of time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A high level of customizability authorizes users quickly modify and adapt Taipy’s
    functionalities to their needs, which provides a personalized experience many
    open-source tools fail to offer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The synchronous and asynchronous calls provided by Taipy allow the execution
    of multiple tasks simultaneously, which improves its overall performance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Taipy application can be developed using Python scripts or Jupyter Notebooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With Taipy’s pipeline versioning capability, users can effectively manage different
    project versions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Taipy studio](https://docs.taipy.io/en/release-2.1/manuals/studio/) extension
    can be installed to Visual Studio Code to significantly accelerate the development
    of Taipy applications.'
  prefs: []
  type: TYPE_NORMAL
- en: Key Features of Taipy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though Taipy is great for Front-End or Back-End development, its true potential
    shines when developing a full web app with both front-end and back-end components
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s have a closer look at the main features of each one of them:'
  prefs: []
  type: TYPE_NORMAL
- en: Taipy Front-End Functionalities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating a user interface is performed with a basic knowledge of Python programming.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taipy is designed to be user-friendly, which makes the user interface creation
    simple and intuitive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No web design knowledge is required and it eliminates all prerequisites for
    CSS and HTML.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It leverages augmented markdown syntax to assist users in the creation of their
    desired web pages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taipy Back-End Functionalities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Taipy supports the creation of a robust pipeline to handle different scenarios.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It makes the modeling of Directed Acyclic Graphs (DAGs) straightforward.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data caching feature improves the overall performance of Taipy applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registry of Pipeline executions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipeline Versioning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users can track and evaluate their applications’ performance with Taipy’s KPI
    tracking tool.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in Visualization of your pipelines and associated data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Taipy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have a better understanding of Taipy, let’s dive into an end-to-end
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: The core [Taipy documentation](https://docs.taipy.io/en/latest/) and [community
    contributions](https://www.taipy.io/community-contributions/) contain relevant
    information, and this article will by no means replace them but can be used as
    an alternative place to start learning about Taipy in a real-world scenario.
  prefs: []
  type: TYPE_NORMAL
- en: To better illustrate our case, we will use the [health-related data breaches](https://ocrportal.hhs.gov/ocr/breach/breach_report.jsf)
    maintained by the U.S. Department of Health and Human Services Office for Civil
    Rights. It provides information on reported breaches of unsecured protected health
    information about 500+ individuals.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section will be two-fold:'
  prefs: []
  type: TYPE_NORMAL
- en: Build a graphical interface using Taipy to help end users have a global overview
    of different types of breaches for actionable decision-making.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop a Taipy back-end framework to interact with a classification machine
    learning model in order to predict the type of breach for a given information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using Taipy requires Python 3.8 or above. Anaconda Python distribution (conda)
    and visual studio code IDE are used to install Taipy as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the virtual environment with the name **taipy-env** and install Python
    3.8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Activate the previously created environment
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The following command installs the taipy library within the virtual environment
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Running a Taipy App
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a Python script file <taipy_app.py>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Enter the following code, then save the file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the conda console, from the taipy_app.py type the command below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Successful execution of the code above generates this URL, and automatically
    opens a navigator window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/40f95eada7cdd380a081793333e59e63.png)'
  prefs: []
  type: TYPE_IMG
- en: URL to access the App
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/764e1c6b2226c8eb7d2ffeaee5813f46.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: That’s awesome!
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s understand the previous code.
  prefs: []
  type: TYPE_NORMAL
- en: Import the Gui module used for creating Dashboards.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `analytics_choice` is the list of possible choices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then the variable `choice` will hold a value from the `analytics_choice`and
    the interpolation of these variables is done using the <|…|> syntax.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'my_page contains the information below in markdown format:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security Breach Analytics Dashboard** has the H1 level represented with a
    single “#” symbol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Breach Analysis** has the H2 level represented with a double “#” symbol followed
    by a simple text “Please choose from … analysis”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We create a dropdown list using the original `analytics_choice` and choicevariables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display the choice made by the user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, run the application by giving the my_app_page and specifying the port
    and host. Not specifying the server port will open on a default port (5000). For
    this specific example, the app opens on **9696** at [**http://localhost:9696**](http://localhost:9696)
  prefs: []
  type: TYPE_NORMAL
- en: Time to create a Taipy Dashboard from Scratch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s take our Taipy knowledge to the next level by implementing a complete
    dashboard. The main sections of the dashboard will leverage the following visual
    elements of Taipy:'
  prefs: []
  type: TYPE_NORMAL
- en: Make a choice from a list of options using **Selectors**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trigger an action by clicking the button using **Buttons**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show the raw data in **Tables.**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display the graphical results with **Charts**.
  prefs: []
  type: TYPE_NORMAL
- en: 'All these visualization elements mentioned above are created by introducing
    the following markdown syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: <|{variable}|visual_element_name|param1=param1|param2=param2|…|>
  prefs: []
  type: TYPE_NORMAL
- en: The final dashboard will appear as follows, and the final source code is available
    at the end of the article.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/373486536a0723ee92d23c8ed63e4775.png)'
  prefs: []
  type: TYPE_IMG
- en: Final dashboard created with Taipy GUI (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform a step-by-step illustration, an example of each component will be
    given in a separate file and each file is run with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`python file_name.py`'
  prefs: []
  type: TYPE_NORMAL
- en: Selectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These give users the opportunity to choose from a dropdown list and it corresponds
    to what we have implemented in the “Running a Taipy App” section.
  prefs: []
  type: TYPE_NORMAL
- en: Buttons and Tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Buttons in the user interface initiate a specific function when clicked or pressed.
    The ***on_action*** function is triggered upon the button press.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tables, on the other hand, are used to organize data offering three display
    modes: paginated, ***allow_all_rows***, ***unpaginated***, and ***auto_loading***.
    The [official documentation](https://www.taipy.io/tips/using-tables/) provides
    more information about each one of these modes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file `button.py` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We start by loading the breach data into a Pandas dataframe. Then, selecting
    “Display Raw Data” displays the whole data in a table format as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bdc3208aecbc777cfd5bfeddf0721faa.png)'
  prefs: []
  type: TYPE_IMG
- en: Button creation result with Taipy (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With a better understanding of the above components, we can combine them to
    create charts, built upon the comprehensive poltly.js graphs library Otherwise,
    [Taipy’s documentation](https://docs.taipy.io/en/latest/manuals/gui/viselements/chart/)
    provides great examples to serve as starting points. Similarly to the previous
    section, create a `charts.py` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: A chart of type bar is created with State on the `x-axis` and the Proportion
    on the `y-axis` .
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The final result is this dynamic chart of the number of individuals affected
    by State, and California seems to be the most affected.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d29bc220ec409ed9fb528687430e1ce9.png)'
  prefs: []
  type: TYPE_IMG
- en: Chart with Taipy (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Display an Image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Displaying an image in Taipy GUI is also straightforward and can be achieved
    with the `image` attribute. The following code displays the word cloud generated
    by the `generate_word_cloud` . The image has a width of 2400 pixels and a height
    of 1000 pixels. Whenever the user’s mouse is on the image, the value of the `hover_text`
    attribute is shown: **“Word Cloud of Breach Location”** in this specific scenario.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/60f6489633007a7f2d2ac13b37de63c6.png)'
  prefs: []
  type: TYPE_IMG
- en: Word cloud of the location of breach information (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, the helper function `generate_word_cloud` is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Callback function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The goal is to have a dynamic GUI that is updated based on the user’s selection.
    This is achieved using Taipys callback function which automatically triggers any
    function with the name `on_change` in the local namespace as the global callback
    function. The implementation is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Layouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Multiple charts can provide valuable business insights, but displaying them
    vertically one after another may not be the most effective approach
  prefs: []
  type: TYPE_NORMAL
- en: Instead, we can create a layout to organize the components into a regular grid
    between `layout.start` and `layout.end` block. Each component is created within
    the `part.start` and `part.end` block.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following basic syntax creates a 2 columns grid with a 1.8 root element’s
    font size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'With this understanding of the layout, we can create the final dashboard with
    five main charts:'
  prefs: []
  type: TYPE_NORMAL
- en: Chart 1 gives the word cloud related to the location of breach information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chart 2 shows the number of individuals affected by State.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chart 3 determines the total number of individuals affected by the Type of breach.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chart 4 gives for each year the total number of individuals affected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chart 5 shows the number of individuals affected per Covered Entity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Before configuring the dashboard, a new `Year` column is created from the `Breach_Submission`
    column, which is then used as the x-axis in Chart 4.
  prefs: []
  type: TYPE_NORMAL
- en: Running all the code should generate the first dashboard illustrated above.
  prefs: []
  type: TYPE_NORMAL
- en: Taipy Back-end in Action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next section, you will use Taipy’s back-end capabilities to easily and
    efficiently create, manage and execute your data pipelines to train a Random Forest
    classifier and so determine the type of breach of a given breach information.
  prefs: []
  type: TYPE_NORMAL
- en: There are two main parts in this section. First, you will build the complete
    graphical representation of the workflow using Taipy Studio. Then, write the corresponding
    Python code.
  prefs: []
  type: TYPE_NORMAL
- en: Taipy Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Taipy Studio is an extension to Visual Studio Code and can be installed as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8907b4349764311433eef3564e40954c.png)'
  prefs: []
  type: TYPE_IMG
- en: Taipy installation process (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Restart VSCode after the installation is completed, then a Taipy Studio interface
    will be displayed after clicking on the Taipy logo on the bottom left. This will
    show four main tabs such as Config Files, Data Notes, Tasks, Pipelines, and Scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3e4933bdd8a65fd301a252ba9335094d.png)'
  prefs: []
  type: TYPE_IMG
- en: Taipy Studio interface (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'All these tabs can be used to achieve our goal of implementing an end-to-end
    pipeline, and the first step is to create a configuration file (**taipy_config.toml**)
    that will contain all these tabs represented by 4 logos on the top right after
    selecting the “Taipy: Show View” icon.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/18492c90e07f5f9d26e2719a8e0df612.png)![](../Images/4a794480c5b3c70520ee7122bf24170d.png)'
  prefs: []
  type: TYPE_IMG
- en: Taipy Studio components (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cc8f2c4c689f0f41cd067d683779ec5f.png)'
  prefs: []
  type: TYPE_IMG
- en: Taipy tabs illustration
  prefs: []
  type: TYPE_NORMAL
- en: Below are the main functions that will be implemented, along with a brief explanation
    of each of the previous tabs.
  prefs: []
  type: TYPE_NORMAL
- en: '`filter_columns` function is responsible for selecting the relevant columns
    from the data and generating a Pandas dataframe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`preprocess_columns` used for performing feature engineering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encode_features` responsible for encoding the relevant features in the correct
    format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`split_data` is the function to split the data into training and testing datasets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`train_model` is used to train the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`show_performance` is the final stage for displaying the performance of the
    model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scenarios and Pipelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the first thing to do when setting up a pipeline. A scenario is made
    up of one or more pipelines. It works as a registry of executions. Let’s create
    a scenario with the name DATA_BREACH_SCENARIO followed by the pipeline DATA_BREACH_PIPELINE
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/91dae4c5760de2a948f0ff12e7d45347.png)'
  prefs: []
  type: TYPE_IMG
- en: From Scenario to Pipeline (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A task refers to a Python function that can be executed, and there are overall
    six tasks that will be implemented, from `filter_columns` to `show_performance`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the pipeline is connected to the input of each task as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ae0ff263a569db05a50b83ebb62712ba.png)'
  prefs: []
  type: TYPE_IMG
- en: From Pipeline to Tasks
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to configure these tasks in Taipy Studio by connecting each
    Python function to the corresponding task. But before that, we need to create
    those functions'' signatures in the `data_breach_tasks.py` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Next, we link each task to the corresponding Python following the 3 steps below.
    The illustration is given for the `filter_columns` tasks but has to be performed
    for every task.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2faf3412f283b7ee41c912a1c25f5c18.png)'
  prefs: []
  type: TYPE_IMG
- en: 3 main steps to link a task to a script (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Data Nodes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data nodes do not contain the actual data but contain all the necessary information
    to read and write those data. They can be the reference to any data type such
    as text, CSV, JSON, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, the `filter_columns` function has:'
  prefs: []
  type: TYPE_NORMAL
- en: One input node (**filtering_node**) which is a .CSV file, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One output node (**filtered_df**): which is also stored as a .CSV file. This
    is then used as the input of the preprocess_columns function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The node for the interaction is defined as follows showing the modification
    of the storage type from pickle to .csv:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4b4ee9cb7cdcaeb8dc81a3bee2080b31.png)'
  prefs: []
  type: TYPE_IMG
- en: Definition of the input type of the filtering_node (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/26be0995bdc760738053a68a7740951b.png)'
  prefs: []
  type: TYPE_IMG
- en: Input type of the filtering_node after update (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to define the path to the original input dataset. This is done
    with the help of the “New property” attribute in the data node. Then, type Enter
    and provide the path to the .CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a394c57ca06c4006cf271ba5441b3ff9.png)'
  prefs: []
  type: TYPE_IMG
- en: Definition of the property of the filtering node (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/698a49bc92a446e90c2db9375f36779c.png)'
  prefs: []
  type: TYPE_IMG
- en: Definition of the path to the filtering node (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Repeat the same process for all the inputs where a .CSV file is required, and
    the final diagram will look like this after specifying all the data nodes and
    their relationships.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ef259b331345b23a85a831c979c68add.png)'
  prefs: []
  type: TYPE_IMG
- en: State of the workflow after specifying all the data nodes and their relationships
    (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: After the configuration of the pipeline, a .toml script format of the whole
    diagram is generated in the **taipy_config.toml** file and looks like the one
    shown in the animation below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/864d39d9d3d588d960b4da96b694bcb3.png)'
  prefs: []
  type: TYPE_IMG
- en: Content of the taipy_config.toml file
  prefs: []
  type: TYPE_NORMAL
- en: Then, this .toml file can be loaded in any Python script to execute the pipeline.
    Let’s create such a file with the name `run_pipeline.py`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We start by importing the relevant modules, followed by the definition of the
    configuration file and the name of the scenario to trigger.
  prefs: []
  type: TYPE_NORMAL
- en: Then, the pipeline is executed using the submit() function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we retrieve the model’s performance and print the results, as shown
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8b72ef29a754383e17662abb03de55ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Result of the run_pipeline.py (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: This dataframe can be further integrated into the initial dashboard to display
    in a graphical manner the numerical values.
  prefs: []
  type: TYPE_NORMAL
- en: '**Conclusion**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This article has provided a complete overview of Taipy, and how to bring front-end
    and back-end to any data and machine learning models to create fully functional
    web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, with the new release, Taipy provides Core visual elements that
    allow seamless integration between the front-end and the back-end, empowering
    users to create powerful Business objects effortlessly, and these integrations
    are available from the [official website](https://www.taipy.io/).
  prefs: []
  type: TYPE_NORMAL
- en: If you are still hesitant about using Taipy, it is time to give it a try to
    save time, energy, and most importantly, money. Finally, these [awesome tutorials](https://www.taipy.io/tutorials/)
    from Taipy can help you further your learning and strengthen your skill sets.
  prefs: []
  type: TYPE_NORMAL
