- en: Uncovering the secrets of KEEPFILTERS in DAX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/uncovering-the-secrets-of-kepfilters-in-dax-6d268e3565d0](https://towardsdatascience.com/uncovering-the-secrets-of-kepfilters-in-dax-6d268e3565d0)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*The KEEPFILTERS() function in DAX is an underestimated function. So, I decided
    to go into the rabbit hole of this function and provide you with some interesting
    details about this function and one surprising effect.*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@salvatorecagliari?source=post_page-----6d268e3565d0--------------------------------)[![Salvatore
    Cagliari](../Images/a24b0cefab6e707cfee06cde9e857559.png)](https://medium.com/@salvatorecagliari?source=post_page-----6d268e3565d0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6d268e3565d0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6d268e3565d0--------------------------------)
    [Salvatore Cagliari](https://medium.com/@salvatorecagliari?source=post_page-----6d268e3565d0--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6d268e3565d0--------------------------------)
    ·8 min read·Jul 13, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d3f91fccfe4690bda82bbb16d3e42861.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Ian Tuck](https://unsplash.com/@iantuck?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we use the CALCULATE() function in DAX, we usually add a simple filter
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Product[Color] = “Green”
  prefs: []
  type: TYPE_NORMAL
- en: This filter replaces any existing filter on the column [Color] with the value
    “Green”.
  prefs: []
  type: TYPE_NORMAL
- en: But sometimes, we need to go the extra step and preserve an existing filter
    on a table or a column to perform some interesting calculations.
  prefs: []
  type: TYPE_NORMAL
- en: And sometimes, we get the wrong result from our Measures, and we can’t understand
    why this happens.
  prefs: []
  type: TYPE_NORMAL
- en: These are the situations where the [KEEPFILTERS()](https://dax.guide/keepfilters/)
    function can help us.
  prefs: []
  type: TYPE_NORMAL
- en: Source Query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, let’s define the Query on which we want to work.
  prefs: []
  type: TYPE_NORMAL
- en: 'I want to get a List of Online Sales by Color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: I use SUMX to multiply [UnitPrice] by [SalesQuantity].
  prefs: []
  type: TYPE_NORMAL
- en: 'The result looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8f774d89f319c79dc75aafc50c21db7a.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1 — Base Result (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: The query looks like this when I add a filter with CALCULATE(), as described
    above.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And the result looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/14ad36096c6972958e1790d60a770378.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2 — Green Sales on all rows (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: This happens because we replace the filter on the [Color] column with “Green”.
    Consequently, the Measure returns the same value for the Sales with [Color] =
    “Green” on all rows.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing KEEPFILTERS()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OK, what can we do with KEEPFILTER()?
  prefs: []
  type: TYPE_NORMAL
- en: 'When we add KEEPFILTERS() to our Measure, CALCULATE will retain the filter
    context on each row and will add the filter in the expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the new result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/003b91e09510ee621cc533ec11b2cd54.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3 — Green Sales with KEEPFILTERS() (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: OK, great.
  prefs: []
  type: TYPE_NORMAL
- en: And what’s now?
  prefs: []
  type: TYPE_NORMAL
- en: Being Fancy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we can add some logic to our Measures. For example, we can perform calculations
    only in Sales for Green products.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s double the Sales for Green products:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: I use [IF()](https://dax.guide/if/) and [ISBLANK()](https://dax.guide/isblank/)
    to check if the Sales are for Green products.
  prefs: []
  type: TYPE_NORMAL
- en: I return the [Online Sales] Measure result if the Measure for Green Sales is
    blank.
  prefs: []
  type: TYPE_NORMAL
- en: If not, I double the result of the [Online Sales] Measure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d25bc8aa8c5be9e4453ff3111b68f648.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4 — Result of Dynamic Sales (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: But how can we use this mechanism in Power BI?
  prefs: []
  type: TYPE_NORMAL
- en: For example, I want to be able to select a Color and perform a specific calculation
    for the Sales with this color.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, I add a new table to the Data model, but I do not add any new Relationships
    to the Data model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The table looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/04dca46161017b2d903146c235736bc5.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5 — All Colors table (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: Now, I add this column as a Slicer to my report.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, My Measure must get the selected color and add it as a Filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This way, I can perform my calculation based on the selected color in the new
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eecd04fe86d8d5566ba9abb627f7e9b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6 — Result of calculation based on selected color (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: This technique opens up many possibilities with our calculations, as we can
    perform calculations for one row without affecting the result of all other rows.
  prefs: []
  type: TYPE_NORMAL
- en: Work with Context Transition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'But there are situations where it is vital to understand the value of KEEPFILTER():
    Context transition.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about Context transition by reading my article on this topic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/whats-fancy-about-context-transition-in-dax-efb5d5bc4c01?source=post_page-----6d268e3565d0--------------------------------)
    [## What’s fancy about context transition in DAX'
  prefs: []
  type: TYPE_NORMAL
- en: Row and filter context are well-known concepts in DAX. But we can switch between
    these two with context transition.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/whats-fancy-about-context-transition-in-dax-efb5d5bc4c01?source=post_page-----6d268e3565d0--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: The situation is tricky when we use Context Transition in a Measure together
    with a so-called arbitrarily shaped set (More on this in a bit).
  prefs: []
  type: TYPE_NORMAL
- en: 'To show this, I change our example a little bit:'
  prefs: []
  type: TYPE_NORMAL
- en: I want to create a Slicer to filter the Product table by all combinations of
    Brands and Colors.
  prefs: []
  type: TYPE_NORMAL
- en: Then I want to calculate the Average Sales for each Brand and color.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, I don’t use the columns from the Product table. I want a separate
    table for this example to simulate a real-world scenario.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, I use Power Query to extract a table from the original Product
    table to get a list of all Brands with all Colors. In Addition, I add a key column,
    consisting of the combination of the columns Brand and Color.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here an extract from the resulting table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f59b5945a9fcdf394c190983368c577c.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7 — Table with Brands and Colors and the key columns (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: I add the same key column to the product table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now I can add a Relationship between these two tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/804343e64c2f7daf9182ee620826a593.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8 — Expanded Data-Model (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, I create the following Measure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: But when we try to validate the result, we will have a hard time.
  prefs: []
  type: TYPE_NORMAL
- en: The reason is that it’s difficult to understand if the result is correct without
    any control result.
  prefs: []
  type: TYPE_NORMAL
- en: So either we recalculate the results in Excel, or wherever possible, or change
    the Measure to use SUMX().
  prefs: []
  type: TYPE_NORMAL
- en: This makes life easier as we will be able to compare the results with the existing
    Online Sales Measure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the result in Power BI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2a4d26247f623a3b7fd74ca3cec46533.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9 — Result of new Measure with a complex filter (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: If you carefully look at the result, something is wrong.
  prefs: []
  type: TYPE_NORMAL
- en: The Subtotals and the Total are much higher than the sum of the results per
    line.
  prefs: []
  type: TYPE_NORMAL
- en: The reason for this is how the filter is applied in this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the table, we expect a filter like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Such a set is called an “Arbitrarily shaped set”, as we mix different values
    from two separate columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we look at each Sub-total, we would expect two filters:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Adventure Works, we expect the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'For A. Datum we expect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In fact, we get two completely different filters:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the Subtotal for Adventure Works, we have the following filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'For the Subtotal for A. Datum we have the following filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This means that the Measure calculates the sum of all Sales for the selected
    colors but includes both selected brands in the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can prove that something strange is going on when we add a new Matrix Visual
    and add the Brand and Color Columns from the Product tables and compare the Result
    with the Standard Online Sales Measure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8d296a327c960eb69f40360672fcfdee.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10 — Validate the result with the Base Measure (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the results are different between these two examples, which
    makes this effect extremely confusing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The applied filter is now the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The SQLBI articles mentioned in the References section below explain this effect
    in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'To solve this issue, we can use KEEPFILTERS() to enforce the complete filter
    context from the Slicer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the result is as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fa69cec19c98f0002a0e69ff385ac739.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11 — Result after adding KEEPFILTERS() (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0c7aa9a4e756612c100101b36e0f492a.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Akhilesh Sharma](https://unsplash.com/@fotonium?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DAX functions KEEPFILTERS() can be very useful, sometimes a vital function.
  prefs: []
  type: TYPE_NORMAL
- en: It’s not my intention to suggest always using KEEPFILTER() when you use Context
    transition.
  prefs: []
  type: TYPE_NORMAL
- en: But you need to be aware of the consequences of using context transition and
    of the possibility that you users create arbitrarily shaped sets when they use
    the Slicer on their reports.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of this writing, I’m unaware of any drawbacks when adding KEEPFILTERS()
    using Context transition.
  prefs: []
  type: TYPE_NORMAL
- en: But I’m a fan of keeping things simple and not adding any stuff if it’s not
    necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, the most important lesson of this article should be “trust only the
    result that you can prove and validate”.
  prefs: []
  type: TYPE_NORMAL
- en: There are some functions out there that can be very challenging to validate.
    Two of them are AVERAGE and COUNTDISTINCT. These two can return results that are
    difficult to prove.
  prefs: []
  type: TYPE_NORMAL
- en: But this is a different story.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Introduction to KEEPFILTERS() by SQLBI: [https://www.sqlbi.com/articles/using-keepfilters-in-dax-updated/](https://www.sqlbi.com/articles/using-keepfilters-in-dax-updated/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Read this article written by SQLBI with some interesting details: [https://www.sqlbi.com/articles/keepfilters-a-new-dax-feature-to-correctly-compute-over-arbitrary-shaped-sets/](https://www.sqlbi.com/articles/keepfilters-a-new-dax-feature-to-correctly-compute-over-arbitrary-shaped-sets/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we use Iterators, we use Context Transition. Here is another SQLBI Article
    about this topic: [https://www.sqlbi.com/articles/when-to-use-keepfilters-over-iterators/](https://www.sqlbi.com/articles/when-to-use-keepfilters-over-iterators/)'
  prefs: []
  type: TYPE_NORMAL
- en: I use the Contoso sample dataset, like in my previous articles. You can download
    the ContosoRetailDW Dataset for free from Microsoft [here](https://www.microsoft.com/en-us/download/details.aspx?id=18279).
  prefs: []
  type: TYPE_NORMAL
- en: The Contoso Data can be freely used under the MIT License, as described [here](https://github.com/microsoft/Power-BI-Embedded-Contoso-Sales-Demo).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@salvatorecagliari/subscribe?source=post_page-----6d268e3565d0--------------------------------)
    [## Get an email whenever Salvatore Cagliari publishes.'
  prefs: []
  type: TYPE_NORMAL
- en: Get an email whenever Salvatore Cagliari publishes. By signing up, you will
    create a Medium account if you don't…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@salvatorecagliari/subscribe?source=post_page-----6d268e3565d0--------------------------------)
  prefs: []
  type: TYPE_NORMAL
