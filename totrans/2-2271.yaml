- en: Using Machine Learning to Create Custom Color Palettes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用机器学习创建自定义色彩调色板
- en: 原文：[https://towardsdatascience.com/using-machine-learning-to-create-custom-color-palettes-acb4eeaa06aa](https://towardsdatascience.com/using-machine-learning-to-create-custom-color-palettes-acb4eeaa06aa)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/using-machine-learning-to-create-custom-color-palettes-acb4eeaa06aa](https://towardsdatascience.com/using-machine-learning-to-create-custom-color-palettes-acb4eeaa06aa)
- en: Behind the scenes look at Streamlit’s app of the month
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深入了解Streamlit的本月应用
- en: '[](https://medium.com/@siavashyasini?source=post_page-----acb4eeaa06aa--------------------------------)[![Siavash
    Yasini](../Images/55220a8a9397ba51dcc381828735f4a2.png)](https://medium.com/@siavashyasini?source=post_page-----acb4eeaa06aa--------------------------------)[](https://towardsdatascience.com/?source=post_page-----acb4eeaa06aa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----acb4eeaa06aa--------------------------------)
    [Siavash Yasini](https://medium.com/@siavashyasini?source=post_page-----acb4eeaa06aa--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@siavashyasini?source=post_page-----acb4eeaa06aa--------------------------------)[![Siavash
    Yasini](../Images/55220a8a9397ba51dcc381828735f4a2.png)](https://medium.com/@siavashyasini?source=post_page-----acb4eeaa06aa--------------------------------)[](https://towardsdatascience.com/?source=post_page-----acb4eeaa06aa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----acb4eeaa06aa--------------------------------)
    [Siavash Yasini](https://medium.com/@siavashyasini?source=post_page-----acb4eeaa06aa--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----acb4eeaa06aa--------------------------------)
    ·12 min read·Feb 16, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表在[Towards Data Science](https://towardsdatascience.com/?source=post_page-----acb4eeaa06aa--------------------------------)
    ·12分钟阅读·2023年2月16日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/1f09de41ab54258a22eed6764d2b2464.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1f09de41ab54258a22eed6764d2b2464.png)'
- en: Photo by [Ricardo Gomez Angel](https://unsplash.com/@rgaleriacom?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Ricardo Gomez Angel](https://unsplash.com/@rgaleriacom?utm_source=medium&utm_medium=referral)提供，[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: '**Intro**'
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**介绍**'
- en: We all love getting our hands on a new dataset, exploring it, and learning from
    it. But raw numbers by themselves are not great storytellers. Our primal brains
    are wired for lines, shapes, and colors. That’s why numbers need to be visualized
    to tell a good story.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都喜欢接触新的数据集、探索它，并从中学习。但原始数字本身并不是优秀的讲述者。我们原始的大脑天生对线条、形状和颜色敏感。这就是为什么数字需要被可视化才能讲述一个好的故事。
- en: The color palette of your data visualization can make or break your data story
    though. While coming up with the perfect set of colors for your data visualization
    can be an exacting and time-consuming task, you don’t have to do it all on your
    own. Instead of starting from scratch, you can get inspiration from the greatest
    painters and artists in history.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可视化的色彩调色板可能会决定你的数据故事的成败。虽然为你的数据可视化找到完美的颜色组合可能是一个严格且耗时的任务，但你不必完全独自完成。你可以从历史上最伟大的画家和艺术家那里获得灵感。
- en: '![](../Images/d50d19ef7363c358c55970608f26affd.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d50d19ef7363c358c55970608f26affd.png)'
- en: Image by Author
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Creating a color palette from scratch typically falls within the domain of expertise
    of visualization engineers and designers who use color theory to put together
    harmonious palettes suitable for various visualization purposes (e.g. *monochromatic*
    palettes for sequential or gradient plots, or *complimentary* palettes for categorical
    charts). Visualization packages like `[matplotlib](https://matplotlib.org/)` or
    `[plotly](https://plotly.com)` already come with an amazing collection of such
    color palettes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从零开始创建色彩调色板通常是可视化工程师和设计师的专业领域，他们使用色彩理论来组合适合各种可视化目的的和谐调色板（例如，*单色*调色板用于顺序或渐变图，或*互补*调色板用于分类图表）。像`[matplotlib](https://matplotlib.org/)`或`[plotly](https://plotly.com)`这样的可视化包已经提供了令人惊叹的调色板集合。
- en: While data analysts and data scientists can get by using pre-made color palettes,
    there are situations where we may want to put together our own custom palette.
    An example scenario is when you want to make a visualization that is aligned with
    your company’s color theme. For example, you may want to create a bar chart that
    has a theme matching your favorite company’s logo. It would be really nice to
    have an app that does this for you automatically, right?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然数据分析师和数据科学家可以使用预制的颜色调色板，但在某些情况下，我们可能想要自己创建自定义调色板。例如，当你想制作一个与公司颜色主题一致的可视化时。例如，你可能想创建一个与喜欢的公司的
    logo 主题匹配的柱状图。有一个可以自动为你完成这项工作的应用程序会非常好，对吧？
- en: '![](../Images/b101e9b82ec488901cd97df3978afca1.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b101e9b82ec488901cd97df3978afca1.png)'
- en: Image by Author
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: '![](../Images/262ffc426620d97852cb8bd71881c38b.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/262ffc426620d97852cb8bd71881c38b.png)'
- en: Image by Author
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: I spend way too much time trying to come up with the perfect set of colors for
    my visualizations, so I decided to make the process a bit easier for myself.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我花费了太多时间试图为我的可视化找出完美的颜色组合，因此我决定让这个过程对我自己来说更简单一些。
- en: 'I built a web app using [Streamlit](https://www.linkedin.com/company/streamlit/)
    🎈 that can infer color palettes from any input image: paintings, movie posters,
    rock album covers, Christmas family photos, you name it! While the app may not
    give you the perfect color palette right out of the box, it will at least give
    you a great starting point.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用[Streamlit](https://www.linkedin.com/company/streamlit/) 🎈构建了一个 Web 应用程序，可以从任何输入图像中推断颜色调色板：无论是画作、电影海报、摇滚专辑封面，还是圣诞家庭照片，应有尽有！虽然应用程序可能不会立即提供完美的颜色调色板，但至少会给你一个很好的起点。
- en: So let’s see how I built this app.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们看看我是如何构建这个应用程序的。
- en: Building a Color Palette Inference App
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建颜色调色板推断应用程序
- en: '![](../Images/9fa1dc289439f16bba94504a7ba93a7a.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9fa1dc289439f16bba94504a7ba93a7a.png)'
- en: Image by Author
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: In order to create a color palette inference tool we need a few components.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个颜色调色板推断工具，我们需要几个组件。
- en: 'In this post, I’ll teach you:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将教你：
- en: How to construct an image-loading component
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何构建一个图像加载组件
- en: How to build an image enhancement component with sliders
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何构建一个带滑块的图像增强组件
- en: How to cluster pixels and use group averages to make a palette
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何对像素进行聚类并使用组平均值来制作调色板
- en: How to use the color picker widget to display and modify the palette
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用颜色选择器小部件来显示和修改调色板
- en: Want to try the app firsthand? You can check it out [here](https://sophisticated-palette.streamlit.app/)
    and see the source code [here](https://github.com/syasini/sophisticated_palette).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 想要亲自试用这个应用程序吗？你可以在[这里](https://sophisticated-palette.streamlit.app/)查看它，并在[这里](https://github.com/syasini/sophisticated_palette)查看源代码。
- en: 1\. How to construct an image-loading component
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 如何构建一个图像加载组件
- en: 'The first element we need for our app is a way to input the image we want to
    convert to a color palette. There are three ways we can do this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序需要的第一个元素是输入我们想要转换为颜色调色板的图像的方法。我们可以通过三种方式做到这一点：
- en: Load from the pre-existing gallery of images or artworks.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从现有的图像或艺术品库中加载。
- en: Upload a new image file into the app using `st.file_uploader()`.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`st.file_uploader()`将新的图像文件上传到应用程序中。
- en: Download a new image into the app from a URL.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 URL 下载一张新图像到应用程序中。
- en: We can construct three different tabs using`st.tabs()` that allow us to switch
    between these three input modes seamlessly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`st.tabs()`构建三个不同的选项卡，让我们可以无缝切换这三种输入模式。
- en: '![](../Images/ef24ea3236c1e77a27219776a2ab50ff.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ef24ea3236c1e77a27219776a2ab50ff.png)'
- en: Image input sources constructed using `st.tabs()`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`st.tabs()`构建的图像输入源。
- en: Because of the way Streamlit runs the app (top-to-bottom), the input modes that
    come later will get higher priority and will overwrite the output of the previous
    loader. For example, since you ordered the input modes as Gallery → File Uploader
    → Image URL, if you save the image into a variable `img`, anything loaded by the
    gallery will be overwritten by the file uploader and URL downloader outputs.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Streamlit 运行应用程序的方式是从上到下，后来的输入模式会获得更高的优先级并覆盖之前加载器的输出。例如，由于你将输入模式按 Gallery
    → File Uploader → Image URL 的顺序排列，如果你将图像保存到变量`img`中，则画廊加载的任何内容都会被文件上传器和 URL 下载器的输出覆盖。
- en: You can add pop-up warnings for the user when they load an image with a loader
    lower in the hierarchy and an image is already loaded with a loader higher in
    the hierarchy.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户使用层级较低的加载器加载图像时，你可以为用户添加弹出警告，如果层级较高的加载器已经加载了图像。
- en: 'This is what the code will look like:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是代码的样子：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: So if you’re trying to load a pre-existing image from the gallery, but there
    is an existing link in the URL downloader, you’re going to have to remove that
    first. It may not be the most elegant solution, but it works!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你尝试从画廊加载一个预先存在的图像，但在 URL 下载器中已经存在一个链接，你将需要先删除那个链接。这可能不是最优雅的解决方案，但它有效！
- en: Now, on to the implementation of each piece of the loading methods.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，继续实现每一部分的加载方法。
- en: '**Gallery View**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**画廊视图**'
- en: For the gallery view, we can simply save some images in a public repository
    and load those directly in the app (I’m using GitHub here, but you can also use
    AWS S3 or Google Cloud Storage). The `st.selectbox` contains the names of the
    artworks I have saved, so the user can load them simply by selecting them from
    the dropdown menu. Here is what the implementation looks like.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于画廊视图，我们可以简单地将一些图像保存在公共存储库中，并直接在应用程序中加载这些图像（我在这里使用 GitHub，但你也可以使用 AWS S3 或
    Google Cloud Storage）。`st.selectbox` 包含我保存的艺术品名称，因此用户可以通过从下拉菜单中选择来加载它们。实现代码如下。
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`gallery_dict` is a dictionary that has a file name and image file path as
    key-value pairs, and `PIL.Image.open()` is used to load those files. The results
    are saved in a variable named `img`.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`gallery_dict` 是一个字典，包含文件名和图像文件路径作为键值对，`PIL.Image.open()` 用于加载这些文件。结果保存在一个名为
    `img` 的变量中。'
- en: '**File Uploader**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件上传器**'
- en: Implementing the file uploader is very easy because there is already a Streamlit
    widget for it. It’s called (can you guess?) `st.file_uploader()`!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 实现文件上传器非常简单，因为已经有一个 Streamlit 小部件。它叫做（你能猜到吗？）`st.file_uploader()`！
- en: 'Here is what the implementation looks like:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 实现代码如下：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This widget allows you to upload a file that you can consequently pass to `PIL.Image.open()`
    to load. This step may break if the file is not actually an image file, or has
    a format inconsistent with what `PIL.Image` expects. To prevent this from becoming
    an issue we can put the loading part into a `try/except` block.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小部件允许你上传一个文件，然后你可以将其传递给 `PIL.Image.open()` 来加载。如果文件实际上不是图像文件，或者格式与 `PIL.Image`
    期望的不一致，这一步可能会失败。为了防止这个问题发生，我们可以将加载部分放入一个 `try/except` 块中。
- en: ⚠️ Here I’m using this block as a catch-all to avoid all sorts of unexpected
    errors when loading a file. However, it is normally not recommended to use `except`
    without actually specifying the `Exception` type you are trying to bypass, especially
    because deadly errors you are not aware of will pass through the block silently,
    making it difficult for you to debug your code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ⚠️ 我在这里使用这个代码块作为万用块，以避免在加载文件时出现各种意外错误。然而，通常不推荐在没有实际指定要绕过的`Exception`类型的情况下使用`except`，尤其是因为你可能不知道的致命错误会默默地通过这个代码块，使得调试代码变得困难。
- en: '**URL Downloader**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL 下载器**'
- en: Let’s face it! While uploading files is a great way for users to load their
    custom images they want to infer the color palettes from, it’s not the easiest
    way. The user will have to find the image (if they don’t have it already), download
    it locally, then upload it to the app. Sounds easy, but annoying in practice.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 说实话！虽然上传文件是用户加载他们希望推断颜色调色板的自定义图像的好方法，但这不是最简单的方法。用户需要找到图像（如果他们还没有的话），在本地下载，然后上传到应用程序中。听起来简单，但在实际操作中却很麻烦。
- en: In order to remove this barrier, we can add a URL downloader to the app so the
    user can simply copy the image link (e.g. from google search results) and simply
    paste it into the app. In order to accomplish this, we need the `requests` module,
    which gets us the contents of the URL, and the `io.BytesIO` function which makes
    the contents comprehendible by `PIL.Image.open()`. The implementation is simple
    and quite similar to what we did for the file uploader.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了消除这个障碍，我们可以在应用程序中添加一个 URL 下载器，这样用户可以简单地复制图像链接（例如，从 Google 搜索结果中），然后直接粘贴到应用程序中。为了实现这一点，我们需要
    `requests` 模块，它获取 URL 的内容，以及 `io.BytesIO` 函数，它使得内容能够被 `PIL.Image.open()` 理解。实现起来简单且与文件上传器的实现类似。
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 2\. How to build an image enhancement component with sliders
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 如何使用滑块构建图像增强组件
- en: Now that we have the image uploaded, we are ready to infer the color palette,
    right? Not exactly.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经上传了图像，我们准备推断颜色调色板，对吗？其实不完全是。
- en: The original image you load into the app may not be optimized for color inference.
    The colors may be too dull, and you may not have enough brightness or contrast
    across the canvas. That’s why you need to do some image adjustments first.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你加载到应用程序中的原始图像可能未经过颜色推断的优化。颜色可能过于暗淡，画布上的亮度或对比度可能不足。这就是为什么你需要首先进行一些图像调整。
- en: '![](../Images/5817b6a837e8ae6e175989ec428582ed.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5817b6a837e8ae6e175989ec428582ed.png)'
- en: 'In order to apply enhancements to the image, we can use `PIL.ImageEnhance`
    . The API is very simple. For example, if you want to enhance the color of the
    image (loaded into `img` ) by a factor of 2.5, you can run:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将增强功能应用于图像，我们可以使用 `PIL.ImageEnhance`。API 非常简单。例如，如果你想将图像（加载到 `img` 中）的颜色增强因子设置为
    2.5，你可以运行：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Simply replacing `Color` with `Shapness`, `Contrast`, or `Brightness` will adjust
    these image attributes respectively. We could create four different sliders that
    assign values to each of these attributes, and then write separate blocks of code
    and apply the enhancements to the image in turn. But we are good programmers,
    and we try to keep our codes beautiful and DRY (Don’t Repeat Yourself) as much
    as possible. So let’s approach this a bit more pragmatically.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 只需将 `Color` 替换为 `Shapness`、`Contrast` 或 `Brightness`，即可分别调整这些图像属性。我们可以创建四个不同的滑块，将每个属性的值分配给这些滑块，然后编写单独的代码块，依次将增强应用于图像。但我们是优秀的程序员，我们尽量保持代码优雅和
    DRY（Don’t Repeat Yourself）。所以让我们以更实用的方式来处理这个问题。
- en: We can define a dictionary that contains all the enhancements we want to apply
    as keys, with values indicating the ranges and step sizes of the sliders we want
    to assign to them in the app.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以定义一个字典，其中包含我们希望应用的所有增强功能作为键，值表示我们希望在应用程序中分配给这些增强功能的滑块范围和步长。
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Using this approach, if we want to change the enhancement type or the range
    of values, we only need to change the original dictionary.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，如果我们想更改增强类型或值范围，我们只需更改原始字典。
- en: Now that we have the sliders on the sidebar, the only thing left is to apply
    the values to the image using `ImageEnhance`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在侧边栏上放置了滑块，剩下的就是使用 `ImageEnhance` 将这些值应用于图像。
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Show the Image**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**显示图像**'
- en: 'Now that we have the image loaded, the only thing left is to show it on the
    app using `st.image()`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经加载了图像，剩下的就是使用 `st.image()` 将其显示在应用程序中：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: and *Voilà*!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 和 *瞧*！
- en: 3\. How to cluster pixels and use group averages to make a palette
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 如何聚类像素并使用组平均值制作调色板
- en: Finally, onto the fun stuff! Using machine learning to infer the color palette.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，进入有趣的部分！使用机器学习推断色彩调色板。
- en: 'The idea here is very simple. An image is a collection of pixels that each
    have three values assigned to them: R, G, B. These values basically tell you how
    much red, green, and blue each pixel contains. To infer the color palette, the
    actual location of the pixel on the canvas is virtually irrelevant. What matters
    is where it’s located within the (R, G, B) coordinate space. So before we proceed
    let’s decompose the image into this new coordinate system and get rid of the actual
    location of the pixel on the image.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的想法非常简单。一幅图像是像素的集合，每个像素都有三个值：R、G、B。这些值基本上告诉你每个像素包含多少红色、绿色和蓝色。为了推断色彩调色板，像素在画布上的实际位置基本上是无关紧要的。重要的是它在
    (R, G, B) 坐标空间中的位置。因此，在继续之前，让我们将图像分解到这个新的坐标系统中，并摆脱像素在图像上的实际位置。
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If we look at the pixels in the RGB coordinates, we can then group the ones
    that are close together and use the average values of the pixels to represent
    each group — essentially a single color in our palette. For example, if we want
    to construct a 5-color palette from the enhanced image of Mona Lisa, we need to
    first look at the distribution of the pixels in the RGB space (here it’s projected
    into 2D using the PCA algorithm):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看 RGB 坐标中的像素，我们可以将相互接近的像素分组，并使用像素的平均值来表示每个组——实际上是我们调色板中的一种颜色。例如，如果我们想从蒙娜丽莎的增强图像中构建一个
    5 色调色板，我们需要首先查看 RGB 空间中像素的分布（这里通过 PCA 算法投影到二维）：
- en: '![](../Images/aaf50c2e6a36baff6e418262156e77bc.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aaf50c2e6a36baff6e418262156e77bc.png)'
- en: 2-dimensional PCA decomposition of original pixels colors from (R, G, B) space
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 原始像素颜色在 (R, G, B) 空间中的二维 PCA 分解
- en: '![](../Images/79b2d0844aea6616e93aa70a23ce6a38.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/79b2d0844aea6616e93aa70a23ce6a38.png)'
- en: Then we select 5 distinct clusters and assign the average value of each cluster
    to a slot in our palette.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们选择 5 个不同的簇，并将每个簇的平均值分配给调色板中的一个槽。
- en: original sampled pixels assigned to 5 different clusters using K-means algorithm
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 K-means 算法将原始采样像素分配到 5 个不同的簇
- en: Obviously, we don’t need to do this by hand. There is a handy machine learning
    algorithm called K-means clustering that can do this for us in one fell swoop.
    The only parameter we need to provide is the number of clusters, a.k.a. our palette
    size. This is what the implementation looks like using `sklearn.cluster.KMeans`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们不需要手动完成这个工作。有一种方便的机器学习算法叫做 K-means 聚类，它可以一举完成这个任务。我们唯一需要提供的参数是聚类的数量，也就是我们的调色板大小。这是使用
    `sklearn.cluster.KMeans` 实现的样子。
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: And that’s it! We now have our color palette, and we just need to return it
    to the user on the app.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们现在有了我们的调色板，只需要将其返回给应用中的用户。
- en: ℹ️ Although here we used the popular R, G, B decomposition of the pixels, it’s
    important to note that it’s not the only way to decompose colors. We could have
    done the clustering of pixels in HSV (Hue, Saturation, Value) space which would
    have distributed the pixels differently and led to a different color palette.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: ℹ️ 尽管我们在这里使用了流行的 R、G、B 像素分解，但值得注意的是，这不是分解颜色的唯一方法。我们本可以在 HSV（色调、饱和度、明度）空间中进行像素聚类，这将以不同的方式分布像素，从而得到不同的调色板。
- en: 4\. How to use the color picker widget
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 如何使用色彩选择器控件
- en: Somehow, I feel like the subconscious reason I decided to build this app was
    to use Streamlit’s amazing `st.color_picker()` widget! The nice thing bout this
    widget is that you can both show the palette colors inferred from the image, and
    also change them if you want. This is perfect because as I mentioned earlier,
    the colors you get back from the app may not be 100% perfect for your particular
    use case, but only a good starting point. So you may want to change them a little
    and do a bit of touch-up before actually using it for your visualization.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 不知为何，我感觉我决定构建这个应用的潜意识原因是为了使用 Streamlit 的神奇 `st.color_picker()` 控件！这个控件的好处在于，你可以同时展示从图像中推断出的调色板颜色，并且如果愿意的话，还可以更改它们。这非常完美，因为正如我之前提到的，从应用中得到的颜色可能并不是针对你特定用例的
    100% 完美，而只是一个很好的起点。所以你可能需要稍微调整一下，在实际用于你的可视化之前做一些修饰。
- en: We don’t want the palette to take up half the page on our app, so let’s put
    them each in a separate column.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望调色板在应用程序中占据页面的一半，因此让我们把它们分别放在不同的列中。
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Beautiful!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 美极了！
- en: One last piece to finish things up, would be to provide the user with a practical
    end product they can use in their day-to-day work. If a data analyst or data scientist
    is using this app to infer a color palette, most likely they are going to use
    it in `matplotlib` or `plotly` to apply the palette to their visualization. Why
    not provide them with a code snippet that takes care of this, so they don’t have
    to copy-paste every single hex-code from the color palette into their coding environment.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一件要做的事情是为用户提供一个可以在日常工作中使用的实用产品。如果数据分析师或数据科学家使用这个应用来推断一个色彩调色板，他们很可能会在 `matplotlib`
    或 `plotly` 中使用这个调色板来应用于他们的可视化中。为什么不提供一个代码片段来处理这个问题，这样他们就不必将每一个十六进制颜色代码从调色板中复制粘贴到他们的编码环境中。
- en: '![](../Images/a5da3376d560c68a39cdbae2260d0f7b.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a5da3376d560c68a39cdbae2260d0f7b.png)'
- en: Image by Author
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Thanks to Streamlit’s `st.code()` widget, the whole code block can be copied
    with a single click!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢 Streamlit 的 `st.code()` 控件，可以一键复制整个代码块！
- en: Wrapping up
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: There you go! Now you have a fully functional palette inference app that can
    help you figure out what colors Leonardo Da Vinci used to put that smile on Mona
    Lisa’s face!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在你有了一个功能齐全的调色板推断应用，可以帮助你弄清楚列奥纳多·达·芬奇是用什么颜色让蒙娜丽莎的脸上带上微笑的！
- en: In this post, we covered a lot of Streamlit’s functionalities, especially widgets
    like `st.image`, `st.tabs`, `st.file_uploader`, `st.color_picker`. But there is
    also a lot more that we didn’t cover here for the sake of brevity, so feel free
    to jump to the [source code](https://github.com/syasini/sophisticated_palette)
    repo and check out all the details yourself. You can see that I have relied heavily
    on `st.session_state` to keep things consistent across multiple runs of the app.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们介绍了很多 Streamlit 的功能，特别是像 `st.image`、`st.tabs`、`st.file_uploader` 和
    `st.color_picker` 这样的控件。不过为了简洁起见，我们没有涵盖所有内容，所以请随时跳转到 [源代码](https://github.com/syasini/sophisticated_palette)
    仓库，自己查看所有细节。你可以看到，我在多个应用运行间保持一致性时，依赖了大量的 `st.session_state`。
- en: We learned how to
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学会了
- en: Construct an image loading component (load pre-existing, upload, or URL download).
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个图像加载组件（加载现有图像、上传或 URL 下载）。
- en: Build an image enhancement component with sliders.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个带滑块的图像增强组件。
- en: Cluster pixels together using K-means and use group averages to construct a
    palette.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用K-means将像素聚类，并使用组平均值来构建调色板。
- en: Return the palette to end-user using the color-picker widget.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用颜色选择器小部件将调色板返回给最终用户。
- en: I had a lot of fun walking you through all these steps, and I really hope you
    enjoyed reading/skimming through the article and hopefully learned a thing or
    two.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我很高兴能带你走过所有这些步骤，希望你喜欢阅读/浏览这篇文章，并希望你学到了一些东西。
- en: You can check out the app firsthand, [here](https://sophisticated-palette.streamlit.app/).
    I would love to hear your thoughts, questions, comments, and feedback! Get in
    touch with me on [LinkedIn](https://www.linkedin.com/in/siavash-yasini/) or through
    my [website](https://www.siavashyasini.com/).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以亲自查看这个应用，[这里](https://sophisticated-palette.streamlit.app/)。我很想听听你的想法、问题、评论和反馈！通过[LinkedIn](https://www.linkedin.com/in/siavash-yasini/)或我的[网站](https://www.siavashyasini.com/)与我联系。
- en: '*This article was written in collaboration with* [*Ksenia Anske*](https://www.linkedin.com/in/kseniaanske/)
    *and team* [*Streamlit*](https://streamlit.io/) *at* [*Snowflake*](https://www.snowflake.com/en/)*.
    See the final version of this article published on Streamlit’s blog* [*here*](https://blog.streamlit.io/create-a-color-palette-from-any-image/)*.*'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '*这篇文章与* [*Ksenia Anske*](https://www.linkedin.com/in/kseniaanske/) *及团队* [*Streamlit*](https://streamlit.io/)
    *在* [*Snowflake*](https://www.snowflake.com/en/) *的合作下编写。请查看这篇文章在Streamlit博客上发布的最终版本*
    [*这里*](https://blog.streamlit.io/create-a-color-palette-from-any-image/)*。*'
- en: '*All images, unless otherwise noted, are by the author.*'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，所有图片均由作者提供。*'
