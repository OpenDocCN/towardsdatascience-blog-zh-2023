- en: How to use OpenAI’s Code Interpreter to Analyze Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-use-openais-code-interpreter-to-analyze-data-45f5b2c57c1e](https://towardsdatascience.com/how-to-use-openais-code-interpreter-to-analyze-data-45f5b2c57c1e)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exploring SaaS Revenue Multiples with the Help of AI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://michaeltauberg.medium.com/?source=post_page-----45f5b2c57c1e--------------------------------)[![Michael
    Tauberg](../Images/06288c1c9559d79132c535201660984f.png)](https://michaeltauberg.medium.com/?source=post_page-----45f5b2c57c1e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----45f5b2c57c1e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----45f5b2c57c1e--------------------------------)
    [Michael Tauberg](https://michaeltauberg.medium.com/?source=post_page-----45f5b2c57c1e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----45f5b2c57c1e--------------------------------)
    ·6 min read·Jul 17, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4d4890c28cee22c5291208b1f30cb9b9.png)'
  prefs: []
  type: TYPE_IMG
- en: photo generated by OpenAI Dall-E tool
  prefs: []
  type: TYPE_NORMAL
- en: I’ve put off writing new data analysis posts for a while now. The return on
    investment seemed too low. Gathering data, cleaning it, and writing fine-tuned
    plotting code takes a long time and involves lots of tedious work.
  prefs: []
  type: TYPE_NORMAL
- en: But times have changed! I saw that OpenAI finally releasing their [Code Interpreter
    tool](https://openai.com/blog/chatgpt-plugins), potentially freeing me from the
    need to do boring and repetetive data tasks. Let’s see how AI can help me on a
    project I’ve been putting off for monts — a follow up of to my story [SaaS Revenue
    Multiples, Interest Rates, and Modeling in R](/saas-revenue-multiples-and-modeling-in-r-29ce10905488)
  prefs: []
  type: TYPE_NORMAL
- en: Getting the Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the one area where Code Interpreter can’t yet help. I had to go out
    myself and collect data from the following sources:'
  prefs: []
  type: TYPE_NORMAL
- en: Stock Price-to-Sales from [Macrotrends](https://www.macrotrends.net/stocks/charts/CRM/salesforce/price-sales)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Federal Funds Rates from the [St Louis Federal Reserve](https://fred.stlouisfed.org/series/fedfunds)
    page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Treasury yield data from the [Deptartmen of the Treasury](https://home.treasury.gov/policy-issues/financing-the-government/interest-rate-statistics)
    site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without the help of AI, I also wrote the python code to parse and combine these
    sources into a single csv file. Here too, I should have used AI tools. ChatGPT
    for example is great at generating python pandas code for data manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: Anyways, here is a snapshot of the data that we will be feeding into our robot
    friend. Over 2000 Price/Sales datapoints from over 10 years and almost 100 companies.
  prefs: []
  type: TYPE_NORMAL
- en: '[typhon/saasrevenuewinterestrates | Workspace | data.world](https://data.world/typhon/saasrevenuewinterestrates/workspace/file?filename=min_df.csv)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9c2ee1236c4cd751754d4dc07a77f79b.png)'
  prefs: []
  type: TYPE_IMG
- en: Enabling The Interpreter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you pay for ChatGPT like I do, then you should have access to Code Interpreter.
    Just go to settings to enable this Beta feature.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/472ab96d462b46fee99d5edb82ccd732.png)'
  prefs: []
  type: TYPE_IMG
- en: Loading the Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With Interpreter Enabled, we can now upload our csv and ask the Interpreter
    questions about it. There is also a new “show work” tab that will let us see the
    python code that Interpreter generates. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/046934a3b39f7e48c9af3e1f724a83ff.png)![](../Images/d9db28d6fff26e7aac490c51654745df.png)'
  prefs: []
  type: TYPE_IMG
- en: The interpreter is able to figure out what the dataset is and to correctly interpret
    the column names. In particular, the `3 Mo`, `6 Mo`, `1 Yr`, `2 Yr`, `3 Yr`, `5
    Yr`, `7 Yr`, `10 Yr`, `20 Yr`, `30 Yr` columns are indeed US Treasury yield figures
    while FedFundsRate is the rate of interest paid by the federal reserve to banks.
    It also figured out that growth_rolling_avg is a growth rate metric (in our case
    of company revenue).
  prefs: []
  type: TYPE_NORMAL
- en: Basic Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can talk to Code Interpreter just like you do ChatGPT. Here, I ask it one
    of the first questions of exploratory data analysis, are there any nice correlations?
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e6cea46eb0b714239be9edaa5fe060c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Not only does Interpreter produce good code, but the descriptions it provides
    are also largely correct.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aef1dc03d217827d7f32632805cf7435.png)'
  prefs: []
  type: TYPE_IMG
- en: Code interpreter even identifies possible ***reasons*** for the above correlations
    For example that companies with more recent IPOs have had higher P/S ratios and
    that higher M2 Money supply leads to higher stock prices.
  prefs: []
  type: TYPE_NORMAL
- en: The oddest correlation which the tool does not pontificate on is the one between
    price/sales and price itself. My guess is that this reflects a secular trend of
    increasing P/S. Adobe is an old stock which highlights this well.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/26532ce131bae50fb9dfde412b8b804b.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s use our new AI friend to test out the theory that companies with more
    recent IPOs have a higher price-to-sales ratios.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ece4869e6c7da2f2b27724663c897ad1.png)'
  prefs: []
  type: TYPE_IMG
- en: Whoops we hit a snag. I can see why this thing is still in Beta.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/637be665414ff4a644c6602a66ead93b.png)'
  prefs: []
  type: TYPE_IMG
- en: Luckily after starting a new session and re-uploading, Interpreter performs
    flawlessly.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/29e77956cd612751d77d8f796c7044a0.png)'
  prefs: []
  type: TYPE_IMG
- en: We get a nice graphic showing that the most egregious P/S numbers occurred in
    2021 and that they mostly involved companies with recent IPOs.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also see the code it used to generate this plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c35024ab39419b43be5e1af95880dcf0.png)'
  prefs: []
  type: TYPE_IMG
- en: I personally think the use of “hue” to color ipo_year points is a bit confusing
    since year is a discrete variable. Let’s see if we can cajole the interpreter
    to do something better.
  prefs: []
  type: TYPE_NORMAL
- en: Despite my typo, it gets the job done
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/676aa63f4a3e7bfa96931a964e7f6bf4.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, let’s see if Code Interpreter can figure out what I want without me asking
    directly. Can It decide what sort of plot is best? Can it figure out the correct
    variables to use on the axes?
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/09ee0a65dd2598d1189f5a723253d17a.png)'
  prefs: []
  type: TYPE_IMG
- en: Amazing! Just what I was looking for. The only thing missing is the trendline,
    which the tool easily added after I asked for it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/683d7a3f1ff98ffc17a09554d3bbfd83.png)'
  prefs: []
  type: TYPE_IMG
- en: As expected, the crazy P/S multiples in our data disappear once the 30Yr yield
    goes above 2.5%.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far Code Interpreter has successfully done the job of a junior data analyst.
    Now let’s see if it can tackle the work of a real Data Scientist.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c11b046f9b651c95dcc739e6a1b0836e.png)'
  prefs: []
  type: TYPE_IMG
- en: thankfully my typos can’t stop Code Interpreter
  prefs: []
  type: TYPE_NORMAL
- en: Ok, now this is getting interesting. Code Interpreter can help us generate a
    nice linear regression model. Of course, we have to be careful with machines.
    It was over-indexing on my last prompt and only used the 30Yr yield as an input
    parameter. As expected, such a simple (one variable) model has a huge margin of
    error.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1030af0c6b7233cde13b5f031c02e39c.png)'
  prefs: []
  type: TYPE_IMG
- en: With a little cajoling though, it expanded the linear model to include these
    features (which are highly correlated to price-to-sales)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/00cf03c8e5bcef3c702a918c61d05e0e.png)'
  prefs: []
  type: TYPE_IMG
- en: And now our results are looking much better.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/414f9e8b9e0e743da6292d6083265f75.png)'
  prefs: []
  type: TYPE_IMG
- en: Of course, we’re cheating a bit using ps_prev (the price-to-sales from the previous
    quarter). With this info, the growth rate, and data on monetary conditions, Code
    Interpreter’s model can predict Price/Sales within about 2 units. Not bad but
    not great either.
  prefs: []
  type: TYPE_NORMAL
- en: And to be fair this isn’t Code Interpreter’s fault. The dataset is too small
    and too volatile to do accurate P/S predictions. Fancier models I’ve tried can’t
    do much better, but Code Interpreter got to this conclusion much, much faster.
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenAI’s new Code Interpreter tool really is amazing. More than anything it
    is ***FAST***. You can explore your data, do simple analysis, and leverage auto-generated
    code to do more fine-grained analysis. In general, I highly recommend this tool
    to speed up your work.
  prefs: []
  type: TYPE_NORMAL
- en: However, caution is particularly important when using AI tools. They don’t necessarily
    understand your goals or the domain you’re working in. They make mistakes. It
    is always easy to shoot oneself in the foot in a data analysis project. Code Interprter
    makes this easier than ever. Junior analysts in particular should not trust everything
    the tool spits out and try interacting directly with the generated code.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, a seasoned data analyst should see their productivity skyrocket
    with AI tools like these. And as we are freed from busy work, perhaps we will
    have time to solve new problems and delve even deeper into the worlds of numbers
    around us.
  prefs: []
  type: TYPE_NORMAL
