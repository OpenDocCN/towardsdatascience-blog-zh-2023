["```py\n# Function to calculate the percentage difference between two numbers\npct_difference <- function(n1, n2) {\n  \"Function that takes two numbers and return the percentual difference\n   between n1 and n2, being n1 the reference number\"\n\n  pct_diff <- (n1-n2)/n1\n\n  return ( cat('The difference between', n1, 'and', n2, 'is', n1-n2,\n               ', which is', pct_diff*100, '% of', n1) )\n}\n\n# Test 1\npct_difference(10, 2)\n[OUT] The difference between 10 and 2 is 8 , which is 80 % of 10\n\n# Test 2\npct_difference(10, '2')\n[OUT] Error in n1 - n2 : non-numeric argument to binary operator\n```", "```py\n# Function to calculate the percentage difference between two numbers\n# with error handling\npct_difference_error_handling <- function(n1, n2) {\n  \"Function that takes two numbers and return the percentual difference\n   between n1 and n2, being n1 the reference number\"\n\n# Try the main code\n  tryCatch(pct_diff <- (n1-n2)/n1,\n\n        # If you find an error, use this code instead\n           error= return(\n             cat( 'The difference between', as.integer(n1), 'and', as.integer(n2), 'is', \n                  (as.integer(n1)-as.integer(n2)), 'which is', \n                  100*(as.integer(n1)-as.integer(n2))/as.integer(n1),\n                  '% of', n1 )#cat  \n             )#return\n           )#trycatch\n\n  # If no error happens, return this statement\n  return ( cat('The difference between', n1, 'and', n2, 'is', n1-n2,\n               ', which is', pct_diff*100, '% of', n1) )\n}\n\n# Test 1\npct_difference_error_handling(10, 3)\n[OUT] The difference between 10 and 3 is 7 which is 70 % of 10\n\n# Test 2\npct_difference_error_handling('10', '3')\n[OUT] The difference between 10 and 3 is 7 which is 70 % of 10\n```", "```py\n# Function to calculate the percentage difference between two numbers\n# with error handling\ndef pct_difference_error_handling(n1, n2):\n  '''Function that takes two numbers and return the percentual difference\n   between n1 and n2, being n1 the reference number'''\n\n  # Try the main code\n  try:\n    pct_diff = (n1-n2)/n1\n    return f'The difference between {n1} and {n2} is {n1-n2}, which is {pct_diff*100}% of {n1}'\n\n  # If you find an error, use this code instead\n  except:\n    pct_diff = (int(n1)-int(n2))/int(n1)\n    return f'The difference between {n1} and {n2} is {int(n1)-int(n2)}, which is {pct_diff*100}% of {n1}'\n\n# Test 1\npct_difference_error_handling(10,2)\n[OUT] The difference between 10 and 2 is 8, which is 80.0% of 10\n\n# Test2\npct_difference_error_handling('10', '2')\n[OUT] The difference between 10 and 2 is 8, which is 80.0% of 10\n```", "```py\ntry:\n  print(x)\nexcept:\n  print(\"There's no x\")\nfinally:\n  print(\"Code ended\")\n\n[OUT] \n# There's no x\n# Code ended\n```", "```py\ntryCatch( print(x),\n          error= print('There is no x'),\n          finally= print('Code ended') )\n\n[OUT]\n#[1] \"There is no x\"\n#Error in value[[3L]](cond) : attempt to apply non-function\n#[1] \"Code ended\"\n```"]