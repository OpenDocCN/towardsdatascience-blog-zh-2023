- en: How to Build an On-Call Culture in a Data Engineering Team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-build-an-on-call-culture-in-a-data-engineering-team-7856fac0c99](https://towardsdatascience.com/how-to-build-an-on-call-culture-in-a-data-engineering-team-7856fac0c99)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Systematically resolve data issues in production
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@xiaoxugao?source=post_page-----7856fac0c99--------------------------------)[![Xiaoxu
    Gao](../Images/8712a7e5f3bad0d2abd7e04792fad66f.png)](https://medium.com/@xiaoxugao?source=post_page-----7856fac0c99--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7856fac0c99--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7856fac0c99--------------------------------)
    [Xiaoxu Gao](https://medium.com/@xiaoxugao?source=post_page-----7856fac0c99--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7856fac0c99--------------------------------)
    ·9 min read·Mar 15, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a16b492e8b21d711105088072c9758a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Pavan Trikutam](https://unsplash.com/@ptrikutam) on [Unsplash](https://unsplash.com/)
  prefs: []
  type: TYPE_NORMAL
- en: At any company, one of the best ways to gain and retain customers is to deliver
    excellent services, meaning the service should be healthy and functional whenever
    the customers access it. To achieve this, the tech industry introduced on-call
    duty which was often associated with doctors in the past.
  prefs: []
  type: TYPE_NORMAL
- en: 'The definition of on-call varies among companies. But here is the general description:
    Being on-call means being available and ready to respond to production incidents
    with appropriate urgency during a certain period of time. On-call is often associated
    with Software Engineers and Site Reliability Engineers (SRE) to support software
    such as APIs, websites, mobile apps, IoT services and etc.'
  prefs: []
  type: TYPE_NORMAL
- en: Data engineers, on the other hand, seem to be not engaged with on-call duty
    as much as their peers. I will explain the reasons in a second. But this is going
    to change.
  prefs: []
  type: TYPE_NORMAL
- en: As someone who is interested in multidisciplinary, I want to share how we can
    set up an on-call culture in a data engineering team. Most of the experiences
    come from my current team, but I would like to hear how you do it in your team
    and any interesting thoughts down the line.
  prefs: []
  type: TYPE_NORMAL
- en: Why on-call wasn’t a thing for data engineers?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On-call can be stressful. When a production issue kicks in, engineers immediately
    get paged inside or outside of regular working hours and do their best to do the
    first steps of incident management. They are aware that anxious customer are eagerly
    waiting for service to be restored. They understand that a prolonged delay in
    fixing the issue would result in the loss of customers and revenue for the company.
  prefs: []
  type: TYPE_NORMAL
- en: However, many data engineers believe **that pipeline issues have limited impact
    on customer satisfaction and revenue**, leading to a lack of incentive to be on
    standby at all times. This perception may stem from the fact that much of the
    data is used by data analysts and scientists to create dashboards and reports
    which are not directly customer-facing and may not require immediate attention.
  prefs: []
  type: TYPE_NORMAL
- en: Another reason is that **many data issues are turned into feature requests.**
    The “bug or feature” discussion is a common occurrence in the data domain. This
    can be particularly problematic for data teams that haven’t defined any SLA or
    SLO with their users, as issues caused by lack of requirements are categorized
    as new features, leading to lower prioritization. In principle, on-call aims to
    resolve urgent issues rather than handle feature requests.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, the complicity of the data flow, coupled with users’ misinterpretation
    of metrics, and unforeseen variables in the source data, can contribute to feelings
    of frustration.
  prefs: []
  type: TYPE_NORMAL
- en: It is the case that data engineers face different types of production issues
    than software engineers. So the voice in our mind might be “Hey, sounds like data
    engineers don’t need an on-call process. Lucky them.”
  prefs: []
  type: TYPE_NORMAL
- en: What do data engineers do during on-call?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In my opinion, on-call is not only about solving the most urgent production
    issues swiftly, but it is also about **standardizing the process to handle unexpected
    production requests.** For data engineers, this is particularly important because
    they are confronted with much more diverse issues compared to software engineers.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you consider creating an on-call culture, it’s a good exercise to list all
    the production issues and requests the team receives that are outside of their
    daily scope, and give each a description and priority. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d12648ebe3c7ec56f703f7855239fff9.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of data issues and requests (Created by author)
  prefs: []
  type: TYPE_NORMAL
- en: Eventually, someone from the team should process the requests following a guideline.
    The more detailed the guideline, the more streamlined the on-call process will
    be. It’s essential to establish a fair environment for everybody to get involved
    in the on-call process. In this respect, it doesn’t sound so different from software
    engineers, right?
  prefs: []
  type: TYPE_NORMAL
- en: Next, I will share some tools and frameworks to establish the on-call culture.
    Keep in mind that there is no one-size-fits-all approach and you don’t need to
    use all the tools. Pick up the tools that make more sense for your team.
  prefs: []
  type: TYPE_NORMAL
- en: On-call workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The key to building a healthy on-call culture is proper preparation. More preparation
    means fewer decisions we have to make on the spot, leading to fewer mistakes.
    On-call workflow tells engineers how to approach a variety of production requests
    in a consistent manner.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/17f998bf41f789be1ee573073d7bfec1.png)'
  prefs: []
  type: TYPE_IMG
- en: On-call workflow (Created by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'The above workflow is a template and you should adjust it according to your
    needs, but here are the main steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Define the sources of alerts.** Redirect all production issues into one or
    two channels. For example, use Slack integration to redirect pipeline issues,
    infrastructure failures, and test failures into a centralized Slack channel for
    easy tracking.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Identify the category of alerts, the scale of the impact, and its urgency.**
    Every on-call should be able to assess the urgency of the issue based on its category,
    impact, and SLA requirements. By creating “data products” with clear requirements,
    teams can benefit from the process that enables them to identify the impact and
    urgency efficiently. I recommend article — [Writing data product pipelines with
    Airflow](https://medium.com/miro-engineering/writing-data-product-pipelines-with-airflow-1ace222f8f5a),
    a nice practice to write data requirements as code in Airflow dags.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Identify the root cause and solve the issue.** When an urgent issue arises,
    on-call should do their best to find the root cause and solve the issue. However,
    not every data engineer knows all the nitty-gritty of data models maintained by
    data analysts. In such situations, following an escalation pattern can be helpful.
    It allows engineers to ask for help from other engineers or analysts with necessary
    expertise until the issue is resolved.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Perform post-incident actions and update the on-call journal.** Don’t forget
    to perform post-incident actions like backfilling to correct historical data for
    incremental models. It’s also recommended to keep an on-call journal for knowledge
    sharing.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**User communication.** In a parallel thread, it’s important to keep users
    in the loop. Effective communication during the “data downtime” builds trust between
    the data team and users. One of my articles — [Status Page for Data Products —
    We All Need One](https://medium.com/towards-data-science/status-page-for-data-products-we-all-need-one-5a493092059a)
    introduces the status page as a method to improve effective communications during
    data downtime.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**On-call ownership**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As reported in [State of Analytics Engineering 2023 from dbt](https://www.getdbt.com/state-of-analytics-engineering-2023/),
    the top data challenge for all data practitioners is *ambiguous data ownership*.
    This challenge also leads to the question during on-call “who should fix the issue?”
  prefs: []
  type: TYPE_NORMAL
- en: I guess the answer is “it depends”.
  prefs: []
  type: TYPE_NORMAL
- en: 'The on-call ownership very much depends on the day-to-day job of data engineers.
    Clearly, engineers are responsible for technical failures, but when it comes to
    data model failure, ownership becomes controversial. Whether it’s a centralized
    or decentralized data team, data engineers always need analysts’ wisdom to diagnose
    and resolve model-related issues. In the end, it creates shared ownership. In
    my humble opinion, two approaches may help the collaboration:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Assign an owner to each data model as much as you can.** Simply [assigning
    an owner to the model](https://docs.getdbt.com/reference/resource-configs/meta#designate-a-model-owner)
    tremendously improves efficiency during on-call.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Treat data model owners as “external parties”.** It’s not uncommon that software
    relies on an external party that is outside of engineers’ control such as an IoT
    service that relies on a network provider. Similarly, data engineers may need
    to work with model owners who are outside of their immediate team to address the
    model failures. When external knowledge is required, engineers should feel comfortable
    reaching out and proactively working with them while informing users of the progress.
    Do not put stress on on-call engineers by expecting them to solve issues on their
    own.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tools 1 — On-call rotation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get you started, here are a few tools to streamline the process and help
    engineers focus on what really matters.
  prefs: []
  type: TYPE_NORMAL
- en: '***Schedule***'
  prefs: []
  type: TYPE_NORMAL
- en: On-call rotation is a schedule to rotate a group of on-call engineers, ensuring
    that there is always an on-call person each week. This sets expectations for engineers
    regarding time, colleagues, and scope.
  prefs: []
  type: TYPE_NORMAL
- en: A free setup is to use spreadsheets to manage rotation schedules and a cron
    job to propagate the schedule into a calendar in near real-time. An example is
    Google Sheets + Apps Script + Google Calendar. Some teams prefer to use paid software
    like Opsgenie and PagerDuty. They save time and minimize manual overhead, but
    it comes with a cost.
  prefs: []
  type: TYPE_NORMAL
- en: '***Permission***'
  prefs: []
  type: TYPE_NORMAL
- en: On-call engineers occasionally need additional permissions to resolve production
    issues. One approach is to perform a permission escalation, temporarily granting
    the engineer additional privileges. Another option is to create a high-privileged
    user group and rotate group members. It’s essential to ensure that the rotation
    of the group members must be in sync with the on-call calendar rotation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tools 2 — Communication channels**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Effective communication is key during data downtime. The on-call process involves
    several layers of communication, and finding the right balance between being informed
    and not being overwhelmed by alerts is crucial.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ccf964d204bedce4a7d3c69a3f34a635.png)'
  prefs: []
  type: TYPE_IMG
- en: Created by author
  prefs: []
  type: TYPE_NORMAL
- en: '***Centralized data alerts channel (alerts -> team)***'
  prefs: []
  type: TYPE_NORMAL
- en: By having a dedicated channel where all alerts are sent, it becomes easier to
    monitor and manage alerts, reducing the risk of critical information being missed
    or overlooked. Slack is a popular choice because it can easily integrate with
    various data sources such as Opsgenie, GCP Cloud logging, Sentry, service desk,
    etc. It allows on-call to quickly respond to the issue and enhances collaboration
    with other engineers.
  prefs: []
  type: TYPE_NORMAL
- en: '***Escalation policies (team -> team)***'
  prefs: []
  type: TYPE_NORMAL
- en: Escalation policy is a set of procedures that outlines how an organization will
    respond to issues that require additional resources beyond the initial response.
    When the first tier of defense couldn't solve the issue within a certain time,
    the second tier should be informed timely.
  prefs: []
  type: TYPE_NORMAL
- en: Most incident management tools allow the team to define escalation policies,
    and the tool will automatically route notifications to the right expert at the
    right time. If the model ownership is properly defined, the tool can automatically
    alert the owner by reading the model metadata.
  prefs: []
  type: TYPE_NORMAL
- en: '***User communication (team -> users)***'
  prefs: []
  type: TYPE_NORMAL
- en: The last layer is user communication which needs to start as soon as the issue
    is identified. Keeping the channel centralized by setting up a tool like [status
    page](https://medium.com/towards-data-science/status-page-for-data-products-we-all-need-one-5a493092059a).
  prefs: []
  type: TYPE_NORMAL
- en: Tools 3 — On-call runbook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On-call runbook is a set of instructions that on-call can follow when responding
    to issues. A data pipeline runbook typically includes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Metadata around the data product: owner, model incrementality, priority, schedule,
    SLA, and SLO.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Escalation procedures (if not handled automatically).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Troubleshooting guides: how to solve common issues. For example, perform full-refresh,
    check source data, logs, data observability tools and etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Post-incident verification: how to verify if the issue is properly solved.
    For a cron job, the issue can only be verified in the next run which can be a
    few hours or days later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On-call runbook is a live documentation that must be regularly updated to reflect
    the changes. Again, I really like the idea of article [Writing data product pipelines
    with Airflow](https://medium.com/miro-engineering/writing-data-product-pipelines-with-airflow-1ace222f8f5a)
    where the author writes requirements as code in Airflow dags. This is a good example
    of linking documentation and code, ensuring that the documentation is always up-to-date
    and relevant.
  prefs: []
  type: TYPE_NORMAL
- en: Tools 4— On-call journal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On-call journal is a tool for documenting production issues. It helps engineers
    who look for tested solutions and managers who search for trends. A templated
    journal ensures engineers approached each issue with the same scientific rigor.
    Each record includes intensive metadata around the issues and the in-depth investigation
    and what they did to fix the issue. With the mindset of “focusing on the issue,
    not people”, engineers are comfortable with sharing more details.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1ef1747261dadb38262b794bf71673f4.png)'
  prefs: []
  type: TYPE_IMG
- en: On-call journal — Notion template (Created by author)
  prefs: []
  type: TYPE_NORMAL
- en: On-call can serve as a mirror that reflects the maturity of the team. It’s normal
    for a young team to experience some chaos during on-call at the beginning. However,
    these challenges can push team to improve their monitoring, automation, documentation
    and requirement gathering process. Ultimately, on-call can be a valuable learning
    experience for everyone on the team.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For people who are new to on-call, this article provides valuable insights and
    expectations for what to expect. For data leaders looking to establish an on-call
    culture, you have a bunch of toolboxes to work with. Begin by creating the workflow
    and gradually fill each step with the correct tool. In the end, on-call is more
    of a cultural challenge than a technical one. With the right mindset and tools
    in place, on-call can become a valuable opportunity for personal growth as well
    as company growth. Cheers!
  prefs: []
  type: TYPE_NORMAL
