["```py\nfrom dataclasses import dataclass\n\n@dataclass\nclass AuthorData:\n    \"\"\"Class for keeping track of an author in the system\"\"\"\n\n    first_name: str\n    last_name: str\n    n_books: int\n\ndef calculate_name(first_name: str, last_name: str):\n    return f\"{first_name} {last_name}\"\n\ndef is_prolific(n_books: int):\n    return n_books > 100\n\nauthor_data = AuthorData(\"Isaac\", \"Asimov\", 500)\ncalculate_name(author_data.first_name, author_data.last_name)\n# 'Isaac Asimov'\n```", "```py\n@dataclass\nclass UserData:\n    \"\"\"Class for keeping track of a user in the system\"\"\"\n\n    first_name: str\n    last_name: str\n    email: str\n\nuser_data = UserData(\"John\", \"Doe\", \"john.doe@gmail.com\")\ncalculate_name(user_data.first_name, user_data.last_name)\n# 'John Doe'\n```", "```py\nclass Address:\n    def __init__(self, street_num: int, street_name: str,\n                 city: str, state: str, zip_code: int):\n        self.street_num = street_num\n        self.street_name = street_name\n        self.city = city\n        self.state = state\n        self.zip_code = zip_code\n\nclass Author:\n    def __init__(self, first_name: str, last_name: str, n_books: int, \n                 address: Address):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.n_books = n_books\n        self.address = address\n\n    @property\n    def full_name(self):\n        return f\"{self.first_name} {self.last_name}\"\n\n    @property\n    def is_prolific(self):\n        return self.n_books > 100\n\naddress = Address(651, \"Essex Street\", \"Brooklyn\", \"NY\", 11208) \nauthor = Author(\"Issac\", \"Asimov\", 500, address)\nassert author.full_name == \"Issac Asimov\"\n```", "```py\nassert calculate_name(\"Issac\", \"Asimov\") == \"Issac Asimov\"\n```", "```py\nclass Author:\n    def __init__(self, first_name: str, last_name: str, n_books: int):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.n_books = n_books\n\n    @property\n    def full_name(self):\n        return f\"{self.first_name} {self.last_name}\"\n\n    @property\n    def is_prolific(self):\n        return self.n_books > 100\n\nauthor = Author(\"Issac\", \"Asimov\", 500, address)\nauthor.full_name\n# 'Issac Asimov'\n```", "```py\nfrom dataclasses import dataclass, asdict\n\n@dataclass\nclass AuthorData:\n    \"\"\"Class for keeping track of an author in the system\"\"\"\n\n    first_name: str\n    last_name: str\n    n_books: int\n\nauthor_data = AuthorData(\"Isaac\", \"Asimov\", 500)\nasdict(author_data)\n# {'first_name': 'Isaac', 'last_name': 'Asimov', 'n_books': 500}\n```", "```py\nauthor = {\"first_name\": \"Issac\", \"last_name\": \"Asimov\", \"n_books\": 500}\n\n# Access dict values\nauthor.get(\"first_name\")\n\n# Add new field to dict\nauthor[\"alive\"] = False\n\n# Update existing field\nauthor[\"n_books\"] = 703\n```", "```py\nnames = []\nnames.append({\"first_name\": \"Isaac\", \"last_name\": \"Asimov\"})\nnames.append({\"first_name\": \"Jane\", \"last_name\": \"Doe\", \n              \"suffix\": \"III\", \"age\": 70})\n```", "```py\nclass FullName:\n    def __init__(self, first_name, last_name, suffix):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.suffix = suffix\n```", "```py\nclass FullName:\n    def __init__(self, first_name, last_name, suffix):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.suffix = suffix\n\nFullName(fist_name=\"Jane\", last_name=\"Doe\", suffix=\"II\")\n```", "```py\nnames = []\nnames.append({\"first_name\": \"Jane\", \"last_name\": \"Doe\", \"suffix\": \"III\"})\nnames.append({\"first_name\": \"Isaac\", \"last_name\": \"Asimov\"})\nnames.append({\"fist_name\": \"John\", \"last_name\": \"Smith\"})\n\nprint(f\"{names[2].get('first_name')} {names[2].get('last_name')}\")\n# None Smith\n```", "```py\n@dataclass(frozen=True)\nclass AuthorData:\n    \"\"\"Class for keeping track of an author in the system\"\"\"\n\n    first_name: str\n    last_name: str\n    n_books: int\n```", "```py\ndef append_to_list(el, ls=[]):\n    ls.append(el)\n    return ls\n\nappend_to_list(1)\n# [1]\nappend_to_list(2)\n# [1, 2]\nappend_to_list(3)\n# [1, 2, 3]\n```", "```py\ndef append_to_list(el, ls=None):\n    if ls is None:\n        ls = []    \n    ls.append(el)\n    return ls\n\nappend_to_list(1)\n# [1]\nappend_to_list(2)\n# [2]\n```", "```py\nfrom datetime import date\n\ndummy = {\"age\": 30}\n\nif date.today().day % 2 == 0:\n    dummy[\"age\"] = 40\n```", "```py\nauthor_data = AuthorData(\"Issac\", \"Asimov\", 500)\n\nif date.today().day % 2 == 0:\n    author_data.n_books = 100\n# dataclasses.FrozenInstanceError: cannot assign to field \"n_books\"\n```", "```py\n# String is immutable\nx = \"abc\"\n\n# Note that the identity of `x` and `abc` is the same\nprint(id(x))\n# 140676188882480\nprint(id(\"abc\"))\n# 140676188882480\n\nprint(x == \"abc\")\n# True\nprint(x is \"abc\")\n# True\n\n# List is mutable\ny = [1, 2, 3]\n\n# Note that the identity of `y` and `[1, 2, 3]` is different\nprint(id(y))\n# 140676283875904\nprint(id([1, 2, 3])\n# 140676283875584\n\nprint(y == [1, 2, 3])\n# True\nprint(y is [1, 2, 3])\n# Fasle\n```", "```py\nlist1 = [1, 2, 3]\ntuple1 = (1, 2, 3)\n\nprint(id(list1))\n# 140218642718848\nprint(id(tuple1))\n# 140218642722496\n\nlist1 += [4, 5]\ntuple1 += (4, 5)\n\nprint(id(list1))\n# 140218642718848\nprint(id(tuple1))\n# 140218642772352\n```", "```py\nschema = {\n    \"required\": [\"first_name\", \"last_name\"],\n    \"properties\": {\n        \"first_name\": {\"type\": str},\n        \"last_name\": {\"type\": str},\n        \"books\": {\"type\": int},\n    }\n}\n\ndata = {\n    \"valid\": {\n        \"first_name\": \"Isaac\",\n        \"last_name\": \"Asimov\",\n        \"books\": 500\n    },\n    \"invalid1\": {\n        \"fist_name\": \"Isaac\",\n        \"last_name\": \"Asimov\",\n    },\n    \"invalid2\": {\n        \"first_name\": \"Isaac\",\n        \"last_name\": \"Asimov\",\n        \"books\": \"five hundred\"\n    }\n}\n```", "```py\ndef validate(data):\n    assert set(schema[\"required\"]).issubset(set(data.keys())), \\\n        f\"Data must have following fields: {schema['required']}\"\n\n    for k in data:\n        if k in schema[\"properties\"].keys():\n            assert type(data[k]) == schema[\"properties\"][k][\"type\"], \\\n                f\"Field {k} must be of type {str(schema['properties'][k]['type'])}\"\n```", "```py\nvalidate(data[\"valid\"]))\n# No error\n\nvalidate(data[\"invalid1\"])\n# AssertionError: Data must have following fields: ['first_name', 'last_name']\n\nvalidate(data[\"invalid2\"])\n# AssertionError: Field books must be of type <class 'int'>\n```", "```py\nclass Author:\n    def __init__(self, first_name: str, last_name: str, n_books: int = None):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.n_books = n_books\n\n    @property\n    def fullname(self):\n        return f\"{self.first_name} {self.last_name}\"\n\n    @property\n    def is_prolific(self):\n        if self.n_books:\n            return self.n_books > 100\n\nauthor = Author(\"Issac\", \"Asimov\")\n```", "```py\nschema = {\n    \"required\": [\"first_name\", \"last_name\"],\n    \"properties\": {\n        \"first_name\": {\n            \"type\": str,\n            \"max_length\": 100,\n        },\n        \"last_name\": {\n            \"type\": str,\n            \"max_length\": 100\n        },\n        \"books\": {\n            \"type\": int,\n            \"min\": 0,\n            \"max\": 10000,\n        },\n    }\n}\n```"]