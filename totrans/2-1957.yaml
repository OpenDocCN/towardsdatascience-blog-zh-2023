- en: What is Tabu Search?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是禁忌搜索？
- en: 原文：[https://towardsdatascience.com/tabu-search-simply-explained-ee2852339d78](https://towardsdatascience.com/tabu-search-simply-explained-ee2852339d78)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/tabu-search-simply-explained-ee2852339d78](https://towardsdatascience.com/tabu-search-simply-explained-ee2852339d78)
- en: An intuitive explanation of the Tabu Search optimization algorithm and how to
    apply it to the traveling salesman problem
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁忌搜索优化算法的直观解释及其在旅行商问题中的应用
- en: '[](https://medium.com/@egorhowell?source=post_page-----ee2852339d78--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----ee2852339d78--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ee2852339d78--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ee2852339d78--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----ee2852339d78--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@egorhowell?source=post_page-----ee2852339d78--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----ee2852339d78--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ee2852339d78--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ee2852339d78--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----ee2852339d78--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ee2852339d78--------------------------------)
    ·5 min read·Mar 13, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----ee2852339d78--------------------------------)
    ·5 分钟阅读·2023年3月13日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/6d13a379bededdf19a70772ac5ff5521.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6d13a379bededdf19a70772ac5ff5521.png)'
- en: Photo by [Clint Adair](https://unsplash.com/@clintadair?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Clint Adair](https://unsplash.com/@clintadair?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Background
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景
- en: In one of my [previous posts](https://medium.com/towards-data-science/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd),
    we discussed the [***meta-heuristic***](https://en.wikipedia.org/wiki/Metaheuristic)
    optimization algorithm [***Simulated Annealing***](https://medium.com/towards-data-science/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd)***.***
    This is a stochastic search algorithm that is used to try to find the [***global
    optimum***](https://en.wikipedia.org/wiki/Maximum_and_minimum)in [***combinatorial
    optimization***](https://en.wikipedia.org/wiki/Combinatorial_optimization) problems
    such as the famous [***traveling salesman problem (TSP)***](https://en.wikipedia.org/wiki/Travelling_salesman_problem)and[***knapsack
    problem***](https://en.wikipedia.org/wiki/Knapsack_problem)***.***
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的[上一篇文章](https://medium.com/towards-data-science/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd)中，我们讨论了[***元启发式***](https://en.wikipedia.org/wiki/Metaheuristic)优化算法[***模拟退火***](https://medium.com/towards-data-science/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd)***。***
    这是一种随机搜索算法，用于尝试在[***组合优化***](https://en.wikipedia.org/wiki/Combinatorial_optimization)问题中找到[***全局最优解***](https://en.wikipedia.org/wiki/Maximum_and_minimum)，如著名的[***旅行商问题
    (TSP)***](https://en.wikipedia.org/wiki/Travelling_salesman_problem)和[***背包问题***](https://en.wikipedia.org/wiki/Knapsack_problem)***。***
- en: There is another similar algorithm named the [***Tabu Search***](https://en.wikipedia.org/wiki/Tabu_search)***,***
    which can be considered as a generalization of the Simulated Annealing algorithm.
    In this article, I want to discuss and explain the Tabu Search, recap TSP, and
    then implement Tabu Search to solve the TSP in Python.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种类似的算法称为[***禁忌搜索***](https://en.wikipedia.org/wiki/Tabu_search)***，*** 它可以被视为模拟退火算法的推广。在这篇文章中，我想讨论和解释禁忌搜索，回顾旅行商问题（TSP），然后在
    Python 中实现禁忌搜索来解决 TSP。
- en: Tabu Search
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 禁忌搜索
- en: Overview
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: Tabu Search is a meta-heuristic optimization algorithm [conceived by Fred Glover
    in the late 1980s](https://www.sciencedirect.com/science/article/abs/pii/0305054886900481?via%3Dihub=).
    Similarly to Simulated Annealing, Tabu Search uses [***local search***](https://en.wikipedia.org/wiki/Local_search_%28optimization%29)
    but can accept a worse solution to avoid getting stuck in ***local minima.***
    Its other main key ingredient is that it prevents the algorithm from visiting
    previously observed solutions using *memory structures* to wider explore the search
    space. In other words, it has a ‘TABU’ list!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Tabu Search 是一种元启发式优化算法，[由 Fred Glover 在 1980 年代末期构思](https://www.sciencedirect.com/science/article/abs/pii/0305054886900481?via%3Dihub=)。类似于模拟退火，Tabu
    Search 使用 [***局部搜索***](https://en.wikipedia.org/wiki/Local_search_%28optimization%29)，但可以接受更差的解以避免陷入
    ***局部最小值***。它的另一个主要关键成分是它使用 *记忆结构* 防止算法访问之前观察过的解，从而更广泛地探索搜索空间。换句话说，它有一个‘TABU’列表！
- en: 'The Tabu Search algorithm can be used to solve a wide range of problems:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Tabu Search 算法可以用来解决各种各样的问题：
- en: '[***Resource allocation***](https://en.wikipedia.org/wiki/Resource_allocation)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[***资源分配***](https://en.wikipedia.org/wiki/Resource_allocation)'
- en: '[***Scheduling***](https://optimoroute.com/schedule-optimization/)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[***调度***](https://optimoroute.com/schedule-optimization/)'
- en: '[***Supply chain optimization***](https://en.wikipedia.org/wiki/Supply_chain_optimization)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[***供应链优化***](https://en.wikipedia.org/wiki/Supply_chain_optimization)'
- en: Therefore, it is worthwhile learning and understanding it as it can be used
    in multi-faceted situations.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，学习和理解它是值得的，因为它可以应用于多种情况。
- en: Memory Structures, Tenure & Tabu List
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记忆结构、任期和 Tabu List
- en: As mentioned above, Tabu Search keeps a track of previously visited solutions,
    this is known as the ***Tabu List*** and holds them in memory for a specific time,
    ***Tenure***, to prevent the recycling of solutions and better *explore* the search
    space.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，Tabu Search 记录之前访问过的解，这被称为 ***Tabu List***，并在特定时间内将它们保存在记忆中，***任期***，以防止解的回收并更好地
    *探索* 搜索空间。
- en: 'In general, there are two types of ***memory structures*** that Tabu Search
    uses:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，Tabu Search 使用两种类型的 ***记忆结构***：
- en: '***Short Term:*** This is normally a certain number of previously visited solutions
    that we should not go back to.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***短期：*** 这通常是一定数量的之前访问过的解，我们不应回到这些解上。'
- en: '***Long Term:*** This is to aid in instances where the search is getting stuck
    and help broaden the search.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***长期：*** 这是为了在搜索遇到困境时提供帮助，并帮助扩展搜索范围。'
- en: In reality, there is no requirement to have one or either, or even both. The
    main idea is that we keep track of what the algorithm is doing and help it explore
    a wider range of possible solutions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，没有要求一定要有一个或两个，甚至两个都不需要。主要的思想是我们跟踪算法正在做什么，并帮助其探索更广泛的可能解。
- en: Algorithm Outline & Aspiration Criteria
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 算法概述与愿望准则
- en: 'The general flow of the Tabu Search goes as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Tabu Search 的一般流程如下：
- en: Generate an initial valid solution.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成一个初始有效解。
- en: Get the set of possible neighborhood solutions using a local search from the
    current solution.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用从当前解出发的局部搜索获取可能的邻域解集。
- en: From these neighborhood solutions, get the best candidate that is not on the
    Tabu List.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从这些邻域解中，获取一个不在 Tabu List 上的最佳候选解。
- en: Compare this best candidate to the best solution found so far and assign as
    appropriate.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将这个最佳候选解与迄今为止找到的最佳解进行比较，并根据需要进行分配。
- en: Update the tabu list with the value of the best candidate.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用最佳候选解更新 tabu 列表。
- en: Repeat steps 2–5 using the best candidate to generate the new neighborhood until
    meeting some stopping conditions.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用最佳候选解重复步骤 2-5 以生成新的邻域，直到满足某些停止条件。
- en: An additional rule is that if we find a solution that is on the Tabu List but
    has a better objective function than the current best solution, we accept that
    solution anyway. This is known as the ***aspiration criterion***.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个规则是，如果我们发现一个在 Tabu List 上的解但其目标函数比当前最佳解更好，我们仍然接受这个解。这被称为 ***愿望准则***。
- en: That’s it! If you are still unsure about this process, keep reading as we will
    implement this in Python to make this theory more concrete.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！如果你对这个过程还有疑问，请继续阅读，我们将用 Python 实现这个理论以使其更为具体。
- en: Travelling Salesman Problem
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 旅行推销员问题
- en: Before we solve the traveling salesman problem (TSP) using Tabu Search, it’s
    worth quickly discussing what TSP is.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Tabu Search 解决旅行推销员问题（TSP）之前，值得快速讨论一下什么是 TSP。
- en: 'TSP is probably the most famous and easiest-to-understand combinatorial optimization
    problem. The problem is simple: ‘Given a set of cities, what is the shortest route
    that visits each city once and returns to the original city?’'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: TSP可能是最著名且最易于理解的组合优化问题。问题很简单：“给定一组城市，什么是访问每个城市一次并返回原始城市的最短路线？”
- en: The reason this problem is difficult to solve is that it is [***NP-hard***](https://en.wikipedia.org/wiki/NP-hardness)and
    the number of possible routes is subject to a [***combinatorial explosion***](https://en.wikipedia.org/wiki/Combinatorial_explosion)
    as we increase the number of cities we need to visit. As an example, [exploring
    every solution by brute force for 20 cities would take ~2000 years!](https://www.sciencedirect.com/topics/earth-and-planetary-sciences/traveling-salesman-problem)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题难以解决的原因是它是[***NP难***](https://en.wikipedia.org/wiki/NP-hardness)的，随着我们需要访问的城市数量增加，可能路线的数量会[***组合爆炸***](https://en.wikipedia.org/wiki/Combinatorial_explosion)。例如，[对20个城市进行穷举所有解需要约2000年！](https://www.sciencedirect.com/topics/earth-and-planetary-sciences/traveling-salesman-problem)
- en: The number of possible routes scales as **(n-1)!/2**
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可能路线的数量按**(n-1)!/2** 计算
- en: Due to the intractability of the TSP for a certain number of cities, we need
    to resort to heuristics, such as Tabu Search and Simulated Annealing, to provide
    sufficient solutions in a reasonable amount of time.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于TSP在特定数量城市下的难解性，我们需要 resort to heuristics such as Tabu Search and Simulated
    Annealing to provide sufficient solutions in a reasonable amount of time.
- en: Tabu Search for TSP in Python
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用Python实现TSP的禁忌搜索
- en: Algorithm Design
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 算法设计
- en: 'Let’s first list out some pseudo-code on how we will implement the Tabu Search
    for the TSP:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先列出一些伪代码，说明我们如何实现TSP的禁忌搜索：
- en: Generate an initial route and update the tabu list with this initial route
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成一个初始路线并用这个初始路线更新禁忌列表
- en: From this initial route, generate the neighborhood by swapping adjacent cities
    in the current route
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从这个初始路线中，通过交换当前路线中的相邻城市来生成邻域
- en: Get the best neighborhood route, the shortest, from this neighborhood that is
    not on the tabu list
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从这个邻域中获取最短的最佳邻域路线，该路线不在禁忌列表上
- en: Compare this best neighborhood route with the best overall found route and update
    as required
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将最佳邻域路线与找到的最佳总体路线进行比较，并根据需要更新
- en: Repeat steps 1–3 using the current best neighborhood route to produce a new
    neighborhood
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用当前最佳邻域路线重复步骤1–3，以产生新的邻域
- en: This is quite a rudimentary Tabu Search algorithm as it only contains short-term
    memory structures.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当基础的禁忌搜索算法，因为它仅包含短期记忆结构。
- en: Python Code
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python代码
- en: Below is a general class implementing the above algorithm. The class simply
    needs an `initial_solution` , which is a list of the cities in a certain order,
    and a dictionary `cities` that maps the cities to their coordinates.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是实现上述算法的通用类。该类只需要一个`initial_solution`，即城市的某个顺序列表，以及一个将城市映射到其坐标的字典`cities`。
- en: Github Gist by author.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的Github Gist。
- en: 'Let’s now run this class for some synthetically generated dataset:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们对一些合成生成的数据集运行这个类：
- en: '![](../Images/f34fbeaa968e2025b685dda27054fc95.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f34fbeaa968e2025b685dda27054fc95.png)'
- en: Plot generated by author in Python.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由作者在Python中生成的图。
- en: '![](../Images/404d30d8c01e955c659ea2238b9e6f1c.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/404d30d8c01e955c659ea2238b9e6f1c.png)'
- en: Plot generated by author in Python.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由作者在Python中生成的图。
- en: The best found solution looks like a pretty reasonable result and didn't take
    us thousands of years to compute!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳解决方案看起来是一个相当合理的结果，而且没有花费我们数千年的时间来计算！
- en: Summary and Further Thoughts
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结与进一步思考
- en: In this post, we have explained the meta-heuristic Tabu Search algorithm. This
    optimization algorithm uses local search techniques, but can still escape local
    minima by accepting worse solutions. It also makes use of the Tabu List which
    stops it from transitioning to previously visited solutions and greater explore
    the search space. This algorithm gave great results when applied to the traveling
    salesman problem.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们解释了元启发式禁忌搜索算法。这个优化算法使用局部搜索技术，但仍可以通过接受更差的解决方案来逃避局部最小值。它还利用了禁忌列表，阻止它过渡到之前访问过的解决方案，并更大程度地探索搜索空间。应用于旅行推销员问题时，这个算法取得了很好的结果。
- en: 'The full code can be found on my GitHub here:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 完整代码可以在我的GitHub上找到：
- en: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/tabu-search?source=post_page-----ee2852339d78--------------------------------)
    [## Medium-Articles/Optimisation/tabu-search at main · egorhowell/Medium-Articles'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Medium-Articles/Optimisation/tabu-search at main · egorhowell/Medium-Articles](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/tabu-search?source=post_page-----ee2852339d78--------------------------------)'
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 目前无法执行该操作。您已在另一个标签页或窗口中登录。您在另一个标签页或…
- en: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/tabu-search?source=post_page-----ee2852339d78--------------------------------)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/tabu-search?source=post_page-----ee2852339d78--------------------------------)'
- en: Another Thing!
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另一个事项！
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个免费的新闻通讯，[**Dishing the Data**](https://dishingthedata.substack.com/)，每周分享成为更好的数据科学家的技巧。没有“废话”或“点击诱饵”，只有来自实践数据科学家的纯粹可操作见解。
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----ee2852339d78--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Dishing The Data | Egor Howell | Substack](https://newsletter.egorhowell.com/?source=post_page-----ee2852339d78--------------------------------)'
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何成为更好的数据科学家。点击阅读《Dishing The Data》，由Egor Howell编写，是Substack出版物，包含…
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----ee2852339d78--------------------------------)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----ee2852339d78--------------------------------)'
- en: Connect With Me!
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接与我！
- en: '[**YouTube**](https://www.youtube.com/@egorhowell)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**YouTube**](https://www.youtube.com/@egorhowell)'
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**Twitter**](https://twitter.com/EgorHowell)'
- en: '[**GitHub**](https://github.com/egorhowell)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**GitHub**](https://github.com/egorhowell)'
- en: References and Further Reading
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献与进一步阅读
- en: '[*Algorithms for Optimization*](https://mitpress.mit.edu/9780262039420/algorithms-for-optimization/)*.*
    [Mykel J. Kochenderfer](https://mitpress.mit.edu/author/mykel-j-kochenderfer-18773)
    and [Tim A. Wheeler](https://mitpress.mit.edu/author/tim-a-wheeler-28144). ***2019***.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*优化算法*](https://mitpress.mit.edu/9780262039420/algorithms-for-optimization/)**。**
    [Mykel J. Kochenderfer](https://mitpress.mit.edu/author/mykel-j-kochenderfer-18773)
    和 [Tim A. Wheeler](https://mitpress.mit.edu/author/tim-a-wheeler-28144)。***2019***。'
