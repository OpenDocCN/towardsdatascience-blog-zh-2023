- en: What is Tabu Search?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/tabu-search-simply-explained-ee2852339d78](https://towardsdatascience.com/tabu-search-simply-explained-ee2852339d78)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An intuitive explanation of the Tabu Search optimization algorithm and how to
    apply it to the traveling salesman problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@egorhowell?source=post_page-----ee2852339d78--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----ee2852339d78--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ee2852339d78--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ee2852339d78--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----ee2852339d78--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ee2852339d78--------------------------------)
    ·5 min read·Mar 13, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6d13a379bededdf19a70772ac5ff5521.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Clint Adair](https://unsplash.com/@clintadair?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In one of my [previous posts](https://medium.com/towards-data-science/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd),
    we discussed the [***meta-heuristic***](https://en.wikipedia.org/wiki/Metaheuristic)
    optimization algorithm [***Simulated Annealing***](https://medium.com/towards-data-science/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd)***.***
    This is a stochastic search algorithm that is used to try to find the [***global
    optimum***](https://en.wikipedia.org/wiki/Maximum_and_minimum)in [***combinatorial
    optimization***](https://en.wikipedia.org/wiki/Combinatorial_optimization) problems
    such as the famous [***traveling salesman problem (TSP)***](https://en.wikipedia.org/wiki/Travelling_salesman_problem)and[***knapsack
    problem***](https://en.wikipedia.org/wiki/Knapsack_problem)***.***
  prefs: []
  type: TYPE_NORMAL
- en: There is another similar algorithm named the [***Tabu Search***](https://en.wikipedia.org/wiki/Tabu_search)***,***
    which can be considered as a generalization of the Simulated Annealing algorithm.
    In this article, I want to discuss and explain the Tabu Search, recap TSP, and
    then implement Tabu Search to solve the TSP in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Tabu Search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tabu Search is a meta-heuristic optimization algorithm [conceived by Fred Glover
    in the late 1980s](https://www.sciencedirect.com/science/article/abs/pii/0305054886900481?via%3Dihub=).
    Similarly to Simulated Annealing, Tabu Search uses [***local search***](https://en.wikipedia.org/wiki/Local_search_%28optimization%29)
    but can accept a worse solution to avoid getting stuck in ***local minima.***
    Its other main key ingredient is that it prevents the algorithm from visiting
    previously observed solutions using *memory structures* to wider explore the search
    space. In other words, it has a ‘TABU’ list!
  prefs: []
  type: TYPE_NORMAL
- en: 'The Tabu Search algorithm can be used to solve a wide range of problems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[***Resource allocation***](https://en.wikipedia.org/wiki/Resource_allocation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[***Scheduling***](https://optimoroute.com/schedule-optimization/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[***Supply chain optimization***](https://en.wikipedia.org/wiki/Supply_chain_optimization)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Therefore, it is worthwhile learning and understanding it as it can be used
    in multi-faceted situations.
  prefs: []
  type: TYPE_NORMAL
- en: Memory Structures, Tenure & Tabu List
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned above, Tabu Search keeps a track of previously visited solutions,
    this is known as the ***Tabu List*** and holds them in memory for a specific time,
    ***Tenure***, to prevent the recycling of solutions and better *explore* the search
    space.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, there are two types of ***memory structures*** that Tabu Search
    uses:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Short Term:*** This is normally a certain number of previously visited solutions
    that we should not go back to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Long Term:*** This is to aid in instances where the search is getting stuck
    and help broaden the search.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In reality, there is no requirement to have one or either, or even both. The
    main idea is that we keep track of what the algorithm is doing and help it explore
    a wider range of possible solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Algorithm Outline & Aspiration Criteria
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The general flow of the Tabu Search goes as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Generate an initial valid solution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get the set of possible neighborhood solutions using a local search from the
    current solution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From these neighborhood solutions, get the best candidate that is not on the
    Tabu List.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compare this best candidate to the best solution found so far and assign as
    appropriate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the tabu list with the value of the best candidate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeat steps 2–5 using the best candidate to generate the new neighborhood until
    meeting some stopping conditions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An additional rule is that if we find a solution that is on the Tabu List but
    has a better objective function than the current best solution, we accept that
    solution anyway. This is known as the ***aspiration criterion***.
  prefs: []
  type: TYPE_NORMAL
- en: That’s it! If you are still unsure about this process, keep reading as we will
    implement this in Python to make this theory more concrete.
  prefs: []
  type: TYPE_NORMAL
- en: Travelling Salesman Problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we solve the traveling salesman problem (TSP) using Tabu Search, it’s
    worth quickly discussing what TSP is.
  prefs: []
  type: TYPE_NORMAL
- en: 'TSP is probably the most famous and easiest-to-understand combinatorial optimization
    problem. The problem is simple: ‘Given a set of cities, what is the shortest route
    that visits each city once and returns to the original city?’'
  prefs: []
  type: TYPE_NORMAL
- en: The reason this problem is difficult to solve is that it is [***NP-hard***](https://en.wikipedia.org/wiki/NP-hardness)and
    the number of possible routes is subject to a [***combinatorial explosion***](https://en.wikipedia.org/wiki/Combinatorial_explosion)
    as we increase the number of cities we need to visit. As an example, [exploring
    every solution by brute force for 20 cities would take ~2000 years!](https://www.sciencedirect.com/topics/earth-and-planetary-sciences/traveling-salesman-problem)
  prefs: []
  type: TYPE_NORMAL
- en: The number of possible routes scales as **(n-1)!/2**
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Due to the intractability of the TSP for a certain number of cities, we need
    to resort to heuristics, such as Tabu Search and Simulated Annealing, to provide
    sufficient solutions in a reasonable amount of time.
  prefs: []
  type: TYPE_NORMAL
- en: Tabu Search for TSP in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Algorithm Design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s first list out some pseudo-code on how we will implement the Tabu Search
    for the TSP:'
  prefs: []
  type: TYPE_NORMAL
- en: Generate an initial route and update the tabu list with this initial route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From this initial route, generate the neighborhood by swapping adjacent cities
    in the current route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get the best neighborhood route, the shortest, from this neighborhood that is
    not on the tabu list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compare this best neighborhood route with the best overall found route and update
    as required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeat steps 1–3 using the current best neighborhood route to produce a new
    neighborhood
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is quite a rudimentary Tabu Search algorithm as it only contains short-term
    memory structures.
  prefs: []
  type: TYPE_NORMAL
- en: Python Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is a general class implementing the above algorithm. The class simply
    needs an `initial_solution` , which is a list of the cities in a certain order,
    and a dictionary `cities` that maps the cities to their coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: Github Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now run this class for some synthetically generated dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f34fbeaa968e2025b685dda27054fc95.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/404d30d8c01e955c659ea2238b9e6f1c.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: The best found solution looks like a pretty reasonable result and didn't take
    us thousands of years to compute!
  prefs: []
  type: TYPE_NORMAL
- en: Summary and Further Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this post, we have explained the meta-heuristic Tabu Search algorithm. This
    optimization algorithm uses local search techniques, but can still escape local
    minima by accepting worse solutions. It also makes use of the Tabu List which
    stops it from transitioning to previously visited solutions and greater explore
    the search space. This algorithm gave great results when applied to the traveling
    salesman problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full code can be found on my GitHub here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/tabu-search?source=post_page-----ee2852339d78--------------------------------)
    [## Medium-Articles/Optimisation/tabu-search at main · egorhowell/Medium-Articles'
  prefs: []
  type: TYPE_NORMAL
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/tabu-search?source=post_page-----ee2852339d78--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Another Thing!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----ee2852339d78--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  prefs: []
  type: TYPE_NORMAL
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----ee2852339d78--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Connect With Me!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**YouTube**](https://www.youtube.com/@egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**GitHub**](https://github.com/egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References and Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Algorithms for Optimization*](https://mitpress.mit.edu/9780262039420/algorithms-for-optimization/)*.*
    [Mykel J. Kochenderfer](https://mitpress.mit.edu/author/mykel-j-kochenderfer-18773)
    and [Tim A. Wheeler](https://mitpress.mit.edu/author/tim-a-wheeler-28144). ***2019***.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
