- en: Nested Dictionary Python — A Complete Guide to Python Nested Dictionaries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套字典 Python——Python 嵌套字典的完整指南
- en: 原文：[https://towardsdatascience.com/nested-dictionary-python-a-complete-guide-to-python-nested-dictionaries-756a7822cb4f](https://towardsdatascience.com/nested-dictionary-python-a-complete-guide-to-python-nested-dictionaries-756a7822cb4f)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/nested-dictionary-python-a-complete-guide-to-python-nested-dictionaries-756a7822cb4f](https://towardsdatascience.com/nested-dictionary-python-a-complete-guide-to-python-nested-dictionaries-756a7822cb4f)
- en: How to work with Nested Dictionary in Python? This article teaches you everything
    you need to know about Python Nested Dictionaries.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在 Python 中使用嵌套字典？本文将教你关于 Python 嵌套字典的一切知识。
- en: '[](https://medium.com/@radecicdario?source=post_page-----756a7822cb4f--------------------------------)[![Dario
    Radečić](../Images/41882a3b30bab9da43d66a59f1df366b.png)](https://medium.com/@radecicdario?source=post_page-----756a7822cb4f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----756a7822cb4f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----756a7822cb4f--------------------------------)
    [Dario Radečić](https://medium.com/@radecicdario?source=post_page-----756a7822cb4f--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@radecicdario?source=post_page-----756a7822cb4f--------------------------------)[![达里奥·拉德奇](../Images/41882a3b30bab9da43d66a59f1df366b.png)](https://medium.com/@radecicdario?source=post_page-----756a7822cb4f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----756a7822cb4f--------------------------------)[![数据科学的前沿](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----756a7822cb4f--------------------------------)
    [达里奥·拉德奇](https://medium.com/@radecicdario?source=post_page-----756a7822cb4f--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----756a7822cb4f--------------------------------)
    ·12 min read·Apr 18, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[数据科学的前沿](https://towardsdatascience.com/?source=post_page-----756a7822cb4f--------------------------------)
    ·12分钟阅读·2023年4月18日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/393f0346b4e4e357c149ccbef699a1e2.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/393f0346b4e4e357c149ccbef699a1e2.png)'
- en: Photo by [Kelly Sikkema](https://unsplash.com/@kellysikkema?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[凯利·西克马](https://unsplash.com/@kellysikkema?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: What is Nested Dictionary in Python?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Python 中的嵌套字典？
- en: One common data structure in Python is a nested dictionary, or a dictionary
    that can have other dictionaries as values for a given key. Beginners hate nested
    dictionaries because they require more time to work with and parse correctly,
    but it’s nothing you can’t manage with a bit of practice.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中一种常见的数据结构是嵌套字典，或者说字典的值可以是其他字典。初学者不喜欢嵌套字典，因为它们需要更多的时间来处理和正确解析，但只要稍加练习，你就能掌握它。
- en: '[*New to Python? Learn basic Dictionaries First.*](https://betterdatascience.com/python-dictionaries/)'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[*刚接触 Python？首先学习基础字典。*](https://betterdatascience.com/python-dictionaries/)'
- en: 'Today you’ll learn what is a nested dictionary, why to use nested dictionaries
    in Python, how to loop through a nested dictionary in Python, and much more. Regarding
    library imports, stick this to the top of your script or notebook:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 今天你将学习什么是嵌套字典，为什么在 Python 中使用嵌套字典，如何在 Python 中遍历嵌套字典，等等。关于库的导入，将其放在你的脚本或笔记本的顶部：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It will take care of formatting when printing nested dictionaries, so they’re
    a bit easier to read.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 它将在打印嵌套字典时处理格式，使其更易于阅读。
- en: How to Create a Nested Dictionary in Python
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在 Python 中创建嵌套字典
- en: There are many ways to create a nested dictionary, but you’ll primarily use
    two if you’re creating them from scratch in Python.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以创建嵌套字典，但如果你从头开始在 Python 中创建它们，你主要会使用两种方法。
- en: Using Regular Python Notation
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用常规 Python 符号
- en: The first way to create a nested Python dictionary is by leveraging regular
    Python notation. It means you don’t have to use any specific functions or libraries
    to create a dictionary. Simply assign it to a variable name, and format the entire
    thing as JSON.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 创建嵌套 Python 字典的第一种方法是利用常规 Python 符号。这意味着你不需要使用任何特定的函数或库来创建字典。只需将其分配给一个变量名，并将整个内容格式化为
    JSON。
- en: 'Here’s an example — the following code snippet creates a nested dictionary
    of employees, where employee email is set for the dictionary key, and additional
    information as a dictionary value. As you can see, the dictionary value is also
    a dictionary:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例——以下代码片段创建了一个员工的嵌套字典，其中员工的电子邮件被用作字典的键，附加信息作为字典值。正如你所看到的，字典值本身也是一个字典：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here’s what this nested dictionary looks like:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是这个嵌套字典的样子：
- en: '![](../Images/95933a2561bf5a249aff138a03198732.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/95933a2561bf5a249aff138a03198732.png)'
- en: '*Image 1 — Nested dictionary of employees (image by author)*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*图像 1 — 员工的嵌套字典（作者提供的图像）*'
- en: Overall, we have a dictionary with two keys (emails). Each of those keys has
    a dictionary for a value, and there’s even a third dictionary assigned to the
    `address` key.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，我们有一个包含两个键（电子邮件）的字典。每个键都有一个字典作为值，甚至还有一个第三个字典分配给`address`键。
- en: '**Dictionaries aren’t ordered**, so that’s why you’re seeing the data not reflecting
    the ordering specified in the code. Don’t worry about that.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**字典是无序的**，所以你看到的数据没有反映代码中指定的排序。对此不必担心。'
- en: Using the zip() Function
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 zip() 函数
- en: An alternative way to create a nested dictionary in Python is by using the `zip()`
    function. It's used to iterate over two or more iterators at the same time.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中创建嵌套字典的另一种方法是使用`zip()`函数。它用于同时迭代两个或多个迭代器。
- en: 'To demonstrate, we’ll declare two lists:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，我们将声明两个列表：
- en: '`employee_emails` - A list of emails that will represent the dictionary keys'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`employee_emails` - 一个电子邮件列表，将作为字典的键'
- en: '`employee_details` - A list of details for each employee, such as first name,
    last name, and address.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`employee_details` - 每个员工的详细信息列表，如名字、姓氏和地址。'
- en: 'If you declare your data in this way, you can pass both to `zip()` and wrap
    everything inside a call to `dict()`. This will assign appropriate key-value pairs.
    Here''s the code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以这种方式声明数据，你可以将它们传递给`zip()`并将所有内容包装在`dict()`调用中。这将分配适当的键值对。代码如下：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The resulting data looks the same as what we had before:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 结果数据看起来与之前的一样：
- en: '![](../Images/95933a2561bf5a249aff138a03198732.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/95933a2561bf5a249aff138a03198732.png)'
- en: '*Image 2 — Nested dictionary of employees (2) (image by author)*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*图像 2 — 员工的嵌套字典（2）（作者提供的图像）*'
- en: In practice, there’s no reason to use this approach to declare nested dictionaries.
    It’s messy and takes longer to write. Just stick to the first one and you’ll be
    good to go.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，没有理由使用这种方法来声明嵌套字典。这很混乱，编写起来也更费时间。只需坚持使用第一个方法，你就可以了。
- en: Up next, let’s see how to access elements of a nested dictionary in Python.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何在 Python 中访问嵌套字典的元素。
- en: How to Access Elements of a Nested Dictionary
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何访问嵌套字典的元素
- en: You can access elements of a nested dictionary just like you would for a normal
    one, with one exception — **you now need to add an additional set(s) of brackets.**
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像访问普通字典一样访问嵌套字典的元素，唯一的例外是**你现在需要添加额外的一组括号。**
- en: 'Here are a couple of examples of what you can do:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是你可以做的一些示例：
- en: Access a single element
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问单个元素
- en: Access a single element which is also a dictionary
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问一个也作为字典的单个元素
- en: Concatenate multiple nested dictionary values
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接多个嵌套字典值
- en: 'Or in code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在代码中：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here’s the output you should see:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你应该看到的输出：
- en: '![](../Images/f2e3cf740754b49292d99ec641bfa68d.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f2e3cf740754b49292d99ec641bfa68d.png)'
- en: '*Image 3 — Accessing elements of a nested Python dictionary (image by author)*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*图像 3 — 访问嵌套 Python 字典的元素（作者提供的图像）*'
- en: Overall, you need as many brackets as there are levels in a nested dictionary
    if you want to get to the bottom. For example, to get the city for `bdoe@email.com`,
    you would write `employees["bdoe@email.com"]["address"]["email"]`. Easy!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，如果你想到达嵌套字典的最底层，你需要与嵌套字典的层级数相同的括号。例如，要获取`bdoe@email.com`的城市，你需要写`employees["bdoe@email.com"]["address"]["email"]`。很简单！
- en: How to Change Values in a Nested Dictionary
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何更改嵌套字典中的值
- en: You now know how to access elements of a nested dictionary, but how can you
    change the values? It’s quite easy, and you can either change the values one by
    one or tackle multiple values at once.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在知道如何访问嵌套字典中的元素，但如何更改这些值呢？这非常简单，你可以逐个更改值，也可以一次处理多个值。
- en: Change a Single Value in a Nested Dictionary
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改嵌套字典中的单个值
- en: You can change a single value in a nested dictionary by accessing it and assigning
    a new value.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过访问嵌套字典并分配一个新值来更改单个值。
- en: 'The following example shows you how to change the complete `address` for one
    employee, one value at a time:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何一次更改一个员工的完整`address`：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The updated employee now looks like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的员工数据现在如下所示：
- en: '![](../Images/afc06b778d468ff68f3cead95ea802a9.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/afc06b778d468ff68f3cead95ea802a9.png)'
- en: '*Image 4 — Changing a single value in a nested dictionary (image by author)*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*图像 4 — 更改嵌套字典中的单个值（作者提供的图像）*'
- en: That’s great, but can you change the `address` in one line? Sure you can, let's
    explore how next.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Change Multiple Values in a Nested Dictionary
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `address` property is a dictionary itself, which means you can change it
    completely in one line of Python code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here’s what the updated employee looks like:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fef804a115244a36faefd97e886f06c6.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
- en: '*Image 5 — Changing multiple values in a nested dictionary (image by author)*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to access and change nested dictionary elements, so next we’ll
    go over adding new elements to a nested dictionary in Python.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: How to Add Elements to a Nested Dictionary
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding new elements to a nested dictionary in Python boils down to assigning
    a new key-value pair. It’s that simple!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'The code snippet below declares two variables to hold the key and value for
    the new nested dictionary item, and then adds this pair by using the `dictionary[key]
    = value` assignment operator:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Our updated nested dictionary now has 3 records:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7c9bb2e5b58dcca3329dd1b63cf6b8b9.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: '*Image 6 — Adding elements to a nested dictionary in Python (image by author)*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: That’s addition, so next let’s go over deletion.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: How to Delete Elements from a Nested Dictionary
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use Python’s `del` keyword followed by the name of the dictionary and
    a key you want to delete. For example, run `del d["name"]` to delete the key-value
    pair under the key of `name` in the dictionary `d`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, let’s use `del` to delete the newly added employee:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And we’re back to only two records now:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/73e47e5df7fbb977d7483b2086921f39.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: '*Image 7 — Deleting elements from a nested dictionary (image by author)*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Up next, let’s go over merging two or more dictionaries.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: How to Merge Two Nested Dictionaries
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dictionary merging just means you want to take two or more dictionaries and
    combine them into a single one. It helps if the structure of dictionaries is identical,
    but it’s not required, since this is Python.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate, let’s declare a new nested dictionary of employees:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here’s what it looks like:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/71bfa779e4287a25b9f1c5b138d4fc28.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: '*Image 8 — Two new employees (image by author)*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: The idea is to add this dictionary to the one we already have, and there are
    two ways to do so.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Merge Two Dictionaries with the update() Function
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `update()` function *updates* one dictionary with the contents of another.
    The updating happens inplace, which means you don't have to reassign the variable.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Our updated nested dictionary now has four records:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a49d325591beefe602a35539d36b5585.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: '*Image 9 — Merging nested dictionaries (image by author)*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: This function is easy to work with, but the downside is that **you can only
    add one dictionary at a time**. The next approach is a bit more flexible.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Merge Two Dictionaries with **kwargs
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `**kwargs` approach might look strange to newcomers, but it essentially
    just unpacks a dictionary. By doing so, you can unpack as many dictionaries as
    you want into a single new dictionary.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`**kwargs`方法对新手来说可能看起来很奇怪，但它本质上只是解包字典。通过这样做，你可以将尽可能多的字典解包到一个新的字典中。'
- en: 'Here’s an example:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个例子：
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The merged nested dictionary is identical to the one we had earlier:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 合并后的嵌套字典与我们之前的字典完全相同：
- en: '![](../Images/a49d325591beefe602a35539d36b5585.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a49d325591beefe602a35539d36b5585.png)'
- en: '*Image 10 — Merging nested dictionaries (2) (image by author)*'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10 — 合并嵌套字典（2）（作者提供的图片）*'
- en: Ultimately, it’s up to you to decide on the best merging approach. We recommend
    `**kwargs` since you can merge dozens of dictionaries in a single line of Python
    code.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，决定最佳合并方法还是取决于你。我们推荐使用`**kwargs`，因为你可以在一行 Python 代码中合并数十个字典。
- en: How to Iterate Through a Nested Dictionary
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何遍历嵌套字典
- en: There’s no one-size-fits-all solution when it comes to iterating through a nested
    dictionary in Python. A structure of a dictionary item will vary, which means
    you’ll have to customize the code every time.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，处理嵌套字典时没有一种适用于所有情况的解决方案。字典项的结构会有所不同，这意味着你每次都需要定制代码。
- en: To show you how, we’ll go over two examples, one simpler and the other a bit
    heavier on the code side.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，我们将介绍两个例子，一个较简单，另一个代码稍复杂一些。
- en: 'The first example iterates over all dictionary items and prints the key, and
    then also iterates through the corresponding value and prints it. Here’s the code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个例子遍历所有字典项并打印键，然后也遍历相应的值并打印它。以下是代码：
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is what you should see:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到如下结果：
- en: '![](../Images/5545def91c5fc0297470fffbe7a90064.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5545def91c5fc0297470fffbe7a90064.png)'
- en: '*Image 11 — Iterating through a nested dictionary (image by author)*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*图11 — 遍历嵌套字典（作者提供的图片）*'
- en: This approach might work if you don’t have an additional level of nesting, similar
    to what we have with `address`. It's much more challenging to *address* this,
    but let's give it a try next.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有额外的嵌套层级，类似于我们所拥有的`address`，这种方法可能有效。*处理*这个问题会更加具有挑战性，但接下来我们可以尝试一下。
- en: More Advanced Iteration Example
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更高级的迭代示例
- en: The idea now is to step into the `address` dictionary and print all of the elements
    it contains.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的想法是进入`address`字典，并打印它包含的所有元素。
- en: 'To make the code a bit more robust, we’ll check if the item is a dictionary,
    and if so, iterate through its items. If the tem is not a dictionary, we’ll simply
    print it:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让代码更健壮一点，我们将检查项目是否为字典，如果是，则遍历其项。如果项目不是字典，我们将简单地打印它：
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here’s what you should see on the screen:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在屏幕上看到如下内容：
- en: '![](../Images/3815d18df9566e2537edd2f7a72e1b15.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3815d18df9566e2537edd2f7a72e1b15.png)'
- en: '*Image 12 — Iterating through a nested dictionary (2) (image by author)*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12 — 遍历嵌套字典（2）（作者提供的图片）*'
- en: Overall, we’ve managed to parse our nested dictionary structure, but again,
    **this won’t work on all nested dictionaries**. You’ll have to customize the code
    snippet to accommodate your use case, which can be tricky and time-consuming.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，我们已经成功解析了我们的嵌套字典结构，但再次强调，**这并不适用于所有嵌套字典**。你必须定制代码片段以适应你的用例，这可能会很棘手且耗时。
- en: How to Flatten a Nested Dictionary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何扁平化嵌套字典
- en: Flattening a nested dictionary means you want to get a dictionary that doesn’t
    contain any dictionaries or lists inside.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 扁平化嵌套字典意味着你希望获得一个不包含任何字典或列表的字典。
- en: This is a very common data preprocessing technique when parsing nested JSON
    documents to a Pandas DataFrame. If that’s what you’re dealing with, you know
    the structure of the input data will be quite different.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在将嵌套 JSON 文档解析为 Pandas DataFrame 时非常常见的数据预处理技术。如果你正在处理这样的数据，你会知道输入数据的结构会有很大不同。
- en: 'Most of the time, you’ll have a **list of dictionaries**. We’ll declare one
    such list below, and add the `email` property inside each employee object instead
    of using it as a dictionary key:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，你会有一个**字典列表**。我们将在下方声明这样一个列表，并在每个员工对象内部添加`email`属性，而不是将其用作字典键：
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Once you have the data in this format, it’s time to flatten it. The following
    recursive function flattens one record, or one dictionary element inside a list.
    For any nested dictionary, it finds it will flatten it in a way that the key renames
    to the full *path*.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你拥有这样的数据格式，就该进行扁平化处理了。以下递归函数将一个记录或列表中的一个字典元素进行扁平化。对于任何嵌套字典，它会将其扁平化，使键重命名为完整的*路径*。
- en: The `flatten_dict()` function has to be applied on each record in a list of
    dictionaries, meaning you can use either a Python loop or a list comprehension.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`flatten_dict()`函数必须应用于字典列表中的每一条记录，这意味着你可以使用 Python 循环或列表推导式。'
- en: 'Here’s an example:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例：
- en: '[PRE14]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We now have a completely flat structure:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了一个完全扁平的结构：
- en: '![](../Images/81b60c20bea581aa6b5682df3a14ae60.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/81b60c20bea581aa6b5682df3a14ae60.png)'
- en: '*Image 13 — Flattening a nested dictionary (image by author)*'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13 — 展开嵌套字典 (作者提供的图片)*'
- en: Note how `address` was appended before its inner key-value pairs, so we still
    get the idea of where it belonged originally.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意如何在其内部键值对之前添加了`address`，这样我们仍然能够理解它最初所属的位置。
- en: Now when you have a flat list of dictionaries, you can convert it into a Pandas
    DataFrame.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你有了一个扁平化的字典列表时，你可以将其转换为 Pandas DataFrame。
- en: Nested Dictionary Python to Pandas DataFrame
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套字典 Python 转 Pandas DataFrame
- en: If you want to convert a nested dictionary to a Pandas DataFrame, you’ll have
    to flatten it first. Otherwise, you’ll get weird indexing and possibly a dictionary
    for the value of a single cell.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将嵌套字典转换为 Pandas DataFrame，你必须先将其扁平化。否则，你会得到奇怪的索引，并且可能会得到单个单元格的字典作为值。
- en: 'Let’s demonstrate a bad practice first, so you can get the idea of why flatten
    the data. Below we have an identical dictionary of employees to the one we used
    throughout the article. We’re then using it in a call to `pd.DataFrame()`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先展示一个不良的做法，以便你能理解为什么要扁平化数据。下面是与我们在文章中使用的员工字典相同的字典。然后我们在调用`pd.DataFrame()`时使用它：
- en: '[PRE15]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here’s what the resulting DataFrame looks like:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是结果 DataFrame 的样子：
- en: '![](../Images/8db87f6991726a0cf0720db64bf06b92.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8db87f6991726a0cf0720db64bf06b92.png)'
- en: '*Image 14 — Nested dictionary to a Pandas DataFrame (image by author)*'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 14 — 嵌套字典转 Pandas DataFrame (作者提供的图片)*'
- en: Terrible and not usable. **You need to pass a list of flattened dictionaries
    to** `**pd.DataFrame()**` to get back the data in the appropriate format.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 糟糕且不可用。 **你需要将一个扁平化的字典列表传递给** `**pd.DataFrame()**` 以将数据恢复为适当的格式。
- en: 'You already know how to flatten a nested dictionary, so this should feel like
    a walk in the park:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经知道如何展开嵌套字典了，所以这应该感觉像是轻松的散步：
- en: '[PRE16]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The DataFrame is now much easier to understand and analyze:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，DataFrame 更容易理解和分析：
- en: '![](../Images/f0771a651af442fdb0db70862c38e8cd.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f0771a651af442fdb0db70862c38e8cd.png)'
- en: '*Image 15 — Nested dictionary to a Pandas DataFrame (2) (image by author)*'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 15 — 嵌套字典转 Pandas DataFrame (2) (作者提供的图片)*'
- en: And finally, let’s cover nested dictionary to JSON conversion.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们讲讲嵌套字典到 JSON 转换。
- en: Nested Dictionary Python to JSON File
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套字典 Python 转 JSON 文件
- en: JSON and Python dictionaries go hand in hand, meaning you can easily go from
    a JSON file to a Python dictionary and vice-versa.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 和 Python 字典是相辅相成的，这意味着你可以轻松地在 JSON 文件和 Python 字典之间转换。
- en: We’ll show you how to go from a nested Python dictionary to a JSON file. You’ll
    need to import the `json` module and pass in your dictionary to `json.dumps()`.
    The optional `indent` parameter controls the indentation of nested structures
    inside a dictionary.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将展示如何将嵌套的 Python 字典转换为 JSON 文件。你需要导入`json`模块，并将字典传递给`json.dumps()`。可选的`indent`参数控制字典内部嵌套结构的缩进。
- en: 'Here’s the code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码：
- en: '[PRE17]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And this is what your JSON object should look like:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你的 JSON 对象应该呈现的样子：
- en: '![](../Images/be733537cec9514245f919c4895c70dd.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/be733537cec9514245f919c4895c70dd.png)'
- en: '*Image 16 — Nested dictionary to a JSON object (image by author)*'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16 — 嵌套字典转 JSON 对象 (作者提供的图片)*'
- en: 'You can now use Python’s context manager syntax to write the JSON object to
    a file. This code snippet writes it to a file named `employees.json`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以使用 Python 的上下文管理器语法将 JSON 对象写入文件。以下代码片段将其写入名为`employees.json`的文件：
- en: '[PRE18]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can open the JSON file in any text editor or even in JupyterLab. You’ll
    see something similar to this:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在任何文本编辑器或 JupyterLab 中打开 JSON 文件。你会看到类似下面的内容：
- en: '![](../Images/1ba3e621494d22a6782667df4c47b84d.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1ba3e621494d22a6782667df4c47b84d.png)'
- en: '*Image 17 — Nested dictionary to a JSON file (image by author)*'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 17 — 嵌套字典转 JSON 文件 (作者提供的图片)*'
- en: And that’s how you can work with nested dictionaries in Python. Let’s make a
    short recap next.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你可以在 Python 中处理嵌套字典的方法。接下来，让我们简短回顾一下。
- en: Summing up Nested Dictionary Python
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结嵌套字典 Python
- en: There’s a lot that goes into working with nested dictionaries in Python. You
    can access individual values, change them, add new rows, delete old ones, merge
    multiple dictionaries, iterate over them, and even convert the entire thing to
    a Pandas DataFrame or JSON file.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中处理嵌套字典涉及很多内容。你可以访问单个值、修改它们、添加新行、删除旧行、合并多个字典、遍历它们，甚至将整个内容转换为Pandas DataFrame或JSON文件。
- en: Unfortunately, there’s no one-size-fits-all solution when it comes to nested
    dictionaries. The structure of one will vary from project to project, which means
    you’ll have to customize the code to match your scenario. That’s especially true
    when it comes to iterating through nested dictionaries.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，处理嵌套字典并没有一刀切的解决方案。每个项目的结构会有所不同，这意味着你需要定制代码以适应你的场景。特别是在遍历嵌套字典时，这一点尤其重要。
- en: This article should give you a good starting point and will cover 95% of scenarios,
    and you can always explore further on your own.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 本文应该为你提供一个良好的起点，并涵盖95%的场景，你可以随时自行深入探讨。
- en: '*What’s your favorite thing about nested dictionaries? Are they giving you
    a lot of headaches in daily data science tasks?* Let me know in the comment section
    below.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '*你对嵌套字典最喜欢的是什么？它们在日常数据科学任务中是否让你头疼？* 请在评论区告诉我。'
- en: '*Loved the article? Become a* [*Medium member*](https://medium.com/@radecicdario/membership)
    *to continue learning without limits. I’ll receive a portion of your membership
    fee if you use the following link, with no extra cost to you.*'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '*喜欢这篇文章？成为* [*Medium会员*](https://medium.com/@radecicdario/membership) *，继续无限制地学习。如果你使用以下链接，我将获得你会员费用的一部分，而不会增加你的额外费用。*'
- en: '[](https://medium.com/@radecicdario/membership?source=post_page-----756a7822cb4f--------------------------------)
    [## Join Medium with my referral link - Dario Radečić'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@radecicdario/membership?source=post_page-----756a7822cb4f--------------------------------)
    [## 使用我的推荐链接加入Medium - Dario Radečić'
- en: Read every story from Dario Radečić (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读Dario Radečić的每一个故事（以及Medium上成千上万其他作家的作品）。你的会员费用将直接支持…
- en: medium.com](https://medium.com/@radecicdario/membership?source=post_page-----756a7822cb4f--------------------------------)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@radecicdario/membership?source=post_page-----756a7822cb4f--------------------------------)
- en: '*Originally published at* [*https://betterdatascience.com*](https://betterdatascience.com/nested-dictionary-python/)
    *on April 18, 2023.*'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '*最初发表于* [*https://betterdatascience.com*](https://betterdatascience.com/nested-dictionary-python/)
    *于2023年4月18日。*'
