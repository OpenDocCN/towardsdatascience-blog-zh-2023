- en: Storytelling with Charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/storytelling-with-charts-23dd41096721](https://towardsdatascience.com/storytelling-with-charts-23dd41096721)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Part 1: Displaying a single quantitative variable'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@dar.wtz?source=post_page-----23dd41096721--------------------------------)[![Darío
    Weitz](../Images/28efa942b4c5bd2763d58c44584cf583.png)](https://medium.com/@dar.wtz?source=post_page-----23dd41096721--------------------------------)[](https://towardsdatascience.com/?source=post_page-----23dd41096721--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----23dd41096721--------------------------------)
    [Darío Weitz](https://medium.com/@dar.wtz?source=post_page-----23dd41096721--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----23dd41096721--------------------------------)
    ·8 min read·Feb 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/87afa223cff95ec78d84158a9c6912e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Derek Story](https://unsplash.com/@derekstory?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Every dataset holds a lot of detail. Besides, many datasets are just filled
    with a list of numbers that are not classified in any way.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: · The average rainfall in the central region of Argentina during January in
    the last 20 years.
  prefs: []
  type: TYPE_NORMAL
- en: · The results of an IQ test for Information System Engineering students.
  prefs: []
  type: TYPE_NORMAL
- en: · The population of the 24 provinces in Argentina according to the 2022 census.
  prefs: []
  type: TYPE_NORMAL
- en: · The number of car-crash fatalities in Argentina according to the day of the
    week and the hour of the day.
  prefs: []
  type: TYPE_NORMAL
- en: The above are typical examples of datasets with a relatively small number of
    **a single quantitative variable.** Remember that quantitative data represent
    amounts. Also, remember that there are continuous and discrete quantitative variables
    depending on whether the values arise from measuring or counting something.
  prefs: []
  type: TYPE_NORMAL
- en: Why should a data analyst be interested in such a list of numbers? First, although
    many scientific, business or management questions involve comparison, relations,
    composition, or trends between numerical variables, **visualization of every variable
    in the dataset** as a basic exploratory data analysis is important to understand
    the pattern of variation of such variables. Second, as indicated by the above
    examples, **exploratory charts** could help to understand the process that generated
    the numbers stored in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'As [I stated previously](https://medium.com/analytics-vidhya/scatter-plots-why-how-3de6e1e32645):
    “Three important features of the data set can be found in an exploratory plot:
    1) **Outliers**, a piece of data that is very different from all the others in
    the dataset and does not seem to fit the same pattern. These anomalous values
    might ​​represent valuable information to analyze. First of all, it must be verified
    that the existence of these anomalous values ​​is not due to errors while measuring
    the data; 2) **Gaps**, an interval that contains no data. The visualization of
    gaps between data justifies an in-depth analysis that explains their presence;
    3) **Clusters**, isolated groups of data points which can also merit a particular
    analysis of the reason for their presence in the graph. Of course, gaps and clusters
    might represent errors in the data collection methodology.”'
  prefs: []
  type: TYPE_NORMAL
- en: We will show in this article three simple (**Python-based**) exploratory charts
    that allow visualizing the distribution of a single quantitative variable.
  prefs: []
  type: TYPE_NORMAL
- en: '**Dot Plots**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A dot plot, AKA dot chart, is one of the simplest visualization diagrams consisting
    of data values plotted as dots (small circles) in a bi-dimensional x-axis and
    y-axis scheme. One axis shows the range of categories or values along which the
    data values are grouped whilst the other axis shows the number of data points
    in each different group. Each small circle represents a value. Dots may be vertically
    or horizontally stacked according to the analyst’s preferences.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7efc99e55ef5b6e5e92cbdb235bd6279.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig.1: a dot plot made by the author with Matplotlib.'
  prefs: []
  type: TYPE_NORMAL
- en: They are suitable for small to moderate-sized datasets (10–45 values) and very
    useful for highlighting outliers, gaps, clusters, and skewness.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of dot plots: 1) Wilkinson Dot Plots; 2) Cleveland Dot
    Plots. The former represents the distribution of continuous data values while
    the latter is an alternative for bar charts. This article deals specifically with
    Wilkinson Dot Plots.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Matplotlib does not have a specific method for drawing dot plots. Plotly uses
    *px.scatter* to draw Cleveland Dot Plots. I found a very interesting Python code
    due to **Patrick FitzGerald (**1) in *stackoverflow* (2):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Figure 2 was created with the code. It is easy to notice that there is a gap
    between 21 and 24, which is surrounded by the highest concentration of values
    in the sample. A wise data analyst should look for the reasons for such a particular
    distribution of values.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e0265f4407125ea522f221d72cbfe9a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig.2: a dot plot made by the author with Matplotlib.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stem and Leaf Plots**'
  prefs: []
  type: TYPE_NORMAL
- en: This type of **tabular plot** was very popular around 1900 and was rediscovered
    by **John W. Tukey** during his lectures at Princeton University (3). The plot
    receives its name because each value is split between a leaf and a stem.
  prefs: []
  type: TYPE_NORMAL
- en: How do we manually draw a stem and leaf plot? We first determine the range of
    the data. Then, according to the size of the dataset, we divide the range into
    intervals of fixed length. Next, we draw a vertical line placing the first digits
    of the number (thousands, hundreds, or tens) **except the final digit** in increasing
    order on the left-hand side of the vertical line. That’s the stem. We pass through
    the dataset again, writing down the next significant (final) digit on the right-hand
    side of the vertical line. That’s the leaf. At the far left, from bottom to top,
    we accumulate the number of values we are plotting.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, given the following list: [16, 25, 47, 56, 23, 45, 19, 55, 44,
    27], the corresponding stem and leaf plot is (interval length is equal to 10):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6af5312c159354d46f2960c4aa446cba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig.3: a stem and leaf plot made by the author with Stemgraphic.'
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom of the plot, we indicated the values 16 and 19, then 23, and one
    line above we placed 25 and 27\. Then 44, one line above 45 and 47, and finally,
    in two separate leaves, 55 and 56.
  prefs: []
  type: TYPE_NORMAL
- en: Neither Matplotlib nor Plotly have stem and leaf plots. There is a Python module
    called **Stemgraphic** specifically designed for this purpose. It supports any
    size of data and can generate ready-for-print plots (4).
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you must install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*pip3 install -U stemgraphic*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Stemgraphic* requires docopt, Matplotlib, and pandas. Optionally, having Scipy
    installed will give you secondary plots (5).'
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we have IQ data from two courses of information science engineering
    students. Let’s use *stemgraphic* to create a stem and leaf plot to analyze the
    distribution of these data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5eff02152b6783253aab77d7982898db.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig.4: a stem and leaf plot made by the author with Stemgraphic.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8dcf59cd838ffb617e08f3bd5514c433.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig.5: made by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: We can clearly observe two outliers, one at the lower end (75) and the other
    at the top of the ranking (146). The plot also suggests that the median is between
    104 and 105\. The data are moderately skewed. The leftmost column contains cumulative
    counts. The main advantage of the stem and leaf plot is that **we can easily reconstruct
    the source data from the observation of the diagram.**
  prefs: []
  type: TYPE_NORMAL
- en: '**Histograms**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AKA column histograms, they are a graphical representation of the distribution
    of a dataset. They are bi-dimensional graphs with two axes: the horizontal axis
    is divided into **bins** (intervals or ranges of numerical values); the vertical
    axis is a frequency axis whose values are derived from counts for each bin. The
    frequency of each bin is displayed by the area of vertical rectangular bars.'
  prefs: []
  type: TYPE_NORMAL
- en: Histograms provide a visual summary of the distribution of a continuous quantitative
    variable. You can infer the location, spread, symmetry, and skewness of the dataset.
    You may also note the presence or absence of clusters, gaps, and outliers.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find more theoretical concepts and several examples in my previous
    Medium articles on histograms: 1) [Histograms, Why & How. Storytelling, Tips,
    and Extensions](https://medium.com/@dar.wtz/histograms-why-how-431a5cfbfcd5);
    2) [Histograms with Plotly Express, Themes and Templates.](/histograms-with-plotly-express-e9e134ae37ad)'
  prefs: []
  type: TYPE_NORMAL
- en: I used Matplotlib for drawing histograms in several articles related to Monte
    Carlo Simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in [Monte Carlo Simulation. Part 2](https://medium.com/p/8db846f3d8ed#09a4-6a25f853d2de),
    I used the following code for displaying Fig. 6:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c6becef1ba81e5c3f4ceb5804fd463f6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig.6: a histogram made by the author with Matplotlib.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Monte Carlo Simulation. Part 3](/monte-carlo-simulation-7c198d01c531),
    I used the following code for displaying the histogram shown in Fig. 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/963831c39d7e29f35e4ab8e24e75e098.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig.7: a histogram made by the author with Matplotlib.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Conclusions**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: John Tukey once stated that exploratory data analysis is like numerical detective
    work. He was trying to explain that founding statistical structures in the data
    are previous to define a model or theory that could explain the process that generated
    the numbers stored in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Every data analyst must have certain visualization tools for analyzing and displaying
    data. Particularly, for single quantitative variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, I described three simple Python-based exploratory charts that
    allow visualizing the distribution of a single quantitative variable: dot plots;
    stem and leaf plots; histograms.'
  prefs: []
  type: TYPE_NORMAL
- en: The main criterion for selecting between the three plots is the size of the
    dataset. It is recommended that a dot plot should not show more than 50 values.
    It is also recommended that a stem plot should not show more than 300 numerical
    values. On the contrary, histograms improve with the increase in the number of
    values they represent. In the previously indicated articles (related to Monte
    Carlo Simulations) the histograms summarized the information obtained from 5000
    replicates (5000 numerical values) of the simulation runs.
  prefs: []
  type: TYPE_NORMAL
- en: '**References**'
  prefs: []
  type: TYPE_NORMAL
- en: (1) [https://stackoverflow.com/users/14148248/patrick-fitzgerald](https://stackoverflow.com/users/14148248/patrick-fitzgerald)
  prefs: []
  type: TYPE_NORMAL
- en: (2) [https://stackoverflow.com/questions/49703938/how-to-create-a-dot-plot-in-matplotlib-not-a-scatter-plot](https://stackoverflow.com/questions/49703938/how-to-create-a-dot-plot-in-matplotlib-not-a-scatter-plot)
  prefs: []
  type: TYPE_NORMAL
- en: (3) Tukey, John. “Exploratory Data Analysis”, Addison-Wesley, 1977
  prefs: []
  type: TYPE_NORMAL
- en: (4) [http://stemgraphic.org/doc/modules.html](http://stemgraphic.org/doc/modules.html)
  prefs: []
  type: TYPE_NORMAL
- en: (5) [https://pypi.org/project/stemgraphic/](https://pypi.org/project/stemgraphic/)
  prefs: []
  type: TYPE_NORMAL
