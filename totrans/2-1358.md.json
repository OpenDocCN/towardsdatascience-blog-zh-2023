["```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nNUM_SAMPLES = 10000\nRATE = 1.5\n\ndef exp_distr(x: np.ndarray, rate: float) -> np.ndarray:\n    return rate * np.exp(-x * rate)\n\ndef exp_distr_sampled(num_samples: int, rate: float) -> np.ndarray:\n    x = np.random.uniform(0, 1, num_samples)\n    return -1 / rate * np.log(1 - x)\n\nx = np.linspace(0, 5, NUM_SAMPLES)\ny_true = exp_distr(x, RATE)\ny_sampled = exp_distr_sampled(NUM_SAMPLES, RATE)\n\nplt.plot(x, y_true, \"r-\")\nplt.hist(y_sampled, bins=30, density=True)\nplt.show()\n```", "```py\nfrom typing import Tuple\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nNUM_SAMPLES = 10000\nMEAN = 0\nSTANDARD_DEVIATION = 1\nMIN_X = -4\nMAX_X = 4\n\ndef uniform_distr(low: float, high: float) -> float:\n    return 1 / (high - low)\n\ndef normal_dist(\n    x: np.ndarray, mean: float, standard_deviation: float\n) -> np.ndarray:\n    return (\n        1\n        / (standard_deviation * np.sqrt(2 * np.pi))\n        * np.exp(-0.5 * ((x - mean) / standard_deviation) ** 2)\n    )\n\nx = np.linspace(MIN_X, MAX_X, NUM_SAMPLES)\ny_true = normal_dist(x, MEAN, STANDARD_DEVIATION)\n\ndef rejection_sampling(\n    num_samples: int, min_x: float, max_x: float\n) -> Tuple[np.ndarray, float]:\n    x = np.random.uniform(min_x, max_x, num_samples)\n    # uniform_distr(-4, 4) = 0.125 -> we need to scale this to ~0.5, i.e.\n    # select k = 4.\n    k = 4\n    u = np.random.uniform(np.zeros_like(x), uniform_distr(min_x, max_x) * k)\n    (idx,) = np.where(u < normal_dist(x, MEAN, STANDARD_DEVIATION))\n    return x[idx], len(idx) / num_samples\n\ny_sampled, acceptance_prob = rejection_sampling(NUM_SAMPLES * 10, MIN_X, MAX_X)\nprint(f\"Acceptance probability: {acceptance_prob}\")\nplt.plot(x, y_true, \"r-\")\nplt.hist(y_sampled, bins=30, density=True)\nplt.show()\n```", "```py\nimport numpy as np\n\nNUM_SAMPLES = 10000\nMEAN_P = 3\nMEAN_Q = 2\n\ndef normal_dist(\n    x: np.ndarray, mean: float, standard_deviation: float\n) -> np.ndarray:\n    return (\n        1\n        / (standard_deviation * np.sqrt(2 * np.pi))\n        * np.exp(-0.5 * ((x - mean) / standard_deviation) ** 2)\n    )\n\nq_sampled = np.random.normal(loc=MEAN_Q, size=NUM_SAMPLES)\np_sampled = (\n    q_sampled\n    * normal_dist(q_sampled, MEAN_P, 1)\n    / normal_dist(q_sampled, MEAN_Q, 1)\n)\nprint(\n    f\"Resulting expecation when sampling from q {np.mean(p_sampled)} vs true expecation {MEAN_P}\"\n)\n```"]