["```py\nimport streamlit as st\nimport DButils\n\nst.set_page_config(layout=\"wide\")\n\nif 'survey' not in st.session_state:\n    st.session_state['survey'] = DButils.get_survey()\n\nst.title(\"Questionaire editor\")\nst.write(\"\"\"Type in the question text in the field below and then add\n            a list of possible responses (or you can leave, or edit, \n            the default responses).\"\"\"\n)\n\n# Set a default response\ndefault_response = (\n    \"Strongly agree,Agree,Neither agree not disagree,Disagree,Strongly disagree\"\n)\n\nst.header(\"Question\")\nq_text = st.text_input(\"Question text\")\nq_responses = st.text_input(\n    \"A comma separated list of responses\", value=default_response\n)\n\nsubmitted = st.button(\"Add question to survey\")\n\nif submitted:\n    st.session_state['survey'].append(\n        {\n            \"text\": q_text,\n            \"responses\": q_responses,\n        }\n    )\n\nst.write(\"You can also edit the questions and response directly in the table.\")\n\nedited_df = st.data_editor(st.session_state['survey'], num_rows=\"dynamic\")\n\nsave = st.button(\"Save changes\")\nif save:\n    DButils.save_survey(edited_df)\n    st.success(f\"Changes saved\")\n```", "```py\nimport pandas as pd\nimport streamlit as st\n\nimport DButils\n\nst.info(\"## Select the answer to each question and then click on 'Submit'\")\nquestions = DButils.get_survey()\n\nresponses = {}\n\nfor q in questions:\n    response = st.radio(label=q['text'], options=q['responses'].split(\",\"))\n    responses[q['text']] = response.strip()\n\nif st.button(\"Submit\"):\n    entry = responses\n    DButils.append_results(entry)\n    st.write(\"Updated\")\n```", "```py\nimport streamlit as st\nimport plotly.express as px\nimport pandas as pd\nimport DButils\n\nst.set_page_config(layout=\"wide\")\n\nst.info(\"## Here are the results:\")\n\nst.write(\"The results are presented as a dataframe.\")\n\n# Read data from Databutton's datastore\nresults = DButils.get_results()\nst.dataframe(results, use_container_width=True)\n\ndf = pd.DataFrame(results)\n\nst.download_button(\n    label=\"Download data as CSV\",\n    data=df.to_csv().encode(\"utf-8\"),\n    file_name=\"survey_results.csv\",\n    mime=\"text/csv\",\n)\n\n# Plot a summary bar graph\n\nfig = px.bar(results, title=\"Survey responses - overview\")\nfig.update_xaxes(title_text=\"Response\")\nfig.update_yaxes(title_text=\"Count\")\nst.plotly_chart(fig)\n\n# Create an array of bar graph figures\n# one for each question \n\nfigures = []\n\nfor q in df.columns:\n    fig = px.bar(df[q], title=q)\n    fig.update_layout(showlegend=False)\n    fig.update_xaxes(title_text=\"Response\")\n    fig.update_yaxes(title_text=\"Count\")\n    figures.append(fig)\n\n# Choose which graph to display with a set of radio buttons\n\nst.info(\"### Choose the graph for a specific question\")\nf = st.radio(\"Choose a graph\", options=df.columns)\ncolumn_index = df.columns.get_loc(f)\nst.plotly_chart(figures[column_index])\n```", "```py\nimport os\nimport json\n\nSURVEY_KEY = \"survey.json\"\nRESULTS_KEY = \"results.json\"\n\n# Save data\ndef save_dict(value, key=SURVEY_KEY):\n    print(f\"Saving: {value}\")\n    #return None\n    out_file = open(key, \"w\")\n    json.dump(value,out_file)\n    out_file.close()\n\ndef save_results(value):\n    save_dict(value,RESULTS_KEY)\n\ndef save_survey(value):\n    save_dict(value, SURVEY_KEY)\n\n# Retrieve data\ndef retrieve(key):\n    # file exists read it and return dict array\n    if os.path.isfile(key):\n        in_file = open(key, \"r\")\n        result = json.load(in_file)\n        in_file.close()\n        return result\n    else:\n        # File does not exist return an empty dict array\n        return []\n\ndef get_survey(key=SURVEY_KEY):\n    return retrieve(key)\n\ndef get_results(key=RESULTS_KEY):\n    return retrieve(key)\n\n# Update results\n# This may not be efficient but it is simple\ndef append_results(value):\n    results = get_results()\n    results.append(value)\n    save_results(results)\n```", "```py\nimport databutton as db\n\ndef get_survey():\n    survey = db.storage.json.get(\"survey\", default=[])\n    return survey\n\ndef save_survey(survey):\n    db.storage.json.put(\"survey\", survey)\n\ndef append_results(entry):\n    # Retrieve the existing survey results from the JSON file in Databutton\n    survey_results = db.storage.json.get(\"survey_results\", default=[])\n\n    # Append the new entry to the survey results\n    survey_results.append(entry)\n\n    # Save the updated survey results back to the JSON file in Databutton\n    db.storage.json.put(\"survey_results\", survey_results)\n\ndef get_results():\n    # Retrieve the results data from Databutton's datastore\n    results = db.storage.json.get(\"survey_results\", default={})\n    return results\n```"]