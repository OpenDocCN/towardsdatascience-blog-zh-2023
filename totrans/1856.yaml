- en: Simple ways to create synthetic dataset in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/simple-ways-to-create-synthetic-dataset-in-python-76a8e9a2f35c](https://towardsdatascience.com/simple-ways-to-create-synthetic-dataset-in-python-76a8e9a2f35c)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data Science Fundamentals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A beginner‚Äôs guide to create mock tabular data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://zluvsand.medium.com/?source=post_page-----76a8e9a2f35c--------------------------------)[![Zolzaya
    Luvsandorj](../Images/dd3bb91f8625a6fbe8fd26e56036ad29.png)](https://zluvsand.medium.com/?source=post_page-----76a8e9a2f35c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----76a8e9a2f35c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----76a8e9a2f35c--------------------------------)
    [Zolzaya Luvsandorj](https://zluvsand.medium.com/?source=post_page-----76a8e9a2f35c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----76a8e9a2f35c--------------------------------)
    ¬∑7 min read¬∑Jan 12, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: When developing a code, sometimes we need a dummy dataset. For instance, we
    want to share code and the underlying data but real-life dataset is confidential
    so not suitable for sharing. One option is to find and use a suitable [toy dataset
    or publicly available datasets](/datasets-in-python-425475a20eb1). Another option
    is to create a synthetic dataset that is sufficient for your use-case. In this
    post, we will look at a few simple ways to create synthetic datasets in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9298cc1e32a2bf82fd4e570d2c3cb6c6.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Jackie Tsang](https://unsplash.com/es/@jickii?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: üîß Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start by loading necessary libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We are all set, let‚Äôs dive in!
  prefs: []
  type: TYPE_NORMAL
- en: üìç Scikit-learn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scikit-learn comes with many useful functions to create synthetic numeric datasets.
    In this section, we will familiarise with a selected few.
  prefs: []
  type: TYPE_NORMAL
- en: üìå Regression
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can create datasets with numeric features and a continuous target using
    `[make_regression](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_regression.html)`
    function. Let‚Äôs create a dataset with 5 features and a continuous target for 1000
    records :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1ce697a3bb5d9663a02392065b694905.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'That was very straight-forward! We have specified the number of records to
    `n_samples` argument and number of features to `n_features` argument. We set seed
    so that the synthetic dataset can be reproduced. We can use this dataset to build
    a regression model if we wanted to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bb573001cfce803a03f371447198ff81.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The model seem to be overfitting quite badly to the training data in this case.
  prefs: []
  type: TYPE_NORMAL
- en: üìå Classification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to above, we can create dataset with desired number of numeric features
    and a discrete target with `[make_classification](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_classification.html)`.
    We will now practice creating a dataset with 5 features and a binary target for
    1000 records:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/cd9e7aea1cf7b833060b18752bea0cca.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the arguments we used in the regression section, we specified
    the number of classes to the `n_classes` argument. We will go ahead and build
    a classification model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/631c2fecf425ff77975b5a4f736c5862.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'From a quick glance, the model seem to be doing well. We can also create datasets
    for multi-label classification problem using `[make_multilabel_classification](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_multilabel_classification.html#sklearn.datasets.make_multilabel_classification)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fdadad9605ffc03d33542c85e73cef26.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we have two target labels. Using the dummy dataset, we can build
    a multi-label classification model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b1282caf0505f33548e8ec72cdbdbaa7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: üìå Clustering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another useful function is `[make_blobs](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_blobs.html)`
    that creates data for clustering:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bd6787db3cdd1e0e9fe02e28da0cd13f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we have chosen 4 cluster centers with the `centers` parameter.
    Although clustering is unsupervised, meaning that we don‚Äôt have a target variable,
    we get the clusters as the target variable in the synthetic dataset. Let‚Äôs visualise
    the sum of squared distances across different values of `k`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c2e5227327336c3b9af19a5918ce2b3f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: It looks like the sum of squared distance plateaus after when k=4\. Or are we
    influenced by confirmation bias?
  prefs: []
  type: TYPE_NORMAL
- en: If you are curious to learn more, these 4 functions we just learned have other
    useful parameters to further customise and control how you create synthetic datasets.
    You can learn more about Scikit-learn‚Äôs functions to generate synthetic datasets
    from [here](https://scikit-learn.org/stable/datasets/sample_generators.html).
  prefs: []
  type: TYPE_NORMAL
- en: üìç NumPy & pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also use `numpy` and `pandas`, commonly used data manipulation libraries,
    to create dummy datasets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8477af89e805ea010c34c309c38393c4.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: üìå Categorical variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have created a categorical variable: `gender` as an example. Using the `p`
    argument, we have specified the desired probabilities for the categories. We can
    check if the generated data reflects this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/64033e5ad7b3dd61c0767a9943022e52.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Great, it‚Äôs roughly 60:40\. If we don‚Äôt specify `p` argument, categories will
    be evenly distributed.
  prefs: []
  type: TYPE_NORMAL
- en: üìå Numeric variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have created a few numeric variables: `id`, `age`, `spend`, `points`.'
  prefs: []
  type: TYPE_NORMAL
- en: '‚óºÔ∏è `id`: We ensured that the 5-digit id is unique by specifying `replace=False`.'
  prefs: []
  type: TYPE_NORMAL
- en: '‚óºÔ∏è Ô∏è`age`: Used `np.random.randint()` function to generate random integers
    between a range.'
  prefs: []
  type: TYPE_NORMAL
- en: '‚óºÔ∏è `spend`: Used `scipy.stats.skewnorm.rvs()` function to create a skewed random
    numeric variable.'
  prefs: []
  type: TYPE_NORMAL
- en: '‚óºÔ∏è `points`: Used `np.random.normal()` function to create a normally distributed
    random numeric variable.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let‚Äôs compare the distribution of `spend` and `points` as below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fc520dc2d1790fa300da83cd42ff15bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: We can see that `spend` is skewed with a long right tail whereas `points` is
    roughly normally distributed.
  prefs: []
  type: TYPE_NORMAL
- en: üìå Date variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Lastly, we created a date variable using `pandas`. We defined `start_date`
    and `end_date` and found random dates within the range. We can check the distribution
    of the randomly sampled dates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9d6d3201680eb57f3336b653b540105a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Now, let‚Äôs familiarise with an interesting library.
  prefs: []
  type: TYPE_NORMAL
- en: üìç Faker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Faker` is a library to create fake datasets. The way we work with the library
    is quite simple, we first initialise a `Faker` object: `fake = Faker()`. Then
    we can access a whole ranges of methods it offers by `fake.<method_name()>`. For
    example, check out `fake.name()`. Here‚Äôs a sample dataset we can create using
    the library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e708fa3a8ba3e1bd32d071fed2fdc338.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author | Fake personnel information is blurred out for safety reason
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides using `pandas`, we can also add dates using `Faker` as can be seen
    from `birthday` column. We have also generated a few free text columns. When you
    need dummy data, this library is quite useful, isn‚Äôt it? If you want to create
    dummy text, here‚Äôs a sample syntax we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/614a0da3746284cb2955456b2c554b10.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also slightly different versions of this depending on what we are
    after: `fake.sentences()`, `fake.paragraph()` or `fake.paragraphs()`.'
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we have only looked at a few of its methods. If you want to explore
    more about the library, [here](https://github.com/joke2k/faker/blob/master/docs/fakerclass.rst)‚Äôs
    its GitHub documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Voila, that was it! Hope this simple ways to generate synthetic datasets will
    be useful in your Python code development.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f552a8c38f153675d4ffcdfd99826b98.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Edgar Chaparro](https://unsplash.com/@echaparro?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'Thank you for reading this article. If you are interested, here are links to
    some of my other posts:'
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏èÔ∏è [From ML Model to ML Pipeline](/from-ml-model-to-ml-pipeline-9f95c32c6512)
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏èÔ∏è [Explaining Scikit-learn models with SHAP](/explaining-scikit-learn-models-with-shap-61daff21b12a)
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏èÔ∏è [4 simple tips for plotting multiple graphs in Python](/4-simple-tips-for-plotting-multiple-graphs-in-python-38df2112965c)
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏è [Prettifying pandas DataFrames](/prettifying-pandas-dataframes-75c1a1a6877d)
  prefs: []
  type: TYPE_NORMAL
- en: ‚óº [Simple data visualisations in Python that you will find useful](/simple-data-visualisations-in-python-that-you-will-find-useful-5e42c92df51e)Ô∏è
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏è [6 simple tips for prettier and customised plots in Seaborn (Python)](/6-simple-tips-for-prettier-and-customised-plots-in-seaborn-python-22f02ecc2393)
  prefs: []
  type: TYPE_NORMAL
- en: Bye for now üèÉ üí®
  prefs: []
  type: TYPE_NORMAL
