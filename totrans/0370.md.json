["```py\nfrom pyspark.sql import functions as F\n```", "```py\n# Point file path\npath = '/databricks-datasets/Rdatasets/data-001/csv/ggplot2/diamonds.csv'\n\n# Load Data\ndf = spark.read.csv(path, header=True, inferSchema= True)\n```", "```py\n# Add an increasing ID column starting in 1\ndisplay(\n    df\n    .limit(100)\n    .withColumn('ID', F.monotonically_increasing_id()+1 )\n)\n```", "```py\ndisplay(\n    df\n    .groupBy('cut')\n    .agg( F.sum('price').alias('total'),\n          F.mean('price').alias('avg_price'),\n          F.min('price').alias('min_price'),\n          F.max('price').alias('max_price') )\n)\n```", "```py\ndisplay(\n    df\n    .groupBy('cut')\n    .agg( F.count('cut').alias('n_count'), #count of obervations\n          F.countDistinct('price').alias('distinct') ) #distinct n prices\n)\n```", "```py\ndisplay(\n    df #dataset\n    .limit(10) #only 10 rows\n    .withColumn('literal', F.lit('my text or number')) #add column with literal value\n)\n```", "```py\ndisplay(\n    df\n    .limit(10)\n    .select('x')\n    .withColumn('floor', F.floor('x') )\n    .withColumn('ceiling', F.ceiling('x') )\n)\n```", "```py\ndisplay(\n    df\n    .groupBy('cut')\n    .agg( F.median('price').alias('median'),\n          F.percentile('price', 0.5).alias('50th pct'))\n)\n```", "```py\n# Descriptive Stats\n\ndisplay(\n  df\n  .describe()\n)\n```", "```py\n# Calculating different Logs of 'price'\ndisplay(\n    df\n    .select( F.ln('price').alias('Ln'),\n            F.log1p('price').alias('Log1p'),\n            F.log10('price').alias('Log10'))\n)\n```", "```py\n# Get the aggregated values and list them in a new variable\ndisplay(\n    df.limit(50)\n    .groupBy('cut')\n    .agg( F.array_agg('price'))\n)\n```", "```py\ndisplay(\n    df\n    .groupBy('cut')\n    .agg( F.count_if( col('price') > 18000))\n)\n```", "```py\n# Most common value\ndisplay(\n    df\n    .groupBy('cut')\n    .agg( F.mode( 'carat' ).alias('mode') )\n)\n```", "```py\n# Remember that the regression formula is y = a + b*x\n(\n    df\n    .groupBy('cut')\n    .agg( F.regr_r2( 'price', 'carat').alias('regression_r2'),\n         F.lit('y ='),\n         F.regr_intercept( 'price', 'carat').alias('intercept'),\n         F.lit('+'),\n         F.regr_slope( 'price', 'carat').alias('reg_slope'),\n         F.lit('*'),\n         F.regr_avgx( 'price', 'carat').alias('avg_x')    )\n\n).show()\n```", "```py\n# Using Regular Expessions\ndisplay(\n    df\n    .select( 'clarity',\n            F.regexp('clarity', F.lit(r'(\\d+)')),\n            F.locate('S', 'clarity', 1) )\n)\n```", "```py\n display( df\n        .select( col('carat').cast('string'))\n        .select( F.split('carat', '\\.')[0],\n                 F.split('carat', '\\.')[1] ) \n        )\n```", "```py\ndisplay( df\n        .select('cut')\n        .withColumn('first3', F.left('cut', F.lit(3)))\n        )\n```"]