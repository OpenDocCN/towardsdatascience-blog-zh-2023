- en: 5 Easy and Effective Ways to Use Python Logging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5 种简单有效的 Python 日志使用方法
- en: 原文：[https://towardsdatascience.com/5-easy-and-effective-ways-to-use-python-logging-a9564bd17ccd](https://towardsdatascience.com/5-easy-and-effective-ways-to-use-python-logging-a9564bd17ccd)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/5-easy-and-effective-ways-to-use-python-logging-a9564bd17ccd](https://towardsdatascience.com/5-easy-and-effective-ways-to-use-python-logging-a9564bd17ccd)
- en: Use Python Logging like a Pro
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 像专业人士一样使用 Python 日志
- en: '[](https://dmitryelj.medium.com/?source=post_page-----a9564bd17ccd--------------------------------)[![Dmitrii
    Eliuseev](../Images/7c48f0c016930ead59ddb785eaf3e0e6.png)](https://dmitryelj.medium.com/?source=post_page-----a9564bd17ccd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a9564bd17ccd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a9564bd17ccd--------------------------------)
    [Dmitrii Eliuseev](https://dmitryelj.medium.com/?source=post_page-----a9564bd17ccd--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://dmitryelj.medium.com/?source=post_page-----a9564bd17ccd--------------------------------)[![Dmitrii
    Eliuseev](../Images/7c48f0c016930ead59ddb785eaf3e0e6.png)](https://dmitryelj.medium.com/?source=post_page-----a9564bd17ccd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a9564bd17ccd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a9564bd17ccd--------------------------------)
    [Dmitrii Eliuseev](https://dmitryelj.medium.com/?source=post_page-----a9564bd17ccd--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a9564bd17ccd--------------------------------)
    ·5 min read·Jun 16, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a9564bd17ccd--------------------------------)
    ·5分钟阅读·2023年6月16日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/15b156437e425ed1bab6abb488109fac.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/15b156437e425ed1bab6abb488109fac.png)'
- en: Image generated by author
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图像由作者生成
- en: I can bet that almost every Python developer sometimes uses “print” for debugging.
    There’s nothing wrong with that for prototyping, but for production, there are
    much more effective ways to handle the logs. In this article, I will show five
    practical reasons why Python “logging” is much more flexible and powerful and
    why you absolutely should use it if you have not started before.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我敢打赌，几乎每个 Python 开发人员有时都会使用“print”进行调试。对于原型设计来说没有什么问题，但对于生产环境来说，有更有效的方法来处理日志。在这篇文章中，我将展示
    Python “logging” 比“print”更灵活和强大的五个实际原因，以及为什么如果你之前没有开始使用它，你绝对应该使用它。
- en: Let’s get into it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Code
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码
- en: 'To make things more practical, let’s consider a toy example. I created a small
    application that calculates a linear regression for two Python lists:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使事情更实际，我们考虑一个玩具示例。我创建了一个小应用程序，用于计算两个 Python 列表的线性回归：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code works, but can we do it better? We obviously can. Let’s see five advantages
    of using “*logging*” instead of “*print”* in this code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码可以运行，但我们能做得更好吗？显然可以。让我们看看在这段代码中使用“*logging*”而不是“*print*”的五个优势。
- en: 1\. Logging levels
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 日志级别
- en: 'Let’s change our code a bit:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微修改一下我们的代码：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here I replaced “print” calls with “logging” calls. We made a small change,
    but it makes the output much more flexible. Using the “level” parameter, we can
    now set different **logging levels**. For example, if we use “*level=logging.DEBUG”*,
    then all output will be visible. When we are sure that our code is ready for production,
    we can change the level to “*logging.INFO”*, and debugging messages will not be
    displayed anymore:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我将“print”调用替换为“logging”调用。我们做了一个小的更改，但它使输出变得更加灵活。通过使用“level”参数，我们现在可以设置不同的
    **日志级别**。例如，如果我们使用“*level=logging.DEBUG*”，则所有输出都将可见。当我们确定我们的代码已准备好投入生产时，我们可以将级别更改为“*logging.INFO*”，调试消息将不再显示：
- en: '![](../Images/34e99f94dbf967ee7ccad706bc985a91.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/34e99f94dbf967ee7ccad706bc985a91.png)'
- en: The “INFO” debug level is at the left and “DEBUG” at the right, Image by author
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: “INFO” 调试级别在左侧，“DEBUG” 在右侧，作者提供的图像
- en: And what is important is that no code change is needed except the initialization
    of the logging itself!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，除了日志的初始化之外，不需要任何代码更改！
- en: 'By the way, all available constants can be found in the *logging/__init__.py*
    file:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一下，所有可用的常量可以在 *logging/__init__.py* 文件中找到：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As we can see, the “ERROR” level is the highest; by enabling the “ERROR” log
    level, we can suppress all other messages, and only errors will be displayed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，“ERROR”级别是最高的；通过启用“ERROR”日志级别，我们可以抑制所有其他消息，只显示错误。
- en: 2\. Formatting
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 格式化
- en: 'As we can see from the last screenshot, it is easy to control the logging output.
    But we can do much more to improve that. We can also adjust the output by providing
    the “*format”* string. For example, I can specify formatting like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从最后的截图可以看出，控制日志输出是很容易的。但我们可以做得更多来改进它。我们还可以通过提供“*format*”字符串来调整输出。例如，我可以指定如下格式：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Without any other code changes, I will be able to see timestamps, file names,
    and even the line numbers in the output:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有其他代码更改的情况下，我将能够在输出中看到时间戳、文件名，甚至行号：
- en: '![](../Images/b3f1d4f3e7e2e74df608dad6ca20df85.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b3f1d4f3e7e2e74df608dad6ca20df85.png)'
- en: Logging output, Image by author
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 日志输出，作者提供的图片
- en: There are about 20 different parameters available, which can be found in the
    “[LogRecord attributes](https://docs.python.org/3/library/logging.html)” paragraph
    of the manual.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 大约有 20 个不同的参数，可以在手册的“[LogRecord attributes](https://docs.python.org/3/library/logging.html)”一节中找到。
- en: 3\. Saving logs to a file
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 将日志保存到文件中
- en: 'Python logging is a very flexible module, and its functionality can be easily
    expanded. Let’s say we want to save all our logs into a file for future analysis.
    To do this, we need to add only two lines of code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的 logging 是一个非常灵活的模块，其功能可以很容易地扩展。假设我们想将所有日志保存到一个文件中以备将来分析。为此，我们只需要添加两行代码：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As we can see, I added a new parameter “handlers”. A *StreamHandler* is displaying
    the log at the console, and the *FileHandler*, as we can guess from its name,
    saves the same output to the file.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我添加了一个新的参数“handlers”。一个 *StreamHandler* 正在控制台上显示日志，而 *FileHandler*，顾名思义，将相同的输出保存到文件中。
- en: This system is really flexible. Plenty of different “handler” objects are available
    in Python, and I encourage readers to [check the manual](https://docs.python.org/3/library/logging.handlers.html)
    on their own. And as we already know, logging works almost automatically; no further
    code changes are required.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个系统非常灵活。Python 中有许多不同的“处理器”对象，我鼓励读者自己去 [查阅手册](https://docs.python.org/3/library/logging.handlers.html)。正如我们已经知道的，日志几乎可以自动工作；无需进一步的代码更改。
- en: 4\. Rotating log files
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 循环日志文件
- en: 'Saving logs into a file is a good option, but alas, the disk space is not unlimited.
    We can easily solve this problem by using the rotating log file:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将日志保存到文件中是一个不错的选择，但遗憾的是，磁盘空间不是无限的。我们可以通过使用循环日志文件轻松解决这个问题：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: All parameters are self-explanatory. A *TimedRotatingFileHandler* object will
    create a log file, which will be changed every midnight, and only the last three
    log files will be stored. The previous files will be automatically renamed to
    something like “debug.log.2023.03.03”, and after a 3-day interval, they will be
    deleted.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 所有参数都是显而易见的。一个 *TimedRotatingFileHandler* 对象将创建一个日志文件，该文件会在每个午夜更换，并且只保存最近的三个日志文件。之前的文件将自动重命名为类似“debug.log.2023.03.03”的格式，经过
    3 天的间隔后将被删除。
- en: 5\. Sending logs via socket
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 通过套接字发送日志
- en: 'Python’s logging is surprisingly flexible. If we don’t want to save logs into
    a local file, we can just add a socket handler, which will send logs to another
    service using a specific IP and port:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的 logging 出奇地灵活。如果我们不想将日志保存到本地文件中，我们可以只需添加一个套接字处理程序，它将使用特定的 IP 和端口将日志发送到另一个服务：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: That’s it; no more code changes are required!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样；无需更多的代码更改！
- en: 'We can also create another application that will listen to the same port:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以创建另一个应用程序来监听相同的端口：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The tricky part here is to use the *emit* method, which adds all remote data
    received by a socket to an active StreamHandler.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的难点是使用 *emit* 方法，它将所有通过套接字接收到的远程数据添加到一个活动的 StreamHandler 中。
- en: '6\. Bonus: Log filters'
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. 奖励：日志过滤器
- en: 'Finally, a small bonus for readers who were attentive enough to read until
    this part. It is also easy to add custom filters to logs. Let’s say we want to
    log only X and Y values into the file for future analysis. It is easy to create
    a new Filter class, which will save to log only strings containing “x:” or “y:”
    records:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对那些足够细心到这一部分的读者来说，还有一个小小的奖励。添加自定义日志过滤器也很简单。假设我们只想将 X 和 Y 的值记录到文件中以备将来分析。创建一个新的
    Filter 类也很简单，它将仅保存包含“x:”或“y:”记录的日志：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then we can easily add this filter to the file log. Our console output will
    stay intact, but the file will have only “x:” and “y:” values.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以轻松地将这个过滤器添加到文件日志中。我们的控制台输出将保持不变，但文件中只会有“x:”和“y:”的值。
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Conclusion
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In this short article, we learned several easy ways to incorporate logs into
    the Python application. Logging in Python is a very flexible framework, and it
    is definitely worth spending some time investigating how it works.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇简短的文章中，我们学习了几种将日志集成到Python应用程序中的简单方法。Python中的日志系统是一个非常灵活的框架，绝对值得花时间深入了解它的工作原理。
- en: Thanks for reading, and good luck with future experiments.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读，祝你未来的实验好运。
- en: If you enjoyed this story, feel free [to subscribe](https://medium.com/@dmitryelj/membership)
    to Medium, and you will get notifications when my new articles will be published,
    as well as full access to thousands of stories from other authors.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这个故事，可以随时[订阅](https://medium.com/@dmitryelj/membership)Medium，这样你会在我发表新文章时收到通知，并且可以全面访问其他作者的数千篇故事。
