["```py\n class ResnetBasedModel(nn.Module):\n    def __init__(self, pretrained, clf_in_features,  labels_nr:int, freeze:bool = True):\n        super().__init__()\n\n        self.pretrained_model = pretrained\n        #model without last layer\n        self.model_wo_fc = nn.Sequential(*(list(self.pretrained_model.children())[:-1])) \n\n        if freeze:\n            for param in self.model_wo_fc.parameters():\n                param.requires_grad = False\n\n        self.classifiers = nn.ModuleDict()\n\n        for i in range(labels_nr):\n            self.classifiers[f'clf_{i}'] = nn.Sequential(\n                nn.Dropout(p=0.2),\n                nn.Linear(in_features = clf_in_features, out_features = 1)\n            )\n\n    def forward(self, x):\n        x = self.model_wo_fc(x)\n        x = torch.flatten(x, 1)\n\n        return {name: classifier(x) for name, classifier in self.classifiers.items()}\n```", "```py\nif freeze:\n    for param in self.model_wo_fc.parameters():\n        param.requires_grad = False\n```", "```py\nfor i in range(labels_nr):\n      self.classifiers[f'clf_{i}'] = nn.Sequential(\n          nn.Dropout(p=0.2),\n          nn.Linear(in_features = clf_in_features, out_features = 1)\n      )\n```", "```py\ndef forward(self, x):\n        x = self.model_wo_fc(x)\n        x = torch.flatten(x, 1)\n\n        return {name: classifier(x) for name, classifier in self.classifiers.items()}\n```", "```py\nfrom torchvision import models\n\nresnet34 = models.resnet34(weights=models.ResNet34_Weights.DEFAULT)\n```", "```py\ndef criterion(y, yhat):\n    '''y : is a dict with keys 'labels' and 'path'''\n    losses = 0\n    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n    for _, key in enumerate(yhat):\n        losses += loss_func(yhat[key], y[f'label_{key}'].float().unsqueeze(1).to(device))\nreturn losses\n```", "```py\ndef hamming_error(yhat:list, y:list) -> float:\n    loss = sum([yhat_i != y_i for yhat_i, y_i in zip(yhat, y)])\n    avg_loss = loss/len(yhat) \n\n    return avg_loss\n```", "```py\nF1 = 2 * (precision * recall) / (precision + recall)\n```", "```py\nAverage precision = (1/n) * Î£(precision at each recall value)\n```"]