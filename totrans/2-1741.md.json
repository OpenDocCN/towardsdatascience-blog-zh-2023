["```py\nfrom pathlib import Path\n\nROOT = Path(__file__).resolve().parent\n\nbasic_names = [\n    \"file1\",\n    \"file2\",\n    \"file_miss_x56\",\n    \"xyz_settings\",\n]\nfiles = [\n    Path(ROOT) / f\"{name}.csv\"\n    for name in basic_names\n]\n```", "```py\nbasic_names = (\n    \"file1\",\n    \"file2\",\n    \"file_miss_x56\",\n    \"xyz_settings\",\n)\n```", "```py\n>>> x_tuple_1 = (1, 2, 3)\n>>> x_tuple_1\n(1, 2, 3)\n>>> x_tuple_2 = ([1, 2], 3)\n>>> x_tuple_2\n([1, 2], 3)\n```", "```py\n>>> tuple((tuple(), tuple()))\n((), ())\n```", "```py\n>>> tuple([1, 2, 5])\n(1, 2, 5)\n>>> tuple(i for i in range(5))\n(0, 1, 2, 3, 4)\n```", "```py\n>>> x_list = [1, 2, 3]\n>>> x_tuple = (1, 2, 3)\n>>> x_list[0] = 10\n>>> x_list\n[10, 2, 3]\n>>> x_tuple[0] = 10\nTraceback (most recent call last):\n    ...\nTypeError: 'tuple' object does not support item assignment\n```", "```py\n>>> x_tuple = ([1, 2], 3)\n>>> x_tuple[0][0] = 10\n>>> x_tuple\n([10, 2], 3)\n>>> x_tuple[1] = 10\nTraceback (most recent call last):\n    ...\nTypeError: 'tuple' object does not support item assignment\n```", "```py\n>>> x = (1, 56, \"string\")\n```", "```py\n>>> x = tuple(x**.5 for x in range(100))\n```", "```py\n>>> x = 1, 56, \"string\"\n```", "```py\n>>> x = {10, 20, 50},\n```", "```py\n>>> x\n({10, 20, 50},)\n```", "```py\n>>> my_tuple = (1, 2, 3,)\n>>> a, b, c = my_tuple\n```", "```py\n>>> x_tuple = ([1, 2], 3)\n>>> x, y = x_tuple\n>>> x\n[1, 2]\n>>> y\n3\n```", "```py\n>>> x_tuple = (1, 2, 3, 4, 5)\n>>> a, b* = x_tuple\n>>> a\n1\n>>> b\n[2, 3, 4, 5]\n\n>>> *a, b = x_tuple\n>>> a\n[1, 2, 3, 4]\n>>> b\n5\n\n>>> a, *b, c = x_tuple\n>>> a\n1\n>>> b\n[2, 3, 4]\n>>> c\n5\n```", "```py\n>>> t = 1, 2, \"a\", \"ty\", 5, 5.1, 60\n>>> a, b, *_, c = t\n>>> a, b, c\n(1, 2, 60)\n```", "```py\n>>> @dataclass\n... class Rectangle:\n...     x: float\n...     y: float\n...     def area(self):\n...         return self.x * self.y\n...     def perimeter(self):\n...         return 2*self.x + 2*self.y\n...     def summarize(self):\n...         return self.area(), self.perimeter()\n>>> rect = Rectangle(20, 10)\n>>> rect\nRectangle(x=20, y=10)\n>>> rect.summarize()\n(200, 60)\n```", "```py\n>>> results = rect.summarize()\n>>> area = result[0]       # poor!\n>>> perimeter = result[1]  # poor!\n```", "```py\n>>> area, perimeter = rect.summarize()\n>>> area\n200\n>>> perimeter\n60\n```", "```py\n>>> from dataclasses import dataclass\n>>> KmSquare = float\n>>> @dataclass\n... class City:\n...     lat: float\n...     long: float\n...     population: int\n...     area: KmSquare\n...     def get_coordinates(self):\n...         return self.lat, self.long\n>>> Warsaw = City(52.2297, 21.0122, 1_765_000, 517.2)\n>>> lat, long = Warsaw.get_coordinates()\n>>> lat\n52.2297\n>>> long\n21.0122 \n```", "```py\n>>> cities = {\n...     \"Warsaw\": [(52.2297, 21.0122), 1_765_000, 517.2],\n...     \"Prague\": [(50.0755, 14.4378), 1_309_000, 496],\n...     \"Bratislava\": [(48.1486, 17.1077), 424_428_000, 367.6],\n... }\n```", "```py\n>>> (lat, long), *rest = cities[\"Warsaw\"]\n>>> lat\n52.2297\n>>> long\n21.0122\n```", "```py\n>>> (lat, long), _, area = cities[\"Warsaw\"]\n>>> lat, long, area\n(52.2297, 21.0122, 517.2)\n```", "```py\n>>> def foo(*args):\n...     return args\n>>> foo(50, 100)\n(50, 100)\n>>> foo(50, \"Zulu Gula\", 100)\n(50, 'Zulu Gula', 100)\n```", "```py\n>>> a, *_, b = [i**2 for i in range(100)]\n>>> a, b\n(0, 9801)\n>>> x = (i for i in range(10))\n>>> a, b, *c = x\n>>> c\n[2, 3, 4, 5, 6, 7, 8, 9]\n```", "```py\n>>> len(y)\n7\n```", "```py\n>>> x = (1, 2, 3)\n>>> y = (\"a\", \"b\", \"c\")\n>>> z = x + y\n>>> z\n(1, 2, 3, 'a', 'b', 'c')\n```", "```py\n>>> x = (1, 2, 3)\n>>> x * 3\n(1, 2, 3, 1, 2, 3, 1, 2, 3)\n```", "```py\n>>> x = (1, 2, 3)\n>>> 3 * x\n(1, 2, 3, 1, 2, 3, 1, 2, 3)\n```", "```py\n>>> x = (1, 2, 3)\n>>> y = (\"a\", \"b\", \"c\")\n>>> x += y\n>>> x\n(1, 2, 3, 'a', 'b', 'c')\n```", "```py\n>>> x = (1, 2, 3)\n>>> first_id = id(x)\n>>> y = (\"a\", \"b\", \"c\")\n>>> x += y\n>>> second_id = id(x)\n>>> first_id == second_id\nFalse\n```", "```py\n>>> x = (1, 2, 3)\n>>> x *= 3\n>>> x\n(1, 2, 3, 1, 2, 3, 1, 2, 3)\n```", "```py\n>>> x = (1, 2, 3)\n>>> 1 in x\nTrue\n>>> 100 in x\nFalse\n```", "```py\n>>> y = (\"a\", \"b\", \"c\", \"a\", \"a\", \"b\", \"C\")\n>>> y.count(\"a\")\n3\n>>> y.count(\"b\")\n2\n```", "```py\n>>> y[0]\n'a'\n>>> y[4], y[5]\n('a', 'b')\n```", "```py\n>>> y = (\"a\", \"b\", \"c\", \"a\", \"a\", \"b\", \"C\")\n>>> y.index(\"a\")\n0\n>>> y.index(\"b\")\n1\n```", "```py\n>>> y_iter = iter(y)\n>>> y_iter # doctest: +ELLIPSIS\n<tuple_iterator object at 0x7...>\n>>> next(y_iter)\n'a'\n>>> next(y_iter)\n'b'\n>>> for y_i in iter(y):\n...     print(y_i, end=\" | \")\na | b | c | a | a | b | C |\n```", "```py\n>>> import pickle\n>>> with open(\"x.pkl\", \"wb\") as f:\n...     pickle.dump(x, f)\n>>> with open(\"x.pkl\", \"rb\") as f: \n...     x_unpickled = pickle.load(f)\n>>> x_unpickled\n(1, 2, 3)\n```"]