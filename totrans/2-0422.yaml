- en: Build a Speech-to-Text Web App Using Node.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Node.js 构建语音转文本网页应用
- en: 原文：[https://towardsdatascience.com/build-a-speech-to-text-web-app-using-node-js-210f8c054d79](https://towardsdatascience.com/build-a-speech-to-text-web-app-using-node-js-210f8c054d79)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/build-a-speech-to-text-web-app-using-node-js-210f8c054d79](https://towardsdatascience.com/build-a-speech-to-text-web-app-using-node-js-210f8c054d79)
- en: Let’s build a web app which transcribes and translates audio using OpenAI’s
    Whisper Model
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们来构建一个使用 OpenAI 的 Whisper 模型来转录和翻译音频的网页应用
- en: '[](https://shubhamstudent5.medium.com/?source=post_page-----210f8c054d79--------------------------------)[![Kumar
    Shubham](../Images/64eed4588cc63804a612f01d5c6ec1ea.png)](https://shubhamstudent5.medium.com/?source=post_page-----210f8c054d79--------------------------------)[](https://towardsdatascience.com/?source=post_page-----210f8c054d79--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----210f8c054d79--------------------------------)
    [Kumar Shubham](https://shubhamstudent5.medium.com/?source=post_page-----210f8c054d79--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://shubhamstudent5.medium.com/?source=post_page-----210f8c054d79--------------------------------)[![Kumar
    Shubham](../Images/64eed4588cc63804a612f01d5c6ec1ea.png)](https://shubhamstudent5.medium.com/?source=post_page-----210f8c054d79--------------------------------)[](https://towardsdatascience.com/?source=post_page-----210f8c054d79--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----210f8c054d79--------------------------------)
    [Kumar Shubham](https://shubhamstudent5.medium.com/?source=post_page-----210f8c054d79--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----210f8c054d79--------------------------------)
    ·11 min read·Mar 27, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----210f8c054d79--------------------------------)
    ·阅读时间 11 分钟·2023年3月27日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/25b5d8abf919e8d8c304f803d5948166.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/25b5d8abf919e8d8c304f803d5948166.png)'
- en: Photo by [AltumCode](https://unsplash.com/@altumcode?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [AltumCode](https://unsplash.com/@altumcode?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Hello folks! I hope you all are doing well. Today, we will build a Speech to
    Text web app using Node.js and OpenAI’s API. We would use OpenAI’s API to use
    its Whisper Model, which lets us upload audio files in mp3 format, and provides
    us with its transcript. It can even translate audio in other languages to English
    text, which is incredible.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大家好！希望你们一切都好。今天，我们将使用 Node.js 和 OpenAI 的 API 构建一个语音转文本网页应用。我们将使用 OpenAI 的 API
    来使用其 Whisper 模型，该模型允许我们上传 mp3 格式的音频文件，并提供其文字稿。它甚至可以将其他语言的音频翻译成英文文本，实在令人惊叹。
- en: 'First of all, we would set up a new Node.js project so that we can start building
    our application. So, we will create a folder where we want to build our project
    and move into that folder using the command line, and then we can set up a new
    Node.js project using the following command:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将设置一个新的 Node.js 项目，以便我们可以开始构建我们的应用。因此，我们将创建一个文件夹，在其中构建我们的项目，并使用命令行进入该文件夹，然后我们可以使用以下命令来设置一个新的
    Node.js 项目：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After running this command, it will ask several questions, such as the app’s
    name, entry point, etc. We can keep them as default for now. After this, you would
    see it created a `package.json` file. This file would contain information about
    our application and which packages we have installed for this application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，它将询问一些问题，例如应用程序的名称、入口点等。我们现在可以将其保留为默认设置。之后，你会看到它创建了一个`package.json`文件。该文件包含有关我们应用程序的信息以及我们为该应用程序安装了哪些包。
- en: 'So, the next step is to install the necessary node modules, i.e. packages,
    into our application so that we are ready to start building the application. We
    can do that by running the below command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的一步是将必要的 Node 模块，即包，安装到我们的应用中，以便我们可以开始构建应用。我们可以通过运行以下命令来完成：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We install these four packages and also use `--save` to add these packages to
    the `package.json` file. It makes it easier for someone cloning the repository
    to install all the required packages by just running `npm install` command once.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们安装这四个包，并使用`--save`将这些包添加到`package.json`文件中。这使得克隆仓库的人只需运行一次`npm install`命令即可轻松安装所有所需的包。
- en: 'We also want to use the nodemon package in our application to help us automatically
    refresh and reload the server when it detects changes in the code so that we do
    not have to manually keep restarting the server again and again after each change.
    So, we will add it as a development dependency since it will only be used for
    help in the development, and we will not use it directly in the code. We can install
    it by using the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望在应用程序中使用nodemon包，以帮助我们在检测到代码更改时自动刷新和重新加载服务器，这样我们就不需要在每次更改后手动重新启动服务器。因此，我们将其添加为开发依赖项，因为它只用于开发中的帮助，我们不会直接在代码中使用它。我们可以使用以下命令安装它：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We now have all the necessary packages to start our development work. As we
    can see in the `package.json` file, there would be all the modules and packages
    we installed, along with a few details about the application. The `package.json`
    file would look like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们拥有了开始开发所需的所有包。正如我们在`package.json`文件中看到的，里面列出了我们安装的所有模块和包，以及一些关于应用程序的细节。`package.json`文件应如下所示：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So, as we can see, `index.js` is written in the `main`, signifying that the
    `index.js` file is the entry point for our application. If you remember, it was
    asked during the setup process when we ran the `npm init` command. If you would
    have left it to default, you would have the same entry point; otherwise, you would
    have the one you defined at that time.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如我们所见，`index.js`是写在`main`中，表示`index.js`文件是我们应用程序的入口点。如果你还记得，这在我们运行`npm init`命令时的设置过程中有所要求。如果你将其留作默认设置，你将拥有相同的入口点；否则，你将拥有当时定义的入口点。
- en: Now, we will create a new file named `index.js`. You may name the file as you
    wish according to the entry point defined by you. We are considering `index.js`
    for the same.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个名为`index.js`的新文件。你可以根据自己定义的入口点命名文件。我们考虑使用`index.js`。
- en: index.js
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: index.js
- en: 'So, we will now start building the `index.js` file. We will start by importing
    the required modules into our application. For the index file, we require `express`
    and `cors`. So, we start by requiring these two modules:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们现在将开始构建`index.js`文件。我们将从将所需模块导入到我们的应用程序开始。对于索引文件，我们需要`express`和`cors`。因此，我们首先需要这两个模块：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next, we will create a new instance of the `express` application. Also, we will
    be setting up our application to use cors, handle json data and make the `public`
    folder contain the static files, which can then be accessed by the client side
    or the frontend.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个新的`express`应用程序实例。同时，我们将设置应用程序以使用cors，处理json数据，并使`public`文件夹包含静态文件，这些文件可以由客户端或前端访问。
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, we would like to have a separate file where we would define the APIs.
    We would be creating a folder named `routes` and inside of that, we will have
    a file named `api.js` where will be defining the GET and POST APIs needed in the
    application. To inform the application about this, we would add this line of code
    where we define the base URL and the file’s location where all APIs would be defined.
    It is a middleware that helps us set the routing for the application.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们希望有一个单独的文件来定义API。我们将创建一个名为`routes`的文件夹，并在其中创建一个名为`api.js`的文件，在该文件中定义应用程序所需的GET和POST
    API。为了让应用程序知道这一点，我们将添加这一行代码，以定义基本URL和所有API定义文件的位置。这是一个中间件，帮助我们设置应用程序的路由。
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next, we use an error-handling middleware function which will be used to handle
    any error occurring in the application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用一个错误处理的中间件函数，该函数将用于处理应用程序中发生的任何错误。
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Finally, we set up the application to listen for incoming requests on a specified
    port number, which we can either set by using environment variables or simply
    define.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们设置应用程序以监听指定端口号的传入请求，我们可以通过使用环境变量来设置，或者直接定义。
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We have used port 4000 for our application. We also have a simple `console.log`
    inside of it, which prints a message which logs to the console when the application
    is ready to receive requests.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为我们的应用程序使用了4000端口。我们还在其中添加了一个简单的`console.log`，当应用程序准备好接收请求时，它会在控制台上打印一条消息。
- en: 'The complete `index.js` file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`index.js`文件：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Next, we will be moving to the `api.js` file, which we created inside of the
    `routes` folder.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将转到`api.js`文件，该文件位于`routes`文件夹内。
- en: api.js
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: api.js
- en: So, we will now start building the `api.js` file. We will start this by importing
    the required modules into the file. We will be importing `express`, `multer` and
    `openai` libraries.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们现在将开始构建`api.js`文件。我们将通过将所需模块导入文件来开始。我们将导入`express`、`multer`和`openai`库。
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[Multer](https://www.npmjs.com/package/multer) is a middleware which we are
    using to handle `multipart/form-data`, as we would be dealing with the upload
    of audio files.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[Multer](https://www.npmjs.com/package/multer) 是一个中间件，我们使用它来处理 `multipart/form-data`，因为我们将处理音频文件的上传。'
- en: From `openai`, we require the `Configuration` and the `OpenAIApi` modules that
    we would use to post API requests to the Whisper model.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `openai` 中，我们需要 `Configuration` 和 `OpenAIApi` 模块，用于向 Whisper 模型发送 API 请求。
- en: We will then set up the express router and create an instance of the multer
    middleware.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将设置 express 路由器，并创建一个 multer 中间件的实例。
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Next, we will configure OpenAI and create a new configuration instance. We require
    an OpenAI Secret Key, which we must put here as the API key. You can get the secret
    key from [here](https://platform.openai.com/account/api-keys).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将配置 OpenAI 并创建一个新的配置实例。我们需要一个 OpenAI 密钥，我们必须在这里将其作为 API 密钥。你可以从 [这里](https://platform.openai.com/account/api-keys)
    获取密钥。
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, we create an async function which accepts a buffer containing the song
    data and returns the response received from the OpenAI’s Whisper model when we
    call its API.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们创建一个异步函数，该函数接受一个包含歌曲数据的缓冲区，并返回当我们调用 OpenAI 的 Whisper 模型 API 时收到的响应。
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see above, we first create a new instance of the OpenAI class by
    using the configuration we defined earlier in our code. We then call the `createTranscription`
    function of OpenAI, and we use `await` keyword in this so that we wait for the
    response first before moving ahead.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，我们首先通过使用在代码中之前定义的配置创建 OpenAI 类的新实例。然后我们调用 OpenAI 的 `createTranscription`
    函数，并在其中使用 `await` 关键字，以便我们在继续之前等待响应。
- en: We pass the required parameters in the function, which consist of the buffer
    which contains the song data, and the model to use for the transcription, which
    is `whisper-1` in our case. We then leave the prompt undefined. You can give a
    prompt, too, if you like, which would help the model to better transcribe the
    audio by having a similar style to the prompt you provided. We define the data
    type we receive as `json`, set the temperature to 1 and define the language in
    which we want the output.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在函数中传递所需的参数，其中包括包含歌曲数据的缓冲区，以及用于转录的模型，在我们的情况下是 `whisper-1`。然后我们将 prompt 留空。如果愿意，你也可以提供一个
    prompt，这将帮助模型通过提供与 prompt 类似的风格来更好地转录音频。我们将接收的数据类型定义为 `json`，将温度设置为 1，并定义我们希望输出的语言。
- en: Next, we would define the GET request. We use `sendFile` to send an HTML file
    which contains our form where users can upload the audio files. We will be building
    the HTML files later. We are serving it on the base URL.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将定义 GET 请求。我们使用 `sendFile` 发送一个包含我们表单的 HTML 文件，用户可以在其中上传音频文件。我们稍后将构建这些
    HTML 文件。我们将它提供在基本 URL 上。
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Next, we define the POST request, which will handle the upload of audio files.
    We use the multer middleware to manage the file upload part. We then create a
    buffer from the audio file, which would contain the audio file's data in a format
    that can be sent to the OpenAI API. We then set a name to the buffer using the
    original name of the uploaded audio file.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义 POST 请求，它将处理音频文件的上传。我们使用 multer 中间件来管理文件上传部分。然后我们从音频文件创建一个缓冲区，该缓冲区将包含可以发送到
    OpenAI API 的音频文件数据。我们使用上传音频文件的原始名称为缓冲区设置一个名称。
- en: We then call the `transcribe` function, and once we get the response, we send
    a JSON back to the client. We send the transcription and the audio file name back
    to the frontend. We also have a catch method to handle any errors.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们调用 `transcribe` 函数，一旦获得响应，我们将 JSON 数据发送回客户端。我们将转录文本和音频文件名返回到前端。我们还有一个 catch
    方法来处理任何错误。
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Finally, we export the `router` modules, which would then allow other files
    to import them.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们导出 `router` 模块，这样其他文件就可以导入它们。
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'So, the complete code for the `api.js` file:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，`api.js` 文件的完整代码是：
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, we have completed all the backend parts. We will now be writing the HTML
    files and writing some frontend javascript code to handle form submissions and
    data saving in [local storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage)
    and retrieving data from local storage.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经完成了所有的后端部分。接下来我们将编写 HTML 文件和一些前端 JavaScript 代码，以处理表单提交和数据保存在 [本地存储](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage)
    以及从本地存储中检索数据。
- en: We create a `public` folder, inside of which we will create two HTML files —
    `index.html` and `transcribe.html`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个 `public` 文件夹，在其中我们将创建两个 HTML 文件——`index.html` 和 `transcribe.html`。
- en: 'We will start with the `index.html` file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 `index.html` 文件开始：
- en: index.html
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: index.html
- en: So, in this file, we will be building the page where we display the form to
    upload an audio file. We will be using Bootstrap CSS so that we will import it
    through CDN. We also include Bootstrap JS through CDN at the end of the HTML file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，我们将构建一个页面，展示上传音频文件的表单。我们将使用Bootstrap CSS，通过CDN引入它。我们还在HTML文件的末尾通过CDN引入Bootstrap
    JS。
- en: We then create a simple card where I ask the user to upload the audio file.
    I make sure that the file being submitted is in `.mp3` format as it is the only
    format accepted by OpenAI’s API. We display a button which, on clicking, submits
    the form.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建了一个简单的卡片，要求用户上传音频文件。我确保提交的文件格式为`.mp3`，因为这是OpenAI的API唯一接受的格式。我们显示一个按钮，点击后提交表单。
- en: We then have the javascript code, which we use to handle the form submission.
    So, at first, we stop the page from refreshing by preventing the default behaviour
    of the form submission event. We then take in the form data, i.e. the audio file
    and send it as a POST request to the backend. We then wait for a response and
    store it in a data variable.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有了处理表单提交的JavaScript代码。所以，首先，我们通过阻止表单提交事件的默认行为来停止页面刷新。然后，我们获取表单数据，即音频文件，并将其作为POST请求发送到后台。接着，我们等待响应并将其存储在数据变量中。
- en: If the data has the transcription available, we store the transcription and
    the audio file name in Local Storage so that we can access them on the next page
    where we need to show the transcript. There are multiple ways to pass information
    like we could have passed the information through URIs, but here we are using
    Local Storage to do so.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据中有可用的转录文本，我们将转录文本和音频文件名存储在本地存储中，以便在需要显示转录文本的下一页访问它们。虽然有多种方法可以传递信息，比如通过URI传递信息，但在这里我们使用本地存储来实现。
- en: After saving the data to local storage, we change the window location to load
    the `transcribe.html` file.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 保存数据到本地存储后，我们更改窗口位置以加载`transcribe.html`文件。
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: So, the above code builds the `index.html` file, which will display the form
    to the user where the user can upload the audio file.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所以上述代码构建了`index.html`文件，该文件将向用户显示一个表单，用户可以通过这个表单上传音频文件。
- en: 'Here is one screenshot of how that looks:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是其中一个截图的效果：
- en: '![](../Images/fe9588bef9851c77d208fb289b8ef707.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fe9588bef9851c77d208fb289b8ef707.png)'
- en: Audio Upload page — index.html
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 音频上传页面 — index.html
- en: Next, we will build the `transcribe.html` file.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将构建`transcribe.html`文件。
- en: transcribe.html
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: transcribe.html
- en: So, in this file, we will display the transcript of the audio file uploaded
    by the user. So, we will again be using Bootstrap CSS and JS so that we will include
    those via CDN.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，我们将显示用户上传的音频文件的转录文本。因此，我们将再次使用Bootstrap CSS和JS，通过CDN引入这些资源。
- en: We then define some custom CSS to stylize the elements to make them look better.
    We then display the audio file name and the transcription of that audio file in
    a container.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们定义了一些自定义CSS来美化元素，使其看起来更好。我们在一个容器中显示音频文件名和该音频文件的转录文本。
- en: In the javascript code at the bottom of this page, we get the audio file name
    and the transcript from the local storage and push that data to the respective
    HTML elements using the ids.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在此页面底部的JavaScript代码中，我们从本地存储中获取音频文件名和转录文本，并使用id将这些数据推送到相应的HTML元素中。
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: I have tried transcribing two different small audio files which I recorded personally
    — one in English and the other in Hindi. Though the second audio file was recorded
    in Hindi, I wanted to see the output in English, thus testing its translational
    abilities too. It was highly accurate in transcribing both of the audio files.
    Though, in multiple runs, sometimes it produces a vague transcription which is
    not correct, but many times, transcriptions are mostly correct.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我尝试了两个不同的小音频文件，一个是英语录制的，另一个是印地语录制的。虽然第二个音频文件是用印地语录制的，但我希望看到英语的输出，从而测试其翻译能力。它在转录两个音频文件时都非常准确。不过，在多次运行中，有时会产生不正确的模糊转录，但许多时候，转录结果大多是正确的。
- en: I am attaching the transcription screenshots below. Those are not entirely correct,
    but I would say it is about 85–90% correct in transcribing what I actually recorded
    in the audio files.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我在下面附上了转录的屏幕截图。这些截图并不完全正确，但我认为它们的转录准确率大约为85%–90%。
- en: '![](../Images/1fc8ef9508130d82958cf9365446c051.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1fc8ef9508130d82958cf9365446c051.png)'
- en: Transcription for an English Audio file
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 英语音频文件的转录
- en: '![](../Images/f25f5333a3939b203c03e921e5998e40.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f25f5333a3939b203c03e921e5998e40.png)'
- en: Transcription in English for a Hindi audio file
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 印地语音频文件的英语转录
- en: So, we have successfully built a speech-to-text web app using OpenAI’s API and
    Node.js. I hope you enjoyed building it and learnt something new from this article.
    You can also then alter the parameters to play around with it and compare the
    results to get a better idea of what works well in what scenario.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经成功使用 OpenAI 的 API 和 Node.js 构建了一个语音转文本的 Web 应用程序。希望你喜欢构建这个应用，并从这篇文章中学到了一些新东西。你还可以调整参数进行实验，并比较结果，以更好地了解在不同场景下什么效果更好。
- en: 'Thank you for reading the article. Some more articles you must read after this
    one are:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读本文。接下来你必须阅读的一些文章包括：
- en: '[](https://javascript.plainenglish.io/build-a-simple-todo-app-using-next-js-f88b68761e27?source=post_page-----210f8c054d79--------------------------------)
    [## Build a Simple Todo App using Next.js'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://javascript.plainenglish.io/build-a-simple-todo-app-using-next-js-f88b68761e27?source=post_page-----210f8c054d79--------------------------------)
    [## 使用 Next.js 构建一个简单的 Todo 应用'
- en: Let’s build a simple Todo App with Next.js, which teaches you the basic principles
    of CRUD (Create, Read, Update and…
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让我们使用 Next.js 构建一个简单的 Todo 应用，这将教会你 CRUD（创建、读取、更新和...
- en: javascript.plainenglish.io](https://javascript.plainenglish.io/build-a-simple-todo-app-using-next-js-f88b68761e27?source=post_page-----210f8c054d79--------------------------------)
    [](https://medium.com/geekculture/how-to-implement-multiple-user-types-in-django-b72df7a98dc3?source=post_page-----210f8c054d79--------------------------------)
    [## How to Implement Multiple User Types in Django
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何使用 Next.js 构建一个简单的 Todo 应用](https://javascript.plainenglish.io/build-a-simple-todo-app-using-next-js-f88b68761e27?source=post_page-----210f8c054d79--------------------------------)
    [](https://medium.com/geekculture/how-to-implement-multiple-user-types-in-django-b72df7a98dc3?source=post_page-----210f8c054d79--------------------------------)
    [## 如何在 Django 中实现多用户类型'
- en: Learn how to implement multiple user types in Django, handle authentication,
    and reroute based on user types.
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学习如何在 Django 中实现多用户类型，处理认证，并根据用户类型进行重定向。
- en: medium.com](https://medium.com/geekculture/how-to-implement-multiple-user-types-in-django-b72df7a98dc3?source=post_page-----210f8c054d79--------------------------------)
    [](/build-a-simple-todo-app-using-react-a492adc9c8a4?source=post_page-----210f8c054d79--------------------------------)
    [## Build a Simple Todo App using React
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何在 Django 中实现多用户类型](https://medium.com/geekculture/how-to-implement-multiple-user-types-in-django-b72df7a98dc3?source=post_page-----210f8c054d79--------------------------------)
    [](/build-a-simple-todo-app-using-react-a492adc9c8a4?source=post_page-----210f8c054d79--------------------------------)
    [## 使用 React 构建一个简单的 Todo 应用'
- en: Let’s build a simple Todo App with React which teaches you the basic principles
    of CRUD (Create, Read, Update and…
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让我们使用 React 构建一个简单的 Todo 应用，这将教会你 CRUD（创建、读取、更新和...
- en: towardsdatascience.com](/build-a-simple-todo-app-using-react-a492adc9c8a4?source=post_page-----210f8c054d79--------------------------------)
    [](/build-a-social-media-website-using-django-setup-the-project-part-1-6e1932c9f221?source=post_page-----210f8c054d79--------------------------------)
    [## Build a Social Media Website Using Django — Setup the Project (Part 1)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 React 构建一个简单的 Todo 应用](https://towardsdatascience.com/build-a-simple-todo-app-using-react-a492adc9c8a4?source=post_page-----210f8c054d79--------------------------------)
    [](/build-a-social-media-website-using-django-setup-the-project-part-1-6e1932c9f221?source=post_page-----210f8c054d79--------------------------------)
    [## 使用 Django 构建一个社交媒体网站 — 项目设置（第 1 部分）'
- en: In the first part, we focus on setting up our project and installing the required
    components by setting up the password…
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在第一部分中，我们专注于设置项目和安装所需组件，通过设置密码...
- en: towardsdatascience.com](/build-a-social-media-website-using-django-setup-the-project-part-1-6e1932c9f221?source=post_page-----210f8c054d79--------------------------------)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[构建一个社交媒体网站使用 Django — 项目设置（第 1 部分）](https://towardsdatascience.com/build-a-social-media-website-using-django-setup-the-project-part-1-6e1932c9f221?source=post_page-----210f8c054d79--------------------------------)'
