- en: 'Build a Rest API with Go: Data Analytics for Time Series'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 Go 构建 REST API：时间序列的数据分析
- en: 原文：[https://towardsdatascience.com/build-a-rest-api-with-go-data-analytics-for-time-series-8d3f0747665c](https://towardsdatascience.com/build-a-rest-api-with-go-data-analytics-for-time-series-8d3f0747665c)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/build-a-rest-api-with-go-data-analytics-for-time-series-8d3f0747665c](https://towardsdatascience.com/build-a-rest-api-with-go-data-analytics-for-time-series-8d3f0747665c)
- en: A step-by-step example of CRUD operations and statistical analysis with Go,
    Gin, and Gorm.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个关于使用 Go、Gin 和 Gorm 进行 CRUD 操作和统计分析的逐步示例。
- en: '[](https://medium.com/@davide.burba?source=post_page-----8d3f0747665c--------------------------------)[![Davide
    Burba](../Images/a1ca3cf59c2b933021fa0d978e1af522.png)](https://medium.com/@davide.burba?source=post_page-----8d3f0747665c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8d3f0747665c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8d3f0747665c--------------------------------)
    [Davide Burba](https://medium.com/@davide.burba?source=post_page-----8d3f0747665c--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@davide.burba?source=post_page-----8d3f0747665c--------------------------------)[![Davide
    Burba](../Images/a1ca3cf59c2b933021fa0d978e1af522.png)](https://medium.com/@davide.burba?source=post_page-----8d3f0747665c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8d3f0747665c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8d3f0747665c--------------------------------)
    [Davide Burba](https://medium.com/@davide.burba?source=post_page-----8d3f0747665c--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8d3f0747665c--------------------------------)
    ·10 min read·Nov 7, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8d3f0747665c--------------------------------)
    ·阅读时间 10 分钟·2023 年 11 月 7 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/a6e61301baab7f2a0bed1c777ea8da26.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a6e61301baab7f2a0bed1c777ea8da26.png)'
- en: “Learning Go”, by [Giulia Roggia](https://www.instagram.com/giulia_roggia__/).
    Used with permission.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: “学习 Go”，作者 [Giulia Roggia](https://www.instagram.com/giulia_roggia__/)。经许可使用。
- en: '[Introduction](#23c9)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[介绍](#23c9)'
- en: '[Models & Database](#4f5c)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[模型与数据库](#4f5c)'
- en: '[Statistics](#810b)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[统计](#810b)'
- en: '[Handlers](#1043)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[处理程序](#1043)'
- en: '[Usage](#380a)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用法](#380a)'
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This article illustrates an example of a REST API built in Go to perform CRUD
    (Create, Read, Update, Delete) operations and compute statistics on time-series
    data.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本文介绍了一个使用 Go 构建的 REST API 示例，用于执行 CRUD（创建、读取、更新、删除）操作并计算时间序列数据的统计信息。
- en: '*The full code used in this article is available* [*here*](https://github.com/davide-burba/code-collection/)*.*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*本文中使用的完整代码可以在* [*这里*](https://github.com/davide-burba/code-collection/)*找到*。'
- en: '*Why Go?*'
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*为什么选择 Go？*'
- en: '[Go](https://go.dev/) is a common choice to build a REST API for several reasons.
    Even though it’s an efficient compiled language, its syntax is simple and readable.
    It makes it easy to implement concurrent processing. It provides a feature-rich
    standard library and has a great ecosystem of libraries and tools.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[Go](https://go.dev/) 是构建 REST API 的常见选择，原因有很多。尽管它是高效的编译语言，但其语法简单且可读性强。它使得实现并发处理变得容易。它提供了功能丰富的标准库，并且拥有一个出色的库和工具生态系统。'
- en: 'In this example, we use two popular Go libraries:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了两个流行的 Go 库：
- en: '[Gin](https://gin-gonic.com/): a web framework providing tools to create web
    applications.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Gin](https://gin-gonic.com/): 一个提供创建 Web 应用工具的 Web 框架。'
- en: '[Gorm](https://gorm.io/): a full-featured ORM (Object-Relational Mapping) to
    interact with databases.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Gorm](https://gorm.io/): 一个功能全面的 ORM（对象关系映射），用于与数据库交互。'
- en: Folder structure
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件夹结构
- en: 'We create one folder for each “service”. In Go, each folder corresponds to
    a package, and each file has access to the elements defined in other files in
    the same package. Here is the folder structure used in the project:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为每个“服务”创建一个文件夹。在 Go 中，每个文件夹对应一个包，每个文件都可以访问同一包中其他文件定义的元素。以下是项目中使用的文件夹结构：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Models & Database
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型与数据库
- en: Let’s start by defining the ORM models in *models.go* to represent time series
    data. We use two models, one to identify the series and one to store its values.
    Each value is linked to a time series via a foreign key.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先在 *models.go* 中定义 ORM 模型，以表示时间序列数据。我们使用了两个模型，一个用于标识序列，另一个用于存储其值。每个值通过外键与时间序列相关联。
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We also define two getters for time series values that will come in handy when
    computing statistics.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还定义了两个用于时间序列值的 getter，这在计算统计数据时将非常有用。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In *database.go* we define a function to get a database (we use *SQLite* in
    the example) and to apply the migrations for creating an SQL table for each model
    (if not already there).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在*database.go*中，我们定义了一个获取数据库的函数（在示例中使用*SQLite*），并应用迁移以创建每个模型的SQL表（如果尚不存在）。
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Statistics
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 统计量
- en: 'Note: If you are only interested in the CRUD part, you can skip this section.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：如果你只对CRUD部分感兴趣，可以跳过这一部分。
- en: 'Since the computation of statistics is a common task, to promote code reusability
    we develop it as an “independent” package, which means that it does not depend
    on the other packages defined in the project. To achieve that, we define a `TsValue`
    interface: the statistic functions take as input a slice of values, where each
    value must define the interface methods `GetTime` and `GetValue`.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于统计量的计算是一个常见任务，为了提高代码的可重用性，我们将其开发为一个“独立”包，这意味着它不依赖于项目中定义的其他包。为此，我们定义一个`TsValue`接口：统计函数的输入是一个值的切片，每个值必须定义接口方法`GetTime`和`GetValue`。
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now we define one function for each statistic:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们为每个统计量定义一个函数：
- en: '`Count`: length of the series'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Count`：系列的长度。'
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`Min`: minimum value (and `Max`, which is analogous)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Min`：最小值（以及`Max`，其功能类似）。'
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`Mean`: mean of the series'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mean`：系列的均值。'
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`StandardDeviation`: standard deviation of the series'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StandardDeviation`：系列的标准差。'
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can put the statistics together in one function:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将统计量集中在一个函数中：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that the function `ComputeStatistics` computes the statistics sequentially.
    If the number of values in each series is large, it could become time-consuming.
    If so, we could use goroutines to compute statistics concurrently.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，函数`ComputeStatistics`是顺序计算统计量的。如果每个系列中的值很多，这可能会变得耗时。如果是这样，我们可以使用goroutines并发计算统计量。
- en: 'Let us define a concurrent version `ComputeStatisticsConcurrent`, which performs
    the following steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个并发版本`ComputeStatisticsConcurrent`，其执行以下步骤：
- en: Create a channel to collect results, a waiting mechanism to sync goroutines,
    and a map with the statistics to compute.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个通道来收集结果，一个同步goroutines的等待机制，以及一个包含要计算的统计量的映射。
- en: Set a counter for the number of statistics to compute.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个计数器来计算要计算的统计量数量。
- en: Launch a goroutine for each statistic function.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个统计函数启动一个goroutine。
- en: Set a special goroutine to close the channel once all the statistics are computed
    (i.e. the counter reaches zero)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个特殊的goroutine，以便在所有统计量计算完成后（即计数器归零时）关闭通道。
- en: Collect the result from the channel. The collection stops when the channel gets
    closed.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从通道中收集结果。收集在通道关闭时停止。
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Note**: if you want to test the performance improvement without using large
    data, you can run a simulation with `time.Sleep` inside each statistic function.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：如果你想在不使用大数据的情况下测试性能提升，可以在每个统计函数内部运行`time.Sleep`进行模拟。'
- en: Handlers
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理程序
- en: 'Let us now define the endpoints for the REST API. Since:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们定义REST API的端点。因为：
- en: the endpoint logic depends on the database
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端点逻辑依赖于数据库。
- en: we don’t want to use global variables
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不想使用全局变量。
- en: the endpoint functions must take as input only a pointer to the Gin context,
    which holds the request information
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端点函数必须只接受Gin上下文指针作为输入，该指针包含请求信息。
- en: 'we create a database wrapper to assign it the endpoint methods:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个数据库包装器，并将端点方法分配给它：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We define a function to set all the endpoints. Each endpoint specifies a path,
    and a function taking as input a pointer to the Gin context.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义一个函数来设置所有端点。每个端点指定一个路径，并指定一个接受Gin上下文指针的函数。
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Handlers: Series'
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理程序：系列
- en: Let’s start by defining the time-series endpoints. Here is the implementation
    to list all the available time series. The time series are stored in the `tseriesList`
    slice when calling `DB.Find`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从定义时间序列端点开始。下面是列出所有可用时间序列的实现。当调用`DB.Find`时，时间序列存储在`tseriesList`切片中。
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Before developing the base CRUD endpoints for `TimeSeries`, let’s define a helper
    function to get a series ID from a request and perform some checks.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发`TimeSeries`的基础CRUD端点之前，让我们定义一个辅助函数来从请求中获取系列ID并执行一些检查。
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can now define the basic CRUD operations for `TimeSeries`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以定义`TimeSeries`的基本CRUD操作：
- en: '*Create*: POST a new series.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建*：POST一个新的系列。'
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Read*: GET an existing series.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*读取*：GET一个现有系列。'
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Update*: PUT an existing series.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*更新*：PUT一个现有系列。'
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '*Delete:* DELETE a series and its values. To roll back in case of a run-time
    error, we perform the two operations in a database transaction.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*删除*：删除一个系列及其值。为了在运行时出现错误时进行回滚，我们在数据库事务中执行这两个操作。'
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Handlers: Values'
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理程序：值
- en: We can now define the endpoints for `TimeSeriesValues`. Since they are similar
    to the ones we just defined, we only show the implementation of the *Create* method,
    which differs from the series one since we allow to post multiple values at the
    same time.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以定义 `TimeSeriesValues` 的端点。由于它们与我们刚刚定义的端点类似，我们仅展示 *Create* 方法的实现，它与系列方法不同，因为我们允许同时发布多个值。
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Handlers: Statistics'
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理程序：统计信息
- en: The last handler we need to define is to compute statistics for a given series.
    Given its ID, we query the values and compute the statistics with the `ComputeStatisticsConcurrent`
    function implemented before.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要定义的最后一个处理程序是计算给定系列的统计信息。根据其 ID，我们查询值并使用之前实现的 `ComputeStatisticsConcurrent`
    函数计算统计信息。
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Before returning the statistics, we apply the `serializeMap` function to the
    output. This is done to transform *NaN* values into *nil*, to make the output
    json-serializable. Note that the type of the output values in the map is the empty
    interface `interface{}`, which can hold values of any type.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在返回统计信息之前，我们将 `serializeMap` 函数应用于输出。这是为了将 *NaN* 值转换为 *nil*，以便使输出可以进行 JSON 序列化。注意，映射中的输出值类型是空接口
    `interface{}`，它可以容纳任何类型的值。
- en: '[PRE21]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Usage
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用方法
- en: 'The last piece of code we need to make the app usable is the `main` function
    to run the web server. We provide three optional command line arguments:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使应用程序可用的最后一段代码是 `main` 函数，用于运行 Web 服务器。我们提供了三个可选的命令行参数：
- en: '`db`: Specifies the name of the database file (default: `timeseries.db`)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db`：指定数据库文件的名称（默认：`timeseries.db`）'
- en: '`proxy`: Sets the trusted proxy for the server (default: `127.0.0.1`)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`proxy`：设置服务器的受信任代理（默认：`127.0.0.1`）'
- en: '`port`: Defines the port number for the server to listen on (default: `8080`)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port`：定义服务器监听的端口号（默认：`8080`）'
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Build
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建
- en: 'You can now run the API by:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以通过以下方式运行 API：
- en: Initializing a new Go module with `go mod init`. This will generate a *go.mod*
    file with the module name and the go version.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `go mod init` 初始化一个新的 Go 模块。这将生成一个带有模块名称和 Go 版本的 *go.mod* 文件。
- en: Keeping track of the dependencies with `go mod tidy`. This will add the project
    dependencies to the *go.mod* file, and create a *go.sum* file with the checksums
    for all the dependencies (used to ensure their integrity).
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `go mod tidy` 跟踪依赖项。这将把项目依赖项添加到 *go.mod* 文件中，并创建一个包含所有依赖项校验和的 *go.sum* 文件（用于确保其完整性）。
- en: Building the program with `go build` and running the generated executable. This
    can also be done in one step with `go run main.go`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `go build` 构建程序并运行生成的可执行文件。这也可以通过 `go run main.go` 一步完成。
- en: The *go.mod* and *go.sum* files are already provided in the [project repository](https://github.com/davide-burba/code-collection/tree/main/examples/go-timeseries-api).
    You can read more about `go` commands [here](https://pkg.go.dev/cmd/go).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*go.mod* 和 *go.sum* 文件已在 [项目仓库](https://github.com/davide-burba/code-collection/tree/main/examples/go-timeseries-api)
    中提供。你可以在 [这里](https://pkg.go.dev/cmd/go) 阅读更多关于 `go` 命令的信息。'
- en: We can also run the API with Docker. In the *Dockerfile* shown below, first,
    we build the executable with a Go official image, and later we copy it on a minimal
    image, which results in a tiny ~20Mb output.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 Docker 运行 API。在下面显示的 *Dockerfile* 中，首先，我们使用 Go 官方镜像构建可执行文件，然后将其复制到一个最小的镜像中，这样得到一个约
    20Mb 的小文件。
- en: '[PRE23]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can build and execute the API with Docker as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照以下步骤使用 Docker 构建和执行 API：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Example Usage
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例用法
- en: Once the application is up and running, we can test it by doing API calls. Here
    below we show an example of usage with `curl`. We create a time series, post its
    values, compute the statistics, and finally delete it.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序启动并运行后，我们可以通过 API 调用来测试它。下面我们展示了一个使用 `curl` 的示例。我们创建一个时间序列，发布其值，计算统计信息，最后删除它。
- en: '[PRE25]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: A note on learning Go
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于学习 Go 的说明
- en: This was my first project in Go. Therefore, if you have any sort of feedback
    it would be very appreciated!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在 Go 中的第一个项目。因此，如果你有任何反馈，我将非常感激！
- en: 'Coming from a Python background, I especially enjoyed Go speed and lightness
    and found it way easier to learn than C++. Here are some resources that helped
    me get started:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我来自 Python 背景，我特别喜欢 Go 的速度和轻量性，并发现它比 C++ 学起来容易多了。以下是一些帮助我入门的资源：
- en: '[Official Go Tutorials](https://go.dev/doc/tutorial/)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[官方 Go 教程](https://go.dev/doc/tutorial/)'
- en: '[A Tour of Go](https://go.dev/tour/basics/1): an interactive introduction to
    Go, also official'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Go 之旅](https://go.dev/tour/basics/1)：对 Go 的互动式介绍，也是官方的'
- en: '[Developing a simple CRUD API with Go, Gin and Gorm](https://cgrant.medium.com/developing-a-simple-crud-api-with-go-gin-and-gorm-df87d98e6ed1)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Go、Gin 和 Gorm 开发简单的 CRUD API](https://cgrant.medium.com/developing-a-simple-crud-api-with-go-gin-and-gorm-df87d98e6ed1)'
- en: '[Finding The Best Go Project Structure](https://itnext.io/finding-the-best-go-project-structure-part-1-5290bc1d869d)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[寻找最佳 Go 项目结构](https://itnext.io/finding-the-best-go-project-structure-part-1-5290bc1d869d)'
- en: '*The full code used in this article is available* [*here*](https://github.com/davide-burba/code-collection/)*.*'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*本文中使用的完整代码可以在* [*这里*](https://github.com/davide-burba/code-collection/) *找到。*'
- en: '*Enjoyed this article?* [*Check out my other ones*](https://medium.com/@davide.burba)
    *and follow me for more!* [*Click here*](https://medium.com/@davide.burba/membership)
    *to read unlimited articles and support me at no additional cost for you* ❤️'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*喜欢这篇文章吗？* [*查看我的其他文章*](https://medium.com/@davide.burba) *并关注我以获取更多内容！* [*点击这里*](https://medium.com/@davide.burba/membership)
    *以无限阅读文章并以零额外费用支持我* ❤️'
