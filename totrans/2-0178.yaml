- en: A Comprehensive Guide to Building Enterprise-Level Plotly Dash Apps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建企业级 Plotly Dash 应用程序的全面指南
- en: 原文：[https://towardsdatascience.com/a-comprehensive-guide-to-building-enterprise-level-plotly-dash-apps-bd40dfe1313c](https://towardsdatascience.com/a-comprehensive-guide-to-building-enterprise-level-plotly-dash-apps-bd40dfe1313c)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-comprehensive-guide-to-building-enterprise-level-plotly-dash-apps-bd40dfe1313c](https://towardsdatascience.com/a-comprehensive-guide-to-building-enterprise-level-plotly-dash-apps-bd40dfe1313c)
- en: Production ready web apps with pure Python and Docker
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用纯 Python 和 Docker 构建生产就绪的 web 应用程序
- en: '[](https://tinztwinspro.medium.com/?source=post_page-----bd40dfe1313c--------------------------------)[![Janik
    and Patrick Tinz](../Images/a08aa54f553f606ef5df86f9411c36ac.png)](https://tinztwinspro.medium.com/?source=post_page-----bd40dfe1313c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bd40dfe1313c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bd40dfe1313c--------------------------------)
    [Janik and Patrick Tinz](https://tinztwinspro.medium.com/?source=post_page-----bd40dfe1313c--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://tinztwinspro.medium.com/?source=post_page-----bd40dfe1313c--------------------------------)[![Janik
    和 Patrick Tinz](../Images/a08aa54f553f606ef5df86f9411c36ac.png)](https://tinztwinspro.medium.com/?source=post_page-----bd40dfe1313c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bd40dfe1313c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bd40dfe1313c--------------------------------)
    [Janik 和 Patrick Tinz](https://tinztwinspro.medium.com/?source=post_page-----bd40dfe1313c--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bd40dfe1313c--------------------------------)
    ·10 min read·May 15, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bd40dfe1313c--------------------------------)
    ·阅读时间 10 分钟·2023年5月15日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/7de17ef1cc6ad4e71a3adb156a7deaa1.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7de17ef1cc6ad4e71a3adb156a7deaa1.png)'
- en: Photo by [Scott Graham](https://unsplash.com/@homajob?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Scott Graham](https://unsplash.com/@homajob?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Data Science projects always need some kind of visualisation. For the initial
    analysis, data scientists usually use Jupyter Notebooks and libraries like matplotlib
    or seaborn. In exploratory data analysis, data scientists use histograms, and
    scatter plots or make statistical evaluations. For the first insights, this approach
    is very well suited. However, interactive dashboards are more appropriate for
    presenting the results. Many clients want exactly that! Interactive dashboards
    are a proven approach to explaining results in an understandable and comprehensible
    way.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学项目总是需要某种形式的可视化。对于初步分析，数据科学家通常使用 Jupyter Notebooks 和像 matplotlib 或 seaborn
    这样的库。在探索性数据分析中，数据科学家使用直方图、散点图或进行统计评估。对于初步见解，这种方法非常合适。然而，交互式仪表板更适合呈现结果。许多客户正是需要这种功能！交互式仪表板是以易于理解的方式解释结果的有效方法。
- en: But creating an interactive dashboard is not a trivial task. In our view, Plotly
    Dash is the best choice for creating impressive diagrams. For a production-ready
    dashboard application, you must consider further aspects (e.g. deployment with
    Docker).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但创建交互式仪表板并非易事。在我们看来，Plotly Dash 是创建令人印象深刻图表的最佳选择。对于生产就绪的仪表板应用程序，您必须考虑其他方面（例如使用
    Docker 部署）。
- en: In this article, we want to share our best practices for building a well structured
    dashboard application with Plotly Dash. In addition, we show how to deploy a Dash
    App cleanly with Docker. We are always open to suggestions for improvement. Please
    write your thoughts in the comments!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们想分享使用 Plotly Dash 构建结构良好的仪表板应用程序的最佳实践。此外，我们展示了如何使用 Docker 清洁地部署 Dash
    应用程序。我们始终欢迎改进建议，请在评论中写下你的想法！
- en: Why Plotly Dash?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择 Plotly Dash？
- en: '[Plotly Dash](https://dash.plotly.com/) is a productive Python Framework for
    building web-based applications. The Open Source library is licensed under the
    permissive MIT license. It is written on top of [Flask](https://flask.palletsprojects.com/en/2.2.x/),
    [Plotly.js](https://plotly.com/javascript/) and [React.js](https://react.dev/).
    You can create and deploy web apps with customised user interface (UI) in [Python](https://www.python.org/),
    [R](https://www.r-project.org/), [Julia](https://julialang.org/), and [F#](https://fsharp.org/).
    The framework abstracts the protocols and technologies needed to create a full-stack
    web app.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[Plotly Dash](https://dash.plotly.com/) 是一个用于构建基于网页应用的高效 Python 框架。这个开源库使用宽松的
    MIT 许可证。它建立在 [Flask](https://flask.palletsprojects.com/en/2.2.x/)、[Plotly.js](https://plotly.com/javascript/)
    和 [React.js](https://react.dev/) 之上。你可以用 [Python](https://www.python.org/)、[R](https://www.r-project.org/)、[Julia](https://julialang.org/)
    和 [F#](https://fsharp.org/) 创建和部署具有自定义用户界面的网页应用。该框架抽象了创建全栈网页应用所需的协议和技术。'
- en: Advantages
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优点
- en: You can implement the web interface in pure Python. No JavaScript is required!
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以用纯 Python 实现网页接口。不需要 JavaScript！
- en: Dash is reactive! You can implement complex UIs with multiple Inputs, multiple
    Outputs and Inputs that depend on other Inputs.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dash 是响应式的！你可以实现具有多个 Inputs、多个 Outputs 和依赖于其他 Inputs 的 Inputs 的复杂 UI。
- en: Dash Apps are multi-user apps. Multiple users can view a Dash App with independent
    sessions.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dash 应用是多用户应用。多个用户可以在独立会话中查看 Dash 应用。
- en: Dash is written on top of React.js. You can implement and use your own Dash
    components with React.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dash 是建立在 React.js 之上的。你可以用 React 实现并使用你自己的 Dash 组件。
- en: Dash Apps uses Flask as the backend, so you can run them using [Gunicorn](https://gunicorn.org/).
    Gunicorn allows you to scale a Dash App to thousands of users by increasing the
    number of worker processes.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dash 应用使用 Flask 作为后端，因此你可以使用 [Gunicorn](https://gunicorn.org/) 来运行它们。Gunicorn
    允许你通过增加工作进程的数量，将 Dash 应用扩展到成千上万的用户。
- en: Open Source Framework (licensed under the permissive MIT license).
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源框架（使用宽松的 MIT 许可证）。
- en: Awesome documentation and community ([Dash Community Forum](https://community.plotly.com/)
    and [GitHub](https://github.com/plotly/dash)).
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出色的文档和社区（[Dash Community Forum](https://community.plotly.com/) 和 [GitHub](https://github.com/plotly/dash)）。
- en: Disadvantages
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: Callbacks must have Inputs and Outputs.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回调函数必须有 Inputs 和 Outputs。
- en: Two callbacks can’t update the same output element.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个回调函数不能更新同一个输出元素。
- en: Each framework has disadvantages, but the disadvantages of Dash can be solved
    with workarounds. The advantages outweigh the disadvantages!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 每个框架都有缺点，但 Dash 的缺点可以通过解决方法来克服。优点大于缺点！
- en: Why Docker?
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择 Docker？
- en: You can use [Docker](https://www.docker.com/) to isolate applications. It uses
    a concept called container virtualisation. Applications can be easily deployed
    with Docker because lightweight containers contain all the necessary packages.
    Containers share the services of a single operating system kernel, so they use
    fewer resources than virtual machines.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 [Docker](https://www.docker.com/) 隔离应用程序。它使用一种称为容器虚拟化的概念。应用程序可以轻松地用 Docker
    部署，因为轻量级容器包含所有必要的包。容器共享单一操作系统内核的服务，因此它们比虚拟机使用更少的资源。
- en: Docker makes it easy to deploy a Dash App. With Docker, you can deploy the Dash
    App to all architectures (amd64, i386, arm64, arm). This approach makes you independent
    of the deployment environment (on-premise or cloud).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 使部署 Dash 应用变得简单。使用 Docker，你可以将 Dash 应用部署到所有架构（amd64、i386、arm64、arm）。这种方法使你不依赖于部署环境（本地或云）。
- en: Model View Controller Pattern
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型视图控制器模式
- en: 'Model View Controller (MVC) is a pattern for dividing software into the three
    components: *Model*, *View* and *Controller*.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 模型视图控制器（MVC）是一种将软件划分为三个组件的模式：*Model*、*View* 和 *Controller*。
- en: '![](../Images/5aabf677d5960e43d109608bf3c487bb.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5aabf677d5960e43d109608bf3c487bb.png)'
- en: Model View Controller Architecture (Image by authors)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 模型视图控制器架构（图源自作者）
- en: The model component contains the business logic. This component communicates
    with a database or other backend components. The view component displays the data.
    It should be noted that the view has no direct connection to the model. The controller
    forms the connection. The controller is responsible for data processing. The controller
    updates the view with data from one or more models.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 模型组件包含业务逻辑。这个组件与数据库或其他后端组件进行通信。视图组件展示数据。需要注意的是，视图与模型没有直接的连接。控制器形成了这种连接。控制器负责数据处理。控制器用一个或多个模型中的数据更新视图。
- en: Advantages
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优点
- en: '**Parallel development**: The individual components can be implemented by different
    developers.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并行开发**：不同的开发者可以实现各自的组件。'
- en: '**Scalability:** Multiple views for the same data model'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性：** 针对相同数据模型的多个视图'
- en: '**Avoid complexity:** Division of the application into separate MVC units'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免复杂性：** 将应用程序分成独立的 MVC 单元'
- en: '**Clean separation of the concepts:** Logical grouping of the specific tasks'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**概念的清晰分离：** 具体任务的逻辑分组'
- en: Disadvantages
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: '**Strong dependency between model and controller**'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型和控制器之间的强依赖**'
- en: 'Best Practices: Project Structure for Dash Apps'
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践：Dash 应用的项目结构
- en: We show you our best practices with an example Dash app. Feel free to use this
    example as the basis for your next Dash App.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过一个示例 Dash 应用展示我们的最佳实践。可以自由使用此示例作为你下一个 Dash 应用的基础。
- en: We recommend working in a virtual environment (e.g. [conda](https://docs.conda.io/en/latest/)).Please
    install conda on your system.Create a virtual environment to keep your main system
    clean.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们推荐在虚拟环境中工作（例如 [conda](https://docs.conda.io/en/latest/)）。请在你的系统上安装 conda。创建虚拟环境以保持你的主系统的清洁。
- en: '**Create and activate the conda environment:**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建并激活 conda 环境：**'
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Web apps consist of many components and pages. We recommend that you divide
    the individual concepts into several folders and files. This approach simplifies
    the maintenance of the web app considerably.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Web 应用由许多组件和页面组成。我们建议将各个概念分成几个文件夹和文件。这种方法大大简化了 Web 应用的维护。
- en: '**We recommend the following structure:**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们推荐以下结构：**'
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We go through the individual folders and files in detail from top to bottom.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从上到下详细介绍各个文件夹和文件。
- en: assets folder
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: assets 文件夹
- en: This folder contains the style information (e.g. CSS, JavaScript files or favicon.ico)
    of your Dash App. Dash automatically serves all files when you name the folder
    `assets`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件夹包含你的 Dash 应用的样式信息（例如 CSS、JavaScript 文件或 favicon.ico）。Dash 会自动提供所有文件，只要你将文件夹命名为
    `assets`。
- en: '**style.py**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**style.py**'
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the `style.py` file, we define the colour scheme of the app. A Python dictionary
    is a good choice. We can easily access the dictionary information from other files.
    For more style information, you can easily create another dictionary.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `style.py` 文件中，我们定义应用程序的配色方案。Python 字典是一个不错的选择。我们可以轻松地从其他文件访问字典信息。有关更多样式信息，你可以轻松创建另一个字典。
- en: '**typography.css**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**typography.css**'
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `typography.css` file contains the typography information.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`typography.css` 文件包含排版信息。'
- en: components folder
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: components 文件夹
- en: This folder contains all reusable components (e.g. dropdown, button or table).
    The advantage is that you can use these components on several pages.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件夹包含所有可重用的组件（例如下拉菜单、按钮或表格）。其优点是你可以在多个页面上使用这些组件。
- en: '**dropdown.py**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**dropdown.py**'
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For the dropdown menu, we use the [Dash Core Components](https://dash.plotly.com/dash-core-components).
    We can use the function `render_dropdown()` whenever we need a dropdown menu.
    The advantage is that all dropdown menus have the same style.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下拉菜单，我们使用 [Dash Core Components](https://dash.plotly.com/dash-core-components)。每当我们需要一个下拉菜单时，可以使用
    `render_dropdown()` 函数。其优点是所有下拉菜单具有相同的样式。
- en: '**navbar.py**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**navbar.py**'
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The navigation bar contains the links to the individual pages. For the navigation
    bar, we use the [Dash Bootstrap Components](https://dash-bootstrap-components.opensource.faculty.ai/docs/components/navbar/).
    You can design the `dbc.NavbarSimple()` component individually.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 导航栏包含指向各个页面的链接。对于导航栏，我们使用 [Dash Bootstrap Components](https://dash-bootstrap-components.opensource.faculty.ai/docs/components/navbar/)。你可以单独设计
    `dbc.NavbarSimple()` 组件。
- en: environment folder
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: environment 文件夹
- en: Different environments have different configuration files. There are Dev, Staging,
    Prod, and others. This folder contains the different environment files. In our
    case, we have a development (`.env_development`) and a production (`.env`) environment.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的环境有不同的配置文件。包括 Dev、Staging、Prod 等。该文件夹包含不同的环境文件。在我们的例子中，我们有一个开发环境（`.env_development`）和一个生产环境（`.env`）。
- en: '**.env**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**.env**'
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This file contains the production parameters. We use the `VERSION` parameter
    later in the web interface to see which environment is active.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件包含生产参数。我们在网页界面中稍后使用 `VERSION` 参数来查看哪个环境是活动的。
- en: '**.env_development**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**.env_development**'
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This file contains the development parameters. The parameters `HOST`, `PORT`,
    and`DEBUG` will use for the local development server.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件包含开发参数。`HOST`、`PORT` 和 `DEBUG` 参数将用于本地开发服务器。
- en: '**settings.py**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**settings.py**'
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this file, we read the environment configurations. For this, we use the Python
    package [python-dotenv](https://pypi.org/project/python-dotenv/). First, we read
    the correct configuration file based on the environment variable `ENV_FILE`. For
    local development, we use `.env_development`. Via the `ENV_FILE` environment variable,
    we can define the corresponding environment. We set the `ENV_FILE` variable later
    in the Dockerfile. In our case, `.env` is the production environment.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，我们读取环境配置。为此，我们使用 Python 包 [python-dotenv](https://pypi.org/project/python-dotenv/)。首先，我们根据环境变量
    `ENV_FILE` 读取正确的配置文件。对于本地开发，我们使用 `.env_development`。通过 `ENV_FILE` 环境变量，我们可以定义相应的环境。我们稍后在
    Dockerfile 中设置 `ENV_FILE` 变量。在我们的例子中，`.env` 是生产环境。
- en: pages folder
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pages 文件夹
- en: A web app usually consists of several pages. We recommend creating a folder
    for each page. Each page folder contains three files to apply the MVC pattern.
    A page has a model, view and controller file. So we have a clean separation of
    concepts.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一个网页应用程序通常由多个页面组成。我们建议为每个页面创建一个文件夹。每个页面文件夹包含三个文件，以应用 MVC 模式。一个页面有一个模型、视图和控制器文件。这样我们就有了概念的清晰分离。
- en: '**dashboard/dashboard_controller.py**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**dashboard/dashboard_controller.py**'
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The controller is the interface between the view and the model. The controller
    reacts to the events of the web interface. In addition, the controller obtains
    the data from the model. Finally, the controller returns the results to the web
    interface.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器是视图和模型之间的接口。控制器响应网页界面的事件。此外，控制器从模型中获取数据。最后，控制器将结果返回给网页界面。
- en: '**dashboard/dashboard_model.py**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**dashboard/dashboard_model.py**'
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the `dashboard_model.py` file, we get the data via the built-in dataset gapminder
    of the package [plotly.express.data](https://plotly.com/python-api-reference/generated/plotly.express.data.html).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `dashboard_model.py` 文件中，我们通过 [plotly.express.data](https://plotly.com/python-api-reference/generated/plotly.express.data.html)
    包的内置数据集 gapminder 获取数据。
- en: '**dashboard/dashboard_view.py**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**dashboard/dashboard_view.py**'
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this file, we define the appearance of the web interface. In this context,
    we use the dropdown menu and the navbar from the components folder.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，我们定义了网页界面的外观。在这种情况下，我们使用来自组件文件夹的下拉菜单和导航栏。
- en: '**page_not_found.py**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**page_not_found.py**'
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This page appears when a page is not found. For example, if you enter an incorrect
    path in the URL.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面未找到时，会显示这个页面。例如，如果你在 URL 中输入了错误的路径。
- en: plots folder
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: plots 文件夹
- en: This folder contains the different plots of the app. We recommend creating a
    new file for each plot type.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件夹包含了应用程序的不同图表。我们建议为每种图表类型创建一个新的文件。
- en: '**map_plot.py**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**map_plot.py**'
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We use [Plotly Express](https://plotly.com/python/plotly-express/) for the map
    chart.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 [Plotly Express](https://plotly.com/python/plotly-express/) 绘制地图图表。
- en: utils folder
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: utils 文件夹
- en: This folder contains helper functions and components that can be used in general.
    An example is a connector to other services (e.g. RESTful Services).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件夹包含可以通用的辅助函数和组件。例如，一个连接到其他服务（例如 RESTful 服务）的连接器。
- en: app.py
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: app.py
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this file, we create the Dash instance with `dash.Dash()`. We have a dynamic
    layout which is why we set `suppress_callback_exceptions` to `True`. In addition,
    we use the FLATLY theme from the [Dash Bootstrap Components themes](https://dash-bootstrap-components.opensource.faculty.ai/docs/themes/explorer/).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，我们创建了 Dash 实例 `dash.Dash()`。我们有一个动态布局，因此我们将 `suppress_callback_exceptions`
    设置为 `True`。此外，我们使用来自 [Dash Bootstrap Components themes](https://dash-bootstrap-components.opensource.faculty.ai/docs/themes/explorer/)
    的 FLATLY 主题。
- en: index.py
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: index.py
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This file is the entry point of the Dash App. For Gunicorn, it is important
    to define `server = app.server`. That sets the Flask server for the app. The function
    `display_page()` will be triggered when the page changes. For the development
    environment, we pass `app.run_server()` the parameters from the dev environment
    file.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件是 Dash 应用程序的入口点。对于 Gunicorn，重要的是定义 `server = app.server`。这设置了应用程序的 Flask
    服务器。当页面发生变化时，函数 `display_page()` 将被触发。对于开发环境，我们将 `app.run_server()` 的参数从开发环境文件中传递。
- en: requirements.txt
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: requirements.txt
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This file contains all required dependencies. Please install the dependencies
    with the following command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件包含所有必需的依赖项。请使用以下命令安装这些依赖项：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now we are ready to start the app.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备开始应用程序。
- en: Local Development
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地开发
- en: 'Navigate to the `dash-app` folder and execute the following command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到 `dash-app` 文件夹并执行以下命令：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The Dash App starts. You can open the app at [http://127.0.0.1:7000](http://127.0.0.1:7000).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Dash 应用程序启动。你可以在 [http://127.0.0.1:7000](http://127.0.0.1:7000) 打开应用程序。
- en: '![](../Images/c4135fb819ffaae8a222572a9cd32cc7.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c4135fb819ffaae8a222572a9cd32cc7.png)'
- en: Dashboard Dev Version (Screenshot by authors)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板开发版本（作者截图）
- en: We can see the version number 1.0.0-dev that we set in the development environment.
    Dash provides debug information in the bottom right corner. The [Dash Dev Tools](https://dash.plotly.com/devtools)
    are enabled when developing your Dash App.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到在开发环境中设置的版本号 1.0.0-dev。Dash 在右下角提供调试信息。在开发 Dash 应用程序时，[Dash 开发工具](https://dash.plotly.com/devtools)
    被启用。
- en: Dockerize the Dash App (Production Environment)
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 化 Dash 应用程序（生产环境）
- en: '*Note:* Please install [Docker](https://www.docker.com/get-started/) on your
    system.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：* 请在您的系统上安装 [Docker](https://www.docker.com/get-started/)。'
- en: '**Dockerfile**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dockerfile**'
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the Dockerfile, we create a user and a virtual environment. A virtual environment
    helps to keep control over the Python dependencies. It also keeps the difference
    between the local development environment and the container application small.
    The tutorial “[Elegantly activating a virtualenv in a Dockerfile](https://pythonspeed.com/articles/activate-virtualenv-dockerfile/)”
    by Itamar Turner-Trauring describes how to activate a virtual environment in a
    Dockerfile. Read it if you are interested! The virtual environment does not slow
    down the Dash application. Also, we are less likely to encounter strange bugs
    over time (e.g. changes at the operating system level). In the last line, we define
    the entry point. The host must be **0.0.0.0** so that the Dash App is accessible.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Dockerfile 中，我们创建了一个用户和一个虚拟环境。虚拟环境有助于控制 Python 依赖项。它还保持本地开发环境与容器应用程序之间的差异较小。Itamar
    Turner-Trauring 的教程 “[优雅地在 Dockerfile 中激活 virtualenv](https://pythonspeed.com/articles/activate-virtualenv-dockerfile/)”
    介绍了如何在 Dockerfile 中激活虚拟环境。如果您感兴趣，请阅读！虚拟环境不会减慢 Dash 应用程序的速度。此外，我们也不太可能随着时间的推移遇到奇怪的
    bug（例如，操作系统层面的变化）。在最后一行中，我们定义了入口点。主机必须是 **0.0.0.0** 以便 Dash 应用程序可以访问。
- en: 'Now you can build the app with the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用以下命令构建应用程序：
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run the app with the following command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now you can open the app at [http://0.0.0.0:7000](http://127.0.0.1:7000).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以在 [http://0.0.0.0:7000](http://127.0.0.1:7000) 打开应用程序。
- en: '![](../Images/ccf4d39f204afc4c3f1424a43fa1bab4.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ccf4d39f204afc4c3f1424a43fa1bab4.png)'
- en: Dashboard Prod Version (Screenshot by authors)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板生产版本（作者截图）
- en: We can see the version number 1.0.0 that we set in the production environment
    file. Docker allows us to deploy the Dash application in a lightweight container
    independent of the environment in the cloud or on-premises.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到在生产环境文件中设置的版本号 1.0.0。Docker 允许我们在云端或本地环境中以轻量级容器的形式部署 Dash 应用程序。
- en: Conclusion
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we have presented a concept for structuring a Dash App. We
    showed how to apply the Model View Controller pattern to get a clean separation
    of concepts. This approach facilitates the maintenance of the Dash application.
    We also showed how to use different environments. Finally, we presented a clean
    way to deploy the Dash application in a Docker container.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们提出了一个构建 Dash 应用程序的概念。我们展示了如何应用模型-视图-控制器模式，以实现概念的清晰分离。这种方法有助于维护 Dash 应用程序。我们还展示了如何使用不同的环境。最后，我们介绍了一种在
    Docker 容器中部署 Dash 应用程序的简洁方法。
- en: 👉🏽 [**Join our free weekly Magic AI newsletter for the latest AI updates!**](https://magicai.tinztwins.de)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 👉🏽 [**加入我们的免费每周 Magic AI 通讯，获取最新的 AI 更新！**](https://magicai.tinztwins.de)
- en: 👉🏽 [**You can find all our Freebies on our digital products page!**](https://shop.tinztwins.de/)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 👉🏽 [**您可以在我们的数字产品页面找到所有免费的资源！**](https://shop.tinztwins.de/)
- en: '[**Subscribe for free**](https://tinztwinspro.medium.com/subscribe) **to get
    notified when we publish a new story:**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[**免费订阅**](https://tinztwinspro.medium.com/subscribe) **以便在我们发布新故事时收到通知：**'
- en: '[](https://tinztwinspro.medium.com/subscribe?source=post_page-----bd40dfe1313c--------------------------------)
    [## Get an email whenever Janik and Patrick Tinz publishes.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://tinztwinspro.medium.com/subscribe?source=post_page-----bd40dfe1313c--------------------------------)
    [## 每当 Janik 和 Patrick Tinz 发布新内容时，您将收到一封电子邮件。'
- en: Get an email whenever Janik and Patrick Tinz publishes. By signing up, you will
    create a Medium account if you don’t…
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每当 Janik 和 Patrick Tinz 发布新内容时，您将收到一封电子邮件。通过注册，如果您还没有 Medium 账户，系统将为您创建一个账户……
- en: tinztwinspro.medium.com](https://tinztwinspro.medium.com/subscribe?source=post_page-----bd40dfe1313c--------------------------------)
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: tinztwinspro.medium.com](https://tinztwinspro.medium.com/subscribe?source=post_page-----bd40dfe1313c--------------------------------)
- en: Learn more about us on our [About page](https://medium.com/@tinztwinspro/about).
    Don’t forget to follow us on [X](https://twitter.com/tinztwins). Thanks so much
    for reading. If you liked this article, feel free to share it. **Have a great
    day!**
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的[关于页面](https://medium.com/@tinztwinspro/about)了解更多关于我们的信息。别忘了在[X](https://twitter.com/tinztwins)上关注我们。非常感谢你的阅读。如果你喜欢这篇文章，随时分享它。**祝你有美好的一天！**
- en: Sign up for a Medium membership using [our link](https://tinztwinspro.medium.com/membership)
    to read unlimited Medium stories.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[我们的链接](https://tinztwinspro.medium.com/membership)注册成为 Medium 会员，即可阅读无限量的
    Medium 故事。
