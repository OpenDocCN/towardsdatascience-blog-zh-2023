- en: np.stack() — How To Stack two Arrays in Numpy And Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/np-stack-how-to-stack-two-arrays-in-numpy-and-python-fc910dd2d57a](https://towardsdatascience.com/np-stack-how-to-stack-two-arrays-in-numpy-and-python-fc910dd2d57a)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Beginner and advanced examples of Stacking in Numpy — Learn how to join a
    sequence of arrays easily**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@radecicdario?source=post_page-----fc910dd2d57a--------------------------------)[![Dario
    Radečić](../Images/41882a3b30bab9da43d66a59f1df366b.png)](https://medium.com/@radecicdario?source=post_page-----fc910dd2d57a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fc910dd2d57a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fc910dd2d57a--------------------------------)
    [Dario Radečić](https://medium.com/@radecicdario?source=post_page-----fc910dd2d57a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fc910dd2d57a--------------------------------)
    ·7 min read·Jan 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cc7b5581c52b6ae2e275765250b5f008.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Brigitte Tohm](https://unsplash.com/@brigittetohm?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Numpy is an amazing library for data science and machine learning, so there’s
    no way around it if you want to become a data professional. Mastering the ins
    and outs of the package is mandatory because there’s no point in reinventing the
    wheel — pretty much anything you can think of has already been implemented.
  prefs: []
  type: TYPE_NORMAL
- en: Today you’ll learn all about np stack — or the Numpy’s `stack()` function. Put
    simply, it allows you to join arrays row-wise (default) or column-wise, depending
    on the parameter values you specify. We'll go over the fundamentals and the function
    signature, and then jump into examples in Python.
  prefs: []
  type: TYPE_NORMAL
- en: What is np stack?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Numpy’s np stack function is used to stack/join arrays along a new axis. It
    will return a single array as a result of stacking multiple sequences with the
    same shape. You can stack multidimensional arrays as well, and you’ll learn how
    shortly.
  prefs: []
  type: TYPE_NORMAL
- en: But first, let’s explain the difference between horizontal and vertical stacking.
  prefs: []
  type: TYPE_NORMAL
- en: Horizontal vs. vertical stack in Numpy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Stacking arrays horizontally means that you take arrays of the same dimensions
    and stack them on top of each other. Each *input* array will be a row in the resulting
    array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following image for a better understanding:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a5137d122d777abd80ff78805805b475.png)'
  prefs: []
  type: TYPE_IMG
- en: Image 1 — Horizontal stacking explained (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Vertical stacking works just the opposite. One row of two vertically stacked
    arrays contains corresponding elements from both.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the first row of a vertically stacked array Z will contain the
    first elements of the input arrays X and Y.
  prefs: []
  type: TYPE_NORMAL
- en: 'Maybe you’ll find it easier to grasp visually:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/93e2dee696bd3fc31ca2483bb669fa26.png)'
  prefs: []
  type: TYPE_IMG
- en: Image 2 — Vertical stacking explained (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: And with that out the way, let’s go over the np stack function signature.
  prefs: []
  type: TYPE_NORMAL
- en: Function parameters explained
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The np stack function can take up to three parameters, of which only the first
    one is mandatory:'
  prefs: []
  type: TYPE_NORMAL
- en: '`arrays` - sequence of arrays, or array of arrays you want to stack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`axis` - integer, the axis along which you want to stack the arrays (0 = row-wise
    stacking, 1 = column-wise stacking for 1D arrays, or use -1 to use the last axis)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`out` - optional destination to place the results. If provided, the output
    array shape must match the stacking result shape'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enough theory! Let’s now go over some practical examples.
  prefs: []
  type: TYPE_NORMAL
- en: Numpy Stack in Action — Function Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve talked a lot about horizontal and vertical stacking, so let’s see how
    it works in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Numpy horizontal stacking (row-wise)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To stack two numpy arrays horizontally, you just need to call the np.stack
    function and pass in the arrays. No other parameters are required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the resulting output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a5f646f2a2966c7f2c71184b562fbd60.png)'
  prefs: []
  type: TYPE_IMG
- en: Image 3 — Horizontal stacking in Numpy (1) (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the output looks a lot like a Numpy version of a Pandas DataFrame,
    which means one array pretty much equals one row of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be more explicit, you can achieve the same results by writing `axis=0` as
    the second parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are identical:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/38290d54455c7f60690fcc27e6ed8efa.png)'
  prefs: []
  type: TYPE_IMG
- en: Image 4 — Horizontal stacking in Numpy (2) (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s explore vertical stacking.
  prefs: []
  type: TYPE_NORMAL
- en: Numpy vertical stacking (column-wise)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To stack two numpy arrays vertically, just change the value of the `axis` parameter
    to 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the arrays are stacked as columns, meaning you’ll have as many columns
    as you have provided arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4cc49dfc8d296fbeffa1787209cc078d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image 5 — Vertical stacking in Numpy (1) (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'With simple 1D arrays, you can also set `axis=-1` to stack the arrays vertically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are identical:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e8a44fb25d9c9c0250ca1f9108443495.png)'
  prefs: []
  type: TYPE_IMG
- en: Image 6 — Vertical stacking in Numpy (2) (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s discuss some more on stacking N-dimensional arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Join 1D arrays with stack()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You’ve already seen how to stack 1-dimensional arrays, but here’s a recap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/55554d84f2c83a54c9ae6c9935f8312e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image 7 — Stacking 1D arrays (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can change the value of the `axis` parameter if you want to
    stack the arrays column-wise.
  prefs: []
  type: TYPE_NORMAL
- en: Join 2D arrays with stack()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The procedure is identical for stacking 2D arrays with np stack. Here’s an
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We now get a 3-dimensional array back, each element being a 2-dimensional array
    of two horizontally stacked arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/472cd0b04cc67e9a45d78c94f34c840d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image 8 — Stacking 2D arrays (1) (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'As per usual, you can stack 2-dimensional arrays vertically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b2321559bc1233efd356fe708a6851ca.png)'
  prefs: []
  type: TYPE_IMG
- en: Image 9 — Stacking 2D arrays (2) (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: That’s pretty much all there is to numpy stacking, at least for the basics.
    Up next, we’ll go over some advanced usage examples and frequently asked questions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Advanced: np stack in a loop'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the commonly asked questions is how can you use np stack in a loop.
    Here’s an example — it will first combine two 2-dimensional arrays into a 3-dimensional
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the intermediary output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7105695fd055423354c0d911316f009b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image 10 — Numpy stacking in a loop (1) (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'And now to produce a single 2-dimensional array with the elements stacked horizontally,
    you can use a loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8afad6984a1a81d591cc76bf4f7c4c85.png)'
  prefs: []
  type: TYPE_IMG
- en: Image 11 — Numpy stacking in a loop (2) (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: We’ll now cover some frequently asked questions about the np stack function
    in Python.
  prefs: []
  type: TYPE_NORMAL
- en: FAQ
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the difference between stack and concatenate?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Put simply, np stack function will return a 2D array when two 1D arrays are
    passed in. The np concatenate function takes elements of all input arrays and
    returns them as a single 1D array.
  prefs: []
  type: TYPE_NORMAL
- en: What is numpy dstack?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The numpy dstack function allows you to combine arrays index by index and store
    the results like a stack. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/50acd2c2ee1067adec52f816bf6b3c2b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image 12 — Numpy dstack (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: So, we had two 1x4 arrays coming in, and `dstack` combined them vertically into
    a 3-dimensional array format. Neat for some use cases.
  prefs: []
  type: TYPE_NORMAL
- en: '*Loved the article? Become a* [*Medium member*](/@radecicdario/membership)
    *to continue learning without limits. I’ll receive a portion of your membership
    fee if you use the following link, with no extra cost to you.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://medium.com/@radecicdario/membership](https://medium.com/@radecicdario/membership)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Originally published at* [*https://betterdatascience.com*](https://betterdatascience.com/np-stack/)
    *on January 10, 2023.*'
  prefs: []
  type: TYPE_NORMAL
