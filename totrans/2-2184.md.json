["```py\nfrom src.theme import *\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\n```", "```py\nmu = 1\nsigma = 5.644\n```", "```py\nalpha = 0.05\nbeta = 0.2\n```", "```py\nppf = sp.stats.norm(0, 1).ppf\ncdf = sp.stats.norm(0, 1).cdf\nz_alpha = ppf(1 - alpha/2)\nz_beta = ppf(1 - beta)\nN = int((2 * sigma * (z_alpha + z_beta) / mu)**2)\nprint(f\"Number of obserations needed: {N}\")\n```", "```py\nNumber of obserations needed: 1000\n```", "```py\nK = 10_000\nnp.random.seed(2)\nobs = np.random.normal(mu, sigma, size=(N, K))\n```", "```py\nN_peek = np.arange(100, N+1, 50, dtype=int)\nN_peek\n```", "```py\narray([ 100,  150,  200,  250,  300,  350,  400,  450,  500,  550,  600,  650,  700,  750,  800,  850,  900,  950, 1000])\n```", "```py\ndef select_alpha_naive(n, N, N_peek, alpha):\n    return alpha\n```", "```py\ndef compute_intervals(select_alpha, obs, N_peek, alpha=0.05, **kwargs):\n    # Compute rolling mean and standard deviation\n    N, K = np.shape(obs)\n    ns = np.reshape(np.arange(1, N+1), (-1, 1))\n    means = np.cumsum(obs, axis=0) / ns\n    stdevs = np.sqrt(np.cumsum((obs - means)**2, axis=0) / ns)\n\n    # Compute intervals at each peeking time\n    df_intervals = pd.DataFrame({\"k\": range(K)})\n    df_intervals[\"rejected_0\"] = False\n    df_intervals[\"rejected_1\"] = False\n    df_intervals[\"length\"] = max(N_peek)\n    for t, n in enumerate(N_peek):\n        df_intervals[f\"mean{n}\"] = means[n-1, :]\n        df_intervals[f\"width{n}\"] = ppf(1 - select_alpha(n, N, N_peek, alpha, **kwargs)/2) * stdevs[n-1, :] / np.sqrt(n)\n        df_intervals[f\"lowerb{n}\"] = means[n-1, :] - df_intervals[f\"width{n}\"]\n        df_intervals[f\"upperb{n}\"] = means[n-1, :] + df_intervals[f\"width{n}\"]\n        df_intervals[f\"coverage{n}\"] = (df_intervals[f\"lowerb{n}\"] <= mu) & (df_intervals[f\"upperb{n}\"] >= mu)\n        df_intervals[\"rejected_0\"] = df_intervals[\"rejected_0\"] | (df_intervals[f\"lowerb{n}\"] >= 0) | (df_intervals[f\"upperb{n}\"] <= 0)\n        df_intervals[f\"power{n}\"] = df_intervals[\"rejected_0\"]\n        df_intervals[\"rejected_1\"] = df_intervals[\"rejected_1\"] | ~df_intervals[f\"coverage{n}\"]\n        df_intervals[f\"falsep{n}\"] = df_intervals[\"rejected_1\"]\n        df_intervals[\"length\"] = np.minimum(df_intervals[\"length\"], n) * df_intervals[\"rejected_0\"] + max(N_peek) * (1 - df_intervals[\"rejected_0\"])\n    return df_intervals\n```", "```py\ndfi_naive = compute_intervals(select_alpha_naive, obs, N_peek)\n```", "```py\nplot_peeking(dfi_naive, obs)\n```", "```py\nN_plot = [200, 400, 600]\n```", "```py\nplot_intervals(dfi_naive, N_plot, \"coverage\")\n```", "```py\nplot_intervals(dfi_naive, N_plot, \"power\")\n```", "```py\nplot_coverage_power(dfi_naive)\n```", "```py\nprint(f\"Average length: n = {dfi_naive.length.mean():.0f}\", )\n```", "```py\nAverage length: n = 177\n```", "```py\ndef select_alpha_bonferroni(n, N, N_peek, alpha):\n    P = len(N_peek)\n    return alpha / P\n```", "```py\ndfi_bonferroni = compute_intervals(select_alpha_bonferroni, obs, N_peek)\nplot_intervals(dfi_bonferroni, N_plot, \"coverage\")\n```", "```py\nplot_intervals(dfi_bonferroni, N_plot, \"power\")\n```", "```py\nplot_coverage_power(dfi_bonferroni)\n```", "```py\nprint(f\"Average length: n = {dfi_bonferroni.length.mean():.0f}\", )\n```", "```py\nAverage length: n = 317\n```", "```py\ndef select_alpha_gst_pocock(n, N, N_peek, alpha):\n    t = n / N\n    return alpha * np.log(1 + (np.exp(1) - 1) * t)\n```", "```py\ndfi_gst_pocock = compute_intervals(select_alpha_gst_pocock, obs, N_peek)\nplot_coverage_power(dfi_gst_pocock)\n```", "```py\nprint(f\"Average length: n = {dfi_gst_pocock.length.mean():.0f}\", )\n```", "```py\nAverage length: n = 229\n```", "```py\ndef select_alpha_gst_obrien_fleming(n, N, N_peek, alpha, rho=1):\n    t = n / N\n    return 4 - 4 * cdf(ppf(1 - alpha/4) / t**(rho/2))\n```", "```py\ndfi_gst_obrien_fleming = compute_intervals(select_alpha_gst_obrien_fleming, obs, N_peek)\nplot_coverage_power(dfi_gst_obrien_fleming)\n```", "```py\nprint(f\"Average length: n = {dfi_gst_obrien_fleming.length.mean():.0f}\", )\n```", "```py\nAverage length: n = 414\n```", "```py\ndfi_gst_obrien_fleming_05 = compute_intervals(select_alpha_gst_obrien_fleming, obs, N_peek, rho=0.5)\nprint(f\"Average length: n = {dfi_gst_obrien_fleming_05.length.mean():.0f}\", )\n```", "```py\nAverage length: n = 303\n```", "```py\nN_peek_10 = np.arange(30, N+1, 10, dtype=int)\ndfi_gst_10 = compute_intervals(select_alpha_gst_pocock, obs, N_peek_10)\nplot_coverage_power(dfi_gst_10)\n```", "```py\nprint(f\"Average length: n = {dfi_gst_10.length.mean():.0f}\", )\n```", "```py\nAverage length: n = 188\n```", "```py\nN_peek_200 = np.arange(200, N+1, 200, dtype=int)\ndfi_gst_200 = compute_intervals(select_alpha_gst_pocock, obs, N_peek_200)\nplot_coverage_power(dfi_gst_200)\n```", "```py\nprint(f\"Average length: n = {dfi_gst_200.length.mean():.0f}\", )\n```", "```py\nAverage length: n = 311\n```"]