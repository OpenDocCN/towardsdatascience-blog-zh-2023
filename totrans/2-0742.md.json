["```py\nfrom scipy.stats import dirichlet\ndist = dirichlet([5, 5, 5])\nprint(\"PDF at [5,5,5]: \",dist.pdf([0.5, 0.3, 0.2]))\nprint(\"Mean of disitrubtion: \", dist.mean())\n```", "```py\nPDF at [5,5,5]:  5.1081030000000025\nMean of disitrubtion:  [0.33333333 0.33333333 0.33333333]\n```", "```py\n# This results in an error\ndist.pdf([0.5, 0.3, 0.3])\n```", "```py\n# Listing 1\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nfrom scipy.stats import dirichlet, multinomial, beta\nfrom math import pi\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\nimport matplotlib.gridspec as gridspec\n%matplotlib inline\n\nH = np.tan(pi/3)*0.5\nedges = np.array([[0, 0], [1, 0], [0.5, H]])\nshifted_edges = np.roll(edges, 1, axis=0)\ntriangle = tri.Triangulation(edges[:, 0], edges[:, 1])\n\n# For each edge of the triangle, the pair of other edges\nedge_pairs = [edges[np.roll(range(3), -i)[1:]] for i in range(3)]\n# The normal vectors for each side of the triangle\nnormal_vecs = np.array([[pair[0,1] - pair[1,1],\n              pair[1,0] - pair[0,0]] for pair in edge_pairs])\n```", "```py\n# Listing 2\n\ndef cart_to_bc(coords):\n    '''Converts 2D Cartesian coordinates to barycentric'''\n    bc_coords = np.sum((np.tile(coords, (3, 1))-shifted_edges)*normal_vecs,\n                axis=1) / np.sum((edges-shifted_edges)*normal_vecs, axis=1)\n    return np.clip(bc_coords, 1.e-10, 1.0 - 1.e-10)\n\ndef bc_to_cart(coords):\n    '''Converts barycentric coordinates to 2D Cartesian'''\n    return (edges * coords.reshape(-1, 1)).sum(axis=0) \n```", "```py\n# Listing 3\n\ndef plot_contours(dist, nlevels=200, subdiv=8, ax=None):\n    refiner = tri.UniformTriRefiner(triangle)\n    mesh = refiner.refine_triangulation(subdiv=subdiv)\n    pdf_vals = [dist.pdf(cart_to_bc(coords)) for coords in zip(mesh.x, mesh.y)]\n    if ax:\n        contours = ax.tricontourf(mesh, pdf_vals, nlevels, cmap='jet')\n        ax.set_aspect('equal')\n        ax.set_xlim(0, 1)\n        ax.set_ylim(0, H)\n        ax.set_axis_off()\n    else:\n        contours = plt.tricontourf(mesh, pdf_vals, nlevels, cmap='jet')\n        plt.axis('equal')\n        plt.xlim(0, 1)\n        plt.ylim(0, H)\n        plt.axis('off')\n    return contours\n```", "```py\n# Listing 4\n\nplt.figure(figsize=(10, 10))\ncontours = plot_contours(dirichlet([1, 1, 1]))\nv = np.linspace(0, 3, 2, endpoint=True)\nplt.colorbar(contours, ticks=[1,2,3], fraction=0.04, pad=0.1)\nplt.text(0-0.02, -0.05, \"$p_1$\", fontsize=22)\nplt.text(1-0.02, -0.05, \"$p_2$\", fontsize=22)\nplt.text(0.5-0.02, H+0.03, \"$p_3$\", fontsize=22)\nplt.title(\"Dir([1,1,1])\", fontsize=22)\nplt.show()\n```", "```py\n# Listing 5\n\nplt.figure(figsize=(10, 10))\ncontours = plot_contours(dirichlet([5, 5, 5]))\nplt.colorbar(contours, fraction=0.04, pad=0.1)\nplt.text(0-0.02, -0.05, \"$p_1$\", fontsize=22)\nplt.text(1-0.02, -0.05, \"$p_2$\", fontsize=22)\nplt.text(0.5-0.02, H+0.03, \"$p_3$\", fontsize=22)\nplt.title(\"Dir([5,5,5])\", fontsize=22)\nplt.show()\n```", "```py\n# Listing 6\n\ndef plot_surface(dist, ax, nlevels=200, subdiv=8, log_plot=False, **args):\n    refiner = tri.UniformTriRefiner(triangle)\n    mesh = refiner.refine_triangulation(subdiv=subdiv)\n    pdf_vals = [dist.pdf(cart_to_bc(coords)) for coords in zip(mesh.x, mesh.y)]\n    pdf_vals = np.array(pdf_vals, dtype='float64')\n    if log_plot:\n        pdf_vals = np.log(pdf_vals)\n    ax.plot_trisurf(mesh.x, mesh.y, pdf_vals, linewidth=1, **args)\n```", "```py\n# Listing 7\n\nfig = plt.figure(figsize=(15, 10))\nax1 = fig.add_subplot(231, projection='3d')\nax2 = fig.add_subplot(232, projection='3d')\nax3 = fig.add_subplot(233, projection='3d')\nax4 = fig.add_subplot(234, projection='3d')\nax5 = fig.add_subplot(235, projection='3d')\nax6 = fig.add_subplot(236, projection='3d')\n\nax = [ax1, ax2, ax3, ax4, ax5, ax6]\nparams = [[1,1,1], [1,7,1], [0.65,7,1], [5,5,5], [30,30,30], [5, 5, 30]]\n\nfor i in range(6):\n    plot_surface(dirichlet(params[i]), ax[i],\n                 antialiased=False, color='yellow')\n    ax[i].view_init(35, -135)\n    ax[i].set_title(\"Dir({})\".format(params[i]), fontsize=16)\n    ax[i].zaxis.set_rotate_label(False) \n    ax[i].set_zlabel(\"$f_\\mathregular{P}(\\mathregular{p})$\", fontsize=16,\n                     weight=\"bold\", style=\"italic\", labelpad=5, rotation=90)\n    ax[i].set_xlim([-0.15, 1.1])\n    ax[i].set_ylim([-0.15, 1.1])\n    if i>2:\n        ax[i].set_zlim([0, 65])\n    ax[i].xaxis.set_ticklabels([])\n    ax[i].yaxis.set_ticklabels([])\n    ax[i].set_xticks([])\n    ax[i].set_yticks([])\n    if i==0:\n        ax[i].text(-0.15, -0.07, 2, \"$p_1$\", fontsize=14)\n        ax[i].text(1.07, 0.03, 2, \"$p_2$\", fontsize=14)\n        ax[i].text(0.5, H+0.15, 2, \"$p_3$\", fontsize=14)\n    else:\n        ax[i].text(-0.15, -0.07, 0, \"$p_1$\", fontsize=14)\n        ax[i].text(1.07, 0.03, 0, \"$p_2$\", fontsize=14)\n        ax[i].text(0.5, H+0.15, 0, \"$p_3$\", fontsize=14)\n\nplt.show()\n```", "```py\n# Listing 8\n\nfig = plt.figure(figsize=(15, 10))\n\nax1 = fig.add_subplot(121, projection='3d')\nax2 = fig.add_subplot(122, projection='3d')\n\nax = [ax1, ax2]\nparams = [[0.2, 0.2, 0.2], [0.8,0.8,0.8], [0.2,0.5,1]]\n\nfor i in range(2):\n    plot_surface(dirichlet(params[i]), ax[i], log_plot=True, cmap='jet')\n    ax[i].view_init(10, -135)\n    ax[i].set_title(\"Dir({})\".format(params[i]), fontsize=20)\n    ax[i].zaxis.set_rotate_label(False) \n    ax[i].set_zlabel(\"$log(f_\\mathregular{P}(\\mathregular{p}))$\",\n                     fontsize=18, weight=\"bold\", style=\"italic\",\n                     labelpad=5, rotation=90)\n    ax[i].set_xlim([-0.15, 1.1])\n    ax[i].set_ylim([-0.15, 1.1])\n    ax[i].set_zlim([0, 17])\n    ax[i].xaxis.set_ticklabels([])\n    ax[i].yaxis.set_ticklabels([])\n    ax[i].set_xticks([])\n    ax[i].set_yticks([])\n    ax[i].text(-0.09, -0.07, 0, \"$p_1$\", fontsize=14)\n    ax[i].text(1.07, 0.03, 0, \"$p_2$\", fontsize=14)\n    ax[i].text(0.5, H+0.22, 0, \"$p_3$\", fontsize=14)\n\nplt.show()\n```", "```py\np_act = np.array([0.6, 0.2, 0.2])\nsample = multinomial.rvs(n=10, p=p_act, random_state=1)\nsample\n```", "```py\narray([6, 3, 1])\n```", "```py\n# Listing 9\n\np_act_coords = bc_to_cart(p_act)\n\nalpha_prior = [1, 1, 1]\nnumber_rolls = [3, 15, 50, 500, 10000]\nnum_cols = 2\n\nfig, axes = plt.subplots(3, num_cols, figsize=(16, 25))\nplt.subplots_adjust(wspace=0.2, hspace=0.05)\n\ncontours = plot_contours(dirichlet(alpha_prior), ax=axes[0, 0])\naxes[0, 0].set_title(\"Prior distribution\", fontsize=22, pad=50)\naxes[0, 0].scatter(p_act_coords[0],\n                   p_act_coords[1],\n                   s=300, color='white',\n                   marker='+')\naxes[0, 0].text(0-0.02, -0.05, \"$p_1$\", fontsize=16)\naxes[0, 0].text(1-0.02, -0.05, \"$p_2$\", fontsize=16)\naxes[0, 0].text(0.5-0.02, H+0.05, \"$p_3$\", fontsize=16)\ndivider = make_axes_locatable(axes[0, 0])\ncax = divider.append_axes('right', size='2%', pad=0.2)\ncbar = fig.colorbar(contours, cax=cax)\n\nfor i in range(1, 6):\n    m= multinomial.rvs(n=number_rolls[i-1], p=p_act, random_state=0)\n    contours = plot_contours(dirichlet(m + alpha_prior),\n                             ax=axes[i // num_cols, i % num_cols])\n    axes[i//num_cols, i%num_cols].set_title(\"n={}\".format(number_rolls[i-1]),\n                                            fontsize=22, pad=50)\n    axes[i//num_cols, i%num_cols].scatter(p_act_coords[0],\n                                          p_act_coords[1],\n                                          s=300, color='white',\n                                          marker='+')\n    axes[i//num_cols, i%num_cols].text(0-0.02, -0.05,\n                                       \"$p_1$\", fontsize=16)\n    axes[i//num_cols, i%num_cols].text(1-0.02, -0.05,\n                                         \"$p_2$\", fontsize=16)\n    axes[i//num_cols, i%num_cols].text(0.5-0.02, H+0.05,\n                                         \"$p_3$\", fontsize=16)\n    divider = make_axes_locatable(axes[i // num_cols, i % num_cols])\n    cax = divider.append_axes('right', size='2%', pad=0.2)\n    cbar = fig.colorbar(contours, cax=cax)\n\nplt.show()\n```", "```py\n# Listing 10\n\nN = 1000\nsimplex_edges = np.array([[1,0], [0,1]])\ntol=1e-6\ngamma1 = np.linspace(tol, 1-tol, N)\ngamma2 = 1-gamma1\nbc_coords = np.stack((gamma1, gamma2), axis=-1)\ncart_coords = gamma1.reshape(-1,1)*simplex_edges[0] + \\\n              gamma2.reshape(-1,1)*simplex_edges[1]\nalpha = [5, 1]\npdf = [dirichlet(alpha).pdf(x) for x in bc_coords]\n\nx = np.arange(0, 1.01, 0.01)\nparam_list = [(1,1), (2,2), (5,1)]\nbeta_dist1 = beta.pdf(x=x, a=alpha[0], b=alpha[1])\nbeta_dist2 = beta.pdf(x=x, a=alpha[1], b=alpha[0])\n\nfig = plt.figure(figsize=(15, 15))\nplt.subplots_adjust(wspace=0.2, hspace=0.1)\ngs = gridspec.GridSpec(2, 2, width_ratios=[2.5, 1],\n                       height_ratios=[1, 2.5])\nax1 = fig.add_subplot(221, projection='3d')\nax2 = fig.add_subplot(222)\nax3 = fig.add_subplot(223)\n\nax1.plot(simplex_edges[:,0], simplex_edges[:,1],\n         [0,0], color = 'gray', label='1-d Simplex')\nax1.plot(cart_coords[:,0], cart_coords[:,1], pdf, color = 'black',\n         label='Dir([{},{}])'.format(alpha[0], alpha[1]))\nax1.plot(x, [0]*len(x), beta_dist1, color = 'blue',\n         label='Beta({},{})'.format(alpha[0], alpha[1]))\nax1.plot([0]*len(x), x, beta_dist2, color = 'green',\n         label='Beta({},{})'.format(alpha[1], alpha[0]))\n\nax1.view_init(25, -135)\nax1.set_xlabel(\"$x_1$\", fontsize=18)\nax1.set_ylabel(\"$x_2$\", fontsize=18, labelpad= 9)\nax1.set_zlabel(\"$f_\\mathregular{X}(\\mathregular{x})$\", fontsize=18,\n               weight=\"bold\", style=\"italic\",\n               labelpad= 2, rotation = 45)\nax1.set_xlim([0, 1])\nax1.set_ylim([0, 1])\nax1.set_zlim([0, 6])\nax1.grid(False)\nax1.legend(loc='best', fontsize= 14)\n\nax2.plot(x, beta_dist1, label='Beta({},{})'.format(alpha[0],\n         alpha[1]), linewidth=2, color='blue')\nax2.set_xlabel('$x_1$', fontsize=18)\nax2.set_ylabel('$f_{X_1}(x_1)$', fontsize=18)\nax2.legend(loc='upper left', fontsize= 16)\nax2.set_xlim([0,1])\nax2.tick_params(axis='both', which='major', labelsize=12)\n\nax3.plot(x, beta_dist2, label='Beta({},{})'.format(alpha[0],\n         alpha[1]), linewidth=2, color='blue')\nax3.set_xlabel('$x_2$', fontsize=18)\nax3.set_ylabel('$f_{X_2}(x_2)$', fontsize=18)\nax3.legend(loc='upper right', fontsize= 16)\nax3.set_xlim([0,1])\nax3.tick_params(axis='both', which='major', labelsize=12)\nplt.show()\n```", "```py\n# Listing 11\n\nN = 1000\nalpha = [1, 5, 3]\n\nedges_marg_x1 = np.array([[0,0], [0.75,0.5*np.cos(pi/6)]])\nedges_marg_x2 = np.array([[1,0], [0.25,0.5*np.cos(pi/6)]])\nedges_marg_x3 = np.array([[0.5,H], [0.5,0]])\ntol=1e-6\ngamma1 = np.linspace(tol, 1-tol, N)\ngamma2 = 1-gamma1\nbc_coords = np.stack((gamma1, gamma2), axis=-1)\nmarg_x1_cart_coords = gamma1.reshape(-1,1)*edges_marg_x1[0] + \\\n                      gamma2.reshape(-1,1)*edges_marg_x1[1]\nmarg_x2_cart_coords = gamma1.reshape(-1,1)*edges_marg_x2[0] + \\\n                      gamma2.reshape(-1,1)*edges_marg_x2[1]\nmarg_x3_cart_coords = gamma1.reshape(-1,1)*edges_marg_x3[0] + \\\n                      gamma2.reshape(-1,1)*edges_marg_x3[1]\n\nalpha_agg1 = [alpha[0], alpha[1]+alpha[2]]\nalpha_agg2 = [alpha[1], alpha[0]+alpha[2]]\nalpha_agg3 = [alpha[2], alpha[0]+alpha[1]]\n\npdf1 = [dirichlet(alpha_agg1).pdf(x) for x in bc_coords]\npdf2 = [dirichlet(alpha_agg2).pdf(x) for x in bc_coords]\npdf3 = [dirichlet(alpha_agg3).pdf(x) for x in bc_coords]\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, projection='3d')\nplot_surface(dirichlet(alpha), ax, antialiased=False,\n             color='yellow', alpha=0.15)\nax.plot([1,0.5], [0, H], [0, 0], \"--\", color='black')\n\nax.plot(marg_x1_cart_coords[:,0], marg_x1_cart_coords[:,1],\n        pdf1, color = 'black', zorder=10,\n        label=\"$[x_1, x_2+x_3]$ ~ Dir([{},{}])\".format(alpha_agg1[0],\n        alpha_agg1[1]))\nax.plot(marg_x2_cart_coords[:,0], marg_x2_cart_coords[:,1],\n        pdf2, color = 'blue', zorder=12,\n        label=\"$[x_2, x_1+x_3]$ ~ Dir([{},{}])\".format(alpha_agg2[0],\n        alpha_agg2[1]))\nax.plot(marg_x3_cart_coords[:,0], marg_x3_cart_coords[:,1],\n        pdf3, color = 'red', zorder=10,\n        label=\"$[x_3, x_1+x_2]$ ~ Dir([{},{}])\".format(alpha_agg3[0],\n        alpha_agg3[1]))\n\nax.view_init(30, -130)\nax.set_title(\"Dir([{},{},{}])\".format(alpha[0], alpha[1],\n             alpha[2]), fontsize=18)\nax.zaxis.set_rotate_label(False) \nax.set_zlabel(\"$f_\\mathregular{X}(\\mathregular{x})$\", fontsize=18,\n               weight=\"bold\", style=\"italic\", labelpad=15)\nax.set_zlim([0, 17])\n\nax.xaxis.set_ticklabels([])\nax.yaxis.set_ticklabels([])\nax.set_xticks([])\nax.set_yticks([])\nax.legend(loc='best', fontsize=15)\n\nax.text(-0.06, -0.03, 0, \"$x_1$\", fontsize=17)\nax.text(1.03, 0.03, 0, \"$x_2$\", fontsize=17)\nax.text(0.5, H+0.09, 0, \"$x_3$\", fontsize=17)\n\nplt.show()\n```"]