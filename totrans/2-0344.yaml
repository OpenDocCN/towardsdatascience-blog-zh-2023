- en: Automate Machine Learning Deployment with GitHub Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/automate-machine-learning-deployment-with-github-actions-f752766981b1](https://towardsdatascience.com/automate-machine-learning-deployment-with-github-actions-f752766981b1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Faster Time to Market and Increase Efficiency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://khuyentran1476.medium.com/?source=post_page-----f752766981b1--------------------------------)[![Khuyen
    Tran](../Images/98aa66025ad29b618e875c75f1c400a5.png)](https://khuyentran1476.medium.com/?source=post_page-----f752766981b1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f752766981b1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f752766981b1--------------------------------)
    [Khuyen Tran](https://khuyentran1476.medium.com/?source=post_page-----f752766981b1--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f752766981b1--------------------------------)
    ·8 min read·Apr 16, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider this scenario: A more accurate machine learning model is developed
    every month and added to the main branch.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ccdff6e6a105e25ad475d5c870eebe0d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: To deploy the model, you must download it to your machine, package it, and deploy
    it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/23f375e6391f79e8a12f898563401bb6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: However, as you may have other responsibilities, it could take days or even
    weeks before you can complete the deployment, which slows down the release process
    and takes up valuable time that could be spent on other tasks.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1d7da9399f4687046772d64aeaefddd1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Wouldn’t it be great if the model could be automatically deployed to production
    whenever a new version is pushed to the main branch? This is where continuous
    deployment comes in handy.
  prefs: []
  type: TYPE_NORMAL
- en: What is Continuous Deployment?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous article, we discussed the use of continuous integration (CI)
    for testing code changes in a pull request before merging them into the main branch.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/build-reliable-machine-learning-pipelines-with-continuous-integration-ea822eb09bf6?source=post_page-----f752766981b1--------------------------------)
    [## Build Reliable Machine Learning Pipelines with Continuous Integration'
  prefs: []
  type: TYPE_NORMAL
- en: Automate Machine Learning Workflow with Continuous Integration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/build-reliable-machine-learning-pipelines-with-continuous-integration-ea822eb09bf6?source=post_page-----f752766981b1--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon successful testing of the code and model, continuous deployment (CD) can
    be utilized to automatically deploy a new model to production. Automating model
    deployment can provide numerous advantages, including:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Faster time-to-market**: Continuous deployment reduces the time needed to
    release new machine learning models to production.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Increased efficiency**: Automating the deployment process reduces the resources
    required to deploy machine learning models to production.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This article will show you how to create a CD pipeline for a machine-learning
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Feel free to play and fork the source code of this article here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/khuyentran1401/cicd-mlops-demo/?source=post_page-----f752766981b1--------------------------------)
    [## GitHub - khuyentran1401/cicd-mlops-demo: Demo for CI/CD in a machine learning
    project'
  prefs: []
  type: TYPE_NORMAL
- en: CI/CD (Continuous Integration/Continuous Deployment) is an essential practice
    for any software development project…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/khuyentran1401/cicd-mlops-demo/?source=post_page-----f752766981b1--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Build a CD Pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To build a CD pipeline, we will perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Save model object and model metadata
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload the model to a remote storage
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up a platform to deploy your model
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a GitHub workflow to deploy models into production
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/9c24f4b1e74be095c5533d0030515666.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore each of these steps in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Save model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use [MLEM](https://mlem.ai/), an open-source tool, to save and deploy
    the model.
  prefs: []
  type: TYPE_NORMAL
- en: To save an experiment’s model using MLEM, begin by calling its `save` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[Full script.](https://github.com/khuyentran1401/cicd-mlops-demo/blob/main/src/train.py)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Running this script will create two files: a model file and a metadata file.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c933a709fb2fdcc2cccf4aa38490afa4.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'The metadata file captures various information from a model object, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Model artifacts such as the model’s size and hash value, which are useful for
    versioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model methods such as`predict` and `predict_proba`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input data schema
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python requirements used to train the model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[View the metadata file.](https://github.com/khuyentran1401/cicd-mlops-demo/blob/main/model/svm.mlem)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Push the model to a remote storage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By pushing the model to remote storage, we can store our models and data in
    a centralized location that can be accessed by the GitHub workflow.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fc65d63a9a8f020ffc7bc8cee5254b0f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use [DVC](https://dvc.org/) for model management because it offers
    the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Version control**: DVC enables keeping track of changes to models and data
    over time, making it easy to revert to previous versions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Storage**: DVC can store models and data in different types of storage systems,
    such as Amazon S3, Google Cloud Storage, and Microsoft Azure Blob Storage.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Reproducibility**: By versioning data and models, experiments can be easily
    reproduced with the exact same data and model versions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[](/introduction-to-dvc-data-version-control-tool-for-machine-learning-projects-7cb49c229fe0?source=post_page-----f752766981b1--------------------------------)
    [## Introduction to DVC: Data Version Control Tool for Machine Learning Projects'
  prefs: []
  type: TYPE_NORMAL
- en: Just like Git, but with Data!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/introduction-to-dvc-data-version-control-tool-for-machine-learning-projects-7cb49c229fe0?source=post_page-----f752766981b1--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: To integrate DVC with MLEM, we can use [DVC pipeline](https://dvc.org/doc/start/data-management/data-pipelines).
    With the DVC pipeline, we can specify the command, dependencies, and parameters
    needed to create certain outputs in the `dvc.yaml` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[View the full file.](https://github.com/khuyentran1401/cicd-mlops-demo/blob/main/dvc.yaml)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the example above, we specify the outputs to be the files `model/svm` and
    `model/svm.mlem` under the `outs` field. Specifically,
  prefs: []
  type: TYPE_NORMAL
- en: The `model/svm` is cached, so it will be uploaded to a DVC remote storage, but
    not committed to Git. This ensures that large binary files do not slow down the
    performance of the repository.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `mode/svm.mlem` is not cached, so it won’t be uploaded to a DVC remote storage
    but will be committed to Git. This allows us to track changes in the model while
    still keeping the repository’s size small.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/d4ddbcc1016775d4344332d20e6f2cf6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the pipeline, type the following command on your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, specify the remote storage location where the model will be uploaded
    to in the file `.dvc/config` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To push the modified files to the remote storage location named “read-write”,
    simply run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Set up a platform to deploy your model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, let’s figure out a platform to deploy our model. MLEM supports deploying
    your model to the following platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heroku
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fly.io
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sagemaker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This project chooses [Fly.io](https://fly.io/) as a deployment platform as it’s
    easy and cheap to get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create applications on Fly.io in a GitHub workflow, you’ll need an access
    token. Here’s how you can get one:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign up for a [Fly.io](https://fly.io/) account (you’ll need to provide a credit
    card, but they won’t charge you until you exceed free limits).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in and click “Access Tokens” under the “Account” button in the top right
    corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new access token and copy it for later use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/fe8c4c9ff1bf8e1dbde9c564923fcae5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Create a GitHub workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now it comes to the exciting part: Creating a GitHub workflow to deploy your
    model! If you are not familiar with GitHub workflow, I recommend reading [this
    article](https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions)
    for a quick overview.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create the workflow called `publish-model` in the file `.github/workflows/publish.yaml`
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0b5017286fe6af0a3a53b9ae03da2077.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the file looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `on` field specifies that the pipeline is triggered on a push event to the
    main branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `publish-model` job includes the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Checking out the code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the Python environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pulling a model from a remote storage location using DVC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up flyctl to use Fly.io
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the model to Fly.io
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note that for the job to function properly, it requires the following:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS credentials to pull the model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fly.io’s access token to deploy the model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To ensure the secure storage of sensitive information in our repository and
    enable GitHub Actions to access them, we will use [encrypted secr](https://docs.github.com/en/actions/security-guides/encrypted-secrets)ets.
  prefs: []
  type: TYPE_NORMAL
- en: To create encrypted secrets, click “Settings” -> “Actions” -> “New repository
    secret.”
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b23606ae0dbcded703cc70795d4483b3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: That’s it! Now let’s try out this project and see if it works as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Try it Out
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Follow the instructions in [this GitHub repository](https://github.com/khuyentran1401/cicd-mlops-demo#try-it-out)
    to try out the project.
  prefs: []
  type: TYPE_NORMAL
- en: Once a pull request is created in the repository, a GitHub workflow is initiated
    to perform tests on the code and model. The pull request will be merged after
    all the tests have successfully passed.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ccba247997fcab1f5dc36e492e772fbf.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Once the changes are merged, a CD pipeline will be triggered to deploy the ML
    model.
  prefs: []
  type: TYPE_NORMAL
- en: To view the workflow run, click the workflow then click the `publish-model`
    job.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1ead9dd6c7d5776dc29d92e2e8a68768.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/56fff170f1084a3c865236eeac7a4ca1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Click the link under the “Deploy model” step to view the website to which the
    model is deployed.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/afef008638f930cbd78128fec3f09788.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Here’s what the website looks like. Click “Try it out” to try out the model
    on a sample dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a8fccf6f086ed8ef817e6d2f25aa30ea.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '[View the website.](https://icy-dream-2841.fly.dev/)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You have just learned how to create a CD pipeline to automate
    your machine-learning workflows. Combining CD with CI will allow your companies
    to catch errors early, reduce costs, and reduce time-to-market.
  prefs: []
  type: TYPE_NORMAL
- en: I love writing about data science concepts and playing with different data science
    tools. You can connect with me on [LinkedIn](https://www.linkedin.com/in/khuyen-tran-1401/)
    and [Twitter](https://twitter.com/KhuyenTran16).
  prefs: []
  type: TYPE_NORMAL
- en: 'Star [this repo](https://github.com/khuyentran1401/Data-science) if you want
    to check the code for the articles I have written. Follow me on Medium to stay
    notified about my latest data science articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://pub.towardsai.net/github-actions-in-mlops-automatically-check-and-deploy-your-ml-model-9a281d7f3c84?source=post_page-----f752766981b1--------------------------------)
    [## GitHub Actions in MLOps: Automatically Check and Deploy Your ML Model'
  prefs: []
  type: TYPE_NORMAL
- en: Automate Your ML Pipeline with GitHub Actions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pub.towardsai.net](https://pub.towardsai.net/github-actions-in-mlops-automatically-check-and-deploy-your-ml-model-9a281d7f3c84?source=post_page-----f752766981b1--------------------------------)
    [](/validate-your-pandas-dataframe-with-pandera-2995910e564?source=post_page-----f752766981b1--------------------------------)
    [## Validate Your pandas DataFrame with Pandera
  prefs: []
  type: TYPE_NORMAL
- en: Make Sure Your Data Matches Your Expectation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/validate-your-pandas-dataframe-with-pandera-2995910e564?source=post_page-----f752766981b1--------------------------------)
    [](/create-observable-and-reproducible-notebooks-with-hex-460e75818a09?source=post_page-----f752766981b1--------------------------------)
    [## Create Observable and Reproducible Notebooks with Hex
  prefs: []
  type: TYPE_NORMAL
- en: How to integrate notebooks into your data pipeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/create-observable-and-reproducible-notebooks-with-hex-460e75818a09?source=post_page-----f752766981b1--------------------------------)
    [](/simplify-data-science-workflows-on-bigquery-with-fugue-and-python-5215a1b65e43?source=post_page-----f752766981b1--------------------------------)
    [## Simplify Data Science Workflows on BigQuery with Fugue and Python
  prefs: []
  type: TYPE_NORMAL
- en: Speed Up Iteration and Cut Computation Cost
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/simplify-data-science-workflows-on-bigquery-with-fugue-and-python-5215a1b65e43?source=post_page-----f752766981b1--------------------------------)
  prefs: []
  type: TYPE_NORMAL
