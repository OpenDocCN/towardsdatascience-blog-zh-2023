- en: 'EDA with Polars: Step-by-Step Guide to Aggregate and Analytic Functions (Part
    2)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Polars 进行探索性数据分析：聚合和分析函数的逐步指南（第二部分）
- en: 原文：[https://towardsdatascience.com/eda-with-polars-step-by-step-guide-to-aggregate-and-analytic-functions-part-2-a22d986315aa](https://towardsdatascience.com/eda-with-polars-step-by-step-guide-to-aggregate-and-analytic-functions-part-2-a22d986315aa)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/eda-with-polars-step-by-step-guide-to-aggregate-and-analytic-functions-part-2-a22d986315aa](https://towardsdatascience.com/eda-with-polars-step-by-step-guide-to-aggregate-and-analytic-functions-part-2-a22d986315aa)
- en: Advanced aggregates and rolling averages at lightning speed with Polars
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Polars 实现闪电般速度的高级聚合和滚动平均
- en: '[](https://medium.com/@antonsruberts?source=post_page-----a22d986315aa--------------------------------)[![Antons
    Tocilins-Ruberts](../Images/363a4f32aa793cca7a67dea68e76e3cf.png)](https://medium.com/@antonsruberts?source=post_page-----a22d986315aa--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a22d986315aa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a22d986315aa--------------------------------)
    [Antons Tocilins-Ruberts](https://medium.com/@antonsruberts?source=post_page-----a22d986315aa--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@antonsruberts?source=post_page-----a22d986315aa--------------------------------)[![Antons
    Tocilins-Ruberts](../Images/363a4f32aa793cca7a67dea68e76e3cf.png)](https://medium.com/@antonsruberts?source=post_page-----a22d986315aa--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a22d986315aa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a22d986315aa--------------------------------)
    [Antons Tocilins-Ruberts](https://medium.com/@antonsruberts?source=post_page-----a22d986315aa--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a22d986315aa--------------------------------)
    ·9 min read·Jul 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a22d986315aa--------------------------------)
    ·9 分钟阅读·2023年7月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/e244e107d7b8e9c628cb4f7312d675a8.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e244e107d7b8e9c628cb4f7312d675a8.png)'
- en: Photo by [Spencer Davis](https://unsplash.com/@spencerdavis?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由 [Spencer Davis](https://unsplash.com/@spencerdavis?utm_source=medium&utm_medium=referral)
    拍摄，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the [the first part of this series](/eda-with-polars-step-by-step-guide-for-pandas-users-part-1-b2ec500a1008)
    we’ve covered the basics of Polars and compared its functionalities and syntax
    with Pandas. This part will take the complexity of our queries a notch further,
    so we’ll see how to perform some fairly complex aggregates, rolling statistics,
    and more. If you’re not familiar with Polars or feel like you need a refresher,
    make sure to check out the [previous part](/eda-with-polars-step-by-step-guide-for-pandas-users-part-1-b2ec500a1008).
    Otherwise, let’s continue exploring Polars!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [这一系列的第一部分](/eda-with-polars-step-by-step-guide-for-pandas-users-part-1-b2ec500a1008)
    中，我们介绍了 Polars 的基础知识，并将其功能和语法与 Pandas 进行了比较。本部分将进一步增加查询的复杂性，因此我们将学习如何执行一些相当复杂的聚合、滚动统计等。如果你对
    Polars 不熟悉或需要复习，确保查看 [上一部分](/eda-with-polars-step-by-step-guide-for-pandas-users-part-1-b2ec500a1008)。否则，我们继续探索
    Polars！
- en: Setup
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: As in the last part, make sure to clone/pull this [GitHub repo](https://github.com/aruberts/tutorials/tree/main/polars)
    since it has all the code you need for this post. In particular, we’ll be covering
    this [notebook](https://github.com/aruberts/tutorials/blob/main/polars/time_analysis.ipynb),
    so make sure to get it if you want to follow along.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一部分一样，确保克隆/拉取这个 [GitHub 仓库](https://github.com/aruberts/tutorials/tree/main/polars)，因为它包含了你需要的所有代码。特别是，我们将讨论这个
    [笔记本](https://github.com/aruberts/tutorials/blob/main/polars/time_analysis.ipynb)，所以如果你想跟随，请务必获取它。
- en: 'Data used in this project can be downloaded from [Kaggle](https://www.kaggle.com/datasets/datasnaek/youtube-new?resource=download&sort=published)
    (CC0: Public Domain). I assume that you already have Polars installed, so just
    make sure to update it to the latest version using `pip install -U polars` .'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '本项目使用的数据可以从 [Kaggle](https://www.kaggle.com/datasets/datasnaek/youtube-new?resource=download&sort=published)
    下载（CC0: 公共领域）。我假设你已经安装了 Polars，所以只需确保使用 `pip install -U polars` 将其更新到最新版本即可。'
- en: Data Processing
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据处理
- en: Reading Data
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取数据
- en: Similar to the last post, let’s read in the UK trending dataset and the mappings
    for `category_id` columns.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于上一篇文章，我们来读取 UK trending 数据集和 `category_id` 列的映射。
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Cleaning Data
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清理数据
- en: Next, let’s parse the dates and map category IDs to the category names. To make
    it more production ready, I’m going to put the date parsing code into a generalisable
    function.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们解析日期并将类别 ID 映射到类别名称。为了使其更具生产就绪性，我打算将日期解析代码放入一个通用函数中。
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that because the function return a DataFrame we can chain the category
    mapping to create an elegant (almost) one-linear cleaning code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，因为函数返回的是一个 DataFrame，我们可以链式调用类别映射来创建一个优雅的（几乎是）单行清理代码。
- en: Feature Engineering
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特征工程
- en: Frequently, you’ll need to create new features derived from the ones you already
    have. For example, in this YouTube dataset we can calculate the number of days
    it took for a video to get into the Trending tab since we have `publish_time`
    and `trending_date` . Additionally, we can also calculate different ratios with
    likes, dislikes, comments and views.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你需要创建源自现有特征的新特征。例如，在这个 YouTube 数据集中，我们可以计算一个视频进入“趋势”标签所需的天数，因为我们有 `publish_time`
    和 `trending_date`。此外，我们还可以计算点赞、点踩、评论和观看次数的不同比率。
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/adb8c51f894a80776296759e7a0ed5dc.png)![](../Images/29b4b059a1d3e4767894ad9160b04141.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/adb8c51f894a80776296759e7a0ed5dc.png)![](../Images/29b4b059a1d3e4767894ad9160b04141.png)'
- en: Sense checks of derived features. Screenshots by author.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 派生特征的有效性检查。作者截图。
- en: Furthermore, we can extract year, month, and weekday from the `trending_date`
    column which can be used in further analysis.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以从 `trending_date` 列中提取年份、月份和星期几，这些可以用于进一步分析。
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Finally, the dataset is pre-processed and ready for further analysis. Let’s
    start by exploring the time it takes to get into trending in more depth.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，数据集已预处理完毕，准备进行进一步分析。让我们开始更深入地探索进入趋势所需的时间。
- en: Time to Trending Analysis
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进入趋势时间分析
- en: Since a video can appear in the trending dataset multiple times (i.e. on different
    dates), we need to first create a data frame with one video per row and the correct
    time it took it to get into trending. For example, consider this video that appears
    in the dataset 3+ times.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于一个视频可能多次出现在趋势数据集中（即在不同日期），我们需要首先创建一个每行一个视频的数据框，并标明其进入趋势所需的正确时间。例如，考虑这段出现在数据集中
    3 次以上的视频。
- en: '![](../Images/6fdc7e1f966aed4a058d5190232ea85b.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6fdc7e1f966aed4a058d5190232ea85b.png)'
- en: Screenshot by author.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图。
- en: 'The actual time it took to get into trending is 1 day and then it stayed in
    trending for a few days. We can use a `.groupby()` method to group by `video_id`
    and get a few useful values:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 实际进入趋势所需的时间是 1 天，然后它在趋势中停留了几天。我们可以使用 `.groupby()` 方法按 `video_id` 分组，并获取一些有用的值：
- en: Time it took to get into trending (minimum value of `time_to_trending`)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入趋势所需的时间（`time_to_trending` 的最小值）
- en: Time it was in the Trending tab (maximum value minus minimum value of `trending_date`)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“趋势”标签中的停留时间（`trending_date` 的最大值减去最小值）
- en: In addition, we’d like to bring in other information about the video e.g. `channel_title`
    or `title` for further analysis. To do this, we can use the `.groupby()` method
    with multiple `by` arguments.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还希望引入有关视频的其他信息，例如 `channel_title` 或 `title` 以进行进一步分析。为此，我们可以使用 `.groupby()`
    方法和多个 `by` 参数。
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Interestingly, the average time to trending is much larger than the median indicating
    that there are large outliers in this data. To not bias the further analysis,
    let’s filter out all the videos that took longer than 60 days to get into trending.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，进入趋势的平均时间远大于中位数，表明数据中存在较大的异常值。为了不对进一步分析产生偏差，让我们筛选出所有进入趋势时间超过 60 天的视频。
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notice how easy it is to compose and stack quite complicated queries!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意编写和堆叠相当复杂的查询是多么简单！
- en: Fastest Categories & Channels to Get Into Trending
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最快进入趋势的类别和频道
- en: First things first, let’s do this analysis only for the categories that have
    appeared in trending at least 100 times since statistics for infrequent categories
    won’t be as reliable. There are many ways of filtering out these categories (e.g.
    using `.value_counts()` ) but this time let’s use `pl.count().over()` to introduce
    a new expression. Using this method, we can count the number of rows over `category_id`
    which should add a new column `times_in_trending` to the `time_to_trending_df`
    . You can see that the syntax is quite similar to PySpark and SQL, so it should
    be familiar to the most of data professionals.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们仅对出现过 100 次以上的类别进行分析，因为统计不频繁的类别的可靠性较差。有很多方法可以过滤这些类别（例如，使用 `.value_counts()`），但这次我们使用
    `pl.count().over()` 来引入一种新的表达方式。使用这种方法，我们可以计算 `category_id` 的行数，这应该会向 `time_to_trending_df`
    添加一个新列 `times_in_trending`。你会发现这个语法与 PySpark 和 SQL 非常相似，因此大多数数据专业人员应该很熟悉。
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After counting the number of occurrences per category, it’s quite trivial to
    filter the infrequent categories out and to calculate the average time to trending
    by group. While this gets the job done, we’ll need to copy-paste this query for
    the `channel_title` level analysis as well which is not very elegant. Instead,
    let’s create a function with a few available parameters to make it more generic.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在统计每个类别的出现次数之后，过滤不频繁的类别并按组计算平均趋势时间非常简单。虽然这能完成工作，但我们还需要复制粘贴这个查询到 `channel_title`
    层级分析中，这样不太优雅。相反，让我们创建一个带有几个可用参数的函数，使其更加通用。
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/5c88df7cb92585510e78e4e91fced00e.png)![](../Images/0e9be23584907792a6693f2ca429fb7c.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5c88df7cb92585510e78e4e91fced00e.png)![](../Images/0e9be23584907792a6693f2ca429fb7c.png)'
- en: Fastest categories and channels to get into trending. Screenshot by author.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 进入趋势的最快类别和频道。作者截屏。
- en: Interesting but kind of expected results — the late shows absolutely dominate
    the Trending tab of YouTube (at least in 2018). Jimmy Fallon gets an express ticket
    to trending, closely followed by SNL and The Ellen Show.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣但有点意料之中的结果——深夜节目绝对主导了 YouTube 的趋势标签（至少在 2018 年）。吉米·法伦获得了进入趋势的快速通道，其次是 SNL
    和《艾伦秀》。
- en: Categories & Channels That Stay in Trending
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持在趋势中的类别和频道
- en: Besides getting into the Trending tab, it’s also important who stays there the
    longest. This analysis is similar to the last one — we want to average some metric
    (days in trending) by group (e.g. category) but only for frequent group values
    (e.g. that appear more than 10 times). Hence, let’s re-use the amazing function
    we’ve previously created.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 除了进入趋势标签，谁能在趋势中停留时间最长也很重要。这项分析类似于上一个分析——我们想要按组（例如类别）平均某个指标（趋势中的天数），但只针对频繁的组值（例如出现超过
    10 次）。因此，让我们重复使用之前创建的那个很棒的函数。
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/a691b6097b058c5936006e3711f228dd.png)![](../Images/e8f660c5047b58fb9f4cbebe111273c5.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a691b6097b058c5936006e3711f228dd.png)![](../Images/e8f660c5047b58fb9f4cbebe111273c5.png)'
- en: Interestingly, there’s no overlap between the categories. So even though it
    might take some time for a music clip to get into the trending, it’s more likely
    to stay there for longer. The same goes for movie trailers and other entertainment
    content.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，各类别之间没有重叠。因此，即使音乐视频进入趋势可能需要一些时间，但它更有可能在趋势中停留更长时间。电影预告片和其他娱乐内容也是如此。
- en: Trending Categories Over Time
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随时间推移的趋势类别
- en: 'So we know that the live-comedy shows get into the trending the fastest and
    music and entertainment videos stay there the longest. But has it always been
    the case? To answer this question, we need to create some rolling aggregates.
    Let’s answer three main questions in this section:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们知道，现场喜剧节目进入趋势的速度最快，而音乐和娱乐视频在趋势中停留的时间最长。但情况一直都是这样吗？要回答这个问题，我们需要创建一些滚动汇总。让我们在这一部分回答三个主要问题：
- en: What is the total number of trending videos per category per month?
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个月每个类别的总趋势视频数量是多少？
- en: What is the number of new videos per category per month?
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个月每个类别的新视频数量是多少？
- en: How do the categories compare when it comes to views over time?
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从视图数量来看，各类别的比较如何？
- en: Total Number of Monthly Trending Videos per Category
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 每个类别每月的总趋势视频数量
- en: First, let’s look at the total number of videos per category per month. To get
    this statistic, we need to use `.groupby_dynamic()` method that allows us to group
    by the date column (specified as `index_column` ) and any other column of choice
    (specified as `by` parameter). The grouping frequency is controlled according
    to the `every` parameter.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/4ea1c6f02f8a6b52416bfb5f93818697.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: Resulting resampled data frame. Screenshot by author.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: You can see the resulting DataFrame above. Very nice property of Polars is that
    we can output the boundaries to sense check the results. Now, let’s do some plotting
    to visualise the patterns.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/0af2d888e3dbd939bd89f0b8ca136375.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: Number of videos plot. Generated by author.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: From this plot we can see that Music has the largest share of Trending stating
    from 2018\. This might indicate some strategic shift within YouTube to become
    the go-to platform for music videos. Entertainment seems to be on the gradual
    decline together with People & Blogs and Howto & Style categories.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Number of New Monthly Trending Videos per Category
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The query is exactly the same, except now we need to provide as `index_column`
    the first the date when a video got into Trending. Would be nice to create a function
    here, but I’ll leave this as an exercise for a curious reader.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/2a87a51ab4e4947c77b2c5fa27aba588.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: Number of new videos plot. Generated by author.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Here we get an interesting insights — the number of new videos by Entertainment
    and Music is roughly equal throughout the time. Since Music videos stay in Trending
    much longer, they are overrepresented in the Trending counts, but when these videos
    are deduped this pattern disappears.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Running Average of Views per Category
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the last step of this analysis, let’s compare two most popular categories
    (Music and Entertainment) according to their views over time. To perform this
    analysis, we’re going to use the 7 day running average statistic to visualise
    the trends. To calculate this rolling statistic Polars has a handy method called
    `.groupby_rolling()` . Before applying it though, let’s sum up all the views by
    `category_id` and `trending_date` and then sort the DataFrame accordingly. This
    format is required to correctly calculate the rolling statistics.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Once the DataFrame is ready, we can use `.groupby_rolling()` method to create
    the rolling average statistic by specifying `1w` in the period argument and creating
    an average expression in the `.agg()` method.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/641c0cb89292c17def0cef4be44c1d12.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: According to the 7-day rolling average views, Music completely dominates the
    Trending tab and starting from February 2018 the gap between these two categories
    has increased massively.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After finishing this post and following along the code you should get a much
    better understanding of advanced aggregate and analytic functions in Polars. In
    particular, we’ve covered:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Basics of working with `pl.datetime`
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.groupby()` aggregations with multiple arguments'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`.groupby()`进行多参数聚合
- en: The use of `.over()` to create aggregates over a specific group
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`.over()`在特定组中创建汇总
- en: The use of `.groupby_dynamic()` to generate aggregates over time windows
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`.groupby_dynamic()`在时间窗口中生成汇总
- en: The use of `.groupby_rolling()` to generate rolling aggregates over period
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`.groupby_rolling()`在一段时间内生成滚动汇总
- en: Armed with this knowledge you should be able to perform almost every analytical
    task you have at the lightning speed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握这些知识后，你应该能够以闪电般的速度完成几乎所有分析任务。
- en: You might have felt that some of this analysis felt very ad-hoc and you would
    be right. The next part is going to address exactly this topic — how to structure
    and create data processing pipelines. So stay tuned!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会觉得一些分析看起来很临时，你的感觉是对的。下一部分将专门讨论这个话题——如何构建和创建数据处理管道。敬请期待！
- en: Not a Medium Member yet?
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还不是Medium会员？
- en: '[](https://medium.com/@antonsruberts/membership?source=post_page-----a22d986315aa--------------------------------)
    [## Join Medium with my referral link — Antons Tocilins-Ruberts'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@antonsruberts/membership?source=post_page-----a22d986315aa--------------------------------)
    [## 使用我的推荐链接加入 Medium — Antons Tocilins-Ruberts'
- en: Read every story from Antons Tocilins-Ruberts (and thousands of other writers
    on Medium). Your membership fee directly…
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读Antons Tocilins-Ruberts（以及Medium上成千上万其他作者）的每个故事。你的会员费用直接…
- en: medium.com](https://medium.com/@antonsruberts/membership?source=post_page-----a22d986315aa--------------------------------)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@antonsruberts/membership?source=post_page-----a22d986315aa--------------------------------)
