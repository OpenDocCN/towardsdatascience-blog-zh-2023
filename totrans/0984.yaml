- en: 'Git For the Modern Data Scientist: 9 Git Concepts You Can’t Ignore'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/git-for-the-modern-data-scientist-9-git-concepts-you-cant-ignore-b4eaf7a154c2](https://towardsdatascience.com/git-for-the-modern-data-scientist-9-git-concepts-you-cant-ignore-b4eaf7a154c2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explained with striking visuals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/?source=post_page-----b4eaf7a154c2--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----b4eaf7a154c2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b4eaf7a154c2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b4eaf7a154c2--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----b4eaf7a154c2--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b4eaf7a154c2--------------------------------)
    ·12 min read·May 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2df9ea9d0ee942c7ecabd1db26dc4e5b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me with Midjourney
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most data scientists feel like a fish out of water when it comes to Git. There
    are software engineers who talk about nothing but Git-things, and there are data
    scientists who say “Huh?” (I wish I could add a sound to this) every time.
  prefs: []
  type: TYPE_NORMAL
- en: That stops today! Since Git is an essential tool for collaboration, I will break
    down *nine* of the most critical Git concepts that data scientists must know like
    the back of their hand.
  prefs: []
  type: TYPE_NORMAL
- en: I can promise that you won’t be nodding your head in fake understanding the
    next time someone talks about Git or version control.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: For the 1000th time…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may have heard it a few hundred times already, but I will err on the side
    of caution and say it for the few hundred and first time:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Git is one of the most critical tools in developing ML and AI systems.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/a10be2945aa15fe0a62bf6092f20d94c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me
  prefs: []
  type: TYPE_NORMAL
- en: If your idea of a machine learning or data science project involves models cooked
    up in notebooks with creatively named files such as “notebook1”, “notebook2”,
    “notebook_final”, and “notebook_final_final”, then don’t bother with Git.
  prefs: []
  type: TYPE_NORMAL
- en: However, if you aim to deploy models that others can use without migraines,
    Git is a relatively small price to pay.
  prefs: []
  type: TYPE_NORMAL
- en: Git allows you to keep track of changes to your code and data, collaborate with
    others, and maintain a history of your project. With Git, you can easily revert
    to a previous version of your work, compare different versions, and merge changes
    made by multiple contributors.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, Git easily integrates with other popular MLOps tools like DVC for
    data version control, making it an essential tool for data scientists.
  prefs: []
  type: TYPE_NORMAL
- en: 0\. Repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Basically, a repository is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/40e71e09eeda643d5aa7d044e1a35baa.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me
  prefs: []
  type: TYPE_NORMAL
- en: It is a folder on your machine. It can have no files, three files, or a hundred.
    The only thing needed to convert that folder into a Git repository is to call
    `git init` inside it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c71a68c959f3b9ad8091f8da8fe17e6d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me. Initializing a Git repo.
  prefs: []
  type: TYPE_NORMAL
- en: A machine learning repository usually has folders to store data, models, and
    code for loading, cleaning, and transforming data, as well as selecting, training,
    and saving models for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: There will be other miscellaneous files, such as the `.git` folder for Git internals
    and metadata files.
  prefs: []
  type: TYPE_NORMAL
- en: All of these make up a single repository, and Git is usually enough to track
    them (except for data and models. For that, see [this article](/how-to-version-gigabyte-sized-datasets-just-like-code-with-dvc-in-python-5197662e85bd)
    afterward).
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Tracked, untracked
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you initialize Git inside a directory, by default, any existing or new
    files/directories you create will be untracked by Git.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dec5dd4ba088601d4058ff11eb6438b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me. Showcase of the `git status` command
  prefs: []
  type: TYPE_NORMAL
- en: This means that any future changes you make to them will also be untracked.
    Therefore, you need to put those files under Git supervision by running `git add
    path/to/file.py`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a9dce75b32a5b81b858d9aa4d0d9f3ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me. Tracking files and directories in Git.
  prefs: []
  type: TYPE_NORMAL
- en: After calling `git add` on files, they will be under Git-watch.
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to add all files in the repository (although this is highly unlikely),
    you can call `git add .`.
  prefs: []
  type: TYPE_NORMAL
- en: There are also cases where you never want files to be tracked by Git. This is
    when you create a `.gitignore` file.
  prefs: []
  type: TYPE_NORMAL
- en: As the name suggests, files added to `.gitignore` won't be tracked or indexed
    by Git for as long as they are there. Typical items you should add to `.gitignore`
    for data projects are large data files like CSVs, parquets, images, videos, or
    audio. Git has historically been terrible at handling those.
  prefs: []
  type: TYPE_NORMAL
- en: It handles the rest like a champ.
  prefs: []
  type: TYPE_NORMAL
- en: P.S. You can create a `.gitignore` file in the terminal with `touch .gitignore`
    and add files/folders to it with `echo "filename" >> .gitignore` on new lines.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Commit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Git commit is a precious thing. The entire idea of version control is based
    on it.
  prefs: []
  type: TYPE_NORMAL
- en: When you call `git commit` inside a Git repository, you take a snapshot of every
    Git-tracked file for that specific point in time. Think of it like a time capsule
    with contents (versions) of your project from different periods.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/192dacfa032109e1ee8a56728f2a1b63.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me. Making your first commit.
  prefs: []
  type: TYPE_NORMAL
- en: All the commits you make will form your Git history or Git tree, as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/96448ca3496eaaacf2cef6adaf434a4b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me. A small Git tree.
  prefs: []
  type: TYPE_NORMAL
- en: A good Git tree organizes the linear progression of your repository. By breaking
    down your code changes into discrete, well-defined commits, you can map out the
    progress of your repository almost like a book.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you can browse through the pages of this Git book through commits.
  prefs: []
  type: TYPE_NORMAL
- en: Just like a writer puts a lot of effort into writing each page of their book,
    you should treat your commits with care.
  prefs: []
  type: TYPE_NORMAL
- en: You shouldn’t be making commits for the sake of committing. Consider them as
    little pieces of history, and know that future versions of yourself and other
    developers should look at them with delight, rather than disgust.
  prefs: []
  type: TYPE_NORMAL
- en: 'Traditional advice: A good commit has an informative message describing the
    changes made.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Some common scenarios to commit in a typical machine learning project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Implementing a new feature: writing code that adds a new functionality like
    a new function, class, class method, training a new model, new data cleaning operation,
    etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fixing a bug: documenting bug fixes to existing functions, methods, and classes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Improving performance: writing code that enhances an existing feature like
    optimizing blocks of code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating docs and dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Machine learning experiments: in a project, you will run dozens of experiments
    to choose and tune the best model. [Each model run should be tracked as a commit](https://pub.towardsai.net/how-to-track-ml-experiments-with-dvc-inside-vscode-to-boost-your-productivity-a654ace60bab).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3\. Staging area
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By talking about commits, we have got ahead of ourselves. Before closing the
    cap of the commit capsule, you have to make sure the contents within are right.
  prefs: []
  type: TYPE_NORMAL
- en: This involves telling Git exactly which changes from which files you want to
    commit. Sometimes, new changes might come from several files and you may only
    want to commit some of them and leave the rest for future commits.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where we lift the curtains and reveal the staging area (pun intended):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/994e52a84ed86c4d6053af88d4ce004c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me. The staging area is changed after the changes in train.py are added.
  prefs: []
  type: TYPE_NORMAL
- en: The idea is that you must have some way of double-checking, editing, or undoing
    the changes you want to add to your Git history before you press that commit button.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the new changes to the staging area (or **Git index** as some kids say
    it) allows you to do that. The area holds the changes you want to include in the
    next commit.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say you changed both `clean.py` and `train.py`. If you add the changes
    in `train.py` with `git add train.py` to the staging area, the next commit will
    only include that change.
  prefs: []
  type: TYPE_NORMAL
- en: The modified `clean.py` will stay as is (uncommitted).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/994e52a84ed86c4d6053af88d4ce004c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me. The image above reshown for clarity.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, here is an easy workflow for you:'
  prefs: []
  type: TYPE_NORMAL
- en: Track new files with Git (only done once)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add changes in tracked files to the staging area with `git add changed_file.extension`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit the changes in the staging area to history with `git commit -m "Commit
    message"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 4\. Hashes and tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apart from messages, all Git commits have hashes so you can point to them more
    easily.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/20e9a5aab08ad9c4b35f1922b755c02d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me. Three sample commits with 7-character hashes.
  prefs: []
  type: TYPE_NORMAL
- en: A hash is a string with 40 hexadecimal characters that give each commit unique
    IDs, like `1a3b5c7d9e2f4g6h8i0j1k2l3m4n5o6p7q8r9s0t`.
  prefs: []
  type: TYPE_NORMAL
- en: They make switching between commits (different versions of your code base) much
    easier with `git checkout HASH`. You don't have to write the full hash when switching.
    Only the first few characters of the hash that make it unique are enough.
  prefs: []
  type: TYPE_NORMAL
- en: You can list all the commits you’ve made with their hashes using `git log` (this
    shows the author and message of the commit).
  prefs: []
  type: TYPE_NORMAL
- en: To list only the hash and the message without cluttering up your screen, you
    can use `git log --oneline`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e4923bc74c22e8a38a50967861bfa77d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me. The command to list your Git log line-by-line.
  prefs: []
  type: TYPE_NORMAL
- en: If hashes intimidate you, there are also **Git tags**. A Git tag is a friendly
    nickname you can give to some important commits (or any) to remember and refer
    to them even more easily.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b8c14686cdf46b56ba779e1042d92725.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me. Four commits with two of them tagged.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the command “git tag” to assign tags to specific commits that are
    important, such as those containing a crucial feature or a significant code base
    release (e.g., `v1.0.0`). Additionally, you can tag a commit that represents your
    best model, such as “`random_forest_best`”.
  prefs: []
  type: TYPE_NORMAL
- en: Think of tags as little human-readable milestones that stand out among all the
    commit hashes.
  prefs: []
  type: TYPE_NORMAL
- en: To clarify, the command `git tag ‘tag_name’` will only add a tag to the last
    commit. If you want to add a tag to a specific commit, you need to specify the
    commit hash at the end of the command, after the tag name.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 5\. Branch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After commits, branches are the bread and butter of Git. 99% of the time, you
    will be working inside a Git branch.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the branch you are on when you initialize Git inside a folder will
    be named either `main` or `master`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/65888cbb303d3432c38b2fa97e01ed64.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me. The master branch.
  prefs: []
  type: TYPE_NORMAL
- en: You can think of other branches as alternate realities of your code base.
  prefs: []
  type: TYPE_NORMAL
- en: By creating a Git branch, you can test and experiment with new features, ideas,
    and fixes without fearing you will mess up your code base.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can test a new algorithm for a classification task in a new
    branch without disrupting the main code base:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/36e11b813e20d5213d12cd9816ef4da0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me. Creating the new SGD branch.
  prefs: []
  type: TYPE_NORMAL
- en: Git branches are very cheap. When you call `git branch new_branch_name`, Git
    creates a pseudo-copy of the master branch without duplicating any of the files.
  prefs: []
  type: TYPE_NORMAL
- en: After creating a new branch and experimenting with your fresh ideas, you have
    the option to delete the branch if the results do not seem promising. On the other
    hand, if you are content with the changes made in the new branch, you can merge
    it with the master branch.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. HEAD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Git repository can have several branches and hundreds of commits. So you might
    raise the excellent question “How does Git know which branch or commit you are
    at?”.
  prefs: []
  type: TYPE_NORMAL
- en: Git uses a special pointer called **HEAD** and that is the answer.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/da3321270729d5ad3e8dae70bad26d06.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me. Switching of the HEAD.
  prefs: []
  type: TYPE_NORMAL
- en: Basically, the HEAD is you. Wherever you are, HEAD follows you in Git. 99% of
    the time, HEAD will be pointing to the **latest commit in the current branch**.
  prefs: []
  type: TYPE_NORMAL
- en: If you make a new commit, HEAD will move on to that. If you switch to a new
    or an old branch, HEAD will switch to the latest commit in that branch.
  prefs: []
  type: TYPE_NORMAL
- en: One use-case for HEAD is when comparing changes in different commits to each
    other. For example, calling `git diff HEAD~1` will compare the latest commit to
    the commit immediately before it.
  prefs: []
  type: TYPE_NORMAL
- en: This also means that `HEAD~n` syntax in Git refers to the *nth* commit *before*
    wherever the HEAD is.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/853d1f7a1beea603b6a4ecb0903a9342.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me. HEAD~n syntax.
  prefs: []
  type: TYPE_NORMAL
- en: You may also go into the dreaded **detached HEAD state**. This doesn’t mean
    Git has lost track of you and doesn’t know where to point.
  prefs: []
  type: TYPE_NORMAL
- en: A detached head state occurs when you use the command `git checkout HASH` to
    check out a specific commit, instead of using **git checkout branch_name**. This
    forces the HEAD to no longer point to the tip of a branch, but rather to a specific
    commit somewhere in the middle of the commit history.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/27628f19f5d4ab78faa08482df1e9192.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me. Detached HEAD state.
  prefs: []
  type: TYPE_NORMAL
- en: Any changes or commits you make in the detached HEAD state will be isolated
    or orphaned and won’t be part of your Git history. The reason is that HEAD is,
    well, the head of branches. It strongly fancies attaching itself to branch tips
    or heads, not its stomach or legs.
  prefs: []
  type: TYPE_NORMAL
- en: So, if you want to make changes in a detached HEAD state, you should call `git
    switch -c new_branch` to create a new branch at the current commit. This gets
    you out of the state and moves the HEAD.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the hang of the HEAD will go a long way in helping you navigate any
    tangled Git tree.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Merge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, what happens after you create a new branch?
  prefs: []
  type: TYPE_NORMAL
- en: Do you discard it if your experiment doesn’t pan out with `git branch -d branch_name`?
    Or do you perform a fabled Git merge?
  prefs: []
  type: TYPE_NORMAL
- en: Basically, a Git merge is a fancy party where two or even more branches come
    together to create a single thicker branch.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3e9757742580ca948f5ef32a97ab2963.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me. Merging of two branches.
  prefs: []
  type: TYPE_NORMAL
- en: When you merge branches, Git takes the code from each branch and combines them
    into a single cohesive code base.
  prefs: []
  type: TYPE_NORMAL
- en: If there are overlapping changes in the branches, i.e. both branches have changed
    lines 5–10 in `train.py`, Git raises a merge conflict.
  prefs: []
  type: TYPE_NORMAL
- en: A merge conflict is as nasty as it sounds. To resolve the conflict, you have
    to decide which branch’s changes you want to keep.
  prefs: []
  type: TYPE_NORMAL
- en: Solving merge conflicts without swearing and boiling from the ears is a rare
    skill developed over time. So, I won’t talk much about them and will refer you
    to [this excellent article](https://www.atlassian.com/git/tutorials/using-branches/merge-conflicts)
    from Atlassian.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Stash
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I tend to screw up a lot when coding. An idea strikes me; I try it out only
    to realize that it is rubbish.
  prefs: []
  type: TYPE_NORMAL
- en: In the beginning, I would foolishly erase the mess into oblivion but later regret
    it. Even though the idea was rubbish, it doesn’t mean I couldn’t use certain code
    blocks in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Then, I discovered Git stashes and they quickly became one of my favorite Git
    features.
  prefs: []
  type: TYPE_NORMAL
- en: When you call `git stash`, Git automatically stashes or hides both staged and
    unstaged changes in the working directory. The files revert back to a state where
    they just came out of a commit.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c43a098c1f87953f22451d579be63107.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me. What happens in a stash?
  prefs: []
  type: TYPE_NORMAL
- en: After you stash your changes, you can continue your work as usual. When you
    want to retrieve them again (anywhere), you can use the `git stash apply` or `git
    stash pop` command. These commands will restore the changes that were previously
    saved in the stash to the working directory.
  prefs: []
  type: TYPE_NORMAL
- en: Note that `git stash` command only saves changes made to tracked files and not
    untracked files. In order to stash both tracked and untracked files, you need
    to use the `-u` flag with the `git stash` command. Ignored files will not be included
    in the stash.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 9\. GitHub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, we come to the age-old question — what is the difference between Git and
    GitHub?
  prefs: []
  type: TYPE_NORMAL
- en: This is like asking the difference between a burger and a cheeseburger.
  prefs: []
  type: TYPE_NORMAL
- en: Git is a version control system that tracks repositories. On the other hand,
    GitHub is a web-based platform used to store Git-controlled repositories online.
  prefs: []
  type: TYPE_NORMAL
- en: Git really shines when its repositories are made online and hence, open for
    collaboration. If a repository is only on your local machine, people can’t work
    on it with you.
  prefs: []
  type: TYPE_NORMAL
- en: So, think of GitHub as a remote mirror of your local repo that people can clone,
    fork, and suggest pull requests.
  prefs: []
  type: TYPE_NORMAL
- en: And if these terms sound alien to you, stick around for my next article where
    I explain N (I don’t know how many right now) GitHub concepts that will clear
    the confusion right away.
  prefs: []
  type: TYPE_NORMAL
- en: Wrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There you go! I hope this article gave you tremendous clarity regarding these
    9 Git concepts. Especially, I find that the concept of HEAD is a real *head*-scratcher
    for a lot of folks :)
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to read the official Git docs for more (very boring, though) information.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading!
  prefs: []
  type: TYPE_NORMAL
- en: Loved this article and, let’s face it, its bizarre writing style? Imagine having
    access to dozens more just like it, all written by a brilliant, charming, witty
    author (that’s me, by the way :).
  prefs: []
  type: TYPE_NORMAL
- en: For only 4.99$ membership, you will get access to not just my stories, but a
    treasure trove of knowledge from the best and brightest minds on Medium. And if
    you use [my referral link](https://ibexorigin.medium.com/membership), you will
    earn my **supernova of gratitude** and a virtual high-five for supporting my work.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----b4eaf7a154c2--------------------------------)
    [## Join Medium with my referral link — Bex T.'
  prefs: []
  type: TYPE_NORMAL
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----b4eaf7a154c2--------------------------------)
    ![](../Images/a01b5e4fb641db5f35b8172a4388e821.png)
  prefs: []
  type: TYPE_NORMAL
- en: Image by me. Via Midjourney.
  prefs: []
  type: TYPE_NORMAL
