["```py\n#Load the libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#Generate the Swiss Roll Dataset\nfrom sklearn.datasets import make_swiss_roll\n\nnp.random.seed(42)\nn_samples = 2000\nX, t = make_swiss_roll(n_samples, noise=0.0)\n\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot(projection='3d')\nax.scatter(X[:,0], X[:,1], X[:,2], c=t, s=10, cmap='hot_r')\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\n#ax.set_zlim(-1,1)\nax.view_init( elev=7, azim=-80)\nplt.show()\n```", "```py\nfrom sklearn.decomposition import PCA\npca_X = PCA(n_components=2)\nprcomps_X= pca_X.fit_transform(X)\n\nfig = plt.figure(figsize=(6,4))\nplt.scatter(prcomps_X[:,0], prcomps_X[:,1],c=t, s=10, cmap='hot_r')\nplt.xlabel('PCA Dimension 1')\nplt.ylabel('PCA Dimension 2')\nplt.show()\n```", "```py\nu = np.linspace(0,1,100)\nt1 = 1.5*np.pi*(1+2*u)\nx1 = t1*np.cos(t1)\nz1 = t1*np.sin(t1)\ny1 = 10*np.ones((len(t1),))\n\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot(projection='3d')\nax.scatter(X[:,0], X[:,1], X[:,2], s=2,c='gray')\nax.plot(x1[20:90],y1[20:90],z1[20:90], c='red',linewidth=2.0)\nax.plot(x1[[20,89]],y1[[20,89]],z1[[20,89]], 'b--',linewidth=2.0)\nax.scatter(x1[[20,89]],y1[[20,89]],z1[[20,89]], 'o',s=50, alpha=1)\nax.text(x1[20], y1[20], z1[20]+1, s='A',c='k',fontweight='bold',size=12,alpha=1 )\nax.text(x1[89], y1[89], z1[89]+1, s='B',c='k',fontweight='bold',size=12,alpha=1 )\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\nax.view_init(7,-80)\nplt.show()\n```", "```py\nfrom sklearn.decomposition import KernelPCA\nkpca_X = KernelPCA(n_components=2, kernel='rbf', gamma=0.002)\nprcomps_kX= kpca_X.fit_transform(X)\n\nfig = plt.figure(figsize=(6,4))\nplt.scatter(prcomps_kX[:,0], prcomps_kX[:,1],c=t, s=10, cmap='hot_r' )\nplt.xlabel('Kernel PCA Dimension 1')\nplt.ylabel('Kernel PCA Dimension 2')\nplt.show()\n```", "```py\nfrom sklearn.manifold import MDS\n\nembedding = MDS(n_components=2, normalized_stress='auto')\nX_MDS = embedding.fit_transform(X)\n\nfig = plt.figure(figsize=(6,4))\nplt.scatter(X_MDS[:,0], X_MDS[:,1],c=t, s=10, cmap='hot_r' )\nplt.xlabel('MDS Dimension 1')\nplt.ylabel('MDS Dimension 2')\nplt.show()\n```", "```py\nfrom sklearn.manifold import Isomap\n\nembedding = Isomap(n_components=2, n_neighbors=7)\nX_iso = embedding.fit_transform(X)\n\nfig = plt.figure(figsize=(6,4))\nplt.scatter(X_iso[:,0], X_iso[:,1],c=t, s=10, cmap='hot_r' )\nplt.xlabel('Isomap Dimension 1')\nplt.ylabel('Isomap Dimension 2')\nplt.show()\n```", "```py\nfrom sklearn.manifold import LocallyLinearEmbedding\n\nembedding = LocallyLinearEmbedding(n_components=2, n_neighbors=25)\nX_lle = embedding.fit_transform(X)\n\nfig = plt.figure(figsize=(6,4))\nplt.scatter(X_lle[:,0], X_lle[:,1],c=t, s=10, cmap='hot_r' )\nplt.xlabel('LLE Dimension 1')\nplt.ylabel('LLEp Dimension 2')\nplt.show()\n```"]