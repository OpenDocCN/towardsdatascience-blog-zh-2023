- en: Data-Oriented Programming in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中的数据导向编程
- en: 原文：[https://towardsdatascience.com/data-oriented-programming-with-python-ef478c43a874](https://towardsdatascience.com/data-oriented-programming-with-python-ef478c43a874)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/data-oriented-programming-with-python-ef478c43a874](https://towardsdatascience.com/data-oriented-programming-with-python-ef478c43a874)
- en: A recap on *Data-Oriented Programming* by Yehonathan Sharvit but illustrated
    with Python examples (instead of JavaScript and Java)
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Yehonathan Sharvit 关于*数据导向编程*的回顾，但以 Python 示例（而非 JavaScript 和 Java）来说明
- en: '[](https://medium.com/@tamdtranthe?source=post_page-----ef478c43a874--------------------------------)[![Tam
    D Tran-The](../Images/2d1fcc2d5bfda09f26719c3a86817836.png)](https://medium.com/@tamdtranthe?source=post_page-----ef478c43a874--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ef478c43a874--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ef478c43a874--------------------------------)
    [Tam D Tran-The](https://medium.com/@tamdtranthe?source=post_page-----ef478c43a874--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@tamdtranthe?source=post_page-----ef478c43a874--------------------------------)[![Tam
    D Tran-The](../Images/2d1fcc2d5bfda09f26719c3a86817836.png)](https://medium.com/@tamdtranthe?source=post_page-----ef478c43a874--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ef478c43a874--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ef478c43a874--------------------------------)
    [Tam D Tran-The](https://medium.com/@tamdtranthe?source=post_page-----ef478c43a874--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ef478c43a874--------------------------------)
    ·12 min read·May 12, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ef478c43a874--------------------------------)
    ·12 分钟阅读·2023年5月12日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/0394f0fd53608e090d14270536bf6869.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0394f0fd53608e090d14270536bf6869.png)'
- en: Photo by [AltumCode](https://unsplash.com/@altumcode?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [AltumCode](https://unsplash.com/@altumcode?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: '[*Data-Oriented Programming*](https://www.manning.com/books/data-oriented-programming?utm_source=medium&utm_medium=referral&utm_campaign=book_sharvit2_data_1_29_21)
    by Yehonathan Sharvit is a great book that gives a gentle introduction to the
    concept of data-oriented programming (DOP) as an alternative to good old object-oriented
    programming (OOP). Sharvit deconstructs the elements of complexity that sometimes
    seems inevitable with OOP and summarizes the main principles of DOP that helps
    us make the system more manageable.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[*数据导向编程*](https://www.manning.com/books/data-oriented-programming?utm_source=medium&utm_medium=referral&utm_campaign=book_sharvit2_data_1_29_21)
    是 Yehonathan Sharvit 编写的一本很棒的书，为数据导向编程（DOP）概念提供了温和的介绍，作为传统面向对象编程（OOP）的替代方案。Sharvit
    解构了在 OOP 中有时看似不可避免的复杂元素，并总结了 DOP 的主要原则，帮助我们使系统更加可管理。'
- en: As its name suggests, DOP puts data first and foremost. This can be achieved
    by adhering to four main principles. These principles are language-agnostic. They
    can be represented in OOP languages (Java, C++, etc.), functional programming
    (FP) languages (Clojure, etc.) or general-purpose languages (Python, JavaScript).
    Whereas the author illustrates his examples using JavaScript and Java, this article
    attempts to demonstrate the ideas in Python.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名，数据导向编程（DOP）将数据置于首位。这可以通过遵循四个主要原则来实现。这些原则与语言无关。它们可以在面向对象编程（OOP）语言（如 Java、C++
    等）、函数式编程（FP）语言（如 Clojure 等）或通用编程语言（如 Python、JavaScript）中表示。虽然作者用 JavaScript 和
    Java 说明了他的示例，但本文尝试用 Python 展示这些思想。
- en: Following along the article, you’ll find simple code snippets in Python that
    illustrate how each principle can be adhered to or broken. Sharvit also clarifies
    what the benefits and costs for each principle — many of them are relevant in
    Python whereas some are not.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 跟随本文，你会发现简单的 Python 代码片段，展示了如何遵守或违背每个原则。Sharvit 还阐明了每个原则的好处和成本——其中许多在 Python
    中相关，而有些则不相关。
- en: Please note all the principles, corresponding advantages and drawbacks mentioned
    are credited to Yehonathan Sharvit, whereas the viewpoints on the applicability
    of these statements to Python, in conjunction with the Python code illustrations,
    are my own.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所有提到的原则、相应的优缺点均归功于 Yehonathan Sharvit，而关于这些陈述在 Python 中的适用性以及与 Python 代码示例相关的观点则是我个人的看法。
- en: 'Principle #1: Separate code from data'
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '原则 #1: 将代码与数据分离'
- en: “Separate code from data in a way that the code resides in functions whose behavior
    does not depend on data that is encapsulated in the function’s context.” — Yehonathan
    Sharvit
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “以一种代码位于不依赖于函数上下文中封装数据的函数的方式将代码与数据分离。” — Yehonathan Sharvit
- en: A natural way of adhering to this principle in Python is to use top-level functions
    (for code) and data classes that only have fields (for data). Whereas Sharvit
    illustrates in his book how to follow this principle in OOP and FP (functional
    programming) separately, my example in Python is a hybrid of OOP and FP.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，遵循这一原则的自然方式是使用顶层函数（用于代码）和仅包含字段的数据类（用于数据）。虽然 Sharvit 在他的书中分别说明了如何在
    OOP 和 FP（函数式编程）中遵循这一原则，但我在 Python 中的示例是 OOP 和 FP 的混合体。
- en: Refer to the code snippet below as an example where code (behavior) is separated
    from data (facts/information).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考下面的代码片段作为代码（行为）与数据（事实/信息）分离的示例。
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Benefit # 1: “**Code can be reused in different contexts” — Yehonathan Sharvit'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**好处 # 1: “**代码可以在不同的上下文中重用” — Yehonathan Sharvit'
- en: As seen from the example above, `calculate_name()` can be used not only for
    authors but also for users, librarians, or anyone that has a first name and a
    last name field. The code that deals with full name calculation is separate from
    the code that deals with the creation of author data.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的示例可以看出，`calculate_name()` 不仅可以用于作者，还可以用于用户、图书馆员或任何具有名字和姓氏字段的人。处理全名计算的代码与处理作者数据创建的代码是分开的。
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Benefit # 2: “**Code can be tested in isolation” — Yehonathan Sharvit'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**好处 # 2: “**代码可以在隔离的环境中进行测试” — Yehonathan Sharvit'
- en: 'Below is an example that doesn’t adhere to Principle #1.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '以下是一个不符合原则 #1 的示例。'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In order to test the `full_name()` property that lives inside the `Author` class,
    we need to instantiate the `Author` object, which requires us to have values for
    all attributes, including those unrelated to the behavior we are testing (such
    as `n_books` and `address` custom class). This is an unnecessarily complex and
    tedious setup just to test a single method.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试 `Author` 类中的 `full_name()` 属性，我们需要实例化 `Author` 对象，这要求我们为所有属性提供值，包括那些与我们正在测试的行为无关的属性（如
    `n_books` 和 `address` 自定义类）。这是为了测试单个方法而进行的不必要的复杂和繁琐的设置。
- en: On the other hand, in the DOP version, to test `calculate_name()` code, we can
    create data to be passed into the function in isolation.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，在 DOP 版本中，为了测试 `calculate_name()` 代码，我们可以创建数据以隔离地传递给函数。
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Cost # 1:** “No control on what code can access what data” — Yehonathan Sharvit'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**成本 # 1:** “无法控制哪些代码可以访问哪些数据” — Yehonathan Sharvit'
- en: “…in OOP, the data is encapsulated in an object, which guarantees that the data
    is accessible only by the object’s methods. In DOP, since data stands on its own,
    it can be accessed by any piece of code…which is inherently unsafe.” — Yehonathan
    Sharvit
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “…在 OOP 中，数据封装在一个对象中，这保证了数据只能通过对象的方法访问。在 DOP 中，由于数据独立存在，它可以被任何代码访问……这本质上是不安全的。”
    — Yehonathan Sharvit
- en: '**This statement is not applicable in Python.**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**这个声明在 Python 中不适用。**'
- en: 'In Python, data held by a class can still be accessed by any piece of code
    that has a reference to the object. For example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，类持有的数据仍然可以被任何引用对象的代码访问。例如：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Also, unless we store data in a global variable, we can still use scopes (functions,
    loops, etc.) to control who can access/change data in Python.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，除非我们将数据存储在全局变量中，否则我们仍然可以使用作用域（函数、循环等）来控制谁可以访问/更改 Python 中的数据。
- en: '**Cost #2:** “There is no packaging” — Yehonathan Sharvit'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**成本 #2:** “没有封装” — Yehonathan Sharvit'
- en: “In DOP, the code that manipulates the data could be anywhere. This might make
    it difficult for developers to discover that `[a specific function]` is available,
    which could lead to wasted time and duplicated code.” — Yehonathan Sharvit
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “在 DOP 中，操控数据的代码可以在任何地方。这可能使开发者难以发现 `[某个特定函数]` 的存在，从而导致浪费时间和代码重复。” — Yehonathan
    Sharvit
- en: This is true with our Python example above. For instance, our `AuthorData` data
    class might be in one file and `calculate_name()` function might be in another
    file.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这在我们上面的 Python 示例中是正确的。例如，我们的 `AuthorData` 数据类可能在一个文件中，而 `calculate_name()`
    函数可能在另一个文件中。
- en: 'Principle #2: Represent data with generic data structures'
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '原则 #2: 使用通用数据结构表示数据'
- en: “In DOP, data is represented with generic data structures, such as maps (or
    dictionaries) and arrays (or lists).” — Yehonathan Sharvit
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “在 DOP 中，数据使用通用数据结构表示，例如映射（或字典）和数组（或列表）。” — Yehonathan Sharvit
- en: In Python, our built-in options for generic data structures are `dict` , `list`
    , and `tuple`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，我们的通用数据结构选项包括 `dict`、`list` 和 `tuple`。
- en: In this article, I use Python’s `dataclass` , which can be thought of as a “mutable
    named tuple with defaults.” Note that this was not what Sharvit meant by “generic
    data structure.” Python’s `dataclass` is a hybrid that is closer to OOP than DOP.
    However, compared with dictionaries and tuples, this alternative is less susceptible
    to typos, more descriptive with type hinting, helps represent nested complex structure
    in a clearer and more concise way, and more. Also, it can easily be turned into
    a dictionary or a tuple if we want to.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我使用 Python 的 `dataclass`，它可以被视为“带有默认值的可变命名元组”。请注意，这不是 Sharvit 所说的“通用数据结构”。Python
    的 `dataclass` 是一种更接近面向对象编程（OOP）而非面向过程编程（DOP）的混合体。然而，与字典和元组相比，这种替代方案不易出现拼写错误，通过类型提示更具描述性，有助于以更清晰、更简洁的方式表示嵌套复杂结构等。此外，如果需要，也可以很容易地将其转换为字典或元组。
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Benefit #1:** “The ability to use generic functions that are not limited
    to our specific use case” — Yehonathan Sharvit'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**好处 #1:** “能够使用不局限于我们特定用例的通用函数” — Yehonathan Sharvit'
- en: Given generic structures, we can manipulate data using a rich set of built-in
    Python functions available on `dict`, `list`, `tuple`, etc.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通过通用结构，我们可以利用丰富的内置 Python 函数集来操作 `dict`、`list`、`tuple` 等上的数据。
- en: Below are a few examples of generic functions that can be used to manipulate
    data stored in a `dict` .
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些可以用来操作存储在 `dict` 中的数据的通用函数示例。
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This means we don’t have to learn and remember the custom methods of everyone’s
    classes. Also, the generic functions can’t break if we change some library versions.
    They only break if the Python language changes them (which almost never happens).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们不必学习和记住每个人类的自定义方法。此外，如果我们更改一些库版本，通用函数不会崩溃。它们只有在 Python 语言更改时才会崩溃（这几乎从未发生）。
- en: '**Benefit #2: “**Flexible data model” — Yehonathan Sharvit'
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**好处 #2:** “**灵活的数据模型” — Yehonathan Sharvit'
- en: “When using generic data structures, data can be created with no predefined
    shape, and its shape can be modified at will.” — Yehonathan Sharvit
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “使用通用数据结构时，数据可以创建为没有预定义形状的形式，并且可以随意修改其形状。” — Yehonathan Sharvit
- en: In the example below, not all the dictionaries in the list have the same keys.
    The extra keys can exist in the second dictionary as long as the required fields
    are present.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，列表中的字典并不是所有的都有相同的键。额外的键可以存在于第二个字典中，只要必要的字段存在即可。
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Cost #1**: “Performance hit” — Yehonathan Sharvit'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**成本 #1:** “性能损失” — Yehonathan Sharvit'
- en: '**This does not entirely translate to Python.**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**这在 Python 中并不完全适用。**'
- en: In Python, there is not much difference in performance between retrieving value
    of a class member and retrieving value associated to a key in a dictionary. Unlike
    Java, there is no compilation step in Python, which means there is no compiler
    optimization when it comes to accessing a class member.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，检索类成员的值与检索字典中与键相关的值之间的性能差异不大。与 Java 不同，Python 没有编译步骤，这意味着在访问类成员时没有编译器优化。
- en: However, not all generic data structures are equal. Lookup time for `set` and
    `dict` is more efficient than that for `list` and `tuple` , given that sets and
    dictionaries use hash function to determine any particular piece of data is right
    away, without a search.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并不是所有的通用数据结构都是相同的。`set` 和 `dict` 的查找时间比 `list` 和 `tuple` 更高效，因为集合和字典使用哈希函数来立即确定特定数据，而无需进行搜索。
- en: '**Cost #2:** “No data schema” — Yehonathan Sharvit'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**成本 #2:** “没有数据模式” — Yehonathan Sharvit'
- en: “When data is instantiated from a class, the information about the data shape
    is in the class definition. The existence of data schema at a class level makes
    it easy to discover the expected data shape. When data is represented with generic
    data structures, data schema is not part of the data representation.” — Yehonathan
    Sharvit
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “当数据从一个类实例化时，数据形状的信息就在类定义中。类级别的数据模式存在使得发现预期的数据形状变得容易。当数据使用通用数据结构表示时，数据模式不是数据表示的一部分。”
    — Yehonathan Sharvit
- en: For example, we can easily tell the data shape of `FullName` which is instantiated
    as a class object below.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以轻松地识别下方作为类对象实例化的 `FullName` 的数据形状。
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Cost #3:** “No compile-time check that the data is valid” — Yehonathan Sharvit'
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**成本 #3:** “没有编译时检查数据是否有效” — Yehonathan Sharvit'
- en: '***This does not entirely translate to Python.***'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '***这在 Python 中并不完全适用。***'
- en: Again, there is no compilation step in Python as in Java. The only compile-time
    checking for Python would be running a tool like [mypy](https://mypy-lang.org/).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中没有像 Java 那样的编译步骤。Python 唯一的编译时检查就是运行像 [mypy](https://mypy-lang.org/)
    这样的工具。
- en: However, Sharvit’s example about how data shape errors could slip through the
    crack with generic data structures can still somewhat be demonstrated in Python
    as below.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，夏维特关于如何通过通用数据结构中的数据形状错误可能会遗漏的例子在 Python 中仍然可以部分演示，如下所示。
- en: 'When data is passed to the `FullName` class that does not conform to the shape
    it expects, an error occurs at run time. For example, if we mistype the field
    that stores first name ( `fist_name` instead of `first_name` ), we would get `TypeError:
    __init__() got an unexpected keyword argument ''fist_name''`.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '当数据传递到 `FullName` 类时，如果数据不符合它所期望的形状，就会在运行时发生错误。例如，如果我们拼错了存储名字的字段（`fist_name`
    而不是 `first_name`），我们会得到 `TypeError: __init__() got an unexpected keyword argument
    ''fist_name''`。'
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: However, with generic data structures, mistyping the field might not result
    in an error or an exception. Rather, first name is mysteriously omitted from the
    result.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用通用数据结构时，拼错字段可能不会导致错误或异常。相反，名字会神秘地从结果中省略。
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Cost #4:** “The need for explicit type casting” — Yehonathan Sharvit'
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**成本 #4:** “需要显式的类型转换” — 叶洪·夏维特'
- en: '**This does not translate to Python.**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**这不能转化为 Python。**'
- en: Python is a dynamically typed language. It does not require explicit type casting.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种动态类型语言。它不需要显式的类型转换。
- en: '**Principle # 3:** Data is immutable'
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**原则 #3:** 数据是不可变的'
- en: “According to DOP, data should never change! Instead of mutating data, a new
    version of it is created.” — Yehonathan Sharvit
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “根据 DOP，数据不应更改！而是创建数据的新版本。” — 叶洪·夏维特
- en: To adhere to this principle, we make our `dataclass`frozen (i.e. immutable).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了遵循这一原则，我们将 `dataclass` 设置为冻结（即不可变）。
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The immutable data types in built-in Python are `int` , `float` , `decimal`
    , `bool` , `string` , `tuple` and `range` . Note that `dict` , `list` and `set`
    are mutable.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Python 内置的不可变数据类型有 `int`、`float`、`decimal`、`bool`、`string`、`tuple` 和 `range`。注意
    `dict`、`list` 和 `set` 是可变的。
- en: '**Benefit #1:** “Data access to all with confidence” — Yehonathan Sharvit'
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**好处 #1:** “对所有人都能自信地访问数据” — 叶洪·夏维特'
- en: “When data is mutable, we must be careful when passing data as an argument to
    a function since it can be mutated or cloned.” — Yehonathan Sharvit
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “当数据是可变的时，我们在将数据作为参数传递给函数时必须小心，因为它可能会被修改或克隆。” — 叶洪·夏维特
- en: In the example below, we originally pass an empty list as a default argument
    to the function. Since list is a mutable object, every time we call the function,
    the list gets mutated and a different default value gets used in the successive
    call.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们最初将一个空列表作为默认参数传递给函数。由于列表是一个可变对象，每次调用函数时，列表都会被修改，并且在后续调用中使用不同的默认值。
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To fix the use case above, we can do:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要修复上述用例，我们可以这样做：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This code works as expected because `None` is immutable.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码按预期工作，因为 `None` 是不可变的。
- en: “When data is immutable, it can be passed to any function with confidence because
    data never changes.” — Yehonathan Sharvit
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “当数据是不可变的时，可以自信地将其传递给任何函数，因为数据永远不会改变。” — 叶洪·夏维特
- en: '**Benefit #2:** “Predictable code behavior” — Yehonathan Sharvit'
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**好处 #2:** “可预测的代码行为” — 叶洪·夏维特'
- en: 'Here is an example of an unpredictable piece of code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个不可预测的代码示例：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The value of `age` in `dummy` dictionary is not predictable. It depends on whether
    you run the code on an even or odd day.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`dummy` 字典中的 `age` 值是不可预测的。它取决于你是在偶数天还是奇数天运行代码。'
- en: However, with immutable data, it is guaranteed that data never changes.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用不可变的数据可以保证数据永远不会改变。
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The piece of code above would error out, saying `dataclasses.FrozenInstanceError:
    cannot assign to field "n_books"` . With frozen data class, no matter it’s an
    even or odd day, `author_data.n_books` is always 500.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '上面的代码会出错，显示 `dataclasses.FrozenInstanceError: cannot assign to field "n_books"`。使用冻结的数据类，无论是偶数天还是奇数天，`author_data.n_books`
    始终是 500。'
- en: '**Benefit #3:** “Fast equality checks” — Yehonathan Sharvit'
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**好处 #3:** “快速的相等性检查” — 叶洪·夏维特'
- en: 'Python has two similar operators for checking whether two objects are equal:
    `is` and `==` . `is` checks for identity (of objects) by comparing the integer
    equality of the memory address. `==` checks for equality (of values) by examining
    the actual content stored.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Python 有两个类似的运算符用于检查两个对象是否相等：`is` 和 `==`。`is` 通过比较内存地址的整数相等性来检查对象的身份。`==` 通过检查实际存储的内容来检查值的相等性。
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As seen above, `is` and `==` behaves the same way for `x` which is a string
    (i.e. immutable data type) but behaves differently for `y` which is a list (i.e.
    mutable data type). With immutable data objects, `is` behaves more predictably.
    Also,`is` is generally faster than `==` because comparing object addresses is
    faster than comparing all the fields. Immutable data thus enables fast equality
    checks by comparing data by reference.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，`is` 和 `==` 对于 `x`（即不可变数据类型）表现相同，但对 `y`（即可变数据类型）表现不同。使用不可变数据对象时，`is` 的行为更可预测。而且，`is`
    通常比 `==` 更快，因为比较对象地址比比较所有字段要快。因此，不可变数据通过引用比较数据实现了快速的相等性检查。
- en: '**Benefit #4: “**Free concurrency safety” — Yehonathan Sharvit'
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**优点 #4:** “**免费的并发安全性**” — Yehonathan Sharvit'
- en: 'When data is mutable in a multi-thread environment, race condition failure
    can occur. For example, assuming that two threads are attempting to access and
    modify the value of `x` by adding/subtracting 10 to/from it:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据在多线程环境中是可变的时，可能会发生竞态条件失败。例如，假设两个线程尝试通过加/减 10 来访问和修改 `x` 的值：
- en: '![](../Images/42945abfdf05c73ba8a011aa74410985.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/42945abfdf05c73ba8a011aa74410985.png)'
- en: Race condition failure example. Image by Author.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 竞态条件失败示例。图片由作者提供。
- en: 'There are three possible answers: `x=90` , `x=100` , and `x=110` . Depending
    on the order of execution, the program’s behavior changes each time it is run,
    which is not safe and vulnerable to corruption. To ensure concurrency safety,
    data should be in an immutable state.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '可能的三种答案是: `x=90`，`x=100`，和 `x=110`。根据执行顺序，程序的行为每次运行时都会变化，这样不安全且容易损坏。为了确保并发安全，数据应该处于不可变状态。'
- en: '**Cost #1:** “Performance hit” — Yehonathan Sharvit'
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**成本 #1:** “性能损失” — Yehonathan Sharvit'
- en: Given that `list` is mutable and `tuple` is immutable, as we expand both objects,
    `list` identity remains the same whereas a brand new `tuple` is created with a
    different identity.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `list` 是可变的，而 `tuple` 是不可变的，当我们扩展这两种对象时，`list` 的身份保持不变，而一个全新的 `tuple` 被创建并具有不同的身份。
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The need to copy contents of immutable object into a new object every time we
    modify it requires additional memory and creates added cost on CPU power, especially
    for very large collections.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 每次修改不可变对象时需要将内容复制到一个新对象中，这需要额外的内存，并增加了 CPU 的负担，特别是对于非常大的集合。
- en: '**Cost #2:** “Required library for immutable data structures” — Yehonathan
    Sharvit'
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**成本 #2:** “对不可变数据结构的库要求” — Yehonathan Sharvit'
- en: '**This does not translate to Python.**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**这不能转译到 Python。**'
- en: '`frozenset` and `tuple` are some basic built-in immutable data structures in
    Python. We are not always required to include a third-party library to adhere
    to data immutability principle.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`frozenset` 和 `tuple` 是 Python 中一些基本的内置不可变数据结构。我们并不总是需要包含第三方库来遵循数据不可变性原则。'
- en: 'Principle #4: Separate data schema from data representation'
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '原则 #4: 将数据模式与数据表示分开'
- en: “In DOP, the expected shape of data is represented as (meta) data that is kept
    separately from the main data representation.” — Yehonathan Sharvit
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “在 DOP 中，数据的期望形状表示为（元）数据，这些数据与主要的数据表示分开保存。” — Yehonathan Sharvit
- en: 'Given below is a basic JSON schema (essentially a dictionary) that describes
    the format of data which is also represented as a dictionary. The schema defines
    which fields are required and the data types of the fields, whereas the data is
    represented by a generic data structure per Principle #3.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '以下是一个基本的 JSON 模式（本质上是一个字典），它描述了数据的格式，这些数据也以字典形式表示。该模式定义了哪些字段是必需的以及字段的数据类型，而数据则按原则
    #3 由通用数据结构表示。'
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Data validation functions (or libraries) can be used to check whether a piece
    of data conforms to a data schema.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 数据验证函数（或库）可用于检查数据是否符合数据模式。
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `validate` function passes through when data is valid or returns errors
    with details in a human readable format when data is invalid.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`validate` 函数在数据有效时通过，或者在数据无效时以人类可读的格式返回详细错误。'
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Benefit #1:** “Optional fields” — Yehonathan Sharvit'
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**优点 #1:** “可选字段” — Yehonathan Sharvit'
- en: “In OOP, allowing a class member to be optional is not easy. In DOP, it is natural
    to declare a field as optional in a map.” —Yehonathan Sharvit
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “在 OOP 中，允许类成员为可选项并不容易。在 DOP 中，在映射中声明字段为可选是很自然的。” — Yehonathan Sharvit
- en: '**This does not translate to Python.**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**这不能转译到 Python。**'
- en: In Python, even with OOP, allowing a class member to be optional is not hard.
    This benefit is therefore not strong in the context of Python. For example, below
    we can set the default argument of `n_books` to `None` to indicate the field is
    optional.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，即使使用OOP，允许类成员为可选项也不难。因此，这一好处在Python的背景下并不强烈。例如，下面我们可以将`n_books`的默认参数设置为`None`，以表示该字段是可选的。
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**Benefit #2:** “Advanced data validation conditions” — Yehonathan Sharvit'
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**好处 #2:** “高级数据验证条件” — Yehonathan Sharvit'
- en: “In DOP, data validation occurs at run time. It allows the definition of data
    validation conditions that go beyond the type of a field.” — Yehonathan Sharvit
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “在DOP中，数据验证发生在运行时。这允许定义超出字段类型的数据验证条件。” — Yehonathan Sharvit
- en: Compared with the minimal schema defined above, the following schema can be
    expanded to include more properties for each field.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 与上面定义的最小模式相比，以下模式可以扩展以包含每个字段的更多属性。
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: While not all the advantages and disadvantages of DOP principles mentioned by
    Sharvit directly apply to Python, the fundamental principles remain robust. This
    approach promotes code that is easier to reason about, test and maintain. By embracing
    the principles and techniques of DOP, Python programmers can create more maintainable
    and scalable code, and unlock the full potential of their data.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Sharvit提到的DOP原则的所有优缺点并不直接适用于Python，但基本原则仍然稳健。这种方法促进了更容易推理、测试和维护的代码。通过接受DOP的原则和技术，Python程序员可以创建更具可维护性和可扩展性的代码，并释放数据的全部潜力。
- en: '*Special thanks to* [*Eddie Pantridge*](https://medium.com/u/85a05f1243a6?source=post_page-----ef478c43a874--------------------------------)
    *for his thoughtful comments and efforts towards improving this article.*'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*特别感谢* [*Eddie Pantridge*](https://medium.com/u/85a05f1243a6?source=post_page-----ef478c43a874--------------------------------)
    *对本文改进所作出的深思熟虑的评论和努力。*'
