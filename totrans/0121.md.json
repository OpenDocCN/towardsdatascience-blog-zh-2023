["```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nfrom matplotlib.ticker import MaxNLocator\n\ndf = pd.read_csv('DelayedFlights.csv')\n\ndf = df[['Month', 'ArrDelay']] # Let's only keep the columns useful to us\ndf = df[~df['ArrDelay'].isnull()] # Get rid of cancelled and diverted flights\n\n# Group by Month and get the mean\ndelay_by_month = df.groupby(['Month']).mean()['ArrDelay'].reset_index() \n```", "```py\n# Create the figure and axes objects, specify the size and the dots per inches \nfig, ax = plt.subplots(figsize=(13.33,7.5), dpi = 96)\n\n# Plot bars\nbar1 = ax.bar(delay_by_month['Month'], delay_by_month['ArrDelay'], width=0.6)\n```", "```py\n# Create the grid \nax.grid(which=\"major\", axis='x', color='#DAD8D7', alpha=0.5, zorder=1)\nax.grid(which=\"major\", axis='y', color='#DAD8D7', alpha=0.5, zorder=1)\n\n# Reformat x-axis label and tick labels\nax.set_xlabel('', fontsize=12, labelpad=10) # No need for an axis label\nax.xaxis.set_label_position(\"bottom\")\nax.xaxis.set_major_formatter(lambda s, i : f'{s:,.0f}')\nax.xaxis.set_major_locator(MaxNLocator(integer=True))\nax.xaxis.set_tick_params(pad=2, labelbottom=True, bottom=True, labelsize=12, labelrotation=0)\nlabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nax.set_xticks(delay_by_month['Month'], labels) # Map integers numbers from the series to labels list\n\n# Reformat y-axis\nax.set_ylabel('Delay (minutes)', fontsize=12, labelpad=10)\nax.yaxis.set_label_position(\"left\")\nax.yaxis.set_major_formatter(lambda s, i : f'{s:,.0f}')\nax.yaxis.set_major_locator(MaxNLocator(integer=True))\nax.yaxis.set_tick_params(pad=2, labeltop=False, labelbottom=True, bottom=False, labelsize=12)\n\n# Add label on top of each bar\nax.bar_label(bar1, labels=[f'{e:,.1f}' for e in delay_by_month['ArrDelay']], padding=3, color='black', fontsize=8) \n```", "```py\n# Remove the spines\nax.spines[['top','left','bottom']].set_visible(False)\n\n# Make the left spine thicker\nax.spines['right'].set_linewidth(1.1)\n\n# Add in red line and rectangle on top\nax.plot([0.12, .9], [.98, .98], transform=fig.transFigure, clip_on=False, color='#E3120B', linewidth=.6)\nax.add_patch(plt.Rectangle((0.12,.98), 0.04, -0.02, facecolor='#E3120B', transform=fig.transFigure, clip_on=False, linewidth = 0))\n\n# Add in title and subtitle\nax.text(x=0.12, y=.93, s=\"Average Airlines Delay per Month in 2008\", transform=fig.transFigure, ha='left', fontsize=14, weight='bold', alpha=.8)\nax.text(x=0.12, y=.90, s=\"Difference in minutes between scheduled and actual arrival time averaged over each month\", transform=fig.transFigure, ha='left', fontsize=12, alpha=.8)\n\n# Set source text\nax.text(x=0.1, y=0.12, s=\"Source: Kaggle - Airlines Delay - https://www.kaggle.com/datasets/giovamata/airlinedelaycauses\", transform=fig.transFigure, ha='left', fontsize=10, alpha=.7)\n\n# Adjust the margins around the plot area\nplt.subplots_adjust(left=None, bottom=0.2, right=None, top=0.85, wspace=None, hspace=None)\n\n# Set a white background\nfig.patch.set_facecolor('white')\n```", "```py\n# Colours - Choose the extreme colours of the colour map\ncolours = [\"#2196f3\", \"#bbdefb\"]\n\n# Colormap - Build the colour maps\ncmap = mpl.colors.LinearSegmentedColormap.from_list(\"colour_map\", colours, N=256)\nnorm = mpl.colors.Normalize(delay_by_month['ArrDelay'].min(), delay_by_month['ArrDelay'].max()) # linearly normalizes data into the [0.0, 1.0] interval\n\n# Plot bars\nbar1 = ax.bar(delay_by_month['Month'], delay_by_month['ArrDelay'], color=cmap(norm(delay_by_month['ArrDelay'])), width=0.6, zorder=2)\n```", "```py\n# Find the average data point and split the series in 2\naverage = delay_by_month['ArrDelay'].mean()\nbelow_average = delay_by_month[delay_by_month['ArrDelay']<average]\nabove_average = delay_by_month[delay_by_month['ArrDelay']>=average]\n```", "```py\n# Colours - Choose the extreme colours of the colour map\ncolors_high = [\"#ff5a5f\", \"#c81d25\"] # Extreme colours of the high scale\ncolors_low = [\"#2196f3\",\"#bbdefb\"] # Extreme colours of the low scale\n\n# Colormap - Build the colour maps\ncmap_low = mpl.colors.LinearSegmentedColormap.from_list(\"low_map\", colors_low, N=256)\ncmap_high = mpl.colors.LinearSegmentedColormap.from_list(\"high_map\", colors_high, N=256)\nnorm_low = mpl.colors.Normalize(below_average['ArrDelay'].min(), average) # linearly normalizes data into the [0.0, 1.0] interval\nnorm_high = mpl.colors.Normalize(average, above_average['ArrDelay'].max())\n\n# Plot bars and average (horizontal) line\nbar1 = ax.bar(below_average['Month'], below_average['ArrDelay'], color=cmap_low(norm_low(below_average['ArrDelay'])), width=0.6, label='Below Average', zorder=2)\nbar2 = ax.bar(above_average['Month'], above_average['ArrDelay'], color=cmap_high(norm_high(above_average['ArrDelay'])), width=0.6, label='Above Average', zorder=2)\nplt.axhline(y=average, color = 'grey', linewidth=3)\n\n# Determine the y-limits of the plot\nymin, ymax = ax.get_ylim()\n# Calculate a suitable y position for the text label\ny_pos = average/ymax + 0.03\n# Annotate the average line\nax.text(0.88, y_pos, f'Average = {average:.1f}', ha='right', va='center', transform=ax.transAxes, size=8, zorder=3)\n\n# Add legend\nax.legend(loc=\"best\", ncol=2, bbox_to_anchor=[1, 1.07], borderaxespad=0, frameon=False, fontsize=8)\n```"]