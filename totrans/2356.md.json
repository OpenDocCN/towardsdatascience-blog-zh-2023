["```py\ndef individual_log_loss(y_true, y_pred, eps=1e-15):\n  \"\"\"Compute log-loss for each individual of the sample.\"\"\"\n\n  y_pred = np.clip(y_pred, eps, 1 - eps)\n  return - y_true * np.log(y_pred) - (1 - y_true) * np.log(1 - y_pred)\n```", "```py\nfrom shap import TreeExplainer\n\nshap_explainer = TreeExplainer(model)\nshap_values = shap_explainer.shap_values(X)\n```", "```py\ndef shap_sum2proba(shap_sum):\n  \"\"\"Compute sigmoid function of the Shap sum to get predicted probability.\"\"\"\n\n  return 1 / (1 + np.exp(-shap_sum))\n```", "```py\nprediction_contribution = shap_values.abs().mean()\n```", "```py\ny_pred_wo_feature = shap_values.apply(lambda feature: shap_values.sum(axis=1) - feature).applymap(shap_sum2proba)\n```", "```py\nind_log_loss_wo_feature = y_pred_wo_feature.apply(lambda feature: individual_log_loss(y_true=y_true, y_pred=feature))\n```", "```py\nind_log_loss = individual_log_loss(y_true=y_true, y_pred=y_pred)\nind_log_loss_diff = ind_log_loss_wo_feature.apply(lambda feature: ind_log_loss - feature)\n```", "```py\nerror_contribution = ind_log_loss_diff.mean()\n```"]