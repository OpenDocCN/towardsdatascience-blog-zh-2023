- en: Dynamic Forecast Combination using R from Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/dynamic-forecast-combination-using-r-from-python-afcdf6adf85b](https://towardsdatascience.com/dynamic-forecast-combination-using-r-from-python-afcdf6adf85b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exploring rpy2 to call R methods from Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://vcerq.medium.com/?source=post_page-----afcdf6adf85b--------------------------------)[![Vitor
    Cerqueira](../Images/9e52f462c6bc20453d3ea273eb52114b.png)](https://vcerq.medium.com/?source=post_page-----afcdf6adf85b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----afcdf6adf85b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----afcdf6adf85b--------------------------------)
    [Vitor Cerqueira](https://vcerq.medium.com/?source=post_page-----afcdf6adf85b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----afcdf6adf85b--------------------------------)
    ·6 min read·Jan 25, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bd1918e4b14c3cdaf4f5ae5c2e4a0479.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Louis Hansel](https://unsplash.com/@louishansel?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: In this post, you’ll learn how to call R methods from Python using the library
    rpy2.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll cover an example related to forecasting. We’ll define and run R functions
    that combine forecasts made by Python-based models.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even if Python is your preferred language, R can still be useful sometimes.
  prefs: []
  type: TYPE_NORMAL
- en: I don’t want to get into a Python vs R debate. Nowadays I mostly use Python.
    But, many great methods are only available in R. And it’s too much of a nuisance
    to implement them from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: The library rpy2 got us covered. It allows you to run R code within Python.
    R data structures such as *matrix* or *data.frame* are converted to numpy or pandas
    objects. It’s also easy to integrate custom R functions into your Python workflow.
  prefs: []
  type: TYPE_NORMAL
- en: So, how does rpy2 work?
  prefs: []
  type: TYPE_NORMAL
- en: Example using Opera
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll focus on using the R package opera. You can use this package for combining
    forecasts.
  prefs: []
  type: TYPE_NORMAL
- en: Before diving into rpy2, let’s go over the problem we’re solving.
  prefs: []
  type: TYPE_NORMAL
- en: Primer on Forecasting Ensembles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Ensembles improve forecasting performance by combining many different models](/introduction-to-forecasting-ensembles-f63877a2498).'
  prefs: []
  type: TYPE_NORMAL
- en: Most often, the combination is done using a simple average. Each model in the
    ensemble has equal importance in the final prediction. But, [a better way to combine
    forecasts is to use dynamic weights](/how-to-combine-the-forecasts-of-an-ensemble-11022e5cac25).
    Thus, the weights of each model adapt to changes in the time series.
  prefs: []
  type: TYPE_NORMAL
- en: Opera
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/19d089c4d2f1452cda78122027cb6c43.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Gwen King](https://unsplash.com/@gwenking?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: There are many methods for dynamic forecast combinations. You can check [a previous
    article for a list of different approaches](https://medium.com/towards-data-science/how-to-combine-the-forecasts-of-an-ensemble-11022e5cac25).
  prefs: []
  type: TYPE_NORMAL
- en: What’s so special about opera?
  prefs: []
  type: TYPE_NORMAL
- en: Opera stands for Online Prediction by Expert Aggregation. Some of the best methods
    for forecast combination are only available in this R package. They contain interesting
    theoretical properties on forecast combination worst-case scenarios. These can
    be valuable for developing robust forecasting models.
  prefs: []
  type: TYPE_NORMAL
- en: You can find a full example of how opera works [here](https://cran.r-project.org/web/packages/opera/vignettes/opera-vignette.html).
  prefs: []
  type: TYPE_NORMAL
- en: In the rest of this article, we’ll use opera to combine forecasts made by Python
    models.
  prefs: []
  type: TYPE_NORMAL
- en: Case Study
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like in the [previous article](/how-to-combine-the-forecasts-of-an-ensemble-11022e5cac25),
    we’ll resort to the energy demand time series as a case study.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example includes three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Building the ensemble;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the R function we need to run;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using these functions for dynamic forecast combination.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s dive into each of these steps in turn.
  prefs: []
  type: TYPE_NORMAL
- en: Building the Ensemble
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we build an ensemble using Python’s *scikit-learn* methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how you can do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We created five models: a Random Forest, a K-Nearest Neighbor, and three linear
    models (Ridge, LASSO, and ElasticNet). These are trained [in an auto-regressive
    way.](https://medium.com/towards-data-science/machine-learning-for-forecasting-transformations-and-feature-extraction-bbbea9de0ac2)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a sample of their forecasts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/531daa0ec526106731c839937e4ee97e.png)'
  prefs: []
  type: TYPE_IMG
- en: Forecasts of several models. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s use R’s *opera* to combine these forecasts using rpy2\. We’ll cover
    two useful things about this library:'
  prefs: []
  type: TYPE_NORMAL
- en: how to define and use an R function in Python;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: how to convert data structures across the two languages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining R Functions in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can define an R function in a Python multi-line string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The string that contains the function is passed to *rpy2.robjects* module. Then,
    the method *globalenv* makes it available to use in Python.
  prefs: []
  type: TYPE_NORMAL
- en: You can define any function you’d like. Note that R, and any required R packages,
    need to be installed in your system for this to work.
  prefs: []
  type: TYPE_NORMAL
- en: About the function in the example above. It is used to create an opera object
    (called *mixture*). The required parameter is the method that is used for combining
    forecasts. We use *MLpol,* which is based on a polynomially weighted average.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few other useful alternatives:'
  prefs: []
  type: TYPE_NORMAL
- en: 'EWA: Exponentially weighted average;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OGD: Online gradient descent;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'FTRL: Follow the regularized leader;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ridge: Online Ridge regression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting data from pandas to R, and vice-versa
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s another function we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The function definition is like before. But, this function requires extra inputs
    besides *opera_model (*which we defined above). We need to pass an R *data.frame*
    (predictions) and a *vector* (trues) as input.
  prefs: []
  type: TYPE_NORMAL
- en: You can use [*pandas2ri*](https://pandas.pydata.org/pandas-docs/version/0.22/r_interface.html)to
    convert data structures between Python and R. This way, you pass a pd.DataFrame
    (predictions) and a pd.Series (trues). rpy2 converts them automatically. After
    the function is applied, rpy2 converts the results back to Python data structures.
  prefs: []
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, let’s go back to our case study.
  prefs: []
  type: TYPE_NORMAL
- en: I wrapped the functions above in a Python class called Opera. [You can check
    its code on my Github](https://github.com/vcerqueira/blog/blob/main/src/ensembles/opera_r.py).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s how the weights assigned with each model are distributed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/55b0fd7c3c27e0f7fd203d0ecc662cd4.png)'
  prefs: []
  type: TYPE_IMG
- en: Distribution of weights of each model in the ensemble. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'These weights change over time to cope with the time series dynamics:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e67f99cc52f2140930b5d09d475ec391.png)'
  prefs: []
  type: TYPE_IMG
- en: The weight of each model in the ensemble over time. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: Key Takeaways
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This article touches on two topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the rpy2 library to run R code within Python;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doing dynamic forecast combination using the opera R package.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We used rpy2 to define and run several R functions within Python. We focused
    on a specific package called opera. Yet, you can define and run any function you’d
    like.
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s a lot more to rpy2\. Here’s the link to the documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://rpy2.github.io/doc/v3.5.x/html/](https://rpy2.github.io/doc/v3.5.x/html/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The opera package is useful for dynamic forecast combinations. Its methods are
    efficient and provide valuable theoretical guarantees of forecasting performance.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading, and see you in the next story!
  prefs: []
  type: TYPE_NORMAL
- en: Related Articles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Introduction to Forecasting Ensembles](/introduction-to-forecasting-ensembles-f63877a2498)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Combine the Forecasts of an Ensemble](/how-to-combine-the-forecasts-of-an-ensemble-11022e5cac25)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further Readings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] rpy2 Documentation: [https://rpy2.github.io/doc/v3.5.x/html/](https://rpy2.github.io/doc/v3.5.x/html/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] Opera Documentation: [https://cran.r-project.org/web/packages/opera/vignettes/opera-vignette.html](https://cran.r-project.org/web/packages/opera/vignettes/opera-vignette.html)'
  prefs: []
  type: TYPE_NORMAL
