["```py\nfunction debounce(func, delay) {\n  let timeout;\n  return function() {\n    const context = this;\n    const args = arguments;\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(context, args), delay);\n  };\n}\n```", "```py\n// Define the function that updates the layout\nfunction updateLayout() {\n  // Update the layout...\n}\n\n// Create a debounced version of the function\nconst debouncedUpdateLayout = debounce(updateLayout, 250);\n\n// Listen for window resize events and call the debounced function\nwindow.addEventListener(\"resize\", debouncedUpdateLayout);\n```", "```py\nfunction throttle(func, delay) {\n  let wait = false;\n\n  return (...args) => {\n    if (wait) {\n        return;\n    }\n\n    func(...args);\n    wait = true;\n    setTimeout(() => {\n      wait = false;\n    }, delay);\n  }\n}\n```", "```py\n // Define the function that updates the layout\nfunction updateLayout() {\n  // Update the layout...\n}\n\n// Create a throttled version of the function\nconst throttledUpdateLayout = throttle(updateLayout, 250);\n\n// Listen for window scroll events and call the throttled function\nwindow.addEventListener(\"scroll\", throttledUpdateLayout);\n```", "```py\nfunction once(func) {\n  let ran = false;\n  let result;\n  return function() {\n    if (ran) return result;\n    result = func.apply(this, arguments);\n    ran = true;\n    return result;\n  };\n}\n```", "```py\n// Define the function that sends the request\nfunction requestSomeData() {\n  // Send the request...\n}\n\n// Create a version of the function that can only be called once\nconst sendRequestOnce = once(sendRequest);\n\n// Listen for clicks on a button and call the \"once\" function\nconst button = document.querySelector(\"button\");\nbutton.addEventListener(\"click\", sendRequestOnce);\n```", "```py\nfunction memoize(func) {\n  const cache = new Map();\n  return function() {\n    const key = JSON.stringify(arguments);\n    if (cache.has(key)) {\n        return cache.get(key);\n    }\n    const result = func.apply(this, arguments);\n    cache.set(key, result);\n    return result;\n  };\n}\n```", "```py\n// Define the function that performs the calculation\nfunction fibonacci(n) {\n    if (n < 2)\n        return 1;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\n// Create a memoized version of the function\nconst memoizedFibonacci = memoize(fibonacci);\n\n// Call the memoized function with multiple input values\nconsole.time('total')\nconsole.time('sub1')\nconst result1 = memoizedFibonacci(30);\nconsole.timeEnd('sub1')\nconsole.time('sub2')\nconst result2 = memoizedFibonacci(29);\nconsole.timeEnd('sub2')\nconsole.time('sub3')\nconst result3 = memoizedFibonacci(30);\nconsole.timeEnd('sub3')\nconsole.timeEnd('total')\n```", "```py\nfunction curry(func, arity = func.length) {\n  return function curried(...args) {\n    if (args.length >= arity) return func(...args);\n    return function(...moreArgs) {\n      return curried(...args, ...moreArgs);\n    };\n  };\n}\n```", "```py\n// Define the function that calculates the distance between two points\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n}\n\n// Create a curried version of the function that only requires one of the points\nconst distanceFromOrigin = curry(distance, 3)(0, 0);\n\n// Call the curried function with the other point\nconst d1 = distanceFromOrigin(1, 1);\nconst d2 = distanceFromOrigin(2, 2);\n```", "```py\nfunction partial(func, ...args) {\n  return function partiallyApplied(...moreArgs) {\n    return func(...args, ...moreArgs);\n  }\n}\n```", "```py\n// Define the function that calculates something\nfunction calculate(x, y, z) {\n return (x + y) * z\n}\n\n// Create a partially applied version of the function the last argument\nconst multiply10By = partial(calculate, 8, 2);\n\n// Call the partially applied function with the number of iterations\nconst result = multiply10By(5);\n```", "```py\nfunction pipe(...funcs) {\n  return function piped(...args) {\n    return funcs.reduce((result, func) => [func.call(this, ...result)], args)[0];\n  };\n}\n```", "```py\n// Define the functions that add to the string\nfunction addPrefix(str) {\n  return \"prefix-\" + str;\n}\n\nfunction addSuffix(str) {\n  return str + \"-suffix\";\n}\n\nfunction toUppercase(str) {\n    return str.toUpperCase()\n}\n\n// Create a piped function that applies the three functions in the correct order\nconst decorated1 = pipe(addPrefix, addSuffix, toUppercase);\nconst decorated2 = pipe(toUppercase, addPrefix, addSuffix);\n\n// Call the piped function with the input string\nconst result1 = decorated1(\"hello\");  // PREFIX-HELLO-SUFFIX\nconst result2 = decorated2(\"hello\");  // prefix-HELLO-suffix\n```", "```py\nfunction compose(...funcs) {\n  return function composed(...args) {\n    return funcs.reduceRight((result, func) => [func.call(this, ...result)], args)[0];\n  };\n}\n```", "```py\nfunction pick(obj, keys) {\n  return keys.reduce((acc, key) => {\n    if (obj.hasOwnProperty(key)) {\n      acc[key] = obj[key];\n    }\n    return acc;\n  }, {});\n}\n```", "```py\nconst obj = {\n    id: 1,\n    name: 'Paul',\n    password: '82ada72easd7',\n    role: 'admin',\n    website: 'https://www.paulsblog.dev',\n};\n\nconst selected = pick(obj, ['name', 'website']);\nconsole.log(selected); // { name: 'Paul', website: 'https://www.paulsblog.dev' }\n```", "```py\nfunction omit(obj, keys) {\n  return Object.keys(obj)\n    .filter(key => !keys.includes(key))\n    .reduce((acc, key) => {\n      acc[key] = obj[key];\n      return acc;\n    }, {});\n}\n```", "```py\nconst obj = {\n    id: 1,\n    name: 'Paul',\n    job: 'Senior Engineer',\n    twitter: 'https://www.twitter.com/paulknulst',\n    website: 'https://www.paulsblog.dev',\n};\n\nconst selected = omit(obj, ['id']);\nconsole.log(selected); // {name: 'Paul', job: 'Senior Engineer', twitter: 'https://www.twitter.com/paulknulst', website: 'https://www.paulsblog.dev'}\n```", "```py\nfunction zip(...arrays) {\n  const maxLength = Math.max(...arrays.map(array => array.length));\n  return Array.from({ length: maxLength }).map((_, i) => {\n    return Array.from({ length: arrays.length }, (_, j) => arrays[j][i]);\n  });\n}\n```", "```py\n// Define the arrays that contain the coordinates\nconst xCoordinates = [1, 2, 3, 4];\nconst yCoordinates = [5, 6, 7, 8];\nconst zCoordinates = [3, 6, 1, 7];\n\n// Create a zipped array of points\nconst points = zip(xCoordinates, yCoordinates, zCoordinates);\n\n// Use the zipped array of points\nconsole.log(points);  // [[1, 5, 3], [2, 6, 6], [3, 7, 1], [4, 8, 7]]\n```"]