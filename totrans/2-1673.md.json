["```py\nimport warnings\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport scipy.optimize\n\n# Suppress warnings for using np.exp() on large values during optimization:\nwarnings.filterwarnings('ignore')\n\n# Set default run configuration for plots:\nplt.rcParams['figure.figsize'] = (6, 4)\nplt.rc('font', size=12)\nplt.rc('axes', titlesize=14) \nplt.rc('axes', labelsize=12) \nplt.rc('xtick', labelsize=11) \nplt.rc('ytick', labelsize=11) \nplt.rc('legend', fontsize=11) \n```", "```py\n# Input men's 100 m world records in seconds.\n# If two records were set in the same year, list only the latest (lowest):\nrecords = {2009: 9.58, 2008: 9.69, 2007: 9.74, 2005: 9.77, 2002: 9.78,\n           1999: 9.79, 1996: 9.84, 1994: 9.85, 1991: 9.86, 1988: 9.92, \n           1983: 9.93, 1968: 9.95, 1960: 10, 1956: 10.1, 1936: 10.2, \n           1930: 10.3, 1921: 10.4, 1912: 10.6} \n\n# Turn dictionary into a DataFrame:\ndf = pd.DataFrame(records.items(), columns=['year', 'time'])\ndf['years'] = df['year'] - 1912  # Years since first record.\ndf = df.sort_values('year').reset_index(drop=True)\ndisplay(df)\n```", "```py\n# Graph the world records:\nplt.stem(df.year, df.time)\nplt.title(\"Men's 100 m Sprint World Records\")\nplt.ylabel(\"Time (secs)\")\nplt.ylim(9.5, 10.8)\nplt.grid(True);\n```", "```py\ndef expo(x, a, b, c):\n    \"\"\"Return y values for exponential decay curve.\"\"\"\n    return a * np.exp(-b * x) + c\n\ndef optimize_curve_fit(a_func, x, y):\n    \"\"\"Return optimized parameters for curve fit.\"\"\"\n    params, covar = scipy.optimize.curve_fit(a_func, x, y, p0=None)\n    return params\n```", "```py\n# Generate datasets with and without Bolt's times (nB = No Bolt):\nx_all, y_all = df.years, df.time\nx_nB, y_nB = x_all[:-2], y_all[:-2]\n\n# Find optimized parameters for fitting the curve to the points:\nparams_nB = optimize_curve_fit(expo, x_nB, y_nB)\nparams_all = optimize_curve_fit(expo, x_all, y_all)\nprint(f\"Parameters without Bolt (a, b, c) = {params_nB}\") \nprint(f\"   Parameters with Bolt (a, b, c) = {params_all}\")\n```", "```py\nParameters without Bolt (a, b, c) = [0.98795896 0.01631187 9.57391395]\n   Parameters with Bolt (a, b, c) = [1.34836526 0.00941746 9.18654695]\n```", "```py\n# Plot exponential curves for data with and without Bolt's times:\nplt.plot(x_all, y_all, '.', label='measured data', c='k')\nplt.plot(x_nB, expo(x_nB, *params_nB), \n         '-', label='fitted without Bolt')\nplt.plot(x_all, expo(x_all, *params_all), '--', \n         label='fitted with Bolt', c='red')\nplt.title(\"Men's 100 m World Record\")\nplt.xlabel('Years Since First Record (1912)')\nplt.ylabel('Times (s)')\nplt.grid(True)\nplt.legend(framealpha=1);\n```", "```py\n# Extrapolate exponential curves to predict future performance:\nx_extrap = np.arange(-20, 550)\ny_nB_extrap = expo(x_extrap, *params_nB)  # Without Bolt.\ny_B_extrap = expo(x_extrap, *params_all)  # With Bolt.\n\n# Create a plot of the world record times and the extrapolated curves.\nfig, ax = plt.subplots()\nax.plot(x_all, y_all, '.', label='data', c='k')\nax.plot(x_extrap, y_nB_extrap, '-', label='fitted without Bolt')\nax.plot(x_extrap, y_B_extrap, '--', c='red', label='fitted with Bolt')\nax.set(title=\"Men's 100 m World Record Extrapolated\",\n       xlabel='Years Since First Record (1912)',\n       ylabel='Time (s)',\n       yticks=np.arange(9.0, 11.0, 0.2))\nax.grid(True)\nax.legend(framealpha=1)\n\n# Add a dotted horizontal line for each of Bolt's world record times.\nbolt_times = {2009: 9.58, 2008: 9.69}\nfor year, time in bolt_times.items():\n    ax.axhline(time, ls=':', linewidth=1.3, color='red')\n    ax.text(0, time + 0.01, f\"Bolt {year}\", color='red',\n            horizontalalignment='left', size=9)\n\n# Define function and inverse function to permit a secondary x-axis for year:\naxis_transform = lambda x_extrap: x_extrap + 1912\naxis_inverse = lambda x_extrap: x_extrap - 1912\nax2 = ax.secondary_xaxis('top', functions=(axis_transform, axis_inverse))\n\nprint(f\"\\nMinimum predicted time without Bolt data = {min(y_nB_extrap):.2f} sec.\")\nprint(f\"Minimum predicted time with Bolt data =    {min(y_B_extrap):.2f} sec.\\n\")\n```", "```py\nMinimum predicted time without Bolt data = 9.57 sec.\nMinimum predicted time with Bolt data =    9.19 sec.\n```"]