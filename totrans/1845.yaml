- en: 'Shortest Path (Dijkstra’s) Algorithm: A Step-by-Step Python Guide'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/shortest-path-dijkstras-algorithm-step-by-step-python-guide-896769522752](https://towardsdatascience.com/shortest-path-dijkstras-algorithm-step-by-step-python-guide-896769522752)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An update using OSMNX 1.6 and a long-distance path
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://bryanvallejo16.medium.com/?source=post_page-----896769522752--------------------------------)[![Bryan
    R. Vallejo](../Images/fd92974f57c72875cc133a2c959d64ca.png)](https://bryanvallejo16.medium.com/?source=post_page-----896769522752--------------------------------)[](https://towardsdatascience.com/?source=post_page-----896769522752--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----896769522752--------------------------------)
    [Bryan R. Vallejo](https://bryanvallejo16.medium.com/?source=post_page-----896769522752--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----896769522752--------------------------------)
    ·6 min read·Oct 4, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/95cc11698ca37362e8ea9166f4856e39.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. The resultant shortest path (~350km) in Morocco
  prefs: []
  type: TYPE_NORMAL
- en: This well-known algorithm is implemented in the Python library OSMNX and can
    be used to find the shortest path weighted by distance or time between two locations.
    The algorithm uses the OpenStreetMap (OSM) network to either drive, walk, or bike,
    to find the route using the Python library NETWORKX in the background.
  prefs: []
  type: TYPE_NORMAL
- en: I am writing this update because the parameters of the functions have changed
    a little bit and I have been asked why my code is not working in old blog posts,
    and it is simply because the code was written with older versions of osmnx.
  prefs: []
  type: TYPE_NORMAL
- en: The old tutorial contains quite valuable processes, but I also decided to do
    a step-by-step guide so the process of getting the shortest path is more precise
    and the analyst that uses this guide can really get the idea of the process.
  prefs: []
  type: TYPE_NORMAL
- en: Here are the old tutorials if you want to give it a look.
  prefs: []
  type: TYPE_NORMAL
- en: In Helsinki (Finland), using a different networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](/shortest-path-algorithm-used-in-osm-street-network-33e0f864f34b?source=post_page-----896769522752--------------------------------)
    [## The shortest path algorithm used in the OSM street network'
  prefs: []
  type: TYPE_NORMAL
- en: GIS automation tips for shortest path analysis with cars, bikes, and pedestrians
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/shortest-path-algorithm-used-in-osm-street-network-33e0f864f34b?source=post_page-----896769522752--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: In Tartu (Estonia), using a walking network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](/shortest-path-algorithm-with-osm-walking-network-6d2863ae96be?source=post_page-----896769522752--------------------------------)
    [## Shortest path algorithm with OSM walking network'
  prefs: []
  type: TYPE_NORMAL
- en: Finding the shortest walking paths with OSM data in Tartu, Estonia
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/shortest-path-algorithm-with-osm-walking-network-6d2863ae96be?source=post_page-----896769522752--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: OSM data license
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Open Street Map data.** Licensed under [Open Data Commons Open Database License
    (ODbl)](https://opendatacommons.org/licenses/odbl/) or attribution license. Users
    are free to copy, distribute, transmit, and adapt the data as long as it is attributed
    to the author like © [OpenStreetMap](https://www.openstreetmap.org/copyright)
    contributors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this practice, I am going to use two locations from Morocco. The practice
    was suggested by one of my readers [Hanae](https://medium.com/u/3b913af53dd0?source=post_page-----896769522752--------------------------------)
    who provided the origin and destination.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/56e615485d8ee7f84c77f804740603a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Origin and destination locations.
  prefs: []
  type: TYPE_NORMAL
- en: Coding practice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I mentioned, I am going to do a step-by-step guide so let's start. Beforehand
    let's import the needed libraries
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 1\. Define origin and destination
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Simply, we are going to create geometry objects as Points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Fetch the OSM Graph object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Then, we will extract the graph that we are going to use for generating the
    Shortest Path. Let's see step by step.
  prefs: []
  type: TYPE_NORMAL
- en: '*Create GeoDataFrames from the origin and destination*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*Get the Graph that contains the origin and destination*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use the function *envelope* from Geopandas to use the polygon as a mask
    to fetch the Graph.
  prefs: []
  type: TYPE_NORMAL
- en: A simple function first.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Then, use it and plot the result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/860117b931b26ea0afc47c6788b0f6df.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Graph the contains origin and destination
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Find the closest nodes of origin and destination
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Get the closest nodes that are part of the network using the origin and destination
    locations. The node’s code can be obtained using the osmnx functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can check and notice that we only have codes at the moment.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Find the Shortest Path
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Then, use the shortest path functions to obtain the route.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This will give back a bunch of node’s code that are part of the route.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2b944f8bc3a13ceb44b6c28703f7d798.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the AuthorNode’s codes
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Create a Line Geometry from nodes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will extract the node's geometries from the Graph and create a LineString
    geometry that represents the shortest path
  prefs: []
  type: TYPE_NORMAL
- en: First a function for this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Get the nodes, and use them in the function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 6\. Compute distance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to measure the route in meters with a Mercator projection. You
    can use the location projection if you want to have something more accurate.
  prefs: []
  type: TYPE_NORMAL
- en: First, a function for this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: It will measure the route with ~351.243 meters.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Save network and path
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Save in your local disk the network and path for maps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fetch the network and define GeoDataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then store:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use this data to create your own map. For example, this one in QGIS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9de9556b10bae0f2feba3d689ca4c468.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Shortest path and network in QGIS
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Plot results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will check if we are doing our work right by plotting all elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The result will be as simple as this.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b958f4a828287d34b3780efc21888c7a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Shortest path, network, origin, and destination in Matplotlib
  prefs: []
  type: TYPE_NORMAL
- en: Known limitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The shortest path is generated by the union of the nodes’ network and the line
    does not really match the road. That is totally OK because what we want is to
    have an approximation. If you are willing to do navigation you should use Google
    API for routing, or any other provider.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ce94c815f7c505063eb71b185a23df6b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. The line is created by nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The shortest path algorithm using OSMNX gives an approximation of the route
    and can be used broadly for accessibility studies at urban or regional scales.
    The Python library is constantly updated and it is possible that the functions
    or parameters change so it is recommended to continuously update the library versions
    in our workflows.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to reach me for questions or customized analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bryan R. LinkedIn](https://www.linkedin.com/in/bryanrvallejo/)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
