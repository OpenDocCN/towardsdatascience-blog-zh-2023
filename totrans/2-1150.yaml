- en: How to Create Hexagon Maps With Matplotlib
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 Matplotlib 创建六边形地图
- en: 原文：[https://towardsdatascience.com/how-to-create-hexagon-maps-with-matplotlib-eb5eef82ab2c](https://towardsdatascience.com/how-to-create-hexagon-maps-with-matplotlib-eb5eef82ab2c)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-create-hexagon-maps-with-matplotlib-eb5eef82ab2c](https://towardsdatascience.com/how-to-create-hexagon-maps-with-matplotlib-eb5eef82ab2c)
- en: Matplotlib Tutorial
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Matplotlib 教程
- en: Using shapes to represent geographic information
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用形状表示地理信息
- en: '[](https://medium.com/@oscarleo?source=post_page-----eb5eef82ab2c--------------------------------)[![Oscar
    Leo](../Images/7733c9147bad2875a35155fca3903aa8.png)](https://medium.com/@oscarleo?source=post_page-----eb5eef82ab2c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----eb5eef82ab2c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----eb5eef82ab2c--------------------------------)
    [Oscar Leo](https://medium.com/@oscarleo?source=post_page-----eb5eef82ab2c--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@oscarleo?source=post_page-----eb5eef82ab2c--------------------------------)[![Oscar
    Leo](../Images/7733c9147bad2875a35155fca3903aa8.png)](https://medium.com/@oscarleo?source=post_page-----eb5eef82ab2c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----eb5eef82ab2c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----eb5eef82ab2c--------------------------------)
    [Oscar Leo](https://medium.com/@oscarleo?source=post_page-----eb5eef82ab2c--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----eb5eef82ab2c--------------------------------)
    ·7 min read·Nov 21, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----eb5eef82ab2c--------------------------------)
    ·阅读时间7分钟·2023年11月21日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/8a0c286c2ed1192c80240ba0a37770bf.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8a0c286c2ed1192c80240ba0a37770bf.png)'
- en: Chart created by the author
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图表由作者创建
- en: '**Let’s make some maps! 🗺**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**让我们制作一些地图吧！🗺**'
- en: Hi, and welcome to a new matplotlib tutorial. This time, I will teach you how
    to create insightful Hexagon maps like the one above.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，欢迎来到新的 matplotlib 教程。这一次，我将教你如何创建像上面这样的有洞察力的六边形地图。
- en: Visualizing geographic information is difficult because areas (such as countries)
    vary in size and shape.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化地理信息是困难的，因为区域（如国家）在大小和形状上有所不同。
- en: The result is that some areas are hard to see when you plot your data using
    regular maps.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，当你使用常规地图绘制数据时，一些区域很难看清。
- en: It’s also difficult to add information such as country names or values to your
    visualizations.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 将国家名称或数值添加到你的可视化中也是困难的。
- en: An alternative that removes such differences is to use a hexagon map.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一种消除这些差异的替代方案是使用六边形地图。
- en: The idea is to represent each area as a hexagon and arrange them in a way that
    resembles the actual map.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法是将每个区域表示为一个六边形，并将它们排列成类似实际地图的方式。
- en: Since each hexagon is identical in shape, it’s easy to add information in a
    structured way and to create a beautiful data visualization.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个六边形的形状相同，添加信息以结构化的方式并创建美观的数据可视化变得容易。
- en: This tutorial teaches you how to do just that using data from the presidential
    elections in the United States.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将教你如何使用美国总统选举的数据来做到这一点。
- en: (Don’t forget to look at [my other Matplotlib tutorials](https://medium.com/@oscarleo/list/262e5d7f0847)
    as well)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: （不要忘记查看[我的其他 Matplotlib 教程](https://medium.com/@oscarleo/list/262e5d7f0847)）
- en: Let’s get started. 🚀
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。🚀
- en: 'Step 1: Import libraries'
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一步：导入库
- en: We start by importing the required libraries.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先导入所需的库。
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That’s it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。
- en: 'Step 2: Create a seaborn style'
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二步：创建一个 seaborn 样式
- en: Next, we use seaborn to set the background and font family. I’m using `Work
    Sans` and `#F4EBCD`, but feel free to experiment.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用 seaborn 来设置背景和字体。 我使用的是 `Work Sans` 和 `#F4EBCD`，但可以随意尝试。
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**FYI:** I often use `background_color="#00000000"` to get a transparent background
    if I want to add the chart to an infographic or similar.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**仅供参考：** 如果我想将图表添加到信息图或类似内容中，我通常使用 `background_color="#00000000"` 以获得透明背景。'
- en: Now for the fun stuff.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在进入有趣的部分。
- en: 'Step 3: Fetching the data'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第三步：获取数据
- en: 'I’ve prepared a CSV with the number of votes for each state in the US using
    the following dataset: [U.S. President 1976–2020](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi%3A10.7910%2FDVN%2F42MVDX)
    (public domain license).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经使用以下数据集准备了一个包含每个美国州投票数的 CSV 文件：[美国总统 1976–2020](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi%3A10.7910%2FDVN%2F42MVDX)（公共领域许可）。
- en: Here’s how to access it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何访问它的方法。
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Each row represents a state and stores the number of votes on the Democrats,
    Republicans, and “Other” parties.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 每一行代表一个州，并存储对民主党、共和党和“其他”政党的投票数。
- en: '![](../Images/9b3a1d26ddc40fd0afae8c2126e3ea7c.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9b3a1d26ddc40fd0afae8c2126e3ea7c.png)'
- en: Screenshot by the author
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图
- en: Luckily for you, I’ve prepared two other columns called x and y, which represent
    the center for each hexagon.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我准备了另外两列叫做x和y，它们代表每个六边形的中心。
- en: 'Step 4: Drawing hexagon boundaries'
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4步：绘制六边形边界
- en: Now that we have the data, we can immediately draw the boundaries of our hexagon
    using the center defined by each row.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们有了数据，我们可以立即使用每行定义的中心绘制六边形的边界。
- en: Our first Matplotlib-related function takes a `row`together with the `width`
    and `height` of the hexagon.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们第一个与Matplotlib相关的函数接受一个`row`以及六边形的`width`和`height`。
- en: It combines that information to create two lists of coordinates and returns
    them in the correct format.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 它将这些信息结合起来，创建两个坐标列表，并以正确的格式返回它们。
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, let’s define `draw_hexagon()`, which takes a `row` and uses `get_hexagon_corners()`
    to draw a hexagon in the correct location.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们定义`draw_hexagon()`，它接受一个`row`并使用`get_hexagon_corners()`在正确的位置绘制六边形。
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It may look strange that I’m hard-coding `width` and `height`, but you never
    need to change these values, so it doesn’t matter.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我硬编码`width`和`height`可能看起来有些奇怪，但你无需更改这些值，因此并不重要。
- en: I selected `width=3` and `height=4` because it gives me a good-looking hexagon.
    I’m using the `scale` parameter to adjust the space between hexagons.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了`width=3`和`height=4`，因为它给我一个好看的六边形。我使用`scale`参数来调整六边形之间的间距。
- en: Now, we can run this function together with our standard Matplotlib code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将此函数与我们的标准Matplotlib代码一起运行。
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And we get the following figure.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下图形。
- en: '![](../Images/a7237804545bd1a2f613f5d72d2a0207.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a7237804545bd1a2f613f5d72d2a0207.png)'
- en: As you can see, I have arranged 51 hexagons in a formation that resembles the
    United States.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我将51个六边形排列成类似于美国的形状。
- en: That’s a good start!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的开始！
- en: 'Step 5: Adding colors'
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第5步：添加颜色
- en: There are many ways to define the colors of the hexagons.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 定义六边形颜色的方法有很多种。
- en: The most common alternatives are to define colors based on a category or to
    have a gradient based on values such as GDP, where a lower value leads to, for
    example, a darker color.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的替代方案是根据类别定义颜色，或者基于诸如GDP等值的渐变，其中较低的值会导致例如更深的颜色。
- en: To make things more interesting for you, I decided to take another approach.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让事情对你更有趣，我决定采取另一种方法。
- en: Instead of going for something basic, I want to color each hexagon based on
    the number of votes for each party.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我不想选择基础方法，而是根据每个政党的投票数量来为每个六边形上色。
- en: A hexagon should have all three colors but in different proportions depending
    on the number of votes.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一个六边形应该具有所有三种颜色，但根据投票数量的不同，比例会有所不同。
- en: First of all, I created a function that returns the max and min values for a
    hexagon given the center.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我创建了一个函数，返回给定中心的六边形的最大值和最小值。
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next, we have the `fill_hexagon` function that defines the area we want to fill
    with a color.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有`fill_hexagon`函数，它定义了我们希望用颜色填充的区域。
- en: Two parameters are especially interesting.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个参数特别有趣。
- en: '`ratio` defines how much of the hexagon to fill (in the vertical direction,
    not by area).'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ratio`定义了要填充六边形的量（在垂直方向上，而不是按面积）。'
- en: '`top` defines if we fill the hexagon from the top or bottom. It will be different
    for the Democrats and Republicans, and you can see that we define `y`, `y_start`,
    and `h4` differently based on `top`.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`top`定义了我们是从顶部还是底部填充六边形。这对民主党和共和党会有所不同，你可以看到我们根据`top`定义了`y`、`y_start`和`h4`。'
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It isn’t easy to understand the if statements at first glance.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始理解`if`语句并不容易。
- en: Here’s a drawing explaining that we get different shapes that we need to handle
    separately for the different thresholds.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一张图解释了我们得到不同形状，并需要针对不同的阈值分别处理它们。
- en: '![](../Images/1e03123d9cefd2803766e44d08366180.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1e03123d9cefd2803766e44d08366180.png)'
- en: Illustration by the author
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 作者插图
- en: Now, we define `d_ratio` and `r_ratio` to `draw_hexagon()` and create `Polygons`
    for both the Democrats and the Republicans.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们定义`d_ratio`和`r_ratio`以传递给`draw_hexagon()`并为民主党和共和党创建`Polygons`。
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We get the following chart if we rerun the matplotlib code from the previous
    section.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们重新运行上一节的matplotlib代码，我们会得到以下图表。
- en: '![](../Images/007aeda8876c97f7a3c5fbc7af68c785.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/007aeda8876c97f7a3c5fbc7af68c785.png)'
- en: Note that the horizontal black lines have different thicknesses based on the
    number of votes for “Others”.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，水平黑线的厚度基于“其他”选项的投票数量而有所不同。
- en: 'Step 6: Adding text'
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第6步：添加文本
- en: Most data visualizations need some text to make sense. I want to add the state
    abbreviation and the percentage of votes for each party.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数数据可视化需要一些文本来使其有意义。我想添加每个政党的州缩写和投票百分比。
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: I then add `add_text()` directly after `draw_hexagon()`. I’m also adding the
    year to provide additional information.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我在 `draw_hexagon()` 之后直接添加了 `add_text()`。我还添加了年份以提供额外信息。
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Running the code gives me the following hexagon map.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码会得到以下的六边形地图。
- en: '![](../Images/8a0c286c2ed1192c80240ba0a37770bf.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8a0c286c2ed1192c80240ba0a37770bf.png)'
- en: Chart created by the author
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图表由作者创建
- en: That’s it; I have the finalized chart we set out to create. I added some padding
    using KeyNotes, but you can use almost any tool.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，我完成了我们要创建的最终图表。我使用 KeyNotes 添加了一些填充，但你几乎可以使用任何工具。
- en: 'Bonus: Here’s how I use this visualization'
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外内容：这是我如何使用这个可视化的
- en: I have a free newsletter called [Data Wonder](https://datawonder.substack.com/),
    where I share beautiful and insightful data visualizations.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个免费的通讯，叫做 [Data Wonder](https://datawonder.substack.com/)，在里面我分享美丽且富有洞察的数据可视化。
- en: In the edition “[Visualizing Election Results From 1976 to 2020](https://open.substack.com/pub/datawonder/p/us-election-results?r=17ashl&utm_campaign=post&utm_medium=web)”,
    I defined a transparent background for the chart above. I used Corel Vector to
    create a grid, gradient, title, and legend.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在 “[Visualizing Election Results From 1976 to 2020](https://open.substack.com/pub/datawonder/p/us-election-results?r=17ashl&utm_campaign=post&utm_medium=web)”
    版本中，我为上面的图表定义了一个透明背景。我使用 Corel Vector 创建了网格、渐变、标题和图例。
- en: '![](../Images/5b098790bd4f75351c3f7328881ca3b0.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5b098790bd4f75351c3f7328881ca3b0.png)'
- en: Pretty cool! 😄
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 真是太酷了！ 😄
- en: Conclusion
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Hexagon charts may look complicated, but they are surprisingly simple to create
    using Matplotlib.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 六边形图表可能看起来复杂，但使用 Matplotlib 创建起来出奇的简单。
- en: The biggest challenge is to align the hexagons in a way that resembles the map
    and still have the order make sense.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最大的挑战是将六边形对齐，使其类似于地图，同时保持顺序有意义。
- en: This time, we learned how to do that for the United States, and you can change
    the election data to any other information that you find interesting.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们学习了如何为美国制作这种图表，你可以将选举数据更改为任何你觉得有趣的信息。
- en: 'For example, I used the same code when I created a visualization called “[The
    Escalating Crisis: Drug Overdose Deaths Across the U.S](https://datawonder.substack.com/p/the-escalating-crisis-drug-overdose)”.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，当我创建一个名为 “[The Escalating Crisis: Drug Overdose Deaths Across the U.S](https://datawonder.substack.com/p/the-escalating-crisis-drug-overdose)”
    的可视化时，我使用了相同的代码。'
- en: Thank you for reading, and see you next time! :)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读，下次见！ :)
