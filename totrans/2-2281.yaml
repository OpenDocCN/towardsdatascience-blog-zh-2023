- en: Using the HAVING and DISTINCT Clauses in SQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/using-the-having-and-distinct-clauses-in-sql-d9e3be67b4be](https://towardsdatascience.com/using-the-having-and-distinct-clauses-in-sql-d9e3be67b4be)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Two Important SQL Clauses You Should Know
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://mgcodesandstats.medium.com/?source=post_page-----d9e3be67b4be--------------------------------)[![Michael
    Grogan](../Images/af9ce19e2f61efb07664124e664c7e81.png)](https://mgcodesandstats.medium.com/?source=post_page-----d9e3be67b4be--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d9e3be67b4be--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d9e3be67b4be--------------------------------)
    [Michael Grogan](https://mgcodesandstats.medium.com/?source=post_page-----d9e3be67b4be--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d9e3be67b4be--------------------------------)
    ·4 min read·Jan 25, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/04e7bbeda036a77a666723d5d07fbc91.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: Photo by [geralt](https://pixabay.com/users/geralt-9301/) from [Pixabay](https://pixabay.com/photos/binary-binary-system-data-2728117/)'
  prefs: []
  type: TYPE_NORMAL
- en: SQL is a powerful tool when it comes to extracting data from a database — either
    from one or multiple tables.
  prefs: []
  type: TYPE_NORMAL
- en: That said, there are some clauses that are particularly important when it comes
    to analysing data effectively.
  prefs: []
  type: TYPE_NORMAL
- en: The two clauses covered in this article are the **HAVING** and **DISTINCT**
    clauses.
  prefs: []
  type: TYPE_NORMAL
- en: Why do we need the HAVING clause?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The purpose of the HAVING clause is to act as an equivalent to the WHERE clause
    when using a GROUP BY function.
  prefs: []
  type: TYPE_NORMAL
- en: If you use SQL with any regularity, you will know that the GROUP BY clause is
    a highly important one for aggregating values within a table, e.g. obtaining the
    average of a particular group of data, calculating the maximum or minimum value
    of a particular group — among a myriad of other features.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose there exists the following table within a database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fb97e22db18d280609903930b65e0400.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: Table created by author using PostgreSQL. Table displayed in pgAdmin4.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that the table contains:'
  prefs: []
  type: TYPE_NORMAL
- en: Brands as represented by a letter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Products for each brand as represented by a number ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Price of each product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us assume that we wish to determine the average product price for each brand
    in the table, but only where there exists more than one entry for each brand in
    the table, i.e. we can see that there is only one entry for brands B and D. Thus,
    we do not wish for these entries to be included in the analysis.
  prefs: []
  type: TYPE_NORMAL
- en: How would we use the HAVING clause to calculate the average price across brands
    with more than one entry in the table?
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the clause:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When running this clause, SQL returns the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/048ceb13bf29613b4c0b0ade9c8bb31d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: Table created by author using PostgreSQL. Table displayed in pgAdmin4.'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, SQL only returns the average price for brands A, C, and E. Given
    that brands B and D only had one entry in the table — these brands were not included.
  prefs: []
  type: TYPE_NORMAL
- en: 'Had we only chosen to use a GROUP BY statement without the HAVING clause, SQL
    includes all brands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/96766387b602e34898e7b15e02ff4c93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: Table created by author using PostgreSQL. Table displayed in pgAdmin4.'
  prefs: []
  type: TYPE_NORMAL
- en: However, the above prices for B and D are not of particular interest — given
    that calculating the average price across just one product would not make sense.
    Hence, our use of the HAVING clause to only display brands with multiple entries.
  prefs: []
  type: TYPE_NORMAL
- en: Purpose of the DISTINCT clause
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At its most simple, the purpose of the DISTINCT clause is to select unique entries
    in a table without duplicates.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the table above, we can see that there are multiple products for each brand
    entry. However, if we simply want to display each brand in the table, we can use
    DISTINCT as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1cc34a822ffe001c2e661dbb687f26d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: Data generated by author using PostgreSQL. Table displayed in pgAdmin
    4.'
  prefs: []
  type: TYPE_NORMAL
- en: In the table above, you will notice that two products across Brand E both have
    a price of 10.
  prefs: []
  type: TYPE_NORMAL
- en: 'When selecting the brand and price without the DISTINCT clause, we can see
    that both of these entries are displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/31bdd3fb36c6875c2f550d20137d0a33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: Data generated by author using PostgreSQL. Table displayed in pgAdmin
    4.'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, when we include the DISTINCT clause — we see that the table only displays
    one entry for Brand E where the price is 10 — which is what we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0def2de347a2b8b96e1cd6168b791975.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: Data generated by author using PostgreSQL. Table displayed in pgAdmin
    4.'
  prefs: []
  type: TYPE_NORMAL
- en: From this standpoint, using DISTINCT allows for obtaining unique values across
    a particular group when necessary — in this case, brand. Even if product IDs for
    products with the same price may be unique — this is not relevant information
    when analysing by brand.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this article, you have seen:'
  prefs: []
  type: TYPE_NORMAL
- en: How HAVING can be used as a WHERE equivalent in a GROUP BY statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of DISTINCT to return unique values across particular categories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many thanks for reading, and any questions or feedback are greatly appreciated!
  prefs: []
  type: TYPE_NORMAL
- en: '*Disclaimer: This article is written on an “as is” basis and without warranty.
    It was written with the intention of providing an overview of data science concepts,
    and should not be interpreted as professional advice. The findings and interpretations
    in this article are those of the author and are not endorsed by or affiliated
    with any third-party mentioned in this article. The author has no relationship
    with any third parties mentioned in this article.*'
  prefs: []
  type: TYPE_NORMAL
