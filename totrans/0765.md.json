["```py\nfrom landsatxplore.api import API\n\n# Your USGS  credentials\nusername = \"XXXXXXXXXXXX\"\npassword = \"XXXXXXXXXXXX\"\n\n# Initialize a new API instance\napi = API(username, password)\n\n# Perform a request\nresponse = api.request(endpoint=\"dataset-catalogs\")\nprint(response)\n```", "```py\n# Search for Landsat TM scenes\nscenes = api.search(\n    dataset='landsat_ot_c2_l2',\n    latitude=53.36305556,\n    longitude=-6.15583333,\n    start_date='2020-01-01',\n    end_date='2022-12-31',\n    max_cloud_cover=50\n)\n\n# log out\napi.logout()\n```", "```py\nimport pandas as pd\n\n# Create a DataFrame from the scenes\ndf_scenes = pd.DataFrame(scenes)\ndf_scenes = df_scenes[['display_id','wrs_path', 'wrs_row','satellite','cloud_cover','acquisition_date']]\ndf_scenes.sort_values('acquisition_date', ascending=False, inplace=True)\n```", "```py\nfrom landsatxplore.earthexplorer import EarthExplorer\nimport os\n\n# Initialize the API\nee = EarthExplorer(username, password)\n\n# Select the first scene\nID = 'LC08_L2SP_206023_20221118_20221128_02_T1'\n\n# Download the scene \ntry: \n    ee.download(ID, output_dir='./data')\n    print('{} succesful'.format(ID))\n\n# Additional error handling\nexcept:\n    if os.path.isfile('./data/{}.tar'.format(ID)):\n        print('{} error but file exists'.format(ID))\n    else:\n        print('{} error'.format(ID))\n\nee.logout()\n```", "```py\nimport tarfile\n\n# Extract files from tar archive\ntar = tarfile.open('./data/{}.tar'.format(ID))\ntar.extractall('./data/{}'.format(ID))\ntar.close()\n```", "```py\nimport tifffile as tiff\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Load Blue (B2), Green (B3) and Red (B4) bands\nB2 = tiff.imread('./data/{}/{}_SR_B2.TIF'.format(ID, ID))\nB3 = tiff.imread('./data/{}/{}_SR_B3.TIF'.format(ID, ID))\nB4 = tiff.imread('./data/{}/{}_SR_B4.TIF'.format(ID, ID))\n\n# Stack and scale bands\nRGB = np.dstack((B4, B3, B2))\nRGB = np.clip(RGB*0.0000275-0.2, 0, 1)\n\n# Clip to enhance contrast\nRGB = np.clip(RGB,0,0.2)/0.2\n\n# Display RGB image\nfig, ax = plt.subplots(figsize=(10, 10))\nplt.imshow(RGB)\nax.set_axis_off()\n```"]