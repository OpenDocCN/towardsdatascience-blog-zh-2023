["```py\nfolder     = 'data'\nadmin_city = gpd.read_file(folder + '/LANDESGRENZEOGD')\nadmin_district = gpd.read_file(folder + '/BEZIRKSGRENZEOGD')\nadmin_census = gpd.read_file(folder + '/ZAEHLBEZIRKOGD')\n\ndisplay(admin_city.head(1))\ndisplay(admin_district.head(1))\ndisplay(admin_census.head(1))\n```", "```py\nprint(type(admin_district.BEZNR.iloc[0]))\nprint(type(admin_census.ZBEZ.iloc[0]))pyth\n```", "```py\nprint(len(set(admin_district.BEZNR)))\nprint(len(set(admin_census.ZBEZ)))\n```", "```py\nf, ax = plt.subplots(1,3,figsize=(15,5))\n\nadmin_city.plot(ax=ax[0],     \n  edgecolor = 'k', \n  linewidth = 0.5, \n  alpha = 0.9, \n  cmap = 'Reds')\n\nadmin_district.plot(ax=ax[1], \n  edgecolor = 'k', \n  linewidth = 0.5, \n  alpha = 0.9, \n  cmap = 'Blues')\n\nadmin_census.plot(ax=ax[2],   \n  edgecolor = 'k', \n  linewidth = 0.5, \n  alpha = 0.9, \n  cmap = 'Purples')\n\nax[0].set_title('City boundaries')\nax[1].set_title('District boundaries')\nax[2].set_title('Census distrcit boundaries')\n```", "```py\ngdf_green  = gpd.read_file(folder + '/GRUENFREIFLOGD_GRUENGEWOGD')\ndisplay(gdf_green.head(3))\n```", "```py\nf, ax = plt.subplots(1,1,figsize=(7,5))\n\ngdf_green.plot(ax=ax,  \n  edgecolor = 'k', \n  linewidth = 0.5, \n  alpha = 0.9, \n  cmap = 'Greens')\n\nax.set_title('Green areas in Vienna')\n```", "```py\ndf_pop_distr = pd.read_csv('vie-bez-pop-sex-age5-stk-ori-geo4-2002f.csv', \n  sep = ';',\n  encoding='unicode_escape', \n  skiprows = 1)\n\ndf_pop_cens  = pd.read_csv('vie-zbz-pop-sex-agr3-stk-ori-geo2-2008f.csv', \n  sep = ';',\n  encoding='unicode_escape', \n  skiprows = 1)\n\ndf_inc_distr = pd.read_csv('vie-bez-biz-ecn-inc-sex-2002f.csv', \n  sep = ';',\n  encoding='unicode_escape', \n  skiprows = 1)\n\ndisplay(df_pop_distr.head(1))\ndisplay(df_pop_cens.head(1))\ndisplay(df_inc_distr.head(1))\n```", "```py\n# these functions convert the district and census district ids to be compatbile with the ones found in the shapefiles\ndef transform_district_id(x): \n  return int(str(x)[1:3])\n\ndef transform_census_district_id(x): \n  return int(str(x)[1:5])\n\n# select the latest year of the data set\ndf_pop_distr_2 = df_pop_distr[df_pop_distr.REF_YEAR \\\n  ==max(df_pop_distr.REF_YEAR)]\ndf_pop_cens_2  = df_pop_cens[df_pop_cens.REF_YEAR \\\n  ==max(df_pop_cens.REF_YEAR)]\ndf_inc_distr_2 = df_inc_distr[df_inc_distr.REF_YEAR \\\n  ==max(df_inc_distr.REF_YEAR)]\n\n# convert district ids\ndf_pop_distr_2['district_id'] = \\\n  df_pop_distr_2.DISTRICT_CODE.apply(transform_district_id)\n\ndf_pop_cens_2['census_district_id'] = \\\n  df_pop_cens_2.SUB_DISTRICT_CODE.apply(transform_census_district_id)\n\ndf_inc_distr_2['district_id'] = \\\n  df_inc_distr_2.DISTRICT_CODE.apply(transform_district_id)\n\n# aggregate population values\ndf_pop_distr_2 = df_pop_distr_2.groupby(by = 'district_id').sum()\ndf_pop_distr_2['district_population'] = df_pop_distr_2.AUT + \\\n  df_pop_distr_2.EEA  + df_pop_distr_2.REU  + df_pop_distr_2.TCN\ndf_pop_distr_2 = df_pop_distr_2[['district_population']]\n\ndf_pop_cens_2 = df_pop_cens_2.groupby(by = 'census_district_id').sum()\ndf_pop_cens_2['census_district_population'] = df_pop_cens_2.AUT \\\n  + df_pop_cens_2.FOR\ndf_pop_cens_2 = df_pop_cens_2[['census_district_population']]\n\ndf_inc_distr_2['district_average_income'] = \\\n  1000*df_inc_distr_2[['INC_TOT_VALUE']]\ndf_inc_distr_2 = \\\n  df_inc_distr_2.set_index('district_id')[['district_average_income']]\n\n# display the finalized tables\ndisplay(df_pop_distr_2.head(3))\ndisplay(df_pop_cens_2.head(3))\ndisplay(df_inc_distr_2.head(3))\n\n# and unifying the naming conventions\nadmin_district['district_id'] = admin_district.BEZNR.astype(int)\nadmin_census['census_district_id'] = admin_census.ZBEZ.astype(int)\n\nprint(len(set(admin_census.ZBEZ)))\n```", "```py\nprint(sum(df_pop_distr_2.district_population))\nprint(sum(df_pop_cens_2.census_district_population))\n```", "```py\n# converting all GeoDataFrames into the loca crs\nadmin_district_2 = \\\n  admin_district[['district_id', 'geometry']].to_crs(31282)\n\nadmin_census_2 = \\\n   admin_census[['census_district_id', 'geometry']].to_crs(31282)\n\ngdf_green_2      = gdf_green.to_crs(31282)\n```", "```py\nadmin_district_2['admin_area'] = \\\n  admin_district_2.geometry.apply(lambda g: g.area)\n\nadmin_census_2['admin_area'] = \\ \n  admin_census_2.geometry.apply(lambda g: g.area)\n\ndisplay(admin_district_2.head(1))\ndisplay(admin_census_2.head(1))\n```", "```py\ngdf_green_mapped_distr = gpd.overlay(gdf_green_2, admin_district_2)\n\ngdf_green_mapped_distr['green_area'] = \\\n  gdf_green_mapped_distr.geometry.apply(lambda g: g.area)\n\ngdf_green_mapped_distr = \\\n  gdf_green_mapped_distr.groupby(by = 'district_id').sum()[['green_area']]\n\ngdf_green_mapped_distr = \\\n  gpd.GeoDataFrame(admin_district_2.merge(gdf_green_mapped_distr, left_on = 'district_id', right_index = True))\n\ngdf_green_mapped_distr['green_ratio'] = \\\n  gdf_green_mapped_distr.green_area / gdf_green_mapped_distr.admin_area\n\ngdf_green_mapped_distr.head(3)\n```", "```py\ngdf_green_mapped_cens = gpd.overlay(gdf_green_2, admin_census_2)\ngdf_green_mapped_cens['green_area'] = \\\n  gdf_green_mapped_cens.geometry.apply(lambda g: g.area)\n\ngdf_green_mapped_cens = \\\n  gdf_green_mapped_cens.groupby(by = 'census_district_id').sum()[['green_area']]\n\ngdf_green_mapped_cens = \\\n  gpd.GeoDataFrame(admin_census_2.merge(gdf_green_mapped_cens, left_on = 'census_district_id', right_index = True))\n\ngdf_green_mapped_cens['green_ratio'] = gdf_green_mapped_cens.green_area / gdf_green_mapped_cens.admin_area\ngdf_green_mapped_cens.head(3)\n```", "```py\nf, ax = plt.subplots(1,2,figsize=(17,5))\n\ngdf_green_mapped_distr.plot(ax = ax[0], \n  column = 'green_ratio', \n  edgecolor = 'k', \n  linewidth = 0.5, \n  alpha = 0.9,  \n  legend = True,\n  cmap = 'Greens')\n\ngdf_green_mapped_cens.plot(ax = ax[1], \n  column = 'green_ratio', \n  edgecolor = 'k', \n  linewidth = 0.5, \n  alpha = 0.9,  \n  legend = True,\n  cmap = 'Greens')\n```", "```py\ndisplay(admin_census_2.head(2))\ndisplay(df_pop_cens_2.head(2))\n```", "```py\ngdf_pop_mapped_distr  = admin_district_2.merge(df_pop_distr_2, \\\n  left_on = 'district_id', right_index = True)\n\ngdf_pop_mapped_cens  = admin_census_2.merge(df_pop_cens_2, \\\n  left_on = 'census_district_id', right_index = True)\n\ngdf_inc_mapped_distr = admin_district_2.merge(df_inc_distr_2, \\\n  left_on = 'district_id', right_index = True)\n\nf, ax = plt.subplots(1,3,figsize=(15,5))\n\ngdf_pop_mapped_distr.plot(column = 'district_population', ax=ax[0],     \\\n  edgecolor = 'k', linewidth = 0.5, alpha = 0.9, cmap = 'Blues')\n\ngdf_pop_mapped_cens.plot(column = 'census_district_population', ax=ax[1], \\\n  edgecolor = 'k', linewidth = 0.5, alpha = 0.9, cmap = 'Blues')\n\ngdf_inc_mapped_distr.plot(column = 'district_average_income', ax=ax[2],   \\\n  edgecolor = 'k', linewidth = 0.5, alpha = 0.9, cmap = 'Purples')\n\nax[0].set_title('district_population')\nax[1].set_title('census_district_population')\nax[2].set_title('district_average_incomee')\n```", "```py\n# a plot for the disticts\nf, ax = plt.subplots(1,2,figsize=(10,5))\n\ngdf_green_mapped_distr.plot(\n  ax = ax[0], \n  column = 'green_ratio', \n  edgecolor = 'k', \n  linewidth = 0.5, \n  alpha = 0.9,  \n  cmap = 'Greens')\n\ngdf_pop_mapped_distr.plot(\n  ax = ax[1], \n  column = 'district_population', \n   edgecolor = 'k', \n  linewidth = 0.5, \n  alpha = 0.9,  \n  cmap = 'Reds')\n\nax[0].set_title('green_ratio')\nax[1].set_title('district_population')\n\n# a plot for the census disticts\nf, ax = plt.subplots(1,2,figsize=(10,5))\ngdf_green_mapped_cens.plot(\n  ax = ax[0], \n  column = 'green_ratio', \n  edgecolor = 'k', \n  linewidth = 0.5, \n  alpha = 0.9,  \n  cmap = 'Greens')\n\ngdf_pop_mapped_cens.plot(\nax = ax[1], \n  column = 'census_district_population',\n  edgecolor = 'k', \n  linewidth = 0.5, \n  alpha = 0.9,  \n  cmap = 'Reds')\n\nax[0].set_title('green_ratio')\nax[1].set_title('district_population')\n```", "```py\ngdf_green_pop_cens = \\\n  gdf_green_mapped_cens.merge(gdf_pop_mapped_cens.drop( \\\n    columns = ['geometry', 'admin_area']), left_on = 'census_district_id',\\\n    right_on = 'census_district_id')[['census_district_id', \\\n    'green_area', 'census_district_population',  'geometry']]\n\ngdf_green_pop_cens['green_area_per_capita'] = \\\n  gdf_green_pop_cens['green_area'] / \\\n  gdf_green_pop_cens['census_district_population']\n\ngdf_green_pop_cens = \\\n  gdf_green_pop_cens[gdf_green_pop_cens['census_district_population']>0]\n\nf, ax = plt.subplots(1,1,figsize=(10,7))\n\ngdf_green_pop_cens.plot(\n  column = 'green_area_per_capita', \n  ax=ax, \n  cmap = 'RdYlGn', \n  edgecolor = 'k', \n  linewidth = 0.5)\n\nadmin_district.to_crs(31282).plot(\\\n  ax=ax, color = 'none', edgecolor = 'k', linewidth = 2.5)\n```", "```py\nf, ax = plt.subplots(1,1,figsize=(11,7))\n\nax.set_title('Per-capita green area in\\nthe census districts of Vienna', \n  fontsize = 18, pad = 30)\n\ngdf_green_pop_cens.plot(\n  column = 'green_area_per_capita', \n  ax=ax, \n  cmap = 'RdYlGn', \n  edgecolor = 'k', \n  linewidth = 0.5, \n  legend=True, \n  norm=matplotlib.colors.LogNorm(\\\n    vmin=gdf_green_pop_cens.green_area_per_capita.min(), \\\n    vmax=gdf_green_pop_cens.green_area_per_capita.max()), )\n\nadmin_district.to_crs(31282).plot(\n  ax=ax, color = 'none', edgecolor = 'k', linewidth = 2.5)\n```", "```py\n# compute the per-capita green area scores\ngdf_green_pop_distr = \\\n  gdf_green_mapped_distr.merge(gdf_pop_mapped_distr.drop(columns = \\\n  ['geometry', 'admin_area']), left_on = 'district_id', right_on = \\\n   'district_id')[['district_id', 'green_area', 'district_population', \\\n   'geometry']]\n\ngdf_green_popdistr = \\\n  gdf_green_pop_distr[gdf_green_pop_distr.district_population>0]\n\ngdf_green_pop_distr['green_area_per_capita'] = \\\n  gdf_green_pop_distr['green_area'] / \\\n  gdf_green_pop_distr['district_population']\n\n# visualize the district-level map\nf, ax = plt.subplots(1,1,figsize=(10,8))\n\nax.set_title('Per-capita green area in the districts of Vienna', \\ \n  fontsize = 18, pad = 26)\n\ngdf_green_pop_distr.plot(column = 'green_area_per_capita', ax=ax, \\\n  cmap = 'RdYlGn', edgecolor = 'k', linewidth = 0.5, legend=True, \\\n  norm=matplotlib.colors.LogNorm(vmin=\\\n  gdf_green_pop_cens.green_area_per_capita.min(), \\\n  vmax=gdf_green_pop_cens.green_area_per_capita.max()), )\n\nadmin_city.to_crs(31282).plot(ax=ax, \\\n  color = 'none', edgecolor = 'k', linewidth = 2.5)\n```", "```py\n# merging the greenery, population and financial data\ngdf_district_green_pip_inc = \\\n  gdf_green_pop_distr.merge(gdf_inc_mapped_distr.drop(columns = \\\n  ['geometry']))\n```", "```py\nf, ax = plt.subplots(1,1,figsize=(6,4))\n\nax.plot(gdf_district_green_pip_inc.district_average_income, \\\n  gdf_district_green_pip_inc.green_area_per_capita, 'o')\n\nax.set_xscale('log')\nax.set_yscale('log')\nax.set_xlabel('district_average_income')\nax.set_ylabel('green_area_per_capita')\n```", "```py\nprint(spearmanr(gdf_district_green_pip_inc.district_average_income, gdf_district_green_pip_inc.green_area_per_capita))\n\nprint(pearsonr(gdf_district_green_pip_inc.district_average_income, gdf_district_green_pip_inc.green_area_per_capita))\n```"]