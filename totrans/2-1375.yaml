- en: It’s Finally Time to Say Goodbye to “git checkout”
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/its-finally-time-to-say-goodbye-to-git-checkout-fe95182c6100](https://towardsdatascience.com/its-finally-time-to-say-goodbye-to-git-checkout-fe95182c6100)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “Git switch” and “git restore” are here to stay
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@tomergabay?source=post_page-----fe95182c6100--------------------------------)[![Tomer
    Gabay](../Images/1fb1d408bc89415918c1aa6733df44e1.png)](https://medium.com/@tomergabay?source=post_page-----fe95182c6100--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fe95182c6100--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fe95182c6100--------------------------------)
    [Tomer Gabay](https://medium.com/@tomergabay?source=post_page-----fe95182c6100--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fe95182c6100--------------------------------)
    ·4 min read·May 1, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fa4cef177784a13c0c524ea2c5fb5a36.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Dim Hou](https://unsplash.com/@dimhou?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Git is the most widely used version control system for developers. One of the
    most commonly used commands with Git is `git checkout`, which allows users to
    switch between branches and restore files to a previous moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In 2019 however, with the release of Git 2.23, two new commands were introduced
    to replace `git checkout` for a more intuitive and streamlined workflow: `git
    switch` and `git restore`. Despite its release almost 4 years ago, developers
    have been slow to let go of using `git checkout` (old habits die hard I guess).'
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we are going to take a look at which disadvantages of `git
    checkout` the Git team tried to solve by introducing `git switch` and `git restore`,
    and why that should lead to no longer usage of `git checkout`.
  prefs: []
  type: TYPE_NORMAL
- en: The problem with git checkout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`git checkout` is a command with two core functionalities:'
  prefs: []
  type: TYPE_NORMAL
- en: switching between branches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: restoring files to a previous state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, these two functionalities are not clearly differentiated in their command
    syntax, which can lead to confusion and mistakes. For example, if you accidentally
    type `git checkout <commit>` instead of `git checkout <branch>`, you’ll end up
    in a so-called “detached HEAD” state, which means that any new commits you make
    will not e associated with any branch. This can particularly be problematic when
    switching to a new branch after you’ve made changes in the detached HEAD without
    committing them, as those changes will be lost, and there is no way to recover
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing git switch and git restore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In an attempt to mitigate these issues with `git checkout`, the Git team introduced
    two new commands in Git version 2.23: `git switch` and `git restore`. These commands
    split the previously mentioned two core functionalities of `git checkout` into
    two separate commands.'
  prefs: []
  type: TYPE_NORMAL
- en: '`git switch` can solely be used for switching between branches. The syntax
    is straightforward: `git switch <branch>`. If you try to use `git switch` to switch
    to a commit, Git will throw an error rather than putting you in a detached HEAD
    state. Therefore it’s less likely that you can make commits unassociated to any
    branch.'
  prefs: []
  type: TYPE_NORMAL
- en: '`git restore`, on the other hand, can solely be used to restore a file to a
    previous state. Its syntax is straightforward too: `git restore <file>`. If you
    accidentally try to switch to a branch instead of a file, Git will throw an error.'
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of using git switch and git restore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the key benefits of `git switch` and `git restore` is the improved safety.
    As the two functionalities are separated into two different commands, the chances
    that you unintentionally apply the wrong functionality decreases. This makes mistakes
    and frustration because you’ve lost work less likely to occur.
  prefs: []
  type: TYPE_NORMAL
- en: Another benefit of `git switch` and `git restore` is that its syntax is more
    straightforward because you don’t have to remember the different applications
    of `git checkout`. Even after years of using Git, many developers still fail to
    fully understand the workings and syntax of `git checkout`.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the commands of `git switch` and `git restore` are more intuitive and
    precise. When you want to create a new branch, you can use `git switch -c <branch>`
    with the `-c` flag standing for *create*. When using checkout, you have to use
    `git checkout -b <branch>` with the `-b` flag standing for *branch.* However,
    you can also use `git checkout <branch>` to switch between branches too, so the
    `-b` flag is solely about creating a new branch, but a flag named *branch* isn’t
    very helpful to indicate that it’s about creating rather than switching to an
    existing one. Hence, the commands of `git switch` and `git restore` are more intuitive,
    and should therefore be preferred.
  prefs: []
  type: TYPE_NORMAL
- en: '**To conclude**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While `git checkout` has been the go-to command for Git users for many years,
    with the introduction of `git switch` and `git checkout` there have been better
    alternatives out for a few years now. Having the two core functionalities of `git
    checkout` split into two separate commands, Git has made it easier to switch between
    branches and restore files without accidentally using the wrong command. If you’re
    still using `git checkout` rather than `git switch` and `git restore`, now is
    the perfect time to make the switch!
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[](https://git-scm.com/?source=post_page-----fe95182c6100--------------------------------)
    [## Git'
  prefs: []
  type: TYPE_NORMAL
- en: Git is easy to learn and has a tiny footprint with lightning fast performance.
    It outclasses SCM tools like Subversion…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: git-scm.com](https://git-scm.com/?source=post_page-----fe95182c6100--------------------------------)
    [](https://hub.packtpub.com/git-2-23-released-with-two-new-commands-git-switch-and-git-restore-a-new-tutorial-and-much-more/?source=post_page-----fe95182c6100--------------------------------)
    [## Git 2.23 released with two new commands 'git switch' and 'git restore', and
    more!
  prefs: []
  type: TYPE_NORMAL
- en: Last week, the team behind Git released that comes with experimental commands,
    backward compatibility and much more…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: hub.packtpub.com](https://hub.packtpub.com/git-2-23-released-with-two-new-commands-git-switch-and-git-restore-a-new-tutorial-and-much-more/?source=post_page-----fe95182c6100--------------------------------)
    [](https://stackoverflow.com/questions/57265785/whats-the-difference-between-git-switch-and-git-checkout-branch?source=post_page-----fe95182c6100--------------------------------)
    [## What's the difference between git switch and git checkout
  prefs: []
  type: TYPE_NORMAL
- en: The switch command indeed does the same thing as checkout, but only for those
    usages that switch branches. In…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: stackoverflow.com](https://stackoverflow.com/questions/57265785/whats-the-difference-between-git-switch-and-git-checkout-branch?source=post_page-----fe95182c6100--------------------------------)
  prefs: []
  type: TYPE_NORMAL
