- en: It’s Finally Time to Say Goodbye to “git checkout”
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 终于是时候告别 “git checkout” 了
- en: 原文：[https://towardsdatascience.com/its-finally-time-to-say-goodbye-to-git-checkout-fe95182c6100](https://towardsdatascience.com/its-finally-time-to-say-goodbye-to-git-checkout-fe95182c6100)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/its-finally-time-to-say-goodbye-to-git-checkout-fe95182c6100](https://towardsdatascience.com/its-finally-time-to-say-goodbye-to-git-checkout-fe95182c6100)
- en: “Git switch” and “git restore” are here to stay
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “Git switch”和“git restore”将会长期存在
- en: '[](https://medium.com/@tomergabay?source=post_page-----fe95182c6100--------------------------------)[![Tomer
    Gabay](../Images/1fb1d408bc89415918c1aa6733df44e1.png)](https://medium.com/@tomergabay?source=post_page-----fe95182c6100--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fe95182c6100--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fe95182c6100--------------------------------)
    [Tomer Gabay](https://medium.com/@tomergabay?source=post_page-----fe95182c6100--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@tomergabay?source=post_page-----fe95182c6100--------------------------------)[![Tomer
    Gabay](../Images/1fb1d408bc89415918c1aa6733df44e1.png)](https://medium.com/@tomergabay?source=post_page-----fe95182c6100--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fe95182c6100--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fe95182c6100--------------------------------)
    [Tomer Gabay](https://medium.com/@tomergabay?source=post_page-----fe95182c6100--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fe95182c6100--------------------------------)
    ·4 min read·May 1, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fe95182c6100--------------------------------)
    ·4 分钟阅读·2023 年 5 月 1 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/fa4cef177784a13c0c524ea2c5fb5a36.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fa4cef177784a13c0c524ea2c5fb5a36.png)'
- en: Photo by [Dim Hou](https://unsplash.com/@dimhou?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Dim Hou](https://unsplash.com/@dimhou?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Git is the most widely used version control system for developers. One of the
    most commonly used commands with Git is `git checkout`, which allows users to
    switch between branches and restore files to a previous moment.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是开发人员最广泛使用的版本控制系统。Git 中最常用的命令之一是 `git checkout`，它允许用户在分支之间切换并将文件恢复到先前的状态。
- en: 'In 2019 however, with the release of Git 2.23, two new commands were introduced
    to replace `git checkout` for a more intuitive and streamlined workflow: `git
    switch` and `git restore`. Despite its release almost 4 years ago, developers
    have been slow to let go of using `git checkout` (old habits die hard I guess).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在 2019 年，随着 Git 2.23 的发布，两个新命令被引入以取代 `git checkout`，以实现更直观和简化的工作流：`git switch`
    和 `git restore`。尽管它们发布已有近四年，开发人员仍然难以放弃使用 `git checkout`（我猜老习惯很难改）。
- en: In this article, we are going to take a look at which disadvantages of `git
    checkout` the Git team tried to solve by introducing `git switch` and `git restore`,
    and why that should lead to no longer usage of `git checkout`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将探讨 Git 团队通过引入 `git switch` 和 `git restore` 解决了 `git checkout` 的哪些缺点，以及为什么这应该导致不再使用
    `git checkout`。
- en: The problem with git checkout
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: git checkout 的问题
- en: '`git checkout` is a command with two core functionalities:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`git checkout` 是一个具有两个核心功能的命令：'
- en: switching between branches
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在分支之间切换
- en: restoring files to a previous state
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文件恢复到先前状态
- en: However, these two functionalities are not clearly differentiated in their command
    syntax, which can lead to confusion and mistakes. For example, if you accidentally
    type `git checkout <commit>` instead of `git checkout <branch>`, you’ll end up
    in a so-called “detached HEAD” state, which means that any new commits you make
    will not e associated with any branch. This can particularly be problematic when
    switching to a new branch after you’ve made changes in the detached HEAD without
    committing them, as those changes will be lost, and there is no way to recover
    them.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这两个功能在命令语法中没有明确区分，这可能导致混淆和错误。例如，如果你不小心输入 `git checkout <commit>` 而不是 `git
    checkout <branch>`，你将进入所谓的“分离的 HEAD” 状态，这意味着你所做的任何新提交将不会与任何分支相关联。当你在分离的 HEAD 中做了更改后切换到新分支时，这些更改将会丢失，且无法恢复。
- en: Introducing git switch and git restore
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入 git switch 和 git restore
- en: 'In an attempt to mitigate these issues with `git checkout`, the Git team introduced
    two new commands in Git version 2.23: `git switch` and `git restore`. These commands
    split the previously mentioned two core functionalities of `git checkout` into
    two separate commands.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决`git checkout`的一些问题，Git团队在Git版本2.23中引入了两个新命令：`git switch`和`git restore`。这两个命令将`git
    checkout`之前提到的两个核心功能拆分为两个独立的命令。
- en: '`git switch` can solely be used for switching between branches. The syntax
    is straightforward: `git switch <branch>`. If you try to use `git switch` to switch
    to a commit, Git will throw an error rather than putting you in a detached HEAD
    state. Therefore it’s less likely that you can make commits unassociated to any
    branch.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`git switch`仅用于在分支间切换。语法很简单：`git switch <branch>`。如果你尝试使用`git switch`切换到一个提交，Git会抛出一个错误，而不是将你置于脱离的HEAD状态。因此，你不太可能进行与任何分支无关的提交。'
- en: '`git restore`, on the other hand, can solely be used to restore a file to a
    previous state. Its syntax is straightforward too: `git restore <file>`. If you
    accidentally try to switch to a branch instead of a file, Git will throw an error.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`git restore`只能用于将文件恢复到之前的状态。它的语法也很简单：`git restore <file>`。如果你不小心尝试切换到一个分支而不是文件，Git将会抛出一个错误。
- en: Benefits of using git switch and git restore
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`git switch`和`git restore`的好处
- en: One of the key benefits of `git switch` and `git restore` is the improved safety.
    As the two functionalities are separated into two different commands, the chances
    that you unintentionally apply the wrong functionality decreases. This makes mistakes
    and frustration because you’ve lost work less likely to occur.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`git switch`和`git restore`的一个关键好处是提高了安全性。由于两个功能被分离成两个不同的命令，你无意中应用错误功能的机会减少了。这使得因为丢失工作而发生错误和挫败感的可能性降低了。'
- en: Another benefit of `git switch` and `git restore` is that its syntax is more
    straightforward because you don’t have to remember the different applications
    of `git checkout`. Even after years of using Git, many developers still fail to
    fully understand the workings and syntax of `git checkout`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`git switch`和`git restore`的另一个好处是语法更直接，因为你不需要记住`git checkout`的不同用法。即使在使用Git多年之后，许多开发者仍然无法完全理解`git
    checkout`的工作原理和语法。'
- en: Also, the commands of `git switch` and `git restore` are more intuitive and
    precise. When you want to create a new branch, you can use `git switch -c <branch>`
    with the `-c` flag standing for *create*. When using checkout, you have to use
    `git checkout -b <branch>` with the `-b` flag standing for *branch.* However,
    you can also use `git checkout <branch>` to switch between branches too, so the
    `-b` flag is solely about creating a new branch, but a flag named *branch* isn’t
    very helpful to indicate that it’s about creating rather than switching to an
    existing one. Hence, the commands of `git switch` and `git restore` are more intuitive,
    and should therefore be preferred.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`git switch`和`git restore`的命令更直观且准确。当你想创建一个新分支时，可以使用`git switch -c <branch>`，其中`-c`标志表示*创建*。在使用`checkout`时，你必须使用`git
    checkout -b <branch>`，其中`-b`标志表示*分支*。然而，你也可以使用`git checkout <branch>`在分支间切换，因此`-b`标志仅用于创建新分支，而一个名为*branch*的标志并不能很好地表明这是关于创建新分支而不是切换到一个已有的分支。因此，`git
    switch`和`git restore`的命令更直观，因此应当被优先使用。
- en: '**To conclude**'
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**总而言之**'
- en: While `git checkout` has been the go-to command for Git users for many years,
    with the introduction of `git switch` and `git checkout` there have been better
    alternatives out for a few years now. Having the two core functionalities of `git
    checkout` split into two separate commands, Git has made it easier to switch between
    branches and restore files without accidentally using the wrong command. If you’re
    still using `git checkout` rather than `git switch` and `git restore`, now is
    the perfect time to make the switch!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`git checkout`多年来一直是Git用户的首选命令，但随着`git switch`和`git restore`的引入，已经有了更好的替代方案。将`git
    checkout`的两个核心功能拆分成两个独立的命令后，Git使得在分支间切换和恢复文件变得更加容易，而不会不小心使用错误的命令。如果你仍在使用`git checkout`而不是`git
    switch`和`git restore`，现在正是切换的最佳时机！
- en: Resources
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: '[](https://git-scm.com/?source=post_page-----fe95182c6100--------------------------------)
    [## Git'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://git-scm.com/?source=post_page-----fe95182c6100--------------------------------)
    [## Git'
- en: Git is easy to learn and has a tiny footprint with lightning fast performance.
    It outclasses SCM tools like Subversion…
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Git易于学习，体积小，性能极快。它超越了像Subversion这样的SCM工具…
- en: git-scm.com](https://git-scm.com/?source=post_page-----fe95182c6100--------------------------------)
    [](https://hub.packtpub.com/git-2-23-released-with-two-new-commands-git-switch-and-git-restore-a-new-tutorial-and-much-more/?source=post_page-----fe95182c6100--------------------------------)
    [## Git 2.23 released with two new commands 'git switch' and 'git restore', and
    more!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[Git 2.23 发布，新增两个命令 ''git switch'' 和 ''git restore''，还有更多内容！](https://git-scm.com/?source=post_page-----fe95182c6100--------------------------------)'
- en: Last week, the team behind Git released that comes with experimental commands,
    backward compatibility and much more…
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上周，Git 团队发布了包含实验性命令、向后兼容等更多功能的版本…
- en: hub.packtpub.com](https://hub.packtpub.com/git-2-23-released-with-two-new-commands-git-switch-and-git-restore-a-new-tutorial-and-much-more/?source=post_page-----fe95182c6100--------------------------------)
    [](https://stackoverflow.com/questions/57265785/whats-the-difference-between-git-switch-and-git-checkout-branch?source=post_page-----fe95182c6100--------------------------------)
    [## What's the difference between git switch and git checkout
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[Hub PacktPub](https://hub.packtpub.com/git-2-23-released-with-two-new-commands-git-switch-and-git-restore-a-new-tutorial-and-much-more/?source=post_page-----fe95182c6100--------------------------------)
    [](https://stackoverflow.com/questions/57265785/whats-the-difference-between-git-switch-and-git-checkout-branch?source=post_page-----fe95182c6100--------------------------------)
    [## git switch 和 git checkout 有什么区别'
- en: The switch command indeed does the same thing as checkout, but only for those
    usages that switch branches. In…
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`switch` 命令确实与 `checkout` 做了相同的事情，但仅限于切换分支的用法。在…'
- en: stackoverflow.com](https://stackoverflow.com/questions/57265785/whats-the-difference-between-git-switch-and-git-checkout-branch?source=post_page-----fe95182c6100--------------------------------)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[Stack Overflow](https://stackoverflow.com/questions/57265785/whats-the-difference-between-git-switch-and-git-checkout-branch?source=post_page-----fe95182c6100--------------------------------)'
