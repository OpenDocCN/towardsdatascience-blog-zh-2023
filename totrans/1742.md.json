["```py\n>>> hash((1,2))\n-3550055125485641917\n>>> hash((1,[2]))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: unhashable type: 'list'\n```", "```py\n>>> import copy\n>>> a = (1, 2, 3)\n>>> b = a\n>>> c = tuple(a)\n>>> d = a[:]\n>>> e = copy.copy(a)     # a shallow copy\n>>> f = copy.deepcopy(a) # a deep copy\n```", "```py\n>>> a is b is c is d is e is f\nTrue\n```", "```py\n>>> import copy\n>>> a = ([1], 2, 3)\n>>> b = a\n>>> c = tuple(a)\n>>> d = a[:]\n>>> e = copy.copy(a)     # a shallow copy\n>>> f = copy.deepcopy(a) # a deep copy\n```", "```py\n>>> a is b is c is d is e\nTrue\n```", "```py\n>>> a is f\nFalse\n```", "```py\n>>> a[0] is b[0] is c[0] is d[0] is e[0]\nTrue\n```", "```py\n>>> a[0] is f[0]\nFalse\n```", "```py\n>>> d = {}\n>>> d[(1, 2)] = 3\n>>> d[(1, [2])] = 4\nTraceback (most recent call last):\n    ...\nTypeError: unhashable type: 'list'\n```", "```py\n>>> class City(tuple):\n...    def __new__(self, lat, long, population, area):\n...        return tuple.__new__(City, (lat, long, population, area))\n```", "```py\n>>> Warsaw = City(52.2297, 21.0122, 1_765_000, 517.2)\n>>> Warsaw\n(52.2297, 21.0122, 1765000, 517.2)\n>>> Warsaw[0]\n52.2297\n```", "```py\n>>> Warsaw = City(52.2297, 21.0122, 1_765_000)\nTraceback (most recent call last):\n    ...\nTypeError: __new__() missing 1 required positional argument: 'area'\n>>> Warsaw = City(52.2297, 21.0122, 1_765_000, 517.2, 50)\nTraceback (most recent call last):\n    ...\nTypeError: __new__() takes 5 positional arguments but 6 were given\n```", "```py\n>>> Warsaw_names = City(\n...     lat=52.2297,\n...     long=21.0122,\n...     population=1_765_000,\n...     area=517.2\n... )\n>>> Warsaw == Warsaw_names\nTrue\n```", "```py\n>>> Warsaw.area\nTraceback (most recent call last):\n    ...\nAttributeError: 'City' object has no attribute 'area'\n```", "```py\n>>> import operator\n>>> City.lat = property(operator.itemgetter(0))\n>>> City.long = property(operator.itemgetter(1))\n```", "```py\n>>> Warsaw.lat\n52.2297\n>>> Warsaw.long\n21.0122\n```", "```py\n>>> Warsaw.area\nTraceback (most recent call last):\n    ...\nAttributeError: 'City' object has no attribute 'area'\n```", "```py\n>>> City.population = property(operator.itemgetter(2))\n>>> City.area = property(operator.itemgetter(3))\n>>> Warsaw.population\n1765000\n>>> Warsaw.area\n517.2\n```", "```py\n>>> from pympler.asizeof import asizeof\n>>> for n in (3, 10, 100, 1000, 1_000_000, 5_000_000, 10_000_000):\n...     print(\n...         f\"tuple, n of {n: 9}: {asizeof(tuple(range(n))):10d}\"\n...         \"\\n\"\n...         f\" list, n of {n: 9}: {asizeof(list(range(n))):10d}\"\n...         \"\\n\"\n...         f\"{'-'*33}\"\n...         )\ntuple, n of         3:        152\n list, n of         3:        168\n---------------------------------\ntuple, n of        10:        432\n list, n of        10:        448\n---------------------------------\ntuple, n of       100:       4032\n list, n of       100:       4048\n---------------------------------\ntuple, n of      1000:      40032\n list, n of      1000:      40048\n---------------------------------\ntuple, n of   1000000:   40000032\n list, n of   1000000:   40000048\n---------------------------------\ntuple, n of   5000000:  200000032\n list, n of   5000000:  200000048\n---------------------------------\ntuple, n of  10000000:  400000032\n list, n of  10000000:  400000048\n---------------------------------\n```", "```py\n>>> listcomp = [i**2 for i in range(7)] # a list comprehension\n>>> genexp = (i**2 for i in range(7))   # NOT a tuple comprehension\n```", "```py\n>>> tuple(i**2 for i in range(7))\n(0, 1, 4, 9, 16, 25, 36)\n```", "```py\n>>> *(i**2 for i in range(7)),\n(0, 1, 4, 9, 16, 25, 36)\n```", "```py\n>>> x = [i**2 for i in range(7)]\n>>> *x,\n(0, 1, 4, 9, 16, 25, 36)\n```", "```py\n>>> *[i**2 for i in range(7)],\n(0, 1, 4, 9, 16, 25, 36)\n```", "```py\n>>> *[i**2 for i in range(7)]\n  File \"<stdin>\", line 1\nSyntaxError: can't use starred expression here\n```", "```py\n>>> x = {i**2 for i in range(7)}\n>>> *x,\n(0, 1, 4, 9, 16, 25, 36)\n```", "```py\n>>> x = (1, 2, 'Zulu Minster', )\n>>> y = (4, 4, )\n>>> x += y\n>>> x\n(1, 2, 'Zulu Minster', 4, 4)\n>>> x *= 2\n>>> x\n(1, 2, 'Zulu Minster', 4, 4, 1, 2, 'Zulu Minster', 4, 4)\n```", "```py\n>>> x = x + y\n```", "```py\nimport perftester\n\nfrom collections import namedtuple\nfrom typing import Callable, Optional\nLength = int\n\nTimeBenchmarks = namedtuple(\"TimeBenchmarks\", \"tuple list better\")\nMemoryBenchmarks = namedtuple(\"MemoryBenchmarks\", \"tuple list better\")\nBenchmarks = namedtuple(\"Benchmarks\", \"time memory\")\n\ndef benchmark(func_tuple, func_list: Callable,\n              number: Optional[int] = None) -> Benchmarks:\n    # time\n    t_tuple = perftester.time_benchmark(func_tuple, Number=number)\n    t_list = perftester.time_benchmark(func_list, Number=number)\n    better = \"tuple\" if t_tuple[\"min\"] < t_list[\"min\"] else \"list\"\n    time = TimeBenchmarks(t_tuple[\"min\"], t_list[\"min\"], better)\n\n    # memory\n    m_tuple = perftester.memory_usage_benchmark(func_tuple)\n    m_list = perftester.memory_usage_benchmark(func_list)\n    better = \"tuple\" if m_tuple[\"max\"] < m_list[\"max\"] else \"list\"\n    memory = MemoryBenchmarks(m_tuple[\"max\"], m_list[\"max\"], better)\n\n    return Benchmarks(time, memory)\n\ndef comprehension(n: Length) -> Benchmarks:\n    \"\"\"List comprehension vs tuple comprehension.\n\n    Here, we're benchmarking two operations:\n      * creating a container\n      * looping over it, using a for loop; nothing is done in the loop.\n    \"\"\"\n    def with_tuple(n: Length):\n        x = tuple(i**2 for i in range(n))\n        for _ in x:\n            pass\n\n    def with_list(n: Length):\n        x = [i**2 for i in range(n)]\n        for _ in x:\n            pass\n    number = int(10_000_000 / n) + 10\n    return benchmark(lambda: with_tuple(n), lambda: with_list(n), number)\n\ndef empty_container() -> Benchmarks:\n    \"\"\"List vs tuple benchmark: creating an empty container.\"\"\"\n    return benchmark(lambda: tuple(), lambda: [], number=100_000)\n\ndef short_literal() -> Benchmarks:\n    \"\"\"List vs tuple benchmark: tuple literal.\"\"\"\n    return benchmark(lambda: (1, 2, 3), lambda: [1, 2, 3], number=100_000)\n\ndef long_literal() -> Benchmarks:\n    \"\"\"List vs tuple benchmark: tuple literal.\"\"\"\n    return benchmark(\n        lambda: (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\n1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\n1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\n1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\n1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\n1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\n1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\n1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,),\n        lambda: [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\n1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\n1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\n1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\n1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\n1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\n1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\n1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,],\n        number=100_000)\n\ndef func_with_range(n: Length) -> Benchmarks:\n    \"\"\"List vs tuple benchmark: func(range(n)).\"\"\"\n    def with_tuple(n: Length):\n        return tuple(range(n)) \n\n    def with_list(n: Length):\n        return list(range(n))\n    number = int(10_000_000 / n) + 10\n    return benchmark(lambda: with_tuple(n), lambda: with_list(n), number)\n\ndef concatenation(n: Length) -> Benchmarks:\n    \"\"\"List vs tuple benchmark: func(range(n)).\"\"\"\n    def with_tuple(x: tuple):\n        x += x\n        return x\n\n    def with_list(y: list):\n        y += y\n        return y\n    number = int(10_000_000 / n) + 10\n    return benchmark(lambda: with_tuple(tuple(range(n))),\n                     lambda: with_list(list(range(n))),\n                     number)\n\ndef repeated_concatenation(n: Length) -> Benchmarks:\n    \"\"\"List vs tuple benchmark: func(range(n)).\"\"\"\n    def with_tuple(x: tuple):\n        x *= 5\n        return x\n\n    def with_list(y: list):\n        y *= 5\n        return y\n    number = int(10_000_000 / n) + 10\n    return benchmark(lambda: with_tuple(tuple(range(n))),\n                     lambda: with_list(list(range(n))), number)\n\nif __name__ == \"__main__\":\n    n_set = (3, 10, 20, 50, 100, 10_000, 1_000_000)\n    functions = (\n        comprehension,\n        empty_container,\n        short_literal,\n        long_literal,\n        func_with_range,\n        concatenation,\n        repeated_concatenation,\n        )\n    functions_with_n = (\n        comprehension,\n        func_with_range,\n        concatenation,\n        repeated_concatenation,\n    )\n\n    results = {}\n    for func in functions:\n        name = func.__name__\n        print(name)\n        if func in functions_with_n:\n            results[name] = {}\n            for n in n_set:\n                results[name][n] = func(n)\n        else:\n            results[name] = func()\n    perftester.pp(results)\n```", "```py\n{'comprehension': {3: Benchmarks(time=TimeBenchmarks(tuple=9.549e-07, list=8.086e-07, better='list'), memory=MemoryBenchmarks(tuple=15.62, list=15.63, better='tuple')),\n                   10: Benchmarks(time=TimeBenchmarks(tuple=2.09e-06, list=1.94e-06, better='list'), memory=MemoryBenchmarks(tuple=15.64, list=15.64, better='list')),\n                   20: Benchmarks(time=TimeBenchmarks(tuple=4.428e-06, list=4.085e-06, better='list'), memory=MemoryBenchmarks(tuple=15.64, list=15.65, better='tuple')),\n                   50: Benchmarks(time=TimeBenchmarks(tuple=1.056e-05, list=9.694e-06, better='list'), memory=MemoryBenchmarks(tuple=15.69, list=15.69, better='list')),\n                   100: Benchmarks(time=TimeBenchmarks(tuple=2.032e-05, list=1.968e-05, better='list'), memory=MemoryBenchmarks(tuple=15.7, list=15.7, better='list')),\n                   10000: Benchmarks(time=TimeBenchmarks(tuple=0.002413, list=0.002266, better='list'), memory=MemoryBenchmarks(tuple=15.96, list=16.04, better='tuple')),\n                   1000000: Benchmarks(time=TimeBenchmarks(tuple=0.2522, list=0.2011, better='list'), memory=MemoryBenchmarks(tuple=54.89, list=54.78, better='list'))},\n 'concatenation': {3: Benchmarks(time=TimeBenchmarks(tuple=3.38e-07, list=3.527e-07, better='tuple'), memory=MemoryBenchmarks(tuple=31.45, list=31.45, better='list')),\n                   10: Benchmarks(time=TimeBenchmarks(tuple=4.89e-07, list=4.113e-07, better='list'), memory=MemoryBenchmarks(tuple=31.45, list=31.45, better='list')),\n                   20: Benchmarks(time=TimeBenchmarks(tuple=5.04e-07, list=4.368e-07, better='list'), memory=MemoryBenchmarks(tuple=31.45, list=31.45, better='list')),\n                   50: Benchmarks(time=TimeBenchmarks(tuple=7.542e-07, list=6.22e-07, better='list'), memory=MemoryBenchmarks(tuple=31.45, list=31.45, better='list')),\n                   100: Benchmarks(time=TimeBenchmarks(tuple=1.133e-06, list=9.005e-07, better='list'), memory=MemoryBenchmarks(tuple=31.45, list=31.45, better='list')),\n                   10000: Benchmarks(time=TimeBenchmarks(tuple=0.0001473, list=0.000126, better='list'), memory=MemoryBenchmarks(tuple=31.7, list=31.7, better='list')),\n                   1000000: Benchmarks(time=TimeBenchmarks(tuple=0.04862, list=0.04247, better='list'), memory=MemoryBenchmarks(tuple=123.5, list=125.4, better='tuple'))},\n 'empty_container': Benchmarks(time=TimeBenchmarks(tuple=1.285e-07, list=1.107e-07, better='list'), memory=MemoryBenchmarks(tuple=23.92, list=23.92, better='list')),\n 'func_with_range': {3: Benchmarks(time=TimeBenchmarks(tuple=3.002e-07, list=3.128e-07, better='tuple'), memory=MemoryBenchmarks(tuple=23.92, list=23.92, better='list')),\n                     10: Benchmarks(time=TimeBenchmarks(tuple=4.112e-07, list=3.861e-07, better='list'), memory=MemoryBenchmarks(tuple=23.92, list=23.92, better='list')),\n                     20: Benchmarks(time=TimeBenchmarks(tuple=4.228e-07, list=4.104e-07, better='list'), memory=MemoryBenchmarks(tuple=23.93, list=23.93, better='list')),\n                     50: Benchmarks(time=TimeBenchmarks(tuple=5.761e-07, list=5.068e-07, better='list'), memory=MemoryBenchmarks(tuple=23.93, list=23.94, better='tuple')),\n                     100: Benchmarks(time=TimeBenchmarks(tuple=7.794e-07, list=6.825e-07, better='list'), memory=MemoryBenchmarks(tuple=23.94, list=23.94, better='list')),\n                     10000: Benchmarks(time=TimeBenchmarks(tuple=0.0001536, list=0.000159, better='tuple'), memory=MemoryBenchmarks(tuple=24.67, list=24.67, better='list')),\n                     1000000: Benchmarks(time=TimeBenchmarks(tuple=0.03574, list=0.03539, better='list'), memory=MemoryBenchmarks(tuple=91.7, list=88.45, better='list'))},\n 'long_literal': Benchmarks(time=TimeBenchmarks(tuple=1.081e-07, list=8.712e-07, better='tuple'), memory=MemoryBenchmarks(tuple=23.92, list=23.92, better='list')),\n 'repeated_concatenation': {3: Benchmarks(time=TimeBenchmarks(tuple=3.734e-07, list=3.836e-07, better='tuple'), memory=MemoryBenchmarks(tuple=31.83, list=31.83, better='list')),\n                            10: Benchmarks(time=TimeBenchmarks(tuple=4.594e-07, list=4.388e-07, better='list'), memory=MemoryBenchmarks(tuple=31.83, list=31.83, better='list')),\n                            20: Benchmarks(time=TimeBenchmarks(tuple=5.975e-07, list=5.578e-07, better='list'), memory=MemoryBenchmarks(tuple=31.83, list=31.83, better='list')),\n                            50: Benchmarks(time=TimeBenchmarks(tuple=9.951e-07, list=8.459e-07, better='list'), memory=MemoryBenchmarks(tuple=31.83, list=31.83, better='list')),\n                            100: Benchmarks(time=TimeBenchmarks(tuple=1.654e-06, list=1.297e-06, better='list'), memory=MemoryBenchmarks(tuple=31.83, list=31.83, better='list')),\n                            10000: Benchmarks(time=TimeBenchmarks(tuple=0.0002266, list=0.0001945, better='list'), memory=MemoryBenchmarks(tuple=31.83, list=31.83, better='list')),\n                            1000000: Benchmarks(time=TimeBenchmarks(tuple=0.09504, list=0.08721, better='list'), memory=MemoryBenchmarks(tuple=169.4, list=169.4, better='tuple'))},\n 'short_literal': Benchmarks(time=TimeBenchmarks(tuple=1.048e-07, list=1.403e-07, better='tuple'), memory=MemoryBenchmarks(tuple=23.92, list=23.92, better='list'))}\n```", "```py\n{'comprehension': {5000000: MemoryBenchmarks(tuple=208.8, list=208.8, better='list'),\n                   10000000: MemoryBenchmarks(tuple=402.2, list=402.2, better='tuple')},\n 'concatenation': {5000000: MemoryBenchmarks(tuple=285.4, list=247.2, better='list'),\n                   10000000: MemoryBenchmarks(tuple=554.8, list=478.5, better='list')},\n 'func_with_range': {5000000: MemoryBenchmarks(tuple=400.4, list=396.4, better='list'),\n                     10000000: MemoryBenchmarks(tuple=402.2, list=402.2, better='list')},\n 'repeated_concatenation': {5000000: MemoryBenchmarks(tuple=399.8, list=361.7, better='list'),\n                            10000000: MemoryBenchmarks(tuple=783.7, list=707.4, better='list')}}\n```"]