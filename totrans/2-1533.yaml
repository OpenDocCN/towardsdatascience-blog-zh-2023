- en: Modern Route Optimization with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python进行现代路线优化
- en: 原文：[https://towardsdatascience.com/modern-route-optimization-with-python-fea87d34288b](https://towardsdatascience.com/modern-route-optimization-with-python-fea87d34288b)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/modern-route-optimization-with-python-fea87d34288b](https://towardsdatascience.com/modern-route-optimization-with-python-fea87d34288b)
- en: '![](../Images/bf7a59d41b19f964ce71b34753c515bf.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bf7a59d41b19f964ce71b34753c515bf.png)'
- en: Image by author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Shortest Path, Traveling Salesman Problem, Vehicle Routing Problem, Plotting
    Maps and Animations
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最短路径，旅行推销员问题，车辆路线问题，绘制地图和动画
- en: '[](https://maurodp.medium.com/?source=post_page-----fea87d34288b--------------------------------)[![Mauro
    Di Pietro](../Images/3586d9d3238d904a1e1fa39c77b59d3f.png)](https://maurodp.medium.com/?source=post_page-----fea87d34288b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fea87d34288b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fea87d34288b--------------------------------)
    [Mauro Di Pietro](https://maurodp.medium.com/?source=post_page-----fea87d34288b--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://maurodp.medium.com/?source=post_page-----fea87d34288b--------------------------------)[![Mauro
    Di Pietro](../Images/3586d9d3238d904a1e1fa39c77b59d3f.png)](https://maurodp.medium.com/?source=post_page-----fea87d34288b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fea87d34288b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fea87d34288b--------------------------------)
    [Mauro Di Pietro](https://maurodp.medium.com/?source=post_page-----fea87d34288b--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fea87d34288b--------------------------------)
    ·13 min read·Jun 7, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----fea87d34288b--------------------------------)
    ·13分钟阅读·2023年6月7日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: 'In this article, I will use Python to address the following problem: what is
    the optimal route for 1 or more vehicles in order to deliver to a set of customers?'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将使用Python解决以下问题：在一辆或多辆车辆的情况下，如何找到送货给一组客户的最佳路线？
- en: '![](../Images/9f53173e6217b1a3283583fa432e80f1.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9f53173e6217b1a3283583fa432e80f1.png)'
- en: Photo by [Robert Anasch](https://unsplash.com/@diesektion?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Robert Anasch](https://unsplash.com/@diesektion?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Summary
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: '**Route Optimization** is the process of determining the most cost-efficient
    route. It doesn’t necessarily mean finding the shortest path between two points,
    as it includes all relevant factors (i.e. profit, number of locations, time windows).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**路线优化**是确定最具成本效益路线的过程。这不仅仅是找到两点之间的最短路径，因为它还包括所有相关因素（即利润、地点数量、时间窗口）。'
- en: This topic was first addressed mathematically in the 1930s to solve a school
    bus routing problem. It was called the [**Traveling Salesman Problem**](https://en.wikipedia.org/wiki/Travelling_salesman_problem),
    which consists of finding the shortest way for a driver to visit all the locations,
    given the distances between them.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个话题在1930年代首次以数学形式提出，用于解决校车路线问题。它被称为[**旅行推销员问题**](https://en.wikipedia.org/wiki/Travelling_salesman_problem)，其核心是找到一种最短路径，使得司机可以访问所有地点，前提是已知各地点之间的距离。
- en: The Traveling Salesman Problem can be generalized into the [**Vehicle Routing
    Problem**](https://en.wikipedia.org/wiki/Vehicle_routing_problem)**:** the issue
    of mapping routes for vehicles while minimizing an objective function composed
    of operating costs and user preferences. It’s the main problem in logistics transportation.
    For instance, if at night there is a lot of traffic (or high tolls) on the shortest
    path, it might not be the optimal route for dinner deliveries.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 旅行推销员问题可以被概括为[**车辆路线问题**](https://en.wikipedia.org/wiki/Vehicle_routing_problem)**：**在最小化由运营成本和用户偏好组成的目标函数的同时，为车辆规划路线。这是物流运输中的主要问题。例如，如果在晚上最短路径上交通繁忙（或过高的收费），那么这可能不是晚餐送货的最佳路线。
- en: '![](../Images/b49a250fcafdd374f58d378c3cc2c4e6.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b49a250fcafdd374f58d378c3cc2c4e6.png)'
- en: Image by author
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: I will present some useful Python code that can be easily applied in other similar
    cases (just copy, paste, run) and walk through every line of code with comments
    so that you can replicate this example (link to the full code below).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我将展示一些有用的Python代码，这些代码可以轻松应用于其他类似情况（只需复制、粘贴、运行），并逐行讲解每一行代码，以便你能够复制这个例子（完整代码链接如下）。
- en: '[](https://github.com/mdipietro09/DataScience_ArtificialIntelligence_Utils/blob/master/machine_learning/example_route_optimization.ipynb?source=post_page-----fea87d34288b--------------------------------)
    [## DataScience_ArtificialIntelligence_Utils/example_route_optimization.ipynb
    at master ·…'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[## DataScience_ArtificialIntelligence_Utils/example_route_optimization.ipynb
    at master ·…](https://github.com/mdipietro09/DataScience_ArtificialIntelligence_Utils/blob/master/machine_learning/example_route_optimization.ipynb?source=post_page-----fea87d34288b--------------------------------)'
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你现在不能执行这个操作。你在另一个标签页或窗口中登录了。你在另一个标签页或…
- en: github.com](https://github.com/mdipietro09/DataScience_ArtificialIntelligence_Utils/blob/master/machine_learning/example_route_optimization.ipynb?source=post_page-----fea87d34288b--------------------------------)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/mdipietro09/DataScience_ArtificialIntelligence_Utils/blob/master/machine_learning/example_route_optimization.ipynb?source=post_page-----fea87d34288b--------------------------------)'
- en: I will use the “**Starbucks Stores dataset**” that provides the location of
    all the stores (link below). I shall select a particular geographic area and use
    the longitude and latitude provided to create a route.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用“**星巴克门店数据集**”，它提供了所有门店的位置（链接如下）。我将选择一个特定的地理区域，并使用提供的经纬度来创建路线。
- en: '[](https://www.kaggle.com/starbucks/store-locations?source=post_page-----fea87d34288b--------------------------------)
    [## Starbucks Locations Worldwide'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Starbucks Locations Worldwide](https://www.kaggle.com/starbucks/store-locations?source=post_page-----fea87d34288b--------------------------------)'
- en: Name, ownership type, and location of every Starbucks store in operation
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每个在营运中的星巴克门店的名称、所有权类型和位置
- en: www.kaggle.com](https://www.kaggle.com/starbucks/store-locations?source=post_page-----fea87d34288b--------------------------------)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.kaggle.com](https://www.kaggle.com/starbucks/store-locations?source=post_page-----fea87d34288b--------------------------------)'
- en: 'In particular, I will go through:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我将介绍：
- en: 'Setup: import packages, read geographic data, visualization with [*Folium*](https://python-visualization.github.io/folium/).'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置：导入包，读取地理数据，通过[*Folium*](https://python-visualization.github.io/folium/)进行可视化。
- en: Create the Network Graph with [*OSMnx*](https://osmnx.readthedocs.io/en/stable/),
    calculate the Shortest Path with [*NetworkX*](https://networkx.org/), andgenerate
    a simulation with [*Plotly*](https://plotly.com/)animations.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[*OSMnx*](https://osmnx.readthedocs.io/en/stable/)创建网络图，使用[*NetworkX*](https://networkx.org/)计算最短路径，并使用[*Plotly*](https://plotly.com/)动画生成模拟。
- en: 'Preprocessing: calculate the distance matrix.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预处理：计算距离矩阵。
- en: Traveling Salesman Problem (simple Route Optimization) with [*OR-Tools*](https://developers.google.com/optimization/install/python).
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旅行推销员问题（简单路线优化）使用[*OR-Tools*](https://developers.google.com/optimization/install/python)。
- en: Vehicle Routing Problem(advanced Route Optimization) with [*OR-Tools*](https://developers.google.com/optimization/install/python).
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 车辆路径问题（高级路线优化）使用[*OR-Tools*](https://developers.google.com/optimization/install/python)。
- en: Setup
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置
- en: 'First of all, I need to import the following libraries:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我需要导入以下库：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, I shall read the dataset (please note that for geospatial data Latitude=Y
    axis and Longitude=X axis):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我将读取数据集（请注意，对于地理空间数据，纬度= Y轴，经度= X轴）：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/c009077907b3d39a84f43d6311342c08.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c009077907b3d39a84f43d6311342c08.png)'
- en: Image by author
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于作者
- en: Among these locations, I will pick one to be “depot” (the base), and calculate
    what’s the best way to serve all the other locations.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些位置中，我将选择一个作为“仓库”（基地），并计算服务所有其他位置的最佳方式。
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/82d4ee2db85c00802f0f0ef77e35225e.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/82d4ee2db85c00802f0f0ef77e35225e.png)'
- en: Image by author
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于作者
- en: 'Let’s plot the starting location along with the other data points:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将起始位置与其他数据点一起绘制：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/e483215eadb73fe5dd8088bc1cb6645c.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e483215eadb73fe5dd8088bc1cb6645c.png)'
- en: Image by author
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于作者
- en: To make this more realistic, I’m going to display the data points as locations
    on a map. You can do that with ***Folium****,* a powerful library that uses HTML
    to create different types of interactive maps.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其更具现实感，我将把数据点显示为地图上的位置。你可以使用***Folium****，这是一个强大的库，通过HTML创建不同类型的互动地图。
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/9feac4f847f2693bac0098bf9d441adc.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9feac4f847f2693bac0098bf9d441adc.png)'
- en: Image by author
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于作者
- en: Basically, we need to find the most convenient way for the red point (depot)
    to serve all the other locations (customers).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们需要找到最方便的方式，让红点（仓库）服务所有其他位置（客户）。
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/c7008366c21c9033daae390780f0201d.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c7008366c21c9033daae390780f0201d.png)'
- en: Image by author
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于作者
- en: 'A quick tip, if you want the option to change the map style, add the following
    code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一个快速提示，如果你想要更改地图样式的选项，请添加以下代码：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/bb48185cb6263bd29b6ad121841a3840.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bb48185cb6263bd29b6ad121841a3840.png)'
- en: Image by author
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Shortest Path
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最短路径
- en: The most common approach for this kind of usecase is to consider the **road
    network as a graph** and find the shortest path between nodes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种用例，最常见的方法是将**道路网络视为图**，并找到节点之间的最短路径。
- en: We already have all the nodes (the location points in our dataset), but we’re
    missing the links (the streets connecting the points). Therefore, we need to get
    street map data with ***OSMnx***, a super useful library that queries [Open Street
    Map](https://www.openstreetmap.org/) and converts the response into ***NetworkX***graphs,
    which is the standard Python library to work with graph objects.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了所有节点（数据集中的位置点），但我们缺少链接（连接点的街道）。因此，我们需要使用***OSMnx***获取街道地图数据，它是一个超级有用的库，查询[Open
    Street Map](https://www.openstreetmap.org/)并将响应转换为***NetworkX***图，这是标准的 Python
    图形库。
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/b49531ad5f3816801e7c9cf3db454dde.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b49531ad5f3816801e7c9cf3db454dde.png)'
- en: Image by author
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'The graph object contains nodes and links extracted from the map. All those
    little points are nodes. If you want to see just the links, you can set *node_size=0*
    :'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图形对象包含从地图提取的节点和链接。所有那些小点都是节点。如果你想只查看链接，可以设置*node_size=0*：
- en: '![](../Images/ccd8dc40ac5254507d42b97aec76ee7f.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ccd8dc40ac5254507d42b97aec76ee7f.png)'
- en: Image by author
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: The nodes have this form…
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 节点的形式是这样的…
- en: '![](../Images/3cded6d385733d791950e63a4a0b785e.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3cded6d385733d791950e63a4a0b785e.png)'
- en: image by author
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: … you can put them in a “geo-dataframe” like this…
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: …你可以将它们放入像这样的“地理数据框”中…
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/85666e8a9b2acfd527c937b723323e64.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/85666e8a9b2acfd527c937b723323e64.png)'
- en: Image by author
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: … and the same goes for the links.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: …链接也是如此。
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/bca00c7762b7f6f0a4431bb95514f1d5.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bca00c7762b7f6f0a4431bb95514f1d5.png)'
- en: Image by author
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'Now that we have the graph, let’s understand how to **move inside the network**
    from node to node. We already have a starting point, so let’s pick a random destination…
    for example the closest node:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了图形，让我们了解如何在节点之间**在网络中移动**。我们已经有一个起始点，所以让我们选择一个随机的目的地……例如最近的节点：
- en: '![](../Images/6e9031760b045f1c4d05fe19b8a6d4b9.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6e9031760b045f1c4d05fe19b8a6d4b9.png)'
- en: Image by author
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/32d90f442ed4073142b945748cb51baa.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/32d90f442ed4073142b945748cb51baa.png)'
- en: We have 2 locations, but in order to use the graph, we must get the equivalent
    nodes.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有 2 个位置，但为了使用图形，我们必须获得等效的节点。
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/93440398215b342b59357e9be7226c1f.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/93440398215b342b59357e9be7226c1f.png)'
- en: Hence, we can find the **shortest path** between the two nodes with [*Dijkstra*’s
    algorithm](https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm).Basically, it
    calculates the overall route by finding the shortest path from one “neighborhood”
    of nodes to another, step by step.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以通过[*Dijkstra*算法](https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm)找到两个节点之间的**最短路径**。基本上，它通过逐步从一个“邻里”找到另一个的最短路径来计算整体路线。
- en: '![](../Images/4fd450eab0856491a407aa00e4da12dd.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4fd450eab0856491a407aa00e4da12dd.png)'
- en: Image by author
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: In Python, we can apply the algorithm directly with *NetworkX.* One can specify
    the attribute weight of the optimization, for instance we could prioritize the
    distance or the travel time*.* The shortest weighted path between 2 nodes is the
    one that minimizes the weight.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，我们可以直接使用*NetworkX*应用算法。例如，可以指定优化的属性权重，例如我们可以优先考虑距离或旅行时间*。* 最短加权路径是使权重最小化的路径。
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/73201dfffa383e6626aa50dd13ddbe41.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/73201dfffa383e6626aa50dd13ddbe41.png)'
- en: Image by author
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'If we optimize for time instead:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们改为优化时间：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/c829340edf5bda1be27278699b5630bb.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c829340edf5bda1be27278699b5630bb.png)'
- en: Image by author
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: We can compare the paths on the graph…
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在图上比较路径…
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/5214ca07ba4bfaf6c981928af61ab0f5.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5214ca07ba4bfaf6c981928af61ab0f5.png)'
- en: Image by author
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: '… or even better on the map using the combo *OSMnx* — *Folium*:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: …或者更好地使用组合*OSMnx* — *Folium*在地图上：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](../Images/5be6177d8ae80dc93908065db3d33013.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5be6177d8ae80dc93908065db3d33013.png)'
- en: Image by author
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Finally, we can select a path and **simulate the driver** that goes from node
    to node. We shall use *Plotly,* the famous graphing library for interactive plots,
    and [*Mapbox*](https://docs.mapbox.com/help/getting-started/access-tokens/)*,*
    a provider of custom online maps for famous websites (i.e. Lonely Planet and Financial
    Times). First, we must prepare the dataframe with route information, then create
    a *Plotly* animation.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以选择一条路径并**模拟驾驶员**从一个节点到另一个节点。我们将使用*Plotly*，这是一个著名的互动图表库，以及[*Mapbox*](https://docs.mapbox.com/help/getting-started/access-tokens/)*，一个为知名网站（如
    Lonely Planet 和 Financial Times）提供定制在线地图的供应商。首先，我们必须准备包含路线信息的数据框，然后创建一个*Plotly*动画。
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/75eda7da8f190d057ab81d7f2fd29632.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/75eda7da8f190d057ab81d7f2fd29632.png)'
- en: Image by author
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](../Images/659608282f55b1e603ec496695c791bf.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/659608282f55b1e603ec496695c791bf.png)'
- en: Image by author
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Preprocessing
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预处理
- en: 'That was just a warm-up to learn how to find the path from one node to another.
    We still have to calculate a route to visit all the locations. These problems
    typically follow a set formula: generate the distance matrix of shortest-path
    costs between all locations, construct an initial solution, and improve it by
    a sequence of iterations.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个热身，学习如何从一个节点找到另一个节点的路径。我们仍需计算一个访问所有位置的路线。这些问题通常遵循一个固定的公式：生成所有位置之间最短路径成本的距离矩阵，构建初始解，并通过一系列迭代改进它。
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](../Images/19af3a6c17428f5833b0cc8fc4966307.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/19af3a6c17428f5833b0cc8fc4966307.png)'
- en: Image by author
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Therefore, before applying any model, the first thing to do is calculate the
    **distance matrix** between all the locations in our dataset. We can do that by
    finding the distance of the shortest path between each node we are interested
    in.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在应用任何模型之前，首要任务是计算我们数据集中所有位置之间的**距离矩阵**。我们可以通过找到我们感兴趣的每个节点之间的最短路径距离来完成这项任务。
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![](../Images/486beb85350303fec97e0d4245a64ac7.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/486beb85350303fec97e0d4245a64ac7.png)'
- en: Image by author
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'It’s essential to check if there are *NaN*s, *0*s, and *Inf* values:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 检查是否有*NaN*、*0* 和 *Inf* 值是至关重要的：
- en: '[PRE20]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![](../Images/1a02f3369648affb2f240406dbc1f845.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1a02f3369648affb2f240406dbc1f845.png)'
- en: Image by author
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: We have the *0*s in the right place (the diagonal), and there is no *Inf*, although
    we see some *NaNs*… so we gotta deal with them. This step is quite delicate, as
    the distance matrix impacts any routing model one can use. Usually, I replace
    the missing values with the average distance of the row.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在正确的位置（对角线）有*0*，且没有*Inf*，虽然看到了一些*NaNs*……所以我们得处理它们。这一步非常关键，因为距离矩阵会影响任何可以使用的路由模型。通常，我会用行的平均距离来替代缺失值。
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](../Images/0e2a7d94c6245c5a8230dc6bfc315700.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0e2a7d94c6245c5a8230dc6bfc315700.png)'
- en: Image by author
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: We shall now start working on the Routing Optimization models.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将开始处理路由优化模型。
- en: Traveling Salesman Problem
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旅行商问题
- en: If we consider just the distance that a single driver has to go, **the optimal
    route is the collection of the shortest paths from node to node**, so basically
    it’s the shortest route.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仅考虑单个驾驶员的距离，**最优路线是从一个节点到另一个节点的最短路径集合**，所以基本上它就是最短路线。
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![](../Images/2fdd9f614969cd2bc4ae683eed3e8961.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2fdd9f614969cd2bc4ae683eed3e8961.png)'
- en: The most advanced Python library is ***OR-Tools***, developed by Google for
    solving linear programming and related optimization problems. That’s such a powerful
    tool because it makes use of many techniques, one is [Conflict-Driven Clause Learning](https://en.wikipedia.org/wiki/Conflict-driven_clause_learning)
    which is similar to a [Reinforcement Learning](https://en.wikipedia.org/wiki/Reinforcement_learning)
    algorithm. To put it in simple terms, it learns from conflicts during the search
    for a satisfying solution and tries to avoid repeating the same conflict.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最先进的 Python 库是***OR-Tools***，由 Google 开发，用于解决线性编程和相关的优化问题。这是一个非常强大的工具，因为它使用了许多技术，其中之一是[冲突驱动子句学习](https://en.wikipedia.org/wiki/Conflict-driven_clause_learning)，这与[强化学习](https://en.wikipedia.org/wiki/Reinforcement_learning)算法类似。简单来说，它从寻找满足解的过程中的冲突中学习，并尝试避免重复相同的冲突。
- en: First of all, you must define the *index manager* that keeps track of the nodes
    indexing, and the *routing model* which is the main *OR-Tools*object.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你必须定义*索引管理器*，它跟踪节点索引，以及*路由模型*，这是主要的*OR-Tools*对象。
- en: '[PRE23]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Then, we need to add the cost function for each step which will be minimized.
    In our case, it’s the distance…
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要为每一步添加成本函数，目标是将其最小化。在我们的案例中，就是距离……
- en: '[PRE24]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: … and specify the strategy.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: … 并指定策略。
- en: '[PRE25]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, solve the problem and print the solution:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，解决问题并打印解决方案：
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![](../Images/ab4432c36ab5323b4023572c0fe404be.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ab4432c36ab5323b4023572c0fe404be.png)'
- en: 'Let’s transform the route from a sequence of indexes to a sequence of nodes:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将路线从索引序列转换为节点序列：
- en: '[PRE27]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![](../Images/e6ccc60f0d3e1ccc4e2f604e0ad62fc3.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e6ccc60f0d3e1ccc4e2f604e0ad62fc3.png)'
- en: 'Thanks to that, we can plot the route on the map:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此原因，我们可以在地图上绘制路线：
- en: '[PRE28]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![](../Images/bacb8b5d93b0facfed7bbce332486f0b.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bacb8b5d93b0facfed7bbce332486f0b.png)'
- en: Image by author
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Vehicle Routing Problem
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 车辆路线问题
- en: 'Sadly, the real world isn’t that simple as companies have more business constraints.
    Consequently, there are many variants of the Vehicle Routing Problem:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，现实世界并不简单，因为公司有更多的业务约束。因此，车辆路线问题有许多变体：
- en: '**Capacitated Vehicle Routing Problem**: vehicles have a limited carrying capacity
    for the goods that must be delivered.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有容量限制的车辆路线问题**：车辆对必须交付的货物有有限的承载能力。'
- en: '**Vehicle Routing Problem with Time Windows**: the delivery locations have
    time windows within the deliveries that must be made.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**带时间窗口的车辆路线问题**：送货地点有时间窗口，必须在这些时间窗口内完成送货。'
- en: '**Vehicle Routing Problem with Pickup and Delivery**: goods need to be moved
    from certain pickup locations to other delivery locations.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**带取货和送货的车辆路线问题**：货物需要从某些取货地点运送到其他送货地点。'
- en: '**Vehicle Routing Problem with Profits**: it is not mandatory for vehicles
    to visit all nodes, the aim is to maximize the sum of collected profits.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**带利润的车辆路线问题**：车辆不必访问所有节点，目标是最大化收集到的利润总和。'
- en: For this usecase, I’m going to introduce limitations for the drivers in both
    carrying capacity and coverable distance.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个用例，我将引入司机在承载能力和可覆盖距离方面的限制。
- en: '[PRE29]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Just like we did before, we need to create the manager, the model, and add
    the distance function:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前一样，我们需要创建管理器、模型，并添加距离函数：
- en: '[PRE30]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'However, this time we must include the new business constraints:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这次我们必须包含新的业务约束：
- en: '[PRE31]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Finally, solve the problem and print the solution:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，解决问题并打印解决方案：
- en: '[PRE32]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![](../Images/01fdaabe9cd564878b987e4dcdae50aa.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/01fdaabe9cd564878b987e4dcdae50aa.png)'
- en: '[PRE33]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![](../Images/d352f702ac98f76ab16ceda8212f25c1.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d352f702ac98f76ab16ceda8212f25c1.png)'
- en: 'Let’s visualize the routes on the map:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在地图上可视化这些路线：
- en: '[PRE34]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![](../Images/76dddc86b47e0982a23b578f78750fef.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/76dddc86b47e0982a23b578f78750fef.png)'
- en: Image by author
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: At last, to end this article in style, let’s run the simulation to see our drivers
    getting to work. First, get the appropriate dataframe…
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了以风格结束这篇文章，让我们运行模拟以查看我们的司机开始工作。首先，获取适当的数据框……
- en: '[PRE35]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: … second, plot the animation.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: ……其次，绘制动画。
- en: '[PRE36]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '![](../Images/f44f48ed2c9521cc8103fbeb40459c63.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f44f48ed2c9521cc8103fbeb40459c63.png)'
- en: Image by author
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Conclusion
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: This article has been a tutorial to demonstrate **how to perform Route Optimization
    with Python.** First of all, we learn how to visualize the geo-dataset on a map
    and build the network graph. Then, I showed how to approach both Traveling Salesman
    Problem by finding the shortest route for a driver, and Vehicle Routing Problem
    by finding the cheapest route for many drivers.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 本文是一个教程，展示了**如何使用 Python 进行路线优化**。首先，我们学习如何在地图上可视化地理数据集并构建网络图。然后，我展示了如何处理旅行商问题，通过找到司机的最短路线，以及车辆路线问题，通过找到多个司机的最便宜路线。
- en: On top of that, now you know how to produce interactive plots and cool animations
    using geospatial data.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，现在你知道如何使用地理空间数据生成交互式图表和酷炫动画。
- en: I hope you enjoyed it! Feel free to contact me for questions and feedback or
    just to share your interesting projects.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢这篇文章！如有问题或反馈，或只是想分享你的有趣项目，请随时联系我。
- en: 👉 [Let’s Connect](https://linktr.ee/maurodp) 👈
  id: totrans-182
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 👉 [让我们联系](https://linktr.ee/maurodp) 👈
- en: 'This article is part of the series **Machine Learning with Python**, see also:'
  id: totrans-183
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本文是**使用 Python 进行机器学习**系列的一部分，请参见：
- en: '[](/machine-learning-with-python-classification-complete-tutorial-d2c99dc524ec?source=post_page-----fea87d34288b--------------------------------)
    [## Machine Learning with Python: Classification (complete tutorial)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/machine-learning-with-python-classification-complete-tutorial-d2c99dc524ec?source=post_page-----fea87d34288b--------------------------------)
    [## 使用 Python 进行机器学习：分类（完整教程）'
- en: Data Analysis & Visualization, Feature Engineering & Selection, Model Design
    & Testing, Evaluation & Explainability
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据分析与可视化、特征工程与选择、模型设计与测试、评估与解释
- en: 'towardsdatascience.com](/machine-learning-with-python-classification-complete-tutorial-d2c99dc524ec?source=post_page-----fea87d34288b--------------------------------)
    [](/machine-learning-with-python-regression-complete-tutorial-47268e546cea?source=post_page-----fea87d34288b--------------------------------)
    [## Machine Learning with Python: Regression (complete tutorial)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Python 进行机器学习：回归（完整教程）](https://towardsdatascience.com/machine-learning-with-python-classification-complete-tutorial-d2c99dc524ec?source=post_page-----fea87d34288b--------------------------------)
    [](/machine-learning-with-python-regression-complete-tutorial-47268e546cea?source=post_page-----fea87d34288b--------------------------------)
    [## 使用 Python 进行机器学习：回归（完整教程）'
- en: Data Analysis & Visualization, Feature Engineering & Selection, Model Design
    & Testing, Evaluation & Explainability
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据分析与可视化、特征工程与选择、模型设计与测试、评估与解释
- en: towardsdatascience.com](/machine-learning-with-python-regression-complete-tutorial-47268e546cea?source=post_page-----fea87d34288b--------------------------------)
    [](/clustering-geospatial-data-f0584f0b04ec?source=post_page-----fea87d34288b--------------------------------)
    [## Clustering Geospatial Data
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Python 进行机器学习：回归（完整教程）](https://towardsdatascience.com/machine-learning-with-python-regression-complete-tutorial-47268e546cea?source=post_page-----fea87d34288b--------------------------------)
    [](/clustering-geospatial-data-f0584f0b04ec?source=post_page-----fea87d34288b--------------------------------)
    [## 聚类地理空间数据'
- en: Plot Machine Learning & Deep Learning Clustering with interactive Maps
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用交互式地图绘制机器学习和深度学习聚类
- en: 'towardsdatascience.com](/clustering-geospatial-data-f0584f0b04ec?source=post_page-----fea87d34288b--------------------------------)
    [](/deep-learning-with-python-neural-networks-complete-tutorial-6b53c0b06af0?source=post_page-----fea87d34288b--------------------------------)
    [## Deep Learning with Python: Neural Networks (complete tutorial)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Python 进行深度学习：神经网络（完整教程）](https://towardsdatascience.com/clustering-geospatial-data-f0584f0b04ec?source=post_page-----fea87d34288b--------------------------------)
    [](/deep-learning-with-python-neural-networks-complete-tutorial-6b53c0b06af0?source=post_page-----fea87d34288b--------------------------------)
    [## 使用 Python 进行深度学习：神经网络（完整教程）'
- en: Build, Plot & Explain Artificial Neural Networks with TensorFlow
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 TensorFlow 构建、绘制并解释人工神经网络
- en: towardsdatascience.com](/deep-learning-with-python-neural-networks-complete-tutorial-6b53c0b06af0?source=post_page-----fea87d34288b--------------------------------)
    [](/modern-recommendation-systems-with-neural-networks-3cc06a6ded2c?source=post_page-----fea87d34288b--------------------------------)
    [## Modern Recommendation Systems with Neural Networks
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Python 进行深度学习：神经网络（完整教程）](https://towardsdatascience.com/deep-learning-with-python-neural-networks-complete-tutorial-6b53c0b06af0?source=post_page-----fea87d34288b--------------------------------)
    [](/modern-recommendation-systems-with-neural-networks-3cc06a6ded2c?source=post_page-----fea87d34288b--------------------------------)
    [## 现代推荐系统与神经网络'
- en: Build hybrid models with Python & TensorFlow
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Python 和 TensorFlow 构建混合模型
- en: towardsdatascience.com](/modern-recommendation-systems-with-neural-networks-3cc06a6ded2c?source=post_page-----fea87d34288b--------------------------------)
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[现代推荐系统与神经网络](https://towardsdatascience.com/modern-recommendation-systems-with-neural-networks-3cc06a6ded2c?source=post_page-----fea87d34288b--------------------------------)'
