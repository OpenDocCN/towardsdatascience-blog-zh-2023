- en: Modern Route Optimization with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/modern-route-optimization-with-python-fea87d34288b](https://towardsdatascience.com/modern-route-optimization-with-python-fea87d34288b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/bf7a59d41b19f964ce71b34753c515bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Shortest Path, Traveling Salesman Problem, Vehicle Routing Problem, Plotting
    Maps and Animations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://maurodp.medium.com/?source=post_page-----fea87d34288b--------------------------------)[![Mauro
    Di Pietro](../Images/3586d9d3238d904a1e1fa39c77b59d3f.png)](https://maurodp.medium.com/?source=post_page-----fea87d34288b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fea87d34288b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fea87d34288b--------------------------------)
    [Mauro Di Pietro](https://maurodp.medium.com/?source=post_page-----fea87d34288b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fea87d34288b--------------------------------)
    ·13 min read·Jun 7, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, I will use Python to address the following problem: what is
    the optimal route for 1 or more vehicles in order to deliver to a set of customers?'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9f53173e6217b1a3283583fa432e80f1.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Robert Anasch](https://unsplash.com/@diesektion?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Route Optimization** is the process of determining the most cost-efficient
    route. It doesn’t necessarily mean finding the shortest path between two points,
    as it includes all relevant factors (i.e. profit, number of locations, time windows).'
  prefs: []
  type: TYPE_NORMAL
- en: This topic was first addressed mathematically in the 1930s to solve a school
    bus routing problem. It was called the [**Traveling Salesman Problem**](https://en.wikipedia.org/wiki/Travelling_salesman_problem),
    which consists of finding the shortest way for a driver to visit all the locations,
    given the distances between them.
  prefs: []
  type: TYPE_NORMAL
- en: The Traveling Salesman Problem can be generalized into the [**Vehicle Routing
    Problem**](https://en.wikipedia.org/wiki/Vehicle_routing_problem)**:** the issue
    of mapping routes for vehicles while minimizing an objective function composed
    of operating costs and user preferences. It’s the main problem in logistics transportation.
    For instance, if at night there is a lot of traffic (or high tolls) on the shortest
    path, it might not be the optimal route for dinner deliveries.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b49a250fcafdd374f58d378c3cc2c4e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: I will present some useful Python code that can be easily applied in other similar
    cases (just copy, paste, run) and walk through every line of code with comments
    so that you can replicate this example (link to the full code below).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/mdipietro09/DataScience_ArtificialIntelligence_Utils/blob/master/machine_learning/example_route_optimization.ipynb?source=post_page-----fea87d34288b--------------------------------)
    [## DataScience_ArtificialIntelligence_Utils/example_route_optimization.ipynb
    at master ·…'
  prefs: []
  type: TYPE_NORMAL
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/mdipietro09/DataScience_ArtificialIntelligence_Utils/blob/master/machine_learning/example_route_optimization.ipynb?source=post_page-----fea87d34288b--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: I will use the “**Starbucks Stores dataset**” that provides the location of
    all the stores (link below). I shall select a particular geographic area and use
    the longitude and latitude provided to create a route.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.kaggle.com/starbucks/store-locations?source=post_page-----fea87d34288b--------------------------------)
    [## Starbucks Locations Worldwide'
  prefs: []
  type: TYPE_NORMAL
- en: Name, ownership type, and location of every Starbucks store in operation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.kaggle.com](https://www.kaggle.com/starbucks/store-locations?source=post_page-----fea87d34288b--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'In particular, I will go through:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Setup: import packages, read geographic data, visualization with [*Folium*](https://python-visualization.github.io/folium/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the Network Graph with [*OSMnx*](https://osmnx.readthedocs.io/en/stable/),
    calculate the Shortest Path with [*NetworkX*](https://networkx.org/), andgenerate
    a simulation with [*Plotly*](https://plotly.com/)animations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Preprocessing: calculate the distance matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traveling Salesman Problem (simple Route Optimization) with [*OR-Tools*](https://developers.google.com/optimization/install/python).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vehicle Routing Problem(advanced Route Optimization) with [*OR-Tools*](https://developers.google.com/optimization/install/python).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, I need to import the following libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, I shall read the dataset (please note that for geospatial data Latitude=Y
    axis and Longitude=X axis):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c009077907b3d39a84f43d6311342c08.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Among these locations, I will pick one to be “depot” (the base), and calculate
    what’s the best way to serve all the other locations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/82d4ee2db85c00802f0f0ef77e35225e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s plot the starting location along with the other data points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e483215eadb73fe5dd8088bc1cb6645c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: To make this more realistic, I’m going to display the data points as locations
    on a map. You can do that with ***Folium****,* a powerful library that uses HTML
    to create different types of interactive maps.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9feac4f847f2693bac0098bf9d441adc.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Basically, we need to find the most convenient way for the red point (depot)
    to serve all the other locations (customers).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c7008366c21c9033daae390780f0201d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'A quick tip, if you want the option to change the map style, add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bb48185cb6263bd29b6ad121841a3840.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Shortest Path
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most common approach for this kind of usecase is to consider the **road
    network as a graph** and find the shortest path between nodes.
  prefs: []
  type: TYPE_NORMAL
- en: We already have all the nodes (the location points in our dataset), but we’re
    missing the links (the streets connecting the points). Therefore, we need to get
    street map data with ***OSMnx***, a super useful library that queries [Open Street
    Map](https://www.openstreetmap.org/) and converts the response into ***NetworkX***graphs,
    which is the standard Python library to work with graph objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b49531ad5f3816801e7c9cf3db454dde.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'The graph object contains nodes and links extracted from the map. All those
    little points are nodes. If you want to see just the links, you can set *node_size=0*
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ccd8dc40ac5254507d42b97aec76ee7f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The nodes have this form…
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3cded6d385733d791950e63a4a0b785e.png)'
  prefs: []
  type: TYPE_IMG
- en: image by author
  prefs: []
  type: TYPE_NORMAL
- en: … you can put them in a “geo-dataframe” like this…
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/85666e8a9b2acfd527c937b723323e64.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: … and the same goes for the links.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bca00c7762b7f6f0a4431bb95514f1d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the graph, let’s understand how to **move inside the network**
    from node to node. We already have a starting point, so let’s pick a random destination…
    for example the closest node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6e9031760b045f1c4d05fe19b8a6d4b9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/32d90f442ed4073142b945748cb51baa.png)'
  prefs: []
  type: TYPE_IMG
- en: We have 2 locations, but in order to use the graph, we must get the equivalent
    nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/93440398215b342b59357e9be7226c1f.png)'
  prefs: []
  type: TYPE_IMG
- en: Hence, we can find the **shortest path** between the two nodes with [*Dijkstra*’s
    algorithm](https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm).Basically, it
    calculates the overall route by finding the shortest path from one “neighborhood”
    of nodes to another, step by step.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4fd450eab0856491a407aa00e4da12dd.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: In Python, we can apply the algorithm directly with *NetworkX.* One can specify
    the attribute weight of the optimization, for instance we could prioritize the
    distance or the travel time*.* The shortest weighted path between 2 nodes is the
    one that minimizes the weight.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/73201dfffa383e6626aa50dd13ddbe41.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'If we optimize for time instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c829340edf5bda1be27278699b5630bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: We can compare the paths on the graph…
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5214ca07ba4bfaf6c981928af61ab0f5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '… or even better on the map using the combo *OSMnx* — *Folium*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5be6177d8ae80dc93908065db3d33013.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we can select a path and **simulate the driver** that goes from node
    to node. We shall use *Plotly,* the famous graphing library for interactive plots,
    and [*Mapbox*](https://docs.mapbox.com/help/getting-started/access-tokens/)*,*
    a provider of custom online maps for famous websites (i.e. Lonely Planet and Financial
    Times). First, we must prepare the dataframe with route information, then create
    a *Plotly* animation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/75eda7da8f190d057ab81d7f2fd29632.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/659608282f55b1e603ec496695c791bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Preprocessing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'That was just a warm-up to learn how to find the path from one node to another.
    We still have to calculate a route to visit all the locations. These problems
    typically follow a set formula: generate the distance matrix of shortest-path
    costs between all locations, construct an initial solution, and improve it by
    a sequence of iterations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/19af3a6c17428f5833b0cc8fc4966307.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, before applying any model, the first thing to do is calculate the
    **distance matrix** between all the locations in our dataset. We can do that by
    finding the distance of the shortest path between each node we are interested
    in.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/486beb85350303fec97e0d4245a64ac7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s essential to check if there are *NaN*s, *0*s, and *Inf* values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1a02f3369648affb2f240406dbc1f845.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: We have the *0*s in the right place (the diagonal), and there is no *Inf*, although
    we see some *NaNs*… so we gotta deal with them. This step is quite delicate, as
    the distance matrix impacts any routing model one can use. Usually, I replace
    the missing values with the average distance of the row.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0e2a7d94c6245c5a8230dc6bfc315700.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: We shall now start working on the Routing Optimization models.
  prefs: []
  type: TYPE_NORMAL
- en: Traveling Salesman Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we consider just the distance that a single driver has to go, **the optimal
    route is the collection of the shortest paths from node to node**, so basically
    it’s the shortest route.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2fdd9f614969cd2bc4ae683eed3e8961.png)'
  prefs: []
  type: TYPE_IMG
- en: The most advanced Python library is ***OR-Tools***, developed by Google for
    solving linear programming and related optimization problems. That’s such a powerful
    tool because it makes use of many techniques, one is [Conflict-Driven Clause Learning](https://en.wikipedia.org/wiki/Conflict-driven_clause_learning)
    which is similar to a [Reinforcement Learning](https://en.wikipedia.org/wiki/Reinforcement_learning)
    algorithm. To put it in simple terms, it learns from conflicts during the search
    for a satisfying solution and tries to avoid repeating the same conflict.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, you must define the *index manager* that keeps track of the nodes
    indexing, and the *routing model* which is the main *OR-Tools*object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Then, we need to add the cost function for each step which will be minimized.
    In our case, it’s the distance…
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: … and specify the strategy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, solve the problem and print the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ab4432c36ab5323b4023572c0fe404be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s transform the route from a sequence of indexes to a sequence of nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e6ccc60f0d3e1ccc4e2f604e0ad62fc3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Thanks to that, we can plot the route on the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bacb8b5d93b0facfed7bbce332486f0b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Vehicle Routing Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sadly, the real world isn’t that simple as companies have more business constraints.
    Consequently, there are many variants of the Vehicle Routing Problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Capacitated Vehicle Routing Problem**: vehicles have a limited carrying capacity
    for the goods that must be delivered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vehicle Routing Problem with Time Windows**: the delivery locations have
    time windows within the deliveries that must be made.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vehicle Routing Problem with Pickup and Delivery**: goods need to be moved
    from certain pickup locations to other delivery locations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vehicle Routing Problem with Profits**: it is not mandatory for vehicles
    to visit all nodes, the aim is to maximize the sum of collected profits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this usecase, I’m going to introduce limitations for the drivers in both
    carrying capacity and coverable distance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Just like we did before, we need to create the manager, the model, and add
    the distance function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'However, this time we must include the new business constraints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, solve the problem and print the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/01fdaabe9cd564878b987e4dcdae50aa.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d352f702ac98f76ab16ceda8212f25c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s visualize the routes on the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/76dddc86b47e0982a23b578f78750fef.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: At last, to end this article in style, let’s run the simulation to see our drivers
    getting to work. First, get the appropriate dataframe…
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: … second, plot the animation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f44f48ed2c9521cc8103fbeb40459c63.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This article has been a tutorial to demonstrate **how to perform Route Optimization
    with Python.** First of all, we learn how to visualize the geo-dataset on a map
    and build the network graph. Then, I showed how to approach both Traveling Salesman
    Problem by finding the shortest route for a driver, and Vehicle Routing Problem
    by finding the cheapest route for many drivers.
  prefs: []
  type: TYPE_NORMAL
- en: On top of that, now you know how to produce interactive plots and cool animations
    using geospatial data.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you enjoyed it! Feel free to contact me for questions and feedback or
    just to share your interesting projects.
  prefs: []
  type: TYPE_NORMAL
- en: 👉 [Let’s Connect](https://linktr.ee/maurodp) 👈
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This article is part of the series **Machine Learning with Python**, see also:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](/machine-learning-with-python-classification-complete-tutorial-d2c99dc524ec?source=post_page-----fea87d34288b--------------------------------)
    [## Machine Learning with Python: Classification (complete tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: Data Analysis & Visualization, Feature Engineering & Selection, Model Design
    & Testing, Evaluation & Explainability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'towardsdatascience.com](/machine-learning-with-python-classification-complete-tutorial-d2c99dc524ec?source=post_page-----fea87d34288b--------------------------------)
    [](/machine-learning-with-python-regression-complete-tutorial-47268e546cea?source=post_page-----fea87d34288b--------------------------------)
    [## Machine Learning with Python: Regression (complete tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: Data Analysis & Visualization, Feature Engineering & Selection, Model Design
    & Testing, Evaluation & Explainability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/machine-learning-with-python-regression-complete-tutorial-47268e546cea?source=post_page-----fea87d34288b--------------------------------)
    [](/clustering-geospatial-data-f0584f0b04ec?source=post_page-----fea87d34288b--------------------------------)
    [## Clustering Geospatial Data
  prefs: []
  type: TYPE_NORMAL
- en: Plot Machine Learning & Deep Learning Clustering with interactive Maps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'towardsdatascience.com](/clustering-geospatial-data-f0584f0b04ec?source=post_page-----fea87d34288b--------------------------------)
    [](/deep-learning-with-python-neural-networks-complete-tutorial-6b53c0b06af0?source=post_page-----fea87d34288b--------------------------------)
    [## Deep Learning with Python: Neural Networks (complete tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: Build, Plot & Explain Artificial Neural Networks with TensorFlow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/deep-learning-with-python-neural-networks-complete-tutorial-6b53c0b06af0?source=post_page-----fea87d34288b--------------------------------)
    [](/modern-recommendation-systems-with-neural-networks-3cc06a6ded2c?source=post_page-----fea87d34288b--------------------------------)
    [## Modern Recommendation Systems with Neural Networks
  prefs: []
  type: TYPE_NORMAL
- en: Build hybrid models with Python & TensorFlow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/modern-recommendation-systems-with-neural-networks-3cc06a6ded2c?source=post_page-----fea87d34288b--------------------------------)
  prefs: []
  type: TYPE_NORMAL
