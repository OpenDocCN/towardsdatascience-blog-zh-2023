["```py\n$ cd ~/Desktop\n$ mkdir plotly-dash\n```", "```py\n$ pip install --user pipenv\n```", "```py\n$ cd plotly-dash\n$ pipenv shell\n```", "```py\n(plotly-dash) $ pip install dash pandas statsbombpy\n```", "```py\n(plotly-dash) $ pip install notebook\n... (installation outputs)\n\n(plotly-dash) $ jupyter notebook\n```", "```py\n- plotly-dash/\n    - src/\n        - classes.py\n        - functions.py\n    - plotly.ipynb\n```", "```py\n# Third-party libraries\nimport pandas as pd\nfrom statsbombpy import sb\n\n# Custom modules\nfrom src.functions import prepare_team_data\n\nevents, shots, assists = prepare_team_data('Barcelona')\nshots.head()\n```", "```py\n# Fig to update\nfig = go.Figure()\n\n# Internal variables\nself.height_px = self.pitch_width*10*zoom_ratio\nself.width_px = self.pitch_length*10*zoom_ratio\n\npitch_length_half = self.pitch_length/2 if not self.half else 0\npitch_width_half = self.pitch_width/2\ncorner_arc_radius = 1\n\ncentre_circle_radius = 9.15\n\ngoal = 7.32\ngoal_area_width = goal + (5.5*2)\ngoal_area_length = 5.5\npenalty_area_width = goal_area_width + (11*2)\npenalty_area_length = goal_area_length + 11\npenalty_spot_dist = 11\npenalty_circle_radius = 9.15\n```", "```py\nfig.add_trace(\n    go.Scatter(\n        x=[0, self.pitch_length, self.pitch_length, 0, 0], \n        y=[0, 0, self.pitch_width, self.pitch_width, 0], \n        mode='lines',\n        hoverinfo='skip',\n        marker_color=line_color,\n        showlegend=False,\n        fill=\"toself\",\n        fillcolor=bg_color\n    )\n)\n```", "```py\nfig.update_layout(\n    yaxis_range=[-self._vertical_margin, self.pitch_width + self._vertical_margin], \n    xaxis_range=[-self._horizontal_margin, self.pitch_length + self._horizontal_margin],\n    height=self.height_px,\n    width=self.width_px,\n    plot_bgcolor='rgba(0,0,0,0)',\n    xaxis=dict(showgrid=False, visible=False),\n    yaxis=dict(showgrid=False, visible=False)\n)\n```", "```py\nimport plotly.graph_objects as go\nfrom src.classes import FootballPitch\n\nplayer = 'Leo Messi'\n\npitch = FootballPitch(half=True)\nfig = pitch.plot_pitch(False, bg_color='#C1E1C1') \n\nplayer_shots = get_player_shots(player, shots.copy(), pitch)\nscatter_colors = [\"#E7E657\", \"#57C8E7\"]\n\nfor i, group in enumerate([True, False]):\n    fig.add_trace(go.Scatter(\n        x=player_shots[player_shots['goal'] == group]['x'],\n        y=player_shots[player_shots['goal'] == group]['y'],\n        mode=\"markers\",\n        name='Goal' if group else 'No Goal',\n        marker=dict(\n            color=scatter_colors[i],\n            size=8,\n            line=dict(\n                color='black',\n                width=1\n            )\n        ),\n    ))\n\nfig.update_layout(\n    title='Shot distribution'\n)\n```", "```py\nplayer = 'Leo Messi'\nmax_shots = 0\nfig = make_subplots()\n\nfor p in shots.player.unique():\n    player_shots = get_player_shots(p, shots)\n\n    xy = 15 * (player_shots[['float_time', 'minutes']]/15).round()\n    xy = xy.groupby(['float_time']).count()[['minutes']]\n\n    max_shots = xy.minutes.max() if xy.minutes.max() > max_shots else max_shots\n\n    fig.add_trace(\n        go.Scatter(\n            name=p,\n            x = xy.index, \n            y = xy.minutes,\n            mode='lines',\n            opacity=1 if p == player else 0.2\n        )\n    )\n```", "```py\n# Add team's avg\nxy = 15 * (shots[['float_time', 'minutes']]/15).round()\nxy = xy.groupby(['float_time']).count()[['minutes']]/len(shots.player.unique())\n\nfig.add_trace(\n    go.Scatter(\n        name=\"Team's Average\",\n        x = xy.index, \n        y = xy.minutes,\n        line = go.scatter.Line(dash='dash'),\n        marker=None,\n        mode='lines'\n    )\n)\n```", "```py\nfig.update_xaxes(range=[0, 91])\nfig.update_layout(\n    #title='Shots by Quarter',\n    margin=dict(l=20, r=20, t=5, b=20),\n    xaxis = dict(\n        tickmode = 'array',\n        tickvals = xy.index.values\n    ),\n    height=200,\n    plot_bgcolor=\"#F9F9F9\", \n    paper_bgcolor=\"#F9F9F9\",\n    yaxis_range=[-3,max_shots+5]\n)\n```", "```py\n- plotly-dash/\n    - src/\n        - classes.py\n        - functions.py\n    - plotly.ipynb\n    - app.py\n```", "```py\nfrom dash import html, Dash, dcc, Input, Output, callback\n\napp = Dash(__name__) \n\nif __name__ == '__main__':\n    app.run(debug=True)\n```", "```py\n(plotly-dash) $ python app.py\nDash is running on http://127.0.0.1:8050/\n\n * Serving Flask app 'app'\n * Debug mode: on\n```", "```py\n@callback(\n    Output('shot_distribution', 'figure'),\n    Input('player_dropdown', 'value')\n)\ndef create_shot_distribution(player):\n    pitch = FootballPitch(half=True)\n    fig = pitch.plot_pitch(False, bg_color='#C1E1C1', zoom_ratio=0.8) \n\n    player_shots = get_player_shots(player, SHOTS.copy(), pitch)\n\n    scatter_colors = [\"#E7E657\", \"#57C8E7\"]\n\n    for i, group in enumerate([True, False]):\n        fig.add_trace(go.Scatter(\n            x=player_shots[player_shots['goal'] == group]['x'],\n            y=player_shots[player_shots['goal'] == group]['y'],\n            mode=\"markers\",\n            name='Goal' if group else 'No Goal',\n            marker=dict(\n                color=scatter_colors[i],\n                size=8,\n                line=dict(\n                    color='black',\n                    width=1\n                )\n            ),\n            #marker_color=scatter_colors[i] # #E7E657 i #57C8E7  \n        ))\n\n    fig.update_layout(\n        margin=dict(l=20, r=20, t=5, b=20),\n    )\n\n    return fig\n```", "```py\ndcc.Dropdown(\n    PLAYER_OPTIONS,\n    'All players', \n    id='player_dropdown', \n    style={'width': '200px', 'margin': '20px auto', 'text-align': 'left'}\n)\n```", "```py\nfilter = html.Div(\n    [\n        dcc.Dropdown(\n            PLAYER_OPTIONS,\n            'All players', \n            id='player_dropdown', \n            style={\n                'width': '200px', \n                'margin': '20px auto', \n                'text-align': 'left'\n            }\n        )\n    ],\n    style={'display': 'inline-block'}\n)\n```", "```py\nshot_distribution_graph = html.Div(\n    [\n        html.H2('Shot Distribution'),\n        dcc.Graph(id='shot_distribution', figure={})\n    ], \n    style={\n        'padding': '2%',\n        'display': 'inline-block'\n    }\n)\n```", "```py\napp.layout = html.Div([\n    shot_distribution_graph, filter\n], style={\n    'width': '1650px', \n    'margin': 'auto'\n})\n```", "```py\n# Functions\n@callback(\n    Output('shots_by_quarter', 'figure'),\n    Input('player_dropdown', 'value')\n)\ndef create_shots_by_quarter(player):\n    fig = make_subplots()\n\n    max_shots = 0\n\n    for p in SHOTS.player.unique():\n        player_shots = get_player_shots(p, SHOTS)\n\n        xy = 15 * (player_shots[['float_time', 'minutes']]/15).round()\n        xy = xy.groupby(['float_time']).count()[['minutes']]\n\n        max_shots = xy.minutes.max() if xy.minutes.max() > max_shots else max_shots\n\n        fig.add_trace(\n            go.Scatter(\n                name=p,\n                x = xy.index, \n                y = xy.minutes,\n                mode='lines',\n                opacity=1 if p == player else 0.2\n            )\n        )\n\n    # Add team's avg\n    xy = 15 * (SHOTS[['float_time', 'minutes']]/15).round()\n    xy = xy.groupby(['float_time']).count()[['minutes']]/len(SHOTS.player.unique())\n\n    fig.add_trace(\n        go.Scatter(\n            name=\"Team's Average\",\n            x = xy.index, \n            y = xy.minutes,\n            line = go.scatter.Line(dash='dash'),\n            marker=None,\n            mode='lines'\n        )\n    )\n\n    fig.update_xaxes(range=[0, 91])\n    fig.update_layout(\n        margin=dict(l=20, r=20, t=5, b=20),\n        xaxis = dict(\n            tickmode = 'array',\n            tickvals = xy.index.values\n        ),\n        height=200,\n        plot_bgcolor=\"#F9F9F9\", \n        paper_bgcolor=\"#F9F9F9\",\n        yaxis_range=[-3,max_shots+5]\n    )\n\n    return fig\n\n# Dashboard's layout components\nshots_by_quarter = html.Div(\n    [\n        html.H2('Shots By Quarter', style={'margin-top': '20px'}),\n        dcc.Graph(id='shots_by_quarter', figure={})\n    ],\n    style={\n        'padding': '2%'\n    }\n)\n\n# Create layout\napp = Dash(__name__)\napp.layout = html.Div([\n    shot_distribution_graph, filter, shots_by_quarter\n], style={'width': '1650px', 'margin': 'auto'})\n\n# Run app\nif __name__ == '__main__':\n    app.run(debug=True)\n```", "```py\n**Thanks for reading the post!** \n\nI really hope you enjoyed it and found it insightful.\n\nFollow me and subscribe to my mail list for more \ncontent like this one, it helps a lot!\n\n**@polmarin**\n```"]