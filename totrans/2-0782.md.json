["```py\ncsv_path  = './youtube/GBvideos.csv'\njson_path = './youtube/US_category_id.json'\n\ndf = pl.read_csv(csv_path)\n\nwith open(json_path, 'r') as f:\n    categories = json.load(f)\n\nid_to_category = {}\nfor c in categories['items']:\n    id_to_category[int(c['id'])] = c['snippet']['title']\n```", "```py\ndef parse_dates(df: pl.DataFrame, date_cols: Dict[str, str]) -> pl.DataFrame:\n    expressions = []\n    for date_col, format in date_cols.items():\n        expressions.append(pl.col(date_col).str.to_date(format=format))\n\n    df = df.with_columns(expressions)\n    return df\n\n# Column name with expected date format\ndate_column_format = {\n    \"trending_date\": '%y.%d.%m',\n    \"publish_time\": '%Y-%m-%dT%H:%M:%S%.fZ'\n}\n\ndf = parse_dates(df, date_column_format).with_columns(\n    pl.col(\"category_id\").map_dict(id_to_category)\n)\n```", "```py\ndf = df.with_columns(\n    time_to_trending=pl.col(\"trending_date\") - pl.col(\"publish_time\").dt.date(),\n    likes_to_dislike_ratio=pl.col(\"likes\") / pl.col(\"dislikes\"),\n    likes_to_views_ratio=pl.col(\"likes\") / pl.col(\"views\"),\n    comments_to_views_ratio=pl.col(\"comment_count\") / pl.col(\"views\"),\n)\n\n# Sense check 2 features\nprint(df[[\"trending_date\", \"publish_time\", \"time_to_trending\"]].sample(2))\nprint(df[[\"likes\", \"dislikes\", \"likes_to_dislike_ratio\"]].sample(2))\n```", "```py\ndf = df.with_columns(\n    trending_weekday = pl.col('trending_date').dt.weekday(),\n    trending_month = pl.col('trending_date').dt.month(),\n    trending_year = pl.col(\"trending_date\").dt.year()\n)\n```", "```py\ntime_to_trending_df = df.groupby(\n    [\"video_id\", \"title\", \"category_id\", \"channel_title\"]\n).agg(\n    pl.col(\"time_to_trending\").min().dt.days(),\n    pl.col(\"trending_date\").min().dt.date().alias(\"first_day_in_trending\"),\n    pl.col(\"trending_date\").max().dt.date().alias(\"last_day_in_trending\"),\n    (pl.col(\"trending_date\").max() - pl.col(\"trending_date\").min()).dt.days()\n    .alias(\"days_in_trending\"),\n)\n\nprint(f\"Average time to trending is {time_to_trending_df['time_to_trending'].mean()} days\")\nprint(f\"Median time to trending is {time_to_trending_df['time_to_trending'].median()} days\")\n\n>>> Average time to trending is 36.25735294117647 days\n>>> Median time to trending is 2.0 days\n```", "```py\ntime_to_trending_df = time_to_trending_df.filter(pl.col(\"time_to_trending\") <= 60)\nprint(f\"Average time to trending is {time_to_trending_df['time_to_trending'].mean()} days\")\nprint(f\"Median time to trending is {time_to_trending_df['time_to_trending'].median()} days\")\n\n>>> Average time to trending is 3.7225 days\n>>> Median time to trending is 2.0 days\n```", "```py\nfastest_category_to_trending = (\n    time_to_trending_df.with_columns(\n        # Count over category ID\n        times_in_trending=pl.count().over(\"category_id\")\n    # Filter infrequent categories\n    ).filter(pl.col(\"category_times_in_trending\") >= 100)\n    # Calculate mean time to trending\n    .groupby(\"category_id\")\n    .agg(pl.col(\"time_to_trending\").mean())\n    .sort(\"time_to_trending\")\n)\n```", "```py\ndef avg_frequent(\n    df: pl.DataFrame,\n    by: str,\n    frequency_threshold: int,\n    metric: str = \"time_to_trending\",\n) -> pl.DataFrame:\n    results = (\n        df.with_columns(times_in_trending=pl.count().over(by))\n        .filter(pl.col(\"times_in_trending\") >= frequency_threshold)\n        .groupby(by)\n        .agg(pl.col(metric).mean())\n        .sort(metric)\n    )\n\n    return results\n\nfastest_category_to_trending = avg_frequent(\n    time_to_trending_df, by=\"category_id\", frequency_threshold=100\n).head(3)\nfastest_channel_to_trending = avg_frequent(\n    time_to_trending_df, by=\"channel_title\", frequency_threshold=10\n).head(3)\n\nprint(fastest_category_to_trending)\nprint(fastest_channel_to_trending) \n```", "```py\nlongest_trending_categories = avg_frequent(\n    time_to_trending_df,\n    by=\"category_id\",\n    frequency_threshold=100,\n    metric=\"days_in_trending\",\n).tail(3)  # tails because it's sorted in descending\n\nlongest_trending_channels = avg_frequent(\n    time_to_trending_df,\n    by=\"channel_title\",\n    frequency_threshold=10,\n    metric=\"days_in_trending\",\n).tail(3)\n\nprint(longest_trending_categories)\nprint(longest_trending_channels)\n```", "```py\ntrending_monthly_stats = df.groupby_dynamic(\n    index_column=\"trending_date\",  # date column\n    every=\"1mo\",  # can also me 1w, 1d, 1h etc\n    closed=\"both\",  # including starting and end date\n    by=\"category_id\", # other grouping columns\n    include_boundaries=True,  # showcase the boudanries\n).agg(\n    pl.col(\"video_id\").n_unique().alias(\"videos_number\"),\n)\n\nprint(trending_monthly_stats.sample(3))\n```", "```py\nplotting_df = trending_monthly_stats.filter(pl.col(\"category_id\").is_in(top_categories))\n\nsns.lineplot(\n    x=plotting_df[\"trending_date\"],\n    y=plotting_df[\"videos_number\"],\n    hue=plotting_df[\"category_id\"],\n    style=plotting_df[\"category_id\"],\n    markers=True,\n    dashes=False,\n    palette='Set2'\n)\n\nplt.title(\"Total Number of Videos in Trending per Category per Month\")\n```", "```py\ntrending_monthly_stats_unique = (\n    time_to_trending_df.sort(\"first_day_in_trending\")\n    .groupby_dynamic(\n        index_column=\"first_day_in_trending\",\n        every=\"1mo\",\n        by=\"category_id\",\n        include_boundaries=True,\n    )\n    .agg(pl.col(\"video_id\").n_unique().alias(\"videos_number\"))\n)\n\nplotting_df = trending_monthly_stats_unique.filter(pl.col(\"category_id\").is_in(top_categories))\nsns.lineplot(\n    x=plotting_df[\"first_day_in_trending\"],\n    y=plotting_df[\"videos_number\"],\n    hue=plotting_df[\"category_id\"],\n    style=plotting_df[\"category_id\"],\n    markers=True,\n    dashes=False,\n    palette='Set2'\n)\n\nplt.title(\" Number of New Trending Videos per Category per Month\")\n```", "```py\nviews_per_category_date = (\n    df.groupby([\"category_id\", \"trending_date\"])\n    .agg(pl.col(\"views\").sum())\n    .sort([\"category_id\", \"trending_date\"])\n)\n```", "```py\n# Calculate rolling average\nviews_per_category_date_rolling = views_per_category_date.groupby_rolling(\n    index_column=\"trending_date\",  # Date column\n    by=\"category_id\",  # Grouping column\n    period=\"1w\"  # Rolling length\n).agg(\n    pl.col(\"views\").mean().alias(\"rolling_weekly_average\")\n)\n\n# Plotting\nplotting_df = views_per_category_date_rolling.filter(pl.col(\"category_id\").is_in(['Music', 'Entertainment']))\nsns.lineplot(\n    x=plotting_df[\"trending_date\"],\n    y=plotting_df[\"rolling_weekly_average\"],\n    hue=plotting_df[\"category_id\"],\n    style=plotting_df[\"category_id\"],\n    markers=True,\n    dashes=False,\n    palette='Set2'\n)\n\nplt.title(\"7-day Views Average\")\n```"]