- en: 'Data Modeling for Mere Mortals — Part 2: Dimensional Modeling Fundamentals'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/data-modeling-for-mere-mortals-part-2-dimensional-modeling-fundamentals-ae2f53622321](https://towardsdatascience.com/data-modeling-for-mere-mortals-part-2-dimensional-modeling-fundamentals-ae2f53622321)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introducing a four-step dimensional-modeling design approach
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://datamozart.medium.com/?source=post_page-----ae2f53622321--------------------------------)[![Nikola
    Ilic](../Images/9fab894b9696c0dfd80c5173188b720b.png)](https://datamozart.medium.com/?source=post_page-----ae2f53622321--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ae2f53622321--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ae2f53622321--------------------------------)
    [Nikola Ilic](https://datamozart.medium.com/?source=post_page-----ae2f53622321--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ae2f53622321--------------------------------)
    ·9 min read·Sep 1, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Do you know what is *probably* the best data model in the Business Intelligence
    world? Curious to learn the 4-step dimensional design process? This article will
    provide you with all the fundamentals of dimensional modeling
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bdfd954c7e43aaf7a89e8a58a5890b31.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Photo by **徐 at Pexels**](https://www.pexels.com/de-de/foto/flachfokus-fotografie-von-gelben-sternlaternen-980859/)'
  prefs: []
  type: TYPE_NORMAL
- en: In the [previous article](https://data-mozart.com/data-modeling-for-mere-mortals-part-1-what-is-data-modeling/),
    you learned the general principles of data modeling. Now, it’s time to narrow
    down our learning journey and master data modeling concepts and techniques that
    are specifically relevant to business intelligence scenarios. And, whenever we’re
    talking about data modeling for business intelligence, dimensional modeling is
    definitely the number one concept.
  prefs: []
  type: TYPE_NORMAL
- en: History Lessons — Ralph Kimball
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we come up to explain why dimensional modeling is named like that — dimensional—let’s
    first take a brief tour through some history lessons. In 1996, a man called [Ralph
    Kimball](https://www.kimballgroup.com/data-warehouse-business-intelligence-resources/books/kimball-reader/)
    published a book, “The Data Warehouse Toolkit,” which is still considered a dimensional
    modeling “Bible”. In his book, Kimball introduced a completely new approach to
    modeling data for analytical workloads, the so-called “bottom-up” approach. The
    focus is on identifying key business processes within the organization and modeling
    these first, before introducing additional business processes.
  prefs: []
  type: TYPE_NORMAL
- en: 4-Step Dimensional Design Process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kimball’s approach is fairly simple and consists of 4 steps, also known as the
    “4-Step Dimensional Design process”. Each step is based on a decision.
  prefs: []
  type: TYPE_NORMAL
- en: It starts with ***selecting the business process***. To be consistent, let’s
    use the same example as in the previous article and imagine that selling a ticket
    for an event is the business process we are interested in
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/e869fbfe8ba584863996842139a82e80.png)'
  prefs: []
  type: TYPE_IMG
- en: Illustration by author
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The next step is to ***declare the grain***. Grain? What on Earth is grain?
    Simply said, that is the lowest level of detail captured by the business process.
    In our example, the lowest level of detail is the individual ticket sale. We will
    come up later to explain why choosing the right grain is of paramount importance
    in dimensional modeling. At this moment, it’s just important to remember that
    grain refers to the lowest level of detail captured by the business process
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Once you declare the grain, the next step is to ***identify the dimensions***.
    Let’s forget about this name dimension for a second…And try to explain what “dimension”
    really is…It’s a special type of table that I like to think of as a lookup table.
    You know, if you need more descriptive information about a certain object — that’s
    what you’ll find in the lookup table. Oops, I mean, in the dimension table. Think
    of a person and its description. How would you describe a specific person? By
    name, for sure. Then, by gender, age, physical and email address, and probably
    phone number too. Or product? The product probably has a name, belongs to a specific
    category, and has a specific color or size. ***Dimension tables usually answer
    the questions starting with “W”: Who, What, When, Where, Why***. Back to our example:
    **When** did we sell the ticket? **Where** did we sell the ticket? **What** type
    of ticket did we sell? And so on…'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. The last step in this 4-step dimensional design process is ***identifying
    the facts.*** If we think of a dimension as a lookup table, a fact table is a
    table that stores the data about events — something that happened as a result
    of the business process. In most cases, but not always, these events are represented
    with numeric values — **How many** tickets did we sell? **How much** revenue did
    we make?
  prefs: []
  type: TYPE_NORMAL
- en: Why Dimensional Modeling?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we move on to explain different physical implementations of dimensional
    modeling, let’s quickly reiterate the key benefits of building a dimensional model
    for business intelligence scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '***User-friendly data navigation*** — as users, we often get it easier when
    thinking about the business process in terms of the subjects that are part of
    the process. Which event sold the most tickets in the 2nd quarter of the last
    year? How many tickets were bought by female customers for the Champions League
    final game? Which employee in the USA sold the most VIP tickets for the Super
    Bowl in 2022? And, many more of course…'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Performance*** — As you’ve already learned, OLAP systems are designed to
    support quick and efficient data read operations, which usually means fewer joins
    between tables. That’s exactly what dimensional modeling provides through Star-schema
    design — and we’ll go into more detail about it in the next section'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Flexibility*** — this is one of the key advantages of a dimensional model.
    Did your customer change the address? Did your employee change position within
    the organization? No worries, as all these challenges can be easily handled within
    the model, by using a technique called “slowly changing dimension”. But, more
    on that later in the article'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Modeler or Astrologist? Understanding Star vs Snowflake schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you find yourself surrounded by experienced data modelers, you’ll probably
    hear them talking about stars and snowflakes. Don’t worry, they haven’t become
    astrologists or nature researchers all of a sudden. Star and snowflake schema
    are probably the most influential concepts in the world of dimensional modeling.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s first try to explain the star schema. Don’t forget, according to Kimball,
    each piece of data should be classified either as “what, when, where, who, why”,
    or as “how much”, or “how many”. So, in a well-designed dimensional model, you
    should have a central table containing all the measurements and events — this
    is a fact table — surrounded by lookup tables, which we refer to as dimensions.
    The fact table and dimension tables are connected via relationships established
    between the primary key from the dimension table and the foreign key from the
    fact table. If you take a look at the following illustration, you’ll understand
    why this data modeling design pattern is called star schema.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ade5e1f0c605859272d4c5066ce0c7c9.png)'
  prefs: []
  type: TYPE_IMG
- en: Illustration by author
  prefs: []
  type: TYPE_NORMAL
- en: '***Star schema is a de-facto standard for modeling data in enterprise data
    warehousing systems***, because it enables efficient querying of huge amounts
    of data, fast aggregations and intuitive data filtering.'
  prefs: []
  type: TYPE_NORMAL
- en: Although there are many ongoing debates questioning the star schema relevance
    for modern data platform solutions because of its “age”, it is fair to say that
    this concept is still absolutely relevant and definitely most widely adopted when
    it comes to designing efficient and scalable business intelligence systems.
  prefs: []
  type: TYPE_NORMAL
- en: '*Snowflake schema is very similar to star schema!* Conceptually, there is no
    difference between the star and snowflake — in both cases, you’ll place your “who,
    what, when, where and why” into dimension tables, while keeping your “how much”
    and “how many” in the fact table. The only difference is that in the snowflake
    schema, ***dimensions are normalized and broken down into sub-dimensions***, as
    you may see in the following illustration, which is why it resembles a snowflake.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/001073d31b8d974d5dbde49a9eacb8c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Illustration by author
  prefs: []
  type: TYPE_NORMAL
- en: 'The main motivation for normalizing dimensions is to remove the data redundancy
    from the dimension table. Although this might sound like a desirable approach,
    normalizing dimensions comes with some serious considerations:'
  prefs: []
  type: TYPE_NORMAL
- en: The overall data model structure becomes more complex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance may suffer, because of the joins between normalized dimension tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, there are specific use cases where dimension normalization may be
    a more viable choice, especially in regard to reducing the data model size. However,
    keep in mind that snowflake schema should be an exception rather than a rule when
    modeling your data for business intelligence workloads.
  prefs: []
  type: TYPE_NORMAL
- en: Star schema should always be a default choice!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To wrap up this topic on the Star schema relevance, I like to use an analogy
    to a marketing message created by Carlsberg Brewery, which says:'
  prefs: []
  type: TYPE_NORMAL
- en: '***“Carlsberg — Probably the best beer in the world…”***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Translated to data modeling world:'
  prefs: []
  type: TYPE_NORMAL
- en: The Star schema is PROBABLY the best data model in the business intelligence
    world…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 3 Things to Know About Fact Tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a dozen of wonderful books (like the aforementioned “The Data Warehouse
    Toolkit”, then [“The Star schema — Complete Reference” by Christopher Adamson](https://www.amazon.com/Schema-Complete-Reference-Christopher-Adamson/dp/0071744320)),
    which I strongly encourage you to read and learn all the details about dimensional
    modeling and the star schema in particular.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, thinking that reading this, or any other single article, will make
    you a “master of dimensional modeling” would be absolutely wrong and pretentious.
    However, I would like to emphasize 3 key concepts relevant to fact tables in the
    dimensional model.
  prefs: []
  type: TYPE_NORMAL
- en: '**Disclaimer:** these are 3 concepts that ***I personally*** find most important
    and that doesn’t necessarily mean that you should not consider some other concepts
    more relevant.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6e431c5ff48c21b38693e530ff0affb5.png)'
  prefs: []
  type: TYPE_IMG
- en: A typical fact table structure — Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '***Fact table structure*** — In most cases, a fact table will consist of the
    numeric values produced by measuring the event from the real world, and a bunch
    of foreign keys of related dimension tables. At the lowest grain, a fact table
    row corresponds to a real-world event. Thus the fact table design is entirely
    based on this event and is not inﬂuenced by the eventual future reports that may
    be produced. Fact tables are **usually** narrow and long (huge number of rows
    and less number of columns)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***Additive, Semi-additive and Non-additive measures*** — Numeric values that
    we store in a fact table are not always the same “nature”. ***Additive*** measures
    are the most flexible and can be summed across any of the dimensions associated
    with the fact table. ***Semi-additive***measures can be summed across some dimensions,
    but not all. A typical example is balance amounts which are additive across all
    dimensions except time. Finally, some measures are completely ***non-additive***,
    like ratios for example'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***NULLs in fact tables*** — The key thing to keep in mind here: not every
    NULL value behaves nicely in the fact table! While it’s completely fine to have
    a NULL for the measurement, using NULLs as foreign keys in the fact table should
    be avoided at all costs, because this will cause referential integrity violation.
    This can be solved by introducing a special default row in the dimension table
    for the “Unknown” or “Undefined” record'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3 Things to Know About Dimension Tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/b2890a22ebd8e3602d22295135324606.png)'
  prefs: []
  type: TYPE_IMG
- en: A typical dimension table structure — Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '***Dimension table structure*** — A dimension table should always contain a
    single primary key column, which is used as a foreign key in a related fact table.
    Dimension tables are usually wide and short (many columns, less number of rows,
    although there are dimensions with multimillion rows). Dimension tables are denormalized,
    containing usually text attributes and descriptions'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***Slowly changing dimension (SCD)*** — This is one of the key concepts for
    handling data changes over time. Don’t let this “slowly” word confuse you:)…It’s
    not about “slow” or “fast”, the emphasis is on the word “changing”. There are
    multiple techniques to handle modifications of the dimension attributes (think
    of changing the physical address, or phone number of the person), and Kimball
    lists no less than 8 different SCD types! However, the most commonly used type
    is Type 2, where you’d add a new row in the dimension table and update the row
    validity attribute'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***Role-playing dimensions*** — I’ve already written a [whole article on this
    topic](https://data-mozart.com/welcome-to-powerbi-thetare-role-playing-dimensions/)
    and explained how this concept can be applied within Microsoft Power BI'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As I mentioned, these are just a few concepts relevant to dimension tables,
    and I strongly advise reading Kimball’s or Adamson’s book to understand other
    important concepts and techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By learning about various data model types (conceptual, logical, and physical),
    we’ve built a solid foundation for understanding the importance of the data modeling
    process in general. Dimensional modeling, though only a subset of data modeling,
    is one of the concepts that are of key importance in implementing efficient and
    scalable real-life business intelligence solutions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To conclude, the biggest advantage of dimensional models is their flexibility
    and adaptability. Here is the list of the changes that can be applied without
    violating any existing business intelligence query or application:'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to add new facts to the existing fact table, it’s as simple as creating
    a new column (assuming that “new” facts are of the same grain as the existing
    ones)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need to add new lookup attributes to the existing fact table, it’s as
    simple as adding a new column with the foreign key to a new dimension table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whenever you need to extend the existing dimension table with new attributes,
    it’s as simple as adding a new column to the respective dimension table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thanks for reading!
  prefs: []
  type: TYPE_NORMAL
- en: '[Become a member and support thousands of authors on Medium!](https://datamozart.medium.com/membership)'
  prefs: []
  type: TYPE_NORMAL
