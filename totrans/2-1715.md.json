["```py\n**Table of Contents**\n\n[Object Oriented Programming](#2502)\n[Classes in Python](#aa37)\n  The \"self\" Parameter\n  The \"__init__\" Method\n  if __name__ == \"__main__\"\n[Type Hints](#fcad)\n[Docstrings (and how to invoke them](#d8d0))\n[Inheritance](#f2a2)\n[Pro tip on how to use Python classes](#a506)\n```", "```py\na = 3\n\ntype(a)\n\n>>>\n\n  int\n```", "```py\nclass MyFirstClass:\n  a = 15 # this is the data of the class\n  pass\n```", "```py\nclass Point:\n\n  def origin(self): # this is a method \n    self.x = 0\n    self.y = 0\n```", "```py\n# Invoke the class\np = Point()\n```", "```py\n# Access the method\np.origin()\n```", "```py\n# Print the coordinates\nprint(p.x, p.y)\n\n>>>\n\n  0 0\n```", "```py\nclass Test:\n\n  def printing(self):\n    print(\"this is a test\")\n```", "```py\n# Invoke the class\ntest = Test()\n\n# Call the method\ntest.printing()\n\n>>>\n\n  this is a test\n```", "```py\nclass Test2:\n\n  def printing2():\n    print(\"this is a test\")\n```", "```py\n# Invoke the class\ntest2 = Test2()\n\n# Call the method\ntest2.printing2()\n\n>>>\n\n  Type Error: printing2() takes 0 positional arguments but 1 was given\n```", "```py\nclass Point:\n\n  def move(self, x, y):\n    self.x = x\n    self.y = y\n\n  def origin(self):\n    self.move(0,0)\n    return(self.x, self.y)\n```", "```py\n#Invoke the class\np = Point\n\n# Call the method\np.origin()\n\n>>>\n\n  0, 0\n```", "```py\nclass Point:\n\n    def move(self, x, y):\n        self.x = x\n        self.y = y\n\n    def position(self):\n        print(self.x, self.y)\n```", "```py\n# Invoke the class\np = Point() \n\n# Get to position\np.position(5,6)\n\n>>>\n\n  TypeError: Point() takes no arguments\n```", "```py\nclass Point2:\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def position2(self):\n        print(self.x, self.y)\n```", "```py\n# Invoke the class\np = Point2(5,6) \n\n# Get to position\np.position2()\n\n>>>\n\n  5 6\n```", "```py\n**NOTE:**\n\nthere is even the possibility to create classes that do not uses the\n__init__ method. In these cases, the variables can be invoked in \nother ways.\n\nAnyway: we won't talk about that case here because we believe this is\nnot a Pythonic way to develop Python software (also, the code becomes\na little bit longer and less redeable).\n```", "```py\nimport sys         # top-level\n\n3 + 4              # top-level\n\nx = 0              # top-level\n\ndef f():           # top-level\n    import os      # not top-level!\n    return 3       # not top-level\n\nif x:              # top-level\n    print 3        # not top-level\nelse:\n    print 4        # not top-level, but executes as part of an if statement\n                   # that is top-level\n\nclass TopLevel(object): # top-level\n    x = 3          # not top-level, but executes as part of the class statement\n    def foo(self): # not top-level, but executes as part of the class statement\n        print 5    # not top-level\n```", "```py\n# Define a function to print \"Hello\"\ndef print_hello():\n\n    print(\"hello\")\n\n#Invoke the function\nprint_hello()\n```", "```py\n**NOTE**\n\nWe understand that we've used simple examples, but a general\ncase is that we create modules based on classes:\nthis is why we have covered this topic in this article.\n```", "```py\n**NOTE:** \nhere we'll talk about functions and not classes, just for the sake\nof simplicity.\nAs we have seen, in fact, a method of a class is defined exactly as\na function: so what we'll see in this paragraph is generalizable\nto classes.\n```", "```py\ndef any_call(variable: any) -> any:\n    return variable\n```", "```py\ndef count_values(element: list[any]) -> int:\n    return sum(1 for elements in element if elements)\n\n-----------------------\n\ncount_values([1,2,3,4])\n\n >>>\n\n     4\n\n----------------------\n\ncount_values([\"hello\", \"stranger\", \"who\", \"are\", \"you\", \"?\"])\n\n>>>\n\n   6\n```", "```py\nclass Point:\n    \"\"\"\n    this class moves a point in 2D, passing its coordinates\n    as argument of the method 'position'\n    \"\"\"\n    def __init__(self, x: int, y: int) -> None: \n        self.x = x\n        self.y = y\n\n    def position(self) -> int: \n        print(self.x, self.y)\n```", "```py\nPoint.__doc__\n\n>>>\n\n    \" this class moves a point in 2D, passing its coordinates as\n    argument of the function 'position' \"\n```", "```py\nclass Point:\n    \"\"\" this class moves a point in 2D, passing its coordinates\n    as argument of the function 'position'\n    \"\"\"\n    def __init__(self, x: int, y: int) -> None: \n        self.x = x\n        self.y = y\n\n    def position(self) -> int: \n        \"\"\" this actually moves the point\"\"\"\n        print(self.x, self.y)\n```", "```py\nPoint.position.__doc__\n\n>>>\n    'this actually moves the point'\n```", "```py\nclass Point:\n    \"\"\" this class moves a point in 2D, passing its coordinates\n    as argument of the function 'position'\n\n    Args:\n        param 1 (int): the coordinate x of the point in 2D\n        param 2 (int): the coordinate y of the point in 2D\n    \"\"\"\n    def __init__(self, x: int, y: int) -> None: \n        self.x = x\n        self.y = y\n\n     def position(self) -> int: \n        \"\"\" This method actually moves the point.\n\n      Returns:\n        int: prints the integers that represent the coordinates x and y\n        of the point in 2D\n      \"\"\"\n        print(self.x, self.y)\n```", "```py\nclass Contact:\n    \"\"\"\n    This class saves the name and the surnames\n    of some contacts in a list\n    \"\"\"\n\n    # Create empty list\n    all_contacts = [] \n\n    def __init__(self, name: str, surname: str) -> None:\n        \"\"\" This method initializes the arguments and appends\n        the arguments (name and surname)into the empty list.\n\n        Returns:\n            nothing.\n        \"\"\"\n        self.name = name\n        self.surname = surname\n        Contact.all_contacts.append(self) # Append to list\n\n    def __repr__(self) -> str:\n        \"\"\"\n        The built-in __repr__ method provides a string representation\n        of an object.\n\n        Returns:\n            the compiled list with name and surname of the contacts\n        \"\"\"\n        return (\n            f\"{self.__class__.__name__}(\"\n        f\"{self.name!r}, {self.surname!r}\"\n            f\")\"\n         )\n```", "```py\n# Define a contact\ncontact_1 = Contact(\"Federico\", \"Trotta\")\n\n# Show the contacts in the list\nContact.all_contacts\n\n>>>\n\n  [Contact('Federico', 'Trotta')]\n```", "```py\n class Email(Contact): # Email is inerithing from Contact\n\n    def get_mail(self, mail:\"mail\") -> None:\n        return mail\n```", "```py\nEmail(\"federico trotta\", \"federico@example.com\")\n```", "```py\n[Email('federico trotta', 'federico@example.com'),\n Contact('Federico', 'Trotta')]\n```", "```py\nmail_2 = Email(\"Jhon@example.com\")\n\n>>>\n\n  TypeError: __init__() missing 1 required positional argument: 'surname'\n```", "```py\nclass General(Contact):\n\n    def __init__(self, name: str, email: str) -> None:\n        super().__init__(name, email)\n        self.email = email\n```", "```py\n# Create a contact\ngeneral_contact = General(\"Federico Trotta\", \"federico@example.com\")\n\n# Write the contact into the list\nContact.all_contacts\n\n>>>\n\n  [General('Federico Trotta', 'federico@example.com')\n```"]