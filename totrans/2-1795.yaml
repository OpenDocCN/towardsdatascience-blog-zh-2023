- en: Running Airflow DAG Only If Another DAG Is Successful
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仅在另一个DAG成功时运行Airflow DAG
- en: 原文：[https://towardsdatascience.com/run-airflow-dag-if-another-dag-succeeds-233aaa4118c1](https://towardsdatascience.com/run-airflow-dag-if-another-dag-succeeds-233aaa4118c1)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/run-airflow-dag-if-another-dag-succeeds-233aaa4118c1](https://towardsdatascience.com/run-airflow-dag-if-another-dag-succeeds-233aaa4118c1)
- en: Using Airflow sensors to control the execution of DAGs on a different schedule
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Airflow传感器来控制不同计划下DAG的执行
- en: '[](https://gmyrianthous.medium.com/?source=post_page-----233aaa4118c1--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----233aaa4118c1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----233aaa4118c1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----233aaa4118c1--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----233aaa4118c1--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://gmyrianthous.medium.com/?source=post_page-----233aaa4118c1--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----233aaa4118c1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----233aaa4118c1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----233aaa4118c1--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----233aaa4118c1--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----233aaa4118c1--------------------------------)
    ·11 min read·Dec 19, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----233aaa4118c1--------------------------------)
    ·阅读时间11分钟·2023年12月19日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/3de6a6755eaa5db34e2a4adb3bcbeffe.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3de6a6755eaa5db34e2a4adb3bcbeffe.png)'
- en: Image generated by [DALL-E2](https://openai.com/dall-e-2)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [DALL-E2](https://openai.com/dall-e-2) 生成
- en: Recently, I’ve been trying to coordinate two Airflow DAGs such that one would
    only run — on its own hourly schedule — if the other DAG (running on a daily basis)
    has been successful.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，我一直在尝试协调两个Airflow DAG，使得其中一个只会在另一个DAG（每日运行）成功的情况下按自己的小时计划运行。
- en: In today’s tutorial I will walk you through the use case and demonstrate how
    to achieve the desired behaviour in three different ways; two using the `ExternalTaskSensor`
    and another one using a customised approach with `PythonOperator`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的教程中，我将引导你了解这个用例，并演示如何通过三种不同的方法实现所需的行为；两种使用`ExternalTaskSensor`，另一种使用`PythonOperator`的自定义方法。
- en: 'Use Case: Running the hourly DAG only if the daily DAG succeeded'
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用案例：仅在每日DAG成功时运行每小时DAG
- en: Now let’s get started with our use case that involves two Airflow DAGs.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始处理涉及两个Airflow DAG的用例。
- en: The first DAG, `my_daily_dag`, runs every day at 5AM UTC.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个DAG，`my_daily_dag`，每天在UTC时间早上5点运行。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The second DAG, `my_hourly_dag`, runs on an hourly basis, between 6AM and 8PM
    UTC.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个DAG，`my_hourly_dag`，每小时运行一次，时间在UTC的早上6点到晚上8点之间。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In our use case, we would like `my_hourly_dag` to run only if `my_daily_dag`
    has ran successfully within the current date. If not, then `my_hourly_dag` should
    be skipped. It is important to mention here that we don’t want to trigger `my_hourly_dag`
    as soon as `my_daily_dag` succeeds. That would be achievable with `TriggerDagRun`
    operator. Instead, we want both DAGs to run on their own schedule but add a condition
    on the `my_hourly_dag`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的使用案例中，我们希望`my_hourly_dag`仅在`my_daily_dag`在当天成功运行的情况下执行。如果没有，则`my_hourly_dag`应该被跳过。这里需要提到的是，我们不想在`my_daily_dag`成功后立刻触发`my_hourly_dag`。那可以通过`TriggerDagRun`操作符实现。相反，我们希望两个DAG各自按照自己的计划运行，但在`my_hourly_dag`上添加一个条件。
- en: '[](/airflow-skip-task-a5a6ab319378?source=post_page-----233aaa4118c1--------------------------------)
    [## How to Skip Tasks in Airflow DAGs'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/airflow-skip-task-a5a6ab319378?source=post_page-----233aaa4118c1--------------------------------)
    [## 如何在Airflow DAG中跳过任务'
- en: Skipping tasks in Airflow DAGs based on specific conditions
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于特定条件跳过Airflow DAG中的任务
- en: towardsdatascience.com](/airflow-skip-task-a5a6ab319378?source=post_page-----233aaa4118c1--------------------------------)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/airflow-skip-task-a5a6ab319378?source=post_page-----233aaa4118c1--------------------------------)
- en: In the next two sections we will discuss and demonstrate how to achieve this
    using a few different approaches.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两个部分中，我们将讨论并演示如何通过几种不同的方法实现这一点。
- en: Determining the execution_date of both DAGs
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定两个DAG的执行日期
- en: Before jumping into implementation details, it is important to first understand
    how the two DAGs differ in terms of their respective `execution_date`. This is
    crucial since we will use this knowledge to determine the implementation of the
    desired behaviour.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入实现细节之前，首先了解两个 DAG 在各自 `execution_date` 方面的区别非常重要。这一点至关重要，因为我们将利用这一知识来确定所需行为的实现方式。
- en: Let’s assume that today is December 13th. The daily DAG `my_daily_dag`, has
    an `execution_date` of `2023–12–12 00:00` since it covers the data interval between
    `2023–12–12` and `2023–12–13`. **Recall that Airflow DAG runs start at the end
    of an interval.**
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 假设今天是 12 月 13 日。每日 DAG `my_daily_dag` 的 `execution_date` 为 `2023–12–12 00:00`，因为它涵盖了
    `2023–12–12` 到 `2023–12–13` 之间的数据时间段。**请记住，Airflow DAG 运行从时间段结束时开始。**
- en: Meanwhile, our hourly `my_hourly_dag` DAG has an `execution_date` of `2023–12–13`
    (except the midnight run that will have an `execution_date` of `2023–12–12` since
    the beginning of the interval is `2023–12–12 23:00` through `2023–12–13 00:00`).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，我们的每小时 `my_hourly_dag` DAG 具有 `execution_date` 为 `2023–12–13`（除了午夜运行，其
    `execution_date` 将为 `2023–12–12`，因为该时间段的开始为 `2023–12–12 23:00` 到 `2023–12–13 00:00`）。
- en: Using ExternalTaskSensor
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ExternalTaskSensor
- en: Our first option is the built-in `[ExternalTaskSensor](https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/sensors/external_task/index.html#airflow.sensors.external_task.ExternalTaskSensor)`
    operator.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个选择是内置的 `[ExternalTaskSensor](https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/sensors/external_task/index.html#airflow.sensors.external_task.ExternalTaskSensor)`
    操作符。
- en: Waits for a different DAG, task group, or task to complete for a specific logical
    date.
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 等待不同的 DAG、任务组或任务完成特定的逻辑日期。
- en: ''
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: By default, the `ExternalTaskSensor` will wait for the external task to succeed,
    at which point it will also succeed. However, by default it will *not* fail if
    the external task fails, but will continue to check the status until the sensor
    times out (thus giving you time to retry the external task without also having
    to clear the sensor).
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 默认情况下，`ExternalTaskSensor` 将等待外部任务成功，此时它也会成功。然而，默认情况下，如果外部任务失败，它将 *不会* 失败，而是继续检查状态，直到传感器超时（从而给你时间重试外部任务而无需同时清除传感器）。
- en: ''
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — [Airflow Docs](https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/sensors/external_task/index.html#airflow.sensors.external_task.ExternalTaskSensor)
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: — [Airflow 文档](https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/sensors/external_task/index.html#airflow.sensors.external_task.ExternalTaskSensor)
- en: We can use this sensor in our `my_hourly_dag` that will essentially check if
    `my_daily_dag` has been successful in the specified interval.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 `my_hourly_dag` 中使用此传感器，该传感器将基本上检查 `my_daily_dag` 在指定时间段内是否成功。
- en: The `ExternalTaskSensor` accepts one of `execution_delta` or `execution_date_fn`.
    The former can be used to indicate the time difference with the previous execution
    to look at. By default, this is set to the logical date as the current task/DAG.
    The latter, receives a callable (i.e. a function) that accepts the current execution’s
    logical date as the first position argument and returns the desired logical date(s)
    to query.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExternalTaskSensor` 接受 `execution_delta` 或 `execution_date_fn` 之一。前者可用于指示与前一次执行的时间差。默认情况下，此值设置为与当前任务/DAG
    相同的逻辑日期。后者接收一个可调用对象（即一个函数），该函数接受当前执行的逻辑日期作为第一个位置参数，并返回要查询的逻辑日期。'
- en: '**- execution_delta** (`[*datetime.timedelta*](https://docs.python.org/3/library/datetime.html#datetime.timedelta)`
    *|* `*None*`) — time difference with the previous execution to look at, the default
    is the same logical date as the current task or DAG. For yesterday, use [positive!]
    `datetime.timedelta(days=1)`. Either `execution_delta` or `execution_date_fn`
    can be passed to `ExternalTaskSensor`, but not both.'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**- execution_delta** (`[*datetime.timedelta*](https://docs.python.org/3/library/datetime.html#datetime.timedelta)`
    *|* `*None*`) — 与前一次执行的时间差，默认值是与当前任务或 DAG 相同的逻辑日期。对于昨天，请使用 [positive!] `datetime.timedelta(days=1)`。`ExternalTaskSensor`
    可以传递 `execution_delta` 或 `execution_date_fn`，但不能同时传递两者。'
- en: ''
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**- execution_date_fn** (`*Callable*` *|* `*None*`) — function that receives
    the current execution’s logical date as the first positional argument and optionally
    any number of keyword arguments available in the context dictionary, and returns
    the desired logical dates to query. Either `execution_delta` or `execution_date_fn`
    can be passed to `ExternalTaskSensor`, but not both.'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**- execution_date_fn** (`*Callable*` *|* `*None*`) — 接收当前执行的逻辑日期作为第一个位置参数的函数，并可选地接收上下文字典中的任何数量的关键字参数，并返回要查询的逻辑日期。`ExternalTaskSensor`
    可以传递 `execution_delta` 或 `execution_date_fn`，但不能同时传递两者。'
- en: Since the two DAGs are running on a different schedule, the default behaviour
    of the sensor won’t work for us . In the previous section, we clarified why the
    two DAGs will have different execution dates.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于两个 DAG 的运行时间表不同，传感器的默认行为对我们不起作用。在前面的部分中，我们澄清了两个 DAG 将具有不同的执行日期的原因。
- en: Therefore, we need to figure out how to use either the `execution_delta` or
    `execution_date_fn` to make both execution dates align with each other.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要弄清楚如何使用 `execution_delta` 或 `execution_date_fn` 来使两个执行日期对齐。
- en: Using ExternalTaskSensor with execution_delta
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ExternalTaskSensor 和 execution_delta
- en: The simplest approach in my opinion is to use `execution_delta`. The data interval
    start date of our daily DAG, is “yesterday at 5AM UTC”. Since we know that `my_hourly_dag`
    runs on an hourly basis, we can come up with a formula to compute the delta between
    interval start datetime of hourly DAG and the interval start datetime of the daily
    DAG.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，最简单的方法是使用 `execution_delta`。我们每日 DAG 的数据间隔开始日期是“昨天的 UTC 时间上午 5 点”。由于我们知道
    `my_hourly_dag` 每小时运行一次，因此我们可以提出一个公式来计算小时级 DAG 的间隔开始时间与每日 DAG 的间隔开始时间之间的差异。
- en: 'The following will create a delta that adds up:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下将创建一个累加的差异：
- en: 24 that corresponds to the difference of 24 hours the two DAGs have, given that
    they run on a different schedule, as explained earlier
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 24 对应于两个 DAG 之间的 24 小时差异，前提是它们的运行时间表不同，如前所述。
- en: the difference between the hour of the interval start datetime of the hourly
    dag and 5, which is the hour the daily DAG runs every day.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小时级 DAG 的间隔开始时间与每天 DAG 运行的时间 5 之间的差异，即每天 DAG 每天运行的小时。
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As an example, consider the following scenarios when the hourly DAG starts
    running at 6AM (until 8PM):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，考虑以下场景，当小时级 DAG 从早上 6 点开始运行（直到晚上 8 点）：
- en: 'At 6AM:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在早上 6 点：
- en: hourly data interval starts at 5AM (and ends at 6AM)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小时数据间隔从上午 5 点开始（并于上午 6 点结束）
- en: daily data interval starts at 5AM yesterday
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每日数据间隔从昨天的上午 5 点开始。
- en: '`execution_delta=24 + (5-5) = 24`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_delta=24 + (5-5) = 24`'
- en: The sensor will check the success of the daily DAG with data interval start
    date set to 24 hours before
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传感器将检查每日 DAG 的成功情况，其数据间隔开始日期设置为 24 小时之前。
- en: 'At 7AM:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在早上 7 点：
- en: hourly data intevral starts at 6AM (and ends at 7AM)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小时数据间隔从早上 6 点开始（并于早上 7 点结束）
- en: daily data interval starts at 5AM yesterday
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每日数据间隔从昨天的上午 5 点开始。
- en: '`execution_delta=24 + (6-5) = 25`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_delta=24 + (6-5) = 25`'
- en: The sensor will check the success of the daily DAG with data interval start
    date set to 25 hours before
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传感器将检查每日 DAG 的成功情况，其数据间隔开始日期设置为 25 小时之前。
- en: and so on.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 等等。
- en: Now how do we implement this? One problem we need to face is that (by the time
    this post was written), `execution_delta` is not a templated field meaning that
    we cannot use the [templated variables](https://airflow.apache.org/docs/apache-airflow/stable/templates-ref.html#variables)
    that give us access to useful information, including the `data_interval_start`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们该如何实现呢？我们需要面对一个问题是（在本文撰写时），`execution_delta` 不是一个模板字段，这意味着我们不能使用提供有用信息的
    [模板变量](https://airflow.apache.org/docs/apache-airflow/stable/templates-ref.html#variables)，包括
    `data_interval_start`。
- en: Therefore, we will have to manually construct the `data_interval_start` of the
    hourly DAG. Given that DAG runs every hour, the data interval start hour corresponds
    the current hour minus one
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将必须手动构造小时级 DAG 的 `data_interval_start`。鉴于 DAG 每小时运行一次，数据间隔开始小时对应于当前小时减去一小时。
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Therefore, the `execution_delta` that will be provided as an argument to the
    `ExternalTaskSensor` can now be defined as:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`execution_delta` 作为参数提供给 `ExternalTaskSensor` 现在可以定义为：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here’s the full code of our hourly DAG, that will run every hour between 6AM
    and 8PM UTC, only if the daily DAG has been successful today.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们小时级 DAG 的完整代码，该 DAG 将在 UTC 时间早上 6 点到晚上 8 点之间每小时运行一次，前提是每日 DAG 今天已经成功。
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using ExternalTaskSensor with execution_date_fn
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ExternalTaskSensor 和 execution_date_fn
- en: Now apart from `execution_delta`, the sensor can be configured to work with
    `execution_date_fn` that accepts a callable returning the logical date(s) to be
    queried.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，除了 `execution_delta` 之外，传感器还可以配置为与 `execution_date_fn` 一起使用，该函数接受一个可调用对象，返回要查询的逻辑日期。
- en: In other words, we need to create a function and fetch the desired logical date
    of the daily DAG that needs to be against the conditions of the sensor, that by
    default will check whether the state of the DagRun at the specified interval was
    successful.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们需要创建一个函数，并获取每日 DAG 所需的逻辑日期，以便与传感器的条件相匹配，该条件默认会检查指定间隔的 DagRun 状态是否成功。
- en: The function below, will fetch the DagRuns of the daily DAG and return the execution
    date of the DagRun only if it happened on the same day as the hourly DAG. If no
    DagRun is found (which means that the daily DAG was not executed in the past,
    `AirflowSkipException` will be raised such that the sensor task (and any downstream)
    is skipped. Likewise, if no DagRun for the daily DAG is found that happened on
    the same date as the hourly DAG, the `current_logical_dt` will be returned, which
    is essentially the default value that is checked by `ExternalTaskSensor` (and
    is the argument that must be present in the function definition that is provided
    when using `execution_date_fn` argument).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数将获取日常 DAG 的 DagRuns，并仅在它发生在与每小时 DAG 相同的日期时返回 `DagRun` 的执行日期。如果未找到 DagRun（这意味着日常
    DAG 在过去未执行），将引发 `AirflowSkipException`，以便跳过传感器任务（以及任何下游任务）。同样，如果没有找到与每小时 DAG 相同日期的日常
    DAG 的 DagRun，将返回 `current_logical_dt`，这本质上是由 `ExternalTaskSensor` 检查的默认值（也是使用
    `execution_date_fn` 参数时提供的函数定义中必须存在的参数）。
- en: Recall that the two DAGs run on a different schedule which means their `execution_date`
    differs. In order to make a proper comparison and determine whether the daily
    DAG was executed successfully on the same day that the hourly DAG runs, we need
    to subtract one day from the hourly DAG’s execution date. Note that we are only
    interested whether the year, month and day between the two DAGs is the same (we
    don’t really care about the time information in this context).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这两个 DAG 的调度不同，这意味着它们的 `execution_date` 不同。为了进行适当的比较并确定日常 DAG 是否在每小时 DAG
    运行的同一天成功执行，我们需要从每小时 DAG 的执行日期中减去一天。请注意，我们只关心两个 DAG 之间的年份、月份和日期是否相同（在此上下文中我们不太关心时间信息）。
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here’s the full code for our hourly DAG using `execution_function_fn` with `ExternalTaskSensor`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们使用 `execution_function_fn` 和 `ExternalTaskSensor` 的每小时 DAG 的完整代码。
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Using PythonOperator
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PythonOperator
- en: The second approach involves a more customised solution. More specifically,
    we can programmatically find the latest successful `DagRun` of our daily DAG and
    handle the behaviour of the operator accordingly. In other words, if the latest
    successful `DagRun` of the daily DAG does not align with the execution date of
    our hourly DAG, the task will be skipped (as well as the downstream tasks).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法涉及一个更为定制的解决方案。更具体地说，我们可以以编程方式找到我们日常 DAG 的最新成功 `DagRun`，并相应地处理操作符的行为。换句话说，如果日常
    DAG 的最新成功 `DagRun` 与我们每小时 DAG 的执行日期不一致，则该任务将被跳过（以及下游任务）。
- en: Therefore, we can write a function — similar to the one we have written in the
    previous section and was used as an argument to the `execution_date_fn` argument
    for `ExternalTaskSensor`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以编写一个函数——类似于我们在前一节中编写的，并作为 `ExternalTaskSensor` 的 `execution_date_fn`
    参数使用。
- en: More specifically, we need to fetch the DagRuns of the daily DAG, determine
    if anyone has completed successfully today (i.e. on the same day the hourly DAG
    runs). If none is found, we raise a `AirflowSkipException` such that the execution
    of the hourly DAG is skipped. In this case, the `PythonOperator` supports templated
    variables and we will therefore take advantage of it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，我们需要获取日常 DAG 的 DagRuns，确定今天是否有人成功完成（即每小时 DAG 运行的同一天）。如果没有找到，我们将引发 `AirflowSkipException`，以便跳过每小时
    DAG 的执行。在这种情况下，`PythonOperator` 支持模板变量，因此我们将充分利用这一点。
- en: 'This is what our function looks like:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的函数的样子：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here’s the complete code for the `my_hourly_dag` DAG, using a `PythonOperator`
    to check the status of `my_daily_dag`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 `my_hourly_dag` DAG 的完整代码，使用 `PythonOperator` 来检查 `my_daily_dag` 的状态：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Final Thoughts..
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后的想法..
- en: In today’s tutorial we discussed how to handle dependencies between different
    DAGs when using Airflow. More specifically, we discussed how to run a DAG that
    is supposed to execute on an hourly basis, only if a different DAG, on a daily
    schedule, executes successfully within the day.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的教程中，我们讨论了如何处理使用 Airflow 时不同 DAG 之间的依赖关系。更具体地说，我们讨论了如何在一个 DAG 以每小时执行的情况下，仅在另一个按日计划的
    DAG 在当天成功执行后运行它。
- en: Three different approaches were demonstrated. Depending on the complexity of
    your use-case, you should pick the one that makes more sense and results in more
    elegant code.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 演示了三种不同的方法。根据你的用例的复杂性，你应该选择最合适且代码更优雅的方法。
- en: '[**Subscribe to Data Pipeline**](https://thedatapipeline.substack.com/welcome)**,
    a newsletter dedicated to Data Engineering**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[**订阅数据管道**](https://thedatapipeline.substack.com/welcome)**，这是一个专注于数据工程的新闻通讯**'
