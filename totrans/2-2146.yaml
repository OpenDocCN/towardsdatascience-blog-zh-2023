- en: Treat Yourself Using The “Black” Library When Writing Python Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/treat-yourself-using-the-black-library-when-writing-python-code-7626b6099247](https://towardsdatascience.com/treat-yourself-using-the-black-library-when-writing-python-code-7626b6099247)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/fa1ff0ffea5f82fa2379a98b3a29563a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Pfüderi](https://pixabay.com/users/pf%C3%BCderi-199315/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=2125148)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=2125148)
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to have a “single format of correct” code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://christophertao.medium.com/?source=post_page-----7626b6099247--------------------------------)[![Christopher
    Tao](../Images/bea1e3c81cc62eb28bdba9275d6b326f.png)](https://christophertao.medium.com/?source=post_page-----7626b6099247--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7626b6099247--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7626b6099247--------------------------------)
    [Christopher Tao](https://christophertao.medium.com/?source=post_page-----7626b6099247--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7626b6099247--------------------------------)
    ·6 min read·Jan 13, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Have you ever copy-pasted some example code from library documentation or Stack
    Overflow? Or maybe you do not have a pure programmer background so you’re not
    trained to write perfectly formatted code? Do you want to improve your code readability
    to impress others?
  prefs: []
  type: TYPE_NORMAL
- en: One of the benefits of Python programming language is that it uses indentation
    to indicate the level of nesting of code blocks. So, it is relatively more difficult
    to write some “unreadable” code in terms of the format. However, it doesn’t mean
    that all the Python codes must be formatted. There is no programming language
    that can create so many constraints to force users to write formatted code, and
    I don’t that’s a good idea because it will be too hard to use.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I’ll introduce a Python library called “Black”. It can help
    us to format our code in different ways. All the styles will comply with the PEP
    8 guide. Let’s start to create consistent and readable formatted code now!
  prefs: []
  type: TYPE_NORMAL
- en: '[## Black 22.12.0 documentation'
  prefs: []
  type: TYPE_NORMAL
- en: By using , you agree to cede control over minutiae of hand-formatting. In return,
    Black gives you speed, determinism…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: black.readthedocs.io](https://black.readthedocs.io/en/stable/index.html?source=post_page-----7626b6099247--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Basic Usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/97b765c4ab22fdb6fe917af8eeb3fe20.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Nat Aggiato](https://pixabay.com/users/nataliaaggiato-470329/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=533337)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=533337)
  prefs: []
  type: TYPE_NORMAL
- en: Before we can start to use the library, we need to install it using `pip` as
    follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Let's prepare a bad example as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The code above can definitely run, but there are many problems.
  prefs: []
  type: TYPE_NORMAL
- en: The parameters in the function `my_function` are separated by commas but there
    is no whitespace after the commas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The items in the list `my_list` are presented vertically. It might be OK in
    some cases but absolutely not following the guidelines of PEP 8.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are no new lines between the function definition and the if-statement,
    which will create impacts on the readability.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The if-statement was written in a single line. This is valid code but not good
    for readability.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I will save the code into a file called `example1.py`. We can verify the bad
    example as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/af1f6f79022b42e3fa13d975d748e49a.png)'
  prefs: []
  type: TYPE_IMG
- en: If you like, you can also verify that this Python script is definitely runnable.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/71c6e01ff122d17ea032370acd4537fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, let’s use the `black` library to format the file. The simplest way of
    doing this is to use the command-line interface (CLI) as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/30e43e3cee4ab0e03fa5b95d2fe6dc6a.png)'
  prefs: []
  type: TYPE_IMG
- en: It tells us the file is reformatted. Now, let’s verify the outcome.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a12ffb34689abe4fec20bba93f3df593.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Yes! All the 4 problems mentioned before were fixed.
  prefs: []
  type: TYPE_NORMAL
- en: Have you noticed it mentioned “1 file reformatted”? That’s right. If we provide
    a directory, the `black` library will reformat all the Python scripts in the directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/17f8c2d2fa3391a1983b5529b3a1473b.png)'
  prefs: []
  type: TYPE_IMG
- en: The above example shows that we can reformat all the files in the current directory.
    Also, if one file is already in perfect format, black will tell us it is left
    unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Some Useful CLI Arguments/Flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/281a4fea9c09012273fdd57618c8c6e4.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Bruno /Germany](https://pixabay.com/users/bru-no-1161770/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=2081193)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=2081193)
  prefs: []
  type: TYPE_NORMAL
- en: Like other CLI tools, `black` also has many arguments to provide more fancy
    functions. I’ll pick up some that I think would be useful and introduce them in
    this section.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Reformat code snippet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s come to another topic. Most of the time we probably don’t want to be bothered
    with reformatting the file again and again. One typical scenario might be that
    we copied a function or a piece of code from documentation or Stack Overflow.
    (No shame at all, most developers are doing so :). However, the format might not
    be consistent with our code, or the code loses its format for some reason.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we don’t have to paste the code into a file and reformat it. We
    can do this using the `--code` argument on the fly in the console.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the `print()` function can be formatted as follow.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f07455d9ea425ce48215ad17d256c122.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, you can copy the reformatted code and put it in your script.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Check the format (dry run)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we just want to check if your code complies with the PEP 8 standards without
    changing it, we can use the `--check` flag as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b9b5ced1603a9f706c4f5d2e1ea2e770.png)'
  prefs: []
  type: TYPE_IMG
- en: Well, it tells us that it doesn’t need to be changed because `example1.py` had
    been reformatted already. However, what if it needs?
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create another Python script file using the original “bad example” and
    name the file `example2.py`. Let’s verify it is the “bad example”.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f980e67f7ff82ca4253879a62ba5b168.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, let’s have the “dry run”.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cead698f600fab3046525d80c712386e.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that it says “would be reformatted”. Of course, we can also have
    this dry run for a directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ffeee6a551b1e1a75e84d74ecf38c1de.png)'
  prefs: []
  type: TYPE_IMG
- en: 2.3 Show what would be changed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Curious about why your code does not comply with the standards? We can use the
    `--diff` flag to show the specific changes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/282f84502e21bfd558a6a2c7f3d119a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/1fb64e9391d91c0d4f65760c2d303295.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [育银 戚](https://pixabay.com/users/qiye-116/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=420018)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=420018)
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I have introduced the library `black`, which is a popular code
    formatter for Python that automatically reformats your code to conform to the
    PEP 8 style guide. It provides consistent and readable formatting for your code,
    making it easier to read and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: We can use `black` to ensure our code is consistent, readable and maintainable.
    It can also be used from the command line with many useful built-in features that
    can be called with arguments or flags. Hope it can help you for writing better
    code!
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@qiuyujx/membership?source=post_page-----7626b6099247--------------------------------)
    [## Join Medium with my referral link — Christopher Tao'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@qiuyujx/membership?source=post_page-----7626b6099247--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '**If you feel my articles are helpful, please consider joining Medium Membership
    to support me and thousands of other writers! (Click the link above)**'
  prefs: []
  type: TYPE_NORMAL
- en: Unless otherwise noted all images are by the author
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
