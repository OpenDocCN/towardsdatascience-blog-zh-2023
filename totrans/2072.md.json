["```py\ncollab = True\n\nimport os\nimport shutil\n#libraries\nfrom collections import OrderedDict\nimport json\nimport numpy as np\n\n#visualization of the dataset\nimport matplotlib.pyplot as plt\nimport nibabel as nib\n\nif collab:\n    from google.colab import drive\n    drive.flush_and_unmount()\n    drive.mount('/content/drive', force_remount=True)\n    # Change \"neurosciences-segmentation\" to the name of your project folder\n    root_dir = \"/content/drive/MyDrive/neurosciences-segmentation\"\n\nelse:\n    # get the dir of the parent dir\n    root_dir = os.getcwd()\n\ninput_dir = os.path.join(root_dir, 'data/input')\nsegmentation_dir = os.path.join(root_dir, 'data/ground_truth')\n\nmy_nnunet_dir = os.path.join(root_dir,'my_nnunet')\nprint(my_nnunet_dir)\n```", "```py\ndef make_if_dont_exist(folder_path,overwrite=False):\n    \"\"\"\n    creates a folder if it does not exists\n    input:\n    folder_path : relative path of the folder which needs to be created\n    over_write :(default: False) if True overwrite the existing folder\n    \"\"\"\n    if os.path.exists(folder_path):\n\n        if not overwrite:\n            print(f'{folder_path} exists.')\n        else:\n            print(f\"{folder_path} overwritten\")\n            shutil.rmtree(folder_path)\n            os.makedirs(folder_path)\n\n    else:\n      os.makedirs(folder_path)\n      print(f\"{folder_path} created!\")\n```", "```py\nos.chdir(root_dir)\nmake_if_dont_exist('my_nnunet', overwrite=False)\nos.chdir('my_nnunet')\nprint(f\"Current working directory: {os.getcwd()}\")\n```", "```py\n!pip install nnunet\n```", "```py\npip install nnunet\n```", "```py\n!git clone https://github.com/MIC-DKFZ/nnUNet.git\n!git clone https://github.com/NVIDIA/apex\n\n# repository dir is the path of the github folder\nrespository_dir = os.path.join(my_nnunet_dir,'nnUNet')\nos.chdir(respository_dir)\n!pip install -e\n!pip install --upgrade git+https://github.com/nanohanno/hiddenlayer.git@bugfix/get_trace_graph#egg=hiddenlayer\n```", "```py\ntask_name = 'Task001' #change here for different task name\n\n# We define all the necessary paths\nnnunet_dir = \"nnUNet/nnunet/nnUNet_raw_data_base/nnUNet_raw_data\"\ntask_folder_name = os.path.join(nnunet_dir,task_name) \ntrain_image_dir = os.path.join(task_folder_name,'imagesTr') # path to training images\ntrain_label_dir = os.path.join(task_folder_name,'labelsTr') # path to training labels\ntest_dir = os.path.join(task_folder_name,'imagesTs') # path to test images\nmain_dir = os.path.join(my_nnunet_dir,'nnUNet/nnunet') # path to main directory\ntrained_model_dir = os.path.join(main_dir, 'nnUNet_trained_models') # path to trained models\n```", "```py\n# Creation of all the folders\noverwrite = False # Set this to True if you want to overwrite the folders\nmake_if_dont_exist(task_folder_name,overwrite = overwrite)\nmake_if_dont_exist(train_image_dir, overwrite = overwrite)\nmake_if_dont_exist(train_label_dir, overwrite = overwrite)\nmake_if_dont_exist(test_dir,overwrite= overwrite)\nmake_if_dont_exist(trained_model_dir, overwrite=overwrite)\n```", "```py\nos.environ['nnUNet_raw_data_base'] = os.path.join(main_dir,'nnUNet_raw_data_base')\nos.environ['nnUNet_preprocessed'] = os.path.join(main_dir,'preprocessed')\nos.environ['RESULTS_FOLDER'] = trained_model_dir\n```", "```py\ndef copy_and_rename(old_location,old_file_name,new_location,new_filename,delete_original = False):\n    shutil.copy(os.path.join(old_location,old_file_name),new_location)\n    os.rename(os.path.join(new_location,old_file_name),os.path.join(new_location,new_filename))\n    if delete_original:\n        os.remove(os.path.join(old_location,old_file_name))\n```", "```py\nlist_of_all_files = os.listdir(segmentation_dir)\nlist_of_all_files = [file_name for file_name in list_of_all_files if file_name.endswith('.nii.gz')]\n\nfor file_name in list_of_all_files:\n    copy_and_rename(input_dir,file_name,train_image_dir,file_name)\n    copy_and_rename(segmentation_dir,file_name,train_label_dir,file_name)\n```", "```py\ndef check_modality(filename):\n    \"\"\"\n    check for the existence of modality\n    return False if modality is not found else True\n    \"\"\"\n    end = filename.find('.nii.gz')\n    modality = filename[end-4:end]\n    for mod in modality:\n        if not(ord(mod)>=48 and ord(mod)<=57): #if not in 0 to 9 digits\n            return False\n    return True\n\ndef rename_for_single_modality(directory):\n\n    for file in os.listdir(directory):\n\n        if check_modality(file)==False:\n            new_name = file[:file.find('.nii.gz')]+\"_0000.nii.gz\"\n            os.rename(os.path.join(directory,file),os.path.join(directory,new_name))\n            print(f\"Renamed to {new_name}\")\n        else:\n            print(f\"Modality present: {file}\")\n\nrename_for_single_modality(train_image_dir)\n# rename_for_single_modality(test_dir)\n```", "```py\noverwrite_json_file = True #make it True if you want to overwrite the dataset.json file in Task_folder\njson_file_exist = False\n\nif os.path.exists(os.path.join(task_folder_name,'dataset.json')):\n    print('dataset.json already exist!')\n    json_file_exist = True\n\nif json_file_exist==False or overwrite_json_file:\n\n    json_dict = OrderedDict()\n    json_dict['name'] = task_name\n    json_dict['description'] = \"Segmentation of T1 Scans from MindBoggle\"\n    json_dict['tensorImageSize'] = \"3D\"\n    json_dict['reference'] = \"see challenge website\"\n    json_dict['licence'] = \"see challenge website\"\n    json_dict['release'] = \"0.0\"\n\n    ######################## MODIFY THIS ########################\n\n    #you may mention more than one modality\n    json_dict['modality'] = {\n        \"0\": \"MRI\"\n    }\n    #labels+1 should be mentioned for all the labels in the dataset\n    json_dict['labels'] = {\n        \"0\": \"Non Brain\",\n        \"1\": \"Cortical gray matter\",\n        \"2\": \"Cortical White matter\",\n        \"3\" : \"Cerebellum gray \",\n        \"4\" : \"Cerebellum white\"\n    }\n\n    #############################################################\n\n    train_ids = os.listdir(train_label_dir)\n    test_ids = os.listdir(test_dir)\n    json_dict['numTraining'] = len(train_ids)\n    json_dict['numTest'] = len(test_ids)\n\n    #no modality in train image and labels in dataset.json\n    json_dict['training'] = [{'image': \"./imagesTr/%s\" % i, \"label\": \"./labelsTr/%s\" % i} for i in train_ids]\n\n    #removing the modality from test image name to be saved in dataset.json\n    json_dict['test'] = [\"./imagesTs/%s\" % (i[:i.find(\"_0000\")]+'.nii.gz') for i in test_ids]\n\n    with open(os.path.join(task_folder_name,\"dataset.json\"), 'w') as f:\n        json.dump(json_dict, f, indent=4, sort_keys=True)\n\n    if os.path.exists(os.path.join(task_folder_name,'dataset.json')):\n        if json_file_exist==False:\n            print('dataset.json created!')\n        else:\n            print('dataset.json overwritten!')\n```", "```py\n# -t 1 means \"Task001\", if you have a different task change it\n!nnUNet_plan_and_preprocess -t 1 --verify_dataset_integrity\n```", "```py\n#train 3D full resolution U net\n!nnUNet_train 3d_fullres nnUNetTrainerV2 1 0 --npz \n```", "```py\n# train 2D U net\n!nnUNet_train 2d nnUNetTrainerV2 1 0 --npz\n```", "```py\n# train 3D U-net cascade\n!nnUNet_train 3d_lowres nnUNetTrainerV2CascadeFullRes 1 0 --npz\n!nnUNet_train 3d_fullres nnUNetTrainerV2CascadeFullRes 1 0 --npz\n```", "```py\n#train 3D full resolution U net\n!nnUNet_train 3d_fullres nnUNetTrainerV2 1 0 --npz \n```", "```py\nresult_dir = os.path.join(task_folder_name, 'nnUNet_Prediction_Results')\nmake_if_dont_exist(result_dir, overwrite=True)\n\n# -i is the input folder\n# -o is where you want to save the predictions\n# -t 1 means task 1, change it if you have a different task number\n# Use -m 2d, or -m 3d_fullres, or -m 3d_cascade_fullres\n!nnUNet_predict -i /content/drive/MyDrive/neurosciences-segmentation/my_nnunet/nnUNet/nnunet/nnUNet_raw_data_base/nnUNet_raw_data/Task001/imagesTs -o /content/drive/MyDrive/neurosciences-segmentation/my_nnunet/nnUNet/nnunet/nnUNet_raw_data_base/nnUNet_raw_data/Task001/nnUNet_Prediction_Results -t 1 -tr nnUNetTrainerV2 -m 2d -f 0  --num_threads_preprocessing 1\n```"]