- en: 6 Use Cases in Python Where * and ** Come in Handy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/6-use-cases-in-python-where-and-come-in-handy-530dd9d04875](https://towardsdatascience.com/6-use-cases-in-python-where-and-come-in-handy-530dd9d04875)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explained with examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://sonery.medium.com/?source=post_page-----530dd9d04875--------------------------------)[![Soner
    Yıldırım](../Images/c589572e9d1ee176cd4f5a0008173f1b.png)](https://sonery.medium.com/?source=post_page-----530dd9d04875--------------------------------)[](https://towardsdatascience.com/?source=post_page-----530dd9d04875--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----530dd9d04875--------------------------------)
    [Soner Yıldırım](https://sonery.medium.com/?source=post_page-----530dd9d04875--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----530dd9d04875--------------------------------)
    ·5 min read·Jun 19, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bee7c0a318f34a43becb83b38cfb4d44.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Szabolcs Toth](https://unsplash.com/@szabolcs_taking_pictures?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/FYt8CIOosOw?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: If you ever go through the documentation of a Python library, it’s inevitable
    to notice the use of * or ** in several places.
  prefs: []
  type: TYPE_NORMAL
- en: But, what do they (* and **) do?
  prefs: []
  type: TYPE_NORMAL
- en: We’ll learn 7 use cases where * and ** come in handy including the cases you
    notice in documentations.
  prefs: []
  type: TYPE_NORMAL
- en: The use cases are best explained with examples so let’s jump right into it.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Call a function with iterables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s say you define a function that takes 5 positional arguments, adds them
    together, and returns the sum.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If the values passed to the function as arguments are stored in an iterable
    (e.g. list), you can call the function using the list directly but you need to
    use * as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you try to call the function as `calculate_sum(numbers)` , Python will complain,
    raising a `TypeError` . What * does here is to unpack the values in the iterable,
    sometimes referred to as argument unpacking.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that the number of values in the `numbers` list must
    be equal to the number of arguments the function takes, which is 5 in this case.
    Otherwise, we’ll get a `TypeError` .
  prefs: []
  type: TYPE_NORMAL
- en: '*If you’d also like to learn more about Pandas, visit my course* [*500 Exercises
    to Master Python Pandas*](https://www.udemy.com/course/500-exercises-to-master-python-pandas/learn/lecture/37842166#overview)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Call a function with dictionaries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This use case is similar to the previous one. In the previous example, the function
    only has positional arguments. In the case of a function with keyword arguments,
    we can still do argument unpacking but with ** instead of *.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The function calculates the mass of an object using its density, length, width,
    and height. Let’s say the measures are stored in a Python dictionary. We can use
    the dictionary directly to call the function as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Similar to the first example, if we try to call it as `calculate_mass(density,
    measures)` , we’ll get a `TypeError` . This is another example of argument unpacking.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Define a function with any number of positional arguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You define a function that sums up the given values but you don’t want to put
    a constraint on the number of values to pass as arguments. Instead, you want it
    to be dynamic and sums up any number of given values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how we can define this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `*args` expression packs the arguments passed to the function allowing us
    to use any number of arguments or an iterable to call the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are different ways of calling this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the case of using an iterable to call the function, we still need to put
    a * when calling the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note on positional and keyword arguments:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Positional arguments are declared by a name only. When a function is called,
    values for positional arguments must be given. Otherwise, we will get an error.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Keyword arguments are declared by a name and a default value. If we do not specify
    the value for a keyword argument, it takes the default value.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 4\. Define a function with any number of keyword arguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This one is similar to the previous use case but we’ll create a function that
    takes keyword arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The function greets people given their name. If it’s called with additional
    keyword arguments of information about the people, the function prints them as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: The `**kwargs` expression allows us to pass any number of keyword arguments
    when calling the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are different ways of calling this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the case of passing the keyword arguments as a dictionary, we need to put
    a ** when calling the function.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Combine dictionaries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use ** for combining dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this case, using `ages = {ages, new_items}` will raise a `TypeError` as well.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Packing values into iterables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s say we have a list with multiple values. We want to assign a value from
    this list to another variable and assign the remaining ones to a different variable.
    It’ll be more clear when we go through the examples below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The first value is assigned to a variable named `first` and the remaining ones
    are packed into another list named `others` .
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also use it as shown in the example below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This use case might be helpful when working with functions that return multiple
    values. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `my_func` function returns a tuple with 4 values. The first one is assigned
    to a variable named `first_one` and the others to a list named `other_sums` .
  prefs: []
  type: TYPE_NORMAL
- en: Final words
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As demonstrated in the examples we’ve done, the * and ** are quite useful in
    Python. We can use them for argument packing and unpacking.
  prefs: []
  type: TYPE_NORMAL
- en: They’re also used when defining and calling functions to add more flexibility
    and versatility.
  prefs: []
  type: TYPE_NORMAL
- en: '*You can become a* [*Medium member*](https://sonery.medium.com/membership)
    *to unlock full access to my writing, plus the rest of Medium. If you already
    are, don’t forget to* [*subscribe*](https://sonery.medium.com/subscribe) *if you’d
    like to get an email whenever I publish a new article.*'
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading. Please let me know if you have any feedback.
  prefs: []
  type: TYPE_NORMAL
