- en: 'Introduction to Speech Enhancement: Part 2 — Signal Representation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/introduction-to-speech-enhancement-part-2-signal-representation-ab1deca2fa74](https://towardsdatascience.com/introduction-to-speech-enhancement-part-2-signal-representation-ab1deca2fa74)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Let’s dive deep into signal representation, Fourier transform, spectra and harmonics.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@mattiadigangi?source=post_page-----ab1deca2fa74--------------------------------)[![Mattia
    Di Gangi](../Images/ccd89021df6724797d45cc3c655a38a5.png)](https://medium.com/@mattiadigangi?source=post_page-----ab1deca2fa74--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ab1deca2fa74--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ab1deca2fa74--------------------------------)
    [Mattia Di Gangi](https://medium.com/@mattiadigangi?source=post_page-----ab1deca2fa74--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ab1deca2fa74--------------------------------)
    ·10 min read·Jan 31, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/089f61fe7f5fa79d6f139a1233f7e860.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Richard Horvath](https://unsplash.com/@orwhat?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'This article is part of a series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Introduction to Speech Enhancement: Part 1 — Concepts and Task Definition](https://medium.com/towards-data-science/introduction-to-speech-enhancement-part-1-df6098b47b91)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Introduction to Speech Enhancement: Part 2 — Signal Representation**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before going deeper into the speech enhancement rabbit hole, we really need
    to make clear some concepts about digital signal processing. In the previous chapter
    of this series, we introduced some concepts and added links to further readings.
  prefs: []
  type: TYPE_NORMAL
- en: In this second part, we are going to explore how digital signals are represented,
    how to change representation, and why the Fourier transform is so important. Code
    and plots will help you understand and play more with the examples.
  prefs: []
  type: TYPE_NORMAL
- en: Signal Fundamentals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our main goal in this article is to understand what is a signal, how it can
    be represented, and the importance of the Fourier transform, which is a time —
    proven way to change representation according to our needs.
  prefs: []
  type: TYPE_NORMAL
- en: An audio signal is conventionally represented, and recorded, as a variation
    of amplitudes over time. Since we are talking about **digital** signal processing,
    the recorded audio is composed of many **samples** collected at regular intervals.
    It is customary to measure the **frequency** of sampling rather than the interval
    length between samples. The **sampling frequency,** or **sampling rate**, is the
    number of samples in a second. The inverse of a second (*1/s)* is called Hertz
    (Hz). If we have 10 samples in one second, we have a sampling rate of 10Hz. If
    we have 1000 samples, it is 1 kHz (kilo Hertz) or 1000 Hz, and so on with the
    usual scientific prefixes.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fcd4dd22f27b62d80ed90d6dc5484469.png)'
  prefs: []
  type: TYPE_IMG
- en: Sinusoidal signal with amplitude 1.0, frequency of 10 Hz and sampling rate of
    10 kHz
  prefs: []
  type: TYPE_NORMAL
- en: Compare it to a sinusoidal signal with frequency 1Hz. It looks “wider” than
    the previous one. We can imagine regulating the frequency like stretching a spring,
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/afdbdb8a4139e9f0617a61ac10c95cb4.png)'
  prefs: []
  type: TYPE_IMG
- en: Sinusoidal signal with amplitude 1.0, frequency of 1 Hz and sampling rate of
    10 kHz
  prefs: []
  type: TYPE_NORMAL
- en: The sampling rate affects the perceived quality of the signals, as an insufficient
    sampling rate leads to degradation, like in the next figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2065ca8368fbe0de938a5d9deb39a8b9.png)'
  prefs: []
  type: TYPE_IMG
- en: Sinusoidal signal with amplitude 1.0, frequency of 10 Hz and sampling rate of
    100 Hz
  prefs: []
  type: TYPE_NORMAL
- en: 'In some cases of extremely insufficient sampling rate, the recorded signal
    may not resemble at all the original analog signal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bf60dc3ca6241c5dc3ffd6d21a11c4a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Same signal with sampling rate 10 Hz. The samples are evenly distributed and
    correspond to the zero values of the function. Please note the small horizontal
    blue line at y=0.0
  prefs: []
  type: TYPE_NORMAL
- en: These basic examples show us the importance of choosing a high-enough sampling
    rate. It starts from 8kHz for human speech, which is the sampling rate of telephony,
    and can easily go up to 44.1 kHz when high accuracy is needed. The above-plotted
    signals can be reproduced with the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We observed so far that changing the frequency can make the signal “narrower”
    or “wider” in the horizontal axis, and the sampling rate affects its accuracy.
    We can also stretch it or compress it in the vertical axis by modifying the amplitude:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3353f69db721220df5f5b6a9bd2368e1.png)'
  prefs: []
  type: TYPE_IMG
- en: Sinusoidal signal with amplitude 3.0, frequency of 10 Hz and sampling rate of
    10 kHz
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8c1462c2bf2a141a49e8f1509ce870ee.png)'
  prefs: []
  type: TYPE_IMG
- en: Sinusoidal signal with amplitude 0.5, frequency of 10 Hz and sampling rate of
    10 kHz
  prefs: []
  type: TYPE_NORMAL
- en: The two signals can look the same, but a quick glance at the vertical axis labels
    show that the first one ranges from -3.0 to 3.0 and the second one from -0.5 to
    0.5\. The maximum (absolute) value matches the amplitude value we select.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last introductory concept we need to understand is the **phase** of a signal.
    It can be considered the **time shift** with respect to a reference starting time
    and is expressed in radians. Let us try to understand it by observing a visual
    example. The sinusoidal signal presented before has a phase of 0, and its function
    can be expressed as sin(10 * 2π*t*), where 10 is the frequency, and 2π is a full
    **period** for the sin function. The period is the interval beyond which the function
    repeats itself. Now, we can add a phase of π radians, obtaining the following
    plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c6a9efaf0a6acc00a14c119a0537ecb7.png)'
  prefs: []
  type: TYPE_IMG
- en: Sinusoid with frequency 10 Hz, sampling rate 10 Khz and phase π
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that it is like the signal “shifted left” by the duration of π radians.
    We can also shift it right by subtracting the phase of π, but it would not be
    visible (the function looks the same by shifting left or right by π), so we will
    do it by π/2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7e7e3f5ef3890f71b9b158d284717d7d.png)'
  prefs: []
  type: TYPE_IMG
- en: Sinusoid with frequency 10 Hz, sampling rate 10 Khz and phase -π/2
  prefs: []
  type: TYPE_NORMAL
- en: And we say “add” and “subtract” because the formula is sin(*f* * 2π*t* + *θ*)
    where *f* is the frequency and *θ* the phase.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we introduced a couple of concepts, we can turn back to our Fourier
    Transform and how it helps us to understand signals better.
  prefs: []
  type: TYPE_NORMAL
- en: The Fourier transform
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The goal of this section is to provide the reader with a pragmatic idea of the
    Fourier Transform. There are numerous resources going deep into the Fourier transform
    theory, and the world does not need a new one. The interested readers are strongly
    encouraged to follow the links and search additional resources.
  prefs: []
  type: TYPE_NORMAL
- en: The basic assumption behind the Fourier transform is that any **stationary signal**
    can be decomposed in a sum of sinusoidal functions of different frequencies, each
    with their own amplitude and phase. A signal represented as a sum of sinusoidal
    signals is said to be in “frequency domain”, whereas we saw them so far in the
    “time domain”.
  prefs: []
  type: TYPE_NORMAL
- en: The result of applying the Fourier transform to a signal, also called *analysis,*
    is a series of complex coefficients, each corresponding to a specific frequency.
    Why complex coefficients? We can represent any [complex number](https://en.wikipedia.org/wiki/Complex_number)
    *z* in polar coordinates as *z = |z|e^(jθ*) where *|z|* is the amplitude and *θ*
    the angle (or phase). Amplitude and phase are exactly everything we need to know
    to fully describe a sinusoidal signal with known frequency.
  prefs: []
  type: TYPE_NORMAL
- en: There are different types of Fourier transform, but the most common one is the
    [Discrete Fourier Transform](https://en.wikipedia.org/wiki/Discrete_Fourier_transform#cite_ref-Strang_1-0)
    (DFT) and its inverse, the Inverse Discrete Fourier Transform (IDFT), which are
    the ones we need for discrete recordings of signals.
  prefs: []
  type: TYPE_NORMAL
- en: 'The DFT of a discrete signal x(n) of length N, is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: X(k) = Σ x(n) * e^(-j*2*π*k*n/N) for k = 0,1,2,…,N-1
  prefs: []
  type: TYPE_NORMAL
- en: where X(k) are the DFT complex coefficients, k is the frequency index, n is
    the time index, N is the length of the signal, and j is the imaginary unit.
  prefs: []
  type: TYPE_NORMAL
- en: The IDFT is the inverse of the DFT, it allows us to recover the original signal
    from the DFT coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: x(n) = 1/N * Σ X(k) * e^(j*2*π*k*n/N) for n = 0,1,2,…,N-1
  prefs: []
  type: TYPE_NORMAL
- en: The DFT coefficients can be used to analyze the frequency content of a signal,
    and the Inverse DFT can be used to synthesize a signal from its frequency components.
    The DFT and IDFT are widely used in many applications that go well beyond audio
    processing, such as image and video processing, communication systems, and deep
    learning.
  prefs: []
  type: TYPE_NORMAL
- en: An important property of the DFT is **linearity, that is,** sum and multiplication
    of the signal before the transform by a constant complex number implies an equal
    sum or multiplication of the transformed value, and vice versa since the IDFT
    has the same property. This allows us to modify the signal in the frequency domain,
    where we can modify individual components, and have an easily predictable result
    on the time-domain signal.
  prefs: []
  type: TYPE_NORMAL
- en: Spectral Representation of a Signal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The spectral representation of a signal is a way of representing the frequency
    content of a signal in the frequency domain.
  prefs: []
  type: TYPE_NORMAL
- en: The magnitude of the DFT coefficients gives the amplitude spectrum of the signal,
    which represents the strength of each frequency component in the signal. The amplitude
    spectrum is usually shown in decibels (dB), which is a logarithmic scale that
    makes it easier to interpret the relative strength of different frequency components.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f5fecedc1d6fc139c255d34facb9e2a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Spectrum of a sinusoid with frequency 440Hz, amplitude 1.0 and phase 0.0\. The
    only non-zero value is in correspondence of frequency 440 Hz
  prefs: []
  type: TYPE_NORMAL
- en: The phase plot is more difficult to interpret
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d070a7dfaabc0dbffddd38dac3e4c1c6.png)'
  prefs: []
  type: TYPE_IMG
- en: Angle spectrum of the same sinusoid
  prefs: []
  type: TYPE_NORMAL
- en: 'The two plots can be generated with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Where in the plots we have the complex number function to get the amplitude
    and angle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us now see an example of a low-pass filter that reduces the effect of high
    frequencies. Let us produce a signal by summing individual sinusoids with different
    frequencies and then let us divide by 2 the amplitude for the signals with frequency
    higher than 1000:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/17b70c262a04a1c15ce626c9a3b4e58c.png)'
  prefs: []
  type: TYPE_IMG
- en: Sum of sinusoids with same amplitude
  prefs: []
  type: TYPE_NORMAL
- en: 'And spectrum:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d0383063c475311dbfd3458f69d19587.png)'
  prefs: []
  type: TYPE_IMG
- en: Spectrum of the signal above. All the non-zero frequency give the same contribution
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let us apply the low-pass filter as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Obtaining the predictable spectrum
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a2559193809d9595e33f96ffc8a47f28.png)'
  prefs: []
  type: TYPE_IMG
- en: Spectrum with low-pass filter applied
  prefs: []
  type: TYPE_NORMAL
- en: Notice that it just means that the amplitudes for the interested frequencies
    have been divided by half. Since we are working only with sinusoids the mapping
    is immediate, but the same applies if we start with a different signal.
  prefs: []
  type: TYPE_NORMAL
- en: Finally we can get back the modified signal
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Obtaining the following signal
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/773c3785d477bfbe5f17c953f9ea10fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Reconstructed signal from the irfft
  prefs: []
  type: TYPE_NORMAL
- en: Which is similar to the starting signal but scaled down by almost two.
  prefs: []
  type: TYPE_NORMAL
- en: Harmonics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us now observe a signal a bit more sophisticated than a sinusoid, for instance
    a triangle-shaped signal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/477976189445aa5dfe10667396f3a77b.png)'
  prefs: []
  type: TYPE_IMG
- en: Triangular signal with frequency 10, amplitude 1 and phase 0
  prefs: []
  type: TYPE_NORMAL
- en: 'We can generate it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The underlying idea is that we take only the fractional parts of our xs, which
    have a constant increment, and take the absolute value of the difference with
    0.5\. This results in the triangular shape. Then, we have a bias and scaling to
    bring the signal from [0, 0.5] to [-1, 1].
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us now have a look at the amplitude spectrum of this signal. We change
    the frequency to a higher value, 440 Hz as an example, for the sake of visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/38d7965e6a7003cd03ad634a8b96d98e.png)'
  prefs: []
  type: TYPE_IMG
- en: Spectrum of a triangular signal with frequency 440 Hz
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike the sinusoidal signal, this signal has multiple non-zero values. If
    you think there is a pattern in their distribution, then you are right! A triangular
    shape consists of a relative strong sinusoidal signal with the same frequency,
    called the **fundamental frequency**, which in this case is at 440Hz. The other
    frequencies are called harmonics and are **multiples** of the fundamental frequency.
    The plot does not have a high resolution but the harmonics there have frequencies:
    1320 Hz, 2200 Hz, 3080 Hz, and so on, covering the **even** multiples. The last
    one is a property of the triangular signal, while in general the harmonics can
    be all multiples of the fundamental frequency. The fundamental frequency is important
    because, in general, the perceived **pitch** of a signal depends on the fundamental
    frequency, even when it is not dominant, that is the highest coefficient.'
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you can see more (very small) non-zero coefficients. This is an
    artifact of digital signal processing called **aliasing.** When sampling a signal
    for digital representation, we lose information about what happens in between
    two points. This is not a problem for low frequencies because we have plenty of
    samples to interpolate, but it becomes a visible problem for high frequencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the above plot we can see we can observe frequencies as high as 5000 Hz,
    but the 7th harmonic would be 5720 Hz. The effect of sampling is to cause a “[folding](https://en.wikipedia.org/wiki/Nyquist_frequency)”
    of the frequencies, that is after 5000 we start to count backward. Then, the 7th
    harmonic is detected as 4280: 5000 — (5720–5000). The aliased frequencies keep
    going backward till reaching 0, and then they are folded back into the other direction,
    again.'
  prefs: []
  type: TYPE_NORMAL
- en: The higher the sampling rate, the lower the effect of aliasing, the sharper
    the signal.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article we entered the world of signal representation and of the Fourier
    transform. Having an understanding of the basic terminology and its meaning in
    terms of signal is important to continue with this series.
  prefs: []
  type: TYPE_NORMAL
- en: The article is packed with plots and code to support the reader to understand
    the concepts in a practical way, and let the reader play easily with the examples.
  prefs: []
  type: TYPE_NORMAL
- en: In the next part of this series we will start with some speech enhancement by
    exploring reverberation.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading so far and stay tuned for the next part!
  prefs: []
  type: TYPE_NORMAL
- en: '[](/python-polymorphism-with-class-discovery-28908ac6456f?source=post_page-----ab1deca2fa74--------------------------------)
    [## Python Polymorphism with Registers | Python Patterns'
  prefs: []
  type: TYPE_NORMAL
- en: Learn a pattern to isolate packages while extending the functionalities of your
    Python code.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/python-polymorphism-with-class-discovery-28908ac6456f?source=post_page-----ab1deca2fa74--------------------------------)
    [](/tips-for-reading-and-writing-an-ml-research-paper-a505863055cf?source=post_page-----ab1deca2fa74--------------------------------)
    [## Tips for Reading and Writing an ML Research Paper
  prefs: []
  type: TYPE_NORMAL
- en: Lessons learned by dozens of peer reviews given and received
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/tips-for-reading-and-writing-an-ml-research-paper-a505863055cf?source=post_page-----ab1deca2fa74--------------------------------)
    [](/pick-your-deep-learning-tool-d01fcfb86845?source=post_page-----ab1deca2fa74--------------------------------)
    [## Pick Your Deep Learning Tool
  prefs: []
  type: TYPE_NORMAL
- en: Why your tool can depend on your organization’s team structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/pick-your-deep-learning-tool-d01fcfb86845?source=post_page-----ab1deca2fa74--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 2 of [Think DSP](https://github.com/AllenDowney/ThinkDSP) covers the
    concepts of this article with great detail.
  prefs: []
  type: TYPE_NORMAL
- en: Medium Membership
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Do you like my writing and are considering subscribing for a Medium Membership
    for having unlimited access to the articles?
  prefs: []
  type: TYPE_NORMAL
- en: If you subscribe through this link you will support me through your subscription
    with no additional cost for you [https://medium.com/@mattiadigangi/membership](https://medium.com/@mattiadigangi/membership)
  prefs: []
  type: TYPE_NORMAL
