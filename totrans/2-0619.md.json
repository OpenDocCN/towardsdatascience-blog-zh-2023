["```py\nimport pandas as pd\nimport numpy as np\n\nnp.random.seed(42)\n\nn_samples = 50000 \n\npolicy_exposure = np.random.uniform(1, 12, n_samples)\n\nn_features = 10\nX = np.random.randn(n_samples, n_features)\n\nannual_claim_rate = 0.05  \nmonthly_claim_rate = annual_claim_rate / 12  \nnum_claims = np.random.poisson(lam=monthly_claim_rate * policy_exposure)\n\nclaim_cost = np.zeros(n_samples)\npositive_cost_indices = num_claims > 0\nhigh_variance_gamma = np.random.gamma(2, 3000, size=positive_cost_indices.sum())\nclaim_cost[positive_cost_indices] = high_variance_gamma\n\nclaims_df = pd.DataFrame(\n    {\n        \"policy_exposure\": policy_exposure,\n        \"num_claims\": num_claims,\n        \"claim_cost\": claim_cost,\n    }\n)\n\nfeatures_df = pd.DataFrame(X, columns=[f\"feature_{i+1}\" for i in range(n_features)])\ndf = pd.concat([claims_df, features_df], axis=1)\n\nnum_claims_std_dev = 2\nfor i in range(1, 6):\n    df[f\"feature_{i}\"] += np.random.normal(0, num_claims_std_dev * i, n_samples)\n\nclaim_cost_std_dev = 2\nfor i in range(6, 11):\n    df[f\"feature_{i}\"] *= np.random.normal(1, claim_cost_std_dev * (i - 5), n_samples)\n```", "```py\nfrom lightgbm import LGBMRegressor\n\ntweedie_regressor = LGBMRegressor(objective=\"tweedie\", verbose=0)\n\nfeatures = [x for x in df.columns if \"feature\" in x]\n\ntarget = \"claim_cost\"\n\nweight = \"policy_exposure\"\n```", "```py\nfrom sklearn.model_selection import RandomizedSearchCV\n\nparam_distributions = {\n    \"tweedie_variance_power\": [x / 100 for x in range(100, 200)],\n}\n\nfit_params = {\"sample_weight\": df[weight]}\n\nrandom_search = RandomizedSearchCV(\n    estimator=tweedie_regressor,\n    n_iter=50,\n    param_distributions=param_distributions,\n    cv=5,\n    verbose=2,\n    random_state=21,\n    n_jobs=-1,\n)\n\nrandom_search.fit(df[features], df[target], **fit_params)\n```", "```py\nfrom sklearn.metrics import r2_score\n\nbest_power = random_search.best_params_[\"tweedie_variance_power\"]\n\nbest_estimator = random_search.best_estimator_\n\nbest_estimator.fit(df[features], df[target], sample_weight=df[weight])\n\nmodel_score = best_estimator.score(df[features], df[target])\n\nr2 = r2_score(df[target],best_estimator.predict(df[features]))\n\nprint(model_score == r2)\n\n# True\n```", "```py\ndeviance = mean_tweedie_deviance(\n    df[target],\n    best_estimator.predict(df[features]),\n    power=best_power,\n    sample_weight=df[weight],\n)\n\nprint(f\"Best Power: {best_power}\")\nprint(f\"mean_tweedie_deviance: {deviance}\")\n\n# Best Power: 1.29\n# mean_tweedie_deviance: 159.49\n```", "```py\ntweedie_loss = make_scorer(mean_tweedie_deviance, greater_is_better=False)\n```", "```py\nparam_distributions = {\n    \"tweedie_variance_power\": [x / 100 for x in range(100, 200)],\n}\n\nfit_params = {\"sample_weight\": df[\"policy_exposure\"]}\n\nrandom_search = RandomizedSearchCV(\n    estimator=tweedie_regressor,\n    n_iter=10,\n    param_distributions=param_distributions,\n    scoring=tweedie_loss,\n    cv=5,\n    verbose=2,\n    random_state=21,\n    n_jobs=-1,\n)\n\nrandom_search.fit(df[features], df[\"claim_cost\"], **fit_params)\n```", "```py\nbest_power = random_search.best_params_[\"tweedie_variance_power\"]\n\nbest_estimator = random_search.best_estimator_\n\nbest_estimator.fit(df[features], df[target], sample_weight=df[weight])\n\ndeviance = mean_tweedie_deviance(\n    df[target],\n    best_estimator.predict(df[features]),\n    power=best_power,\n    sample_weight=df[weight],\n)\n\nprint(f\"Best Power: {best_power}\")\nprint(f\"mean_tweedie_deviance: {deviance}\")\n\n# Best Power: 1.29\n# mean_tweedie_deviance: 159.49\n```", "```py\ndef weighted_mse(y_true, y_pred, weights):\n    weighted_squared_diff = weights * (y_true - y_pred) ** 2\n\n    weighted_mean_squared_error = np.sum(weighted_squared_diff) / np.sum(weights)\n\n    return weighted_mean_squared_error\n\nmse = weighted_mse(df[target],\n    best_estimator.predict(df[features]),df[weight])\n\ndeviance = mean_tweedie_deviance(\n    df[target],\n    best_estimator.predict(df[features]),\n    power=0,\n    sample_weight=df[weight],\n)\n\nprint(f\"Weighte MSE: {mse}\")\nprint(f\"Deviance (Power = 0): {deviance}\")\n\n# Weighte MSE: 1566555.33\n# Deviance (Power = 0): 1566555.33\n```", "```py\ntweedie_loss = make_scorer(mean_tweedie_deviance, greater_is_better=False, power=1.5)\n```", "```py\ndef tweedie_loss(estimator, X, y):\n    power = estimator.get_params()[\"tweedie_variance_power\"]\n    y_pred = estimator.predict(X)\n    return -mean_tweedie_deviance(y, y_pred, power=power)\n```", "```py\nparam_distributions = {\n    \"tweedie_variance_power\": [x / 100 for x in range(100, 200)],\n}\n\nfit_params = {\"sample_weight\": df[\"policy_exposure\"]}\n\nrandom_search = RandomizedSearchCV(\n    estimator=tweedie_regressor,\n    n_iter=10,\n    param_distributions=param_distributions,\n    scoring=tweedie_loss,\n    cv=5,\n    verbose=2,\n    random_state=21,\n    n_jobs=-1,\n)\n\nrandom_search.fit(df[features], df[\"claim_cost\"], **fit_params) \n```", "```py\nbest_power = random_search.best_params_[\"tweedie_variance_power\"]\n\nbest_estimator = random_search.best_estimator_\n\nbest_estimator.fit(df[features], df[target], sample_weight=df[weight])\n\ndeviance = mean_tweedie_deviance(\n    df[target],\n    best_estimator.predict(df[features]),\n    power=best_power,\n    sample_weight=df[weight],\n)\n\nprint(f\"Best Power: {best_power}\")\nprint(f\"mean_tweedie_deviance: {deviance}\")\n\n# Best Power: 1.62\n# mean_tweedie_deviance: 35.30\n```"]