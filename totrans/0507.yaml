- en: Choose the Right Database Model & Free Your Data from Spreadsheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/choose-the-right-database-model-free-your-data-from-spreadsheets-8d1129626b42](https://towardsdatascience.com/choose-the-right-database-model-free-your-data-from-spreadsheets-8d1129626b42)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You’ve outgrown Excel: how to select between a relational, document, or graph
    database and be prepared for what’s next'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@kalebnyquist?source=post_page-----8d1129626b42--------------------------------)[![Kaleb
    Nyquist](../Images/33005821cae7a73f536871e0b3c7545c.png)](https://medium.com/@kalebnyquist?source=post_page-----8d1129626b42--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8d1129626b42--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8d1129626b42--------------------------------)
    [Kaleb Nyquist](https://medium.com/@kalebnyquist?source=post_page-----8d1129626b42--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8d1129626b42--------------------------------)
    ·16 min read·May 8, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Open up a blank spreadsheet and the seemingly unending rows and columns can
    appear to be a canvas of infinite possibilities. However, many data engineers
    and other digital knowledge workers increasingly see the criss-crossing grey lines
    of a spreadsheet as restrictive — ironically not unlike the horizontal and vertical
    metal bars of a jail cell!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4f4481988d97ecf7f9711a1cd7d4de3a.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Admittedly, for the visual metaphor of “spreadsheet jail” to work the spreadsheet
    has to be rotated 90°. But once you see the eerie resemblance, it becomes impossible
    to forget.** *Photo illustration by author.* [*Photo*](https://unsplash.com/photos/JC7bE-eQXIk)
    *by* [*WWW PROD*](https://unsplash.com/@wwwprod) *on* [*Unsplash*](https://unsplash.com/photos/JC7bE-eQXIk?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: '“Spreadsheet jail” happens when the decision to store data in spreadsheets
    bottlenecks an organization from achieving its goals efficiently. This is primarily
    because a spreadsheet’s individual cells (no pun intended) are restricted in their
    ability to be queried and governed: for example, today the cell `K18` might refer
    to the quantity of some item on hand, but tomorrow if a row and column is added
    `K18` could refer to something else entirely.'
  prefs: []
  type: TYPE_NORMAL
- en: For larger projects, "spreadsheet jail" also happens when the amount of data
    being stored exceeds the maximum size of a spreadsheet (10 million cells for Google
    Sheets; 1,048,576 rows and 16,384 columns for Microsoft Excel). In one extreme
    example, a list of financial data was discovered to have been fabricated after
    [an employee noticed it oddly was the exact same size as a maxed-out Excel spreadsheet,
    a deception that now has the company's disgraced CEO facing decades of actual
    prison time](https://workweek.com/2023/01/16/frank/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The stakes of spreadsheet jail are less literal for those us not engaged in
    criminal enterprises, but nevertheless our inappropriate use of spreadsheets often
    is costly and cumbersome. Consider the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Is opening a spreadsheet that once was considered a reliable and efficient way
    of looking up information now a source of dread?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does your organization have a staff person spending multiple hours a day answering
    questions where the answers are either (1) buried deep in a single spreadsheet
    or (2) spread wide across multiple spreadsheets?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there important analytical questions that have even your pivot table pros
    scratching their head? Similarly, are your cell formulas fragile, breaking constantly
    or requiring multiple manual steps to calculate?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is vital information being relegated outside of cell values, for example as
    a “note” or as a “comment” on the spreadsheet?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you answered “no” to all of these questions, congratulations! When data management
    isn’t keeping you from achieving your goals, you’re not in spreadsheet jail. There
    is no need to replace what works with an overpowered database solution.
  prefs: []
  type: TYPE_NORMAL
- en: However, if you answered “yes” to any of these questions, that unfortunately
    is a sign that you are in spreadsheet jail. The good news is that it is possible
    to break free by adopting one of the many database technologies that are more
    appropriate to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: In what follows, I help narrow down the options by introducing three database
    model paradigms while also providing an example of a spreadsheet that particularly
    benefits by being converted into that model. You might wish to keep open a copy
    of your most problematic spreadsheet as you review these descriptions to try and
    diagnose the problem that landed you in spreadsheet jail and determine which database
    model is the best antidote.
  prefs: []
  type: TYPE_NORMAL
- en: These descriptions are written for project managers and executives with some
    tech-savvy trying to better understand their data needs. Data professionals whose
    companies have inadvertently stuck them in spreadsheet jail can also refer to
    this piece to find the language they need to advocate for the adoption of more
    robust database technologies.
  prefs: []
  type: TYPE_NORMAL
- en: Relational Databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Relational databases consist of “tables” that conceptually are similar to the
    two-dimensional grid of a spreadsheet, but with individual rows of data connected
    across tables by “keys.” A “primary key” is a data point that represents an individual
    row to other tables, whereas a “foreign key” stores which row(s) from other tables
    are meant to have a particular relationship with the row in a given table.
  prefs: []
  type: TYPE_NORMAL
- en: SQL — or “Structured Query Language” —is commonly used for interacting with
    data stored in a relational database, including asking questions that involve
    data scattered across multiple tables. Although it might sound intimidating at
    first, SQL is relatively easy and inexpensive to learn (there are numerous [free
    SQL courses](https://www.coursera.org/learn/sql-for-data-science) available online,
    and many community colleges offer introductory courses in SQL).
  prefs: []
  type: TYPE_NORMAL
- en: Notably, SQL has been a public good since 1986, when [the American National
    Standards Institute first recognized a form of SQL](https://blog.ansi.org/2018/10/sql-incits-american-national-standard/#gref)
    that could be used interchangeably across corporations, government agencies, and
    academic institutions. If your goals call for importing [open data](https://en.wikipedia.org/wiki/Open_data)
    or exporting internal data for academic research, having a database with a relational
    model that can be accessed via SQL is arguably the safest way to go.
  prefs: []
  type: TYPE_NORMAL
- en: Because of the ubiquity of relational databases and SQL, it can be overwhelming
    to try and determine what specific solution is best. The most popular databases,
    such as Oracle and SQL Server, are generally overpowered and too costly for most
    organizations that are simply shifting from spreadsheets and not (yet) running
    full-fledged apps. More appropriate are the free and open-source options including
    [PostgreSQL](https://www.postgresql.org) which does not skimp on features and
    [SQLite](https://www.sqlite.org) which is nimble and easy to deploy.
  prefs: []
  type: TYPE_NORMAL
- en: If a relational database model is compelling but the investment to setup and
    learn SQL is cost-prohibitive, [Airtable](https://airtable.com/invite/r/9jyJBxR8)
    is an excellent compromise. Instead of a query language, Airtable’s spreadsheet-like
    graphical interface works well for interacting with what (from an end-user perspective)
    functions like a relational database model.
  prefs: []
  type: TYPE_NORMAL
- en: Spreadsheet Diagnosis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If your data are currently stored within a spreadsheet, you should consider
    making the leap to a relational database if the spreadsheet has a significant
    number of “repeating sub-rows”.
  prefs: []
  type: TYPE_NORMAL
- en: '**This spreadsheet tracks participants in an afterschool program. Notice that
    Parent is a “repeating sub-row” and the Parent 2 cell values in particular are
    either all filled or completely empty. This gives the end of the spreadsheet a
    sort of “string cheese” appearance, where the rows are frayed at the end.** Example
    data by author.'
  prefs: []
  type: TYPE_NORMAL
- en: Say, for example, you run an after-school program. Each row in your spreadsheet
    represents data for a single kid (name, grade, allergies, etc.) and you have sub-rows
    that represent data for each of the kids’ parents (name, contact information,
    etc.). It is quite likely that multiple kids will have the same parents, but if
    you were to update contact information for that parent you would have to make
    sure to catch every sub-row the parent appears in.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e3ed1dd0501b1ba5eb3f838b1c15babe.png)'
  prefs: []
  type: TYPE_IMG
- en: '**This simple entity-relationship diagram, using** [**crow’s foot notation**](https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model#Crow''s_foot_notation)**,
    is an illustration to say that each child in the afterschool program’s database
    has a name, grade, a list of allergies (including an empty list), and one or more
    associated parents. Each of these parents has a name, email address, phone number,
    and one or more associated students.** Diagram by author.'
  prefs: []
  type: TYPE_NORMAL
- en: A relational database solves this issue by converting the “sub-rows” into a
    single “Foreign Key” cell that refers to data stored on a different “parent” table.
    If you update information on one parent, you simultaneously update the parental
    information for each kid associated with that parent. Because there is no need
    to make batch updates across duplicated data, the chore of data integrity becomes
    much easier when using a relational data model.
  prefs: []
  type: TYPE_NORMAL
- en: '**The afterschool program’s data migrated into Airtable. Although technically
    not a SQL database, Airtable embraces the relational data paradigm while maintaining
    a familiar spreadsheet interface.** Example data by author.'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, most after-school programs are run by volunteers and other people
    who do not have the time and skills to manage a full-fledged SQL database. [Airtable](https://airtable.com/invite/r/9jyJBxR8)
    is a great no-code alternative for this use case, with the additional advantage
    of having built-in tools like “Forms” that allow for guided data entry.
  prefs: []
  type: TYPE_NORMAL
- en: Document-Oriented Databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A document-oriented database, or “document store”, is ideal for working with
    loosely structured data. If the paradigm of relational databases described above
    are “tables” consisting of “rows” and “columns”, then the paradigm of document-oriented
    databases are “collections” of “documents” that consist of “key” and “value” pairs.
    For example, a key of `Length (meters)`might be paired with a value of `18`, or
    a key of `Locations` might be paired to a list consisting of `["Portland", "Omaha",
    "San Antonio", "Savannah"]` . Furthermore, a value can even be an entirely new
    set of key-value pairs called a “sub-document”. Assuming each document has a unique
    id, it also is possible for a value to point towards another document and emulate
    the relationality of SQL databases.
  prefs: []
  type: TYPE_NORMAL
- en: People new to the jargon of digital data may be confused by the term “document.”
    I have to confess that when I first learned about document-oriented databases,
    I naïvely thought these systems were designed to store a bunch of PDF and Word
    documents (I later discovered that the term for that sort of technology is a [“document
    management system”](https://en.wikipedia.org/wiki/Document_management_system)).
    In this context, however, a “document” actually refers to the lightweight and
    popular [JSON](https://www.json.org/json-en.html) format designed to be relatively
    easy for both humans and computers to read or write. Whereas each row in a relational
    database must conform to the schema (aka the “columns”) of a table, a JSON document
    can theoretically have any desired set of key-value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: Because of this flexibility, document-oriented databases have a reputation as
    being the “adaptable” database model. Over time as you discover more data about
    what it is you’re collecting information on, you can add new fields without mucking
    up any old records that have a different set of key-value pairs. Furthermore,
    because the same key can be associated with different *types* of values across
    documents, this database model lends itself well to data heterogeneity.
  prefs: []
  type: TYPE_NORMAL
- en: One practical way to take advantage of this heterogeneity is to create “placeholder
    data” such as a text string that will be expanded into a subdocument later. It
    also makes it easier to distinguish between different types of blank data, for
    example by (1) excluding a key to indicate missing data versus (2) setting a value
    to `null` or `None` if there is nothing to observe, such as the geographic coordinates
    of an organization that operates entirely online, or the driver’s license number
    of a small child too young to drive.
  prefs: []
  type: TYPE_NORMAL
- en: Document stores are ideal for organizations that are in the beginning stages
    of trying to figure out what data to collect. Notably, [shifting to a document-oriented
    database is part of what turned around the fortunes of the HealthCare.gov website](https://www.fedhealthit.com/2016/01/the-untold-story-of-rescuing-healthcare-gov/)
    and has allowed it to continue adapting to the constantly changing data inputs
    of multiple federal and state agencies. That said, if the database’s engineers
    lack discipline and are careless about adding fields, there is a real risk that
    over time the database will become increasingly messy and difficult to manage.
  prefs: []
  type: TYPE_NORMAL
- en: The most popular document-oriented database solution is MongoDB. With [a license
    agreement that is almost-but-not-quite-considered-open source](https://en.wikipedia.org/wiki/Server_Side_Public_License),
    their [free 512MB cloud tier](https://www.mongodb.com/blog/post/free-your-genius-on-mongodb-atlas-free-tier)
    and [locally-hosted community edition](https://www.mongodb.com/try/download/community)
    can meet the data needs for many of those transitioning from spreadsheets without
    incurring direct expenses. Furthermore, the basics of MongoDB querying (sometimes
    referred to as “MQL”) and other data navigation tools like Compass can be [learned
    online for free](https://university.mongodb.com/). However, unlike SQL, [“MQL”
    is not actually a standardized query language but rather a set of language-specific
    drivers and APIs](https://akira-kurogane.github.io/mongodb-guide/en/rw_data_guide/mql_vs_sql/).
    This means that although it is harder to hire talent that knows MQL, it should
    still be easy for someone who is already working in a specific programming language
    (i.e. Python, JavaScript, etc.) to pick up MQL and implement MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Spreadsheet Diagnosis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If your data are currently stored within a spreadsheet, you should consider
    making the leap to a document-oriented database if you have a significant number
    of cells that are either completely empty or crammed with data (more than half
    the spreadsheet is a good rule of thumb). You also want to look out for “ad hoc
    columns” that exist just to input data on a few rows or a “miscellaneous” notes
    column.
  prefs: []
  type: TYPE_NORMAL
- en: '**This spreadsheet stores information for a local community directory. Notice
    the use of the `|` symbol to create “mini-spreadsheets” within cells. There also
    are a number of empty cells scattered about, giving this spreadsheet a sort of
    “swiss cheese” appearance.** Example data by author.'
  prefs: []
  type: TYPE_NORMAL
- en: The above example spreadsheet features an imagined list of local places, all
    of which have little in common with each other than the fact they have a name.
    Notice there is plenty of data on some places, like Joe’s Burgers, whereas some
    places like Alcove Speakeasy have sparse data. Many of the cells are empty, including
    the `Restrictions` column which contains data for a single row only. Under the
    `Websites` column it is unclear if the cell is blank because the data is missing
    (as is the case with Joe’s Burgers) or because the place doesn’t have a website
    (as is the case with the Centennial Obelisk). There are also a number of cells
    bloated with nested data, in particular under the `Photos`, `Prices`, and `Scores`
    columns. And of course there is a `Miscellaneous` column that is merging three
    potential columns into one to keep the spreadsheet from growing too unwieldly.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b8be51f57d912e506617a3590d188b83.png)'
  prefs: []
  type: TYPE_IMG
- en: '**The same local community directory as a JSON file. This is similar to how
    the data would be stored within a document-oriented database.** [Full file is
    available to view here](https://gist.github.com/KalebNyquist/7e4708747840ef01b1f77b0a54fd6006).
    Screenshot by author.'
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the same community directory stored as a JSON file some crucial advantages
    become apparent.
  prefs: []
  type: TYPE_NORMAL
- en: The documents can be different sizes depending on the amount of actual data
    that is being stored. This means instead of a `Miscellaneous` column to reduce
    the number of spreadsheet columns, an `Awards` property can be created for just
    a few documents.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notice that for “Joe’s Burgers” there is no `Website` field whereas for “Centennial
    Obelisk.” This is one way to communicate that the website for Joe’s Burgers might
    exist but is missing in the data, whereas there is no website for the Centennial
    Obelisk. Compare this to the spreadsheet, where these two scenarios are indistinguishable!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a lot more room for the data breathe, metaphorically speaking. The
    `Photos`, `Prices`, and `Scores` fields are crammed in spreadsheet cells but can
    stretch further as their own sub-documents or, in the case of `Scores`, as a list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A relational data structure has been created using an `@id` field as a “primary
    key”, whereas fields such as `Type` and `User` can look up documents by their
    `@id`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graph Databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Graph databases are designed to describe connections. This is accomplished
    by simultaneously managing two different orders of data: “nodes” and “relationships”
    (note that the terminology may differ depending on the specific graph database
    technology). **Nodes** have their own existence independent of any schema or other
    data, although nodes can be categorized using “labels” (similar to how relational
    databases use “tables” and document-oriented databases use “collections” for categorization).
    **Relationships**, as the second order of graph data, are defined in terms of
    a source node and a target node, categorized by a type of relationship. Similar
    to documents in document-oriented databases, both nodes and relationships can
    have any number of properties represented as key-value pairs.'
  prefs: []
  type: TYPE_NORMAL
- en: Again, for people new to the jargon of digital data, the term “graph” can be
    a distraction from what is actually meaningful about this model type. Instead
    of common data visualizations such as “bar graph” or “line graph,” here the term
    graph refers to the fact that this data model type lends itself to a form of visual
    representation more akin to a mind-map of circles (as nodes) and lines (as relationships).
    It has been observed that this data model type is similar to how the human mind
    works, which not only has implications for [neuroscience](https://ercim-news.ercim.eu/en125/r-i/graph-based-management-of-neuroscience-data-representation-integration-and-analysis)
    and [artificial intelligence](https://www.zdnet.com/article/neo4j-ceo-why-graph-databases-and-ai-belong-together/),
    but also means graph data models are relatively easy to understand for less tech-savvy
    stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: Ironically, graph databases are actually *more relationship-oriented* than relational
    databases. While relational databases connect related data through matching primary
    and foreign keys across tables, relationships in graph databases have their own
    “existence” so to speak and therefore can be loaded with additional properties.
    The properties can speak to the strength, quality, duration, or any other characteristic
    of the relationship.
  prefs: []
  type: TYPE_NORMAL
- en: 'The leading graph database solution is [Neo4j](https://neo4j.com). Their community
    edition is [fully open source](https://neo4j.com/licensing/) and can be used for
    local- or self-hosting, and [the free cloud tier caps out at 200,000 nodes and
    400,000 relationships](https://neo4j.com/pricing/). The Neo4j query language,
    called “[Cypher](https://neo4j.com/docs/getting-started/cypher-intro/)”, is [free
    to learn](https://graphacademy.neo4j.com/categories/cypher/) and has a unique
    visual aspect that makes it easy for non-developers to understand. At present,
    the standardization of a Cypher-inspired “Graph Query Language” (or GQL) is [in
    the works](https://en.wikipedia.org/wiki/Cypher_(query_language)#Standardization)
    and is even considered as a step towards the United Nations’ [Sustainable Development
    Goal #9 of building resilient infrastructure, promoting inclusive and sustainable
    industrialization, and fostering innovation](https://www.iso.org/standard/76120.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Spreadsheet Diagnosis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If your organization’s data are currently contained within a spreadsheet, you
    should consider making the leap to a graph database especially if you are frequently
    contextualizing the data through notes, comments, and additional columns that
    exist only to describe the data in other columns.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/da8dcd20f2a064eb6d119ee37911a6a0.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Many of the cells in this spreadsheet have a “note” with important contextual
    data which can be revealed through moving the cursor to the cell. In Microsoft
    Excel, notes with cells are demarcated by a red triangle in the top-right corner,
    giving the spreadsheet a pepperjack cheese appearance.** [File available for download
    here](https://www.dropbox.com/s/6imt1mmg7ga983q/Graph%20Database%20Candidate%20-%20Power%20Mapping.xlsx?dl=0).
    Screen capture by author.'
  prefs: []
  type: TYPE_NORMAL
- en: The above example shows a [“power mapping”](https://en.wikipedia.org/wiki/Power_mapping)
    of an imaginary advocacy organization called Fayette Advocacy Network. A power
    map is used for tracking who is influential on a particular issue, their attitude
    towards that issue, and their relationship to the organization (however many degrees
    removed).
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the most interesting data in this graph isn’t in the cell values
    themselves but in the notes for each cell. For example: Councilwoman Nadia Carlson
    and editorial board member Julius Carlson are married. Scott Poor is not only
    the President of the Fayette Teachers Union but also an employee of Fayette Public
    Schools and an active member of Fayette Advocacy Network. Not only is it documented
    that Sheriff Ricardo Ortiz is against the Fayette Advocacy Network’s cause, but
    this is known because of a social media comment he made.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/22b059f704127aa24f411362b2825d2d.png)'
  prefs: []
  type: TYPE_IMG
- en: '**In this graph view, decision-makers are in blue, all other humans are in
    fuchsia, organizations are in green, stances on the issue are in grey, and the
    Fayette Advocacy Network gets it’s own big gold node. Relationships between these
    nodes are represented with arrows and are a valuable form of data in their own
    right.** [View in Arrows.app](https://drive.google.com/file/d/1eGh38T4oQO1obfK2lPMePEjPwBV6hUTQ/view?usp=sharing).'
  prefs: []
  type: TYPE_NORMAL
- en: Because a graph database can store relationships with properties, data relegated
    to notes in a spreadsheet can be featured prominently in a graph database. The
    graph model type improves the organization and accessibility of this valuable
    contextual information.
  prefs: []
  type: TYPE_NORMAL
- en: 'When looking at all the data at once it may appear to be a jumble. It is possible
    to narrow down the data by querying more specific questions like: “Who are the
    members of Fayette Advocacy Network that have a connection to a decision-maker
    whose position on the issue is still unknown?” For reference, a corresponding
    Cypher query is available below. Notice that it is relatively easy for a human
    to read this code that is primarily written for a computer to parse:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This query returns a list of `Person`s who are a `MEMBER_OF` “Fayette Advocacy
    Network” who also are `CONNECTED` to (or connected to someone connected to) `decisionmaker`s
    whose `Position` on the issue is “unknown.” Even if you do not know Cypher, you
    should be able to figure out how the query works after just a few minutes puzzling
    over what the various arrows and brackets mean.
  prefs: []
  type: TYPE_NORMAL
- en: 'For what it’s worth: to help make sense of the jumble, Neo4j also has a set
    of graph data science packages to help identify patterns and calculate common
    measures of node significance such as [degree centrality](https://en.wikipedia.org/wiki/Centrality#Degree_centrality)
    and [betweenness centrality](https://en.wikipedia.org/wiki/Centrality#Betweenness_centrality).
    Increasingly, there also are more and more software solutions becoming available
    for visualizing these graph data, ranging from Neo4j’s simple in-house solution
    [Bloom](https://neo4j.com/product/bloom/) all the way to [virtual reality headsets](https://mod.studio/rd/grapho/).
    Needless to say, such queries, calculations, and visualizations are next to impossible
    to do in a spreadsheet alone.'
  prefs: []
  type: TYPE_NORMAL
- en: Making the Leap to Databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The motivating principle behind this guide is to help you identify the appropriate
    technology for your data needs. Many times spreadsheets will actually be that
    appropriate technology: for storing non-relational data in a simple format, to
    collaborate with less tech-savvy users, to crunch some quick numbers, and even
    as a creative place for data-driven brainstorming and project planning. Spreadsheets
    work because they combine data entry, engineering, analysis, collaboration, and
    sharing all in a single space.'
  prefs: []
  type: TYPE_NORMAL
- en: But the convenience of having all these features bound together can also be
    what makes spreadsheets so restrictive for your data. The reality might be that
    you need the associations of a relational database, or the adaptability of a document-oriented
    database, or the contextualization of a graph database. This is true even if you
    have poured hundreds of hours into perfecting a single spreadsheet — in fact,
    the more time you invest in spreadsheet, the more likely it is the spreadsheet
    is holding you back.
  prefs: []
  type: TYPE_NORMAL
- en: “Spreadsheets look really good no matter what goes into them. Someone brings
    a spreadsheet into a meeting, it looks so precise. It’s got numbers and graphs
    and pretty fonts. It feels like it’s telling you exactly how the world is. It
    feels like truth.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — David Kastenbaum on [Spreadsheets!](https://www.npr.org/transcripts/389027988)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Spreadsheet jail happens because spreadsheets feel safe. Unlike database technologies,
    tools like Microsoft Excel and Google Sheets come bundled in home office suites
    and have the same familiar interfaces as our word processors and slideshow creators.
    Many of us first learned how to use spreadsheets in school, and sometimes wrangling
    a spreadsheet is the tie that binds together colleagues. [Even on TikTok, communities
    are popping up dedicated to mastering the art of spreadsheets](https://www.insider.com/tiktok-influencer-excel-spreadsheets-viral-miss-video-2021-12).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/073ffb387ec84451f2fb56e6432549f8.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Making the leap.** Photo illustration by author. [Photo](https://unsplash.com/photos/Zdf3zn5XXtU)
    by [Sammie Chaffin](https://unsplash.com/@sammiechaffin?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/Zdf3zn5XXtU?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To liberate our data from spreadsheet jail requires a leap of faith. We have
    to believe that the benefits of a particular database model will outweigh the
    risks that come with adopting an unfamiliar technology. The good news is that
    we have room for error: it is easier to fix a messy database through a few lines
    of code than it is to fix clunky spreadsheets through hundreds of mouse clicks.
    Furthermore, choosing the wrong database technology to start with is far from
    the end of the world: once a spreadsheet has been re-organized into tables (for
    relational), collections (for document-oriented), or labels (for graph) it is
    much easier to translate between the three paradigms.'
  prefs: []
  type: TYPE_NORMAL
- en: However, there might be an even more important reason to escape spreadsheet
    jail. As we liberate our data from spreadsheets, we also liberate our imaginations
    about what data are and how data can be utilized throughout an organization. Looking
    up and entering data goes from being a time-suck chore to becoming a contribution
    to an increasingly exciting and valuable store of information. Our data goes from
    being a clumsily-held internal secret to a living center of collaboration for
    team members and external partners.
  prefs: []
  type: TYPE_NORMAL
- en: Take one more hard look at your data. If spreadsheet jail is keeping you from
    achieving your goals, it is time to take a deep breath and make a courageous leap
    into the world of databases!
  prefs: []
  type: TYPE_NORMAL
- en: '*My goal is to bridge the gap between digital data and “real world” organizations.
    If you appreciated this guide, these are ways you can support this & future writings:*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Read some of* [*my other posts*](https://medium.com/@kalebnyquist)*. If you
    liked the examples in this piece, you will also enjoy* [*“5 Best Practices for
    Nonprofit Data Management”*](/nonprofit-data-management-cb1e4dd2cf0c?sk=99858b06e21758adccb45f082482d508)
    *where I diagnose yet another type of problematic spreadsheet: the color-coded
    carrier of implicit data.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Get more Medium content by* [*becoming a member via my referral page*](https://medium.com/@kalebnyquist/membership)*.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Sign up for* [*a free Airtable account through my invite link*](https://airtable.com/invite/r/9jyJBxR8)*.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Interested in leveling up your data science, cybersecurity, software engineering,
    or product design skills? Sign up to* [*get more information on the Flatiron School
    through my alumni referral link*](https://flatironschool.com/scholarships/2022q2ar/?utm_campaign=ec2a7f51-e911-403e-8e92-50950d9f7c32&utm_source=emailbatch&utm_medium=email&utm_term=txtlink)*.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Send a tip through* [*BuyMeACoffee.com*](https://www.buymeacoffee.com/kalebnyq)
    *or* [*Ko-fi.com*](https://ko-fi.com/kalebnyquist)*.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
