- en: Optimize Your Marketing Budget with Nonlinear Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://towardsdatascience.com/the-art-of-spending-optimizing-your-marketing-budget-with-nonlinear-optimization-6c8a39afb3c2](https://towardsdatascience.com/the-art-of-spending-optimizing-your-marketing-budget-with-nonlinear-optimization-6c8a39afb3c2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introduction to CVXPY to maximize marketing ROI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@mlabonne?source=post_page-----6c8a39afb3c2--------------------------------)[![Maxime
    Labonne](../Images/a7efdd305e3cc77d5509bbb1076d57d8.png)](https://medium.com/@mlabonne?source=post_page-----6c8a39afb3c2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6c8a39afb3c2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6c8a39afb3c2--------------------------------)
    [Maxime Labonne](https://medium.com/@mlabonne?source=post_page-----6c8a39afb3c2--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Â·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6c8a39afb3c2--------------------------------)
    Â·9 min readÂ·May 22, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9c6e46125f31204083c5d703d3c90cd5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: In the age of digital marketing, businesses face the challenge of allocating
    their marketing budget across multiple channels to maximize sales.
  prefs: []
  type: TYPE_NORMAL
- en: However, as they broaden their reach, these firms inevitably face the issue
    of **diminishing returns** â€” the phenomenon where additional investment in a marketing
    channel yields progressively smaller increases in conversions. This is where the
    concept of marketing budget allocation steps in, adding another layer of complexity
    to the whole process.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, weâ€™re going to explore the potential of nonlinear programming,
    specifically conic optimization (or cone programming), as a tool for marketing
    budget allocation. With the use of this advanced mathematical technique, we aim
    to optimize the distribution of marketing budget across various platforms to extract
    the maximum value and the highest possible ROI.
  prefs: []
  type: TYPE_NORMAL
- en: The code is available on [GitHub](https://github.com/mlabonne/linear-programming-course/blob/main/4_Maximize_Your_Marketing_ROI_with_Nonlinear_Optimization.ipynb)
    and [Google Colab](https://colab.research.google.com/drive/1V7z8giemuTk92s_JMxIyr1Clr2TwY7xl?usp=sharing).
  prefs: []
  type: TYPE_NORMAL
- en: '**ðŸ’° Marketing budget allocation**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Marketing budget allocation is a critical aspect of any advertising campaign,
    requiring businesses to strategically distribute their resources across different
    channels. The goal is to maximize the effectiveness of their marketing efforts
    and achieve the highest possible return on investment (ROI). To tackle this challenge,
    we need to consider three key components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Attribution**: How can we connect conversion events to specific campaigns?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Performance Estimation**: How can we predict the performance of a campaign
    based on its allocated budget?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Optimization**: How can we allocate budgets across various campaigns to maximize
    ROI?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ðŸ”— 1\. Attribution: Connecting Conversions to Campaigns**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Attribution is the process of determining which campaigns are responsible for
    converting customers. Some channels, like Facebook or AdWords, can directly claim
    conversions. However, there are various attribution models to consider, including:'
  prefs: []
  type: TYPE_NORMAL
- en: First touch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Last touch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-touch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time decay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Position-based
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Attribution systems are not without their issues, with two main challenges:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lag**: The time it takes to measure the performance of ads and attribute
    conversions accurately'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attribution Window**: The trade-off between using a short versus a long window
    to attribute conversions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, DoorDash used a several-day last-touch attribution system. The
    problem they faced was the need to wait for several days to measure the performance
    of their ads, which proved too lengthy given the rapid changes in their market.
  prefs: []
  type: TYPE_NORMAL
- en: '**ðŸ”® 2\. Performance Estimation: Predicting Campaign Success**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Performance estimation involves creating a model that can predict the success
    of a marketing campaign based on its budget allocation. Here, success can be defined
    in terms of various Key Performance Indicators (KPIs), such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Leads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cost per Lead (CPL)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customer Lifetime Value (CLV)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customer Acquisition Cost (CAC)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traditionally, linear models have been used for performance estimation. However,
    they assume that marketing channels **donâ€™t exhibit diminishing returns**, which
    is often not the case. To obtain nontrivial solutions, linear models typically
    incorporate multiple constraints and are solved using Linear Programming (LP).
  prefs: []
  type: TYPE_NORMAL
- en: 'In reality, response curves in marketing mix modeling often display different
    shapes, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Linear (rare)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concave (common, indicating diminishing returns)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convex (rare)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: S-shaped (rare)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/82bd2811cf9144307b11f0ec11863977.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: These shapes reflect the **diminishing returns** of marketing spending or the
    varying effectiveness of different channels at different budget levels. For example,
    investing more money into a channel might initially yield higher returns (convex),
    but after a certain point, each additional dollar may generate less and less incremental
    outcome (becoming concave), creating an S-shaped curve overall.
  prefs: []
  type: TYPE_NORMAL
- en: To capture the intrinsic nonlinearity of the marketing budget allocation problem,
    a more sophisticated approach is needed. This is where nonlinear programming,
    specifically conic optimization, comes into play.
  prefs: []
  type: TYPE_NORMAL
- en: '**ðŸ”„ 3\. Optimization: Nonlinear Optimization with CVXPY**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nonlinear programming, also known as nonlinear optimization, is a method used
    to solve optimization problems where the **objective function, constraints**,
    or both, are **nonlinear**. In simple terms, itâ€™s the process of finding the optimal
    solution (either maximizing or minimizing) for a system thatâ€™s governed by a set
    of nonlinear equations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will model the returns for each marketing channel (response
    curve) using the natural logarithm as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1e43056e71101f59b5986102a15dd295.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The two previous steps of attribution and performance estimation approximate
    the values of Î±áµ¢ and Î²áµ¢ for every channel *i*. Letâ€™s take a simple example with
    three channels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c7d34d36da0d39ee581f3a382b6f0af2.png)'
  prefs: []
  type: TYPE_IMG
- en: The noise observed in these values is typical in marketing budget allocation
    problems. Note that the alpha values are **negative**; this can be interpreted
    as the initial cost of engaging with a new marketing channel.
  prefs: []
  type: TYPE_NORMAL
- en: We can plot the response curves of each marketing channel using matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3881087558c5d8065c94b246c48406be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'How to find the best values for each response curve? The easiest solution consists
    of a greedy algorithm that randomly samples values and evaluates the result. Our
    optimization problem can be described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d2b159a17a392c4e6fad54809afd5732.png)'
  prefs: []
  type: TYPE_IMG
- en: The following function has a budget of 1,000 iterations to find the best allocation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Letâ€™s run it and see the approximated solution it found:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: After running our calculations, we find that our total return is $224,533\.
    You might wonder if we can improve it by tweaking our model more or running more
    iterations.
  prefs: []
  type: TYPE_NORMAL
- en: 'This kind of guarantee is exactly where nonlinear programming comes to the
    rescue: it can output the **best solution possible**, also called the optimal
    solution. On top of this overwhelming advantage, it is also faster to run.'
  prefs: []
  type: TYPE_NORMAL
- en: To solve the marketing budget allocation problem using nonlinear programming,
    weâ€™ll use the [**CVXPY**](https://www.cvxpy.org/) library, which supports conic
    optimization thanks to specialized solvers like [ECOS](https://github.com/embotech/ecos),
    [MOSEK](https://www.mosek.com/) (interior point method), and [SCS](https://github.com/cvxgrp/scs)
    (first-order method). In this example, weâ€™ll use the open-source ECOS solver to
    find the optimal solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâ€™s set up the optimization problem:'
  prefs: []
  type: TYPE_NORMAL
- en: Our decision **variables** are the (positive) budgets for each channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our **constraint** is that the sum of all budgets must not exceed the total
    budget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our **objective** is to maximize the total return, which is the sum of the returns
    for each channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we call the ECOS solver to find the optimal budget allocations and
    display the results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The optimal allocation found by the solver is $34,439 for Google Ads, $32,386
    for Facebook Ads, and $33,175 for YouTube, for a total return of $224,540! This
    is **$7 higher than what the greedy algorithm returned** ($224,533).
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep in mind that this allocation maximizes the returns based on our response
    curves: correctly modeling these curves is crucial for optimizing the budget effectively.'
  prefs: []
  type: TYPE_NORMAL
- en: Letâ€™s visualize this optimal allocation on top of the previous response curves.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c893d512a891789f81b6804edf7b0823.png)'
  prefs: []
  type: TYPE_IMG
- en: But is it **really optimal**? We can do a quick sanity check by running the
    greedy algorithm for different numbers of iterations. This will show us the difference
    between these two approaches.
  prefs: []
  type: TYPE_NORMAL
- en: Letâ€™s run it for 20 different numbers of iterations between 1 and 1,000,000.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now plot the resulting list using matplotlib and compare it to the optimal
    solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4f2f5ff668152d2c1a252b6e29c03ba5.png)'
  prefs: []
  type: TYPE_IMG
- en: We observe that the greedy algorithm performs relatively well when given a large
    number of iterations. However, despite one million attempts, it falls just short
    of finding the optimal allocation, which yields a return of $224,540.1500\. The
    best non-rounded value it could reach is $224,540.1489.
  prefs: []
  type: TYPE_NORMAL
- en: To add to this, thereâ€™s a significant difference in terms of **computational
    speed** between the two approaches. The nonlinear programming model identified
    the optimal solution in a swift 22.3 milliseconds. In stark contrast, the greedy
    algorithm took a considerable 30 seconds to run its 1 million iterations and find
    a nearly optimal solution.
  prefs: []
  type: TYPE_NORMAL
- en: This disparity becomes even more crucial when we extend our problem to **numerous
    marketing channels**. Nonlinear programming with CVXPY maintains its speed and
    precision, making it a highly efficient tool for complex, high-dimensional marketing
    budget allocation problems.
  prefs: []
  type: TYPE_NORMAL
- en: '**Conclusion**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nonlinear programming offers a powerful approach to tackling the marketing budget
    allocation problem. By modeling the diminishing returns of each marketing channel
    with **nonlinear functions** and leveraging the CVXPY library, we can find the
    optimal allocation of resources that maximizes sales.
  prefs: []
  type: TYPE_NORMAL
- en: As the marketing landscape evolves and the number of channels increases, optimization
    techniques like nonlinear programming can help businesses make better, data-driven
    decisions about their marketing investments. While this article provides a starting
    point, there are many more advanced techniques and models to explore. Keep learning
    and experimenting to find the best approach for your business.
  prefs: []
  type: TYPE_NORMAL
- en: If youâ€™re interested to know more about it, feel free to follow me on Twitter
    [@maximelabonne](https://twitter.com/maximelabonne). Happy optimizing!
  prefs: []
  type: TYPE_NORMAL
- en: '**References**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to learn more about marketing budget allocation, I recommend the
    following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Park et al., [A Nonlinear Optimization Model of Advertising Budget Allocation
    across Multiple Digital Media Channels](https://scholarspace.manoa.hawaii.edu/server/api/core/bitstreams/ea6310e7-8ef8-4335-9625-b82b11042797/content)
    (2022): an excellent approach based on diminishing returns, which inspired this
    article.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Zhao et al., [A Unified Framework for Marketing Budget Allocation](https://arxiv.org/pdf/1902.01128.pdf)
    (2019): fascinating architecture currently in production at Alibaba, based on
    a logit response curve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Katsov, [Cross-channel marketing spend optimization using deep learning](https://blog.griddynamics.com/cross-channel-marketing-spend-optimization-deep-learning/)
    (2019): blog post about an intriguing LSTM-based approach, without convex optimization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Related articles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[](/introduction-to-linear-programming-in-python-9261e7eb44b?source=post_page-----6c8a39afb3c2--------------------------------)
    [## Introduction to Linear Programming in Python'
  prefs: []
  type: TYPE_NORMAL
- en: A guide to mathematical optimization with Google OR-Tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/introduction-to-linear-programming-in-python-9261e7eb44b?source=post_page-----6c8a39afb3c2--------------------------------)
    [](/integer-programming-vs-linear-programming-in-python-f1be5bb4e60e?source=post_page-----6c8a39afb3c2--------------------------------)
    [## Integer vs. Linear Programming in Python
  prefs: []
  type: TYPE_NORMAL
- en: A guide to identify and solve any optimization problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/integer-programming-vs-linear-programming-in-python-f1be5bb4e60e?source=post_page-----6c8a39afb3c2--------------------------------)
  prefs: []
  type: TYPE_NORMAL
