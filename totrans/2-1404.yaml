- en: 'Learning Math Through Code: Derivatives'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/learning-math-through-code-derivatives-bbcd2df166d3](https://towardsdatascience.com/learning-math-through-code-derivatives-bbcd2df166d3)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Gain a deeper understanding of derivatives with Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://harrisonfhoffman.medium.com/?source=post_page-----bbcd2df166d3--------------------------------)[![Harrison
    Hoffman](../Images/5eaa3e2bd0507297eb6c4a7efcf06324.png)](https://harrisonfhoffman.medium.com/?source=post_page-----bbcd2df166d3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bbcd2df166d3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bbcd2df166d3--------------------------------)
    [Harrison Hoffman](https://harrisonfhoffman.medium.com/?source=post_page-----bbcd2df166d3--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bbcd2df166d3--------------------------------)
    ·5 min read·Mar 20, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c8e5f9d8443fa9c5a1bd237257397a82.png)'
  prefs: []
  type: TYPE_IMG
- en: Team Leibniz. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Mathematics is a notoriously difficult subject for many. Because of its cumulative
    and abstract nature, students can find it challenging to make connections and
    understand how math is applied. In my ongoing journey, I’ve found it extremely
    helpful to enhance my understanding of math concepts by implementing them in code.
  prefs: []
  type: TYPE_NORMAL
- en: Coding demands precision because computers can only execute a specific set of
    instructions. The need for exactness requires a logical and systematic approach
    to problem-solving, which can be incredibly beneficial for understanding the underlying
    concepts. Through coding, we can develop a more profound intuition for the idea
    being implemented. Moreover, coding allows us to experiment with, visualize and
    automate mathematical concepts in an interactive and hands-on way, which can bring
    theoretical concepts to life and enhance our learning experience.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will try to gain a better understanding of derivatives by
    implementing the “forward difference quotient” approximation in python. While
    this is a simple implementation requiring little code, it gets to the heart of
    what derivatives represent.
  prefs: []
  type: TYPE_NORMAL
- en: What is a derivative?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s begin by stating the definition of the derivative. Because there are
    plenty of freely available resources on derivatives, this explanation will not
    be comprehensive. The derivative of a function f(x) with respect to x is defined
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ef8ebfb5eb61371d186b6278ca09e135.png)'
  prefs: []
  type: TYPE_IMG
- en: The definition of a derivative in one dimension. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The derivative tells us, at a single point, the *direction* and *rate* at which
    a function is changing. By picking two points x and x + h, computing the slope
    of the function between the two points (i.e. (f(x+h) — f(x)) / h), and allowing
    h to get infinitely close to 0, we recover the instantaneous rate of change (the
    derivative) of the function at x.
  prefs: []
  type: TYPE_NORMAL
- en: Approximating Derivatives in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most abstract and perhaps difficult-to-understand component of the derivative
    is that h gets infinitely close to 0 without actually reaching 0\. We can write
    a function in python that approximates this idea:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This function takes in a [pure function](https://en.wikipedia.org/wiki/Pure_function#:~:text=In%20computer%20programming%2C%20a%20pure,arguments%20or%20input%20streams)%2C%20and)
    of a single variable, and approximates the derivative at the point(s) specified
    in the x argument. The actual logic of this function resides in a single line
    of code, yet it approximates many derivatives within a tolerable error.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see this in action, let’s approximate the derivative of the quadratic function.
    By the power rule (or by computing the limit of the difference quotient), we know
    that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/741adf72fb3150c04e2949019c432f34.png)'
  prefs: []
  type: TYPE_IMG
- en: The derivative of the quadratic function. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, the derivative of the function at x = 3 is 2*3 = 6\. The following
    code approximates the derivative of the quadratic function at x = 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'By setting h to be a small positive number close to 0, we extract an approximation
    to the derivative which is close to the true value. As h gets smaller (up to a
    [certain tolerance](https://acme.byu.edu/0000017a-17ef-d8b9-adfe-77ef210e0000/vol1b-numericalderivatiation-2017-pdf)),
    the approximation gets more accurate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can visualize this behavior for decreasing values of h:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/093fc26d3d0ef32cf7ba07fe23c25682.png)'
  prefs: []
  type: TYPE_IMG
- en: As the value of h decreases, the derivative approximation gets more accurate
    (converging towards 6). Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another interesting example involves the trigonometric functions. From the
    definition of the derivative, we [know the following](https://www.youtube.com/watch?v=HVvCbnrUxek):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/860edfc457250e1606013244a887a234.png)'
  prefs: []
  type: TYPE_IMG
- en: The derivative of sin(x) is cos(x). Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the derivative function, we can approximate this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/128d33bfbf1785f902f978309f5a35f0.png)'
  prefs: []
  type: TYPE_IMG
- en: The approximated derivative of sin(x) resembles cos(x). Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The derivative approximation implemented in this article is known as the “forward
    difference quotient” and is one of many ways to perform numerical differentiation.
    It’s important to note that this approximation is imperfect, as it tends to [break
    down](https://acme.byu.edu/0000017a-17ef-d8b9-adfe-77ef210e0000/vol1b-numericalderivatiation-2017-pdf)
    for small values of h. Moreover, in practice, we can compute exact derivatives
    of close-form functions, removing the need for approximations. The purpose of
    this article was to help the reader see how the math plays out through code and
    hopefully increase their intuition for derivatives. I would encourage the reader
    to test the code on different functions, explore other derivative approximations,
    and understand the respective strengths and weaknesses. Thanks for reading!
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '***Numerical Derivatives***— [https://acme.byu.edu/0000017a-17ef-d8b9-adfe-77ef210e0000/vol1b-numericalderivatiation-2017-pdf](https://acme.byu.edu/0000017a-17ef-d8b9-adfe-77ef210e0000/vol1b-numericalderivatiation-2017-pdf)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
