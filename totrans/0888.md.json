["```py\nimport qiskit.tools.jupyter\n\n%qiskit_version_table\n%qiskit_copyright\n```", "```py\nfrom sklearn.svm import SVC\n\nsvc = SVC()\nmodel_classical = svc.fit(train_features, train_labels) \n```", "```py\n num_features = features.shape[1] #5\n\nfeature_map = ZZFeatureMap(feature_dimension=num_features, reps=1)\nfeature_map.decompose().draw(output=\"mpl\", fold=20)\n```", "```py\nfrom qiskit.circuit.library import RealAmplitudes\n\nansatz = RealAmplitudes(num_qubits=num_features, reps=3)\nansatz.decompose().draw(output=\"mpl\", fold=20)\n```", "```py\noptimizer = COBYLA(maxiter=100)\n\nvqc = VQC(\n    sampler=sampler,\n    feature_map=feature_map,\n    ansatz=ansatz,\n    optimizer=optimizer,\n    callback=callback_graph,\n)\n\nvqc.fit(train_features, train_labels)\n```", "```py\ntrain_score_q4 = vqc.score(train_features, train_labels)\ntest_score_q4 = vqc.score(test_features, test_labels)\n\nprint(\"Quantum VQC on the training dataset:\",train_score_q4)\nprint(\"Quantum VQC on the test dataset:\", test_score_q4)\n```", "```py\nkmeans = KMeans(n_clusters=5).fit(train)\nclustering_labels = kmeans.labels_\nX_train = train.sample(frac=0.05)\n\nclusters['cluster'] = clustering_labels\n\nfig = plt.figure(figsize = (20,20))\nax.scatter(X_train.X, X_train.Y, X_train.Z, c=X_train.cluster)\nplt.show()\n```"]