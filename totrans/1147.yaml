- en: How to Create Cyberpunk-Styled Seaborn Violin Plots with Minimal Python Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-create-cyberpunk-styled-seaborn-violin-plots-with-minimal-python-code-45897b82ed4c](https://towardsdatascience.com/how-to-create-cyberpunk-styled-seaborn-violin-plots-with-minimal-python-code-45897b82ed4c)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A simple tutorial on how to enhance your Seaborn violin plots with ease
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----45897b82ed4c--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----45897b82ed4c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----45897b82ed4c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----45897b82ed4c--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----45897b82ed4c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----45897b82ed4c--------------------------------)
    ·6 min read·Jun 26, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/284478862de6863165b69a286d6f6a82.png)'
  prefs: []
  type: TYPE_IMG
- en: Cyberpunked seaborn violin plots showing density variations for different lithologies
    encountered within a well. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Violin plots are a common data visualisation that combines the power of a boxplot
    and a density plot into a single plot. This allows us to visualise more information
    within a single figure. For example, we can view the basic statistics from the
    boxplot, identify possible outliers, and view the distribution of that data. This
    can help us understand if the data is skewed or contains multi-modal distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Within my latest series of articles, I have been exploring ways to improve and
    enhance basic matplotlib figures using various themes, including a cyberpunk style.
    This style provides a futuristic neon-like appearance to the plots and only requires
    a couple of lines of code to apply to matplotlib and seaborn figures.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn more, you can see how I applied it to matplotlib figures
    in the article below.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/cyberpunking-your-matplotlib-figures-96f4d473185d?source=post_page-----45897b82ed4c--------------------------------)
    [## Cyberpunking Your Matplotlib Figures'
  prefs: []
  type: TYPE_NORMAL
- en: Taking Your Matplotlib Figures from Boring to Interesting with a Few Lines of
    Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/cyberpunking-your-matplotlib-figures-96f4d473185d?source=post_page-----45897b82ed4c--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Within this short tutorial, we will take the basic seaborn violin plot and cyberpunk
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries and Loading Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start by importing the libraries we will work within this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: These are [**matplotlib**](https://matplotlib.org/) and [**seaborn**](https://seaborn.pydata.org/)
    for visualising our data, [**pandas**](https://pandas.pydata.org/) for loading
    and storing our data, and [**mplcyberpunk**](https://github.com/dhaitz/mplcyberpunk)
    for applying the cyberpunk theme to the seaborn chart.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After importing the required libraries, the next step we need to carry out is
    to load our data. This is done using the `read_csv()` function from pandas and
    passing in the location of the data file.
  prefs: []
  type: TYPE_NORMAL
- en: The data we are going to be using is a subset of the combined [**XEEK and Force
    2020 Machine Learning competition**](https://xeek.ai/challenges/force-well-logs)
    that was aimed at predicting lithology from well log measurements. Further details
    of this dataset can be found at the end of the article.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c13c655d340483a968bbeae546458a3b.png)'
  prefs: []
  type: TYPE_IMG
- en: Pandas dataframe containing well log measurements for well 15/19–15\. Image
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: When we view the dataframe ( `df` ) we get the above image. We can see that
    we have a single well’s worth of data extending from 485m down to 3200m.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Seaborn Violin Plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the dataframe, we are going to use two columns. The RHOB column, which
    contains the Bulk Density measurements, and the LITH column, which contains the
    lithological descriptions.
  prefs: []
  type: TYPE_NORMAL
- en: We can call upon the following code to create the basic violin plot.
  prefs: []
  type: TYPE_NORMAL
- en: We first set the figure size to 10 x 5, which will give us a decent-sized figure
    to look at, and then we call upon `sns.violinplot()` and pass in the required
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we get back the following plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1601d24e5ed91d0d6b1d4ce3235953af.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic seaborn violin plot showing variation in Bulk Density (RHOB) with each
    lithology. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: At first glance, the returned plot looks good and useable, however, we can improve
    the style using the `mplcyberpunk` library.
  prefs: []
  type: TYPE_NORMAL
- en: Applying Cyberpunk Style to Seaborn Figures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To apply the cyberpunk style to our plot, all we need to do is add an extra
    line to the code. This line of code uses a with statement and then calls upon
    `plt.style.context` and it allows us to apply the style just to the plot that
    is being called beneath this line rather than changing the global style for all
    plots.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When we run the code above, we will get the following violin plot which has
    most of the cyberpunk theme applied.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/febf6433b67ee1b17fe8ef028ca6d182.png)'
  prefs: []
  type: TYPE_IMG
- en: Seaborn violin plot after applying the mplcyberpunk theme. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: One of the processes that the [**mplcyberpunk**](https://pypi.org/project/mplcyberpunk/)
    library should do is change the colours of the violins. However, in our case,
    this hasn’t been applied. But it can easily be fixed.
  prefs: []
  type: TYPE_NORMAL
- en: We need to create a list of the cyberpunk colours to fix it. These colours were
    extracted from the mplcyberpunk source code, but they can be changed to any colours
    you want. Remember, if you are going for cyberpunk styling, we would likely use
    bright neon colours.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to creating a list of colours, we can also sort the order of the
    violins so that they are in alphabetical order. This is an optional step, but
    a good one, especially when comparing multiple datasets with the same categories.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To apply the colours to the files, we can pass `my_pal` into the palette parameter
    for the violin plot.
  prefs: []
  type: TYPE_NORMAL
- en: However, to apply the same colour to the edges/lines of the plots, we need to
    access collections, which store a list of all the parts of the violin plot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within this list, every two consecutive items correspond to one violin: the
    first is the body of the violin, and the second is the mini box plot.'
  prefs: []
  type: TYPE_NORMAL
- en: Therefore we need to account for this in our for loop.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we get back the following plot with our cyberpunk
    violins.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3b191cdf274bf8dc50a4f1e88d840e9c.png)'
  prefs: []
  type: TYPE_IMG
- en: Cyberpunked seaborn violin plot for different lithologies encountered within
    a well. Image by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are able to control the lines and the colours of our plot, we can
    make a few final tweaks by changing the alpha of fill to make it slightly brighter
    and increasing the size of our x and y-axis labels.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/284478862de6863165b69a286d6f6a82.png)'
  prefs: []
  type: TYPE_IMG
- en: Cyberpunked seaborn violin plot for different lithologies encountered within
    a well. Image by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The [**mplcyberpunk**](https://github.com/dhaitz/mplcyberpunk) library provides
    a quick and easy way to instantly transform your plots from the default styling
    to something that has a futuristic appearance.
  prefs: []
  type: TYPE_NORMAL
- en: When creating graphics like this, it is always important to consider your audience
    and ensure that the message and story you are trying to convey is still clear.
  prefs: []
  type: TYPE_NORMAL
- en: Dataset Used in this Tutorial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Subset of a training dataset used as part of a Machine Learning competition
    run by Xeek and FORCE 2020 *(Bormann et al., 2020)*. This dataset is licensed
    under Creative Commons Attribution 4.0 International.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full dataset can be accessed at the following link: [https://doi.org/10.5281/zenodo.4351155](https://doi.org/10.5281/zenodo.4351155).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Secondly, you can get the full Medium experience and support thousands of
    other writers and me by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the fantastic Medium articles, as well as the
    chance to make money with your writing.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support.*'
  prefs: []
  type: TYPE_NORMAL
