["```py\npip install pykeen -q # install PyKEEN library\n```", "```py\nfrom pykeen.datasets import Countries\nimport pandas as pd\n\n# read data from pykeen dataset method\ndf = pd.DataFrame(Countries().training.triples)\ndf.columns = ['h', 'r', 't']\ndf.sample(10)\n```", "```py\nfrom pykeen.triples import TriplesFactory\nfrom pykeen.pipeline import pipeline\n\n# Generate triples from the graph data\ntf = TriplesFactory.from_labeled_triples(df.values)\n\n# split triples into train and test\ntraining, testing = tf.split([0.8, 0.2], random_state=42)\n\n# generate embeddings using PyKEEN's pipeline method\nresult = pipeline(\n        training=training,\n        testing=testing,\n        model = \"TransR\",\n        model_kwargs=dict(embedding_dim=128),\n        training_kwargs=dict(num_epochs=200),\n        random_seed=42)\n```", "```py\n# get entity labels from training set\nentity_labels = training.entity_labeling.all_labels()\n# convert entities to ids\nentity_ids = torch.as_tensor(training.entities_to_ids(entity_labels))\n# retrieve the embeddings using entity ids\nentity_embeddings = result.model.entity_representations[0](indices=entity_ids)\n# create a dictionary of entity labels and embeddings\nentity_embeddings_dict = dict(zip(entity_labels, entity_embeddings.detach().numpy()))\n```", "```py\n# get relation labels from training set\nrelation_labels = training.relation_labeling.all_labels()\n# convert relations to ids\nrelation_ids = torch.as_tensor(training.relations_to_ids(relation_labels))\n# retrieve the embeddings using relation ids\nrelation_embeddings = result.model.relation_representations[0](indices=relation_ids)\n# create a dictionary of relation labels and embeddings\nrelation_embeddings_dict = dict(zip(relation_labels, relation_embeddings.detach().numpy()))\n```", "```py\n# create a train df\ndf_train = pd.DataFrame(training.triples)\ndf_train.columns = ['h','r','t']\n# create a test df\ndf_test = pd.DataFrame(testing.triples)\ndf_test.columns = ['h','r','t']\n```", "```py\nfrom pykeen import predict\n\n# tail prediction\npredict.predict_target(model=result.model,\n                       head=\"mexico\",\n                       relation=\"neighbor\",\n                       triples_factory=result.training).df.head(20)\n```", "```py\nrank_metrics = result.metric_results.to_df()\nrank_metrics[rank_metrics.Metric=='arithmetic_mean_rank']\n```"]