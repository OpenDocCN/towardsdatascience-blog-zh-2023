["```py\ndf_total = pd.read_csv('data/co2_total.csv')\ndf_total_2021 = df_total[df_total['Year']==2021]\n```", "```py\ncol = 'Annual CO₂ emissions'\nmax = df_total_2021[col].max()\nmin = df_total_2021[col].min()\n```", "```py\nfig = px.choropleth(df_total_2021, \n                    locations=\"Code\",\n                    color=col,\n                    hover_name=\"Entity\",\n                    range_color=(min,max)\n                    )\n```", "```py\nfig = px.choropleth(df_total_2021, \n                    locations=\"Code\",\n                    scope = 'europe',\n                    color=col,\n                    hover_name=\"Entity\",\n                    range_color=(min,max),\n                    title = 'Europe'\n                    )\n```", "```py\nimport streamlit as st\nimport pandas as pd\nimport plotly.express as px\nimport json\n\nst.title(\"Population of Australian States\")\nst.info(\"Hover over the map to see the names of the states and their population\")\nf = open('geo/australia.geojson')\noz = json.load(f)\n\ndf = pd.read_csv('data/Australian Bureau of Statistics.csv')\nfig = px.choropleth(df, geojson=oz, \n                    color=\"Population at 31 March 2023 ('000)\",\n                    locations=\"State\", \n                    featureidkey=\"properties.name\",\n                    color_continuous_scale=\"Reds\",\n                    range_color=(0, 10000),\n                    fitbounds = 'geojson',\n                    template = 'plotly_white'\n                   )\nst.plotly_chart(fig)\n```", "```py\ndf = pd.read_csv('data/europop.csv')\n\nfig = px.scatter_geo(df, scope = 'europe', \n                    color=\"Population (historical estimates)\",\n                    size=\"Population (historical estimates)\",\n                    locations=\"Code\", \n                    hover_name = 'Entity',\n                    color_continuous_scale=\"Purples\",\n                    range_color=(0, 100000000),\n                    fitbounds = 'locations',\n                    template = 'plotly_white',\n                    title = \"European populations\"\n                   )\n\nst.plotly_chart(fig)\n```", "```py\nfig = px.choropleth(df_total[df_total['Year']==year], \n                    locations=\"Code\",\n                    color=col,\n                    hover_name=\"Entity\",\n                    range_color=(min,max),\n                    scope= 'world',\n                    projection=\"orthographic\",\n                    color_continuous_scale=px.colors.sequential.Reds)\nst.plotly_chart(fig)\n```", "```py\nimport streamlit as st\nimport pandas as pd\nimport plotly.express as px\n\nst.set_page_config(layout=\"wide\")\n\nst.title(\"CO2 Emissions\")\nst.write(\"\"\"The following maps display the CO2 emissions for a\n            range of countries over a range of time\"\"\")\n\nst.info(\"\"\"Use the slider to select a year to display\n           the total emissions for each country. \n           Scroll down to see an interactive 3D representation.\"\"\")\n\ncol1, col2 = st.columns(2)\n\ndf_total = pd.read_csv('data/co2_total.csv')\ncol = 'Annual CO₂ emissions'\nmax = df_total[col].max()\nmin = df_total[col].min()\n\n# To get the whole range replace 1950 with the comment that follows it\nfirst_year = 1950 #df_total['Year'].min()\nlast_year = df_total['Year'].max()\nyear = st.slider('Select year',first_year,last_year, key=col)\n\ncol1.write(\"\"\"This map uses the 'Natural Earth' projection\"\"\")\nfig = px.choropleth(df_total[df_total['Year']==year], \n                    locations=\"Code\",\n                    color=col,\n                    hover_name=\"Entity\",\n                    range_color=(min,max),\n                    scope= 'world',\n                    projection=\"natural earth\",\n                    color_continuous_scale=px.colors.sequential.Reds)\ncol1.plotly_chart(fig)\n\ncol2.write(\"\"\"This map uses the 'Orthographic' projection.\nClick on the globe and move the pointer to rotate it.\n\"\"\")\n\nfig = px.choropleth(df_total[df_total['Year']==year], locations=\"Code\",\n                    color=col,\n                    hover_name=\"Entity\",\n                    range_color=(min,max),\n                    scope= 'world',\n                    projection=\"orthographic\",\n                    color_continuous_scale=px.colors.sequential.Reds)\ncol2.plotly_chart(fig)\n```", "```py\n # add/subtract from the selected countries\n    c = st.multiselect('Add a country:', countries, default=['United States', 'China', 'Russia', 'Germany'])\n    tab1, tab2 = col2.tabs([\"Graph\", \"Table\"])\n\n    with tab1:\n        # plot a line graph of emissions for selected countries\n        fig = px.line(df_total[df_total['Entity'].isin(c)], x='Year', y='Annual CO₂ emissions', color = 'Entity')\n        st.plotly_chart(fig, use_container_width=True)\n    with tab2:\n        table = df_total[df_total['Year']==st.session_state['year']]\n        st.dataframe(table[table['Entity'].isin(c)], use_container_width=True)\n```"]