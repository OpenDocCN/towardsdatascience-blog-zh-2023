["```py\nimport math\nfrom string import punctuation\nimport urllib.request\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nimport seaborn as sns\n\nimport nltk\n\nPUNCT_SET = set(punctuation)\n```", "```py\ndef text_to_string(url):\n    \"\"\"Read a text file from a URL and return a string.\"\"\"\n    with urllib.request.urlopen(url) as response:\n        data = response.read()  # in bytes\n        txt_str = data.decode('utf-8')  # converts bytes to string\n        return txt_str\n```", "```py\ndef make_punct_dict(author_book_dict):\n    \"\"\"Accept author/text dict and return dict of punctuation by author.\"\"\"\n    punct_by_author = {}\n    for author, text in author_book_dict.items():\n        tokens = nltk.word_tokenize(text)\n        punct_by_author[author] = [token for token in tokens \n                                   if token in PUNCT_SET]\n        print(f\"Number punctuation marks in {author} = {len(punct_by_author[author])}\")\n    return punct_by_author\n```", "```py\ndef convert_punct_to_number(punct_by_author, author):\n    \"\"\"Return list of punctuation marks converted to numerical values.\"\"\"\n    heat_vals = [1 if char == ';' else 0 for char in punct_by_author[author]]\n    return heat_vals\n```", "```py\ndef find_next_lowest_square(number):\n    \"\"\"Return the largest perfect square less than or equal to the given number.\"\"\"\n    return int(math.sqrt(number)) ** 2\n```", "```py\nwar_url =  'https://bit.ly/3QnuTPX'\nhound_url = 'https://bit.ly/44Gdc2a'\nlost_url = 'https://bit.ly/3QhTfKJ'\n\n# Load text files into dictionary by author:\nstrings_by_author = {'wells': text_to_string(war_url),\n                     'doyle': text_to_string(hound_url),\n                     'unknown': text_to_string(lost_url)}\n\n# Tokenize text strings preserving only punctuation marks:\npunct_by_author = make_punct_dict(strings_by_author)\n\n# Find the largest square that fits all datasets:\nsquarable_punct_sizes = [find_next_lowest_square(len(punct_by_author[author])) \n                         for author in punct_by_author]\nperfect_square = min(squarable_punct_sizes)\nprint(f\"Array size for perfect square: {perfect_square}\\n\")\n```", "```py\n# Convert punctuation marks to numerical values and plot heatmaps:\nfor author in punct_by_author:\n    heat = convert_punct_to_number(punct_by_author, author)\n    arr = np.array(heat[:perfect_square]).reshape(int(math.sqrt(perfect_square)), \n                                                  int(math.sqrt(perfect_square)))\n    fig, ax = plt.subplots(figsize=(5, 5))\n    sns.heatmap(arr,\n                cmap=ListedColormap(['yellow', 'blue']),\n                cbar=False,\n                xticklabels=False,\n                yticklabels=False)\n    ax.set_title(f'Heatmap Semicolons: {author.title()}')\n    plt.show();\n```"]