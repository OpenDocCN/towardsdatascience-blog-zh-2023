["```py\nsearch_space = {'n_estimators': [10, 100, 500, 1000],\n              'max_depth': [2, 10, 25, 50, 100],\n              'min_samples_split': [2, 5, 10],\n              'min_samples_leaf': [1, 5, 10]}\n```", "```py\n# Import libraries\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.datasets import load_iris\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nimport time\n\n# Load Iris dataset\niris = load_iris()\nX, y = iris.data, iris.target\n\n# Define the hyperparameter search space\nsearch_space = {'n_estimators': [10, 100, 500, 1000],\n              'max_depth': [2, 10, 25, 50, 100],\n              'min_samples_split': [2, 5, 10],\n              'min_samples_leaf': [1, 5, 10]}\n\n# Define the random forest classifier\nclf = RandomForestClassifier(random_state=1234)\n\n# Create the optimizer object\noptimizer = GridSearchCV(clf, search_space, cv=5, scoring='accuracy')\n\n# Store start time to calculate total elapsed time\nstart_time = time.time()\n\n# Fit the optimizer on the data\noptimizer.fit(X, y)\n\n# Store end time to calculate total elapsed time\nend_time = time.time()\n\n# Print the best set of hyperparameters and corresponding score\nprint(f\"selected hyperparameters:\")\nprint(optimizer.best_params_)\nprint(\"\")\nprint(f\"best_score: {optimizer.best_score_}\")\nprint(f\"elapsed_time: {round(end_time-start_time, 1)}\")\n```", "```py\n# Import libraries\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint\n\n# Create a RandomizedSearchCV object\noptimizer = RandomizedSearchCV(clf, param_distributions=search_space,\n                               n_iter=50, cv=5, scoring='accuracy',\n                               random_state=1234)\n\n# Store start time to calculate total elapsed time\nstart_time = time.time()\n\n# Fit the optimizer on the data\noptimizer.fit(X, y)\n\n# Store end time to calculate total elapsed time\nend_time = time.time()\n\n# Print the best set of hyperparameters and corresponding score\nprint(f\"selected hyperparameters:\")\nprint(optimizer.best_params_)\nprint(\"\")\nprint(f\"best_score: {optimizer.best_score_}\")\nprint(f\"elapsed_time: {round(end_time-start_time, 1)}\")\n```", "```py\n# Import libraries\nfrom skopt import BayesSearchCV\n\n# Perform Bayesian Optimization\noptimizer = BayesSearchCV(estimator=RandomForestClassifier(),\n                          search_spaces=search_space,\n                          n_iter=10,\n                          cv=5,\n                          scoring='accuracy',\n                          random_state=1234)\n\n# Store start time to calculate total elapsed time\nstart_time = time.time()\n\noptimizer.fit(X, y)\n\n# Store end time to calculate total elapsed time\nend_time = time.time()\n\n# Print the best set of hyperparameters and corresponding score\nprint(f\"selected hyperparameters:\")\nprint(optimizer.best_params_)\nprint(\"\")\nprint(f\"best_score: {optimizer.best_score_}\")\nprint(f\"elapsed_time: {round(end_time-start_time, 1)}\")\n```"]