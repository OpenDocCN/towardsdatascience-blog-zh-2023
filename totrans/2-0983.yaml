- en: Git Deep Dive for Data Scientists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/git-deep-dive-for-data-scientists-1c9cc45c7612](https://towardsdatascience.com/git-deep-dive-for-data-scientists-1c9cc45c7612)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn Git through Real-Life Scenarios
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://khuyentran1476.medium.com/?source=post_page-----1c9cc45c7612--------------------------------)[![Khuyen
    Tran](../Images/98aa66025ad29b618e875c75f1c400a5.png)](https://khuyentran1476.medium.com/?source=post_page-----1c9cc45c7612--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1c9cc45c7612--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1c9cc45c7612--------------------------------)
    [Khuyen Tran](https://khuyentran1476.medium.com/?source=post_page-----1c9cc45c7612--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1c9cc45c7612--------------------------------)
    ·9 min read·Jul 1, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e30842919626704a8df3c72287b54e47.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '*Originally published at* [*https://mathdatasimplified.com*](https://mathdatasimplified.com/2023/07/01/git-deep-dive-for-data-scientists/)
    *on July 1, 2023.*'
  prefs: []
  type: TYPE_NORMAL
- en: Why Choose Git for Your Data Science Project?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git is a version control system widely used in software development, but is
    it the right choice for your data science project? Absolutely.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some reasons why Git is invaluable for data science:'
  prefs: []
  type: TYPE_NORMAL
- en: Version Control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Scenario:**'
  prefs: []
  type: TYPE_NORMAL
- en: You replace the current data processing technique with a new approach. After
    realizing that the new approach is not producing the desired results, you want
    to revert back to a previous working version.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, without version control, it becomes a daunting task to undo multiple
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: With Git, you can track changes to your codebase, switch between different versions,
    compare changes, and roll back to a stable state if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5037d5acd6ca03a0b38f322e71681c27.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Collaboration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Scenario:**'
  prefs: []
  type: TYPE_NORMAL
- en: You collaborate with other data scientists on a machine-learning project. To
    merge all changes made by team members, you need to manually exchange files and
    review each other’s code, which takes time and effort.
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Git makes it easy to merge changes, resolve conflicts, and synchronize progress,
    allowing you and your team members to work more efficiently together.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/077961146c454a288fac17990734f0ef.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Branching
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Scenario:**'
  prefs: []
  type: TYPE_NORMAL
- en: You want to explore new approaches to enhance your model’s performance but are
    hesitant to make changes directly to the production code. Any unintended impact
    on the deployed model could have significant consequences for your company.
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: With Git’s branching, you can create separate branches for different features.
    This allows you to test and iterate without compromising the stability of the
    production branch.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/30572e3b261a432ca738201afc8f2cda.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Backup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Scenario:**'
  prefs: []
  type: TYPE_NORMAL
- en: A hardware failure or theft results in the loss of all your code, leaving you
    devastated and setting you back months of work.
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Git backs up your projects by securely storing them on remote repositories.
    Thus, even if you encounter such unfortunate events, you can restore your codebase
    from the remote repository and continue your work without losing significant progress.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a88960ca14142a5299b16825ee08862f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: How to Use Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we understand the value of Git in a data science project, let’s explore
    how we can effectively use it in different scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Initialize Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To initialize Git in your current project and upload your project to a remote
    repository, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, initialize a new Git repository in the project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, add a remote repository to your local Git repository. To use GitHub as
    the remote repository, create a new repository on GitHub and copy its URL.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/30972052e000fa20baa0cfafbfe85372.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add the URL to your local Git repository with the name “origin”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, stage changes or new files in your Git repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Review the list of changes to be committed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the staged changes permanently in the repository’s history along with
    a commit message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Once your commits are made and stored in your local repository, you can share
    your changes with others by pushing them to a remote repository.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: After running this command, the “main” branch on the remote repository will
    receive the latest changes from your local repository.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4fc7909d84dd1b47503388811c38ed99.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Contribute to an Existing Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To contribute to an existing project, start by creating a local copy of the
    remote Git repository on your local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will create a new repository with the same name as the remote
    repository. To access the files, navigate to the repository directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: It is a good practice to make changes on a separate branch rather than the “main”
    branch to avoid any impact on the main codebase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create and switch to a new branch using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Make some changes to the new branch, then add, commit, and push the changes
    to the new branch on the remote Git repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: After pushing the commit, you can create a pull request to merge the changes
    into the “main” branch.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/15b2689a1259f114d683ef5862be9936.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: After your colleague approves and merges your pull request, your code will be
    integrated into the “main” branch.
  prefs: []
  type: TYPE_NORMAL
- en: Merge Local Changes with Remote Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine that you have created a branch called “feat-2” from the main branch.
    After making several changes to the “feat-2” branch, you discovered that the main
    branch has been updated. How do you merge the remote changes from the main branch
    into the local branch?
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1cb37d2b49af0bd60c18077d0fb25764.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: First, make sure your local work is saved by staging and committing local changes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This prevents the remote changes from overriding your work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, pull the changes from the main branch on the remote repository using
    `git pull`. When executing this command for the first time, you will be prompted
    to choose a strategy for reconciling the branches. Here are the available options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Running `git pull origin main --no-rebase` will create a new merge commit in
    the "feat-2" branch that ties together the histories of the "main" branch and
    the "feat-2" branch.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5208931e81b49ee7deb94c2c5c84af19.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Running `git pull origin main --rebase` will perform a rebase operation, which
    places the commits from the "feat-2" branch on top of the "main" branch.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ad3570343292409421b509f4d58e4714.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Rebase does not create new merge commits as merge does; instead, it modifies
    the existing commits of the “feat-2” branch. This results in a cleaner commit
    history.
  prefs: []
  type: TYPE_NORMAL
- en: However, the rebase command should be done with caution, particularly when other
    team members are actively using the same branch, such as the “feat-2” branch.
  prefs: []
  type: TYPE_NORMAL
- en: If you rebase your “feat-2” branch while others are also working on it, it can
    lead to inconsistencies in the branch history. Git may face difficulties when
    attempting to synchronize these divergent branches.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/506b53bccd53bd84d0581c82af5f769f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: If you’re new to Git and prioritize simplicity over maintaining a clean history,
    use the merge approach as the default option as it is generally easier to understand
    and use compared to rebase.
  prefs: []
  type: TYPE_NORMAL
- en: Revert Back to the Previous Commit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Imagine this: After creating new commits, you realized that errors have been
    made within them and want to revert back to a specific commit. How do you do that?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start with identifying the commit hash of the specific commit you want to revert
    by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Let’s assume you want to revert back to “commit-1”, you can either use `git
    revert` or use `git reset`.
  prefs: []
  type: TYPE_NORMAL
- en: '`git revert` creates a new commit that undoes the changes made after a specified
    commit.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/16a48a0b0058f6bc0f78ff50afcc6575.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '`git reset` modifies the commit history by changing the branch pointer to the
    specified commit.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/599ffafd41490cfaa1e3aea22d255338.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: While `git reset` keeps the commit history clean, it is more destructive since
    it discards commits. `git revert` is a safer option as it leaves the original
    commits intact.
  prefs: []
  type: TYPE_NORMAL
- en: Good Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ignore Large and Private Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a Git repository, it’s essential to exclude specific files or directories
    from version control to address issues like large file sizes and privacy concerns.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a data science project, there are certain files you should ignore, such
    as datasets and secrets, for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Datasets: Versioning binary datasets can significantly increase the repository’s
    size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Secrets: Data science projects often require credentials or API keys for accessing
    external services. Including these secrets in the codebase can pose a security
    risk if the repository is compromised or publicly shared.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To exclude specific files or directories, you can add them to the .gitignore
    file located in the root directory of your project. Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Additionally, you should ignore non-essential files that can contribute to large
    file sizes or are specific to your development environment, such as dependency
    management files like “venv” or editor-specific files like “.vscode”.
  prefs: []
  type: TYPE_NORMAL
- en: Find a list of useful `.gitignore` templates for your language [here](https://github.com/github/gitignore).
  prefs: []
  type: TYPE_NORMAL
- en: Have Small Commits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Break down your changes into small, focused commits. This approach ensures that
    each commit has a clear purpose, making it easier to understand, revert changes
    if needed, and minimizes the chances of conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/998c60a091bdb54a980e453b0af070ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Have a Descriptive Branch name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Opt for descriptive branch names that accurately reflect the task or feature
    you’re working on. Avoid vague names like “add file” or personal identifiers like
    “john-branch.” Instead, choose more descriptive names such as “change-linear-model-to-tree-model”
    or “encode-categorical-columns.”
  prefs: []
  type: TYPE_NORMAL
- en: Standardize Code Format for Easier Code Review
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Consistent code formatting helps reviewers focus on the logic of the code rather
    than formatting inconsistencies.
  prefs: []
  type: TYPE_NORMAL
- en: In the example code snippet below, it is challenging for reviewers to pinpoint
    the addition of the print statement due to irregular indentation, spacing, and
    quotation marks.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cf169ed97b77fd6a1efe2e6be2cc00c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Standardizing the code increases code readability.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c19aea6fe5f409b107fcde46008f93b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'My favorite tools to format and standardize code are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ruff](https://github.com/astral-sh/ruff): An extremely fast Python linter,
    written in Rust.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[black](https://black.readthedocs.io/en/stable/): A Python code formatter that
    automatically reformats your code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools to Complement Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: pre-commit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maintaining consistent code style according to style guides before every commit
    can be overwhelming. pre-commit automates this process by checking and reformatting
    your code prior to committing it. Here’s an example of how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: DVC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[DVC](https://dvc.org/doc/start) (Data Version Control) is a system for data
    version control. It is essentially like Git but is used for data. DVC allows you
    to store your original data in a separate location while keeping track of different
    versions of the data in Git.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/03eaadf18d44853d31f5d8d3c6f72478.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about how to use DVC in [this article](https://mathdatasimplified.com/2023/02/20/introduction-to-dvc-data-version-control-tool-for-machine-learning-projects-2/).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By adopting Git and leveraging its features along with these complementary tools,
    you can increase your productivity, maintain code quality, and efficiently collaborate
    with your teammates.
  prefs: []
  type: TYPE_NORMAL
- en: 'I love writing about data science concepts and playing with different data
    science tools. You can stay up-to-date with my latest posts by:'
  prefs: []
  type: TYPE_NORMAL
- en: Subscribing to my newsletter on [Data Science Simplified](https://mathdatasimplified.com/subscribe/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect with me on [LinkedIn](https://www.linkedin.com/in/khuyen-tran-1401/)
    and [Twitter](https://twitter.com/KhuyenTran16).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Atlassian. (n.d.). *Merging vs. rebasing: Atlassian Git Tutorial*. Atlassian.
    [https://www.atlassian.com/git/tutorials/merging-vs-rebasing](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)'
  prefs: []
  type: TYPE_NORMAL
