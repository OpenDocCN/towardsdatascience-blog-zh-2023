["```py\nimport math\nimport numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom PIL import Image\nfrom matplotlib.lines import Line2D\nfrom matplotlib.patches import Wedge\nfrom matplotlib.offsetbox import OffsetImage, AnnotationBbox\n```", "```py\ndf = pd.read_csv(\"./hapiness_report_2022.csv\", index_col=None)\ndf = df.sort_values(\"score\").reset_index(drop=True)\n```", "```py\nfont_family = \"PT Mono\"\nbackground_color = \"#F8F1F1\"\ntext_color = \"#040303\"\n\nsns.set_style({\n    \"axes.facecolor\": background_color,\n    \"figure.facecolor\": background_color,\n    \"font.family\": font_family,\n    \"text.color\": text_color,\n})\n```", "```py\nSTART_ANGLE = 100 # At what angle to start drawing the first wedge\nEND_ANGLE = 450 # At what angle to finish drawing the last wedge\nSIZE = (END_ANGLE - START_ANGLE) / len(df) # The size of each wedge\nPAD = 0.2 * SIZE # The padding between wedges\n\nINNER_PADDING = 2 * df.score.min()\nLIMIT = (INNER_PADDING + df.score.max()) * 1.3 # Limit of the axes\n```", "```py\nfig, ax = plt.subplots(nrows=1, ncols=1, figsize=(30, 30))\nax.set(xlim=(-LIMIT, LIMIT), ylim=(-LIMIT, LIMIT))\n\nfor i, row in df.iterrows():\n    bar_length = row.score\n    name = row.country\n    length = bar_length + INNER_PADDING\n    start = 100 + i*SIZE + PAD\n    end = 100 + (i+1)*SIZE\n    angle = (end + start) / 2\n\n    # Create variables here\n\n    # Add wedge functions here\n\n# Add general functions here\n\nplt.axis(\"off\")\nplt.tight_layout()\nplt.show()\n```", "```py\ndef draw_wedge(ax, start_angle, end_angle, length, bar_length, color):\n    ax.add_artist(\n        Wedge((0, 0),\n            length, start_angle, end_angle,\n            color=color, width=bar_length\n        )\n    )\n```", "```py\nbar_length = row.score\nlength = bar_length # + INNER_PADDING\nstart = 100 + i*SIZE + PAD\nend = 100 + (i+1)*SIZE\n.\n.\n.\n\n# Add functions here    \ndraw_wedge(ax, start, end, length, bar_length, \"#000\")\n```", "```py\ndef color(income_group):\n    if income_group == \"High income\":\n        return \"#468FA8\"\n    elif income_group == \"Lower middle income\":\n        return \"#E5625E\"\n    elif income_group == \"Upper middle income\":\n        return \"#62466B\"\n    elif income_group == \"Low income\":\n        return \"#6B0F1A\"\n    else:\n        return \"#909090\"\n```", "```py\n# Add functions here    \ndraw_wedge(ax, start, end, length, bar_length, color(row.income))\n```", "```py\ndef get_xy_with_padding(length, angle, padding):\n    x = math.cos(math.radians(angle)) * (length + padding)\n    y = math.sin(math.radians(angle)) * (length + padding)\n    return x, y\n```", "```py\ndef add_flag(ax, x, y, name, zoom, rotation):\n    flag = Image.open(\"<location>/{}.png\".format(name.lower()))\n    flag = flag.rotate(rotation if rotation > 270 else rotation - 180)\n    im = OffsetImage(flag, zoom=zoom, interpolation=\"lanczos\", resample=True, visible=True)\n\n    ax.add_artist(AnnotationBbox(\n        im, (x, y), frameon=False,\n        xycoords=\"data\",\n    ))\n```", "```py\nbar_length = row.score\nlength = bar_length + INNER_PADDING\nstart = START_ANGLE + i*SIZE + PAD\nend = START_ANGLE + (i+1)*SIZE\n\n# Add variables here\nangle = (end + start) / 2\nflag_zoom = 0.004 * length\nflag_x, flag_y = get_xy_with_padding(length, angle, 0.1 * length)\n\n# Add functions here\n...\nadd_flag(ax, flag_x, flag_y, row.country, flag_zoom, angle)\n```", "```py\ndef add_text(ax, x, y, country, score, angle):\n    if angle < 270:\n        text = \"{} ({})\".format(country, score)\n        ax.text(x, y, text, fontsize=13, rotation=angle-180, ha=\"right\", va=\"center\", rotation_mode=\"anchor\")\n    else:\n        text = \"({}) {}\".format(score, country)\n        ax.text(x, y, text, fontsize=13, rotation=angle, ha=\"left\", va=\"center\", rotation_mode=\"anchor\")\n```", "```py\nbar_length = row.score\nlength = bar_length + INNER_PADDING\nstart = START_ANGLE + i*SIZE + PAD\nend = START_ANGLE + (i+1)*SIZE\n\n# Add variables here\nangle = (end + start) / 2\nflag_zoom = 0.004 * length\nflag_x, flag_y = get_xy_with_padding(length, angle, 0.1 * length)\ntext_x, text_y = get_xy_with_padding(length, angle, 16*flag_zoom)\n\n# Add functions here\n...\nadd_flag(ax, flag_x, flag_y, row.country, flag_zoom, angle)\nadd_text(ax, text_x, text_y, row.country, bar_length, angle)\n```", "```py\ndef draw_reference_line(ax, point, size, padding, fontsize=18):\n    draw_wedge(ax, 0, 360, point+padding+size/2, size, background_color)\n    ax.text(-0.6, padding + point, point, va=\"center\", rotation=1, fontsize=fontsize)\n```", "```py\n# Add general functions here\ndraw_reference_line(ax, 2.0, 0.05, INNER_PADDING)\ndraw_reference_line(ax, 4.0, 0.05, INNER_PADDING)\ndraw_reference_line(ax, 6.0, 0.05, INNER_PADDING)\n```", "```py\n# Add general functions here\n...\nplt.title(\n  \"World Happiness Report 2022\".replace(\" \", \"\\n\"), \n  x=0.5, y=0.5, va=\"center\", ha=\"center\", \n  fontsize=64, linespacing=1.5\n)\n```", "```py\ndef add_legend(labels, colors, title):\n    lines = [\n        Line2D([], [], marker='o', markersize=24, linewidth=0, color=c) \n        for c in colors\n    ]\n\n    plt.legend(\n        lines, labels,\n        fontsize=18, loc=\"upper left\", alignment=\"left\",\n        borderpad=1.3, edgecolor=\"#E4C9C9\", labelspacing=1,\n        facecolor=\"#F1E4E4\", framealpha=1, borderaxespad=1,\n        title=title, title_fontsize=20,\n    )\n```", "```py\n# Add general functions here\n...\n\nadd_legend(\n    labels=[\"High income\", \"Upper middle income\", \"Lower middle income\", \"Low income\", \"Unknown\"],\n    colors=[\"#468FA8\", \"#62466B\", \"#E5625E\", \"#6B0F1A\", \"#909090\"],\n    title=\"Income level according to the World Bank\\n\"\n)\n```", "```py\nfig, ax = plt.subplots(nrows=1, ncols=1, figsize=(30, 30))\nax.set(xlim=(-LIMIT, LIMIT), ylim=(-LIMIT, LIMIT))\n\nfor i, row in df.iterrows():\n    bar_length = row.score\n    length = bar_length + INNER_PADDING\n    start = START_ANGLE + i*SIZE + PAD\n    end = START_ANGLE + (i+1)*SIZE\n    angle = (end + start) / 2\n\n    # Add variables here\n    flag_zoom = 0.004 * length\n    flag_x, flag_y = get_xy_with_padding(length, angle, 8*flag_zoom)\n    text_x, text_y = get_xy_with_padding(length, angle, 16*flag_zoom)\n\n    # Add functions here\n    draw_wedge(ax, start, end, length, bar_length, color(row.income))\n    add_flag(ax, flag_x, flag_y, row.country, flag_zoom, angle)\n    add_text(ax, text_x, text_y, row.country, bar_length, angle)\n\nax.text(1-LIMIT, LIMIT-2, \"+ main title\", fontsize=58)\n\n# Add general functions here\ndraw_reference_line(ax, 2.0, 0.06, INNER_PADDING)\ndraw_reference_line(ax, 4.0, 0.06, INNER_PADDING)\ndraw_reference_line(ax, 6.0, 0.06, INNER_PADDING)\nplt.title(\"World Happiness Report 2022\".replace(\" \", \"\\n\"), x=0.5, y=0.5, va=\"center\", ha=\"center\", fontsize=64, linespacing=1.5)\n\nadd_legend(\n    labels=[\"High income\", \"Upper middle income\", \"Lower middle income\", \"Low income\", \"Unknown\"],\n    colors=[\"#468FA8\", \"#62466B\", \"#E5625E\", \"#6B0F1A\", \"#909090\"],\n    title=\"Income level according to the World Bank\\n\"\n)\n\nplt.axis(\"off\")\nplt.tight_layout()\nplt.show()\n```"]