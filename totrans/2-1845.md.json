["```py\nimport osmnx as ox\nimport geopandas as gpd\nfrom shapely.geometry import Point, LineString\nimport pandas as pd\nimport matplotlib.pyplot as plt\n```", "```py\n# origin and destination geom\n\norigin_geom = Point(-5.6613932957355715, 32.93210288339607)\n\ndestination_geom = Point(-3.3500597061072726, 34.23038027794419)\n```", "```py\n# create origin dataframe\norigin =  gpd.GeoDataFrame(columns = ['name', 'geometry'], crs = 4326, geometry = 'geometry')\norigin.at[0, 'name'] = 'origin'\norigin.at[0, 'geometry'] =origin_geom\n\n# create destination dataframe\ndestination =  gpd.GeoDataFrame(columns = ['name', 'geometry'], crs = 4326, geometry = 'geometry')\ndestination.at[0, 'name'] = 'destination'\ndestination.at[0, 'geometry'] = destination_geom\n```", "```py\ndef get_graph_from_locations(origin, destination, network='drive'):\n    '''\n    network_type as drive, walk, bike\n    origin gdf 4326\n    destination gdf 4326\n    '''\n    # combine and area buffer\n    combined = pd.concat([origin, destination])\n\n    convex = combined.unary_union.envelope # using envelope instead of convex, otherwise it breaks the unary_union\n\n    graph_extent = convex.buffer(0.02)\n\n    graph = ox.graph_from_polygon(graph_extent, network_type= network)\n\n    return graph\n```", "```py\ngraph = get_graph_from_locations(origin, destination)\n```", "```py\nfig, ax = ox.plot_graph(graph, node_size=0, edge_linewidth=0.2)\n```", "```py\n# ------------- get closest nodes\n\n# origin\nclosest_origin_node = ox.nearest_nodes(G=graph, \n                                       X=origin_geom.x, \n                                       Y=origin_geom.y)\n\n# destination\nclosest_destination_node = ox.nearest_nodes(G=graph, \n                                           X=destination_geom.x, \n                                           Y=destination_geom.y)\n```", "```py\n# run\nroute = ox.shortest_path(graph, \n                         orig = closest_origin_node, \n                         dest = closest_destination_node, \n                         weight = 'length')\n```", "```py\ndef nodes_to_route(graph_nodes, path_nodes):\n\n    # Extract the route nodes of the graph\n    route_nodes = graph_nodes.loc[path_nodes]\n\n    # ---> note! If you have more routes, check for each one, to be removed in length is 1\\.  A path can not be built with only 1 node.\n\n    # Create a LineString out of the route\n    list_geom = route_nodes.geometry.to_list()\n    path = LineString(list_geom)\n\n    # Append the result into the GeoDataFrame\n    route_df = gpd.GeoDataFrame( [[path]] )\n\n    # Add a column name\n    route_df.columns = ['geometry'] \n\n    # Set geometry\n    route_df = route_df.set_geometry('geometry')\n\n    # Set coordinate reference system\n    route_df.crs = graph_nodes.crs\n\n    # remove nans\n    route_df = route_df.dropna(subset=['geometry'])\n\n    return route_df\n```", "```py\n# get all network nodes\ngraph_nodes = ox.graph_to_gdfs(graph, edges=False)\n\n# get the line geometries from osm nodes\nroute_gdf = nodes_to_route(graph_nodes, route)\n```", "```py\ndef compute_distance(shortest_path_gdf):\n    '''\n    Compute distance in EPSG:3387\n\n    '''\n\n    # project WGS84 to EPSG3387\n    distances = shortest_path_gdf.to_crs(\"EPSG:3387\").geometry.length\n\n    # add\n    shortest_path_gdf['distance'] = distances\n\n    return shortest_path_gdf\n```", "```py\n# calculate distance m\nroute_distance_gdf = compute_distance(route_gdf)\n```", "```py\n# fetch network\nnetwork = ox.graph_to_gdfs(graph, nodes=False)\n\n# get only needed columns\nnetwork_gdf = network.reset_index(drop=True)[['geometry']]\n```", "```py\nnetwork_gdf.to_file(r'osm_network.gpkg')\nroute_distance_gdf.to_file(r'osm_shortest_path.gpkg')\n```", "```py\n# plot network\nax = network_gdf.plot(figsize=(12, 10), linewidth = 0.2, color='grey', zorder=0);\n\n# origin and destination\norigin.plot(ax=ax, markersize=46, alpha=0.8, color='blue', zorder=1)\ndestination.plot(ax=ax, markersize=46, alpha=0.8, color='green', zorder=2)\n\n# route\nroute_distance_gdf.plot(ax=ax, linewidth = 3, color='red', alpha=0.4, zorder=3)\n\nplt.axis(False);\n```"]