- en: Creating Geospatial Heatmaps With Python’s Plotly and Folium Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/creating-geospatial-heatmaps-with-pythons-plotly-and-folium-libraries-4159e98a1ae8](https://towardsdatascience.com/creating-geospatial-heatmaps-with-pythons-plotly-and-folium-libraries-4159e98a1ae8)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Two Great Python Options for Visualising Geospatial Variation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----4159e98a1ae8--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----4159e98a1ae8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4159e98a1ae8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4159e98a1ae8--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----4159e98a1ae8--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4159e98a1ae8--------------------------------)
    ·6 min read·Mar 17, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/07f55e060065099f6e715799e103d191.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [KOBU Agency](https://unsplash.com/@kobuagency?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '**Heatmaps**, also known as **Density Maps**, are data visualizations that
    display the spatial distribution of a variable across a geographic area. They
    can be great tools for visualising and identifying trends, supporting decision-making,
    detecting outliers, and creating compelling visualisations for presentations.'
  prefs: []
  type: TYPE_NORMAL
- en: There are several mapping python libraries available, however, two very popular
    and easy to use libraries are Folium and Plotly Express.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Folium**](https://python-visualization.github.io/folium/) is a great library
    that makes it easy to visualise geospatial data. It is powered by [**Leaflet.js**](https://leafletjs.com/),
    which is a leading javascript mapping library and is platform-independent. [**Plotly**](https://plotly.com/graphing-libraries/)
    is a popular library for creating powerful interactive data visualisations with
    very few lines of code and can be used to create interactive maps with MapBox.'
  prefs: []
  type: TYPE_NORMAL
- en: Within this article, we will see how we can use these two libraries to visualise
    acoustic compressional slowness data on the Norwegian Continental Shelf.
  prefs: []
  type: TYPE_NORMAL
- en: A video version of this tutorial using Plotly Express can be found on my YouTube
    channel. Check it out below.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries and Loading Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this tutorial, we will start with importing [pandas](https://pandas.pydata.org/),
    which will be used to load our data from a CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The dataset we are using for this tutorial is a combination of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The Xeek Force 2020 Machine Learning lithology competition dataset was used
    to derive an average acoustic compressional slowness (DTC) value for the Shetland
    Group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data from the Norwegian Petroleum Directorate website, which was used to provide
    the location data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When the data has been loaded, we can call upon the dataframe with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d861bdb997641ab938e82be90fb62a16.png)'
  prefs: []
  type: TYPE_IMG
- en: Dataframe view of wells on the Norwegian Continental Shelf. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that we have 7 columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Well Name** — Name of the Well'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DTC** — Average acoustic compressional slowness for the Shetland Group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Temperature** — Bottom hole temperate for the well'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Water Depth** —Depth of seabed from sea level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Completion Year** — Year the well was completed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Latitude** — Latitude position of the well in decimal units'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Longitude** — Longitude position of the well in decimal units'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Heatmap with Plotly Express
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To begin creating the heatmap with [Plotly Express](https://plotly.com/), we
    need to import the library into our notebook like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We then need to create a new figure. This is done by calling upon plotly express’s
    `density_mapbox` .
  prefs: []
  type: TYPE_NORMAL
- en: 'To create our map, we need to pass in a few parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`df` — the name of the dataframe with the data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lat` — the name for the latitude column'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lon` — the name for the longitude column'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`z` — the name of the column containing the data we want to visualise on the
    heatmap'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center` — the position where the map will be centred upon. We can call upon
    the mean of the latitude and longitude columns'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zoom` — the initial zoom level of the map'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last two parameters `mapbox_style` and `height` control the background mapping
    layer and the height of the plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When we call upon `fig.show()` we get back the following map.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/45f2ede798e774a19ebbcd09697a2c18.png)'
  prefs: []
  type: TYPE_IMG
- en: Heatmap generated using density_mapbox from plotly express. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: From this map, we can see that we have higher values of DTC in the northern
    end of the region, which could be attributable to several things, including lower
    compaction or increased shalieness.
  prefs: []
  type: TYPE_NORMAL
- en: The great thing about the map generated by plotly express is that we can hover
    over the data and get the values for the plotted variable (DTC). This is done
    automatically and doesn’t require extra code to create a popup box.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/895dc623da49ab17586f3dbbcf38a118.png)'
  prefs: []
  type: TYPE_IMG
- en: Added interactivity as part of the heatmap generated using density_mapbox from
    plotly express . Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Heatmap with Folium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To begin using Folium, we will need to import it; however, in order to generate
    heatmaps, we also need to import the HeatMap plugin from `folium.plugins`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once Folium has been imported, we need to create a base map by calling upon
    `folium.map()` . Within that class method, we can pass in several arguments. For
    this example, we will use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`location` — The position where the map will be centred upon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zoom_start` — The initial zoom level of the map'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`control_scale` — Whether the scale controls are displayed on the map'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to find out more about the parameters for the map function, then
    check out the help documentation on the [**folium.map**](https://python-visualization.github.io/folium/modules.html)
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We next need to create the heatmap layer.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we first need to convert the latitude, longitude and values to a
    list, which can then be passed into the `HeatMap` call.
  prefs: []
  type: TYPE_NORMAL
- en: We can set a few parameters to stylise how the heatmap appears, such as the
    min and max opacity, the radius of the colouring from the data point, and more.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When we call upon our map object, we can see a similar pattern to the one generated
    by plotly express.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c7e91b84a5461321f6da5b92bf4ef531.png)'
  prefs: []
  type: TYPE_IMG
- en: Heatmap generated using Folium. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there are a couple of downsides to this map:'
  prefs: []
  type: TYPE_NORMAL
- en: There is no hover functionality similar to what we saw above with Plotly Express.
    We could add markers, but it requires several lines of additional code.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to see how to do this, check out my article below.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/folium-mapping-displaying-markers-on-a-map-6bd56f3e3420?source=post_page-----4159e98a1ae8--------------------------------)
    [## Folium Mapping: Displaying Markers on a Map'
  prefs: []
  type: TYPE_NORMAL
- en: A Short Guide on Adding Markers to a Folium Map in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/folium-mapping-displaying-markers-on-a-map-6bd56f3e3420?source=post_page-----4159e98a1ae8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: The other issue is that there is no colour gradient bar to help readers understand
    the range of colours. But this can be resolved by creating a colour map dictionary,
    as discussed in the following StackOverflow post.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://stackoverflow.com/questions/47163728/how-to-add-legend-gradient-in-folium-heat-map?source=post_page-----4159e98a1ae8--------------------------------)
    [## How to add legend/gradient in Folium Heat Map?'
  prefs: []
  type: TYPE_NORMAL
- en: I am creating a heat map using Folium.My data contains 3 columns one is category,
    lat and long. The lat-long points are…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: stackoverflow.com](https://stackoverflow.com/questions/47163728/how-to-add-legend-gradient-in-folium-heat-map?source=post_page-----4159e98a1ae8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Heatmaps provide a great way to visualise and identify trends across geographical
    areas and can easily be created using two popular Python libraries: Folium and
    Plotly Express. These two libraries are simple to use and can be used to map petrophysical
    and well-log properties across large regions. From these maps, we can derive information
    about trends and variations across fields or areas.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)*Alternatively,
    you can* [***sign up for my newsletter***](https://fabulous-founder-2965.ck.page/2ca286e572)
    *to get additional content straight into your inbox for free.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Secondly, you can get the full Medium experience and support me and thousands
    of other writers by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the amazing Medium articles, as well as the
    chance to make money with your writing. If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support!*'
  prefs: []
  type: TYPE_NORMAL
- en: Data Sets Used in this Tutorial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The dataset used for this tutorial is composed of two other datasets:'
  prefs: []
  type: TYPE_NORMAL
- en: A subset of a training dataset used as part of a Machine Learning competition
    run by Xeek and FORCE 2020 *(Bormann et al., 2020)*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The full dataset can be accessed at the following link: [https://doi.org/10.5281/zenodo.4351155](https://doi.org/10.5281/zenodo.4351155).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Well Location Data from the Norwegian Petroleum Directorate website
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Data can be downloaded here: [https://factpages.npd.no/en/wellbore/tableview/exploration/all](https://factpages.npd.no/en/wellbore/tableview/exploration/all)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Both datasets are licensed under a NOLD 2.0 licence from the Norwegian Government,
    details of which can be found here: [Norwegian Licence for Open Government Data
    (NLOD) 2.0](https://data.norge.no/nlod/en/2.0/).'
  prefs: []
  type: TYPE_NORMAL
