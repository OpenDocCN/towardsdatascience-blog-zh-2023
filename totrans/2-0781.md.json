["```py\n# Define file path\npath  = './youtube/GBvideos.csv'\n\n# Read in using Polars\ndf_pl = pl.read_csv(path)\nprint(df_pl.shape)\n>>> (38916, 16)\n\n# Read in using Pandas\ndf_pd = pd.read_csv(path)\nprint(df_pd.shape)\n>>> (38916, 16)\n```", "```py\nprint(df_pl.head(2))\nprint(df_pl.tail(2))\nprint(df_pl.sample(2))\n```", "```py\nimport polars.selectors as cs\n\n# Polars feature selectiom\nnumeric_data_pl = df_pl.select(cs.numeric())\ncategorical_data_pl = df_pl.select(cs.string())\n\n# Pandas feature selection\nnumeric_data_pd = df_pd.select_dtypes(include=\"number\")\ncategorical_data_pd = df_pd.select_dtypes(exclude=\"number\")\n```", "```py\nsubset_pl = df_pl.select(\n    pl.col(\"likes\"), \n    pl.col(\"views\"),\n    pl.col(\"comment_count\")\n)\nsusbet_pd = df_pd[[\"likes\", \"views\", \"comment_count\"]]\n\n# This will also work\nsusbet_pl_2 = df_pl[[\"likes\", \"views\", \"comment_count\"]]\n```", "```py\nfiltered_pl = df_pl.filter(pl.col(\"views\") < 1000)\nfiltered_pl.shape\n>>> (6, 16)\n\nfiltered_pd = df_pd[df_pd['views'] < 1000]\nfiltered_pd.shape\n>>> (6, 16)\n```", "```py\nmissing = df_pd.isna().sum()\nmissing = missing[missing > 0]\nstatic = df_pd.nunique() == 1\nstatic = static[static]\n\nprint(\"Missing rows:\")\nprint(missing)\nprint(\"\\nStatic Columns:\")\nprint(static)\n\n>>> Missing rows:\n>>> description    612\n>>> dtype: int64\n>>> Static Columns:\n>>> Series([], dtype: bool)\n```", "```py\nmissing = (\n    df_pl.select(pl.all().is_null().sum())\n    .melt(value_name=\"missing\")\n    .filter(pl.col(\"missing\") > 0)\n)\nstatic = (\n    df_pl.select(pl.all().n_unique())\n    .melt(value_name=\"unique\")\n    .filter(pl.col(\"unique\") == 1)\n)\nprint(\"Missing columns:\")\nprint(missing)\n\nprint(\"\\nStatic columns:\")\nprint(static)\n```", "```py\nMissing columns:\nshape: (0, 2)\n┌──────────┬─────────┐\n│ variable ┆ missing │\n│ ---      ┆ ---     │\n│ str      ┆ u32     │\n╞══════════╪═════════╡\n└──────────┴─────────┘\n\nStatic columns:\nshape: (0, 2)\n┌──────────┬────────┐\n│ variable ┆ unique │\n│ ---      ┆ ---    │\n│ str      ┆ u32    │\n╞══════════╪════════╡\n└──────────┴────────┘\n```", "```py\n# Pandas datetime conversion\ndf_pd['publish_time'] = pd.to_datetime(df_pd['publish_time'])\ndf_pd['trending_date'] = pd.to_datetime(\n    df_pd['trending_date'], format='%y.%d.%m'\n)\n\n# Polars datetime conversion\ndf_pl = df_pl.with_columns(\n    pl.col('trending_date').str.to_date(format='%y.%d.%m'),\n    pl.col('publish_time').str.to_datetime()\n)\n```", "```py\nimport json\n\n# Load ID to Category mapping\nwith open('./youtube/US_category_id.json', 'r') as f:\n    categories = json.load(f)\n\nid_to_category = {}\nfor c in categories['items']:\n    id_to_category[int(c['id'])] = c['snippet']['title']\n\n# Pandas mapping\ndf_pd['category_id'] = df_pd['category_id'].map(id_to_category)\n\n# Polars mapping\ndf_pl = df_pl.with_columns(pl.col(\"category_id\").map_dict(id_to_category))\n```", "```py\n# Polars value counts\ncategory_counts = df_pl['category_id'].value_counts(sort=True).head()\nprint(category_counts)\n```", "```py\n┌──────────────────┬────────┐\n│ category_id      ┆ counts │\n│ ---              ┆ ---    │\n│ str              ┆ u32    │\n╞══════════════════╪════════╡\n│ Music            ┆ 13754  │\n│ Entertainment    ┆ 9124   │\n│ People & Blogs   ┆ 2926   │\n│ Film & Animation ┆ 2577   │\n│ Howto & Style    ┆ 1928   │\n└──────────────────┴────────┘\n```", "```py\n# Convert to Python list\nlist_data = df_pl\"category_id\"].to_list()\n# Convert to NumPy\nnumpy_data = df_pl[\"category_id\"].to_numpy()\n# Convert to Pandas\npandas_data = df_pl[\"category_id\"].to_pandas()\n```", "```py\n# Barplot\nsns.barplot(\n    y=category_counts[\"category_id\"].to_numpy(),\n    x=category_counts[\"counts\"].to_numpy(),\n    color=\"#306e81\",\n)\nplt.title(\"Category Counts in Trending Data\")\nplt.xlabel(\"Counts\")\nplt.show()\n```", "```py\nviews_stats = df_pl.select(pl.col(\"views\")).describe()\nprint(views_stats)\n\nsns.histplot(df_pl['views'].log())\nplt.title(\"Log Views Distribution in Trending\")\nplt.show()\n```", "```py\nchannel_popularity = (\n    df_pl.groupby(pl.col(\"channel_title\"))\n    .agg(pl.count().alias(\"trending_count\"))\n    .sort(pl.col(\"trending_count\"), descending=True)\n)\n\nprint(channel_popularity.head())\n```", "```py\nshape: (5, 2)\n┌───────────────────────────────────┬────────────────┐\n│ channel_title                     ┆ trending_count │\n│ ---                               ┆ ---            │\n│ str                               ┆ u32            │\n╞═══════════════════════════════════╪════════════════╡\n│ The Tonight Show Starring Jimmy … ┆ 208            │\n│ Jimmy Kimmel Live                 ┆ 207            │\n│ TheEllenShow                      ┆ 207            │\n│ Saturday Night Live               ┆ 206            │\n│ WWE                               ┆ 205            │\n└───────────────────────────────────┴────────────────┘\n```", "```py\nchannel_stats_pl = df_pl.groupby(\"channel_title\").agg(\n    pl.count().alias(\"trending_count\"), # number of occurences in the dataset\n    pl.col(\"title\").n_unique().alias(\"number_of_trending_videos\"), # number of unique trending videos\n    pl.col(\"views\").sum().alias(\"total_views\"), # total number of views\n    pl.col(\"likes\").sum().alias(\"total_likes\"), # total number of likes\n    pl.col(\"comment_count\").sum().alias(\"total_comments\"), # total number of comments\n    pl.col(\"views\").mean().alias(\"average_views\"), # average number of views\n    pl.col(\"likes\").mean().alias(\"average_likes\"), # average number of likes\n    pl.col(\"comment_count\").mean().alias(\"average_comments\"), # average number of comments\n)\nprint(channel_stats_pl.sample(5))\n```", "```py\nchannel_stats_pd = df_pd.groupby(\"channel_title\").agg(\n    trending_count=pd.NamedAgg(column=\"title\", aggfunc=\"count\"),\n    number_of_trending_videos=pd.NamedAgg(column=\"title\", aggfunc=\"nunique\"),\n    total_views=pd.NamedAgg(column=\"views\", aggfunc=\"sum\"),\n    average_views=pd.NamedAgg(column=\"views\", aggfunc=\"mean\"),\n    total_likes=pd.NamedAgg(column=\"likes\", aggfunc=\"sum\"),\n    average_likes=pd.NamedAgg(column=\"likes\", aggfunc=\"mean\"),\n    total_comments=pd.NamedAgg(column=\"comment_count\", aggfunc=\"sum\"),\n    average_comments=pd.NamedAgg(column=\"comment_count\", aggfunc=\"mean\"),\n)\n```", "```py\ndef make_aggregates(df: pl.DataFrame, groupby: str, agg_features: list[str]) -> pl.DataFrame:\n    # Aggregates that measure popularity using video counts\n    popularity_aggs = [\n        pl.count().alias(\"trending_count\"),\n        pl.col(\"title\").n_unique().alias(\"number_of_trending_videos\"),\n    ]\n    # Aggregates that measure popularity using metrics of the videos\n    metrics_agg = []\n    for agg in agg_features:\n        if agg not in df.columns:\n            print(f\"{agg} not in the dataframe. Skipping...\")\n        else:\n            metrics_agg.append(pl.col(agg).sum().alias(f\"total_{agg}\"))\n            metrics_agg.append(pl.col(agg).mean().alias(f\"average_{agg}\"))\n\n    stats = df.groupby(groupby).agg(popularity_aggs + metrics_agg)\n    stats = stats.sort(\"trending_count\", descending=True)\n    return stats\n```", "```py\nchannel_aggs = make_aggregates(\n    df = df_pl, \n    groupby = \"channel_title\", \n    agg_features = [\"views\", \"likes\", \"comment_count\"]\n)\ncategory_aggs = make_aggregates(\n    df = df_pl, \n    groupby = \"category_id\", \n    agg_features = [\"views\", \"likes\", \"comment_count\"]\n)\n\nprint(\"Top Channels\")\nprint(channel_aggs.head())\n\nprint(\"\\nTop Categories\")\nprint(category_aggs.head())\n```", "```py\nchannel_aggs.write_parquet(\"./data/channel_aggs.parquet\")\ncategory_aggs.write_parquet(\"./data/category_aggs.parquet\")\n```"]