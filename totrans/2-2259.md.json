["```py\ngcloud init # Authenticate\n\n# Use bq mk command with --dataset flag to create a new dataset:\nbq mk\n  --dataset \\\n  --location=US \\\n  PROJECT:DATASET\n\n# # Example:\n# bq mk\n#   --dataset \\\n#   --location=US \\\n#   bq-shakhomirov:analytics_153293282\n\n# Use bq mk with --transfer_config flag to copy the dataset with public data:\nbq mk\n--transfer_config\n--project_id=PROJECT \\ # Replace with your project_id\n--data_source=cross_region_copy\n--target_dataset=analytics_153293282\n--display_name=analytics_153293282\n--params='{\"source_dataset_id\":\"analytics_153293282\",\"source_project_id\":\"firebase-public-project\",\"overwrite_destination_table\":\"true\"}'\n```", "```py\nSELECT *\nFROM `firebase-public-project.analytics_153293282.events_*`\nTABLESAMPLE SYSTEM (1 PERCENT)\n;\n```", "```py\n...\n\n IF (user_last_engagement <= TIMESTAMP_ADD(user_first_engagement, \n      INTERVAL 10 MINUTE),\n    1,\n    0 ) AS bounced\n\n, IF(last_seen_dt < DATE_SUB(current_date(),INTERVAL 30 DAY) , 1, 0)     AS churned\n...\n```", "```py\n...\n  , IF( last_seen_ts < timestamp_sub(\n        current_timestamp(), interval 30*24 hour) , 1, 0) AS churned\n...\n```", "```py\n...\nROW_NUMBER() OVER (PARTITION BY user_pseudo_id ORDER BY event_timestamp DESC) AS row_number\n...\n```", "```py\nbq query --nouse_legacy_sql < sql/churn.sql\n```", "```py\n-- ./sql/churn.sql\ncreate schema if not exists sample_churn_model\n  OPTIONS (\n    description = 'sample_churn_model',\n    location = 'US'\n)\n;\n\ncreate or replace table sample_churn_model.churn as\nwith first_engagement_data as (\nselect distinct\n\n    user_pseudo_id\n  , device.language\n  , geo.country\n  , platform\n  , ROW_NUMBER() OVER (PARTITION BY user_pseudo_id ORDER BY event_timestamp DESC) AS row_num\n\nfrom `firebase-public-project.analytics_153293282.events_*`\n\nwhere\n-- _TABLE_SUFFIX =  FORMAT_DATE('%Y%m%d', DATE_SUB(current_date(), INTERVAl 1 DAY))\n-- and \nlower(event_name) = 'user_engagement'\n)\n\n, first_engagement as (\n    select * except (row_num)\n    from first_engagement_data\n    where row_num = 1 \n)\n\n, first_last_seen as (\n    select\n        user_pseudo_id\n      , min(event_timestamp) as first_seen_ts\n      , max(event_timestamp) as last_seen_ts\n    from\n      `firebase-public-project.analytics_153293282.events_*`\n    where event_name = 'user_engagement'\n    group by\n      user_pseudo_id\n)\n\n, event_aggregates as (\n  select\n     event_date                                         \n    ,user_pseudo_id\n    ,lower(event_name)                   as event_name  \n    ,count(distinct event_timestamp)     as event_cnt   \n  from \n    `firebase-public-project.analytics_153293282.events_*`\n--   where\n--     _TABLE_SUFFIX =  FORMAT_DATE('%Y%m%d', DATE_SUB(current_date(), INTERVAl 1 DAY))\n  group by\n     event_date\n    ,user_pseudo_id\n    ,event_name\n)\n\n, daily_data as (\nselect\n     a.user_pseudo_id   \n    ,a.event_date       \n    ,a.event_name\n    ,a.event_cnt\n    ,f.first_seen_ts    \n    ,f.last_seen_ts     \n    ,e.language         \n    ,e.country          \n    ,e.platform         \n\n    , date_diff(\n          parse_date('%Y%m%d', a.event_date)\n        , cast(timestamp_micros(first_seen_ts) as date)\n        , day\n    )  as day_number\n\n    ,if( cast(timestamp_micros(f.last_seen_ts) as date) < \n                date_sub(parse_date('%Y%m%d', '20181003'), interval 30 day) \n        , 1\n        , 0)     as churned -- wasn't active last 30 days\n\n    ,if (timestamp_micros(last_seen_ts) <= timestamp_add(timestamp_micros(first_seen_ts), \n                interval 10 minute)\n        ,1\n        ,0 )     as bounced\n\nfrom event_aggregates a\nleft join first_last_seen f on f.user_pseudo_id = a.user_pseudo_id \nleft join first_engagement e on e.user_pseudo_id = a.user_pseudo_id\n)\n\n-- Final dataset for churn model training:\nselect\n     user_pseudo_id   \n    ,first_seen_ts    \n    ,last_seen_ts     \n    ,language         \n    ,country          \n    ,platform         \n    ,churned          \n    ,sum(if(day_number in (0) and event_name = 'user_engagement', event_cnt, 0))            as user_engagement_cnt          \n    ,sum(if(day_number in (0) and event_name = 'level_start_quickplay', event_cnt, 0))      as level_start_quickplay_cnt    \n    ,sum(if(day_number in (0) and event_name = 'level_end_quickplay', event_cnt, 0))        as level_end_quickplay_cnt      \n    ,sum(if(day_number in (0) and event_name = 'level_complete_quickplay', event_cnt, 0))   as level_complete_quickplay_cnt \n    ,sum(if(day_number in (0) and event_name = 'level_reset_quickplay', event_cnt, 0))      as level_reset_quickplay_cnt    \n    ,sum(if(day_number in (0) and event_name = 'post_score', event_cnt, 0))                 as post_score_cnt               \n    ,sum(if(day_number in (0) and event_name = 'spend_virtual_currency', event_cnt, 0))     as spend_virtual_currency_cnt   \n    ,sum(if(day_number in (0) and event_name = 'ad_reward', event_cnt, 0))                  as ad_reward_cnt                \n    ,sum(if(day_number in (0) and event_name = 'challenge_a_friend', event_cnt, 0))         as challenge_a_friend_cnt       \n    ,sum(if(day_number in (0) and event_name = 'completed_5_levels', event_cnt, 0))         as completed_5_levels_cnt       \n    ,sum(if(day_number in (0) and event_name = 'use_extra_steps', event_cnt, 0))            as use_extra_steps_cnt          \nfrom daily_data\n-- where bounced = 0\ngroup by\n     user_pseudo_id   \n    ,first_seen_ts    \n    ,last_seen_ts     \n    ,language         \n    ,country          \n    ,platform         \n    ,churned \n```", "```py\nSELECT\n    churned\n    ,COUNT(churned) as count_users\n\nFROM\n    sample_churn_model.churn\nGROUP BY 1\n;\n```", "```py\nbq query --nouse_legacy_sql \\\n'SELECT * FROM ML.EVALUATE(MODEL sample_churn_model.churn_model);'\n```", "```py\nSELECT\n  expected_label,\n  _0 AS predicted_0,\n  _1 AS predicted_1\nFROM\n  ML.CONFUSION_MATRIX(MODEL sample_churn_model.churn_model)\n```", "```py\nSELECT\n  user_pseudo_id,\n  churned,\n  predicted_churned,\n  predicted_churned_probs[OFFSET(0)].prob as probability_churned\nFROM\n  ML.PREDICT(MODEL sample_churn_model.churn_model,\n  (SELECT * FROM sample_churn_model.churn)) #can be replaced with a proper test dataset\norder by 3 desc\n;\n```", "```py\ninsert into sample_churn_model.churn (...)\nselect\n  ... -- aggregate model features for new users.\nfrom \n  `firebase-public-project.analytics_153293282.events_*`\nwhere\n  _TABLE_SUFFIX =  FORMAT_DATE('%Y%m%d', DATE_SUB(current_date(), INTERVAl 1 DAY))\n...\n```", "```py\nSELECT\n  user_pseudo_id,\n  churned,\n  predicted_churned,\n  predicted_churned_probs[OFFSET(0)].prob as probability_churned\nFROM\n  ML.PREDICT(MODEL sample_churn_model.churn_model,\n  (SELECT * FROM sample_churn_model.churn \nWHERE date(first_seen_ts) = date_sub(current_date(), interval 1 day)))\n```"]