- en: 'Mastering Containerization: A Guide to Creating Docker-Like Environments without
    Docker'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/mastering-containerization-a-guide-to-creating-docker-like-environments-without-docker-121b3f444d2f](https://towardsdatascience.com/mastering-containerization-a-guide-to-creating-docker-like-environments-without-docker-121b3f444d2f)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Unlocking the power of containerization: A step-by-step tutorial on building
    container-like environments.'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://dpoulopoulos.medium.com/?source=post_page-----121b3f444d2f--------------------------------)[![Dimitris
    Poulopoulos](../Images/ce535a1679779f5a2ec8b024e6691e50.png)](https://dpoulopoulos.medium.com/?source=post_page-----121b3f444d2f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----121b3f444d2f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----121b3f444d2f--------------------------------)
    [Dimitris Poulopoulos](https://dpoulopoulos.medium.com/?source=post_page-----121b3f444d2f--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----121b3f444d2f--------------------------------)
    ·6 min read·Feb 4, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8974063124ae85ec620839fea9da5396.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: Photo by [Timelab Pro](https://unsplash.com/it/@timelabpro?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Containers have revolutionized how we deploy and manage applications, providing
    unparalleled levels of portability, scalability, and consistency.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: However, you shouldn’t be intimidated by Docker’s sleek exterior — it’s time
    to delve into the mechanics that make containerization possible. By understanding
    the inner workings of Docker, you’ll gain a deeper appreciation for the technology
    and a broader understanding of your operating system.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: The last three articles in this series pave the way. We discussed Namespace,
    Control Groups (cgroups), and overlay file systems. These are the building blocks
    we use today to create our own container-like environment.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[](/containers-how-they-work-under-the-hood-and-why-theyre-taking-over-the-data-science-world-6b94702609aa?source=post_page-----121b3f444d2f--------------------------------)
    [## Containers: How They Work Under the Hood and Why They’re Taking Over the Data
    Science World'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: A Beginner’s Guide to Understanding the Magic of Docker
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'towardsdatascience.com](/containers-how-they-work-under-the-hood-and-why-theyre-taking-over-the-data-science-world-6b94702609aa?source=post_page-----121b3f444d2f--------------------------------)
    [](/the-power-of-linux-cgroups-how-containers-take-control-of-their-resources-ba564fef13b0?source=post_page-----121b3f444d2f--------------------------------)
    [## The Power of Linux Cgroups: How Containers Take Control of Their Resources'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing Container Resource Allocation with Linux Control Groups
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/the-power-of-linux-cgroups-how-containers-take-control-of-their-resources-ba564fef13b0?source=post_page-----121b3f444d2f--------------------------------)
    [](/exploring-the-power-of-overlay-file-systems-in-linux-containers-d846724ec06d?source=post_page-----121b3f444d2f--------------------------------)
    [## Exploring the Power of Overlay File Systems in Linux Containers
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Unlocking the Potential of Containerization with a unique yet simple idea of
    layering
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/exploring-the-power-of-overlay-file-systems-in-linux-containers-d846724ec06d?source=post_page-----121b3f444d2f--------------------------------)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: This educational blog post will guide you through building lightweight, isolated
    environments without relying on Docker. You won’t be able to replace Docker just
    yet! This is only for educational purposes. Docker offers much more than creating
    containers. However, the journey is what matters.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Are you ready to unlock the secrets of your OS and take your understanding of
    containerization to the next level? Buckle up, grab a cup of coffee, and dive
    into the exciting world of containerization without Docker!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[Learning Rate](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=dockerless)
    is a newsletter for those who are curious about the world of MLOps. MLOps is a
    broad field that strives to bring ML models to production in an efficient and
    rerpoducible way. Containers play a crucial role in the pipeline. If you want
    to learn more about topics like this subscribe [here](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=dockerless).
    You’ll hear from me on the last Saturday of every month with updates and thoughts
    on the latest MLOps news and articles!'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A Quick Recap
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we’ll dive headfirst into the exciting world of containers.
    In five minutes, you should be able to run your own Linux distribution in a container-like
    environment you’ve built yourself.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'As we said in the foreword, we have already examined the primitives we’ll use
    today. But for completeness'' sake, here’s a quick recap:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Namespaces: Namespaces are kernel features that allow you to create isolated
    environments within a single Linux system. Each namespace has its own view of
    the system, meaning that processes within a namespace are unaware of the processes
    running in other namespaces.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Control Groups: Linux control groups, or cgroups, is a kernel feature that
    allows an administrator to allocate resources such as CPU, memory, and I/O bandwidth
    to groups of processes.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Overlay File Systems: Overlay file systems enable multiple lower layers to
    be stacked on top of each other, creating a unified view of the data. In the context
    of Linux containers, an overlay file system is used to layer the changes made
    by a container on top of a base image while preserving the original image intact.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, now that we know what each of the tools we’ll use do, let’s put them to
    work.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Headfirst
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Coming in somewhere between 1 and 5 Mb in on-disk size (depending on the variant),
    BusyBox is a very good ingredient to craft space-efficient distributions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a BusyBox container, you’d normally run the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command would give you a shell inside a BusyBox container. We will try
    to achieve something similar today without running the `docker run` command.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: So, first things first, let’s download the image. For this, we’ll use a tool
    called [Skopeo](https://github.com/containers/skopeo). This series of articles
    is all about containers; thus, let’s use their might to download the image we
    want without installing Skopeo.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a directory named `busybox-image` anywhere you like, and run the following
    command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is the output you should see:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f2dfa263c25b982a20912d0c6e18971e.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'This command will give the directory you created as a volume in the Skopeo
    container. Then, it will instruct the container to download the BusyBox image
    in the directory. Thus, if you now run an `ls` command, you will be able to see
    the downloaded image in the directory you created:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/1719edf61cbc32bf0c61e7d3a2ec95e6.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll see a bunch of files there. What we care about is the largest file in
    size. Let’s untar it in a new directory. First, create a new directory and `cd`
    into it:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now untar the image inside the `busybox` directory:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the`ls` command again; you’ll see the root file system of the BusyBox image:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/457463c187912d732281046f3f3878d0.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to the parent directory and create three new ones: an `upper` directory,
    a `workdir`, and a `root`. We have covered what these are in the post about overlay
    file systems:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, let’s create our overlay file system:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Great! Now, if you run `ls -la root`, you should be able to see the contents
    of the BusyBox image inside the `root` directory you created. As we saw in the
    overlay file system tutorial, the `root` directory provides a unified view of
    the `lower` and `upper` directories. However, the `lower` directory remains read-only,
    and any changes you make will be recorded in the `upper` directory. This will
    keep our `busybox` base image intact.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let’s create our container-like environment using the following commands:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'That’s it! You did it! Let’s run `uname -r` to verify that we’re in a BusyBox
    container:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4b536f17541d1b7cf589ca23928732a3.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'You can even run a well-known command like `ping` and observe that you just
    called the BusyBox version of it:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/27e6728b405cd03040828bcb2fde0499.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Now, there are a lot of things missing. For example, you have no access to the
    internet. Running `ping` or `wget` will have no result. But that’s for another
    time. As we said, this won’t be a production-ready environment but an effort to
    demystify a few things that Docker does.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，仍然有很多东西缺失。例如，你没有访问互联网的权限。运行 `ping` 或 `wget` 将不会有任何结果。但这需要等到另一个时间来处理。正如我们所说，这将不是一个生产就绪的环境，而是为了揭示
    Docker 做的一些事情。
- en: If you’d like to constrain the resource consumption of your container toy, look
    into the Control Groups article linked in the introduction. It’s easier than you
    think.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想限制你的容器玩具的资源消耗，可以查看介绍中链接的控制组文章。这比你想象的要简单。
- en: Conclusion
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In conclusion, creating a container-like environment without Docker is a valuable
    skill for any developer. Whether you’re looking to explore alternative technologies,
    address compatibility issues, or simply broaden your understanding of containerization,
    the techniques and tools covered in this article will help you achieve your goals.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，创建一个类似容器的环境而不使用 Docker 对任何开发者来说都是一种有价值的技能。无论你是想探索替代技术、解决兼容性问题，还是仅仅扩展对容器化的理解，这篇文章中涵盖的技术和工具都将帮助你实现目标。
- en: By following this step-by-step tutorial, you can build your own lightweight,
    isolated environments confidently and easily. Will it work? Not yet! Hang in there
    until the next article!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这个逐步教程，你可以自信且轻松地构建自己的轻量级、隔离的环境。会成功吗？还不能！请耐心等待下一篇文章！
- en: Remember, containerization is a constantly evolving field, and there’s always
    more to learn. So, keep exploring, experimenting, and pushing the limits of what’s
    possible!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，容器化是一个不断发展的领域，总有更多需要学习的东西。所以，继续探索、实验，并推动可能性极限吧！
- en: About the Author
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于作者
- en: My name is [Dimitris Poulopoulos](https://www.dimpo.me/?utm_source=medium&utm_medium=article&utm_campaign=dockerless),
    and I’m a machine learning engineer working for [Arrikto](https://www.arrikto.com/).
    I have designed and implemented AI and software solutions for major clients such
    as the European Commission, Eurostat, IMF, the European Central Bank, OECD, and
    IKEA.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我的名字是 [Dimitris Poulopoulos](https://www.dimpo.me/?utm_source=medium&utm_medium=article&utm_campaign=dockerless)，我是
    [Arrikto](https://www.arrikto.com/) 的机器学习工程师。我为欧洲委员会、欧洲统计局、国际货币基金组织、欧洲中央银行、经济合作与发展组织和宜家等主要客户设计和实施了人工智能和软件解决方案。
- en: If you are interested in reading more posts about Machine Learning, Deep Learning,
    Data Science, and DataOps, follow me on [Medium](https://towardsdatascience.com/medium.com/@dpoulopoulos/follow),
    [LinkedIn](https://www.linkedin.com/in/dpoulopoulos/), or [@james2pl](https://twitter.com/james2pl)
    on Twitter.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣阅读更多关于机器学习、深度学习、数据科学和数据操作的文章，可以在 [Medium](https://towardsdatascience.com/medium.com/@dpoulopoulos/follow)、[LinkedIn](https://www.linkedin.com/in/dpoulopoulos/)
    或 Twitter 上关注 [@james2pl](https://twitter.com/james2pl)。
- en: Opinions expressed are solely my own and do not express the views or opinions
    of my employer.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所表达的观点仅代表我个人，并不代表我雇主的观点或意见。
