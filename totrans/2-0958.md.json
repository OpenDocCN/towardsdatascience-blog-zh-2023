["```py\nimport names\n\ndisplay(names.get_full_name('male'))\ndisplay(names.get_first_name())\ndisplay(names.get_last_name())\n\ndisplay(names.get_full_name('female'))\ndisplay(names.get_first_name())\ndisplay(names.get_last_name())\n```", "```py\n'Gerald Paez'\n'Matthew'\n'Wiese'\n'Dana Mcmullen'\n'Heather'\n'Oxley'\n\n'Walter Walters'\n'Connie'\n'Vildosola'\n'Nancy Correra'\n'Aaron'\n'Dawes'\n\n'Randy Meli'\n'Yvonne'\n'Owen'\n'Loretta Patague'\n'Sidney'\n'Oliver'\n```", "```py\n!pip install uuid\n```", "```py\nimport uuid\n\nstr(uuid.uuid4())\n```", "```py\n'54487fd7-0632-450e-b6e3-bcc54bc83133'\n```", "```py\nfrom faker import Faker\n\nfake = Faker()\nfake.simple_profile(sex='M')  # use 'F' for female\n```", "```py\n{'username': 'lisa38',\n 'name': 'Brandon Gibson',\n 'sex': 'M',\n 'address': '406 Brandi Inlet\\nWest Christopherville, PR 41632',\n 'mail': 'johnsondesiree@gmail.com',\n 'birthdate': datetime.date(2008, 9, 10)}\n```", "```py\nfake.date_between(start_date='-60y', end_date='-18y')\n```", "```py\ndatetime.date(1963, 4, 18)\n```", "```py\nfake.date_between(start_date='-60y', end_date='-18y').strftime('%Y-%m-%d')\n# '1973-07-16'\n```", "```py\nfake.local_latlng(country_code = 'US')\n```", "```py\n('33.72255', '-116.37697', 'Palm Desert', 'US', 'America/Los_Angeles')\n```", "```py\nfake.local_latlng(country_code = 'US', coords_only=True)\n```", "```py\nfake.local_latlng(country_code = 'AU')\n# ('-25.54073', '152.70493', 'Maryborough', 'AU', 'Australia/Brisbane')\n```", "```py\nfake.location_on_land(coords_only=True)\n# ('54.58048', '16.86194')\n```", "```py\ndisplay(fake.address())   \n# '910 Jason Green Apt. 954\\nJonesland, IL 76881'\n\ndisplay(fake.current_country())    # based on the address returned by address()\n# 'United States'\n\ndisplay(fake.city())\n# 'North Carolyn'\n\ndisplay(fake.country())\n# 'Holy See (Vatican City State)'\n\ndisplay(fake.country_code())   \n# MU\n```", "```py\nfake = Faker(['zh_CN'])   # Chinese in China locale\nfake.address()\n```", "```py\n'内蒙古自治区飞市兴山深圳路b座 104347'\n```", "```py\n'洪凤兰'\n'辽宁省波县永川王路s座 292815'\n\"People's Republic of China\"\n\n'吕峰'\n'广东省凤英市吉区李路t座 385879'\n\"People's Republic of China\"\n\n'何秀梅'\n'浙江省齐齐哈尔市上街潮州路M座 218662'\n\"People's Republic of China\"\n```", "```py\n'越南'\n```", "```py\nfake = Faker(['zh_CN'])\ndisplay(fake.first_name_male())\ndisplay(fake.last_name_male())\ndisplay(fake.name())\n```", "```py\n'龙'\n'马'\n'雷春梅'\n```", "```py\nfrom faker import Faker\nimport random\nimport uuid\n\nuuids = []\nusernames = []\nlatitudes = []\nlongitudes = []\ngenders = []\ncountries = []\ndobs = []\nn = 1000\n\nfake = Faker()\ncountry_codes = ['US','GB','AU','CN','FR','CH','DE']\nfor gender in ['M','F']:\n    for i in range(n // 2):                 # 500 males and 500 females\n        # uuids\n        uuids.append(str(uuid.uuid4()))\n\n        # username and sex\n        profile = fake.simple_profile(sex=gender)\n        usernames.append(profile['username'])\n        genders.append(profile['sex'])\n\n        # dob\n        dobs.append(fake.date_between(start_date='-78y', end_date='-18y'))\n\n        # lat and lng, and country\n        location = fake.local_latlng(country_code = country_codes[random.randint(0, len(country_codes) -1)])\n        latitudes.append(location[0])\n        longitudes.append(location[1])\n        countries.append(location[3]) \n```", "```py\nimport pandas as pd\ndf = pd.DataFrame(data = [uuids, usernames, genders, countries, latitudes, longitudes, dobs])\ndf = df.T\ndf.columns = ['uuid', 'username', 'gender', 'country', 'latitude', 'longitude', 'dob']\ndf\n```", "```py\nimport folium                    # pip install folium\n\nmymap = folium.Map(location = [22.827806844385826, 4.363328554220703], \n                   width = 950, \n                   height = 600,\n                   zoom_start = 2, \n                   tiles = 'openstreetmap')\n\nfolium.TileLayer('Stamen Terrain').add_to(mymap)\nfolium.TileLayer('Stamen Toner').add_to(mymap)\nfolium.TileLayer('Stamen Water Color').add_to(mymap)\nfolium.TileLayer('cartodbpositron').add_to(mymap)\nfolium.TileLayer('cartodbdark_matter').add_to(mymap)\nfolium.LayerControl().add_to(mymap)\n\nfor lat, lng in zip(df['latitude'], df['longitude']):    \n    station = folium.CircleMarker(\n            location = [lat, lng],\n            radius = 5,\n            color = 'red',\n            fill = True,\n            fill_color = 'yellow',\n            fill_opacity = 0.3)   \n\n    # add the circle marker to the map\n    station.add_to(mymap)\nmymap\n```", "```py\ndf.groupby('country').count().plot.pie(y='username')\n```", "```py\ntotal = df.shape[0]\ndef fmt(x):    \n    return '{:.2f}%\\n({:.0f})'.format(x, total * x / 100)\n\ndf.groupby('country').count().plot.pie(y='username', autopct=fmt)\n```", "```py\nfrom matplotlib import cm\nimport numpy as np\n\ncolor = cm.inferno_r(np.linspace(.4, .8, len(country_codes)))\n\ndf.groupby('country').count().plot.bar(y = 'username',\n                                       color = color, \n                                       legend = False\n                                      )\n```", "```py\nfrom datetime import datetime, date\nfrom dateutil import relativedelta\n\ndef cal_age(born):\n    return relativedelta.relativedelta(date.today(), born).years\n\ndf['age'] = df['dob'].apply(cal_age)\ndf\n```", "```py\nax = df['age'].hist(bins=15, edgecolor='black', linewidth=1.2, color='yellow')\nax.set_xlabel(\"Age\")\nax.set_ylabel(\"Total\")\nax.set_xticks(range(18,80,5))\nax.set_title(\"Users age distribution\")\n```"]