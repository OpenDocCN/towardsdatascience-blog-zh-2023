- en: 'Design Patterns with Python for Machine Learning Engineers: Prototype'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/design-patterns-with-python-for-machine-learning-engineers-prototype-fcc1358a862d](https://towardsdatascience.com/design-patterns-with-python-for-machine-learning-engineers-prototype-fcc1358a862d)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/3f4030d397da6e9736107739793eda2b.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Robert Katzki](https://unsplash.com/@ro_ka?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to use the Prototype design pattern to enhance your code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@marcellopoliti?source=post_page-----fcc1358a862d--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----fcc1358a862d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fcc1358a862d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fcc1358a862d--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----fcc1358a862d--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fcc1358a862d--------------------------------)
    ¬∑6 min read¬∑Dec 5, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is not the first post blog I am writing about design patterns. In my recent
    posts, I‚Äôve received positive feedback on this topic because apparently **using
    design patterns is not a common practice in the Python world**. I think people
    should learn these patterns to enhance and improve their code. Moreover, today
    AI software is heavily based on Python, so I think that these tutorials are useful
    to all the people dealing with AI. I will run my code on the [Deepnote](https://deepnote.com/):
    which is a cloud-based notebook that‚Äôs great for collaborative data science projects.'
  prefs: []
  type: TYPE_NORMAL
- en: What is a design pattern?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Design patterns provide well-defined solutions to problems that recur very often
    when designing software. Rather than solve the same issue over and over again,
    these patterns offer reusable solutions, accelerating the whole development process.
  prefs: []
  type: TYPE_NORMAL
- en: Design patterns essentially provide a robust and tested blueprint to address
    specific problems optimally, making our lives easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are various types of design patterns, generally categorized into three
    groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creational Patterns**: These focus on the creation of objects, providing
    mechanisms for object creation while keeping the system flexible and efficient.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Structural Patterns**: They revolve around the composition of classes and
    objects, dealing with the relationships between different components to form larger
    structures.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Behavioural Patterns**: This category governs how classes and objects interact,
    outlining the distribution of responsibilities among them. It defines protocols
    for communication and collaboration within a software system.‚Äù'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/2b742b2c8da6a9328e679b156bfc7506.png)'
  prefs: []
  type: TYPE_IMG
- en: Design Patterns (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: The Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we work on big projects using Python, we generally **adopt an object-oriented
    programming methodology** to make the code more readable. Usually, we **end up
    having a lot of classes and tons of objects.**
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes what happens is that **we want to create an exact copy of an object**.
    How do you do that? In a **naive manner**, you can instantiate another object
    of the same class and then **copy each internal field of the object you want to
    clone**. But this process is slow and boring.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, there could be another problem**. Sometimes you cannot instantiate
    an object that easily, because calling the constructor of a class can be costly**.
    Think for example the case in which in the constructor you run an API request
    to an external service that you pay.
  prefs: []
  type: TYPE_NORMAL
- en: 'How can we solve this? Well‚Ä¶ with design patterns, in particular with a creational
    one: the *prototype*.'
  prefs: []
  type: TYPE_NORMAL
- en: The Prototype Design Pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, we **need to create an abstract class (or interface) with the
    clone() abstract method**. All the classes that we create will then have to instantiate
    this interface and define how to clone an object of the class itself. In this
    way, **the duty of creating a clone is not of the class but of the object itself.**
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5cb19725e43a126e1554c2fd2467cc74.png)'
  prefs: []
  type: TYPE_IMG
- en: Prototype Design Pattern
  prefs: []
  type: TYPE_NORMAL
- en: I am now going to **create an abstract class by using the ABC Python library**.
  prefs: []
  type: TYPE_NORMAL
- en: The following class will define a vehicle prototype with some attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now we can create some class that will implement this interface, and to do that
    in particular they have to implement the clone() abstract class. **In Python in
    order to create a copy we can use the deepcopy()** or a shallow copy() method
    of the copy library.
  prefs: []
  type: TYPE_NORMAL
- en: To be specific, a shallow copy duplicates references to non-primitive fields,
    while a deep copy generates new instances with identical data.
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs now define a concrete class. **I am going to make the constructor sleep
    for 2 seconds to simulate the costly call of the constructor as explained in the
    introduction.**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Every time that I want to instantiate a RaceCar object it is going to take 2
    seconds, because of the sleep method. We can monitor this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Nice! We created a race car, wasn‚Äôt that hard. Now **I want to make 5 copies**
    of the car because my purpose is to develop a video game with a lot of cars. We
    can simply do the same iterating in a for loop.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**If you run this code it will take 2s*5 so 10s in total!** üòµ‚Äçüí´'
  prefs: []
  type: TYPE_NORMAL
- en: What if we use instead the clone method? Let‚Äôs try it out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This code will take only 2s to run, which is the time needed to instantiate
    the first car. **The creation of the other cars will take no time.** Fantastic!
  prefs: []
  type: TYPE_NORMAL
- en: A Machine Learning Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How can this model used in a machine-learning script? Let‚Äôs suppose that you
    instantiate a model of a predefined PyTorch class like the following.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Once the class is defined you can create your model object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, you want to implement a variation of your model, maybe you‚Äôre interested
    in changing only one or two parameters. What you can do is create a clone of the
    first model and change manually those parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Done, easy right? üòÅ
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, I explained why you should adopt design patterns in Python.
    A design pattern is not something you can use in only few programming languages
    (e.g. Java), but it is a theoretical solution to a common problem. Instantiating
    a lot of objects with the same attributes can be slow and costly, that‚Äôs why by
    specifying a clone method in an interface we can mitigate this problem and create
    as many clones as we want.
  prefs: []
  type: TYPE_NORMAL
- en: As a tip, **what you can do to improve your skills as an AI engineer is to improve
    your skills as a software engineer!**
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in this article follow me on Medium! üòÅ
  prefs: []
  type: TYPE_NORMAL
- en: üíº [Linkedin](https://www.linkedin.com/in/marcello-politi/) Ô∏è| üê¶ [Twitter](https://twitter.com/_March08_)
    | [üíª](https://emojiterra.com/laptop-computer/) [Website](https://marcello-politi.super.site/)
  prefs: []
  type: TYPE_NORMAL
- en: 'You might be interested in some of my past articles about design patterns :'
  prefs: []
  type: TYPE_NORMAL
- en: '[Design Patterns with Python for Machine Learning Engineers: Observer](/design-patterns-with-python-for-machine-learning-engineers-observer-23cde7ecb2ed)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Design Patterns with Python for Machine Learning Engineers: Abstract Factory](/design-patterns-with-python-for-machine-learning-engineers-abstract-factory-f761f89a3c12)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Design Patterns with Python for Machine Learning Engineers: Builder](https://medium.com/@marcellopoliti/design-patterns-with-python-for-machine-learning-engineers-builder-45b8e749f134)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
