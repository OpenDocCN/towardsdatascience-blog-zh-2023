- en: 'Design Patterns with Python for Machine Learning Engineers: Prototype'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 《Python 机器学习工程师的设计模式：原型》
- en: 原文：[https://towardsdatascience.com/design-patterns-with-python-for-machine-learning-engineers-prototype-fcc1358a862d](https://towardsdatascience.com/design-patterns-with-python-for-machine-learning-engineers-prototype-fcc1358a862d)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/design-patterns-with-python-for-machine-learning-engineers-prototype-fcc1358a862d](https://towardsdatascience.com/design-patterns-with-python-for-machine-learning-engineers-prototype-fcc1358a862d)
- en: '![](../Images/3f4030d397da6e9736107739793eda2b.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3f4030d397da6e9736107739793eda2b.png)'
- en: Photo by [Robert Katzki](https://unsplash.com/@ro_ka?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[Robert Katzki](https://unsplash.com/@ro_ka?utm_source=medium&utm_medium=referral)在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Learn how to use the Prototype design pattern to enhance your code
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习如何使用原型设计模式来增强你的代码
- en: '[](https://medium.com/@marcellopoliti?source=post_page-----fcc1358a862d--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----fcc1358a862d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fcc1358a862d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fcc1358a862d--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----fcc1358a862d--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@marcellopoliti?source=post_page-----fcc1358a862d--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----fcc1358a862d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fcc1358a862d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fcc1358a862d--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----fcc1358a862d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fcc1358a862d--------------------------------)
    ·6 min read·Dec 5, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fcc1358a862d--------------------------------)
    ·6 min 阅读·2023年12月5日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: 'This is not the first post blog I am writing about design patterns. In my recent
    posts, I’ve received positive feedback on this topic because apparently **using
    design patterns is not a common practice in the Python world**. I think people
    should learn these patterns to enhance and improve their code. Moreover, today
    AI software is heavily based on Python, so I think that these tutorials are useful
    to all the people dealing with AI. I will run my code on the [Deepnote](https://deepnote.com/):
    which is a cloud-based notebook that’s great for collaborative data science projects.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是我第一次写关于设计模式的博客文章。在我最近的文章中，我收到了关于这个话题的积极反馈，因为显然**在Python世界中使用设计模式并不常见**。我认为人们应该学习这些模式，以增强和改进他们的代码。此外，今天的AI软件严重依赖Python，所以我认为这些教程对所有从事AI的人都有用。我将在[Deepnote](https://deepnote.com/)上运行我的代码：这是一个基于云的笔记本，非常适合协作数据科学项目。
- en: What is a design pattern?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是设计模式？
- en: Design patterns provide well-defined solutions to problems that recur very often
    when designing software. Rather than solve the same issue over and over again,
    these patterns offer reusable solutions, accelerating the whole development process.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式为那些在软件设计中经常出现的问题提供了明确的解决方案。这些模式提供可重用的解决方案，避免了一次次重复解决同一问题，加快了整个开发过程。
- en: Design patterns essentially provide a robust and tested blueprint to address
    specific problems optimally, making our lives easier.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式本质上提供了一个经过验证的、稳健的蓝图，以最佳方式解决特定问题，使我们的工作更轻松。
- en: 'There are various types of design patterns, generally categorized into three
    groups:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式有多种类型，通常分为三大类：
- en: '**Creational Patterns**: These focus on the creation of objects, providing
    mechanisms for object creation while keeping the system flexible and efficient.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建型模式**：这些模式关注于对象的创建，提供对象创建机制，同时保持系统的灵活性和高效性。'
- en: '**Structural Patterns**: They revolve around the composition of classes and
    objects, dealing with the relationships between different components to form larger
    structures.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**结构型模式**：这些模式围绕类和对象的组成展开，处理不同组件之间的关系以形成更大的结构。'
- en: '**Behavioural Patterns**: This category governs how classes and objects interact,
    outlining the distribution of responsibilities among them. It defines protocols
    for communication and collaboration within a software system.”'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**行为模式**：这一类别管理类和对象如何交互，概述了它们之间的责任分配。它定义了在软件系统内进行通信和协作的协议。'
- en: '![](../Images/2b742b2c8da6a9328e679b156bfc7506.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2b742b2c8da6a9328e679b156bfc7506.png)'
- en: Design Patterns (Image by Author)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式（图片来源：作者）
- en: The Problem
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: When we work on big projects using Python, we generally **adopt an object-oriented
    programming methodology** to make the code more readable. Usually, we **end up
    having a lot of classes and tons of objects.**
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在使用 Python 处理大型项目时，我们通常**采用面向对象的编程方法**来使代码更具可读性。通常，我们**最终会有很多类和大量的对象。**
- en: Sometimes what happens is that **we want to create an exact copy of an object**.
    How do you do that? In a **naive manner**, you can instantiate another object
    of the same class and then **copy each internal field of the object you want to
    clone**. But this process is slow and boring.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有时发生的情况是**我们想要创建一个对象的精确副本**。你怎么做？以**简单的方式**，你可以实例化另一个相同类的对象，然后**复制你想克隆的对象的每个内部字段**。但这个过程很慢且乏味。
- en: Moreover, there could be another problem**. Sometimes you cannot instantiate
    an object that easily, because calling the constructor of a class can be costly**.
    Think for example the case in which in the constructor you run an API request
    to an external service that you pay.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还可能存在另一个问题**。有时你不能轻易实例化一个对象，因为调用一个类的构造函数可能是昂贵的**。例如，假设在构造函数中你运行一个需要支付费用的外部服务的
    API 请求。
- en: 'How can we solve this? Well… with design patterns, in particular with a creational
    one: the *prototype*.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何解决这个问题？嗯……通过设计模式，特别是使用一种创建型模式：*原型模式*。
- en: The Prototype Design Pattern
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原型设计模式
- en: First of all, we **need to create an abstract class (or interface) with the
    clone() abstract method**. All the classes that we create will then have to instantiate
    this interface and define how to clone an object of the class itself. In this
    way, **the duty of creating a clone is not of the class but of the object itself.**
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们**需要创建一个包含 clone() 抽象方法的抽象类（或接口）**。我们创建的所有类都必须实现此接口，并定义如何克隆该类本身的对象。这样，**克隆的职责不在于类，而在于对象本身。**
- en: '![](../Images/5cb19725e43a126e1554c2fd2467cc74.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5cb19725e43a126e1554c2fd2467cc74.png)'
- en: Prototype Design Pattern
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 原型设计模式
- en: I am now going to **create an abstract class by using the ABC Python library**.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在将**使用 Python 的 ABC 库创建一个抽象类**。
- en: The following class will define a vehicle prototype with some attributes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下类将定义一个带有一些属性的车辆原型。
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now we can create some class that will implement this interface, and to do that
    in particular they have to implement the clone() abstract class. **In Python in
    order to create a copy we can use the deepcopy()** or a shallow copy() method
    of the copy library.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建一些实现此接口的类，为此，它们必须实现 clone() 抽象方法。**在 Python 中，为了创建副本，我们可以使用 deepcopy()**
    或 copy 库中的浅拷贝（shallow copy()）方法。
- en: To be specific, a shallow copy duplicates references to non-primitive fields,
    while a deep copy generates new instances with identical data.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，浅拷贝复制对非基本字段的引用，而深拷贝生成具有相同数据的新实例。
- en: Let’s now define a concrete class. **I am going to make the constructor sleep
    for 2 seconds to simulate the costly call of the constructor as explained in the
    introduction.**
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们定义一个具体的类。**我将让构造函数休眠 2 秒钟，以模拟如介绍中所述的构造函数的昂贵调用。**
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Every time that I want to instantiate a RaceCar object it is going to take 2
    seconds, because of the sleep method. We can monitor this.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我想实例化一个 RaceCar 对象时都需要 2 秒，因为有 sleep 方法。我们可以监控这个。
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Nice! We created a race car, wasn’t that hard. Now **I want to make 5 copies**
    of the car because my purpose is to develop a video game with a lot of cars. We
    can simply do the same iterating in a for loop.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！我们创建了一辆赛车，这并不难。现在**我想要制作 5 个副本**，因为我的目的是开发一个有很多汽车的视频游戏。我们可以简单地在 for 循环中做同样的事。
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**If you run this code it will take 2s*5 so 10s in total!** 😵‍💫'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你运行这段代码，它将花费 2s*5 即总共 10s！** 😵‍💫'
- en: What if we use instead the clone method? Let’s try it out.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们改用 clone 方法呢？我们来试试吧。
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code will take only 2s to run, which is the time needed to instantiate
    the first car. **The creation of the other cars will take no time.** Fantastic!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码只需 2 秒钟运行，这就是实例化第一辆车所需的时间。**其他汽车的创建将不会花费时间。** 太棒了！
- en: A Machine Learning Example
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机器学习示例
- en: How can this model used in a machine-learning script? Let’s suppose that you
    instantiate a model of a predefined PyTorch class like the following.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型如何在机器学习脚本中使用？假设你实例化了一个预定义的 PyTorch 类模型，如下所示。
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Once the class is defined you can create your model object.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了类，你就可以创建你的模型对象。
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, you want to implement a variation of your model, maybe you’re interested
    in changing only one or two parameters. What you can do is create a clone of the
    first model and change manually those parameters.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能想要对你的模型进行一些变化，也许你只对修改一两个参数感兴趣。你可以创建第一个模型的克隆，并手动更改这些参数。
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Done, easy right? 😁
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了，很简单吧？😁
- en: Final Thoughts
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的想法
- en: In this article, I explained why you should adopt design patterns in Python.
    A design pattern is not something you can use in only few programming languages
    (e.g. Java), but it is a theoretical solution to a common problem. Instantiating
    a lot of objects with the same attributes can be slow and costly, that’s why by
    specifying a clone method in an interface we can mitigate this problem and create
    as many clones as we want.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我解释了为什么你应该在 Python 中采用设计模式。设计模式不仅仅是你可以在少数编程语言中使用的东西（例如 Java），它是一种解决常见问题的理论方案。实例化许多具有相同属性的对象可能会很慢且昂贵，这就是为什么通过在接口中指定克隆方法，我们可以缓解这个问题并创建我们需要的任意数量的克隆。
- en: As a tip, **what you can do to improve your skills as an AI engineer is to improve
    your skills as a software engineer!**
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个提示，**提升你作为 AI 工程师的技能的方式就是提升你作为软件工程师的技能！**
- en: If you are interested in this article follow me on Medium! 😁
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这篇文章感兴趣，请在 Medium 上关注我！😁
- en: 💼 [Linkedin](https://www.linkedin.com/in/marcello-politi/) ️| 🐦 [Twitter](https://twitter.com/_March08_)
    | [💻](https://emojiterra.com/laptop-computer/) [Website](https://marcello-politi.super.site/)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 💼 [Linkedin](https://www.linkedin.com/in/marcello-politi/) ️| 🐦 [Twitter](https://twitter.com/_March08_)
    | [💻](https://emojiterra.com/laptop-computer/) [网站](https://marcello-politi.super.site/)
- en: 'You might be interested in some of my past articles about design patterns :'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会对我过去关于设计模式的一些文章感兴趣：
- en: '[Design Patterns with Python for Machine Learning Engineers: Observer](/design-patterns-with-python-for-machine-learning-engineers-observer-23cde7ecb2ed)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习工程师的 Python 设计模式：观察者](/design-patterns-with-python-for-machine-learning-engineers-observer-23cde7ecb2ed)'
- en: '[Design Patterns with Python for Machine Learning Engineers: Abstract Factory](/design-patterns-with-python-for-machine-learning-engineers-abstract-factory-f761f89a3c12)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习工程师的 Python 设计模式：抽象工厂](/design-patterns-with-python-for-machine-learning-engineers-abstract-factory-f761f89a3c12)'
- en: '[Design Patterns with Python for Machine Learning Engineers: Builder](https://medium.com/@marcellopoliti/design-patterns-with-python-for-machine-learning-engineers-builder-45b8e749f134)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习工程师的 Python 设计模式：建造者](https://medium.com/@marcellopoliti/design-patterns-with-python-for-machine-learning-engineers-builder-45b8e749f134)'
