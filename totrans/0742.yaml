- en: 'Dirichlet Distribution: The Underlying Intuition and Python Implementation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/dirichlet-distribution-the-underlying-intuition-and-python-implementation-59af3c5d3ca2](https://towardsdatascience.com/dirichlet-distribution-the-underlying-intuition-and-python-implementation-59af3c5d3ca2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Everything you need to know about the Dirichlet distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://reza-bagheri79.medium.com/?source=post_page-----59af3c5d3ca2--------------------------------)[![Reza
    Bagheri](../Images/7c5a7dc9e6e31048ce31c8d49055987c.png)](https://reza-bagheri79.medium.com/?source=post_page-----59af3c5d3ca2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----59af3c5d3ca2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----59af3c5d3ca2--------------------------------)
    [Reza Bagheri](https://reza-bagheri79.medium.com/?source=post_page-----59af3c5d3ca2--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----59af3c5d3ca2--------------------------------)
    ·27 min read·Aug 1, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d401dd1e32b5386d115f5f45826440fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image source: [https://pixabay.com/vectors/cubes-dice-platonic-solids-numbers-160400/](https://pixabay.com/vectors/cubes-dice-platonic-solids-numbers-160400/)'
  prefs: []
  type: TYPE_NORMAL
- en: The Dirichlet distribution is a generalization of the beta distribution. In
    Bayesian statistics, it is commonly used as the conjugate prior to the multinomial
    distribution, hence it can be used to model the uncertainty of a random vector
    of probabilities. It has a wide range of applications including Bayesian analysis,
    text mining, statistical genetics, and nonparametric inference. This article gives
    an intuitive introduction to Dirichlet distribution and shows how it is connected
    to the multinomial distribution. In addition, it shows how it can be modeled and
    visualized in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '**Definition**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose that the continuous random variables *X*₁, *X*₂, …*Xₖ* (*k*≥2) form
    the random vector ***X*** defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2badf37a90938009e80bdb08529e453a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We also define the vector ***α*** as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/edebc9c0398e18fdfb65ff9db3d3b9bc.png)'
  prefs: []
  type: TYPE_IMG
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d80069db2690a24ca16772c9735581b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now the random vector ***X*** is said to have *Dirichlet distribution* with
    parameter ***α*** if it has the following joint PDF:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ebb95005954b232af99dee7d20387b43.png)'
  prefs: []
  type: TYPE_IMG
- en: The function B(***α***) is called the *multivariate* *beta function* and is
    defined as
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d8ddc644727cbf8a1dcefda6397b8fb3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'where Г(*x*) is the gamma function. If the random vector ***X*** has a Dirichlet
    distribution with parameter ***α***, it is denoted by ***X*** ~ Dir(***α***).
    The multivariate beta function is included in the joint PDF to normalize it. The
    joint PDF should integrate to 1 over its domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/95afa4275082e9598e960cadf411433f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Hence, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ed6529ee755626f0afbf5b80046f1db6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Based on Equation 1, the values that the random variables *X*₁, *X*₂, …*Xₖ*
    take should meet the following conditions to have *f***ₓ**(***x***)>0:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7e1ec62ff43e62b50ef856bf367dcafe.png)'
  prefs: []
  type: TYPE_IMG
- en: These conditions define the *support* of the Dirichlet distribution. The support
    of ***X***, and of its distribution, is the set of all ***x*** (the values that
    ***X*** can take) where *f***ₓ**(***x***)>0\. If ***X*** has *k* elements, the
    support of ***X*** with a Dirichlet distribution is a *k*-1 dimensional *simplex*.
    A simplex is a bounded linear manifold that is created because of the constraints
    of Equation 3\. A simplex is the generalization of the notion of a triangle to
    higher dimensions. Hence, a *k*-1 dimensional simplex can be thought of as a *k*-1
    dimensional triangle which lies in a *k*-dimensional space.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if *k*=2, then the support of ***X*** is the 1-d simplex shown
    in Figure 1 (left). It is a straight line that touches each axis at a point 1
    unit away from the origin. For each point on this line, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1db12253f21dcde52287e2f96a49aa03.png)'
  prefs: []
  type: TYPE_IMG
- en: For *k*=3, then the support of ***X*** is the 2-d simplex shown in Figure 1
    (right). Now it is a triangle that touches each axis at a point 1 unit away from
    the origin.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5ca6946080d9e82b734d028a02857ed4.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1 (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'For each point on the surface of this triangle, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e911b8e900aab37ca329b00d39191c5d.png)'
  prefs: []
  type: TYPE_IMG
- en: Let the random vector
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2badf37a90938009e80bdb08529e453a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'has a Dirichlet distribution with the parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/edebc9c0398e18fdfb65ff9db3d3b9bc.png)'
  prefs: []
  type: TYPE_IMG
- en: And let
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e10286164e5d097a6083200b8eccf504.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, it can be shown that the mean of ***X*** is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/01d94aca4c6ac3f42eb7f7e369185b7e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It can be also shown that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b428305ac29ad9482aff1db4baede1c1.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Intuition**'
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned before, the Dirichlet distribution is commonly used as the conjugate
    prior for the multinomial distribution. Hence, to understand the intuition behind
    it, first, we need to review the multinomial distribution. Suppose that the discrete
    random vector ***X*** is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2badf37a90938009e80bdb08529e453a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And let the vector ***p*** be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/597eb91674761bc4e8f0e64cc45698f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then ***X*** is said to have the multinomial distribution with parameters *n*
    and ***p*** if it has the following joint PMF:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/78cb26b2cb78594406394c72e40b9991.png)'
  prefs: []
  type: TYPE_IMG
- en: Multinomial distribution can be used to model a *k*-sided die. Suppose that
    we have a *k*-sided die and roll it *n* times. Let *pᵢ* denote the probability
    of getting side *i*, and let the random variable *Xᵢ* represent the total number
    of times that side *i* is observed (*i*=1…*k*). Then the random vector
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2badf37a90938009e80bdb08529e453a.png)'
  prefs: []
  type: TYPE_IMG
- en: has a multinomial distribution with parameters *n* and
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/597eb91674761bc4e8f0e64cc45698f3.png)'
  prefs: []
  type: TYPE_IMG
- en: This is demonstrated in Figure 2.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1f308405453930cb5be7b120f2a8633a.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2 (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now suppose that we do not know the values of *pᵢ* in vector ***p***. Hence,
    we don’t know the probability of getting each side of the *k*-sided die, and we
    want to infer it by observing the outcomes of *n* rolls of this die. The elements
    of ***p*** represent the probability of some mutually exclusive events, so we
    should have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f50f34ded99c35f004271471997ef16a.png)'
  prefs: []
  type: TYPE_IMG
- en: The value of ***p*** can be inferred using the *Bayesian approach*. Here, we
    assume that the unknown probability vector ***p*** is represented by the continuous
    random vector ***P***. The probability distribution of ***P*** is called the *prior
    distribution*. The prior distribution represents the prior knowledge or assumptions
    about the parameter ***P*** being estimated. After rolling the die, we can analyze
    the observed data and use it to update our belief about ***P***. Hence, we end
    up with a new distribution for ***P*** which is called the *posterior distribution*.
    The posterior distribution results from updating the prior probability distribution
    with the observed data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that random variable *Xᵢ* in the random vector ***X*** represents
    the total number of times that side *i* is observed. If we know the value of ***p***,
    we can calculate the probability of observing *X*₁=*m*₁, *X*₂=*m*₂, …*Xₖ*=*mₖ*
    after *n* rolls using the following conditional probability:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1f9257fe46c6db19625cc7eaa7eeb1ba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'where:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d0b3d2dfc990e0ecb6df95d78a46640b.png)![](../Images/7286ebcb8f3c5fac15df0bc79272213d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This conditional gives the probability of observing each side of the die for
    a specific number of times after *n* rolls assuming that we know the true value
    of ***P***. As mentioned before, the probability distribution of ***P*** is our
    prior distribution. We denote the joint PDF of this distribution by *f_****P***(***p***).
    Now, we can use Bayes’ rule to connect the prior and posterior joint PDFs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f64975b1eaa9aa8d5d0cdf845944da3f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here *f_****P***|***X*** (***p***|***X***=***m***) is the joint PDF of the
    posterior distribution. This distribution updates our belief about ***P*** after
    observing ***X***. We also call *P*(***X***=***m***|***p***) the likelihood, and
    it can be written as the PMF of a multinomial distribution with a known value
    of ***p***(Equation 4):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2f15581bd2006837ed36b459e5187544.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The denominator of Bayes’ rule is the probability of ***X***=***m***, and it
    is called the marginal PMF of ***X***:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cc6d0b47e85d4258a89ea0916d33bdea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Please note it is independent of the true value of ***p***. Now we assume that
    the prior distribution is a Dirichlet distribution with the parameter ***α***₁:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c4c37e90e1f775ee43e325f8f950c66e.png)'
  prefs: []
  type: TYPE_IMG
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d6ce5f1d51afd5d8e3f5ffdb9a726d6d.png)'
  prefs: []
  type: TYPE_IMG
- en: Remember that the random variables with a Dirichlet distribution should follow
    the conditions in Equation 3, and these conditions are exactly the same as the
    conditions of Equation 5\. In fact, the conditions in Equation 3 allow us to use
    the Dirichlet distribution for the random variables that represent the probability
    of mutually exclusive events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can use the Bayes’ rule (Equation 6) to write:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/418e868227eb5a117564c6229c3581f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here *c* is a constant that does not depend on *pᵢ* values. The posterior joint
    PDF should be normalized; hence we have the following condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/80b71fa8c3c66beb644eed7fade78eb8.png)'
  prefs: []
  type: TYPE_IMG
- en: By comparing Equations 7 and 8 with Equations 1 and 2, we conclude that the
    posterior distribution is a Dirichlet distribution with the parameter
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a341d75cb1d476ef88fc4b2540515956.png)'
  prefs: []
  type: TYPE_IMG
- en: 'and *c* is simply its normalizing factor, and we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/88c4cde864ad1f7ecea1943c9cb9c257.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we can write:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/edd226985bb40724fcc37018af64e701.png)'
  prefs: []
  type: TYPE_IMG
- en: So, if we assume that the prior has a Dirichlet distribution, then the posterior
    distribution of ***P*** after observing ***X***=***m*** is also a Dirichlet distribution.
    We only need to add the observed number of each side (*mᵢ*) to its corresponding
    parameter in the prior distribution (*αᵢ*) to get the parameters of the posterior
    distribution.
  prefs: []
  type: TYPE_NORMAL
- en: In Bayesian probability theory, If the posterior distribution belongs to the
    same family as the prior distribution, then the prior and posterior are referred
    to as *conjugate distributions*. Therefore, we conclude that the Dirichlet distribution
    is the conjugate prior to the multinomial distribution (Figure 3).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c96ca617fe8f7f1229cca6c2aec2ee71.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3 (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: One special case of the Dirichlet distribution is when
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e74030855bcc495979276dd393694a24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2c37ba9b37c4f048d44401175d103689.png)'
  prefs: []
  type: TYPE_IMG
- en: which means that
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c9ccda7f5fde9ddc013fbf29f693515a.png)'
  prefs: []
  type: TYPE_IMG
- en: is the same as the uniform distribution over its *k*-1 dimensional simplex since
    the joint PDF has the same value over the simplex.
  prefs: []
  type: TYPE_NORMAL
- en: '**Modeling and visualization in Python**'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `scipy` library to model Dirichlet distribution in Python. In
    `scipy`, Dirichlet distribution can be created using the object `dirichlet`. This
    object takes the parameter `alpha` which corresponds to ***α*** in Equation 1\.
    We can also pass `alpha` to the methods of this object instead. The method `pdf()`
    also takes the parameter `x` which corresponds to ***x*** in Equation 1 and returns
    the joint PDF of the distribution at `x`. We can also calculate the mean and variance
    of the distribution using the methods `mean()` and `var()`. For example, let:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5935c0207086f3bfabb27caa02a87885.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we want to calculate the mean of ***X*** and its joint PDF at [0.5, 0.3,
    0.2]ᵀ using the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If the value of `x` is outside the simplex, `pdf()` throws an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b12a46c92bf7e82419db89db477a8ea4.png)'
  prefs: []
  type: TYPE_IMG
- en: We can visualize the joint PDF of the Dirichlet when *k*=2 and 3 (*k* is the
    number of the elements of ***X***). As mentioned before, when we have 3 random
    variables in ***X*** (with Dirichlet distribution), the simplex is a 2-d triangle
    (Figure 1). We can calculate the contours of the joint PDF on the surface of this
    simplex and plot it in a 2-d plot with *barycentric coordinates* (Figure 4).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d0b4cf6d74749675587b2f5be7538a7f.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4 (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: The barycentric coordinates are the coordinates of a point with respect to a
    simplex in an affine space. They can give the location of a point with respect
    to a line, triangle, or tetrahedron instead of the global Cartesian coordinates.
    In a *k*-dimensional Cartesian coordinate system, the coordinates of a point can
    be expressed as the normalized weighted average of the edges of a *k*-1 dimensional
    simplex. Those weights then give the barycentric coordinates of the point relative
    to that simplex. Consider the 2-d space shown in Figure 5.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9dc499125921610ff548db6fa55af521.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5 (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'The 1-d simplex is the line segment between the endpoints [0,1] and [0,1].
    The coordinates of an arbitrary point ***p*** on this simplex can be expressed
    as the normalized weighted average of coordinates of the endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/47068359c366bcd7e40be16900502a6a.png)'
  prefs: []
  type: TYPE_IMG
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3d0f2050c861427acde6ab36db98211d.png)'
  prefs: []
  type: TYPE_IMG
- en: Here *λ*₁ is the distance of ***p*** from the endpoint [0,1] divided by the
    length of the simplex (*L*). Similarly, *λ*₂ is the distance of ***p*** from the
    endpoint [1,0] divided by *L*. The weights *λ*₁ and *λ*₂ are the barycentric coordinates
    of ***p*** relative to this simplex, and since the endpoints are just one unit
    away from the origin, they have the same values as the Cartesian coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, consider the 2-d simplex shown in Figure 6\. This simplex is a triangle
    formed by the endpoints [1,0,0], [0,1,0] and [0,0,1]. The coordinates of a point
    ***p*** on this simplex are equal to the normalized weighted average of the coordinates
    of these endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8ea24fca5e787855c4e16019e59d8f6c.png)'
  prefs: []
  type: TYPE_IMG
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/82fbe85bf54cd613528c8f96e7eac3de.png)![](../Images/4253dba4fa736e1ac0ad54d325751433.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6 (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: In this triangle, each node represents one of the coordinate axes *x*₁, *x*₂,
    or *x*₃. Suppose that we want to calculate the value of *x*₁. Let the length of
    each side be *L* (it is an equilateral triangle). To get the value of *x*₁, we
    draw a line that passes through ***p*** and is parallel to the side that doesn’t
    pass through the node represented by *x*₁ (here this side is *x*₂*x*₃). This line
    divides each of the remaining sides (*x*₁*x*₂ and *x*₁*x*₃) into two segments.
    On each of these sides, the length of the line segment which does not contain
    the node *x*₁ is *λ*₁*L* (Figure 6)*.* We can calculate the values of *λ*₂ and
    *λ*₃ similarly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we create a Python function that draws the contours of the joint PDF of
    the Dirichlet distribution on a 2-d simplex. Listing 1 imports all the libraries
    that we need later and defines the edges of this triangular simplex on a 2-d plot.
    These edges are stored in the list `edges`. Please note that this 2-d simplex
    is now plotted on a 2-d screen, hence all the edges are 2-dimensional. However,
    the barycentric coordinates of a point are still a weighted average of the Cartesian
    coordinates of these edges:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dab451bf7a5108843011a4b91e72b685.png)'
  prefs: []
  type: TYPE_IMG
- en: Here *H* is the height of the triangle (Figure 7).
  prefs: []
  type: TYPE_NORMAL
- en: We use the `matplotlib.tri` library to create a triangular mesh. The array `normal_vecs`
    keeps the normal vectors of each side of this triangle (the normal vector of each
    side is perpendicular to that side).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In Listing 2, the function `cart_to_bc()` converts the 2-d Cartesian coordinates
    of a point into the barycentric coordinates relative to the 2-d triangle defined
    by the edges in `edges`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Figure 7 shows how these calculations are done to calculate *λ*₃ (as an example).
    As this figure shows one edge of the triangle (***x***₁) is at the origin of the
    2-d Cartesian coordinate system. We can represent a point ***p*** on this triangle
    with vector ***x***₁***p***. From geometry, we know that
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/354177cf624981cd8707f98879973b6a.png)'
  prefs: []
  type: TYPE_IMG
- en: Where ***n*** is the normal vector of the side ***x***₁***x***₂. Hence, if we
    have the Cartesian coordinates of ***p***, the edges of the triangle, and the
    normal vector of each side, we can easily calculate the barycentric coordinates
    of ***p***.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/41fa71d84abcab86d00f6408b6ab99b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7 (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that this function doesn’t always return the exact barycentric
    coordinates. If a barycentric coordinate is outside the interval [1e-10 -10, 1–1e-10],
    then it is clipped to the interval edges using the `clip()` function in `numpy`.
    The reason for that will be explained later.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also have the function `bc_to_cart()` that converts the barycentric coordinates
    of this triangle to the Cartesian coordinates. The Cartesian coordinates of a
    point ***p*** are equal to the weighted average of the Cartesian coordinates of
    the edges of the triangle, and the barycentric coordinates are simply the weights:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dab451bf7a5108843011a4b91e72b685.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally listing 3 defines the function `plot_contours()` that draws the contours
    of the joint PDF of a Dirichlet distribution on this triangle. This function creates
    a triangular mesh on the Cartesian 2d space. Next, the barycentric coordinates
    of each point on this mesh are calculated. Then it uses the barycentric coordinates
    to calculate the joint PDF of that point. After calculating the joint PDF of all
    the points on the triangle, the contours are plotted. Please note that some points
    on the triangular mesh can be slightly out of the simple boundary. This means
    that *x*₁+*x*₂+*x*₃ for that point can be slightly less than zero or greater than
    1\. Passing such a point to the `pdf()` method of the `dirichlet` object throws
    an error. Hence, we clip the barycentric coordinates in `cart_to_bc()` to avoid
    this error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Let's try `plot_contours()`. We first plot the contours of
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/00f502b15f804340c982c11da81ccc1f.png)'
  prefs: []
  type: TYPE_IMG
- en: As mentioned before, it is the same as the uniform distribution over its 2-d
    simplex since the joint PDF has the same value over the simplex. Listing 4 plots
    the contours of the joint PDF, and the resulting plot is shown in Figure 8.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/38963084896ec1105c15b27faccce308.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8
  prefs: []
  type: TYPE_NORMAL
- en: As you see the joint PDF has the same value all over the simplex. Next, we plot
    the contours of
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/35b339bbaa93837fff3e44c2effe8ae4.png)'
  prefs: []
  type: TYPE_IMG
- en: as our second example in Listing 5\. The result is shown in Figure 9.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a7493ee0e421c84271d08d91d00124a8.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9
  prefs: []
  type: TYPE_NORMAL
- en: '**Effect of *α* on the joint PDF**'
  prefs: []
  type: TYPE_NORMAL
- en: We can also create a 3d plot of the surface of the joint PDF. Here we assume
    that the 2-d simplex is on the XY plane and the Z axis gives the value of the
    PDF. The function `plot_surface()` in Listing 6 generates such a plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Listing 7 uses this function to plot the joint PDF of the Dirichlet distribution
    with some different parameters. The plots are shown in Figure 10.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/618d3c48b4f154c6ea26dd59ecf4c888.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10
  prefs: []
  type: TYPE_NORMAL
- en: These plots can help you understand the effect of ***α*** on the shape of the
    joint PDF. The random variables *p*₁, *p*₂, and *p*₃ in ***P*** with a Dirichlet
    distribution can represent the probability of 3 mutually exclusive events. Hence,
    each edge of the simplex represents one of these events, and the corresponding
    *αᵢ* is like a weight for the likelihood of that event.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before ***α***=[1 1 1]ᵀ means that we have a uniform distribution
    over the simplex. Here, the value of PDF is 2 everywhere over the simplex, so
    the joint PDF has a flat surface. When *αᵢ* increases relative to other elements,
    it means that the *i*th event has a higher chance of occurrence since it has been
    observed more compared to other events (here we can assume that we start we Dir([1
    1 1]ᵀ) as the prior distribution). An example is the plot of Dir([1 7 1]ᵀ) in
    Figure 10\. Now the surface is raised near the edge of the simplex that represents
    that event.
  prefs: []
  type: TYPE_NORMAL
- en: When the sum *α*₁+*α*₂+*α*₃ increases, it means that the total number of observations
    has increased. This will decrease our uncertainty about the distribution of ***P***
    and makes the joint PDF of the Dirichlet distribution look shaper. As you see
    in Figure 10, Dir([30 30 30]ᵀ) is much sharper compared to Dir([5 5 5]ᵀ). However,
    both look symmetric with respect to edges. Since all the events have been observed
    equally. When an *αᵢ* gets larger compared to others, the peak of the joint PDF
    moves towards the edge representing it. This is shown in Dir([5 5 30]ᵀ). Here
    the weight of the 3rd event (*α*₃) is greater which means that the 3rd event has
    been observed more, so it has a higher chance of occurrence.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that all the elements of ***α*** should be greater than zero, so
    we can not assign a zero weight to an event. However, if we set *αᵢ*<1 then, the
    weight of the corresponding event significantly drops. This is shown in the plot
    of Dir([0.65 7 1]ᵀ) in Figure 10\. If you compare it with the plot of Dir([1 7
    1]ᵀ), you see that to have a nonzero PDF, the barycentric coordinate of *p*₁ should
    be very small. This is almost like having a 1-d simplex on *p*₂ and *p*₃.
  prefs: []
  type: TYPE_NORMAL
- en: Listing 8 plots the joint PDF of the Dirichlet distribution on a logarithmic
    scale (to better show the changes of the joint PDF surface). The result is shown
    in Figure 11.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/27330f5767d38ee71d06e8a7b5cdf848.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11
  prefs: []
  type: TYPE_NORMAL
- en: Note that when all *αᵢ* are less than 1, the joint PDF has a convex surface.
    The PDF is extremely small except at the edges and the sides of the triangular
    simplex. It is almost like having three 1-d simplexes at the sides of the triangle.
    Hence a prior with such a distribution represents a setup in which one or two
    *pᵢ* are extremely small, and their corresponding events have a small chance of
    occurrence.
  prefs: []
  type: TYPE_NORMAL
- en: By comparing Dir([0.2 0.2 0.2]ᵀ) with Dir([0.8 0.8 0.8]ᵀ), you notice that increasing
    the value of *αᵢ* tends to flatten the surface of the joint PDF. Hence, it decreases
    the value of the joint PDF on the edges and sides and increases its value in the
    regions closer to the middle of the simplex.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it is important to note that the parameters of the Dirichlet distribution
    can be also non-integers. But what is the meaning of say Dir([1.65 6 20]ᵀ)? Here,
    we can assign the fractional part of the parameters to the prior distribution.
    For example, we can write it as Dir([0.65+1 1+5 7+13]ᵀ). This means that we started
    with Dir([0.65 1 7]ᵀ) as the prior distribution (the joint PDF of Dir([0.65 1
    7]ᵀ) is shown in Figure 10). Choosing this prior distribution means that we initially
    believed that *p*₁ is almost zero, and its corresponding event is very unlikely
    to happen. Then we observed that the 1st event occurred only once, and the 2nd
    and 3rd events event occurred 5, and 13 times respectively. These numbers were
    added to the parameters of the prior distribution to form the posterior distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bayesian inference in Python**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we can plot the contours, we can use the Dirichlet distribution to
    infer the distribution of parameters of a multinomial distribution. Suppose that
    we have a 3-sided die (of course, it can be also a 6-sided die with only 3 labels
    (1, 2, and 3) where each label is placed on two faces). Let the probability of
    getting side *i* be *pᵢ*, and *Xᵢ* represents the total number of times that side
    *i* is observed (*i*=1..3). As mentioned before, the random vector
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/006a1af2819afa650680787c5c308e93.png)'
  prefs: []
  type: TYPE_IMG
- en: has a multinomial distribution with parameters *n* and
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d188b4d9b61ded8c5496e576d5c1a5c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let the actual value of ***p*** be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6453b087015e8994d484ff2684c9c0ae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Hence, this is not a fair die! We can use the multinomial object in `scipy`
    to model this distribution. The following code snippet shows the result of rolling
    this die 10 times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Hence if we roll it 10 times, we have the following observation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Side 1: 6 times'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Side 2: 3 times'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Side 3: only 1 time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, these are some random events, so if we change the `random_state`
    in `rvs()` , we can get a different observation (we fix the `random_state` to
    make this specific observation repeatable).
  prefs: []
  type: TYPE_NORMAL
- en: Now suppose that we don’t have the probability of getting each side, so the
    actual value of the vector ***p*** (which was given in Equation 10) is unknown.
    However, we can still roll this die *n* times and observe the outcomes, therefore,
    we know the values of *Xᵢ*. If we assume that the unknown probability vector ***p***
    is represented by the random vector ***P***, we can use the Dirichlet distribution
    to infer the probability distribution of ***P*** after rolling the die.
  prefs: []
  type: TYPE_NORMAL
- en: Listing 9 first generates the outcomes of rolling the die *n* times and stores
    it in *m*. Then it calculates *f_****P***|***X*** (***p***|***X***=***m***) which
    is the joint PDF of the posterior distribution and plots its contours on a 2-d
    simplex. We have tried 5 different values for *n* ranging from 3 to 10000, and
    the plots are shown in Figure 12\. We start with Dir([1 1 1]ᵀ) as the prior distribution
    for ***P***. So initially we have a uniform distribution for ***P*** in which
    different values of ***P*** are equally likely. Hence, we have the maximum uncertainty
    about ***P***.
  prefs: []
  type: TYPE_NORMAL
- en: The actual value of ***P*** (Equation 10) which was used to generate the observation
    data is shown with a white marker on these plots. As *n* increases, we get more
    observation data, and our uncertainty about ***P*** decreases. By increasing *n*,
    the Dirichlet distribution, which was initially uniform, gets sharper and closer
    to the white market that represents ***p_***act.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e9b10068baa3d1ea19209ec0c842add6.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12
  prefs: []
  type: TYPE_NORMAL
- en: '**Relation to beta distribution**'
  prefs: []
  type: TYPE_NORMAL
- en: Let the random vector
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1d7b0906c55e7665b39555d37f684d66.png)'
  prefs: []
  type: TYPE_IMG
- en: have a Dirichlet distribution with the parameter
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1e404962725486e815990629ee7c36a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Based on Equation 1, the joint PDF of ***X*** is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d3815b3d3ede2a05fbdc400a2841b1c2.png)'
  prefs: []
  type: TYPE_IMG
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fef44e2b3afeba4ec60e4bcdd74cb58e.png)'
  prefs: []
  type: TYPE_IMG
- en: Since we have
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1d44daabfec25c2808416b1e908b7a3c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can remove *x*₂ from the PDF:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3aabe4d4a829d12f9bf731017f1da34a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you see the joint PDF of *X*₁ and *X*₂ is only a function of *x*₁. Hence,
    the random vector ***X*** is determined by the single random variable *X*₁ which
    means that the right-hand side of the above equation is also the PDF of the random
    variable *X*₁. So, we can write:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/494efee0e0e6b51426f6f0f88ac722d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A continuous random variable with such a PDF is said to have the *beta distribution*
    with parameters *α*₁ and *α*₂, and we denote it by *X*₁ ~ Beta(*α*₁, *α*₂). Similarly,
    we can write the PDF in terms of *x*₂:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8ea15208fc8561125f3824fc5dd81bf7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Hence, we conclude that *X*₂ ~ Beta(*α*₂, *α*₁), and we conclude that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/01b7cb9281703d6911bf38e33978c074.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The distributions of *X*₁ and *X*₂ are called the *marginal distributions*
    of ***X***. The beta distribution is a special case of the Dirichlet distribution
    when ***α*** only has two elements and we only consider one of the random variables
    in ***X***. Hence it is a univariate distribution. Listing 10 plots the joint
    PDF of Dir([5 1]ᵀ) and the PDF of its marginal distributions: Beta(5,1) and Beta(1,5).
    The plots are shown in Figure 13.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a333cfe560f0d57eaa5d6912d0c7d235.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the joint PDF of Dir([*α*₁ *α*₂]ᵀ) in Equation 11 is the same
    as the PDF of its marginal distribution (Beta(*α*₁, *α*₂)) in Equation 12\. However,
    they don’t represent the same distributions. The former is the joint PDF of the
    random vector ***X*** and the latter is the PDF of the random variable *X*₁. As
    Figure 13 shows the PDFs of the marginal distributions are the projection of the
    joint PDF on the planes formed by the axes (*x*₁, *f***ₓ**(***x***)), and (*x*₂,
    *f***ₓ**(***x***)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that the multinomial distribution can be used to model a *k*-sided
    die. When *k*=2, the die turns into a coin. Now *X*₁ can represent the total number
    of heads in *n* tosses of this coin. Similarly, *X*₂ represents the total number
    of tails. From Equation 4, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b953fb14b1a9e4dcfd45f5f3d50698c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since *x*₁+*x*₂=*n*, *p*₁+*p*₂=1, we can eliminate *p*₂ and *x*₂ from the above
    equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5e5d0657e2e31d4029fb7e20a2c80681.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now the random vector ***X*** is determined by the single random variable *X*₁
    which means that the right-hand side of the above equation is also the PDF of
    the random variable *X*₁. Hence the PDF of *X*₁ can be written as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aa417c378753f5d0f2a9cfc60e55dbfa.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the PDF of the binomial distribution. The binomial distribution is a
    special case of the multinomial distribution when the random vector ***X*** has
    only one element (it is the marginal distribution of the multinomial distribution).
    Hence *X*₁ has a binomial distribution with parameters *n* and *p*₁. Similarly,
    *X*₂ has a binomial distribution with parameters *n* and *p*₂.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b144aa46a282d81687a6c19d7e83b391.png)'
  prefs: []
  type: TYPE_IMG
- en: Since the beta and binomial distributions are special cases of Dirichlet and
    multinomial distributions respectively, they are still conjugate distributions.
    In fact, the beta distribution is the conjugate prior to the binomial distribution
    as shown in Figure 14.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/384afa084972c4929b7e63b3d2a52e46.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14 (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Suppose that we have a coin that lands on heads with an unknown probability
    of *p*. Let the random variable *P* represents the unknown probability *p*, and
    the random variable *X* represents the total number of heads in *n* tosses. Let’s
    assume that the probability distribution of *P* is Beta(*a*, *b*) (this is our
    prior distribution). Now if we toss the coin *n* times and we observe that *X*=*k*,
    the posterior distribution of *P* is Beta(*a*+*k*, *b*+*n*-*k*).
  prefs: []
  type: TYPE_NORMAL
- en: '**Aggregation property**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let the random vector ***X*** have the following Dirichlet distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c01df7da5e542888cdddacc80ba8bef7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We drop the random variables *Xᵢ* and *X_j* from ***X*** and add *Xᵢ*+*X_j*
    to it at an arbitrary place and call the resulting random vector ***X***’. It
    can be shown that ***X***’ has the following Dirichlet distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0a3af6832911bcbe7cfdff6286447d5a.png)'
  prefs: []
  type: TYPE_IMG
- en: So, to create the vector of parameters in the new Dirichlet distribution, first,
    we drop the corresponding parameters of *Xᵢ* and *X_j* (*αᵢ* and *α_j*), and then
    insert *αᵢ*+*α_j* at the same place that *Xᵢ* +*X_j* was inserted into ***X***
    (the index of *αᵢ*+*α_j* and *Xᵢ* +*X_j* are the same in their corresponding vectors).
    The proof of the aggregation property is given in the appendix.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see an example. Let ***X*** ~ Dir([1 5 3]ᵀ). Using the aggregation property,
    we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a56d7908b6b8b0358b19e536a634fd13.png)'
  prefs: []
  type: TYPE_IMG
- en: Listing 11 plots the joint PDF of all these distributions together. The plot
    is in Figure 15\. In this plot, each aggregated random vector [*Xᵢ X_j*+*X_k*]ᵀ
    has 1-d simplex. Here, we assumed that this simplex is along the height of the
    triangle that passes through *Xᵢ.*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/adb1aa908a90f794e99ae6689e6859a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15
  prefs: []
  type: TYPE_NORMAL
- en: '**Marginal distributions**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now using the aggregation property, we can find the marginal distributions
    of Dirichlet distributions when ***X*** has more than 2 elements. Let ***X***
    have a Dirichlet distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f69f4d5ce6c4530e1e7a31a50f93f631.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can apply the aggregation property repeatedly on all the elements of ***X***
    except *X*₁, and we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2954ed5d02b7373ba26b1dc35541c2a1.png)'
  prefs: []
  type: TYPE_IMG
- en: We can write the previous equation as
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a808ec15deceb36b937be9b498a6a63e.png)'
  prefs: []
  type: TYPE_IMG
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e10286164e5d097a6083200b8eccf504.png)'
  prefs: []
  type: TYPE_IMG
- en: 'More generally, we can write the same equation for each element of ***X***:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4474d195428a34352a6319382657a0d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Hence, based on Equation 13, the marginal distribution of each *Xᵢ* is the
    following beta distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8cbd5254a569bfcbc4a32139b3ca89b1.png)'
  prefs: []
  type: TYPE_IMG
- en: In this article, we reviewed the Dirichlet distribution. We showed that it is
    the conjugate prior to the multinomial distribution, and due to this important
    property, it can be used to infer the parameters of the multinomial distribution.
    We also showed how it can be modeled in Python and how we can visualize its joint
    PDF. Finally, we saw the connection between the beta and Dirichlet distributions
    and showed that the Dirichlet distribution is a generalization of the beta distribution
    to higher dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: 'I hope that you enjoyed reading this article. Please let me know if you have
    any questions or suggestions. All the Code Listings in this article are available
    for download as a Jupyter Notebook from GitHub at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/reza-bagheri/probability_distributions/blob/main/dirichlet_distribution.ipynb](https://github.com/reza-bagheri/probability_distributions/blob/main/dirichlet_distribution.ipynb)'
  prefs: []
  type: TYPE_NORMAL
