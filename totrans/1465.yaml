- en: Make a Text Summarizer with GPT-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/make-a-text-summarizer-with-gpt-3-f0917a07189e](https://towardsdatascience.com/make-a-text-summarizer-with-gpt-3-f0917a07189e)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Quick tutorial using Python, OpenAI’s GPT-3, and Streamlit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@jaypeterman?source=post_page-----f0917a07189e--------------------------------)[![Jay
    Peterman](../Images/94587c88cb7981fa58fa8137d27b9588.png)](https://medium.com/@jaypeterman?source=post_page-----f0917a07189e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f0917a07189e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f0917a07189e--------------------------------)
    [Jay Peterman](https://medium.com/@jaypeterman?source=post_page-----f0917a07189e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f0917a07189e--------------------------------)
    ·11 min read·Jan 23, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e852944464412bdf76d016dcde8c7f12.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Ed Robertson](https://unsplash.com/@eddrobertson?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: We are likely in the early days of language models, and there will be a lot
    of useful integrations developed in the coming years. I’ve been interested in
    text summarization recently, and I’ve found the solutions offered by OpenAI to
    excel at this task.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this tutorial is to introduce the reader to the OpenAI ecosystem,
    and give an example of how to actually build something from idea to deployment.
    We will do this by building a Streamlit app that uses OpenAI’s GPT-3 model to
    summarize text, and then deploy the app to Streamlit Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re interested in understanding how to work with language models in Python,
    this is a good first step. If you’re interested in building out your own integrations,
    you can use this as a template to build out your own ideas.
  prefs: []
  type: TYPE_NORMAL
- en: While some knowledge of Python, Git/Github, and command line will be useful,
    this tutorial can act as a guide to help newcomers learn a bit about each of these
    along the way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Set up git repo in Github, and clone it locally'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you don’t already have a Github account, you will need to sign up. Once you’re
    logged in, create a new repo called `text-summarizer` (you can call it whatever
    you want, but that’s what I’ll be calling it).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the repo is created, you can clone it locally and navigate to the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can create a new branch to work out of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 2: Set up .gitignore file'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’re going to need an API key to use the OpenAI API, and we need to make sure
    we will not accidentally commit it to our repo. You can make the file like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This ensures that nothing in the `.streamlit` directory will get added to your
    repo. We haven’t made this directory yet, but I like to set it up first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Set up virtual environment and install packages'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is the command to make a virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can activate the environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This app requires two packages: `openai` and `streamlit`. First, let’s upgrade
    pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can install the packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 4: Set up secrets.toml'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For local development, we will be storing the API key in a file called `secrets.toml`,
    and we will put it in the `.streamlit` directory. Assuming you are in the root
    of your repo, you can enter the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Once we generate the API key in the following step, you can store it in this
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 5: Get an OpenAI API key'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you don’t already have an account with OpenAI, you can create an account
    [here](https://openai.com/api/). Once you have an account and get logged in, you
    can click on the name icon in the upper right, and select `View API keys`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can press the button that says `Create new secret key`. Copy the secret
    key from the pop-up, and paste it into `secrets.toml` like this (don’t forget
    to put quotes around the API key):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you’ve already blown through your free OpenAI credits and have moved to paid
    account, it’s a good idea to set a usage limit. Since we are deploying this app
    publicly, you want to make sure that you don’t accidentally spend more money than
    intended.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 6: Build out the front end'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This app will be very simple. It will have a text area where the user can input
    text, and a second text box underneath that will displayed the summarized text.
    We will also add a submit button.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we will make a new file called `app.py` in the root of the
    repo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `app.py` in a text editor, and enter this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This is a simple snippet that creates the skeleton of our app. Even if you don’t
    know anything about Python or Streamlit, this code should still be pretty readable.
    We are simply making a title, creating two text boxes, and a submit button.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run this app, enter the following command from the root of your repo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After running this command, a browser window should open up running the app.
    If not, you can find the URL in terminal, and paste it into a browser. This is
    what you should see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1076d3a259eee973a258d1a250bab202.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: Image by author'
  prefs: []
  type: TYPE_NORMAL
- en: This showcases the power of Streamlit, because it just takes a few lines of
    code to make something pretty cool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 7: Get started with OpenAI and GPT-3'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have the skeleton of our app, we need to make it do something. Here
    is the basic syntax we can use to get GPT-3 to generate text from a prompt.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The first line reads the API key from your environment variables. When running
    in the context of the Streamlit app, `os.getenv` will be able to access the secrets
    we stored in the top level of `.streamlit/secrets.toml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we call `Completion` endpoint of the OpenAI API, and pass the arguments
    for the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**model:** we will be using `text-davinci-003`, which is the most advanced
    model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**prompt:** This can be any arbitrary text. For the purposes of text summarization,
    this will be the full text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**temperature:** This is number between 0 and 1 that defines how much risk
    the model will take while generating the output. The higher the number, the more
    risk the model will take. It seems like the best results for text summarization
    will be a lower number. You can experiment with this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_tokens:** This defines the max length of the output in terms of tokens.
    A token equals approximately 4 characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can see all the parameters in the [OpenAI docs](https://beta.openai.com/docs/api-reference/completions/create).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to play around with this snippet, you can save it in a `.py` file
    and run it. Please note, the OpenAI API key that we stored in `.streamlit/secrets.toml`
    will not be accessible outside the context of a Streamlit app, so you will have
    to add the key as an environment variable or just paste it over `os.getenv('API_KEY')`.
    Just be careful not to push your API key to Github.
  prefs: []
  type: TYPE_NORMAL
- en: This snippet will ultimately get refactored into a function that will get triggered
    by the `submit` button in the UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 8: Prepare app.py to handle output from OpenAI'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned above, the `submit` button will trigger the summarization function.
    We will need to store the model output in a variable that can populate the lower
    text box. We will solve this by using the `session_state` object in Streamlit.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to initialize a state variable, and that can be done like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `st.session_state` object is a Python `dict` that saves data when the app
    gets rerun. The snippet above is testing to see if there is already an entry for
    `summary`. If `summary` is not in `st.session_state`, it will get added with its
    value set to an empty `str`.
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to populate the the bottom text area with the current state of `summary`.
    Since `st.session_state` is just a Python `dict`, all we have to do is pass `st.session_state["summary"]`
    to the `value` parameter of the second instance of `st.text_area`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your `app.py` file should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You can make sure your code is working by checking the UI. It shouldn’t look
    different, but there shouldn’t be any errors.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 9: Build function to summarize text**'
  prefs: []
  type: TYPE_NORMAL
- en: 'First we are going to make a module to store the function to keep the Streamlit
    app clean, and you can follow these steps starting from the root of the repo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can add this to `functions.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This isn’t a huge transformation from what we used in step 7\. We augment the
    `prompt` by prepending it with `"summarize this text: "` to tell the model that
    we want it to summarize the text. Then we run `openai.Completion.create` and save
    the output into the `summary` state variable. The part at the end just parses
    the response to only grab the text that we’re interested in. I have hardcoded
    the parameters, but feel free to experiment.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 10: Finish app.py'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have the function created, we can finalize the app. First, we need
    to import the function at the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to configure the `submit` button to trigger `summarize` when pushed.
    Here’s how to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `on_click` parameter specifies the the callable function that will be used
    in the callback, and this case we will use `summarize`. If you’re not familiar
    with `kwargs`, it just means keyword arguments. We will pass a `dict` with a single
    entry (since the function only has one parameter), and we will pass the `str`
    that was entered by the user in the first text area.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to specify the API key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `app.py` file should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: You should now be able to run the app, and start summarizing text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 11: Handle Errors'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In its current state, the app doesn’t handle errors very well. If an error occurs,
    a user will get an error message that exposes information that a user shouldn’t
    see.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to simulate an error, navigate to `.streamlit/secrets.toml` and
    delete the final letter of your API key. Rerun your app, and try to summarize
    some text. You should see an error that gives a Traceback with some information
    about your API, as well as a revealing part of the key.
  prefs: []
  type: TYPE_NORMAL
- en: 'To hide this from users, we can add a `try-except` pattern like this in two
    places:'
  prefs: []
  type: TYPE_NORMAL
- en: '**app.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**text_summarizer/functions.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 12: Make requirements.txt'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since we will ultimately be deploying this on Streamlit Cloud, we need to document
    which Python packages that the app needs. An easy way to do this is create a `requirements.txt`
    file. Assuming you have your virtual environment activated and have installed
    all the necessary packages, you can run this command from the root of the repo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 12: Commit, Push, Merge to main branch'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that the code works, we can add files to the repo and commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then commit the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then push your changes to the remote Github repo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now you can go back to Github and go to the Pull request section. Click `New
    pull request` and set the compare branch to `initial_build`. Now you can simply
    create the Pull request, and merge it. You can find more detailed docs on PRs
    [here](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request).
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 12: Deploy to Streamlit Cloud'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Streamlit Cloud is a super easy way to share your Streamlit apps, and it’s free.
    First you need to sign up [here](https://streamlit.io/cloud), and connect your
    Github account. Click on the `New app` button, and choose `From existing repo`.
  prefs: []
  type: TYPE_NORMAL
- en: When you click on the text box for `Repository`, you should see a list of repos
    from your Github account. Select `text-summarizer`. Make sure the correct branch
    is selected, and that `Main file path` is `app.py`.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, since we were careful not to push our API key to Github, we need to
    store that secret in a secure way. Luckily, Streamlit Cloud has a built-in secrets
    manager. Click on `Advanced settings`, and you can paste the contents of `.streamlit/secrets.toml`
    here. You can now press `Deploy`, and your app will be live in a few minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit Cloud will monitor your repo, and automatically deploy any new commits
    that get merged.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more detailed docs about Streamlit Cloud [here](https://docs.streamlit.io/streamlit-cloud).
  prefs: []
  type: TYPE_NORMAL
- en: 'The outcome:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is a test of the application using the introduction of this tutorial as
    the input:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8ed4010da944611c03d29d9592f5202c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: Image by author'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the model does a pretty good job of summarizing the prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bonus: How you can use Custom URLs'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Streamlit and Streamlit Cloud have a lot of great features, but custom URLs
    are not currently supported. One work-around is to host a static website that
    has your app embedded as an `iframe`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to try this, make a new file called `index.html` in the root of
    the repo, and use this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: You just need to copy the URL from you Streamlit app and past it into the `src`
    parameter in the `iframe`. Make sure you add `?embed=true` at the end[1].
  prefs: []
  type: TYPE_NORMAL
- en: Now you can store this file in a cloud storage bucket, like AWS S3 or DigitialOcean
    Spaces, and point a custom URL to the exposed bucket.
  prefs: []
  type: TYPE_NORMAL
- en: 'Limitations and possible improvements:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This app is meant to be an introductory project, and is feature-sparse by design.
    Therefore, there are some obvious limitations that can be improved upon.
  prefs: []
  type: TYPE_NORMAL
- en: '**Give the user more control:** You can add Streamlit widgets to allow users
    to specify arguments for each parameter of the OpenAI function. For example, users
    may want to select how long the summary should be.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Make it possible to process longer texts:** There’s a limit to how much text
    can be processed in a single request. To allow users to summarize longer texts,
    you could split the input text into smaller prompts, process each prompt separately,
    and parse the individual responses into a longer summary. I haven’t tried this,
    and it might take some work to get satisfactory results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Guide the user to unlocking unknown features:** GPT-3 is quite flexible,
    and the user can technically add a lot of features without the developer explicitly
    building them. For example, you can get a response in Spanish by slightly modifying
    the prompt:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/68435b7b0cffcf48e5a9aa10bed003d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: image by author'
  prefs: []
  type: TYPE_NORMAL
- en: According to Google Translate (I don’t speak Spanish), the response is not really
    a summary in Spanish, but rather a translation in Spanish. While this is not the
    intended behavior, I believe you can get what you want by engineering the prompt
    a bit (or by passing the translation through the text summarizer after translation).
  prefs: []
  type: TYPE_NORMAL
- en: If you can figure out how to make this work, you can simply add a Streamlit
    widget that allows the user to select a language. Then you will have to modify
    the code to augment the prompt with the user input.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You just learned how to make a text summarization app with GPT-3 and Streamlit.
    The app is obviously pretty simple, but you can use this a template to build any
    new integrations you want to try. Thanks for reading.
  prefs: []
  type: TYPE_NORMAL
- en: Sources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] [https://discuss.streamlit.io/t/embeding-streamlit-cloud-url-with-iframe/27511](https://discuss.streamlit.io/t/embeding-streamlit-cloud-url-with-iframe/27511)'
  prefs: []
  type: TYPE_NORMAL
