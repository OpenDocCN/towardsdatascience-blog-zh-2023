- en: Understanding Independence and Why It Is Critical in Causal Inference and Causal
    Validation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/understanding-independence-and-why-it-is-critical-in-causal-inference-and-causal-validation-dfdd26c29739](https://towardsdatascience.com/understanding-independence-and-why-it-is-critical-in-causal-inference-and-causal-validation-dfdd26c29739)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A step-by-step guide to understanding the concept of independence and how to
    apply it to validate directed acyclic graphs in causal validation using Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://grahamharrison-86487.medium.com/?source=post_page-----dfdd26c29739--------------------------------)[![Graham
    Harrison](../Images/c6bfe00c6e0cfcdf3bd042c7fdc03554.png)](https://grahamharrison-86487.medium.com/?source=post_page-----dfdd26c29739--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dfdd26c29739--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dfdd26c29739--------------------------------)
    [Graham Harrison](https://grahamharrison-86487.medium.com/?source=post_page-----dfdd26c29739--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dfdd26c29739--------------------------------)
    ·23 min read·Dec 7, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2a1aaf170dbbf7c9485d0cd5023662a6.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: Photo by [Towfiqu barbhuiya](https://unsplash.com/@towfiqu999999?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    on [Unsplash](https://unsplash.com/photos/a-blue-question-mark-on-a-pink-background-oZuBNC-6E2s?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Background
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a recent article the author explored and explained how [the concept of dependence](/demystifying-dependence-and-why-it-is-important-in-causal-inference-and-causal-validation-4263b18d5f04)
    can be used to validate a proposed Directed Acyclic Graph (DAG) against a dataset
    to identify spurious edges in the graph i.e. causal links suggested by the DAG
    that do not exist in the data.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: In this second instalment, the opposite (but equally critical) concept will
    be applied i.e. how to use independence to identify missing edges. These are causal
    links that do not appear in the proposed DAG but do actually exist in the data
    that must be added back into the DAG to make it complete and correct.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Causal Inference is an emergent branch of data science concerned with determining
    the cause-and-effect relationship between events and outcomes and it has the potential
    to significantly add to the value that machine learning can generate for organisations.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: For example a traditional machine learning algorithm can predict which loan
    customers are likely to default thereby enabling proactive intervention with customers.
    However, although this algorithm will be useful to reduce loan defaults it will
    have no concept of why they occurred and whilst pro-active intervention is useful,
    knowing the reasons for defaults would enable the underlying cause to be addressed.
    In this world pro-active intervention may no longer be necessary because the factors
    that led to defaulting have been permanently cured.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: This is the promise of Causal Inference and why it has the potential to deliver
    significant impact and outcomes to those organisations that can harness that potential.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of different approaches but the most common approach typically
    starts by augmenting the data with a “Directed Acyclic Graph” (DAG) which encapsulates
    and visualises the causal relationships in the data and then uses causal inference
    techniques to ask “what-if” type questions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: The Problem
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A DAG that encapsulates the causal relationships in the data is typically constructed
    manually (or semi-manually) by data scientists and domain experts working together.
    Hence the DAG could be wrong which would invalidate any causal calculations leading
    to flawed conclusions and potentially incorrect decisions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: The Opportunity
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A range of techniques exist for “Causal Validation” (the process of validating
    the DAG against the data) and if these techniques work they can minimise or eliminate
    errors in the DAG thereby ensuring that the calculations and conclusions are error-free.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: The Way Forward
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The statistical concept of independence between random variables can be used
    to ascertain whether a relationship that does not exist in the DAG does exist
    in the data. If this situation is encountered it is likely that the causal relationship
    that is missing in the DAG needs to be added to it to make it complete and correct.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to need an example DAG to work through the problem which has enough
    nodes and links to provide a good example with which to explore the problem …
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/62397b5d07af2ce29ceb59fa4144503a.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: DAG used throughout the article — Image by Author
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: The DAG is entirely fictitious so the letters on the nodes do not have any meaning,
    but to note that “X” is the treatment, “Y” is the outcome and the other nodes
    represent factors that are affecting the outcome with the potential to hide or
    skew the true effect of X on Y.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: To better understand the DAG, if this were a real-world problem it could represent
    the following …
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: X represents the regularity with which a drug is taken.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: W represents the effect of the drug on blood pressure.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Y represents the improvement on patient recovery and outcome.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Z1, Z2, and Z3 represent other factors (for example maybe Z1 represents healthy
    lifestyle and Z3 represents fitness level etc.)
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The arrows in a DAG then represent the causal effect of one factor on another,
    for example …
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Taking the drug (represented by “X”) has a causal effect on blood pressure (represented
    by “W”) which in turn has a causal effect on patient recovery (“Y”).
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also need some data that matches the DAG. The dataset below is entirely
    synthetic and has been generated by the author; it exactly encapsulates and matches
    the structure suggested by the DAG and contains no erroneous or faulty relationships
    …
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/14c239ce462cc25b48f7c62b47cdcbe4.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
- en: Dataset used throughout the article — Image by Author
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: The next sections will begin to unpack the DAG and the data and use them to
    explain how statistical independence can be used to identify causal links that
    have been missed or omitted from the DAG.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Independence
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One definition of independence is as follows —
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: “Independence between two random variables refers to a fundamental concept where
    the occurrence or value of one random variable does not influence or provide any
    information about the occurrence or value of the other random variable”.
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Let’s take another look at our DAG and consider nodes Z1 and Z2 …
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/022365171e6a2f664478b385088ec7b2.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: DAG with nodes Z1 and Z2 highlighted — Image by Author
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: We can see that nodes Z1 and Z2 (representing some causal factors affecting
    the treatment and outcome) have no direct or indirect connection and their are
    no paths through the DAG that link them so Z1 can be said to be independent of
    Z2 (and vice versa).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate the point further we can also see that although X (the treatment)
    and Y (the outcome) are not directly connected they are in fact dependent because
    there are several paths through the DAG that connect them …
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/469b8ff3593a28ce0f21f7f168b9e17f.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: All paths between node X and node Y — Image by Author
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: What these two examples show is that if the value if Z1 changes it will not
    influence or change the value of Z2 but if the value of X changes it will change
    the value of Y.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: This explanation can be expanded by taking another look at the dataset that
    the DAG is modelling …
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/14c239ce462cc25b48f7c62b47cdcbe4.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: Review of the dataset — Image by Author
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: In a real-world causal inference problem the data would be the starting point
    and the DAG would be developed by consulting with the domain experts but to facilitate
    the article the author needed a dataset that was guaranteed to match the DAG.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Hence the dataset above was generated by applying the following formulae to
    create 1000 rows of data …
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/622b646be82955250013e6658419d71b.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: Structural equations used to create the dataset — Image by Author
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: This can be read and understood as follows -
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Z1 is an exogenous variable (i.e. it has no inputs) that is normally distributed
    with a mean of 4.37 and a standard deviation of 1.95
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Z1 is an exogenous variable that is normally distributed with a mean of 1.28
    and a standard deviation of 1.94
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Z3 = -1.5 X Z1–1.5 x Z2 + an error term
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: X = -1.5 x Z1 + 1.5 x Z3 + an error term
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: W = -3 x XZ + an error term
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Y = -2.5 x W + -3 x Z2 + -3 x Z3 + an error term
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The formulae that were used to create the data clearly show that Z1 is independent
    of Z2 because they are both completely separate normal distributions but that
    X and Y are not independent because changing X will change W and changing W will
    change Y.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: There is yet another way of representing this, by using mathematical notation
    to show the dependence …
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4c45fcc133c1680bfa8d5cec342f0d29.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
- en: Independence and dependence notation — Image by Author
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: The ⫫ symbol is called a “double up-tack” and means “is independent of”. The
    ⫫̸ symbol does not have a widely accepted name so I have adopted “slashed double
    up-tack” through personal preference and means “is dependent on” so the formulae
    above read as “Z1 is independent of Z2” and separately “Y is dependent on X”.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: In concluding this section we will bring this knowledge back to its importance
    in the context of causal validation.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: In a causal inference problem the data will have been collected and the DAG
    will have been constructed separately, usually by consulting domain experts who
    could potentially have made mistakes or whose knowledge could have been incomplete.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Causal validation then is the process of proving or disproving that the DAG
    is a valid causal representation of the data.
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Independence has a critical role to play in this process because if the dependencies
    and independencies represented in the DAG can all be matched and detected in the
    data then it can be inferred that the DAG is valid.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: This can be represented using the following formulae ..
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/25d47fe820458ca0d20c3c620fc12676.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: Formulae inferring the DAG and data are equivalent for nodes Z1 and Y — Image
    by Author
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: These formulae look scary but are actually very straightforward.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: The first says that if Z1 is independent of Z2 in the graph (DAG) then Z1 should
    also be independent of Z2 in the data.
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The second says that if Y is dependent on X in the graph (DAG) then Y should
    also be dependent on Y in the data.
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Using Independence to Identify Missing Causal Links
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a previous article I explained how independence can be used to detect spurious
    links i.e. causal relationships that appear in the DAG that do not appear in the
    data …
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[](/demystifying-dependence-and-why-it-is-important-in-causal-inference-and-causal-validation-4263b18d5f04?source=post_page-----dfdd26c29739--------------------------------)
    [## Demystifying Dependence and Why it is Important in Causal Inference and Causal
    Validation'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: A step-by-step guide in understanding the concept of dependence and how to apply
    it to validate directed acyclic graphs…
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/demystifying-dependence-and-why-it-is-important-in-causal-inference-and-causal-validation-4263b18d5f04?source=post_page-----dfdd26c29739--------------------------------)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: … and in the remainder of this article I will explore how dependence can be
    used to identify missing links i.e. causal relationships that do not appear in
    the DAG that do appear in the data.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: It follows that if missing links can be identified using independence they can
    then be added back into an invalid DAG to make it valid.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: The approach proposed in this article has its basis in the many works and published
    papers of Judea Pearl who is recognised as a global authority on causal inference.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: In “Causal Inference in Statistics” (Pearl, Glymour, Jewell, 2019) Pearl explores
    the idea of using d-separation to identify missing links but it is a partial example
    and does not provide enough explanation to implement an algorithm in Python.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.amazon.co.uk/Causal-Inference-Statistics-Judea-Pearl/dp/1119186846/ref=asc_df_1119186846&amp;mcid=19d06a4904073cf985acfb21fe45ebbb?tag=grahamharri04-21&amp%3BlinkCode=df0&amp%3Bhvadid=80676723059500&amp%3Bhvnetw=o&amp%3Bhvqmt=e&amp%3Bhvbmt=be&amp%3Bhvdev=c&amp%3Bhvlocint=&amp%3Bhvlocphy=&amp%3Bhvtargid=pla-4584276297438266&amp%3Bpsc=1&_encoding=UTF8&linkCode=ur2&linkId=7f120490d4ac7cabf046e73a4cd1c14b&camp=1634&creative=6738&source=post_page-----dfdd26c29739--------------------------------)
    [## Causal Inference in Statistics: A Primer'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'Buy Causal Inference in Statistics: A Primer 1 by Pearl, Judea, Glymour, Madelyn,
    Jewell, Nicholas P. (ISBN…'
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.amazon.co.uk](https://www.amazon.co.uk/Causal-Inference-Statistics-Judea-Pearl/dp/1119186846/ref=asc_df_1119186846&amp;mcid=19d06a4904073cf985acfb21fe45ebbb?tag=grahamharri04-21&amp%3BlinkCode=df0&amp%3Bhvadid=80676723059500&amp%3Bhvnetw=o&amp%3Bhvqmt=e&amp%3Bhvbmt=be&amp%3Bhvdev=c&amp%3Bhvlocint=&amp%3Bhvlocphy=&amp%3Bhvtargid=pla-4584276297438266&amp%3Bpsc=1&_encoding=UTF8&linkCode=ur2&linkId=7f120490d4ac7cabf046e73a4cd1c14b&camp=1634&creative=6738&source=post_page-----dfdd26c29739--------------------------------)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: the link above is an amazon affiliate link. If you use the link to purchase
    the book a small finders fee will be paid to the author of this article at no
    additional cost to the purchaser.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: The exploration below aims to provide sufficient explanation and examples such
    that a solution can be implemented in Python that will reliably identify causal
    links that are missing from the DAG but that exist in the data.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: This is the rule which must be implemented to reach that goal …
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: “Within a DAG any node N should be independent of its non-descendants given
    its parents”
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (authors own words)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: That sounds complicated and it is difficult to understand in isolation but with
    examples it can be made clearer.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Every node in the DAG can be tested separately against that rule. Here is the
    rule applied to node “W” …
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ab78b611dc2fd225080859c530d02164.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: Independence rule for node W — Image by Author
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: … which can be read as — “W is independent of its non-descendants given (when
    conditioned on) its parents”.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: So what does this mean and how can it be applied to identify missing causal
    relationships in the DAG?
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: To start with we will need to fully understand what is meant by “parents” and
    what is meant by “non-descendants”.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'To note: the following diagrams are coloured-coded as follows …'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'Pink: The node of interest'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Red: Parents'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Green: Descendants'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Yellow: Non-descendants'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Blue: All other nodes'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The parents of a node are easy to visualise; they are the nodes in the DAG that
    have a causal link with an arrow pointing into that node and we can visualise
    that by considering the charts representing the parents of node W and separately
    the parents of node X …
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f626729fd04a02e299cf0028c7a4d76b.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: Parents of node W and parents of node X — Image by Author
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: We can see that node W has a single parent — X and node X has two parents —
    Z1 and Z3 and we can also see that different nodes can have zero, 1 or more parents.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Non-descendants are slightly harder to visualise as they are subtly different
    from ancestors. My definition of non-descendants of a node is as follows …
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: “Non-descendants of a node are all nodes that are not descendants and also not
    direct parents”
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To illustrate this, let’s first visualise all of the descendants of node W,
    and separately node X …
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8c5b542eb9269198a2bfbfaea77b0edc.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
- en: Non-descendants of node W and non-descendants of node X — Image by Author
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: And finally, here it is all together — a diagram for node W and a separate diagram
    for node X that highlights their parents in red and their non-descendants in yellow
    …
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/12856406bc17871876347c9bff91f6f3.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: Parents and non-descendants of node “ and parents and non-descendants of node
    X — Image by Author
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: You may be wondering two things at this point …
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '**Why do non-descendants exclude direct parents?**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: The answer to this question that this is a definition of “non-descendants” that
    broadly follows the solutions proposed in the books of Judea Pearl to discover
    missing links and if you include parents then the following formula will not work
    …
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ab78b611dc2fd225080859c530d02164.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
- en: Formula for independence of node W — Image by Author
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: … because the parents would appear on both sides if the “given” symbol (|).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '**What does all this have to do with causal validation?**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: The answer to this question will be revealed in the next section …
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Using Independence, Non-Descendants and Parents to Identify Missing Links in
    the DAG
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have defined what independence is i.e. if A is independent of B then
    changing the value of A has no effect on B. We have also explored and understood
    what is meant by “parents” and “non-descendants” and we have a formula inferred
    and consolidated from the literature that can identify missing links (𝑁 ⫫ 𝑛𝑜𝑛−𝑑𝑒𝑠𝑐𝑒𝑛𝑑𝑎𝑛𝑡𝑠
    | 𝑝𝑎𝑟𝑒𝑛𝑡𝑠).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: All that remains now is to put it all together — simple! Well maybe not simple,
    so let’s start by re-visiting the final diagram for node W and adding some additional
    paths …
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/20efb622c05f51b47806f39cb0b6cc39.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
- en: DAG highlighting possible missing paths from the non-descendants of node W to
    node W — Image by Author
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: The bright pink paths between nodes Z1, Z3, Z2 and Y should not exist in the
    data because they do not exist in the DAG. It therefore follows that if any of
    these dependencies can be detected in the data then the DAG must be wrong and
    not only that, we will know exactly where it is wrong! A missing link on the DAG
    will have been identified rendering the current DAG invalid which can then be
    corrected by adding the missing link back in.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: This is an amazing possibility! Let’s start by looking at this expressed as
    a mathematical formula for node W …
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/356eee060db8a7bb6ff90f51efd11027.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
- en: Formula for the independence of Node W in the DAG and in the data — Image by
    Author
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: It looks scary, but all it is saying is that if W is independent of Z1, Z2 and
    Z3 given X in the graph (DAG) then W should be independent of Z1, Z2 and Z3 given
    X in the data as well.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: If you would like a refresher on what “given” means in the context of conditioning
    in a DAG, this article provides an in-depth, step-by-step explanation …
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[](/unlock-the-secrets-of-causal-inference-with-a-master-class-in-directed-acyclic-graphs-f2d3b40738e?source=post_page-----dfdd26c29739--------------------------------)
    [## Unlock the Secrets of Causal Inference with a Master Class in Directed Acyclic
    Graphs'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: A step-by-step explanation of Directed Acyclic Graphs from the basics through
    to more advanced aspects
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/unlock-the-secrets-of-causal-inference-with-a-master-class-in-directed-acyclic-graphs-f2d3b40738e?source=post_page-----dfdd26c29739--------------------------------)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: As it turns out, it is relatively easy to run this test and to see if it is
    true (i.e. does the data matches the DAG or not). Let’s have a go …
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: To implement the test for W on the right hand side of the formula we can perform
    a regression on all 4 variables on the left hand side — Z1, Z2, Z3 and X. Some
    of the text books and sources talk about Z1, Z2 and Z3 “vanishing”.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: What this means is that if the regression is performed on the parent and non-descendant
    variables then all the non-descendants should have either a zero co-efficient
    or one that is close to zero so let’s start by visualising these relationships
    in the data …
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/683904ed56e4a2a52b7abbd6374ad575.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
- en: Graphical representation of the Coefficients of X, Z1, Z2 and Z3 when regressed
    against W — Image by Author
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: We can see from this visualisation that Z1, Z2 and Z3 do indeed have a flat
    (or “vanishing”) co-efficient. If we represent the relationships mathematically
    they look like this …
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/611e5ba961baaeb4f2d2887583a482a5.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
- en: Mathematical representation of the Coefficients of X, Z1, Z2 and Z3 when regressed
    against W — Image by Author
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: This is all looking good so far, so how can we implement this test and extract
    the results in Python code using an ordinary least squares (OLS) regression?
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Here is the source code that does exactly that using the synthetic dataset from
    earlier in the article …
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dd91e49cea4c11ff495b8e9860f53343.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
- en: OLS results summary — Image by Author
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: The key aspects are the `coef` column (co-efficient or slope) and the `P>|t|`
    column (p-value) in the penultimate table of the results summary.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: We can easily see that the coefficients (or slopes in the graph) are small but
    not zero (i.e. completely flat) for Z1, Z2 and Z3 so how can we reach a conclusion
    that they are “vanishing”?
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: As it turns out there is no definition for a “vanishing” co-efficient in any
    of the texts or articles I have read so I have come up with my own method based
    on trial-and-error and a lot of testing …
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The test I have chosen based on many hours of testing is a combination of looking
    at both the p-value and the coefficient in the OLS results summary.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: In theory the p-value should be enough on its own. For each variable there is
    a null hypothesis that there is no relationship between the independent variable
    (say Z1) and the dependent variable (W).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: If the p-value is less than the alpha value (usually 0.05 is chosen) then the
    null hypothesis is rejected and the conclusion is that there is a relationship.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: If we look at the results for variable Z1 we can see that the p-value is 0.473
    which is much higher than 0.05 so we cannot reject the null hypothesis and the
    conclusion is that there is no relationship between Z1 and X. This also holds
    for Z2 with a p-value of 0.176 and Z3 which has a p-value of 0.518\. X however
    has a p-value of 0.000 so the null hypothesis cannot be rejected and this all
    matches back to the graph of the slopes above.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: So in this case the independence of Z1, Z2 and Z3 from W and the dependence
    of X on W could all have been established by looking at the p-value in isolation
    however in my observations from extensive testing this is not always the case
    and the best results are obtained by defining a “vanishing” co-efficient that
    indicates independence as follows …
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: “For each variable if the p-value is greater than 0.05 and the co-efficient
    is less than or equal to 1 then that variable is independent (or “vanishing”)”
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: I have found that if the co-efficient checked is performed in addition to the
    p-value check that the accuracy over a large number of randomly chosen tests increases
    significantly, hence this is the definition I have developed and chosen to implement
    in Python code to perform the check as accurately as possible.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Identifying a Missing Causal Link in an Invalid DAG
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point we have considered a DAG and a dataset knowing that the DAG was
    an accurate representation of the causal relationships in the data because the
    author created the dataset to reflect the DAG and not the other way around (which
    is the way it works in the real world).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: A method has been proposed for testing the validity of a DAG against a set of
    data that involves testing the independence of non-descendants for each node in
    the DAG and if independence cannot be identified to assume that a link is missing.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: That method has been implemented in Python and tested against a case where the
    DAG matches the data and it has proved that the DAG is valid.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: This is just the start though. Testing a matching DAG for validity is one thing
    but the more important case is — where the DAG is invalid and has missing links
    that DO exist in the dataset, will this method detect them?
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Consider this variation on our DAG …
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a9f9b3e4a9e182ebda4165ee712f8c82.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
- en: A variation on the DAG with an additional link from node Z1 to node W — Image
    by Author
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: A new causal link has been added between node Z1 and node W and here is a new
    synthetic dataset that includes all of the causal relationship including the new
    one …
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aa5fda082cddf2f58f5a1bccdef02c00.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
- en: New dataset including the new link from Z1 to W — Image by Author
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3b212efabdb548c60ec850ca5813a3c6.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
- en: Structural equations that define and describe the new dataset — Image by Author
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s assume that our fictitious domain experts were unaware of the causal
    link between Z1 and W and created this DAG based on their domain knowledge when
    consulted by the data scientists …
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8b1ef295b5473bf02b4710d401015d1c.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
- en: DAG containing an error (the new link is missing) — Image by Author
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: At this point the proposed DAG does not match the dataset. The acid test now
    is to see if our method accurately detects the missing link.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: The chart below shows the results of the ordinary least squares regression from
    implementing the dependence test “W ⫫ Z1, Z2, Z3 | X” …
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3f884933e19e0f13fe3ab801dac38993.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
- en: Coefficients of the new data (that contains the new link) — Image by Author
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When the causal relationship Z1 -> W exists in the data but not in the DAG it
    is correctly identified as missing from the DAG. Hence we know not only that the
    DAG is invalid but also how to fix it. Simply add (“Z1”, “W”) to the DAG as an
    additional edge and it becomes valid!
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: When I first ran this test successfully I was staggered by the implications.
    I was no longer dependent (no pun intended!) on domain experts being infallible.
    If their were gaps in their knowledge or if they made some mistakes this validation
    technique could find causal links they had missed and produce a correct and valid
    DAG!
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: At this point we have successfully tested a single node in a valid DAG against
    a dateset and we have successfully identified a missing link from a single node
    in an invalid DAG.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to expand our single-node test to identify and execute all
    validation tests for an entire DAG …
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: From Testing a Single Node to Validating and Entire DAG
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now move from testing node “W” to validating the entire DAG and as it turns
    out this is very straight-forward. Simply iterate around every node executing
    this algorithm …
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/074f0d4ed153fc4b32405114890ae368.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
- en: 'Mathematical representation of: for every node that node should be independent
    of its non-descendents given its parents — Image by Author'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: For any validation failures add the identified missing link(s) to an overall
    list of missing links and the end result is an identification of all missing links
    in the DAG.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Note that if a node has no parents it should still be tested but if a node has
    no non-descendants it should not and cannot be tested.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: Hence node Z3 is omitted from the tests below as it does not have any non-descendants
    (recalling that parents are excluded from non-descendants).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: The collection of validation tests required to test the entire DAG can be represented
    visually in the diagrams below (in each dag the node being tested is pink, its
    parents are red, its non-descendants are yellow and all remaining nodes are blue)
    …
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/064d30c4245c129c23171a177d3dbd2b.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
- en: Graphical representation of all tests required to fully validate the DAG for
    all missing links — Image by Author
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Here are the tests represented in the equivalent mathematical notation …
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/40fe930f22cc7be93d358393bfeebff4.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
- en: Mathematical representation of all tests required to fully validate the DAG
    for all missing links — Image by Author
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: If these 5 independence tests are executed against the data and the non-descendants
    “vanish” in each test then there is a good level of confidence that the DAG is
    a valid causal representation of the data and that there are no causal links missing
    from the DAG.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: However, there is one more optimisation and improvement that can be made. The
    available texts, notably the Pearlean literature — for example “Causal Inference
    in Statistics” (Pearl, Glymour, Jewell, 2019) — describe a smaller set of tests
    than those represented above although I have never managed to find an explanation
    as to how they have been minimised.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Further research and trial-and-error have led to the discovery that some independence
    tests are equivalent, for example …
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6f0fdf8a6ed895b783722cc5934a2bca.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
- en: Identifying equivalent tests — Image by Author
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: This means that in test A ⫫ B | P1, P2, … , Pn is equivalent to B ⫫ A | P1,
    P2, … , Pn and one of them can be dropped as there is no point testing for exactly
    the same thing twice.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: It therefore follows that the optimised tests for proving or disproving the
    validity of our example DAG are as follows …
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b7d40e034c015e5d1ff7d908063cf95e.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
- en: Optimised missing link tests for our DAG with equivalent tests removed — Image
    by Author
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: i.e. Z2 ⫫ Z1 has been removed because it is equivalent to Z1 ⫫ Z2 and tests
    do not need to be repeated.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Let’s finish this section off by taking a look at the graphs that are produced
    when implementing the OLS regression test for each of our 4 independence statements
    …
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/03b976f44ea940797193da83880198d8.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
- en: Visualising the coefficients for all 4 missing link tests for the DAG — Image
    by Author
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: This result is exactly what we were hoping for! For each node being tested the
    graph shows that the coefficients for the non-descendants are very small i.e.
    they are vanishing i.e. they are independent i.e. there are no missing links.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: The obvious next question to ask is “just how reliable is this technique and
    can it always be relied on to identify missing causal links and correct an invalid
    DAG?”
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: This is a very important question to ask and answer, made doubly so because
    none of the literature (books, blogs and articles etc.) that I have read addresses
    this critical question. Where causal validation is explored at all it tends to
    be incomplete, poorly explained and with too much statistical jargon and not enough
    Python code, but crucially I have only ever found examples where the DAG and the
    data match with no exploration of what happens when they do not.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: The following sections develop this thought beyond anything I have ever found
    in the literature using approaches that I have conceived of and experimented with
    in Python code to see how these algorithms perform in life-like scenarios …
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Proposed Algorithm to Destruction
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To test the algorithm proposed in this article to destruction, the following
    approach was taken …
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Identify every edge (causal relationship) in the dag
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run 100 tests as follows …
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate a valid set of test data for the DAG.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick one of the missing edges at random and delete it.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See if the proposed algorithm correctly identifies the missing edge.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In evaluating success two factors were considered …
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Did the proposed algorithm find the deleted / missing edge(s) exactly?
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Did the algorithm find the deleted / missing edges but in addition to that identify
    additional missing edges in error?
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The results were as follows …
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8690de7bbfdfc172f1ded399957f8278.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
- en: Visualising the testing of all possible combinations of a single missing link
    — Image by Author
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: The missing edge is correctly identified in 100/100 tests but in 13 of those
    tests the algorithm also identifies some other edge(s) that are in fact not missing.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: The next obvious question is “what if two edges / causal links are missing?”
    …
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d4fa9b472be259ec22d63d49403f399b.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
- en: Visualising the testing of all possible combinations of a two missing link s—
    Image by Author
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: The accuracy drops when two edges are deleted. The algorithm correctly finds
    the two missing edges in 68/100 of tests but in 14 of those it over-identifies
    and finds some edges it thinks are missing which in fact are not.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Further tests can be carried out to evaluate the algorithm performance for a
    much more complicated, life-like DAG …
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1b0a9732ef8f01f31fea3336c84519d9.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
- en: Visualising the testing of all possible combinations of a single missing link
    in a complex DAG — Image by Author
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: In this case the algorithm correctly identifies the missing causal link in 74/100
    tests including 18 tests where additional links are identified as missing that
    actually are not.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: To complete the testing, here is the test for a complex DAG with 2 valid links
    taken out …
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/03a64de8d88d9fdc694df8f9be7d4dfe.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
- en: Visualising the testing of all possible combinations of two missing links in
    a complex DAG — Image by Author
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: This time the accuracy starts to slip. The algorithm correctly identifies the
    missing causal links in 50/100 tests but that includes 20 where the algorithm
    incorrectly identified additional links that it thought were missing.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: 'Bonus Section: Optimising Missing Links'
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may have been wondering why the test results have included the number of
    tests where the identified missing links matched exactly with another figure quoted
    for the tests that over-identified i.e. the deleted link(s) were found but so
    were some others that were incorrectly identified.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: The reason is that in the case of over-identification the links identified as
    missing that were not actually missing can be easily fixed.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: In a recent article I explored the mirror image of the validation explained
    here which is where dependence is used to identify spurious links (as opposed
    to using independence to identify missing links).
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '[](/demystifying-dependence-and-why-it-is-important-in-causal-inference-and-causal-validation-4263b18d5f04?source=post_page-----dfdd26c29739--------------------------------)
    [## Demystifying Dependence and Why it is Important in Causal Inference and Causal
    Validation'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: A step-by-step guide in understanding the concept of dependence and how to apply
    it to validate directed acyclic graphs…
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/demystifying-dependence-and-why-it-is-important-in-causal-inference-and-causal-validation-4263b18d5f04?source=post_page-----dfdd26c29739--------------------------------)
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: The “spurious links” algorithm is amazingly accurate and identifies nearly all
    spurious links correctly, even where there are 2 or more and even in a complex
    DAG.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: That means that an algorithm that finds a missing link(s) but also over-identifies
    some that are not actually missing can be optimised and improved as follows …
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Run the dependence / spurious link algorithm to identify and correct any genuine
    **spurious links**.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the independence / missing link algorithm proposed in this article to identify
    and correct any **missing links**.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As step 2 may have over-identified, re-run the dependence / spurious link algorithm
    which will find and remove any links step 2 thought were missing but actually
    were not.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If this advanced algorithm were implemented it would increase the accuracy to
    the higher of the two numbers quoted for each test in the sections above, i.e.
    …
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '1 missing link in a simple DAG: 100% accuracy'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '2 missing links in a simple DAG: 68% accuracy'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '1 missing link in a complex DAG: 74% accuracy'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '2 missing links in a complex DAG: 50% accuracy'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whilst these results are not perfect they are certainly good enough to be extremely
    useful.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: It should also be noted that the algorithm proposed in this article has close
    to 100% accuracy when the DAG actually matches the data so in the case of a validation
    failure an alternative approach would be to modify the DAG through brute-force
    trial-and-error until the validation checks pass (or the errors are minimised).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: These are complex techniques which will be fully explored in future articles
    but the theory is sound and it offers the tantalising potential to produce highly
    effective algorithms for implementing causal validation.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Causal inference offers the promise of a new set of techniques to extend the
    organisational impact and outcomes offered by established machine learning.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: However, in order to start that causal journey the Directed Acyclic Graph (DAG)
    that captures the causal relationships must be constructed using domain expertise
    which can be flawed.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: Unless the DAG accurately captures the causal relationships any subsequent analysis
    could contain errors but causal validation offers the potential to correct and
    fix inaccurate DAGs to ensure the conclusions of causal inference approaches are
    correct.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: A previous article explored how to use dependence to identify and remove spurious
    causal links from the DAG whilst this article explored how to use independence
    to identify and add missing causal links.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: Future articles will explore how to use v-structures to identify and correct
    reversed causal links (where the causal arrow is in the wrong direction) and also
    how to combine spurious, missing and reversed link tests into a coherent whole
    that offers the promise of highly effective causal validation algorithms leading
    to improved organisational impact and outcomes arising from the optimal application
    of causal inference techniques.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Connect and Get in Touch …
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you enjoyed this article, you can get unlimited access to thousands more
    by becoming a Medium member for just $5 a month by [clicking on my referral link](https://grahamharrison-86487.medium.com/membership)
    (I will receive a proportion of the fees if you sign up using this link at no
    extra cost to you).
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://grahamharrison-86487.medium.com/membership?source=post_page-----dfdd26c29739--------------------------------)
    [## Join Medium with my referral link - Graham Harrison'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: grahamharrison-86487.medium.com](https://grahamharrison-86487.medium.com/membership?source=post_page-----dfdd26c29739--------------------------------)
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: … or connect by …
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '[Subscribing to a free e-mail whenever I publish a new story](https://grahamharrison-86487.medium.com/subscribe).'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '[Taking a quick look at my previous articles](https://grahamharrison-86487.medium.com/).'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '[Downloading my free strategic data-driven decision making framework](https://relentless-originator-3199.ck.page/5f4857fd12).'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '[下载我的免费战略数据驱动决策框架](https://relentless-originator-3199.ck.page/5f4857fd12)。'
- en: Visiting my data science website — [The Data Blog](https://www.the-data-blog.co.uk/).
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 访问我的数据科学网站 — [数据博客](https://www.the-data-blog.co.uk/)。
