- en: Develop and test RLS Rules in Power BI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/develop-and-test-rls-rules-in-power-bi-9dc705945feb](https://towardsdatascience.com/develop-and-test-rls-rules-in-power-bi-9dc705945feb)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Very often, not all Users should have permission to access all data in a Report.
    Here I will explain how to develop RLS Rules in Power BI to configure access and
    how to test them.*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@salvatorecagliari?source=post_page-----9dc705945feb--------------------------------)[![Salvatore
    Cagliari](../Images/a24b0cefab6e707cfee06cde9e857559.png)](https://medium.com/@salvatorecagliari?source=post_page-----9dc705945feb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9dc705945feb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9dc705945feb--------------------------------)
    [Salvatore Cagliari](https://medium.com/@salvatorecagliari?source=post_page-----9dc705945feb--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9dc705945feb--------------------------------)
    ·11 min read·Jun 19, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3f6630ce10ed9e616cfbb3cea460be9d.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [FLY:D](https://unsplash.com/es/@flyd2069?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many of my clients want to restrict access to the data in their reports based
    on specific rules.
  prefs: []
  type: TYPE_NORMAL
- en: Access to data is called Row Level Security (RLS in short).
  prefs: []
  type: TYPE_NORMAL
- en: You can find many articles about RLS in Power BI on Medium.
  prefs: []
  type: TYPE_NORMAL
- en: I added two of them in the References section below.
  prefs: []
  type: TYPE_NORMAL
- en: While all the articles do a good job of explaining the basics, I always miss
    an explanation on how to develop more complex rules and how to test them easily.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I will explain the basics of RLS and add complexity step-by-step.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, I will show you how to use DAX Studio to build queries to test
    RLS rules before adding them to the data model.
  prefs: []
  type: TYPE_NORMAL
- en: So, here we are.
  prefs: []
  type: TYPE_NORMAL
- en: Scenario
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I use the Scenario where Users get access to Retail Sales data based on Stores
    or the geographic locations of Stores within the company, including a combination
    of both.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Contoso data model, I use the following tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3e6ace12331645453e4a6c8d136c5674.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1 — Tables involved in my scenario (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'I create the following report to test my results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f207bfb3800d364590dcf8b7a8967049.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2 — Starting report (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: Create a simple rule
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create an RLS Rule, you need to open the Security role editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5163fd1f755b422b1d42f5e62131d497.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3 — Open the Security role editor (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you can create a new Role and set the name for this Role:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/45571303eae42bf50b6132464af4829f.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4 — Create a Role and rename it (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: In my case, I put the name to “StorePermissions”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, I can start adding an expression to control access to the Store table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/12036d119a477347e49b634f8a55402f.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5 — Add a DAX expression to the new Role (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: We have had a new, simpler editor for RLS rules for a few months.
  prefs: []
  type: TYPE_NORMAL
- en: In my case, I want to add a DAX expression. So, I click on the “Switch to DAX
    editor” button.
  prefs: []
  type: TYPE_NORMAL
- en: 'At first, I add the simplest possible expression: TRUE()'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/96f18d77347db2d276bc3fd5bd174edf.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6 — Simplest possible RLS rule (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: To understand RLS Rules, you must know that access is controlled by the output
    of the expression in the RLS rule editor.
  prefs: []
  type: TYPE_NORMAL
- en: The user will get access if the output of the expression is not empty or FALSE().
  prefs: []
  type: TYPE_NORMAL
- en: In principle, any expression in the RLS rule editor is added as a filter to
    any query.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at the effect of this first expression before I explain this in more
    detail.
  prefs: []
  type: TYPE_NORMAL
- en: To test the Rule, I save the expression and close the Editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now I can View the report with the new Rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5209cfe795bacf84fb5556d2d0024d0e.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7 — Test the RLS rule (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: On top of the report page, you will see a yellow banner showing that you are
    looking at the report using the StorePermission Rule.
  prefs: []
  type: TYPE_NORMAL
- en: As the StorePermission rule doesn’t restrict access, you will not see any difference.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try something different.
  prefs: []
  type: TYPE_NORMAL
- en: Now I change the Expression in the RLS rule to FALSE().
  prefs: []
  type: TYPE_NORMAL
- en: 'When I test the Rule, I will not see any data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0fc433091b9bca0bc98a6b1f95d142a8.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8 — Test the Rule with FALSE() (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: This proves that data is accessible if the expression doesn’t return FALSE().
  prefs: []
  type: TYPE_NORMAL
- en: Test query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To understand this effect in detail, let me show a DAX query to get the result
    without any restrictions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When I add an RLS rule with TRUE(), as shown above, the query changes to a
    query similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: I enclosed the query within a [FILTER()](https://dax.guide/filter/) function
    and added TRUE() as the filter expression.
  prefs: []
  type: TYPE_NORMAL
- en: In the following examples, I will use [CALCULATETABLE()](https://dax.guide/calculatetable/),
    as writing the code is more efficient and flexible.
  prefs: []
  type: TYPE_NORMAL
- en: More on this in a bit.
  prefs: []
  type: TYPE_NORMAL
- en: Make it more complex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, I want to restrict access to all Stores containing the “Contoso T” String.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, I change the Expression in the Rule editor to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When testing the rule, I get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6ba98951af69ed96b5ea131eff9e4fe0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9 — Result for restricting access to “Contoso T” Stores (Figure by the
    Author)
  prefs: []
  type: TYPE_NORMAL
- en: Testing the rule with a DAX query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It would be nice to test the outcome of such a rule with a DAX Query.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, I use the following Query in DAX Studio to check the Result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The inner part, with SUMMARIZECOLUMNS(), generates the output table.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, I’m interested only in the list of the stores.
  prefs: []
  type: TYPE_NORMAL
- en: Then, I enclose the SUMMARIZECOLUMNS() call with CALCULATETABLE() to add a filter
    to the query.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, I add the expression from the RLS rule, including an “= TRUE()”
    check.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dc97aebf36baa1b2a01bc187dd1c51e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10 — Result of check query (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: But what happens under the hood?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at the Storage Engine Query:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aa511442640dc933a1f0d97e3252ede7.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11 — Result of the check Query (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: And what happens when I apply the RLS rule to this query?
  prefs: []
  type: TYPE_NORMAL
- en: 'I can apply an RLS rule from DAX Studio with a few clicks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2dc5fdf0eb5591a3b7211711c7e11eed.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12 — Activate an RLS rule (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'The Storage Engine query is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5520d489d048cd504e11d7a43a74a7d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13 — Query Analysis with the RLS Rule
  prefs: []
  type: TYPE_NORMAL
- en: The first query (Line 2) retrieves the list of all Stores.
  prefs: []
  type: TYPE_NORMAL
- en: The second query includes the RLS rule in the WHERE clause.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of having the list matching Stores (According to the Filter), we see
    a cryptic line, which includes the RLS rule.
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the result of the Storage Engine (SE) query still contains
    309 Rows, like above, which is the number of all Stores + 3 rows.
  prefs: []
  type: TYPE_NORMAL
- en: 'A hint why we have the discrepancy of 3 rows is in the text below the SE query:
    Estimated size: rows = 309'
  prefs: []
  type: TYPE_NORMAL
- en: The actual number of rows returned may be indeed 306.
  prefs: []
  type: TYPE_NORMAL
- en: 'But this analysis shows that RLS rules are applied **after** the Storage Engine,
    as the query result contains only 21 rows: All Stores which start with “Contoso
    T”.'
  prefs: []
  type: TYPE_NORMAL
- en: This is important, as the Formula Engine (FE), which will compute the final
    result after the Storage Engine, is single-threaded and can use only one CPU Core.
  prefs: []
  type: TYPE_NORMAL
- en: While the SE is multi-threaded and can use multiple CPU cores.
  prefs: []
  type: TYPE_NORMAL
- en: Consequently, we must refrain from writing inefficient code into the RLS rule.
  prefs: []
  type: TYPE_NORMAL
- en: Combined Rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, I want to combine two expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: Only Stores starting with “Contoso T”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Only Stores in Europe
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To achieve this, I add a second expression to the Geography table using the
    simple editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ee5f3b20213a17ff15d8d921af619ff6.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14 — Add expression to the Geography table (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'When I switch to the DAX Editor, I get the following expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7b774701439a54427e065974cba69fb9.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15 — DAX Expression from the Simple editor (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: Notice the use of the [strict equal](https://dax.guide/op/strictly-equal-to/)
    operator.
  prefs: []
  type: TYPE_NORMAL
- en: Changing to the [simple equal](https://dax.guide/op/equal-to/) operator for
    your expression can be necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the result when testing the rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/657c2b2430c01229939fcdebbb26166c.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16 — Result of the combined rule (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'The DAX query for this rule will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5c0aba2bb0e6cafb17e1be6f7708c52a.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17 — Translation to a DAX query and results (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add another level of complexity to the RLS rule:'
  prefs: []
  type: TYPE_NORMAL
- en: 'I want to restrict access to the Stores which either:'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the Stores starts with “Contoso T” and are in Europe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: or
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The name of the Stores starts with “Contoso S” and are in North America
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This time, I begin with the DAX query. This is the simpler way to develop and
    test the expression.
  prefs: []
  type: TYPE_NORMAL
- en: I take the first query and enclose it with the filter expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'As I need to filter two tables (Store and Geography), I must use [FILTER()](https://dax.guide/filter/)
    and [RELATED()](https://dax.guide/related/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: I need the RELATED() function as I use FILTER() to iterate through the Store
    table, and I need the Continent column from the Geography table.
  prefs: []
  type: TYPE_NORMAL
- en: As the Geography table is on the one side of the Relationship, I can use RELATED()
    to get the Continent column.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d343992b3d6aa9dd7c06b55bdaba0a21.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18 — Query for the combined Rule (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: Next, we must translate this filter to an RLS rule.
  prefs: []
  type: TYPE_NORMAL
- en: For the RLS rule, we can remove the FILTER() function, as the RLS rule inherently
    works as a filter.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6a32f977f6c3861a233ee62c39eec8b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19 — Translation to one RLS Rule (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: Note that I removed the expression from the “Geography” table.
  prefs: []
  type: TYPE_NORMAL
- en: 'When I test this rule in Power BI, I get the following result, which corresponds
    to the result from the DAX query:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a972329adcfc75198dfe9c5450fb4cb3.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20 — Testing the combined RLS rule (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'For testing the RLS rule, for example, when you want only to get the list of
    filtered stores, you can write a simple query with just the FILTER() function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b9116c7db484912d8de84661386ed1d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21 — Executing the FILTER() only (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: Configure access based on User login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, we looked at static RLS rules.
  prefs: []
  type: TYPE_NORMAL
- en: But most of the time, we need rules based on the User-Login.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, we need a table that maps the user to the rows the user needs
    access to.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, a table like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/843e919e0fc9a9021eed546cb641bccf.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 22 — User List with assigned Geographies (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'After adding the table to the data model, we need to add a Relationship between
    the new table and the “Geography” table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/68e2d7c0f185d727fd91b5c466afaaec.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 23 — Expanded data model (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: The relationship between the new “Geography Access” table and the “Geography”
    table must be configured correctly.
  prefs: []
  type: TYPE_NORMAL
- en: After adding the Relationship, Power BI configures it as a 1:n Relationship,
    with the “Geography” table on the one side and the Filter flowing from the “Geography”
    table to “Geography Access”.
  prefs: []
  type: TYPE_NORMAL
- en: But we want to filter the “Geography” table based on an RLS rule (a filter)
    on “Geography Access”.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this reason, we must change the cross-filter direction to both:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4f31f62e171dac8ee50883679342d6ac.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 24 — Settings of the Relationship (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we **must** set the flag on “Apply security filter in both directions,”
    as Power BI ignores the cross-filter direction setting when applying RLS rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can add the RLS rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/222f67d842750fd12a9874e31f769422.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 25 — Configure the RLS Rule (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: Remember to remove any filter expression on the Store table before adding this
    rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'When testing the RLS rule, I get this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f6cca559b74366808f4d4674f42ceaf1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 26 — Empty result (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out what happens, let’s go back to the RLS rule editor and change the
    view for the Rule to DAX:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cdadbb3855f0e9c399cea26fd80fd48d.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 27 — Wrong RLS rule (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: The simple RLS rule editor doesn’t recognize DAX functions and adds them as
    Text to filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We must change the expression to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/035eb52a0943cc1aaef5458c1e50a469.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 28 — Correct DAX rule (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the result is as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2d2b99f4fb906c397110389c22590fbe.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 29 — Testing the RLS rule with my user and the correct RLS expression
    (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: The Card on the top-left corner of the report page contains a Measure with the
    [USERPRINCIPALNAME()](https://dax.guide/userprincipalname/) function to ensure
    that the correct user is active during the test.
  prefs: []
  type: TYPE_NORMAL
- en: 'I can even test an RLS rule using another user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9125868ce54fa7a669eac6d0e66c0f27.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 30 — Test the RLS rule with another user (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: It’s funny that this user doesn’t need to exist. It only has to be contained
    in the “Geography Access” list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the result of the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/76fc10de36c840f3bb07834c0e06b051.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 31 — Test-Result with test user (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: In the yellow line on top, you can see the active user during the test.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I showed you how to create elementary RLS rules and how to test them.
  prefs: []
  type: TYPE_NORMAL
- en: Then I added more complexity and analyzed the effects of RLS rules on the underlying
    Storage engine.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen that the Formula Engine processes part of the RLS rule. Therefore,
    we must write efficient code in the RLS rules.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing how to test RLS rules before implementing them in the data model is
    very important.
  prefs: []
  type: TYPE_NORMAL
- en: It is much easier to understand wrong results by understanding how the rule
    is applied to the data model.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, I added dynamic user-based RLS rules to the model.
  prefs: []
  type: TYPE_NORMAL
- en: These rules are more difficult to test in a DAX query, as you must know which
    data each user can access to write the correct test query to validate the result.
  prefs: []
  type: TYPE_NORMAL
- en: I hope I have given you some hints on simplifying your life with the RLS feature
    in Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bb32cf8ffb6a8c17a86ed350b08abf8f.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Andrew George](https://unsplash.com/@andrewjoegeorge?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find a list of Security features in Power BI in this Article:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/4-2-security-features-in-power-bi-4c5a21968e53?source=post_page-----9dc705945feb--------------------------------)
    [## 4 + 2 Security features in Power BI'
  prefs: []
  type: TYPE_NORMAL
- en: One year after my first article on this topic, here is an update on new security
    features in Power BI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/4-2-security-features-in-power-bi-4c5a21968e53?source=post_page-----9dc705945feb--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find a simple explanation about Row Level Security in Power BI on the
    Power BI (Now Fabric) Community page: [Row-level security (RLS) with Power BI
    — Power BI | Microsoft Learn](https://learn.microsoft.com/en-us/power-bi/enterprise/service-admin-rls).'
  prefs: []
  type: TYPE_NORMAL
- en: 'I can recommend this article by [Nikola Ilic](https://medium.com/u/64005b7daa38?source=post_page-----9dc705945feb--------------------------------),
    where you can get a starting point about RLS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/the-ultimate-guide-to-row-level-and-object-level-security-in-power-bi-3a98f5422bad?source=post_page-----9dc705945feb--------------------------------)
    [## The Ultimate Guide to Row-Level and Object-Level Security in Power BI'
  prefs: []
  type: TYPE_NORMAL
- en: “Who sees what in the report?” is one of the key security questions in Power
    BI. Learn two possible ways to implement…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/the-ultimate-guide-to-row-level-and-object-level-security-in-power-bi-3a98f5422bad?source=post_page-----9dc705945feb--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Another good introductory article on Row-Level-Security in Power BI by [Elias
    Nordlinder](https://medium.com/u/23dedceb9914?source=post_page-----9dc705945feb--------------------------------):'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://elias-nordlinder.medium.com/how-to-implement-row-level-security-in-power-bi-part-i-dc2da88d0b6e?source=post_page-----9dc705945feb--------------------------------)
    [## How to implement Row Level Security in Power BI (Part I)'
  prefs: []
  type: TYPE_NORMAL
- en: Row-Level Security is a way to filter the data differently depending on different
    roles. This might be done statically…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: elias-nordlinder.medium.com](https://elias-nordlinder.medium.com/how-to-implement-row-level-security-in-power-bi-part-i-dc2da88d0b6e?source=post_page-----9dc705945feb--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Visit my Stories List for more information [about the FILTER() function](https://medium.com/towards-data-science/how-to-use-filter-in-dax-the-correct-way-eb621b49527a)
    and how to [analyze DAX Query with DAX Studio](https://medium.com/towards-data-science/how-to-get-performance-data-from-power-bi-with-dax-studio-b7f11b9dd9f9).
  prefs: []
  type: TYPE_NORMAL
- en: I use the Contoso sample dataset, like in my previous articles. You can download
    the ContosoRetailDW Dataset for free from Microsoft [here](https://www.microsoft.com/en-us/download/details.aspx?id=18279).
  prefs: []
  type: TYPE_NORMAL
- en: The Contoso Data can be freely used under the MIT License, as described [here](https://github.com/microsoft/Power-BI-Embedded-Contoso-Sales-Demo).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@salvatorecagliari/subscribe?source=post_page-----9dc705945feb--------------------------------)
    [## Get an email whenever Salvatore Cagliari publishes.'
  prefs: []
  type: TYPE_NORMAL
- en: Get an email whenever Salvatore Cagliari publishes. By signing up, you will
    create a Medium account if you don't…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@salvatorecagliari/subscribe?source=post_page-----9dc705945feb--------------------------------)
  prefs: []
  type: TYPE_NORMAL
