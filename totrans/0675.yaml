- en: Dealing with Dates in Python‚Äôs DataFrame Part 1 ‚Äî Date Series Creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/dealing-with-dates-in-pythons-dataframe-part-1-date-series-creation-f4a800db9ae](https://towardsdatascience.com/dealing-with-dates-in-pythons-dataframe-part-1-date-series-creation-f4a800db9ae)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data Processing in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pandas methods for date series creation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://kahemchu.medium.com/?source=post_page-----f4a800db9ae--------------------------------)[![KahEm
    Chu](../Images/2f89d02e85f61f08f048773990f4d53f.png)](https://kahemchu.medium.com/?source=post_page-----f4a800db9ae--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f4a800db9ae--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f4a800db9ae--------------------------------)
    [KahEm Chu](https://kahemchu.medium.com/?source=post_page-----f4a800db9ae--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f4a800db9ae--------------------------------)
    ¬∑10 min read¬∑Jan 4, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d3349995772e17d6c1e9e1b34526cc5b.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Jon Tyson](https://unsplash.com/@jontyson?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/s/photos/time?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Most of the time, the DateTime object represents a crucial element for drawing
    insights from the data. We can understand the trend, cycle, and seasonal pattern
    from the data with the date. From that, we can prepare the report based on the
    pattern found, and further study and analyze the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The importance of the DateTime object in analysis motivated me to study further
    what I can do with the DateTime object in the `pandas` module. Then, I jotted
    down the methods and properties I used frequently and those I felt I might need
    to use some days. Furthermore, I grouped them into parts according to my understanding.
    There are 2 parts created as below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/31bdd968f0779f2b31bcfdec88c1c29a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Author.
  prefs: []
  type: TYPE_NORMAL
- en: For a better reading experience, I decided to split the group into 2 articles.
    This is the first article, you may find [the second article here](/dealing-with-dates-in-pythons-dataframe-part-2-the-basics-9ad5edacd2f8).
  prefs: []
  type: TYPE_NORMAL
- en: Let us start with Part 1, *The Basic to Deal with DateTime Series*.
  prefs: []
  type: TYPE_NORMAL
- en: Part 1 ‚Äî The Basic to Deal with DateTime Series
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[DateTime Series Creation](#0933)'
  prefs: []
  type: TYPE_NORMAL
- en: '[pandas.date_range](#b5e1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[pandas.bdate_range](#bbc9)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[pandas.period_range](#7d21)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[pandas.timedelta_range](#b8b9)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DateTime Series Creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DateTime series creation is practical when you want to create a sample dataset
    to test out a couple of new functions that you are writing. Below are the four
    DateTime series creation methods from the `pandas` module.
  prefs: []
  type: TYPE_NORMAL
- en: '[pandas.date_range](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.date_range.html?highlight=date_range#pandas.date_range)
    ‚Äî Return a fixed frequency DatetimeIndex.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[pandas.bdate_range](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.bdate_range.html)
    ‚Äî Return a fixed frequency DatetimeIndex, with the business day as the default
    frequency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[pandas.period_range](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.period_range.html)
    ‚Äî Return a fixed frequency PeriodIndex. The day (calendar) is the default frequency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[pandas.timedelta_range](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.timedelta_range.html)
    ‚Äî Return a fixed frequency TimedeltaIndex, with the day as the default frequency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The frequency mentioned above is referring to the interval between the dates
    generated, it could be hourly, daily, monthly, quarterly, yearly and more. You
    may learn about the [frequency string aliases in this link](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases)
    [1].
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs see them one by one!
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. pandas.date_range**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `pandas.date_range()` method returns the DateTime series according to the
    combination of three parameters from the following four parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`start` ‚Äî the start date of the date range generated'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`end` ‚Äî the end date of the date range generated'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`periods` ‚Äî the number of dates generated'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`freq` ‚Äî default to ‚ÄúD‚Äù, the interval between dates generated, it could be
    hourly, monthly or yearly'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Note:* `freq = ‚ÄúD‚Äù` *mean daily frequency.*'
  prefs: []
  type: TYPE_NORMAL
- en: At least three of the 4 parameters above must be stated to generate a DateTime
    series. Since the `freq` is defaulted to be ‚ÄúD‚Äù, if you are using `freq=D`, you
    need to specify the other two parameters only. If `freq` is omitted, which means
    you specify only the `start`, the `end` and the `period` parameters, and the date
    created will have periods of linearly spaced elements between the start and the
    end date. There are other parameters in the method, but in this article, we will
    focus on these 4 main parameters only.
  prefs: []
  type: TYPE_NORMAL
- en: For the **first example**, the dates are generated by specifying the start date
    and the period. As mentioned above, the frequency is set to be daily by default.
    Hence, there will be 10 dates generated at a daily frequency.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dd9d065d649643000f0d164a77e22eea.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: For the **second example**, the start date, the periods, and the frequency are
    specified. The following example is creating a date series starting from 2020/1/1,
    10 dates with 3-month intervals between each date.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/29d895a26aeed2724e4983258eec9864.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Why are the dates start from month's end? ü§®
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Well, it's actually because the ‚ÄúM‚Äù frequency refers to the month-end frequency,
    while the ‚ÄúMS‚Äù refers to the month-start frequency [[1]](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases).
  prefs: []
  type: TYPE_NORMAL
- en: For the **third example**, the start and end date, and the frequency are provided.
    As mentioned, the dates created will be linearly spaced when you omitted the frequency.
    Then, if the periods are omitted, the dates created will be the dates within the
    start and end date at the frequency interval specified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e39a9740855558489678ed42e6f1140b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/be9049a9c1c63095482efd207c6b604c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Author. Created with Excalidraw.
  prefs: []
  type: TYPE_NORMAL
- en: As the next period will be Jan 31, 2023, hence there are only 4 dates created
    in the third example üòâ.
  prefs: []
  type: TYPE_NORMAL
- en: '**A simple guide here:**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When you are certain about the number of dates you want to create, you use the
    **period** parameter.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When you are not sure about how many exact dates you will have but know when
    should it end or it should not exceed, use the **end** parameter instead.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**2\. pandas.bdate_range**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to `pandas.date_range()` method, `pandas.bdate_range()` also have 4
    main parameters, which are the `start`, the `end`, the `periods` and the `freq`,
    except the `freq` is defaulted to ‚ÄúB‚Äù in `pandas.bdate_range()`. The ‚ÄúB‚Äù refers
    to business day frequency, which the weekend like Saturday and Sunday will be
    skipped.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see the **first example**! So, in the following example, the start date
    and the periods are specified, and as mentioned, the frequency is defaulted to
    ‚ÄúB‚Äù.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8bc3c25787eb5a0bf9d502fcee72b97e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The two dates which are skipped, ‚Äú2022‚Äì01‚Äì08‚Äù and ‚Äú2022‚Äì01‚Äì09‚Äù are Saturday
    and Sunday respectively.
  prefs: []
  type: TYPE_NORMAL
- en: You might notice that the `pandas.date_range()` method can return workdays only
    as well when you set the `freq= ‚ÄúB‚Äù`, then why do we need to use `pandas.bdate_range()`?
    ü§∑‚Äç‚ôÄÔ∏è
  prefs: []
  type: TYPE_NORMAL
- en: This is because of the `pandas.bdate_range()` return business day by default
    and `pandas.bdate_range()` have `weekmask` and `holidays`parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** To use the `holidays` or `weekmask` parameter, **custom business
    day frequency** need to be used, where `freq= ‚ÄúC‚Äù`. [[2]](https://stackoverflow.com/questions/55248600/pandas-specifying-custom-holidays)'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let us see what is the `holidays` parameter. `Holidays` referring to the
    list of dates to exclude from the set of valid business days.
  prefs: []
  type: TYPE_NORMAL
- en: For the **second example**, the start date, periods, frequency and holidays
    parameter are specified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/602f90cfa1f6927676cc019c53f2f814.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The holiday date specified is not on the list of dates generated, and as ‚ÄúC‚Äù
    refers to the custom business day frequency, so the weekend is still skipped in
    the date range created.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** The Holidays parameter only takes a list of the datetime objects.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see the `weekmask` parameter. Weekmask refers to the valid business
    days for a business that does not follow traditional business like Mon to Fri.
    Also, the default value for `weekmask` is equivalent to ‚ÄòMon Tue Wed Thu Fri‚Äô.
  prefs: []
  type: TYPE_NORMAL
- en: For the **third example**, we specified the start date, the custom business
    day with `weekmask = ‚ÄúTue Wed Thu Fri Sat Sun‚Äù`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1badc10d915089ccffc67a13dec174e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The Monday date (2022‚Äì01‚Äì10) will not be included in the dates created. This
    parameter is useful when the business not running according to a normal weekday.
  prefs: []
  type: TYPE_NORMAL
- en: Combining these two parameters, you can generate the DateTime series according
    to your business operating day as in the example below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e625be0ef3cc9531067b1f03e2b368ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: As seen from the output, the Monday date (2022‚Äì01‚Äì10) and holiday date (2022‚Äì01‚Äì07)
    are not included in the list generated.
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. pandas.period range**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some similarities and differences between `pandas.period_range()`
    method and the two methods earlier, the `pandas.date_range()` and `pandas.bdate_range()`
    .
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the two methods earlier, `pandas.period_range()` can generate the
    date series by specifying the 3 out of the 4 main parameters, `start`, `end`,
    `periods` and `freq`. Also, the frequency is still defaulted to daily.
  prefs: []
  type: TYPE_NORMAL
- en: One difference to take note of is that the `pandas.period_range()` generate
    period object instead of a DateTime object.
  prefs: []
  type: TYPE_NORMAL
- en: For the **first example**, we are generating a series of 5 periods in daily
    frequency by default, starting from 2022‚Äì01‚Äì01.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ef8d835618168bf5e526080429dc8f08.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: For the **second example**, we are generating a series of 5 periods in monthly
    frequency, starting from 2022‚Äì01‚Äì01.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d68aa1c805b6dadab4277ca01245e009.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: For the **third example**, we are generating a series of 5 periods in yearly
    frequency, starting from 2022‚Äì01‚Äì01.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4d09ae89354eea02b1b87a9ea699cf75.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: For the **last example**, we are generating a series in yearly frequency, starting
    from 2022‚Äì01‚Äì01 to 2027‚Äì01‚Äì01.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e467a0cc91d8f9328bf302de01cbda15.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The period_range method work in the same way with `pandas.date_range()`, just
    it returns the period instead of the date. So, if the `periods` parameter is omitted,
    the periods created will be the periods within the start and end date with the
    frequency interval specified.
  prefs: []
  type: TYPE_NORMAL
- en: '**4\. pandas.timedelta_range**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to the three methods above, `pandas.timedelta_range()` method returns
    the date series according to the combination of three parameters from the four
    main parameters, start, end, periods and frequency. The frequency is still defaulted
    to daily. There is one difference between this method with the three examples
    earlier, which can be explained with the example below.
  prefs: []
  type: TYPE_NORMAL
- en: The example below is from a mistake I made during running the script, and then
    the errors that occurred.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The script above returns a Key Error and a Value Error as below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a48471c65e93d3b735015f75a39bac90.png)'
  prefs: []
  type: TYPE_IMG
- en: Key Error. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bdd091195332b8785819b0abff3483c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Value Error. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: From the error script, we can see the error comes from the value we put for
    the ‚Äústart‚Äù parameter. As we are generating a time delta object, the value we
    put for the ‚Äústart‚Äù parameter should be in timedelta format too.
  prefs: []
  type: TYPE_NORMAL
- en: So, the correct example should be as below, where the start is specified in
    timedelta format, the number of periods is specified, and the default daily frequency
    is used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a023494a11b34cea30c17bbdf067385b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: For the second example, the starting time delta, the periods and the frequency
    are specified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4082e9a9a8ad6a5f6298e8a8b2db5031.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: For the third example, the starting time delta, the end time delta and the frequency
    are specified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/62399de92be4ced62f374dc9681ec454.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: For the fourth example, the starting time delta, the end time delta and the
    periods are specified. The time delta series generated will be linearly spaced
    when the frequency is not set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cb55d385f5a812cbcde33e343fca56f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: For the `pandas.timedelta_range()` method, the ‚Äústart‚Äù parameter accepts
    only the time delta object, while for the other three methods, the ‚Äústart‚Äù parameter
    takes the Datetime object as input.'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. **Create DateTime with a Timestamp**
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the pandas module, we can also create the datetime object with the timestamp
    method.
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways to create a DateTime object with a timestamp, the first way
    is with the datetime parameters as below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/770b4803a5591dbf881c564592414699.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The second way is to create the timestamp from the DateTime string.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/268128a5c66fd13e8de07d4f40b3e5f0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, so the above is a demonstration of the usage of timestamp methods to create
    a DateTime object.
  prefs: []
  type: TYPE_NORMAL
- en: '**Conclusion**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In conclusion, we have seen 4 methods related to DateTime series creation, which
    are standard date creation, business date creation, period creation and timedelta
    creation. Other than that, the date creation method with timestamp is also demonstrated.
  prefs: []
  type: TYPE_NORMAL
- en: That‚Äôs all for the DateTime series creation in Python. I hope you enjoy reading
    this article and hope it helps you to understand more about DateTime series creation
    in a DataFrame. Thanks! üòä
  prefs: []
  type: TYPE_NORMAL
- en: Stay Connected
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Subscribe on [YouTube](https://www.youtube.com/channel/UCiMtx0qbILP41Ot-pkk6eJw)
  prefs: []
  type: TYPE_NORMAL
- en: Side Note
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Part Two of this article, [Dealing with Dates in Python‚Äôs DataFrame Part 2 ‚Äî
    The Basics](/dealing-with-dates-in-pythons-dataframe-part-2-the-basics-9ad5edacd2f8).
  prefs: []
  type: TYPE_NORMAL
- en: I have explained the possible manipulation you can perform on the DateTime variables
    in [Dealing with Dates in Python](https://medium.com/towards-data-science/dealing-with-dates-in-python-1b4069a07a0f).
  prefs: []
  type: TYPE_NORMAL
- en: In [Report Automation Tips with Python](/report-automation-tips-with-python-783a9cd58e23),
    I have explained some tips on report automation. Check it out!
  prefs: []
  type: TYPE_NORMAL
- en: Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] [Time Series/Data Functionality ‚Äî Offset aliases. *pandas*: String aliases
    for useful common time series frequencies](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] [pandas-specifying-custom-holidays](https://stackoverflow.com/questions/55248600/pandas-specifying-custom-holidays):
    Specifying custom holidays in `pandas.bdate_range()` method'
  prefs: []
  type: TYPE_NORMAL
- en: Thank you and congrats for reading to the end üòä!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bb86215d7a55cb1f73fcdca86f1e5572.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [JOSHUA COLEMAN](https://unsplash.com/@joshstyle?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/s/photos/thank-you?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
