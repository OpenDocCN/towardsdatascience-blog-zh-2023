- en: Analyze performance when aggregating data in Power BI and DAX Queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/analyze-performance-when-aggregating-data-in-power-bi-and-dax-queries-fc00027950a3](https://towardsdatascience.com/analyze-performance-when-aggregating-data-in-power-bi-and-dax-queries-fc00027950a3)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*We aggregate data in Power BI all the time. Sometimes we want to query our
    data model manually or need intermediary tables within our Measures. Let’s look
    at how we can do this.*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@salvatorecagliari?source=post_page-----fc00027950a3--------------------------------)[![Salvatore
    Cagliari](../Images/a24b0cefab6e707cfee06cde9e857559.png)](https://medium.com/@salvatorecagliari?source=post_page-----fc00027950a3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fc00027950a3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fc00027950a3--------------------------------)
    [Salvatore Cagliari](https://medium.com/@salvatorecagliari?source=post_page-----fc00027950a3--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fc00027950a3--------------------------------)
    ·8 min read·May 1, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e798626b974acc167cbccbdc87b18161.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Isaac Smith](https://unsplash.com/@isaacmsmith?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Have you ever asked yourself:'
  prefs: []
  type: TYPE_NORMAL
- en: What happens behind the scenes of a Power BI Visual?
  prefs: []
  type: TYPE_NORMAL
- en: Or
  prefs: []
  type: TYPE_NORMAL
- en: How can I write a query to get the result shown in a Power BI Visual?
  prefs: []
  type: TYPE_NORMAL
- en: OK, you can catch the Query with Performance Analyzer and copy the Query in
    a Text Editor or, even better, in DAX Studio.
  prefs: []
  type: TYPE_NORMAL
- en: But do you understand what happens in the Query?
  prefs: []
  type: TYPE_NORMAL
- en: 'When you look at the function documentation for DAX, either in the [Microsoft
    DAX function Reference](https://learn.microsoft.com/en-us/dax/dax-function-reference)
    or on [DAX.Guide](https://dax.guide/), you will find at least five functions to
    generate tables in a query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[SELECTCOLUMNS()](https://dax.guide/selectcolumns/) and [ADDCOLUMNS()](https://dax.guide/addcolumns/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SUMMARIZE()](https://dax.guide/summarize/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SUMMARIZECOLUMNS()](https://dax.guide/summarizecolumns/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CALCULATETABLE()](https://dax.guide/calculatetable/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this article, I will set the scene with a Base Query. Then I will use the
    different functions to rebuild the Query from scratch and look at the differences
    between these functions.
  prefs: []
  type: TYPE_NORMAL
- en: I will look at the functional differences and the differences regarding efficiency
    and performance.
  prefs: []
  type: TYPE_NORMAL
- en: Base Query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s start with the base query.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following Matrix in Power BI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fc4fa958091472c0605a0e9de17b9b89.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1 — Starting Visual (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'I extracted the query with Performance Analyzer and, after removing all the
    Subtotal Stuff needed by Power BI to calculate the totals at the Country and Continent
    Level, the remaining is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Key function here is [SUMMARIZECOLUMNS()](https://dax.guide/summarizecolumns/).
  prefs: []
  type: TYPE_NORMAL
- en: This function gets the distinct values from the two columns [ContinentName]
    and [RegionCountryName] and executes the Measure [Sum Online Sales] for each row
    while applying the filter defined in the Variable __DS0FilterTable.
  prefs: []
  type: TYPE_NORMAL
- en: In all the following examples, I will (try to) keep the definition of the __DS0FilterTable
    as shown above.
  prefs: []
  type: TYPE_NORMAL
- en: SELECTCOLUMNS() and ADDCOLUMNS()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With [SELECTCOLUMNS()](https://dax.guide/selectcolumns/), I can add calculated
    columns to an input table, for example, with a Measure.
  prefs: []
  type: TYPE_NORMAL
- en: The input table can be an existing table or the result of a table function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try this form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the result of this Query:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/45d7ad7b9cc68201bd2cb30581e068cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2 — Part of the result for ADDCOLUMNS() (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, I get all rows from the Geography tables, even though I selected
    only two columns for the query, even those without results.
  prefs: []
  type: TYPE_NORMAL
- en: I want something else.
  prefs: []
  type: TYPE_NORMAL
- en: Another problem is that with SELECTCOLUMNS(), I cannot introduce the Filter
    above.
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, when looking at the Server Timings, this query doesn’t look that bad:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/01c802c59bcd9f27337296565ccbfb6b.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3 — Server Timings for ADDCOLUMNS() (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: Most of the work is done in the Storage Engine, and the parallelism is excellent
    at almost 7.5.
  prefs: []
  type: TYPE_NORMAL
- en: When copying this result to Excel, we can remove the Empty Rows without problems.
  prefs: []
  type: TYPE_NORMAL
- en: '[SELECTCOLUMNS()](https://dax.guide/selectcolumns/) is very similar to [ADDCOLUMNS()](https://dax.guide/addcolumns/).'
  prefs: []
  type: TYPE_NORMAL
- en: According to DAX.guide, the difference is that SELECTCOLUMNS() starts with an
    empty table, then adds the given columns, while ADDCOLUMNS() starts with all input
    table columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we try this query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We get a table with all columns of the Geography table, and for each row, the
    result of the Measure.
  prefs: []
  type: TYPE_NORMAL
- en: I need specific functions to create a table because I can define only one input
    table.
  prefs: []
  type: TYPE_NORMAL
- en: I will come back to this issue later in this article.
  prefs: []
  type: TYPE_NORMAL
- en: SUMMARIZE()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The function [SUMMARIZE()](https://dax.guide/summarize/) allows me to get a
    table summarizing the given columns and adding computed columns, for example,
    with a Measure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the example above, the query will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Again, we cannot add a Filter to this query.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we will get the result for all years:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/30680cb2c702f399ef8a8089b2491286.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4 — Result with SUMMARIZE() (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: But, again, I will get a list of all countries, including those without value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Server Timings look good as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d9f04632751c6a305cc89e77d6808b56.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5 — Server Timings for SUMMARIZE() (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: But there are some issues with the SUMMARIZE() functions.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the articles describing these issues in the References section
    below.
  prefs: []
  type: TYPE_NORMAL
- en: Now, I will show you how to complete the job with the correct form.
  prefs: []
  type: TYPE_NORMAL
- en: SUMMARIZECOLUMNS()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The [SUMMARIZECOLUMNS()](https://dax.guide/summarizecolumns/) function combines
    the strengths of ADDCOLUMN() and SUMMARIZE() into one powerful function.
  prefs: []
  type: TYPE_NORMAL
- en: I can pass multiple columns to the function used as the summarization columns
    and add calculated columns. And I can pass a filter to the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When you look at the query at the beginning of this article, you will find precisely
    this query.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/86ead1887ad3080e8c42b73da1b6ec5c.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6 — Result with SUMMARIZECOLUMNS() (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: This is the result we expected from our query.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Server Timings are impressive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b207c653a0b03e24997fb3caee0b606d.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7- Server Timings for SUMMARIZECOLUMNS() (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: Done, isn’t it?
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9fd90500575cb44248c04d36b775b31b.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Zac Durant](https://unsplash.com/@zacdurant?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: No, wait a moment.
  prefs: []
  type: TYPE_NORMAL
- en: What if I try adding a Filter to the above query to restrict my data to one
    year?
  prefs: []
  type: TYPE_NORMAL
- en: It turns out that I cannot do that, and I can pass only a table as a filter
    to SUMMARIZECOLUMNS().
  prefs: []
  type: TYPE_NORMAL
- en: CALCULATETABLE()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[CALCULATETABLE()](https://dax.guide/calculatetable/) is different from the
    other three functions.'
  prefs: []
  type: TYPE_NORMAL
- en: I can use CALCULATETABLE() in the same way as I use [CALCULATE()](https://dax.guide/calculate/).
    But I use a table as the first parameter instead of an aggregation function or
    another Measure. Then I can add filters as additional parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s try to restrict the result from the last query to one year:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, I used the SUMMARIZECOLUMNS() function as the Input to CALCULATETABLE()
    and added a column filter to the query.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cf255442e3dae69dcfd335b648861771.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8 — Result with CALCULATETABLE() (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'And the Server Timings are highly efficient with only one SE Query:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6c694e0fb8f138937a284dcbe439354c.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9 — Server Timings for CALCULATETABLE() (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: CALCULATETABLE() can combine the entire DAX Query into one SE Query, making
    it very efficient.
  prefs: []
  type: TYPE_NORMAL
- en: But don’t expect that CALCULATETABLE() always has the effect of improving efficiency.
    Later, we will see an example where this function hasn’t the same effect.
  prefs: []
  type: TYPE_NORMAL
- en: Combining the functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another way to generate the needed result is to combine the functions ADDCOLUMNS()
    and SUMMARIZE() as described in the Article published by SQLBI (See the Reference
    section below).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Please take notice of how I add the Measure to the Result. I use CALCULATE to
    include the Filter table using [KEEPFILTERS()](https://dax.guide/keepfilters/).
    I must do it that way, as the result will be wrong without it.
  prefs: []
  type: TYPE_NORMAL
- en: Again, please read the SQLBI Article below regarding ADDCOLUMNS() and SUMMARIZE()
    for the exact explanation of why this is necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'The values in the result are correct, but again, we see all Countries instead
    of only the Countries with a result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4f8454ce0a050e72a4d41146ba0443c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10 — Result from combining ADDCOLUMNS with SUMMARIZE (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'And when we look at the Server Timings, we see that DAX needs three SE queries
    to complete this query:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a8ebaf37ece0118f709d6430dc53d09f.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11 — Server Timings from combining ADDCOLUMNS() with SUMMARIZE() (Figure
    by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way to do this is to use CALULATETABLE() to introduce the filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The result is still the same, and the Server Timings have not been improved.
  prefs: []
  type: TYPE_NORMAL
- en: This is proof that CALCULATETABLE() only sometimes improves efficiency. But
    it can make the query more readable instead of using KEEPFILTERS(), for which
    I still struggle to understand all effects.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SELECTCOLUMNS()/ADDCOLUMNS() is a good starting point when adding calculated
    columns to a table.
  prefs: []
  type: TYPE_NORMAL
- en: But I need SUMMARIZE()/SUMMARIZECOLUMNS() to summarize only selected columns
    and be able to add calculated columns to the result.
  prefs: []
  type: TYPE_NORMAL
- en: But SUMMARIZE() has reduced capabilities when we want to add a filter to a table
    expression.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, SUMMARIZECOLUMNS() is the correct function to use.
  prefs: []
  type: TYPE_NORMAL
- en: Even though I need CALCULATETABLE() to add certain filter types to the query
    (e. g. a filter on a single column).
  prefs: []
  type: TYPE_NORMAL
- en: During my work, I always need to write queries to compare the results to the
    data from the source system to validate the results.
  prefs: []
  type: TYPE_NORMAL
- en: And it’s much easier to document a validation via a query and the corresponding
    result instead of a screenshot of all the filters set for a specific result in
    Power BI and export the data from the visual.
  prefs: []
  type: TYPE_NORMAL
- en: A query is helpful when you want to automate the generation of a report which
    should be executed automatically and sent to a user.
  prefs: []
  type: TYPE_NORMAL
- en: Plenty of use cases exist when writing a query is a good choice instead of doing
    it in Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: I hope I have inspired you to explore the possibilities of DAX queries.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/74c898ccb5ccd13d9fe26c953dfad619.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Casey Horner](https://unsplash.com/@mischievous_penguins?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In case you want to learn more about measuring performance in DAX Studio, read
    the following article:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-get-performance-data-from-power-bi-with-dax-studio-b7f11b9dd9f9?source=post_page-----fc00027950a3--------------------------------)
    [## How to get performance data from Power BI with DAX Studio'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes we have a slow Report, and we need to figure out why. We will see
    how to collect performance data and the…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-get-performance-data-from-power-bi-with-dax-studio-b7f11b9dd9f9?source=post_page-----fc00027950a3--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: On [Articles — SQLBI](https://www.sqlbi.com/articles/), you can find more in-depth
    articles on these functions and why using one function over another.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the issues with the SUMMARIZE() functions are documented here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[All the secrets of SUMMARIZE (SQLBI.com)](https://www.sqlbi.com/articles/all-the-secrets-of-summarize/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Best Practices Using SUMMARIZE and ADDCOLUMNS (SQLBI.com)](https://www.sqlbi.com/articles/best-practices-using-summarize-and-addcolumns/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I use the Contoso sample dataset, like in my previous articles. You can download
    the ContosoRetailDW Dataset for free from Microsoft [here](https://www.microsoft.com/en-us/download/details.aspx?id=18279).
  prefs: []
  type: TYPE_NORMAL
- en: The Contoso Data can be freely used under the MIT License, as described [here](https://github.com/microsoft/Power-BI-Embedded-Contoso-Sales-Demo).
  prefs: []
  type: TYPE_NORMAL
- en: I enlarged the dataset to make the DAX engine work harder.
  prefs: []
  type: TYPE_NORMAL
- en: The Online Sales table contains 71 million rows (instead of 12.6 million rows),
    and the Retail Sales table contains 18.5 million rows (instead of 3.4 million
    rows).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@salvatorecagliari/membership?source=post_page-----fc00027950a3--------------------------------)
    [## Join Medium with my referral link - Salvatore Cagliari'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Salvatore Cagliari (and thousands of other writers on
    Medium). Your membership fee directly…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@salvatorecagliari/membership?source=post_page-----fc00027950a3--------------------------------)
  prefs: []
  type: TYPE_NORMAL
