["```py\nimport tkinter as tk\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\nimport cv2 as cv\n\nIMG_HT, IMG_WIDTH = 400, 500\nBLACK_IMG = cv.imread('limb_darkening.png', cv.IMREAD_GRAYSCALE)\nEXO_RADIUS = 7\nEXO_DX = 3\nEXO_START_X = 40\nEXO_START_Y = 230\nNUM_FRAMES = 145\n```", "```py\ndef create_dashboard(root):\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 6))\n    canvas = FigureCanvasTkAgg(fig, master=root)\n    canvas_widget = canvas.get_tk_widget()\n    canvas_widget.pack(side=tk.TOP, fill=tk.BOTH, expand=1)\n\n    intensity_samples = []\n    exo_start_x = EXO_START_X\n\n    for _ in range(NUM_FRAMES):\n        temp_img = BLACK_IMG.copy()\n        cv.circle(temp_img, (exo_start_x, EXO_START_Y), EXO_RADIUS, 0, -1)\n        intensity = temp_img.mean()\n        intensity_samples.append(intensity)\n        relative_brightness = calc_rel_brightness(intensity_samples)\n\n        update_image(ax1, temp_img)\n        update_light_curve(ax2, relative_brightness, 'k')\n\n        canvas.draw()\n        root.update()\n        root.after(3)\n\n        exo_start_x += EXO_DX\n```", "```py\ndef calc_rel_brightness(intensity_samples):\n    max_brightness = max(intensity_samples)\n    return [intensity / max_brightness for intensity in intensity_samples]\n```", "```py\ndef update_image(ax, img):\n    ax.clear()\n    ax.imshow(img, cmap='gray')\n    ax.axis('off')\n\ndef update_light_curve(ax, data, color):\n    ax.clear()\n    ax.plot(data, \n            color=color, \n            linestyle='dashed', \n            linewidth=2, \n            label='Relative Brightness')\n    ax.legend(loc='upper center')\n    ax.set_title('Relative Brightness vs. Time')\n```", "```py\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    root.title(\"Exoplanet Transit Dashboard\")\n    create_dashboard(root)\n    root.mainloop()\n```", "```py\n\"\"\"Simulate transit of asteroids and plot light curve.\"\"\"\nimport random\nimport tkinter as tk\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\nimport cv2 as cv\n\nIMG_HT, IMG_WIDTH = 400, 500\nBLACK_IMG = cv.imread('limb_darkening.png', cv.IMREAD_GRAYSCALE)\nNUM_ASTEROIDS = 15\nNUM_LOOPS = 170\n\nrandom.seed(15) # Uncomment to permit reproducible asteroids.\n\nclass Asteroid():\n    \"\"\"Draws a circle on an image that represents an asteroid.\"\"\"    \n    def __init__(self, number):\n        self.radius = random.choice((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3))\n        self.x = random.randint(-30, 60)\n        self.y = random.randint(220, 230)\n        self.dx = 3  \n\n    def move_asteroid(self, image):\n        \"\"\"Draw and move an asteroid object.\"\"\"\n        cv.circle(image, (self.x, self.y), self.radius, 0, -1)\n        self.x += self.dx\n\ndef create_dashboard(root):\n    asteroid_list = []\n\n    for i in range(NUM_ASTEROIDS):\n        asteroid_list.append(Asteroid(i))\n\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 6))\n    canvas = FigureCanvasTkAgg(fig, master=root)\n    canvas_widget = canvas.get_tk_widget()\n    canvas_widget.pack(side=tk.TOP, fill=tk.BOTH, expand=1)    \n    intensity_samples = []\n\n    for _ in range(NUM_LOOPS):\n        temp_img = BLACK_IMG.copy()        \n        for ast in asteroid_list:\n            ast.move_asteroid(temp_img)\n        intensity = temp_img.mean()\n        intensity_samples.append(intensity)\n        relative_brightness = calc_rel_brightness(intensity_samples)        \n        update_image(ax1, temp_img)\n        update_light_curve(ax2, relative_brightness, 'k')\n        canvas.draw()\n        root.update()\n\ndef calc_rel_brightness(intensity_samples):\n    max_brightness = max(intensity_samples)\n    return [intensity / max_brightness for intensity in intensity_samples]\n\ndef update_image(ax, img):\n    ax.clear()\n    ax.imshow(img, cmap='gray')\n    ax.axis('off')\n\ndef update_light_curve(ax, data, color):\n    ax.clear()\n    ax.plot(data, color=color, linestyle='dashed', linewidth=2, \n            label='Relative Brightness')\n    ax.legend(loc='upper center')\n    ax.set_title('Relative Brightness vs. Time')\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    root.title(\"Exoplanet Transit Dashboard\")\n    create_dashboard(root)\n    root.mainloop()\n```"]