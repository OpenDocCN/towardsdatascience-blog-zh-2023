["```py\n$ pip install plotly\n```", "```py\nimport plotly.express as px\nimport pandas as pd\nimport numpy as np\n\n# Generate random data\nnp.random.seed(42)\nn = 50\nx = np.random.rand(n)\ny = np.random.rand(n)\nz = np.random.rand(n) * 100  # Third variable for bubble size\n\n# Create a DataFrame\ndata = pd.DataFrame({'X': x, 'Y': y, 'Z': z})\n\n# Create the scatter plot with bubble size with Plotly\nfig = px.scatter(data, x='X', y='Y', size='Z',\n      title='Interactive Scatter Plot with Bubble Plot')\n\n# Add labels to the bubbles\nfig.update_traces(textposition='top center', textfont=dict(size=11))\n\n# Update layout properties\nfig.update_layout(\n    xaxis_title='X-axis',\n    yaxis_title='Y-axis',\n    showlegend=False\n)\n\n# Display the interactive plot\nfig.show()\n```", "```py\nimport pandas as pd\nimport numpy as np\nimport plotly.figure_factory as ff\n\n# Create random data\nnp.random.seed(42)\ndata = np.random.rand(100, 10)\n\n# Create DataFrame\ncolumns = ['Column' + str(i+1) for i in range(10)]\ndf = pd.DataFrame(data, columns=columns)\n\n# Round values to 2 decimals\ncorrelation_matrix = df.corr().round(2)  \n\n# Create interactive correlation matrix with Plotly\nfigure = ff.create_annotated_heatmap(\n    z=correlation_matrix.values,\n    x=list(correlation_matrix.columns),\n    y=list(correlation_matrix.index),\n    colorscale='Viridis',\n    showscale=True\n)\n\n# Set axis labels\nfigure.update_layout(\n    title='Correlation Matrix',\n    xaxis=dict(title='Columns'),\n    yaxis=dict(title='Columns')\n)\n\n# Display the interactive correlation matrix\nfigure.show()\n```", "```py\nimport pandas as pd\nimport numpy as np\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import roc_curve, auc\nimport plotly.graph_objects as go\n\n# Create synthetic binary classification data\nX, y = make_classification(n_samples=1000, n_features=20, random_state=42)\n\n# Scale the data using StandardScaler\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n\n# Initialize the models\nknn = KNeighborsClassifier()\nrf = RandomForestClassifier()\ndt = DecisionTreeClassifier()\nsvm = SVC(probability=True)\n\n# Fit the models on the train set\nknn.fit(X_train, y_train)\nrf.fit(X_train, y_train)\ndt.fit(X_train, y_train)\nsvm.fit(X_train, y_train)\n\n# Predict probabilities on the test set\nknn_probs = knn.predict_proba(X_test)[:, 1]\nrf_probs = rf.predict_proba(X_test)[:, 1]\ndt_probs = dt.predict_proba(X_test)[:, 1]\nsvm_probs = svm.predict_proba(X_test)[:, 1]\n\n# Calculate the false positive rate (FPR) and true positive rate (TPR) for ROC curve\nknn_fpr, knn_tpr, _ = roc_curve(y_test, knn_probs)\nrf_fpr, rf_tpr, _ = roc_curve(y_test, rf_probs)\ndt_fpr, dt_tpr, _ = roc_curve(y_test, dt_probs)\nsvm_fpr, svm_tpr, _ = roc_curve(y_test, svm_probs)\n\n# Calculate the AUC (Area Under the Curve) for ROC curve\nknn_auc = auc(knn_fpr, knn_tpr)\nrf_auc = auc(rf_fpr, rf_tpr)\ndt_auc = auc(dt_fpr, dt_tpr)\nsvm_auc = auc(svm_fpr, svm_tpr)\n\n# Create an interactive AUC/ROC curve using Plotly\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=knn_fpr, y=knn_tpr, name='KNN (AUC = {:.2f})'.format(knn_auc)))\nfig.add_trace(go.Scatter(x=rf_fpr, y=rf_tpr, name='Random Forest (AUC = {:.2f})'.format(rf_auc)))\nfig.add_trace(go.Scatter(x=dt_fpr, y=dt_tpr, name='Decision Tree (AUC = {:.2f})'.format(dt_auc)))\nfig.add_trace(go.Scatter(x=svm_fpr, y=svm_tpr, name='SVM (AUC = {:.2f})'.format(svm_auc)))\nfig.update_layout(title='AUC/ROC Curve',\n                  xaxis=dict(title='False Positive Rate'),\n                  yaxis=dict(title='True Positive Rate'),\n                  legend=dict(x=0.7, y=0.2))\n# Show plot\nfig.show()\n```"]