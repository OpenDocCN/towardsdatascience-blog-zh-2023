- en: Compound Interest and the Exponential Distribution
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复利与指数分布
- en: 原文：[https://towardsdatascience.com/compound-interest-and-the-exponential-distribution-402d5e7f446a](https://towardsdatascience.com/compound-interest-and-the-exponential-distribution-402d5e7f446a)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/compound-interest-and-the-exponential-distribution-402d5e7f446a](https://towardsdatascience.com/compound-interest-and-the-exponential-distribution-402d5e7f446a)
- en: Your mortgage is memory-less and so is the exponential distribution
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你的抵押贷款是无记忆的，指数分布也是如此
- en: '[](https://medium.com/@rohitpandey576?source=post_page-----402d5e7f446a--------------------------------)[![Rohit
    Pandey](../Images/af817d8f68f2984058f0afb8fd7ecbe9.png)](https://medium.com/@rohitpandey576?source=post_page-----402d5e7f446a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----402d5e7f446a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----402d5e7f446a--------------------------------)
    [Rohit Pandey](https://medium.com/@rohitpandey576?source=post_page-----402d5e7f446a--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@rohitpandey576?source=post_page-----402d5e7f446a--------------------------------)[![Rohit
    Pandey](../Images/af817d8f68f2984058f0afb8fd7ecbe9.png)](https://medium.com/@rohitpandey576?source=post_page-----402d5e7f446a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----402d5e7f446a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----402d5e7f446a--------------------------------)
    [Rohit Pandey](https://medium.com/@rohitpandey576?source=post_page-----402d5e7f446a--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----402d5e7f446a--------------------------------)
    ·8 min read·May 24, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----402d5e7f446a--------------------------------)
    ·阅读时长8分钟·2023年5月24日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/d0e7c22335bb7bb0318b28dd13bbbf7b.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d0e7c22335bb7bb0318b28dd13bbbf7b.png)'
- en: Image generated using midjourney under open source license.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用开源许可证通过midjourney生成的图像。
- en: Euler’s number, the exponential distribution and compound interest
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 欧拉数、指数分布与复利
- en: There are many interesting events that happen at points in time. For example,
    the arriavals of busses at a bus stop, accidents on a highway, goals scored in
    a soccer (football) game. The processes that model such point in time events are
    called “point processes”. An important consideration in these processes is how
    long it takes from one event to the next. For example, given you just missed a
    bus, how long will you have to wait for the next bus? This time is a random variable
    and the choice of the random variable specifies the point process. One choice
    for this random variable is something that isn’t very random (deterministic numbers
    are just a special case of random ones). Busses arriving on a punctual schedule,
    every 10 minutes for example. This might sound like the simplest possible point
    process, but there is something even simpler. And it arises when the times between
    events follow an exponential distribution (the process is called the Poisson process).
    It’s called the exponential distribution for good reason. It is tied to Euler’s
    number, *e* and compound interest. In this article, we’ll see the connection.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些时刻会发生许多有趣的事件。例如，公交车到达公交站、高速公路上的事故、足球比赛中的进球。模拟这些时刻事件的过程称为“点过程”。这些过程中的一个重要考虑因素是从一个事件到下一个事件所需的时间。例如，假如你刚刚错过了一辆公交车，你还要等多久才能等到下一辆公交车？这个时间是一个随机变量，随机变量的选择决定了点过程。这个随机变量的一个选择是一些不是很随机的东西（确定性数字只是随机数字的一个特殊情况）。例如，公交车按时刻表到达，每10分钟一次。这可能听起来像是最简单的点过程，但还有更简单的情况。当事件之间的时间遵循指数分布时（这个过程叫做泊松过程），它就是一个简单的过程。它被称为指数分布是有原因的。它与欧拉数*e*和复利息有关。在这篇文章中，我们将探讨它们之间的联系。
- en: Compound interest
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复利
- en: 'Say you deposit 1$ in the bank. The interest rate is *x* per year. At the end
    of the year, your balance will be *(1+x)*. To get more money, you ask the bank
    to pay you the interest monthly instead of yearly. Since the rate is *x* per year,
    the interest you’ll earn in a month will be *x/12*. And you immediately re-invest
    the interest. So for the second month, your investment becomes *(1+x/12)* and
    this in-turn grows by a factor of *(1+x/12)* meaning the amount after 2 months
    is *(1+x/12)²*. Repeating this for 12 months, your balance at the end of the year
    will be *(1+x/12)¹²*. Using the Binomial theorem, this new balance at the end
    of the year is:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在银行存入1美元。年利率为*x*。在年末，你的余额将是*(1+x)*。为了获得更多的钱，你要求银行每月支付利息而不是每年支付。由于利率为每年*x*，因此你在一个月内赚取的利息将是*x/12*。你会立即将这笔利息再投资。因此，在第二个月，你的投资变为*(1+x/12)*，这个数额再次按*(1+x/12)*增长，这意味着两个月后的金额是*(1+x/12)²*。重复12个月，你年末的余额将是*(1+x/12)¹²*。利用二项式定理，年末的新余额是：
- en: '![](../Images/6e55ca040c58f05f0bcaff25e83455e9.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6e55ca040c58f05f0bcaff25e83455e9.png)'
- en: We can see that this is more than the *(1+x)* we ended up with before. This
    makes sense since we were getting interest throughout the months and the interest
    was re-invested and earning further interest on top. But why stop at *12* intervals?
    You want to compound as frequently as possible. Every millisecond if the bank
    will allow it. Instead of 12 intervals, we generalize to *n* intervals and make
    *n* really large. After every interval, our balance grows further by *(1+x/n)^n*.
    And at the end of the year the amount we’ll have,
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这比我们之前得到的*(1+x)*更多。这是有道理的，因为我们在几个月内获得了利息，利息被再投资并进一步赚取了利息。但是为什么只停留在*12*
    个间隔呢？你希望尽可能频繁地进行复利。如果银行允许的话，每毫秒一次。我们将12个间隔推广到*n*个间隔，并使*n*非常大。在每个间隔后，我们的余额进一步增长*(1+x/n)^n*。在年末，我们将拥有的金额，
- en: '![](../Images/44408e445fc84b221e199562bc960ced.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/44408e445fc84b221e199562bc960ced.png)'
- en: Eq (1)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Eq (1)
- en: Expanding this out with the binomial theorem,
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用二项式定理展开，
- en: '![](../Images/6c6aaea387e4454dc44b7666ad4e98a2.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6c6aaea387e4454dc44b7666ad4e98a2.png)'
- en: 'As *n* becomes larger, the *n-1*, *n-2*, etc. are practically the same as *n*.
    So, all those terms involving *n* cancel out between the numerators and denominators
    (since we have *n→∞*) and we’re left with:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当*n*变得更大时，*n-1*、*n-2* 等几乎与*n*相同。因此，所有涉及*n*的项在分子和分母之间相互抵消（因为我们有*n→∞*），剩下的是：
- en: '![](../Images/1c76a9f37885233e71dfe423cdff9fe7.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1c76a9f37885233e71dfe423cdff9fe7.png)'
- en: If we differentiate *B(x)* with respect to *x*, we get *B(x)* back. If we plug
    in *x=1*, we get a very special number. Can you guess? It’s readily apparent from
    the first two terms that this number is greater than *2*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对*x*求导数，则会得到*B(x)*本身。如果我们将*x=1*代入，会得到一个非常特殊的数字。你能猜到是什么吗？从前两项很明显，这个数字大于*2*。
- en: '![](../Images/8da2403dbd8083e346dbfbfbd31a9848.png)![](../Images/48c43cc52980e67ca3e59e182ce37e4c.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8da2403dbd8083e346dbfbfbd31a9848.png)![](../Images/48c43cc52980e67ca3e59e182ce37e4c.png)'
- en: Image generated using mid journey under open source license.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图像由中途生成，遵循开源许可证。
- en: We’ve just re-discovered the famous Eulers number, *e=2.71828..*. And it turns
    out, *B(x)=e^x*. This wasn’t immediately obvious to me, but we can see this by
    going back to equation (1).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚重新发现了著名的欧拉数，*e=2.71828..*。结果是，*B(x)=e^x*。这对我来说并不立即显而易见，但我们可以通过回到方程式 (1)
    来看到这一点。
- en: '![](../Images/7669411e4d3e86533305dd8edb97d028.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7669411e4d3e86533305dd8edb97d028.png)'
- en: 'We have *e* in the second equation, but not in the first one. The *x/n* term
    inside the bracket is kind of getting in the way of that. to clean it up, let’s
    change up the variables by defining:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个方程式中我们有*e*，但在第一个方程式中没有。括号内的*x/n* 项有点阻碍了这个。为了清理它，让我们通过定义变量来更改：
- en: '![](../Images/200036f900e064a9627be584fd3e7d7f.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/200036f900e064a9627be584fd3e7d7f.png)'
- en: 'This will make equation (1):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这将得到方程式 (1)：
- en: '![](../Images/8d83c466a5c8d55b9af334f555c5a3a3.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8d83c466a5c8d55b9af334f555c5a3a3.png)'
- en: Note that taking the *x* outside the limit like we did above is allowed for
    continuous functions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，像我们上面那样将*x*取出极限是允许的，适用于连续函数。
- en: The exponential distribution
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指数分布
- en: So that was compound interest and the motivation for the number *e*. How does
    all this relate to point processes and the exponential distribution? The exponential
    distribution works in continuous time and models the time until some event (like
    a car accident).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是复利和数字*e*的动机。这一切与点过程和指数分布有什么关系？指数分布在连续时间内工作，并模拟直到某些事件（如车祸）的时间。
- en: The best way to understand it is to think of the limit of tossing coins.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这一点的最好方法是考虑抛硬币的极限情况。
- en: The claim to fame of the exponential distribution is the fact that it is memory
    less. In fact, it is the only continuous distribution that is memory less. If
    you’re waiting for a bus whose time until arrival is exponentially distributed,
    then it doesn’t matter how long you’ve waited already.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 指数分布的声誉来自于它的无记忆性。事实上，它是唯一的连续无记忆分布。如果你在等待一个到达时间服从指数分布的公交车，那么已经等待了多久并不重要。
- en: The distribution of the additional time you have to wait is exactly the same
    weather you just arrived or have been waiting for ten hours. This property makes
    the exponential distribution very easy to work with.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要等待的额外时间的分布是一样的，无论你刚到达还是已经等了十个小时。这一特性使得指数分布非常容易处理。
- en: Its easier to understand this property when we make things discrete. Instead
    of waiting in continuous time for a bus to arrive, imagine tossing a coin every
    minute and waiting to see a heads. The number of tails we’ll see before we see
    the first heads is a discrete random variable since it can take only non negative
    integer values (unlike the bus arrival time which can be any real number like
    3.4 minutes). This discrete distribution is called the Geometric distribution.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将事物离散化时，更容易理解这一属性。与其在连续时间中等待公交车到来，不如想象每分钟抛一次硬币，等待看到正面。我们在看到第一个正面之前看到的反面次数是一个离散随机变量，因为它只能取非负整数值（与公交车到达时间不同，公交车到达时间可以是任何实数，如3.4分钟）。这种离散分布称为几何分布。
- en: A real world scenario where the Geometric distribution applies perfectly is
    a slot machine in a casino which a gambler keeps playing until he hits a jackpot.
    Every spin of the machine is independent of the spins in the past. Which means
    that this Geometric distribution is also memory less. When people think that a
    machine hasn’t yielded jackpot for a long time and so one is “due”, they aren’t
    accounting for the memory-less nature of the process and falling prey to the “gamblers
    fallacy”.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一个现实世界中的例子是赌场中的老虎机，赌徒不断玩直到赢得大奖。每次旋转都是独立的，这意味着几何分布也是无记忆的。当人们认为一台机器很久没有中奖，所以现在“该中奖了”，他们并没有考虑到过程的无记忆性质，从而陷入了“赌徒谬论”。
- en: 'We can model each spin of the machine by the toss of a coin. The coin has a
    probability *p* of heads. We start tossing this coin. What is the probability
    that we haven’t seen a heads after *k* tosses? This simply means that we’ve seen
    *k* consecutive tails. The probability of this is:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过抛硬币来模拟机器的每个旋转。硬币正面朝上的概率是*p*。我们开始抛这枚硬币。我们没有看到正面的概率是多少呢？这意味着我们已经看到*k*次连续的反面。这个概率是：
- en: '![](../Images/47c0823ee1684fc64cea797735490de4.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/47c0823ee1684fc64cea797735490de4.png)'
- en: Now, we want to move to continuous time. So, we split a continuous timeline
    into discrete parts. The coin tosses happen at each of those discrete events.
    Each unit interval of *t* is divided into a large number, *d* of discrete parts.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们要转到连续时间。因此，我们将连续的时间线划分为离散部分。硬币抛掷发生在每一个这些离散事件上。每个单位时间*t*被划分为一个大的离散部分数*d*。
- en: '![](../Images/5c56ccf283577e7c9bdec63a6fda070e.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5c56ccf283577e7c9bdec63a6fda070e.png)'
- en: 'Figure: Each unit of time is divided into d intervals and a coin is tossed
    at the ends of each of those intervals.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图：每个时间单位被划分为d个间隔，每个间隔的末尾抛一次硬币。
- en: And now we denote by *T* the time at which an interesting event (coin coming
    up heads) occurs. To get the distribution of *T*, we again target its survival
    function, the probability that it is greater than some number, *t.* We know that
    a total of [t/d] tosses must have happened by this time (where [.] is the greatest
    integer function). For example, if *t=10* and each unit interval of time is divided
    into *3* parts, then *[10/3] = [3.33] = 3* tosses would have happened by then.
    To make this a truly continuous time process, we need to make *d* so small that
    it vanishes. But as we make *d* small, we end up with an increasing number of
    coin tosses. So, our *p* must also become small to compensate (otherwise, the
    events will become so frequent that any minuscule interval of time will have many
    events). So, the *p* and *d* variables must go to *0* simultaneously. Using the
    equation above for the discrete case, the number of tosses that have happened
    by time *t* and the fact that our *p* and *d* variables must go to *0* we get
    the survival function of *T:*
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们用*T*表示有趣事件（硬币正面朝上）发生的时间。为了得到*T*的分布，我们再次关注其生存函数，即*T*大于某个数*t*的概率。我们知道，在这个时间之前必须发生总共[t/d]次抛掷（其中[.]表示取整函数）。例如，如果*t=10*且每个时间单位被分成*3*部分，那么到那时已经发生了*[10/3]
    = [3.33] = 3*次抛掷。为了使这成为一个真正的连续时间过程，我们需要使*d*足够小，以至于消失。但随着我们使*d*变小，我们会发现抛掷次数增加。因此，我们的*p*也必须变小以进行补偿（否则，事件将变得非常频繁，以至于任何极小的时间间隔都会有许多事件发生）。因此，*p*和*d*变量必须同时趋近于*0*。利用上述离散情况的方程，得到时间*t*之前发生的抛掷次数以及我们的*p*和*d*变量必须趋近于*0*，我们得到*T*的生存函数：
- en: '![](../Images/8c6e29a0772958643cf7b3a9d830025d.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8c6e29a0772958643cf7b3a9d830025d.png)'
- en: The second limit just becomes 1.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个极限就变成1。
- en: '![](../Images/393647ad5470c6f996b6a6e684ca2ca8.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/393647ad5470c6f996b6a6e684ca2ca8.png)'
- en: Eq (3)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 方程（3）
- en: 'This limit is interesting only when *p* and *d* decrease to *0* together in
    a linear relationship with each other. Because both are going to zero together,
    the line has to have an intercept of *0*. Let’s say the line is:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当*p*和*d*以线性关系同时减小到*0*时，这个极限才有趣。因为它们同时趋近于零，直线的截距必须为*0*。假设直线是：
- en: '![](../Images/a23a34f16c66eeb7bc97d858dcaf01bc.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a23a34f16c66eeb7bc97d858dcaf01bc.png)'
- en: This is the step most people have trouble with. Why all of a sudden this equation?
    Where did it come from? If we ask what the double limit in equation (3) equals,
    the answer is going to be that “it depends”. Depends on the relationship between
    *p* and *d*. For one thing, we know that *p* and *d* are approaching *0* together.
    So the relationship between them must pass through *(0,0)*. Next, we need to pick
    the functional form between them. And it is up to us what to pick. But if we pick
    anything but a linear relationship, we get a trivial answer (like *0* or *1* for
    any *t*) and don’t get an interesting continuous distribution.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是大多数人遇到麻烦的步骤。为什么突然出现这个方程？它从哪里来？如果我们问方程（3）中的双重极限等于什么，答案将是“这要看情况”。取决于*p*和*d*之间的关系。首先，我们知道*p*和*d*正在一起趋近于*0*。因此，它们之间的关系必须经过*(0,0)*。接下来，我们需要选择它们之间的函数形式。我们可以选择任何形式。但如果我们选择除线性关系以外的任何形式，我们会得到一个平凡的答案（例如任何*t*下的*0*或*1*），而得不到有趣的连续分布。
- en: 'With the linear relationship above, equation (3) becomes:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过上述线性关系，方程（3）变为：
- en: '![](../Images/f157c84fc076df93357dc5395d7c815d.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f157c84fc076df93357dc5395d7c815d.png)'
- en: Eq (3)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 方程（3）
- en: 'This limit is interesting only when *p* and *d* decrease to *0* together in
    a linear relationship with each other. Because both are going to zero together,
    the line has to have an intercept of *0*. Let’s say the line is:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当*p*和*d*以线性关系同时减小到*0*时，这个极限才有趣。因为它们同时趋近于零，直线的截距必须为*0*。假设直线是：
- en: '![](../Images/9e38e71550722f2e525e648c7807650e.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9e38e71550722f2e525e648c7807650e.png)'
- en: 'Equation (3) above becomes:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方程（3）变为：
- en: '![](../Images/7c647b7f500b9f8677b5ac00739ad006.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7c647b7f500b9f8677b5ac00739ad006.png)'
- en: 'We need another substitution to make this align with equation (1):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要另一个替换，以使其与方程（1）对齐：
- en: '![](../Images/d8bb5312d75c28252bb09a9a41e660de.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d8bb5312d75c28252bb09a9a41e660de.png)'
- en: Which is the survival function of the exponential distrubution. We have gone
    here from the Geometric distribution, taken the limit and derived the exponential
    distribution, all while using results derived from compound interest.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是指数分布的生存函数。我们从几何分布出发，取极限并推导出指数分布，同时使用了复利的结果。
