- en: Maintain Clean Python Code With Black and GitHub Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/black-with-git-hub-actions-4ffc5c61b5fe](https://towardsdatascience.com/black-with-git-hub-actions-4ffc5c61b5fe)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Nobody wants a messy codebase; few have the patience to clean it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://thuwarakesh.medium.com/?source=post_page-----4ffc5c61b5fe--------------------------------)[![Thuwarakesh
    Murallie](../Images/44f1a14a899426592bbd8c7f73ce169d.png)](https://thuwarakesh.medium.com/?source=post_page-----4ffc5c61b5fe--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4ffc5c61b5fe--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4ffc5c61b5fe--------------------------------)
    [Thuwarakesh Murallie](https://thuwarakesh.medium.com/?source=post_page-----4ffc5c61b5fe--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4ffc5c61b5fe--------------------------------)
    ·8 min read·Jan 16, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5b6f032c9c15cbfb6fd4451172f5f685.png)'
  prefs: []
  type: TYPE_IMG
- en: Like this cleaning robot, we can build an automatic system to clean our Python
    codebase with Black and GitHub Actions. — Photo by [Onur Binay](https://unsplash.com/@onurbinay?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Writing code is hard enough, but ensuring it's well-formatted and easy to read
    can be even more challenging.
  prefs: []
  type: TYPE_NORMAL
- en: My coding skills have improved a lot in a decade. But the majority of them are
    not some fancy API usage or anything. It's how I format the code.
  prefs: []
  type: TYPE_NORMAL
- en: In my earliest years, I've coded for the outcome. Of course, that's every programmer's
    ultimate goal. But as I progressed, I understood that good coding is much more
    than simply getting things done.
  prefs: []
  type: TYPE_NORMAL
- en: It wasn't easy to share my code with others and not get a truckload of questions
    to explain them. Other programmers found digesting my code very challenging, even
    with supporting documents and inline comments.
  prefs: []
  type: TYPE_NORMAL
- en: A programmer's job is not over with a working code.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Beyond documentation, there's something that makes good code great. And the
    programming community hasn't failed to find what it is.
  prefs: []
  type: TYPE_NORMAL
- en: It's how we format our code.
  prefs: []
  type: TYPE_NORMAL
- en: Python, my favorite programming language, has the easiest syntax. But that doesn't
    warrant everyone who reads your Python code will understand it.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, we have a style guide known as PEP 8\. This standard brings
    every programmer to code in the same style. If done correctly, a new programmer
    can spend less time figuring out which line is what.
  prefs: []
  type: TYPE_NORMAL
- en: Here's a sample code. The first is how I'd have coded it early in my career.
    It gets the job done. It reads a file and trains a model.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2c014c2f9a9ce335aeaf0e5bd84b8665.png)'
  prefs: []
  type: TYPE_IMG
- en: Unformatted Python code — Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: In the above image, you can see only half of my code fits into the screen. I’d
    have to scroll to the right and left to read and understand the code. There are
    unwanted blank lines and whitespace everywhere, while there’s no blank line where
    there needs to be one.
  prefs: []
  type: TYPE_NORMAL
- en: And this is how it would look like after implementing the style guide. This
    one is easier to understand, isn’t it?
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fd588f3d289822f81eb58f43f32c3f3d.png)'
  prefs: []
  type: TYPE_IMG
- en: Formatted Python code — Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: But there's an issue. Remembering the style guide and forcing myself to code
    it this way takes a lot of work. I still wanted to spend more time getting the
    job done.
  prefs: []
  type: TYPE_NORMAL
- en: It would be helpful if someone else took care of the code formatting. That's
    where [Black](https://black.readthedocs.io/) comes in. Black is a Python package
    to format your code to a predefined style guide in a single command. This guide
    can be PEP 8, or you can tweak it to your organizational version.
  prefs: []
  type: TYPE_NORMAL
- en: Modern code editors usually come with support for document formatting. For instance,
    in VSCode, you can right-click on the editor and click on code formatting. If
    Black is installed, it'll format your code at once.
  prefs: []
  type: TYPE_NORMAL
- en: All these improvements haven't stopped there. You can automate code formatting
    with pre-commit hooks and not worry about it at the time of coding. When you're
    committing a change, it will format all your python files. I've discussed that
    in a previous post.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/python-code-formatting-made-simple-with-git-pre-commit-hooks-9233268cdf64?source=post_page-----4ffc5c61b5fe--------------------------------)
    [## Python Code Formatting Made Simple With Git Pre-commit Hooks'
  prefs: []
  type: TYPE_NORMAL
- en: Write code that everyone will fall in love with.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/python-code-formatting-made-simple-with-git-pre-commit-hooks-9233268cdf64?source=post_page-----4ffc5c61b5fe--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: The last missing piece of the puzzle is this. Even pre-commit hooks run on the
    developers' computers. When working as a team, you still rely on them for formatting.
  prefs: []
  type: TYPE_NORMAL
- en: What if you can do it centrally regardless of who the developer is and how they
    did it?
  prefs: []
  type: TYPE_NORMAL
- en: That's the focus of this post. We leverage [GitHub Actions](https://docs.github.com/en/actions)
    to do this.
  prefs: []
  type: TYPE_NORMAL
- en: When developers commit to the central repository, their code will automatically
    align with the organizational standards. GitHub actions will trigger a workflow
    whenever we push changes to the repository. We can configure it to run a Black
    formatting command.
  prefs: []
  type: TYPE_NORMAL
- en: Set up Black on GitHub Actions to Automatically Format Python Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use `black` to format your Python code when committing changes using GitHub
    Actions, you can follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, ensure that `black` is installed in your project. You can do this by
    adding `black` to the `requirements.txt` file in your project or by running `pip
    install black` in your project's virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: Next, create a new file in your project's `.github/workflows` directory called
    `format.yml`. This file will contain the configuration for your GitHub Actions
    workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `format.yml` file, you can define a workflow that runs `black` on your
    code whenever you commit changes to your repository. Here''s an example workflow
    that does this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This workflow will run whenever you push changes to the `master` branch of your
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: It installs `black`, and then runs the `black` command on the entire project
    (the `.` at the end of the `black` command specifies the current directory). Finally,
    it commits the new changes to the same branch.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have defined your workflow, you can commit the changes to your repository
    and push them to GitHub. When you do this, the workflow will run automatically,
    formatting your code with `black`.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/python-project-structure-best-practices-d9d0b174ad5d?source=post_page-----4ffc5c61b5fe--------------------------------)
    [## 7 Ways to Make Your Python Project Structure More Elegant'
  prefs: []
  type: TYPE_NORMAL
- en: Here are the best practices for a manageable, scalable, and easily understandable
    python project structure.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/python-project-structure-best-practices-d9d0b174ad5d?source=post_page-----4ffc5c61b5fe--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Excluding and including files and folders for formatting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's an issue with the above configuration. It goes through all the files
    and folders in our repository and tries to format them. Sometimes, we want to
    avoid that happening for specific files.
  prefs: []
  type: TYPE_NORMAL
- en: Black has options to configure its formatting behavior.
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, we've configured black to ignore any files inside
    the ref folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will run the `black` command on all files in the current directory, except
    for those in the `env` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, Black will format all `.py`, `.pyi`, and `.ipynb` files. Alternatively,
    you can specify the list of files to include directly using the `--include` flag,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will run the `black` command only on files with a `.py` extension in the
    current directory.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, you can use both the `--include` and `--exclude` flags together to specify
    a more complex pattern of files to include or exclude.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This will run the `black` command on all files with a `.py` extension in the
    current directory, except for those in the `env` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the `--include` flag takes precedence over the `--exclude` flag, so
    if a file matches both patterns, it will be included. Thus be extra careful when
    you include patterns. Blindely including patterns, like in the above example,
    would cause black to format files in your env folder too.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You can specify multiple patterns for both `--include` and `--exclude` by separating
    them with a comma, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will run the `black` command on all files with a `.py` or `.pyi` extension
    in the current directory, except for those in the `env` or `tests` folders.
  prefs: []
  type: TYPE_NORMAL
- en: Another helpful way to manage files to exclude is your .gitignore file. You
    may have one in your project already. If a file matches any patterns in .gitignore,
    those files will be ignored for formatting.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to use both .gitignore and exclude behaviors, according to the official
    docs, you need to use `--extend-exclude` instead of `--exclude`.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/github-automated-testing-python-fdfe5aec9446?source=post_page-----4ffc5c61b5fe--------------------------------)
    [## How to Run Python Tests on Every Commit Using GitHub Actions?'
  prefs: []
  type: TYPE_NORMAL
- en: Automate the boring stuff and ensure your code quality with a CI pipeline.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/github-automated-testing-python-fdfe5aec9446?source=post_page-----4ffc5c61b5fe--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Extending the workflow with more clean code tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Black is one of the essential tools for formatting Python code. It takes care
    of a lot of things. But we do have other important stuff too.
  prefs: []
  type: TYPE_NORMAL
- en: One aspect of clean coding is logically sorting imports. But once again, you
    don't have to worry about this. You can use the package isort with your GitHub
    workflow to handle this automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Removing redundant or unused variables is another quality of a good codebase.
    Many IDEs nowadays automatically highlight such new variables. But autoflake8
    could automatically remove them as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the finished GitHub Actions configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When things don't go the way we want
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regardless of all our effort, there may be instances where these automated code
    refactoring can fail.
  prefs: []
  type: TYPE_NORMAL
- en: In a good development environment, this should be avoided. Most developers test
    their code locally before pushing it to Git because it allows them to identify
    any bugs or issues with the code before deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Testing locally also allows developers to make necessary changes and ensure
    that the code functions correctly before it is pushed live, saving time and resources
    in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: Because of this, issues such as typos and other minor things, usually why code
    refactoring fails, won't be an issue. But when they happen, we need to be prepared.
  prefs: []
  type: TYPE_NORMAL
- en: The below config will send an email notification whenever our code refactoring
    fails.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The above extension to the configuration uses the [custom GitHub action](https://github.com/dawidd6/action-send-mail)
    created by [Dawid Dziurla](https://github.com/dawidd6).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nobody wants messy code, but a few have the patience to clean it up.
  prefs: []
  type: TYPE_NORMAL
- en: Every programming community has a style guide to ensure the code is readable.
    But that's the first hurdle in solving the problem. We need to make code formatting
    effortless for every developer to use often. Packages like Black does that.
  prefs: []
  type: TYPE_NORMAL
- en: But making it effortless doesn't mean everyone uses it. Pre-commit hooks automate
    the process but still rely on the developer. This post has presented a way to
    do the formatting centrally automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Black with GitHub Actions can ensure the code is always formatted. You can centrally
    dictate the style guide. It can be PEP 8 or your custom one. And when they fail
    for any reason, you can also get notified.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this helps.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading, friend! Say Hi to me on [**LinkedIn**](https://www.linkedin.com/in/thuwarakesh/),
    [**Twitter**](https://twitter.com/Thuwarakesh), and [**Medium**](https://thuwarakesh.medium.com/).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Not a Medium member yet? Please use this link to [**become a member**](https://thuwarakesh.medium.com/membership)
    because, at no extra cost for you, I earn a small commission for referring you.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
