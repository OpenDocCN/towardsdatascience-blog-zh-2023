["```py\ndata = {\n    'percentage': [0.7,0.3],\n    'label'     : ['70%','30%'],\n    'color'     : ['#81c01e','lightgray']\n}\n\ndf = pd.DataFrame(data)\n```", "```py\nimport pandas as pd\nimport altair as alt\n\ndata = {\n    'percentage': [0.7,0.3],\n    'label'     : ['70%','30%'],\n    'color'     : ['#81c01e','lightgray']\n}\n\ndf = pd.DataFrame(data)\n\nchart = alt.Chart(df).mark_arc(\n    innerRadius=100,\n    outerRadius=150\n).encode( \n    theta='percentage',\n    color=alt.Color('color', scale=None),\n    tooltip='label'\n).properties(\n    width=300,\n    height=300\n)\n\nchart.save('chart.html')\n```", "```py\ntext = alt.Chart(df.head(1)).mark_text(\n    align='center',\n    baseline='middle',\n    fontSize=60,\n    fontWeight='bold',\n    color='black'\n).encode(\n    text='label',\n    color=alt.Color('color', scale=None)\n).properties(\n    width=300,\n    height=300\n) \n```", "```py\nchart = (chart + text\n).configure_view(\n    strokeWidth=0\n)\n\nchart.save('donut-chart.html')\n```", "```py\nimport pandas as pd\nimport altair as alt\n\ndata = {\n    'percentage': [0.7,0.3],\n    'label'     : ['70%','30%'],\n    'color'     : ['#81c01e','lightgray']\n}\n\ndf = pd.DataFrame(data)\n\nchart = alt.Chart(df).mark_bar(\n    size=40\n).encode(\n    x=alt.X('sum(percentage)', axis=None),\n    color=alt.Color(\"color\", scale=None)\n).properties(\n    width=300\n)\n```", "```py\ntext = alt.Chart(df.head(1)).mark_text(\n    align='center',\n    baseline='middle',\n    fontSize=20,\n    fontWeight='bold',\n    color='lightgrey',\n    dx=-30\n).encode(\n    text='label',\n    x='percentage'\n).properties(\n    width=300\n)\n```", "```py\nchart = (chart + text\n).configure_view(\n  strokeOpacity=0\n)\n\nchart.save('stacked-bar-chart.html')\n```", "```py\nimport numpy as np\nimport pandas as pd\nimport altair as alt\n\n# Compute x^2 + y^2 across a 2D grid\nx, y = np.meshgrid(range(0, 10), range(0, 10))\n\nndex = 0\nvalue = 70 # percentage\n\n## calculate colors for each cell of the waffle chart\ncolors = []\nfor i in range(100,0,-1):\n    if i <= np.round(value):\n        colors.append(1)\n    else:\n        colors.append(0)\n\n# Convert this grid to columnar data expected by Altair\ndf = pd.DataFrame({'x': x.ravel(),\n                        'y': y.ravel(),\n                        'z': colors})\n```", "```py\nchart = alt.Chart(df).mark_rect(\n    size=5, \n    stroke='black'\n).encode(\n    x=alt.X('x:O', axis=None),\n    y=alt.Y('y:O', axis=None),\n    color=alt.condition(alt.datum.z == 0, \n                        alt.value('lightgrey'),\n                        alt.value('#81c01e')\n                        )\n).properties(\n    width=200,\n    height=200\n)\n```", "```py\ntext = alt.Chart(pd.DataFrame({'label' : [value/100]})).mark_text(\n    align='center',\n    baseline='middle',\n    fontSize=30,\n    fontWeight='bold',\n    color='#81c01e'\n).encode(\n    text=alt.Text('label', format='.0%'),\n).properties(\n    width=200\n)\n```", "```py\nchart = chart & text\n\nchart.save('waffle-chart.html')\n```"]