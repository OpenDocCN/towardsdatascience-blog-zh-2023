["```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\n\nfrom pykrige import OrdinaryKriging\nimport numpy as np\n```", "```py\ndf = pd.read_csv('Data/Volve/Well_picks_Volve_v1 copy.csv')\ndf_hugin = df.query('SURFACE == \"Hugin Fm. VOLVE Top\"')\ndf_hugin\n```", "```py\nOK = OrdinaryKriging(x=df_hugin['Easting'], \n                      y=df_hugin['Northing'], \n                      z=df_hugin['TVDSS'],\n                      variogram_model='linear',\n                      verbose=True, enable_plotting=True)\n```", "```py\ngridx = np.arange(433986, 438607, 50, dtype='float64')\ngridy = np.arange(6477539, 6479393, 50,dtype='float64')\n\nzstar, ss = OK.execute('grid', gridx, gridy)\n```", "```py\nfig, ax = plt.subplots(figsize=(15,5))\n\n# Create a 2D image plot of the data in 'zstar'\n# The 'extent' parameter sets the bounds of the image in data coordinates\n# 'origin' parameter sets the part of the image that corresponds to the origin of the axes\nimage = ax.imshow(zstar, extent=(433986, 438607, 6477539, 6479393), \n                  origin='lower')\n\n# Set the labels for the x-axis and y-axis\nax.set_xlabel('X Location (m)', fontsize=14, fontweight='bold')\nax.set_ylabel('Y Location (m)', fontsize=14, fontweight='bold')\n\n# Add contours\ncontours = ax.contour(gridx, gridy, zstar, colors='black')\n\ncolorbar = fig.colorbar(image)\n\ncolorbar.set_label('DTC (us/ft)', fontsize=14, fontweight='bold')\n\n# Display the plot\nplt.show()\n```", "```py\nxgrid_extent = [433986, 438607]\nygrid_extent = [6477539, 6479393]\n\nx = np.linspace(xgrid_extent[0], xgrid_extent[1], zstar.shape[1])\ny = np.linspace(ygrid_extent[0], ygrid_extent[1], zstar.shape[0])\n\nfig = go.Figure()\n\nfig.add_trace(go.Surface(z=zstar, x=x, y=y))\n\nfig.update_layout(scene = dict(\n                    xaxis_title='X Location',\n                    yaxis_title='Y Location',\n                    zaxis_title='Depth'),\n                  width=1000,\n                  height=800,\n                  margin=dict(r=20, l=10, b=10, t=10))\n\nfig.show()\n```", "```py\nhugin_formation_surface = pd.read_csv('Data/Volve/Hugin_Fm_Top+ST10010ZC11_Near_190314_adj2_2760_EasyDC+STAT+DEPTH.csv')\n```", "```py\nx = hugin_formation_surface['x']\ny = hugin_formation_surface['y']\nz = hugin_formation_surface['z']\n```", "```py\nxi = np.linspace(x.min(), x.max(), 100)\nyi = np.linspace(y.min(), y.max(), 100)\nxi, yi = np.meshgrid(xi, yi)\n```", "```py\nxir = xi.ravel()\nyir = yi.ravel()\n\ninterp = LinearNDInterpolator((x, y), z)\nzi = interp(xir, yir)\n```", "```py\nfig = go.Figure()\n\nfig.add_trace(go.Surface(z=zi, x=xi, y=yi, colorscale='Viridis'))\n\nfig.update_layout(scene = dict(\n                    xaxis_title='Easting (m)',\n                    yaxis_title='Northing (m)',\n                    zaxis_title='Depth',\n                    zaxis=dict(autorange='reversed')),\n                  width=1000,\n                  height=800,\n                  margin=dict(r=20, l=10, b=10, t=10))\n\nfig.update_traces(contours_z=dict(show=True, \n                                  usecolormap=True, \n                                  project_z=True,\n                                  highlightcolor=\"white\"))\n\nfig.show()\n```"]