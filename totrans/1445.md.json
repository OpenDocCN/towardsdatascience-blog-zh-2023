["```py\ndef encode_data(data: list):\n    print(\"Encode data\")\n    data_map = {'a': 1, 'b': 2, 'c': 3}\n    print(f\"Data map: {data_map}\")\n    return [data_map[num] for num in data]\n\ndef add_one(data: list):\n    print(\"Add one\")\n    return [num + 1 for num in data]\n\ndef process_data(data: list):\n    print(\"Process data\")\n    data = encode_data(data)\n    print(f\"Encoded data: {data}\")\n    data = add_one(data)\n    print(f\"Added one: {data}\")\n\nprocess_data(['a', 'a', 'c'])\n```", "```py\nProcess data\nEncode data\nData map: {'a': 1, 'b': 2, 'c': 3}\nEncoded data: [1, 1, 3]\nAdd one\nAdded one: [2, 2, 4]\n```", "```py\ndef encode_data(data: list):\n    print(\"Encode data\")\n    data_map = {'a': 1, 'b': 2, 'c': 3}\n    return [data_map[num] for num in data]\n\ndef add_one(data: list):\n    print(\"Add one\")\n    return [num + 1 for num in data]\n\ndef process_data(data: list):\n    print(\"Process data\")\n    data = encode_data(data)\n    data = add_one(data)\n\nprocess_data(['a', 'a', 'c'])\n```", "```py\ndef encode_data(data: list):\n    logger.info(\"Encode data\")\n    data_map = {'a': 1, 'b': 2, 'c': 3}\n    logger.debug(f\"Data map: {data_map}\")\n    return [data_map[num] for num in data]\n\ndef add_one(data: list):\n    logger.info(\"Add one\")\n    return [num + 1 for num in data]\n\ndef process_data(data: list):\n    logger.info(\"Process data\")\n    data = encode_data(data)\n    logger.debug(f\"Encoded data: {data}\")\n    data = add_one(data)\n    logger.debug(f\"Added one: {data}\")\n\nprocess_data(['a', 'a', 'c'])\n```", "```py\n2023-07-24 09:45:15 | INFO | logging_example:process_data:22 - Process data\n2023-07-24 09:45:15 | INFO | logging_example:encode_data:12 - Encode data\n2023-07-24 09:45:15 | DEBUG | logging_example:encode_data:14 - Data map: {'a': 1, 'b': 2, 'c': 3}\n2023-07-24 09:45:15 | DEBUG | logging_example:process_data:24 - Encoded data: [1, 1, 3]\n2023-07-24 09:45:15 | INFO | logging_example:add_one:18 - Add one\n2023-07-24 09:45:15 | DEBUG | logging_example:process_data:26 - Added one: [2, 2, 4]\n```", "```py\n22023-07-24 09:40:05 | INFO | logging_example:process_data:22 - Process data\n2023-07-24 09:40:05 | INFO | logging_example:encode_data:12 - Encode data\n2023-07-24 09:40:05 | INFO | logging_example:add_one:18 - Add one\n```", "```py\n# example.log\n\n2023-07-16 09:50:24 | INFO     | logging_example:main:17 - This is an info message\n2023-07-16 09:50:24 | WARNING  | logging_example:main:18 - This is a warning message\n2023-07-16 09:50:24 | ERROR    | logging_example:main:19 - This is an error message\n2023-07-16 09:55:37 | INFO     | logging_example:main:17 - This is an info message\n2023-07-16 09:55:37 | WARNING  | logging_example:main:18 - This is a warning message\n2023-07-16 09:55:37 | ERROR    | logging_example:main:19 - This is an error message\n```", "```py\nimport logging\n\n# Require initial set up\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format=\"%(asctime)s | %(levelname)s | %(module)s:%(funcName)s:%(lineno)d - %(message)s\"\n    datefmt=\"%Y-%m-%d %H:%M:%S\",\n)\n\nlogger = logging.getLogger(__name__)\n\ndef main():\n    logger.debug(\"This is a debug message\")\n    logger.info(\"This is an info message\")\n    logger.warning(\"This is a warning message\")\n    logger.error(\"This is an error message\")\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef main():\n    logger.debug(\"This is a debug message\")\n    logger.info(\"This is an info message\")\n    logger.warning(\"This is a warning message\")\n    logger.error(\"This is an error message\")\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nWARNING:root:This is a warning message\nERROR:root:This is an error message\n```", "```py\nfrom loguru import logger\n\ndef main():\n    logger.debug(\"This is a debug message\")\n    logger.info(\"This is an info message\")\n    logger.warning(\"This is a warning message\")\n    logger.error(\"This is an error message\")\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\niimport logging\n\n# Create a logger and set the logging level\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s | %(levelname)s | %(module)s:%(funcName)s:%(lineno)d - %(message)s\",\n    datefmt=\"%Y-%m-%d %H:%M:%S\",\n)\n\nlogger = logging.getLogger(__name__)\n\ndef main():\n    logger.debug(\"This is a debug message\")\n    logger.info(\"This is an info message\")\n    logger.warning(\"This is a warning message\")\n    logger.error(\"This is an error message\")\n```", "```py\n2023-07-16 14:48:17 | INFO | logging_example:main:13 - This is an info message\n2023-07-16 14:48:17 | WARNING | logging_example:main:14 - This is a warning message\n2023-07-16 14:48:17 | ERROR | logging_example:main:15 - This is an error message\n```", "```py\nfrom loguru import logger\n\nlogger.add(\n    sys.stdout,\n    level=\"INFO\",\n    format=\"{time:YYYY-MM-DD HH:mm:ss} | {level} | {module}:{function}:{line} - {message}\",\n)\n```", "```py\nimport logging\n\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format=\"%(asctime)s | %(levelname)s | %(module)s:%(funcName)s:%(lineno)d - %(message)s\",\n    datefmt=\"%Y-%m-%d %H:%M:%S\",\n    handlers=[\n        logging.FileHandler(filename=\"info.log\", level=logging.INFO),\n        logging.StreamHandler(level=logging.DEBUG),\n    ],\n)\n\nlogger = logging.getLogger(__name__)\n\ndef main():\n    logging.debug(\"This is a debug message\")\n    logging.info(\"This is an info message\")\n    logging.warning(\"This is a warning message\")\n    logging.error(\"This is an error message\")\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nfrom loguru import logger\n\nlogger.add(\n    'info.log',\n    format=\"{time:YYYY-MM-DD HH:mm:ss} | {level} | {module}:{function}:{line} - {message}\",\n    level=\"INFO\",\n)\n\ndef main():\n    logger.debug(\"This is a debug message\")\n    logger.info(\"This is an info message\")\n    logger.warning(\"This is a warning message\")\n    logger.error(\"This is an error message\")\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nimport logging\nfrom logging.handlers import TimedRotatingFileHandler\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# Create a formatter with the desired log format\nformatter = logging.Formatter(\n    \"%(asctime)s | %(levelname)-8s | %(module)s:%(funcName)s:%(lineno)d - %(message)s\",\n    datefmt=\"%Y-%m-%d %H:%M:%S\",\n)\n\nfile_handler = TimedRotatingFileHandler(\n    filename=\"debug2.log\", when=\"WO\", interval=1, backupCount=4\n)\nfile_handler.setLevel(logging.INFO)\nfile_handler.setFormatter(formatter)\nlogger.addHandler(file_handler)\n\ndef main():\n    logger.debug(\"This is a debug message\")\n    logger.info(\"This is an info message\")\n    logger.warning(\"This is a warning message\")\n    logger.error(\"This is an error message\")\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nfrom loguru import logger\n\nlogger.add(\"debug.log\", level=\"INFO\", rotation=\"1 week\", retention=\"4 weeks\")\n\ndef main():\n    logger.debug(\"This is a debug message\")\n    logger.info(\"This is an info message\")\n    logger.warning(\"This is a warning message\")\n    logger.error(\"This is an error message\")\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nimport logging\n\nlogging.basicConfig(\n    filename=\"hello.log\",\n    format=\"%(asctime)s | %(levelname)-8s | %(module)s:%(funcName)s:%(lineno)d - %(message)s\",\n    level=logging.INFO,\n)\n\nclass CustomFilter(logging.Filter):\n    def filter(self, record):\n        return \"Hello\" in record.msg\n\n# Create a custom logging filter\ncustom_filter = CustomFilter()\n\n# Get the root logger and add the custom filter to it\nlogger = logging.getLogger()\nlogger.addFilter(custom_filter)\n\ndef main():\n    logger.info(\"Hello World\")\n    logger.info(\"Bye World\")\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nfrom loguru import logger\n\nlogger.add(\"hello.log\", filter=lambda x: \"Hello\" in x[\"message\"], level=\"INFO\")\n\ndef main():\n    logger.info(\"Hello World\")\n    logger.info(\"Bye World\")\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nimport logging\n\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format=\"%(asctime)s | %(levelname)s | %(module)s:%(funcName)s:%(lineno)d - %(message)s\",\n    datefmt=\"%Y-%m-%d %H:%M:%S\",\n)\n\ndef division(a, b):\n    return a / b\n\ndef nested(c):\n    try:\n        division(1, c)\n    except ZeroDivisionError:\n        logging.exception(\"ZeroDivisionError\")\n\nif __name__ == \"__main__\":\n    nested(0)\n```", "```py\nTraceback (most recent call last):\n  File \"/Users/khuyentran/Data-science/productive_tools/logging_tools/catch_exceptions/logging_example.py\", line 16, in nested\n    division(1, c)\n  File \"/Users/khuyentran/Data-science/productive_tools/logging_tools/catch_exceptions/logging_example.py\", line 11, in division\n    return a / b\nZeroDivisionError: division by zero\n```", "```py\nfrom loguru import logger\n\ndef division(a, b):\n    return a / b\n\ndef nested(c):\n    try:\n        division(1, c)\n    except ZeroDivisionError:\n        logger.exception(\"ZeroDivisionError\")\n\nif __name__ == \"__main__\":\n    nested(0)\n```", "```py\nfrom loguru import logger\n\ndef division(a, b):\n    return a / b\n\n@logger.catch\ndef nested(c):\n    division(1, c)\n\nif __name__ == \"__main__\":\n    nested(0)\n```"]