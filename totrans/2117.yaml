- en: Tips to Understand Regular Expressions in R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/tips-to-understand-regular-expressions-in-r-5d25be06f2a8](https://towardsdatascience.com/tips-to-understand-regular-expressions-in-r-5d25be06f2a8)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Gain more knowledge in regexp with stringR
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://gustavorsantos.medium.com/?source=post_page-----5d25be06f2a8--------------------------------)[![Gustavo
    Santos](../Images/a19a9f4525cdeb6e7a76cd05246aa622.png)](https://gustavorsantos.medium.com/?source=post_page-----5d25be06f2a8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5d25be06f2a8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5d25be06f2a8--------------------------------)
    [Gustavo Santos](https://gustavorsantos.medium.com/?source=post_page-----5d25be06f2a8--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5d25be06f2a8--------------------------------)
    ·8 min read·Jan 18, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ca3fa7161dcaa5cd562cdf85952ca062.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Jason Leung](https://unsplash.com/ko/@ninjason?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/0sBTrm726C8?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a project involves text analysis, such as sentiment analysis, text mining,
    or any other task you were entitled to do analyzing textual information will probably
    require parsing text at some point. This mean that one will have to extract a
    piece of a text or find a given pattern within a text to be able to extract an
    insight, for example.
  prefs: []
  type: TYPE_NORMAL
- en: If we are dealing with a simple pattern, like a word, or a number, that is easy
    enough to deal with in R.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine you have this following text and you want to find the word `random`.
    There are many simple functions that we can use to perform this task. But first
    load the `library(stringr)`. Then see three of its functions next.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now, let’s imagine we wanted to find another kind of pattern, a very specific
    one, like *any digit in a sentence*, or even more specific, *a combination of
    letters and numbers.* That is when the regular expressions, or *regexp* will be
    very handy.
  prefs: []
  type: TYPE_NORMAL
- en: A Regular Expression is a sequence of characters that helps us to find a pattern
    within a text.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The RegExp 101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To write your first *regexps*, the way to start is to understand the elements
    that can compose one of these patterns. Additionally, remember to always wrap
    your pattern within quotes, single or double ones.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start.
  prefs: []
  type: TYPE_NORMAL
- en: 'Side note: the `*str_view_all*` function shows all the possible values captured
    by a given pattern, but it does not extract anything. That can be done by other
    functions from the stringR library. It is an excellent tool to see if you’re getting
    the right text, though.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'One character: the square brackets'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to find a single character, the `[]` will be your best friend. When
    you write them, whatever you put inside means that one character you want to find.
    Let’s see it in a practical example to build a better intuition on this matter.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to find out if there is a letter `k` in our previous text, here’s
    the pattern to be used: `[k]` .'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And yes, we do have a letter **k**. It’s in the position 81\. As I realize
    that is useful only for education purposes, let’s climb another step. If we want
    to know if our text has either one of the letters k, w or b, we can use this pattern:
    `''[kwb]''` .'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice how we are writing this:'
  prefs: []
  type: TYPE_NORMAL
- en: We are using a `[]` to tell the program that we want to find a single character
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the brackets, we have the patterns we are looking for, which is read
    as **k** OR **w** OR **b**, whichever comes first. And it happens to be a letter
    **w** on the 31st position.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use the `[]` for a number of other patterns. Let me tell you that is
    is one of the most used patterns in the *regexps* I usually write. And there are
    even some pre-created patterns that help us while writing our code. If you [follow
    this link](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf), in the
    stringR cheatsheet you can find many quick patterns like:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[:digit:]` to find all the numbers in a sentence. In our text: `“1” “2” “3”`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[:alpha:]` to find letters only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/b69158d9dde1c38f568a0457dfcf59e9.png)'
  prefs: []
  type: TYPE_IMG
- en: What is found in our text with ‘[:alpha]’. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: '`[:punct:]` to find the punctuation. In our text: `"." "," "''" "," "."`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also can use a range of values or differentiate between uppercase or lowercase
    within brackets. For example, `[a-z]` looks for one lowercase letter between a
    and z, always returning what is found first. Similarly, `[A-Z]` does the same,
    but looking for uppercase letters.
  prefs: []
  type: TYPE_NORMAL
- en: Dot . means Find Anything
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The dot `.`, in a *regexp* means any character. So, if we create a pattern like
    this `'[Ii].'` and apply if to our text variable, we are saying we want to find
    any pattern with the letter *I or i* followed by any other character.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: And this is the resulting image.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/450174db75df641a24b8548c9a726f23.png)'
  prefs: []
  type: TYPE_IMG
- en: Letter i followed by any other character. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Find presence or absence of something
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another interesting portion of the *regexps* is the use of some patterns to
    find presence or absence of spaces, digits, letters. Generally, it will be a double
    backslash followed by a letter for presence and the same UPPERCASE letter for
    absence.
  prefs: []
  type: TYPE_NORMAL
- en: '`\\s` for space, `\\d` for digit, `\\w` for word and `\\b` boundary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\\S` for non-space, `\\D` for non-digit, `\\W` for non-word.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: And the respective results are next.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0f7ef9a0f53a4090cb9e8054e1576590.png)'
  prefs: []
  type: TYPE_IMG
- en: Results from the regexps. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that a boundary can be anything that surrounds a pattern.
    Imagine you have an ID number like `ID-3234`. Here, if we wanted to extract only
    the numbers using this regexp `'\\b\\d+'`, the `-` would be recognized as the
    boundary.
  prefs: []
  type: TYPE_NORMAL
- en: 0, 1 or more repetitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`+, * , ? , { }` are the ways for you to indicate none or many repetitions
    of the characters.'
  prefs: []
  type: TYPE_NORMAL
- en: '***** : Use the asterisk sign to indicate that regex can happen *zero or more
    times.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**?** : Question mark indicates the regex happens *zero or one time.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**+** : Use the plus sign to indicate that regex can happen *one or more times.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**{2,4}**: curly brackets is for customization of repetitions. Here, from 2
    to 4 times.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using the except signal ^
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use the `^` within brackets as the synonymous of **except**. In our `text2`
    string, we can randomly say we don’t want the pattern to capture the letters *a,
    m, d, x, e*. The below *regexp* pattern with the `^` will remove one of the letters
    listed within the brackets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The code returns the next figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1881bf23115e7da5ee7a05c03ff985ff.png)'
  prefs: []
  type: TYPE_IMG
- en: The letters in our regexp are not selected. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Before and after
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To extract what is before or after a given pattern, here are the *regexps*.
    Say we have a `text5 <- ‘Extract the ID 321’` and we want to extract anything
    that comes before and after the word ID.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Starts and ends with
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next codes are to extract patterns that starts with or ends with something.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Build by parts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After learning the basics of *regexps*, here’s a good tip to start creating
    your own: **build it by parts**. Look at the pattern you want to create, think
    about it and start to write each part having in mind the elements learned in this
    post.'
  prefs: []
  type: TYPE_NORMAL
- en: Practice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pattern: Extract the letter A followed by any amount of numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: The first element is the capped *letter A*. So `[A]` will take care of it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next part is *any amount of numbers*. So `\\d` is for digits and `+` is
    the symbol for one or more repetitions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*RegExp* = `''[A]\\d+''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Pattern: From a list of books like this example `Romeo and Juliet by William
    Shakespeare (6389)`, extract the names of the books, the names of the authors
    and the number of downloads.'
  prefs: []
  type: TYPE_NORMAL
- en: To extract the name of the book, we must get everything until the word `by`.
    So, we use `.+` for any character one or more times `(?= by)` until *by.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To extract the name of the author, we must get everything after the word `by`.
    Here, `(?<=by )` is the piece to look after *by*, `.+` is the same as previous
    bullet and `[^(\\d)]+` means ^ not ( ) with digits within.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of downloads is just digits `\\d` one or more times `+`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7251500214fe2373f8ec852eb3a1cb51.png)'
  prefs: []
  type: TYPE_IMG
- en: Result of the exercise to bring the top 10 most downloaded books from [Gutenberg](https://www.gutenberg.org/browse/scores/top).
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Before You Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, this is the basics about *Regexp*. I hope you could feel the power that
    it has. You can find basically anything using regular expressions.
  prefs: []
  type: TYPE_NORMAL
- en: I know that it may look intimidating at first, but it’s just a matter of practicing
    and you will start to feel more confident about it.
  prefs: []
  type: TYPE_NORMAL
- en: You can always practice using the [Regex 101 web site](https://regex101.com/)
    on the References.
  prefs: []
  type: TYPE_NORMAL
- en: If you liked this content, follow my blog for more.
  prefs: []
  type: TYPE_NORMAL
- en: '[](http://gustavorsantos.medium.com/?source=post_page-----5d25be06f2a8--------------------------------)
    [## Gustavo Santos - Medium'
  prefs: []
  type: TYPE_NORMAL
- en: Read writing from Gustavo Santos on Medium. Data Scientist. I extract insights
    from data to help people and companies…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: gustavorsantos.medium.com](http://gustavorsantos.medium.com/?source=post_page-----5d25be06f2a8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[](https://en.wikipedia.org/wiki/Regular_expression?source=post_page-----5d25be06f2a8--------------------------------)
    [## Regular expression - Wikipedia'
  prefs: []
  type: TYPE_NORMAL
- en: A regular expression (shortened as regex or regexp; sometimes referred to as
    rational expression) is a sequence of…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: en.wikipedia.org](https://en.wikipedia.org/wiki/Regular_expression?source=post_page-----5d25be06f2a8--------------------------------)  [##
    Regular expressions
  prefs: []
  type: TYPE_NORMAL
- en: Regular expressions are a concise and flexible tool for describing patterns
    in strings. This vignette describes the key…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'cran.r-project.org](https://cran.r-project.org/web/packages/stringr/vignettes/regular-expressions.html?source=post_page-----5d25be06f2a8--------------------------------)
    [](https://regex101.com/?source=post_page-----5d25be06f2a8--------------------------------)
    [## regex101: build, test, and debug regex'
  prefs: []
  type: TYPE_NORMAL
- en: Regular expression tester with syntax highlighting, explanation, cheat sheet
    for PHP/PCRE, Python, GO, JavaScript…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: regex101.com](https://regex101.com/?source=post_page-----5d25be06f2a8--------------------------------)
    [](https://stringr.tidyverse.org/?source=post_page-----5d25be06f2a8--------------------------------)
    [## Simple, Consistent Wrappers for Common String Operations
  prefs: []
  type: TYPE_NORMAL
- en: A consistent, simple and easy to use set of wrappers around the fantastic stringi
    package. All function and argument…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: stringr.tidyverse.org](https://stringr.tidyverse.org/?source=post_page-----5d25be06f2a8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/rstudio/cheatsheets/blob/main/strings.pdf](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf)'
  prefs: []
  type: TYPE_NORMAL
