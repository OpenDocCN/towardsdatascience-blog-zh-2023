- en: 'A Data Scientist’s Guide to Python Typing: Boosting Code Clarity'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/a-data-scientists-guide-to-python-typing-boosting-code-clarity-194371b4ef05](https://towardsdatascience.com/a-data-scientists-guide-to-python-typing-boosting-code-clarity-194371b4ef05)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The importance of typing and how it can be carried in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@egorhowell?source=post_page-----194371b4ef05--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----194371b4ef05--------------------------------)[](https://towardsdatascience.com/?source=post_page-----194371b4ef05--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----194371b4ef05--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----194371b4ef05--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----194371b4ef05--------------------------------)
    ·4 min read·Jul 31, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/76d1ae8f42e8d81de522593a525b0fd6.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Pankaj Patel](https://unsplash.com/@pankajpatel?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: What is ‘Typing’?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By typing we are not referring to physically touching our keyboard, but rather
    the datatypes our variables (and functions) take on in our Python code!
  prefs: []
  type: TYPE_NORMAL
- en: Python inherently is a [**dynamic language**](https://en.wikipedia.org/wiki/Dynamic_programming_language),
    which means there is no formal requirement to declare what datatype our variables
    take on. For example, a variable may start as an integer but change to a string
    somewhere else in the code. This flexibility can often lead to errors during runtime
    that can be hard to debug.
  prefs: []
  type: TYPE_NORMAL
- en: Other languages are [**statically typed**](https://www.techopedia.com/definition/22321/statically-typed#:~:text=Statically%20typed%20is%20a%20programming,with%20variables%2C%20not%20with%20values.),
    this means their variable types need to be explicitly declared and cannot change
    during runtime. If a variable is declared as an integer, it has to be an integer
    through the whole runtime of the program. Examples of statically typed languages
    are [**Fortran**](https://medium.com/towards-data-science/why-you-should-consider-using-fortran-as-a-data-scientist-5511e05ef89)
    and C++.
  prefs: []
  type: TYPE_NORMAL
- en: However, in recent years Python has developed support for typing and nowadays
    it is an industry-wide standard. This is especially true for Data Scientists who
    need to deploy robust machine-learning models into production.
  prefs: []
  type: TYPE_NORMAL
- en: In this post, I want to take you through the basic syntax and processes behind
    typing in Python and how to use the `mypy` package, which allows us to seamlessly
    type check our code.
  prefs: []
  type: TYPE_NORMAL
- en: Typing is actually recommended as shown by [**PEP 484**](https://peps.python.org/pep-0484/)**.**
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Basic Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s walk through a simple example to explain the need for type-checking in
    Python. Below we have a function that adds two numbers together called, ingeniously,
    `adding_two_numbers`:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'What is the output from the two `print` statements? Well, the first one is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is expected. However, the output of the second `print` statement is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Despite this result being ‘technically’ correct, it is clearly not what we were
    trying to achieve with this particular function.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help overcome this issue happening, we can add *type annotations* to the
    function to make clearer the type of arguments we need to pass in and the expected
    *return type*:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: In the above example, we have made it clear that `num1` and `num2` *should*
    both be integers and the expected output *should* be an integer as well.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to mention that these are truly just ‘hints’ and if you pass
    in a string there will still be no runtime error when running the program as Python
    fundamentally is dynamically typed.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the general syntax for declaring types is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Furthermore, if you are unsure what datatype your objects or variable is, you
    can check it by calling the `type()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Typing Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What if you want a specific function to return a `list`, but every element in
    the `list` must be an integer? Unfortunately, Python’s inherent types can’t quite
    do this easily. This is where we use the `typing` package, which can be installed
    by running `pip install typing`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `typing` package to declare our datatype a lot more intricately.
    Below are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: There are also many more types available within the `typing` package to meet
    ‘any’ variable you come across (no pun intended!). [See this cheat sheet](https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html)
    if you are interested in delving further in.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Creating Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can also create your own types by simply constructing a class. Below is
    an example of a `dog` class that I made:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: MyPy Tutorial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`mypy` is a package that is now the industry standard for checking types in
    your Python code. It is used in virtually any production deployed code, especially
    machine learning algorithms, so it is well worth knowing as a Data Scientist.'
  prefs: []
  type: TYPE_NORMAL
- en: To get started with `mypy`, simply install it as `pip install mypy`. Then to
    use it, all you need to do is run `mypy <file_name.py>`. Thats really all there
    is to it!
  prefs: []
  type: TYPE_NORMAL
- en: See [here](https://mypy.readthedocs.io/en/stable/) if you want to learn some
    of the more advanced features in mypy.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s go over an example to make this more concrete. If we go back to our previous
    function `adding_two_numbers`, which looked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'And, we run `mypy adding_two_numbers.py`, the following output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the errors are only for line 6 where we have passed in string types
    but the function expected integer types. It even states this in the error message.
  prefs: []
  type: TYPE_NORMAL
- en: It raised no errors for the `print` statement on line 5 as we passed in and
    the function returned the expected integer types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Summary: Pros & Cons'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s wrap up this article if listing some of the main pros and cons of typing
    in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: Pros
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Helps with* [***linting***](https://en.wikipedia.org/wiki/Lint_(software))
    *and reduces the chance of bugs occurring within your code.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Improves readability and documentation of your code.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Time spent implementing and writing the types.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Backward compatibility on some types is not available for all Python versions.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Typing is an industry standard procedure for most Python code, and that includes
    data science work. Therefore, it is an important and also relatively easy skill
    to learn and implement in your work. Not only will it make your code more intuitive
    but it will help prevent your machine learning model breaking in production!
  prefs: []
  type: TYPE_NORMAL
- en: References & Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*mypy typing cheat sheet*](https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Further detailed of Python typing*](https://realpython.com/python-type-checking/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another Thing!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----194371b4ef05--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  prefs: []
  type: TYPE_NORMAL
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----194371b4ef05--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Connect With Me!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**YouTube**](https://www.youtube.com/@egorhowell?sub_confirmation=1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**GitHub**](https://github.com/egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
