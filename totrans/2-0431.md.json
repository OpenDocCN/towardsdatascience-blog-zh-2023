["```py\nfrom plxscripting.easy import *\nimport subprocess, time\nimport pandas as pd\n\n###############################################\nPLAXIS_PATH = r'C:\\Program Files\\Bentley\\Geotechnical\\PLAXIS 2D CONNECT Edition V22\\\\Plaxis2DXInput.exe'  # Specify PLAXIS path on server.\nPORT_i = 10000  # Define a port number.\nPORT_o = 10001\nPASSWORD = 'SxDBR<TYKRAX834~'  # Define a password.\nsubprocess.Popen([PLAXIS_PATH, f'--AppServerPassword={PASSWORD}', f'--AppServerPort={PORT_i}'], shell=False)  # Start the PLAXIS remote scripting service.\ntime.sleep(5)  # Wait for PLAXIS to boot before sending commands to the scripting service.\n\n# Start the scripting server.\ns_i, g_i = new_server('localhost', PORT_i, password=PASSWORD)\ns_o, g_o = new_server('localhost', PORT_o, password=PASSWORD)\n\ns_i.new()\n\ng_i.SoilContour.initializerectangular(-15, -10, 15, 10)\n```", "```py\nsource=r\"C:\\Users\\phtsang\\Desktop\\PLAXIS_V22\\Python_automation\"\nfile=\"Soil_input\"+\".xlsx\"\nsoilsheet=\"OHE Ground Profile\"\n```", "```py\n#Soil\ndf_soil = pd.read_excel(file, sheet_name = soilsheet,engine=\"openpyxl\")\n```", "```py\ng_i.borehole(df_soil.iloc[0,1]) # Create borehole at x coord\n```", "```py\ng_i.soillayer(0) # Create first layer in 1st borehole\n```", "```py\ng_i.Soillayers[0].Zones[0].Top.set(df_soil.iloc[1,1]) # Set top y coord of 1st Bh\n```", "```py\nfor j in range(len(df_soil.columns)-2):\n    g_i.borehole(df_soil.iloc[0,j+2]) # X coord for other Bhs\n    g_i.Soillayers[0].Zones[j+1].Top.set(df_soil.iloc[1,j+2]) #Top y coord for other Bhs\n```", "```py\nfor i in range(df_soil.count()[0]-2): # Loop through the number of layers\n    if i == df_soil.count()[0]-3: # Don't create new layer if we are at last unit\n        g_i.Soillayers[i].Zones[0].Bottom.set(df_soil.iloc[i+2,1]) #Set bottom y coord for 1st Bh\n    else:\n        g_i.soillayer(1) #Create new layer if we aren't at last unit\n        g_i.Soillayers[i].Zones[0].Bottom.set(df_soil.iloc[i+2,1])\n```", "```py\nfor j in range(len(df_soil.columns)-2):\n    for i in range(df_soil.count()[0]-2):\n        g_i.Soillayers[i].Zones[j+1].Bottom.set(df_soil.iloc[i+2,j+2]) #Set bottom y coord for other Bhs\n```", "```py\ndf_soil = pd.read_excel(file, sheet_name = soilsheet,engine=\"openpyxl\")\n\ng_i.borehole(df_soil.iloc[0,1])\ng_i.soillayer(0)\ng_i.Soillayers[0].Zones[0].Top.set(df_soil.iloc[1,1])\nfor j in range(len(df_soil.columns)-2):\n    g_i.borehole(df_soil.iloc[0,j+2])\n    g_i.Soillayers[0].Zones[j+1].Top.set(df_soil.iloc[1,j+2])\n\nfor i in range(df_soil.count()[0]-2):\n    if i == df_soil.count()[0]-3:\n        g_i.Soillayers[i].Zones[0].Bottom.set(df_soil.iloc[i+2,1])\n    else:\n        g_i.soillayer(1)\n        g_i.Soillayers[i].Zones[0].Bottom.set(df_soil.iloc[i+2,1])\n\nfor j in range(len(df_soil.columns)-2):\n    for i in range(df_soil.count()[0]-2):\n        g_i.Soillayers[i].Zones[j+1].Bottom.set(df_soil.iloc[i+2,j+2])\n```", "```py\nsoilmatsheet=\"Soil properties\"\ndf_soilmat = pd.read_excel(file, sheet_name = soilmatsheet,engine=\"openpyxl\")\n```", "```py\nfor i in range(df_soilmat.count()[0]):\n    name = df_soilmat.iloc[i,1]\n\n    if df_soilmat.iloc[i,2] == 'MC':\n        materialmodel=2\n\n    gammaUnsat=df_soilmat.iloc[i,3]\n    gammaSat=df_soilmat.iloc[i,3]\n    Eref=df_soilmat.iloc[i,4]\n    nu=df_soilmat.iloc[i,5]\n    cref=df_soilmat.iloc[i,6]\n    phi= df_soilmat.iloc[i,7]\n    TensileStrength=df_soilmat.iloc[i,8]\n```", "```py\n if df_soilmat.iloc[i,9] >0:\n        InterfaceStrength = 'Manual'\n        Rinter=df_soilmat.iloc[i,9]\n    else:\n        InterfaceStrength = 'Rigid'\n```", "```py\n if df_soilmat.iloc[i,10] =='F':\n        K0Determination=1\n        if df_soilmat.iloc[i,11] == 'T':\n            K0PrimaryIsK0Secondary=True\n            K0Primary=df_soilmat.iloc[i,12]\n            K0Secondary=df_soilmat.iloc[i,12]\n        else:\n            K0PrimaryIsK0Secondary=False\n            K0Primary=df_soilmat.iloc[i,12]\n            K0Secondary=df_soilmat.iloc[i,13]\n    else:\n        K0Determination=0\n```", "```py\n material1 = g_i.soilmat()\n    material1.setproperties(\n        \"Identification\",name,\n        \"SoilModel\",materialmodel,\n        \"gammaUnsat\", gammaUnsat,\n        \"gammaSat\", gammaSat,\n        \"Eref\",Eref,\n        \"nu\", nu,\n        \"cref\", cref,\n        \"phi\", phi,\n        \"TensileStrength\",TensileStrength,\n        \"InterfaceStrengthDetermination\",InterfaceStrength,\n        \"Rinter\",Rinter,\n        \"K0Determination\",K0Determination,\n        \"K0PrimaryIsK0Secondary\",K0PrimaryIsK0Secondary,\n        \"K0Primary\",K0Primary,\n        \"K0Secondary\",K0Secondary\n    )\n```", "```py\nsoilmat=[mat for mat in g_i.Materials[:] if mat.TypeName.value == 'SoilMat']\n```", "```py\nfor j in range(df_soil.count()[0]-2):\n    for i in range(len(soilmat)):\n        if df_soil.iloc[j+2,0] == soilmat[i].Name:\n            g_i.Soils[j].setmaterial(soilmat[i])\n```", "```py\nsoilmatsheet=\"Soil properties\"\ndf_soilmat = pd.read_excel(file, sheet_name = soilmatsheet,engine=\"openpyxl\")\n\nfor i in range(df_soilmat.count()[0]):\n    name = df_soilmat.iloc[i,1]\n\n    if df_soilmat.iloc[i,2] == 'MC':\n        materialmodel=2\n\n    gammaUnsat=df_soilmat.iloc[i,3]\n    gammaSat=df_soilmat.iloc[i,3]\n    Eref=df_soilmat.iloc[i,4]\n    nu=df_soilmat.iloc[i,5]\n    cref=df_soilmat.iloc[i,6]\n    phi= df_soilmat.iloc[i,7]\n    TensileStrength=df_soilmat.iloc[i,8]\n\n    if df_soilmat.iloc[i,9] >0:\n        InterfaceStrength = 'Manual'\n        Rinter=df_soilmat.iloc[i,9]\n    else:\n        InterfaceStrength = 'Rigid'\n\n    if df_soilmat.iloc[i,10] =='F':\n        K0Determination=1\n        if df_soilmat.iloc[i,11] == 'T':\n            K0PrimaryIsK0Secondary=True\n            K0Primary=df_soilmat.iloc[i,12]\n            K0Secondary=df_soilmat.iloc[i,12]\n        else:\n            K0PrimaryIsK0Secondary=False\n            K0Primary=df_soilmat.iloc[i,12]\n            K0Secondary=df_soilmat.iloc[i,13]\n    else:\n        K0Determination=0\n\n    material1 = g_i.soilmat()\n    material1.setproperties(\n        \"Identification\",name,\n        \"SoilModel\",materialmodel,\n        \"gammaUnsat\", gammaUnsat,\n        \"gammaSat\", gammaSat,\n        \"Eref\",Eref,\n        \"nu\", nu,\n        \"cref\", cref,\n        \"phi\", phi,\n        \"TensileStrength\",TensileStrength,\n        \"InterfaceStrengthDetermination\",InterfaceStrength,\n        \"Rinter\",Rinter,\n        \"K0Determination\",K0Determination,\n        \"K0PrimaryIsK0Secondary\",K0PrimaryIsK0Secondary,\n        \"K0Primary\",K0Primary,\n        \"K0Secondary\",K0Secondary\n    )\n\nsoilmat=[mat for mat in g_i.Materials[:] if mat.TypeName.value == 'SoilMat']\n\nfor j in range(df_soil.count()[0]-2):\n    for i in range(len(soilmat)):\n        if df_soil.iloc[j+2,0] == soilmat[i].Name:\n            g_i.Soils[j].setmaterial(soilmat[i])\n```", "```py\n(PLAXIS) C:\\Users\\phtsang\\Desktop\\PLAXIS_V22\\Python_automation>python soil_geometry.py\n```"]