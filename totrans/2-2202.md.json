["```py\ndef coefficients(preds):\n    A = np.asarray(preds[:, 0], dtype=bool)\n    B = np.asarray(preds[:, 1], dtype=bool)\n\n    a = np.sum(A * B)           # A right, B right\n    b = np.sum(~A * B)          # A wrong, B right\n    c = np.sum(A * ~B)          # A right, B wrong\n    d = np.sum(~A * ~B)         # A wrong, B wrong\n\n    return a, b, c, d\n\ndef disagreement(preds, i,j):\n    L = preds.shape[1]\n    a, b, c, d = coefficients(preds[:, [i, j]])\n    return float(b + c) / (a + b + c + d)\n\ndef paired_q(preds, i, j):\n    L = preds.shape[1]\n    # div = np.zeros((L * (L - 1)) // 2)\n    a, b, c, d = coefficients(preds[:, [i, j]])\n    return float(a * d - b * c) / ((a * d + b * c) + 10e-24) \n\ndef entropy(preds):\n    L = preds.shape[1]\n    tmp = np.sum(preds, axis=1)\n    tmp = np.minimum(tmp, L - tmp)\n    ent = np.mean((1.0 / (L - np.ceil(0.5 * L))) * tmp)\n    return ent\n```", "```py\nfrom pmlb import fetch_data\nfrom pycaML import ClassificationExperiment\nname = 'diabetes'\ndf = fetch_data(name, return_X_y=False)\ndf.head()\ndf.to_csv(f'{name}.csv', index=False)\nfrom pycaML import ClassificationExperiment\nexp = ClassificationExperiment(name = name)\nexp.load_data(f'{name}.csv', target='target')\nexp.start()\nexp.result.loc[:, exp.result.columns.str.contains('Test')].head(10)\n```", "```py\npreds = pd.DataFrame()\nfor preds in exp.result.index:\n    preds[preds] = exp.predict(preds)\n\npreds.shape\n\n# (154, 19)\n\nensemble_1 = preds.iloc[:, 1::2]\nensemble_2 = preds.iloc[:, ::2]\n\ndef disagreement_matrix(preds):\n    res = np.zeros((preds.shape[1], preds.shape[1]))\n    for i in range(preds.shape[1]):\n        for j in range(i, preds.shape[1]):\n            res[i, j] = disagreement(preds, i, j)\n            res[j, i] = res[i, j]\n    return res\n\nsns.heatmap(d, annot=True, cmap='coolwarm', vmin=0, vmax=1, cbar = False)\n```", "```py\npreds_voting = preds.mode(axis=1)[0]\nprint(f'F1 score for {model}: {f1_score(preds_voting, y_test, average=\"macro\"):.3f})\n```"]