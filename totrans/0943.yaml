- en: Transitioning from ETL to ELT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/from-etl-to-elt-908ce414e39e](https://towardsdatascience.com/from-etl-to-elt-908ce414e39e)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How cloud computing and analytics engineering forced the transition from ETL
    to ELT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://gmyrianthous.medium.com/?source=post_page-----908ce414e39e--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----908ce414e39e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----908ce414e39e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----908ce414e39e--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----908ce414e39e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----908ce414e39e--------------------------------)
    ·7 min read·Dec 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0ac0bf0fce07c34df7fbef6780fafd48.png)'
  prefs: []
  type: TYPE_IMG
- en: Image generated via [DALL-E](https://labs.openai.com/s/R6GmBJ0EmCXudKsPuIGJBBjC)
  prefs: []
  type: TYPE_NORMAL
- en: ETL (Extract-Transform-Load) and ELT (Extract-Load-Transform) are two terms
    commonly used in the realm of Data Engineering and more specifically in the context
    of data ingestion and transformation.
  prefs: []
  type: TYPE_NORMAL
- en: While these terms are often used interchangeably, they refer to slightly different
    concepts and have different implications for the design of a data pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we will clarify the definitions of ETL and ELT processes, outline
    the differences between the two, and discuss the advantages and disadvantages
    both have to offer to engineers and data teams in general.
  prefs: []
  type: TYPE_NORMAL
- en: And most importantly, I am going to describe how the recent changes in modern
    data teams’ formation has impacted the landscape around ETL vs ELT battle.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Extract, Load and Transform independently
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main stake when it comes to comparing ETL and ELT is obviously the sequence
    the Extract, Load and Transform steps are executed within a data pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: For now, let’s ignore this execution sequence and let’s focus on the actual
    terminology and discuss about what each individual step is supposed to do.
  prefs: []
  type: TYPE_NORMAL
- en: '**Extract**: This step refers to the process of pulling data from a persistent
    source. This data source could be a database, an API endpoint, a file or really
    anything that contains any form of data, including both structured or unstructured.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0597c90624f0c4ce980c643cd446760e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Extract step pulls data from various sources — Source: Author'
  prefs: []
  type: TYPE_NORMAL
- en: '**Transform**: In this step, the pipeline is expected to perform some changes
    in the structure or format of the data in order to achieve a certain goal. A transformation
    could be an attribute selection, a modification of records (e.g. transform `''United
    Kingdom''` into `''UK''`), a data validation, a join to another source or really
    anything that changes the format of the input raw data.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/372d7612ff232255970411d5221e2bb2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The transformation steps performs a number of transformation into the input
    raw data — Source: Author'
  prefs: []
  type: TYPE_NORMAL
- en: '**Load**: The load step refers to the process of copying the data (either the
    raw or the transformed version) into the target system. Usually, the target system
    is a Data Warehouse (i.e. an OLAP system used for analytics purposes) or an application
    database (i.e. an OLTP system).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49ac9c6dacc34330fd0d1c0eeccb603c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Loading data into the destination system — Source: Author'
  prefs: []
  type: TYPE_NORMAL
- en: Unavoidably, the sequence we execute these three steps matters. And with the
    increasing volumes of data that need to be handled, the order of execution **matters
    a lot**. Let’s discuss why!
  prefs: []
  type: TYPE_NORMAL
- en: Extract Transform Load (ETL)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ETL stands for Extract-Transform-Load and the term itself refers to a process
    where the data extraction step is followed by the transformation step and ends
    with the load step.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f5e35d6364d32efa0dff5a7e34001419.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Extract > Transform > Load — Source: Author'
  prefs: []
  type: TYPE_NORMAL
- en: The **data transformation step in ETL processes occurs in a staging environment
    outside of the target system**, where the data is transformed just before it gets
    loaded to the destination.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/59d25d822800782094142b9f125ba6d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In ETL, the transformation step happens in a staging environment/server and
    the transformed data is then loaded into the destination system — Source: Author'
  prefs: []
  type: TYPE_NORMAL
- en: Extract Load Transform (ELT)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the other hand, ELT, that stands for Extract-Load-Transform, refers to a
    process where the extraction step is followed by the load step and the final data
    transformation step happens at the very end.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/012425c87835bf10111dfb931e89b6c8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Extract > Load > Transform — Source: Author'
  prefs: []
  type: TYPE_NORMAL
- en: In contrast to ETL, in ELT no staging environment/server is required since data
    transformation is performed within the destination system, which is usually a
    Data Warehouse or Data Lake hosted on the Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/08acc1825c942f4402581f1d379bc0a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In ELT, the transformation step occurs within the destination system — Source:
    Author'
  prefs: []
  type: TYPE_NORMAL
- en: How to choose between ETL and ELT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ETL and ELT come with their pros and cons, and the chances are you will come
    across both in your day-to-day work given that they are typically used for different
    use-cases.
  prefs: []
  type: TYPE_NORMAL
- en: '**ETL** is best suited in use cases where data resides on-premises and needs
    to be structured before loading them into the target database or warehouse. Therefore,
    the ETL process is usually preferred when smaller amounts of data are involved
    in the process and/or when complex transformations are about to be performed.'
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, since ETL transforms the data before the load step, sensitive data
    can be masked, encrypted or completely removed before it’s loaded. This aspect
    of ETL can help companies and teams enforce and implement compliance to various
    regulations (e.g. GDPR) more easily.
  prefs: []
  type: TYPE_NORMAL
- en: Since the transformation happens in an intermediate (staging) server, there’s
    an overhead for moving the transformed data into the target system. In addition,
    the target system won’t contain the raw data (i.e. the data in the form prior
    to the transformation). This means that whenever additional transformations are
    required, we would have to pull the raw data once again.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, **ELT** provides more flexibility over ETL given that the
    latter was historically intended for structured (relational) data. Modern cloud
    architectures and warehouses enabled ELT for both structured and unstructured
    data.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned earlier, ETL should be used for small volumes of data. ELT offers
    faster transformation since it is not dependent on the data size and is usually
    performed on an as-needed basis.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, when the data is loaded before the transformation as part of an
    ELT process, it means that users and systems still have access to the raw data.
    This means that if more transformations are required at a later stage, we already
    have the raw data within the Data Warehouse that can be accessed any time. The
    only downside would be the additional storage required to store this raw data,
    but given the constantly decreasing storage cost I don’t think this is a major
    issue, anyway.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we all have a good understanding regarding the technical implications
    of both ETL and ELT processes, let me question something. When it comes to choosing
    one over the other, is it just a matter of technical implementation?
  prefs: []
  type: TYPE_NORMAL
- en: It’s not just about when to perform a Transformation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition, the data realm has been constantly evolving and moving forward
    and the data roles are no exception to this fast-paced environment. **ETL vs ELT
    is not just about where the transformation step occurs — it’s (also) about who
    is supposed to perform them**.
  prefs: []
  type: TYPE_NORMAL
- en: A transformation step, usually involves some sort of **business logic**. Traditional
    ETL processes were used to be executed by Data Warehouse Engineers (not sure if
    this is still a thing to be honest) which means these people were in charge of
    crafting business logic, too.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, ELT processes evolved due to the nature and landscape of
    modern data teams and their formation. The EL (Extract-Load) steps are usually
    performed by Data Engineers whereas the Transformation step is executed by the
    — so called — Analytics Engineers.
  prefs: []
  type: TYPE_NORMAL
- en: And it makes so much sense to me. A Data Engineer is a purely technical guy
    who is concerned about efficiency, scalability, readiness and availability (among
    another million of things). On the other hand, an Analytics Engineer is still
    a technical person with much better business understanding. And therefore it makes
    more sense for the Analytics Engineer to be responsible for transforming the data,
    given that (usually) transformation corresponds to business value.
  prefs: []
  type: TYPE_NORMAL
- en: Modern cloud architectures, data stacks (including cloud-based OLAP systems)
    and team formations have made ELT processes more relevant and effective. From
    my personal experience, I would say there’s an undergoing shift from ETL to ELT
    despite the fact that ETL is still relevant and useful.
  prefs: []
  type: TYPE_NORMAL
- en: Modern data stacks and teams favour ELT processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While ETL is not dead, in my opinion, modern data stacks and technologies favour
    ELT processes. As an example, let’s consider dbt (data build tool), which is one
    of the hottest additions in the data realm and it has become the de-facto transformational
    tool for analysts and engineers.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, we would want to bring into the Data Warehouse the raw data (i.e. without
    applying any sort of transformation) from external or internal data sources. Then
    on top of these data models (in dbt we usually call them staging models) we build
    additional models (intermediate and mart) which are the result of some transformational
    processes that occur within the Data Warehouse.
  prefs: []
  type: TYPE_NORMAL
- en: In such workflows, it therefore makes more sense to load the data into the Warehouse
    before transforming it. This also enables the access to the raw data at any given
    time so that future use-cases can be supported.
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in gaining a deeper understanding around how dbt works
    and how the different components come together in order to transform raw data
    and build meaningful data models to support decision-making, I would recommend
    the following article.
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Designing data pipelines is a challenging task and when doing so, many factors
    need to be carefully taken into account. When it comes ingesting data from data
    sources into a Data Warehouse, there are typically two approaches you can take.
  prefs: []
  type: TYPE_NORMAL
- en: In this article we discussed how ETL and ELT perform a sequence of steps in
    order to transform and load (or load and transform) data into a destination system.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the landscape of the organisation and the specific use-case you
    may want to choose one over the other. I hope this tutorial has provided all the
    details you need in order to choose the best and most effective approach when
    it comes to ingesting and transforming data
  prefs: []
  type: TYPE_NORMAL
