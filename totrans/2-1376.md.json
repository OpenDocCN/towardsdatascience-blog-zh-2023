["```py\n# docker-compose.yml\n\nversion: \"3.9\"\n\nservices:\n  postgres:\n    container_name: postgres\n    image: postgres:15.2-alpine\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n    ports:\n      - 5432\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n  dbt:\n    container_name: dbt\n    build: .\n    image: dbt-jaffle-shop\n    volumes:\n      - ./:/usr/src/dbt\n    depends_on:\n      postgres:\n        condition: service_healthy\n```", "```py\n# Dockerfile\n\nFROM --platform=linux/amd64 python:3.10-slim-buster\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends\n\nWORKDIR /usr/src/dbt\n\n# Install the dbt Postgres adapter. This step will also install dbt-core\nRUN pip install --upgrade pip\nRUN pip install dbt-postgres==1.2.0\nRUN pip install pytz\n\n# Install dbt dependencies (as specified in packages.yml file)\n# Build seeds, models and snapshots (and run tests wherever applicable)\nCMD dbt deps && dbt build --profiles-dir ./profiles && sleep infinity\n```", "```py\n# dbt_project.yml\n\nname: 'jaffle_shop'\n\nconfig-version: 2\nversion: '0.1'\n\nprofile: 'jaffle_shop'\n\nmodel-paths: [\"models\"]\nseed-paths: [\"seeds\"]\ntest-paths: [\"tests\"]\nanalysis-paths: [\"analysis\"]\nmacro-paths: [\"macros\"]\n\ntarget-path: \"target\"\nclean-targets:\n    - \"target\"\n    - \"dbt_modules\"\n    - \"logs\"\n\nrequire-dbt-version: [\">=1.0.0\", \"<2.0.0\"]\n\nmodels:\n  jaffle_shop:\n      materialized: table\n      staging:\n        materialized: view\n```", "```py\n# profiles.yml\n\njaffle_shop:\n  target: dev\n  outputs:\n    dev:\n      type: postgres\n      host: postgres\n      user: postgres\n      password: postgres\n      port: 5432\n      dbname: postgres\n      schema: public\n      threads: 1\n```", "```py\nwith customers as (\n\n    select * from {{ ref('stg_customers') }}\n\n),\n\norders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\ncustomer_orders as (\n\n        select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by customer_id\n\n),\n\ncustomer_payments as (\n\n    select\n        orders.customer_id,\n        sum(amount) as total_amount\n\n    from payments\n\n    left join orders on\n         payments.order_id = orders.order_id\n\n    group by orders.customer_id\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value\n\n    from customers\n\n    left join customer_orders\n        on customers.customer_id = customer_orders.customer_id\n\n    left join customer_payments\n        on  customers.customer_id = customer_payments.customer_id\n\n)\n\nselect * from final\n```", "```py\n$ docker-compose build\n$ docker-compose up\n```", "```py\n$ docker ps\n```", "```py\n$ docker exec -it <container-id> /bin/bash\n```", "```py\n# Install dbt deps (might not required as long as you have no -or empty- `dbt_packages.yml` file)\ndbt deps\n\n# Build seeds\ndbt seeds --profiles-dir profiles\n\n# Build data models\ndbt run --profiles-dir profiles\n\n# Build snapshots\ndbt snapshot --profiles-dir profiles\n\n# Run tests\ndbt test --profiles-dir profiles\n```", "```py\n# Get the container id for `postgres` service\n$ docker ps\n\n# Then copy the container id to the following command to enter the \n# running container\n$ docker exec -it <container-id> /bin/bash\n```", "```py\n$ psql -U postgres\n```", "```py\npostgres=# \\dt\n             List of relations\n Schema |     Name      | Type  |  Owner   \n--------+---------------+-------+----------\n public | customers     | table | postgres\n public | orders        | table | postgres\n public | raw_customers | table | postgres\n public | raw_orders    | table | postgres\n public | raw_payments  | table | postgres\n(5 rows)\n\npostgres=# \\dv\n            List of relations\n Schema |     Name      | Type |  Owner   \n--------+---------------+------+----------\n public | stg_customers | view | postgres\n public | stg_orders    | view | postgres\n public | stg_payments  | view | postgres\n(3 rows)\n```", "```py\nSELECT * FROM <table_or_view_name>;\n```"]