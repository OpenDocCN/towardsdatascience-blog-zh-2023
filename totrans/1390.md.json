["```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# import the dataset from sklearn\nbreast_cancer = load_breast_cancer()\n\n# we create a variable \"data\" which contains the dataframe from the dataset\ndata = pd.DataFrame(data=breast_cancer['data'], columns=breast_cancer['feature_names'])\ndata['target'] = pd.Series(breast_cancer['target'], dtype='category')\n```", "```py\n def plot_regularization(df, reg_type='l1'):\n # we split our data into training and testing\n    X = df.drop('target', axis=1)\n    y = df['target']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n # we define the different values of C\n    Cs = [0.001, 0.01, 0.1, 1, 10, 100, 1000]\n    coefs = []\n    test_scores = []\n    train_scores = []\n    for C in Cs:\n     # we train the model for the different values of C\n        clf = LogisticRegression(penalty=reg_type, C=C, solver='liblinear')\n        clf.fit(X_train, y_train)\n        # we save the performances\n        coefs.append(clf.coef_.ravel())\n        train_scores.append(clf.score(X_train, y_train))\n        test_scores.append(clf.score(X_test, y_test))\n\n    reg = reg_type.capitalize()\n\n    # and create some charts\n    fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12, 4))\n    ax1.plot(Cs, train_scores, 'b-o', label='Training Set')\n    ax1.plot(Cs, test_scores, 'r-o', label='Test Set')\n    plt.suptitle(f'{reg} regularization')\n    ax1.set_xlabel('C')\n    ax1.set_ylabel('Accuracy')\n    ax1.set_xscale('log')\n    ax1.set_title('Performance')\n    ax1.legend()\n\n    coefs = np.array(coefs)\n    n_params = coefs.shape[1]\n    for i in range(n_params):\n        ax2.plot(Cs, coefs[:, i], label=X.columns[i])\n    ax2.axhline(y=0, linestyle='--', color='black', linewidth=2)\n    ax2.set_xlabel('C')\n    ax2.set_ylabel('Coefficient values')\n    ax2.set_xscale('log')\n    ax2.set_title('Coefficients')\n    plt.show()\n```", "```py\nplot_regularization(data, 'l1')\n```", "```py\nplot_regularization(data, 'l2')\n```"]