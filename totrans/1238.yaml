- en: How to show a result when there is no data in Power BI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-show-a-result-when-there-is-no-data-in-power-bi-bb1f6a86dbdf](https://towardsdatascience.com/how-to-show-a-result-when-there-is-no-data-in-power-bi-bb1f6a86dbdf)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*This title seems counterintuitive. Why should I ask for a result when there
    is no data? Go ahead to find out the client’s request and how I solved it.*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@salvatorecagliari?source=post_page-----bb1f6a86dbdf--------------------------------)[![Salvatore
    Cagliari](../Images/a24b0cefab6e707cfee06cde9e857559.png)](https://medium.com/@salvatorecagliari?source=post_page-----bb1f6a86dbdf--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bb1f6a86dbdf--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bb1f6a86dbdf--------------------------------)
    [Salvatore Cagliari](https://medium.com/@salvatorecagliari?source=post_page-----bb1f6a86dbdf--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bb1f6a86dbdf--------------------------------)
    ·9 min read·Jan 5, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0a11a590227f8428e4480b4174093434.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Emily Morter](https://unsplash.com/@emilymorter?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of my clients has a Dataset, which consists of Tasks, Subtasks a Measure
    for each task.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, each task has a Status.
  prefs: []
  type: TYPE_NORMAL
- en: 'These States are:'
  prefs: []
  type: TYPE_NORMAL
- en: Done
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Progress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pending
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cancelled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Failed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After importing the data into Power BI, the result looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a52ffabefcdfcfaf9d20e6c543bbcdb5.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1 — First result (Figure from the Author)
  prefs: []
  type: TYPE_NORMAL
- en: But, sometimes, there are no Tasks or Subtasks for a specific Status.
  prefs: []
  type: TYPE_NORMAL
- en: 'In such a case, the result could look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5d5290eff3f4371c087e9e5270f87c45.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2 — Result with missing Status (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'The client had the following two requests:'
  prefs: []
  type: TYPE_NORMAL
- en: Whenever there is no result (Blank), he wants to see a zero
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: He always wants to see all States, including those without Tasks and with zero
    as a result
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Easy, isn’t it?
  prefs: []
  type: TYPE_NORMAL
- en: Well, let’s see.
  prefs: []
  type: TYPE_NORMAL
- en: The first try
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first approach was to write a Measure like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can imagine, the result wasn’t what I expected. If this were the case,
    I wouldn’t sit here and write an article about it.
  prefs: []
  type: TYPE_NORMAL
- en: The result was the same.
  prefs: []
  type: TYPE_NORMAL
- en: Why?
  prefs: []
  type: TYPE_NORMAL
- en: 'To find this out, I changed the Measure to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, I can see what happens when the *Costs* variable is checked with the [ISBLANK()](https://dax.guide/isblank/)
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result was this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0025ffa909606acdb8ea3f1c32d4e547.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3 — Result with ISBLANK() (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: At first sight, that was strange.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then I understood it: When there are no rows in the table, there is no Filter
    context. Thus, the Measure isn’t evaluated, and we don’t see any result.'
  prefs: []
  type: TYPE_NORMAL
- en: To solve this, I understood that I have to fill the data gaps to use the Measure
    shown above and get a zero when the Measure returns NULL.
  prefs: []
  type: TYPE_NORMAL
- en: Preparations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To show this case, I created two tables in Excel and imported them into Power
    BI Desktop:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Demo Data: Contains rows for all States (The table shown above comes from this
    data)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Demo Data 2: Same Data as Demo Data, but the Rows are redistributed, and no
    row has the Status Failed'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To solve this challenge, I addressed the first Requirement with the table Demo
    Data.
  prefs: []
  type: TYPE_NORMAL
- en: After this, I used the Demo Data 2 table to fulfill the second Requirement.
  prefs: []
  type: TYPE_NORMAL
- en: Fill gaps with Power Query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To fill the gaps, I need to have one row for each Task and Step and each possible
    Status.
  prefs: []
  type: TYPE_NORMAL
- en: 'This time I decided to do it in Power Query to follow the following Rule ([Roche’s
    Maxim](https://ssbipolar.com/2021/05/31/roches-maxim/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '*Transform the data as early as possible and as late as necessary*'
  prefs: []
  type: TYPE_NORMAL
- en: I cannot do it in the source, as this would mean changing the source data, which
    is not feasible, and I want to automate the transformation process.
  prefs: []
  type: TYPE_NORMAL
- en: For these reasons, Power Query is a natural choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'The needed steps are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Extract a list of all possible States
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract a list of all Tasks and Steps without the columns with the Value column
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Multiply the list of States with the list of Tasks and Steps (Cross-Join)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Append the resulting list to the original table
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'OK, let’s go:'
  prefs: []
  type: TYPE_NORMAL
- en: 'I started the Power Query Editor and created two Duplicates of the Demo Data
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f017df9601468c633efcca79a7d15ed3.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4 — Duplicate the Demo Data table (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: I rename one table to Status and one to Tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, I remove all unneeded columns from these tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/daa935706982610ab6b179674e18dc4c.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5 — Remove columns to keep the needed columns (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: In the Tasks, I keep only the Task Name and Step column.
  prefs: []
  type: TYPE_NORMAL
- en: In your case, you must retain all the columns that define the unique combinations
    of your table. In my client’s case, I have to keep the name of the Task/Subtask
    owner and other columns.
  prefs: []
  type: TYPE_NORMAL
- en: In the Status table, I keep the Status and the Status order column.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a list of unique rows, I remove the Duplicates from both tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/05af3e824ebc530770b2eac403868f88.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6 — Remove the Duplicates (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'To multiply the rows in the Tasks table with all Status, I add a custom column
    to the Tasks table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/783bb014b79990b99d15b8b447b9937b.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7 — Add Status column (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, I must expand the new column to add the two columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cbfda302e87207cf44d1b6c618ddb500.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8 — Expand the Status columns (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting table looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d30faedc64065c968b426ba9710953a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9 — Result after expanding the Status table (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'I explained this technique more in detail in this article:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/the-techlife/use-power-bi-to-transpose-yearly-numbers-to-months-d538bcb7b9c2?source=post_page-----bb1f6a86dbdf--------------------------------)
    [## Use Power BI to transpose yearly numbers to months'
  prefs: []
  type: TYPE_NORMAL
- en: When you have annual numbers, you may need to transpose them to monthly numbers.
    Now, I will show you how to use Power…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/the-techlife/use-power-bi-to-transpose-yearly-numbers-to-months-d538bcb7b9c2?source=post_page-----bb1f6a86dbdf--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Before appending this table to the Demo Data table, I have to add the missing
    Cost columns with NULL as a value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3b3ec2922cf59d66218fbd00867dc647.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10 — Add Costs columns (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: I must keep NULL for the new Cost column to avoid wrong results if we need to
    calculate the Average or any other statistical data from this column.
  prefs: []
  type: TYPE_NORMAL
- en: The resulting table has the same structure as the Demo Data table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now I can Append this table to the Demo Data table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/39d93ef3d87bd6f021d1d592a5e6ea53.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11 — Append Task table (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting table looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7877cce161ebe857925050d7e3895964.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12 — Demo Data table with Appended data (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'As you might notice, the Costs column has the wrong data type. I must change
    the Data type to a numeric value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/765a95976a4e02e490ad82eece6c57f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13 — Convert the Costs column to numeric (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, as I don’t need the Tasks and Status table in Power BI, I Disable the
    Load for these two tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/692fd30bbd2a686514c4343507c5c0c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14 — Disable Load for the two added tables (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: During this process, you might have asked yourself, “Why didn’t he create a
    Reference to the Demo Data table?”.
  prefs: []
  type: TYPE_NORMAL
- en: Well, I would not have been able to Append the Referenced table to the table,
    which is the source of the referenced table. This would create a circular dependency,
    which is not allowed. For this reason, I had to Duplicate the table.
  prefs: []
  type: TYPE_NORMAL
- en: 'After closing Power Query Editor and loading the data, I got the following
    result with the Measure mentioned above:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/554cb10a67bd250cbdd6b08a5d8d1a4d.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15 — Result with zeroes instead of blank cells (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: Now, the first requirement is fulfilled.
  prefs: []
  type: TYPE_NORMAL
- en: Add missing the Status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When I repeat all steps above with the missing rows for the Status “Failed,”
    I get the following result in the Status table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f8f082473b49e382c354c4f3bd5905a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16 — Status table with missing Failed Status (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'To solve this problem, I must add a manual table with all possible Status (Enter
    Data button):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2338ab01a1e9514a27abb8dac1c5d735.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17 — Create a manual Status table (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to append this manual table to the Status table and remove
    all Duplicates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d036e2dd9cd07305384e01eae9cb693c.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18 — Complete Status table with all known States (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: But why do I need to append the manual table to the existing Status table?
  prefs: []
  type: TYPE_NORMAL
- en: I do this in case we get a new Status. Then the data will still be complete.
  prefs: []
  type: TYPE_NORMAL
- en: I only need to add the new Status to the manual table.
  prefs: []
  type: TYPE_NORMAL
- en: The alternative to the manual table is an Excel Sheet file with all possible
    states. Then you don’t need to change the Power BI file every time a new Status
    is added or changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'All remaining steps remain the same, and the result looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/005b109dbb8af1a6aee71bb5af9f0ff0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19 — Result with all States filled with zeroes (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: This step fulfills the second Requirement.
  prefs: []
  type: TYPE_NORMAL
- en: Size of the modified Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might think, “But this way, we enlarge our table with many rows?”.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, that’s true.
  prefs: []
  type: TYPE_NORMAL
- en: 'But, as stated at the beginning: When no data exists, no Filter context exists,
    and no Measure is evaluated.'
  prefs: []
  type: TYPE_NORMAL
- en: So, we must add these rows to our data.
  prefs: []
  type: TYPE_NORMAL
- en: But what are the consequences?
  prefs: []
  type: TYPE_NORMAL
- en: I extracted the Metrics of both the original Data Model and the expanded one
    with DAX Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dbd0f136b7a16407dfa7b2187f34d6e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20 — Metrics compared from both Data Models (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: First, look at the Cardinality column for each table.
  prefs: []
  type: TYPE_NORMAL
- en: We know that the original tables had only 27 Rows. The expanded tables have
    162 Rows.
  prefs: []
  type: TYPE_NORMAL
- en: This growth is massive.
  prefs: []
  type: TYPE_NORMAL
- en: But when we look at the Total Size column, the differences are marginal.
  prefs: []
  type: TYPE_NORMAL
- en: The Data size is more than doubled, but the Dictionary has the same size. Why?
  prefs: []
  type: TYPE_NORMAL
- en: The Dictionary stores the information about all Text columns. The more Text
    we have, the larger the dictionary is.
  prefs: []
  type: TYPE_NORMAL
- en: Cardinality is the crucial metric (The number of distinct values in a column).
  prefs: []
  type: TYPE_NORMAL
- en: Because this Metric doesn’t change between both Versions, the Dictionary doesn’t
    need more space even though the Data needs more Space.
  prefs: []
  type: TYPE_NORMAL
- en: This might be different with your data with a higher Cardinality. But I’m sure
    that the Dictionary takes up much of the space.
  prefs: []
  type: TYPE_NORMAL
- en: The difference might still be slight.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following Metrics of some Dimension tables from the ContosoRetail
    Data Model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9dff71ab49ad918b8e4dcd588382f2d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21 — Metrics from ContosoRetail Data Model (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the Dictionary is always much larger than the Data.
  prefs: []
  type: TYPE_NORMAL
- en: As the Dictionary stores an encoded list of all the distinct string values for
    each column, it grows with the number of distinct values (Higher Cardinality).
    But it stays relatively stable as long the cardinality remains the same even when
    the number of rows in the table rises.
  prefs: []
  type: TYPE_NORMAL
- en: DAX vs. Power Query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: But why we don’t do this with DAX?
  prefs: []
  type: TYPE_NORMAL
- en: Yes, we could solve the requirements above with DAX tables as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'But there are some arguments against such an approach:'
  prefs: []
  type: TYPE_NORMAL
- en: No unnecessary tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can Disable the Load into Power BI in Power Query. This way, we avoid having
    unnecessary tables in our Data Model using memory without any benefit
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Easier to implement:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s much easier to do it in Power Query than using DAX tables
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Potential better Data compression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I need to dig a little deeper into the last one:'
  prefs: []
  type: TYPE_NORMAL
- en: Whenever Power BI loads data into a Data Model, the engine performs extensive
    data analysis and Profiling and optimizes the data to achieve the best compression
    rates.
  prefs: []
  type: TYPE_NORMAL
- en: In the References Section, I added a Video with Marco Russo (SQLBI) on optimizing
    a Tabular model, where he explains the optimization steps performed by the Engine
    during a Data Refresh.
  prefs: []
  type: TYPE_NORMAL
- en: As the Power BI engine gets the data from Power Query, it cannot distinguish
    the origin of the data. It performs all possible optimization to get the most
    efficient data storage even when the data is generated in Power Query.
  prefs: []
  type: TYPE_NORMAL
- en: But, in the worst case, it is possible that a calculated table in Power BI cannot
    be optimized in the same way as a table from Power Query.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We all know it is essential to choose the right tool at the right time.
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen here, it is even more critical when choosing between a solution
    with DAX or with Power Query.
  prefs: []
  type: TYPE_NORMAL
- en: When transforming or modifying your data, Power Query is the right tool if you
    cannot do it in your Data Source, for example, with a Query on a Database.
  prefs: []
  type: TYPE_NORMAL
- en: And with all the tools available through the GUI, it is even easier to implement
    complex solutions.
  prefs: []
  type: TYPE_NORMAL
- en: So, there is no reason not to start learning Power Query and its possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1a88c076b44c7c04f08b8de8d0a8b696.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Guille Álvarez](https://unsplash.com/@guillealvarez?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Guy in a Cube video about Roche’s Maxim of Data Transformation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'YouTube Video with Marco Russo explaining how to optimize a Tabular Data Model:'
  prefs: []
  type: TYPE_NORMAL
- en: The dataset is fictional and created from scratch in Excel.
  prefs: []
  type: TYPE_NORMAL
- en: I use the Contoso sample dataset, like in my previous articles. You can download
    the ContosoRetailDW Dataset for free from Microsoft [here](https://www.microsoft.com/en-us/download/details.aspx?id=18279).
  prefs: []
  type: TYPE_NORMAL
- en: The Contoso Data can be freely used under the MIT License, as described [here](https://github.com/microsoft/Power-BI-Embedded-Contoso-Sales-Demo).
  prefs: []
  type: TYPE_NORMAL
- en: I enlarged the dataset to make the DAX engine work harder.
  prefs: []
  type: TYPE_NORMAL
- en: The Online Sales table contains 71 million rows (instead of 12.6 million rows),
    and the Retail Sales table contains 18.5 million rows (instead of 3.4 million
    rows).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@salvatorecagliari/membership?source=post_page-----bb1f6a86dbdf--------------------------------)
    [## Join Medium with my referral link - Salvatore Cagliari'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Salvatore Cagliari (and thousands of other writers on
    Medium). Your membership fee directly…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@salvatorecagliari/membership?source=post_page-----bb1f6a86dbdf--------------------------------)
  prefs: []
  type: TYPE_NORMAL
