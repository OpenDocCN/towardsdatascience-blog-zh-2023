["```py\nCascading-ETL-pipeline\n├── LICENSE\n├── README.md\n├── branches\n│   ├── Pipfile\n│   ├── Pipfile.lock\n│   ├── lambda_function.py\n│   ├── requirements.txt\n│   └── service\n│       ├── config.py\n│       └── service.py\n├── sales\n│   ├── Pipfile\n│   ├── Pipfile.lock\n│   ├── lambda_function.py\n│   ├── requirements.txt\n│   └── service\n│       ├── config.py\n│       └── service.py\n├── salespersons\n│   ├── Pipfile\n│   ├── Pipfile.lock\n│   ├── lambda_function.py\n│   ├── requirements.txt\n│   └── service\n│       ├── config.py\n│       └── service.py\n├── templates\n│   ├── BranchCollector.yml\n│   ├── SaleCollector.yml\n│   ├── SalespersonCollector.yml\n│   ├── iam.yml\n│   ├── queues.yml\n│   └── tables.yml\n├── template.yml\n└── utils.py\n```", "```py\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: 'AWS::Serverless-2016-10-31'\nParameters:  #   Type: String\n  Environment:\n    Type: String\nResources:\n  BranchDynamoDBTable: \n    Type: AWS::DynamoDB::Table\n    DeletionPolicy: Delete\n    Properties:\n      BillingMode: PAY_PER_REQUEST \n      AttributeDefinitions: \n        - \n          AttributeName: \"branch_id\"\n          AttributeType: \"S\"\n      KeySchema: \n        - \n          AttributeName: \"branch_id\"\n          KeyType: \"HASH\"\n      StreamSpecification:\n        StreamViewType: NEW_IMAGE\n      TableName: !Sub branch-${Environment}\n\n  SalespersonDynamoDBTable: \n    Type: AWS::DynamoDB::Table\n    DeletionPolicy: Delete\n    Properties:\n      BillingMode: PAY_PER_REQUEST \n      AttributeDefinitions: \n        - \n          AttributeName: \"employee_id\"\n          AttributeType: \"S\"\n        - \n          AttributeName: \"branch_id\"\n          AttributeType: \"S\"\n      KeySchema: \n        - \n          AttributeName: \"employee_id\"\n          KeyType: \"HASH\"\n        - \n          AttributeName: \"branch_id\"\n          KeyType: \"RANGE\"\n      StreamSpecification:\n        StreamViewType: NEW_IMAGE\n      TableName: !Sub salesperson-${Environment}\n\n  SaleDynamoDBTable:\n    Type: AWS::DynamoDB::Table\n    DeletionPolicy: Delete\n    Properties:\n      BillingMode: PAY_PER_REQUEST \n      AttributeDefinitions: \n        - \n          AttributeName: \"sale_id\"\n          AttributeType: \"S\"\n        - \n          AttributeName: \"employee_id\"\n          AttributeType: \"S\"\n      KeySchema: \n        - \n          AttributeName: \"sale_id\"\n          KeyType: \"HASH\"\n        - \n          AttributeName: \"employee_id\"\n          KeyType: \"RANGE\"\n      StreamSpecification:\n        StreamViewType: NEW_IMAGE\n      TableName: !Sub sale-${Environment}\n```", "```py\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: 'AWS::Serverless-2016-10-31'\nParameters:  #   Type: String\n  Environment:\n    Type: String\nResources:\n  LambdaRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub '${Environment}-lambda-role'\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n            - lambda.amazonaws.com\n            - events.amazonaws.com\n          Action:\n          - sts:AssumeRole\n      ManagedPolicyArns:\n      - arn:aws:iam::aws:policy/AWSLambdaExecute\n      - arn:aws:iam::aws:policy/AmazonSQSFullAccess\n      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess\n      Path: '/'\n  LambdaPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: !Sub '${AWS::StackName}-${Environment}-lambda-policy'\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n        - Sid: EventBusAccess\n          Effect: Allow\n          Action:\n          - events:PutEvents\n          Resource: '*'\n        - Sid: LambdaInvokeAccess\n          Effect: Allow\n          Action:\n          - lambda:InvokeFunction\n          Resource: \"*\"\n        - Sid: LogAccess\n          Effect: Allow\n          Action:\n          - logs:CreateLogGroup\n          - logs:CreateLogStream\n          - logs:PutLogEvents\n          Resource: arn:aws:logs:*:*:*\n      Roles:\n      - !Ref LambdaRole\n\nOutputs:\n  Role:\n    Description: The role to be used across the stacks\n    Value: !GetAtt LambdaRole.Arn\n    Export:\n      Name: !Sub ${Environment}-Role\n```", "```py\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: 'AWS::Serverless-2016-10-31'\nParameters:  #   Type: String\n  Environment:\n    Type: String\nResources:\n  EmployeeQueue:\n    Type: AWS::SQS::Queue\n    Properties:\n      QueueName: !Sub employee-queue-${Environment}\n      VisibilityTimeout: 900\n      RedrivePolicy:\n        deadLetterTargetArn: \n          Fn::GetAtt: EmployeeWorkloadDeadLetterQueue.Arn\n        maxReceiveCount: 10\n\n  EmployeeWorkloadDeadLetterQueue: \n    Type: AWS::SQS::Queue\n    Properties:\n      QueueName: !Sub employee-workload-dead-letter-queue-${Environment}\n      MessageRetentionPeriod: 1209600\n\n  SaleQueue:\n    Type: AWS::SQS::Queue\n    Properties:\n      QueueName: !Sub sale-queue-${Environment}\n      VisibilityTimeout: 900\n      RedrivePolicy:\n        deadLetterTargetArn: \n          Fn::GetAtt: SaleWorkloadDeadLetterQueue.Arn\n        maxReceiveCount: 10\n\n  SaleWorkloadDeadLetterQueue: \n    Type: AWS::SQS::Queue\n    Properties:\n      QueueName: !Sub sale-workload-dead-letter-queue-${Environment}\n      MessageRetentionPeriod: 1209600\n\nOutputs:\n  EmployeeQueue:\n    Description: The SQS queue that delivers the payloads from branch collector to salesperson collector\n    Value: !Ref EmployeeQueue\n    Export:\n      Name: !Sub ${Environment}-EmployeeQueue\n  SaleQueue:\n    Description: The SQS queue that delivers the payloads from salesperson collector to sale collector\n    Value: !Ref SaleQueue\n    Export:\n      Name: !Sub ${Environment}-SaleQueue\n```", "```py\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: 'AWS::Serverless-2016-10-31'\nParameters:  #   Type: String\n  Environment:\n    Type: String\nResources:\n  BranchCollector:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName: !Sub branch-collector-${Environment}\n      Handler: lambda_function.lambda_handler\n      Runtime: python3.8\n      CodeUri: ./../branches/\n      Description: updating branch info in our DynamoDB table\n      MemorySize: 128\n      Timeout: 900\n      Role: \n        Fn::ImportValue:\n          !Sub ${Environment}-Role\n      Environment:\n        Variables:\n          LOGGING_LEVEL: INFO\n          APP_ENV: !Ref Environment\n          SQS: \n            Fn::ImportValue:\n              !Sub ${Environment}-EmployeeQueue\n          DB: !Sub branches-${Environment}\n      DeadLetterQueue:\n        Type: SQS\n        TargetArn: \n          Fn::GetAtt: BranchFunctionDeadLetterQueue.Arn\n      Events:\n        StartScheduledEvent:\n          Type: Schedule\n          Properties:\n            Schedule: rate(1 hour)\n\n  # dead letter queue\n  BranchFunctionDeadLetterQueue: \n    Type: AWS::SQS::Queue\n    Properties:\n      QueueName: !Sub branch-function-dead-letter-queue-${Environment}\n      MessageRetentionPeriod: 1209600\n\n  # alarms\n  BranchErrorAlarm:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      ComparisonOperator: GreaterThanOrEqualToThreshold\n      Dimensions:\n        - Name: FunctionName\n          Value: !Ref BranchCollector\n      EvaluationPeriods: 1\n      MetricName: Errors\n      Namespace: AWS/Lambda\n      Period: 300\n      Statistic: Sum\n      Threshold: 1\n      AlarmActions: \n        - arn:aws:sns:us-east-1:{id}:{alarm-name}\n  BranchDurationAlarm:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      ComparisonOperator: GreaterThanOrEqualToThreshold\n      Dimensions:\n        - Name: FunctionName\n          Value: !Ref BranchCollector\n      EvaluationPeriods: 1\n      MetricName: Duration\n      Namespace: AWS/Lambda\n      Period: 60\n      Statistic: Maximum\n      Threshold: 750000\n      AlarmActions:\n        - arn:aws:sns:us-east-1:{id}:{alarm-name}\n  BranchThrottleAlarm:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      ComparisonOperator: GreaterThanOrEqualToThreshold\n      Dimensions:\n        - Name: FunctionName\n          Value: !Ref BranchCollector\n      EvaluationPeriods: 1\n      MetricName: Throttles\n      Namespace: AWS/Lambda\n      Period: 300\n      Statistic: Sum\n      Threshold: 1\n      AlarmActions:\n        - arn:aws:sns:us-east-1:{id}:{alarm-name}\n```", "```py\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: 'AWS::Serverless-2016-10-31'\nParameters:  #   Type: String\n  Environment:\n    Type: String\nResources:\n  # =========================================================================================\n  # IAM ROLES, POLICIES, PERMISSIONS\n  # =========================================================================================\n  IAM:\n    Type: AWS::CloudFormation::Stack\n    Properties:\n      TemplateURL: ./templates/iam.yml\n      Parameters: \n        Environment: !Ref Environment\n  # =========================================================================================\n  # AWS LAMBDA FUNCTIONS\n  # ========================================================================================= \n  BranchCollector:\n    Type: AWS::CloudFormation::Stack\n    Properties:\n      TemplateURL: ./templates/BranchCollector.yml\n      Parameters: \n        Environment: !Ref Environment\n    DependsOn: \n      - IAM\n      - Queues\n\n  SalespersonCollector:\n    Type: AWS::CloudFormation::Stack\n    Properties:\n      TemplateURL: ./templates/SalespersonCollector.yml\n      Parameters: \n        Environment: !Ref Environment\n    DependsOn: \n      - IAM\n      - Queues\n\n  SaleCollector:\n    Type: AWS::CloudFormation::Stack\n    Properties:\n      TemplateURL: ./templates/SaleCollector.yml\n      Parameters: \n        Environment: !Ref Environment\n    DependsOn: \n      - IAM\n      - Queues\n\n  # =========================================================================================\n  # AWS DynamoDB TABLES\n  # ========================================================================================= \n  Tables:\n    Type: AWS::CloudFormation::Stack\n    Properties:\n      TemplateURL: ./templates/tables.yml\n      Parameters: \n        Environment: !Ref Environment\n\n  # =========================================================================================\n  # AWS SQS QUEUES\n  # ========================================================================================= \n  Queues:\n    Type: AWS::CloudFormation::Stack\n    Properties:\n      TemplateURL: ./templates/queues.yml\n      Parameters: \n        Environment: !Ref Environment\n```", "```py\nname: A workflow that automates the data pipeline deployment\non: \n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths-ignore: \n      - '.gitignore'\n      - '*.png'\n      - 'README.md'\n  pull_request:\n    paths-ignore:\n      - '.gitignore'\n      - '*.png'\n      - 'README.md'\n\njobs:\n  deploy:\n    container: \n      image: lambci/lambda:build-python3.8\n    runs-on: ubuntu-latest\n    env:\n      BUCKET_NAME: your-bucket-name\n    steps:\n      - name: Set Environment\n        id: setenv\n        run: |\n          echo \"Running on branch ${{ github.ref }}\"\n          if [ \"${{ github.ref }}\" = \"refs/heads/main\" ]; then\n            echo \"::set-output name=env_name::prod\"\n          else\n             echo \"::set-output name=env_name::dev\"\n          fi\n      - name: Set Repo\n        id: setrepo\n        run: |\n          echo \"::set-output name=repo_name::${{ github.event.repository.name }}\"\n      - name: Set Branch\n        id: setbranch\n        run: |\n          echo \"::set-output name=branch_name::${{ github.head_ref}}\"\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v1\n        with:\n          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}\n          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}\n          aws-region: us-east-1\n          # role-to-assume: arn:aws:iam::807324965916:role/cdk-hnb659fds-deploy-role-807324965916-us-east-1\n          role-duration-seconds: 900\n      - name: Install sam cli\n        run: 'pip3 install aws-sam-cli'\n      - name: Complete policies\n        run: |\n          aws iam attach-user-policy \\\n          --policy-arn arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess \\\n          --policy-arn arn:aws:iam::aws:policy/CloudWatchEventsFullAccess \\\n          --policy-arn arn:aws:iam::aws:policy/AWSLambda_FullAccess \\\n          --policy-arn arn:aws:iam::aws:policy/IAMFullAccess \\\n          --policy-arn arn:aws:iam::aws:policy/AWSCloudFormationFullAccess \\\n          --policy-arn arn:aws:iam::aws:policy/AmazonSQSFullAccess \\\n          --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess \\\n          --user-name Memphis\n      - name: Create S3 Bucket\n        run: |\n          if ! aws s3api head-bucket --bucket \"${{env.BUCKET_NAME}}\" 2>/dev/null; then\n            aws s3api create-bucket --bucket \"${{env.BUCKET_NAME}}\"\n          else\n            echo \"Bucket ${{env.BUCKET_NAME}} already exists\"\n          fi\n\n      - name: Copy utils.py\n        run: 'for d in */; do cp utils.py \"$d\"; done'\n      - name: build\n        run: sam build && sam package --s3-bucket ${{env.BUCKET_NAME}} --s3-prefix \"${{steps.setrepo.outputs.repo_name}}/${{steps.setbranch.outputs.branch_name}}/${{steps.setenv.outputs.env_name}}\" --output-template-file packaged.yaml --region us-east-1 || { echo 'my_command failed' ; exit 1; }\n      - name: deploy\n        run: sam deploy --template-file packaged.yaml --s3-bucket ${{env.BUCKET_NAME}} --s3-prefix \"${{steps.setrepo.outputs.repo_name}}/${{steps.setbranch.outputs.branch_name}}/${{steps.setenv.outputs.env_name}}\" --stack-name \"${{steps.setrepo.outputs.repo_name}}-${{steps.setenv.outputs.env_name}}-stack\" --capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND --region us-east-1 --no-fail-on-empty-changeset --parameter-overrides Environment=${{steps.setenv.outputs.env_name}} || { echo 'my_command failed' ; exit 1; }\n```"]