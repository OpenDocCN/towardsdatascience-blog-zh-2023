- en: How to Create Hexagon Maps With Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/how-to-create-hexagon-maps-with-matplotlib-eb5eef82ab2c](https://towardsdatascience.com/how-to-create-hexagon-maps-with-matplotlib-eb5eef82ab2c)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Matplotlib Tutorial
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using shapes to represent geographic information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@oscarleo?source=post_page-----eb5eef82ab2c--------------------------------)[![Oscar
    Leo](../Images/7733c9147bad2875a35155fca3903aa8.png)](https://medium.com/@oscarleo?source=post_page-----eb5eef82ab2c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----eb5eef82ab2c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----eb5eef82ab2c--------------------------------)
    [Oscar Leo](https://medium.com/@oscarleo?source=post_page-----eb5eef82ab2c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----eb5eef82ab2c--------------------------------)
    ¬∑7 min read¬∑Nov 21, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8a0c286c2ed1192c80240ba0a37770bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Chart created by the author
  prefs: []
  type: TYPE_NORMAL
- en: '**Let‚Äôs make some maps! üó∫**'
  prefs: []
  type: TYPE_NORMAL
- en: Hi, and welcome to a new matplotlib tutorial. This time, I will teach you how
    to create insightful Hexagon maps like the one above.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing geographic information is difficult because areas (such as countries)
    vary in size and shape.
  prefs: []
  type: TYPE_NORMAL
- en: The result is that some areas are hard to see when you plot your data using
    regular maps.
  prefs: []
  type: TYPE_NORMAL
- en: It‚Äôs also difficult to add information such as country names or values to your
    visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative that removes such differences is to use a hexagon map.
  prefs: []
  type: TYPE_NORMAL
- en: The idea is to represent each area as a hexagon and arrange them in a way that
    resembles the actual map.
  prefs: []
  type: TYPE_NORMAL
- en: Since each hexagon is identical in shape, it‚Äôs easy to add information in a
    structured way and to create a beautiful data visualization.
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial teaches you how to do just that using data from the presidential
    elections in the United States.
  prefs: []
  type: TYPE_NORMAL
- en: (Don‚Äôt forget to look at [my other Matplotlib tutorials](https://medium.com/@oscarleo/list/262e5d7f0847)
    as well)
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs get started. üöÄ
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Import libraries'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by importing the required libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: That‚Äôs it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Create a seaborn style'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we use seaborn to set the background and font family. I‚Äôm using `Work
    Sans` and `#F4EBCD`, but feel free to experiment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**FYI:** I often use `background_color="#00000000"` to get a transparent background
    if I want to add the chart to an infographic or similar.'
  prefs: []
  type: TYPE_NORMAL
- en: Now for the fun stuff.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Fetching the data'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I‚Äôve prepared a CSV with the number of votes for each state in the US using
    the following dataset: [U.S. President 1976‚Äì2020](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi%3A10.7910%2FDVN%2F42MVDX)
    (public domain license).'
  prefs: []
  type: TYPE_NORMAL
- en: Here‚Äôs how to access it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Each row represents a state and stores the number of votes on the Democrats,
    Republicans, and ‚ÄúOther‚Äù parties.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9b3a1d26ddc40fd0afae8c2126e3ea7c.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by the author
  prefs: []
  type: TYPE_NORMAL
- en: Luckily for you, I‚Äôve prepared two other columns called x and y, which represent
    the center for each hexagon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Drawing hexagon boundaries'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have the data, we can immediately draw the boundaries of our hexagon
    using the center defined by each row.
  prefs: []
  type: TYPE_NORMAL
- en: Our first Matplotlib-related function takes a `row`together with the `width`
    and `height` of the hexagon.
  prefs: []
  type: TYPE_NORMAL
- en: It combines that information to create two lists of coordinates and returns
    them in the correct format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, let‚Äôs define `draw_hexagon()`, which takes a `row` and uses `get_hexagon_corners()`
    to draw a hexagon in the correct location.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It may look strange that I‚Äôm hard-coding `width` and `height`, but you never
    need to change these values, so it doesn‚Äôt matter.
  prefs: []
  type: TYPE_NORMAL
- en: I selected `width=3` and `height=4` because it gives me a good-looking hexagon.
    I‚Äôm using the `scale` parameter to adjust the space between hexagons.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can run this function together with our standard Matplotlib code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: And we get the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a7237804545bd1a2f613f5d72d2a0207.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, I have arranged 51 hexagons in a formation that resembles the
    United States.
  prefs: []
  type: TYPE_NORMAL
- en: That‚Äôs a good start!
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 5: Adding colors'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many ways to define the colors of the hexagons.
  prefs: []
  type: TYPE_NORMAL
- en: The most common alternatives are to define colors based on a category or to
    have a gradient based on values such as GDP, where a lower value leads to, for
    example, a darker color.
  prefs: []
  type: TYPE_NORMAL
- en: To make things more interesting for you, I decided to take another approach.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of going for something basic, I want to color each hexagon based on
    the number of votes for each party.
  prefs: []
  type: TYPE_NORMAL
- en: A hexagon should have all three colors but in different proportions depending
    on the number of votes.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, I created a function that returns the max and min values for a
    hexagon given the center.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Next, we have the `fill_hexagon` function that defines the area we want to fill
    with a color.
  prefs: []
  type: TYPE_NORMAL
- en: Two parameters are especially interesting.
  prefs: []
  type: TYPE_NORMAL
- en: '`ratio` defines how much of the hexagon to fill (in the vertical direction,
    not by area).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`top` defines if we fill the hexagon from the top or bottom. It will be different
    for the Democrats and Republicans, and you can see that we define `y`, `y_start`,
    and `h4` differently based on `top`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: It isn‚Äôt easy to understand the if statements at first glance.
  prefs: []
  type: TYPE_NORMAL
- en: Here‚Äôs a drawing explaining that we get different shapes that we need to handle
    separately for the different thresholds.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1e03123d9cefd2803766e44d08366180.png)'
  prefs: []
  type: TYPE_IMG
- en: Illustration by the author
  prefs: []
  type: TYPE_NORMAL
- en: Now, we define `d_ratio` and `r_ratio` to `draw_hexagon()` and create `Polygons`
    for both the Democrats and the Republicans.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We get the following chart if we rerun the matplotlib code from the previous
    section.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/007aeda8876c97f7a3c5fbc7af68c785.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that the horizontal black lines have different thicknesses based on the
    number of votes for ‚ÄúOthers‚Äù.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 6: Adding text'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most data visualizations need some text to make sense. I want to add the state
    abbreviation and the percentage of votes for each party.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: I then add `add_text()` directly after `draw_hexagon()`. I‚Äôm also adding the
    year to provide additional information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Running the code gives me the following hexagon map.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8a0c286c2ed1192c80240ba0a37770bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Chart created by the author
  prefs: []
  type: TYPE_NORMAL
- en: That‚Äôs it; I have the finalized chart we set out to create. I added some padding
    using KeyNotes, but you can use almost any tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bonus: Here‚Äôs how I use this visualization'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I have a free newsletter called [Data Wonder](https://datawonder.substack.com/),
    where I share beautiful and insightful data visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: In the edition ‚Äú[Visualizing Election Results From 1976 to 2020](https://open.substack.com/pub/datawonder/p/us-election-results?r=17ashl&utm_campaign=post&utm_medium=web)‚Äù,
    I defined a transparent background for the chart above. I used Corel Vector to
    create a grid, gradient, title, and legend.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5b098790bd4f75351c3f7328881ca3b0.png)'
  prefs: []
  type: TYPE_IMG
- en: Pretty cool! üòÑ
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hexagon charts may look complicated, but they are surprisingly simple to create
    using Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: The biggest challenge is to align the hexagons in a way that resembles the map
    and still have the order make sense.
  prefs: []
  type: TYPE_NORMAL
- en: This time, we learned how to do that for the United States, and you can change
    the election data to any other information that you find interesting.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, I used the same code when I created a visualization called ‚Äú[The
    Escalating Crisis: Drug Overdose Deaths Across the U.S](https://datawonder.substack.com/p/the-escalating-crisis-drug-overdose)‚Äù.'
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading, and see you next time! :)
  prefs: []
  type: TYPE_NORMAL
