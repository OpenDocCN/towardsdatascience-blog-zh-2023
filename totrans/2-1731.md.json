["```py\nimport pandas as pd\n\ndef import_data(name):\n    df = pd.read_excel(\"Inflation-data.xlsx\", sheet_name=name)\n    df = df.drop([\"Country Code\", \"IMF Country Code\", \"Indicator Type\", \"Series Name\", \"Unnamed: 58\"], axis=1)\n    df = (df.melt(id_vars = ['Country', 'Note'], \n              var_name = 'Date', value_name = 'Inflation'))\n    df = df.pivot_table(index='Date', columns='Country',  \n                        values='Inflation', aggfunc='sum')\n    return df\n\ninf_df = import_data(\"hcpi_a\")\nfood_df = import_data(\"fcpi_a\")\nenergy_df = import_data(\"ecpi_a\")\n```", "```py\npip install panel\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport panel as pn\nfrom holoviews import opts\nimport hvplot.pandas\n\npn.config.template = 'fast'\npn.config.template.title=\"Panel Inflation Monitoring Application\"\n\ncountry_widget = pn.widgets.Select(name=\"Country\", value=\"Switzerland\", options=list(inf_df.columns))\n\ndef pivot_series(inf_df, country):\n    df = pd.DataFrame({'Date':inf_df[country].index, 'Inflation':[round(i, 3) for i in inf_df[country].values]})\n    df = df.pivot_table(values='Inflation', columns='Date')\n    return df\n\ndef make_df_plot(country):\n    df = pivot_series(inf_df, country)\n    return pn.pane.DataFrame(df.iloc[:, : 17])\n\ndef make_df_plot2(country):\n    df = pivot_series(inf_df, country)\n    return pn.pane.DataFrame(df.iloc[:, 17:34])\n\ndef make_df_plot3(country):\n    df = pivot_series(inf_df, country)\n    return pn.pane.DataFrame(df.iloc[:, 34:])\n\nbound_plot = pn.bind(make_df_plot, country=country_widget)\nbound_plot2 = pn.bind(make_df_plot2, country=country_widget)\nbound_plot3 = pn.bind(make_df_plot2, country=country_widget)\npanel_app = pn.Column(country_widget, bound_plot, bound_plot2, bound_plot3)\npanel_app.servable()\n```", "```py\nyears_widget = pn.widgets.RangeSlider(name='Years Range', start=1970, end=2022, value=(1970, 2022), step=1)\n\ndef make_inf_plot(country, years):\n    df = inf_df[country].loc[inf_df[country].index.isin(range(years[0], years[1]))]\n    return df.hvplot(height=300, width=400, label=country + ' Overall Inflation')\n\nbound_plot = pn.bind(make_inf_plot, country=country_widget, years=years_widget)\npanel_app = pn.Column(years_widget, bound_plot)\npanel_app.servable()\n```", "```py\ntype_plot_widget = pn.widgets.Select(name=\"Inflation Type\", value=\"Food\", options=[\"Food\", \"Energy\"])\n\ndef make_type_plot(plt_type, country, years):\n    if plt_type == \"Food\":\n        df = food_df[country].loc[inf_df[country].index.isin(range(years[0], years[1]))]\n        return df.hvplot(height=300, width=400, label=country + ' Food Inflation')\n    else:\n        df = energy_df[country].loc[inf_df[country].index.isin(range(years[0], years[1]))]\n        return df.hvplot(height=300, width=400, label=country + ' Energy Inflation')\n\nbound_plot = pn.bind(make_type_plot, plt_type=type_plot_widget, country=country_widget, years=years_widget)\npanel_app = pn.Column(type_plot_widget, bound_plot)\npanel_app.servable()\n```", "```py\nhvexplorer = hvplot.explorer(inf_df)\npn.Column(\n    '## Feel free to explore the entire dataset!', hvexplorer\n).servable()\n```", "```py\npanel serve panel_example.py --autoreload --show\n```", "```py\npanel convert panel_example.py --to pyodide-worker --out docs\n```", "```py\npython3 -m http.server\n```", "```py\npip install shiny\n```", "```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom shiny import ui, render, reactive, App\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Python Shiny Inflation Monitoring Application\"),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_selectize(\"country\", \"Country\",\n                list(inf_df.columns)\n            ),\n            ui.input_slider(\"range\", \"Years\", 1970, 2022, value=(1970, 2022), step=1),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"overall_inflation\"),\n            ui.output_plot(\"annual_change\")\n        )\n    ),\n    ui.input_selectize(\"type\", \"Inflation Type\",\n        [\"Food\", \"Energy\"]\n    ),\n    ui.output_plot(\"inflation_type\")\n)\n```", "```py\ndef server(input, output, session):\n\n    @output\n    @render.plot\n    def overall_inflation():\n        df = inf_df[input.country()].loc[inf_df[input.country()].index.isin(range(input.range()[0], input.range()[1]))]\n        plt.title(\"Overall Inflation\")\n        return df.plot()\n\n    @output\n    @render.plot\n    def annual_change():\n        annual_change = inf_df[input.country()].diff().loc[inf_df[input.country()].index.isin(range(input.range()[0], input.range()[1]))]\n        plt.title(\"Annual Change in Inflation\")\n        return plt.bar(annual_change.index, annual_change.values, color=np.where(annual_change>0,\"Green\", \"Red\"))\n\n    @output\n    @render.plot\n    def inflation_type():\n        if input.type() == \"Food\":\n            df = food_df[input.country()].loc[inf_df[input.country()].index.isin(range(input.range()[0], input.range()[1]))]\n            plt.title(input.country() + ' Food Inflation')\n            return df.plot()\n        else:\n            df = energy_df[input.country()].loc[inf_df[input.country()].index.isin(range(input.range()[0], input.range()[1]))]\n            plt.title(input.country() + ' Energy Inflation')\n            return df.plot()\n\napp = App(app_ui, server)\n```", "```py\nshiny run --reload app.py\n```", "```py\npip install shinylive\nshinylive export . docs\n```", "```py\npython3 -m http.server --directory docs --bind localhost 8008\n```", "```py\n<html>\n  <head>\n    <title>Inflation Monitoring</title>\n    <meta charset=\"utf-8\">\n    <link rel=\"stylesheet\" href=\"https://pyscript.net/latest/pyscript.css\" />\n    <script defer src=\"https://pyscript.net/latest/pyscript.js\"></script>\n  </head>\n  <body>\n\n    <py-config>\n      packages = [\"pandas\", \"matplotlib\", \"numpy\"]\n    </py-config>\n\n    <py-script>\n    # TODO: Your Python Code Here\n    </py-script>\n\n    <div id=\"input\" style=\"margin: 20px;\">\n      <h1> Pyscript Inflation Monitoring Application</h1>\n      Choose the paramters to use: <br/>\n      <input type=\"number\" id=\"s_year\" name=\"params\" value=1970 min=\"1970\" max=\"2022\"> <br> \n      <label for=\"s_year\">Starting Year</label>\n      <input type=\"number\" id=\"e_year\" name=\"params\" value=2022 min=\"1970\" max=\"2022\"> <br>\n      <label for=\"e_year\">Ending Year</label>\n      <select class=\"form-control\" name=\"params\" id=\"country\">\n            <option value=\"Switzerland\">Switzerland</option>\n            <option value=\"Italy\">Italy</option>\n            <option value=\"France\">France</option>\n            <option value=\"United Kingdom\">United Kingdom</option>        \n      </select>\n      <label for=\"country\">Country</label>\n    </div>\n\n    <div id=\"graph-area\"></div>\n  </body>\n</html>\n```", "```py\nimport js\nimport pandas as pd\nimport numpy as np\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nfrom pyodide.ffi import create_proxy\n\ndef plot(country, s_year, e_year):\n    df = inf_df[country].loc[inf_df[country].index.isin(range(s_year, e_year))]\n    annual_change = inf_df[country].diff().loc[inf_df[country].index.isin(range(s_year, e_year))]\n    fig, (ax1, ax2) = plt.subplots(2)\n    fig.suptitle('Overall inflation and annual change in ' + country)\n    ax1.set_ylabel(\"Inflation Rate\")\n    ax2.set_ylabel(\"Annual Change\")\n    ax1.plot(df.index, df.values)\n    ax2.bar(annual_change.index, annual_change.values, color=np.where(annual_change>0,\"Green\", \"Red\"))\n    display(plt, target=\"graph-area\", append=False)\n\ns_year, e_year = js.document.getElementById(\"s_year\").value, js.document.getElementById(\"e_year\").value\ncountry = js.document.getElementById(\"country\").value\nplot(str(country), int(s_year), int(e_year))\n\ndef get_params(event):\n    s_year, e_year = js.document.getElementById(\"s_year\").value, js.document.getElementById(\"e_year\").value\n    country = js.document.getElementById(\"country\").value\n    plot(str(country), int(s_year), int(e_year))\n\nele_proxy = create_proxy(get_params)\n\nparams = js.document.getElementsByName(\"params\")\nfor ele in params:\n    ele.addEventListener(\"change\", ele_proxy)\n```", "```py\nfrom io import StringIO\n\ninf_df = \"\"\"TODO: PASTE YOUR CSV FILE HERE\"\"\"\n\ncsvStringIO = StringIO(inf_df)\ninf_df = pd.read_csv(csvStringIO, sep=\",\").set_index('Date')\n```"]