["```py\n# Function to encode the image from a file path\ndef encode_image(image_path):\n    with open(image_path, \"rb\") as image_file:\n        return base64.b64encode(image_file.read()).decode('utf-8')\n```", "```py\n# Function to send the request to OpenAI API\ndef get_image_analysis(api_key, base64_image, question):\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {api_key}\"\n    }\n\n    payload = {\n        \"model\": \"gpt-4-vision-preview\",\n        \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": [\n                    {\"type\": \"text\", \"text\": question},\n                    {\"type\": \"image_url\", \"image_url\": {\"url\": f\"data:image/jpeg;base64,{base64_image}\"}}\n                ]\n            }\n        ],\n        \"max_tokens\": 300\n    }\n\n    response = requests.post(\"https://api.openai.com/v1/chat/completions\", headers=headers, json=payload)\n    return response.json()['choices'][0]['message']['content']\n```", "```py\nimport streamlit as st\nimport os\nimport requests\nimport base64\nfrom PIL import Image\n\n# Function to encode the image from a file path\ndef encode_image(image_path):\n    with open(image_path, \"rb\") as image_file:\n        return base64.b64encode(image_file.read()).decode('utf-8')\n\n# Function to save the uploaded file\ndef save_uploaded_file(directory, file):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n    file_path = os.path.join(directory, file.name)\n    with open(file_path, \"wb\") as f:\n        f.write(file.getbuffer())\n    return file_path\n\n# Function to send the request to OpenAI API\ndef get_image_analysis(api_key, base64_image, question):\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {api_key}\"\n    }\n\n    payload = {\n        \"model\": \"gpt-4-vision-preview\",\n        \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": [\n                    {\"type\": \"text\", \"text\": question},\n                    {\"type\": \"image_url\", \"image_url\": {\"url\": f\"data:image/jpeg;base64,{base64_image}\"}}\n                ]\n            }\n        ],\n        \"max_tokens\": 300\n    }\n\n    response = requests.post(\"https://api.openai.com/v1/chat/completions\", headers=headers, json=payload)\n    return response.json()['choices'][0]['message']['content']\n\ndef main():\n    st.title(\"Image Analysis Application\")\n\n    uploaded_file = st.file_uploader(\"Choose an image...\", type=[\"jpg\", \"jpeg\", \"png\"], key=\"file_uploader\")\n\n    if uploaded_file is not None:\n\n        file_path = save_uploaded_file('data', uploaded_file)\n\n        # Encode the uploaded image\n        base64_image = encode_image(file_path)\n\n        # Session state to store the base64 encoded image\n        if 'base64_image' not in st.session_state or st.session_state['base64_image'] != base64_image:\n            st.session_state['base64_image'] = base64_image\n\n        image = Image.open(uploaded_file)\n        st.image(image, caption='Uploaded Image.', use_column_width=True)\n\n    question = st.text_input(\"Enter your question about the image:\", key=\"question_input\")\n\n    submit_button = st.button(\"Submit Question\")\n\n    api_key = os.getenv(\"OPENAI_API_KEY\")\n\n    if submit_button and question and 'base64_image' in st.session_state and api_key:\n        # Get the analysis from OpenAI's API\n        response = get_image_analysis(api_key, st.session_state['base64_image'], question)\n        st.write(response)\n    elif submit_button and not api_key:\n        st.error(\"API key not found. Please set your OpenAI API key.\")\n\nif __name__ == \"__main__\":\n    main()\n```"]