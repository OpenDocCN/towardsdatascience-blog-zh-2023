["```py\nfrom langchain.docstore.document import Document\nfrom langchain.document_loaders import HuggingFaceDatasetLoader\n\n# Get some open ai news to add to the final dataset\nopenai_news = [\n    \"2023-11-22 - Sam Altman returns to OpenAl as CEO with a new initial board of Bret Taylor (Chair), Larry Summers, and Adam D'Angelo.\",\n    \"2023-11-21 - Ilya and the board's decision to fire Sam from OpenAI caught everyone off guard, with no prior information shared.\",\n    \"2023-11-21 - In a swift response, Sam was welcomed into Microsoft by Satya Nadella himself.\",\n    \"2023-11-21 - Meanwhile, a staggering 500+ OpenAI employees made a bold move, confronting the board with a letter: either step down or they will defect to Sam's new team at Microsoft.\",\n    \"2023-11-21 - In a jaw-dropping twist, Ilya, integral to Sam's firing, also put his name on that very letter. Talk about an unexpected turn of events!\",\n    \"2023-11-20 - BREAKING: Sam Altman and Greg Brockman Join Microsoft, Emmett Shear Appointed CEO of OpenAI\",\n    \"2023-11-20 - Microsoft CEO Satya Nadella announced a major shift in their partnership with OpenAI. Sam Altman and Greg Brockman, key figures at OpenAI, are now joining Microsoft to lead a new AI research team. This move marks a significant collaboration and potential for AI advancements. Additionally, Emmett Shear, former CEO of Twitch, has been appointed as the new CEO of OpenAI, signaling a new chapter in AI leadership and innovation.\",\n    \"2023-11-20 - Leadership Shakeup at OpenAI - Sam Altman Steps Down!\",\n    \"2023-11-20 - Just a few days after presenting at OpenAI's DevDay, CEO Sam Altman has unexpectedly departed from the company, and Mira Murati, CTO of the company, steps in as Interim CEO. This is a huge surprise and speaks volumes about the dynamic shifts in tech leadership today.\",\n    \"\"\"2023-11-20 - What's Happening at OpenAI?\n    - Sam Altman, the face of OpenAI, is leaving not just the CEO role but also the board of directors.\n    - Mira Murati, an integral part of OpenAI's journey and a tech visionary, is taking the helm as interim CEO.\n    - The board is now on a quest to find a permanent successor.\"\"\",\n    \"2023-11-20 - The transition raises questions about the future direction of OpenAI, especially after the board's statement about losing confidence in Altman's leadership.\",\n    \"\"\"2023-11-20 - With a board consisting of AI and tech experts like Ilya Sutskever, Adam D'Angelo, Tasha McCauley, and Helen Toner, OpenAI is poised to continue its mission. Can they do it without Sam?\n    - Greg Brockman, stepping down as chairman, will still play a crucial role, reporting to the new CEO.\"\"\"\n]\n# load dataset with some news\nloader = HuggingFaceDatasetLoader(\"cnn_dailymail\", \"highlights\", name='3.0.0')\ndocs = loader.load()[:10000] # get a sample of news\n# add openai news to our list of docs\ndocs.extend([\n    Document(page_content=x) for x in openai_news\n])\n```", "```py\nfrom langchain.embeddings import HuggingFaceEmbeddings\n\nencoder = HuggingFaceEmbeddings(\n    model_name=\"sentence-transformers/all-MiniLM-l6-v2\",\n    model_kwargs={\"device\": \"cpu\"},\n)\n```", "```py\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import FAISS\n\n# create passages\ntext_splitter = CharacterTextSplitter(\n    chunk_size=1000,\n    chunk_overlap=0,\n)\npassages = text_splitter.split_documents(<YOUR DOCUMENTS>)\n# store passages in embedding format in FAISS\ndb = FAISS.from_documents(passages, encoder)\n# retrieve the most similar document to your question\ndb.similarity_search(<YOUR QUESTION>, k=4)[0].page_content\n```", "```py\nfrom langchain.llms import LlamaCpp\n\nllm = LlamaCpp(\n    model_path=\"local/path/to/your/llama\",\n    n_ctx=1024, # context length\n    temperature=0.7, # argument to control how much you want your LLM to follow your prompt\n)\n```", "```py\nfrom langchain import PromptTemplate\n\nTEMPLATE = \"\"\"\nUse the following pieces of context to answer the question at the end taking \nin consideration the dates. \n{context}\nQuestion: {question}\nAnswer:\n\"\"\"\n# create prompt template\nprompt = PromptTemplate(\n    template=TEMPLATE, input_variables=[\"context\", \"question\"]\n)\n```", "```py\nfrom langchain.chains import LLMChain\n\n# define the LLMChain\nquery_llm = LLMChain(\n    llm=llm, prompt=prompt, llm_kwargs={\"max_tokens\": 5000}\n)\n# get answer from llm based on context and question\nquery_llm.run({\"context\": context, \"question\": question})\n```"]