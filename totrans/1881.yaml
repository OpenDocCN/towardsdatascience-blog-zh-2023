- en: Sobel Operator In Image Processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/sobel-operator-in-image-processing-1d7cdda8cadb](https://towardsdatascience.com/sobel-operator-in-image-processing-1d7cdda8cadb)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What is the Sobel operator and how it is used with examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@egorhowell?source=post_page-----1d7cdda8cadb--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----1d7cdda8cadb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1d7cdda8cadb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1d7cdda8cadb--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----1d7cdda8cadb--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1d7cdda8cadb--------------------------------)
    ·7 min read·Dec 31, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1a9c4a638e4549d5bdf35076e9ba2b0e.png)'
  prefs: []
  type: TYPE_IMG
- en: href=”[https://www.flaticon.com/free-icons/image-processing](https://www.flaticon.com/free-icons/image-processing)"
    title=”image processing icons” Image processing icons created by juicy_fish —
    Flaticon.
  prefs: []
  type: TYPE_NORMAL
- en: Convolution Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In my previous article, we dived into the key building block behind [***Convolutional
    Neural Networks (CNNs),***](https://en.wikipedia.org/wiki/Convolutional_neural_network)
    the convolution mathematical operator. I highly recommend you check that out as
    it builds context and understanding for this article:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/convolution-explained-introduction-to-convolutional-neural-networks-5babc47fbcaa?source=post_page-----1d7cdda8cadb--------------------------------)
    [## Convolution Explained — Introduction to Convolutional Neural Networks'
  prefs: []
  type: TYPE_NORMAL
- en: The fundamental building block of CNNs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/convolution-explained-introduction-to-convolutional-neural-networks-5babc47fbcaa?source=post_page-----1d7cdda8cadb--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: In a nutshell, convolution for image processing is where we apply a small matrix,
    called a kernel, over our input image to create an output image with some effect
    applied to it such as blurring or sharpening.
  prefs: []
  type: TYPE_NORMAL
- en: 'Mathematically, what we have is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e0b04fd904fe239a320a742507aadd1a.png)'
  prefs: []
  type: TYPE_IMG
- en: Discrete convolution theorem. Equation by author in LaTeX.
  prefs: []
  type: TYPE_NORMAL
- en: '***f*∗*g:*** Convolution between functions, ***f*** and ***g***.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***f:*** The input image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***g***: The kernel matrix, also known as a filter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***t:*** The pixel where the convolution is being computed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***f(τ):*** The pixel value of image ***f*** at pixel ***τ***.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***g(t−τ):*** The pixel value of ***g*** shifted by ***τ*** and evaluated at
    ***t***.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Below is an example of this process, where we apply a *box blur* to our input
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ab2eb9f458f2ed5e17b27b1411c48567.png)'
  prefs: []
  type: TYPE_IMG
- en: Example convolution for applying a blurring effect on a grayscale image. Diagram
    created by author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0608af17b582be4c58fc0df0fed9a0e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of blurring the image. Plot created by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: The convolution is computed by multiplying each pixel of the input image with
    the corresponding element from the kernel and summing these products, then normalised
    by the number of elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example of the middle pixel as depicted in the diagram above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Depending on the structure of the kernel, we get different effects applied to
    our image. One of the most useful kernels is the [***Sobel operator***](https://en.wikipedia.org/wiki/Sobel_operator#:~:text=The%20Sobel%20operator%2C%20sometimes%20called,Irwin%20Sobel%20and%20Gary%20M.),
    which is going to be the subject of this article!
  prefs: []
  type: TYPE_NORMAL
- en: What is the Sobel Operator?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Sobel operator is a powerful kernel for edge detection, making it useful
    for machine learning, particularly Convolutional Neural Networks. It accomplishes
    this by calculating an approximation of the gradient (first-order derivative)
    of the image’s intensity at each pixel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Sobel operator consists of two kernels, one measures the gradient in the
    horizontal direction, ***x***, and the other in the vertical direction, ***y***.
    Mathematically it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/90a14eaff74e59bf13f1723492807cd6.png)'
  prefs: []
  type: TYPE_IMG
- en: Sobel Operator. Equation by author in LaTeX.
  prefs: []
  type: TYPE_NORMAL
- en: These kernels are convolved with some input image to calculate the difference
    in intensity on either side of a pixel we are considering.
  prefs: []
  type: TYPE_NORMAL
- en: Due to their size, ***3x3***, they are also quick to compute, which is a huge
    benefit when dealing with deep learning and CNNs. However, this means it has a
    small resolution, so it may detect edges that humans don’t consider “real” edges.
  prefs: []
  type: TYPE_NORMAL
- en: 'Images don’t have perfect horizontal or vertical edges, so we need to compute
    the total magnitude of the gradient. This can done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8e3b51bedeeec27d72955d3374c11b1a.png)'
  prefs: []
  type: TYPE_IMG
- en: Magnitude of gradient. Equation by author in LaTeX.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also a version without the powers that is computationally faster but
    is an approximation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9bc3d6ab01685577fed77a28c8776270.png)'
  prefs: []
  type: TYPE_IMG
- en: Approximation of the gradient magnitude. Equation by author in LaTeX.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also calculate the angle of the edge through the use of *arctan*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b8ead798ee617d236fdcccc194473061.png)'
  prefs: []
  type: TYPE_IMG
- en: Angle of edge. Equation by author in LaTeX.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that the Sobel operator is only really used for grayscale
    images as it measures changes in intensity.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Sobel Operator Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s now walk through an example of applying the Sobel operator to an image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below is our grayscale input image, which is ***5x5*** pixels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the top two rows are all black and the bottom three are white,
    indicating a vertical edge.
  prefs: []
  type: TYPE_NORMAL
- en: The smaller the pixel value, the darker it is. A value of 0 is black and 255
    is white, with values in-between being somewhere on the grayscale.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'These are the Sobel operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now apply the Sobel operators to the central ***3x3*** pixel grid of
    the input image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '***G_x*** is zero, meaning there is no gradient in the horizontal direction,
    which makes sense when we look at the input images’ pixel values.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The magnitude of the gradient is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And the angle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As the division by zero is undefined, we can infer the direction is purely in
    the vertical direction, meaning we have a horizontal edge.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can all be done in Python as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9da0879fdbbafd9d12ec73f225f0cf73.png)'
  prefs: []
  type: TYPE_IMG
- en: Sobel operator example. Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: The horizontal Sobel operator is undefined/zero as there is no horizontal edge.
    Whereas, the vertical Sobel operator had a strong response and detected the area
    of the edge shown by the black rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code available on my GitHub here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/egorhowell/Medium-Articles/blob/main/Neural%20Networks/sobel_operator.py?source=post_page-----1d7cdda8cadb--------------------------------)
    [## Medium-Articles/Neural Networks/sobel_operator.py at main · egorhowell/Medium-Articles'
  prefs: []
  type: TYPE_NORMAL
- en: Code I use in my medium blog/articles. Contribute to egorhowell/Medium-Articles
    development by creating an account on…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/egorhowell/Medium-Articles/blob/main/Neural%20Networks/sobel_operator.py?source=post_page-----1d7cdda8cadb--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Other Edge Detectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sobel is not the only edge detection kernel/algorithm. Below is a list of some
    other common ones with links for the interested reader:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Canny Edge Detector**](https://en.wikipedia.org/wiki/Canny_edge_detector):
    Probably the most popular edge detector but has multiple stages. These include
    a Gaussian blur, differential gradient detection, and suppression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Prewitt Operator**](https://en.wikipedia.org/wiki/Prewitt_operator)**:**
    Very similar to the Sobel operator as it’s also two 3x3 kernels that measure the
    gradient in intensity in both directions. However, a bit less accurate than the
    Sobel, but less sensitive to noise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Robert Cross Operator**](https://en.wikipedia.org/wiki/Roberts_cross): Another
    differential operator but using 2x2 kernels, so a quicker compute time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary & Further Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we have shown how you can detect edges in images using the
    Sobel operator. This operator calculates the discrete approximate gradient in
    the intensity of an image about a single pixel. If the difference on either side
    of a pixel is large, it likely lies on an edge. This is the heart of how convolutional
    neural networks work by finding these types of kernels.
  prefs: []
  type: TYPE_NORMAL
- en: Another Thing!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----1d7cdda8cadb--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  prefs: []
  type: TYPE_NORMAL
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----1d7cdda8cadb--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Connect With Me!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**YouTube**](https://www.youtube.com/@egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**GitHub**](https://github.com/egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References and Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Good read on edge detection*](https://www.cse.usf.edu/~r1k/MachineVisionBook/MachineVision.files/MachineVision_Chapter5.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Excellent video on Sobel operator*](https://www.youtube.com/watch?v=uihBwtPIBxM)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Advice on implementing the Sobel operator*](https://homepages.inf.ed.ac.uk/rbf/HIPR2/sobel.htm#:~:text=The%20Sobel%20operator%20performs%20a,in%20an%20input%20grayscale%20image.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
