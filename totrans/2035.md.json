["```py\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import f1_score, precision_score, recall_score\n\n# set the params\ntrain_params = {\n    \"n_estimators\": 10,\n    \"max_depth\": 10,\n}\n\n# load data\ndf = pd.read_csv(\"data/creditcard.csv\")\nX = df.drop(columns=[\"Time\"]).copy()\ny = X.pop(\"Class\")\n\n# train-test split\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42, stratify=y\n)\n\n# fit-predict\nmodel = RandomForestClassifier(random_state=42, **train_params)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\n# evaluate\nprint(\"recall\", recall_score(y_test, y_pred))\nprint(\"precision\", precision_score(y_test, y_pred))\nprint(\"f1_score\", f1_score(y_test, y_pred))\n```", "```py\nrecall 0.7755102040816326\nprecision 0.926829268292683\nf1_score 0.8444444444444446\n```", "```py\ndvc init\ngit add -A\ngit commit -m \"initialize DVC\"\n```", "```py\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import f1_score, precision_score, recall_score\nfrom dvclive import Live\n\n# set the params\ntrain_params = {\n    \"n_estimators\": 10,\n    \"max_depth\": 10,\n}\n\n# load data\ndf = pd.read_csv(\"data/creditcard.csv\")\nX = df.drop(columns=[\"Time\"]).copy()\ny = X.pop(\"Class\")\n\n# train-test split\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42, stratify=y\n)\n\n# fit-predict\nmodel = RandomForestClassifier(random_state=42, **train_params)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\n# evaluate\nwith Live(save_dvc_exp=True) as live:\n    for param_name, param_value in train_params.items():\n        live.log_param(param_name, param_value)\n    live.log_metric(\"recall\", recall_score(y_test, y_pred))\n    live.log_metric(\"precision\", precision_score(y_test, y_pred))\n    live.log_metric(\"f1_score\", f1_score(y_test, y_pred))\n```"]