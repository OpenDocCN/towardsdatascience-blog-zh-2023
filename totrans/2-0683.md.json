["```py\n# import modules\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nfrom sklearn.metrics import precision_score, recall_score, f1_score\nfrom imblearn.over_sampling import SMOTE\n```", "```py\n# read data from csv\ndf = pd.read_csv('raw/s41598-020-73558-3_sepsis_survival_primary_cohort.csv')\n\n# look at data distributions\nplt.rcParams.update({'font.size': 16})\n\n# plot histograms\ndf.hist(figsize=(12,8))\n```", "```py\n# Balance data using SMOTE\n\n# define predictor and target variable names\nX_var_names = df.columns[:3]\ny_var_name = df.columns[3]\n\n# create predictor and target arrays\nX = df[X_var_names]\ny = df[y_var_name]\n\n# oversample minority class using smote\nX_resampled, y_resampled = SMOTE().fit_resample(X, y)\n\n# plot resulting outcome histogram\ny_resampled.hist(figsize=(6,4))\nplt.title('hospital_outcome_1alive_0dead \\n (balanced)')\n```", "```py\n# create train and test datasets\nX_train, X_test, y_train, y_test = \\\n      train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=0)\n```", "```py\n# Training\nclf = tree.DecisionTreeClassifier(random_state=0)\nclf = clf.fit(X_train, y_train)\n```", "```py\n# Display decision tree\nplt.figure(figsize=(24,16))\n\ntree.plot_tree(clf)\nplt.savefig('visuals/fully_grown_decision_tree.png',facecolor='white',bbox_inches=\"tight\")\nplt.show()\n```", "```py\n# Function to plot confusion matrix and print precision, recall, and f1-score\ndef evaluateModel(clf, X, y):\n\n    # confusion matrix\n    y_pred = clf.predict(X)\n    cm = confusion_matrix(y, y_pred)\n    cm_disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['dead', 'alive'])\n    cm_disp.plot()\n\n    # print metrics\n    print(\"Precision = \" + str(np.round(precision_score(y, y_pred),3)))\n    print(\"Recall = \" + str(np.round(recall_score(y, y_pred),3)))\n    print(\"F1 = \" + str(np.round(f1_score(y, y_pred),3)))\n```", "```py\n# train model with max_depth set to 3\nclf_tuned = tree.DecisionTreeClassifier(random_state=0, max_depth=3)\nclf_tuned = clf_tuned.fit(X_train, y_train)\n```"]