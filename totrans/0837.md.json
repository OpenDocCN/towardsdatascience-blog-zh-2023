["```py\nclass Evolutionary:\n    def __init__(self, task):\n        self.task = task\n\n    def generate_genome(self, length):\n        genome = np.arange(length)\n        np.random.shuffle(genome)\n        return genome\n\n    def generate_population(self, size, genome_length):\n        population = [self.generate_genome(genome_length) for _ in range(size)]\n        return population\n```", "```py\npopulation=['A', 'B', 'C', 'D', 'E']\nweights = [-.1, -.2, -.3, -.3, 1]\nfor _ in range(100):\n    x = random.choices(\n        population=population, weights=weights, k=2\n    )\n    print(x)\n```", "```py\nclass Evolutionary:\n    def selection(self, population, fitness_func, method='tournament'):\n        if method == 'tournament':\n            k = min(5, int(0.02*len(population)))\n            sub_population1 = random.choices(\n                population=population, k=k\n            )\n            sub_population2 = random.choices(\n                population=population, k=k\n            )\n            return (\n                sorted(sub_population1, key=fitness_func, reverse=True)[0], \n                sorted(sub_population2, key=fitness_func, reverse=True)[0]\n            )        \n        else: # roulette wheel\n            min_fitness = min([fitness_func(gene) for gene in population])\n            selected = random.choices(\n                population=population,\n                weights=[fitness_func(gene)+eps-min_fitness for gene in population],\n                k=2\n            )\n            return tuple(selected)\n```"]