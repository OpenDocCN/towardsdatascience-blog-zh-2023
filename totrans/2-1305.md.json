["```py\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In [7], line 14\n     11         image[y.astype(int) + i, x] = 0\n     12     return image\n---> 14 basketball = basketball_image()\n     15 plt.imshow(basketball, cmap='gray')\n     16 plt.show()\n\nCell In [7], line 11, in basketball_image()\n      9 y[y < 64] = 64\n     10 for i in range(0, 256, 8):\n---> 11     image[y.astype(int) + i, x] = 0\n     12 return image\n\nIndexError: index 256 is out of bounds for axis 0 with size 256\n```", "```py\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In [9], line 14\n     11                 image[y.astype(int) + i, j] = 0\n     12     return image\n---> 14 basketball_image()\n\nCell In [9], line 10, in basketball_image()\n      8 for i in range(0, 256, 8):\n      9     for j in range(256):\n---> 10         if y[j].astype(int) + i < 256:\n     11             image[y.astype(int) + i, j] = 0\n     12 return image\n\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n```", "```py\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In [10], line 16\n     13                 image[y[j].astype(int) - i, j] = 0\n     14     return image\n---> 16 basketball = basketball_image()\n     17 plt.imshow(basketball, cmap='gray')\n     18 plt.show()\n\nCell In [10], line 11, in basketball_image()\n      9 for j in range(256):\n     10     if y[j].astype(int) + i < 256:\n---> 11         image[y[j].astype(int) + i, j] = 0\n     12     if y[j].astype(int) - i >= 0:\n     13         image[y[j].astype(int) - i, j] = 0\n\nIndexError: index -9223372036854775808 is out of bounds for axis 0 with size 256\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef smiley_face(size=512):\n    # Create an empty image with the given size\n    image = np.ones((size, size, 3), dtype=np.uint8) * 255\n\n    # Create the circle for the face\n    center = (size // 2, size // 2)\n    radius = size // 2 - 10\n    for i in range(size):\n        for j in range(size):\n            if (i - center[0]) ** 2 + (j - center[1]) ** 2 < radius ** 2:\n                image[i, j, :] = [255, 255, 102]\n\n    # Create the circle for the left eye\n    eye_radius = size // 8\n    eye_center = (size // 2 - size // 6, size // 2 - size // 6)\n    for i in range(size):\n        for j in range(size):\n            if (i - eye_center[0]) ** 2 + (j - eye_center[1]) ** 2 < eye_radius ** 2:\n                image[i, j, :] = [0, 0, 0]\n\n    # Create the circle for the right eye\n    eye_center = (size // 2 + size // 6, size // 2 - size // 6)\n    for i in range(size):\n        for j in range(size):\n            if (i - eye_center[0]) ** 2 + (j - eye_center[1]) ** 2 < eye_radius ** 2:\n                image[i, j, :] = [0, 0, 0]\n\n    # Create the smile\n    smile_center = (size // 2, size // 2 + size // 4)\n    smile_radius = size // 4\n    for i in range(size):\n        for j in range(size):\n            if (i - smile_center[0]) ** 2 + (j - smile_center[1]) ** 2 < smile_radius ** 2 and j > smile_center[1]:\n                image[i, j, :] = [255, 0, 0]\n\n    return image\n\nsmiley = smiley_face()\nplt.imshow(smiley)\nplt.axis('off')\nplt.show()\n```"]