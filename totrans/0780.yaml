- en: Easy Method of Edge Detection in OpenCV Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/easy-method-of-edge-detection-in-opencv-python-db26972deb2d](https://towardsdatascience.com/easy-method-of-edge-detection-in-opencv-python-db26972deb2d)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/abf1e43bd4a34fd3dc4c288984cd3c27.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Elijah Hiett](https://unsplash.com/@elijahdhiett?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Using Canny Edge Detection Efficiently
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://rashida00.medium.com/?source=post_page-----db26972deb2d--------------------------------)[![Rashida
    Nasrin Sucky](../Images/42bd057e8eca255907c43c29a498f2ca.png)](https://rashida00.medium.com/?source=post_page-----db26972deb2d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----db26972deb2d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----db26972deb2d--------------------------------)
    [Rashida Nasrin Sucky](https://rashida00.medium.com/?source=post_page-----db26972deb2d--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----db26972deb2d--------------------------------)
    ·4 min read·Jan 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Edge detection is very common and widely used image processing necessary for
    many different computer vision applications like data extraction, image segmentation,
    and in more granular level feature extraction, and pattern recognition. It reduces
    the level of noise and the number of details in an image but preserves the structure
    of the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Canny edge detection in Python is one of the most popular edge detection methods
    in computer vision. These are the steps for Canny edge detection:'
  prefs: []
  type: TYPE_NORMAL
- en: Reducing noise using the Gaussian smoothing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Computing the gradients
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Applying non-maxima suppression to reduce the noise and have only the local
    maxima in the direction of the gradient
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finding the upper and lower threshold
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Applying the threshold.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Luckily OpenCV library has cv2.canny() function that performs Canny edge detection
    for us. In this article, we will go directly into performing edge detection using
    OpenCV.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use the following picture for today’s tutorial:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a6e68579f9b3c323d67b747604d91bf9.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Lucas Hoang](https://unsplash.com/@zuizuii?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step of the Canny Edge detection was to apply Gaussian Blur. Before
    blurring, it is also important to convert the image to grayscale as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can directly apply our cv2.Canny() method to this blurred picture.
    It’s simple. It takes three parameters: the image itself, the lower threshold,
    and the upper threshold. Choosing these thresholds is tricky. For each image,
    these thresholds will be different.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this image, we will try three different ranges and observe what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here I used three different types of ranges. In the wide, the threshold values
    have a wide range. In the mid, the threshold values have somewhere mid-range and
    in the tight, the threshold values have a tight range, only 210 to 250, pretty
    close.
  prefs: []
  type: TYPE_NORMAL
- en: To check the images I just saved these three images (wide, mid, and tight).
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ec7428967c291adc88640b116a086903.png)'
  prefs: []
  type: TYPE_IMG
- en: Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the result of the mid-range:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/246a06fbf33e0400a7dddd79c8d09fe8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: 'The image from the tight range:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/530c07f3b23b73ffecdcc26453e27099.png)'
  prefs: []
  type: TYPE_IMG
- en: Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: If we notice these three images, I believe the mid-range gave a more solid edge.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you cannot generalize this ranges. For a different image a different
    range may work. That’s why it is so tricky
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The good news is, There are a few statistical tricks available that can be used
    to find the lower and upper threshold without the trial and error method we saw
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the function for automatic edge detection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the function above, the median pixel value from the image array is found
    first. Then using this median and a constant sigma value you can find the lower
    and upper thresholds. Here a sigma value of 0.33 was used. In most applications
    0.33 works as a sigma value. But in some cases, if it doesn’t give you a good
    result, try some other sigma value as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the use of the auto_canny_edge_detection method on the blurred image
    we created before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what auto.jpg looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/651688df8dfe198147dde57f75d4667e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: As you can see the edge came here pretty clearly without having to try too many
    thresholds.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In my opinion, the automatic edge detection function provided us with the best
    result. Please feel free to try with your own application. It can be very useful.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to follow me on [Twitter](https://twitter.com/rashida048) and like
    my [Facebook](https://www.facebook.com/rashida.smith.161) page.
  prefs: []
  type: TYPE_NORMAL
- en: More Reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](/how-to-perform-image-segmentation-with-thresholding-using-opencv-b2a78abb07ac?source=post_page-----db26972deb2d--------------------------------)
    [## How to Perform Image Segmentation with Thresholding Using OpenCV'
  prefs: []
  type: TYPE_NORMAL
- en: Simple, Otsu, and Adaptive Thresholding Implementation with Examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-perform-image-segmentation-with-thresholding-using-opencv-b2a78abb07ac?source=post_page-----db26972deb2d--------------------------------)
    [](/morphological-operations-for-image-preprocessing-in-opencv-in-detail-15fccd1e5745?source=post_page-----db26972deb2d--------------------------------)
    [## Morphological Operations for Image Preprocessing in OpenCV, in Detail
  prefs: []
  type: TYPE_NORMAL
- en: Erosion, dilation, opening, closing, morphological gradient, tophat / whitehat,
    and blackhat explained with examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/morphological-operations-for-image-preprocessing-in-opencv-in-detail-15fccd1e5745?source=post_page-----db26972deb2d--------------------------------)
    [](/some-basic-image-preprocessing-operations-for-beginners-in-python-7d297316853b?source=post_page-----db26972deb2d--------------------------------)
    [## Some Basic Image Preprocessing Operations for Beginners in Python
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenCV for beginners: move or translate, resize, and cropping'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/some-basic-image-preprocessing-operations-for-beginners-in-python-7d297316853b?source=post_page-----db26972deb2d--------------------------------)
    [](/a-step-by-step-tutorial-to-develop-a-multi-output-model-in-tensorflow-ec9f13e5979c?source=post_page-----db26972deb2d--------------------------------)
    [## A Step-by-Step Tutorial to Develop a Multi-Output Model in TensorFlow
  prefs: []
  type: TYPE_NORMAL
- en: With complete code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/a-step-by-step-tutorial-to-develop-a-multi-output-model-in-tensorflow-ec9f13e5979c?source=post_page-----db26972deb2d--------------------------------)
    [](https://pub.towardsai.net/some-simple-but-advanced-styling-in-pythons-matplotlib-visualization-107f3be56a24?source=post_page-----db26972deb2d--------------------------------)
    [## Some Simple But Advanced Styling in Python’s Matplotlib Visualization
  prefs: []
  type: TYPE_NORMAL
- en: Adding Some Extra Flavor to Your Python Plots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pub.towardsai.net](https://pub.towardsai.net/some-simple-but-advanced-styling-in-pythons-matplotlib-visualization-107f3be56a24?source=post_page-----db26972deb2d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
