- en: Converting Well Logging Data From DLIS Files to LAS File Format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/converting-well-logging-data-from-dlis-files-to-las-file-format-ccc1e7eee9b0](https://towardsdatascience.com/converting-well-logging-data-from-dlis-files-to-las-file-format-ccc1e7eee9b0)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Working With Geoscience and Petrophysical Data File Formats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----ccc1e7eee9b0--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----ccc1e7eee9b0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ccc1e7eee9b0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ccc1e7eee9b0--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----ccc1e7eee9b0--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ccc1e7eee9b0--------------------------------)
    ·8 min read·Jul 25, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/69d4e3da04b4d0c32395107fa95d681e.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Mika Baumeister](https://unsplash.com/pt-br/@mbaumi?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Within the geoscience disciplines of the oil and gas industry, various formats
    are used to store [well logging](https://en.wikipedia.org/wiki/Well_logging) and
    [petrophysical](https://en.wikipedia.org/wiki/Petrophysics) data. Two of the most
    common formats are LAS files and DLIS files.
  prefs: []
  type: TYPE_NORMAL
- en: '[LAS](https://en.wikipedia.org/wiki/Log_ASCII_standard) files are flat ASCII
    files that can easily be read using any text editor, whereas DLIS files are structured
    binary files containing tables of information about the logging environment as
    well as the logging data. DLIS files are much harder to work with and can’t easily
    be opened in a text editor, which can hinder understanding what is contained within
    them.'
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, a couple of great Python libraries have been developed, making accessing
    data from LAS and DLIS files much easier.
  prefs: []
  type: TYPE_NORMAL
- en: '[lasio](https://github.com/kinverarity1/lasio) is a library designed to easily
    read and work with LAS files, even those with any issues resulting from improper
    formatting or other errors.'
  prefs: []
  type: TYPE_NORMAL
- en: '[dlsio](https://github.com/equinor/dlisio) is a Python library developed by
    Equinor ASA to read DLIS files and Log Information Standard 79 (LIS79) files.
    The library has been designed to reduce the burden and effort of exploring these
    files without having a detailed understanding of the DLIS structure.'
  prefs: []
  type: TYPE_NORMAL
- en: Using these two libraries, we will explore how to extract data from a DLIS file
    and export it to a LAS file. This will allow us to create a file format that with
    much easier to work with and also smaller in file size as it will contain the
    relevant data we need.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to see other articles on how to work with these file formats, the
    following may be of interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Loading Multiple Well Log LAS Files Using Python](/loading-multiple-well-log-las-files-using-python-39ac35de99dd)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Convert CSV Files to LAS files with Python](/convert-csv-files-to-las-files-with-python-7de4a47fc996)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Exploring the Contents of DLIS Files with Python](https://medium.com/towards-data-science/exploring-the-contents-of-dlis-files-with-python-38585157dbac)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Loading Well Log Data From DLIS using Python](/loading-well-log-data-from-dlis-using-python-9d48df9a23e2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing Libraries and Loading Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this tutorial, we are going to need two main libraries. DLISIO, which allows
    us to read and work with the contents of DLIS files, and LASIO, which allows us
    to work with LAS files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After importing the libraries, we next to read the DLIS file. This is done using
    the following syntax.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As DLIS files can contain multiple logical files (representing different logging
    passes or different levels of processing) we need to separate these out into two
    variables: `f` and `*tail`. If there are multiple logical files, the first one
    will be placed into the `f` variable, and the remainder will be placed in the
    `*tail` variable.'
  prefs: []
  type: TYPE_NORMAL
- en: We can apply similar logic to extract the origin information from the selected
    logical file. As this file contains a single origin, we can call upon the `describe`
    method on the `origin` variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we get back the following summary detailing the
    origins of this dataset. We will be able to use this information when we build
    our LAS file.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/382815f734a9db5b1f274302e66e5689.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary of the DLIS logical file origin. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a LAS File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we begin extracting data, we first need to create a blank LAS file object.
    This can be done like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once the file has been created, we can confirm it is blank by calling upon the
    following.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will return an empty list ( `[]` ), which is what we need at this stage.
  prefs: []
  type: TYPE_NORMAL
- en: In order to make things easier for ourselves, we can extract some key information
    from the DLIS file to variables. In this example, we will extract the well name,
    the field name and the operating company.
  prefs: []
  type: TYPE_NORMAL
- en: If we were looking to make this code reusable, this is one way to do it and
    avoids you having to provide that information manually each and every time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the key information in variable form, we can start populating
    our LAS file header. This is done by accessing the key properties from the LAS
    file and setting the `HeaderItem` to the new values.
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that we have manually added a date, as this property does not
    appear to be exposed by DLISIO.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Extracting Data from DLIS and Writing it to LAS Format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As DLIS files can contain vast numbers of logging curves and arrays, we may
    want to consider extracting a small selection of the data. This prevents us from
    being overwhelmed by too many irrelevant curves for our intended use case.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we will extract the following curves.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we need to extract the ‘TDEP’ curve, which is our primary reference
    depth curve.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have prepared our LAS file and extracted the header data from the
    DLIS file, we can now loop through the channels within a frame in the DLIS.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we will access content within the first frame. If you want
    to see how to check the contents of DLIS files (this file in particular), you
    can find out how to do that in the article below.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/exploring-the-contents-of-dlis-files-with-python-38585157dbac?source=post_page-----ccc1e7eee9b0--------------------------------)
    [## Exploring the Contents of DLIS Files with Python'
  prefs: []
  type: TYPE_NORMAL
- en: Working with Pandas and dlisio to Explore Well Log Data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/exploring-the-contents-of-dlis-files-with-python-38585157dbac?source=post_page-----ccc1e7eee9b0--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Also, the following code assumes that all curves have a single dimension. I.e.
    no borehole image array data or acoustic waveforms. Again, I recommend checking
    my previous article for one way to handle this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the code above, we essentially loop through all available
    channels (curves) within the selected frame and check if their names match the
    ones we are trying to select.
  prefs: []
  type: TYPE_NORMAL
- en: If we come across a curve on our list, we first check if it is the TDEP (depth)
    curve; if it is, we need to make a few minor adjustments. This involves changing
    the name to DEPT, and checking if the units are in 0.1 in. If they are, we need
    to convert the depth units to metres.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have checked if we have a depth curve, all other curves will be extracted
    using their stored information.
  prefs: []
  type: TYPE_NORMAL
- en: After the curve has been checked, we can append it to the LAS file object and
    pass in the relevant information.
  prefs: []
  type: TYPE_NORMAL
- en: Once the LAS object has been created, we can check that our curve information
    has been passed over by using the following call.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will return the following list with the information for each curve. We
    can see that the names, units, and descriptions have all been added successfully,
    and based on the shape of the data, we can assume that the data values have been
    passed over as well.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/95643822bbf215c5d33aa2d290c18a91.png)'
  prefs: []
  type: TYPE_IMG
- en: LASIO LAS file curve information after extracting it from a DLIS file. Image
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the header information and curve data setup, we can begin writing
    out our LAS file using the following command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If no errors are created when writing, we can open the LAS file in our favourite
    text editor. When we do this, we should see the following file.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4009e4cc3cdd6377997dd24d42452602.png)'
  prefs: []
  type: TYPE_IMG
- en: Exported LAS file viewed within a text editor after writing out to file using
    LASIO. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that we still have missing information within the header section.
    This can be edited directly within the text editor, or you can use additional
    code to ensure these parameters are written out like what we did with the date.
  prefs: []
  type: TYPE_NORMAL
- en: You will also notice that the depth range is inverted, which is normal with
    some LAS files. Your favourite petrophysics software package should easily read
    it.
  prefs: []
  type: TYPE_NORMAL
- en: If we want further confirmation that our file has been created correctly, we
    can load it back into our notebook using the `lasio.read()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: When we view the header sections of the LAS file, we get back the following
    output, which confirms that the data has been read correctly.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/74c7e33443b025c69441de9e3ac9da6b.png)'
  prefs: []
  type: TYPE_IMG
- en: Header summary from the LAS file after loading it back into Jupyter through
    LASIO. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This tutorial shows how we can easily convert data stored within a DLIS file
    to a more readable LAS file format. This was achieved using two very popular Python
    libraries: DLISIO and LASIO.'
  prefs: []
  type: TYPE_NORMAL
- en: The process illustrated here mainly applies to single-dimension logging curves.
    Any array data or high-resolution data needs to be assessed differently.
  prefs: []
  type: TYPE_NORMAL
- en: Data Used In this Tutorial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Data from NLOG.nl is free to download and use. Full details of the data licence
    can be found [**here**](https://www.nlog.nl/en/disclaimer), but a summary of the
    usage is provided here from the Intellectual Property Rights section:'
  prefs: []
  type: TYPE_NORMAL
- en: '*NLOG.NL does not claim any rights (except domain names, trademark rights,
    patents and other intellectual property rights) in respect of information provided
    on or through this website. Users are permitted to copy, to download and to disclose
    in any way, to distribute or to simplify the information provided on this website
    without the prior written permission of NLOG.NL or the lawful consent of the entitled
    party. Users are also permitted to copy, duplicate, process or edit the information
    and/or layout, provided NLOG.NL is quoted as the source.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Secondly, you can get the full Medium experience and support thousands of
    other writers and me by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the fantastic Medium articles, as well as the
    chance to make money with your writing.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support.*'
  prefs: []
  type: TYPE_NORMAL
