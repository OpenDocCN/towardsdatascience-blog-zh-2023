["```py\nname: ETL Pipeline\n\non:\n  schedule:\n    - cron: '0 0 * * *'  # Runs at 12.00 AM every day\n\njobs:\n  etl:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.9'\n\n      - name: Extract data\n        run: python extract.py\n\n      - name: Transform data\n        run: python transform.py\n\n      - name: Load data\n        run: python load.py\n```", "```py\n# extract.py\n# --------------------------------\nimport requests\n\nresponse = requests.get(\"https://api.example.com/data\")\nwith open(\"data.json\", \"w\") as f:\n    f.write(response.text)\n\n# transform.py\n# --------------------------------\nimport json\n\nwith open(\"data.json\", \"r\") as f:\n    data = json.load(f)\n\n# Perform transformation\ntransformed_data = [item for item in data if item[\"key\"] == \"value\"]\n\n# Save transformed data\nwith open(\"transformed_data.json\", \"w\") as f:\n    json.dump(transformed_data, f)\n\n# load.py\n# --------------------------------\nimport json\nfrom sqlalchemy import create_engine, Table, Column, Integer, String, MetaData\n\n# Connect to database\nengine = create_engine(\"postgresql://myuser:mypassword@localhost:5432/mydatabase\")\n\n# Create metadata object\nmetadata = MetaData()\n\n# Define table schema\nmytable = Table(\n    \"mytable\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"column1\", String),\n    Column(\"column2\", String),\n)\n\n# Read transformed data from file\nwith open(\"transformed_data.json\", \"r\") as f:\n    data = json.load(f)\n\n# Load data into database\nwith engine.connect() as conn:\n    for item in data:\n        conn.execute(\n            mytable.insert().values(column1=item[\"column1\"], column2=item[\"column2\"])\n        )\n```", "```py\nname: ETL Pipeline\n\non:\n  schedule:\n    - cron: '0 0 * * *'  # Runs at 12.00 AM every day\n\njobs:\n  etl:\n    runs-on: ubuntu-latest\n    steps:\n      ...\n\n      - name: Load data\n        env: # Or as an environment variable\n          DB_USER: ${{ secrets.DB_USER }}\n          DB_PASS: ${{ secrets.DB_PASS }}\n        run: python load.py\n```", "```py\n# load.py\n# --------------------------------\nimport json\nimport os\nfrom sqlalchemy import create_engine, Table, Column, Integer, String, MetaData\n\n# Connect to database\nengine = create_engine(\n    f\"postgresql://{os.environ['DB_USER']}:{os.environ['DB_PASS']}@localhost:5432/mydatabase\"\n)\n```", "```py\n- name: Install dependencies\n  run: pip install -r requirements.txt\n```"]