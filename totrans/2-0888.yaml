- en: Finding Dark Matter using a Quantum Computer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/finding-dark-matter-using-a-quantum-computer-a99f4bff4685](https://towardsdatascience.com/finding-dark-matter-using-a-quantum-computer-a99f4bff4685)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: QML — quantum machine learning in action for a fun use case of high-energy and
    particle Physics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://prashantmdgl9.medium.com/?source=post_page-----a99f4bff4685--------------------------------)[![Prashant
    Mudgal](../Images/7aefc3cdbc4985657b26b01c273165bc.png)](https://prashantmdgl9.medium.com/?source=post_page-----a99f4bff4685--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a99f4bff4685--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a99f4bff4685--------------------------------)
    [Prashant Mudgal](https://prashantmdgl9.medium.com/?source=post_page-----a99f4bff4685--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a99f4bff4685--------------------------------)
    ·9 min read·Nov 3, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This year’s August was dedicated to IBM’s Global Quantum Summer School where
    I not only learned the basics in a compressed timeline and a tight schedule but
    also a few applications of quantum computing. The [badge](https://www.credly.com/go/ZlukKqHe)
    one gets after 4 gruelling weeks is a “*quantum experience”* in itself as you
    think you understand what you are doing but at the same time, you have no idea
    what is going on. The month transitioned from quantum circuit basics to variational
    algorithms at a fast pace which left only a little and limited time to ‘do your
    own research’ and get your hands dirty on the application part.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5ec7d8ce72d318eaaaf6c7221fe5e741.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Dynamic Wang](https://unsplash.com/@dynamicwang?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: As far as the applications are concerned, quantum chemistry, quantum simulations,
    and a few really complicated modelling tasks would fit the bill of the problems
    that can be solved with quantum computers. Having said so, there is another branch
    that’s burgeoning and seeking a lot of interest from the users and researchers
    and that’s Quantum Machine Learning — QML in short.
  prefs: []
  type: TYPE_NORMAL
- en: I thought QML should be a logical successor to the conventional ML and I set
    out to do the same. Now, I wanted to have a problem that wouldn’t be straightforward
    for ML algorithms to solve because of the sheer size of the data, hard to identify
    the complex patterns, but something that I could code from the comfort of my humble
    machine. I looked no further than our old friend, Physics, which hides a gamut
    of complex but interesting problems in its lap and it sounds intellectually cool
    to work on such problems.
  prefs: []
  type: TYPE_NORMAL
- en: So it goes.
  prefs: []
  type: TYPE_NORMAL
- en: Problem Statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I decided to deal with the **dark matter classification** problem examined under
    the OPERA experiment (Oscillation Project with Emulsion-tRacking Apparatus) associated
    with the Large Hadron Collider, CERN.
  prefs: []
  type: TYPE_NORMAL
- en: Problem Statement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In short, we will train a classifier to differentiate between the signal and
    the noise. The signal is the presence of the dark matter and the noise means an
    absence or something else altogether but not the signal.
  prefs: []
  type: TYPE_NORMAL
- en: Quite simple!
  prefs: []
  type: TYPE_NORMAL
- en: Intuition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s elaborate a little on the background of the experiment to develop a little
    intuition.
  prefs: []
  type: TYPE_NORMAL
- en: So, dark matter is a mysterious and as-yet-undetected form of matter that does
    not interact with electromagnetic radiation, such as light. It’s said that it
    makes up nearly 80% of the total mass of the universe. It is called “dark” because
    it cannot be observed directly with telescopes or other instruments that detect
    electromagnetic radiation.
  prefs: []
  type: TYPE_NORMAL
- en: Why is it challenging to find dark matter?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It’s challenging because we don’t know what we are looking for.
  prefs: []
  type: TYPE_NORMAL
- en: '**Invisibility**: Dark matter doesn’t interact with light and that’s why we
    don’t really know what we are looking for, there are many theories around it but
    there isn’t any consensus.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Background noise**: Experiments designed to detect dark matter must contend
    with various sources of background noise that can mimic the expected signals from
    dark matter. Distinguishing between actual dark matter interactions and these
    background signals is a significant challenge. Dark matter’s interactions with
    regular matter are very weak, making it difficult to detect and distinguish from
    background noise in experiments.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Multiple Possibilities**: There are various theoretical candidates for dark
    matter, which require different detection methods. Scientists are exploring these
    possibilities, increasing the complexity of the search.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What really happens in the experiment at OPERA?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OPERA is located at the Gran Sasso National Laboratory in Italy. It is a neutrino
    physics experiment that primarily focuses on the study of neutrino oscillations.
    It is not specifically designed for finding dark matter.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f1237659642f7c75d0eb7dffc112212a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: When a supposedly dark matter particle (which we are trying to find) collides
    with the lead nuclei, the nucleus emits electrons in the form of a shower that’s
    detected on a screen. This is what we are trying to find. There is a problem though,
    when a neutrino collides with the lead nuclei, it also produces an electron and
    the same way an electromagnetic shower is produced which muddles the signal with
    the noise. We are trying to differentiate between this signal and the noise.
  prefs: []
  type: TYPE_NORMAL
- en: What we’ll do
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Essentially we have to sift through the data and distinguish between the signal
    and the noise, it can be accomplished using conventional machine learning but
    it’s still a herculean task. In a dataset of 10 million collisions, there would
    be hardly 10 thousand that would correspond to a signal. Such imbalance and sparsity
    in the dataset make it a skewed and difficult problem to solve. And because we
    like challenges, we will add a cherry on top and will use quantum machine learning
    algorithms instead of conventional ones (apologies for starting a sentence with
    a conjunction).
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are loads and loads of datasets present on the LHC website [here](https://opendata.cern.ch/search?page=1&size=20&type=Dataset)
    at your disposal; the one used in this experiment can be found [here](https://www.kaggle.com/datasets/prashantmudgal/dark-matter-classification-opera-experiement-lhc).
  prefs: []
  type: TYPE_NORMAL
- en: '**License**: The dataset is released under [**CC0**](https://archive.is/o/ZXMIM/https://creativecommons.org/share-your-work/public-domain/cc0)
    **(CC Zero)** whichis the *Creative Commons Public Domain Dedication License*
    ([https://opendata.cern.ch/record/16541](https://opendata.cern.ch/record/16541))'
  prefs: []
  type: TYPE_NORMAL
- en: The code is present on my [GitHub repo](https://github.com/Prashantmdgl9/Miscellaneous_Scripts/tree/main/Dark%20Matter).
  prefs: []
  type: TYPE_NORMAL
- en: The data consists of two h5 files, open30.h5 and test.h5; h5 is hdf i.e. hierarchical
    data format that’s used to store and organise large amounts of data in a compressed
    manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data contains the following variables:'
  prefs: []
  type: TYPE_NORMAL
- en: X — X coordinate of the base track
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Y — Y coordinate of the base track
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Z — Z coordinate of the base track
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TX — Angle from origin projected on X-axis
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TY — Angle from origin projected on the Y-axis
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Signal — A binary variable, 1 indicating signal and 0 indicating noise
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IBM’s quantum library — [qiskit 0.44.3](https://github.com/Qiskit/qiskit)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2808245a4551602b2903b872dccce4c9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: A note about the Variational Quantum Algorithms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quantum algorithms are designed to run on quantum computers but at the moment
    we are in the NISQ — Noisy Intermediate Scale Quantum era of quantum computers
    which makes the reproduction of the results difficult. The current quantum computers
    are very noise-prone, even a trivial change in thermodynamic conditions or other
    circuitry would impact the results a lot. The logic gate that we want to apply
    would turn into something else because of the noise. It’s undesirable.
  prefs: []
  type: TYPE_NORMAL
- en: What smart folks working on advanced methods have devised is something called
    variational algorithms, they use both classical and quantum computers for speed
    gain and accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: Essentially all the algorithms use some form of optimization and parameter adjustment,
    what variational algorithms do is use the quantum computer to approximate the
    cost function and then calculate the new values of the parameters of the cost
    function on a classical computer and then run with the new values on the quantum
    computer again. Thus, calculations are split between classical and quantum computers,
    speeding up the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use a variational quantum classifier here as the task is classifying
    signal and noise. For more info on IBM’s VQC: [https://learn.qiskit.org/course/machine-learning/variational-classification](https://learn.qiskit.org/course/machine-learning/variational-classification)'
  prefs: []
  type: TYPE_NORMAL
- en: Modelling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s just take a look at the data and the variables
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6f564ace336bac9aa23bbd2d69977d8e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at the pair plot to see if some correlation between the variables.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/29639672d792273d93a82f184e36e9fa.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Okay, there is a pattern but quite a complicated one!
  prefs: []
  type: TYPE_NORMAL
- en: After the usual boiler plater material including sampling, scaling, and train
    test split, we are ready for the quantum model.
  prefs: []
  type: TYPE_NORMAL
- en: Before we proceed, let’s run the Support Vector classification algorithm, so
    we have a baseline of the conventional ML.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1115cd381771ac8191b85399c4d4623c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 70% accuracy isn’t that great on the test data, but I haven’t done much feature
    engineering here. It will improve once I do so.
  prefs: []
  type: TYPE_NORMAL
- en: Now, quantum computer’s turn.
  prefs: []
  type: TYPE_NORMAL
- en: The problems are formulated in the form of gates and circuits that are fed qubits
    (quantum bits) in a quantum computer.
  prefs: []
  type: TYPE_NORMAL
- en: We haven’t dropped any feature — TX, TY, X, Y, Z; let’s use all of them and
    thus the number of qubits used in our circuit will be 5.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6e1512dc553c61a910ad7dafa855b841.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: That’s what the circuit looks like. It feeds 5 qubits to which Hadamard and
    P gates are applied. Hadamard changes the basis of the qubit from |0> to |+> and
    from |1> to | — > while the P gate causes a single-qubit rotation about the Z
    axis.
  prefs: []
  type: TYPE_NORMAL
- en: The next step after we form a circuit is Ansatz, it’s quite a common vernacular
    in the quantum world; it’s German for approach but in physics and mathematics
    it means an educated guess.
  prefs: []
  type: TYPE_NORMAL
- en: So, that’s what we have to do, to make educated guesses for the parameters —
    this will create a quantum state and will be executed on a quantum computer. The
    executed value will be compared with the desired value and depending on how far
    off we are, the optimiser will tune the parameters or the ansatz until we reach
    a good enough or a satisfactory value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1e586bbbd183d1e1058f370f9eb1b3e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: You see there are a lot of R gates applied. Essentially, all the qubits are
    just rotated around their axis to get some arbitrary starting value and that’s
    the ansatz.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s fit the VQC on the training data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Callback graphs are really cool. It’s like getting the results of your deeds
    in real-time.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d123534bf544b702a40bde0248c474fc.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Ok, a downward trend is promising which means it is learning but fitting it
    on the test data only would tell whether we are overfitting.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/03372b5567e2a4e78afbba776024ebef.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: It is marginally better than the conventional ML. I ran it using a simulator
    on the local machine. Maybe it would perform better if run on real quantum computers
    (nothing stops us, just that one has to queue up and with the server load these
    days, a simple task such as the addition of two numbers takes a few hours, not
    because it is slow but because more and more people line up and use the computation
    time) or spend more time on engineering the features.
  prefs: []
  type: TYPE_NORMAL
- en: Closing Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having said so, I am quite sure that the conventional ML algorithms will outperform
    quantum algorithms at the moment, especially for the classification tasks, as
    much research and many resources have been spent in making them robust and sophisticated.
    Once QML goes through such an overhaul, it will be a fair competition.
  prefs: []
  type: TYPE_NORMAL
- en: It doesn't mean that QML will replace ML, this is far from the truth, instead
    quantum computing is for those problems that classical computers can’t really
    solve in polynomial time or can’t even approximate. Machine learning will have
    its place and QML will make its own place in the larger scheme of things.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This post isn’t meant to exemplify the power of either ML or QML but only to
    show similarities between the two — how both of them differ in execution but are
    similar in flavour, how both are dependent on feature engineering and choice of
    hyperparameters.
  prefs: []
  type: TYPE_NORMAL
- en: Before we close, it would be interesting to see if there is a cluster that exists
    in the signals. We have separated the signal from the noise, can we cluster them
    to see if there is they form an electromagnetic shower by a dark matter particle?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/192a2b53a3a0646e1f2f7320f57c1b6d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Not bad! They aren’t distinctive but they aren’t awful either. One can see some
    patterns. The vertical nature of the clusters is because of the mass and the angle
    of the trajectory after the collision.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Interesting!
  prefs: []
  type: TYPE_NORMAL
- en: From the noisy data, we have extracted the best possible tracks which could
    be candidates for dark matter particle interactions.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I hope this small post might encourage you to take your quantum leap. Feel free
    to contact me on Twitter or by mail; as usual, I am open to criticism and comments
    that help me grow and learn.
  prefs: []
  type: TYPE_NORMAL
- en: '*PS: Once again, the code is present on my GitHub repo* [*here*](https://github.com/Prashantmdgl9/Miscellaneous_Scripts/tree/main/Dark%20Matter)*.*'
  prefs: []
  type: TYPE_NORMAL
