- en: 'Exploratory Data Analysis: What Do We Know About YouTube Channels (Part 2)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/exploratory-data-analysis-what-do-we-know-about-youtube-channels-part-2-754fab840e65](https://towardsdatascience.com/exploratory-data-analysis-what-do-we-know-about-youtube-channels-part-2-754fab840e65)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Getting statistical insights using Pandas and the YouTube Data API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://dmitryelj.medium.com/?source=post_page-----754fab840e65--------------------------------)[![Dmitrii
    Eliuseev](../Images/7c48f0c016930ead59ddb785eaf3e0e6.png)](https://dmitryelj.medium.com/?source=post_page-----754fab840e65--------------------------------)[](https://towardsdatascience.com/?source=post_page-----754fab840e65--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----754fab840e65--------------------------------)
    [Dmitrii Eliuseev](https://dmitryelj.medium.com/?source=post_page-----754fab840e65--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----754fab840e65--------------------------------)
    ·14 min read·Nov 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e78513f53e8dba730d5b6d2892ff1e4e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Souvik Banerjee, [Unsplash](https://unsplash.com/photos/black-and-white-laptop-computer-8dOk8JVESxY)
  prefs: []
  type: TYPE_NORMAL
- en: In the [first part](/exploratory-data-analysis-what-do-we-know-about-youtube-channels-3688c5cbc438)
    of the story, I collected statistical data from about 3000 YouTube channels and
    got some interesting insights. In this part, I will go a bit deeper, from the
    generic “channel” to the individual “video” level. I will show how to collect
    data about YouTube videos and what kind of insights we can get.
  prefs: []
  type: TYPE_NORMAL
- en: Methodology
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To collect data about YouTube videos, we need to perform several steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Get credentials for the YouTube Data API. It’s free, and the API limit of 10,000
    requests per day is enough for our task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find several YouTube channels that we want to analyze.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write some Python code to get the latest videos and their stats for a selected
    channel. YouTube analytics is available only for channel owners, and we can only
    get data *at the current moment*. But we can run the code for some time. In my
    case, I collected data for three weeks using Apache Airflow and a Raspberry Pi.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform the data analysis. I will be using Pandas, Matplotlib, and Seaborn for
    that.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Getting the YouTube API credentials and configuring the Apache AirFlow were
    described in my previous articles, and I recommend readers pause this one and
    read that part first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/exploratory-data-analysis-what-do-we-know-about-youtube-channels-3688c5cbc438?source=post_page-----754fab840e65--------------------------------)
    [## Exploratory Data Analysis: What Do We Know About YouTube Channels'
  prefs: []
  type: TYPE_NORMAL
- en: Getting statistical insights using Pandas and the YouTube Data API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/exploratory-data-analysis-what-do-we-know-about-youtube-channels-3688c5cbc438?source=post_page-----754fab840e65--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: And now, let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Getting the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get information about YouTube videos, I will use a [python-youtube](https://github.com/sns-sdks/python-youtube/tree/master)
    library. Surprisingly, there is no ready-to-use method to get the list of videos
    from a specific channel, and we need to implement it on our own.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to call the `get_channel_info` method, which, as its name suggests,
    will return us the basic information about the channel.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have a `statistics` part, containing the number of videos, views, and
    subscribers for a channel. The second section is `contentDetails`; it is what
    we need because it contains an ID for the “uploads” list. As we can see, channel
    uploads are stored as a “virtual” playlist, which was a bit surprising for me.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we need to call the `get_playlist_items` method, which returns us
    a list of videos from the required playlist.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, we will need a `videoId` and a `videoPublishedAt` fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Only at this step, after having a list with video IDs, can we find a number
    of views, likes, and comments for each video:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As a final step, I created a method that combines all these parts together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: A `limit` variable is useful for debugging; it allows us to minimize the number
    of requests for each query and not exceed the API quota limit.
  prefs: []
  type: TYPE_NORMAL
- en: As was mentioned earlier, only channel owners can get historical and analytics
    data; we can only get the data available at the *current moment*. But we can easily
    request the data (number of videos and their views, likes, and comments) periodically.
    Using [Apache Airflow](https://airflow.apache.org/), running on the Raspberry
    Pi, I kept this code running for three weeks. The requests were executed every
    3 hours, and the output of each request was saved in CSV (more details and a DAG
    example are available in the [first part](/exploratory-data-analysis-what-do-we-know-about-youtube-channels-3688c5cbc438)).
    Let’s now see what kind of insights we can get.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. ETL (Extract, Transform, Load)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As usual, before using the data for analytics, we need to transform it into
    a convenient form. Our ETL process is pretty straightforward. As an output from
    the Apache AirFlow task, I got a lot of CSV files. Let’s load these files and
    combine them into one dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s check the result for one video:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ccd3071dd80195c3177e714cb0266999.png)'
  prefs: []
  type: TYPE_IMG
- en: Sample dataframe, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Each row has a timestamp, video ID, video publication time, and the number of
    views, likes, and counts at the time when the data was collected. As we can see,
    the video `8J…4` was published on October 27, 2023, at 19.00\. At the beginning
    of my observation, it already had 514,948 views, and at the end of the dataframe,
    the number of views increased to 978,573.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we’re ready to have some fun.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Data Analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**3.1 Number of Views** As a warm-up, let’s display the number of views per
    video. I will use only videos made within the last two months.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'I collected the channel data every 3 hours, so I need only the last timestamps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s draw the bar chart using Matplotlib:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, I use the `ax.bar` to draw a bar chart and a `rescale` function to adjust
    the bar colors. The horizontal median line helps to see if the views are above
    or below the average.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s see the result for a **channel with 23,9M subscribers**, publishing
    videos in the “makeup” category:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aeaf422a0e0b4ae47afa7b96f90dce89.png)'
  prefs: []
  type: TYPE_IMG
- en: Number of views per last 2 months, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The result is interesting. We can see that the number of views per video is
    more or less consistent, and the median value is about 1M views. Is it a lot?
    The value itself is obviously large. But the channel has almost 24M subscribers,
    who are supposed to be interested in this content and to get notifications when
    new videos are published. A 1/24 ratio does not look big to me; are maybe people
    subscribing but losing interest pretty fast?
  prefs: []
  type: TYPE_NORMAL
- en: 'Another interesting “anomaly” with this channel caught my attention. Occasionally,
    I set the display interval to 1 year, and a large increase in the number of views
    became visible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f0fda17f680de5c2c4c50b44070ba12c.png)'
  prefs: []
  type: TYPE_IMG
- en: Number of views per year, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Apparently, the author published a lot of “short” videos, which got many (3–10
    million) views in that period. What happened later? Maybe the chief editor of
    the channel has been changed? Maybe creating “shorts” was not profitable? I don’t
    know. It may be possible to watch all videos in the web browser and try to find
    a reason, but it was definitely out of the scope of this test, and I’m not an
    expert in makeup anyway.
  prefs: []
  type: TYPE_NORMAL
- en: 'As another example, let’s see views for another **channel with 17.8M subscribers**,
    making gadget reviews:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/941f30b0a264528964f52dc058873673.png)'
  prefs: []
  type: TYPE_IMG
- en: Number of views, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: I don’t know if the results are content-specific (“gadget reviews” and “makeup”
    are naturally, intended for different audiences), but this channel has a much
    higher median number of views per video compared to the first one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now see how many views channels with a smaller audience can get. This
    gadget-related channel has **1.3M of subscribers**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/31a9f70fe39cc1a825d771b86e3c301a.png)'
  prefs: []
  type: TYPE_IMG
- en: Number of views, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'The difference is significant. A channel with 17.8M subscribers gets about
    3 million views per video, and the channel with 1.3M subscribers gets “only” 300K.
    For comparison, the next photography-related channel has a **115K audience**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/154e404cf866882f3a5f96cd5d469f36.png)'
  prefs: []
  type: TYPE_IMG
- en: Number of views, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the channel has a median number of 25K views per video.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, videos are not only shown to subscribers but are also displayed to
    anyone by the YouTube recommender system. What is the real ratio? We don’t know.
    From the bar charts, I can guess that only about 20% of subscribers are “active”.
    Others probably subscribed a long time ago and are not interested in the content
    anymore. It makes sense; for example, if I am going to buy a laptop, I can subscribe
    to a hardware reviews channel, but I would not be interested anymore after making
    a purchase.
  prefs: []
  type: TYPE_NORMAL
- en: '**3.2 Views Dynamic** We were able to see the number of views per video, but
    how fast can videos get these views? We already have a Matplotlib bar chart; let’s
    animate it! Only channel owners have access to the historical data, but I made
    the requests within three weeks, and we can easily see how the values changed
    within this interval. To do this, we only need to update the graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, I created an `FuncAnimation` object, which has an `animate_bar` function
    as a parameter. This function will be called automatically with different frame
    numbers; inside this function, I create a new bar chart and update the title.
    I also added a vertical line, representing the current date.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5d6ca0051f8ed55f1b7d8d8324b67f96.png)'
  prefs: []
  type: TYPE_IMG
- en: Number of views within 3 weeks, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: From this animation, we can see that a new video apparently gets at least 70%
    of views within the first week. Older videos also get some views, but this process
    is much slower.
  prefs: []
  type: TYPE_NORMAL
- en: 'But there can be an exception. In the next example, a channel has a 90K median
    number of views per video, but one of the videos probably became viral, was shared
    a lot, and got about a million views within 2–3 weeks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0342dab32cf2587bb0ee2037cd0c99bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Number of views within 3 weeks, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '**3.3 Views Distribution** After watching the bar chart, I’ve asked myself
    a question: Is the number of views distribution normal? Obviously, some videos
    are getting more views than others, but how consistent is that? It is easy to
    find an answer using Seaborn’s `histplot` method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'For this test, I used 500 as a video limit for the API request. The result
    for a channel in the “gadget reviews” category looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/be1ed792665eb9db66bef7734bbecbc4.png)'
  prefs: []
  type: TYPE_IMG
- en: Number of views distribution, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 17.8 million subscribers is a large number. This channel is definitely one of
    the top ones, and as we can see, it is producing more or less consistent results.
    The distribution looks normal, but it is slightly skewed. The median value for
    this chart is 3.8M views per video, but some videos got more than 10M views, and
    only 3 videos from 500 got more than 20 million.
  prefs: []
  type: TYPE_NORMAL
- en: 'A similar pattern can be seen for other channels with fewer subscribers, but
    in this case, the distribution is more skewed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2a9d8703d5844b789ebe8ff6a5c40963.png)'
  prefs: []
  type: TYPE_IMG
- en: Number of views distribution, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: This data may require a more detailed analysis. For example, it turned out that
    “normal videos” and “shorts” can have drastically different numbers of views,
    and ideally, they should be analyzed separately.
  prefs: []
  type: TYPE_NORMAL
- en: '**3.4 Bonus: Views Per Single Video** This article is already long, and I will
    give a bonus to readers who are patient enough to read it to this point. In 3.2,
    I made the animation, showing that most of the videos got a major number of views
    soon after the publication (by the way, this is also true for the TDS and Medium
    articles as well). Can we see this process in more detail? Actually, we can. I
    collected the data within several weeks, and there were enough videos that were
    published during that interval. Finding the latest videos is straightforward because
    we have a `videoPublishedAt` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'As a reminder, the data for a specific video looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2137205734230e4ea416a18d3ca3142c.png)'
  prefs: []
  type: TYPE_IMG
- en: Dataframe example, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, I “normalized” this data: my goal is to display a number of views from
    a publication time, which I will consider “0”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here, I also converted timestamps to the number of days since the publication
    date to make a graph more convenient to read.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can draw the graph using Matplotlib:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The result looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/626d025880a6f093668bce95b75f29de.png)'
  prefs: []
  type: TYPE_IMG
- en: Number of views per video, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Here, the line lengths are different because videos were published at different
    times. The oldest video was published almost two weeks ago, and the latest video
    was published only two days before this data was collected.
  prefs: []
  type: TYPE_NORMAL
- en: From this graph, I have two interesting observations.
  prefs: []
  type: TYPE_NORMAL
- en: First, at least for that channel, my assumption was correct, and these videos
    got the maximum number of views immediately after the publication. And even more,
    the curves (for example, red and green ones) are almost identical.
  prefs: []
  type: TYPE_NORMAL
- en: Second, attentive readers may see two distinct groups there — the first two
    videos are getting about 3M views, and another three videos apparently will get
    about 0.5M views. Indeed, the videos are different. Lines at the top represent
    “Normal” videos, and lines at the bottom represent “YouTube Shorts”. Apparently,
    at least for that channel, the audience interest in “shorts” is lower.
  prefs: []
  type: TYPE_NORMAL
- en: 'But obviously, the results may vary. Firstly, some videos may become more popular
    or even viral; they can get a much bigger amount of views:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/85f8fb1e38f5e471a3ab5906b5ad5aa4.png)'
  prefs: []
  type: TYPE_IMG
- en: Number of views per video, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, the content itself also matters. For example, gadget reviews are mostly
    interesting when they are “fresh,” but videos about health, relationships, sports,
    makeup, or any similar topic can be useful for viewers for a longer time. Last
    but not least, these particular channels have a lot of subscribers, and videos
    get many views soon after publication. For “newbies”, the results may be different,
    and most of the viewers for a new channel may come from the YouTube recommender
    system or search results. Thus, I can only recommend that readers do their own
    research and select a YouTube channel that is mostly close to what they want to
    know.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this article, I showed how to collect and analyze data about different YouTube
    channels and videos. In the [first part](/exploratory-data-analysis-what-do-we-know-about-youtube-channels-3688c5cbc438),
    I focused on general properties, like the number of views per channel. In this
    part, I focused on individual videos. We were able to see how often new videos
    are published on different channels, how many views they can get, and how fast
    this process is going. This analytics is usually available only for channel owners,
    but with the help of the YouTube Data API, we can collect the data for free with
    high precision. This can be interesting not only for those who want to start a
    new channel but also from cultural and statistical perspectives.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, YouTube is a gigantic streaming platform, with millions of channels
    and billions of videos. Videos about cats, mathematical problems, or laptop reviews
    can get absolutely different numbers of views, likes, and comments. So, I encourage
    readers to do their own tests with the channels they are interested in. In this
    article, I focused only on views, but the number of comments or likes can be analyzed
    the same way as well (by the way, we can get likes via API, but YouTube removed
    the number of dislikes from public access in 2021).
  prefs: []
  type: TYPE_NORMAL
- en: In the next and last part, I will focus on YouTube “Shorts”. These types of
    videos are displayed on a separate YouTube page, which has a different UI, and
    apparently, the number of views or likes can be drastically different. Stay tuned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Those who are interested in social data analysis are also welcome to read other
    articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Exploratory Data Analysis: What Do We Know About YouTube Channels (Part 1)](/exploratory-data-analysis-what-do-we-know-about-youtube-channels-3688c5cbc438)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Housing Rental Market in Germany: Exploratory Data Analysis with Python](https://medium.com/towards-data-science/housing-rental-market-in-germany-exploratory-data-analysis-with-python-3975428d07d2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What People Write about Climate: Twitter Data Clustering in Python](https://medium.com/towards-data-science/what-people-write-about-climate-twitter-data-clustering-in-python-2fbbd2b95906)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Finding Temporal Patterns in Twitter Posts: Exploratory Data Analysis with
    Python](https://medium.com/towards-data-science/finding-temporal-patterns-in-twitter-posts-exploratory-data-analysis-with-python-8aac618c8699)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Data Analysis: What Do We Know About Pop Songs?](https://blog.devgenius.io/python-data-analysis-what-do-we-know-about-pop-songs-b6197d85d4)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you enjoyed this story, feel free [to subscribe](https://medium.com/@dmitryelj/membership)
    to Medium, and you will get notifications when my new articles will be published,
    as well as full access to thousands of stories from other authors. Full source
    code and a Jupyter notebook for this article are also available on my [Patreon
    page](https://www.patreon.com/deliuseev).
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading.
  prefs: []
  type: TYPE_NORMAL
