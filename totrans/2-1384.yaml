- en: 'Jupyter Already Has a Perfect Text Editor: This is How You Can Configure It'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/jupyter-already-has-a-perfect-text-editor-this-is-how-you-can-configure-it-4d3eb37878f1](https://towardsdatascience.com/jupyter-already-has-a-perfect-text-editor-this-is-how-you-can-configure-it-4d3eb37878f1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to get a VS Code-like experience in Jupyter with a great text editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://dpoulopoulos.medium.com/?source=post_page-----4d3eb37878f1--------------------------------)[![Dimitris
    Poulopoulos](../Images/ce535a1679779f5a2ec8b024e6691e50.png)](https://dpoulopoulos.medium.com/?source=post_page-----4d3eb37878f1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4d3eb37878f1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4d3eb37878f1--------------------------------)
    [Dimitris Poulopoulos](https://dpoulopoulos.medium.com/?source=post_page-----4d3eb37878f1--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4d3eb37878f1--------------------------------)
    ·7 min read·Mar 3, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c40ed0aa20061ca652dd94fb8205a3a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Douglas Lopes](https://unsplash.com/@douglasamarelo?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'This article is the second part of a series. Check out the full series: [Part
    I](/unlocking-the-potential-of-jupyterlab-discover-the-powerful-text-editor-you-never-knew-you-had-af18bf5bce3f),
    [Part III](/jupyter-already-has-a-perfect-text-editor-building-a-python-ide-20063044749b),
    [Part IV](/the-perfect-text-editor-for-jupyter-a-complete-python-ide-608dd466560b).'
  prefs: []
  type: TYPE_NORMAL
- en: Our previous article stated that many engineers do not consider JupyterLab a
    complete IDE. One of the main reasons is that JupyterLab does not have a powerful
    text editor like VS Code or Sublime Text.
  prefs: []
  type: TYPE_NORMAL
- en: JupyterLab allows users to create and share documents that contain live code,
    equations, visualizations, and narrative text. It’s the perfect tool for this
    kind of interactive work. However, the truth is that its text editor is as primitive
    as Windows Notepad; you can write code, but the experience is far from ideal.
  prefs: []
  type: TYPE_NORMAL
- en: Can we do something about this? We would love a Docker image that we can run
    anytime on any machine and have our workspace ready to go. It’s not easy to achieve
    this with VS Code, except if you’re willing to pay. But JupyterLab is free; it
    has a [vibrant community](https://youtu.be/9Q6sLbz37gk), and if we could take
    the best of both worlds, we would have built a free, powerful, and portable workspace.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a step back and look at JupyterLab as a platform, not an IDE. JupyterLab
    has a terminal emulator. That means that you can do almost everything you can
    think of. With this thought, in our previous article, we started installing Neovim
    and configuring it to act and look like VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/unlocking-the-potential-of-jupyterlab-discover-the-powerful-text-editor-you-never-knew-you-had-af18bf5bce3f?source=post_page-----4d3eb37878f1--------------------------------)
    [## Unlocking the Potential of JupyterLab: Discover the Powerful Text Editor You
    Never Knew You Had'
  prefs: []
  type: TYPE_NORMAL
- en: Unleash Your Coding Efficiency and Productivity in JupyterLab with a GreatText
    Editor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/unlocking-the-potential-of-jupyterlab-discover-the-powerful-text-editor-you-never-knew-you-had-af18bf5bce3f?source=post_page-----4d3eb37878f1--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: We aim to create a JupyterLab image containing a powerful Notebook editor and
    a feature-packed Python IDE.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bf26f9b2d357744f69b3527f9800cfe0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Today, let’s start by configuring the core functionality and the looks of the
    editor.
  prefs: []
  type: TYPE_NORMAL
- en: '[Learning Rate](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=neovim-basic-settings-and-looks)
    is a newsletter for those who are curious about the world of ML and MLOps. If
    you want to learn more about topics like this subscribe [here](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=neovim-basic-settings-and-looks).
    You’ll hear from me on the last Sunday of every month with updates and thoughts
    on the latest MLOps news and articles!'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Core Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s start by setting the core settings of our editor. Inside your `home`
    directory, there is a hidden folder called `.config`. Go inside and create a new
    folder called `nvim`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a new file inside the `nvim` folder called `init.vim`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`init.vim` is the file you will use to configure the behavior and looks of
    Neovim.'
  prefs: []
  type: TYPE_NORMAL
- en: In the last article, I urged you to learn your Vim bindings by completing the
    built-in Vim Tutor tutorial. I’m assuming you’ve already done that; thus, we will
    use Neovim to edit any files as we advance. The only way to get used to it is
    to use it as much as possible, and believe me, once you get used to it, you will
    be amazed by how much faster you can do anything you want.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, without further ado, let’s open and edit the file you created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Our first settings will enable simple features like line numbers, text encoding,
    and syntax highlighting. Copy and paste the following lines in your `init.vim`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Whenever you see a line starting with quotes, it’s a comment. You can save and
    exit the file using `:wq` in normal mode and open it again to observe the changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, Vim and Neovim uses the `h j k l` keys for navigation. I don’t want to
    move my fingers from the standard position to navigate around a file. So, I like
    to remap them to the keys that my fingers already lay upon: `j k l ;`. To achieve
    this, add the following lines in `init.vim`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let’s tackle the Python-specific settings, like auto indenting and
    setting a line break at `79` characters. Copy the following lines in `init.vim`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now that we completed these basic settings let’s handle the looks. After all,
    everyone wants to work in a beautiful environment.
  prefs: []
  type: TYPE_NORMAL
- en: Make it Beautiful
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make our editor look the way we want, we’ll dive into the world of plugins.
    Vim and Neovim have a vibrant community that releases and maintains thousands
    of plugins. These plugins change the behavior of every little detail in the editor.
    If you have an issue with Neovim, chances are that someone else has already bumped
    into it and released a plugin that makes things easier.
  prefs: []
  type: TYPE_NORMAL
- en: Our first step is to install a plugin manager that will install, uninstall,
    and update the plugins. For this, I prefer using [vim-plug](https://github.com/junegunn/vim-plug).
    To install vim-plug, run the command for your platform specified in the [docs](https://github.com/junegunn/vim-plug#unix-linux).
    You’d want to use the one for Linux if you’re running inside the Docker image
    we started in our previous post.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have a plugin manager installing a Neovim plugin is trivial. So,
    to make our editor more beautiful, we’ll use four plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: 'vim-airline: a lean & mean status/tabline for vim'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'vim-airline-themes: a collection of themes for vim-airline'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'awesome-vim-color-schemes: a collection of awesome color schemes for Neo/vim'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'vim-devicons: a collection of file-type icons for Neovim'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To install these plugins, first, add the following lines in `init.vim`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Save and quit the file, then open it again and run the following Neovim command:
    `:PlugInstall`. A new pane will start, and your plugins will be installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4a0ec09635fa8b482aa3e2d5a4972bed.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Quite every window using the command `:qa` and open the file again. The changes
    should be immediately visible. Now, let’s fix some things. First, you’ll notice
    that the terminal does not display some icons correctly. This is because you need
    to install [Nerd Fonts](https://www.nerdfonts.com/) and use them in your terminal.
    I’ll install [source-code-pro](https://www.programmingfonts.org/#source-code-pro).
    First, create a `.fonts` directory under your `home`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the source-code-pro Nerd Font:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Unzip it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, run `fc-cache -fv` to manually rebuild the font cache. Then, go into
    your `settings > advanced settings editor` menu, locate the `terminal` entry in
    the left sidebar and change the “Font Family” option to “SauceCodePro Nerd Font
    Mono”. That’s it! Open the `init.vim` file again with Neovim, and the icons should
    be there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/00cee70fb0caada478a44442d4e26013.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'However, some things still look quirky. Let’s fix them and set our central
    theme. I like `molokai`, so I will go with this. Add the following lines int your
    `init.vim`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Again, save and exit, open the file again, and everything should work. Congratulations,
    you have now set the foundations for making Neovim your perfect Python IDE inside
    JupyterLab.
  prefs: []
  type: TYPE_NORMAL
- en: Save your Work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you’re working in the Docker container we started in our previous article
    (which you should), I’ll leave you with a final tip. To save the work you’ve done
    so far in your own image, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will create a new layer on top of the currently running container’s image
    and package everything in a new image you can push to your DockerHub account.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, for me, this command would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: That means that you can pull `dpoulopoulos/jupyter:v0.0.1` and find everything
    we did here inside!
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll dive into more advanced features, like how to add a file system
    explorer pane and a code navigation window. Till then, practice learning your
    Vim bindings!
  prefs: []
  type: TYPE_NORMAL
- en: About the Author
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: My name is [Dimitris Poulopoulos](https://www.dimpo.me/), and I’m a machine
    learning engineer working for [Arrikto](https://www.arrikto.com/). I have designed
    and implemented AI and software solutions for major clients such as the European
    Commission, Eurostat, IMF, the European Central Bank, OECD, and IKEA.
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in reading more posts about Machine Learning, Deep Learning,
    Data Science, and DataOps, follow me on [Medium](https://towardsdatascience.com/medium.com/@dpoulopoulos/follow),
    [LinkedIn](https://www.linkedin.com/in/dpoulopoulos/), or [@james2pl](https://twitter.com/james2pl)
    on Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: Opinions expressed are solely my own and do not express the views or opinions
    of my employer.
  prefs: []
  type: TYPE_NORMAL
