["```py\n!pip install uform\nimport uform\nmodel = uform.get_model('unum-cloud/uform-vl-english')\n```", "```py\n#List all files\nurls = get_image_urls_from_github()\n\n#Download each file\nimages = download_images(urls)\n\n#Render out a few examples\nrender_examples(images)\n```", "```py\n\"\"\"Implementing text to image search\nusing the uform model to encode text and all images. Then using cosine\nsimilarity to find images which match the specified text. Rendering out the\ntop 5 results\n\"\"\"\n\nimport torch.nn.functional as F\n\n#defining search phrase\ntext = \"a rainbow by the water\"\nprint(f'search text: \"{text}\"')\n\n#embedding text\ntext_data = model.preprocess_text(text)\ntext_embedding = model.encode_text(text_data)\n\n#calculating cosine similarity\nsort_ls = []\nprint('encoding and calculating similarity...')\nfor image in tqdm(images):\n    #encoding image\n    image_data = model.preprocess_image(image)\n    image_embedding = model.encode_image(image_data)\n\n    #calculating similarity\n    sim = F.cosine_similarity(image_embedding, text_embedding)\n\n    #appending to list for later sorting\n    sort_ls.append((sim, image))\n\n#sorting by similarity\nsort_ls.sort(reverse=True, key = lambda t: t[0])\n\nprint('top 5 most similar results:')\n_, axs = plt.subplots(1, 5, figsize=(12, 8))\naxs = axs.flatten()\nfor img, ax in zip([im for sim, im in sort_ls][:5], axs):\n    ax.imshow(img)\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()\n```", "```py\n\"\"\"Implementing image to image search\nsimilar to previous approach, except all images are compared to an input image.\nRendering out the top 5 results\n\"\"\"\n\n#defining search image\ninput_image = images[15]\n\n#rendering search image\nprint('input image:')\nfig = plt.figure(figsize=(4,4))\nax = fig.add_subplot(111)\nax.imshow(input_image)\nax.get_xaxis().set_visible(False)\nax.get_yaxis().set_visible(False)\nplt.show()\n\n#embedding image\nimage_data = model.preprocess_image(input_image)\nsearch_image_embedding = model.encode_image(image_data)\n\n#calculating cosine similarity\nsort_ls = []\nprint('encoding and calculating similarity...')\nfor image in tqdm(images):\n    #encoding image\n    image_data = model.preprocess_image(image)\n    image_embedding = model.encode_image(image_data)\n\n    #calculating similarity\n    sim = F.cosine_similarity(image_embedding, search_image_embedding)\n\n    #appending to list for later sorting\n    sort_ls.append((sim, image))\n\n#sorting by similarity\nsort_ls.sort(reverse=True, key = lambda t: t[0])\n\nprint('top 5 most similar results:')\n_, axs = plt.subplots(1, 5, figsize=(12, 8))\naxs = axs.flatten()\nfor img, ax in zip([im for sim, im in sort_ls][:5], axs):\n    ax.imshow(img)\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()\n```"]