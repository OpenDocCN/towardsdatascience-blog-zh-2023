- en: 5 Signs You've Become an Advanced Pythonista Without Even Realizing It
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你已经成为高级 Pythonista 的 5 个迹象，你可能都没意识到
- en: 原文：[https://towardsdatascience.com/5-signs-youve-become-an-advanced-pythonista-without-even-realizing-it-2b1dd7ef57f3](https://towardsdatascience.com/5-signs-youve-become-an-advanced-pythonista-without-even-realizing-it-2b1dd7ef57f3)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/5-signs-youve-become-an-advanced-pythonista-without-even-realizing-it-2b1dd7ef57f3](https://towardsdatascience.com/5-signs-youve-become-an-advanced-pythonista-without-even-realizing-it-2b1dd7ef57f3)
- en: Time to take credit
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时候到了，应该获得认可
- en: '[](https://ibexorigin.medium.com/?source=post_page-----2b1dd7ef57f3--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----2b1dd7ef57f3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2b1dd7ef57f3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2b1dd7ef57f3--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----2b1dd7ef57f3--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ibexorigin.medium.com/?source=post_page-----2b1dd7ef57f3--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----2b1dd7ef57f3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2b1dd7ef57f3--------------------------------)[![数据科学前沿](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2b1dd7ef57f3--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----2b1dd7ef57f3--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2b1dd7ef57f3--------------------------------)
    ·8 min read·Feb 13, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [数据科学前沿](https://towardsdatascience.com/?source=post_page-----2b1dd7ef57f3--------------------------------)
    ·阅读时间 8 分钟·2023年2月13日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/a2033ec4c4744971f2de38e2fa95ec63.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a2033ec4c4744971f2de38e2fa95ec63.png)'
- en: Image by [Charles Thonney](https://pixabay.com/users/summerglow-20203311/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7120431)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7120431)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Charles Thonney](https://pixabay.com/users/summerglow-20203311/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7120431)
    提供，来源于 [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7120431)
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: You've been programming in Python for a while now, whipping up scripts and solving
    problems left and right. You think you're pretty good, don't you? Well, hold on
    to your hats, folks, because you might just be an advanced Pythonista without
    even realizing it!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经编写 Python 代码一段时间了，编写脚本并解决各种问题。你认为自己已经很不错了，是不是？好吧，大家抓紧了，因为你可能已经成为一名高级 Pythonista，却未曾意识到！
- en: From closure to context managers, I've got a list of advanced Python features
    that will make you say, "I've been using that all along!".
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从闭包到上下文管理器，我列出了一些高级 Python 特性，这些特性会让你感叹：“我一直在用这些！”
- en: Even if these things are new to you, you'll have an excellent checklist to complete
    to take your game to the next level.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 即使这些概念对你来说是新的，你也将拥有一个出色的检查清单，将你的技能提升到新的水平。
- en: 1\. Scope
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1. 作用域
- en: A critical aspect of advanced Python programming is deep familiarity with the
    concept of scope.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 高级 Python 编程的一个关键方面是对作用域概念的深入了解。
- en: Scope defines the order in which the Python interpreter looks up names in a
    program. Python scope follows the **LEGB** rule (local, enclosing, global, and
    built-in scopes). According to the rule, when you access a name (it can be anything,
    a variable, a function, or a class), the interpreter looks for it in *local*,
    *enclosing*, *global,* and *built-in* scopes, in order.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 作用域定义了 Python 解释器在程序中查找名称的顺序。Python 的作用域遵循 **LEGB** 规则（本地、封闭、全局和内置作用域）。根据这一规则，当你访问一个名称（它可以是变量、函数或类）时，解释器会按顺序在
    *本地*、*封闭*、*全局* 和 *内置* 作用域中查找。
- en: Let's see examples to understand each level better.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过示例更好地理解每个级别。
- en: '**Example 1 — Local Scope**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 1 — 本地作用域**'
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, `x` is only defined in the scope that is *local* to `func`. That's why
    it isn't accessible anywhere else in the script.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`x` 仅在 *本地* 于 `func` 的作用域中定义。因此，它在脚本的其他地方无法访问。
- en: '**Example 2 — Enclosing Scope**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 2 — 封闭作用域**'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Enclosing scope is the intermediary scope between local and global scopes. In
    the example above, `x` is in the local scope of `outer_func`. On the other hand,
    `x` is in the *enclosing scope* relative to the nested `inner_func` function.
    Local scope always has read-only access to the enclosing scope.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 包含作用域是局部作用域和全局作用域之间的中介作用域。在上面的示例中，`x`在`outer_func`的局部作用域中。另一方面，`x`相对于嵌套的`inner_func`函数在*包含作用域*中。局部作用域总是具有对包含作用域的只读访问权限。
- en: '**Example 3 — Global Scope**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 3 — 全局作用域**'
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, `x` and `func` are defined in the global scope, which means they can be
    read from anywhere in the current script.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`x`和`func`定义在全局作用域中，这意味着它们可以从当前脚本中的任何地方读取。
- en: 'To modify them in smaller levels of scope (local and enclosing), they should
    be accessed with the `global` keyword:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要在更小的作用域（局部和包含）中修改它们，应使用`global`关键字访问它们：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Example 4 — Built-in scope**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 4 — 内建作用域**'
- en: Built-in scope includes every already-defined library, class, function, and
    variable that **doesn't require** explicit import statements. Some examples of
    built-in functions and variables in Python include `print`, `len`, `range`, `str`,
    `int`, `float`, etc.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 内建作用域包括所有已经定义的库、类、函数和变量，这些都**不需要**显式的导入语句。Python 中的一些内建函数和变量的例子包括`print`、`len`、`range`、`str`、`int`、`float`等。
- en: 2\. Function closure
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 函数闭包
- en: A firm grasp of scope opens the doors to another important concept — function
    closure.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对作用域的扎实掌握开启了另一个重要概念的大门——函数闭包。
- en: By default, after the function finishes execution, it returns to a blank state.
    This means its memory is wiped of all of its past arguments.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，函数执行完毕后，会返回到一个空白状态。这意味着其内存会被清除所有过去的参数。
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Above, we assigned the value of 3 to `x` but the function forgot it after execution.
    What if we don't want it to forget the value of `x`?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我们将3的值分配给了`x`，但函数在执行后忘记了它。如果我们不想让它忘记`x`的值怎么办？
- en: This is where *function closure* comes into play. By defining a variable in
    the enclosing scope of some inner function, you can store it in the inner function’s
    memory even after the function returns.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是*函数闭包*发挥作用的地方。通过在某个内函数的包含作用域中定义变量，你可以将其存储在内函数的内存中，即使函数返回后也能保持。
- en: 'Here is a simple example function that counts the number of times it was executed:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的示例函数，用于计算其执行次数：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'By all rules of Python, we should have lost the `counter` variable after the
    first execution. But since it is in the inner function''s closure, it will stay
    there till you close the session:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 Python 的所有规则，我们在第一次执行后应该已经丢失了`counter`变量。但是，由于它在内函数的闭包中，它会一直存在直到你关闭会话：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 3\. Decorators
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 装饰器
- en: Function closures have more serious applications than simple counters. One of
    them is creating decorators. A decorator is a nested function you can add to other
    functions to enhance or even modify their behavior.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 函数闭包有比简单计数器更重要的应用。其中之一是创建装饰器。装饰器是一个嵌套函数，你可以将其添加到其他函数中以增强或甚至修改它们的行为。
- en: For example, below, we are creating a *caching* decorator that remembers the
    state of every single positional and keyword argument of a function.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面我们正在创建一个*caching*装饰器，它记住了函数的每一个位置参数和关键字参数的状态。
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `stateful_function` decorator can now be added to computation-heavy functions
    that might be reused on the same arguments. The example is the following recursive
    Fibonacci function that returns the *n*th number in the sequence:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`stateful_function` 装饰器现在可以添加到可能会在相同参数上重复使用的计算密集型函数中。示例是以下递归斐波那契函数，它返回序列中的*n*th数字：'
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We found the humongous 1000th number in the Fibonacci sequence in a fraction
    of a second. Here is how much the same process would take without the caching
    decorator:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在不到一秒的时间里找到了斐波那契序列中的第1000个巨大的数字。下面是没有缓存装饰器的情况下，执行相同过程所需的时间：
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: It took 21 seconds to calculate the 40th number. It would take days to calculate
    the 1000th without caching.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 计算第40个数字花费了21秒。如果没有缓存，计算第1000个数字将需要几天时间。
- en: 'You can learn the hairy details of how to create your own decorators (including
    scope and closures) in my separate post:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我另一篇文章中了解如何创建自己的装饰器（包括作用域和闭包）的详细信息：
- en: '[](/an-in-depth-tutorial-to-python-decorators-that-you-can-actually-use-1e34d3d2d305?source=post_page-----2b1dd7ef57f3--------------------------------)
    [## An In-Depth Tutorial to Python Decorators That You Can Actually Use'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/an-in-depth-tutorial-to-python-decorators-that-you-can-actually-use-1e34d3d2d305?source=post_page-----2b1dd7ef57f3--------------------------------)
    [## 实用的 Python 装饰器深入教程'
- en: Edit description
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑描述
- en: towardsdatascience.com](/an-in-depth-tutorial-to-python-decorators-that-you-can-actually-use-1e34d3d2d305?source=post_page-----2b1dd7ef57f3--------------------------------)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/an-in-depth-tutorial-to-python-decorators-that-you-can-actually-use-1e34d3d2d305?source=post_page-----2b1dd7ef57f3--------------------------------)
- en: 4\. Generators
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 生成器
- en: Generators are powerful constructs in Python that allows processing of large
    amounts of data efficiently.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器是 Python 中强大的构造，可以高效地处理大量数据。
- en: Let's say you have a 10GB log file after the crash of some software. To find
    out what went wrong, you have to efficiently sift through it in Python.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在某个软件崩溃后有一个10GB的日志文件。为了找出出了什么问题，你必须在 Python 中高效地筛选它。
- en: 'The worst way to do this is to read the whole file like below:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 做这件事的最糟糕方法是像下面这样读取整个文件：
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Since you go through the logs line by line, you don''t need to read all 10GBs,
    just chunks of it at a time. This is where you can use generators:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你逐行处理日志，你不需要读取所有的10GB，只需一次处理其中的块即可。这就是你可以使用生成器的地方：
- en: '[PRE17]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Above, we defined a generator that iterates the lines of the log file only 1024
    at a time. As a result, the for loop at the end is highly efficient. In every
    iteration of the loop, only 1024 lines of the file are in memory. The previous
    chunks are discarded, while the rest are only loaded as needed.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我们定义了一个生成器，它一次仅迭代日志文件的1024行。因此，末尾的`for`循环非常高效。在每次循环迭代中，内存中只有1024行文件内容。之前的块会被丢弃，而其余内容仅在需要时加载。
- en: Another feature of generators is the ability to yield an element at a time,
    even outside loops, with the `next` function. Below, we are defining a blazing-fast
    function that generates the Fibonacci sequence.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器的另一个特点是能够逐个生成元素，即使在循环之外，也可以使用`next`函数。下面，我们定义了一个极速的函数来生成斐波那契数列。
- en: 'To create the generator, you call the function once and call `next` on the
    resulting object:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建生成器，你需要调用一次函数，然后在结果对象上调用`next`：
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You can read the following post on generators to learn more.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以阅读下面的文章来了解更多关于生成器的信息。
- en: '[](https://realpython.com/introduction-to-python-generators/?source=post_page-----2b1dd7ef57f3--------------------------------)
    [## How to Use Generators and yield in Python - Real Python'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://realpython.com/introduction-to-python-generators/?source=post_page-----2b1dd7ef57f3--------------------------------)
    [## 如何在 Python 中使用生成器和 yield - Real Python'
- en: Introduced with PEP 255, generator functions are a special kind of function
    that return a lazy iterator. These are…
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成器函数是 PEP 255 引入的一种特殊函数，返回一个懒惰的迭代器。这些是……
- en: realpython.com](https://realpython.com/introduction-to-python-generators/?source=post_page-----2b1dd7ef57f3--------------------------------)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: realpython.com](https://realpython.com/introduction-to-python-generators/?source=post_page-----2b1dd7ef57f3--------------------------------)
- en: 5\. Context managers
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 上下文管理器
- en: You must have been using context managers for a long time now. They allow developers
    to manage resources efficiently, like files, databases, and network connections.
    They automatically open and close resources, leading to clean and error-free code.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你一定已经使用上下文管理器很长时间了。它们允许开发者高效管理资源，如文件、数据库和网络连接。它们自动打开和关闭资源，从而使代码干净且无错误。
- en: But, there is a big difference between using context managers and writing your
    own. When done right, they allow you to abstract a lot of boilerplate code on
    top of their original functionality.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，使用上下文管理器和自己编写的上下文管理器之间有很大的区别。做得对的话，它们可以让你在原有功能的基础上抽象出很多样板代码。
- en: 'One popular example of a custom context manager is a timer:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一个流行的自定义上下文管理器的例子是计时器：
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Above, we are defining a `TimerContextManager` class that will serve as our
    future context manager. Its `__enter__` method defines what happens when we enter
    the context with the `with` keyword. In this case, we start the timer.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我们定义了一个`TimerContextManager`类，它将作为我们未来的上下文管理器。它的`__enter__`方法定义了当我们使用`with`关键字进入上下文时发生的事情。在这种情况下，我们启动了计时器。
- en: In `__exit__`, we go out of the context, stop the timer, and report elapsed
    time.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在`__exit__`中，我们退出上下文，停止计时器，并报告经过的时间。
- en: '[PRE22]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Here is a more complex example that enables locking resources so that they can
    be used by one process at a time.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个更复杂的示例，它使资源锁定，以便每次只能由一个进程使用。
- en: '[PRE24]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If you want a more gentle introduction to context managers, check out my article
    on the topic.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想更温和地了解上下文管理器，请查看我关于这个话题的文章。
- en: '[](/how-to-build-custom-context-managers-in-python-31727ffe96e1?source=post_page-----2b1dd7ef57f3--------------------------------)
    [## How to Build Custom Context Managers in Python'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/how-to-build-custom-context-managers-in-python-31727ffe96e1?source=post_page-----2b1dd7ef57f3--------------------------------)
    [## 如何在 Python 中构建自定义上下文管理器'
- en: Edit description
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑描述
- en: towardsdatascience.com](/how-to-build-custom-context-managers-in-python-31727ffe96e1?source=post_page-----2b1dd7ef57f3--------------------------------)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/how-to-build-custom-context-managers-in-python-31727ffe96e1?source=post_page-----2b1dd7ef57f3--------------------------------)'
- en: If you want to go down the rabbit hole and learn everything about them, here
    is another excellent RealPython article.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想深入了解并学习所有相关内容，这里还有一篇出色的 RealPython 文章。
- en: '[](https://realpython.com/python-with-statement/?source=post_page-----2b1dd7ef57f3--------------------------------)
    [## Context Managers and Python''s with Statement - Real Python'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 上下文管理器与 Python 的 with 语句 - Real Python](https://realpython.com/python-with-statement/?source=post_page-----2b1dd7ef57f3--------------------------------)'
- en: 'In this tutorial, you''ll learn: One common problem you''ll face in programming
    is how to properly manage external…'
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在本教程中，你将学习：你在编程中常遇到的一个问题是如何正确管理外部…
- en: realpython.com](https://realpython.com/python-with-statement/?source=post_page-----2b1dd7ef57f3--------------------------------)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[realpython.com](https://realpython.com/python-with-statement/?source=post_page-----2b1dd7ef57f3--------------------------------)'
- en: Conclusion
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: There you have it, folks! How many times did you say, "I knew that!"? Even if
    it wasn't that many times, you now know the things to learn to become advanced.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，各位！你有多少次说过，“我知道这一点！”？即使不是很多次，你现在也知道了要学习的东西，以变得更高级。
- en: Don't be afraid of the discomfort that comes with learning new things. Just
    remember, with great power comes (I won't say it!) more challenging bugs to fix.
    But hey, you are a pro now, what's a little debugging to you?
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 不要害怕学习新事物带来的不适。只要记住，伟大的力量伴随着（我不说了！）更多挑战性的 bug 需要修复。但嘿，你现在是个高手了，小小的调试对你来说算什么？
- en: Thank you for reading!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！
- en: Loved this article and, let’s face it, its bizarre writing style? Imagine having
    access to dozens more just like it, all written by a brilliant, charming, witty
    author (that’s me, by the way :).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢这篇文章吗？让我们面对现实，它的奇特写作风格？想象一下能访问更多类似的文章，全部由一位才华横溢、迷人、机智的作者（顺便说一下，就是我 :））。
- en: For only 4.99$ membership, you will get access to not just my stories, but a
    treasure trove of knowledge from the best and brightest minds on Medium. And if
    you use [my referral link](https://ibexorigin.medium.com/membership), you will
    earn my supernova of gratitude and a virtual high-five for supporting my work.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 仅需4.99美元的会员费，你不仅可以访问我的故事，还能获取来自 Medium 上最优秀、最聪明头脑的知识宝藏。如果你使用 [我的推荐链接](https://ibexorigin.medium.com/membership)，你将获得我超级nova的感激和虚拟击掌以支持我的工作。
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----2b1dd7ef57f3--------------------------------)
    [## Join Medium with my referral link — Bex T.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 通过我的推荐链接加入 Medium — Bex T.](https://ibexorigin.medium.com/membership?source=post_page-----2b1dd7ef57f3--------------------------------)'
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取我所有⚡高级⚡内容的独家访问权，并在 Medium 上畅享无限支持我的工作，通过购买我…
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----2b1dd7ef57f3--------------------------------)
    ![](../Images/c9f77aa48a95aa1c7ccc67e064f39990.png)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----2b1dd7ef57f3--------------------------------)
    ![](../Images/c9f77aa48a95aa1c7ccc67e064f39990.png)'
