- en: 5 Signs You've Become an Advanced Pythonista Without Even Realizing It
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/5-signs-youve-become-an-advanced-pythonista-without-even-realizing-it-2b1dd7ef57f3](https://towardsdatascience.com/5-signs-youve-become-an-advanced-pythonista-without-even-realizing-it-2b1dd7ef57f3)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Time to take credit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/?source=post_page-----2b1dd7ef57f3--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----2b1dd7ef57f3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2b1dd7ef57f3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2b1dd7ef57f3--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----2b1dd7ef57f3--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2b1dd7ef57f3--------------------------------)
    ·8 min read·Feb 13, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a2033ec4c4744971f2de38e2fa95ec63.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Charles Thonney](https://pixabay.com/users/summerglow-20203311/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7120431)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=7120431)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You've been programming in Python for a while now, whipping up scripts and solving
    problems left and right. You think you're pretty good, don't you? Well, hold on
    to your hats, folks, because you might just be an advanced Pythonista without
    even realizing it!
  prefs: []
  type: TYPE_NORMAL
- en: From closure to context managers, I've got a list of advanced Python features
    that will make you say, "I've been using that all along!".
  prefs: []
  type: TYPE_NORMAL
- en: Even if these things are new to you, you'll have an excellent checklist to complete
    to take your game to the next level.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Scope
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A critical aspect of advanced Python programming is deep familiarity with the
    concept of scope.
  prefs: []
  type: TYPE_NORMAL
- en: Scope defines the order in which the Python interpreter looks up names in a
    program. Python scope follows the **LEGB** rule (local, enclosing, global, and
    built-in scopes). According to the rule, when you access a name (it can be anything,
    a variable, a function, or a class), the interpreter looks for it in *local*,
    *enclosing*, *global,* and *built-in* scopes, in order.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see examples to understand each level better.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 1 — Local Scope**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, `x` is only defined in the scope that is *local* to `func`. That's why
    it isn't accessible anywhere else in the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 2 — Enclosing Scope**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Enclosing scope is the intermediary scope between local and global scopes. In
    the example above, `x` is in the local scope of `outer_func`. On the other hand,
    `x` is in the *enclosing scope* relative to the nested `inner_func` function.
    Local scope always has read-only access to the enclosing scope.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 3 — Global Scope**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, `x` and `func` are defined in the global scope, which means they can be
    read from anywhere in the current script.
  prefs: []
  type: TYPE_NORMAL
- en: 'To modify them in smaller levels of scope (local and enclosing), they should
    be accessed with the `global` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Example 4 — Built-in scope**'
  prefs: []
  type: TYPE_NORMAL
- en: Built-in scope includes every already-defined library, class, function, and
    variable that **doesn't require** explicit import statements. Some examples of
    built-in functions and variables in Python include `print`, `len`, `range`, `str`,
    `int`, `float`, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Function closure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A firm grasp of scope opens the doors to another important concept — function
    closure.
  prefs: []
  type: TYPE_NORMAL
- en: By default, after the function finishes execution, it returns to a blank state.
    This means its memory is wiped of all of its past arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Above, we assigned the value of 3 to `x` but the function forgot it after execution.
    What if we don't want it to forget the value of `x`?
  prefs: []
  type: TYPE_NORMAL
- en: This is where *function closure* comes into play. By defining a variable in
    the enclosing scope of some inner function, you can store it in the inner function’s
    memory even after the function returns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example function that counts the number of times it was executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'By all rules of Python, we should have lost the `counter` variable after the
    first execution. But since it is in the inner function''s closure, it will stay
    there till you close the session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Decorators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Function closures have more serious applications than simple counters. One of
    them is creating decorators. A decorator is a nested function you can add to other
    functions to enhance or even modify their behavior.
  prefs: []
  type: TYPE_NORMAL
- en: For example, below, we are creating a *caching* decorator that remembers the
    state of every single positional and keyword argument of a function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `stateful_function` decorator can now be added to computation-heavy functions
    that might be reused on the same arguments. The example is the following recursive
    Fibonacci function that returns the *n*th number in the sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We found the humongous 1000th number in the Fibonacci sequence in a fraction
    of a second. Here is how much the same process would take without the caching
    decorator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: It took 21 seconds to calculate the 40th number. It would take days to calculate
    the 1000th without caching.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn the hairy details of how to create your own decorators (including
    scope and closures) in my separate post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/an-in-depth-tutorial-to-python-decorators-that-you-can-actually-use-1e34d3d2d305?source=post_page-----2b1dd7ef57f3--------------------------------)
    [## An In-Depth Tutorial to Python Decorators That You Can Actually Use'
  prefs: []
  type: TYPE_NORMAL
- en: Edit description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/an-in-depth-tutorial-to-python-decorators-that-you-can-actually-use-1e34d3d2d305?source=post_page-----2b1dd7ef57f3--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Generators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Generators are powerful constructs in Python that allows processing of large
    amounts of data efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say you have a 10GB log file after the crash of some software. To find
    out what went wrong, you have to efficiently sift through it in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'The worst way to do this is to read the whole file like below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Since you go through the logs line by line, you don''t need to read all 10GBs,
    just chunks of it at a time. This is where you can use generators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Above, we defined a generator that iterates the lines of the log file only 1024
    at a time. As a result, the for loop at the end is highly efficient. In every
    iteration of the loop, only 1024 lines of the file are in memory. The previous
    chunks are discarded, while the rest are only loaded as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Another feature of generators is the ability to yield an element at a time,
    even outside loops, with the `next` function. Below, we are defining a blazing-fast
    function that generates the Fibonacci sequence.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the generator, you call the function once and call `next` on the
    resulting object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: You can read the following post on generators to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://realpython.com/introduction-to-python-generators/?source=post_page-----2b1dd7ef57f3--------------------------------)
    [## How to Use Generators and yield in Python - Real Python'
  prefs: []
  type: TYPE_NORMAL
- en: Introduced with PEP 255, generator functions are a special kind of function
    that return a lazy iterator. These are…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: realpython.com](https://realpython.com/introduction-to-python-generators/?source=post_page-----2b1dd7ef57f3--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Context managers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You must have been using context managers for a long time now. They allow developers
    to manage resources efficiently, like files, databases, and network connections.
    They automatically open and close resources, leading to clean and error-free code.
  prefs: []
  type: TYPE_NORMAL
- en: But, there is a big difference between using context managers and writing your
    own. When done right, they allow you to abstract a lot of boilerplate code on
    top of their original functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'One popular example of a custom context manager is a timer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Above, we are defining a `TimerContextManager` class that will serve as our
    future context manager. Its `__enter__` method defines what happens when we enter
    the context with the `with` keyword. In this case, we start the timer.
  prefs: []
  type: TYPE_NORMAL
- en: In `__exit__`, we go out of the context, stop the timer, and report elapsed
    time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Here is a more complex example that enables locking resources so that they can
    be used by one process at a time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: If you want a more gentle introduction to context managers, check out my article
    on the topic.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-build-custom-context-managers-in-python-31727ffe96e1?source=post_page-----2b1dd7ef57f3--------------------------------)
    [## How to Build Custom Context Managers in Python'
  prefs: []
  type: TYPE_NORMAL
- en: Edit description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-build-custom-context-managers-in-python-31727ffe96e1?source=post_page-----2b1dd7ef57f3--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: If you want to go down the rabbit hole and learn everything about them, here
    is another excellent RealPython article.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://realpython.com/python-with-statement/?source=post_page-----2b1dd7ef57f3--------------------------------)
    [## Context Managers and Python''s with Statement - Real Python'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this tutorial, you''ll learn: One common problem you''ll face in programming
    is how to properly manage external…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: realpython.com](https://realpython.com/python-with-statement/?source=post_page-----2b1dd7ef57f3--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There you have it, folks! How many times did you say, "I knew that!"? Even if
    it wasn't that many times, you now know the things to learn to become advanced.
  prefs: []
  type: TYPE_NORMAL
- en: Don't be afraid of the discomfort that comes with learning new things. Just
    remember, with great power comes (I won't say it!) more challenging bugs to fix.
    But hey, you are a pro now, what's a little debugging to you?
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading!
  prefs: []
  type: TYPE_NORMAL
- en: Loved this article and, let’s face it, its bizarre writing style? Imagine having
    access to dozens more just like it, all written by a brilliant, charming, witty
    author (that’s me, by the way :).
  prefs: []
  type: TYPE_NORMAL
- en: For only 4.99$ membership, you will get access to not just my stories, but a
    treasure trove of knowledge from the best and brightest minds on Medium. And if
    you use [my referral link](https://ibexorigin.medium.com/membership), you will
    earn my supernova of gratitude and a virtual high-five for supporting my work.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----2b1dd7ef57f3--------------------------------)
    [## Join Medium with my referral link — Bex T.'
  prefs: []
  type: TYPE_NORMAL
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----2b1dd7ef57f3--------------------------------)
    ![](../Images/c9f77aa48a95aa1c7ccc67e064f39990.png)
  prefs: []
  type: TYPE_NORMAL
