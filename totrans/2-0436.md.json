["```py\nimport streamlit as st\nimport lasio\nimport pandas as pd\nfrom io import StringIO\n\n# Plotly imports\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport plotly.express as px\n\nst.set_page_config(layout=\"wide\", page_title='LAS Explorer v.0.1')\n```", "```py\nstreamlit run app.py\n```", "```py\nst.sidebar.write('# LAS Data Explorer')\nst.sidebar.write('To begin using the app, load your LAS file using the file upload option below.')\n```", "```py\nlas_file=None\n\nuploadedfile = st.sidebar.file_uploader(' ', type=['.las'])\nlas_file, well_data = load_data(uploadedfile)\n\nif las_file:\n    st.sidebar.success('File Uploaded Successfully')\n    st.sidebar.write(f'<b>Well Name</b>: {las_file.well.WELL.value}',\n    unsafe_allow_html=True)\n```", "```py\n@st.cache\ndef load_data(uploaded_file):\n    if uploaded_file is not None:\n        try:\n            bytes_data = uploaded_file.read()\n            str_io = StringIO(bytes_data.decode('Windows-1252'))\n            las_file = lasio.read(str_io)\n            well_data = las_file.df()\n            well_data['DEPTH'] = well_data.index\n\n        except UnicodeDecodeError as e:\n            st.error(f\"error loading log.las: {e}\")\n    else:\n        las_file = None\n        well_data = None\n\n    return las_file, well_data\n```", "```py\nst.title('LAS Data Explorer - Version 0.2.0')\nst.write('''LAS Data Explorer is a tool designed using Python and \nStreamlit to help you view and gain an understanding of the contents \nof a LAS file.''')\nst.write('\\n')\n```", "```py\ndef home():\n    st.title('LAS Data Explorer - Version 0.2.0')\n    st.write('''LAS Data Explorer is a tool designed using Python and \n    Streamlit to help you view and gain an understanding of the contents \n    of a LAS file.''')\n    st.write('\\n')\n```", "```py\n# Sidebar Navigation\nst.sidebar.title('Navigation')\noptions = st.sidebar.radio('Select a page:', \n    ['Home', 'Header Information', 'Data Information', \n     'Data Visualisation', 'Missing Data Visualisation'])\n```", "```py\nif options == 'Home':\n    home()\nelif options == 'Header Information':\n    header.header(las_file)\nelif options == 'Data Information':\n    raw_data(las_file, well_data)\nelif options == 'Data Visualisation':\n    plot(las_file, well_data)\nelif options == 'Missing Data Visualisation':\n    missing(las_file, well_data)\n```", "```py\ndef header(las_file):\n    st.title('LAS File Header Info')\n    if not las_file:\n        st.warning('No file has been uploaded')\n    else:\n        for item in las_file.well:\n            st.write(f\"<b>{item.descr.capitalize()} ({item.mnemonic}):</b> {item.value}\", \n            unsafe_allow_html=True)\n```", "```py\ndef raw_data(las_file, well_data):\n    st.title('LAS File Data Info')\n    if not las_file:\n        st.warning('No file has been uploaded')\n    else:\n        st.write('**Curve Information**')\n        for count, curve in enumerate(las_file.curves):\n            st.write(f\"   {curve.mnemonic} ({curve.unit}): {curve.descr}\", \n            unsafe_allow_html=True)\n        st.write(f\"<b>There are a total of: {count+1} curves present within this file</b>\", \n        unsafe_allow_html=True)\n\n        st.write('<b>Curve Statistics</b>', unsafe_allow_html=True)\n        st.write(well_data.describe())\n        st.write('<b>Raw Data Values</b>', unsafe_allow_html=True)\n        st.dataframe(data=well_data)\n```", "```py\n def plot(las_file, well_data):\n    st.title('LAS File Visualisation')\n\n    if not las_file:\n        st.warning('No file has been uploaded')\n\n    else:\n        columns = list(well_data.columns)\n        st.write('Expand one of the following to visualise your well data.')\n        st.write(\"\"\"Each plot can be interacted with. To change the scales of a plot/track, click on the left hand or right hand side of the scale and change the value as required.\"\"\")\n        with st.expander('Log Plot'):    \n            curves = st.multiselect('Select Curves To Plot', columns)\n            if len(curves) <= 1:\n                st.warning('Please select at least 2 curves.')\n            else:\n                curve_index = 1\n                fig = make_subplots(rows=1, cols= len(curves), subplot_titles=curves, shared_yaxes=True)\n\n                for curve in curves:\n                    fig.add_trace(go.Scatter(x=well_data[curve], y=well_data['DEPTH']), row=1, col=curve_index)\n                    curve_index+=1\n\n                fig.update_layout(height=1000, showlegend=False, yaxis={'title':'DEPTH','autorange':'reversed'})\n                fig.layout.template='seaborn'\n                st.plotly_chart(fig, use_container_width=True)\n\n        with st.expander('Histograms'):\n            col1_h, col2_h = st.columns(2)\n            col1_h.header('Options')\n\n            hist_curve = col1_h.selectbox('Select a Curve', columns)\n            log_option = col1_h.radio('Select Linear or Logarithmic Scale', ('Linear', 'Logarithmic'))\n            hist_col = col1_h.color_picker('Select Histogram Colour')\n            st.write('Color is'+hist_col)\n\n            if log_option == 'Linear':\n                log_bool = False\n            elif log_option == 'Logarithmic':\n                log_bool = True\n\n            histogram = px.histogram(well_data, x=hist_curve, log_x=log_bool)\n            histogram.update_traces(marker_color=hist_col)\n            histogram.layout.template='seaborn'\n            col2_h.plotly_chart(histogram, use_container_width=True)\n\n        with st.expander('Crossplot'):\n            col1, col2 = st.columns(2)\n            col1.write('Options')\n\n            xplot_x = col1.selectbox('X-Axis', columns)\n            xplot_y = col1.selectbox('Y-Axis', columns)\n            xplot_col = col1.selectbox('Colour By', columns)\n            xplot_x_log = col1.radio('X Axis - Linear or Logarithmic', ('Linear', 'Logarithmic'))\n            xplot_y_log = col1.radio('Y Axis - Linear or Logarithmic', ('Linear', 'Logarithmic'))\n\n            if xplot_x_log == 'Linear':\n                xplot_x_bool = False\n            elif xplot_x_log == 'Logarithmic':\n                xplot_x_bool = True\n\n            if xplot_y_log == 'Linear':\n                xplot_y_bool = False\n            elif xplot_y_log == 'Logarithmic':\n                xplot_y_bool = True\n\n            col2.write('Crossplot')\n\n            xplot = px.scatter(well_data, x=xplot_x, y=xplot_y, color=xplot_col, log_x=xplot_x_bool, log_y=xplot_y_bool)\n            xplot.layout.template='seaborn'\n            col2.plotly_chart(xplot, use_container_width=True)\n```", "```py\n def missing(las_file, well_data):\n    st.title('LAS File Missing Data')\n\n    if not las_file:\n        st.warning('No file has been uploaded')\n\n    else:\n        st.write(\"\"\"The following plot can be used to identify the depth range of each of the logging curves.\n         To zoom in, click and drag on one of the tracks with the left mouse button. \n         To zoom back out double click on the plot.\"\"\")\n\n        data_nan = well_data.notnull().astype('int')\n        # Need to setup an empty list for len check to work\n        curves = []\n        columns = list(well_data.columns)\n        columns.pop(-1) #pop off depth\n\n        col1_md, col2_md= st.columns(2)\n\n        selection = col1_md.radio('Select all data or custom selection', ('All Data', 'Custom Selection'))\n        fill_color_md = col2_md.color_picker('Select Fill Colour', '#9D0000')\n\n        if selection == 'All Data':\n            curves = columns\n        else:\n            curves = st.multiselect('Select Curves To Plot', columns)\n\n        if len(curves) <= 1:\n            st.warning('Please select at least 2 curves.')\n        else:\n            curve_index = 1\n            fig = make_subplots(rows=1, cols= len(curves), subplot_titles=curves, shared_yaxes=True, horizontal_spacing=0.02)\n\n            for curve in curves:\n                fig.add_trace(go.Scatter(x=data_nan[curve], y=well_data['DEPTH'], \n                    fill='tozerox',line=dict(width=0), fillcolor=fill_color_md), row=1, col=curve_index)\n                fig.update_xaxes(range=[0, 1], visible=False)\n                fig.update_xaxes(range=[0, 1], visible=False)\n                curve_index+=1\n\n            fig.update_layout(height=700, showlegend=False, yaxis={'title':'DEPTH','autorange':'reversed'})\n            # rotate all the subtitles of 90 degrees\n            for annotation in fig['layout']['annotations']: \n                    annotation['textangle']=-90\n            fig.layout.template='seaborn'\n            st.plotly_chart(fig, use_container_width=True)\n```"]