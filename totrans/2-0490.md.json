["```py\n# Install datazets.\n!pip install datazets\n```", "```py\n# Import library\nimport datazets as dz\n# Get the data science salary data set\ndf = dz.get('ds_salaries')\n# The features are as following\ndf.columns\n# 'work_year'          > The year the salary was paid.\n# 'experience_level'   > The experience level in the job during the year.\n# 'employment_type'    > Type of employment: Part-time, full time, contract or freelance.\n# 'job_title'          > Name of the role.\n# 'employee_residence' > Primary country of residence.\n# 'remote_ratio'       > Remote work: less than 20%, partially, more than 80%\n# 'company_location'   > Country of the employer's main office.\n# 'company_size'       > Average number of people that worked for the company during the year.\n# 'salary'             > Total gross salary amount paid.\n# 'salary_currency'    > Currency of the salary paid (ISO 4217 code).\n# 'salary_in_usd'      > Converted salary in USD.\n```", "```py\n# Group similar job titles\ntitles = [['data scientist', 'data science', 'research', 'applied', 'specialist', 'ai', 'machine learning'],\n          ['engineer', 'etl'],\n          ['analyst', 'bi', 'business', 'product', 'modeler', 'analytics'],\n          ['manager', 'head', 'director'],\n          ['architect', 'cloud', 'aws'],\n          ['lead/principal', 'lead', 'principal'],\n          ]\n```", "```py\n# Aggregate job titles\njob_title = df['job_title'].str.lower().copy()\ndf['job_title'] = 'Other'\n# Store the new names\nfor t in titles:\n    for name in t:\n        df['job_title'][list(map(lambda x: name in x, job_title))]=t[0]\nprint(df['job_title'].value_counts())\n# engineer          1654\n# data scientist    1238\n# analyst            902\n# manager            158\n# architect          118\n# lead/principal      55\n# Other                9\n# Name: job_title, dtype: int64\n```", "```py\n# Rename catagorical variables for better understanding\ndf['experience_level'] = df['experience_level'].replace({'EN': 'Entry-level', 'MI': 'Junior Mid-level', 'SE': 'Intermediate Senior-level', 'EX': 'Expert Executive-level / Director'}, regex=True)\ndf['employment_type'] = df['employment_type'].replace({'PT': 'Part-time', 'FT': 'Full-time', 'CT': 'Contract', 'FL': 'Freelance'}, regex=True)\ndf['company_size'] = df['company_size'].replace({'S': 'Small (less than 50)', 'M': 'Medium (50 to 250)', 'L': 'Large (>250)'}, regex=True)\ndf['remote_ratio'] = df['remote_ratio'].replace({0: 'No remote', 50: 'Partially remote', 100: '>80% remote'}, regex=True)\n```", "```py\nimport numpy as np\n\n# Add new feature\ndf['country'] = 'USA'\ncountries_europe = ['SM', 'DE', 'GB', 'ES', 'FR', 'RU', 'IT', 'NL', 'CH', 'CF', 'FI', 'UA', 'IE', 'GR', 'MK', 'RO', 'AL', 'LT', 'BA', 'LV', 'EE', 'AM', 'HR', 'SI', 'PT', 'HU', 'AT', 'SK', 'CZ', 'DK', 'BE', 'MD', 'MT']\ndf['country'][np.isin(df['company_location'], countries_europe)]='europe'\n# Remove redundant variables\nsalary_in_usd = df['salary_in_usd']\n#df.drop(labels=['salary_currency', 'salary'], inplace=True, axis=1)\n```", "```py\n# Discretize the salary feature.\ndiscretize_method='manual'\n```", "```py\nimport bnlearn as bn\n\n# Discretize Manually\nif discretize_method=='manual':\n    # Set salary\n    df['salary_in_usd'] = None\n    df['salary_in_usd'].loc[salary_in_usd<80000]='<80K'\n    df['salary_in_usd'].loc[np.logical_and(salary_in_usd>=80000, salary_in_usd<100000)]='80-100K'\n    df['salary_in_usd'].loc[np.logical_and(salary_in_usd>=100000, salary_in_usd<160000)]='100-160K'\n    df['salary_in_usd'].loc[np.logical_and(salary_in_usd>=160000, salary_in_usd<250000)]='160-250K'\n    df['salary_in_usd'].loc[salary_in_usd>=250000]='>250K'\nelse:\n    # Discretize automatically but with prior knowledge.\n    tmpdf = df[['experience_level', 'salary_in_usd', 'country']]\n    # Create edges\n    edges = [('experience_level', 'salary_in_usd'), ('country', 'salary_in_usd')]\n    # Create DAG based on edges\n    DAG = bn.make_DAG(edges)\n    bn.plot(DAG)\n    # Discretize the continous columns\n    df_disc = bn.discretize(tmpdf, edges, [\"salary_in_usd\"], max_iterations=1)\n    # Store\n    df['salary_in_usd'] = df_disc['salary_in_usd']\n    # Print\n    print(df['salary_in_usd'].value_counts())\n```", "```py\n# work_year           experience_level  ... country salary_in_usd\n# 0          2023           Junior Mid-level  ...     USA         >250K\n# 1          2023  Intermediate Senior-level  ...     USA      160-250K\n# 2          2023  Intermediate Senior-level  ...     USA      100-160K\n# 3          2023  Intermediate Senior-level  ...     USA      160-250K\n# 4          2023  Intermediate Senior-level  ...     USA      100-160K\n#     ...                        ...  ...     ...           ...\n# 4129       2020  Intermediate Senior-level  ...     USA         >250K\n# 4130       2021           Junior Mid-level  ...     USA      100-160K\n# 4131       2020                Entry-level  ...     USA      100-160K\n# 4132       2020                Entry-level  ...     USA      100-160K\n# 4133       2021  Intermediate Senior-level  ...     USA       60-100K\n#\n# [4134 rows x 10 columns]\n```", "```py\n# Structure learning\nmodel = bn.structure_learning.fit(df, methodtype='hc', scoretype='bic')\n```", "```py\n# independence test\nmodel = bn.independence_test(model, df, prune=False)\n# Parameter learning to learn the CPTs. This step is required to make inferences.\nmodel = bn.parameter_learning.fit(model, df, methodtype=\"bayes\")\n# Plot\nbn.plot(model, title='Salary data set')\nbn.plot(model, interactive=True, title='method=tan and score=bic')\n```", "```py\nquery = bn.inference.fit(model, variables=['job_title'],\n                         evidence={'company_size': 'Large (>250)'})\n```", "```py\n# +----+----------------+-----------+\n# |    | job_title      |         p |\n# +====+================+===========+\n# |  0 | Other          | 0.031616  |\n# +----+----------------+-----------+\n# |  1 | analyst        | 0.209212  |\n# +----+----------------+-----------+\n# |  2 | architect      | 0.0510425 |\n# +----+----------------+-----------+\n# |  3 | data scientist | 0.265006  |\n# +----+----------------+-----------+\n# |  4 | engineer       | 0.343216  |\n# +----+----------------+-----------+\n# |  5 | lead/principal | 0.0407967 |\n# +----+----------------+-----------+\n# |  6 | manager        | 0.0591106 |\n# +----+----------------+-----------+\n```", "```py\nquery = bn.inference.fit(model,\n                         variables=['salary_in_usd'],\n                         evidence={'employment_type': 'Full-time',\n                                   'remote_ratio': 'Partially remote',\n                                   'job_title': 'data scientist',\n                                   'employee_residence': 'DE',\n                                   'experience_level': 'Entry-level'})\n```", "```py\n# +----+-----------------+-----------+\n# |    | salary_in_usd   |         p |\n# +====+=================+===========+\n# |  0 | 100-160K        | 0.0664068 |\n# +----+-----------------+-----------+\n# |  1 | 160-250K        | 0.0424349 |\n# +----+-----------------+-----------+\n# |  2 | 80-100K         | 0.117463  |\n# +----+-----------------+-----------+\n# |  3 | <80K            | 0.707087  |\n# +----+-----------------+-----------+\n# |  4 | >250K           | 0.0666078 |\n# +----+-----------------+-----------+\n```"]