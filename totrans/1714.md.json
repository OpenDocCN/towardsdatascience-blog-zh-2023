["```py\n>>> sum([1, 1, 1])\n3\n```", "```py\n>>> callable(lambda x: x + 1)\nTrue\n>>> callable(print)\nTrue\n>>> def foo(): ...\n>>> callable(foo)\nTrue\n```", "```py\n>>> callable(None)\nFalse\n>>> callable(10)\nFalse\n>>> callable(\"hello\")\nFalse\n```", "```py\n>>> class Empty: ...\n```", "```py\n>>> empty_instance = Empty()\n>>> empty_instance()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'Empty' object is not callable\n```", "```py\n>>> callable(empty_instance)\nFalse\n```", "```py\n>>> class EmptyCallable:\n...     def __call__(self): ...\n>>> empty_call_instance = Empty()\n>>> callable(empty_call_instance)\nTrue\n>>> empty_call_instance()\n```", "```py\n>>> def foo(): ...\n>>> callable(foo)\nTrue\n>>> callable(lambda: ...)\nTrue\n```", "```py\n>>> class Empty:\n...     def __call__(self): ...\n...     def method(self): ...\n...     @staticmethod\n...     def static_method(): ...\n...     @classmethod\n...     def class_method(cls): ...\n>>> callable(Empty)\nTrue\n>>> callable(Empty.class_method)\nTrue\n>>> instance = Empty()\n>>> callable(instance)\nTrue\n>>> callable(instance.method)\nTrue\n>>> callable(instance.static_method)\nTrue\n```", "```py\n>>> from operator import mul, itemgetter, or_\n>>> callable(mul), callable(itemgetter), callable(or_)\n(True, True, True)\n```", "```py\n>>> from functools import partial\n>>> def foo(x, y, z): return f\"{x = }, {y = }, {z = }\"\n>>> foo(1, 2, 3)\n'x = 1, y = 2, z = 3'\n>>> fooxy5 = partial(foo, z=5)\n>>> fooxy5(1, 2)\n'x = 1, y = 2, z = 5'\n>>> callable(fooxy5)\nTrue\n```", "```py\n>>> def decorator(func):\n...     def inner():\n...         print(\"I'm a callable and I return one!\")\n...         return func\n...     return inner\n>>> callable(decorator)\nTrue\n>>> callable(decorator(foo))\nTrue\n```", "```py\n>>> callable(lambda x: lambda y:x*y)\nTrue\n```", "```py\n>>> mult = lambda x: lambda y:x*y\n>>> mult_by_5 = mult(5)\n>>> mult_by_5(2)\n10\n```", "```py\n>>> def defmult(x):\n...     def inner(y):\n...         return x * y\n...     return inner\n>>> defmult_by_5 = mult(5)\n>>> defmult_by_5(2)\n10\n```", "```py\n>>> callable(defmult)\nTrue\n>>> callable(defmult_by_5)\nTrue\n```", "```py\n>>> mult = lambda x: lambda y: x*y \n>>> mult_by_5 = mult(5)\n>>> mult_by_5(2)\n10\n```", "```py\n>>> from functools import partial\n>>> def mult(x, y): return x*y\n>>> partialmult_by_5 = partial(mult, y=5)\n>>> partialmult_by_5(2)\n10\n```", "```py\n>>> def multiply_str(s: str, n: int = 2) -> str:\n...     return s*n\n>>> multiply_str(\"abc\")\n'abcabc'\n>>> multiply_str_5 = partial(multiply_str, n=5)\n>>> multiply_str_5(\"abc\")\n'abcabcabcabcabc'\n```", "```py\n>>> type(multiply_str)\n<class 'function'>\n>>> type(multiply_str_5)\n<class 'functools.partial'>\n>>> callable(multiply_str_5)\nTrue\n```", "```py\n>>> i = Float(12.105)\n>>> 2*i\n24.21\n>>> i(round)\n12\n>>> i(lambda x: 200)\n200\n>>> i(lambda x: x + 1)\n13.105\n>>> def square_root_of(x):\n...     return x**.5\n>>> i(square_root_of)\n3.479224051422961\n>>> i(lambda x: round(square_root_of(x), 5))\n3.47922\n>>> i = Float(12345.12345)\n>>> i(lambda x: Float(str(i)[::-1]))\n54321.54321\n```", "```py\nclass ClassifyTextTo:\n    def __init__(self, config, path):\n        self.config = config\n        self.path = path\n    def read_text(self):\n        ...\n    def preprocess_text(self):\n        ...\n    def classify(self):\n        ...\n    def diagnose(self):\n        ...\n    def report(self):\n        ...\n    def pipeline(self):\n        self.read_text()\n        self.preprocess_text()\n        self.classify()\n        self.report()\n```", "```py\n>>> classify1 = ClassifyTextTo(\"texts/text1.txt\", configuration)\n>>> classify1.pipeline()\n>>> classify2 = ClassifyTextTo(\"texts/text2.txt\", configuration)\n>>> classify2.pipeline()\n```", "```py\n>>> for text in texts:\n...     classify = ClassifyTextTo(text, configuration)\n...     classify.pipeline()\n```", "```py\n>>> for text in texts:\n...     ClassifyTextTo(text, configuration).pipeline()\n```", "```py\nclass CallClassifyTextTo:\n    def __init__(self, config):\n        self.config = config\n    def read_text(self, path):\n        ...\n    def preprocess_text(self):\n        ...\n    def classify(self):\n        ...\n    def diagnose(self):\n        ...\n    def report(self):\n        ...\n    def __call__(self, path):\n        self.read_text(path)\n        self.preprocess_text()\n        self.classify()\n        self.report()\n```", "```py\n>>> classify = CallClassifyTextTo(configuration)\n>>> classify(\"texts/text1.txt\")\n>>> classify(\"texts/text2.txt\") \n```", "```py\n>>> classify = ClassifyTextTo(configuration)\n>>> for text in texts:\n...     classify(text)\n```"]