- en: Data Visualization with KNIME
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/data-visualization-with-knime-2b86548736d7](https://towardsdatascience.com/data-visualization-with-knime-2b86548736d7)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A Step-by-Step Comprehensive Guide
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@michalszudejko?source=post_page-----2b86548736d7--------------------------------)[![Michal
    Szudejko](../Images/d4c303d02a79ad29df193ed3b25910d9.png)](https://medium.com/@michalszudejko?source=post_page-----2b86548736d7--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2b86548736d7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2b86548736d7--------------------------------)
    [Michal Szudejko](https://medium.com/@michalszudejko?source=post_page-----2b86548736d7--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2b86548736d7--------------------------------)
    ·14 min read·Nov 17, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7611d7c67910c61087517565d72a5ebf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: image generated by the author in ChatGPT and DALL-E 3.'
  prefs: []
  type: TYPE_NORMAL
- en: The 2007 Nobel Peace Prize was awarded to Al Gore and the Intergovernmental
    Panel on Climate Change (IPCC) for raising awareness about climate change’s dangers.
    The documentary **“An Inconvenient Truth”**, directed by [Davis Guggenheim](https://en.wikipedia.org/wiki/Davis_Guggenheim),
    played a significant role in bringing the issue of climate change to the forefront
    of public consciousness. The film featured a slide show that Gore presented many
    times to worldwide audiences¹.
  prefs: []
  type: TYPE_NORMAL
- en: '**What’s particularly worth noting is Al Gore’s use of graphs and charts in
    that presentation. Despite some criticisms, these visualizations were pivotal
    in communicating the urgency of the climate crisis to a broad audience.** Gore
    skillfully uses engaging visuals, effectively raising awareness, and underscoring
    the need for action against climate change. **These visualizations convert abstract
    concepts into clear, accessible messages, proving valuable in discussing complex
    issues².**'
  prefs: []
  type: TYPE_NORMAL
- en: '*I recommend watching this film to anyone interested in* ***data visualization***
    *and, perhaps more importantly, climate change.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So, what is this post about?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Surprise, surprise, it’s about visualization.** To be more precise, it’s
    about crafting visualizations, reports, and dashboards with KNIME, a tool that
    caught my attention recently. If you’ve read some of my previous posts, you’ll
    know I’ve immersed myself in the world of alternative visualizations, using various
    [free and practical tools to create them](https://ai.gopubby.com/free-visualization-tools-for-your-writing-07ff819ddeac).'
  prefs: []
  type: TYPE_NORMAL
- en: '**One of these tools, KNIME, deserves a separate article. At least in my humble
    view. So, here it is.**'
  prefs: []
  type: TYPE_NORMAL
- en: For many of you, KNIME will be a familiar name. While preparing for this post,
    I encountered numerous articles describing the capabilities and functions of this
    tool. Yet, I got the impression that most writings on KNIME & visualization dealt
    with fragmented functions (such as preparing a single chart) and lacked a comprehensive
    view. **I hope to bridge that gap.**
  prefs: []
  type: TYPE_NORMAL
- en: '**When I began working with KNIME, I had zero knowledge of this tool.** Yet,
    thanks to its ease of use, learning it proved no particular challenge. And it’s
    certainly worthwhile to make this journey, as I will hopefully demonstrate.'
  prefs: []
  type: TYPE_NORMAL
- en: '**This post is for those familiar with data visualization but new to KNIME.
    I hope this will be a perfect starting point for anyone looking to dive into the
    capabilities of KNIME in visualization quickly.**'
  prefs: []
  type: TYPE_NORMAL
- en: What is KNIME?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: KNIME is an open-source data analytics and visualization platform. It is particularly
    well-suited for data manipulation, making it easy to sort, merge, and analyze
    data without the need for coding. It also offers a wide range of statistical tools.
  prefs: []
  type: TYPE_NORMAL
- en: '[Knime boasts a 4.6 rating on Gartner Peer Insights](https://www.gartner.com/reviews/market/data-science-and-machine-learning-platforms/vendor/knime),
    with new reviews still coming. [According to 6sense, KNIME, with its 2038 customers
    has c.a. of 1% of analytics’ platforms market share (#12 in the market).](https://6sense.com/tech/predictive-analytics/knime-platform-market-share)
    So it is a recognizable name but not a major player. **What benefits can it offer?**'
  prefs: []
  type: TYPE_NORMAL
- en: Ease of use
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: KNIME’s workflow-based approach makes it easy to use, even for [people with
    limited data skills](/how-to-talk-about-data-and-analysis-to-non-data-people-2457dc600219).
    This approach simplifies complex data processes by breaking them down into manageable
    steps. It is a more accessible alternative to other methods such as plain Python
    coding.
  prefs: []
  type: TYPE_NORMAL
- en: Machine learning and predictive modeling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: KNIME is a powerful tool for machine learning and predictive modeling. It can
    efficiently handle tasks such as anomaly detection and regression. It can also
    connect to various data sources and automate workflows, streamlining data engineering
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Visualization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: KNIME’s visualization capabilities, powered by JavaScript libraries, offer a
    flexible toolbox for data presentation. This allows users to create clear and
    insightful visualizations of their data. **I hope to display it in a second.**
  prefs: []
  type: TYPE_NORMAL
- en: Reusability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A major benefit of KNIME workflows is their reusability. This means that workflows
    can be easily scheduled and run repeatedly, with new data sets being uploaded
    as needed. These workflows can also be integrated into reports and dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: 'Visualization with KNIME: step-by-step'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start with something, I will show you how to craft the visual below. It’s
    a bar chart showing the top 10 products in terms of revenue. Even though the final
    product may not seem very spectacular, one must follow a few steps to achieve
    this result.
  prefs: []
  type: TYPE_NORMAL
- en: By the way, most of the charts Al Gore used are fairly straightforward, many
    of them being line or area charts.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/2a9c7d1623bafc832b326e06bb178745.png)'
  prefs: []
  type: TYPE_IMG
- en: Chart generated by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1\. KNIME installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step is to download and launch KNIME. You can download the necessary
    set of files from their website at [https://www.knime.com/download](https://www.knime.com/download).
    Sometimes, difficulties arise when downloading them, e.g., on a Windows 11 system.
    If you face problems, I suggest checking the information at [https://www.knime.com/installation-problems-on-windows](https://www.knime.com/installation-problems-on-windows).
    KNIME doesn’t require traditional installation. You extract the files to your
    chosen directory and run the program.
  prefs: []
  type: TYPE_NORMAL
- en: Step 2\. Data preparation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I have prepared a dataset for this exercise that can be downloaded from [here](https://docs.google.com/spreadsheets/d/1Xup7vSw7-lXFySSuVm8c3hbM77UBcyFy/edit?usp=sharing&ouid=118005843277749243224&rtpof=true&sd=true).
    It’s synthetic data containing the revenues and costs of an FMCG company over
    five years, from 2018 to 2022.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have the data, we can input and process it in KNIME.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to create a new workspace. Select ‘File,’ then ‘New…,’ and finally,
    ‘New KNIME Workflow.’
  prefs: []
  type: TYPE_NORMAL
- en: We start by uploading data. Left-click on the dataset file in the folder you
    saved it and drag-and-drop it onto the workflow area in KNIME. An ‘Excel Reader’
    node will be automatically created.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need the following nodes in the workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: ‘Column Filter’**:** Here, we will select the columns necessary for the first
    visualization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '‘Date & Time-based Row Filter’: In this step, we will select the appropriate
    time range (I selected 2022).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ‘Math Formula’**:** We will use this to recalculate the revenue measure to show
    it in thousands, rounded to a single decimal place.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After adding all these nodes, we must connect them. Select two nodes with the
    left-click of your mouse and pick ‘Connect selected nodes.’ You can also assign
    characteristic names to the nodes. Double-click on the default name and type in
    your own.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6cd22d81cc5d10688b8326ca8af15693.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Data import and manipulation part of our workflow.** Source: image by the
    author.'
  prefs: []
  type: TYPE_NORMAL
- en: In the ‘Excel Reader’ node, we configure the file import into our workflow.
    I haven’t done anything else in this node at that point.
  prefs: []
  type: TYPE_NORMAL
- en: In the ‘Column Filters’ node, I deselected ‘Product id’, ‘Category’, ‘COGS’,
    ‘Marketing Spend’, ‘Other Expenses’, and ‘<any unknown new column>.’
  prefs: []
  type: TYPE_NORMAL
- en: In the ‘Date & Time-based Row Filter’, I selected an inclusive date range from
    January 1st, 2022, to December 31st, 2022.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, in the ‘Math Formula’ node, I added the following equation: `round($Revenue$/1000,1)`.
    I wanted to write it to a new column, so I selected the ‘Append Column’ option
    and named the new column “Revenue_k.” However, you can also overwrite an existing
    column if you want.'
  prefs: []
  type: TYPE_NORMAL
- en: Step 3\. Designing a visual
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Sidenote:** If you are uncertain about which visual to choose, you can seek
    assistance from ChatGPT (or any other LLM). Simply describe the data and your
    goal in the prompt, and you will receive helpful suggestions.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/31beca39bb05afa2405e1d77ab965663.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Asking ChatGPT for chart suggestions.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d39e51f9385700960ee89fda53cb7333.png)'
  prefs: []
  type: TYPE_IMG
- en: '**ChatGPT-generated chart ideas.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we already know what visual we want to craft. As a reminder, we’ll
    create a chart displaying the top 10 revenue-generating products.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c57022cacd163623dbedc1189871cbee.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Design of the visual part of the workflow.** Source: print screen by the
    author.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, we would need to add three additional nodes to our workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '‘GroupBy’: We will group revenue according to product names.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '‘Top K Selector’: This allows us to select the top ‘x’ items from a given dataset.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '‘Bar Chart’: To draw the actual chart.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s focus for a moment on the ‘GroupBy’ node. To apply grouping, we first
    need to indicate the grouping column. In our case, it will be the product.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/df55e04e0e29fd8bb0ee35104c9c6c4c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we add aggregations. In our case, the selected aggregation method is ‘Sum.’
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/06435c9f41151ae3e93d022078b54406.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up the bar chart, follow these simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the ‘Options’ tab. Select ‘Generate image’ and designate ‘Product
    name’ as the ‘Category column.’ For the ‘Aggregation Method,’ choose ‘Sum.’
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the ‘General Options’ tab, input a title for your chart. I recommend opting
    for ‘Plot horizontal bar chart.’
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/fd7883177a11acd8130447a0a245e2c2.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Bar chart configuration window.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: Take the opportunity to delve into other configuration settings. Experimenting
    with these options can help you discover a range of potential outcomes and possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 4\. Publishing results**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete the process, configure the export settings. One effective way is
    to use the ‘Image Writer (Port)’ node. This step finalizes your work and prepares
    it for presentation or further use.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/691950955219fbb8cd4992040613480f.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Full workflow.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: I configured the ‘Image Writer’ to save the file as a *.svg. The other option,
    *.png, did not work on my computer. I understand from KNIME-related forums that
    this issue is quite common.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b9e90676fbe1d15c8dfe60423db96961.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we can run our workflow by clicking ‘Execute all executable nodes’
    in the top menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a4340836bfd605ac4a1f035587339f04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: If all goes well, we should see green lights beneath the nodes. If you are unhappy
    with the result initially produced by KNIME, you can always explore the KNIME
    Hub for additional options. One alternative to consider is [KNIME JFreeChart](https://hub.knime.com/knime/extensions/org.knime.features.ext.jfreechart/latest),
    as exemplified below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c12df9d60f9ebded174540f68fb905fe.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Same chart but generated using JFreeCHarts**. Source: image generated by
    the author.'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can delve into the community options, such as [this one](https://hub.knime.com/alexanderfillbrunn/spaces/Public/Components/Custom%20Range%20Barchart~PMYyKHEQ2oQx4Psc/current-state).
    An added benefit of this last option is its increased control over the y-axis
    versus the basic chart I showcased above.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9a8ef5bc4e30d6299d92b1c0bc3815db.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Custom range bar chart.** Source: image by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Wrapping up this section, we’ve created a simple visual using KNIME. Of course,
    there’s potential to make it far more advanced, but be aware that the process
    can become complicated, raising the entry barrier quickly.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visualization with KNIME: alternative visualizations'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sunburst chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This first visual in KNIME we have just created was not spectacular. Now, let’s
    explore whether we can create something more advanced.
  prefs: []
  type: TYPE_NORMAL
- en: In my recent post, I delved into the world of alternative visualizations, focusing
    on visuals beyond the standard bar, line, and pie charts. Let’s investigate whether
    KNIME can also offer intriguing options in this area.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/alternative-visualizations-for-data-driven-storytelling-65c873709fcc?source=post_page-----2b86548736d7--------------------------------)
    [## Alternative Visualizations for Data-Driven Storytelling'
  prefs: []
  type: TYPE_NORMAL
- en: Why to choose them, and how to create them
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/alternative-visualizations-for-data-driven-storytelling-65c873709fcc?source=post_page-----2b86548736d7--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: For this, we will again use our previous file as a starting point. This time,
    we will create a **sunburst chart**.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fa266418564a13e0f0453a94a16bce0e.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Sunburst chart generated in KNIME.** Source: animation by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: A sunburst chart is a visualization for displaying hierarchical data in concentric
    rings. Each ring in this chart represents a level in the hierarchy, segmented
    to demonstrate the proportion of each constituent part. This layout facilitates
    an intuitive understanding of the part-to-whole relationships within the data³.
  prefs: []
  type: TYPE_NORMAL
- en: To create the sunburst chart, I developed the below workflow. I chose the ‘Category’
    and ‘Product Name’ columns in the ‘Column Filter’ node.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0d9110fecf365831331700b11c530c0a.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Sunburst chart workflow.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: At this step, checking if the column order aligns with what we intend to display
    in the chart is essential. Specifically, if the ‘Category’ column is to be presented
    in the inner ring of the sunburst, then it must appear above ‘Product Name’ in
    the column list. We can easily adjust this in the ‘Excel Reader’ node, as shown
    in the image below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/065d54912784ef67170e249ce66cabec.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Changing column order in Excel Read node.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: Interactive table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following visualization I will showcase is an interactive table. The animated
    picture below displays the final product.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1241af88e8c409be5bb1f43a2c75cb95.png)'
  prefs: []
  type: TYPE_IMG
- en: '**An Interactive Table crafted in KNIME.** Source: image by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: Here is the workflow for creating the above table. The ‘Extract Date & Time
    Fields’ node is a new element in this process.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b403e952967a3104af1875984cb958d2.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Workflow to create a table in KNIME.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: We need this new node to extract the year number from the ‘Date’ column. Then,
    using the ‘GroupBy’ node, we can group use that number to group the values. Without
    this step, data for every single day would be displayed in the table, which would
    make it useless.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e35cd31fcd0aafec3c764ad58ab8c6dc.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Extracting year from the Date column.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: Line plot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Okay, this isn’t an alternative visualization. However, I wanted to evaluate
    how well KNIME performs in trend analysis. Unfortunately, I must say it’s disappointing.
    Look at the chart displayed below. My biggest complaint is the difficulty in controlling
    the chart axes, specifically in deciding the lowest and highest points. When crafting
    this chart, I hadn’t figured out a simple way to do that. **But I’ll keep looking!**
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3d7e8cc2dfbf57436f7468f67a342634.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Line chart crafted in KNIME. S**ource: image generated by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2f5b472968113489cec6b251109f84db.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Workflow used to generate the line chart.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the chart, I am displaying the monthly average price. To calculate it, I
    created a ‘Math Formula’ node, where I input the following equation: `Price =
    Revenue / Units Sold`.'
  prefs: []
  type: TYPE_NORMAL
- en: To generate multiple lines in the chart, I first extracted year and month values
    from the ‘Date’ column and then applied pivoting. In the pivoting process, I placed
    ‘Month (number)’ in the rows (refer to the 1st screenshot under the ‘Groups’ tab)
    and ‘Year’ in the columns (refer to the 2nd screenshot under the ‘Pivots’ tab).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a57f5d0794313de5752856a76f199437.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Pivoting table, step 1\.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7cdb4ce2d866013087c80151f484e958.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Pivoting table, step 2\.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: The last step was to create an aggregation rule for the ‘Price.’ I selected
    ‘Mean’ as the aggregation method.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/99239447f50cefe8e2c2b35f9ff76634.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Pivoting table, step 2\.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: If you want the plot to start scaling from zero on the y-axis, remember to check
    the ‘Always Show Origin’ option in the configuration settings of the ‘Line Plot’
    node.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6d48ef6797efe6efb9730dbd19a6adf7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: An alternative approach could be to use small multiple charts. In this example,
    I have displayed the average prices of separate products for 2022\. The node used
    to create this was downloaded from the [KNIME Hub](https://hub.knime.com/knime/spaces/Examples/00_Components/Visualizations/Small%20Multiples%20View~EfzPbz9l-xzY_TE_/most-recent).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/34b791e38834995a3f23b388ba877185.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Small Multiples visualization.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visualization with KNIME: using Report Designer⁴'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/bb66746c74b279a1af1789e3932928fb.png)'
  prefs: []
  type: TYPE_IMG
- en: '**1st page of the report I crafted in KNIME.** Source: print screen by the
    author.'
  prefs: []
  type: TYPE_NORMAL
- en: Step 1\. Installation of the Report Designer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, I will show you how to design a report using the visualizations
    we created earlier. We must add the ‘Reporting Extension’ if we haven’t done so
    already. First, select ‘Install KNIME Extensions…’ from the file menu. Then, type
    “report” in the search box and select ‘KNIME Report Designer.’
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0eaf2f4ed1d87b6e740d9cad90b65cb3.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Installation of the Report Designer.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: Step 2\. Add Reporting nodes to your visualizations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to add reporting nodes to obtain the outcomes from separate workflows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/85fb5e00da0a07b442fa0118a5f4b937.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Adding reporting nodes to workflows.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: One crucial aspect to pay attention to at this stage is to use the custom image
    scaling option in the reporting node. Without this, your visualizations may not
    display correctly — they could be tiny and low-resolution. I selected Height &
    Width set at 400 and chose *.png as export format.
  prefs: []
  type: TYPE_NORMAL
- en: Step 3\. Design the report
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find the example report I generated [here](https://drive.google.com/file/d/1sfi7H53fIQ_scpiUDKnpjproR_e0P30H/view?usp=sharing).
    To view it, first open the report editor. To do that, click on the icon in the
    top menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/39a8a6fd5f914e345c48e9d86588adf4.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Launching the report editor.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: My first step in creating the report was to set the view to ‘Landscape’ in the
    ‘Master Page’ layout to allow more space for my visualizations vertically.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1da77df3d0af4c05d564b832c3d28bbf.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Report orientation configuration.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: Then, I added and formatted a label for the title and arranged a grid to position
    my visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2fec4e8aaf9495b58dd840e5958d5c9d.png)'
  prefs: []
  type: TYPE_IMG
- en: '**I used the ‘Grid’ for the general layout.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s add our first visualization — the bar chart. To do that, drag and drop
    the ‘Image’ icon, choose the ‘BAR CHART TO REPORT’ data source, and select ‘Image.’
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6510447bac3bae0c1b756f2aacea8333.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Adding a chart to the report.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: You can control the alignment of the chart by adjusting the grid properties.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/145af0df4f7a86c7085f4053e6d1fb6a.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Controlling for alignment in the grid cells.** Source: print screen by the
    author.'
  prefs: []
  type: TYPE_NORMAL
- en: Then, I added the Sunburst chart similarly and clicked the ‘View Report’ button
    in the top menu. I showcase the result in the image below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/75a11f5e9604a6552cb5f4d7709a5239.png)'
  prefs: []
  type: TYPE_IMG
- en: '**First charts added to the report.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, I wanted to add the table we created in one of the workflows (‘TABLE TO
    REPORT’ node). I decided to do that in the ‘Cross Tab.’ For such a table to work,
    we must first build a cube. It’s an easy process. First, drag-and-drop ‘Cross
    Tab’ to the grid. Then, drag any dimension or measure from the data source. This
    will initiate the ‘Cross Tab Cube Builder’. You must indicate the Groups (Dimensions)
    and Summary Fields (Measures) in the builder. You can assign new names to them
    to find them easily later.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/84c9209647aa1df9f91e13457d84e158.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Cross tab cube builder.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: You can view the cube in the ‘Data Explorer.’ From there, you drag the fields
    into the table. You can display the measure (‘Revenue’) as a chart.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4d2e8d1e4d6a6ae3110711b9e97554d0.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Setting up chart view in the cross tab.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: Step 4\. Publish the report
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Publishing the report is as easy as pie. Choose one of the options from the
    ‘View Report’ menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/da5eb2720cac9d759e4e1d071097c467.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Report publishing options.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visualization with KNIME: building interactive dashboards'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/f2e39804b15fcce9d7ddeb2346da0bd2.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Interactive dashboard I created in KNIME.** Source: image generated by the
    author.'
  prefs: []
  type: TYPE_NORMAL
- en: I started with a slightly modified workflow from the visualization tutorial,
    where I’ve removed the reporting nodes and the table workflow. I left only one
    visualization per node. **I recommend making a copy of our previously generated
    workspace if you wish to retain it.** The first step to developing a dashboard
    was to select all the nodes and then click ‘Create component’⁵.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2225050e9bd01ad4c79a30e2c324c5b9.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Component creation in KNIME.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: Open the component first to modify your workflows and/or design the dashboard
    layout.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/103e80060f48057f8c866479f8312d9a.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Modifying dashboard layout step 1\.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49dafae96b84ab7c3009ef32af4a0a80.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Modifying dashboard layout step 2\.** Source: print screen by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: '**My evaluation of KNIME**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**What do I like?**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After working with KNIME for a few days, I must say that I see many advantages
    to this application. First, it is **relatively easy to use**. As you have witnessed,
    creating visualizations or even interactive dashboards is simple. I appreciate
    that **you can work with KNIME locally and use it as an automation tool**, such
    as having a regularly updated dashboard. **The ease of installation, open-source
    foundation, and community support are definite pluses.**
  prefs: []
  type: TYPE_NORMAL
- en: What don’t I like?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: However, there are also drawbacks. **Some basic functions are unavailable or
    complicated**, even with community assistance. For example, modifying chart axes,
    expanding color options for charts, or implementing an interactive slicer⁶ can
    be challenging. Furthermore, the **visualizations could be more visually appealing**.
    While most of these issues are solvable, **the time and learning curve can quickly
    become steep.**
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**In this post, I’ve explored the process of crafting visualizations in KNIME.
    I described steps necessary to create effective visuals, make detailed reports,
    and build interactive dashboards.** KNIME’s user-friendly interface, characterized
    by its drag-and-drop functionality and broad configuration options, makes it a
    versatile and powerful tool for data visualization. Moreover, its open-source
    nature and active community enable continuous improvement and guidance should
    we get stuck with a given problem.'
  prefs: []
  type: TYPE_NORMAL
- en: Despite its strengths, KNIME occasionally exhibits limitations in certain functionalities.
    There is undoubtedly room for further enhancement.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, KNIME proves to be a valuable tool for data visualization, offering
    a straightforward and intuitive approach to crafting meaningful insights from
    data. **I intend to continue exploring KNIME’s analytical capabilities and share
    my discoveries in future posts.**
  prefs: []
  type: TYPE_NORMAL
- en: '**Did you like this post?**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Consider a subscription to get notified about my new stories, follow me, or
    leave a 👏.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1]. **Wikipedia**, [An Inconvenient Truth](https://en.wikipedia.org/wiki/An_Inconvenient_Truth)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2]. **Robert Kosara**, [A Nobel Prize for Charts](https://eagereyes.org/blog/2007/nobel-prize-for-charts)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3]. **FusionCharts**, [Sunburst Chart](https://www.fusioncharts.com/resources/chart-primers/sunburst-chart)'
  prefs: []
  type: TYPE_NORMAL
- en: '[4]. [KNIME Report Designer User Guide](https://docs.knime.com/latest/report_designer_user_guide/#_introduction)'
  prefs: []
  type: TYPE_NORMAL
- en: '[5]. [KNIME Components Guide](https://docs.knime.com/2023-07/analytics_platform_components_guide/index.html#introduction)'
  prefs: []
  type: TYPE_NORMAL
- en: '[6]. [Bar Chart with filter functionality](https://forum.knime.com/t/bar-chart-with-filter-functionality/32132)'
  prefs: []
  type: TYPE_NORMAL
