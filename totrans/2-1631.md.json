["```py\npd.Series([1, 2, 3])                     # dtype: int64\npd.Series([1, 2, 3], dtype=\"int\")        # dtype: int64\npd.Series([1, 2, 3], dtype='float')      # dtype: float64\n\npd.Series([1, 2, np.nan])                # dtype: float64\npd.Series([1, 2, np.nan], dtype=\"int\")   # dtype: float64\npd.Series([1, 2, np.nan], dtype='float') # dtype: float64\n\npd.Series([1, 2, pd.NA])                 # dtype: object\n# fails since pd.NA cannot be converted to an int\n# pd.Series([1, 2, pd.NA], dtype=\"int\"))\n# fails since pd.NA cannot be converted to an int\n# pd.Series([1, 2, pd.NA], dtype='float'))\n```", "```py\npd.Series([1, 2, 3, np.nan], dtype=\"Int64\")   # dtype: Int64\npd.Series([1, 2, 3, pd.NA], dtype=\"Int64\")    # dtype: Int64\npd.Series([1, 2, 3, np.nan], dtype=\"Float32\") # dtype: Float32\npd.Series([1, 2, 3, pd.NA], dtype=\"Float32\")  # dtype: Float32\n```", "```py\npd.Series([True, False], dtype='bool')              # numpy-boolean\npd.Series([True, False, pd.NA], dtype='boolean')    # pandas-boolean\npd.Series([True, False, np.nan], dtype='boolean')   # pandas-boolean\n\n# this cannot work, since numpy does not handle pd.NA\n# pd.Series([True, False, pd.NA], dtype='bool') \n\n# this works, but np.nan is converted to True...\n# pd.Series([True, False, np.nan], dtype=\"bool\") # --> dtype: object, not boolean...\n\n# if no dtype is passed, pandas tries to infer an appropriate one\npd.Series([True, False])         # --> dtype: bool\npd.Series([True, False, pd.NA])  # --> dtype: object, not boolean...\npd.Series([True, False, np.nan]) # --> dtype: object, not boolean...\n```", "```py\npd.Series(['toto', 'titi', 'tata'])                 # --> dtype: object\npd.Series(['toto', 'titi', 'tata'], dtype=\"object\") # --> dtype: object\npd.Series(['toto', 'titi', 'tata'], dtype=\"str\")    # --> dtype: object\npd.Series(['toto', 'titi', np.nan], dtype=\"str\")    # --> dtype: object\npd.Series(['toto', 'titi', pd.NA], dtype=\"str\")     # --> dtype: object\n```", "```py\npd.Series(['toto', 'titi', 'tata'], dtype=\"string\") # --> dtype: string\npd.Series(['toto', 'titi', np.nan], dtype=\"string\") # --> dtype: string\npd.Series(['toto', 'titi', pd.NA], dtype=\"string\")  # --> dtype: string\n```", "```py\npd.Series([1, 2, 3, 2], dtype=\"category\")           # dtype: category, with 3 int64 possible values [1, 2, 3]\npd.Series([1, 2, 'a', 1], dtype=\"category\")         # dtype: category, with 4 object-like possible values [1, 2, 'a']\npd.Series([\"a\", \"b\", \"c\", \"a\"], dtype=\"category\")   # dtype: category, with 3 object-like possible values ['a', 'b', 'c']\npd.Series([\"M\", \"F\", \"M\", \"F\"], dtype=\"category\")   # dtype: category, with 2 object-like possible values ['M', 'F']\n```"]