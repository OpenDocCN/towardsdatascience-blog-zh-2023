["```py\npip install darts\n```", "```py\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport darts\nfrom darts.ad import QuantileDetector\n\ndf = pd.read_csv('DailyDelhiClimateTrain.csv')\ndf[\"date\"] = pd.to_datetime(df[\"date\"])\ndf = df.set_index('date')\ndf.head(5)\n```", "```py\nts = darts.TimeSeries.from_series(df.meantemp)\ntrain, val = ts.split_before(0.75)\ntrain.plot(label=\"Training Data\")\nval.plot(label=\"Validation Data\")\n```", "```py\nanomaly_detector = QuantileDetector(low_quantile=0.03, high_quantile=0.97)\nanomalies = anomaly_detector.fit_detect(ts)\n\nl = anomalies.pd_series().values\nprint(\"Percentage of values outside quantiles:\", \n      round(sum(l)/len(l)*100, 3), \"%\")\n\nidx = pd.date_range(min(ts.pd_series().index), max(ts.pd_series().index))\nanomalies = ts.pd_series()[np.array(l,dtype=bool)].reindex(idx,\n                                                         fill_value=np.nan)\nnormal = ts.pd_series()[~np.array(l,dtype=bool)].reindex(idx, \n                                                         fill_value=np.nan)\n\nnormal.plot(color=\"black\", label=\"Normal\")\nanomalies.plot(color=\"red\", label=\"Anomalies\")\n```", "```py\nfor m in range(2, 370):\n        seasonal, period = darts.utils.statistics.check_seasonality(train, \n                                              m=m, max_lag=400, alpha=0.05)\n        if seasonal:\n            print(\"Seasonality of order:\", str(period))\n```", "```py\nSeasonality of order: 354\nSeasonality of order: 356\nSeasonality of order: 361\n```", "```py\nk = 361\nnaive_model = darts.models.NaiveSeasonal(K=k)\nnaive_model.fit(train)\nnaive_forecast = naive_model.predict(len(val))\n\nprint(\"MAPE: \", darts.metrics.mape(ts, naive_forecast))\nts.plot(label=\"Actual\")\nnaive_forecast.plot(label=\"Naive Forecast (K=\" + str(k) + \")\")\n```", "```py\ndef model_check(model):\n    model.fit(train)\n    forecast = model.predict(len(val))\n    print(str(model) + \", MAPE: \", darts.metrics.mape(ts, forecast))\n    return model\n\nexp_smoothing = model_check(darts.models.ExponentialSmoothing())\narima = model_check(darts.models.ARIMA())\nauto_arima = model_check(darts.models.AutoARIMA())\nprophet = model_check(darts.models.Prophet())\n```", "```py\nExponentialSmoothing(), MAPE:  37.758\nARIMA(12, 1, 0), MAPE:  41.819\nAuto-ARIMA, MAPE:  32.594\nProphet, MAPE:  9.794\n```", "```py\nhistorical_fcast = prophet.historical_forecasts(ts,\n                           start=0.6, forecast_horizon=30, verbose=True)\n\nprint(\"MAPE: \", darts.metrics.mape(ts, historical_fcast))\nts.plot(label=\"Actual\")\nhistorical_fcast.plot(label=\"Backtest 30 days ahead forecast\")\n```", "```py\nhumidity = darts.TimeSeries.from_series(df.humidity)\nwind_speed = darts.TimeSeries.from_series(df.wind_speed)\n\ncov_model = darts.models.NBEATSModel(input_chunk_length=361, \n                                     output_chunk_length=len(val))\ncov_model.fit(train, past_covariates=humidity.stack(wind_speed))\ncov_forecast = cov_model.predict(len(val), \n                               past_covariates=humidity.stack(wind_speed))\n\nprint(\"MAPE: \", darts.metrics.mape(ts, cov_forecast))\nts.plot(label=\"Actual\")\ncov_forecast.plot(label=\"Covariate Forecast\")\n```"]