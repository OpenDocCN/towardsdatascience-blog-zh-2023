- en: 'Housing Rental Market in Germany: Exploratory Data Analysis with Python'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/housing-rental-market-in-germany-exploratory-data-analysis-with-python-3975428d07d2](https://towardsdatascience.com/housing-rental-market-in-germany-exploratory-data-analysis-with-python-3975428d07d2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Gettings statistical insights with Python, Pandas, and Bokeh
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://dmitryelj.medium.com/?source=post_page-----3975428d07d2--------------------------------)[![Dmitrii
    Eliuseev](../Images/7c48f0c016930ead59ddb785eaf3e0e6.png)](https://dmitryelj.medium.com/?source=post_page-----3975428d07d2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3975428d07d2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3975428d07d2--------------------------------)
    [Dmitrii Eliuseev](https://dmitryelj.medium.com/?source=post_page-----3975428d07d2--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3975428d07d2--------------------------------)
    ·27 min read·Apr 4, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/583688b266b6d654c7bc5738f3ec33b9.png)'
  prefs: []
  type: TYPE_IMG
- en: Salzbrücke, Germany, Image source [https://en.wikipedia.org/wiki/German_Timber-Frame_Road](https://en.wikipedia.org/wiki/German_Timber-Frame_Road)
  prefs: []
  type: TYPE_NORMAL
- en: Germany is not only the largest economy in Europe, but it is also a country
    with beautiful landscapes and an interesting culture. Unsurprisingly, Germany
    is a popular destination for tourists and expats from all over the world. Exploratory
    data analysis of the German housing rental market can be interesting not only
    for data analysts but also for people who are going to live and work in this country.
    I will show some interesting trends that can be found with Python, Pandas, and
    Bokeh.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get into it.
  prefs: []
  type: TYPE_NORMAL
- en: Collecting The Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To find the data, I decided to use ImmoScout24, which is not only one of the
    biggest (about 72K apartments and houses are listed there at the time of writing
    this article), but also the oldest website of this type. According to [https://web.archive.org](https://web.archive.org/),
    the first version was made in 1999, more than 20 years ago. ImmoScout24 also has
    an API and a page for developers. I contacted the PR department, and they gave
    me permission to use the website data for this publication but were not able to
    give me an API key. Probably this API is intended only for partners, to add or
    edit the housing data but not for batch reading. Well, it is not a problem; the
    data can be retrieved from web pages using Python, which makes the task even more
    challenging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before collecting the data in a similar way, please ask for the owner’s permission
    first and also be “a good house guest”: don’t use too many threads to prevent
    server overload, use locally saved HTML files to debug your code, and in the case
    of using a web browser, disable image loading whenever possible.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, I tried to get the page data with *requests*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Alas, it did not work — the page has protection against robots, and before
    getting the search results, the person must confirm that he or she is not a robot.
    Simple ways, like changing the “user-agent”, did not help. Well, we are indeed
    not robots, and it is not a problem. The [Selenium](https://selenium-python.readthedocs.io/)
    Python library allows using a real Chrome browser to retrieve the data and automate
    reading pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When we run the code, the browser window will be opened. And as we can see in
    the code, before processing the first page, I added a 30-second delay, which is
    enough to confirm that I’m not a robot. During this interval, it is also good
    to open the browser “settings” by pressing the 3 dots at the right and to disable
    loading images; this makes processing much faster. The browser remains open during
    requests for the next pages, and further data can be processed without this “robot”
    check.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we get the HTML body, the data extraction is more or less straightforward.
    First, we have to find HTML elements properties by using the “Inspect” button
    in the Web Browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/68900aaf63fc20456e56b25a4bd359bc.png)'
  prefs: []
  type: TYPE_IMG
- en: HTML output in the browser, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we can get these elements in Python by using the [Beautiful Soup](https://beautiful-soup-4.readthedocs.io/en/latest/)
    library. This code extracts all apartment URLs from the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Let’s now find out what kind of data we can get.
  prefs: []
  type: TYPE_NORMAL
- en: Data Fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For every estate object, we can get a page like this (for privacy reasons,
    all values and company names are blurred):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3fcad1238d1b3d253e6983a52b423fda.png)'
  prefs: []
  type: TYPE_IMG
- en: A page example, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see what kind of data we can get:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Title**. In this picture, we can see (in German, of course) “A beautiful
    single-apartment in a beautiful (place) Hermsdorf”. I don’t think this text is
    useful for analysis, but just for fun, later we will build a cloud of words from
    it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Typ** (type). For this example, the type is “Etagenwohnung” (apartment, located
    on the floor).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kaltmiete** is a so-called “cold price”. This is a rent price without utility
    costs, such as heating or electricity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Warmmiete**, or a “warm price”. The name can be a bit misleading, as we can
    see in the picture, “warm price” contains not only heating costs (“heizkosten”)
    but other extra costs (“nebenkosten”) as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Etage** (floor). On this page we can see a text “0 from 3" — a small amount
    of parsing will be required. In Germany, the 1st floor is the first *elevated*
    floor, so I suppose, that 0 means “ground floor”, or “Erdgeschoss” in German.
    And from the “0 to 3” text we can also extract the total number of floors in the
    building.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kaution** (deposit). A value that can cover the possible damage, and will
    be returned to the tenant at the end of the rent. Here we can see a value of “3-Kaltmieten”.
    Immediately, we keep in mind that some parsing will be required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flasche** (area). As the name suggests, it''s the area of the house or apartment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zimmer** (room). In this example, it’s 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other data fields can also be extracted from the page, like extra rent for a
    garage or allowance for having pets, but for our task, these fields should be
    enough.
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML parsing process is, in general, the same as described before. For
    example, to get the property title, this code can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Other fields can be found in the same way. After running the code for all pages,
    I got a dataset like this, which I saved in CVS format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Let’s now see what information we can get.
  prefs: []
  type: TYPE_NORMAL
- en: Data Transform and Load
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in the last paragraph, the housing data will definitely require some
    cleaning and transformation.
  prefs: []
  type: TYPE_NORMAL
- en: 'I collected the data from 6 cities located in different parts of Germany: Berlin,
    Dresden, Frankfurt, Hamburg, Köln, and München. As an example, let’s check Berlin;
    for other cities, the approach is the same. First, let’s load the CSV into the
    Pandas dataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The process is straightforward, but there are some useful tricks there. First,
    the parsing was done in Python, and for missing values, “None” was written in
    the CSV. I don’t want to have “None” as a text string, so I specified it as a
    “na_values” parameter. I also specified “;” as a separator and set the “pd.Int32Dtype”
    type for integer fields, like price or floor number. By the way, my first attempt
    was to use UInt32, because the price cannot be negative anyway, but it turned
    out that when calculating the differences, negative values can sometimes occur,
    and this causes some cells to get values like 4,294,967,295\. Practically, it
    was just easier to keep Int32; luckily for us, housing prices are not higher than
    the maximum Int32 value ;)
  prefs: []
  type: TYPE_NORMAL
- en: 'If everything was done correctly, as an output, we should get something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/69f6bd0867c795cbd9e38b0cb69549a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s check the dimensionality and the number of NULL values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9923e39ba7eb27ed5d860a5d5dc3c3e2.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that 3556 properties are available for rent in Berlin, every property
    has “cold” and “warm” prices, an area, and a number of rooms; these fields are
    probably mandatory. A “type” field is missing for 2467 properties, 2200 properties
    do not have a “floor” value, and so on. As was described before, some fields,
    like “deposit” values, will require transformation, for example, we will need
    a method to convert text strings like “3 Nettokaltmieten” to numerical values.
  prefs: []
  type: TYPE_NORMAL
- en: Basic analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let’s see what we can do using Pandas without putting any serious effort
    into writing code. As a warm-up, let’s get the **descriptive statistics** of the
    dataset using Pandas method “describe”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here I only tuned the output a bit: I removed the “property_id” from the results
    and adjusted the output style by adding a “thousand” separator. The result for
    Berlin looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2de4ef02f113853a40cc471d38245b48.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that 3,556 properties are listed in Berlin. We already got this value
    in the previous step, and it’s good to have some sort of verification that our
    results are correct. The median (50th percentile) area for those 3,556 properties
    is 60 m², and the median price is €1,645\. The 75th percentile is €2,271, which
    means that 75% of rent prices are cheaper than this value. And interestingly,
    the average number of rooms is 2, which looks intuitively correct, but even 11-room
    apartments are available (the maximum €28,000 price can give us a hint that those
    11-room places are not cheap).
  prefs: []
  type: TYPE_NORMAL
- en: 'As a next step, let’s make **a scatter matrix** for some fields: property area,
    number of rooms, and prices. It can be done in Pandas using one method call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here I also tuned the visualization parameters —I adjusted the bins amount
    of the histogram, limited the prices to the 0-5000€ range (otherwise the graph
    is too small because of some outliers), and also adjusted the color. The result
    is not that bad for 4 lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/84db1e0075fc65708503a269fb87b27e.png)'
  prefs: []
  type: TYPE_IMG
- en: Scatter matrix, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'For further visualization, I will use the [Bokeh](https://docs.bokeh.org/en/latest/index.html)
    library, which is good for making beautiful and interactive graphs. Let’s import
    the needed files first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We are ready to go; let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Property Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first question, which was interesting to me, is what types of properties
    are available in Germany. As I wrote before, I collected the data from 6 different
    German cities. Let’s load CSV files and combine them into a single dataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This code can obviously be optimized; for example, I can get the list of all
    CSV files in a folder by using *glob.glob(‘*.csv’)*, but for only 6 files I was
    just too lazy to do it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s find the distribution of the property types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'I used some tweaks to improve the results. I replaced “NA” values with “Unbekannt”,
    a German word for “unknown” (all other types are in German, so the names should
    be in one language). Then I grouped the values by property type and sorted the
    result by the amount. And as a final tuning, I specified the color palette to
    avoid having boring blue bars in the Matplotlib-style. The final output looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f9c81a439fdb7906d45ad676e3f1d1ca.png)'
  prefs: []
  type: TYPE_IMG
- en: Property types distribution, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The results are interesting. Many properties in the listing don’t have the type
    specified. Within other types, the “Etagenwohnung” (apartment, located on the
    floor) is the most popular one. The third and fourth types are “dachgeshoss” (place
    under the roof) and “erdgeschosswohnung” (ground-floor apartment). Other types
    like “maisonette” (a small house) or “hochparterre” (a raised ground floor) are
    rarer; readers can find a more detailed description on their own.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s check the prices for different estate types. I could guess that a “penthouse”
    should be more expensive than a “standard” apartment, and the apartment on the
    ground floor should be cheaper than a “standard” one. Let’s check this out. We
    can find the price distribution by grouping by type and aggregating the result
    in Pandas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see the result in the table form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/96b5351ad0184b9cda61f54d43511007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using a [box-and-whisker plot](https://en.wikipedia.org/wiki/Box_plot), we
    can present the results in visual form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'I used the same sort by size for each group, so the color palette of the box
    plot is the same as in the previous charts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/78a72d0f987434cb736abfd0c7ec0b27.png)'
  prefs: []
  type: TYPE_IMG
- en: Property types whisker plot, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: My guess was partially right. Penthouses are indeed the most expensive, but
    between standard apartments (“etagenwohnung”), apartments under the roof (“dachgeshoss”),
    and apartments on the ground floor (“erdgeschosswohnung”), there is no significant
    difference.
  prefs: []
  type: TYPE_NORMAL
- en: Property Prices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Getting the distribution from the whole dataset is useful, but let''s go a
    bit deeper and compare data from different places. As was written before, I collected
    the values from 6 German cities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4a4445a23a3c32cf4eed1c387fef91b1.png)'
  prefs: []
  type: TYPE_IMG
- en: Cities location map, Image by autor
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how big the difference is in the data collected from the opposite
    parts of Germany.
  prefs: []
  type: TYPE_NORMAL
- en: Price per area
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What size property is it possible to rent for a certain amount of money? It
    is easy to get the results using a **scatter plot**; this method usually requires
    only two arrays for X and Y. But we can make it look better.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create a list of possible property types, sorted by amount, as
    we already did before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can create 3 arrays for the specific city, the data will include an
    area in square meters, price, and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here I replaced the NULL property types with “Unbekannt”, which is not needed
    for a scatter plot itself but is useful for a graph legend. I also used only non-NaN
    values for prices. Limits of €3,000 and 200 m² were selected; I suppose this is
    a reasonable range that most readers would be interested in.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an optional step, I created a linear regression model and trained it using
    the data points; this will allow drawing a linear approximation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are ready to draw the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'I decided to display different cities on one graph, so I put all this code
    in a separate “get_figure_price_per_area” method. Then I can draw several Bokeh
    figures, combining them in rows and columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are pretty interesting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/881d596a2758b493d472e06b73b7ba99.png)'
  prefs: []
  type: TYPE_IMG
- en: Scatter plot of the prices versus the area in square meters, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we can visually compare the number of properties available on the market.
    Berlin (top-left on the graph) is a large city and also a desirable place; the
    market there is the biggest, and the price variance is also the highest. For example,
    50 m² apartments can be found there in different price categories, from €400 budget
    to €3,000+ elite. In comparison, real estate in Dresden (bottom-right on the graph)
    is much cheaper, and there are almost no expensive ones at all. Maybe the demand
    for rent in Dresden is much lower, and probably it's correlated to salaries and
    the number of available jobs. Secondly, in Berlin’s data, two separate classes
    are clearly visible. I don’t know the explanation, perhaps it happened due to
    the historical division of the city into the western (BRD) and eastern (DDR) parts.
  prefs: []
  type: TYPE_NORMAL
- en: Price and area histograms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can also see the prices in a more compact form by using a histogram. Making
    the histogram is straightforward; the NumPy “histogram” method can do all the
    calculations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'I used the same approach to draw the graph, by placing several cities together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are obviously correlated with the scatter plot, which we saw before:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c22336252c44fd119406d5ba825fefe0.png)'
  prefs: []
  type: TYPE_IMG
- en: Histogram of the distribution of the available prices, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: München seems to be the most expensive place, where the peak of the distribution
    is about €1,500, and as was mentioned before, having 2 peaks in Berlin looks interesting.
    The distribution is right-skewed, and at least for large cities like Berlin or
    München, we can see a long tail, where some properties have even higher prices
    than €10,000/m.
  prefs: []
  type: TYPE_NORMAL
- en: 'As for the **area in square meters**, I will show the results only for Berlin;
    other cities look in general the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a12264203c18c8676b04484f6c0b08ea.png)'
  prefs: []
  type: TYPE_IMG
- en: Histogram of the distribution of the available area in square meters, Image
    by author
  prefs: []
  type: TYPE_NORMAL
- en: Most houses and apartments have an area of 30 to 70 m², which looks intuitively
    correct, but as we can see, some properties are even smaller than 10 m², and some
    are larger than 250 m².
  prefs: []
  type: TYPE_NORMAL
- en: Utility costs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next thing that is interesting to know is how much utilities cost. As was
    described before, all listed apartments have 2 prices: so-called “warm” (with
    utilities like heating and electricity) and “cold” values. Let’s calculate the
    difference and make a scatter plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is interesting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fbd582f9b2f33c1d92ec73ac62eb1764.png)'
  prefs: []
  type: TYPE_IMG
- en: Scatter plot of the utility cost versus the area in square meters, Image by
    author
  prefs: []
  type: TYPE_NORMAL
- en: 'There is obviously a large variance in results: different houses may have different
    types of heating, insulation, and so on. But in general, the 50 m² property may
    have about €200 in utility costs per month, and doubling the area also proportionally
    doubles the costs, in our example, to €400 per month for a 100 m² house or apartment.
    As for the property types, the dots on the graph are distributed more or less
    equally, and I did not see any visual correlation between costs and different
    types.'
  prefs: []
  type: TYPE_NORMAL
- en: Deposit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The deposit is an important part of the rental contract, because its value may
    be pretty large. The legal maximum for a deposit in Germany is 3 “cold” prices;
    let’s see how it's going in reality.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s see what kind of data we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The result looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c1fe600065dab115628752f56fcc525c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the values are different — some owners are placing the amount
    as a digit, like “585 €”, and some others use text descriptions like “3 Nettokaltmieten”
    or “3 MM“. It is easy to display the unique values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/afb47139f1ea5c406adcd2b9df58640e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the output, we can see text descriptions like “Drei Nettokaltmieten”, “Zwei
    Monatsmiete”, and so on. To parse those values, I created 2 methods that convert
    a text string into a numerical value. Maybe this check does not cover all possibilities,
    but in most cases, it does the job:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Using these methods, I can do a conversion like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can create a column in the dataset with a deposit-to-price ratio:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'With this new column, it is easy to make histograms the same way we did before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are interesting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c3d28074ebc4d327e156d408c0615e96.png)'
  prefs: []
  type: TYPE_IMG
- en: Histogram of the distribution of the deposit value, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Many landlords are asking for the highest possible deposit, which is [limited
    by law](https://www.mieterbund.de/mietrecht/mietrecht-a-z/stichworte-zum-mietrecht-m/mietkaution.html)
    in Germany to 3 “cold” prices. Though it is possible to find a place with a 2x,
    1x, or even no required deposit at all (“kautionsfrei” in German). And surprisingly,
    there are some owners who ask for deposits higher than a 3-fold value. Sometimes,
    when this value is 3.05, it can be explained by a mistake in the calculation,
    but if the deposit value is about 5x, that is definitely not the case.
  prefs: []
  type: TYPE_NORMAL
- en: Property publishers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some owners prefer to rent their estate themselves; others collaborate with
    an agency. How big are those amounts? Let’s draw the distribution in the form
    of a **pie chart**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: In this code, I grouped the dataframe by publisher and sorted the result by
    size. The only trick was to put the “private” group first, and for clarity reasons,
    I also marked this group in a different color.
  prefs: []
  type: TYPE_NORMAL
- en: 'The results for 2 cities, Berlin and München, look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7c7e58133ca518c806c7a130d9330819.png)'
  prefs: []
  type: TYPE_IMG
- en: Pie chart showing the number of estate objects per publisher, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, only 8.5% of the real estate in Berlin is listed by private individuals;
    in München this amount is 27%. It is also interesting to see that more than 50%
    of the properties are published by only a few agencies.
  prefs: []
  type: TYPE_NORMAL
- en: Floor numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw before, the location of the apartment, like the ground floor or the
    floor under the roof, mostly does not affect the rent price. But it is still interesting
    to know how many floors most of the buildings have in Germany.
  prefs: []
  type: TYPE_NORMAL
- en: 'Initially, I did not expect any difficulties in this task, but the challenge
    was in making the custom sort. Many apartments or houses don’t have a floor number
    specified, and I wanted to put the “unknown” value at the left. This can be done
    by implementing a custom sort key in Pandas. The tricky part here is that when
    doing a DataFrame sort, the *custom_key* is applied by Pandas not to a single
    value but to a “pd.Series” object. So, we need a second method to update values
    in the series itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The result for the first two cities, Berlin and München, looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6f95bfe149b3482f559a378d3324b4be.png)'
  prefs: []
  type: TYPE_IMG
- en: Histogram of the distribution of the floor number, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, most of the apartments in both cities are located on the 1st
    through 5th floors. But there are several apartments on the 10th–20th floors,
    and there is an apartment in Berlin located on the 87th floor (though I did not
    check if it was a typo or if that building really exists).
  prefs: []
  type: TYPE_NORMAL
- en: Geo Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Building a histogram is more or less straightforward; let’s go to the fun part:
    displaying estate objects on a geographic map. And here we have 2 challenges.
    Firstly, we need to get the coordinates, and secondly, we need to draw the map.'
  prefs: []
  type: TYPE_NORMAL
- en: Geocoding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s check our data again: the dataframe has “region” and “address” fields,
    which we can use for geocoding requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/883586d265a3c1057e9bca5d220be0bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For getting the coordinates, I will use a [GeoPy](https://geopy.readthedocs.io/en/stable/)
    library; it’s free and does not require any API key (like, for example, a Google
    Maps API):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The code is straightforward; the only challenge was in removing “(“ and “)”
    brackets from addresses; it turned out that the library did not return any data
    in the case of addresses like “Nauen, Havelland (Kreis)”. I also used “lru_cache”
    to avoid making requests for the same addresses several times (some agencies have
    several apartments in the same house for rent).
  prefs: []
  type: TYPE_NORMAL
- en: 'Having this method, I can easily request locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For drawing the map, I will use a free [Folium](https://python-visualization.github.io/folium/)
    library. As a simple example of using this library, the map with a mark can be
    displayed using several lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'This code will produce a nice-looking interactive map without the need for
    an API key:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/07e49c366ff716a33de69f86a9df8132.png)'
  prefs: []
  type: TYPE_IMG
- en: Folium map and marker example, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'But our visualization will be a bit more complex. I will use Folium’s “Circle”
    objects for each property, and I will also group different prices using “FeatureGroup”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'I also used a heatmap as a background to make the results look better. The
    visualization also required some tuning of the colors and CSS styles to display
    gradients; the final result looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/22219bcca3686c9f81c964f95cec2f9f.png)'
  prefs: []
  type: TYPE_IMG
- en: Estate objects in Berlin, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is more or less intuitive. In Berlin, the areas around the center
    are more expensive, but there are no special “high-end” places. For example, real
    estate objects with a price higher than €5,000/m are distributed more or less
    equally:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0ca0053581b9118580f687529649cd3a.png)'
  prefs: []
  type: TYPE_IMG
- en: Estate objects in Berlin with a price ≥ €5,000/m, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Rent dynamics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This question is a bit more challenging. How fast is the renting process, and
    for how long are estate objects available for rent? The question is challenging
    because the publication date of the property is not available on the website.
    But we can estimate this data indirectly by comparing the results taken on different
    days.
  prefs: []
  type: TYPE_NORMAL
- en: 'The idea is straightforward. Each property has a unique ID. I saved the data
    for the same city twice, with a 7-day interval. Then I displayed two price histograms:
    one with all properties and the second one with the properties that were removed
    within 7 days (properties that exist in the first dataframe but do not exist in
    the second one):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'I also added percentage labels to the bars to make the bars more readable.
    The result looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0035a220b0e0181180bf959dfb82f65f.png)'
  prefs: []
  type: TYPE_IMG
- en: Histogram of the estate objects, removed from listing within 7 days, Image by
    author
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, this result is not statistically significant because the experiment
    was only conducted once. At least, I can say that at the time of making this test,
    about 20% of the estate objects in Berlin within the €800–1,200 range were removed
    from a listing within a week. More expensive objects are obviously staying longer;
    only about 9% of properties within a €3,000 price range were removed during the
    same period.
  prefs: []
  type: TYPE_NORMAL
- en: Anomalies Detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a next step, let’s have some fun and try to find “anomalies”, something
    unusual and non-standard. And to do this, I will use the **Isolation Forest**
    algorithm, implemented in the [Scikit-Learn](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.IsolationForest.html)
    Python library. For finding anomalies, I will use 3 features: area, price, and
    the number of rooms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: As we can see in the code, the algorithm requires only one parameter, a so-called
    “contamination”, which determines the proportion of outliers in the dataset. Here
    I set it to 1%; obviously, the parameter can be changed if needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'After calling the “fit” method, we can get the results. The “decision_function”
    method returns the anomaly score, and the “predict” method returns +1 if the particular
    object is considered an inlier or -1 in case of an outlier. Let’s display only
    the outliers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The result looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6a358bf77a3665373c8179e7a9582a45.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For these properties, some parameters are unusual, and by observing the result,
    I can guess that the number of rooms, area, or price was large. But one of the
    advantages of the “Isolation Forest” method is its interpretability. A [SHAP](https://shap.readthedocs.io/en/latest/generated/shap.Explainer.html)
    Python package allows the use of **Shapley values** to graphically explain the
    results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The analysis itself takes about a minute. After that, we can get the results
    for every item on our list. For example, let’s examine the property with the number
    3030:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7801e49cf8387ca8e244be54901a42ae.png)'
  prefs: []
  type: TYPE_IMG
- en: The Shapley explainer result, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the price was okay, but the 211 m² property area and the number
    of 5 rooms were treated as unusual by the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to see how the algorithm works by displaying a scatter
    plot. For example, let’s see how the “amount of rooms” and the “price” affect
    the Shapley values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The result looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/abb85012ae0c2592f366c2142ce3da1b.png)'
  prefs: []
  type: TYPE_IMG
- en: The scatter plot of SHAP values, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Here we can see that the number of rooms over 4 is mostly affecting the score.
  prefs: []
  type: TYPE_NORMAL
- en: Word Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I would not treat the last step as a real analysis, but just for fun, let’s
    build the word cloud and see which words are the most popular in the estate titles.
    With a Python [WordCloud](https://amueller.github.io/word_cloud/) library, we
    can do this in only several lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The result looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0fd8d19b6a14c549ea16172a981ca776.png)'
  prefs: []
  type: TYPE_IMG
- en: The word of real estate object titles, Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Words like “wohnung” (apartment), “zimmer” (room), and “balkon” (balcony) are
    the most popular, we can also see words like “helle” (bright), “moderne” (modern),
    “schöne” (beautiful), and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As Alan Smith, a former researcher in the UK Office for National Statistics,
    told in the [TED talks](https://www.youtube.com/watch?v=ogeGJS0GEF4) in 2017,
    we should love statistics because it’s a science *about us*. And it’s really interesting
    to explore a dataset, like this rent housing data, and find interesting patterns
    there. I hope it was interesting for readers as well, not only as an example of
    using Pandas or Bokeh but also as a small insight into another country’s life
    and culture. Obviously, I did not test all the data; for example, it may be interesting
    to know how many landlords allow tenants to keep pets in the apartment, and so
    on. Readers can test this on their own; code snippets from this article should
    be enough for that.
  prefs: []
  type: TYPE_NORMAL
- en: If you enjoyed this story, feel free [to subscribe](https://medium.com/@dmitryelj/membership)
    to Medium, and you will get notifications when my new articles will be published,
    as well as full access to thousands of stories from other authors.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading.
  prefs: []
  type: TYPE_NORMAL
