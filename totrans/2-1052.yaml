- en: 'Housing Rental Market in Germany: Exploratory Data Analysis with Python'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 德国住房租赁市场：使用 Python 的探索性数据分析
- en: 原文：[https://towardsdatascience.com/housing-rental-market-in-germany-exploratory-data-analysis-with-python-3975428d07d2](https://towardsdatascience.com/housing-rental-market-in-germany-exploratory-data-analysis-with-python-3975428d07d2)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/housing-rental-market-in-germany-exploratory-data-analysis-with-python-3975428d07d2](https://towardsdatascience.com/housing-rental-market-in-germany-exploratory-data-analysis-with-python-3975428d07d2)
- en: Gettings statistical insights with Python, Pandas, and Bokeh
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Python、Pandas 和 Bokeh 获取统计见解
- en: '[](https://dmitryelj.medium.com/?source=post_page-----3975428d07d2--------------------------------)[![Dmitrii
    Eliuseev](../Images/7c48f0c016930ead59ddb785eaf3e0e6.png)](https://dmitryelj.medium.com/?source=post_page-----3975428d07d2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3975428d07d2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3975428d07d2--------------------------------)
    [Dmitrii Eliuseev](https://dmitryelj.medium.com/?source=post_page-----3975428d07d2--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://dmitryelj.medium.com/?source=post_page-----3975428d07d2--------------------------------)[![Dmitrii
    Eliuseev](../Images/7c48f0c016930ead59ddb785eaf3e0e6.png)](https://dmitryelj.medium.com/?source=post_page-----3975428d07d2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3975428d07d2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3975428d07d2--------------------------------)
    [Dmitrii Eliuseev](https://dmitryelj.medium.com/?source=post_page-----3975428d07d2--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3975428d07d2--------------------------------)
    ·27 min read·Apr 4, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3975428d07d2--------------------------------)
    ·27 min 阅读·2023年4月4日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/583688b266b6d654c7bc5738f3ec33b9.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/583688b266b6d654c7bc5738f3ec33b9.png)'
- en: Salzbrücke, Germany, Image source [https://en.wikipedia.org/wiki/German_Timber-Frame_Road](https://en.wikipedia.org/wiki/German_Timber-Frame_Road)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Salzbrücke, Germany, 图片来源 [https://en.wikipedia.org/wiki/German_Timber-Frame_Road](https://en.wikipedia.org/wiki/German_Timber-Frame_Road)
- en: Germany is not only the largest economy in Europe, but it is also a country
    with beautiful landscapes and an interesting culture. Unsurprisingly, Germany
    is a popular destination for tourists and expats from all over the world. Exploratory
    data analysis of the German housing rental market can be interesting not only
    for data analysts but also for people who are going to live and work in this country.
    I will show some interesting trends that can be found with Python, Pandas, and
    Bokeh.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 德国不仅是欧洲最大的经济体，而且还是一个拥有美丽风景和有趣文化的国家。不足为奇的是，德国是来自世界各地的游客和外籍人士的热门目的地。对德国住房租赁市场的探索性数据分析不仅对数据分析师有趣，也对即将移居和在此工作的人有意义。我将展示一些可以通过
    Python、Pandas 和 Bokeh 发现的有趣趋势。
- en: Let’s get into it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Collecting The Data
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据收集
- en: To find the data, I decided to use ImmoScout24, which is not only one of the
    biggest (about 72K apartments and houses are listed there at the time of writing
    this article), but also the oldest website of this type. According to [https://web.archive.org](https://web.archive.org/),
    the first version was made in 1999, more than 20 years ago. ImmoScout24 also has
    an API and a page for developers. I contacted the PR department, and they gave
    me permission to use the website data for this publication but were not able to
    give me an API key. Probably this API is intended only for partners, to add or
    edit the housing data but not for batch reading. Well, it is not a problem; the
    data can be retrieved from web pages using Python, which makes the task even more
    challenging.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找到数据，我决定使用 ImmoScout24，它不仅是最大的（在撰写本文时列出了大约 72K 套公寓和房屋），也是最早的网站之一。根据 [https://web.archive.org](https://web.archive.org/)，第一个版本是在
    1999 年制作的，已有 20 多年。ImmoScout24 还有一个 API 和开发者页面。我联系了公关部门，他们允许我使用该网站的数据进行出版，但无法提供
    API 密钥。这个 API 可能仅供合作伙伴使用，以添加或编辑住房数据，而不是用于批量读取。不过，这不是问题；可以使用 Python 从网页中检索数据，这使得任务更加具有挑战性。
- en: 'Before collecting the data in a similar way, please ask for the owner’s permission
    first and also be “a good house guest”: don’t use too many threads to prevent
    server overload, use locally saved HTML files to debug your code, and in the case
    of using a web browser, disable image loading whenever possible.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在以类似方式收集数据之前，请先征得所有者的许可，并且要“做一个好房客”：不要使用过多的线程以避免服务器过载，使用本地保存的 HTML 文件调试代码，在使用网页浏览器时尽可能禁用图片加载。
- en: 'First, I tried to get the page data with *requests*:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我尝试使用 *requests* 获取页面数据：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Alas, it did not work — the page has protection against robots, and before
    getting the search results, the person must confirm that he or she is not a robot.
    Simple ways, like changing the “user-agent”, did not help. Well, we are indeed
    not robots, and it is not a problem. The [Selenium](https://selenium-python.readthedocs.io/)
    Python library allows using a real Chrome browser to retrieve the data and automate
    reading pages:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 可惜，没能成功——页面对机器人有保护，在获得搜索结果之前，用户必须确认自己不是机器人。像更改“user-agent”这样简单的方法没有帮助。好吧，我们确实不是机器人，这没问题。
    [Selenium](https://selenium-python.readthedocs.io/) Python 库允许使用真实的 Chrome 浏览器来获取数据并自动化读取页面：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When we run the code, the browser window will be opened. And as we can see in
    the code, before processing the first page, I added a 30-second delay, which is
    enough to confirm that I’m not a robot. During this interval, it is also good
    to open the browser “settings” by pressing the 3 dots at the right and to disable
    loading images; this makes processing much faster. The browser remains open during
    requests for the next pages, and further data can be processed without this “robot”
    check.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行代码时，浏览器窗口将被打开。正如我们在代码中看到的，在处理第一页之前，我添加了一个30秒的延迟，这足以确认我不是机器人。在此期间，最好通过按右侧的三个点打开浏览器“设置”，并禁用图像加载；这会使处理速度更快。在请求下一页时，浏览器保持打开状态，进一步的数据可以在没有“机器人”检查的情况下进行处理。
- en: 'After we get the HTML body, the data extraction is more or less straightforward.
    First, we have to find HTML elements properties by using the “Inspect” button
    in the Web Browser:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在获取 HTML 内容后，数据提取或多或少是直接的。首先，我们必须通过使用 Web 浏览器中的“检查”按钮找到 HTML 元素的属性：
- en: '![](../Images/68900aaf63fc20456e56b25a4bd359bc.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/68900aaf63fc20456e56b25a4bd359bc.png)'
- en: HTML output in the browser, Image by author
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器中的HTML输出，图片由作者提供
- en: 'Then we can get these elements in Python by using the [Beautiful Soup](https://beautiful-soup-4.readthedocs.io/en/latest/)
    library. This code extracts all apartment URLs from the page:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以通过使用 [Beautiful Soup](https://beautiful-soup-4.readthedocs.io/en/latest/)
    库在 Python 中获取这些元素。此代码从页面中提取所有公寓的 URL：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let’s now find out what kind of data we can get.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们找出可以获得什么数据。
- en: Data Fields
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据字段
- en: 'For every estate object, we can get a page like this (for privacy reasons,
    all values and company names are blurred):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个房地产对象，我们可以得到一个这样的页面（出于隐私原因，所有值和公司名称均被模糊处理）：
- en: '![](../Images/3fcad1238d1b3d253e6983a52b423fda.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3fcad1238d1b3d253e6983a52b423fda.png)'
- en: A page example, Image by author
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 页面示例，图片由作者提供
- en: 'Let’s see what kind of data we can get:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看可以获得什么数据：
- en: '**Title**. In this picture, we can see (in German, of course) “A beautiful
    single-apartment in a beautiful (place) Hermsdorf”. I don’t think this text is
    useful for analysis, but just for fun, later we will build a cloud of words from
    it.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标题**。在这张图片中，我们可以看到（当然是德文）“一个美丽的单间公寓在一个美丽的（地方）赫姆斯多夫”。我认为这段文字对于分析没有用处，不过只是为了好玩，稍后我们将从中构建一个词云。'
- en: '**Typ** (type). For this example, the type is “Etagenwohnung” (apartment, located
    on the floor).'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**。在这个例子中，类型是“Etagenwohnung”（楼层上的公寓）。'
- en: '**Kaltmiete** is a so-called “cold price”. This is a rent price without utility
    costs, such as heating or electricity.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冷租**是所谓的“冷价格”。这是一个不包含公用费用的租金价格，例如取暖费或电费。'
- en: '**Warmmiete**, or a “warm price”. The name can be a bit misleading, as we can
    see in the picture, “warm price” contains not only heating costs (“heizkosten”)
    but other extra costs (“nebenkosten”) as well.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**暖租**，或称“暖价格”。这个名字可能有些误导，因为我们可以看到在图片中，“暖价格”不仅包含取暖费用（“heizkosten”），还包括其他额外费用（“nebenkosten”）。'
- en: '**Etage** (floor). On this page we can see a text “0 from 3" — a small amount
    of parsing will be required. In Germany, the 1st floor is the first *elevated*
    floor, so I suppose, that 0 means “ground floor”, or “Erdgeschoss” in German.
    And from the “0 to 3” text we can also extract the total number of floors in the
    building.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**楼层**。在这个页面上我们可以看到文本“0 of 3”——需要进行少量解析。在德国，第一层是第一个 *升高* 的楼层，所以我猜0意味着“底层”，或在德语中称为“Erdgeschoss”。从“0到3”的文本中，我们还可以提取出建筑物的总楼层数。'
- en: '**Kaution** (deposit). A value that can cover the possible damage, and will
    be returned to the tenant at the end of the rent. Here we can see a value of “3-Kaltmieten”.
    Immediately, we keep in mind that some parsing will be required.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**押金**。一个可以覆盖可能损坏的金额，并在租赁结束时退还给租户。在这里我们可以看到一个“3-冷租”的值。我们立即记住一些解析工作是必需的。'
- en: '**Flasche** (area). As the name suggests, it''s the area of the house or apartment.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Flasche**（面积）。顾名思义，这是房屋或公寓的面积。'
- en: '**Zimmer** (room). In this example, it’s 1.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Zimmer**（房间）。在这个例子中，是 1。'
- en: Other data fields can also be extracted from the page, like extra rent for a
    garage or allowance for having pets, but for our task, these fields should be
    enough.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 其他数据字段也可以从页面中提取，比如车库的额外租金或允许养宠物的费用，但对于我们的任务，这些字段应该足够了。
- en: 'The HTML parsing process is, in general, the same as described before. For
    example, to get the property title, this code can be used:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 解析过程通常与之前描述的相同。例如，要获取房产标题，可以使用以下代码：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Other fields can be found in the same way. After running the code for all pages,
    I got a dataset like this, which I saved in CVS format:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 其他字段也可以以相同的方式找到。在运行了所有页面的代码后，我得到了一个这样的数据集，并将其保存为 CVS 格式：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let’s now see what information we can get.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看可以获取哪些信息。
- en: Data Transform and Load
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据转换与加载
- en: As we saw in the last paragraph, the housing data will definitely require some
    cleaning and transformation.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一段中看到的，住房数据肯定需要一些清理和转换。
- en: 'I collected the data from 6 cities located in different parts of Germany: Berlin,
    Dresden, Frankfurt, Hamburg, Köln, and München. As an example, let’s check Berlin;
    for other cities, the approach is the same. First, let’s load the CSV into the
    Pandas dataframe:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我从德国不同地区的 6 个城市收集了数据：柏林、德累斯顿、法兰克福、汉堡、科隆和慕尼黑。作为例子，我们检查柏林；对于其他城市，方法是一样的。首先，让我们将
    CSV 加载到 Pandas 数据框中：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The process is straightforward, but there are some useful tricks there. First,
    the parsing was done in Python, and for missing values, “None” was written in
    the CSV. I don’t want to have “None” as a text string, so I specified it as a
    “na_values” parameter. I also specified “;” as a separator and set the “pd.Int32Dtype”
    type for integer fields, like price or floor number. By the way, my first attempt
    was to use UInt32, because the price cannot be negative anyway, but it turned
    out that when calculating the differences, negative values can sometimes occur,
    and this causes some cells to get values like 4,294,967,295\. Practically, it
    was just easier to keep Int32; luckily for us, housing prices are not higher than
    the maximum Int32 value ;)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 过程很简单，但有一些有用的技巧。首先，解析是在 Python 中完成的，对于缺失值，“None” 被写入 CSV。我不希望有“None”作为文本字符串，因此我将其指定为“na_values”参数。我还指定了“;”作为分隔符，并为整数字段，如价格或楼层号，设置了“pd.Int32Dtype”类型。顺便提一下，我最初尝试使用
    UInt32，因为价格无论如何不可能是负数，但结果发现计算差异时，有时会出现负值，这导致一些单元格得到类似 4,294,967,295 的值。实际上，保持
    Int32 更简单；幸运的是，房价不会高于最大 Int32 值 ;)
- en: 'If everything was done correctly, as an output, we should get something like
    this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切都做得正确，作为输出，我们应该得到类似这样的结果：
- en: '![](../Images/69f6bd0867c795cbd9e38b0cb69549a0.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/69f6bd0867c795cbd9e38b0cb69549a0.png)'
- en: 'Let’s check the dimensionality and the number of NULL values:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下维度和 NULL 值的数量：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output looks like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 输出看起来是这样的：
- en: '![](../Images/9923e39ba7eb27ed5d860a5d5dc3c3e2.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9923e39ba7eb27ed5d860a5d5dc3c3e2.png)'
- en: We can see that 3556 properties are available for rent in Berlin, every property
    has “cold” and “warm” prices, an area, and a number of rooms; these fields are
    probably mandatory. A “type” field is missing for 2467 properties, 2200 properties
    do not have a “floor” value, and so on. As was described before, some fields,
    like “deposit” values, will require transformation, for example, we will need
    a method to convert text strings like “3 Nettokaltmieten” to numerical values.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，柏林有 3556 套房产待租，每套房产都有“冷”价和“热”价、一个面积和一个房间数量；这些字段可能是必需的。2467 套房产缺少“类型”字段，2200
    套房产没有“楼层”值，等等。如前所述，某些字段，如“押金”值，将需要转换，例如，我们需要一种方法将类似“3 Nettokaltmieten”的文本字符串转换为数值。
- en: Basic analysis
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本分析
- en: 'First, let’s see what we can do using Pandas without putting any serious effort
    into writing code. As a warm-up, let’s get the **descriptive statistics** of the
    dataset using Pandas method “describe”:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看在不费太多劲地编写代码的情况下，使用 Pandas 能做些什么。作为热身，使用 Pandas 的“describe”方法获取数据集的**描述性统计**：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here I only tuned the output a bit: I removed the “property_id” from the results
    and adjusted the output style by adding a “thousand” separator. The result for
    Berlin looks like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我只稍微调整了一下输出：我从结果中移除了“property_id”，并通过添加“千位”分隔符来调整输出样式。柏林的数据结果如下：
- en: '![](../Images/2de4ef02f113853a40cc471d38245b48.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2de4ef02f113853a40cc471d38245b48.png)'
- en: We can see that 3,556 properties are listed in Berlin. We already got this value
    in the previous step, and it’s good to have some sort of verification that our
    results are correct. The median (50th percentile) area for those 3,556 properties
    is 60 m², and the median price is €1,645\. The 75th percentile is €2,271, which
    means that 75% of rent prices are cheaper than this value. And interestingly,
    the average number of rooms is 2, which looks intuitively correct, but even 11-room
    apartments are available (the maximum €28,000 price can give us a hint that those
    11-room places are not cheap).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，柏林有3,556处房产上市。我们在前一步已经得到了这个值，并且有某种验证结果正确性的方法是好的。那些3,556处房产的中位数（第50百分位数）面积是60平方米，中位数价格是1,645€。第75百分位数是2,271€，这意味着75%的租金价格低于这个值。有趣的是，平均房间数量是2，这在直观上是正确的，但即便11间房的公寓也有（最高价格28,000€暗示这些11间房的地方不便宜）。
- en: 'As a next step, let’s make **a scatter matrix** for some fields: property area,
    number of rooms, and prices. It can be done in Pandas using one method call:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步，让我们制作**散点矩阵**，用于一些字段：房产面积、房间数量和价格。可以通过 Pandas 的一个方法调用来完成：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here I also tuned the visualization parameters —I adjusted the bins amount
    of the histogram, limited the prices to the 0-5000€ range (otherwise the graph
    is too small because of some outliers), and also adjusted the color. The result
    is not that bad for 4 lines of code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我还调整了可视化参数——我调整了直方图的箱数，将价格限制在0-5000€范围内（否则图表因为一些离群值而过小），并且调整了颜色。结果对于4行代码来说还不错：
- en: '![](../Images/84db1e0075fc65708503a269fb87b27e.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/84db1e0075fc65708503a269fb87b27e.png)'
- en: Scatter matrix, Image by author
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 散点矩阵，作者图片
- en: 'For further visualization, I will use the [Bokeh](https://docs.bokeh.org/en/latest/index.html)
    library, which is good for making beautiful and interactive graphs. Let’s import
    the needed files first:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步可视化，我将使用[Bokeh](https://docs.bokeh.org/en/latest/index.html)库，它适合制作美丽且互动的图表。让我们首先导入所需的文件：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We are ready to go; let’s get started.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备好了；开始吧。
- en: Property Types
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 房产类型
- en: 'The first question, which was interesting to me, is what types of properties
    are available in Germany. As I wrote before, I collected the data from 6 different
    German cities. Let’s load CSV files and combine them into a single dataframe:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个令我感兴趣的问题是德国有哪些类型的房产。如前所述，我从6个不同的德国城市收集了数据。让我们加载 CSV 文件并将它们合并成一个数据框：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This code can obviously be optimized; for example, I can get the list of all
    CSV files in a folder by using *glob.glob(‘*.csv’)*, but for only 6 files I was
    just too lazy to do it.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码显然可以优化；例如，我可以使用*glob.glob(‘*.csv’)*来获取文件夹中所有 CSV 文件的列表，但对于仅6个文件来说，我实在是懒得这样做。
- en: 'Now let’s find the distribution of the property types:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们找出房产类型的分布：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'I used some tweaks to improve the results. I replaced “NA” values with “Unbekannt”,
    a German word for “unknown” (all other types are in German, so the names should
    be in one language). Then I grouped the values by property type and sorted the
    result by the amount. And as a final tuning, I specified the color palette to
    avoid having boring blue bars in the Matplotlib-style. The final output looks
    like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了一些技巧来改进结果。我将“NA”值替换为“Unbekannt”，这是德语中的“未知”（其他类型都是德语的，所以名称应该统一）。然后，我按房产类型分组并按数量排序。作为最终调整，我指定了颜色调色板，以避免在
    Matplotlib 风格中出现乏味的蓝色条形。最终输出如下：
- en: '![](../Images/f9c81a439fdb7906d45ad676e3f1d1ca.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f9c81a439fdb7906d45ad676e3f1d1ca.png)'
- en: Property types distribution, Image by author
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 房产类型分布，作者图片
- en: The results are interesting. Many properties in the listing don’t have the type
    specified. Within other types, the “Etagenwohnung” (apartment, located on the
    floor) is the most popular one. The third and fourth types are “dachgeshoss” (place
    under the roof) and “erdgeschosswohnung” (ground-floor apartment). Other types
    like “maisonette” (a small house) or “hochparterre” (a raised ground floor) are
    rarer; readers can find a more detailed description on their own.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 结果很有趣。许多列表中的房产没有指定类型。在其他类型中，“Etagenwohnung”（楼层公寓）是最受欢迎的。第三和第四种类型是“dachgeshoss”（屋顶下的地方）和“erdgeschosswohnung”（底层公寓）。像“maisonette”（小房子）或“hochparterre”（提高的底层）这样的类型较少；读者可以自行查找更详细的描述。
- en: 'Let’s check the prices for different estate types. I could guess that a “penthouse”
    should be more expensive than a “standard” apartment, and the apartment on the
    ground floor should be cheaper than a “standard” one. Let’s check this out. We
    can find the price distribution by grouping by type and aggregating the result
    in Pandas:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查不同房产类型的价格。我猜“顶层公寓”应该比“标准”公寓更贵，而底层公寓应该比“标准”公寓便宜。让我们验证一下。我们可以通过按类型分组并在Pandas中聚合结果来找到价格分布：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can see the result in the table form:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在表格形式中查看结果：
- en: '![](../Images/96b5351ad0184b9cda61f54d43511007.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/96b5351ad0184b9cda61f54d43511007.png)'
- en: 'Using a [box-and-whisker plot](https://en.wikipedia.org/wiki/Box_plot), we
    can present the results in visual form:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[箱线图](https://en.wikipedia.org/wiki/Box_plot)，我们可以以可视化的形式呈现结果：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'I used the same sort by size for each group, so the color palette of the box
    plot is the same as in the previous charts:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我为每组使用了相同的大小排序，因此箱线图的调色板与之前的图表相同：
- en: '![](../Images/78a72d0f987434cb736abfd0c7ec0b27.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/78a72d0f987434cb736abfd0c7ec0b27.png)'
- en: Property types whisker plot, Image by author
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 房产类型的须状图，作者提供的图像
- en: My guess was partially right. Penthouses are indeed the most expensive, but
    between standard apartments (“etagenwohnung”), apartments under the roof (“dachgeshoss”),
    and apartments on the ground floor (“erdgeschosswohnung”), there is no significant
    difference.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我的猜测部分正确。顶层公寓确实是最贵的，但在标准公寓（“etagenwohnung”）、屋顶公寓（“dachgeshoss”）和底层公寓（“erdgeschosswohnung”）之间，没有显著差异。
- en: Property Prices
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 房产价格
- en: 'Getting the distribution from the whole dataset is useful, but let''s go a
    bit deeper and compare data from different places. As was written before, I collected
    the values from 6 German cities:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 从整个数据集中获取分布是有用的，但让我们深入一些，比较不同地方的数据。正如之前所述，我从6个德国城市收集了数据：
- en: '![](../Images/4a4445a23a3c32cf4eed1c387fef91b1.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4a4445a23a3c32cf4eed1c387fef91b1.png)'
- en: Cities location map, Image by autor
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 城市位置地图，作者提供的图像
- en: Let’s see how big the difference is in the data collected from the opposite
    parts of Germany.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看从德国相对两端收集的数据之间的差异有多大。
- en: Price per area
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 每平方米价格
- en: What size property is it possible to rent for a certain amount of money? It
    is easy to get the results using a **scatter plot**; this method usually requires
    only two arrays for X and Y. But we can make it look better.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以一定金额租赁的房产大小是多少？使用**散点图**可以轻松获得结果；这种方法通常只需要两个X和Y的数组。但我们可以让它看起来更好。
- en: 'First, let''s create a list of possible property types, sorted by amount, as
    we already did before:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个按数量排序的可能房产类型列表，就像我们之前做的那样：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then we can create 3 arrays for the specific city, the data will include an
    area in square meters, price, and type:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以为特定城市创建3个数组，数据将包括平方米面积、价格和类型：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here I replaced the NULL property types with “Unbekannt”, which is not needed
    for a scatter plot itself but is useful for a graph legend. I also used only non-NaN
    values for prices. Limits of €3,000 and 200 m² were selected; I suppose this is
    a reasonable range that most readers would be interested in.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我用“Unbekannt”替换了NULL房产类型，这在散点图本身中并不需要，但对图例有用。我还只使用了非NaN的价格值。选择了€3,000和200
    m²的限制；我认为这是大多数读者感兴趣的合理范围。
- en: 'As an optional step, I created a linear regression model and trained it using
    the data points; this will allow drawing a linear approximation:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个可选步骤，我创建了一个线性回归模型并使用数据点进行了训练；这将允许绘制线性近似：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now we are ready to draw the results:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备绘制结果：
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'I decided to display different cities on one graph, so I put all this code
    in a separate “get_figure_price_per_area” method. Then I can draw several Bokeh
    figures, combining them in rows and columns:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定将不同城市显示在一个图表上，因此我将所有这些代码放在一个单独的“get_figure_price_per_area”方法中。然后，我可以绘制几个Bokeh图形，将它们按行和列组合：
- en: '[PRE18]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The results are pretty interesting:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 结果相当有趣：
- en: '![](../Images/881d596a2758b493d472e06b73b7ba99.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/881d596a2758b493d472e06b73b7ba99.png)'
- en: Scatter plot of the prices versus the area in square meters, Image by author
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 价格与面积的散点图，作者提供的图像
- en: Firstly, we can visually compare the number of properties available on the market.
    Berlin (top-left on the graph) is a large city and also a desirable place; the
    market there is the biggest, and the price variance is also the highest. For example,
    50 m² apartments can be found there in different price categories, from €400 budget
    to €3,000+ elite. In comparison, real estate in Dresden (bottom-right on the graph)
    is much cheaper, and there are almost no expensive ones at all. Maybe the demand
    for rent in Dresden is much lower, and probably it's correlated to salaries and
    the number of available jobs. Secondly, in Berlin’s data, two separate classes
    are clearly visible. I don’t know the explanation, perhaps it happened due to
    the historical division of the city into the western (BRD) and eastern (DDR) parts.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以通过视觉上比较市场上可用物业的数量。柏林（图表左上角）是一个大城市，也是一个受欢迎的地方；那里的市场最大，价格差异也最大。例如，50平方米的公寓可以在不同的价格类别中找到，从400欧元预算到3000欧元以上的高档。在比较中，德累斯顿（图表右下角）的房地产便宜得多，几乎没有昂贵的房产。也许德累斯顿的租赁需求低得多，可能与薪资和可用工作的数量有关。其次，在柏林的数据中，两个独立的类别明显可见。我不清楚解释，或许这与城市历史上被划分为西部（BRD）和东部（DDR）有关。
- en: Price and area histograms
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 价格和面积的直方图
- en: 'We can also see the prices in a more compact form by using a histogram. Making
    the histogram is straightforward; the NumPy “histogram” method can do all the
    calculations:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过使用直方图以更紧凑的形式查看价格。制作直方图很简单；NumPy 的“histogram”方法可以完成所有计算：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'I used the same approach to draw the graph, by placing several cities together:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了相同的方法来绘制图表，将几个城市放在一起：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The results are obviously correlated with the scatter plot, which we saw before:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显然与之前看到的散点图有关：
- en: '![](../Images/c22336252c44fd119406d5ba825fefe0.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c22336252c44fd119406d5ba825fefe0.png)'
- en: Histogram of the distribution of the available prices, Image by author
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 可用价格的直方图，作者提供的图片
- en: München seems to be the most expensive place, where the peak of the distribution
    is about €1,500, and as was mentioned before, having 2 peaks in Berlin looks interesting.
    The distribution is right-skewed, and at least for large cities like Berlin or
    München, we can see a long tail, where some properties have even higher prices
    than €10,000/m.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 慕尼黑似乎是最昂贵的地方，分布的峰值约为1500欧元，并且正如之前提到的，柏林有两个峰值看起来很有趣。分布右偏，至少对于像柏林或慕尼黑这样的大城市，我们可以看到一个长尾，其中一些物业的价格甚至高于10000欧元/平方米。
- en: 'As for the **area in square meters**, I will show the results only for Berlin;
    other cities look in general the same:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 至于**平方米面积**，我只展示柏林的结果；其他城市总体上看起来是一样的：
- en: '![](../Images/a12264203c18c8676b04484f6c0b08ea.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a12264203c18c8676b04484f6c0b08ea.png)'
- en: Histogram of the distribution of the available area in square meters, Image
    by author
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 可用面积的直方图，作者提供的图片
- en: Most houses and apartments have an area of 30 to 70 m², which looks intuitively
    correct, but as we can see, some properties are even smaller than 10 m², and some
    are larger than 250 m².
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数房屋和公寓的面积在30到70平方米之间，这看起来直观上是正确的，但正如我们所见，有些物业的面积甚至小于10平方米，有些则大于250平方米。
- en: Utility costs
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公用事业费用
- en: 'The next thing that is interesting to know is how much utilities cost. As was
    described before, all listed apartments have 2 prices: so-called “warm” (with
    utilities like heating and electricity) and “cold” values. Let’s calculate the
    difference and make a scatter plot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来感兴趣的是公用事业费用是多少。如前所述，所有列出的公寓有两个价格：所谓的“暖”（包括供暖和电力等公用事业）和“冷”值。让我们计算差异并制作散点图：
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The result is interesting:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 结果很有趣：
- en: '![](../Images/fbd582f9b2f33c1d92ec73ac62eb1764.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fbd582f9b2f33c1d92ec73ac62eb1764.png)'
- en: Scatter plot of the utility cost versus the area in square meters, Image by
    author
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 公用事业费用与平方米面积的散点图，作者提供的图片
- en: 'There is obviously a large variance in results: different houses may have different
    types of heating, insulation, and so on. But in general, the 50 m² property may
    have about €200 in utility costs per month, and doubling the area also proportionally
    doubles the costs, in our example, to €400 per month for a 100 m² house or apartment.
    As for the property types, the dots on the graph are distributed more or less
    equally, and I did not see any visual correlation between costs and different
    types.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，结果存在很大差异：不同的房屋可能有不同类型的供暖、绝缘等。但一般来说，50平方米的物业每月的公用事业费用约为200欧元，面积翻倍也会成比例地翻倍，我们的例子中，100平方米的房子或公寓每月费用为400欧元。至于物业类型，图表上的点分布得较为均匀，我没有看到成本与不同类型之间的任何视觉关联。
- en: Deposit
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 押金
- en: The deposit is an important part of the rental contract, because its value may
    be pretty large. The legal maximum for a deposit in Germany is 3 “cold” prices;
    let’s see how it's going in reality.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 押金是租赁合同中的一个重要部分，因为其价值可能相当大。在德国，法律规定的最高押金为3个“冷”价格；让我们看看实际情况如何。
- en: 'First, let’s see what kind of data we have:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看我们拥有的数据：
- en: '[PRE22]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The result looks like this:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![](../Images/c1fe600065dab115628752f56fcc525c.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c1fe600065dab115628752f56fcc525c.png)'
- en: 'We can see that the values are different — some owners are placing the amount
    as a digit, like “585 €”, and some others use text descriptions like “3 Nettokaltmieten”
    or “3 MM“. It is easy to display the unique values:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这些值是不同的——一些房主使用数字形式的金额，如“585 €”，而其他人则使用文字描述，如“3 Nettokaltmieten”或“3 MM”。显示唯一值很简单：
- en: '[PRE23]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](../Images/afb47139f1ea5c406adcd2b9df58640e.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/afb47139f1ea5c406adcd2b9df58640e.png)'
- en: 'In the output, we can see text descriptions like “Drei Nettokaltmieten”, “Zwei
    Monatsmiete”, and so on. To parse those values, I created 2 methods that convert
    a text string into a numerical value. Maybe this check does not cover all possibilities,
    but in most cases, it does the job:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，我们可以看到文本描述，如“Drei Nettokaltmieten”，“Zwei Monatsmiete”等。为了解析这些值，我创建了2种将文本字符串转换为数值的方法。也许这个检查没有涵盖所有可能性，但在大多数情况下，它能完成工作：
- en: '[PRE24]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Using these methods, I can do a conversion like this:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些方法，我可以进行这样的转换：
- en: '[PRE25]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, we can create a column in the dataset with a deposit-to-price ratio:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以在数据集中创建一个押金与价格比率的列：
- en: '[PRE26]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'With this new column, it is easy to make histograms the same way we did before:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个新列，我们可以像以前一样轻松地制作直方图：
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The results are interesting:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 结果很有趣：
- en: '![](../Images/c3d28074ebc4d327e156d408c0615e96.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c3d28074ebc4d327e156d408c0615e96.png)'
- en: Histogram of the distribution of the deposit value, Image by author
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 存款价值分布的直方图，作者提供的图片
- en: Many landlords are asking for the highest possible deposit, which is [limited
    by law](https://www.mieterbund.de/mietrecht/mietrecht-a-z/stichworte-zum-mietrecht-m/mietkaution.html)
    in Germany to 3 “cold” prices. Though it is possible to find a place with a 2x,
    1x, or even no required deposit at all (“kautionsfrei” in German). And surprisingly,
    there are some owners who ask for deposits higher than a 3-fold value. Sometimes,
    when this value is 3.05, it can be explained by a mistake in the calculation,
    but if the deposit value is about 5x, that is definitely not the case.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 许多房东要求最高可能的押金，这在德国[法律限制](https://www.mieterbund.de/mietrecht/mietrecht-a-z/stichworte-zum-mietrecht-m/mietkaution.html)为3个“冷”价格。尽管也可以找到要求2倍、1倍甚至完全不需要押金的地方（德语中为“kautionsfrei”）。令人惊讶的是，有些房主要求的押金高于3倍的值。有时，当这个值为3.05时，可以通过计算错误来解释，但如果押金值约为5倍，那肯定不是这种情况。
- en: Property publishers
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物业发布者
- en: Some owners prefer to rent their estate themselves; others collaborate with
    an agency. How big are those amounts? Let’s draw the distribution in the form
    of a **pie chart**.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一些房主喜欢自己出租他们的房产；其他人则与中介合作。这些金额有多大？让我们用**饼图**来展示分布。
- en: '[PRE28]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In this code, I grouped the dataframe by publisher and sorted the result by
    size. The only trick was to put the “private” group first, and for clarity reasons,
    I also marked this group in a different color.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我按发布者对数据框进行了分组，并按大小排序。唯一的技巧是将“私人”组放在首位，为了清晰起见，我还将该组标记为不同颜色。
- en: 'The results for 2 cities, Berlin and München, look like this:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 2个城市的结果，柏林和慕尼黑，看起来像这样：
- en: '![](../Images/7c7e58133ca518c806c7a130d9330819.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7c7e58133ca518c806c7a130d9330819.png)'
- en: Pie chart showing the number of estate objects per publisher, Image by author
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 显示每个发布者的房地产对象数量的饼图，作者提供的图片
- en: Interestingly, only 8.5% of the real estate in Berlin is listed by private individuals;
    in München this amount is 27%. It is also interesting to see that more than 50%
    of the properties are published by only a few agencies.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，只有8.5%的柏林房地产由私人个人挂牌；在慕尼黑，这个比例是27%。另一个有趣的点是，超过50%的房产是由少数几家中介发布的。
- en: Floor numbers
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 楼层数量
- en: As we saw before, the location of the apartment, like the ground floor or the
    floor under the roof, mostly does not affect the rent price. But it is still interesting
    to know how many floors most of the buildings have in Germany.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前看到的，公寓的位置，如底层或屋顶下的楼层，通常不会影响租金价格。但了解德国大多数建筑物的楼层数仍然很有趣。
- en: 'Initially, I did not expect any difficulties in this task, but the challenge
    was in making the custom sort. Many apartments or houses don’t have a floor number
    specified, and I wanted to put the “unknown” value at the left. This can be done
    by implementing a custom sort key in Pandas. The tricky part here is that when
    doing a DataFrame sort, the *custom_key* is applied by Pandas not to a single
    value but to a “pd.Series” object. So, we need a second method to update values
    in the series itself:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，我没有预期到这个任务会有任何困难，但挑战在于进行自定义排序。许多公寓或房屋没有指定楼层号码，我想把“未知”值放在最左边。这可以通过在Pandas中实现自定义排序键来完成。这里的难点是，当进行DataFrame排序时，*custom_key*
    是由Pandas应用于“pd.Series”对象而不是单个值。因此，我们需要第二种方法来更新系列中的值：
- en: '[PRE29]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The result for the first two cities, Berlin and München, looks like this:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个城市，柏林和慕尼黑的结果如下：
- en: '![](../Images/6f95bfe149b3482f559a378d3324b4be.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6f95bfe149b3482f559a378d3324b4be.png)'
- en: Histogram of the distribution of the floor number, Image by author
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 楼层分布直方图，作者提供的图片
- en: As we can see, most of the apartments in both cities are located on the 1st
    through 5th floors. But there are several apartments on the 10th–20th floors,
    and there is an apartment in Berlin located on the 87th floor (though I did not
    check if it was a typo or if that building really exists).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，这两个城市的大多数公寓位于1到5层。但也有几套公寓位于10到20层，还有一套柏林的公寓位于87层（虽然我没有检查是否是打印错误，或该建筑是否真的存在）。
- en: Geo Visualization
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地理可视化
- en: 'Building a histogram is more or less straightforward; let’s go to the fun part:
    displaying estate objects on a geographic map. And here we have 2 challenges.
    Firstly, we need to get the coordinates, and secondly, we need to draw the map.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 构建直方图或多或少是直接的；让我们进入有趣的部分：在地理地图上显示房产对象。在这里，我们面临两个挑战。首先，我们需要获取坐标，其次，我们需要绘制地图。
- en: Geocoding
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地理编码
- en: 'Let’s check our data again: the dataframe has “region” and “address” fields,
    which we can use for geocoding requests:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再检查一下数据：数据框中有“region”和“address”字段，我们可以用来进行地理编码请求：
- en: '![](../Images/883586d265a3c1057e9bca5d220be0bc.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/883586d265a3c1057e9bca5d220be0bc.png)'
- en: 'For getting the coordinates, I will use a [GeoPy](https://geopy.readthedocs.io/en/stable/)
    library; it’s free and does not require any API key (like, for example, a Google
    Maps API):'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 获取坐标时，我将使用一个[GeoPy](https://geopy.readthedocs.io/en/stable/)库；它是免费的，不需要任何API密钥（例如Google
    Maps API）：
- en: '[PRE30]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The code is straightforward; the only challenge was in removing “(“ and “)”
    brackets from addresses; it turned out that the library did not return any data
    in the case of addresses like “Nauen, Havelland (Kreis)”. I also used “lru_cache”
    to avoid making requests for the same addresses several times (some agencies have
    several apartments in the same house for rent).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 代码很简单；唯一的挑战是在地址中去掉“（”和“）”括号；结果发现，库在处理像“Nauen, Havelland (Kreis)”这样的地址时没有返回任何数据。我还使用了“lru_cache”以避免对相同地址进行多次请求（有些中介在同一栋楼里有几套待租公寓）。
- en: 'Having this method, I can easily request locations:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，我可以轻松请求位置：
- en: '[PRE31]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Map
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地图
- en: 'For drawing the map, I will use a free [Folium](https://python-visualization.github.io/folium/)
    library. As a simple example of using this library, the map with a mark can be
    displayed using several lines of code:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 为了绘制地图，我将使用一个免费的[Folium](https://python-visualization.github.io/folium/)库。作为使用该库的简单示例，可以通过几行代码显示带标记的地图：
- en: '[PRE32]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This code will produce a nice-looking interactive map without the need for
    an API key:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将生成一个美观的互动地图，无需API密钥：
- en: '![](../Images/07e49c366ff716a33de69f86a9df8132.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/07e49c366ff716a33de69f86a9df8132.png)'
- en: Folium map and marker example, Image by author
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Folium地图和标记示例，作者提供的图片
- en: 'But our visualization will be a bit more complex. I will use Folium’s “Circle”
    objects for each property, and I will also group different prices using “FeatureGroup”:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们的可视化会复杂一些。我将使用Folium的“Circle”对象来表示每个房产，并使用“FeatureGroup”来对不同价格进行分组：
- en: '[PRE33]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'I also used a heatmap as a background to make the results look better. The
    visualization also required some tuning of the colors and CSS styles to display
    gradients; the final result looks like this:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我还使用了热图作为背景，以使结果看起来更好。可视化还需要调整颜色和CSS样式以显示渐变；最终结果如下：
- en: '![](../Images/22219bcca3686c9f81c964f95cec2f9f.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/22219bcca3686c9f81c964f95cec2f9f.png)'
- en: Estate objects in Berlin, Image by author
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 柏林的房产对象，图片由作者提供
- en: 'The result is more or less intuitive. In Berlin, the areas around the center
    are more expensive, but there are no special “high-end” places. For example, real
    estate objects with a price higher than €5,000/m are distributed more or less
    equally:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 结果或多或少是直观的。在柏林，中心周围的区域更贵，但没有特别的“高档”地方。例如，价格高于€5,000/m的房产大致上是均匀分布的：
- en: '![](../Images/0ca0053581b9118580f687529649cd3a.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0ca0053581b9118580f687529649cd3a.png)'
- en: Estate objects in Berlin with a price ≥ €5,000/m, Image by author
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 柏林价格≥€5,000/m的房产，图片由作者提供
- en: Rent dynamics
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 租金动态
- en: This question is a bit more challenging. How fast is the renting process, and
    for how long are estate objects available for rent? The question is challenging
    because the publication date of the property is not available on the website.
    But we can estimate this data indirectly by comparing the results taken on different
    days.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题有点挑战性。租赁过程的速度如何？房产对象可租赁的时间是多长？这个问题具有挑战性，因为网站上没有房产的发布日期。但我们可以通过比较不同日期获得的结果间接估计这些数据。
- en: 'The idea is straightforward. Each property has a unique ID. I saved the data
    for the same city twice, with a 7-day interval. Then I displayed two price histograms:
    one with all properties and the second one with the properties that were removed
    within 7 days (properties that exist in the first dataframe but do not exist in
    the second one):'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法很简单。每个房产都有一个唯一的ID。我保存了同一城市的数据两次，间隔7天。然后我显示了两个价格直方图：一个是所有房产的，另一个是那些在7天内被移除的房产（存在于第一个数据框中但在第二个数据框中不存在）：
- en: '[PRE34]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'I also added percentage labels to the bars to make the bars more readable.
    The result looks like this:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我还在条形图上添加了百分比标签，使条形图更易读。结果如下：
- en: '![](../Images/0035a220b0e0181180bf959dfb82f65f.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0035a220b0e0181180bf959dfb82f65f.png)'
- en: Histogram of the estate objects, removed from listing within 7 days, Image by
    author
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 从列表中移除的房产直方图，图片由作者提供
- en: Obviously, this result is not statistically significant because the experiment
    was only conducted once. At least, I can say that at the time of making this test,
    about 20% of the estate objects in Berlin within the €800–1,200 range were removed
    from a listing within a week. More expensive objects are obviously staying longer;
    only about 9% of properties within a €3,000 price range were removed during the
    same period.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这个结果在统计上并不显著，因为实验仅进行了一次。至少，我可以说在进行这个测试时，柏林约20%的€800–1,200范围内的房产在一周内被从列表中移除。更贵的房产显然留存时间更长；在同一时期内，只有约9%的€3,000价格范围内的房产被移除。
- en: Anomalies Detection
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常检测
- en: 'As a next step, let’s have some fun and try to find “anomalies”, something
    unusual and non-standard. And to do this, I will use the **Isolation Forest**
    algorithm, implemented in the [Scikit-Learn](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.IsolationForest.html)
    Python library. For finding anomalies, I will use 3 features: area, price, and
    the number of rooms:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤，让我们来点乐趣，尝试找出“异常”情况，即一些不寻常和非标准的情况。为此，我将使用**Isolation Forest**算法，该算法在[Scikit-Learn](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.IsolationForest.html)
    Python库中实现。为了寻找异常，我将使用3个特征：面积、价格和房间数量：
- en: '[PRE35]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: As we can see in the code, the algorithm requires only one parameter, a so-called
    “contamination”, which determines the proportion of outliers in the dataset. Here
    I set it to 1%; obviously, the parameter can be changed if needed.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在代码中看到的，算法只需要一个参数，即所谓的“污染”，它决定了数据集中异常值的比例。在这里我将其设置为1%；显然，参数可以根据需要进行调整。
- en: 'After calling the “fit” method, we can get the results. The “decision_function”
    method returns the anomaly score, and the “predict” method returns +1 if the particular
    object is considered an inlier or -1 in case of an outlier. Let’s display only
    the outliers:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 调用“fit”方法后，我们可以得到结果。“decision_function”方法返回异常分数，“predict”方法返回+1（如果特定对象被视为正常点）或-1（如果是异常点）。让我们只显示异常点：
- en: '[PRE36]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The result looks like this:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '![](../Images/6a358bf77a3665373c8179e7a9582a45.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6a358bf77a3665373c8179e7a9582a45.png)'
- en: 'For these properties, some parameters are unusual, and by observing the result,
    I can guess that the number of rooms, area, or price was large. But one of the
    advantages of the “Isolation Forest” method is its interpretability. A [SHAP](https://shap.readthedocs.io/en/latest/generated/shap.Explainer.html)
    Python package allows the use of **Shapley values** to graphically explain the
    results:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些属性，有些参数不寻常，通过观察结果，我可以猜测房间数量、面积或价格较大。但是，“隔离森林”方法的一个优点是其可解释性。一个[SHAP](https://shap.readthedocs.io/en/latest/generated/shap.Explainer.html)
    Python 包允许使用**Shapley值**以图形化的方式解释结果：
- en: '[PRE37]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The analysis itself takes about a minute. After that, we can get the results
    for every item on our list. For example, let’s examine the property with the number
    3030:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 分析本身大约需要一分钟。之后，我们可以得到列表中每一项的结果。例如，让我们检查编号为3030的房产：
- en: '[PRE38]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '![](../Images/7801e49cf8387ca8e244be54901a42ae.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7801e49cf8387ca8e244be54901a42ae.png)'
- en: The Shapley explainer result, Image by author
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Shapley解释器结果，图像由作者提供
- en: We can see that the price was okay, but the 211 m² property area and the number
    of 5 rooms were treated as unusual by the algorithm.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，价格是合适的，但211平方米的房产面积和5间房的数量被算法视为不寻常。
- en: 'It is also possible to see how the algorithm works by displaying a scatter
    plot. For example, let’s see how the “amount of rooms” and the “price” affect
    the Shapley values:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以通过显示散点图来查看算法的工作情况。例如，让我们看看“房间数量”和“价格”如何影响Shapley值：
- en: '[PRE39]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The result looks like this:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '![](../Images/abb85012ae0c2592f366c2142ce3da1b.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/abb85012ae0c2592f366c2142ce3da1b.png)'
- en: The scatter plot of SHAP values, Image by author
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: SHAP值的散点图，图像由作者提供
- en: Here we can see that the number of rooms over 4 is mostly affecting the score.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到房间数量超过4的情况对得分的影响最大。
- en: Word Cloud
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 词云
- en: 'I would not treat the last step as a real analysis, but just for fun, let’s
    build the word cloud and see which words are the most popular in the estate titles.
    With a Python [WordCloud](https://amueller.github.io/word_cloud/) library, we
    can do this in only several lines of code:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会将最后一步视为真正的分析，但为了趣味，我们来构建词云，看看在房地产标题中哪些词最为流行。通过Python [WordCloud](https://amueller.github.io/word_cloud/)
    库，我们只需几行代码即可做到这一点：
- en: '[PRE40]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The result looks like this:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '![](../Images/0fd8d19b6a14c549ea16172a981ca776.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0fd8d19b6a14c549ea16172a981ca776.png)'
- en: The word of real estate object titles, Image by author
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 房地产对象标题的词云，图像由作者提供
- en: Words like “wohnung” (apartment), “zimmer” (room), and “balkon” (balcony) are
    the most popular, we can also see words like “helle” (bright), “moderne” (modern),
    “schöne” (beautiful), and so on.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 词如“wohnung”（公寓）、“zimmer”（房间）和“balkon”（阳台）最为流行，我们还可以看到“helle”（明亮）、“moderne”（现代）、“schöne”（美丽）等词。
- en: Conclusion
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: As Alan Smith, a former researcher in the UK Office for National Statistics,
    told in the [TED talks](https://www.youtube.com/watch?v=ogeGJS0GEF4) in 2017,
    we should love statistics because it’s a science *about us*. And it’s really interesting
    to explore a dataset, like this rent housing data, and find interesting patterns
    there. I hope it was interesting for readers as well, not only as an example of
    using Pandas or Bokeh but also as a small insight into another country’s life
    and culture. Obviously, I did not test all the data; for example, it may be interesting
    to know how many landlords allow tenants to keep pets in the apartment, and so
    on. Readers can test this on their own; code snippets from this article should
    be enough for that.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 正如英国国家统计局前研究员艾伦·史密斯在2017年的[TED演讲](https://www.youtube.com/watch?v=ogeGJS0GEF4)中所说，我们应该热爱统计学，因为它是*关于我们的科学*。探索数据集，如这个租房数据，并发现有趣的模式确实很有趣。我希望这对读者也很有趣，不仅作为使用Pandas或Bokeh的例子，而且作为对另一个国家的生活和文化的一个小见解。显然，我没有测试所有的数据；例如，了解多少房东允许租户在公寓里养宠物可能会很有趣。读者可以自行测试；本文中的代码片段应该足够了。
- en: If you enjoyed this story, feel free [to subscribe](https://medium.com/@dmitryelj/membership)
    to Medium, and you will get notifications when my new articles will be published,
    as well as full access to thousands of stories from other authors.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这个故事，欢迎[订阅](https://medium.com/@dmitryelj/membership)Medium，你将会收到我新文章发布的通知，并且可以全面访问其他作者的数千篇故事。
- en: Thanks for reading.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。
