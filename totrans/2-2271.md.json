["```py\n# define three tabs for the three loading methods\ngallery_tab, upload_tab, url_tab = st.tabs([\"Gallery\", \"Upload\", \"Image URL\"])\n```", "```py\nwith gallery_tab:\n    ...\n\n# raise a warning if file uploader or URL downloader have already loaded an image \n    if st.session_state.get(\"file_uploader\") is not None:\n        st.warning(\"To use the Gallery, remove the uploaded image first.\")\n    if st.session_state.get(\"image_url\") not in [\"\", None]:\n        st.warning(\"To use the Gallery, remove the image URL first.\")\n\n  img = ...\n\nwith upload_tab:\n  img = ...\n\n  # raise a warning if the URL downloader has already loaded an image\n    if st.session_state.get(\"image_url\") not in [\"\", None]:\n        st.warning(\"To use the file uploader, remove the image URL first.\")\n\nwith url_tab:\n  img = ...\n```", "```py\nimport streamlit as st\nfrom PIL import Image\n\nwith gallery_tab:\n    options = list(gallery_dict.keys())\n    file_name = st.selectbox(\"Select Art\",\n                             options=options, \n                             index=options.index(\"Mona Lisa (Leonardo da Vinci)\")\n                             )\n    img_file = gallery_dict[file_name]\n\n    if st.session_state.get(\"file_uploader\") is not None:\n        st.warning(\"To use the Gallery, remove the uploaded image first.\")\n    if st.session_state.get(\"image_url\") not in [\"\", None]:\n        st.warning(\"To use the Gallery, remove the image URL first.\")\n\n    img = Image.open(img_file)\n```", "```py\nwith upload_tab:\n    img_file = st.file_uploader(\"Upload Art\", key=\"file_uploader\")\n    if file is not None:\n        try:\n            img = Image.open(img_file)\n        except:\n            st.error(\"The file you uploaded does not seem to be a valid image. Try uploading a png or jpg file.\")\n\n    if st.session_state.get(\"image_url\") not in [\"\", None]:\n        st.warning(\"To use the file uploader, remove the image URL first.\")\n```", "```py\nimport requests\nfrom io import BytesIO\n\nwith url_tab:\n    url_text = st.empty()\n\n    url = url_text.text_input(\"Image URL\", key=\"image_url\")\n\n    if url != \"\":\n        try:\n            response = requests.get(url)\n            img = Image.open(BytesIO(response.content))\n        except:\n            st.error(\"The URL does not seem to be valid.\")\n```", "```py\nimg = ImageEnhance.Color(img)\nimg = img.enhance(2.5)\n```", "```py\nenhancement_range = {\n  # \"enhancement_type\": [min, max, step_size]\n    \"Color\": [0., 5., 0.2], \n    \"Sharpness\": [0., 3., 0.2], \n    \"Contrast\": [0.5, 1.5, 0.1], \n    \"Brightness\": [0.5, 1.5, 0.1]\n}\nenhancement_categories = enhancement_range.keys()\n# put adjustment sliders inside an expander \nenh_expander = st.sidebar.expander(\"Image Enhancements\", expanded=False)\n# create a reset button that resets all enhancements to default value (1.0)\nwith enh_expander:\n    if st.button(\"reset\"):\n        for cat in enhancement_categories:\n            if f\"{cat}_enhancement\" in st.session_state:\n                st.session_state[f\"{cat}_enhancement\"] = 1.0\n# create sliders for each enhancement category using the dictionary values (min, max, step_size)\nenhancement_factor_dict = {\n    cat: enh_expander.slider(f\"{cat} Enhancement\", \n                            value=1., \n                            min_value=enhancement_range[cat][0], \n                            max_value=enhancement_range[cat][1], \n                            step=enhancement_range[cat][2],\n                            key=f\"{cat}_enhancement\")\n    for cat in enhancement_categories\n}\n```", "```py\nfrom PIL import ImageEnhance\nfor cat in enhancement_categories:\n  # apply the enhancement class to the image\n  # e.g. for cat='Color' this would be the same as \n    # img = ImageEnhance.Color(img)\n    img = getattr(ImageEnhance, cat)(img)\n\n  # apply the enhencement value from the corresponding st.slider\n    img = img.enhance(enhancement_factor_dict[cat])\n```", "```py\nwith st.expander(\"ðŸ–¼  Artwork\", expanded=True):\n    st.image(img, use_column_width=True)\n```", "```py\nr, g, b = np.array(img).reshape(-1, 3).T\ndf_rgb = pd.DataFrame({\"R\": r, \"G\": g, \"B\": b}).sample(n=sample_size)\n```", "```py\nfrom sklearn.cluster import KMeans\npalette_size = st.sidebar.number_input(\"palette size\", \n                    min_value=1, \n                    max_value=20, \n                    value=5, \n                    step=1, \n                    help=\"Number of colors to infer from the image.\")\nmodel = KMeans(n_clusters=palette_size)\nclusters = model.fit_predict(df_rgb)\n\npalette = model.cluster_centers_.astype(int).tolist()\n```", "```py\ncolumns = st.columns(palette_size)\nfor i, col in enumerate(columns):\n    with col:        \n        st.session_state[f\"col_{i}\"]= \\\\\n\t\t\t\t    st.color_picker(label=str(i), \n                                    value=palette[i], \n                                    key=f\"pal_{i}\")\n\t\t\t\t\t\t  \t\t\t\t\t\t\tvalue=palette[i], \n\t\t\t\t\t\t\t  \t\t\t\t\t\tkey=f\"pal_{i}\")\n```"]