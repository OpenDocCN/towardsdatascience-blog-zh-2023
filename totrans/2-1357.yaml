- en: 'Introduction to PyTorch: from training loop to prediction'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyTorch简介：从训练循环到预测
- en: 原文：[https://towardsdatascience.com/introduction-to-pytorch-from-training-loop-to-prediction-a70372764432](https://towardsdatascience.com/introduction-to-pytorch-from-training-loop-to-prediction-a70372764432)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/introduction-to-pytorch-from-training-loop-to-prediction-a70372764432](https://towardsdatascience.com/introduction-to-pytorch-from-training-loop-to-prediction-a70372764432)
- en: '*An introduction to PyTorch’s training loop and general approach to tackle
    the library’s steeper initial learning curve*'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*对PyTorch训练循环和应对库陡峭初学曲线的一般方法的介绍*'
- en: '[](https://medium.com/@theDrewDag?source=post_page-----a70372764432--------------------------------)[![Andrea
    D''Agostino](../Images/58c7c218815f25278aae59cea44d8771.png)](https://medium.com/@theDrewDag?source=post_page-----a70372764432--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a70372764432--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a70372764432--------------------------------)
    [Andrea D''Agostino](https://medium.com/@theDrewDag?source=post_page-----a70372764432--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@theDrewDag?source=post_page-----a70372764432--------------------------------)[![Andrea
    D''Agostino](../Images/58c7c218815f25278aae59cea44d8771.png)](https://medium.com/@theDrewDag?source=post_page-----a70372764432--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a70372764432--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a70372764432--------------------------------)
    [Andrea D''Agostino](https://medium.com/@theDrewDag?source=post_page-----a70372764432--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a70372764432--------------------------------)
    ·14 min read·Mar 28, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在[Towards Data Science](https://towardsdatascience.com/?source=post_page-----a70372764432--------------------------------)
    ·14分钟阅读·2023年3月28日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/39bd895d764577c1f195119868a023ec.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/39bd895d764577c1f195119868a023ec.png)'
- en: Image by author.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片。
- en: In this post we will cover how to implement a logistic regression model using
    PyTorch in Python.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将讨论如何在Python中使用PyTorch实现逻辑回归模型。
- en: '**PyTorch is one of the most famous and used deep learning frameworks** by
    the community of data scientists and machine learning engineers in the world,
    and thus learning this tool becomes an essential step in your learning path if
    you want to build a career in the field of applied AI.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**PyTorch是全球数据科学家和机器学习工程师社区中最著名和最常用的深度学习框架之一**，因此，如果你希望在应用AI领域建立职业生涯，学习这个工具是你学习路径中的一个关键步骤。'
- en: It joins TensorFlow, another very famous deep learning framework developed by
    Google.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 它与TensorFlow并列，TensorFlow是由Google开发的另一个非常著名的深度学习框架。
- en: There are no notable fundamental differences, except for the structure and organization
    of their APIs, which can be very different.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除了API的结构和组织可能非常不同外，基本原理没有显著的差别。
- en: While both frameworks allow us to create very complex neural networks, PyTorch
    is generally preferred due to its more *pythonic* style and the freedom it allows
    the developer to integrate custom logic into the software.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这两个框架都允许我们创建非常复杂的神经网络，但PyTorch通常更受欢迎，因为它的风格更加*python化*，并且允许开发者将自定义逻辑集成到软件中。
- en: We will use the **Sklearn breast cancer dataset**, an open source dataset already
    used previously in some of my previous article to train a binary classification
    model.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用**Sklearn乳腺癌数据集**，这是一个开源数据集，之前在我一些文章中已被使用，用于训练一个二分类模型。
- en: 'The goal is to explain how to:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是解释如何：
- en: go from a pandas dataframe to PyTorch’s Datasets and DataLoaders
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从pandas数据框转换到PyTorch的Datasets和DataLoaders
- en: create a neural network for binary classification in PyTorch
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PyTorch中创建一个用于二分类的神经网络
- en: create predictions
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建预测
- en: evaluate the performance of our model with utility functions and matplotlib
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用实用函数和matplotlib评估我们的模型表现
- en: use this network to make predictions
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用这个网络进行预测
- en: By the end of this article **we will have a clear idea of how to create a neural
    network in PyTorch and how the training loop works.**
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 到文章末尾，**我们将对如何在PyTorch中创建神经网络以及训练循环的工作原理有清晰的了解**。
- en: Let’s get started!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 开始吧！
- en: Install PyTorch and other dependencies
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装PyTorch及其他依赖
- en: We start our project by creating a virtual environment in a dedicated folder.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在专用文件夹中创建虚拟环境来开始我们的项目。
- en: Visit this link to learn how to create a virtual environment with Conda.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 访问此链接以了解如何使用Conda创建虚拟环境。
- en: '[](/how-to-set-up-a-development-environment-for-machine-learning-b015a91bda8a?source=post_page-----a70372764432--------------------------------)
    [## How to Set Up a Development Environment for Machine Learning'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/how-to-set-up-a-development-environment-for-machine-learning-b015a91bda8a?source=post_page-----a70372764432--------------------------------)
    [## 如何为机器学习设置开发环境'
- en: How to install, activate, and use a virtual environment for machine learning
    and data science-related tasks
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何安装、激活和使用用于机器学习和数据科学相关任务的虚拟环境
- en: towardsdatascience.com](/how-to-set-up-a-development-environment-for-machine-learning-b015a91bda8a?source=post_page-----a70372764432--------------------------------)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/how-to-set-up-a-development-environment-for-machine-learning-b015a91bda8a?source=post_page-----a70372764432--------------------------------)'
- en: Once our virtual environment has been created, we can run the command
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的虚拟环境创建完成，我们可以运行以下命令
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: in the terminal. This command will install the latest version of PyTorch, which
    as of this writing is version 2.0.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中。该命令将安装PyTorch的最新版本，截至撰写本文时为2.0版。
- en: Starting a notebook, we can check the library version using `torch.__version__`
    after doing `import torch`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 启动一个笔记本，我们可以在执行`import torch`之后使用`torch.__version__`检查库的版本。
- en: We can verify that PyTorch is correctly installed in the environment by importing
    and launching a small test script, as shown in the official guide.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过导入并运行一个小测试脚本来验证PyTorch是否在环境中正确安装，如官方指南所示。
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If the script executes correctly then we are ready to proceed with the project.
    Otherwise I suggest the reader to refer to the official guide located here [https://pytorch.org/get-started/locally/](https://pytorch.org/get-started/locally/).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果脚本正确执行，则我们可以继续进行项目。否则，我建议读者参考这里的官方指南 [https://pytorch.org/get-started/locally/](https://pytorch.org/get-started/locally/)。
- en: 'Let’s continue with the installation of the additional dependencies:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续安装其他依赖项：
- en: Sklearn; `pip install scikit-learn`
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sklearn; `pip install scikit-learn`
- en: Pandas; `pip install pandas`
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pandas; `pip install pandas`
- en: Matplotlib; `pip install matplotlib`
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matplotlib; `pip install matplotlib`
- en: Libraries like Numpy are automatically install when you install PyTorch.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 像Numpy这样的库在安装PyTorch时会自动安装。
- en: Import and explore the dataset
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入和探索数据集
- en: Let’s start by importing the installed libraries and breast cancer dataset from
    Sklearn with the following code snippet
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从导入已安装的库和Sklearn的乳腺癌数据集开始，使用以下代码片段
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let’s create a dataframe dedicated to holding our X and y like this
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个数据框来专门保存我们的X和y，如下所示
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/6de5745961fab2ab6db54bbca2a26f6a.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6de5745961fab2ab6db54bbca2a26f6a.png)'
- en: Example of the dataframe. Image by author.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框的示例。图片由作者提供。
- en: Our goal is to create a model that can predict the target column based on the
    characteristics in the other columns.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是创建一个可以根据其他列的特征预测目标列的模型。
- en: Let’s go do a minimum of exploratory analysis to get some awareness of the dataset.
    We will use the sweetviz library to automatically create an analysis report.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行最低限度的探索性分析，以了解数据集。我们将使用sweetviz库自动创建分析报告。
- en: We can install sweetviz with the command `pip install sweetviz` and create an
    EDA (exploratory data analysis) report with this piece of code
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用命令`pip install sweetviz`安装sweetviz，并使用这段代码创建一个EDA（探索性数据分析）报告
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/6fad2c75b0b924be07485ffb418ebf66.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6fad2c75b0b924be07485ffb418ebf66.png)'
- en: Sweetviz analyzing our dataset. Image by author.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Sweetviz正在分析我们的数据集。图片由作者提供。
- en: Sweetviz will create a report right in our notebook for us to explore.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Sweetviz将直接在我们的笔记本中创建报告供我们探索。
- en: '![](../Images/321ed6120d3081ba0f5b948dc8335335.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/321ed6120d3081ba0f5b948dc8335335.png)'
- en: “Association” tab in Sweetviz. Image by author.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Sweetviz中的“关联”标签。图片由作者提供。
- en: We see how several columns are highly associated with a value of 0 or 1 of our
    target column.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到多个列与目标列的值0或1高度相关。
- en: Being a multidimensional dataset and having variables with different distributions,
    a neural network is a valid option to model this data. That said, this dataset
    can also be modeled by simpler models, such as decision trees.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个多维数据集，且具有不同分布的变量，神经网络是建模该数据的一个有效选项。也就是说，该数据集也可以通过更简单的模型进行建模，如决策树。
- en: We will now import two other libraries in order to visualize the dataset. **We**
    **will use PCA (Principal Component Analysis)** from Sklearn and Seaborn to visualize
    the multidimensional dataset.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将导入另外两个库，以便可视化数据集。**我们** **将使用Sklearn和Seaborn中的PCA（主成分分析）**来可视化多维数据集。
- en: PCA will help us compress the large number of variables into just two, which
    we will use as the X and Y axis in a Seaborn scatterplot. Seaborn takes an additional
    parameter called *hue* to color the dots based on an additional variable. We will
    use our target.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: PCA将帮助我们将大量变量压缩成两个变量，我们将把这两个变量用作Seaborn散点图中的X轴和Y轴。Seaborn使用一个额外的参数*色调*来根据附加变量为点上色。我们将使用我们的目标。
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/49fd8751c34d14f60d7717deed2fa64a.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/49fd8751c34d14f60d7717deed2fa64a.png)'
- en: PCA projection of the breast cancer dataset. Image by author.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 乳腺癌数据集的PCA投影。图像由作者提供。
- en: We see how class 1 data points group based on common characteristics. It will
    be the goal of our neural network to classify the rows between targets 0 or 1.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到类别1的数据点基于共同特征分组。我们的神经网络的目标是将行分类为目标0或1。
- en: Create the datasets and dataloaders classes
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据集和数据加载器类
- en: PyTorch provides `Dataset` and `DataLoader` objects to allow us to efficiently
    organize and load our data into the neural network.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch提供了`Dataset`和`DataLoader`对象，允许我们高效地组织和加载数据到神经网络中。
- en: It would be possible to use pandas directly, but this would have disadvantages
    because it would make our code less efficient.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 可以直接使用pandas，但这样做会有缺点，因为它会使我们的代码效率降低。
- en: The `Dataset` class allows us to specify the right format for your data and
    apply the retrieval and transformation logics that are often fundamental (think
    of the data augmentation applied to images).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dataset`类允许我们指定数据的正确格式，并应用常常是基础的检索和转换逻辑（例如图像的数据增强）。'
- en: Let’s see how to create a PyTorch `Dataset` object.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建一个PyTorch `Dataset`对象。
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is a class that inherits from `Dataset` and allows the `DataLoader`, which
    we will create shortly, to efficiently retrieve batches of data.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个继承自`Dataset`的类，并允许我们将要创建的`DataLoader`高效地检索数据批次。
- en: The class takes X and y as input.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 该类以X和y作为输入。
- en: Training, validation and test datasets
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 训练、验证和测试数据集
- en: Before proceeding to the following steps, it is important to create training,
    validation and test sets.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续以下步骤之前，创建训练、验证和测试集是很重要的。
- en: These will help us evaluate the performance of our model and understand the
    quality of the predictions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这些将帮助我们评估模型的性能，并理解预测的质量。
- en: For the interested reader, I suggest reading the article [6 Things You Should
    Do Before Training Your Model](https://medium.com/towards-data-science/6-things-you-should-do-before-training-your-model-51703ab5e125)
    and [what is cross-validation in machine learning](https://medium.com/towards-data-science/what-is-cross-validation-in-machine-learning-14d2a509d6a5)
    to better understand why splitting our data into three partitions is an effective
    method for performance evaluation.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于感兴趣的读者，我建议阅读文章[训练模型前你应该做的6件事](https://medium.com/towards-data-science/6-things-you-should-do-before-training-your-model-51703ab5e125)和[机器学习中的交叉验证是什么](https://medium.com/towards-data-science/what-is-cross-validation-in-machine-learning-14d2a509d6a5)，以更好地理解为什么将数据拆分为三部分是一种有效的性能评估方法。
- en: With Sklearn this becomes easy with the `train_test_split` method.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Sklearn，这变得很简单，使用`train_test_split`方法即可。
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With this small snippet of code we created our training, validation and test
    sets according to controllable splits.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这段小代码，我们根据可控的分割创建了我们的训练、验证和测试集。
- en: Data normalization
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据规范化
- en: When doing deep learning, even for a simple task like binary classification,
    it is always necessary to normalize our data.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行深度学习时，即使是像二分类这样简单的任务，也总是需要规范化我们的数据。
- en: Normalizing means bringing all the values of the various columns in the dataset
    to the same numerical scale. This helps the neural network converge more effectively
    and thus make accurate predictions faster.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 规范化意味着将数据集中各个列的所有值统一到相同的数值尺度。这有助于神经网络更有效地收敛，从而更快地做出准确的预测。
- en: We will use Sklearn’s `StandardScaler`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Sklearn的`StandardScaler`。
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notice how `fit_trasform` is applied only to the training set, while `transform`
    is applied to the other two datasets. This is to avoid *data leakage* — when information
    from our validation or test set is unintentionally leaked into our training set.
    We want our training set to be the only source of learning, unaffected by test
    data.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`fit_transform`仅应用于训练集，而`transform`应用于其他两个数据集。这是为了避免*数据泄露*——即验证集或测试集中的信息无意中泄漏到训练集中。我们希望训练集是唯一的学习来源，不受测试数据影响。
- en: This data is now ready to be input to the `BreastCancerDataset` class.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据现在已经准备好输入到`BreastCancerDataset`类中。
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We import the dataloader and initialize the objects.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入 dataloader 并初始化对象。
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The power of the `DataLoader` is that it allows us to specify whether to shuffling
    our data and in what number of batches the data should be supplied to the model.
    **The batch size is to be considered a hyperparameter** of the model and therefore
    can impact the results of our inferences.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataLoader` 的强大之处在于它允许我们指定是否对数据进行洗牌以及数据应该以多少批次提供给模型。**批次大小应被视为模型的超参数**，因此可能会影响推断结果。'
- en: Neural network implementation in PyTorch
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 神经网络在 PyTorch 中的实现
- en: Creating a model in PyTorch might sound complex, but it really only requires
    understanding a few basic concepts.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PyTorch 中创建模型可能听起来很复杂，但实际上只需要理解一些基本概念。
- en: When writing a model in PyTorch, we will use an **object-based approach**, like
    with datasets. It means that we will create a class like class `MyModel` which
    inherits from PyTorch’s `nn.Module` class.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PyTorch 中编写模型时，我们将使用**面向对象的方法**，就像处理数据集一样。这意味着我们将创建一个像 `MyModel` 这样的类，它继承自
    PyTorch 的 `nn.Module` 类。
- en: PyTorch is an autodifferentiation software. It means that when we write a neural
    network based on the backpropagation algorithm, the calculation of the derivatives
    to calculate the loss is done automatically behind the scenes. This requires writing
    some dedicated code that might get confusing the first time around.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyTorch 是一个自动微分软件。这意味着当我们基于反向传播算法编写神经网络时，计算导数来计算损失的过程是自动进行的。这需要编写一些专门的代码，第一次遇到时可能会感到困惑。
- en: I advise the reader who wants to know the basics of how neural networks work
    to consult the article Introduction to neural networks — weights, biases and activation
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议想了解神经网络工作原理基础的读者查阅文章 [神经网络介绍——权重、偏差和激活](https://medium.com/mlearning-ai/introduction-to-neural-networks-weights-biases-and-activation-270ebf2545aa?source=post_page-----a70372764432--------------------------------)。
- en: '[](https://medium.com/mlearning-ai/introduction-to-neural-networks-weights-biases-and-activation-270ebf2545aa?source=post_page-----a70372764432--------------------------------)
    [## Introduction to neural networks — weights, biases and activation'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 神经网络介绍——权重、偏差和激活](https://medium.com/mlearning-ai/introduction-to-neural-networks-weights-biases-and-activation-270ebf2545aa?source=post_page-----a70372764432--------------------------------)'
- en: How a neural network learns through a weights, bias and activation function
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 神经网络如何通过权重、偏差和激活函数学习
- en: medium.com](https://medium.com/mlearning-ai/introduction-to-neural-networks-weights-biases-and-activation-270ebf2545aa?source=post_page-----a70372764432--------------------------------)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/mlearning-ai/introduction-to-neural-networks-weights-biases-and-activation-270ebf2545aa?source=post_page-----a70372764432--------------------------------)'
- en: That said, let’s see what the code for writing a logistic regression model looks
    like.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，让我们看看编写逻辑回归模型的代码是怎样的。
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Our class inherits from `nn.Module`. This class provides the methods behind
    the scenes that make the model work.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的类继承自 `nn.Module`。这个类提供了让模型正常工作的后台方法。
- en: __init__ method
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: __init__ 方法
- en: 'The `__init__` method of a class contains the logic that runs when instantiating
    a class in Python. Here we pass two arguments: the number of features and the
    number of classes to predict.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 类的 `__init__` 方法包含了在 Python 中实例化类时运行的逻辑。在这里我们传递两个参数：特征的数量和要预测的类别数量。
- en: '`num_features` corresponds to the number of columns that make up our dataset
    minus our target variable, while `num_classes` corresponds to the number of results
    that the neural network must return.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`num_features` 对应于组成数据集的列数减去目标变量，而 `num_classes` 对应于神经网络必须返回的结果数量。'
- en: In addition to the two arguments and their class variables, we see the `super().__init__()`
    line. The super function initializes the init method of the parent class. This
    allows us to have the functionality of `nn.Module` within our model.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这两个参数及其类变量，我们还看到 `super().__init__()` 这一行。super 函数初始化了父类的 init 方法。这使得我们能够在模型中拥有
    `nn.Module` 的功能。
- en: Always in the init block, we implement a linear layer called `self.linear1`,
    which takes as arguments the number of features and the number of results to return.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在 init 块中，我们实现了一个线性层，称为 `self.linear1`，它的参数是特征的数量和返回结果的数量。
- en: forward() method
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: forward() 方法
- en: By writing the `forward` method we tell Python to override the same method within
    PyTorch’s `nn.Module` parent class. In fact, this method is called when performing
    a forward pass — that is, when our data passes from one layer to another.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编写 `forward` 方法，我们告诉 Python 重写 PyTorch 的 `nn.Module` 父类中的相同方法。实际上，这个方法在进行前向传播时被调用——也就是当我们的数据从一层流向另一层时。
- en: '`forward` accepts input *x* which contains the features on which the model
    will calibrate its performance.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`forward` 接受输入 *x*，其中包含模型将根据其性能进行校准的特征。'
- en: The input passes through the first layer, creating the `logits` variable. The
    logits are the neural network calculations that are not yet converted into probabilities
    by the final activation function, which in this case is a sigmoid. In fact, they
    are the internal representation of the neural network before being mapped to a
    function that allows it to be interpreted.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 输入通过第一层，创建了`logits`变量。logits 是神经网络的计算结果，还未通过最终激活函数（在此情况下为 sigmoid）转换为概率。实际上，它们是神经网络在映射到可以解释的函数之前的内部表示。
- en: In this case the sigmoid function will map the logits to probabilities between
    0 and 1\. If the output is less than 0, then the class will be 0 otherwise it
    will be 1\. This happens in the line `self.probs = torch.sigmoid(x)`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，sigmoid 函数会将 logits 映射到 0 和 1 之间的概率。如果输出小于 0，则类别为 0，否则为 1。这发生在`self.probs
    = torch.sigmoid(x)`这一行。
- en: Utility functions for plotting and accuracy calculation
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于绘图和准确率计算的实用函数
- en: Let’s create utility functions to use in the training loop that we will see
    shortly. These two are used to compute the accuracy at the end of each epoch and
    to display the performance curves at the end of the training.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建实用函数以在即将看到的训练循环中使用。这两个函数用于计算每个 epoch 结束时的准确率，并在训练结束时显示性能曲线。
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Model training
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型训练
- en: 'Now we come to the part where most deep learning newcomers struggle: the PyTorch
    training loop.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们进入大多数深度学习新手 struggle 的部分：PyTorch 训练循环。
- en: Let’s look at the code and then comment it
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看代码，然后进行注释。
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Unlike TensorFlow, PyTorch requires us to write a training loop in pure Python.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 与 TensorFlow 不同，PyTorch 要求我们用纯 Python 编写训练循环。
- en: 'Let’s see the procedure step by step:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步查看过程：
- en: We instantiate the model and the optimizer
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们实例化模型和优化器
- en: We decide on a number of epochs
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们决定一个 epoch 数量。
- en: We create a for loop that iterates through the epochs
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个 for 循环来遍历 epochs。
- en: For each epoch, we set the model to training mode with `model.train()` and cycle
    through the `train_loader`
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个 epoch，我们使用`model.train()`将模型设置为训练模式，并循环遍历`train_loader`。
- en: For each batch of the `train_loader`, calculate the loss, bring the calculation
    of the derivatives to 0 with `optimizer.zero_grad()` and update the weights of
    the network with `optimizer.step()`
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个批次的`train_loader`，计算损失，使用`optimizer.zero_grad()`将梯度计算归零，并使用`optimizer.step()`更新网络的权重。
- en: At this point the training loop is complete, and if you want you can integrate
    the same logic on the validation dataloader as written in the code.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此时训练循环已经完成，如果需要，可以将相同的逻辑集成到验证数据加载器中，如代码所示。
- en: Here is the result of the training after the launch of this code
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这是运行此代码后的训练结果。
- en: '![](../Images/8b039bdc7a62f8aa7aebf2d91394de93.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8b039bdc7a62f8aa7aebf2d91394de93.png)'
- en: Training in progress. Image by author.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 训练中。图片由作者提供。
- en: Neural network performance evaluation
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 神经网络性能评估
- en: We use the previously created utility function to plot loss in training and
    validation.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用之前创建的实用函数来绘制训练和验证中的损失。
- en: '[PRE14]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/da44d373ae986d30b40f3f83af8bb26f.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/da44d373ae986d30b40f3f83af8bb26f.png)'
- en: Performances of the neural network. Image by author.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 神经网络的性能。图片由作者提供。
- en: Our binary classification model quickly converges to high accuracy, and we see
    how the loss drops at the end of each epoch.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的二分类模型很快收敛到高准确率，我们可以看到每个 epoch 结束时损失如何下降。
- en: The dataset turns out to be simple to model and the low number of examples does
    not help to see a more gradual convergence towards high performance by the network.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集模型简单，样本数量少并没有帮助网络更逐步地收敛到高性能。
- en: I emphasize that it is possible to integrate the *TensorBoard* software into
    PyTorch to be able to log performance metrics automatically between the various
    experiments.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我强调，可以将 *TensorBoard* 软件集成到 PyTorch 中，以便在各种实验之间自动记录性能指标。
- en: Create predictions
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建预测
- en: We have reached the end of this guide. Let’s see the code to create predictions
    for our entire dataset.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到达了本指南的末尾。让我们查看创建整个数据集预测的代码。
- en: '[PRE15]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now let’s import the `metrics` package from Sklearn which allows us to quickly
    calculate the confusion matrix and classification report directly on our pandas
    dataframe.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们导入 Sklearn 的`metrics` 包，它允许我们直接在 pandas 数据框上快速计算混淆矩阵和分类报告。
- en: '[PRE16]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/ba65cf7b416913d92c62633c77ee824a.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ba65cf7b416913d92c62633c77ee824a.png)'
- en: Summary of performance on the entire dataset with a classification report. Image
    by author.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 对整个数据集的性能总结，附有分类报告。图片由作者提供。
- en: And the confusion matrix, which shows the number of correct answers on the diagonal
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 以及混淆矩阵，它显示了对角线上的正确答案数量。
- en: '[PRE17]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here is a small function to create a classification line that separates the
    classes in the PCA graph
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个小函数，用于创建一个分类线，将 PCA 图中的类别分开。
- en: '[PRE18]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: And here’s how the model separates benign from malignant cells
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这是模型如何将良性细胞与恶性细胞区分开来
- en: '![](../Images/c5978be235283290009ada45213ed782.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c5978be235283290009ada45213ed782.png)'
- en: Classification boundary visualized. Image by author.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 分类边界可视化。图片由作者提供。
- en: Conclusions
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article we have seen how to create a binary classification model with
    PyTorch, starting from a Pandas dataframe.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们已经看到如何使用 PyTorch 从 Pandas 数据框创建一个二分类模型。
- en: We’ve seen what the training loop looks like, how to evaluate the model, and
    how to create predictions and visualizations to aid interpretation.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了训练循环的样子，如何评估模型，以及如何创建预测和可视化以帮助解释。
- en: With PyTorch it is possible to create very complex neural networks … just think
    that Tesla, the manufacturer of electric cars based on AI, uses PyTorch to create
    its models.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PyTorch 可以创建非常复杂的神经网络……只需想到特斯拉，这家基于 AI 的电动车制造商，就使用 PyTorch 创建其模型。
- en: For those who want to start their deep learning journey, learning PyTorch as
    early as possible becomes a high priority task as it allows you to build important
    technologies that can solve complex data-driven problems.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些想要开始深度学习之旅的人来说，尽早学习 PyTorch 成为一个高优先级任务，因为它允许你构建重要的技术，解决复杂的数据驱动问题。
- en: '**If you want to support my content creation activity, feel free to follow
    my referral link below and join Medium’s membership program**. I will receive
    a portion of your investment and you’ll be able to access Medium’s plethora of
    articles on data science and more in a seamless way.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你想支持我的内容创作活动，可以通过下面的推荐链接加入 Medium 会员计划**。我将获得你投资的一部分，你将能够无缝访问 Medium 上大量的数据科学及更多领域的文章。'
- en: '[](https://medium.com/@theDrewDag/membership?source=post_page-----a70372764432--------------------------------)
    [## Join Medium with my referral link - Andrea D''Agostino'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@theDrewDag/membership?source=post_page-----a70372764432--------------------------------)
    [## 使用我的推荐链接加入 Medium - Andrea D''Agostino]'
- en: Read every story from Andrea D'Agostino (and thousands of other writers on Medium).
    Your membership fee directly…
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Andrea D'Agostino 的每个故事（以及 Medium 上的其他成千上万的作家）。你的会员费直接……
- en: medium.com](https://medium.com/@theDrewDag/membership?source=post_page-----a70372764432--------------------------------)
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@theDrewDag/membership?source=post_page-----a70372764432--------------------------------)
- en: Recommended Reads
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐阅读
- en: For the interested, here are a list of books that I recommended for each ML-related
    topic. There are ESSENTIAL books in my opinion and have greatly impacted my professional
    career.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 对于感兴趣的人，这里有一系列我推荐的与 ML 相关的书籍。这些书籍在我看来是**必读**的，并且对我的职业生涯产生了重大影响。
- en: '*Disclaimer: these are Amazon affiliate links. I will receive a small commission
    from Amazon for referring you these items. Your experience won’t change and you
    won’t be charged more, but it will help me scale my business and produce even
    more content around AI.*'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '*免责声明：这些是亚马逊附属链接。我将因推荐这些商品而获得亚马逊的小额佣金。你的体验不会改变，你不会被额外收费，但这将帮助我扩展业务，并制作更多关于
    AI 的内容。*'
- en: '**Intro to ML:** [*Confident Data Skills: Master the Fundamentals of Working
    with Data and Supercharge Your Career*](https://amzn.to/3ZzKTz6)by Kirill Eremenko'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机器学习入门：** [*自信的数据技能：掌握数据工作的基础，提升你的职业生涯*](https://amzn.to/3ZzKTz6) 作者：Kirill
    Eremenko'
- en: '**Sklearn / TensorFlow:** [*Hands-On Machine Learning with Scikit-Learn, Keras,
    and TensorFlow*](https://amzn.to/433F4Nm) by Aurelien Géron'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sklearn / TensorFlow：** [*动手学机器学习：使用 Scikit-Learn、Keras 和 TensorFlow*](https://amzn.to/433F4Nm)
    作者：Aurelien Géron'
- en: '**NLP:** [*Text as Data: A New Framework for Machine Learning and the Social
    Sciences*](https://amzn.to/3zvH43j)by Justin Grimmer'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NLP：** [*文本作为数据：机器学习和社会科学的新框架*](https://amzn.to/3zvH43j) 作者：Justin Grimmer'
- en: '**Sklearn / PyTorch:** [*Machine Learning with PyTorch and Scikit-Learn: Develop
    machine learning and deep learning models with Python*](https://amzn.to/3Gcavve)
    by Sebastian Raschka'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sklearn / PyTorch：** [*用 PyTorch 和 Scikit-Learn 学习机器学习：使用 Python 开发机器学习和深度学习模型*](https://amzn.to/3Gcavve)
    作者：Sebastian Raschka'
- en: '**Data Viz:** [*Storytelling with Data: A Data Visualization Guide for Business
    Professionals*](https://amzn.to/3HUtGtB) by Cole Knaflic'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据可视化：** [*数据讲故事：商业专业人士的数据可视化指南*](https://amzn.to/3HUtGtB) 作者：科尔·克纳夫利克'
- en: Useful Links (written by me)
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有用的链接（由我撰写）
- en: '**Learn how to perform a top-tier Exploratory Data Analysis in Python:** [*Exploratory
    Data Analysis in Python — A Step-by-Step Process*](/exploratory-data-analysis-in-python-a-step-by-step-process-d0dfa6bf94ee)'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习如何在 Python 中执行顶级探索性数据分析：** [*Python 中的探索性数据分析——逐步过程*](/exploratory-data-analysis-in-python-a-step-by-step-process-d0dfa6bf94ee)'
- en: '**Learn the basics of TensorFlow:** [*Get started with TensorFlow 2.0 — Introduction
    to deep learning*](https://medium.com/towards-data-science/a-comprehensive-introduction-to-tensorflows-sequential-api-and-model-for-deep-learning-c5e31aee49fa)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习 TensorFlow 的基础知识：** [*入门 TensorFlow 2.0——深度学习介绍*](https://medium.com/towards-data-science/a-comprehensive-introduction-to-tensorflows-sequential-api-and-model-for-deep-learning-c5e31aee49fa)'
- en: '**Perform text clustering with TF-IDF in Python:** [*Text Clustering with TF-IDF
    in Python*](https://medium.com/mlearning-ai/text-clustering-with-tf-idf-in-python-c94cd26a31e7)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 TF-IDF 在 Python 中进行文本聚类：** [*Python 中的 TF-IDF 文本聚类*](https://medium.com/mlearning-ai/text-clustering-with-tf-idf-in-python-c94cd26a31e7)'
