["```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\nfrom matplotlib.patches import Rectangle\nimport seaborn as sns\nimport pandas as pd\n```", "```py\n# Load the data:\ndf = pd.read_csv('https://bit.ly/3EdQrai')\n\n# Assign the current date:\ncurrent_date = pd.to_datetime('8/25/2023')\n\n# Convert \"Birthday\" column to datetime:\ndf['Birthday'] = pd.to_datetime(df['Birthday'])\n\n# Make a new \"Age\" column in years:\ndf['Age'] = ((current_date - df['Birthday']).dt.days) / 365.25\ndf['Age'] = df['Age'].astype(int)\n\ndf.head(3)\n```", "```py\n# Load the US population data for July 2023:\ndf_popl = pd.read_csv('https://bit.ly/3Po0Syf').astype(int)\ndisplay(df_popl)\n```", "```py\n# Calculate the cumulative sum of the population over 24 years:\ndf_popl = df_popl[df_popl['Age'] >= 25].copy()\ndf_popl['Cumulative_Population'] = df_popl['Population'].cumsum()\n\n# Find the total population:\ntotal_population = df_popl['Population'].sum()\n\n# Find row where the cumulative population crosses half the total population:\nmedian_row = df_popl[df_popl['Cumulative_Population'] \n                     >= total_population / 2].iloc[0]\n\n# Get the median age:\npopl_median_age = median_row['Age']\n\n# Get the median population:\npopl_median = total_population / 2\n```", "```py\n# Make a list of median member ages by branch of government:\nmedian_ages = df.groupby('Branch')['Age'].median()\n\n# Make a custom (red-blue-gray) color palette (optional):\ncolors = ['#d62728', '#1f77b4', '#7f7f7f']\nsns.set_palette(sns.color_palette(colors))\n\n# Plot Congressional ages as a KDE and overlay with population KDE:\nfig, ax = plt.subplots()\n\nsns.kdeplot(data=df, \n            x='Age', \n            hue='Branch', \n            multiple='layer', \n            common_norm=True)\n\nsns.kdeplot(df_popl, \n            x='Age', \n            weights='Population', \n            color='grey', \n            alpha=0.3, \n            legend=False, \n            multiple='layer')\n\nax.set_title('Age Distributions of Senate, House, and US Population > 24 yrs')\nax.legend(loc='upper left', labels=['Senate', 'House', 'Population'])\nax.set_xlim((0, 110));\n```", "```py\n# Filter the DataFrame to each branch of government:\ndf_house = df.loc[df['Branch'] == 'House'].copy()\ndf_senate = df.loc[df['Branch'] == 'Senate'].copy()\n\n# Find the median age values for each branch:\nmedian_house = int(df_house['Age'].median())\nmedian_senate = int(df_senate['Age'].median())\n```", "```py\n# Create figure and title:\nfig, ax = plt.subplots()\nax.set_xlim((0, 110))\nax.set_xticks(range(0, 110, 10))\nax.set_title('Age Distributions of House, Senate, and US Population > 24 yrs')\n\n# Define colors and labels:\ncolors = ['#d62728', '#1f77b4', '#7f7f7f']\nlabels = ['House', 'Senate', 'Population']\n\n# Loop through the datasets and plot KDE, median lines, and labels:\ndatasets = [df_house, df_senate]\nmedians = [median_house, median_senate]\n\nfor i, (data, color, label) in enumerate(zip(datasets, colors, labels)):\n    sns.kdeplot(data=data, x='Age', color=color, fill=False, label=label)\n    x, y = ax.get_lines()[i].get_data()\n    f = np.interp(medians[i], x, y)\n    ax.vlines(x=medians[i], ymin=0, ymax=f, ls=':', color=color)\n    ax.text(x=medians[i], y=f, s=f'Median = {medians[i]}', color=color)\n\n# Make and annotate the population KDE plot:\nsns.kdeplot(df_popl, x='Age', weights='Population', color='#7f7f7f', fill=False)\nx, y = ax.get_lines()[2].get_data()  # Note that this is the 3rd line([2]).\nf = np.interp(popl_median_age, x, y)\nax.vlines(x=popl_median_age, ymin=0, ymax=f, ls=':', color='#7f7f7f')\nax.text(x=popl_median_age, y=f, \n        s=f'Median = {popl_median_age}', color='#7f7f7f')\n\n# Build a custom legend:\nlegend_handles = [Line2D(xdata=[0, 1], ydata=[0, 1], ls='-', \n                         color=color) for color in colors]\nax.legend(handles=legend_handles, loc='upper left', labels=labels)\n\n# Manually annotate the Age Limit shading:\nage_limit_rects = [\n    Rectangle((25, 0), 85, 0.003, facecolor='#d62728', alpha=0.3),\n    Rectangle((30, 0), 85, 0.001, facecolor='#1f77b4', alpha=0.6)\n    ]\n\nfor age_rect, label, color in zip(\n    age_limit_rects, ['House age limits', 'Senate age limits'], \n    ['#d62728', '#1f77b4']):\n    age_rect.set_zorder(0)  # Move rect below other elements.\n    ax.add_patch(age_rect)\n    ax.text(x=age_rect.get_x(), y=age_rect.get_height(), \n            s=label, color=color)\n```"]