- en: How To Solve Travelling Salesman Problem With Simulated Annealing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd](https://towardsdatascience.com/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Getting the optimal solution to the Travelling Salesman Problem using the Simulated
    Annealing optimisation algorithm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@egorhowell?source=post_page-----c248447a8bcd--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----c248447a8bcd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c248447a8bcd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c248447a8bcd--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----c248447a8bcd--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c248447a8bcd--------------------------------)
    ·6 min read·Feb 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/32255d463d6594ee2b3194c9ece853c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Annie Spratt](https://unsplash.com/de/@anniespratt?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The [***travelling salesman problem (TSP)***](https://en.wikipedia.org/wiki/Travelling_salesman_problem)is
    a ubiquitous problem within [***combinatorial optimization***](https://en.wikipedia.org/wiki/Combinatorial_optimization)
    and mathematics in general. The problem poses the question: ‘Given a list of cities
    and their distances, what is the shortest route that visits each city once and
    returns to the original city?’'
  prefs: []
  type: TYPE_NORMAL
- en: A more formal mathematical definition for the TSP is the [**Hamiltonian cycle**](https://en.wikipedia.org/wiki/Hamiltonian_path).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The reason this problem is famous is because it is [***NP-hard***](https://en.wikipedia.org/wiki/NP-hardness)***.***
    This essentially means you cannot find the optimal solution in a reasonable amount
    of time as the addition of new cities lead to a [***combinatorial explosion***](https://en.wikipedia.org/wiki/Combinatorial_explosion)
    of the number of possible routes. For example, with ***4*** cities the number
    of possible routes is ***3***, with ***6*** cities it is ***60***, however with
    ***20*** cities it is a huge ***60,822,550,200,000,000!***
  prefs: []
  type: TYPE_NORMAL
- en: The number of solutions to the TSP is **(n-1)!/2** where **n** is the number
    of cities. For large **n** the number of solutions is [**intractable**](https://en.wiktionary.org/wiki/intractable)by
    modern computing standards.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So this begs the question, how do we find the shortest distance if we have some
    unfathomable number of routes to try? Well, you can of course use the [***brute-force***](https://blog.routific.com/blog/travelling-salesman-problem)
    (naive solution) approach and try every possible route, but like we mentioned
    above, for a certain number of cities this can take years with current computing
    standards. In fact for ***20*** cities, it would take on the order of [***~1000***
    years to try every route](https://www.sciencedirect.com/topics/earth-and-planetary-sciences/traveling-salesman-problem)!
  prefs: []
  type: TYPE_NORMAL
- en: This is where we refer to special [***heuristic***](https://en.wikipedia.org/wiki/Heuristic_(computer_science))
    or [***meta-heuristic***](https://en.wikipedia.org/wiki/Metaheuristic) algorithms,
    which don’t guarantee to find the best solution every time, but will try and achieve
    a *good-enough* solution to the problem in a reasonable amount of time. In this
    article, we will use such an algorithm named [***Simulated Annealing***](https://en.wikipedia.org/wiki/Simulated_annealing)
    ***(SA)*** to solve the TSP.
  prefs: []
  type: TYPE_NORMAL
- en: Simulated Annealing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Simulated Annealing is a stochastic [***global search***](https://en.wikipedia.org/wiki/Global_optimization)
    algorithm which means it uses randomness as part of its search for the best solution.
    It derives its name and inspiration from a similar process named [***Annealing***](https://en.wikipedia.org/wiki/Annealing_(materials_science))
    in [***Metallurgy***](https://en.wikipedia.org/wiki/Metallurgy) whereby heating
    or cooling a metal affects its physical characteristics.
  prefs: []
  type: TYPE_NORMAL
- en: SA uses this concept of temperature in determining the probability of transitioning
    (stochasticity of the search) to a worse solution in order to more widely explore
    the search space and have a better chance of finding the [***global optimum***](https://en.wikipedia.org/wiki/Maxima_and_minima).
    This helps avoid getting stuck in a [***local optimum***](https://en.wikipedia.org/wiki/Local_optimum)
    which algorithms such as [***Hill Climbing***](https://en.wikipedia.org/wiki/Hill_climbing)
    often do.
  prefs: []
  type: TYPE_NORMAL
- en: Theory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The general mathematical framework of SA is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9da4d08b77e9b035591c1bf918a26073.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation generated by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Where:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/85547289e68b773bdc0e161dd3c1a438.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation generated by author.
  prefs: []
  type: TYPE_NORMAL
- en: In these equations ***x*** is the current state, ***x’*** is the new state,
    ***Δy*** is the difference in cost or score of the two states, ***P(x → x’)***
    is the probability of transitioning to the new state from the current on and ***T***
    is the temperature.
  prefs: []
  type: TYPE_NORMAL
- en: One can see that we always transition to the new state when it has a better
    score than the current one we are in. Additionally, when the temperature ***T***
    is very high, we are also very likely to transition to the new site despite it
    having a worse score. This allows us to more easily move around and **explore**
    the search space to find the global optimum.
  prefs: []
  type: TYPE_NORMAL
- en: As the temperature decreases, we are less likely to transition to a worse solution.
    Therefore, the process starts to converge to an optimum and starts **exploiting**
    the search space.
  prefs: []
  type: TYPE_NORMAL
- en: 'The temperature is often cooled exponentially:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5792d44c41d7e19438a14cf4bb2e9d58.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation generated by author.
  prefs: []
  type: TYPE_NORMAL
- en: Where ***0 ≤ γ ≤ 1*** and ***t*** is the iteration number.
  prefs: []
  type: TYPE_NORMAL
- en: Another common question is how to determine the initial temperature? This is
    actually quite a complex topic and I point the reader to [***here***](https://www.researchgate.net/publication/227061666_Computing_the_Initial_Temperature_of_Simulated_Annealing)
    for a research paper on the subject. In general, you can just start with a temperature
    that you know is high enough to accept worse solutions at the beginning. This
    is just a classic trial and error process!
  prefs: []
  type: TYPE_NORMAL
- en: Algorithm For TSP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The way SA can be used for the TSP is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Get an initial solution, this can be any valid route for the salesman.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Randomly select two cities and swap them in the route.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use SA to compute the probability of whether we accept this new solution or
    not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continue this process for a set number of iterations and cool the temperature
    (decrease) on every iteration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always log the best overall solution you have found as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s implement this in Python to show you a working example.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we will generate some data points, which will be our cities:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a0993029f03520a91079adecb7566a70.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: The plot above is our cities along with an initial solution. The initial solution
    was simply generated by going through the cities in alphabetical order e.g. ***a,
    b, c ... r, s, a***. We have ***20*** cities, which means we have a breathtaking
    total of ***60,822,550,200,000,000*** different possible routes to try!
  prefs: []
  type: TYPE_NORMAL
- en: Now we will build a Python class to carry out the Simulated Annealing process
    for the TSP!
  prefs: []
  type: TYPE_NORMAL
- en: I am not the best coder in Python, so I appreciate the following snippet may
    not be the best implementation …
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now run the SA optimization algorithm and plot the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3f8d29554b07054dcea1badd265ea11d.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5d955185b51b0ef02ecee46a6a6fd90b.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: The above plots show the solutions we iterated over plotted alongside the temperature
    and the best current solution. The bottom plot shows the route of the best solution
    we found through the SA algorithm. From a simple ‘eye-test’ this new solution
    is much better than the initial and seems to be quite optimal.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this post we have gone over the travelling salesman problem, which asks us
    to find the shortest route for a set of cities (points). The number of possible
    different routes explodes as we add more cities and cannot be solved brute-force.
    However, we can make use of a meta-heuristic algorithm such as Simulated Annealing
    (SA) to find sufficient solution in most cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full code used in the article can be found at my GitHub here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/egorhowell/Medium-Articles/blob/main/Optimisation/simulated-annealing/simulated_annealing_tsp.py?source=post_page-----c248447a8bcd--------------------------------)
    [## Medium-Articles/simulated_annealing_tsp.py at main · egorhowell/Medium-Articles'
  prefs: []
  type: TYPE_NORMAL
- en: Code I use in my medium blog/articles. Contribute to egorhowell/Medium-Articles
    development by creating an account on…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/egorhowell/Medium-Articles/blob/main/Optimisation/simulated-annealing/simulated_annealing_tsp.py?source=post_page-----c248447a8bcd--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Another Thing!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----c248447a8bcd--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  prefs: []
  type: TYPE_NORMAL
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----c248447a8bcd--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Connect With Me!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**YouTube**](https://www.youtube.com/@egorhowell?sub_confirmation=1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**GitHub**](https://github.com/egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References and Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Algorithms for Optimization*](https://mitpress.mit.edu/9780262039420/algorithms-for-optimization/)*.*
    [Mykel J. Kochenderfer](https://mitpress.mit.edu/author/mykel-j-kochenderfer-18773)
    and [Tim A. Wheeler](https://mitpress.mit.edu/author/tim-a-wheeler-28144). ***2019***.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
