- en: 'Streamlit Tutorial: Creating Word Reports for Data Science Projects'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/streamlit-tutorial-creating-word-reports-for-data-science-projects-96a749483cb3](https://towardsdatascience.com/streamlit-tutorial-creating-word-reports-for-data-science-projects-96a749483cb3)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Combining python-docx and Streamlit for Data Science Report Automation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----96a749483cb3--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----96a749483cb3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----96a749483cb3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----96a749483cb3--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----96a749483cb3--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----96a749483cb3--------------------------------)
    ·12 min read·Apr 17, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9e062c1dc458443a4896d81ae2166dcf.png)'
  prefs: []
  type: TYPE_IMG
- en: Report image generated by the author using Midjourney Basic Plan.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of data-related projects, whether for petrophysics or data science,
    creating a report is a very common occurrence. The generated reports provide clients
    and end users with information on the key results and conclusions obtained during
    the study, as well as detailing the methodologies used.
  prefs: []
  type: TYPE_NORMAL
- en: However, creating structured reports can be a tedious and time-consuming process,
    especially when it comes to ensuring they are formatted correctly and the data
    is presented in the best way possible.
  prefs: []
  type: TYPE_NORMAL
- en: This article will show how we can use the popular [Streamlit](https://streamlit.io/)
    library, combined with [python-docx](https://python-docx.readthedocs.io/en/latest/),
    to create the first step in automating part of the reporting process.
  prefs: []
  type: TYPE_NORMAL
- en: The [python-docx](https://python-docx.readthedocs.io/en/latest/) library will
    allow us to create a Microsoft Word report. Having the report in the format will
    allow us to make edits and apply finishing touches before making it into a PDF.
  prefs: []
  type: TYPE_NORMAL
- en: Even though the worked example in this article requires mostly manual input,
    it could be adapted to include the power of large language models to summarise
    the data and create the required text.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started building a Streamlit Word document report generator.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries & Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we will import the main libraries we are going to work with. These are
    [Streamlit](https://streamlit.io/), [pandas](https://pandas.pydata.org/), [matplotlib](https://matplotlib.org/)
    and [python-docx](https://python-docx.readthedocs.io/en/latest/).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will set the Streamlit page layout to wide. This allows the app to
    take up the full width of the browser window rather than being a narrow column
    in the middle.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Setting Up the Streamlit UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we can start building out the User Interface (UI).
  prefs: []
  type: TYPE_NORMAL
- en: We will start by giving our app a title.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/addc7550adbb4d4ca3cfd0ea300520c0.png)'
  prefs: []
  type: TYPE_IMG
- en: The starting point for the Report Generator. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: To keep things simple, we will pre-load our data using `pd.read_csv()` and pass
    in a file name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The dataset used for this tutorial is a subset of a training dataset used as
    part of a [**Machine Learning competition run by Xeek and FORCE 2020**](https://doi.org/10.5281/zenodo.4351156)(Bormann
    et al., 2020). This dataset is licensed under a a Creative Commons Attribution
    4.0 International license.
  prefs: []
  type: TYPE_NORMAL
- en: To make this app more flexible, we could add a file uploader allowing users
    to load their own data.
  prefs: []
  type: TYPE_NORMAL
- en: You can find out more on how to do this in my article [**Uploading and Reading
    Files with Streamlit**](https://medium.com/@andymcdonaldgeo/uploading-and-reading-files-with-streamlit-92885ac3a1b6)
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Report Form with st.form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When widgets are included within a Streamlit app, any time they are edited or
    selected, the Streamlit app will re-run. To prevent this, we can create a form.
  prefs: []
  type: TYPE_NORMAL
- en: This will allow us to enter values, and the app will only run when the button
    is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: We can create a form using `with st.form('report')` followed by the inputs we
    want.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4da04c2269429258d20fedf73bf76278.png)'
  prefs: []
  type: TYPE_IMG
- en: Streamlit report generator with report details section. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the upper section of our app to create the report metadata. This
    includes the title of the report, who the author is, who the client is and the
    date for the report.
  prefs: []
  type: TYPE_NORMAL
- en: Each of these elements is tied to a user input widget from Streamlit.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: For the form to display, we need to add a submit button. This is done using
    `st.form_submit_button()` . Here, we can pass a label that will appear on the
    button.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Underneath this, I have placed a call to a `generate_report` function, which
    we will create shortly. For the moment, this will act as a placeholder.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code for the form so far.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Report Section in the Streamlit Form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reports are generally comprised of multiple sections or chapters.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate creating a very simple section within our app, we will add some
    inputs for the user to enter the section title and summary.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1f35ef8a87fecbfaa810251d9f29a3ca.png)'
  prefs: []
  type: TYPE_IMG
- en: Streamlit report generator with the section input boxes. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: In the above image, I have added two new input widgets.
  prefs: []
  type: TYPE_NORMAL
- en: A section title, which is a simple text input (`st.text_input`), and a summary
    of the section, which is a text area (`st.text_area`).
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, I have created two new columns to separate them from the columns
    above. This is important if we want to add any full-width text/info between these
    parts of the form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is our form code so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We could expand this capability so that the user can add multiple sections.
    Each could then be coded to start on a new page using a page break.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, to make it more comprehensive, we could generate a preview of
    the report as it is being built within the app.
  prefs: []
  type: TYPE_NORMAL
- en: Lots of possibilities!
  prefs: []
  type: TYPE_NORMAL
- en: Including a Dataframe in a Word Document Using docx
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tables are essential in reports as they help present information in a clear,
    simple and organised way. This allows the readers to quickly understand the data
    and also compare it against other data values/categories in the same or different
    table.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate including a table in our report, we can use the statistical summary
    generated by the pandas `describe()` function as an example.
  prefs: []
  type: TYPE_NORMAL
- en: Within the UI, we can add a multi-select option that will allow the user to
    select columns from the dataframe. This is especially handy if we have many columns
    and are only interested in a select few.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d81e1188300b3d34589da7da49e21e67.png)'
  prefs: []
  type: TYPE_IMG
- en: Streamlit report generator with the option for users to select columns from
    a dataframe. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Before creating the multi-select entry box, we first need to grab the column
    names from the dataframe, which is done by creating a new variable and assigning
    it to `df.columns`
  prefs: []
  type: TYPE_NORMAL
- en: We then create the multi-select box using `st.multiselect()` . As we are working
    within columns, we need to call upon the required column. Which, in this case,
    is `sect_col2`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Next, we need to create two functions.
  prefs: []
  type: TYPE_NORMAL
- en: The first will take the features we are interested in along with the dataframe,
    and generate the statistical summary of the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The second function is a little bit more complex.
  prefs: []
  type: TYPE_NORMAL
- en: 'As python-docx doesn’t natively support dataframes, we need to create a table
    using docx like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We will call these functions when the button is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Chart to the Word Document
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Charts form another essential part of a report. They allow us to convey large
    amounts of data concisely.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate the creation and inclusion of a chart within the final Word document,
    we will allow the user to select three columns from the dataset. These will then
    be used to create a scatterplot to be added to the report.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1ddf7ae8713ff711c4813e6c68114914.png)'
  prefs: []
  type: TYPE_IMG
- en: Streamlit report generator after including options for the Scatterplot. Image
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: As seen in the image above, we will add the three selection boxes below the
    previous two sections. These will be added to three new columns and are created
    using Streamlit’s `selectbox()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We will then create a new function called `create_scatterplot`that will be used
    to create our figure.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will set our function up to take several arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dataframe` : the dataframe object containing the data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xaxis`: feature to be plotted on the x-axis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`yaxis`: feature to be plotted on the y-axis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`colour`: feature to be used to colour the data points'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plot_name`: the name of our plot. This will be used as the file name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xaxis_scale`: a list which contains two elements and will be used to define
    the min and max range for the x-axis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`yaxis_scale`: a list which contains two elements and will be used to define
    the min and max range for the y-axis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, the `xaxis_scale`, and `yaxis_scale` will both be set to `None`.
    If the user does not pass these in, then matplotlib will use the min and max range
    of the data plotted as the axes limits.
  prefs: []
  type: TYPE_NORMAL
- en: Python-docx does not natively support matplotlib figures. As a workaround, we
    need to save our plot as a file, which can be picked up when we start writing
    to the Word document.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Adding Separating Horizontal Lines to the Streamlit UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To help break up the UI and make each section stand out, we can add a horizontal
    line using `st.write('---')`.
  prefs: []
  type: TYPE_NORMAL
- en: This will be converted from markdown language to an actual line.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to find out more about the `st.write` function, then check out:
    [**How to Use Streamlit’s st.write Function to Improve Your Streamlit Dashboard.**](https://medium.com/p/1586333eb24d)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our final code for the Streamlit form is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Creating the Word Report Generating Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our final part is to create the `generate_report` function.
  prefs: []
  type: TYPE_NORMAL
- en: This function will take in all the previous pieces we gathered from the user
    and then write them into our Word document.
  prefs: []
  type: TYPE_NORMAL
- en: As seen in the code below, we first need to create our docx object, which is
    done by calling `docx.Document()`.
  prefs: []
  type: TYPE_NORMAL
- en: We then start creating each section of the report using a combination of headings
    and paragraphs. Some of these utilise f-strings so that we can combine text with
    the input variables.
  prefs: []
  type: TYPE_NORMAL
- en: Then we move on to adding in the scatterplot we created earlier, which is done
    using `doc.add_picture()`.
  prefs: []
  type: TYPE_NORMAL
- en: The final section contains our dataframe statistical summary, which calls upon
    the `add_df_to_docx` function.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we save the report to the `docx` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Once the writing function has been created, we can then fill out what happens
    when the user clicks on the Generate button.
  prefs: []
  type: TYPE_NORMAL
- en: First, we have to call upon the `summary_stats` and `scatter_plot_file` functions.
    The results of these will then be passed into the `generate_report` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: When we view our app, we can fill the input boxes with the required information
    and hit Generate.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/332befafe5fad8f0c915153a822a3038.png)'
  prefs: []
  type: TYPE_IMG
- en: Final view of the Streamlit Word report generator. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: This will then create our Word document that we see below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d0d836752859af9b9aa7b9fc0cf7cce2.png)'
  prefs: []
  type: TYPE_IMG
- en: Page one of the report generated from the Streamlit app. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/405094e2dd05b3b50b1c63c86aa62dd1.png)'
  prefs: []
  type: TYPE_IMG
- en: Page two of the report generated from the Streamlit app. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating reports is an essential part of any data science or petrophysics workflow.
    However, creating these reports can often be time-consuming and tedious.
  prefs: []
  type: TYPE_NORMAL
- en: Using a combination of Streamlit for the UI, and docx for creating the Word
    document, we can help reduce some of the burdens of report creation and begin
    automating the process.
  prefs: []
  type: TYPE_NORMAL
- en: With the arrival of Large Language Models (LLMs), we could potentially integrate
    these with this app to further enhance its capabilities and take automation to
    the next level.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bormann, Peter, Aursand, Peder, Dilib, Fahad, Manral, Surrender, & Dischington,
    Peter. (2020). FORCE 2020 Well well log and lithofacies dataset for machine learning
    competition [Data set]. Zenodo. [https://doi.org/10.5281/zenodo.4351156](https://doi.org/10.5281/zenodo.4351156)
  prefs: []
  type: TYPE_NORMAL
- en: Full Code for the Streamlit Word Document Report Creator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Below is the full code to generate the Word Report Streamlit app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)*Alternatively,
    you can* [***sign up for my newsletter***](https://fabulous-founder-2965.ck.page/2ca286e572)
    *to get additional content straight into your inbox for free.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Secondly, you can get the full Medium experience and support thousands of
    other writers and me by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the fantastic Medium articles, as well as the
    chance to make money with your writing.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support.*'
  prefs: []
  type: TYPE_NORMAL
