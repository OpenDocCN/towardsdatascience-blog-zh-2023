- en: Implementation of a Siamese Network in Keras and TensorFlow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/implementation-of-a-siamese-network-in-keras-and-tensorflow-aa327418e177](https://towardsdatascience.com/implementation-of-a-siamese-network-in-keras-and-tensorflow-aa327418e177)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/b1a1da818760b158826b71ceb1e2665f.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Markus Spiske](https://unsplash.com/@markusspiske?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Learn the techniques behind object detection (and much more) with example code.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://rashida00.medium.com/?source=post_page-----aa327418e177--------------------------------)[![Rashida
    Nasrin Sucky](../Images/42bd057e8eca255907c43c29a498f2ca.png)](https://rashida00.medium.com/?source=post_page-----aa327418e177--------------------------------)[](https://towardsdatascience.com/?source=post_page-----aa327418e177--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----aa327418e177--------------------------------)
    [Rashida Nasrin Sucky](https://rashida00.medium.com/?source=post_page-----aa327418e177--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----aa327418e177--------------------------------)
    ·7 min read·Aug 14, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Neural Networks are great and very popular in AI/ML spaces, but they require
    too much data to train. For tasks like object detection, signature verification,
    voice verification, and prescription pills recognition regular neural network
    techniques would be much more time-consuming and expensive because of this excessive
    data requirement. In these types of work, a **Siamese network** can be very powerful
    because it requires a lot less data than a regular neural network. In addition,
    an imbalanced dataset can also perform well.
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial will give you a high-level overview of a Siamese Network and a
    complete example of working with it. I worked with the fashion-mnist dataset here
    but this similar structure is good for a lot of other use cases.
  prefs: []
  type: TYPE_NORMAL
- en: What is a Siamese Network?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Siamese networks contain one or more identical networks, and those identical
    networks have the same parameters and weights. If the weights of one network update,
    the weights of the other network also update. They have to be identical. The final
    layer is usually an embedding layer that calculates the distance between the outputs.
  prefs: []
  type: TYPE_NORMAL
- en: You feed them a pair of inputs. Each network will compute the features of inputs
    and find the similarity between two inputs using the distance between the two
    images. So, there are only two classes. Either the images are similar or dissimilar.
  prefs: []
  type: TYPE_NORMAL
- en: The concept will be much clearer when you will work on an example. Learning
    by doing is always the best idea.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Necessary Imports and Functions Definition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start with the necessary imports. We will import more if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As we discussed in the previous section, the Siamese network takes a **pair
    of inputs** at a time and the output is ‘yes’ or ‘no’. If the images are similar
    it’s ‘yes’ otherwise it is ‘no’. Or, the Siamese network can also output the distance
    between the two images that we will do in this tutorial. So, we need to prepare
    our dataset that way. Our dataset needs to be pairs of images, not single images.
    For the positive class, there will be two images of the same type and for the
    negative class, there will be two images of different types.
  prefs: []
  type: TYPE_NORMAL
- en: This next code block defines a function ‘create_pairs’ that will make pairs
    of images which means putting two images stacking together where sometimes two
    images will be the same type and sometimes, they will be of different types. When
    two images match or are the same type, the label will be 1 and when the images
    will not match, the label will be 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The next function calculates the Euclidean distance between two images and
    follows the traditional formula for Euclidean distance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Model and Cost
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Siamese model is pretty similar to other TensorFlow models. We will use
    two sets of **Conv-MaxPooling-Dropout layers, GlobalAveragePooling**, and a Dense
    layer at the end. Finally, it will return the model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: A regular binary cross-entropy loss function is good enough as we are doing
    a binary classification here. But for the Siamese network, a **Contrastive loss**
    is more appropriate. If you think about it, actually the goal of a Siamese network
    is not only just classifying between similar or dissimilar images but also to
    differentiate between them. We want to know how good a job the Siamese network
    is doing on distinguishing between similar or dissimilar images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the formula for contrastive loss:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fd701ad2009ed317c53ee8a018be9832.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Here, Y is the true label (either 0 or 1)
  prefs: []
  type: TYPE_NORMAL
- en: D is the Euclidean distance
  prefs: []
  type: TYPE_NORMAL
- en: The margin is usually 1
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s make a function contrastiveLoss:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: These are some common functions that can be used for any other Siamese network
    of the same type as well.
  prefs: []
  type: TYPE_NORMAL
- en: Model Training
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need the dataset to train the model for sure. For this tutorial, I will use
    the [public dataset](https://github.com/zalandoresearch/fashion-mnist/blob/master/LICENSE)
    (MIT license), fashion_mnist dataset available to load using the TensorFlow library
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Some simple data processing tasks are necessary, to begin with. To scale the
    image data, we will divide the image data by 255\. Also, another dimension needs
    to be added to both training and testing images to make them three-dimensional.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will create two inputs for two images in an image pair and pass them
    both to the Siamese model we built earlier to extract the features from both of
    the images.
  prefs: []
  type: TYPE_NORMAL
- en: The **Euclidean distance** function will be useful here to find the distance
    between the two extracted features. The smaller the distance between the two feature
    images, the more similar they are.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the model takes the two images as inputs and outputs the distance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now compile the model to train the Siamese model using the contrastive loss
    we defined earlier. The necessary parameters are the pairs of images, the pairs
    of labels, batch size, and the number of epochs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Let’s plot some of the pairs with their distances. We will take 4 pairs of images
    randomly. **OpenCV library** can be used for this. First, it requires some basic
    image processing like scaling and then adding one extra dimension to both the
    dimensions of the images. Then we will use the model to predict the distance between
    the images in each pair. Finally, you can plot them to see the distance and the
    pairs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/985059e1940a618b170954ce7eaf4934.png)'
  prefs: []
  type: TYPE_IMG
- en: Look at these pictures and the corresponding distances. As you can see, the
    predict function does not give you the label 0 or 1 in this case. It gives you
    the distances between the two images in the image pairs. When the images in the
    pairs are more similar the distance is much smaller.
  prefs: []
  type: TYPE_NORMAL
- en: If you want you can set a threshold distance based on your use cases to distinguish
    between similar and dissimilar images to get the label as well.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This same kind of model and technique can be used for many different types of
    tasks as I mentioned in the introduction. Because it can work with a smaller number
    of data, the data collection part becomes easier. Hopefully, it will be useful
    for you.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to follow me on [Twitter](https://twitter.com/rashida048) and like
    my [Facebook](https://www.facebook.com/rashida.smith.161) page.
  prefs: []
  type: TYPE_NORMAL
- en: More Reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Regression in TensorFlow Using Both Sequential and Function APIs | by Rashida
    Nasrin Sucky | Towards Data Science (medium.com)](https://medium.com/p/314e74b537ca)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using a Keras Tuner for Hyperparameter Tuning of a TensorFlow Model | by Rashida
    Nasrin Sucky | Jul, 2023 | Towards AI (medium.com)](https://medium.com/p/41978f53111)'
  prefs: []
  type: TYPE_NORMAL
- en: '[How to Perform Image Segmentation with Thresholding Using OpenCV | by Rashida
    Nasrin Sucky | Towards Data Science (medium.com)](https://medium.com/p/b2a78abb07ac)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Some Basic Image Preprocessing Operations for Beginners in Python | by Rashida
    Nasrin Sucky | Towards Data Science (medium.com)](https://medium.com/p/7d297316853b)'
  prefs: []
  type: TYPE_NORMAL
- en: '[How to Define Custom Layer, Activation Function, and Loss Function in TensorFlow
    | by Rashida Nasrin Sucky | Towards Data Science (medium.com)](https://medium.com/p/bdd7e78eb67)'
  prefs: []
  type: TYPE_NORMAL
- en: '[A Step-by-Step Tutorial to Develop a Multi-Output Model in TensorFlow | by
    Rashida Nasrin Sucky | Towards Data Science (medium.com)](https://medium.com/p/ec9f13e5979c)'
  prefs: []
  type: TYPE_NORMAL
