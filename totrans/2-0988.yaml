- en: 'How to Group Data in R: Going Beyond “group_by”'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在 R 中分组数据：超越“group_by”
- en: 原文：[https://towardsdatascience.com/going-beyond-group-by-how-to-group-data-in-r-af30f19c1ff2](https://towardsdatascience.com/going-beyond-group-by-how-to-group-data-in-r-af30f19c1ff2)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/going-beyond-group-by-how-to-group-data-in-r-af30f19c1ff2](https://towardsdatascience.com/going-beyond-group-by-how-to-group-data-in-r-af30f19c1ff2)
- en: Go from beginner to advanced with these grouping workflows
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从初学者到高级用户，掌握这些分组工作流程
- en: '[](https://roryspanton.medium.com/?source=post_page-----af30f19c1ff2--------------------------------)[![Rory
    Spanton](../Images/6c35a3de7cb516aac09bc5cf417a6c70.png)](https://roryspanton.medium.com/?source=post_page-----af30f19c1ff2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----af30f19c1ff2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----af30f19c1ff2--------------------------------)
    [Rory Spanton](https://roryspanton.medium.com/?source=post_page-----af30f19c1ff2--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://roryspanton.medium.com/?source=post_page-----af30f19c1ff2--------------------------------)[![Rory
    Spanton](../Images/6c35a3de7cb516aac09bc5cf417a6c70.png)](https://roryspanton.medium.com/?source=post_page-----af30f19c1ff2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----af30f19c1ff2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----af30f19c1ff2--------------------------------)
    [Rory Spanton](https://roryspanton.medium.com/?source=post_page-----af30f19c1ff2--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----af30f19c1ff2--------------------------------)
    ·8 min read·Feb 15, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----af30f19c1ff2--------------------------------)
    ·8分钟阅读·2023年2月15日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/94f77c2b664024472c8b2639518e76a7.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/94f77c2b664024472c8b2639518e76a7.png)'
- en: Photo by [Camille San Vicente](https://unsplash.com/@camillesanvicente?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[Camille San Vicente](https://unsplash.com/@camillesanvicente?utm_source=medium&utm_medium=referral)拍摄的照片，来源于
    [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)'
- en: Grouping data allows you to perform operations on subsets of a dataset, rather
    than the entire dataset. Working with grouped data is a crucial aspect of data
    analysis, and has near-limitless uses in data science.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 数据分组允许你对数据集的子集进行操作，而不是对整个数据集进行操作。处理分组数据是数据分析中的一个关键方面，并且在数据科学中有着几乎无限的应用。
- en: There are many ways to create and manipulate groups with R. In this article,
    I’ll explain grouping workflows from the dplyr package, from the fundamentals
    to more advanced functions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中创建和操作分组有很多方法。在本文中，我将解释 dplyr 包中的分组工作流程，从基础到更高级的功能。
- en: By the end, you should have all the tools needed to extract valuable insights
    from grouped data. All of the code in this article is also available on [GitHub](https://github.com/roryspanton/medium-code/blob/master/grouping/grouping.R).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到最后，你应该掌握从分组数据中提取有价值见解所需的所有工具。本文中的所有代码也可以在 [GitHub](https://github.com/roryspanton/medium-code/blob/master/grouping/grouping.R)
    上找到。
- en: Basic grouping in dplyr
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: dplyr 中的基本分组
- en: To group data in dplyr, you’ll mainly use the `group_by` function. You can use
    this to specify one or more variables to group the data by. Here’s an example
    with the penguins dataset from the palmerpenguins package. You can install this
    package by running `install.packages(“palmerpenguins”)`. Once loaded with `library(palmerpenguins)`,
    you’ll be able to access the `penguins` dataset by name, as seen below.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 dplyr 中分组数据时，你主要会使用`group_by`函数。你可以用它来指定一个或多个变量以进行数据分组。以下是一个使用 palmerpenguins
    包中的 penguins 数据集的示例。你可以通过运行`install.packages("palmerpenguins")`来安装这个包。加载包后，通过`library(palmerpenguins)`，你将能够按名称访问`penguins`数据集，如下所示。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/715042c8ee8a7b0aa02ec3fb769ea62e.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/715042c8ee8a7b0aa02ec3fb769ea62e.png)'
- en: A quick look at the dataset allows us to identify categorical variables that
    are suitable for grouping. Here, we can group by species; a factor with three
    levels. Viewing the grouped data in the console, we can see the grouping structure
    printed clearly above the column names. I’ve highlighted this in red.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对数据集进行快速查看，可以帮助我们识别适合分组的分类变量。在这里，我们可以按物种分组，这是一个有三个水平的因素。在控制台查看分组数据时，我们可以看到列名上方清晰地打印出分组结构。我已用红色标出。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/f1d85ecf7b61b3b1530e3e381ab8220e.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f1d85ecf7b61b3b1530e3e381ab8220e.png)'
- en: We can also access the names and levels of grouping variables in our data with
    the `group_keys` function. Using this function on our grouped data returns a tibble
    with each grouping variable as a column, and each group level as a row.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/d65c2363111da238b2e0cf2babcd38f6.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: Now the data is grouped, we can apply another function to it. A common use of
    grouped data is for calculating summary statistics with the `summarise` function.
    In the example below, `summarise` returns the mean body mass for each species
    of penguin. This gives us a neat summary table with little effort.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/8b103d1e1fb6502dc8a0a2a737bff04e.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: You can also use other dplyr functions like `mutate`, `filter`, `select`, and
    more on grouped data. While diving deep into all of these functions could take
    up a whole article by itself, the dplyr [grouped data vignette](https://dplyr.tidyverse.org/articles/grouping.html)
    is a helpful guide to how these functions behave with grouped data.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Grouping by more than one variable
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The process of grouping data by more than one variable is simple; just add another
    variable name inside `group_by`. For instance, one could group the `penguins`
    data by both species and sex.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/16af95c733061adf1b5bcbd6dab0fee8.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: First, we filter out NA values in the sex column, then group by species and
    sex. Using the same summary function on this newly grouped data gives a mean body
    mass measure for each combination of levels across our two grouping variables.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Creating variables within group_by
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Moving on from the basic use of `group_by`, we can get into more advanced grouping workflows.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: One useful yet underrated dplyr feature is that you can create new grouping
    variables within `group_by`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say we want to get summary statistics for penguins at all levels of factor
    that isn’t already coded in the `penguins` data. For instance, the `penguins`
    dataset is made up of observations from three research studies, but the study
    identifier isn’t included in the cleaned version of the data. How can we calculate
    the mean body mass for penguins in each study?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: An obvious solution would be to create a new variable with the study identifier
    for each row in the data, group by that variable, and then summarise.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/eeb3822911326c60d0a384266413aba7.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
- en: 'However, you can combine the first two steps into one by creating the grouping
    variable inside `group_by` with the following syntax:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This gives exactly the same output as the long-form version while saving valuable
    space. This makes it a great trick to shorten long pipe sequences in your analysis.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Splitting up data by groups with group_split
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might run into situations where you want to split up groups into separate
    tibbles. For instance, you could write each species in the penguins data as a
    separate data file. For this, you’ll need `group_split`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: As its name suggests, `group_split` splits up data into separate tibbles; one
    for each level of the grouping variable species. It returns these tibbles in a
    list, which we can then feed into a separate function that writes each file one
    by one.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，`group_split`将数据拆分成单独的tibbles；每个分组变量species的每个级别对应一个。它将这些tibbles作为列表返回，我们可以将其传递到一个单独的函数中，逐个写入每个文件。
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To write the filenames here, we make further use of the `group_keys` function
    to get the names of each level of our grouping variable. Using `pull` then turns
    these names into a vector that we can put into our `write_csv` function.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在这里写出文件名，我们进一步利用`group_keys`函数获取分组变量的每个级别的名称。使用`pull`然后将这些名称转换成一个向量，我们可以将其传递到`write_csv`函数中。
- en: We then apply the `write_csv` function to each of the datasets inside `species_list`,
    giving each csv an appropriate filename from `species_names`. The `map2` function
    enables us to repeat this operation for each dataset.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们对`species_list`中的每个数据集应用`write_csv`函数，为每个csv文件指定一个来自`species_names`的合适文件名。`map2`函数使我们能够对每个数据集重复此操作。
- en: Using group_split like this saves a lot of manual filtering and writing. What
    could otherwise be a laborious task (especially in a dataset with even more groups)
    becomes achievable with minimal effort.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样使用`group_split`可以节省大量的手动过滤和编写工作。否则可能是一个繁琐的任务（特别是在数据集中有更多组的情况下），通过最小的努力也能完成。
- en: Grouping temporarily using with_groups
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`with_groups`暂时分组
- en: Sometimes when grouping data for one purpose, we then want to drop the grouping
    structure to continue with further analyses. The standard way to do this is by
    using the `ungroup` function. In the example below, we filter the largest three
    penguins by body mass in each species. Ungrouping after this operation gets rid
    of the grouping structure.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，当为一个目的分组数据时，我们随后希望丢弃分组结构以继续进行进一步的分析。标准的做法是使用`ungroup`函数。在下面的例子中，我们按体重筛选每种物种中最大的三只企鹅。在这个操作后取消分组结构去掉了分组结构。
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: However, grouping by a variable, manipulating the data, and then ungrouping
    can add unnecessary steps to your code. Luckily, there’s a shorter way of temporarily
    performing a grouped operation using the `with_groups` function.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通过一个变量进行分组、操作数据，然后再取消分组可能会给你的代码添加不必要的步骤。幸运的是，有一种更简短的方法可以使用`with_groups`函数暂时执行分组操作。
- en: First, you specify a grouping variable in the `.groups` argument. Then, you
    specify a function you want to apply to each group, using tidyverse-specific syntax.
    For instance, in this example, I’ve denoted the function I want to apply using
    the tilde (~) symbol. I then go onto write my function, using the “.” symbol as
    a placeholder for my data.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你在`.groups`参数中指定一个分组变量。然后，你指定一个你想对每个组应用的函数，使用tidyverse特定的语法。例如，在这个例子中，我使用波浪号（~）符号表示我想应用的函数。然后，我继续编写我的函数，使用“.”符号作为数据的占位符。
- en: This syntax will be familiar to those who have learned the map functions from
    the tidyverse’s purrr package. These allow you to repeat other functions, giving
    each element of a list or vector as input. They’re well worth learning and help
    with understanding advanced features in other tidyverse packages.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这种语法对于那些学习了tidyverse的purrr包中的map函数的人来说是熟悉的。这些函数允许你重复其他函数，以列表或向量的每个元素作为输入。它们非常值得学习，并有助于理解tidyverse包中的高级功能。
- en: '[](/how-to-use-map-functions-for-data-science-in-r-8180c2ed6d79?source=post_page-----af30f19c1ff2--------------------------------)
    [## How to Use Map Functions for Data Science in R'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 如何在R中使用Map函数进行数据科学](/how-to-use-map-functions-for-data-science-in-r-8180c2ed6d79?source=post_page-----af30f19c1ff2--------------------------------)'
- en: Learn powerful functional programming tools from the tidyverse
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从tidyverse中学习强大的函数式编程工具
- en: towardsdatascience.com](/how-to-use-map-functions-for-data-science-in-r-8180c2ed6d79?source=post_page-----af30f19c1ff2--------------------------------)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/how-to-use-map-functions-for-data-science-in-r-8180c2ed6d79?source=post_page-----af30f19c1ff2--------------------------------)'
- en: Running `with_groups` gives us the same output as the longer “`group_by`, `slice`,
    `ungroup`” workflow. Inspecting the output, we can see that `with_groups` has
    dropped the grouping structure in the data after applying our function just like
    the previous example, allowing for further analysis to be done on the full dataset.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`with_groups`给我们提供了与较长的“`group_by`, `slice`, `ungroup`”工作流程相同的输出。检查输出，我们可以看到`with_groups`在应用我们的函数后删除了数据中的分组结构，就像之前的例子一样，使得在完整数据集上进行进一步分析成为可能。
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Bonus: applying grouped functions with group_map'
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附加：使用group_map应用分组函数
- en: While `with_groups` shares some syntax with `map` functions, there’s also a
    special case of `map` that’s built for grouped data; `group_map`. We can examine
    its behaviour by using it to repeat the same `slice_max` function as the previous
    example.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `with_groups` 与 `map` 函数有些语法上的相似，但也有一个专门为分组数据设计的 `map` 特例；即 `group_map`。我们可以通过使用它重复前面的
    `slice_max` 函数来检查它的行为。
- en: '`group_map` applies to data that’s already grouped. It returns the results
    for each grouped operation as separate tibbles in a list, much like the results
    of `group_split`. You may also notice that there is no species column in the output.
    This is because `group_map` drops the grouping variables from its output by default.
    There is an option to keep them by adding the argument `.keep = TRUE`, however.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`group_map` 适用于已经分组的数据。它将每个分组操作的结果作为列表中的单独 tibbles 返回，类似于 `group_split` 的结果。你也可能注意到输出中没有物种列。这是因为
    `group_map` 默认会从输出中删除分组变量。然而，也可以通过添加参数 `.keep = TRUE` 来保留它们。'
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/8d3012b8bd8c28ca3b830ec1dcbb0428.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8d3012b8bd8c28ca3b830ec1dcbb0428.png)'
- en: In my own code, I don’t use `group_map` very often, usually opting for more
    conventional `map` functions or simpler grouping workflows instead. That said,
    in cases where you start with grouped data and want to end with transformed, separated
    datasets, it’s a tidy shortcut.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我自己的代码中，我不常使用 `group_map`，通常选择更常规的 `map` 函数或更简单的分组工作流程。不过，在你以分组数据开始并希望得到转换后、分开的数据集的情况下，它是一个简洁的快捷方式。
- en: 'Summary: When to use each dplyr grouping function'
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结：何时使用每个 dplyr 分组函数
- en: 'In sum, the grouping functions in dplyr are a great way of extracting a lot
    of value from data with little effort. To recap their uses:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 总结：dplyr 中的分组函数是从数据中提取大量价值的一种好方法，几乎不费力。回顾一下它们的用途：
- en: '`group_by` adds one or more groupings to a dataset. You can create grouping
    variables within `group_by`, to'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group_by` 向数据集添加一个或多个分组。你可以在 `group_by` 内创建分组变量，'
- en: '`group_keys` returns the grouping structure of a tibble'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group_keys` 返回 tibble 的分组结构'
- en: '`ungroup` removes groupings from data'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ungroup` 从数据中移除分组'
- en: '`group_split` separates a dataset into separate tibbles by group'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group_split` 将数据集按组拆分为不同的 tibbles'
- en: '`with_groups` temporarily groups data to perform a single operation'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_groups` 临时将数据分组以执行单一操作'
- en: '`group_map` applies a function to grouped data and returns the results for
    each group in a list'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group_map` 将函数应用于分组数据，并将每个组的结果作为列表返回'
- en: Even if you only use `group_by`, you can do all kinds of summary statistics,
    within-group filtering, and much more. Lots of R users get on fine using this
    function alone.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你只使用 `group_by`，也可以进行各种汇总统计、组内过滤等操作。许多 R 用户单独使用这个函数也能很好地完成工作。
- en: That said, going further with the other grouping workflows we’ve explored gives
    you even more options. If you use them the next time you’re grouping data, you’ll
    save more space and reduce the amount of steps in your analysis.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，进一步探索我们已经探讨的其他分组工作流程，会给你更多选项。如果你在下次分组数据时使用它们，你将节省更多空间并减少分析步骤。
- en: Want to read all my articles on programming, data science, and more? Sign up
    for a Medium membership at [this link](https://medium.com/@roryspanton/membership)
    and get full access to all my writing and every other story on Medium. This also
    helps me directly, as I get a small contribution from your membership fee at no
    extra cost to you.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 想要阅读我关于编程、数据科学等的所有文章吗？在[这个链接](https://medium.com/@roryspanton/membership)注册成为
    Medium 会员，即可全面访问我所有的文章以及 Medium 上的其他故事。这也直接帮助我，因为我会从你的会员费用中获得一小部分贡献，对你没有额外费用。
- en: You can also get all my new articles delivered straight to your inbox whenever
    I post by [subscribing here](https://roryspanton.medium.com/subscribe). Thanks
    for reading!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过[这里订阅](https://roryspanton.medium.com/subscribe)，每次我发布新文章时，直接将所有新文章送到你的收件箱。感谢阅读！
