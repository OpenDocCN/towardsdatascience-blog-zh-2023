["```py\nfrom sklearn.datasets import make_regression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV, KFold\n\n# creating a dummy dataset\nX, y = make_regression(n_samples=100)\n\n# 5-fold cross-validation\ncv = KFold(n_splits=5)\n\n# optimizing the number of trees of a RF\nmodel = RandomForestRegressor()\nparam_search = {'n_estimators': [10, 50, 100]}\n\n# applying cross-validation with a grid-search\n# and re-training the best model afterwards\ngs = GridSearchCV(estimator=model, cv=cv, refit=True, param_grid=param_search)\ngs.fit(X, y)\n```", "```py\nbest_model = RandomForestRegressor(**gs.best_params_)\nbest_model.fit(X, y)\n```", "```py\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.datasets import make_regression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import (GridSearchCV,\n                                     KFold,\n                                     train_test_split)\n# creating a dummy data set\nX, y = make_regression(n_samples=100)\n\n# train test split\nX_train, X_test, y_train, y_test = \\\n   train_test_split(X, y, shuffle=False, test_size=0.2)\n\n# cv procedure\ncv = KFold(n_splits=5)\n\n# defining the search space\n# a simple optimization of the number of trees of a RF\nmodel = RandomForestRegressor()\nparam_search = {'n_estimators': [10, 50, 100]}\n\n# applying CV with a gridsearch on the training data\ngs = GridSearchCV(estimator=model, \n                  cv=cv, \n                  param_grid=param_search)\n## the proper way of doing model selection\ngs.fit(X_train, y_train)\n\n# re-training the best approach for testing\nchosen_model = RandomForestRegressor(**gs.best_params_)\nchosen_model.fit(X_train, y_train)\n\n# inference on test set and evaluation\npreds = chosen_model.predict(X_test)\n## unbiased performance estimate on test set\nestimated_performance = r2_score(y_test, preds)\n\n# final model for deployment\nfinal_model = RandomForestRegressor(**gs.best_params_)\nfinal_model.fit(X, y)\n```"]