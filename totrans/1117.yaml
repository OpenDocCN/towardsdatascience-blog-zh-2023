- en: How to build a Shazam-like Telegram Bot using Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-build-a-shazam-like-telegram-bot-using-python-98dc081c53d5](https://towardsdatascience.com/how-to-build-a-shazam-like-telegram-bot-using-python-98dc081c53d5)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A tutorial to create and deploy a telegram bot that takes in music in real-time,
    and helps you to search the title and the singer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://eugenia-anello.medium.com/?source=post_page-----98dc081c53d5--------------------------------)[![Eugenia
    Anello](../Images/537f444252cdc60709e7a19e37734c7b.png)](https://eugenia-anello.medium.com/?source=post_page-----98dc081c53d5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----98dc081c53d5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----98dc081c53d5--------------------------------)
    [Eugenia Anello](https://eugenia-anello.medium.com/?source=post_page-----98dc081c53d5--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----98dc081c53d5--------------------------------)
    ·9 min read·Jan 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/42e32cdfef8d602899d368abc141af42.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Austin Neill](https://unsplash.com/@arstyy) on [Unsplash](https://unsplash.com/photos/hgO1wFPXl3I)
  prefs: []
  type: TYPE_NORMAL
- en: When you listen to music outside, like in a bar or a shop, and you really like
    it, don’t you wonder what the song’s title and the singer’s name are?
  prefs: []
  type: TYPE_NORMAL
- en: It happened to me a lot of times and there is only one solution. Shazam. Download
    it and tap the Pop-Up button to identify the music.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we are going to build a similar app to discover the song and
    the singer. A quick and easy way to develop this data science project is to create
    a Telegram Bot with Python.
  prefs: []
  type: TYPE_NORMAL
- en: While you listen to the music, you record the voice. This bot will transcribe
    the audio into text and will find the title of the song and the singer for you.
    Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: 'Table of contents:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[**Part 1: Create Telegram Bot with Python**](#962f)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Part 2: Deploy Telegram Bot to Fly.io**](#379f)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Part 1: Create Telegram Bot with Python'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/935e38aa1851d1376de171bdb5e0c6b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Illustration by Author
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial will be split into two parts. In the first part, we are going
    to focus on creating the telegram bot that transcribes the registration and discovers
    the information behind the song. Later, we’ll deploy the telegram bot to fly.io,
    which constitutes one of the many platforms that enable to building, running and
    scaling of applications in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: '**Requirements**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Install libraries**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**First steps to create Telegram Bot**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transcribe the song’s audio**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Discover the information about the song**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Requirements:**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a few steps to steps to follow before starting programming with Python.
  prefs: []
  type: TYPE_NORMAL
- en: Go to Telegram, search for @botfather and click on the first result.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/89ebe7ebfee11ca39ed49a792ea0d9a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Press the Start button to begin a conversation with BotFather.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/a9f41f28ab708952446c933b9fec60e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Write `/newbot` and follow the instructions suggested in the screenshot. After
    creating the bot, you will receive the token by BotFather, allowing you access
    to Telegram API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/95f6188ba265e10371d4f04f3d163509.png)'
  prefs: []
  type: TYPE_IMG
- en: Type the name of your telegram bot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/dc4d237fe211c5d0fc89d07ac377ff51.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Install libraries**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, install a python library, that allows creating a telegram bot
    with few lines of code. It’s called **pyTelegramBotAPI**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To transcribe the audio, I am going to use **Steamship**’s API. Before installing
    the package, you need to install nodej. In Windows, you need to install it from
    here and add the path on the PATH environment variable, while on ubuntu you need
    two lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: After you can finally install Steamship CLI in your Python virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once it’s installed, we are going to pass to the third API that permits us to
    discover the song from the audio. This is possible by getting access to Google
    search results through this API, called **SerpApi**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**First steps to creating the telegram bot**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have obtained the API token of Telegram and created the Telegram Bot,
    which should appear in your Telegram application, we can start to explore [**pyTelegramBotAPI**](https://pypi.org/project/pyTelegramBotAPI/),
    which provides Python implementations to create a Telegram Bot with few lines
    of code.
  prefs: []
  type: TYPE_NORMAL
- en: There are many other different python libraries that allow building Telegram
    Bots, but since I found many tutorials that used this library and the documentation
    was well done, I chose it for my little project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a file `cred.json` that contains the bot token and the API keys for
    Steamship and SerpApi:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In line 11, we simply create an instance of the `TeleBot`, which is a class
    that provides functions to handle messages in Telegram. For example, let’s define
    a message handler, that returns the message “Insert the audio of your song” if
    you write on the chat `/start` or `/hello`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: At the end of the code, we launch the bot using `bot.infinity_polling()`
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a6b60277203ad0829b5af830e3642555.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by Author
  prefs: []
  type: TYPE_NORMAL
- en: You should have a similar result, like in the screenshot above, after running
    `python bot.py` on the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: After the function `send_welcome`, we can define another function, called `telegram_bot`,
    which will deal with audio files of the type “voice”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We are interested in obtaining the public URL of your audio file sent to the
    bot. To check if the URL is right, copy the following path, by substituting the
    bot token and the file path, in your browser. If it works, it should download
    the audio to your local PC.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The last operation we need to do is the convertion of the audio from OGA to
    MP3 format. This is an important step since the OGA file is not supported for
    transcription.
  prefs: []
  type: TYPE_NORMAL
- en: To convert the audio to an mp3 file, we are going to use the ffmpeg wrapper,
    which allows converting various audio files using command lines. Before using
    it, you need installing. If you work in windows, check this [guide](https://www.wikihow.com/Install-FFmpeg-on-Windows)
    that shows all the steps, while in Linux you need only the command line `sudo
    apt install ffmpeg`.
  prefs: []
  type: TYPE_NORMAL
- en: After the convertion reached in line 4 into the function `convert_oga_to_mp3`,
    we need to extract again the URL of the new audio file, which will have a different
    format at the end.
  prefs: []
  type: TYPE_NORMAL
- en: '**Transcribe the audio’s song**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we have reached the most interesting part of the tutorial which makes us
    reach the goals of the telegram bot. Before going further, log in [here](http://hKFo2SBHcnZYcldQTWdySWwwUXFTMU9xYVhTcU5tTnkxOUlGMKFur3VuaXZlcnNhbC1sb2dpbqN0aWTZIFpPUXNzNnIzSEJzMzZnbmtaTGNRcndDbDRlSlhzSGp3o2NpZNkga21ZbWNKTFJpSzU4TER2WXR6cmNmQWlDUmNCMHVQR0s)
    to obtain the API key. First, we want to transcribe the audio using Steamship
    API. The function `transcribe_audio` takes as input the audio URL retrieved before
    and the instance of `Steamship`, which is a class that provides functions and
    methods for many AI applications. In this case, it’s focused on audio transcription.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code can be summarized by a few lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: In line 3, we specify that we are going to use the `audio_markdown` package
    to transcribe audio and, then, generate the Markdown output.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next line, we invoke the method `transcribe_url` by calling `invoke`.
    We also need to pass our URL of the audio.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the middle of the function, we invoke the method `get_markdown`, which will
    allow us to receive the transcription of the audio. The number of retries is limited
    to 100 to avoid infinite loops in case it doesn’t succeed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function returns the transcription at the end and we get the resulting text
    on the telegram bot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discover the information about the song
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After obtaining the transcription, we pass to the next step, which consists
    in discovering the title and the singer of the song. This is possible using **SerpApi**,
    which is an API that permits getting access to results of Google and other websites.
  prefs: []
  type: TYPE_NORMAL
- en: We need to pass a dictionary to `GoogleSearch` with the parameters, like the
    song’s words, the API key of SerpApi and we are going to obtain the results from
    Google. It returns a JSON output, which can be converted into a Python dictionary
    to get access to the information. After, a text message will be sent back to the
    sender, which can be the missed/achieved discovery.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bad7d40ebf2e4fba5a8e5994d3dd797f.png)'
  prefs: []
  type: TYPE_IMG
- en: The Illustration of how the app should work.
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 2: Deploy Telegram Bot to Fly.io**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Until now, we could make work the bot by running the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: But it means that the bot will work only when you run this code and it’s not
    practical. It’s preferable to have the telegram bot always available to make people
    try it.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, we need to deploy the Telegram Bot. At first, I wanted to use
    Heroku, which is another closed-source platform to deploy applications, but it
    doesn’t offer a free tier anymore.
  prefs: []
  type: TYPE_NORMAL
- en: So, I chose Fly.io as a cloud service because it provides a free plan and it
    was well-documented.
  prefs: []
  type: TYPE_NORMAL
- en: '**Create requirements.txt and Dockerfile**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connect to Fly.io**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Launch App**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deploy App**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1\. Create requirements.txt and Dockerfile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To put it into production, we need the file `requirements.txt`, that contains
    all the python dependencies. It can be automatically created by running the command
    line `pipreqs` in your terminal. You must install [pipreqs](https://pypi.org/project/pipreqs/)
    to make the command line work. These are the following python packages required
    by the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to this file, we also need another file, called `Dockerfile`, which
    should be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Connect to Fly.io
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The third requirement is the installation of `flyctl`, a command line that will
    allow deploying our application. You can find the instructions [here](https://fly.io/docs/hands-on/install-flyctl/),
    which can be different depending on your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you didn’t create a Fly.io account yet, you need to create one by running
    the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In case you already have the account, you only need to sign in by copying on
    the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Launch App
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with this project, we can type the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'It will ask you for the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: Write the app name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the region for deployment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to set up a Postgresql database. In this case, the answer is no.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to set up an Upstash Redis Database now. In this case, the answer
    is no.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we want to deploy now. The answer is no for now. We’ll deploy it later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before deploying the app, I also decided to exploit a functionality provided
    by fly.io, the secrets. As you may know, the credentials are sensitive and you
    may prefer to not give your secrets to anyone except yourself. This is possible
    by tying the following command lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'After running these command lines, the python code needs to be modified. We
    don’t use anymore JSON file with the credentials, which are stored directly on
    fly.io platform. For example, we can get access to the token of the Telegram bot
    in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to do the same for the other API keys. You can check the list of the
    command lines with the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Deploy App
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, we have reached the top of Everest! Just another command line and
    it’s done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In this way, our docker container with telegram bot is built and deployed. The
    code will be launched on the cloud, not on the local PC anymore. Now the telegram
    bot will work
  prefs: []
  type: TYPE_NORMAL
- en: 'Final Thoughts:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you appreciated this data science project. It can give you ideas for
    other possible applications. There are a lot of resources available online that
    reach everything you want. You only need creativity, patience and hard work. If
    you have any of these ingredients, there are no limits to what you can do. The
    GitHub code is [here](https://github.com/eugeniaring/shazam-like-telegram-bot).
    Thanks for reading. Have a nice day!
  prefs: []
  type: TYPE_NORMAL
