["```py\npip install mercury\n```", "```py\nimport mercury as mr\nimport plotly.express as px\nimport pandas as pd\n```", "```py\n# set Application parameters\napp = mr.App(title=\"CO2 Emissions control panel\",\n        description=\"Graphs showing the emissions over more than 100 years\",\n        show_code=False,\n        show_prompt=False,\n        continuous_update=True,\n        static_notebook=False,\n        show_sidebar=True,\n        full_screen=True,\n        allow_download=False)\n```", "```py\n# Get the data\ndef get_countries_data(): \n    url = \"./data/countries_df.csv\"\n    return pd.read_csv(url)\ndef get_continent_data():\n    url = './data/continents_df.csv'\n    return pd.read_csv(url)\ndef get_world_data():\n    url = './data/world_df.csv'\n    return pd.read_csv(url)\ndef get_group_data():\n    url = './data/income_types_df.csv'\n    return pd.read_csv(url)\n\ndf_countries= get_countries_data()\ndf_continents= get_continent_data()\ndf_world = get_world_data()\ndf_groups = get_group_data()\n```", "```py\nmr.Note(text=\"__Select a year to see the global emissions in the map__\")\n\nymax = df_countries['Year'].max()\nymin = df_countries['Year'].min()\n\nyearSlider = mr.Slider(value=2000, min=ymin, max=ymax, label=\"Year\", step=1)\n\nmr.Note(text=\"---\")\n```", "```py\n# Get the year and find the maximum and minimum values to set the range for the choropleth\nyear = yearSlider.value\nmax = df_countries['Annual CO₂ emissions'].max()\nmin = df_countries['Annual CO₂ emissions'].min()\n\nfig1 = px.choropleth(df_countries[df_countries['Year']==year], \n                    locations=\"Code\",\n                    color=\"Annual CO₂ emissions\",\n                    hover_name=\"Entity\",\n                    range_color=(min,max),\n                    color_continuous_scale=px.colors.sequential.Blues,\n                    width=1000, height=500,\n                    title = f\"Annual CO2 Emission for {year}\")\n\nfig1.show()\n```", "```py\nmr.Note(text=f\"__Select a continent to see the global emissions over the entire period__\")\n\ncontinents = df_continents['Entity'].unique()\n\nselect = mr.Select(value=\"Europe\", choices=continents, label=\"\")\nselected_continent = select.value\n```", "```py\ndf = df_continents[df_continents['Entity'] == selected_continent]\n\nfig2 = px.line(df,\"Year\",\"Annual CO₂ emissions\", \n               width=1000, height=500,\n               title=f\"Annual CO₂ emissions for {selected_continent}\")\n\nfig2.show()\n```", "```py\nmercury run\n```"]