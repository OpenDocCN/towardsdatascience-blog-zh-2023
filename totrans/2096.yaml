- en: Thresholding — a Way to Make Images More Visible (CV-04)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/thresholding-a-way-to-make-images-more-visible-b3e314b5215c](https://towardsdatascience.com/thresholding-a-way-to-make-images-more-visible-b3e314b5215c)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Extract More Information from Images with Thresholding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://zubairhossain.medium.com/?source=post_page-----b3e314b5215c--------------------------------)[![Md.
    Zubair](../Images/1b983a23226ce7561796fa5b28c00d65.png)](https://zubairhossain.medium.com/?source=post_page-----b3e314b5215c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b3e314b5215c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b3e314b5215c--------------------------------)
    [Md. Zubair](https://zubairhossain.medium.com/?source=post_page-----b3e314b5215c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b3e314b5215c--------------------------------)
    ·7 min read·Apr 26, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/50b6aba472098b0e97253da3b871b778.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Jonas Svidras](https://pixabay.com/users/jonas-svidras-6138262/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=3046269)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=3046269)
  prefs: []
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the real world, we aren’t always dealing with a 100% clear image. Sometimes,
    the image gets blurred, distorted, and so on. It becomes a crucial issue to extract
    information from these types of images. That is why transparent, clear, and more
    eye-catching images play a vital role in getting comprehensive information.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c5f7c499e8ece697243ecb04b802004c.png)'
  prefs: []
  type: TYPE_IMG
- en: The left side image is taken from the [pxfuel](https://www.pxfuel.com/en/free-photo-jsbhm/download/1920x1080)
    under creative common license. The right-side image is generated after applying
    thresholding.
  prefs: []
  type: TYPE_NORMAL
- en: The image after thresholding is more visually clear. Apart from the image, this
    thresholding technique might be helpful in thousands of use cases. *If you read
    the article till the end, you will be a master of* ***how to use, where to use,
    and when to use*** *image thresholding in real life.*
  prefs: []
  type: TYPE_NORMAL
- en: In detail, image thresholding transforms an image into a binary image to extract
    more information.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`[What is Image Thresholding?](#5265)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[Difference Between Global and Local Thresholding](#d413)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[Popular Thresholding Techniques and Python Implementation](#5e52)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is Image Thresholding?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Image thresholding works on a grayscale image. It is a way of segmenting the
    grayscale image into a binary image [1]. For thresholding, a particular pixel
    intensity value is considered a threshold value. All the pixels greater or less
    than the threshold value are assigned to the maximum or minimum value. It converts
    the entire image into a binary image. Because now there are only two pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we want to apply image thresholding to the pixel intensity values 123,
    50, 180,200\. And we set the threshold value to 128\. So, all the values greater
    than 128 will be the highest pixel intensity value of 255, and less than 128 will
    be 0.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a6e20462d54f2cb4f8262bfad9feba14.png)![](../Images/cbdf0b0d3e1e84eba1091e3246c87b03.png)'
  prefs: []
  type: TYPE_IMG
- en: Image on the left is the result of thresholding and right-side image is before
    thresholding (From Wikimedia Commons under Public Domain license)
  prefs: []
  type: TYPE_NORMAL
- en: Look at the above two images. After applying thresholding, the resulting image
    is completely white or black. The pixels with relatively high-intensity values
    are transformed into entirely white (intensity value 255), and low-intensity values
    turn into pure black (intensity value 0).
  prefs: []
  type: TYPE_NORMAL
- en: Difference Between Global and Local Thresholding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many thresholding techniques available.
  prefs: []
  type: TYPE_NORMAL
- en: The same process or threshold value is often applied to the entire image. This
    type of thresholding is known as ***global thresholding***.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, local/adaptive thresholding works locally. The same thresholding
    value is not applied to the entire image. We can apply different thresholding
    values for different segments of the image.
  prefs: []
  type: TYPE_NORMAL
- en: Global image thresholding is not suitable for every case. Sometimes adaptive
    thresholding is preferable. Look at the following image.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f8bf7abfe788b84fbaad04904e65569a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image is collected from [OpenCV](https://docs.opencv.org/3.4/d7/d4d/tutorial_py_thresholding.html)
    documentation
  prefs: []
  type: TYPE_NORMAL
- en: In the original image, lighting varies in different image locations. Applying
    the same thresholding value for the entire image will produce the result, something
    that is shown in the global thresholding image. Adaptive thresholding provides
    a much better result.
  prefs: []
  type: TYPE_NORMAL
- en: Popular Thresholding Techniques and Python Implementation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will discuss **global thresholding** techniques — `*Simple and Otsu’s thresholding*`.
    And local/adaptive thresholding technique.
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple Thresholding**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple thresholding is a global threshold technique. In this method, we need
    to set a boundary (threshold) intensity value. The threshold value is used to
    transform the new pixel intensity value. Look at the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/207f3b385674a7f94e6a55bc6809b639.png)'
  prefs: []
  type: TYPE_IMG
- en: Different Simple Thresholding Techniques (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: Look at the above table. In the action section, `pixel(x,y)` represents the
    updated particular intensity value of a thresholding image, and `src(x,y)` represents
    the original intensity value of the image before applying thresholding.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**⭐ Python Implementation️**'
  prefs: []
  type: TYPE_NORMAL
- en: For demonstration purposes, I have used the following image.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/44131e0ed5ef4f1b44b264b1faf7def0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Picdream](https://pixabay.com/users/picdream-9595/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=57266)
    from [Pixabay](https://pixabay.com//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=57266)
  prefs: []
  type: TYPE_NORMAL
- en: '*Some generic code to import libraries and load image —*'
  prefs: []
  type: TYPE_NORMAL
- en: Thresholding always works on the grayscale image. So, I have converted the image
    from BGR (OpenCV generally reads the image in BGR format) to grayscale with the
    code `cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Binary Thresholding**'
  prefs: []
  type: TYPE_NORMAL
- en: '`**OpenCV**` library makes our life easier by providing various functions to
    implement computer vision techniques. The piece of following code helps us to
    implement *binary thresholding*. Where `120` is the threshold value, and `255`
    is the maximum intensity value. So, all intensity values less than `120` will
    be set to `0 and 255` otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: The output will be varied for the different threshold values.
  prefs: []
  type: TYPE_NORMAL
- en: '**Binary Inverse Thresholding**'
  prefs: []
  type: TYPE_NORMAL
- en: It is just the reverse of binary thresholding. We set the threshold value to
    `120` and the maximum value to `255`. So, all the intensity values less than `120`
    will be `255` (white) and `0` (black)otherwise. *Look at the following code.*
  prefs: []
  type: TYPE_NORMAL
- en: So, in the case of binary inverse threshold, the output is just the opposite
    of binary thresholding.
  prefs: []
  type: TYPE_NORMAL
- en: '**Truncate Thresholding**'
  prefs: []
  type: TYPE_NORMAL
- en: In our coding example, we set the threshold value of `145` and the max value
    of `255`. So, for truncate thresholding, all the values less than `145` will be
    set to the threshold value of `145`. Otherwise, it will remain the same.
  prefs: []
  type: TYPE_NORMAL
- en: The output texts are much more visible than the previous techniques.
  prefs: []
  type: TYPE_NORMAL
- en: '**Threshold to Zero**'
  prefs: []
  type: TYPE_NORMAL
- en: In case of threshold to zero, pixel values less than the threshold will be set
    to zero and remain the same otherwise. For demonstration purposes, I have set
    the threshold value to 145 and the max value to 255\. The code is given below.
  prefs: []
  type: TYPE_NORMAL
- en: '**Threshold to Zero Inverse**'
  prefs: []
  type: TYPE_NORMAL
- en: It is just the opposite of the threshold to zero.
  prefs: []
  type: TYPE_NORMAL
- en: '**Otsu’s Thresholding**'
  prefs: []
  type: TYPE_NORMAL
- en: The **Otsu’s** thresholding is a little bit different than the simple thresholding.
    It calculates the between-class variance to set the threshold value. There are
    two classes, the background and foreground pixels. The between-class variance
    can be calculated with the following formula.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5a8b6595fd2ac37e85372ffdcaeeedce.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, average weights of background and foreground classes are represented with
    ***Wb*** and ***Wf*** *.* And mean weights of the classes are represented with***µb***
    and ***µf****.* We need to calculate between class variance for all the pixel
    intensity values. Finally, the threshold value with the highest between-class
    variance is selected.
  prefs: []
  type: TYPE_NORMAL
- en: '***For demonstration purposes, I have given an example below.***'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8b45fadaf436181fafda0c505821c505.png)'
  prefs: []
  type: TYPE_IMG
- en: 3 x 3 Image (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: In the above image, the value inside the circles is the intensity value of each
    pixel. Pixel intensities are `***0,1,2, and 3***`. The frequency of the intensity
    values is shown below.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we set the threshold value to 2\. All value less than 2 is considered
    as the background, and greater than or equal to 2 is the foreground. In the above
    graph, red bars are the background frequency, and green bars represent the foreground
    frequency.
  prefs: []
  type: TYPE_NORMAL
- en: The calculation for the threshold value is shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fcc6de90c2b1df06bc8b26192959bbf9.png)'
  prefs: []
  type: TYPE_IMG
- en: Calculation of between class variance with threshold value 2 (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: '*Between class variance for other threshold values 0,1 and 3 is shown in the
    following table.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/15daba6bbc3087ae0e0d342991272576.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: The highest between-class variance is 0.89, associated with the threshold value
    2\. So, according to Otsu’s method, the threshold value is 2.
  prefs: []
  type: TYPE_NORMAL
- en: '*Below is the Python implementation on the previous image.*'
  prefs: []
  type: TYPE_NORMAL
- en: This output is amazing, and the result is quite good compared to the previous
    techniques. *Let’s see the threshold value for Otsu’s thresholding.*
  prefs: []
  type: TYPE_NORMAL
- en: '**Adaptive/Local Thresholding**'
  prefs: []
  type: TYPE_NORMAL
- en: In adaptive/local thresholding, the entire image is divided into some segments,
    and global thresholding is applied to each segment. This thresholding is preferable
    when the lighting is uniformly distributed.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/818f69a26b1613946287b5457c7ead86.png)'
  prefs: []
  type: TYPE_IMG
- en: Demo Gray Scale Image with 6 Different Segments (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: Follow the gray image. The square boxes are the segments of the image. In the
    case of adaptive thresholding, each segment is separated to apply global thresholding.
    So, we can adjust the threshold value for each region/ segment.
  prefs: []
  type: TYPE_NORMAL
- en: Adaptive thresholding implementation on the text image is shown below.
  prefs: []
  type: TYPE_NORMAL
- en: The output is also satisfactory.
  prefs: []
  type: TYPE_NORMAL
- en: We can also blend two threshold outputs to extract more information, as shown
    below.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Image thresholding is one of the best ways of extracting information from blurred
    or unclear images. The thresholding techniques are not limited to the techniques
    mentioned above. But these are widely used. When to use which thresholding technique
    is entirely dependent on you; I believe if you have a clear concept of the above-mentioned
    method, you will be able to make right decision.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Thresholding (image processing) — Wikipedia](https://en.wikipedia.org/wiki/Thresholding_(image_processing))'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Join medium with the following link to support my writings.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`[https://mzh706.medium.com/membership](https://mzh706.medium.com/membership)`'
  prefs: []
  type: TYPE_NORMAL
- en: Previous articles from my Computer Vision series —
  prefs: []
  type: TYPE_NORMAL
- en: '[](/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68?source=post_page-----b3e314b5215c--------------------------------)
    [## Getting Started with NumPy and OpenCV for Computer Vision (CV-01)'
  prefs: []
  type: TYPE_NORMAL
- en: Start Your Coding for Computer vision with Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/getting-started-with-numpy-and-opencv-for-computer-vision-555f88536f68?source=post_page-----b3e314b5215c--------------------------------)
    [](/how-color-is-represented-and-viewed-in-computer-vision-b1cc97681b68?source=post_page-----b3e314b5215c--------------------------------)
    [## A Comprehensive Guide on Color Representation in Computer Vision (CV-02)
  prefs: []
  type: TYPE_NORMAL
- en: A Detail Explanation of Color Space and Color Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-color-is-represented-and-viewed-in-computer-vision-b1cc97681b68?source=post_page-----b3e314b5215c--------------------------------)
    [](/blend-images-and-create-watermark-with-opencv-d24381b81bd0?source=post_page-----b3e314b5215c--------------------------------)
    [## The Easiest Guideline on Image Blending (CV-03)
  prefs: []
  type: TYPE_NORMAL
- en: Easiest Guideline on Blending and Pasting Image for Computer Vision
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/blend-images-and-create-watermark-with-opencv-d24381b81bd0?source=post_page-----b3e314b5215c--------------------------------)
  prefs: []
  type: TYPE_NORMAL
