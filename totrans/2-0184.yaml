- en: A Data Scientist’s Guide To Improving Python Code Quality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/a-data-scientists-guide-to-improving-python-code-quality-21660ecea97d](https://towardsdatascience.com/a-data-scientists-guide-to-improving-python-code-quality-21660ecea97d)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Tools and packages to write production worthy Python code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@egorhowell?source=post_page-----21660ecea97d--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----21660ecea97d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----21660ecea97d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----21660ecea97d--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----21660ecea97d--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----21660ecea97d--------------------------------)
    ·6 min read·Aug 3, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c47a9cda8d76910dc96373aa3ca5deb2.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Christopher Gower](https://unsplash.com/@cgower?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, Data Scientists are becoming more and more involved in the production
    side of deploying a machine learning model. This means we need to be able to write
    production standard Python code like our fellow software engineers. In this article,
    I want to go over some of the key tools and packages that can aid in creating
    production-worthy code for your next model.
  prefs: []
  type: TYPE_NORMAL
- en: Linters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[**Linters**](https://en.wikipedia.org/wiki/Lint_%28software%29) are a tool
    that catches small bugs, formatting errors, and odd design patterns that can lead
    to runtime problems and unexpected outputs.'
  prefs: []
  type: TYPE_NORMAL
- en: In Python, we have [**PEP8**](https://pep8.org/) which fortunately gives us
    a global style guide to how our code should look. Numerous linters exist in Python
    that adhere to PEP8, however my preference is [**flake8**](https://flake8.pycqa.org/en/latest/).
  prefs: []
  type: TYPE_NORMAL
- en: Flake8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Flake8 is actually a combination of the [**Pyflakes**](https://github.com/PyCQA/pyflakes),
    [**pycodestyle**](https://github.com/pycqa/pycodestyle) and [**McCabe**](https://github.com/PyCQA/mccabe)
    linting packages. It checks for errors, [**code smells**](https://en.wikipedia.org/wiki/Code_smell)
    and enforces PEP8 standards.
  prefs: []
  type: TYPE_NORMAL
- en: To install flake8 `pip install flake8` and you can use it by `flake8 <file_name.py>`.
    It really is that simple!
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s say we have the function `add_numbers` in a file `flake8_example.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To call flake8 on this file, we execute `flake8 flake8_example.py` and the
    output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9dc5aa4b820701951336ba52ad2e7460.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by author.
  prefs: []
  type: TYPE_NORMAL
- en: Flake8 has picked up several styling errors that we should correct to be in
    line with PEP8.
  prefs: []
  type: TYPE_NORMAL
- en: See [here](https://flake8.pycqa.org/en/latest/) for more information about flake8
    and how to customise it for your needs.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Code Formatters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linters often just tell you what’s wrong with your code but don’t actively fix
    it for you. Formatters do fix your code and help expedite your workflow, ensure
    your code adheres to style guides, and makes it more readable for other people.
  prefs: []
  type: TYPE_NORMAL
- en: isort
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [isort package](https://pycqa.github.io/isort/) sorts your imports in the
    required order specified in [**PEP8**](https://peps.python.org/pep-0008/#imports).
    It can easily be installed by `pip install isort`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imports should be written on separate lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'They should also be grouped in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Standard library* (e.g. `sys`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Related third party* (e.g. `pandas`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Local* (e.g. functions from other files in the repo)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the imports from packages need to be in alphabetical order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following commands show you how to run isort from the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: For more information on isort, check out their site [here](https://pycqa.github.io/isort/).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Black
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Black reformats your code based on its own style guide which is a subset of
    [**PEP8**](https://peps.python.org/pep-0008/). See [here](https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html)
    for the current guide black adheres to when formatting.
  prefs: []
  type: TYPE_NORMAL
- en: To install black simply run `pip install black` and to call it on a file `black
    <file_name.py>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below is an example for a file called `black_example.py` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we run `black black_example.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output in the terminal will also look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6134ead408ac6d7e4e586a8af119fdf9.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by author.
  prefs: []
  type: TYPE_NORMAL
- en: For more information and how to customise your black formatter, see their homepage
    [here](https://black.readthedocs.io/en/stable/index.html#).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Unit Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[**Unit tests**](https://en.wikipedia.org/wiki/Unit_testing) provide a structured
    format to ensure your code is doing what it is meant to do. They test small bits
    of your code like functions and classes to verify they are behaving as expected.
    Tests are quite simple to setup and can save you hours of debugging time, so are
    highly recommended for Data Scientists.'
  prefs: []
  type: TYPE_NORMAL
- en: PyTest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[**Pytest**](https://docs.pytest.org/en/7.3.x/) is the most popular unit testing
    framework alongside Python’s native [**unit testing**](https://docs.python.org/3/library/unittest.html)
    package and is easily installed through `pip install pytest`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use pytest, we first need a function we can test. Let’s go back to our `add_numbers`
    function, which will be in a file called `pytest_example.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now in a separate file called `test_pytest_example.py`, we write the corresponding
    function’s unit test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To run this test, we simply execute `pytest test_pytest_example.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/53ac3a5642e523fe81896cf6df3ff345.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by author.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, our test passed!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want a more detailed and comprehensive tutorial on pytest and unit testing,
    checkout my previous post on the subject:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/debugging-made-easy-use-pytest-to-track-down-and-fix-python-code-ecbad62057b8?source=post_page-----21660ecea97d--------------------------------)
    [## Debugging Made Easy: Use Pytest to Track Down and Fix Python Code'
  prefs: []
  type: TYPE_NORMAL
- en: A beginner’s tutorial on unit testing and how to carry them out in Pytest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/debugging-made-easy-use-pytest-to-track-down-and-fix-python-code-ecbad62057b8?source=post_page-----21660ecea97d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Type Checker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final topic we will cover is typing, and no not the keyboard kind! Python
    is a [**dynamic language**](https://en.wikipedia.org/wiki/Dynamic_programming_language),
    which means it does not enforce strict typing for its variables. A variable `x`,
    can be an integer and a string in the same code. However, this can be problematic
    and lead to unexpected bugs. Therefore, there are tools to make Python more like
    a [**statically typed**](https://www.techopedia.com/definition/22321/statically-typed#:~:text=Statically%20typed%20is%20a%20programming,with%20variables%2C%20not%20with%20values.)
    language.
  prefs: []
  type: TYPE_NORMAL
- en: Mypy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can ensure our variables and function have the right expected types by using
    the package [**mypy**](https://mypy-lang.org/). This package checks that the inputs
    and outputs are correct with the required types.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, for the `add_numbers` function, we expect the inputs and outputs
    to both be `float`. This can be specified in the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s say we pass the following arguments into the function and `print`
    the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We see the first output is what we expect, but the second is not. This is because
    we passed in two `str` types, however the python interpreter didn’t error out
    as Python is a dynamic language.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use mypy to catch these errors and avoid any bugs downstream. To do
    this, call mypy as `mypy <file_name.py>`. So, for this example we execute `mypy
    mypy_example.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1faa678f068177a197f5dc9e2adc8582.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by author.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, mypy has picked up that the arguments specified in line 6 are
    `str`, whereas the function expects `float`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want a more detailed and comprehensive tutorial on mypy and typing,
    checkout my previous post on the subject:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/a-data-scientists-guide-to-python-typing-boosting-code-clarity-194371b4ef05?source=post_page-----21660ecea97d--------------------------------)
    [## A Data Scientist’s Guide to Python Typing: Boosting Code Clarity'
  prefs: []
  type: TYPE_NORMAL
- en: The importance of typing and how it can be carried in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/a-data-scientists-guide-to-python-typing-boosting-code-clarity-194371b4ef05?source=post_page-----21660ecea97d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: What’s The Need?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To summarise, you might be thinking, why do we need all these tools? Well,
    all these lead to your Python code having:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Readability:*** *Your code becomes instantly more intuitive and readable
    to other developers and data scientists. This allows for better collaboration
    and quicker delivery times.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Robustness:*** *The code will be less prone to errors and also harder to
    introduce errors, particularly using unit tests.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Easier To Identify Bugs:*** *Through the use of linters and tests, we can
    detect any inconsistencies and odd results from the code, which limits the risk
    of shipping to production with code errors.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can view the whole code used in this post at my GitHub here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Software%20Engineering%20/code-quality-example?source=post_page-----21660ecea97d--------------------------------)
    [## Medium-Articles/Software Engineering /code-quality-example at main · egorhowell/Medium-Articles'
  prefs: []
  type: TYPE_NORMAL
- en: Code I use in my medium blog/articles. Contribute to egorhowell/Medium-Articles
    development by creating an account on…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Software%20Engineering%20/code-quality-example?source=post_page-----21660ecea97d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References & Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*More Python code quality examples*](https://testdriven.io/blog/python-code-quality/#black)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*More linting tools*](https://realpython.com/python-code-quality/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*And some more tools*](https://cpske.github.io/ISP/code-quality/code-quality-tools)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another Thing!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----21660ecea97d--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  prefs: []
  type: TYPE_NORMAL
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----21660ecea97d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Connect With Me!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**YouTube**](https://www.youtube.com/@egorhowell?sub_confirmation=1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**GitHub**](https://github.com/egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
