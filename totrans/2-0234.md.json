["```py\npip install findpeaks\n```", "```py\nimport matplotlib.pyplot as plt\n# Import library\nfrom findpeaks import findpeaks\n# Initialize\nfp = findpeaks(method='topology')\n# Example 1d-vector\nX = fp.import_example('1dpeaks')\n\n# Plot\nplt.figure(figsize=(15, 8), dpi=100)\nplt.plot(X)\nplt.grid(True)\nplt.xlabel('Time')\nplt.ylabel('Value')\n```", "```py\n# Fit topology method on the 1D vector\nresults = fp.fit(X)\n\n# Plot the results\nfp.plot_persistence(figsize=(25,8))\n```", "```py\n# Import library\nfrom findpeaks import findpeaks\n\n# Initialize\nfp = findpeaks(method='mask')\n\n# Example 2d image\nX = fp.import_example('2dpeaks')\n\n# Plot RAW input image\nplt.imshow(X)\n\n# Fit using mask method\nresults = fp.fit(X)\n\n# Plot the pre-processing steps\nfp.plot_preprocessing()\n```", "```py\n# The output contains multiple variables\nprint(results.keys())\n# dict_keys(['Xraw', 'Xproc', 'Xdetect'])\n\n# Plot detected peaks\nfp.plot()\n```", "```py\n# Create mesh plot from 2D image.\nfp.plot_mesh()\n\n# Rotate to make a top view\nfp.plot_mesh(view=(90,0))\n```", "```py\n# Import libraries\nimport numpy as np\nfrom findpeaks import findpeaks\n\n# Create example data set\ni = 10000\nxs = np.linspace(0,3.7*np.pi,i)\nX = (0.3*np.sin(xs) + np.sin(1.3 * xs) + 0.9 * np.sin(4.2 * xs) + 0.06 * np.random.randn(i))\n\n# Initialize\nfp = findpeaks(method='peakdetect', lookahead=200, interpolate=None)\n# Fit peakdetect method\nresults = fp.fit(X)\n# Plot\nfp.plot()\n```", "```py\n# Import library\nfrom findpeaks import findpeaks\n\n# Initialize findpeaks with cearus method.\n# The default setting is that it only return peaks-vallyes with at least 5% difference.\nfp = findpeaks(method='caerus', params={'minperc':5, 'window':50})\n\n# Import example data\nX = fp.import_example('facebook')\n\n# Fit\nresults = fp.fit(X)\n\n# Make the plot\nfp.plot()\n```", "```py\n# Import library\nfrom findpeaks import findpeaks\n# Initializatie\nfp = findpeaks(scale=None, denoise=None, togray=True, imsize=(300, 300))\n# Import image example\nimg = fp.import_example('2dpeaks_image')\n# Fit\nfp.fit(img)\n# Tens of thousands of peaks are detected at this point.\nfp.plot()\nfp.plot_mesh()\n```", "```py\n# Import library\nfrom findpeaks import findpeaks\n# Initializatie\nfp = findpeaks(method='topology',\n               togray=True,\n               imsize=(300, 300),\n               scale=True,\n               denoise='fastnl',\n               params={'window': 31})\n\n# Import image example\nimg = fp.import_example('2dpeaks_image')\n\n# Fit\nfp.fit(img)\n\n# Plot\nfp.plot_preprocessing()\n\n[findpeaks] >Import [.\\findpeaks\\data\\2dpeaks_image.png]\n[findpeaks] >Finding peaks in 2d-array using topology method..\n[findpeaks] >Resizing image to (300, 300).\n[findpeaks] >Scaling image between [0-255] and to uint8\n[findpeaks] >Conversion to gray image.\n[findpeaks] >Denoising with [fastnl], window: [31].\n[findpeaks] >Detect peaks using topology method with limit at None.\n[findpeaks] >Fin. \n```", "```py\n# Plot the top 15 peaks that are detected and examine the scores\nfp.results['persistence'][1:5]\n\n#      x    y  birth_level  death_level  score  peak  valley\n# 2  131   52        166.0        103.0   63.0  True   False\n# 3  132   61        223.0        167.0   56.0  True   False\n# 4  129   60        217.0        194.0   23.0  True   False\n# 5   40  288        113.0         92.0   21.0  True   False\n# 6   45  200        104.0         87.0   17.0  True   False\n# 7   87  293        112.0         97.0   15.0  True   False\n# 8  165  110         93.0         78.0   15.0  True   False\n# 9  140   45        121.0        107.0   14.0  True   False\n\n# Take the minimum score for the top peaks off the diagonal.\nlimit = fp.results['persistence'][0:5]['score'].min()\n\n# Plot\nfp.plot(limit=limit)\n\n# Mesh plot\nfp.plot_mesh()\n```"]