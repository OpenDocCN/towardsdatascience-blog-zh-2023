["```py\n# docs/conf.py\nextensions = [\n    ...,\n    \"sphinx.ext.linkcode\",\n]\n...\n```", "```py\n# docs/conf.py\n...\ndef linkcode_resolve(domain, info):\n    if domain != \"py\":\n        return None\n    if not info[\"module\"]:\n        return None\n\n    filename = \"src/\" + info[\"module\"].replace(\".\", \"/\")\n    github_repo = \"https://github.com/username/my-package\"\n\n    return f\"{github_repo}/blob/main/{filename}.py\"\n```", "```py\nmodule = sys.modules.get(info[“module”])\n```", "```py\nobj = module\nfor part in info[“fullname”].split(“.”):\n    obj = getattr(obj, part, None)\n```", "```py\nline = inspect.getsourcelines(obj)[1]\n```", "```py\ndef get_object_line_number(info):\n    \"\"\"Return object line number from module.\"\"\"\n    try:\n        module = sys.modules.get(info[\"module\"])\n        if module is None:\n            return None\n\n        # walk through the nested module structure\n        obj = module\n        for part in info[\"fullname\"].split(\".\"):\n            obj = getattr(obj, part, None)\n            if obj is None:\n                return None\n\n        return inspect.getsourcelines(obj)[1]\n    except (TypeError, OSError):\n        return None\n```", "```py\ndef linkcode_resolve(domain, info):\n    ...\n    line = get_object_line_number(info)\n    if line is None:\n        return None\n\n    return f\"{github_repo}/blob/{github_branch}/{filename}.py#L{line}\"\n```", "```py\ndef linkcode_resolve(domain, info):\n    ...\n    rtd_version = os.getenv(\"READTHEDOCS_VERSION\", \"latest\")\n    github_branch = \"develop\" if rtd_version == \"develop\" else \"main\"\n\n    return f\"{github_repo}/blob/{github_branch}/{filename}.py#L{line}\"\n```"]