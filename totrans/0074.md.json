["```py\nimport cProfile\nfrom typing import List\n\ndef uppercase_list(a_list:List) -> List:\n  return [str(item).upper() for item in a_list]\n\ncProfile.run(statement=\"uppercase_list(['hello', 'world', '!'])\")\n```", "```py\n8 function calls in 0.000 seconds\nOrdered by: standard name\n\nncalls  tottime  percall  cumtime  percall  filename:lineno(function)\n    1    0.000    0.000    0.000    0.000   <string>:1(<module>)\n    1    0.000    0.000    0.000    0.000   cprofile_example.py:6(uppercase_list)\n    1    0.000    0.000    0.000    0.000   cprofile_example.py:8(<listcomp>)\n    1    0.000    0.000    0.000    0.000   {built-in method builtins.exec}\n    1    0.000    0.000    0.000    0.000   {method 'disable' of '_lsprof.Profiler' objects}\n    3    0.000    0.000    0.000    0.000   {method 'upper' of 'str' objects}\n```", "```py\ndef duplicate_count_dumb(list_1:List, list_2:List) -> int:\n  \"\"\" Returns the distinct number of items that are present in both provided lists (case-insensitive) \"\"\"\n  duplicates: List[str] = []\n  for item1 in list_1:\n    for item2 in list_2:\n      if str(item1).upper() == str(item2).upper():\n        if (str(item1).upper() not in duplicates):\n          duplicates.append(str(item1).upper())\n  return len(duplicates)\n```", "```py\n2000008 function calls in 0.523 seconds\nOrdered by: standard name\n\n ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n      1    0.000    0.000    0.520    0.520 <string>:1(<module>)\n      1    0.381    0.381    0.520    0.520 list_matching.py:43(duplicate_count_dumb)\n      1    0.002    0.002    0.523    0.523 {built-in method builtins.exec}\n      1    0.000    0.000    0.000    0.000 {built-in method builtins.len}\n      1    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}\n      1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n2000002    0.139    0.000    0.139    0.000 {method 'upper' of 'str' objects}\n```", "```py\n┌─Benchmark─────────┬───────────────┬───────────────┬───────────────┐\n│ dupcount 1k items │      Min (ms) │      Max (ms) │      Avg (ms) │\n├───────────────────┼───────────────┼───────────────┼───────────────┤\n│ default           │ 520.405100000 │ 529.250500000 │ 523.529233333 │\n└───────────────────┴───────────────┴───────────────┴───────────────┘\n```", "```py\ndef duplicate_count_smarter(list_1:List, list_2:List) -> int:\n  \"\"\" Returns the distinct number of items that are present in both provided lists (case-insensitive) \"\"\"\n  duplicates: {str} = set()\n  list_1 = [str(w).upper() for w in list_1]\n  list_2 = [str(w).upper() for w in list_2]\n  for item1 in list_1:\n    for item2 in list_2:\n      if item1 == item2:\n        duplicates.add(item1)\n  return len(duplicates)\n```", "```py\n2007 function calls in 0.022 seconds\n\nOrdered by: standard name\n\nncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    1    0.000    0.000    0.019    0.019 <string>:1(<module>)\n    1    0.019    0.019    0.019    0.019 list_matching.py:74(duplicate_count_smarter)\n    1    0.000    0.000    0.000    0.000 list_matching.py:77(<listcomp>)\n    1    0.000    0.000    0.000    0.000 list_matching.py:78(<listcomp>)\n    1    0.003    0.003    0.022    0.022 {built-in method builtins.exec}\n    1    0.000    0.000    0.000    0.000 {built-in method builtins.len}\n    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n 2000    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}\n```", "```py\n┌─Benchmark─────────┬───────────────┬───────────────┬───────────────┐\n│ dupcount 1k items │      Min (ms) │      Max (ms) │      Avg (ms) │\n├───────────────────┼───────────────┼───────────────┼───────────────┤\n│ default           │ 520.405100000 │ 529.250500000 │ 523.529233333 │\n│ first_upper       │  18.440300000 │  18.665600000 │  18.548466667 │ (x28)\n└───────────────────┴───────────────┴───────────────┴───────────────┘\n```", "```py\ndef duplicate_count_with_in(list_1:List, list_2:List) -> int:\n  \"\"\" Returns the number of times a word exists in a list (case-insensitive) xxxx\"\"\"\n  duplicates: {str} = set()\n  list_1 = [str(w).upper() for w in list_1]\n  list_2 = [str(w).upper() for w in list_2]\n  for item1 in list_1:\n    if item1 in list_2:\n      duplicates.add(item1)\n  return len(duplicates)\n```", "```py\n┌─Benchmark─────────┬───────────────┬───────────────┬───────────────┐\n│ dupcount 1k items │      Min (ms) │      Max (ms) │      Avg (ms) │\n├───────────────────┼───────────────┼───────────────┼───────────────┤\n│ default           │ 520.405100000 │ 529.250500000 │ 523.529233333 │\n│ first_upper       │  18.440300000 │  18.665600000 │  18.548466667 │ (x28)\n│ with_in           │  11.774500000 │  12.401600000 │  12.183367000 │ (x43)     │\n└───────────────────┴───────────────┴───────────────┴───────────────┘\n```", "```py\ndef dedupper(the_list: List) -> List:\n  \"\"\" Removes duplicates from list (case-insensitive) \"\"\"\n  return_list = []\n  for entry in the_list:\n    _entry = str(entry).upper()\n    if (_entry not in return_list):\n      return_list.append(_entry)\n  return return_list\n```", "```py\n┌─Benchmark────────────────────┬──────────────┐\n│ duplicate count (100,000x)   │     Avg (ms) │\n├──────────────────────────────┼──────────────┤\n│ dedup_dumb                   │ 61386.198600 │\n└──────────────────────────────┴──────────────┘\n```", "```py\ndef dedupper_smart(the_list: List) -> List:\n    \"\"\" Removes duplicates from list (case-insensitive) \"\"\"\n    return list({str(entry).upper() for entry in the_list})\n```", "```py\n┌─Benchmark────────────────────┬──────────────┐\n│ duplicate count (100,000x)   │     Avg (ms) │\n├──────────────────────────────┼──────────────┤\n│ dedup_dumb                   │ 61386.19860  │\n│ dedup_smart                  │    21.85930  │(x2,808)\n└──────────────────────────────┴──────────────┘\n```", "```py\ndef duplicate_count_dedup_lists(list_1:List, list_2:List) -> int:\n  \"\"\" Returns the number of times a word exists in a list (case-insensitive) xxxx\"\"\"\n  duplicates: {str} = set()\n  set_1= {str(entry).upper() for entry in list_1}\n  set_2 = {str(entry).upper() for entry in list_2}\n  for item1 in list_1:\n    if item1 in list_2:\n      duplicates.add(item1)\n  return len(duplicates)\n```", "```py\n┌─Benchmark─────────┬───────────────┬───────────────┬───────────────┐\n│ dupcount 1k items │      Min (ms) │      Max (ms) │      Avg (ms) │\n├───────────────────┼───────────────┼───────────────┼───────────────┤\n│ default           │ 520.405100000 │ 529.250500000 │ 523.529233333 │\n│ first_upper       │  18.440300000 │  18.665600000 │  18.548466667 │ (x28)\n│ with_in           │  11.774500000 │  12.401600000 │  12.183367000 │ (x43)     │\n│ dedup_lists_set   │   0.351700000 │   0.593000000 │   0.496767000 │ (x1,053)\n└───────────────────┴───────────────┴───────────────┴───────────────┘\n```", "```py\ndef duplicate_count_smartest(list_1:List, list_2:List) -> int:\n  \"\"\" Returns the number of times a word exists in a list (case-insensitive) \"\"\"\n  set_1 = {str(entry).upper() for entry in list_1}\n  set_2 = {str(entry).upper() for entry in list_2}\n  return len(set_1.intersection(set_2))\n```", "```py\n┌─Benchmark─────────┬───────────────┬───────────────┬───────────────┐\n│ dupcount 1k items │      Min (ms) │      Max (ms) │      Avg (ms) │\n├───────────────────┼───────────────┼───────────────┼───────────────┤\n│ default           │ 520.405100000 │ 529.250500000 │ 523.529233333 │\n│ first_upper       │  18.440300000 │  18.665600000 │  18.548466667 │ (x28)\n│ with_in           │  11.774500000 │  12.401600000 │  12.183367000 │ (x43)     │\n│ dedup_lists_set   │   0.351700000 │   0.593000000 │   0.496767000 │ (x1,053)\n│ sets              │   0.340600000 │   0.369600000 │   0.351167000 │ (x1,490)\n└───────────────────┴───────────────┴───────────────┴───────────────┘\n```"]