- en: Building Interactive Network Graphs using pyvis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/building-interactive-network-graphs-using-pyvis-5b8e6e25cf64](https://towardsdatascience.com/building-interactive-network-graphs-using-pyvis-5b8e6e25cf64)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn how to make your network graphs come to life
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/?source=post_page-----5b8e6e25cf64--------------------------------)[![Wei-Meng
    Lee](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----5b8e6e25cf64--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5b8e6e25cf64--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5b8e6e25cf64--------------------------------)
    [Wei-Meng Lee](https://weimenglee.medium.com/?source=post_page-----5b8e6e25cf64--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5b8e6e25cf64--------------------------------)
    ·7 min read·Mar 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/43f40d53b2431b9caed15c4d55a2ad24.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [DeepMind](https://unsplash.com/@deepmind?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: In my previous article on creating network graphs, I showed how you can build
    one using the NetworkX package. The key problem with NetworkX is that the graph
    generated is static. Once the graph is plotted, there is no way the user is able
    to interact with it (such as rearrange the nodes, etc). The network graph would
    be more intuitive (and fun!) if the user can interact with it. And so this is
    the main focus of this article.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/plotting-network-graphs-using-python-bc62f0d93b3f?source=post_page-----5b8e6e25cf64--------------------------------)
    [## Plotting Network Graphs using Python'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to use the NetworkX package to visualize complex networks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/plotting-network-graphs-using-python-bc62f0d93b3f?source=post_page-----5b8e6e25cf64--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I will show you how you can create an interative network graph
    using the `pyvis` package.
  prefs: []
  type: TYPE_NORMAL
- en: The `pyvis` package is a wrapper for the popular **visJS** JavaScript library,
    and it allows you to easily generate visual network graphs in Python.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Installing pyvis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install the `pyvis` package, use the `pip` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating a network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, create a new graph using the `Network` class in `pyvis`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To display the graph on Jupyter Notebook, set the `notebook` parameter to `True`.
    The above code snippet creates an *undirected* graph.
  prefs: []
  type: TYPE_NORMAL
- en: Adding nodes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can now add nodes to the graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `add_node()` function adds a single node while the `add_nodes()` function
    adds multiple nodes to the graph. You can also set the optional `color` parameter
    for both functions to set the color of the node(s).
  prefs: []
  type: TYPE_NORMAL
- en: 'To display the graph, call the `show()` function with a name for the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The nodes should now be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/054504a7fea06b0bbeaace242c8724ec.png)'
  prefs: []
  type: TYPE_IMG
- en: All images by author
  prefs: []
  type: TYPE_NORMAL
- en: Adding Edges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the nodes added to the graph, you can now add the edges to connect the
    nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `add_edge()` function adds a single edge connecting two nodes, while the
    `add_edges()` function takes in a list of tuples connecting the various nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The graph should now display the edges connecting the various nodes. Try dragging
    each node and see how they are pulled back after you released it:'
  prefs: []
  type: TYPE_NORMAL
- en: All videos by author
  prefs: []
  type: TYPE_NORMAL
- en: Directed Graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want a directed graph, you should set the `directed` parameter in the
    `Network` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you modify the code earlier and rerun all the code snippets, you should
    now see a directed graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cf5d33bdd7b98f191c2c309688e95cb0.png)'
  prefs: []
  type: TYPE_IMG
- en: Modifying the physics of the graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you click and drag the nodes in the graph, you will noticed that the nodes
    will bounce around. When you release your mouse, the nodes will snap back into
    its original position. All these behaves very much like real balls (the nodes)
    bounded by springs (the edges). You can customize the physics behind the graph
    (how they snap back, the damping of the spring, etc) using the `repulsion()` function.
    The following statement shows the default values of all the parameters in the
    `repulsion()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the uses of the various parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`node_distance` — This is the range of influence for the repulsion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`central_gravity` — The gravity attractor to pull the entire network to the
    center.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring_length` — The rest length of the edges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spring_strength` — The strenght of the edges springs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`damping` — A value ranging from 0 to 1 of how much of the velocity from the
    previous physics simulation iteration carries over to the next iteration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Source: [https://pyvis.readthedocs.io/en/latest/documentation.html?highlight=repulsion#pyvis.network.Network.repulsion](https://pyvis.readthedocs.io/en/latest/documentation.html?highlight=repulsion#pyvis.network.Network.repulsion)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The best way to understand the use of the various parameters is to try it out.
    The following example sets the `spring_length` and `damping` parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s how the graph looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/98ad5ba6dd1c474699c94c05a853f28a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following video shows how the graph behaves when the nodes are dragged
    and released:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also show the UI for you to dynamically alter the physics of the graph
    by using the `show_buttons()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/97aa01db27dea1b0778b64a5093b3932.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `filter_` parameter takes one of the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`show_buttons(filter_=[''nodes'', ''edges'', ''physics''])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to show all filters, set it to `True`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: I will leave it to you to try how the filters look like and how they work.Visualizing
    the Flights Delay Dataset
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now that you are familiar with the basics of using the `pyvis` package, we will
    use it to visualize the flights between the various airports in the **2015 Flights
    Delay** dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '**2015 Flights Delay Dataset** (*airports.csv*). *Source*: [https://www.kaggle.com/datasets/usdot/flight-delays](https://www.kaggle.com/datasets/usdot/flight-delays).
    *Licensing* — [CC0: Public Domain](https://creativecommons.org/publicdomain/zero/1.0/)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'First, load the **flights.csv** file into a Pandas DataFrame. Because this
    CSV file is large, I will only load the three columns that I need to do my work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the dataframe is loaded, I will go ahead and count the numbers of flights
    from one airport to another:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The resultant output is as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5dc31a4c158e8e1397830805dd6d20ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As there are more than 4500 combinations of flights, let’s only select the
    top 130 combinations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that I am dividing the values in the **COUNT** column by 5000 because
    later on I will be using the values in the **COUNT** column as the linewidth of
    the edges linking two airports. And so the values need to be reduced to a smaller
    range. The top 130 combinations are now as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/21f3816a60e8338561c22dafb6af59c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, I will sum up all the flights originating from each airport (remember
    the count has been normalized in the previous section):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The number of flights originating from each airport will be used as the size
    of the node:'
  prefs: []
  type: TYPE_NORMAL
- en: The larger the number of flights from an airport, the bigger the node.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Plotting the graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can now plot the graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The graph looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f4be8cae91d8f5d04a89dffa1c8b7d9c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s zoom in a little:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/421fab7738489e738fd5cd003b5a260a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see that **ATL** and **LAX** have the most originating flights (they
    are the two largest nodes). You can highlight these two nodes by changing their
    color to red. To do so, you can iterate through all the nodes using the `nodes`
    attribute and examining the value of the `value` key. If the value is more than
    20, set the node color to red using the `color` key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The **ATL** and **LAX** nodes are now in red:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d4618d9fa7e20fe2e8d5d7aeea687c44.png)'
  prefs: []
  type: TYPE_IMG
- en: '**If you like reading my articles and that it helped your career/study, please
    consider signing up as a Medium member. It is $5 a month, and it gives you unlimited
    access to all the articles (including mine) on Medium. If you sign up using the
    following link, I will earn a small commission (at no additional cost to you).
    Your support means that I will be able to devote more time on writing articles
    like this.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/membership?source=post_page-----5b8e6e25cf64--------------------------------)
    [## Join Medium with my referral link — Wei-Meng Lee'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Wei-Meng Lee (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----5b8e6e25cf64--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, you learned how to create interative network graph using the
    `pyvis` package. The most interesting aspects of the `pyvis` package is that it
    makes your network graph come to life. Interactive network graphs are ideal for
    social networks, corporate structures or other networks where you want to visualize
    the relationships between entities. Have fun with `pyvis` and let me know the
    type of data you use with it!
  prefs: []
  type: TYPE_NORMAL
