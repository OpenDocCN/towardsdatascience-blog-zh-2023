["```py\n--calculate total quantity sold and total revenue for each product\nWITH PRODUCTSALES AS (\n  SELECT\n    PRD.PRODUCTID, \n    PRD.PRODUCTNAME,\n    SUM(ORDET.QUANTITYORDERED) AS TOTAL_QUANTITY_SOLD,\n    SUM(ORDET.QUANTITYORDERED * PRD.BUYPRICE) AS TOTAL_REVENUE\n  FROM \n    PRODUCTS PRD\n  JOIN \n    ORDERDETAILS ORDET \n    ON PRD.PRODUCTID = ORDET.PRODUCTID\n  GROUP BY \n    PRD.PRODUCTID, PRD.PRODUCTNAME\n)\n\n--retrieve product sales information with ranking based on total revenue\nSELECT\n  PRODUCTID, \n  PRODUCTNAME,\n  TOTAL_QUANTITY_SOLD,\n  TOTAL_REVENUE,\n  RANK() OVER (ORDER BY TOTAL_REVENUE DESC) AS SALES_RANK\nFROM \n  PRODUCTSALES;\n```", "```py\n**1\\. Customer Credit Limit Analysis\n----------------------------------**\n\nWrite a query to perform a customer credit analysis using the table\n'CUSTOMERS'. Calculate the following details,\n\n* Customer Name,\n* Country,\n* Average Credit Limit, \n* Maximum Credit Limit, \n* Minimum Credit Limit\n\nDisplay credit limits - Average, Maximum and Minimum - such that it is \npartitioned for each Country.\n\n**Hint:** Use the Window Functions AVG(), MAX() and MIN()\n```", "```py\n**2\\. Order Frequency Analysis\n---------------------------** \nWrite a query to examine the ordering patterns of customers, segmenting \nthem according to order counts as follows:\n\n* If a customer has placed 10 or more orders, classify as 'High Frequency'.\n* For those with 5 to 9 orders, categorise as 'Medium Frequency'.\n* Otherwise, designate as 'Low Frequency'.\n\nDisplay the customer's ID, name, order count, and order frequency \ncategory. \n\n**Hint:** Use CASE statement\n```", "```py\n3\\. Employee Performance Analysis\n--------------------------------\n\nWrite a query to analyse the performance of employees based on their \ntotal sales contributions. Display the following details, \n\n* employee ID, \n* employee name, \n* total number of orders\n* total sales amount \n* rank based on total sales amount.\n\n**Hint:** Use Window Function *RANK()* or *DENSE_RANK()*\n```", "```py\nSELECT \n    *\nFROM\n    EMPLOYEES\nLIMIT 10;\n```", "```py\n--cte to define a hierarchical structure in the company\nWITH RECURSIVE EMPLOYEEHIERARCHY AS \n(\n    --base part\n    SELECT \n        EMPLOYEEID, \n        EMPLOYEENAME, \n        JOBTITLE,\n        MANAGER,\n        1 AS EMPHIERARCHYDEPTH\n    FROM \n        EMPLOYEES\n    WHERE\n        EMPLOYEEID = 'EMP100'\n\n    UNION ALL\n\n    --recursive part\n    SELECT \n        EMP.EMPLOYEEID, \n        EMP.EMPLOYEENAME,\n        EMP.JOBTITLE,\n        EMP.MANAGER,\n        EH.EMPHIERARCHYDEPTH + 1\n    FROM \n        EMPLOYEES EMP\n    JOIN \n        EMPLOYEEHIERARCHY EH \n    ON \n        EMP.MANAGER = EH.EMPLOYEEID\n)\n\n--main query\nSELECT \n    *\nFROM \n    EMPLOYEEHIERARCHY;\n```", "```py\nSELECT\n    CUST.CUSTOMERID,\n    CUST.CUSTOMERNAME,\n    COALESCE((\n        SELECT SUM(ORDET.QUANTITYORDERED)\n        FROM ORDERS ORD\n        JOIN ORDERDETAILS ORDET \n        ON ORD.ORDERID = ORDET.ORDERID\n        WHERE ORD.CUSTOMERID = CUST.CUSTOMERID), 0) AS TOTAL_ORDER_QUANTITY\nFROM \n    CUSTOMERS CUST;\n```", "```py\nWITH CUSTOMERORDERSUMMARY AS (\n    SELECT\n        CUST.CUSTOMERID,\n        CUST.CUSTOMERNAME,\n        COALESCE(SUM(ORDET.QUANTITYORDERED), 0) AS TOTAL_ORDER_QUANTITY\n    FROM \n        CUSTOMERS CUST\n    LEFT JOIN \n        ORDERS ORD \n        ON CUST.CUSTOMERID = ORD.CUSTOMERID\n    LEFT JOIN \n        ORDERDETAILS ORDET \n        ON ORD.ORDERID = ORDET.ORDERID\n    GROUP BY \n        CUST.CUSTOMERID, CUST.CUSTOMERNAME\n)\n\nSELECT  \n   * \nFROM \n   CUSTOMERORDERSUMMARY;\n```", "```py\nSELECT \n   PRD.PRODUCTNAME, \n   PRD.QUANTITYINSTOCK,\n   PS.TOTAL_QUANTITY_SOLD\nFROM \n   PRODUCTS PRD\nJOIN (\n    SELECT\n        PRODUCTID,\n        SUM(QUANTITYORDERED) AS TOTAL_QUANTITY_SOLD\n    FROM ORDERDETAILS\n    GROUP BY PRODUCTID\n) AS PS\nON PRD.PRODUCTID = PS.PRODUCTID;\n```", "```py\n--cte\nWITH PRODUCTSALES AS (\n    SELECT\n       PRODUCTID,\n       SUM(QUANTITYORDERED) AS TOTAL_QUANTITY_SOLD\n    FROM \n       ORDERDETAILS\n    GROUP BY \n       PRODUCTID\n)\n\n--main query\nSELECT \n   PRD.PRODUCTNAME, \n   PRD.QUANTITYINSTOCK,\n   PS.TOTAL_QUANTITY_SOLD\nFROM \n   PRODUCTS PRD\nJOIN \n   PRODUCTSALES PS \n   ON PRD.PRODUCTID = PS.PRODUCTID;\n```", "```py\n--create a temporary table to store intermediate results\nCREATE TEMPORARY TABLE TEMPREVENUECATEGORY AS\nSELECT\n    PRD.PRODUCTCATEGORY,\n    SUM(ORDET.QUANTITYORDERED * PRD.BUYPRICE) AS TOTAL_REVENUE\nFROM\n    PRODUCTS PRD\nJOIN\n    ORDERDETAILS ORDET ON PRD.PRODUCTID = ORDET.PRODUCTID\nGROUP BY\n    PRD.PRODUCTCATEGORY;\n\n--select data from the temporary table\nSELECT \n  * \nFROM \n  TEMPREVENUECATEGORY;\n```", "```py\n--use CTE to calculate total revenue by product category\nWITH REVENUECATEGORY AS (\n    SELECT\n        PRD.PRODUCTCATEGORY,\n        SUM(ORDET.QUANTITYORDERED * PRD.BUYPRICE) AS TOTAL_REVENUE\n    FROM\n        PRODUCTS PRD\n    JOIN\n        ORDERDETAILS ORDET ON PRD.PRODUCTID = ORDET.PRODUCTID\n    GROUP BY\n        PRD.PRODUCTCATEGORY\n)\n\n--select data from the CTE\nSELECT \n   * \nFROM \n   REVENUECATEGORY;\n```", "```py\n**Analysing Customer Orders\n-------------------------**\n\nWrite a query to find the customer or customers with the highest total \norder value for 'shipped' orders. Your query should include the following \ndetails for the customer with the highest value order,\n\n* Customer ID \n* Customer Name\n* Total count of orders\n* Total value of the orders placed by the customer\n* Sales representative employee for the customer\n\n**Hint:** Refer to the ER Diagram provided at the start of the article to \ngrasp the interconnections between tables. Create a list of the columns \nyou intend to retrieve, present them in tabular format, and cross-\nreference the diagram to identify the corresponding fields available \nin each table.\n```"]