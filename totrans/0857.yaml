- en: Exploring Large-scale Raster Population Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/exploring-large-scale-raster-population-data-72803cf7f2ad](https://towardsdatascience.com/exploring-large-scale-raster-population-data-72803cf7f2ad)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/447d132fd00738a285dfd225d655e478.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Visualizing geospatial population data across multiple scales using Python:
    global, country, and urban-level data'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@janosovm?source=post_page-----72803cf7f2ad--------------------------------)[![Milan
    Janosov](../Images/77b62460041f66ec4585a81baef81a03.png)](https://medium.com/@janosovm?source=post_page-----72803cf7f2ad--------------------------------)[](https://towardsdatascience.com/?source=post_page-----72803cf7f2ad--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----72803cf7f2ad--------------------------------)
    [Milan Janosov](https://medium.com/@janosovm?source=post_page-----72803cf7f2ad--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----72803cf7f2ad--------------------------------)
    ·9 min read·Sep 21, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: I have often seen beautiful population maps circulating online; however, I usually
    got stuck at some technical parts, like visualizing other map segments than shown
    in the tutorial or turning the large-scale raster data into more computation-friendly
    vector formats. I overcome some of these shortcomings in this article with a hands-on
    guide to two primary global population data sources.
  prefs: []
  type: TYPE_NORMAL
- en: It is also important to note that besides their aesthetic value, population
    data and maps showing them are amongst the most basic information and valuable
    information one can gather and incorporate for any urban development or location
    intelligence task. They come in particularly handy in use cases such as planning
    new amenities, site selection and catchment analysis, estimating the scale of
    urban products, or profiling different neighborhoods, just to mention a few.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Data sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I am relying on the following two fine-grained population estimate data sources,
    which you can download the files via the attached links (at the date of the publication):'
  prefs: []
  type: TYPE_NORMAL
- en: The [European Commission’s GHSL — Global Human Settlement Layer](https://ghsl.jrc.ec.europa.eu/ghs_pop2019.php)
    measures each grid cell’s population level. Find the overall description here
    and the particular set I used from their [2023 report](https://ghsl.jrc.ec.europa.eu/download.php?ds=pop)
    with a spatial resolution of 100m here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WorldPop hub, from where I will take Germany as an example using the constrained
    individual countries data set at a resolution of 100m. Find the [listing](https://hub.worldpop.org/geodata/listing?id=78)
    here and Germany’s data [here](https://hub.worldpop.org/geodata/summary?id=49789).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2\. Visualizing the Global Human Settlement Layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**2.1\. Import the data!**'
  prefs: []
  type: TYPE_NORMAL
- en: I first came across with this dataset in the [Datashader](/big-data-visualization-using-datashader-in-python-c3fd00b9b6fc)
    tutorial of the [Architecture Performance](https://www.architecture-performance.fr/ap_blog/plotting-population-density-with-datashader/).
    After reproducing their visualization, I hit a few roadblocks by extending it
    to a global map, which initiated this work, so now I show you the workarounds
    I found on how to do that!
  prefs: []
  type: TYPE_NORMAL
- en: First, parse the raster file using the xarray package.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this cell is a detailed description of the data set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f69f95c2b0fc4c48686f2886aa01e043.png)'
  prefs: []
  type: TYPE_IMG
- en: '**2.2\. Visualizing segments of the data**'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can already see this is a pretty challenging amount of data for most of
    the standard laptops. Anyway, let’s try to visualize it using Datashader, a really
    handy tool for geospatial datasets of this magnitude:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: While this code looks technically OK, my 2021 M1 Macbook Pro with 16GB of RAM
    gives a miserable memory overflow error. So, let’s crop the image to look into
    the data! For this, I follow the Architecture Performance and focus on Europe,
    which I follow for the time being, as it certainly works.
  prefs: []
  type: TYPE_NORMAL
- en: However, the main question I will answer later is how can we visualize the entire
    globe’s data despite such memory limitations but still using our local machine?
    Wait for it!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This code block outputs the following visual:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1a8a26e8730664ee10c455aacfac1e34.png)'
  prefs: []
  type: TYPE_IMG
- en: Population distribution in Europe. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the ‘fire’ colormap seems like an industry standard for a good reason;
    however, if you wish to mix things up, you may find other coloring schemes [here](https://colorcet.holoviz.org)
    and applied below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This code block outputs the following visual:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eb09c03b1f705e2e6a4ba3db6a34164c.png)'
  prefs: []
  type: TYPE_IMG
- en: Population distribution in Europe. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: '**2.3\. Visualizing the entire globe**'
  prefs: []
  type: TYPE_NORMAL
- en: So the data is there, but what if you have a regular computer at hand and still
    want to visualize the whole world at a resolution of 100m? The workaround I will
    show you here is relatively simple — I split the entire raster image into about
    a hundred smaller tiles so that my computer handles them well one by one, then
    use some image manipulation tricks to merge them into one image file.
  prefs: []
  type: TYPE_NORMAL
- en: However, before moving on — a quick note. There is also an option to downsample
    XArray arrays in the following way — however, I couldn’t find an appropriate downscaling
    that could have handled the whole data set. Additionally, I didn’t want to lose
    accuracy and wanted to see the entire data set in full glory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output — which is worth contracting to the previously plotted data_array:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/668929efc38e997f4bcdc636d5c3d16d.png)'
  prefs: []
  type: TYPE_IMG
- en: To split the whole raster image into grid segments, first, get its boundaries
    and define N as the step size. Then, create the list of image segment boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, iterate over each x and y step and create each image segment, where each
    image file is named after its position in the original grid. This loop may take
    a while.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Finally, if we have all the image segments, we can assemble them quickly with
    the following function. For this piece of code, I also asked for some hints from
    ChatGPT to speed things up, but as usual, it also needed some manual tweaks.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And the final result here, the entire globe mapped out:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0efb606c1cb483501ce587855c14fa7e.png)'
  prefs: []
  type: TYPE_IMG
- en: Global opulation distribution. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Visualizing and transforming WorldPop data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The second data source I would like to show you is the WorldPop population database,
    which has continents and countries separately at various resolutions. In this
    example, complementing the previous section’s continent and global levels, here
    I shoot for the level of countries and cities. For instance, I go with Germany
    and a resolution of 100m curated in 2020, and also show you how to carve out a
    city from the whole country and turn it into an easy-to-use vector format using
    GeoPandas.
  prefs: []
  type: TYPE_NORMAL
- en: '**3.1\. Visualizing WorldPop data**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the previous methods, we can again quickly visualize this raster file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This code block outputs the following visual:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/025026110d70435dc34653a953a2b93a.png)'
  prefs: []
  type: TYPE_IMG
- en: Population distribution of Germany. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: '**3.2\. Transforming WorldPop data**'
  prefs: []
  type: TYPE_NORMAL
- en: After visualizing the entire planet, the continent of Europe, and the country
    of Germany, I would like to get more hands-on with the city of Berlin and show
    you how to transform such raster data into vector format and manipulate it easily
    with GeoPandas. For this, I access the administrative boundaries of Berlin in
    a geojson format [here](https://maps.princeton.edu/catalog/tufts-berlin-bezirke-boroughs01).
  prefs: []
  type: TYPE_NORMAL
- en: This admin file contains the boroughs of Berlin, so first, I merge them into
    the city as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This code block outputs the following visual:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/23c8a66589a0d8b73224d55ae4cf5336.png)'
  prefs: []
  type: TYPE_IMG
- en: The admin boundaries of Berlin. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now turn the xarray into a Pandas DataFrame, extract the geometry information,
    and build a GeoPandas GeoDataFrame. One way to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, build a GeoDataFrame from this, focusing on Berlin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, visualize the population as vector data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This code block outputs the following visual:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/76d1f00120479f42c10e5111fce1b633.png)'
  prefs: []
  type: TYPE_IMG
- en: Population distribution of Berlin. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, here we have a standard GeoDataFrame with 100m resolution population
    levels assigned to each point geometry corresponding to each pixel in the raster
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, I explored two global population data sets based on various,
    which estimate population levels by combining various approximation, measurement,
    and modeling approaches at a remarkable spatial resolution of 100m using raster
    grids. This type of information is highly valuable for a wide range of applications
    in urban development and location intelligence, such as infrastructure planning,
    site selection, neighborhood profiling, and more. From the technical side, I showed
    examples at three spatial levels, covering the entire globe, then zooming in to
    countries, and finally, cities. While the methodology can handle even smaller
    resolutions, this all happened on a single laptop using powerful Python libraries
    like Xarray, DataShader, and GeoPandas.
  prefs: []
  type: TYPE_NORMAL
