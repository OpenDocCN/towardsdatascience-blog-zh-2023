- en: Build a Better Bar Chart with This Trick
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/build-a-better-bar-chart-with-this-trick-c66979cb17e1](https://towardsdatascience.com/build-a-better-bar-chart-with-this-trick-c66979cb17e1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (It’s really a seaborn scatter plot!)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@lee_vaughan?source=post_page-----c66979cb17e1--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----c66979cb17e1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c66979cb17e1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c66979cb17e1--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----c66979cb17e1--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c66979cb17e1--------------------------------)
    ·7 min read·Aug 26, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aa181f1216654de580fb8ce4d78dbe26.png)'
  prefs: []
  type: TYPE_IMG
- en: Part of an “Age of Congress” scatter plot (all images by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Whenever I need inspiration for effective visualizations, I browse [*The Economist*](https://www.economist.com/),
    the [*Visual Capitalist*](https://www.visualcapitalist.com/), or [*The Washington
    Post*](https://www.washingtonpost.com/). During one of these forays, I ran across
    an interesting infographic — similar to the one shown above — that plotted the
    age of each member of the US Congress against their generational cohort.
  prefs: []
  type: TYPE_NORMAL
- en: My first impression was that this was a *horizontal bar chart*, but closer inspection
    revealed that each bar was composed of multiple *markers*, making it a *scatter
    plot*. Each marker represented one member of Congress.
  prefs: []
  type: TYPE_NORMAL
- en: In this *Quick Success Data Science* project, we’ll recreate this attractive
    chart using Python, pandas, and seaborn. Along the way, we’ll unlock a cornucopia
    of marker types you may not know exist.
  prefs: []
  type: TYPE_NORMAL
- en: Dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because the United States has [*Age of Candidacy*](https://en.wikipedia.org/wiki/Age_of_candidacy_laws_in_the_United_States)
    laws, the birthdays of members of Congress are part of the public record. You
    can find them in multiple places, including the [*Biographical Directory of the
    United States Congress*](https://bioguideretro.congress.gov/) and [Wikipedia](https://en.wikipedia.org/wiki/List_of_current_members_of_the_United_States_House_of_Representatives).
  prefs: []
  type: TYPE_NORMAL
- en: For convenience, I’ve already compiled a CSV file of the names of the current
    members of Congress, along with their birthdays, branch of government, and party,
    and stored it in this [Gist](https://gist.github.com/rlvaugh/35069885b74ca52a63aab217863440e0).
  prefs: []
  type: TYPE_NORMAL
- en: The Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following code was written in Jupyter Lab and is described *by cell.*
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Assigning Constants for the Generational Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll annotate the plot so that generational cohorts, such as *Baby Boomers*
    and *Gen X*, are highlighted. The following code calculates the current age spans
    for each cohort and includes lists for generation names and highlight colors.
    Because we want to treat these lists as *constants*, we’ll capitalize the names
    and use an underscore as a prefix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Converting Birthdays into Ages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To calculate each member’s age, we first must convert a reference date (8/25/2023)
    and the DataFrame’s "Birthday" column to *datetime* format using pandas’ `to_datetime()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have compatible, "date aware" formats, we can generate an "Age"
    column by subtracting the two values, extracting the number of days, and then
    converting the days to years by dividing by 365.25.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/55d2d1c95c447e4a01fb3e4ad6b0cee5.png)'
  prefs: []
  type: TYPE_IMG
- en: The head of the initial DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: Counting the Ages of the Members
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll ultimately want to group the members by *party* and *branch of government*.
    That means we’ll need to generate *four* separate plots. (We’ll include the 3
    independents with the Democrats, with whom they caucus).
  prefs: []
  type: TYPE_NORMAL
- en: Unlike with a simple *bar chart*, we’ll need to know more than just the *total*
    number of, say, Republican senators with an age of 57 years. Because we want to
    plot a *separate mark* for *each member* in a specific age category, we need a
    *running* total. This way, we can use (count, age) values as the (x, y) coordinates
    in our scatterplot. So, the first Republican senator with an age of 57 will be
    assigned a “1” in a *count* column, the second senator will be assigned a “2,”
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: To manage this, we’ll first set up four DataFrame columns to hold the counts,
    then make four corresponding dictionaries to record the initial counts. We’ll
    use the `collections` module's `[defaultdict()](https://docs.python.org/3/library/collections.html#defaultdict-objects)`
    container, rather than a standard dictionary, as it will provide a *default* value
    for a key that doesn't exist, rather than raising an annoying `KeyError`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll iterate through our DataFrame, filtering on the “Branch” and “Party”
    columns. We’ll update the “Age” column each time we increment the dictionary.
    This allows us to keep a running count of matching ages.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we use *negative* values for the Democrat counts, as we want them
    to plot to the left of a central axis, while Republican values plot to the right.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d954bf603d4e418129001089ef2359c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Masking Zero Counts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We don’t want to plot zeroes, so we’ll use a mask to convert these values to
    `NaN` (*Not-a-Number*) values in our DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/be49d7a2b2bc26f1e92b930bd3df4639.png)'
  prefs: []
  type: TYPE_IMG
- en: Defining a Function to Make the Plot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned previously, we’ll make *four* plots. To avoid repeating code, we’ll
    encapsulate the plotting instructions into a reusable function.
  prefs: []
  type: TYPE_NORMAL
- en: The function will take as arguments a DataFrame, the name of a matplotlib axes
    object, the column to use as an x-coordinate, a color, and a title. we’ll turn
    *off* most of seaborn’s default settings, such as axis ticks and labels, so that
    our plot is as clean and sparse as possible.
  prefs: []
  type: TYPE_NORMAL
- en: An important component of this plot is the *rectangle* used as a marker for
    each congressional member (`marker=$\u25AC$`). This marker isn't part of the standard
    matplotlib [collection](https://matplotlib.org/stable/api/markers_api.html) but
    is part of the *STIX font symbols*. You can find a listing of these alternative
    markers [here](http://mirrors.ibiblio.org/CTAN/fonts/stix/doc/stix.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Plotting the Figure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following code sets up the figure and calls the `make_plot()` function four
    times. It finishes by adding a supertitle and a custom legend.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3f714add75e2daff6825673dbb227332.png)'
  prefs: []
  type: TYPE_IMG
- en: The final plot.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best infographics tell stories with a clean, eye-catching style. Just as
    really well-written Python code requires few to no comments, great infographics
    don’t require a lot of labels or annotations.
  prefs: []
  type: TYPE_NORMAL
- en: In this project, we used pandas to load and prepare the data and seaborn to
    generate a scatter plot that mimics a bar chart. A key feature of this plot was
    the use of a *STIX font symbol* for the rectangular markers.
  prefs: []
  type: TYPE_NORMAL
- en: For datasets with many low-count values, this scatter plot approach is more
    visually pleasing than a standard bar chart where many of the bars will be short
    in length. Additionally, representing each member with a distinct marker “personalizes”
    the data more than showing a single bar for multiple members.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for reading and please follow me for more *Quick Success Data Science*
    projects in the future.
  prefs: []
  type: TYPE_NORMAL
