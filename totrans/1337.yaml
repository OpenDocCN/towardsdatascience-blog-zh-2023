- en: Introducing Python’s Magic Methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/introducing-pythons-magic-methods-f443ed913703](https://towardsdatascience.com/introducing-pythons-magic-methods-f443ed913703)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PYTHON | PROGRAMMING
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A hands-on guide to exploiting the power of dunder functions for better programming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://david-farrugia.medium.com/?source=post_page-----f443ed913703--------------------------------)[![David
    Farrugia](../Images/082ed61e24c7c26a4ae1c77343a87824.png)](https://david-farrugia.medium.com/?source=post_page-----f443ed913703--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f443ed913703--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f443ed913703--------------------------------)
    [David Farrugia](https://david-farrugia.medium.com/?source=post_page-----f443ed913703--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f443ed913703--------------------------------)
    ·7 min read·May 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e1d07678085006aa654f8b8a1494a25c.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Matt Palmer](https://unsplash.com/@mattpalmer?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Python is an awesome programming language and as found by [GitHub](https://octoverse.github.com/2022/top-programming-languages),
    it’s also the second most popular language in 2022\. The most attractive benefits
    of Python is its strong community. It seems that Python has a package for any
    use-case that you might have.
  prefs: []
  type: TYPE_NORMAL
- en: Python has a bunch of cool features that are not common knowledge. If you’re
    interested to know more, feel free to go through my previous article on the subject.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/5-awesome-python-hidden-features-a0172e0bd98e?source=post_page-----f443ed913703--------------------------------)
    [## 5 Awesome Python Hidden Features — Part 1'
  prefs: []
  type: TYPE_NORMAL
- en: Take your coding skills to the next level with these cool hidden Python features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/5-awesome-python-hidden-features-a0172e0bd98e?source=post_page-----f443ed913703--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: In the vast and dynamic world of Python programming, there exists a unique set
    of functions that often go unnoticed by beginners, yet they provide a significant
    importance in the language’s ecosystem. These are the magic methods (also known
    as dunder functions).
  prefs: []
  type: TYPE_NORMAL
- en: Magic methods are a set of predefined methods in Python that provide special
    syntactic features. They are easily recognisable by their double underscores at
    the beginning and end, such as `__init__`, `__call__`, `__len__`, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Magic methods serve a crucial role in defining how objects of a class behave
    with respect to various Python operations. Essentially, they allow custom objects
    to behave similar to built-in Python types. The direct benefit here is enhancing
    Python’s consistency and intuitiveness.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will focus on and discuss the magic behind the powerful
    dunder function. We’ll explore their purpose and discuss their usage.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you’re a Python novice or a seasoned programmer, this guide aims to
    provide a comprehensive understanding of Dunder functions, making your Python
    coding experience more efficient and enjoyable.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, the magic of Python lies not just in its simplicity and versatility,
    but also in its powerful features like Dunder functions. So, let’s unravel the
    magic together!
  prefs: []
  type: TYPE_NORMAL
- en: The __init__
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Perhaps the most basic dunder function of them all is the `__init__`. This is
    the magic method that Python automatically calls whenever we create (or as the
    name implies, initialise) a new object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We create a class called `Pizza`. We set our `__init__` function to take in
    the size and toppings parameters that we specify at initialisation and set them
    as properties to our custom object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, `self` is used to represent the instance of the class. So when we say
    `self.size = size`, we''re saying: "Hey, this pizza object has an attribute size,
    and I want it to be whatever size I provided when I created the object."'
  prefs: []
  type: TYPE_NORMAL
- en: The __str__ and __repr__
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: __str__
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is Python’s magic method that allows us to define a desription for our
    custom object. It’s essentially answering the question:'
  prefs: []
  type: TYPE_NORMAL
- en: '"How would you describe this object to a friend over coffee?"'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When you print an object or convert it to a string using `str()`, Python checks
    to see if you've defined a `__str__` method for the class of that object.
  prefs: []
  type: TYPE_NORMAL
- en: If you have, it uses that method to convert the object to a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can extend our Pizza example to include a __str__ function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`__repr__`'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `__str__` function is more of an informal way of describing the properties
    of an object. On the other hand, `__repr__` is used to provide a more formal,
    detailed, and unambiguous description of the custom object.
  prefs: []
  type: TYPE_NORMAL
- en: If you call `repr()` on an object, or just type the object's name in the console,
    Python will look for a `__repr__` method.
  prefs: []
  type: TYPE_NORMAL
- en: If `__str__` isn't defined, Python will use `__repr__` as a backup when trying
    to print the object or convert it to a string. So it's often a good idea to at
    least define `__repr__`, even if you don't define `__str__`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how we could define `__repr__` for our pizza example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You see, `__repr__` gives you a string that you could run as a Python command
    to recreate the pizza object, while `__str__` gives you a more human-friendly
    description. Hope that helps you chew on these dunder methods a bit better!
  prefs: []
  type: TYPE_NORMAL
- en: The __add__
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python, we all know that you can add numbers together using the `+` operator,
    like `3 + 5`.
  prefs: []
  type: TYPE_NORMAL
- en: But if we want to add instances of some custom object? The `__add__` dunder
    function allows us to do just that. It gives us the ability to define the behaviour
    of the `+` operator on our custom objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the interest of consistency, suppost that we want to define `+` behaviour
    on our pizza example. Let’s say that whenever we add two or more pizzas together,
    it will automatically combine all of their toppings. Here’s how that might look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Similarly to the `__add__` dunder, we also can define other arithmetic functions
    such as `__sub__` (for subtraction using the `—` operator) and `__mul__` (for
    multiplication using the `*` operator).
  prefs: []
  type: TYPE_NORMAL
- en: The __len__
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This dunder method allows us to define what the `len()` function should return
    for our custom objects.
  prefs: []
  type: TYPE_NORMAL
- en: Python uses `len()` to get the length or size of a data structure like a list
    or a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the context of our Pizza class, we could say the “length” of a pizza is
    the number of toppings it has. Here’s how we could implement that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the `__len__` method, we just return the length of the `toppings` list. Now,
    `len(my_pizza)` will tell us how many toppings are on `my_pizza`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`__len__` should always return an integer, and it''s expected to be a non-negative
    value. Negative toppings would just be weird, wouldn''t they?'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The __iter__
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This dunder method allows your objects to be iterable — i.e., can be used in
    a for loop.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we also need to define the `__next__` function, This is used to
    define the behaviour that should return the next value in the iteration. Additionally,
    it also should signal to the iterable on the event that there are no more items
    in the sequence. We typically achieve this by raising a `StopIteration` exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our pizza example, let’s say we want to iterate over the toppings. We could
    make our Pizza class iterable by defining an `__iter__` method like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the for loop calls `__iter__`, which initialises a counter (`self.n`)
    and returns the pizza object itself (`self`).
  prefs: []
  type: TYPE_NORMAL
- en: Then, the for loop calls `__next__` to get each topping in turn.
  prefs: []
  type: TYPE_NORMAL
- en: When `__next__` has returned all the toppings, it raises a `StopIteration` exception,
    and the for loop now knows that there are no more toppings left and will therefore
    stop the iteration process.
  prefs: []
  type: TYPE_NORMAL
- en: Concluding Remarks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In conclusion, it’s evident that magic methods are truly at the heart of the
    Python language.
  prefs: []
  type: TYPE_NORMAL
- en: They form the foundation for many of Python’s built-in operations, giving us
    the developers the necessary freedom to personalise the behavior of our objects
    in a manner that aligns with the rest of the language’s usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, we disucssed how Dunder functions such as `__init__`, `__iter__`,
    and `__len__` can be exploited to meet our requirements. You can find a full list
    of all the dunder methods allowed by python here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://mathspp.com/blog/pydonts/dunder-methods?source=post_page-----f443ed913703--------------------------------)
    [## mathspp - take your Python 🐍 to the next level 🚀'
  prefs: []
  type: TYPE_NORMAL
- en: This is an introduction to dunder methods in Python, to help you understand
    what they are and what they are for. (If…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: mathspp.com](https://mathspp.com/blog/pydonts/dunder-methods?source=post_page-----f443ed913703--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '**Did you enjoy this post? For $5/month, you can become a member to unlock
    unlimited access to Medium. You will be directly supporting me and all your other
    favourite writers on Medium. So huge thanks for that!**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://david-farrugia.medium.com/membership?source=post_page-----f443ed913703--------------------------------)
    [## Join Medium with my referral link - David Farrugia'
  prefs: []
  type: TYPE_NORMAL
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: david-farrugia.medium.com](https://david-farrugia.medium.com/membership?source=post_page-----f443ed913703--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Want to Get in Touch?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I would love to hear your thoughts on the topic, or anything AI and Data.
  prefs: []
  type: TYPE_NORMAL
- en: Drop me an email at ***davidfarrugia53@gmail.com*** should you wish to get in
    touch.
  prefs: []
  type: TYPE_NORMAL
- en: '[Linkedin](https://www.linkedin.com/in/david-farrugia/)'
  prefs: []
  type: TYPE_NORMAL
