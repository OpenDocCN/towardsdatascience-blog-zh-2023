["```py\n# Identify outcome variable and treatment assignment variable\n\noutcome_var = 'ngr'\ntreatment_var = 'group'\n\n# Identify covariates\n\ncovariates = ['age', 'gender', 'income', 'education', 'location', 'device_type', 'browser']\n```", "```py\n+--------+-----+------+--------+---------+------------+------------+------------+------------+\n| UserID | Age | Gender | Income | Education |   Device   |  Location  |  Browser   | NGR (USD)  |\n+--------+-----+------+--------+-----------+------------+------------+------------+------------+\n|   1    |  23 |   M  |  45000 |   College |  iPhone X  |  New York  |  Safari    |    120     |\n|   2    |  45 |   F  |  78000 |   College |  Galaxy S9 |  San Fran  |  Chrome    |    80      |\n|   3    |  31 |   M  |  65000 |  Graduate |  iPhone 8  |   Boston   |  Firefox   |    50      |\n|   4    |  28 |   F  |  38000 |  Graduate |  iPhone 7  |   Austin   |  Chrome    |    200     |\n|   5    |  52 |   M  |  95000 |  Graduate |  Galaxy S8 |   Seattle  |  Firefox   |    150     |\n|   6    |  39 |   F  |  58000 |  Graduate |  iPhone X  |  New York  |  Safari    |    90      |\n|   7    |  33 |   M  |  51000 |   College |  iPhone 8  |  San Fran  |  Chrome    |    70      |\n|   8    |  26 |   F  |  32000 |   College |  Galaxy S9 |   Boston   |  Firefox   |    100     |\n|   9    |  41 |   M  |  73000 |  Graduate |  iPhone 7  |   Austin   |  Safari    |    80      |\n|   10   |  36 |   F  |  68000 |   College |  Galaxy S8 |   Seattle  |  Chrome    |    120     |\n+--------+-----+------+--------+-----------+------------+------------+------------+------------+\n```", "```py\nimport statsmodels.api as sm\n\n# Fit logistic regression model to calculate propensity scores\n\nX = sm.add_constant(ab_test_df[covariates])\ny = ab_test_df[treatment_var]\nmodel = sm.Logit(y, X)\nresult = model.fit()\npropensity_scores = result.predict(X)\n```", "```py\n+--------+-----+------+--------+-----------+------------+------------+------------+------------+----------------+\n| UserID | Age | Gender | Income | Education |   Device   |  Location  |  Browser   | NGR (USD)  | Propensity_Score|\n+--------+-----+------+--------+-----------+------------+------------+------------+------------+----------------+\n|   1    |  23 |   M  |  45000 |   College |  iPhone X  |  New York  |  Safari    |    120     |      0.35      |\n|   2    |  45 |   F  |  78000 |   College |  Galaxy S9 |  San Fran  |  Chrome    |    80      |      0.75      |\n|   3    |  31 |   M  |  65000 |  Graduate |  iPhone 8  |   Boston   |  Firefox   |    50      |      0.55      |\n|   4    |  28 |   F  |  38000 |  Graduate |  iPhone 7  |   Austin   |  Chrome    |    200     |      0.30      |\n|   5    |  52 |   M  |  95000 |  Graduate |  Galaxy S8 |   Seattle  |  Firefox   |    150     |      0.85      |\n|   6    |  39 |   F  |  58000 |  Graduate |  iPhone X  |  New York  |  Safari    |    90      |      0.65      |\n|   7    |  33 |   M  |  51000 |   College |  iPhone 8  |  San Fran  |  Chrome    |    70      |      0.60      |\n|   8    |  26 |   F  |  32000 |   College |  Galaxy S9 |   Boston   |  Firefox   |    100     |      0.45      |\n|   9    |  41 |   M  |  73000 |  Graduate |  iPhone 7  |   Austin   |  Safari    |    80      |      0.70      |\n|   10   |  36 |   F  |  68000 |   College |  Galaxy S8 |   Seattle  |  Chrome    |    120     |      0.80      |\n+--------+-----+------+--------+-----------+------------+------------+------------+------------+----------------+\n```", "```py\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.preprocessing import StandardScaler\n\n# Standardize covariates for matching\n\nX_scaled = StandardScaler().fit_transform(ab_test_df[covariates])\n\n# Match users based on propensity scores\n\nnbrs = NearestNeighbors(n_neighbors=1, algorithm='ball_tree').fit(propensity_scores.values.reshape(-1, 1))\ndistances, indices = nbrs.kneighbors(propensity_scores.values.reshape(-1, 1))\nmatched_df = ab_test_df.loc[indices.flatten()]\n```", "```py\nmatched_df.groupby(treatment_var).mean()[covariates + [outcome_var]]\n```", "```py\nmatched_df.groupby(treatment_var).mean()[outcome_var].diff()[1]\n```", "```py\nab_test_df.groupby(treatment_var).mean()[outcome_var].diff()[1]\n```", "```py\nATE (USD): 1.8\n```", "```py\n ATE (USD): 2.2\n```"]