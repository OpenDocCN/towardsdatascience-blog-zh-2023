["```py\n# data_processing.py\nimport pandas as pd\nfrom pandas import DataFrame\n\ndef read_raw_data(file_path: str, chunk_size: int = 1000) -> DataFrame:\n    csv_reader = pd.read_csv(file_path, chunksize=chunk_size)\n    processed_chunks = []\n\n    for chunk in csv_reader:\n        chunk = chunk.loc[chunk[\"Order ID\"] != \"Order ID\"].dropna()\n        processed_chunks.append(chunk)\n\n    return pd.concat(processed_chunks, axis=0)\n\ndef split_purchase_address(df_to_process: DataFrame) -> DataFrame:\n    df_address_split = df_to_process[\"Purchase Address\"].str.split(\n        \",\", n=3, expand=True\n    )\n    df_address_split.columns = [\"Street Name\", \"City\", \"State and Postal Code\"]\n\n    df_state_postal_split = (\n        df_address_split[\"State and Postal Code\"]\n        .str.strip()\n        .str.split(\" \", n=2, expand=True)\n    )\n    df_state_postal_split.columns = [\"State Code\", \"Postal Code\"]\n\n    return pd.concat([df_to_process, df_address_split, df_state_postal_split], axis=1)\n\ndef extract_product_pack_information(df_to_process: DataFrame) -> DataFrame:\n    df_to_process[\"Pack Information\"] = (\n        df_to_process[\"Product\"].str.extract(r\".*\\((.*)\\).*\").fillna(\"Not Pack\")\n    )\n\n    return df_to_process\n\ndef one_hot_encode_product_column(df_to_process: DataFrame) -> DataFrame:\n    return pd.get_dummies(df_to_process, columns=[\"Product\"])\n\ndef process_raw_data(file_path: str, chunk_size: int) -> DataFrame:\n    df = read_raw_data(file_path=file_path, chunk_size=chunk_size)\n\n    return (\n        df.pipe(split_purchase_address)\n        .pipe(extract_product_pack_information)\n        .pipe(one_hot_encode_product_column)\n    )\n```", "```py\nimport pandas as pd\nimport numpy as np\nimport pytest\nfrom pandas import DataFrame\nfrom data_processing import (\n    read_raw_data,\n    split_purchase_address,\n    extract_product_pack_information,\n    one_hot_encode_product_column,\n)\nfrom pandas.testing import assert_series_equal, assert_index_equal\n```", "```py\ndef test_read_raw_data():\n    \"\"\"Testing output of raw table read in is DataFrame\"\"\"\n    test_df = read_raw_data(file_path=\"Updated_sales.csv\", chunk_size=1000)\n    assert isinstance(test_df, DataFrame)  # checking if it's a DataFrame\n```", "```py\ndef test_pipe_functions_output_df():\n    \"\"\"Testing output of raw table read in is DataFrame\"\"\"\n    test_df = read_raw_data(file_path=\"Updated_sales.csv\", chunk_size=1000)\n    all_pipe_functions = [\n        split_purchase_address,\n        extract_product_pack_information,\n        one_hot_encode_product_column,\n    ]\n    for function in all_pipe_functions:\n        assert isinstance(function(test_df), DataFrame)\n```", "```py\ntest_df = read_raw_data(file_path=\"Updated_sales.csv\", chunk_size=1000)\n```", "```py\n@pytest.fixture\ndef test_df() -> DataFrame:\n    return read_raw_data(file_path=\"Updated_sales.csv\", chunk_size=1000)\n\ndef test_read_raw_data(test_df):\n    \"\"\"Testing output of raw table read in is DataFrame\"\"\"\n    assert isinstance(test_df, DataFrame)  # checking if it's a DataFrame\n\ndef test_pipe_functions_output_df(test_df):\n    \"\"\"Testing output of raw table read in is DataFrame\"\"\"\n    all_pipe_functions = [\n        split_purchase_address,\n        extract_product_pack_information,\n        one_hot_encode_product_column,\n    ]\n    for function in all_pipe_functions:\n        assert isinstance(function(test_df), DataFrame)\n```", "```py\ndef test_split_purchase_address(test_df):\n    \"\"\"Testing multiple columns in output and rows unchanged\"\"\"\n    split_purchase_address_df = split_purchase_address(test_df)\n    assert len(split_purchase_address_df.columns) > len(test_df.columns)\n    assert split_purchase_address_df.index.__len__() == test_df.index.__len__()\n    assert_index_equal(split_purchase_address_df.index, test_df.index)  # using the Pandas testing\n```", "```py\ndef test_extract_product_pack_information(test_df):\n    \"\"\"Test specific output column in new DataFrame\"\"\"\n    product_pack_df = extract_product_pack_information(test_df)\n    assert \"Pack Information\" in product_pack_df.columns\n```", "```py\ndef test_one_hot_encode_product_column(test_df):\n    \"\"\"Testing if column types are correct\"\"\"\n    encoded_df = one_hot_encode_product_column(test_df)\n    encoded_columns = [column for column in encoded_df.columns if \"_\" in column]\n    for encoded_column in encoded_columns:\n        assert encoded_df[encoded_column].dtype == np.dtype(\"uint8\")\n```", "```py\ndef test_process_raw_data(test_df):\n    \"\"\"Testing the final output DataFrame as a final sanity check\"\"\"\n    processed_df = (\n        test_df.pipe(split_purchase_address)\n        .pipe(extract_product_pack_information)\n        .pipe(one_hot_encode_product_column)\n    )\n\n    # check if all original columns are still in DataFrame\n    for column in test_df.columns:\n        if column not in processed_df.columns:\n            raise AssertionError(f\"COLUMN -- {column} -- not in final DataFrame\")\n\n    assert all(\n        element in list(test_df.columns) for element in list(processed_df.columns)\n    )\n\n    # check if final DataFrame doesn't have duplicates\n    assert assert_series_equal(\n        processed_df[\"Order ID\"].drop_duplicates(), test_df[\"Order ID\"]\n    )\n```", "```py\npytest --verbose\n```"]