- en: How to Create a Custom NER in Spacy 3.5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-create-a-custom-ner-in-spacy-3-5-c9942aab3c91](https://towardsdatascience.com/how-to-create-a-custom-ner-in-spacy-3-5-c9942aab3c91)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Natural Language Processing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A quick tutorial on extracting custom entities from a text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://alod83.medium.com/?source=post_page-----c9942aab3c91--------------------------------)[![Angelica
    Lo Duca](../Images/45aa2e2e504bb3af6d3b8009dc6f030e.png)](https://alod83.medium.com/?source=post_page-----c9942aab3c91--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c9942aab3c91--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c9942aab3c91--------------------------------)
    [Angelica Lo Duca](https://alod83.medium.com/?source=post_page-----c9942aab3c91--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c9942aab3c91--------------------------------)
    ·5 min read·Apr 25, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/82aa2292c77d5ad1b40112b7c88ed4f5.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Max Chen](https://unsplash.com/ja/@maxchen2k?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Are you tired of using generic named entity recognition (NER) models that don’t
    quite fit your specific needs? Look no further! This article will guide you through
    creating a custom NER in Spacy 3.5.
  prefs: []
  type: TYPE_NORMAL
- en: With a few tweaks and training data, you can have a model that accurately identifies
    entities specific to your domain or use case. Say goodbye to one-size-fits-all
    NER models and hello to customized precision. Let’s dive in!
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover:'
  prefs: []
  type: TYPE_NORMAL
- en: A very quick introduction to spaCy and its competitors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Problem setting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a training set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating and training the model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing your model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A very quick introduction to spaCy and its competitors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If it’s the first time you’ve heard of spaCy, know it’s a popular open-source
    library for natural language processing (NLP) in Python. It provides efficient
    and fast NLP capabilities, such as tokenization, part-of-speech tagging, entity
    recognition, dependency parsing, and more. SpaCy’s main strength lies in its speed
    and memory efficiency, making it an ideal choice for large-scale text processing
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some alternatives to spaCy include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NLTK** (Natural Language Toolkit), one of the oldest and most comprehensive
    NLP libraries, offers a wide range of tools for text analysis, including sentiment
    analysis, stemming, and lemmatization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stanford CoreNLP** supports multiple languages, including English, German,
    and French, with robust features such as named entity recognition and co-reference
    resolution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spark NLP** provides production-grade, scalable, and trainable versions of
    the latest NLP research for Python, Java, and Scala.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Problem setting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s imagine we have a text from which we want to extract entities (people,
    places, etc.). If the entities are classic, such as people, places, dates, etc.,
    we can easily use a pre-trained NER made available by spaCy.
  prefs: []
  type: TYPE_NORMAL
- en: However, a pre-trained generic model can no longer extract specific entities
    from our text. Examples of specific entities are dog breeds, the names of bacteria,
    etc. We need a model adapted to our domain to recognize this entity type.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows the workflow to build a new custom NER model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6fab28d05d87bf669186171a7cab85a8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: We start with a generic, already **pre-trained NER model** and then adapt it
    to our domain, providing the model with additional training data.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the first thing to do is to build the training set with the texts
    annotated exactly with the entities to be extracted. We then build the model and
    train it with our annotated texts.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we use the new data model to predict new texts.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s see how to implement the described workflow in Python and spaCy practically.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a training set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start by defining the entity types you want to extract. For example, you could
    extract the animal type: dog, cat, horse, etc. Then, split your dataset into training
    and test sets. Annotate only the training set.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the steps described below to generate a training set you can use as
    input to spaCy:'
  prefs: []
  type: TYPE_NORMAL
- en: First, annotate your text. Use [https://tecoholic.github.io/ner-annotator/](https://tecoholic.github.io/ner-annotator/)
    to perform the annotation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Export the annotated file, say it `annotations.json`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open the `annotations.json` file and remove the first part, where there are
    the classes. Keep the JSON consistent (remove `{}` braces if needed). Save the
    file. In the example below, remove the `classes`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/fa8136c1b7f1660ad16e3f70f6192e28.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Convert the JSON file to the spaCy format. Use the following code, originally
    implemented by [Zachary Lim](https://medium.com/u/e7a41934a7cc?source=post_page-----c9942aab3c91--------------------------------)
    in his [article](/using-spacy-3-0-to-build-a-custom-ner-model-c9256bea098).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now your training set is stored in a file named `train.spacy`.
  prefs: []
  type: TYPE_NORMAL
- en: Generating and training the model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To generate the training model, follow the steps described below:'
  prefs: []
  type: TYPE_NORMAL
- en: Point to [https://spacy.io/usage/training](https://spacy.io/usage/training)
    and fill in the form to build your `config_base.cfg` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/cf165b3a6c69ddd426c5238cc2497d9d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image extracted from the Spacy website
  prefs: []
  type: TYPE_NORMAL
- en: Download the file by clicking on the bottom-right download button. Save the
    model in the same folder as the `annotations.json`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Download the base model you will use to train your data. Open `config_base.cfg`
    to see which pre-trained model you are using. The following example downloads
    the `it_core_news_lg model`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to initialize the model:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Train the model:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The command requires a `dev.spacy` file containing the test set. If you don’t
    have a test set, use your training set (`train.spacy`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The training process may require some time. At the end of the training process,
    you should see an output similar to the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/29ace0d23d2fdaf640f561479d8dcd9e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Testing your model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now your model is saved in the `output/model-best` directory. Load it as follows
    in a Python script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now use your just-trained model to extract some entities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You have just learned how to train your custom model for NER
    in spaCy!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom NER in Spacy 3.5 is an easy process that requires only the
    right setup and coding knowledge. Now that you know how to create a custom NER
    with Python and Spacy, you can start developing your models for whatever application
    you need them for.
  prefs: []
  type: TYPE_NORMAL
- en: Related articles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[](/how-to-install-spark-nlp-5fcd36fab378?source=post_page-----c9942aab3c91--------------------------------)
    [## How to Install Spark NLP'
  prefs: []
  type: TYPE_NORMAL
- en: A step-by-step tutorial on how to make Spark NLP work on your local computer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-install-spark-nlp-5fcd36fab378?source=post_page-----c9942aab3c91--------------------------------)
    [](/how-to-add-new-data-to-a-pretrained-model-in-scikit-learn-ce16911afe33?source=post_page-----c9942aab3c91--------------------------------)
    [## How to Add New Data to a Pretrained Model in Scikit-learn
  prefs: []
  type: TYPE_NORMAL
- en: A step-by-step tutorial on how to use warm_start=True and partial_fit() in scikit-learn
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-add-new-data-to-a-pretrained-model-in-scikit-learn-ce16911afe33?source=post_page-----c9942aab3c91--------------------------------)
    [](https://heartbeat.comet.ml/how-to-use-the-comet-registry-to-track-your-machine-learning-models-4b18e7f61500?source=post_page-----c9942aab3c91--------------------------------)
    [## How to Use the Comet Registry to Track Your Machine Learning Models
  prefs: []
  type: TYPE_NORMAL
- en: A tutorial on the power of the Comet Registry
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: heartbeat.comet.ml](https://heartbeat.comet.ml/how-to-use-the-comet-registry-to-track-your-machine-learning-models-4b18e7f61500?source=post_page-----c9942aab3c91--------------------------------)
  prefs: []
  type: TYPE_NORMAL
