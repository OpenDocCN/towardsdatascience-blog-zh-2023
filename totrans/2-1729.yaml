- en: 'Python Meets Pawn 2: Clustering Chess Grandmasters based on their Openings'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/python-meets-pawn-2-clustering-chess-grandmasters-based-on-their-openings-68440fc9f9b1](https://towardsdatascience.com/python-meets-pawn-2-clustering-chess-grandmasters-based-on-their-openings-68440fc9f9b1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this blog, I will guide you through the process of analyzing Chess Grandmasters’
    openings using Python.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://mikayilahad.medium.com/?source=post_page-----68440fc9f9b1--------------------------------)[![Mikayil
    Ahadli](../Images/fdef02ad48534456e2bd67e6f22d7705.png)](https://mikayilahad.medium.com/?source=post_page-----68440fc9f9b1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----68440fc9f9b1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----68440fc9f9b1--------------------------------)
    [Mikayil Ahadli](https://mikayilahad.medium.com/?source=post_page-----68440fc9f9b1--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----68440fc9f9b1--------------------------------)
    ·7 min read·Dec 22, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ad0563bab95de27dccaf51c4c6936779.png)'
  prefs: []
  type: TYPE_IMG
- en: photo created by Midjourney
  prefs: []
  type: TYPE_NORMAL
- en: '[What questions am I answering](#7230)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Part 1: Getting data](#1af5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Part 2: Feature Engineering](#f93b)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Part 3: Clustering](#9291)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Results and interesting facts](#0426)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What questions am I answering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'My passion for chess is no secret, and [here](https://medium.com/@mikayil.ahadli/python-meets-pawn-decoding-my-chess-openings-with-data-analysis-097a34cef20a),
    I’ve shared analyses of my own game openings. But today, I venture into a new
    territory: the world of Grandmasters. What openings do they commonly use? How
    varied are their choices? I’m interested in the distribution of these openings
    among different Grandmasters. Do top players favor similar openings? Is it possible
    to group them based on their preferences? I do not know — let’s find out!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 1: Getting data'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A great aspect of chess is the accessibility of its data. There are many sources,
    including [pgnmentor](https://pgnmentor.com/files.html), where you can view and
    download data about openings and players (for free). This data, updated several
    times a year, includes games in Portable Game Notation (PGN), the most popular
    format for chess games. Since downloads are individual, I chose 11 well-known
    Grandmasters to download and analyze their openings. Please note, this list is
    subjective and includes some of my favorite Grandmasters:'
  prefs: []
  type: TYPE_NORMAL
- en: Shakhriyar Mamedyarov
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Teimour Radjabov
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hikaru Nakamura
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Magnus Carlsen
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fabiano Caruana
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ding Liren
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ian Nepomniachtchi
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Viswanathan Anand
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Anish Giri
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Vugar Gashimov
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Vladimir Kramnik
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The complete code will be provided at the end of the blog. For parsing PGN files,
    I utilized the PGN module from the Python library called ‘Chess’.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function that I have used for parsing data looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Below is the table of how the table of my parsed and combined data appears.
    I will utilize the existing “ECO” column, indicating the opening played in each
    game. The ECO code in chess refers to the “Encyclopaedia of Chess Openings,” a
    classification system used to categorize the various openings in chess. Each code,
    consisting of a letter followed by two numbers, like B12 or E97, uniquely identifies
    a specific opening or variation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d2a51a4164eb873a6b6134180e637f3b.png)'
  prefs: []
  type: TYPE_IMG
- en: Parsed dataset (Image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Grandmasters possess thousands of games featuring 484 unique combined ECO codes.
    Given that there are 500 unique ECO codes, these 11 grandmasters have almost utilized
    the entire range in their careers. However, how many unique openings has each
    one played? Let’s examine the following graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c97ca8b6fe181c64b5fb0dcfe39a427e.png)'
  prefs: []
  type: TYPE_IMG
- en: Unique openings graph (Image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: These numbers are highly correlated with the number of games they have in my
    dataset, but in general, the graph indicates that Grandmasters employ a wide variety
    of openings in their games.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: Feature Engineering'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s begin by looking at the most favored openings for each Grandmaster:'
  prefs: []
  type: TYPE_NORMAL
- en: 'B90 — Sicilian Defense, Najdorf variation : *Anand, Giri, Nepomniachtchi*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'D37 — Queen’s Gambit Declined : *Carlsen, Mamedyarov, Radjabov*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'C42 — Russian Game : *Gashimov, Kramnik*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A05 — King’s Indian Attack : *Nakamura*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'C65 — Spanish Game, Berlin Defense : *Caruana*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'E60 — Gruenfeld and Indian Game : *Ding*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I guess it’s unsurprising to see a Russian Grandmaster favor the Russian Game.
    Gashimov also favored the Russian game, indicating the Soviet Chess school’s strong
    influence in Azerbaijan. Noticing some patterns based on their favorite openings
    is intriguing. However, to achieve a more detailed and segregated grouping, I
    will apply clustering techniques, considering a range of other openings as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s examine the distribution of openings for each Grandmaster. I pivoted
    the dataset with the Grandmaster as the index, using unique ECO codes for columns
    and the number of games as values. Below graph is the example for Magnus Carlsen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/509dbeb6a8dd70c80c51d6326ccc9c4e.png)'
  prefs: []
  type: TYPE_IMG
- en: Distribution of openings for Magnus (Image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Despite the variety of openings played by the Grandmasters, it’s evident that
    some openings have a clear advantage over others. Most Grandmasters seem to favor
    about five particular openings, which influenced my decision to focus on a dataframe
    featuring the top 5 openings.
  prefs: []
  type: TYPE_NORMAL
- en: 'For clustering, I chose to test two dataframes: the pivoted proportion and
    the top 5 openings. The best results were achieved using the latter one, which
    I’ll explain in detail below. For more options and detailed insights, please refer
    to the complete code provided at the end. In the top 5 openings dataframe, I employed
    one-hot encoding. Among the 11 Grandmasters, there were 24 unique ECO codes in
    the top 5 selections. The binary values in this dataframe indicate whether a specific
    ECO code is among the top 5 for each Grandmaster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dcc18752f2e0a111fb2dc776d7052bc4.png)'
  prefs: []
  type: TYPE_IMG
- en: Top5 dataframe (Image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: The table below shows the top 5 ECOs for each Grandmaster. We can already see
    some patterns, but clustering will help us distinguish them more effectively.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ce3bcaa6588ee4151918da6de1de38e7.png)'
  prefs: []
  type: TYPE_IMG
- en: Top 5 openings result for each GM (Image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 3: Clustering'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The top 5 favorite openings dataset contained 24 columns. To simplify it, I
    applied PCA (Principal Component Analysis). This method helps in reducing data
    dimensions while preserving crucial information. While the first principal component
    provided good results, I opted for two components. Why? They offered nearly the
    same insight and, importantly, made visualization easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'For grouping grandmasters, I used K-means clustering. It’s like sorting books
    into genres. First, I chose a number of clusters, or ‘genres’. Each grandmaster’s
    opening style is then matched to the closest cluster, like assigning books to
    the most fitting genre. The process keeps adjusting: cluster centers, representing
    the common style of each group, are recalculated and grandmasters are reassorted
    accordingly. This repeats until the clusters accurately represent different playing
    styles. Through K-means, distinct patterns in chess openings emerged, highlighting
    varied strategies among the grandmasters.'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right number of clusters is key in any clustering project. For
    this, I used the elbow method. It’s a straightforward approach to determine the
    ideal number of clusters for grouping data. You plot a graph where each point
    represents a different number of clusters and calculate the “within-cluster sum
    of squares” (WCSS) for each. WCSS measures how closely data points in a cluster
    are to the cluster center. On the graph, there’s a point where increasing clusters
    doesn’t significantly reduce WCSS. This point, resembling an elbow, indicates
    the best number of clusters. It ensures a balance between a manageable number
    of clusters and closely grouped data points. The below graph demonstrates that
    the optimal number is 4 in our case.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f0801d0d3c884f547ad6f04fbe410a8d.png)'
  prefs: []
  type: TYPE_IMG
- en: Elbow method to decide the best number of clusters (Image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: With the number of clusters determined, I clustered the grandmasters. To assess
    the effectiveness of my clustering, I used the silhouette score. This score measures
    how similar an object is to its own cluster compared to other clusters. A high
    silhouette score indicates well-clustered data. The score ranges between -1 and
    1, and I achieved a score of 0.69, indicating effective clustering.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, I visualized the clustered data and the centroids (the ‘center’ of
    each cluster) in a two-dimensional space. This step turned complex data into an
    easily understandable and visually appealing format, perfect for seeing patterns
    and differences at a glance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4202a1cabcada5f97453547a99a7e7d2.png)'
  prefs: []
  type: TYPE_IMG
- en: Result of analysis (Image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Results and interesting facts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'My analysis revealed that Grandmasters exhibit a broad repertoire in chess
    openings, yet they have certain preferences that differ among them. Clustering
    them based on these openings was not only feasible but also yielded intriguing
    insights. For instance, Azerbaijani chess legends Mamedyarov and Radjabov were
    grouped together. Interestingly, Anand, Giri, and Caruana were also closely clustered.
    A closer look at their top 5 favorite openings confirms these results. Remarkably,
    Anand and Giri share the exact same top 5 openings. Could this suggest Giri’s
    admiration for Anand? Indeed, after researching on the internet, I discovered
    that Giri greatly admired Anand and learned from his games. Below are those openings:'
  prefs: []
  type: TYPE_NORMAL
- en: B90 — Sicilian Defense, Najdorf variation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C50 — Italian game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C42 — Russian Game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C65 — Spanish Game, Berlin Defense
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C67 — Spanish Game, Berlin Defense, other variations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complete code with Jupyter notebook file can be found [here](https://github.com/MikayilAhad/medium_articles/blob/main/clustering_chess_GMs_basedon_openings/grandmasters_analysis.ipynb).
  prefs: []
  type: TYPE_NORMAL
