["```py\ndef add(x, y):\n    return x + y\n\nprint(add(2, 3))\nprint(add(\"str1\", \"str2\"))\n```", "```py\nint add(int x, int y) {\n    return x + y;\n}\n\nstd::string add(std::string x, std::string y) {\n    return x + y;\n}\n\nint main()\n{\n    std::cout<<add(2, 3);\n    std::cout << add(\"str1\", \"str2\");\n    return 0;\n}\n```", "```py\nfrom abc import ABC, abstractmethod\n\nclass Animal(ABC):\n    @abstractmethod\n    def feed(self) -> None:\n        pass\n\nclass Duck(Animal):\n    def feed(self) -> None:\n        print(\"Duck eats\")\n\ndef feed(animal: Animal) -> None:\n    animal.feed()\n\nduck = Duck()\nfeed(duck)\n```", "```py\nfrom typing import Protocol\n\nclass Animal(Protocol):\n    def feed(self) -> None:\n        pass\n\nclass Duck:\n    def feed(self) -> None:\n        print(\"Duck eats\")\n\ndef feed(animal: Animal) -> None:\n    animal.feed()\n\nduck = Duck()\nfeed(duck)\n```", "```py\nfrom typing import Protocol\n\nclass Animal(Protocol):\n    def feed(self) -> None:\n        pass\n\nclass Bird(Animal, Protocol):\n    def fly(self) -> None:\n        pass\n\nclass Duck:\n    def feed(self) -> None:\n        print(\"Duck eats\")\n\n    def fly(self) -> None:\n        print(\"Duck flies\")\n\ndef feed(animal: Animal) -> None:\n    animal.feed()\n\ndef feed_bird(bird: Bird) -> None:\n    bird.feed()\n    bird.fly()\n\nduck = Duck()\nfeed_bird(duck)\n```", "```py\nfrom typing import Iterable\n\nclass SquareIterator:\n    def __init__(self, n: int) -> None:\n        self.i = 0\n        self.n = n\n\n    def __iter__(self) -> \"SquareIterator\":\n        return self\n\n    def __next__(self) -> int:\n        if self.i < self.n:\n            i = self.i\n            self.i += 1\n            return i**2\n        else:\n            raise StopIteration()\n\ndef iterate(items: Iterable[int]) -> None:\n    for x in items:\n        print(x)\n\niterator = SquareIterator(5)\niterate(iterator)\n```"]