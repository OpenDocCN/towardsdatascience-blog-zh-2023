["```py\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.model_selection import train_test_split\n\n# Generate labels\nis_spam = np.concatenate(\n    [\n        np.random.choice([0, 1], p=[0.9, 0.1], size=200),\n        np.random.choice([0, 1], p=[0.8, 0.2], size=200),\n        np.random.choice([0, 1], p=[0.6, 0.4], size=200),\n        np.random.choice([0, 1], p=[0.4, 0.6], size=200),\n        np.random.choice([0, 1], p=[0.1, 0.9], size=200),\n    ]\n)\n\n# Generate features\nfeature_1 = [np.random.normal(0, 1.5, 1) if x == 0 else np.random.normal(3, 1.5, 1) for x in is_spam]\nfeature_2 = [np.random.normal(0, 2.5, 1) if x == 0 else np.random.normal(3, 2.5, 1) for x in is_spam]\n\ndf = pd.DataFrame(\n    {\n        'is_spam': is_spam,\n        'feature_1': feature_1,\n        'feature_2': feature_2,\n    }\n)\n\n############################################################\n# Train classifier\nX = df[['feature_1', 'feature_2']]\ny = df['is_spam']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y)\n\nmod = LogisticRegression()\nmod.fit(X_train, y_train)\n\n############################################################\n# Generate predictions\npreds = mod.predict_proba(X_test)[:,1]\nprecision, recall, thresholds = precision_recall_curve(y_test, preds)\n\ndf_pred = pd.DataFrame(\n    {\n        'precision': precision[:-1],\n        'recall': recall[:-1],\n        'threshold': thresholds,\n    }\n)\n```"]