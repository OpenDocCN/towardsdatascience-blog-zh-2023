- en: 'Matplotlib Tutorial: Let’s Take Your Country Maps to Another Level'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/matplotlib-tutorial-lets-take-your-country-maps-to-another-level-a6bd1f40fff](https://towardsdatascience.com/matplotlib-tutorial-lets-take-your-country-maps-to-another-level-a6bd1f40fff)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Matplotlib Tutorial
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How to draw beautiful maps with Python and Matplotlib
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@oscarleo?source=post_page-----a6bd1f40fff--------------------------------)[![Oscar
    Leo](../Images/7733c9147bad2875a35155fca3903aa8.png)](https://medium.com/@oscarleo?source=post_page-----a6bd1f40fff--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a6bd1f40fff--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a6bd1f40fff--------------------------------)
    [Oscar Leo](https://medium.com/@oscarleo?source=post_page-----a6bd1f40fff--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a6bd1f40fff--------------------------------)
    ·10 min read·Sep 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d6439d0845f481950b5a256c886b44bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Map created by the author
  prefs: []
  type: TYPE_NORMAL
- en: Yes, I created the map above using Matplotlib, and I’ll show you how in this
    tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: The idea is to create a reusable and flexible function that allows me to instantly
    draw a beautiful map of any area.
  prefs: []
  type: TYPE_NORMAL
- en: With such a function, I can save a ton of time when I want to create charts
    or infographics with a geographical component.
  prefs: []
  type: TYPE_NORMAL
- en: I also want to show the power of reusable code since many programmers working
    with data visualization forget about such best practices.
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial contains every single line of code you need to create the map
    of Africa above.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Download geo data'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The only thing you need to do before you can start the tutorial is to download
    geo data from here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://datacatalog.worldbank.org/search/dataset/0038272/World-Bank-Official-Boundaries](https://datacatalog.worldbank.org/search/dataset/0038272/World-Bank-Official-Boundaries)'
  prefs: []
  type: TYPE_NORMAL
- en: I use the one called World Boundaries GeoJSON — Very High Resolution.
  prefs: []
  type: TYPE_NORMAL
- en: It’s the official boundaries from the World Bank and a public dataset you can
    use however you want.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Import libraries'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As usual, we start by importing the necessary libraries, and we don’t need many.
    Since we have geographical data, we want `geopandas` to make plotting as easy
    as possible.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: One import that you might have yet to see is `PathEffe`. I will use that to
    create a border around the country labels later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Create a seaborn style'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before plotting, I always create a seaborn style to get a coherent look. Here,
    I only define a `background_color`, `font_family`, and `text_color`. I’m setting
    the background to light blue to represent the ocean.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can style other chart aspects, such as the grid, but I prefer to hide most
    standard chart components when drawing maps with `plt.axis(“off”)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Load geo data'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now it’s time to load the geo-data from the World Bank using geopandas. I’m
    changing the `CONTINENT` of Seychelles and `INCOME_GRP` of Equatorial Guinea.
  prefs: []
  type: TYPE_NORMAL
- en: It’s not as strange as it looks because Seychelles is a part of Africa, and
    Equatorial Guinea is in the “Upper middle income” group according to the latest
    data from the World Bank.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Next, I separate the African countries because I want to plot them separately
    as the focus of my chart, and I do the same for disputed areas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 5: Creating the draw map function'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, I’m ready to create the first version of the function that will draw the
    map. I will extend it with some additional functions later on.
  prefs: []
  type: TYPE_NORMAL
- en: This first version loops over a list of geopandas data frames and plots them
    using the `color` and `edgecolor` columns.
  prefs: []
  type: TYPE_NORMAL
- en: The function takes a few parameters I don’t use yet, but they will be helpful
    later in the tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: I want `draw_map()` to return the `ax` object because I often want to extend
    the chart with additional information based on the use case.
  prefs: []
  type: TYPE_NORMAL
- en: To use `draw_map()`, I must define the `color` and `edgecolor` columns for each
    geopandas data frame I want to plot.
  prefs: []
  type: TYPE_NORMAL
- en: I define the colors for `world` to draw every country as a faint background.
    For `africa`, I select bolder colors using the three income groups represented
    in the data.
  prefs: []
  type: TYPE_NORMAL
- en: One tip when selecting colors is to check your colors for color blindness using
    [Coloring for Colorblindness](https://davidmathlogic.com/colorblind/#%23D81B60-%231E88E5-%23FFC107-%23004D40).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now that I have created the required columns, I can run `draw_map()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here’s what I get.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b63b39ca16c073d416726465ae4e5f04.png)'
  prefs: []
  type: TYPE_IMG
- en: Map created by the author
  prefs: []
  type: TYPE_NORMAL
- en: It’s a great start, but we have a long way to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 6: Setting the boundaries'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since I want to create a map of Africa, it doesn’t make sense to show the entire
    world.
  prefs: []
  type: TYPE_NORMAL
- en: That’s why I created the following function that takes one of the geopandas
    data frames and sets the limits of the `ax` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can add padding to each side of the area to get some space for additional
    information, such as a legend.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s add it to the `draw_map()` function using the `boundary_map_index` and
    `padding` parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: I set `boundry_map_index` to the index of the geopandas data frame in the `maps_to_draw`
    list that we want to show and added some `padding`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: I also passed `use_hatch_for_indexes=[2]` to draw hatches over the disputed
    areas to show that they differ from the rest.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now we get a nice-looking map of Africa with the contours of nearby countries
    as well. If you don’t want the nearby countries to show, remove `world` from `maps_to_draw`.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s the resulting map.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f71377f824c3aff345b260e782aa91e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Map created by the author
  prefs: []
  type: TYPE_NORMAL
- en: We’re getting somewhere.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 7: Adding country labels'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since most people don’t know all African countries, the next step is to add
    labels for each country.
  prefs: []
  type: TYPE_NORMAL
- en: I want to add a label close to the middle for large countries and a line between
    the country and the label for smaller ones.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Defining the position of the country labels is the only tedious process of this
    tutorial, but I’ve done that for you.
  prefs: []
  type: TYPE_NORMAL
- en: You can try to calculate the position for each label using the geometries in
    geopandas, but that’s easier said than done since the shape of the countries varies.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, the fastest method is to roll up your sleeves and hard-code the values,
    which I have done here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We add the function directly below `set_limits`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: And pass it to `draw_map()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here’s what we get.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/65d73dbba94e51d1aeab43adb396cac5.png)'
  prefs: []
  type: TYPE_IMG
- en: Map created by the author
  prefs: []
  type: TYPE_NORMAL
- en: Fantastic! Now, I can see what countries I’m looking at, and the last thing
    to do is to explain the colors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 8: Adding a legend and title'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding legends in matplotlib is simple, so to spice things up, I want to use
    the shape of the countries instead of a standard circle or square.
  prefs: []
  type: TYPE_NORMAL
- en: This step is an example where I use the ax that `draw_map()` returns instead
    of adding it directly to the function.
  prefs: []
  type: TYPE_NORMAL
- en: To take the geometry of a country and draw it in a different place, I’ve created
    the following function that takes a `row` and puts the shape in (`x_loc`, `y_loc`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In addition to changing the location, it also changes the scale of the geometry
    to have a specific `height`.
  prefs: []
  type: TYPE_NORMAL
- en: To use `draw_legend_geometry(),` I create a data frame called `legend`, where
    I select appropriate countries to represent each color. Currently, it only works
    for countries with one `Polygon`, not `MultiPolygon`.
  prefs: []
  type: TYPE_NORMAL
- en: It’s a bit “hacky” how I add `INCOME_GRP` to Western Sahara, use that to sort
    values, and add `row.INCOME_GRP[3:]` as text, but it’s ok for now.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve also added a title and data source after drawing the legend.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: If I run the code above, I get the following map, and it’s identical to the
    one you saw at the start of the tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e7bc0b03cddbb3939afe4d6c954a889a.png)'
  prefs: []
  type: TYPE_IMG
- en: Map created by the author
  prefs: []
  type: TYPE_NORMAL
- en: That was the last step of the tutorial. Congratulations on making it to the
    end!
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can make the `draw_map()` function even more flexible by adding more parameters
    for styling (I have several hard-coded values), but for me, this covers 95% of
    my use cases.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you enjoyed the tutorial and learned something you can use in your projects.
  prefs: []
  type: TYPE_NORMAL
- en: If you did, clap, subscribe, and share so that more people can learn how to
    draw beautiful maps with Python and Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should also take a look at my other tutorials:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Oscar Leo](../Images/a3badd168c6bfbbdc3d060f9191ca1d2.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Oscar Leo](https://medium.com/@oscarleo?source=post_page-----a6bd1f40fff--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib Tutorials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[View list](https://medium.com/@oscarleo/list/matplotlib-tutorials-262e5d7f0847?source=post_page-----a6bd1f40fff--------------------------------)8
    stories![](../Images/51b77b8f6d7ea69abdcd113427d4a52a.png)![](../Images/56c078b5447338a07b7bce2b23cf7133.png)![](../Images/c3088ee7cd4994f027ddddbc6ae423cd.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Also, subscribe to my free newsletter, [Data Wonder](https://datawonder.substack.com/),
    and follow me on Twitter at [@oscarl3o](https://twitter.com/oscarl3o).
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading, and see you next time.
  prefs: []
  type: TYPE_NORMAL
