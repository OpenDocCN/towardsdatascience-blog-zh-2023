["```py\n# for geospatial analysis\nimport geopandas as gpd\nimport pandas as pd\nimport numpy as np\n\n# for trajectories visualization\nimport movingpandas as mpd\n\n# for visualization\nfrom keplergl import KeplerGl\n\n# for Folders\nimport os\n\nimport warnings\nwarnings.filterwarnings('ignore')\n```", "```py\nif not os.path.exists('root'):\n    os.makedirs('root')\n\nif not os.path.exists('output'):\n    os.makedirs('output')\n```", "```py\n# reading the locations file\nlocations = pd.read_csv(r'data/locations_20190718.csv')\n\nlocations.head()\n```", "```py\n# filter only the desired date\nlocations = locations[locations['coord_date'] == '2019-07-18']\n```", "```py\n# Arrange timestamp column\nlocations['timestamp'] = locations['coord_date'] + ' ' + locations['coord_time']\n\n# Create timestamp type\nlocations['t'] = pd.to_datetime(locations['timestamp'], utc=True)\n```", "```py\n# add string code to bike\nlocations['route_code'] = ['r-' + str(code) for code in locations['route_code']]\n```", "```py\n# Get the needed columns\nlocations = locations[['route_code', 'longitude', 'latitude', 'timestamp', 't']]\n```", "```py\nlocations.isna().sum()\n```", "```py\n# some info\n\nprint('There are in total {} unique bike routes'.format(locations['route_code'].nunique()))\nprint('The first bike was used at {}'.format(locations['timestamp'].astype(str).min()))\nprint('The last bike was used at {}'.format(locations['timestamp'].astype(str).max()))\n```", "```py\n# create a geodataframe\nlocations_gdf = gpd.GeoDataFrame(locations, geometry = gpd.points_from_xy(locations.longitude, locations.latitude, crs=\"EPSG:4326\"))\n\nlocations_gdf.head()\n```", "```py\n%%time\n\n# Create a Trajectory Collection \nbike_collection = mpd.TrajectoryCollection(locations_gdf, traj_id_col='route_code', t='t')\n\ntype(bike_collection)\n```", "```py\n# read the route info\nroute_info = pd.read_csv(r'data/routes_20190718.csv', encoding='utf-8')\n\nroute_info.head()\n```", "```py\n# get the needed columns\nbike_route_info = route_info[['route_code', 'startstationname', 'endstationname']]\n\n# add the route id as our workflow\nbike_route_info['route_code'] = ['r-'+ str(code) for code in bike_route_info['route_code']]\n\nbike_route_info.head()\n```", "```py\n%%time\n\n# adding bike route info to every GPS tracking\n\n# bike-route-metallica\nbike_moves = gpd.GeoDataFrame()\n\n# total routes\ntotal = locations_gdf.route_code.nunique()\n\nn = 0 \n\n# loop in every trajectory by bike route id\nfor traj in bike_collection.trajectories:\n    n = n+1\n\n    # info\n    print(f'Adding info {n}/{total}\\n')\n\n    # join bike route info\n    traj_moves_info = traj.df.merge(bike_route_info, on='route_code', how='left')\n\n    # add to bike moves\n    bike_moves = bike_moves.append(traj_moves_info, ignore_index=True)\n\n# let's check the result    \nbike_moves.head()\n```", "```py\n%%time\n\n# bike-routes-metallica\nbike_lines = gpd.GeoDataFrame(crs=4326)\n\n# total routes\ntotal = locations_gdf.route_code.nunique()\n\nn = 0 \n\n# loop in every trajectory by bike route id\nfor traj in bike_collection.trajectories:\n    n = n+1\n\n    # info\n    print(f'Adding info {n}/{total}\\n')\n\n    # creating a LineTrajectory\n    traj_line = traj.to_traj_gdf()\n\n    # join bike route info\n    traj_moves_info = traj_line.merge(bike_route_info, left_on='id', right_on='route_code', how='left')\n\n    # add to bike moves\n    bike_lines = bike_lines.append(traj_moves_info, ignore_index=True)\n\n# remove a duplicate\ndel bike_lines['id']\n\n# let's check the result    \nbike_lines.head()\n```", "```py\n# save the result\nbike_lines.to_file(r'output/bike_routes_metallica_concert.gpkg', driver='GPKG')\n```", "```py\n# add code for those involved in Metallica concert\n# function that defines the \"Metallica parkla\" as end\n\ndef metallica_code(station_name):\n    '''\n    Evaluates if station_name is metallica parkla and return a code\n    station_name <str>\n    '''\n\n    if station_name=='Metallica parkla': \n        return 'Metallica'\n\n    else:\n        return 'Bike user'\n\ndef metallica_weight(station_name):\n    '''\n    Evaluates if station_name is metallica parkla and return a code\n    station_name <str>\n    '''\n\n    if station_name=='Metallica parkla':\n        return 5\n\n    else:\n        return 1\n```", "```py\n# apply function\n# end\nbike_moves['viz_code'] = bike_moves.apply(lambda row: metallica_code(row['endstationname']), axis=1)\nbike_moves['weight'] = bike_moves.apply(lambda row: metallica_weight(row['endstationname']), axis=1)\n```", "```py\nfrom shapely.geometry import Point\n```", "```py\n# create the venue location\nvenue = gpd.GeoDataFrame(columns = ['name', 'geometry'], geometry = 'geometry', crs = 4326)\nvenue.at[0, 'name'] = 'Metallica venue'\nvenue.at[0, 'geometry'] = Point(58.397144, 26.752595)\n\nvenue.head()\n```", "```py\n# create and instance\nm = KeplerGl(height = 600)\n```", "```py\n# add the data\nm.add_data(bike_moves, 'Bike Moves')\n```", "```py\nm.add_data(venue, 'Metallica venue')\n```", "```py\nfrom configuration import config\n```", "```py\nm.save_to_html(file_name='root/metallica_moves.html', config=config)\n```", "```py\nm\n```", "```py\nm.config\n```"]