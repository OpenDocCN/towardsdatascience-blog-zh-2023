- en: Ant Colony Optimization in Action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/ant-colony-optimization-in-action-6d9106de60af](https://towardsdatascience.com/ant-colony-optimization-in-action-6d9106de60af)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/a404a01ac29f0af038d7f4bdf990bd20.png)'
  prefs: []
  type: TYPE_IMG
- en: A skiing ant. Image created with Dall·E by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Solving optimization problems and enhancing results with ACO in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://hennie-de-harder.medium.com/?source=post_page-----6d9106de60af--------------------------------)[![Hennie
    de Harder](../Images/3e4f2cccd6cb976ca3f8bf15597daea8.png)](https://hennie-de-harder.medium.com/?source=post_page-----6d9106de60af--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6d9106de60af--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6d9106de60af--------------------------------)
    [Hennie de Harder](https://hennie-de-harder.medium.com/?source=post_page-----6d9106de60af--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6d9106de60af--------------------------------)
    ·10 min read·Sep 20, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '**Welcome back! In my** [**previous post**](/meta-heuristics-explained-ant-colony-optimization-d016fe925108)**,
    I introduced the fundamentals of Ant Colony Optimization (ACO). In this installment,
    we’ll delve into implementing the ACO algorithm from scratch to tackle two distinct
    problem types.**'
  prefs: []
  type: TYPE_NORMAL
- en: The problems we’ll be addressing are the Traveling Salesman Problem (TSP) and
    the Quadratic Assignment Problem (QAP). Why these two? Well, the TSP is a classic
    challenge, and ACO happens to be an effective algorithm for finding the most cost-efficient
    path through a graph. On the other hand, the Quadratic Assignment Problem represents
    a different class of problems related to optimizing the arrangement of items,
    and in this post, I aim to demonstrate that ACO can be a valuable tool for solving
    such assignment-related problems as well. This versatility makes the ACO algorithm
    applicable to a wide range of problems. Finally, I’ll share some tips for achieving
    improved solutions more rapidly.
  prefs: []
  type: TYPE_NORMAL
- en: Traveling Salesman Problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'TSP is straightforward to describe but can pose a significant challenge in
    finding a solution. Here’s the basic definition: you’re tasked with discovering
    the shortest route that visits all nodes in a graph. This problem falls into the
    category of [NP-hard problems](https://medium.com/towards-data-science/np-what-complexity-types-of-optimization-problems-explained-558d43276044),
    which implies that if you attempt to explore all possible routes, it can take
    an impractical amount of time to find the solution. Instead, a more effective
    approach is to seek a high-quality solution within a reasonable timeframe, and
    that’s precisely what we’ll accomplish using ACO.'
  prefs: []
  type: TYPE_NORMAL
- en: Problem Definition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the following code, we can create a TSP instance with a given number of
    nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The TSP example we will use for demonstrating ACO is the following (default
    settings):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/787d3843040210ad149e99c98c79184a.png)'
  prefs: []
  type: TYPE_IMG
- en: Visit all nodes and return back to the start node. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The optimal solution for this problem (calculated with [mixed integer programming](/how-to-handle-optimization-problems-daf97b3c248c))
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/20b510a5325964c37e3c89136353326c.png)'
  prefs: []
  type: TYPE_IMG
- en: Optimal solution for the traveling salesman problem. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: The distance of this path is 4897.
  prefs: []
  type: TYPE_NORMAL
- en: Solving TSP with ACO
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next step is to solve this problem with ant colony optimization to see how
    close we can get to the optimal solution. If you are unfamiliar with ACO and you
    want to learn how the algorithm works, you can [read my previous post](/meta-heuristics-explained-ant-colony-optimization-d016fe925108).
    Then you can return here to see ACO in action.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for ACO:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the crucial parts of the code step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is initialization `__init__`. We define the problem, which, in
    this case, is a TSP instance, and optionally provide hyperparameters if needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ant_colony_optimization` section contains the core execution. Over a specified
    number of iterations `k_max`, the algorithm strives to enhance the current best
    solution. It involves deploying multiple ants `m`, and each ant traverses the
    graph.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ant_walk` provides the simulation of the journey of a single ant. In the
    while loop, the ant’s path is constructed by choosing the next edge based on its
    attractiveness `A`. The edge attractiveness is computed using the `edge_attractiveness`
    method, which takes into account factors like the pheromone matrix `tau`, alpha,
    the distance matrix, and beta. The pheromone matrix is updated after each ant’s
    walk.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To run the algorithm for a problem instance, all you have to do is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, how does ACO perform compared to the optimal solution? You can visualize
    the progress with a GIF that displays the evolving solution. Each image in the
    GIF shows the current best route, allowing you to observe the improvement over
    time.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8510da8a471b8d5b652e2bff352c7721.png)'
  prefs: []
  type: TYPE_IMG
- en: Improvement of the route. Gif by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The score of the final solution is equal to 4944, really close to the optimal
    solution (the gap is less than 1%)! It’s also interesting to take a look at the
    solving process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7ace6f53e7b43891bc769613aeeeaae3.png)'
  prefs: []
  type: TYPE_IMG
- en: Solution process. Every dot represents one ant walk. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: In this graph, the x-axis represents the ant number, while the y-axis indicates
    the distance covered during the ant’s journey. The horizontal red line shows the
    score of the optimal solution, and the red dots symbolize instances where ants
    have found a new, improved solution. It’s worth noting that it often takes several
    ants to discover a better solution. However, the last red dot is remarkably close
    to the optimal solution. There are strategies available to enhance the performance
    of ACO, which I’ll elaborate on in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Assignment Problems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TSP is a routing problem, and ACO was originally designed to address routing
    problems. That’s already a long time ago, and in the meantime people found ways
    to solve different types of challenges using ACO. One such example worth highlighting
    is its application to assignment problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assignment problems are problems in which you assign ‘something’ to ‘something
    else’. One example is the *quadratic assignment problem* (QAP). Imagine you have
    a set of locations, and you want to assign a set of facilities to these locations.
    The goal is to determine the best assignment that minimizes the total cost. The
    cost of assigning facility *f* to location *l* is determined by:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The flow between facilities: Facilities have a certain flow or interaction
    between them. This represents how much “stuff” or “activity” is transferred between
    facilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The distance between locations: Each pair of locations has a corresponding
    distance, which represents the cost or effort required to transport or operate
    between those locations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The cost of assigning a particular facility to a specific location is determined
    by the flow between facilities and the distance between locations. Specifically,
    the cost for a pair of facilities is computed as the product of their flow and
    the distance between the locations to which they are assigned.
  prefs: []
  type: TYPE_NORMAL
- en: To find the total cost of a particular assignment, you sum up the pairwise costs
    for all possible pairs of facilities based on their assignments to locations.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c7698c67956a5043e5cf862832edbd12.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of an optimal solution for 5 facilities placed on 5 locations. Flows
    in blue. Click to enlarge. Image by author.
  prefs: []
  type: TYPE_NORMAL
- en: How does the problem formulation changes when you want to apply ACO to an assignment
    problem instead of a routing problem? I’ll leave the coding up to you, but I will
    provide an intuitive understanding of the difference between a routing and an
    assignment problem, looking at it from an ant perspective.
  prefs: []
  type: TYPE_NORMAL
- en: The TSP is all about finding the optimal sequence in which to visit various
    locations. On the other hand, the QAP shifts the focus to deciding where to place
    items or facilities. In ACO for TSP, the ants learn to favor specific visitation
    sequences over others. In contrast, when tackling the QAP, the ants lean towards
    selecting particular facilities for specific locations. In this scenario, the
    pheromone trails represent how desirable it is to assign a facility to a specific
    location.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can imagine it like this: each ant has a list of available places (locations
    in QAP) where they can allocate items (facilities in QAP). The ants proceed through
    these steps repeatedly until they’ve determined the optimal arrangement of all
    items.'
  prefs: []
  type: TYPE_NORMAL
- en: In simpler terms, think of it as ants collaboratively determining the most efficient
    way to allocate items, drawing from the knowledge they’ve acquired about what
    works best in terms of item-to-location assignments.
  prefs: []
  type: TYPE_NORMAL
- en: Improve Solution Quality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several strategies to achieve better solutions in a shorter timeframe.
    Here are three valuable tips that can significantly impact your results:'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperparameter Search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you’re dealing with multiple problems of the same type, it’s highly advisable
    to conduct a hyperparameter search. Parameters such as the number of iterations,
    the quantity of ants, alpha, beta, rho, and Q can exert a substantial influence
    on algorithm performance.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s examine an example. In the plot below, we test two different values of
    alpha, while the other parameters stay the same. The line plots depict the moving
    average over 100 ant runs, while the dots represent the best solution found for
    a certain run.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e8a42b6f94a2eaf556217bfd50c04ddb.png)'
  prefs: []
  type: TYPE_IMG
- en: The algorithm with the orange settings (alpha = 2) not only discovers a superior
    solution (indicated by the orange dot) but also accomplishes this more rapidly
    compared to the algorithm with the blue settings (alpha = 1).
  prefs: []
  type: TYPE_NORMAL
- en: To emphasize the impact of hyperparameter tuning further, consider a TSP problem
    with 100 nodes. If we conduct a random search (10 iterations) across the hyperparameters
    and plot the moving average, we observe significant variations in performance.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e4ad6c2532bd5f1e1d46f2736abf4ad0.png)'
  prefs: []
  type: TYPE_IMG
- en: At the top, the orange and yellow lines yield suboptimal results, while others
    come remarkably close to the optimal solution. For context, it’s worth noting
    that the OR tools solver took 5 minutes to find the optimum, whereas the ACO algorithms
    completed their runs in a maximum of 5 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Warm Up Procedure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before setting the ants in motion, you have the option to initiate a *warm-up*
    for the pheromone matrix. This preparatory step often reduces the number of iterations
    needed to find the best solution. In [this paper](https://www.mdpi.com/1999-4893/14/10/295),
    a warm-up procedure is proposed and its effects are compared.
  prefs: []
  type: TYPE_NORMAL
- en: Exploration and Exploitation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to many algorithms, they can encounter stagnation if they don’t explore
    sufficiently. To address this, you can use the [Max-Min Ant System](https://www.sciencedirect.com/science/article/abs/pii/S0167739X00000431).
    MMAS encourages ants to venture into unexplored paths by assigning a high pheromone
    value to these paths. When stagnation occurs, the trails are reset to this elevated
    value. An additional advantage of MMAS over the original algorithm is that only
    the global best tour or the iteration’s best tour are permitted to enhance their
    trails with pheromone. These adjustments promote a more effective balance between
    exploration and exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49cf5f5fb375e39a075c6ce8717a3a35.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Shardar Tarikul Islam](https://unsplash.com/@tarikul_islam?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ant colony optimization is a fun algorithm to play around with. It can find
    high quality solutions to routing and assignment problems, even if the problem
    size increases. This makes it a powerful algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: To further enhance the algorithm’s performance and uncover superior solutions,
    consider incorporating essential strategies such as hyperparameter search, a warm-up
    procedure, and techniques for balancing exploration and exploitation. These adjustments
    can lead to significant improvements in your results.
  prefs: []
  type: TYPE_NORMAL
- en: If you became curious and want to read more on ACO, I can recommend [this work](https://ds.amu.edu.et/xmlui/bitstream/handle/123456789/10303/ant%20colony%20optimization%20%282004%29.pdf?sequence=1&isAllowed=y).
    One of the authors is the one who proposed ACO in 1992\. It offers valuable insights
    and a comprehensive understanding of this remarkable optimization technique.
  prefs: []
  type: TYPE_NORMAL
- en: Related
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](/optimizing-connections-mathematical-optimization-within-graphs-7364e082a984?source=post_page-----6d9106de60af--------------------------------)
    [## Optimizing Connections: Mathematical Optimization within Graphs'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to graph theory and its applications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'towardsdatascience.com](/optimizing-connections-mathematical-optimization-within-graphs-7364e082a984?source=post_page-----6d9106de60af--------------------------------)
    [](/an-introduction-to-a-powerful-optimization-technique-simulated-annealing-87fd1e3676dd?source=post_page-----6d9106de60af--------------------------------)
    [## An Introduction to a Powerful Optimization Technique: Simulated Annealing'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation, parameters, strengths, weaknesses and use cases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'towardsdatascience.com](/an-introduction-to-a-powerful-optimization-technique-simulated-annealing-87fd1e3676dd?source=post_page-----6d9106de60af--------------------------------)
    [](/meta-heuristics-explained-ant-colony-optimization-d016fe925108?source=post_page-----6d9106de60af--------------------------------)
    [## Meta-Heuristics Explained: Ant Colony Optimization'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to a lesser-known heuristic based on the behavior of ants
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/meta-heuristics-explained-ant-colony-optimization-d016fe925108?source=post_page-----6d9106de60af--------------------------------)
  prefs: []
  type: TYPE_NORMAL
