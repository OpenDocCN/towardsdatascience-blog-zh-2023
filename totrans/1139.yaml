- en: How to Create a Simple GIS Map with Plotly and Streamlit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-create-a-simple-gis-map-with-plotly-and-streamlit-7732d67b84e2](https://towardsdatascience.com/how-to-create-a-simple-gis-map-with-plotly-and-streamlit-7732d67b84e2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data Visualization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Plotly map functions combined with Streamlit user interface components provide
    a way of creating GIS-style dashboards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@alan-jones?source=post_page-----7732d67b84e2--------------------------------)[![Alan
    Jones](../Images/359379fab1d6685ff08080b98173e67c.png)](https://medium.com/@alan-jones?source=post_page-----7732d67b84e2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7732d67b84e2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7732d67b84e2--------------------------------)
    [Alan Jones](https://medium.com/@alan-jones?source=post_page-----7732d67b84e2--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7732d67b84e2--------------------------------)
    ·14 min read·Dec 22, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2d61b8df3867dd582f1410384f6f274f.png)'
  prefs: []
  type: TYPE_IMG
- en: The COVID data dashboard from Johns Hopkins University — Photo by [Clay Banks](https://unsplash.com/@claybanks?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: In 2020 we all got used to seeing a lot more data in the media than we were
    used to. The sophisticated data dashboards created by Johns Hopkins University,
    among others, became a staple of news presentations about the spread of COVID-19
    and were essential viewing.
  prefs: []
  type: TYPE_NORMAL
- en: So, if any positives have come out of the pandemic, maybe one is that more people
    can understand graphical representations of data.
  prefs: []
  type: TYPE_NORMAL
- en: That experience has, perhaps, led to the greater use of graphs and dashboards
    in the presentation of data of all types, whether it be medical, financial or
    other numbers in the news.
  prefs: []
  type: TYPE_NORMAL
- en: Along with graphs that represented the exponential growth of infection rates
    and tracked R numbers, we also got used to the type of geographic information
    that we see in the Johns Hopkins dashboard above. This shows a global view of
    how the pandemic was developing but we all had our local versions of these systems,
    too.
  prefs: []
  type: TYPE_NORMAL
- en: Those applications used sophisticated software to represent the data and the
    geography onto which it was mapped but we can attempt to do something similar
    — albeit rather simpler — using Plotly and Streamlit.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll start by creating some simple maps in Plotly and work our way up to a
    data dashboard inspired by Johns Hopkins University using Streamlit.
  prefs: []
  type: TYPE_NORMAL
- en: The final app will look something like the image below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e32e40cf3b174c6f3787573dc4deeeb6.png)'
  prefs: []
  type: TYPE_IMG
- en: But before we get to the app, we need to explore how to use Plotly maps.
  prefs: []
  type: TYPE_NORMAL
- en: Plotly maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Plotly supports a few map types but we are going to use *outline* maps as they
    are simple to use and clear. The image below shows a Streamlit app with two versions
    of Plotly outline maps that represent the population of Australian states. The
    one on the left is a Choropleth: a map with coloured areas where the colour represents
    some value — in this case population.'
  prefs: []
  type: TYPE_NORMAL
- en: The other is a Scatter Map that shows values with circles that represent the
    data — in this case, both the size and the colour represent the population.
  prefs: []
  type: TYPE_NORMAL
- en: To create maps like this, we use the functions `choropleth` and `scatter_geo`
    from Plotly Express.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a7a6cdf6d4848500f0d0bd42160f1948.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Data source: Australian Bureau of Statistics — see Notes'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll discuss how to create these maps later but you may have already noticed
    one of the disadvantages of using size to represent a value in the Scatter Map
    in this example: the population of the Northern Territory, the home of Uluru (also
    known as Ayer’s Rock) and the third biggest state in Australia, is so small by
    comparison to the others that the circle is not visible. The colour in Choropleth
    is pale but since it takes up the whole of the area of the state it is easily
    visible.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Both the code and the data files that we will use in this article will be
    available for download and a demonstrator app will also be published in the Streamlit
    Community Cloud. I’ll include the links at the end of the article to a GitHub
    repository where you can view and/or download the code and data, and one to the
    app, as well. When I refer to files or folders in the text below it is with reference
    to the GitHub repo.*'
  prefs: []
  type: TYPE_NORMAL
- en: Get the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our final dashboard will use data about CO2 emissions. This data is derived
    from tables in a GitHub repository belonging to [Our World in Data](https://ourworldindata.org/)
    (see Notes). OWID is a great source of data and analysis which I have used many
    times (e.g. [New Data Demonstrates that 2023 was the Hottest Summer Ever](https://medium.com/towards-data-science/new-data-demonstrates-that-2023-was-the-hottest-summer-ever-d92d500a8f01)).
  prefs: []
  type: TYPE_NORMAL
- en: The data that I have copied from OWID represents the CO2 emissions for countries
    since 1750\. The original data contains far more information than we need, so
    I have created subsets of the data and stored them in the app. You will find them
    in the `data` folder.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by creating a simple app that will display the emissions for the
    year 2021 in a choropleth. The code below reads a CSV file that contains data
    for many years and filters it to create a Pandas dataframe for 2021, only.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can see what the data looks like from the image below. The *Entity* column
    contains the name of the country; the *Code* column is an internationally recognised
    three-letter code ([ISO 3166–1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3))
    that represents the country; *Year* is self-explanatory and is, of course, always
    2021 in this dataframe; and the *Annual CO2 emissions* column gives the annual
    emissions in tonnes of CO2.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/07134c6a39928598f0e764c6f1c1e73f.png)'
  prefs: []
  type: TYPE_IMG
- en: Once we have our data we are ready to create a map from it.
  prefs: []
  type: TYPE_NORMAL
- en: Choropleths
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I mentioned a choropleth is a map with shaded areas — the areas might be
    a country, state, or some other defined part of the globe and the level of shading
    represents a value.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use the CO2 data above. First, we can ignore the year — it’s always 2021
    — the value in the emissions column will determine the colour and the ISO code
    will specify the area on the map that will be shaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by defining a few variables: the column from which we will read the
    data and the maximum and minimum values of that data. We’ll use these to set the
    range of colours used on the map.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now create our map using Plotly Express `choropleth`. As you can see
    from the code below, there are 5 parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The first is the dataframe that we will be reading.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`locations` is set to the column that refers to the part of the map to which
    the data in the dataframe refers. Here we specify the ‘Code’ column which contains
    the ISO code for a country, e.g. ‘AND’ for Andorra or ‘ZMB’ for Zambia (as you
    can see in the data table above). This code will be matched to the same code in
    the map (that is, the location).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The third parameter, `color`, specifies how the colour is set. Here we use the
    column ‘Annual CO₂ emissions’, so the colour of the section of the map specified
    by the ISO code will be set according to the level of emissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next parameter, `hover_name`, specifies the column where the name of the
    country can be found (the actual name, rather than the code) and this will be
    displayed when your pointer hovers over that part of the map.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final value to be passed to the function is, `color_range`, the range of
    colours to be used to represent the level of emissions. We calculated the maximum
    and minimum values earlier and these will be mapped onto the beginning and end
    of the default colour range.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The are several other parameters that are available to us but we will rely on
    the default values for these, for now.
  prefs: []
  type: TYPE_NORMAL
- en: Where’s the map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may think we have missed something here. I keep referring to a map but where
    is it? The answer is that while we can certainly specify a map (as we shall see
    later) Plotly conveniently incorporates some maps that represent various parts
    of the world — it defaults to using one of the whole world. And that default world
    map is divided into countries that are labelled with the appropriate ISO code.
  prefs: []
  type: TYPE_NORMAL
- en: If we run the code above using`plotly_chart(fig)` in Streamlit, or `fig.show()`
    in a standard Python environment, or Jupyter Notebook, we will get the figure
    shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a42c255ac9f123c96a50d11b66a81a20.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see that, in this screenshot, the mouse is hovering over the USA so
    we can see the specific information for that country. That’s quite neat and has
    not involved a great deal of effort.
  prefs: []
  type: TYPE_NORMAL
- en: But what if we don’t want to see the whole world?
  prefs: []
  type: TYPE_NORMAL
- en: As I said, Plotly helpfully includes built-in maps. These are `'world'`, `'usa'`,
    `'europe'`, `'asia'`, `'africa'`, `'north america'`, or `'south america'.`
  prefs: []
  type: TYPE_NORMAL
- en: So, simply adding a new parameter to the function call can change the map from
    the default `'world'` to any of the above. That parameter is `scope` and set to
    `'europe'` in the code below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The resulting map is shown in the following screenshot and you can see, in the
    code and on the map that I have also set a title for the chart.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c83ae03a553197ced1aa008998646fab.png)'
  prefs: []
  type: TYPE_IMG
- en: Europe emissions
  prefs: []
  type: TYPE_NORMAL
- en: The range of colours is still set for the entire world so given that emissions
    for different European countries are not so different, it is difficult to distinguish
    between them here. To get a better picture of emissions in Europe we might want
    to set the range to just the countries that we are focussing on.
  prefs: []
  type: TYPE_NORMAL
- en: But our purpose here is simply to illustrate the use of the `scope` parameter.
    And to that end here is a set of images for some of the other built-in maps.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2f9c0637e91bc37ce74d1d19bdfaea6e.png)'
  prefs: []
  type: TYPE_IMG
- en: The code to create these maps is in the repo.
  prefs: []
  type: TYPE_NORMAL
- en: You are not limited to the built-in maps, though; you can provide your own,
    too, such as the Australian state map we saw earlier.
  prefs: []
  type: TYPE_NORMAL
- en: The next code panel contains a complete Streamlit app to produce the Australian
    choropleth that we saw above.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After the imports and the introductory text, we open a *GeoJSON* file from the
    *geo* folder called *australia.geojson* (see Notes)*.* This is a map file that
    can be used in place of the built-in maps. (To find maps like these, you can do
    an Internet search, or use GitHub which has several repositories of GeoJSON maps.)
  prefs: []
  type: TYPE_NORMAL
- en: 'In the call to `px.choropleth` we see an additional parameter `geojson` which
    identifies the map that we loaded. We also need to specify a feature on the map
    that we are going to use to display the data. We can find the features by inspecting
    the JSON code: `oz[''features''][0]` will show you the features on this map. The
    one we are looking for is `properties.name`. So, this goes in the parameter, `featureidkey`.'
  prefs: []
  type: TYPE_NORMAL
- en: If we leave it at that then we will get a map of the whole world with the choropleth
    tucked away in the corner!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/02849659728bdf7cccc290bf38a85dcc.png)'
  prefs: []
  type: TYPE_IMG
- en: A map without the bounds set
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we need to tell the choropleth function the bounds of the map: we set the
    parameter `fitbounds` to `''geojson''` and this will ensure that only the part
    of the world that is defined by the map is displayed'
  prefs: []
  type: TYPE_NORMAL
- en: Scatter maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scatter maps are very similar to choropleths but instead of areas being blocked
    out with colour; coloured circles are positioned in those areas (like a scatter
    chart).
  prefs: []
  type: TYPE_NORMAL
- en: Here is a scatter map of populations in European countries.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1b20c95a455105526810bf355bd2dd27.png)'
  prefs: []
  type: TYPE_IMG
- en: European populations — data source Eurostat (see Notes)
  prefs: []
  type: TYPE_NORMAL
- en: The code is very similar to a choropleth but, in addition to specifying the
    colour that represents the data, we can also set the size of the circles.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code to draw the map above.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The population data comes from Eurostat (see Notes) although I have added the
    three-letter ISO country codes instead of the two-letter ones that the EU tend
    to use and only used the data for 2021\. Here is a sample of the data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8d49dc59647e8bd64f21698f033f8255.png)'
  prefs: []
  type: TYPE_IMG
- en: 'European population figures: source, Eurostat'
  prefs: []
  type: TYPE_NORMAL
- en: You can see from the code that the parameters for the scatter map are pretty
    much the same as for the choropleth but here I’ve set the `size` parameter to
    the same column as `colour` so the size of the circle varies with the population
    as well as the colour.
  prefs: []
  type: TYPE_NORMAL
- en: Interactivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we are going to build a dashboard then we want to include some interactivity.
    In the screenshot below we have gone back to our CO2 emissions data and are displaying
    two choropleths that utilise two different projections. We are not going to go
    into any details about map projections here, but there is one worth mentioning.
    The choropleth on the right represents the world as a globe and it behaves like
    one, too. If you click on the globe and move the mouse, the globe will rotate.
    This may be more amusing than useful but it is quite satisfying to play with.
  prefs: []
  type: TYPE_NORMAL
- en: Orthographic projection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/8b47f324736b18a6c35c2693dae40fbe.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see the code for globe representation below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: It’s much the same as we have already seen except that the is a new parameter,
    `projection` which is set to `'orthographic'` it is this orthographic view that
    gives us an interactive globe. We’ll see this code in context shortly.
  prefs: []
  type: TYPE_NORMAL
- en: User input
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: However, the main user interactivity in this app is through a slider bar that
    lets us select a year for which emissions will be displayed. This is one of the
    built-in Streamlit input widgets and is an effective method of getting user input.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the complete code for the app shown above.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The main difference between this and previous apps is that we are using a data
    file that covers the whole range of years from 1750 to 2021 and the inclusion
    of the slider bar which selects the variable `year`. This variable is then used
    in the choropleth code to filter the data from the dataframe and display a map
    for the selected year.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have the basic ingredients to create a pleasing dashboard app.
  prefs: []
  type: TYPE_NORMAL
- en: The Dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already covered most of the code that is used in the dashboard, apart
    from some standard Streamlit layout code and a bit of Pandas filtering.
  prefs: []
  type: TYPE_NORMAL
- en: 'It has optional views: on the left is a map that can selected to be either
    a choropleth or a scatter map with radio buttons; and on the right, a multi-select
    box allows you to select one or more countries — their data can be viewed as a
    table or graphs using Streamlit tabs.'
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit makes this sort of functionality very easy as you can see in the code
    below that implements the selection of countries and the display of a line chart
    or a dataframe in one of two tabs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The year for which emissions are shown is selected from the slider bar near
    the top and a global total for that year is also shown top left and the data views
    are automatically updated when the year is changed.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49686b9f65f0eef7df2285fb5786a07f.png)![](../Images/bc11aa72b2cbf4353f720ecc718466a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The complete code is too long to include here but the entire dashboard and
    pages that illustrate all of the code above are published in the Streamlit Cloud
    here: [CO2_Emissions_Dashboard](https://co2-dashboard.streamlit.app/CO2_Emissions_Dashboard).'
  prefs: []
  type: TYPE_NORMAL
- en: You can also access the GitHub repository that contains all of the code and
    data either from the app or by following the direct link [here](https://github.com/alanjones2/st-choropleth/tree/main).
  prefs: []
  type: TYPE_NORMAL
- en: Is it really a GIS?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The dashboard uses geographical representations of data but doesn’t let you
    do any deep analysis, so it’s more of a dashboard than a serious GIS. But it does
    let you explore the CO2 emissions across the globe and through time.
  prefs: []
  type: TYPE_NORMAL
- en: We can see from the graphs, for example, that during the Industrial Revolution
    (the 80-odd years from 1750), it was only the UK that created any serious emissions
    but in the 20th century, these were quickly dwarfed by those of the USA and other
    countries. These graphs can also show us that some countries have managed to reduce
    their emissions over the last few years, while others have not.
  prefs: []
  type: TYPE_NORMAL
- en: 'The table view allows us to rank the selected counties in order of emissions.
    You might expect those with large populations to be the worst offenders, and in
    the case of China, you would be right, but look at India and the USA, and you
    will see quite different situations: India, with a similar population to China,
    has much lower emissions; and the US emissions are declining while China’s are
    still increasing.'
  prefs: []
  type: TYPE_NORMAL
- en: But whether or not it is a true GIS, I hope you have found that has been a useful
    exercise in how to create an attractive and useful dashboard in Streamlit using
    its mapping elements.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All images, screenshots and code have been created by the author unless otherwise
    noted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Australian population data comes from the Australian Bureau of Statistics, [National,
    state and territory population](https://www.abs.gov.au/statistics/people/population/national-state-and-territory-population/latest-release)[,](https://www.abs.gov.au/statistics/people/population/national-state-and-territory-population/latest-release),)
    ABS Website, accessed 13 December 2023, CC-BY 4.0 licence.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global CO₂ Emissions Data is derived from the [Our World in Data (OWID) co2-data
    GitHub repository](https://github.com/owid/co2-data), [Creative Commons BY license](https://creativecommons.org/licenses/by/4.0/).
    The data used here was created from the OWID original in September 2023.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Australian state GeoJSON from [Click that Hood on GitHub](https://github.com/codeforgermany/click_that_hood),
    retrieved 16/12/2023, MIT license.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: European population data from [Eurostat](https://ec.europa.eu/eurostat/web/interactive-publications/demography-2023),
    retrieved 16/12/2023, CC-BY 4.0 licence.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find more of my work on my [website](http://alanjones2.github.io) and
    follow me either here on Medium or with my occasional [newsletter](http://technofile.substack.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
