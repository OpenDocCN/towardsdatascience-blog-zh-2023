- en: Using Plotly 3D Surface Plots to Visualise Geological Surfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/using-plotly-3d-surface-plots-to-visualise-geological-surfaces-8829c06a5c9a](https://towardsdatascience.com/using-plotly-3d-surface-plots-to-visualise-geological-surfaces-8829c06a5c9a)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Visualising the Subsurface using Python Data Visualisation Libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----8829c06a5c9a--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----8829c06a5c9a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8829c06a5c9a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8829c06a5c9a--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----8829c06a5c9a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8829c06a5c9a--------------------------------)
    ·9 min read·Jun 21, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7eca521450a3968109b5d97f148ad420.png)'
  prefs: []
  type: TYPE_IMG
- en: 3D Surface Plot of the Hugin Formation. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Within geoscience, it is essential to have a full understanding of the geological
    surfaces present within the subsurface. By knowing the exact location of the formation
    and its geometry, it becomes easier to identify potential new targets for oil
    and gas exploration as well as potential carbon capture and storage locations.
    There are a variety of methods we can use to refine these surfaces ranging from
    seismic data to well log derived formation tops. Most often, these techniques
    are used in combination with each other to refine the final surface.
  prefs: []
  type: TYPE_NORMAL
- en: This article continues from my previous articles, which focused on the process
    of extrapolating well log measurements across a region to understand and visualise
    geospatial variations. In this article, we will look at how we can create 3D surfaces
    using interactive Plotly charts.
  prefs: []
  type: TYPE_NORMAL
- en: As modelling geological surfaces is a complex process and often involves multiple
    iterations and refinement, this article demonstrates a very simple example of
    how we can visualise this data with Python.
  prefs: []
  type: TYPE_NORMAL
- en: To see how we can use Plotly to visualise our geological formation top across
    an area we will be using two sets of data.
  prefs: []
  type: TYPE_NORMAL
- en: The first data set is derived from 28 intersections with the formation derived
    from wellbore picks, which are used as input for kriging to produce a low-resolution
    surface. In contrast, the second set of data is derived from interpreted seismic
    data, providing a much higher resolution surface.
  prefs: []
  type: TYPE_NORMAL
- en: Both sets of data are from the Equinor Volve dataset. Details of which are at
    the bottom of this article.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also check out the following articles within this mini-series at the
    links below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Plotly and Python: Creating Interactive Heatmaps for Petrophysical & Geological
    Data**](https://medium.com/p/701c22b32e4)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Utilising pykrige and matplotlib for Spatial Visualisation of Geological
    Variations**](/utilising-pykrige-and-matplotlib-for-spatial-visualisation-of-geological-variations-a288b186bfd6)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Visualising Well Paths on 3D Line Plots with Plotly Express**](/visualising-well-paths-on-3d-line-plots-with-plotly-express-de73ca73dea3)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing Libraries & Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before attempting to do any work with the data, we first need to import the
    libraries we will need. These are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**pandas**](https://pandas.pydata.org/) — to read our data, which is in `csv`
    format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**matplotlib**](https://matplotlib.org/) to create our visualisation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**pykrige**](https://github.com/GeoStat-Framework/PyKrige) to carry out the
    kriging'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**numpy**](https://numpy.org/) for some numerical calculations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**plotly.graph_objects** to visualise surface in 3D'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, we can load the data using `pd.read_csv()`.
  prefs: []
  type: TYPE_NORMAL
- en: As this data contains information about geological surfaces from all of the
    wells within the Volve field, we can use `query()` to extract the data for the
    formation we need. In this case, we will be looking at the Hugin Formation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we get back the following table. You may notice
    that some wells have encountered the Hugin Formation multiple times. This is likely
    due to the wells penetrating the formation multiple times either due to wellbore
    or formation geometry.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3fe083adc3d22e14ab713927946e9609.png)'
  prefs: []
  type: TYPE_IMG
- en: Pandas dataframe containing information about formation picks for the Hugin
    Formation in the Volve field. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Extrapolating TVDSS to Generate Geological Surface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In my previous articles, I have focused on how we can use a process known as
    kriging to “fill in the gaps” between the measurement points. We won’t be covering
    the details of this process in this article; however, you can check [this article
    for more information](/utilising-pykrige-and-matplotlib-for-spatial-visualisation-of-geological-variations-a288b186bfd6).
  prefs: []
  type: TYPE_NORMAL
- en: Once our data has been loaded, we can run the kriging process by calling upon
    pykrige’s `OrdinaryKriging` method.
  prefs: []
  type: TYPE_NORMAL
- en: Within this call, we pass in our `x` and `y` data which represents the Easting
    and Northing position of where the wellbore encountered the formation within the
    subsurface.
  prefs: []
  type: TYPE_NORMAL
- en: As we want to generate a surface of the Hugin Formation, we need to use the
    TVDSS — True Vertical Depth Subsea — measurement. This gives a true reflection
    of how deep down the surface is below the selected datum.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b88dd30e0e686f94f40c914f5c56648b.png)'
  prefs: []
  type: TYPE_IMG
- en: Ordinary Kriging results for the Hugin Formation. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Once the model has been generated, we can apply it to two arrays that cover
    the entire range of the well/penetration points.
  prefs: []
  type: TYPE_NORMAL
- en: This allows us to generate a grid of values which are then passed into the `OrdinaryKriging`
    object we generated above.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To finish things off, we can generate a simple 2D map view of our surface using
    matplotlib’s `imshow` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/97edf6864197a597eb1b6d3a1069c4f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 2D surface and contour map of the Hugin Formation after applying kriging. Image
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Simple 3D Surface Plot with Plotly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To convert our 2D surface to 3D, we need to use [**Plotly**](https://plotly.com/).
    We could use matplotlib to do this; however, from my experience, it is easier,
    smoother and more interactive to generate the 3D visualisations with Plotly.
  prefs: []
  type: TYPE_NORMAL
- en: In the code below, we first create our grid of coordinates. To do this, we use
    numpy’s `linspace` function. This function will create a set of evenly spaced
    numbers over a specified range. For our dataset and example, the range extends
    from the minimum to the maximum of `xgrid_extent` and `ygrid_extent`.
  prefs: []
  type: TYPE_NORMAL
- en: The total number of values used within this range will be equivalent to the
    number of x and y elements present in the `zstar` grid we created above.
  prefs: []
  type: TYPE_NORMAL
- en: Once our grid is formed, we then call upon the Plotly.
  prefs: []
  type: TYPE_NORMAL
- en: First, we create our figure object and then use `fig.add_trace` to add our 3D
    surface plot to the figure.
  prefs: []
  type: TYPE_NORMAL
- en: Once this has been added, we need to tweak the layout of our plot so that we
    have axis labels, a defined width and height, and some padding.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When we run the code above, we get back the following interactive plot showing
    the geological surface of the Hugin formation based on the multiple encounters
    from the drilled wellbores.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9fbe210e133035e71e93d15f672a0a39.png)'
  prefs: []
  type: TYPE_IMG
- en: 3D Surface plot of the Hugin Formation generated using Plotly. Image by the
    author.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing a Fully Intepreted Surface with Plotly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The [Volve dataset](https://www.equinor.com/energy/volve-data-sharing) has a
    number of fully interpreted surfaces that have been generated from geological
    interpretations, including seismic data.
  prefs: []
  type: TYPE_NORMAL
- en: This data contains the `x` and `y` locations of data points across the field,
    as well as our TVDSS data (`z`).
  prefs: []
  type: TYPE_NORMAL
- en: The data supplied on the Volve data portal is in the form of a .dat file, however,
    with a bit of manipulation within a text editor, it can easily be converted to
    a CSV file and loaded using pandas.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bdd06f3e097be2619a77623331462ee3.png)'
  prefs: []
  type: TYPE_IMG
- en: X, Y and Z locations of the Hugin Formation. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have the data loaded, we can make things easier for ourselves by extracting
    the x, y and z data to variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We then need to create a regularly spaced grid between our min and max positions
    within the x and y data locations. This can be done using numpy’s meshgrid.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: There are several ways to interpolate between a series of data points. The method
    chosen will depend on the form your data is in (regularly sampled data points
    vs irregularly sampled), data size and computing power.
  prefs: []
  type: TYPE_NORMAL
- en: If we have a large dataset like the one here, it will be much more computationally
    expensive with some of the methods such as the Radial Basis Function.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we will use the LinearNDInterpolator method within scipy to
    build our model, and then apply it to our z (TVDSS) variable.
  prefs: []
  type: TYPE_NORMAL
- en: In order for us to interpolate between points, we need to reshape `xi`, `yi`
    to 1D arrays for interpolation, as `LinearNDInterpolator` expects 1D array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Once that has been computed, we can move on to creating our 3D Surface with
    [Plotly](https://plotly.com/) Graph Objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we get back the following 3D surface plot of the
    Hugin Formation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4673d7a70febd19ceaa6df391d8a51e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Fully interpreted geological surface of the Hugin Formation. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: When we compare this plot to the one generated from wellbore measurements, we
    can definitely see similarities in the overall shape with the valley in the middle.
    However, the seismic-derived surface provides much greater detail than the well-derived
    formation tops one.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e51546f617b062e678c83b6cb436d08c.png)![](../Images/deb8133f83b29ad39d0904dfd38730f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparison of Hugin Formation surface generated from sparse well log measurements
    (left) to a surface generated from seismic data (right). Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within this short tutorial, we have seen how we can use [Plotly’s](https://plotly.com/)
    3D Surface plot to generate an interactive 3D visualisation of a geological surface.
    With well log derived formation tops, we can generate a very basic-looking 3D
    surface. This is due to the measurements being restricted to where the wellbores
    that have intersected the Hugin Formation, which means we end up with a low-resolution
    surface.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, we can generate a much more realistic impression of the formation
    if we have more detailed measurement points, such as from seismic-derived horizons.
  prefs: []
  type: TYPE_NORMAL
- en: Both methods are equally valid, however, you do have to bear in mind that when
    extrapolating from formation tops that have been derived from well log measurements
    alone, we may not have been able to generate a full picture of that formation
    across the area.
  prefs: []
  type: TYPE_NORMAL
- en: Dataset Used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The data used within this tutorial is a subset of the Volve Dataset that Equinor
    released in 2018\. Full details of the dataset, including the licence, can be
    found at the link below
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.equinor.com/energy/volve-data-sharing?source=post_page-----8829c06a5c9a--------------------------------)
    [## Volve field data set'
  prefs: []
  type: TYPE_NORMAL
- en: Equinor has released a complete set of data from the Volve field, 2008-2016\.
    Click here to download for study, research…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.equinor.com](https://www.equinor.com/energy/volve-data-sharing?source=post_page-----8829c06a5c9a--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'The Volve data license is based on CC BY 4.0 license. Full details of the license
    agreement can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cdn.sanity.io/files/h61q9gi9/global/de6532f6134b9a953f6c41bac47a0c055a3712d3.pdf?equinor-hrs-terms-and-conditions-for-licence-to-data-volve.pdf](https://cdn.sanity.io/files/h61q9gi9/global/de6532f6134b9a953f6c41bac47a0c055a3712d3.pdf?equinor-hrs-terms-and-conditions-for-licence-to-data-volve.pdf=)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Secondly, you can get the full Medium experience and support thousands of
    other writers and me by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the fantastic Medium articles, as well as the
    chance to make money with your writing.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support.*'
  prefs: []
  type: TYPE_NORMAL
