- en: How to Extend Pandas DataFrames with Custom Methods to Supercharge Code Functionality
    and Readability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-extend-pandas-dataframes-with-custom-methods-to-supercharge-code-functionality-readability-f4ae983ad715](https://towardsdatascience.com/how-to-extend-pandas-dataframes-with-custom-methods-to-supercharge-code-functionality-readability-f4ae983ad715)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**A step-by-step guide to extending pandas DataFrames with custom methods including
    full examples of how to implement extensions for conditional probability and expected
    values**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://grahamharrison-86487.medium.com/?source=post_page-----f4ae983ad715--------------------------------)[![Graham
    Harrison](../Images/c6bfe00c6e0cfcdf3bd042c7fdc03554.png)](https://grahamharrison-86487.medium.com/?source=post_page-----f4ae983ad715--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f4ae983ad715--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f4ae983ad715--------------------------------)
    [Graham Harrison](https://grahamharrison-86487.medium.com/?source=post_page-----f4ae983ad715--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f4ae983ad715--------------------------------)
    ·6 min read·Oct 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a15437590c86b85c8418a6056b45fb95.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Markus Spiske](https://unsplash.com/@markusspiske?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/hvSr_CVecVI?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pandas data frames come with a wide range of in-built functions, but there are
    always new ways that Python programmers will want to interrogate and transform
    their data.
  prefs: []
  type: TYPE_NORMAL
- en: The Opportunity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A common approach is to write functions and pass the data frames as parameters
    but this can become unwieldly, whereas the optimum approach would be to add new
    methods and properties directly to the pandas classes.
  prefs: []
  type: TYPE_NORMAL
- en: The Way Forward
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is very easy to extend the functionality of classes in pandas or any other
    library with custom methods and properties producing code which is easy to read,
    understand and re-use.
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I had been writing some code for a causal inference library that involved some
    complex data operations and the constant calls out to functions made the code
    difficult to read and understand.
  prefs: []
  type: TYPE_NORMAL
- en: I hit on the idea that if pandas data frames did the things that I was writing
    functions for natively the code would become clean, simple and easy to understand
    and it was only a small jump from there to finding out how to extend pandas myself
    …
  prefs: []
  type: TYPE_NORMAL
- en: The Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first function I wanted to implement was probability and conditional probability.
    Let us consider the following dataset …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/61346ad3797b5150c68255667910507b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: This is a synthetic dataset that captures the relationship between training,
    skills and income with each row representing an individual who either trained
    (or did not), acquired skills (or did not) and increased their income (or did
    not).
  prefs: []
  type: TYPE_NORMAL
- en: It would be very useful to know — given our data what is the probability that
    training was received.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be expressed as a mathematical formula as follows: **ℙ(𝑡𝑟𝑎𝑖𝑛𝑖𝑛𝑔=1)**
    which means “what is the probability that training = 1?”.'
  prefs: []
  type: TYPE_NORMAL
- en: The traditional way of working this out would be to write specific code to filter
    the `DataFrame` down to just the rows where `training==1` and count the rows in
    the filter as a proportion of the overall data ...
  prefs: []
  type: TYPE_NORMAL
- en: This is fairly straightforward, but specific code has to be written every time
    a probability needs to be calculated and it is not immediately obvious that this
    code relates to probabilities. Wouldn’t it be much better if we could simple write
    `df_training.probability("p(training=1)")`?
  prefs: []
  type: TYPE_NORMAL
- en: Well, it turns out that this can be done in just 7 lines of program code for
    any probability or conditional probability!
  prefs: []
  type: TYPE_NORMAL
- en: The Complete Source Code for Probabilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is the full code followed by a detailed explanation…
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Regular Expressions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code has been significantly compacted by using regular expressions to implement
    string parsing and whilst this is not an article about regular expressions it
    would be useful to take a moment to understand them …
  prefs: []
  type: TYPE_NORMAL
- en: It is easier to understand a regular expression by using one of the freely available
    parsers like [https://regex101.com/](https://regex101.com/). Armed with regex101
    it is easy to unpack and explain the regular expressions that have been used …
  prefs: []
  type: TYPE_NORMAL
- en: '`VARIABLE_REGEX` - `[a-zA-Z0-9_ "\'']+` matches variable names, for example
    "SurnameField", "ABC123", X, training etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OPERATOR_REGEX` - `=|<|<=|>|>=|!=` matches the common mathematical operators
    i.e. =, <, <=, >, >=, !='
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VALUE_REGEX` - `\''[^\'']*\''|\"[^\"]*\"|-?\d+\.?\d*` matches a value, for
    example 48.52, 5, "01/01/2023", ''Hello'' etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ASSIGNMENT_REGEX` then concatenates those expression to identify the pattern
    VARIABLE, OPERATOR, VALUE.'
  prefs: []
  type: TYPE_NORMAL
- en: For example …
  prefs: []
  type: TYPE_NORMAL
- en: '`re.findall(ASSIGNMENT_REGEX, "training=1, income=0")` will parse `"training=1,
    income=0"` into `[(''training'', ''='', ''1''), (''income'', ''='', ''0'')]`'
  prefs: []
  type: TYPE_NORMAL
- en: Finally we have `PROB_REGEX` - `(?i)^p\(([^|]+)(?:\s*\|\s*)?(.*)?\)$`
  prefs: []
  type: TYPE_NORMAL
- en: This is used to parse probability expressions and conditional probability expressions
    as follows …
  prefs: []
  type: TYPE_NORMAL
- en: '`re.findall(PROB_REGEX, "p(A=5, B=6)")` returns `[(''A=5, B=6'', '''')]` and
    `re.findall(PROB_REGEX, "p(A=5, B=6 | X=1, Y=2)")` returns `[(''A=5, B=6 '', ''X=1,
    Y=2'')]`'
  prefs: []
  type: TYPE_NORMAL
- en: Probability and Conditional Probability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point it is worth taking a small diversion to explore conditional probability
    statements.
  prefs: []
  type: TYPE_NORMAL
- en: We have already established that **ℙ(𝑡𝑟𝑎𝑖𝑛𝑖𝑛𝑔=1)** can be read as “what is the
    probability that training = 1?”
  prefs: []
  type: TYPE_NORMAL
- en: 'This next expression is a conditional probability: **ℙ(𝑖𝑛𝑐𝑜𝑚𝑒=1∣𝑡𝑟𝑎𝑖𝑛𝑖𝑛𝑔=1).**'
  prefs: []
  type: TYPE_NORMAL
- en: It can be read as “what is the probability that income = 1 given that training
    = 1?” i.e. in our data example “what is the probability that income increased
    given that training has been received?”.
  prefs: []
  type: TYPE_NORMAL
- en: The part of the expression on the left hand side of the “|” is termed the “outcome”
    and on the right hand side as the “events” and the whole thing **ℙ(𝑜𝑢𝑡𝑐𝑜𝑚𝑒∣𝑒𝑣𝑒𝑛𝑡𝑠)**
    can be read as “what is the probability of the outcome given that the events have
    already occurred?”
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So to break our code down let’s start with the `probability` function ...
  prefs: []
  type: TYPE_NORMAL
- en: '`parse_probability_expr = re.findall(PROB_REGEX, expression)` parses the expression
    passed in so `"p(income=1 | training=1, skills=1)"` is parsed into `[(''income=1
    '', ''training=1, skills=1'')]`.'
  prefs: []
  type: TYPE_NORMAL
- en: … so `parse_probability_expr[0][1].strip()` contains `'training=1, skills=1'`
    and `parse_probability_expr[0][0].strip()` contains `'income=1'`
  prefs: []
  type: TYPE_NORMAL
- en: To understand the rest of the function lets take a look at the `_filter_dataset`
    function ...
  prefs: []
  type: TYPE_NORMAL
- en: The next stage is to unpack the `_filter_dataset` function ...
  prefs: []
  type: TYPE_NORMAL
- en: '`_filter_dataset` is taking part of a probability expression like `''training=1,
    skills=1''` and converting it into a `DataFrame` filter.'
  prefs: []
  type: TYPE_NORMAL
- en: For example `'training=1, skills=1'` is transformed into `"(data['training']
    == 1) & (data['skills'] == 1)"` which is then applied to the `DataFrame` to filter
    it.
  prefs: []
  type: TYPE_NORMAL
- en: The remaining code uses `_filter_dataset` to calculate the probability from
    the expression ...
  prefs: []
  type: TYPE_NORMAL
- en: Also note that if there is no conditional, for example in the case where the
    expression is something like `p(training=1)` then step 1 simply returns the full
    dataset so step 2 will calculate the (non conditional) probability correctly
  prefs: []
  type: TYPE_NORMAL
- en: Extending the Pandas DataFrame Class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The only thing left to do is to use Python “monkey patching” notation to extend
    the `DataFrame` class with a new method ...
  prefs: []
  type: TYPE_NORMAL
- en: '`pd.DataFrame.probability = probability`'
  prefs: []
  type: TYPE_NORMAL
- en: This effectively adds a new method to the pandas `DataFrame` class and any `DataFrame`
    you create will be able to call the new method to calculate probabilities and
    conditional probabilities on the data.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if the complete source code is stored in a separate Python module, for
    example `dataframe_extensions.py` then a simple 1 line import will include those
    extension methods and any other code module that you write ...
  prefs: []
  type: TYPE_NORMAL
- en: '`import dataframe_extensions`'
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the code has been written and the`DataFrame` class has been extended it
    is very easy and intuitive to invoke it ...
  prefs: []
  type: TYPE_NORMAL
- en: '`0.5`'
  prefs: []
  type: TYPE_NORMAL
- en: '`0.05`'
  prefs: []
  type: TYPE_NORMAL
- en: '`0.1`'
  prefs: []
  type: TYPE_NORMAL
- en: Bonus Section — Expected Values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Expected values or expectancy represents the average or long-term value of a
    random variable.
  prefs: []
  type: TYPE_NORMAL
- en: Where we have a sample of continuous data in a `DataFrame` column this would
    simply be the mean - `df_training["training"].mean()` which does not seem worth
    an extension function.
  prefs: []
  type: TYPE_NORMAL
- en: However, expectation can be conditional e.g. **𝔼[𝑖𝑛𝑐𝑜𝑚𝑒|𝑡𝑟𝑎𝑖𝑛𝑖𝑛𝑔=1]** can be
    read as “What is the expected value of income given that training = 1?”
  prefs: []
  type: TYPE_NORMAL
- en: And by re-using the coding patterns developed above to extend a `DataFrame`
    for probabilities, expected values can be implemented as a method extension in
    just 3 lines of code ...
  prefs: []
  type: TYPE_NORMAL
- en: The Complete Source Code for Expected Values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is a synthetic dataset that contains continuous data followed by some examples
    of calculating expected values using the code above …
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/20a2e5e4f1057dd869a638477edd1179.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: … and here is some testing to show the expected values extension in action …
  prefs: []
  type: TYPE_NORMAL
- en: '`4.412406593060421`'
  prefs: []
  type: TYPE_NORMAL
- en: '`4.429821998698432`'
  prefs: []
  type: TYPE_NORMAL
- en: '`3.7051574107849214`'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Extending library classes by adding new methods or properties can result in
    source code that is easy to understand, clean, concise and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: The Python convention for “monkey patching” can easily be used to implement
    extensions, even where the classes exist in a standard, external library like
    pandas.
  prefs: []
  type: TYPE_NORMAL
- en: By creating a separate module for extension classes that can be imported into
    future projects, Python developers can build up a library of extensions to help
    improve the efficiency and effectiveness of future projects.
  prefs: []
  type: TYPE_NORMAL
- en: Connect and Get in Touch …
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you enjoyed this article, you can get unlimited access to thousands more
    by becoming a Medium member for just $5 a month by [clicking on my referral link](https://grahamharrison-86487.medium.com/membership)
    (I will receive a proportion of the fees if you sign up using this link at no
    extra cost to you).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://grahamharrison-86487.medium.com/membership?source=post_page-----f4ae983ad715--------------------------------)
    [## Join Medium with my referral link - Graham Harrison'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: grahamharrison-86487.medium.com](https://grahamharrison-86487.medium.com/membership?source=post_page-----f4ae983ad715--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: … or connect by …
  prefs: []
  type: TYPE_NORMAL
- en: '[Subscribing to a free e-mail whenever I publish a new story](https://grahamharrison-86487.medium.com/subscribe).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Taking a quick look at my previous articles](https://grahamharrison-86487.medium.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Downloading my free strategic data-driven decision making framework](https://relentless-originator-3199.ck.page/5f4857fd12).'
  prefs: []
  type: TYPE_NORMAL
- en: Visiting my data science website — [The Data Blog](https://www.the-data-blog.co.uk/).
  prefs: []
  type: TYPE_NORMAL
