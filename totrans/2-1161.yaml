- en: How To Deploy PyTorch Models as Production-Ready APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何将 PyTorch 模型部署为生产就绪的 API
- en: 原文：[https://towardsdatascience.com/how-to-deploy-pytorch-models-as-production-ready-apis-f61136fd0244](https://towardsdatascience.com/how-to-deploy-pytorch-models-as-production-ready-apis-f61136fd0244)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-deploy-pytorch-models-as-production-ready-apis-f61136fd0244](https://towardsdatascience.com/how-to-deploy-pytorch-models-as-production-ready-apis-f61136fd0244)
- en: An end-to-end use-case combining PyTorch Lightning and BentoML
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个将 PyTorch Lightning 和 BentoML 结合的端到端用例
- en: '[](https://ahmedbesbes.medium.com/?source=post_page-----f61136fd0244--------------------------------)[![Ahmed
    Besbes](../Images/93804d9291439715e578f204b79c9bdd.png)](https://ahmedbesbes.medium.com/?source=post_page-----f61136fd0244--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f61136fd0244--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f61136fd0244--------------------------------)
    [Ahmed Besbes](https://ahmedbesbes.medium.com/?source=post_page-----f61136fd0244--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ahmedbesbes.medium.com/?source=post_page-----f61136fd0244--------------------------------)[![Ahmed
    Besbes](../Images/93804d9291439715e578f204b79c9bdd.png)](https://ahmedbesbes.medium.com/?source=post_page-----f61136fd0244--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f61136fd0244--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f61136fd0244--------------------------------)
    [Ahmed Besbes](https://ahmedbesbes.medium.com/?source=post_page-----f61136fd0244--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f61136fd0244--------------------------------)
    ·12 min read·Apr 3, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f61136fd0244--------------------------------)
    ·阅读时间 12 分钟·2023年4月3日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/3d420812acc306b94ced6405638c8222.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3d420812acc306b94ced6405638c8222.png)'
- en: Photo by [SpaceX](https://unsplash.com/@spacex?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [SpaceX](https://unsplash.com/@spacex?utm_source=medium&utm_medium=referral)
    提供，来自 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: As an ML engineer, I often encounter two main challenges when working with deep
    learning models in production.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名机器学习工程师，我在处理生产环境中的深度学习模型时经常遇到两个主要挑战。
- en: The first one is the need to rewrite boilerplate code for each project to handle
    tasks like training loops, data loading, or metric computation. As this work often
    makes the codebase more complex with unnecessary abstractions, it slows down the
    iterative process.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个挑战是需要为每个项目重写模板代码，以处理训练循环、数据加载或度量计算等任务。由于这项工作常常使代码库变得更加复杂，并增加了不必要的抽象，这减慢了迭代过程。
- en: The second challenge involves the wide range of skills or tools required to
    efficiently deploy trained models to the cloud. This includes Docker, APIs, or
    cloud services. Not to mention the knowledge related to GPU support, multithreading,
    or scalability.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个挑战涉及到将训练好的模型高效部署到云端所需的广泛技能或工具。这包括 Docker、API 或云服务，更不用提与 GPU 支持、多线程或可扩展性相关的知识。
- en: If you’re a data scientist, you’re clearly not expected to know all this.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是数据科学家，你显然不需要了解所有这些。
- en: '*There are fortunately two Python frameworks designed to mitigate these issues:*
    [***Pytorch Lightning***](https://github.com/Lightning-AI/lightning) *and* [***BentoML***](https://github.com/bentoml/BentoML)*.'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*幸运的是，有两个 Python 框架被设计用来缓解这些问题：* [***Pytorch Lightning***](https://github.com/Lightning-AI/lightning)
    *和* [***BentoML***](https://github.com/bentoml/BentoML)*。'
- en: In this article, we will combine these frameworks together to build* ***a production-ready
    image classification service*** *deployed to a Kubernetes-native environment.*
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在本文中，我们将结合这些框架来构建* ***一个生产就绪的图像分类服务*** *并将其部署到 Kubernetes 原生环境中。*
- en: Let’s have a look 🔍
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 🔍
- en: '![](../Images/7d5f91d98b2edd4999334c0836a7614e.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7d5f91d98b2edd4999334c0836a7614e.png)'
- en: Workflow — Image by the author
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流 — 作者提供的图像
- en: 1 — Train a multi-label image classifier with PyTorch Lightning ⚡
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1 — 使用 PyTorch Lightning ⚡ 训练多标签图像分类器
- en: This section will focus on using PyTorch Lightning and will detail some of its
    functionalities as well as the training process.
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本节将重点介绍 PyTorch Lightning，并详细介绍其一些功能以及训练过程。
- en: 'As a dataset, we will use the CelebFaces Attributes from [Kaggle](https://www.kaggle.com/datasets/jessicali9530/celeba-dataset):
    it contains +200K face images of various celebrities with additional metadata
    such as identities, landmark locations, and **40 binary attribute annotations
    per image.**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据集，我们将使用来自 [Kaggle](https://www.kaggle.com/datasets/jessicali9530/celeba-dataset)
    的 CelebFaces Attributes：它包含 +200K 张各种名人的面部图像，附加了诸如身份、地标位置和 **每张图像 40 个二进制属性注释**
    等元数据。
- en: We will use the face attribute metadata to train a multi-label classifier that
    detects information such as hair color, nose size, baldness, etc.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用面部属性元数据来训练一个多标签分类器，以检测诸如发色、鼻子大小、秃顶等信息。
- en: As mentioned, we will use **Pytorch Lightning** to train the model.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将使用 **Pytorch Lightning** 来训练模型。
- en: '![](../Images/ce375d5b7db3311dc779c06f279805b1.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ce375d5b7db3311dc779c06f279805b1.png)'
- en: GIF modified by the author
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: GIF 由作者修改
- en: PyTorch Lightning is a lightweight wrapper around PyTorch that standardizes
    many aspects of the training loop, data loading, and validation process. It provides
    a higher-level interface that streamlines the training process and reduces the
    amount of boilerplate code required.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch Lightning 是 PyTorch 的一个轻量级封装，标准化了训练循环、数据加载和验证过程的许多方面。它提供了一个更高级的接口，简化了训练过程，并减少了所需的样板代码。
- en: By using PyTorch Lightning, you can reduce code complexity, improve reproducibility,
    and speed up development.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PyTorch Lightning，你可以减少代码复杂性，提高可重现性，并加快开发速度。
- en: '![](../Images/3b8ae887c35eca263fd04891d32cc4fc.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3b8ae887c35eca263fd04891d32cc4fc.png)'
- en: Image by the author
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: To get the dataset, you need to log in to Kaggle and hit the download button.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取数据集，你需要登录到 Kaggle 并点击下载按钮。
- en: You can also download it from the command line after getting your credentials
    (**kaggle.json**) from your profile page.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在获得你的凭证 (**kaggle.json**) 后通过命令行下载它。
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here’s what you get after unzipping the folder:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 解压文件夹后你会得到以下内容：
- en: '![](../Images/a242b65d8f654a6b265c0ad963b8a4b2.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a242b65d8f654a6b265c0ad963b8a4b2.png)'
- en: Image by the author
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'The `**list_attr_celeba.csv**` file contains the attributes we’re interested
    in:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`**list_attr_celeba.csv**` 文件包含了我们感兴趣的属性：'
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/0ee41387a47b8c50a7ff60412dcdc525.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0ee41387a47b8c50a7ff60412dcdc525.png)'
- en: Screenshot by the author
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 截图由作者提供
- en: and the images are contained in the `img_align_celeba/img_align_celeba/` folder.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图像位于 `img_align_celeba/img_align_celeba/` 文件夹中。
- en: 'Let’s now start training this model:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们开始训练这个模型：
- en: 👉 Create a Dataset
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 👉 创建 Dataset
- en: Just like in PyTorch, we first need to define a Dataset. This is the first step
    that indicates how the data is read from the disk and converted into tensors.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在 PyTorch 中一样，我们首先需要定义一个 Dataset。这是指示数据如何从磁盘读取并转换为张量的第一步。
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 👉 Create a LightningDataModule
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 👉 创建 LightningDataModule
- en: Now we need to create a LightningDataModule, which is simply a collection of
    a train_dataloader(s), val_dataloader(s), test_dataloader(s), and predict_dataloader(s)
    along with the matching transforms and data processing/downloads steps required.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建一个 LightningDataModule，它实际上是一个包含 train_dataloader(s)、val_dataloader(s)、test_dataloader(s)
    和 predict_dataloader(s) 的集合，以及匹配的转换和数据处理/下载步骤。
- en: 'A LightningDataModule groups everything and is later passed to the trainer.
    Therefore, you don’t need to explicitly call train or valid dataloaders yourself:
    it’s automatically handled by PyTorch Lightning.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: LightningDataModule 将一切组合在一起，并随后传递给训练器。因此，你无需显式地调用训练或验证数据加载器：PyTorch Lightning
    会自动处理。
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 👉 Define a LightningModule
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 👉 定义 LightningModule
- en: 'A `[LightningModule](https://lightning.ai/docs/pytorch/stable/api/lightning.pytorch.core.LightningModule.html#lightning.pytorch.core.LightningModule)`
    doesn’t just define the architecture of your model. It organizes your PyTorch
    code into the following sections:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `[LightningModule](https://lightning.ai/docs/pytorch/stable/api/lightning.pytorch.core.LightningModule.html#lightning.pytorch.core.LightningModule)`
    不仅定义了模型的架构。它将你的 PyTorch 代码组织成以下部分：
- en: Initialization (`__init__` and `setup()`)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化 (`__init__` 和 `setup()`)
- en: The forward pass — just like in PyTorch
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前向传播 — 就像在 PyTorch 中一样
- en: Train Loop (`training_step()`)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 训练循环 (`training_step()`)
- en: Validation Loop (`validation_step()`)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证循环 (`validation_step()`)
- en: Test Loop (`test_step()`) — not shown here
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试循环 (`test_step()`) — 这里未显示
- en: Optimizers and LR Schedulers (`configure_optimizers()`)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 优化器和学习率调度器 (`configure_optimizers()`)
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 👉 Define callbacks
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 👉 定义回调函数
- en: Callbacks are utility functions that you can hook to your training pipeline
    to get executed at particular moments of the workflow, for example, the start
    or end of an epoch.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 回调是你可以挂钩到训练管道中的实用函数，用于在工作流的特定时刻执行，例如，训练周期的开始或结束。
- en: In the following, we’re going to use two callbacks for [model checkpointing](https://lightning.ai/docs/pytorch/latest/api/lightning.pytorch.callbacks.ModelCheckpoint.html#lightning.pytorch.callbacks.ModelCheckpoint)
    (to periodically save the model on disk when the metrics improve) and [early stopping](https://lightning.ai/docs/pytorch/latest/api/lightning.pytorch.callbacks.EarlyStopping.html#lightning.pytorch.callbacks.EarlyStopping)
    (to stop training when metrics stop improving)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将使用两个回调，[模型检查点](https://lightning.ai/docs/pytorch/latest/api/lightning.pytorch.callbacks.ModelCheckpoint.html#lightning.pytorch.callbacks.ModelCheckpoint)（在指标改善时定期将模型保存到磁盘）和[早停](https://lightning.ai/docs/pytorch/latest/api/lightning.pytorch.callbacks.EarlyStopping.html#lightning.pytorch.callbacks.EarlyStopping)（当指标停止改善时停止训练）。
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 👉 Strat the training
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 👉 开始训练
- en: Once you’ve organized your PyTorch code into a `[LightningModule](https://lightning.ai/docs/pytorch/stable/api/lightning.pytorch.core.LightningModule.html#lightning.pytorch.core.LightningModule)`,
    the `[Trainer](https://lightning.ai/docs/pytorch/stable/common/trainer.html)`
    automates everything else.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将PyTorch代码组织成一个`[LightningModule](https://lightning.ai/docs/pytorch/stable/api/lightning.pytorch.core.LightningModule.html#lightning.pytorch.core.LightningModule)`，`[Trainer](https://lightning.ai/docs/pytorch/stable/common/trainer.html)`会自动处理其他所有事情。
- en: It runs the training and validation loops, computes the metrics and logs them,
    and executes the callbacks.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 它运行训练和验证循环，计算指标并记录它们，执行回调。
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/1ca44af3df78af503b3d4cb51dfb31de.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1ca44af3df78af503b3d4cb51dfb31de.png)'
- en: Image by the author
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: After training for 10 epochs on 25K images only, the best model achieves 0.864
    [AUROC](https://lightning.ai/docs/metrics/stable/classification/auroc.html) on
    the validation set.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 经过仅25K图像的10个训练周期后，最佳模型在验证集上的AUROC达到了0.864 [AUROC](https://lightning.ai/docs/metrics/stable/classification/auroc.html)。
- en: You can download the model from this S3 [link](https://bentoml-ts.s3.eu-west-3.amazonaws.com/ts_model.pt)
    and check out the code on [Github](https://github.com/ahmedbesbes/face-attributes-bentoml).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从这个S3 [链接](https://bentoml-ts.s3.eu-west-3.amazonaws.com/ts_model.pt)下载模型，并在[Github](https://github.com/ahmedbesbes/face-attributes-bentoml)查看代码。
- en: 2 — Convert the Pytorch Lightning model to TorchScript 🌬
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2 — 将Pytorch Lightning模型转换为TorchScript 🌬
- en: This section will discuss TorchScript benefits over PyTorch (or Lightning) and
    show how the conversion is done.
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本节将讨论TorchScript相对于PyTorch（或Lightning）的好处，并展示转换的过程。
- en: TorchScript is a feature in PyTorch that allows you to serialize your PyTorch
    models and run them in various environments. It provides a way to save a trained
    PyTorch model and load it into a Python-free environment or even on different
    hardware such as GPUs, FPGAs, or mobile devices.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: TorchScript是PyTorch中的一个功能，允许你序列化你的PyTorch模型，并在各种环境中运行它们。它提供了一种保存训练好的PyTorch模型并将其加载到无Python环境中，甚至在不同的硬件上运行，如GPU、FPGA或移动设备。
- en: 'This has several advantages over PyTorch:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这相对于PyTorch有几个优点：
- en: '**Portability**: With TorchScript, you can run your PyTorch models in any environment
    that supports the TorchScript runtime, regardless of the platform or language.'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**便携性**：使用TorchScript，你可以在任何支持TorchScript运行时的环境中运行你的PyTorch模型，无论平台或语言如何。'
- en: '**Performance**: TorchScript can optimize your PyTorch model for faster execution
    by fusing operations and eliminating unused operations. This can result in significant
    speedups, especially on devices with limited resources such as mobile phones.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**性能**：TorchScript可以通过融合操作和消除未使用的操作来优化你的PyTorch模型，以实现更快的执行。这可以带来显著的加速，特别是在资源有限的设备上，如手机。'
- en: '**Security**: By deploying TorchScript models, you can protect your PyTorch
    code and models from being reverse-engineered or tampered with.'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安全性**：通过部署TorchScript模型，你可以保护你的PyTorch代码和模型不被逆向工程或篡改。'
- en: '**Ease of deployment**: With TorchScript, you can easily deploy your PyTorch
    models to production without requiring a Python environment.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**部署简便性**：使用TorchScript，你可以轻松地将PyTorch模型部署到生产环境中，而无需Python环境。'
- en: For a more comprehensive overview of TorchScript, I recommend you go through
    this [tutorial](/pytorch-jit-and-torchscript-c2a77bac0fff).
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于TorchScript的更全面概述，我推荐你查看这个[教程](/pytorch-jit-and-torchscript-c2a77bac0fff)。
- en: You can easily convert a Lightning Module to TorchScript by calling the `to_torchscript`
    method.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过调用`to_torchscript`方法轻松地将Lightning模块转换为TorchScript。
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After running some tests, I found that the inference time on GPU using TorchScript
    was 2 times lower than the inference time of PyTorch Lightning. However, this
    only happens for small batches (1 or 2 as per my tests)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一些测试，我发现使用 TorchScript 的 GPU 推理时间比 PyTorch Lightning 的推理时间低 2 倍。然而，这仅发生在小批量（根据我的测试，1
    或 2 个样本）时。
- en: '**In any case, if you want to enjoy the benefits of TorchScript, you need to
    run your model outside of a Python runtime.**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**无论如何，如果你想享受 TorchScript 的好处，你需要在 Python 运行时之外运行你的模型。**'
- en: 3 — Build an image classification service with BentoML + TorchScript 🍱
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3 — 使用 BentoML + TorchScript 🍱 构建一个图像分类服务
- en: In this section, we will build a BentoML service and run it locally to serve
    the TorchScript model.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建一个 BentoML 服务并在本地运行，以服务于 TorchScript 模型。
- en: If you want to follow along, I recommend you install the project’s dependencies
    using Poetry.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想跟随本教程，我建议你使用 Poetry 安装项目的依赖项。
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You need to download the model from S3:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要从 S3 下载模型：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, we can save the TorchScript model locally using the BentoML API. This will
    automatically provide a tag for versioning and will allow you to easily load the
    model as a runner later on.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用 BentoML API 将 TorchScript 模型本地保存。这将自动提供一个版本标签，并允许你稍后轻松地将模型加载为运行器。
- en: BentoML integrates well with TorchScript so you can save the model by calling
    the **bentoml.torchscript.save_model** method.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: BentoML 与 TorchScript 集成良好，因此你可以通过调用 **bentoml.torchscript.save_model** 方法来保存模型。
- en: More info [here](https://docs.bentoml.org/en/latest/reference/frameworks/torchscript.html).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息 [here](https://docs.bentoml.org/en/latest/reference/frameworks/torchscript.html)。
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can check that the model has been saved with a unique identifier by running
    `**bentoml models list**`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行 `**bentoml models list**` 来检查模型是否已经使用唯一标识符保存。
- en: '![](../Images/1308db90a0ec0ba4f67e44dde99a5a78.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1308db90a0ec0ba4f67e44dde99a5a78.png)'
- en: Image by the author
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Now that the model is saved with BentoML API, we can create a service.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在模型已经使用 BentoML API 保存，我们可以创建一个服务。
- en: 'We first import the dependencies, load the model, get a runner from it, and
    define a service:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先我们导入依赖项，加载模型，从中获取一个运行器，并定义一个服务：
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Then, we define an API route that takes an image as input and returns a JSON
    as output with the predicted labels and the corresponding probabilities.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们定义一个 API 路由，该路由以图像作为输入，返回一个包含预测标签和相应概率的 JSON 作为输出。
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To launch the service locally, run the following command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地启动服务，请运行以下命令：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/10673f7782dab9ac0e40a54a8b51a781.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/10673f7782dab9ac0e40a54a8b51a781.png)'
- en: Image by the author
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: If you want to try out the API, visit the Swagger UI (at http://localhost:3000)
    and upload your image directly.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想尝试这个 API，可以访问 Swagger UI（在 http://localhost:3000）并直接上传你的图片。
- en: Here’s an example.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子。
- en: '![](../Images/85f1af3109eab9be40f447f7b7a3a92f.png)![](../Images/18fb9cd72b11e7201db2cceb437072fd.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/85f1af3109eab9be40f447f7b7a3a92f.png)![](../Images/18fb9cd72b11e7201db2cceb437072fd.png)'
- en: Demo
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 演示
- en: 4 — Deploy the service to the cloud
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4 — 将服务部署到云端
- en: In this section, we’ll build a bento and deploy it to a cloud platform that’s
    specifically designed to host it and scale it.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建一个 bento 并将其部署到专门设计用于托管和扩展的云平台上。
- en: '**what is a bento?**'
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**什么是 bento？**'
- en: ''
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: BentoML packages everything you need in an ML project into a distribution format
    called a ***bento*** 🍱(this is where the analogy makes sense, as a *bento* is
    originally a Japanese lunch box that holds a single portion meal consisting of
    a main dish and some sides)
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: BentoML 将 ML 项目中所需的一切打包成一种叫做 ***bento*** 🍱的分发格式（这里的类比是有意义的，因为 *bento* 原本是一个日本的便当盒，里面装有一份主要菜肴和一些配菜）
- en: When a bento is built, you can deploy it to any cloud infrastructure.
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当一个 bento 构建完成后，你可以将其部署到任何云基础设施上。
- en: 👉 Build the bento
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 👉 构建 bento
- en: To build a bento, you must first provide a configuration file called `bentofile.yaml`
    that tells how the bento must be built i.e what files should be included in it
    and what python dependencies are needed.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个 bento，你必须首先提供一个名为 `bentofile.yaml` 的配置文件，说明 bento 应如何构建，即要包含哪些文件和所需的 python
    依赖项。
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Running the following command will build the bento.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令将构建 bento。
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](../Images/0c346944701d58d3977879b38e8f893f.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0c346944701d58d3977879b38e8f893f.png)'
- en: Image by the author
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 👉 Connect to BentoCloud and push the bento
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 👉 连接到 BentoCloud 并推送 bento
- en: Before pushing the bento, you need to make sure you’re logged in to a cloud
    platform that acts as a remote registry (something like Dockerhub for containers).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在推送 bento 之前，你需要确保你已经登录到一个作为远程注册表的云平台（类似于 Dockerhub 这样的容器平台）。
- en: I was lucky enough that the BentoML team provided me with access to their [platform](https://default.cloud.bentoml.com/)
    where they push and host bentos.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我很幸运，BentoML 团队为我提供了他们的 [平台](https://default.cloud.bentoml.com/) 的访问权限，在那里他们推送和托管
    bentos。
- en: Want to create an account on BentoCloud and start deploying awesome models?
    Check out this [link](https://www.bentoml.com/bento-cloud/) to schedule a demo
    and talk to the BentoML team.
  id: totrans-123
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 想在 BentoCloud 上创建一个账户并开始部署精彩的模型吗？请查看这个 [链接](https://www.bentoml.com/bento-cloud/)
    来安排演示并与 BentoML 团队进行交流。
- en: After signing up to BentoCloud, I was able to generate API tokens and log in
    using the `yatai` command. (*we’ll see what Yatai is exactly in the last section
    of the post)*
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '注册 BentoCloud 后，我能够生成 API 令牌并使用 `yatai` 命令登录。 (*我们将在本文的最后一部分中详细了解 Yatai 的具体情况*) '
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/0903b427eb3a8de6f4e7546219c87c43.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0903b427eb3a8de6f4e7546219c87c43.png)'
- en: Logging in to BentoCloud
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 登录 BentoCloud
- en: 'Once logged in, you can push: this will upload your **bento** and the underlying
    **model** simultaneously to the cloud.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，你可以推送：这将同时将你的 **bento** 和基础的 **模型** 上传到云端。
- en: '[PRE17]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](../Images/152cbab52fbc7f071a868063d16e756d.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/152cbab52fbc7f071a868063d16e756d.png)'
- en: Pushing my first bento
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 推送我的第一个 bento
- en: You can check that these two artifacts are visible on the interface, along with
    other bentos and models (from other users)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以检查这两个工件是否在界面上可见，连同其他 bentos 和模型（来自其他用户）
- en: '![](../Images/0814a55f6b3c42dd5cd895ba002158f6.png)![](../Images/fb0a670457ba7f931ffdf47c0bce791e.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0814a55f6b3c42dd5cd895ba002158f6.png)![](../Images/fb0a670457ba7f931ffdf47c0bce791e.png)'
- en: the bento and the model
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: bento 和模型
- en: 👉 Create a deployment
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 👉 创建部署
- en: Deploying your bento from the platform is very simple. Head over to the Deployments
    tab and click on the top right black **Create** button.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 从平台部署你的 bento 非常简单。前往部署选项卡，点击右上角的黑色 **创建** 按钮。
- en: '![](../Images/7c41ada79e9c7ddc44a97b01cc87ec1f.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7c41ada79e9c7ddc44a97b01cc87ec1f.png)'
- en: Image by the author
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'This will open up the following form where you need to fill in the deployment
    information:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开以下表单，你需要填写部署信息：
- en: '**The cluster information and the deployment name**'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集群信息和部署名称**'
- en: '![](../Images/2b9136dfb15c86c8fed2175ff0c0f7d1.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2b9136dfb15c86c8fed2175ff0c0f7d1.png)'
- en: Image by the author
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: '**The bento repository and the version**'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**bento 存储库及其版本**'
- en: '![](../Images/bb31da335e8ee3ded50cee65f1336758.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bb31da335e8ee3ded50cee65f1336758.png)'
- en: Image by the author
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: '**Configurations for the API server: number of replicas, CPU, and memory requests**'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API 服务器的配置：副本数量、CPU 和内存请求**'
- en: '![](../Images/819afa1a457ad5a190738bef214236cb.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/819afa1a457ad5a190738bef214236cb.png)'
- en: Image by the author
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: '**Configuration for each runner: there’s only one in our case**'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每个运行程序的配置：在我们的例子中只有一个**'
- en: '![](../Images/26e4f5d55318af30ae6767b82ecc26e9.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/26e4f5d55318af30ae6767b82ecc26e9.png)'
- en: Image by the author
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Once you hit the **Submit** button, you can start the deployment. This will
    build the image and deploy the API server and the runners on separate pods. **This
    is a killer feature that separates BentoML from any serving platform I’ve used
    before.**
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦点击 **提交** 按钮，你可以开始部署。这将构建镜像并在单独的 Pod 上部署 API 服务器和运行程序。**这是一个使 BentoML 与我之前使用的任何服务平台区分开的杀手级特性。**
- en: '![](../Images/79466e715e49f1f46edf877143a8480c.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/79466e715e49f1f46edf877143a8480c.png)'
- en: Image by the author
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'Once your bento is successfully deployed, click on your deployment, then on
    the URL:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的 bento 成功部署，点击你的部署，然后点击 URL：
- en: '![](../Images/0d4602dc41a74aa5ff647c88fbec0844.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0d4602dc41a74aa5ff647c88fbec0844.png)'
- en: 'If everything works as expected, opening this URL in the browser will lead
    you to this:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按预期工作，在浏览器中打开此 URL 将会带你到这个页面：
- en: '![](../Images/987e5bf21635aaeaa84549e05302b3df.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/987e5bf21635aaeaa84549e05302b3df.png)'
- en: 'The API is now deployed: you can query it from everywhere on the internet.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: API 现在已经部署：你可以从互联网上的任何地方查询它。
- en: Need to manage your bentos on your own infrastructure? Try Yatai
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要在自己的基础设施上管理你的 bentos 吗？试试 Yatai
- en: You can replicate the BentoCloud platform on your own cloud infrastructure thanks
    to the [Yatai](https://github.com/bentoml/Yatai) project that the BentoML team
    open-sourced.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 BentoML 团队开源的 [Yatai](https://github.com/bentoml/Yatai) 项目在你自己的云基础设施上复制
    BentoCloud 平台。
- en: '![](../Images/f86f6feb8ad7b0e333465938d3915e03.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f86f6feb8ad7b0e333465938d3915e03.png)'
- en: 'source: [https://github.com/bentoml/Yatai](https://github.com/bentoml/Yatai)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '来源: [https://github.com/bentoml/Yatai](https://github.com/bentoml/Yatai)'
- en: Yatai acts as a centralized registry that you can deploy to any Kebernetes-native
    environment.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Yatai 作为一个集中式注册表，你可以将其部署到任何Kubernetes原生环境中。
- en: It’s compatible with all major cloud platforms (AWS, Azure, and GCP),
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 它与所有主要云平台（AWS、Azure 和 GCP）兼容。
- en: It helps you manage the deployment lifecycle to deploy, update, or roll back
    via API or Web UI.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 它帮助你管理部署生命周期，通过API或Web UI进行部署、更新或回滚。
- en: Conclusion 🔚
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论 🔚
- en: If you’ve made it this far, I thank you for your time and hope you’ve enjoyed
    learning about PyTorch Lightning, TorchScript, and BentoML.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你读到这里，我感谢你的时间，并希望你喜欢了解PyTorch Lightning、TorchScript和BentoML。
- en: Combined together, these three tools help you prototype and deploy industrial-grade
    deep learning models with the best-in-class DevOps practices.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 将这三种工具结合起来，帮助你使用最佳实践的DevOps方法来原型设计和部署工业级深度学习模型。
- en: 'Of course, there’s room for improvement in the different steps of the workflow
    I’ve shown: I just hope this post was a good starter to dive into MLOps.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我展示的工作流中的不同步骤还有改进的空间：我只是希望这篇文章能够作为一个好的起点，帮助你深入了解MLOps。
- en: Resources 🗞
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源 🗞
- en: '[https://towardsdatascience.com/10-ways-bentoml-can-help-you-serve-and-scale-machine-learning-models-4060f1e59d0d](/10-ways-bentoml-can-help-you-serve-and-scale-machine-learning-models-4060f1e59d0d)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://towardsdatascience.com/10-ways-bentoml-can-help-you-serve-and-scale-machine-learning-models-4060f1e59d0d](/10-ways-bentoml-can-help-you-serve-and-scale-machine-learning-models-4060f1e59d0d)'
- en: '[https://towardsdatascience.com/10-ways-bentoml-can-help-you-serve-and-scale-machine-learning-models-4060f1e59d0d](/10-ways-bentoml-can-help-you-serve-and-scale-machine-learning-models-4060f1e59d0d)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://towardsdatascience.com/10-ways-bentoml-can-help-you-serve-and-scale-machine-learning-models-4060f1e59d0d](/10-ways-bentoml-can-help-you-serve-and-scale-machine-learning-models-4060f1e59d0d)'
- en: '[https://youtu.be/Dk88zv1KYMI](https://youtu.be/Dk88zv1KYMI)'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://youtu.be/Dk88zv1KYMI](https://youtu.be/Dk88zv1KYMI)'
- en: '[https://youtu.be/2awmrMRf0dA](https://youtu.be/2awmrMRf0dA)'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://youtu.be/2awmrMRf0dA](https://youtu.be/2awmrMRf0dA)'
- en: New to Medium? You can subscribe for $5 per month and unlock unlimited articles
    on various topics (tech, design, entrepreneurship…) You can support me by clicking
    on my referral [link](https://ahmedbesbes.medium.com/membership)
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对Medium不熟悉？你可以每月支付5美元订阅，解锁各种话题的无限文章（科技、设计、创业……）你可以通过点击我的推荐[链接](https://ahmedbesbes.medium.com/membership)来支持我。
- en: '[](https://ahmedbesbes.medium.com/membership?source=post_page-----f61136fd0244--------------------------------)
    [## Join Medium with my referral link - Ahmed Besbes'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ahmedbesbes.medium.com/membership?source=post_page-----f61136fd0244--------------------------------)
    [## 使用我的推荐链接加入Medium - Ahmed Besbes'
- en: Read every story from Ahmed Besbes (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读Ahmed Besbes（以及Medium上成千上万的其他作者）的每一个故事。你的会员费用直接支持……
- en: ahmedbesbes.medium.com](https://ahmedbesbes.medium.com/membership?source=post_page-----f61136fd0244--------------------------------)
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '[ahmedbesbes.medium.com](https://ahmedbesbes.medium.com/membership?source=post_page-----f61136fd0244--------------------------------)'
