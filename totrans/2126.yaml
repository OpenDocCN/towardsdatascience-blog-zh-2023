- en: Top 5 Alternatives to CSV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/top-5-ridiculously-better-csv-alternatives-595f70a9c936](https://towardsdatascience.com/top-5-ridiculously-better-csv-alternatives-595f70a9c936)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: CSV files for big data storage? Think twice — there are radically better options
    available. These 5 will save IO time and disk space.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@radecicdario?source=post_page-----595f70a9c936--------------------------------)[![Dario
    Radečić](../Images/41882a3b30bab9da43d66a59f1df366b.png)](https://medium.com/@radecicdario?source=post_page-----595f70a9c936--------------------------------)[](https://towardsdatascience.com/?source=post_page-----595f70a9c936--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----595f70a9c936--------------------------------)
    [Dario Radečić](https://medium.com/@radecicdario?source=post_page-----595f70a9c936--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----595f70a9c936--------------------------------)
    ·6 min read·Jan 5, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/582774573716f7e5671bcd9100e45e77.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Maximalfocus](https://unsplash.com/@maximalfocus?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Everyone knows CSV, but is it really the file format you should use 100% of
    the time? Well, no. It has some obvious benefits, such as direct file editing
    and ease of understanding, but the drawbacks could cost you thousands of dollars
    in disk space and I/O time.
  prefs: []
  type: TYPE_NORMAL
- en: Today I’ll show you the top CSV alternatives with detailed explanations, code,
    and most importantly — numbers. You’ll know precisely how faster alternative file
    formats are and when should you use them.
  prefs: []
  type: TYPE_NORMAL
- en: What’s Wrong With the CSV Format?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Absolutely nothing. It allows you to edit the file directly without loading
    them with a programming language such as Python, Also, you can send it directly
    to a non-tech-savvy client, and they’ll have no trouble opening it and understanding
    the content.
  prefs: []
  type: TYPE_NORMAL
- en: It’s all sunshine and rainbows until files become too big to share, too big
    to open in Excel, or so huge you need to upgrade your cloud storage plan.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to datasets with millions of rows, you shouldn’t even consider
    saving them in CSV file format. You won’t ever send such a dataset to a non-tech-savvy
    client, nor will you open it in Excel.
  prefs: []
  type: TYPE_NORMAL
- en: That’s when other file formats or CSV alternatives become a thing. Let’s go
    over them next.
  prefs: []
  type: TYPE_NORMAL
- en: Top 5 CSV Alternatives That Save Time and Space
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I find these file formats much better than CSV when working with huge tabular
    datasets:'
  prefs: []
  type: TYPE_NORMAL
- en: Pickle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parquet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feather
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avro
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ORC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’ll now explain each in a couple of sentences and show you how to work with
    them in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Pickle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use Python’s `pickle` library to serialize a Python object into a compact
    binary representation. It allows you to store, or *pickle* any Python object,
    not just Pandas DataFrames. It's often used to save machine learning models.
  prefs: []
  type: TYPE_NORMAL
- en: The biggest downside of Pickle is that its Python-specific, so cross-language
    support isn’t guaranteed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To dump a Pandas DataFrame into a pickle file format, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To read a Pickle file, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Parquet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apache Parquet is a data storage format designed for efficiency. The reason
    behind this is the column storage architecture, as it allows you to skip data
    that isn’t relevant quickly. The best part — Pandas has full native support for
    Parquet.
  prefs: []
  type: TYPE_NORMAL
- en: 'To write a Pandas DataFrame to a Parquet file, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To read a Parquet file into a Pandas DataFrame, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Feather
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Feather is a data format for storing data frames. It’s designed to push data
    frames in and out of memory as efficiently as possible. Its primary use case is
    to enable fast communication between Python and R, but you’re not limited to that
    alone.
  prefs: []
  type: TYPE_NORMAL
- en: 'To dump a Pandas DataFrame to a Feather file, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To read a Feather file as a Pandas DataFrame, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Avro
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Avro is an open-source project which provides services of data serialization
    and exchange for Apache Hadoop. It stores a JSON-like schema with the data, which
    you have to write and parse manually first.
  prefs: []
  type: TYPE_NORMAL
- en: 'To save a Pandas DataFrame as an Avro file, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'It’s quite a lot, especially if you have many columns. Reading Avro files and
    converting them to a Pandas DataFrame is also a three-step process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: ORC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ORC stands for *Optimized Row Columnar*. It’s a data format optimized for reads
    and writes in Hive. With Python, you can use the `read_orc()` function from Pandas
    to read ORC files. There's no alternative function for writing ORC files, so you'll
    have to use PyArrow.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Reading ORC files is much simpler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We’ll now set up a Python benchmark script and how these top CSV alternatives
    for Python and Pandas compare.
  prefs: []
  type: TYPE_NORMAL
- en: Top 5 CSV Alternatives — Benchmark in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this benchmark, I’ve decided to create a 5M row Pandas DataFrame with 5
    numeric and 2 textual columns. I was using M1 Pro MacBook Pro (10-core CPU, 16
    GB RAM) for the benchmark, so your mileage may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code snippet if you want to recreate it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s what the dataset looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c65e68f4e05d3f005a585b1ae137f0ba.png)'
  prefs: []
  type: TYPE_IMG
- en: Image 1 — Synthetic 5M row dataset (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s take a look at the benchmark results — both for file save/read,
    and the file size.
  prefs: []
  type: TYPE_NORMAL
- en: Benchmark result — Dataset save time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Saving a 5M row dataset to a CSV File took the most time — 24.5 seconds. CSV
    alternatives such as Feather took only 0.69 seconds, which is 35 times faster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e84fd30645ed25a7168db050b11a1447.png)'
  prefs: []
  type: TYPE_IMG
- en: Image 2 — Dataset save time comparison (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: You can see this pattern repeat among most of the top CSV alternatives. Avro
    file format was closest to CSV in save time, only because parsing the schema and
    converting the dataset to a dictionary took some time ( *prep time* column).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how the read times compare.
  prefs: []
  type: TYPE_NORMAL
- en: Benchmark result — Dataset read time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We don’t see as significant of a difference in dataset read time. Pandas took
    8.45 seconds to read a 5M row CSV file, and alternatives such as Avro were even
    slower if we account for the prep time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/64e8a773bc7d95d5bbe35555380fa636.png)'
  prefs: []
  type: TYPE_IMG
- en: Image 3 — Dataset read time comparison (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Pickle file format stands out here, but it’s a Python-specific data format,
    which is why you don’t see it commonly used in a multi-language environment. Other
    than that, Parquet looks promising with around 2.5x read time reduction.
  prefs: []
  type: TYPE_NORMAL
- en: Benchmark result — Dataset file size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'And finally, let’s take a look at the file size for each top CSV alternative:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b48e15a2ab0fa6485d25a02d34215ded.png)'
  prefs: []
  type: TYPE_IMG
- en: Image 4 — Dataset file size comparison (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: The differences aren’t huge here, but most of the alternatives offer around
    20%-25% reduction in file size. Avro was a clear winner here, so use this file
    format if small file sizes are preferred, and you don’t care about IO speed.
  prefs: []
  type: TYPE_NORMAL
- en: Summing Up Top CSV Alternatives for Data Science
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSV file format isn’t going anywhere. It’s still the most common one (after
    XLSX) if you need to share your data with business clients that expect to examine
    it in Excel. Most business users have no idea what Avro or Parquet mean, so stick
    to CSV in this scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, if you’re paying for cloud compute resources and storage, optimizing
    how you store data can save you a ton of money in the long run. Use Pickle if
    you know you’ll use Python only, go with Avro if small file size is crucial, or
    opt for alternatives such as Parquet, ORC, or Feather for the best balance between
    file size and IO speeds. Pretty much everything is better than CSV.
  prefs: []
  type: TYPE_NORMAL
- en: '*What’s your favourite file format for storing large datasets?* Let me know
    in the comment section below.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Loved the article? Become a* [*Medium member*](/@radecicdario/membership)
    *to continue learning without limits. I’ll receive a portion of your membership
    fee if you use the following link, with no extra cost to you.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@radecicdario/membership?source=post_page-----595f70a9c936--------------------------------)
    [## Join Medium with my referral link - Dario Radečić'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Dario Radečić (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@radecicdario/membership?source=post_page-----595f70a9c936--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '*Originally published at* [*https://betterdatascience.com*](https://betterdatascience.com/top-csv-alternatives/)
    *on January 5, 2023.*'
  prefs: []
  type: TYPE_NORMAL
