["```py\ndef create_bar_chart(row, color):    \n    return sns.barplot(\n        y=row.index.str.capitalize().values,\n        x=row.values,\n        orient=\"h\",\n        saturation=1,\n        color=color,\n        width=0.75,\n    )\n```", "```py\nrow = df.iloc[-1]\n\nfig = plt.figure(figsize=(12, 7))\nax = create_bar_chart(row, color=bar_color)\n\nplt.title(\"Total Number of Stars on GitHub\")\nplt.tight_layout()\nplt.show()\n```", "```py\ndef set_seaborn_style(font_family, background_color, grid_color, text_color):\n    sns.set_style({\n        \"axes.facecolor\": background_color,\n        \"figure.facecolor\": background_color,\n\n        \"grid.color\": grid_color,\n        \"axes.edgecolor\": grid_color,\n        \"axes.grid\": True,\n        \"axes.axisbelow\": True,\n\n        \"axes.labelcolor\": text_color,\n        \"text.color\": text_color,\n        \"font.family\": font_family,\n        \"xtick.color\": text_color,\n        \"ytick.color\": text_color,\n\n        \"xtick.bottom\": False,\n        \"xtick.top\": False,\n        \"ytick.left\": False,\n        \"ytick.right\": False,\n\n        \"axes.spines.left\": False,\n        \"axes.spines.bottom\": True,\n        \"axes.spines.right\": False,\n        \"axes.spines.top\": False,\n    }\n)\n```", "```py\nbackground_color = \"#2F195F\"\ngrid_color = \"#582FB1\"\nbar_color = \"#835ED4\"\ntext_color = \"#eee\"\n\nset_seaborn_style(font_family, background_color, grid_color, text_color)\n```", "```py\ndef format_axes(ax):\n    ax.tick_params(\"x\", labelsize=20, pad=16)\n    ax.tick_params(\"y\", labelsize=20, pad=8)\n\n    plt.xticks(\n        ticks=ax.get_xticks()[:-1],\n        labels=[\"{}K\".format(int(x / 1000)) for x in ax.get_xticks()[:-1]]\n    )\n```", "```py\nrow = df.iloc[-1]\n\nfig = plt.figure(figsize=(12, 7))\nax = create_bar_chart(row, color=bar_color)\n\n# New function\nformat_axes(ax)\n\nplt.title(\"Total Number of Stars on GitHub\", fontsize=34, y=1.2, x=0.46)\nplt.tight_layout()\nplt.show()\n```", "```py\ndef add_bar_icons(ax, row, background_color, zoom, pad):\n    for index, (name, value) in enumerate(row.items()): \n        icon = plt.imread(\"./icons/{}.png\".format(name.lower()))\n        image = OffsetImage(icon, zoom=zoom, interpolation=\"lanczos\", resample=True, visible=True)\n        image.image.axes = ax\n\n        ax.add_artist(AnnotationBbox(\n            image, (value, index), frameon=True,\n            xycoords=\"data\",\n            bboxprops={\n                \"facecolor\": \"#fff\",\n                \"linewidth\": 3,\n                \"edgecolor\": background_color,\n                \"boxstyle\": \"circle, pad={}\".format(pad),\n            }\n        ))\n```", "```py\nrow = df.iloc[-1]\n\nfig = plt.figure(figsize=(12, 7))\nax = create_bar_chart(row, color=bar_color)\n\n# New functions\nformat_axes(ax)\nadd_bar_icons(ax, row, background_color, zoom=0.09, pad=0.9)\n\nplt.title(\"Total Number of Stars on GitHub\", fontsize=34, y=1.2, x=0.46)\nplt.tight_layout()\nplt.show()\n```", "```py\ndef add_icon(ax, icon_name, x, y, zoom):\n    icon = plt.imread(\"./icons/{}.png\".format(icon_name))\n    image = OffsetImage(icon, zoom=zoom, interpolation=\"lanczos\", resample=True, visible=True)\n    image.image.axes = ax\n\n    ax.add_artist(AnnotationBbox(\n        image, (x, y), frameon=False,\n        xycoords=\"axes fraction\",\n    ))\n```", "```py\nrow = df.iloc[-1]\n\nfig = plt.figure(figsize=(12, 7))\nax = create_bar_chart(row, color=bar_color)\n\n# New functions\nformat_axes(ax)\nadd_bar_icons(ax, row, background_color, zoom=0.09, pad=0.9)\nadd_icon(ax, \"star\", x=0.46, y=1.26, zoom=0.13)\n\nplt.title(\"Total Number of     Stars on GitHub\", fontsize=34, y=1.2, x=0.46)\nplt.tight_layout()\nplt.show()\n```", "```py\ndef create_image_from_figure(fig):\n    plt.tight_layout()\n\n    fig.canvas.draw()\n    data = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)\n    data = data.reshape((fig.canvas.get_width_height()[::-1]) + (3,))\n    plt.close() \n\n    return Image.fromarray(data)\n```", "```py\ndef add_padding_to_chart(chart, left, top, right, bottom, background):\n    size = chart.size\n    image = Image.new(\"RGB\", (size[0] + left + right, size[1] + top + bottom), background)\n    image.paste(chart, (left, top))\n    return image\n```", "```py\nrow = df.iloc[-1]\n\nfig = plt.figure(figsize=(12, 7))\nax = create_bar_chart(row, color=bar_color)\\\nplt.title(\"Total Number of     Stars on GitHub\", fontsize=34, y=1.2, x=0.46)\n\n# New functions\nformat_axes(ax)\nadd_bar_icons(ax, row, background_color)\nadd_icon(ax, \"star\", 0.46, 1.26)\nimage = create_image_from_figure(fig)\nimage = add_padding_to_chart(image, 0, 10, 10, 10, background_color)\n```", "```py\nimages = []\n\nfor i in tqdm.tqdm(range(1, 2000, 10)):\n    row = df.iloc[-i]\n\n    fig = plt.figure(figsize=(12, 7))\n    ax = create_bar_chart(row, color=bar_color)\n    ax.set(xlim=(0, 185000))\n    plt.title(\"Total Number of     Stars on GitHub\", fontsize=34, y=1.2, x=0.46)\n\n    format_axes(ax)\n    add_bar_icons(ax, row, background_color, zoom=0.09, pad=0.9)\n    add_icon(ax, \"star\", 0.46, 1.26)\n\n    image = create_image_from_figure(fig)\n    image = add_padding_to_chart(image, 20, 20, 40, 0, background_color)\n    images.append(image)\n\nimages.reverse()\n```", "```py\n# Adding a few duplicates of the last frame to create a delay\nimages = images + [images[-1] for _ in range(20)]\n\nimageio.mimwrite('./animation.gif', images, duration=50)\n```"]