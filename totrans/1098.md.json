["```py\nimport seaborn as sns\n\n# Load the dataset\ndf = sns.load_dataset('diamonds')\n```", "```py\nimport pandas as pd\nimport scipy.stats as scs\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n```", "```py\n# Create a price bin variable\ndf['price_bins'] = pd.cut(\n    df['price'],\n    bins= [0, df.price.mean()*0.8, df.price.mean(), df.price.mean()*1.2, np.inf],\n    labels= ['cheaper', 'on_average', 'high_price', 'expensive']\n    )\n```", "```py\n# Split X and y\nX = df.drop(['price', 'x', 'y', 'z', 'depth', \n             'table', 'carat', 'price_bins'], axis=1)\ny= df.price_bins\n```", "```py\n# Select categorial variables\ncategorical_vars = X.select_dtypes(include='category').columns.to_list()\n\n# Encode the categorial variables\nX[categorical_vars] = X[categorical_vars].apply(lambda x: x.cat.codes)\n```", "```py\n# Instance of SelectKBest\nfsel= SelectKBest(score_func=chi2, k=3)\n\n# Fit\nfsel.fit(X, y)\n\n# Show a dataframe of the results\n(\n    pd.DataFrame({\n    'variable': X.columns,\n    'chi2_stat': fsel.scores_,\n    'p_value': fsel.pvalues_})\n    .sort_values(by='p_value', ascending=False)\n)\n```", "```py\n# Creating a contingency table\ncont_table = pd.crosstab(index= df['cut'], \n                         columns= df['price_bins'])\n```", "```py\n# Chi-square value\nX2 = scs.chi2_contingency(cont_table)\nchi_stat = X2[0]\n\n# Print X2\nX2\n\n[OUT]\n(1603.5199669055353,\n 0.0,\n 12,\n array([[12378.84006303,  1318.4705228 ,  1509.44898035,  6344.24043382],\n        [ 7921.51562848,   843.72080089,   965.93248053,  4059.8310901 ],\n        [ 6939.87033741,   739.16573971,   846.23277716,  3556.73114572],\n        [ 2817.9940304 ,   300.14460512,   343.6200964 ,  1444.24126808],\n        [  924.77994067,    98.49833148,   112.76566555,   473.95606229]]))\n```", "```py\n# Size of the sample\nN = len(df)\n# Minimum dimension\n# Minimum between Number of categories in rows-1, # categs columns-1\nminimum_dimension = (min(cont_table.shape)-1)\n\n# Calculate Cramer's V\nresult = np.sqrt((chi_stat/N) / minimum_dimension)\n\n# Print the result\nprint(result)\n\n[OUT]\n0.09954537514956\n```", "```py\n# Creating a contingency table\ncont_table = pd.crosstab(index= df.clarity, \n                         columns= df['price_bins'])\n\n# Chi-square value\nX2 = scs.chi2_contingency(cont_table)\nchi_stat = X2[0]\n\n# Performing Cramer's V calculation\n\n# Size of the sample\nN = len(df)\n# Minimum dimension\nminimum_dimension = (min(cont_table.shape)-1)\n\n# Calculate Cramer's V\nresult = np.sqrt((chi_stat/N) / minimum_dimension)\n\n# Print the result\nprint(result)\n\n[OUT]\n0.18476912508901078\n```"]