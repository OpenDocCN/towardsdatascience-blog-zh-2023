["```py\nimport numpy as np\nimport pandas as pd\ncfb_info_df = pd.read_csv(r'.\\FBS_Football_Team_Info.csv', encoding = 'unicode_escape')\nclustering_data_df = cfb_info_df.drop(['Team','Nickname', 'City', 'Current_conference', 'Former_conferences', 'First_played', 'Joined_FBS'], axis = 1)\n```", "```py\nclustering_data_df = pd.get_dummies(clustering_data_df,prefix = 'is_state', columns = ['State'])\n```", "```py\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nclustering_data_df['Latitude'] = scaler.fit_transform(clustering_data_df[['Latitude']])\nclustering_data_df['Longitude'] = scaler.fit_transform(clustering_data_df[['Longitude']])\nclustering_data_df['Enrollment'] = scaler.fit_transform(clustering_data_df[['Enrollment']])\nclustering_data_df['years_playing'] = scaler.fit_transform(clustering_data_df[['years_playing']])\nclustering_data_df['years_playing_FBS'] = scaler.fit_transform(clustering_data_df[['years_playing_FBS']])\nclustering_data_df['Stadium_capacity'] = scaler.fit_transform(clustering_data_df[['Stadium_capacity']])\nclustering_data_df['total_draft_picks_2000_to_2020'] = scaler.fit_transform(clustering_data_df[['total_draft_picks_2000_to_2020']])\nclustering_data_df['first_rd_draft_picks_2000_to_2020'] = scaler.fit_transform(clustering_data_df[['first_rd_draft_picks_2000_to_2020']])\nclustering_data_df['number_1_draft_picks_2000_to_2020'] = scaler.fit_transform(clustering_data_df[['number_1_draft_picks_2000_to_2020']])\nclustering_data_df['wsj_college_football_revenue_2019'] = scaler.fit_transform(clustering_data_df[['wsj_college_football_revenue_2019']])\nclustering_data_df['wsj_college_football_value_2018'] = scaler.fit_transform(clustering_data_df[['wsj_college_football_value_2018']])\nclustering_data_df['wsj_college_football_value_2017'] = scaler.fit_transform(clustering_data_df[['wsj_college_football_value_2017']])\nclustering_data_df['tj_altimore_fan_base_size_millions'] = scaler.fit_transform(clustering_data_df[['tj_altimore_fan_base_size_millions']])\nclustering_data_df['bowl_games_played'] = scaler.fit_transform(clustering_data_df[['bowl_games_played']])\nclustering_data_df['bowl_game_win_pct'] = scaler.fit_transform(clustering_data_df[['bowl_game_win_pct']])\nclustering_data_df['historical_win_pct'] = scaler.fit_transform(clustering_data_df[['historical_win_pct']])\nclustering_data_df['total_games_played'] = scaler.fit_transform(clustering_data_df[['total_games_played']])\n```", "```py\nfrom sklearn.cluster import KMeans\n# Implement K means clustering\nkmeans_conf_p5_v_g5 = KMeans(n_clusters=2, random_state=0).fit(clustering_data_df)\n```", "```py\nimport plotly.express as px\n\n#Manually compare to P5 v G5 conferences 2025\nnum_tp = len(list_p5) - 1\nnum_fp = 1 # Tulane\nnum_tn = len(list_g5) - 10\nnum_fn = 10 #Baylor, BYU, Cincinnati, Houston, Oregon State, TCU, Texas Tech, UCF, Wake Forest, Washington State\nfig = px.imshow([[num_tn, num_fn],\n                 [num_fp, num_tp]], text_auto=True,\n               labels=dict(x=\"True P5 v G5\", y=\"Clustering P5 v G5\"),\n                x=['Group of 5 Team', 'Power 5 Team'],\n                y=['Group of 5 Team', 'Power 5 Team'])\nfig.show()\n```", "```py\nkmeans_10_conf = KMeans(n_clusters=10, random_state=0).fit(clustering_data_df)\n\nlabels_10_conf = kmeans_10_conf.labels_\n```", "```py\nimport ortools\nimport ortools.graph.pywrapgraph\nfrom k_means_constrained import KMeansConstrained #needs pip install --user ortools==9.3.10497\nclf = KMeansConstrained(n_clusters=10,size_min=8,size_max=20,random_state=0)\nkmeans_Constrained_10_conf = clf.fit_predict(clustering_data_df)\n```", "```py\n# Initialize new column to define our newly assigned conference\ncfb_info_df['k_means_conf'] = 'Southwest'\n\n#for loop to add the conference name for each team\nfor i in range(len(cfb_info_df['Team'])):\n    if cfb_info_df['Team'].iloc[i] in cluster_1:\n        cfb_info_df['k_means_conf'][i] = 'Sun USA'\n    elif cfb_info_df['Team'].iloc[i] in cluster_2:\n        cfb_info_df['k_means_conf'][i] = 'Big 8'\n    elif cfb_info_df['Team'].iloc[i] in cluster_3:\n        cfb_info_df['k_means_conf'][i] = 'National Athletic'\n    elif cfb_info_df['Team'].iloc[i] in cluster_4:\n        cfb_info_df['k_means_conf'][i] = 'SEC'\n    elif cfb_info_df['Team'].iloc[i] in cluster_5:\n        cfb_info_df['k_means_conf'][i] = 'Basketball Brainiacs'\n    elif cfb_info_df['Team'].iloc[i] in cluster_6:\n        cfb_info_df['k_means_conf'][i] = 'MAC+'\n    elif cfb_info_df['Team'].iloc[i] in cluster_7:\n        cfb_info_df['k_means_conf'][i] = 'Fun Belt'\n    elif cfb_info_df['Team'].iloc[i] in cluster_8:\n        cfb_info_df['k_means_conf'][i] = 'Mountain West'\n    elif cfb_info_df['Team'].iloc[i] in cluster_9:\n        cfb_info_df['k_means_conf'][i] = 'Paclantic 8'\n```", "```py\nfrom sklearn.decomposition import PCA\n\n# Set the n_components=2\nprincipal = PCA(n_components=2)\nprincipal.fit(clustering_data_df)\npca_clustering_data = principal.transform(clustering_data_df)\n\n# Create data frame for plot\npca_clustering_data_df = pd.DataFrame(pca_clustering_data, columns = ['PCA_1', 'PCA_2'])\npca_clustering_data_df['k_means_conference'] = cfb_info_df['k_means_conf']\n```", "```py\nimport plotly.express as px\n\nfig = px.scatter(pca_clustering_data_df, x=\"PCA_1\", y=\"PCA_2\", color=\"k_means_conference\",\n                labels=dict(PCA_1=\"PCA Dimension 1\", \n                            PCA_2=\"PCA Dimension 2\", \n                            k_means_conference=\"10-means Conference\"))\nfig.show()\n```", "```py\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=go.Scattergeo(\n    lon = cfb_info_df['Longitude'],\n    lat = cfb_info_df['Latitude'],\n    text = cfb_info_df['Team'],\n    mode = 'markers',\n    marker = dict(color = cfb_info_df['map_color'])))\n\nfig.update_layout(title = 'Conference Membership',\n        geo_scope='usa')\nfig.show()\n```"]