- en: Generating Fake Data for Data Analytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/generating-fake-data-for-data-analytics-19cd5ed82a1](https://towardsdatascience.com/generating-fake-data-for-data-analytics-19cd5ed82a1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you don’t have real data, you got to fake it!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/?source=post_page-----19cd5ed82a1--------------------------------)[![Wei-Meng
    Lee](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----19cd5ed82a1--------------------------------)[](https://towardsdatascience.com/?source=post_page-----19cd5ed82a1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----19cd5ed82a1--------------------------------)
    [Wei-Meng Lee](https://weimenglee.medium.com/?source=post_page-----19cd5ed82a1--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----19cd5ed82a1--------------------------------)
    ·8 min read·Mar 14, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/50a67f9bb4a4499679e187efc9c4e02f.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Leif Christoph Gottwald](https://unsplash.com/@project2204?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: In the world of data analytics, getting your hands on a good dataset is of paramount
    importance. In the real world, you probably have access to a lot of uncleaned
    data that you likely need to spend some time cleaning. What if you do not have
    the required data and wanted to hack something out quickly for a proof-of-concept
    demo? In this type of situation, you often have to cook up your own data, and
    at the same time you need your data to have some degree of realism. So what do
    you do? Do you painstakingly make up the data manually, or is there an automated
    way of doing things?
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I will show you some cool ways to fake your data, and make
    them look real!
  prefs: []
  type: TYPE_NORMAL
- en: Generating Names
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To generate some fake names, you can use the `names` package. To use it, first
    you need to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '`!pip install names`'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now use the various functions in the package to generate gender-specific
    names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are some names generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Generating UUIDs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides names, another type of data that you might want to generate is UUIDs.
    An **UUID** (**Universal Unique Identifier**) is a 128-bit value used to uniquely
    identify an object or entity on the internet. In the mobile world, UUIDs are often
    used to identify apps installed on devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate sample UUIDs, you can use the `uuid` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can convert the UUID generated to a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a sample UUID generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `Faker` Package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When generating fake data using Python, the `faker` package is definitely worth
    mentioning. The `faker` package generates all sorts of fake data for your usage.
    Data that you can generate include:'
  prefs: []
  type: TYPE_NORMAL
- en: address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: barcode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: credit card information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ISBN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: phone number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and more!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following sections, I will show you how to generate some commonly needed
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Generating User Profile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `faker` package can generate user profiles, such as username, sex, address,
    email, and date of birth. The following code snippet creates a simple profile
    for a male person:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is a dictionary containing the various details of a male person:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Generating Dates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One particular type of data I want to generate is the date of birth (DOB) of
    a person. When storing details of a person, it is always recommended to store
    the DOB rather than the age (for very obvious reasons).
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `faker` package, you can generate the birth date of a person that
    is between 18 and 60 years old:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The data returned is a `date` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to convert the result to a string, you can use the `strftime()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that every time you call a function from the `Faker` object, a new set
    of data is generated. If you want the data generated to be deterministic (i.e
    always the same), you can use the `seed()` function, like this: `Faker.seed(0)`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Generating Locations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next type of data I want to generate is location data. For example, you
    want to get the latitude and longitude of a location in the US. You can use the
    `local_latlng()` function and specify the `country_code` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The function returns a location known to exist on land in a country specified
    by `country_code`. The informations are enclosed is a tuple that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If you only want the latitude and longitude and not the rest, set `coords_only`
    to `True`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `country_code` parameters accepts values from the `land_coords` constant,
    such as `AU` for Australia:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: I couldn’t find the definition for the `land_coords` constant from the Faker
    documentation, but you can reference the `*land_coords*`variable defined in [https://rdrr.io/github/LuYang19/faker/src/R/init.R](https://rdrr.io/github/LuYang19/faker/src/R/init.R).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you want a pair of coordinates that is guaranteed to exist on land, use
    the `location_on_land()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Generating Addresses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want generate some sample addresses, use the `address()`, `current_country()`,
    `city()`, `country()`, and `country_code()` functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Locales Support in Faker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far all the names and addresses generated are in English. However, the `faker`
    package also supports different locales. The list of locales supported can be
    found from: [https://faker.readthedocs.io/en/master/locales.html](https://faker.readthedocs.io/en/master/locales.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows an example locale — `zh_CN`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d2545a338ffe671e76d8219e89d8168b.png)'
  prefs: []
  type: TYPE_IMG
- en: All images by author
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in the `zh_CN` locale, you can find the following providers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`faker.providers.address`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`faker.providers.company`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`faker.providers.date_time`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`faker.providers.internet`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`faker.providers.job`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`faker.providers.lores`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`faker.providers.person`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`faker.providers.phone_number`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`faker.providers.ssn`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This means that all the above listed providers support the `zh_CN` locale.
    Take the `faker.providers.address` ([https://faker.readthedocs.io/en/master/locales/zh_CN.html#faker-providers-address](https://faker.readthedocs.io/en/master/locales/zh_CN.html#faker-providers-address))
    as an example. When instantiating a `Faker` object, you can pass in one or more
    locales:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The above `address()` function returns the address in Chinese:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you use the `zh_CN` locale, some functions will be tied to this locale,
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`fake.name()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fake.address()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fake.current_country()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The address results will be those locations in China.
  prefs: []
  type: TYPE_NORMAL
- en: 'Calling other functions such as `fake.country()` will return other countries
    but the result will be in Chinese (based on the `zh-CN` locale):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 越南 is Vietnam.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You can also generate Chinese names using the `zh_CN` locale:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a sample output of the above code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Putting Them Altogether
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With all the ways to generate the different types of fake data, I want to put
    them altogether so that I can perform some data analytics on them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet generates 1000 sets of the following data:'
  prefs: []
  type: TYPE_NORMAL
- en: UUID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Latitude, longitude, and country from one of the seven countries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gender
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data of birth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'I then combined the 1000 sets of data into a Pandas DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The dataframe now contains 1000 fictitious user accounts and their personal
    details like app ID, location information, gender, and DOB:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f9c84aa461c95f3894f4c6a0d879f22b.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting a map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the latitude and longitude, it would be interesting to plot the geographical
    locations of my users. For this I used Folium:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[](/visualization-in-python-visualizing-geospatial-data-122bf85d128f?source=post_page-----19cd5ed82a1--------------------------------)
    [## Visualization in Python —Visualizing Geospatial Data'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to use folium to easily display maps and markers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/visualization-in-python-visualizing-geospatial-data-122bf85d128f?source=post_page-----19cd5ed82a1--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the map showing the distribution of my users:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c4bbf143ad1163f130531532f73b8cd6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I can zoom into the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/43f3c20c5001cf6e963ce9f00be85059.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I can also change the tilesets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a42066beed010006357b69a864a0e64d.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting pie chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I can visualize where my users are from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b2faa2463ba28ca7946e9cc6465b44f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I could also make the pie chart more descriptive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e349f316c94299e2d9cf41678d823bfb.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting bar chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The total users from each country can also be plotted using a bar chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'From the chart you can see that Great Britain has the most number of users
    while China has the least:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2cdd221dd33cfa1c40df1df6d9d2beba.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting histogram
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I can also find out about the age distribution of my users. For this, I need
    to first calculate their current age based on their DOB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The dataframe now has an additional column showing the age of each user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6e5d5014270a16a6264e0dadf2b846ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can now plot a histogram showing the age distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e0125ec918f69eeb4f38fbc460fd402b.png)'
  prefs: []
  type: TYPE_IMG
- en: '**If you like reading my articles and that it helped your career/study, please
    consider signing up as a Medium member. It is $5 a month, and it gives you unlimited
    access to all the articles (including mine) on Medium. If you sign up using the
    following link, I will earn a small commission (at no additional cost to you).
    Your support means that I will be able to devote more time on writing articles
    like this.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/membership?source=post_page-----19cd5ed82a1--------------------------------)
    [## Join Medium with my referral link - Wei-Meng Lee'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Wei-Meng Lee (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----19cd5ed82a1--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you are now better equipped to generate any additional data that your
    projects need. Generating realistic demo data not only allows you to test your
    algorithms more accurately, it also provides more realism when using them for
    demos. Let me know in the comments what other types of data you usually need to
    generate!
  prefs: []
  type: TYPE_NORMAL
