- en: Convenient Bayesian Marketing Mix Modeling With PyMC Marketing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://towardsdatascience.com/convenient-bayesian-marketing-mix-modeling-with-pymc-marketing-8b02a9a9c4aa](https://towardsdatascience.com/convenient-bayesian-marketing-mix-modeling-with-pymc-marketing-8b02a9a9c4aa)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Marketing Analytics](https://medium.com/tag/marketing-analytics)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A new and shiny library from the PyMC team worth trying out
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://dr-robert-kuebler.medium.com/?source=post_page-----8b02a9a9c4aa--------------------------------)[![Dr.
    Robert KÃ¼bler](../Images/3b8d8b88f76c0c43d9c305e3885e7ab9.png)](https://dr-robert-kuebler.medium.com/?source=post_page-----8b02a9a9c4aa--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8b02a9a9c4aa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8b02a9a9c4aa--------------------------------)
    [Dr. Robert KÃ¼bler](https://dr-robert-kuebler.medium.com/?source=post_page-----8b02a9a9c4aa--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Â·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8b02a9a9c4aa--------------------------------)
    Â·6 min readÂ·Apr 13, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f28f4c3f55d755db249a94b0f4d38e6a.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Nathan Fertig](https://unsplash.com/@nathanfertig?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: You can tell the importance of a topic by how many big companies are releasing
    software packages on it. In the field of marketing mix modeling,
  prefs: []
  type: TYPE_NORMAL
- en: Google released [LMMM](https://github.com/google/lightweight_mmm)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meta released [Robyn](https://github.com/facebookexperimental/Robyn)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyMC Labs released [PyMC Marketing](https://github.com/pymc-labs/pymc-marketing)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (and I released [mamimo](https://github.com/Garve/mamimo) ðŸ˜‡)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even better than marketing mix modeling is **Bayesian marketing mix modeling,**
    which Googleâ€™s and PyMC Labsâ€™ libraries provide. While LMMM is certainly interesting
    as well, today, we will focus on PyMC Marketing.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, you will learn how easy it is to build a state-of-the-art Bayesian
    marketing mix model nowadays!
  prefs: []
  type: TYPE_NORMAL
- en: In case you need a refresher, please check out my old article that tells you
    what Bayesian marketing mix modeling is all about.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/bayesian-marketing-mix-modeling-in-python-via-pymc3-7b2071f6001a?source=post_page-----8b02a9a9c4aa--------------------------------)
    [## Bayesian Marketing Mix Modeling in Python via PyMC3'
  prefs: []
  type: TYPE_NORMAL
- en: Estimate the saturation, carryover, and other parameters all at once, including
    their uncertainty
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/bayesian-marketing-mix-modeling-in-python-via-pymc3-7b2071f6001a?source=post_page-----8b02a9a9c4aa--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: The Manual Process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In my old article (see above), I coded a Bayesian marketing mix model myself.
    To do this, I needed to define a function for the carryover effect of media spending,
    which was cumbersome. Still using the older PyMC3, it looked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This one works, but it is not easy to parse and may also need to be more efficient.
    Also, using Theano in PyMC is outdated, as I would have to use PyTensor now, a
    fork of Aesara based on Theano. A complicated history, it seems.
  prefs: []
  type: TYPE_NORMAL
- en: So I am happily relying on more professional and general code now to achieve
    my goals. I learned a lot by checking out how [they implemented the carryover
    effect](https://github.com/pymc-labs/pymc-marketing/blob/main/pymc_marketing/mmm/transformers.py).
  prefs: []
  type: TYPE_NORMAL
- en: Before continuing, ensure you have the packages pymc and pymc-marketing installed.
    I installed PyMC using mamba as described [in their Github](https://github.com/pymc-labs/pymc-marketing/blob/main/README.md)
    and then installed pymc-marketing via
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: PyMC Marketing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us revisit our old example [from my Bayesian marketing mix modeling article](/bayesian-marketing-mix-modeling-in-python-via-pymc3-7b2071f6001a).
    We start by importing a dataset that I synthetically created.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The data looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fe62d57d88361767adefea2ec3ab44c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Model Definition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, letâ€™s get our star on stage and define the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This creates a model with saturations and carryover effects per channel, similar
    to what I did manually before. Thatâ€™s why I will not go into detail about how
    this model works from a mathematical perspective.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now visualize what we have created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bdea93818a562ae51ac36916380b2896.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see that the adstock (carryover) is first applied, then the saturation.
    We have three parameters `alpha`, `beta_channel`, and `lam` per channel, where
  prefs: []
  type: TYPE_NORMAL
- en: '`alpha` is the carryover rate that is between 0 and 1,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lam` is the saturation rate, and'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`beta_channel` is the actual linear regression coefficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To give a bit more context, the abridged model formula is
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/668257542f5ab088715d518f77fd9b21.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: where *c* runs over all different channels.
  prefs: []
  type: TYPE_NORMAL
- en: Model Fit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Fitting the model is as easy as in scikit-learn:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Model Inference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After the model is trained, we can check the parameters as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'I got something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/20cec6e69676cbe3c0142f0cb41d9e1a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Judging from the 1.0s in the **r_hat** column, we can see that the chains seem
    to have converged just fine, i.e., the results in the rest of the table are reliable.
  prefs: []
  type: TYPE_NORMAL
- en: We can also check what the model believes are the correct values for all parameters.
    For example, the channel TV carryover `alpha[TV]` is between 0.465 and 0.515 with
    a 94% probability, as seen in the columns **hdi_3% and hdi_97%**. If the model
    had to decide on a single number, it would be 0.49, as you can see in the **mean**
    column.
  prefs: []
  type: TYPE_NORMAL
- en: '***Note:*** *For creating this dataset, I used saturation values of 0.5 for
    TV, 0.2 for radio, and 0 for banners. Our PyMC model was able to pick this up
    quite decently!*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For the visual folks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/cb46bc219af59de89fe6388e40657eb1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We can even check out the channel contributions using the convenient method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/32d0c9b4c1a4d3510e537efab17b72fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: According to the model, TV is responsible for about 40% of the **additional**
    sales (additional to the base), radio for about 26%, and banners for about 34%.
  prefs: []
  type: TYPE_NORMAL
- en: Posterior Predictive Check
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can do a posterior predictive check, i.e., sampling predictions (blue), and
    see how well they follow the model (black).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/81511a4824840d75e10859c479c7fdee.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Looks like a good fit! We can even decompose the signal into a baseline and
    the channel contributions via
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a466816b1c0b3480dc9196b4e1fb9f14.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Insightful, but in addition, it might be helpful to add the following to the
    library as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bbbf4934aa3edcf3e991fecb29a0bd09.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: I opened a pull request that is currently still open. You can check it out [here](https://github.com/pymc-labs/pymc-marketing/pull/247).
  prefs: []
  type: TYPE_NORMAL
- en: '***Update:*** *It was merged! You can use it with* `[*plot_grouped_contribution_breakdown_over_time*](https://github.com/pymc-labs/pymc-marketing/blob/a59a89c41e7a1166c61ed2ca4293ff792d726622/pymc_marketing/mmm/base.py#L503)`
    *method. Happy to have contributed! ðŸ˜„*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Conclusion**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bayesian marketing mix modeling is currently **the** best way to find out which
    of your marketing channels perform well and which donâ€™t. Building such a model
    is not too complicated, but still by far not as straightforward as clicking together
    a scikit-learn model.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, the new [PyMC Marketing](https://www.pymc-marketing.io/en/latest/)
    makes Bayesian marketing mix modeling a breeze compared to what we had to manually
    code before.
  prefs: []
  type: TYPE_NORMAL
- en: Don't get me wrong, I like coding, and it is crucial that **you** know how to
    code it as well. But still, it is nice to have a well-maintained package that
    presumably gets even more common marketing mix model functionalities in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'And I only covered **some** of the functionalities. PyMC Marketing can even:'
  prefs: []
  type: TYPE_NORMAL
- en: efficiently deal with control variables by passing a list of columns via the
    `control_columns` into the `DelayedSaturatedMMM` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: plot saturation curves via `mmm.plot_contribution_curves()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: calculate the ROAS, although it is still manual work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information, check out [this great notebook](https://www.pymc-marketing.io/en/stable/notebooks/mmm/mmm_example.html)
    by the PyMC people.
  prefs: []
  type: TYPE_NORMAL
- en: I hope that you learned something new, interesting, and valuable today. Thanks
    for reading!
  prefs: []
  type: TYPE_NORMAL
- en: '*If you have any questions, write me on* [*LinkedIn*](https://www.linkedin.com/in/dr-robert-k%C3%BCbler-983859150/)*!*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And if you want to dive deeper into the world of algorithms, give my new publication
    **All About Algorithms** a try! Iâ€™m still searching for writers!
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/all-about-algorithms?source=post_page-----8b02a9a9c4aa--------------------------------)
    [## All About Algorithms'
  prefs: []
  type: TYPE_NORMAL
- en: From intuitive explanations to in-depth analysis, algorithms come to life with
    examples, code, and awesomeâ€¦
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/all-about-algorithms?source=post_page-----8b02a9a9c4aa--------------------------------)
  prefs: []
  type: TYPE_NORMAL
