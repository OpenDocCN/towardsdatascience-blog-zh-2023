- en: 'PyScript.com: a PyScript IDE in the Cloud'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/pyscript-com-a-pyscript-ide-in-the-cloud-2b5bde6f0342](https://towardsdatascience.com/pyscript-com-a-pyscript-ide-in-the-cloud-2b5bde6f0342)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PyScript.com is a new online IDE from Anaconda that lets you create, run and
    host PyScript apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@alan-jones?source=post_page-----2b5bde6f0342--------------------------------)[![Alan
    Jones](../Images/359379fab1d6685ff08080b98173e67c.png)](https://medium.com/@alan-jones?source=post_page-----2b5bde6f0342--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2b5bde6f0342--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2b5bde6f0342--------------------------------)
    [Alan Jones](https://medium.com/@alan-jones?source=post_page-----2b5bde6f0342--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2b5bde6f0342--------------------------------)
    ·12 min read·Apr 13, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/07925010c17760f2045486aee7a5dd6b.png)'
  prefs: []
  type: TYPE_IMG
- en: Wow! He must be a very serious and important programmer if he needs screens
    that big — I wonder why they’re mostly blank. Photo by [Max Duzij](https://unsplash.com/@max_duz?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '*Note: a new completely re-written version of PyScript was released late 2023
    which may make some of the syntax described here out of date — please see* [PyScript
    is Growing Up](https://medium.com/codefile/pyscript-is-growing-up-9df5c51fdf51)
    *for updates.*'
  prefs: []
  type: TYPE_NORMAL
- en: Well, this is good news! It’s not currently obvious what existing IDE or editor
    is good for building PyScript apps but now, with PyScript.com, we have a dedicated
    online IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Just how good is it? We are going to find out.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to take a look at the new PyScript online IDE from Anaconda: I’ll
    introduce the new platform, we’ll take a look at how to get started writing PyScript
    apps with it and we’ll end up with a fully functional and deployed PyScript app.'
  prefs: []
  type: TYPE_NORMAL
- en: PyScript.com
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Anaconda Inc. is not shy about what it thinks of its new product.
  prefs: []
  type: TYPE_NORMAL
- en: '*“The revolutionary platform enables programming for the 99%, advancing Anaconda’s
    mission to democratize data science and Python development.” — Anaconda Inc.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You doubtless know Anaconda as a vendor of a data science platform based on
    their own Python distribution. And you may also know them as the inventors of
    PyScript (if you’ve been following my articles here on Medium you certainly do
    — see [Hello PyScript](https://medium.com/towards-data-science/hello-pyscript-goodbye-javascript-c8d8fb83a93a),
    [What’s new in PyScript in 2023](https://medium.com/codefile/whats-new-in-pyscript-dfdf25538281)
    and [others](http://alajones2.github.io)).
  prefs: []
  type: TYPE_NORMAL
- en: Anaconda released PyScript via the [PyScript.net](http://pyscript.net) website;
    it’s an open source project that is dedicated to creating Python apps as web pages
    and it is hosted on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: PyScript is based on Pyodide, a Python interpreter that has been ported to WebAssembly.
    WebAssembly being a low-level language that will run in a browser, so this means
    that you can now run Python programs natively in a browser.
  prefs: []
  type: TYPE_NORMAL
- en: That’s quite a big deal when you think about it.
  prefs: []
  type: TYPE_NORMAL
- en: With PyScript you can write Python apps that communicate with Javascript and
    the DOM and thus produce Python-centric web apps that require no server — upload
    them to a web host and they just work!
  prefs: []
  type: TYPE_NORMAL
- en: PyScript.net and PyScript.com
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PyScript.com is not to be confused with PyScript.net. The new website is not
    part of the open source product but a new online programming environment. It is,
    according to Anaconda:'
  prefs: []
  type: TYPE_NORMAL
- en: “a free and flexible coding platform where anyone in the world can create next-generation
    web applications with Python-powered data interactivity and computation”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And they go on to say that
  prefs: []
  type: TYPE_NORMAL
- en: “the platform is now generally available for free as a software service”.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It won’t, however, be completely free forever. This is given away by the offer
    of a Founder’s subscription where for $150 you will receive a year’s free access
    to forthcoming paid-for features (I am currently unclear what they will be but
    presumably Anaconda thinks that they will be worth paying for. I am guessing —
    hoping — that the current features will remain free).
  prefs: []
  type: TYPE_NORMAL
- en: So what’s the deal? What do we get with PyScript.com?
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, you need an account. No problem there, head over to the [website](http://pyscript.com),
    sign up and log in.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be greeted by the Dashboard where a new project will be waiting for
    you. The screen will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/781c5425683a11162adb4fba668c9f87.png)'
  prefs: []
  type: TYPE_IMG
- en: The PyScript.com dashboard — screenshot by author
  prefs: []
  type: TYPE_NORMAL
- en: “Weathered Moon” is the cute name of a default project that has been created
    for me — yours will be called something different. (And if you don’t think it’s
    cute enough — or it’s too cute — you can change the name later.)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see there are options to *view* or *edit* the site and the dotty
    menu gives you additional options to *delete* or *copy* the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on ‘Edit’ and the project will open. There will be three panes: on the
    left a file manager and and editor, and on the right a pane that displays the
    running project. (If you are using a phone or a small browser window, the configuration
    may be different.)'
  prefs: []
  type: TYPE_NORMAL
- en: The default project comprises three files,
  prefs: []
  type: TYPE_NORMAL
- en: 'index.html: this defines the web page in HTML'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'main.py: this contains the Python code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pyscript.toml: this will be empty — we’ll see how it is used later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here is a screenshot of the open project — you will not be surprised by what
    it does!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c53e32daca978a83c3401550244dd8ca.png)'
  prefs: []
  type: TYPE_IMG
- en: A screenshot of the author’s default project
  prefs: []
  type: TYPE_NORMAL
- en: The Python program simply prints “Hello World!” and that is what the app does,
    too (well, what were you expecting!). But there is a little more to the app than
    this.
  prefs: []
  type: TYPE_NORMAL
- en: 'As I’ve said `pyscript.toml`is empty but let’s look at the HTML. Click on `index.html`
    under FILES and it will (of course) pop up in the editor. This is what you will
    see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This HTML could be the basis for many PyScript apps. Its format is HTML but
    there are some PyScript-specific parts. The first two are the `<link>`and `<script>`
    tags that load `pyscript.css` and `pyscript.js`. These are required for any app
    and load the bits that make Python work in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: The next PyScript-specific parts are in the body; `<py-config src="./pyscript.toml>`
    loads the configuration. This could be included directly in the tag but it is
    neater to hide it away in the `pyscript.toml` file. As I said before, this file
    is currently empty but we’ll use it soon.
  prefs: []
  type: TYPE_NORMAL
- en: And then we have the inclusion of the Python code from `main.py` in the tag
    `<py-script src="./main.py">.`
  prefs: []
  type: TYPE_NORMAL
- en: That’s all nice and neat and pretty straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go back to `main.py`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: And change it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now hit the ‘Run’ button and you’ll see the new output in the righthand pane.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/113ee78268e1775d17e40d80bc45cb1a.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author
  prefs: []
  type: TYPE_NORMAL
- en: What is going on here, exactly? In Python, the `print` statement writes to the
    standard output device (usually the screen) in PyScript it writes to a tag called
    `<py-terminal>` and unless it is included in the HTML file, this tag is automatically
    created the first time `print` is used. So, when `print("Hello Moon!")` is executed,
    the tag `<py-terminal>` is created in the web page and the output of the `print`
    statement is written into it.
  prefs: []
  type: TYPE_NORMAL
- en: Frankly, when we are building an app, this is not a particularly useful thing
    to do. It’s fine for debugging purposes but when building an app, the output that
    we generate ought to be a part of a web page — in a `<div>` for example — and
    to output text into an arbitrary HTML tag we don’t use `print`, we use `display`.
    But more of that shortly.
  prefs: []
  type: TYPE_NORMAL
- en: First, though, we can see the app running in a browser by selecting ‘View Site’
    from the menu on the right.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/588fd7b0b0c22a68218814327cfaadcf.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author
  prefs: []
  type: TYPE_NORMAL
- en: 'I won’t bother with a screenshot here, it is exactly like the preview pane.
    The thing to be at least slightly surprised by is that the app appears in a new
    tab in the browser and is being served live from the website. It has its own unique
    public URL that you can share with anyone. and just to prove the point, here it
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://26efd18d-1c15-4b46-b574-58731b341c76.pyscriptapps.com/5b49c512-f88f-493c-9d62-f0d745a298ed/latest/](https://26efd18d-1c15-4b46-b574-58731b341c76.pyscriptapps.com/5b49c512-f88f-493c-9d62-f0d745a298ed/latest/)'
  prefs: []
  type: TYPE_NORMAL
- en: Now type that into your browser — just kidding, it’s a link, of course.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s plot a graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to expand on the ‘Hello World’ app a little and make something
    that shows how Python code and HTML work nicely together.
  prefs: []
  type: TYPE_NORMAL
- en: First, as it is a good starting point, copy your existing project using the
    menu on the right.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/588fd7b0b0c22a68218814327cfaadcf.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author
  prefs: []
  type: TYPE_NORMAL
- en: And we get a new project
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5b7de43a07860f44b2c59b95cebc1080.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author
  prefs: []
  type: TYPE_NORMAL
- en: To change the title click on the edit button, as indicated, and save it.
  prefs: []
  type: TYPE_NORMAL
- en: We are not going to do anything too fancy, just create a web page with a graph
    that we plotted in Python. So, we need to adapt the HTML code to accommodate this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can see that this is the same as the `index.html` that we started with but
    with a couple of alterations. I’ve changed the title and added two tags at the
    end of the body, first, a `<h1>`heading and then a `<div>` with the id “graph”
    — this is where the graph will be plotted.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t run this yet (it will still say ‘Hello Moon’), we need to add the Python
    code to `main.py.`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After the imports, we create a Pandas dataframe that has two columns for the
    x and y axes. They each contain the integers 1 to 9\. We then create a `mathplotlib`
    figure (it’ll be a straight line graph, of course) and then use the PyScript command
    `display` to display the figure in the HTML tag with the id “graph”.
  prefs: []
  type: TYPE_NORMAL
- en: Can we run it now? No, be a little patient, please.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve imported the `pandas` and `mathplotlib` libraries in the Python code but
    these do not come as part of the PyScript package. So we need to specify this
    as part of the `<py-config>` and have to put the following in `<pyscript.toml>.`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can use a whole load of Python packages but they need to be specified in
    the configuration as well as imported to the Python code. The config section can
    be used to load external files, such as data files, into the app.
  prefs: []
  type: TYPE_NORMAL
- en: OK, now you can run it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b27d40c4560828ea721b416fff2c3bb8.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed this before but if you view the project on its own web
    page you will see a link at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b6b5b547463e8ae6f75a59ef709e0e0b.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author
  prefs: []
  type: TYPE_NORMAL
- en: Anyone who can see the link also has access to your code. Clicking on the ‘View
    Code’ link will open up a non-editable (but probably copyable) version of your
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'So that’s a simple PyScript app and there are a few things worth noting:'
  prefs: []
  type: TYPE_NORMAL
- en: The default files which are given to you, `pyscript.toml, main.py, & index.html`
    are good starting points to create a new project. So your first step in creating
    a new project will probably be to copy the default app and rename it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to use a library you have to specify it in the configuration as
    well as import it in the Python code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The PyScript command `display` is used to write output from the Python code
    to an HTML tag with a specific id.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your code is served from the PyScript.com server and can be viewed from its
    URL. Anyone with that URL can run the app and also view your code (so don’t put
    any secrets in it).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One thing that I have not mentioned is how to get back to the dashboard view
    of your projects.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/125db9529ecf256d81ada0331e360fd2.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author
  prefs: []
  type: TYPE_NORMAL
- en: Actually, clicking anywhere on the PyScript logo will get you to this view.
  prefs: []
  type: TYPE_NORMAL
- en: What’s with the rabbit logo? Wouldn’t a Python eat a rabbit, given half a chance?
    I’m not sure that’s the image of PyScript that we want.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also go to the dashboard from the top right menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b5e952ec60b0cd27e74fa60fa136bd38.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author
  prefs: []
  type: TYPE_NORMAL
- en: A complete app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I promised you an app; it’s fairly simple but here it is. It’s based on the
    article [PyScript, Pandas and Plotly: an Interactive Web App](https://medium.com/@alan-jones/pyscript-pandas-and-plotly-an-interactive-web-app-a65a01b04ae6)
    except, to keep things simple it uses `matplotlib` instead of Plotly. It also
    uses the Bootstrap Javascript library to make the UI pretty.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9fd051d210b64f066e5c856923217336.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by author
  prefs: []
  type: TYPE_NORMAL
- en: The app downloads some weather data¹ and lets you select a chart to display
    from a drop-down menu. (If you have read my other articles you’ve probably seen
    a million or so versions of this using different technologies.)
  prefs: []
  type: TYPE_NORMAL
- en: I won’t go into the detailed workings of the app as most of it is explained
    in the article referred to above or in what we have already covered. There are
    also comments in the Python code that explain what is going on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: And there is a link to the final app [here](https://26efd18d-1c15-4b46-b574-58731b341c76.pyscriptapps.com/fde16857-a0d3-4fd3-b2a0-0920f1b4b973/latest/)
    where you can see it in all its glory, look at the code and copy it, if you feel
    so inclined.
  prefs: []
  type: TYPE_NORMAL
- en: What do we think?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are pros and cons to `pyscript.com,` of course. Here are some that I
    think are worthy of note:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pros:**'
  prefs: []
  type: TYPE_NORMAL
- en: It is a simple and easy-to-use IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everything you need is on one page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What you create is open by default — great we can share!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default app makes a good starting point for a new project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The copy facility is good, you could use it to create new projects from old
    ones, or new versions of existing ones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic deployment and free hosting! (The URL is a bit of a nightmare, though)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cons:**'
  prefs: []
  type: TYPE_NORMAL
- en: What you create is open by default — oh dear, no proprietary code! But I would
    not be at all surprised to find that a paid-for feature might cater for this at
    a later date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can’t download a project and copy it to a different development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a bit slow to start up but that is mostly a PyScript thing — maybe the
    IDE slows startup a bit more, I’m not sure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I think the first pro is the most important. It is very easy to use, the editor
    works with HTML and Python very well and you get (almost) instant results from
    any changes that you make to the code. Automatic deployment and hosting are great,
    too.
  prefs: []
  type: TYPE_NORMAL
- en: All in all, this is a welcome package. It’s clearly not aimed at commercial
    projects but is a great place to share ideas and experiment with PyScript.
  prefs: []
  type: TYPE_NORMAL
- en: Try it out!
  prefs: []
  type: TYPE_NORMAL
- en: As ever thanks for reading, I hope you found it useful. I must say I enjoyed
    writing this and working with pyscript.com. You can find links to my other work,
    including more stuff about PyScript, on my [GitHub webpage](http://alanjones2.github.io).
  prefs: []
  type: TYPE_NORMAL
- en: If you are not a Medium member you can sign up using my [referral link](https://medium.com/@alan-jones/membership)
    and get to read any Medium content for only $5 per month.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The weather data is from my own GitHub repository (see the link in the code)
    and is in the public domain. The data is derived from the [UK Met Office Historical
    Station Data](https://www.metoffice.gov.uk/research/climate/maps-and-data/historic-station-data)
    which is also free to use under [UK Open Government Licence for Public Sector
    Information v3.0](https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
