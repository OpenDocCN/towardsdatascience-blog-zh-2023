["```py\npip install scikit-llm\n```", "```py\nfrom skllm.config import SKLLMConfig\n\nOPENAI_SECRET_KEY = \"sk-***\"\nOPENAI_ORG_ID = \"org-***\"\n\nSKLLMConfig.set_openai_key(OPENAI_SECRET_KEY)\nSKLLMConfig.set_openai_org(OPENAI_ORG_ID)\n```", "```py\nmovie_reviews = [\n    \"This movie was absolutely wonderful. The storyline was compelling and the characters were very realistic.\",\n    \"I really loved the film! The plot had a few unexpected twists which kept me engaged till the end.\",\n    \"The movie was alright. Not great, but not bad either. A decent one-time watch.\",\n    \"I didn't enjoy the film that much. The plot was quite predictable and the characters lacked depth.\",\n    \"This movie was not to my taste. It felt too slow and the storyline wasn't engaging enough.\",\n    \"The film was okay. It was neither impressive nor disappointing. It was just fine.\",\n    \"I was blown away by the movie! The cinematography was excellent and the performances were top-notch.\",\n    \"I didn't like the movie at all. The story was uninteresting and the acting was mediocre at best.\",\n    \"The movie was decent. It had its moments but was not consistently engaging.\"\n]\n\nmovie_review_labels = [\n    \"positive\", \n    \"positive\", \n    \"neutral\", \n    \"negative\", \n    \"negative\", \n    \"neutral\", \n    \"positive\", \n    \"negative\", \n    \"neutral\"\n]\n\nnew_movie_reviews = [\n    # A positive review\n    \"The movie was fantastic! I was captivated by the storyline from beginning to end.\",\n\n    # A negative review\n    \"I found the film to be quite boring. The plot moved too slowly and the acting was subpar.\",\n\n    # A neutral review\n    \"The movie was okay. Not the best I've seen, but certainly not the worst.\"\n]\n```", "```py\nfrom skllm import ZeroShotGPTClassifier\n\n# Initialize the classifier with the OpenAI model\nclf = ZeroShotGPTClassifier(openai_model=\"gpt-3.5-turbo\")\n\n# Train the model \nclf.fit(X=movie_reviews, y=movie_review_labels)  \n\n# Use the trained classifier to predict the sentiment of the new reviews\npredicted_movie_review_labels = clf.predict(X=new_movie_reviews)  \n\nfor review, sentiment in zip(new_movie_reviews, predicted_movie_review_labels):\n    print(f\"Review: {review}\\nPredicted Sentiment: {sentiment}\\n\\n\")\n```", "```py\nReview: The movie was fantastic! I was captivated by the storyline from beginning to end.\nPredicted Sentiment: positive\n\nReview: I found the film to be quite boring. The plot moved too slowly and the acting was subpar.\nPredicted Sentiment: negative\n\nReview: The movie was okay. Not the best I've seen, but certainly not the worst.\nPredicted Sentiment: neutral\n```", "```py\nrestaurant_reviews = [\n    \"The food was delicious and the service was excellent. A wonderful dining experience!\",\n    \"The restaurant was in a great location, but the food was just average.\",\n    \"The service was very slow and the food was cold when it arrived. Not a good experience.\",\n    \"The restaurant has a beautiful ambiance, and the food was superb.\",\n    \"The food was great, but I found it to be a bit overpriced.\",\n    \"The restaurant was conveniently located, but the service was poor.\",\n    \"The food was not as expected, but the restaurant ambiance was really nice.\",\n    \"Great food and quick service. The location was also very convenient.\",\n    \"The prices were a bit high, but the food quality and the service were excellent.\",\n    \"The restaurant offered a wide variety of dishes. The service was also very quick.\"\n]\n\nrestaurant_review_labels = [\n    [\"Food\", \"Service\"],\n    [\"Location\", \"Food\"],\n    [\"Service\", \"Food\"],\n    [\"Atmosphere\", \"Food\"],\n    [\"Food\", \"Price\"],\n    [\"Location\", \"Service\"],\n    [\"Food\", \"Atmosphere\"],\n    [\"Food\", \"Service\", \"Location\"],\n    [\"Price\", \"Food\", \"Service\"],\n    [\"Food Variety\", \"Service\"]\n]\n\nnew_restaurant_reviews = [\n    \"The food was excellent and the restaurant was located in the heart of the city.\",\n    \"The service was slow and the food was not worth the price.\",\n    \"The restaurant had a wonderful ambiance, but the variety of dishes was limited.\"\n]\n```", "```py\nfrom skllm import MultiLabelZeroShotGPTClassifier\n\n# Initialize the classifier with the OpenAI model\nclf = MultiLabelZeroShotGPTClassifier(max_labels=3)\n\n# Train the model \nclf.fit(X=restaurant_reviews, y=restaurant_review_labels)\n\n# Use the trained classifier to predict the labels of the new reviews\npredicted_restaurant_review_labels = clf.predict(X=new_restaurant_reviews)\n\nfor review, labels in zip(new_restaurant_reviews, predicted_restaurant_review_labels):\n    print(f\"Review: {review}\\nPredicted Labels: {labels}\\n\\n\")\n```", "```py\nReview: The food was excellent and the restaurant was located in the heart of the city.\nPredicted Labels: ['Food', 'Location']\n\nReview: The service was slow and the food was not worth the price.\nPredicted Labels: ['Service', 'Price']\n\nReview: The restaurant had a wonderful ambiance, but the variety of dishes was limited.\nPredicted Labels: ['Atmosphere', 'Food Variety']\n```", "```py\nfrom skllm.preprocessing import GPTVectorizer\n\nX = [\n    \"AI can revolutionize industries.\",\n    \"Robotics creates automated solutions.\",\n    \"IoT connects devices for data exchange.\"\n]\n\nvectorizer = GPTVectorizer()\n\nvectors = vectorizer.fit_transform(X)\n\nprint(vectors)\n```", "```py\n[[-0.00818074 -0.02555227 -0.00994665 ... -0.00266894 -0.02135153\n   0.00325925]\n [-0.00944166 -0.00884305 -0.01260475 ... -0.00351341 -0.01211498\n  -0.00738735]\n [-0.01084771 -0.00133671  0.01582962 ...  0.01247486 -0.00829649\n  -0.01012453]]\n```", "```py\nfrom skllm.preprocessing import GPTTranslator\nfrom skllm.datasets import get_translation_dataset\n\ntranslator = GPTTranslator(openai_model=\"gpt-3.5-turbo\", output_language=\"English\")\n\ntext_to_translate = [\"Je suis content que vous lisiez ce post.\"]\n# \"I am happy that you are reading this post.\"\n\ntranslated_text = translator.fit_transform(text_to_translate)\n\nprint(\n    f\"Text in French: \\n{text_to_translate[0]}\\n\\nTranslated text in English: {translated_text[0]}\"\n)\n```", "```py\nText in French: \nJe suis content que vous lisiez ce post.\n\nTranslated text in English: I am glad that you are reading this post.\n```", "```py\nreviews = [\n    (\n        \"I dined at The Gourmet Kitchen last night and had a wonderful experience. \" \n        \"The service was impeccable, the food was exquisite, and the ambiance was delightful. \"\n        \"I had the seafood pasta, which was cooked to perfection. \"\n        \"The wine list was also quite impressive. \"\n        \"I would highly recommend this restaurant to anyone looking for a fine dining experience.\"\n    ),\n    (\n        \"I visited The Burger Spot for lunch today and was pleasantly surprised. \"\n        \"Despite being a fast food joint, the quality of the food was excellent. \"\n        \"I ordered the classic cheeseburger and it was juicy and flavorful. \"\n        \"The fries were crispy and well-seasoned. \"\n        \"The service was quick and the staff was friendly. \"\n        \"It's a great place for a quick and satisfying meal.\"\n    ),\n    (\n        \"The Coffee Corner is my favorite spot to work and enjoy a good cup of coffee. \"\n        \"The atmosphere is relaxed and the coffee is always top-notch. \"\n        \"They also offer a variety of pastries and sandwiches. \"\n        \"The staff is always welcoming and the service is fast. \"\n        \"I enjoy their latte and the blueberry muffin is a must-try.\"\n    )\n]\n\n# NOTE\n# string1 = \"ABC\"\n# string2 = (\"A\" \"B\" \"C\")\n# print(string1 == string2)\n# >>> True\n```", "```py\nfrom skllm.preprocessing import GPTSummarizer\n\ngpt_summarizer = GPTSummarizer(openai_model = \"gpt-3.5-turbo\", max_words = 15)\n\nsummaries = gpt_summarizer.fit_transform(reviews)\n\nprint(summaries)\n```", "```py\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import LabelEncoder\nfrom skllm.preprocessing import GPTVectorizer\nfrom xgboost import XGBClassifier\n\n# Define variables with conventional names to reduce confusion\nX, y = movie_reviews, movie_review_labels\nX_test, y_test = new_movie_reviews, new_movie_review_labels\n\n# Encode labels\nle = LabelEncoder()\ny_encoded = le.fit_transform(y)\ny_test_encoded = le.transform(y_test)\n\n# Use a scikit-learn pipeline \nsteps = [(\"GPT\", GPTVectorizer()), (\"Clf\", XGBClassifier())]\nclf = Pipeline(steps)\n\nclf.fit(X, y_encoded)\n\ny_pred_encoded = clf.predict(X_test)\n\n# Revert the encoded labels to actual labels \ny_pred = le.inverse_transform(y_pred_encoded)\n\nprint(f\"\\nEncoded labels (train set): {y_encoded}\\n\")\nprint(f\"Actual Labels (train set): {y}\")\n\nprint(f\"Predicted labels (encoded): {y_test_encoded}\\n\")\n\nprint(\"------------------\\nEvaluate the performance of XGBoost Classifier:\\n\")\nfor test_review, actual_label, predicted_label in zip(X_test, y_test, y_pred):\n    print(f\"Review: {test_review}\\nActual Label: {actual_label}\\nPredicted Label: {predicted_label}\\n\")\n```", "```py\nEncoded labels (train set): [2 2 1 0 0 1 2 0 1]\n\nActual Labels (train set): ['positive', 'positive', 'neutral', 'negative', 'negative', 'neutral', 'positive', 'negative', 'neutral']\nPredicted labels (encoded): [2 0 1]\n\n------------------\nEvaluate the performance of XGBoost Classifier:\n\nReview:The movie was fantastic! I was captivated by the storyline from beginning to end.\nActual Label: positive\nPredicted Label: positive\n\nReview:I found the film to be quite boring. The plot moved too slowly and the acting was subpar.\nActual Label: negative\nPredicted Label: positive\n\nReview:The movie was okay. Not the best I've seen, but certainly not the worst.\nActual Label: neutral\nPredicted Label: neutral\n```"]