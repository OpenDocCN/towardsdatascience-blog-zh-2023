- en: When Are Songwriters Most Successful?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创作歌手何时最成功？
- en: 原文：[https://towardsdatascience.com/when-are-songwriters-most-successful-9fdf90708e77](https://towardsdatascience.com/when-are-songwriters-most-successful-9fdf90708e77)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/when-are-songwriters-most-successful-9fdf90708e77](https://towardsdatascience.com/when-are-songwriters-most-successful-9fdf90708e77)
- en: Let’s find out with KDE plots
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们用KDE图来找出答案。
- en: '[](https://medium.com/@lee_vaughan?source=post_page-----9fdf90708e77--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----9fdf90708e77--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9fdf90708e77--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9fdf90708e77--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----9fdf90708e77--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@lee_vaughan?source=post_page-----9fdf90708e77--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----9fdf90708e77--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9fdf90708e77--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9fdf90708e77--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----9fdf90708e77--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9fdf90708e77--------------------------------)
    ·11 min read·Aug 22, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9fdf90708e77--------------------------------)
    ·阅读时间11分钟·2023年8月22日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/91cfa91f27be316505c84cd95be8b058.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/91cfa91f27be316505c84cd95be8b058.png)'
- en: A singer receiving a Grammy Award amid a flurry of confetti (created with the
    assistance of DALL-E2)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一位歌手在五彩纸屑飞舞中接受格莱美奖（由DALL-E2协助创建）
- en: At what age are singer-songwriters most successful? I wondered this the other
    day when I heard an old Stevie Wonder song. My *impression* was that, like mathematicians,
    singer-songwriters peak in their mid-late 20s. But what does the *data* say?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 创作歌手在什么年龄段最成功？我前几天听到一首老歌时就想到了这个问题。我*印象中*，像数学家一样，创作歌手的巅峰期在20岁中期到晚期。但*数据*显示了什么？
- en: In this *Quick Success Data Science* project, we’ll use Python, pandas, and
    the Seaborn plotting library to investigate this question. We’ll look at the careers
    of 16 prominent singer-songwriters with over 500 hits among them. We’ll also incorporate
    an attractive graphic known as the *kernel density estimate* plot into the analysis.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个*快速成功数据科学*项目中，我们将使用Python、pandas和Seaborn绘图库来调查这个问题。我们将查看16位著名创作歌手的职业生涯，他们合计有超过500首热门歌曲。我们还将在分析中加入一种被称为*核密度估计*的迷人图形。
- en: Methodology
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法论
- en: 'To determine when songwriters are most successful, we’ll need some guidelines.
    The plan is to examine:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定创作歌手何时最成功，我们需要一些指南。计划是检查：
- en: '**Singer-songwriters including those who work with co-writers.**'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包括那些与合作者合作的创作歌手。**'
- en: '**Singer-songwriters with decades-long careers.**'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**职业生涯长达数十年的创作歌手。**'
- en: '**A diverse selection of singer-songwriters and musical genres.**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**各种风格的创作歌手和音乐流派。**'
- en: '**Singer-songwriters on the *Billboard Hot 100* chart.**'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**《Billboard Hot 100》排行榜上的创作歌手。**'
- en: The [*Hot 100*](https://www.billboard.com/charts/hot-100/) is a weekly chart,
    published by *Billboard* magazine, that ranks the best-performing songs in the
    United States. The rankings are based on physical and digital sales, radio play,
    and online streaming. We’ll use it as a *consistent* and *objective* way to judge
    success.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Hot 100*](https://www.billboard.com/charts/hot-100/) 是《*Billboard*》杂志每周发布的排行榜，列出美国表现最佳的歌曲。这些排名基于实体和数字销售、广播播放以及在线流媒体。我们将使用它作为一种*一致*和*客观*的方式来判断成功。'
- en: The Data
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据
- en: 'We’ll use songs written by the following highly successful artists:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下高成功率艺术家的歌曲：
- en: '![](../Images/de6939ab9c5a5831a1d7f12872312682.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/de6939ab9c5a5831a1d7f12872312682.png)'
- en: List of singer-songwriters used in this project (all remaining images by the
    author).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目中使用的创作歌手名单（所有剩余的图片均由作者提供）。
- en: 'I’ve recorded the age of each artist at the time of each of their hits and
    saved it as a CSV file stored on this [Gist](https://gist.github.com/rlvaugh/c3bd6aa921e7a7d930a220f565c25208).
    If they had multiple hits in the same year, their age entry was repeated for each
    hit. Here’s a glimpse at the top of the file:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我记录了每位艺术人在每首热门歌曲时的年龄，并将其保存为CSV文件，存储在这个 [Gist](https://gist.github.com/rlvaugh/c3bd6aa921e7a7d930a220f565c25208)
    上。如果他们在同一年有多首热门歌曲，他们的年龄条目会为每首歌曲重复一次。这里是文件顶部的一个快照：
- en: '![](../Images/03e8a8ebe71c905b25db9125169aca9c.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/03e8a8ebe71c905b25db9125169aca9c.png)'
- en: The first few rows of the CSV file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: CSV文件的前几行。
- en: Cross-referencing this information is tedious (ChatGPT refused to do it!). Consequently,
    a few hits written by these artists but performed by others may have been inadvertently
    excluded.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 交叉参考这些信息是繁琐的（ChatGPT拒绝这么做！）。因此，一些由这些艺术家创作但由其他人表演的作品可能不小心被遗漏了。
- en: Kernel Density Estimate Plots
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核密度估计图
- en: A *kernel density estimate plot* is a method — similar to a histogram — for
    visualizing the distribution of data points. While a histogram bins and counts
    observations, a KDE plot *smooths* the observations using a Gaussian kernel. This
    produces a *continuous density estimate* where the y-values are normalized so
    that the total area under the curve equals one.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*核密度估计图*是一种类似于直方图的数据点分布可视化方法。虽然直方图对观察值进行分箱和计数，KDE图则使用高斯核对观察值进行*平滑*。这产生了一个*连续的密度估计*，其中y值被归一化，使得曲线下的总面积等于一。'
- en: The following figure compares the two methods. How well they capture the underlying
    data depends on how the histogram is binned and how the KDE plot is smoothed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下图比较了这两种方法。它们对底层数据的捕捉效果取决于直方图的分箱方式和KDE图的平滑方式。
- en: '![](../Images/fe3fbc38146c8c8266afd5a085909cf9.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fe3fbc38146c8c8266afd5a085909cf9.png)'
- en: A KDE plot (curve) vs. a histogram (bars) for a series of observations (dots).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: KDE图（曲线）与直方图（条形）用于一系列观察值（点）的对比。
- en: Unlike histograms, which don’t differentiate where a sample falls *within* a
    bin, a KDE plot draws a small Gaussian bell curve over each individual sample.
    These bell curves are then summed together to form the final curve. This makes
    KDE plots wider than histograms, with an underlying assumption that the data extends
    smoothly toward the extremes. Thus, KDE plots won’t stop abruptly at zero, even
    if that’s a hard limit to the data.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与直方图不同，直方图无法区分样本在某个区间内的具体位置，而KDE图会在每个单独的样本上绘制一个小的高斯钟形曲线。这些钟形曲线会被叠加在一起形成最终的曲线。这使得KDE图比直方图更宽，假设数据会平滑地扩展到极端值。因此，即使数据的硬限制为零，KDE图也不会突然停在零处。
- en: '![](../Images/e0c272631c4094c5159b0307a2f4a922.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e0c272631c4094c5159b0307a2f4a922.png)'
- en: The final KDE curve is built from bell curves over each individual data point.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的KDE曲线是由每个单独数据点上的钟形曲线构建而成。
- en: KDE plots use *bandwidth* for the kernel smoothing process. Selecting the *proper*
    bandwidth is both important and something of an art. The smaller the bandwidth,
    the more closely the KDE plot honors the underlying data. The wider the bandwidth,
    the more the data is averaged and smoothed.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: KDE图使用*带宽*进行核平滑处理。选择*合适*的带宽既重要又具有一定的艺术性。带宽越小，KDE图越能忠实于底层数据。带宽越大，数据被平均和平滑的程度越高。
- en: '![](../Images/fd94544ffff5824b904278da5e92ef24.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fd94544ffff5824b904278da5e92ef24.png)'
- en: Example of bandwidth smoothing in a KDE plot.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 带宽平滑在KDE图中的示例。
- en: Narrow bandwidths can produce rugose curves that defeat the purpose of using
    a KDE plot in the first place. They can also introduce random noise artifacts.
    On the other hand, wide bandwidths (such as 2) can smooth *too much*, causing
    important features of the data distribution, like bimodality, to be lost.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 狭窄的带宽会产生粗糙的曲线，这违背了使用KDE图的初衷。它们还可能引入随机噪声伪影。另一方面，宽带宽（如2）可能会过度平滑，导致数据分布的重要特征（如双峰性）丢失。
- en: '![](../Images/cba44316ea2d966049d6f05c76398405.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cba44316ea2d966049d6f05c76398405.png)'
- en: The impact of applying different bandwidth adjustments to the final curve.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 应用不同带宽调整对最终曲线的影响。
- en: While the seaborn library’s `kdeplot()` method uses good defaults for generating
    plots, you'll probably want to play with the `bw_adjust` parameter to tune the
    KDE plot to the story you're trying to tell.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然seaborn库的`kdeplot()`方法使用了良好的默认值来生成图表，但你可能需要调整`bw_adjust`参数，以便将KDE图调整到你想要讲述的故事。
- en: 'So why use a KDE plot when there’s a perfectly good histogram sitting right
    there? Here are some reasons:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么在已经有一个完美的直方图的情况下还要使用KDE图呢？以下是一些原因：
- en: KDE plots are less cluttered than histograms and much more readable when overlaying
    multiple distributions in a single figure.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KDE图比直方图更简洁，当在单个图中叠加多个分布时可读性更强。
- en: KDE plots can let you see patterns in data (such as central tendency, bimodality,
    and skew) that may be obscured in a histogram view.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KDE图可以让你看到数据中的模式（如集中趋势、双峰性和偏斜），这些在直方图视图中可能会被遮蔽。
- en: Similar to [sparklines](https://en.wikipedia.org/wiki/Sparkline), KDE plots
    are good for “quick looks” and quality control.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似于 [sparklines](https://en.wikipedia.org/wiki/Sparkline)，KDE 图形适合于“快速查看”和质量控制。
- en: KDE plots are arguably more attractive than histograms and make a better choice
    for infographics aimed at the general public.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KDE 图形在视觉上可能比直方图更具吸引力，更适合面向大众的信息图表。
- en: KDE plots facilitate easy comparisons between subsets of data.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KDE 图形便于在数据子集之间进行轻松比较。
- en: For more on KDE plots, see the `kdeplot()` [docs](http://seaborn.pydata.org/generated/seaborn.kdeplot.html)
    and the [*Kernel density estimation* section](http://seaborn.pydata.org/tutorial/distributions.html#tutorial-kde)
    of seaborn’s visualization guide.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 KDE 图形的更多信息，请参阅 `kdeplot()` 的 [文档](http://seaborn.pydata.org/generated/seaborn.kdeplot.html)
    和 seaborn 可视化指南的 [*Kernel density estimation* 部分](http://seaborn.pydata.org/tutorial/distributions.html#tutorial-kde)。
- en: Installing Libraries
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装库
- en: 'For this project, we’ll need to install seaborn for plotting and pandas for
    data analysis. You can install these libraries as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们需要安装 seaborn 用于绘图，pandas 用于数据分析。你可以按如下方式安装这些库：
- en: 'With conda: `conda install pandas seaborn`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '使用 conda: `conda install pandas seaborn`'
- en: 'With pip: `pip install pandas seaborn`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '使用 pip: `pip install pandas seaborn`'
- en: The Code
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码
- en: The following code was written in JupyterLab and is described *by cell*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码在 JupyterLab 中编写，并*按单元格*描述。
- en: Importing Libraries and Loading the Data
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入库和加载数据
- en: After importing the libraries, we’ll select the seaborn “whitegrid” style so
    that our plots have a consistent look. We’ll then use pandas to read the CSV file.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 导入库后，我们将选择 seaborn 的“whitegrid”样式，以确保我们的图表具有一致的外观。然后我们将使用 pandas 读取 CSV 文件。
- en: If you’re using a virtual environment, note that NumPy and Matplotlib are *dependencies*
    of pandas, so there’s no need to install them independently.
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你使用虚拟环境，请注意 NumPy 和 Matplotlib 是 pandas 的*依赖项*，因此无需单独安装它们。
- en: Because some artists had more hits than others and DataFrames need to be rectangular,
    some columns will be assigned missing values. We’ll replace these `NaN` values
    with zeros using the `fillna()` method.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于一些艺术家的热门歌曲比其他艺术家多，而 DataFrames 需要是矩形的，因此一些列将被分配缺失值。我们将使用 `fillna()` 方法将这些
    `NaN` 值替换为零。
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/cb2c941bef30639c7b7ffa9c2f69fbcf.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cb2c941bef30639c7b7ffa9c2f69fbcf.png)'
- en: The head of the initial DataFrame.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 初始 DataFrame 的前几行。
- en: Melting the DataFrame
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 融化 DataFrame
- en: Our DataFrame is currently in “wide” format. Every artist’s name is a column
    *header,* and their ages are the column *values*. Python’s plotting libraries
    tend to prefer “long” formats. This means that the artists’ names should be *row*
    values and should be repeated for each corresponding age.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 DataFrame 目前是“宽格式”的。每个艺术家的名字是列的*标题*，他们的年龄是列的*值*。Python 的绘图库更喜欢“长格式”。这意味着艺术家的名字应该是*行*的值，并且应该为每个对应的年龄重复。
- en: For convenience, pandas includes a method called `melt()` that converts from
    wide to long format. The `var_name` argument is used to set a new column, called
    "Name," to hold our previous column names. The `value_name` argument indicates
    that the previous column values should now be under a column named "Age."
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便，pandas 提供了一个名为 `melt()` 的方法，可以将数据从宽格式转换为长格式。`var_name` 参数用于设置一个名为“Name”的新列，以存放之前的列名。`value_name`
    参数表示之前的列值现在应该放在名为“Age”的列下。
- en: In addition, we’ll add a new column named “Color,” which we’ll set to “red.”
    This is a handy way to group the data for later plotting. We’ll also filter out
    `Age` values equal to zero so that we can get an accurate count of hit songs per
    artist.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将添加一个名为“Color”的新列，并将其设置为“红色”。这是一种方便的方式，用于后续绘图时分组数据。我们还将过滤出 `Age` 值为零的记录，以准确统计每位艺术家的热门歌曲数量。
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/e26f6f19ef8a872d1f9fbd7ffb348f55.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e26f6f19ef8a872d1f9fbd7ffb348f55.png)'
- en: The tail of the long format melted DataFrame.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 长格式融化的 DataFrame 的尾部。
- en: Plotting the Number of Hits per Artist
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制每位艺术家的热门歌曲数量
- en: Next, we’ll use pandas’ `value_counts()` method to count the number of *Hot
    100* hits per artist. As part of the process, we'll sort the data in descending
    order.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 pandas 的 `value_counts()` 方法来计算每位艺术家的 *Hot 100* 热门歌曲数量。作为过程的一部分，我们将按降序排序数据。
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/6011e7b456e7dd83b1e391fea19093cf.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6011e7b456e7dd83b1e391fea19093cf.png)'
- en: The number of *Hot 100* hits by each artist over their career.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 每位艺术家在其职业生涯中的*Hot 100* 热门歌曲数量。
- en: Plotting Age at the Time of Last Hit and Total Time Between Hits
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制最后一次热门歌曲时的年龄和歌曲之间的总时间
- en: Next, we’ll plot how old each artist was at the time of their last *Hot 100*
    hit, along with the time between the first and last appearance on the chart.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将绘制每位艺术人在其最后一次*Hot 100*热门歌曲时的年龄，以及首次和最后一次出现在榜单上的时间跨度。
- en: Since we’ll need to find each artist’s minimum age, we’ll first set 0 values
    in the `df` DataFrame to `NaN`, so they will be ignored. Otherwise, 0 would be
    picked as the minimum age. We won't sort the results as we want to compare charts
    side-by-side, and thus want the artist names to remain in the same order.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要找出每位艺术家的最小年龄，我们首先将`df` DataFrame中的0值设置为`NaN`，这样它们将被忽略。否则，0会被选为最小年龄。我们不会对结果进行排序，因为我们希望将图表并排比较，因此希望艺术家名称保持相同的顺序。
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/e5e0f9f5a5037f05990b7e8141a3b765.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e5e0f9f5a5037f05990b7e8141a3b765.png)'
- en: Comparison of each artist’s age at the time of their last hit with the timespan
    between hits.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 比较每位艺术家最后一次热门歌曲的年龄与歌曲之间的时间跨度。
- en: Takeaways from these charts are that more than half of the artists charted all
    their hits before age 50 and charted over timespans of 30 years or less.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些图表中可以得出结论，超过一半的艺术家在50岁之前就登上了所有热门榜单，并且这些热门歌曲的时间跨度为30年或更短。
- en: Calculating Age Statistics
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算年龄统计数据
- en: Now, let’s find the age when the artists were most successful. Since a single
    statistic can’t necessarily capture this, we’ll use pandas’ `mean()`, `median()`,
    and `mode()` methods.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们找出艺术家们最成功的年龄。由于单一统计数据无法完全捕捉这一点，我们将使用pandas的`mean()`、`median()`和`mode()`方法。
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/5c474b52264002b72bfa705b3a59ec16.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5c474b52264002b72bfa705b3a59ec16.png)'
- en: Of the 16 singer-songwriters under investigation, the successful “sweet spot”
    appears to be around 29–33 years old.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在调查的16位创作歌手中，成功的“甜点”似乎在29至33岁之间。
- en: 'Note: An assumption in this analysis is that songs are written in the same
    year that they appear on the *Hot 100* chart. Because there’ll be a lag time between
    when the song is written and when it appears on the chart, there may be a slight
    bias to *older* ages in our statistics.'
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：本分析的假设是歌曲是在其出现在*Hot 100*榜单的同一年创作的。由于歌曲创作和出现在榜单之间会有时间滞后，我们的统计数据可能会对*年长*的年龄有所偏倚。
- en: Finding the Success Sweet Spot Using a KDE Plot
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用KDE图找到成功的甜点
- en: A visual way to find the sweet spot is with a KDE plot. We’ll use seaborn’s
    `kdeplot()` method and pass it the melted DataFrame. We'll also set the `hue`
    argument to the "Color" column, which means it will ignore the artist's name and
    plot all the age values as a single group.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找甜点的可视化方式是使用KDE图。我们将使用seaborn的`kdeplot()`方法，并传递融化的DataFrame。我们还将`hue`参数设置为“颜色”列，这意味着它将忽略艺术家的名字，并将所有年龄值绘制为一个组。
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/1b958ec8bee1020dde2883d222c96567.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1b958ec8bee1020dde2883d222c96567.png)'
- en: A KDE plot of the “Age” column for all the artists.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 所有艺术家的“年龄”列的KDE图。
- en: This plot confirms what we learned earlier, that the greatest success peaks
    at just over 30 years. The blip after 70 years represents Paul McCartney’s collaboration
    with Kanye West in 2015 when McCartney was 73 years old.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 该图确认了我们之前学到的，最大成功通常在30岁左右。70岁后的高峰代表了保罗·麦卡特尼在2015年与坎耶·维斯特的合作，当时麦卡特尼73岁。
- en: Comparing Careers with a Facet Grid
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Facet Grid比较职业生涯
- en: '*Facet grids* are ways to create *multiple* plots with *shared* axes that display
    *different* subsets of a dataset. We’re going to make a facet grid that uses KDE
    plots to compare each artist’s hit distribution.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*Facet grids*是创建*多个*具有*共享*坐标轴的图表的方法，这些图表显示数据集的*不同*子集。我们将制作一个facet grid，使用KDE图来比较每位艺术家的热门分布。'
- en: We’ll start by calling seaborn’s `FacetGrid()` method and passing it the melted
    DataFrame and its "Name" column. We'll want to compare *all* the artists with
    no distractions, so we'll use the same color, designated by the `hue` argument,
    for each curve. By setting the `col_wrap` argument to `2`, we split the display
    into 2 columns with 8 curves in each.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先调用seaborn的`FacetGrid()`方法，并将其应用于融化的DataFrame及其“名称”列。为了在没有干扰的情况下比较*所有*艺术家，我们将为每条曲线使用相同的颜色，由`hue`参数指定。通过将`col_wrap`参数设置为`2`，我们将显示分成2列，每列8条曲线。
- en: With the facet grid defined, we’ll call the `kdeplot()` method and map it to
    the facet grid, designated as the `g` variable. We'll set the bandwidth adjustment
    (`bw_adjust`) to `0.4` so that we don't smooth out all the variability in the
    data.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 定义好facet grid后，我们将调用`kdeplot()`方法，并将其映射到facet grid中，指定为`g`变量。我们将带宽调整（`bw_adjust`）设置为`0.4`，以避免平滑掉数据中的所有变异性。
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/30b1aea8999a73fd08401d6fb815a498.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/30b1aea8999a73fd08401d6fb815a498.png)'
- en: A facet grid of each artist’s KDE plot.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 每位艺术家的 KDE 图的 facet grid。
- en: What a wonderful chart! Sleek and packed with information. This is where KDE
    plots come into their own.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 多么美妙的图表！简洁而信息丰富。这就是 KDE 图发挥作用的地方。
- en: With just a glance you can see Sting’s early success with *The Police* followed
    by a successful solo career. Johnny Cash’s bimodal distribution mirrors his struggle
    with drug addiction. Paul Simon’s later career success with the *Graceland* album
    appears as a blip at age 45\. And, as we saw in our earlier analysis, most of
    the peaks tend to cluster around ages 29–34.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 只需一眼，你就可以看到斯汀在*警察乐队*的早期成功，随后是成功的个人生涯。约翰尼·卡什的双峰分布反映了他与药物成瘾的斗争。保罗·西蒙在*格拉斯兰*专辑中的后期职业成功在45岁时显得只是一个短暂的高峰。正如我们在早期分析中所见，大多数峰值趋向于集中在29到34岁之间。
- en: Plotting a Stacked KDE Plot
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制堆叠 KDE 图
- en: Another way to tell a story with KDE plots is to stack them in the same panel.
    This always works better than stacking histograms.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种用 KDE 图讲故事的方法是将它们堆叠在同一面板中。这总是比堆叠直方图效果更好。
- en: For our current project, there are too many artists for this to work well at
    an *individual* level. But since our goal is to highlight the “success sweet spot”
    for *all* artists, it does an adequate job.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们当前的项目，有太多艺术家使得在*个人*层面上这种方法效果不佳。但由于我们的目标是突出*所有*艺术家的“成功甜点”，它做得还算不错。
- en: To stack the KDE plots, we just need to call the `kdeplot()` method without
    using the facet grid. An important parameter here is `common_norm`, which stands
    for "common normalization."
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要堆叠 KDE 图，我们只需调用 `kdeplot()` 方法，而不使用 facet grid。这里一个重要的参数是 `common_norm`，它代表“公共归一化”。
- en: According to seaborn's [documentation](https://seaborn.pydata.org/generated/seaborn.kdeplot.html),
    "When `common_norm` is set to `True`, all the KDE curves will be normalized together
    using the same scale. This can be useful when you want to compare the overall
    distribution shapes of different groups. It’s particularly helpful when you have
    multiple groups with different sample sizes or different ranges of values, as
    it ensures that the curves are directly comparable in terms of their shapes."
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 根据 seaborn 的[文档](https://seaborn.pydata.org/generated/seaborn.kdeplot.html)，"当
    `common_norm` 设置为 `True` 时，所有 KDE 曲线将使用相同的尺度进行归一化。这在你想比较不同组的整体分布形状时非常有用。当你有多个样本量不同或值范围不同的组时，尤其有帮助，因为这可以确保曲线在形状上直接可比。"
- en: We definitely have different sample sizes per artist and want to compare curves,
    so we’ll set `common_norm` to `True`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们每位艺术家的样本量确实不同，并且希望比较曲线，所以我们将 `common_norm` 设置为 `True`。
- en: '[PRE7]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/bcb18500819245d6a2e0651acec14cd7.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bcb18500819245d6a2e0651acec14cd7.png)'
- en: Stacked KDE plots for each artist with common normalization set to “True”.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 每位艺术家的堆叠 KDE 图，公共归一化设置为“True”。
- en: While it’s difficult if not impossible to identify the curve for specific artists
    (even if you use a different color per artist), it’s pretty clear that the optimum
    age is around 30 years.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然很难甚至不可能识别特定艺术家的曲线（即使你为每位艺术家使用不同的颜色），但很明显最佳年龄在30岁左右。
- en: 'If you’re curious, here’s what the plot looks like with `common_norm` set to
    `False`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你感兴趣的话，这里是 `common_norm` 设置为 `False` 时的图：
- en: '![](../Images/82de6fabe90b8d990493abb602e59bed.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/82de6fabe90b8d990493abb602e59bed.png)'
- en: Stacked KDE plots per artist with common normalization set to “False”.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 每位艺术家的堆叠 KDE 图，公共归一化设置为“False”。
- en: Plotting a Distribution Plot
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制分布图
- en: Finally, let’s visualize the data as a *distribution plot*. Seaborn’s `displot()`
    method provides a figure-level interface for drawing distribution plots onto a
    seaborn `FacetGrid`. It lets you choose multiple plot types, such as KDEs and
    histograms, with the `kind` parameter.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们将数据可视化为*分布图*。seaborn 的 `displot()` 方法提供了一个图形级别的接口，用于在 seaborn `FacetGrid`
    上绘制分布图。它允许你选择多种图类型，例如 KDE 和直方图，通过 `kind` 参数。
- en: Another nice feature is the inclusion of a "rug plot," added using the `rug`
    parameter. A rug plot marks the location of data points along an axis. This lets
    you see the limits of the actual data, which may be obscured by the "tails" of
    the KDE plot.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个不错的功能是添加了“rug 图”，通过 `rug` 参数实现。rug 图标记了数据点在轴上的位置。这让你能够看到实际数据的范围，这些数据可能被 KDE
    图的“尾部”遮掩。
- en: '[PRE8]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/3a524fb9c330cb8354bc0570c7972c04.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3a524fb9c330cb8354bc0570c7972c04.png)'
- en: A Distribution Plot including both KDE and rug plots (image by the author)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 包含 KDE 和 rug 图的分布图（图像由作者提供）
- en: I personally find this plot difficult to parse, but it does highlight the peak
    success years around age 30.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人发现这个图很难解读，但它确实突出了30岁左右的高峰成功年。
- en: Conclusion
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: KDE plots, with their smooth, pleasing shapes, are a great way to visualize
    univariate data. While functionally similar to histograms, they make it easier
    to see patterns in the data and to stack and compare multiple distributions in
    the same figure.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: KDE 曲线图以其平滑、令人愉悦的形状，是可视化单变量数据的绝佳方式。虽然功能上类似于直方图，但它们更容易展示数据中的模式，并在同一图形中堆叠和比较多个分布。
- en: With the aid of KDE plots, we were able to show that singer-songwriters are
    most successful around the age of 30\. So, if you want to start a career as a
    singer-songwriter, don’t put it off!
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 借助 KDE 曲线图，我们能够展示出创作歌手在大约 30 岁时最为成功。因此，如果你想开始创作歌手的职业生涯，千万不要拖延！
- en: Thanks!
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谢谢！
- en: Thanks for reading and please follow me for more *Quick Success Data Science*
    projects in the future.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读，请关注我，以便未来了解更多*快速成功的数据科学*项目。
