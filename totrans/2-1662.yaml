- en: 'Plotly and Python: Creating Interactive Heatmaps for Petrophysical & Geological
    Data'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/plotly-and-python-creating-interactive-heatmaps-for-petrophysical-geological-data-701c22b32e4](https://towardsdatascience.com/plotly-and-python-creating-interactive-heatmaps-for-petrophysical-geological-data-701c22b32e4)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Visualising Geospatial Variations in Well Log Measurements Within the Subsurface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----701c22b32e4--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----701c22b32e4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----701c22b32e4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----701c22b32e4--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----701c22b32e4--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----701c22b32e4--------------------------------)
    ·7 min read·Jun 16, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/35b29ba7d5655817f6d57fc568fbf22d.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotly heatmap used to explore geospatial variation in well log measurements
    across the Norwegian Continental Shelf. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Interpreting the subsurface requires understanding how geological and petrophysical
    data varies across a region. This often involves dealing with well log measurements
    and interpreted properties scattered across the area, which leads to the challenge
    of estimating the values between these measurements.
  prefs: []
  type: TYPE_NORMAL
- en: One way that we can estimate the values (or fill in the gaps) is by using a
    geostatistical method called kriging. This method estimates and extrapolates data
    between observed measurements and predicts values at unmeasured locations.
  prefs: []
  type: TYPE_NORMAL
- en: '[**In my previous article,**](/utilising-pykrige-and-matplotlib-for-spatial-visualisation-of-geological-variations-a288b186bfd6)
    we focused on using [**pykrige**](https://github.com/GeoStat-Framework/PyKrige)
    and [**matplotlib**](https://matplotlib.org/) to map and visualise geological
    variation across the Norwegian continental shelf. This article will take that
    visualisation further and make those plots interactive.'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/utilising-pykrige-and-matplotlib-for-spatial-visualisation-of-geological-variations-a288b186bfd6?source=post_page-----701c22b32e4--------------------------------)
    [## Utilising pykrige and matplotlib for Spatial Visualisation of Geological Variations'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Spatial Geological Variation from Well Log Measurements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/utilising-pykrige-and-matplotlib-for-spatial-visualisation-of-geological-variations-a288b186bfd6?source=post_page-----701c22b32e4--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Quick Recap on Using Pykrige
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we use Plotly, we will quickly recap the code used in the previous article
    so that you are up to speed with the process.
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to import the libraries that we require. In this case, we
    need [**pandas**](https://pandas.pydata.org/) for loading our csv data, [**pykrige**](https://github.com/GeoStat-Framework/PyKrige)
    to carry out the interpolation between the data points, and [**numpy**](https://numpy.org/)
    to carry out a few mathematical operations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once the data has been loaded, we can carry out the kriging process by calling
    upon pykrige’s `OrdinaryKriging` method.
  prefs: []
  type: TYPE_NORMAL
- en: Within this call, we pass in our x and y data, representing our data’s latitude
    and longitude. We also need to pass in the variable we want to extrapolate. In
    this case, we are using the average Acoustic Compressional Slowness (DTC) value
    for the Balder Formation.
  prefs: []
  type: TYPE_NORMAL
- en: Once the model has been generated, we can apply it to custom latitude and longitude
    ranges that cover the locations of the wells.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We then take our two positional arrays, `grid_lat` and `grid_long` and our gridded
    data and pass them into a matplotlib `imshow` plot. This will generate a plot
    similar to the one below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5871943358ddc8cd5503248333b8b75a.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib imshow chart of data that has been run through Ordinary Kriging using
    pykrige. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Even though the figure we returned tells a story about trends in our data, it
    is difficult to identify specific wells and any of the values between the measurement
    points.
  prefs: []
  type: TYPE_NORMAL
- en: Using Plotly to Make Our Chart Interactive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One way to instantly change this would be to use the [**Plotly**](https://plotly.com/)
    library. [**Plotly**](https://plotly.com/) is a great library for creating highly
    interactive charts that are easy to put together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Plotly comes with two main ways in which to construct plots: Plotly Express
    and Plotly Graph Objects.'
  prefs: []
  type: TYPE_NORMAL
- en: Plotly Express provides a high-level interface for Plotly, and utilises simple
    syntax for creating powerful interactive charts. However, customising certain
    aspects of the plot can take a lot of work and can be difficult to do. This is
    where the Graph Objects part of the library comes into play. It provides a low-level
    interface which provides complete control over your figures; however, it does
    mean that putting a figure together is slightly more complex.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we will be using Graph Objects, which can be imported as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Next, we can define our `x` and `y` arrays using numpy’s `linspace` function.
  prefs: []
  type: TYPE_NORMAL
- en: This will create two arrays the same size as the data grid we created earlier.
  prefs: []
  type: TYPE_NORMAL
- en: We will also create two lists for longitude and latitude. These values extend
    beyond the data’s longitude and latitude values and allow us to have padding around
    the edge of our data points.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When using matplotlib, we could display this type of data using `imshow`.
  prefs: []
  type: TYPE_NORMAL
- en: Even though Plotly also has an `imshow` plot, we are not (as far as I am aware
    at the time of writing) able to control the extent of the graph. This means we
    can’t specify the values for the starting points of the axes.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, to display our data grid, we can switch to using [**Plotly’s heatmap**](https://plotly.com/python/heatmaps/).
  prefs: []
  type: TYPE_NORMAL
- en: The heatmap colours each data cell within our grid based on its value. You can
    find out more about heatmaps [in my article on Seaborn.](/seaborn-heatmap-for-visualising-data-correlations-66cbef09c1fe)
  prefs: []
  type: TYPE_NORMAL
- en: We can use the following code to create our heatmap with Plotly Graph Objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: First, we create a figure object and then add a trace to it. This trace contains
    our `x` and `y` location data, as well as our grid (`zstar`)created by kriging.
  prefs: []
  type: TYPE_NORMAL
- en: We will also set the size of the figure to 800 x 800, which will give us a large
    enough plot to work with inside Jupyter notebooks.
  prefs: []
  type: TYPE_NORMAL
- en: After running the above code, we get the heatmap with all our data values and
    the axes displayed within the correct range.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/da54209a570fcc560e646ea82ab40749.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotly Graph Objects heatmap showing variations within our Acoustic Compressional
    Slowness measurement across the Norwegian Continental Shelf. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: The great thing about this plot is that we can hover over it and view the values
    at any point. Additionally, Plotly allows us to zoom in on sections for a closer
    look.
  prefs: []
  type: TYPE_NORMAL
- en: Even though the above plot is great, we are lacking additional information which
    would help the reader, such as our well locations and also labels for our axes.
  prefs: []
  type: TYPE_NORMAL
- en: To add our well locations, we need to add a second trace. This time using `go.scatter()`
    and passing in the latitude and longitude values from our dataframe. We can also
    control how these points appear by adding a dictionary for our markers. In this
    example, we will set them to black.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a95a31b09e4fd3e0ef7782f21e641a00.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotly Graph Objects heatmap showing measurement locations (wells) and variations
    within our Acoustic Compressional Slowness measurement across the Norwegian Continental
    Shelf. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can see where our wells are located; however, if we hover over the markers,
    all we get back is the latitude and longitude values. This is useful to a certain
    extent; however, it would be nice to know what well the marker represents and
    what value of DTC was measured for that well.
  prefs: []
  type: TYPE_NORMAL
- en: To solve that, we can create our hover text directly within the dataframe as
    a new column. This is useful if we want to use it later for other plots.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we get back the following plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fb7221ec0ebb040d9c0a13991efa744f.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotly Graph Objects heatmap with added interactivity. This plot shows measurement
    locations (wells) and variations within our Acoustic Compressional Slowness. Image
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Now, when we hover over any of the wells, we will get the well name, followed
    by the latitude and longitude, and the log value. In this case, we are displaying
    the acoustic compressional slowness.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this short tutorial, we have seen how we can go beyond a simple and static
    matplotlib figure of our measurement variation. The extra functionality and interactivity
    from Plotly makes it a great choice to visualise geospatial variations in well
    log measurements.
  prefs: []
  type: TYPE_NORMAL
- en: The extra interactivity allows us to identify what well each of the dots represents,
    what the measured value was at that location, and interpret the values of the
    grid that do not have a direct measurement.
  prefs: []
  type: TYPE_NORMAL
- en: Dataset Used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The dataset used in this article is a subset of a training dataset used as
    part of a Machine Learning competition run by Xeek and FORCE 2020 *(Bormann et
    al., 2020)*. It is released under a NOLD 2.0 licence from the Norwegian Government,
    details of which can be found here: [Norwegian Licence for Open Government Data
    (NLOD) 2.0](https://data.norge.no/nlod/en/2.0/). The full dataset can be accessed
    [here](https://doi.org/10.5281/zenodo.4351155).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The full reference for the dataset is:'
  prefs: []
  type: TYPE_NORMAL
- en: Bormann, Peter, Aursand, Peder, Dilib, Fahad, Manral, Surrender, & Dischington,
    Peter. (2020). FORCE 2020 Well well log and lithofacies dataset for machine learning
    competition [Data set]. Zenodo. [http://doi.org/10.5281/zenodo.4351156](http://doi.org/10.5281/zenodo.4351156)
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Secondly, you can get the full Medium experience and support thousands of
    other writers and me by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the fantastic Medium articles, as well as the
    chance to make money with your writing.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support.*'
  prefs: []
  type: TYPE_NORMAL
