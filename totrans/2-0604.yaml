- en: Creating Dynamic Choropleth Visualizations Using Plotly
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Plotly 创建动态区域图可视化
- en: 原文：[https://towardsdatascience.com/creating-dynamic-choropleth-visualizations-using-plotly-61d266cbe9b4](https://towardsdatascience.com/creating-dynamic-choropleth-visualizations-using-plotly-61d266cbe9b4)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/creating-dynamic-choropleth-visualizations-using-plotly-61d266cbe9b4](https://towardsdatascience.com/creating-dynamic-choropleth-visualizations-using-plotly-61d266cbe9b4)
- en: Using a simple-to-learn package to create a complex visualization
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用易于学习的包来创建复杂的可视化
- en: '[](https://hd2zm.medium.com/?source=post_page-----61d266cbe9b4--------------------------------)[![Hari
    Devanathan](../Images/9c793030ed7d21a2ed2955c57fa19273.png)](https://hd2zm.medium.com/?source=post_page-----61d266cbe9b4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----61d266cbe9b4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----61d266cbe9b4--------------------------------)
    [Hari Devanathan](https://hd2zm.medium.com/?source=post_page-----61d266cbe9b4--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://hd2zm.medium.com/?source=post_page-----61d266cbe9b4--------------------------------)[![Hari
    Devanathan](../Images/9c793030ed7d21a2ed2955c57fa19273.png)](https://hd2zm.medium.com/?source=post_page-----61d266cbe9b4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----61d266cbe9b4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----61d266cbe9b4--------------------------------)
    [Hari Devanathan](https://hd2zm.medium.com/?source=post_page-----61d266cbe9b4--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----61d266cbe9b4--------------------------------)
    ·12 min read·Dec 18, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----61d266cbe9b4--------------------------------)
    ·12 min 阅读·2023年12月18日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/17c9e259f0a21a20f9cdd5fc479fc7db.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/17c9e259f0a21a20f9cdd5fc479fc7db.png)'
- en: Photo by [NASA](https://unsplash.com/@nasa?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[NASA](https://unsplash.com/@nasa?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Visualizing data is a step that gets overlooked by data scientists. It helps
    us tell stories by analyzing and curating data into a form easy to understand.
    By removing all the technical detail and noise and highlighting key information,
    data scientists can explain the importance of their work to non-technical managers
    and executives.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化数据是数据科学家经常忽略的一步。它帮助我们通过分析和整理数据来讲述故事，使其易于理解。通过去除所有技术细节和噪音，突出关键信息，数据科学家可以向非技术经理和高管解释其工作的意义。
- en: There are many tools to help visualize data. For years, Microsoft Excel dominated
    the static visualization market. Over time, we gravitated to dynamic visualizations
    and flexibility to showcase more data in a cleaner manner. Two types of tools
    helped create dynamic visuals.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有许多工具可以帮助可视化数据。多年来，Microsoft Excel 主导了静态可视化市场。随着时间的推移，我们转向了动态可视化，灵活展示更多数据。两种类型的工具帮助创建了动态可视化。
- en: '**Business Intelligence and Analytics Software:** Tableau, PowerBI'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**商业智能和分析软件：** Tableau，PowerBI'
- en: '**Open-sourced programming libraries:** D3.js, Plotly Dash'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开源编程库：** D3.js，Plotly Dash'
- en: Third party software tools like Tableau and PowerBI are excellent for non-technical
    folks. Drag and drop interfaces and abstractions allow analysts to create dynamic
    dashboards easily. The drawbacks are
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 像 Tableau 和 PowerBI 这样的第三方软件工具对于非技术人员非常优秀。拖放界面和抽象功能使分析师能够轻松创建动态仪表板。缺点是
- en: software tools are expensive
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件工具价格昂贵
- en: a bit of a learning curve to learn these tools
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习这些工具需要一些时间
- en: limits to visualization design; software may not allow some components
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化设计的限制；软件可能不允许某些组件
- en: Open-sourced programming libraries are excellent for technical folks. Those
    comfortable with software engineering can follow the documentation to create flexible
    dynamic visualizations with ease. Furthermore, these packages are free to use
    (with Plotly offering a paid version for its enterprise Dash components).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 开源编程库对技术人员非常优秀。那些熟悉软件工程的人可以轻松地按照文档创建灵活的动态可视化。此外，这些软件包是免费的（Plotly 为其企业 Dash 组件提供了付费版本）。
- en: The difference between D3.js and Plotly are the following
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js 和 Plotly 的区别如下
- en: D3.js is designed in JavaScript, Plotly is designed in Python
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3.js 使用 JavaScript 设计，Plotly 使用 Python 设计
- en: D3.js has been around longer than Plotly, and thus has better community support
    and a more mature ecosystem(extensive examples and tutorials).
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3.js 的出现时间比 Plotly 要早，因此拥有更好的社区支持和更成熟的生态系统（丰富的示例和教程）。
- en: D3.js requires engineers to understand the low-level details of web development
    (HTML, CSS, JavaScript) in order to use it effectively. Plotly abstracts such
    details in simple-to-use Python classes.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3.js 要求工程师了解 Web 开发的低级细节（HTML、CSS、JavaScript）才能有效使用它。Plotly 将这些细节抽象为易于使用的 Python
    类。
- en: D3.js has a steep learning curve due to its JavaScript nature (asynchronous,
    Domain Object Model, functions), but can build a variety of complex dynamic visualizations.
    Plotly has a small learning curve due to its Python nature, but is limited to
    the kind of visualizations users can build.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3.js 由于其 JavaScript 特性（异步、领域对象模型、函数）有较陡的学习曲线，但可以构建各种复杂的动态可视化。Plotly 因其 Python
    特性学习曲线较小，但在用户可以构建的可视化类型上有所限制。
- en: If this was in 2019, I would recommend D3.js. At that time, Plotly was severely
    constrained on the kinds of visualizations I would have liked to build.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是在2019年，我会推荐D3.js。当时，Plotly在我想要构建的可视化类型上受到了严重限制。
- en: However, I took a look at Plotly again and was impressed with its improvements.
    The clean interface makes it easy to rival some D3.js’s custom visualizations.
    Furthermore, I don’t have to learn the intricacies of JavaScript to utilize the
    package effectively.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我再次查看了 Plotly，并对其改进印象深刻。清晰的界面使其可以与一些 D3.js 的自定义可视化相抗衡。此外，我不需要学习 JavaScript
    的复杂细节就能有效使用这个包。
- en: In fact, I was able to create a complex visualization in just 147 lines of code.
    Below is the video of the visualization.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我仅用147行代码就创建了一个复杂的可视化。下面是该可视化的视频。
- en: '**Video 1**: Names Dashboard [Video](https://www.youtube.com/watch?v=NmDFOqCduts&t=4s)
    created by Author'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**视频 1**：由作者创建的名称仪表盘 [视频](https://www.youtube.com/watch?v=NmDFOqCduts&t=4s)'
- en: So what does the visualization do?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这个可视化做了什么？
- en: It has a map that shows how many people have a particular first name. The particular
    first name is based on the far-right dropdown **Choose Name To See Popularity
    Per State On Map**
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有一张地图，显示有多少人使用特定的名字。特定名字基于最右侧的下拉菜单**选择名称以查看每个州的流行度**。
- en: The names recommended by the **Choose Name To See Popularity Per State On Map**
    dropdown are the most popular N names in the USA. These N names are filtered by
    the middle dropdown **Top N Names,** where N can be 5, 10, or 15.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择名称以查看每个州的流行度**下拉菜单推荐的名称是美国最受欢迎的 N 个名称。这些 N 个名称由中间的下拉菜单**前 N 名名称**筛选，其中
    N 可以是5、10或15。'
- en: These names are also filtered by **Gender.** The **Gender** filter is on the
    far left, where users can choose Male or Female.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些名称也通过**性别**进行筛选。**性别**筛选器位于最左侧，用户可以选择男性或女性。
- en: Once the visualization is drilled down by **Gender, Top N Names,** and **Choose
    Name To See Popularity Per State On Map,** the map then displays the popularity
    of a selected name by state AND by year. There is a year filter that a user can
    drag through to show the popularity of the selected name over time *instantaneously.*
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦通过**性别、前 N 名名称**和**选择名称以查看每个州的流行度**来深入可视化，地图将显示按州和年份划分的选定名称的流行度。用户可以通过拖动年份筛选器来即时显示所选名称的流行度。
- en: If a user clicks on a state, the bar graph below is updated. The bar graph takes
    the state and year of the map upon the click and displays the Top N Popular Names
    in that given state and year. The Top N Names are based on the filter **Top N
    Names.**
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用户点击一个州，下方的条形图会更新。条形图根据点击时的州和年份显示该州和年份的前 N 名流行名称。前 N 名名称基于筛选器**前 N 名名称**。
- en: It has a loading spinner to suggest when data is currently being loaded in,
    thus improving the user experience.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有一个加载旋转器，用于提示当前数据正在加载，从而改善用户体验。
- en: The amazing part? This complex visualization was completed in just ***148 lines***
    of Python code. Some of the complex pieces were added in 1–3 lines of code! Check
    out the repository below.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 惊人的部分是什么？这个复杂的可视化仅用***148 行*** Python 代码完成。一些复杂的部分仅用1-3行代码添加！请查看下面的代码库。
- en: '[](https://github.com/hd2zm/Data-Science-Projects/blob/master/Name-Dashboard/name_dashboard.py?source=post_page-----61d266cbe9b4--------------------------------)
    [## Data-Science-Projects/Name-Dashboard/name_dashboard.py at master · hd2zm/Data-Science-Projects'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/hd2zm/Data-Science-Projects/blob/master/Name-Dashboard/name_dashboard.py?source=post_page-----61d266cbe9b4--------------------------------)
    [## 数据科学项目/名称仪表盘/name_dashboard.py 在 master 分支 · hd2zm/数据科学项目]'
- en: Contribute to hd2zm/Data-Science-Projects development by creating an account
    on GitHub.
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过在 GitHub 上创建账户来为 hd2zm/Data-Science-Projects 开发做出贡献。
- en: github.com](https://github.com/hd2zm/Data-Science-Projects/blob/master/Name-Dashboard/name_dashboard.py?source=post_page-----61d266cbe9b4--------------------------------)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/hd2zm/Data-Science-Projects/blob/master/Name-Dashboard/name_dashboard.py?source=post_page-----61d266cbe9b4--------------------------------)'
- en: I was amazed at how intuitive the package is. The creators put a lot of thought
    into making this easy for people who have limited programming experience.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我对这个包的直观性感到惊讶。开发者在设计时考虑了很多，使得即便是编程经验有限的人也能轻松使用。
- en: While the documentation is straightforward, I’ll go over how I built each component.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然文档很简单明了，但我会详细介绍如何构建每个组件。
- en: Plotly Components
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Plotly 组件
- en: Load in data
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载数据
- en: There are two datasets we’re loading
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在加载两个数据集
- en: '**names_by_state_cleaned.csv** — a custom dataset that lists all the first
    names of a person, the number of people with such name, the year, and the state.
    This dataset was downloaded and cleaned by the [Social Security administration
    website](https://www.ssa.gov/oact/babynames/). The datasets are [publicly available
    for commercial use](https://www.ssa.gov/oact/babynames/limits.html). Datasets
    were downloaded as folders containing many .txt files, and were merged into one
    CSV file using a custom script. This CSV file is 150 MB, and pretty big to upload
    to Github. For convenience sake, I’m attacking a sample screenshot of the dataset.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**names_by_state_cleaned.csv** — 一个自定义数据集，列出了一个人的所有名字、拥有这种名字的人数、年份和州。该数据集由[社会保障管理局网站](https://www.ssa.gov/oact/babynames/)下载并清理。这些数据集[可用于商业用途](https://www.ssa.gov/oact/babynames/limits.html)。数据集以包含多个.txt文件的文件夹形式下载，并通过自定义脚本合并为一个
    CSV 文件。这个 CSV 文件大小为150 MB，上传到 GitHub 有点大。为方便起见，我附上了数据集的示例截图。'
- en: '![](../Images/3f83048ed8a40109994a39ae2687666f.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3f83048ed8a40109994a39ae2687666f.png)'
- en: '**Figure 1**: Sample dataset of **names_by_state_cleaned.csv**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1**：**names_by_state_cleaned.csv**的示例数据集'
- en: '**us-states.json** — a dataset of geographical coordinates of all states in
    the USA. This is used to create the choropleth map. This is 88KB, and can be easily
    loaded in memory. [I’ve uploaded the json to the git repo containing the visualization
    code](https://github.com/hd2zm/Data-Science-Projects/blob/master/Name-Dashboard/us-states.json).'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**us-states.json** — 一个包含美国所有州地理坐标的数据集。这用于创建分级地图。文件大小为 88KB，可以轻松加载到内存中。[我已经将
    json 文件上传到包含可视化代码的 Git 仓库](https://github.com/hd2zm/Data-Science-Projects/blob/master/Name-Dashboard/us-states.json)。'
- en: 'After creating the app, I load the two datasets in memory. Disclaimer: I [explain
    later](#000f) why loading in the csv file in memory isn’t a good idea from a production
    standpoint. For now, I’ll keep it as is.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 创建应用程序后，我将两个数据集加载到内存中。免责声明：我会在稍后[解释](#000f)为什么从生产角度来看，将 CSV 文件加载到内存中不是一个好主意。现在，我将保持现状。
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: HTML Layout
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML 布局
- en: Here’s the HTML design for the application
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用程序的 HTML 设计
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Below is a screenshot of the layout that generates.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是生成的布局截图。
- en: '![](../Images/243917335446fc96376687007e016925.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/243917335446fc96376687007e016925.png)'
- en: '**Figure 2:** Screenshot of dashboard'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2**：仪表板的截图'
- en: For those who are new to web development, Plotly abstracts all the complexities
    of HTML and CSS. Here are all the main components from the application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些刚接触 Web 开发的人来说，Plotly 抽象了 HTML 和 CSS 的所有复杂性。以下是应用程序中的所有主要组件。
- en: Header 1, which is the title of the visualization.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题 1，即可视化的标题。
- en: '![](../Images/6e9a72c0af8806367699504f7dfce714.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6e9a72c0af8806367699504f7dfce714.png)'
- en: Screenshot of title of visualization
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化标题的截图
- en: HTML Div with class name `filters`. This contains the Gender Header ( `html.Div`),
    Gender options in radio button format ( `dcc.RadioItems` ), Top N Names Header
    ( `html.Div`), Top N Names options in radio button format ( `dcc.RadioItems` ),
    Choose Name Header ( `html.Div`), and Choose Name dropdown ( `dcc.Dropdown` )
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类名为`filters`的 HTML Div。这包括性别标题（`html.Div`）、以单选按钮形式呈现的性别选项（`dcc.RadioItems`）、Top
    N Names 标题（`html.Div`）、以单选按钮形式呈现的 Top N Names 选项（`dcc.RadioItems`）、选择姓名标题（`html.Div`）和选择姓名下拉框（`dcc.Dropdown`）
- en: '![](../Images/87cf842acc605b11af111fb65d25bbcb.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/87cf842acc605b11af111fb65d25bbcb.png)'
- en: '**Figure 3:** Screenshot of different filters for the visualization. A radio
    button filter for Gender, aradio button filter for Top N Names, and a drop down
    filter for Popular Name'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3**：可视化的不同筛选器的截图。性别的单选按钮筛选器、Top N Names 的单选按钮筛选器和流行姓名的下拉筛选器'
- en: 'A loading spinner ( `dcc.Loading` ) that encompasses two graphs ( `dcc.Graph`
    ): one with id of `map` (see map from **Figure 2)** and one with id of `bar_top_n`
    (see bar chart from **Figure 2**)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含两个图形（`dcc.Graph`）的加载动画（`dcc.Loading`）：一个图形的 id 为 `map`（见**图 2**中的地图），另一个图形的
    id 为 `bar_top_n`（见**图 2**中的条形图）。
- en: '![](../Images/32aa74c7107cc08e778a1cda5319ee58.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/32aa74c7107cc08e778a1cda5319ee58.png)'
- en: '**Figure 4:** Screenshot of loading spinner from visualization.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 4：** 可视化中的加载动画截图。'
- en: I was impressed that creating a loading spinner took 4 lines of code. This complexity
    requires a combination of CSS, HTML, and/or JavaScript in a website. Plotly abstracted
    those details so non-technical users can easily create a user friendly experience.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我对创建一个加载动画只需 4 行代码感到印象深刻。这种复杂性需要网站中 CSS、HTML 和/或 JavaScript 的组合。Plotly 抽象化了这些细节，使非技术用户也能轻松创建用户友好的体验。
- en: Furthermore, I enjoyed how Plotly kept the HTML DOM Structure while naming elements.
    As a former web developer, I quickly picked up on learning Plotly because of that
    HTML familiarity. Furthermore, I liked their utilization of the `children` parameter
    so the elements can be rearranged in an organized fashion. As a software developer,
    it’s better to write code that is maintainable than to write code that is efficient,
    yet confusing to read.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我喜欢 Plotly 保留了 HTML DOM 结构的同时命名元素。作为一名前网页开发人员，我由于 HTML 的熟悉感很快学会了 Plotly。此外，我喜欢他们利用
    `children` 参数来以有序的方式重新排列元素。作为软件开发人员，编写可维护的代码比编写高效但难以阅读的代码要好。
- en: You may notice some values like `initial_rank` or `initial_sex` in the `dcc`
    elements. Those are my custom variables I created before the app HTML layout.
    Here are these variables below.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到 `dcc` 元素中一些值如 `initial_rank` 或 `initial_sex`。这些是我在应用 HTML 布局之前创建的自定义变量。以下是这些变量。
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is why you see the bar graph in **Figure 2** set to the default title
    upon loading: Top 5 Popular Male Names In AK of 1910'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么你看到**图 2**中的条形图在加载时设置为默认标题：1910 年 AK 州的前 5 大受欢迎男性名字。
- en: '![](../Images/7e6043f482788b9810bdaa835ac18559.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7e6043f482788b9810bdaa835ac18559.png)'
- en: '**Figure 5:** Bar Chart of initial values from dashboard upon loading.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5：** 仪表板加载时的初始值条形图。'
- en: The goal is to have default options populated when the user first loads the
    dashboard. The user can then navigate through clicks.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是让用户首次加载仪表板时填充默认选项。然后，用户可以通过点击进行导航。
- en: Now that we have the HTML layout, it’s time to add actions. What happens when
    we click on the dropdowns, radio buttons, or map? We utilize JavaScript callback
    functions.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了 HTML 布局，是时候添加操作了。当我们点击下拉菜单、单选按钮或地图时会发生什么？我们使用 JavaScript 回调函数。
- en: Callback functions
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回调函数
- en: A JavaScript callback is a function which is to be executed after another function
    has finished execution. JavaScript is asynchronous, which allows it to run functions
    in the background while your application is running. Callbacks are used to execute
    logic after certain events, such as mouse-clicks or typing.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 回调是指在另一个函数完成执行后要执行的函数。JavaScript 是异步的，这允许它在应用程序运行时在后台运行函数。回调用于在某些事件（如鼠标点击或键入）之后执行逻辑。
- en: Plotly’s template for callback functions is as follows
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 的回调函数模板如下所示：
- en: '[PRE3]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Inputs and outputs take in two parameters:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 输入和输出接受两个参数：
- en: id of div
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: div 的 id
- en: type of input received from div
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 div 接收的输入类型
- en: From HTML Layout, here are the following div ids we have
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 从 HTML 布局中，我们有以下 div 的 id：
- en: sex-radio-selection
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sex-radio-selection
- en: rank-dropdown-selection
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: rank-dropdown-selection
- en: top-rank-name-dropdown-selection
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: top-rank-name-dropdown-selection
- en: loading-2
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: loading-2
- en: map
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: map
- en: bar_top_n
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: bar_top_n
- en: The type of input can be parameters in `dcc` elements (`dcc.Dropdown` , `dcc.RadioButton`
    ) , `clickData` , `hoverData` , etc. Below is the callback function for the visualization.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 输入类型可以是 `dcc` 元素（`dcc.Dropdown`、`dcc.RadioButton`）、`clickData`、`hoverData` 等。以下是可视化的回调函数。
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The choropleth map and bar chart are created using plotly express figures, and
    returned as part of the output. The order of output returned in the function matters,
    as it should correlate to the Output order specified in the callback template.
    The same holds true for Inputs.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 plotly express 图形创建了 choropleth 地图和条形图，并作为输出的一部分返回。返回的输出顺序很重要，因为它应与回调模板中指定的输出顺序相对应。输入同样适用此规则。
- en: The choropleth has an animation frame parameter, which takes in ‘year’. This
    creates the animation slider by year, shown in in **Figure 6** and **Figure 7**.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: choropleth 地图具有一个动画帧参数，该参数接受 'year'。这创建了按年显示的动画滑块，如**图 6**和**图 7**所示。
- en: '![](../Images/5e4c031725d713f5d8f02fef9190469c.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5e4c031725d713f5d8f02fef9190469c.png)'
- en: '**Figure 6:** Choropleth Map of Number of people named John in year 1910'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6：** 1910年John姓名人数的热图'
- en: '![](../Images/f124b4edcb1f97c0b32722ef353fbe4a.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f124b4edcb1f97c0b32722ef353fbe4a.png)'
- en: '**Figure 7:** Choropleth Map of Number of people named John after moving slider
    to year 1940'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7：** 将滑块移动到1940年后的John姓名人数热图'
- en: The state and year variables are set to `inital_state` and `initial_year` ,
    which were specified above. However, we would want to change those if a user clicked
    on a given state and a given year. Hence the if statement check if `click_data`
    is true, indicating if the `clickData` event is fired.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 状态和年份变量设置为`inital_state`和`initial_year`，这些在上面已指定。然而，如果用户点击了某个特定的州和年份，我们希望更改这些变量。因此，if语句检查`click_data`是否为真，指示`clickData`事件是否被触发。
- en: If `click_data` is true, we set `state=click_data[points][0]['location']` and
    `year=clic_data['points'][0]['customdata']` . Furthermore, we defined the input
    `click_data` as `Input("map", "clickData")` . This means that we’re acknowledging
    a click if it happened on the map and updating the state and year based on the
    `location` and `customdata` properties of the map. Those are parameters defined
    when creating the choropleth map ( `locations=’state'` and `custom_data='year'`
    ).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`click_data`为真，我们将`state=click_data[points][0]['location']`和`year=clic_data['points'][0]['customdata']`。此外，我们将输入`click_data`定义为`Input("map",
    "clickData")`。这意味着我们在地图上发生点击时会做出响应，并根据地图的`location`和`customdata`属性更新状态和年份。这些是在创建热图时定义的参数（`locations=’state'`和`custom_data='year'`）。
- en: '![](../Images/055dbba79d7100d5b76da23ce7405def.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/055dbba79d7100d5b76da23ce7405def.png)'
- en: '**Figure 8:** Choropleth Map and Bar Chart, with tooltip shown upon hovering
    on Colorado. Toolitp gives current year, state on hover, and number of people
    with name John.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8：** 热图和条形图，悬停在科罗拉多州时显示工具提示。工具提示显示当前年份、悬停时的州和John姓名人数。'
- en: '![](../Images/64494862f1dc08ef0621afc1018e744d.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/64494862f1dc08ef0621afc1018e744d.png)'
- en: '**Figure 9:** Loading spinner after clicking on state Colorado from **Figure
    8.**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9：** 点击**图 8**中的科罗拉多州后的加载旋转器。'
- en: '![](../Images/defc1d42da670dcd937396a485566e90.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/defc1d42da670dcd937396a485566e90.png)'
- en: '**Figure 10:** Bar graph updated to include Top 5 Popular male Names in state
    of Colorado from 1910\. This is created after user clicked on Colorado in **Figure
    7** and **Figure 8**. You can see different popular names in Colorado as compared
    to Arkansas in **Figure 7** (Charles and William are popular in Colorado instead
    of Paul and Robert in Arkansas).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 10：** 更新的条形图，包含1910年科罗拉多州前5名流行男性姓名。这是在用户点击了**图 7**和**图 8**中的科罗拉多州后创建的。您可以看到科罗拉多州与**图
    7**中的阿肯色州相比流行的名字有所不同（查尔斯和威廉在科罗拉多州流行，而保罗和罗伯特在阿肯色州流行）。'
- en: Other inputs from dropdowns are used in filtering the data frame of names that
    was initially loaded in. Below are how the filters operate after they are modified
    by the callback function.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉框中的其他输入用于筛选初始加载的姓名数据框。下面是过滤器在回调函数修改后如何操作的。
- en: Gender Filter
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性别筛选器
- en: '![](../Images/ff87a41c2e2f93f60c79a617d5ef806d.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ff87a41c2e2f93f60c79a617d5ef806d.png)'
- en: '**Figure 11:** Dashboard from **Figure 6** after clicking on Gender Female
    radio button. The choropleth map is empty because it had to replace the names
    in the Popular Name Filter (dropdown) from male names to female names. The default
    name John isn’t among the list of female names, so you’ll have to select a female
    name from the dropdown to populate the map.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 11：** 从**图 6**中点击“女性”单选按钮后的仪表板。热图为空，因为它需要将流行姓名筛选器（下拉框）中的姓名从男性姓名替换为女性姓名。默认姓名John不在女性姓名列表中，因此您需要从下拉框中选择一个女性姓名以填充地图。'
- en: '![](../Images/c04aaa0bc5eb9a3d80eb866f45bfc0b9.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c04aaa0bc5eb9a3d80eb866f45bfc0b9.png)'
- en: '**Figure 12:** Dashboard from Figure 11 after selecting on name Helen from
    Popular Name dropdown filter. Now, bar chart is populated with top 5 popular female
    names in Arkansas of 1910 instead of male names. Grey states in the map indicate
    that no one was named Helen in that year and state.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 12：** 从流行姓名下拉筛选器中选择Helen后的仪表板，显示为图 11。现在，条形图填充了1910年阿肯色州的前5名流行女性姓名，而不是男性姓名。地图上的灰色状态表示该年份和州没有人叫Helen。'
- en: Top Rank Filter
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 顶级排名筛选器
- en: '![](../Images/118303e6926f7b09e6a9c28c221c12c8.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/118303e6926f7b09e6a9c28c221c12c8.png)'
- en: '**Figure 13:** Map visualization of popularity of John in 1967\. Bar Graph
    of Top 5 popular male names in Texas of 1967.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 13：** 1967年John的受欢迎程度地图可视化。1967年德克萨斯州前5名流行男性姓名的条形图。'
- en: '![](../Images/2f110e7bab58ab2ba8bb220f7097f8ad.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2f110e7bab58ab2ba8bb220f7097f8ad.png)'
- en: '**Figure 14:** Loading spinner after clicking on Top N Names radio button 15
    instead of 5'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 14:** 点击“前 N 名”单选按钮 15 后的加载旋转图标，而不是 5'
- en: '![](../Images/9d5061bd61331a16ee4904fa0d9136d5.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9d5061bd61331a16ee4904fa0d9136d5.png)'
- en: '**Figure 15:** Same map as **Figure 13** except with bar chart updated to top
    15 names in Texas of 1967\. Bar chart also has over option to see number of people
    named William in Texas of 1967.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 15:** 与 **图 13** 相同的地图，只是条形图更新为 1967 年德克萨斯州的前 15 个名字。条形图还具有“查看更多”选项，以查看
    1967 年德克萨斯州名为 William 的人数。'
- en: Popular Name Filter
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流行名字筛选器
- en: '![](../Images/74a2f15fae71472841146654193eda8e.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/74a2f15fae71472841146654193eda8e.png)'
- en: '**Figure 16:** Dashboard with gender male, top 15 names, map with popularity
    of John, and bar chart of top 15 popular male names in Texas of 1910\. Dropdown
    of popularity map shows top 15 names from bar chart populated, with Willie hovered
    over.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 16:** 仪表板显示性别为男性的前 15 个名字，约翰的流行度地图，以及 1910 年德克萨斯州前 15 个流行男性名字的条形图。流行度地图的下拉菜单显示了条形图中填充的前
    15 个名字，当前悬停在 Willie 上。'
- en: '![](../Images/c501a3b2ef1f22450a2eebe3e67b2257.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c501a3b2ef1f22450a2eebe3e67b2257.png)'
- en: '**Figure 17:** Dashboard from **Figure 16** after clicking on Willie in the
    Popular Name Filter. Map updates with popularity of Willie over state and year.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 17:** 点击“流行名字筛选器”中的 Willie 后，**图 16** 中的仪表板。地图更新了 Willie 在各州和年份的流行度。'
- en: Putting it all together
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起
- en: Tips to Improve Visualization
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改善可视化的提示
- en: Use SQL Databases and Queries for Optimization
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 SQL 数据库和查询进行优化
- en: You may have noticed in the video that the loading spinner takes 4+ seconds
    to load in the data from any filter changes EXCEPT for year. This is because the
    Plotly Dash app reads all 150MB of data from a CSV file in memory, and queries
    select data while the application is running. Hence, why it takes a while to process
    the data frame.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，视频中加载旋转图标需要 4 秒以上来加载任何筛选器的更改数据，除了年份。这是因为 Plotly Dash 应用程序从 CSV 文件中读取了所有
    150MB 的数据到内存中，并且在应用程序运行时查询选择数据。因此，处理数据框需要一些时间。
- en: It is much faster to read from a database and select data using SQL queries.
    Now, you’re not loading in all data into memory. Just some parts. Furthermore,
    SQL databases are more compact and take up less memory than CSV files.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库中读取数据并使用 SQL 查询选择数据要快得多。现在，你不需要将所有数据加载到内存中，只需一些部分。此外，SQL 数据库比 CSV 文件更紧凑，占用的内存更少。
- en: Making the Bar Graph More Dynamic
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使条形图更具动态性
- en: The visualization’s core component is the map of a single name’s popularity
    over location and time. The bar graph of the top N names in a single year or time
    may be redundant, as it contains the same information as the top_rank_name_dropdown
    filter.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化的核心组件是单个名字在地点和时间上的流行度地图。单一年份或时间的前 N 名条形图可能是多余的，因为它包含了与 top_rank_name_dropdown
    筛选器相同的信息。
- en: The top_rank_name_dropdown filter could be removed, and the bar graph can highlight
    the current name that the map is showing. If a user clicks on another bar with
    a different name, the map updates. If a user clicks on a state in a map, the bar
    graph will update with the top N names, state user selected, and year the slider
    was last on.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 可以移除 top_rank_name_dropdown 筛选器，条形图可以突出当前地图上显示的名字。如果用户点击另一个名字的条形，地图会更新。如果用户点击地图上的一个州，条形图将更新为选定州的前
    N 名名字和滑块最后设置的年份。
- en: Have The Bar Graph Update on The Year Slider On The Map
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使条形图在地图上的年份滑块更新
- en: It seems confusing that the map can be filtered by the year slider, but the
    bar cannot. The bar can be updated by state and year if the user clicks on a state
    on the map. This might be a confusing experience if a bar graph is from a different
    year than what the map year is on the slider.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 地图可以通过年份滑块进行筛选，但条形图不能，这似乎有些混乱。如果用户点击地图上的一个州，条形图可以按州和年份更新。如果条形图来自与滑块上的地图年份不同的年份，这可能会造成混淆。
- en: There might be a way to have the same year filter for both the map and the bar
    graph, but I have yet to come across that solution.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 可能有办法为地图和条形图设置相同的年份筛选，但我尚未找到这种解决方案。
- en: My best guess is to see if there’s an event fired off when moving the year slider.
    Then in the callback, update the bar graph to reflect the current year. However,
    this current approach doesn’t do that because we’re loading in 150MB of data in
    memory, and filtering it in memory. So there would be a tremendous lag time when
    moving the slider.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我最好的猜测是查看在移动年份滑块时是否触发了事件。然后在回调中，更新柱状图以反映当前年份。然而，目前的方法并没有做到这一点，因为我们在内存中加载了 150MB
    的数据并在内存中进行过滤。因此，在移动滑块时会有巨大的延迟。
- en: Revise Top N Filter
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修订 Top N 过滤器
- en: There are some states and years that only have 8 popular names in the dataset
    (Arkansas in 1910). This doesn’t reflect well on the Top N Filter, which shows
    8 bar graphs even when clicking on radio buttons 10 or 15\. Perhaps such buttons
    need to be hidden and replaced with a Top 8 radio button in this special circumstance.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集中有些州和年份只有 8 个流行名字（如 1910 年的阿肯色州）。这对 Top N 过滤器的表现不佳，因为它即使在选择了 10 或 15 的单选按钮时也显示
    8 个柱状图。或许在这种特殊情况下，需要隐藏这些按钮，并用 Top 8 单选按钮替代。
- en: Conclusions
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This tutorial showed how to create a complex, dynamic visualization using Plotly.
    While there are ways to improve the visualization, this nevertheless shows how
    easy it is to use this open-source package. With more technical engineers and
    data/business analysts switching to data science, we need better tools to help
    them convey the data to the executives in clean manners. Based on the free costs
    and little learning curve, Plotly puts itself as one of the best packages an aspiring
    data scientist should keep in his/her arsenal.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程展示了如何使用 Plotly 创建复杂的动态可视化。虽然有改进可视化的方式，但这仍然显示了使用这个开源包的便捷。随着越来越多的技术工程师和数据/业务分析师转向数据科学，我们需要更好的工具来帮助他们以清晰的方式向高层传达数据。基于免费成本和较低的学习曲线，Plotly
    成为有志数据科学家应当保留在工具库中的最佳包之一。
- en: Thanks for reading! If you want to read more of my work, view my [Table of Contents](https://hd2zm.medium.com/table-of-contents-read-this-first-a124146f566c).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！如果你想阅读更多我的作品，请查看我的 [目录](https://hd2zm.medium.com/table-of-contents-read-this-first-a124146f566c)。
- en: If you’re not a Medium paid member, but are interested in subscribing just to
    read tutorials and articles like this, [click here](https://hd2zm.medium.com/membership)
    to enroll in a membership. Enrolling in this link means I get paid for referring
    you to Medium.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不是 Medium 的付费会员，但有兴趣订阅以阅读像这样的教程和文章，[点击这里](https://hd2zm.medium.com/membership)
    以加入会员。通过这个链接加入会员意味着我会因为推荐你而获得报酬。
