- en: 'Data Mastery with Python and SQL: Unleashing Efficiency and Security through
    4 Strategic Use Cases'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 《使用 Python 和 SQL 掌握数据：通过 4 个战略应用案例释放效率和安全性》
- en: 原文：[https://towardsdatascience.com/data-mastery-with-python-and-sql-unleashing-efficiency-and-security-through-4-strategic-use-cases-eb8afb5019a0](https://towardsdatascience.com/data-mastery-with-python-and-sql-unleashing-efficiency-and-security-through-4-strategic-use-cases-eb8afb5019a0)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/data-mastery-with-python-and-sql-unleashing-efficiency-and-security-through-4-strategic-use-cases-eb8afb5019a0](https://towardsdatascience.com/data-mastery-with-python-and-sql-unleashing-efficiency-and-security-through-4-strategic-use-cases-eb8afb5019a0)
- en: Leverage techniques to extract hashtags, suppress warnings, and utilize parameterized
    queries for powerful data analysis
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用技术提取标签、抑制警告，并使用参数化查询进行强大的数据分析
- en: '[](https://mg-subha.medium.com/?source=post_page-----eb8afb5019a0--------------------------------)[![Subha
    Ganapathi](../Images/d346759d5990b79aae7ef2c3a5ab7cf3.png)](https://mg-subha.medium.com/?source=post_page-----eb8afb5019a0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----eb8afb5019a0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----eb8afb5019a0--------------------------------)
    [Subha Ganapathi](https://mg-subha.medium.com/?source=post_page-----eb8afb5019a0--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mg-subha.medium.com/?source=post_page-----eb8afb5019a0--------------------------------)[![Subha
    Ganapathi](../Images/d346759d5990b79aae7ef2c3a5ab7cf3.png)](https://mg-subha.medium.com/?source=post_page-----eb8afb5019a0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----eb8afb5019a0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----eb8afb5019a0--------------------------------)
    [Subha Ganapathi](https://mg-subha.medium.com/?source=post_page-----eb8afb5019a0--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----eb8afb5019a0--------------------------------)
    ·9 min read·May 23, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----eb8afb5019a0--------------------------------)
    ·阅读时长 9 分钟·2023 年 5 月 23 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/a8b97bf986c302ad322092d021f198d6.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a8b97bf986c302ad322092d021f198d6.png)'
- en: Photo by [Kevin Canlas](https://unsplash.com/@kvncnls?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/BHPGjYd4fp8?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Kevin Canlas](https://unsplash.com/@kvncnls?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来源于 [Unsplash](https://unsplash.com/photos/BHPGjYd4fp8?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Data analysis and management are essential components of any modern enterprise’s
    operations. To effectively harness the power of data, professionals rely on a
    combination of programming languages and tools that enable efficient data processing,
    manipulation, and analysis. In this article, we explore the incredible capabilities
    of Python and SQL, two fundamental languages widely utilized by data analysts
    and scientists for effective decision-making.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 数据分析和管理是任何现代企业运营的重要组成部分。为了有效利用数据的力量，专业人员依赖于编程语言和工具的组合，以实现高效的数据处理、操作和分析。本文探讨了
    Python 和 SQL 的惊人能力，这两种基础语言被数据分析师和科学家广泛应用于有效决策。
- en: It is a known fact that Python provides a plethora of libraries and frameworks
    to tackle diverse data-related challenges. Together, Python and SQL form a powerful
    duo that enables data professionals to unlock the full potential of their data
    and mine their databases more effectively.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，Python 提供了大量的库和框架来应对各种数据相关的挑战。Python 和 SQL 组合成了一个强大的双雄，使数据专业人员能够充分挖掘数据的潜力，更有效地挖掘数据库。
- en: In this article, we look into four distinct use cases that demonstrate the effectiveness
    and synergy of Python and SQL in addressing various data challenges. Each use
    case represents a unique scenario where the combined prowess of Python’s flexibility
    and SQL’s querying capabilities shines through.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们深入探讨了四个独特的应用案例，展示了 Python 和 SQL 在应对各种数据挑战中的有效性和协同作用。每个应用案例代表了一个独特的场景，展现了
    Python 灵活性与 SQL 查询能力的结合效果。
- en: Let’s dive in!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解！
- en: Use Cases
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用案例
- en: '**Use Case 1: Enhance the readability of SQL Queries written in Python**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**应用案例 1：提升在 Python 中编写的 SQL 查询的可读性**'
- en: Imagine you’re using a Web API to connect to a cloud database, such as GridDB,
    and retrieve data by executing SQL queries. When constructing an HTTP request
    body, specifically for an API endpoint that accepts JSON payloads, the SQL query
    needs to be incorporated in the request body. But the challenge lies with real-world
    queries.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你正在使用 Web API 连接到云数据库，比如 GridDB，并通过执行 SQL 查询来检索数据。在构建 HTTP 请求体时，特别是对于接受
    JSON 负载的 API 端点，SQL 查询需要被包含在请求体中。但真正的挑战在于实际的查询。
- en: Real-world SQL queries tend to become more intricate and can often become challenging
    to maintain proper indentation, incorporate line breaks, and format the code for
    readability. Additionally, when constrained to writing queries in a single line
    in a Python notebook such as VScode or Jupyter, it becomes impossible to add helpful
    comment lines to explain the code’s functionality. Notebooks with such queries
    become difficult to maintain and debug in the long run.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的 SQL 查询往往变得更加复杂，通常很难维持适当的缩进，添加换行符，以及格式化代码以提高可读性。此外，当被限制在 Python 笔记本（如 VScode
    或 Jupyter）中编写单行查询时，很难添加有用的注释行来解释代码的功能。这样的查询的笔记本在长期维护和调试时会变得困难。
- en: The below solution allows you to write SQL queries in multiple lines, which
    improves code readability and maintainability. By using proper line breaks and
    indentation, you can easily organize and understand complex queries without sacrificing
    clarity.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下解决方案允许你在多行中编写 SQL 查询，这样可以提高代码的可读性和可维护性。通过使用适当的换行和缩进，你可以轻松组织和理解复杂的查询，而不会牺牲清晰度。
- en: Here is a better way to write SQL queries in Python.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一种更好的方法来编写 Python 中的 SQL 查询。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This can then passed to the request body using the JSON library in Python as
    shown below -
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过 Python 的 JSON 库传递给请求体，如下所示 -
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It creates a JSON object with a single item, which contains the type of operation
    (“sql-select”) and the SQL query statement (sql_query1). The json.dumps() function
    is used to convert the Python dictionary into a JSON string representation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 它创建了一个包含单个项目的 JSON 对象，该项目包含操作类型（“sql-select”）和 SQL 查询语句（sql_query1）。使用 json.dumps()
    函数将 Python 字典转换为 JSON 字符串表示。
- en: You can then proceed to posting your request using the requests library.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以使用 requests 库继续发出请求。
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Use Case **2: Extract hashtags from a text column**'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '用例 **2: 从文本列中提取标签（hashtags）**'
- en: When conducting social media analysis of platforms like TikTok and Instagram,
    it is common to extract data through APIs and store it in databases like Azure
    or Redshift. However, the API response often includes the content as a string,
    with hashtags scattered throughout the video titles. To address this, the following
    query can be used to extract hashtags from a a text column such as a video title.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析 TikTok 和 Instagram 等社交媒体平台时，通常会通过 API 提取数据并将其存储在像 Azure 或 Redshift 这样的数据库中。然而，API
    响应通常包括作为字符串的内容，标签分散在视频标题中。为了解决这个问题，可以使用以下查询从文本列（如视频标题）中提取标签。
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The subquery performs the following steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 子查询执行以下步骤：
- en: It splits the “title” column of the “social_media_video_info” table using the
    ‘#’ character as the delimiter.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用‘#’字符作为分隔符，分割“social_media_video_info”表的“title”列。
- en: The function SPLIT_PART(title, ‘#’, num) extracts the portion of the “title”
    column delimited by ‘#’ at the specified “num” position.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数 SPLIT_PART(title, ‘#’, num) 提取“title”列中由‘#’分隔的在指定“num”位置的部分。
- en: The TRIM() function removes any leading or trailing spaces from the extracted
    portion.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TRIM() 函数去除提取部分的任何前导或尾随空格。
- en: The DISTINCT keyword ensures that only unique hashtags are selected.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DISTINCT 关键字确保仅选择唯一的标签。
- en: The CROSS JOIN with the subquery “nums” generates a temporary result set with
    numbers from 1 to 10.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与子查询 “nums” 的 CROSS JOIN 生成一个临时结果集，包含从 1 到 10 的数字。
- en: The condition num <= LENGTH(title) — LENGTH(REPLACE(title, ‘#’, ‘’)) + 1 ensures
    that the splitting is done up to the maximum number of hashtags in the “title”
    column.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件 num <= LENGTH(title) — LENGTH(REPLACE(title, ‘#’, ‘’)) + 1 确保分割操作做到“title”列中的最大标签数量。
- en: The condition TRIM(SPLIT_PART(title, ‘#’, num)) <> ‘’ filters out any empty
    hashtags.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件 TRIM(SPLIT_PART(title, ‘#’, num)) <> ‘’ 过滤掉任何空标签。
- en: In summary, the query extracts hashtags from the “title” column of the “social_media_video_info”
    table by splitting the column values using ‘#’ as the delimiter. It ensures that
    only unique non-empty hashtags are selected, and any hashtags containing spaces
    are excluded from the result. Note that this query only considers **upto 10 hashtags
    per title.**
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总结来说，查询通过使用 ‘#’ 作为分隔符，提取“social_media_video_info”表中的“title”列中的标签。它确保仅选择唯一的非空标签，并排除包含空格的标签。请注意，此查询仅考虑
    **每个标题最多 10 个标签**。
- en: 'Use Case 3: Suppressing Future and Deprecation Warnings in Python'
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用例 3：在 Python 中抑制未来和弃用警告
- en: The purpose of these lines is to suppress future warnings and deprecation warnings
    during the execution of the program.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这些代码行的目的是在程序执行期间抑制未来警告和弃用警告。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This can be useful in situations where you are confident that the code you are
    using is compatible with the current version of the library and you don’t want
    to be alerted about potential issues or deprecated features.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这在你确信你使用的代码与当前版本的库兼容，并且你不想被警告潜在问题或弃用功能的情况下会很有用。
- en: Warnings often provide valuable information about potential problems or changes
    in future versions of libraries. It’s generally recommended to address and resolve
    the underlying issues causing the warnings rather than ignoring them outright.
    The ‘warnings’ module also provides a simplefilter() option which can be used
    to control how warnings are handled in your Python code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 警告通常提供有关潜在问题或库未来版本变化的有价值信息。通常建议解决导致警告的根本问题，而不是完全忽视它们。‘warnings’ 模块还提供了 simplefilter()
    选项，可用于控制如何在 Python 代码中处理警告。
- en: 'Use Case 4: Use parameterized queries where possible'
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用例 4：在可能的情况下使用参数化查询
- en: When executing SQL queries using Python, it is recommended to use parameterized
    queries or prepared statements instead of directly embedding values in the SQL
    statement. This helps prevent SQL injection attacks and ensures proper handling
    of data types.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Python 执行 SQL 查询时，建议使用参数化查询或预处理语句，而不是直接在 SQL 语句中嵌入值。这有助于防止 SQL 注入攻击，并确保数据类型的正确处理。
- en: Let’s say that your application or script uses the below select query -
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的应用程序或脚本使用以下选择查询 -
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If an attacker wants to insert a malicious value in your database, they can
    use this query as a loophole to do so. Below is a basic example of how the attacker
    can add an insert statement to a ‘select query’ and inject unnecessary values
    to the database. The grey portion below is the malicious input that the attacker
    provided which results in 2 queries being executed instead of one — 1\. select
    and 2\. insert.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击者想在你的数据库中插入恶意值，他们可以利用这个查询作为漏洞来做到这一点。以下是攻击者如何将插入语句添加到‘选择查询’中并注入不必要的值到数据库的基本示例。下面的灰色部分是攻击者提供的恶意输入，这导致执行了两个查询而不是一个——1\.
    选择和 2\. 插入。
- en: '![](../Images/545f8b650e83cd3f35635e06f60b8256.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/545f8b650e83cd3f35635e06f60b8256.png)'
- en: '**SQL Injection Attack — Scenario Highlighted (Image by author)**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQL 注入攻击 — 场景亮点（作者提供的图片）**'
- en: Note that this is not limited to an Insert table. An attacker can run another
    select or update or delete or even do a drop table. Imagine how disastrous a ‘DROP
    TABLE’ would be!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这不限于插入表。攻击者可以运行其他选择、更新或删除操作，甚至执行 drop table。想象一下‘DROP TABLE’会有多么灾难！
- en: SQL injection can be prevented by sanitizing the input as well as by parameterization.
    Let’s see each of them in detail.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 注入可以通过净化输入和参数化来防止。让我们详细看看这两者。
- en: Parameterization
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数化
- en: Parameterization can be done manually or through packages available in Python.
    Imagine that you use a survey application from which you send surveys for users
    to fill out. Users are asked to type-in details in two text boxes provided. Let’s
    suppose that every time the user inputs the detail in both text boxes, an Insert
    SQL query runs in the background such as the one below -
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 参数化可以手动完成，也可以通过 Python 中的可用包完成。设想你使用一个调查应用程序，向用户发送调查以填写。用户被要求在提供的两个文本框中输入详细信息。假设每次用户在两个文本框中输入详细信息时，后台都会运行如下的插入
    SQL 查询 -
- en: theVal1 = comes from survey textbox1
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: theVal1 = 来自调查文本框1
- en: theVal2 = comes from survey textbox2
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: theVal2 = 来自调查文本框2
- en: Below is the application code that runs in the background -
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是后台运行的应用代码 -
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let’s say the 1st user enters **A3 in textbox1** and enters **A4 in the textbox2**.
    The query that runs in the backend will be as below -
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 假设第一个用户在文本框1中输入**A3**，并在文本框2中输入**A4**。后台运行的查询如下 -
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let’s say the second user is a hacky user. This user understands your table
    structure and backend query. If they are onto some mischief, they can try to maliciously
    insert an additional record using this.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 假设第二个用户是恶意用户。这个用户了解你的表结构和后台查询。如果他们有一些恶意企图，他们可以尝试使用这些来恶意插入额外的记录。
- en: Let’s suppose that the user types in **the value A1 in textbox 1** and the **below
    value in textbox2** -
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 假设用户在文本框 1 中输入了**值 A1**，并在文本框 2 中输入了**下面的值** -
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What essentially happens is that the value gets appended to the backend query
    to become the below -
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上发生的情况是，这个值被附加到后台查询中，变成了下面的内容 -
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Thus, 2 records will be inserted by this hacky user.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这个恶意用户将插入 2 条记录。
- en: Your table will have three values, 1 inserted by the first user, and 2 inserted
    by the second user -
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你的表将有三个值，第一个用户插入了 1 个，第二个用户插入了 2 个 -
- en: '![](../Images/03962e3f43854c5d6eef89bed4491669.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/03962e3f43854c5d6eef89bed4491669.png)'
- en: '**Backend Table (Image by author)**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**后台表（作者提供的图片）**'
- en: Input Sanitization
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入清理
- en: Sanitization can be done by escaping special characters in the input. This involves
    replacing or encoding characters that have a special meaning in the target context
    (e.g., SQL queries) with their escaped counterparts. For example, in SQL, the
    single quote character (‘) is commonly escaped by doubling it (‘’) i.e., **replacing
    the single quote in the string with 2 single quotes.** In other words, we can
    manually escape the input values before putting it into the query. We can use
    str.replace to do this.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 数据清理可以通过转义输入中的特殊字符来完成。这涉及到用其转义字符替换或编码在目标上下文（例如 SQL 查询）中具有特殊意义的字符。例如，在 SQL 中，单引号字符（‘）通常通过将其加倍（‘’）来转义，即**用两个单引号替换字符串中的单引号**。换句话说，我们可以在将输入值放入查询之前手动转义这些值。我们可以使用
    str.replace 来实现这一点。
- en: While the application code remains the same, we add a couple of string replace
    statements as shown below -
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然应用代码保持不变，我们添加了几条字符串替换语句，如下所示 -
- en: theVal1 = comes from survey textbox1
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: theVal1 = 来自调查文本框1
- en: theVal2 = comes from survey textbox2
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: theVal2 = 来自调查文本框2
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: What happens as a result is that, when the hacky user tries to insert a malicious
    record, it will get inserted along with the user’s insert statement. It’ll look
    like the one below -
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，当恶意用户尝试插入恶意记录时，它会连同用户的插入语句一起被插入。它看起来像下面这样 -
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The values inserted in your table would be as below -
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 插入到你的表中的值如下 -
- en: '![](../Images/94f48d4de185feb9b21d9bec8b2be6ca.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/94f48d4de185feb9b21d9bec8b2be6ca.png)'
- en: '**Backend Tables after escaping quotes (Image by author)**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**转义引号后的后台表（作者提供的图片）**'
- en: Thereby, you’ll see in your backend table that one of the users tried to run
    an insert statement. **You have effectively stopped a SQL injection from happening
    by merely escaping your input variables.**
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你会在后台表中看到其中一个用户尝试运行插入语句。**你通过仅仅转义输入变量，有效地阻止了 SQL 注入的发生。**
- en: A more optimal way would be to use python libraries such as psycopg2, pyodbc,
    sqlite3 or SQLAlchemy. These are SQL adapters that have inbuilt support for parameterized
    queries among other features.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 更优化的方法是使用诸如 psycopg2、pyodbc、sqlite3 或 SQLAlchemy 等 Python 库。这些是 SQL 适配器，内置支持参数化查询等功能。
- en: Concluding Remarks
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we explored four practical use cases to enhance your Python
    programming skills when working with SQL queries. We started with Use Case 1,
    where we focused on improving the readability of SQL queries written in Python.
    By utilizing techniques such as query formatting and indentation, we can make
    our code more organized and easier to understand.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们探索了四个实际用例，以提高你在处理 SQL 查询时的 Python 编程技能。我们从用例 1 开始，重点提高了用 Python 编写的
    SQL 查询的可读性。通过利用查询格式化和缩进等技术，我们可以使代码更有条理，更易于理解。
- en: Moving on to Use Case 2, we delved into the extraction of hashtags from a text
    column. By leveraging SQL and its string manipulation functions, we learnt how
    to effectively extract relevant hashtags and enhance the data analysis process.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 继续用例 2，我们深入探讨了如何从文本列中提取标签。通过利用 SQL 及其字符串处理函数，我们学会了如何有效提取相关标签，并增强数据分析过程。
- en: In Use Case 3, we addressed the importance of suppressing future and deprecation
    warnings in Python. By utilizing the `warnings` module, we can ensure a cleaner
    Python output and an error-free code execution, avoiding unnecessary distractions
    and potential compatibility issues.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在用例 3 中，我们讨论了在 Python 中抑制未来和弃用警告的重要性。通过利用`warnings`模块，我们可以确保 Python 输出更清晰，代码执行无错误，避免不必要的干扰和潜在的兼容性问题。
- en: Lastly, in Use Case 4, we emphasized the significance of using sanitized code
    and parameterized queries to enhance security, improve performance, and prevent
    SQL injection attacks.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在用例 4 中，我们强调了使用经过清理的代码和参数化查询的重要性，以增强安全性、提高性能并防止 SQL 注入攻击。
- en: By understanding and implementing these use cases, Python developers and Data
    Analysts can elevate their SQL query execution and optimization skills, leading
    to more robust and efficient code. I believe that incorporating these techniques
    in real-world scenarios will help create cleaner workflows and will empower you
    to derive actionable insights efficiently and securely.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过理解和实施这些用例，Python 开发者和数据分析师可以提升 SQL 查询执行和优化技能，进而编写出更健壮和高效的代码。我相信，将这些技术应用于实际场景将有助于创建更清晰的工作流程，并使你能够高效而安全地提取可操作的见解。
