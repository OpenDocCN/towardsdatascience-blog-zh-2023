["```py\n[RR, RP, RS, PR, PS, PP, SR, SP, SS]\n```", "```py\n[RS, SP, PR]\n```", "```py\n# The Items\n00 = Rock\n01 = Paper\n10 = Scissors\n```", "```py\n# Rock\n00 vs 00 = Tie\n00 vs 01 = Loss\n00 vs 10 = Win\n```", "```py\n# Paper\n01 vs 00 = Win\n01 vs 01 = Tie\n01 vs 10 = Loss\n```", "```py\n# Scissors\n10 vs 00 = Loss\n10 vs 01 = Win\n10 vs 10 = Tie\n```", "```py\n# Encode the choices as qubits.\nchoices = {\n ‘rock’: [0,0],\n ‘paper’: [0,1],\n ‘scissors’: [1,0]\n}\n```", "```py\nbool isWin = (rock and scissors) or (scissors and paper) or (paper and rock)\n```", "```py\ndef check_all_games():\n    # Generate a list of all possible game choices for player1 and player2.\n    result = []\n    count = 0\n\n    games = list(itertools.product([0, 1], repeat=4))\n    for game in games:\n        # Example: (1, 0, 0, 1) => scissors vs paper\n        player1 = list(game[0:2])\n        player2 = list(game[2:4])\n\n        # A quick check to make sure both player moves are valid.\n        if player1 in list(choices.values()) and player2 in list(choices.values()):\n            # ...\n            is_win = isWin(player1, player2)\n            if is_win:\n                result += [game]\n\n        count += 1\n\n    return (result, count)\n```", "```py\nbool isWin = (00 and 10) or (01 and 00) or (10 and 01)\n```", "```py\n[(0, 0, 1, 0), (0, 1, 0, 0), (1, 0, 0, 1)]\n[(q1 q0 q3 q2),(q1 q0 q3 q2),(q1 q0 q3 q2)]\n```", "```py\n# Define a classical logical circuit with 4 variables (qubits).\nisWin = 'def isWin(q0: Int1, q1: Int1, q2: Int1, q3: Int1) -> Int1:\\n  return (not q0 and not q1 and not q2 and q3) or (q0 and not q1 and not q2 and not q3) or (not q0 and q1 and q2 and not q3)'\n\n# Convert the logic to a quantum circuit.\nformula = ClassicalFunction(isWin)\nfc = formula.synth()\n\n# Convert the quantum circuit to a quantum program.\nqc = QuantumCircuit(4+1)\nqc.compose(fc, inplace=True)\n```", "```py\n# Get the number of qubits needed.\nn = len(choices['rock']) * 2\n\nqc = QuantumCircuit(n + 1, 1)\n\n# Paper vs Rock.\nqc = encode('paper', 'rock', qc)\n\n# Append the rock, paper, scissors oracle.\nqc.append(oracle, range(5))\n\n# Measure the result!\nqc.measure(4, 0)\n```", "```py\n1 00 01\n^- win\n  ^^----- rock\n     ^^--------paper\n```", "```py\nsimulator = Aer.get_backend('aer_simulator')\njob = execute(qc, simulator)\nresult = job.result()\ncounts = result.get_counts()\n\nkey = max(counts, key=counts.get)\n\nprint(counts)\nplot_histogram(counts)\n```", "```py\n# Rock vs Scissors.\nqc = encode('paper', 'scissors', qc)\n```", "```py\nqc = QuantumCircuit(n + 1)\n\nqc.h(range(n))\n\n# Append the sudoku oracle.\nqc.append(oracle, range(n+1))\n\n# Measure the result!\nqc.measure_all()\nqc.draw(output='mpl')\n```", "```py\n0001 => 01 versus 00 => paper versus rock => WIN\n   ^-  q0\n  ^--- q1\n ^---- q2\n^----- q3\n```"]