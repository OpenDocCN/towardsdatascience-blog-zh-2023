- en: Creating Scientific Plots the Easy Way With scienceplots and matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/creating-scientific-plots-the-easy-way-with-scienceplots-and-matplotlib-d86a62e2ab46](https://towardsdatascience.com/creating-scientific-plots-the-easy-way-with-scienceplots-and-matplotlib-d86a62e2ab46)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Instantly Transform Your Matplotlib Figures With a Few Lines of Python Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----d86a62e2ab46--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----d86a62e2ab46--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d86a62e2ab46--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d86a62e2ab46--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----d86a62e2ab46--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d86a62e2ab46--------------------------------)
    ·9 min read·Jul 17, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/99d7369c3c290a5d58a483b7d0b9b0da.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Braňo](https://unsplash.com/fr/@3dparadise?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: When writing articles for publication in academic journals, the layout and style
    of the figures are expected to conform to a predefined format. This ensures consistency
    across all of that publication's articles and that any included figures are high
    quality when printed.
  prefs: []
  type: TYPE_NORMAL
- en: Python is widely used within the scientific community and provides a great way
    to create scientific plots. However, when we use matplotlib, one of the most popular
    plotting libraries within Python, the default plots are poor and need adjusting
    to ensure they meet the requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the styles of matplotlib figures can be time-consuming, which is where
    the [scienceplots](https://github.com/garrettj403/SciencePlots) library comes
    in handy. With just a few lines of code, we can instantly transform the way our
    figure looks without spending too much time working out how to change different
    parts of our figures.
  prefs: []
  type: TYPE_NORMAL
- en: The [scienceplots](https://github.com/garrettj403/SciencePlots) library allows
    users to create simple, informative plots similar to those found in academic journals
    and research papers. Not only that, it also sets the required DPI to 600 (for
    some styles), which is often a requirement by publications to ensure high-quality
    printed figures.
  prefs: []
  type: TYPE_NORMAL
- en: The scienceplots library contains numerous styles, including support for multiple
    languages, including Chinese and Japanese. You can explore the full range of styles
    within the [scienceplots](https://github.com/garrettj403/SciencePlots) library
    at the link below.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/garrettj403/SciencePlots/wiki/Gallery?source=post_page-----d86a62e2ab46--------------------------------)
    [## Gallery'
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib styles for scientific plotting. Contribute to garrettj403/SciencePlots
    development by creating an account on…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/garrettj403/SciencePlots/wiki/Gallery?source=post_page-----d86a62e2ab46--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Within this article, we will explore how we can transform some basic and common
    data visualisations into something that can be included in a scientific publication.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up scienceplots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before creating plots with the scienceplots library, you need to ensure that
    you have [LaTeX](https://www.latex-project.org/) installed on your computer. LaTeX
    is a typesetting system that is designed for the creation of technical and scientific
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not already have LaTeX installed on your machine, you can find more
    details about LaTeX and how to install it [here](https://www.latex-project.org/get/)
    and [here](https://github.com/garrettj403/SciencePlots/wiki/FAQ).
  prefs: []
  type: TYPE_NORMAL
- en: If you are running on Google Colab, you can run the following code in a cell
    to install LaTeX.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After setting up LaTeX, we can install the scienceplots library using pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once the library and LaTeX have been installed on your chosen platform, you
    can then import the scienceplots library along with [matplotlib](https://matplotlib.org/).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Creating Dummy Data for Plotting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before generating some plots, we first need to create some sample data. We will
    see how the scienceplots library works with real-world data later in the article.
  prefs: []
  type: TYPE_NORMAL
- en: For this part of the article, we are going to create some linearly spaced values
    using `np.linspace` and then carry out a few random mathematical calculations
    on that data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once we have created our data (or loaded it into pandas if we are loading from
    a csv file), we can begin creating our plots.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Line Plot With Markers Using Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first plot we will work with is a line plot. This can easily be created
    by using matplotlib’s `.plot()` function and passing in the required data for
    the `x` and `y` parameters.
  prefs: []
  type: TYPE_NORMAL
- en: As we are dealing with variables derived from equations, it can sometimes be
    handy to include these in the plot’s legend for the reader to understand what
    they are.
  prefs: []
  type: TYPE_NORMAL
- en: One of the nice things about matplotlib is we can use LaTeX equations as labels.
    All we have to do is surround the equation with dollar signs ( `$` ).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we get back the following and very basic matplotlib
    figure with standard colours.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fc6784deee83168c8a847a9a45f5d259.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic matplotlib line plot before applying scienceplots. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Even though the figure above looks useable, the quality of it (dpi & size),
    and the styling may not be entirely suitable for publication within a journal.
  prefs: []
  type: TYPE_NORMAL
- en: Applying scienceplots Styling to a Line Plot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To instantly transform our figure, we can add a single line of code: a `with`
    statement, which calls upon matplotlib’s `style.context` function and allows us
    to pass in one of the [many styles that are available from scienceplots](https://github.com/garrettj403/SciencePlots/wiki/Gallery).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we get the following plot, which is much more suitable
    for including in a journal publication.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3009d64243a27e701cbb8c59587508d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib lineplot after applying the scienceplots style. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: The figure is simple (i.e. without chart junk), and it is easy to distinguish
    between the different lines. Additionally, when viewing this figure in a Jupyter
    Notebook, it may appear very large even though we have set a relatively small
    figure size. This is due to the figure’s DPI being set to 600, which is often
    a requirement of many publications and ensures that figures are as clear as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try applying another style. This time we will use the styling from the
    [Institute of Electrical and Electronics Engineers (IEEE)](https://www.ieee.org/).
  prefs: []
  type: TYPE_NORMAL
- en: To do this, all we have to do to change the styling is swap out `high-vis` for
    `ieee`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we will get back the following plot in the style
    recommended by the IEEE.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6ddea36204928db1a61e68e3811882a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib lineplot after applying the scienceplots IEEE style. Image by the
    author.
  prefs: []
  type: TYPE_NORMAL
- en: Histograms with Science Plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous examples, we explored how to apply styling to line plots.
  prefs: []
  type: TYPE_NORMAL
- en: But can we apply the same styling to other types of plots?
  prefs: []
  type: TYPE_NORMAL
- en: Of course we can!
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how we can apply that styling to histograms.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's create a matplotlib figure using some Gamma Ray (measurement of
    natural radioactivity of geological formations) data using the code below. To
    show a second dataset, I have adjusted the same data by 20 API units to the right.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we get back the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8f4124ae065c69dff98f92bcfa351422.png)'
  prefs: []
  type: TYPE_IMG
- en: Simple matplotlib histogram of gamma ray measurements. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We will notice it uses the standard styling from matplotlib and looks very basic
    with both data sets overlapping each other. This causes some of the information
    to be obscured.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how the IEEE style changes things.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we get back the following figure with the IEEE styling
    applied. However, the second GR dataset still obscures the first.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7846b7406e3b9b819e0a3275ba6c138c.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib histogram of Gamma Ray measurements after applying scienceplots IEEE
    styling. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps I had high expectations that the scienceplots library would be able
    to handle any overlap and apply transparency automatically.
  prefs: []
  type: TYPE_NORMAL
- en: However, it is not too much effort to apply this ourselves. All we need to do
    is add the alpha parameter for each dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We get the following figure when we run the above code with the alpha changes.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/66db3b0826299636032fe424dc04e2f1.png)'
  prefs: []
  type: TYPE_IMG
- en: Histogram of Gamma Ray measurements after applying scienceplots and adding transparency
    to the datasets. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can see the variation in the bars for both data sets.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended you check the style guidelines for your intended publication
    to make sure that using transparencies is acceptable. In most cases, it should
    be, but it is worth checking.
  prefs: []
  type: TYPE_NORMAL
- en: Applying Science Plots to Seaborn Figures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are not restricted to just applying styles from the scienceplots library
    to matplotlib figures. We can also apply them to [Seaborn](https://seaborn.pydata.org/)
    figures. This is due to Seaborn being based upon matplotlib code.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes when creating figures [Seaborn](https://seaborn.pydata.org/) provides
    more effortless ways to create some plots compared to matplotlib. For example,
    when we have a text-based categorical variable, we want to be able to plot that
    without having to add a separate scatter plot for each category.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we have some neutron porosity and bulk density data —common
    well logging measurements. For each measurement, we also have a lithology category.
  prefs: []
  type: TYPE_NORMAL
- en: This dataset originates from the Force 2020 Xeek Machine Learning Competition
    dataset. Details of which can be found at the end of the article.
  prefs: []
  type: TYPE_NORMAL
- en: To begin, we first need to import seaborn into our notebook.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: After importing the seaborn library, we can create our scatterplot using the
    following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we get back the following scatter plot with our
    data coloured in by the different lithologies.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/47c89f4c2a4d6d9c2b18964a47d94436.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic neutron-density crossplot generated using Seaborn. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: It looks ok. However, we need to ensure that the style is suitable for the intended
    journal and that the colours are accessible to all readers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To apply our scienceplots styling, we can use the same syntax as before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we get back the following plot with improved styling,
    including a new colour palette.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b51e957d4ca3ab217abfb9161ce8c506.png)'
  prefs: []
  type: TYPE_IMG
- en: Seaborn Scatter plot, with scienceplots styling showing bulk density vs neutron
    porosity and coloured by lithology variations. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing colour palettes for figures can be tricky and time-consuming; however,
    with some thought, it can make your figure more accessible to readers with vision-related
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to find some tools to help you choose effective and accessible colour
    palettes check out the link below.
  prefs: []
  type: TYPE_NORMAL
- en: '[**4 Essential Tools to Help You Select a Colour Palette for Your Data Visualisation**](/4-essential-tools-to-help-you-select-a-colour-palette-for-your-data-visualisation-ddb2ec92a08)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, some colours may not be distinguished easily when printing papers
    out in black and white. Therefore, it may be worth considering assigning different
    shapes to the categories. This is especially important when we have small datasets
    such as those obtained from laboratory processes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within this article, we have explored how we can quickly transform basic matplotlib
    figures into something that could easily be added to an article for scientific
    publication. These figures may still need further tweaking, but by using the scienceplots
    library, we can get most of the way there. Additionally, checking your preferred
    journal’s author toolkit is always recommended to ensure that the plots you create
    meet the required standards.
  prefs: []
  type: TYPE_NORMAL
- en: Dataset Used in this Tutorial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Training dataset used as part of a Machine Learning competition run by Xeek
    and FORCE 2020 *(Bormann et al., 2020)*. This dataset is licensed under Creative
    Commons Attribution 4.0 International.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full dataset can be accessed at the following link: [https://doi.org/10.5281/zenodo.4351155](https://doi.org/10.5281/zenodo.4351155).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Secondly, you can get the full Medium experience and support thousands of
    other writers and me by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the fantastic Medium articles, as well as the
    chance to make money with your writing.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support.*'
  prefs: []
  type: TYPE_NORMAL
