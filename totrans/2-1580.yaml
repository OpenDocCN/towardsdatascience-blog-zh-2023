- en: 'New SHAP Plots: Violin and Heatmap'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/new-shap-plots-violin-and-heatmap-20f647313b64](https://towardsdatascience.com/new-shap-plots-violin-and-heatmap-20f647313b64)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What the plots in SHAP version 0.42.1 can tell you about your model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://conorosullyds.medium.com/?source=post_page-----20f647313b64--------------------------------)[![Conor
    O''Sullivan](../Images/2dc50a24edb12e843651d01ed48a3c3f.png)](https://conorosullyds.medium.com/?source=post_page-----20f647313b64--------------------------------)[](https://towardsdatascience.com/?source=post_page-----20f647313b64--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----20f647313b64--------------------------------)
    [Conor O''Sullivan](https://conorosullyds.medium.com/?source=post_page-----20f647313b64--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----20f647313b64--------------------------------)
    ·6 min read·Aug 14, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8defb22358b723a94b013acfe5de076f.png)'
  prefs: []
  type: TYPE_IMG
- en: '(source: author)'
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the biggest concerns about SHAP has to do with the package itself. It
    hadn’t been updated in a while and the GitHub issues were piling up. To the relief
    of many users, contributors have been more active. In fact, they’ve given us new
    charts — Violin and Heatmap. We will:'
  prefs: []
  type: TYPE_NORMAL
- en: Give the code for these plots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss what new insights we can gain from them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can also watch this intro on the topic:'
  prefs: []
  type: TYPE_NORMAL
- en: Existing SHAP Plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We continue on from a previous SHAP tutorial. You can find this in the article
    below. You can also find the full project on [GitHub](https://github.com/conorosully/SHAP-tutorial).
    To use the new charts you will have to update the SHAP package. I am using version
    **0.42.1.**
  prefs: []
  type: TYPE_NORMAL
- en: '[](/introduction-to-shap-with-python-d27edc23c454?source=post_page-----20f647313b64--------------------------------)
    [## Introduction to SHAP with Python'
  prefs: []
  type: TYPE_NORMAL
- en: 'How to create and interpret SHAP plots: waterfall, force, mean SHAP, beeswarm
    and dependence'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/introduction-to-shap-with-python-d27edc23c454?source=post_page-----20f647313b64--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: To summarise, we used SHAP to explain a model built using the [abalone dataset](https://archive.ics.uci.edu/ml/datasets/abalone).
    This has 4,177 instances and you can see examples of the features below. We use
    these 8 features to predict y — the number of **rings** in the abalone shell.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4799522c7ec972bf1d1bb49fa9d3bcd5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'X feature matrix (source: [UCI Machine Learning Repository](https://archive.ics.uci.edu/ml/datasets/abalone))
    (licence: CC0: Public Domain)'
  prefs: []
  type: TYPE_NORMAL
- en: The tutorial goes on to calculate SHAP values and display various SHAP plots.
    Having an understanding of some of these is useful for understanding the new SHAP
    plots. We will see that they provide similar information.
  prefs: []
  type: TYPE_NORMAL
- en: The first is the **mean SHAP** plot seen in **Figure 1**. For each feature,
    this gives the absolute mean SHAP value across all instances. Features, that had
    made significant contributions to predictions, will have a high mean SHAP value.
    In other words, this plot tells us which features are most important in general.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cb463ca275f90f1168216f51195e2372.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: absolute mean plot (source: author)'
  prefs: []
  type: TYPE_NORMAL
- en: The other plot is the **beeswarm** plot in **Figure 2**. This is a visualisation
    of all the SHAP values. On the y-axis, the values are grouped by feature. For
    each group, the colour of the points is determined by the feature value (i.e.
    higher feature values are redder). Now, let’s see how the new SHAP plots compare
    to these.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c15d665083fa5e697ca479e127b66ce0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: beeswarm plot (source: author)'
  prefs: []
  type: TYPE_NORMAL
- en: SHAP Violin Plot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code for the **violin plot** is similar to what we’ve seen with other SHAP
    plots. We just input our **shap_values** object (line 2). To be clear, these are
    the values we calculated in the [previous tutorial](/introduction-to-shap-with-python-d27edc23c454).
    You can see the output in **Figure 3**. Comparing this to **Figure 2**, we can
    see the violin is a different style of beeswarm plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/423911f4950c92691486bc06888e0f14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: violin plot (source: author)'
  prefs: []
  type: TYPE_NORMAL
- en: An additional style is the **layered violin plot** in **Figure 4\.** With this
    one, the variation in feature values at each SHAP value is more clear. That is
    if we compare it to both the original violin plot and beeswarm.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5c64a386c7c1cb256a386c0f9f2fd76e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: layered violin plot (source: author)'
  prefs: []
  type: TYPE_NORMAL
- en: Due to the similarity, the insights we gain for these are similar to the beeswarm.
    These plots can highlight important relationships as we can see which features
    tend to have large SHAP values. By colouring by feature value, we can also start
    to understand the relationship between the feature and model predictions. Now
    let’s see if the heatmap can provide more insights.
  prefs: []
  type: TYPE_NORMAL
- en: SHAP Heatmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can see the output of the heatmap function in **Figure 5**. There’s a lot
    going on:'
  prefs: []
  type: TYPE_NORMAL
- en: On the x-axis, we have a tick for all 4,177 instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The y-axis gives the feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The line above each instance is coloured by the *SHAP value* for that feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **f(x)** line gives the predicted number of rings for that instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bars on the right give the mean SHAP values we saw in **Figure 1**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Like the beeswarm, this is a plot of every shap value. Expect now we focus on
    patterns between SHAP values and groups of instances.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ef7ac141c58f60445e17992330399e6b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: SHAP heatmap (source: author)'
  prefs: []
  type: TYPE_NORMAL
- en: By default, the instances are ordered using a hierarchical clustering algorithm.
    According to the developers, “This results in samples that have the same model
    output for the same reason getting grouped together”. I have found choosing your
    own instance order to be more useful for finding patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Ordering the heatmap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To do this, we pass in an **instance_order** parameter. This must be an array
    of integers the same length as the dataset (i.e. 4,177). The values give the order
    of the instances. In the code below, we order the instances from lowest to highest
    predicted value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the output in **Figure 6**, we see some patterns emerging. Notice 3 groups
    of SHAP values for **shucked weight**. There are two groups of positive values
    — one for when the SHAP values for **shell weight** are both small and large.
    A potential interaction? Something we could explore further with [SHAP interaction
    values](/analysing-interactions-with-shap-8c4a2bc11c2a).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b679474602e87b2f1b8ad93bb1b4de09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: SHAP heatmap ordered by predicted value (source: author)'
  prefs: []
  type: TYPE_NORMAL
- en: Another option is to order the instances by a feature’s values. Below, we order
    them using **shell weight**. We can see the predicted number of rings tends to
    increase with this feature. We can also see that the SHAP values for this feature
    tend to increase. In other words, the larger the shell weight value the higher
    the predicted number of rings.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/52c92a8b2f72b94638763466598dcf8e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7: SHAP heatmap ordered by feature value (source: author)'
  prefs: []
  type: TYPE_NORMAL
- en: We can order the heatmap in any way we want. This flexibility can help us understand
    our model in a way that the other plots can’t. Personally, I’m excited to see
    these sorts of developments. More features and visualisation options will be appreciated
    by the package's many users. What would you like to see in future updates?
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to learn more about SHAP, check out the articles below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/analysing-interactions-with-shap-8c4a2bc11c2a?source=post_page-----20f647313b64--------------------------------)
    [## Analysing Interactions with SHAP'
  prefs: []
  type: TYPE_NORMAL
- en: Using the SHAP Python package to identify and visualise interactions in your
    data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/analysing-interactions-with-shap-8c4a2bc11c2a?source=post_page-----20f647313b64--------------------------------)
    [](/from-shapley-to-shap-understanding-the-math-e7155414213b?source=post_page-----20f647313b64--------------------------------)
    [## From Shapley to SHAP — Understanding the Math
  prefs: []
  type: TYPE_NORMAL
- en: An overview of how SHAP feature contributions are calculated
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/from-shapley-to-shap-understanding-the-math-e7155414213b?source=post_page-----20f647313b64--------------------------------)
    [](/the-limitations-of-shap-703f34061d86?source=post_page-----20f647313b64--------------------------------)
    [## The Limitations of SHAP
  prefs: []
  type: TYPE_NORMAL
- en: How SHAP is impacted by feature dependencies, causal inference and human biases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/the-limitations-of-shap-703f34061d86?source=post_page-----20f647313b64--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: I hope you enjoyed this article! You can support me by becoming one of my [**referred
    members**](https://conorosullyds.medium.com/membership) **:)**
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://conorosullyds.medium.com/membership?source=post_page-----20f647313b64--------------------------------)
    [## Join Medium with my referral link — Conor O’Sullivan'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: conorosullyds.medium.com](https://conorosullyds.medium.com/membership?source=post_page-----20f647313b64--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '| [Twitter](https://twitter.com/conorosullyDS) | [YouTube](https://www.youtube.com/channel/UChsoWqJbEjBwrn00Zvghi4w)
    | [Newsletter](https://mailchi.mp/aa82a5ce1dc0/signup) — sign up for FREE access
    to a [Python SHAP course](https://adataodyssey.com/courses/shap-with-python/)'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: S. Lundberg **SHAP****Python package** [https://github.com/slundberg/shap](https://github.com/slundberg/shap)
  prefs: []
  type: TYPE_NORMAL
- en: S. Lundberg & S. Lee, **A Unified Approach to Interpreting Model Predictions**
    [https://arxiv.org/pdf/1705.07874.pdf](https://arxiv.org/pdf/1705.07874.pdf)
  prefs: []
  type: TYPE_NORMAL
- en: SHAP **heatmap plot** [https://shap.readthedocs.io/en/latest/example_notebooks/api_examples/plots/heatmap.html](https://shap.readthedocs.io/en/latest/example_notebooks/api_examples/plots/heatmap.html)
  prefs: []
  type: TYPE_NORMAL
- en: SHAP **violin summary plot** [https://shap.readthedocs.io/en/latest/example_notebooks/api_examples/plots/violin.html](https://shap.readthedocs.io/en/latest/example_notebooks/api_examples/plots/violin.html)
  prefs: []
  type: TYPE_NORMAL
