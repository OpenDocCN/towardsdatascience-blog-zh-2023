- en: Cyberpunking Your Matplotlib Figures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/cyberpunking-your-matplotlib-figures-96f4d473185d](https://towardsdatascience.com/cyberpunking-your-matplotlib-figures-96f4d473185d)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Taking Your Matplotlib Figures from Boring to Interesting with a Few Lines of
    Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----96f4d473185d--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----96f4d473185d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----96f4d473185d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----96f4d473185d--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----96f4d473185d--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----96f4d473185d--------------------------------)
    ·8 min read·May 21, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fea8b724924c77103e370ccfe95d5961.png)'
  prefs: []
  type: TYPE_IMG
- en: A matplotlib figure containing multiple subplots and with the mplcyberpunk theme
    applied. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: When we create infographics or posters containing data, we want to catch the
    reader’s attention and make it aesthetically pleasing to look at whilst telling
    a convincing story.
  prefs: []
  type: TYPE_NORMAL
- en: Within Python, we have numerous plotting libraries that allow us to create charts
    — one such library is the well-known matplotlib library. However, out of the box,
    the plots generated by matplotlib are often seen as boring, and getting them to
    something visually appealing can be time-consuming.
  prefs: []
  type: TYPE_NORMAL
- en: This is where matplotlib theming libraries come into play. One favourite library
    of mine is the [**CyberPunk theme.**](https://github.com/dhaitz/mplcyberpunk)
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/dhaitz/mplcyberpunk?source=post_page-----96f4d473185d--------------------------------)
    [## GitHub - dhaitz/mplcyberpunk: "Cyberpunk style" for matplotlib plots'
  prefs: []
  type: TYPE_NORMAL
- en: A Python package on top of matplotlib to create 'cyberpunk' style plots with
    3 additional lines of code. After…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/dhaitz/mplcyberpunk?source=post_page-----96f4d473185d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Cyberpunk has become a widely popular subgenre of science fiction, characterised
    by its portrayal of dystopian societies, highly advanced technology, and countercultural
    themes. These settings are typically depicted with a futuristic look, highlighted
    by neon lights and vibrant, bold colours.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/10163f4f60fb1a64672b34cf0421ac0e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image generated by the author using Midjourney Basic Plan. (a bustling dystopian
    cyberpunk-themed futuristic city street featuring places with lots of street vendors.
    Shops and area surrounded with bright neon lights. Rainy and dark atmosphere.
    Photorealistic. — ar 3:2)
  prefs: []
  type: TYPE_NORMAL
- en: The [**CyberPunk theme**](https://github.com/dhaitz/mplcyberpunk) brings those
    neon and vibrant colours to matplotlib, and as you will see in this article, we
    can apply the styling with just two lines of Python code.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0830976d812ec1e327123d432abb29c3.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of a CyberPunk-themed Matplotlib figure. Image by dhaitz and from the
    CyberPunk Readme.
  prefs: []
  type: TYPE_NORMAL
- en: However, you have to be aware that plots generated with this styling may not
    be seen as professional when creating figures for publications, and it may not
    be suitable for readers with colour vision problems.
  prefs: []
  type: TYPE_NORMAL
- en: So, consideration must be given to your audience before you implement this styling.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries and Creating Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start creating our visualisations, we need to import some libraries.
    These are [matplotlib](https://matplotlib.org/), [pandas](https://pandas.pydata.org/)
    and [numpy](https://numpy.org/), which will be used for creating, storing our
    data and creating visualisations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once the libraries have been imported, we can create dummy data using the code
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This code generates a pandas dataframe which consists of 4 columns: one of
    which is a categorical column, and the others are numeric and consist of random
    integers.'
  prefs: []
  type: TYPE_NORMAL
- en: Bar Charts with Cyberpunk Colouring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first chart we will create, and theme is the popular bar chart.
  prefs: []
  type: TYPE_NORMAL
- en: To create this chart, we can use the `.plot()` method from pandas, and pass
    in our `x` value, which is our categorical variable. We also need to set `stacked`
    to `False` and the `kind` parameter to `bar`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we will return the following basic matplotlib figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8d21ae4f5b22640d17fcd602b30b4d6f.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic matplotlib bar chart generated from df.plot. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: It is good; however, it lacks visual interest and could be made to look much
    better.
  prefs: []
  type: TYPE_NORMAL
- en: We can easily change that by adding a single line of code above the call to
    `df.plot()`, which will allow us to apply the CyberPunk theme to the plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: What we get back is the following bar chart.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/80c30e862dc740ef7cc3418fe67a541f.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib bar chart after applying the mplcyberpunk theme. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the plot background colours have switched to a dark theme, and
    the bars have been given a “neon” like appearance.
  prefs: []
  type: TYPE_NORMAL
- en: When creating bar charts with this theme, we may find that colours of the bars
    are too bright, which is why we have to apply an alpha value.
  prefs: []
  type: TYPE_NORMAL
- en: Line Charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can do the same with line charts.
  prefs: []
  type: TYPE_NORMAL
- en: First, we call upon `df.plot()` but instead of `kind` being set to `bar` we
    can change it to `line`. With line plots, we can also add markers, which can help
    identify where our data is. This is useful if we have very little change in the
    values between categories.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a8de47ed6aa78d5e5d3c609929f214e1.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib basic line chart generated using df.plot. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: To apply the CyberPunk theme, we need to add the `with plt.style.context(‘cyberpunk’):`
    to our code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Which, when run, will generate the following line plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1193d1ec85522b55e133e543c698dfbf.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib line chart after applying the mplcyberpunk theme. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CyberPunk theme library comes with a few additional features, such as making
    the lines glow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9819c02aafd7f9ad12bc6536bb0bb465.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib line chart after applying the mplcyberpunk theme and adding glow
    effects to the lines. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'And adding transparent gradient fills under the lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/cced2202aed2388b7ce11562ee41a19c.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib line chart after applying the mplcyberpunk theme after applying gradient
    fills to the lines. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the gradient fills is nice if you are dealing with 1 or 2 lines, but
    it can get very messy once you start applying it to 3 or more lines as the gradients
    start to merge together.
  prefs: []
  type: TYPE_NORMAL
- en: Radar Plots With CyberPunk Styling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Radar plots (spider plots or radar charts) are a popular and widely used data
    visualisation tool. They allow us to compare datasets by displaying multiple variables
    simultaneously on a 2-dimensional plot.
  prefs: []
  type: TYPE_NORMAL
- en: Generating radar charts requires more matplotlib code to get them to display
    nicely.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we will get back the following radar plot, which
    uses the standard matplotlib theme.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a53eb5c45362e696dc401eb526796cd0.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic matplotlib radar chart (spider plot). Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We apply the same line as before to convert the basic radar plot to a CyberPunk
    theme.
  prefs: []
  type: TYPE_NORMAL
- en: However, we also need to change the spines and grid so that we can see them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: And when the code is re-run, we now have a CyberPunked radar plot
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2955246d929d157ab10796e991fa20c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib radar plot after applying cyberpunk theming.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to see more about creating radar charts, check out my earlier article:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/create-stunning-radar-plots-with-matplotlib-6a8e05054ff9?source=post_page-----96f4d473185d--------------------------------)
    [## Create Stunning Radar Plots with Matplotlib'
  prefs: []
  type: TYPE_NORMAL
- en: Visualising geological data using Python’s most popular data visualisation library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/create-stunning-radar-plots-with-matplotlib-6a8e05054ff9?source=post_page-----96f4d473185d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Working With Subplots and CyberPunk Styling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When creating figures with matplotlib, we often want to show multiple plots.
    The types of plots can vary depending on what you are looking to show.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example shows how to create a matplotlib figure with 4 subplots: 2 line
    plots, a scatter plot and a bar chart.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To make sure our CyberPunk styling is applied, we can add in the line: `with
    plt.style.context(‘cyberpunk’):`'
  prefs: []
  type: TYPE_NORMAL
- en: If we want to apply any of the special styling from the mplcyberpunk library,
    such as glows, we need to specify the axis where we want to apply that style by
    passing in the `ax` object to the `ax` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example: `mplcyberpunk.make_lines_glow(ax=ax4)`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When the code is run, we get back the following plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fea8b724924c77103e370ccfe95d5961.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib figure with multiple subplots after applying the cyberpunk theme.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the CyberPunk style library, we can easily and instantly transform our
    boring matplotlib figures into something that has a futuristic appearance, all
    without having to add significant new lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: However, as mentioned at the start of the article, it is always important to
    consider your intended audience and what you hope to achieve with your data visualisations
    before applying the theme.
  prefs: []
  type: TYPE_NORMAL
- en: Happy CyberPunking!
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)*Alternatively,
    you can* [***sign up for my newsletter***](https://fabulous-founder-2965.ck.page/2ca286e572)
    *to get additional content straight into your inbox for free.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Secondly, you can get the full Medium experience and support thousands of
    other writers and me by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the fantastic Medium articles, as well as the
    chance to make money with your writing.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support.*'
  prefs: []
  type: TYPE_NORMAL
