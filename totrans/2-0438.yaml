- en: Building a Medium Stats Tracker With Streamlit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/building-a-medium-stats-tracker-with-streamlit-dfe75f69b8fc](https://towardsdatascience.com/building-a-medium-stats-tracker-with-streamlit-dfe75f69b8fc)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Using the Python Streamlit Library to Track and Monitor Medium Statistics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----dfe75f69b8fc--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----dfe75f69b8fc--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dfe75f69b8fc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dfe75f69b8fc--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----dfe75f69b8fc--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dfe75f69b8fc--------------------------------)
    ·9 min read·Feb 27, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d22a37957e1a52e038e3944f7b5719a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Markus Winkler](https://unsplash.com/es/@markuswinkler?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: I have been a writer on Medium for a while and recently started tracking my
    statistics using Excel. But, more recently, I have been thinking of building an
    app using Streamlit to provide a better experience. So I thought why not give
    it a go and write an article as I build it?
  prefs: []
  type: TYPE_NORMAL
- en: Within this article, we are going to go through the process of building a simple
    Streamlit dashboard and provide a way for the end user to enter their latest statistics
    using forms. By the end of the article, we will have a basic dashboard that we
    can build upon and make even more robust at a later date.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/de3327290d6f9e8d5748484e610df3db.png)'
  prefs: []
  type: TYPE_IMG
- en: Streamlit dashboard for viewing and analysing Medium statistics. Image by the
    author
  prefs: []
  type: TYPE_NORMAL
- en: If you are just getting started with Streamlit, you may want to check out my
    articles below.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/getting-started-with-streamlit-web-based-applications-626095135cb8?source=post_page-----dfe75f69b8fc--------------------------------)
    [## Getting Started With Streamlit Web Based Applications'
  prefs: []
  type: TYPE_NORMAL
- en: A gentle introduction to creating Streamlit web apps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'towardsdatascience.com](/getting-started-with-streamlit-web-based-applications-626095135cb8?source=post_page-----dfe75f69b8fc--------------------------------)
    [](/getting-started-with-streamlit-5-functions-you-need-to-know-when-starting-out-b35ed7d872b9?source=post_page-----dfe75f69b8fc--------------------------------)
    [## Getting Started With Streamlit: 5 Functions You Need To Know When Starting
    Out'
  prefs: []
  type: TYPE_NORMAL
- en: Streamline your Streamlit learning with these 5 functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/getting-started-with-streamlit-5-functions-you-need-to-know-when-starting-out-b35ed7d872b9?source=post_page-----dfe75f69b8fc--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries and Setting up the CSV File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step is to import our key python libraries: [streamlit](https://streamlit.io/),
    [pandas](https://pandas.pydata.org/) and [plotly_express](https://plotly.com/).
    Following that, we need to configure the app to default to a wide display, and
    we will also add a title for our app.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, we need to create a new CSV file within the same directory as our app
    and assign it the name `medium_stats`.
  prefs: []
  type: TYPE_NORMAL
- en: We will need to open the file and write in four columns. We could do this through
    code, but this is a quick and easy way to set the file up for now.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0b4aa3f958567cf4cd36080c96fca776.png)'
  prefs: []
  type: TYPE_IMG
- en: CSV starting file for the Medium Stats Dashboard within Streamlit. Image by
    the author.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Ability to Write Stats to the CSV File from the Streamlit App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first piece of functionality we will set up is the ability for a user to
    enter their stats within the dashboard and update the CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This piece of code will open the CSV file, and append a new row onto it, where
    a comma separates each stat.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to create a simple form allowing the user to input the stats.
    This is achieved using the `st.form` functionality within Streamlit. We can then
    use the with statement and begin adding the number of entry boxes for each key
    stat that we want to track in our dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: We will also add this to the sidebar, so it doesn’t clutter up the main display.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When we re-run our Streamlit app, we should see the following form appear in
    the sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a1b77aa3efd2bd2033228c4d3ae69f17.png)'
  prefs: []
  type: TYPE_IMG
- en: Streamlit Medium Stats Entry form on the sidebar. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: When we select a date and add a few numbers, we can then click on the `Write
    Stats to CSV` button to commit the values to the CSV file. We will also be prompted
    by a callout stating that the stats have been added to the file.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d4b8074c7c6dc83eaaff93f00e3bf8b5.png)'
  prefs: []
  type: TYPE_IMG
- en: Streamlit Medium Stats Entry form after adding statistics for a month. Image
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: If we return to the CSV file, we will see a new line within the file with the
    stats we just added.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/035fa7142690e068a849ad84ad18ba01.png)'
  prefs: []
  type: TYPE_IMG
- en: CSV file after stats have been written from the Streamlit app. Image by the
    author.
  prefs: []
  type: TYPE_NORMAL
- en: Great! We have confirmed we can add stats directly to the CSV file. Now we can
    move on to loading the CSV file and begin creating charts for all months.
  prefs: []
  type: TYPE_NORMAL
- en: Reading the CSV File with All Stats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within the main part of the Streamlit app, we are going to add an expander.
    When this is clicked on and expanded, we will be able to see the raw data from
    the CSV file within a pandas dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If we return to the Streamlit app, we will see the expander window and view
    all of the stats within the CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/db09249d554579f907b1a1f6b0e5fd0b.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Streamlit’s st.expander to view the raw data from the stats CSV file.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Plotly Charts to View Medium Stats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have loaded all of our stats data successfully into Streamlit, we
    can now begin making some interactive charts to help us understand the trends
    over time. For this app, we will use Plotly Express to create our plots.
  prefs: []
  type: TYPE_NORMAL
- en: It is very simple to use and requires very little code to get a powerful and
    interactive plot.
  prefs: []
  type: TYPE_NORMAL
- en: The first plot we will create is a line plot of the number of followers per
    month.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When we go back to our Streamlit app, we now have our plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/644fa219eb8bda7bfc17fddd420addca.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic Plotly Express plot in Streamlit. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We only have one data point in our file, so we have nothing to view within the
    line plot. In order to fix that, we need to add more data to our CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: In the example below, I have added multiple months from August until the end
    of February.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9de1b145723f7db8b3f7cf5aa131b14e.png)'
  prefs: []
  type: TYPE_IMG
- en: medium_stats CSV file after adding multiple dates. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We can now go back to the Streamlit app and view the Plotly Express line plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0d9eb1b04f5b0b134da5fc8eadc14689.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotly Express line plot showing the change in Medium followers over time. Image
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within our dataset, we have two more stats we are tracking: the number of email
    subscribers and the number of referred members. We will display these data side
    by side in two bar charts.'
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we first need to create two columns using the `st.columns()` function,
    and then using `px.bar`we will set up the two bar charts.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure that the charts fill each of the columns, we need to include the `use_container_width`
    parameter and set it to `True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Our app now has two additional bar charts, and we have a good overview of how
    our Medium stats change over time.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c1e8a9c140e1bf160b96eeb7117f2c18.png)'
  prefs: []
  type: TYPE_IMG
- en: Medium Stats Dashboard with charts to track follower count, email subscribers
    and referred members. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: As we start to add more dates to our CSV file, we may want to consider introducing
    date filters or grouping data by years if we have been on the platform for a while.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Latest Month’s Metrics to the Streamlit App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having interactive charts on our app is excellent, however, if we really want
    to find out the current month’s follower count or email subscriber count, then
    we have to look at the charts and try to work it out. We would have to do this
    for each chart.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative and quicker way is to display the latest month’s stats as a prominent
    number on the dashboard using Streamlit’s metrics.
  prefs: []
  type: TYPE_NORMAL
- en: If we assume that the last row within the dataframe is the latest month, we
    can use the `iloc` function from pandas and extract the last values for each column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We could make this code more robust by making sure that the data is always sorted
    by date.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to get the latest stats by calling the `get_latest_monthly_metrics()`
    function and then passing those stats into Streamlit’s `metric` calls like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When we go back to the app, we can now see the latest stats prominently at the
    top of the app.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0bb56c509ffd3ddb310d1bf62285bb83.png)'
  prefs: []
  type: TYPE_IMG
- en: Medium Stats Dashboard after including Streamlit metrics. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: One of the nice things about the Streamlit metric function is that we can include
    how much each metric has changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To prepare our data, we can create a function that will add a difference column
    to the dataframe for each of the stats like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We then need to update the `get_latest_monthly_metrics()` function to account
    for the new columns. We will return each latest stat as a list with two values.
    One for the actual stat value and the other for the change or delta.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, we update the call to the variables created by this function so
    it is referencing the correct value from each list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When we return to the Streamlit app, we will now have the deltas for each of
    the stats.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c1d74f442fdea6cd16548bbb8d0f60dc.png)'
  prefs: []
  type: TYPE_IMG
- en: Medium Stats Dashboard with metrics correctly showing the differences between
    the past month and the current month. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: And there we have it — a basic Streamlit Dashboard for visualising key statistics
    from our Medium account.
  prefs: []
  type: TYPE_NORMAL
- en: Complete Code for the Medium Stats Streamlit App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to replicate the dashboard and play around with it, here is the
    full code for the app.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within this article, we have seen how we can take our Medium stats and use them
    to create interactive charts directly within Streamlit. This is a basic app, but
    it could be made much nicer with styling and more functionality, such as including
    Medium Membership earnings.
  prefs: []
  type: TYPE_NORMAL
- en: It would be really nice to have the values updated automatically through the
    Medium API. However, I do not believe all statistics are available to access through
    the API.
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)*Alternatively,
    you can* [***sign up for my newsletter***](https://fabulous-founder-2965.ck.page/2ca286e572)
    *to get additional content straight into your inbox for free.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Secondly, you can get the full Medium experience and support me and thousands
    of other writers by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the fantastic Medium articles and the chance
    to make money with your writing. If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support!*'
  prefs: []
  type: TYPE_NORMAL
