["```py\nimport numpy as np\nfrom manim import *\n\nclass FunctionExample(Scene):\n    def construct(self):\n        axes = Axes(...)\n        axes_labels=axes.get_axis_labels()\n\n        # Get the graph of a simple functions\n        graph = axes.get_graph(lambda x: np.sin(1/x), color=RED)\n        # Set up its label\n        graph_label = axes.get_graph_label(\n            graph, x_val=1, direction=2 * UP + RIGHT,\n           label=r'f(x) = \\sin(\\frac{1}{x})', color=DARK_BLUE\n        )\n\n        # Graph the axes components together\n        axes_group = VGroup(axes, axes_labels)\n\n        # Animate\n        self.play(Create(axes_group), run_time=2)\n        self.wait(0.25)\n        self.play(Create(graph), run_time=3)\n        self.play(Write(graph_label), run_time=2)\n```", "```py\n# Classification OOP API Example\n\n# loading sample dataset\nfrom pycaret.datasets import get_data\ndata = get_data('juice')\n\n# init setup\nfrom pycaret.classification import ClassificationExperiment\ns = ClassificationExperiment()\ns.setup(data, target = 'Purchase', session_id = 123)\n\n# model training and selection\nbest = s.compare_models()\n\n# evaluate trained model\ns.evaluate_model(best)\n\n# predict on hold-out/test set\npred_holdout = s.predict_model(best)\n\n# predict on new data\nnew_data = data.copy().drop('Purchase', axis = 1)\npredictions = s.predict_model(best, data = new_data)\n\n# save model\ns.save_model(best, 'best_pipeline')\n```"]