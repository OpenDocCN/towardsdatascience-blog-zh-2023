["```py\n\"You are a real-estate agent trying to qualify a new client.\nExtract the following information:\n - email\n - phone\n ....\nOnce all information has been extracted from the client, politely\nthank them you will be re-directing them to an agent\"\n```", "```py\n\"\"\" Define the data structure we want to be parsed out from the LLM response\n\nnotice that the class contains a setup (a string) and a punchline (a string.\nThe descriptions are used to construct the prompt to the llm. This particular\nexample also has a validator which checks if the setup contains a question mark.\n\nfrom: https://python.langchain.com/docs/modules/model_io/output_parsers/pydantic\n\"\"\"\n\nclass Joke(BaseModel):\n    setup: str = Field(description=\"question to set up a joke\")\n    punchline: str = Field(description=\"answer to resolve the joke\")\n\n    @validator(\"setup\")\n    def question_ends_with_question_mark(cls, field):\n        if field[-1] != \"?\":\n            raise ValueError(\"Badly formed question!\")\n        return field\n```", "```py\n\"\"\"Defining the query from the user\n\"\"\"\njoke_query = \"Tell me a joke about parrots\"\n```", "```py\n\"\"\"Defining the prompt to the llm\n\nfrom: https://python.langchain.com/docs/modules/model_io/output_parsers/pydantic\n\"\"\"\nparser = PydanticOutputParser(pydantic_object=Joke)\n\nprompt = PromptTemplate(\n    template=\"Answer the user query.\\n{format_instructions}\\n{query}\\n\",\n    input_variables=[\"query\"],\n    partial_variables={\"format_instructions\": parser.get_format_instructions()},\n)\n\ninput = prompt.format_prompt(query=joke_query)\nprint(input.text)\n```", "```py\nAnswer the user query.\nThe output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {\"properties\": {\"foo\": {\"title\": \"Foo\", \"description\": \"a list of strings\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"foo\"]}\nthe object {\"foo\": [\"bar\", \"baz\"]} is a well-formatted instance of the schema. The object {\"properties\": {\"foo\": [\"bar\", \"baz\"]}} is not well-formatted.\n\nHere is the output schema:\n```", "```py\nTell me a joke about parrots\n```", "```py\n \"\"\"Declaring a model and querying it with the parser defined input\n\"\"\"\n\nmodel_name = \"text-davinci-003\"\ntemperature = 0.0\nmodel = OpenAI(model_name=model_name, temperature=temperature)\n\noutput = model(input.to_string())\nparser.parse(output)\n```", "```py\n\"\"\"The final output, a Joke object with a setup and punchline attribute\n\"\"\"\nJoke(setup=\"Why don't parrots make good detectives?\",\npunchline=\"Because they're always repeating themselves!\")\n```", "```py\n\"\"\"Defining utility functions for constructing a readable exchange\n\"\"\"\n\ndef system_output(output):\n    \"\"\"Function for printing out to the user\n    \"\"\"\n    print('======= Bot =======')\n    print(output)\n\ndef user_input():\n    \"\"\"Function for getting user input\n    \"\"\"\n    print('======= Human Input =======')\n    return input()\n\ndef parsing_info(output):\n    \"\"\"Function for printing out key info\n    \"\"\"\n    print(f'*Info* {output}')\n```", "```py\nfrom typing import List\n\nclass Edge:\n\n    \"\"\"Edge\n    at its highest level, an edge checks if an input is good, then parses\n    data out of that input if it is good\n    \"\"\"\n\n    def __init__(self, condition, parse_prompt, parse_class, llm, max_retrys=3, out_node=None):\n        \"\"\"\n        condition (str): a True/False question about the input\n        parse_query (str): what the parser whould be extracting\n        parse_class (Pydantic BaseModel): the structure of the parse\n        llm (LangChain LLM): the large language model being used\n        \"\"\"\n        self.condition = condition\n        self.parse_prompt = parse_prompt\n        self.parse_class = parse_class\n        self.llm = llm\n\n        #how many times the edge has failed, for any reason, for deciding to skip\n        #when successful this resets to 0 for posterity.\n        self.num_fails = 0\n\n        #how many retrys are acceptable\n        self.max_retrys = max_retrys\n\n        #the node the edge directs towards\n        self.out_node = out_node\n\n    def check(self, input):\n        \"\"\"ask the llm if the input satisfies the condition\n        \"\"\"\n        validation_query = f'following the output schema, does the input satisfy the condition?\\ninput:{input}\\ncondition:{self.condition}'\n        class Validation(BaseModel):\n            is_valid: bool = Field(description=\"if the condition is satisfied\")\n        parser = PydanticOutputParser(pydantic_object=Validation)\n        input = f\"Answer the user query.\\n{parser.get_format_instructions()}\\n{validation_query}\\n\"\n        return parser.parse(self.llm(input)).is_valid\n\n    def parse(self, input):\n        \"\"\"ask the llm to parse the parse_class, based on the parse_prompt, from the input\n        \"\"\"\n        parse_query = f'{self.parse_prompt}:\\n\\n\"{input}\"'\n        parser = PydanticOutputParser(pydantic_object=self.parse_class)\n        input = f\"Answer the user query.\\n{parser.get_format_instructions()}\\n{parse_query}\\n\"\n        return parser.parse(self.llm(input))\n\n    def execute(self, input):\n        \"\"\"Executes the entire edge\n        returns a dictionary:\n        {\n            continue: bool,       weather or not should continue to next\n            result: parse_class,  the parsed result, if applicable\n            num_fails: int         the number of failed attempts\n        }\n        \"\"\"\n\n        #input did't make it past the input condition for the edge\n        if not self.check(input):\n            self.num_fails += 1\n            if self.num_fails >= self.max_retrys:\n                return {'continue': True, 'result': None, 'num_fails': self.num_fails}\n            return {'continue': False, 'result': None, 'num_fails': self.num_fails}\n\n        try:\n            #attempting to parse\n            self.num_fails = 0\n            return {'continue': True, 'result': self.parse(input), 'num_fails': self.num_fails}\n        except:\n            #there was some error in parsing.\n            #note, using the retry or correction parser here might be a good idea\n            self.num_fails += 1\n            if self.num_fails >= self.max_retrys:\n                return {'continue': True, 'result': None, 'num_fails': self.num_fails}\n            return {'continue': False, 'result': None, 'num_fails': self.num_fails}\n```", "```py\nclass Node:\n\n    \"\"\"Node\n    at its highest level, a node asks a user for some input, and trys\n    that input on all edges. It also manages and executes all\n    the edges it contains\n    \"\"\"\n\n    def __init__(self, prompt, retry_prompt):\n        \"\"\"\n        prompt (str): what to ask the user\n        retry_prompt (str): what to ask the user if all edges fail\n        parse_class (Pydantic BaseModel): the structure of the parse\n        llm (LangChain LLM): the large language model being used\n        \"\"\"\n\n        self.prompt = prompt\n        self.retry_prompt = retry_prompt\n        self.edges = []\n\n    def run_to_continue(self, _input):\n        \"\"\"Run all edges until one continues\n        returns the result of the continuing edge, or None\n        \"\"\"\n        for edge in self.edges:\n            res = edge.execute(_input)\n            if res['continue']: return res\n        return None\n\n    def execute(self):\n        \"\"\"Handles the current conversational state\n        prompots the user, tries again, runs edges, etc.\n        returns the result from an adge\n        \"\"\"\n\n        #initial prompt for the conversational state\n        system_output(self.prompt)\n\n        while True:\n            #getting users input\n            _input = user_input()\n\n            #running through edges\n            res = self.run_to_continue(_input)\n\n            if res is not None:\n                #parse successful\n                parsing_info(f'parse results: {res}')\n                return res\n\n            #unsuccessful, prompting retry\n            system_output(self.retry_prompt)\n```", "```py\n\"\"\"Defining an example\nthis example asks for contact information, and parses out either an email\nor a phone number.\n\"\"\"\n\n#defining the model used in this test\nmodel_name = \"text-davinci-003\"\ntemperature = 0.0\nmodel = OpenAI(model_name=model_name, temperature=temperature)\n\n#Defining 2 edges from the node\nclass sampleOutputTemplate(BaseModel):\n    output: str = Field(description=\"contact information\")\ncondition1 = \"Does the input contain a full and valid email?\"\nparse_prompt1 = \"extract the email from the following text.\"\nedge1 = Edge(condition1, parse_prompt1, sampleOutputTemplate, model)\ncondition2 = \"Does the input contain a full and valid phone number (xxx-xxx-xxxx or xxxxxxxxxx)?\"\nparse_prompt2 = \"extract the phone number from the following text.\"\nedge2 = Edge(condition2, parse_prompt2, sampleOutputTemplate, model)\n\n#Defining A Node\ntest_node = Node(prompt = \"Please input your full email address or phone number\",\n                 retry_prompt = \"I'm sorry, I didn't understand your response.\\nPlease provide a full email address or phone number(in the format xxx-xxx-xxxx)\")\n\n#Defining Connections\ntest_node.edges = [edge1, edge2]\n\n#running node. This handles all i/o and the logic to re-ask on failure.\nres = test_node.execute()\n```", "```py\nExample 1)\n\n======= Bot =======\nPlease input your full email address or phone number\n======= Human Input =======\ninput: Hey, yeah I'm so excited to rent from you guys. My email is hire@danielwarfield.dev\n*Info* parse results: {'continue': True, 'result': sampleOutputTemplate(output='hire@danielwarfield.dev'), 'num_fails': 0, 'continue_to': None}\n```", "```py\nExample 2)\n\n======= Bot =======\nPlease input your full email address or phone number\n======= Human Input =======\ninput: do you want mine or my wifes?\n======= Bot =======\nI'm sorry, I didn't understand your response.\nPlease provide a full email address or phone number(in the format xxx-xxx-xxxx)\n======= Human Input =======\ninput: ok, I guess you want mine. 413-123-1234\n*Info* parse results: {'continue': True, 'result': sampleOutputTemplate(output='413-123-1234'), 'num_fails': 0, 'continue_to': None}\n```", "```py\nExample 3)\n\n======= Bot =======\nPlease input your full email address or phone number\n======= Human Input =======\ninput: No\n======= Bot =======\nI'm sorry, I didn't understand your response.\nPlease provide a full email address or phone number(in the format xxx-xxx-xxxx)\n======= Human Input =======\ninput: nope\n======= Bot =======\nI'm sorry, I didn't understand your response.\nPlease provide a full email address or phone number(in the format xxx-xxx-xxxx)\n======= Human Input =======\ninput: I said no\n*Info* parse results: {'continue': True, 'result': None, 'num_fails': 3, 'continue_to': None}\n```", "```py\n\"\"\"Implementing the conversation as a directed graph\n\"\"\"\n\n# Defining Nodes\nname_node = Node(\"Hello! My name's Dana and I'll be getting you started on your renting journey. I'll be asking you a few questions, and then forwarding you to one of our excellent agents to help you find a place you'd love to call home.\\n\\nFirst, can you please provide your name?\", \"I'm sorry, I don't understand, can you provide just your name?\")\ncontact_node = Node(\"do you have a phone number or email we can use to contact you?\", \"I'm sorry, I didn't understand that. Can you please provide a valid email or phone number?\")\nbudget_node = Node(\"What is your monthly budget for rent?\", \"I'm sorry, I don't understand the rent you provided. Try providing your rent in a format like '$1,300'\")\navail_node = Node(\"Great, When is your soonest availability?\", \"I'm sorry, one more time, can you please provide a date you're willing to meet?\")\n\n#Defining Data Structures for Parsing\nclass nameTemplate(BaseModel): output: str = Field(description=\"a persons name\")\nclass phoneTemplate(BaseModel): output: str = Field(description=\"phone number\")\nclass emailTemplate(BaseModel): output: str = Field(description=\"email address\")\nclass budgetTemplate(BaseModel): output: float = Field(description=\"budget\")\nclass dateTemplate(BaseModel): output: str = Field(description=\"date\")\n\n#defining the model\nmodel_name = \"text-davinci-003\"\ntemperature = 0.0\nmodel = OpenAI(model_name=model_name, temperature=temperature)\n\n#Defining Edges\nname_edge = Edge(\"Does the input contain a persons name?\", \" Extract the persons name from the following text.\", nameTemplate, model)\ncontact_phone_edge = Edge(\"does the input contain a valid phone number?\", \"extract the phone number in the format xxx-xxx-xxxx\", phoneTemplate, model)\ncontact_email_edge = Edge(\"does the input contain a valid email?\", \"extract the email from the following text\", emailTemplate, model)\nbudget_edge = Edge(\"Does the input contain a number in the thousands?\", \"Extract the number from the following text from the following text. Remove any symbols and multiply a number followed by the letter 'k' to thousands.\", budgetTemplate, model)\navail_edge = Edge(\"does the input contain a date or day? dates or relative terms like 'tommorrow' or 'in 2 days'.\", \"extract the day discussed in the following text as a date in mm/dd/yyyy format. Today is September 23rd 2023.\", dateTemplate, model)\n\n#Defining Node Connections\nname_node.edges = [name_edge]\ncontact_node.edges = [contact_phone_edge, contact_email_edge]\nbudget_node.edges = [budget_edge]\navail_node.edges = [avail_edge]\n\n#defining edge connections\nname_edge.out_node = contact_node\ncontact_phone_edge.out_node = budget_node\ncontact_email_edge.out_node = budget_node\nbudget_edge.out_node = avail_node\n\n#running the graph\ncurrent_node = name_node\nwhile current_node is not None:\n    res = current_node.execute()\n    if res['continue']:\n        current_node = res['continue_to']\n```", "```py\n ======= Bot =======\nHello! My name's Dana and I'll be getting you started on your renting journey. I'll be asking you a few questions, and then forwarding you to one of our excellent agents to help you find a place you'd love to call home.\n\nFirst, can you please provide your name?\n======= Human Input =======\ninput: daniel warfield\n*Info* parse results: {'continue': True, 'result': nameTemplate(output='daniel warfield'), 'num_fails': 0, 'continue_to': <__main__.Node object at 0x7b196801dc60>}\n======= Bot =======\ndo you have a phone number or email we can use to contact you?\n======= Human Input =======\ninput: 4131231234\n======= Bot =======\nI'm sorry, I didn't understand that. Can you please provide a valid email or phone number?\n======= Human Input =======\ninput: my phone number is 4131231234\n*Info* parse results: {'continue': True, 'result': phoneTemplate(output='413-123-1234'), 'num_fails': 0, 'continue_to': <__main__.Node object at 0x7b196801c610>}\n======= Bot =======\nWhat is your monthly budget for rent?\n======= Human Input =======\ninput: 1.5k\n*Info* parse results: {'continue': True, 'result': budgetTemplate(output=1500.0), 'num_fails': 0, 'continue_to': <__main__.Node object at 0x7b196801c7c0>}\n======= Bot =======\nGreat, When is your soonest availability?\n======= Human Input =======\ninput: 2 days\n*Info* parse results: {'continue': True, 'result': dateTemplate(output='09/25/2023'), 'num_fails': 0, 'continue_to': None}\n```", "```py\n======= Bot =======\nHello! My name's Dana and I'll be getting you started on your renting journey. I'll be asking you a few questions, and then forwarding you to one of our excellent agents to help you find a place you'd love to call home.\n\nFirst, can you please provide your name?\n======= Human Input =======\ninput: Hi Dana, my name's mike (michael mcfoil), it's a pleasure to meet you! \n*Info* parse results: {'continue': True, 'result': nameTemplate(output='Michael Mcfoil'), 'num_fails': 0, 'continue_to': <__main__.Node object at 0x7b19681087c0>}\n======= Bot =======\ndo you have a phone number or email we can use to contact you?\n======= Human Input =======\ninput: yeah, you can reach me at mike at gmail\n======= Bot =======\nI'm sorry, I didn't understand that. Can you please provide a valid email or phone number?\n======= Human Input =======\ninput: oh, sorry ok it's mike@gmail.com\n*Info* parse results: {'continue': True, 'result': emailTemplate(output='mike@gmail.com'), 'num_fails': 0, 'continue_to': <__main__.Node object at 0x7b1968109960>}\n======= Bot =======\nWhat is your monthly budget for rent?\n======= Human Input =======\ninput: I can do anywhere from 2 thousand to 5 thousand, depending on the property\n*Info* parse results: {'continue': True, 'result': budgetTemplate(output=5000.0), 'num_fails': 0, 'continue_to': <__main__.Node object at 0x7b196810a260>}\n======= Bot =======\nGreat, When is your soonest availability?\n======= Human Input =======\ninput: does october 2nd work for you?\n======= Bot =======\nI'm sorry, one more time, can you please provide a date you're willing to meet?\n======= Human Input =======\ninput: october 2nd\n*Info* parse results: {'continue': True, 'result': dateTemplate(output='10/02/2023'), 'num_fails': 0, 'continue_to': None}\n```", "```py\n======= Bot =======\nHello! My name's Dana and I'll be getting you started on your renting journey. I'll be asking you a few questions, and then forwarding you to one of our excellent agents to help you find a place you'd love to call home.\n\nFirst, can you please provide your name?\n======= Human Input =======\ninput: je m'appelle daniel warfield\n*Info* parse results: {'continue': True, 'result': nameTemplate(output='Daniel Warfield'), 'num_fails': 0, 'continue_to': <__main__.Node object at 0x7b196801c7c0>}\n======= Bot =======\ndo you have a phone number or email we can use to contact you?\n======= Human Input =======\ninput: mi número de teléfono es 410-123-1234\n*Info* parse results: {'continue': True, 'result': phoneTemplate(output='410-123-1234'), 'num_fails': 0, 'continue_to': <__main__.Node object at 0x7b196801ec20>}\n======= Bot =======\nWhat is your monthly budget for rent?\n======= Human Input =======\ninput: Mein monatliches Budget beträgt 3.000\n*Info* parse results: {'continue': True, 'result': budgetTemplate(output=3000.0), 'num_fails': 0, 'continue_to': <__main__.Node object at 0x7b196801d390>}\n======= Bot =======\nGreat, When is your soonest availability?\n======= Human Input =======\ninput: אני יכול להיפגש מחר\n======= Bot =======\nI'm sorry, one more time, can you please provide a date you're willing to meet?\n======= Human Input =======\ninput: Yes karogh yem handipel vaghy\n======= Bot =======\nI'm sorry, one more time, can you please provide a date you're willing to meet?\n======= Human Input =======\ninput: I can meet tomorrow\n*Info* parse results: {'continue': True, 'result': dateTemplate(output='09/24/2023'), 'num_fails': 0, 'continue_to': None}\n```"]