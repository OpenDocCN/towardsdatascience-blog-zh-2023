["```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nsim_df = pd.read_csv('intermittent_time_series.csv')\n```", "```py\nfrom statsforecast import StatsForecast\nfrom statsforecast.models import CrostonClassic\n\nmodels = [CrostonClassic()]\n\nsf = StatsForecast(\n    df=sim_df,\n    models=models,\n    freq='H',\n    n_jobs=-1\n)\n```", "```py\ncv_df = sf.cross_validation(\n    df=sim_df,\n    h=1,\n    step_size=1,\n    n_windows=50\n)\n```", "```py\nfig, ax = plt.subplots(figsize=(10,8))\n\nax.bar(sim_df.index, sim_df['y'], color='lightgray')\nax.plot(cv_df.index, cv_df['CrostonClassic'], ls='--', label='Croston')\nax.set_ylabel('Value')\nax.set_xlabel('Time steps')\nax.legend(loc='best')\nplt.xlim(40, 100)\n\nplt.tight_layout()\n```", "```py\nfrom statsforecast.models import CrostonOptimized\n\nmodels = [CrostonOptimized()]\n\nsf = StatsForecast(\n    df=sim_df,\n    models=models,\n    freq='H',\n    n_jobs=-1\n)\n\ncv_df = sf.cross_validation(\n    df=sim_df,\n    h=1,\n    step_size=1,\n    n_windows=50\n)\n\ncv_df.index = np.arange(50, 100, 1)\n```", "```py\nfrom statsforecast.models import ADIDA\n\nmodels = [CrostonOptimized(), ADIDA()]\n\nsf = StatsForecast(\n    df=sim_df,\n    models=models,\n    freq='H',\n    n_jobs=-1\n)\n\ncv_df = sf.cross_validation(\n    df=sim_df,\n    h=1,\n    step_size=1,\n    n_windows=50\n)\n\ncv_df.index = np.arange(50, 100, 1)\n```", "```py\nfrom statsforecast.models import IMAPA\n\nmodels = [ADIDA(), IMAPA()]\n\nsf = StatsForecast(\n    df=sim_df,\n    models=models,\n    freq='H',\n    n_jobs=-1\n)\n\ncv_df = sf.cross_validation(\n    df=sim_df,\n    h=1,\n    step_size=1,\n    n_windows=50\n)\n\ncv_df.index = np.arange(50, 100, 1)\n```", "```py\nfrom statsforecast.models import TSB\n\nmodels = [TSB(0.1, 0.1), CrostonClassic()]\n\nsf = StatsForecast(\n    df=sim_df,\n    models=models,\n    freq='H',\n    n_jobs=-1\n)\n\ncv_df = sf.cross_validation(\n    df=sim_df,\n    h=1,\n    step_size=1,\n    n_windows=50\n)\n\ncv_df.index = np.arange(50, 100, 1)\n```", "```py\ndf = pd.read_csv('TexasTurbine.csv')\n\ndf = df.drop(['Wind speed | (m/s)', 'Wind direction | (deg)', 'Pressure | (atm)', \"Air temperature | ('C)\"], axis=1)\n\nstart_date = pd.to_datetime('2023-01-01 00:00:00')\nend_date = pd.to_datetime('2023-12-31 23:00:00')\ndate_range = pd.date_range(start=start_date, end=end_date, freq='H')\n\ndf['ds'] = date_range\n\ndf = df.rename(columns={'System power generated | (kW)': \"y\"})\n\ndf = df.drop(['Time stamp'], axis=1)\n\ndf['unique_id'] = 1\ndf = df[['unique_id', 'ds', 'y']]\n```", "```py\nfig, ax = plt.subplots( figsize=(10,8))\n\nax.bar(df.index, df['y'], color='grey', width=0.1)\nax.set_ylabel('Wind power (kW)')\nax.set_xlabel('Time steps')\n\nplt.xlim(0, 200)\nplt.tight_layout()\n```", "```py\nfrom statsforecast.models import SimpleExponentialSmoothingOptimized as SESOpt\n\nmodels = [CrostonOptimized(), ADIDA(), IMAPA(), TSB(0.2, 0.2), SESOpt()]\n```", "```py\nsf = StatsForecast(\n    df=df,\n    models=models,\n    freq='H',\n    n_jobs=-1 # use all computing power available\n)\n```", "```py\nh_cv_df = sf.cross_validation(\n    df=df,\n    h=1, # Horizon is 1, since we forecast the next hour\n    step_size=1, # Move the window by 1 time step\n    n_windows=50 # Make 50 windows of cross-validation\n)\n\nh_cv_df.index = np.arange(8709, 8759, 1)\n```", "```py\nfig, ax = plt.subplots( figsize=(10,8))\n\nax.bar(h_cv_df.index, h_cv_df['y'], color='lightgrey')\nax.plot(h_cv_df.index, h_cv_df['CrostonOptimized'], ls='--', label='Croston')\nax.plot(h_cv_df.index, h_cv_df['ADIDA'], ls=':', label='ADIDA')\nax.plot(h_cv_df.index, h_cv_df['TSB'], ls='-.', label='TSB')\nax.plot(h_cv_df.index, h_cv_df['SESOpt'], ls=':', label='SES')\n\nax.set_ylabel('Wind power (kW)')\nax.set_xlabel('Time steps')\n\nax.legend(loc='best')\n\nplt.tight_layout()\n```", "```py\nfrom sklearn.metrics import mean_absolute_error\n\nmae_croston_h = mean_absolute_error(h_cv_df['y'], h_cv_df['CrostonOptimized'])\nmae_adida_h = mean_absolute_error(h_cv_df['y'], h_cv_df['ADIDA'])\nmae_tsb_h = mean_absolute_error(h_cv_df['y'], h_cv_df['TSB'])\nmae_ses_h = mean_absolute_error(h_cv_df['y'], h_cv_df['SESOpt'])\n\ny = [mae_croston_h, mae_adida_h, mae_tsb_h, mae_ses_h]\nx = ['Croston', 'ADIDA', 'TSB', 'SES']\n\nfig, ax = plt.subplots()\n\nax.bar(x, y, width=0.4)\nax.set_xlabel('Models')\nax.set_ylabel('MAE (kW)')\nax.set_xlabel('Models')\nax.set_ylim(0, 500)\n\nfor index, value in enumerate(y):\n    plt.text(x=index, y=value + 5, s=str(round(value,2)), ha='center')\n\nplt.tight_layout()\n```", "```py\nd_cv_df = sf.cross_validation(\n    df=df,\n    h=24,\n    step_size=24,\n    n_windows=5\n)\n\nd_cv_df.index = np.arange(8639, 8759, 1)\n```", "```py\nw_cv_df = sf.cross_validation(\n    df=df,\n    h=168,\n    step_size=168,\n    n_windows=2\n)\n\nw_cv_df.index = np.arange(8423, 8759, 1)\n```"]