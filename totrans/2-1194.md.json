["```py\nimport numpy as np\n\ndef find_outliers_IQR(data, threshold=1.5):\n    # Find first and third quartiles\n    Q1, Q3 = np.percentile(data, [25, 75])\n    # Compute IQR (interquartile range)\n    IQR = Q3 - Q1\n    # Compute lower and upper bound\n    lower_bound = Q1 - (threshold * IQR)\n    upper_bound = Q3 + (threshold * IQR)\n    # Select outliers\n    outliers = [x for x in data if x < lower_bound or x > upper_bound]\n    return outliers\n```", "```py\nfrom sklearn.preprocessing import StandardScaler\n\ndef find_outliers_zscore(data, threshold=3):\n    # Normalize data\n    scaler = StandardScaler()\n    standardized = scaler.fit_transform(data.reshape(-1, 1))\n    # Select outliers\n    outliers = [data[i] for i, x in enumerate(standardized) if x < -threshold or x > threshold]\n    return outliers\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import DBSCAN\n\ndef generate_data_with_outliers(n_samples=100, noise=0.05, outlier_fraction=0.05, random_state=42):\n    # Create random data\n    X = np.concatenate([np.random.normal(0.5, 0.1, size=(n_samples//2, 2)),\n                         np.random.normal(1.5, 0.1, size=(n_samples//2, 2))], axis=0)\n\n    # Add outliers\n    n_outliers = int(outlier_fraction * n_samples)\n    outliers = np.random.RandomState(seed=random_state).rand(n_outliers, 2) * 3 - 1.5\n    X = np.concatenate((X, outliers), axis=0)\n\n    # Add noise to the data to resemble real-world data\n    X = X + np.random.randn(n_samples + n_outliers, 2) * noise\n\n    return X\n\n# Genereate data\nX = generate_data_with_outliers(outlier_fraction=0.2)\n\n# Apply DBSCAN to cluster the data and find outliers\ndbscan = DBSCAN(eps=0.2, min_samples=5)\ndbscan.fit(X)\n\n# Select outliers\noutlier_indices = np.where(dbscan.labels_ == -1)[0]\n\n# Visualize\nplt.scatter(X[:, 0], X[:, 1], c=dbscan.labels_, cmap=\"viridis\")\nplt.scatter(X[outlier_indices, 0], X[outlier_indices, 1], c=\"red\", label=\"Outliers\", marker=\"x\")\nplt.xticks([])\nplt.yticks([])\nplt.legend()\nplt.show()\n```"]