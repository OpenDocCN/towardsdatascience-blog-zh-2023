- en: Plot Streaming Data with Python and Plotly Express
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/plot-streaming-data-with-python-and-plotly-express-e7aea8d9c441](https://towardsdatascience.com/plot-streaming-data-with-python-and-plotly-express-e7aea8d9c441)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Tracking the ISS in real time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@lee_vaughan?source=post_page-----e7aea8d9c441--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----e7aea8d9c441--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e7aea8d9c441--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e7aea8d9c441--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----e7aea8d9c441--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e7aea8d9c441--------------------------------)
    ·8 min read·Mar 26, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/962b0ecd54ae50e1fb81942915e0c069.png)'
  prefs: []
  type: TYPE_IMG
- en: The International Space Station (image from [NASA Image Gallery](https://images.nasa.gov/))
  prefs: []
  type: TYPE_NORMAL
- en: '*Streaming data* refers to real-time data which is continuously flowing from
    a source to a target. It includes audio, video, text, or numerical data that is
    generated by sources such as social media platforms, sensors, and servers. The
    data transmission is in a steady stream with no fixed beginning or end. Streaming
    data is important in fields such as healthcare, finance, and transportation, and
    it forms a key component of the [*Internet of Things (IoT)*](https://www.networkworld.com/article/3207535/what-is-iot-the-internet-of-things-explained.html).'
  prefs: []
  type: TYPE_NORMAL
- en: The ability to handle streaming data is an important skill for a data scientist.
    In this *Quick Success Data Science* project, we’ll use streaming data to track
    the International Space Station (ISS) as it orbits the Earth. For coding we’ll
    use Python and Plotly Express in a Jupyter Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: International Space Station Telemetry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Telemetry* is the *in-situ* collection and automatic transmission of remote
    sensor data to receiving equipment for monitoring. While there are numerous sources
    for ISS telemetry, we’ll use the [*WTIA REST API*](https://wheretheiss.at/w/developer)
    (WTIA stands for *Where the ISS at?*).'
  prefs: []
  type: TYPE_NORMAL
- en: This API was written by Bill Shupp to include more features than are provided
    by typical ISS tracking/notification sites. At the end of the article, I’ll list
    some additional sources for ISS telemetry and tracking, in case you want to try
    them out or compare our results to theirs.
  prefs: []
  type: TYPE_NORMAL
- en: The Plotly Express Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Plotly Express*](https://plotly.com/python/plotly-express/) is a built-in
    part of the Plotly graphing library. As a simpler, higher-level version of Plotly,
    it’s the recommended starting point for creating most common figures.'
  prefs: []
  type: TYPE_NORMAL
- en: Plotly Express contains more than 30 functions for creating entire figures at
    once, and the API for these functions was carefully designed to be as consistent
    and easy to learn as possible. This makes it easy to switch between figure types
    during a data exploration session.
  prefs: []
  type: TYPE_NORMAL
- en: While Plotly Express is easy to use and creates beautiful, interactive plots,
    they’re not as customizable as plots generated in lower-level libraries like Plotly
    or matplotlib. As always, you have to give up some control for ease of use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing Plotly gives you access to Plotly Express. You can install it using
    `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install plotly==5.13.1`'
  prefs: []
  type: TYPE_NORMAL
- en: 'or conda:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conda install -c plotly plotly=5.13.1`'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the version number will change in time, so be sure to check the Plotly
    [docs](https://plotly.com/python/getting-started/#installation), which also include
    support for classic Jupyter Notebook and JupyterLab, if needed. Additionally,
    you can find the *PyPi* page for Plotly Express [here](https://pypi.org/project/plotly-express/).
  prefs: []
  type: TYPE_NORMAL
- en: The Process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data streams aren’t truly continuous. Websites are updated at *some* frequency,
    such as once per second. Likewise, we can’t get the data faster than it’s created,
    nor should we try to get it as fast as possible. If you ping a website too frequently,
    it may think it’s under attack and block your access. So, when possible, we should
    request data at the polite rate of every 5 or 10 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this project, we’ll handle streaming data *incrementally*. Here’s the workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: Get the data from a website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put it in a pandas DataFrame.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plot it with Plotly Express.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear the plot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Importing Libraries and Assigning Constants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to Plotly Express, we’ll need the `time` module, to control how
    often we access the streaming data; the requests library, for retrieving the data
    from a URL; the pandas library, for preparing the data for plotting; and `IPython.display`,
    for clearing the plot prior to posting an updated ISS location.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use a constant named `ISS_URL` to store the WTIA REST API URL. And since
    streaming data never ends, we'll assign another constant, `ORBIT_TIME_SECS`, to
    help us determine when to end the program. This constant represents the approximate
    time — in seconds — for one complete ISS orbit of the Earth (about 92 minutes).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Getting the Streaming Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following `get_iss_telemetry` function retrieves the streaming data from
    the URL, loads it as a pandas DataFrame, drops unnecessary columns, and returns
    the DataFrame. Each time this function is called, it records the ISS telemetry
    for a *single instant in time*. Later, we'll call this function in a loop to track
    the ISS *over time*. Of course, for all this to work, you'll need an active internet
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The first step is to get the telemetry from the website. The requests library
    abstracts the complexities of HTTP (*HyperText Transfer Protocol*) requests in
    Python, making them simpler and more human friendly. The `get()` method retrieves
    the URL and assigns the output to a `response` variable, which references the
    `Response` object the web page returned for the request. This object's *text attribute*
    holds the web page as a readable text string.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to check the `response` object's HTTP status code. A code of
    200 means that the client has requested documents from the server and the server
    has complied. While 200 is the most common successful response, you may also see
    201, 202, 205, or 206.
  prefs: []
  type: TYPE_NORMAL
- en: 'The website response is in JSON (*JavaScript Object Notation*) format, so we
    use the `.json()` method to load the text string as a Python dictionary, named
    `data`. Here''s an example of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Next, we turn the `data` dictionary into a pandas DataFrame named `telemetry`.
    Note that the `index=[0]` argument heads off an "avoid scalar values without index"
    error. As we don't need information like the "id" or "solar_lat," we'll drop those
    columns before returning the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/10b4322ac9ce4cb44288b878a47bb6a1.png)'
  prefs: []
  type: TYPE_IMG
- en: The final “telemetry” DataFrame (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Plotting the ISS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last step is to define a function to plot the telemetry for a given number
    of orbits. This function will call the previous function using a `for` loop. The
    resulting plot will include a *marker* for the ISS and a *line* to record its
    [*ground track*](https://en.wikipedia.org/wiki/Ground_track) over time.
  prefs: []
  type: TYPE_NORMAL
- en: As we will be plotting a sphere onto a 2D map, this circular path will appear
    as an S-shaped *sinusoid*. Here’s a [fun video](https://www.youtube.com/watch?v=JyfEffMrglI)
    explaining why.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/36ac42ff099734662399a2c09c8a34ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Circular orbits appear sinusoidal when flattened (image by author).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `track_iss` function takes as arguments a URL, the number of orbits to plot,
    and a time interval, in seconds, for pausing execution. This pause is to prevent
    the website from being overwhelmed with requests. The last two arguments use keywords
    which means they will be treated as defaults.
  prefs: []
  type: TYPE_NORMAL
- en: The `num_pulls` variable refers to how many times we call our `get_iss_telemetry()`
    function and “pull” data from the website. This number is based on the orbital
    time, the number of orbits, and the pause interval.
  prefs: []
  type: TYPE_NORMAL
- en: To draw the path of the ISS across the map, we’ll need to store the lat-lon
    pair from each pull in a list. So, we initialize an empty list for each attribute
    prior to starting the loop.
  prefs: []
  type: TYPE_NORMAL
- en: To plot the telemetry, we loop through the `num_pulls` variable and first call
    the `get_iss_telemetry()` function, rounding the result to two decimal places.
    We then append the latitude and longitude results to our lists and clear the screen,
    so that we start each loop with a fresh plot.
  prefs: []
  type: TYPE_NORMAL
- en: Now to generate the figure. First, we call the `px.scatter_geo()` method to
    plot points on a map of the Earth. The inputs are intuitive. The color of our
    ISS marker is determined by the DataFrame’s “visibility” column. The output consists
    of “daylight,” “eclipsed,” and “visible.” The latter refers to when the ISS is
    still reflecting sunlight and thus visible in the night sky. To convert these
    outcomes to colors, we pass the `color_discrete_map` argument a dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: To support “hover window” popups, we pass the `hover_data` argument a list of
    column names for the data we want to see. To see the *complete* DataFrame, we’d
    pass `df.columns`, rather than a list.
  prefs: []
  type: TYPE_NORMAL
- en: In Plotly, a *figure* is comprised of one or more *traces*, where each trace
    is a plot element like a scatter plot, line plot, or bar plot. The `px.line_geo()`
    method returns a figure object containing a *single* trace object that represents
    a line drawn with the given latitudes and longitudes. We add this object using
    its *data attribute* (`.data[0]`). The index is “0” because there’s only one trace.
  prefs: []
  type: TYPE_NORMAL
- en: After adding a trace, we need to update the traces in the figure with the `update_traces()`
    method. Our ISS marker parameters are specified using a dictionary. We use an
    open “X” for the marker symbol. For the line plot, we specify a color of blue.
  prefs: []
  type: TYPE_NORMAL
- en: To finish the figure, we call the `update_layout()` method and pass it a width,
    height, and title. Then we call the `show()` method to display the results.
  prefs: []
  type: TYPE_NORMAL
- en: The loop ends by calling the `time` module's `sleep()` method and passing it
    the `interval` variable. In this case, it will pause the loop for 10 seconds.
    Even though the WTIA REST API is *rate limited* to one second, there's no need
    to be greedy!
  prefs: []
  type: TYPE_NORMAL
- en: 'All that’s left to do is call our function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bdc0eab246346956ceb3b0fd95ca05c1.png)'
  prefs: []
  type: TYPE_IMG
- en: The ISS tracker showing ~2 orbits of the ISS (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: The Outcome
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Despite a trivial amount of code, this plot possesses a *lot* of functionality.
  prefs: []
  type: TYPE_NORMAL
- en: If you hover the cursor over the marker, a popup window will display telemetry
    such as the station’s altitude, velocity (in km/hour), visibility, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d29dd5bf5fed7a1d1647be2580d74ca2.png)'
  prefs: []
  type: TYPE_IMG
- en: The Plotly Express figure with the ISS marker’s hover window active (image by
    author)
  prefs: []
  type: TYPE_NORMAL
- en: You can zoom in and out with a mouse scroller or the toolbar. You can take screenshots,
    pan, and reset the view. The ISS marker will change colors depending on how the
    ISS is illuminated.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/72427d3e655e41725bf8bf40fcf87b9e.png)'
  prefs: []
  type: TYPE_IMG
- en: The ISS marker turns red when its position corresponds to daytime (image by
    author)
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we handled the streaming ISS data by treating it *incrementally*. And
    even though it’s being streamed at a frequency of one hertz, we pulled the data
    every ten secconds to go easy on the source API.
  prefs: []
  type: TYPE_NORMAL
- en: More Trackers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can also access the ISS’s telemetry through the [*Open-Notify-API*](http://open-notify.org/Open-Notify-API/ISS-Location-Now/).
  prefs: []
  type: TYPE_NORMAL
- en: 'And as always with Python, there’s more than one way to accomplish a task.
    Here are some alternative approaches for tracking the station:'
  prefs: []
  type: TYPE_NORMAL
- en: Use Plotly Express with an [orthographic (globe) projection](https://medium.com/codex/tracking-the-space-station-live-with-python-155060d1df45).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Plotly Express and [calculate the station’s velocity.](https://pythonawesome.com/international-space-station-data-with-python-research/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use an [ISS icon](https://www.geeksforgeeks.org/how-to-track-iss-international-space-station-using-python/)
    for tracking and include crew information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Track the station with [Raspberry Pi](https://www.hackster.io/sridhar-rajagopal/international-space-station-tracker-6afdca#:~:text=Run%20the%20iss.py%20python%20script%20%28using%20python3%29%3A%20%24,the%20International%20Space%20Station%20on%20your%20ePaper%20Display%21).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thanks!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for reading and be sure to follow me for more *Quick Success Data Science*
    projects in the future.
  prefs: []
  type: TYPE_NORMAL
