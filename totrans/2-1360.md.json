["```py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef sin_signal(amp, freq, phase, sr):\n    \"\"\"Generate a sin signal with the given characteristics\"\"\"\n    x = np.arange(0, 2*np.pi, 1./sr)  # 2*pi is a full period for a sinusoid\n    return amp*np.sin(freq*2*np.pi*x - phase)  # full formula for a sin-shaped signal\n\ndef plot_signal(s):\n  x_ax = np.linspace(0, 1, len(s))\n  plt.plot(x_ax, s)\n\n# Change these values to modify the signal\namp = 1.0    # signal maximum amplitude\nfreq = 10    # sin frequency\nphase = 0.0  # signal phase\nsr = 10000   # sampling rate\n\nsig = sin_signal(amp, freq, phase, sr)\nplot_signal(sig)\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfreq = 440\nduration = 1.0\nsr = 10000\nn = round(duration * sr)\nx = np.arange(0, n) / sr\na = np.sin(freq*2*np.pi*x)\nf = np.fft.rfft(a)\nfreqs = np.fft.rfftfreq(n, 1./sr)\nplt.plot(freqs, np.abs(f))\nplt.plot(freqs, np.angle(f))\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfreqs = np.arange(10, 5000, 100)\nduration = 1.0\nsr = 10000\nn = round(duration * sr)\nx = np.arange(0, n) / sr\nsignal = sum(np.sin(freq*2*np.pi*x) for freq in freqs)\nplt.plot(x, signal)\n```", "```py\nlow_pass = np.array(f)\nlow_pass[freqs > 1000] = low_pass[freqs > 1000] / 2\nplt.plot(freqs, np.abs(low_pass))\n```", "```py\nsig_ = np.fft.irfft(low_pass)\nplt.plot(x, sig_)\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfreq = 10\nsr = 10000\nts = np.linspace(0, 1, sr)\nx = freq * ts\nfrac, _ = np.modf(x)\ny = (np.abs(frac - 0.5) - 0.25) * 4\nplt.plot(x, y)\n```"]