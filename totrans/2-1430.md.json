["```py\n**Table of Contents:** \nLists\n  Definitions and creation examples\n  Lists manipulation\n  List comprehension\n  List of lists\nTuples\nDictionaries\n  Dictionaries manipulation\n  Nested dictionaries\n  Dictionary comprehension\nData frames\n   Basic data frames manipulations with Pandas\n```", "```py\n# Create list of integers\nmy_integers = [1, 2, 3, 4, 5, 6]\n```", "```py\n# Create a mixed list\nmixed_list = [1, 3, \"dad\", 101, \"apple\"]\n```", "```py\n# Create list and print it\nmy_list = list((1, 2, 3, 4, 5))\nprint(my_list)\n\n>>>  \n\n    [1, 2, 3, 4, 5]\n```", "```py\n# Create a list in a range\nmy_list = list(range(1, 10))\nprint(my_list)\n\n>>>\n\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "```py\n**NOTE**:\n\nRemember that the built-in function \"range\" includes the first value,\nand excludes the last one.\n```", "```py\n# List of names\nnames = [\"James\", \"Richard\", \"Simon\", \"Elizabeth\", \"Tricia\"]\n# Change the wrong name\nnames[0] = \"Alexander\"\n# Print list\nprint(names)\n\n>>>\n\n    ['Alexander', 'Richard', 'Simon', 'Elizabeth', 'Tricia']\n```", "```py\n**NOTE:** \nIn case you didn't know, note that in Python the first element\nis always accessed by \"0\", regarding of the type we're manipulating.\nSo, in the above example, \"names[0]\" represents the first element\nof the list \"names\".\n```", "```py\n# List of names\nnames = [\"James\", \"Richard\", \"Simon\", \"Elizabeth\", \"Tricia\"]\n# Append another name\nnames.append(\"Alexander\")\n# Print list\nprint(names) \n\n>>>\n\n    ['James', 'Richard', 'Simon', 'Elizabeth', 'Tricia', 'Alexander']\n```", "```py\n# Create list1\nlist1 = [1, 2, 3]\n# Create list2\nlist2 = [4, 5, 6]\n# Concatenate lists\nconcatenated_list = list1 + list2\n# Print concatenated list\nprint(concatenated_list)\n\n>>>\n\n  [1, 2, 3, 4, 5, 6]\n```", "```py\n# Create list1\nlist1 = [1, 2, 3]\n# Create list2\nlist2 = [4, 5, 6]\n# Extend list1 with list2\nlist1.extend(list2)\n# Print new list1\nprint(list1)\n\n>>>\n\n  [1, 2, 3, 4, 5, 6]\n```", "```py\n# Create list\nmy_list = [1, 2, 3, 'four', 5.0]\n# Remove one element and print\nmy_list.remove('four')\nprint(my_list)\n\n>>>\n\n  [1, 2, 3, 5.0]\n```", "```py\n# Create list\nmy_list = [1, 2, 3, 'four', 5.0]\n# Delete one element and print\ndel my_list[3]\nprint(my_list)\n\n>>>\n\n    [1, 2, 3, 5.0]\n```", "```py\n**NOTE:** \nIf you've gained familiarity with accessing positions, in the above\nexample my_list[3] = 'four'. Because, remember: in Python we start counting\npositions from 0.\n```", "```py\n# Create shopping list\nshopping_list = [\"banana\", \"apple\", \"orange\", \"lemon\"]\n# Print the one I like\nfor fruit in shopping_list:\n    if fruit == \"lemon\":\n        print(f\"I love {fruit}\")\n    else:\n        print(f\"I don't like {fruit}\")\n\n>>>\n\n    I don't like banana\n    I don't like apple\n    I don't like orange\n    I love lemon\n```", "```py\n# Create list\nnumbers = [1,2,3,4,5,6,7,8]\n# Create empty list\neven_list = []\n# Print even numbers\nfor even in numbers:\n    if even %2 == 0:\n        even_list.append(even)\n    else:\n        pass\n\nprint(even_list)\n\n>>>\n\n    [2, 4, 6, 8]\n```", "```py\n**NOTE:**\n\nIf you are not familiar with the sintax %2 == 0 it means that we are\ndividing a number by 2 and expect a reminder of 0\\. In other words,\nwe are asking our program to intercept the even numbers.\n```", "```py\n# Create list\nnumbers = [1,2,3,4,5,6,7,8]\n# Create list of even numbers\neven_numbers = [even for even in numbers if even %2 == 0]\n# Print even list\nprint(even_numbers)\n\n>>>\n\n    [2, 4, 6, 8]\n```", "```py\n# Create shipping list\nshopping_list = [\"banana\", \"apple\", \"orange\", \"lemon\"]\n# Create commented list and print it\ncommented_list = [f\"I love {fruit}\" if fruit == \"banana\"\n                  else f\"I don't like {fruit}\"\n                  for fruit in shopping_list]\nprint(commented_list)\n\n>>>\n\n  ['I love banana', \"I don't like apple\", \"I don't like orange\",\n   \"I don't like lemon\"]\n```", "```py\n# Create lis with students and their grades\nstudents = [\n    [\"John\", [85, 92, 78, 90]],\n    [\"Emily\", [77, 80, 85, 88]],\n    [\"Michael\", [90, 92, 88, 94]],\n    [\"Sophia\", [85, 90, 92, 87]]\n]\n```", "```py\n# Iterate over the list\nfor student in students:\n    name = student[0] # Access names\n    grades = student[1] # Access grades\n    average_grade = sum(grades) / len(grades) # Calculate mean grades\n    print(f\"{name}'s average grade is {average_grade:.2f}\")\n\n>>>\n\n    John's average grade is 86.25\n    Emily's average grade is 82.50\n    Michael's average grade is 91.00\n    Sophia's average grade is 88.50\n```", "```py\n# Define a tuple and print it\nmy_tuple = (1, 3.0, \"John\")\nprint(my_tuple)\n\n>>>\n\n    (1, 3.0, 'John')\n```", "```py\n# Create a tuple with names\nnames = (\"James\", \"Jhon\", \"Elizabeth\")\n# Try to append a name\nnames.append(\"Liza\")\n\n>>>\n\n    AttributeError: 'tuple' object has no attribute 'append'\n```", "```py\n# Create a chart as a tuple\ncart = (\n    (\"Shirt\", 2, 19.99),\n    (\"Shoes\", 1, 59.99),\n    (\"Watch\", 1, 99.99)\n)\n```", "```py\n# Create a tuple in a range\nmy_tuple = tuple(range(1, 10))\nprint(my_tuple)\n\n>>>\n\n  (1, 2, 3, 4, 5, 6, 7, 8, 9)\n```", "```py\n# Create a dictionary\nmy_dictionary = {'key_1':'value_1', 'key_2':'value_2'}\n```", "```py\n# Create a dictionary of numbers and print it\nnumbers = {1:'one', 2:'two', 3:'three'}\nprint(numbers)\n\n>>>\n\n    {1: 'one', 2: 'two', 3: 'three'}\n```", "```py\n# Create a dictionary of numbers and print it\nnumbers = {'one':1, 'two':2.0, 3:'three'}\nprint(numbers)\n\n>>>\n\n  {'one': 1, 'two': 2.0, 3: 'three'}\n```", "```py\n# Access values and keys\nkeys = list(numbers.keys())\nvalues = tuple(numbers.values())\n# Print values and keys\nprint(f\"The keys are: {keys}\")\nprint(f\"The values are: {values}\")\n\n>>>\n\n    The keys are: ['one', 'two', 3]\n    The values are: (1, 2.0, 'three')\n```", "```py\n# Create a shopping list with fruits and prices\nshopping_list = {'banana':2, 'apple':1, 'orange':1.5}\n# Iterate over the values\nfor values in shopping_list.values():\n    # Values greater than threshold\n    if values > 1:\n        print(values)\n\n>>>\n\n    2\n    1.5\n```", "```py\n# Create the dictionary\nperson = {'name': 'John', 'age': 30}\n# Add value and key and print\nperson['city'] = 'New York'\nprint(person)\n\n>>>\n\n    {'name': 'John', 'age': 30, 'city': 'New York'}\n```", "```py\n# Create a dictionary\nperson = {'name': 'John', 'age': 30}\n# Change age value and print\nperson['age'] = 35\nprint(person)\n\n>>>\n\n    {'name': 'John', 'age': 35}\n```", "```py\n# Create dictionary\nperson = {'name': 'John', 'age': 30}\n# Delete age and print\ndel person['age']\nprint(person)\n\n>>>\n\n    {'name': 'John'}\n```", "```py\n# Create a classroom dictionary\nclassroom = {\n    'student_1': {\n        'name': 'Alice',\n        'age': 15,\n        'grades': [90, 85, 92]\n    },\n    'student_2': {\n        'name': 'Bob',\n        'age': 16,\n        'grades': [80, 75, 88]\n    },\n    'student_3': {\n        'name': 'Charlie',\n        'age': 14,\n        'grades': [95, 92, 98]\n    }\n```", "```py\n# Access student_3 and print\nstudent_3 = classroom['student_3']\nprint(student_3)\n\n>>>\n\n    {'name': 'Charlie', 'age': 14, 'grades': [95, 92, 98]}\n```", "```py\n# Define initial dictionary\nproducts = {'shoes': 100, 'watch': 50, 'smartphone': 250, 'tablet': 120}\n# Define threshold\nmax_price = 150\n# Filter for threshold\nproducts_to_buy = {fruit: price for fruit, price in products.items() if price <= max_price}\n# Print filtered dictionary\nprint(products_to_buy)\n\n>>>\n\n    {'shoes': 100, 'watch': 50, 'tablet': 120}\n```", "```py\nnew_dict = {key:value for key, value in iterable}\n```", "```py\n# Define names and ages in lists\nnames = ['John', 'Jane', 'Bob', 'Alice']\ncities = ['New York', 'Boston', 'London', 'Rome']\n# Create dictionary from lists and print results\nname_age_dict = {name: city for name, city in zip(names, cities)}\nprint(name_age_dict)\n\n>>>\n\n   {'John': 'New York', 'Jane': 'Boston', 'Bob': 'London', 'Alice': 'Rome'}\n```", "```py\nimport pandas as pd\n\n# Import cvs file\nmy_dataframe = pd.read_csv('a_file.csv')\n\n# Import xlsx\nmy_dataframe_2 = pd.read_excel('a_file_2.xlsx')\n```", "```py\nimport pandas as pd\n\n# Create a dictionary with different types of data\ndata = {\n    'Name': ['John', 'Alice', 'Bob'],\n    'Age': ['twenty-five', 30, 27],\n    'City': ['New York', 'London', 'Sydney'],\n    'Salary': [50000, 60000.50, 45000.75],\n    'Is_Employed': [True, True, False]\n}\n\n# Create the dataframe\ndf = pd.DataFrame(data)\n```", "```py\n# Add marital status\ndf[\"married\"] = [\"yes\", \"yes\", \"no\"]\n```", "```py\n**NOTE:**\n\nthis is the same notation we used to add values to a dictionary.\nReturn back on the article and compare the two methods.\n```", "```py\n# Delete the \"Is_Employed\" column\ndf = df.drop('Is_Employed', axis=1)\n```", "```py\n# Delete the second row \ndf = df.drop(1, axis=0)\n```"]