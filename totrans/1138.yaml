- en: How to Create a Publication-Quality Heatmap in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-create-a-publication-quality-heatmap-in-python-e4a7feb3c079](https://towardsdatascience.com/how-to-create-a-publication-quality-heatmap-in-python-e4a7feb3c079)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A tutorial guide on heatmaps in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@stephenfordham?source=post_page-----e4a7feb3c079--------------------------------)[![Stephen
    Fordham](../Images/470e298c01fd910835cabebea346e614.png)](https://medium.com/@stephenfordham?source=post_page-----e4a7feb3c079--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e4a7feb3c079--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e4a7feb3c079--------------------------------)
    [Stephen Fordham](https://medium.com/@stephenfordham?source=post_page-----e4a7feb3c079--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e4a7feb3c079--------------------------------)
    ·6 min read·Aug 28, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f7245fadca629866393efbef00ba5822.png)'
  prefs: []
  type: TYPE_IMG
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Heatmaps can be used as informative figures to convey quantitative data. They
    can be used to convey data in an easy-to-read format providing a concise data
    summary.
  prefs: []
  type: TYPE_NORMAL
- en: Python has a number of tools to facilitate the production of publication quality
    heatmaps. These include the Seaborn and Matplotlib libraries, in addition to the
    subplot2grid libraries which can provide a convenient way to organise data in
    a heatmap.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, I will detail the steps required to produce a heatmap which
    focuses on the presence/absence of key elements. To do this, I will use a CSV
    file containing fictitious data about a selection of bacterial isolates. These
    bacterial strains have a number of features including antibiotic resistance genes,
    virulence genes, and certain capsule types. A heatmap will allow the quick inspection
    and comparison between the various strains.
  prefs: []
  type: TYPE_NORMAL
- en: While the example used focuses on bacterial strains, the techniques applied
    can be used more broadly for other datasets to help you visualised your data using
    a heatmap. Throughout the following tutorial, all images are by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Objective
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create a publication quality heatmap displaying the presence/absence of key
    genes from fictitious bacterial strains.
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial will use the following csv file, ‘Bacterial_strain_heatmap_tutorial_data.csv’
    available from the [Github repository](https://github.com/StephenFordham/Visualisation_Portfolio).
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin, a few imports are necessary to read in the data and stylise the figure
    later. We will begin by including all of the import statements together.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, we read in the dataframe, set the index using the column ‘Strain’ and
    view the first 5 rows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5ff0413f993229d9d2394dbc21ade1d1.png)'
  prefs: []
  type: TYPE_IMG
- en: From the first 5 rows, we can see the data is organised with gene names as columns,
    while the index refers to each specific strain. A number, from 0–5 has been used
    to indicate the presence/absence of particular genes. This is because we will
    create a key denoting where the genes are found in the strains.
  prefs: []
  type: TYPE_NORMAL
- en: To improve readability, the heatmap will be organised into 3 sections. These
    include a section for antibiotic resistance genes, another section for virulence
    genes, and a third section for the capsule type. In order to achieve this, we
    will first need to extract the key columns for each section as a separate list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will create a unique colour for each category of gene. To do this,
    we will create a dictionary where the key matches the value encoded in the raw
    csv file, and the value for that key is a unique hexcode colour. We will then
    use the ListedColormap class from the matplotlib.colors import at the beginning
    to create a colour map using list comprehension, which we can then use as a argument
    for the cmap parameter in the call to sns.heatmap.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Figure grid pattern organisation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next task involves deciding how the heatmap should be organised. We will
    divide the heatmap into 3 sections, which include an initial heatmap for the antibiotic
    resistance genes, followed by a heatmap for the virulence genes and finally a
    heatmap for the capsule type.
  prefs: []
  type: TYPE_NORMAL
- en: To divide the heatmap into these 3 sections, we will use subplot2grid from the
    matplotlib.pyplot library.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: First we decide the figure size, followed by the number of rows and columns
    (for the whole figure) in the first tuple in the subplot2grid function call. We
    then determine the starting placement of each section in the second tuple, before
    assigning the designated number of columns to the colspan argument. This produces
    the following layout shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/33d0b80e118382f88a61c914988586dc.png)'
  prefs: []
  type: TYPE_IMG
- en: We can now begin work on the first section of the heatmap. We will begin working
    on ax1.
  prefs: []
  type: TYPE_NORMAL
- en: In the call to sns.heatmap, we first extract the columns, amr_columns_to_extract
    from the original dataframe, add in the custom colour map to the cmap parameter,
    remove the colour bar, add a linewidth and colour, and add an alpha value to give
    the colours a softer tone.
  prefs: []
  type: TYPE_NORMAL
- en: We then loop through the x-axis tick labels, and assign them a different font,
    before italicising them. By convention gene names are italicised in genetics.
    We also loop through the y-axis labels and assign both labels for the x, and y
    axis a size of 10.5.
  prefs: []
  type: TYPE_NORMAL
- en: The legend elements that follow will be the key for the figure. We create a
    list of Patch objects that are each assigned a facecolor, edge color and a corresponding
    label. The list of Patch objects is assigned the variable name ‘legends elements’,
    which can then be passed as a parameter to the ax1.legend attribute. The 5 legend
    elements are organised as a row by passing the ncol parameter the argument of
    5.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we used the axhline/axvline to add a black border around the first
    heatmap to improve clarity.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This produces the first section of the heatmap.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2fadbcda351622ba15992254d9d9f178.png)'
  prefs: []
  type: TYPE_IMG
- en: We can now add the code for the second section of the heatmap. Here, key virulence
    genes are extracted and represented as a second dataframe in the call to sns.heatmap,
    assigned the ax2 variable. Crucially, for the second heatmap, we remove the y-axis
    tick labels and their names, as these are already provided via the first heatmap.
    Horizontal and vertical lines are again added to provide definition to the figure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This produces the following heatmap.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/496166143f2d1a8b1b7fa44c519c50a6.png)'
  prefs: []
  type: TYPE_IMG
- en: The third section of the heatmap can now be added, using the same techniques
    discussed. This time, different columns from the original dataframe are extracted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Combining the code altogether, produces the following figure. Through simple
    figure organisation, and colour coordination with a key, a publication quality
    heatmap is ready for your next piece of work!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f7245fadca629866393efbef00ba5822.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Through the use of Python plotting libraries, and the subplot2grid module from
    matplotlib.pyplot, informative heatmaps can be generated to provide a comprehensive
    data summary. Combing the heatmaps with a key can also include the level of information
    included. While the example presented here is specific to genetics, the techniques
    are broadly applicable, and will work for other data sets providing the raw data
    is encoded appropriately. The code, csv file and image to support this tutorial
    can be found on my [Github repository](https://github.com/StephenFordham/Visualisation_Portfolio).
  prefs: []
  type: TYPE_NORMAL
