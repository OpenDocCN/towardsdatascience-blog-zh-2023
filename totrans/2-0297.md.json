["```py\nprompt = f'''\nPlease perform a sentiment analysis on the following movie review:\n{MOVIE_REVIEW_TEXT}\nPlease output your response as a single word: either \"Positive\" or \"Negative\".\n'''\n```", "```py\n# Engineering a prompt to extract as much information from \"About Me\" as a JSON object\nabout_me_prompt = f'''\nPlease extract information as a JSON object. Please look for the following pieces of information.\nName\nJob title\nCompany\nNumber of children as a single integer\nCar make\nCar model\nFavorite video game series\n\nThis is the body of text to extract the information from:\n{about_me}\n'''\n\n# Getting the response back from ChatGPT (gpt-3.5-turbo)\nopenai_response = openai.ChatCompletion.create(\n    model = 'gpt-3.5-turbo',\n    messages = [{'role': 'user', 'content': about_me_prompt}]\n)\n\n# Loading the response as a JSON object\njson_response = json.loads(openai_response['choices'][0]['message']['content'])\njson_response\n```", "```py\ndef extract_person_info(name, job_title, num_children):\n    '''\n    Prints basic \"About Me\" information\n\n    Inputs:\n        - name (str): Name of the person\n        - job_title (str): Job title of the person\n        - num_chilren (int): The number of children the parent has.\n    '''\n\n    print(f'This person\\'s name is {name}. Their job title is {job_title}, and they have {num_children} children.')\n```", "```py\nmy_custom_functions = [\n    {\n        'name': 'extract_person_info',\n        'description': 'Get \"About Me\" information from the body of the input text',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'name': {\n                    'type': 'string',\n                    'description': 'Name of the person'\n                },\n                'job_title': {\n                    'type': 'string',\n                    'description': 'Job title of the person'\n                },\n                'num_children': {\n                    'type': 'integer',\n                    'description': 'Number of children the person is a parent to'\n                }\n            }\n        }\n    }\n]\n```", "```py\n# Getting the response back from ChatGPT (gpt-3.5-turbo)\nopenai_response = openai.ChatCompletion.create(\n    model = 'gpt-3.5-turbo',\n    messages = [{'role': 'user', 'content': about_me}],\n    functions = my_custom_functions,\n    function_call = 'auto'\n)\n\nprint(openai_response)\n```", "```py\n# Defining a function to extract only vehicle information\ndef extract_vehicle_info(vehicle_make, vehicle_model):\n    '''\n    Prints basic vehicle information\n\n    Inputs:\n        - vehicle_make (str): Make of the vehicle\n        - vehicle_model (str): Model of the vehicle\n    '''\n\n    print(f'Vehicle make: {vehicle_make}\\nVehicle model: {vehicle_model}')\n\n# Defining a function to extract all information provided in the original \"About Me\" prompt\ndef extract_vehicle_info(name, job_title, num_children, vehicle_make, vehicle_model, company_name, favorite_vg_series):\n    '''\n    Prints the full \"About Me\" information\n\n    Inputs:\n        - name (str): Name of the person\n        - job_title (str): Job title of the person\n        - num_chilren (int): The number of children the parent has\n        - vehicle_make (str): Make of the vehicle\n        - vehicle_model (str): Model of the vehicle\n        - company_name (str): Name of the company the person works for\n        - favorite_vg_series (str): Person's favorite video game series.\n    '''\n\n    print(f'''\n    This person\\'s name is {name}. Their job title is {job_title}, and they have {num_children} children.\n    They drive a {vehicle_make} {vehicle_model}.\n    They work for {company_name}.\n    Their favorite video game series is {favorite_vg_series}.\n    ''')\n\n# Defining how we want ChatGPT to call our custom functions\nmy_custom_functions = [\n    {\n        'name': 'extract_person_info',\n        'description': 'Get \"About Me\" information from the body of the input text',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'name': {\n                    'type': 'string',\n                    'description': 'Name of the person'\n                },\n                'job_title': {\n                    'type': 'string',\n                    'description': 'Job title of the person'\n                },\n                'num_children': {\n                    'type': 'integer',\n                    'description': 'Number of children the person is a parent to'\n                }\n            }\n        }\n    },\n    {\n        'name': 'extract_car_info',\n        'description': 'Extract the make and model of the person\\'s car',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'vehicle_make': {\n                    'type': 'string',\n                    'description': 'Make of the person\\'s vehicle'\n                },\n                'vehicle_model': {\n                    'type': 'string',\n                    'description': 'Model of the person\\'s vehicle'\n                }\n            }\n        }\n    },\n    {\n        'name': 'extract_all_info',\n        'description': 'Extract all information about a person including their vehicle make and model',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'name': {\n                    'type': 'string',\n                    'description': 'Name of the person'\n                },\n                'job_title': {\n                    'type': 'string',\n                    'description': 'Job title of the person'\n                },\n                'num_children': {\n                    'type': 'integer',\n                    'description': 'Number of children the person is a parent to'\n                },\n                'vehicle_make': {\n                    'type': 'string',\n                    'description': 'Make of the person\\'s vehicle'\n                },\n                'vehicle_model': {\n                    'type': 'string',\n                    'description': 'Model of the person\\'s vehicle'\n                },\n                'company_name': {\n                    'type': 'string',\n                    'description': 'Name of the company the person works for'\n                },\n                'favorite_vg_series': {\n                    'type': 'string',\n                    'description': 'Name of the person\\'s favorite video game series'\n                }\n            }\n        }\n    }\n]\n```", "```py\n# Iterating over the three samples\nfor i, sample in enumerate(samples):\n\n    print(f'Sample #{i + 1}\\'s results:')\n\n    # Getting the response back from ChatGPT (gpt-3.5-turbo)\n    openai_response = openai.ChatCompletion.create(\n        model = 'gpt-3.5-turbo',\n        messages = [{'role': 'user', 'content': sample}],\n        functions = my_custom_functions,\n        function_call = 'auto'\n    )['choices'][0]['message']\n\n    # Checking to see that a function call was invoked\n    if openai_response.get('function_call'):\n\n        # Checking to see which specific function call was invoked\n        function_called = openai_response['function_call']['name']\n\n        # Extracting the arguments of the function call\n        function_args = json.loads(openai_response['function_call']['arguments'])\n\n        # Invoking the proper functions\n        if function_called == 'extract_person_info':\n            extract_person_info(*list(function_args.values()))\n        elif function_called == 'extract_vehicle_info':\n            extract_vehicle_info(*list(function_args.values()))\n        elif function_called == 'extract_all_info':\n            extract_all_info(*list(function_args.values()))\n```", "```py\nnative_json_schema = {\n    'name': 'extract_vehicle_info',\n    'description': 'Extract the make and model of the person\\'s car',\n    'parameters': {\n        'type': 'object',\n        'properties': {\n            'vehicle_make': {\n                'type': 'string',\n                'description': 'Make of the person\\'s vehicle'\n            },\n            'vehicle_model': {\n                'type': 'string',\n                'description': 'Model of the person\\'s vehicle'\n            }\n        }\n    }\n}\n```", "```py\nlangchain_json_schema = {\n    'name': 'extract_vehicle_info',\n    'description': 'Extract the make and model of the person\\'s car',\n    'type': 'object',\n    'properties': {\n        'vehicle_make': {\n            'title': 'Vehicle Make',\n            'type': 'string',\n            'description': 'Make of the person\\'s vehicle'\n        },\n        'vehicle_model': {\n            'title': 'Vehicle Model',\n            'type': 'string',\n            'description': 'Model of the person\\'s vehicle'\n        }\n    }\n}\n```", "```py\n# Importing the LangChain objects\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.chains import LLMChain\nfrom langchain.prompts.chat import ChatPromptTemplate\nfrom langchain.chains.openai_functions import create_structured_output_chain\n\n# Setting the proper instance of the OpenAI model\nllm = ChatOpenAI(model = 'gpt-3.5-turbo-0613')\n\n# Setting a LangChain ChatPromptTemplate\nchat_prompt_template = ChatPromptTemplate.from_template('{my_prompt}')\n\n# Setting the JSON schema for extracting vehicle information\nlangchain_json_schema = {\n    'name': 'extract_vehicle_info',\n    'description': 'Extract the make and model of the person\\'s car',\n    'type': 'object',\n    'properties': {\n        'vehicle_make': {\n            'title': 'Vehicle Make',\n            'type': 'string',\n            'description': 'Make of the person\\'s vehicle'\n        },\n        'vehicle_model': {\n            'title': 'Vehicle Model',\n            'type': 'string',\n            'description': 'Model of the person\\'s vehicle'\n        }\n    }\n}\n\n# Defining the LangChain chain object for function calling\nchain = create_structured_output_chain(output_schema = langchain_json_schema,\n                                       llm = llm,\n                                       prompt = chat_prompt_template)\n\n# Getting results with a demo prompt\nprint(chain.run(my_prompt = 'I drive a Tesla Model 3.'))\n```"]