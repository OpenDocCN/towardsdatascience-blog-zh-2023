- en: Anatomy of SQL Window Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL窗口函数的结构
- en: 原文：[https://towardsdatascience.com/anatomy-of-sql-window-functions-7256d8cf509a](https://towardsdatascience.com/anatomy-of-sql-window-functions-7256d8cf509a)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/anatomy-of-sql-window-functions-7256d8cf509a](https://towardsdatascience.com/anatomy-of-sql-window-functions-7256d8cf509a)
- en: Back To Basics | SQL fundamentals for beginners
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回到基础 | SQL初学者基础
- en: '[](https://iffatm.medium.com/?source=post_page-----7256d8cf509a--------------------------------)[![Iffat
    Malik](../Images/7be3b651053507de2077b3c3c9d3a408.png)](https://iffatm.medium.com/?source=post_page-----7256d8cf509a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7256d8cf509a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7256d8cf509a--------------------------------)
    [Iffat Malik](https://iffatm.medium.com/?source=post_page-----7256d8cf509a--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://iffatm.medium.com/?source=post_page-----7256d8cf509a--------------------------------)[![Iffat
    Malik](../Images/7be3b651053507de2077b3c3c9d3a408.png)](https://iffatm.medium.com/?source=post_page-----7256d8cf509a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7256d8cf509a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7256d8cf509a--------------------------------)
    [Iffat Malik](https://iffatm.medium.com/?source=post_page-----7256d8cf509a--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7256d8cf509a--------------------------------)
    ·9 min read·Mar 30, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----7256d8cf509a--------------------------------)
    ·阅读时间9分钟·2023年3月30日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/cb45c6657e13eb4af98d3e3c9d64e15e.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cb45c6657e13eb4af98d3e3c9d64e15e.png)'
- en: Image by author, created on [canva](https://www.canva.com)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片，创建于[canva](https://www.canva.com)
- en: In order to understand the enterprise data; you have to query it a lot. When
    I say ‘A lot’, I mean it. Working with unfamiliar piles of data is often daunting
    and it’s always a good practice to take some time to explore and understand the
    data itself. It’s good to have basic data retrieval skills but knowing analytical
    functions to derive some useful insights out of your data is cherry on top of
    a cake and it’s fun too!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解企业数据，你必须进行大量查询。当我说“大量”时，我是认真的。处理陌生的数据集常常让人感到畏惧，花时间探索和理解数据本身总是一个好习惯。掌握基本的数据检索技能是好的，但了解分析函数以从数据中提取有用的见解则是锦上添花，而且也很有趣！
- en: I come from data visualisation back ground and it’s crucial for me to not just
    understand the data but also figuring out any noteworthy findings to highlight
    it to the wider teams. Also building complex dashboards is quite often a to-and-fro
    process at where you go back to your data source to tally the data and SQL Window
    Functions have always accompanied me in my data analysis journey.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我来自数据可视化背景，对我而言，不仅理解数据至关重要，还需要找出值得注意的发现，以便向更广泛的团队展示。此外，构建复杂的仪表板通常是一个反复的过程，你需要回到数据源核对数据，而SQL窗口函数始终伴随我进行数据分析。
- en: Even though they are very useful for data analysis, there is some sort of confusion
    and people are often frighten to use them. While writing a detailed guide to SQL
    Window Functions, I realised it was becoming way too descriptive and yet I did
    not want to skip details especially about the syntax and clauses used along with
    it. It’s important to understand the building blocks, yeah? So, I will try and
    break down the building blocks of Window Function in this article so that it’s
    not overwhelming to process and implement it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管窗口函数对于数据分析非常有用，但仍有一些混淆，人们通常害怕使用它们。在编写SQL窗口函数的详细指南时，我意识到它变得过于描述性，但我又不想跳过细节，特别是关于语法和使用的子句。了解构建模块是重要的，对吧？所以，我将尝试在这篇文章中分解窗口函数的构建模块，以便处理和实现时不会感到压倒。
- en: As usual, we will be using [**classicmodels**](https://www.mysqltutorial.org/mysql-sample-database.aspx)
    MySQL sample database for demonstration, which holds the business data of a car
    retailer. Below is the ER Diagram for reference,
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，我们将使用[**classicmodels**](https://www.mysqltutorial.org/mysql-sample-database.aspx)
    MySQL样本数据库进行演示，该数据库包含汽车零售商的商业数据。下面是供参考的ER图，
- en: '![](../Images/c8eecf27187711291ef0341d63121b71.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c8eecf27187711291ef0341d63121b71.png)'
- en: Image by author
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: First things first, What is a Window Function?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首先，什么是窗口函数？
- en: Textbook definition of a Window Function is,
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口函数的教科书定义是，
- en: A [Window Function](https://www.postgresql.org/docs/9.1/tutorial-window.html)
    performs calculation across a set of table rows that are somehow related to the
    current row.
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[窗口函数](https://www.postgresql.org/docs/9.1/tutorial-window.html)在与当前行相关的一组表行上执行计算。'
- en: '![](../Images/6c89fab2d61fd11e8d9029890b4fcae4.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6c89fab2d61fd11e8d9029890b4fcae4.png)'
- en: 'Image source: [Masterfile](https://www.masterfile.com)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '图片来源: [Masterfile](https://www.masterfile.com)'
- en: What do you think this little fella sees from the window? A partial view from
    the scene outside of the window of this room or building. right? That’s exactly
    what a Window Function does. It allows you to perform calculation against a subset
    of data without aggregating current rows.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为这个小家伙从窗户里看到什么？是从这个房间或建筑物的窗户外景的部分视图，对吧？这正是窗口函数的作用。它允许你对数据子集进行计算，而不对当前行进行聚合。
- en: What’s the need? Why Window Function? Where does Aggregate Function fall behind?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么需要？为什么使用窗口函数？聚合函数哪里不足？
- en: Here is the sample data from table *PRODUCTS*, for demo purpose I have limited
    it to *PRODUCTLINEs - Planes*, *Ships* and *Trains*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自*PRODUCTS* 表的示例数据，为了演示目的，我将其限制在*PRODUCTLINEs - 飞机*、*船只* 和 *火车*。
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/61e40d6525d4e266551d94eb62cdfef5.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/61e40d6525d4e266551d94eb62cdfef5.png)'
- en: Image by author
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: Now find out the total quantity in stock for each *PRODUCTLINE*,
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在找出每个*PRODUCTLINE* 的总库存量，
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/11041bbf676e50c4a5526c793f1d6d57.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/11041bbf676e50c4a5526c793f1d6d57.png)'
- en: Image by author
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: This is pretty straight forward. *SUM(QUANTITYINSTOCK)* summarised the data
    from multiple rows into 3 rows, since we are using *GROUP BY* clause it provided
    single row for each product line. Great! that’s expected from it.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单。*SUM(QUANTITYINSTOCK)* 将来自多行的数据总结为3行，因为我们使用了*GROUP BY* 子句，它为每个产品线提供了一行。很好！这正是预期的结果。
- en: '![](../Images/7d95aec1dafadd042a3a9cfde8cd8f46.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7d95aec1dafadd042a3a9cfde8cd8f46.png)'
- en: Image by author
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: Let’s revamp the requirement now,
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来重新审视需求，
- en: Display the quantity of each product within the *PRODUCTLINE* along with the
    the total quantity in stock for that particular *PRODUCTLINE*.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示每个*PRODUCTLINE* 中每种产品的数量，以及该特定*PRODUCTLINE* 的总库存量。
- en: Arrange the result set grouped by *PRODUCTLINE.*
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*PRODUCTLINE* 分组排列结果集。
- en: Now, can this be done with the help of Aggregate Function? We surely want the
    total quantity in stock for each *PRODUCTLINE* but we do not wish to summarise
    it all. That’s where Window Functions come to the picture,
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这可以通过聚合函数来完成吗？我们确实想要每个*PRODUCTLINE* 的总库存量，但我们不希望将所有数据汇总。这就是窗口函数的用武之地，
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/bd67da55ea2f89167ec341134c4353bf.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bd67da55ea2f89167ec341134c4353bf.png)'
- en: Image by author
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: Here, *SUM()* as a Window Function performed calculations on a set of rows but
    unlike Aggregate Function it does not summarise the result set into a single row.
    Instead, all the rows (*PRODUCTNAME, PRODUCTLINE* and *QUANTITYINSTOCK* ) maintain
    their original form/identity and the calculated row(*TOTAL_QUANTITY* ) is added
    in the result set for every row.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，*SUM()* 作为窗口函数对一组行进行了计算，但与聚合函数不同的是，它不会将结果集总结为一行。相反，所有的行（*PRODUCTNAME, PRODUCTLINE*
    和 *QUANTITYINSTOCK*）保持其原始形式/身份，并且计算的行（*TOTAL_QUANTITY*）在每行的结果集中添加。
- en: '![](../Images/8071ad99b79e89cf4af44ca4e479ca99.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8071ad99b79e89cf4af44ca4e479ca99.png)'
- en: Image by author
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: Types of Window Functions
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 窗口函数的类型
- en: Honestly there is no official categorisation of Window Functions but based on
    the usage, we can briefly categorise them in 3 ways,
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 说实话，窗口函数没有官方分类，但根据使用情况，我们可以大致分为3种方式，
- en: '![](../Images/7b2246679c08af9fb929adf6d2aaa803.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7b2246679c08af9fb929adf6d2aaa803.png)'
- en: Image by author
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: '**Aggregate Functions** - Regular Aggregate Function can be used as a Window
    Function to calculate aggregations for numeric columns within window partitions
    such as running total sales, minimum or maximum value within partition etc.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聚合函数** - 常规的聚合函数可以用作窗口函数，以计算窗口分区内的数值列的聚合，如运行总销售额、分区内的最小值或最大值等。'
- en: '**Ranking Functions** - These functions return a ranking value for each row
    in a partition.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排名函数** - 这些函数为分区中的每一行返回一个排名值。'
- en: '**Value Functions** - These functions are useful for generating simple statistics
    or time series analysis.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**值函数** - 这些函数对于生成简单的统计数据或时间序列分析非常有用。'
- en: Syntax of a Window Function
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 窗口函数的语法
- en: The common syntax of a Window Function is,
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口函数的常见语法是，
- en: '![](../Images/7231354dacbfef3c29dd5f72b36ffd52.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7231354dacbfef3c29dd5f72b36ffd52.png)'
- en: Image by author
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: Before we go deeper into it; let’s first understand significance of each clause
    within it,
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: OVER() Clause
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*OVER()*clausespecifies a function as a Window Function and hence it must always
    be included in the statement. It defines a user-specified subset(a window)of rows
    on which the Window Function will be applied. If you do not supply anything inside
    *OVER()*, the Window Function will be applied on the entire result set.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Continuing to the above example,
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/d74f9f4fa90c0a31e3ff7e24bcd1aa5b.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: Image by author
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Here, since we supplied empty *OVER()* clause, Window Function *SUM(QUANTITYINSTOCK)*
    was applied to all the records of *PRODUCTLINE-* *Planes*, *Ships* and *Trains*
    resulting into 105816 as *TOTAL_QUANTITY*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: PARTITION BY Clause
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*PARTITION BY* is used with *OVER* clause. It divides the query result set
    into partitions or buckets based on user specified expression and then the Window
    Function applies on each partition or bucket.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: It’s optional, so if you do not specify *PARTITION BY* clause*,* thenthe function
    treats all rows as a single partition. Exactly what we did in the above example,
    we simply specified an empty *OVER()* clause without *PARTITION BY* clause and
    hence total quantity was calculated for all the *PRODUCTLINE*s.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: What happens if we do specify one,
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/2b43c6994f508b1ce2f5a98750af1a81.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: Image by author
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Since we are asking *OVER()* clause to partition the *TOTAL_QUANTITY* result-set
    based on *PRODUCYLINE*, now *SUM(QUANTITYINSTOCK)* will be calculating quantity
    in stock for each one of them .
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Now, what’s the deal with *PARTITION BY* and *GROUP BY* clauses? Are they alike
    or different?
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '***GROUP BY* Clause,**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: It groups multiple rows into summarised rows based on a single or multiple columns/expressions
    (returning 1 row for each group). In simpler words, it reduces the number of rows
    in your result set.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is used along with Aggregate Functions such as SUM(), AVG(), MAX() etc.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s placed after the *WHERE* clause but before *HAVING, ORDER BY* clauses.
    Common syntax is,
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/dc9b0ef034c60a5544de757233b80705.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: Image by author
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '***PARTITION BY* Clause,**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: It is used with *OVER()* clause in Window Function. It divides the query result
    set into partitions and then the Window Function applies on each partition.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*PARTITION BY* is similar to *GROUP BY* since it aggregates the result based
    on the expression; however, the major difference is, it will not reduce the rows
    of result-set.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s optional, so if you do not specify *PARTITION BY* clause*,* thenthe function
    treats all rows as a single partition.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common syntax is,
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/c17211dca2471d1fe6fa023ded8ac7b6.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: Image by author
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: If we need to figure out MIN and MAX values of MSRP for each PRODUCTLINE, then
    how will the result sets differ for both GROUP BY and PARTITION BY clause,
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/892742f271023e4c70a9a45996289c6e.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
- en: Image by author
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: ORDER BY Clause
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is used to sort the result set in either ascending or descending order within
    each partition of the result set. By default it’s in ascending order.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 它用于在结果集的每个分区内按升序或降序排序结果集。默认情况下，它是升序的。
- en: ROWS/RANGE Clause
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ROWS/RANGE 子句
- en: Now we already know that the key feature of a Window Function is to create a
    window or a partition of the result set using *PARTITION BY* clause and then perform
    calculations on each partition. What if we further want to create subsets within
    these partitions? Woah! partition within partition? Yes, that’s why we have *FRAME*
    clause.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道窗口函数的关键特性是使用*PARTITION BY*子句创建结果集的窗口或分区，然后在每个分区上执行计算。如果我们进一步想在这些分区内创建子集呢？哇！分区内的分区？是的，这就是我们需要*FRAME*子句的原因。
- en: '*FRAME* clause further defines a subset of the current partition. It uses *ROW*
    or *RANGE* to define the start and end points of this subset. It requires *ORDER
    BY* clause.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*FRAME*子句进一步定义了当前分区的一个子集。它使用*ROW*或*RANGE*来定义这个子集的起点和终点。它需要*ORDER BY*子句。'
- en: Frames are determined with respect to the current row, which simply means you
    take your current row’s location as a base point and with that reference you define
    your frame within the partition.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 框架是相对于当前行来确定的，这意味着你将当前行的位置作为基准点，并以此为参考定义你在分区内的框架。
- en: '*ROWS* — This defines the beginning and ending of the frame by specifying the
    number of rows that precede or follow the current row.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ROWS* — 通过指定当前行之前或之后的行数来定义框架的开始和结束。'
- en: '*RANGE* — Contrary to the *ROWS*, *RANGE* specifies the range of values compared
    to the value of the current row to define a frame within the partition.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*RANGE* — 与*ROWS*相对，*RANGE*指定与当前行值相比的值范围，以在分区内定义框架。'
- en: Generic syntax is,
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 通用语法是，
- en: '**{ROWS | RANGE} BETWEEN <frame_starting> AND <frame_ending>**'
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**{ROWS | RANGE} BETWEEN <frame_starting> AND <frame_ending>**'
- en: '![](../Images/3849aa0e5961ada988e8b08e89b4b5b5.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3849aa0e5961ada988e8b08e89b4b5b5.png)'
- en: Image by author
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Before we go any further, let’s understand some basic terms defining the frame.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步讨论之前，让我们先了解一些定义窗口的基本术语。
- en: '![](../Images/388516b7b3eee5b99234ba06166d2117.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/388516b7b3eee5b99234ba06166d2117.png)'
- en: 'Image source: [mysqltutorials](https://www.mysqltutorial.org)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[mysqltutorials](https://www.mysqltutorial.org)
- en: '*UNBOUNDED PRECEDING* - This specifies all the rows (starting from the first
    row) before the current row in the partition.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*UNBOUNDED PRECEDING* - 这指定了分区中当前行之前的所有行（从第一行开始）。'
- en: '*N PRECEDING* - This specifies ’N’ number of rows before your current row in
    the partition.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*N PRECEDING* - 这指定了分区中当前行之前的‘N’行数。'
- en: '*UNBOUNDED FOLLOWING* - This specifies all the rows after your current row
    (all the way to the very last row) in the partition.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*UNBOUNDED FOLLOWING* - 这指定了分区中当前行之后的所有行（一直到最后一行）。'
- en: '*M FOLLOWING* - This specifies ‘M’ number of rows below your current row in
    the partition.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*M FOLLOWING* - 这指定了分区中当前行下方的‘M’行数。'
- en: Let’s quickly understand this with an example,
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子快速理解一下，
- en: '[PRE5]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/93267b9084ee0c5dc812607836e8ab52.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/93267b9084ee0c5dc812607836e8ab52.png)'
- en: Image by author
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: '***ROWS BETWEEN 1 PRECEDING AND CURRENT ROW*** indicates the size of the frame
    on which *SUM(QUANTITYINSTOCK)* needs to be calculated within the partition.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '***ROWS BETWEEN 1 PRECEDING AND CURRENT ROW*** 表示在分区内需要计算*SUM(QUANTITYINSTOCK)*的框架大小。'
- en: '![](../Images/1b7de0a4150d4228d546a8e58868152f.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1b7de0a4150d4228d546a8e58868152f.png)'
- en: Image by author
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Here are some examples of *FRAME* clauses,
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些*FRAME*子句的示例，
- en: '*ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING* — This means consider
    the frame from the first row of the partition to the last row of the partition.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING* — 这意味着考虑从分区的第一行到分区的最后一行的框架。'
- en: '*ROWS BETWEEN UNBOUNDED PRECEDING AND 4 FOLLOWING* - This means consider the
    frame from the first row of the partition to 4 row after the current row.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ROWS BETWEEN UNBOUNDED PRECEDING AND 4 FOLLOWING* - 这意味着考虑从分区的第一行到当前行之后的4行的框架。'
- en: '*ROWS BETWEEN 4 PRECEDING AND 1 PRECEDING* - Frame will be the previous 4 rows
    up to 1 row before the current row.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ROWS BETWEEN 4 PRECEDING AND 1 PRECEDING* - 窗口将是当前行之前的4行到当前行之前的1行。'
- en: The default frame differs depending on the presence or the absence of the *ORDER
    BY* clause; with it the default frame is,
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 默认框架根据是否存在*ORDER BY*子句而有所不同；如果存在，默认框架是，
- en: '*{ROWS/RANGE} BETWEEN* **UNBOUNDED PRECEDING** *AND* **CURRENT ROW**'
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*{ROWS/RANGE} BETWEEN* **UNBOUNDED PRECEDING** *AND* **CURRENT ROW**'
- en: This means consider the frame as all the rows starting from the row number one
    to the current row in the partition.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着将窗口范围视为从第一行到当前行的所有行。
- en: Without *ORDER BY* clause, the default frame as,
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有*ORDER BY*子句，则默认的窗口范围为，
- en: '*{ROWS/RANGE}* BETWEEN **UNBOUNDED PRECEDING** AND **UNBOUNDED FOLLOWING**'
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*{ROWS/RANGE}* BETWEEN **UNBOUNDED PRECEDING** AND **UNBOUNDED FOLLOWING**'
- en: This simply means entire partition.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着整个分区。
- en: Defining a window alias,
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义窗口别名，
- en: If there are more than one window functions in your query which utilises the
    same window, then you might want to use window alias.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查询中有多个窗口函数使用相同的窗口，则可能需要使用窗口别名。
- en: '[PRE6]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The alternate way of writing the same query by using window alias is,
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用窗口别名编写相同查询的另一种方式是，
- en: '[PRE7]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 📌 **Side Note**
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 📌 **附注**
- en: During the query execution, Window Functions are performed on the result set,
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在查询执行过程中，窗口函数会在结果集中执行，
- en: '**After** *JOIN*, *WHERE* , *GROUP BY* and *HAVING* clauses and'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在** *JOIN*、*WHERE*、*GROUP BY* 和 *HAVING* 子句之后，'
- en: '**Before** the *ORDER BY* clause, *LIMIT* and *SELECT DISTINCT*.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在** *ORDER BY* 子句、*LIMIT* 和 *SELECT DISTINCT* 之前。'
- en: Conclusion
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: You might want to explore data from 100 different ways and Window Functions
    are just right for such analysis. This article was just the starter to understand
    basic syntax and clauses so that it’s not overwhelming to Window Function, it
    surely gets better with practice.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望从100种不同的方式中探索数据，而窗口函数正适合这种分析。本文只是了解基本语法和子句的入门，以便窗口函数不会显得过于复杂，通过练习，肯定会更好。
- en: Here is the detailed guide of most commonly used Window Functions,
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最常用窗口函数的详细指南，
- en: '[](/window-functions-a-must-know-for-data-engineers-and-data-scientists-4dd3e4ad0d2?source=post_page-----7256d8cf509a--------------------------------)
    [## Window Functions — A must know for Data Engineers and Data Scientists'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[窗口函数 — 数据工程师和数据科学家必知](https://www.example.org/window-functions-a-must-know-for-data-engineers-and-data-scientists-4dd3e4ad0d2?source=post_page-----7256d8cf509a--------------------------------)'
- en: Back To Basics | SQL fundamentals for beginners
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 回归基础 | 初学者的 SQL 基础
- en: towardsdatascience.com](/window-functions-a-must-know-for-data-engineers-and-data-scientists-4dd3e4ad0d2?source=post_page-----7256d8cf509a--------------------------------)
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](https://www.towardsdatascience.com/window-functions-a-must-know-for-data-engineers-and-data-scientists-4dd3e4ad0d2?source=post_page-----7256d8cf509a--------------------------------)'
- en: Some other useful resources,
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 一些其他有用的资源，
- en: '[SQL Window Function Cheat Sheet](https://learnsql.com/blog/sql-window-functions-cheat-sheet/)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQL 窗口函数速查表](https://learnsql.com/blog/sql-window-functions-cheat-sheet/)'
- en: '[Frame Clause](https://dev.mysql.com/doc/refman/8.0/en/window-functions-frames.html)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[窗口子句](https://dev.mysql.com/doc/refman/8.0/en/window-functions-frames.html)'
- en: '[HackerRank](https://www.hackerrank.com) or [LeetCode](https://leetcode.com)
    to practice basic/intermediate/advance SQL problems.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[HackerRank](https://www.hackerrank.com) 或 [LeetCode](https://leetcode.com)
    来练习基础/中级/高级 SQL 问题。'
- en: Happy Learning!
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 学习愉快！
