- en: How To Use Hugging Face Agents For NLP Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/what-are-hugging-face-agents-48c175bd33e3](https://towardsdatascience.com/what-are-hugging-face-agents-48c175bd33e3)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A step by step tutorial on how to use Transformers tools and agents.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@fmnobar?source=post_page-----48c175bd33e3--------------------------------)[![Farzad
    Mahmoodinobar](../Images/2d75209693b712300e6f0796bd2487d0.png)](https://medium.com/@fmnobar?source=post_page-----48c175bd33e3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----48c175bd33e3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----48c175bd33e3--------------------------------)
    [Farzad Mahmoodinobar](https://medium.com/@fmnobar?source=post_page-----48c175bd33e3--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----48c175bd33e3--------------------------------)
    ·11 min read·May 17, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ba93162cbfcba76e15991d90518ec9c6.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Alev Takil](https://unsplash.com/@alevisionco?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/3syTDiVAc7w?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: '[Hugging Face](https://huggingface.co), the open-source AI community for machine
    learning practitioners, recently integrated the concept of tools and agents into
    its popular [Transformers](https://huggingface.co/docs/transformers/index) library.
    If you have already used Hugging Face for Natural Language Processing (NLP), computer
    vision and audio/speech processing tasks, you may be wondering what value tools
    and agents add to the ecosystem. Agents add an arguably major level of convenience
    for the users — let me explain.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say I wanted to use a model from Hugging Face Hub to create translations
    from English to French. In such a case, I would need to do some research to find
    a good model, then figure out how to actually use that model and finally code
    it up and generate the translation. But what if you already had a Hugging Face
    expert at your disposal that already knew all of that? In other words, you would
    just tell the expert that you want to translate a sentence from English to French
    and then the expert would take care of finding a good model, coding up the problem
    and returning the results — and the expert is much faster than what you and I
    could do. That is exactly what agents do! We describe what we want to the agent
    in plain English and then the agent looks into the tools available in its toolbox
    and executes it! This is very similar to asking ChatGPT to translate a sentence
    and then ChatGPT takes care of the rest. But now, instead of being limited to
    the handful of models that ChatGPT uses (i.e. [Open AI models](https://platform.openai.com/docs/models),
    such as GPT 3.5 or GPT-4), agents have access to many models available on Hugging
    Face.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand what agents and tools do, let’s look at how this can
    be implemented.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@fmnobar/membership?source=post_page-----48c175bd33e3--------------------------------)
    [## Join Medium with my referral link'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Farzad (and other writers on Medium). Your membership
    fee directly supports Farzad and other…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@fmnobar/membership?source=post_page-----48c175bd33e3--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Transformers Agent — Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this section, I have mainly relied on the Hugging Face [documentations](https://huggingface.co/docs/transformers/transformers_agents)
    about agents and have implemented them using my own examples.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 — Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s start with importing a few libraries that we will be using for this exercise.
    Note that I have included the versions of these libraries in the results, in case
    you want to create an identical environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d7c4311342ce450bcfcf4e8117da175b.png)'
  prefs: []
  type: TYPE_IMG
- en: If your environment does not have one or some of these libraries, then you could
    get an error from the above code block. If so, you can go ahead and run the cell
    below to install the libraries. I have made the assumption that if you are reading
    this post, your environment has Python so it is not included below.
  prefs: []
  type: TYPE_NORMAL
- en: '**Pro Tip:** If you need to run one line of command, such as installing transformers
    in a Jupyter notebook or similar, you could use `!pip install transformers==4.29.0`.
    Instead of adding `!` to the beginning of each command line in the code block
    below, I have used the `%%sh`, which is a magic command indicating all the contents
    of this cell are to be run as commands.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Step 2 — Hugging Face Login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our environment is ready, we need to login to Hugging Face to have
    access to their inference API. This step requires a free Hugging Face token. If
    you do not have one, you can follow the instructions [in this link](https://huggingface.co/docs/api-inference/quicktour)
    (this took me less than 5 minutes) to create one for yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s log in.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/44710363755cd3adf6391107f6c7e7fa.png)'
  prefs: []
  type: TYPE_IMG
- en: Results indicate that login was successful.
  prefs: []
  type: TYPE_NORMAL
- en: In the next step, we will instantiate the agent. Note that Hugging Face supports
    various agents (which is essentially a large language model or LLM). Some are
    behind a pay wall, such as Open AI’s and some are open-source, such as BigCode
    and OpenAssistant. For this post, I have selected one of the free and open-source
    options from BigCode called [Starcoder](https://huggingface.co/bigcode/starcoder),
    since this will be more convenient for those getting started to experiment with
    such models. If you are interested in using other agents, Hugging Face has an
    easy-to-read tutorial linked [here](https://huggingface.co/docs/transformers/transformers_agents).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s continue to the next step and instantiate our agent.
  prefs: []
  type: TYPE_NORMAL
- en: Step 3 — Instantiate Agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code block below instantiates the [Starcoder](https://huggingface.co/bigcode/starcoder)
    agent from BigCode.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now that our agent is ready, let’s see what it can do!
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 — Run Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to ask the model to generate a picture as the very first task.
    What we do is we communicate what we want to the agent and the agent will make
    it happen. Let’s look at an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/436ed3317ac30b6bc7f7cf5bc687ac89.png)![](../Images/c7d8daa76491b03c67235df8c1d9c465.png)'
  prefs: []
  type: TYPE_IMG
- en: Picture of the ocean, generated by [Hugging Face Agent](https://huggingface.co/docs/transformers/transformers_agents)
  prefs: []
  type: TYPE_NORMAL
- en: That is quite interesting! Looking at the results, we can see the agent explains
    some of the steps it takes. For example, the agent uses the `image_generator`
    tool to generate the picture that we asked for.
  prefs: []
  type: TYPE_NORMAL
- en: We mentioned that our agent is an LLM and we know that outputs are randomly
    generated and are expected to change as we run the model again. Let’s see what
    we will get if we run the same task another time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/02613d8d9f290eab1c71a87bf5b75ef6.png)![](../Images/412f79f86460fc0ab9cb7de809367819.png)'
  prefs: []
  type: TYPE_IMG
- en: Picture of the ocean, generated by [Hugging Face Agent](https://huggingface.co/docs/transformers/transformers_agents)
  prefs: []
  type: TYPE_NORMAL
- en: As expected, the pictures are different. But what if after seeing the picture,
    we want to make a change to that picture? For example, it would be nice to see
    a ship in this picture. Let’s ask our agent to add a ship to the same picture.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a1ba2f0731af640cbfabd63afb77abd7.png)![](../Images/5f873bd61d02d66ea0c107b16da3c27c.png)'
  prefs: []
  type: TYPE_IMG
- en: Picture of the ocean and a ship, generated by [Hugging Face Agent](https://huggingface.co/docs/transformers/transformers_agents)
  prefs: []
  type: TYPE_NORMAL
- en: As we see, the agent used a different tool this time called `image_transform`,
    since it no longer needs to generate an entire image and rather it *transforms*
    the provided image by adding a ship to it. We can see the small ship in the top
    left side quadrant of the picture. Not bad at all!
  prefs: []
  type: TYPE_NORMAL
- en: But at this point you may be asking what is the agent actually doing? We will
    answer that question next.
  prefs: []
  type: TYPE_NORMAL
- en: Step 5 — What Do Agents Actually Do?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we learned earlier, agents are LLMs that are performing tasks given our provided
    prompts. In other words, agents receive our prompts and then based on what is
    being asked, the agents collect the tools they believe will be helpful and then
    run such a code. Hugging Face provides a way of looking at the agents’ code by
    adding `return_code=True` to our run command. In other words, we can ask the agent
    to just return the code block and then we can modify and/or run the code ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s re-run our command as follows and look at the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cc01e21595854b92c277bbb17e445740.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I have cleaned up and re-written what the agent returned as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Let’s run this code and look at the results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3e678b3f7c771224a1f761481528a691.png)![](../Images/8616f7dfbb1cc6941ba21ee00e96bac0.png)'
  prefs: []
  type: TYPE_IMG
- en: Picture of the ocean, generated by [Hugging Face Agent](https://huggingface.co/docs/transformers/transformers_agents)
  prefs: []
  type: TYPE_NORMAL
- en: That worked as expected. In other words, we no longer need to rely on the agent
    to create that code for us and we can directly use the `huggingface-tools/text-to-image`
    tool to generate pictures.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how agents pick their tools and work, let’s look at some
    additional tools.
  prefs: []
  type: TYPE_NORMAL
- en: Step 6 — Additional Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will cover a few examples of other tools that agents can
    use, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Image captioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Question answering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mixed Requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 6.1\. Image Captioning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a fun exercise. First, we will use the `text-to-image` tool to generate
    a picture of a toy car. Then we will save that picture and ask the agent to caption
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with creating a picture of a toy car.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bcb5e93f4585cd1af78f8d1af5c683f5.png)![](../Images/ef4960d58c10dccad1cfba66bb33a20c.png)'
  prefs: []
  type: TYPE_IMG
- en: Picture of a toy car, generated by [Hugging Face Agent](https://huggingface.co/docs/transformers/transformers_agents)
  prefs: []
  type: TYPE_NORMAL
- en: Then, I saved it to the local drive and then will read it using the [Python
    Imaging Library or PIL](https://pillow.readthedocs.io/en/latest/handbook/tutorial.html).
    After that, we will prompt the agent to caption that image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below is the code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/324ca2b43f12b7857cd02ad0e791ba9c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Look at the very last sentence in the bottom — That is a good caption! The
    agent is describing the car, which seems pretty accurate. In case you are curious
    about what is going on under the hood, let’s have the agent return the code to
    see what tools are being used and how, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4ea65270cf8084a0baee3ff1c912c344.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s clean up the code block as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: What the agent did was to load the `image-captioning` tool and then caption
    the image that we provided. Sounds straight forward! Let’s move on to the next
    example.
  prefs: []
  type: TYPE_NORMAL
- en: 6.2\. Question Answering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Question answering is self-explanatory but let’s make it more interesting. Instead
    of providing a paragraph to the agent and asking questions about the provided
    information, let’s provide an image and ask the agent about the content of the
    image.
  prefs: []
  type: TYPE_NORMAL
- en: 'I wrote a few lines in a word document and then saved it as a `*.jpg` image
    in my local. Let’s first use PIL to see the image as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3714c8286ca3c4512ad93a9891bc1fc4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the image has a few sentences about my imaginary friend in
    Seattle, named Jack. Next, let’s ask a question from our agent and see how it
    responds. I would like to ask the agent about Jack’s favorite color, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/07a67564facefa30e94c8b8464aff040.png)'
  prefs: []
  type: TYPE_IMG
- en: Once again, let’s look at the very last sentence in the bottom — That is pretty
    good! We can see that text extraction is not perfect, for example, it extracted
    Tesla to ‘tesia’ but still, the agent returned the relevant portion of the image,
    which answered our question.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see what tools exactly the agent used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d27992c81d5ef777b366714e68d22874.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s clean up the code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We can see that the agent used the `document-question-answering` tool and then
    asked the question in the form of a question answering task.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s see if the agent can perform translation.
  prefs: []
  type: TYPE_NORMAL
- en: 6.3\. Translation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This one is pretty straight forward. Let’s ask the agent to translate a sentence
    and then see what tools it uses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dac8673b6a482be55a5993b0c05f8b2f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Excellent! We see the result, which is the translation of the provided sentence
    in French. Let’s look what agent used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/66da63cc9c20655112efcb27870e8a60.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let me clean up the code first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: That looks pretty straight forward. The agent uses the `translation` tool and
    the agent recognized the source (`src_lang`) and target language (`tgt_lang`)
    correctly, based on what we asked it to do!
  prefs: []
  type: TYPE_NORMAL
- en: At this point, I was wondering whether the agent can handle more complicated
    tasks. We will look at that next.
  prefs: []
  type: TYPE_NORMAL
- en: 6.4\. Mixed Requests
  prefs: []
  type: TYPE_NORMAL
- en: What if we combine a question answering and translation? Let’s ask the agent
    what Jack’s favorite color is while asking that the answer must be returned in
    French.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0a861eb40b6caaf1f09d5c486e82a248.png)'
  prefs: []
  type: TYPE_IMG
- en: Look at the last sentence — that is great! We see that the agent first returned
    the English answer and then translates the response to French, as we asked it
    to!
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Agents and Tools are a powerful combination. I see agents benefiting both technical
    users (i.e. machine learning and AI practitioners) and also the non-technical
    users. For technical users, agents speed up the process — agents can help by selecting
    among many tools and return the code for the technical user to modify to their
    needs. On the other hand, non-technical users who are not familiar with machine
    learning, can simply ask what they want in plain English and the agent will take
    care of the rest.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you enjoyed this brief tutorial on agents and tools! If you are interested
    in learning more about implementing Natural Language Processing (NLP) tasks in
    Hugging Face, check out the post below.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/implement-nlp-tasks-using-hugging-face-77dfdcad65fd?source=post_page-----48c175bd33e3--------------------------------)
    [## Implement NLP Tasks Using Hugging Face'
  prefs: []
  type: TYPE_NORMAL
- en: An introductory tutorial to use Hugging Face for NLP tasks.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/implement-nlp-tasks-using-hugging-face-77dfdcad65fd?source=post_page-----48c175bd33e3--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for Reading!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you found this post helpful, please [follow me on Medium](https://medium.com/@fmnobar)
    and subscribe to receive my latest posts!
  prefs: []
  type: TYPE_NORMAL
- en: '*(All images, unless otherwise noted, are by the author.)*'
  prefs: []
  type: TYPE_NORMAL
