["```py\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n```", "```py\ndf = pd.read_csv(\"Data/Volve/VolveNN.csv\")\ndf\n```", "```py\n# Define feature variables (X) and target variable (y)\nX = df[['DTS', 'GR', 'NPHI', 'PEF', 'DT']]\ny = df['RHOB']\n```", "```py\n# Split the dataset into 70% training and 30% testing\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n```", "```py\nlen(X_train), len(X_test)\n```", "```py\n(16877, 7234)\n```", "```py\n# Define a simple Neural Network using Keras Sequential API\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(8, activation='relu'),\n    tf.keras.layers.Dense(1)\n])\n```", "```py\n# Compile the model\nmodel.compile(loss='mae',\n             optimizer='Adam',\n             metrics='mae')\n```", "```py\nhistory = model.fit(X_train, y_train, epochs=30, \n                    validation_data=(X_test, y_test))\n```", "```py\nplt.figure(figsize=(10, 8))\npd.DataFrame(history.history).plot()\nplt.xlabel('Epochs')\nplt.ylabel('Mean Absolute Error (MAE)')\n```", "```py\ny_pred = model.predict(X_test)\n```", "```py\n227/227 [==============================] - 0s 1ms/step\n```", "```py\nmae_1 = tf.keras.metrics.mae(y_test, tf.squeeze(y_pred)).numpy()\nmse_1 = np.sqrt(tf.keras.metrics.mse(y_test, tf.squeeze(y_pred)).numpy()\nmae_1, mse_1\n```", "```py\n(0.07578269, 0.11054294)\n```", "```py\ndef create_scatter_comparison(ytrue, ypreds):\n    # Auto calculate the min and max scales for the data\n    minscale = min(ytrue.min(), ypreds.min())*0.95\n    maxscale = max(ytrue.max(), ypreds.max())*1.05\n\n    plt.figure(figsize=(10, 10))\n    plt.scatter(ytrue, ypreds)\n\n    # Create a 1:1 relationship line\n    line_points = np.linspace(minscale, maxscale, 100) \n    plt.plot(line_points, line_points, c='red')\n\n    plt.xlim(minscale, maxscale)\n    plt.ylim(minscale, maxscale)\n    plt.xlabel('Actual Measurements')\n    plt.ylabel('Predicted Measurements')\n    plt.show()\n```", "```py\ncreate_scatter_comparison(y_test, y_pred)\n```", "```py\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\n\nX_train_s = scaler.fit_transform(X_train)\nX_test_s = scaler.transform(X_test)\n```", "```py\n# Create a model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(8, activation='relu'),\n    tf.keras.layers.Dense(1)\n])\n\n# Compile model\nmodel.compile(loss='mae',\n             optimizer='Adam',\n             metrics='mae')\n\n# Fit the model\nhistory = model.fit(X_train_s, y_train, epochs=30)\n```", "```py\ny_pred = model.predict(X_test_s)\n\nmae_1 = tf.keras.metrics.mae(y_test, tf.squeeze(y_pred)).numpy()\nrmse_1 = np.sqrt(tf.keras.metrics.mse(y_test, tf.squeeze(y_pred)).numpy()) \n```", "```py\n(0.029252911, 0.04554793)\n```"]