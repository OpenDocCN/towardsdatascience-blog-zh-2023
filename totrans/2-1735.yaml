- en: 'Python Pandas to Polars: Data Filtering'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/python-pandas-to-polars-data-filtering-a67ccb70a8b3](https://towardsdatascience.com/python-pandas-to-polars-data-filtering-a67ccb70a8b3)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You may need to make the transition soon
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://sonery.medium.com/?source=post_page-----a67ccb70a8b3--------------------------------)[![Soner
    Yıldırım](../Images/c589572e9d1ee176cd4f5a0008173f1b.png)](https://sonery.medium.com/?source=post_page-----a67ccb70a8b3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a67ccb70a8b3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a67ccb70a8b3--------------------------------)
    [Soner Yıldırım](https://sonery.medium.com/?source=post_page-----a67ccb70a8b3--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a67ccb70a8b3--------------------------------)
    ·5 min read·Apr 18, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e58c7f96ccd6dea3680769f176f614b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Daphné Be Frenchie](https://unsplash.com/@daphne_befrenchie?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/s/photos/filtering?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: I admire Pandas. I have been using it since the first day I started learning
    data science. Pandas has been more than enough for most of my tasks in data cleaning,
    preprocessing, and analysis.
  prefs: []
  type: TYPE_NORMAL
- en: The only issue I have with pandas is when working with large datasets. Pandas
    does in-memory analytics so its performance starts to go down when the data size
    becomes very large.
  prefs: []
  type: TYPE_NORMAL
- en: Another downside associated with data size is that some operations make intermediate
    copies. Hence, the dataset should be relatively smaller than the memory to be
    able to work efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: There are different alternatives to Pandas for such large datasets. One of the
    alternatives that has gained significant popularity recently is Polars.
  prefs: []
  type: TYPE_NORMAL
- en: There are dozens of articles that focus on the speed of polars compared to pandas
    but not much on the practical side to explain how to perform common data cleaning
    and manipulation operations with Polars.
  prefs: []
  type: TYPE_NORMAL
- en: In this series of articles, I will show you Polars versions of frequently used
    Pandas functions. The first topic is data filtering operations. Before we start
    on doing the examples, let’s briefly mention what polars has to offer.
  prefs: []
  type: TYPE_NORMAL
- en: What does polars offer?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Polars is a DataFrame library for Rust and Python.
  prefs: []
  type: TYPE_NORMAL
- en: Polars utilizes all available cores on your machine whereas pandas uses a single
    CPU core to execute the operations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polars is relatively lightweight than pandas and has no dependencies, which
    makes it quite faster to import polars. It takes 70 ms to import polars whereas
    it takes 520 ms for pandas.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polars does query optimization to reduce unnecessary memory allocations. It
    is also able to process queries partially or entirely in a streaming fashion.
    As a result, polars can handle datasets that are larger than the available RAM
    in your machine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data filtering with pandas and polars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will go through several examples to learn how to filter polars DataFrames.
    We will also see the pandas versions of the same operations to make the transition
    from pandas to polars easier.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s first create a DataFrame to work on. We will be using a sample dataset
    that I prepared with mock data. You can download it from my [datasets](https://github.com/SonerYldrm/datasets)
    repo.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/db0cbd6d20f2e2155b686dd61cc2dcef.png)'
  prefs: []
  type: TYPE_IMG
- en: The first 5 rows of the pandas DataFrame (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7dc8411e681cdf07bbd1e79847f35c73.png)'
  prefs: []
  type: TYPE_IMG
- en: The first 5 rows of the polars DataFrame (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Both pandas and polars have the same functions to read a csv file and display
    the first 5 rows of the DataFrame. Polars also shows the data types of the columns
    and shape of the output, which I think is an informative add-on.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 1: Filter by numeric values**'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s filter rows in which the price is higher than 750.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: I will only show the output of pandas or polars versions since they are the
    same.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d5bed42a2a0ea92464f2e487648ebf5b.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 2: Multiple conditions**'
  prefs: []
  type: TYPE_NORMAL
- en: Both pandas and polars support filtering by multiple conditions. We can combine
    the conditions with “and” and “or” logic.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s filter rows with a price of more than 750 and a store value of Violet.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0b6b43beba8ac2bf6df2ebc31d1fca8d.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 3: The isin method**'
  prefs: []
  type: TYPE_NORMAL
- en: The isin method of pandas can be used for comparing the row value to a list
    of values. It is quite useful when the condition consists of multiple values.
    The polars version of this method is “is_in”.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can select the rows for product groups PG1, PG2, and PG3 as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The first 5 rows of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dff9c5264521de9c741f46125b866269.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 4: Select a subset of columns**'
  prefs: []
  type: TYPE_NORMAL
- en: 'To select a subset of columns, we can pass a list of columns to both pandas
    and polars DataFrames as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The first 5 rows of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/65178e93c249dca7852f9f66f00ef6cd.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 5: Select a subset of rows**'
  prefs: []
  type: TYPE_NORMAL
- en: We can use the loc or iloc methods to select a subset of rows for pandas. In
    polars, we use a very similar approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example that selects the rows between 10th and 20th:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To select the same rows but only the first three columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If we want to select columns by names, we can use the loc method in pandas.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Example 6: Select columns by data type**'
  prefs: []
  type: TYPE_NORMAL
- en: We can also select columns that are of a particular data type. Let’s do an example
    that selects columns with 64 bit integer (i.e. int64) data type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The first 5 rows of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/165e912d2cd854acc76aeb84f2b51f4c.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: We have done several examples to compare filtering operations between pandas
    and polars. In general, polars is quite similar to pandas but follows a Spark
    SQL-like approach in some cases. If you are familiar with data cleaning and manipulation
    with Spark SQL, you will realize the similarities.
  prefs: []
  type: TYPE_NORMAL
- en: With that being said, considering the efficiency of polar when working with
    large datasets, it may soon become a strong candidate to replace pandas in data
    cleaning and manipulation tasks.
  prefs: []
  type: TYPE_NORMAL
- en: '*You can become a* [*Medium member*](https://sonery.medium.com/membership)
    *to unlock full access to my writing, plus the rest of Medium. If you already
    are, don’t forget to* [*subscribe*](https://sonery.medium.com/subscribe) *if you’d
    like to get an email whenever I publish a new article.*'
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading. Please let me know if you have any feedback.
  prefs: []
  type: TYPE_NORMAL
