- en: Simple tool to foster connection among employees
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/simple-tool-to-foster-connection-among-employees-82ef5c1353f5](https://towardsdatascience.com/simple-tool-to-foster-connection-among-employees-82ef5c1353f5)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Office hour
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Building a happy and connected team with the help of Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://zluvsand.medium.com/?source=post_page-----82ef5c1353f5--------------------------------)[![Zolzaya
    Luvsandorj](../Images/dd3bb91f8625a6fbe8fd26e56036ad29.png)](https://zluvsand.medium.com/?source=post_page-----82ef5c1353f5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----82ef5c1353f5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----82ef5c1353f5--------------------------------)
    [Zolzaya Luvsandorj](https://zluvsand.medium.com/?source=post_page-----82ef5c1353f5--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----82ef5c1353f5--------------------------------)
    ¬∑6 min read¬∑Feb 1, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: One positive thing COVID-19 facilitated was to push more companies adopt flexible
    working arrangements. This adoption meant more of us can continue working from
    home even when lockdowns are over. While this flexibility is awesome in so many
    ways, one potential downside is that you can‚Äôt bump into people like you would
    normally in office and have those casual spontaneous conversations which help
    build better rapport with colleagues and make you feel part of a team. In this
    post, I share one simple idea leveraging a little bit of programming skills to
    spark these conversations when not everyone is in office.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6d60419e5a151baddb56d551a7c55fd9.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Toa Heftiba](https://unsplash.com/@heftiba?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: üí° The idea
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So the idea is simple: On a regular basis, we randomly match groups of colleagues
    and encourage them to have casual conversations within the group. For instance,
    we randomly split all colleagues into group of 3 every week, assign one of them
    as the meeting organiser to book a 25-minute session in their calendar and encourage
    them to attend this session to catch up with each other. Or it can be a fortnightly
    walking catch ups among pairs as an initiative to look after wellbeing. This basic
    idea can be further adjusted and customised freely to suit the company culture.'
  prefs: []
  type: TYPE_NORMAL
- en: My current company organises one every week where we have weekly coffee catch
    ups with one another person either virtually or in-person. I have also heard of
    other companies that were organising bigger groups to have weekly coffee together
    in a nearby caf√© even before COVID-19\. So this idea can be helpful in fostering
    connections even if everyone is in office too!
  prefs: []
  type: TYPE_NORMAL
- en: In the remainder of the post, we will look at Python starter code on how to
    create random matches under simple constraints. We will start by looking at pairs
    then extend the code to suit different group size. Although the example is in
    Python, the idea can be translated to other languages too.
  prefs: []
  type: TYPE_NORMAL
- en: üì¶ Dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will assume we want to organise this team building initiative
    for the entire company with 100 employees. Depending on the size and structure
    of the company, this activity can involve all colleagues across the organisation
    or colleagues in specific departments.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by importing libraries and creating a synthetic dataset of 100
    employees. It‚Äôs common to have regular catch ups with your managers or direct
    reports, so we will add add a simple constraint to not match managers and their
    direct reports together since they have enough interactions anyway. So we will
    assign managers to employees.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7e8c5f9669b5128bd363914eb6a25737.png)'
  prefs: []
  type: TYPE_IMG
- en: Awesome, we will now initialise a dataframe to hold history.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e61a56981ed8368c43b753ab60c62dcf.png)'
  prefs: []
  type: TYPE_IMG
- en: Tracking history of matches will be useful to ensure that the same pairs are
    not matched again too soon. This way, everyone gets an opportunity to interact
    with as many different people as possible. To do that, we will use history of
    matches as additional constraints after first match.
  prefs: []
  type: TYPE_NORMAL
- en: üå∏ Pairs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start with the simplest form, a pair: a group of two. Let‚Äôs build a
    `Matcher` object that find matches of two under the following constraints:'
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏è Exclude colleague‚Äôs direct report or manager
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏è Exclude those who were matched to a colleague in the past 10 matches
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4ce2283328856d2b0efd90fd989390cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We just created our first match for 50 pairs. Let‚Äôs pick a sample employee:
    *‚ÄòNoah Rhodes‚Äô* and check his constraints:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e3e172ed81fc882a8ea06e2fc13f85f6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we haven‚Äôt done any matches, the constraint should only be based on his
    manager and direct reports. Let‚Äôs check this information in the employee dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e38dd8094ef7933a2d4aeb0f619fe689.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Awesome, the constraints make sense. Let‚Äôs see who Noah get matched to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e835adaed973a8dc1f3753baf2c33735.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This match satisfies the constraints. Now, we will do 5 more matches for the
    next 5 weeks and check if constraints are behaving as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/346d8a805d3e085132cec141d97c2dd9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let‚Äôs check Noah‚Äôs constraints again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5ca28769b0b0587494549c7fe0aca678.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have a few new constraints. These new constraints should reflect historic
    matches. Let‚Äôs check that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/76ab33b2f3840aac0f428907ecc5cd1a.png)'
  prefs: []
  type: TYPE_IMG
- en: Cool, so the constraint is working as expected. It makes sense that *‚ÄòBrittney
    Phillips‚Äô* is not part of the constraint yet as this was the most recent match.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having done some checks, we will initialise the `Matcher` object again and
    run it for half a year:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e6272d3d8ad907cb45dc11b7f7603b0c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that in some instances there was trouble finding matches hence had
    to restart the random matching again. Currently, the `Matcher` is set such that
    if we have an odd number of employees, one person will be allocated a default
    value: *‚ÄòGo for a walk‚Äô* so that the person who couldn‚Äôt get a match get some
    exercise. This default value can be anything!'
  prefs: []
  type: TYPE_NORMAL
- en: Having done a simpler version, let‚Äôs tweak the `Matcher` object such that it
    can cater different group size.
  prefs: []
  type: TYPE_NORMAL
- en: üçÄ Groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following shows one way we can extend the code to be more flexible to suit
    different group size. While there are different ways to treat when the number
    of employees is not divisible by the group size, we have chosen one of the simpler
    options to pad with default values until the number of records become divisible.
    For instance, there is one odd person when we try to split 100 employees into
    groups of three. In this case, we will pad with a default value: *‚ÄòGo for a walk‚Äô*
    twice to make the number of records to 102, a number divisible by 3\. To prevent
    one person being matches to two default values, we can make sure that any group
    is one default value only using constraints. So these two smaller groups (i.e.
    pairs) can have a walking meeting or video call.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/341f073c48d46693b7ad9b6edcd71042.png)'
  prefs: []
  type: TYPE_IMG
- en: Although we have selected a group of 3 in this example, the object can deal
    with higher numbers too.
  prefs: []
  type: TYPE_NORMAL
- en: Voila, that was it for this post! I hope this starter code is useful to build
    upon and save you time if you want to propose a version of this idea to implement
    in your organisation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9f9bbdf73e97653c4d00e8d7d6ccbaab.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Shaurya Sagar](https://unsplash.com/@shauryasagar?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'Thank you for reading this article. If you are interested, here are links to
    some of my other posts:'
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏èÔ∏è [From ML Model to ML Pipeline](/from-ml-model-to-ml-pipeline-9f95c32c6512)
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏èÔ∏è [Explaining Scikit-learn models with SHAP](/explaining-scikit-learn-models-with-shap-61daff21b12a)
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏èÔ∏è [4 simple tips for plotting multiple graphs in Python](/4-simple-tips-for-plotting-multiple-graphs-in-python-38df2112965c)
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏è [Prettifying pandas DataFrames](/prettifying-pandas-dataframes-75c1a1a6877d)
  prefs: []
  type: TYPE_NORMAL
- en: ‚óº [Simple data visualisations in Python that you will find useful](/simple-data-visualisations-in-python-that-you-will-find-useful-5e42c92df51e)Ô∏è
  prefs: []
  type: TYPE_NORMAL
- en: ‚óºÔ∏è [6 simple tips for prettier and customised plots in Seaborn (Python)](/6-simple-tips-for-prettier-and-customised-plots-in-seaborn-python-22f02ecc2393)
  prefs: []
  type: TYPE_NORMAL
- en: Bye for now üèÉ üí®
  prefs: []
  type: TYPE_NORMAL
