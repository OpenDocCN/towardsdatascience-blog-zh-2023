["```py\n#retreive data\naws s3 cp s3://sagemaker-sample-files/datasets/tabular/uci_abalone/train_csv/abalone_dataset1_train.csv .\n```", "```py\nmodel_path = f's3://{default_bucket}/{s3_prefix}/xgb_model'\n\nimage_uri = sagemaker.image_uris.retrieve(\n    framework=\"xgboost\",\n    region=region,\n    version=\"1.0-1\",\n    py_version=\"py3\",\n    instance_type=training_instance_type,\n)\n\nxgb_train = Estimator(\n    image_uri=image_uri,\n    instance_type=training_instance_type,\n    instance_count=1,\n    output_path=model_path,\n    sagemaker_session=sagemaker_session,\n    role=role\n)\n\nxgb_train.set_hyperparameters(\n    objective=\"reg:linear\",\n    num_round=50,\n    max_depth=5,\n    eta=0.2,\n    gamma=4,\n    min_child_weight=6,\n    subsample=0.7,\n    silent=0,\n)\n\nxgb_train.fit({'train': train_input})\n```", "```py\nmodel_artifacts = xgb_train.model_data\nmodel_artifacts # model.tar.gz artifact \n```", "```py\n%%sh\n\ns3_bucket='sagemaker-us-east-1-474422712127'\n\nfor i in {0..1}\ndo\n  aws s3 cp model.tar.gz s3://$s3_bucket/mme-xgboost/xgboost-$i.tar.gz \ndone\n```", "```py\nfrom time import gmtime, strftime\nmodel_name = 'mme-source' + strftime(\"%Y-%m-%d-%H-%M-%S\", gmtime())\n\nprint('Model name: ' + model_name)\nprint('Model data Url: ' + model_url)\n\ncreate_model_response = client.create_model(\n    ModelName=model_name,\n    Containers=[\n        {\n            \"Image\": image_uri,\n            \"Mode\": \"MultiModel\",\n            \"ModelDataUrl\": model_url\n        }\n    ],\n    ExecutionRoleArn=sagemaker.get_execution_role(),\n)\nprint(\"Model Arn: \" + create_model_response[\"ModelArn\"])\n```", "```py\n#Step 2: EPC Creation\nxgboost_epc_name = \"mme-source\" + strftime(\"%Y-%m-%d-%H-%M-%S\", gmtime())\nendpoint_config_response = client.create_endpoint_config(\n    EndpointConfigName=xgboost_epc_name,\n    ProductionVariants=[\n        {\n            \"VariantName\": \"xgboostvariant\",\n            \"ModelName\": model_name,\n            \"InstanceType\": \"ml.m5.xlarge\",\n            \"InitialInstanceCount\": 1,\n            #\"Environment\": {} \n        },\n    ],\n)\nprint(\"Endpoint Configuration Arn: \" + endpoint_config_response[\"EndpointConfigArn\"])\n```", "```py\n#Step 3: EP Creation\nendpoint_name = \"mme-source\" + strftime(\"%Y-%m-%d-%H-%M-%S\", gmtime())\ncreate_endpoint_response = client.create_endpoint(\n    EndpointName=endpoint_name,\n    EndpointConfigName=xgboost_epc_name,\n)\nprint(\"Endpoint Arn: \" + create_endpoint_response[\"EndpointArn\"])\n```", "```py\nimport boto3\n\nresp = runtime.invoke_endpoint(EndpointName=endpoint_name, Body=b'.345,0.224414,.131102,0.042329,.279923,-0.110329,-0.099358,0.0', \n                           ContentType='text/csv', TargetModel = \"xgboost-1.tar.gz\")\n\nprint(resp['Body'].read())\n```", "```py\nclass BotoClient:\n    def __init__(self, host):\n\n        #Consider removing retry logic to get accurate picture of failure in locust\n        config = Config(\n            retries={\n                'max_attempts': 100,\n                'mode': 'standard'\n            }\n        )\n\n        self.sagemaker_client = boto3.client('sagemaker-runtime',config=config)\n        self.endpoint_name = host.split('/')[-1]\n        self.region = region\n        self.content_type = content_type\n        self.payload = b'.345,0.224414,.131102,0.042329,.279923,-0.110329,-0.099358,0.0'\n```", "```py\n#model that receives more traffic\n    def sendPopular(self):\n\n        request_meta = {\n            \"request_type\": \"InvokeEndpoint\",\n            \"name\": \"SageMaker\",\n            \"start_time\": time.time(),\n            \"response_length\": 0,\n            \"response\": None,\n            \"context\": {},\n            \"exception\": None,\n        }\n        start_perf_counter = time.perf_counter()\n        try:\n            response = self.sagemaker_client.invoke_endpoint(\n                EndpointName=self.endpoint_name,\n                Body=self.payload,\n                ContentType=self.content_type,\n                TargetModel = 'xgboost-0.tar.gz'\n            )\n            response_body = response[\"Body\"].read()\n        except Exception as e:\n            request_meta['exception'] = e\n\n        request_meta[\"response_time\"] = (time.perf_counter() - start_perf_counter) * 1000\n\n        events.request.fire(**request_meta)\n```", "```py\n#model that receives rest of traffic\n    def sendRest(self):\n\n        request_meta = {\n            \"request_type\": \"InvokeEndpoint\",\n            \"name\": \"SageMaker\",\n            \"start_time\": time.time(),\n            \"response_length\": 0,\n            \"response\": None,\n            \"context\": {},\n            \"exception\": None,\n        }\n        start_perf_counter = time.perf_counter()\n\n        try:\n            response = self.sagemaker_client.invoke_endpoint(\n                EndpointName=self.endpoint_name,\n                Body=self.payload,\n                ContentType=self.content_type,\n                TargetModel = 'xgboost-1.tar.gz'\n            )\n            response_body = response[\"Body\"].read()\n        except Exception as e:\n            request_meta['exception'] = e\n\n        request_meta[\"response_time\"] = (time.perf_counter() - start_perf_counter) * 1000\n\n        events.request.fire(**request_meta)\n```", "```py\nf'xgboost-{random.randint(0,4)}.tar.gz' #specifies 5 models to receive traffic in method\n```", "```py\nclass MyUser(BotoUser):\n\n    #This model is 3 times more likely to receive traffic\n    @task(3)\n    def send_request(self):\n        self.client.sendPopular()\n\n    @task\n    def send_request_major(self):\n        self.client.sendRest()\n```", "```py\n#replace with your endpoint name in format https://<<endpoint-name>>\nexport ENDPOINT_NAME=https://$1\n\nexport REGION=us-east-1\nexport CONTENT_TYPE=text/csv\nexport USERS=200\nexport WORKERS=40\nexport RUN_TIME=2mg\nexport LOCUST_UI=false # Use Locust UI\n\n#replace with the locust script that you are testing, this is the locust_script that will be used to make the InvokeEndpoint API calls. \nexport SCRIPT=locust_script.py\n\n#make sure you are in a virtual environment\n#. ./venv/bin/activate\n\nif $LOCUST_UI ; then\n    locust -f $SCRIPT -H $ENDPOINT_NAME --master --expect-workers $WORKERS -u $USERS -t $RUN_TIME --csv results &\nelse\nlocust -f $SCRIPT -H $ENDPOINT_NAME --master --expect-workers $WORKERS -u $USERS -t $RUN_TIME --csv results --headless &\nfi\n\nfor (( c=1; c<=$WORKERS; c++ ))\ndo \n    locust -f $SCRIPT -H $ENDPOINT_NAME --worker --master-host=localhost &\ndone\n```", "```py\n./distributed.sh <endpoint_name>\n```"]