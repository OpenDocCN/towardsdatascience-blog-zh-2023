- en: How to deploy a Panel app to Hugging Face using Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-deploy-a-panel-app-to-hugging-face-using-docker-6189e3789718](https://towardsdatascience.com/how-to-deploy-a-panel-app-to-hugging-face-using-docker-6189e3789718)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 5 simple steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://sophiamyang.medium.com/?source=post_page-----6189e3789718--------------------------------)[![Sophia
    Yang, Ph.D.](../Images/c133f918245ea4857dc46df3a07fc2b1.png)](https://sophiamyang.medium.com/?source=post_page-----6189e3789718--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6189e3789718--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6189e3789718--------------------------------)
    [Sophia Yang, Ph.D.](https://sophiamyang.medium.com/?source=post_page-----6189e3789718--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6189e3789718--------------------------------)
    ·5 min read·Jan 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: By [Sophia Yang](https://twitter.com/sophiamyang) and [Marc Skov Madsen](https://twitter.com/MarcSkovMadsen)
  prefs: []
  type: TYPE_NORMAL
- en: Do you wish to deploy a Panel app to Hugging Face but don’t know how? With five
    simple steps, we can easily deploy our Panel app to Hugging Face using Docker.
    This article will walk you through this process step by step. By the end of this
    article, you should be able to deploy your own app as shown below on Hugging Face.
    It’s super easy and it’s free. What are you waiting for? Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/37a77f74d355a73e70094a5b74a72734.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Panel app hosted on Hugging Face: [https://huggingface.co/spaces/sophiamyang/panel_example](https://huggingface.co/spaces/sophiamyang/panel_example)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Standalone app link: [https://sophiamyang-panel-example.hf.space/app](https://sophiamyang-panel-example.hf.space/app)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Five steps to deploy a Panel app to Hugging Face
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Step 1:** [https://huggingface.co/spaces](https://huggingface.co/spaces)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to [https://huggingface.co/spaces](https://huggingface.co/spaces) and click
    “Create new Space”
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4465a2567cc3d4c45118cabd7d6b4923.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Step 2: Create a new space**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Give it a “Space name”. Here I call it “panel_example”. Select Docker as the
    Space SDK, and then click “Create Space”.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d5ad60e769ec646ccae8bbacef34a78a.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Step 3: Clone repo**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Clone the Hugging Face repo in your command line (please remember to change
    the path to your own user name and Space name):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now you should see a “panel_example” directory in your computer with just a
    README.md file in it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 4: Create three files**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let’s create three files in this folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app.py` is the file for our Panel app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can copy the app.py file from: [https://huggingface.co/spaces/sophiamyang/panel_example/blob/main/app.py](https://huggingface.co/spaces/sophiamyang/panel_example/blob/main/app.py)'
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about how to create a Panel app, check out our previous blog post
    on [the easiest way to create an interactive dashboard in Python](/the-easiest-way-to-create-an-interactive-dashboard-in-python-77440f2511d1?sk=e1ea8c40c090cdbe7689333267f73b25)
    and [3 ways to build a Panel visualization dashboard](https://sophiamyang.medium.com/3-ways-to-build-a-panel-visualization-dashboard-6e14148f529d?sk=2cd93ae39586305bae8cfaead2bf7bb4).
  prefs: []
  type: TYPE_NORMAL
- en: '`requirements.txt` defines the required packages for our Panel app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We only need two packages for our Panel app: panel and hvplot. Thus, we only
    include these two packages in our [requirements.txt](https://huggingface.co/spaces/sophiamyang/panel_interactive/blob/main/requirements.txt).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`Dockerfile` lists all the commands we would like Docker to run in order to
    build and run an image as a container. To learn more about Docker, check out this
    [video](https://www.youtube.com/watch?v=0H2miBK_gAk).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this Dockerfile, we specify the base image from `python:3.9`, set the working
    directory as `/code`, copy the `requirements.txt` file to the container, run `pip
    install` to install packages into containers, copy every file in the directory
    to the container, and then CMD provides the command to run our Panel app for the
    container. Note that normally to serve a Panel app, we run `panel serve app.py`.
    In this file, we break down the command into a list of strings. We also need to
    define the address and the port since the Hugging Face uses port 7860 as the default.
    We also need to define the flag `allow-websocket-origin` to allow the connection
    to server websocket.
  prefs: []
  type: TYPE_NORMAL
- en: '! Important: please remember change ​​sophiamyang-panel-example.hf.space to
    YOURUSERNAME-SPACENAME.hf.space.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 5:** Commit all the changes and push the changes using git:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now you should see these files on your Hugging Face Space.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0c89e3759067eed9d7639ecce81283ae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And after a few minutes of Hugging Face’s hard work in building our app, our
    Panel app will show up in the App tab and you can find the standalone app link
    here: [https://sophiamyang-panel-example.hf.space/app](https://sophiamyang-panel-example.hf.space/app)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/37a77f74d355a73e70094a5b74a72734.png)'
  prefs: []
  type: TYPE_IMG
- en: How to run Docker locally? (optional step)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you are developing your app, you might want to run your app via Docker locally
    before deploying to Hugging Face. In step 4, `app.py`and `requirements.txt` are
    the same as above. However, we do need to make a tiny change to the `Dockerfile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '! Important: we need to change ​​sophiamyang-panel-example.hf.space to 0.0.0.0:7860
    when we run Docker locally. Alternatively, a **better** way is to add 0.0.0.0:7860
    to the allowed WebSockets in addition to the Hugging Face URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To use Docker locally, we only need to know three commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: First, let’s make sure we are in the project directory. And then we run `docker
    build -t panel-image .` to build a Docker image based on the files in this directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Second, let’s run this Docker image: `docker run --name panel-container -p
    7860:7860 panel-image`. Now you should see your app running in 0.0.0.0: 7860.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you would like to make any changes to your files, you will need to remove
    the container: `docker rm panel-container`docker rm panel-container and then repeat
    the first two commands we just mentioned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can we serve multiple Panel apps at the same time on Hugging Face?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Yes, you absolutely can. Check out my example here: [https://huggingface.co/spaces/sophiamyang/Panel_apps](https://huggingface.co/spaces/sophiamyang/Panel_apps)
    and its corresponding standalone app link here: [https://sophiamyang-panel-apps.hf.space/](https://sophiamyang-panel-apps.hf.space/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/712b5fa5f6fdae723a2d4aed0d7bfc27.png)'
  prefs: []
  type: TYPE_IMG
- en: When we click on one of the apps, for example, “Text Analysis”, we can see our
    text analysis app showing up on Hugging Face.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b18b0f21093ff66368b4b247150756bb.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Conclusion**'
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we demonstrated how to deploy a Panel app to Hugging Face using
    Docker with five simple steps. Give it a try! If you have questions or want to
    share your app with the Panel community, check out [https://discourse.holoviz.org/.](https://discourse.holoviz.org/.)
  prefs: []
  type: TYPE_NORMAL
- en: '**References**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://panel.holoviz.org/](https://panel.holoviz.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://huggingface.co/docs/hub/spaces-sdks-docker-first-demo](https://huggingface.co/docs/hub/spaces-sdks-docker-first-demo)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/watch?v=0H2miBK_gAk](https://www.youtube.com/watch?v=0H2miBK_gAk)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blog post [the easiest way to create an interactive dashboard in Python](/the-easiest-way-to-create-an-interactive-dashboard-in-python-77440f2511d1?sk=e1ea8c40c090cdbe7689333267f73b25)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blog post [3 ways to build a Panel visualization dashboard](https://sophiamyang.medium.com/3-ways-to-build-a-panel-visualization-dashboard-6e14148f529d?sk=2cd93ae39586305bae8cfaead2bf7bb4)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: . . .
  prefs: []
  type: TYPE_NORMAL
- en: By [Sophia Yang](https://twitter.com/sophiamyang) and [Marc Skov Madsen](https://twitter.com/MarcSkovMadsen)
    on January 6, 2022.
  prefs: []
  type: TYPE_NORMAL
- en: Sophia Yang is a Senior Data Scientist at Anaconda. Connect with me on [LinkedIn](https://www.linkedin.com/in/sophiamyang/),
    [Twitter](https://twitter.com/sophiamyang), and [YouTube](https://www.youtube.com/SophiaYangDS)
    and join the DS/ML [Book Club](https://dsbookclub.github.io/) ❤️
  prefs: []
  type: TYPE_NORMAL
