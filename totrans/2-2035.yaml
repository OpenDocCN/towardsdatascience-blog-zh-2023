- en: The Minimalist’s Guide to Experiment Tracking with DVC
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 《极简主义者的 DVC 实验跟踪指南》
- en: 原文：[https://towardsdatascience.com/the-minimalists-guide-to-experiment-tracking-with-dvc-f07e4636bdbb](https://towardsdatascience.com/the-minimalists-guide-to-experiment-tracking-with-dvc-f07e4636bdbb)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-minimalists-guide-to-experiment-tracking-with-dvc-f07e4636bdbb](https://towardsdatascience.com/the-minimalists-guide-to-experiment-tracking-with-dvc-f07e4636bdbb)
- en: '![](../Images/40caa436b9fce122c4b24ed80894039f.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/40caa436b9fce122c4b24ed80894039f.png)'
- en: Photo by Zarak Khan from [pexels.com](https://www.pexels.com/photo/a-minimalist-workspace-4256211/)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 Zarak Khan 提供，来源于 [pexels.com](https://www.pexels.com/photo/a-minimalist-workspace-4256211/)
- en: The bare minimum guide to get you started with experiment tracking
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始进行实验跟踪的最低要求指南
- en: '[](https://eryk-lewinson.medium.com/?source=post_page-----f07e4636bdbb--------------------------------)[![Eryk
    Lewinson](../Images/56e09e19c0bbfecc582da58761d15078.png)](https://eryk-lewinson.medium.com/?source=post_page-----f07e4636bdbb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f07e4636bdbb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f07e4636bdbb--------------------------------)
    [Eryk Lewinson](https://eryk-lewinson.medium.com/?source=post_page-----f07e4636bdbb--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://eryk-lewinson.medium.com/?source=post_page-----f07e4636bdbb--------------------------------)[![Eryk
    Lewinson](../Images/56e09e19c0bbfecc582da58761d15078.png)](https://eryk-lewinson.medium.com/?source=post_page-----f07e4636bdbb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f07e4636bdbb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f07e4636bdbb--------------------------------)
    [Eryk Lewinson](https://eryk-lewinson.medium.com/?source=post_page-----f07e4636bdbb--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f07e4636bdbb--------------------------------)
    ·6 min read·May 15, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f07e4636bdbb--------------------------------)
    ·阅读时间 6 分钟·2023年5月15日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: This article is the third part of a series demonstrating how to utilize DVC
    and its VS Code extension for ML experimentation. In the [first part](/turn-vs-code-into-a-one-stop-shop-for-ml-experiments-49c97c47db27),
    I illustrated the entire setup of an ML project and demonstrated how to track
    and evaluate experiments within VS Code. In the [second part](/enhance-your-ml-experimentation-workflow-with-real-time-plots-434106b1a1c2),
    I showed how to use different types of plots, including live-plots, for experiment
    evaluation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本文是一个系列文章的第三部分，展示了如何利用 DVC 及其 VS Code 插件进行机器学习实验。在 [第一部分](/turn-vs-code-into-a-one-stop-shop-for-ml-experiments-49c97c47db27)
    中，我展示了一个机器学习项目的完整设置，并演示了如何在 VS Code 中跟踪和评估实验。在 [第二部分](/enhance-your-ml-experimentation-workflow-with-real-time-plots-434106b1a1c2)
    中，我展示了如何使用不同类型的图，包括实时图，用于实验评估。
- en: After reading these articles, you may be interested in using DVC for your next
    project. However, you may have thought that setting it up would require a lot
    of work, for example, with defining pipelines and versioning data. Perhaps for
    your next quick experiment, this would be an overkill, and you decided not to
    give it a try. That would be a pity!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完这些文章后，你可能有兴趣在下一个项目中使用 DVC。然而，你可能会认为设置它需要大量工作，例如定义管道和数据版本控制。也许对于你下一个快速实验来说，这可能有些过于复杂，你决定不尝试。那将是很可惜的！
- en: And while there is a very good reason for having all of those steps there —
    your project will be fully tracked and reproducible —I understand that sometimes
    we are under a lot of pressure and need to experiment and iterate quickly. That
    is why in this article I will show you the bare minimum that is required to start
    tracking your experiments with DVC.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些步骤有充分的理由存在——你的项目将完全被跟踪并可重现——我理解有时我们会面临很大的压力，需要快速进行实验和迭代。因此，在本文中，我将向你展示开始使用
    DVC 跟踪实验所需的最低要求。
- en: From zero to experiment tracking in a few lines of code
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从零开始，用几行代码进行实验跟踪
- en: Before we dive into coding, I wanted to provide a bit more context about the
    toy example we will be using. The goal is to build a model that will identify
    fraudulent credit card transactions. The dataset (available on [Kaggle](https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud))
    can be considered highly imbalanced, with only 0.17% of the observations belonging
    to the positive class.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写代码之前，我想提供一些关于我们将使用的示例的背景信息。目标是构建一个模型，以识别欺诈信用卡交易。这个数据集（可以在 [Kaggle](https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud)
    上找到）被认为高度不平衡，只有 0.17% 的观察值属于正类。
- en: As I promised in the introduction, we will cover the bare minimum scenario in
    which you can almost immediately start tracking your experiments. Besides some
    standard libraries, we will be using the `dvc` and `dvclive` libraries, as well
    as the [DVC VS Code extension](https://marketplace.visualstudio.com/items?itemName=Iterative.dvc).
    The last one is not a hard requirement. We can inspect the tracked experiments
    from the command line. However, I prefer to use the special tabs integrated into
    the IDE.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在引言中承诺的那样，我们将涵盖一个基本的场景，在这个场景中，你几乎可以立即开始跟踪你的实验。除了某些标准库，我们将使用`dvc`和`dvclive`库，以及[DVC
    VS Code扩展](https://marketplace.visualstudio.com/items?itemName=Iterative.dvc)。最后一个不是硬性要求。我们可以从命令行检查跟踪的实验。然而，我更喜欢使用集成到IDE中的特殊标签。
- en: Let’s start by creating the bare-bones script. In this short script, we load
    the data, split it into training and test sets, fit the model, and evaluate its
    performance on the test set. You can see the entire script in the snippet below.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个基本的脚本开始。在这个简短的脚本中，我们加载数据，将其分为训练集和测试集，拟合模型，并评估其在测试集上的表现。你可以在下面的代码片段中看到整个脚本。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Running the script returns the following output:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本将返回以下输出：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: I don’t think I need to convince you that writing down those numbers on a piece
    of paper or in a spreadsheet is not the best way to track your experiments. This
    is especially true because we not only need to track the output, but it also crucial
    to know which code and potentially hyperparameters resulted in that score. Without
    knowing that, we can never reproduce the results of our experiments.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我不认为我需要说服你将这些数字写在纸上或电子表格中并不是跟踪实验的最佳方式。这尤其如此，因为我们不仅需要跟踪输出，还需要知道哪些代码和潜在的超参数导致了这个分数。如果不知道这些，我们永远无法重现实验结果。
- en: Having said that, let’s implement experiment tracking with DVC. First, we need
    to initialize DVC. We can do so by running the following code in the terminal
    (within our project’s root directory).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这里，让我们使用DVC来实现实验跟踪。首先，我们需要初始化DVC。我们可以通过在终端中（在项目的根目录下）运行以下代码来完成。
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Then, we need to slightly modify our code using `dvclive`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要稍微修改一下我们的代码，使用`dvclive`。
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The only part that has changed is the evaluation. Using the `Live` context,
    we are logging the parameters of the model (stored in the `train_params` dictionary)
    and the same scores that we have printed before. We can track [other things as
    well](https://dvc.org/doc/dvclive/how-it-works), for example, plots or images.
    To help you get started even faster, you can find a lot of useful code snippets
    in the [documentation](https://dvc.org/doc/dvclive/live) of `dvclive` or on the
    Setup screen of the DVC extension.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一改变的部分是评估。使用`Live`上下文，我们正在记录模型的参数（存储在`train_params`字典中）以及我们之前打印的相同分数。我们还可以跟踪[其他内容](https://dvc.org/doc/dvclive/how-it-works)，例如，图表或图像。为了帮助你更快上手，你可以在`dvclive`的[文档](https://dvc.org/doc/dvclive/live)中或在DVC扩展的设置屏幕上找到很多有用的代码片段。
- en: Before looking into the results, it makes sense to mention that `dvclive` expects
    each run to be tracked by Git. This means that it will save each run to the same
    path and overwrite the results each time. We specified `save_dvc_exp=True` to
    auto-track as a DVC experiment. Behind the scenes, DVC experiments are Git commits
    that DVC can identify, but at the same time, they do not clutter our Git history
    or create extra branches.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看结果之前，值得一提的是`dvclive`期望每次运行都由Git跟踪。这意味着它将把每次运行保存到相同的路径，并每次覆盖结果。我们指定了`save_dvc_exp=True`以便自动跟踪为DVC实验。在后台，DVC实验是DVC可以识别的Git提交，但同时，它们不会使我们的Git历史记录杂乱无章或创建额外的分支。
- en: After running our modified script, we can inspect the results in the *Experiments*
    panel of the DVC extension. As we can see, the scores match the ones we have manually
    printed into the console.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 运行修改后的脚本后，我们可以在DVC扩展的*Experiments*面板中检查结果。正如我们所见，分数与我们手动打印到控制台中的分数相匹配。
- en: '![](../Images/8f7bc8a228daa2080b3b36615f44306d.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8f7bc8a228daa2080b3b36615f44306d.png)'
- en: To clearly see the benefits of setting up our tracking, we can quickly run another
    experiment. For example, let’s say we believe that we should decrease the `max_depth`
    hyperparameter to 5\. To do this, we simply change the value of the hyperparameter
    in the `train_params` dictionary and run the script again. We can then immediately
    see the results of the new experiment in the summary table. Additionally, we can
    see which combination of hyperparameters resulted in that score.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清楚地看到设置跟踪的好处，我们可以快速运行另一个实验。例如，假设我们认为应该将`max_depth`超参数减少到 5。为此，我们只需在`train_params`字典中更改超参数的值，并再次运行脚本。然后，我们可以立即在汇总表中看到新实验的结果。此外，我们可以查看哪种超参数组合导致了该得分。
- en: '![](../Images/18a3fad85e5ff978b53e3204205d021f.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/18a3fad85e5ff978b53e3204205d021f.png)'
- en: 'Nice and simple! Naturally, the simplified example we have presented can be
    easily extended. For example, we could:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 简单明了！自然，我们展示的简化示例可以轻松扩展。例如，我们可以：
- en: Track plots and compare the experiments using, for example, their ROC curves.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪图表并比较实验结果，例如它们的 ROC 曲线。
- en: Add a DVC pipeline to ensure the reproducibility of each step of our project
    (loading data, processing, splitting, etc.).
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 DVC 管道以确保我们项目每一步的可重复性（加载数据、处理、拆分等）。
- en: Use a `params.yaml` file to parameterize all steps in our pipeline, including
    the training of an ML model.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `params.yaml` 文件对我们管道中的所有步骤进行参数化，包括 ML 模型的训练。
- en: Use DVC callbacks. In our example, we have manually stored information about
    the model’s hyperparameters and its performance. For frameworks such as XGBoost,
    LightGBM, or Keras, we could use callbacks that store all that information for
    us automatically.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 DVC 回调。在我们的例子中，我们手动存储了模型的超参数及其性能信息。对于像 XGBoost、LightGBM 或 Keras 这样的框架，我们可以使用回调自动存储所有这些信息。
- en: Wrapping up
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this article, we explored the simplest experimentation tracking setup using
    DVC. I know that it can be daunting to start a project and already think about
    data versioning, reproducible pipelines, and so on. However, using the approach
    described in this article, we can start tracking our experiments with as little
    overhead as possible. While for larger projects, I would still highly encourage
    using all the tools that ensure reproducibility, for smaller ad-hoc experiments,
    this approach is definitely more appealing.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们探讨了使用 DVC 的最简单实验跟踪设置。我知道开始一个项目时考虑数据版本控制、可重复管道等可能会让人感到望而生畏。然而，运用本文描述的方法，我们可以以最小的开销开始跟踪实验。虽然对于较大的项目，我仍然强烈建议使用所有确保可重复性的工具，但对于较小的临时实验，这种方法无疑更具吸引力。
- en: As always, any constructive feedback is more than welcome. You can reach out
    to me on [Twitter](https://twitter.com/erykml1) or in the comments. You can find
    all the code used for this article in [this repository](https://github.com/erykml/dvc_minimalist).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，任何建设性的反馈都非常欢迎。你可以通过 [Twitter](https://twitter.com/erykml1) 或评论区联系我。你可以在
    [这个仓库](https://github.com/erykml/dvc_minimalist) 中找到本文使用的所有代码。
- en: '*Liked the article? Become a Medium member to continue learning by reading
    without limits. If you use* [*this link*](https://eryk-lewinson.medium.com/membership)
    *to become a member, you will support me at no extra cost to you. Thanks in advance
    and see you around!*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*喜欢这篇文章？成为 Medium 会员，继续无限制地阅读学习。如果你使用* [*这个链接*](https://eryk-lewinson.medium.com/membership)
    *成为会员，你将以零额外成本支持我。提前感谢，期待与你见面！*'
- en: 'You might also be interested in one of the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能也会对以下内容感兴趣：
- en: '[](/11-useful-pandas-functionalities-you-might-have-overlooked-ad080527c768?source=post_page-----f07e4636bdbb--------------------------------)
    [## 11 Useful Pandas Functionalities You Might Have Overlooked'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/11-useful-pandas-functionalities-you-might-have-overlooked-ad080527c768?source=post_page-----f07e4636bdbb--------------------------------)
    [## 11 个你可能忽略的有用 Pandas 功能'
- en: Part 3 of the series exploring the hidden gems of pandas
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本系列探索 Pandas 隐藏宝石的第 3 部分
- en: towardsdatascience.com](/11-useful-pandas-functionalities-you-might-have-overlooked-ad080527c768?source=post_page-----f07e4636bdbb--------------------------------)
    [](https://medium.com/geekculture/top-10-vs-code-extensions-for-data-science-ce3e24e24347?source=post_page-----f07e4636bdbb--------------------------------)
    [## Top 10 VS Code Extensions for Data Science
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/11-useful-pandas-functionalities-you-might-have-overlooked-ad080527c768?source=post_page-----f07e4636bdbb--------------------------------)
    [](https://medium.com/geekculture/top-10-vs-code-extensions-for-data-science-ce3e24e24347?source=post_page-----f07e4636bdbb--------------------------------)
    [## 数据科学的十大 VS Code 扩展
- en: Enhance Your Productivity with These Must-Have Tools!
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提升生产力的必备工具！
- en: medium.com](https://medium.com/geekculture/top-10-vs-code-extensions-for-data-science-ce3e24e24347?source=post_page-----f07e4636bdbb--------------------------------)
    [](/turn-vs-code-into-a-one-stop-shop-for-ml-experiments-49c97c47db27?source=post_page-----f07e4636bdbb--------------------------------)
    [## Turn VS Code into a One-Stop Shop for ML Experiments
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/geekculture/top-10-vs-code-extensions-for-data-science-ce3e24e24347?source=post_page-----f07e4636bdbb--------------------------------)
    [](/turn-vs-code-into-a-one-stop-shop-for-ml-experiments-49c97c47db27?source=post_page-----f07e4636bdbb--------------------------------)
    [## 将VS Code转变为ML实验的一站式平台'
- en: How to run and evaluate experiments without leaving your IDE
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何在不离开IDE的情况下运行和评估实验
- en: towardsdatascience.com](/turn-vs-code-into-a-one-stop-shop-for-ml-experiments-49c97c47db27?source=post_page-----f07e4636bdbb--------------------------------)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/turn-vs-code-into-a-one-stop-shop-for-ml-experiments-49c97c47db27?source=post_page-----f07e4636bdbb--------------------------------)'
- en: All images, unless noted otherwise, are by the author.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，否则所有图片均为作者提供。
