- en: How To Solve Optimization Problems Using Linear Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-solve-optimisation-problems-using-linear-programming-912cc951afbb](https://towardsdatascience.com/how-to-solve-optimisation-problems-using-linear-programming-912cc951afbb)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An introduction to linear programming and how to solve it using the graphical
    and simplex algorithms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@egorhowell?source=post_page-----912cc951afbb--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----912cc951afbb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----912cc951afbb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----912cc951afbb--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----912cc951afbb--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----912cc951afbb--------------------------------)
    ·7 min read·Jul 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8f8bc85a775d8dd0a1009a32df6eeacd.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Isaac Smith](https://unsplash.com/es/@isaacmsmith?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**Linear programming (LP)**](https://en.wikipedia.org/wiki/Linear_programming)
    is an optimization technique that is used to find the best solution, from a specified
    *objective function*, subject to some *constraints*. It is applied in sundry industries
    ranging from finance to e-commerce, so it’s well worth knowing if you are a Data
    Scientist. The key feature of LP is the [**linear**](https://en.wikipedia.org/wiki/Linear_equation)part,
    which means that the constraints and objective function are all formulated as
    a linear relationship. In this post, we will run through an example LP problem
    and how it can be solved using the [**simplex algorithm**](https://en.wikipedia.org/wiki/Simplex_algorithm)and
    the [**graphical method**](https://www.toppr.com/guides/maths/linear-programming/graphical-method-of-solving-a-linear-programming-problem/).'
  prefs: []
  type: TYPE_NORMAL
- en: Graphical Method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Basic Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start with the graphical method as thats the simplest to understand
    and gives us real intuition behind LP.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say we run a small business selling smoothies for **£3** and coffees for
    **£2**, these are our two *decision variables****.*** Due to our ingredient constraints,
    we can only produce **75** smoothies and **100** coffees daily. Furthermore, we
    only have **140** cups available each day to serve our smoothies and coffees.
    Now, let’s formulate this as an LP problem!
  prefs: []
  type: TYPE_NORMAL
- en: Formulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we let ***x*** be smoothies and ***y*** be coffee, then we want to maximise
    the following objective function, ***c,*** as a function of the decision variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/86d5d4b66aeee55d3319ef64580abf0f.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation in LaTeX by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Subject to the following constraints:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9afab927c71e80569159206a366cf00e.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation in LaTeX by author.
  prefs: []
  type: TYPE_NORMAL
- en: The decision variables need to be non-negative.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now it is time to plot these constraints!
  prefs: []
  type: TYPE_NORMAL
- en: Plotting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As this is a two-dimensional problem, we can plot the constraints on a cartesian
    graph as straight lines (the linear part!):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/87afd72c7fc610e99064a21bf7f4096b.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated in Python by author.
  prefs: []
  type: TYPE_NORMAL
- en: The grey area is known as the *feasible region*, where any solution is valid
    as it satisfies the constraint.
  prefs: []
  type: TYPE_NORMAL
- en: From viewing the plot, the optimal solution appears to be in one of the corners
    where the constraints’ lines cross. This is actually called the [**fundamental
    theorem of linear programming**](https://en.wikipedia.org/wiki/Fundamental_theorem_of_linear_programming)**.**
    This theorem states that the optimal (maxima) of a linear function is in the corners
    over a [**convex polygon**](https://en.wikipedia.org/wiki/Convex_polygon) region
    (the feasibility region).
  prefs: []
  type: TYPE_NORMAL
- en: The optimal solution here is the **(75, 65)** corner with a value of **£355.**
    This can simply be derived from testing each corner of the feasible region.
  prefs: []
  type: TYPE_NORMAL
- en: Limitation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The above example is very simple to understand, however, what happens if we
    have another two products that our business sells? Well, it then becomes a four-dimensional
    problem. However, we humans can’t visualise that on paper. So what do we do? Well
    as every Data Scientist knows, we use an algorithm!
  prefs: []
  type: TYPE_NORMAL
- en: Simplex Algorithm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Intuition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The simplex algorithm was invented to solve LP problems by [**George Dantzig**](https://en.wikipedia.org/wiki/George_Dantzig)
    during the second world war. The general flow of the algorithm is to go to every
    vertex of the convex polygon and evaluate the objective function. Once we reach
    the optimal solution (we will show how we know it’s optimal), then we terminate
    the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: In my opinion, the best way to learn the simplex algorithm is to apply it to
    a problem and explain what each step is doing. So, without further ado, let’s
    get into it!
  prefs: []
  type: TYPE_NORMAL
- en: The mathematical proof behind the algorithm is quite dense, so I haven’t gone
    into all the gritty details in this post. However, the interested reader can find
    it linked [here](https://pi.math.cornell.edu/~web401/matt.simplex.pdf).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Walk Through
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***Step 1:***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Transform the inequalities into a [**system of linear equations**](https://en.wikipedia.org/wiki/System_of_linear_equations)
    through the use of *slack variables*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eb7cd68f5fe20f76067cfce5c1c38942.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation in LaTeX by author.
  prefs: []
  type: TYPE_NORMAL
- en: Here ***s_1***, ***s_2***, and ***s_3*** are the slack variables, which literally
    pick up the slack enabling the inequalities to turn into equations. The slack
    variables are referred to as *basic variables* and the decision variables, ***x***
    and ***y***, are *non-basic variables*.
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 2:***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Construct the equations into a *tableau*, where each equation is given its
    own row and the objective function is the bottom row:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9168f49baf1e01f943dce03e72f33826.png)'
  prefs: []
  type: TYPE_IMG
- en: Initial tableau of constraints and objective function. Diagram by author.
  prefs: []
  type: TYPE_NORMAL
- en: This is known as the *initial basic solution* and corresponds to the **(0,0)**
    vertex in the plot we showed earlier.
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 3:***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to identify the pivot column by finding the most negative entry
    in the last row. Then, we identify the pivot row by dividing the *value* column
    by the pivot column entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/10d23e628d94a4a4032584e6998ba20f.png)'
  prefs: []
  type: TYPE_IMG
- en: Most negative entry in the last row. Diagram by author.
  prefs: []
  type: TYPE_NORMAL
- en: In this instance, our pivot column is ***x****,*called the *entering variable,*and
    the corresponding pivot row is the first one, ***R1,*** as it has the smallest
    quotient.
  prefs: []
  type: TYPE_NORMAL
- en: We choose the lowest value in the bottom row as it represents the lowest coefficient
    in the objective function. Therefore, optimizing for this column will increase
    the objective function the most.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we choose the row with the smallest quotient to not violate constraints.
    More information about why this is the case can be found [here](https://math.stackexchange.com/questions/262207/steps-in-the-simplex-method).
  prefs: []
  type: TYPE_NORMAL
- en: '***Step 4:***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the pivot column, ***x***, and row, ***R1***, we want to make all entries
    in the pivot column ***0*** apart from ***R1\.*** We do this by either adding
    or subtracting multiples of ***R1*** with the other rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/891b7e196f155efebd5f9ce28e055031.png)'
  prefs: []
  type: TYPE_IMG
- en: Making every row in the x column 0 apart from the first row. Diagram by author.
  prefs: []
  type: TYPE_NORMAL
- en: We see the new objective is **225**, which corresponds to the **(75,0)** vertex
    in the plot we showed above. So, graphically we have moved from vertex **(0,0)**
    to vertex **(75,0)**.
  prefs: []
  type: TYPE_NORMAL
- en: This step is essentially [**gaussian elimination**](https://en.wikipedia.org/wiki/Gaussian_elimination).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Step 5:***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Repeat steps 3 and 4 until all the entries in the last row (objective function)
    are non-zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/217056592d30479ab13218d73c0f9d35.png)'
  prefs: []
  type: TYPE_IMG
- en: Most negative entry in the last row. Diagram by author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/08c8be54292d9a83f5074a4d73b7b5d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Making every row in the *y* column 0 apart from the third row. Diagram by author.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have arrived at the optimal solution as there are no negatives in the
    bottom row. The optimal solution to our problem is then **£355** when ***x = 75***
    and ***y = 65***, in other words, the **(75,65)** vertex. This is the exact solution
    we found above using the graphical technique!
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm steps themselves are not overly complicated, however, it can be
    tricky to understand what each step means. I have linked useful resources in the
    references section if you want to explore the simplex algorithm more and gain
    a deeper intuition behind the purpose of each step.
  prefs: []
  type: TYPE_NORMAL
- en: Other Algorithms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are also more algorithms to solve LP problems. Below is a list with some
    provided links for the interested reader to check out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Criss-cross algorithm*](https://en.wikipedia.org/wiki/Criss-cross_algorithm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Interior point*](https://en.wikipedia.org/wiki/Interior-point_method#:~:text=Interior%2Dpoint%20methods%20(also%20referred,red%20points%20show%20iterated%20solutions.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Ellipsoid algorithm*](https://www.cs.princeton.edu/courses/archive/fall05/cos521/ellipsoid.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Vaidya’s algorithm*](https://link.springer.com/article/10.1007/bf02592216)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linear Programming in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Fortunately, we don’t have to do the simplex algorithm by hand when solving
    LP problems! In Python, two main packages do the heavy lifting for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*PuLP*](https://coin-or.github.io/pulp/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*SciPy*](https://scipy.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I won’t go into how to use them in this article but [linked here](https://realpython.com/linear-programming-python/)
    is a great tutorial on applying these packages to your LP problem.
  prefs: []
  type: TYPE_NORMAL
- en: Summary & Further Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linear programming (LP) is a very useful tool and can be applied to solve a
    wide range of problems, therefore is very useful for a Data Scientist to understand.
    The underlying concept behind LP is that it formulates the problem all in linear
    equations and inequalities enabling a quicker compute time. The most common method
    to solve LP problems is the simplex algorithm, which is luckily done for us in
    computing packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full code used in this blog can be found on my GitHub here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/linear-programming?source=post_page-----912cc951afbb--------------------------------)
    [## Medium-Articles/Optimisation/linear-programming at main · egorhowell/Medium-Articles'
  prefs: []
  type: TYPE_NORMAL
- en: Code I use in my medium blog/articles. Contribute to egorhowell/Medium-Articles
    development by creating an account on…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/linear-programming?source=post_page-----912cc951afbb--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References & Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Some more worked examples of simplex and graphical methods*](https://www.cuemath.com/algebra/linear-programming/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*More mathematical deep dive into LP*](https://math.mit.edu/~goemans/18310S15/lpnotes310.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*A more in depth worked example of the simplex algorithm*](https://math.libretexts.org/Bookshelves/Applied_Mathematics/Applied_Finite_Mathematics_(Sekhon_and_Bloom)/04%3A_Linear_Programming_The_Simplex_Method/4.02%3A_Maximization_By_The_Simplex_Method)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another Thing!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----912cc951afbb--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  prefs: []
  type: TYPE_NORMAL
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----912cc951afbb--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Connect With Me!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**YouTube**](https://www.youtube.com/@egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**GitHub**](https://github.com/egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
