- en: Going the Next Step with Stock Measures in DAX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/going-the-next-step-with-stock-measures-in-dax-cb49d4e21c13](https://towardsdatascience.com/going-the-next-step-with-stock-measures-in-dax-cb49d4e21c13)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*We can encounter some weird effects when using Stock Measures in Power BI.
    Let’s look at how such a situation can emerge and how to solve it.*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@salvatorecagliari?source=post_page-----cb49d4e21c13--------------------------------)[![Salvatore
    Cagliari](../Images/a24b0cefab6e707cfee06cde9e857559.png)](https://medium.com/@salvatorecagliari?source=post_page-----cb49d4e21c13--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cb49d4e21c13--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cb49d4e21c13--------------------------------)
    [Salvatore Cagliari](https://medium.com/@salvatorecagliari?source=post_page-----cb49d4e21c13--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cb49d4e21c13--------------------------------)
    ·7 min read·Nov 28, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/de6275a5ca5ee665dbfaa76b41735898.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Firmbee.com](https://unsplash.com/@firmbee?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Stock calculations are commonly used when data cannot be aggregated over time.
  prefs: []
  type: TYPE_NORMAL
- en: For example, summing up my bank account balance over time would be a bad idea.
    It would be a good idea for me, but not my bank.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, I am working on a client project to create a reporting solution for
    Human Resources data.
  prefs: []
  type: TYPE_NORMAL
- en: One key figure is the Headcount, which is also a stock measure, as we have stored
    the Headcount over time for each month in a Fact table.
  prefs: []
  type: TYPE_NORMAL
- en: This looks like an easy task.
  prefs: []
  type: TYPE_NORMAL
- en: But there can be scenarios where we must go one extra step to get the correct
    results.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s dive into it.
  prefs: []
  type: TYPE_NORMAL
- en: Base Stock Measure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firstly, the correct name for Stock Measure is Semi-Additive Measures. This
    is because, as mentioned above, they will not aggregate data over time but over
    all other Dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Base Semi-Additive Measure for calculating the Headcount is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Measure [Headcount (Base)] contains the simple Aggregation (SUM) to get
    the needed result.
  prefs: []
  type: TYPE_NORMAL
- en: I always work with Base Measures to be able to include additional logic, which
    can be reused in the subsequent Measures.
  prefs: []
  type: TYPE_NORMAL
- en: One example is using a scaling factor when the user wants to see thousands or
    millions without needing the automatic Display units in Power BI, which adds weird
    scaling factors, like T for thousands or M for millions.
  prefs: []
  type: TYPE_NORMAL
- en: Then, I use the [LASTNONBLANK()](https://dax.guide/lastnonblank/) function to
    get the last date with a result from the Headcount (Base) Measure. The result
    of this function is then applied as a filter in the CALCULATE() call to get the
    final result.
  prefs: []
  type: TYPE_NORMAL
- en: You can find an exhaustive explanation of this solution on [DAX Patterns](https://www.daxpatterns.com/).
    The article is linked in the References section below.
  prefs: []
  type: TYPE_NORMAL
- en: There, you can find the link to another article I wrote when I encountered other
    scenarios with Semi-additive Measures.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the result for the Headcount of one Manager within our fictive organization
    hierarchy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a313341a923fd97939e79b2bec50c601.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1 — Result of our Base Measure (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the Headcount changes between January and February and April
    and May.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, the Total shows the last known Headcount, which is ten.
  prefs: []
  type: TYPE_NORMAL
- en: So far, so good.
  prefs: []
  type: TYPE_NORMAL
- en: Weird results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In my situation, each employee is assigned to a Group.
  prefs: []
  type: TYPE_NORMAL
- en: 'When I use the same Measure while looking at the distribution of the Employees
    between these groups, I get this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b75f410c446632a20533d88024b8bae2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2 — Headcount split by a Group (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: At first glance, it looks fine.
  prefs: []
  type: TYPE_NORMAL
- en: But when I sum the values for each row, I get eleven.
  prefs: []
  type: TYPE_NORMAL
- en: Why does this happen?
  prefs: []
  type: TYPE_NORMAL
- en: You will find the answer when you think about the Filter Context per row.
  prefs: []
  type: TYPE_NORMAL
- en: Think about it for a minute before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: The reason is that we look at the whole year.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following diagram, which shows the development of the Headcount
    by Group over time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6b4aa31e3aee9773269cf5622b8f2547.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3 — Full-year view of the Headcount per Group (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: When we look at each month, we can see that one employee in Group 1 left the
    company at the End of April. Thus, he will count as a Headcount until then.
  prefs: []
  type: TYPE_NORMAL
- en: But we got a new Employee in Group 4 starting in February.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of the year, the team still had ten members. This is the view when
    we look only at the Headcount by the End of the Year.
  prefs: []
  type: TYPE_NORMAL
- en: The Base Measure gets ten in the Total because the Measure has no knowledge
    (No Filter applied) by Group.
  prefs: []
  type: TYPE_NORMAL
- en: But when calculating the Result by Group, the last known result for “Group 1”
    is one by April. That is shown in the Result by Group when we look at the entire
    year.
  prefs: []
  type: TYPE_NORMAL
- en: 'I can prove this with a slight change in the Measure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/edfcad84d9f523b14900bbc244f78bc8.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4 — Check-Result with modified Measure (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the first row, the last date with a Result from the Headcount
    (Base) Measure is 30.04.2022.
  prefs: []
  type: TYPE_NORMAL
- en: This is the last date where there is a Result from the Headcount (Base) Measure
    when looking for “Group 1”.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the one member of Group 1 is listed in the Result.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with many other cases, this is a matter of definition:'
  prefs: []
  type: TYPE_NORMAL
- en: When we look at the entire year, we see that, at one point during the year,
    we had one Employee in Group 1.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we want to look only at the last day of the year, we shouldn’t get a result
    for Group 1.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the first definition is correct, we should hide the Total line, as it will
    confuse the users.
  prefs: []
  type: TYPE_NORMAL
- en: If the second definition is correct, we should change the Measure to show only
    the Headcount by the end of the year.
  prefs: []
  type: TYPE_NORMAL
- en: Going the next step
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To implement the second definition, I defined a new Measure with the following
    logic:'
  prefs: []
  type: TYPE_NORMAL
- en: Which is the last Date in the current Filter context?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which is the last Date with Data in the Fact table?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the Last Date of the current Filter context contains no data (Point 2 < Point
    1), then show the last known Data from the Fact Table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the Last Date of the current Filter context contains data (Point 2 >= Point
    1), show the Result for the last Date in the current Filter context.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is the Measure I came up with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: I must add the check to the Measure to avoid an empty result when looking at
    a year with no Data for the 31\. December.
  prefs: []
  type: TYPE_NORMAL
- en: 'This Measure returns the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e402d8c85798219a9514a0dc3b125fff.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5 — Result of new Measure (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: As expected, Group 1 has no Headcount when looking at the whole year.
  prefs: []
  type: TYPE_NORMAL
- en: 'But it returns the correct result when looking at each month:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eb42ebe1f88797eb7d3a5e532c8793fa.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6 — Result of new Measure by Month (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: This measure works correctly for any period, like quarters, semesters, or weeks.
  prefs: []
  type: TYPE_NORMAL
- en: Caveats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This Measure works only when we know the data is mapped to the last day of each
    period.
  prefs: []
  type: TYPE_NORMAL
- en: If data is mapped to other dates, this Measure will return wrong results.
  prefs: []
  type: TYPE_NORMAL
- en: The same applies when we have mixed data, where some data points are mapped
    to the last date of each period, and some other data points aren’t.
  prefs: []
  type: TYPE_NORMAL
- en: I explained such a situation in my article about Semi-Additive Measures linked
    below.
  prefs: []
  type: TYPE_NORMAL
- en: So, it all depends on the definition of the needed result and which solution
    is correct.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knowing the definition of the Result is vital to avoiding situations where the
    result is not logical and the user can interpret the results as wrong.
  prefs: []
  type: TYPE_NORMAL
- en: This is the worst situation possible, as it can severely impact the acceptance
    of a product.
  prefs: []
  type: TYPE_NORMAL
- en: We noticed this “issue” during testing and decided to use the above-mentioned
    solution.
  prefs: []
  type: TYPE_NORMAL
- en: But we will have further discussions about whether this solution is really the
    correct one.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, nobody thinks about these situations until we have them. So, don’t
    worry when you have them the next time you build a report with Semi-Additive Measures.
    But remember to test such cases as well.
  prefs: []
  type: TYPE_NORMAL
- en: And this is another example of when it’s vital to understand all implications
    of how the Filter context is applied.
  prefs: []
  type: TYPE_NORMAL
- en: This understanding is critical when trying to understand the result of a DAX
    Measure.
  prefs: []
  type: TYPE_NORMAL
- en: However, explaining such a result to stakeholders who do not understand this
    technical concept is challenging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, they want both in all cases: The correct result by row and the right
    result in the Total.'
  prefs: []
  type: TYPE_NORMAL
- en: In such cases, I must go one more step further to solve such requirements. But
    I always have mixed feelings when adding more and more complex logic to my Measures.
  prefs: []
  type: TYPE_NORMAL
- en: I am reluctant because it will be difficult for anyone else to understand why
    I did it in such a complicated way. This adds unnecessary effort to the maintenance
    of the solution. Sometimes, I even experienced a situation where my client removed
    the complex logic, as nobody could understand it.
  prefs: []
  type: TYPE_NORMAL
- en: I try to persuade my stakeholders to go for a compromise to get the best acceptable
    result without such complex and very custom logic.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/90cff15348c68fe2c7bfd93c3984e615.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [John Barkiple](https://unsplash.com/@barkiple?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The data is self-generated with phantasy names.
  prefs: []
  type: TYPE_NORMAL
- en: I generated this complete list by multiplying a list of First- and Last-Names
    with each other.
  prefs: []
  type: TYPE_NORMAL
- en: I generated the Fact table by multiplying the list of Employees with the list
    of the last Dates for each month over three years (CROSS JOIN) from my date table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Semi-additive calculations on DAX-Patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.daxpatterns.com/semi-additive-calculations/?source=post_page-----cb49d4e21c13--------------------------------)
    [## Semi-additive calculations'
  prefs: []
  type: TYPE_NORMAL
- en: Calculations reporting values at the start or the end of a time period are quite
    the challenge for any BI developer…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.daxpatterns.com](https://www.daxpatterns.com/semi-additive-calculations/?source=post_page-----cb49d4e21c13--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'My first article about solving specific challenges with semi-additive Measures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/refinement-of-semi-additive-measures-in-dax-4e148fa83f56?source=post_page-----cb49d4e21c13--------------------------------)
    [## Refinement of Semi-Additive Measures in DAX'
  prefs: []
  type: TYPE_NORMAL
- en: In a previous story, I explained some details about Semi-Additive Measures.
    Here are some more hints on this topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/refinement-of-semi-additive-measures-in-dax-4e148fa83f56?source=post_page-----cb49d4e21c13--------------------------------)
    [](https://medium.com/@salvatorecagliari/subscribe?source=post_page-----cb49d4e21c13--------------------------------)
    [## Get an email whenever Salvatore Cagliari publishes.
  prefs: []
  type: TYPE_NORMAL
- en: Get an email whenever Salvatore Cagliari publishes. By signing up, you will
    create a Medium account if you don't…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@salvatorecagliari/subscribe?source=post_page-----cb49d4e21c13--------------------------------)
  prefs: []
  type: TYPE_NORMAL
