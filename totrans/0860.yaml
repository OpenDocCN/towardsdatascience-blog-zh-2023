- en: Exploring the Contents of DLIS Files with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/exploring-the-contents-of-dlis-files-with-python-38585157dbac](https://towardsdatascience.com/exploring-the-contents-of-dlis-files-with-python-38585157dbac)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Working with Pandas and dlisio to Explore Well Log Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----38585157dbac--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----38585157dbac--------------------------------)[](https://towardsdatascience.com/?source=post_page-----38585157dbac--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----38585157dbac--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----38585157dbac--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----38585157dbac--------------------------------)
    ·8 min read·Jul 14, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/36ce0ae3f2ac656818b83f047ec06850.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Markus Spiske](https://unsplash.com/@markusspiske?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '[DLIS files](http://w3.energistics.org/RP66/V1/Toc/main.html) are a standard
    oil and gas industry data format. They are structured binary files that contain
    tables of well information, tool information and well logging data. They are much
    more complex and harder to open compared to flat LAS (Log ASCII Standard) files.
    This can make them more difficult to work with and often requires dedicated tools
    to view and explore their contents.'
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, Equinor has published a Python library called [dlisio](https://github.com/equinor/dlisio),
    which makes the process of exploring these files much easier.
  prefs: []
  type: TYPE_NORMAL
- en: '[dlsio](https://github.com/equinor/dlisio) is a Python library developed by
    Equinor ASA to read dlis files and Log Information Standard 79 (LIS79) files.
    The main idea behind the development of this library is to reduce the burden and
    effort of exploring and extracting data contained within these files without having
    to fully understand how they are structured. This allows users to focus on accessing
    and working with the data.'
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the dlisio library, you can check out the documentation
    below
  prefs: []
  type: TYPE_NORMAL
- en: '[## dlisio 0.3.7 documentation'
  prefs: []
  type: TYPE_NORMAL
- en: Welcome to dlisio. dlisio is a python package for reading Digital Log Interchange
    Standard (DLIS) v1\. Version 2 exists…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: dlisio.readthedocs.io](https://dlisio.readthedocs.io/en/latest/index.html?source=post_page-----38585157dbac--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Within this short tutorial, we will see how we can access the contents of the
    dlis file by converting information and data to a [pandas dataframe](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html),
    a much more common data format within data science.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have not already installed dlisio, you can do so directly within your
    Jupyter Notebook using the following command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once the library has been installed, we can begin importing the necessary libraries.
    For this tutorial, we will need to import the `dlis` module from dlisio, and the
    [pandas](https://pandas.pydata.org/docs/index.html) library.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Loading DLIS Data Files with DLISIO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the libraries have been imported, we can load our DLIS data using the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: The data used within this tutorial was downloaded from [**NLOG.nl**](https://www.nlog.nl/en/welcome-nlog),
    a website containing well logging data for the entire Dutch sector of the North
    Sea.
  prefs: []
  type: TYPE_NORMAL
- en: The data is free to download and use. Full details of the data licence can be
    found at the end of this article.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You will notice that we have two variables at the start: `f` and `*tail` .
    This is to accommodate the fact that dlis files can contain multiple logical files,
    representing additional well logging passes or other datasets that have been processed
    after data acquisition.'
  prefs: []
  type: TYPE_NORMAL
- en: If we do have multiple logical files, the first one will be placed into `f`
    and any subsequent logical files will be placed into `*tail`.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to check the contents of the first logical file, we can call upon
    the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This will generate the following summary of the logical file. This summary includes
    information about the frames and channels (curves) contained within it. It also
    includes information about the logging tool setup, environment and other important
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9c2a43489d49c53dc4298d06382af328.png)'
  prefs: []
  type: TYPE_IMG
- en: The summary output of the DLIS file contents from DLISIO. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Working with DLIS Frames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Frames within a dlis file can also represent different logging passes or different
    stages of processed data. This can range from raw well log measurements to petrophysical
    interpretations or advanced processed data.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can access the frames from the DLIS file by calling upon the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Which returns a list of frames.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: By looking at the frame names above, it can be difficult to tell what information
    and data is stored within them.
  prefs: []
  type: TYPE_NORMAL
- en: We could loop over each frame and print out its properties. However, to make
    things nicer to view and create code that can be reused, we can create a function
    which creates a summary pandas dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: The function loops over each of the frames within the dlis file, extracts key
    information and puts that information into a summary dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When we pass in our first logical file, we get back the following information.
  prefs: []
  type: TYPE_NORMAL
- en: This contains information about the index used for each frame (e.g. time or
    depth), the depth range, spacing, logging direction, the number of logging measurements
    and their names.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/037ef71f7aef3d120b00801ac558401b.png)'
  prefs: []
  type: TYPE_IMG
- en: Pandas dataframe summary of frames contained within a DLIS file. Image by the
    author.
  prefs: []
  type: TYPE_NORMAL
- en: Converting DLIS Curves / Channels to Pandas Dataframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will see from above that each of our frames within the dlis file contains
    channels. These channels represent well logging measurements. However, they can
    be difficult to work with directly.
  prefs: []
  type: TYPE_NORMAL
- en: Converting dlis channels to pandas dataframes can make data analysis and exploration
    much more accessible. By default, dlisio does not output dataframes. However,
    with a few lines of code, we can easily convert the channel data to a dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: We first call upon the `pd.DataFrame` method from pandas and pass in our logical
    file. We then call upon the frames contained within that logical file and access
    the required frame by passing in the index position of it. We can then call upon
    the curves method to access the individual logging curves.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code (assuming we do not have multi-dimensional columns)
    we will get back the following dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/917cd5187187e4528b9a1504c4a4413d.png)'
  prefs: []
  type: TYPE_IMG
- en: Dataframe of curves stored within a DLIS file. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: You will notice in the above dataframe that the `TDEP` values seem extremely
    large. This is due to the measurement being in units of 0.1 in. To convert this
    to metres, we need to multiply the `TDEP` column by 0.00254.
  prefs: []
  type: TYPE_NORMAL
- en: Handling Arrays Within dlis Channels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When our channels contain array data, the previous line of code will not work.
    If we do have multi-dimensional data, we will get an error that the `Data must
    be 1-dimensional`.
  prefs: []
  type: TYPE_NORMAL
- en: One way to deal with this is to exclude any channels that contain an array and
    only create the dataframe with single-dimensional data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: After we have run the above code, we can now view our dataframe ( `df` ) containing
    all regularly sampled measurements.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that you may have multiple sample rates within the same frame, and
    this should be explored thoroughly before converting.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/921bb4d66e7143e4596c2b447241af16.png)'
  prefs: []
  type: TYPE_IMG
- en: Pandas dataframe created from a DLIS file frame. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: As this particular dlis file has frames indexed using inches 0.1 inches, we
    need to multiply our TDEP column by 0.00254 to convert it to metres.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: When we view the dataframe after this calculation, we now have our depth column
    in metric units.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8b0593645bffd945b93d14e8609f20e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Dataframe after converting depth to metres. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: To tidy the dataframe up, we could sort the TDEP column in ascending order so
    that we go from the shallowest measurement at the top to the deepest measurement
    at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we have seen how to load dlis files, which are a complex binary
    format used to store well log data acquired from subsurface exploration. Using
    the dlisio library from Equinor, we can easily load these files into Python and
    explore the different components, such as the frames and channels.
  prefs: []
  type: TYPE_NORMAL
- en: Once this data has been loaded, we can easily use pandas to create summary dataframes
    of the contents of the dlis file and export well logging data from channels to
    an easier-to-work-with format.
  prefs: []
  type: TYPE_NORMAL
- en: 'To explore more on how you can work with DLIS files, check out my earlier article:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Loading Well Log Data From DLIS using Python**](https://medium.com/towards-data-science/loading-well-log-data-from-dlis-using-python-9d48df9a23e2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dataset Used in this Tutorial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Data from NLOG.nl is free to download and use. Full details of the data licence
    can be found [**here**](https://www.nlog.nl/en/disclaimer), but a summary of the
    usage is provided here from the Intellectual Property Rights section:'
  prefs: []
  type: TYPE_NORMAL
- en: '*NLOG.NL does not claim any rights (except domain names, trademark rights,
    patents and other intellectual property rights) in respect of information provided
    on or through this website. Users are permitted to copy, to download and to disclose
    in any way, to distribute or to simplify the information provided on this website
    without the prior written permission of NLOG.NL or the lawful consent of the entitled
    party. Users are also permitted to copy, duplicate, process or edit the information
    and/or layout, provided NLOG.NL is quoted as the source.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Secondly, you can get the full Medium experience and support thousands of
    other writers and me by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the fantastic Medium articles, as well as the
    chance to make money with your writing.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support.*'
  prefs: []
  type: TYPE_NORMAL
