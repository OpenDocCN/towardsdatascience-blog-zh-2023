["```py\npip install hydra-core\n```", "```py\n# my_app.py\nimport hydra\n\n@hydra.main(config_name=\"config\")\ndef my_app(cfg):\n    print(cfg.pretty())\n\nif __name__ == \"__main__\":\n    my_app()\n```", "```py\n# config.yaml\ndb:\n  driver: mysql\n  user: test\n  password: test\n```", "```py\nname: John\nsurname: Doe\nfull: ${name} ${surname}\n\ndb:\n  user: ${surname}.${name}\n```", "```py\npython my_app.py db.user=root\n```", "```py\nconfig.yaml\npreprocessing/\n  - standard.yaml\n  - minmax.yaml\nmodel/\n  - linear.yaml\n  - svm.yaml\n```", "```py\ndefaults:\n  - preprocessing: standard\n  - model: linear\n```", "```py\npython my_app.py preprocessing=minmax model=svm\n```", "```py\nconfig.yaml\nenv/\n  - development.yaml\n  - staging.yaml\n  - production.yaml\n```", "```py\ndefaults:\n  - env: development\n```", "```py\npython my_app.py env=production\n```", "```py\nname: Alice\ngreeting: Hello, ${name}!\n```", "```py\ndimensions:\n  width: 10\n  height: 20\narea: ${dimensions.width} * ${dimensions.height}\n```", "```py\ntraining:\n  batch_size: 32\n  learning_rate: 0.001 * ${training.batch_size}\n```", "```py\ndata:\n  input_size: 100\nmodel:\n  layer1: ${data.input_size} * 2\n  layer2: 50\n```", "```py\nexport DATABASE_URL=mysql://user:password@localhost/db\n```", "```py\ndatabase:\n  url: ${env:DATABASE_URL}\n```", "```py\nhydra:\n  job_logging:\n    root:\n      level: INFO\n    handlers:\n      console:\n        level: INFO\n        formatter: basic\n      file:\n        level: DEBUG\n        formatter: basic\n        filename: ./logs/${hydra:job.name}.log\n```", "```py\nhydra:\n  job_logging:\n    root:\n      level: INFO\n    loggers:\n      moduleA:\n        level: DEBUG\n      moduleB:\n        level: ERROR\n    handlers:\n      console:\n        level: INFO\n        formatter: basic\n      file:\n        level: DEBUG\n        formatter: basic\n        filename: ./logs/${hydra:job.name}.log\n```", "```py\npython my_app.py --multirun training.batch_size=32,64,128\n```", "```py\npython my_app.py --multirun training.batch_size=32,64,128 training.learning_rate=0.01,0.001,0.0001\n```", "```py\nfrom omegaconf import OmegaConf\nimport hydra\n\n@hydra.main(config_path=\"conf\", config_name=\"config\")\ndef my_app(cfg):\n    print(cfg.field_that_does_not_exist)  # Raises an error\n\nif __name__ == \"__main__\":\n    my_app()\n```", "```py\nvalue = OmegaConf.select(cfg, \"field_that_may_or_may_not_exist\", default=\"default_value\")\n```", "```py\ncfg = OmegaConf.load(\"config.yaml\", ignore_invalid_types=True)\n```", "```py\npython my_app.py db.driver=postgresql db.user=my_user\n```", "```py\npip install hydra-submitit-launcher\n```", "```py\ndefaults:\n  - hydra/launcher: submitit_slurm\n```", "```py\nhydra:\n  launcher:\n    _target_: hydra_plugins.hydra_submitit_launcher.config.SubmitterConf\n    slurm:\n      time: 60\n      nodes: 1\n      gpus_per_node: 2\n      tasks_per_node: 1\n      mem_per_node: 10GB\n      cpus_per_task: 10\n    submitit_folder: /path/to/your/log/folder\n```", "```py\npython my_app.py\n```", "```py\npython my_app.py --multirun model.lr=0.01,0.001,0.0001\n```", "```py\nFROM python:3.8\n```", "```py\nWORKDIR /appCOPY . .RUN pip install -r requirements.txtCMD [\"python\", \"my_app.py\", \"${CMD_ARGS}\"]\n```", "```py\ndocker:\n  image: python:3.8\n  cmd_args: db.driver=postgresql db.user=my_user\n```", "```py\n@hydra.main(config_path=\"config.yaml\")\ndef main(cfg):\n    cmd = f'docker run -it {cfg.docker.image} python my_app.py {cfg.docker.cmd_args}'\n    os.system(cmd)\n```", "```py\nif __name__ == \"__main__\":\n    main()\n```", "```py\n@hydra.main(config_path=\"config.yaml\")\ndef main(cfg):\n    # Load dataset\n    dataset = load_dataset(cfg.data)\n```", "```py\n # Initialize model\n    model = MyModel(cfg.model) # Initialize optimizer\n    optimizer = torch.optim.SGD(model.parameters(), lr=cfg.optim.lr) # Train and evaluate model\n    train(model, dataset, optimizer, cfg.train)\n    evaluate(model, dataset, cfg.eval)if __name__ == \"__main__\":\n    main()\n```", "```py\ndefaults:\n  - model: resnet50\n  - dataset: imagenet\n  - optimizer: sgd\n```", "```py\nmodel:\n  resnet50:\n    num_layers: 50\n  alexnet:\n    num_layers: 8dataset:\n  imagenet:\n    root: /path/to/imagenet\n  cifar10:\n    root: /path/to/cifar10optimizer:\n  sgd:\n    lr: 0.01\n    momentum: 0.9\n  adam:\n    lr: 0.001\n```"]