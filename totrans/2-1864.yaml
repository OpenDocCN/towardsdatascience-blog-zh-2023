- en: Simulating Physical Systems with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python模拟物理系统
- en: 原文：[https://towardsdatascience.com/simulating-physical-systems-with-python-dd5751e80b5c](https://towardsdatascience.com/simulating-physical-systems-with-python-dd5751e80b5c)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/simulating-physical-systems-with-python-dd5751e80b5c](https://towardsdatascience.com/simulating-physical-systems-with-python-dd5751e80b5c)
- en: A Must-Have Skill for any Engineer or Scientist
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任何工程师或科学家的必备技能
- en: '[](https://medium.com/@nhemenway2013?source=post_page-----dd5751e80b5c--------------------------------)[![Nick
    Hemenway](../Images/a38cade9fe4f81c7e43e5d3155a21d78.png)](https://medium.com/@nhemenway2013?source=post_page-----dd5751e80b5c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dd5751e80b5c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dd5751e80b5c--------------------------------)
    [Nick Hemenway](https://medium.com/@nhemenway2013?source=post_page-----dd5751e80b5c--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nhemenway2013?source=post_page-----dd5751e80b5c--------------------------------)[![Nick
    Hemenway](../Images/a38cade9fe4f81c7e43e5d3155a21d78.png)](https://medium.com/@nhemenway2013?source=post_page-----dd5751e80b5c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dd5751e80b5c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dd5751e80b5c--------------------------------)
    [Nick Hemenway](https://medium.com/@nhemenway2013?source=post_page-----dd5751e80b5c--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dd5751e80b5c--------------------------------)
    ·20 min read·Mar 7, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----dd5751e80b5c--------------------------------)
    ·20分钟阅读·2023年3月7日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/379eaf6912584be658e3fa37c4f517b0.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/379eaf6912584be658e3fa37c4f517b0.png)'
- en: Photo by [NASA](https://unsplash.com/@nasa?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[NASA](https://unsplash.com/@nasa?utm_source=medium&utm_medium=referral)拍摄，发布在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: The ability to simulate the behavior of a physical system has incredible utility
    in nearly all fields of science and engineering. Simulations allow us to understand
    the time evolution of a system, and they do so in a manner that cannot typically
    be paralleled (even by physical testing). Whereas physical testing can be time
    consuming, expensive, and possibly dangerous, simulations are fast, cheap, and
    don’t pose any risks of equipment damage or bodily injury. Experiments are also
    limited in the sense that they only provide you access to data that you can actually
    measure — unmeasured system states will either not be available, or will have
    to be estimated in post processing. Simulations on the other hand, act as windows
    that allow us peer into the entire internal state of a system. This ability to
    essentially look into the inner workings of a system can provide invaluable design
    insight in engineering applications.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟物理系统的行为在几乎所有科学和工程领域都有不可思议的实用价值。模拟允许我们理解系统的时间演变，而且这种方式通常无法与物理测试相媲美。虽然物理测试可能耗时、昂贵且可能存在危险，但模拟则快速、廉价，并且不会对设备造成损坏或对人身安全构成风险。实验也有其局限性，因为它们只能提供你实际可以测量的数据——未测量的系统状态要么无法获得，要么需要在后处理过程中估计。另一方面，模拟如同窗口，允许我们窥视系统的整个内部状态。这种基本上能查看系统内部运作的能力，可以为工程应用提供宝贵的设计洞察。
- en: The intent of this article is to provide a quick primer on how to get started
    with simulating physical systems in the Python programming language. To accomplish
    this, we’re going to walk through a comprehensive example of how to simulate a
    bouncing ball. I’ve specifically chosen this system because it’s intuitive and
    not too difficult, but still has some nuances that make simulating it a little
    more interesting than other simple examples you’ll find on the internet (the equations
    that govern the motion of the ball change depending on whether the ball is in
    the air, or in contact with the ground). Along the way, we’ll look at how to convert
    a mathematical model to the correct format needed for simulating, show how we
    can leverage pre-existing code libraries (`solve_ivp` from SciPy) to make our
    lives easier, and give rationale as to why we’re structuring our code the way
    we are. By the end of this article, we’ll not only have a working simulation of
    a bouncing ball (like the animation shown below) but a foundational knowledge
    that can be extended to simulate any kind of physical system.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的目的是提供一个快速入门指南，介绍如何在Python编程语言中开始模拟物理系统。为此，我们将通过一个全面的示例来模拟一个弹跳的球。我特别选择了这个系统，因为它直观且不太难，但仍有一些细微之处，使得模拟它比你在网上找到的其他简单示例更有趣（控制球运动的方程会根据球是否在空中或与地面接触而变化）。在这个过程中，我们将查看如何将数学模型转换为模拟所需的正确格式，展示如何利用现有的代码库（SciPy中的`solve_ivp`）来简化我们的工作，并解释为什么我们以这种方式组织代码。到本文结束时，我们不仅会拥有一个可以运行的弹跳球模拟（如下面的动画所示），还将具备可以扩展到模拟任何物理系统的基础知识。
- en: '![](../Images/af2b26da88b758ec371e38029058f03b.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/af2b26da88b758ec371e38029058f03b.png)'
- en: Animation by Author
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的动画
- en: The Maths
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数学部分
- en: 'Almost all systems in the physical world can be modeled by differential equations.
    These equations arise naturally from the physical laws that govern the world around
    us. Take Newton’s second law for example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 物理世界中的几乎所有系统都可以通过微分方程来建模。这些方程自然地来源于支配我们周围世界的物理定律。以牛顿第二定律为例：
- en: '![](../Images/fb17a82067ee02b8a742800b77b8899c.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fb17a82067ee02b8a742800b77b8899c.png)'
- en: Newton’s second law tells us that the second derivative of the position of a
    mass is proportional to the net force applied to that mass. And thus we get a
    differential equation — an equation, that when solved gives us a function. For
    our problem, given a forcing function f(t), solving the above differential equation
    gives us the position of the mass as a function of time, x(t).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 牛顿第二定律告诉我们，质量的位置的二阶导数与施加在该质量上的净力成正比。于是我们得到一个微分方程——一个解出后会给我们一个函数的方程。对于我们的问题，给定一个强迫函数f(t)，解决上述微分方程可以得到质量的位置作为时间的函数x(t)。
- en: Great, so how do we go about solving the above differential equation? Unfortunately,
    there’s no general analytic method that we can use, as the solution is completely
    dependent on the forcing function, f(t). Depending on the form of the forcing
    function, solving the above differential equation can either be incredibly easy,
    or intractably difficult. This is where simulation comes into the picture. Simulation
    gives us a general purpose method for solving arbitrarily difficult differential
    equations!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何解决上述微分方程呢？不幸的是，我们不能使用通用的解析方法，因为解完全依赖于强迫函数f(t)。根据强迫函数的形式，解决上述微分方程可能既非常简单，也可能极其困难。这就是模拟发挥作用的地方。模拟为我们提供了一种通用的方法来解决任意困难的微分方程！
- en: So how does simulation work? When I say simulation, I’m essentially just referring
    to the numerical integration of a differential equation. There are ton’s of algorithms
    that exist to do this, such as the incredibly simple, but sometimes inaccurate
    [Euler’s method](https://en.wikipedia.org/wiki/Euler_method), or [Runge-Kutta](https://lpsa.swarthmore.edu/NumInt/NumIntFourth.html)
    methods, which are incredibly popular and more accurate. Rather than diving into
    the specifics of how these algorithms work, we’re going to treat them as a black
    box and leverage pre-existing code libraries that already have them implemented.
    To do this, however, we need to formulate our problem in a manner that fit’s the
    format required by these algorithms.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 那么模拟是如何工作的呢？当我说模拟时，我基本上只是指微分方程的数值积分。存在大量用于此目的的算法，例如非常简单但有时不准确的[欧拉方法](https://en.wikipedia.org/wiki/Euler_method)，或者[龙格-库塔方法](https://lpsa.swarthmore.edu/NumInt/NumIntFourth.html)，这些方法非常流行且更准确。我们不深入探讨这些算法的具体细节，而是将它们视为黑箱，并利用已经实现这些算法的现有代码库。然而，为了做到这一点，我们需要将问题公式化，以符合这些算法所需的格式。
- en: Numerical integration algorithms typically require that we input our equations
    as a system of first order differential equations. The general format for this
    is shown below, where t is time and x is a vector of system variables/states.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 数值积分算法通常要求我们将方程输入为一阶微分方程系统。一般格式如下，其中 t 是时间，x 是系统变量/状态的向量。
- en: '![](../Images/51c2f17cec900cf63e23cfeb8b234311.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/51c2f17cec900cf63e23cfeb8b234311.png)'
- en: Looking at the above equation, we can see that the rate of change of each state
    in our system is influenced by the current state of the system and the instantaneous
    time. More often than not though, our system’s differential equations won’t naturally
    fall into this form (Newton’s second law, for example, is not a first order differential
    equation). Instead, we will typically have to massage our system’s equations into
    this format using some algebraic manipulation. This is all pretty abstract right
    now, so in the next section we’ll solidify the concept by applying the methodology
    to our bouncing ball problem.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 看着上面的方程，我们可以看到系统中每个状态的变化率受到系统当前状态和瞬时时间的影响。然而，我们的系统的微分方程往往不会自然地符合这种形式（例如，牛顿第二定律不是一阶微分方程）。相反，我们通常需要通过一些代数操作将系统方程转化为这种格式。目前这一切都比较抽象，所以在接下来的部分，我们将通过将方法应用于弹跳球问题来固化这个概念。
- en: Bouncing Ball Problem
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹跳球问题
- en: 'For the case of a bouncing ball, we have two scenarios that we need to consider:
    1) when the ball is in the air, and 2) when the ball is in contact with the ground.
    In both cases, we’ll use Newton’s second law, but the form that the equations
    take will change a bit because the external forces applied to the ball change.
    To formulate the equations of motion, we will use the coordinate system shown
    below, where x represents the height of the center of the ball from the ground.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于弹跳球问题，我们需要考虑两种情况：1) 当球在空中时，和 2) 当球接触地面时。在这两种情况下，我们都会使用牛顿第二定律，但方程的形式会有所变化，因为施加在球上的外力发生了变化。为了公式化运动方程，我们将使用如下坐标系统，其中
    x 代表球中心距离地面的高度。
- en: '![](../Images/c7f2f6692a64f2656049bb7e26deac7e.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c7f2f6692a64f2656049bb7e26deac7e.png)'
- en: Image by Author
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图片作者
- en: 'Step 1: Derive the System’s Equations'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一步：推导系统方程
- en: '*Case 1) the ball is in the air:* When the ball is in the air the only force
    acting on the ball is gravity, and thus we get the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*情况 1) 球在空中时:* 当球在空中时，唯一作用在球上的力是重力，因此我们得到如下公式：'
- en: '![](../Images/d12fbd00dccd659a8b56d8fd728c38da.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d12fbd00dccd659a8b56d8fd728c38da.png)'
- en: Image by Author
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图片作者
- en: '*Case 2) the ball is in contact with the ground:* Many different contact models
    exist for colliding objects, but for this example, we’re going to assume that
    the ball acts like a mass-spring-damper system. That is, we’ll assume that all
    of mass of the ball is concentrated at the center of the ball and the ball compresses
    on impact with some amount of stiffness (k) and damping (b). This is depicted
    below:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*情况 2) 球接触地面时:* 许多不同的接触模型存在于碰撞物体中，但在这个例子中，我们将假设球像一个质量-弹簧-阻尼系统。也就是说，我们将假设球的全部质量集中在球的中心，球在碰撞时会以某种刚度
    (k) 和阻尼 (b) 压缩。如下所示：'
- en: '![](../Images/3fc464f1ef3f86a30f29bd8d28154d42.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3fc464f1ef3f86a30f29bd8d28154d42.png)'
- en: Image by Author
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图片作者
- en: 'Drawing the free body diagram for the ball in contact with the ground, we get
    the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制接触地面的球体的自由体图，我们得到以下图示：
- en: '![](../Images/76594eeae6b2a9519ce9a207828ebe75.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/76594eeae6b2a9519ce9a207828ebe75.png)'
- en: Image by Author
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: The three forces acting on the ball are gravity, damping, and the spring force
    produced within the ball. Note that the amount the spring (ball) compresses is
    equal to the radius of the ball (R), minus the position of the ball (x). Rearranging
    the equation a bit, we get the well known mass-spring-damper differential equation
    with forcing.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对球体作用的三种力是重力、阻尼力和球内产生的弹簧力。注意，弹簧（球）的压缩量等于球的半径（R）减去球的位置（x）。稍微调整一下方程，我们得到了著名的质量-弹簧-阻尼微分方程及其强迫项。
- en: '![](../Images/5ad545ed56eb1a89990b2610987be386.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5ad545ed56eb1a89990b2610987be386.png)'
- en: 'Step 2: Convert the Equations to the Correct Format for Simulation'
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2步：将方程转换为适合仿真的格式
- en: 'We’ve derived a set of differential equations that govern the motion of the
    ball both in flight and in contact with the ground. Unfortunately, they’re not
    usable for simulation in their current form — we must convert them to a set of
    first order equations. To do this, we’ll introduce two new variables, x1 and x2,
    as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们推导出了一组控制球体在飞行和接触地面时运动的微分方程。不幸的是，它们在当前形式下无法用于仿真——我们必须将它们转换为一组一阶方程。为此，我们将引入两个新的变量x1和x2，如下所示：
- en: '![](../Images/43f548d649604e8d8b53ac7c50e4d297.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/43f548d649604e8d8b53ac7c50e4d297.png)'
- en: Variables x1 and x2 are known as state variables and the vector containing them
    is called the state vector. The state vector, by definition, contains all of the
    information required to completely define the state of the system (in our case,
    the position and velocity of the ball). In general, if we have an nth order differential
    equation, we will have to introduce n new state variables (one for x and each
    of its derivatives, up to but not including the highest order derivative). We
    introduce two state variables in our example because we have a second order differential
    equation.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 变量x1和x2被称为状态变量，包含它们的向量称为状态向量。根据定义，状态向量包含了完全定义系统状态所需的所有信息（在我们的例子中，即球的位移和速度）。一般来说，如果我们有一个n阶微分方程，我们需要引入n个新的状态变量（一个用于x及其每一个导数，直到但不包括最高阶导数）。在我们的例子中，我们引入了两个状态变量，因为我们有一个二阶微分方程。
- en: 'Differentiating the state vector yields:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对状态向量进行微分得到：
- en: '![](../Images/9970b494e7c13a8d4dbfa8fce746f584.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9970b494e7c13a8d4dbfa8fce746f584.png)'
- en: Note that the derivative of x1 is, by definition, x2\. I’ve purposely left the
    x-double-dot term as it is because it’s expression depends on whether the ball
    is in the air or in contact with the ground.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，x1的导数根据定义是x2。我故意保留了x双点项，因为其表达式依赖于球体是在空中还是接触地面。
- en: 'For the case of the ball being in flight, we have:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于球体在飞行中的情况，我们有：
- en: '![](../Images/33ed54c63ff84cd93da429495f49ca24.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/33ed54c63ff84cd93da429495f49ca24.png)'
- en: 'And for the case of the ball being in contact with the ground, we have:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于球体接触地面的情况，我们有：
- en: '![](../Images/9c6748038db65f25efc0a60f63a4edc2.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9c6748038db65f25efc0a60f63a4edc2.png)'
- en: Substituting the two x-double-dot expressions into the state derivative equation
    above yields the following two, vector-valued, state-derivative equations, applicable
    when the ball is in the air and in contact, respectively.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将两个x双点表达式代入上述状态导数方程，得到以下两个向量值的状态导数方程，分别适用于球体在空中和接触时的情况。
- en: '![](../Images/9b9cdad87bea8db7cc562c3f88760efe.png)![](../Images/8ca166bb84d6e9a5745c2c041d81ecab.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9b9cdad87bea8db7cc562c3f88760efe.png)![](../Images/8ca166bb84d6e9a5745c2c041d81ecab.png)'
- en: At this point we’ve successfully converted our higher-order differential equations
    into systems of first order equations and are ready to start coding up our simulation!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此时我们已成功将高阶微分方程转换为一阶方程系统，并准备开始编写仿真代码！
- en: 'Step 3: The Code'
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3步：代码
- en: To begin, we will import the necessary modules, as well as set some plotting
    settings to personal preference. The key line of code below is the `from scipy.integrate
    import solve_ivp` line, which imports the solver we’ll be using for our simulation
    (Note that `ivp` stands for “initial value problem” i.e. a differential equation
    with a given initial value).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将导入必要的模块，并根据个人喜好设置一些绘图设置。下面的关键代码行是`from scipy.integrate import solve_ivp`，它导入了我们将用于仿真的求解器（请注意，`ivp`代表“初值问题”，即具有给定初值的微分方程）。
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will organize our code by creating a `BouncingBall` class — a template for
    which is shown below with notes for what needs to be implemented in each method.
    We will populate each of these methods one-by-one
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过创建一个`BouncingBall`类来组织我们的代码——下方显示了一个模板，其中包括每个方法需要实现的注释。我们将逐个填充这些方法。
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: First, we will look at the `__init__` method. As can be seen in the code below,
    the `__init__` method simply takes in and stores the various physical parameters
    of the ball. If no value is given for gravity, the standard value of 9.81 m/s²
    is assigned by default.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将查看`__init__`方法。如下代码所示，`__init__`方法仅接收并存储球体的各种物理参数。如果没有提供重力值，默认分配标准值9.81
    m/s²。
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Next, we’ll populate the two physics methods (`in_air` and `in_contact`). Both
    of the methods (below) take in an array `x` and the current time `t`, unpack the
    `x` array into `x1` and `x2` and then compute and return the state derivative
    vector according to the equations we derived in Step 2.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将填充两个物理方法（`in_air`和`in_contact`）。这两个方法（如下）接收一个数组`x`和当前时间`t`，将`x`数组解包为`x1`和`x2`，然后根据我们在第2步中推导的方程计算并返回状态导数向量。
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Finally, we can populate the `simulate` method of the bouncing ball class, which
    will actually perform all of the interesting work. This method needs to integrate
    the physics of the ball forward in time, being sure to switch between the in-air
    and in-contact physics model when appropriate. Note that with how we’ve defined
    our coordinate system, the ball will be in contact with the ground when the position
    of the ball (x) is less than the ball’s radius (R).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以填充弹跳球类的`simulate`方法，这将实际执行所有有趣的工作。该方法需要将球体的物理过程向前积分，确保在适当的时候在空中和接触物理模型之间切换。请注意，根据我们定义的坐标系，当球体的位置（x）小于球体的半径（R）时，球体将与地面接触。
- en: 'The simplest way to switch between the two physics models would be to define
    an intermediate method that switches between the two previously defined methods
    depending on the position of the ball. It could look something like the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 切换两个物理模型的最简单方法是定义一个中间方法，根据球体的位置在两个先前定义的方法之间切换。它可能类似于以下内容：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We would then pass this single function to the numerical integrator `solve_ivp`
    and solve the system forward in time. There is one major issue with this approach
    though, and that is that it will not precisely capture the moments of contact
    when the physics model needs to change. The figure below clarifies.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将这个单一的函数传递给数值积分器`solve_ivp`，并将系统在时间上向前推进。不过，这种方法有一个主要问题，就是它无法准确捕捉到物理模型需要变化的接触时刻。下面的图示将加以说明。
- en: '![](../Images/eb02d5d50680f929804cabc11ef74499.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eb02d5d50680f929804cabc11ef74499.png)'
- en: Image by Author
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: At time step tn, the ball is just above the ground and moving downward. The
    numerical integrator will then integrate the ball’s trajectory forward in time
    to time step tn+1\. Note that the time difference between tn and tn+1 depends
    on the type of solver being used (fixed or variable step) and the corresponding
    error tolerance settings. Regardless, at time tn+1, the physics model will change
    to the in-contact model, but there’s an issue — the ball is already well into
    contact with the ground before the model changes. We don’t want the physics model
    to change any time the ball’s position (x) is less than the ball’s radius (R),
    we want the physics model to change at the EXACT instant the ball comes into contact,
    i.e. when the ball’s position equals the ball’s radius (x = R). To do this, we
    need another approach, we must use “events”.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在时间步tn，球体刚好在地面上方并向下移动。数值积分器将把球体的轨迹向前积分到时间步tn+1。请注意，tn和tn+1之间的时间差取决于所使用的求解器类型（固定步长或可变步长）和相应的误差容忍设置。无论如何，在时间tn+1时，物理模型将切换到接触模型，但存在一个问题——球体在模型变化之前已经与地面接触。我们不希望每当球体的位置（x）小于球体的半径（R）时，物理模型就改变，我们希望物理模型在球体接触的**确切瞬间**发生变化，即当球体的位置等于球体的半径（x
    = R）时。为此，我们需要另一种方法，我们必须使用“事件”。
- en: 'Intuitively, “events” are exactly as they sound — a point in time of particular
    interest, where “something” happens. In our case, we will be trying to capture
    two different events 1) the instant the ball comes into contact with the ground
    and 2) the instant the ball leaves contact with the ground. The way we mathematically
    describe an event is by defining a function that equals zero when an event occurs
    (for those familiar with Simulink, this is the same concept as “zero-crossings”).
    For our bouncing ball problem, this is simply the difference between the ball’s
    position and radius, as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 直观地说，“事件”正如其名——在特定时间点发生的“某事”。在我们的案例中，我们将尝试捕捉两个不同的事件：1）球与地面接触的瞬间，以及2）球离开地面的瞬间。我们通过定义一个在事件发生时等于零的函数来数学描述一个事件（对熟悉Simulink的人来说，这与“零交叉”概念相同）。对于我们弹跳球的问题，这只是球的位置与半径之间的差值，如下所示：
- en: '![](../Images/41f2ff68050e62a9598d449a495c704d.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/41f2ff68050e62a9598d449a495c704d.png)'
- en: When the above function is zero, the height of the ball equals the ball’s radius,
    and thus we have a contact event. Furthermore, we can see looking at the figure
    below that when the event function crosses zero in the negative direction (going
    from positive to negative), this signals that the ball is coming into contact
    with the ground. Likewise, when the event function crosses zero in the positive
    direction (going from negative to positive), this signals that the ball is leaving
    contact with the ground.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当上述函数为零时，球的高度等于球的半径，因此我们有一个接触事件。此外，从下面的图中可以看到，当事件函数在负方向上交叉零（从正向负），这表明球正在与地面接触。同样，当事件函数在正方向上交叉零（从负向正），这表明球离开地面接触。
- en: '![](../Images/ddad56dea6e70ce8150b5107de2a8df1.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ddad56dea6e70ce8150b5107de2a8df1.png)'
- en: Image by Author
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Great, but how do we use this? Luckily for us, the notion of an event is already
    implemented in the solver we want to use (`solve_ivp`)— we just have to use it
    correctly! Looking at the SciPy [documentation](https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.solve_ivp.html)
    for `solve_ivp`, we see that there’s an optional argument `events` that takes
    in an arbitrary object. This object must be callable, meaning that we can call
    it like a function (this is exactly the event function that we defined above).
    The object also has additional attributes `terminal` and `direction`. If the `terminal`
    attribute is set to `True`, the simulation will terminate when an event occurs.
    The `direction` attribute is an additional flag that can be set to determine which
    of the zero-crossing directions to pay attention to. For example, if `direction=-1`,
    only the negative direction crossing (e.g. ball coming into contact with the ground)
    will count as an event, the positive crossing will just be ignored.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，但我们该如何使用这个呢？幸运的是，我们想用的求解器（`solve_ivp`）中已经实现了事件的概念——我们只需正确使用它即可！查看SciPy的[文档](https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.solve_ivp.html)我们看到，`solve_ivp`有一个可选参数`events`，它接受一个任意对象。这个对象必须是可调用的，这意味着我们可以像调用函数一样调用它（这正是我们上面定义的事件函数）。该对象还有附加属性`terminal`和`direction`。如果`terminal`属性设置为`True`，当事件发生时，模拟将终止。`direction`属性是一个附加标志，可以设置以确定关注哪个零交叉方向。例如，如果`direction=-1`，只有负方向的交叉（例如，球与地面接触）会被视为事件，正方向的交叉将被忽略。
- en: We can construct a class called `ContactEvent` that does exactly what the documentation
    is requiring. Looking at the code below, we see that the class takes in the ball’s
    radius and uses it for the event function, which is defined in the `__call__`
    method (we have to implement it in the `__call__` method because `solve_ivp` requires
    that the event object is callable). The `ContactEvent` class also contains the
    attributes `direction` and `terminal`. Note that terminal is set to `True` meaning
    the simulation will stop when an event occurs. The `direction` attribute is set
    at instantiation as it depends on the type of event we are trying to capture.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以构建一个名为`ContactEvent`的类，这个类正好符合文档要求。查看下面的代码，我们看到这个类接收球的半径，并在`__call__`方法中定义事件函数（我们必须在`__call__`方法中实现它，因为`solve_ivp`要求事件对象是可调用的）。`ContactEvent`类还包含属性`direction`和`terminal`。注意，`terminal`设置为`True`，这意味着当事件发生时，模拟将停止。`direction`属性在实例化时设置，因为它取决于我们尝试捕捉的事件类型。
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To use the `ContactEvent` class, we will create two `ContactEvent` objects
    (one for the ball coming into contact and one for the ball leaving contact) and
    store them in the `BouncingBall` object. To do this, we’ll add two more lines
    of code to the `__init__` method as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`ContactEvent`类，我们将创建两个`ContactEvent`对象（一个用于球体接触，另一个用于球体离开接触），并将它们存储在`BouncingBall`对象中。为此，我们需要在`__init__`方法中添加两行代码，如下所示：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With our contact event functions defined, we can finally look at the `simulate`
    method code (below).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们定义的接触事件函数，我们终于可以查看`simulate`方法的代码（如下）。
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As can be seen in the code above, the `simulate` method takes in the initial
    conditions and a time span that we would wish to solve for. It first check’s if
    the ball is starting in the air, or in contact with the ground to determine which
    physics model to use initially. The code that follows then works as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的代码可以看出，`simulate`方法接收初始条件和我们希望求解的时间跨度。它首先检查球体是开始在空中还是在地面接触，以确定最初使用哪种物理模型。接下来的代码如下：
- en: Create two lists (`t_lst` and `x_lst`) that we can keep appending the piecewise
    simulation solutions to.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个列表（`t_lst`和`x_lst`），我们可以将分段模拟解决方案不断添加到这些列表中。
- en: Simulate the ball forward in time, passing the appropriate physics model and
    event object to `solve_ivp` (Note that`solve_ivp` takes in a function that returns
    the state derivative vector (as discussed in step 2), initial conditions, and
    a time span to solve for). Simulate forward in time until a contact event happens,
    at which point the simulation stops. Append the simulation time and solutions
    to `t_lst` and `x_lst` respectively.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将球体向前模拟，通过`solve_ivp`传递适当的物理模型和事件对象（注意`solve_ivp`接受一个返回状态导数向量的函数（如第2步讨论），初始条件和要解决的时间跨度）。在发生接触事件之前向前模拟，届时模拟停止。将模拟时间和解决方案分别附加到`t_lst`和`x_lst`。
- en: Switch the physics model (every event signals the switching of the physics model)
    and reset the initial conditions and starting time to equal the final conditions
    and time of the previous solve.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换物理模型（每个事件都表示物理模型的切换），并将初始条件和起始时间重置为前一次求解的最终条件和时间。
- en: Repeat 2 and 3 until the desired final simulation time is reached.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复第2步和第3步，直到达到期望的最终模拟时间。
- en: Concatenate all of the time and solution vectors into single arrays and return
    the solution.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有时间和解向量连接成单一数组并返回解决方案。
- en: The complete `BouncingBall` class is shown below.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`BouncingBall`类如下所示。
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: At this point all of the hard work is done and we’re ready to run a simulation!
    We can do so using the following few lines of code, which create a `BouncingBall`
    object, simulate the ball bouncing for eight seconds after being dropped from
    2 meters, and then plot the trajectory.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，所有的艰苦工作都完成了，我们准备好运行模拟了！我们可以使用以下几行代码，创建一个`BouncingBall`对象，模拟从2米高度下落后球体弹跳八秒，然后绘制轨迹。
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/9c88ced46961bdeaa49ad2eee5874f02.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9c88ced46961bdeaa49ad2eee5874f02.png)'
- en: Image by Author
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Pretty satisfying! If we wanted, we could even post-process the data to create
    an animation of the ball bouncing (like the one at the beginning of the post and
    repeated here).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 相当令人满意！如果我们愿意，甚至可以对数据进行后处理，创建一个球体弹跳的动画（如帖子开头和这里重复的动画）。
- en: '![](../Images/af2b26da88b758ec371e38029058f03b.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/af2b26da88b758ec371e38029058f03b.png)'
- en: Animation by Author
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的动画
- en: Creating animations in `matplotlib` is beyond the scope of this article, but
    for those interested, the code to create the animation is included in this articles
    accompanying Github [repository](https://github.com/Nick-Hemenway/medium-simulating_physical_systems).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在`matplotlib`中创建动画超出了本文的范围，但对感兴趣的人来说，创建动画的代码包含在本文附带的Github [仓库](https://github.com/Nick-Hemenway/medium-simulating_physical_systems)中。
- en: Conclusion
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: The ability to simulate a physical system can provide invaluable utility in
    nearly all fields of science and engineering. The highlighted example, though
    rather specific, covered a much more general workflow that can be extended to
    simulating any type of physical system. Regardless of the system, you will always
    have to determine the governing equations, convert them to a system of first order
    differential equations, and then pass the equations to a numerical integration
    routine of some sort. Of course, there are some nuances that couldn’t be discussed
    in this article — sometimes the system contains constraint equations and we get
    a set of differential algebraic equations (DAEs) instead of ordinary differential
    equations (ODEs). Or you may not be able to solve for your state vector derivative
    explicitly in terms of the systems states. Regardless, the content covered in
    this article still serves as a necessary foundation that must be mastered before
    moving onto more involved studies.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟物理系统的能力在几乎所有的科学和工程领域中都能提供宝贵的帮助。虽然所突出的例子相对具体，但它涵盖了一个更为通用的工作流程，可以扩展到模拟任何类型的物理系统。无论系统是什么，你总是需要确定支配方程，将其转换为一阶微分方程系统，然后将方程传递给某种数值积分例程。当然，这里有些细节在本文中无法讨论——有时系统包含约束方程，我们会得到一组微分代数方程（DAEs），而不是常微分方程（ODEs）。或者你可能无法明确地求解状态向量的导数与系统状态的关系。无论如何，本文中涵盖的内容仍然是必须掌握的基础，才能继续进行更深入的研究。
- en: Feel free to leave any comments or questions you may have or connect with me
    on Linkedin — I’d be more than happy to clarify any points of uncertainty. Finally,
    I encourage you to play around with the code yourself (or even use it as a starting
    template for your own workflows ) — all code for this article can be found on
    my [Github](https://github.com/Nick-Hemenway/medium-simulating_physical_systems).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎随时留言或提问，或者通过 Linkedin 联系我 —— 我会很乐意澄清任何不确定的地方。最后，我鼓励你自己动手尝试代码（或将其作为你自己工作流程的起始模板）——
    本文的所有代码可以在我的 [Github](https://github.com/Nick-Hemenway/medium-simulating_physical_systems)
    上找到。
- en: Nicholas Hemenway
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nicholas Hemenway
- en: '***If you enjoyed this, please f***[***ollow me on Medium***](/@nhemenway2013)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***如果你喜欢这个，请***[***关注我在 Medium 上的文章***](/@nhemenway2013)'
- en: '***Consider subscribing to*** [***email updates***](/subscribe/@nhemenway2013)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***考虑订阅*** [***电子邮件更新***](/subscribe/@nhemenway2013)'
- en: '***Interested in collaborating? Let’s*** [***connect on LinkedIn***](https://www.linkedin.com/in/nicholas-hemenway/)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***有兴趣合作吗？让我们*** [***在 LinkedIn 上联系***](https://www.linkedin.com/in/nicholas-hemenway/)'
