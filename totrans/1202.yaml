- en: How To Install A Private Docker Container Registry In Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://towardsdatascience.com/how-to-install-a-private-docker-container-registry-in-kubernetes-eadcfd6e0f27](https://towardsdatascience.com/how-to-install-a-private-docker-container-registry-in-kubernetes-eadcfd6e0f27)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Get full control of where your images are stored
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.knulst.de/?source=post_page-----eadcfd6e0f27--------------------------------)[![Paul
    Knulst](../Images/9fcb767d927a1fe53ee739c584fdf92c.png)](https://medium.knulst.de/?source=post_page-----eadcfd6e0f27--------------------------------)[](https://towardsdatascience.com/?source=post_page-----eadcfd6e0f27--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----eadcfd6e0f27--------------------------------)
    [Paul Knulst](https://medium.knulst.de/?source=post_page-----eadcfd6e0f27--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Â·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----eadcfd6e0f27--------------------------------)
    Â·7 min readÂ·Feb 1, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7845977d57ebf55058ab85daf608d88c.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Growtika](https://unsplash.com/@growtika?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/wLknZfsKmxQ?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hosting a Docker private registry gives you full control over the storage location
    of your images and how you can access them. This is especially useful if you develop
    private projects that shouldnâ€™t be publicly on Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, you will learn how to install a private Docker registry in
    any Kubernetes cluster. It is a [follow-up of a tutorial previously released on
    this blog](https://www.paulsblog.dev/how-to-install-traefik-ingress-controller-in-kubernetes/)
    because it will use a Traefik Ingress Controller to expose the Docker registry.
  prefs: []
  type: TYPE_NORMAL
- en: Preparation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create Kubernetes Namespace
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to create a Kubernetes namespace where all resources will
    be applied during this tutorial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: PersistentVolumeClaim
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, you will mount a volume into a dedicated Kubernetes Pod using
    a PersistentVolumeClaim. A PersistentVolumeClaim (`PVC`) is a Kubernetes resource
    to use a pre-defined abstract PersistentVolume (`PV`) storage without exposing
    how those volumes are implemented.
  prefs: []
  type: TYPE_NORMAL
- en: ðŸ’¡ **Prerequisite:** *A PersistentVolume should exist within the Kubernetes cluster.
    A PersistentVolume (*`*PV*`*) is a storage definition that was either manually
    provisioned by a user or dynamically provisioned using a storage class.* [*See
    this link for further information*](https://kubernetes.io/docs/concepts/storage/persistent-volumes/)*.*
  prefs: []
  type: TYPE_NORMAL
- en: To set up the PersistentVolumeClaim that will be used in the private Docker
    registry, this tutorial will assume that you already have a preconfigured PersistentVolume
    called `csi-cinder-classic`.
  prefs: []
  type: TYPE_NORMAL
- en: '1\. Create a new file (`registry-pvc.yaml`) containing the PersistentVolumeClaim
    using the `csi-cinder-classic` storage class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '2\. Apply it to the Kubernetes Cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '3\. Verify if the persistent volume claim was successfully created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Set Up Docker Registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, that you have created the namespace and the PersistentVolumeClaim you can
    deploy a Docker registry using the external storage and make the registry available
    across the entire Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Generate User & Password
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To set up the Docker registry, you need to generate a user and password that
    will be used to push and pull images to the registry.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file `gen-pass.sh` that contains the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: ðŸ’¡ **Note:** *Change REGISTRY_USER and REGISTRY_PASS to your needs. Also, since*
    `*htpasswd*` *was removed from the latest Docker images we will be using version
    2.7.0 to generate the user and password. For more information* [*have a look at
    this stack overflow post*](https://stackoverflow.com/questions/62531462/docker-local-registry-exec-htpasswd-executable-file-not-found-in-path)*.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the script which will create the credentials within the subfolder `./registry-creds`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Install Docker Registry Using Helm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following steps, you will use Helm to install the Docker registry.
  prefs: []
  type: TYPE_NORMAL
- en: ðŸ’¡ **Note:** *Helm is the package manager for Kubernetes, focused on automating
    the installation of all kinds of Kubernetes applications.*
  prefs: []
  type: TYPE_NORMAL
- en: '1\. Add the `twuni/docker-registry` Helm repository that is a successor of
    the official Docker registry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '2\. Update local Helm chart repository cache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '3\. Search for the latest version of `twuni/docker-registry` Helm chart version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '4\. Create a `registry-chart.yaml` which will be used to install the Docker
    registry in our Kubernetes cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: ðŸ’¡**Note:** *Replace the* `*htpasswd*` *string with the content of the file that
    was generated by the* `*gen-pass.sh*` *script (*`*./registry-cred/htpasswd*`*)*
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Install the Docker registry Helm chart using the `registry-chart.yaml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '6\. Verify installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to change something like the `replicaCount`, the `htpasswd` or
    the storage, you can do this by adjusting the `registry-chart.yaml` and reapply
    it by executing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How To Uninstall?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To uninstall the Docker registry, you have to remove it from the Kubernetes
    cluster with Helm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then remove the Docker registry namespace from the Kubernetes cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Add Docker Registry Ingress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To expose the Docker registry, you will use Traefik Ingress Controller to allow
    access to the registry through HTTPS with a proper TLS certificate.
  prefs: []
  type: TYPE_NORMAL
- en: ðŸ’¡**Note:** *Read about how to install Traefik Ingress Controller in any Kubernetes
    cluster within this tutorial:* [*https://www.paulsblog.dev/how-to-install-traefik-ingress-controller-in-kubernetes/*](https://www.paulsblog.dev/how-to-install-traefik-ingress-controller-in-kubernetes/)
  prefs: []
  type: TYPE_NORMAL
- en: '1\. Create a new file (`ingressroute.yaml`) and make sure to replace YOUR_DOMAIN
    with your Docker registry domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '2\. Apply the IngressRoute by executing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '3\. Verify if the Kubernetes resource was successfully created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Push Images To Private Registry In Kubernetes Cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To show how to push a Docker Image to our new Docker registry, this tutorial
    will show how to pull a public Docker Hub image, tag it, and then push it to your
    registry.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Log in to the Docker registry by using the previously created credentials
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '2\. Pull the `nginx:latest` Docker image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Tag the image with a custom name and prepend the private Docker registry
    domain name
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Push the Docker Image to the registry
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Use Docker Registry To Pull Images In Your Kubernetes Cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have a Docker registry deployed in your Kubernetes cluster, you can start
    using it by pulling previously pushed images for your Kubernetes Pods.
  prefs: []
  type: TYPE_NORMAL
- en: To learn how a private Docker registry can be used for pulling images, you will
    create a simple Kubernetes pod in a new `test` namespace. This Kubernetes Pod
    will use the previously pushed image `YOUR_DOMAIN/my-nginx`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you have to create the `test` Kubernetes namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Create Docker Registry Secret
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**This is the most important step!**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You have to create a Docker Secret for accessing the Docker registry from your
    Kubernetes cluster. To do this, use the credentials from the previous step and
    create a Kubernetes Docker Secret in the `test` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'ðŸ’¡ **Note: This Kubernetes Docker secret resource must be** *created within
    the correct namespace!*'
  prefs: []
  type: TYPE_NORMAL
- en: Create Kubernetes Pod With Image From Docker Registry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After the Kubernetes secret containing the credentials for the Docker registry
    is created, you create a new Kubernetes Deployment (`test-nginx.yaml`) that uses
    your registry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: If taking a close look at this file, you will see that it contains three essential
    differences from a normal `nginx` deployment.
  prefs: []
  type: TYPE_NORMAL
- en: '`image: YOUR_DOMAIN/my-nginx`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`imagePullSecrets: - name: regred`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both changes are necessary to use the Docker registry. The first option selects
    the image to use in the pod (registry URL as a prefix + image name). The second
    option sets which Docker secret is used to pull the image. If you changed credentials
    or names, you have to update both values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, deploy the Kubernetes Deployment in your Cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Use `kubectl describe podname -n test` to see if the image will be pulled and
    the container gets started correctly. The output should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2201868b5b2ce5b8408252b4fc36d20d.png)'
  prefs: []
  type: TYPE_IMG
- en: Pod Pull Image Events after deployment my-nginx Kubernetes Deployment
  prefs: []
  type: TYPE_NORMAL
- en: Closing Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hopefully, this article gave you a good overview of how to set up a private
    Docker registry in your Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, having a Private Docker registry is essential if deploying Docker
    services that are not Open Source!
  prefs: []
  type: TYPE_NORMAL
- en: 'To have an easy, repeatable procedure that you can run on any Kubernetes cluster,
    I created [a GitHub Gist containing all necessary files](https://gist.github.com/paulknulst/f077420faead4fd6e901d46eb9ba00d4).
    If you already [have a Traefik Ingress Controller running in your Kubernetes cluster](https://www.paulsblog.dev/how-to-install-traefik-ingress-controller-in-kubernetes/),
    you can simply download all files, adjust them to your needs, and then apply them
    by executing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: I would love to hear your feedback about this tutorial. Furthermore, if you
    also have set up a Docker registry and use a different approach, please comment
    here and explain what you have done differently. Also, if you have any questions,
    please ask them in the comments. I will answer them if possible.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to connect with me on [my blog](https://www.paulsblog.dev), [LinkedIn](https://www.linkedin.com/in/paulknulst/),
    [Twitter](https://twitter.com/paulknulst), and [GitHub](https://github.com/paulknulst).
  prefs: []
  type: TYPE_NORMAL
- en: '*This article was initially published on my blog at* [*https://www.paulsblog.dev/how-to-install-a-private-docker-container-registry-in-kubernetes/*](https://www.paulsblog.dev/how-to-install-a-private-docker-container-registry-in-kubernetes/)'
  prefs: []
  type: TYPE_NORMAL
