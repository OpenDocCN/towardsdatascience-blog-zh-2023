- en: How to Save and Load Your Neural Networks in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在 Python 中保存和加载神经网络
- en: 原文：[https://towardsdatascience.com/how-to-save-and-load-your-neural-networks-in-python-cb2063c4a7bd](https://towardsdatascience.com/how-to-save-and-load-your-neural-networks-in-python-cb2063c4a7bd)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-save-and-load-your-neural-networks-in-python-cb2063c4a7bd](https://towardsdatascience.com/how-to-save-and-load-your-neural-networks-in-python-cb2063c4a7bd)
- en: A complete guide to saving and loading checkpoints and entire Deep Learning
    models in PyTorch and TensorFlow/Keras
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保存和加载 PyTorch 和 TensorFlow/Keras 中的检查点和整个深度学习模型的完整指南
- en: '[](https://medium.com/@iamleonie?source=post_page-----cb2063c4a7bd--------------------------------)[![Leonie
    Monigatti](../Images/4044b1685ada53a30160b03dc78f9626.png)](https://medium.com/@iamleonie?source=post_page-----cb2063c4a7bd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cb2063c4a7bd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cb2063c4a7bd--------------------------------)
    [Leonie Monigatti](https://medium.com/@iamleonie?source=post_page-----cb2063c4a7bd--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@iamleonie?source=post_page-----cb2063c4a7bd--------------------------------)[![Leonie
    Monigatti](../Images/4044b1685ada53a30160b03dc78f9626.png)](https://medium.com/@iamleonie?source=post_page-----cb2063c4a7bd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cb2063c4a7bd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cb2063c4a7bd--------------------------------)
    [Leonie Monigatti](https://medium.com/@iamleonie?source=post_page-----cb2063c4a7bd--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cb2063c4a7bd--------------------------------)
    ·8 min read·Apr 5, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cb2063c4a7bd--------------------------------)
    ·8分钟阅读·2023年4月5日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/2eeee1c5b7d1e2288a2af1e575047b0d.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2eeee1c5b7d1e2288a2af1e575047b0d.png)'
- en: How to save and load neural networks in PyTorch and Tensorflow/Keras (Image
    drawn by the author)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在 PyTorch 和 TensorFlow/Keras 中保存和加载神经网络（图片由作者绘制）
- en: Training a neural network often takes a lot of time and computational resources.
    It would be a shame to lose a model after putting in that time and computation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 训练神经网络通常需要大量时间和计算资源。如果在投入了这些时间和计算后丢失模型，那将是非常遗憾的。
- en: 'That’s why you should be able to save and load a Deep Learning model in its
    different stages (during training or after completing training) depending on your
    use case:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么你应该能够根据用例在不同阶段（训练中或训练完成后）保存和加载深度学习模型的原因：
- en: '[Saving and loading model checkpoints](#293e) — to recover the training progress
    in case of an interruption or for best checkpoint picking'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[保存和加载模型检查点](#293e) — 在中断时恢复训练进度或选择最佳检查点'
- en: '[Saving and loading an entire Deep Learning model](#9b7c) — for [model versioning](https://medium.com/@iamleonie/intro-to-mlops-data-and-model-versioning-fa623c220966),
    deployment, and inference'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[保存和加载整个深度学习模型](#9b7c) — 用于 [模型版本控制](https://medium.com/@iamleonie/intro-to-mlops-data-and-model-versioning-fa623c220966)、部署和推断'
- en: '[Best Checkpoint Picking](#b3bf) — for [model versioning](https://medium.com/@iamleonie/intro-to-mlops-data-and-model-versioning-fa623c220966),
    deployment, and inference'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[最佳检查点选择](#b3bf) — 用于 [模型版本控制](https://medium.com/@iamleonie/intro-to-mlops-data-and-model-versioning-fa623c220966)、部署和推断'
- en: 'This article covers how to save and load checkpoints and entire models for
    the two main Deep Learning frameworks:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本文介绍了如何为两个主要深度学习框架保存和加载检查点和整个模型：
- en: PyTorch
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyTorch
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: TensorFlow/Keras
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TensorFlow/Keras
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In general, when loading a saved model, it is **important to ensure that the
    version of the framework you are using matches the version used to save the model.**
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，当加载保存的模型时，**确保使用的框架版本与保存模型时使用的版本相匹配是很重要的。**
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is particularly important when moving models between different machines
    or environments. Thus, when saving and versioning models, it is important to store
    the framework’s version as metadata.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这在将模型迁移到不同的机器或环境时尤为重要。因此，在保存和版本化模型时，存储框架的版本作为元数据是很重要的。
- en: '[](https://medium.com/@iamleonie/intro-to-mlops-data-and-model-versioning-fa623c220966?source=post_page-----cb2063c4a7bd--------------------------------)
    [## Intro to MLOps: Data and Model Versioning'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@iamleonie/intro-to-mlops-data-and-model-versioning-fa623c220966?source=post_page-----cb2063c4a7bd--------------------------------)
    [## MLOps 入门：数据和模型版本控制'
- en: Why version control in Machine Learning must go beyond source code and cover
    datasets and ML models for traceability…
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么机器学习中的版本控制必须超越源代码，涵盖数据集和机器学习模型以确保可追溯性……
- en: medium.com](https://medium.com/@iamleonie/intro-to-mlops-data-and-model-versioning-fa623c220966?source=post_page-----cb2063c4a7bd--------------------------------)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/@iamleonie/intro-to-mlops-data-and-model-versioning-fa623c220966?source=post_page-----cb2063c4a7bd--------------------------------)'
- en: How to Save and Load a Model Checkpoint
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何保存和加载模型检查点
- en: Checkpointing is useful to save a model at specified times during training.
    This is similar to saving your progress in a video game. It ensures you don’t
    have to start from the beginning and can resume from a checkpoint if anything
    goes wrong.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 检查点功能对于在训练期间指定时间保存模型非常有用。这类似于在视频游戏中保存进度。它确保你无需从头开始，可以在出现问题时从检查点恢复。
- en: '![](../Images/c1a653000797402741ebb0fa84154851.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c1a653000797402741ebb0fa84154851.png)'
- en: '[Sport illustrations by Storyset](https://storyset.com/sport)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[运动插图来自Storyset](https://storyset.com/sport)'
- en: Save and load model checkpoints in PyTorch
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在PyTorch中保存和加载模型检查点
- en: 'PyTorch checkpoints consist of the following components [2]:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch检查点包含以下组件[2]：
- en: Model state (weights and biases)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型状态（权重和偏差）
- en: Optimizer state
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化器状态
- en: Training step or epoch
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练步骤或纪元
- en: Any additional information you choose to save (e.g., training configuration
    such as optimizer, metric, or current training loss)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你选择保存的任何额外信息（例如，训练配置，如优化器、指标或当前训练损失）
- en: PyTorch models are usually saved in the PyTorch binary format (`.pt` or `.pth`).
    While there is no difference between the two file extensions, the developer community
    [3] **recommends favoring the** `**.pt**` **file extension** over the `.pth` file
    extension because the latter collides with the file extension of Python path configuration
    files.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch模型通常以PyTorch二进制格式（`.pt`或`.pth`）保存。虽然这两种文件扩展名之间没有区别，但开发者社区[3] **建议使用**
    `**.pt**` **文件扩展名**而不是`.pth`文件扩展名，因为后者与Python路径配置文件的文件扩展名冲突。
- en: 'You can **save training checkpoints** of your model (`checkpoint_1.pt`, `checkpoint_2.pt`,
    …) in PyTorch with the following code snippet:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下代码片段在PyTorch中**保存训练检查点**（`checkpoint_1.pt`、`checkpoint_2.pt`等）：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can **load a training checkpoint** of your model (e.g., `checkpoint_3.pt`)
    in PyTorch with the following code snippet. Make sure to:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下代码片段在PyTorch中**加载训练检查点**（例如`checkpoint_3.pt`）。确保：
- en: Set `model.train()` before continuing model training
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在继续模型训练之前设置`model.train()`
- en: Continue training only for the remaining epochs (`for epoch in range(epoch+1,
    num_epochs)`).
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继续仅在剩余的纪元中进行训练（`for epoch in range(epoch+1, num_epochs)`）。
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save and load model checkpoints in TensorFlow/Keras
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在TensorFlow/Keras中保存和加载模型检查点
- en: In contrast to PyTorch, a checkpoint in TensorFlow/Keras only saves the model
    state (weights and biases) in a checkpoint file (.`ckpt`) [6].
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与PyTorch相比，TensorFlow/Keras中的检查点仅在检查点文件（.`ckpt`）中保存模型状态（权重和偏差）[6]。
- en: 'You can **save training checkpoints** of your model (`checkpoint_1.ckpt`, `checkpoint_2.ckpt`,
    …) in TensorFlow/Keras by using a callback function as shown below:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用回调函数在TensorFlow/Keras中**保存训练检查点**（`checkpoint_1.ckpt`、`checkpoint_2.ckpt`等），如下所示：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you don’t want to use the callback function, you can also use the `model.save_weights(PATH)`
    method to save the model weights.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想使用回调函数，也可以使用`model.save_weights(PATH)`方法来保存模型权重。
- en: You can **load a training checkpoint** of your model (e.g., `checkpoint_3.pt`)
    in TensorFlow/Keras with the following code snippet. Make sure to continue training
    only for the remaining epochs (`num_epochs — epoch`).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下代码片段在TensorFlow/Keras中**加载训练检查点**（例如`checkpoint_3.pt`）。确保仅在剩余的纪元中继续训练（`num_epochs
    — epoch`）。
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How to Save and Load a Deep Learning Model
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何保存和加载深度学习模型
- en: You can also save a model when it is finished training. This is useful when
    you want to deploy your model or if the inference is done anywhere other than
    your training code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在模型训练完成时保存模型。这在你想要部署模型或推理发生在训练代码之外时非常有用。
- en: '![](../Images/99dc787a1d225c94db4b325a6d850834.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/99dc787a1d225c94db4b325a6d850834.png)'
- en: '[Sport illustrations by Storyset](https://storyset.com/sport)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[运动插图来自Storyset](https://storyset.com/sport)'
- en: Save and load an entire model in PyTorch
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在PyTorch中保存和加载整个模型
- en: In contrast to a checkpoint, a PyTorch only saves the model state (weights and
    biases) after the model is finished training [2].
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 与检查点相比，PyTorch只在模型训练完成后保存模型状态（权重和偏差）[2]。
- en: PyTorch models are also saved in the PyTorch binary format (`.pt` preferred
    over `.pth` [3]).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch模型也以PyTorch二进制格式（` .pt` 优于`.pth` [3]）保存。
- en: You can **save the trained model** (`model.pt`) in PyTorch with the following
    code snippet. Make sure to save the `model.state_dict()` instead of `model` alone
    (see the alternative below).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下代码片段在 PyTorch 中**保存训练好的模型**（`model.pt`）。确保保存 `model.state_dict()` 而不是单独保存
    `model`（请参见下面的替代方案）。
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can **load a trained model** (`model.pt`) in PyTorch with the following
    code snippet. Make sure to:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下代码片段在 PyTorch 中**加载训练好的模型**（`model.pt`）。确保：
- en: Create an instance of the same model before loading the weights
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在加载权重之前，创建一个相同的模型实例
- en: Set `model.eval()` before using the model for inference
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用模型进行推理之前，设置 `model.eval()`
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Alternatively, you could pickle the entire model as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以如下所示保存整个模型：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: With this approach, you don’t have to define the model before loading its weights.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，你不需要在加载权重之前定义模型。
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**However, this approach is not recommended:** This method does not save the
    model class itself. Instead, it saves a path to the file containing the class.
    Thus, saving the model with this method can cause issues when you want to repurpose
    the model in other projects or with a different source code.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**然而，不推荐这种方法：** 这种方法不保存模型类本身。相反，它保存了包含类的文件的路径。因此，使用这种方法保存模型可能会导致在其他项目或不同源代码中重用模型时出现问题。'
- en: Save and load an entire model in TensorFlow/Keras
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 TensorFlow/Keras 中保存和加载整个模型
- en: 'A Keras model consists of the following components [5, 6]:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Keras 模型包含以下组件 [5, 6]：
- en: Model architecture including optimizer and its state, losses and metrics in
    `saved_model.pb`
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型架构包括优化器及其状态、损失和 `saved_model.pb` 中的指标
- en: State of the model (weights and biases) in the `variables/` directory.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型的状态（权重和偏置）在 `variables/` 目录中。
- en: Model’s compilation information
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型的编译信息
- en: 'The model can be saved in the following file formats [5]:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 模型可以保存为以下文件格式 [5]：
- en: '**TensorFlow SavedModel format** — recommended and default format when no other
    file extension is given.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TensorFlow SavedModel 格式** — 推荐和默认格式，当没有指定其他文件扩展名时使用。'
- en: '**HDF5 format** (`.h5`)— an older and light-weight alternative, does not save
    external losses and metrics'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HDF5 格式**（`.h5`）——一种较旧且轻量的替代方案，不保存外部损失和指标'
- en: 'You can **save the trained model** (`model`) in TensorFlow/Keras with the following
    code snippet:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下代码片段在 TensorFlow/Keras 中**保存训练好的模型**（`model`）：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can **load a trained model** (`model`) in TensorFlow/Keras with the following
    code snippet.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下代码片段在 TensorFlow/Keras 中**加载训练好的模型**（`model`）。
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Best Checkpoint Picking
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳检查点选择
- en: Best checkpoint picking is a technique in Deep Learning which monitors the validation
    metric during training (without early stopping) and uses the checkpoint with the
    best validation metric for inference.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳检查点选择是一种深度学习技术，它在训练期间监控验证指标（没有提前停止），并使用具有最佳验证指标的检查点进行推理。
- en: In a recent [article on intermediate Deep Learning techniques](https://medium.com/towards-data-science/intermediate-deep-learning-with-transfer-learning-f1aba5a814f),
    we have reviewed that currently there seems to be no common understanding of the
    best practices regarding best checkpoint picking. While the [Deep Learning Tuning
    Playbook](https://github.com/google-research/tuning_playbook) [1] recommends using
    best checkpoint picking, Kaggle Grandmasters don’t recommend it because this technique
    tends to overfit the model to the validation set [4].
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在最近的 [关于中级深度学习技术的文章](https://medium.com/towards-data-science/intermediate-deep-learning-with-transfer-learning-f1aba5a814f)
    中，我们回顾了目前似乎没有关于最佳检查点选择的最佳实践的普遍理解。虽然 [深度学习调优手册](https://github.com/google-research/tuning_playbook)
    [1] 推荐使用最佳检查点选择，但 Kaggle 大师们不推荐此方法，因为这种技术往往使模型过度拟合验证集 [4]。
- en: '[](/intermediate-deep-learning-with-transfer-learning-f1aba5a814f?source=post_page-----cb2063c4a7bd--------------------------------)
    [## Intermediate Deep Learning with Transfer Learning'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/intermediate-deep-learning-with-transfer-learning-f1aba5a814f?source=post_page-----cb2063c4a7bd--------------------------------)
    [## 中级深度学习与迁移学习'
- en: A practical guide for fine-tuning Deep Learning models for computer vision and
    natural language processing
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 针对计算机视觉和自然语言处理的深度学习模型微调的实用指南
- en: towardsdatascience.com](/intermediate-deep-learning-with-transfer-learning-f1aba5a814f?source=post_page-----cb2063c4a7bd--------------------------------)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/intermediate-deep-learning-with-transfer-learning-f1aba5a814f?source=post_page-----cb2063c4a7bd--------------------------------)
- en: Nonetheless, we will cover how to apply best checkpoint picking to your Deep
    Learning pipeline.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我们将介绍如何将最佳检查点选择应用于你的深度学习管道。
- en: Best checkpoint picking in PyTorch
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PyTorch 中的最佳检查点选择
- en: '**Saving** is similar to [saving a model checkpoint in PyTorch](#c915) but
    with some alterations:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**保存** 类似于 [在 PyTorch 中保存模型检查点](#c915)，但有一些变化：'
- en: We [save only the model](#57f0) but no training information like the epoch,
    optimizer state, etc. because we don’t intend to continue training with this model
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们 [仅保存模型](#57f0)，但不保存训练信息，如 epoch、优化器状态等，因为我们不打算继续训练此模型。
- en: Manually add monitoring of the validation metric during training
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在训练过程中手动添加验证指标的监控
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Loading** is the same as[loading an entire model in PyTorch](#57f0).'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**加载** 等同于 [在 PyTorch 中加载整个模型](#57f0)。'
- en: Best checkpoint picking in TensorFlow/Keras
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TensorFlow/Keras 中的最佳检查点选择
- en: '**Saving** is similar to [saving a model checkpoint in TensorFlow/Keras](#c0bf)
    but with some alterations:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**保存** 类似于 [在 TensorFlow/Keras 中保存模型检查点](#c0bf)，但有一些变化：'
- en: Use `save_weights_only = True` to save the entire model
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `save_weights_only = True` 保存整个模型
- en: Remove `.ckpt` from the `PATH` to save the model in SavedModel format
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 `PATH` 中移除 `.ckpt` 以将模型保存为 SavedModel 格式
- en: Add `monitor` and `save_best_only` parameters
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 `monitor` 和 `save_best_only` 参数
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Loading** is the same as[loading an entire model in TensorFlow/Keras](#86ee)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**加载** 等同于 [在 TensorFlow/Keras 中加载整个模型](#86ee)。'
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This article reviewed different use cases for saving and loading neural networks
    with the Deep Learning frameworks PyTorch and TensorFlow/Keras. Below you can
    see an overview of the comparison between PyTorch and Keras.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 本文回顾了在深度学习框架 PyTorch 和 TensorFlow/Keras 中保存和加载神经网络的不同用例。下文展示了 PyTorch 和 Keras
    之间的比较概述。
- en: '![](../Images/75f9c46a129ceadac2d7fa4d5259f16f.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/75f9c46a129ceadac2d7fa4d5259f16f.png)'
- en: Overview of what is saved when saving a Deep Learning checkpoint or model in
    PyTorch vs. TensorFlow/Keras (Image by the author)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch 与 TensorFlow/Keras 中保存深度学习检查点或模型时的概述（图像由作者提供）
- en: '**Model architecture:** In PyTorch, the model architecture is never saved and
    thus has to be saved with some source code version control in addition. In TensorFlow/Keras
    the model architecture is saved when you save the entire model.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型架构：** 在 PyTorch 中，模型架构从未保存，因此还必须通过某些源代码版本控制进行保存。在 TensorFlow/Keras 中，当你保存整个模型时，模型架构会被保存。'
- en: '**Model weights:** Both PyTorch and TensorFlow/Keras can save the model weights
    only. However, in PyTorch, this is done when you save the final trained model,
    while in TensorFlow/Keras this applies to checkpointing.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型权重：** PyTorch 和 TensorFlow/Keras 都可以仅保存模型权重。然而，在 PyTorch 中，这是在保存最终训练模型时完成的，而在
    TensorFlow/Keras 中，这适用于检查点保存。'
- en: Enjoyed This Story?
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 喜欢这个故事吗？
- en: '[*Subscribe for free*](https://medium.com/subscribe/@iamleonie) *to get notified
    when I publish a new story.*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[*免费订阅*](https://medium.com/subscribe/@iamleonie) *以便在我发布新故事时收到通知。*'
- en: '[](https://medium.com/@iamleonie/subscribe?source=post_page-----cb2063c4a7bd--------------------------------)
    [## Get an email whenever Leonie Monigatti publishes.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@iamleonie/subscribe?source=post_page-----cb2063c4a7bd--------------------------------)
    [## 每当 Leoni Monigatti 发布时接收电子邮件。'
- en: Get an email whenever Leonie Monigatti publishes. By signing up, you will create
    a Medium account if you don’t already…
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每当 Leoni Monigatti 发布时接收电子邮件。通过注册，如果你还没有，你将创建一个 Medium 账户……
- en: medium.com](https://medium.com/@iamleonie/subscribe?source=post_page-----cb2063c4a7bd--------------------------------)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@iamleonie/subscribe?source=post_page-----cb2063c4a7bd--------------------------------)
- en: '*Find me on* [*LinkedIn*](https://www.linkedin.com/in/804250ab/),[*Twitter*](https://twitter.com/helloiamleonie)*,
    and* [*Kaggle*](https://www.kaggle.com/iamleonie)*!*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*在* [*LinkedIn*](https://www.linkedin.com/in/804250ab/)，[*Twitter*](https://twitter.com/helloiamleonie)*
    和* [*Kaggle*](https://www.kaggle.com/iamleonie)*上找到我！*'
- en: References
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[1] V. Godbole, G. E. Dahl, J. Gilmer, C. J. Shallue and Z. Nado (2023). [Deep
    Learning Tuning Playbook](https://github.com/google-research/tuning_playbook)
    (Version 1.0) (accessed February 3rd, 2023)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] V. Godbole, G. E. Dahl, J. Gilmer, C. J. Shallue 和 Z. Nado (2023). [深度学习调优手册](https://github.com/google-research/tuning_playbook)
    (第 1.0 版) (访问日期：2023 年 2 月 3 日)'
- en: '[2] M. Inkawhich for PyTorch (2023). [Saving and Loading Models](https://pytorch.org/tutorials/beginner/saving_loading_models.html)
    (accessed March 27th, 2023).'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] M. Inkawhich for PyTorch (2023). [保存和加载模型](https://pytorch.org/tutorials/beginner/saving_loading_models.html)
    (访问日期：2023 年 3 月 27 日)。'
- en: '[3] [kmario23](https://stackoverflow.com/users/2956066/kmario23) in Stackoverflow
    (2019). [What is the difference between .pt, .pth and .pwf extentions in PyTorch?](https://stackoverflow.com/questions/59095824/what-is-the-difference-between-pt-pth-and-pwf-extentions-in-pytorch)
    (accessed March 27th, 2023).'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] [kmario23](https://stackoverflow.com/users/2956066/kmario23) 在 Stackoverflow
    (2019)。[PyTorch 中 .pt、.pth 和 .pwf 扩展名之间有什么区别？](https://stackoverflow.com/questions/59095824/what-is-the-difference-between-pt-pth-and-pwf-extentions-in-pytorch)（访问日期：2023年3月27日）。'
- en: '[4] P. Singer and Y. Babakhin (2022). [Practical Tips for Deep Transfer Learning](https://drive.google.com/drive/folders/1VtJF-zPbXc-V-UDl2bDgWJp05DnKZpQH)
    presented at Kaggle Days Paris in November 2022.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] P. Singer 和 Y. Babakhin (2022)。[深度迁移学习实用技巧](https://drive.google.com/drive/folders/1VtJF-zPbXc-V-UDl2bDgWJp05DnKZpQH)
    于2022年11月在 Kaggle Days Paris 上介绍。'
- en: '[5] TensorFlow (2023). [Guide: Save and load Keras models](https://www.tensorflow.org/guide/keras/save_and_serialize)
    (accessed March 27th, 2023).'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[5] TensorFlow (2023)。[指南：保存和加载 Keras 模型](https://www.tensorflow.org/guide/keras/save_and_serialize)（访问日期：2023年3月27日）。'
- en: '[6] TensorFlow (2023). [Tutorials: Save and load models](https://www.tensorflow.org/tutorials/keras/save_and_load)
    (accessed March 27th, 2023).'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[6] TensorFlow (2023)。[教程：保存和加载模型](https://www.tensorflow.org/tutorials/keras/save_and_load)（访问日期：2023年3月27日）。'
