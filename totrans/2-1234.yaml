- en: How to Save and Load Your Neural Networks in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-save-and-load-your-neural-networks-in-python-cb2063c4a7bd](https://towardsdatascience.com/how-to-save-and-load-your-neural-networks-in-python-cb2063c4a7bd)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A complete guide to saving and loading checkpoints and entire Deep Learning
    models in PyTorch and TensorFlow/Keras
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@iamleonie?source=post_page-----cb2063c4a7bd--------------------------------)[![Leonie
    Monigatti](../Images/4044b1685ada53a30160b03dc78f9626.png)](https://medium.com/@iamleonie?source=post_page-----cb2063c4a7bd--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cb2063c4a7bd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cb2063c4a7bd--------------------------------)
    [Leonie Monigatti](https://medium.com/@iamleonie?source=post_page-----cb2063c4a7bd--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cb2063c4a7bd--------------------------------)
    ·8 min read·Apr 5, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2eeee1c5b7d1e2288a2af1e575047b0d.png)'
  prefs: []
  type: TYPE_IMG
- en: How to save and load neural networks in PyTorch and Tensorflow/Keras (Image
    drawn by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Training a neural network often takes a lot of time and computational resources.
    It would be a shame to lose a model after putting in that time and computation.
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s why you should be able to save and load a Deep Learning model in its
    different stages (during training or after completing training) depending on your
    use case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Saving and loading model checkpoints](#293e) — to recover the training progress
    in case of an interruption or for best checkpoint picking'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Saving and loading an entire Deep Learning model](#9b7c) — for [model versioning](https://medium.com/@iamleonie/intro-to-mlops-data-and-model-versioning-fa623c220966),
    deployment, and inference'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Best Checkpoint Picking](#b3bf) — for [model versioning](https://medium.com/@iamleonie/intro-to-mlops-data-and-model-versioning-fa623c220966),
    deployment, and inference'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This article covers how to save and load checkpoints and entire models for
    the two main Deep Learning frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: PyTorch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlow/Keras
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In general, when loading a saved model, it is **important to ensure that the
    version of the framework you are using matches the version used to save the model.**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is particularly important when moving models between different machines
    or environments. Thus, when saving and versioning models, it is important to store
    the framework’s version as metadata.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@iamleonie/intro-to-mlops-data-and-model-versioning-fa623c220966?source=post_page-----cb2063c4a7bd--------------------------------)
    [## Intro to MLOps: Data and Model Versioning'
  prefs: []
  type: TYPE_NORMAL
- en: Why version control in Machine Learning must go beyond source code and cover
    datasets and ML models for traceability…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@iamleonie/intro-to-mlops-data-and-model-versioning-fa623c220966?source=post_page-----cb2063c4a7bd--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: How to Save and Load a Model Checkpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Checkpointing is useful to save a model at specified times during training.
    This is similar to saving your progress in a video game. It ensures you don’t
    have to start from the beginning and can resume from a checkpoint if anything
    goes wrong.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c1a653000797402741ebb0fa84154851.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Sport illustrations by Storyset](https://storyset.com/sport)'
  prefs: []
  type: TYPE_NORMAL
- en: Save and load model checkpoints in PyTorch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PyTorch checkpoints consist of the following components [2]:'
  prefs: []
  type: TYPE_NORMAL
- en: Model state (weights and biases)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizer state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Training step or epoch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any additional information you choose to save (e.g., training configuration
    such as optimizer, metric, or current training loss)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyTorch models are usually saved in the PyTorch binary format (`.pt` or `.pth`).
    While there is no difference between the two file extensions, the developer community
    [3] **recommends favoring the** `**.pt**` **file extension** over the `.pth` file
    extension because the latter collides with the file extension of Python path configuration
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can **save training checkpoints** of your model (`checkpoint_1.pt`, `checkpoint_2.pt`,
    …) in PyTorch with the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can **load a training checkpoint** of your model (e.g., `checkpoint_3.pt`)
    in PyTorch with the following code snippet. Make sure to:'
  prefs: []
  type: TYPE_NORMAL
- en: Set `model.train()` before continuing model training
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continue training only for the remaining epochs (`for epoch in range(epoch+1,
    num_epochs)`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Save and load model checkpoints in TensorFlow/Keras
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In contrast to PyTorch, a checkpoint in TensorFlow/Keras only saves the model
    state (weights and biases) in a checkpoint file (.`ckpt`) [6].
  prefs: []
  type: TYPE_NORMAL
- en: 'You can **save training checkpoints** of your model (`checkpoint_1.ckpt`, `checkpoint_2.ckpt`,
    …) in TensorFlow/Keras by using a callback function as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you don’t want to use the callback function, you can also use the `model.save_weights(PATH)`
    method to save the model weights.
  prefs: []
  type: TYPE_NORMAL
- en: You can **load a training checkpoint** of your model (e.g., `checkpoint_3.pt`)
    in TensorFlow/Keras with the following code snippet. Make sure to continue training
    only for the remaining epochs (`num_epochs — epoch`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How to Save and Load a Deep Learning Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can also save a model when it is finished training. This is useful when
    you want to deploy your model or if the inference is done anywhere other than
    your training code.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/99dc787a1d225c94db4b325a6d850834.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Sport illustrations by Storyset](https://storyset.com/sport)'
  prefs: []
  type: TYPE_NORMAL
- en: Save and load an entire model in PyTorch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In contrast to a checkpoint, a PyTorch only saves the model state (weights and
    biases) after the model is finished training [2].
  prefs: []
  type: TYPE_NORMAL
- en: PyTorch models are also saved in the PyTorch binary format (`.pt` preferred
    over `.pth` [3]).
  prefs: []
  type: TYPE_NORMAL
- en: You can **save the trained model** (`model.pt`) in PyTorch with the following
    code snippet. Make sure to save the `model.state_dict()` instead of `model` alone
    (see the alternative below).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can **load a trained model** (`model.pt`) in PyTorch with the following
    code snippet. Make sure to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an instance of the same model before loading the weights
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set `model.eval()` before using the model for inference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you could pickle the entire model as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: With this approach, you don’t have to define the model before loading its weights.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**However, this approach is not recommended:** This method does not save the
    model class itself. Instead, it saves a path to the file containing the class.
    Thus, saving the model with this method can cause issues when you want to repurpose
    the model in other projects or with a different source code.'
  prefs: []
  type: TYPE_NORMAL
- en: Save and load an entire model in TensorFlow/Keras
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Keras model consists of the following components [5, 6]:'
  prefs: []
  type: TYPE_NORMAL
- en: Model architecture including optimizer and its state, losses and metrics in
    `saved_model.pb`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State of the model (weights and biases) in the `variables/` directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model’s compilation information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The model can be saved in the following file formats [5]:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TensorFlow SavedModel format** — recommended and default format when no other
    file extension is given.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HDF5 format** (`.h5`)— an older and light-weight alternative, does not save
    external losses and metrics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can **save the trained model** (`model`) in TensorFlow/Keras with the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can **load a trained model** (`model`) in TensorFlow/Keras with the following
    code snippet.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Best Checkpoint Picking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Best checkpoint picking is a technique in Deep Learning which monitors the validation
    metric during training (without early stopping) and uses the checkpoint with the
    best validation metric for inference.
  prefs: []
  type: TYPE_NORMAL
- en: In a recent [article on intermediate Deep Learning techniques](https://medium.com/towards-data-science/intermediate-deep-learning-with-transfer-learning-f1aba5a814f),
    we have reviewed that currently there seems to be no common understanding of the
    best practices regarding best checkpoint picking. While the [Deep Learning Tuning
    Playbook](https://github.com/google-research/tuning_playbook) [1] recommends using
    best checkpoint picking, Kaggle Grandmasters don’t recommend it because this technique
    tends to overfit the model to the validation set [4].
  prefs: []
  type: TYPE_NORMAL
- en: '[](/intermediate-deep-learning-with-transfer-learning-f1aba5a814f?source=post_page-----cb2063c4a7bd--------------------------------)
    [## Intermediate Deep Learning with Transfer Learning'
  prefs: []
  type: TYPE_NORMAL
- en: A practical guide for fine-tuning Deep Learning models for computer vision and
    natural language processing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/intermediate-deep-learning-with-transfer-learning-f1aba5a814f?source=post_page-----cb2063c4a7bd--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Nonetheless, we will cover how to apply best checkpoint picking to your Deep
    Learning pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Best checkpoint picking in PyTorch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Saving** is similar to [saving a model checkpoint in PyTorch](#c915) but
    with some alterations:'
  prefs: []
  type: TYPE_NORMAL
- en: We [save only the model](#57f0) but no training information like the epoch,
    optimizer state, etc. because we don’t intend to continue training with this model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manually add monitoring of the validation metric during training
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Loading** is the same as[loading an entire model in PyTorch](#57f0).'
  prefs: []
  type: TYPE_NORMAL
- en: Best checkpoint picking in TensorFlow/Keras
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Saving** is similar to [saving a model checkpoint in TensorFlow/Keras](#c0bf)
    but with some alterations:'
  prefs: []
  type: TYPE_NORMAL
- en: Use `save_weights_only = True` to save the entire model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove `.ckpt` from the `PATH` to save the model in SavedModel format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `monitor` and `save_best_only` parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Loading** is the same as[loading an entire model in TensorFlow/Keras](#86ee)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This article reviewed different use cases for saving and loading neural networks
    with the Deep Learning frameworks PyTorch and TensorFlow/Keras. Below you can
    see an overview of the comparison between PyTorch and Keras.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/75f9c46a129ceadac2d7fa4d5259f16f.png)'
  prefs: []
  type: TYPE_IMG
- en: Overview of what is saved when saving a Deep Learning checkpoint or model in
    PyTorch vs. TensorFlow/Keras (Image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: '**Model architecture:** In PyTorch, the model architecture is never saved and
    thus has to be saved with some source code version control in addition. In TensorFlow/Keras
    the model architecture is saved when you save the entire model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model weights:** Both PyTorch and TensorFlow/Keras can save the model weights
    only. However, in PyTorch, this is done when you save the final trained model,
    while in TensorFlow/Keras this applies to checkpointing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enjoyed This Story?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Subscribe for free*](https://medium.com/subscribe/@iamleonie) *to get notified
    when I publish a new story.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@iamleonie/subscribe?source=post_page-----cb2063c4a7bd--------------------------------)
    [## Get an email whenever Leonie Monigatti publishes.'
  prefs: []
  type: TYPE_NORMAL
- en: Get an email whenever Leonie Monigatti publishes. By signing up, you will create
    a Medium account if you don’t already…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@iamleonie/subscribe?source=post_page-----cb2063c4a7bd--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '*Find me on* [*LinkedIn*](https://www.linkedin.com/in/804250ab/),[*Twitter*](https://twitter.com/helloiamleonie)*,
    and* [*Kaggle*](https://www.kaggle.com/iamleonie)*!*'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] V. Godbole, G. E. Dahl, J. Gilmer, C. J. Shallue and Z. Nado (2023). [Deep
    Learning Tuning Playbook](https://github.com/google-research/tuning_playbook)
    (Version 1.0) (accessed February 3rd, 2023)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] M. Inkawhich for PyTorch (2023). [Saving and Loading Models](https://pytorch.org/tutorials/beginner/saving_loading_models.html)
    (accessed March 27th, 2023).'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] [kmario23](https://stackoverflow.com/users/2956066/kmario23) in Stackoverflow
    (2019). [What is the difference between .pt, .pth and .pwf extentions in PyTorch?](https://stackoverflow.com/questions/59095824/what-is-the-difference-between-pt-pth-and-pwf-extentions-in-pytorch)
    (accessed March 27th, 2023).'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] P. Singer and Y. Babakhin (2022). [Practical Tips for Deep Transfer Learning](https://drive.google.com/drive/folders/1VtJF-zPbXc-V-UDl2bDgWJp05DnKZpQH)
    presented at Kaggle Days Paris in November 2022.'
  prefs: []
  type: TYPE_NORMAL
- en: '[5] TensorFlow (2023). [Guide: Save and load Keras models](https://www.tensorflow.org/guide/keras/save_and_serialize)
    (accessed March 27th, 2023).'
  prefs: []
  type: TYPE_NORMAL
- en: '[6] TensorFlow (2023). [Tutorials: Save and load models](https://www.tensorflow.org/tutorials/keras/save_and_load)
    (accessed March 27th, 2023).'
  prefs: []
  type: TYPE_NORMAL
