["```py\nmodel = AutoModelForMaskedLM.from_pretrained(\"bert-base-cased\")\n```", "```py\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-cased\")\n```", "```py\nraw_datasets = load_dataset(\n            'squad',\n            cache_dir='./cache',\n            streaming=False\n        )\n```", "```py\ndef tokenize_function(examples):\n    return tokenizer(examples['text'], return_special_tokens_mask=True)\n\ntokenized_datasets = raw_datasets.map(\n    tokenize_function,\n    batched=True \n)\n```", "```py\ntrainer = Trainer(\n        model=model,\n        args=training_args,\n        train_dataset=train_dataset if training_args.do_train else None,\n        eval_dataset=eval_dataset if training_args.do_eval else None,\n        tokenizer=tokenizer,\n        data_collator=data_collator,\n        compute_metrics=compute_metrics if training_args.do_eval and not is_torch_tpu_available() else None,\n        preprocess_logits_for_metrics=preprocess_logits_for_metrics\n        if training_args.do_eval and not is_torch_tpu_available()\n        else None,\n\ntrainer.train()\n```", "```py\n@dataclass\nclass ModelArguments:\n    \"\"\"\n    Arguments pertaining to which model/config/tokenizer we are going to fine-tune, or train from scratch.\n    \"\"\"\nmodel_name_or_path: Optional[str] = field(\n        default=None,\n        metadata={\n            \"help\": (\n                \"The model checkpoint for weights initialization. Don't set if you want to train a model from scratch.\"\n            )\n        },\n    )\n    model_type: Optional[str] = field(\n        default=None,\n        metadata={\"help\": \"If training from scratch, pass a model type from the list: \" + \", \".join(MODEL_TYPES)},\n    )\n    config_overrides: Optional[str] = field(\n        default=None,\n        metadata={\n            \"help\": (\n                \"Override some existing default config settings when a model is trained from scratch. Example: \"\n                \"n_embd=10,resid_pdrop=0.2,scale_attn_weights=false,summary_type=cls_index\"\n            )\n        },\n    )\n    config_name: Optional[str] = field(\n        default=None, metadata={\"help\": \"Pretrained config name or path if not the same as model_name\"}\n    )\n    tokenizer_name: Optional[str] = field(\n        default=None, metadata={\"help\": \"Pretrained tokenizer name or path if not the same as model_name\"}\n    )\n    cache_dir: Optional[str] = field(\n        default=None,\n        metadata={\"help\": \"Where do you want to store the pretrained models downloaded from huggingface.co\"},\n    )\n    use_fast_tokenizer: bool = field(\n        default=True,\n        metadata={\"help\": \"Whether to use one of the fast tokenizer (backed by the tokenizers library) or not.\"},\n    )\n    model_revision: str = field(\n        default=\"main\",\n        metadata={\"help\": \"The specific model version to use (can be a branch name, tag name or commit id).\"},\n    )\n    token: str = field(\n        default=None,\n        metadata={\n            \"help\": (\n                \"The token to use as HTTP bearer authorization for remote files. If not specified, will use the token \"\n                \"generated when running `huggingface-cli login` (stored in `~/.huggingface`).\"\n            )\n        },\n    )\n    use_auth_token: bool = field(\n        default=None,\n        metadata={\n            \"help\": \"The `use_auth_token` argument is deprecated and will be removed in v4.34\\. Please use `token` instead.\"\n        },\n    )\n    trust_remote_code: bool = field(\n        default=False,\n        metadata={\n            \"help\": (\n                \"Whether or not to allow for custom models defined on the Hub in their own modeling files. This option\"\n                \"should only be set to `True` for repositories you trust and in which you have read the code, as it will \"\n                \"execute code present on the Hub on your local machine.\"\n            )\n        },\n    )\n    low_cpu_mem_usage: bool = field(\n        default=False,\n        metadata={\n            \"help\": (\n                \"It is an option to create the model as an empty shell, then only materialize its parameters when the pretrained weights are loaded. \"\n                \"set True will benefit LLM loading time and RAM consumption.\"\n            )\n        },\n    )\n    def __post_init__(self):\n        if self.config_overrides is not None and (self.config_name is not None or self.model_name_or_path is not None):\n            raise ValueError(\n                \"--config_overrides can't be used in combination with --config_name or --model_name_or_path\"\n            )\n```", "```py\nparser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))\n```", "```py\npython train.py --model_name_or_path bert-base-uncased --per_device_train_batch_size 4 --output_dir ./output --dataset_name squad\n```", "```py\nparser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))\nmodel_args, data_args, training_args = parser.parse_args_into_dataclasses()\n```", "```py\n{\n    \"output_dir\": \"./output\",\n    \"model_name_or_path\": \"bert-base-cased\",\n    \"config_name\": \"some-config.json\",\n    \"cache_dir\": \"/tmp/\", \n    \"dataset_name\": \"glue\", \n    \"dataset_config_name\": \"mrpc\",\n    \"max_seq_length\": 128,\n    \"overwrite_cache\": false\n}\n```", "```py\npython train.py './args.json'\n```", "```py\nparser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))\nmodel_args, data_args, training_args = parser.parse_json_file(json_file=os.path.abspath(sys.argv[1]))\n```", "```py\nargs_dict = {\n    'model_name_or_path': 'prajjwal1/bert-tiny',\n    'per_device_train_batch_size': 1,\n    'per_device_eval_batch_size': 1,\n    \"dataset_name\": \"glue\",\n    \"output_dir\": \"./bert_output\",\n    \"do_train\": True,\n    \"do_eval\": True,\n    \"max_seq_length\": 512,\n    \"learning_rate\": 0.001 ,\n    \"num_train_epochs\": 10,\n    \"logging_strategy\": \"steps\",\n    \"logging_steps\": 100,\n    \"evaluation_strategy\": \"steps\",\n    \"eval_steps\": 100, \n    \"save_strategy\": \"steps\",\n    \"save_steps\": 100,\n}\n\nmodel_args, data_args, training_args = parser.parse_dict(args_dict)\n```", "```py\nimport logging\nimport math\nimport os\nimport sys\nimport warnings\nfrom dataclasses import dataclass, field\nfrom itertools import chain\nfrom typing import Optional\n\nimport datasets\nimport evaluate\nfrom datasets import load_dataset\n\nimport transformers\nfrom transformers import (\n    CONFIG_MAPPING,\n    MODEL_FOR_MASKED_LM_MAPPING, # from here: https://huggingface.co/transformers/v3.3.1/_modules/transformers/modeling_auto.html\n    AutoConfig,\n    AutoModelForMaskedLM,\n    AutoTokenizer,\n    DataCollatorForLanguageModeling,\n    HfArgumentParser,\n    Trainer,\n    TrainingArguments,\n    is_torch_tpu_available,\n    set_seed,\n)\nfrom transformers.trainer_utils import get_last_checkpoint\nfrom transformers.utils import check_min_version, send_example_telemetry\nfrom transformers.utils.versions import require_version\n\nlogger = logging.getLogger(__name__)\nMODEL_CONFIG_CLASSES = list(MODEL_FOR_MASKED_LM_MAPPING.keys())\nMODEL_TYPES = tuple(conf.model_type for conf in MODEL_CONFIG_CLASSES)\n```", "```py\n @dataclass\nclass ModelArguments:\n    \"\"\"\n    Arguments pertaining to which model/config/tokenizer we are going to fine-tune, or train from scratch.\n    \"\"\"\n\n    model_name_or_path: Optional[str] = field(\n        default=None,\n        metadata={\n            \"help\": (\n                \"The model checkpoint for weights initialization. Don't set if you want to train a model from scratch.\"\n            )\n        },\n    )\n    model_type: Optional[str] = field(\n        default=None,\n        metadata={\"help\": \"If training from scratch, pass a model type from the list: \" + \", \".join(MODEL_TYPES)},\n    )\n    config_overrides: Optional[str] = field(\n        default=None,\n        metadata={\n            \"help\": (\n                \"Override some existing default config settings when a model is trained from scratch. Example: \"\n                \"n_embd=10,resid_pdrop=0.2,scale_attn_weights=false,summary_type=cls_index\"\n            )\n        },\n    )\n    config_name: Optional[str] = field(\n        default=None, metadata={\"help\": \"Pretrained config name or path if not the same as model_name\"}\n    )\n    tokenizer_name: Optional[str] = field(\n        default=None, metadata={\"help\": \"Pretrained tokenizer name or path if not the same as model_name\"}\n    )\n    cache_dir: Optional[str] = field(\n        default=None,\n        metadata={\"help\": \"Where do you want to store the pretrained models downloaded from huggingface.co\"},\n    )\n    use_fast_tokenizer: bool = field(\n        default=True,\n        metadata={\"help\": \"Whether to use one of the fast tokenizer (backed by the tokenizers library) or not.\"},\n    )\n    model_revision: str = field(\n        default=\"main\",\n        metadata={\"help\": \"The specific model version to use (can be a branch name, tag name or commit id).\"},\n    )\n    token: str = field(\n        default=None,\n        metadata={\n            \"help\": (\n                \"The token to use as HTTP bearer authorization for remote files. If not specified, will use the token \"\n                \"generated when running `huggingface-cli login` (stored in `~/.huggingface`).\"\n            )\n        },\n    )\n    use_auth_token: bool = field(\n        default=None,\n        metadata={\n            \"help\": \"The `use_auth_token` argument is deprecated and will be removed in v4.34\\. Please use `token` instead.\"\n        },\n    )\n    trust_remote_code: bool = field(\n        default=False,\n        metadata={\n            \"help\": (\n                \"Whether or not to allow for custom models defined on the Hub in their own modeling files. This option\"\n                \"should only be set to `True` for repositories you trust and in which you have read the code, as it will \"\n                \"execute code present on the Hub on your local machine.\"\n            )\n        },\n    )\n    low_cpu_mem_usage: bool = field(\n        default=False,\n        metadata={\n            \"help\": (\n                \"It is an option to create the model as an empty shell, then only materialize its parameters when the pretrained weights are loaded. \"\n                \"set True will benefit LLM loading time and RAM consumption.\"\n            )\n        },\n    )\n\n    def __post_init__(self):\n        if self.config_overrides is not None and (self.config_name is not None or self.model_name_or_path is not None):\n            raise ValueError(\n                \"--config_overrides can't be used in combination with --config_name or --model_name_or_path\"\n            ) \n```", "```py\n @dataclass\nclass DataTrainingArguments:\n    \"\"\"\n    Arguments pertaining to what data we are going to input our model for training and eval.\n    \"\"\"\n\n    dataset_name: Optional[str] = field(\n        default=None, metadata={\"help\": \"The name of the dataset to use (via the datasets library).\"}\n    )\n    dataset_config_name: Optional[str] = field(\n        default=None, metadata={\"help\": \"The configuration name of the dataset to use (via the datasets library).\"}\n    )\n    train_file: Optional[str] = field(default=None, metadata={\"help\": \"The input training data file (a text file).\"})\n    validation_file: Optional[str] = field(\n        default=None,\n        metadata={\"help\": \"An optional input evaluation data file to evaluate the perplexity on (a text file).\"},\n    )\n    overwrite_cache: bool = field(\n        default=False, metadata={\"help\": \"Overwrite the cached training and evaluation sets\"}\n    )\n    validation_split_percentage: Optional[int] = field(\n        default=5,\n        metadata={\n            \"help\": \"The percentage of the train set used as validation set in case there's no validation split\"\n        },\n    )\n    max_seq_length: Optional[int] = field(\n        default=None,\n        metadata={\n            \"help\": (\n                \"The maximum total input sequence length after tokenization. Sequences longer \"\n                \"than this will be truncated.\"\n            )\n        },\n    )\n    preprocessing_num_workers: Optional[int] = field(\n        default=None,\n        metadata={\"help\": \"The number of processes to use for the preprocessing.\"},\n    )\n    mlm_probability: float = field(\n        default=0.15, metadata={\"help\": \"Ratio of tokens to mask for masked language modeling loss\"}\n    )\n    line_by_line: bool = field(\n        default=False,\n        metadata={\"help\": \"Whether distinct lines of text in the dataset are to be handled as distinct sequences.\"},\n    )\n    pad_to_max_length: bool = field(\n        default=False,\n        metadata={\n            \"help\": (\n                \"Whether to pad all samples to `max_seq_length`. \"\n                \"If False, will pad the samples dynamically when batching to the maximum length in the batch.\"\n            )\n        },\n    )\n    max_train_samples: Optional[int] = field(\n        default=None,\n        metadata={\n            \"help\": (\n                \"For debugging purposes or quicker training, truncate the number of training examples to this \"\n                \"value if set.\"\n            )\n        },\n    )\n    max_eval_samples: Optional[int] = field(\n        default=None,\n        metadata={\n            \"help\": (\n                \"For debugging purposes or quicker training, truncate the number of evaluation examples to this \"\n                \"value if set.\"\n            )\n        },\n    )\n    streaming: bool = field(default=False, metadata={\"help\": \"Enable streaming mode\"})\n\n    def __post_init__(self):\n        if self.streaming:\n            require_version(\"datasets>=2.0.0\", \"The streaming feature requires `datasets>=2.0.0`\")\n\n        if self.dataset_name is None and self.train_file is None and self.validation_file is None:\n            raise ValueError(\"Need either a dataset name or a training/validation file.\")\n        else:\n            if self.train_file is not None:\n                extension = self.train_file.split(\".\")[-1]\n                if extension not in [\"csv\", \"json\", \"txt\"]:\n                    raise ValueError(\"`train_file` should be a csv, a json or a txt file.\")\n            if self.validation_file is not None:\n                extension = self.validation_file.split(\".\")[-1]\n                if extension not in [\"csv\", \"json\", \"txt\"]:\n                    raise ValueError(\"`validation_file` should be a csv, a json or a txt file.\")\n```", "```py\nparser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))\n## if arguments are passed as a json file\nif len(sys.argv) == 2 and sys.argv[1].endswith(\".json\"):\n    model_args, data_args, training_args = parser.parse_json_file(json_file=os.path.abspath(sys.argv[1]))\n## if they are passed as command line arguments\nelse:\n    model_args, data_args, training_args = parser.parse_args_into_dataclasses()\n```", "```py\nargs_dict = {\n    'model_name_or_path': 'bert-base-uncased', \n    'per_device_train_batch_size': 1,\n    \"dataset_name\": \"glue\",\n    \"output_dir\": \"./bert_output\",\n    \"do_train\": True,\n    \"do_eval\": True\n}\n## parse the dictionary of arguments\nmodel_args, data_args, training_args = parser.parse_dict(args_dict)\n```", "```py\nModelArguments(model_name_or_path='bert-base-uncased', model_type=None, config_overrides=None, config_name=None, tokenizer_name=None, cache_dir=None, use_fast_tokenizer=True, model_revision='main', token=None, use_auth_token=None, trust_remote_code=False, low_cpu_mem_usage=False)\n```", "```py\nDataTrainingArguments(dataset_name='glue', dataset_config_name=None, train_file=None, validation_file=None, overwrite_cache=False, validation_split_percentage=5, max_seq_length=None, preprocessing_num_workers=None, mlm_probability=0.15, line_by_line=False, pad_to_max_length=False, max_train_samples=None, max_eval_samples=None, streaming=False)\n```", "```py\nTrainingArguments(\n_n_gpu=1,\nadafactor=False,\nadam_beta1=0.9,\nadam_beta2=0.999,\nadam_epsilon=1e-08,\nauto_find_batch_size=False,\nbf16=False,\nbf16_full_eval=False,\ndata_seed=None,\ndataloader_drop_last=False,\ndataloader_num_workers=0,\ndataloader_pin_memory=True,\nddp_bucket_cap_mb=None,\nddp_find_unused_parameters=None,\nddp_timeout=1800,\ndebug=[],\ndeepspeed=None,\ndisable_tqdm=False,\ndo_eval=True,\ndo_predict=False,\ndo_train=True,\n....\n```", "```py\nraw_datasets = load_dataset(\n            data_args.dataset_name,\n            'cola',\n            data_args.dataset_config_name,\n            cache_dir=model_args.cache_dir,\n            token=model_args.token,\n            streaming=data_args.streaming\n        )\n```", "```py\nraw_datasets['train'][0]\n```", "```py\ntokenizer_kwargs = {\n        \"cache_dir\": model_args.cache_dir,\n        \"use_fast\": model_args.use_fast_tokenizer,\n        \"revision\": model_args.model_revision,\n        \"token\": model_args.token,\n        \"trust_remote_code\": model_args.trust_remote_code,\n    }\n\ntokenizer = AutoTokenizer.from_pretrained(model_args.model_name_or_path, **tokenizer_kwargs)\n```", "```py\nBertTokenizerFast(name_or_path='bert-base-uncased', vocab_size=30522, model_max_length=512, is_fast=True, padding_side='right', truncation_side='right', special_tokens={'unk_token': '[UNK]', 'sep_token': '[SEP]', 'pad_token': '[PAD]', 'cls_token': '[CLS]', 'mask_token': '[MASK]'}, clean_up_tokenization_spaces=True)\n```", "```py\nmodel = AutoModelForMaskedLM.from_pretrained(\n            model_args.model_name_or_path,\n            from_tf=bool(\".ckpt\" in model_args.model_name_or_path),\n            config=config,\n            cache_dir=model_args.cache_dir,\n            revision=model_args.model_revision,\n            trust_remote_code=model_args.trust_remote_code,\n            low_cpu_mem_usage=model_args.low_cpu_mem_usage,\n        )\n\n# We resize the embeddings only when necessary to avoid index errors. If you are creating a model from scratch\n# on a small vocab and want a smaller embedding size, remove this test.\nembedding_size = model.get_input_embeddings().weight.shape[0]\nprint(embedding_size, len(tokenizer))\n\nif len(tokenizer) > embedding_size:\n    model.resize_token_embeddings(len(tokenizer))\n```", "```py\n# Preprocessing the datasets.\n# First we tokenize all the texts.\ncolumn_names = list(raw_datasets[\"train\"].features)\ntext_column_name = \"text\" if \"text\" in column_names else column_names[0]\nprint(text_column_name) # prints sentence\n\n# set context length \nmax_seq_length = min(data_args.max_seq_length, tokenizer.model_max_length)\n# this prints 512\n```", "```py\n def tokenize_function(examples):\n    return tokenizer(examples[text_column_name], return_special_tokens_mask=False)\n\nif not data_args.streaming:\n    tokenized_datasets = raw_datasets.map(\n        tokenize_function,\n        batched=True,\n        num_proc=data_args.preprocessing_num_workers,\n        remove_columns=column_names,\n        load_from_cache_file=not data_args.overwrite_cache,\n        desc=\"Running tokenizer on every text in dataset\",)\n```", "```py\n# Main data processing function that will concatenate all texts from our dataset and generate chunks of\n# max_seq_length.\ndef group_texts(examples):\n    # Concatenate all texts.\n    concatenated_examples = {k: list(chain(*examples[k])) for k in examples.keys()}\n    total_length = len(concatenated_examples[list(examples.keys())[0]])\n    # We drop the small remainder, and if the total_length < max_seq_length  we exclude this batch and return an empty dict.\n    # We could add padding if the model supported it instead of this drop, you can customize this part to your needs.\n    total_length = (total_length // max_seq_length) * max_seq_length\n    # Split by chunks of max_len.\n    result = {\n        k: [t[i : i + max_seq_length] for i in range(0, total_length, max_seq_length)]\n        for k, t in concatenated_examples.items()\n    }\n    return result\n\ntokenized_datasets = tokenized_datasets.map(\n                    group_texts,\n                    batched=True,\n                    num_proc=data_args.preprocessing_num_workers,\n                    load_from_cache_file=not data_args.overwrite_cache,\n                    desc=f\"Grouping texts in chunks of {max_seq_length}\",\n                )\n```", "```py\ntrain_dataset = tokenized_datasets[\"train\"]\neval_dataset = tokenized_datasets[\"validation\"]\n```", "```py\ndef preprocess_logits_for_metrics(logits, labels):\n    if isinstance(logits, tuple):\n        # Depending on the model and config, logits may contain extra tensors,\n        # like past_key_values, but logits always come first\n        logits = logits[0]\n    return logits.argmax(dim=-1)\n\nmetric = evaluate.load(\"accuracy\")\n\ndef compute_metrics(eval_preds):\n    preds, labels = eval_preds\n    # preds have the same shape as the labels, after the argmax(-1) has been calculated\n    # by preprocess_logits_for_metrics\n    labels = labels.reshape(-1)\n    preds = preds.reshape(-1)\n    mask = labels != -100\n    labels = labels[mask]\n    preds = preds[mask]\n    return metric.compute(predictions=preds, references=labels)\n```", "```py\ndata_collator = DataCollatorForLanguageModeling(\n        tokenizer=tokenizer,\n        mlm_probability=data_args.mlm_probability,\n        pad_to_multiple_of=8,\n    )\n\n# Initialize our Trainer\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=train_dataset if training_args.do_train else None,\n    eval_dataset=eval_dataset if training_args.do_eval else None,\n    tokenizer=tokenizer,\n    data_collator=data_collator,\n    compute_metrics=compute_metrics if training_args.do_eval and not is_torch_tpu_available() else None,\n    preprocess_logits_for_metrics=preprocess_logits_for_metrics\n    if training_args.do_eval and not is_torch_tpu_available()\n    else None,\n)\n```", "```py\ntrain_result = trainer.train(resume_from_checkpoint=None)\ntrainer.save_model()  # Saves the tokenizer too for easy upload\nmetrics = train_result.metrics\n```", "```py\n \"evaluation_strategy\": \"steps\",\n    \"eval_steps\": 100, \n```"]