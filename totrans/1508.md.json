["```py\nfrom IPython.display import display, HTML\nimport numpy as np\nimport torch\nimport matplotlib.pyplot as plt\nimport cv2\n\ndisplay(HTML(\n\"\"\"\n<a target=\"_blank\" href=\"https://colab.research.google.com/github/facebookresearch/segment-anything/blob/main/notebooks/predictor_example.ipynb\">\n  <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/>\n</a>\n\"\"\"\n))\n\nusing_colab = True\n\nif using_colab:\n    import torch\n    import torchvision\n    print(\"PyTorch version:\", torch.__version__)\n    print(\"Torchvision version:\", torchvision.__version__)\n    print(\"CUDA is available:\", torch.cuda.is_available())\n    import sys\n    !{sys.executable} -m pip install opencv-python matplotlib\n    !{sys.executable} -m pip install 'git+https://github.com/facebookresearch/segment-anything.git'\n\n    !mkdir images\n    !wget -P images https://raw.githubusercontent.com/facebookresearch/segment-anything/main/notebooks/images/truck.jpg\n    !wget -P images https://raw.githubusercontent.com/facebookresearch/segment-anything/main/notebooks/images/groceries.jpg\n\n    !wget https://dl.fbaipublicfiles.com/segment_anything/sam_vit_h_4b8939.pth\n```", "```py\ndef show_mask(mask, ax, random_color=False):\n    if random_color:\n        color = np.concatenate([np.random.random(3), np.array([0.6])], axis=0)\n    else:\n        color = np.array([30/255, 144/255, 255/255, 0.6])\n    h, w = mask.shape[-2:]\n    mask_image = mask.reshape(h, w, 1) * color.reshape(1, 1, -1)\n    ax.imshow(mask_image)\n\ndef show_points(coords, labels, ax, marker_size=375):\n    pos_points = coords[labels==1]\n    neg_points = coords[labels==0]\n    ax.scatter(pos_points[:, 0], pos_points[:, 1], color='green', marker='*', s=marker_size, edgecolor='white', linewidth=1.25)\n    ax.scatter(neg_points[:, 0], neg_points[:, 1], color='red', marker='*', s=marker_size, edgecolor='white', linewidth=1.25) \n```", "```py\nimage = cv2.imread('/content/images/groceries.jpg')\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) \nplt.figure(figsize=(5,5))\nplt.imshow(image)\nplt.axis('on')\nplt.show()\n```", "```py\nsam_checkpoint = \"/content/sam_vit_h_4b8939.pth\"\ndevice = \"cuda\"\nmodel_type = \"default\"\n\nimport sys\nsys.path.append(\"..\")\nfrom segment_anything import sam_model_registry, SamPredictor\n\nsam = sam_model_registry[model_type](checkpoint=sam_checkpoint)\nsam.to(device=device)\n\npredictor = SamPredictor(sam)\n\npredictor.set_image(image)\n```", "```py\ninput_point = np.array([[465, 300]])\ninput_label = np.array([1])\nplt.figure(figsize=(10,10))\nplt.imshow(image)\nshow_points(input_point, input_label, plt.gca())\nplt.axis('on')\nplt.show()\n```", "```py\nmasks, scores, logits = predictor.predict(\n    point_coords=input_point,\n    point_labels=input_label,\n    multimask_output=True,\n)\nprint(masks.shape)  # (number_of_masks) x H x W\n```", "```py\nfor i, (mask, score) in enumerate(zip(masks, scores)):\n    plt.figure(figsize=(10, 10))\n    plt.imshow(image)\n    show_mask(mask, plt.gca())\n    show_points(input_point, input_label, plt.gca())\n    plt.title(f\"Mask {i+1}, Score: {score:.3f}\", fontsize=18)\n    plt.axis('off')\n    plt.show() \n```", "```py\ndef show_anns(anns):\n    if len(anns) == 0:\n        return\n    sorted_anns = sorted(anns, key=(lambda x: x['area']), reverse=True)\n    ax = plt.gca()\n    ax.set_autoscale_on(False)\n    polygons = []\n    color = []\n    for ann in sorted_anns:\n        m = ann['segmentation']\n        img = np.ones((m.shape[0], m.shape[1], 3))\n        color_mask = np.random.random((1, 3)).tolist()[0]\n        for i in range(3):\n            img[:,:,i] = color_mask[i]\n        ax.imshow(np.dstack((img, m*0.35)))\n```", "```py\nfrom segment_anything import sam_model_registry, SamAutomaticMaskGenerator, SamPredictor\n\nsam = sam_model_registry[model_type](checkpoint=sam_checkpoint)\nsam.to(device=device)\n\nmask_generator = SamAutomaticMaskGenerator(sam)\n\nmasks = mask_generator.generate(image)\nprint(len(masks))\n```", "```py\nplt.figure(figsize=(5,5))\nplt.imshow(image)\nshow_anns(masks)\nplt.axis('off')\nplt.show() \n```"]